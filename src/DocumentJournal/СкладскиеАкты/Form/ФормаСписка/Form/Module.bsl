////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		ВосстановитьНастройки();
	КонецЕсли;
	
	СкладПриИзмененииСервер();
	УстановитьТекущуюСтраницу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		СохранитьНастройки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_СписаниеНедостачТоваров"
		Или ИмяСобытия = "Запись_ПорчаТоваров"
		Или ИмяСобытия = "Запись_ПересортицаТоваров"
		Или ИмяСобытия = "Запись_ОприходованиеИзлишковТоваров" Тогда
		Элементы.СписокОснованияКОформлению.Обновить();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
    СкладПриИзмененииСервер();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ СПИСОК ОСНОВАНИЯ К ОФОРМЛЕНИЮ

&НаКлиенте
Процедура СписокОснованияКОформлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ОткрытьЗначение(ТекущиеДанные.Ссылка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ СПИСОК АКТОВ

&НаКлиенте
Процедура СписокАктовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Не МожноСоздаватьОрдера;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СоздатьОприходованиеИзлишковТоваров(Команда)
	ЗначенияЗаполенияАкта = Новый Структура;
	ЗначенияЗаполенияАкта.Вставить("Склад", Склад);
	
	ПараметрыФормыАкта = Новый Структура;
	ПараметрыФормыАкта.Вставить("ЗначенияЗаполнения",ЗначенияЗаполенияАкта);
	
	ОткрытьФорму("Документ.ОприходованиеИзлишковТоваров.ФормаОбъекта",ПараметрыФормыАкта);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПересортицуТоваров(Команда)
	ЗначенияЗаполенияАкта = Новый Структура;
	ЗначенияЗаполенияАкта.Вставить("Склад", Склад);
	
	ПараметрыФормыАкта = Новый Структура;
	ПараметрыФормыАкта.Вставить("ЗначенияЗаполнения",ЗначенияЗаполенияАкта);
	
	ОткрытьФорму("Документ.ПересортицаТоваров.ФормаОбъекта",ПараметрыФормыАкта);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПорчуТоваров(Команда)
	ЗначенияЗаполенияАкта = Новый Структура;
	ЗначенияЗаполенияАкта.Вставить("Склад", Склад);
	
	ПараметрыФормыАкта = Новый Структура;
	ПараметрыФормыАкта.Вставить("ЗначенияЗаполнения",ЗначенияЗаполенияАкта);
	
	ОткрытьФорму("Документ.ПорчаТоваров.ФормаОбъекта",ПараметрыФормыАкта);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписаниеНедостачТоваров(Команда)
	ЗначенияЗаполенияАкта = Новый Структура;
	ЗначенияЗаполенияАкта.Вставить("Склад", Склад);
	
	ПараметрыФормыАкта = Новый Структура;
	ПараметрыФормыАкта.Вставить("ЗначенияЗаполнения",ЗначенияЗаполенияАкта);
	
	ОткрытьФорму("Документ.СписаниеНедостачТоваров.ФормаОбъекта",ПараметрыФормыАкта);
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеИзлишковНедостачТоваров(Команда)
	ТекущиеДанные = Элементы.СписокОснованияКОформлению.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		СтруктураОснования = Новый Структура;
		СтруктураОснования.Вставить("ДокументОснование", ТекущиеДанные.Ссылка);
		СтруктураОснования.Вставить("Склад", ТекущиеДанные.Склад);
		
		ОткрытьФорму("Обработка.ПомощникОформленияСкладскихАктов.Форма", Новый Структура("СтруктураОснования", СтруктураОснования));
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура СкладПриИзмененииСервер()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач",Новый Структура("Склад",Склад)) Тогда
		Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаСообщения;
	Иначе
		Элементы.СтраницыИнформации.ТекущаяСтраница = Элементы.СтраницаПустая;
	КонецЕсли;
		
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Склад));
	
	МожноСоздаватьОрдера = Не ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач",Новый Структура("Склад", Склад));
	
	Элементы.СписокАктовСкопировать.Видимость                  = МожноСоздаватьОрдера; 
	Элементы.СписокАктовГруппаСоздать.Видимость                = МожноСоздаватьОрдера;
	Элементы.СписокАктовСкопировать.Видимость                  = МожноСоздаватьОрдера;
	Элементы.СписокАктовКонтекстноеМенюСкопировать.Видимость   = МожноСоздаватьОрдера;	
	
	СписокОснованияКОформлению.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			СписокАктов.Отбор,
			"Склад",
			Склад,
			ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Склад));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.СписаниеНедостачТоваров.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ОприходованиеИзлишковТоваров.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПересортицаТоваров.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПорчаТоваров.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Элементы.СписокАктов.ТекущаяСтрока = Ссылка;
		
		ОткрытьЗначение(Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ВосстановитьНастройки()
	Перем ЗначениеНастроек;

	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЖурналДокументов.СкладскиеАкты", "НастройкиЖурнала");
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		ЗначениеНастроек.Свойство("Склад", Склад);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	Перем Настройки;

	Настройки = Новый Структура;
	Настройки.Вставить("Склад", Склад);

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЖурналДокументов.СкладскиеАкты", "НастройкиЖурнала", Настройки);

КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницу()
	
	ИмяТекущейСтраницы = "";
	
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

