
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ДоступноДобавлениеИзменениеЧековККМ = РольДоступна(Метаданные.Роли.ПолныеПрава) ИЛИ РольДоступна(Метаданные.Роли.ДобавлениеИзменениеЧековККМ);
	
	ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ОтчетОРозничныхПродажах"
		ИЛИ ИмяСобытия = "Запись_ЧекККМ"
		ИЛИ ИмяСобытия = "Запись_ЧекККМВозврат" Тогда
		
		Элементы.ЧекиККМ.Обновить();
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписковНаКлиенте(КассаККМ);
		УстановитьДоступностьКомандСозданияДокументовНаВозврат();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	КассаККМ = Настройки.Получить("КассаККМ");
	ТолькоТекущаяСмена = Настройки.Получить("ТолькоТекущаяСмена");
	
	ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ);
	
	УстановитьОтборДинамическихСписковНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КассаККМОтборПриИзменении(Элемент)
	
	КассаОтборПриИзмененииСервер();
	УстановитьДоступностьКомандСозданияДокументовНаВозврат();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоТекущаяСменаОтборПриИзменении(Элемент)
	
	УстановитьОтборДинамическихСписковНаКлиенте();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ЧЕКИ ККМ

&НаКлиенте
Процедура ЧекиККМПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандСозданияДокументовНаВозврат();
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекиККМПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ЧекиККМ.ТекущиеДанные;
	Если ТекущиеДанные.Тип = Тип("ДокументСсылка.ЧекККМ") Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
		Если ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
			Отказ = Истина;
			ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаДокументаМастер", ПараметрыОткрытия);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекиККМВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЧекиККМ.ТекущиеДанные;
	Если ТекущиеДанные.Тип = Тип("ДокументСсылка.ЧекККМ") Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
		Если ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") И СменаОткрыта Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаДокументаМастер", ПараметрыОткрытия);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекиККМПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		ТекущиеДанные = Элементы.ЧекиККМ.ТекущиеДанные;
		Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
			ПараметрыОткрытия = Новый Структура("Основание", ТекущиеДанные.Ссылка);
			ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаДокументаМастер", ПараметрыОткрытия);
			Отказ = Истина;
		КонецЕсли;
	Иначе
		ПараметрыОткрытия = Новый Структура("Основание", Новый Структура("КассаККМ", КассаККМ));
		ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаДокументаМастер", ПараметрыОткрытия);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОткрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Ложь;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		// Подключение устройства
		ИдентификаторУстройства                = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		Если ИдентификаторУстройства <> Неопределено ИЛИ ИспользоватьБезПодключенияОборудования Тогда
			
			ОписаниеОшибки = "";
			
			Если Не ИспользоватьБезПодключенияОборудования Тогда
				
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                              ИдентификаторУстройства,
				                                                                              ОписаниеОшибки);
				
			КонецЕсли;
			
			Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					ВходныеПараметры  = Неопределено;
					ВыходныеПараметры = Неопределено;
					
					//Открыть смену на фискальном регистраторе
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "OpenDay",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры);
					
				КонецЕсли;
				
				Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
					
					Результат = ОткрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОписаниеОшибки);
					
					Если Не Результат Тогда
						
						ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
						                            |Смена не открыта.
						                            |Дополнительное описание:
						                            |%ДополнительноеОписание%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
					
				Иначе
					ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
					                      |Смена не открыта на фискальном регистраторе.
					                      |Дополнительное описание:
					                      |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,
					                             "%ДополнительноеОписание%",
					                             ВыходныеПараметры[1]);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
					                                                                 ИдентификаторУстройства);
					
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
				                            |Смена не открыта на фискальном регистраторе.
				                            |Дополнительное описание:
				                            |%ДополнительноеОписание%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписковНаКлиенте(КассаККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Ложь;
	ОшибкаПриСнятииZОтчета = Ложь;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		// Подключение устройства
		ИдентификаторУстройства                = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		Если ИдентификаторУстройства <> Неопределено ИЛИ ИспользоватьБезПодключенияОборудования Тогда
			
			ОписаниеОшибки = "";
			
			Если Не ИспользоватьБезПодключенияОборудования Тогда
				
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                              ИдентификаторУстройства,
				                                                                              ОписаниеОшибки);
				
			КонецЕсли;
		
			Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					ВходныеПараметры  = Неопределено;
					ВыходныеПараметры = Неопределено;
					
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "PrintZReport",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры);
					
				КонецЕсли;
				
				Если Не Результат И Не ИспользоватьБезПодключенияОборудования Тогда
					
					ТекстВопроса = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.
					                    |""%ОписаниеОшибки%""
					                    |
					                    |Если смена на фискальном регистраторе закрыта, то
					                    |нажмите ""Да"" для формирования отчета о розничных продажах.
					                    |
					                    |Закрыть смену?'");
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					
					РезультатВопроса = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
					Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
						Результат = Истина;
					КонецЕсли;
					
					ОшибкаПриСнятииZОтчета = Истина;
					
				КонецЕсли;
				
				Если Не Результат И Не ИспользоватьБезПодключенияОборудования Тогда
					
					ТекстСообщения = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.
					                     |""%ОписаниеОшибки%""
					                     |Отчет на фискальном регистраторе не сформирован.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				Иначе
					
					МассивДокументов = ЗакрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОшибкаПриСнятииZОтчета, ОписаниеОшибки);
					
					// Все результирующие документы выводим пользователю.
					Для Каждого Документ Из МассивДокументов Цикл
						
						ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", Новый Структура("Ключ, ПровестиПриОткрытии", Документ, Истина));
						
					КонецЦикла;
					
					// Текст ошибки должен появиться в окне открытого документа.
					Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
						ТекстСообщения = НСтр("ru = 'Смена закрыта на фискальном регистраторе.
						                      |Дополнительное описание:
						                      |%ДополнительноеОписание%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
					                                                                 ИдентификаторУстройства);
					
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
				                            |Отчет не напечатан и смена не закрыта на фискальном регистраторе.
				                            |Дополнительное описание:
				                            |%ДополнительноеОписание%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписковНаКлиенте(КассаККМ);
	
	Оповестить("Запись_ОтчетОРозничныхПродажах", Новый Структура, МассивДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеКассовойСмены(Команда)
	
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСменыНаКлиенте(КассаККМ);
	УстановитьДоступностьКомандСозданияДокументовНаВозврат();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнесениеДенег(Команда)
	
	Результат = Ложь;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("КассаККМ", КассаККМ);
		СтруктураВыбранныеДанные = ОткрытьФормуМодально("Документ.ВнесениеДенежныхСредствВКассуККМ.Форма.ФормаВыбораРасходногоКассовогоОрдера", ПараметрыОткрытия);
		
		Если СтруктураВыбранныеДанные <> Неопределено Тогда
			
			ОписаниеОшибки = "";
			
			ИдентификаторУстройства                = ПараметрыКассыККМ.ИдентификаторУстройства;
			ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
			
			Если ИдентификаторУстройства <> Неопределено ИЛИ ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					// Подключаем ФР
					Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
					                                                                              ИдентификаторУстройства,
					                                                                              ОписаниеОшибки);
					
				КонецЕсли;
				
				Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
					
					Если Не ИспользоватьБезПодключенияОборудования Тогда
						
						//Готовим данные
						ВходныеПараметры  = Новый Массив();
						ВыходныеПараметры = Неопределено;
						
						ВходныеПараметры.Добавить(1);
						ВходныеПараметры.Добавить(СтруктураВыбранныеДанные.СуммаВнесения);
						
						// Печатаем чек.
						Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
						                                                        "Encash",
						                                                        ВходныеПараметры,
						                                                        ВыходныеПараметры
						);
						
					КонецЕсли;
					
					Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
						
						// Итоговое действие.
						СтруктураВыбранныеДанные.Вставить("Дата", ТекущаяДата());
						
						Результат = СоздатьДокументВнесениеДенежныхСредствВКассуККМ(СтруктураВыбранныеДанные, ОписаниеОшибки);
						Если Не Результат Тогда
							
							ТекстСообщения = НСтр("ru = 'При внесении денежных средств в кассу ККМ произошла ошибка.
							                            |Дополнительное описание:
							                            |%ДополнительноеОписание%'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							
						КонецЕсли;
						
						ОбновитьСостояниеКассовойСменыНаКлиенте(КассаККМ);
						
					Иначе
						
						ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
						                            |Чек не напечатан на фискальном регистраторе.
						                            |Дополнительное описание:
						                            |%ДополнительноеОписание%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,
						                             "%ДополнительноеОписание%",
						                             ВыходныеПараметры[1]);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
					
					Если Не ИспользоватьБезПодключенияОборудования Тогда
						
						// Отключаем ФР
						МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства);
						
					КонецЕсли;
					
				Иначе
					
					ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
					                            |Чек не напечатан на фискальном регистраторе.
					                            |Дополнительное описание:
					                            |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыемкаДенег(Команда)
	
	Результат = Ложь;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ИзымаемаяСумма = 0;
		
		ВозвращенноеЗначение = ОткрытьФормуМодально("Документ.ВыемкаДенежныхСредствИзКассыККМ.Форма.ВводСуммы", Новый Структура("Валюта", СтруктураСостояниеКассовойСмены.Валюта));
		Если ВозвращенноеЗначение <> Неопределено И ТипЗнч(ВозвращенноеЗначение) = Тип("Число") Тогда
		
			ИзымаемаяСумма = ВозвращенноеЗначение;
		
			ОписаниеОшибки = "";
			
			ИдентификаторУстройства                = ПараметрыКассыККМ.ИдентификаторУстройства;
			ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
			
			Если ИдентификаторУстройства <> Неопределено ИЛИ ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					// Подключаем ФР
					Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
					                                                                              ИдентификаторУстройства,
					                                                                              ОписаниеОшибки);
					
				КонецЕсли;
				
				Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
					
					Если Не ИспользоватьБезПодключенияОборудования Тогда
						
						//Готовим данные
						ВходныеПараметры  = Новый Массив();
						ВыходныеПараметры = Неопределено;
						
						ВходныеПараметры.Добавить(0);
						ВходныеПараметры.Добавить(ИзымаемаяСумма);
						
						// Печатаем чек.
						Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
						                                                        "Encash",
						                                                        ВходныеПараметры,
						                                                        ВыходныеПараметры);
						
					КонецЕсли;
					
					Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
						
						// Итоговое действие.
						Результат = СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(Новый Структура("КассаККМ, СуммаВнесения, Дата", КассаККМ, ИзымаемаяСумма, ТекущаяДата()), ОписаниеОшибки);
						Если Не Результат Тогда
							
							ТекстСообщения = НСтр("ru = 'При выемке денежных средств из кассы ККМ произошла ошибка.
							                            |Дополнительное описание:
							                            |%ДополнительноеОписание%'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							
						КонецЕсли;
						
						ОбновитьСостояниеКассовойСменыНаКлиенте(КассаККМ);
						
					Иначе
						
						ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
						                            |Чек не напечатан на фискальном регистраторе.
						                            |Дополнительное описание:
						                            |%ДополнительноеОписание%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,
						                             "%ДополнительноеОписание%",
						                             ВыходныеПараметры[1]);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
					
					Если Не ИспользоватьБезПодключенияОборудования Тогда
						
						// Отключаем ФР
						МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства);
						
					КонецЕсли;
					
				Иначе
					
					ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
					                            |Чек не напечатан на фискальном регистраторе.
					                            |Дополнительное описание:
					                            |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЧекККМ.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЧекККМВозврат.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Элементы.ЧекиККМ.ТекущаяСтрока = Ссылка;
		
		Если  ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЧекККМ")
			И СтатусДокумента(Ссылка) <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит")
			И СменаОткрыта Тогда
			ПараметрыОткрытия = Новый Структура("Ключ", Ссылка);
			ОткрытьФорму("Документ.ЧекККМ.Форма.ФормаДокументаМастер", ПараметрыОткрытия);
		Иначе
			ОткрытьЗначение(Ссылка);
		КонецЕсли;
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервереБезКонтекста
Функция СостояниеКассовойСменыНаСервереБезКонтекста(КассаККМ)
	
	Возврат РозничныеПродажи.ПолучитьСостояниеКассовойСмены(КассаККМ);
	
КонецФункции

&НаСервере
Процедура КассаОтборПриИзмененииСервер()
	
	ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ);
	УстановитьОтборДинамическихСписковНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеКассовойСменыНаСервере(КассаККМ)
	
	СменаОткрыта = Ложь;
	ТекущаяКассоваяСмена = Неопределено;
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		
		СтруктураСостояниеКассовойСмены = СостояниеКассовойСменыНаСервереБезКонтекста(КассаККМ);
		Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.СтатусКассовойСмены) Тогда
			
			ТекстСообщения = НСтр("ru='Смена № %НомерСмены%, Статус: %СтатусСмены% %ВремяИзменения%, В кассе %НаличностьВКассе% %Валюта%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСмены%", СокрЛП(СтруктураСостояниеКассовойСмены.НомерКассовойСмены));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтатусСмены%", СтруктураСостояниеКассовойСмены.СтатусКассовойСмены);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаличностьВКассе%", СтруктураСостояниеКассовойСмены.НаличностьВКассе);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СтруктураСостояниеКассовойСмены.ВалютаПредставление);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВремяИзменения%", Формат(СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса,"ДФ='dd.MM.yy ЧЧ:мм'"));
			
			СостояниеКассовойСмены = ТекстСообщения;
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Смена не открыта, В кассе %НаличностьВКассе% %Валюта%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаличностьВКассе%", СтруктураСостояниеКассовойСмены.НаличностьВКассе);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СтруктураСостояниеКассовойСмены.ВалютаПредставление);
			
			СостояниеКассовойСмены = ТекстСообщения;
			
		КонецЕсли;
		
		// Переменная формы
		СменаОткрыта = СтруктураСостояниеКассовойСмены.СменаОткрыта;
		ТекущаяКассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
		ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(КассаККМ));
	
	Иначе
		
		СостояниеКассовойСмены = НСтр("ru='Касса ККМ не выбрана.'");
		ПараметрыКассыККМ = Неопределено;
		
	КонецЕсли;
	
	// Управление доступностью.
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СнятьZОтчет",                       "Доступность", СменаОткрыта);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОткрытьКассовуюСмену",              "Доступность", НЕ СменаОткрыта И ЗначениеЗаполнено(КассаККМ));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМСоздать",                    "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМСкопировать",                "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМСоздать",     "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМСкопировать", "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВнесениеДенег",                     "Доступность", ЗначениеЗаполнено(КассаККМ));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыемкаДенег",                       "Доступность", ЗначениеЗаполнено(КассаККМ));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбновитьСостояниеКассовойСмены",    "Доступность", ЗначениеЗаполнено(КассаККМ));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеКассовойСменыНаКлиенте(КассаККМ)
	
	СменаОткрыта = Ложь;
	ТекущаяКассоваяСмена = Неопределено;
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
	
		СтруктураСостояниеКассовойСмены = СостояниеКассовойСменыНаСервереБезКонтекста(КассаККМ);
		Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.СтатусКассовойСмены) Тогда
			
			ТекстСообщения = НСтр("ru='Смена № %НомерСмены%, Статус: %СтатусСмены% %ВремяИзменения%, В кассе %НаличностьВКассе% %Валюта%'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСмены%", СокрЛП(СтруктураСостояниеКассовойСмены.НомерКассовойСмены));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтатусСмены%", СтруктураСостояниеКассовойСмены.СтатусКассовойСмены);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаличностьВКассе%", СтруктураСостояниеКассовойСмены.НаличностьВКассе);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СтруктураСостояниеКассовойСмены.ВалютаПредставление);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВремяИзменения%", Формат(СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса,"ДФ='dd.MM.yy ЧЧ:мм'"));
			
			СостояниеКассовойСмены = ТекстСообщения;
			
		Иначе
			
			ТекстСообщения = НСтр("ru='Смена не открыта, В кассе %НаличностьВКассе% %Валюта%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаличностьВКассе%", СтруктураСостояниеКассовойСмены.НаличностьВКассе);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СтруктураСостояниеКассовойСмены.ВалютаПредставление);
			
			СостояниеКассовойСмены = ТекстСообщения;
			
		КонецЕсли;
		
		// Переменная формы
		СменаОткрыта = СтруктураСостояниеКассовойСмены.СменаОткрыта;
		ТекущаяКассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
	
	Иначе
		
		СтруктураСостояниеКассовойСмены = Неопределено;
		СостояниеКассовойСмены = НСтр("ru='Касса ККМ не выбрана.'");
		
	КонецЕсли;
	
	// Управление доступностью.
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СнятьZОтчет",                       "Доступность", СменаОткрыта);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОткрытьКассовуюСмену",              "Доступность", НЕ СменаОткрыта И ЗначениеЗаполнено(КассаККМ));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМСоздать",                    "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМСкопировать",                "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМСоздать",     "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМСкопировать", "Доступность", ЗначениеЗаполнено(КассаККМ) И ДоступноДобавлениеИзменениеЧековККМ);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВнесениеДенег",                     "Доступность", ЗначениеЗаполнено(КассаККМ));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыемкаДенег",                       "Доступность", ЗначениеЗаполнено(КассаККМ));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбновитьСостояниеКассовойСмены",    "Доступность", ЗначениеЗаполнено(КассаККМ));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандСозданияДокументовНаВозврат()
	
	Если СтруктураСостояниеКассовойСмены = Неопределено И ЗначениеЗаполнено(КассаККМ) Тогда
		ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписковНаКлиенте(КассаККМ);
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЧекиККМ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено
		И СтруктураСостояниеКассовойСмены <> Неопределено
		И ТекущиеДанные.Свойство("Тип")
		И ТекущиеДанные.Тип <> Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.НомерЧекаККМ)
			И ТекущиеДанные.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена
			И СменаОткрыта Тогда
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                   "Доступность", Истина);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",         "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                   "Доступность", Истина);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",         "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", Ложь);
			
		Иначе
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                   "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",         "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                   "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",         "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", Ложь);
			
			Если ЗначениеЗаполнено(ТекущиеДанные.НомерЧекаККМ)
				И (ТекущиеДанные.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена И НЕ СменаОткрыта)
				Тогда
				
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                          "Доступность", Ложь);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",                "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании",        "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                   "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",         "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", Истина);
				
			ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.НомерЧекаККМ)
				И (ТекущиеДанные.КассоваяСмена <> СтруктураСостояниеКассовойСмены.КассоваяСмена)
				Тогда
				
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",                "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании",        "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",         "Доступность", Истина);
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", Истина);
			
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                          "Доступность", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",                "Доступность", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании",        "Доступность", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЧекККМВозвратСоздатьНаОсновании",                   "Доступность", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументВозвратТоваровОтКлиентаСоздатьНаОсновании",         "Доступность", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КонтекстноеМенюЧекиККМДокументЗаявкаНаВозвратТоваровОтКлиентаСоздатьНаОсновании", "Доступность", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОткрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОписаниеОшибки = "")
	
	Возврат РозничныеПродажи.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗакрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОшибкаПриСнятииZОтчета, ОписаниеОшибки = "")
	
	Возврат РозничныеПродажи.ВыполнитьОперациюЗакрытияКассовойСмены(КассаККМ, ОшибкаПриСнятииZОтчета, ОписаниеОшибки);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСостояниеКассовойСменыИУстановитьОтборДинамическихСписковНаКлиенте(КассаККМ)
	
	ОбновитьСостояниеКассовойСменыНаКлиенте(КассаККМ);
	
	УстановитьОтборДинамическихСписковНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДинамическихСписковНаКлиенте()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "КассаККМ", КассаККМ, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(КассаККМ));
	
	Если ТолькоТекущаяСмена = 0 Тогда // Все
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "КассоваяСмена", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "Архивный", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "Отложен", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
	ИначеЕсли ТолькоТекущаяСмена = 1 Тогда // Только текущая смена
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "КассоваяСмена", ТекущаяКассоваяСмена, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "Архивный", Ложь, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "Отложен", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
	ИначеЕсли ТолькоТекущаяСмена = 2 Тогда // Все отложенные
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "КассоваяСмена", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "Архивный", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "Отложен", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ИначеЕсли ТолькоТекущаяСмена = 3 Тогда // Отложенные по текущей смене
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "КассоваяСмена", ТекущаяКассоваяСмена, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "Архивный", Ложь, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "Отложен", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтборДинамическихСписковНаКлиенте()

&НаСервере
Процедура УстановитьОтборДинамическихСписковНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "КассаККМ", КассаККМ, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(КассаККМ));
	
	Если ТолькоТекущаяСмена = 0 Тогда // Все
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "КассоваяСмена", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "Архивный", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "Отложен", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
	ИначеЕсли ТолькоТекущаяСмена = 1 Тогда // Только текущая смена
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "КассоваяСмена", ТекущаяКассоваяСмена, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "Архивный", Ложь, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "Отложен", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
	ИначеЕсли ТолькоТекущаяСмена = 2 Тогда // Все отложенные
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "КассоваяСмена", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "Архивный", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "Отложен", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ИначеЕсли ТолькоТекущаяСмена = 3 Тогда // Отложенные по текущей смене
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "КассоваяСмена", ТекущаяКассоваяСмена, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "Архивный", Ложь, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЧекиККМ.Отбор, "Отложен", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатусДокумента(Ссылка)
	
	Возврат Документы.ЧекККМ.СтатусДокумента(Ссылка);
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьДокументВнесениеДенежныхСредствВКассуККМ(ВходныеДанные, ОписаниеОшибки)
	Возврат РозничныеПродажи.СоздатьДокументВнесениеДенежныхСредствВКассуККМ(ВходныеДанные, ОписаниеОшибки);
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(ВходныеДанные, ОписаниеОшибки)
	Возврат РозничныеПродажи.СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(ВходныеДанные, ОписаниеОшибки);
КонецФункции
