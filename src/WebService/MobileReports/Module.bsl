////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Операция записи данных
// записывает пакет изменений принятых от данного узла
//
// Параметры:
//  КодМобильногоКомпьютера	– код узла, с которым идет обмен
//  ДанныеМобильногоПриложения - ХранилищеЗначения, в которое помещен пакет обмена
//
// Возвращаемое значение:
//  нет
//
Функция ЗаписатьДанные(КодМобильногоКомпьютера, ДанныеМобильногоПриложения)

    УзелОбмена = ПланыОбмена.МобильноеПриложениеОтчетыРуководителя.НайтиПоКоду(КодМобильногоКомпьютера); 
    
    Если УзелОбмена.Пустая() Тогда
        ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
    МобильныеОтчетыСервер.ПринятьПакетОбмена(УзелОбмена, ДанныеМобильногоПриложения);
    
КонецФункции

// Операция начала обмена
// проверяет, что нужный узел добавлен в план и правильно инициализирован
//
// Параметры:
//  КодМобильногоКомпьютера	– не изменяемый уникальный идентификатор данного узла, используется как код узла плана обмена
//  НаименованиеМобильногоКомпьютера - читаемое представление данного узла, не обязательно, изменяемое, используется как наименование узла плана обмена
//  НомерОтправленного - номер последнего отправленного пакета, предназначен для восстановления обмена, если узел был удален
//  НомерПринятого - номер последнего принятого пакета, предназначен для восстановления обмена, если узел был удален
//
// Возвращаемое значение:
//  нет
//
Функция НачатьОбмен(КодМобильногоКомпьютера, НаименованиеМобильногоКомпьютера, НомерОтправленного, НомерПринятого, Версия)
    
    Если Число(Версия) <> 1 Тогда
        
        ВызватьИсключение(НСтр("ru='Требуется обновление мобильного приложения!'"));
        
    КонецЕсли;
        
    Если Не ПравоДоступа("Чтение", Метаданные.ПланыОбмена.МобильноеПриложениеОтчетыРуководителя) Тогда
        
        ВызватьИсключение(НСтр("ru='У пользователя ""'") + Пользователи.ТекущийПользователь() + НСтр("ru='"" нет прав на синхронизацию данных с приложением 1С'"));
        
    КонецЕсли;
    
	УстановитьПривилегированныйРежим(Истина);
    
	УзелОбмена = ПланыОбмена.МобильноеПриложениеОтчетыРуководителя.ЭтотУзел().ПолучитьОбъект();
    Если Не ЗначениеЗаполнено(УзелОбмена.Код) Тогда
        
    	УзелОбмена.Код="001";
    	УзелОбмена.Наименование="Центральный";
    	УзелОбмена.Записать();
        
    КонецЕсли;
	
    УзелОбмена = ПланыОбмена.МобильноеПриложениеОтчетыРуководителя.НайтиПоКоду(КодМобильногоКомпьютера); 
    Если УзелОбмена.Пустая() Тогда
        
        НовыйУзел = ПланыОбмена.МобильноеПриложениеОтчетыРуководителя.СоздатьУзел();
        НовыйУзел.Код = КодМобильногоКомпьютера;
        НовыйУзел.Наименование = НаименованиеМобильногоКомпьютера;
        НовыйУзел.НомерОтправленного = НомерОтправленного;
        НовыйУзел.НомерПринятого = НомерПринятого;
        НовыйУзел.Записать();
        МобильныеОтчетыПереопределяемый.ЗарегистрироватьИзмененияДанных(НовыйУзел.Ссылка);
        УзелОбмена = НовыйУзел.Ссылка;
        
    Иначе
        
        Если УзелОбмена.ПометкаУдаления Или            
             УзелОбмена.Наименование <> НаименованиеМобильногоКомпьютера Тогда
             
            Узел = УзелОбмена.ПолучитьОбъект();
            Узел.ПометкаУдаления = Ложь;
            Узел.Наименование = НаименованиеМобильногоКомпьютера;
            Узел.Записать();
            
        КонецЕсли;
        
        Если УзелОбмена.НомерОтправленного <> НомерОтправленного Или
             УзелОбмена.НомерПринятого <> НомерПринятого Тогда
             
            Узел = УзелОбмена.ПолучитьОбъект();
            Узел.НомерОтправленного = НомерОтправленного;
            Узел.НомерПринятого = НомерПринятого;
            Узел.Записать();
            МобильныеОтчетыПереопределяемый.ЗарегистрироватьИзмененияДанных(УзелОбмена);
            
        КонецЕсли;
        
    КонецЕсли;
    
КонецФункции

// Операция получения данных
// получает пакет изменений предназначенных для данного узла
//
// Параметры:
//  КодМобильногоКомпьютера	– код узла, с которым идет обмен
//  ПараметрыОбмена	– параметры, по которым идет обмен
//
// Возвращаемое значение:
//  ХранилищеЗначения, в которое помещен пакет обмена
//
Функция ПолучитьДанные(КодМобильногоКомпьютера, ПараметрыОбмена)
    
    УзелОбмена = ПланыОбмена.МобильноеПриложениеОтчетыРуководителя.НайтиПоКоду(КодМобильногоКомпьютера); 
    
    Если УзелОбмена.Пустая() Тогда
        ВызватьИсключение(НСтр("ru='Неизвестное устройство - '") + КодМобильногоКомпьютера);
	КонецЕсли;
		
	ПереданныеПараметрыОбмена = ПараметрыОбмена.Получить();
	
	МобильныеОтчетыПереопределяемый.ЗарегистрироватьИзмененияДанныхПоПараметрам(УзелОбмена, ПереданныеПараметрыОбмена);	
	
	Возврат МобильныеОтчетыСервер.СформироватьПакетОбмена(УзелОбмена, ПереданныеПараметрыОбмена);
	
КонецФункции

// Операция получения одного варианта анализа 
// получает результат по одному элементу справочника "Варианты анализа целевых показателей"
//
// Параметры:
//  Вариант	– Уникальный идентификатор справочника "Варианты анализа целевых показателей"
//
// Возвращаемое значение:
//  ХранилищеЗначения, в которое помещен вариант анализа
//
Функция ПолучитьРезультатВариантаАнализа(Вариант)
	
	ВариантАнализа = Справочники.ВариантыАнализаЦелевыхПоказателей.ПолучитьСсылку(Вариант);	
    	
	Вариант = МобильныеОтчетыПереопределяемый.ПолучитьРезультатВариантаАнализа(ВариантАнализа);
	
	Возврат Вариант;
	
КонецФункции

// Операция получения одного варианта отчета
// получает результат по одному элементу справочника "Варианты Отчетов"
//
// Параметры:
//  Вариант	– Уникальный идентификатор справочника "Варианты Отчетов"
//  НастройкиОтчета - Настройки компоновки данных отчета
//
// Возвращаемое значение:
//  ХранилищеЗначения, в которое помещен вариант отчета
//
Функция ПолучитьРезультатВариантаОтчета(Вариант, НастройкиОтчета)
	
	ВариантОтчета = Справочники.ВариантыОтчетов.ПолучитьСсылку(Вариант);
			
	Вариант = МобильныеОтчетыПереопределяемый.ПолучитьРезультатВариантаОтчета(ВариантОтчета, НастройкиОтчета);
	
	Возврат Вариант;
	
КонецФункции
