#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, Замещение)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ПроведениеСервер.РассчитыватьИзменения(ДополнительныеСвойства) Тогда
		СформироватьТаблицуИсходныхДвижений();
	КонецЕсли;

	СФормироватьТаблицуРаспоряжений();

	УстановитьБлокировкиДанныхДляРасчетаГрафика();

КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ПроведениеСервер.РассчитыватьИзменения(ДополнительныеСвойства) Тогда
		СформироватьТаблицуИзмененийДвижений();
	КонецЕсли;

	РассчитатьИтогиРегистраОстаткиТоваровПоГрафику();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьТаблицуИсходныхДвижений()

	// 1. Получение информации о наборе.
	СтруктураВременныеТаблицы = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	
	Если Не СтруктураВременныеТаблицы.Свойство("СтруктураКонтроляОстатков") Тогда

		ДанныеДляБлокировки = ПроведениеСервер.ПолучитьДанныеДляБлокировки(ЭтотОбъект);
		СтруктураВременныеТаблицы.Вставить("СтруктураКонтроляОстатков", ДанныеДляБлокировки.СтруктураКонтроляОстатков);

		УстановитьБлокировкуГрафика           = СтруктураВременныеТаблицы.СтруктураКонтроляОстатков.НеобходимКонтрольГрафика;
		УстановитьБлокировкуСвободныхОстатков = СтруктураВременныеТаблицы.СтруктураКонтроляОстатков.НеобходимКонтрольОстатков;

	Иначе

		УстановитьБлокировкуГрафика           = Ложь;
		УстановитьБлокировкуСвободныхОстатков = Ложь;

	КонецЕсли;

	// Если в наборе нет складов с контролем.
	Если Не СтруктураВременныеТаблицы.СтруктураКонтроляОстатков.НеобходимКонтрольОстатков Тогда
		
		ДополнительныеСвойства.РассчитыватьИзменения = Ложь;
		Возврат;
		
	КонецЕсли;

	// 2. Блокировка необходимых ресурсов.
	Блокировка = Неопределено;

	Если УстановитьБлокировкуГрафика Тогда

		Блокировка = Новый БлокировкаДанных;

		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ГрафикДвиженияТоваров");
		ЭлементБлокировки.Режим          = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Выгрузить(ДанныеДляБлокировки.МассивСтрокБлокировкиГрафика, "Номенклатура, Характеристика, Склад");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура",   "Номенклатура");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад",          "Склад");

	КонецЕсли;

	Если УстановитьБлокировкуСвободныхОстатков Тогда

		Если Блокировка = Неопределено Тогда 
			
			Блокировка = Новый БлокировкаДанных;
			
		КонецЕсли;

		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.СвободныеОстатки");
		ЭлементБлокировки.Режим          = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Выгрузить(ДанныеДляБлокировки.МассивСтрокБлокировкиОстатков, "Номенклатура, Характеристика, Склад");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура",   "Номенклатура");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад",          "Склад");

	КонецЕсли;

	Если Не Блокировка = Неопределено Тогда 
		
		Блокировка.Заблокировать();
		
	КонецЕсли;

	Если Не СтруктураВременныеТаблицы.СтруктураКонтроляОстатков.НеобходимКонтрольГрафика Тогда
		
		ДополнительныеСвойства.РассчитыватьИзменения = Ложь;
		Возврат;
		
	КонецЕсли;

	// 3. Формирование таблиц.
	// Текущее состояние набора помещается во временную таблицу "ДвиженияПередЗаписью",
	// чтобы при записи получить изменение нового набора относительно текущего.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("ЭтоНовый",    ДополнительныеСвойства.ЭтоНовый);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	Запрос.МенеджерВременныхТаблиц = СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Период         КАК Период,
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Склад          КАК Склад,
	|	ВЫБОР
	|		КОГДА Таблица.СрокПоставки = 0 ТОГДА
	|			 -9999999999
	|		ИНАЧЕ
	|			-Таблица.СрокПоставки
	|	КОНЕЦ                        КАК СрокПоставки,
	|	-Таблица.ПланируемаяОтгрузка КАК ПланируемаяОтгрузкаПередЗаписью
	|
	|ПОМЕСТИТЬ ДвижениеТоваровПередЗаписью
	|
	|ИЗ
	|	РегистрНакопления.ДвижениеТоваров КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаХарактеристика
	|		ПО Таблица.Склад = НастройкаХарактеристика.Склад
	|			И Таблица.Номенклатура = НастройкаХарактеристика.Номенклатура
	|			И Таблица.Характеристика = НастройкаХарактеристика.Характеристика
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаНоменклатура
	|		ПО Таблица.Склад = НастройкаНоменклатура.Склад
	|			И Таблица.Номенклатура = НастройкаНоменклатура.Номенклатура
	|			И (НастройкаНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (НастройкаХарактеристика.Склад ЕСТЬ NULL )
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаСклад
	|		ПО Таблица.Склад = НастройкаСклад.Склад
	|			И (НастройкаСклад.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|			И (НастройкаСклад.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (НастройкаХарактеристика.Склад ЕСТЬ NULL )
	|			И (НастройкаНоменклатура.Склад ЕСТЬ NULL )
	|ГДЕ
	|	Таблица.Регистратор = &Регистратор
	|	И ЕСТЬNULL(НастройкаХарактеристика.ВариантКонтроля,
	|			ЕСТЬNULL(НастройкаНоменклатура.ВариантКонтроля,
	|				НастройкаСклад.ВариантКонтроля)) = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика)
	|	И Таблица.ПланируемаяОтгрузка > 0
	|	И (НЕ &ЭтоНовый)";
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура СформироватьТаблицуИзмененийДвижений()

	// Рассчитывается изменение нового набора относительно текущего с учетом накопленных изменений
	// и помещается во временную таблицу.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИзменений.Период КАК Период,
	|	ТаблицаИзменений.Номенклатура КАК Номенклатура,
	|	ТаблицаИзменений.Характеристика КАК Характеристика,
	|	ТаблицаИзменений.Склад КАК Склад,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика) КАК ВариантКонтроля,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ТаблицаИзменений.ГраницаКонтроляСрокПоставки) <> ДАТАВРЕМЯ(1, 1, 1)
	|				И МАКСИМУМ(ТаблицаИзменений.ГраницаКонтроляСрокПоставки) < МАКСИМУМ(ТаблицаИзменений.ГраницаКонтроля)
	|			ТОГДА МАКСИМУМ(ТаблицаИзменений.ГраницаКонтроляСрокПоставки)
	|		ИНАЧЕ МАКСИМУМ(ТаблицаИзменений.ГраницаКонтроля)
	|	КОНЕЦ КАК ГраницаКонтроля,
	|	СУММА(ТаблицаИзменений.ПланируемаяОтгрузкаУвеличениеПрихода) КАК ПланируемаяОтгрузкаУвеличениеПрихода
	|ПОМЕСТИТЬ ДвиженияДвижениеТоваровИзменение
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Период КАК Период,
	|		Таблица.Номенклатура КАК Номенклатура,
	|		Таблица.Характеристика КАК Характеристика,
	|		Таблица.Склад КАК Склад,
	|		Таблица.СрокПоставки КАК СрокПоставки,
	|		ДАТАВРЕМЯ(1, 1, 1) КАК ГраницаКонтроляСрокПоставки,
	|		ДАТАВРЕМЯ(1, 1, 1) КАК ГраницаКонтроля,
	|		Таблица.ПланируемаяОтгрузкаПередЗаписью КАК ПланируемаяОтгрузкаУвеличениеПрихода
	|	ИЗ
	|		ДвижениеТоваровПередЗаписью КАК Таблица
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Период,
	|		Таблица.Номенклатура,
	|		Таблица.Характеристика,
	|		Таблица.Склад,
	|		Таблица.СрокПоставки,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(НастройкаХарактеристика.ВариантКонтроля, ЕСТЬNULL(НастройкаНоменклатура.ВариантКонтроля, НастройкаСклад.ВариантКонтроля)) = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика)
	|				ТОГДА ВЫБОР
	|						КОГДА Таблица.СрокПоставки > 0
	|							ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, Таблица.СрокПоставки - 1)
	|						ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|					КОНЕЦ
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(НастройкаХарактеристика.ВариантКонтроля, ЕСТЬNULL(НастройкаНоменклатура.ВариантКонтроля, НастройкаСклад.ВариантКонтроля)) = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика)
	|				ТОГДА ВЫБОР
	|						КОГДА НЕ НастройкаХарактеристика.ВариантКонтроля ЕСТЬ NULL 
	|							ТОГДА ВЫБОР
	|									КОГДА НастройкаХарактеристика.ГраницаГрафикаДоступности >= &ТекущаяДата
	|										ТОГДА НастройкаХарактеристика.ГраницаГрафикаДоступности
	|									КОГДА НастройкаХарактеристика.СрокПоставки > 0
	|										ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, НастройкаХарактеристика.СрокПоставки - 1)
	|									ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|								КОНЕЦ
	|						КОГДА НЕ НастройкаНоменклатура.ВариантКонтроля ЕСТЬ NULL 
	|							ТОГДА ВЫБОР
	|									КОГДА НастройкаНоменклатура.ГраницаГрафикаДоступности >= &ТекущаяДата
	|										ТОГДА НастройкаНоменклатура.ГраницаГрафикаДоступности
	|									КОГДА НастройкаНоменклатура.СрокПоставки > 0
	|										ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, НастройкаНоменклатура.СрокПоставки - 1)
	|									ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|								КОНЕЦ
	|						ИНАЧЕ ВЫБОР
	|								КОГДА НастройкаСклад.ГраницаГрафикаДоступности >= &ТекущаяДата
	|									ТОГДА НастройкаСклад.ГраницаГрафикаДоступности
	|								КОГДА НастройкаСклад.СрокПоставки > 0
	|									ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, НастройкаСклад.СрокПоставки - 1)
	|								ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ,
	|		Таблица.ПланируемаяОтгрузка
	|	ИЗ
	|		РегистрНакопления.ДвижениеТоваров КАК Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаХарактеристика
	|			ПО Таблица.Склад = НастройкаХарактеристика.Склад
	|				И Таблица.Номенклатура = НастройкаХарактеристика.Номенклатура
	|				И Таблица.Характеристика = НастройкаХарактеристика.Характеристика
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаНоменклатура
	|			ПО Таблица.Склад = НастройкаНоменклатура.Склад
	|				И Таблица.Номенклатура = НастройкаНоменклатура.Номенклатура
	|				И (НастройкаНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|				И (НастройкаХарактеристика.Склад ЕСТЬ NULL )
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаСклад
	|			ПО Таблица.Склад = НастройкаСклад.Склад
	|				И (НастройкаСклад.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|				И (НастройкаСклад.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|				И (НастройкаХарактеристика.Склад ЕСТЬ NULL )
	|				И (НастройкаНоменклатура.Склад ЕСТЬ NULL )
	|	ГДЕ
	|		Таблица.Регистратор = &Регистратор
	|		И Таблица.ПланируемаяОтгрузка > 0
	|		И ЕСТЬNULL(НастройкаХарактеристика.ВариантКонтроля, ЕСТЬNULL(НастройкаНоменклатура.ВариантКонтроля, НастройкаСклад.ВариантКонтроля)) = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика)) КАК ТаблицаИзменений
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИзменений.Период,
	|	ТаблицаИзменений.Номенклатура,
	|	ТаблицаИзменений.Характеристика,
	|	ТаблицаИзменений.Склад
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ТаблицаИзменений.ПланируемаяОтгрузкаУвеличениеПрихода) > 0
	|		ИЛИ СУММА(ТаблицаИзменений.СрокПоставки) > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДвижениеТоваровПередЗаписью";
	
	Выборка = Запрос.ВыполнитьПакет()[0].Выбрать();
	Выборка.Следующий();

	// Добавляется информация о ее существовании и наличии в ней записей об изменении.
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.Вставить("ДвиженияДвижениеТоваровИзменение", Выборка.Количество > 0);

КонецПроцедуры

// Процедура добавляет запись в набор ГрафикДвиженияТоваров.
//
Процедура ДобавитьЗаписьВГрафик(НаборЗаписей, Выборка, Количество, ВидДвижения, ИмяРесурса = Неопределено)

	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, Выборка, "Период, Номенклатура, Характеристика, Склад, Назначение");
	Запись.ДатаСобытия = Запись.Период;
	Запись.ВидДвижения = ВидДвижения;

	Если ИмяРесурса = Неопределено Тогда 

		Если ЗначениеЗаполнено(Выборка.Назначение) Тогда

			Запись.КоличествоПодЗаказ = Количество;

		Иначе

			Запись.Количество = Количество;

		КонецЕсли;

	Иначе

		Запись[ИмяРесурса] = Количество;

	КонецЕсли;

КонецПроцедуры

// Процедура рассчитывает и записывает итог запланированного поступления по распоряжению а регистр 
// ГрафикДвиженияТоваров (в регистр записи пишутся только из этого модуля).
// Все плановые поступления\отгрузки записываются в регистр движения товаров. Дата поступления\отгрузки
// указывается в "Периоде". При фактическом поступлении\отгрузке по заказу происходит закрытие графика
// поступления\отгрузки по ФИФО. Рассчитанные записи записываются под распоряжение. Если поступило\отгрузили
// больше, чем в заказе - отрицательные остатки в регистр не пишутся.
//
Процедура РассчитатьИтогиРегистраОстаткиТоваровПоГрафику()

	ТаблицаРаспоряжений = ДополнительныеСвойства.ТаблицаРаспоряжений;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивРаспоряжений", ТаблицаРаспоряжений.ВыгрузитьКолонку("Распоряжение"));
	Запрос.Текст =
	"
	|ВЫБРАТЬ
	|	Движения.Распоряжение                  КАК Распоряжение,
	|	Движения.Номенклатура                  КАК Номенклатура,
	|	Движения.Характеристика                КАК Характеристика,
	|	Движения.Назначение                    КАК Назначение,
	|	Движения.Склад                         КАК Склад,
	|	СУММА(ВЫБОР КОГДА Движения.Корректировка ТОГДА
	|
	|			-Движения.ПланируемоеПоступление
	|				- Движения.ПланируемоеПоступлениеПодЗаказ
	|
	|		ИНАЧЕ
	|
	|			Движения.ПланируемоеПоступление
	|				+ Движения.ПланируемоеПоступлениеПодЗаказ
	|
	|	КОНЕЦ)                                  КАК ПланируемоеПоступлениеОстаток,
	|
	|	СУММА(ВЫБОР КОГДА Движения.Корректировка ТОГДА
	|
	|			-Движения.ПланируемаяОтгрузка
	|				- Движения.ПланируемаяОтгрузкаПодЗаказ
	|
	|		ИНАЧЕ
	|
	|			Движения.ПланируемаяОтгрузка
	|				+ Движения.ПланируемаяОтгрузкаПодЗаказ
	|
	|	КОНЕЦ)                                  КАК ПланируемаяОтгрузкаОстаток,
	|
	|	СУММА(ВЫБОР КОГДА Движения.Корректировка ТОГДА
	|
	|			-Движения.ПланируемаяОтгрузкаСоСклада
	|
	|		ИНАЧЕ
	|
	|			Движения.ПланируемаяОтгрузкаСоСклада
	|
	|	КОНЕЦ)                                  КАК ПланируемаяОтгрузкаСоСкладаОстаток
	|
	|
	|ПОМЕСТИТЬ ОстаткиПоРаспоряжению
	|
	|ИЗ
	|
	|	РегистрНакопления.ДвижениеТоваров КАК Движения
	|
	|ГДЕ
	|
	|	Движения.Распоряжение В(&МассивРаспоряжений)
	|	И Движения.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	Движения.Номенклатура,
	|	Движения.Характеристика,
	|	Движения.Склад,
	|	Движения.Распоряжение, Движения.Назначение 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Распоряжение, Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Таблица.Период, ДЕНЬ)   КАК Период,
	|	Таблица.Номенклатура                  КАК Номенклатура,
	|	Таблица.Характеристика                КАК Характеристика,
	|	Таблица.Назначение                    КАК Назначение,
	|	Таблица.Склад                         КАК Склад,
	|	Таблица.Распоряжение                  КАК Распоряжение,
	|
	|	СУММА(Таблица.ПланируемоеПоступление
	|		+ Таблица.ПланируемоеПоступлениеПодЗаказ) КАК ПланируемоеПоступление,
	|
	|	СУММА(Таблица.ПланируемаяОтгрузка
	|		+ Таблица.ПланируемаяОтгрузкаПодЗаказ)    КАК ПланируемаяОтгрузка,
	|
	|	СУММА(Таблица.ПланируемаяОтгрузкаСоСклада)    КАК ПланируемаяОтгрузкаСоСклада
	|
	|ПОМЕСТИТЬ ПланДвижения
	|
	|ИЗ
	|
	|	РегистрНакопления.ДвижениеТоваров КАК Таблица
	|
	|ГДЕ
	|	Таблица.Распоряжение В(&МассивРаспоряжений)
	|
	|	И (Таблица.ПланируемоеПоступление > 0
	|			Или Таблица.ПланируемоеПоступлениеПодЗаказ > 0
	|
	|		Или Таблица.ПланируемаяОтгрузка > 0
	|			Или Таблица.ПланируемаяОтгрузкаПодЗаказ > 0 
	|				Или Таблица.ПланируемаяОтгрузкаСоСклада > 0)
	|
	|	И Таблица.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Таблица.Период, ДЕНЬ),
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Склад,
	|	Таблица.Распоряжение,
	|	Таблица.Назначение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Распоряжение, Назначение
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	План.Период                                     КАК Период,
	|	План.Номенклатура                               КАК Номенклатура,
	|	План.Характеристика                             КАК Характеристика,
	|	План.Назначение                                 КАК Назначение,
	|	План.Распоряжение                               КАК Распоряжение,
	|	План.Склад                                      КАК Склад,
	|	План.ПланируемоеПоступление                     КАК ПланируемоеПоступление,
	|	План.ПланируемаяОтгрузка                        КАК ПланируемаяОтгрузка,
	|	План.ПланируемаяОтгрузкаСоСклада                КАК ПланируемаяОтгрузкаСоСклада,
	|	ЕСТЬNULL(Остатки.ПланируемоеПоступлениеОстаток, 0) КАК ПланируемоеПоступлениеОстаток,
	|	ЕСТЬNULL(Остатки.ПланируемаяОтгрузкаОстаток, 0)    КАК ПланируемаяОтгрузкаОстаток,
	|	ЕСТЬNULL(Остатки.ПланируемаяОтгрузкаСоСкладаОстаток, 0)  КАК ПланируемаяОтгрузкаСоСкладаОстаток
	|
	|ИЗ
	|	ПланДвижения КАК План
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоРаспоряжению КАК Остатки
	|		ПО План.Номенклатура      = Остатки.Номенклатура
	|			И План.Характеристика = Остатки.Характеристика
	|			И План.Склад          = Остатки.Склад
	|			И План.Распоряжение   = Остатки.Распоряжение
	|			И План.Назначение     = Остатки.Назначение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Распоряжение,
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Период УБЫВ
	|";
	НаборЗаписей = РегистрыНакопления.ГрафикДвиженияТоваров.СоздатьНаборЗаписей();
	Выборка           = Запрос.Выполнить().Выбрать();
	ЕстьЗаписиВВыборке = Выборка.Следующий();
	Пока ЕстьЗаписиВВыборке Цикл

		ТекСклад          = Неопределено;
		ТекНоменклатура   = Неопределено;
		ТекХарактеристика = Неопределено;
		ТекНазначение     = Неопределено;
		ТекРаспоряжение   = Выборка.Распоряжение;

		НаборЗаписей.Отбор.Регистратор.Установить(ТекРаспоряжение);
		// Из таблицы удаляем отработанное распоряжение
		ТаблицаРаспоряжений.Удалить(ТаблицаРаспоряжений.Найти(ТекРаспоряжение, "Распоряжение"));

		// Цикл по строкам одного распоряжения на поступление\отгрузку.
		Пока ЕстьЗаписиВВыборке И Выборка.Распоряжение = ТекРаспоряжение Цикл

			Если ТекНоменклатура <> Выборка.Номенклатура Или ТекХарактеристика <> Выборка.Характеристика
			 Или ТекСклад <> Выборка.Склад Или ТекНазначение <> Выборка.Назначение  Тогда

				ТекНоменклатура   = Выборка.Номенклатура;
				ТекХарактеристика = Выборка.Характеристика;
				ТекСклад          = Выборка.Склад;
				ТекНазначение     = Выборка.Назначение;

				ПоступлениеКоличествоОстаток = 0;
				Если Выборка.ПланируемоеПоступлениеОстаток > 0 Тогда
					ПоступлениеКоличествоОстаток = Выборка.ПланируемоеПоступлениеОстаток;
				КонецЕсли;

				ОтгрузкаКоличествоОстаток = 0;
				Если Выборка.ПланируемаяОтгрузкаОстаток > 0 Тогда
					ОтгрузкаКоличествоОстаток = Выборка.ПланируемаяОтгрузкаОстаток;
				КонецЕсли;

				ОтгрузкаСкладаКоличествоОстаток = 0;
				Если Выборка.ПланируемаяОтгрузкаСоСкладаОстаток > 0 Тогда
					ОтгрузкаСкладаКоличествоОстаток = Выборка.ПланируемаяОтгрузкаСоСкладаОстаток;
				КонецЕсли;

			КонецЕсли;

			// По поступлению.
			КоличествоПоступление = 0;
			Если Выборка.ПланируемоеПоступление > 0 Тогда

				КоличествоПоступление = Мин(Выборка.ПланируемоеПоступление, ПоступлениеКоличествоОстаток);
				Если КоличествоПоступление > 0 Тогда
					ДобавитьЗаписьВГрафик(НаборЗаписей, Выборка, КоличествоПоступление, ВидДвиженияНакопления.Приход);
				КонецЕсли;

			КонецЕсли;
			ПоступлениеКоличествоОстаток = ПоступлениеКоличествоОстаток - КоличествоПоступление;

			// По отгрузке.
			КоличествоОтгрузка = 0;
			Если Выборка.ПланируемаяОтгрузка > 0 Тогда

				КоличествоОтгрузка = Мин(Выборка.ПланируемаяОтгрузка, ОтгрузкаКоличествоОстаток);
				Если КоличествоОтгрузка > 0 Тогда
					ДобавитьЗаписьВГрафик(НаборЗаписей, Выборка, КоличествоОтгрузка, ВидДвиженияНакопления.Расход);
				КонецЕсли;

			КонецЕсли;
			ОтгрузкаКоличествоОстаток = ОтгрузкаКоличествоОстаток - КоличествоОтгрузка;

			// По отгрузке со склада.
			КоличествоОтгрузкаСоСклада = 0;
			Если Выборка.ПланируемаяОтгрузкаСоСклада > 0 Тогда

				КоличествоОтгрузкаСоСклада = Мин(Выборка.ПланируемаяОтгрузкаСоСклада, ОтгрузкаСкладаКоличествоОстаток);
				Если КоличествоОтгрузкаСоСклада > 0 Тогда
					ДобавитьЗаписьВГрафик(НаборЗаписей, Выборка, КоличествоОтгрузкаСоСклада, ВидДвиженияНакопления.Расход, "КоличествоСоСклада");
				КонецЕсли;

			КонецЕсли;
			ОтгрузкаСкладаКоличествоОстаток = ОтгрузкаСкладаКоличествоОстаток - КоличествоОтгрузкаСоСклада;

			// Переход к следующей записи в выборке.
			ЕстьЗаписиВВыборке = Выборка.Следующий();

		КонецЦикла;

		// Запись и очистка набора.
		НаборЗаписей.Записать(Истина);
		НаборЗаписей.Очистить();

	КонецЦикла;

	// По неотработанным распоряжениям нужно очистить движения.
	Если ТаблицаРаспоряжений.Количество() > 0 Тогда
		Для Каждого СтрокаТаб Из ТаблицаРаспоряжений Цикл

			НаборЗаписей.Отбор.Регистратор.Установить(СтрокаТаб.Распоряжение);
			НаборЗаписей.Записать(Истина);
			НаборЗаписей.Очистить();

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Процедура формирует таблицу распоряжений, которые были раньше в движениях и которые сейчас будут записаны.
//
Процедура СФормироватьТаблицуРаспоряжений()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Распоряжение КАК Распоряжение
	|ИЗ
	|	РегистрНакопления.ДвижениеТоваров КАК Таблица
	|ГДЕ
	|	Таблица.Регистратор = &Регистратор
	|";
	ТаблицаРаспоряжений = Запрос.Выполнить().Выгрузить();
	ТаблицаНовыхРаспоряжений = Выгрузить(, "Распоряжение");
	ТаблицаНовыхРаспоряжений.Свернуть("Распоряжение");
	Для Каждого Запись Из ТаблицаНовыхРаспоряжений Цикл

		Если ТаблицаРаспоряжений.Найти(Запись.Распоряжение, "Распоряжение") = Неопределено Тогда
			ТаблицаРаспоряжений.Добавить().Распоряжение = Запись.Распоряжение;
		КонецЕсли;

	КонецЦикла;

	ДополнительныеСвойства.Вставить("ТаблицаРаспоряжений", ТаблицаРаспоряжений);

КонецПроцедуры

Процедура УстановитьБлокировкиДанныхДляРасчетаГрафика()

	Блокировка = Новый БлокировкаДанных;

	// Блокировка регистра для подсчета остатков по распоряжениям.
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДвижениеТоваров");
	ЭлементБлокировки.Режим          = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.ИсточникДанных = ДополнительныеСвойства.ТаблицаРаспоряжений;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Распоряжение", "Распоряжение");

	// Блокировка набора для записи.
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ГрафикДвиженияТоваров.НаборЗаписей");
	ЭлементБлокировки.Режим          = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ДополнительныеСвойства.ТаблицаРаспоряжений;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Распоряжение");

	Блокировка.Заблокировать();

КонецПроцедуры


#КонецЕсли