////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустой() Тогда
		
		ТекстИсключения = НСтр("ru = 'Создавать настройки можно только из форм склада (помещения) с адресным хранением остатков.'");
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Создание регламентное задание (получение уникального идентификатора)
	УстановитьПривилегированныйРежим(Истина);
		
	Если Не ЗначениеЗаполнено(ТекущийОбъект.РегламентноеЗадание) Тогда
		Задание = Неопределено;
	Иначе
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ТекущийОбъект.РегламентноеЗадание);
	КонецЕсли;
	
	Если Задание = Неопределено Тогда
		Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.РасчетПоказателейПрогнозаРасходаУпаковок);
	КонецЕсли;
	
	Задание.Использование = Запись.ИспользоватьПодпитку;
	Задание.Наименование = НСтр("ru = 'Расчет показателей прогноза расхода упаковок на складе '") + СкладыСервер.ПолучитьПредставлениеСклада(ТекущийОбъект.Склад, ТекущийОбъект.Помещение);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(Запись.Склад);
	ПараметрыЗадания.Добавить(Запись.Помещение);
	
	Задание.Параметры  = ПараметрыЗадания;
	Задание.Расписание = Расписание;
	
	Задание.Записать();
	
	ТекущийОбъект.РегламентноеЗадание = Задание.УникальныйИдентификатор;
				
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	Расписание = Новый РасписаниеРегламентногоЗадания;
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторЗадания = Запись.РегламентноеЗадание;
	
	Если ТипЗнч(ИдентификаторЗадания) = Тип("УникальныйИдентификатор") Тогда
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если Задание <> Неопределено Тогда
			Расписание                            = Задание.Расписание;
			Элементы.РасписаниеСтрокой.Заголовок  = Строка(Расписание);
		КонецЕсли;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Ложь);
		
	УстановитьДоступность(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьИнтерфейс();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ИспользоватьПодпиткуПриИзменении(Элемент)
	УстановитьДоступность(ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура НастроитьРасписание(Команда)
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	Если ДиалогРасписания.ОткрытьМодально() Тогда
		
		Расписание                            = ДиалогРасписания.Расписание;
		Элементы.РасписаниеСтрокой.Заголовок  = Строка(Расписание);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступность(Форма)
	Форма.Элементы.КоличествоДнейАнализа.Доступность              = Форма.Запись.ИспользоватьПодпитку;
	Форма.Элементы.МинимальнаяВероятностьОтгрузки.Доступность     = Форма.Запись.ИспользоватьПодпитку;
	Форма.Элементы.УровеньОбслуживанияУпаковокКлассаX.Доступность = Форма.Запись.ИспользоватьПодпитку;
	Форма.Элементы.УровеньОбслуживанияУпаковокКлассаY.Доступность = Форма.Запись.ИспользоватьПодпитку;
	Форма.Элементы.УровеньОбслуживанияУпаковокКлассаZ.Доступность = Форма.Запись.ИспользоватьПодпитку;
	
	Форма.Элементы.НастроитьРасписание.Доступность                = Форма.Запись.ИспользоватьПодпитку;
КонецПроцедуры
