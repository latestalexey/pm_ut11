////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	
	Номенклатура = Параметры.Номенклатура;
	ОпределитьИспользованиеХарактеристик();
	Заголовок = Заголовок + " (" + Номенклатура.Наименование + ")";
	
	Элементы.СегментыКоличествоХарактеристик.Видимость = ИспользуютсяХарактеристики;
	Элементы.ОбновляемыеИДинамическиеКоличествоХарактеристик.Видимость = ИспользуютсяХарактеристики;
	
	ЕстьПравоНаИзменение = СегментыСервер.ЕстьПравоИзмененияСоставаСегментов("Номенклатура");
	Элементы.ВключитьВСегмент.Видимость  = ЕстьПравоНаИзменение;
	Элементы.УдалитьИзСегмента.Видимость = ЕстьПравоНаИзменение;
	
	ЗаполнитьТаблицуСегментов("Ручные");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтраницыТипыСегментовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.СтраницыТипыСегментов.ТекущаяСтраница = Элементы.СтраницаОбновляемыеИДинамические И
		(НЕ СписокДинамическихИОбновляемыхСегментовСформирован) Тогда
		
		ЗаполнитьТаблицуСегментов("ОбновляемыеИДинамические");
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ <ИМЯ ТАБЛИЧНОЙ ЧАСТИ>

&НаКлиенте
Процедура СегментыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОчиститьСообщения();
	
	Если Элементы.СтраницыТипыСегментов.ТекущаяСтраница = Элементы.СтраницаОбновляемыеИДинамические Тогда
		ТекущиеДанные = Элементы.ОбновляемыеИДинамические.ТекущиеДанные;
	ИначеЕсли Элементы.СтраницыТипыСегментов.ТекущаяСтраница = Элементы.СтраницаСформированныеВручную Тогда
		ТекущиеДанные = Элементы.Сегменты.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "СегментыКоличествоХарактеристик" Тогда
		
		Если ТекущиеДанные.Характеристики.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Характеристики не назначены.'"));
			Возврат;
		КонецЕсли;
		ВключитьУдалитьВСегментКлиент(Истина);
		
	ИначеЕсли Поле.Имя = "ОбновляемыеИДинамическиеКоличествоХарактеристик" Тогда
		
		Если ТекущиеДанные.Характеристики.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Характеристики не назначены.'"));
			Возврат;
		КонецЕсли;
	ОткрытьФормуМодально("РегистрСведений.НоменклатураСегмента.Форма.ВыборХарактеристики",
			Новый Структура("ТаблицаХарактеристик,ТолькоПросмотр",ТекущиеДанные.Характеристики,Истина));
		
	ИначеЕсли Поле.Имя = "СегментыСегмент" ИЛИ Поле.Имя = "ОбновляемыеИДинамическиеСегмент"  Тогда
		
		ОткрытьЗначение(ТекущиеДанные.Сегмент);
		
	ИначеЕсли Поле.Имя = "СегментыОтветственный" ИЛИ Поле.Имя = "ОбновляемыеИДинамическиеОтветственный"Тогда
		
		ОткрытьЗначение(ТекущиеДанные.Ответственный);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВключитьВСегмент(Команда)
	
	ВключитьУдалитьВСегментКлиент(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСегмента(Команда)
	
	ВключитьУдалитьВСегментКлиент(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Если Элементы.СтраницыТипыСегментов.ТекущаяСтраница = Элементы.СтраницаСформированныеВручную Тогда
		ЗаполнитьТаблицуСегментов("Ручные");
	Иначе
		ЗаполнитьТаблицуСегментов("ОбновляемыеИДинамические");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаполнитьТаблицуСегментов(ТипТаблицы)
	
	Если ТипТаблицы = "Ручные" Тогда
		
		ТипФормирования = "ФормироватьВручную";
		ИмяТаблицы = "Сегменты";
		
	ИначеЕсли ТипТаблицы = "ОбновляемыеИДинамические" Тогда
		
		ТипФормирования = "ПериодическиОбновлять";
		ИмяТаблицы = "ОбновляемыеИДинамические";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ЭтаФорма[ИмяТаблицы].Очистить();
	
	Если ИспользуютсяХарактеристики Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
		|ПОМЕСТИТЬ ВсеХарактеристикиНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка
		|				ИЛИ ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВидНоменклатуры)
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СегментыНоменклатуры.Ссылка КАК Сегмент,
		|	СегментыНоменклатуры.Ответственный КАК Ответственный,
		|	ВсеХарактеристикиНоменклатуры.Номенклатура,
		|	ВсеХарактеристикиНоменклатуры.Характеристика
		|ПОМЕСТИТЬ СегментыНоменклатураХарактеристики
		|ИЗ
		|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры,
		|	ВсеХарактеристикиНоменклатуры КАК ВсеХарактеристикиНоменклатуры
		|ГДЕ
		|	(НЕ СегментыНоменклатуры.ЭтоГруппа)
		|	И (НЕ СегментыНоменклатуры.ПометкаУдаления)
		|	И СегментыНоменклатуры.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов." + ТипФормирования + ")
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СегментыНоменклатураХарактеристики.Сегмент КАК Сегмент,
		|	СегментыНоменклатураХарактеристики.Ответственный КАК Ответственный,
		|	СегментыНоменклатураХарактеристики.Характеристика,
		|	ВЫБОР
		|		КОГДА НоменклатураСегмента.Характеристика ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ВходитВСегмент
		|ИЗ
		|	СегментыНоменклатураХарактеристики КАК СегментыНоменклатураХарактеристики
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		ПО СегментыНоменклатураХарактеристики.Сегмент = НоменклатураСегмента.Сегмент
		|			И СегментыНоменклатураХарактеристики.Номенклатура = НоменклатураСегмента.Номенклатура
		|			И СегментыНоменклатураХарактеристики.Характеристика = НоменклатураСегмента.Характеристика
		|ИТОГИ
		|	СУММА(ВходитВСегмент)
		|ПО
		|	Сегмент";
		
		Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
		
		ВыборкаСегменты = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСегменты.Следующий() Цикл
			
			НоваяСтрока = ЭтаФорма[ИмяТаблицы].Добавить();
			НоваяСтрока.Сегмент = ВыборкаСегменты.Сегмент;
			НоваяСтрока.ВходитВСегмент = ?(ВыборкаСегменты.ВходитВСегмент > 0, Истина, Ложь);
			НоваяСтрока.КоличествоХарактеристик = ВыборкаСегменты.ВходитВСегмент;
			Если ТипТаблицы = "ОбновляемыеИДинамические" Тогда
				НоваяСтрока.СпособФормирования = Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять;
			КонецЕсли;
			
			ВыборкаХарактеристики = ВыборкаСегменты.Выбрать();
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				НоваяСтрока.Ответственный = ВыборкаХарактеристики.Ответственный;
				
				Если ВыборкаХарактеристики.Характеристика <> NULL Тогда
					
					НоваяХарактеристика = НоваяСтрока.Характеристики.Добавить();
					НоваяХарактеристика.Характеристика = ВыборкаХарактеристики.Характеристика;
					НоваяХарактеристика.ВходитВСегмент = ?(ВыборкаХарактеристики.ВходитВСегмент > 0, Истина, Ложь);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СегментыНоменклатуры.Ссылка КАК Сегмент,
		|	ВЫБОР
		|		КОГДА НоменклатураСегмента.Номенклатура ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВходитВСегмент,
		|	СегментыНоменклатуры.Ответственный
		|ИЗ
		|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		ПО (НоменклатураСегмента.Сегмент = СегментыНоменклатуры.Ссылка)
		|			И (НоменклатураСегмента.Номенклатура = &Номенклатура)
		|ГДЕ
		|	(НЕ СегментыНоменклатуры.ПометкаУдаления)
		|	И (НЕ СегментыНоменклатуры.ЭтоГруппа)
		|	И СегментыНоменклатуры.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов." + ТипФормирования + ")";
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		
		ЭтаФорма[ИмяТаблицы].Загрузить(Запрос.Выполнить().Выгрузить());
		
		Если ТипТаблицы = "ОбновляемыеИДинамические" Тогда
			
			Для каждого СтрокаТаблицы Из ЭтаФорма[ИмяТаблицы] Цикл
				СтрокаТаблицы.СпособФормирования = Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипТаблицы = "ОбновляемыеИДинамические" Тогда
		
		ЗаполнитьДанныеПоДинамическимСегментам();
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьДанныеПоДинамическимСегментам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СегментыНоменклатуры.Ссылка КАК Сегмент,
	|	СегментыНоменклатуры.Ответственный,
	|	СегментыНоменклатуры.СпособФормирования
	|ИЗ
	|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры
	|ГДЕ
	|	(НЕ СегментыНоменклатуры.ЭтоГруппа)
	|	И (НЕ СегментыНоменклатуры.ПометкаУдаления)
	|	И СегментыНоменклатуры.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьДинамически)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если ИспользуютсяХарактеристики Тогда
		
		ТаблицаХарактеристик = Новый ТаблицаЗначений;
		ТаблицаХарактеристик.Колонки.Добавить("Сегмент",Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры"));
		ТаблицаХарактеристик.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаХарактеристик.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если ИспользуютсяХарактеристики Тогда
			ТаблицаХарактеристикСегмента = СегментыСервер.ПолучитьХарактеристикиНоменклатурыВходящиеВСегмент(Номенклатура, Выборка.Сегмент);
			Для каждого СтрокаТаблицыХарактеристикСегмента Из ТаблицаХарактеристикСегмента Цикл
				
				НоваяСтрока = ТаблицаХарактеристик.Добавить();
				НоваяСтрока.Сегмент = Выборка.Сегмент;
				НоваяСтрока.Номенклатура = СтрокаТаблицыХарактеристикСегмента.ЭлементСписка;
				НоваяСтрока.Характеристика = СтрокаТаблицыХарактеристикСегмента.ХарактеристикаЭлемента;
			
			КонецЦикла;
			
			
		Иначе
			
			НоваяСтрока = ОбновляемыеИДинамические.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
			НоваяСтрока.ВходитВСегмент = СегментыСервер.ВходитВСегмент(Номенклатура, Выборка.Сегмент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИспользуютсяХарактеристики Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст ="
		|ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура,
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика
		|ПОМЕСТИТЬ ВсеХарактеристикиНоменклатуры
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ХарактеристикиНоменклатуры.Владелец = Номенклатура.Ссылка
		|				ИЛИ ХарактеристикиНоменклатуры.Владелец = Номенклатура.ВидНоменклатуры)
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СегментыНоменклатуры.Ссылка КАК Сегмент,
		|	СегментыНоменклатуры.Ответственный КАК Ответственный,
		|	ВсеХарактеристикиНоменклатуры.Номенклатура,
		|	ВсеХарактеристикиНоменклатуры.Характеристика
		|ПОМЕСТИТЬ СегментыНоменклатураХарактеристики
		|ИЗ
		|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры,
		|	ВсеХарактеристикиНоменклатуры КАК ВсеХарактеристикиНоменклатуры
		|ГДЕ
		|	(НЕ СегментыНоменклатуры.ЭтоГруппа)
		|	И (НЕ СегментыНоменклатуры.ПометкаУдаления)
		|	И СегментыНоменклатуры.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьДинамически)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДинамическихСегментов.Сегмент,
		|	ДанныеДинамическихСегментов.Номенклатура,
		|	ДанныеДинамическихСегментов.Характеристика
		|ПОМЕСТИТЬ ДанныеДинамическихСегментов
		|ИЗ
		|	&ДанныеДинамическихСегментов КАК ДанныеДинамическихСегментов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СегментыНоменклатураХарактеристики.Сегмент КАК Сегмент,
		|	СегментыНоменклатураХарактеристики.Ответственный КАК Ответственный,
		|	СегментыНоменклатураХарактеристики.Характеристика,
		|	ВЫБОР
		|		КОГДА НоменклатураСегмента.Характеристика ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ВходитВСегмент
		|ИЗ
		|	СегментыНоменклатураХарактеристики КАК СегментыНоменклатураХарактеристики
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДинамическихСегментов КАК НоменклатураСегмента
		|		ПО СегментыНоменклатураХарактеристики.Сегмент = НоменклатураСегмента.Сегмент
		|			И СегментыНоменклатураХарактеристики.Номенклатура = НоменклатураСегмента.Номенклатура
		|			И СегментыНоменклатураХарактеристики.Характеристика = НоменклатураСегмента.Характеристика
		|ИТОГИ
		|	СУММА(ВходитВСегмент)
		|ПО
		|	Сегмент";
		
		
		Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
		Запрос.УстановитьПараметр("ДанныеДинамическихСегментов",ТаблицаХарактеристик);
		ВыборкаСегменты = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСегменты.Следующий() Цикл
			
			НоваяСтрока = ОбновляемыеИДинамические.Добавить();
			НоваяСтрока.Сегмент = ВыборкаСегменты.Сегмент;
			НоваяСтрока.ВходитВСегмент = ?(ВыборкаСегменты.ВходитВСегмент > 0, Истина, Ложь);
			НоваяСтрока.КоличествоХарактеристик = ВыборкаСегменты.ВходитВСегмент;
			НоваяСтрока.СпособФормирования = Перечисления.СпособыФормированияСегментов.ФормироватьДинамически;
			
			ВыборкаХарактеристики = ВыборкаСегменты.Выбрать();
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				НоваяСтрока.Ответственный = ВыборкаХарактеристики.Ответственный;
				
				НоваяХарактеристика = НоваяСтрока.Характеристики.Добавить();
				НоваяХарактеристика.Характеристика = ВыборкаХарактеристики.Характеристика;
				НоваяХарактеристика.ВходитВСегмент = ?(ВыборкаХарактеристики.ВходитВСегмент > 0, Истина, Ложь);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СписокДинамическихИОбновляемыхСегментовСформирован = Истина;
	
	
КонецПроцедуры 

&НаСервере
Процедура ОпределитьИспользованиеХарактеристик()
	
	ИспользуютсяХарактеристики = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВидыНоменклатуры.ИспользоватьХарактеристики
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура";
		
		Запрос.УстановитьПараметр("Номенклатура",Номенклатура );
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Если Выборка.ИспользоватьХарактеристики Тогда
			
			ИспользуютсяХарактеристики = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьУдалитьВСегментКлиент(Включить)
	
	ОчиститьСообщения();
	ВыделенныеСтроки = Элементы.Сегменты.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользуютсяХарактеристики Тогда
		
		Если Элементы.Сегменты.ДанныеСтроки(ВыделенныеСтроки[0]).Характеристики.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Характеристики не назначены.'"));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	МассивОбрабатываемыхСегментов = Новый Массив;
	
	Если ИспользуютсяХарактеристики И Включить Тогда
		
		ХарактеристикиДляИзменения.Очистить();
		НеобходимоЗаполнитьТаблицу = Истина;
		
		Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Сегменты.ДанныеСтроки(ВыделеннаяСтрока);
			Если ДанныеСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			МассивОбрабатываемыхСегментов.Добавить(ДанныеСтроки.Сегмент);
			
			Если (НЕ ДанныеСтроки.ВходитВСегмент) И (НЕ НеобходимоЗаполнитьТаблицу) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НеобходимоЗаполнитьТаблицу Тогда
				
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеСтроки.Характеристики, ХарактеристикиДляИзменения);
				НеобходимоЗаполнитьТаблицу = Ложь;
				
			Иначе
				
				Для каждого СтрокаТаблицыХарактеристикСегмента Из ДанныеСтроки.Характеристики Цикл
				
					Если СтрокаТаблицыХарактеристикСегмента.ВходитВСегмент Тогда
						
						СтруктураПараметровПоиска = Новый Структура;
						СтруктураПараметровПоиска.Вставить("Характеристика",СтрокаТаблицыХарактеристикСегмента.Характеристика);
						СтруктураПараметровПоиска.Вставить("ВходитВСегмент",Ложь);
						
						НайденныеСтроки = ХарактеристикиДляИзменения.НайтиСтроки(СтруктураПараметровПоиска);
						Если НайденныеСтроки.Количество() > 0 Тогда
							НайденныеСтроки[0].ВходитВСегмент = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивОбрабатываемыхСегментов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаРезультат = ОткрытьФормуМодально("РегистрСведений.НоменклатураСегмента.Форма.ВыборХарактеристики",
			Новый Структура("ТаблицаХарактеристик",ХарактеристикиДляИзменения,Истина));
			
			Если ТаблицаРезультат <> Неопределено Тогда
				
				МассивОбрабатываемыхХарактеристик = Новый Массив;
				Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
					
					Если СтрокаТаблицы.ВходитВСегмент Тогда 
						
						МассивОбрабатываемыхХарактеристик.Добавить(СтрокаТаблицы.Характеристика);
						
					КонецЕсли;
				
				КонецЦикла;
				
			ВыполнитьЗаписьВСегменты(МассивОбрабатываемыхСегментов,МассивОбрабатываемыхХарактеристик);
			
		КонецЕсли;
		
	Иначе
		
		Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			
			ДанныеСтроки = Элементы.Сегменты.ДанныеСтроки(ВыделеннаяСтрока);
			Если ДанныеСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДанныеСтроки.ВходитВСегмент = Включить Тогда
				Продолжить;
			Иначе
				МассивОбрабатываемыхСегментов.Добавить(ДанныеСтроки.Сегмент);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивОбрабатываемыхСегментов.Количество() > 0 Тогда
			
			ВключитьУдалитьВСегментСервер(МассивОбрабатываемыхСегментов, Включить);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВключитьУдалитьВСегментКлиент()

&НаСервере
Процедура ВыполнитьЗаписьВСегменты(МассивОбрабатываемыхСегментов,МассивОбрабатываемыхХарактеристик)
	
	Для каждого Сегмент Из МассивОбрабатываемыхСегментов Цикл
		
		НаборЗаписей = РегистрыСведений.НоменклатураСегмента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сегмент.Установить(Сегмент);
		НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
		
		Для Каждого ОбрабатываемаяХарактеристика Из МассивОбрабатываемыхХарактеристик Цикл
			
			НоваяСтрока = НаборЗаписей.Добавить();
			НоваяСтрока.Активность = Истина;
			НоваяСтрока.Номенклатура = Номенклатура;
			НоваяСтрока.Сегмент = Сегмент;
			НоваяСтрока.Характеристика = ОбрабатываемаяХарактеристика;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	ЗаполнитьТаблицуСегментов("Ручные");
	
КонецПроцедуры // ВыполнитьЗаписьВСегменты()

&НаСервере
Процедура ВключитьУдалитьВСегментСервер(МассивОбрабатываемыхСегментов,Включить);
	
	Для каждого ЭлементМассива Из МассивОбрабатываемыхСегментов Цикл
		
		Если Включить Тогда
			
			СегментыСервер.ДобавитьНоменклатуруВСегмент(ЭлементМассива,Номенклатура);
			
		Иначе
			
			СегментыСервер.УдалитьНоменклатуруИзСегмента(ЭлементМассива,Номенклатура);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьТаблицуСегментов("Ручные");
	
КонецПроцедуры // ВключитьУдалитьВСегментСервер()

