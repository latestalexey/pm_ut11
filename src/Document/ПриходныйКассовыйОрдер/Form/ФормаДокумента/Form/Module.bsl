
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийСКассамиККМ(ЭтаФорма, Элементы.ХозяйственнаяОперация);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекущаяКасса = Объект.Касса;
		УправлениеЭлементамиФормы();
		Если Параметры.Свойство("Основание") Тогда
			Если ЗначениеЗаполнено(Параметры.Основание) и ТипЗнч(Параметры.Основание) <> Тип("Структура") Тогда
				Объект.Основание = ОбщегоНазначенияУТ.ПолучитьПредставлениеДокумента(Параметры.Основание, ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Параметры.Основание.Номер), Параметры.Основание.Дата);
			КонецЕсли; 
			Основание = Параметры.Основание;
		КонецЕсли;
	КонецЕсли;
	
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПередачиМеждуОрганизациями(ЭтаФорма, Элементы.ХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийВнутреннейПередачи(ЭтаФорма, Элементы.ХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(ЭтаФорма, Элементы.ХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииПрочиеДоходы(ЭтаФорма, Элементы.ХозяйственнаяОперация);
	
	УточнитьСписокХозяйственныхОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ФинансыКлиент.ПроверитьЗаполнениеДокументаНаОсновании(
			Объект,
			Основание
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		
		ПолучитьРасшифровкуПлатежаИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ТекущаяКасса = Объект.Касса;
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	УправлениеЭлементамиФормы();
	Элементы.РасшифровкаПлатежаДоговорКредитаДепозита.ПараметрыВыбора = ПараметрыВыбораДоговоровКредитовДепозитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ФинансыКлиент.ПересчитатьСуммуДокументаПоРасшифровкеПлатежа(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПриходныйКассовыйОрдер", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	ФинансыКлиент.ОчиститьСуммуВзаиморасчетовРасшифровкиПлатежа(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	СтруктурыРеквизитов = РеквизитыКассыИКассыККМ(Объект.Касса, Объект.КассаККМ);
	СтруктураРеквизитовКассы = СтруктурыРеквизитов.РеквизитыКассы;
	
	Если Не ФинансыКлиент.НеобходимПересчетВВалюту(Объект, Объект.Валюта, СтруктураРеквизитовКассы.Валюта) Тогда
		
		КассаПриИзмененииСервер(СтруктурыРеквизитов, Ложь);
		ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		
	ИначеЕсли ФинансыКлиент.РазрешенПересчетВВалюту(СтруктураРеквизитовКассы.Валюта) Тогда
		
		ТекущаяВалюта = Объект.Валюта;
		КассаПриИзмененииСервер(СтруктурыРеквизитов, Истина);
		ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ТекущаяВалюта, Объект.Валюта);
		
	Иначе
		
		Объект.Касса = ТекущаяКасса;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	
	Объект.ВТомЧислеНДС = "";
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодотчетноеЛицоПриИзменении(Элемент)
	
	ПодотчетноеЛицоПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура КассаККМПриИзменении(Элемент)
	
	КассаККМПриИзмененииСервер()
	
КонецПроцедуры

&НаСервере
Процедура КассаККМПриИзмененииСервер()
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	Элементы.ВыемкаДенежныхСредствИзКассыККМ.АвтоОтметкаНезаполненного = ПараметрыКассыККМ.ЭтоФискальныйРегистратор;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходныйКассовыйОрдерПриИзменении(Элемент)
	
	РасходныйКассовыйОрдерПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряжениеНаПеремещениеДенежныхСредствПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.РаспоряжениеНаПеремещениеДенежныхСредств) Тогда
		РаспоряжениеНаПеремещениеДенежныхСредствПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыемкаДенежныхСредствИзКассыККМПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВыемкаДенежныхСредствИзКассыККМ) Тогда
		ВыемкаДенежныхСредствИзКассыККМПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаКонвертацииПриИзменении(Элемент)
	
	ПересчитатьКурсКонвертации();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ РАСШИФРОВКА ПЛАТЕЖА

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер);
	КонецЕсли;
	ФинансыКлиент.РасшифровкаПлатежаПриНачалеРедактирования(
		Объект,
		Партнер,
		ДоговорКонтрагента,
		СтрокаТаблицы,
		НоваяСтрока,
		Копирование
	);
	
	Если НоваяСтрока И Не Копирование Тогда
		
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочиеДоходы") Тогда
			Если Не ЗначениеЗаполнено(Подразделение) Тогда
				ПолучитьПодразделениеПоУмолчанию();
			КонецЕсли;
			СтрокаТаблицы.Подразделение = Подразделение;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
	Объект.ВТомЧислеНДС = "";
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	СтрокаТаблицы.ВалютаВзаиморасчетов = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеПлатежа) Тогда
		СтрокаТаблицы.Заказ = Неопределено;
		ФинансыКлиент.УстановитьПустуюСсылкуНаЗаказ(СтрокаТаблицы.Заказ, ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация));
	КонецЕсли;
	
	Объект.ВТомЧислеНДС = "";
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(
		Объект.Организация,
		Неопределено, // Партнер
		Объект.Контрагент,
		Неопределено, // Соглашение
		ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация),
		Истина, // ВыборОснованияПлатежа
		Элемент,
		СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора, Объект.Организация, Объект.Контрагент, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора, Объект.Организация, Объект.Контрагент, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Объект.ВТомЧислеНДС = "";
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДоходовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяДоходов) Тогда
		РасшифровкаПлатежаСтатьяДоходовПриИзмененииСервер(
			СтрокаТаблицы.СтатьяДоходов,
			СтрокаТаблицы.Подразделение,
			СтрокаТаблицы.АналитикаДоходов
		);
	Иначе
		СтрокаТаблицы.АналитикаДоходов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Касса");
	СтруктураРеквизитов.Вставить("Контрагент");
	
	Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтаФорма, Неопределено, СтруктураРеквизитов) Тогда

		АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
		ПараметрыПодбора = Новый Структура("
			|АдресПлатежейВХранилище, 
			|Организация, 
			|Контрагент,
			|Валюта,
			|СуммаДокумента,
			|ДатаДокумента,
			|ХозяйственнаяОперация",
			АдресПлатежейВХранилище,
			Объект.Организация, 
			Объект.Контрагент,
			Объект.Валюта,
			Объект.СуммаДокумента,
			Объект.Дата,
			Объект.ХозяйственнаяОперация
		);
		ОткрытьФорму(
			"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
			ПараметрыПодбора, 
			ЭтаФорма
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧек()
	
	ПечатьЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьВТомЧислеНДС(Команда)
	
	СписокДействий = Новый СписокЗначений;
	Для Каждого ЭлементыКонтекстногоМеню Из Элементы.ВТомЧислеНДСКонтекстноеМенюГруппаВставить.ПодчиненныеЭлементы Цикл
		Если ЭлементыКонтекстногоМеню.Видимость Тогда
			СписокДействий.Добавить(ЭлементыКонтекстногоМеню.ИмяКоманды, ЭлементыКонтекстногоМеню.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	ВыбранноеДействие = ВыбратьИзМеню(СписокДействий, Элементы.ВставитьВТомЧислеНДС);
	Если ВыбранноеДействие <> Неопределено Тогда
		ВставитьВТомЧислеНДССервер(ВыбранноеДействие.Значение, Элементы.ВТомЧислеНДС.ВыделенныйТекст);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВставитьВТомЧислеНДССписокДокументов(Команда)
	
	ВставитьВТомЧислеНДССервер(Команда.Имя, Элементы.ВТомЧислеНДС.ВыделенныйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьВТомЧислеНДСНДС18(Команда)
	
	ВставитьВТомЧислеНДССервер(Команда.Имя, Элементы.ВТомЧислеНДС.ВыделенныйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьВТомЧислеНДСНДС10(Команда)
	
	ВставитьВТомЧислеНДССервер(Команда.Имя, Элементы.ВТомЧислеНДС.ВыделенныйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьВТомЧислеНДСБезНДС(Команда)
	
	ВставитьВТомЧислеНДССервер(Команда.Имя, Элементы.ВТомЧислеНДС.ВыделенныйТекст);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	УстановитьВидимость();
	УстановитьДоступностьПечатиЧека();
	УстановитьПараметрыВыбораРасходногоКассовогоОрдера();
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаПлатежаПартнер);
	
	Объект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		Если Не Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация) Тогда
			
			Объект.Касса = Неопределено;
			Объект.Организация = Неопределено;
			ТекущаяКасса = Объект.Касса;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьДоговорПоУмолчаниюСервер();
	
КонецПроцедуры

&НаСервере
Процедура КассаПриИзмененииСервер(СтруктурыРеквизитов, ПересчитыватьСуммы)
	
	ТекущаяКасса = Объект.Касса;
	
	Если ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Организация = СтруктурыРеквизитов.РеквизитыКассы.Организация;
		ПолучитьДоговорПоУмолчаниюСервер();
	КонецЕсли;
	
	СтруктураРеквизитовКассыККМ = СтруктурыРеквизитов.РеквизитыКассыККМ;
	Если СтруктураРеквизитовКассыККМ.Организация <> СтруктурыРеквизитов.РеквизитыКассы.Организация Тогда
		
		Объект.КассаККМ = Неопределено;
		Объект.ВыемкаДенежныхСредствИзКассыККМ = Неопределено;
		
		ЭтоФискальныйРегистратор = ПараметрыКассыККМ.ЭтоФискальныйРегистратор;
		Элементы.ВыемкаДенежныхСредствИзКассыККМ.АвтоОтметкаНезаполненного = ЭтоФискальныйРегистратор;
		Элементы.ВыемкаДенежныхСредствИзКассыККМ.ОтметкаНезаполненного     = ЭтоФискальныйРегистратор;
		
	КонецЕсли;
	
	ТекущаяВалюта = Объект.Валюта;
	Объект.Валюта = СтруктурыРеквизитов.РеквизитыКассы.Валюта;
	
	Если ПересчитыватьСуммы Тогда
		ПересчетСуммДокументаВВалюту(ТекущаяВалюта);
	КонецЕсли;
	
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(Объект.Валюта, Элементы);
	
	Объект.БанковскийСчет  = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
	Объект.КассаККМ        = Справочники.КассыККМ.ПустаяСсылка();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		ПересчитатьКурсКонвертации();
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
	
		Если Не ЗначениеЗаполнено(Объект.ПринятоОт) Тогда
			Объект.ПринятоОт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "НаименованиеПолное");
		КонецЕсли;
		Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент);
		
		Элементы.РасшифровкаПлатежаДоговорКредитаДепозита.ПараметрыВыбора = ПараметрыВыбораДоговоровКредитовДепозитов();
		
		ПолучитьДоговорПоУмолчаниюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодотчетноеЛицоПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.ПодотчетноеЛицо) Тогда
		Объект.ПринятоОт = ФизическиеЛица.ФамилияИнициалыФизЛица(Объект.ПодотчетноеЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасходныйКассовыйОрдерПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.РасходныйКассовыйОрдер) Тогда
		ДокументОбъект = РеквизитФормыВЗначение("Объект");
		ДокументОбъект.Заполнить(Объект.РасходныйКассовыйОрдер);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РасходныйКассовыйОрдер)
		И Не ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) Тогда
		Объект.СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.РасходныйКассовыйОрдер, "СтатьяДвиженияДенежныхСредств");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспоряжениеНаПеремещениеДенежныхСредствПриИзмененииСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.РаспоряжениеНаПеремещениеДенежныхСредств);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ВыемкаДенежныхСредствИзКассыККМПриИзмененииСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОснование = ДокументОбъект.ДокументОснование;
	ДокументОбъект.Заполнить(Объект.ВыемкаДенежныхСредствИзКассыККМ);
	ДокументОбъект.ДокументОснование = ДокументОснование;
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКурсКонвертации()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КурсКонвертации = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		Объект.Валюта,
		Объект.ВалютаКонвертации,
		Объект.Дата
	);
	Если КурсКонвертации <> 0 Тогда
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.КурсКонвертации = КурсКонвертации;
		Иначе
			Объект.КурсКонвертации = 1 / КурсКонвертации;
		КонецЕсли;
	Иначе
		Объект.КурсКонвертации = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаСтатьяДоходовПриИзмененииСервер(СтатьяДоходов, Подразделение, АналитикаДоходов);
	
	Если Не ЗначениеЗаполнено(АналитикаДоходов) Тогда
		АналитикаДоходов = ПланыВидовХарактеристик.СтатьиДоходов.ПолучитьАналитикуДоходовПоУмолчанию(
			СтатьяДоходов,
			Объект,
			Подразделение
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора, Организация, Контрагент, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ВзаиморасчетыСервер.ЗаполнитьДанныеВыбораОснованияПлатежа(ДанныеВыбора, Текст, Новый Структура("Организация, Контрагент", Организация, Контрагент));
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСервер(СтрокаТаблицы.ДоговорКредитаДепозита ,СтрокаТаблицы.ВалютаВзаиморасчетов, СтрокаТаблицы.СтатьяДвиженияДенежныхСредств);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСервер(Договор, Валюта, СтатьяДДС)	

	РеквизитыДоговора = Справочники.ДоговорыКредитовИДепозитов.РеквизитыДоговора(Договор);
	Валюта = РеквизитыДоговора.ВалютаВзаиморасчетов;
	Если РеквизитыДоговора.ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм Тогда
		СтатьяДДС = РеквизитыДоговора.СтатьяДДСПоступленияВыдачи;
	Иначе
		СтатьяДДС = РеквизитыДоговора.СтатьяДДСОсновногоДолга;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Управление элементами формы

&НаСервере
Процедура УстановитьВидимость()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.УстановитьВидимостьПодбораПоОстаткамРасчетов(
		Объект.ХозяйственнаяОперация,
		Элементы.РасшифровкаПлатежаПодборПоОстаткам
	);
	
	ЭтоПоступлениеОплатыОтКлиента = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	Если Элементы.НомерЧекаККМ.Видимость <> ЭтоПоступлениеОплатыОтКлиента Тогда
		Элементы.НомерЧекаККМ.Видимость = ЭтоПоступлениеОплатыОтКлиента;
	КонецЕсли;
	
	Если Элементы.ВставитьВТомЧислеНДС.Видимость <> Элементы.ВТомЧислеНДС.Видимость Тогда
		Элементы.ВставитьВТомЧислеНДС.Видимость = Элементы.ВТомЧислеНДС.Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	УстановитьВидимость();
	УстановитьДоступностьПечатиЧека();
	УстановитьПараметрыВыбораРасходногоКассовогоОрдера();
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораКассы(Объект, Элементы.Касса);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаПлатежаПартнер);
	
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(
		Объект.Валюта,
		Элементы
	);
	
	ЭтоФискальныйРегистратор = ПараметрыКассыККМ.ЭтоФискальныйРегистратор;
	Элементы.ВыемкаДенежныхСредствИзКассыККМ.АвтоОтметкаНезаполненного = ЭтоФискальныйРегистратор;
	Элементы.ВыемкаДенежныхСредствИзКассыККМ.ОтметкаНезаполненного     = ЭтоФискальныйРегистратор;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораРасходногоКассовогоОрдера()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.КассаПолучатель", "Объект.Касса"));
		Элементы.РасходныйКассовыйОрдер.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу));
		Элементы.РасходныйКассовыйОрдер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.КассаПолучатель", "Объект.Касса"));
		Элементы.РасходныйКассовыйОрдер.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив;
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
		МассивЗначений.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация",МассивЗначений));
		Элементы.РасходныйКассовыйОрдер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Валюта", "Объект.Валюта"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ПодотчетноеЛицо", "Объект.ПодотчетноеЛицо"));
		Элементы.РасходныйКассовыйОрдер.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику));
		Элементы.РасходныйКассовыйОрдер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.КассаПолучатель", "Объект.Касса"));
		Элементы.РасходныйКассовыйОрдер.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств));
		Элементы.РасходныйКассовыйОрдер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.КассаПолучатель", "Объект.Касса"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент"));
		Элементы.РасходныйКассовыйОрдер.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КонвертацияВалюты));
		Элементы.РасходныйКассовыйОрдер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПечатиЧека()
	
	НапечататьЧекДоступность = Ложь;
	
	Кнопка = Элементы.Найти("НапечататьЧек");
	Если Кнопка <> Неопределено Тогда
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
			НапечататьЧекДоступность = Истина;
		КонецЕсли;
		
		Кнопка.Доступность = НапечататьЧекДоступность;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УточнитьСписокХозяйственныхОпераций()

	ИспользоватьНесколькоКасс	= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс");

	Если Не ИспользоватьНесколькоКасс Тогда
	
		СписокВыбораХозяйственныхОпераций = Элементы.ХозяйственнаяОперация.СписокВыбора;	
		НайденныйЭлемент = СписокВыбораХозяйственныхОпераций.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
		Если НайденныйЭлемент <> Неопределено Тогда
			СписокВыбораХозяйственныхОпераций.Удалить(НайденныйЭлемент);
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция ПараметрыВыбораДоговоровКредитовДепозитов()

	МассивПараметров = Новый Массив;
	Если НЕ Объект.Касса.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация",  Объект.Касса.Владелец));		
	ИначеЕсли НЕ Объект.Организация.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	КонецЕсли;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ФормаОплаты", Перечисления.ФормыОплаты.Наличная));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХарактерДоговора", Справочники.ДоговорыКредитовИДепозитов.ХарактерДоговораПоОперации(Объект.ХозяйственнаяОперация)));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления",Ложь));
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(МассивПараметров);
	
КонецФункции

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище()
	
	АдресПлатежейВХранилище = ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(
		Объект.РасшифровкаПлатежа,
		УникальныйИдентификатор
	);	
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаИзХранилища(АдресПлатежейВХранилище)

	Объект.РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьПодразделениеПоУмолчанию()
	
	Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Пользователи.ТекущийПользователь());
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДоговорПоУмолчаниюСервер()
	
	ХозяйственнаяОперацияДоговора = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	КонецЕсли;
	ДоговорКонтрагента = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
		ДоговорКонтрагента,
		Партнер,
		Объект.Контрагент,
		Объект.Организация,
		ХозяйственнаяОперацияДоговора,
		, // ВалютаВзаиморасчетов
		, // Соглашение
		Истина // ПорядокРасчетовПоДоговорам			

	);
	Элементы.РасшифровкаПлатежаДоговорКредитаДепозита.ПараметрыВыбора = ПараметрыВыбораДоговоровКредитовДепозитов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьПартнераПоУмолчаниюСервер(Контрагент, Партнер)
	
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Контрагент);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыКассыИКассыККМ(Касса, КассаККМ)
	
	СтруктураРеквизитов = Новый Структура("РеквизитыКассы, РеквизитыКассыККМ", 
		Справочники.Кассы.ПолучитьРеквизитыКассы(Касса),
		Справочники.КассыККМ.РеквизитыКассыККМ(КассаККМ)
	);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаКлиенте
Процедура ПечатьЧека()

	ОчиститьСообщения();
	
	ОписаниеОшибки = "";

	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		Возврат;
	КонецЕсли;

	Если ФинансыКлиент.ВозможнаПечатьЧека(ЭтаФорма) Тогда

		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ФискальныйРегистратор",
			    НСтр("ru = 'Выберите фискальный регистратор'"), НСтр("ru = 'Фискальный регистратор не подключен'"));

			Если ИдентификаторУстройства <> Неопределено Тогда
				// Подключаем ФР
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                              ИдентификаторУстройства,
				                                                                              ОписаниеОшибки);
				Если Результат Тогда
					//Готовим данные
					ВходныеПараметры  = Новый Массив();
					ВыходныеПараметры = Неопределено;

					НомерСекции = 2;

					// Подготовка таблицы товаров
					ТаблицаТоваров = Новый Массив();

					СтрокаТаблицыТоваров = Новый СписокЗначений();
					СтрокаТаблицыТоваров.Добавить(НСтр("ru = 'Оплата от:'") + " " + Объект.ПринятоОт + Символы.ПС
					+ НСтр("ru = 'Основание:'") + " " + Объект.Основание); //  1 - Наименование
					СтрокаТаблицыТоваров.Добавить("");                     //  2 - Штрихкод
					СтрокаТаблицыТоваров.Добавить("");                     //  3 - Артикул
					СтрокаТаблицыТоваров.Добавить(НомерСекции);            //  4 - Номер отдела
					СтрокаТаблицыТоваров.Добавить(Объект.СуммаДокумента);  //  5 - Цена за позицию без скидки
					СтрокаТаблицыТоваров.Добавить(1);                      //  6 - Количество
					СтрокаТаблицыТоваров.Добавить("");                     //  7 - Наименование скидки/наценки
					СтрокаТаблицыТоваров.Добавить(0);                      //  8 - Сумма скидки/наценки
					СтрокаТаблицыТоваров.Добавить(0);                      //  9 - Процент скидки/наценки
					СтрокаТаблицыТоваров.Добавить(Объект.СуммаДокумента);  // 10 - Сумма позиции со скидкой
					СтрокаТаблицыТоваров.Добавить(0);                      // 11 - Номер налога (1)
					СтрокаТаблицыТоваров.Добавить(0);                      // 12 - Сумма налога (1)
					СтрокаТаблицыТоваров.Добавить(0);                      // 13 - Процент налога (1)
					СтрокаТаблицыТоваров.Добавить(0);                      // 14 - Номер налога (2)
					СтрокаТаблицыТоваров.Добавить(0);                      // 15 - Сумма налога (2)
					СтрокаТаблицыТоваров.Добавить(0);                      // 16 - Процент налога (2)
					СтрокаТаблицыТоваров.Добавить("");                     // 17 - Наименование секции форматирования товарной строки

					ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);

					// Подготовка таблицы оплат
					ТаблицаОплат = Новый Массив();

					СтрокаОплаты = Новый СписокЗначений();
					СтрокаОплаты.Добавить(0);
					СтрокаОплаты.Добавить(Объект.СуммаДокумента);
					СтрокаОплаты.Добавить("");
					СтрокаОплаты.Добавить("");

					ТаблицаОплат.Добавить(СтрокаОплаты);

					// Подготовка таблицы общих параметров
					ОбщиеПараметры = Новый Массив();
					ОбщиеПараметры.Добавить(0);                      //  1 - Тип чека
					ОбщиеПараметры.Добавить(Истина);                 //  2 - Признак фискального чека
					ОбщиеПараметры.Добавить(Неопределено);           //  3 - Печать на подкладном документе
					ОбщиеПараметры.Добавить(Объект.СуммаДокумента);  //  4 - Сумма по чеку без скидок/наценок
					ОбщиеПараметры.Добавить(Объект.СуммаДокумента);  //  5 - Сумма по чеку с учетом всех скидок/наценок
					ОбщиеПараметры.Добавить("");                     //  6 - Номер дисконтной карты
					ОбщиеПараметры.Добавить("");                     //  7 - Текст шапки
					ОбщиеПараметры.Добавить("");                     //  8 - Текст подвала
					ОбщиеПараметры.Добавить(0);                      //  9 - Номер смены (для копии чека)
					ОбщиеПараметры.Добавить(0);                      // 10 - Номер чека (для копии чека)
					ОбщиеПараметры.Добавить(0);                      // 11 - Номер документа (для копии чека)
					ОбщиеПараметры.Добавить(0);                      // 12 - Дата документа (для копии чека)
					ОбщиеПараметры.Добавить("");                     // 13 - Имя кассира (для копии чека)
					ОбщиеПараметры.Добавить("");                     // 14 - Пароль кассира
					ОбщиеПараметры.Добавить(0);                      // 15 - Номер шаблона
					ОбщиеПараметры.Добавить("");                     // 16 - Наименование секции форматирования шапки
					ОбщиеПараметры.Добавить("");                     // 17 - Наименование секции форматирования подвала

					ВходныеПараметры.Добавить(ТаблицаТоваров);
					ВходныеПараметры.Добавить(ТаблицаОплат);
					ВходныеПараметры.Добавить(ОбщиеПараметры);

					// Печатаем чек.
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
																			"PrintReceipt",
																			ВходныеПараметры,
																			ВыходныеПараметры);

					Если Результат Тогда
						// Установить полученное значение номера чека реквизиту документа.
						Объект.НомерЧекаККМ = ВыходныеПараметры[1];
						Модифицированность = Истина;
						Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
					Иначе
						ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
													|Чек не напечатан на фискальном регистраторе.
													|Дополнительное описание:
													|%ДополнительноеОписание%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,
													 "%ДополнительноеОписание%",
													 ВыходныеПараметры[1]);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;

					// Отключаем ФР
					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства);
				Иначе
					ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
					                            |Чек не напечатан на фискальном регистраторе.
					                            |Дополнительное описание:
					                            |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВставитьВТомЧислеНДССервер(ИмяКоманды, ВыделенныйТекст)
	
	ТекстНазначенияПлатежа = "";
	
	Если ИмяКоманды = "ВставитьВТомЧислеНДСБезНДС" Тогда
		
		ТекстНазначенияПлатежа = НСтр("ru='Без налога (НДС)'");
		
	ИначеЕсли ИмяКоманды = "ВставитьВТомЧислеНДСНДС10" Тогда
		
		СуммаНДС = Окр(Объект.СуммаДокумента / (1 + 0.1) * 0.1, 2);
		ТекстНазначенияПлатежа = НСтр("ru='НДС (10%) '") + Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
		
	ИначеЕсли ИмяКоманды = "ВставитьВТомЧислеНДСНДС18" Тогда
		
		СуммаНДС = Окр(Объект.СуммаДокумента / (1 + 0.18) * 0.18, 2);
		ТекстНазначенияПлатежа = НСтр("ru='НДС (18%) '") + Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
		
	ИначеЕсли ИмяКоманды = "ВставитьВТомЧислеНДССписокДокументов" Тогда
		
		МассивДокументов = Объект.РасшифровкаПлатежа.Выгрузить(,"Заказ").ВыгрузитьКолонку("Заказ");
		МассивДокументов.Добавить(Объект.ДокументОснование);
		ТекстНазначенияПлатежа = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(
			Объект.СуммаДокумента,
			МассивДокументов,
			Ложь, // ДобавлятьТекстВТомЧисле
			Истина // ОплатаОтКлиента
		);
		
	КонецЕсли;
	
	ВыделенныйТекст = " " + ТекстНазначенияПлатежа;
	
КонецПроцедуры

&НаСервере
Процедура ПересчетСуммДокументаВВалюту(ТекущаяВалюта)
	
	ДенежныеСредстваСервер.ПересчетСуммДокументаВВалюту(
		Объект,
		ТекущаяВалюта,
		Объект.Валюта
	);
	
КонецПроцедуры
