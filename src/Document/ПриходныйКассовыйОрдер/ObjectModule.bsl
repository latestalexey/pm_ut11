#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		ЗаполнитьПоРасходномуКассовомуОрдеру(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		ЗаполнитьПоЗаказуКлиента(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		ЗаполнитьПоЗаявкеНаВозвратТоваров(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);	
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда
		
		ЗаполнитьПоСчетуНаОплатуКлиенту(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		ЗаполнитьПоАвансовомуОтчету(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда	
		
		ЗаполнитьПоРеализацииТоваров(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда	
		
		ЗаполнитьПоАктуВыполненныхРабот(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);	
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПланируемоеПоступлениеДенежныхСредств") Тогда
		
		ЗаполнитьПоПланируемомуПоступлениюДенежныхСредств(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств") Тогда
		
		ДенежныеСредстваСервер.ЗаполнитьДокументПоРаспоряжениюНаПеремещениеДенежныхСредств(
			ДанныеЗаполнения,
			ЭтотОбъект,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВыемкаДенежныхСредствИзКассыККМ") Тогда
		
		ЗаполнитьПоВыемкеДенежныхСредствИзКассыККМ(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда	
		
		ЗаполнитьПоРеализацииУслугПрочихАктивов(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ДенежныеСредстваСервер.ЗаполнитьСтатьюДвиженияДенежныхСредств(
		ЭтотОбъект,
		ДанныеЗаполнения,
		Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
	);
	
	// Заполнение строки "В т.ч. НДС".
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
	 И ДанныеЗаполнения.Свойство("СуммаДокумента") Тогда
		СуммаДокумента = ДанныеЗаполнения.СуммаДокумента;
	КонецЕсли;
	Если СуммаДокумента <> 0 Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		 И ДанныеЗаполнения.Свойство("Валюта") Тогда
			Валюта = ДанныеЗаполнения.Валюта;
		КонецЕсли;
		
		МассивДокументов = РасшифровкаПлатежа.Выгрузить(,"Заказ").ВыгрузитьКолонку("Заказ");
		МассивДокументов.Добавить(ДокументОснование);
		ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(
			СуммаДокумента,
			МассивДокументов,
			Ложь, // ДобавлятьТекстВТомЧисле
			Истина // ОплатаОтКлиента
		);
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ЗаполнитьОтветственныхЛицДокумента(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	НомерЧекаККМ = 0;
	ДокументОснование = Неопределено;
	ОтветственныеЛицаСервер.ЗаполнитьОтветственныхЛицДокумента(ЭтотОбъект);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации
	);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов
	);
	ДенежныеСредстваСервер.ПроверитьРаспоряжениеНаПеремещениеДенежныхСредств(
		ЭтотОбъект,
		Отказ
	);
	ДенежныеСредстваСервер.ПроверитьЗаполнениеРасшифровкиПлатежа(
		ЭтотОбъект,
		СуммаДокумента,
		ХозяйственнаяОперация,
		Отказ
	);
	ДенежныеСредстваСервер.ПроверитьКассуККМ(
		ЭтотОбъект, 
		Отказ
	);
	ПроверитьБанковскийСчет(Отказ);
	ПроверитьРасходныйКассовыйОрдер(Отказ);
	ДенежныеСредстваСервер.ПроверитьВалютуКонвертации(ЭтотОбъект, Отказ);
	
	Если Не Справочники.КассыККМ.ПараметрыКассыККМ(КассаККМ).ЭтоФискальныйРегистратор Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВыемкаДенежныхСредствИзКассыККМ");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов
	);
	
	ОтветственныеЛицаСервер.ПроверитьЗаполнениеОтветственныхЛицДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	// Очистим табличную часть, если она не должна заполняться.
	Если РасшифровкаПлатежа.Количество() > 0
	   И (ХозяйственнаяОперация  = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы
	   ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации
	   ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника
	   ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка)
	Тогда
		РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика
		 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
		 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
		 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным Тогда
			ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(
				Валюта,
				Дата,
				РасшифровкаПлатежа
			);
		КонецЕсли;
		
		Если ПустаяСтрока(ВТомЧислеНДС) Тогда
			МассивДокументов = РасшифровкаПлатежа.Выгрузить(,"Заказ").ВыгрузитьКолонку("Заказ");
			МассивДокументов.Добавить(ДокументОснование);
			ВТомЧислеНДС = ДенежныеСредстваСервер.ТекстСуммаНДСПлатежа(
				СуммаДокумента,
				МассивДокументов,
				Ложь, // ДобавлятьТекстВТомЧисле
				Истина // ОплатаОтКлиента
			);
		КонецЕсли;
		
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(РасшифровкаПлатежа);

	КонецЕсли;
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ПриходныйКассовыйОрдер.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	ПроверитьИзменениеХозяйственнойОперации();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ПриходныйКассовыйОрдер.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по денежным средствам.
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваНаличные(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваКПоступлениюНаличные(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваКСписаниюБезналичные(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваКВыплате(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваУПодотчетныхЛиц(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваВКассахККМ(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по расчетам с поставщиками и клиентами.
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентамиПоследовательность(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщикамиПоследовательность(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ);
	
	// Движения по прочим доходам.
	ДоходыИРасходыСервер.ОтразитьПрочиеДоходы(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по расчетам по договорам кредитов (депозитов)
	ДенежныеСредстваСервер.ОтразитьРасчетыПоДоговорамКредитовИДепозитов(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);

	СформироватьСписокРегистровДляКонтроля();

	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы Тогда
		Префикс = "В";
	Иначе
		Префикс = "0";
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ЗаполнитьПоАвансовомуОтчету(Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника) КАК ХозяйственнаяОперация,
	|	Документ.Организация КАК Организация,
	|	Неопределено КАК Касса,
	|	Документ.Валюта КАК Валюта,
	|	Документ.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	Документ.ПодотчетноеЛицо.Наименование КАК ПринятоОт,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Ссылка) КАК Основание,
	|	Документ.Ссылка КАК АвансовыйОтчет,
	|	Документ.Ссылка КАК ДокументОснование,
	|	Документ.Остаток КАК СуммаДокумента
	|ИЗ
	|	Документ.АвансовыйОтчет КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(
			Перечисления.ФормыОплаты.Наличная,
			ДанныеЗаполнения
		);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуКлиента(Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Контрагент.Наименование КАК КонтрагентНаименование,
	|	ДанныеДокумента.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Касса КАК Касса,
	|	ДанныеДокумента.Валюта КАК Валюта
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить приходный кассовый ордер на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Если Не ПустаяСтрока(Выборка.КонтрагентНаименованиеПолное) Тогда
			ДанныеЗаполнения.Вставить("ПринятоОт", Выборка.КонтрагентНаименованиеПолное);
		Иначе
			ДанныеЗаполнения.Вставить("ПринятоОт", Выборка.КонтрагентНаименование);
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(
			Перечисления.ФормыОплаты.Наличная,
			ДанныеЗаполнения
		);
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
			ДокументОснование,
			Выборка.Договор,
			ДанныеЗаполнения.Валюта,
			РасшифровкаПлатежа,
			Выборка.Партнер
		);
	КонецЕсли;
	
	// Заполнение суммы шапки документа
	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
		
КонецПроцедуры

Процедура ЗаполнитьПоСчетуНаОплатуКлиенту(Знач СчетНаОплату, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента) КАК ХозяйственнаяОперация,
	|	ВЫБОР КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.ДокументОснование.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ДокументОснование.Контрагент.Наименование КАК КонтрагентНаименование,
	|	ДанныеДокумента.ДокументОснование.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	ДанныеДокумента.ДокументОснование КАК ЗаказКлиента,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|
	|	ДанныеДокумента.Касса КАК Касса,
	|	ВЫБОР КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.Валюта
	|	КОНЕЦ КАК Валюта
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", СчетНаОплату);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Если Не ПустаяСтрока(Выборка.КонтрагентНаименованиеПолное) Тогда
			ДанныеЗаполнения.Вставить("ПринятоОт", Выборка.КонтрагентНаименованиеПолное);
		Иначе
			ДанныеЗаполнения.Вставить("ПринятоОт", Выборка.КонтрагентНаименование);
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(
			Перечисления.ФормыОплаты.Наличная,
			ДанныеЗаполнения
		);
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоСчетуНаОплату(
			СчетНаОплату,
			Выборка.ЗаказКлиента,
			ДанныеЗаполнения.Валюта,
			РасшифровкаПлатежа
		);
	КонецЕсли;
	
	// Заполнение суммы шапки документа
	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	
	ДокументОснование = СчетНаОплату;
	
КонецПроцедуры

Процедура ЗаполнитьПоРеализацииТоваров(Знач РеализацияТоваров, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Контрагент.Наименование КАК КонтрагентНаименование,
	|	ДанныеДокумента.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.ЗаказКлиента КАК Заказ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Касса КАК Касса,
	|	ДанныеДокумента.Валюта КАК Валюта
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", РеализацияТоваров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Если Не ПустаяСтрока(Выборка.КонтрагентНаименованиеПолное) Тогда
			ДанныеЗаполнения.Вставить("ПринятоОт", Выборка.КонтрагентНаименованиеПолное);
		Иначе
			ДанныеЗаполнения.Вставить("ПринятоОт", Выборка.КонтрагентНаименование);
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(
			Перечисления.ФормыОплаты.Наличная,
			ДанныеЗаполнения
		);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаТовары.ЗаказКлиента КАК ЗаказКлиента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.Ссылка.РеализацияПоЗаказам
		|");
		Запрос.УстановитьПараметр("Ссылка", РеализацияТоваров);
		
		РезультатЗапросаПоЗаказам = Запрос.Выполнить();
		Если НЕ РезультатЗапросаПоЗаказам.Пустой() Тогда
			ЗаказыКлиента = РезультатЗапросаПоЗаказам.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
			ЗаказыКлиента.Добавить(РеализацияТоваров);
		Иначе
			ЗаказыКлиента = РеализацияТоваров;
		КонецЕсли;
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
			ЗаказыКлиента,
			Выборка.Договор,
			ДанныеЗаполнения.Валюта,
			РасшифровкаПлатежа,
			Выборка.Партнер
		);
		
	КонецЕсли;
	
	// Заполнение суммы шапки документа
	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
		
КонецПроцедуры

Процедура ЗаполнитьПоАктуВыполненныхРабот(Знач АктВыполненныхРабот, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Контрагент.Наименование КАК КонтрагентНаименование,
	|	ДанныеДокумента.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.ЗаказКлиента КАК Заказ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Касса КАК Касса,
	|	ДанныеДокумента.Валюта КАК Валюта
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", АктВыполненныхРабот);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Если Не ПустаяСтрока(Выборка.КонтрагентНаименованиеПолное) Тогда
			ДанныеЗаполнения.Вставить("ПринятоОт", Выборка.КонтрагентНаименованиеПолное);
		Иначе
			ДанныеЗаполнения.Вставить("ПринятоОт", Выборка.КонтрагентНаименование);
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(
			Перечисления.ФормыОплаты.Наличная,
			ДанныеЗаполнения
		);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаУслуги.ЗаказКлиента КАК ЗаказКлиента
		|ИЗ
		|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
		|ГДЕ
		|	ТаблицаУслуги.Ссылка = &Ссылка
		|	И ТаблицаУслуги.Ссылка.АктПоЗаказам
		|");
		Запрос.УстановитьПараметр("Ссылка", АктВыполненныхРабот);
		
		РезультатЗапросаПоЗаказам = Запрос.Выполнить();
		Если НЕ РезультатЗапросаПоЗаказам.Пустой() Тогда
			ЗаказыКлиента = РезультатЗапросаПоЗаказам.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
			ЗаказыКлиента.Добавить(АктВыполненныхРабот);
		Иначе
			ЗаказыКлиента = АктВыполненныхРабот;
		КонецЕсли;
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
			ЗаказыКлиента,
			Выборка.Договор,
			ДанныеЗаполнения.Валюта,
			РасшифровкаПлатежа,
			Выборка.Партнер
		);
		
	КонецЕсли;
	
	// Заполнение суммы шапки документа
	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
		
КонецПроцедуры

Процедура ЗаполнитьПоПланируемомуПоступлениюДенежныхСредств(Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Касса КАК Касса,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ПланируемоеПоступлениеДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СтатьяДвиженияДенежныхСредств.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеДоходы),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств)
	|		)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить приходный кассовый ордер на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();

		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(
			Перечисления.ФормыОплаты.Наличная,
			ДанныеЗаполнения
		);
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоРасходномуКассовомуОрдеру(Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы)
	|
	|	КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|		ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
	|	ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации)
	|
	|	КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника)
	|
	|	ИНАЧЕ
	|		ДанныеДокумента.ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу)
	|		ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|		ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
	|		ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|		ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|	ТОГДА
	|		Документ.КассаПолучатель
	|	ИНАЧЕ
	|		&Касса
	|	КОНЕЦ КАК Касса,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|		ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
	|		ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|	ТОГДА
	|		Документ.КассаПолучатель.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|		ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
	|		ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|	ТОГДА
	|		ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|	ИНАЧЕ
	|		ДанныеДокумента.СтатьяДвиженияДенежныхСредств
	|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
	|
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Валюта КАК ВалютаКонвертации,
	|	ДанныеДокумента.КурсКонвертации КАК КурсКонвертации,
	|	ДанныеДокумента.Ссылка КАК РасходныйКассовыйОрдер,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу)
	|		ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
	|		ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
	|		ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|		ИЛИ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|	ТОГДА
	|		ЕСТЬNULL(ДенежныеСредстваКПоступлению.СуммаОстаток, 0)
	|
	|	КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику) ТОГДА
	|		ЕСТЬNULL(ДенежныеСредстваУПодотчетныхЛиц.СуммаОстаток, 0)
	|
	|	ИНАЧЕ
	|		Документ.СуммаДокумента
	|
	|	КОНЕЦ КАК СуммаДокумента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваКПоступлениюНаличные.Остатки(,
	|			Документ = &Ссылка
	|		) КАК ДенежныеСредстваКПоступлению
	|	ПО
	|		Истина
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(,
	|			РасчетныйДокумент = &Ссылка
	|		) КАК ДенежныеСредстваУПодотчетныхЛиц
	|	ПО
	|		Истина
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
	|	)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("Касса", Касса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить приходный кассовый ордер на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;	
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка,, "СтатьяДвиженияДенежныхСредств");
		
		Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
			ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств = Выборка.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(
			Перечисления.ФормыОплаты.Наличная,
			ДанныеЗаполнения
		);
		Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника Тогда
			ПринятоОт = ФизическиеЛица.ФамилияИнициалыФизЛица(ДанныеЗаполнения.ПодотчетноеЛицо);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявкеНаВозвратТоваров(Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Контрагент.Наименование КАК КонтрагентНаименование,
	|	ДанныеДокумента.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Касса КАК Касса,
	|	ДанныеДокумента.Валюта КАК Валюта
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить приходный кассовый ордер на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Если Не ПустаяСтрока(Выборка.КонтрагентНаименованиеПолное) Тогда
			ДанныеЗаполнения.Вставить("ПринятоОт", Выборка.КонтрагентНаименованиеПолное);
		Иначе
			ДанныеЗаполнения.Вставить("ПринятоОт", Выборка.КонтрагентНаименование);
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(
			Перечисления.ФормыОплаты.Наличная,
			ДанныеЗаполнения
		);
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
			ДокументОснование,
			Выборка.Договор,
			ДанныеЗаполнения.Валюта,
			РасшифровкаПлатежа,
			Выборка.Партнер
		);
	КонецЕсли;
	
	// Заполнение суммы шапки документа
	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
		
КонецПроцедуры

Процедура ЗаполнитьПоВыемкеДенежныхСредствИзКассыККМ(Знач ВыемкаДенежныхСредствИзКассыККМ, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Неопределено                КАК Касса,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.КассаККМ    КАК КассаККМ,
	|	ДанныеДокумента.Валюта      КАК Валюта,
	|	ДанныеДокумента.Ссылка      КАК ДокументОснование,
	|	ДанныеДокумента.Ссылка      КАК ВыемкаДенежныхСредствИзКассыККМ,
	|	
	|	ЕСТЬNULL(ДенежныеСредстваКПоступлению.СуммаОстаток, 0) КАК СуммаДокумента,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ) КАК ХозяйственнаяОперация
	|	
	|ИЗ
	|	Документ.ВыемкаДенежныхСредствИзКассыККМ КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваКПоступлениюНаличные.Остатки(,
	|			Документ = &Ссылка
	|		) КАК ДенежныеСредстваКПоступлению
	|	ПО
	|		Истина
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ВыемкаДенежныхСредствИзКассыККМ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить приходный кассовый ордер на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(
			Перечисления.ФормыОплаты.Наличная,
			ДанныеЗаполнения
		);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоРеализацииУслугПрочихАктивов(Знач Реализация, ДанныеЗаполнения)
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
		|		ДанныеДокумента.БанковскийСчетОрганизации.Владелец
		|	ИНАЧЕ
		|		ДанныеДокумента.Организация
		|	КОНЕЦ КАК Организация,
		|	ДанныеДокумента.Партнер КАК Партнер,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеДокумента.Контрагент.Наименование КАК КонтрагентНаименование,
		|	ДанныеДокумента.Контрагент.НаименованиеПолное КАК ПринятоОт,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.Ссылка КАК ДокументОснование,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента) КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	НЕОПРЕДЕЛЕНО КАК Касса
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|");
	Запрос.УстановитьПараметр("Ссылка", Реализация);
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		Если ПустаяСтрока(ДанныеЗаполнения.ПринятоОт) Тогда
			ДанныеЗаполнения.ПринятоОт = Выборка.КонтрагентНаименование;
		КонецЕсли;
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(Перечисления.ФормыОплаты.Наличная, ДанныеЗаполнения);
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
			Реализация, Выборка.Договор, ДанныеЗаполнения.Валюта, РасшифровкаПлатежа, Выборка.Партнер
		);
	КонецЕсли;
	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Касса = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяКасса",);
	Если Не ЗначениеЗаполнено(Касса) Тогда
		Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(Неопределено);
	КонецЕсли;
	Если ЗначениеЗаполнено(Касса) Тогда
		СтруктураРеквизитов = Справочники.Кассы.ПолучитьРеквизитыКассы(Касса);
		Организация = СтруктураРеквизитов.Организация;
		Валюта = СтруктураРеквизитов.Валюта;
	КонецЕсли;
	
	Кассир = Пользователи.ТекущийПользователь();
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И НЕ ДанныеЗаполнения.Свойство("Валюта") Тогда
		Валюта = ДоходыИРасходыСервер.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда

		Массив.Добавить(Движения.РасчетыСКлиентами);

	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

Процедура ПроверитьБанковскийСчет(Отказ)
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
	   И ЗначениеЗаполнено(Касса)
	   И ЗначениеЗаполнено(БанковскийСчет)
	Тогда
		
		РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
		Если Организация <> РеквизитыСчета.Организация Тогда
			Текст = НСтр("ru = 'Организация счета не соответствует организации документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"БанковскийСчет",
				,
				Отказ
			);
		КонецЕсли;
		Если Валюта <> РеквизитыСчета.Валюта Тогда
			Текст = НСтр("ru = 'Валюта счета не соответствует валюте документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"БанковскийСчет",
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРасходныйКассовыйОрдер(Отказ)
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника);
	
	Если МассивОпераций.Найти(ХозяйственнаяОперация) <> Неопределено
	 И ЗначениеЗаполнено(РасходныйКассовыйОрдер)
	Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо
		|ИЗ
		|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|");
		Запрос.УстановитьПараметр("Ссылка", РасходныйКассовыйОрдер);
		Выборка = Запрос.Выполнить().Выбрать();
		
		СтруктураСообщений = Новый Структура;
		
		Если Выборка.Следующий() Тогда
			Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы
			 И Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу Тогда
				Текст = НСтр("ru = 'Необходимо указать расходный кассовый ордер с операцией ""Оплата денежных средств в другую кассу""!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					"РасходныйКассовыйОрдер",
					, // ПустьКДанным
					Отказ
				);
				
			ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
				
				Если Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
					И Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				Тогда
				    НаименованиеОплаты = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию.Метаданные().Синоним;
				    НаименованиеВозврата = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию.Метаданные().Синоним;
					Текст = НСтр("ru = 'Необходимо указать расходный кассовый ордер с 
										|операцией `%НаименованиеОплаты%`
										|или операцией `%НаименованиеВозврата%`!'");
					Текст = СтрЗаменить(Текст,"%НаименованиеОплаты%",НаименованиеОплаты);
					Текст = СтрЗаменить(Текст,"%НаименованиеВозврата%",НаименованиеВозврата);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ЭтотОбъект,
						"РасходныйКассовыйОрдер",
						, // ПустьКДанным
						Отказ
					);
				КонецЕсли;
				
				Если ПолучитьФункциональнуюОпцию("ИспользуетсяОбменСБухгалтериейПредприятия")
				 И Выборка.СуммаДокумента <> СуммаДокумента Тогда
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Сумма документа должна быть равна сумме расходного кассового ордера %1 %2'"),
						Выборка.СуммаДокумента,
						Выборка.Валюта
					);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ЭтотОбъект,
						"СуммаДокумента",
						, // ПустьКДанным
						Отказ
					);
				КонецЕсли;
				
			ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника Тогда
				
				Если Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
					Текст = НСтр("ru = 'Необходимо указать расходный кассовый ордер с операцией ""Выдача денежных средств подотчетнику""!'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ЭтотОбъект,
						"РасходныйКассовыйОрдер",
						, // ПустьКДанным
						Отказ
					);
				КонецЕсли;
				
				Если Выборка.Организация <> Организация Тогда
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Организация в расходном кассовом ордере не соответствует организации документа %1'"),
						Организация
					);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ЭтотОбъект,
						"РасходныйКассовыйОрдер",
						, // ПустьКДанным
						Отказ
					);
				КонецЕсли;
				
				Если Выборка.Валюта <> Валюта Тогда
					Текст = НСтр("ru = 'Валюта расходного кассового ордера не соответствует валюте документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ЭтотОбъект,
						"РасходныйКассовыйОрдер",
						, // ПустьКДанным
						Отказ
					);
				КонецЕсли;
				
				Если Выборка.ПодотчетноеЛицо <> ПодотчетноеЛицо Тогда
					Текст = НСтр("ru = 'Подотчетное лицо расходного кассового ордера отличается от подотчетного лица документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ЭтотОбъект,
						"РасходныйКассовыйОрдер",
						, // ПустьКДанным
						Отказ
					);
				КонецЕсли;
			 
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИзменениеХозяйственнойОперации()
	
	Если Не ЭтоНовый() Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы) ТОГДА
		|		Истина
		|	ИНАЧЕ
		|		Ложь
		|	КОНЕЦ КАК ВнутреннееПеремещение
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ВнутреннееПеремещение = (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
			Если Выборка.ВнутреннееПеремещение <> ВнутреннееПеремещение Тогда
				Номер = "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли
