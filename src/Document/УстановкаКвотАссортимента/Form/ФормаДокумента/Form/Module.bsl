///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	СформироватьДеревоПоТаблицеКатегорий();
	//
	ОбновитьИтоговыеПоказателиСервер();
	ОбновитьРекомендованныеПоказателиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПерезаполнитьКатегории(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьИтоговыеПоказателиСервер();
	ОбновитьРекомендованныеПоказателиСервер();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектПланированияПриИзменении(Элемент)
	ОбновитьРекомендованныеПоказателиСервер();
	ЕстьПлан=НаличиеПлана();
	Если ЕстьПлан Тогда
		Объект.ОбъектПланирования=Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаДействияПриИзменении(Элемент)
	Объект.ДатаНачалаДействия=НачалоМесяца(Объект.ДатаНачалаДействия);
	ЕстьПлан=НаличиеПлана();
	Если ЕстьПлан Тогда
		Объект.ДатаНачалаДействия=Неопределено;
	КонецЕсли;
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ДЕРЕВОКАТЕГОРИЙ

&НаКлиенте
Процедура ДеревоКатегорийКвотаПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ДеревоКатегорий.ТекущиеДанные;
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель<>Неопределено Тогда
		ОбновитьКвотуРодителя(Родитель);
	КонецЕсли;
	ОбновитьИтоговыеПоказателиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПроцентОтклоненияПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ДеревоКатегорий.ТекущиеДанные;
	Если ТекущаяСтрока.ПроцентОтклонения > 100 Тогда
		ТекстПредупреждения = НСтр("ru='Отклонение не может превышать 100%'");
		Предупреждение(ТекстПредупреждения);
		ТекущаяСтрока.ПроцентОтклонения = 100;
	КонецЕсли;
	Родитель = ТекущаяСтрока.ПолучитьРодителя();
	Если Родитель<>Неопределено Тогда
		ОбновитьПроцентРодителя(Родитель);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередНачаломИзменения(Элемент, Отказ)
	Если ТипЗнч(Элемент.ТекущиеДанные.ВидКатегорияМарка)=Тип("СправочникСсылка.Марки")
		ИЛИ ТипЗнч(Элемент.ТекущиеДанные.ВидКатегорияМарка)=Тип("Строка") Тогда
		Если Элемент.ТекущийЭлемент.Имя="ДеревоКатегорийВидКатегорияМарка" Тогда
			Отказ=Истина;
			Возврат;
		КонецЕсли;
	Иначе
		Отказ=Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущаяСтрока=Элемент.ТекущиеДанные;
	Если ТекущаяСтрока<>Неопределено Тогда
		Если ТипЗнч(ТекущаяСтрока.ВидКатегорияМарка)=Тип("СправочникСсылка.ТоварныеКатегории")
			ИЛИ ТипЗнч(ТекущаяСтрока.ВидКатегорияМарка)=Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
			Элементы.ДеревоКатегорий.Развернуть(ТекущаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПередУдалением(Элемент, Отказ)
	Ответ = Вопрос("Удалить строку?", РежимДиалогаВопрос.ДаНет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = Элементы.ДеревоКатегорий.ТекущиеДанные;
	ИндексТекущейСтроки = Элементы.ДеревоКатегорий.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		УменьшитьКвотуРодителяПослеУдаления(ТекущаяСтрока, ТекущаяСтрока.Квота);
		ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();
		Если ТекущийРодитель <> Неопределено Тогда
			ТекущаяСтрока.ПроцентОтклонения = 0;
			ОбновитьПроцентРодителя(ТекущийРодитель, Истина);
			ИндексРодителя = ТекущийРодитель.ПолучитьИдентификатор();
			КоличествоДопустимых = 1;
			УдалитьСтрокуРодителяПриНеобходимости(ИндексРодителя, КоличествоДопустимых);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийПослеУдаления(Элемент)
	ДеревоКатегорийПослеУдаленияСервер();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуРодителяПриНеобходимости(ИндексТекущий, КоличествоДопустимых)
	ТекущийРодитель = ДеревоКатегорий.НайтиПоИдентификатору(ИндексТекущий);
	Если ТекущийРодитель <> Неопределено Тогда
		ТекущиеПодчиненныеЭлементы = ТекущийРодитель.ПолучитьЭлементы();
		Если ТекущиеПодчиненныеЭлементы.Количество() = КоличествоДопустимых Тогда
			ТекущийРодительРодителя = ТекущийРодитель.ПолучитьРодителя();
			Если ТекущийРодительРодителя = Неопределено Тогда
				ПодчиненныеРодителяРодителя = ДеревоКатегорий.ПолучитьЭлементы();
				ПодчиненныеРодителяРодителя.Удалить(ТекущийРодитель);
				КоличествоДопустимых = 0;
			Иначе
				ПодчиненныеРодителяРодителя = ТекущийРодительРодителя.ПолучитьЭлементы();
				ПодчиненныеРодителяРодителя.Удалить(ТекущийРодитель);
				КоличествоДопустимых = 0;
				ИндексРодителяРодителя = ТекущийРодительРодителя.ПолучитьИдентификатор();
				УдалитьСтрокуРодителяПриНеобходимости(ИндексРодителяРодителя, КоличествоДопустимых);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьКатегориями(Команда)
	
	ЗаполнитьКатегориямиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымДругогоФормата(Команда)
	Если Объект.ТоварныеКатегории.Количество()>0 Тогда
		Ответ = Вопрос("Табличная часть содержит строки и будет перезаполнена", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ФормаВыбораФормата = ПолучитьФорму("Справочник.ФорматыМагазинов.ФормаВыбора");
	ВыбранныйФорматМагазина = ФормаВыбораФормата.ОткрытьМодально();
	Если ВыбранныйФорматМагазина = Неопределено Тогда
		Возврат;
	Иначе
		ЗаполнитьПоДаннымДругогоФорматаСервер(ВыбранныйФорматМагазина);
		СформироватьДеревоПоТаблицеКатегорий();
		ОбновитьИтоговыеПоказателиСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Команда)
	ЭлементыДерева = ДеревоКатегорий.ПолучитьЭлементы();
	Для Каждого ЭлементДерева ИЗ ЭлементыДерева Цикл
		ИДСтроки = ЭлементДерева.ПолучитьИдентификатор();
		Элементы.ДеревоКатегорий.Развернуть(ИДСтроки, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПроцентОтклоненияВсемСтрокам(Команда)
	Процент = 0;
	ТекстЗаголовкаВводаЧисла = НСтр("ru='Введите % отклонения'");
	Если ВвестиЧисло(Процент, ТекстЗаголовкаВводаЧисла, 3, 0) Тогда
		Если Процент > 100 Тогда
			ТекстПредупреждения = НСтр("ru='Отклонение не может превышать 100%'");
			Предупреждение(ТекстПредупреждения);
		Иначе
			ЭлементыДерева = ДеревоКатегорий.ПолучитьЭлементы();
			УстановитьПроцентПодчиненным(ЭлементыДерева, Процент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПроцентПодчиненным(ЭлементыДерева, Процент)
	Для Каждого ЭлементДерева ИЗ ЭлементыДерева Цикл
		ЭлементДерева.ПроцентОтклонения = Процент;
		Подчиненные = ЭлементДерева.ПолучитьЭлементы();
		Если Подчиненные.Количество() > 0 Тогда
			УстановитьПроцентПодчиненным(Подчиненные, Процент);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

	
&НаКлиенте
Процедура СвернутьДерево(Команда)
	ЭлементыДерева = ДеревоКатегорий.ПолучитьЭлементы();
	Для Каждого ЭлементДерева ИЗ ЭлементыДерева Цикл
		ИДСтроки = ЭлементДерева.ПолучитьИдентификатор();
		Элементы.ДеревоКатегорий.Свернуть(ИДСтроки);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМарку(Команда)
	ТекСтрока=Элементы.ДеревоКатегорий.ТекущиеДанные;
	Если ТекСтрока=Неопределено Тогда // Нет строк совсем
		Предупреждение("Марку можно добавить только в подчинение какой-либо категории.");
	Иначе
		ТипСтроки=0;
		Если ТипЗнч(ТекСтрока.ВидКатегорияМарка)=Тип("СправочникСсылка.ТоварныеКатегории") Тогда
			Если НЕ ТекСтрока.ЭтоГруппаКатегорий Тогда
				ТипСтроки=1;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекСтрока.ВидКатегорияМарка)=Тип("СправочникСсылка.Марки")
			ИЛИ ТипЗнч(ТекСтрока.ВидКатегорияМарка)=Тип("Строка") Тогда
			ТипСтроки=2;
		КонецЕсли;
		Если ТипСтроки>0 Тогда
			ВыбраннаяМарка = ОткрытьФормуМодально("Справочник.Марки.ФормаВыбора", , ЭтаФорма);
			Если ВыбраннаяМарка<>Неопределено Тогда
				ТекСтрокаКоллекция=ДеревоКатегорий.НайтиПоИдентификатору(Элементы.ДеревоКатегорий.ТекущаяСтрока);
				Если ТекСтрокаКоллекция<>Неопределено Тогда
					Если ТипСтроки=1 Тогда
						//добавляем в подчинение к текущей строке
						СтрокаРодителя = ТекСтрокаКоллекция;
					Иначе
						//добавляем в подчинение к строке родителя
						СтрокаРодителя = ТекСтрокаКоллекция.ПолучитьРодителя();
					КонецЕсли;
					ЭлементыСтроки=СтрокаРодителя.ПолучитьЭлементы();
					Если МаркаУжеДобавлена(СтрокаРодителя.ПолучитьИдентификатор(), ВыбраннаяМарка) Тогда
						Предупреждение("Марка уже добавлена в данной категории.");
					Иначе
						НоваяСтрока=ЭлементыСтроки.Добавить();
						НоваяСтрока.ВидКатегорияМарка=ВыбраннаяМарка;
						НоваяСтрока.Квота=0;
						НоваяСтрока.ПроцентОтклонения=0;
						НоваяСтрока.ИндексКартинки=2;
						ОбновитьПроцентРодителя(НоваяСтрока.ПолучитьРодителя());
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Предупреждение("Марку можно добавить только в подчинение какой-либо категории.");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоКатегорийИзменить(Команда)
	ТекущиеДанные = Элементы.ДеревоКатегорий.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ДеревоКатегорий.ИзменитьСтроку();
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбновитьКвотуРодителя(Родитель)
	
	ЭлементыРодителя=Родитель.ПолучитьЭлементы();
	КвотаИтог=0;
	Для Каждого ЭлементРодителя ИЗ ЭлементыРодителя Цикл
		КвотаИтог=КвотаИтог+ЭлементРодителя.Квота;
	КонецЦикла;
	Родитель.Квота=КвотаИтог;
	//
	РодительВыше=Родитель.ПолучитьРодителя();
	Если РодительВыше<>Неопределено Тогда
		ОбновитьКвотуРодителя(РодительВыше);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПроцентРодителя(Родитель, ПередУдалением = Ложь)
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	ПроцентИтог = 0;
	КоличествоПодчиненных = 0;
	Для Каждого ЭлементРодителя ИЗ ЭлементыРодителя Цикл
		ПроцентИтог = ПроцентИтог + ЭлементРодителя.ПроцентОтклонения;
		КоличествоПодчиненных = КоличествоПодчиненных + 1;
	КонецЦикла;
	Если ПередУдалением Тогда
		КоличествоПодчиненных = КоличествоПодчиненных - 1;
	КонецЕсли;
	Родитель.ПроцентОтклонения =  ?(КоличествоПодчиненных = 0, 0, ПроцентИтог / КоличествоПодчиненных);
	//
	РодительВыше = Родитель.ПолучитьРодителя();
	Если РодительВыше <> Неопределено Тогда
		Если ПередУдалением Тогда
			ЭлементыНиже = РодительВыше.ПолучитьЭлементы();
			Если ЭлементыНиже.Количество() > 1
				И ЭлементыРодителя.Количество() > 1 Тогда
				ОбновитьПроцентРодителя(РодительВыше);
			Иначе
				// Эта строка также будет удаляться
				ОбновитьПроцентРодителя(РодительВыше, Истина);
			КонецЕсли;
		Иначе
			ОбновитьПроцентРодителя(РодительВыше);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НаличиеПлана()
	ЕстьПлан = Ложь;
	Если ЗначениеЗаполнено(Объект.ОбъектПланирования) И ЗначениеЗаполнено(Объект.ДатаНачалаДействия) Тогда
		ЕстьПлан=НаличиеПланаСервер();
		Если ЕстьПлан Тогда
			ТекстПредупреждения=НСтр("ru='На "+Формат(Объект.ДатаНачалаДействия,"ДФ=dd.MM.yyyy")
			+" для выбранного формата уже существует документ установки квот."
			+Символы.ПС+"Установка квот может производиться не чаще 1 раза в месяц."
			+Символы.ПС+"Выберите другую дату или формат магазинов.'");
			Предупреждение(ТекстПредупреждения);
		КонецЕсли;
	КонецЕсли;
	Возврат ЕстьПлан;
КонецФункции

&НаКлиенте
Процедура УменьшитьКвотуРодителяПослеУдаления(ТекущаяСтрока, ВычитаемаяКвота)
	ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();
	Если ТекущийРодитель <> Неопределено Тогда
		ТекущийРодитель.Квота=ТекущийРодитель.Квота-ВычитаемаяКвота;
		УменьшитьКвотуРодителяПослеУдаления(ТекущийРодитель, ВычитаемаяКвота);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымДругогоФорматаСервер(ВыбранныйФорматМагазина)
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	Квоты.ТоварнаяКатегория КАК ТоварнаяКатегория,
	                    |	Квоты.Марка КАК Марка,
	                    |	Квоты.Квота КАК Квота,
	                    |	Квоты.ПроцентОтклонения КАК ПроцентОтклонения
	                    |ИЗ
	                    |	РегистрСведений.КвотыАссортимента.СрезПоследних(&НаДату, ОбъектПланирования = &ФорматМагазина) КАК Квоты
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФорматыМагазинов КАК Форматы
						|		ПО Квоты.ОбъектПланирования = Форматы.Ссылка
						|			И (Квоты.Период В
						|				(ВЫБРАТЬ
						|					МАКСИМУМ(К.Период)
						|				ИЗ
						|					РегистрСведений.КвотыАссортимента КАК К
						|				ГДЕ
						|					К.Период <= &НаДату
						|					И К.ОбъектПланирования = &ФорматМагазина))
	                    |	");
	Запрос.УстановитьПараметр("ФорматМагазина", ВыбранныйФорматМагазина);
	Запрос.УстановитьПараметр("НаДату", Объект.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	ТоварныеКатегорииОбъекта = Объект.ТоварныеКатегории;
	ТоварныеКатегорииОбъекта.Очистить();
	Пока Выборка.Следующий() Цикл
		НоваяСтрокаКатегорий = ТоварныеКатегорииОбъекта.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаКатегорий,Выборка);
	КонецЦикла;
	Элементы.ДеревоКатегорий.НачальноеОтображениеДерева=НачальноеОтображениеДерева.НеРаскрывать;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКатегориямиСервер()
	ПерезаполнитьКатегории();
	МенеджерВТ=Новый МенеджерВременныхТаблиц;
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	ТаблицаКатегории.ТоварнаяКатегория,
	                    |	ТаблицаКатегории.Марка,
	                    |	ТаблицаКатегории.Квота,
	                    |	ТаблицаКатегории.ПроцентОтклонения
	                    |ПОМЕСТИТЬ втДокументКатегории
	                    |ИЗ
	                    |	&ТаблицаКатегории КАК ТаблицаКатегории
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	СправочникКатегории.Владелец КАК ВидНоменклатуры,
	                    |	СправочникКатегории.Владелец.Наименование КАК НаименованиеВидаНоменклатуры,
	                    |	СправочникКатегории.Ссылка КАК ТоварнаяКатегория,
	                    |	СправочникКатегории.Наименование КАК НаименованиеКатегории,
	                    |	СправочникКатегории.ЭтоГруппа КАК ЭтоГруппаКатегорий,
	                    |	ЕСТЬNULL(ДокументКатегории.Марка,ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка)) КАК Марка,
	                    |	ЕСТЬNULL(ДокументКатегории.Марка.Наименование,"""") КАК НаименованиеМарки,
	                    |	ЕСТЬNULL(ДокументКатегории.Квота, 0) КАК Квота,
	                    |	ЕСТЬNULL(ДокументКатегории.ПроцентОтклонения, 0) КАК ПроцентОтклонения
	                    |ИЗ
	                    |	Справочник.ТоварныеКатегории КАК СправочникКатегории
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ втДокументКатегории КАК ДокументКатегории
	                    |		ПО СправочникКатегории.Ссылка = ДокументКатегории.ТоварнаяКатегория
	                    |ГДЕ
	                    |	НЕ СправочникКатегории.ЭтоГруппа
	                    |	И НЕ СправочникКатегории.ПометкаУдаления
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	НаименованиеВидаНоменклатуры,
	                    |	НаименованиеКатегории,
	                    |	НаименованиеМарки
	                    |ИТОГИ
	                    |	СУММА(Квота),
	                    |	0 КАК ПроцентОтклонения
	                    |ПО
	                    |	ВидНоменклатуры ИЕРАРХИЯ,
	                    |	ТоварнаяКатегория ИЕРАРХИЯ");
	Запрос.МенеджерВременныхТаблиц=МенеджерВТ;
	Запрос.УстановитьПараметр("ТаблицаКатегории",Объект.ТоварныеКатегории.Выгрузить());
	РезультатПакета=Запрос.ВыполнитьПакет();
	ИндексРезультата=РезультатПакета.Количество()-1;
	РезультатЗапроса=РезультатПакета[ИндексРезультата];
	ЗаполнитьДеревоПоРезультатуЗапроса(РезультатЗапроса);
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоговыеПоказателиСервер()
	ДеревоОбъект=РеквизитФормыВЗначение("ДеревоКатегорий",Тип("ДеревоЗначений"));
	КвотаВсего=ДеревоОбъект.Строки.Итог("Квота");
	Если КвотаВсего = КвотаРекомендованная тогда
		Элементы.КвотаВсего.ЦветТекста = Новый Цвет(0,128,0);
		Элементы.КвотаРекомендованная.ЦветТекста = Новый Цвет(0,128,0);
	Иначе
		Элементы.КвотаВсего.ЦветТекста = Новый Цвет(22,39,121);
		Элементы.КвотаРекомендованная.ЦветТекста = Новый Цвет(22,39,121);
	КонецЕсли;
	ДеревоОбъект=Неопределено;
КонецПроцедуры

&НаСервере
Процедура ОбновитьРекомендованныеПоказателиСервер()
	КвотаРекомендованная=Объект.ОбъектПланирования.КоличествоАссортиментныхПозиций;
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоПоТаблицеКатегорий()
	ТаблицаИсточник=Объект.ТоварныеКатегории.Выгрузить();
	МенеджерВТ=Новый МенеджерВременныхТаблиц;
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	ТаблицаКатегории.ТоварнаяКатегория,
	                    |	ТаблицаКатегории.Марка,
	                    |	ТаблицаКатегории.Квота,
	                    |	ТаблицаКатегории.ПроцентОтклонения
	                    |ПОМЕСТИТЬ втДокументКатегории
	                    |ИЗ
	                    |	&ТаблицаИсточник КАК ТаблицаКатегории
	                    |;
	                    |
	                    |////////////////////////////////////////////////////////////////////////////////
	                    |ВЫБРАТЬ
	                    |	ТоварныеКатегории.ТоварнаяКатегория.Владелец КАК ВидНоменклатуры,
	                    |	ТоварныеКатегории.ТоварнаяКатегория.Владелец.Наименование КАК НаименованиеВидаНоменклатуры,
	                    |	ТоварныеКатегории.ТоварнаяКатегория КАК ТоварнаяКатегория,
	                    |	ТоварныеКатегории.ТоварнаяКатегория.Наименование КАК НаименованиеКатегории,
						|	ТоварныеКатегории.ТоварнаяКатегория.ЭтоГруппа КАК ЭтоГруппаКатегорий,
	                    |	ТоварныеКатегории.Марка КАК Марка,
	                    |	ТоварныеКатегории.Марка.Наименование КАК НаименованиеМарки,
	                    |	ТоварныеКатегории.Квота КАК Квота,
	                    |	ТоварныеКатегории.ПроцентОтклонения КАК ПроцентОтклонения
	                    |ИЗ
	                    |	втДокументКатегории КАК ТоварныеКатегории
	                    |ГДЕ
	                    |	НЕ ТоварныеКатегории.ТоварнаяКатегория.ЭтоГруппа
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	НаименованиеВидаНоменклатуры,
	                    |	НаименованиеКатегории,
	                    |	НаименованиеМарки
	                    |ИТОГИ
	                    |	СУММА(Квота),
	                    |	СРЕДНЕЕ(ПроцентОтклонения) КАК ПроцентОтклонения
	                    |ПО
	                    |	ВидНоменклатуры ИЕРАРХИЯ,
	                    |	ТоварнаяКатегория ИЕРАРХИЯ");
	Запрос.МенеджерВременныхТаблиц=МенеджерВТ;
	Запрос.УстановитьПараметр("ТаблицаИсточник",ТаблицаИсточник);
	
	РезультатПакета=Запрос.ВыполнитьПакет();
	ИндексРезультата=РезультатПакета.Количество()-1;
	РезультатЗапроса=РезультатПакета[ИндексРезультата];
	//
	ЗаполнитьДеревоПоРезультатуЗапроса(РезультатЗапроса);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоРезультатуЗапроса(РезультатЗапроса)
	ДеревоОбъект=РеквизитФормыВЗначение("ДеревоКатегорий",Тип("ДеревоЗначений"));
	ДеревоОбъект.Строки.Очистить();
	//
	ДеревоРезультат=РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗаполнитьПодчиненныеСтроки(ДеревоОбъект, ДеревоРезультат);
	ЗначениеВРеквизитФормы(ДеревоОбъект,"ДеревоКатегорий");
	Элементы.ДеревоКатегорий.НачальноеОтображениеДерева=НачальноеОтображениеДерева.НеРаскрывать;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеСтроки(ПриемникРодитель, ИсточникРодитель)
	
	Для Каждого СтрокаИсточника ИЗ ИсточникРодитель.Строки Цикл
		СтрокаПриемника=ПриемникРодитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемника,СтрокаИсточника);
		Если СтрокаИсточника.Марка <> Null Тогда
			Если ЗначениеЗаполнено(СтрокаИсточника.Марка) Тогда
				СтрокаПриемника.ВидКатегорияМарка=СтрокаИсточника.Марка;
			Иначе
				СтрокаПриемника.ВидКатегорияМарка="Прочие марки";
			КонецЕсли;
			СтрокаПриемника.ЭтоИтог=Ложь;
			СтрокаПриемника.ИндексКартинки=2;
		ИначеЕсли СтрокаИсточника.ТоварнаяКатегория <> Null Тогда
			СтрокаПриемника.ВидКатегорияМарка=СтрокаИсточника.ТоварнаяКатегория;
			СтрокаПриемника.ЭтоИтог=Истина;
			Если СтрокаИсточника.ЭтоГруппаКатегорий Тогда
				СтрокаПриемника.ИндексКартинки=0;
			Иначе
				СтрокаПриемника.ИндексКартинки=1;
			КонецЕсли;
		Иначе
			СтрокаПриемника.ВидКатегорияМарка=СтрокаИсточника.ВидНоменклатуры;
			СтрокаПриемника.ЭтоИтог=Истина;
			СтрокаПриемника.ИндексКартинки=0;
		КонецЕсли;
		
		// И рекурсивно подчиненные
		ЗаполнитьПодчиненныеСтроки(СтрокаПриемника,СтрокаИсточника);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьКатегории(ТекущийОбъект = Неопределено)
	Если ТекущийОбъект = Неопределено Тогда
		Объект.ТоварныеКатегории.Очистить();
		ОбработатьПодчиненныеСтрокиПриПерезаполнении(ДеревоКатегорий);
	Иначе
		ТекущийОбъект.ТоварныеКатегории.Очистить();
		ОбработатьПодчиненныеСтрокиПриПерезаполнении(ДеревоКатегорий, ТекущийОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодчиненныеСтрокиПриПерезаполнении(ЭлементДереваРодитель, ТекущийОбъект = Неопределено)
	ЭлементыДерева=ЭлементДереваРодитель.ПолучитьЭлементы();
	Для Каждого ЭлементДерева ИЗ ЭлементыДерева Цикл
		Если ЭлементДерева.ЭтоИтог Тогда
			ОбработатьПодчиненныеСтрокиПриПерезаполнении(ЭлементДерева, ТекущийОбъект);
		Иначе
			ДобавитьСтрокуВТаблицуКатегорийПриПерезаполнении(ЭлементДерева, ТекущийОбъект);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуВТаблицуКатегорийПриПерезаполнении(ЭлементДерева, ТекущийОбъект = Неопределено)
	Родитель=ЭлементДерева.ПолучитьРодителя();
	Если Родитель<>Неопределено Тогда
		ТекущаяКатегория = Родитель.ВидКатегорияМарка;
		Если ТекущийОбъект = Неопределено Тогда
			НоваяСтрока = Объект.ТоварныеКатегории.Добавить();
		Иначе
			НоваяСтрока = ТекущийОбъект.ТоварныеКатегории.Добавить();
		КонецЕсли;
		НоваяСтрока.ТоварнаяКатегория = ТекущаяКатегория;
		//
		НоваяСтрока.Марка				= ЭлементДерева.ВидКатегорияМарка;
		НоваяСтрока.Квота				= ЭлементДерева.Квота;
		НоваяСтрока.ПроцентОтклонения	= ЭлементДерева.ПроцентОтклонения;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДеревоКатегорийПослеУдаленияСервер()
	ПерезаполнитьКатегории();
	ОбновитьИтоговыеПоказателиСервер();
КонецПроцедуры

&НаСервере
Функция НаличиеПланаСервер()
	Возврат Документы.УстановкаКвотАссортимента.СуществуетПлан(Объект.ОбъектПланирования, Объект.ДатаНачалаДействия, Объект.Ссылка);
КонецФункции

&НаСервере
Функция МаркаУжеДобавлена(СтрокаРодителя, ВыбраннаяМарка)
	УжеДобавлена = Ложь;
	ПодчиненныеСтроки = ДеревоКатегорий.НайтиПоИдентификатору(СтрокаРодителя).ПолучитьЭлементы();
	Для Каждого ПодчиненнаяСтрока ИЗ ПодчиненныеСтроки Цикл
		Если ПодчиненнаяСтрока.ВидКатегорияМарка = ВыбраннаяМарка Тогда
			УжеДобавлена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат УжеДобавлена;
КонецФункции
