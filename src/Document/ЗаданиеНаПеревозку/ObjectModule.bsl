#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаданийНаПеревозку[НовыйСтатус];
	
	МаксимальноеВремяПо = МаксимальноеВремяПо();
	Если ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаданийНаПеревозку.КПогрузке Тогда
		
		Если Не ЗначениеЗаполнено(ДатаВремяРейсаПланПо) Тогда
			ДатаВремяРейсаПланПо = Макс(МаксимальноеВремяПо(),ДатаВремяРейсаПланС);
		КонецЕсли;
		
	ИначеЕсли ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаданийНаПеревозку.Отправлен Тогда
			
		Если Не ЗначениеЗаполнено(ДатаВремяРейсаПланПо) Тогда
			ДатаВремяРейсаПланПо = Макс(МаксимальноеВремяПо(),ДатаВремяРейсаПланС);
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(ДатаВремяРейсаФактС) Тогда
			ДатаВремяРейсаФактС = ТекущаяДата();
		КонецЕсли;
		
	ИначеЕсли ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаданийНаПеревозку.Закрыт Тогда
		
		Если Не ЗначениеЗаполнено(ДатаВремяРейсаПланПо) Тогда
			ДатаВремяРейсаПланПо = Макс(МаксимальноеВремяПо(),ДатаВремяРейсаПланС);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаВремяРейсаФактС) Тогда
			ДатаВремяРейсаФактС = ТекущаяДата();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаВремяРейсаФактПо) Тогда
			ДатаВремяРейсаФактПо = ТекущаяДата();
		КонецЕсли;
		
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

Функция МаксимальноеВремяПо()
	Если Маршрут.Количество() <> 0 Тогда
		ТаблицаМаршрута = Маршрут.Выгрузить();
		ТаблицаМаршрута.Сортировать("ВремяПо Убыв");
		
		Возврат ТаблицаМаршрута[0].ВремяПо
	Иначе
		Возврат '00010101'
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//Вес и Объем в единицах измерения
	Вес   = Маршрут.Итог("Вес") * Константы.КоэффициентПересчетаВТонны.Получить();
	Объем = Маршрут.Итог("Объем") * Константы.КоэффициентПересчетаВКубическиеМетры.Получить();
	
	ВсегоПунктов = Маршрут.Количество();
	КоличествоПунктов = Маршрут.Количество();
	
	Если Не ЭтоНовый()
		И Статус = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка, "Статус")
		И Статус = Перечисления.СтатусыЗаданийНаПеревозку.Отправлен Тогда
		
		ЗакешироватьРаспоряженияДляПерерасчетаСостоянийОтгрузки();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Формируется")
			Или Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.ПустаяСсылка")  Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Распоряжения");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВремяРейсаПланС");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВремяРейсаФактС");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВремяРейсаФактПо");
	КонецЕсли;
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.КПогрузке") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВремяРейсаФактС");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВремяРейсаФактПо");
	КонецЕсли;
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Отправлен") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВремяРейсаФактПо");
	КонецЕсли;
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Отправлен") Тогда
		
		Если Не ЗначениеЗаполнено(ДатаВремяРейсаФактС) Тогда
			ДатаВремяРейсаФактС = ТекущаяДата();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаВремяРейсаПланПо) Тогда
			ДатаВремяРейсаПланПо = Макс(МаксимальноеВремяПо(),ДатаВремяРейсаПланС);
		КонецЕсли;
		
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Закрыт") Тогда
		
		Если Не ЗначениеЗаполнено(ДатаВремяРейсаФактПо) Тогда
			ДатаВремяРейсаФактПо = ТекущаяДата();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаВремяРейсаФактС) Тогда
			ДатаВремяРейсаФактС = ТекущаяДата();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДатаВремяРейсаПланПо) Тогда
			ДатаВремяРейсаПланПо = Макс(МаксимальноеВремяПо(),ДатаВремяРейсаПланС);				
		КонецЕсли;
		
	ИначеЕсли Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.КПогрузке") Тогда
		
		Если Не ЗначениеЗаполнено(ДатаВремяРейсаПланПо) Тогда
			ДатаВремяРейсаПланПо = Макс(МаксимальноеВремяПо(),ДатаВремяРейсаПланС);				
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДатаВремяРейсаПланС)
			И ЗначениеЗаполнено(ДатаВремяРейсаПланПо)
			И ДатаВремяРейсаПланС > ДатаВремяРейсаПланПо Тогда
		ТекстСообщения = НСтр("ru = 'Планируемая дата окончания рейса не может быть раньше начала рейса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,"ДатаВремяРейсаФактПо");	
		Отказ = Истина;		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ДатаВремяРейсаФактС)
			И ЗначениеЗаполнено(ДатаВремяРейсаФактПо)
			И ДатаВремяРейсаФактС > ДатаВремяРейсаФактПо Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВремяРейсаФактС");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВремяРейсаФактПо");
		ТекстСообщения = НСтр("ru = 'Фактическая дата окончания рейса не может быть раньше начала рейса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,"ДатаВремяРейсаФактПо");
		Отказ = Истина;
	КонецЕсли;
	
	КлючевыеРеквизиты = Новый Массив;
	КлючевыеРеквизиты.Добавить("Распоряжение");
	
	ОбщегоНазначенияУТ.ПроверитьНаличиеДублейСтрокТЧ(ЭтотОбъект,"Распоряжения",КлючевыеРеквизиты,Отказ);

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	КонтролироватьКорректностьУказанияРаспоряжений = Истина;
	ДополнительныеСвойства.Свойство("КонтролироватьКорректностьУказанияРаспоряжений",КонтролироватьКорректностьУказанияРаспоряжений);
	Если КонтролироватьКорректностьУказанияРаспоряжений = Неопределено
		ИЛИ КонтролироватьКорректностьУказанияРаспоряжений Тогда
		ПроверитьКорректностьУказанияРаспоряжений(Отказ);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("СостояниеДоставкиРаспоряжений") Тогда
		
		МассивРаспоряжений = ИзменившиесяРаспоряжения();
		
	Иначе
		
		МассивРаспоряжений = Распоряжения.ВыгрузитьКолонку("Распоряжение");
		
	КонецЕсли;
	
	Если МассивРаспоряжений.Количество() > 0 Тогда
		
		СкладыСервер.ОтразитьСостоянияОтгрузки(МассивРаспоряжений, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	МассивРаспоряжений = Распоряжения.ВыгрузитьКолонку("Распоряжение");
	
	СкладыСервер.ОтразитьСостоянияОтгрузки(МассивРаспоряжений, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение и инициализация

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Склад          = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	Ответственный  = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ПроверитьКорректностьУказанияРаспоряжений(Отказ)
	
	МассивРаспоряжений = Распоряжения.Выгрузить().ВыгрузитьКолонку("Распоряжение");
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Распоряжения.КлючСвязи КАК КлючСвязи,
	|	Распоряжения.Распоряжение КАК Распоряжение
	|ПОМЕСТИТЬ Распоряжения
	|ИЗ
	|	&Распоряжения КАК Распоряжения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Маршрут.КлючСвязи КАК КлючСвязи,
	|	Маршрут.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Маршрут
	|ИЗ
	|	&Маршрут КАК Маршрут
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение,
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка КАК ЗаданиеНаПеревозкуПовтор
	|ПОМЕСТИТЬ ПовторяющиесяРаспоряжения
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|ГДЕ
	|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение В
	|			(ВЫБРАТЬ
	|				Распоряжения.Распоряжение
	|			ИЗ
	|				Распоряжения)
	|	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка <> &Ссылка
	|	И ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Проведен
	|	И НЕ(ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Закрыт)
	|				И НЕ ЗаданиеНаПеревозкуРаспоряжения.Доставлено)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение,
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Маршрут.НомерСтроки КАК НомерСтроки,
	|	ПовторяющиесяРаспоряжения.Распоряжение КАК Распоряжение,
	|	ПовторяющиесяРаспоряжения.ЗаданиеНаПеревозкуПовтор КАК ЗаданиеНаПеревозкуПовтор
	|ИЗ
	|	ПовторяющиесяРаспоряжения КАК ПовторяющиесяРаспоряжения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Распоряжения КАК Распоряжения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Маршрут КАК Маршрут
	|			ПО Распоряжения.КлючСвязи = Маршрут.КлючСвязи
	|		ПО ПовторяющиесяРаспоряжения.Распоряжение = Распоряжения.Распоряжение
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки" ;
	РаспоряженияТаблицаЗначений = Распоряжения.Выгрузить();
	
	МаршрутТаблицаЗначений = Маршрут.Выгрузить();
	
	Запрос.УстановитьПараметр("Распоряжения",РаспоряженияТаблицаЗначений);
	Запрос.УстановитьПараметр("Маршрут",МаршрутТаблицаЗначений);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ТекстСообщения = НСтр("ru = 'В пункте маршрута № %НомерСтроки% есть распоряжение ""%Распоряжение%"", которое уже включено в %ЗаданиеНаПеревозку%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Распоряжение%", Выборка.Распоряжение);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗаданиеНаПеревозку%", Выборка.ЗаданиеНаПеревозкуПовтор);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		
		ПолеТЧ = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Маршрут",Выборка.НомерСтроки, "НомерСтроки"); 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Ссылка,ПолеТЧ,"Объект",Отказ);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗакешироватьРаспоряженияДляПерерасчетаСостоянийОтгрузки()
	
	СостояниеДоставкиРаспоряжений = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = СостояниеДоставкиРаспоряжений;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение,
	|	ЗаданиеНаПеревозкуРаспоряжения.Доставлено
	|ПОМЕСТИТЬ СостояниеДоставкиРаспоряжений
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|ГДЕ
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Выполнить();
	
	ДополнительныеСвойства.Вставить("СостояниеДоставкиРаспоряжений", СостояниеДоставкиРаспоряжений);
	
КонецПроцедуры

Функция ИзменившиесяРаспоряжения()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.СостояниеДоставкиРаспоряжений;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Распоряжение КАК Распоряжение,
	|	СУММА(ВложенныйЗапрос.Доставлено) КАК Изменение
	|ИЗ
	|	(ВЫБРАТЬ
	|		СостояниеДоставкиРаспоряжений.Распоряжение КАК Распоряжение,
	|		ВЫБОР
	|			КОГДА СостояниеДоставкиРаспоряжений.Доставлено
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ КАК Доставлено
	|	ИЗ
	|		СостояниеДоставкиРаспоряжений КАК СостояниеДоставкиРаспоряжений
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаданиеНаПеревозкуРаспоряжения.Распоряжение,
	|		ВЫБОР
	|			КОГДА ЗаданиеНаПеревозкуРаспоряжения.Доставлено
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ
	|	ИЗ
	|		Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|	ГДЕ
	|		ЗаданиеНаПеревозкуРаспоряжения.Ссылка = &Ссылка) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Распоряжение
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.Доставлено) <> 0";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ИзменившиесяРаспоряжения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Распоряжение");
	
	ДополнительныеСвойства.СостояниеДоставкиРаспоряжений.Закрыть();
	
	Возврат ИзменившиесяРаспоряжения;
	
КонецФункции

#КонецЕсли
