
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
		
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОшибкаКоэффВеса Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не задан коэффициент пересчета в тонны. Обратитесь к администратору.';"));
		
	КонецЕсли;
	
	Если ОшибкаКоэффОбъема Тогда	
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не задан коэффициент пересчета в кубические метры. Обратитесь к администратору.';"));
		
	КонецЕсли;

КонецПроцедуры


//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
		
	Если Объект.Распоряжения.Количество() > 0 Тогда
		Если Склад <> Объект.Склад Тогда		
			Ответ = Вопрос(НСтр("ru='Списки будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				
				Объект.Склад = Склад;
				Возврат;
				
			Иначе
				
				Склад = Объект.Склад;
				
			КонецЕсли;
		Иначе
			Возврат;	
		КонецЕсли;
	Иначе 	
		
		Склад = Объект.Склад;
		
	КонецЕсли;
	
	ПриИзмененииСкладаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортноеСредствоПриИзменении(Элемент)
	
	УстановитьГрузоподъемностьЕмкостьТранспорта();

КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	ТекстОповещения = СтатусПриИзмененииНаСервере();
	
	Если ТекстОповещения <> "" Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Автоматически заполнено время'"),
			,
			ТекстОповещения,
			БиблиотекаКартинок.Информация32
		);
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ МАРШРУТ

&НаКлиенте
Процедура МаршрутПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("МаршрутПриАктивизацииСтрокиОбработчикОжидания", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПередУдалением(Элемент, Отказ)
		
	ВыделенныеСтроки = Элементы.Маршрут.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество()>0 Тогда
		Модифицированность = Истина;
		МаршрутПередУдалениемНаСервере(Элементы.Маршрут.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
 
КонецПроцедуры

&НаКлиенте
Процедура МаршрутДоставленоПриИзменении(Элемент)
	
	Если Элементы.Маршрут.ТекущиеДанные.Доставлено Тогда
				
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязи",Элементы.Маршрут.ТекущиеДанные.КлючСвязи);
		СтруктураПоиска.Вставить("Доставлено", Ложь);
		
		Для Каждого СтрокаРаспоряжения Из Объект.Распоряжения.НайтиСтроки(СтруктураПоиска) Цикл
			СтрокаРаспоряжения.Доставлено = Истина; 	
		КонецЦикла;	
		
	Иначе 
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязи",Элементы.Маршрут.ТекущиеДанные.КлючСвязи);
		СтруктураПоиска.Вставить("Доставлено", Истина);
		
		Для Каждого СтрокаРаспоряжения Из Объект.Распоряжения.НайтиСтроки(СтруктураПоиска) Цикл
			СтрокаРаспоряжения.Доставлено = Ложь; 	
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МаршрутАдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(ТекущиеДанные.АдресДоставки,
													ТекущиеДанные.АдресДоставкиЗначенияПолей,
													РедактироватьАдресаДоставкиТолькоВДиалоге,
													АдресаДоставкиТолькоРоссийские);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутАдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.Маршрут.ТекущиеДанные.АдресДоставки = ВыбранноеЗначение.Представление;
	Элементы.Маршрут.ТекущиеДанные.АдресДоставкиЗначенияПолей = ВыбранноеЗначение.ЗначенияПолей;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутВремяСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	ВыбранноеВремя = РаботаСДиалогамиКлиент.ВыбратьВремя(ЭтаФорма, Элемент, ТекущиеДанные.ВремяС);
	
	Если ВыбранноеВремя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВремяС = ВыбранноеВремя;
	
	ПриИзмененииВремяС();
	ОтсортироватьСписокМаршрута();

КонецПроцедуры

&НаКлиенте
Процедура МаршрутВремяСПриИзменении(Элемент)
	
	ПриИзмененииВремяС();
	ОтсортироватьСписокМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутДатаСПриИзменении(Элемент)
	
	ПриИзмененииВремяС();
	ОтсортироватьСписокМаршрута();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутВремяПоНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Маршрут.ТекущиеДанные;
	ВыбранноеВремя = РаботаСДиалогамиКлиент.ВыбратьВремя(ЭтаФорма, Элемент, ТекущиеДанные.ВремяПо);
	
	Если ВыбранноеВремя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВремяПо = ВыбранноеВремя;
	
	ПриИзмененииВремяПо();
	ОтсортироватьСписокМаршрута();

КонецПроцедуры

&НаКлиенте
Процедура МаршрутВремяПоПриИзменении(Элемент)

	ПриИзмененииВремяПо();
	ОтсортироватьСписокМаршрута();
	
КонецПроцедуры


&НаКлиенте
Процедура МаршрутДатаПоПриИзменении(Элемент)
	
	ПриИзмененииВремяПо();
	ОтсортироватьСписокМаршрута();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ РАСПОРЯЖЕНИЯ

&НаКлиенте
Процедура РаспоряженияПередУдалением(Элемент, Отказ)
	
	ВыделенныеСтроки = Элементы.Распоряжения.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		Модифицированность = Истина;
		РаспоряжениеПередУдалениемСервер(Элементы.Распоряжения.ВыделенныеСтроки,Элементы.Распоряжения.ТекущиеДанные.КлючСвязи)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = ПроверитьЗаполнениеСклада();
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияРаспоряжениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаспоряжениеПередИзменениемБылоЗаполнено = ЗначениеЗаполнено(Элементы.Распоряжения.ТекущиеДанные.Распоряжение);
	Если ЗначениеЗаполнено(Элементы.Распоряжения.ТекущиеДанные.КлючСвязи) Тогда
		СтарыйКлючСвязи = Новый УникальныйИдентификатор(Элементы.Распоряжения.ТекущиеДанные.КлючСвязи);
	Иначе
		СтарыйКлючСвязи = Неопределено;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияРаспоряжениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		МассивОтбор = Новый Массив;
		МассивОтбор.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПеремещенийТоваров.КОтгрузке"));
		МассивОтбор.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПеремещенийТоваров.Отгружено"));
		МассивОтбор.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПеремещенийТоваров.Принято"));
		ОтборСтатус = Новый ФиксированныйМассив(МассивОтбор);
	ИначеЕсли ВыбранноеЗначение = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		МассивОтбор = Новый Массив;
		МассивОтбор.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыРеализацийТоваровУслуг.КОтгрузке"));
		МассивОтбор.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено"));
		ОтборСтатус = Новый ФиксированныйМассив(МассивОтбор);
	ИначеЕсли Элементы.Распоряжения.ТекущиеДанные.Распоряжение <> ВыбранноеЗначение Тогда
		Модифицированность = Истина;
		РаспоряженияРаспоряжениеОбработкаВыбораСервер(ВыбранноеЗначение);
		МаршрутПриАктивизацииСтрокиОбработчикОжидания();
		ОтсортироватьСписокМаршрута();
		Элементы.Распоряжения.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элементы.Распоряжения.ТекущиеДанные <> Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(Элементы.Распоряжения.ТекущиеДанные.Распоряжение) Тогда
			РаспоряжениеПередУдалениемСервер(Элементы.Распоряжения.ВыделенныеСтроки,Элементы.Распоряжения.ТекущиеДанные.КлючСвязи)
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияДоставленоПриИзменении(Элемент)
	
	Если Элементы.Распоряжения.ТекущиеДанные.Доставлено Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КлючСвязи",Элементы.Маршрут.ТекущиеДанные.КлючСвязи);
		СтруктураПоиска.Вставить("Доставлено", Ложь);
		КоличествоНеДоставленныхРаспоряжений = Объект.Распоряжения.НайтиСтроки(СтруктураПоиска).Количество();
		
		Если КоличествоНеДоставленныхРаспоряжений = 0 Тогда
			Элементы.Маршрут.ТекущиеДанные.Доставлено = Истина;
		КонецЕсли	
	Иначе 
		Элементы.Маршрут.ТекущиеДанные.Доставлено = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОткрытьСклады(Команда)
		
	АдресСкладов = ПоместитьСкладыВХранилищеСервер();
	
	ПараметрыФормы = Новый Структура("АдресСкладов", АдресСкладов);	
	ОткрытьФорму("Документ.ЗаданиеНаПеревозку.Форма.ФормаСпискаСкладовПогрузки", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазнестиПоВремени(Команда)
	
	Если Элементы.Маршрут.ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	КлючСвязи = Элементы.Маршрут.ТекущиеДанные.КлючСвязи;
	
	Распоряжения = Объект.Распоряжения.НайтиСтроки(Новый Структура("КлючСвязи",КлючСвязи));
	КоличествоРаспоряжений = Распоряжения.Количество();
	
	Если КоличествоРаспоряжений < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоРаспоряжений = 2 Тогда
		МассивИндексовРаспоряжений = Новый Массив;
		МассивИндексовРаспоряжений.Добавить(Распоряжения[1].НомерСтроки);	
		
		РазбитьПунктДоставкиСервер(Элементы.Маршрут.ТекущиеДанные.ПолучитьИдентификатор(),МассивИндексовРаспоряжений);
		
	Иначе
		АдресРаспоряжений = ПоместитьРаспоряженияВХранилище(КлючСвязи);
		ПараметрыФормы = Новый Структура("АдресРаспоряжений", АдресРаспоряжений);
		
		МассивИндексовРаспоряжений = ОткрытьФормуМодально(
			"Документ.ЗаданиеНаПеревозку.Форма.ФормаВыбораРаспоряжений",
			ПараметрыФормы,
			ЭтаФорма
		);
		Если МассивИндексовРаспоряжений<>Неопределено Тогда
			РазбитьПунктДоставкиСервер(Элементы.Маршрут.ТекущиеДанные.ПолучитьИдентификатор(),МассивИндексовРаспоряжений);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьПоВремени(Команда)
	
	ВыделенныеСтроки = Элементы.Маршрут.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = ОбъединитьПоВремениСервер(ВыделенныеСтроки);	
	
	Если СтруктураВозврата.РазныеАдреса Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось объединить выделенные строки: выберите строки с одинаковыми адресами.';"));
		Возврат;	
	ИначеЕсли СтруктураВозврата.РазныеДанные Тогда
		СтрВопроса = НСтр("ru = 'Выделенные строки содержат несколько значений данных (время, доп. информация). Объединение строк приведет к потере всех значений, кроме первой строки. Продолжить?'");
		Ответ = Вопрос(СтрВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;				
	КонецЕсли;
		
	 ОбъединитьСтрокиМаршрута(ВыделенныеСтроки,СтруктураВозврата.МассивКодовСтрок)
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутДоставленоУстановитьВсе(Команда)
		
	Для Каждого СтрокаРаспоряжения Из Объект.Распоряжения Цикл
		СтрокаРаспоряжения.Доставлено = Истина; 	
	КонецЦикла;	
	
	Для Каждого СтрокаМаршрута Из Объект.Маршрут Цикл
		СтрокаМаршрута.Доставлено = Истина; 	
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура МаршрутДоставленоСнятьВсе(Команда)
		
	Для Каждого СтрокаРаспоряжения Из Объект.Распоряжения Цикл
		СтрокаРаспоряжения.Доставлено = Ложь; 	
	КонецЦикла;	
	
	Для Каждого СтрокаМаршрута Из Объект.Маршрут Цикл
		СтрокаМаршрута.Доставлено = Ложь; 	
	КонецЦикла;

КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// СтандартныеПодсистемы.Свойства
&НаСервере
 Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
 КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Табличная часть Распоряжения

&НаСервере
Процедура РаспоряженияРаспоряжениеОбработкаВыбораСервер(ВыбранноеЗначение)
	
	//Проверка на корректность параметров отбора 
	РеквизитыРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыбранноеЗначение, 
			Новый Структура("АдресДоставки,АдресДоставкиЗначенияПолей,ЗонаДоставки,
							|СпособДоставки, ПеревозчикПартнер,
							|АдресДоставкиПеревозчика,АдресДоставкиПеревозчикаЗначенияПолей,
							|ВремяДоставкиС, ВремяДоставкиПо, ДополнительнаяИнформацияПоДоставке"));
	Если Тип("ДокументСсылка.РеализацияТоваровУслуг") = ТипЗнч(ВыбранноеЗначение) Тогда
		РеквизитыРаспоряжения.Вставить("Получатель",ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение,"Партнер"));
	Иначе
		РеквизитыРаспоряжения.Вставить("Получатель",ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение,"СкладОтправитель"));
	КонецЕсли;
	
	СтарыеДанныеМаршрут = Неопределено;
	Если Элементы.Маршрут.ТекущаяСтрока <> Неопределено Тогда	
		СтарыеДанныеМаршрут  = Объект.Маршрут.НайтиПоИдентификатору(Элементы.Маршрут.ТекущаяСтрока);
		ВремяССтрокиМаршрута  = СтарыеДанныеМаршрут.ВремяС;
		ВремяПоСтрокиМаршрута = СтарыеДанныеМаршрут.ВремяПо;
	Иначе
		ВремяССтрокиМаршрута  = '00010101';
		ВремяПоСтрокиМаршрута = '00010101';
	КонецЕсли;
	
	ТекущиеДанныеРаспоряжение      = Объект.Распоряжения.НайтиПоИдентификатору(Элементы.Распоряжения.ТекущаяСтрока);
	Элементы.Маршрут.ТекущаяСтрока = ПолучитьИдентификаторСтрокиМаршрута(РеквизитыРаспоряжения,ВремяССтрокиМаршрута);
	ТекущиеДанныеМаршрут           = Объект.Маршрут.НайтиПоИдентификатору(Элементы.Маршрут.ТекущаяСтрока);
	
	ТекущиеДанныеМаршрут.Доставлено = Ложь;
	
	СтруктураВозврата = РассчитатьВесОбъемРаспоряжения(ВыбранноеЗначение);
			
	ТекущиеДанныеРаспоряжение.Распоряжение			   = ВыбранноеЗначение;
	ТекущиеДанныеРаспоряжение.КлючСвязи   			   = ТекущиеДанныеМаршрут.КлючСвязи;
	ТекущиеДанныеРаспоряжение.Получатель 			   = РеквизитыРаспоряжения.Получатель;	
	ТекущиеДанныеРаспоряжение.Перевозчик 			   = РеквизитыРаспоряжения.ПеревозчикПартнер;	
	ТекущиеДанныеРаспоряжение.Вес       			   = СтруктураВозврата.Вес;
	ТекущиеДанныеРаспоряжение.Объем       			   = СтруктураВозврата.Объем;
	ТекущиеДанныеРаспоряжение.ВремяС     			   = РеквизитыРаспоряжения.ВремяДоставкиС;	
	ТекущиеДанныеРаспоряжение.ВремяПо     			   = РеквизитыРаспоряжения.ВремяДоставкиПо;	
	ТекущиеДанныеРаспоряжение.ДополнительнаяИнформация = РеквизитыРаспоряжения.ДополнительнаяИнформацияПоДоставке;
	
	ОбновитьВесИОбъемСтрокиМаршрута(ТекущиеДанныеМаршрут);
	Если СтарыеДанныеМаршрут <> Неопределено И 
		РаспоряжениеПередИзменениемБылоЗаполнено Тогда
		ОбновитьВесИОбъемСтрокиМаршрута(СтарыеДанныеМаршрут);
	КонецЕсли;
	
	ОбновитьИтоговыйВесИОбъем();
	ОбновитьЗаполненностьНаСервере();
	
	Если РаспоряжениеПередИзменениемБылоЗаполнено
		И ТекущиеДанныеМаршрут.КлючСвязи <> СтарыйКлючСвязи Тогда
		 //Если добавили новый пункт маршрута, тогда надо актуализировать пункт,
		 // на котором позиционировались до изменения
		РаспоряжениеПередУдалениемСервер(Новый Массив,СтарыйКлючСвязи);
	Иначе
		ОбновитьСкладыПогрузки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспоряжениеПередУдалениемСервер(Знач ВыделенныеСтроки,КлючСвязи)
	
	СтрокиМаршрута = Объект.Маршрут.НайтиСтроки(Новый Структура("КлючСвязи",КлючСвязи));
	
	Если СтрокиМаршрута.Количество()>0 Тогда
		СтрокаМаршрута = СтрокиМаршрута[0];	
	Иначе
		Если ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
			Объект.Распоряжения.Удалить(Объект.Распоряжения.НайтиПоИдентификатору(ВыделенныеСтроки[0]));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		СтрокаРаспоряжения = Объект.Распоряжения.НайтиПоИдентификатору(Идентификатор);	
								
		Объект.Распоряжения.Удалить(СтрокаРаспоряжения);
			
	КонецЦикла;
	
	//Удаление строки маршрута, если не осталось распоряжений по данному адресу доставки
	Распоряжения = Объект.Распоряжения.НайтиСтроки(Новый Структура("КлючСвязи",КлючСвязи));
	Если (Распоряжения.Количество() = 0) Тогда
		МассивУдаляемыхСтрок = Новый Массив;
		МассивУдаляемыхСтрок.Добавить(СтрокаМаршрута.ПолучитьИдентификатор());
		МаршрутПередУдалениемНаСервере(МассивУдаляемыхСтрок);
	Иначе
		ОбновитьВесИОбъемСтрокиМаршрута(СтрокаМаршрута);
		ОбновитьИтоговыйВесИОбъем();
	КонецЕсли;
	
	ОбновитьСкладыПогрузки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораРаспоряжений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка В ИЕРАРХИИ(&Ссылка)";
	Запрос.УстановитьПараметр("Ссылка", Объект.Склад);
	МассивОтбора = Новый ФиксированныйМассив(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	ОтборСклад = МассивОтбора;
	ОтборСкладОтправитель = МассивОтбора;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Табличная часть Маршрут

&НаКлиенте
Процедура МаршрутПриАктивизацииСтрокиОбработчикОжидания()
	
	СтрокаМаршрута = Элементы.Маршрут.ТекущиеДанные;
	Если СтрокаМаршрута = Неопределено тогда
		Элементы.Распоряжения.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи",NULL);
	Иначе
		Элементы.Распоряжения.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", СтрокаМаршрута.КлючСвязи);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция  ПолучитьИдентификаторСтрокиМаршрута(РеквизитыРаспоряжения,ВремяССтрокиМаршрута);
	
	Если РеквизитыРаспоряжения.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента Тогда
		АдресРаспоряжения = РеквизитыРаспоряжения.АдресДоставки;
		АдресЗначенияПолей = РеквизитыРаспоряжения.АдресДоставкиЗначенияПолей;
	Иначе
		АдресРаспоряжения = РеквизитыРаспоряжения.АдресДоставкиПеревозчика;
		АдресЗначенияПолей = РеквизитыРаспоряжения.АдресДоставкиПеревозчикаЗначенияПолей;
	КонецЕсли;
	
	АдресСравнения = Врег(СокрЛП(АдресРаспоряжения));
	АдресСравнения = СтрЗаменить(АдресСравнения," ","");
	
	НайденаСтрока = Ложь;
	
	Для Каждого СтрокаМаршрута Из Объект.Маршрут Цикл
		
		АдресСравненияМаршрут = СтрЗаменить(Врег(СокрЛП(СтрокаМаршрута.АдресДоставки))," ","");
					
		Если АдресСравнения = АдресСравненияМаршрут Тогда
			
			Возврат СтрокаМаршрута.ПолучитьИдентификатор();
			
		КонецЕсли;
		
	КонецЦикла;	
	
	КлючСвязи = Новый УникальныйИдентификатор;
	
	НоваяСтрокаМаршрута = Объект.Маршрут.Добавить();
	НоваяСтрокаМаршрута.КлючСвязи = КлючСвязи;
	НоваяСтрокаМаршрута.АдресДоставки = АдресРаспоряжения;
	НоваяСтрокаМаршрута.АдресДоставкиЗначенияПолей = АдресЗначенияПолей;
	НоваяСтрокаМаршрута.ЗонаДоставки = РеквизитыРаспоряжения.ЗонаДоставки;
	НоваяСтрокаМаршрута.ВремяС = Макс(ВремяССтрокиМаршрута,Объект.ДатаВремяРейсаПланС);
	
	Возврат НоваяСтрокаМаршрута.ПолучитьИдентификатор();
	
КонецФункции

&НаСервере 
Процедура МаршрутПередУдалениемНаСервере(Знач ВыделенныеСтроки)
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущаяСтрока = Объект.Маршрут.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		КлючСвязи = ТекущаяСтрока.КлючСвязи;
		
		Объект.Маршрут.Удалить(ТекущаяСтрока);
		
		Для Каждого СтрокаРаспоряжения Из Объект.Распоряжения.НайтиСтроки(Новый Структура("КлючСвязи",КлючСвязи)) Цикл
				
			Объект.Распоряжения.Удалить(СтрокаРаспоряжения);
			
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьИтоговыйВесИОбъем();
	ОбновитьЗаполненностьНаСервере();
	
	ОбновитьСкладыПогрузки();
	
КонецПроцедуры

&НаСервере
Процедура РазбитьПунктДоставкиСервер(ИндентификаторСтрокиМаршрута,МассивИндексовРаспоряжений = Неопределено)
	
	СтрокаМаршрута = Объект.Маршрут.НайтиПоИдентификатору(ИндентификаторСтрокиМаршрута); 
	НоваяСтрока = Объект.Маршрут.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаМаршрута);
	КлючСвязи = Новый УникальныйИдентификатор;
	НоваяСтрока.КлючСвязи = КлючСвязи;
	
	Для Каждого ИндексСтрокиРаспоряжений Из МассивИндексовРаспоряжений Цикл
		СтруктураПоиск = Новый Структура("НомерСтроки",ИндексСтрокиРаспоряжений);
		
		СтрокаРаспоряжения = Объект.Распоряжения.НайтиСтроки(СтруктураПоиск)[0];
		СтрокаРаспоряжения.КлючСвязи = КлючСвязи;		
	КонецЦикла;	
		
	Элементы.Маршрут.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ОбновитьВесИОбъемСтрокиМаршрута(СтрокаМаршрута);
	ОбновитьВесИОбъемСтрокиМаршрута(НоваяСтрока);
	ОбновитьИтоговыйВесИОбъем();
КонецПроцедуры                                                      

&НаСервере
Функция ОбъединитьПоВремениСервер(ВыделенныеСтроки)
	
	СоответствиеАдресов = Новый Соответствие;
	СоответствиеЗонДоставки = Новый Соответствие;
	СоответствиеВремяС = Новый Соответствие;
	СоответствиеВремяПо = Новый Соответствие;
	СоответствиеДополнительнаяИнформация = Новый Соответствие;
	СоответствиеДоставлено = Новый Соответствие;	
	
	МассивКодовСтрок = Новый Массив;
	СтруктураВозврата = Новый Структура;
	
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		СтрокаРаспоряжения = Объект.Маршрут.НайтиПоИдентификатору(Идентификатор);	
		
		СоответствиеАдресов.Вставить(СтрокаРаспоряжения.АдресДоставки,"");
		СоответствиеЗонДоставки.Вставить(СтрокаРаспоряжения.ЗонаДоставки,"");
        СоответствиеВремяС.Вставить(СтрокаРаспоряжения.ВремяС,"");
        СоответствиеВремяПо.Вставить(СтрокаРаспоряжения.ВремяПо,"");
		СоответствиеДополнительнаяИнформация.Вставить(СтрокаРаспоряжения.ДополнительнаяИнформация,"");
		СоответствиеДоставлено.Вставить(СтрокаРаспоряжения.Доставлено,"");
		 		        
		МассивКодовСтрок.Добавить(СтрокаРаспоряжения.КлючСвязи);
	КонецЦикла;	
		
	Если СоответствиеАдресов.Количество()>1 Тогда
		СтруктураВозврата.Вставить("РазныеАдреса",Истина);
		Возврат СтруктураВозврата;
	ИначеЕсли СоответствиеЗонДоставки.Количество()>1
			ИЛИ СоответствиеВремяС.Количество() > 1
			ИЛИ СоответствиеВремяПо.Количество() > 1
			ИЛИ СоответствиеДополнительнаяИнформация.Количество()>1
			ИЛИ СоответствиеДоставлено.Количество() > 1
			ИЛИ СоответствиеЗонДоставки.Количество() > 1 Тогда
		СтруктураВозврата.Вставить("РазныеАдреса",Ложь);
		СтруктураВозврата.Вставить("РазныеДанные",Истина);
	Иначе
		СтруктураВозврата.Вставить("РазныеАдреса",Ложь);
		СтруктураВозврата.Вставить("РазныеДанные",Ложь);
	КонецЕсли;
	
	СтруктураВозврата.Вставить("МассивКодовСтрок",МассивКодовСтрок);
	
	Возврат СтруктураВозврата;	
		
КонецФункции

&НаСервере
Функция ОбъединитьСтрокиМаршрута(ВыделенныеСтроки,МассивКодовСтрок)
		
	СтрокаМаршрута = Объект.Маршрут.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	НовыйКлючСвязи = СтрокаМаршрута.КлючСвязи;
	СтрокаМаршрута.Вес = 0;
	СтрокаМаршрута.Объем = 0;
	
	Для Каждого СтрокаРаспоряжения Из Объект.Распоряжения Цикл
		
		Если МассивКодовСтрок.Найти(СтрокаРаспоряжения.КлючСвязи)<>Неопределено Тогда
			СтрокаРаспоряжения.КлючСвязи = НовыйКлючСвязи;
			СтрокаМаршрута.Вес = СтрокаМаршрута.Вес + СтрокаРаспоряжения.Вес;
			СтрокаМаршрута.Объем = СтрокаМаршрута.Объем + СтрокаРаспоряжения.Объем;
		КонецЕсли;	
		
	КонецЦикла;	
	
	СтрокаПропущена = Ложь;
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		Если Не СтрокаПропущена Тогда
			СтрокаПропущена = Истина;
			Продолжить;
		КонецЕсли;
		
		Объект.Маршрут.Удалить(Объект.Маршрут.НайтиПоИдентификатору(Идентификатор));	
		
	КонецЦикла;	
	
КонецФункции

&НаКлиенте
Процедура ОтсортироватьСписокМаршрута()
	
	Объект.Маршрут.Сортировать("ВремяС, ВремяПо, АдресДоставки");
		
КонецПроцедуры	

 &НаКлиенте
Процедура ПриИзмененииВремяС()
	
	ТекущаяСтрокаМаршрута = Элементы.Маршрут.ТекущиеДанные;
	Если ТекущаяСтрокаМаршрута.ВремяС < Объект.ДатаВремяРейсаПланС Тогда
		
		Объект.ДатаВремяРейсаПланС = ТекущаяСтрокаМаршрута.ВремяС;
				
		ПоказатьОповещениеПользователя("Плановая дата начала рейса изменена",,"Выбранная дата раньше плановой даты начала рейса.")

	КонецЕсли;
	
КонецПроцедуры	

 &НаКлиенте
Процедура ПриИзмененииВремяПо()
	
	ТекущаяСтрокаМаршрута = Элементы.Маршрут.ТекущиеДанные;
	Если ТекущаяСтрокаМаршрута.ВремяПо < ТекущаяСтрокаМаршрута.ВремяС Тогда
		
		ТекущаяСтрокаМаршрута.ВремяС = ТекущаяСтрокаМаршрута.ВремяПо;
		
	КонецЕсли;
	
	Если Объект.ДатаВремяРейсаПланС <> '00010101' И Объект.ДатаВремяРейсаПланПо < ТекущаяСтрокаМаршрута.ВремяПо Тогда
		
		Объект.ДатаВремяРейсаПланПо = ТекущаяСтрокаМаршрута.ВремяПо;
				
		ПоказатьОповещениеПользователя("Плановая дата окончания рейса изменена",,"Выбранная дата позже плановой даты окончания рейса.")
		
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура МаршрутВесОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВесСтроки = Элементы.Маршрут.ТекущиеДанные.Вес;
	Объект.Вес = Объект.Вес + (ВыбранноеЗначение - ВесСтроки)*КоэффициентПересчетаВТонны;
	ОбновитьЗаполненностьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура МаршрутОбъемОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбъемСтроки = Элементы.Маршрут.ТекущиеДанные.Объем;
	Объект.Объем = Объект.Объем + (ВыбранноеЗначение - ОбъемСтроки)*КоэффициентПересчетаВКубическиеМетры;
	ОбновитьЗаполненностьНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура МаршрутВесПриИзменении(Элемент)
	ОбновитьИтоговыйВесИОбъем();
КонецПроцедуры

&НаКлиенте
Процедура МаршрутОбъемПриИзменении(Элемент)
	ОбновитьИтоговыйВесИОбъем();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ДатаВремяРейсаПланСПриИзменении(Элемент)
	
	Для Каждого СтрокаМаршрута Из Объект.Маршрут Цикл
		
		Если СтрокаМаршрута.ВремяС = '00010101' Тогда
			
			СтрокаМаршрута.ВремяС = Объект.ДатаВремяРейсаПланС;
			
		ИначеЕсли СтрокаМаршрута.ВремяС < Объект.ДатаВремяРейсаПланС Тогда
			
			СтрокаМаршрута.ВремяС = Объект.ДатаВремяРейсаПланС;
			
		КонецЕсли;
			
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	//Формирование параметров отбора
	МассивОтбор = Новый Массив;
	МассивОтбор.Добавить(Перечисления.СпособыДоставки.ДоКлиента);
	МассивОтбор.Добавить(Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу);
	ОтборСпособДоставки = Новый ФиксированныйМассив(МассивОтбор);
	
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	ЕдиницаИзмеренияОбъема = Константы.ЕдиницаИзмеренияОбъема.Получить();
	
	КоэффициентПересчетаВТонны     			 = Константы.КоэффициентПересчетаВТонны.Получить();	
	КоэффициентПересчетаВКубическиеМетры     = Константы.КоэффициентПересчетаВКубическиеМетры.Получить();
	
	Если КоэффициентПересчетаВТонны = 0 Тогда		
		КоэффициентПересчетаВТонны = 1;
		ОшибкаКоэффВеса = Истина;
	Иначе
		ОшибкаКоэффВеса = Ложь;
	КонецЕсли;
	
	Если КоэффициентПересчетаВКубическиеМетры = 0 Тогда	
		КоэффициентПересчетаВКубическиеМетры = 1;
		ОшибкаКоэффОбъема = Истина;
	Иначе
		ОшибкаКоэффОбъема = Ложь;
	КонецЕсли;
		
	УстановитьГрузоподъемностьЕмкостьТранспортаНаСервере();
	
	Элементы.РаспоряженияОбъем.Заголовок = "Объем, (" + Строка(ЕдиницаИзмеренияОбъема) + ")";
	Элементы.РаспоряженияВес.Заголовок = "Вес, (" + Строка(ЕдиницаИзмеренияВеса) + ")";
	Элементы.МаршрутОбъем.Заголовок = "Объем, (" + Строка(ЕдиницаИзмеренияОбъема) + ")";
	Элементы.МаршрутВес.Заголовок = "Вес, (" + Строка(ЕдиницаИзмеренияВеса) + ")";

	Склад = Объект.Склад;
	
	Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	КонецЕсли;
	
	Если Объект.Маршрут.Количество()> 0 Тогда
		Элементы.Распоряжения.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", Объект.Маршрут[0].КлючСвязи);	
	КонецЕсли;		
	
	УстановитьПараметрыВыбораРаспоряжений();
	
	КоличествоСкладовПогрузки = Объект.СкладыПогрузки.Количество();
	Если ЗначениеЗаполнено(Объект.Склад) Тогда		
		ОдинСклад = Не(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад,"ЭтоГруппа"));
	Иначе 
		ОдинСклад = Ложь;
	КонецЕсли;
			
	Если КоличествоСкладовПогрузки = 0 Или ОдинСклад Тогда
		Элементы.КартинкаНесколькоСкладов.Видимость = Ложь;
		Элементы.ОткрытьСклады.Видимость = Ложь;
	Иначе
		Элементы.КартинкаНесколькоСкладов.Видимость = Истина;
		Элементы.ОткрытьСклады.Видимость = Истина;
		ТекстЗаголовка = НСтр("ru = 'Склады погрузки (%СкладыПогрузкиКоличество%)'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%СкладыПогрузкиКоличество%", КоличествоСкладовПогрузки);
		Элементы.ОткрытьСклады.Заголовок = ТекстЗаголовка;	
	КонецЕсли;	
		
	РедактироватьАдресаДоставкиТолькоВДиалоге = ПолучитьФункциональнуюОпцию("РедактироватьАдресаДоставкиТолькоВДиалоге");
	АдресаДоставкиТолькоРоссийские = ПолучитьФункциональнуюОпцию("АдресаДоставкиТолькоРоссийские");

	ОтборПроведен = Истина;
	
	УстановитьОтметкуНезаполненного();
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьВесОбъемРаспоряжения(Распоряжение)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА РеализацияТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|					ИЛИ РеализацияТоваровУслугТовары.Упаковка.Вес = 0
	|				ТОГДА РеализацияТоваровУслугТовары.Номенклатура.Вес * РеализацияТоваровУслугТовары.КоличествоУпаковок
	|			ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка.Вес * РеализацияТоваровУслугТовары.КоличествоУпаковок
	|		КОНЕЦ) КАК ВесНакладной,
	|	СУММА(ВЫБОР
	|			КОГДА РеализацияТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|					ИЛИ РеализацияТоваровУслугТовары.Упаковка.Объем = 0
	|				ТОГДА РеализацияТоваровУслугТовары.Номенклатура.Объем * РеализацияТоваровУслугТовары.КоличествоУпаковок
	|			ИНАЧЕ РеализацияТоваровУслугТовары.Упаковка.Объем * РеализацияТоваровУслугТовары.КоличествоУпаковок
	|		КОНЕЦ) КАК ОбъемНакладной
	|ПОМЕСТИТЬ РеализацияИШаблоны
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Распоряжения
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваровТовары.Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|					ИЛИ ПеремещениеТоваровТовары.Упаковка.Вес = 0
	|				ТОГДА ПеремещениеТоваровТовары.Номенклатура.Вес * ПеремещениеТоваровТовары.КоличествоУпаковок
	|			ИНАЧЕ ПеремещениеТоваровТовары.Упаковка.Вес * ПеремещениеТоваровТовары.КоличествоУпаковок
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|					ИЛИ ПеремещениеТоваровТовары.Упаковка.Объем = 0
	|				ТОГДА ПеремещениеТоваровТовары.Номенклатура.Объем * ПеремещениеТоваровТовары.КоличествоУпаковок
	|			ИНАЧЕ ПеремещениеТоваровТовары.Упаковка.Объем * ПеремещениеТоваровТовары.КоличествоУпаковок
	|		КОНЕЦ)
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
	|ГДЕ
	|	ПеремещениеТоваровТовары.Ссылка = &Распоряжения
	|
	|СГРУППИРОВАТЬ ПО
	|	ПеремещениеТоваровТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияИШаблоны.Ссылка,
	|	РеализацияИШаблоны.ВесНакладной,
	|	РеализацияИШаблоны.ОбъемНакладной
	|ИЗ
	|	РеализацияИШаблоны КАК РеализацияИШаблоны";
	
	Запрос.УстановитьПараметр("Распоряжения", Распоряжение);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Вес",Выборка.ВесНакладной);
	СтруктураВозврата.Вставить("Объем",Выборка.ОбъемНакладной);
	
	Возврат СтруктураВозврата
	
КонецФункции	
	
&НаСервере
Функция МаксимальноеВремяПо()
	Если Объект.Маршрут.Количество() <> 0 Тогда
		ТаблицаМаршрута = Объект.Маршрут.Выгрузить();
		ТаблицаМаршрута.Сортировать("ВремяПо Убыв");
		
		Возврат ТаблицаМаршрута[0].ВремяПо
	Иначе
		Возврат '00010101'
	КонецЕсли;
КонецФункции	

&НаКлиенте
Процедура УстановитьГрузоподъемностьЕмкостьТранспорта()
	
	РеквизитыТранспортногоСредства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ТранспортноеСредство, 
	Новый Структура("ГрузоподъемностьВТоннах, ВместимостьВКубическихМетрах")); 
	
	Грузоподъемность = РеквизитыТранспортногоСредства.ГрузоподъемностьВТоннах;	
	ЕмкостьТранспорта = РеквизитыТранспортногоСредства.ВместимостьВКубическихМетрах;
	
	ОбновитьЗаполненностьНаКлиенте();	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьГрузоподъемностьЕмкостьТранспортаНаСервере()
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		
		РеквизитыТранспортногоСредства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ТранспортноеСредство, 
		Новый Структура("ГрузоподъемностьВТоннах, ВместимостьВКубическихМетрах")); 
		
		Грузоподъемность = РеквизитыТранспортногоСредства.ГрузоподъемностьВТоннах;	
		ЕмкостьТранспорта = РеквизитыТранспортногоСредства.ВместимостьВКубическихМетрах;
		
	    ОбновитьЗаполненностьНаСервере();
		
	Иначе
		
		Грузоподъемность = 0;	
		ЕмкостьТранспорта = 0;
		
		ЗаполненностьПоВесу = 0;	
		ЗаполненностьПоОбъему = 0;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаполненностьНаСервере()
	
	Если КоэффициентПересчетаВТонны <> 0 Тогда 
		ЗаполненностьПоВесу   = ?(Грузоподъемность=0,0,Объект.Вес/Грузоподъемность);	
	КонецЕсли;
	
	Если КоэффициентПересчетаВКубическиеМетры <> 0 Тогда
		ЗаполненностьПоОбъему = ?(ЕмкостьТранспорта=0,0,Объект.Объем/ЕмкостьТранспорта);
	КонецЕсли;
	
КонецПроцедуры		

&НаСервере
Процедура ОбновитьИтоговыйВесИОбъем()
	 
	Объект.Вес   = КоэффициентПересчетаВТонны * Объект.Маршрут.Итог("Вес");
	Объект.Объем = КоэффициентПересчетаВКубическиеМетры * Объект.Маршрут.Итог("Объем");	 
		 	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьВесИОбъемСтрокиМаршрута(СтрокаМаршрута)
	
	СтрокиРаспоряжения = Объект.Распоряжения.НайтиСтроки(Новый Структура("КлючСвязи",СтрокаМаршрута.КлючСвязи));
	
	СтрокаМаршрута.Вес = 0;
	СтрокаМаршрута.Объем = 0;
		
	Для Каждого СтрокаРаспоряжения Из СтрокиРаспоряжения Цикл
		
		СтрокаМаршрута.Вес = СтрокаРаспоряжения.Вес + СтрокаМаршрута.Вес;
		СтрокаМаршрута.Объем = СтрокаРаспоряжения.Объем + СтрокаМаршрута.Объем;
		
	КонецЦикла;	 
		 	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаполненностьНаКлиенте()
	
	Если КоэффициентПересчетаВТонны <> 0 Тогда 
		ЗаполненностьПоВесу   = ?(Грузоподъемность=0,0,Объект.Вес/Грузоподъемность);	
	КонецЕсли;
	
	Если КоэффициентПересчетаВКубическиеМетры <> 0 Тогда
		ЗаполненностьПоОбъему = ?(ЕмкостьТранспорта=0,0,Объект.Объем/ЕмкостьТранспорта);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Функция ПроверитьЗаполнениеСклада()

	Если Объект.Склад.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'Поле ""Склад"" не заполнено.'"), ,
		"Объект.Склад");

		Возврат Истина;		
	Иначе
		
		Возврат Ложь;	
	КонецЕсли	
	
КонецФункции

&НаСервере
Функция ПоместитьРаспоряженияВХранилище(КлючСвязи)
	
	СтруктураПоиск = Новый Структура("КлючСвязи",КлючСвязи);
	Распоряжения = Объект.Распоряжения.Выгрузить().Скопировать(СтруктураПоиск);
	
	Возврат ПоместитьВоВременноеХранилище(Распоряжения, УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПоместитьСкладыВХранилищеСервер()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.СкладыПогрузки.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ПриИзмененииСкладаСервер()
	
	Объект.Распоряжения.Очистить();
	Объект.Маршрут.Очистить();
	Объект.Вес = 0;
	Объект.Объем = 0;
	ЗаполненностьПоВесу = 0;
	ЗаполненностьПоОбъему = 0;
	
	УстановитьПараметрыВыбораРаспоряжений();
	ОбновитьСкладыПогрузки();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСкладыПогрузки();
	
	Объект.СкладыПогрузки.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда		
		ЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад,"ЭтоГруппа");
		Если Не ЭтоГруппа Тогда
	
			НоваяСтрока = Объект.СкладыПогрузки.Добавить();
			НоваяСтрока.Склад = Объект.Склад;
			Элементы.КартинкаНесколькоСкладов.Видимость = Ложь;
			Элементы.ОткрытьСклады.Видимость = Ложь;
			Возврат;
			
		КонецЕсли;	
	Иначе
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПеремещениеТоваров.СкладОтправитель КАК Склад
	|ПОМЕСТИТЬ СкладыПеремещений
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	ПеремещениеТоваров.Ссылка В(&Распоряжения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеализацияТоваровУслугТовары.Склад КАК Склад
	|ПОМЕСТИТЬ СкладыРеализации
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка В(&Распоряжения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладыПеремещений.Склад
	|ПОМЕСТИТЬ СкладыОбщие
	|ИЗ
	|	СкладыПеремещений КАК СкладыПеремещений
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкладыРеализации.Склад
	|ИЗ
	|	СкладыРеализации КАК СкладыРеализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СкладыОбщие.Склад
	|ИЗ
	|	СкладыОбщие КАК СкладыОбщие";
	Запрос.УстановитьПараметр("Распоряжения",Объект.Распоряжения.Выгрузить().ВыгрузитьКолонку("Распоряжение"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
	Если РезультатЗапроса.Количество() <> 0 Тогда
		Элементы.КартинкаНесколькоСкладов.Видимость = Истина;
		Элементы.ОткрытьСклады.Видимость = Истина;
	КонецЕсли;
	
	Объект.СкладыПогрузки.Загрузить(РезультатЗапроса);
	
	ТекстЗаголовка = НСтр("ru = 'Складов погрузки(%СкладыПогрузкиКоличество%)'");
	ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%СкладыПогрузкиКоличество%", РезультатЗапроса.Количество());
	Элементы.ОткрытьСклады.Заголовок = ТекстЗаголовка;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуНезаполненного()
	
	Если Объект.Распоряжения.Количество() = 0 Тогда
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Формируется")
				ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.ПустаяСсылка") Тогда
			Элементы.Распоряжения.ОтметкаНезаполненного = Ложь;
		Иначе
			Элементы.Распоряжения.ОтметкаНезаполненного = Истина;
		КонецЕсли;
		
	Иначе
	
		Элементы.Распоряжения.АвтоОтметкаНезаполненного = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

 &НаСервере
Функция СтатусПриИзмененииНаСервере()
	
	ТекстОповещения = "";
	МаксимальноеВремяПо = МаксимальноеВремяПо();
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.КПогрузке") Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ДатаВремяРейсаПланПо) Тогда
			Объект.ДатаВремяРейсаПланПо = Макс(МаксимальноеВремяПо,Объект.ДатаВремяРейсаПланС);
			ТекстОповещения = НСтр("ru='Заполнено плановое время окончания рейса'");
		КонецЕсли;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Отправлен") Тогда
			
		Если Не ЗначениеЗаполнено(Объект.ДатаВремяРейсаПланПо) Тогда
			Объект.ДатаВремяРейсаПланПо = Макс(МаксимальноеВремяПо,Объект.ДатаВремяРейсаПланС);
			ТекстОповещения = НСтр("ru='Заполнено плановое время окончания рейса'");
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(Объект.ДатаВремяРейсаФактС) Тогда
			Объект.ДатаВремяРейсаФактС = ТекущаяДата();
			ТекстОповещения = ?(ТекстОповещения<>"",НСтр("ru=' и'"),НСтр("ru='Заполнено'"))
				+ НСтр("ru=' фактическое время начала рейса'");
		КонецЕсли;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Закрыт") Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ДатаВремяРейсаПланПо) Тогда
			Объект.ДатаВремяРейсаПланПо = Макс(МаксимальноеВремяПо,Объект.ДатаВремяРейсаПланС);
			ТекстОповещения = НСтр("ru='Заполнено плановое время окончания рейса'");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДатаВремяРейсаФактС) Тогда
			Объект.ДатаВремяРейсаФактС = ТекущаяДата();
			ТекстОповещения = ?(ТекстОповещения<>"",",",НСтр("ru='Заполнено'"))
				+ НСтр("ru=' фактическое время начала рейса'");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ДатаВремяРейсаФактПо) Тогда
			Объект.ДатаВремяРейсаФактПо = ТекущаяДата();
			ТекстОповещения = ?(ТекстОповещения<>"",НСтр("ru=' и'"),НСтр("ru='Заполнено'"))
				+ НСтр("ru=' фактическое время окончания рейса'");
		КонецЕсли;
		
	КонецЕсли;

	УстановитьОтметкуНезаполненного();
	
	Возврат ТекстОповещения;
	
КонецФункции

