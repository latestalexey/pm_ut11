&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Распоряжение) Тогда
		ЗаполнитьСписокСкладов();
	КонецЕсли;
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение",Объект.Склад, Объект.Помещение));
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПриходныйОрдерНаТовары));
		
		АдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение);
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.Товары,
			Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
			)
		);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		
		Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	КонецЕсли;
	
	Элементы.ТоварыПроверитьКоличество.Доступность = (Объект.Статус = Перечисления.СтатусыПриходныхОрдеров.КПоступлению);
	
	Элементы.ЗаполнитьПоРаспоряжению.Видимость = ЗначениеЗаполнено(Объект.Распоряжение);
	
	Элементы.ТоварыЗаполнитьСерииПоОтгрузке.Видимость = (Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению);
	
	ЕстьПравоРедактирования = Ложь;
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокУпаковок.Отбор, "Владелец", Справочники.Номенклатура.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно,,Истина);	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокШтрихКодов.Отбор, "Номенклатура",Справочники.Номенклатура.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно,,Истина);   	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокШтрихКодов.Отбор, "Характеристика",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(), ВидСравненияКомпоновкиДанных.Равно,,Истина); 
		
	НаборУпаковокИндивидуальный = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
	
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	ЕдиницаИзмеренияОбъема = Константы.ЕдиницаИзмеренияОбъема.Получить();
	ЕдиницаИзмеренияЛинейныхРазмеров = Константы.ЕдиницаИзмеренияЛинейныхРазмеров.Получить();
	
	Элементы.СписокУпаковокОбъем.Заголовок = "Объем, (" + Строка(ЕдиницаИзмеренияОбъема) + ")";
	Элементы.СписокУпаковокВес.Заголовок = "Вес, (" + Строка(ЕдиницаИзмеренияВеса) + ")";
	Элементы.СписокУпаковокГлубина.Заголовок = "Глубина, (" + Строка(ЕдиницаИзмеренияЛинейныхРазмеров) + ")";
	Элементы.СписокУпаковокВысота.Заголовок = "Высота, (" + Строка(ЕдиницаИзмеренияЛинейныхРазмеров) + ")";
	Элементы.СписокУпаковокШирина.Заголовок = "Ширина, (" + Строка(ЕдиницаИзмеренияЛинейныхРазмеров) + ")";
	
	НастроитьОтображениеПанелиДополнительнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)                                                                                                                     
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если ЗначениеЗаполнено(Объект.Распоряжение) Тогда
		ЗаполнитьСписокСкладов();
	КонецЕсли;
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение",Объект.Склад, Объект.Помещение));
	Элементы.ТоварыПроверитьКоличество.Доступность = (Объект.Статус = Перечисления.СтатусыПриходныхОрдеров.КПоступлению);
	АдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПриходныйОрдерНаТовары));
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НастроитьОтображениеПанелиДополнительнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
		
	//Изменение номенклатуры	
	Если Врег(ИмяСобытия) = Врег("Запись_Номенклатура") Тогда
		Элементы.Товары.ТекущиеДанные.Номенклатура = Источник;
		ПриИзмененииНоменклатуры(Источник,Неопределено,Неопределено);		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПроверкаКоличестваТоваровВДокументе.Форма.Форма" Тогда
		
		ОбработкаВыбораПроверкаКоличестваТоваровНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Элементы.Распоряжение.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Распоряжение);
	Оповестить("Запись_ПриходныйОрдерНаТовары",ПараметрыЗаписи,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

 &НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(ЭтаФорма, "Товары", "Номенклатура,Характеристика,Количество");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	СкладПомещениеПриИзмененииСервер();
	
	Если ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры
		И Объект.СкладскаяОперация = ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ПриемкаПоПеремещению") Тогда
		
		ТекстВопроса = НСтр("ru = 'Заполнить серии товаров по сериям, указанным при отгрузке?'");
		
		Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьСерииПоОтгрузкеСервер();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПомещениеПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	СтатусПриИзмененииСервер();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	Перем ТекущаяСтрока;
	Перем СтруктураДействий;

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.ТоварыСтатусУказанияСерий Тогда
		Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
			ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
			
			ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтаФорма);
			
			Если ЗначениеВозврата <> Неопределено Тогда
				ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ИзменитьКачествоНоменклатуры(Команда)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ОчиститьСообщения();
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Выберите строку табличной части'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущаяСтрока.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий);
	
	ИзменениеКачества = СкладыКлиент.ИзменитьКачество(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ИзменениеКачества Тогда
		Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
			Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
			
			ТекущаяСтрокаИдентификатор = ТекущаяСтрока.ПолучитьИдентификатор();
			
			ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
			НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элементы.Товары,КэшированныеЗначения,
			ПараметрыУказанияСерий);
			
			НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элементы.Товары,КэшированныеЗначения,ПараметрыУказанияСерий);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТолькоНоменклатуру(Команда)

	Автотест_ЗаполнитьПоРаспоряжению("Номенклатура");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуруИКоличество(Команда)

	Автотест_ЗаполнитьПоРаспоряжению("НоменклатураКоличество");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТолькоКоличество(Команда)

	Автотест_ЗаполнитьПоРаспоряжению("Количество");

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличество(Команда)
	
	ПараметрыОткрытия = Новый Структура("АдресВоВременномХранилище, ПревышениеКоличестваТоваровРазрешено", АдресТЧТоварыВоВременномХранилищеДляПроверкиКоличества(), Истина);
	ВозвращаемыеПараметры = ОткрытьФормуМодально("ОбщаяФорма.ПроверкаЗаполненияДокументов", ПараметрыОткрытия);
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, ?(КэшированныеЗначения = Неопределено, ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения(), КэшированныеЗначения));
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы);
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);		
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	Перем ТекущаяСтрока;
	
	ВесНоменклатуры = МенеджерОборудованияКлиент.ПолучитьДанныеИзВесов(ЭтаФорма, ТекущаяСтрока);
	
	Если ВесНоменклатуры <> Неопределено Тогда
		
		ТекущаяСтрока.КоличествоУпаковок = ВесНоменклатуры;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);				
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтаФорма);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииПоОтгрузке(Команда)
	ОчиститьСообщения();
	ЗаполнитьСерииПоОтгрузкеСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)

	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		"Номенклатура,Характеристика,Количество");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура СкладПомещениеПриИзмененииСервер()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение",Объект.Склад, Объект.Помещение));
	
	АдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение);
	
	Если АдресноеХранение Тогда
		Объект.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Объект.Склад, Объект.Помещение);
	КонецЕсли;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПриходныйОрдерНаТовары));
 	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииСервер()
	Элементы.ТоварыПроверитьКоличество.Доступность = (Объект.Статус = Перечисления.СтатусыПриходныхОрдеров.КПоступлению);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПриходныйОрдерНаТовары));
 	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подборы и обработка проверки количества

&НаСервере
Процедура ОбработкаВыбораПроверкаКоличестваТоваровНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Объект.Товары.Загрузить(ТаблицаТоваров);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Функция АдресТЧТоварыВоВременномХранилищеДляПроверкиКоличества()
	
	ТабличнаяЧастьТовары = Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок");
	ТабличнаяЧастьТовары.Свернуть("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка", "КоличествоУпаковок");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличнаяЧастьТовары, УникальныйИдентификатор);
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, КэшированныеЗначения)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(ВозвращаемыеПараметры.Товары);
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаИсточник Из ТаблицаТовары Цикл
		
		Отбор = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			Если СтрокаИсточник.КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаИсточник.КоличествоУпаковок >= 0 Тогда
				
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + СтрокаИсточник.КоличествоУпаковок;
				СтрокаИсточник.КоличествоУпаковок = 0;
				
			Иначе
				
				КоличествоКСписанию = -СтрокаИсточник.КоличествоУпаковок;
				КоличествоВСтроке   = СтрокаТЧ.КоличествоУпаковок;
				
				Если КоличествоКСписанию > КоличествоВСтроке Тогда
					СтрокаИсточник.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
					СтрокаТЧ.КоличествоУпаковок       = 0;
				Иначе
					СтрокаИсточник.КоличествоУпаковок = 0;
					СтрокаТЧ.КоличествоУпаковок       = КоличествоВСтроке - КоличествоКСписанию;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаТЧ);
			Иначе
				
				СтруктураДействий = Новый Структура;
				ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);				
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаИсточник);
			
			СтруктураДействий = Новый Структура;
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);				
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого СтрокаТЧ Из УдаляемыеСтроки Цикл
		Объект.Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками);

	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ТолькоТовары                           = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если СтруктураДействий.МассивСтрокССериями.Количество() = 1
		И НоменклатураКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьФормуУказанияСерий",0.1,Истина);
		
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьШтрихкоды()

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураДействий,КэшированныеЗначения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий, СтруктураДействий);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСерииПоОтгрузкеСервер()
	Документы.ПриходныйОрдерНаТовары.ЗаполнитьСерииПоОтгрузкеПриПеремещении(Объект,Истина);	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУказанияСерий()
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	
	ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтаФорма);
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ЗаполнитьНаСервере(ВидЗаполнения,ДатаПоступления)
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекОбъект.ЗаполнитьТоварыПоТоварамКПоступлению(ВидЗаполнения,ДатаПоступления);
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСкладов()
	
	СписокСкладов = Новый СписокЗначений;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Объект.Распоряжение) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
	 Или ТипЗнч(Объект.Распоряжение) = Тип("ДокументСсылка.ЗаказПоставщику")
	 Или ТипЗнч(Объект.Распоряжение) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
	 
		МассивСкладов = Документы.ПриходныйОрдерНаТовары.ОрдерныеСкладыПриПоступлении(Объект.Распоряжение, Объект.Склад);
		Для Каждого Элемент Из МассивСкладов Цикл
			СписокСкладов.Добавить(Элемент);
		КонецЦикла;
		
	Иначе
		
		Если ТипЗнч(Объект.Распоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение")
			Или ТипЗнч(Объект.Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			ИмяРеквизитаСклад = "СкладПолучатель";
		Иначе
			ИмяРеквизитаСклад = "Склад";
		КонецЕсли;
		СтруктураРеквизитов = Новый Структура("Склад", ИмяРеквизитаСклад);
		ЗначениеРеквизитов  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Распоряжение, СтруктураРеквизитов);
		СписокСкладов.Добавить(ЗначениеРеквизитов.Склад);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Элементы.Склад.РежимВыбораИзСписка = Истина;
	Элементы.Склад.СписокВыбора.ЗагрузитьЗначения(СписокСкладов.ВыгрузитьЗначения());
	
КонецПроцедуры

//Процедура вызывается в автотесте примемке по распоряжениям на орденом складе
//
//	 Параметры:
//		ВидЗаполения - Строка - вариант заполенения - Номенклатура, НоменклатураКоличество, Количество
//
&НаКлиенте
Процедура Автотест_ЗаполнитьПоРаспоряжению(ВидЗаполнения) Экспорт
    ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Распоряжение)Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указано распоряжение.'"), ЭтаФорма);
		Возврат;
	КонецЕсли;
    
	Если ВидЗаполнения = "Количество" Тогда
		
		ЕстьЗаполненноеКоличество = Ложь;
		
		Для Каждого СтрТабл из Объект.Товары Цикл
			Если СтрТабл.КоличествоУпаковок <> 0 Тогда
				ЕстьЗаполненноеКоличество = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьЗаполненноеКоличество Тогда
			Ответ = Вопрос(НСтр("ru = 'В некоторых строках количество уже заполнено и будет перезаполнено остатками по распоряжению. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе	
		Если Объект.Товары.Количество() > 0 Тогда
			
			Ответ = Вопрос(НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'"), РежимДиалогаВопрос.ДаНет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормыВыбораДаты = Новый Структура;
	ПараметрыФормыВыбораДаты.Вставить("Распоряжение", Объект.Распоряжение);
	ПараметрыФормыВыбораДаты.Вставить("Склад", Объект.Склад);
	ПараметрыФормыВыбораДаты.Вставить("ТекущийДокумент", Объект.Ссылка);
	
	ДатаПоступления = ОткрытьФормуМодально("Документ.ПриходныйОрдерНаТовары.Форма.ФормаВыбораДатыПоступления", ПараметрыФормыВыбораДаты);
	
	Если ЗначениеЗаполнено(ДатаПоступления) Тогда
		ЗаполнитьНаСервере(ВидЗаполнения,ДатаПоступления);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
КонецФункции
 
&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	Если Не СкрытьДополнительнуюИнформацию Тогда
		ПодключитьОбработчикОжидания("ТоварыПриАктивизацииСтрокиНаКлиенте", 0.2, Истина); 			
	КонецЕсли;
КонецПроцедуры
 
&НаКлиенте
Процедура СписокУпаковокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПеренестиУпаковку(ВыбраннаяСтрока,Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор(),КэшированныеЗначения);	
КонецПроцедуры
 
&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	Если Не СкрытьДополнительнуюИнформацию Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокШтрихКодов.Отбор,
		"Характеристика",
		Элементы.Товары.ТекущиеДанные.Характеристика,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьУпаковку(Команда)
	Если Элементы.СписокУпаковок.ТекущиеДанные <> Неопределено Тогда
		ПеренестиУпаковку(Элементы.СписокУпаковок.ТекущиеДанные.Ссылка,Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор(),КэшированныеЗначения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		Если Не Элементы.Товары.ТекущиеДанные.Номенклатура.Пустая() Тогда	
			ОткрытьЗначение(Элементы.Товары.ТекущиеДанные.Номенклатура);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяПанель(Команда)
	СкрытьДополнительнуюИнформацию = Не СкрытьДополнительнуюИнформацию;
	НастроитьОтображениеПанелиДополнительнойИнформации();
КонецПроцедуры
 
&НаКлиенте
Процедура Печать(Команда)
	
	СтруктураПараметры = СформироватьПараметрыДляПечати(Элементы.Товары.ВыделенныеСтроки);
	
	ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма.ФормаТовары",
	СтруктураПараметры,            // Параметры
	,                              // Владелец
	Новый УникальныйИдентификатор  // Уникальность
	);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		"Номенклатура,Характеристика",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийИзмененныеСтроки);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Дополнительная панель информации


&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)

	УстановитьПривилегированныйРежим(Истина);

	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;

КонецФункции

&НаСервере
Процедура ПеренестиУпаковку(Упаковка, Идентификатор, КэшированныеЗначения)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
	ТекущаяСтрока.Упаковка = Упаковка;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
		
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаблокироватьДанныеФормыДляРедактирования();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтрокиНаКлиенте()
	Если Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		ТоварыПриАктивизацииСтрокиНаСервере(Элементы.Товары.ТекущиеДанные.Номенклатура,
											Элементы.Товары.ТекущиеДанные.Характеристика,
											Элементы.Товары.ТекущиеДанные.Упаковка);
	Иначе
		ТоварыПриАктивизацииСтрокиНаСервере(ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"),
											ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"),
											ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка"));
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ТоварыПриАктивизацииСтрокиНаСервере(Номенклатура,Характеристика,Упаковка)
	ПриИзмененииНоменклатуры(Номенклатура,Характеристика,Упаковка);
	Элементы.СписокУпаковок.ТекущаяСтрока = Упаковка;
КонецПроцедуры	

&НаСервере
Процедура ПриИзмененииНоменклатуры(Номенклатура,Характеристика,Упаковка)
	
	Если Номенклатура.Пустая() Тогда
		ШаблонЭтикеткиСтрока = "";
		ШаблонЦенникаСтрока = "";
		АдресКартинки = "";
		НаборУпаковокСтрока = "";
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокУпаковок.Отбор,
		"Владелец",
		Справочники.Номенклатура.ПустаяСсылка(),
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокШтрихКодов.Отбор,
		"Номенклатура",
		Справочники.Номенклатура.ПустаяСсылка(),
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);   	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокШтрихКодов.Отбор,
		"Характеристика",
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(),
		ВидСравненияКомпоновкиДанных.Равно,
		,Истина); 
		Возврат;
	КонецЕсли;	
	
	РеквизитыНоменклатуры = Новый Структура;
	РеквизитыНоменклатуры.Вставить("ШаблонЭтикеткиВида", "ВидНоменклатуры.ШаблонЭтикетки");
	РеквизитыНоменклатуры.Вставить("ШаблонЦенникаВида", "ВидНоменклатуры.ШаблонЦенника");
	РеквизитыНоменклатуры.Вставить("ШаблонЦенникаНоменклатуры", "ШаблонЦенника");
	РеквизитыНоменклатуры.Вставить("ШаблонЭтикеткиНоменклатуры", "ШаблонЭтикетки");
	РеквизитыНоменклатуры.Вставить("НаборУпаковок", "НаборУпаковок");
	РеквизитыНоменклатуры.Вставить("ФайлКартинки", "ФайлКартинки");
	РеквизитыНоменклатуры.Вставить("Вес", "Вес");
	РеквизитыНоменклатуры.Вставить("Объем", "Объем");
    РеквизитыНоменклатуры.Вставить("СкладскаяГруппа", "СкладскаяГруппа");
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура,РеквизитыНоменклатуры);
	
	//Обновить ВесНоменклатуры
	Если РеквизитыНоменклатуры.СкладскаяГруппа.Пустая() Тогда
		Надпись = НСтр("ru = '<%Пусто%>'");	
		Надпись = СтрЗаменить(Надпись, "%Пусто%",  НСтр("ru = 'Не указан'"));
		СкладскаяГруппаБулево = Ложь;
		СкладскаяГруппаСтрока = Надпись;
	Иначе
		СкладскаяГруппаБулево = Истина;
		СкладскаяГруппаСтрока = Строка(РеквизитыНоменклатуры.СкладскаяГруппа);
	КонецЕсли;
	
	//Обновить ВесНоменклатуры
	Если РеквизитыНоменклатуры.Вес = 0 Тогда
		Надпись = НСтр("ru = '<%Пусто%>'");	
		Надпись = СтрЗаменить(Надпись, "%Пусто%",  НСтр("ru = 'Не указан'"));
		ВесБулево = Ложь;
		ВесНоменклатуры = Надпись;
		Элементы.ЕдиницаИзмеренияВеса.Видимость = Ложь;
	Иначе
		ВесБулево = Истина;
		ВесНоменклатуры = Строка(РеквизитыНоменклатуры.Вес);
		Элементы.ЕдиницаИзмеренияВеса.Видимость = Истина;
	КонецЕсли;
	
	//Обновить ОбъемНоменклатуры
	Если РеквизитыНоменклатуры.Объем = 0 Тогда
		Надпись = НСтр("ru = '<%Пусто%>'");	
		Надпись = СтрЗаменить(Надпись, "%Пусто%",  НСтр("ru = 'Не указан'"));
		ОбъемБулево = Ложь;
		ОбъемНоменклатуры = Надпись;
		
		Элементы.ЕдиницаИзмеренияОбъема.Видимость = Ложь;
	Иначе
		ОбъемБулево = Истина;
		ОбъемНоменклатуры = Строка(РеквизитыНоменклатуры.Объем);
		Элементы.ЕдиницаИзмеренияОбъема.Видимость = Истина;
	КонецЕсли;
	
	//Обновить ШаблонЭтикетки
	Если РеквизитыНоменклатуры.ШаблонЭтикеткиНоменклатуры.Пустая() Тогда
		Если РеквизитыНоменклатуры.ШаблонЭтикеткиВида.Пустая() Тогда			
			Надпись = НСтр("ru = '<%Пусто%>'");	
			Надпись = СтрЗаменить(Надпись, "%Пусто%",  НСтр("ru = 'Не указан'"));
			ШаблонЭтикетки = Ложь;
			ШаблонЭтикеткиСтрока = Надпись; 	
		Иначе
			ШаблонЭтикетки = Истина;
			ШаблонЭтикеткиСтрока = Строка(РеквизитыНоменклатуры.ШаблонЭтикеткиВида); 
		КонецЕсли;	
	Иначе
		ШаблонЭтикетки = Истина;
		ШаблонЭтикеткиСтрока = Строка(РеквизитыНоменклатуры.ШаблонЭтикеткиНоменклатуры);
	КонецЕсли;
	
	//Обновить ШаблонЦенника
	Если РеквизитыНоменклатуры.ШаблонЦенникаНоменклатуры.Пустая() Тогда
		Если РеквизитыНоменклатуры.ШаблонЦенникаВида.Пустая() Тогда		
			Надпись = НСтр("ru = '<%Пусто%>'");	
			Надпись = СтрЗаменить(Надпись, "%Пусто%",  НСтр("ru = 'Не указан'"));
			ШаблонЦенникаСтрока = Надпись;
			ШаблонЦенника = Ложь;
		Иначе
			ШаблонЦенника = Истина;
			ШаблонЦенникаСтрока = Строка(РеквизитыНоменклатуры.ШаблонЦенникаВида); 
		КонецЕсли;	
	Иначе;
		ШаблонЦенника = Истина;
		ШаблонЦенникаСтрока = Строка(РеквизитыНоменклатуры.ШаблонЦенникаНоменклатуры);
	КонецЕсли;
	
	//Обновить НаборУпаковок
	Если РеквизитыНоменклатуры.НаборУпаковок.Пустая() Тогда
		Надпись = НСтр("ru = '<%Пусто%>'");	
		Надпись = СтрЗаменить(Надпись, "%Пусто%",  НСтр("ru = 'Упаковки не используются'"));
		НаборУпаковокСтрока = Надпись;
		НаборУпаковок = Ложь;
	Иначе
		НаборУпаковок = Истина;
		НаборУпаковокСтрока = Строка(РеквизитыНоменклатуры.НаборУпаковок);
	КонецЕсли;
	
	
	//Обновить Картинку
	Если Не РеквизитыНоменклатуры.ФайлКартинки.Пустая() Тогда
			АдресКартинки = НавигационнаяСсылкаКартинки(РеквизитыНоменклатуры.ФайлКартинки, УникальныйИдентификатор)
		Иначе
			АдресКартинки = "";
	Конецесли;
	
	//Установить отборы в списках		
	Если  РеквизитыНоменклатуры.НаборУпаковок = НаборУпаковокИндивидуальный Тогда
		Если СписокУпаковок.Отбор.Элементы[0].ПравоеЗначение <> Номенклатура Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокУпаковок.Отбор, "Владелец", Номенклатура,
			ВидСравненияКомпоновкиДанных.Равно,,Истина);  
		КонецЕсли;	
	Иначе
		Если СписокУпаковок.Отбор.Элементы[0].ПравоеЗначение <> РеквизитыНоменклатуры.НаборУпаковок Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокУпаковок.Отбор, "Владелец", РеквизитыНоменклатуры.НаборУпаковок,
			ВидСравненияКомпоновкиДанных.Равно,,Истина);   
		КонецЕсли;
	КонецЕсли;
	
	Если СписокШтрихКодов.Отбор.Элементы[0].ПравоеЗначение <> Номенклатура Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокШтрихКодов.Отбор, "Номенклатура",Номенклатура,
		ВидСравненияКомпоновкиДанных.Равно,,Истина);   
	КонецЕсли;
	
	Если СписокШтрихКодов.Отбор.Элементы[1].ПравоеЗначение <> Характеристика Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокШтрихКодов.Отбор, "Характеристика",Характеристика,
		ВидСравненияКомпоновкиДанных.Равно,,Истина);   
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция  СформироватьПараметрыДляПечати(Знач ВыделенныеСтроки)
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	Товары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));

	Порядок = 1;
	Для Каждого Идентификатор Из ВыделенныеСтроки Цикл
		Строка = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
		
		НоваяСтрока = Товары.Добавить();	
		НоваяСтрока.Номенклатура = Строка.Номенклатура;
		НоваяСтрока.Характеристика = Строка.Характеристика;
		НоваяСтрока.Упаковка = Строка.Упаковка;
		НоваяСтрока.Порядок = Порядок;
		НоваяСтрока.Количество = Строка.Количество;
		Порядок = Порядок + 1;
		
	КонецЦикла;
		
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Распоряжение,"Организация"));
	СтруктураДействий.Вставить("ЗаполнитьСклад",  Объект.Склад);
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",    ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад,"РозничныйВидЦены"));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	
	// Подготовка данных для заполенения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", Товары);
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	АдресВХранилище =  ПоместитьВоВременноеХранилище(СтруктураРезультат);
		
	СтруктураПараметры = Новый Структура("АдресВХранилище,НазначениеШаблона");
	СтруктураПараметры.АдресВХранилище   = АдресВХранилище;
	
	 Возврат СтруктураПараметры 
КонецФункции

&НаКлиенте
Процедура СоздатьШтрихКод(Команда)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ЗначенияЗаполнения = Новый Структура();

	ЗначенияЗаполнения.Вставить("Номенклатура",Элементы.Товары.ТекущиеДанные.Номенклатура);
	Если Элементы.СписокУпаковок.ТекущиеДанные<>Неопределено Тогда
		ЗначенияЗаполнения.Вставить("Упаковка",Элементы.СписокУпаковок.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("Характеристика",Элементы.Товары.ТекущиеДанные.Характеристика);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ШтрихКод = ОткрытьФормуМодально("РегистрСведений.ШтрихкодыНоменклатуры.ФормаЗаписи",ПараметрыФормы,ЭтаФорма);
	
	Если ШтрихКод<>Неопределено Тогда
		Элементы.СписокШтрихКодов.ДобавитьСтроку();
		ТекущиеДанные = Элементы.СписокШтрихКодов.ТекущиеДанные;
		ТекущиеДанные.ШтрихКод = ШтрихКод;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУпаковокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если НаборУпаковок = Ложь Тогда
		Отказ = Истина;
		Текст = "ru = 'Добавить упаковку невозможно, т.к. для номенклатуры не включено использование упаковок.
				|Откройте карточку номенклатуры и включите использование упаковок.'";
		Предупреждение(НСтр(Текст), 10);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеПанелиДополнительнойИнформации()
	
	Элементы.ДопРабочееМесто.Видимость = Не СкрытьДополнительнуюИнформацию;
	
	ИнформационнаяНадпись = НСтр("ru = '%СкрытьОтобразить% панель дополнительной информации'");	
	
	Если СкрытьДополнительнуюИнформацию Тогда
		ТекстПоказатьСкрыть = НСтр("ru = 'Показать'");
	Иначе
		ТекстПоказатьСкрыть = НСтр("ru = 'Скрыть'");
	КонецЕсли;
	
	ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%СкрытьОтобразить%", ТекстПоказатьСкрыть);
	
	Элементы.ДополнительнаяПанель.Заголовок = ИнформационнаяНадпись;
	
КонецПроцедуры

