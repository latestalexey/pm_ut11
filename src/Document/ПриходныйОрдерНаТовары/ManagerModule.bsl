#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Склад,Помещение,Статус,СкладскаяОперация";
	
	Возврат ИменаРеквизитов;
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в документе
//Параметры
//			Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
//Возвращаемое значение
//			Тип Структура
//				Состав полей задается в фукнции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий
Функция ПараметрыУказанияСерий(Объект)Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры = 
		ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад",Новый Структура("Склад",Объект.Склад));
		
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Объект.СкладскаяОперация);
	
	Если СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение) Тогда
		ПараметрыУказанияСерий.ПоляСвязи.Добавить("Упаковка");
	КонецЕсли;
	
	ПараметрыУказанияСерий.ЭтоОрдер = Истина;
	ПараметрыУказанияСерий.ИмяПоляПомещение = "Помещение";
	
	Если Объект.Статус = Перечисления.СтатусыПриходныхОрдеров.КПоступлению Тогда
		ПараметрыУказанияСерий.ПодготовкаОрдера = Истина;
	КонецЕсли;
	
	Возврат ПараметрыУказанияСерий;
КонецФункции

// Возвращает складскую операцию по типу распоряжения
// Если распоряжение не указано, то по умолчанию считается, что операция - "Приемка от поставщика"
// Параметры:
//		 Распоряжение - ссылка на документ-распоряжение на поступление товаров
// Возвращаемое значение
//		Тип - ПеречислениеСсылка.СкладскиеОперации
Функция СкладскаяОперацияПоРаспоряжению(Распоряжение) Экспорт
	
	ТипРаспоряжения = ТипЗнч(Распоряжение);
		
	Если ТипРаспоряжения = Тип("ДокументСсылка.ЗаказПоставщику")
		Или ТипРаспоряжения = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		Или ТипРаспоряжения = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда 
		
		Возврат Перечисления.СкладскиеОперации.ПриемкаОтПоставщика;
		
	ИначеЕсли ТипРаспоряжения = Тип("ДокументСсылка.ЗаказНаСборку")
		Или ТипРаспоряжения = Тип("ДокументСсылка.СборкаТоваров") Тогда
		
		ТипОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение,"ТипОперации");
		
		Если ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
			Возврат Перечисления.СкладскиеОперации.ПриемкаСобранныхКомплектов;
		Иначе
			Возврат Перечисления.СкладскиеОперации.ПриемкаКомплектующихПослеРазборки;
		КонецЕсли;
		
	ИначеЕсли ТипРаспоряжения = Тип("ДокументСсылка.ЗаказНаПеремещение")
		Или ТипРаспоряжения = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		
		Возврат Перечисления.СкладскиеОперации.ПриемкаПоПеремещению;
		
	ИначеЕсли ТипРаспоряжения = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
		Или ТипРаспоряжения = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		Возврат Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента;
		
	ИначеЕсли ТипРаспоряжения = Тип("ДокументСсылка.ПрочееОприходованиеТоваров")Тогда
		
		Возврат Перечисления.СкладскиеОперации.ПриемкаПоПрочемуОприходованию;
		
	Иначе // в т.ч. когда распоряжение не заполнено
		
		Возврат Перечисления.СкладскиеОперации.ПриемкаОтПоставщика;
		
	КонецЕсли;
	
КонецФункции

//Процедура заполняет серии товаров по расходным ордерам, выписанным на основе этого документа
//	Объект - ДокументОбъект или ДанныеФормыСтуктура - заполняемый документ
Процедура ЗаполнитьСерииПоОтгрузкеПриПеремещении(Объект, ВыдаватьОшибки) Экспорт
	
	Если Не (Объект.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаПоПеремещению 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад",Новый Структура("Склад",Объект.Склад))) Тогда
		Возврат;	
	КонецЕсли;
	
	Если СкладыСервер.ИспользоватьСкладскиеПомещения(Объект.Склад)
		И Не ЗначениеЗаполнено(Объект.Помещение) Тогда
		Если ВыдаватьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Помещение""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Помещение","Объект");
		КонецЕсли;
		Возврат;
	КонецЕсли;
		
	СкладОтправитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Распоряжение,"СкладОтправитель");
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад",Новый Структура("Склад",СкладОтправитель)) Тогда
		Если ВыдаватьОшибки Тогда
			ТекстСообщения = НСтр("ru = 'На складе-отправителе не ведется учет по сериям'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		Возврат;	
	КонецЕсли;
	
	Если ТипЗнч(Объект.Распоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		ТекстЗапросаПоРаспоряжениям =
		" В (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПеремещениеТоваров.Ссылка КАК Распоряжение 
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.Товары.ЗаказНаПеремещение = &Распоряжение)";
	Иначе
		ТекстЗапросаПоРаспоряжениям =
		" = &Распоряжение ";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке", Новый Структура("Склад",СкладОтправитель)) Тогда
		
		Если СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение)
			И Не СкладыСервер.ИспользоватьАдресноеХранение(СкладОтправитель, Справочники.СкладскиеПомещения.ПустаяСсылка())
			И Не СкладыСервер.ИспользоватьСкладскиеПомещения(СкладОтправитель) Тогда
			//	
			Если ВыдаватьОшибки Тогда
				ТекстСообщения = НСтр("ru = 'На складе ""%Склад%"" ведется учет остатков в разрезе складских ячеек, поэтому серии нужно указывать в разрезе упаковок.
				|На складе-отправителе учет в разрезе складских ячеек не ведется, поэтому серии учитываются без разреза упаковок. Заполнить серии по данным отгрузки нельзя.'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Склад%", СкладыСервер.ПолучитьПредставлениеСклада(Объект.Склад, Объект.Помещение)); 
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Возврат;	
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если СкладыСервер.ИспользоватьСкладскиеПомещения(СкладОтправитель)
			И СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение) Тогда
			
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РасходныйОрдерНаТовары.Ссылка
			|ИЗ
			|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
			|ГДЕ
			|	РасходныйОрдерНаТовары.Распоряжение " + ТекстЗапросаПоРаспоряжениям + "
			|	И РасходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отгружен)
			|	И РасходныйОрдерНаТовары.Проведен
			|	И НЕ (РасходныйОрдерНаТовары.Помещение.ИспользоватьАдресноеХранение)";
			
			Запрос.УстановитьПараметр("Распоряжение", Объект.Распоряжение);
			
			Если Не Запрос.Выполнить().Пустой() Тогда
				Если ВыдаватьОшибки Тогда
					ТекстСообщения = НСтр("ru = 'На складе ""%Склад%"" ведется учет остатков в разрезе складских ячеек, поэтому серии нужно указывать в разрезе упаковок.
					|На отгрузка производилась из помещений склада-отправителя, на которых учет в разрезе складския ячеек не ведется, поэтому серии учитываются без разреза упаковок. Заполнить серии по данным отгрузки нельзя.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Склад%", СкладыСервер.ПолучитьПредставлениеСклада(Объект.Склад, Объект.Помещение)); 
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				Возврат;	
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Упаковка,
		|	ВложенныйЗапрос.Серия,
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество,
		|	СУММА(ВложенныйЗапрос.КоличествоУпаковок) КАК КоличествоУпаковок
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасходныйОрдерНаТоварыСерии.Номенклатура КАК Номенклатура,
		|		РасходныйОрдерНаТоварыСерии.Характеристика КАК Характеристика,
		|		ВЫБОР
		|			КОГДА &ИспользоватьАдресноеХранение
		|				ТОГДА РасходныйОрдерНаТоварыСерии.Упаковка
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|		КОНЕЦ КАК Упаковка,
		|		РасходныйОрдерНаТоварыСерии.Серия КАК Серия,
		|		РасходныйОрдерНаТоварыСерии.Количество КАК Количество,
		|		ВЫБОР
		|			КОГДА &ИспользоватьАдресноеХранение
		|				ТОГДА РасходныйОрдерНаТоварыСерии.КоличествоУпаковок
		|			ИНАЧЕ РасходныйОрдерНаТоварыСерии.Количество
		|		КОНЕЦ КАК КоличествоУпаковок
		|	ИЗ
		|		Документ.РасходныйОрдерНаТовары.Серии КАК РасходныйОрдерНаТоварыСерии
		|	ГДЕ
		|		РасходныйОрдерНаТоварыСерии.Ссылка.Распоряжение " + ТекстЗапросаПоРаспоряжениям + "
		|		И РасходныйОрдерНаТоварыСерии.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отгружен)
		|		И РасходныйОрдерНаТоварыСерии.Ссылка.Проведен
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПриходныйОрдерНаТоварыСерии.Номенклатура,
		|		ПриходныйОрдерНаТоварыСерии.Характеристика,
		|		ВЫБОР
		|			КОГДА &ИспользоватьАдресноеХранение
		|				ТОГДА ПриходныйОрдерНаТоварыСерии.Упаковка
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|		КОНЕЦ,
		|		ПриходныйОрдерНаТоварыСерии.Серия,
		|		-ПриходныйОрдерНаТоварыСерии.Количество,
		|		-ВЫБОР
		|			КОГДА &ИспользоватьАдресноеХранение
		|				ТОГДА ПриходныйОрдерНаТоварыСерии.КоличествоУпаковок
		|			ИНАЧЕ ПриходныйОрдерНаТоварыСерии.Количество
		|		КОНЕЦ
		|	ИЗ
		|		Документ.ПриходныйОрдерНаТовары.Серии КАК ПриходныйОрдерНаТоварыСерии
		|	ГДЕ
		|		ПриходныйОрдерНаТоварыСерии.Ссылка.Распоряжение = &Распоряжение
		|		И ПриходныйОрдерНаТоварыСерии.Ссылка <> &ТекущийПриходныйОрдер
		|		И ПриходныйОрдерНаТоварыСерии.Ссылка.Проведен) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Серия,
		|	ВложенныйЗапрос.Номенклатура,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Упаковка
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВложенныйЗапрос.Количество) > 0";
		
		Запрос.УстановитьПараметр("Распоряжение",Объект.Распоряжение);
		Запрос.УстановитьПараметр("ТекущийПриходныйОрдер",Объект.Ссылка);
		Запрос.УстановитьПараметр("ИспользоватьАдресноеХранение",СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение));
		
		Объект.Серии.Загрузить(Запрос.Выполнить().Выгрузить());
		
	Иначе
		Если СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение) Тогда
			Если ВыдаватьОшибки Тогда
				ТекстСообщения = НСтр("ru = 'На складе ""%Склад%"" ведется учет остатков в разрезе складских ячеек, поэтому серии нужно указывать в разрезе упаковок.
				|На складе-отправителе учет в разрезе складских ячеек не ведется, поэтому серии учитываются без разреза упаковок. Заполнить серии по данным отгрузки нельзя.'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Склад%", СкладыСервер.ПолучитьПредставлениеСклада(Объект.Склад, Объект.Помещение)); 
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПеремещениеТоваровСерии.Серия,
		|	ПеремещениеТоваровСерии.Количество,
		|	ПеремещениеТоваровСерии.Номенклатура,
		|	ПеремещениеТоваровСерии.Характеристика
		|ИЗ
		|	Документ.ПеремещениеТоваров.Серии КАК ПеремещениеТоваровСерии
		|ГДЕ
		|	ПеремещениеТоваровСерии.Ссылка " + ТекстЗапросаПоРаспоряжениям;
		Запрос.УстановитьПараметр("Распоряжение",Объект.Распоряжение);
		Запрос.УстановитьПараметр("ИспользоватьАдресноеХранение",СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение));
		
		Объект.Серии.Загрузить(Запрос.Выполнить().Выгрузить());
	
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Дата КАК Период,
	|	ПриходныйОрдерНаТовары.Склад КАК Склад,
	|	ПриходныйОрдерНаТовары.Статус КАК Статус,
	|	ПриходныйОрдерНаТовары.Распоряжение КАК Распоряжение,
	|	ПриходныйОрдерНаТовары.СкладскаяОперация КАК СкладскаяОперация,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Склад.ИспользоватьСкладскиеПомещения
	|			ТОГДА ПриходныйОрдерНаТовары.Помещение.ИспользоватьАдресноеХранение
	|		ИНАЧЕ ПриходныйОрдерНаТовары.Склад.ИспользоватьАдресноеХранение
	|	КОНЕЦ КАК ИспользоватьАдресноеХранение,
	|	ПриходныйОрдерНаТовары.ЗонаПриемки КАК ЗонаПриемки,
	|	ПриходныйОрдерНаТовары.Помещение КАК Помещение
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка = &Ссылка
	|";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();

	ОрдерПоЗаказу = ТипЗнч(Реквизиты.Распоряжение) = Тип("ДокументСсылка.ЗаказПоставщику")
				Или ТипЗнч(Реквизиты.Распоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение")
				Или ТипЗнч(Реквизиты.Распоряжение) = Тип("ДокументСсылка.ЗаказНаСборку")
				Или ТипЗнч(Реквизиты.Распоряжение) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
				Или ТипЗнч(Реквизиты.Распоряжение) = Тип("СправочникСсылка.СоглашенияСПоставщиками");

	Запрос.УстановитьПараметр("Склад",                                      Реквизиты.Склад);
	Запрос.УстановитьПараметр("Статус",                                     Реквизиты.Статус);
	Запрос.УстановитьПараметр("Период",                                     Реквизиты.Период);
	Запрос.УстановитьПараметр("Распоряжение",                               Реквизиты.Распоряжение);
	Запрос.УстановитьПараметр("ОрдерПоЗаказу",                              ОрдерПоЗаказу);
	Запрос.УстановитьПараметр("ЗонаПриемки",                                Реквизиты.ЗонаПриемки);
	Запрос.УстановитьПараметр("Помещение",                                  Реквизиты.Помещение);
	Запрос.УстановитьПараметр("ИспользоватьАдресноеХранение",               Реквизиты.ИспользоватьАдресноеХранение);
	Запрос.УстановитьПараметр("СкладскаяОперация",                          Реквизиты.СкладскаяОперация);
	Запрос.УстановитьПараметр("ДокументПоступления",                        Реквизиты.Распоряжение);
	Запрос.УстановитьПараметр("ИспользоватьОбособленноеОбеспечениеЗаказов", ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов"));
	
	// Если в соглашении указаны особые правила учета товаров к поступлению.
	Если ЗначениеЗаполнено(Реквизиты.Распоряжение) И ТипЗнч(Реквизиты.Распоряжение) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
		Запрос.УстановитьПараметр("Распоряжение", Справочники.СоглашенияСПоставщиками.ПолучитьСоздатьДокументРегистрации(Реквизиты.Распоряжение));
		Запрос.УстановитьПараметр("РаспоряжениеСоглашение", Истина);
	Иначе
		Запрос.УстановитьПараметр("Распоряжение", Реквизиты.Распоряжение);
		Запрос.УстановитьПараметр("РаспоряжениеСоглашение", Ложь);
	КонецЕсли;

	Запрос.Текст ="
	// 0 ВтТаблицаТовары
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Количество,
	|	ТаблицаТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия
	|ПОМЕСТИТЬ ВтТаблицаТовары
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Количество <> 0
	|	И &Статус = Значение(Перечисление.СтатусыПриходныхОрдеров.Принят)
	|	И (НЕ ТаблицаТовары.СтатусУказанияСерий В (4, 6, 8, 10))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Количество,
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий),
	|	ТаблицаСерии.Серия
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Серии КАК ТаблицаСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТовары
	|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
	|			И ТаблицаСерии.Номенклатура = ТаблицаТовары.Номенклатура
	|			И ТаблицаСерии.Характеристика = ТаблицаТовары.Характеристика
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И &Статус = Значение(Перечисление.СтатусыПриходныхОрдеров.Принят)
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.Количество,
	|	ТаблицаСерии.НомерСтроки
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (4, 6, 8, 10)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 1 ВтТаблицаТоварыЯчейки
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Упаковка,
	|	ТаблицаТовары.КоличествоУпаковок,
	|	ТаблицаТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия
	|ПОМЕСТИТЬ ВтТаблицаТоварыЯчейки
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ИспользоватьАдресноеХранение 
	|	И &Статус = Значение(Перечисление.СтатусыПриходныхОрдеров.Принят)
	|	И ТаблицаТовары.Количество <> 0
	|	И (НЕ ТаблицаТовары.СтатусУказанияСерий В (4, 6, 8, 10))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаТовары.Упаковка,
	|	ТаблицаСерии.КоличествоУпаковок,
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий),
	|	ТаблицаСерии.Серия
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Серии КАК ТаблицаСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТовары
	|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
	|			И ТаблицаСерии.Номенклатура = ТаблицаТовары.Номенклатура
	|			И ТаблицаСерии.Характеристика = ТаблицаТовары.Характеристика
	|			И ТаблицаСерии.Упаковка = ТаблицаТовары.Упаковка
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И &ИспользоватьАдресноеХранение 
	|	И &Статус = Значение(Перечисление.СтатусыПриходныхОрдеров.Принят)
	|	И ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаТовары.Упаковка,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.КоличествоУпаковок,
	|	ТаблицаСерии.НомерСтроки
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (4, 6, 8, 10)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 2 ТаблицаТоварыКПоступлению
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	&ДокументПоступления                   КАК ДокументПоступления,
	|	0                                      КАК КПоступлению,
	|	ТаблицаТовары.Количество               КАК Принимается
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус = Значение(Перечисление.СтатусыПриходныхОрдеров.КПоступлению)
	|	И ТаблицаТовары.Количество <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	&ДокументПоступления                   КАК ДокументПоступления,
	|	ТаблицаТовары.Количество               КАК КПоступлению,
	|	0                                      КАК Принимается
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус = Значение(Перечисление.СтатусыПриходныхОрдеров.Принят)
	|	И ТаблицаТовары.Количество <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 3 ТаблицаТоварыНаСкладах
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	&Помещение                             КАК Помещение,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК ВНаличии,
	|	ТаблицаТовары.Серия                    КАК Серия
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 4 ТаблицаСвободныеОстатки
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК ВНаличии
	|ИЗ
	|	ВтТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	НЕ &ИспользоватьОбособленноеОбеспечениеЗаказов 
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 5 ТаблицаДвижениеТоваров
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки    КАК НомерСтроки,
	|	&Период                      КАК Период,
	|	&Склад                       КАК Склад,
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	&Распоряжение                КАК Распоряжение,
	|	-ТаблицаТовары.Количество    КАК ПланируемоеПоступление
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ОрдерПоЗаказу
	|	И &Статус = Значение(Перечисление.СтатусыПриходныхОрдеров.Принят)
	|	И ТаблицаТовары.Количество <> 0
	|	И НЕ &ИспользоватьОбособленноеОбеспечениеЗаказов
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 6 ТаблицаТоварыВСкладскихЯчейках
	|ВЫБРАТЬ
	|	&Период                          КАК Период,
	|	&ЗонаПриемки                     КАК Ячейка,
	|	ТаблицаТовары.Номенклатура       КАК Номенклатура,
	|	ТаблицаТовары.Характеристика     КАК Характеристика,
	|	ТаблицаТовары.Упаковка           КАК Упаковка,
	|	ТаблицаТовары.Серия              КАК Серия,
	|	ТаблицаТовары.КоличествоУпаковок КАК ВНаличии
	|ИЗ
	|	ВтТаблицаТоварыЯчейки КАК ТаблицаТовары
	|
	|;
	// 7 ТаблицаДвиженияСерийТоваров
	|ВЫБРАТЬ
	|	ТаблицаСерии.Номенклатура КАК Номенклатура,
	|	ТаблицаСерии.Характеристика КАК Характеристика,
	|	ТаблицаСерии.Серия КАК Серия,
	|	ТаблицаСерии.Количество               КАК Количество,
	|	&Склад КАК Склад,
	|	&Помещение КАК Помещение,
	|	&СкладскаяОперация КАК СкладскаяОперация,
	|	ВЫБОР
	|		КОГДА
	|			&РаспоряжениеСоглашение
	|		ТОГДА
	|			&Ссылка
	|		ИНАЧЕ
	|			&Распоряжение
	|	КОНЕЦ КАК Документ,
	|	&Период КАК Период,
	|	ТаблицаСерии.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Серии КАК ТаблицаСерии
	|
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;

	ТаблицыДляДвижений.Вставить("ТаблицаТоварыКПоступлению",      Результат[2].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаТоварыНаСкладах",         Результат[3].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаСвободныеОстатки",        Результат[4].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаДвижениеТоваров",         Результат[5].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаТоварыВСкладскихЯчейках", Результат[6].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаДвиженияСерийТоваров",    Результат[7].Выгрузить());

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриходныйОрдерНаТовары") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПриходныйОрдерНаТовары",
			"Приходный ордер на товары",
			ПечатьПриходногоОрдераНаТовары(МассивОбъектов, ОбъектыПечати)
		);
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "БланкПриемкиТоваров") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"БланкПриемкиТоваров",
			"Бланк приемки товаров",
			ПечатьБланкаПриемкиТоваров(МассивОбъектов, ОбъектыПечати)
		);
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "акОрдерНаТоварыСГрузовымиМестами") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"акОрдерНаТоварыСГрузовымиМестами",
			"Ордер На Товары С Грузовыми Местами",
			ПечатьПриходногоОрдераНаТоварыСГрузовымиМестами(МассивОбъектов[0])
		);
	КонецЕсли;

КонецПроцедуры


//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  27.11.2013
   
&НаСервере
функция ПечатьПриходногоОрдераНаТоварыСГрузовымиМестами(СсылкаНаДокумент) 
	
	//Если   ТИП(СсылкаНаДокумент) = ТИП(Документы.ПриходныйОрдерНаТовары) Тогда
		ДокументОбъект = СсылкаНаДокумент.получитьОбъект();
		ТабличнаяЧастьТовары = ДокументОбъект.Товары.выгрузить();	
		ТабличнаяЧастьГрузовыеМеста = ДокументОбъект.акГрузовыеМеста.выгрузить();	
		
		ТаблицаДляПечати = новый ТаблицаЗначений;
		ТаблицаДляПечати.Колонки.Добавить("Номенклатура");
		//ТаблицаДляПечати.колонки.добавить("ЕдиницаИзмерения");
		ТаблицаДляПечати.колонки.Добавить("КоличествоФакт");
		ТаблицаДляПечати.колонки.Добавить("ГрузовоеМесто");
		ТаблицаДляПечати.колонки.Добавить("КоличествоГрузовыхМестФакт");
		ТаблицаДляПечати.колонки.Добавить("КоличествоПринято");
		ТаблицаДляПечати.колонки.Добавить("Упаковка");

				
		Для каждого СтрокаТовары Из ТабличнаяЧастьТовары Цикл
			НоваяСтрока =	ТаблицаДляПечати.Добавить(); 
			НоваяСтрока.Номенклатура = СтрокаТовары.номенклатура;
			//НоваяСтрока.ЕдиницаИзмерения = СтрокаТовары.
			НоваяСтрока.КоличествоФакт = СтрокаТовары.Количество;
			НоваяСтрока.КоличествоГрузовыхМестФакт = СтрокаТовары.акКоличествоГрузовыхМестФакт;
			НоваяСтрока.Упаковка = СтрокаТовары.Упаковка;
			
			Отбор = новый структура("Номенклатура",СтрокаТовары.Номенклатура);
		Для каждого СтрокаОтбора из ТабличнаяЧастьГрузовыеМеста.найтиСтроки(Отбор) Цикл
		      НоваяСтрока =	ТаблицаДляПечати.Добавить(); 
              НоваяСтрока.номенклатура = СтрокаОтбора.НаименованиеГрузовогоМеста;
			  НоваяСтрока.КоличествоПринято = СтрокаОтбора.КоличествоПринято;
		КонецЦикла;
	КонецЦикла;

	
	Макет = СсылкаНаДокумент.получитьОбъект().ПолучитьМакет("акОрдерНаТоварыСГрузовымиМестами");

	//ОбластьШтрихкода = макет.ПолучитьОбласть("ОбластьШтрихкода");
	
	Заголовок = макет.ПолучитьОбласть("Заголовок");
	Поставщик = макет.ПолучитьОбласть("Поставщик");
	Шапка = макет.ПолучитьОбласть("Шапка");
	ШапкаТоваров = макет.ПолучитьОбласть("ШапкаТаблицы");
	
	СтрокаТаблицы = макет.ПолучитьОбласть("СтрокаТаблицы");
	СтрокаГрузовыхМест = макет.ПолучитьОбласть("СтрокаГрузовыхМест");
	
	ПодвалТаблицы = макет.ПолучитьОбласть("ПодвалТаблицы");
	Подписи = макет.ПолучитьОбласть("Подписи");
	
	
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
//	ТабличныйДокумент.Вывести(ОбластьШтрихкода);
	
	Заголовок.Параметры.ТекстЗаголовка = Строка(СсылкаНаДокумент);	
	ТабличныйДокумент.Вывести(Заголовок);
	
	Поставщик.Параметры.ПредставлениеПартнера = СсылкаНаДокумент.распоряжение.партнер;	
	ТабличныйДокумент.Вывести(Поставщик);
	
	Шапка.Параметры.ПредставлениеСклада = СсылкаНаДокумент.склад;
	Шапка.Параметры.ПредставлениеРаспоряжения = СсылкаНаДокумент.распоряжение;
	ТабличныйДокумент.Вывести(Шапка); 
	
	ШапкаТоваров.Параметры.ИмяКолонкиКодов = "Артикул";
	ТабличныйДокумент.Вывести(ШапкаТоваров);
	
	НомерСтроки = 0;
	Для каждого СтрокаТаблицыПечати ИЗ ТаблицаДляПечати Цикл
		 НомерСтроки = НомерСтроки+1;
		Если ТИП("СправочникСсылка.Номенклатура") = ТипЗнч(СтрокаТаблицыПечати.номенклатура) Тогда
		СтрокаТаблицы.Параметры.номерСтроки = НомерСтроки; 
		СтрокаТаблицы.Параметры.артикул = СтрокаТаблицыПечати.номенклатура.артикул;
		СтрокаТаблицы.Параметры.товар = СтрокаТаблицыПечати.номенклатура;
		СтрокаТаблицы.Параметры.Количество   =  СтрокаТаблицыПечати.КоличествоФакт;
	//	СтрокаТаблицы.Параметры.ПредставлениеБазовойЕдиницыИзмерения = нету в ТЧ
		 СтрокаТаблицы.Параметры.ИтогГрузовыхМест   =  СтрокаТаблицыПечати.КоличествоГрузовыхМестФакт;	
		 ТабличныйДокумент.Вывести(СтрокаТаблицы);
		Иначе
		СтрокаГрузовыхМест.Параметры.номерСтроки = номерСтроки;
		СтрокаГрузовыхМест.Параметры.грузовоеМесто = СтрокаТаблицыПечати.номенклатура;
		СтрокаГрузовыхМест.Параметры.КоличествоГрузовыхМест = СтрокаТаблицыПечати.количествоПринято;
        ТабличныйДокумент.Вывести(СтрокаГрузовыхМест);
        КонецЕсли;

	КонецЦикла;

	ТабличныйДокумент.Вывести(ПодвалТаблицы);
	
    Подписи.Параметры.итоговаяСтрока = "Количество товаров: " + Строка(СсылкаНаДокумент.товары.количество());
	Подписи.Параметры.ПредставлениеОтветственного =  Пользователи.ТекущийПользователь();
	ТабличныйДокумент.Вывести(Подписи);
	
	
	       
	 
	 
	 
	 
	 	Возврат ТабличныйДокумент;	
		
	
КонецФункции

//}
Функция ПечатьПриходногоОрдераНаТовары(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйОрдерНаТовары_ПриходныйОрдерНаТовары";
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс,Представление");
	СинонимДокумента = НСтр("ru='Приходный ордер на товары'");
	
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	ЗапросПоШапке = Новый Запрос;
	ЗапросПоШапке.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Склад) КАК ПредставлениеСклада,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Помещение) КАК ПредставлениеПомещения,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.ЗонаПриемки) КАК ПредставлениеЗоныПриемки,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Распоряжение.Партнер) КАК ПредставлениеПартнера,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Распоряжение) КАК РаспоряжениеПредставление,
	|	ПриходныйОрдерНаТовары.Распоряжение.Номер КАК РаспоряжениеНомер,
	|	ПриходныйОрдерНаТовары.Распоряжение.Дата КАК РаспоряжениеДата,
	|	ПриходныйОрдерНаТовары.Распоряжение.Организация.Префикс КАК РаспоряжениеПрефикс,
	|	ПриходныйОрдерНаТовары.Дата,
	|	ПриходныйОрдерНаТовары.Номер,
	|	ПриходныйОрдерНаТовары.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	ПриходныйОрдерНаТовары.Склад КАК Склад,
	|	ПриходныйОрдерНаТовары.Помещение КАК Помещение,
	|	ПриходныйОрдерНаТовары.Склад.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры,
	|	ПриходныйОрдерНаТовары.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ПриходныйОрдерНаТовары.НомерВходящегоДокумента КАК НомерВходящегоДокумента 
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриходныйОрдерНаТовары.Ссылка
	|ИТОГИ ПО
	|	ИспользоватьСерииНоменклатуры";
	
	ЗапросПоШапке.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ДеревоОбъектов = ЗапросПоШапке.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого ИспользованиеСерий Из ДеревоОбъектов.Строки Цикл
						
		Если ИспользованиеСерий.ИспользоватьСерииНоменклатуры Тогда
			
			ТекстЗапросаПоТоварам = 
			"ВЫБРАТЬ
			|	ПриходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка,
			|	" + ?(ВыводитьКоды, "ПриходныйОрдерНаТоварыТовары.Номенклатура." + КолонкаКодов +" КАК Артикул,", "") + "
			|	ПриходныйОрдерНаТоварыТовары.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
			|	ПриходныйОрдерНаТоварыТовары.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
			|	"""" КАК ПредставлениеСерии,
			|	ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ПриходныйОрдерНаТоварыТовары.Количество КАК Количество,
			|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
			|	ВЫБОР
			|		КОГДА ПриходныйОрдерНаТоварыТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Упаковка)
			|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения)
			|	КОНЕЦ КАК ПредставлениеЕдининицыИзмеренияУпаковки
			|ИЗ
			|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
			|
			|ГДЕ
			|	ПриходныйОрдерНаТоварыТовары.Ссылка В(&МассивОбъектов)
			|	И НЕ (ПриходныйОрдерНаТоварыТовары.СтатусУказанияСерий В (2, 4, 6, 8, 10))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ПриходныйОрдерНаТоварыСерии.Ссылка КАК Ссылка,
			|	" + ?(ВыводитьКоды, "ПриходныйОрдерНаТоварыСерии.Номенклатура." + КолонкаКодов +" КАК Артикул,", "") + "
			|	ПриходныйОрдерНаТоварыСерии.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
			|	ПриходныйОрдерНаТоварыСерии.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
			|	ПриходныйОрдерНаТоварыСерии.Серия.Наименование КАК ПредставлениеСерии,
			|	ПриходныйОрдерНаТоварыСерии.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ПриходныйОрдерНаТоварыСерии.Количество КАК Количество,
			|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыСерии.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
			|	ВЫБОР
			|		КОГДА ПриходныйОрдерНаТоварыСерии.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыСерии.Упаковка)
			|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыСерии.Номенклатура.ЕдиницаИзмерения)
			|	КОНЕЦ КАК ПредставлениеЕдининицыИзмеренияУпаковки
			|ИЗ
			|	Документ.ПриходныйОрдерНаТовары.Серии КАК ПриходныйОрдерНаТоварыСерии
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТовары
			|		ПО ПриходныйОрдерНаТоварыСерии.Ссылка = ТаблицаТовары.Ссылка
			|			И ПриходныйОрдерНаТоварыСерии.Номенклатура = ТаблицаТовары.Номенклатура
			|			И ПриходныйОрдерНаТоварыСерии.Характеристика = ТаблицаТовары.Характеристика
			|			И (ПриходныйОрдерНаТоварыСерии.Упаковка = ТаблицаТовары.Упаковка
			|				ИЛИ НЕ ВЫБОР КОГДА ПриходныйОрдерНаТоварыСерии.Ссылка.Склад.ИспользоватьСкладскиеПомещения ТОГДА
			|					ПриходныйОрдерНаТоварыСерии.Ссылка.Помещение.ИспользоватьАдресноеХранение
			|				ИНАЧЕ
			|					ПриходныйОрдерНаТоварыСерии.Ссылка.Склад.ИспользоватьАдресноеХранение
			|				КОНЕЦ)
			|	
			|ГДЕ
			|	ПриходныйОрдерНаТоварыСерии.Ссылка В(&МассивОбъектов)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПриходныйОрдерНаТоварыСерии.Ссылка,
			|	ПриходныйОрдерНаТоварыСерии.Номенклатура,
			|	ПриходныйОрдерНаТоварыСерии.Характеристика,
			|	ПриходныйОрдерНаТоварыСерии.Серия,
			|	ПриходныйОрдерНаТоварыСерии.Упаковка,
			|	ПриходныйОрдерНаТоварыСерии.КоличествоУпаковок,
			|	ПриходныйОрдерНаТоварыСерии.Количество,
			|	ПриходныйОрдерНаТоварыСерии.НомерСтроки
			|
			|ИМЕЮЩИЕ
			|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (2, 4, 6, 8, 10)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	ПредставлениеНоменклатуры,
			|	ПредставлениеХарактеристики,
			|	ПредставлениеСерии,
			|	ПредставлениеЕдининицыИзмеренияУпаковки
			|
			|ИТОГИ ПО
			|	Ссылка
			|";
			
		Иначе
			
			ТекстЗапросаПоТоварам = 
			"ВЫБРАТЬ
			|	ПриходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка,
			|	" + ?(ВыводитьКоды, "ПриходныйОрдерНаТоварыТовары.Номенклатура." + КолонкаКодов +" КАК Артикул,", "") + "
			|	ПриходныйОрдерНаТоварыТовары.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
			|	ПриходныйОрдерНаТоварыТовары.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
			|	""""	 КАК ПредставлениеСерии,
			|	ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ПриходныйОрдерНаТоварыТовары.Количество КАК Количество,
		//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  22.11.2013
			| ПриходныйОрдерНаТоварыТовары.акКоличествоГрузовыхМестФакт КАК грузовыеМеста,					
		//}
			|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
			|	ВЫБОР
			|		КОГДА ПриходныйОрдерНаТоварыТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Упаковка)
			|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения)
			|	КОНЕЦ КАК ПредставлениеЕдининицыИзмеренияУпаковки
			|ИЗ
			|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
			|
			|ГДЕ
			|	ПриходныйОрдерНаТоварыТовары.Ссылка В(&МассивОбъектов)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка,
			|	ПриходныйОрдерНаТоварыТовары.НомерСтроки
			|
			|ИТОГИ ПО
			|	Ссылка
			|";
			
		КонецЕсли;
		
		ЗапросПоТоварам = Новый Запрос;
		ЗапросПоТоварам.Текст = ТекстЗапросаПоТоварам;
		ЗапросПоТоварам.УстановитьПараметр("МассивОбъектов", ИспользованиеСерий.Строки.ВыгрузитьКолонку("Ссылка"));
		
		ВыборкаПоТабличнымЧастям = ЗапросПоТоварам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ПервыйДокумент = Истина;
		
		Для Каждого ВыборкаПоДокументам Из ИспользованиеСерий.Строки Цикл
			
			Если НЕ ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
				Продолжить;
			КонецЕсли;
			
			ИспользуетсяАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(ВыборкаПоДокументам.Склад, ВыборкаПоДокументам.Помещение);
			
			ВыводитьУпаковки = ИспользоватьУпаковкиНоменклатуры Или ИспользуетсяАдресноеХранение;
			
			//Макет получаем в цикле,т.к. ширина колонок зависит от склада и помещения в документе
			Макет = УправлениеПечатью.ПолучитьМакет("Документ.ПриходныйОрдерНаТовары.ПФ_MXL_ПриходныйОрдерНаТовары");
			
			ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
			ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
			ОбластьПоставщик	 	= Макет.ПолучитьОбласть("Поставщик");
			
			ОбластьШапкаТаблицыНачало 	= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
			ОбластьСтрокаТаблицыНачало 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
			ОбластьПодвалТаблицыНачало 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
			
			ОбластьШапкаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
			ОбластьСтрокаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
			ОбластьПодвалТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
			
			ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
			
			ОбластьШапкаТаблицыКолонкаУпаковок 		= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
			ОбластьСтрокаТаблицыКолонкаУпаковок 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаУпаковок");
			ОбластьПодвалТаблицыКолонкаУпаковок		= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаУпаковок");

			ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");
			
			ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
			
			Если НЕ ВыводитьКоды Тогда
				ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
			КонецЕсли;
			
			Если НЕ ВыводитьУпаковки Тогда
				ОбластьКолонкаТоваров.ШиринаКолонки = ОбластьКолонкаТоваров.ШиринаКолонки + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
				+ Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки; 		
			КонецЕсли;
			
			ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
			ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
			ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
			
			ОбластьШапкаТаблицыКонец 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
			ОбластьСтрокаТаблицыКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
			ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
			
			ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ВыборкаПоДокументам.Ссылка);
			
			ПервыйДокумент = Ложь;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
						
			Если ИспользуетсяАдресноеХранение Тогда
				
				ТекстЗоны = НСтр("ru='Зона приемки:'");
				ЗонаПредставление = ВыборкаПоДокументам.ПредставлениеЗоныПриемки;
				
			Иначе
				
				ТекстЗоны = "";
				ЗонаПредставление = "";
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
			
			ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
			
			ТабличныйДокумент.Вывести(ОбластьЗаголовок);
			
			Если ЗначениеЗаполнено(ВыборкаПоДокументам.ПредставлениеПартнера) Тогда
				//если не перемещение или оприходование
				ОбластьПоставщик.Параметры.Заполнить(ВыборкаПоДокументам);
				ТабличныйДокумент.Вывести(ОбластьПоставщик);
			КонецЕсли;
			
			ПараметрыШапки = Новый Структура;
			
			ПараметрыШапки.Вставить("ТекстЗоны", ТекстЗоны);
			ПараметрыШапки.Вставить("ПредставлениеЗоныПриемки", ЗонаПредставление);
			ПредставлениеВходящегоДокумента = ?(ПустаяСтрока(ВыборкаПоДокументам.НомерВходящегоДокумента),"","№ " + СокрЛП(ВыборкаПоДокументам.НомерВходящегоДокумента))
											+ ?(Не ЗначениеЗаполнено(ВыборкаПоДокументам.ДатаВходящегоДокумента),""," от " + Формат(ВыборкаПоДокументам.ДатаВходящегоДокумента,"ДЛФ=D"));
			ПараметрыШапки.Вставить("ПредставлениеВходящегоДокумента", ПредставлениеВходящегоДокумента);
			
			ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);
			
			Если Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеДата)
				Или Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеНомер) Тогда
				ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= ВыборкаПоДокументам.РаспоряжениеПредставление;
			Иначе
				РеквизитыДокумента.Дата          = ВыборкаПоДокументам.РаспоряжениеДата;
				РеквизитыДокумента.Номер         = ВыборкаПоДокументам.РаспоряжениеНомер;
				РеквизитыДокумента.Префикс       = ВыборкаПоДокументам.РаспоряжениеПрефикс;
				РеквизитыДокумента.Представление = ВыборкаПоДокументам.РаспоряжениеПредставление;
			
				ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
			
			Если ВыводитьУпаковки Тогда
				ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаУпаковок);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
			
			ВсегоНаименований = 0;
			
			Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
				
				ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ОбластьСтрокаТаблицыНачало.Параметры.НомерСтроки = ВсегоНаименований + 1;
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
				
				Если ВыводитьКоды Тогда
					ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
					ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
				КонецЕсли;
				
				ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					ВыборкаПоСтрокамТЧ.ПредставлениеНоменклатуры,
					ВыборкаПоСтрокамТЧ.ПредставлениеХарактеристики,
					, // Упаковка
					ВыборкаПоСтрокамТЧ.ПредставлениеСерии
				);
				
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
				
				Если ВыводитьУпаковки Тогда
					ОбластьСтрокаТаблицыКолонкаУпаковок.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
					ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаУпаковок);
				КонецЕсли;
				
				ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);	
				
				ВсегоНаименований = ВсегоНаименований + 1;
				
			КонецЦикла;
			
			ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
			Если ВыводитьУпаковки Тогда
				ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаУпаковок);
			КонецЕсли;
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
				
			ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%'");
			ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
			ОбластьПодписей.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
			
			ОбластьПодписей.Параметры.ПредставлениеОтветственного = ФизическиеЛица.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
			
			ТабличныйДокумент.Вывести(ОбластьПодписей);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
			
		КонецЦикла;
		
	КонецЦикла; 	

	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;	
	
КонецФункции

Функция ПечатьБланкаПриемкиТоваров(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПриходныйОрдерНаТовары_БланкПриемкиТоваров";
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс,Представление");
	СинонимДокумента = НСтр("ru='Бланк приемки товаров'");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Склад) КАК ПредставлениеСклада,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Помещение) КАК ПредставлениеПомещения,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.ЗонаПриемки) КАК ПредставлениеЗоныПриемки,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Распоряжение.Партнер) КАК ПредставлениеПартнера,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Распоряжение) КАК РаспоряжениеПредставление,
	|	ПриходныйОрдерНаТовары.Распоряжение.Номер КАК РаспоряжениеНомер,
	|	ПриходныйОрдерНаТовары.Распоряжение.Дата КАК РаспоряжениеДата,
	|	ПриходныйОрдерНаТовары.Распоряжение.Организация.Префикс КАК РаспоряжениеПрефикс,
	|	ПриходныйОрдерНаТовары.Дата,
	|	ПриходныйОрдерНаТовары.Номер,
	|	ПриходныйОрдерНаТовары.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	ПриходныйОрдерНаТовары.Склад КАК Склад,
	|	ПриходныйОрдерНаТовары.Помещение КАК Помещение,
	|	ПриходныйОрдерНаТовары.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	ПриходныйОрдерНаТовары.НомерВходящегоДокумента КАК НомерВходящегоДокумента
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриходныйОрдерНаТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка,
	|	" + ?(ВыводитьКоды, "ПриходныйОрдерНаТоварыТовары.Номенклатура." + КолонкаКодов +" КАК Артикул,", "") + "
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТоварыТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПриходныйОрдерНаТоварыТовары.Номенклатура.ЕдиницаИзмерения.Представление
	|		ИНАЧЕ ПриходныйОрдерНаТоварыТовары.Упаковка.Представление
	|	КОНЕЦ КАК ЕдиницаИзмеренияПредставление,
	|	ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок КАК Количество,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	ПриходныйОрдерНаТоварыТовары.СтатусУказанияСерий,
	|	ПриходныйОрдерНаТоварыТовары.НомерСтроки,
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура.ВидНоменклатуры.НастройкаИспользованияСерий КАК НастройкаИспользованияСерий
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПриходныйОрдерНаТоварыТовары.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаПоДокументам = Результат[0].Выбрать();	
	ВыборкаПоТабличнымЧастям = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.ПриходныйОрдерНаТовары.ПФ_MXL_БланкПриемкиТоваров");
	ОбластьЗаголовок 		= Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка 			= Макет.ПолучитьОбласть("Шапка");
	ОбластьПоставщик	 	= Макет.ПолучитьОбласть("Поставщик");
	
	ОбластьШапкаТаблицыНачало 	= Макет.ПолучитьОбласть("ШапкаТаблицы|НачалоСтроки");
	ОбластьСтрокаТаблицыНачало 	= Макет.ПолучитьОбласть("СтрокаТаблицы|НачалоСтроки");
	ОбластьСтрокаСерийНачало    = Макет.ПолучитьОбласть("СтрокаСерий|НачалоСтрокиСерий");
	ОбластьПодвалТаблицыНачало 	= Макет.ПолучитьОбласть("ПодвалТаблицы|НачалоСтроки");
	
	ОбластьШапкаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьСтрокаТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
	ОбластьСтрокаСерийКолонкаКодов      = Макет.ПолучитьОбласть("СтрокаСерий|КолонкаКодовСерий");
	ОбластьПодвалТаблицыКолонкаКодов 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	
	ОбластьШапкаТаблицыКолонкаКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов; 
	
	ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");
	
	ОбластьКолонкаТоваров = Макет.Область("КолонкаТоваров");
	ОбластьСерийКонец     = Макет.Область("КонецСтрокиСерий");
	
	ШиринаКолонкиКодов = Макет.Область("КолонкаКодов").ШиринаКолонки;
	
	Если НЕ ВыводитьКоды Тогда
		ОбластьКолонкаТоваров.ШиринаКолонки   = ОбластьКолонкаТоваров.ШиринаКолонки + ШиринаКолонкиКодов;
		ОбластьСерийКонец.ШиринаКолонки       = ОбластьСерийКонец.ШиринаКолонки + ШиринаКолонкиКодов;
	КонецЕсли;
	
	ОбластьШапкаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаТоваров");
	ОбластьСтрокаТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаТоваров");
	ОбластьПодвалТаблицыКолонкаТоваров 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаТоваров");
	
	ОбластьШапкаТаблицыКонец 	= Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	ОбластьСтрокаТаблицыКонец 	= Макет.ПолучитьОбласть("СтрокаТаблицы|КонецСтроки");
	ОбластьСтрокаСерийКонец     = Макет.ПолучитьОбласть("СтрокаСерий|КонецСтрокиСерий");
	ОбластьПодвалТаблицыКонец 	= Макет.ПолучитьОбласть("ПодвалТаблицы|КонецСтроки");
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		Если Не ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаПоДокументам.Ссылка)) Тогда
			Продолжить;
		КонецЕсли;
		
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ВыборкаПоДокументам.Ссылка);
		
		ВыборкаПоСтрокамТЧ = ВыборкаПоТабличнымЧастям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ИспользуетсяАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(ВыборкаПоДокументам.Склад, ВыборкаПоДокументам.Помещение);
		
		Если ИспользуетсяАдресноеХранение Тогда
			
			ТекстЗоны = НСтр("ru='Зона приемки:'");
			ЗонаПредставление = ВыборкаПоДокументам.ПредставлениеЗоныПриемки;
			
		Иначе
			
			ТекстЗоны = "";
			ЗонаПредставление = "";
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаПоДокументам);
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Если ЗначениеЗаполнено(ВыборкаПоДокументам.ПредставлениеПартнера) Тогда
			//если не перемещение или оприходование
			ОбластьПоставщик.Параметры.Заполнить(ВыборкаПоДокументам);
			ТабличныйДокумент.Вывести(ОбластьПоставщик);
		КонецЕсли;
		
		ПараметрыШапки = Новый Структура;
		ПараметрыШапки.Вставить("ПредставлениеСклада", СкладыСервер.ПолучитьПредставлениеСклада(ВыборкаПоДокументам.ПредставлениеСклада,
																								ВыборкаПоДокументам.ПредставлениеПомещения));
		
		ПараметрыШапки.Вставить("ТекстЗоны", ТекстЗоны);
		ПараметрыШапки.Вставить("ПредставлениеЗоныПриемки", ЗонаПредставление);
		ПараметрыШапки.Вставить("НомерВходящегоДокумента",СокрЛП(ВыборкаПоДокументам.НомерВходящегоДокумента));
		ПараметрыШапки.Вставить("ДатаВходящегоДокумента", Формат(ВыборкаПоДокументам.ДатаВходящегоДокумента,"ДЛФ=D"));
		
		ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);
		
		Если Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеДата)
			Или Не ЗначениеЗаполнено(ВыборкаПоДокументам.РаспоряжениеНомер) Тогда
			ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= ВыборкаПоДокументам.РаспоряжениеПредставление;
		Иначе
			РеквизитыДокумента.Дата          = ВыборкаПоДокументам.РаспоряжениеДата;
			РеквизитыДокумента.Номер         = ВыборкаПоДокументам.РаспоряжениеНомер;
			РеквизитыДокумента.Префикс       = ВыборкаПоДокументам.РаспоряжениеПрефикс;
			РеквизитыДокумента.Представление = ВыборкаПоДокументам.РаспоряжениеПредставление;
			
			ОбластьШапка.Параметры.ПредставлениеРаспоряжения	= ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыНачало);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьШапкаТаблицыКонец);
		
		ВсегоНаименований = 0;
		
		Пока ВыборкаПоСтрокамТЧ.Следующий() Цикл
			
			ОбластьСтрокаТаблицыНачало.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ОбластьСтрокаТаблицыНачало.Параметры.НомерСтроки = ВсегоНаименований + 1;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыНачало);
			
			Если ВыводитьКоды Тогда
				ОбластьСтрокаТаблицыКолонкаКодов.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
				ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаКодов);
			КонецЕсли;
			
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			
			ОбластьСтрокаТаблицыКолонкаТоваров.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			ВыборкаПоСтрокамТЧ.ПредставлениеНоменклатуры,
			ВыборкаПоСтрокамТЧ.ПредставлениеХарактеристики);
			
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКолонкаТоваров);
			
			ОбластьСтрокаТаблицыКонец.Параметры.Заполнить(ВыборкаПоСтрокамТЧ);
			ТабличныйДокумент.Присоединить(ОбластьСтрокаТаблицыКонец);
			
			Если ВыборкаПоСтрокамТЧ.СтатусУказанияСерий <> 0 Тогда
				
				НадписьСерии = "";
				
				Если ВыборкаПоСтрокамТЧ.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваровПоНомеру Тогда
					НадписьСерии = НСтр("ru = 'Серии (номер, количество):'");	
				ИначеЕсли ВыборкаПоСтрокамТЧ.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваровПоНомеруИСрокуГодности Тогда
					НадписьСерии = НСтр("ru = 'Серии (номер, годен до, количество):'");	
				ИначеЕсли ВыборкаПоСтрокамТЧ.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваровПоСрокуГодности Тогда
					НадписьСерии = НСтр("ru = 'Серии (годен до, количество):'");	
				ИначеЕсли ВыборкаПоСтрокамТЧ.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара Тогда
					НадписьСерии = НСтр("ru = 'Серийные номера:'");	
				КонецЕсли;
				
				ОбластьСтрокаСерийНачало.Параметры.НадписьСерии = НадписьСерии;
				
				ТабличныйДокумент.Вывести(ОбластьСтрокаСерийНачало);
				
				Если ВыводитьКоды Тогда
					ТабличныйДокумент.Присоединить(ОбластьСтрокаСерийКолонкаКодов);
				КонецЕсли;
				
				ТабличныйДокумент.Присоединить(ОбластьСтрокаСерийКонец);
				
			КонецЕсли;
			
			ВсегоНаименований = ВсегоНаименований + 1;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыНачало);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаКодов);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКолонкаТоваров);
		ТабличныйДокумент.Присоединить(ОбластьПодвалТаблицыКонец);
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%'");
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		ОбластьПодписей.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;
		
		ОбластьПодписей.Параметры.ПредставлениеОтветственного = ФизическиеЛица.ФамилияИнициалыФизЛица(ВыборкаПоДокументам.Ответственный);
		
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаПоДокументам.Ссылка);
		
	КонецЦикла;
	
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;	
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыОтборРазмещениеТоваров(ПараметрыПечати, МассивДокументов) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Ссылка) КАК СсылкаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Склад) КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ПриходныйОрдерНаТовары.Помещение) КАК ПомещениеПредставление,
	|	ПриходныйОрдерНаТовары.Дата КАК Дата,
	|	ЛОЖЬ КАК СкладыВТЧ,
	|	ПриходныйОрдерНаТовары.Номер КАК Номер,
	|	ЛОЖЬ КАК НарушенаОрдернаяСхема,
	|	ВЫБОР
	|		КОГДА ПриходныйОрдерНаТовары.Склад.ИспользоватьСкладскиеПомещения
	|			ТОГДА ПриходныйОрдерНаТовары.Помещение.ИспользоватьАдресноеХранениеСправочно
	|		ИНАЧЕ ПриходныйОрдерНаТовары.Склад.ИспользоватьАдресноеХранениеСправочно
	|	КОНЕЦ КАК ИспользуетсяСправочноеХранение,
	|	NULL КАК ВидОперации,
	|	ПриходныйОрдерНаТовары.Склад.ИспользоватьСерииНоменклатуры КАК ИспользоватьСерииНоменклатуры
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	NULL КАК Серия,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ТаблицаТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаТовары.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|	И НЕ (ТаблицаТовары.СтатусУказанияСерий В (2, 4, 6, 8, 10))
	|	И ВЫБОР
	|			КОГДА ТаблицаТовары.Ссылка.Склад.ИспользоватьСкладскиеПомещения
	|				ТОГДА ТаблицаТовары.Ссылка.Помещение.ИспользоватьАдресноеХранениеСправочно
	|			ИНАЧЕ ТаблицаТовары.Ссылка.Склад.ИспользоватьАдресноеХранениеСправочно
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСерии.Ссылка,
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.Номенклатура.ЕдиницаИзмерения,
	|	ТаблицаСерии.КоличествоУпаковок,
	|	ТаблицаСерии.Количество
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Серии КАК ТаблицаСерии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйОрдерНаТовары.Товары КАК ТаблицаТовары
	|		ПО ТаблицаСерии.Ссылка = ТаблицаТовары.Ссылка
	|			И ТаблицаСерии.Номенклатура = ТаблицаТовары.Номенклатура
	|			И ТаблицаСерии.Характеристика = ТаблицаТовары.Характеристика
	|	
	|ГДЕ
	|	ТаблицаСерии.Ссылка В(&МассивОбъектов)
	|	И ВЫБОР
	|			КОГДА ТаблицаСерии.Ссылка.Склад.ИспользоватьСкладскиеПомещения
	|				ТОГДА ТаблицаСерии.Ссылка.Помещение.ИспользоватьАдресноеХранениеСправочно
	|			ИНАЧЕ ТаблицаСерии.Ссылка.Склад.ИспользоватьАдресноеХранениеСправочно
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерии.Ссылка,
	|	ТаблицаСерии.Номенклатура,
	|	ТаблицаСерии.Характеристика,
	|	ТаблицаСерии.Серия,
	|	ТаблицаСерии.Упаковка,
	|	ТаблицаСерии.КоличествоУпаковок,
	|	ТаблицаСерии.Количество,
	|	ТаблицаСерии.НомерСтроки
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ТаблицаТовары.СтатусУказанияСерий) В (2, 4, 6, 8, 10)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Серия КАК Серия,
	|	ТаблицаТовары.Номенклатура.Код КАК Код,
	|	ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное КАК ПредставлениеНоменклатуры,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения,
	|	ТаблицаТовары.Характеристика.НаименованиеПолное КАК ПредставлениеХарактеристики,
	|	ТаблицаТовары.Упаковка.Наименование КАК ПредставлениеЕдининицыИзмеренияУпаковки,
	|	ТаблицаТовары.Серия.Наименование КАК ПредставлениеСерии,
	|	СУММА(ТаблицаТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)) КАК РабочийУчасток,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.ПорядокОбхода, 0) КАК ПорядокОбхода,
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка, ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)) КАК ОсновнаяЯчейка,
	|	ЕСТЬNULL(РазмещениеОстальныеЯчейки.Ячейка.ПорядокОбхода, 0) КАК ПорядокОбходаДополнительнаяЯчейка,
	|	ПРЕДСТАВЛЕНИЕ(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток) КАК ПредставлениеРабочегоУчастка,
	|	РазмещениеОсновнаяЯчейка.Ячейка.Код КАК ОсновнаяЯчейкаПредставление,
	|	РазмещениеОстальныеЯчейки.Ячейка.Код КАК ЯчейкаПредставление
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОсновнаяЯчейка
	|		ПО ТаблицаТовары.Номенклатура = РазмещениеОсновнаяЯчейка.Номенклатура
	|			И (РазмещениеОсновнаяЯчейка.ОсновнаяЯчейка = ИСТИНА)
	|			И (РазмещениеОсновнаяЯчейка.Склад = ТаблицаТовары.Ссылка.Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеНоменклатурыПоСкладскимЯчейкам КАК РазмещениеОстальныеЯчейки
	|		ПО ТаблицаТовары.Номенклатура = РазмещениеОстальныеЯчейки.Номенклатура
	|			И (РазмещениеОстальныеЯчейки.ОсновнаяЯчейка = ЛОЖЬ)
	|			И (РазмещениеОстальныеЯчейки.Склад = ТаблицаТовары.Ссылка.Склад)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Упаковка,
	|	РазмещениеОсновнаяЯчейка.Ячейка,
	|	РазмещениеОстальныеЯчейки.Ячейка,
	|	ТаблицаТовары.Номенклатура.Код,
	|	ТаблицаТовары.Номенклатура.Артикул,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное,
	|	ТаблицаТовары.Характеристика.НаименованиеПолное,
	|	ТаблицаТовары.Упаковка.Наименование,
	|	ТаблицаТовары.Серия.Наименование,
	|	РазмещениеОсновнаяЯчейка.Ячейка.Код,
	|	РазмещениеОстальныеЯчейки.Ячейка.Код,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения),
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток, ЗНАЧЕНИЕ(Справочник.РабочиеУчастки.ПустаяСсылка)),
	|	ЕСТЬNULL(РазмещениеОсновнаяЯчейка.Ячейка.ПорядокОбхода, 0),
	|	ЕСТЬNULL(РазмещениеОстальныеЯчейки.Ячейка.ПорядокОбхода, 0),
	|	ПРЕДСТАВЛЕНИЕ(РазмещениеОсновнаяЯчейка.Ячейка.РабочийУчасток)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ПорядокОбхода,
	|	ОсновнаяЯчейкаПредставление,
	|	ПредставлениеНоменклатуры,
	|	ПредставлениеХарактеристики,
	|	ПредставлениеСерии,
	|	ПредставлениеЕдининицыИзмеренияУпаковки,
	|	ПорядокОбходаДополнительнаяЯчейка,
	|	ЯчейкаПредставление
	|ИТОГИ ПО
	|	Ссылка,
	|	РабочийУчасток,
	|	ОсновнаяЯчейка,
	|	Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	Серия,
	|	ТаблицаТовары.Упаковка";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивДокументов); 
	МассивРезультатов 			= Запрос.ВыполнитьПакет();
	РезультатПоШапке			= МассивРезультатов[0];
	РезультатПоТабличнойЧасти 	= МассивРезультатов[2];
	СтруктураДанныхДляПечати 	= Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти",РезультатПоШапке, РезультатПоТабличнойЧасти);
	
	Возврат СтруктураДанныхДляПечати;
КонецФункции

Функция ПолучитьДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура    КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика  КАК Характеристика,
	|
	|	ВЫБОР КОГДА ПриходныйОрдерНаТоварыТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин) ТОГДА
	|		ЦеныНоменклатуры.Упаковка
	|	ИНАЧЕ
	|		ПриходныйОрдерНаТоварыТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|
	|	МИНИМУМ(ПриходныйОрдерНаТоварыТовары.НомерСтроки) КАК Порядок,
	|	СУММА(
	|		ВЫБОР КОГДА ПриходныйОрдерНаТоварыТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин) ТОГДА
	|			ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок * (ЕСТЬNULL(ПриходныйОрдерНаТоварыТовары.Упаковка.Коэффициент, 1) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1))
	|		ИНАЧЕ
	|			ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатуры
	|		ПО ЦеныНоменклатуры.Номенклатура   = ПриходныйОрдерНаТоварыТовары.Номенклатура
	|		 И ЦеныНоменклатуры.Характеристика = ПриходныйОрдерНаТоварыТовары.Характеристика
	|		 И ЦеныНоменклатуры.ВидЦены        = ПриходныйОрдерНаТоварыТовары.Ссылка.Склад.РозничныйВидЦены
	|	
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика,
	|	ВЫБОР КОГДА ПриходныйОрдерНаТоварыТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин) ТОГДА
	|		ЦеныНоменклатуры.Упаковка
	|	ИНАЧЕ
	|		ПриходныйОрдерНаТоварыТовары.Упаковка
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходныйОрдерНаТовары.Распоряжение.Организация КАК Организация,
	|	ПриходныйОрдерНаТовары.Склад                    КАК Склад,
	|	ПриходныйОрдерНаТовары.Склад.РозничныйВидЦены   КАК ВидЦены
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивСкладов     = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
	МассивВидовЦен    = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ВидЦены").ВыгрузитьКолонку(0);
	
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивВидовЦен.Количество() = 1,    МассивВидовЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЭтикеток");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЭтикетокПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	
	// Подготовка данных для заполенения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции // ПодготовитьДанные()

Функция ПолучитьДанныеДляПечатиЦенников(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура    КАК Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика  КАК Характеристика,
	|
	|	ВЫБОР КОГДА ПриходныйОрдерНаТоварыТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин) ТОГДА
	|		ЦеныНоменклатуры.Упаковка
	|	ИНАЧЕ
	|		ПриходныйОрдерНаТоварыТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|
	|	МИНИМУМ(ПриходныйОрдерНаТоварыТовары.НомерСтроки) КАК Порядок,
	|	СУММА(
	|		ВЫБОР КОГДА ПриходныйОрдерНаТоварыТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин) ТОГДА
	|			ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок * (ЕСТЬNULL(ПриходныйОрдерНаТоварыТовары.Упаковка.Коэффициент, 1) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1))
	|		ИНАЧЕ
	|			ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних КАК ЦеныНоменклатуры
	|		ПО ЦеныНоменклатуры.Номенклатура   = ПриходныйОрдерНаТоварыТовары.Номенклатура
	|		 И ЦеныНоменклатуры.Характеристика = ПриходныйОрдерНаТоварыТовары.Характеристика
	|		 И ЦеныНоменклатуры.ВидЦены        = ПриходныйОрдерНаТоварыТовары.Ссылка.Склад.РозничныйВидЦены
	|	
	|ГДЕ
	|	ПриходныйОрдерНаТоварыТовары.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриходныйОрдерНаТоварыТовары.Номенклатура,
	|	ПриходныйОрдерНаТоварыТовары.Характеристика,
	|	ВЫБОР КОГДА ПриходныйОрдерНаТоварыТовары.Ссылка.Склад.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин) ТОГДА
	|		ЦеныНоменклатуры.Упаковка
	|	ИНАЧЕ
	|		ПриходныйОрдерНаТоварыТовары.Упаковка
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходныйОрдерНаТовары.Распоряжение.Организация КАК Организация,
	|	ПриходныйОрдерНаТовары.Склад                    КАК Склад,
	|	ПриходныйОрдерНаТовары.Склад.РозничныйВидЦены   КАК ВидЦены
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	
	ТаблицаРеквизитыДокументов = МассивРезультатов[1].Выгрузить();
	МассивОрганизаций = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Организация").ВыгрузитьКолонку(0);
	МассивСкладов     = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "Склад").ВыгрузитьКолонку(0);
	МассивВидовЦен    = ОбщегоНазначенияУТ.СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, "ВидЦены").ВыгрузитьКолонку(0);
	
	
	// Подготовка структуры действий для обработки печати ценников и этикеток
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьОрганизацию", ?(МассивОрганизаций.Количество() = 1, МассивОрганизаций[0], Неопределено));
	СтруктураДействий.Вставить("ЗаполнитьСклад",       ?(МассивСкладов.Количество() = 1,     МассивСкладов[0],     МассивСкладов));
	СтруктураДействий.Вставить("ЗаполнитьВидЦены",     ?(МассивВидовЦен.Количество() = 1,    МассивВидовЦен[0],    Неопределено));
	СтруктураДействий.Вставить("ПоказыватьКолонкуКоличествоВДокументе", Истина);
	СтруктураДействий.Вставить("УстановитьРежимПечатиИзДокумента");
	СтруктураДействий.Вставить("УстановитьРежим", "ПечатьЦенников");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоЦенниковПоДокументу");
	СтруктураДействий.Вставить("ЗаполнитьТаблицуТоваров");
	
	
	// Подготовка данных для заполенения табличной части обработки печати ценников и этикеток
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", МассивРезультатов[0].Выгрузить());
	СтруктураРезультат.Вставить("СтруктураДействий", СтруктураДействий);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции // ПодготовитьДанные()

////////////////////////////////////////////////////////////////////////////////
// Прочее

Функция ОрдерныеСкладыПриПоступлении(Знач Распоряжение, Знач Склад) Экспорт
	Запрос = Новый Запрос;
	МассивСкладов = Новый Массив;
	ТипРаспоряжения = Распоряжение.Метаданные().Имя;
	
	Если ТипРаспоряжения = "СоглашенияСПоставщиками" Тогда
		РеквизитыСклада = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение,
			Новый Структура("Склад, ЭтоГруппа, ИспользоватьОрдернуюСхемуПриПоступлении", 
			"Склад", "Склад.ЭтоГруппа", "Склад.ИспользоватьОрдернуюСхемуПриПоступлении"));
			
		Если ЗначениеЗаполнено(РеквизитыСклада.Склад) Тогда
			Если РеквизитыСклада.ЭтоГруппа Тогда
				Запрос.Текст =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Склады.Ссылка КАК Склад
				|ИЗ
				|	Справочник.Склады КАК Склады
				|ГДЕ
				|	Склады.Ссылка В ИЕРАРХИИ(&ГруппаСкладов)
				|	И Склады.ИспользоватьОрдернуюСхемуПриПоступлении
				|	И (НЕ Склады.ПометкаУдаления)
				|	И (НЕ Склады.ЭтоГруппа)";
				Запрос.УстановитьПараметр("ГруппаСкладов", РеквизитыСклада.Склад);
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					МассивСкладов.Добавить(Выборка.Склад);
				КонецЦикла;
			ИначеЕсли РеквизитыСклада.ИспользоватьОрдернуюСхемуПриПоступлении Тогда
				МассивСкладов.Добавить(РеквизитыСклада.Склад);
			КонецЕсли;
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Склады.Ссылка КАК Склад
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.ИспользоватьОрдернуюСхемуПриПоступлении
			|	И (НЕ Склады.ПометкаУдаления)
			|	И (НЕ Склады.ЭтоГруппа)";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивСкладов.Добавить(Выборка.Склад);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		ИмяТабличнойЧасти = "Товары";
		
		Запрос.УстановитьПараметр("Ссылка", Распоряжение);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Товары.Склад КАК Склад
		|ИЗ
		|	Документ." + ТипРаспоряжения + "." + ИмяТабличнойЧасти + " КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивСкладов.Добавить(Выборка.Склад);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад) 
	 И МассивСкладов.Найти(Склад) = Неопределено Тогда
		МассивСкладов.Добавить(Склад);
	КонецЕсли;
	
	Возврат МассивСкладов;
	
КонецФункции


#КонецЕсли
