////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	ОтборыСписковКлиентСервер.УстановитьАктуальностьПоУмолчанию(Актуальность);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	СписокДоверенности.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", НачалоДня(ТекущаяДата()));
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	Параметры.Свойство("СостояниеРаспоряжения", СостояниеРаспоряжения);
	Параметры.Свойство("НаличиеДоверенности", НаличиеДоверенности);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокДоверенности, "Состояние", Состояние, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокДоверенности, "Ответственный", Ответственный, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокДоверенности, "ФизЛицо", ФизЛицо, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоАктуальностиПриСозданииНаСервере(СписокДоверенности, Актуальность, ДатаАктуальности, СтруктураБыстрогоОтбора);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаОформление, "ТребуетсяДоверенность", Истина, 
		СтруктураБыстрогоОтбора, СостояниеРаспоряжения = "Требующие создания доверенности");
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРаспоряженияНаОформление, "ЕстьДоверенность", Ложь, СтруктураБыстрогоОтбора, НаличиеДоверенности);
	
	УстановитьТекущуюСтраницу();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ЗаказПоставщику" Или ИмяСобытия = "Запись_ДоверенностьНаПолучениеТоваров" Тогда
		Элементы.СписокРаспоряженияНаОформление.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		СостояниеРаспоряжения = Настройки.Получить("СостояниеРаспоряжения");
		НаличиеДоверенности   = Настройки.Получить("НаличиеДоверенности");
	Иначе
		Настройки.Удалить("СостояниеРаспоряжения");
		Настройки.Удалить("НаличиеДоверенности");
	КонецЕсли;
	
	Если СтруктураБыстрогоОтбора=Неопределено ИЛИ Не СтруктураБыстрогоОтбора.Свойство("Ответственный") Тогда
		ЗначениеИзНастройки = Настройки.Получить("Ответственный");
		Если ЗначениеЗаполнено(ЗначениеИзНастройки) Тогда
			Ответственный = ЗначениеИзНастройки;
		КонецЕсли;
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ОтборПоАктуальностиПриЗагрузкеИзНастроек(СписокДоверенности, Актуальность, ДатаАктуальности, СтруктураБыстрогоОтбора, Настройки);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокДоверенности, "Ответственный", Ответственный, СтруктураБыстрогоОтбора, Настройки);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокДоверенности, "ФизЛицо", ФизЛицо, СтруктураБыстрогоОтбора, Настройки);
	
	Если ОтборыСписковКлиентСервер.НеобходимОтборПоСостояниюПриЗагрузкеИзНастроек(Состояние, СтруктураБыстрогоОтбора, Настройки) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокДоверенности.Отбор, "Состояние", Состояние, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Состояние));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокРаспоряженияНаОформление.Отбор, "ТребуетсяДоверенность",Истина, ВидСравненияКомпоновкиДанных.Равно,, СостояниеРаспоряжения = "Требующие создания доверенности");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокРаспоряженияНаОформление.Отбор, "ЕстьДоверенность" ,Ложь, ВидСравненияКомпоновкиДанных.Равно,, НаличиеДоверенности);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокДоверенности.Отбор, "Ответственный", Ответственный, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Ответственный));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если Элемент.СписокВыбора.Количество() = 0 Тогда
		ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(Элемент.СписокВыбора, ПолучитьСписокВыбораОтбораПоОтветственномуСервер());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокДоверенности.Отбор, "ФизЛицо", ФизЛицо, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ФизЛицо));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокДоверенности.Отбор, "Состояние", Состояние, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Состояние));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСрокВыполненияПриИзменении(Элемент)

	ОтборыСписковКлиентСервер.ПриИзмененииОтбораПоАктуальности(СписокДоверенности, Актуальность, ДатаАктуальности);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСрокВыполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ПриВыбореАктуальности(ВыбранноеЗначение, Актуальность, ДатаАктуальности);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСрокВыполненияОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборыСписковКлиентСервер.ПриОчисткеОтбораПоАктуальности(СписокДоверенности, Актуальность, ДатаАктуальности, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеРаспоряженияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокРаспоряженияНаОформление.Отбор, "ТребуетсяДоверенность", Истина, ВидСравненияКомпоновкиДанных.Равно,, СостояниеРаспоряжения = "Требующие создания доверенности");
	
КонецПроцедуры

&НаКлиенте
Процедура НаличиеДоверенностиПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокРаспоряженияНаОформление.Отбор, "ЕстьДоверенность", Ложь, ВидСравненияКомпоновкиДанных.Равно,, НаличиеДоверенности);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УстановитьСтатусВыдана(Команда)
	
	ВыделенныеСсылки =РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокДоверенности);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке доверенностей будет установлен статус ""Выдана"". Продолжить?'");
	Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСсылки, "Выдана");
	ОповеститьПользователяОбУстановкеСтатуса(Элементы.СписокДоверенности, КоличествоОбработанных, ВыделенныеСсылки.Количество(), "Выдана");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусИспользована(Команда)
	
	ВыделенныеСсылки =РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокДоверенности);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке доверенностей будет установлен статус ""Использована"". Продолжить?'");
	Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(Элементы.СписокДоверенности.ВыделенныеСтроки, "Использована");
	ОповеститьПользователяОбУстановкеСтатуса(Элементы.СписокДоверенности, КоличествоОбработанных, ВыделенныеСсылки.Количество(), "Использована");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНеИспользована(Команда)
	
	ВыделенныеСсылки =РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокДоверенности);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке доверенностей будет установлен статус ""Не использована"". Продолжить?'");
	Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(Элементы.СписокДоверенности.ВыделенныеСтроки, "НеИспользована");
	ОповеститьПользователяОбУстановкеСтатуса(Элементы.СписокДоверенности, КоличествоОбработанных, ВыделенныеСсылки.Количество(), "Не использована");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусАннулирована(Команда)
	
	ВыделенныеСсылки =РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокДоверенности);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке доверенностей будет установлен статус ""Аннулирована"". Продолжить?'");
	Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(Элементы.СписокДоверенности.ВыделенныеСтроки, "Аннулирована");
	ОповеститьПользователяОбУстановкеСтатуса(Элементы.СписокДоверенности, КоличествоОбработанных, ВыделенныеСсылки.Количество(), "Аннулирована");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоверенностьНаПолучениеТоваров(Команда)

	Если Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные = Неопределено Тогда

		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		Предупреждение(ТекстПредупреждения);
		Возврат;

	КонецЕсли;

	ОткрытьФорму("Документ.ДоверенностьНаПолучениеТоваров.Форма.ФормаДокумента",
				Новый Структура("Основание", 
					Новый Структура("ДокументОснование",
								Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные.Ссылка)));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ДоверенностьНаПолучениеТоваров.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказПоставщику.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Элементы.СписокРаспоряженияНаОформление.ТекущаяСтрока = Ссылка;
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаРаспоряженияНаОформление;
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ДоверенностьНаПолучениеТоваров") Тогда
			Элементы.СписокДоверенности.ТекущаяСтрока = Ссылка;
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаДоверенностиНаПолучениеТоваров;
		КонецЕсли;
		
		ОткрытьЗначение(Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ОповеститьПользователяОбУстановкеСтатуса(СписокДокументов, КоличествоОбработанных, КоличествоВсего, Статус)
	
	Если КоличествоОбработанных > 0 Тогда
		
		СписокДокументов.Обновить();
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке доверенностей установлен статус ""%Статус%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%",                 Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Статус ""%Статус%"" не установлен ни для одной доверенности.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораОтбораПоОтветственномуСервер()
	
	Возврат ОбщегоНазначенияУТ.ПолучитьСписокПользователейПоМассивуРолей(
		Документы.ДоверенностьНаПолучениеТоваров.ИменаРолейСПравомДобавления()
	);
	
КонецФункции

&НаСервере
Процедура УстановитьТекущуюСтраницу()
	
	ИмяТекущейСтраницы = "";
	
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры