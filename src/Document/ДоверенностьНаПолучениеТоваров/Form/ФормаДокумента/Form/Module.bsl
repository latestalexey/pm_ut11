
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ДоверенностьНаПолучениеТоваров", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика = Настройки.Получить("НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика");
	
	Если НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика Тогда
		Элементы.ФормаНеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗакупкиКлиент.ПроверитьСопоставленнуюНоменклатуруПоставщика(Объект, Отказ, НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "Запись_ДокументФизЛица" Тогда
		ОчиститьДанныеПаспорта(ЭтаФорма);
		ЗаполнитьСпискокУдостоверенийЛичности();
		Объект.ПредставлениеДокументаФизЛица = Параметр.Представление;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		
		ПриИзмененииФизЛицаСервер();
	Иначе
		
		Элементы.Должность.СписокВыбора.Очистить();
		Элементы.УдостоверениеЛичности.СписокВыбора.Очистить();
		СписокДолжностейЗагружен = Истина;
		Объект.ПредставлениеДокументаФизЛица = "";
		ОчиститьДанныеПаспорта(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокДействияПриИзменении(Элемент)
	
	Объект.ДатаОкончанияДействия = РассчитатьДатуОкончанияДействия(НачалоДня(Объект.Дата), Объект.СрокДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияДействияПриИзменении(Элемент)
	
	Объект.СрокДействия = РассчитатьСрокДействия(Объект.Дата, Объект.ДатаОкончанияДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если Не СписокДолжностейЗагружен И ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		
		МассивДолжностейСотрудника = ПолучитьМассивДолжностейСотрудника(Объект.ФизЛицо);
		
		Элементы.Должность.СписокВыбора.Очистить();
		
		Для Каждого ДолжностьСотрудника Из МассивДолжностейСотрудника Цикл
			Элементы.Должность.СписокВыбора.Добавить(ДолжностьСотрудника);
		КонецЦикла;
		
		СписокДолжностейЗагружен = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если Элементы.УдостоверениеЛичности.СписокВыбора.Количество() = 0 Тогда
		ЗаполнитьСпискокУдостоверенийЛичности();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = Неопределено Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ФизЛицо", Объект.ФизЛицо);
		ОткрытьФормуМодально("РегистрСведений.ДокументыФизическихЛиц.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
		СтандартнаяОбработка = Ложь;
	Иначе
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ПредставлениеДокументаФизЛица", ВыбранноеЗначение);
		НайденныеСтроки = СписокДокументов.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			НайденныйДокумент = НайденныеСтроки.Получить(0);
			ЗаполнитьЗначенияСвойств(Объект, НайденныйДокумент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиОчистка(Элемент, СтандартнаяОбработка)
	ОчиститьДанныеПаспорта(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПодбора = Новый Структура("СтрокаПоиска, ФизЛицо");
	ПараметрыПодбора.СтрокаПоиска = Текст;
	ПараметрыПодбора.ФизЛицо      = Объект.ФизЛицо;
	
	ДанныеВыбора = ПолучитьДанныеВыбораДокумента(ПараметрыПодбора);
	ДанныеВыбора.Вставить(0,Неопределено, НСтр("ru = '<Создать новый>'"));

КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПодбора = Новый Структура("СтрокаПоиска, ФизЛицо");
		ПараметрыПодбора.СтрокаПоиска = Текст;
		ПараметрыПодбора.ФизЛицо      = Объект.ФизЛицо;
		
		ДанныеВыбора = ПолучитьДанныеВыбораДокумента(ПараметрыПодбора);
		ДанныеВыбора.Вставить(0,Неопределено, НСтр("ru = '<Создать новый>'"));
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗакупкиКлиент.ПриВыбореНоменклатурыПоставщика(Объект, Поле, "ТоварыНоменклатураПоставщика", НСтр("ru = 'Поставщик'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПоставщикаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗакупкиКлиент.ЗаполнитьСписокВыбораНоменклатурыПоставщика(Объект.Партнер, Элементы.Товары.ТекущиеДанные, Элементы.ТоварыНоменклатураПоставщика.СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика");
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Объект, НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Объект, НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Объект, НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Объект, НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПоказатьНоменклатуруПоставщика(Команда)
	
	ЗакупкиКлиент.ПоказатьНоменклатуруПоставщика(Объект.Партнер, Объект.Ссылка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика(Команда)
	
	НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика = Не НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика;
	Элементы.ФормаНеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика.Пометка = НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуруПоНоменклатуреПоставщика(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьНаличиеСтрокВСписке(Объект.Товары, "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресТоваровВХранилище = ПоместитьТоварыВоВременноеХранилищеСервер();
	РезультатВыбора = ЗакупкиКлиент.ОткрытьФормуЗаполненияНоменклатурыПоставщика(АдресТоваровВХранилище, ЭтаФорма);
	Если РезультатВыбора <> Неопределено Тогда
		ЗаполнитьТоварыИзВременногоХранилищаСервер(РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ПриИзмененииФизЛицаСервер()
	
	МассивДолжностейСотрудника = ПолучитьМассивДолжностейСотрудника(Объект.ФизЛицо);
	Если МассивДолжностейСотрудника.Количество() > 0 Тогда
		Объект.Должность = МассивДолжностейСотрудника[0];
	КонецЕсли;
	
	Элементы.Должность.СписокВыбора.Очистить();
	
	Для Каждого ДолжностьСотрудника Из МассивДолжностейСотрудника Цикл
		Элементы.Должность.СписокВыбора.Добавить(ДолжностьСотрудника);
	КонецЦикла;
	
	СписокДолжностейЗагружен = Истина;
	Элементы.УдостоверениеЛичности.СписокВыбора.Очистить();
	ПолучитьПоследниеПаспортныеДанныеСтрокой();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	ЗакупкиСервер.ЗаполнитьНоменклатуруПоставщикаВТаблице(Объект.Товары, Объект.Партнер);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, , Объект.БанковскийСчет);
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивДолжностейСотрудника(ФизЛицо)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Доверенность.Должность      КАК Должность,
		|	МАКСИМУМ(Доверенность.Дата) КАК Дата
		|ИЗ
		|	Документ.ДоверенностьНаПолучениеТоваров КАК Доверенность
		|ГДЕ
		|	Доверенность.ФизЛицо = &ФизЛицо
		|	И Доверенность.Должность <> """"
		|	И НЕ Доверенность.ПометкаУдаления
		|СГРУППИРОВАТЬ ПО
		|	Доверенность.Должность
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|");
		
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	МассивСотрудников = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Должность");
	
	Возврат МассивСотрудников;
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьДатуОкончанияДействия(ДатаНачалаДействия, СрокДействия)
	
	ДатаОкончанияДействия = Дата(1,1,1);
	
	Если ЗначениеЗаполнено(ДатаНачалаДействия) Тогда
		
		Если СрокДействия > 0 Тогда
			
			ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
			
			Если ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
				ДатаОкончанияДействия = КалендарныеГрафики.ПолучитьДатуПоКалендарю(ОсновнойКалендарьПредприятия, ДатаНачалаДействия, СрокДействия);
			Иначе
				ДатаОкончанияДействия = ДатаНачалаДействия + СрокДействия * 86400;
			КонецЕсли;
			
			Возврат ДатаОкончанияДействия;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьСрокДействия(ДатаНачалаДействия, ДатаОкончанияДействия)
	
	СрокДействия = 0;
	
	Если ЗначениеЗаполнено(ДатаОкончанияДействия) И ДатаОкончанияДействия >= ДатаНачалаДействия Тогда
		
		ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
		
		Если ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
			Попытка
				СрокДействия = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(ОсновнойКалендарьПредприятия, ДатаНачалаДействия, ДатаОкончанияДействия);
			Исключение
				СрокДействия = 0;
			КонецПопытки;
		Иначе
			СрокДействия = (НачалоДня(ДатаОкончанияДействия) - НачалоДня(ДатаНачалаДействия)) / 86400;
		КонецЕсли;
		
		Возврат СрокДействия;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеСервер()
	
	Возврат ЗакупкиСервер.ПоместитьТоварыВоВременноеХранилище(Объект.Товары);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТоварыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для каждого ТекСтрока Из ТаблицаТоваров Цикл
		
		МассивСтрокКоллекции = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", ТекСтрока.НомерСтроки));
		Если МассивСтрокКоллекции.Количество() <> 1 Тогда
			Продолжить;
		Иначе
			СтрокаКоллекции = МассивСтрокКоллекции[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаКоллекции, ТекСтрока, "Номенклатура, Характеристика, Упаковка");
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить(
			"ПроверитьСопоставленнуюНоменклатуруПоставщика",
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
				Объект,
				НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика
			)
		);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаКоллекции, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПоследниеПаспортныеДанныеСтрокой()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК СерияДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК НомерДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыданДокументФизлица,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи Как ДатаВыдачиДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Представление КАК ПредставлениеДокументаФизЛица
	|ПОМЕСТИТЬ ПаспортРФ
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо = &ФизЛицо
	|	И ДокументыФизическихЛицСрезПоследних.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК СерияДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК НомерДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыданДокументФизлица,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи Как ДатаВыдачиДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Представление КАК ПредставлениеДокументаФизЛица
	|ПОМЕСТИТЬ ДокументУдостоверяющийЛичность
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность
	|	И ДокументыФизическихЛицСрезПоследних.Физлицо = &ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументыФизическихЛицСрезПоследних.Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПаспортРФ.ВидДокументаФизЛица ЕСТЬ NULL 
	|			ТОГДА ДокументУдостоверяющийЛичность.ВидДокументаФизЛица
	|		ИНАЧЕ ПаспортРФ.ВидДокументаФизЛица
	|	КОНЕЦ КАК ВидДокументаФизЛица
	|ПОМЕСТИТЬ ВыбранныйВидДокумента
	|ИЗ
	|	ПаспортРФ КАК ПаспортРФ
	|		ПОЛНОЕ СОЕДИНЕНИЕ ДокументУдостоверяющийЛичность КАК ДокументУдостоверяющийЛичность
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК СерияДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК НомерДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыданДокументФизлица,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи Как ДатаВыдачиДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Представление КАК ПредставлениеДокументаФизЛица
	|ИЗ
	|	ВыбранныйВидДокумента КАК ВыбранныйВидДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|		ПО ВыбранныйВидДокумента.ВидДокументаФизЛица = ДокументыФизическихЛицСрезПоследних.ВидДокумента
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо = &ФизЛицо";

	Запрос.УстановитьПараметр("ФизЛицо", Объект.ФизЛицо);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Объект,ВыборкаДетальныеЗаписи);
	Иначе
		ОчиститьДанныеПаспорта(ЭтаФорма);
	КонецЕсли;

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСпискокУдостоверенийЛичности()
	Элементы.УдостоверениеЛичности.СписокВыбора.Очистить();
	СписокДокументов.Очистить();
	СписокДокументов.Загрузить(ПолучитьСписокДокументовФизЛица(Элементы.УдостоверениеЛичности,Объект.ФизЛицо));
	
	Для каждого Документ Из СписокДокументов Цикл
		Элементы.УдостоверениеЛичности.СписокВыбора.Добавить(Документ.ПредставлениеДокументаФизЛица, Документ.ПредставлениеДокументаФизЛица);
	КонецЦикла; 
	
	Элементы.УдостоверениеЛичности.СписокВыбора.Вставить(0,Неопределено, НСтр("ru = '<Создать новый>'"));
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДокументовФизЛица(ЭлементУдостоверениеЛичности, ФизЛицо)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК СерияДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК НомерДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыданДокументФизлица,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачиДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Представление КАК ПредставлениеДокументаФизЛица
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо = &ФизЛицо
	|	И ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыдачиДокументаФизЛица УБЫВ";

	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ТаблицаДокументовФизЛица = Новый ТаблицаЗначений;
	ТаблицаДокументовФизЛица.Колонки.Добавить("ВидДокументаФизЛица",           Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовФизическихЛиц"));
	ТаблицаДокументовФизЛица.Колонки.Добавить("СерияДокументаФизЛица",         Новый ОписаниеТипов("Строка"));
	ТаблицаДокументовФизЛица.Колонки.Добавить("НомерДокументаФизЛица",         Новый ОписаниеТипов("Строка"));
	ТаблицаДокументовФизЛица.Колонки.Добавить("КемВыданДокументФизлица",       Новый ОписаниеТипов("Строка"));
	ТаблицаДокументовФизЛица.Колонки.Добавить("ДатаВыдачиДокументаФизЛица",    Новый ОписаниеТипов("Дата"));
	ТаблицаДокументовФизЛица.Колонки.Добавить("ПредставлениеДокументаФизЛица", Новый ОписаниеТипов("Строка"));
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовыйДокумент = ТаблицаДокументовФизЛица.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйДокумент,ВыборкаДетальныеЗаписи);
	КонецЦикла;
	Возврат ТаблицаДокументовФизЛица;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДанныеПаспорта(Форма)
	Форма.Объект.ВидДокументаФизЛица = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка");
	Форма.Объект.КемВыданДокументФизлица = "";
	Форма.Объект.ДатаВыдачиДокументаФизЛица = "";
	Форма.Объект.НомерДокументаФизЛица = "";
	Форма.Объект.ПредставлениеДокументаФизЛица = "";
	Форма.Объект.СерияДокументаФизЛица = "";
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораДокумента(Параметры)
	
	ДанныеВыбора = Новый СписокЗначений;

	Если ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДокументыФизическихЛицСрезПоследних.Представление КАК ПредставлениеДокумента
			|ИЗ
			|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
			|ГДЕ
			|	ДокументыФизическихЛицСрезПоследних.Физлицо = &Физлицо
			|	И ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность
			|	И ДокументыФизическихЛицСрезПоследних.Представление ПОДОБНО &СтрокаПоиска";
		Запрос.УстановитьПараметр("Физлицо", Параметры.Физлицо);
		Запрос.УстановитьПараметр("СтрокаПоиска","%" + СокрЛП(Параметры.СтрокаПоиска) + "%");
		
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДанныеВыбора.Добавить(ВыборкаДетальныеЗаписи.ПредставлениеДокумента,ВыборкаДетальныеЗаписи.ПредставлениеДокумента);
		КонецЦикла; 
	КонецЕсли;
	
	Возврат ДанныеВыбора
	
КонецФункции
