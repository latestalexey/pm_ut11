#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Статус = Перечисления.СтатусыДоверенностейНаПолучениеТоваров[НовыйСтатус];
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);

	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ДокументОснование")
			И ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			
			ЗаполнитьДокументНаОснованииЗаказаПоставщику(ДанныеЗаполнения.ДокументОснование);
		КонецЕсли;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ЗаполнитьДокументНаОснованииЗаказаПоставщику(ДанныеЗаполнения);
	КонецЕсли;

	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ЗначениеЗаполнено(ДатаОкончанияДействия) И ДатаОкончанияДействия < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Дата окончания действия должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата, "ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаОкончанияДействия",
			,
			Отказ
		);
		
	КонецЕсли;
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ Тогда
		Отказ = ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты);
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ПроверитьЗаполнениеОтветственныхЛицДокумента(ЭтотОбъект, Отказ);
	
	ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(Товары, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Статус = Перечисления.СтатусыДоверенностейНаПолучениеТоваров.Выдана;
	
	Если ЗначениеЗаполнено(ОбъектКопирования.СрокДействия) Тогда
		
		ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
		
		Если ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
			ДатаОкончанияДействия = КалендарныеГрафики.ПолучитьДатуПоКалендарю(ОсновнойКалендарьПредприятия,  ТекущаяДата(), ОбъектКопирования.СрокДействия);
		Иначе
			ДатаОкончанияДействия = ТекущаяДата() + ОбъектКопирования.СрокДействия * 86400;
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ЗаполнитьДокументНаОснованииЗаказаПоставщику(Знач ДокументОснование)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка                           КАК ДокументОснование,
	|	ЗаказПоставщику.Ссылка.НомерПоДаннымПоставщика   КАК НомерПоДаннымПоставщика,
	|	ЗаказПоставщику.Ссылка.ДатаПоДаннымПоставщика    КАК ДатаПоДаннымПоставщика,
	|	ЗаказПоставщику.Ссылка.Номер                     КАК НомерОснования,
	|	ЗаказПоставщику.Ссылка.Дата                      КАК ДатаОснования,
	|	ЗаказПоставщику.Партнер                          КАК Партнер,
	|	ЗаказПоставщику.Контрагент                       КАК Контрагент,
	|	ЗаказПоставщику.Организация                      КАК Организация,
	|	ЗаказПоставщику.Организация.Префикс              КАК Префикс,
	|	ЗаказПоставщику.БанковскийСчет                   КАК БанковскийСчет,
	|	ЗаказПоставщику.Статус                           КАК СтатусДокумента,
	|
	|	НЕ ЗаказПоставщику.Проведен                      КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА
	|			ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению)
	|			ИЛИ ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
	|		ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|
	|	ЗаказПоставщику.Товары.(
	|		НоменклатураПоставщика,
	|		Номенклатура,
	|		Характеристика,
	|		Упаковка,
	|		КоличествоУпаковок,
	|		Количество
	|	) КАК Товары
	|
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ДокументОснование
	|;
	|ВЫБРАТЬ
	|	ЗаказТовары.НомерСтроки                   КАК НомерСтроки,
	|	ЗаказТовары.НоменклатураПоставщика        КАК НоменклатураПоставщика,
	|	ЗаказТовары.Номенклатура                  КАК Номенклатура,
	|	ЗаказТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказТовары.Характеристика                КАК Характеристика,
	|	ЗаказТовары.КодСтроки                     КАК КодСтроки,
	|	ЗаказТовары.Упаковка                      КАК Упаковка,
	|	ЗаказыПоставщикам.КОформлениюОстаток / 
	|		ВЫБОР
	|			КОГДА
	|				ЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА
	|				1
	|			ИНАЧЕ
	|				ЗаказТовары.Упаковка.Коэффициент
	|		КОНЕЦ КАК КоличествоУпаковок
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(,
	|			ЗаказПоставщику = &ДокументОснование
	|		) КАК ЗаказыПоставщикам
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказТовары
	|		ПО	ЗаказТовары.Ссылка = &ДокументОснование
	|			И ЗаказыПоставщикам.КодСтроки      = ЗаказТовары.КодСтроки
	|			И ЗаказыПоставщикам.Номенклатура   = ЗаказТовары.Номенклатура
	|			И ЗаказыПоставщикам.Характеристика = ЗаказТовары.Характеристика
	|ГДЕ
	|	ЗаказыПоставщикам.КОформлениюОстаток > 0
	|	И ЗаказыПоставщикам.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|
	|");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка  = РезультатыЗапроса[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПоставщикам.КПоступлению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПоставщикам.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ВыборкаШапка.ДокументОснование,
		ВыборкаШапка.СтатусДокумента,
		ВыборкаШапка.ЕстьОшибкиПроведен,
		ВыборкаШапка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов
	);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	Если ЗначениеЗаполнено(ВыборкаШапка.НомерПоДаннымПоставщика) И ЗначениеЗаполнено(ВыборкаШапка.ДатаПоДаннымПоставщика) Тогда
		
		НомерДокумента = ВыборкаШапка.НомерПоДаннымПоставщика;
		ДатаДокумента = ВыборкаШапка.ДатаПоДаннымПоставщика;
		
	Иначе
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ВыборкаШапка.НомерОснования, Ложь, Истина);
		ДатаДокумента = ВыборкаШапка.ДатаОснования;
		
	КонецЕсли;
	
	ПоДокументу = НСтр("ru='Заказ №%Номер% от %Дата%'");
	ПоДокументу = СтрЗаменить(ПоДокументу, "%Номер%", НомерДокумента);
	ПоДокументу = СтрЗаменить(ПоДокументу, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
	
	Товары.Загрузить(РезультатыЗапроса[1].Выгрузить());

КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный = Пользователи.ТекущийПользователь();
	Организация    = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, , БанковскийСчет);
	
	// Срок действия доверенности по умолчанию подставляется из последней доверенности, иначе 15 рабочих дней
	Если Не ЗначениеЗаполнено(СрокДействия) Тогда
		
		СрокДействияПоследнейДоверенности = Документы.ДоверенностьНаПолучениеТоваров.ПолучитьСрокДействияПоследнейДоверенности();
		
		Если СрокДействияПоследнейДоверенности <> Неопределено Тогда
			СрокДействия = СрокДействияПоследнейДоверенности;
		Иначе
			СрокДействия = 15;
		КонецЕсли;
		
		ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
		
		Если ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
			Попытка
				ДатаОкончанияДействия = КалендарныеГрафики.ПолучитьДатуПоКалендарю(ОсновнойКалендарьПредприятия,  ТекущаяДата(), СрокДействия);
			Исключение
				ДатаОкончанияДействия = ТекущаяДата() + 1296000;
			КонецПопытки;
		Иначе
			ДатаОкончанияДействия = ТекущаяДата() + 1296000;
		КонецЕсли;
		
	КонецЕсли;
	ОтветственныеЛицаСервер.ЗаполнитьОтветственныхЛицДокумента(ЭтотОбъект);
	
КонецПроцедуры
#КонецЕсли