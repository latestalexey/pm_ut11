#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьПоЗначениямАвтозаполнения(ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
	
		ЗаполнитьПоЗаказуПоставщику(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		
		ЗаполнитьПоАвансовомуОтчету(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		ЗаполнитьПоЗаявкеНаВозвратТоваровОтКлиента(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		ЗаполнитьПоВозвратуТоваровОтКлиента(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ЗаполнитьПоПоступлениюТоваровУслуг(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов") Тогда
		
		ЗаполнитьПоПоступлениюУслугИВнеоборотныхАктивов(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		
		ЗаполнитьПоОтчетуКомитенту(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
		
		ЗаполнитьПоОтчетуКомитентуОСписании(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);	
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		
		ЗаполнитьПоОтчетуКомиссионера(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		
		ЗаполнитьПоПередачеТоваров(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		
		ЗаполнитьПоОтчетуПоКомиссии(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ЗаполнитьПоДоговору(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		
		ЗаполнитьПоВозвратуМеждуОрганизациями(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		
		ЗаполнитьПоТаможеннойДекларацииИмпорта(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	КонецЕсли;
	
	ДенежныеСредстваСервер.ЗаполнитьСтатьюДвиженияДенежныхСредств(
		ЭтотОбъект,
		ДанныеЗаполнения,
		Перечисления.ХозяйственныеОперации.ОплатаПоставщику
	);
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
	КтоЗаявил = Пользователи.ТекущийПользователь();
	
	ДатаПлатежа = Дата(1, 1, 1);
	ЖелательнаяДатаПлатежа = Дата(1, 1, 1);
	ДокументОснование = Неопределено;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ЗначениеЗаполнено(Организация)
	 И ЗначениеЗаполнено(ОрганизацияПолучатель)
	 И Организация = ОрганизацияПолучатель Тогда
		Текст = НСтр("ru = 'Одна и та же организация не может являться отправителем и получателем одновременно'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"Организация",
			,
			Отказ
		);
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена
	 ИЛИ Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована Тогда
		Если ЗначениеЗаполнено(ДатаПлатежа)
		 И ДатаПлатежа < НачалоДня(Дата) Тогда
			ТекстОшибки = НСтр("ru='Дата оплаты не может быть меньше даты документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"ДатаПлатежа",
				, // ПутьКДанным
				Отказ
			);
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПлатежа");
	КонецЕсли;

	// Проверяем соответствие хозяйственной операции и формы оплаты.
	// Платежной картой можно оплачивать только возврат оплаты клиенту.
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
	   И (ФормаОплатыПлатежнаяКарта
			ИЛИ ФормаОплатыЗаявки = Перечисления.ФормыОплаты.ПлатежнаяКарта)
	Тогда
		ТекстОшибки = НСтр("ru='Оплату платежной картой можно выбирать только для возврата оплаты клиенту'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ХозяйственнаяОперация",
			, // ПутьКДанным
			Отказ
		);
	КонецЕсли;
	
	// Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		И ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель)
		И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Организация, ОрганизацияПолучатель) Тогда
		
		ТекстОшибки = НСтр("ru='Организация-получатель должна быть взаимосвязана с организацией-отправителем по организационной структуре.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ОрганизацияПолучатель",
			,
			Отказ);
		
	КонецЕсли;
	
	// Проверяем заполнение табличной части "Расшифровка платежа".
	ДенежныеСредстваСервер.ПроверитьЗаполнениеРасшифровкиПлатежа(
		ЭтотОбъект,
		СуммаДокумента,
		ХозяйственнаяОперация,
		Отказ
	);
	
	// Проверяем соответствие валюты заявки, валюты взаиморасчетов и валюты платежа
	Если НЕ (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы
		ИЛИ  ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		ИЛИ  ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ  ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		ИЛИ  ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
		ИЛИ  ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям) Тогда
		
		ПроверитьСоответствиеВалютыВзаиморасчетов(Отказ);
		
	КонецЕсли;
		
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьМассивыРеквизитов(
		ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации
	);
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов
	);
	
	Если Не ФормаОплатыБезналичная
	 И ФормаОплатыЗаявки <> Перечисления.ФормыОплаты.Безналичная
	 И ЗначениеЗаполнено(ФормаОплатыЗаявки) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяДвиженияДенежныхСредств");
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
	Тогда
		Если ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная Тогда
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетПолучатель");
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("КассаПолучатель");
		КонецЕсли; 
	КонецЕсли; 
	
	ДенежныеСредстваСервер.ДобавитьНепроверяемыеРеквизитыПоВыплатеЗаработнойПлаты(ЭтотОбъект, МассивНепроверяемыхРеквизитов, ФормаОплатыНаличная);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов
	);
	ДенежныеСредстваСервер.ПроверитьБанковскийСчетПолучатель(ЭтотОбъект, Отказ);
	ДенежныеСредстваСервер.ПроверитьАвансовыйОтчет(ЭтотОбъект, Отказ);
	ДенежныеСредстваСервер.ПроверитьВалютуКонвертации(ЭтотОбъект, Отказ);
	ПроверитьНаличиеОплатыЗаявки(Отказ);
	
	Если Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована Тогда
		ПравоСогласования = Пользователи.РолиДоступны("СогласованиеЗаявокНаРасходованиеДенежныхСредств");
		Если Не ПравоСогласования Тогда
			ТекстОшибки = НСтр("ru='У вас нет права согласования заявок на расходование денежных средств'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				, // Поле
				, // ПутьКДанным
				Отказ
			);
		КонецЕсли;
		
	ИначеЕсли Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена Тогда
		ПравоУтверждения = Пользователи.РолиДоступны("УтверждениеЗаявокНаРасходованиеДенежныхСредств");
		Если Не ПравоУтверждения Тогда
			ТекстОшибки = НСтр("ru='У вас нет права утверждения заявок на расходование денежных средств'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				, // Поле
				, // ПутьКДанным
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	// Очистим табличную часть, если она не должна заполняться.
	Если РасшифровкаПлатежа.Количество() > 0
	   И ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет
	Тогда
		РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	
		// Заполнение суммы взаиморасчетов в табличной части "Расшифровка платежа".
		ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(
			Валюта,
			Дата,
			РасшифровкаПлатежа
		);
	КонецЕсли;
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьМассивыРеквизитов(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизитыФормыОплаты(ЭтотОбъект, ФормаОплатыЗаявки);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по регистрам
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваКВыплате(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ЗаполнитьРеквизитыПоРезультатуЗапроса(ДокументОснование, РезультатЗапроса, ДанныеЗаполнения, ЗаполнениеПоДоговору = Ложь)
	
	Если РезультатЗапроса.Пустой() Тогда
		Если ЗаполнениеПоДоговору Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не требуется вводить Заявку на расходование ДС на основании договора %1'"),
				ДокументОснование
			);
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не требуется вводить Заявку на расходование ДС на основании документа %1'"),
				ДокументОснование
			);
		КонецЕсли;
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
			
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		ДанныеЗаполнения.Вставить("ЖелательнаяДатаПлатежа");
		
		Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ФормаОплатыЗаявки) Тогда
			ДанныеЗаполнения.ФормаОплатыНаличная = Истина;
			ДанныеЗаполнения.ФормаОплатыБезналичная = Истина;
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения.ФормаОплатыЗаявки, ДанныеЗаполнения);
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
			БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДанныеЗаполнения.Контрагент, ДанныеЗаполнения.Валюта);
		Иначе			
			БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДанныеЗаполнения.Контрагент);
		КонецЕсли;
		НазначениеПлатежа = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента).ТекстНазначения;
		
		ЗаказыПоставщику = ДокументОснование;
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаТовары.ЗаказПоставщику КАК ЗаказПоставщику
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &Ссылка
			|	И ТаблицаТовары.Ссылка.ПоступлениеПоЗаказам
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
			
			РезультатЗапросаПоЗаказам = Запрос.Выполнить();
			Если НЕ РезультатЗапросаПоЗаказам.Пустой() Тогда
				ЗаказыПоставщику = РезультатЗапросаПоЗаказам.Выгрузить().ВыгрузитьКолонку("ЗаказПоставщику");
				ЗаказыПоставщику.Добавить(ДокументОснование);
			КонецЕсли;
			
		КонецЕсли;
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуПоставщику(
			ЗаказыПоставщику,
			Выборка.Договор,
			ДанныеЗаполнения.Валюта,
			?(ДанныеЗаполнения.Свойство("СуммаВзаиморасчетов"), ДанныеЗаполнения.СуммаВзаиморасчетов, 0), // СуммаКОплате,
			РасшифровкаПлатежа,
			ДанныеЗаполнения.ЖелательнаяДатаПлатежа			
		);
		
	КонецЕсли;
	
	// Заполнение суммы шапки документа
	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуПоставщику(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)

	// Заполним данные шапки документа.
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВЫБОР
	                      |		КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	                      |			ТОГДА ДанныеДокумента.БанковскийСчет.Владелец
	                      |		КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	                      |			ТОГДА ДанныеДокумента.Касса.Владелец
	                      |		ИНАЧЕ ДанныеДокумента.Организация
	                      |	КОНЕЦ КАК Организация,
	                      |	ДанныеДокумента.Подразделение КАК Подразделение,
	                      |	ДанныеДокумента.Партнер КАК Партнер,
	                      |	ДанныеДокумента.Контрагент КАК Контрагент,
	                      |	ДанныеДокумента.Договор КАК Договор,
	                      |	ДанныеДокумента.Приоритет КАК Приоритет,
	                      |	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	                      |	ВЫБОР
	                      |		КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК ФормаОплатыНаличная,
	                      |	ВЫБОР
	                      |		КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК ФормаОплатыБезналичная,
	                      |	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	                      |	ВЫБОР
	                      |		КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	                      |			ТОГДА ДанныеДокумента.БанковскийСчет
	                      |		ИНАЧЕ ДанныеДокумента.Договор.БанковскийСчет
	                      |	КОНЕЦ КАК БанковскийСчет,
	                      |	ДанныеДокумента.Касса КАК Касса,
	                      |	ВЫБОР
	                      |		КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	                      |			ТОГДА ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств
	                      |		КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	                      |			ТОГДА ДанныеДокумента.Касса.ВалютаДенежныхСредств
	                      |		ИНАЧЕ ЕСТЬNULL(ДанныеДокумента.Договор.БанковскийСчет.ВалютаДенежныхСредств, ДанныеДокумента.Валюта)
	                      |	КОНЕЦ КАК Валюта,
	                      |	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	                      |	&Ссылка КАК ДокументОснование,
	                      |	ДанныеДокумента.НомерПоДаннымПоставщика КАК НомерПоДаннымПоставщика,
	                      |	ДанныеДокумента.ДатаПоДаннымПоставщика  КАК ДатаПоДаннымПоставщика
	                      |ИЗ
	                      |	Документ.ЗаказПоставщику КАК ДанныеДокумента
	                      |ГДЕ
	                      |	ДанныеДокумента.Ссылка = &Ссылка
	                      |	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		ДанныеЗаполнения
	);
	
КонецПроцедуры

Процедура ЗаполнитьПоАвансовомуОтчету(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)
	
	УстановитьПривилегированныйРежим(Истина);

	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.ПодотчетноеЛицо.Наименование КАК Выдать,
	|	ДанныеДокумента.Ссылка КАК АвансовыйОтчет,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.Ссылка) КАК Основание,
	|	(-ДенежныеСредства.СуммаОстаток) КАК Сумма,
	|	(-ДенежныеСредства.СуммаОстаток) КАК СуммаДокумента,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(, РасчетныйДокумент = &Ссылка) КАК ДенежныеСредства
	|	ПО
	|		Истина
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДанныеЗаполнения.ПодотчетноеЛицо,
																											  ДанныеЗаполнения.Валюта);
		НазначениеПлатежа = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента).ТекстНазначения;
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоВозвратуТоваровОтКлиента(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ЗаявкаНаВозвратТоваровОтКлиента КАК Заказ,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя) ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка)
	|	КОНЕЦ КАК ФормаОплатыЗаявки,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить заявку на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;
	Иначе
	
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДанныеЗаполнения.Контрагент,
																											  ДанныеЗаполнения.Валюта);
		НазначениеПлатежа = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента).ТекстНазначения;
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоВозвратуТоваровОтКлиента(
			?(ЗначениеЗаполнено(Выборка.Заказ), Выборка.Заказ, Неопределено),
			Выборка.Договор,
			ДанныеЗаполнения.Валюта,
			ДанныеЗаполнения.Сумма,
			ДанныеЗаполнения.Партнер,
			РасшифровкаПлатежа
		);
				
	КонецЕсли;
	
	// Заполнение суммы шапки документа
	СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
		
КонецПроцедуры

Процедура ЗаполнитьПоЗаявкеНаВозвратТоваровОтКлиента(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)
	
	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.Владелец
	|	КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер        КАК Партнер,
	|	ДанныеДокумента.Приоритет      КАК Приоритет,
	|	ДанныеДокумента.Контрагент     КАК Контрагент,
	|	&Ссылка                        КАК Заказ,
	|	ДанныеДокумента.Валюта         КАК Валюта,
	|	ДанныеДокумента.Валюта         КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СуммаДокумента - ДанныеДокумента.СуммаЗамены КАК Сумма,
	|	ДанныеДокумента.СуммаДокумента - ДанныеДокумента.СуммаЗамены КАК СуммаВзаиморасчетов,
	|	НЕ ДанныеДокумента.Проведен    КАК ЕстьОшибкиПроведен,
	|	ДанныеДокумента.Статус         КАК СтатусДокумента,
	|	ВЫБОР КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
	|		ИЛИ ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя) ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ФормаОплатыЗаявки,
	|	Неопределено КАК Касса,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		МассивДопустимыхСтатусов = Новый Массив();
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена);
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			Выборка.ДокументОснование,
			Выборка.СтатусДокумента,
			Выборка.ЕстьОшибкиПроведен,
			Выборка.ЕстьОшибкиСтатус,
			МассивДопустимыхСтатусов
		);
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДанныеЗаполнения.Контрагент,
																											  ДанныеЗаполнения.Валюта);
		НазначениеПлатежа = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента).ТекстНазначения;
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения.ФормаОплатыЗаявки, ДанныеЗаполнения);
		
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		// Заполнение суммы шапки документа
		СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюТоваровУслуг(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	НЕОПРЕДЕЛЕНО КАК Касса,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ЗаказПоставщику = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка) ТОГДА
	|		&Ссылка
	|	ИНАЧЕ
	|		ДанныеДокумента.ЗаказПоставщику
	|	КОНЕЦ КАК Заказ,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.Валюта
	|	КОНЕЦ КАК Валюта,
	|
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
	|		)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		ДанныеЗаполнения
	);
			
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюУслугИВнеоборотныхАктивов(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	&Ссылка КАК Заказ,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	НЕОПРЕДЕЛЕНО КАК Касса,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.Валюта
	|	КОНЕЦ КАК Валюта,
	|
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ПоступлениеУслугПрочихАктивов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		ДанныеЗаполнения
	);
		
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомитенту(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)

	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.Владелец
	|	КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.Касса КАК Касса,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)  КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		ДанныеЗаполнения
	);
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомитентуОСписании(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)

	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|	Неопределено КАК БанковскийСчет,
	|	Неопределено КАК Касса,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		ДанныеЗаполнения
	);
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомиссионера(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)

	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.Владелец
	|	КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	Неопределено КАК БанковскийСчет,
	|	Неопределено КАК Касса,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СуммаВознаграждения КАК СуммаДокумента,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СуммаВознаграждения > 0
	|	И Не ДанныеДокумента.УдержатьВознаграждение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	Неопределено КАК БанковскийСчет,
	|	Неопределено КАК Касса,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) КАК ХозяйственнаяОперация,
	|	-ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.СуммаДокумента < 0
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить заявку на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;
	Иначе
	
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ФормаОплатыЗаявки) Тогда
			ДанныеЗаполнения.ФормаОплатыНаличная = Истина;
			ДанныеЗаполнения.ФормаОплатыБезналичная = Истина;
		КонецЕсли;
		
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			ДанныеЗаполнения.Контрагент,
			ДанныеЗаполнения.Валюта
		);
		НазначениеПлатежа = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента).ТекстНазначения;
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения.ФормаОплатыЗаявки, ДанныеЗаполнения);
		
		Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
			ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоВозвратуТоваровОтКлиента(
				ДокументОснование,
				Выборка.Договор,
				ДанныеЗаполнения.Валюта,
				Выборка.СуммаДокумента,
				ДанныеЗаполнения.Партнер,
				РасшифровкаПлатежа
			);
		Иначе
			ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуПоставщику(
				ДокументОснование,
				Выборка.Договор,
				ДанныеЗаполнения.Валюта,
				0, // СуммаКОплате
				РасшифровкаПлатежа,
				ЖелательнаяДатаПлатежа
			);
		КонецЕсли;
		СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоПередачеТоваров(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)

	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Организация,
	|	ДанныеДокумента.Организация КАК ОрганизацияПолучатель,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчетПолучатель,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчетКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК Касса,
	|	НЕОПРЕДЕЛЕНО КАК КассаПолучатель,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию) КАК ХозяйственнаяОперация,
	|
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|	И НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ОрганизацияПолучатель,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчет,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчетПолучатель,
	|	ДанныеДокумента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК Касса,
	|	Неопределено КАК КассаПолучатель,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не требуется вводить заявку на расходование денежных средств на основании документа %1'"),
		ДокументОснование
		);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
			
			Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ФормаОплатыЗаявки) Тогда
				ДанныеЗаполнения.ФормаОплатыНаличная = Истина;
				ДанныеЗаполнения.ФормаОплатыБезналичная = Истина;
			КонецЕсли;
			
			ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения.ФормаОплатыЗаявки, ДанныеЗаполнения);
			
			БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДанныеЗаполнения.Контрагент,
																											  	  ДанныеЗаполнения.Валюта);
			НазначениеПлатежа = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента).ТекстНазначения;
			БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДанныеЗаполнения.ОрганизацияПолучатель,
																														   ДанныеЗаполнения.Валюта);
			ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуПоставщику(
				ДокументОснование,
				Неопределено, // Договор
				ДанныеЗаполнения.Валюта,
				0, // СуммаКОплате
				РасшифровкаПлатежа,
				ЖелательнаяДатаПлатежа
			);
			
			СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуПоКомиссии(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)
	
	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК ОрганизацияПолучатель,
	|	ДанныеДокумента.Комиссионер КАК Организация,
	|	Неопределено КАК Контрагент,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	Неопределено КАК БанковскийСчет,
	|	Неопределено КАК Касса,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию) КАК ХозяйственнаяОперация,
	|
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.СуммаДокумента > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Неопределено КАК ОрганизацияПолучатель,
	|	ДанныеДокумента.Комиссионер КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
	| 		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	Неопределено КАК БанковскийСчет,
	|	Неопределено КАК Касса,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.СуммаДокумента > 0
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ФормаОплатыЗаявки) Тогда
			ДанныеЗаполнения.ФормаОплатыНаличная = Истина;
			ДанныеЗаполнения.ФормаОплатыБезналичная = Истина;
		КонецЕсли;
		
		ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения.ФормаОплатыЗаявки, ДанныеЗаполнения);
		
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДанныеЗаполнения.Контрагент,
																											  ДанныеЗаполнения.Валюта);
		НазначениеПлатежа = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента).ТекстНазначения;
		БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДанныеЗаполнения.ОрганизацияПолучатель,
																													   ДанныеЗаполнения.Валюта);
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуПоставщику(
			ДокументОснование,
			Неопределено, // Договор
			ДанныеЗаполнения.Валюта,
			0, // СуммаКОплате
			РасшифровкаПлатежа,
			ЖелательнаяДатаПлатежа,
			Выборка.Организация
		);
		
		СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	Иначе
		ВызватьИсключение
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заявка на расходование ДС не требуется для документа %1'"), ДокументОснование
			);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоВозвратуМеждуОрганизациями(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)

	// Заполним данные шапки документа.
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ДанныеДокумента.ОрганизацияПолучатель КАК Организация,
		|	(ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
		|		ТОГДА Неопределено
		|		ИНАЧЕ ДанныеДокумента.Организация КОНЕЦ) КАК ОрганизацияПолучатель,
		|	(ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
		|		ТОГДА ДанныеДокумента.Контрагент
		|		ИНАЧЕ Неопределено КОНЕЦ) КАК Контрагент,
		|	(ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
		|		ТОГДА ДанныеДокумента.Партнер
		|		ИНАЧЕ Неопределено КОНЕЦ) КАК Партнер,
		|	ДанныеДокумента.ДокументПоступления КАК Заказ,
		|	ДОБАВИТЬКДАТЕ(ДанныеДокумента.Дата,ДЕНЬ,
		|			РАЗНОСТЬДАТ(ДанныеДокумента.ДокументПоступления.Дата,ДанныеДокумента.ДокументПоступления.ДатаПлатежа,ДЕНЬ)
		|		) КАК ЖелательнаяДатаПлатежа,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ДанныеДокумента.Подразделение КАК Подразделение,
		|
		|	Неопределено КАК ФормаОплатыЗаявки,
		|	Истина КАК ФормаОплатыНаличная,
		|	Истина КАК ФормаОплатыБезналичная,
		|
		|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчет,
		|	(ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
		|		ТОГДА Неопределено ИНАЧЕ ДанныеДокумента.БанковскийСчетОрганизации КОНЕЦ) КАК БанковскийСчетПолучатель,
		|	(ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
		|		ТОГДА ДанныеДокумента.БанковскийСчетКонтрагента ИНАЧЕ Неопределено КОНЕЦ) КАК БанковскийСчетКонтрагента,
		|	Неопределено КАК Касса,
		|	Неопределено КАК КассаПолучатель,
		|
		|	(ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
		|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию) КОНЕЦ) КАК ХозяйственнаяОперация,
		|
		|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
		|	&Ссылка КАК ДокументОснование
		|ИЗ
		|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
		|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить заявку на расходование денежных средств на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
		
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
			
			ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения.ФормаОплатыЗаявки, ДанныеЗаполнения);
			БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ДанныеЗаполнения.Контрагент,ДанныеЗаполнения.Валюта);
			НазначениеПлатежа = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчетКонтрагента).ТекстНазначения;
			БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДанныеЗаполнения.ОрганизацияПолучатель,ДанныеЗаполнения.Валюта);
			
			ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоВозвратуТоваровОтКлиента(
				ДанныеЗаполнения.Заказ,
				Неопределено, // Договор
				ДанныеЗаполнения.Валюта,
				ДанныеЗаполнения.СуммаДокумента,
				ДанныеЗаполнения.Партнер, // партнер
				РасшифровкаПлатежа
			);
			
			СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоТаможеннойДекларацииИмпорта(Знач ДокументОснование,	ДанныеЗаполнения)
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК Касса,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|		ТОГДА ДанныеДокумента.БанковскийСчетОрганизации.ВалютаДенежныхСредств ИНАЧЕ ДанныеДокумента.Валюта КОНЕЦ КАК Валюта,
	|
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|	ДанныеДокумента.ДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплатыЗаявки,
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ФормаОплатыНаличная,
	|	ВЫБОР КОГДА ДанныеДокумента.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ФормаОплатыБезналичная,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОформлениеГТДСамостоятельно)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КОНЕЦ КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(ДокументОснование, РезультатЗапроса, ДанныеЗаполнения);
КонецПроцедуры

Процедура ЗаполнитьПоДоговору(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)

	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Ссылка КАК Договор,
	|
	|	Ложь КАК ФормаОплатыНаличная,
	|	Ложь КАК ФормаОплатыБезналичная,
	|	Неопределено КАК ФормаОплатыЗаявки,
	|
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.ВалютаВзаиморасчетов
	|	КОНЕЦ КАК Валюта,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ЗаполнитьРеквизитыПоРезультатуЗапроса(
		ДокументОснование,
		РезультатЗапроса,
		ДанныеЗаполнения,
		Истина // ЗаполнениеПоДоговору
	);
	
КонецПроцедуры

Процедура ЗаполнитьПоЗначениямАвтозаполнения(ДанныеЗаполнения = Неопределено)
	
	ЕстьДанныеЗаполнения = (НЕ ДанныеЗаполнения = Неопределено);
	ДанныеЗаполненияСтруктура = (ТипЗнч(ДанныеЗаполнения) = Тип("Структура"));
	
	// Заполним основные свойства
	СвойстваАвтозаполнения = Новый Структура("Организация");
	
	Если ДанныеЗаполненияСтруктура Тогда
		ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(СвойстваАвтозаполнения, ДанныеЗаполнения, Истина);
		
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(Ссылка, СвойстваАвтозаполнения);
	
	Если ЕстьДанныеЗаполнения И ДанныеЗаполненияСтруктура Тогда
		ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(ДанныеЗаполнения, СвойстваАвтозаполнения, Истина);
		
	ИначеЕсли НЕ ЕстьДанныеЗаполнения Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваАвтозаполнения);
		
	КонецЕсли;
	
	// Заполним банковский счет и кассу в зависимости от органиазции
	СвойстваАвтозаполнения = Новый Структура("Организация, БанковскийСчет, Касса", Организация);
	
	Если ДанныеЗаполненияСтруктура Тогда
		ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(СвойстваАвтозаполнения, ДанныеЗаполнения, Истина);
		
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(Ссылка, СвойстваАвтозаполнения);
	
	Если ЕстьДанныеЗаполнения И ДанныеЗаполненияСтруктура Тогда
		ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(ДанныеЗаполнения, СвойстваАвтозаполнения, Истина);
		
	ИначеЕсли НЕ ЕстьДанныеЗаполнения Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваАвтозаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И НЕ ДанныеЗаполнения.Свойство("Валюта") Тогда
		Валюта = ДоходыИРасходыСервер.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	КтоЗаявил = Пользователи.ТекущийПользователь();
	Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(КтоЗаявил, Подразделение);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств[НовыйСтатус];
	
	Если (ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
		ИЛИ ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена)
		И Не ЗначениеЗаполнено(ДатаПлатежа)
		И ЗначениеЗаполнено(ЖелательнаяДатаПлатежа) Тогда
		
		ДатаПлатежа = Макс(Дата, ЖелательнаяДатаПлатежа);
		
	КонецЕсли;
	
	Если ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена Тогда
		КтоРешил = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;

	Если Не ДополнительныеСвойства.ЭтоНовый Тогда

		Массив.Добавить(Движения.ДенежныеСредстваКВыплате);

	КонецЕсли;

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Процедура ПроверитьНаличиеОплатыЗаявки(Отказ)
	
	Если Не ЭтоНовый() И Статус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДенежныеСредства.СуммаПриход КАК Оплачено
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКВыплате.Обороты(,,Период,
		|		ЗаявкаНаРасходованиеДенежныхСредств = &Заявка
		|	) КАК ДенежныеСредства
		|ГДЕ
		|	ДенежныеСредства.СуммаПриход > 0
		|");
		Запрос.УстановитьПараметр("Заявка", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Текст = НСтр("ru = 'Заявка оплачена. Нельзя изменять статус заявки ""Утверждена""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"Статус",
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСоответствиеВалютыВзаиморасчетов(Отказ)
	
	Если ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение суммы взаиморасчетов в табличной части "Расшифровка платежа".
	ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(
		Валюта,
		Дата,
		РасшифровкаПлатежа
	);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки
	|
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.ВалютаВзаиморасчетов <> &ВалютаЗаявки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|;
	|");
	
	ТаблицаДокумента = РасшифровкаПлатежа.Выгрузить();	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ВалютаЗаявки",Валюта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Валюта взаиморасчетов в строке %1 списка ""Расшифровка платежа"" не соответствует валюте документа %2'"),
			Выборка.НомерСтроки,
			Валюта
			);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"РасшифровкаПлатежа[" + (Выборка.НомерСтроки - 1) + "].ВалютаВзаиморасчетов",
			,
			Отказ
		);
	
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли
