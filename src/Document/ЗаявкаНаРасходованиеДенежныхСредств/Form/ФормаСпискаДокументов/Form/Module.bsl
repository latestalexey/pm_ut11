
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ЗаполнитьСписокХозяйственныхОпераций();
	
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.ЗаявительОтбор.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейПоМассивуРолей(Документы.ЗаявкаНаРасходованиеДенежныхСредств.ИменаРолейСПравомДобавления())
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Заявитель = Настройки.Получить("Заявитель");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Заявитель", Заявитель, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Заявитель));
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ЗаявительОтборПриИзменении(Элемент)
	
	ЗаявительОтборПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЕстьФайлы" Тогда
		СтандартнаяОбработка = Ложь;
		СтрокаСписка = Элементы.Список.ТекущиеДанные;
		ОткрытьФорму("ОбщаяФорма.ПрисоединенныеФайлы",
			Новый Структура("ВладелецФайла", СтрокаСписка.Ссылка),
			ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СоздатьВозвратДенежныхСредствКлиенту()
	
	СоздатьЗаявкуНаРасходованиеДенежныхСредств(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыдачаДенежныхСредствПодотчетнику()
	
	СоздатьЗаявкуНаРасходованиеДенежныхСредств(0);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОплатаВДругуюОрганизацию(Команда)
	
	СоздатьЗаявкуНаРасходованиеДенежныхСредств(5);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратВДругуюОрганизацию(Команда)
	СоздатьЗаявкуНаРасходованиеДенежныхСредств(6);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеречислениеВБюджет(Команда)
	
	СоздатьЗаявкуНаРасходованиеДенежныхСредств(3);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПрочиеРасходы(Команда)
	
	СоздатьЗаявкуНаРасходованиеДенежныхСредств(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПрочаяВыдачаДенежныхСредств(Команда)
	
	СоздатьЗаявкуНаРасходованиеДенежныхСредств(4);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВнутреннююПередачуДенежныхСредств(Команда)
	
	СоздатьЗаявкуНаРасходованиеДенежныхСредств(7);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеречислениеТаможне(Команда)
	
	СоздатьЗаявкуНаРасходованиеДенежныхСредств(8);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонвертацияВалюты(Команда)
	
	СоздатьЗаявкуНаРасходованиеДенежныхСредств(9);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыплатаЗаработнойПлаты(Команда)
	
	СоздатьЗаявкуНаРасходованиеДенежныхСредств(10);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявкуПоКредитамДепозитам(Команда)
	
	Если Команда.Имя = "СоздатьОплатаПоКредитам" Тогда
		ИндексОперации = 11;
	ИначеЕсли Команда.Имя = "СоздатьВыплатаПоДепозитам" Тогда
		ИндексОперации = 12;
	ИначеЕсли Команда.Имя = "СоздатьВыплатаПоЗаймамВыданным" Тогда
		ИндексОперации = 13;
	КонецЕсли;
	
	СоздатьЗаявкуНаРасходованиеДенежныхСредств(ИндексОперации);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ЗаявительОтборПриИзмененииНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Заявитель", Заявитель, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Заявитель));
	УстановитьВидимость();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Ссылка = МассивСсылок[0];
		Элементы.Список.ТекущаяСтрока = Ссылка;
		ОткрытьЗначение(Ссылка);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Создание документов

&НаКлиенте
Процедура СоздатьЗаявкуНаРасходованиеДенежныхСредств(ХозяйственнаяОперацияИндекс)
	
	ХозяйственнаяОперация = СписокХозяйственныхОпераций[ХозяйственнаяОперацияИндекс].Значение;
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", Новый Структура("ХозяйственнаяОперация", ХозяйственнаяОперация));
	ОткрытьФорму("Документ.ЗаявкаНаРасходованиеДенежныхСредств.ФормаОбъекта", СтруктураПараметры, Элементы.Список);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.Заявитель.Видимость = Не ЗначениеЗаполнено(Заявитель);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокХозяйственныхОпераций()
	
	СписокХозяйственныхОпераций.Очистить();
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочиеРасходы);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаПоДепозитам);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаПоЗаймамВыданным);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, КоличествоВсего, Статус)
	
	Если КоличествоОбработанных > 0 Тогда
		
		Элементы.Список.Обновить();
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке документов установлен статус ""%Статус%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%",                 Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Статус ""%Статус%"" не установлен ни для одного документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНеСогласована(Команда)
	
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заявок будет установлен статус ""Не согласована"". Продолжить?'");
	Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "НеСогласована");
	
	ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, ВыделенныеСтроки.Количество(), "Не согласована");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСогласована(Команда)
	
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заявок будет установлен статус ""Согласована"". Продолжить?'");
	Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Согласована");
	
	ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, ВыделенныеСтроки.Количество(), "Согласована");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусУтверждена(Команда)
	
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заявок будет установлен статус ""Утверждена"". Продолжить?'");
	Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Утверждена");
	
	ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, ВыделенныеСтроки.Количество(), "Утверждена");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтклонена(Команда)
	
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заявок будет установлен статус ""Отклонена"". Продолжить?'");
	Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Отклонена");
	
	ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, ВыделенныеСтроки.Количество(), "Отклонена");
	
КонецПроцедуры
