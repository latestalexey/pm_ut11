
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);

	ФормаОплатыБезналичная = Перечисления.ФормыОплаты.Безналичная;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		Если Параметры.Свойство("Основание") Тогда
			Основание = Параметры.Основание;
		КонецЕсли;
		
	КонецЕсли;
	
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПередачиМеждуОрганизациями(ЭтаФорма, Элементы.ХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийВнутреннейПередачи(ЭтаФорма, Элементы.ХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииПеречислениеТаможне(ЭтаФорма, Элементы.ХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(ЭтаФорма, Элементы.ХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииПрочиеРасходы(ЭтаФорма, Элементы.ХозяйственнаяОперация);
	
	// Подсистема "ЭлектронныеДокументы"
	УстановитьТекстСостоянияЭДНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ФинансыКлиент.ПроверитьЗаполнениеДокументаНаОсновании(
			Объект,
			Основание
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		
		ПолучитьРасшифровкуПлатежаИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	// Подсистема "ЭлектронныеДокументы"
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям") Тогда
		ФинансыКлиент.ПересчитатьСуммуДокументаПоРасшифровкеПлатежа(Объект, "ВедомостиНаВыплатуЗарплаты");
	Иначе
		ФинансыКлиент.ПересчитатьСуммуДокументаПоРасшифровкеПлатежа(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьДанныеОбОплатеЗаявки();
	УстановитьДоступностьЭлементовПоСтатусу(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗаявкаНаРасходованиеДенежныхСредств", ПараметрыЗаписи, Объект.Ссылка); // Используется для автоматического обновления формы платежного календаря

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если Объект.ДатаПлатежа < Объект.Дата Тогда
		Объект.ДатаПлатежа = Объект.Дата;
	КонецЕсли;
	
	ФинансыКлиент.ОчиститьСуммуВзаиморасчетовРасшифровкиПлатежа(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КонвертацияВалюты") Тогда
		КурсКонвертацииПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ТекущаяВалюта <> Объект.Валюта Тогда
		
		ПересчетСуммДокументаВВалюту(ТекущаяВалюта);
		
		Если ТекущаяВалюта <> Объект.Валюта Тогда
			
			ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
			
			Элементы.РасшифровкаПлатежаСумма.Заголовок = "Сумма (" + Строка(Объект.Валюта) + ")";
			ТекущаяВалюта = Объект.Валюта;
			
			ЗаполнитьРеквизитыДокументаПоФормеОплаты();
			
			Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КонвертацияВалюты") Тогда
				ВалютаКонвертацииПриИзмененииСервер();
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	Отказ = Ложь;
	
	Если НЕ Отказ Тогда
		
		Если ФормаОплаты = "Наличная" Тогда
			Объект.ФормаОплатыНаличная = Истина;
			Объект.ФормаОплатыБезналичная = Ложь;
			Объект.ФормаОплатыПлатежнаяКарта = Ложь;
			Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная");
			
		ИначеЕсли ФормаОплаты = "Безналичная" Тогда
			Объект.ФормаОплатыНаличная = Ложь;
			Объект.ФормаОплатыБезналичная = Истина;
			Объект.ФормаОплатыПлатежнаяКарта = Ложь;
			Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичная");
			
		ИначеЕсли ФормаОплаты = "Любая" Тогда
			Объект.ФормаОплатыНаличная = Истина;
			Объект.ФормаОплатыБезналичная = Истина;
			Объект.ФормаОплатыПлатежнаяКарта = Ложь;
			Объект.ФормаОплатыЗаявки = Объект.ФормаОплатыЗаявки.Пустая();
			
		ИначеЕсли ФормаОплаты = "ПлатежнаяКарта" Тогда
			Объект.ФормаОплатыНаличная = Ложь;
			Объект.ФормаОплатыБезналичная = Ложь;
			Объект.ФормаОплатыПлатежнаяКарта = Истина;
			Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта");
			
		Иначе
			Объект.ФормаОплатыНаличная = Ложь;
			Объект.ФормаОплатыБезналичная = Ложь;
			Объект.ФормаОплатыПлатежнаяКарта = Ложь;
			
		КонецЕсли;
		
		ФормаОплатыЗаявкиПриИзмененииСервер();
		
	Иначе
		
		Если Объект.ФормаОплатыНаличная И Объект.ФормаОплатыБезналичная Тогда
			ФормаОплаты = "Любая";
		ИначеЕсли Объект.ФормаОплатыНаличная Тогда
			ФормаОплаты = "Наличная";
		ИначеЕсли Объект.ФормаОплатыБезналичная Тогда
			ФормаОплаты = "Безналичная";
		ИначеЕсли Объект.ФормаОплатыПлатежнаяКарта Тогда
			ФормаОплаты = "ПлатежнаяКарта";
		Иначе
			ФормаОплаты = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетКонтрагентаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.НазначениеПлатежа) Тогда
		ВставитьНазначениеПлатежаИзБанковскогоСчетаКонтрагентаСервер();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодотчетноеЛицоПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
		ПодотчетноеЛицоПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПолучательПриИзменении(Элемент)

	ОрганизацияПолучательПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если ТекущийСтатус <> Объект.Статус Тогда
		СтатусПриИзмененииСервер();
		ТекущийСтатус = Объект.Статус;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыЗаявкиПриИзменении(Элемент)
	
	ФормаОплатыЗаявкиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОткрытьДокументыОплатыНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметры = Новый Структура("СписокДокументовОплаты", СписокДокументовОплаты);
	ОткрытьФормуМодально("Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ПросмотрСпискаДокументовОплаты", СтруктураПараметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаКонвертацииПриИзменении(Элемент)
	
	ВалютаКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсКонвертацииПриИзменении(Элемент)
	
	КурсКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыКлиент.ОткрытьАктуальныйЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланированиеСуммыПриИзменении(Элемент)
	
	ПланированиеСуммыПриИзмененииСервер();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ "Расшифровка платежа"

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер);
	КонецЕсли;
	ФинансыКлиент.РасшифровкаПлатежаПриНачалеРедактирования(
		Объект,
		Партнер,
		ДоговорКонтрагента,
		СтрокаТаблицы,
		НоваяСтрока,
		Копирование
	);
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВозвратВДругуюОрганизацию = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию");
	ОплатаВДругуюОрганизацию = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию");
	
	СтруктураОтбор = Новый Структура("Организация, Контрагент, ЭтоРасчетыСКлиентами",
		Объект.Организация,
		?(ОплатаВДругуюОрганизацию или ВозвратВДругуюОрганизацию,
				Объект.ОрганизацияПолучатель,
				Объект.Контрагент),
		ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация) или ВозвратВДругуюОрганизацию
	);
	
	Если Объект.ПланированиеСуммы = ПредопределенноеЗначение("Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов") Тогда
		СтруктураОтбор.Вставить("Валюта", Объект.Валюта);
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура("Отбор, ВыборОснованияПлатежа", СтруктураОтбор, Ложь);
	ОткрытьФорму("ОбщаяФорма.ВыборДокументаРасчетов", СтруктураПараметры, Элемент);
	
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПриИзменении(Элемент)

	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяРасходовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	РасшифровкаПлатежаСтатьяРасходовПриИзмененииСервер(
		СтрокаТаблицы.СтатьяРасходов,
		СтрокаТаблицы.АналитикаРасходов
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	СтрокаТаблицы.ВалютаВзаиморасчетов = СтрокаТаблицы.ДоговорКредитаДепозита.ВалютаВзаиморасчетов;	
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ "Ведомости на выплату зарплаты"

&НаКлиенте
Процедура ВедомостиНаВыплатуЗарплатыВедомостьПриИзменении(Элемент)
	
	ЗаполнитьСуммуПоТекущейВедомости();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВставитьНазначениеПлатежа(Команда)
	
	СписокДействий = Новый СписокЗначений;
	Для Каждого ЭлементыКонтекстногоМеню Из Элементы.НазначениеПлатежаКонтекстноеМенюГруппаВставить.ПодчиненныеЭлементы Цикл
		Если ЭлементыКонтекстногоМеню.Видимость Тогда
			СписокДействий.Добавить(ЭлементыКонтекстногоМеню.ИмяКоманды, ЭлементыКонтекстногоМеню.Заголовок);
		КонецЕсли;
	КонецЦикла; 
	
	ВыбранноеДействие = ВыбратьИзМеню(СписокДействий, Элементы.ВставитьНазначениеПлатежа);
	Если ВыбранноеДействие <> Неопределено Тогда
		
		Выполнить ВыбранноеДействие.Значение + "Сервер(Элементы.НазначениеПлатежа.ВыделенныйТекст);";
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ВставитьНазначениеПлатежаСписокДокументов(Команда)
	
	ВставитьНазначениеПлатежаСписокДокументовСервер(Элементы.НазначениеПлатежа.ВыделенныйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьНазначениеПлатежаНДС18(Команда)
	
	ВставитьНазначениеПлатежаНДС18Сервер(Элементы.НазначениеПлатежа.ВыделенныйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьНазначениеПлатежаНДС10(Команда)
	
	ВставитьНазначениеПлатежаНДС10Сервер(Элементы.НазначениеПлатежа.ВыделенныйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьНазначениеПлатежаБезНДС(Команда)
	
	ВставитьНазначениеПлатежаБезНДССервер(Элементы.НазначениеПлатежа.ВыделенныйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьНазначениеПлатежаИзБанковскогоСчетаКонтрагента(Команда)
	
	ВставитьНазначениеПлатежаИзБанковскогоСчетаКонтрагентаСервер(Элементы.НазначениеПлатежа.ВыделенныйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	ОплатаВДругуюОрганизацию = 
		Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию")
		или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию");
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Валюта");
	
	Если ОплатаВДругуюОрганизацию Тогда
		Если Объект.ФормаОплатыЗаявки = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная") Тогда
			СтруктураРеквизитов.Вставить("КассаПолучатель");
		Иначе	
			СтруктураРеквизитов.Вставить("БанковскийСчетПолучатель");
		КонецЕсли; 
	Иначе
		СтруктураРеквизитов.Вставить("Контрагент");		
	КонецЕсли; 
	
	Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтаФорма, Неопределено, СтруктураРеквизитов) Тогда

		АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
		ПараметрыПодбора = Новый Структура("
			|АдресПлатежейВХранилище, 
			|Организация, 
			|Контрагент,
			|Валюта,
			|СуммаДокумента,
			|ДатаДокумента,
			|ХозяйственнаяОперация",
			АдресПлатежейВХранилище,
			Объект.Организация, 
			?(ОплатаВДругуюОрганизацию,
				Объект.ОрганизацияПолучатель,
				Объект.Контрагент),
			Объект.Валюта,
			Объект.СуммаДокумента,
			Объект.Дата,
			Объект.ХозяйственнаяОперация
		);
		ОткрытьФорму(
			"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
			ПараметрыПодбора, 
			ЭтаФорма
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОбОплате(Команда)
	
	ЗаполнитьДанныеОбОплатеЗаявки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВедомостиНаВыплатуЗарплатыПоОстаткам(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтаФорма, Объект.ВедомостиНаВыплатуЗарплаты, Новый Структура("Организация")) Тогда
		
		ЗаполнитьВедомостиПоОстаткамНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВозникновенияРасходаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Объект.ПериодВозникновенияРасхода = ФинансыКлиент.ПериодВозникновенияРасхода(
		ЭтаФорма,
		Объект.Дата,
		Элемент,
		СтандартнаяОбработка
	);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
    
	УстановитьВидимость();
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаПлатежаПартнер);
	УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, Элементы.БанковскийСчетКонтрагента);
	НастроитьДоступныеФормыОплаты();
	
	УстановитьПараметрыВыбораОрганизации();
	УстановитьПараметрыВыбораОрганизацииПолучателя();
	ПроверитьИОчиститьОрганизацию();
	ПроверитьИОчиститьОрганизациюПолучатель();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		СчетСоответствуетВладельцу = Справочники.БанковскиеСчетаКонтрагентов.ПроверитьВладельцаБанковскогоСчета(
			Объект.БанковскийСчетКонтрагента,
			Объект.ПодотчетноеЛицо
		);
	Иначе
		СчетСоответствуетВладельцу = Справочники.БанковскиеСчетаКонтрагентов.ПроверитьВладельцаБанковскогоСчета(
			Объект.БанковскийСчетКонтрагента,
			Объект.Контрагент
		);
	КонецЕсли;
	
	Если Не СчетСоответствуетВладельцу Тогда
		Объект.БанковскийСчетКонтрагента = Неопределено;
	КонецЕсли;
	
	Объект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	
	ПолучитьДоговорПоУмолчаниюСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	УстановитьПараметрыВыбораОрганизацииПолучателя();
	ПроверитьИОчиститьОрганизациюПолучатель();
	
	Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.ФормаОплатыЗаявки) Тогда
		
		ЗаполнитьБанковскийСчетИКассуПоОрганизации(Объект.Организация);
		
		Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплатыЗаявки, Объект.БанковскийСчет);
		Объект.Касса          = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплатыЗаявки, Объект.Касса);
	
		ПолучитьДоговорПоУмолчаниюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПолучательПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
		Объект.БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			Объект.ОрганизацияПолучатель,
			Объект.Валюта
			);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()

	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент);
		ПолучитьДоговорПоУмолчаниюСервер();
		
		Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
				Объект.Контрагент,
				Объект.Валюта
			);
		КонецЕсли;
		ВставитьНазначениеПлатежаИзБанковскогоСчетаКонтрагентаСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодотчетноеЛицоПриИзмененииСервер()
	
	Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
		Объект.ПодотчетноеЛицо,
		Объект.Валюта
	);
	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииСервер()
	
	УстановитьОтметкуНезаполненного();
	
	Если (Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
	 ИЛИ Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена)
	   И Не ЗначениеЗаполнено(Объект.ДатаПлатежа)
	   И ЗначениеЗаполнено(Объект.ЖелательнаяДатаПлатежа) Тогда
	   
		Объект.ДатаПлатежа = Макс(Объект.Дата, Объект.ЖелательнаяДатаПлатежа);
		
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена Тогда
		Объект.КтоРешил = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусу(Ложь);
	УстановитьСписокСтатусов();
	
КонецПроцедуры

&НаСервере
Процедура ФормаОплатыЗаявкиПриИзмененииСервер()
	
	УстановитьВидимость();
	ЗаполнитьРеквизитыДокументаПоФормеОплаты();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФормуОплаты()

	Если Объект.ФормаОплатыНаличная И Объект.ФормаОплатыБезналичная Тогда
		ФормаОплаты = "Любая";
		
	ИначеЕсли Объект.ФормаОплатыНаличная Тогда
		ФормаОплаты = "Наличная";
		
	ИначеЕсли Объект.ФормаОплатыБезналичная Тогда
		ФормаОплаты = "Безналичная";
		
	ИначеЕсли Объект.ФормаОплатыПлатежнаяКарта Тогда
		ФормаОплаты = "ПлатежнаяКарта";
		
	Иначе
		ФормаОплаты = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВалютаКонвертацииПриИзмененииСервер()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КурсКонвертации = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		Объект.Валюта,
		Объект.ВалютаКонвертации,
		Объект.Дата
	);
	Если КурсКонвертации <> 0 Тогда
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.КурсКонвертации = КурсКонвертации;
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента * Объект.КурсКонвертации;
		Иначе
			Объект.КурсКонвертации = 1 / КурсКонвертации;
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента / Объект.КурсКонвертации;
		КонецЕсли;
	Иначе
		Объект.КурсКонвертации = 0;
		Объект.СуммаПослеКонвертации = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КурсКонвертацииПриИзмененииСервер()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если Объект.КурсКонвертации <> 0 Тогда
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента * Объект.КурсКонвертации;
		Иначе
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента / Объект.КурсКонвертации;
		КонецЕсли;
	Иначе
		Объект.СуммаПослеКонвертации = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаСтатьяРасходовПриИзмененииСервер(СтатьяРасходов, АналитикаРасходов)
	
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, СтатьяРасходов, АналитикаРасходов);
	
КонецПроцедуры

&НаСервере
Процедура ПланированиеСуммыПриИзмененииСервер()
	
	Если Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
		
		Объект.Валюта = ВалютаПлатежаСервер();
		
	Иначе
		
		МассивВалют = Новый Массив;
		Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.ВалютаВзаиморасчетов) 
				И МассивВалют.Найти(СтрокаТаблицы.ВалютаВзаиморасчетов) = Неопределено Тогда
				МассивВалют.Добавить(СтрокаТаблицы.ВалютаВзаиморасчетов);
			КонецЕсли;			
		КонецЦикла;
		
		Если МассивВалют.Количество() = 1 Тогда
			Объект.Валюта = МассивВалют[0];		
		Иначе
			Объект.Валюта = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
				ТекущаяВалюта,
				Объект.Валюта,
				Объект.Дата
			);
		
		ИтогСумма = Объект.РасшифровкаПлатежа.Итог("Сумма");
		СуммаДокумента = Окр(КоэффициентПересчета * ИтогСумма, 2, 1);
		Объект.СуммаДокумента = СуммаДокумента;
						
		// Пересчитаем суммы в табличной части документа.
		Если ИтогСумма <> 0 Тогда
			
			Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
				
				Сумма = ?(ИтогСумма <> 0, Окр(СуммаДокумента * СтрокаТаблицы.Сумма / ИтогСумма, 2, 1), 0);
				ИтогСумма = ИтогСумма - СтрокаТаблицы.Сумма;
				СуммаДокумента = СуммаДокумента - Сумма;
				СтрокаТаблицы.Сумма = Сумма;
				
			КонецЦикла;
			
		КонецЕсли;
		Элементы.РасшифровкаПлатежаСумма.Заголовок = "Сумма (" + Строка(Объект.Валюта) + ")";
		ТекущаяВалюта = Объект.Валюта;
	КонецЕсли;
	
	УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, Элементы.БанковскийСчетКонтрагента);
	УстановитьПараметрыВыбораБанковскогоСчетаПолучателя(Объект, Элементы.БанковскийСчетПолучатель);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Свойства

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ЭлектронныеДокументы"

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ПравоСогласования = Пользователи.РолиДоступны("СогласованиеЗаявокНаРасходованиеДенежныхСредств");
	ПравоУтверждения  = Пользователи.РолиДоступны("УтверждениеЗаявокНаРасходованиеДенежныхСредств");
	
	ТекущаяВалюта = Объект.Валюта;
	ТекущийСтатус = Объект.Статус;
	ЗаполнитьДанныеОбОплатеЗаявки();
	УправлениеЭлементамиФормы();
	УстановитьСписокХозяйственныхОпераций();
	УстановитьСписокСтатусов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьМассивыРеквизитов(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.УстановитьВидимостьПодбораПоОстаткамРасчетов(
		Объект.ХозяйственнаяОперация,
		Элементы.РасшифровкаПлатежаПодборПоОстаткам
	);
	Элементы.НазначениеПлатежаКонтекстноеМенюВставитьНазначениеПлатежаСписокДокументов.Видимость = Элементы.РасшифровкаПлатежаЗаказ.Видимость;
	Элементы.НазначениеПлатежаКонтекстноеМенюВставитьНазначениеПлатежаИзБанковскогоСчетаКонтрагента.Видимость = Элементы.БанковскийСчетКонтрагента.Видимость;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
	 ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
	 ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		Если Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная Тогда
			Элементы.БанковскийСчетПолучатель.Видимость = Ложь;
			Элементы.КассаПолучатель.Видимость = Истина;
		Иначе
			Элементы.БанковскийСчетПолучатель.Видимость = Истина;
			Элементы.КассаПолучатель.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Безналичная Тогда
		Элементы.БанковскийСчет.Видимость = Истина;
		Элементы.Касса.Видимость = Ложь;
		
	ИначеЕсли Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная Тогда
		Элементы.БанковскийСчет.Видимость = Ложь;
		Элементы.Касса.Видимость = Истина;
		
	Иначе
		Элементы.БанковскийСчет.Видимость = Ложь;
		Элементы.Касса.Видимость = Ложь;
		
	КонецЕсли;
	
	ВыплатаЗаработнойПлаты = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям;
	Элементы.ФормаОплатыЗаявки.ТолькоПросмотр = ВыплатаЗаработнойПлаты;
	Элементы.Валюта.ТолькоПросмотр            = ВыплатаЗаработнойПлаты;
	
	ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	Элементы.ВедомостиНаВыплатуЗарплаты.Видимость      = Элементы.ВедомостиНаВыплатуЗарплаты.Видимость И ИспользоватьНачислениеЗарплаты;
	Элементы.НомерВедомостиНаВыплатуЗарплаты.Видимость = Элементы.НомерВедомостиНаВыплатуЗарплаты.Видимость И Не ИспользоватьНачислениеЗарплаты;
	Элементы.ДатаВедомостиНаВыплатуЗарплаты.Видимость  = Элементы.ДатаВедомостиНаВыплатуЗарплаты.Видимость И Не ИспользоватьНачислениеЗарплаты;
	Элементы.СтатьяРасходов.Видимость                  =  Элементы.СтатьяРасходов.Видимость И Не ИспользоватьНачислениеЗарплаты; 
	Элементы.АналитикаРасходов.Видимость               = Элементы.АналитикаРасходов.Видимость И Не ИспользоватьНачислениеЗарплаты;
	Элементы.ПериодВозникновенияРасхода.Видимость      = Элементы.ПериодВозникновенияРасхода.Видимость И Не ИспользоватьНачислениеЗарплаты;
	//{ ООО "АСТЭК" по заказу ООО "ПаксМед". Разработчик: Бурыкин Александр Дата: 18.01.2014
	//
	 Элементы.СтатьяДвиженияДенежныхСредств.Видимость      = истина; //Элементы.ПериодВозникновенияРасхода.Видимость И Не ИспользоватьНачислениеЗарплаты;
	
	//} 
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
		Элементы.НомерВедомостиНаВыплатуЗарплаты.АвтоОтметкаНезаполненного = Ложь;
		Элементы.НомерВедомостиНаВыплатуЗарплаты.ОтметкаНезаполненного = Ложь;
		Элементы.ДатаВедомостиНаВыплатуЗарплаты.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ДатаВедомостиНаВыплатуЗарплаты.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если ВыплатаЗаработнойПлаты Тогда
		Элементы.Контрагент.Доступность                = Объект.ФормаОплатыБезналичная;
		Элементы.БанковскийСчетКонтрагента.Доступность = Объект.ФормаОплатыБезналичная;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	УстановитьФормуОплаты();
	УстановитьВидимость();
	УстановитьОтметкуНезаполненного();
	УстановитьДоступностьЭлементовПоСтатусу(Истина);
	НастроитьДоступныеФормыОплаты();
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаПлатежаПартнер);
	УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, Элементы.БанковскийСчетКонтрагента);
	УстановитьПараметрыВыбораБанковскогоСчетаПолучателя(Объект, Элементы.БанковскийСчетПолучатель);
	УстановитьПараметрыВыбораОрганизации();
	УстановитьПараметрыВыбораОрганизацииПолучателя();
	
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(
		Объект.Валюта,
		Элементы
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуНезаполненного()
	
	Если Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована Тогда
		Элементы.СтатьяДвиженияДенежныхСредств.АвтоОтметкаНезаполненного = Ложь;
		Элементы.СтатьяДвиженияДенежныхСредств.ОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.СтатьяДвиженияДенежныхСредств.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокХозяйственныхОпераций()
	
	СписокВыбора = Элементы.ХозяйственнаяОперация.СписокВыбора;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ТипДокумента = ТипЗнч(Объект.ДокументОснование);
		Если ТипДокумента = Тип("ДокументСсылка.ЗаказПоставщику")
		 ИЛИ ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		 ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетКомиссионера")
		 ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетКомитенту")
		 ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ПрочиеРасходы);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
		 ИЛИ ТипДокумента = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ПрочиеРасходы);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ПрочиеРасходы);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);	
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		 ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
			СписокВыбора.Очистить();
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
			СписокВыбора.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокСтатусов()
	
	СписокВыбора = Элементы.Статус.СписокВыбора;
	
	Если Не ПравоСогласования ИЛИ Не ПравоУтверждения Тогда
		
		СписокВыбора.Очистить();
		СписокВыбора.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
		СписокВыбора.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
		
		Если ПравоСогласования
		 ИЛИ Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована Тогда
			СписокВыбора.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
		КонецЕсли;
		
		Если ПравоУтверждения
		 ИЛИ Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена Тогда
			СписокВыбора.Добавить(Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусу(УстанавливатьТолькоПросмотр)
	
	Если Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована Тогда
		ТолькоПросмотрЭлементов = Объект.Проведен И УстанавливатьТолькоПросмотр;
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена Тогда
		ТолькоПросмотрЭлементов = Объект.Проведен И УстанавливатьТолькоПросмотр;
		
	Иначе
		ТолькоПросмотрЭлементов = Ложь;
		
	КонецЕсли;
	
	ВыплатаЗаработнойПлаты = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям;
	
	Элементы.Номер.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.Дата.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.СуммаДокумента.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.Валюта.ТолькоПросмотр = ТолькоПросмотрЭлементов ИЛИ ВыплатаЗаработнойПлаты;
	Элементы.ФормаОплаты.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.Организация.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.Подразделение.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.Заявитель.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.ХозяйственнаяОперация.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.ЖелательнаяДатаПлатежа.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.Контрагент.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.ОрганизацияПолучатель.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.ПодотчетноеЛицо.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.БанковскийСчетКонтрагента.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.БанковскийСчетПолучатель.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.КассаПолучатель.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.АвансовыйОтчет.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.СтатьяДвиженияДенежныхСредств.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.РасшифровкаПлатежа.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	
	Элементы.ФормаОплатыЗаявки.ТолькоПросмотр = ТолькоПросмотрЭлементов ИЛИ ВыплатаЗаработнойПлаты ИЛИ (Не ПравоСогласования И Не ПравоУтверждения);
	Элементы.ДатаПлатежа.ТолькоПросмотр = ТолькоПросмотрЭлементов ИЛИ (Не ПравоСогласования И Не ПравоУтверждения);
	Элементы.БанковскийСчет.ТолькоПросмотр = ТолькоПросмотрЭлементов ИЛИ (Не ПравоСогласования И Не ПравоУтверждения);
	Элементы.Касса.ТолькоПросмотр = ТолькоПросмотрЭлементов ИЛИ (Не ПравоСогласования И Не ПравоУтверждения);
	Элементы.НазначениеПлатежа.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	
	Элементы.ВалютаКонвертации.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.КурсКонвертации.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.СуммаПослеКонвертации.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	
	Элементы.РасшифровкаПлатежаПодборПоОстаткам.Доступность = Не ТолькоПросмотрЭлементов;
	Элементы.ВставитьНазначениеПлатежа.Доступность = Не ТолькоПросмотрЭлементов;
	
	Элементы.НомерВедомостиНаВыплатуЗарплаты.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.ДатаВедомостиНаВыплатуЗарплаты.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	
	Если УстанавливатьТолькоПросмотр Тогда
		Элементы.КтоРешил.Видимость = (Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена);
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена Тогда
		Элементы.Статус.ТолькоПросмотр = Объект.Проведен И ПустаяСтрока(ТекстНеОплачено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступныеФормыОплаты()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
	 И ПолучитьФункциональнуюОпциюФормы("ИспользоватьОплатуПлатежнымиКартами") Тогда
		
		ЭлементСписка = Элементы.ФормаОплаты.СписокВыбора.НайтиПоЗначению("ПлатежнаяКарта");
		Если ЭлементСписка = Неопределено Тогда
			Элементы.ФормаОплаты.СписокВыбора.Добавить("ПлатежнаяКарта", "Платежной картой");
		КонецЕсли;
		
		ЭлементСписка = Элементы.ФормаОплатыЗаявки.СписокВыбора.НайтиПоЗначению(Перечисления.ФормыОплаты.ПлатежнаяКарта);
		Если ЭлементСписка = Неопределено Тогда
			Элементы.ФормаОплатыЗаявки.СписокВыбора.Добавить(Перечисления.ФормыОплаты.ПлатежнаяКарта);
		КонецЕсли;
		
	Иначе
		
		ЭлементСписка = Элементы.ФормаОплаты.СписокВыбора.НайтиПоЗначению("ПлатежнаяКарта");
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ФормаОплаты.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Элементы.ФормаОплатыЗаявки.СписокВыбора.НайтиПоЗначению(Перечисления.ФормыОплаты.ПлатежнаяКарта);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ФормаОплатыЗаявки.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
		ЭлементСписка = Элементы.ФормаОплаты.СписокВыбора.НайтиПоЗначению("Наличная");
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ФормаОплаты.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		ЭлементСписка = Элементы.ФормаОплаты.СписокВыбора.НайтиПоЗначению("Любая");
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ФормаОплаты.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Элементы.ФормаОплатыЗаявки.СписокВыбора.НайтиПоЗначению(Перечисления.ФормыОплаты.Наличная);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ФормаОплатыЗаявки.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		ЭлементСписка = Элементы.ФормаОплатыЗаявки.СписокВыбора.НайтиПоЗначению(Перечисления.ФормыОплаты.ПустаяСсылка());
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ФормаОплатыЗаявки.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	Иначе
		ЭлементСписка = Элементы.ФормаОплаты.СписокВыбора.НайтиПоЗначению("Наличная");
		Если ЭлементСписка = Неопределено Тогда
			Элементы.ФормаОплаты.СписокВыбора.Добавить("Наличная", "Наличными");
		КонецЕсли;
		ЭлементСписка = Элементы.ФормаОплаты.СписокВыбора.НайтиПоЗначению("Любая");
		Если ЭлементСписка = Неопределено Тогда
			Элементы.ФормаОплаты.СписокВыбора.Добавить("Любая", "Наличными или безналичными");
		КонецЕсли;
		
		ЭлементСписка = Элементы.ФормаОплатыЗаявки.СписокВыбора.НайтиПоЗначению(Перечисления.ФормыОплаты.Наличная);
		Если ЭлементСписка = Неопределено Тогда
			Элементы.ФормаОплатыЗаявки.СписокВыбора.Добавить(Перечисления.ФормыОплаты.Наличная);
		КонецЕсли;
		ЭлементСписка = Элементы.ФормаОплатыЗаявки.СписокВыбора.НайтиПоЗначению(Перечисления.ФормыОплаты.ПустаяСсылка());
		Если ЭлементСписка = Неопределено Тогда
			Элементы.ФормаОплатыЗаявки.СписокВыбора.Добавить(Перечисления.ФормыОплаты.ПустаяСсылка(), "Наличными или безналичными");
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		ЭлементСписка = Элементы.ФормаОплаты.СписокВыбора.НайтиПоЗначению("Любая");
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ФормаОплаты.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Элементы.ФормаОплатыЗаявки.СписокВыбора.НайтиПоЗначению(Перечисления.ФормыОплаты.ПустаяСсылка());
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ФормаОплатыЗаявки.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	Иначе
		ЭлементСписка = Элементы.ФормаОплаты.СписокВыбора.НайтиПоЗначению("Любая");
		Если ЭлементСписка = Неопределено Тогда
			Элементы.ФормаОплаты.СписокВыбора.Добавить("Любая", "Наличными или безналичными");
		КонецЕсли;
		
		ЭлементСписка = Элементы.ФормаОплатыЗаявки.СписокВыбора.НайтиПоЗначению(Перечисления.ФормыОплаты.ПустаяСсылка());
		Если ЭлементСписка = Неопределено Тогда
			Элементы.ФормаОплатыЗаявки.СписокВыбора.Добавить(Перечисления.ФормыОплаты.ПустаяСсылка(), "Наличными или безналичными");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище()
	
	АдресПлатежейВХранилище = ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(
		Объект.РасшифровкаПлатежа,
		УникальныйИдентификатор
	);	
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаИзХранилища(АдресПлатежейВХранилище)

	Объект.РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОбОплатеЗаявки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДенежныеСредства.Период,
	|	ДенежныеСредства.Регистратор КАК ПлатежныйДокумент
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|ГДЕ
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств В (&МассивЗаявок)
	|	И ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДенежныеСредства.Период ВОЗР
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	(-ДенежныеСредства.СуммаОстаток) КАК НеОплачено
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|		ЗаявкаНаРасходованиеДенежныхСредств В (&МассивЗаявок)
	|	) КАК ДенежныеСредства
	|");
	
	МассивЗаявок = Объект.ВедомостиНаВыплатуЗарплаты.Выгрузить(, "Ведомость").ВыгрузитьКолонку("Ведомость");
	МассивЗаявок.Добавить(Объект.Ссылка);
	Запрос.УстановитьПараметр("МассивЗаявок", МассивЗаявок);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ПлатежныйДокумент = Неопределено;
	СписокДокументовОплаты.Очистить();
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ПлатежныйДокумент = Выборка.ПлатежныйДокумент;
	Иначе
		Пока Выборка.Следующий() Цикл
			СписокДокументовОплаты.Добавить(Выборка.ПлатежныйДокумент);
		КонецЦикла;
	КонецЕсли;
	
	ТекстНеОплачено = "";
	Выборка = МассивРезультатов[1].Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.НеОплачено <> 0 Тогда;
			ТекстНеОплачено = "Не оплачено: "
				+ ФормированиеПечатныхФорм.ФорматСумм(
					Выборка.НеОплачено,
					Объект.Валюта
				);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПлатежныйДокумент) Тогда
		Элементы.ПлатежныйДокумент.Видимость = Истина;
	Иначе
		Элементы.ПлатежныйДокумент.Видимость = Ложь;
	КонецЕсли;
	
	Если СписокДокументовОплаты.Количество() > 0 Тогда
		Элементы.НадписьОткрытьДокументыОплаты.Видимость = Истина;
		Элементы.НадписьОткрытьДокументыОплаты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Открыть документы оплаты (%1)'"),
			СписокДокументовОплаты.Количество()
		);
	Иначе
		Элементы.НадписьОткрытьДокументыОплаты.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДокументаПоФормеОплаты()
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
			Получатель = Объект.ПодотчетноеЛицо;
		Иначе
			Получатель = Объект.Контрагент;
		КонецЕсли;
		Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			Получатель,
			Объект.Валюта
		);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Объект.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			Объект.Организация,
			Объект.Валюта
		);
	КонецЕсли;
    Если Не ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Касса = Справочники.Кассы.ПолучитьКассуПоУмолчанию(
			Объект.Организация,
			Объект.Валюта
		);
	КонецЕсли;
    Если Не ЗначениеЗаполнено(Объект.БанковскийСчетПолучатель) Тогда
		Объект.БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			Объект.ОрганизацияПолучатель,
			Объект.Валюта
		);
	КонецЕсли;
    Если Не ЗначениеЗаполнено(Объект.КассаПолучатель) Тогда
		Объект.КассаПолучатель = Справочники.Кассы.ПолучитьКассуПоУмолчанию(
			Объект.ОрганизацияПолучатель,
			Объект.Валюта
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДоговорПоУмолчаниюСервер()
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		
		ХозяйственнаяОперацияДоговора = Новый Массив;
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
			ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
			ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
			ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
			ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
			ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
		КонецЕсли;
		ДоговорКонтрагента = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
			ДоговорКонтрагента,
			Партнер,
			Объект.Контрагент,
			Объект.Организация,
			ХозяйственнаяОперацияДоговора,
			, // ВалютаВзаиморасчетов
			, // Соглашение
			Истина // ПорядокРасчетовПоДоговорам			
		);
		
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(ДоговорКонтрагента, , Объект.БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьПартнераПоУмолчаниюСервер(Контрагент, Партнер)
	
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьНазначениеПлатежаСписокДокументовСервер(ВыделенныйТекст)

	ТекстНазначенияПлатежа = ДенежныеСредстваСервер.ПолучитьТекстНазначенияПлатежа(Объект, "СписокДокументов");
	
	ВыделенныйТекст = " " + ТекстНазначенияПлатежа;

КонецПроцедуры

&НаСервере
Процедура ВставитьНазначениеПлатежаНДС18Сервер(ВыделенныйТекст)

	ТекстНазначенияПлатежа = ДенежныеСредстваСервер.ПолучитьТекстНазначенияПлатежа(Объект, "НДС18");
	
	ВыделенныйТекст = " " + ТекстНазначенияПлатежа;

КонецПроцедуры

&НаСервере
Процедура ВставитьНазначениеПлатежаНДС10Сервер(ВыделенныйТекст)

	ТекстНазначенияПлатежа = ДенежныеСредстваСервер.ПолучитьТекстНазначенияПлатежа(Объект, "НДС10");
	
	ВыделенныйТекст = " " + ТекстНазначенияПлатежа;

КонецПроцедуры

&НаСервере
Процедура ВставитьНазначениеПлатежаБезНДССервер(ВыделенныйТекст)

	ТекстНазначенияПлатежа = ДенежныеСредстваСервер.ПолучитьТекстНазначенияПлатежа(Объект, "БезНДС");
	
	ВыделенныйТекст = " " + ТекстНазначенияПлатежа;

КонецПроцедуры

&НаСервере
Процедура ВставитьНазначениеПлатежаИзБанковскогоСчетаКонтрагентаСервер(ВыделенныйТекст = Неопределено)

	ТекстНазначенияПлатежа = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(Объект.БанковскийСчетКонтрагента).ТекстНазначения;

	Если ВыделенныйТекст <> Неопределено Тогда
		ВыделенныйТекст = " " + ТекстНазначенияПлатежа;
	ИначеЕсли ЗначениеЗаполнено(Объект.НазначениеПлатежа) Тогда
		Объект.НазначениеПлатежа = Объект.НазначениеПлатежа + "
								   |" + ТекстНазначенияПлатежа;
	Иначе
		Объект.НазначениеПлатежа = ТекстНазначенияПлатежа;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораОрганизации()
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоВзаимосвязанные"));
	КонецЕсли;
	
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораОрганизацииПолучателя()
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоВзаимосвязанные"));
		МассивПараметров.Добавить(Новый ПараметрВыбора("Организация", Объект.Организация));
	КонецЕсли;
	
	Элементы.ОрганизацияПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИОчиститьОрганизацию()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		И Не Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация) Тогда
		Объект.Организация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИОчиститьОрганизациюПолучатель()
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Объект.Организация, Объект.ОрганизацияПолучатель) Тогда
		Объект.ОрганизацияПолучатель = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБанковскийСчетИКассуПоОрганизации(Организация)
	
	// Заполним банковский счет и кассу в зависимости от органиазции
	СвойстваАвтозаполнения = Новый Структура("Организация, БанковскийСчет, Касса", Объект.Организация);
	
	ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(Объект.Ссылка, СвойстваАвтозаполнения);
	
	ЗаполнитьЗначенияСвойств(Объект, СвойстваАвтозаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВедомостиПоОстаткамНаСервере()
	
	Если Не Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
		ВызватьИсключение НСтр("ru='Не используется начисление зарплаты'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВалютаПлатежаСервер()
	
	Результат = Объект.Валюта;
	Если Объект.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная Тогда
		Если ЗначениеЗаполнено(Объект.Касса) Тогда
			Результат = Объект.Касса.ВалютаДенежныхСредств;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			Результат = Объект.БанковскийСчет.ВалютаДенежныхСредств;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, ЭлементБанковскийСчетКонтрагента) Экспорт
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта"));
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ПодотчетноеЛицо"));
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент"));
	КонецЕсли;
	
	ЭлементБанковскийСчетКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента()

&НаСервере
Процедура УстановитьПараметрыВыбораБанковскогоСчетаПолучателя(Объект, ЭлементБанковскийСчет) Экспорт
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		Если ЗначениеЗаполнено(Объект.ВалютаКонвертации) Тогда
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.ВалютаКонвертации"));
		КонецЕсли;
	ИначеЕсли Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта"));
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
	 И Объект.Свойство("ОрганизацияПолучатель")
	 И ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ОрганизацияПолучатель"));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		
	КонецЕсли;
	
	ЭлементБанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	МассивПараметров.Очистить();
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация))));
	КонецЕсли;
	
	ЭлементБанковскийСчет.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораБанковскогоСчетаПолучателя()

&НаСервере
Процедура ПересчетСуммДокументаВВалюту(ТекущаяВалюта)
	
	ДенежныеСредстваСервер.ПересчетСуммДокументаВВалюту(
		Объект,
		ТекущаяВалюта,
		Объект.Валюта
	);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммуПоТекущейВедомости()
	
	Если Не Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
		ВызватьИсключение НСтр("ru='Не используется начисление зарплаты'");
	КонецЕсли;
	
КонецПроцедуры

    //{ ООО "АСТЭК" по заказу ООО "ПаксМед". Разработчик: Бурыкин Александр Дата: 18.01.2014
	//
  	&НаКлиенте
Процедура акПроцентОплатыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)	
	    ПересчитатьПроцентИСуммуОплаты(Текст);	
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована");
КонецПроцедуры
	//} 
	
//{ ООО "АСТЭК" по заказу ООО "ПаксМед". Разработчик: Бурыкин Александр Дата: 18.01.2014	
	&НаКлиенте
Процедура ПересчитатьПроцентИСуммуОплаты(ЗначениеПоля)
	
	Если Найти(ЗначениеПоля,"%") >0 Тогда
		Попытка
			Сумма=Число(СтрЗаменить(ЗначениеПоля,"%",""));
			Объект.акПроцентОплаты = Сумма;
			Объект.акСуммаОплаты  = Объект.СуммаДокумента*Сумма/100; 
			Объект.акКОплате = Объект.акСуммаОплаты;

		Исключение
			Предупреждение("Ввведено некоректное значение!");
			Объект.акСуммаОплаты=0;
			Объект.акПроцентОплаты=0;
			Объект.акКОплате = Объект.акСуммаОплаты;

		КонецПопытки;
	Иначе
		Попытка
			Сумма=Число(ЗначениеПоля);
			Объект.акСуммаОплаты=Сумма;
			Объект.акПроцентОплаты = Объект.акСуммаОплаты/Объект.СуммаДокумента*100;
			Объект.акКОплате = Объект.акСуммаОплаты;

		Исключение
			Предупреждение("Ввведено некоректное значение!");
			Объект.акСуммаОплаты=0;
			Объект.акПроцентОплаты=0;
			Объект.акКОплате = Объект.акСуммаОплаты;

		КонецПопытки;		
	КонецЕсли; 
КонецПроцедуры

//} 


//{ ООО "АСТЭК" по заказу ООО "ПаксМед". Разработчик: Бурыкин Александр Дата: 06.02.2014
&НаКлиенте
Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если  НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Сумма  = ПолучитьСумму(Элемент.ТекущиеДанные.Заказ);  
	КонецЕсли;
	Объект.СуммаДокумента =  Объект.РасшифровкаПлатежа.Итог("Сумма");
КонецПроцедуры

Функция ПолучитьСумму(СсылкаНаЗаказ)
	ЗаказПоставщикуОбъект = СсылкаНаЗаказ.получитьОбъект();

	       Сумма =  ЗаказПоставщикуОбъект.суммаДокумента;
	   Возврат Сумма;
	КонецФункции
//} 



