///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НомерВПределахДня = ДатаДокумента(Объект.Дата) - НачалоДня(ДатаДокумента(Объект.Дата)) + 1;
	Иначе
		НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокумента(Объект.Дата), Объект.Ссылка);
		Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
		Объект.ДатаНачалаДействия = Объект.Дата;
	КонецЕсли;
	
	Элементы.НомерВПределахДня.Видимость = НомерВПределахДня <> 1;
	
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
		
	УстановитьДоступностьКомандБуфераОбмена();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НомерВПределахДня = ДатаДокумента(Объект.Дата) - НачалоДня(ДатаДокумента(Объект.Дата)) + 1;
	Иначе
		НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокумента(Объект.Дата), Объект.Ссылка);
		Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
		Объект.ДатаНачалаДействия = Объект.Дата;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда	
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборПоТоварнымКатегориям.Форма.ПодборПоКатегориям" Тогда	
		ОбработкаВыбораПодборПоКатегориямНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокумента(Объект.Дата), Объект.Ссылка);
	Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
	Объект.ДатаНачалаДействия = Объект.Дата;
	Элементы.НомерВПределахДня.Видимость = НомерВПределахДня <> 1;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВПределахДняПриИзменении(Элемент)
	
	Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
	Объект.ДатаНачалаДействия = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	ОперацияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ТОВАРЫ

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	ИДТекущейСтроки = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	Если НоменклатураУжеДобавлена(ИДТекущейСтроки) Тогда
		Возврат;
	КонецЕсли;
	ТоварыНоменклатураПриИзмененииСервер(ИДТекущейСтроки);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦенПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если НЕ ВидЦенМожетИспользоваться(ТекущаяСтрока.ВидЦены) Тогда
		ТекущаяСтрока.ВидЦены = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.Номенклатура = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// Основной вариант подбора в документ
&НаКлиенте
Процедура ОткрытьПодборПоКатегориям(Команда)
	Отказ = Ложь;
	ПроверитьВозможностьПодбора(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НачальнаяСтраница", "СтраницаПодборТоваров");
	ПараметрыФормы.Вставить("ОбъектПланирования", Объект.ОбъектПланирования);
	ПараметрыФормы.Вставить("Операция", Объект.Операция);
	ПараметрыФормы.Вставить("Стадия", Объект.Стадия);
	ПараметрыФормы.Вставить("ДатаНачалаДействия", Объект.ДатаНачалаДействия);
	ПараметрыФормы.Вставить("ФормироватьДеревоПриОткрытии", Истина);
	ПараметрыФормы.Вставить("РежимПодбора", Истина);
	
	ОткрытьФорму("Обработка.ПодборПоТоварнымКатегориям.Форма.ПодборПоКатегориям", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	ПроверитьВозможностьПодбора(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'изменение ассортимента'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",       Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество",     Истина);
	ПараметрыФормы.Вставить("Документ ",                               Объект.Ссылка);
	ПараметрыФормы.Вставить("Заголовок",                               ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                    ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтбору(Команда)
	Отказ = Ложь;
	ПроверитьВозможностьПодбора(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("УникальныйИдентификатор", УникальныйИдентификатор);
	АдресВоВременномХранилище = ОткрытьФормуМодально("Обработка.ПодборТоваровПоОтбору.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	Если ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
		ДобавитьТоварыИзВременногоХранилищаНаСервере(АдресВоВременномХранилище, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоАссортиментуФормата(Команда)
	ПараметрыЗаполнения=Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяКоманды","ЗаполнитьПоАссортиментуФормата");
	ЗаполнитьТоварыПоЗапросуНаКлиенте(ПараметрыЗаполнения);	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСкладскимОстаткамИОборотам(Команда)
	ПараметрыЗаполнения=Новый Структура;
	ПараметрыЗаполнения.Вставить("ИмяКоманды","ЗаполнитьПоСкладскимОстаткамИОборотам");
	ЗаполнитьТоварыПоЗапросуНаКлиенте(ПараметрыЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРольДляВсехТоваров(Команда)
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Роль не может быть заполнена'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		Предупреждение(ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	ВыбраннаяРоль = ОткрытьФормуМодально("Перечисление.РолиАссортимента.ФормаВыбора", , ЭтаФорма);
	Если ВыбраннаяРоль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьЗначениеРеквизитаВсемСтрокам("РольАссортимента", ВыбраннаяРоль);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидЦенДляВсехТоваров(Команда)
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Вид цен не может быть заполнен'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", "Товары");
		Предупреждение(ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	ПараметрыВыбора = Новый Структура("Отбор", Новый Структура("ИспользоватьПриПродаже",Истина));
	ВыбранныйВидЦен = ОткрытьФормуМодально("Справочник.ВидыЦен.ФормаВыбора", ПараметрыВыбора, ЭтаФорма);
	Если ВыбранныйВидЦен = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ВидЦенМожетИспользоваться(ВыбранныйВидЦен) Тогда
		УстановитьЗначениеРеквизитаВсемСтрокам("ВидЦены", ВыбранныйВидЦен);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	Если ОбщегоНазначенияУТКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура сообщает о необходимости заполнения реквизитов документа при вызове подбора
//	Параметры:
//	Отказ - Булево
&НаКлиенте
Процедура ПроверитьВозможностьПодбора(Отказ)
	
	ОчиститьСообщения();
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачалаДействия) Тогда
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Действует с"" не заполнено'"), Объект.Ссылка, "Объект.ДатаНачалаДействия",,Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Стадия) Тогда
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Операция"" не заполнено'"), Объект.Ссылка, "Объект.Операция",,Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ОбъектПланирования) Тогда
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Формат магазина"" не заполнено'"), Объект.Ссылка, "Объект.ОбъектПланирования",,Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Функция определяет режим заполнения табличной части "Товары"
&НаКлиенте
Функция ОпределитьРежимЗаполнения()
	ВыбранныйРежим=0;
	Если Объект.Товары.Количество()=0 Тогда
		ВыбранныйРежим=1;
	Иначе
		ТекстВопроса = Нстр("ru='Табличная часть содержит строки.'") + Символы.ПС + НСтр("ru='Очистить табличную часть?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВыбранныйРежим=1;
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			ВыбранныйРежим=2;
		КонецЕсли;
	КонецЕсли;
	Возврат ВыбранныйРежим;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТоварыПоЗапросуНаКлиенте(ПараметрыЗаполнения)
	
	РежимЗаполнения=ОпределитьРежимЗаполнения();
	Если РежимЗаполнения=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ИмяКоманды="ЗаполнитьПоАссортиментуФормата" Тогда
		ВыбранныйФормат = ОткрытьФормуМодально("Справочник.ФорматыМагазинов.ФормаВыбора", , ЭтаФорма);
		Если ВыбранныйФормат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыЗаполнения.Вставить("ОбъектПланирования",ВыбранныйФормат);
		ПараметрыЗаполнения.Вставить("Период",НачалоДня(Объект.ДатаНачалаДействия));
			
	ИначеЕсли ПараметрыЗаполнения.ИмяКоманды="ЗаполнитьПоСкладскимОстаткамИОборотам" Тогда
		ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
		ДатаПериода = Объект.Дата;
		ДиалогПериода.Период = Новый СтандартныйПериод(НачалоМесяца(ДатаПериода), ДатаПериода);
		Если ДиалогПериода.Редактировать() Тогда 
		    ВыбранныйПериод = ДиалогПериода.Период;
			ПараметрыЗаполнения.Вставить("ДатаНачала",НачалоДня(ВыбранныйПериод.ДатаНачала));
			ПараметрыЗаполнения.Вставить("ДатаКонца",КонецДня(ВыбранныйПериод.ДатаОкончания));
		Иначе
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ОбъектПланирования) Тогда
			ВыбранныйФормат = ОткрытьФормуМодально("Справочник.ФорматыМагазинов.ФормаВыбора", , ЭтаФорма);
			Если ВыбранныйФормат = Неопределено Тогда
				Возврат;
			КонецЕсли;
			Объект.ОбъектПланирования = ВыбранныйФормат;
		КонецЕсли;
		ПараметрыЗаполнения.Вставить("ФорматМагазина",Объект.ОбъектПланирования);
	КонецЕсли;
	ПараметрыЗаполнения.Вставить("РежимЗаполнения",РежимЗаполнения);
	ЗаполнитьТоварыПоЗапросуНаСервере(ПараметрыЗаполнения);
КонецПроцедуры

// Процедура заполняет товары на основании данных запроса
// запрос формируется в зависимости от имени команды заполнения
// Параметры: 
//  	ПараметрыЗаполнения - структура параметров для выполнения команды
&НаСервере
Процедура ЗаполнитьТоварыПоЗапросуНаСервере(ПараметрыЗаполнения)
	
	Если ПараметрыЗаполнения.РежимЗаполнения=1 Тогда
		Объект.Товары.Очистить();
	Иначе
		ПараметрыЗаполнения.Вставить("МассивТоваров",Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	КонецЕсли;
	//
	Запрос=Новый Запрос;
	ТекстЗапроса=СформироватьТекстДляКоманды(ПараметрыЗаполнения.ИмяКоманды,ПараметрыЗаполнения.РежимЗаполнения);
	Запрос.Текст=ТекстЗапроса;
	//
	Для Каждого Параметр ИЗ ПараметрыЗаполнения Цикл
		Если Параметр.Ключ="РежимЗаполнения" ИЛИ Параметр.Ключ="ИмяКоманды" Тогда
			Продолжить;
		КонецЕсли;
		Запрос.УстановитьПараметр(Параметр.Ключ,Параметр.Значение);
	КонецЦикла;
	Если ПараметрыЗаполнения.ИмяКоманды="ЗаполнитьПоСкладскимОстаткамИОборотам" Тогда
		Запрос.УстановитьПараметр("ВидЦенФормата", Объект.ОбъектПланирования.РозничныйВидЦены);
	КонецЕсли;
	//
	Результат=Запрос.Выполнить();
	Выборка=Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "Номенклатура, РольАссортимента, ВидЦены");
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует текст запроса, используемого для заполнения товаров
&НаСервере
Функция СформироватьТекстДляКоманды(ИмяКомандыЗаполнения,РежимЗаполнения)
	
	ТекстЗапроса="";
	
	Если ИмяКомандыЗаполнения="ЗаполнитьПоСкладскимОстаткамИОборотам" Тогда
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		             |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура КАК Номенклатура,
		             |	ЗНАЧЕНИЕ(Перечисление.РолиАссортимента.ДополнительныйАссортимент) КАК РольАссортимента,
		             |	&ВидЦенФормата КАК ВидЦены
		             |ИЗ
		             |	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(&ДатаНачала, &ДатаКонца, , , Склад.ФорматМагазина = &ФорматМагазина"+?(РежимЗаполнения=2," И (НЕ Номенклатура В (&МассивТоваров))","")+") КАК ТоварыНаСкладахОстаткиИОбороты
		             |
		             |СГРУППИРОВАТЬ ПО
		             |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура
		             |
		             |УПОРЯДОЧИТЬ ПО
		             |	ТоварыНаСкладахОстаткиИОбороты.Номенклатура.Наименование";
		
	ИначеЕсли ИмяКомандыЗаполнения="ЗаполнитьПоАссортиментуФормата" Тогда
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
		             |	СправочникНоменклатура.Ссылка КАК Номенклатура,
		             |	Ассортимент.РольАссортимента КАК РольАссортимента,
		             |	Ассортимент.ВидЦены КАК ВидЦены
		             |ИЗ
		             |	Справочник.Номенклатура КАК СправочникНоменклатура
		             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент КАК Ассортимент
		             |		ПО СправочникНоменклатура.Ссылка = Ассортимент.Номенклатура
		             |			И (Ассортимент.ОбъектПланирования = &ОбъектПланирования)
		             |			И (Ассортимент.РазрешеныЗакупки)
		             |			И (Ассортимент.Регистратор В
		             |				(ВЫБРАТЬ ПЕРВЫЕ 1
		             |					Ассорти.Регистратор
		             |				ИЗ
		             |					РегистрСведений.Ассортимент КАК Ассорти
		             |				ГДЕ
		             |					Ассорти.Номенклатура = СправочникНоменклатура.Ссылка
		             |					И Ассорти.ОбъектПланирования = &ОбъектПланирования
		             |					И Ассорти.Период <= &Период
		             |				УПОРЯДОЧИТЬ ПО
		             |					Ассорти.Период УБЫВ,
		             |					Ассорти.ДатаРегистратора УБЫВ,
		             |					Ассорти.Регистратор УБЫВ))
		             |"+?(РежимЗаполнения=2," ГДЕ НЕ СправочникНоменклатура.Ссылка В (&МассивТоваров)","")+"
		             |УПОРЯДОЧИТЬ ПО
		             |	СправочникНоменклатура.Наименование";
	Иначе //такой команды не предусмотрено - надо вызвать исключение
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Неизвестный вариант заполнения: %1'"),
									ИмяКомандыЗаполнения);
		ВызватьИсключение(ТекстСообщенияОбОшибке);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура заполняет товары из подбора
// Параметры: 
//  	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение.АдресТоваровВХранилище) Тогда
		ДобавитьТоварыИзВременногоХранилищаНаСервере(ВыбранноеЗначение.АдресТоваровВХранилище,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет товары из подбора по категориям
// Параметры: 
//  	ВыбранноеЗначение - Структура
&НаСервере
Процедура ОбработкаВыбораПодборПокатегориямНаСервере(ВыбранноеЗначение)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение.АдресТоваровВХранилище) Тогда
		ДобавитьТоварыИзВременногоХранилищаНаСервере(ВыбранноеЗначение.АдресТоваровВХранилище, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТоварыИзВременногоХранилищаНаСервере(АдресВоВременномХранилище, ДополнятьТаблицуТоваров)
	
	Если ДополнятьТаблицуТоваров Тогда
		ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
		ТаблицаТоваровДополненная = ТаблицаТоваровДополненнаяАссортиментомОбъекта(ТаблицаТоваров);
	Иначе
		ТаблицаТоваровДополненная = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	КонецЕсли;
	
	Для Каждого СтрокаТовара Из ТаблицаТоваровДополненная Цикл
		ПараметрыОтбора = Новый Структура("Номенклатура", СтрокаТовара.Номенклатура);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара, "Номенклатура, РольАссортимента, ВидЦены");
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.РольАссортимента) Тогда
				НоваяСтрока.РольАссортимента = Перечисления.РолиАссортимента.ДополнительныйАссортимент;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ВидЦены) Тогда
				НоваяСтрока.ВидЦены = Объект.ОбъектПланирования.РозничныйВидЦены;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция дополняет таблицу товаров данными регистра "Ассортимент" для текущего формата магазинов
// установленными на дату начала действия
// Параметры: 
//  	ТаблицаТоваров - ТаблицаЗначений
&НаСервере
Функция ТаблицаТоваровДополненнаяАссортиментомОбъекта(ТаблицаТоваров)
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(Ассортимент.РольАссортимента, ЗНАЧЕНИЕ(Перечисление.РолиАссортимента.ДополнительныйАссортимент)) КАК РольАссортимента,
	|	ЕСТЬNULL(Ассортимент.ВидЦены, &ВидЦенФормата) КАК ВидЦены
	|ИЗ
	|	втТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент КАК Ассортимент
	|		ПО (Ассортимент.Номенклатура = Товары.Номенклатура)
	|			И (Ассортимент.ОбъектПланирования = &ОбъектПланирования)
	|			И (Ассортимент.Регистратор В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					Ассорти.Регистратор
	|				ИЗ
	|					РегистрСведений.Ассортимент КАК Ассорти
	|				ГДЕ
	|					Ассорти.Номенклатура = Ассортимент.Номенклатура
	|					И Ассорти.ОбъектПланирования = &ОбъектПланирования
	|					И Ассорти.Период <= &НаДату
	|				УПОРЯДОЧИТЬ ПО
	|					Ассорти.Период УБЫВ,
	|					Ассорти.ДатаРегистратора УБЫВ,
	|					Ассорти.Регистратор УБЫВ))";
	Запрос.МенеджерВременныхТаблиц=МенеджерВТ;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.УстановитьПараметр("НаДату", Объект.ДатаНачалаДействия);
	Запрос.УстановитьПараметр("ОбъектПланирования", Объект.ОбъектПланирования);
	Запрос.УстановитьПараметр("ВидЦенФормата", Объект.ОбъектПланирования.РозничныйВидЦены);
	ТаблицаТоваровДополненная = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаТоваровДополненная;
КонецФункции

&НаСервере
Процедура ОперацияПриИзмененииСервер()
	
	Если Объект.Операция = Перечисления.ОперацииИзмененияАссортимента.ВводВАссортимент
		ИЛИ Объект.Операция = Перечисления.ОперацииИзмененияАссортимента.ИзменениеСостоянияАссортимента Тогда
		Объект.Стадия = Перечисления.СтадииАссортимента.РазрешеныЗакупкиИПродажи;
	ИначеЕсли Объект.Операция = Перечисления.ОперацииИзмененияАссортимента.ВводВАссортиментСОтсрочкойНачалаПродаж Тогда
		Объект.Стадия = Перечисления.СтадииАссортимента.РазрешеныТолькоЗакупки;
	ИначеЕсли Объект.Операция = Перечисления.ОперацииИзмененияАссортимента.ВыводИзАссортимента Тогда
		Объект.Стадия = Перечисления.СтадииАссортимента.РазрешеныТолькоПродажи;
	ИначеЕсли Объект.Операция = Перечисления.ОперацииИзмененияАссортимента.ПереносВАрхивОтзыв Тогда
		Объект.Стадия = Перечисления.СтадииАссортимента.ЗапрещеныЗакупкиИПродажи;
	Иначе
		Объект.Стадия = Перечисления.СтадииАссортимента.ПустаяСсылка();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Некорректная операция'"),
			Объект.Ссылка,
			"Объект.Операция",
			,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииСервер(ИДТекущейСтроки)
	ТекущаяСтрока=Объект.Товары.НайтиПоИдентификатору(ИДТекущейСтроки);
	СтруктураАссортимента=АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(ТекущаяСтрока.Номенклатура,
																						 Объект.ОбъектПланирования,
																						 Объект.ДатаНачалаДействия);
	
	ТекущаяСтрока.РольАссортимента = ?(ЗначениеЗаполнено(СтруктураАссортимента.РольАссортимента),
															СтруктураАссортимента.РольАссортимента,
															Перечисления.РолиАссортимента.ДополнительныйАссортимент);
	Если ЗначениеЗаполнено(СтруктураАссортимента.ВидЦены) Тогда
		ТекущаяСтрока.ВидЦены = СтруктураАссортимента.ВидЦены;
	Иначе
		ТекущаяСтрока.ВидЦены = Объект.ОбъектПланирования.РозничныйВидЦены;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВидЦенМожетИспользоваться(ВидЦены)
	
	Результат = Истина;
	
	Если ЗначениеЗаполнено(ВидЦены) И НЕ ВидЦены.ИспользоватьПриПродаже Тогда
		ТекстСообщения = НСтр("ru='Можно назначить только виды цен, используемые при продаже.'");
		Объект.Стадия=Перечисления.СтадииАссортимента.ПустаяСсылка();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			,
			,
			Истина);
		Результат = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЦены)
		И ЗначениеЗаполнено(Объект.ОбъектПланирования)
		И ВидЦены.ЦенаВключаетНДС <> Объект.ОбъектПланирования.РозничныйВидЦены.ЦенаВключаетНДС Тогда
		ТекстСообщения = НСтр("ru='Метод учета НДС выбранного вида цен должен соответствовать методу учета НДС вида цен формата.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			,
			,
			Истина
		);
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьЗначениеРеквизитаВсемСтрокам(ИмяРеквизита, УстанавливаемоеЗначение)
	
	Для Каждого СтрокаТоваров ИЗ Объект.Товары Цикл
		СтрокаТоваров[ИмяРеквизита] = УстанавливаемоеЗначение;
	КонецЦикла;
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// Работа с буфером обмена 

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	ХранилищаНастроек.ХранилищеБуфераОбмена.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = ХранилищаНастроек.ХранилищеБуфераОбмена.ПолучитьСтрокиИзБуфераОбмена();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура", СтрокаТовара.Номенклатура);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ТекущаяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
			
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.РольАссортимента) Тогда
				ТекущаяСтрока.РольАссортимента = Перечисления.РолиАссортимента.ДополнительныйАссортимент;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
				ТекущаяСтрока.ВидЦены = Объект.ОбъектПланирования.РозничныйВидЦены;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ХранилищаНастроек.ХранилищеБуфераОбмена.БуферОбменаПустой());
		
	Иначе
		
		МассивЭлементов.Добавить("ТоварыСкопироватьСтроки");
		МассивЭлементов.Добавить("ТОварыКонтекстноеМенюСкопироватьСтроки");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

&НаСервере
Функция НоменклатураУжеДобавлена(ИДТекущейСтроки)
	Найдено = Ложь;
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИДТекущейСтроки);
	Если ТекущаяСтрока <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("Номенклатура", ТекущаяСтрока.Номенклатура);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		НомерСтроки = ТекущаяСтрока.НомерСтроки;
		Если НайденныеСтроки.Количество() > 1 Тогда
			Найдено = Истина;
			Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
				Если НайденнаяСтрока.НомерСтроки <> ТекущаяСтрока.НомерСтроки Тогда
					НомерСтроки = НайденнаяСтрока.НомерСтроки;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Найдено Тогда
			ТекстСообщения = НСтр("ru='Товар ""%1"" уже содержится в строке %2'");
			НаименованиеНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "Наименование");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, НаименованиеНоменклатуры, НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", НомерСтроки, "Номенклатура"),
				"",
				Истина
			);
			ТекущаяСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Возврат Найдено;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьДатуДокумента(ДатаДокумента, НомерВПределахДня)
	
	Возврат НачалоДня(ДатаДокумента) + НомерВПределахДня - 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДатаДокумента(Дата)
	
	Возврат ?(ЗначениеЗаполнено(Дата), Дата, НачалоДня(ТекущаяДата()));
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьНомерВПределахДня(ДатаДокумента, Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ИзменениеАссортимента.Дата) КАК Дата
	|ИЗ
	|	Документ.ИзменениеАссортимента КАК ИзменениеАссортимента
	|ГДЕ
	|	ИзменениеАссортимента.Ссылка <> &Ссылка
	|	И ИзменениеАссортимента.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаДокумента, ДЕНЬ)");
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() И Выборка.Дата <> Null Тогда
		// Начало дня - 0 секунда. Так как как минимум один документ уже существует, то
		// нужно прибавить 1 (0 секунда соответствует номеру документа 1).
		// Так же прибавим единицу, так как нам требуется номер слудующего документа.
		Возврат Выборка.Дата - НачалоДня(ДатаДокумента) + 2;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

