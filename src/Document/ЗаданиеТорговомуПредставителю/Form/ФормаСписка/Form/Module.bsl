////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ДатаАктуальности = ТекущаяДата();
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	УстановитьПараметрыСписка();
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Статус", Статус, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Куратор", Куратор, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "НаличиеЗаказов", НаличиеЗаказов, СтруктураБыстрогоОтбора);
	
	ОтборыСписковКлиентСервер.ОтборПоАктуальностиПриСозданииНаСервере(Список, Актуальность, ДатаАктуальности, СтруктураБыстрогоОтбора);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ДатаАктуальности = ТекущаяДата();
	
	УстановитьПараметрыСписка();
	
	Если СтруктураБыстрогоОтбора=Неопределено ИЛИ Не СтруктураБыстрогоОтбора.Свойство("Куратор") Тогда
		ЗначениеИзНастройки = Настройки.Получить("Куратор");
		Если ЗначениеЗаполнено(ЗначениеИзНастройки) Тогда
			Куратор = ЗначениеИзНастройки;
		КонецЕсли;
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, "Статус", Статус, СтруктураБыстрогоОтбора, Настройки);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, "Куратор", Куратор, СтруктураБыстрогоОтбора, Настройки);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, "НаличиеЗаказов", НаличиеЗаказов, СтруктураБыстрогоОтбора, Настройки);
	
	ОтборыСписковКлиентСервер.ОтборПоАктуальностиПриЗагрузкеИзНастроек(Список, Актуальность, ДатаАктуальности, СтруктураБыстрогоОтбора, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура БыстрыеОтборыСтатусПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Статус", Статус, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Статус));
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыКураторПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Куратор", Куратор, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Куратор));
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыКураторНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если Элемент.СписокВыбора.Количество() = 0 Тогда
		ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(Элемент.СписокВыбора, ПолучитьСписокВыбораОтбораПоКураторуСервер());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыАктуальностьПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Просрочен", Актуальность = "Просроченные", ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Актуальность));
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыНаличиеЗаказовПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "НаличиеЗаказов", НаличиеЗаказов, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(НаличиеЗаказов));
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Элементы.Список.ТекущаяСтрока = МассивСсылок[0];
		ОткрытьЗначение(МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаданиеТорговомуПредставителю.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

 &НаСервереБезКонтекста
Функция ПолучитьСписокВыбораОтбораПоКураторуСервер()
	
	Возврат ОбщегоНазначенияУТ.ПолучитьСписокПользователейПоМассивуРолей(
		Документы.ЗаданиеТорговомуПредставителю.ИменаРолейСПравомДобавления()
	);
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыСписка()
	
	Список.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности",ТекущаяДата());
	Список.Параметры.УстановитьЗначениеПараметра("ПустаяДата",'00010101000000');
	
КонецПроцедуры