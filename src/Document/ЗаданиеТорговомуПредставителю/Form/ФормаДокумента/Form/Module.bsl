&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ИспользоватьРучныеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьСоглашенияСКлиентами    = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		
		Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
			ЗаполнитьУсловияПродаж();
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЭлементов();
	
	Если НЕ Объект.ДетализацияПоНоменклатуре Тогда
		Элементы.ТоварыКоличествоУпаковок.Заголовок = НСтр("ru='Количество'");
	КонецЕсли;
	
	УстановитьДоступностьКомандБуфераОбмена();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(ЭтаФорма, "Товары", "Номенклатура,Характеристика,Количество");
	
	Если ВозможныКоллизииСМобильнымПриложением() Тогда
		ТекстВопроса = НСтр("ru='Запись задания, которое было ранее подготовлено или отработано,%ПереводСтроки%может привести к коллизиям при обмене с мобильным приложением.%ПереводСтроки%Продолжить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса,"%ПереводСтроки%",Символы.ПС);
		ОтветПользователя = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		
		Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи()
	
	Оповестить("Запись_ЗаданиеТорговомуПредставителю",Объект.Партнер,Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
	Иначе
		Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ЗаданиеТорговомуПредставителю") ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
				
				Если Объект.Товары.Количество()>0 Тогда
					ТекстВопроса = НСтр("ru='Ранее заполненный состав задания будет очищен. Продолжить?'");
					ОтветПользователя = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
					
					Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
				ОбработатьЗаполнениеНаОсновании(ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		ИначеЕсли ИмяСобытия = "DataCollectionTerminal" Тогда
			ОбработатьШтрихкоды(Параметр);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент,СтандартнаяОбработка,Объект.Партнер,Объект.Соглашение,Объект.Дата,,Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбранноеВремя = РаботаСДиалогамиКлиент.ВыбратьВремя(ЭтаФорма, Элемент, Объект.ВремяНачала);
	
	Если ВыбранноеВремя = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Объект.ВремяНачала = ВыбранноеВремя;

КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ВыбранноеВремя = РаботаСДиалогамиКлиент.ВыбратьВремя(ЭтаФорма, Элемент, Объект.ВремяОкончания);
	
	Если ВыбранноеВремя = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Объект.ВремяОкончания = ВыбранноеВремя;

КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено (Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииСоглашенияСервер();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПродажиКлиент.ОбработкаВыбораДоговораКонтрагента(ВыбранноеЗначение, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикОплатыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
		ПриИзмененииГрафикаОплатыСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	ТребуетсяПересчетТабличныхЧастей = НеобходимПересчетТЧВВалюту(Объект.Валюта);
	ТребуетсяПересчетПлановойСуммы = ТребуетсяПересчитатьПлановуюСумму(Объект.Валюта);
	
	СтараяВалюта = ВалютаДокумента;
	ВалютаДокумента = Объект.Валюта;
	
	ПересчитатьСуммы = (ТребуетсяПересчетТабличныхЧастей Или ТребуетсяПересчетПлановойСуммы);
	
	Если ПересчитатьСуммы Тогда
		ТекстСообщения = НСтр("ru='Пересчитать суммы в документе в валюту ""%Валюта%""?'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Валюта%",Объект.Валюта);
		ПересчитатьСуммы = (КодВозвратаДиалога.Да = Вопрос(ТекстСообщения,РежимДиалогаВопрос.ДаНет));
	КонецЕсли;
	
	ВалютаПриИзмененииСервер(
		СтараяВалюта,
		ПересчитатьСуммы И ТребуетсяПересчетТабличныхЧастей,
		ПересчитатьСуммы И ТребуетсяПересчетПлановойСуммы
	);
	
	Если ПересчитатьСуммы Тогда
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияОбслуживанияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.УсловияОбслуживания) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьУсловияПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ХозяйственнаяОперацияПриИзмененииСервер();
	Иначе
		ЗаполнитьУсловияПродаж();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Элементы.ТоварыОткрытьПодбор.Доступность = (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаданийТорговымПредставителям.НеПодготовлено"));
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьМногооборотнуюТаруПриИзменении(Элемент)
	
	ВернутьМногооборотнуюТаруПриИзмененииСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ЗАДАЧИ

&НаКлиенте
Процедура ЗадачиОписаниеЗадачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекстЗаголовка = НСтр("ru='Описание задачи'");
	РедактироватьТекстВОтдельнойФорме(ТекстЗаголовка, Элементы.Задачи.ТекущиеДанные.ОписаниеЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОписаниеРезультатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекстЗаголовка = НСтр("ru='Описание результата'");
	РедактироватьТекстВОтдельнойФорме(ТекстЗаголовка, Элементы.Задачи.ТекущиеДанные.ОписаниеРезультата);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены необходимо выбрать вид цены ""<произвольная>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","План");
	
	СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","План");
	СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПланПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","План");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураПараметров = Новый Структура("ИспользоватьРучныеСкидки");
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПараметров);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПричинаОтменыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.Отменено = ЗначениеЗаполнено(ТекущаяСтрока.ПричинаОтмены);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПриИзмененииПричиныОтменыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекстЗаголовка = НСтр("ru='Комментарий'");
	РедактироватьТекстВОтдельнойФорме(ТекстЗаголовка, Элементы.Товары.ТекущиеДанные.Комментарий);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоДаннымИсторииПродаж(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДетализацияПоНоменклатуре", Объект.ДетализацияПоНоменклатуре);
	СтруктураПараметров.Вставить("Партнер", Объект.Партнер);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	
	ФормаНастройкиЗаполнения = ПолучитьФорму("Документ.ЗаданиеТорговомуПредставителю.Форма.ЗаполнениеПоДаннымИсторииПродаж", СтруктураПараметров);
	
	Результат = ФормаНастройкиЗаполнения.ОткрытьМодально();
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество()>0 Тогда
		
		ТекстВопроса = НСтр("ru='Ранее заполненный состав задания будет очищен. Продолжить?'");
		ОтветПользователя = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
		Если ОтветПользователя = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.Товары.Очистить();
	
	НачалоПериода = ФормаНастройкиЗаполнения.ПериодАнализаИсторииПродаж.ДатаНачала;
	КонецПериода = ФормаНастройкиЗаполнения.ПериодАнализаИсторииПродаж.ДатаОкончания;
	Период = ПолучитьПериодДляКомпоновки(ФормаНастройкиЗаполнения.Период);
	ДетализацияПоХарактеристикам = ФормаНастройкиЗаполнения.ДетализацияПоХарактеристикам;
	
	ЗаполнитьСоставЗаданияПоДаннымИсторииПродажСервер(НачалоПериода, КонецПериода, Период, ДетализацияПоХарактеристикам, ФормаНастройкиЗаполнения.КомпоновщикНастроек);
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);	
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ЗаголовокФормыВвода = НСтр("ru='Введите количество (план) в новой строке.'");
	ИмяПоляКоличество = "КоличествоУпаковокПлан";
	
	РазрешитьНулевоеКоличество = Истина;
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы,
																ТаблицаФормы,
																ИмяПоляКоличество,
																ЗаголовокФормыВвода,
																РазрешитьНулевоеКоличество);
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КоличествоУпаковок = 0;
		НоваяСтрока.Количество         = 0;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","План");
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуЗаданияПоДаннымИсторииПродажВыполнить(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
		ТекстСообщения = НСтр("ru='Не указана валюта документа'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, "Валюта");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ДетализацияПоНоменклатуре", Объект.ДетализацияПоНоменклатуре);
	СтруктураПараметров.Вставить("Партнер", Объект.Партнер);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	
	ФормаНастройкиЗаполнения = ПолучитьФорму("Документ.ЗаданиеТорговомуПредставителю.Форма.ЗаполнениеПоДаннымИсторииПродаж", СтруктураПараметров);
	
	Результат = ФормаНастройкиЗаполнения.ОткрытьМодально();
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = ФормаНастройкиЗаполнения.ПериодАнализаИсторииПродаж.ДатаНачала;
	КонецПериода = ФормаНастройкиЗаполнения.ПериодАнализаИсторииПродаж.ДатаОкончания;
	Период = ПолучитьПериодДляКомпоновки(ФормаНастройкиЗаполнения.Период);
	
	УстановитьСуммуЗаданияПоДаннымИсторииПродаж(НачалоПериода, КонецПериода, Период, ФормаНастройкиЗаполнения.КомпоновщикНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоПредыдущемуЗаданиюВыполнить(Команда)
	
	ОткрытьФормуВыбораОснования("ЗаданиеТорговомуПредставителю");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоЗаказуВыполнить(Команда)
	
	ОткрытьФормуВыбораОснования("ЗаказКлиента");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", "Товары") Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", "Товары") Тогда
		
		ВидЦен = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, Истина);
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
			
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", "Товары") Тогда
		
		ВидЦен = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, Истина);
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
			
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	
	СуммаРучнойСкидкиНаценки = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта
	);
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, АдресВоВременномХранилище);
		
		РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
		
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Соглашение)
		ИЛИ Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "задание торговому представителю");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение",      Объект.Соглашение);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("СкрыватьПодакцизныеТовары",               Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("ОтображатьФлагСкрыватьПодакцизныеТовары", Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("Склад",           Объект.Склад);
	ПараметрыФормы.Вставить("Валюта",          Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок",       ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",            Объект.Дата);
	ПараметрыФормы.Вставить("Документ",        Объект.Ссылка);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)

	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		"Номенклатура,Характеристика,Количество");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ЗаполнитьУсловияПродаж();
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	УстановитьДоступностьГрафикаОплаты();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоглашенияСервер()
	
	ГрафикОплаты = Объект.ГрафикОплаты;
	
	ДокументПродажи = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.ЗаданиеТорговомуПредставителю"));
	ДокументПродажи.ЗаполнитьУсловияПродажПоCоглашению();
	ЗначениеВДанныеФормы(ДокументПродажи,Объект);
	
	ВалютаДокумента = Объект.Валюта;
	ХозяйственнаяОперацияПриИзмененииСервер();
	
	ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
	ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты) И ГрафикОплаты <> Объект.ГрафикОплаты;
	
	Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
		ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
	ИначеЕсли Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
		ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, Объект.Товары.Итог("СуммаСНДС"));
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	УстановитьДоступностьГрафикаОплаты();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	ЗаполнитьДоговорПоУмолчанию();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
	УстановитьДоступностьЭлементовПоОперацииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер(СтараяВалюта, ТребуетсяПересчетТабличныхЧастей, ТребуетсяПересчетПлановойСуммы)
	
	ЗаполнитьДоговорПоУмолчанию();
	ОбработкаВыбораВалюты(Объект.Валюта, СтараяВалюта, ТребуетсяПересчетТабличныхЧастей, ТребуетсяПересчетПлановойСуммы);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПричиныОтменыСервер()
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Ценообразование и скидки

&НаКлиенте
Функция НеобходимПересчетТЧВВалюту(Валюта)

	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Возврат Ложь;
	ИначеЕсли ВалютаДокумента = Валюта Тогда
		Возврат Ложь;
	ИначеЕсли Объект.Товары.Итог("Цена") = 0 И Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа") = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, АдресВоВременномХранилище)
	
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, Ложь, , Истина,,Неопределено,АдресВоВременномХранилище);

	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Ложь, Истина);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер()
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			Объект.Соглашение,
			"Цена, СтавкаНДС, ВидЦены"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ПересчитатьСуммуСУчетомРучнойСкидки",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Новый Структура("Очищать", Ложь)
		)
	);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Перезаполняет цены в документе в соответствии с выбранным видом цен
//
// Парметры:
// ВидЦен - СправочникСсылка.ВидыЦен - Вид цен, по которому будут заполнены цены в тч Товары
//
&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, ВидЦены, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			ВидЦен,
			"Цена, ВидЦены"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ПересчитатьСуммуСУчетомРучнойСкидки",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Новый Структура("Очищать", Ложь)
		)
	);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

// Перезаполняет цены в выделенных строках документа в соответствии с выбранным видом цен
//
// Парметры:
// ВидЦен - СправочникСсылка.ВидыЦен - Вид цен, по которому будут заполнены цены в тч Товары
//
&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, ВидЦены, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			ВидЦен,
			"Цена, ВидЦены"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ПересчитатьСуммуСУчетомРучнойСкидки",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Новый Структура("Очищать", Ложь)
		)
	);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подборы и обработка проверки количества

// Выполняет необходимые действия после подбора
//
&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

// Выпполняет необходимые действия после подбора
//
&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок, ВидЦены, Цена, ПроцентРучнойСкидки");
		ТекущаяСтрока.КоличествоУпаковокПлан = СтрокаТовара.КоличествоУпаковок;
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);		
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПодбора()
	
	Элементы.ТоварыОткрытьПодбор.Доступность = (Объект.Статус = Перечисления.СтатусыЗаданийТорговымПредставителям.НеПодготовлено);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Соглашение"" не заполнено'"), Объект.Ссылка, "Объект.Соглашение",,Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьКоличествоЕдиницСуффикс","План");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС",     Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Истина));
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками,Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = Неопределено;
	СтруктураДействий.ИмяКолонкиКоличество = "КоличествоУпаковокПлан";
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);

	РассчитатьИтоговыеПоказателиЗаДанияТорговомуПредставителю(ЭтаФорма);
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма, Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ВалютаДокумента = Объект.Валюта;
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.Товары,
	Новый Структура(
		"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
		Новый Структура("Номенклатура", "ТипНоменклатуры"),
		Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	
	ЗаполнитьПризнакОтмены();
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость);
	УстановитьДоступностьГрафикаОплаты();
	НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
	УстановитьДоступностьЭлементовПоОперацииСервер();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступностьЭлементов()

	Элементы.СуммаПлан.Видимость = НЕ Объект.ДетализацияПоНоменклатуре;
	Элементы.ТоварыПричинаОтмены.Видимость = Объект.ДетализацияПоНоменклатуре;
	Элементы.РассчитатьСуммуЗаданияПоДаннымИсторииПродаж.Видимость = НЕ Объект.ДетализацияПоНоменклатуре;
	Элементы.ЗаполнитьЗаданиеПоДаннымИсторииПродаж.Видимость = Объект.ДетализацияПоНоменклатуре;

	УстановитьВидимостьПлановыхПоказателей();
	УстановитьДоступностьПодбора();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПлановыхПоказателей()
	
	Элементы.ТоварыКоличествоУпаковокПлан.Видимость = Объект.ДетализацияПоНоменклатуре;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ЗаданиеТорговомуПредставителю.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	ЭтоПередачаНаКомиссию = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(Объект.ХозяйственнаяОперация, Элементы.ТоварыНоменклатура);
	
	ПродажиСервер.ЗаполнитьСписокВыбораНалогообложения(Объект.ХозяйственнаяОперация, Элементы.НалогообложениеНДС);
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("НадписьЭтапыОплаты");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Не ЭтоПередачаНаКомиссию);
	
КонецПроцедуры

// Открывает для выбора форму выбора документа основания
//
// Параметры:
//  ВидОснования - строка, указывающая на вид основания - "ЗаданиеТорговомуПредставителю" или "ЗаказКлиента"
//
&НаКлиенте
Процедура ОткрытьФормуВыбораОснования(ВидОснования)
	
	ПараметрыФормы = Новый Структура();
	
	СтруктураОтбора = Новый Структура();
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		СтруктураОтбора.Вставить("Партнер", Объект.Партнер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СтруктураОтбора.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураОтбора.Вставить("Соглашение", Объект.Соглашение);
	КонецЕсли;
	
	Если СтруктураОтбора.Количество()>0 Тогда
		ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	КонецЕсли;
	
	Если ВидОснования = "ЗаданиеТорговомуПредставителю" Тогда
		ОткрытьФормуМодально("Документ.ЗаданиеТорговомуПредставителю.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	Иначе
		ОткрытьФормуМодально("Документ.ЗаказКлиента.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;	
	
КонецПроцедуры

// Осуществляет открытие отдельной формы для редактирования текста. После
// закрытия формы изменяет значение данных элемента управления
//
// Параметры:
//  ЗаголовокФормы - заголовок, который будет отображен в форме редактирования
//  Данные - исходный текст, который подлежит редактированию
//
&НаКлиенте
Процедура РедактироватьТекстВОтдельнойФорме(ЗаголовокФормы, Данные)
	
	ФормаРедактированияТекста = ПолучитьФорму("Документ.ЗаданиеТорговомуПредставителю.Форма.РедактированиеТекста");
	ФормаРедактированияТекста.Заголовок = ЗаголовокФормы;
	ФормаРедактированияТекста.Текст = Данные;
	ФормаРедактированияТекста.ОткрытьМодально();

	Если Данные <> ФормаРедактированияТекста.Текст Тогда
		Данные = ФормаРедактированияТекста.Текст;
	КонецЕсли;

КонецПроцедуры

// Определяет периодичность виртуальной таблицы для компоновки
//
// Параметры:
//  ПериодСтрокой - период, указанный в настройках заполнения
//
&НаКлиенте
Функция ПолучитьПериодДляКомпоновки(ПериодСтрокой)

	Если ПериодСтрокой = "в среднем за неделю" Тогда
		Возврат "Неделя";
	ИначеЕсли ПериодСтрокой = "в среднем за месяц" Тогда
		Возврат "Месяц";
	Иначе
		Возврат "День";
	КонецЕсли;

КонецФункции

// Определяет необходимость пересчета плановой суммы в указанную валюту
//
// Параметры:
//  Валюта - валюта, необходимость пересчета в котороу требуется проверить
//
// Возвращаемое значение:
//  Признак необходимости пересчета. Истина - требуется пересчет, Ложь - не требуется
//
&НаКлиенте
Функция ТребуетсяПересчитатьПлановуюСумму(Валюта)
	
	Если НЕ Объект.ДетализацияПоНоменклатуре И Валюта <> ВалютаДокумента И Объект.СуммаПлан <> 0 И ЗначениеЗаполнено(Валюта) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	

КонецФункции

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Объект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
		Объект.Договор,
		Объект.Партнер,
		Объект.Контрагент,
		Объект.Организация,
		Объект.ХозяйственнаяОперация,
		Объект.Валюта,
		Объект.Соглашение
	);
	
КонецПроцедуры

// Выполняет пересчет данных документа при изменении реквизита "Валюта"
//
// Параметры:
//  НоваяВалюта - валюта, в которую необходимо пересчитать данные
//  СтараяВалюта - валюта, из которой надо пересчитать
//  ТребуетсяПересчетТабличныхЧастей - флаг, определяющий необходимость пересчета табличных частей
//  ТребуетсяПересчетПлановойСуммы - флаг, определяющий необходимость пересчета плановой суммы задания
//
&НаСервере
Процедура ОбработкаВыбораВалюты(НоваяВалюта, СтараяВалюта, ТребуетсяПересчетТабличныхЧастей, ТребуетсяПересчетПлановойСуммы)
	
	Если Не ТребуетсяПересчетТабличныхЧастей И Не ТребуетсяПересчетПлановойСуммы Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта,Объект.Дата);
	СтруктураКурсовНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,Объект.Дата);
	
	Если ТребуетсяПересчетТабличныхЧастей Тогда
		
		Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.Товары,
			Объект.ЦенаВключаетНДС,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты,
			Ложь,
			Истина
		);
		
		Ценообразование.РаспределитьСуммуПоЭтапамОплаты(Объект, Объект.Товары.Итог("СуммаСНДС"));
		
	КонецЕсли;
	
	Если ТребуетсяПересчетПлановойСуммы Тогда
		
		Объект.СуммаПлан = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			Объект.СуммаПлан,
			НоваяВалюта,
			СтараяВалюта,
			СтруктураКурсовСтаройВалюты.Курс,
			СтруктураКурсовНовойВалюты.Курс,
			СтруктураКурсовСтаройВалюты.Кратность,
			СтруктураКурсовНовойВалюты.Кратность
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет заполнение детального состава задания на основании данных
// истории продаж
//
// Параметры:
//  НачалоПериода - начало периода, за который анализируется истории продаж
//  КонецПериода - конец периода, за который анализируется истории продаж
//  Период - период, за который рассчитывается среднее значение объема продаж
//  ДетализацияПоХарактеристикам - признак того, что следует детализировать состав по характеристикам
//  КомпоновщикНастроек - компоновщик, содержащий заданные настройки
//
&НаСервере
Процедура ЗаполнитьСоставЗаданияПоДаннымИсторииПродажСервер(НачалоПериода, КонецПериода, Период, ДетализацияПоХарактеристикам, КомпоновщикНастроек)
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);		
	
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	
	МобильныеПриложения.УстановитьИспользованиеПоляКомпоновки(НастройкиКомпоновки, "Характеристика", ДетализацияПоХарактеристикам);
	МобильныеПриложения.УстановитьИспользованиеПоляКомпоновки(НастройкиКомпоновки, "КоличествоПлан", Истина);
	
	МобильныеПриложения.УстановитьЗначениеПараметраНастроек(НастройкиКомпоновки, "ДетализацияПоХарактеристикам", ДетализацияПоХарактеристикам);
	
	РезультатЗапроса = ТорговыеПредставителиСервер.ВыполнитьЗапросПоИсторииПродаж(
		НастройкиКомпоновки,
		НачалоПериода,
		КонецПериода,
		Период,
		Истина
	);
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	Объект.Товары.Очистить();
	
	Для Каждого ТекСтрока из ТаблицаЗапроса Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
		НоваяСтрока.КоличествоУпаковокПлан = НоваяСтрока.КоличествоПлан;
	КонецЦикла;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	ПродажиСервер.ЗаполнитьЦены(
			Объект.Товары,
			, // Массив строк или структура отбора
			Новый Структура( // Параметры заполнения
				"Дата, Валюта, Соглашение, ПоляЗаполнения",
				Объект.Дата,
				Объект.Валюта,
				Объект.Соглашение,
				"Цена, СтавкаНДС, ВидЦены"
			),
			Новый Структура( // Структура действий с измененными строками
				"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ПересчитатьСуммуСУчетомРучнойСкидки",
				"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Новый Структура("Очищать", Ложь)
			)
		);
		
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.Товары,
	Новый Структура(
		"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
		Новый Структура("Номенклатура", "ТипНоменклатуры"),
		Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	
	ЗаполнитьПризнакОтмены();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

// Рассчитывает сумму задания на основании данных истории продаж
//
// Параметры:
//  НачалоПериода - - начало периода, за который анализируется истории продаж
//  КонецПериода - конец периода, за который анализируется истории продаж
//  Период - период, за который рассчитывается среднее значение объема продаж
//  КомпоновщикНастроек - компоновщик, содержащий заданные настройки
//
&НаСервере
Процедура УстановитьСуммуЗаданияПоДаннымИсторииПродаж(НачалоПериода, КонецПериода, Период, КомпоновщикНастроек)
	
	НастройкиКомпоновки = КомпоновщикНастроек.ПолучитьНастройки();
	РезультатЗапроса = ТорговыеПредставителиСервер.ВыполнитьЗапросПоИсторииПродаж(
		НастройкиКомпоновки,
		НачалоПериода,
		КонецПериода,
		Период,
		Ложь
	);
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	СуммаИсторииПродаж = ТаблицаЗапроса.Итог("Сумма");
	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	Если Объект.Валюта <> ВалютаУпрУчета Тогда
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпрУчета,Объект.Дата);
		СтруктураКурсовНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Объект.Валюта,Объект.Дата);
		
		СуммаИсторииПродаж = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			СуммаИсторииПродаж,
			ВалютаУпрУчета, Объект.Валюта,
			СтруктураКурсовСтаройВалюты.Курс, СтруктураКурсовНовойВалюты.Курс,
			СтруктураКурсовСтаройВалюты.Кратность, СтруктураКурсовНовойВалюты.Кратность
		);
		
	КонецЕсли;
	
	Объект.СуммаПлан = СуммаИсторииПродаж;
	
КонецПроцедуры

// Проверяет, возможны ли коллизии при обмене с мобильным приложением
//
// Возвращаемое значение:
//  Результат анализа - Булево. Истина - коллизии возможны, Ложь - нет
//
&НаСервере
Функция ВозможныКоллизииСМобильнымПриложением()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаданиеТорговомуПредставителю.Статус,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаданиеТорговомуПредставителюИзменения.Ссылка ЕСТЬ NULL 
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ИзмененияЗарегистрированы
	|ИЗ
	|	Документ.ЗаданиеТорговомуПредставителю КАК ЗаданиеТорговомуПредставителю
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеТорговомуПредставителю.Изменения КАК ЗаданиеТорговомуПредставителюИзменения
	|		ПО (ЗаданиеТорговомуПредставителюИзменения.Ссылка = ЗаданиеТорговомуПредставителю.Ссылка)
	|			И (ЗаданиеТорговомуПредставителюИзменения.Узел.Пользователь = ЗаданиеТорговомуПредставителю.ТорговыйПредставитель)
	|ГДЕ
	|	ЗаданиеТорговомуПредставителю.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданиеТорговомуПредставителю.Статус"
	;
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.Статус = Перечисления.СтатусыЗаданийТорговымПредставителям.Отработано
			ИЛИ (Выборка.Статус = Перечисления.СтатусыЗаданийТорговымПредставителям.КОтработке И Выборка.ИзмененияЗарегистрированы=0) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

// Производит заполнение по указанному документу-основанию
//
// Параметры:
//  ДокументОснование - ссылка на документ, на основании которого заполняется объект
//
&НаСервере
Процедура ОбработатьЗаполнениеНаОсновании(ДокументОснование)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(ДокументОснование);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакОтмены()
	
	Для Каждого Строка из Объект.Товары Цикл
		Строка.Отменено = ЗначениеЗаполнено(Строка.ПричинаОтмены);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс","План");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

// Возвращает структуру заполнения дубликатов зависимых реквизитов
//
// Возвращаемое значение:
// 	Структура -
// 		Ключ - Имя реквизита флага активности
// 		Значение - Строка перечисления через запятую имен зависимых реквизитов
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруЗависимыхРеквизитов()
	
	Возврат Новый Структура(
		"БезВозвратнойТары,ОтмененоБезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(Форма)
	
	// Заполнение итогов по таблице "Товары"
	
	КоллекцияТовары = Форма.Объект.Товары;
	Форма.СуммаЗаказано     = КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары");
	Форма.СуммаНДСЗаказано  = КоллекцияТовары.Итог("СуммаНДСБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаНДСОтмененоБезВозвратнойТары");
	Форма.СуммаРучнойСкидки = КоллекцияТовары.Итог("СуммаРучнойСкидкиБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаРучнойСкидкиОтмененоБезВозвратнойТары");
	Форма.СуммаСкидки       = Форма.СуммаРучнойСкидки;
	Форма.СуммаОтменено     = КоллекцияТовары.Итог("СуммаОтмененоБезВозвратнойТары");
	
	СуммаЗаказано = КоллекцияТовары.Итог("СуммаБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаОтмененоБезВозвратнойТары");
	
	Если СуммаЗаказано > 0 Тогда
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаЗаказано + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентРучнойСкидки;
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = Форма.ПроцентРучнойСкидки;
	Иначе
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
	КонецЕсли;
	
	// Заполнение итогов по этапам оплаты
	
	ПредыдущееЗначениеДаты = Дата(1,1,1);
	Форма.НомерСтрокиПолнойОплаты = 0;
	ПроцентПлатежейОбщий = 0;
	
	Форма.СуммаАвансаДоОбеспечения = 0;
	Форма.СуммаПредоплатыДоОтгрузки = 0;
	Форма.СуммаКредитаПослеОтгрузки = 0;
	Форма.ПроцентАвансаДоОбеспечения = 0;
	Форма.ПроцентПредоплатыДоОтгрузки = 0;
	Форма.ПроцентКредитаПослеОтгрузки = 0;
	
	СоответствиеВариантовОплаты = Новый Соответствие;
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения"),
		Новый Структура("Сумма, Проценты", "СуммаАвансаДоОбеспечения", "ПроцентАвансаДоОбеспечения")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки"),
		Новый Структура("Сумма, Проценты", "СуммаПредоплатыДоОтгрузки", "ПроцентПредоплатыДоОтгрузки")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки"),
		Новый Структура("Сумма, Проценты", "СуммаКредитаПослеОтгрузки", "ПроцентКредитаПослеОтгрузки")
	);
	
	Для Каждого ТекСтрока Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		ПроцентПлатежейОбщий = ПроцентПлатежейОбщий + ТекСтрока.ПроцентПлатежа;
		ТекСтрока.ПроцентЗаполненНеВерно = (ПроцентПлатежейОбщий > 100);
		ТекСтрока.ДатаЗаполненаНеВерно = (ПредыдущееЗначениеДаты > ТекСтрока.ДатаПлатежа);
		ПредыдущееЗначениеДаты = ТекСтрока.ДатаПлатежа;
		Если ПроцентПлатежейОбщий = 100 Тогда
			Форма.НомерСтрокиПолнойОплаты = ТекСтрока.НомерСтроки;
		КонецЕсли;
		ИменаЭлементов = СоответствиеВариантовОплаты[ТекСтрока.ВариантОплаты];
		Если ИменаЭлементов <> Неопределено Тогда
			Форма[ИменаЭлементов.Сумма] = Форма[ИменаЭлементов.Сумма] + ТекСтрока.СуммаПлатежа;
			Форма[ИменаЭлементов.Проценты] = Форма[ИменаЭлементов.Проценты] + ТекСтрока.ПроцентПлатежа;
		КонецЕсли;
	КонецЦикла;
	
	// Выбор страницы отображения НДС
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС")
		ИЛИ Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД") Тогда
		
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
		
	Иначе
		
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
		Модифицированность = Истина;
	Исключение
		Предупреждение(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",                      Ложь);
	ПараметрыФормы.Вставить("СуммаДокумента",                      Объект.Товары.Итог("СуммаСНДС"));
	ПараметрыФормы.Вставить("ГрафикОплаты",                        Объект.ГрафикОплаты);
	ПараметрыФормы.Вставить("УчитыватьВариантОплаты",              Истина);
	ПараметрыФормы.Вставить("Соглашение",                          Объект.Соглашение);
	ПараметрыФормы.Вставить("Дата",                                Объект.Дата);
	ПараметрыФормы.Вставить("ЖелаемаяДатаОтгрузки",                Объект.ЖелаемаяДатаОтгрузки);
	ПараметрыФормы.Вставить("Валюта",                              Объект.Валюта);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",             УникальныйИдентификатор);
	ПараметрыФормы.Вставить("АдресВоВременномХранилище",           ПоместитьВоВременноеХранилищеНаСервере());
	ПараметрыФормы.Вставить("НеПроверятьКорректностьЭтаповОплаты", Истина);
	ПараметрыФормы.Вставить("Ключ",                                Объект.Ссылка);
	ПараметрыФормы.Вставить("ФормаОплаты",                                Объект.ФормаОплаты);
	
	ПараметрыОплаты = ОткрытьФормуМодально("ОбщаяФорма.ЭтапыОплатыКлиентом", ПараметрыФормы, ЭтаФорма);
	
	Если ПараметрыОплаты <> Неопределено Тогда
		Объект.ЭтапыГрафикаОплаты.Очистить();
		Если ЗначениеЗаполнено(ПараметрыОплаты.АдресВоВременномХранилище) Тогда
			ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(ПараметрыОплаты.АдресВоВременномХранилище);
		КонецЕсли;
		НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ЭтапыГрафикаОплаты.Выгрузить());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ЭтапыОплаты = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
		НоваяСтрока = Объект.ЭтапыГрафикаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьГрафикаОплаты()
	
	ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГрафикОплаты", "Видимость", Не ГрафикСоглашенияЗаполнен
		И ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты"));
	
КонецПроцедуры
	
&НаСервере
Процедура ПриИзмененииГрафикаОплатыСервер()
	
	ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
	ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты);
	
	Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
		ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, ЗаполнятьФормуОплаты = Ложь)
	
	Если ГрафикСоглашенияЗаполнен Тогда
		ПродажиСервер.ЗаполнитьЭтапыГрафикаОплатыПоСоглашению(
			Объект,
			Объект.Товары.Итог("СуммаСНДС"),
			ЗаполнятьФормуОплаты // ЗаполнятьФормуОплаты
		);
	ИначеЕсли ГрафикЗаполнен Тогда
		ПродажиСервер.ЗаполнитьЭтапыГрафикаОплаты(
			Объект,
			Объект.Товары.Итог("СуммаСНДС"),
			ЗаполнятьФормуОплаты // ЗаполнятьФормуОплаты
		);
	КонецЕсли;
	
	НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Товары", УникальныйИдентификатор, ТолькоВыделенныеСтроки);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУсловияПродаж()
	
	ГрафикОплаты = Объект.ГрафикОплаты;
	
	ДокументПродажи = ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.ЗаданиеТорговомуПредставителю"));
	ДокументПродажи.ЗаполнитьУсловияОбслуживанияПоУмолчанию();
	ДокументПродажи.ЗаполнитьУсловияПродажПоУмолчанию();
	
	ЗначениеВДанныеФормы(ДокументПродажи,Объект);
	
	Если ЗначениеЗаполнено(ДокументПродажи.Соглашение) Тогда
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		ПродажиСервер.ЗаполнитьЦены(
			Объект.Товары,
			, // Массив строк или структура отбора
			Новый Структура( // Параметры заполнения
				"Дата, Валюта, Соглашение, ПоляЗаполнения",
				Объект.Дата,
				Объект.Валюта,
				Объект.Соглашение,
				"Цена, СтавкаНДС, ВидЦены"
			),
			Новый Структура( // Структура действий с измененными строками
				"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ПересчитатьСуммуСУчетомРучнойСкидки",
				"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Новый Структура("Очищать", Ложь)
			)
		);
		
		ВалютаДокумента = Объект.Валюта;
		ХозяйственнаяОперацияПриИзмененииСервер();
		
		ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
		ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты) И ГрафикОплаты <> Объект.ГрафикОплаты;
		
		Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
			ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
		ИначеЕсли Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, Объект.Товары.Итог("СуммаСНДС"));
		КонецЕсли;
		
	КонецЕсли;
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "Доступность", Форма.Объект.ВернутьМногооборотнуюТару);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура();
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	
	СтруктураДействийДобавленныеСтроки =  ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДействийИзмененныеСтроки);;
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		"Номенклатура,Характеристика",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийДобавленныеСтроки);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
КонецПроцедуры

&НаСервере
Процедура ВернутьМногооборотнуюТаруПриИзмененииСервер()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакБезВозвратнойТары()
	
	СтруктураДополнительныхДействий = Новый Структура;
	СтруктураДополнительныхДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару, СтруктураДополнительныхДействий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с буфером обмена 

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	ХранилищаНастроек.ХранилищеБуфераОбмена.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = ХранилищаНастроек.ХранилищеБуфераОбмена.ПолучитьСтрокиИзБуфераОбмена();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		ТекущаяСтрока.КоличествоУпаковокПлан = СтрокаТовара.КоличествоУпаковок;
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	
	РассчитатьИтоговыеПоказателиЗаданияТорговомуПредставителю(ЭтаФорма);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ХранилищаНастроек.ХранилищеБуфераОбмена.БуферОбменаПустой());
		
	Иначе
		
		МассивЭлементов.Добавить("ТоварыСкопироватьСтроки");
		МассивЭлементов.Добавить("ТОварыКонтекстноеМенюСкопироватьСтроки");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

