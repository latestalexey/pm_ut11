#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

 ////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедуры проверки заполнения реквизита Количество и КоличествоУпаковок в документах
//
// Параметры:
//	Объект - ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента
//
Процедура УстановитьКлючВСтрокахТабличнойЧасти(Знач Объект, ИмяТабличнойЧасти, ИмяМаксимальногоКодаСтроки) Экспорт

	СтрокиБезКлюча = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("КодСтроки", 0));
	Если СтрокиБезКлюча.Количество() > 0 Тогда

		ТекущийКод = Объект[ИмяМаксимальногоКодаСтроки];

		Для Каждого СтрокаТовары Из СтрокиБезКлюча Цикл

			ТекущийКод = ТекущийКод + 1;
			СтрокаТовары.КодСтроки = ТекущийКод;

		КонецЦикла;

		Объект[ИмяМаксимальногоКодаСтроки] = ТекущийКод;

	КонецЕсли;

КонецПроцедуры

// Рассчитывает сумму неотмененных строк заявки
//
Функция ПолучитьСуммуЗаменяющихСтрок() Экспорт
	
	СуммаЗаменяющихСтрок = 0;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.Отменено КАК Отменено
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.СуммаСНДС),0) КАК СуммаСНДС
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Отменено
	|	И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	ИЛИ (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) И НЕ &ВернутьМногооборотнуюТару)
	|");
	
	Запрос.УстановитьПараметр("Товары", ЗаменяющиеТовары.Выгрузить(,"Номенклатура,СуммаСНДС,Отменено"));
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", ВернутьМногооборотнуюТару);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	СуммаЗаменяющихСтрок = Выгрузка[0].СуммаСНДС;
	
	Возврат СуммаЗаменяющихСтрок;
	
КонецФункции

// Рассчитывает количество неотмененных строк заявки
//
Функция ПолучитьКоличествоЗаказанныхСтрок() Экспорт
	
	НайденныеСтроки = ЗаменяющиеТовары.НайтиСтроки(Новый Структура("Отменено", Ложь));
	Возврат НайденныеСтроки.Количество();
	
КонецФункции

// Заполняет табличную часть ЭтапыГрафикаОплаты
//
Процедура ЗаполнитьЭтапыГрафикаОплаты() Экспорт
	
	СуммаДоплаты = ПолучитьСуммуЗаменяющихСтрок();
	
	Если СуммаДоплаты > 0 Тогда
	
		Если ЗначениеЗаполнено(ГрафикОплаты) Тогда
			
			ПродажиСервер.ЗаполнитьЭтапыГрафикаОплаты(ЭтотОбъект, СуммаДоплаты, Ложь);
			
		Иначе
			
			Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
				ЭтапыГрафикаОплаты.Очистить();
			КонецЕсли;
			
			Если ПолучитьКоличествоЗаказанныхСтрок() <> 0 Тогда
				
				НовыйЭтап                 = ЭтапыГрафикаОплаты.Добавить();
				НовыйЭтап.ВариантОплаты   = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки;
				НовыйЭтап.ДатаПлатежа     = ?(ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки), ЖелаемаяДатаОтгрузки, Дата);
				НовыйЭтап.ПроцентПлатежа  = 100;
				НовыйЭтап.СуммаПлатежа    = СуммаДоплаты;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			ЭтапыГрафикаОплаты.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж в заказе клиента
//
// Параметры:
//	УсловияПродаж - Структура - Структура для заполнения
//
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж) Экспорт
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = УсловияПродаж.Валюта;
	
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		ХозяйственнаяОперация = ПродажиСервер.ПолучитьХозяйственнуюОперациюВозвратаПоРеализации(УсловияПродаж.ХозяйственнаяОперация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГрафикОплаты) Тогда
		ГрафикОплаты = УсловияПродаж.ГрафикОплаты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ФормаОплаты) Тогда
		ФормаОплаты = УсловияПродаж.ФормаОплаты;
	КонецЕсли;
	
	НалогообложениеНДС   = УсловияПродаж.НалогообложениеНДС;
	ЦенаВключаетНДС      = УсловияПродаж.ЦенаВключаетНДС;
	ВернутьМногооборотнуюТару = УсловияПродаж.ВозвращатьМногооборотнуюТару;
	СрокВозвратаМногооборотнойТары = УсловияПродаж.СрокВозвратаМногооборотнойТары;
	ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
		Дата,
		УсловияПродаж.СрокВозвратаМногооборотнойТары,
		УсловияПродаж.РассчитыватьДатуВозвратаТарыПоКалендарю);
	
	Если ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация<>Организация Тогда
		Организация = УсловияПродаж.Организация;
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация);
		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Организация, ФормаОплаты);
	КонецЕсли;
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.Контрагент) Тогда
			Контрагент = УсловияПродаж.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	ХозяйственнаяОперацияДоговора = Неопределено;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента Тогда
		ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		ХозяйственнаяОперацияДоговора = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ХозяйственнаяОперацияДоговора) Тогда
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
			Договор,
			Партнер,
			Контрагент,
			Организация,
			ХозяйственнаяОперацияДоговора,
			Валюта,
			Соглашение
		);
	КонецЕсли;
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчет, БанковскийСчетКонтрагента);
	
	Если ЗначениеЗаполнено(УсловияПродаж.Склад) Тогда
		Склад = УсловияПродаж.Склад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГруппаФинансовогоУчета) Тогда
		ГруппаФинансовогоУчета = УсловияПродаж.ГруппаФинансовогоУчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.СрокПоставки) Тогда
		ДатаНачала = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
		ЖелаемаяДатаОтгрузки = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачала, Перечисления.Периодичность.День, УсловияПродаж.СрокПоставки) + 1;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по умолчанию в заказе клиента
//
Процедура ЗаполнитьУсловияПродажПоУмолчанию(ПересчитатьЦены = Истина) Экспорт
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	Если ЗначениеЗаполнено (Партнер) ИЛИ НЕ ИспользоватьСоглашенияСКлиентами Тогда
		
		Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
			УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
				Партнер,
				Новый Структура("ХозяйственнаяОперация", ПродажиСервер.ПолучитьХозяйственнуюОперациюСоглашенияПоВозврату(ХозяйственнаяОперация))
			);
		Иначе
			УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(Партнер);
		КонецЕсли;
		
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			
			Если Соглашение <> УсловияПродажПоУмолчанию.Соглашение
				И ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение) Тогда
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
				ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
				
				Если ПересчитатьЦены Тогда
					
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
					ПродажиСервер.ЗаполнитьЦены(
						ВозвращаемыеТовары,
						, // Массив строк или структура отбора
						Новый Структура( // Параметры заполнения
							"Дата, Валюта, Соглашение, ПоляЗаполнения",
							Дата,
							Валюта,
							Соглашение,
							"Цена, СтавкаНДС, ВидЦены"
						),
						Новый Структура( // Структура действий с измененными строками
							"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС",
							"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы
						)
					);
					ПродажиСервер.ЗаполнитьЦены(
						ЗаменяющиеТовары,
						, // Массив строк или структура отбора
						Новый Структура( // Параметры заполнения
							"Дата, Валюта, Соглашение, ПоляЗаполнения",
							Дата,
							Валюта,
							Соглашение,
							"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
						),
						Новый Структура( // Структура действий с измененными строками
							"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
							"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)
						)
					);
					
				КонецЕсли;
				
			Иначе
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			КонецЕсли;
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
			Соглашение = Неопределено;
		КонецЕсли;
		
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Партнер);
	
КонецПроцедуры

// Заполняет условия продаж по соглашению в заказе клиента
//
Процедура ЗаполнитьУсловияПродажПоCоглашению() Экспорт
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение);
	ЗаполнитьУсловияПродаж(УсловияПродаж);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
	ПродажиСервер.ЗаполнитьЦены(
		ВозвращаемыеТовары,
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, ПоляЗаполнения",
			Дата,
			Валюта,
			Соглашение,
			"Цена, СтавкаНДС, ВидЦены"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы
		)
	);
	ПродажиСервер.ЗаполнитьЦены(
		ЗаменяющиеТовары,
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, ПоляЗаполнения",
			Дата,
			Валюта,
			Соглашение,
			"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)
		)
	);
	
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, , БанковскийСчет);
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
	
КонецПроцедуры

// Осуществляет расчет даты возможной отгрузки в тч ЗаменяющиеТовары
//
Процедура РассчитатьДатыОтгрузки() Экспорт

	ПараметрыСостоянияОбеспечения = Новый Структура;
	ПараметрыСостоянияОбеспечения.Вставить("Заказ", Ссылка);
	ПараметрыСостоянияОбеспечения.Вставить("Склад", Склад);
	ПараметрыСостоянияОбеспечения.Вставить("ЖелаемаяДатаОтгрузки", ЖелаемаяДатаОтгрузки);
	ПараметрыСостоянияОбеспечения.Вставить("АдресТовары", ПоместитьВоВременноеХранилище(ЗаменяющиеТовары.Выгрузить()));
	ПараметрыСостоянияОбеспечения.Вставить("ОтборПоСостояниюНаличия", Перечисления.СостоянияНаличия.Любое);
	ПараметрыСостоянияОбеспечения.Вставить("НеОтгружатьЧастями", НеОтгружатьЧастями);
	
	ОбработкаСостояниеОбеспечения = Обработки.СостояниеОбеспечения.Создать();
	
	ОбработкаСостояниеОбеспечения.ПолучитьСостояниеОбеспечения(ПараметрыСостоянияОбеспечения);
	
	Для каждого СтрокаТовары из ОбработкаСостояниеОбеспечения.Товары Цикл
		
		СтрокаТовары.Выбран = Не ЗначениеЗаполнено(СтрокаТовары.ДатаОтгрузки) Или НеОтгружатьЧастями;
		
	КонецЦикла;
	
	ОбработкаСостояниеОбеспечения.РассчитатьДляПолнойОтгрузки(ПараметрыСостоянияОбеспечения);
	РезультатРасчета = ОбработкаСостояниеОбеспечения.ПолучитьРезультатРасчета(ПараметрыСостоянияОбеспечения);
	
	Если РезультатРасчета <> Неопределено Тогда
		
		ЗаменяющиеТовары.Загрузить(РезультатРасчета);
		
	КонецЕсли;

КонецПроцедуры

// Осуществляет расчет даты возможной отгрузки при отгрузке одной датой
// 
// Параметры:
//	УчитыватьСостояниеОбеспечения - Булево -	если параметр Истина, то используется механизм состояния обеспечения
//												если параметр Ложь, то механизм состояния обеспечения не используется 
//
Процедура РассчитатьДатуОтгрузки(УчитыватьСостояниеОбеспечения = Ложь) Экспорт
	
	Если УчитыватьСостояниеОбеспечения Тогда
		РассчитатьДатыОтгрузки();
	КонецЕсли;
	
	МаксимальнаяДатаОтгрузки = Дата(1,1,1);
	Для Каждого ЗаменяющийТовар Из ЗаменяющиеТовары Цикл 
		МаксимальнаяДатаОтгрузки = Макс(МаксимальнаяДатаОтгрузки, ЗаменяющийТовар.ДатаОтгрузки);
		
	КонецЦикла;
	
	ДатаОтгрузки = МаксимальнаяДатаОтгрузки;
	
КонецПроцедуры

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов[НовыйСтатус];
	
	Если ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована
		Или ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена Тогда
		
		Если Согласован Тогда
			Согласован = Ложь;
		КонецЕсли;
		
	ИначеЕсли ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату
		Или ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению
		Или ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке
		Или ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена Тогда
		
		Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) Тогда
			
			Для Каждого СтрокаТЧ Из ВозвращаемыеТовары Цикл
				Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
					СтрокаТЧ.ДатаПоступления = ЖелаемаяДатаПоступления;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если (Статус <> Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена И
			Статус <> Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению И
			Статус <> Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке И
			(ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению Или // Если статус меняется на "КОбеспечению"
			ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке)) Тогда // или "КОтгрузке"
			
			РассчитатьДатыОтгрузки();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ЗначениеПараметра = Неопределено;
		Если ДополнительныеПараметры.Свойство("ОтменаНеотработанныхСтрок", ЗначениеПараметра) Тогда
			
			КоличествоСтрок = ПродажиСервер.ОтменитьНепоставленныеСтроки(ЭтотОбъект, "ЗаменяющиеТовары", ЗначениеПараметра, Истина);
			Если КоличествоСтрок <> 0 Тогда
				ЗаполнитьЭтапыГрафикаОплаты();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриКопировании(ОбъектКопирования)
	
	Статус                  = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована;
	ЖелаемаяДатаОтгрузки    = Дата(1,1,1);
	ЖелаемаяДатаПоступления = Дата(1,1,1);
	ДатаСогласования        = Дата(1,1,1);
	Согласован              = Ложь;
	ДокументРеализации      = Неопределено;
	СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();
	
	ЗаменяющиеТоварыМаксимальныйКодСтроки   = 0;
	ВозвращаемыеТоварыМаксимальныйКодСтроки = 0;
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение);
		Если ЗначениеЗаполнено(УсловияПродаж.СрокПоставки) Тогда
			ДатаНачала = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
			ЖелаемаяДатаОтгрузки = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачала, Перечисления.Периодичность.День, УсловияПродаж.СрокПоставки) + 1;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ВозвращаемыеТовары Цикл
		
		СтрокаТЧ.КодСтроки       = 0;
		СтрокаТЧ.ДатаПоступления = Дата(1,1,1);
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ЗаменяющиеТовары Цикл
		
		СтрокаТЧ.КодСтроки    = 0;
		СтрокаТЧ.ДатаОтгрузки = Дата(1,1,1);
		СтрокаТЧ.УказыватьСерии = Ложь;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ЭтапыГрафикаОплаты Цикл
		
		СтрокаТЧ.ДатаПлатежа = Дата(1,1,1);
		
	КонецЦикла;
	
	ВозвращаемыеСерии.Очистить();
	ЗаменяющиеСерии.Очистить();
	
	СкидкиРассчитаны = Ложь;
	СкидкиНаценкиСервер.ОтменитьСкидки(ЭтотОбъект, "ЗаменяющиеТовары", Истина);
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);

	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("ЗаполнитьПоПереданнойТаре") Тогда
			ЗаполнитьДокументНаОснованииПереданнойТары(ДанныеЗаполнения);
		Иначе
			ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
		КонецЕсли;
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.Партнеры") Тогда
		ЗаполнитьДокументНаОснованииПартнера(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		ЗаполнитьДокументНаОснованииИндивидуальногоСоглашенияСКлиентом(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
		ЗаполнитьДокументНаОснованииСделкиПоПродаже(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЗаполнитьДокументНаОснованииРеализацииТоваровИУслуг(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЧекККМ") Тогда
		ЗаполнитьДокументНаОснованииЧекаККМ(ДанныеЗаполнения);
	КонецЕсли;

	ИнициализироватьДокумент(ДанныеЗаполнения);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "ВозвращаемыеТовары", "ВозвращаемыеТоварыМаксимальныйКодСтроки");
	УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "ЗаменяющиеТовары",   "ЗаменяющиеТоварыМаксимальныйКодСтроки");
	НоменклатураСервер.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаявкаНаВозвратТоваровОтКлиента).Возвращаемые);
	НоменклатураСервер.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаявкаНаВозвратТоваровОтКлиента).Заменяющие);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров") Тогда
		ВозвратПорчи = Ложь;
		Для Каждого СтрТабл из ВозвращаемыеТовары Цикл
			Если СтрТабл.Порча Тогда
				ВозвратПорчи = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		
		ЭтапыГрафикаОплаты.Очистить();
		СуммаАвансаДоОбеспечения = 0;
		СуммаПредоплатыДоОтгрузки = 0;
		
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		
		СуммаДокумента = 0;
		
		Для Каждого ТекСтрока Из ВозвращаемыеТовары Цикл
			
			ТекСтрока.Цена = 0;
			ТекСтрока.Сумма = 0;
			ТекСтрока.СуммаНДС = 0;
			ТекСтрока.СуммаСНДС = 0;
			
		КонецЦикла;
		
	Иначе
		
		СуммаДокумента = ПолучитьСуммуДокумента();
		
		Если ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			ПродажиСервер.ЗаполнитьСуммыАвансаПредоплаты(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаЗамены = ПолучитьСуммуЗаменяющихСтрок();
	
	НоваяДатаПоступления = Дата(1,1,1);
	
	Если ВозвращаемыеТовары.Количество() > 0 Тогда
			
		Если Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована Тогда
			
			Если ВозвращаемыеТовары.Количество() > 0 Тогда
				
				ТаблицаТоваров = ВозвращаемыеТовары.Выгрузить(, "ДатаПоступления");
				ТаблицаТоваров.Сортировать("ДатаПоступления Возр");
				НоваяДатаПоступления = ТаблицаТоваров[0].ДатаПоступления;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаПервогоПоступления = НоваяДатаПоступления;
	
	Если Не НеОтгружатьЧастями Тогда
		НоваяДатаОтгрузки = Дата(1,1,1);
		
		Если ЗаменяющиеТовары.Количество() > 0 Тогда
			
			Если Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована Или
				Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Отменено", Ложь);
				СтрокиКОбеспечению = ЗаменяющиеТовары.НайтиСтроки(ПараметрыОтбора);
				
				Если СтрокиКОбеспечению.Количество() > 0 Тогда
					
					ТаблицаСтрокКОбеспечению = ЗаменяющиеТовары.Выгрузить(СтрокиКОбеспечению, "ДатаОтгрузки");
					ТаблицаСтрокКОбеспечению.Сортировать("ДатаОтгрузки Возр");
					НоваяДатаОтгрузки = ТаблицаСтрокКОбеспечению[0].ДатаОтгрузки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДатаОтгрузки = НоваяДатаОтгрузки;
		
	КонецЕсли;
	
	ДокументСогласован = Согласован;
	
	МассивСтатусовНеСогласован = Новый Массив();
	МассивСтатусовНеСогласован.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована);
	МассивСтатусовНеСогласован.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена);
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(
		ЭтотОбъект,
		РежимЗаписи,
		МассивСтатусовНеСогласован
	);
	
	// Установим дату согласования, если документ согласован
	Если Не ДокументСогласован И Согласован Тогда
		ДатаСогласования = ТекущаяДата();
	КонецЕсли;
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		ЧекККМ = Неопределено;
	Иначе
		ЗаменяющиеТовары.Очистить();
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Наличная Тогда
		МассивРеквизитов.Добавить("Касса");
	КонецЕсли;
	
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, МассивРеквизитов, Новый Массив);

	Если Не ЗначениеЗаполнено(Назначение) Тогда

		ТребуетсяНазначение = Ложь;
		Для Каждого СтрокаТЧ Из ЗаменяющиеТовары Цикл

			Если ЗначениеЗаполнено(СтрокаТЧ.ВариантОбеспечения) Тогда
				ТребуетсяНазначение = Истина;
				Прервать;
			КонецЕсли;

		КонецЦикла;

		Если ТребуетсяНазначение Тогда 
			Назначение = Справочники.Назначения.ПолучитьСсылку();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Назначение) Тогда

		НаименованиеНазначения = Метаданные().Синоним + " " + СокрЛП(Номер) + " от " + Формат(Дата, "ДФ=dd.MM.yyyy");
		Если Назначение.Заказ <> Ссылка Или Назначение.Наименование <> НаименованиеНазначения Тогда

			НазначениеОбъект = Назначение.ПолучитьОбъект();
			Если НазначениеОбъект = Неопределено Тогда 

				НазначениеОбъект = Справочники.Назначения.СоздатьЭлемент();
				НазначениеОбъект.УстановитьСсылкуНового(Назначение);

			КонецЕсли;

			НазначениеОбъект.Заказ        = Ссылка;
			НазначениеОбъект.Наименование = НаименованиеНазначения;
			НазначениеОбъект.Записать();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Соглашение) Или Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "ИспользуютсяДоговорыКонтрагентов") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	КонецЕсли;
	
	Если Не НеОтгружатьЧастями Или 
		НеОтгружатьЧастями И Не(Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению Или
			Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке Или
			Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена)
			Или НеОтгружатьЧастями и ВсеСтрокиОтменены() Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаОтгрузки");
		
	КонецЕсли;
	
	Если Не ПоступлениеОднойДатой Или 
		ПоступлениеОднойДатой И 
		Не(Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению Или
			Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке Или
			Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПоступления");
		
	КонецЕсли;
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ","ВозвращаемыеТовары");
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ,ПараметрыПроверки);
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ","ЗаменяющиеТовары");
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ,ПараметрыПроверки);
	НоменклатураСервер.ПроверитьЗаполнениеСодержания(ЭтотОбъект, Отказ, "ЗаменяющиеТовары");
	
	// Срок действия заказа должен быть не меньше даты документа
	Если Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована И
		ЗначениеЗаполнено(ДатаСогласования) И ДатаСогласования < НачалоДня(ДатаСогласования) Тогда
		
		ТекстОшибки = НСтр("ru='Дата согласования должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата, "ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"СрокДействия",
			,
			Отказ
		);
		
	КонецЕсли;
	
	// Желаемая дата отгрузки в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки) И ЖелаемаяДатаОтгрузки < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Желаемая дата отгрузки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаОтгрузки",
			,
			Отказ
		);
		
	КонецЕсли;
	
	// Желамемая дата поступления в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда
	
		ТекстОшибки = НСтр("ru='Дата поступления должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаПоступления",
			,
			Отказ
		);

	КонецЕсли;

	МассивНепроверяемыхРеквизитов.Добавить("ВозвращаемыеТовары.НоменклатураОприходование");
	МассивНепроверяемыхРеквизитов.Добавить("ВозвращаемыеТовары.ДатаПоступления");
	
	Для ТекИндекс = 0 По ВозвращаемыеТовары.Количество()-1 Цикл
		
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Возвращаемые товары""'");
		АдресОшибки =  СтрЗаменить(АдресОшибки, "%НомерСтроки%", ВозвращаемыеТовары[ТекИндекс].НомерСтроки);
		
		// Дата поступления в тч ВозвращаемыеТовары обязательна к заполнению только для заявок в 
		// статусах КВозврату, КОбеспечению, КОтгрузке, Выполнена
		Если Не ПоступлениеОднойДатой
			И (Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату Или
			Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению Или
			Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке Или
			Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена) И
			Не ВозвращаемыеТовары[ТекИндекс].Отменено И
			Не ЗначениеЗаполнено(ВозвращаемыеТовары[ТекИндекс].ДатаПоступления) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата поступления""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвращаемыеТовары", ВозвращаемыеТовары[ТекИндекс].НомерСтроки, "ДатаПоступления"),
				,
				Отказ
			);
			
		КонецЕсли;
			
		// Дата поступления в тч Возвращаемые ВозвращаемыеТовары должна быть не меньше даты документа
		Если ЗначениеЗаполнено(ВозвращаемыеТовары[ТекИндекс].ДатаПоступления) И ВозвращаемыеТовары[ТекИндекс].ДатаПоступления < НачалоДня(Дата) Тогда
		
			ТекстОшибки = НСтр("ru='Дата поступления должна быть не меньше даты документа %Дата%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвращаемыеТовары", ВозвращаемыеТовары[ТекИндекс].НомерСтроки, "ДатаПоступления"),
				,
				Отказ
			);
			
		КонецЕсли;
		
		// Если клиент возвращает некачественный товар то тогда нужно проверять данные некачественного товара
		Если ВозвращаемыеТовары[ТекИндекс].Порча Тогда
			Если Не ЗначениеЗаполнено(ВозвращаемыеТовары[ТекИндекс].НоменклатураОприходование) Тогда
				ТекстОшибки = НСтр("ru=' Не заполнена колонка ""Номенклатура (оприходование)""'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвращаемыеТовары", ВозвращаемыеТовары[ТекИндекс].НомерСтроки, "НоменклатураОприходование"),
				,
				Отказ
				);
			ИначеЕсли ВозвращаемыеТовары[ТекИндекс].НоменклатураОприходование = ВозвращаемыеТовары[ТекИндекс].Номенклатура Тогда
				ТекстОшибки = НСтр("ru='Возвращаемый товар другого качества совпадает с ранее отгруженным товаром.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвращаемыеТовары", ВозвращаемыеТовары[ТекИндекс].НомерСтроки, "НоменклатураОприходование"),
				,
				Отказ
				);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Дата отгрузки в шапке должна быть не меньше даты документа
	Если НеОтгружатьЧастями И 
		ЗначениеЗаполнено(ДатаОтгрузки) И 
		ДатаОтгрузки < НачалоДня(Дата) Тогда
	
		ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаОтгрузки",
			,
			Отказ
		);

	КонецЕсли;
	
	// Дата поступления в шапке должна быть не меньше даты документа
	Если ПоступлениеОднойДатой И 
		ЗначениеЗаполнено(ДатаПоступления) И 
		ДатаПоступления < НачалоДня(Дата) Тогда
	
		ТекстОшибки = НСтр("ru='Дата поступления должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаПоступления",
			,
			Отказ
		);

	КонецЕсли;
	
	//Проверка заполнения подразделения для заказа в статусе "КОбеспечению" и выше.
		Если (Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению Или
			Статус   = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке Или
			Статус   = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена) Тогда
		 
		ПараметрыПроверки.Вставить("ИмяТЧ","ЗаменяющиеТовары");
		ТипыНоменклатурыВТабличнойЧасти = НоменклатураСервер.ПроверитьНаличиеРабот(ЭтотОбъект, ПараметрыПроверки);
		ПроверятьПодразделение = ТипыНоменклатурыВТабличнойЧасти.ЕстьРаботы; 
		
	Иначе
		
		ПроверятьПодразделение = Ложь;
		
	КонецЕсли;
	
	Если ПроверятьПодразделение И Не ЗначениеЗаполнено(Подразделение) Тогда 
		
		ТекстОшибки = НСтр("ru='Необходимо указать обеспечивающее подразделение для заказываемых работ'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"Подразделение",
			,
			Отказ
		);
			
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("ЗаменяющиеТовары.ПричинаОтмены");
	МассивНепроверяемыхРеквизитов.Добавить("ЗаменяющиеТовары.ДатаОтгрузки");
	
	Для ТекИндекс = 0 По ЗаменяющиеТовары.Количество()-1 Цикл
			
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Заменяющие товары""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ЗаменяющиеТовары[ТекИндекс].НомерСтроки);
			
		// Дата отгрузки в тч ЗаменяющиеТовары обязательна к заполнению только для заявок в 
		// статусах КОбеспечению, КОтгрузке, Выполнена
		Если (Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению Или
			Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке Или
			Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена) И
			Не НеОтгружатьЧастями И
			Не ЗаменяющиеТовары[ТекИндекс].Отменено И
			Не ЗначениеЗаполнено(ЗаменяющиеТовары[ТекИндекс].ДатаОтгрузки) Тогда
				
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата отгрузки""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗаменяющиеТовары", ЗаменяющиеТовары[ТекИндекс].НомерСтроки, "ДатаОтгрузки"),
				,
				Отказ
			);
			
		КонецЕсли;
			
		// Причина отмены обязательна для заполнения в строках без признака Отменено
		Если ЗаменяющиеТовары[ТекИндекс].Отменено И
			Не ЗначениеЗаполнено(ЗаменяющиеТовары[ТекИндекс].ПричинаОтмены) Тогда
				
			ТекстОшибки = НСтр("ru='Необходимо указать причину отмены'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗаменяющиеТовары", ЗаменяющиеТовары[ТекИндекс].НомерСтроки, "ПричинаОтмены"),
				,
				Отказ
			);
			
		КонецЕсли;
			
		// Дата отгрузки в тч Товары должна быть не меньше даты документа
		Если Не НеОтгружатьЧастями И
			ЗначениеЗаполнено(ЗаменяющиеТовары[ТекИндекс].ДатаОтгрузки)	И 
			ЗаменяющиеТовары[ТекИндекс].ДатаОтгрузки < НачалоДня(Дата) Тогда
				
			ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты документа ""%Дата%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Дата%", Формат(Дата, "ДЛФ=DD"));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗаменяющиеТовары", ЗаменяющиеТовары[ТекИндекс].НомерСтроки, "ДатаОтгрузки"),
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
		И ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект) <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		
		ПродажиСервер.ПроверитьКорректностьЭтаповГрафикаОплаты(ЭтотОбъект, ПолучитьСуммуЗаменяющихСтрок(), Истина, Отказ, Истина);
		
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("ВозвращаемыеТовары.Цена");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвращаемыеТовары.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвращаемыеТовары.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("ВозвращаемыеТовары.СуммаНДС");
		
	КонецЕсли;
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации
	);
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		// Если реквизит не используется для хозяйственной операции, исключаем данный реквизит из проверки.
		Если МассивРеквизитовОперации.Найти(ЭлементМассива) = Неопределено Тогда
			МассивНепроверяемыхРеквизитов.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ","ВозвращаемыеТовары");
	ПараметрыПроверки.Вставить("СуффиксДопРеквизита", "Оприходование");
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаявкаНаВозвратТоваровОтКлиента).Возвращаемые,Отказ);
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ","ЗаменяющиеТовары");
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки);
	
	МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
 	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаявкаНаВозвратТоваровОтКлиента).Заменяющие,Отказ);
	
	ОтветственныеЛицаСервер.ПроверитьЗаполнениеОтветственныхЛицДокумента(ЭтотОбъект, Отказ);
	
	Если Не Отказ Тогда
		Отказ = ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты);
	КонецЕсли;
	
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект, Отказ);
	ПродажиСервер.ПроверитьКорректностьВозвращаемыхТоваров(ЭтотОбъект, "ВозвращаемыеТовары", Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	// Инициализация данных документа
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	// Отражение в разделах учета
	ЗаказыСервер.ОтразитьЗаявкиНаВозвратТоваровОтКлиентов(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказовРаботами(ДополнительныеСвойства, Движения, Отказ);

	// Отражение в разделах учета
	ЗаказыСервер.ОтразитьЗаказыКлиентов(ДополнительныеСвойства, Движения, Отказ);
	//ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьРезервыСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентамиПоследовательность(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	// Инициализация дополнительных свойств для удаления проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Инициализация и заполнение

Процедура ЗаполнитьДокументНаОснованииПартнера(Знач Основание)
	
	Партнер = Основание;
	ЗаполнитьУсловияПродажПоУмолчанию();
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииСделкиПоПродаже(Основание)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СделкиСКлиентами.Ссылка КАК Сделка,
		|	СделкиСКлиентами.Партнер КАК Партнер,
		|	СделкиСКлиентами.СоглашениеСКлиентом КАК Соглашение,
		|	СделкиСКлиентамиПартнерыИКонтактныеЛица.КонтактноеЛицо
		|ИЗ
		|	Справочник.СделкиСКлиентами КАК СделкиСКлиентами
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СделкиСКлиентами.ПартнерыИКонтактныеЛица КАК СделкиСКлиентамиПартнерыИКонтактныеЛица
		|		ПО (СделкиСКлиентамиПартнерыИКонтактныеЛица.Ссылка = СделкиСКлиентами.Ссылка)
		|			И (СделкиСКлиентамиПартнерыИКонтактныеЛица.Партнер = СделкиСКлиентами.Партнер)
		|			И (СделкиСКлиентамиПартнерыИКонтактныеЛица.КонтактноеЛицо <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
		|ГДЕ
		|	СделкиСКлиентами.Ссылка = &Основание");
		
	Запрос.УстановитьПараметр("Основание",Основание);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСделкиПоПродаже(Выборка.Партнер);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		ЗаполнитьУсловияПродажПоCоглашению();
	Иначе
		ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииЧекаККМ(Знач ДокументОснование)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя) КАК ХозяйственнаяОперация,
		|	ОтчетОРозничныхПродажах.Ссылка    КАК ДокументРеализации,
		|	ОтчетОРозничныхПродажах.Подразделение КАК Подразделение,
		|	ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель) КАК Партнер,
		|	ЧекККМ.Ссылка                     КАК ЧекККМ,
		|	ЧекККМ.Статус                     КАК Статус,
		|	ЧекККМ.КассоваяСмена              КАК КассоваяСмена,
		|	ЧекККМ.Организация                КАК Организация,
		|	ЧекККМ.Валюта                     КАК Валюта,
		|	ЧекККМ.Валюта                     КАК ВалютаВзаиморасчетов,
		|	ЧекККМ.Склад                      КАК Склад,
		|	ЧекККМ.ЦенаВключаетНДС            КАК ЦенаВключаетНДС,
		|	ЧекККМ.НалогообложениеНДС         КАК НалогообложениеНДС,
		|
		|	ВЫБОР КОГДА ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит) ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНеЦ КАК ЕстьОшибкиСтатус,
		|
		|	ЧекККМ.Товары.(
		|		Номенклатура                                  КАК Номенклатура,
		|		Номенклатура.ВидНоменклатуры.ТипНоменклатуры  КАК ТипНоменклатуры,
		|		Характеристика                                КАК Характеристика,
		|		Упаковка                                      КАК Упаковка,
		|		КоличествоУпаковок                            КАК КоличествоУпаковок,
		|		Количество                                    КАК Количество,
		|		ВЫБОР
		|			КОГДА
		|				СуммаРучнойСкидки + СуммаАвтоматическойСкидки = 0
		|				Или КоличествоУпаковок = 0
		|			ТОГДА
		|				Цена
		|			ИНАЧЕ
		|				Сумма / КоличествоУпаковок
		|		КОНеЦ КАК Цена,
		|		Сумма                                         КАК Сумма,
		|		СтавкаНДС                                     КАК СтавкаНДС,
		|		СуммаНДС                                      КАК СуммаНДС,
		|		ВЫБОР КОГДА ЧекККМ.ЦенаВключаетНДС
		|			ТОГДА Сумма
		|			ИНАЧЕ Сумма + СуммаНДС
		|		КОНеЦ                                         КАК СуммаСНДС,
		|		СуммаРучнойСкидки                             КАК СуммаРучнойСкидки,
		|		СуммаАвтоматическойСкидки                     КАК СуммаАвтоматическойСкидки,
		|		ПроцентРучнойСкидки                           КАК ПроцентРучнойСкидки,
		|		ПроцентАвтоматическойСкидки                   КАК ПроцентАвтоматическойСкидки
		|	) КАК Товары,
		|
		|	ЧекККМ.Серии.(
		|		Номенклатура                                  КАК Номенклатура,
		|		Характеристика                                КАК Характеристика,
		|		Серия                                         КАК Серия,
		|		Количество                                    КАК Количество
		|	) КАК Серии
		|
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ
		|		ЛЕВОЕ СОЕДИНеНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|		ПО ЧекККМ.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена
		|ГДЕ
		|	ЧекККМ.Ссылка = &ДокументОснование");
		
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	ВыборкаШапка = Запрос.Выполнить().Выбрать();
	ВыборкаШапка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЧековККМ.Пробит);
		
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ВыборкаШапка.ЧекККМ,
		ВыборкаШапка.Статус,
		,
		ВыборкаШапка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов
	);
	
	Если РозничныеПродажи.СменаОткрыта(ВыборкаШапка.КассоваяСмена, Дата) Тогда
		ВызватьИсключение НСтр("ru='Кассовая смена открыта! Ввод на основании чека документа ""Заявка на возврат товаров от клиента"" при открытой кассовой смене запрещен.'");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	ТаблицаТоваров = ВыборкаШапка.Товары.Выгрузить();
	
	ДокументРеализации = РозничныеПродажи.ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(ДокументОснование);
	
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
		
		Если ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Или
			ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			
			НоваяСтрока = ВозвращаемыеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
			НоваяСтрока.ДокументРеализации = ДокументРеализации;
		КонецЕсли;
		
	КонецЦикла;
	
	ВозвращаемыеСерии.Загрузить(ВыборкаШапка.Серии.Выгрузить());
	
	Если ЗначениеЗаполнено (Партнер) Тогда
		
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(Партнер);
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			
			Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
			
		КонецЕсли;
		
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииИндивидуальногоСоглашенияСКлиентом(Знач ДокументОснование)
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СоглашениеСКлиентом.Ссылка         КАК Соглашение,
		|	СоглашениеСКлиентом.Партнер        КАК Партнер,
		|	СоглашениеСКлиентом.КонтактноеЛицо КАК КонтактноеЛицо,
		|
		|	СоглашениеСКлиентом.Статус      КАК СтатусДокумента,
		|	ВЫБОР
		|		КОГДА
		|			СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		|		ТОГДА
		|			ЛОЖЬ
		|		ИНАЧЕ
		|			ИСТИНА
		|	КОНеЦ КАК ЕстьОшибкиСтатус,
		|	СоглашениеСКлиентом.Типовое КАК ЕстьОшибкиТиповое
		|
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		|ГДЕ
		|	СоглашениеСКлиентом.Ссылка = &ДокументОснование
		|");
		
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Выборка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыСоглашенийСКлиентами.Действует);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСоглашения(Выборка.ЕстьОшибкиТиповое);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.Соглашение,
		Выборка.СтатусДокумента,
		,
		Выборка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов
	);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	ЗаполнитьУсловияПродажПоCоглашению();

КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииРеализацииТоваровИУслуг(Знач ДокументОснование)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаРеализации.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДанныеПоследнейКорректировки
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	КорректировкаРеализации.Проведен
		|	И КорректировкаРеализации.ДокументОснование = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	КорректировкаРеализации.МоментВремени УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|	РеализацияТоваровУслуг.Соглашение КАК Соглашение,
		|	РеализацияТоваровУслуг.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.ЗаказКлиента = НЕОПРЕДЕЛЕНО
		|				ИЛИ РеализацияТоваровУслуг.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|				ИЛИ РеализацияТоваровУслуг.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
		|				ИЛИ РеализацияТоваровУслуг.ЗаказКлиента.ГрафикОплаты = ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
		|			ТОГДА РеализацияТоваровУслуг.Соглашение.ГрафикОплаты
		|		ИНАЧЕ РеализацияТоваровУслуг.ЗаказКлиента.ГрафикОплаты
		|	КОНЕЦ КАК ГрафикОплаты,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.ЗаказКлиента = НЕОПРЕДЕЛЕНО
		|				ИЛИ РеализацияТоваровУслуг.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|				ИЛИ РеализацияТоваровУслуг.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
		|				ИЛИ РеализацияТоваровУслуг.ЗаказКлиента.ГрафикОплаты = ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
		|			ТОГДА РеализацияТоваровУслуг.Соглашение.ГрафикОплаты.ФормаОплаты
		|		ИНАЧЕ РеализацияТоваровУслуг.ЗаказКлиента.ФормаОплаты
		|	КОНЕЦ КАК ФормаОплаты,
		|	РеализацияТоваровУслуг.Организация КАК Организация,
		|	РеализацияТоваровУслуг.Партнер КАК Партнер,
		|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|	РеализацияТоваровУслуг.КонтактноеЛицо КАК КонтактноеЛицо,
		|	РеализацияТоваровУслуг.Договор КАК Договор,
		|	РеализацияТоваровУслуг.Валюта КАК Валюта,
		|	РеализацияТоваровУслуг.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	РеализацияТоваровУслуг.Сделка КАК Сделка,
		|	РеализацияТоваровУслуг.Подразделение КАК Подразделение,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.Склад.ЭтоГруппа
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИНАЧЕ РеализацияТоваровУслуг.Склад
		|	КОНЕЦ КАК Склад,
		|	РеализацияТоваровУслуг.ХозяйственнаяОперация КАК ХозяйственнаяОперацияРеализация,
		|	РеализацияТоваровУслуг.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	РеализацияТоваровУслуг.НалогообложениеНДС КАК НалогообложениеНДС,
		|	РеализацияТоваровУслуг.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
		|	РеализацияТоваровУслуг.Грузоотправитель КАК Грузоотправитель,
		|	РеализацияТоваровУслуг.Грузополучатель КАК Грузополучатель,
		|	РеализацияТоваровУслуг.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
		|	РеализацияТоваровУслуг.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
		|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
		|	РеализацияТоваровУслуг.Статус КАК СтатусДокумента,
		|	РеализацияТоваровУслуг.КартаЛояльности КАК КартаЛояльности,
		|	НЕ РеализацияТоваровУслуг.Проведен КАК ЕстьОшибкиПроведен,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.НомерСтроки
		|		ИНАЧЕ ТаблицаТовары.НомерСтроки
		|	КОНЕЦ КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.Номенклатура
		|		ИНАЧЕ ТаблицаТовары.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.Номенклатура.ТипНоменклатуры
		|		ИНАЧЕ ТаблицаТовары.Номенклатура.ТипНоменклатуры
		|	КОНЕЦ КАК ТипНоменклатуры,
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.Характеристика
		|		ИНАЧЕ ТаблицаТовары.Характеристика
		|	КОНЕЦ КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.Упаковка
		|		ИНАЧЕ ТаблицаТовары.Упаковка
		|	КОНЕЦ КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.КоличествоУпаковок
		|		ИНАЧЕ ТаблицаТовары.КоличествоУпаковок
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.Цена
		|		ИНАЧЕ ТаблицаТовары.Цена
		|	КОНЕЦ КАК Цена,
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.ВидЦены
		|		ИНАЧЕ ТаблицаТовары.ВидЦены
		|	КОНЕЦ КАК ВидЦены,
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.Количество
		|		ИНАЧЕ ТаблицаТовары.Количество
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.Сумма
		|		ИНАЧЕ ТаблицаТовары.Сумма
		|	КОНЕЦ КАК Сумма,
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.СтавкаНДС
		|		ИНАЧЕ ТаблицаТовары.СтавкаНДС
		|	КОНЕЦ КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.СуммаНДС
		|		ИНАЧЕ ТаблицаТовары.СуммаНДС
		|	КОНЕЦ КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.СуммаСНДС
		|		ИНАЧЕ ТаблицаТовары.СуммаСНДС
		|	КОНЕЦ КАК СуммаСНДС,
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.КодСтроки
		|		ИНАЧЕ ТаблицаТовары.КодСтроки
		|	КОНЕЦ КАК КодСтроки,
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.Склад
		|		ИНАЧЕ ТаблицаТовары.Склад
		|	КОНЕЦ КАК Склад,
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.ЗаказКлиента
		|		ИНАЧЕ ТаблицаТовары.ЗаказКлиента
		|	КОНЕЦ КАК ЗаказКлиента,
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.СуммаРучнойСКидки
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаРучнойСКидки,
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА РеализацияТоваровУслугТовары.СуммаАвтоматическойСКидки
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СуммаАвтоматическойСКидки
		|ПОМЕСТИТЬ ТоварыРеализации
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК ТаблицаТовары
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПоследнейКорректировки КАК ДанныеПоследнейКорректировки
		|			ПО ТаблицаТовары.Ссылка = ДанныеПоследнейКорректировки.Ссылка
		|		ПО РеализацияТоваровУслугТовары.Номенклатура = ТаблицаТовары.Номенклатура
		|			И РеализацияТоваровУслугТовары.Характеристика = ТаблицаТовары.Характеристика
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВозвратТоваровОтКлиентаТовары.НомерСтроки,
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура,
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура.ТипНоменклатуры,
		|	ВозвратТоваровОтКлиентаТовары.Характеристика,
		|	ВозвратТоваровОтКлиентаТовары.Упаковка,
		|	ВозвратТоваровОтКлиентаТовары.КоличествоУпаковок,
		|	ВозвратТоваровОтКлиентаТовары.Количество,
		|	СУММА(ВозвратТоваровОтКлиентаТовары.Сумма) КАК Сумма,
		|	ВозвратТоваровОтКлиентаТовары.СтавкаНДС,
		|	СУММА(ВозвратТоваровОтКлиентаТовары.СуммаНДС) КАК СуммаНДС,
		|	СУММА(ВозвратТоваровОтКлиентаТовары.СуммаСНДС) КАК СуммаСНДС,
		|	NULL КАК Склад,
		|	NULL КАК ЗаказКлиента,
		|	ВозвратТоваровОтКлиентаТовары.Цена,
		|	NULL КАК ВидЦены
		|ПОМЕСТИТЬ ТоварыПредыдущихВозвратов
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента.Товары КАК ВозвратТоваровОтКлиентаТовары
		|ГДЕ
		|	ВозвратТоваровОтКлиентаТовары.ДокументРеализации = &ДокументОснование
		|	И ВозвратТоваровОтКлиентаТовары.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратТоваровОтКлиентаТовары.НомерСтроки,
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура,
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура.ТипНоменклатуры,
		|	ВозвратТоваровОтКлиентаТовары.Характеристика,
		|	ВозвратТоваровОтКлиентаТовары.Упаковка,
		|	ВозвратТоваровОтКлиентаТовары.КоличествоУпаковок,
		|	ВозвратТоваровОтКлиентаТовары.Количество,
		|	ВозвратТоваровОтКлиентаТовары.СтавкаНДС,
		|	ВозвратТоваровОтКлиентаТовары.Цена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыРеализации.Номенклатура КАК Номенклатура,
		|	ТоварыРеализации.ТипНоменклатуры КАК ТипНоменклатуры,
		|	ТоварыРеализации.Характеристика КАК Характеристика,
		|	ТоварыРеализации.Количество - ЕСТЬNULL(ТоварыПредыдущихВозвратов.Количество, 0) КАК Количество,
		|	ТоварыРеализации.КоличествоУпаковок - ЕСТЬNULL(ТоварыПредыдущихВозвратов.КоличествоУпаковок, 0) КАК КоличествоУпаковок,
		|	ТоварыРеализации.НомерСтроки КАК НомерСтроки,
		|	ТоварыРеализации.Упаковка КАК Упаковка,
		|	ТоварыРеализации.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА ТоварыРеализации.СуммаРучнойСкидки + ТоварыРеализации.СуммаАвтоматическойСкидки = 0
		|				ИЛИ ТоварыРеализации.КоличествоУпаковок = 0
		|			ТОГДА ТоварыРеализации.Цена
		|		ИНАЧЕ ТоварыРеализации.Сумма / ТоварыРеализации.КоличествоУпаковок
		|	КОНЕЦ КАК Цена,
		|	ТоварыРеализации.Сумма - ЕСТЬNULL(ТоварыПредыдущихВозвратов.Сумма, 0) КАК Сумма,
		|	ТоварыРеализации.СуммаНДС - ЕСТЬNULL(ТоварыПредыдущихВозвратов.СуммаНДС, 0) КАК СуммаНДС,
		|	ТоварыРеализации.СуммаСНДС - ЕСТЬNULL(ТоварыПредыдущихВозвратов.СуммаСНДС, 0) КАК СуммаСНДС,
		|	&ДокументОснование КАК ДокументРеализации
		|ИЗ
		|	ТоварыРеализации КАК ТоварыРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыПредыдущихВозвратов КАК ТоварыПредыдущихВозвратов
		|		ПО ТоварыРеализации.Номенклатура = ТоварыПредыдущихВозвратов.Номенклатура
		|			И ТоварыРеализации.Характеристика = ТоварыПредыдущихВозвратов.Характеристика
		|ГДЕ
		|	ТоварыРеализации.Количество - ЕСТЬNULL(ТоварыПредыдущихВозвратов.Количество, 0) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПереданнаяВозвратнаяТараОстатки.Номенклатура КАК Номенклатура,
		|	ПереданнаяВозвратнаяТараОстатки.Характеристика КАК Характеристика,
		|	ПереданнаяВозвратнаяТараОстатки.Партнер КАК Партнер,
		|	ПереданнаяВозвратнаяТараОстатки.ДокументПередачи КАК ДокументПередачи,
		|	ПереданнаяВозвратнаяТараОстатки.КоличествоОстаток КАК Количество,
		|	ПереданнаяВозвратнаяТараОстатки.СуммаОстаток КАК Сумма
		|ПОМЕСТИТЬ втПереданнаяВозвратнаяТара
		|ИЗ
		|	РегистрНакопления.ПереданнаяВозвратнаяТара.Остатки(, ДокументПередачи = &ДокументОснование) КАК ПереданнаяВозвратнаяТараОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПереданнаяВозвратнаяТара.Номенклатура КАК Номенклатура,
		|	втПереданнаяВозвратнаяТара.Характеристика КАК Характеристика,
		|	втПереданнаяВозвратнаяТара.ДокументПередачи КАК ДокументРеализации,
		|	СУММА(втПереданнаяВозвратнаяТара.Количество) КАК Количество,
		|	СУММА(втПереданнаяВозвратнаяТара.Количество) КАК КоличествоУпаковок,
		|	СУММА(втПереданнаяВозвратнаяТара.Сумма) КАК Сумма,
		|	СУММА(втПереданнаяВозвратнаяТара.Сумма) КАК СуммаСНДС,
		|	ВЫБОР
		|		КОГДА СУММА(втПереданнаяВозвратнаяТара.Количество) = 0
		|			ТОГДА СУММА(втПереданнаяВозвратнаяТара.Сумма)
		|		ИНАЧЕ СУММА(втПереданнаяВозвратнаяТара.Сумма) / СУММА(втПереданнаяВозвратнаяТара.Количество)
		|	КОНЕЦ КАК Цена,
		|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС) КАК СтавкаНДС
		|ИЗ
		|	втПереданнаяВозвратнаяТара КАК втПереданнаяВозвратнаяТара
		|
		|СГРУППИРОВАТЬ ПО
		|	втПереданнаяВозвратнаяТара.Номенклатура,
		|	втПереданнаяВозвратнаяТара.Характеристика,
		|	втПереданнаяВозвратнаяТара.ДокументПередачи
		|
		|ИМЕЮЩИЕ
		|	СУММА(втПереданнаяВозвратнаяТара.Количество) > 0");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = Результат[1].Выбрать();
	ВыборкаШапка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ВыборкаШапка.Ссылка,
		ВыборкаШапка.СтатусДокумента,
		ВыборкаШапка.ЕстьОшибкиПроведен,
		ВыборкаШапка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов
	);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	ХозяйственнаяОперация = ПродажиСервер.ПолучитьХозяйственнуюОперациюВозвратаПоРеализации(ВыборкаШапка.ХозяйственнаяОперацияРеализация);
	
	ТаблицаТоваров = Результат[4].Выгрузить();
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
		
		Если ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Или
			(ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара И НЕ ДокументОснование.ВернутьМногооборотнуюТару) Тогда
			
			НоваяСтрока = ВозвращаемыеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекСтрока);
			Ценообразование.ПересчитатьСуммыВСтроке(
				НоваяСтрока,
				Ложь,
				Ложь,
				Ложь,
				ВыборкаШапка.ЦенаВключаетНДС
			);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаТары = Результат[6].Выгрузить();
	
	Для каждого ТекущаяСтрока Из ТаблицаТары Цикл
		
		НоваяСтрока = ВозвращаемыеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяСтрока);
		
		Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(НоваяСтрока, ВыборкаШапка.ЦенаВключаетНДС, Ложь, Ложь, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("ХозяйственнаяОперация") Тогда
		Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
			Партнер               = Справочники.Партнеры.РозничныйПокупатель;
			ХозяйственнаяОперация = ДанныеЗаполнения.ХозяйственнаяОперация;
			ЗаполнитьУсловияПродажПоУмолчанию();
		КонецЕсли;
	ИначеЕсли ДанныеЗаполнения.Свойство("Партнер") Тогда
		Партнер = ДанныеЗаполнения.Партнер;
		ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииПереданнойТары(Знач РеквизитыЗаполнения)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаполнения.РеквизитыШапки);
	ВернутьМногооборотнуюТару = Истина;
	
	Если Не ЗначениеЗаполнено(Соглашение) Тогда
		ЗаполнитьУсловияПродажПоУмолчанию(Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		
		СрокВозвратаМногооборотнойТары = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			Соглашение,
			"СрокВозвратаМногооборотнойТары"
		);
		
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(РеквизитыЗаполнения.АдресТарыВоВременномХранилище) Тогда
		
		ПереданнаяТара = ПолучитьИзВременногоХранилища(РеквизитыЗаполнения.АдресТарыВоВременномХранилище);
		ВозвращаемыеТовары.Загрузить(ПереданнаяТара);
		
		Для каждого ТекущаяСтрока Из ВозвращаемыеТовары Цикл
			
			ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.Сумма;
			ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.Количество;
			ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			
			Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(ТекущаяСтрока, ЦенаВключаетНДС, Ложь, Ложь, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Менеджер                  = Пользователи.ТекущийПользователь();
	Валюта                    = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
	Организация               = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Подразделение             = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Менеджер, Подразделение);
	Склад                     = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	Касса                     = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Организация, ФормаОплаты, Касса);
	БанковскийСчет            = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, , БанковскийСчет);
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаявокНаВозврат") Тогда
		Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена;
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ЗаполнитьОтветственныхЛицДокумента(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда

		Массив.Добавить(Движения.ЗаявкиНаВозвратТоваровОтКлиентов);
		Массив.Добавить(Движения.ЗаказыКлиентов);
		Массив.Добавить(Движения.ОбеспечениеЗаказовРаботами);

	КонецЕсли;

	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ДвижениеТоваров);
		Массив.Добавить(Движения.РасчетыСКлиентами);

	КонецЕсли;

	Массив.Добавить(Движения.ОбеспечениеЗаказов);
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Функция ВсеСтрокиОтменены()
	
	СтруктураОтбора = Новый Структура("Отменено", Ложь);
	НайтиСтроки = ЗаменяющиеТовары.НайтиСтроки(СтруктураОтбора);
	
	Возврат ?(НайтиСтроки.Количество() = 0, Истина, Ложь);
	
КонецФункции

Функция ПолучитьСуммуДокумента() Экспорт
	
	СуммаЗаказанныхСтрок = 0;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СуммаСНДС КАК СуммаСНДС
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.СуммаСНДС),0) КАК СуммаСНДС
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	ИЛИ (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) И НЕ &ВернутьМногооборотнуюТару)
	|");
	
	Запрос.УстановитьПараметр("Товары", ВозвращаемыеТовары.Выгрузить(,"Номенклатура,СуммаСНДС"));
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", ВернутьМногооборотнуюТару);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	СуммаДокумента = Выгрузка[0].СуммаСНДС;
	Возврат СуммаДокумента;
	
КонецФункции

// Отменяет все строки, по которым не было документально оформлен возврат
//
// Параметры:
//	ПроверятьОстатки - Булево
//
// Возвращаемое значение:
//	Число - Количество отмененных строк
//
Функция ОтменитьНевозвращенныеСтроки(Знач ПроверятьОстатки = Ложь) Экспорт
	
	КоличествоОтмененныхСтрок = 0;
	
	СвойстваОтмененнойСтроки = Новый Структура(
		"Отменено",
		Истина
	);
	
	Если Не ПроверятьОстатки Тогда
		Для н = 0 По ВозвращаемыеТовары.Количество() - 1 Цикл
			Если Не ВозвращаемыеТовары[н].Отменено Тогда
				ЗаполнитьЗначенияСвойств(ВозвращаемыеТовары[н], СвойстваОтмененнойСтроки);
				КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		Возврат КоличествоОтмененныхСтрок;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.КодСтроки КАК ЧИСЛО) КАК КодСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Отменено КАК БУЛЕВО) КАК Отменено
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Отменено = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.КодСтроки КАК КодСтроки,
	|	ЕСТЬNULL(ТаблицаТовары.Упаковка.Коэффициент, 1) КАК КоэффициентУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	Остатки.КОформлениюОстаток,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Количество = Остатки.КОформлениюОстаток
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РазбитьСтроку
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки(, ЗаявкаНаВозвратТоваровОтКлиента = &ЗаявкаНаВозвратТоваровОтКлиента) КАК Остатки
	|		ПО ТаблицаТовары.КодСтроки = Остатки.КодСтроки
	|			И (Остатки.КОформлениюОстаток > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|");
	
	Запрос.УстановитьПараметр(
		"ТаблицаТовары",
		ВозвращаемыеТовары.Выгрузить(
			, // Массив строк для выгрузки
			"НомерСтроки, КодСтроки, Упаковка, Количество, Отменено"
		)
	);
	Запрос.УстановитьПараметр("ЗаявкаНаВозвратТоваровОтКлиента", Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат КоличествоОтмененныхСтрок;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Строка = ВозвращаемыеТовары[Выборка.НомерСтроки-1];
		
		Если Выборка.РазбитьСтроку Тогда
			
			НоваяСтрока = ВозвращаемыеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваОтмененнойСтроки);
			НоваяСтрока.КодСтроки = 0;
			
			Строка.Количество              = Выборка.Количество - Выборка.КОформлениюОстаток;
			Строка.КоличествоУпаковок      = (Выборка.Количество - Выборка.КОформлениюОстаток) / Выборка.КоэффициентУпаковки;
			НоваяСтрока.Количество         = Выборка.КОформлениюОстаток;
			НоваяСтрока.КоличествоУпаковок = Выборка.КОформлениюОстаток / Выборка.КоэффициентУпаковки;
			
			Ценообразование.ПересчитатьСуммыВСтроке(Строка, Ложь, Ложь, Ложь, ЦенаВключаетНДС);
			Ценообразование.ПересчитатьСуммыВСтроке(НоваяСтрока, Ложь, Ложь, Ложь, ЦенаВключаетНДС);
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(Строка, СвойстваОтмененнойСтроки);
			
		КонецЕсли;
		
		КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
		
	КонецЦикла;
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции


#КонецЕсли