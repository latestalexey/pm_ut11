
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	
	ИспользоватьРучныеСкидкиВПродажах         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	ИспользоватьОграниченияРучныхСкидок = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	ИспользоватьСоглашенияСКлиентами         = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьПричиныОтменыЗаказовКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
	
	ДенежныеСредстваСервер.УстановитьВидимостьОплатыПлатежнойКартой(ЭтаФорма, Элементы.ФормаОплаты);
	
	УстановитьВидимостьОперациий();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Заменяющие);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Возвращаемые);
		СтатусДокумента = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.ПустаяСсылка();
		Если НЕ ИспользоватьСоглашенияСКлиентами И НЕ ЗначениеЗаполнено(Объект.ДокументРеализации) Тогда
			ЗаполнитьУсловияПродаж();
		КонецЕсли;
		
	КонецЕсли;
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаявокНаВозврат");
	
	Элементы.ГруппаСтатус.Видимость = ИспользоватьСтатусы;
	
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Элементы.ЗаголовокОрганизация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Элементы.ЗаголовокСклад.Видимость       = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	УстановитьДоступностьКомандБуфераОбмена();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если Объект.Проведен Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Если документ проводится, заполним пустые даты поступления в тч ВозвращаемыеТовары
	// и пустые даты отгрузки в тч ЗаменяющиеТовары, рассчитаем скидки, заполним график оплаты
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(ЭтаФорма, "ВозвращаемыеТовары", "Номенклатура,Характеристика,Количество");
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату") Или
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению") Или
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке") Или
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена") Тогда
			
			Если НЕ Объект.ПоступлениеОднойДатой Тогда
				ЗаполнитьПустыеДатыПоступления();
			Иначе
				ЗаполнитьПустуюДатуПоступления();
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению") Или
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке") Или
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена") Тогда
			
			Если НЕ Объект.НеОтгружатьЧастями Тогда
				ЗаполнитьПустыеДатыОтгрузки();
			Иначе
				ЗаполнитьПустуюДатуОтгрузки();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьАвтоматическиеСкидкиВПродажах И
			Объект.ХозяйственнаяОперация <>  ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера") И
			Объект.ЗаменяющиеТовары.Количество() > 0 Тогда
			
			Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			
				ОтветНаВопрос = СкидкиНаценкиКлиент.ПредложитьПользователюРассчитатьСкидки();
				
				Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
					Отказ = Истина;
					Возврат;
				ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
					ПрименитьИзмененияСкидокНаценокНаКлиенте();
				КонецЕсли;
				
			Иначе
				Объект.СкидкиРассчитаны = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		СуммаВозвращаемыхТоваров = Объект.ВозвращаемыеТовары.Итог("СуммаСНДСБезВозвратнойТары") - Объект.ВозвращаемыеТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары");
		СуммаОстаток = СуммаВозвращаемыхТоваров - СуммаЗаменяющихТоваров;
		СуммаЭтаповОплаты    = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
		ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
		ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты);
		
		РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
		
		Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера")
			И ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
			
			КоличествоЗаменяющихСтрок = Объект.ЗаменяющиеТовары.НайтиСтроки(Новый Структура("Отменено", Ложь)).Количество();
			
			Если КоличествоЗаменяющихСтрок = 0 И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
				
				РежимДиалога = ?(Объект.Согласован, РежимДиалогаВопрос.Ок, РежимДиалогаВопрос.ОкОтмена);
				ТекстВопроса = ?(Объект.Согласован,
				НСтр("ru='В заявке все заменяющие строки отменены. Таблица этапов расчетов будет очищена'"),
				НСтр("ru='В заявке все заменяющие строки отменены. Очистить таблицу этапов расчетов?'"));
				
				ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалога);
				Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				Объект.ЭтапыГрафикаОплаты.Очистить();
				НадписьЭтапыОплаты = НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
				
			ИначеЕсли СуммаЗаменяющихТоваров = 0  И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
				
				РежимДиалога = ?(Объект.Согласован, РежимДиалогаВопрос.Ок, РежимДиалогаВопрос.ОкОтмена);
				ТекстВопроса = ?(Объект.Согласован,
				НСтр("ru='Сумма заменяющих строк нулевая. Таблица этапов расчетов будет очищена'"),
				НСтр("ru='Сумма заменяющих строк нулевая. Очистить таблицу этапов расчетов?'"));
				
				ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалога);
				Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				Объект.ЭтапыГрафикаОплаты.Очистить();
				НадписьЭтапыОплаты = НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
				
			ИначеЕсли СуммаЗаменяющихТоваров <> СуммаЭтаповОплаты Тогда
				
				Если Объект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
					
					Если ГрафикСоглашенияЗаполнен Тогда
						ТекстВопроса = НСтр("ru='Отсутствуют этапы графика расчетов. Заполнить этапы в соответствии с соглашением?'");
					ИначеЕсли ГрафикЗаполнен Тогда
						ТекстВопроса = НСтр("ru='Отсутствуют этапы графика расчетов. Заполнить этапы в соответствии с графиком?'");
					Иначе
						
						// Если сумма заменяющих товаров больше суммы возвращаемых товаров
						// необходимо заполнить два этапа - на возврат и на доплату
						Если СуммаЗаменяющихТоваров > СуммаВозвращаемыхТоваров Тогда
							
							Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) Тогда
								ТекстВопроса = НСтр("ru='Отсутствуют этапы графика расчетов. Добавить этапы ""Предоплата или возврат (до отгрузки)"" на суммы возврата и доплаты на дату планируемого поступления?'");
							Иначе
								ТекстВопроса = НСтр("ru='Отсутствуют этапы графика расчетов. Добавить этапы ""Предоплата или возврат (до отгрузки)"" на суммы возврата и доплаты?'");
							КонецЕсли;
							
						Иначе
							
							Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) Тогда
								ТекстВопроса = НСтр("ru='Отсутствуют этапы графика расчетов. Добавить один этап ""Предоплата или возврат (до отгрузки)"" с оплатой 100% на дату планируемого поступления?'");
							Иначе
								ТекстВопроса = НСтр("ru='Отсутствуют этапы графика расчетов. Добавить один этап ""Предоплата или возврат (до отгрузки)"" с оплатой 100%?'");
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ОтветНаВопрос = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ОкОтмена);
					
					Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
						Отказ = Истина;
						Возврат;
					Иначе 
						Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
							ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
						ИначеЕсли СуммаЗаменяющихТоваров > СуммаВозвращаемыхТоваров Тогда
							ДобавитьЭтапыОплатыВозвратДоплата(
								Объект.ЭтапыГрафикаОплаты,
								Объект.ЖелаемаяДатаПоступления,
								СуммаЗаменяющихТоваров,
								СуммаВозвращаемыхТоваров,
								ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки")
							);
						Иначе
							ЦенообразованиеКлиент.ДобавитьЭтапОплатыПоУмолчанию(
								Объект.ЭтапыГрафикаОплаты,
								Объект.ЖелаемаяДатаПоступления,
								СуммаЗаменяющихТоваров,
								ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки")
							);
						КонецЕсли;
						ЦенообразованиеКлиент.ОповеститьОбОкончанииЗаполненияЭтаповГрафикаОплаты();
						НадписьЭтапыОплаты = НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
					КонецЕсли;
					
				Иначе
					
					РежимДиалога = ?(Объект.Согласован, РежимДиалогаВопрос.Ок, РежимДиалогаВопрос.ОкОтмена);
					ТекстВопроса = ?(Объект.Согласован,
					НСтр("ru='Сумма этапов графика расчетов не совпадает с суммой заменяющих строк. Сумма этапов расчетов будет скорректирована.'"),
					НСтр("ru='Сумма этапов графика расчетов не совпадает с суммой заменяющих строк. Скорректировать сумму этапов расчетов?'"));
					
					ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалога);
					
					Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
						Отказ = Истина;
						Возврат;
					Иначе
						ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, СуммаЗаменяющихТоваров);
						НадписьЭтапыОплаты = НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Предложим пользователю скорректировать желаемую дату отгрузки
		
		Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаОтгрузки) Тогда
			
			МаксДатаАванса = ПродажиКлиент.МаксимальнаяДатаАванса(Объект.ЭтапыГрафикаОплаты);
			ПродажиКлиент.СкорректироватьЖелаемуюДатуОтгрузки(Объект.ЖелаемаяДатаОтгрузки, МаксДатаАванса, Отказ);
			
		КонецЕсли;
		
		РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.ПустаяСсылка();
	КонецЕсли;
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	СтруктураДействий = Новый Структура(
		"ЗаполнитьПризнакХарактеристикиИспользуются,
		|ЗаполнитьПризнакТипНоменклатуры,
		|ЗаполнитьПризнакВариантОформленияПродажи",
		
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
		Новый Структура("Номенклатура", "ТипНоменклатуры"),
		Новый Структура("Номенклатура", "ВариантОформленияПродажи")
	);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ЗаменяющиеТовары, СтруктураДействий);
	СтруктураДействий.ЗаполнитьПризнакХарактеристикиИспользуются.Вставить("НоменклатураОприходование", "ХарактеристикиИспользуютсяОприходование");
	СтруктураДействий.Удалить("ЗаполнитьПризнакВариантОформленияПродажи");
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ВозвращаемыеТовары, СтруктураДействий);
	
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращаемыеТовары, ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	
	ОбновитьСостояниеСервер();
	ЗаполнитьПорядокРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	СкрыватьОтмененныеСтроки = Настройки.Получить("СкрыватьОтмененныеСтроки");
	
	Если СкрыватьОтмененныеСтроки Тогда
		Элементы.ЗаменяющиеТовары.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ЗаменяющиеТовары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	СкрыватьОтмененныеСтрокиВозвращаемыеТовары = Настройки.Получить("СкрыватьОтмененныеСтрокиВозвращаемыеТовары");
	
	Если СкрыватьОтмененныеСтрокиВозвращаемыеТовары Тогда
		Элементы.ВозвращаемыеТовары.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ВозвращаемыеТовары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ВозвращаемыеТоварыСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиВозвращаемыеТовары;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Настройки.Удалить("Объект.НеОтгружатьЧастями");
		Настройки.Удалить("Объект.ПоступлениеОднойДатой");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	УстановитьВидимостьЭлементовФормыДатПоступления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗаменяющиеТовары Тогда
				ОбработатьШтрихкоды(Данные, "ЗаменяющиеТовары");
			Иначе
				ОбработатьШтрихкоды(Данные, "ВозвращаемыеТовары");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗаменяющиеТовары Тогда
			ОбработатьШтрихкоды(ДанныеШтрихкодов, "ЗаменяющиеТовары");
		Иначе
			ОбработатьШтрихкоды(ДанныеШтрихкодов, "ВозвращаемыеТовары");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗачтенаОплата" И Параметр = Объект.Ссылка Тогда
		ОбновитьСостояниеСервер();
		ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
		ОбновитьОграничениеЗадолженности();
	КонецЕсли;
	
	Если ИмяСобытия = "СчитанаКартаЛояльности"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		СчитанаКартаЛояльности(Параметр.КартаЛояльности);
	КонецЕсли;
	
	Если ИмяСобытия = "ПолученыСообщения"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		ПолученыСообщения(Параметр.Сообщения);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗаявкаНаВозвратТоваровОтКлиента", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем ВыполняемаяОперация;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ВыполняемаяОперация", ВыполняемаяОперация) Тогда
		
		Если ВРег(ВыполняемаяОперация) = ВРег("СостояниеОбеспеченияЗаказа") Тогда
			
			ОбработкаВыбораСостояниеОбеспеченияЗаказаНаСервере(ВыбранноеЗначение.АдресВХранилище);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаказКлиента.Форма.РеквизитыПечати" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПечатьЗаявленияНаВозвратТоваровОтКлиента.Форма.РеквизитыПечатиЗаявленияНаВозврат" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборТоваровПоРеализациям" Тогда
		
		ОбработкаВыбораПодборПоРеализацииСервер(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();

	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.Соглашение, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы,Объект);
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	
	Если ЗначениеЗаполнено(Объект.Соглашение) И ИспользоватьСоглашенияСКлиентами Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
	
	Если Не ПартнерИзменился Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы,Объект);
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ПриИзмененииДоговораСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено (Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииСоглашенияСервер();
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Объект.Согласован И 
		Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	
	Если Объект.ВозвращаемыеТовары.Количество() > 0 Тогда
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату") Или
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению") Или
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке") Или
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена") Тогда
			
			Если НЕ Объект.ПоступлениеОднойДатой Тогда
				ЗаполнитьПустыеДатыПоступления();
			Иначе
				ЗаполнитьПустуюДатуПоступления();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ЗаменяющиеТовары.Количество() > 0 Тогда
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению") Или
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке") Или
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена") Тогда
			
			Если НЕ Объект.НеОтгружатьЧастями Тогда
				ЗаполнитьПустыеДатыОтгрузки();
			Иначе
				ЗаполнитьПустуюДатуОтгрузки();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	ПриИзмененииНалогообложенияНДССервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		ПересчитатьСуммы = ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента,"ВозвращаемыеТовары") Или ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента,"ЗаменяющиеТовары");
		
		Если ПересчитатьСуммы Тогда
			ТекстСообщения = НСтр("ru='Пересчитать суммы в документе в валюту ""%Валюта%""?'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", Объект.Валюта);
			ПересчитатьСуммы = (Вопрос(ТекстСообщения,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да);
		КонецЕсли;
		
		ПриИзмененииВалютыСервер(Объект.Валюта, ПересчитатьСуммы);
		
		Если ПересчитатьСуммы Тогда
			ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		КонецЕсли;
		
	КонецЕсли;
	
	ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ПриИзмененииХозяйственнойОперацииСервер();
	ОчиститьДокументыРеализации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикОплатыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
		ПриИзмененииГрафикаОплатыСервер();
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	ПриИзмененииФормыОплатыСервер();
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекККМПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
		
		ВариантыОтветов = Новый СписокЗначений;
		ВариантыОтветов.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Перезаполнить'"));
		ВариантыОтветов.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Не перезаполнять'"));
		
		ОтветНаВопрос = Вопрос(НСтр("ru = 'Перезаполнить возвращаемые товары по выбранному чеку ККМ?'"), ВариантыОтветов);
		
		ПерезаполнитьТовары = (ОтветНаВопрос = КодВозвратаДиалога.Да);
		ПриИзмененииЧекаККМСервер(ПерезаполнитьТовары);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Партнер", "ТолькоПросмотр", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРеализацииПриИзменении(Элемент)
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя") Тогда
		
		Если ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
			
			Если ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(Объект.ЧекККМ) <> Объект.ДокументРеализации Тогда
				Объект.ЧекККМ = Неопределено;
			КонецЕслИ;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПересчитыватьЦены = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Соглашение) 
		И ЗначениеЗаполнено(Объект.Валюта)
		И Объект.ВозвращаемыеТовары.Количество() <> 0
		И Объект.ЗаменяющиеТовары.Количество() <> 0 Тогда
		
		ТекстВопроса = НСтр("ru='Перезаполнить цены?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Если Ответ <> КодВозвратаДиалога.Нет Тогда
			ПерезаполнитьЦены = Истина;
		КонецЕсли;
		
	КонецЕсли;
		
	ЦеныРассчитаны = ДатаПриИзмененииСервер(ПересчитыватьЦены);
	
	Если ПерезаполнитьЦены Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелаемаяДатаОтгрузкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МаксДатаАванса = ПродажиКлиент.МаксимальнаяДатаАванса(Объект.ЭтапыГрафикаОплаты);
	
	Если ЗначениеЗаполнено(МаксДатаАванса) Тогда
		
		ПредставлениеМаксДатаАванса = НСтр("ru='%МаксДатаАванса%'");
		ПредставлениеМаксДатаАванса = СтрЗаменить(ПредставлениеМаксДатаАванса, "%МаксДатаАванса%", Формат(МаксДатаАванса,"ДЛФ=DD"));
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(МаксДатаАванса, ПредставлениеМаксДатаАванса);
		
		ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент);
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			Объект.ЖелаемаяДатаОтгрузки = ВыбранноеЗначение.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КартыЛояльностиКлиент.НачалоВыбораКартыЛояльности(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СчитанаКартаЛояльности(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	ЗаменяющиеТоварыЗаполнитьДатуОтгрузкиСервер(Объект.ДатаОтгрузки, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтгружатьЧастямиПриИзменении(Элемент)
	
	НеОтгружатьЧастямиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеОднойДатойПриИзменении(Элемент)
	
	ПоступлениеОднойДатойПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент)
	
	ЗаполнитьДатыПоступленияСервер(Объект.ДатаПоступления);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокРеализацииНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуМодально(
		"ОбщаяФорма.ПросмотрСпискаДокументов",
		Новый Структура("СписокДокументов, Заголовок",
			СписокРеализаций,
			НСтр("ru='Продажи клиентам (%КоличествоДокументов%)'")
		),
		ЭтаФорма
	);

КонецПроцедуры

&НаКлиенте
Процедура ТекстОстатокДопустимогоКредитаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеПоСуммеПродажи = Новый Структура("СуммаВзаиморасчетов", ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект.ЗаменяющиеТовары, Объект.ЦенаВключаетНДС));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", Объект.Ссылка);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",     Истина);
	ПараметрыФормы.Вставить("Отбор",                       Новый Структура("Договор", Объект.Договор));
	ПараметрыФормы.Вставить("Договор",                     Объект.Договор);
	ПараметрыФормы.Вставить("ДанныеПоСуммеПродажи",        ДанныеПоСуммеПродажи);
	
	ОткрытьФорму("Отчет.ПричиныЗапретаОтгрузки.Форма",
		ПараметрыФормы,
		,
		"Договор=" + Объект.Договор
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьМногооборотнуюТаруПриИзменении(Элемент)
	
	ВернутьМногооборотнуюТаруПриИзмененииСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ, СВЯЗАННЫХ С ДОСТАВКОЙ

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Найти(Элемент.Имя,"АдресДоставкиПолучателя") <> 0 Тогда
		ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(Объект.АдресДоставки,
												Объект.АдресДоставкиЗначенияПолей,
												РедактироватьАдресаДоставкиТолькоВДиалоге,
												АдресаДоставкиТолькоРоссийские);
	Иначе
		ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(Объект.АдресДоставкиПеревозчика,
												Объект.АдресДоставкиПеревозчикаЗначенияПолей,
												РедактироватьАдресаДоставкиТолькоВДиалоге,
												АдресаДоставкиТолькоРоссийские);
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы,Объект,Элемент.Имя,ВыбранноеЗначение);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранноеВремя = РаботаСДиалогамиКлиент.ВыбратьВремя(ЭтаФорма, Элемент, Объект.ВремяДоставкиС);
	Если ВыбранноеВремя <> Неопределено Тогда
		Если ВыбранноеВремя = Дата(1,1,1) Тогда
			Объект.ВремяДоставкиС = Дата(1,1,1,0,0,1);
		Иначе
			Объект.ВремяДоставкиС = ВыбранноеВремя;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиПоНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранноеВремя = РаботаСДиалогамиКлиент.ВыбратьВремя(ЭтаФорма, Элемент, Объект.ВремяДоставкиПо);
	Если ВыбранноеВремя <> Неопределено Тогда
		Если ВыбранноеВремя = Дата(1,1,1) Тогда
			Объект.ВремяДоставкиПо = Дата(1,1,1,0,0,1);
		Иначе
			Объект.ВремяДоставкиПо = ВыбранноеВремя;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ВОЗВРАЩАЕМЫЕ ТОВАРЫ

&НаКлиенте
Процедура ВозвращаемыеТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ВозвращаемыеТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.ВозвращаемыеТовары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И НЕ Объект.Согласован Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Для редактирования цены необходимо выбрать вид цены ""<произвольная>""'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ВозвращаемыеТовары", ТекущиеДанные.НомерСтроки, "ВидЦены"),
			);
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ВозвращаемыеТоварыСтатусУказанияСерий Тогда
		
		Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий.Возвращаемые) Тогда
			ТекущиеДанныеИдентификатор = Элементы.ВозвращаемыеТовары.ТекущиеДанные.ПолучитьИдентификатор();
			ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор,"Возвращаемые");
			
			ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
			
			Если ЗначениеВозврата <> Неопределено Тогда
				ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий,"Возвращаемые");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыПослеУдаления(Элемент)
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.Возвращаемые,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения,"Возвращаемые");
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.Возвращаемые);
		
	КонецЕсли;
	ОбновитьИнформациюПоРеализациям();
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);

КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.ВозвращаемыеТовары.ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
	Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.Возвращаемые, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	ТекущиеДанные = Элементы.ВозвращаемыеТовары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.Возвращаемые) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения,"Возвращаемые");	
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.Возвращаемые);
		
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Объект.ПоступлениеОднойДатой Тогда
			ТекущиеДанные.ДатаПоступления = Объект.ДатаПоступления;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДокументРеализации) Тогда
				ТекущиеДанные.ДокументРеализации = ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(Объект.ЧекККМ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыПередУдалением(Элемент, Отказ)
	
	Отказ = РедактированиеДоступно();
	
	Если Не Отказ Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.Возвращаемые);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = РедактированиеДоступно();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыНоменклатураОприходованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВозвращаемыеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	Если ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущиеДанные.Характеристика);
	КонецЕсли;
	
	ИзменениеКачества = СкладыКлиент.ИзменитьКачество(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращаемыеТовары.ТекущиеДанные;
	
	Если ТекущаяСтрока.Порча
		И ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураОприходование) Тогда
		ЕстьГрадация = ПроверитьНаличиеГрадацииСервер(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.НоменклатураОприходование);
		Если Не ЕстьГрадация Тогда
			ТекущаяСтрока.НоменклатураОприходование = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			ТекущаяСтрока.ХарактеристикаОприходование = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			ТекущаяСтрока.ХарактеристикиИспользуютсяОприходование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращаемыеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращаемыеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыПорчаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращаемыеТовары.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.Порча Тогда
		ТекущаяСтрока.НоменклатураОприходование = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		ТекущаяСтрока.ХарактеристикаОприходование = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		ТекущаяСтрока.ХарактеристикиИспользуютсяОприходование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращаемыеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокВозвращаемыеТовары(СтруктураДействий, Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращаемыеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращаемыеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращаемыеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращаемыеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыНоменклатураОприходованиеПриИзменении(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВозвращаемыеТовары.ТекущиеДанные;
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Номенклатура", ТекущиеДанные.НоменклатураОприходование);
	ТекущаяСтрока.Вставить("ХарактеристикиИспользуются");
	ТекущаяСтрока.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	ТекущиеДанные.ХарактеристикиИспользуютсяОприходование   = ТекущаяСтрока.ХарактеристикиИспользуются;
	ТекущаяСтрока.Свойство("Характеристика", ТекущиеДанные.ХарактеристикаОприходование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВозвращаемыеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыДокументРеализацииПриИзменении(Элемент)
	
	ОбновитьИнформациюПоРеализациям();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ЗАМЕНЯЮЩИЕ ТОВАРЫ

&НаКлиенте
Процедура ЗаменяющиеТоварыПослеУдаления(Элемент)
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.Заменяющие,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения,"Заменяющие");
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.Заменяющие);
		
	КонецЕсли;
	ОбновитьЗависимыеРеквизитыФормы();
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	ТекущиеДанные = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.Заменяющие) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения,"Заменяющие");	
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.Заменяющие);
		
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено И Объект.НеОтгружатьЧастями Тогда
		ТекущиеДанные.ДатаОтгрузки = Объект.ДатаОтгрузки;
	КонецЕсли;
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.ЗаменяющиеТовары.ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
	Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.Заменяющие, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗаменяющиеТоварыПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.ЗаменяющиеТоварыСуммаАвтоматическойСкидки Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ Объект.СкидкиРассчитаны Тогда
			Результат = Вопрос(НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
			Если Результат = КодВозвратаДиалога.Нет Тогда
				Возврат;
			Иначе
				
				СтруктураПараметры = Новый Структура;
				СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
				СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
				СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
				СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
				
				СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
				Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
					ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
			РассчитатьСкидкиБезПримененияКОбъекту();
		КонецЕсли;
		
		ТекущиеДанные = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
		СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
		
	ИначеЕсли Поле = Элементы.ЗаменяющиеТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И НЕ Объект.Согласован Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Для редактирования цены необходимо выбрать вид цены ""<произвольная>""'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЗаменяющиеТовары", ТекущиеДанные.НомерСтроки, "ВидЦены"),
			);
		КонецЕсли;
	ИначеЕсли Поле = Элементы.ЗаменяющиеТоварыСтатусУказанияСерий Тогда
		
		Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий.Заменяющие) Тогда
			ТекущиеДанныеИдентификатор = Элементы.ЗаменяющиеТовары.ТекущиеДанные.ПолучитьИдентификатор();
			ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор,"Заменяющие");
			
			ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
			
			Если ЗначениеВозврата <> Неопределено Тогда
				ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий,"Заменяющие");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыПередУдалением(Элемент, Отказ)
	
	Отказ = РедактированиеДоступно();
	
	Если Не Отказ Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.Заменяющие);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = РедактированиеДоступно();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияМногострочногоТекста(
	Элемент.ТекстРедактирования,
	Элементы.ЗаменяющиеТовары.ТекущиеДанные.Содержание,
	Модифицированность,
	НСтр("ru='Содержание услуги'")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	СтруктураДействий.Вставить("ПроверитьЗаполнитьВариантОбеспечения");
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ОбновитьЗависимыеРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат( ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокЗаменяющиеТовары(СтруктураДействий, Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если Не ТекущаяСтрока.Отменено Тогда
		ТекущаяСтрока.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы =ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера")));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВозвратПорчи(Команда)
	
	Если Объект.ВозвратПорчи Тогда 
		
		ЕстьСтрокиСПорчей = ЕстьСтрокиСПорчей();
		
		Если ЕстьСтрокиСПорчей Тогда
			
			Ответ = Вопрос("При выполнении операции будет очищена информация качестве возвращаемых товаров. Продолжить?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Объект.ВозвратПорчи = Ложь;
		НастроитьФормуДляОтраженияПорчи(Истина);
		
	Иначе
		Объект.ВозвратПорчи = Истина;
		НастроитьФормуДляОтраженияПорчи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыЗаполнитьЦеныПоСоглашению()
	
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "ВозвращаемыеТовары", "Возвращаемые товары") Тогда
		
		ЦеныРассчитаны = ВозвращаемыеТоварыЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыЗаполнитьЦеныПоВидуЦен(Команда)
	
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "ВозвращаемыеТовары", "Возвращаемые товары") Тогда
		
		ВидЦен = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, Истина);
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			ЦеныРассчитаны = ВозвращаемыеТоварыЗаполнитьЦеныПоВидуЦенСервер(ВидЦен);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)
	
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "ВозвращаемыеТовары", "Возвращаемые товары") Тогда
		
		ВидЦен = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, Истина);
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			ЦеныРассчитаны = ВозвращаемыеТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыЗаполнитьДатуПоступленияДляВсехСтрок(Команда)
	
	ЗаполнитьДатуПоступления();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыЗаполнитьДатуПоступленияДляВыделенныхСтрок(Команда)
	
	Если Элементы.ВозвращаемыеТовары.ВыделенныеСтроки.Количество() > 0 Тогда
		ЗаполнитьДатуПоступления(Элементы.ВозвращаемыеТовары.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1), "ВозвращаемыеТовары");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТоварыПоРеализациям(Команда)
	
	Отказ = Ложь;
	ОчиститьСообщения();
	ВозвратОтРозничногоПокупателя = Ложь;
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя") Тогда
		ВозвратОтРозничногоПокупателя = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'Поле ""Валюта"" не заполнено'"),
		Объект.Ссылка, "Объект.Валюта",
		,
		Отказ
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'Поле ""НалогообложениеНДС"" не заполнено'"),
		Объект.Ссылка, "Объект.НалогообложениеНДС",
		,
		Отказ
		);
	КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Организация"" не заполнено'"),
			Объект.Ссылка, "Объект.Организация",
			,
			Отказ
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Партнер"" не заполнено'"),
			Объект.Ссылка, "Объект.Партнер",
			,
			Отказ
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Контрагент"" не заполнено'"),
			Объект.Ссылка, "Объект.Контрагент",
			,
			Отказ
		);
	КонецЕсли;
	
	
	Если Не Отказ Тогда
		
		ПараметрыПодбора = Новый Структура(
			"Партнер, Документ, Валюта, Дата, НалогообложениеНДС, ЦенаВключаетНДС, Соглашение, Организация, Контрагент, ВозвратОтРозничногоПокупателя, ЧекККМ, ПоказыватьТовары, ПоказыватьТару",
			Объект.Партнер,
			Объект.Ссылка,
			Объект.Валюта,
			?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()),
			Объект.НалогообложениеНДС,
			Объект.ЦенаВключаетНДС,
			Объект.Соглашение,
			Объект.Организация,
			Объект.Контрагент,
			ВозвратОтРозничногоПокупателя,
			Объект.ЧекККМ,
			Истина,
			Не ВозвратОтРозничногоПокупателя И Объект.ВернутьМногооборотнуюТару
		);
		
		ОткрытьФорму(
		"ОбщаяФорма.ПодборТоваровПоРеализациям",
		ПараметрыПодбора,
		ЭтаФорма
		);
		
	КонецЕсли;
	
	ОбновитьИнформациюПоРеализациям();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыЗаполнитьЦеныПоСоглашению()
	
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект,"ЗаменяющиеТовары", "Заменяющие товары") Тогда
		
		ЦеныРассчитаны = ЗаменяющиеТоварыЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыЗаполнитьЦеныПоВидуЦен(Команда)
	
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "ЗаменяющиеТовары", "Заменяющие товары") Тогда
		
		ВидЦен = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, Истина);
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			ЦеныРассчитаны = ЗаменяющиеТоварыЗаполнитьЦеныПоВидуЦенСервер(ВидЦен);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)
	
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "ЗаменяющиеТовары", "Заменяющие товары") Тогда
		
		ВидЦен = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, Истина);
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			ЦеныРассчитаны = ЗаменяющиеТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыЗаполнитьДатуОтгрузкиДляВсехСтрок(Команда)
	
	ЗаполнитьДатуОтгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыЗаполнитьДатуОтгрузкиДляВыделенныхСтрок(Команда)
	
	Если Элементы.ЗаменяющиеТовары.ВыделенныеСтроки.Количество() > 0 Тогда
		ЗаполнитьДатуОтгрузки(Элементы.ЗаменяющиеТовары.ВыделенныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыОтменитьВыделенныеСтроки(Команда)
	
	Если Не ПродажиКлиент.НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(Объект.ЗаменяющиеТовары, "Заменяющие товары", Элементы.ЗаменяющиеТовары.ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	Если ИспользоватьПричиныОтменыЗаказовКлиентов Тогда
		ПричинаОтмены = ОткрытьФормуМодально("Справочник.ПричиныОтменыЗаказовКлиентов.ФормаВыбора");
		Если Не ЗначениеЗаполнено(ПричинаОтмены) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	ПродажиКлиент.ОтменитьВыделенныеСтроки(
		Объект.ЗаменяющиеТовары,
		Элементы.ЗаменяющиеТовары.ВыделенныеСтроки,
		ПричинаОтмены,
		СтруктураДействий
	);
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	ПродажиКлиент.ОповеститьОбОтменеВыделенныхСтрок(ПричинаОтмены);
	
	Если ПараметрыУказанияСерий.Заменяющие.ИспользоватьСерииНоменклатуры Тогда
		ЗаполнитьСтатусыУказанияСерий();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыОтменитьВыделенныеСтроки(Команда)
	
	Если Объект.ВозвращаемыеТовары.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Таблица возвращаемых товаров не заполнена.'"));
		Возврат;
	ИначеЕсли Элементы.ВозвращаемыеТовары.ВыделенныеСтроки.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='В таблице товаров отсутствуют выделенные строки.'"));
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	ЕстьОтмененныеСтроки = Ложь;
	
	Для Каждого ТекСтрока Из Элементы.ВозвращаемыеТовары.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ВозвращаемыеТовары.НайтиПоИдентификатору(ТекСтрока);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
				ЕстьОтмененныеСтроки = Истина;
			КонецЕсли;
			
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	Если ЕстьОтмененныеСтроки Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выделенные строки отменены'"),
			,
			НСтр("ru='Выделенные строки заявки отменены.'"),
			БиблиотекаКартинок.Информация32
		);
	Иначе
		Предупреждение(НСтр("ru='Выделенные строки уже отменены.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыОтменитьНевозвращенныеСтроки(Команда)
	
	Если Объект.ВозвращаемыеТовары.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Таблица возвращаемых товаров не заполнена.'"));
		Возврат;
	КонецЕсли;
	
	ЕстьНеотмененныеСтроки = Ложь;
	Для Каждого ТекСтрока Из Объект.ВозвращаемыеТовары Цикл
		Если Не ТекСтрока.Отменено Тогда
			ЕстьНеотмененныеСтроки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьНеотмененныеСтроки Тогда
		Предупреждение(НСтр("ru='Все строки уже отменены.'"));
		Возврат;
	КонецЕсли;
	
	ПроверятьОстатки = Истина;
	
	Если Не Объект.Проведен Тогда
		
		ОтветНаВопрос = Вопрос(НСтр("ru='Заявка не проведена, возврат по заявке не запланирован. Будут отменены все строки. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		ПроверятьОстатки = Ложь;
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована")
		Или СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована")
		Или СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена") Тогда
		
		ТекстВопроса = НСтр("ru='Заявка проведена в статусе %Статус%, возврат по заявке не запланирован. Будут отменены все строки. Продолжить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Статус%", СтатусДокумента);
		
		ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		ПроверятьОстатки = Ложь;
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоСтрокОтменено = ОтменитьНевозвращенныеСтрокиСервер(ПроверятьОстатки);
	
	Если КоличествоСтрокОтменено = 0 Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки не отменены'"),
			,
			НСтр("ru='По всем строкам заказа оформлен возврат. Строки не могут быть отменены.'"),
			БиблиотекаКартинок.Информация32
		);
			
	Иначе
		
		РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
		
		Если ПроверятьОстатки Тогда

			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Строки отменены'"),
				,
				НСтр("ru='Все невозвращенные строки заявки отменены.'"),
				БиблиотекаКартинок.Информация32
			);
		
		Иначе
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Строки отменены'"),
				,
				НСтр("ru='Все возвращаемые строки заявки отменены.'"),
				БиблиотекаКартинок.Информация32
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаменяющиеТоварыПоВозвращаемым(Команда)
	
	Если Объект.ВозвращаемыеТовары.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Таблица возвращаемых товаров не заполнена. Заполнение невозможно.'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.ЗаменяющиеТовары.Количество() > 0 Тогда
		
		ОтветНаВопрос = Вопрос(НСтр("ru='Таблица заменяющих товаров будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗаменяющиеТоварыПоВозвращаемымСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыОтменитьНепоставленныеСтроки(Команда)
	
	Если Не ПродажиКлиент.НеобходимоЗаполнениеПричиныОтменыНепоставленныхСтрок(Объект.ЗаменяющиеТовары, "Заменяющие товары") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьОстатки = Истина;
	
	Если Не Объект.Проведен Тогда
		
		ОтветНаВопрос = Вопрос(НСтр("ru='Заявка не проведена, отгрузка по заявке не запланирована. Будут отменены все строки. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		ПроверятьОстатки = Ложь;
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована")
		Или СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована")
		Или СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату")
		Или СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена")
		Или СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению") Тогда
		
		ТекстВопроса = НСтр("ru='Заявка проведена в статусе %Статус%, отгрузка по заявке не запланирована. Будут отменены все строки. Продолжить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Статус%", СтатусДокумента);
		
		ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		ПроверятьОстатки = Ложь;
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	Если ИспользоватьПричиныОтменыЗаказовКлиентов Тогда
		ПричинаОтмены = ОткрытьФормуМодально("Справочник.ПричиныОтменыЗаказовКлиентов.ФормаВыбора");
		Если Не ЗначениеЗаполнено(ПричинаОтмены) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоСтрокОтменено = ЗаменяющиеТоварыОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены, ПроверятьОстатки);
	
	Если КоличествоСтрокОтменено = 0 Тогда
		
		ПродажиКлиент.ОповеститьОбОтменеНепоставленныхСтрок(ПричинаОтмены, КоличествоСтрокОтменено, ПроверятьОстатки);
		
	Иначе
		
		РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
		ПродажиКлиент.ОповеститьОбОтменеНепоставленныхСтрок(ПричинаОтмены, КоличествоСтрокОтменено, ПроверятьОстатки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыСкрыватьОтмененныеСтроки(Команда)
	
	СкрыватьОтмененныеСтроки = Не СкрыватьОтмененныеСтроки;
	
	Если СкрыватьОтмененныеСтроки Тогда
		Элементы.ЗаменяющиеТовары.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ЗаменяющиеТовары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ЗаменяющиеТоварыСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыСкрыватьОтмененныеСтроки(Команда)
	
	СкрыватьОтмененныеСтрокиВозвращаемыеТовары = Не СкрыватьОтмененныеСтрокиВозвращаемыеТовары;
	
	Если СкрыватьОтмененныеСтрокиВозвращаемыеТовары Тогда
		Элементы.ВозвращаемыеТовары.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ВозвращаемыеТовары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ВозвращаемыеТоварыСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтрокиВозвращаемыеТовары;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	Если Не Объект.СкидкиРассчитаны Тогда
		Результат = Вопрос(НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
		Если Результат = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			
			СтруктураПараметры = Новый Структура;
			СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
			СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
			СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
			СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
			
			СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
			Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
				ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиБезПримененияКОбъекту();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "ЗаменяющиеТовары", "Заменяющие товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	
	СуммаРучнойСкидкиНаценки = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
	АдресВоВременномХранилище,
	Объект.Валюта
	);
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки,,АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "ЗаменяющиеТовары", "Заменяющие товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина);
	
	СуммаРучнойСкидкиНаценки = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
	АдресВоВременномХранилище,
	Объект.Валюта
	);
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.ЗаменяющиеТовары.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	АдресВХранилище = ВыполнитьПредварительныйРасчетСкидокНаСервере();
	ВозвращенноеЗначение = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(АдресВХранилище);
	Если ВозвращенноеЗначение <> Неопределено Тогда
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "ЗаменяющиеТовары", "Заменяющие товары") Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1), "ЗаменяющиеТовары");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Соглашение)
		Или Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "заявку на возврат товаров от клиента");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение",           Объект.Соглашение);
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);	
	КонецЕсли;
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",      Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("СкрыватьПодакцизныеТовары",               Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("ОтображатьФлагСкрыватьПодакцизныеТовары", Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("Склад",                Объект.Склад);
	ПараметрыФормы.Вставить("Валюта",               Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок",            ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                 Объект.Дата);
	ПараметрыФормы.Вставить("Документ",             Объект.Ссылка);
	Если Не Объект.Соглашение.Пустая() Тогда
		СегментНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "СегментНоменклатуры");
		ПараметрыФормы.Вставить("СегментНоменклатуры", СегментНоменклатуры);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма.Элементы.ЗаменяющиеТовары, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбеспечения(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заказ", Объект.Ссылка);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("ЖелаемаяДатаОтгрузки", Объект.ЖелаемаяДатаОтгрузки);
	ПараметрыФормы.Вставить("АдресТовары", ПоместитьЗаменяющиеТоварыВоВременноеХранилище());
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("НеОтгружатьЧастями", Объект.НеОтгружатьЧастями);
	
	ОткрытьФорму("Обработка.СостояниеОбеспечения.Форма.СостояниеОбеспеченияЗаказа", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.ЗаменяющиеТовары;
	ДанныеТаблицы = Объект.ЗаменяющиеТовары;
	ТекущаяСтрока = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
	
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы);
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокЗаменяющиеТовары(СтруктураДействий, Объект);		
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуВозвращаемые(Команда)
	
	ТаблицаФормы  = Элементы.ВозвращаемыеТовары;
	ДанныеТаблицы = Объект.ВозвращаемыеТовары;
	ТекущаяСтрока = Элементы.ВозвращаемыеТовары.ТекущиеДанные;
	
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы);
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокВозвращаемыеТовары(СтруктураДействий, Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЗаменяющиеТовары Тогда
		ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД, "ЗаменяющиеТовары");
	Иначе
		ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД, "ВозвращаемыеТовары");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииВозвращаемые(Команда)
	
	Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий.Возвращаемые) Тогда
		ТекущиеДанныеИдентификатор = Элементы.ВозвращаемыеТовары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор,"Возвращаемые");
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий,"Возвращаемые");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииЗаменяющие(Команда)
	
	Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий.Заменяющие) Тогда
		ТекущиеДанныеИдентификатор = Элементы.ЗаменяющиеТовары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор,"Заменяющие");
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий,"Заменяющие");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьУказаниеСерийЗаменяющие(Команда)
	
	Если НоменклатураКлиент.ПроверитьВозможностьОтменыУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий.Заменяющие) Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий.Заменяющие);
		
		ТекущиеДанные = Элементы.ЗаменяющиеТовары.ТекущиеДанные;
		ТекущиеДанные.УказыватьСерии = Ложь;
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения,"Заменяющие");
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий.Заменяющие);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщения(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуСообщений(ПолучитьСтруктуруСообщений(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьКартуЛояльности(Команда)
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
	"Справочник.КартыЛояльности.Форма.СчитываниеКартыЛояльности",
	Новый Структура("Партнер", Объект.Партнер),
	ЭтаФорма,
	ЭтаФорма.УникальныйИдентификатор
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечати(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                  Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя", Объект.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя",  Объект.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",      Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("Грузоотправитель",               Объект.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",                Объект.Грузополучатель);
	СтруктураПараметров.Вставить("Партнер",                        Объект.Партнер);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация",          Объект.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("Контрагент",                     Объект.Контрагент);
	СтруктураПараметров.Вставить("Организация",                    Объект.Организация);
	СтруктураПараметров.Вставить("Дата",                           Объект.Дата);
	СтруктураПараметров.Вставить("Руководитель",                   Объект.Руководитель);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",               Объект.ГлавныйБухгалтер);
	
	ОткрытьФормуМодально("Документ.ЗаказКлиента.Форма.РеквизитыПечати", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатиЗаявленияНаВозврат(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Контрагент",                          Объект.Контрагент);
	СтруктураПараметров.Вставить("Покупатель",                          Объект.Покупатель);
	СтруктураПараметров.Вставить("ДатаРожденияПокупателя",              Объект.ДатаРожденияПокупателя);
	СтруктураПараметров.Вставить("ПричинаВозврата",                     Объект.ПричинаВозврата);
	СтруктураПараметров.Вставить("ВидДокументаПокупателя",              Объект.ВидДокументаПокупателя);
	СтруктураПараметров.Вставить("СерияДокументаПокупателя",            Объект.СерияДокументаПокупателя);
	СтруктураПараметров.Вставить("НомерДокументаПокупателя",            Объект.НомерДокументаПокупателя);
	СтруктураПараметров.Вставить("ДатаВыдачиДокументаПокупателя",       Объект.ДатаВыдачиДокументаПокупателя);
	СтруктураПараметров.Вставить("СрокДействияДокументаПокупателя",     Объект.СрокДействияДокументаПокупателя);
	СтруктураПараметров.Вставить("КемВыданДокументПокупателя",          Объект.КемВыданДокументПокупателя);
	СтруктураПараметров.Вставить("КодПодразделенияДокументаПокупателя", Объект.КодПодразделенияДокументаПокупателя);
	СтруктураПараметров.Вставить("Организация",                         Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",                       Объект.Дата);
	
	ОткрытьФормуМодально("Обработка.ПечатьЗаявленияНаВозвратТоваровОтКлиента.Форма.РеквизитыПечатиЗаявленияНаВозврат", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДатуОтгрузки(Команда)
	
	РассчитатьДатуОтгрузкиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеализацииИЦены(Команда)
	
	ЗаполнитьРеализацииИЦеныНаСервере();
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	ОбновитьИнформациюПоРеализациям();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтатусДокумента(Команда)
	
	Перем РезультатыПроверки;
	
	ОчиститьСообщения();
	
	ПроверкаЗаполненияИРасчетСтатуса(КэшированныеЗначения, РезультатыПроверки);
	
	ТребуетсяРассчитатьСтатус = Ложь;
	
	Если НЕ РезультатыПроверки.СтатусРассчитан И НЕ РезультатыПроверки.ВопросТребованияРасчета = Неопределено Тогда
		
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить("РассчитатьИЗаполнить", НСтр("ru = 'Рассчитать и заполнить'"));
		КнопкиВопроса.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		
		Ответ = Вопрос(РезультатыПроверки.ВопросТребованияРасчета, 
						КнопкиВопроса, , 
						КнопкиВопроса[1].Значение,
						НСтр("ru= 'Автоматический расчет статуса'"));
		
		Если Ответ = КнопкиВопроса[0].Значение Тогда
			ТребуетсяРассчитатьСтатус = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТребуетсяРассчитатьСтатус Тогда
		РассчитатьСтатусДокументаСервер(КэшированныеЗначения, РезультатыПроверки.СтатусРассчитан);
	КонецЕсли;
	
	ОповеститьОбОкончанииРасчетаСтатуса(РезультатыПроверки.СтатусРассчитан);

КонецПроцедуры

&НаКлиенте
Процедура ВставитьЗаменяющиеСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.ЗаменяющиеТовары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.ЗаменяющиеТовары.Количество()-КоличествоТоваровДоВставки;
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЗаменяющиеСтроки(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ВозможноКопированиеСтрок(Элементы.ЗаменяющиеТовары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере("ЗаменяющиеТовары");
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.ЗаменяющиеТовары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВозвращаемыеТоварыДополнитьМногооборотнойТарой(Команда)

	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"ВозвращаемыеТовары",
		"Номенклатура,Характеристика,Количество,,ДатаПоступления");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыДополнитьМногооборотнойТарой(Команда)

	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"ЗаменяющиеТовары",
		"Номенклатура,Характеристика,Количество,,ДатаОтгрузки");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ЗаполнитьУсловияПродаж();
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Партнер", "ТолькоПросмотр", ЗначениеЗаполнено(Объект.ЧекККМ));
	
	СтруктураДействий = Новый Структура(
	"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
	Новый Структура("Номенклатура", "ВариантОформленияПродажи")
	);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ЗаменяющиеТовары, СтруктураДействий);
	СтруктураДействий.ЗаполнитьПризнакХарактеристикиИспользуются.Вставить("НоменклатураОприходование", "ХарактеристикиИспользуютсяОприходование");
	СтруктураДействий.Удалить("ЗаполнитьПризнакВариантОформленияПродажи");
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ВозвращаемыеТовары, СтруктураДействий);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращаемыеТовары, ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.Договор.Видимость;
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	УстановитьТекущуюСтраницуФормаОплаты();
	ЗаполнитьПорядокРасчетов();
	ОбновитьОграничениеЗадолженности();
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер("Партнер");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоглашенияСервер()
	
	ГрафикОплаты = Объект.ГрафикОплаты;
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоCоглашению();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
	ВалютаДокумента = Объект.Валюта;
	УстановитьВидимостьЭлементовПоОперацииСервер();
	
	ХозяйственнаяОперацияДоговора = ПолучитьХозяйственнуюОперациюДоговора(Объект.ХозяйственнаяОперация);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
		И (ИспользоватьРучныеСкидкиВПродажах Или ИспользоватьАвтоматическиеСкидкиВПродажах)Тогда
		СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "ЗаменяющиеТовары", Истина);
		СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения, Ложь);
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	КонецЕсли;
	
	ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
	ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты) И ГрафикОплаты <> Объект.ГрафикОплаты;
	
	Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
		ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
	ИначеЕсли Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
		ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, СуммаЗаменяющихТоваров);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура(
	"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи", 
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"), 
	Новый Структура("Номенклатура", "ВариантОформленияПродажи")
	);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ЗаменяющиеТовары, СтруктураДействий);
	СтруктураДействий.ЗаполнитьПризнакХарактеристикиИспользуются.Вставить("НоменклатураОприходование", "ХарактеристикиИспользуютсяОприходование");
	СтруктураДействий.Удалить("ЗаполнитьПризнакВариантОформленияПродажи");
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ВозвращаемыеТовары, СтруктураДействий);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращаемыеТовары, ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
	КонецЕсли;
	Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.Договор.Видимость;
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	УстановитьТекущуюСтраницуФормаОплаты();
	ЗаполнитьПорядокРасчетов();
	ОбновитьОграничениеЗадолженности();
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДоговораСервер()
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет, Объект.БанковскийСчетКонтрагента);
	
	ЗаполнитьПорядокРасчетов();
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта, ПересчитатьСуммы)
	
	ЗаполнитьДоговорПоУмолчанию();
	
	Если ПересчитатьСуммы Тогда
		СтараяВалюта                = ВалютаДокумента;
		ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
		СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
		
		Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
		Объект.ВозвращаемыеТовары,
		Объект.ЦенаВключаетНДС,
		СтараяВалюта,
		НоваяВалюта,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты
		);
		
		Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
		Объект.ЗаменяющиеТовары,
		Объект.ЦенаВключаетНДС,
		СтараяВалюта,
		НоваяВалюта,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты,
		Истина,
		Истина
		);
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращаемыеТовары, ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
		РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер()
	
	ХозяйственнаяОперацияДоговора = ПолучитьХозяйственнуюОперациюДоговора(Объект.ХозяйственнаяОперация);
	
	ЗаполнитьДоговорПоУмолчанию();
	
	Объект.ЧекККМ = Неопределено;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		
		Если (ИспользоватьРучныеСкидкиВПродажах Или ИспользоватьАвтоматическиеСкидкиВПродажах)Тогда
			
			СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "ЗаменяющиеТовары", Истина);
			СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения, Ложь);
			ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
			РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
			
		КонецЕсли;
		
		Объект.ЭтапыГрафикаОплаты.Очистить();
		НадписьЭтапыОплаты = НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		КонецЕсли; 
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		
		ПартнерИзменен = Ложь;
			
		Если Объект.Партнер <> Справочники.Партнеры.РозничныйПокупатель Тогда
			Объект.Партнер = Справочники.Партнеры.РозничныйПокупатель;
			ПартнерИзменен = Истина;
		КонецЕсли;
		
		Если ПартнерИзменен Тогда
			
			Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
			ПриИзмененииПартнераСервер();
		КонецЕсли;
		
		Объект.ЗаменяющиеТовары.Очистить();
		Объект.ЭтапыГрафикаОплаты.Очистить();
		НадписьЭтапыОплаты = НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
		Объект.ВернутьМногооборотнуюТару = Ложь;
		ВернутьМногооборотнуюТаруПриИзмененииСервер();
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Партнер", "ТолькоПросмотр", ЗначениеЗаполнено(Объект.ЧекККМ));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СрокВозвратаМногооборотнойТары", "ТолькоПросмотр", Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВернутьМногооборотнуюТару", "ТолькоПросмотр", Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	
	УстановитьВидимостьЭлементовПоОперацииСервер();
	ЗаполнитьПорядокРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.Договор.Видимость;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.Договор.Видимость;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, , Объект.БанковскийСчет);
		КонецЕсли;
		
		Объект.Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплаты, Объект.Касса);
		
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииГрафикаОплатыСервер()
	
	ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
	ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты);
	
	Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
		ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
	КонецЕсли;
	
	Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплаты, Объект.БанковскийСчет);
	Объект.Касса          = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплаты, Объект.Касса);
	УстановитьТекущуюСтраницуФормаОплаты();
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	НадписьЭтапыОплаты = НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФормыОплатыСервер()
	
	УстановитьТекущуюСтраницуФормаОплаты();
	
	Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, , Объект.БанковскийСчет);
	Объект.Касса          = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплаты, Объект.Касса);
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииСервер()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаявкаНаВозвратТоваровОтКлиента));
	УстановитьВидимостьЭлементовСерий();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Заменяющие);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Возвращаемые);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЧекаККМСервер(ПерезаполнитьТовары)
	
	ДокументРеализации = ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(Объект.ЧекККМ);
	
	Для каждого СтрокаТовары Из Объект.ВозвращаемыеТовары Цикл
		СтрокаТовары.ДокументРеализации = ДокументРеализации;
	КонецЦикла;
	Объект.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЧекККМ, "Партнер");
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ВалютаДокумента = Объект.Валюта;
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
			И (ИспользоватьРучныеСкидкиВПродажах Или ИспользоватьАвтоматическиеСкидкиВПродажах)Тогда
			СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "ЗаменяющиеТовары", Истина);
			СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения, Ложь);
		КонецЕсли;
		
		УстановитьВидимостьЭлементовПоОперацииСервер();
		
		ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
		ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты);
		
		Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
			ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
		ИначеЕсли Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, СуммаЗаменяющихТоваров);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Партнер", "ТолькоПросмотр", ЗначениеЗаполнено(Объект.ЧекККМ));
	
	СтруктураДействий = Новый Структура(
	"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
	Новый Структура("Номенклатура", "ВариантОформленияПродажи")
	);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ЗаменяющиеТовары, СтруктураДействий);
	СтруктураДействий.ЗаполнитьПризнакХарактеристикиИспользуются.Вставить("НоменклатураОприходование", "ХарактеристикиИспользуютсяОприходование");
	СтруктураДействий.Удалить("ЗаполнитьПризнакВариантОформленияПродажи");
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ВозвращаемыеТовары, СтруктураДействий);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращаемыеТовары, ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.Договор.Видимость;
	
	Если ПерезаполнитьТовары Тогда
		ЗаполнитьВозвращаемыеТоварыПоЧеку();
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	УстановитьТекущуюСтраницуФормаОплаты();
	ЗаполнитьПорядокРасчетов();

КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ВозвращаемыеТовары, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ЗаменяющиеТовары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращаемыеТовары, ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНалогообложенияНДССервер()
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ВозвращаемыеТовары, СтруктураДействий, Неопределено);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ЗаменяющиеТовары, СтруктураДействий, Неопределено);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращаемыеТовары, ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаСервере 
Процедура НеОтгружатьЧастямиПриИзмененииСервер(УчитыватьСостояниеОбеспечения = Ложь)
	
	// Вычислим максимальную дату отгрузки и приведем к ней ТЧ
	Если Объект.НеОтгружатьЧастями Тогда
		ДокументПродажи = РеквизитФормыВЗначение("Объект");
		ДокументПродажи.РассчитатьДатуОтгрузки(УчитыватьСостояниеОбеспечения);
		ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
		
		ЗаменяющиеТоварыЗаполнитьДатуОтгрузкиСервер(Объект.ДатаОтгрузки, Неопределено);
		
		СтруктураДействий = Новый Структура(
		"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи", 
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"), 
		Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		);
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ЗаменяющиеТовары,СтруктураДействий);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	
КонецПроцедуры

&НаСервере 
Процедура ПоступлениеОднойДатойПриИзмененииСервер()
	
	// Вычислим максимальную дату поступления и приведем к ней ТЧ
	Если Объект.ПоступлениеОднойДатой Тогда
		
		Объект.ДатаПоступления = МаксимальнаяДатаПоступления();
		
		ЗаполнитьДатыПоступленияСервер(Объект.ДатаПоступления);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормыДатПоступления();
	
КонецПроцедуры

&НаСервере
Функция ДатаПриИзмененииСервер(ПересчитыватьЦены)
	
	Если ПересчитыватьЦены Тогда
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
	Иначе
		ЦеныРассчитаны = Ложь;
	КонецЕсли;

	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Ценообразование и скидки

Функция ЗаполнитьЦеныПоСоглашениюСервер()
	
	ЦеныРассчитаны = ЗаменяющиеТоварыЗаполнитьЦеныПоСоглашениюСервер();
	ЦеныРассчитаны = ЦеныРассчитаны Или ВозвращаемыеТоварыЗаполнитьЦеныПоСоглашениюСервер();
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруСообщений()
	
	Возврат СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	
КонецФункции

&НаСервере
Процедура ПолученыСообщения(Сообщения)
	
	СкидкиНаценкиСервер.СохранитьОтработанныеСообщения(Объект, Сообщения);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, ВзятьИзВременногоХранилища = Ложь)
	
	Если ВзятьИзВременногоХранилища Тогда
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		СкидкиНаценкиСервер.ПрименитьРезультатРасчета(Объект, ПримененныеСкидки);
	Иначе
		ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Объект.СкидкиРассчитаны = Истина;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	СтруктураСообщений = СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "ЗаменяющиеТовары", Истина, Истина);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
КонецПроцедуры

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки = Неопределено, АдресВоВременномХранилище)
	
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "ЗаменяющиеТовары", СуммаСкидкиНаценки, Истина, , Истина,, ВыделенныеСтроки, АдресВоВременномХранилище);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
	НСтр("ru = 'Скидки (наценки)'"),
	,
	НСтр("ru = 'Скидки (наценки) рассчитаны'"),
	БиблиотекаКартинок.Информация32
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияСкидокНаценокНаКлиенте()
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(Неопределено, Истина);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
	НСтр("ru = 'Скидки (наценки)'"),
	,
	НСтр("ru = 'Скидки (наценки) рассчитаны'"),
	БиблиотекаКартинок.Информация32
	);
	
КонецПроцедуры

&НаСервере
Функция ВозвращаемыеТоварыЗаполнитьЦеныПоСоглашениюСервер()
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
	Объект.ВозвращаемыеТовары,
	, // Массив строк или структура отбора
	Новый Структура( // Параметры заполнения
	"Дата, Валюта, Соглашение, ПоляЗаполнения",
	Объект.Дата,
	Объект.Валюта,
	Объект.Соглашение,
	"Цена, СтавкаНДС, ВидЦены"
	),
	Новый Структура( // Структура действий с измененными строками
	"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС",
	"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы
	)
	);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ВозвращаемыеТоварыЗаполнитьЦеныПоВидуЦенСервер(ВидЦен)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
	Объект.ВозвращаемыеТовары,
	, // Массив строк или структура отбора
	Новый Структура( // Параметры заполнения
	"Дата, Валюта, ВидЦены, ПоляЗаполнения",
	Объект.Дата,
	Объект.Валюта,
	ВидЦен,
	"Цена, ВидЦены"
	),
	Новый Структура( // Структура действий с измененными строками
	"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС",
	"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы
	)
	);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ВозвращаемыеТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.ВозвращаемыеТовары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.ВозвращаемыеТовары.НайтиПоИдентификатору(Строка));
		
	КонецЦикла;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
	Объект.ВозвращаемыеТовары,
	МассивСтрок, // Массив строк или структура отбора
	Новый Структура( // Параметры заполнения
	"Дата, Валюта, ВидЦены, ПоляЗаполнения",
	Объект.Дата,
	Объект.Валюта,
	ВидЦен,
	"Цена, ВидЦены"
	),
	Новый Структура( // Структура действий с измененными строками
	"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС",
	"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы
	)
	);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаменяющиеТоварыЗаполнитьЦеныПоСоглашениюСервер()
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
	Объект.ЗаменяющиеТовары,
	, // Массив строк или структура отбора
	Новый Структура( // Параметры заполнения
	"Дата, Валюта, Соглашение, ПоляЗаполнения",
	Объект.Дата,
	Объект.Валюта,
	Объект.Соглашение,
	"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
	),
	Новый Структура( // Структура действий с измененными строками
	"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
	"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)
	)
	);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаменяющиеТоварыЗаполнитьЦеныПоВидуЦенСервер(ВидЦен)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
	Объект.ЗаменяющиеТовары,
	, // Массив строк или структура отбора
	Новый Структура( // Параметры заполнения
	"Дата, Валюта, ВидЦены, ПоляЗаполнения",
	Объект.Дата,
	Объект.Валюта,
	ВидЦен,
	"Цена, ВидЦены"
	),
	Новый Структура( // Структура действий с измененными строками
	"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
	"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)
	)
	);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаменяющиеТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.ВозвращаемыеТовары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.ВозвращаемыеТовары.НайтиПоИдентификатору(Строка));
		
	КонецЦикла;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
	Объект.ЗаменяющиеТовары,
	МассивСтрок, // Массив строк или структура отбора
	Новый Структура( // Параметры заполнения
	"Дата, Валюта, ВидЦены, ПоляЗаполнения",
	Объект.Дата,
	Объект.Валюта,
	ВидЦен,
	"Цена, ВидЦены"
	),
	Новый Структура( // Структура действий с измененными строками
	"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
	"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)
	)
	);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.ЗаменяющиеТовары.Итог("СуммаАвтоматическойСкидкиБезВозвратнойТары") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].НапомнитьПозже <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].НапомнитьПозже Тогда
				СкидкиИзменились = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подборы и обработка проверки количества

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Соглашение"" не заполнено'"), Объект.Ссылка, "Объект.Соглашение",,Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.ЗаменяющиеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, Упаковка, ВидЦены, Цена, КоличествоУпаковок, СрокПоставки, ПроцентРучнойСкидки");
		
		Если Объект.НеОтгружатьЧастями Тогда
			ТекущаяСтрока.ДатаОтгрузки = Объект.ДатаОтгрузки;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокЗаменяющиеТовары(СтруктураДействий, Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	СтруктураДействий = Новый Структура(
	"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
	Новый Структура("Номенклатура", "ВариантОформленияПродажи")
	);
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ЗаменяющиеТовары,СтруктураДействий);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Заменяющие);
	ОбновитьЗависимыеРеквизитыФормыСервер();
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборПоРеализацииСервер(ВыбранноеЗначение)
	
	СтруктураВозвращаемыхЗначений = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ТаблицаТоваров = СтруктураВозвращаемыхЗначений.Товары;
	СтруктураШапки = СтруктураВозвращаемыхЗначений.СтруктураШапки;
	
	ВозвратОтРозничногоПокупателя = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	КоличествоТоваровПервоначально = Объект.ВозвращаемыеТовары.Количество();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.ВозвращаемыеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма / ТекущаяСтрока.КоличествоУпаковок;
		
		Если Объект.ПоступлениеОднойДатой Тогда
			ТекущаяСтрока.ДатаПоступления = Объект.ДатаПоступления;
		КонецЕсли;
		Если ВозвратОтРозничногоПокупателя Тогда
			ТекущаяСтрока.ДокументРеализации = ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(СтрокаТовара.ДокументРеализации);
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.Партнер = СтруктураШапки.Партнер;
	Если ЗначениеЗаполнено(СтруктураШапки.ЧекККМ) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ЧекККМ) и КоличествоТоваровПервоначально=0 Тогда
			Объект.ЧекККМ = СтруктураШапки.ЧекККМ;
			Объект.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЧекККМ, "Партнер");
			ПриИзмененииПартнераСервер();
		КонецЕсли;
	КонецЕсли;
	
	
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
	Новый Структура("Номенклатура", "ВариантОформленияПродажи")
	);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ЗаменяющиеТовары, СтруктураДействий);
	СтруктураДействий.ЗаполнитьПризнакХарактеристикиИспользуются.Вставить("НоменклатураОприходование", "ХарактеристикиИспользуютсяОприходование");
	СтруктураДействий.Удалить("ЗаполнитьПризнакВариантОформленияПродажи");
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ВозвращаемыеТовары, СтруктураДействий);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Возвращаемые);
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	ОбновитьИнформациюПоРеализациям();
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, ИмяТабличнойЧасти = "")
	
	ИзменятьКоличество = Не Объект.Согласован;
	
	Если ИмяТабличнойЧасти = "ЗаменяющиеТовары" Тогда
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействийСДобавленнымиСтроками = Новый Структура;
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
			СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
		КонецЕсли;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокЗаменяющиеТовары(СтруктураДействийСДобавленнымиСтроками, Объект);
		
		СтруктураДействийСИзмененнымиСтроками = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокЗаменяющиеТовары(СтруктураДействийСИзмененнымиСтроками, Объект);
		
		СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

		СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
		СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
		СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
		СтруктураДействий.ПараметрыУказанияСерий                 = Неопределено;
		СтруктураДействий.ИмяТЧ                                  = ИмяТабличнойЧасти;
		СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
		СтруктураДействий.ТолькоТовары                           = Истина;
		
		ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
		
		ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
		
		Если ИзменятьКоличество Тогда
			РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		КонецЕсли;
		
		Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
			
			Элементы.ЗаменяющиеТовары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
			
		КонецЕсли;
		
		
	Иначе
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействийСДобавленнымиСтроками = Новый Структура;
		Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
			СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
		КонецЕсли;
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокВозвращаемыеТовары(СтруктураДействийСДобавленнымиСтроками, Объект);
		
		СтруктураДействийСИзмененнымиСтроками = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокВозвращаемыеТовары(СтруктураДействийСИзмененнымиСтроками, Объект);
		
		СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

		СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
		СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
		СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
		СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий.Возвращаемые;
		СтруктураДействий.ИмяТЧ                                  = ИмяТабличнойЧасти;
		СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
		СтруктураДействий.ТолькоТовары                           = Истина;
		
		ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
		
		ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
		
		Если СтруктураДействий.МассивСтрокССериями.Количество() = 1
			И НоменклатураКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий.Возвращаемые) Тогда
			
			ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
			
			ПодключитьОбработчикОжидания("ОткрытьФормуУказанияСерийВозвращаемыеТовары",0.1,Истина);
			
		КонецЕсли;
		
		Если ИзменятьКоличество Тогда
			РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
		КонецЕсли;
		
		Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
			
			Элементы.ВозвращаемыеТовары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор,ИмяТЧ)
	
	Возврат НоменклатураСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий[ИмяТЧ], ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуУказанияСерийВозвращаемыеТовары()
	
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор,"Возвращаемые");
	
	ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий,"Возвращаемые");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий ()
	
	Элементы.ВозвращаемыеТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.Возвращаемые.ИспользоватьСерииНоменклатуры;
	Элементы.ВозвращаемыеТоварыУказатьСерии.Видимость        = ПараметрыУказанияСерий.Возвращаемые.ИспользоватьСерииНоменклатуры;
	
	Элементы.ЗаменяющиеТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.Заменяющие.ИспользоватьСерииНоменклатуры;
	
	Элементы.ЗаменяющиеТоварыУказатьСерии.Видимость                         = ПараметрыУказанияСерий.Заменяющие.ИспользоватьСерииНоменклатуры;
	Элементы.ЗаменяющиеТоварыКонтекстноеМенюУказатьСерии.Видимость          = ПараметрыУказанияСерий.Заменяющие.ИспользоватьСерииНоменклатуры;
	Элементы.ЗаменяющиеТоварыОтменитьУказаниеСерий.Видимость                = ПараметрыУказанияСерий.Заменяющие.ИспользоватьСерииНоменклатуры;
	Элементы.ЗаменяющиеТоварыКонтекстноеМенюОтменитьУказаниеСерий.Видимость = ПараметрыУказанияСерий.Заменяющие.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, ИмяТЧ)
	
	СтруктураДействий = Новый Структура;
	Если ИмяТЧ = "ВозвращаемыеТовары" Тогда
		СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокВозвращаемыеТовары(СтруктураДействий, Объект);
	КонецЕсли;
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий[ИмяТЧ],ПараметрыФормыУказанияСерий,СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерий()
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Заменяющие);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения, ИмяТЧ)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
	ПараметрыУказанияСерий[ИмяТЧ], ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Порча

&НаСервере
Функция  ЕстьСтрокиСПорчей()
	
	Возврат Объект.ВозвращаемыеТовары.НайтиСтроки(Новый Структура("НоменклатураОприходование", Справочники.Номенклатура.ПустаяСсылка())).Количество()
	<> Объект.ВозвращаемыеТовары.Количество() ;
	
КонецФункции

&НаСервере
Функция  ОчиститьИнформациюОПорче()
	
	Для Каждого СтрТабл Из Объект.ВозвращаемыеТовары Цикл
		СтрТабл.Порча                     = Ложь;
		СтрТабл.НоменклатураОприходование = Справочники.Номенклатура.ПустаяСсылка();
		СтрТабл.ХарактеристикаОприходование = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЦикла;
	
	Если ПараметрыУказанияСерий.Возвращаемые.ИспользоватьСерииНоменклатуры Тогда
		Для Каждого СтрТабл Из Объект.ВозвращаемыеСерии Цикл
			СтрТабл.НоменклатураОприходование   = Справочники.Номенклатура.ПустаяСсылка();
			СтрТабл.ХарактеристикаОприходование = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура НастроитьФормуДляОтраженияПорчи(ОчищатьПорчу = Ложь)
	
	Элементы.ВозвратПорчи.Пометка                                           = Объект.ВозвратПорчи;
	Элементы.ВозвращаемыеТоварыГруппаРанееОтгруженныйТовар.ОтображатьВШапке = Объект.ВозвратПорчи;
	Элементы.ВозвращаемыеТоварыГруппаВозвращаемыйТовар.Видимость            = Объект.ВозвратПорчи;
	
	Если ОчищатьПорчу Тогда
		ОчиститьИнформациюОПорче()
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Автоматический расчет статуса заявки

&НаСервере 
Процедура ПроверкаЗаполненияИРасчетСтатуса(КэшированныеЗначения, РезультатПроверки)
	
	РезультатПроверки = Новый Структура("СтатусРассчитан, ВопросТребованияРасчета", Ложь, Неопределено);
	
	ТекстВопроса = "Для автоматического расчета статуса требуется:" + Символы.ПС;
	ЕстьТребованияРасчета = Ложь;
	
	// Проверим необходимые для расчета статуса данные
	
	// Проверим скидки и наценки
	Если ИспользоватьАвтоматическиеСкидкиВПродажах И
		Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера") И
		Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
		
		ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Рассчитать автоматические скидки (наценки).'");
		
		ЕстьТребованияРасчета = Истина;
		
	КонецЕсли;
	
	// Проверим даты поступления
	Если Не (Объект.Склад.Пустая() 
		Или Объект.ВозвращаемыеТовары.Количество() = 0)
		И ЗакупкиВызовСервера.ДатаПоступленияПустая(Объект, "ВозвращаемыеТовары") Тогда
		
		Если Объект.ПоступлениеОднойДатой Тогда
			ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Заполнить дату поступления.'");
		Иначе
			ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Заполнить даты поступления возвращаемых товаров.'");
		КонецЕсли;
		
		ЕстьТребованияРасчета = Истина;
		
	КонецЕсли;

	// Проверим даты отгрузки
	Если Не (Объект.Склад.Пустая() 
		Или Объект.ЗаменяющиеТовары.Количество() = 0)
		И ПродажиВызовСервера.ДатаОтгрузкиПустая(Объект, "ЗаменяющиеТовары") Тогда
		
		Если Объект.НеОтгружатьЧастями Тогда
			ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Заполнить дату отгрузки.'");
		Иначе
			ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Заполнить даты отгрузки заменяющих товаров.'");
		КонецЕсли;
		
		ЕстьТребованияРасчета = Истина;
		
	КонецЕсли;
	
	// Проверим этапы оплаты
	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера")
		И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		
		СуммаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
		
		// Очистим если все строки отменены или сумма нулевая
		Если СуммаЗаменяющихТоваров = 0  И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			КоличествоЗаказанныхСтрок = Объект.ЗаменяющиеТовары.НайтиСтроки(Новый Структура("Отменено", Ложь)).Количество();
			
			Если КоличествоЗаказанныхСтрок = 0 И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
				ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Очистить таблицу этапов расчетов, так как в заявке все строки отменены.'");
				
			Иначе
				ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Очистить таблицу этапов расчетов, так как сумма строк заменяющих товаров нулевая.'");
				
			КонецЕсли;
			
			ЕстьТребованияРасчета = Истина;
		
		ИначеЕсли СуммаЗаменяющихТоваров <> СуммаЭтаповОплаты Тогда
			
			Если Объект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
				
				ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
				ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты);
				
				Если ГрафикСоглашенияЗаполнен Тогда
					ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Заполнить этапы расчетов в соответствии с соглашением.'");
				ИначеЕсли ГрафикЗаполнен Тогда
					ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Заполнить этапы расчетов в соответствии с графиком оплаты.'");
				Иначе
					Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаОтгрузки) Тогда
						ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru='Заполнить этапы расчетов. Будет добавлен один этап ""%ВариантОплаты%"" с оплатой 100% на дату планируемой отгрузки.'");
						
					Иначе
						ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru='Заполнить этапы расчетов. Будет добавлен один этап ""%ВариантОплаты%"" с оплатой 100%.'");
						
					КонецЕсли;
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВариантОплаты%", ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки"));
				КонецЕсли;
				
			Иначе
				
				ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru='Скорректировать суммы этапов расчетов, так как они не совпадают с суммой заменяющих строк.'");
				
			КонецЕсли;
			
			ЕстьТребованияРасчета = Истина;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьТребованияРасчета Тогда
		РезультатПроверки.ВопросТребованияРасчета = ТекстВопроса;
		
	Иначе
		РассчитатьСтатусДокументаСервер(КэшированныеЗначения, РезультатПроверки.СтатусРассчитан);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура РассчитатьСтатусДокументаСервер(КэшированныеЗначения, СтатусРассчитан)
	
	СтатусДоРасчета = Объект.Статус;
	
	ЗаполнитьПередРасчетомМаксимальногоСтатуса(КэшированныеЗначения);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Заказ", Объект.Ссылка);
	ПараметрыРасчета.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	ПараметрыРасчета.Вставить("Проведен", Объект.Проведен);
	ПараметрыРасчета.Вставить("Статус", Объект.Статус);
	ПараметрыРасчета.Вставить("СуммаАвансаДоОбеспечения", СуммаАвансаДоОбеспечения);
	ПараметрыРасчета.Вставить("СуммаПредоплатыДоОтгрузки", СуммаПредоплатыДоОтгрузки);
	ПараметрыРасчета.Вставить("СуммаДокумента", СуммаЗаменяющихТоваров);
	ПараметрыРасчета.Вставить("Договор", Объект.Договор);
	ПараметрыРасчета.Вставить("ПорядокРасчетов", ПорядокРасчетов);
	ПараметрыРасчета.Вставить("Склад", Объект.Склад);
	ПараметрыРасчета.Вставить("ЖелаемаяДатаОтгрузки", Объект.ЖелаемаяДатаОтгрузки);
	ПараметрыРасчета.Вставить("АдресТовары", ПоместитьВоВременноеХранилище(Объект.ЗаменяющиеТовары.Выгрузить()));
	ПараметрыРасчета.Вставить("ЭтапыГрафикаОплаты", Объект.ЭтапыГрафикаОплаты);
	ПараметрыРасчета.Вставить("ОтборПоСостояниюНаличия", Перечисления.СостоянияНаличия.Любое);
	ПараметрыРасчета.Вставить("НеОтгружатьЧастями", Объект.НеОтгружатьЧастями);
	ПараметрыРасчета.Вставить("ВсеСтрокиОтменены", ВсеСтрокиОтменены);
	ПараметрыРасчета.Вставить("ВсеВозвращаемыеСтрокиОтменены", ВсеВозвращаемыеСтрокиОтменены);
	ПараметрыРасчета.Вставить("ЕстьЗаменяющиеТовары", Объект.ЗаменяющиеТовары.Количество()>0);
	
	Если Не ДокументЗаполненКорректно() Тогда
		Если Объект.Статус.Пустая() Тогда
			Объект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована;
			ТекстСообщения = НСтр("ru = 'Максимально возможный статус - """ + Объект.Статус + """, так как документ заполнен некорректно'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Статус не может быть рассчитан, так как документ заполнен некорректно'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		Возврат;
		
	КонецЕсли;
	
	Объект.Статус = Документы.ЗаявкаНаВозвратТоваровОтКлиента.МаксимальныйСтатусЗаявкиНаВозвратТоваровОтКлиента(ПараметрыРасчета, КэшированныеЗначения);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ЗаменяющиеТовары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")

		)
	);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ВозвращаемыеТовары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	Если НЕ СтатусДоРасчета = Объект.Статус Тогда
		СтатусРассчитан = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьПередРасчетомМаксимальногоСтатуса(КэшированныеЗначения)
	
	// Заполним необходимые для расчета статуса данные
	
	// Заполним скидки и наценки
	Если ИспользоватьАвтоматическиеСкидкиВПродажах И
		Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера") И
		Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		
	КонецЕсли;
	
	// Заполним даты отгрузки
	Если Объект.Склад.Пустая() 
		Или Объект.ЗаменяющиеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПродажиВызовСервера.ДатаОтгрузкиПустая(Объект, "ЗаменяющиеТовары") Тогда
		Если Объект.НеОтгружатьЧастями Тогда
			ДокументПродажи = РеквизитФормыВЗначение("Объект");
			ДокументПродажи.РассчитатьДатуОтгрузки(Истина);
			ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
			
			ЗаменяющиеТоварыЗаполнитьДатуОтгрузкиСервер(Объект.ДатаОтгрузки, Неопределено);
		Иначе
			РассчитатьДатуОтгрузкиСервер();
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним даты поступления
	Если Объект.Склад.Пустая() 
		Или Объект.ВозвращаемыеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакупкиВызовСервера.ДатаПоступленияПустая(Объект, "ВозвращаемыеТовары") Тогда
		Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
			ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
		Иначе
			ДатаПоступления = ТекущаяДата();
		КонецЕсли;

		Если Объект.ПоступлениеОднойДатой Тогда
			ЗаполнитьПустуюДатуПоступленияСервер(ДатаПоступления, Неопределено);
		Иначе
			ЗаполнитьПустыеДатыПоступленияСервер(ДатаПоступления);
		КонецЕсли;
	КонецЕсли;
	
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	Для Каждого ТекущаяСтрока Из Объект.ВозвращаемыеТовары Цикл
		Если ТекущаяСтрока.Отменено Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
	Для Каждого ТекущаяСтрока Из Объект.ЗаменяющиеТовары Цикл
		Если ТекущаяСтрока.Отменено Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;

	// Заполним этапы оплаты
	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера")
		И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		
		СуммаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
		РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
		ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
		ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты);
		
		// Очистим если все строки отменены или сумма нулевая
		Если СуммаЗаменяющихТоваров = 0  И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Если ВсеСтрокиОтменены И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
				Объект.ЭтапыГрафикаОплаты.Очистить();
				
			Иначе
				Объект.ЭтапыГрафикаОплаты.Очистить();
				
			КонецЕсли;
			
			НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
			
		ИначеЕсли СуммаЗаменяющихТоваров <> СуммаЭтаповОплаты Тогда
			
			// Заполним этапы оплаты, если они не указаны
			Если Объект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
				
				Если Объект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
					
					Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
						ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
					Иначе
						ДокументПродажи = РеквизитФормыВЗначение("Объект");
						ДокументПродажи.ЗаполнитьЭтапыГрафикаОплаты();
						ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
					КонецЕсли;
					
					НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
				Иначе
					
					ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, СуммаЗаменяющихТоваров);
					
					НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
					
				КонецЕсли;
				
				// Перезаполним если сумма заказанных строк не совпадает с суммой по этапам оплаты
			Иначе
				
				ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, СуммаЗаменяющихТоваров);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаСервере 
Функция ДокументЗаполненКорректно()
	
	ЕстьОшибки = Ложь;
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента"));
	УстановитьСоответствиеОбъектаИРеквизитаФормы(ДокументОбъект, "Объект");
	
	ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке;
	
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ДокументОбъект, ЕстьОшибки);
	
	ДокументОбъект.Статус = Объект.Статус;
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ЗаменяющиеТовары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ВозвращаемыеТовары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"))
	);

	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращаемыеТовары, ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Заменяющие);
	
	ОтборПоПустым = Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	ИскомыеЗаменяющиеСтроки = Объект.ЗаменяющиеТовары.НайтиСтроки(ОтборПоПустым);
	ИскомыеВозвращаемыеСтроки = Объект.ВозвращаемыеТовары.НайтиСтроки(ОтборПоПустым);
	
	Если Объект.Соглашение.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Соглашение"" не заполнено'"), ,
			"Объект.Соглашение");
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Если НЕ Объект.Соглашение.Пустая()
		И Объект.Соглашение.ИспользуютсяДоговорыКонтрагентов
		И Объект.Договор.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Договор"" не заполнено'"), ,
			"Объект.Договор");
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Если ИскомыеЗаменяющиеСтроки.Количество() > 0 Тогда
		Для Каждого ИскомаяСтрока Из ИскомыеЗаменяющиеСтроки Цикл 
			АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ИскомаяСтрока.НомерСтроки);
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Номенклатура""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки, ,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЗаменяющиеТовары", ИскомаяСтрока.НомерСтроки, "Номенклатура"), "Объект",
				ЕстьОшибки
			);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ВозвращаемыеТовары.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указан ни один возвращаемый товар'"), ,
			"Объект.ВозвращаемыеТовары");
		
		ЕстьОшибки = Истина;
		
	ИначеЕсли ИскомыеВозвращаемыеСтроки.Количество() > 0 Тогда
		Для Каждого ИскомаяСтрока Из ИскомыеВозвращаемыеСтроки Цикл 
			АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ИскомаяСтрока.НомерСтроки);
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Номенклатура""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки, ,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВозвращаемыеТовары", ИскомаяСтрока.НомерСтроки, "Номенклатура"), "Объект",
				ЕстьОшибки
			);
		КонецЦикла;
	КонецЕсли;

	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера")
		И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
		И Объект.ЭтапыГрафикаОплаты.Количество() = 0 И Объект.ЗаменяющиеТовары.Количество() <> 0 Тогда
		
		Если НЕ ВсеСтрокиОтменены Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнены этапы графика оплаты'"), ,
				"НадписьЭтапыОплаты");
			
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

&НаКлиенте 
Процедура ОповеститьОбОкончанииРасчетаСтатуса(СтатусРассчитан = Истина) Экспорт

	Если СтатусРассчитан Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Статус заявки на возврат рассчитан'"),
			,
			НСтр("ru = 'Статус заявки на возврат изменен на'") + Символы.НПП + """" + Объект.Статус + """",
			БиблиотекаКартинок.Информация32
		);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Статус заявки на возврат не рассчитан'"),
			,
			НСтр("ru = 'Статус заявки на возврат остался прежним'") + Символы.НПП + """" + Объект.Статус + """",
			БиблиотекаКартинок.Информация32
		);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ВалютаДокумента = Объект.Валюта;
	ХозяйственнаяОперацияДоговора = ПолучитьХозяйственнуюОперациюДоговора(Объект.ХозяйственнаяОперация);
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	УстановитьВидимостьЭлементовПоОперацииСервер();
	УстановитьТекущуюСтраницуФормаОплаты();

	СтруктураДействий = Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи", 
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"), 
	Новый Структура("Номенклатура", "ВариантОформленияПродажи")
	);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ЗаменяющиеТовары, СтруктураДействий);
	СтруктураДействий.ЗаполнитьПризнакХарактеристикиИспользуются.Вставить("НоменклатураОприходование", "ХарактеристикиИспользуютсяОприходование");
	СтруктураДействий.Удалить("ЗаполнитьПризнакВариантОформленияПродажи");
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаявкаНаВозвратТоваровОтКлиента));
	УстановитьВидимостьЭлементовСерий();
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ВозвращаемыеТовары, СтруктураДействий);
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращаемыеТовары, ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.Договор.Видимость;
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	ОбновитьСостояниеСервер();
	ЗаполнитьПорядокРасчетов();
	НастроитьФормуДляОтраженияПорчи();
	НадписьЭтапыОплаты = НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
		УстановитьВидимостьЭлементовФормыДатОтгрузки();
	УстановитьВидимостьЭлементовФормыДатПоступления();
	ОбновитьИнформациюПоРеализациям();
	
	ИспользоватьУправлениеДоставкой = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");
	Если ИспользоватьУправлениеДоставкой Тогда
		РедактироватьАдресаДоставкиТолькоВДиалоге = ПолучитьФункциональнуюОпцию("РедактироватьАдресаДоставкиТолькоВДиалоге");
		АдресаДоставкиТолькоРоссийские = ПолучитьФункциональнуюОпцию("АдресаДоставкиТолькоРоссийские");
		ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы,Объект);
	Иначе
		Элементы.СтраницаДоставка.Видимость = Ложь;
	КонецЕсли;
	ОбновитьЗависимыеРеквизитыФормыСервер();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СрокВозвратаМногооборотнойТары", "ТолькоПросмотр", Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВернутьМногооборотнуюТару", "ТолькоПросмотр", Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(Форма)
	
	КоллекцияЗаменяющиеТовары = Форма.Объект.ЗаменяющиеТовары;
	
	Форма.СуммаНДСЗаменяющихТоваров = КоллекцияЗаменяющиеТовары.Итог("СуммаНДСБезВозвратнойТары") - КоллекцияЗаменяющиеТовары.Итог("СуммаНДСОтмененоБезВозвратнойТары");
	Форма.СуммаЗаменяющихТоваров = КоллекцияЗаменяющиеТовары.Итог("СуммаСНДСБезВозвратнойТары") - КоллекцияЗаменяющиеТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары");
	Форма.СуммаОтмененоЗаменяющихТоваров = КоллекцияЗаменяющиеТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары");
	Форма.СуммаАвтоСкидки = КоллекцияЗаменяющиеТовары.Итог("СуммаАвтоматическойСкидкиБезВозвратнойТары") - КоллекцияЗаменяющиеТовары.Итог("СуммаАвтоматическойСкидкиОтмененоБезВозвратнойТары");
	Форма.СуммаРучнойСкидки = КоллекцияЗаменяющиеТовары.Итог("СуммаРучнойСкидкиБезВозвратнойТары") - КоллекцияЗаменяющиеТовары.Итог("СуммаРучнойСкидкиОтмененоБезВозвратнойТары");
	Форма.СуммаСкидки = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	
	СуммаЗаказано = КоллекцияЗаменяющиеТовары.Итог("СуммаБезВозвратнойТары") - КоллекцияЗаменяющиеТовары.Итог("СуммаОтмененоБезВозвратнойТары");
	
	КоллекцияВозвращаемыеТовары = Форма.Объект.ВозвращаемыеТовары;
	
	Форма.СуммаНДСВозвращаемыхТоваров = КоллекцияВозвращаемыеТовары.Итог("СуммаНДСБезВозвратнойТары") - КоллекцияВозвращаемыеТовары.Итог("СуммаНДСОтмененоБезВозвратнойТары");
	Форма.СуммаВозвращаемыхТоваров = КоллекцияВозвращаемыеТовары.Итог("СуммаСНДСБезВозвратнойТары") - КоллекцияВозвращаемыеТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары");
	Форма.СуммаОтмененоВозвращаемыхТоваров = КоллекцияВозвращаемыеТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары");
	
	Если СуммаЗаказано > 0 Тогда
		
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаЗаказано + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаЗаказано + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
		
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
		
	Иначе
		
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
		
	КонецЕсли;
	
	Если КоллекцияЗаменяющиеТовары.Количество() > 0 И СуммаЗаказано = 0 Тогда
		Форма.ВсеСтрокиОтменены = Истина;
	Иначе
		Форма.ВсеСтрокиОтменены = Ложь;
	КонецЕсли;
	
	Форма.СуммаАвансаДоОбеспечения    = 0;
	Форма.СуммаПредоплатыДоОтгрузки   = 0;
	Форма.СуммаКредитаПослеОтгрузки   = 0;
	Форма.ПроцентАвансаДоОбеспечения  = 0;
	Форма.ПроцентПредоплатыДоОтгрузки = 0;
	Форма.ПроцентКредитаПослеОтгрузки = 0;
	ПроцентПлатежейОбщий              = 0;
	
	СоответствиеВариантовОплаты = Новый Соответствие;
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения"),
	Новый Структура("Сумма, Проценты", "СуммаАвансаДоОбеспечения", "ПроцентАвансаДоОбеспечения")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки"),
	Новый Структура("Сумма, Проценты", "СуммаПредоплатыДоОтгрузки", "ПроцентПредоплатыДоОтгрузки")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки"),
	Новый Структура("Сумма, Проценты", "СуммаКредитаПослеОтгрузки", "ПроцентКредитаПослеОтгрузки")
	);
	
	ПредыдущееЗначениеДаты = Дата(1, 1, 1);
	Форма.НомерСтрокиПолнойОплаты = 0;
	Для Каждого ТекСтрока Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		ПроцентПлатежейОбщий = ПроцентПлатежейОбщий + ТекСтрока.ПроцентПлатежа;
		ТекСтрока.ПроцентЗаполненНеВерно = (ПроцентПлатежейОбщий > 100);
		ТекСтрока.ДатаЗаполненаНеВерно = (ПредыдущееЗначениеДаты > ТекСтрока.ДатаПлатежа);
		ПредыдущееЗначениеДаты = ТекСтрока.ДатаПлатежа;
		Если ПроцентПлатежейОбщий = 100 Тогда
			Форма.НомерСтрокиПолнойОплаты = ТекСтрока.НомерСтроки;
		КонецЕсли;
		ИменаЭлементов = СоответствиеВариантовОплаты[ТекСтрока.ВариантОплаты];
		Если ИменаЭлементов <> Неопределено Тогда
			Форма[ИменаЭлементов.Сумма] = Форма[ИменаЭлементов.Сумма] + ТекСтрока.СуммаПлатежа;
			Форма[ИменаЭлементов.Проценты] = Форма[ИменаЭлементов.Проценты] + ТекСтрока.ПроцентПлатежа;
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС")
		ИЛИ Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД") Тогда
		
		Форма.Элементы.ГруппаСтраницыНДСВозвращаемыеТовары.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДСВозвращаемыеТовары;
		Форма.Элементы.ГруппаСтраницыВсегоВозвращаемыеТовары.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДСВозвращаемыеТовары;
		Форма.Элементы.ГруппаСтраницыНДСЗаменяющиеТовары.ТекущаяСтраница     = Форма.Элементы.СтраницаБезНДСЗаменяющиеТовары;
		Форма.Элементы.ГруппаСтраницыВсегоЗаменяющиеТовары.ТекущаяСтраница   = Форма.Элементы.СтраницаВсегоБезНДСЗаменяющиеТовары;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДСВозвращаемыеТовары.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДСВозвращаемыеТовары;
		Форма.Элементы.ГруппаСтраницыВсегоВозвращаемыеТовары.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДСВозвращаемыеТовары;
		Форма.Элементы.ГруппаСтраницыНДСЗаменяющиеТовары.ТекущаяСтраница     = Форма.Элементы.СтраницаСНДСЗаменяющиеТовары;
		Форма.Элементы.ГруппаСтраницыВсегоЗаменяющиеТовары.ТекущаяСтраница   = Форма.Элементы.СтраницаВсегоСНДСЗаменяющиеТовары;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьХозяйственнуюОперациюДоговора(ХозяйственнаяОперация)
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияВРозницу");
	ИначеЕсли ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту");
	ИначеЕсли ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПустаяСсылка");
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары()
	
	Возврат Новый Структура(
		"БезВозвратнойТары,ОтмененоБезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары()
	
	Возврат Новый Структура(
		"БезВозвратнойТары,ОтмененоБезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС",
		"Сумма,СуммаНДС,СуммаСНДС");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокВозвращаемыеТовары(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокЗаменяющиеТовары(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
			Объект.Договор,
			Объект.Партнер,
			Объект.Контрагент,
			Объект.Организация,
			ХозяйственнаяОперацияДоговора,
			Объект.Валюта,
			Объект.Соглашение
		);
		
		Если Договор <> Объект.Договор Тогда
			Объект.Договор = Договор;
			ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет, Объект.БанковскийСчетКонтрагента);
		КонецЕсли;
		
		ЗаполнитьПорядокРасчетов();
		ОбновитьОграничениеЗадолженности();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОперациий()
	
	Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьКомиссиюПриПродажах") Тогда
		
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьРозничныеПродажи") Тогда
		
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ХозяйственнаяОперация.СписокВыбора.Количество() = 1 Тогда 
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ХозяйственнаяОперация", "ТолькоПросмотр", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Ложь;
	
	Если Объект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована Или
		Объект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена Тогда
		
		УстановитьПодписку = Ложь;
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована Или
		Объект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату Или
		Объект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению Или
		Объект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке Или
		Объект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена Тогда
		
		УстановитьПодписку = Объект.Согласован;
		
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Соглашение");
	МассивЭлементов.Добавить("Договор");
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("НалогообложениеНДС");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("ЖелаемаяДатаПоступления");
	МассивЭлементов.Добавить("ДатаСогласования");
	МассивЭлементов.Добавить("ЖелаемаяДатаОтгрузки");
	МассивЭлементов.Добавить("НеОтгружатьЧастями");
	МассивЭлементов.Добавить("ДатаОтгрузки");
	МассивЭлементов.Добавить("ХозяйственнаяОперация");
	МассивЭлементов.Добавить("ДокументРеализации");
	МассивЭлементов.Добавить("КартаЛояльности");
	МассивЭлементов.Добавить("ПоступлениеОднойДатой");
	МассивЭлементов.Добавить("ДатаПоступления");
	МассивЭлементов.Добавить("ЧекККМ");
	МассивЭлементов.Добавить("ВернутьМногооборотнуюТару");
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	
	// Элементы управления, связанные с оплатой
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("ФормаОплаты");
	
	// Элементы управления, связанные с таблицей Возвращаемые товары
	МассивЭлементов.Добавить("ВозвращаемыеТоварыНоменклатура");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыПорча");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыНоменклатураОприходование");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыХарактеристика");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыХарактеристикаОприходование");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыКоличествоУпаковок");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыУпаковка");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыВидЦены");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыЦена");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыСтавкаНДС");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыСумма");
	
	// Элементы управления, связанные с таблицей Заменяющие товары
	МассивЭлементов.Добавить("ЗаменяющиеТоварыНоменклатура");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыХарактеристика");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыКоличествоУпаковок");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыУпаковка");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыВидЦены");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыЦена");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыСтавкаНДС");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыПроцентРучнойСкидки");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыСуммаРучнойСкидки");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыСумма");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыСодержание");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
	
	МассивЭлементов = Новый Массив;
	
	МассивЭлементов.Добавить("ВозвращаемыеТовары;ПередНачаломДобавления,ПередУдалением");
	МассивЭлементов.Добавить("ЗаменяющиеТовары;ПередНачаломДобавления,ПередУдалением");
	
	// Элементы управления, связанные с таблицей Возвращаемые товары
	МассивЭлементов.Добавить("ВозвращаемыеТоварыКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыКонтекстноеМенюУдалить");
	
	МассивЭлементов.Добавить("ВозвращаемыеТоварыДобавить");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыИзменить");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыСкопировать");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыУдалить");
	
	МассивЭлементов.Добавить("ВозвращаемыеТоварыЗаполнитьЦеныПоСоглашению");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыЗаполнитьЦеныПоВидуЦен");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыЗагрузитьДанныеИзТСД");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыПодобратьТоварыПоРеализациям");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыЗаполнитьРеализацииИЦены");
	МассивЭлементов.Добавить("ВозвратПорчи");
	
	// Элементы управления, связанные с таблицей Заменяющие товары
	МассивЭлементов.Добавить("ЗаменяющиеТоварыКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыКонтекстноеМенюУдалить");
	
	МассивЭлементов.Добавить("ЗаменяющиеТоварыДобавить");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыИзменить");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыСкопировать");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыУдалить");
	
	МассивЭлементов.Добавить("ЗаменяющиеТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("КартаЛояльности");
	
	МассивЭлементов.Добавить("ЗаменяющиеТоварыЗаполнитьЦеныПоСоглашению");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыЗаполнитьЦеныПоВидуЦен");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыЗаменяющиеТоварыОткрытьПодбор");
	
	МассивЭлементов.Добавить("ЗаменяющиеТоварыПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыЗагрузитьДанныеИзТСД");
	
	МассивЭлементов.Добавить("ЗаменяющиеТоварыЗаполнитьЗаменяющиеТоварыПоВозвращаемым");
	МассивЭлементов.Добавить("РассчитатьДатуОтгрузки");
	
	Если НЕ Объект.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению Тогда
		МассивЭлементов.Добавить("ЗаменяющиеТоварыУказатьСерии");
		МассивЭлементов.Добавить("ЗаменяющиеТоварыКонтекстноеМенюУказатьСерии");
		МассивЭлементов.Добавить("ЗаменяющиеТоварыОтменитьУказаниеСерий");
		МассивЭлементов.Добавить("ЗаменяющиеТоварыКонтекстноеМенюОтменитьУказаниеСерий");
	КонецЕсли;
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Партнер", "ТолькоПросмотр", ЗначениеЗаполнено(Объект.ЧекККМ));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
	Объект.ХозяйственнаяОперация, 
	МассивВсехРеквизитов, 
	МассивРеквизитовОперации
	);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
	Элементы,
	МассивВсехРеквизитов,
	МассивРеквизитовОперации
	);
	
	ЭтоВозвратОтКомиссионера = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("СуммаВсегоСНДСВозвращаемыхТоваров");
	МассивЭлементов.Добавить("СуммаВсегоБезНДСВозвращаемыхТоваров");
	МассивЭлементов.Добавить("СуммаНДСВозвращаемыхТоваров");
	МассивЭлементов.Добавить("ПолеБезНДСВозвращаемыхТоваров");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыЗаполнитьЦеныПоСоглашению");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыЗаполнитьЦеныПоВидуЦен");
	МассивЭлементов.Добавить("ВозвращаемыеТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Не ЭтоВозвратОтКомиссионера);
	
	ЭтоВозвратОтРозничногоПокупателя = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекККМ", "Видимость", ЭтоВозвратОтРозничногоПокупателя);
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("Сделка");
	МассивЭлементов.Добавить("ЗаменяющиеТовары");
	МассивЭлементов.Добавить("ЖелаемаяДатаОтгрузки");
	МассивЭлементов.Добавить("НеОтгружатьЧастями");
	МассивЭлементов.Добавить("ДатаОтгрузки");
	МассивЭлементов.Добавить("РассчитатьДатуОтгрузки");
	МассивЭлементов.Добавить("СуммаВсегоСНДСЗаменяющихТоваров");
	МассивЭлементов.Добавить("СуммаВсегоБезНДСЗаменяющихТоваров");
	МассивЭлементов.Добавить("СуммаНДСЗаменяющихТоваров");
	МассивЭлементов.Добавить("СуммаОтмененоЗаменяющихТоваров");
	МассивЭлементов.Добавить("ПолеБезНДСЗаменяющихТоваров");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Не ЭтоВозвратОтРозничногоПокупателя);
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("НадписьЭтапыОплаты");
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("НадписьЭтапыОплаты");
	МассивЭлементов.Добавить("Касса");
	МассивЭлементов.Добавить("БанковскийСчет");
	МассивЭлементов.Добавить("СуммаАвансаДоОбеспечения");
	МассивЭлементов.Добавить("ПроцентАвансаДоОбеспечения");
	МассивЭлементов.Добавить("СуммаПредоплатыДоОтгрузки");
	МассивЭлементов.Добавить("ПроцентПредоплатыДоОтгрузки");
	МассивЭлементов.Добавить("СуммаКредитаПослеОтгрузки");
	МассивЭлементов.Добавить("ПроцентКредитаПослеОтгрузки");
	МассивЭлементов.Добавить("НашДолгСуммаДолга");
	МассивЭлементов.Добавить("ДолгКлиентаСуммаДолга");
	МассивЭлементов.Добавить("СуммаДолга");
	МассивЭлементов.Добавить("ПроцентДолга");
	МассивЭлементов.Добавить("СуммаОплаты");
	МассивЭлементов.Добавить("ПроцентОплаты");
	МассивЭлементов.Добавить("СуммаОтгрузки");
	МассивЭлементов.Добавить("ПроцентОтгрузки");
	МассивЭлементов.Добавить("СуммаСкидки");
	МассивЭлементов.Добавить("ПроцентСкидки");
	МассивЭлементов.Добавить("СуммаАвтоСкидки");
	МассивЭлементов.Добавить("ПроцентАвтоСкидки");
	МассивЭлементов.Добавить("СуммаРучнойСкидки");
	МассивЭлементов.Добавить("ПроцентРучнойСкидки");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыОткрытьИнформациюОСкидках");
	МассивЭлементов.Добавить("КонтекстноеМенюЗаменяющиеТоварыОткрытьИнформациюОСкидках");
	МассивЭлементов.Добавить("ЗаменяющиеТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("КартаЛояльности");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Не (ЭтоВозвратОтКомиссионера Или ЭтоВозвратОтРозничногоПокупателя));
	
	МассивТипов = Новый Массив();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
	Иначе
		МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	КонецЕсли;
	
	Элементы.ВозвращаемыеТоварыДокументРеализации.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
	ПродажиСервер.ЗаполнитьСписокВыбораНалогообложения(Объект.ХозяйственнаяОперация, Элементы.НалогообложениеНДС);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуФормаОплаты()
	
	Если Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		Элементы.СтраницыФормаОплаты.ТекущаяСтраница = Элементы.СтраницаНаличнаяОплата;
	Иначе
		Элементы.СтраницыФормаОплаты.ТекущаяСтраница = Элементы.СтраницаПрочаяОплата;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораСостояниеОбеспеченияЗаказаНаСервере(АдресТоваровВХранилище)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокЗаменяющиеТовары(СтруктураДействий, Объект);	
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Объект.ЗаменяющиеТовары.Загрузить(ПолучитьИзВременногоХранилища(АдресТоваровВХранилище));
	
	Для каждого СтрокаТовары Из Объект.ЗаменяющиеТовары Цикл
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовары, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура(
	"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи", 
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"), 
	Новый Структура("Номенклатура", "ВариантОформленияПродажи")
	);
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ЗаменяющиеТовары,СтруктураДействий);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращаемыеТовары, ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДокументСервер()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	УстановитьВидимостьЭлементовПоОперацииСервер();
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	ЗаполнитьПорядокРасчетов();
	
КонецПроцедуры

&НаСервере
Функция ПоместитьЗаменяющиеТоварыВоВременноеХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ЗаменяющиеТовары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Функция РедактированиеДоступно()
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована") Или
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату") Или
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению") Или
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке") Или
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена") Тогда
		
		Отказ = Объект.Согласован;
		
	Иначе
		
		Отказ = Ложь;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеГрадацииСервер(ТоварИсходногоКачества, ТоварДругогоКачества)
	
	Возврат РегистрыСведений.ТоварыДругогоКачества.ПроверитьНаличиеГрадации(ТоварИсходногоКачества, ТоварДругогоКачества);
	
КонецФункции

&НаСервере
Процедура ЗаменяющиеТоварыЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, Знач МассивВыделенныхСтрок)
	
	Если МассивВыделенныхСтрок = Неопределено Тогда
		
		Для Каждого СтрокаТЧ Из Объект.ЗаменяющиеТовары Цикл
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТЧ = Объект.ЗаменяющиеТовары.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаменяющиеТоварыРассчитатьДатыОтгрузкиСервер()
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.РассчитатьДатыОтгрузки();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
	СтруктураДействий = Новый Структура(
	"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи", 
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"), 
	Новый Структура("Номенклатура", "ВариантОформленияПродажи")
	);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ЗаменяющиеТовары, СтруктураДействий);
	СтруктураДействий.ЗаполнитьПризнакХарактеристикиИспользуются.Вставить("НоменклатураОприходование", "ХарактеристикиИспользуютсяОприходование");
	СтруктураДействий.Удалить("ЗаполнитьПризнакВариантОформленияПродажи");
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ВозвращаемыеТовары, СтруктураДействий);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращаемыеТовары, ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	
КонецПроцедуры

&НаСервере
Функция ЗаменяющиеТоварыОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены, Знач ПроверятьОстатки = Ложь)
	
	КоличествоОтмененныхСтрок = ПродажиСервер.ОтменитьНепоставленныеСтроки(Объект, "ЗаменяющиеТовары", ПричинаОтмены, ПроверятьОстатки);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
	Если КоличествоОтмененныхСтрок > 0 Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий.Заменяющие)
	КонецЕсли;
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗаменяющиеТоварыПоВозвращаемымСервер()
	
	Объект.ЗаменяющиеТовары.Загрузить(Объект.ВозвращаемыеТовары.Выгрузить(
	Объект.ВозвращаемыеТовары.НайтиСтроки(Новый Структура("Отменено", Ложь)),
	"Номенклатура,
	|Характеристика,
	|Упаковка,
	|КоличествоУпаковок,
	|Количество,ВидЦены,
	|Цена,
	|Сумма,
	|СуммаСНДС,
	|СтавкаНДС,
	|СуммаНДС")
	);
	
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
	Новый Структура("Номенклатура", "ВариантОформленияПродажи")
	);
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ЗаменяющиеТовары,СтруктураДействий);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ЗАменяющиеТовары, СтруктураДействий, Неопределено);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Заменяющие);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеДатыПоступленияСервер(ДатаПоступления);
	
	Для Каждого СтрокаТЧ Из Объект.ВозвращаемыеТовары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура РассчитатьДатуОтгрузкиСервер()
	
	НеОтгружатьЧастямиПриИзмененииСервер(Истина);
	
	ЗаменяющиеТоварыЗаполнитьДатуОтгрузкиСервер(Объект.ДатаОтгрузки, Неопределено);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьСостояниеСервер()
	
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.РассчитатьСостояние(
		Объект.Ссылка,
		Объект.Договор,
		ЭтаФорма);
	
	Если СуммаДолга = 0 Тогда
		Элементы.ГруппаДолг.ТекущаяСтраница = Элементы.ГруппаСтраницаДолг;
	ИначеЕсли СуммаДолга > 0 Тогда
		Элементы.ГруппаДолг.ТекущаяСтраница = Элементы.ГруппаСтраницаДолгКлиента;
	Иначе
		Элементы.ГруппаДолг.ТекущаяСтраница = Элементы.ГруппаСтраницаНашДолг;
	КонецЕсли;
	
	Если СуммаДолга < 0 Тогда
		СуммаДолга = - СуммаДолга;
	КонецЕсли;
	
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам()
	
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		Элементы.ГруппаРасчеты.Заголовок = НСтр("ru='Расчеты по договору'");
	Иначе
		Элементы.ГруппаРасчеты.Заголовок = НСтр("ru='Расчеты по заявке на возврат'");
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ПроцентДолга");
	МассивЭлементов.Добавить("СуммаОплаты");
	МассивЭлементов.Добавить("ПроцентОплаты");
	МассивЭлементов.Добавить("СуммаОтгрузки");
	МассивЭлементов.Добавить("ПроцентОтгрузки");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
		И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
	);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("НашДолгСуммаДолга");
	МассивЭлементов.Добавить("ДолгКлиентаСуммаДолга");
	МассивЭлементов.Добавить("СуммаДолга");
	МассивЭлементов.Добавить("ПроцентДолга");
	МассивЭлементов.Добавить("СуммаОплаты");
	МассивЭлементов.Добавить("ПроцентОплаты");
	МассивЭлементов.Добавить("СуммаОтгрузки");
	МассивЭлементов.Добавить("ПроцентОтгрузки");
	МассивЭлементов.Добавить("СуммаАвансаДоОбеспечения");
	МассивЭлементов.Добавить("ПроцентАвансаДоОбеспечения");
	МассивЭлементов.Добавить("СуммаПредоплатыДоОтгрузки");
	МассивЭлементов.Добавить("ПроцентПредоплатыДоОтгрузки");
	МассивЭлементов.Добавить("СуммаКредитаПослеОтгрузки");
	МассивЭлементов.Добавить("ПроцентКредитаПослеОтгрузки");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Контрагент)
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПустыеДатыПоступления()
	
	Если Объект.ВозвращаемыеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакупкиВызовСервера.ДатаПоступленияПустая(Объект, "ВозвращаемыеТовары") Тогда
		
		ТекстВопроса = НСтр("ru='Заполнить дату поступления в строках, в которых дата не заполнена?'");
		ОтветНаВопрос = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
		// Предложим выбрать дату и заполним этой датой дату в строках
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			
			Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
				ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
			Иначе
				ДатаПоступления = ТекущаяДата();
			КонецЕсли;
			
			Если РаботаСДиалогамиКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаПоступления, НСтр("ru='Введите дату поступления'"), ЧастиДаты.Дата) Тогда
				ЗаполнитьПустыеДатыПоступленияСервер(ДатаПоступления);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПоступления(МассивВыделенныхСтрок = Неопределено)
	
	ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
	
	Если РаботаСДиалогамиКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаПоступления, НСтр("ru='Введите дату поступления'"), ЧастиДаты.Дата) Тогда
		
		Если МассивВыделенныхСтрок = Неопределено Тогда
			
			Для Каждого СтрокаТЧ Из Объект.ВозвращаемыеТовары Цикл
				СтрокаТЧ.ДатаПоступления = ДатаПоступления;
			КонецЦикла;
			
		Иначе
			
			Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
				
				СтрокаТЧ = Объект.ВозвращаемыеТовары.НайтиПоИдентификатору(ИдентификаторСтроки);
				СтрокаТЧ.ДатаПоступления = ДатаПоступления;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияДатПоступления(ДатаПоступления, (МассивВыделенныхСтрок <> Неопределено));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПустыеДатыОтгрузки()
	
	Если Объект.Склад.Пустая() Или Объект.ЗаменяющиеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПродажиВызовСервера.ДатаОтгрузкиПустая(Объект, "ЗаменяющиеТовары") Тогда
		
		ТекстВопроса = НСтр("ru='Дата отгрузки заполнена не во всех строках. Рассчитать дату отгрузки?'");
		
		ОтветНаВопрос = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			
			ЗаменяющиеТоварыРассчитатьДатыОтгрузкиСервер();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПустуюДатуОтгрузки()
	
	Если Объект.Склад.Пустая() Или Объект.ЗаменяющиеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПродажиВызовСервера.ДатаОтгрузкиПустая(Объект, "ЗаменяющиеТовары") Тогда
		
		ТекстВопроса = НСтр("ru='Дата отгрузки не заполнена. Рассчитать дату отгрузки?'");
		
		ОтветНаВопрос = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			НеОтгружатьЧастямиПриИзмененииСервер(Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузки(МассивВыделенныхСтрок = Неопределено)
	
	ДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
	
	Если РаботаСДиалогамиКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаОтгрузки, НСтр("ru='Введите дату отгрузки'"), ЧастиДаты.Дата) Тогда
		ЗаменяющиеТоварыЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, МассивВыделенныхСтрок);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияДатОтгрузки(ДатаОтгрузки, (МассивВыделенныхСтрок <> Неопределено));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭтапыОплатыВозвратДоплата(ЭтапыГрафикаОплаты, Знач ЖелаемаяДата, Знач СуммаЗаменяющихТоваров, Знач СуммаВозврата, Знач ВариантОплаты = Неопределено)
	
	Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
		ЭтапыГрафикаОплаты.Очистить();
	КонецЕсли;
	
	ДатаПлатежа = ЖелаемаяДата;
	
	Если Не ЗначениеЗаполнено(ДатаПлатежа) Тогда
		РаботаСДиалогамиКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаПлатежа, НСтр("ru='Введите дату платежа'"), ЧастиДаты.Дата);
	КонецЕсли;
	
	ЭтапВозврат                = ЭтапыГрафикаОплаты.Добавить();
	ЭтапВозврат.ДатаПлатежа    = ДатаПлатежа;
	ЭтапВозврат.ПроцентПлатежа = СуммаВозврата * 100 / СуммаЗаменяющихТоваров;
	ЭтапВозврат.СуммаПлатежа   = СуммаВозврата;
	
	Если ВариантОплаты <> Неопределено Тогда
		ЭтапВозврат.ВариантОплаты  = ВариантОплаты;
	КонецЕсли;
	
	СуммаДоплаты               = СуммаЗаменяющихТоваров - СуммаВозврата;
	ЭтапДоплата                = ЭтапыГрафикаОплаты.Добавить();
	ЭтапДоплата.ДатаПлатежа    = ДатаПлатежа;
	ЭтапДоплата.ПроцентПлатежа = 100 - ЭтапВозврат.ПроцентПлатежа;
	ЭтапДоплата.СуммаПлатежа   = СуммаДоплаты;
	
	Если ВариантОплаты <> Неопределено Тогда
		ЭтапДоплата.ВариантОплаты  = ВариантОплаты;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности)
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) И ДанныеКартыЛояльности.Партнер <> Объект.Партнер Тогда
		Объект.Партнер = ДанныеКартыЛояльности.Партнер;
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		ПриИзмененииПартнераСервер();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
		И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение
		И ДанныеКартыЛояльности.СоглашениеДоступно Тогда
		Объект.Соглашение = ДанныеКартыЛояльности.Соглашение;
		ПриИзмененииСоглашенияСервер();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Контрагент)
		И ДанныеКартыЛояльности.Контрагент <> Объект.Контрагент
		И ДанныеКартыЛояльности.КонтрагентДоступен Тогда
		Объект.Контрагент = ДанныеКартыЛояльности.Контрагент;
		ПриИзмененииКонтрагентаСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльности(КартаЛояльности)
	
	ДанныеКартыЛояльности = КартыЛояльностиВызовСервера.ПолучитьДанныеКартыЛояльности(КартаЛояльности);
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Ссылка) Тогда
		
		Если Не ДанныеКартыЛояльности.ПартнерДоступен Тогда
			Предупреждение(НСтр("ru = 'Нет доступа к партнеру-владельцу карты лояльности.'"));
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) Тогда // Обезличенная карта
			
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			Модифицированность = Истина;
			Объект.КартаЛояльности   = КартаЛояльности;
			
			Возврат;
			
		ИначеЕсли Объект.Партнер <> ДанныеКартыЛояльности.Партнер Тогда // Партнер в карте отличается от партнера в документе.
			
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				Ответ = Вопрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Карта лояльности принадлежит партнеру ""%1"". Изменить партнера в документе?'"), ДанныеКартыЛояльности.Партнер), РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		Иначе // Партнер в документе равен партнеру в карте.
			
			ВопросОбИзмененииКонтрагента = Ложь;
			Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Контрагент)
				И ЗначениеЗаполнено(Объект.Контрагент) И ДанныеКартыЛояльности.Контрагент <> Объект.Контрагент Тогда
				ВопросОбИзмененииКонтрагента = Истина;
			КонецЕсли;
			
			ВопросОбИзмененииСоглашения = Ложь;
			Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
				И ЗначениеЗаполнено(Объект.Соглашение) И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение Тогда
				ВопросОбИзмененииСоглашения = Истина;
			КонецЕсли;
			
			Если ВопросОбИзмененииКонтрагента Или ВопросОбИзмененииСоглашения Тогда
				
				Если ВопросОбИзмененииКонтрагента И ВопросОбИзмененииСоглашения Тогда
					ТекстВопроса = НСтр("ru = 'Для карты лояльности заданы контрагент ""%1"" и соглашение ""%2"". Применить карту лояльности и подставить в документ контрагента ""%1"" и соглашение ""%2""?'");
				ИначеЕсли ВопросОбИзмененииКонтрагента Тогда
					ТекстВопроса = НСтр("ru = 'Для карты лояльности задан контрагент ""%1"". Применить карту лояльности и подставить в документ контрагента ""%1""?'");
				ИначеЕсли ВопросОбИзмененииСоглашения Тогда
					ТекстВопроса = НСтр("ru = 'Для карты лояльности задано соглашение ""%2"". Применить карту лояльности и подставить в документ соглашение ""%2""?'");
				КонецЕсли;
				
				Ответ = Вопрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДанныеКартыЛояльности.Контрагент, ДанныеКартыЛояльности.Соглашение), РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "ЗаменяющиеТовары", УникальныйИдентификатор, ТолькоВыделенныеСтроки);
	
КонецФункции

&НаСервере 
Процедура УстановитьВидимостьЭлементовФормыДатОтгрузки()
	
	Элементы.ГруппаЗаменяющиеТоварыДатаОтгрузки.Видимость = НЕ Объект.НеОтгружатьЧастями;
	Элементы.ЗаменяющиеТоварыДатаОтгрузки.Видимость = НЕ Объект.НеОтгружатьЧастями;
	Элементы.ДатаОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
	Элементы.РассчитатьДатуОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если Не Объект.Согласован Тогда
		Попытка
			ЗаблокироватьДанныеФормыДляРедактирования();
			Модифицированность = Истина;
		Исключение
			Предупреждение(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",            Ложь);
	ПараметрыФормы.Вставить("СуммаДокумента",            СуммаЗаменяющихТоваров);
	ПараметрыФормы.Вставить("ГрафикОплаты",              Объект.ГрафикОплаты);
	ПараметрыФормы.Вставить("Соглашение",                Объект.Соглашение);
	ПараметрыФормы.Вставить("Дата",                      Объект.Дата);
	ПараметрыФормы.Вставить("ЖелаемаяДатаОтгрузки",      Объект.ЖелаемаяДатаОтгрузки);
	ПараметрыФормы.Вставить("Валюта",                    Объект.Валюта);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",   УникальныйИдентификатор);
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилищеНаСервере());
	ПараметрыФормы.Вставить("Ключ",                      Объект.Ссылка);
	
	ПараметрыОплаты = ОткрытьФормуМодально("Документ.ЗаявкаНаВозвратТоваровОтКлиента.Форма.ЭтапыРасчетов", ПараметрыФормы, ЭтаФорма);
	
	Если ПараметрыОплаты <> Неопределено Тогда
		
		Объект.Согласован = Ложь;
		Объект.ЭтапыГрафикаОплаты.Очистить();
		Если ЗначениеЗаполнено(ПараметрыОплаты.АдресВоВременномХранилище) Тогда
			ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(ПараметрыОплаты.АдресВоВременномХранилище);
		КонецЕсли;
		НадписьЭтапыОплаты = НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
		
		УстановитьДоступностьЭлементовПоСтатусуСервер();
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ЭтапыГрафикаОплаты.Выгрузить());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ЭтапыОплаты = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
		НоваяСтрока = Объект.ЭтапыГрафикаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НадписьЭтапыОплаты(КоличествоЭтаповОплаты)
	
	Если КоличествоЭтаповОплаты = 0 Тогда
		НадписьЭтапыОплаты = НСтр("ru='Этапы расчетов'");
	Иначе
		НадписьЭтапыОплаты = НСтр("ru='Этапы расчетов (%КоличествоЭтаповОплаты%)'");
		НадписьЭтапыОплаты = СтрЗаменить(НадписьЭтапыОплаты, "%КоличествоЭтаповОплаты%", КоличествоЭтаповОплаты);
	КонецЕсли;
	
	Возврат НадписьЭтапыОплаты;
	
КонецФункции

&НаСервере 
Процедура УстановитьВидимостьЭлементовФормыДатПоступления()
	
	Элементы.ГруппаВозвращаемыеТоварыДатаПоступления.Видимость = НЕ Объект.ПоступлениеОднойДатой;
	Элементы.ВозвращаемыеТоварыДатаПоступления.Видимость = НЕ Объект.ПоступлениеОднойДатой;
	Элементы.ДатаПоступления.Видимость = Объект.ПоступлениеОднойДатой;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьДатыПоступленияСервер(ДатаПоступления)

	Для Каждого Товар Из Объект.ВозвращаемыеТовары Цикл
		Товар.ДатаПоступления = ДатаПоступления;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Функция МаксимальнаяДатаПоступления()
	
	МаксимальнаяДатаПоступления = Дата(1,1,1);
	Для Каждого Товар Из Объект.ВозвращаемыеТовары Цикл 
		МаксимальнаяДатаПоступления = Макс(МаксимальнаяДатаПоступления, Товар.ДатаПоступления);
		
	КонецЦикла;
	
	Возврат МаксимальнаяДатаПоступления
	
КонецФункции

&НаКлиенте 
Процедура ЗаполнитьПустуюДатуПоступления()
	
	Если Объект.ВозвращаемыеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьПустуюДатуПоступленияСервер() Тогда
		
		ТекстВопроса = НСтр("ru='Заполнить дату поступления?'");
		ОтветНаВопрос = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
		// Предложим выбрать дату и заполним этой датой дату в строках
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			
			Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
				ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
			Иначе
				ДатаПоступления = ТекущаяДата();
			КонецЕсли;
			
			Если РаботаСДиалогамиКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаПоступления, НСтр("ru='Введите дату поступления'"), ЧастиДаты.Дата) Тогда
				Объект.ДатаПоступления = ДатаПоступления;
				
				ЗаполнитьДатыПоступленияСервер(Объект.ДатаПоступления);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПустуюДатуПоступленияСервер()
	
	Для Каждого ТекСтрока Из Объект.ВозвращаемыеТовары Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаПоступления) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, ЗаполнятьФормуОплаты = Ложь)
	
	СтруктураРеквизитов = Новый Структура("Дата, ГрафикОплаты, Соглашение, ФормаОплаты, ЖелаемаяДатаОтгрузки, ЭтапыГрафикаОплаты",
		Объект.Дата,
		Объект.ГрафикОплаты,
		Объект.Соглашение,
		Объект.ФормаОплаты,
		,
		Объект.ЭтапыГрафикаОплаты
	);
	Если ГрафикСоглашенияЗаполнен Тогда
		ПродажиСервер.ЗаполнитьЭтапыГрафикаОплатыПоСоглашению(
			СтруктураРеквизитов,
			СуммаЗаменяющихТоваров,
			Истина // ЗаполнятьФормуОплаты
		);
	ИначеЕсли ГрафикЗаполнен Тогда
		ПродажиСервер.ЗаполнитьЭтапыГрафикаОплаты(
			СтруктураРеквизитов,
			СуммаЗаменяющихТоваров,
			Истина // ЗаполнятьФормуОплаты
		);
	КонецЕсли;
	
	НадписьЭтапыОплаты = НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
	
	Если ЗаполнятьФормуОплаты Тогда
		Объект.ФормаОплаты = СтруктураРеквизитов.ФормаОплаты;
		УстановитьТекущуюСтраницуФормаОплаты();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтменитьНевозвращенныеСтрокиСервер(ПроверятьОстатки = Ложь)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	КоличествоОтмененныхСтрок = ДокументОбъект.ОтменитьНевозвращенныеСтроки(ПроверятьОстатки);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.ВозвращаемыеТовары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращаемыеТовары, ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеализацииИЦеныНаСервере()
	
	ПродажиСервер.ЗаполнитьРеализацииИЦены(Объект, "ВозвращаемыеТовары");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоРеализациям()
	
	ПродажиСервер.ОбновитьИнформациюПоРеализациямВФорме(
		СписокРеализаций,
		Объект.ДокументРеализации,
		НадписьЗаголовокРеализации,
		Элементы,
		Элементы.ВозвращаемыеТоварыДокументРеализации,
		Объект.ВозвращаемыеТовары,
		"ДокументРеализации"
	);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДокументыРеализации()
	
	Объект.ДокументРеализации = Неопределено;
	
	Для каждого СтрокаТовары Из Объект.ВозвращаемыеТовары Цикл
		СтрокаТовары.ДокументРеализации = Неопределено;
	КонецЦикла;
	
	НадписьЗаголовокРеализации = Неопределено;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВозвращаемыеТоварыПоЧеку()
	Объект.ВозвращаемыеТовары.Очистить();
	ПродажиСервер.ЗаполнитьВозвращаемыеТоварыПоЧеку(Объект, "ВозвращаемыеТовары");
	ОбновитьИнформациюПоРеализациям();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустуюДатуПоступленияСервер(ДатаПоступления, Знач МассивВыделенныхСтрок)

	Если МассивВыделенныхСтрок = Неопределено Тогда

		Для Каждого СтрокаТЧ Из Объект.ВозвращаемыеТовары Цикл
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЦикла;

	Иначе

		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТЧ = Объект.ВозвращаемыеТовары.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЦикла;

	КонецЕсли;
	
	Объект.ДатаПоступления = ДатаПоступления;

КонецПроцедуры

&НаСервере
Процедура ОбновитьОграничениеЗадолженности()
	
	ПродажиСервер.ОбновитьОграничениеЗадолженности(
		Объект.Договор,
		Объект.Дата,
		ТекстОстатокДопустимогоКредита,
		Элементы.ТекстОстатокДопустимогоКредита.Видимость,
		Элементы.ТекстОстатокДопустимогоКредита.ЦветТекста,
		Элементы.КартинкаОтгрузкаЗапрещена.Видимость
	);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродаж()
	
	ГрафикОплаты = Объект.ГрафикОплаты;
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоУмолчанию();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
	ХозяйственнаяОперацияДоговора = ПолучитьХозяйственнуюОперациюДоговора(Объект.ХозяйственнаяОперация);
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ВалютаДокумента = Объект.Валюта;
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
			И (ИспользоватьРучныеСкидкиВПродажах Или ИспользоватьАвтоматическиеСкидкиВПродажах)Тогда
			СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "ЗаменяющиеТовары", Истина);
			СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения, Ложь);
		КонецЕсли;
		
		УстановитьВидимостьЭлементовПоОперацииСервер();
		ЗаполнитьПорядокРасчетов();
		
		ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
		ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты) И ГрафикОплаты <> Объект.ГрафикОплаты;
		
		Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
			ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
		ИначеЕсли Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, СуммаЗаменяющихТоваров);
		КонецЕсли;
		
	КонецЕсли;
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.Договор.Видимость;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Доставка

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы);
	
	Если ИспользоватьУправлениеДоставкой Тогда
		ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОбновляемыеРеквизиты = Новый Структура("Подразделение");
	ОбновитьЗависимыеРеквизитыФормы(ОбновляемыеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимыеРеквизитыФормы(ОбновляемыеРеквизиты = Неопределено)
	
	Если ОбновляемыеРеквизиты = Неопределено Тогда
		ОбновляемыеРеквизиты = Новый Структура("Подразделение");
	КонецЕсли;
	
	ОбновитьРеквизитФормыПодразделение = Ложь;
	
	Если ОбновляемыеРеквизиты.Свойство("Подразделение") Тогда
		
		ОбновитьРеквизитФормыПодразделение = ОбщегоНазначенияУТКлиентСервер.ПроверитьНеобходимостьОбновленияПодразделения(
			Объект.ЗаменяющиеТовары,
			Объект.Подразделение,
			ПодразделениеОбязательно,
			Истина
		);
	КонецЕсли;
	
	Если ОбновитьРеквизитФормыПодразделение Тогда
		ОбновитьЗависимыеРеквизитыФормыСервер(ОбновляемыеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗависимыеРеквизитыФормыСервер(ОбновляемыеРеквизиты = Неопределено)
	
	Если ОбновляемыеРеквизиты = Неопределено Тогда
		ОбновляемыеРеквизиты = Новый Структура("Подразделение");
	КонецЕсли;
	
	Если ОбновляемыеРеквизиты.Свойство("Подразделение") Тогда
		ОбновляемыеРеквизиты.Подразделение = Объект.Подразделение;
		ОбновляемыеРеквизиты.Вставить("ПодразделениеОбязательно", ПодразделениеОбязательно);
	КонецЕсли;
	
	ФиктивнаяКартинка = Неопределено;
	ФиктивнаяНадпись  = Неопределено;
	СкладГруппа       = Неопределено;
	СкладОбязателен   = Неопределено;
	ОбщегоНазначенияУТ.ОбновитьЗависимыеРеквизитыФормы(
		Объект.ЗаменяющиеТовары,
		ФиктивнаяКартинка,
		ФиктивнаяНадпись,
		СкладГруппа,
		Объект.Склад,
		СкладОбязателен,
		Истина,
		"",
		ОбновляемыеРеквизиты
	);
	
	Если ОбновляемыеРеквизиты.Свойство("Подразделение") Тогда
		ПодразделениеОбязательно = ОбновляемыеРеквизиты.ПодразделениеОбязательно;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяющиеТоварыВариантОбеспеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТКлиент.ЗаполнитьСписокВыбораВариантаОбеспечения(
		Элементы.ЗаменяющиеТовары.ТекущиеДанные,
		ДанныеВыбора,
		СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(ЧекККМ)
	Возврат РозничныеПродажи.ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(ЧекККМ);
КонецФункции

&НаСервере
Процедура ЗаполнитьПорядокРасчетов()
	
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(Объект);
	
	УстановитьВидимостьЭлементовПоПорядкуРасчетов();
	УстановитьВидимостьГрафикаОплаты();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоПорядкуРасчетов()
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("НадписьЭтапыОплаты");
	МассивЭлементов.Добавить("Касса");
	МассивЭлементов.Добавить("ДекорацияОплата");
	МассивЭлементов.Добавить("ГруппаФинансовогоУчета");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГрафикаОплаты()
	
	ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГрафикОплаты", "Видимость",
		Не ГрафикСоглашенияЗаполнен
		И ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты")
		И Объект.ХозяйственнаяОперация<>Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
		И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВозвращаемыеТовары Тогда
	
		СтруктураДействийИзмененныеСтроки = Новый Структура;
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
		СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
		СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
		СтруктураДействийДобавленныеСтроки =  ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДействийИзмененныеСтроки);;
		Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
			СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
		КонецЕсли;
		
		МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
			Объект,
			АдресТарыВХранилище,
			"ВозвращаемыеТовары",
			"Номенклатура,Характеристика,,ДатаПоступления",
			СтруктураДействийИзмененныеСтроки,
			СтруктураДействийДобавленныеСтроки);
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.ВозвращаемыеТовары,
			Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
			)
		);
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Возвращаемые);
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращаемыеТовары, ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
		
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗаменяющиеТовары Тогда

		СтруктураДействийИзмененныеСтроки = Новый Структура;
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
		СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
		СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействийИзмененныеСтроки.Вставить("ПроверитьЗаполнитьВариантОбеспечения");
		
		СтруктураДействийДобавленныеСтроки =  ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДействийИзмененныеСтроки);;
		Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
			СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
		КонецЕсли;
		
		МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
			Объект,
			АдресТарыВХранилище,
			"ЗаменяющиеТовары",
			"Номенклатура,Характеристика,,ДатаОтгрузки",
			СтруктураДействийИзмененныеСтроки,
			СтруктураДействийДобавленныеСтроки);
		
		СтруктураДействий = Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи"),
			Новый Структура("Номенклатура", "ТипНоменклатуры")
		);
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ЗаменяющиеТовары,СтруктураДействий);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Заменяющие);
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	ОбновитьЗависимыеРеквизитыФормыСервер();
	ОбновитьИнформациюПоРеализациям();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "Доступность", Форма.Объект.ВернутьМногооборотнуюТару);
	
КонецПроцедуры

&НаСервере
Процедура ВернутьМногооборотнуюТаруПриИзмененииСервер()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ВозвращаемыеТовары, СтруктураДействий, Неопределено);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ЗаменяющиеТовары, СтруктураДействий, Неопределено);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ВозвращаемыеТовары, ПолучитьСтруктуруЗависимыхРеквизитовВозвращаемыеТовары());
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.ЗаменяющиеТовары, ПолучитьСтруктуруЗависимыхРеквизитовЗаменяющиеТовары());
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакБезВозвратнойТары()
	
	СтруктураДополнительныхДействий = Новый Структура;
	СтруктураДополнительныхДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.ВозвращаемыеТовары, Объект.ВернутьМногооборотнуюТару, СтруктураДополнительныхДействий);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.ЗаменяющиеТовары, Объект.ВернутьМногооборотнуюТару, СтруктураДополнительныхДействий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Контроль несогласованных изменений

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении[Элемент.Имя]+"(Элемент)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие[Элемент.Имя]+"(Элемент)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.Команды[Команда.Имя]+"(Команда)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения[Элемент.Имя]+"(Элемент, Отказ)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением[Имя]+"(Элемент, Отказ)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления[Имя]+"(Элемент, Отказ, Копирование, Родитель, Группа)");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	ИзменитьДокументСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с буфером обмена 

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТЧ)
	
	ХранилищаНастроек.ХранилищеБуфераОбмена.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы[ИмяТЧ].ВыделенныеСтроки, Объект[ИмяТЧ]);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера") Тогда
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре());
		ТаблицаТоваров = ХранилищаНастроек.ХранилищеБуфераОбмена.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	Иначе
		ТаблицаТоваров = ХранилищаНастроек.ХранилищеБуфераОбмена.ПолучитьСтрокиИзБуфераОбмена();
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.ЗаменяющиеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		Если Объект.НеОтгружатьЧастями Тогда
			ТекущаяСтрока.ДатаОтгрузки = Объект.ДатаОтгрузки;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокЗаменяющиеТовары(СтруктураДействий, Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиЗаявкиНаВозврат(ЭтаФорма);
	
	СтруктураДействий = Новый Структура(
		"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
		Новый Структура("Номенклатура", "ВариантОформленияПродажи")
	);
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ЗаменяющиеТовары,СтруктураДействий);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Заменяющие);
	ОбновитьЗависимыеРеквизитыФормыСервер();
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ВставитьЗаменяющиеСтроки");
	МассивЭлементов.Добавить("КонтекстноеМенюВставитьЗаменяющиеСтроки");
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ХранилищаНастроек.ХранилищеБуфераОбмена.БуферОбменаПустой());
		
	Иначе
		
		МассивЭлементов.Добавить("СкопироватьЗаменяющиеСтроки");
		МассивЭлементов.Добавить("КонтекстноеМенюСкопироватьЗаменяющиеСтроки");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ВставитьЗаменяющиеСтроки");
	МассивЭлементов.Добавить("КонтекстноеМенюВставитьЗаменяющиеСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры
