#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет таблицу реквизитов, зависимых от хозяйственной операции
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция соглашения
//	МассивВсехРеквизитов - Массив - реквизиты, которые не зависят от хозяйственной операции
//	МассивРеквизитовОперации - Массив - реквизиты, которые зависят от хозяйственной операции
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("Подразделение");
	МассивВсехРеквизитов.Добавить("Договор");
	МассивВсехРеквизитов.Добавить("Договор");
	МассивВсехРеквизитов.Добавить("ЗаменяющиеТовары.ПроцентРучнойСкидки");
	МассивВсехРеквизитов.Добавить("ЗаменяющиеТовары.СуммаРучнойСкидки");
	МассивВсехРеквизитов.Добавить("ЗаменяющиеТовары.ПроцентАвтоматическойСкидки");
	МассивВсехРеквизитов.Добавить("ЗаменяющиеТовары.СуммаАвтоматическойСкидки");
	
	МассивРеквизитовОперации = Новый Массив;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента Тогда
		МассивРеквизитовОперации.Добавить("Подразделение");
		МассивРеквизитовОперации.Добавить("Договор");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		МассивРеквизитовОперации.Добавить("Договор");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		МассивРеквизитовОперации.Добавить("Подразделение");
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента
		Или Не ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		МассивРеквизитовОперации.Добавить("ЗаменяющиеТовары.ПроцентРучнойСкидки");
		МассивРеквизитовОперации.Добавить("ЗаменяющиеТовары.СуммаРучнойСкидки");
		МассивРеквизитовОперации.Добавить("ЗаменяющиеТовары.ПроцентАвтоматическойСкидки");
		МассивРеквизитовОперации.Добавить("ЗаменяющиеТовары.СуммаАвтоматическойСкидки");
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаявки") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента
		|ПОМЕСТИТЬ
		|	втОстаткиПоЗаказам
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента В (&МассивДокументов)) КАК ЗаказыКлиентовОстатки
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыКлиентовОстатки.ЗаказКлиента
		|;
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР КОГДА ТаблицаДокументов.Статус = &Статус
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ВЫБОР КОГДА ТаблицаДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
		|		И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована)
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаСменыСтатусаОтклонена,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением,
		|	ВЫБОР КОГДА втОстаткиПоЗаказам.ЗаказКлиента ЕСТЬ NULL
		|		ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОстаткиПоЗаказу
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокументов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	втОстаткиПоЗаказам
		|ПО
		|	ТаблицаДокументов.Ссылка = втОстаткиПоЗаказам.ЗаказКлиента
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В (&МассивДокументов)
		|";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР КОГДА ТаблицаДокументов.Статус = &Статус
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ВЫБОР КОГДА ТаблицаДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
		|		И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована)
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаСменыСтатусаОтклонена,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
		|";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Формирует запрос проверки при автосмене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриАвтоматическомРасчетеСтатуса(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаявки") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента
		|ПОМЕСТИТЬ
		|	втОстаткиПоЗаказам
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента В (&МассивДокументов)) КАК ЗаказыКлиентовОстатки
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыКлиентовОстатки.ЗаказКлиента
		|;
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением,
		|	ВЫБОР КОГДА втОстаткиПоЗаказам.ЗаказКлиента ЕСТЬ NULL
		|		ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОстаткиПоЗаказу
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокументов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	втОстаткиПоЗаказам
		|ПО
		|	ТаблицаДокументов.Ссылка = втОстаткиПоЗаказам.ЗаказКлиента
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В (&МассивДокументов)
		|";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
		|";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ВыборкаПроверки.ОшибкаСменыСтатусаОтклонена Тогда
		
		ТекстОшибки = НСтр("ru='У документа %Документ% статус ""%Статус%"" не установлен. Присвойте заявке статус ""Согласована""'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаявки")
		И ВыборкаПроверки.ЕстьОстаткиПоЗаказу Тогда
		
		ТекстОшибки = НСтр("ru='У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ поставлен не полностью'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

// Функция определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - Ссылка на документа
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа
//
Функция ПолучитьРеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаЗамены КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Организация = Выборка.Организация;
		Партнер = Выборка.Партнер;
		Контрагент = Выборка.Контрагент;
		Договор = Выборка.Договор;
		ПорядокРасчетов = Выборка.ПорядокРасчетов;
		ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
		ХозяйственнаяОперация = ?(ЗначениеЗаполнено(Выборка.ХозяйственнаяОперация), Выборка.ХозяйственнаяОперация, Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
		СуммаДокумента = Выборка.СуммаДокумента;
		СуммаВзаиморасчетов = ?(Выборка.Проведен, Выборка.СуммаВзаиморасчетов, 0);
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
		СуммаДокумента = 0;
		СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Организация, Партнер, Контрагент, Договор, ПорядокРасчетов, ВалютаВзаиморасчетов, ХозяйственнаяОперация, СуммаДокумента, СуммаВзаиморасчетов",
		Организация,
		Партнер,
		Контрагент,
		Договор,
		ПорядокРасчетов,
		ВалютаВзаиморасчетов,
		ХозяйственнаяОперация,
		СуммаДокумента,
		СуммаВзаиморасчетов
	);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Осуществялет вычисление текущего состояния заявки на возврат товаров от клиента
//
// Параметры:
//	ЗаявкаНаВозврат         - ДокументСсылка.ЗаявкаНаВозвраТоваровОтКлиента - Документ, состояние которого необходимо вычислить
//	Договор                 - СправочникСсылка.ДоговорыКонтрагентов    - Договор с клиентом
//	СостояниеРасчетов       - УправляемаяФорма - Форма, в реквизиты которой будет помещено рассчитанное состояние
//
Процедура РассчитатьСостояние(Знач ЗаявкаНаВозвратТоваровОтКлиента,
	                          Знач Договор,
	                          СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	
	Если ЗначениеЗаполнено(ЗаявкаНаВозвратТоваровОтКлиента)
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) 
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыКлиентов) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|ВЫБОР
			|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
			|	КОГДА
			|		НЕ ДокументЗаявка.Проведен
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ПустаяСсылка)
			|// ОЖИДАЕТСЯ СОГЛАСОВАНИЕ //////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяСогласование)
			|// ОТКЛОНЕНА ///////////////////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
			|// ГОТОВА К ВОЗВРАТУ ///////////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ГотоваКВозврату)
			|// ОЖИДАЕТСЯ ВЫПОЛНЕНИЕ ////////////////////////////////////////////////////
			|	КОГДА
			|		((ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)
			|		ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)
			|		ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке))
			|		И ДокументЗаявка.СуммаЗамены = 0)
			|		ИЛИ (ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)
			|		И ДокументЗаявка.СуммаАвансаДоОбеспечения = 0
			|		И ДокументЗаявка.СуммаПредоплатыДоОтгрузки = 0)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяВыполнение)
			|// ОЖИДАЕТСЯ АВАНС ДО ОБЕСПЕЧЕНИЯ //////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована) ИЛИ &НеИспользоватьСтатусыЗаявокНаВозврат ИЛИ
			|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)) И
			|		ДокументЗаявка.СуммаАвансаДоОбеспечения > 0 И
			|		ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаявка.СуммаАвансаДоОбеспечения
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяАвансИлиВозвратДоОбеспечения)
			|// ГОТОВА К ОБЕСПЕЧЕНИЮ ////////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату) И
			|		ДокументЗаявка.СуммаЗамены > 0 И
			|		(ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаявка.СуммаАвансаДоОбеспечения ИЛИ
			|		ДокументЗаявка.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ГотоваКОбеспечению)
			|// ОЖИДАЕТСЯ ПРЕДОПЛАТА ДО ОТГРУЗКИ ////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована)  ИЛИ &НеИспользоватьСтатусыЗаявокНаВозврат ИЛИ
			|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату) ИЛИ
			|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)) И
			|		ДокументЗаявка.СуммаПредоплатыДоОтгрузки > 0 И
			|		ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаявка.СуммаПредоплатыДоОтгрузки + ДокументЗаявка.СуммаАвансаДоОбеспечения
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяПредоплатаИлиВозвратДоОтгрузки)
			|// ГОТОВА К ОТГРУЗКЕ ///////////////////////////////////////////////////////
			|	КОГДА
			|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована)
			|		ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)
			|		ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)) И
			|		ДокументЗаявка.СуммаЗамены > 0 И
			|		(ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаявка.СуммаПредоплатыДоОтгрузки + ДокументЗаявка.СуммаАвансаДоОбеспечения ИЛИ
			|		ДокументЗаявка.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)) И
			|		ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаОстаток, 0) <> 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ГотоваКОтгрузке)
			|// ОЖИДАЕТСЯ ОТГРУЗКА //////////////////////////////////////////////////////
			|	КОГДА
			|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке) ИЛИ &НеИспользоватьСтатусыЗаявокНаВозврат) И
			|		ДокументЗаявка.СуммаЗамены > 0 И
			|		(ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаявка.СуммаПредоплатыДоОтгрузки + ДокументЗаявка.СуммаАвансаДоОбеспечения ИЛИ
			|		ДокументЗаявка.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)) И
			|		ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюОстаток, 0) <> 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяОтгрузка)
			|// ОЖИДАЕТСЯ ОПЛАТА ////////////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		((ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована) И
			|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена) И
			|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)) ) И
			|		ДокументЗаявка.СуммаЗамены - ДокументЗаявка.СуммаАвансаДоОбеспечения - ДокументЗаявка.СуммаПредоплатыДоОтгрузки > 0 И
			|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) > 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяОплатаИлиВозвратПослеОтгрузки)
			|// ВЫПОЛНЕНА ///////////////////////////////////////////////////////////////
			|	КОГДА
			|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена) И НЕ &НеИспользоватьСтатусыЗаявокНаВозврат) ИЛИ &НеИспользоватьСтатусыЗаявокНаВозврат
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.Выполнена)
			|// ОЖИДАЕТСЯ ВЫПОЛНЕНИЕ ////////////////////////////////////////////////////
			|	ИНАЧЕ
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ОжидаетсяВыполнение)
			|КОНЕЦ КАК Состояние,
			|ВЫБОР
			|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
			|	КОГДА
			|		НЕ ДокументЗаявка.Проведен
			|	ТОГДА
			|		ЛОЖЬ
			|// ЗАКРЫТ //////////////////////////////////////////////////////////////////
			|	КОГДА
			|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена)
			|		ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)) И НЕ &НеИспользоватьСтатусыЗаявокНаВозврат
			|	ТОГДА
			|		ЛОЖЬ
			|// ПРОСРОЧЕНО СОГЛАСОВАНИЕ /////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
			|		И ДокументЗаявка.ДатаСогласования <> ДАТАВРЕМЯ(1,1,1)
			|		И ДокументЗаявка.ДатаСогласования < &ТекущаяДата
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕН АВАНС ДО ОБЕСПЕЧЕНИЯ //////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована) ИЛИ &НеИспользоватьСтатусыЗаявокНаВозврат
			|		ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату))И
			|		ДокументЗаявка.СуммаАвансаДоОбеспечения > 0 И
			|		ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаявка.СуммаАвансаДоОбеспечения И
			|		РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕНО ОБЕСПЕЧЕНИЕ //////////////////////////////////////////////////
			|	КОГДА
			|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована)
			|		ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату))И
			|		ДокументЗаявка.СуммаЗамены > 0 И
			|		(ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаявка.СуммаАвансаДоОбеспечения ИЛИ
			|		ДокументЗаявка.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)) И
			|		ДокументЗаявка.ДатаОтгрузки <> ДАТАВРЕМЯ(1,1,1) И
			|		ДокументЗаявка.ДатаОтгрузки  < &ТекущаяДата
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕНА ПРЕДОПЛАТА ДО ОТГРУЗКИ ///////////////////////////////////////
			|	КОГДА
			|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)  ИЛИ &НеИспользоватьСтатусыЗаявокНаВозврат
			|		ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)) И
			|		ДокументЗаявка.СуммаПредоплатыДоОтгрузки > 0 И
			|		ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаявка.СуммаПредоплатыДоОтгрузки + ДокументЗаявка.СуммаАвансаДоОбеспечения И
			|		РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕНА ОЖИДАЕТСЯ ОТГРУЗКА ///////////////////////////////////////////
			|	КОГДА
			|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату) ИЛИ
			|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)) И
			|		(ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаявка.СуммаПредоплатыДоОтгрузки + ДокументЗаявка.СуммаАвансаДоОбеспечения ИЛИ
			|		ДокументЗаявка.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)) И
			|		ДокументЗаявка.ДатаОтгрузки <> ДАТАВРЕМЯ(1,1,1) И
			|		ДокументЗаявка.ДатаОтгрузки  < &ТекущаяДата
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕНА ОТГРУЗКА /////////////////////////////////////////////////////
			|	КОГДА
			|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке)  ИЛИ &НеИспользоватьСтатусыЗаявокНаВозврат) И
			|		(ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаявка.СуммаПредоплатыДоОтгрузки + ДокументЗаявка.СуммаАвансаДоОбеспечения ИЛИ
			|		ДокументЗаявка.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)) И
			|		ЕСТЬNULL(ЗаказыКлиентовОстаткиНаДатуАктуальности.КОформлениюОстаток, 0) <> 0
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕНА ОПЛАТА ///////////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке) ИЛИ &НеИспользоватьСтатусыЗаявокНаВозврат) И
			|		ДокументЗаявка.СуммаЗамены - ДокументЗаявка.СуммаАвансаДоОбеспечения - ДокументЗаявка.СуммаПредоплатыДоОтгрузки > 0 И
			|		ЕСТЬNULL(ЗаказыКлиентовОстаткиНаДатуАктуальности.КОформлениюОстаток, 0) = 0 И
			|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) > 0 И
			|		РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕН ВОЗВРАТ ///////////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована)
			|		И ДокументЗаявка.ДатаПервогоПоступления <> ДАТАВРЕМЯ(1,1,1)
			|		И ДокументЗаявка.ДатаПервогоПоступления  < &ТекущаяДата
			|	ТОГДА
			|		ИСТИНА
			|	ИНАЧЕ
			|		ЛОЖЬ
			|КОНЕЦ КАК Просрочен,
			|ВЫБОР
			|	КОГДА ДокументЗаявка.Приоритет = ЗНАЧЕНИЕ(Перечисление.Приоритеты.Высокий)
			|		ТОГДА 0
			|	КОГДА ДокументЗаявка.Приоритет = ЗНАЧЕНИЕ(Перечисление.Приоритеты.Средний)
			|		ТОГДА 1
			|	КОГДА ДокументЗаявка.Приоритет = ЗНАЧЕНИЕ(Перечисление.Приоритеты.Низкий)
			|		ТОГДА 2
			|	ИНАЧЕ
			|		1
			|КОНЕЦ КАК КартинкаПриоритета,
			|// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		ДокументЗаявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента) И
			|		ДокументЗаявка.Проведен И
			|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована) И
			|		ДокументЗаявка.СуммаЗамены > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаОплаты,
			|// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		ДокументЗаявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента) И
			|		ДокументЗаявка.Проведен И
			|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована) И
			|		ДокументЗаявка.СуммаЗамены > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ ((ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0)) * 100 / ДокументЗаявка.СуммаЗамены КАК ЧИСЛО(15, 0))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентОплаты,
			|// СУММА ПРОСРОЧЕННОЙ ОПЛАТЫ ////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		ДокументЗаявка.Проведен И
			|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована) И
			|		ДокументЗаявка.СуммаЗамены > 0 И
			|		ЕСТЬNULL(РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток, 0) > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаПросроченнойОплаты,
			|// СУММА ОТГРУЗКИ ///////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаявка.Проведен И
			|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована) И
			|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована) И
			|		ДокументЗаявка.СуммаЗамены > 0
			|	ТОГДА
			|		ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаОстаток, 0)
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаОтгрузки,
			|// ПРОЦЕНТ ОТГРУЗКИ /////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаявка.Проведен И
			|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована) И
			|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована) И
			|		ДокументЗаявка.СуммаЗамены > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ ((ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаОстаток, 0)) * 100 / ДокументЗаявка.СуммаЗамены КАК ЧИСЛО(15, 0))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентОтгрузки,
			|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаявка.Проведен И
			|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована) И
			|		ДокументЗаявка.СуммаЗамены > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаДолга,
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		ДокументЗаявка.Проведен И
			|		ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована) И
			|		ДокументЗаявка.СуммаЗамены > 0
			|	ТОГДА
			|		ВЫБОР
			|			КОГДА
			|				ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) > 0
			|			ТОГДА
			|				ВЫРАЗИТЬ ((ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) * 100 / ДокументЗаявка.СуммаЗамены) КАК ЧИСЛО(15, 0))
			|			ИНАЧЕ
			|				ВЫРАЗИТЬ ((ЕСТЬNULL(-РасчетыСКлиентамиОстатки.СуммаОстаток, 0) * 100 / ДокументЗаявка.СуммаЗамены) КАК ЧИСЛО(15, 0))
			|		КОНЕЦ
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентДолга
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДокументЗаявка
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента = &РасчетныйДокумент) КАК РасчетыСКлиентамиОстатки
			|ПО
			|	Истина
			|	
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ЗаказКлиента = &РасчетныйДокумент) КАК РасчетыСКлиентамиОстаткиНаДатуАктуальности
			|ПО
			|	Истина
			|	
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &ДокументЗаявка) КАК ЗаказыКлиентовОстатки
			|ПО
			|	Истина
			|	
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ЗаказыКлиентов.Остатки(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ЗаказКлиента = &ДокументЗаявка) КАК ЗаказыКлиентовОстаткиНаДатуАктуальности
			|ПО
			|	Истина
			|ГДЕ
			|	ДокументЗаявка.Ссылка = &ДокументЗаявка
			|
			|");
		
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаявкаНаВозвратТоваровОтКлиента, "ПорядокРасчетов");
		
		Запрос.УстановитьПараметр("ДокументЗаявка", ЗаявкаНаВозвратТоваровОтКлиента);
		Запрос.УстановитьПараметр("РасчетныйДокумент", ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов,
			Договор,
			ЗаявкаНаВозвратТоваровОтКлиента)
		);
		Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("НеИспользоватьСтатусыЗаявокНаВозврат", НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаявокНаВозврат"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСостояние()

// Осуществляет инициализацию структуры состояния расчетов
Функция СтруктураСостоянияРасчетов() Экспорт
	Возврат
		Новый Структура(
			"Состояние, СостояниеПросрочено, СуммаОплаты, СуммаОтгрузки, ПроцентОплаты, ПроцентОтгрузки, СуммаПросроченнойОплаты, СуммаДолга, ПроцентДолга",
			Перечисления.СостоянияЗаявокНаВозвратТоваровОтКлиентов.ПустаяСсылка(), Ложь, 0., 0., 0., 0., 0., 0.,0.);
КонецФункции

// Возвращает массив имен ролей с правом "Добавление" для данного документа
//
// Возвращаемое значение:
//	Массив - Массив с именами ролей
//
Функция ИменаРолейСПравомДобавления() Экспорт
	
	МассивРолей = Новый Массив;
	МассивРолей.Добавить("ПолныеПрава");
	МассивРолей.Добавить("ДобавлениеИзменениеЗаявокНаВозвратТоваровОтКлиента");
	Возврат МассивРолей;
	
КонецФункции

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Склад";
	
	Возврат ИменаРеквизитов;
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в документе
//
//	Параметры
//			Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
//	Возвращаемое значение
//			Тип Структура
//				Состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возвращаемые = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	Возвращаемые.ИспользоватьСерииНоменклатуры =  
	                                ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура("Склад", Объект.Склад))
									И Не ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении",  Новый Структура("Склад", Объект.Склад)); 
	Возвращаемые.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента);
	
	Возвращаемые.ПоляСвязи.Добавить("НоменклатураОприходование");
	Возвращаемые.ПоляСвязи.Добавить("ХарактеристикаОприходование");
	Возвращаемые.ПоляСвязи.Добавить("ДокументРеализации");
	
	Возвращаемые.ИмяТЧТовары = "ВозвращаемыеТовары";
	Возвращаемые.ИмяТЧСерии  = "ВозвращаемыеСерии";
	Возвращаемые.ЭтоНакладная = Истина;
	
	
	Заменяющие = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	Заменяющие.ИспользоватьСерииНоменклатуры = 
									ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура("Склад", Объект.Склад));
	
	Заменяющие.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
	Заменяющие.ПоляСвязи.Добавить("УказыватьСерии");
	
	Заменяющие.ИмяТЧТовары = "ЗаменяющиеТовары";
	Заменяющие.ИмяТЧСерии  = "ЗаменяющиеСерии";
									
	Заменяющие.ЭтоЗаказ = Истина;
	Заменяющие.ПланированиеОтгрузки = Истина;
	
	ПараметрыУказанияСерий = Новый Структура;
	ПараметрыУказанияСерий.Вставить("Возвращаемые",Возвращаемые);
	ПараметрыУказанияСерий.Вставить("Заменяющие",Заменяющие);
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Функция ТаблицаНеобеспеченнойПотребности(ЗаявкаНаВозврат) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"
	|ВЫБРАТЬ
	|	Заказы.Номенклатура               КАК Номенклатура,
	|	Заказы.Характеристика             КАК Характеристика,
	|	Заказы.Склад                      КАК Склад,
	|	Заказы.ЗаказКлиента.Назначение    КАК Назначение,
	|	СУММА(Заказы.ЗаказаноОстаток)     КАК Заказано,
	|	ВЫБОР КОГДА МАКСИМУМ(Товары.Упаковка) <> МИНИМУМ(Товары.Упаковка) ТОГДА
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|	ИНАЧЕ
	|		МАКСИМУМ(Товары.Упаковка)
	|	КОНЕЦ                        КАК Упаковка,
	|	МАКСИМУМ(Товары.НомерСтроки) КАК НомерСтроки
	|
	|ПОМЕСТИТЬ НоменклатураЗаказа
	|
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(,
	|			ЗаказКлиента = &ЗаявкаНаВозврат
	|		) КАК Заказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК Товары
	|		ПО Заказы.ЗаказКлиента      = Товары.Ссылка
	|			И Заказы.Номенклатура   = Товары.Номенклатура
	|			И Заказы.Характеристика = Товары.Характеристика
	|			И Заказы.КодСтроки      = Товары.КодСтроки
	|ГДЕ
	|	Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Номенклатура,
	|	Заказы.Характеристика,
	|	Заказы.Склад,
	|	Заказы.ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обеспечение.Номенклатура    КАК Номенклатура,
	|	Обеспечение.Характеристика  КАК Характеристика,
	|	Обеспечение.Склад           КАК Склад,
	|	Обеспечение.Назначение      КАК Назначение,
	|	Обеспечение.КЗаказуОстаток  КАК Заказать
	|
	|ПОМЕСТИТЬ Потребность
	|
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад, Назначение) В
	|				(ВЫБРАТЬ
	|					Т.Номенклатура,
	|					Т.Характеристика,
	|					Т.Склад,
	|					Т.Назначение
	|				ИЗ
	|					НоменклатураЗаказа КАК Т)
	|			) КАК Обеспечение
	|ГДЕ
	|	Обеспечение.КЗаказуОстаток > 0
	|	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура   КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Склад          КАК Склад,
	|	Т.Назначение     КАК Назначение,
	|	Т.Заказать       КАК Заказать
	|
	|ИЗ
	|	Потребность КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура                                КАК Номенклатура,
	|	Т.Номенклатура.СтавкаНДС                      КАК СтавкаНДС,
	|	Т.Характеристика                              КАК Характеристика,
	|	Т.Склад                                       КАК Склад,
	|	Т.Заказано                                    КАК Количество,
	|	Т.Заказано/ЕСТЬNULL(Т.Упаковка.Коэффициент,1) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(Т.Упаковка.Коэффициент,1)            КАК УпаковкаКоэффициент,
	|	Т.Упаковка                                    КАК Упаковка,
	|	Т.НомерСтроки                                 КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ) КАК ВариантОбеспечения,
	|	Т.Назначение                                  КАК Назначение
	|ИЗ
	|	НоменклатураЗаказа КАК Т
	|ГДЕ
	|	(Т.Номенклатура, Т.Характеристика, Т.Склад, Т.Назначение)
	|			В (ВЫБРАТЬ
	|				Т.Номенклатура,
	|				Т.Характеристика,
	|				Т.Склад,
	|				Т.Назначение
	|			ИЗ
	|				Потребность КАК Т)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|");
	Запрос.УстановитьПараметр("ЗаявкаНаВозврат", ЗаявкаНаВозврат);
	МассивРезультатов = Запрос.ВыполнитьПакет();

	ТаблицаПотребностей = МассивРезультатов[2].Выгрузить();

	ТаблицаТовары = МассивРезультатов[3].Выгрузить();
	ТаблицаТовары.Индексы.Добавить("Номенклатура, Характеристика, Склад");

	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Склад");

	Для Каждого СтрокаПотребности Из ТаблицаПотребностей Цикл

		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПотребности);
		СтрокиТоваров = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТоваров Из СтрокиТоваров Цикл

			Заказать = Мин(СтрокаПотребности.Заказать, СтрокаТоваров.Количество);

			Если Заказать > 0 Тогда

				Если Заказать < СтрокаТоваров.Количество Тогда 

					СтрокаТоваров.Количество         = Заказать;
					СтрокаТоваров.КоличествоУпаковок = СтрокаТоваров.Количество/СтрокаТоваров.УпаковкаКоэффициент;

				КонецЕсли;
			Иначе

				ТаблицаТовары.Удалить(СтрокаТоваров);

			КонецЕсли;

			СтрокаПотребности.Заказать = СтрокаПотребности.Заказать - Заказать;

		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаТовары;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение

Функция ТекстЗапросаТаблицаРасчетыСКлиентами()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ // Сумма к оплате по графику
	|	ГрафикОплаты.НомерСтроки                     КАК НомерСтроки,
	|	КонецПериода(ГрафикОплаты.ДатаПлатежа, День) КАК Период,
	|	КонецПериода(ГрафикОплаты.ДатаПлатежа, День) КАК ДатаПлатежа,
	|	&Период                                      КАК ДатаРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&ЗаявкаНаВозвратТоваровОтКлиента
	|	КОНЕЦ КАК ЗаказКлиента,
	|
	|	&Валюта                                      КАК Валюта,
	|	ГрафикОплаты.Ссылка.ФормаОплаты              КАК ФормаОплаты,
	|	0                                            КАК Сумма,
	|	ГрафикОплаты.СуммаПлатежа                    КАК КОплате,
	|	0                                            КАК КОтгрузке,
	|
	|	ВЫБОР КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)
	|		И ГрафикОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения)
	|	ТОГДА
	|		ЛОЖЬ
	|	КОГДА &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
	|		И ГрафикОплаты.ВариантОплаты В (
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки))
	|		И &ИспользоватьСтатусыЗаявокНаВозврат
	|	ТОГДА
	|		ЛОЖЬ
	|	КОГДА НЕ &ИспользоватьСтатусыЗаявокНаВозврат
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК ИсключатьПриКонтроле,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЭтапыГрафикаОплаты КАК ГрафикОплаты
	|ГДЕ
	|	ГрафикОплаты.Ссылка = &Ссылка
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|	И НЕ &РасчетыПоНакладным
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ // Сумма к отгрузке по графику
	|	МАКСИМУМ(ТаблицаТовары.НомерСтроки)            КАК НомерСтроки,
	|	КонецПериода(ТаблицаТовары.ДатаОтгрузки, День) КАК Период,
	|	Неопределено                                   КАК ДатаПлатежа,
	|	Неопределено                                   КАК ДатаРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)         КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам                     КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&ЗаявкаНаВозвратТоваровОтКлиента
	|	КОНЕЦ КАК ЗаказКлиента,
	|
	|	&Валюта                                        КАК Валюта,
	|	Неопределено                                   КАК ФормаОплаты,
	|	0                                              КАК Сумма,
	|	0                                              КАК КОплате,
	|	СУММА(ТаблицаТовары.СуммаСНДС)                 КАК КОтгрузке,
	|
	|	Истина КАК ИсключатьПриКонтроле,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
	|	И НЕ &РасчетыПоНакладным
	|СГРУППИРОВАТЬ ПО
	|	КонецПериода(ТаблицаТовары.ДатаОтгрузки, День)
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	НомерСтроки
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентамиПоследовательность()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 
	|	&АналитикаУчетаПоПартнерам,
	|	МИНИМУМ(КонецПериода(ГрафикОплаты.ДатаПлатежа, День)) КАК Период
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЭтапыГрафикаОплаты КАК ГрафикОплаты
	|ГДЕ
	|	ГрафикОплаты.Ссылка = &Ссылка
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаВозвратТоваровОтКлиента.Дата                    КАК Период,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Валюта                  КАК Валюта,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Статус                  КАК Статус,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Склад                   КАК Склад,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Партнер                 КАК Партнер,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Контрагент              КАК Контрагент,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Организация             КАК Организация,
	|	ЗаявкаНаВозвратТоваровОтКлиента.ЦенаВключаетНДС         КАК ЦенаВключаетНДС,
	|	ЗаявкаНаВозвратТоваровОтКлиента.ХозяйственнаяОперация   КАК ХозяйственнаяОперация,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Склад.ИспользоватьОрдернуюСхемуПриПоступлении КАК ИспользоватьОрдернуюСхему,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Договор КАК Договор,
	|	
	|	ВЫБОР КОГДА ЗаявкаНаВозвратТоваровОтКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговорам,
	|	
	|	ВЫБОР КОГДА ЗаявкаНаВозвратТоваровОтКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоНакладным
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
	|ГДЕ
	|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка = &Ссылка
	|";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                             Реквизиты.Период);
	Запрос.УстановитьПараметр("Валюта",                             Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Статус",                             Реквизиты.Статус);
	Запрос.УстановитьПараметр("Склад",                              Реквизиты.Склад);
	Запрос.УстановитьПараметр("ЗаявкаНаВозвратТоваровОтКлиента",    ДокументСсылка);
	Запрос.УстановитьПараметр("Организация",                        Реквизиты.Организация);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",                    Реквизиты.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",              Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ИспользоватьОрдернуюСхему",          Реквизиты.ИспользоватьОрдернуюСхему);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",                    Реквизиты.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",          РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты));
	Запрос.УстановитьПараметр("Договор",                            Реквизиты.Договор);
	Запрос.УстановитьПараметр("РасчетыПоДоговорам",                 Реквизиты.РасчетыПоДоговорам);
	Запрос.УстановитьПараметр("РасчетыПоНакладным",                 Реквизиты.РасчетыПоНакладным);
	Запрос.УстановитьПараметр("ИспользоватьСтатусыЗаявокНаВозврат", ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаявокНаВозврат"));
	
	Запрос.Текст =
	// 0 ТаблицаЗаявкиНаВозвратТоваровОтКлиентов
	"ВЫБРАТЬ
	|	1                                                  КАК Порядок,
	|	ТаблицаВозвращаемыеТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)             КАК ВидДвижения,
	|	&Период                                            КАК Период,
	|	ТаблицаВозвращаемыеТовары.Ссылка                   КАК ЗаявкаНаВозвратТоваровОтКлиента,
	|	ВЫБОР КОГДА 
	|			ТаблицаВозвращаемыеТовары.Порча 
	|				И ТаблицаВозвращаемыеТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
	|			ТаблицаВозвращаемыеТовары.НоменклатураОприходование
	|		ИНАЧЕ ТаблицаВозвращаемыеТовары.Номенклатура
	|	КОНЕЦ                                              КАК Номенклатура,
	|	ВЫБОР КОГДА 
	|			ТаблицаВозвращаемыеТовары.Порча 
	|				И ТаблицаВозвращаемыеТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
	|			ТаблицаВозвращаемыеТовары.ХарактеристикаОприходование
	|		ИНАЧЕ ТаблицаВозвращаемыеТовары.Характеристика
	|	КОНЕЦ                                              КАК Характеристика,
	|	ТаблицаВозвращаемыеТовары.КодСтроки                КАК КодСтроки,
	|	ВЫБОР КОГДА
	|			НЕ ТаблицаВозвращаемыеТовары.Отменено
	|			И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена)) ТОГДА
	|			ТаблицаВозвращаемыеТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ                                              КАК КОформлению,
	|	ТаблицаВозвращаемыеТовары.Количество               КАК Заявлено
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаВозвращаемыеТовары
	|ГДЕ
	|	ТаблицаВозвращаемыеТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                                  КАК Порядок,
	|	ТаблицаВозвращаемыеТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)             КАК ВидДвижения,
	|	&Период                                            КАК Период,
	|	ТаблицаВозвращаемыеТовары.Ссылка                   КАК ЗаказПоставщику,
	|	ТаблицаВозвращаемыеТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаВозвращаемыеТовары.Характеристика           КАК Характеристика,
	|	ТаблицаВозвращаемыеТовары.КодСтроки                КАК КодСтроки,
	|	0                                                  КАК КОформлению,
	|	-ТаблицаВозвращаемыеТовары.Количество              КАК Заявлено
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаВозвращаемыеТовары
	|ГДЕ
	|	ТаблицаВозвращаемыеТовары.Ссылка = &Ссылка
	|	И (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
	|	ИЛИ ТаблицаВозвращаемыеТовары.Отменено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 1 ТаблицаДвижениеТоваров
	|ВЫБРАТЬ
	|	ТаблицаВозвращаемыеТовары.НомерСтроки         КАК НомерСтроки,
	|	ТаблицаВозвращаемыеТовары.ДатаПоступления     КАК Период,
	|	&ЗаявкаНаВозвратТоваровОтКлиента              КАК Распоряжение,
	|	&Склад                                        КАК Склад,
	|	ВЫБОР КОГДА 
	|			ТаблицаВозвращаемыеТовары.Порча 
	|				И ТаблицаВозвращаемыеТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
	|			ТаблицаВозвращаемыеТовары.НоменклатураОприходование
	|       ИНАЧЕ ТаблицаВозвращаемыеТовары.Номенклатура
	|   КОНЕЦ                                         КАК Номенклатура,
	|	ВЫБОР КОГДА 
	|			ТаблицаВозвращаемыеТовары.Порча 
	|				И ТаблицаВозвращаемыеТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
	|			ТаблицаВозвращаемыеТовары.ХарактеристикаОприходование
	|       ИНАЧЕ ТаблицаВозвращаемыеТовары.Характеристика
	|   КОНЕЦ                                         КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                                  КАК Назначение,
	|	НЕОПРЕДЕЛЕНО                                  КАК ВариантОбеспечения,
	|	0                                             КАК ПланируемаяОтгрузка,
	|	ТаблицаВозвращаемыеТовары.Количество          КАК ПланируемоеПоступление,
	|	0                                             КАК СрокПоставки
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаВозвращаемыеТовары
	|
	|ГДЕ
	|	ТаблицаВозвращаемыеТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаВозвращаемыеТовары.Отменено
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки        КАК НомерСтроки,
	|	ТаблицаТовары.ДатаОтгрузки       КАК Период,
	|	&ЗаявкаНаВозвратТоваровОтКлиента КАК Распоряжение,
	|	&Склад                           КАК Склад,
	|	ТаблицаТовары.Номенклатура       КАК Номенклатура,
	|   ТаблицаТовары.Характеристика     КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) ТОГДА
	|			ТаблицаТовары.Ссылка.Назначение
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                            КАК Назначение,
	|	ТаблицаТовары.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ТаблицаТовары.Количество         КАК ПланируемаяОтгрузка,
	|	0                                КАК ПланируемоеПоступление,
	|	ТаблицаТовары.СрокПоставки       КАК СрокПоставки
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ (ТаблицаТовары.УказыватьСерии И ТаблицаТовары.СтатусУказанияСерий = 10)
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ ТаблицаТовары.Отменено
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 2 ТаблицаТоварыКПоступлению
	|ВЫБРАТЬ
	|	ТаблицаВозвращаемыеТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)             КАК ВидДвижения,
	|	ТаблицаВозвращаемыеТовары.ДатаПоступления          КАК Период,
	|	&Склад                                             КАК Склад,
	|	ВЫБОР КОГДА 
	|			ТаблицаВозвращаемыеТовары.Порча 
	|				И ТаблицаВозвращаемыеТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
	|			ТаблицаВозвращаемыеТовары.НоменклатураОприходование
	|       ИНАЧЕ ТаблицаВозвращаемыеТовары.Номенклатура
	|   КОНЕЦ                                              КАК Номенклатура,
	|	ВЫБОР КОГДА 
	|			ТаблицаВозвращаемыеТовары.Порча 
	|				И ТаблицаВозвращаемыеТовары.Ссылка.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
	|			ТаблицаВозвращаемыеТовары.ХарактеристикаОприходование
	|       ИНАЧЕ ТаблицаВозвращаемыеТовары.Характеристика
	|   КОНЕЦ                                              КАК Характеристика,
	|	ТаблицаВозвращаемыеТовары.Ссылка                   КАК ДокументПоступления,
	|	ТаблицаВозвращаемыеТовары.Количество               КАК КПоступлению
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаВозвращаемыеТовары
	|ГДЕ
	|	ТаблицаВозвращаемыеТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаВозвращаемыеТовары.Отменено
	|	И &ИспользоватьОрдернуюСхему
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 3 ТаблицаЗаказыКлиентов
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВложенныйЗапрос.Порядок)                КАК Порядок,
	|	МАКСИМУМ(ВложенныйЗапрос.НомерСтроки)            КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)           КАК ВидДвижения,
	|	ВложенныйЗапрос.Период                           КАК Период,
	|	&ЗаявкаНаВозвратТоваровОтКлиента                 КАК ЗаказКлиента,
	|	ВложенныйЗапрос.Номенклатура                     КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика                   КАК Характеристика,
	|	ВложенныйЗапрос.КодСтроки                        КАК КодСтроки,
	|	ВЫБОР КОГДА ВложенныйЗапрос.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
	|			&Склад
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                            КАК Склад,
	|	СУММА(ВложенныйЗапрос.Заказано)                  КАК Заказано,
	|	СУММА(ВложенныйЗапрос.КОформлению)               КАК КОформлению,
	|	СУММА(ВложенныйЗапрос.Сумма)                     КАК Сумма,
	|	ВложенныйЗапрос.ПричинаОтмены                    КАК ПричинаОтмены
	|ИЗ
	|	(ВЫБРАТЬ
	|		1                                       КАК Порядок,
	|		ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|		НачалоПериода(&Период, День)            КАК Период,
	|		ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|		ТаблицаТовары.Характеристика            КАК Характеристика,
	|		ТаблицаТовары.КодСтроки                 КАК КодСтроки,
	|		ТаблицаТовары.Количество                КАК Заказано,
	|		0                                       КАК КОформлению,
	|		ТаблицаТовары.СуммаСНДС                 КАК Сумма,
	|		НЕОПРЕДЕЛЕНО                            КАК ПричинаОтмены
	|	ИЗ
	|		Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		2                                       КАК Порядок,
	|		ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|		ТаблицаТовары.ДатаОтгрузки              КАК Период,
	|		ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|		ТаблицаТовары.Характеристика            КАК Характеристика,
	|		ТаблицаТовары.КодСтроки                 КАК КодСтроки,
	|		0                                       КАК Заказано,
	|		ТаблицаТовары.Количество                КАК КОформлению,
	|		0                                       КАК Сумма,
	|		НЕОПРЕДЕЛЕНО                            КАК ПричинаОтмены
	|	ИЗ
	|		Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И (НЕ ТаблицаТовары.Отменено)
	|		И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ПричинаОтмены,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.КодСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                        КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	&Период                                  КАК Период,
	|	&ЗаявкаНаВозвратТоваровОтКлиента         КАК ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура               КАК Номенклатура,
	|	ТаблицаТовары.Характеристика             КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                  КАК КодСтроки,
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
	|			&Склад
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                    КАК Склад,
	|	-ТаблицаТовары.Количество                КАК Заказано,
	|	0                                        КАК КОформлению,
	|	-ТаблицаТовары.СуммаСНДС                 КАК Сумма,
	|	ТаблицаТовары.ПричинаОтмены              КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Порядок
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 4 ТаблицаСвободныеОстатки
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	0                                      КАК ВНаличии,
	|	ТаблицаТовары.Количество               КАК ВРезерве,
	|	ТаблицаТовары.СрокПоставки             КАК СрокПоставки
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И (НЕ ТаблицаТовары.УказыватьСерии
	|			И ТаблицаТовары.СтатусУказанияСерий <> 10)
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка)
	|	И (НЕ ТаблицаТовары.Отменено)
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Склад                                 КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК ВНаличии,
	|	0                                      КАК ВРезерве,
	|	ТаблицаТовары.СрокПоставки             КАК СрокПоставки
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ((ТаблицаТовары.УказыватьСерии И ТаблицаТовары.СтатусУказанияСерий = 10)
	|				ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
	|	И (НЕ ТаблицаТовары.Отменено)
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 5 ТаблицаРезервыСерийТоваров
	|ВЫБРАТЬ
	|	ТаблицаСерии.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Ссылка КАК ДокументРезерва,
	|	&Склад КАК Склад,
	|	ТаблицаСерии.Номенклатура КАК Номенклатура,
	|	ТаблицаСерии.Характеристика КАК Характеристика,
	|	ТаблицаСерии.Серия КАК Серия,
	|	ТаблицаСерии.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеСерии КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Период,
	|	&Ссылка,
	|	&Склад КАК Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	ТаблицаТовары.Количество
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.СтатусУказанияСерий = 11
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
	|
	|;
	// 6. ОбеспечениеЗаказов
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Ссылка.Склад             КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Ссылка.Назначение        КАК Назначение,
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада) ТОГДА
	|		0
	|	ИНАЧЕ
	|		ТаблицаТовары.Количество
	|	КОНЕЦ                                  КАК Потребность,
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада) ТОГДА
	|		0
	|	ИНАЧЕ
	|		ТаблицаТовары.Количество
	|	КОНЕЦ                                  КАК КЗаказу,

	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада) ТОГДА
	|		ТаблицаТовары.Количество
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК НаличиеСоСклада
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТаблицаТовары.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка)
	|	И (НЕ ТаблицаТовары.Отменено)
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 7. ОбеспечениеЗаказовРаботами
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ДатаОтгрузки             КАК Период,
	|	ТаблицаТовары.Ссылка.Подразделение     КАК Подразделение,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Ссылка.Назначение        КАК Назначение,
	|	ТаблицаТовары.Количество               КАК КОбеспечению
	|
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ТаблицаТовары.Ссылка.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И (НЕ ТаблицаТовары.Отменено)
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
	|;
	|////////////////////////////////////////////////////////////////////////////////

	|";
	Запрос.Текст = Запрос.Текст
		+ ТекстЗапросаТаблицаРасчетыСКлиентами()
		+ ТекстЗапросаТаблицаРасчетыСКлиентамиПоследовательность()
		;
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ТаблицыДляДвижений.Вставить("ТаблицаЗаявкиНаВозвратТоваровОтКлиентов",       Результат[0].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаДвижениеТоваров",                        Результат[1].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаТоварыКПоступлению",                     Результат[2].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаЗаказыКлиентов",                         Результат[3].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаСвободныеОстатки",                       Результат[4].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРезервыСерийТоваров",                    Результат[5].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаОбеспечениеЗаказов",                     Результат[6].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаОбеспечениеЗаказовРаботами",             Результат[7].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСКлиентами",                      Результат[8].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСКлиентамиПоследовательность",    Результат[9].Выгрузить());

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Печать

Функция СформироватьПечатнуюФормуЗаявкиНаВозврат(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявкаНаВозврат.Ссылка КАК Ссылка,
	|	ЗаявкаНаВозврат.Номер КАК Номер,
	|	ЗаявкаНаВозврат.Дата КАК Дата,
	|	ЗаявкаНаВозврат.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаВозврат.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|				ИЛИ ЗаявкаНаВозврат.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьНДС,
	|	ЗаявкаНаВозврат.Организация.Префикс КАК Префикс,
	|	ЗаявкаНаВозврат.Контрагент КАК Контрагент,
	|	ЗаявкаНаВозврат.БанковскийСчет КАК БанковскийСчет,
	|	ЗаявкаНаВозврат.БанковскийСчет.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
	|	ЗаявкаНаВозврат.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗаявкаНаВозврат.Валюта КАК Валюта,
	|	ЗаявкаНаВозврат.Менеджер.ФизическоеЛицо.Наименование КАК Менеджер,
	|	ЗаявкаНаВозврат.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ЗаявкаНаВозврат.СуммаДокумента КАК СуммаКВозврату,
	|	ЗаявкаНаВозврат.ЗаменяющиеТовары.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|		ВЫБОР
	|			КОГДА ЗаявкаНаВозврат.ЗаменяющиеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ПРЕДСТАВЛЕНИЕ(ЗаявкаНаВозврат.ЗаменяющиеТовары.Номенклатура.ЕдиницаИзмерения)
	|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЗаявкаНаВозврат.ЗаменяющиеТовары.Упаковка.ЕдиницаИзмерения)
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		КоличествоУпаковок КАК Количество,
	|		Цена КАК Цена,
	|		ЗаявкаНаВозврат.ЗаменяющиеТовары.СуммаРучнойСкидки + ЗаявкаНаВозврат.ЗаменяющиеТовары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|		ЗаявкаНаВозврат.ЗаменяющиеТовары.Сумма + ЗаявкаНаВозврат.ЗаменяющиеТовары.СуммаРучнойСкидки + ЗаявкаНаВозврат.ЗаменяющиеТовары.СуммаАвтоматическойСкидки КАК СуммаБезСкидки,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		ДатаОтгрузки КАК ДатаОтгрузки,
	|		Характеристика.НаименованиеПолное КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ЗаявкаНаВозврат.ЗаменяющиеТовары.Упаковка.Коэффициент, 1) = 1
	|				ТОГДА НЕОПРЕДЕЛЕНО
	|			ИНАЧЕ ЗаявкаНаВозврат.ЗаменяющиеТовары.Упаковка.Наименование
	|		КОНЕЦ КАК Упаковка,
	|		Отменено КАК Отменено,
	|		Содержание КАК Содержание,
	|		ВЫБОР
	|			КОГДА
	|				Ссылка.ВернутьМногооборотнуюТару
	|				И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА
	|				ИСТИНА
	|			ИНАЧЕ
	|				ЛОЖЬ
	|		КОНЕЦ КАК ЭтоВозвратнаяТара
	|	) КАК ЗаменяющиеТовары,
	|	ЗаявкаНаВозврат.ВозвращаемыеТовары.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВЫБОР
	|			КОГДА ЗаявкаНаВозврат.ВозвращаемыеТовары.Порча
	|				ТОГДА ЗаявкаНаВозврат.ВозвращаемыеТовары.НоменклатураОприходование
	|			ИНАЧЕ ЗаявкаНаВозврат.ВозвращаемыеТовары.Номенклатура
	|		КОНЕЦ КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА ЗаявкаНаВозврат.ВозвращаемыеТовары.Порча
	|				ТОГДА ЗаявкаНаВозврат.ВозвращаемыеТовары.ХарактеристикаОприходование.НаименованиеПолное
	|			ИНАЧЕ ЗаявкаНаВозврат.ВозвращаемыеТовары.Характеристика.НаименованиеПолное
	|		КОНЕЦ КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ЗаявкаНаВозврат.ВозвращаемыеТовары.Упаковка.Коэффициент, 1) = 1
	|				ТОГДА НЕОПРЕДЕЛЕНО
	|			ИНАЧЕ ЗаявкаНаВозврат.ВозвращаемыеТовары.Упаковка.Наименование
	|		КОНЕЦ КАК Упаковка,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|		ВЫБОР
	|			КОГДА ЗаявкаНаВозврат.ВозвращаемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ПРЕДСТАВЛЕНИЕ(ЗаявкаНаВозврат.ВозвращаемыеТовары.Номенклатура.ЕдиницаИзмерения)
	|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЗаявкаНаВозврат.ВозвращаемыеТовары.Упаковка.ЕдиницаИзмерения)
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		КоличествоУпаковок КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		ВЫБОР
	|			КОГДА
	|				Ссылка.ВернутьМногооборотнуюТару
	|				И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА
	|				ИСТИНА
	|			ИНАЧЕ
	|				ЛОЖЬ
	|		КОНЕЦ КАК ЭтоВозвратнаяТара
	|	) КАК ВозвращаемыеТовары,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВозвратОтКомиссионера,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВозвратОтРозничногоПокупателя
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозврат
	|ГДЕ
	|	ЗаявкаНаВозврат.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ЗаявкаНаВозврат.ЗаменяющиеТовары.НомерСтроки,
	|	НомерСтроки";
	
	ЗаполнитьТабличныйДокументЗаявкиНаВозврат(ТабличныйДокумент, Запрос);
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявкаНаВозврат") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаявкаНаВозврат",
			НСтр("ru='Заявка на возврат'"),
			СформироватьПечатнуюФормуЗаявкиНаВозврат(МассивОбъектов, ОбъектыПечати)
		);
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументЗаявкиНаВозврат(ТабличныйДокумент, Запрос)
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаВозвратТоваровОтКлиента_ЗаявкаНаВозврат";
	
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	ПервыйДокумент = Истина;
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПФ_MXL_ЗаявкаНаВозврат");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПоставщик = Макет.ПолучитьОбласть("Поставщик");
	ОбластьПокупатель = Макет.ПолучитьОбласть("Покупатель");
	ОбластьДополнительнаяИнформация = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
	ОбластьПодвалЗаказа = Макет.ПолучитьОбласть("ПодвалЗаказа");
	
	Если Не ЗначениеЗаполнено(КолонкаКодов) Тогда
		// В случае если не надо выводить колонку для отображения кодов
		// 		раздвинем колонку товаров на ширину колонки кодов
		ОбластьПервойКолонкиТовара = Макет.Область("ПерваяКолонкаТовара");
		ОбластьПервойКолонкиТовара.ШиринаКолонки = ОбластьПервойКолонкиТовара.ШиринаКолонки + 12;
	КонецЕсли;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйДокумент = Ложь;
		КонецЕсли;
		
		ЗаменяющиеТовары   = ДанныеПечати.ЗаменяющиеТовары.Выгрузить();
		ВозвращаемыеТовары = ДанныеПечати.ВозвращаемыеТовары.Выгрузить();
		
		ЗаголовокСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ЗаменяющиеТовары, ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки);
		ЕстьСкидки = ЗаголовокСкидки.ЕстьСкидки;
		
		// Получение флага необходимости вывода строк заменяющих товаров
		ЕстьТоварыНаЗамену = ЗаменяющиеТовары.НайтиСтроки(Новый Структура("Отменено", Ложь)).Количество() > 0;
		
		// Вывод области заголовка печатной формы
		ВидДокумента = "";
		Если ЕстьТоварыНаЗамену Тогда
			ВидДокумента = НСтр("ru='Заявка на замену'");
		Иначе
			ВидДокумента = НСтр("ru='Заявка на возврат'");
		КонецЕсли;
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, ВидДокумента);
		
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ДанныеПечати.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// Вывод области поставщика
		ОбластьПоставщик.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьПоставщик);
		
		// Вывод области покупателя
		ОбластьПокупатель.Параметры.ПредставлениеПокупателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьПокупатель);
		
		// Вывод области таблицы возвращаемых товаров
		ПараметрыВывода = Новый Структура("ВыводитьКоды, ТолькоКоличество, УчитыватьНДС, ЦенаВключаетНДС, ВыводитьПодвалНДС, ЕстьСкидки",
			ВыводитьКоды, ДанныеПечати.ВозвратОтКомиссионера, ДанныеПечати.УчитыватьНДС, ДанныеПечати.ЦенаВключаетНДС, Ложь, Ложь
		);
		ВывестиТаблицуТоваровВТабличныйДокументЗаявкиНаВозврат(
			ТабличныйДокумент,
			Макет,
			ВозвращаемыеТовары,
			КолонкаКодов,
			НСтр("ru='Возвращаемый товар'"),
			ДанныеПечати,
			ПараметрыВывода
		);
		
		// Вывод области таблицы заменяющих товаров
		Если Не ДанныеПечати.ВозвратОтРозничногоПокупателя И ЕстьТоварыНаЗамену Тогда
			
			ПараметрыВывода = Новый Структура("ВыводитьКоды, ТолькоКоличество, УчитыватьНДС, ЦенаВключаетНДС, ВыводитьПодвалНДС, ЕстьСкидки, ЗаголовокСкидки",
				ВыводитьКоды, Ложь, ДанныеПечати.УчитыватьНДС, ДанныеПечати.ЦенаВключаетНДС, Истина, НЕ ДанныеПечати.ВозвратОтКомиссионера И ЕстьСкидки, ЗаголовокСкидки
			);
			ВывестиТаблицуТоваровВТабличныйДокументЗаявкиНаВозврат(
				ТабличныйДокумент,
				Макет,
				ЗаменяющиеТовары,
				КолонкаКодов,
				НСтр("ru='Заменяющий товар'"),
				ДанныеПечати,
				ПараметрыВывода
			);
			
		КонецЕсли;
		
		// Вывод дополнительной информации
		Если ЗначениеЗаполнено(ДанныеПечати.ДополнительнаяИнформация) Тогда
			ОбластьДополнительнаяИнформация.Параметры.Заполнить(ДанныеПечати);
			ТабличныйДокумент.Вывести(ОбластьДополнительнаяИнформация);
		КонецЕсли;
		
		// Вывод подвала заказа
		ОбластьПодвалЗаказа.Параметры.Менеджер = ФизическиеЛица.ФамилияИнициалыФизЛица(ДанныеПечати.Менеджер);
		ТабличныйДокумент.Вывести(ОбластьПодвалЗаказа);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

// Добавляет в табличный документ заявки на возврат таблицу товаров
//
// Параметры:
//	ТабличныйДокумент - ТабличныйДокумент
//	Макет - ТабличныйДокумент
//	Таблица - ТаблицаЗначений - Таблиза значений из запроса по документу ЗаявкаНаВозвратТоваровОтКлиента
//	ИмяКолонкиКодов - Строка - Наименование дополнительной колонки кодов, "Неопределено" в случае если колонку выводить не надо
//	ИмяКолонкиТоваров - Строка - Наименование колонки номенклатуры
//	ДанныеПечати - ВыборкаИзРезультатаЗапроса - Выборка по данным документа
//	ПараметрыВывода - Структура - Структура параметров вывода. Ключи: "ВыводитьКоды", "ТолькоКоличество", "УчитыватьНДС", "ЦенаВключаетНДС", "ВыводитьПодвалНДС", "ЕстьСкидки"
//
Процедура ВывестиТаблицуТоваровВТабличныйДокументЗаявкиНаВозврат(ТабличныйДокумент, 
	Макет, Таблица, ИмяКолонкиКодов, ИмяКолонкиТоваров, 
	ДанныеПечати, ПараметрыВывода)
	
	Валюта = ДанныеПечати.Валюта;
	
	// Получение суффикса имен областей
	Если ПараметрыВывода.ТолькоКоличество Тогда
		ИмяОбласти = "БезСумм";
	Иначе
		ИмяОбласти = ?(ПараметрыВывода.УчитыватьНДС, "СНДС", "") + ?(ПараметрыВывода.ЕстьСкидки, "СоСкидкой", "");
	КонецЕсли;
	
	// Получение флага необходимости учитывать отмененные товары
	УчитыватьОтмены = (Таблица.Колонки.Найти("Отменено") <> Неопределено);
	
	// Получение областей макета
	СтруктураОбластей = ПолучитьСтруктуруОбластейТаблицы(Макет, ИмяОбласти, ПараметрыВывода.ВыводитьКоды);
	
	// Вывод шапки таблицы
	ТабличныйДокумент.Вывести(СтруктураОбластей.ШапкаНомер);
	Если ПараметрыВывода.ВыводитьКоды Тогда
		СтруктураОбластей.ШапкаКод.Параметры.ИмяКолонкиКодов = ИмяКолонкиКодов;
		ТабличныйДокумент.Присоединить(СтруктураОбластей.ШапкаКод);
	КонецЕсли;
	СтруктураОбластей.ШапкаДанные.Параметры.ИмяКолонкиТоваров = ИмяКолонкиТоваров;
	Если ПараметрыВывода.ЕстьСкидки Тогда
		СтруктураОбластей.ШапкаДанные.Параметры.Скидка = ПараметрыВывода.ЗаголовокСкидки.Скидка;
		СтруктураОбластей.ШапкаДанные.Параметры.СуммаБезСкидки = ПараметрыВывода.ЗаголовокСкидки.СуммаСкидки;
	КонецЕсли;
	ТабличныйДокумент.Присоединить(СтруктураОбластей.ШапкаДанные);
	
	// Создание структуры итогов для таблицы значений
	СтруктураИтогов = Новый Структура;
	Если НЕ ПараметрыВывода.ТолькоКоличество Тогда
		СтруктураИтогов.Вставить("Всего", 0);
	КонецЕсли;
	Если ПараметрыВывода.УчитыватьНДС Тогда
		СтруктураИтогов.Вставить("ВсегоНДС", 0);
	КонецЕсли;
	Если ПараметрыВывода.ЕстьСкидки Тогда
		СтруктураИтогов.Вставить("ВсегоБезСкидки", 0);
		СтруктураИтогов.Вставить("ВсегоСкидка", 0);
	КонецЕсли;
	
	// Получние соответствия ставок НДС
	Если ПараметрыВывода.УчитыватьНДС Тогда
		СоответствиеСтавокНДС = ФормированиеПечатныхФорм.ПолучитьСоответствиеСтавокНДС();
	КонецЕсли;
	
	// Вывод строк таблицы товаров
	НомерСтроки = 0;
	Для Каждого Строка Из Таблица Цикл
		
		Если УчитыватьОтмены И Строка.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		// Инкремент счетчика строк
		НомерСтроки = НомерСтроки + 1;
		
		// Вывод номера строки
		СтруктураОбластей.СтрокаНомер.Параметры.НомерСтроки = НомерСтроки;
		ТабличныйДокумент.Вывести(СтруктураОбластей.СтрокаНомер);
		
		// Вывод колонки кода/артикула
		Если ПараметрыВывода.ВыводитьКоды Тогда
			СтруктураОбластей.СтрокаКод.Параметры.Артикул = Строка[ИмяКолонкиКодов];
			ТабличныйДокумент.Присоединить(СтруктураОбластей.СтрокаКод);
		КонецЕсли;
		
		// Вывод данных по товарам
		СтруктураОбластей.СтрокаДанные.Параметры.Заполнить(Строка);
		Если  ИмяКолонкиТоваров = "Заменяющий товар" Тогда
			СтруктураОбластей.СтрокаДанные.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Строка.НаименованиеПолное,
				Строка.Характеристика,
				,
				,
				Строка.Содержание,
				Строка.ЭтоВозвратнаяТара
			);
			Если ПараметрыВывода.ЕстьСкидки Тогда
				СтруктураОбластей.СтрокаДанные.Параметры.СуммаСкидки = ?(ПараметрыВывода.ЗаголовокСкидки.ТолькоНаценка,- СтруктураОбластей.СтрокаДанные.Параметры.СуммаСкидки,СтруктураОбластей.СтрокаДанные.Параметры.СуммаСкидки);
			КонецЕсли; 
		Иначе
			СтруктураОбластей.СтрокаДанные.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Строка.НаименованиеПолное,
				Строка.Характеристика,
				,
				,
				,
				Строка.ЭтоВозвратнаяТара
			);
		КонецЕсли;	
		ТабличныйДокумент.Присоединить(СтруктураОбластей.СтрокаДанные);
		
		// Накопление итогов
		Если НЕ ПараметрыВывода.ТолькоКоличество Тогда
			СтруктураИтогов.Всего = СтруктураИтогов.Всего + Строка.Сумма;
			Если ПараметрыВывода.УчитыватьНДС Тогда
				СтруктураИтогов.ВсегоНДС = СтруктураИтогов.ВсегоНДС + Строка.СуммаНДС;
				
				СуммаПоТекущейСтавкеНДС = СоответствиеСтавокНДС[Строка.СтавкаНДС];
				Если СуммаПоТекущейСтавкеНДС <> Неопределено Тогда
					СоответствиеСтавокНДС[Строка.СтавкаНДС] = СуммаПоТекущейСтавкеНДС + Строка.СуммаНДС;
				КонецЕсли;
				
			КонецЕсли;
			Если ПараметрыВывода.ЕстьСкидки Тогда
				СтруктураИтогов.ВсегоБезСкидки = СтруктураИтогов.ВсегоБезСкидки + Строка.СуммаБезСкидки;
				СтруктураИтогов.ВсегоСкидка = СтруктураИтогов.ВсегоСкидка + Строка.СуммаСкидки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Вывод подвала таблицы
	ТабличныйДокумент.Вывести(СтруктураОбластей.ПодвалНомер);
	Если ПараметрыВывода.ВыводитьКоды Тогда
		ТабличныйДокумент.Присоединить(СтруктураОбластей.ПодвалКод);
	КонецЕсли;
	СтруктураОбластей.ПодвалДанные.Параметры.Заполнить(СтруктураИтогов);
	Если ПараметрыВывода.ЕстьСкидки Тогда
		
		СтруктураОбластей.ПодвалДанные.Параметры.ВсегоСкидка =  ?(ПараметрыВывода.ЗаголовокСкидки.ТолькоНаценка,-СтруктураИтогов.ВсегоСкидка, СтруктураИтогов.ВсегоСкидка);
		СтруктураОбластей.ПодвалДанные.Параметры.ВсегоБезСкидки = СтруктураИтогов.ВсегоБезСкидки;
		
	КонецЕсли;
	ТабличныйДокумент.Присоединить(СтруктураОбластей.ПодвалДанные);
	
	// Вывод подвала НДС
	Если ПараметрыВывода.ВыводитьПодвалНДС И НЕ ПараметрыВывода.ТолькоКоличество Тогда
		Если ПараметрыВывода.УчитыватьНДС Тогда
			Для Каждого Ставка Из СоответствиеСтавокНДС Цикл
				
				Если Ставка.Значение = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(СтруктураОбластей.НДСНомер);
				Если ПараметрыВывода.ВыводитьКоды Тогда
					ТабличныйДокумент.Присоединить(СтруктураОбластей.НДСКод);
				КонецЕсли;
				СтруктураОбластей.НДСДанные.Параметры.НДС = ФормированиеПечатныхФорм.ТекстНДСПоСтавке(Ставка.Ключ, ПараметрыВывода.ЦенаВключаетНДС);
				СтруктураОбластей.НДСДанные.Параметры.ВсегоНДС = Ставка.Значение;
				
				ТабличныйДокумент.Присоединить(СтруктураОбластей.НДСДанные);
				
			КонецЦикла;
		Иначе
			ТабличныйДокумент.Вывести(СтруктураОбластей.НДСНомер);
			Если ПараметрыВывода.ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(СтруктураОбластей.НДСКод);
			КонецЕсли;
			СтруктураОбластей.НДСДанные.Параметры.НДС = НСтр("ru='Без налога (НДС)'");
			СтруктураОбластей.НДСДанные.Параметры.ВсегоНДС = "-";
			
			ТабличныйДокумент.Присоединить(СтруктураОбластей.НДСДанные);
		КонецЕсли;
	КонецЕсли;
	
	// Вывод итоговой суммы
	Если ПараметрыВывода.ТолькоКоличество Тогда
		ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", НомерСтроки);
		СуммаПрописью = "";
	Иначе
		СуммаКПрописи = СтруктураИтогов.Всего + ?(ПараметрыВывода.УчитыватьНДС И НЕ ПараметрыВывода.ЦенаВключаетНДС, СтруктураИтогов.ВсегоНДС, 0);
		ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", НомерСтроки);
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%", ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, Валюта));
		СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Валюта);
	КонецЕсли;
	СтруктураОбластей.СуммаПрописью.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
	СтруктураОбластей.СуммаПрописью.Параметры.СуммаПрописью = СуммаПрописью;
	ТабличныйДокумент.Вывести(СтруктураОбластей.СуммаПрописью);
	
КонецПроцедуры

Функция ПолучитьСтруктуруОбластейТаблицы(Макет, ИмяОбласти, ВыводитьКоды)
	
	СтруктураОбластей = Новый Структура;
	
	// Получение областей колонки "НомерСтроки"
	СтруктураОбластей.Вставить("ШапкаНомер", Макет.ПолучитьОбласть("ШапкаТаблицы"+ИмяОбласти+"|КолонкаНомерСтроки"));
	СтруктураОбластей.Вставить("СтрокаНомер", Макет.ПолучитьОбласть("СтрокаТаблицы"+ИмяОбласти+"|КолонкаНомерСтроки"));
	СтруктураОбластей.Вставить("ПодвалНомер", Макет.ПолучитьОбласть("ПодвалТаблицы"+ИмяОбласти+"|КолонкаНомерСтроки"));
	СтруктураОбластей.Вставить("НДСНомер", Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаНомерСтроки"));
	
	// Получение областей колонки "Код"
	Если ВыводитьКоды Тогда
		СтруктураОбластей.Вставить("ШапкаКод", Макет.ПолучитьОбласть("ШапкаТаблицы"+ИмяОбласти+"|КолонкаКод"));
		СтруктураОбластей.Вставить("СтрокаКод", Макет.ПолучитьОбласть("СтрокаТаблицы"+ИмяОбласти+"|КолонкаКод"));
		СтруктураОбластей.Вставить("ПодвалКод", Макет.ПолучитьОбласть("ПодвалТаблицы"+ИмяОбласти+"|КолонкаКод"));
		СтруктураОбластей.Вставить("НДСКод", Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКод"));
	КонецЕсли;
	
	// Получение областей колонки "Данные"
	СтруктураОбластей.Вставить("ШапкаДанные", Макет.ПолучитьОбласть("ШапкаТаблицы"+ИмяОбласти+"|КолонкаДанные"));
	СтруктураОбластей.Вставить("СтрокаДанные", Макет.ПолучитьОбласть("СтрокаТаблицы"+ИмяОбласти+"|КолонкаДанные"));
	СтруктураОбластей.Вставить("ПодвалДанные", Макет.ПолучитьОбласть("ПодвалТаблицы"+ИмяОбласти+"|КолонкаДанные"));
	СтруктураОбластей.Вставить("НДСДанные", Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаДанные"));
	
	// Получение области "СуммаПрописью"
	СтруктураОбластей.Вставить("СуммаПрописью", Макет.ПолучитьОбласть("СуммаПрописью"));
	
	Возврат СтруктураОбластей;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыСчетаНаОплату(ПараметрыПечати, МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Номер КАК Номер,
	|	Документы.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	Документы.Организация КАК Организация,
	|	Документы.Организация КАК ОрганизацияПоставщик,
	|	ТаблицаОтветственныеЛица.РуководительНаименование  КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|				ИЛИ Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьНДС,
	|	Документы.Организация.Префикс КАК Префикс,
	|	Документы.Контрагент КАК Контрагент,
	|	Документы.БанковскийСчет КАК БанковскийСчет,
	|	Документы.БанковскийСчет.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	Документы.Валюта КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо.Наименование КАК Менеджер,
	|	Документы.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	Документы.СуммаДокумента КАК СуммаКВозврату,
	|	ЛОЖЬ КАК ЧастичнаяОплата,
	|	"""" КАК НазначениеПлатежа,
	|	100 КАК ПроцентОплаты,
	|	Документы.СуммаЗамены КАК СуммаДокумента,
	|	ИСТИНА КАК СчетКВозврату
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК Документы
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Документы.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.Ссылка КАК Ссылка,
	|	ЭтапыГрафикаОплаты.НомерСтроки КАК НомерСтроки,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа КАК СуммаПлатежа
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.Код КАК Код,
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Товары.Упаковка.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Товары.Характеристика.НаименованиеПолное КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Товары.Упаковка.Наименование
	|	КОНЕЦ КАК Упаковка,
	|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	Товары.Сумма + Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаБезСкидки,
	|	Товары.Содержание КАК Содержание
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|	И Товары.Отменено = ЛОЖЬ
	|	И (Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		И НЕ Товары.Ссылка.ВернутьМногооборотнуюТару)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты", ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыЗаявлениеНаВозвратТоваровОтКлиента(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаВозврат.Ссылка КАК Ссылка,
	|	ЗаявкаНаВозврат.Дата КАК Дата,
	|	ЗаявкаНаВозврат.СуммаДокумента КАК Сумма,
	|	ЗаявкаНаВозврат.Валюта КАК Валюта,
	|	ЗаявкаНаВозврат.Организация.НаименованиеСокращенное КАК Организация,
	|	ЗаявкаНаВозврат.ПричинаВозврата КАК ПричинаВозврата,
	|	ЗаявкаНаВозврат.Покупатель КАК Покупатель,
	|	ЗаявкаНаВозврат.ЧекККМ.Номер КАК ЧекККМНомер,
	|	ЗаявкаНаВозврат.ЧекККМ.Дата КАК ЧекККМДата,
	|	ЗаявкаНаВозврат.ДатаРожденияПокупателя КАК ДатаРождения,
	|	ЗаявкаНаВозврат.ВидДокументаПокупателя КАК ВидДокумента,
	|	ЗаявкаНаВозврат.СерияДокументаПокупателя КАК Серия,
	|	ЗаявкаНаВозврат.НомерДокументаПокупателя КАК Номер,
	|	ЗаявкаНаВозврат.ДатаВыдачиДокументаПокупателя КАК ДатаВыдачи,
	|	ЗаявкаНаВозврат.СрокДействияДокументаПокупателя КАК СрокДействия,
	|	ЗаявкаНаВозврат.КемВыданДокументПокупателя КАК КемВыдан,
	|	ЗаявкаНаВозврат.КодПодразделенияДокументаПокупателя КАК КодПодразделения,
	|	ЗаявкаНаВозврат.ВозвращаемыеТовары.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура.НаименованиеПолное КАК ПолноеНаименованиеНоменклатуры,
	|		Характеристика.НаименованиеПолное КАК ПолноеНаименованиеХарактеристики,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ЗаявкаНаВозврат.ВозвращаемыеТовары.Упаковка.Коэффициент, 1) = 1
	|				ТОГДА НЕОПРЕДЕЛЕНО
	|			ИНАЧЕ ЗаявкаНаВозврат.ВозвращаемыеТовары.Упаковка.Наименование
	|		КОНЕЦ КАК НаименованиеУпаковки,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		ВЫБОР
	|			КОГДА ЗаявкаНаВозврат.ВозвращаемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ПРЕДСТАВЛЕНИЕ(ЗаявкаНаВозврат.ВозвращаемыеТовары.Номенклатура.ЕдиницаИзмерения)
	|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЗаявкаНаВозврат.ВозвращаемыеТовары.Упаковка.ЕдиницаИзмерения)
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		КоличествоУпаковок КАК Количество,
	|		СуммаСНДС КАК Сумма,
	|		ВЫБОР
	|			КОГДА
	|				Ссылка.ВернутьМногооборотнуюТару
	|				И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА
	|				ИСТИНА
	|			ИНАЧЕ
	|				ЛОЖЬ
	|		КОНЕЦ КАК ЭтоВозвратнаяТара
	|	) КАК Товары
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозврат
	|ГДЕ
	|	ЗаявкаНаВозврат.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов); 
	Результат = Запрос.Выполнить();
	СтруктураДанныхДляПечати    = Новый Структура("РезультатПоШапке", Результат);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	КонецЕсли;
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("ПеревозчикПартнер");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Автозаполнение статуса

// Осуществляет вычисление максимально возможного статуса заявки на возврат
//
Функция МаксимальныйСтатусЗаявкиНаВозвратТоваровОтКлиента(ПараметрыРасчета, КэшированныеЗначения = Неопределено) Экспорт
	
	МаксимальныйСтатусДокумента = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.ПустаяСсылка();
	
	ЕстьАвансДоОбеспечения					= ЕстьАвансДоОбеспечения(ПараметрыРасчета.ЭтапыГрафикаОплаты);
	ТолькоЭтапОплатыПредоплатаДоОтгрузки	= ТолькоЭтапОплатыПредоплатаДоОтгрузки(ПараметрыРасчета.ЭтапыГрафикаОплаты);
	ЕстьПредоплатаДоОтгрузки				= ЕстьПредоплатаДоОтгрузки(ПараметрыРасчета.ЭтапыГрафикаОплаты);
	ТолькоКредитныйЭтапОплаты				= ТолькоКредитныйЭтапОплаты(ПараметрыРасчета.ЭтапыГрафикаОплаты);
	ТребуетсяКонтрольСтатусаПоОбеспечению	= Ложь;
	
	Если ПараметрыРасчета.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера")
		ИЛИ ПараметрыРасчета.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
		ИЛИ ПараметрыРасчета.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		МаксимальныйСтатусЗаявкиПоРасчетам = МаксимальныйСтатусЗаявкиПоОбеспечению(ПараметрыРасчета);
		ТребуетсяКонтрольСтатусаПоОбеспечению = Ложь;
		
	// Вычислим статус когда расчетов по документу еще нет
	ИначеЕсли Не ПараметрыРасчета.Проведен И ЕстьАвансДоОбеспечения Тогда
			
		МаксимальныйСтатусЗаявкиПоРасчетам = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована;
		ТребуетсяКонтрольСтатусаПоОбеспечению = Ложь;
	ИначеЕсли Не ПараметрыРасчета.Проведен И ЕстьПредоплатаДоОтгрузки Тогда
			
		МаксимальныйСтатусЗаявкиПоРасчетам = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению;
		
		ТребуетсяКонтрольСтатусаПоОбеспечению = Истина;
		
	ИначеЕсли Не ПараметрыРасчета.Проведен И ТолькоКредитныйЭтапОплаты Тогда
			
		МаксимальныйСтатусЗаявкиПоРасчетам = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке;
		
		ТребуетсяКонтрольСтатусаПоОбеспечению = Истина;
		
	ИначеЕсли ПараметрыРасчета.ВсеСтрокиОтменены И ПараметрыРасчета.ВсеВозвращаемыеСтрокиОтменены Тогда
			
		МаксимальныйСтатусЗаявкиПоРасчетам = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена;
		
		ТребуетсяКонтрольСтатусаПоОбеспечению = Ложь;
	ИначеЕсли ПараметрыРасчета.Проведен И (НЕ ПараметрыРасчета.ЕстьЗаменяющиеТовары ИЛИ ПараметрыРасчета.ВсеСтрокиОтменены)
		И ПараметрыРасчета.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату Тогда
		
		МаксимальныйСтатусЗаявкиПоРасчетам = МаксимальныйСтатусЗаявкиПоВозврату(ПараметрыРасчета);
		
		ТребуетсяКонтрольСтатусаПоОбеспечению = Ложь;
		
	ИначеЕсли (НЕ ПараметрыРасчета.ЕстьЗаменяющиеТовары ИЛИ ПараметрыРасчета.ВсеСтрокиОтменены) 
		И ПараметрыРасчета.Статус <> Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована 
		И ПараметрыРасчета.Статус <> Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена Тогда
		
		МаксимальныйСтатусЗаявкиПоРасчетам = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату;
		
		// Установим максимальный из статусов
		ВозможныеСтатусы = СтатусыПоПорядку(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована, Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена);
		
		ИндексМаксСтатусаПоРасчетам = ВозможныеСтатусы.Найти(МаксимальныйСтатусЗаявкиПоРасчетам);
		ИндексСтатусаДокумента = ВозможныеСтатусы.Найти(ПараметрыРасчета.Статус);
		
		МаксимальныйИндексСтатуса = Макс(ИндексМаксСтатусаПоРасчетам, ИндексСтатусаДокумента);
		
		МаксимальныйСтатусЗаявкиПоРасчетам = ВозможныеСтатусы.Получить(МаксимальныйИндексСтатуса);
		
		ТребуетсяКонтрольСтатусаПоОбеспечению = Ложь;
		
	Иначе
		
		МаксимальныйСтатусЗаявкиПоРасчетам = МаксимальныйСтатусЗаявкиПоРасчетам(ПараметрыРасчета);
		
		Если МаксимальныйСтатусЗаявкиПоРасчетам = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована
			Или МаксимальныйСтатусЗаявкиПоРасчетам = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована Тогда
			
				ТребуетсяКонтрольСтатусаПоОбеспечению = Ложь;
			
		КонецЕсли;
		
		ТребуетсяКонтрольСтатусаПоОбеспечению = Истина;
		
	КонецЕсли;
	
	Если ТребуетсяКонтрольСтатусаПоОбеспечению Тогда
		МаксимальныйСтатусЗаявкиПоОбеспечению = МаксимальныйСтатусЗаявкиПоОбеспечению(ПараметрыРасчета);
		
		// Установим минимальный из полученных статусов
		ВозможныеСтатусы = СтатусыПоПорядку(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована, Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена);
		
		ИндексМаксСтатусаПоРасчетам = ВозможныеСтатусы.Найти(МаксимальныйСтатусЗаявкиПоРасчетам);
		ИндексМаксСтатусаПоОбеспечению = ВозможныеСтатусы.Найти(МаксимальныйСтатусЗаявкиПоОбеспечению);
		
		МинимальныйИндексСтатуса = Мин(ИндексМаксСтатусаПоРасчетам, ИндексМаксСтатусаПоОбеспечению);
		
		МаксимальныйСтатусДокумента = ВозможныеСтатусы.Получить(МинимальныйИндексСтатуса);
		
	Иначе
		
		МаксимальныйСтатусДокумента = МаксимальныйСтатусЗаявкиПоРасчетам;
		
	КонецЕсли;
	
	Возврат МаксимальныйСтатусДокумента;
	
КонецФункции

Функция ЕстьАвансДоОбеспечения(ЭтапыГрафикаОплаты)
	
	ЕстьАвансДоОбеспечения = Ложь;
	
	ОтборПоЭтапуОплаты = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения) ;
	НайденныеСтроки = ЭтапыГрафикаОплаты.НайтиСтроки(ОтборПоЭтапуОплаты);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЕстьАвансДоОбеспечения = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьАвансДоОбеспечения;
	
КонецФункции

Функция ТолькоЭтапОплатыПредоплатаДоОтгрузки(ЭтапыГрафикаОплаты)
	
	ТолькоЭтапОплатыПредоплатаДоОтгрузки = Ложь;
	
	Если ЭтапыГрафикаОплаты.Количество() = 1 Тогда
		
		ТолькоЭтапОплатыПредоплатаДоОтгрузки = ЕстьПредоплатаДоОтгрузки(ЭтапыГрафикаОплаты);
		
	КонецЕсли;
	
	Возврат ТолькоЭтапОплатыПредоплатаДоОтгрузки;
	
КонецФункции

Функция ЕстьПредоплатаДоОтгрузки(ЭтапыГрафикаОплаты)
	
	ЕстьПредоплатаДоОтгрузки = Ложь;
	
	ОтборПоЭтапуОплаты = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки) ;
	НайденныеСтроки = ЭтапыГрафикаОплаты.НайтиСтроки(ОтборПоЭтапуОплаты);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЕстьПредоплатаДоОтгрузки = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьПредоплатаДоОтгрузки;
	
КонецФункции

Функция ТолькоКредитныйЭтапОплаты(ЭтапыГрафикаОплаты)
	
	ТолькоКредитныйЭтапОплаты = Ложь;
	
	ОтборПоКредитномуЭтапу = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки);
	НайденныеСтроки = ЭтапыГрафикаОплаты.НайтиСтроки(ОтборПоКредитномуЭтапу);
	
	Если ЭтапыГрафикаОплаты.Количество() = 1 ИЛИ ЭтапыГрафикаОплаты.Количество() = НайденныеСтроки.Количество()Тогда
		
		ТолькоКредитныйЭтапОплаты = ЕстьКредитПослеОтгрузки(ЭтапыГрафикаОплаты);
		
	КонецЕсли;
	
	Возврат ТолькоКредитныйЭтапОплаты;
	
КонецФункции

Функция СтатусыПоПорядку(НачальныйСтатус, КонечныйСтатус)
	
	СтатусыВПорядкеУбывания = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоСтатусамПоПорядку();
	
	Запрос.УстановитьПараметр("НачальныйСтатус", НачальныйСтатус);
	Запрос.УстановитьПараметр("КонечныйСтатус", КонечныйСтатус);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		СтатусыВПорядкеУбывания = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		СтатусыВПорядкеУбывания.Вставить(1, СтатусыВПорядкеУбывания.Получить(СтатусыВПорядкеУбывания.ВГраница()));
		СтатусыВПорядкеУбывания.Удалить(СтатусыВПорядкеУбывания.ВГраница());
		
	КонецЕсли;
	
	Возврат СтатусыВПорядкеУбывания;
		
КонецФункции

Функция ЕстьКредитПослеОтгрузки(ЭтапыГрафикаОплаты)
	
	ЕстьКредитПослеОтгрузки = Ложь;
	
	ОтборПоЭтапуОплаты = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки) ;
	НайденныеСтроки = ЭтапыГрафикаОплаты.НайтиСтроки(ОтборПоЭтапуОплаты);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЕстьКредитПослеОтгрузки = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьКредитПослеОтгрузки;
	
КонецФункции

Функция ТекстЗапросаПоСтатусамПоПорядку()
	
	Текст = "ВЫБРАТЬ
	|	СтатусыЗаявокНаВозвратТоваровОтКлиентов.Порядок
	|ПОМЕСТИТЬ НачальныйСтатус
	|ИЗ
	|	Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов КАК СтатусыЗаявокНаВозвратТоваровОтКлиентов
	|ГДЕ
	|	СтатусыЗаявокНаВозвратТоваровОтКлиентов.Ссылка = &НачальныйСтатус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыЗаявокНаВозвратТоваровОтКлиентов.Порядок
	|ПОМЕСТИТЬ КонечныйСтатус
	|ИЗ
	|	Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов КАК СтатусыЗаявокНаВозвратТоваровОтКлиентов
	|ГДЕ
	|	СтатусыЗаявокНаВозвратТоваровОтКлиентов.Ссылка = &КонечныйСтатус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыПослеТекущего.Ссылка
	|ИЗ
	|	КонечныйСтатус КАК КонечныйСтатус
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтатусыЗаявокНаВозвратТоваровОтКлиентов.Ссылка КАК Ссылка
	|		ИЗ
	|			НачальныйСтатус КАК НачальныйСтатус
	|				ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов КАК СтатусыЗаявокНаВозвратТоваровОтКлиентов
	|				ПО (СтатусыЗаявокНаВозвратТоваровОтКлиентов.Порядок >= НачальныйСтатус.Порядок)) КАК СтатусыПослеТекущего
	|		ПО КонечныйСтатус.Порядок >= СтатусыПослеТекущего.Ссылка.Порядок
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыПослеТекущего.Ссылка.Порядок";
	
	Возврат Текст;
	
КонецФункции

Функция МаксимальныйСтатусЗаявкиПоОбеспечению(ПараметрыРасчета)
	
	// Проверим состояние обеспечения
	ПараметрыСостоянияОбеспечения = Новый Структура;
	ПараметрыСостоянияОбеспечения.Вставить("Заказ", ПараметрыРасчета.Заказ);
	ПараметрыСостоянияОбеспечения.Вставить("Склад", ПараметрыРасчета.Склад);
	ПараметрыСостоянияОбеспечения.Вставить("ЖелаемаяДатаОтгрузки", ПараметрыРасчета.ЖелаемаяДатаОтгрузки);
	ПараметрыСостоянияОбеспечения.Вставить("АдресТовары", ПараметрыРасчета.АдресТовары);
	ПараметрыСостоянияОбеспечения.Вставить("ОтборПоСостояниюНаличия", ПараметрыРасчета.ОтборПоСостояниюНаличия);
	ПараметрыСостоянияОбеспечения.Вставить("НеОтгружатьЧастями", ПараметрыРасчета.НеОтгружатьЧастями);
	
	ОбработкаСостояниеОбеспечения = Обработки.СостояниеОбеспечения.Создать();
	ОбработкаСостояниеОбеспечения.ПолучитьСостояниеОбеспечения(ПараметрыСостоянияОбеспечения);
	
	// Установим статус, если нет необспеченных потребностей - все отменено
	Если ПараметрыРасчета.ВсеСтрокиОтменены И ПараметрыРасчета.ВсеВозвращаемыеСтрокиОтменены Тогда
	
		МаксимальныйСтатусЗаявкиПоОбеспечению = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена;
		
	// Установим статус, если нет необспеченных потребностей - все отгружено
	ИначеЕсли ОбработкаСостояниеОбеспечения.Товары.Количество() = 0 Тогда
		
		МаксимальныйСтатусЗаявкиПоОбеспечению = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена;
		
	// Установим статус, если есть необеспеченные потребности
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СостояниеОбеспечения", ОбработкаСостояниеОбеспечения.Товары);
		Запрос.Текст = ТекстЗапросаПроверкиСостоянияОбеспечения();
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			МаксимальныйСтатусЗаявкиПоОбеспечению = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке;
			
		Иначе
			
			МаксимальныйСтатусЗаявкиПоОбеспечению = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МаксимальныйСтатусЗаявкиПоОбеспечению;
	
КонецФункции

Функция ТекстЗапросаПроверкиСостоянияОбеспечения()
	
	ТекстЗапросаПроверкиСостоянияОбеспечения = "
	|ВЫБРАТЬ
	|	СостояниеОбеспечения.Номенклатура,
	|	СостояниеОбеспечения.Характеристика,
	|	СостояниеОбеспечения.Склад,
	|	СостояниеОбеспечения.ДатаОтгрузки,
	|	СостояниеОбеспечения.ГраницаГрафикаДоступности,
	|	СостояниеОбеспечения.НеОбеспечено,
	|	СостояниеОбеспечения.ЧастичноИлиНетВНаличии,
	|	СостояниеОбеспечения.ПринятКОбеспечению,
	|	СостояниеОбеспечения.ОжидаемаяДатаПоступления,
	|	СостояниеОбеспечения.ОбеспеченоПоступлением
	|ПОМЕСТИТЬ СостояниеОбеспечения
	|ИЗ
	|	&СостояниеОбеспечения КАК СостояниеОбеспечения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрольОбеспечения.Номенклатура,
	|	КонтрольОбеспечения.Характеристика,
	|	КонтрольОбеспечения.Склад,
	|	КонтрольОбеспечения.ВариантКонтроля,
	|	КонтрольОбеспечения.ДатаОтгрузки,
	|	КонтрольОбеспечения.ГраницаГрафикаДоступности,
	|	КонтрольОбеспечения.НеОбеспечено,
	|	КонтрольОбеспечения.ЧастичноИлиНетВНаличии,
	|	КонтрольОбеспечения.ПринятКОбеспечению,
	|	КонтрольОбеспечения.ОжидаемаяДатаПоступления,
	|	КонтрольОбеспечения.ОбеспеченоПоступлением
	|ИЗ
	|	(ВЫБРАТЬ
	|		СостояниеОбеспечения.Номенклатура КАК Номенклатура,
	|		СостояниеОбеспечения.Характеристика КАК Характеристика,
	|		СостояниеОбеспечения.Склад КАК Склад,
	|		ВЫБОР
	|			КОГДА НЕ НастройкаКонтроляОстатков.ВариантКонтроля ЕСТЬ NULL 
	|				ТОГДА НастройкаКонтроляОстатков.ВариантКонтроля
	|			ИНАЧЕ Склады.ВариантКонтроля
	|		КОНЕЦ КАК ВариантКонтроля,
	|		СостояниеОбеспечения.ДатаОтгрузки КАК ДатаОтгрузки,
	|		СостояниеОбеспечения.ГраницаГрафикаДоступности КАК ГраницаГрафикаДоступности,
	|		СостояниеОбеспечения.НеОбеспечено КАК НеОбеспечено,
	|		СостояниеОбеспечения.ЧастичноИлиНетВНаличии КАК ЧастичноИлиНетВНаличии,
	|		СостояниеОбеспечения.ПринятКОбеспечению КАК ПринятКОбеспечению,
	|		СостояниеОбеспечения.ОжидаемаяДатаПоступления КАК ОжидаемаяДатаПоступления,
	|		СостояниеОбеспечения.ОбеспеченоПоступлением КАК ОбеспеченоПоступлением
	|	ИЗ
	|		СостояниеОбеспечения КАК СостояниеОбеспечения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО СостояниеОбеспечения.Склад = Склады.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаКонтроляОстатков
	|			ПО СостояниеОбеспечения.Номенклатура = НастройкаКонтроляОстатков.Номенклатура
	|				И СостояниеОбеспечения.Характеристика = НастройкаКонтроляОстатков.Характеристика
	|				И СостояниеОбеспечения.Склад = НастройкаКонтроляОстатков.Склад) КАК КонтрольОбеспечения
	|ГДЕ
	|	(КонтрольОбеспечения.ЧастичноИлиНетВНаличии
	|				И КонтрольОбеспечения.ВариантКонтроля = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика)
	|				И КонтрольОбеспечения.ДатаОтгрузки < КонтрольОбеспечения.ГраницаГрафикаДоступности
	|				И (КонтрольОбеспечения.ОбеспеченоПоступлением > 0
	|						И (КонтрольОбеспечения.ОжидаемаяДатаПоступления = ДАТАВРЕМЯ(1, 1, 1)
	|							ИЛИ КонтрольОбеспечения.ОжидаемаяДатаПоступления > КонтрольОбеспечения.ГраницаГрафикаДоступности)
	|					ИЛИ КонтрольОбеспечения.НеОбеспечено > 0)
	|			ИЛИ КонтрольОбеспечения.ЧастичноИлиНетВНаличии
	|				И КонтрольОбеспечения.ВариантКонтроля = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомРезерва))";
	
	Возврат ТекстЗапросаПроверкиСостоянияОбеспечения;
	
КонецФункции

Функция МаксимальныйСтатусЗаявкиПоРасчетам(ПараметрыРасчета)
	
	МаксимальныйСтатусЗаявкиПоРасчетам = ПараметрыРасчета.Статус;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасчетаМаксимальногоСтатусаПоРасчетам();
	Запрос.УстановитьПараметр("ЗаявкаНаВозврат", ПараметрыРасчета.Заказ);
	Запрос.УстановитьПараметр("Проведен", ПараметрыРасчета.Проведен);
	Запрос.УстановитьПараметр("Статус", ПараметрыРасчета.Статус);
	Запрос.УстановитьПараметр("СуммаАвансаДоОбеспечения", ПараметрыРасчета.СуммаАвансаДоОбеспечения);
	Запрос.УстановитьПараметр("СуммаПредоплатыДоОтгрузки", ПараметрыРасчета.СуммаПредоплатыДоОтгрузки);
	Запрос.УстановитьПараметр("СуммаДокумента", ПараметрыРасчета.СуммаДокумента);
	Запрос.УстановитьПараметр("ПорядокРасчетов", ПараметрыРасчета.ПорядокРасчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		МаксимальныйСтатусЗаявкиПоРасчетам = Выборка.МаксимальныйСтатусЗаявки;
		
	// Все расчеты выполнены или отсутствуют
	Иначе
		Если ПараметрыРасчета.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована
			ИЛИ ПараметрыРасчета.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена
			ИЛИ ПараметрыРасчета.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена Тогда
			
			МаксимальныйСтатусЗаявкиПоРасчетам = ПараметрыРасчета.Статус;
			
		ИначеЕсли ПараметрыРасчета.Проведен И (НЕ ПараметрыРасчета.ЕстьЗаменяющиеТовары ИЛИ ПараметрыРасчета.ВсеСтрокиОтменены) Тогда
			МаксимальныйСтатусЗаявкиПоРасчетам = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату;
		ИначеЕсли ПараметрыРасчета.Проведен Тогда
			МаксимальныйСтатусЗаявкиПоРасчетам = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МаксимальныйСтатусЗаявкиПоРасчетам;
	
КонецФункции

Функция ТекстЗапросаРасчетаМаксимальногоСтатусаПоРасчетам()
	
	ТекстЗапросаРасчетаМаксимальногоСтатусаПоРасчетам = "
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ &Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.ПустаяСсылка)
	|
	|		КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
	|
	|		КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
	|			
	|		КОГДА &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|				ИЛИ &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке)
	|
	|		// Сумма аванса не оплачена
	|		КОГДА (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке))
	|				И &СуммаАвансаДоОбеспечения > 0
	|				И &СуммаАвансаДоОбеспечения > &СуммаДокумента - ЕСТЬNULL(СостояниеРасчетов.КОплатеОстаток, 0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована)
	|
	|		// Сумма предоплаты до отгрузки не оплачена
	|		КОГДА (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке))
	|				И &СуммаПредоплатыДоОтгрузки > 0
	|				И &СуммаПредоплатыДоОтгрузки > &СуммаДокумента - ЕСТЬNULL(СостояниеРасчетов.КОплатеОстаток, 0) - &СуммаАвансаДоОбеспечения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)
	|
	|		// Аванс и предоплата до отгрузки оплачены
	|		КОГДА (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке))
	|				И &СуммаДокумента - ЕСТЬNULL(СостояниеРасчетов.КОплатеОстаток, 0) >= &СуммаАвансаДоОбеспечения + &СуммаПредоплатыДоОтгрузки
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке)
	|
	|		// Кредит не оплачен
	|		КОГДА (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке))
	|				И &СуммаДокумента - &СуммаАвансаДоОбеспечения + &СуммаПредоплатыДоОтгрузки < &СуммаДокумента - ЕСТЬNULL(СостояниеРасчетов.КОплатеОстаток, 0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке)
	|
	|		//Все оплачено и отгружено
	|		КОГДА &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена)
	|
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.ПустаяСсылка)
	|	КОНЕЦ КАК МаксимальныйСтатусЗаявки
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ТаблицаРасчетов.КОплатеОстаток) КАК КОплатеОстаток,
	|		СУММА(ТаблицаРасчетов.СуммаОстаток) КАК СуммаОстаток,
	|		ТаблицаРасчетов.ЗаказКлиента КАК ЗаказКлиента
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РасчетыСКлиентамиОстатки.КОплатеОстаток КАК КОплатеОстаток,
	|			0 КАК СуммаОстаток,
	|			РасчетыСКлиентамиОстатки.ЗаказКлиента КАК ЗаказКлиента
	|		ИЗ
	|			РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента = &ЗаявкаНаВозврат) КАК РасчетыСКлиентамиОстатки
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			0,
	|			ЗаказыКлиентовОстатки.СуммаОстаток,
	|			ЗаказыКлиентовОстатки.ЗаказКлиента
	|		ИЗ
	|			РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &ЗаявкаНаВозврат) КАК ЗаказыКлиентовОстатки) КАК ТаблицаРасчетов
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаРасчетов.ЗаказКлиента) КАК СостояниеРасчетов
	|";
	
	Возврат ТекстЗапросаРасчетаМаксимальногоСтатусаПоРасчетам;
	
КонецФункции

Функция МаксимальныйСтатусЗаявкиПоВозврату(ПараметрыРасчета)
	
	МаксимальныйСтатусЗаявкиПоВозврату = ПараметрыРасчета.Статус;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасчетаМаксимальногоСтатусаПоВозврату();
	Запрос.УстановитьПараметр("ЗаявкаНаВозврат", ПараметрыРасчета.Заказ);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		МаксимальныйСтатусЗаявкиПоВозврату = Выборка.МаксимальныйСтатусЗаявки;
		
	Иначе
		МаксимальныйСтатусЗаявкиПоВозврату = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена;
	КонецЕсли;
	
	Возврат МаксимальныйСтатусЗаявкиПоВозврату;
	
КонецФункции

Функция ТекстЗапросаРасчетаМаксимальногоСтатусаПоВозврату()
	
	ТекстЗапросаРасчетаМаксимальногоСтатусаПоВозврату = "
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостояниеВозвратов.КОформлениюОстаток, 0) > 0 ИЛИ ЕСТЬNULL(СостояниеВозвратов.КПоступлениюОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)
	|	КОНЕЦ КАК МаксимальныйСтатусЗаявки
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ТаблицаВозвратов.КОформлениюОстаток)  КАК КОформлениюОстаток,
	|		СУММА(ТаблицаВозвратов.КПоступлениюОстаток) КАК КПоступлениюОстаток,
	|		ТаблицаВозвратов.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЗаявкиНаВозвратТоваровОтКлиентовОстатки.КОформлениюОстаток КАК КОформлениюОстаток,
	|			0 КАК КПоступлениюОстаток,
	|			ЗаявкиНаВозвратТоваровОтКлиентовОстатки.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
	|		ИЗ
	|			РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки(, ЗаявкаНаВозвратТоваровОтКлиента = &ЗаявкаНаВозврат) КАК ЗаявкиНаВозвратТоваровОтКлиентовОстатки
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			0,
	|			ТоварыКПоступлениюОстатки.КПоступлениюОстаток,
	|			ТоварыКПоступлениюОстатки.ДокументПоступления
	|		ИЗ
	|			РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления = &ЗаявкаНаВозврат) КАК ТоварыКПоступлениюОстатки) КАК ТаблицаВозвратов
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаВозвратов.ЗаявкаНаВозвратТоваровОтКлиента) КАК СостояниеВозвратов
	|";
	
	Возврат ТекстЗапросаРасчетаМаксимальногоСтатусаПоВозврату;
	
КонецФункции

Функция РассчитатьСтатусДокументаСервер(Объект, КоличествоОбработанных) Экспорт
	
	СтатусДоРасчета = Объект.Статус;
	
	СтатусРасчитан = Ложь;
	
	Если СтатусДоРасчета <> ПредопределенноеЗначение("Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена") Тогда
		ЗаполнитьПередРасчетомМаксимальногоСтатуса(Объект);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Отменено", Истина);
		НайденныеСтроки =  Объект.ЗаменяющиеТовары.НайтиСтроки(ПараметрыОтбора); 
		
		ВсеСтрокиОтменены = (Объект.ЗаменяющиеТовары.Количество() = НайденныеСтроки.Количество());
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Отменено", Истина);
		НайденныеСтроки =  Объект.ВозвращаемыеТовары.НайтиСтроки(ПараметрыОтбора); 
		
		ВсеВозвращаемыеСтрокиОтменены = (Объект.ВозвращаемыеТовары.Количество() = НайденныеСтроки.Количество());
		
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("Заказ", Объект.Ссылка);
		ПараметрыРасчета.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
		ПараметрыРасчета.Вставить("Проведен", Объект.Проведен);
		ПараметрыРасчета.Вставить("Статус", Объект.Статус);
		ПараметрыРасчета.Вставить("СуммаАвансаДоОбеспечения", Объект.СуммаАвансаДоОбеспечения);
		ПараметрыРасчета.Вставить("СуммаПредоплатыДоОтгрузки", Объект.СуммаПредоплатыДоОтгрузки);
		ПараметрыРасчета.Вставить("СуммаДокумента", Объект.СуммаДокумента);
		ПараметрыРасчета.Вставить("Договор", Объект.Договор);
		ПараметрыРасчета.Вставить("ПорядокРасчетов", ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(Объект));
		ПараметрыРасчета.Вставить("Склад", Объект.Склад);
		ПараметрыРасчета.Вставить("ЖелаемаяДатаОтгрузки", Объект.ЖелаемаяДатаОтгрузки);
		ПараметрыРасчета.Вставить("АдресТовары", ПоместитьВоВременноеХранилище(Объект.ЗаменяющиеТовары.Выгрузить()));
		ПараметрыРасчета.Вставить("ЭтапыГрафикаОплаты", Объект.ЭтапыГрафикаОплаты);
		ПараметрыРасчета.Вставить("ОтборПоСостояниюНаличия", Перечисления.СостоянияНаличия.Любое);
		ПараметрыРасчета.Вставить("НеОтгружатьЧастями", Объект.НеОтгружатьЧастями);
		ПараметрыРасчета.Вставить("ВсеСтрокиОтменены", ВсеСтрокиОтменены);
		ПараметрыРасчета.Вставить("ВсеВозвращаемыеСтрокиОтменены", ВсеВозвращаемыеСтрокиОтменены);
		ПараметрыРасчета.Вставить("ЕстьЗаменяющиеТовары", Объект.ЗаменяющиеТовары.Количество()>0);
		
		Объект.Статус = МаксимальныйСтатусЗаявкиНаВозвратТоваровОтКлиента(ПараметрыРасчета);
		
		СтатусПриИзмененииСервер(Объект);
		
		Если НЕ СтатусДоРасчета = Объект.Статус Тогда
			СтатусРасчитан = Истина;
			КоличествоОбработанных = КоличествоОбработанных + 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусРасчитан
	
КонецФункции

Процедура ЗаполнитьПередРасчетомМаксимальногоСтатуса(Объект)
	
	// Заполним даты отгрузки
	Если Объект.Склад.Пустая() 
		Или Объект.ЗаменяющиеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПродажиВызовСервера.ДатаОтгрузкиПустая(Объект, "ЗаменяющиеТовары") Тогда
		Если Объект.НеОтгружатьЧастями Тогда
			Объект.РассчитатьДатуОтгрузки(Истина);
			
			ЗаменяющиеТоварыЗаполнитьДатуОтгрузкиСервер(Объект, Объект.ДатаОтгрузки, Неопределено);
		Иначе
			РассчитатьДатуОтгрузкиСервер(Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним даты поступления
	Если Объект.Склад.Пустая() 
		Или Объект.ВозвращаемыеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакупкиВызовСервера.ДатаПоступленияПустая(Объект, "ВозвращаемыеТовары") Тогда
		Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
			ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
		Иначе
			ДатаПоступления = ТекущаяДата();
		КонецЕсли;

		Если Объект.ПоступлениеОднойДатой Тогда
			ЗаполнитьПустуюДатуПоступленияСервер(Объект, ДатаПоступления, Неопределено);
		Иначе
			ЗаполнитьПустыеДатыПоступленияСервер(Объект, ДатаПоступления);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура СтатусПриИзмененииСервер(Объект)
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаявкаНаВозвратТоваровОтКлиента));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Заменяющие);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Возвращаемые);
	
КонецПроцедуры

Процедура ЗаменяющиеТоварыЗаполнитьДатуОтгрузкиСервер(Объект, ДатаОтгрузки, Знач МассивВыделенныхСтрок)
	
	Если МассивВыделенныхСтрок = Неопределено Тогда
		
		Для Каждого СтрокаТЧ Из Объект.ЗаменяющиеТовары Цикл
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;
		
	Иначе
		
		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТЧ = Объект.ЗаменяющиеТовары.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьДатуОтгрузкиСервер(Объект)
	
	НеОтгружатьЧастямиПриИзмененииСервер(Объект, Истина);
	Если Объект.НеОтгружатьЧастями Тогда
		ЗаменяющиеТоварыЗаполнитьДатуОтгрузкиСервер(Объект, Объект.ДатаОтгрузки, Неопределено);
	Иначе
		Объект.РассчитатьДатыОтгрузки();

		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.ЗаменяющиеТовары,
			Новый Структура(
				"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
				Новый Структура("Номенклатура", "ВариантОформленияПродажи")
			)
		);
	КонецЕсли; 
	
КонецПроцедуры	

Процедура ЗаполнитьПустуюДатуПоступленияСервер(Объект, ДатаПоступления, Знач МассивВыделенныхСтрок)

	Если МассивВыделенныхСтрок = Неопределено Тогда

		Для Каждого СтрокаТЧ Из Объект.ВозвращаемыеТовары Цикл
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЦикла;

	Иначе

		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТЧ = Объект.ВозвращаемыеТовары.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЦикла;

	КонецЕсли;
	
	Объект.ДатаПоступления = ДатаПоступления;

КонецПроцедуры

Процедура ЗаполнитьПустыеДатыПоступленияСервер(Объект, ДатаПоступления);
	
	Для Каждого СтрокаТЧ Из Объект.ВозвращаемыеТовары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура НеОтгружатьЧастямиПриИзмененииСервер(Объект, УчитыватьСостояниеОбеспечения = Ложь)
	
	// Вычислим максимальную дату отгрузки и приведем к ней ТЧ
	Если Объект.НеОтгружатьЧастями Тогда
		Объект.РассчитатьДатуОтгрузки(УчитыватьСостояниеОбеспечения);
		
		ЗаменяющиеТоварыЗаполнитьДатуОтгрузкиСервер(Объект, Объект.ДатаОтгрузки, Неопределено);
		
		СтруктураДействий = Новый Структура(
		"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи", 
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"), 
		Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		);
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ЗаменяющиеТовары,СтруктураДействий);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Обновление информационной базы

// Обработчик обновления УТ 11.1.0.0
// Заполняет реквизит "СпособДоставки" значением по умолчанию "Самовывоз"
//
Процедура ЗаполнитьСпособДоставкиСамовывоз() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
	|ГДЕ
	|	ЗаявкаНаВозвратТоваровОтКлиента.СпособДоставки = &ПустойСпособДоставки";
	
	Запрос.УстановитьПараметр("ПустойСпособДоставки", Перечисления.СпособыДоставки.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняется реквизит "Порядок расчетов" значением, установленные в договоре документа.
//
Процедура ЗаполнитьПорядокРасчетов() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)) КАК ПорядокРасчетов
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ДанныеДокумента.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов <> ЕСТЬNULL(ДоговорыКонтрагентов.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПорядокРасчетов = Выборка.ПорядокРасчетов;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьДвиженияОтклоненныхЗаявокПоЗаявкиНаВозвратТоваровОтКлиентов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкиНаВозвратТоваровОтКлиентовОстатки.ЗаявкаНаВозвратТоваровОтКлиента КАК Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаявкиНаВозвратТоваровОтКлиентовОстатки.Номенклатура) КАК Номенклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаявкиНаВозвратТоваровОтКлиентовОстатки.Характеристика) КАК Характеристика,
	|	СУММА(ЗаявкиНаВозвратТоваровОтКлиентовОстатки.КодСтроки) КАК КодСтроки
	|ПОМЕСТИТЬ ДокументыСОшибками
	|ИЗ
	|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки(, ЗаявкаНаВозвратТоваровОтКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)) КАК ЗаявкиНаВозвратТоваровОтКлиентовОстатки
	|ГДЕ
	|	ЗаявкиНаВозвратТоваровОтКлиентовОстатки.ЗаявленоОстаток <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкиНаВозвратТоваровОтКлиентовОстатки.ЗаявкаНаВозвратТоваровОтКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаВозвращаемыеТовары.Ссылка.Дата КАК Период,
	|	ТаблицаВозвращаемыеТовары.Ссылка КАК Регистратор,
	|	ТаблицаВозвращаемыеТовары.Ссылка КАК ЗаявкаНаВозвратТоваровОтКлиента,
	|	ВЫБОР
	|		КОГДА ТаблицаВозвращаемыеТовары.Порча
	|			ТОГДА ТаблицаВозвращаемыеТовары.НоменклатураОприходование
	|		ИНАЧЕ ТаблицаВозвращаемыеТовары.Номенклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаВозвращаемыеТовары.Порча
	|			ТОГДА ТаблицаВозвращаемыеТовары.ХарактеристикаОприходование
	|		ИНАЧЕ ТаблицаВозвращаемыеТовары.Характеристика
	|	КОНЕЦ КАК Характеристика,
	|	ТаблицаВозвращаемыеТовары.КодСтроки КАК КодСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаВозвращаемыеТовары.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
	|			ТОГДА ТаблицаВозвращаемыеТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КОформлению,
	|	ТаблицаВозвращаемыеТовары.Количество КАК Заявлено
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаВозвращаемыеТовары
	|ГДЕ
	|	ТаблицаВозвращаемыеТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыСОшибками.Ссылка
	|			ИЗ
	|				ДокументыСОшибками)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаВозвращаемыеТовары.Ссылка.Дата,
	|	ТаблицаВозвращаемыеТовары.Ссылка,
	|	ТаблицаВозвращаемыеТовары.Ссылка,
	|	ВЫБОР
	|		КОГДА ТаблицаВозвращаемыеТовары.Порча
	|			ТОГДА ТаблицаВозвращаемыеТовары.НоменклатураОприходование
	|		ИНАЧЕ ТаблицаВозвращаемыеТовары.Номенклатура
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТаблицаВозвращаемыеТовары.Порча
	|			ТОГДА ТаблицаВозвращаемыеТовары.ХарактеристикаОприходование
	|		ИНАЧЕ ТаблицаВозвращаемыеТовары.Характеристика
	|	КОНЕЦ,
	|	ТаблицаВозвращаемыеТовары.КодСтроки,
	|	0,
	|	-ТаблицаВозвращаемыеТовары.Количество
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаВозвращаемыеТовары
	|ГДЕ
	|	ТаблицаВозвращаемыеТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ДокументыСОшибками.Ссылка
	|			ИЗ
	|				ДокументыСОшибками)
	|ИТОГИ ПО
	|	Регистратор";
	
	ВыборкаПоРегистраторам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоРегистраторам.Следующий() Цикл
		
		Набор = РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.СоздатьНаборЗаписей();
		Набор.Отбор.Регистратор.Установить(ВыборкаПоРегистраторам.Регистратор);
		
		ВыборкаПоЗаписям = ВыборкаПоРегистраторам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоЗаписям.Следующий() Цикл
			НоваяСтрока = Набор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоЗаписям);
		КонецЦикла;
		
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыРеализации() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ДокументРеализации КАК ДокументРеализации
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ДокументРеализации <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
		|	И ДанныеДокумента.ДокументРеализации <> ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
		|	И ДанныеДокумента.ДокументРеализации <> НЕОПРЕДЕЛЕНО";

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			Для Каждого СтрокаТЧ Из ДокументОбъект.ВозвращаемыеТовары Цикл
				СтрокаТЧ.ДокументРеализации = ВыборкаДетальныеЗаписи.ДокументРеализации;
			КонецЦикла;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли
