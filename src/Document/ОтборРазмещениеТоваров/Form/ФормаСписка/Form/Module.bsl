////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	Статус = "Все";
	
	СкладПомещениеПриИзмененииСервер();	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	СкладПомещениеПриИзмененииСервер();	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СкладОтборПриИзменении(Элемент)
	СкладПомещениеПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеОтборПриИзменении(Элемент)
	СкладПомещениеПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	УстановитьОтборыВСписках();
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтборПриИзменении(Элемент)
	УстановитьОтборыВСписках();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Подпитать(Команда)
	
	ОчиститьСообщения();
	Структура = Новый Структура;
	Структура.Вставить("Помещение",Помещение);
	Структура.Вставить("Склад",Склад);
	
	ФормаПараметры = Новый Структура("Заголовок ,Операция,ПараметрОбъект", "ОтборРазмещение", "ФормированиеЗаданий",Структура);  
	
	Ответ = ОткрытьФормуМодально("Документ.ОтборРазмещениеТоваров.Форма.ФормаНастроек",ФормаПараметры,ЭтаФорма);
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		ПодпитатьНаСервере();
		УстановитьОтборыВСписках();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьЗаданияВРаботу(Команда)
	
	Если СкладыКлиент.ВзятьЗаданияВРаботу(ЭтаФорма, Элементы.Список , "ОтборРазмещение") Тогда
		УстановитьОтборыВСписках();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадания(Команда)
	
	Если СкладыКлиент.ОтметитьВыполненениеЗаданийБезОшибок(ЭтаФорма, Элементы.Список, "ОтборРазмещение") Тогда
		УстановитьОтборыВСписках();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаданиеНаПеремещение(Команда)
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Склад", Склад);
	ПараметрыЗаполнения.Вставить("Помещение", Помещение);
	ПараметрыЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Перемещение"));
	
	ОткрытьФорму("Документ.ОтборРазмещениеТоваров.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения",ПараметрыЗаполнения), ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаданиеНаРазмещение(Команда)
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Склад", Склад);
	ПараметрыЗаполнения.Вставить("Помещение", Помещение);
	ПараметрыЗаполнения.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийОтбораРазмещенияТоваров.Размещение"));
	
	ОткрытьФорму("Документ.ОтборРазмещениеТоваров.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения",ПараметрыЗаполнения), ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура СкладПомещениеПриИзмененииСервер()
	Если СкладыСервер.ИспользоватьПодпиткуЗонБыстрогоОтбора(Склад, Помещение) И
		(НЕ Склад.ИспользоватьСкладскиеПомещения ИЛИ 
		 Склад.ИспользоватьСкладскиеПомещения И (НЕ Помещение.Пустая()))  Тогда
		Элементы.СоздатьЗдаднияНаПодпитку.Доступность = Истина;
	Иначе
		Элементы.СоздатьЗдаднияНаПодпитку.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Склад));
	
	УстановитьОтборыВСписках();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ОтборРазмещениеТоваров.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Элементы.Список.ТекущаяСтрока = МассивСсылок[0];
		ОткрытьЗначение(МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подпитка
 
&НаСервере
Процедура УстановитьОтборыВСписках()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Помещение", Помещение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Склад", Склад, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	
	Если Статус = "Все" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Статус",,,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Проведен",,,,Ложь);
	ИначеЕсли Статус = "Невыполненные" Тогда
		СписокСтатусов = Новый СписокЗначений;
		СписокСтатусов.Добавить(Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе);
		СписокСтатусов.Добавить(Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Статус", СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Проведен", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ИначеЕсли Статус = "Подготовленные" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Статус", Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Проведен", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ИначеЕсли Статус = "ВРаботе" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Статус", Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Проведен", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ИначеЕсли Статус = "ВыполненныеСОшибками" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Статус", Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Проведен", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ИначеЕсли Статус = "ВыполненныеБезОшибок" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Статус", Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Проведен", Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "ВидОперации", ВидОперацииОтбор, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ВидОперацииОтбор));
	
КонецПроцедуры
 
 &НаСервере
Процедура ПодпитатьНаСервере()
	
	ПараметрыФормированияЗаданий = ПараметрыФормированияЗаданийНаПодпитку();
	ПараметрыФормированияЗаданий.НастройкаФормированияПоРабочимУчасткам = НастройкаФормированияПоРабочимУчасткам;
	ПараметрыФормированияЗаданий.РабочийУчасток = РабочийУчасток;
	ПараметрыФормированияЗаданий.ОграничиватьПоВесу = ОграничиватьПоВесу;
	ПараметрыФормированияЗаданий.ОграничиватьПоОбъему = ОграничиватьПоОбъему;
	ПараметрыФормированияЗаданий.ОграничениеПоВесу = ОграничениеПоВесу;
	ПараметрыФормированияЗаданий.ОграничениеПоОбъему = ОграничениеПоОбъему;	
	ПараметрыФормированияЗаданий.Исполнитель = Исполнитель;
		
	ТекстСообщения = СкладыСервер.ВыполнитьПодпиткуЗБОНаСервере(Склад, Помещение, ПараметрыФормированияЗаданий);
	
	Если Не ПустаяСтрока(ТекстСообщения) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПараметрыФормированияЗаданийНаПодпитку()
	
	ПараметрыФормированияЗаданий = Новый Структура;
	ПараметрыФормированияЗаданий.Вставить("НастройкаФормированияПоРабочимУчасткам");
	ПараметрыФормированияЗаданий.Вставить("РабочийУчасток");
	ПараметрыФормированияЗаданий.Вставить("ОграничиватьПоВесу");
    ПараметрыФормированияЗаданий.Вставить("ОграничиватьПоОбъему");
	ПараметрыФормированияЗаданий.Вставить("ОграничениеПоВесу");
	ПараметрыФормированияЗаданий.Вставить("ОграничениеПоОбъему");  
	ПараметрыФормированияЗаданий.Вставить("Исполнитель");
	
	ПараметрыФормированияЗаданий.Вставить("ОбязательныеПараметры","СРазбиениемПоРабочимУчастникам,ИспользоватьОграниченияРабочегоУчастка,РабочийУчасток,ПределВес,ПределОбъем,Исполнитель");
	Возврат ПараметрыФормированияЗаданий;
	
КонецФункции

