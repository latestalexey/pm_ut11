#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если Не ПредъявленСчетФактура Тогда
		Если Не ПустаяСтрока(НомерСчетаФактуры) Тогда
			НомерСчетаФактуры = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаСчетаФактуры) Тогда
			ДатаСчетаФактуры = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ИмяТЧРасчетов = Документы.ВводОстатков.ИмяТабличнойЧастиРасчетовПоТипуОперации(ЭтотОбъект.ТипОперации);
		
		Если ИмяТЧРасчетов = "РасчетыСПартнерами"
		 ИЛИ ИмяТЧРасчетов = "РасчетыМеждуОрганизациями" Тогда
			СоздатьДокументыРасчетовСПартнерами(ИмяТЧРасчетов, Отказ);
		ИначеЕсли ЗначениеЗаполнено(ИмяТЧРасчетов) Тогда
			СоздатьДокументыРасчетов(ИмяТЧРасчетов,Отказ);
		КонецЕсли;
		
		Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
		 ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваровНаАдресномСкладе
		 ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию
		 ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		 ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
		 ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам
		 ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		 ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе Тогда
			ЗаполнитьВидыЗапасов();
			ЗаполнитьКлючиАналитикиУчетаПартийДокумента();
		Конецесли;
		
	КонецЕсли;
	
	НоменклатураСервер.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ВводОстатков));
	Документы.СчетФактураПолученный.ПроверитьРеквизитыСчетФактуры(Ссылка, ПометкаУдаления, Организация);

	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.ВводОстатков.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	// Остатки товаров.
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДатыПоступленияТоваровОрганизаций(ДополнительныеСвойства, Отказ);
	ЗапасыСервер.ОтразитьДатыПередачиТоваровНаКомиссию(ДополнительныеСвойства,Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюИзлишковНедостач(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	// Остатки в кассах.
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваНаличные(ДополнительныеСвойства, Движения, Отказ);
 	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваВКассахККМ(ДополнительныеСвойства, Движения, Отказ);

	// Остатки на банковских счетах.
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваБезналичные(ДополнительныеСвойства, Движения, Отказ);

	// Остатки расчетов с клиентами.
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентамиПоследовательность(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ);

	// Остатки расчетов с поставщиками.
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщикамиПоследовательность(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ);

	// Остатки товаров, переданных на комиссию.
	ЗапасыСервер.ОтразитьТоварыПереданныеНаКомиссию(ДополнительныеСвойства, Движения, Отказ);

	// Остатки возвратной тары
	МногооборотнаяТараСервер.ОтразитьПринятуюВозвратнуюТару(ДополнительныеСвойства, Движения, Отказ);
	МногооборотнаяТараСервер.ОтразитьПереданнуюВозвратнуюТару(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по денежным средствам.
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваУПодотчетныхЛиц(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьРасчетыПоЭквайрингу(ДополнительныеСвойства, Движения, Отказ);
	
	//Партионный учет товаров
	ПартионныйУчетСервер.ОтразитьДвиженияПартийТоваровОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ПартионныйУчетСервер.ОтразитьПартииТоваровОрганизацийПоследовательность(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ);
    ПартионныйУчетСервер.ОтразитьДвиженияПартийТоваровПереданныеНаКомиссию(ДополнительныеСвойства, Движения, Отказ);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив;

	Если НЕ ПредъявленСчетФактура Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НомерСчетаФактуры");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаСчетаФактуры");
	КонецЕсли;
	
	СчетаФактуры = Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(Ссылка);
	Если НЕ ПредъявленСчетФактура И СчетаФактуры.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СтавкаНДС");
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
	   И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваровНаАдресномСкладе
	   И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
	   И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
	   И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
	   И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
	КонецЕсли;

	Если (ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваровНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе)
		Или Не СкладыСервер.ИспользоватьСкладскиеПомещения(Склад) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Помещение");
	КонецЕсли;

	Если (ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваровНаАдресномСкладе
	   И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
	   И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе)
	   ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРаспоряженияНаИнвентаризацию") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РаспоряжениеНаИнвентаризациюТоваров");
	КонецЕсли;

	Если ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваровНаАдресномСкладе
	   ИЛИ ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваровНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары");
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Цена");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Сумма");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.СуммаРегл");
	КонецЕсли;

	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВКассах Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Кассы");
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВАвтономныхКассахККМПоРозничнойВыручке Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КассыККМ");
	КонецЕсли;

	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиНаБанковскихСчетах Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БанковскиеСчета");
	КонецЕсли;

	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПартнерами");
		
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПартнерами.ДатаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПартнерами.ДатаРасчетногоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПартнерами.НомерРасчетногоДокумента");
		ПроверитьЗаполнениеТабличнойЧастиРасчетыСПартнерами(Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов
		Или ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками Тогда	
		
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПартнерами.ДатаРасчетногоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПартнерами.НомерРасчетногоДокумента");
		ПроверитьЗаполнениеТабличнойЧастиРасчетыСПартнерами(Отказ);
		
	КонецЕсли;

	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыМеждуОрганизациями");
		МассивНепроверяемыхРеквизитов.Добавить("ОрганизацияПолучатель");
		
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыМеждуОрганизациями.ДатаПлатежа");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыМеждуОрганизациями.ДатаРасчетногоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыМеждуОрганизациями.НомерРасчетногоДокумента");
		ПроверитьЗаполнениеТабличнойЧастиРасчетыСПартнерами(Отказ);
		
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыМеждуОрганизациями.ДатаРасчетногоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыМеждуОрганизациями.НомерРасчетногоДокумента");
		ПроверитьЗаполнениеТабличнойЧастиРасчетыСПартнерами(Отказ);
		
	КонецЕсли;
	
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПодотчетниковПоНаличнымРасчетам
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПодотчетниковПоБезналичнымРасчетам
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ПерерасходыПодотчетныхСредств Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыСПодотчетниками");
	КонецЕсли;

	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.СторноОтчетовПоЭквайрингу Тогда
		МассивНепроверяемыхРеквизитов.Добавить("РасчетыПоЭквайрингу");
	КонецЕсли;

	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СоглашениеСКомиссионером");
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Валюта");
		
	КонецЕсли;
	
	Если ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваровНаАдресномСкладе
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
		И ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("НалогообложениеНДС");
		
	КонецЕсли;
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ВводОстатков),Отказ);
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НомерГТД");
	Если ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД")
	 И Товары.Количество() > 0 Тогда
		ЗапасыСервер.ПроверитьЗаполнениеНомеровГТД(ЭтотОбъект, Отказ);
	КонецЕсли;
	//1с-ит
	//2014-05-27 Чечин Петр
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Ответственный = Пользователи.ТекущийПользователь();
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Серии.Очистить();
	ПредъявленСчетФактура = Ложь;
	ДатаСчетаФактуры = Дата(1,1,1);
	НомерСчетаФактуры = "";
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Документы.СчетФактураПолученный.АктуализироватьСчетФактуру(ЭтотОбъект.Ссылка, ЭтотОбъект.Проведен);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ЗаполнитьДанныеЭквайринга() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РасчетыПоЭквайрингу.ТипДенежныхСредств,
	|	РасчетыПоЭквайрингу.Валюта,
	|	РасчетыПоЭквайрингу.ЭквайринговыйТерминал,
	|	РасчетыПоЭквайрингу.ВидПлатежнойКарты,
	|	РасчетыПоЭквайрингу.НомерПлатежнойКарты,
	|	РасчетыПоЭквайрингу.ДатаПлатежа КАК ДатаПлатежа,
	|	(-РасчетыПоЭквайрингу.СуммаОстаток) КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыПоЭквайрингу.Остатки(, Организация = &Организация) КАК РасчетыПоЭквайрингу
	|ГДЕ
	|	РасчетыПоЭквайрингу.СуммаОстаток < 0
	|	И РасчетыПоЭквайрингу.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредствПоЭквайрингу.ПоступлениеПоПлатежнойКарте)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоЭквайрингу.ТипДенежныхСредств,
	|	РасчетыПоЭквайрингу.Валюта,
	|	РасчетыПоЭквайрингу.ЭквайринговыйТерминал,
	|	РасчетыПоЭквайрингу.ВидПлатежнойКарты,
	|	РасчетыПоЭквайрингу.НомерПлатежнойКарты,
	|	РасчетыПоЭквайрингу.ДатаПлатежа КАК ДатаПлатежа,
	|	РасчетыПоЭквайрингу.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыПоЭквайрингу.Остатки(, Организация = &Организация) КАК РасчетыПоЭквайрингу
	|ГДЕ
	|	РасчетыПоЭквайрингу.СуммаОстаток > 0
	|	И РасчетыПоЭквайрингу.ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредствПоЭквайрингу.СписаниеПоПлатежнойКарте)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	РасчетыПоЭквайрингу.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли;
	Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Виды запасов

Процедура ЗаполнитьВидыЗапасов()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Менеджер,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение
	|	
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОприходованиеТоваров) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	&НалогообложениеНДС КАК НалогообложениеНДС,
	|	&Партнер КАК Поставщик,
	|	&Контрагент КАК Контрагент,
	|	&Договор КАК Договор,
	|	&НалогообложениеОрганизации КАК НалогообложениеОрганизации,
	|	Ложь КАК ДеятельностьОблагаетсяЕНВД
	|
	|ПОМЕСТИТЬ РеквизитыВидаЗапасов
	|ГДЕ
	|	&ТипОперации В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваровНаАдресномСкладе),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)  КАК ТипЗапасов,
	|	&Соглашение КАК Соглашение,
	|	&Валюта КАК Валюта,
	|	&НалогообложениеНДС КАК НалогообложениеНДС,
	|	&Партнер КАК Поставщик,
	|	&Контрагент КАК Контрагент,
	|	&Договор КАК Договор,
	|	&НалогообложениеОрганизации КАК НалогообложениеОрганизации,
	|	Ложь КАК ДеятельностьОблагаетсяЕНВД
	|
	|ГДЕ
	|	&ТипОперации В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе))
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров", Товары.Выгрузить(, "НомерСтроки, Номенклатура, ВидЗапасов"));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТипОперации", ТипОперации);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Соглашение", СоглашениеСКомитентом);
	
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.УстановитьПараметр("НалогообложениеОрганизации", Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата));
	
	Запрос.Выполнить();
	
	ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Товары);
	
КонецПроцедуры // ЗаполнитьВидыЗапасов()

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ПроверитьЗаполнениеТабличнойЧастиРасчетыСПартнерами(Отказ)
	
	Для Каждого СтрокаТаблицы Из РасчетыСПартнерами Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент)
		 И ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) <> Тип("СправочникСсылка.ДоговорыКонтрагентов")
		 И СтрокаТаблицы.РасчетныйДокумент <> Неопределено Тогда
		 
		 	Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаРасчетногоДокумента) Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не заполнена колонка ""Дата"" в строке %1 списка ""Расчеты с партнерами""'"),
					СтрокаТаблицы.НомерСтроки
				);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					"РасчетыСПартнерами[" + (СтрокаТаблицы.НомерСтроки - 1) + "].ДатаРасчетногоДокумента",
					,
					Отказ
				);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.НомерРасчетногоДокумента) Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не заполнена колонка ""Номер"" в строке %1 списка ""Расчеты с партнерами""'"),
					СтрокаТаблицы.НомерСтроки
				);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					"РасчетыСПартнерами[" + (СтрокаТаблицы.НомерСтроки - 1) + "].НомерРасчетногоДокумента",
					,
					Отказ
				);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из РасчетыМеждуОрганизациями Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент)
		 И СтрокаТаблицы.РасчетныйДокумент <> Неопределено Тогда
		 
		 	Если Не ЗначениеЗаполнено(СтрокаТаблицы.ДатаРасчетногоДокумента) Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не заполнена колонка ""Дата"" в строке %1 списка ""Расчеты между организациями""'"),
					СтрокаТаблицы.НомерСтроки
				);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					"РасчетыСПартнерами[" + (СтрокаТаблицы.НомерСтроки - 1) + "].ДатаРасчетногоДокумента",
					,
					Отказ
				);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.НомерРасчетногоДокумента) Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не заполнена колонка ""Номер"" в строке %1 списка ""Расчеты между организациями""'"),
					СтрокаТаблицы.НомерСтроки
				);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					"РасчетыСПартнерами[" + (СтрокаТаблицы.НомерСтроки - 1) + "].НомерРасчетногоДокумента",
					,
					Отказ
				);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

		
КонецПроцедуры

Процедура СоздатьДокументыРасчетов(ИмяТЧ,Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПустаяСсылкаНаДокумент = Документы.ВводОстатков.ТипДокументаРасчетовПоТипуОперации(ТипОперации);
	
	Если ПустаяСсылкаНаДокумент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТипаДокументов = ПустаяСсылкаНаДокумент.Метаданные().Имя;
	
	МассивСтрокСНовымиРасчетнымиДокументами = Новый Массив;
	
	Для Каждого СтрТабл из ЭтотОбъект[ИмяТЧ] Цикл
		СтрТабл.НомерРасчетногоДокумента = СокрЛП(СтрТабл.НомерРасчетногоДокумента);
		
		Если Не ЗначениеЗаполнено(СтрТабл.РасчетныйДокумент)
		 И ЗначениеЗаполнено(СтрТабл.НомерРасчетногоДокумента)
		 И ЗначениеЗаполнено(СтрТабл.ДатаРасчетногоДокумента) Тогда
			
			Документы.ВводОстатков.ПодобратьДокументРасчетов(ЭтотОбъект, СтрТабл, Отказ);
			
			Если Отказ
				Или ЗначениеЗаполнено(СтрТабл.РасчетныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйОбъект = Документы[ИмяТипаДокументов].СоздатьДокумент();
			
			ЗаполнитьЗначенияСвойств(НовыйОбъект, СтрТабл);
			
			НовыйОбъект.Дата        = СтрТабл.ДатаРасчетногоДокумента;
			НовыйОбъект.Номер       = СокрЛП(СтрТабл.НомерРасчетногоДокумента);
			НовыйОбъект.Организация = Организация;
			
			ТекстКомментария = НСтр("ru='Документ сгенерирован автоматически при вводе остатков %ТекущаяДата%'");
			ТекстКомментария = СтрЗаменить(ТекстКомментария,"%ТекущаяДата%", Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy"));
			
			НовыйОбъект.Комментарий = ТекстКомментария; 
			
			Если ИмяТЧ = "РасчетыСПодотчетниками"
				И ИмяТипаДокументов <> "АвансовыйОтчет" Тогда	
				НовыйОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику;
			КонецЕсли;
			
			НовыйОбъект.Заполнить(Неопределено);
			
			Если ИмяТЧ = "РасчетыСПодотчетниками" Тогда
				НовыйОбъект.Валюта = СтрТабл.Валюта;
			КонецЕсли;
			
			Попытка
				НовыйОбъект.Записать();
				
				СтрТабл.РасчетныйДокумент = НовыйОбъект.Ссылка;
				МассивСтрокСНовымиРасчетнымиДокументами.Добавить(СтрТабл);
			Исключение
				ТекстСообщения = НСтр("ru='Ошибка создания расчетного документа: ""%ОписаниеОшибки%""'");
				
				Информация = ИнформацияОбОшибке();
				
				Если Информация.Причина <> Неопределено Тогда
					ТекстОшибки = Информация.Причина.Описание;
				Иначе
					ТекстОшибки = ПодробноеПредставлениеОшибки(Информация);
				КонецЕсли;
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ОписаниеОшибки%",ТекстОшибки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект."+ИмяТЧ+"["+Формат(СтрТабл.НомерСтроки-1,"ЧГ=0")+"].НомерРасчетногоДокумента",,Отказ);
				
				Прервать;
			КонецПопытки;	
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Для Каждого СтрМас из МассивСтрокСНовымиРасчетнымиДокументами Цикл
			СтрМас.РасчетныйДокумент = Неопределено;		
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьДокументыРасчетовСПартнерами(ИмяТабличнойЧасти, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТаблицы.НомерРасчетногоДокумента = СокрЛП(СтрокаТаблицы.НомерРасчетногоДокумента);
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент)
		 И СтрокаТаблицы.РасчетныйДокумент <> Неопределено Тогда
			
			Документы.ВводОстатков.ПодобратьДокументРасчетов(ЭтотОбъект, СтрокаТаблицы, Отказ);
			
			Если Отказ
			 ИЛИ ЗначениеЗаполнено(СтрокаТаблицы.РасчетныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				
				НовыйОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				
				НовыйОбъект.Дата                  = СтрокаТаблицы.ДатаРасчетногоДокумента;
				НовыйОбъект.ДатаНачалаДействия    = СтрокаТаблицы.ДатаРасчетногоДокумента;				
				НовыйОбъект.Номер                 = СокрЛП(СтрокаТаблицы.НомерРасчетногоДокумента);
				НовыйОбъект.Организация           = Организация;
				НовыйОбъект.ХозяйственнаяОперация = Документы.ВводОстатков.ХозяйственнаяОперацияДоговораПоТипуОперации(ТипОперации);
				НовыйОбъект.ВалютаВзаиморасчетов  = СтрокаТаблицы.ВалютаВзаиморасчетов;
				НовыйОбъект.ПорядокОплаты         = Документы.ВводОстатков.ПорядокОплатыДоговораПоВалюте(СтрокаТаблицы.ВалютаВзаиморасчетов);
				НовыйОбъект.Статус                = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
				НовыйОбъект.ПорядокРасчетов       = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
								
				ЗаполнитьЗначенияСвойств(НовыйОбъект,СтрокаТаблицы);
				
				НовыйОбъект.ИнициализироватьСправочник();
				
				НовыйОбъект.Менеджер = Ответственный;
				
				НовыйОбъект.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Элемент справочника сгенерирован автоматически при вводе остатков %1'"),
					Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy")
				);
				
				Если НовыйОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
					ТипДоговораСтрокой = НСтр("ru = 'с клиентом'");
				ИначеЕсли НовыйОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
					ТипДоговораСтрокой = НСтр("ru = 'с комиссионером'");
				ИначеЕсли НовыйОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Тогда
					ТипДоговораСтрокой = НСтр("ru = 'с поставщиком'");
				ИначеЕсли НовыйОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
					ТипДоговораСтрокой = НСтр("ru = 'с комитентом'");
				Иначе
					ТипДоговораСтрокой = "";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НовыйОбъект.Дата)
				 И ЗначениеЗаполнено(НовыйОбъект.Номер) Тогда
					ТекстНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Договор %1 № %2 от %3'"),
						ТипДоговораСтрокой,
						НовыйОбъект.Номер,
						Формат(НовыйОбъект.Дата,"ДФ=dd.MM.yyyy")
					);
				ИначеЕсли ЗначениеЗаполнено(НовыйОбъект.Номер) Тогда
					ТекстНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Договор %1 № %2'"),
						ТипДоговораСтрокой,
						НовыйОбъект.Номер
					);
				ИначеЕсли ЗначениеЗаполнено(НовыйОбъект.Дата) Тогда
					ТекстНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Договор %1 от %2'"),
						ТипДоговораСтрокой,
						Формат(НовыйОбъект.Дата,"ДФ=dd.MM.yyyy")
					);
				Иначе
					ТекстНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Договор %1 от %2'"),
						ТипДоговораСтрокой
					);
				КонецЕсли;
				
				НовыйОбъект.Наименование          = ТекстНаименования;
				НовыйОбъект.НаименованиеДляПечати = ТекстНаименования;

			
			Иначе
				
				МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТаблицы.РасчетныйДокумент));
				НовыйОбъект = Документы[МетаданныеДокумента.Имя].СоздатьДокумент();
				
				НовыйОбъект.Заполнить(Неопределено);
				
				ЗаполнитьЗначенияСвойств(НовыйОбъект, СтрокаТаблицы);
				
				НовыйОбъект.Дата        = СтрокаТаблицы.ДатаРасчетногоДокумента;
				НовыйОбъект.Номер       = СокрЛП(СтрокаТаблицы.НомерРасчетногоДокумента);
				НовыйОбъект.Организация = Организация;
				
				Если ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
					НовыйОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
					
				ИначеЕсли ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
					НовыйОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
				
				ИначеЕсли ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
					НовыйОбъект.ОрганизацияПолучатель = ОрганизацияПолучатель;
					
				ИначеЕсли ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
					НовыйОбъект.Комиссионер = ОрганизацияПолучатель;
					
				КонецЕсли;
				
				НовыйОбъект.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Документ сгенерирован автоматически при вводе остатков %1'"),
					Формат(ТекущаяДата(),"ДФ=dd.MM.yyyy")
				);
				
			КонецЕсли;
			
			Попытка
				НовыйОбъект.Записать();
				СтрокаТаблицы.РасчетныйДокумент = НовыйОбъект.Ссылка;
				
			Исключение
				Информация = ИнформацияОбОшибке();
				Если Информация.Причина <> Неопределено Тогда
					ТекстОшибки = Информация.Причина.Описание;
				Иначе
					ТекстОшибки = ПодробноеПредставлениеОшибки(Информация);
				КонецЕсли;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка создания расчетного документа: ""%1""'"),
					ТекстОшибки
				);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					,
					"Объект.РасчетыСПартнерами[" + Формат(СтрокаТаблицы.НомерСтроки - 1,"ЧГ=0") + "].НомерРасчетногоДокумента",
					,
					Отказ
				);
				
				Прервать;
			КонецПопытки;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКлючиАналитикиУчетаПартийДокумента() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТоваров.АналитикаУчетаПартий КАК АналитикаУчетаПартий
	|
	|ПОМЕСТИТЬ ТаблицаТоваровДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	&Поставщик КАК Поставщик,
	|	&Контрагент КАК Контрагент,
	|	&НалогообложениеНДС КАК НалогообложениеНДС,
	|	ТаблицаТоваров.АналитикаУчетаПартий
	|
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.КлючиАналитикиУчетаПартий КАК КлючиАналитики
	|	ПО
	|		ТаблицаТоваров.АналитикаУчетаПартий = КлючиАналитики.Ссылка
	|ГДЕ
	|	ТаблицаТоваров.АналитикаУчетаПартий = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)
	|	ИЛИ КлючиАналитики.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|");
	                	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров", Товары.Выгрузить(,"НомерСтроки, Номенклатура, СтавкаНДС, АналитикаУчетаПартий"));
	Запрос.УстановитьПараметр("Поставщик", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("НалогообложениеНДС", Справочники.Организации.НалогообложениеНДС(Организация,Склад, Дата));
					
	Запрос.Выполнить();
	
	ПартионныйУчетСервер.ЗаполнитьАналитикуУчетаПартийВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Товары);
	
КонецПроцедуры

#КонецЕсли
