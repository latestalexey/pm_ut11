
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		ПриСозданииЧтенииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	УстановитьВидимость();
	Элементы.Префикс.Доступность = Объект.ДополнятьНомера;
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Префикс = УстановитьПрефикс(Объект.Организация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ РАСЧЕТЫ С ПОДОТЧЕТНИКАМИ

&НаКлиенте
Процедура РасчетыСПодотчетникамиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.РасчетыСПодотчетниками.ТекущиеДанные;
	УстановитьТипДокументаРасчетов(ТекущиеДанные.РасчетныйДокумент, Объект.ТипОперации);
	ЗаполнитьВалютуВСтроке(Элементы.РасчетыСПодотчетниками.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПодотчетникамиПодотчетноеЛицоПриИзменении(Элемент)
	
	ПроверитьДокументРасчетов();

КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПодотчетникамиНомерРасчетногоДокументаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыСПодотчетниками.ТекущиеДанные;
	ДополнитьНомер(ТекущиеДанные.НомерРасчетногоДокумента);
	НомерДатаРасчетногоДокументаПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПодотчетникамиДатаРасчетногоДокументаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыСПодотчетниками.ТекущиеДанные;
	НомерДатаРасчетногоДокументаПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерДатаРасчетногоДокументаПриИзменении(ТекущиеДанные)

	Если Не (ЗначениеЗаполнено(ТекущиеДанные.НомерРасчетногоДокумента)
		И ЗначениеЗаполнено(ТекущиеДанные.ДатаРасчетногоДокумента)) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПодобратьДокументРасчетовСевер(ТекущаяСтрокаИдентификатор);

КонецПроцедуры  

&НаКлиенте
Процедура РасчетыСПодотчетникамиРасчетныйДокументПриИзменении(Элемент)
	
	ПроверитьДокументРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДокументРасчетов()
	
	ТекущиеДанные = Элементы.РасчетыСПодотчетниками.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПроверитьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПодотчетникамиРасчетныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.РасчетыСПодотчетниками.ТекущиеДанные;
	РасчетныйДокументНачалоВыбора(Элемент,ТекущиеДанные, СтандартнаяОбработка, "Подотчетники");
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПодотчетникамиСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасчетыСПодотчетниками.ТекущиеДанные;
	Если СтрокаТаблицы.Валюта = ВалютаРегламентированногоУчета Тогда
		СтрокаТаблицы.СуммаРегл = СтрокаТаблицы.Сумма;
	Иначе
		СтрокаТаблицы.СуммаРегл = РассчитатьСуммуРегл(СтрокаТаблицы.Сумма, СтрокаТаблицы.Валюта, ВалютаРегламентированногоУчета, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПодотчетникамиВалютаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасчетыСПодотчетниками.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = СтрокаТаблицы.ПолучитьИдентификатор();
	ПроверитьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);
	
	Если СтрокаТаблицы.Сумма > 0 Тогда
		РасчетыСПодотчетникамиСуммаПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРИ ИЗМЕНЕНИИ РЕКВИЗИТОВ

&НаКлиенте
Процедура ДополнятьНомераПриИзменении(Элемент)
	
	Элементы.Префикс.Доступность = Объект.ДополнятьНомера;

КонецПроцедуры

&НаКлиенте
Процедура РасчетныйДокументНачалоВыбора(Элемент,ТекущиеДанные, СтандартнаяОбработка, РазделРасчетов)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Объект.Организация);
	
	ИмяФормыОбъекта = "";
	
	Если РазделРасчетов = "Подотчетники" Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.Валюта) Тогда
			Отбор.Вставить("Валюта",ТекущиеДанные.Валюта);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ПодотчетноеЛицо) Тогда
			Отбор.Вставить("ПодотчетноеЛицо",ТекущиеДанные.ПодотчетноеЛицо);
		КонецЕсли;
		
		Отбор.Вставить("ХозяйственнаяОперация",ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику"));
		
		ИмяФормыОбъекта = "Документ."+ИмяТипаРасчетногоДокумента + ".ФормаВыбора";
		
		
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Отбор", Отбор);
	
	Если Не ПустаяСтрока(ИмяТипаРасчетногоДокумента) Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму(ИмяФормыОбъекта, ПараметрыВыбора, Элемент);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

&НаСервере
Процедура УстановитьВидимость()
	
	
	Объект.ДополнятьНомера = Истина;
	Объект.Префикс = УстановитьПрефикс(Объект.Организация);

	Элементы.ГруппаПодотчетныеЛица.Заголовок = Объект.ТипОперации;
	
	ТипРасчетногоДокумента = Неопределено;
	
	УстановитьТипДокументаРасчетов(ТипРасчетногоДокумента, Объект.ТипОперации);
	
		
	Если ТипРасчетногоДокумента <> Неопределено Тогда
		
		МетаданныеРасчетногоДокумента = ТипРасчетногоДокумента.Метаданные();
		
		ИмяТипаРасчетногоДокумента = МетаданныеРасчетногоДокумента.Имя;
		
		ХозяйственнаяОперацияДоговора = Документы.ВводОстатков.ХозяйственнаяОперацияДоговораПоТипуОперации(Объект.ТипОперации);
		
		Если Не ЗначениеЗаполнено(МетаданныеРасчетногоДокумента.ПредставлениеОбъекта) Тогда
			ЗаголовокКолонки = МетаданныеРасчетногоДокумента.Синоним;
		Иначе
			ЗаголовокКолонки = МетаданныеРасчетногоДокумента.ПредставлениеОбъекта;
		КонецЕсли;
		
		Элементы.РасчетыСПодотчетникамиРасчетныйДокумент.Заголовок = ЗаголовокКолонки;
			
	КонецЕсли;
		
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьПрефикс(Организация)
	
	ПрефиксИнформационнойБазы = "";
	ПрефиксОрганизации        = "";
	
	// устанавливаем привилегированный режим
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПрефиксацияОбъектовПовтИсп.ЕстьФункциональнаяОпцияПрефиксИнформационнойБазы() Тогда
		
		ПрефиксИнформационнойБазы = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
		
		ДополнитьСтрокуНулямиСлева(ПрефиксИнформационнойБазы, 2);
		
	КонецЕсли;
	
	Если ПрефиксацияОбъектовПовтИсп.ЕстьФункциональнаяОпцияПрефиксыОрганизаций() Тогда
		
		ПрефиксОрганизации = ПолучитьФункциональнуюОпцию("ПрефиксыОрганизаций", Новый Структура("Организация", Организация));
		
		// если задана пустая ссылка на организацию
		Если ПрефиксОрганизации = Ложь Тогда
			
			ПрефиксОрганизации = "";
			
		КонецЕсли;
		
		ДополнитьСтрокуНулямиСлева(ПрефиксОрганизации, 2);
		
	КонецЕсли;
	
	ОсновнойПрефикс = ПрефиксОрганизации + ПрефиксИнформационнойБазы;
	
	Разделитель = ?(ПустаяСтрока(ОсновнойПрефикс), "", "-");
	
	Префикс = ОсновнойПрефикс + Разделитель + Префикс;
	
	// если префикс не задан, то устанавливаем значение по умолчанию
	Если ПустаяСтрока(Префикс) Тогда
		
		Префикс = "0";
		
	КонецЕсли;
	
	Возврат Префикс;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьСтрокуНулямиСлева(Строка, ДлинаСтроки)
	
	Строка = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка, ДлинаСтроки, "0", "Слева");
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьНомер(Номер)
		
	Если Не Объект.ДополнятьНомера
		Или Не ЗначениеЗаполнено(Номер) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = СокрЛП(Номер);
	
	Разделитель = ?(ПустаяСтрока(Объект.Префикс), "", "-");
	
	Начало = СокрЛП(Объект.Префикс) + Разделитель;
	
	Пока СтрДлина(Результат) < 11 - СтрДлина(Начало) Цикл
		Результат = "0" + Результат;
	КонецЦикла;
	
	Если СтрДлина(Результат) <= 11 - СтрДлина(Начало) Тогда
		Результат = Начало + Результат;
	КонецЕсли;
	
	Номер = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ТипОперации", Объект.ТипОперации);
	Оповестить("Запись_ВводОстатков", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор)
	
	ИмяТЧ = Документы.ВводОстатков.ИмяТабличнойЧастиРасчетовПоТипуОперации(Объект.ТипОперации);
	
	ТекущиеДанные = Объект[ИмяТЧ].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.РасчетныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Новый Структура("Организация,Номер,Дата,Ссылка,Представление");
	
	Если ИмяТЧ = "РасчетыСПодотчетниками" Тогда
		Реквизиты.Вставить("ПодотчетноеЛицо");
		Реквизиты.Вставить("Валюта");
		
		Если ИмяТипаРасчетногоДокумента = "ДоговорыКонтрагентов" Тогда
			Реквизиты.Вставить("Валюта","ВалютаВзаиморасчетов");
		Иначе
			Реквизиты.Вставить("Валюта");
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущиеДанные.РасчетныйДокумент,Реквизиты);
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.Организация)
	 И ЗначенияРеквизитов.Организация <> Объект.Организация Тогда
		
		ТекстСообщения = НСтр("ru='В документе ""%РасчетныйДокумент%"" организация отличается от указанной во вводе остатков'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%РасчетныйДокумент%",ЗначенияРеквизитов.Представление);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ТекущиеДанные.РасчетныйДокумент = Неопределено;
		
		УстановитьТипДокументаРасчетов(ТекущиеДанные.РасчетныйДокумент, Объект.ТипОперации);
		
		Возврат;
	КонецЕсли;
	
	
	ТекущиеДанные.РасчетныйДокумент        = ЗначенияРеквизитов.Ссылка;
	ТекущиеДанные.ДатаРасчетногоДокумента  = ЗначенияРеквизитов.Дата;
	ТекущиеДанные.НомерРасчетногоДокумента = ЗначенияРеквизитов.Номер;
		
КонецПроцедуры

&НаСервере
Процедура ПодобратьДокументРасчетовСевер(ТекущаяСтрокаИдентификатор)
	
	ИмяТЧ = Документы.ВводОстатков.ИмяТабличнойЧастиРасчетовПоТипуОперации(Объект.ТипОперации);
	ТекущиеДанные = Объект[ИмяТЧ].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Документы.ВводОстатков.ПодобратьДокументРасчетов(Объект, ТекущиеДанные);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммуРегл(Сумма, Валюта, ВалютаРегламентированногоУчета, ДатаДокумента)
	
	Если Валюта = ВалютаРегламентированногоУчета Тогда
		СуммаРегл = Сумма;
	Иначе
		КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Валюта, ВалютаРегламентированногоУчета, ДатаДокумента);
		СуммаРегл = Окр(Сумма * КоэффициентПересчета, 2, 1);
	КонецЕсли;
	
	Возврат СуммаРегл;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьТипДокументаРасчетов(РасчетныйДокумент, ТипОперации)
	
	Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	РасчетныйДокумент = Документы.ВводОстатков.ТипДокументаРасчетовПоТипуОперации(ТипОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВалютуВСтроке(Строка)
	
	Если НЕ ЗначениеЗаполнено(Строка.Валюта) И Не ИспользоватьНесколькоВалют Тогда
		Строка.Валюта = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
КонецПроцедуры



