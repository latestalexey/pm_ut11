&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаСтр = Строка(ВалютаУправленческогоУчета);

	СтрокаЗаголовка = НСтр("ru = '%1 (%2)'");
	ЗаголовокЦена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЗаголовка, "Цена", ВалютаСтр);
	ЗаголовокСумма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЗаголовка, "Сумма", ВалютаСтр);
	ЗаголовокНДС = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЗаголовка, "НДС", ВалютаСтр);
	
	Элементы.СобственныеТоварыЦена.Заголовок = ЗаголовокЦена;
	Элементы.СобственныеТоварыСумма.Заголовок = ЗаголовокСумма;
	Элементы.СобственныеТоварыСуммаНДС.Заголовок = ЗаголовокНДС;
	
	Элементы.ПринятаяТараЦена.Заголовок = ЗаголовокЦена;
	Элементы.ПринятаяТараСумма.Заголовок = ЗаголовокСумма;
	Элементы.ПринятаяТараСуммаНДС.Заголовок = ЗаголовокНДС;
	
	Элементы.ПереданныеНаКомиссиюЦена.Заголовок = ЗаголовокЦена;
	Элементы.ПереданныеНаКомиссиюСумма.Заголовок = ЗаголовокСумма;

	ЗапретитьПоступлениеТоваровБезНомеровГТД = ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД");
	
	Объект.ЦенаВключаетНДС = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению")
			И Объект.ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
			И Объект.ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе 
			И ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Объект.Организация,,Объект.Дата);
		КонецЕсли;
		
		ПриСозданииЧтенииНаСервере();
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
			И ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
			Объект.Серии.Очистить();
		КонецЕсли;
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ВводОстатков));
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение",Объект.Склад, Объект.Помещение));

	УстановитьВидимость();
	УстановитьПараметрыВыбораСкладаПомещения();
	УстановитьПараметрыВыбораВидаЗапасов();
	
	Элементы.ПолученныеНаКомиссиюВалюта.ТолькоПросмотр = ЗначениеЗаполнено(Объект.СоглашениеСКомитентом);
	Элементы.ПолученныеНаКомиссиюНалогообложениеНДС.ТолькоПросмотр = ЗначениеЗаполнено(Объект.СоглашениеСКомитентом);
	
	СтарыйТипОперации = Объект.ТипОперации;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВедетсяУчетПоГТД",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ВедетсяУчетПоГТД")
		)
	);
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	НастроитьОтображениеРеквизитовСчетаФактуры(
		ЭтаФорма,
		ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация, Ложь)
	);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
	 И ПараметрыЗаписи.ДанныеСчетаФактуры <> Неопределено Тогда
		
		ДанныеСчетаФактуры = ЗакупкиСервер.ДанныеСчетаФактурыСтруктурой(
			ТекущийОбъект.Ссылка,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Организация,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Контрагент,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Номер,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Дата,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Валюта
		);
		НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтаФорма,
			ЗакупкиСервер.ВвестиСчетФактуру(ДанныеСчетаФактуры, Истина, Ложь)
		);
		
	КонецЕсли;
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВедетсяУчетПоГТД",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ВедетсяУчетПоГТД")
		)
	);
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ПредъявленСчетФактура И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ДанныеСчетаФактуры",
			ЗакупкиСервер.ДанныеСчетаФактурыСтруктурой(
				Неопределено,
				ТекущийОбъект.Организация,
				ТекущийОбъект.Контрагент,
				ТекущийОбъект.НомерСчетаФактуры,
				ТекущийОбъект.ДатаСчетаФактуры,
				ВалютаУправленческогоУчета
			)
		);
		ТекущийОбъект.ПредъявленСчетФактура = Ложь;
	Иначе
		ПараметрыЗаписи.Вставить("ДанныеСчетаФактуры", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииСервер(Объект.Партнер, Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииСервер(Объект.Партнер, Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииСервер()
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	
	ПомещениеПриИзмененииСервер();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюСоглашениеСКомитентомПриИзменении(Элемент)
		
	Если ЗначениеЗаполнено(Объект.СоглашениеСКомитентом) Тогда
		ЗаполнитьПоСоглашениюСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюСоглашениеСКомитентомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураДополнительногоОтбора = Новый Структура;
	СтруктураДополнительногоОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию"));
	ЗакупкиКлиент.НачалоВыбораСоглашенияСПоставщиком(Элемент,
	                                                 СтандартнаяОбработка,
	                                                 Объект.Партнер,
	                                                 Объект.СоглашениеСКомитентом,
	                                                 Объект.Дата,
	                                                 Истина,
                                                     СтруктураДополнительногоОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеНаКомиссиюСоглашениеСКомиссионеромНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент,
	                                              СтандартнаяОбработка,
	                                              Объект.Партнер,
	                                              Объект.СоглашениеСКомиссионером,
	                                              Объект.Дата
	                                              ,
	                                              ,
	                                              ,
	                                              ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ СОБСТВЕННЫЕ ТОВАРЫ

&НаКлиенте
Процедура СобственныеТоварыНоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзменении(Элементы.СобственныеТовары);

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыКоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.СобственныеТовары.ТекущиеДанные;
	КоличествоПриИзменении(Элементы.СобственныеТовары);

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыУпаковкаПриИзменении(Элемент)

	УпаковкаПриИзменении(Элементы.СобственныеТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыЦенаПриИзменении(Элемент)
	
	ЦенаПриИзменении(Элементы.СобственныеТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыСуммаПриИзменении(Элемент)

	СуммаПриИзменении(Элементы.СобственныеТовары);

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтавкаНДСПриИзменении(Элементы.СобственныеТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	НоменклатураКлиент.НомерГТДОбработкаВыбора(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТаблЧастьВыбор(Элемент, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыПередУдалением(Элемент, Отказ)

	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыПослеУдаления(Элемент)
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование);

КонецПроцедуры

&НаКлиенте
Процедура СобственныеТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТаблЧастьПередОкончаниемРедактирования(Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ПРИНЯТАЯ ТАРА

&НаКлиенте
Процедура ПринятаяТараНоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзменении(Элементы.ПринятаяТара);

КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараКоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ПринятаяТара.ТекущиеДанные;
	КоличествоПриИзменении(Элементы.ПринятаяТара);

КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараУпаковкаПриИзменении(Элемент)

	УпаковкаПриИзменении(Элементы.ПринятаяТара);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараЦенаПриИзменении(Элемент)
	
	ЦенаПриИзменении(Элементы.ПринятаяТара);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараСуммаПриИзменении(Элемент)

	СуммаПриИзменении(Элементы.ПринятаяТара);

КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараСтавкаНДСПриИзменении(Элемент)
	
	СтавкаНДСПриИзменении(Элементы.ПринятаяТара);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	НоменклатураКлиент.НомерГТДОбработкаВыбора(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТаблЧастьВыбор(Элемент, Поле);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараПередУдалением(Элемент, Отказ)

	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);

КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараПослеУдаления(Элемент)
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТаблЧастьПередОкончаниемРедактирования(Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ПЕРЕДАННАЯ ТАРА

&НаКлиенте
Процедура ПереданнаяТараНоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзменении(Элементы.ПереданнаяТара);

КонецПроцедуры

&НаКлиенте
Процедура ПереданнаяТараКоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ПереданнаяТара.ТекущиеДанные;
	КоличествоПриИзменении(Элементы.ПереданнаяТара);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданнаяТараУпаковкаПриИзменении(Элемент)

	УпаковкаПриИзменении(Элементы.ПереданнаяТара);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданнаяТараЦенаПриИзменении(Элемент)
	
	ЦенаПриИзменении(Элементы.ПереданнаяТара);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданнаяТараСуммаПриИзменении(Элемент)

	СуммаПриИзменении(Элементы.ПереданнаяТара);

КонецПроцедуры

&НаКлиенте
Процедура ПереданнаяТараСтавкаНДСПриИзменении(Элемент)
	
	СтавкаНДСПриИзменении(Элементы.ПереданнаяТара);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданнаяТараНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	НоменклатураКлиент.НомерГТДОбработкаВыбора(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ПОЛУЧЕННЫЕ НА КОМИССИЮ

&НаКлиенте
Процедура ПолученныеНаКомиссиюНоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзменении(Элементы.ПолученныеНаКомиссию);

КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	НоменклатураКлиент.НомерГТДОбработкаВыбора(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюПередУдалением(Элемент, Отказ)
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
				КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюПослеУдаления(Элемент)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТаблЧастьВыбор(Элемент, Поле);

КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ТаблЧастьПередОкончаниемРедактирования(Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюКоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ПолученныеНаКомиссию.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ПолученныеНаКомиссиюУпаковкаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ПолученныеНаКомиссию.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ПЕРЕДАННЫЕ НА КОМИССИЮ

&НаКлиенте
Процедура ПереданныеНаКомиссиюНоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзменении(Элементы.ПереданныеНаКомиссию);

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеНаКомиссиюКоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ПереданныеНаКомиссию.ТекущиеДанные;
	КоличествоПриИзменении(Элементы.ПереданныеНаКомиссию);

	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеНаКомиссиюУпаковкаПриИзменении(Элемент)

	УпаковкаПриИзменении(Элементы.ПереданныеНаКомиссию);
	
КонецПроцедуры


&НаКлиенте
Процедура ПереданныеНаКомиссиюЦенаПриИзменении(Элемент)
	
	ЦенаПриИзменении(Элементы.ПереданныеНаКомиссию);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеНаКомиссиюСуммаПриИзменении(Элемент)

	СуммаПриИзменении(Элементы.ПереданныеНаКомиссию);

КонецПроцедуры

&НаКлиенте
Процедура ПереданныеНаКомиссиюСтавкаНДСПриИзменении(Элемент)
	
	СтавкаНДСПриИзменении(Элементы.ПереданныеНаКомиссию);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереданныеНаКомиссиюНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	НоменклатураКлиент.НомерГТДОбработкаВыбора(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ

&НаКлиенте
Процедура НоменклатураПриИзменении(ТаблЧасть)
	
	ТекущаяСтрока = ТаблЧасть.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(ТаблЧасть)

	ТекущаяСтрока = ТаблЧасть.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);

	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаНДС;

	Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета Тогда
		ТекущаяСтрока.СуммаРегл = ТекущаяСтрока.СуммаБезНДС;
		ТекущаяСтрока.НДСРегл = ТекущаяСтрока.СуммаНДС;
	Иначе
		ТекущаяСтрока.СуммаРегл = РассчитатьСуммуРегл(ТекущаяСтрока.СуммаБезНДС, ВалютаУправленческогоУчета, ВалютаРегламентированногоУчета, Объект.Дата);
		ТекущаяСтрока.НДСРегл = РассчитатьСуммуРегл(ТекущаяСтрока.СуммаНДС, ВалютаУправленческогоУчета, ВалютаРегламентированногоУчета, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(ТаблЧасть)
	
	ТекущаяСтрока = ТаблЧасть.ТекущиеДанные;

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаНДС;

	Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета Тогда
		ТекущаяСтрока.СуммаРегл = ТекущаяСтрока.СуммаБезНДС;
		ТекущаяСтрока.НДСРегл = ТекущаяСтрока.СуммаНДС;
	Иначе
		ТекущаяСтрока.СуммаРегл = РассчитатьСуммуРегл(ТекущаяСтрока.СуммаБезНДС, ВалютаУправленческогоУчета, ВалютаРегламентированногоУчета, Объект.Дата);
		ТекущаяСтрока.НДСРегл = РассчитатьСуммуРегл(ТекущаяСтрока.СуммаНДС, ВалютаУправленческогоУчета, ВалютаРегламентированногоУчета, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(ТаблЧасть)

	ТекущаяСтрока = ТаблЧасть.ТекущиеДанные;

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаНДС;

	Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета Тогда
		ТекущаяСтрока.СуммаРегл = ТекущаяСтрока.СуммаБезНДС;
		ТекущаяСтрока.НДСРегл = ТекущаяСтрока.СуммаНДС;
	Иначе
		ТекущаяСтрока.СуммаРегл = РассчитатьСуммуРегл(ТекущаяСтрока.СуммаБезНДС, ВалютаУправленческогоУчета, ВалютаРегламентированногоУчета, Объект.Дата);
		ТекущаяСтрока.НДСРегл = РассчитатьСуммуРегл(ТекущаяСтрока.СуммаНДС, ВалютаУправленческогоУчета, ВалютаРегламентированногоУчета, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(ТаблЧасть)
	
	ТекущаяСтрока = ТаблЧасть.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "Количество");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаНДС;
	
	Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета Тогда
		ТекущаяСтрока.СуммаРегл = ТекущаяСтрока.СуммаБезНДС;
		ТекущаяСтрока.НДСРегл = ТекущаяСтрока.СуммаНДС;
	Иначе
		ТекущаяСтрока.СуммаРегл = РассчитатьСуммуРегл(ТекущаяСтрока.СуммаБезНДС, ВалютаУправленческогоУчета, ВалютаРегламентированногоУчета, Объект.Дата);
		ТекущаяСтрока.НДСРегл = РассчитатьСуммуРегл(ТекущаяСтрока.СуммаНДС, ВалютаУправленческогоУчета, ВалютаРегламентированногоУчета, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(ТаблЧасть)
	
	ТекущаяСтрока = ТаблЧасть.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаНДС;

	Если ВалютаУправленческогоУчета = ВалютаРегламентированногоУчета Тогда
		ТекущаяСтрока.СуммаРегл = ТекущаяСтрока.СуммаБезНДС;
		ТекущаяСтрока.НДСРегл = ТекущаяСтрока.СуммаНДС;
	Иначе
		ТекущаяСтрока.СуммаРегл = РассчитатьСуммуРегл(ТекущаяСтрока.СуммаБезНДС, ВалютаУправленческогоУчета, ВалютаРегламентированногоУчета, Объект.Дата);
		ТекущаяСтрока.НДСРегл = РассчитатьСуммуРегл(ТекущаяСтрока.СуммаНДС, ВалютаУправленческогоУчета, ВалютаРегламентированногоУчета, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблЧастьВыбор(Элемент, Поле)
	
	Если Поле = Элементы.СобственныеТоварыСтатусУказанияСерий Тогда 
			Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий, "СобственныеТовары") Тогда
				ТекущиеДанныеИдентификатор = Элемент.ТекущиеДанные.ПолучитьИдентификатор();
				ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
				
				ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
				
				Если ЗначениеВозврата <> Неопределено Тогда
					ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
				КонецЕсли;
			КонецЕсли;
	ИначеЕсли Поле = Элементы.СобственныеТоварыСтатусУказанияСерий Тогда 
			Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий, "ПринятаяТара") Тогда
				ТекущиеДанныеИдентификатор = Элемент.ТекущиеДанные.ПолучитьИдентификатор();
				ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
				
				ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
				
				Если ЗначениеВозврата <> Неопределено Тогда
					ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
				КонецЕсли;
			КонецЕсли;
	ИначеЕсли Поле = Элементы.ПолученныеНаКомиссиюСтатусУказанияСерий Тогда
			Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий, "ПолученныеНаКомиссию") Тогда
				ТекущиеДанныеИдентификатор = Элемент.ТекущиеДанные.ПолучитьИдентификатор();
				ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
				
				ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
				
				Если ЗначениеВозврата <> Неопределено Тогда
					ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
				КонецЕсли;
			КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблЧастьПередОкончаниемРедактирования(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	КонецЕсли;
				
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий, "СобственныеТовары") Тогда
		ТекущиеДанныеИдентификатор = Элементы.СобственныеТовары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятаяТараУказатьСерии(Команда)
	
	Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий, "ПринятаяТара") Тогда
		ТекущиеДанныеИдентификатор = Элементы.СобственныеТовары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииПолученныхНаКомиссию(Команда)
	
	Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий,"ПолученныеНаКомиссию") Тогда
		ТекущиеДанныеИдентификатор = Элементы.ПолученныеНаКомиссию.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// ПРИ ИЗМЕНЕНИИ РЕКВИЗИТОВ

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению")
			И Объект.ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
			И Объект.ТипОперации <> Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе 
			И ЗначениеЗаполнено(Объект.Организация)
			И НЕ ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
			Объект.НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Объект.Организация,,Объект.Дата);
		КонецЕсли;
		НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтаФорма,
			ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация, Ложь)
		);
	КонецЕсли;
	
КонецПроцедуры	
	
&НаСервере
Процедура ПартнерПриИзмененииСервер(Партнер, Контрагент)
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	НастроитьОтображениеРеквизитовСчетаФактуры(
		ЭтаФорма,
		ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация, Ложь)
	);
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииСервер()

	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение",Объект.Склад, Объект.Помещение));
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ВводОстатков));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ПомещениеПриИзмененииСервер()

	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение",Объект.Склад, Объект.Помещение));
	
	АдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСоглашениюСервер()
	
	Реквизиты = ЗакупкиСервер.ПолучитьУсловияЗакупок(Объект.СоглашениеСКомитентом);
	
	Если Реквизиты.Склад <> Объект.Склад Тогда
		Объект.Склад = Реквизиты.Склад;
		ТипОперацииАдресныйСклад = (Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе);
		АдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Реквизиты.Склад, Неопределено);
		Если ТипОперацииАдресныйСклад <> АдресноеХранение Тогда
			Объект.ТипОперации = ?(АдресноеХранение, Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе,
			                                         Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию);
			УстановитьПараметрыВыбораСкладаПомещения();
			УстановитьВидимость();
			СтарыйТипОперации = Объект.ТипОперации;
		КонецЕсли;
		СкладПриИзмененииСервер();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, Реквизиты,, "Склад");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммуРегл(Сумма, Валюта, ВалютаРегламентированногоУчета, ДатаДокумента)
	
	Если Валюта = ВалютаРегламентированногоУчета Тогда
		СуммаРегл = Сумма;
	Иначе
		КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Валюта, ВалютаРегламентированногоУчета, ДатаДокумента);
		СуммаРегл = Окр(Сумма * КоэффициентПересчета, 2, 1);
	КонецЕсли;
	
	Возврат СуммаРегл;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЕРИИ

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)

	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);

КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
		
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий);
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий, СтруктураДействий);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЧЕТ-ФАКТУРА

&НаКлиенте
Процедура ТекстСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗакупкиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект.Организация, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредъявленСчетФактураПриИзменении(Элемент)
	
	НастроитьОтображениеРеквизитовСчетаФактуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеРеквизитовСчетаФактуры(Форма, ПараметрыПредставления = Неопределено)
	
	Если ПараметрыПредставления <> Неопределено Тогда
		
		Если ПараметрыПредставления.РазрешенВводНового Тогда
			Форма.Элементы.ГруппаСтраницыСчетФактура.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаРеквизитыСчетаФактуры;
		Иначе
			Форма.ТекстСчетФактура = ПараметрыПредставления.ТекстСчетФактура;
			Форма.Элементы.ТекстСчетФактура.Гиперссылка = ПараметрыПредставления.ГиперссылкаСчетФактура;
			Форма.Элементы.ГруппаСтраницыСчетФактура.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаТекстСчетФактура;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.Элементы.ГруппаСтраницыСчетФактура.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаРеквизитыСчетаФактуры Тогда
		
		ИменаЭлементов = Новый Массив;
		ИменаЭлементов.Добавить("НомерСчетаФактуры");
		ИменаЭлементов.Добавить("ДатаСчетаФактуры");
		
		Если Форма.Объект.ПредъявленСчетФактура Тогда
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "Доступность", Истина);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "АвтоОтметкаНезаполненного", Истина);
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "АвтоОтметкаНезаполненного", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "ОтметкаНезаполненного", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаСобственныеТовары.Видимость		= (Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
														ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваровНаАдресномСкладе);
	Элементы.СобственныеТоварыРаспоряжение.Видимость 	= (Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваровНаАдресномСкладе
															И
															ПолучитьФункциональнуюОпцию("ИспользоватьРаспоряженияНаИнвентаризацию"));
	Элементы.ГруппаПолученныеНаКомиссию.Видимость		= (Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
															ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе);
	Элементы.ПолученныеНаКомиссиюРаспоряжение.Видимость 	= (Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
																И
																ПолучитьФункциональнуюОпцию("ИспользоватьРаспоряженияНаИнвентаризацию"));
	Элементы.ГруппаПереданныеНаКомиссию.Видимость		= Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПереданныхНаКомиссию;
	
	Элементы.ГруппаПринятаяТара.Видимость		= (Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
															ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе);
	Элементы.ПринятаяТараРаспоряжение.Видимость 	= (Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе
																И
																ПолучитьФункциональнуюОпцию("ИспользоватьРаспоряженияНаИнвентаризацию"));
	Элементы.ГруппаПереданнаяТара.Видимость		= Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПереданнойКлиентам;
	
	ВедетсяРаздельныйУчетПоВидамНалогообложенияНДС = ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению");
	Элементы.СобственныеТоварыНалогообложениеНДС.Видимость = ВедетсяРаздельныйУчетПоВидамНалогообложенияНДС;
	Элементы.ПереданныеНаКомиссиюНалогообложениеНДС.Видимость = ВедетсяРаздельныйУчетПоВидамНалогообложенияНДС;
	Элементы.ПринятаяТараНалогообложениеНДС.Видимость = ВедетсяРаздельныйУчетПоВидамНалогообложенияНДС;
	
	Для Каждого Страница Из Элементы.ГруппаТипыОпераций.ПодчиненныеЭлементы Цикл
		Если Страница.Видимость И Страница.Имя <> "ГруппаКомментарий" Тогда
			Страница.Заголовок = Объект.ТипОперации;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ТипОперации", Объект.ТипОперации);
	Оповестить("Запись_ВводОстатков", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьСумму","Количество");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСкладаПомещения()
	
	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров
		Или Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию Тогда
		
		МассивНастроек = Новый Массив;
		МассивНастроек.Добавить(Перечисления.НастройкиАдресногоХранения.НеИспользовать);
		МассивНастроек.Добавить(Перечисления.НастройкиАдресногоХранения.ОпределяетсяНастройкамиПомещения);
		МассивНастроек.Добавить(Перечисления.НастройкиАдресногоХранения.ЯчейкиСправочно);
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.НастройкаАдресногоХранения",Новый ФиксированныйМассив(МассивНастроек));
		
		МассивПараметров = Новый Массив;
		
		МассивПараметров.Добавить(ПараметрВыбора);
		
		Элементы.СобственныеТоварыСклад.ПараметрыВыбора      	= Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ПолученныеНаКомиссиюСклад.ПараметрыВыбора      = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.СобственныеТоварыПомещение.ПараметрыВыбора  	= Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ПолученныеНаКомиссиюПомещение.ПараметрыВыбора  = Новый ФиксированныйМассив(МассивПараметров);
		
	Иначе
		МассивНастроек = Новый Массив;
		МассивНастроек.Добавить(Перечисления.НастройкиАдресногоХранения.ОпределяетсяНастройкамиПомещения);
		МассивНастроек.Добавить(Перечисления.НастройкиАдресногоХранения.ЯчейкиОстатки);
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.НастройкаАдресногоХранения",Новый ФиксированныйМассив(МассивНастроек));
		
		МассивПараметров = Новый Массив;
		
		МассивПараметров.Добавить(ПараметрВыбора);
		
		Элементы.СобственныеТоварыСклад.ПараметрыВыбора      	= Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ПолученныеНаКомиссиюСклад.ПараметрыВыбора      = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.СобственныеТоварыПомещение.ПараметрыВыбора 	= Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ПолученныеНаКомиссиюПомещение.ПараметрыВыбора  = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидаЗапасов()
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ТипОперации"));
	
	Если ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета") Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Номенклатура", "Элементы.СобственныеТовары.ТекущиеДанные.Номенклатура"));
	КонецЕсли;
	
	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиСобственныхТоваров Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Партнер", "Объект.Партнер"));
	КонецЕсли;
	
	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссию
	 ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиТоваровПолученныхНаКомиссиюНаАдресномСкладе
	 ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиков
	 ИЛИ Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиВозвратнойТарыПринятойОтПоставщиковНаАдресномСкладе Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Комитент", "Объект.Партнер"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Договор", "Объект.Договор"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Соглашение", "Объект.СоглашениеСКомитентом"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Валюта", "Объект.Валюта"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.НалогообложениеНДС", "Объект.НалогообложениеНДС"));
	КонецЕсли;
	
	Элементы.СобственныеТоварыВидЗапасов.СвязиПараметровВыбора 		= Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ПолученныеНаКомиссиюВидЗапасов.СвязиПараметровВыбора 	= Новый ФиксированныйМассив(МассивПараметров);
	Элементы.ПереданныеНаКомиссиюВидЗапасов.СвязиПараметровВыбора 	= Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

















