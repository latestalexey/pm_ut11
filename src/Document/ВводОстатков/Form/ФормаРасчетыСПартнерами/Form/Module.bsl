////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДополнятьНомера = Истина;
	Объект.Префикс = УстановитьПрефикс(Объект.Организация);

	ЗаполнитьСпискиВыбораТипаРасчетов();
	ЗаполнитьТипОбъектаРасчетов();
	УстановитьВидимость();
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	ХозяйственнаяОперацияДоговора = Документы.ВводОстатков.ХозяйственнаяОперацияДоговораПоТипуОперации(Объект.ТипОперации);

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	Элементы.Префикс.Доступность = Объект.ДополнятьНомера;
	СтарыйТипОперации = Объект.ТипОперации;
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	ЗаполнитьТипОбъектаРасчетов();
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ТипОперации", Объект.ТипОперации);
	Оповестить("Запись_ВводОстатков", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Префикс = УстановитьПрефикс(Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнятьНомераПриИзменении(Элемент)
	
	Элементы.Префикс.Доступность = Объект.ДополнятьНомера;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ЗАДОЛЖЕННОСТЬ КЛИЕНТОВ

&НаКлиенте
Процедура ЗадолженностьКлиентовПартнерПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПартнерПриИзмененииСервер(ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент);
	ПроверитьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовКонтрагентПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПроверитьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовТипРасчетовОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РасчетныйДокумент = Элементы.ЗадолженностьКлиентов.ТекущиеДанные.РасчетныйДокумент;
	Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		ОткрытьЗначение(РасчетныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	ТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовНомерРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	НомерРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовДатаРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	ДатаРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	СуммаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовВалютаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьКлиентов.ТекущиеДанные;
	ВалютаПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьКлиентовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьВалютуВзаиморасчетовВСтроке(Элементы.ЗадолженностьКлиентов.ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ЗАДОЛЖЕННОСТЬ ПЕРЕД ПОСТАВЩИКАМИ

&НаКлиенте
Процедура ЗадолженностьПоставщикамПартнерПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПартнерПриИзмененииСервер(ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент);
	ПроверитьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамКонтрагентПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПроверитьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамТипРасчетовОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РасчетныйДокумент = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные.РасчетныйДокумент;
	Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		ОткрытьЗначение(РасчетныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	ТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамНомерРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	НомерРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамДатаРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	ДатаРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	СуммаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамВалютаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ЗадолженностьПоставщикам.ТекущиеДанные;
	ВалютаПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьПоставщикамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьВалютуВзаиморасчетовВСтроке(Элементы.ЗадолженностьПоставщикам.ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ АВАНСЫ КЛИЕНТОВ

&НаКлиенте
Процедура АвансыКлиентовПартнерПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПартнерПриИзмененииСервер(ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент);
	ПроверитьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовКонтрагентПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПроверитьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовТипРасчетовОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РасчетныйДокумент = Элементы.АвансыКлиентов.ТекущиеДанные.РасчетныйДокумент;
	Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		ОткрытьЗначение(РасчетныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.АвансыКлиентов.ТекущиеДанные;
	ТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовНомерРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	НомерРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовДатаРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	ДатаРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	СуммаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовВалютаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыКлиентов.ТекущиеДанные;
	ВалютаПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыКлиентовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьВалютуВзаиморасчетовВСтроке(Элементы.АвансыКлиентов.ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ АВАНСЫ ПОСТАВЩИКАМ

&НаКлиенте
Процедура АвансыПоставщикамПартнерПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПартнерПриИзмененииСервер(ТекущиеДанные.Партнер, ТекущиеДанные.Контрагент);
	ПроверитьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ПроверитьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамТипРасчетовОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РасчетныйДокумент = Элементы.АвансыПоставщикам.ТекущиеДанные.РасчетныйДокумент;
	Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		ОткрытьЗначение(РасчетныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.АвансыПоставщикам.ТекущиеДанные;
	ТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтрокаТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамНомерРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	НомерРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамДатаРасчетногоДокументаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	ДатаРасчетногоДокументаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамСуммаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	СуммаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамВалютаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.АвансыПоставщикам.ТекущиеДанные;
	ВалютаПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПоставщикамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьВалютуВзаиморасчетовВСтроке(Элементы.АвансыПоставщикам.ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьВидимость()
	
	Объект.ДополнятьНомера = Истина;
	Объект.Префикс = УстановитьПрефикс(Объект.Организация);
	
	ТипРасчетногоДокумента = Неопределено;
	
	УстановитьТипДокументаРасчетов(ТипРасчетногоДокумента);
	
	Если ТипРасчетногоДокумента <> Неопределено Тогда
		
		МетаданныеРасчетногоДокумента = ТипРасчетногоДокумента.Метаданные();
		
		ИмяТипаРасчетногоДокумента = МетаданныеРасчетногоДокумента.Имя;
		
		ХозяйственнаяОперацияДоговора = Документы.ВводОстатков.ХозяйственнаяОперацияДоговораПоТипуОперации(Объект.ТипОперации);
		
	КонецЕсли;
	
	Элементы.ГруппаЗадолженностьКлиентов.Видимость				= Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов;
	Элементы.ГруппаЗадолженностьПередПоставщиками.Видимость		= Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками;
	Элементы.ГруппаАвансыКлиентов.Видимость						= Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов;
	Элементы.ГруппаАвансыПоставщикам.Видимость					= Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам;

	Для Каждого Страница Из Элементы.ГруппаТипыОпераций.ПодчиненныеЭлементы Цикл
		Если Страница.Видимость И Страница.Имя <> "ГруппаКомментарий" Тогда
			Страница.Заголовок = Объект.ТипОперации;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСпискиВыбораТипаРасчетов()
	
	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов Тогда
		СписокВыбора = Элементы.АвансыКлиентовТипРасчетов.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), НСтр("ru = 'Договор контрагента'")); 
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
			СписокВыбора.Добавить(Документы.ЗаказКлиента.ПустаяСсылка(), НСтр("ru = 'Заказ клиента'"));
		КонецЕсли;
		СписокВыбора.Добавить("Не указан", НСтр("ru = 'Не указан'"));
		СписокВыбора.Добавить("Выбор", НСтр("ru = 'Выбрать объект расчетов'"));
	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов Тогда
		СписокВыбора = Элементы.ЗадолженностьКлиентовТипРасчетов.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), НСтр("ru = 'Договор контрагента'")); 
		СписокВыбора.Добавить(Документы.АктВыполненныхРабот.ПустаяСсылка(), НСтр("ru = 'Акт выполненных работ'"));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
			СписокВыбора.Добавить(Документы.ЗаказКлиента.ПустаяСсылка(), НСтр("ru = 'Заказ клиента'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов") Тогда
			СписокВыбора.Добавить(Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка(), НСтр("ru = 'Заявка на возврат товаров от клиента'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах") Тогда
			СписокВыбора.Добавить(Документы.ОтчетКомиссионера.ПустаяСсылка(), НСтр("ru = 'Отчет комиссионера о продажах'"));
			СписокВыбора.Добавить(Документы.ОтчетКомиссионераОСписании.ПустаяСсылка(), НСтр("ru = 'Отчет комиссионера о списании'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках") Тогда
			СписокВыбора.Добавить(Документы.ОтчетКомитенту.ПустаяСсылка(), НСтр("ru = 'Отчет комитенту о продажах'"));
		КонецЕсли;
		СписокВыбора.Добавить(Документы.РеализацияТоваровУслуг.ПустаяСсылка(), НСтр("ru = 'Реализация товаров и услуг'"));
		СписокВыбора.Добавить(Документы.РеализацияУслугПрочихАктивов.ПустаяСсылка(), НСтр("ru = 'Реализация услуг и прочих активов'"));
		СписокВыбора.Добавить("Не указан", НСтр("ru = 'Не указан'"));
		СписокВыбора.Добавить("Выбор", НСтр("ru = 'Выбрать объект расчетов'"));
	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиПоАвансамПоставщикам Тогда
		СписокВыбора = Элементы.АвансыПоставщикамТипРасчетов.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), НСтр("ru = 'Договор контрагента'")); 
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
			СписокВыбора.Добавить(Документы.ЗаказПоставщику.ПустаяСсылка(), НСтр("ru = 'Заказ поставщику'"));
		КонецЕсли;
		СписокВыбора.Добавить("Не указан", НСтр("ru = 'Не указан'"));
		СписокВыбора.Добавить("Выбор", НСтр("ru = 'Выбрать объект расчетов'"));
	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиПередПоставщиками Тогда
		СписокВыбора = Элементы.ЗадолженностьПоставщикамТипРасчетов.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), НСтр("ru = 'Договор контрагента'")); 
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
			СписокВыбора.Добавить(Документы.ЗаказПоставщику.ПустаяСсылка(), НСтр("ru = 'Заказ поставщику'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах") Тогда
			СписокВыбора.Добавить(Документы.ОтчетКомиссионера.ПустаяСсылка(), НСтр("ru = 'Отчет комиссионера о продажах'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках") Тогда
			СписокВыбора.Добавить(Документы.ОтчетКомитенту.ПустаяСсылка(), НСтр("ru = 'Отчет комитенту о продажах'"));
			СписокВыбора.Добавить(Документы.ОтчетКомитентуОСписании.ПустаяСсылка(), НСтр("ru = 'Отчет комитенту о списании'"));
		КонецЕсли;
		СписокВыбора.Добавить(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка(), НСтр("ru = 'Поступление товаров и услуг'"));
		СписокВыбора.Добавить(Документы.ПоступлениеУслугПрочихАктивов.ПустаяСсылка(), НСтр("ru = 'Поступление услуг и прочих активов'"));
		СписокВыбора.Добавить("Не указан", НСтр("ru = 'Не указан'"));
		СписокВыбора.Добавить("Выбор", НСтр("ru = 'Выбрать объект расчетов'"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипОбъектаРасчетов()

	Для Каждого СтрокаТаблицы Из Объект.РасчетыСПартнерами Цикл
		СтрокаТаблицы.ТипРасчетов = Строка(ТипЗнч(СтрокаТаблицы.РасчетныйДокумент));
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьНомер(Номер)
		
	Если Не Объект.ДополнятьНомера
		Или Не ЗначениеЗаполнено(Номер) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = СокрЛП(Номер);
	
	Разделитель = ?(ПустаяСтрока(Объект.Префикс), "", "-");
	
	Начало = СокрЛП(Объект.Префикс) + Разделитель;
	
	Пока СтрДлина(Результат) < 11 - СтрДлина(Начало) Цикл
		Результат = "0" + Результат;
	КонецЦикла;
	
	Если СтрДлина(Результат) <= 11 - СтрДлина(Начало) Тогда
		Результат = Начало + Результат;
	КонецЕсли;
	
	Номер = Результат;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьДокументРасчетовСевер(ТекущаяСтрокаИдентификатор)
	
	ИмяТЧ 			= Документы.ВводОстатков.ИмяТабличнойЧастиРасчетовПоТипуОперации(Объект.ТипОперации);
	ТекущиеДанные 	= Объект[ИмяТЧ].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Документы.ВводОстатков.ПодобратьДокументРасчетов(Объект, ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДокументРасчетовСервер(ТекущаяСтрокаИдентификатор)
	
	ИмяТЧ = Документы.ВводОстатков.ИмяТабличнойЧастиРасчетовПоТипуОперации(Объект.ТипОперации);
	
	ТекущиеДанные = Объект[ИмяТЧ].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.РасчетныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Новый Структура("Организация,Номер,Дата,Ссылка,Представление");
	
		Реквизиты.Вставить("Партнер");
		Реквизиты.Вставить("Контрагент");
		
		Если ТипЗнч(ТекущиеДанные.РасчетныйДокумент) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Реквизиты.Вставить("Валюта","ВалютаВзаиморасчетов");
		Иначе
			Реквизиты.Вставить("Валюта");
		КонецЕсли;
		
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущиеДанные.РасчетныйДокумент,Реквизиты);
	
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.Организация)
	 И ЗначенияРеквизитов.Организация <> Объект.Организация Тогда
		
		ТекстСообщения = НСтр("ru='В документе ""%РасчетныйДокумент%"" организация отличается от указанной во вводе остатков'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%РасчетныйДокумент%",ЗначенияРеквизитов.Представление);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ТекущиеДанные.РасчетныйДокумент = Неопределено;
		
		УстановитьТипДокументаРасчетов(ТекущиеДанные.РасчетныйДокумент);
		
		Возврат;
	КонецЕсли;
	
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Партнер)
		 И ЗначениеЗаполнено(ЗначенияРеквизитов.Партнер)
		 И ЗначенияРеквизитов.Партнер <> ТекущиеДанные.Партнер Тогда
			
			ТекстСообщения = НСтр("ru='В документе ""%РасчетныйДокумент%"" партнер отличается от указанного во вводе остатков'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%РасчетныйДокумент%",ЗначенияРеквизитов.Представление);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ТекущиеДанные.РасчетныйДокумент = Неопределено;
			ТекущиеДанные.НомерРасчетногоДокумента = "";
			ТекущиеДанные.ДатаРасчетногоДокумента = "";
			УстановитьТипДокументаРасчетов(ТекущиеДанные.РасчетныйДокумент);
			
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент)
		 И ЗначениеЗаполнено(ЗначенияРеквизитов.Контрагент)
		 И ЗначенияРеквизитов.Контрагент <> ТекущиеДанные.Контрагент Тогда
			
			ТекстСообщения = НСтр("ru='В документе ""%РасчетныйДокумент%"" контрагент отличается от указанного во вводе остатков'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%РасчетныйДокумент%",ЗначенияРеквизитов.Представление);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ТекущиеДанные.РасчетныйДокумент = Неопределено;
			ТекущиеДанные.НомерРасчетногоДокумента = "";
			ТекущиеДанные.ДатаРасчетногоДокумента = "";
			УстановитьТипДокументаРасчетов(ТекущиеДанные.РасчетныйДокумент);
			
			Возврат;
		КонецЕсли;
		ТекущиеДанные.Контрагент = ЗначенияРеквизитов.Контрагент;
		ТекущиеДанные.Партнер = ЗначенияРеквизитов.Партнер;
		
	
	ТекущиеДанные.РасчетныйДокумент        = ЗначенияРеквизитов.Ссылка;
	ТекущиеДанные.ДатаРасчетногоДокумента  = ЗначенияРеквизитов.Дата;
	ТекущиеДанные.НомерРасчетногоДокумента = ЗначенияРеквизитов.Номер;
	ТекущиеДанные.ВалютаВзаиморасчетов = ЗначенияРеквизитов.Валюта;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьТипДокументаРасчетов(РасчетныйДокумент)
	
	Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	РасчетныйДокумент = Документы.ВводОстатков.ТипДокументаРасчетовПоТипуОперации(Объект.ТипОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерРасчетногоДокументаПриИзменении(ТекущиеДанные)
	
	ДополнитьНомер(ТекущиеДанные.НомерРасчетногоДокумента);
	
	Если Не (ЗначениеЗаполнено(ТекущиеДанные.НомерРасчетногоДокумента)
		И ЗначениеЗаполнено(ТекущиеДанные.ДатаРасчетногоДокумента))
		И ИмяТипаРасчетногоДокумента <> "ДоговорыКонтрагентов" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	
	ПодобратьДокументРасчетовСевер(ТекущаяСтрокаИдентификатор);
	
Конецпроцедуры

&НаКлиенте
Процедура ДатаРасчетногоДокументаПриИзменении(ТекущиеДанные)
	
	Если Не (ЗначениеЗаполнено(ТекущиеДанные.НомерРасчетногоДокумента)
		И ЗначениеЗаполнено(ТекущиеДанные.ДатаРасчетногоДокумента))
		И ИмяТипаРасчетногоДокумента <> "ДоговорыКонтрагентов" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	
	ПодобратьДокументРасчетовСевер(ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммуРегл(Сумма, Валюта,ВалютаРегламентированногоУчета, ДатаДокумента)
	
	Если Валюта = ВалютаРегламентированногоУчета Тогда
		СуммаРегл = Сумма;
	Иначе
		КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Валюта, ВалютаРегламентированногоУчета, ДатаДокумента);
		СуммаРегл = Окр(Сумма * КоэффициентПересчета, 2, 1);
	КонецЕсли;
	
	Возврат СуммаРегл;
	
КонецФункции

&НаКлиенте
Процедура ВалютаПриИзменении(ТекущиеДанные)

	Если ТекущиеДанные.Сумма <> 0 Тогда
		СуммаПриИзменении(ТекущиеДанные);
	КонецЕсли;
	
Конецпроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(ТекущиеДанные)
	
	Если ТекущиеДанные.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
		ТекущиеДанные.СуммаРегл = ТекущиеДанные.Сумма;
	Иначе
		ТекущиеДанные.СуммаРегл = РассчитатьСуммуРегл(ТекущиеДанные.Сумма, ТекущиеДанные.ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПартнерПриИзмененииСервер(Партнер, Контрагент)
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, СтрокаТаблицы)
	
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = "Выбор" Тогда
		Если Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиЗадолженностиКлиентов")
		 ИЛИ Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.ТипыОперацийВводаОстатков.ОстаткиПоАвансамКлиентов") Тогда
			ЭтоРасчетыСКлиентами = Истина;
		Иначе
			ЭтоРасчетыСКлиентами = Ложь;
		КонецЕсли;
			
		ФинансыКлиент.ДокументРасчетовНачалоВыбора(
			Объект.Организация,
			СтрокаТаблицы.Партнер,
			СтрокаТаблицы.Контрагент,
			Неопределено, // Соглашение,
			ЭтоРасчетыСКлиентами,
			Ложь, // ВыборОснованияПлатежа
			Элемент,
			СтандартнаяОбработка
		);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТаблицы.ТипРасчетов = Строка(ТипЗнч(ВыбранноеЗначение.Заказ));
		СтрокаТаблицы.ДатаРасчетногоДокумента = ВыбранноеЗначение.Дата;
		СтрокаТаблицы.НомерРасчетногоДокумента = ВыбранноеЗначение.Номер;
		СтрокаТаблицы.РасчетныйДокумент = ВыбранноеЗначение.Заказ;
		СтрокаТаблицы.ВалютаВзаиморасчетов = ВыбранноеЗначение.ВалютаВзаиморасчетов;
		
	Иначе
		
		Если ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) <> ТипЗнч(ВыбранноеЗначение) Тогда
			Если ВыбранноеЗначение = "Не указан" Тогда
				СтрокаТаблицы.РасчетныйДокумент = Неопределено;
				СтрокаТаблицы.ТипРасчетов = ВыбранноеЗначение;
				СтрокаТаблицы.ДатаРасчетногоДокумента = Дата(1,1,1);
				СтрокаТаблицы.НомерРасчетногоДокумента = "";
			Иначе
				СтрокаТаблицы.РасчетныйДокумент = ВыбранноеЗначение;
				СтрокаТаблицы.ТипРасчетов = Строка(ТипЗнч(ВыбранноеЗначение));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьПрефикс(Организация)
	
	ПрефиксИнформационнойБазы = "";
	ПрефиксОрганизации        = "";
	
	// устанавливаем привилегированный режим
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПрефиксацияОбъектовПовтИсп.ЕстьФункциональнаяОпцияПрефиксИнформационнойБазы() Тогда
		
		ПрефиксИнформационнойБазы = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
		
		ДополнитьСтрокуНулямиСлева(ПрефиксИнформационнойБазы, 2);
		
	КонецЕсли;
	
	Если ПрефиксацияОбъектовПовтИсп.ЕстьФункциональнаяОпцияПрефиксыОрганизаций() Тогда
		
		ПрефиксОрганизации = ПолучитьФункциональнуюОпцию("ПрефиксыОрганизаций", Новый Структура("Организация", Организация));
		
		// если задана пустая ссылка на организацию
		Если ПрефиксОрганизации = Ложь Тогда
			
			ПрефиксОрганизации = "";
			
		КонецЕсли;
		
		ДополнитьСтрокуНулямиСлева(ПрефиксОрганизации, 2);
		
	КонецЕсли;
	
	ОсновнойПрефикс = ПрефиксОрганизации + ПрефиксИнформационнойБазы;
	
	Разделитель = ?(ПустаяСтрока(ОсновнойПрефикс), "", "-");
	
	Префикс = ОсновнойПрефикс + Разделитель + Префикс;
	
	// если префикс не задан, то устанавливаем значение по умолчанию
	Если ПустаяСтрока(Префикс) Тогда
		
		Префикс = "0";
		
	КонецЕсли;
	
	Возврат Префикс;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьСтрокуНулямиСлева(Строка, ДлинаСтроки)
	
	Строка = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка, ДлинаСтроки, "0", "Слева");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВалютуВзаиморасчетовВСтроке(Строка)
	
	Если НЕ ЗначениеЗаполнено(Строка.ВалютаВзаиморасчетов) И Не ИспользоватьНесколькоВалют Тогда
		Строка.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
КонецПроцедуры

















































