
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	
	ЗаполнитьСпискиВыбораТипаРасчетов();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		ПриСозданииЧтенииНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	УстановитьВидимость();
	
	МассивПараметров = ПолучитьПараметрыВыбораОрганизацииПолучателя(Объект.ОрганизацияПолучатель);
	Элементы.РасчетыПоРеализацииПокупатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыПоАвансамПокупатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Элементы.Префикс.Доступность = Объект.ДополнятьНомера;
	ЗаполнитьТипОбъектаРасчетов();
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	ЗаполнитьТипОбъектаРасчетов();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДополнятьНомераПриИзменении(Элемент)
	
	Элементы.Префикс.Доступность = Объект.ДополнятьНомера;

КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоРеализацииПродавецПриИзменении(Элемент)
		
	//ОрганизацияПриИзмененииСервер();
	Объект.Префикс = УстановитьПрефикс(Объект.Организация);
	
	МассивПараметров = ПолучитьПараметрыВыбораОрганизацииПолучателя(Объект.ОрганизацияПолучатель);
	Элементы.РасчетыПоРеализацииПокупатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыПоАвансамПокупатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

	ПроверитьИОчиститьОрганизациюПолучатель(Объект.Организация, Объект.ОрганизацияПолучатель);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоАвансамПродавецПриИзменении(Элемент)
	
	//ОрганизацияПриИзмененииСервер();
	Объект.Префикс = УстановитьПрефикс(Объект.Организация);
	
	МассивПараметров = ПолучитьПараметрыВыбораОрганизацииПолучателя(Объект.ОрганизацияПолучатель);
	Элементы.РасчетыПоРеализацииПокупатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	Элементы.РасчетыПоАвансамПокупатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	ПроверитьИОчиститьОрганизациюПолучатель(Объект.Организация, Объект.ОрганизацияПолучатель);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ РАСЧЕТЫ ПО РЕАЛИЗАЦИЯМ

&НаКлиенте
Процедура РасчетыПоРеализацииТипРасчетовОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.РасчетыПоРеализации.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.РасчетныйДокумент) Тогда
		ОткрытьЗначение(ТекущиеДанные.РасчетныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоРеализацииТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.РасчетыПоРеализации.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	ТипРасчетовОбработкаВыбора(Элемент, СтрокаТаблицы, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоРеализацииНомерРасчетногоДокументаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоРеализации.ТекущиеДанные;
	НомерДатаПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоРеализацииДатаРасчетногоДокументаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоРеализации.ТекущиеДанные;
	НомерДатаПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоРеализацииСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоРеализации.ТекущиеДанные;
	СуммаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоРеализацииВалютаВзаиморасчетовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоРеализации.ТекущиеДанные;
	ВалютаВзаиморасчетовПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоРеализацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьВалютуВзаиморасчетовВСтроке(Элементы.РасчетыПоРеализации.ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ РАСЧЕТЫ ПО АВАНСАМ

&НаКлиенте
Процедура РасчетыПоАвансамТипРасчетовОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.РасчетыПоАвансам.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.РасчетныйДокумент) Тогда
		ОткрытьЗначение(ТекущиеДанные.РасчетныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоАвансамТипРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.РасчетыПоАвансам.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	ТипРасчетовОбработкаВыбора(Элемент, СтрокаТаблицы, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоАвансамНомерРасчетногоДокументаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоАвансам.ТекущиеДанные;
	НомерДатаПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоАвансамДатаРасчетногоДокументаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоАвансам.ТекущиеДанные;
	НомерДатаПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоАвансамСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоАвансам.ТекущиеДанные;
	СуммаПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоАвансамВалютаВзаиморасчетовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасчетыПоАвансам.ТекущиеДанные;
	ВалютаВзаиморасчетовПриИзменении(ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура РасчетыПоАвансамПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ЗаполнитьВалютуВзаиморасчетовВСтроке(Элементы.РасчетыПоАвансам.ТекущиеДанные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//ОБЩИЕ ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ РАСЧЕТЫ ПО РЕАЛИЗАЦИЯМ И РАСЧЕТЫ ПО АВАНСАМ

&НаКлиенте
Процедура ТипРасчетовОбработкаВыбора(Элемент, СтрокаТаблицы, ВыбранноеЗначение)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = "Выбор" Тогда
			ФинансыКлиент.ДокументРасчетовНачалоВыбора(
				Объект.Организация,
				ПредопределенноеЗначение("Справочник.Партнеры.НашеПредприятие"), // Партнер
				Объект.ОрганизацияПолучатель,
				Неопределено, // Соглашение,
				Ложь, // ЭтоРасчетыСКлиентами,
				Ложь, // ВыборОснованияПлатежа
				Элемент,
				СтандартнаяОбработка
			);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТаблицы.ТипРасчетов = Строка(ТипЗнч(ВыбранноеЗначение.Заказ));
		СтрокаТаблицы.ДатаРасчетногоДокумента = ВыбранноеЗначение.Дата;
		СтрокаТаблицы.НомерРасчетногоДокумента = ВыбранноеЗначение.Номер;
		СтрокаТаблицы.РасчетныйДокумент = ВыбранноеЗначение.Заказ;
		СтрокаТаблицы.ВалютаВзаиморасчетов = ВыбранноеЗначение.ВалютаВзаиморасчетов;
		
	Иначе
		
		Если ТипЗнч(СтрокаТаблицы.РасчетныйДокумент) <> ТипЗнч(ВыбранноеЗначение) Тогда
			Если ВыбранноеЗначение = "Не указан" Тогда
				СтрокаТаблицы.РасчетныйДокумент = Неопределено;;
				СтрокаТаблицы.ТипРасчетов = ВыбранноеЗначение;
				СтрокаТаблицы.ДатаРасчетногоДокумента = Дата(1,1,1);
				СтрокаТаблицы.НомерРасчетногоДокумента = "";
			Иначе
				СтрокаТаблицы.РасчетныйДокумент = ВыбранноеЗначение;
				СтрокаТаблицы.ТипРасчетов = Строка(ТипЗнч(ВыбранноеЗначение));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерДатаПриИзменении(ТекущиеДанные)
	
	ДополнитьНомер(ТекущиеДанные.НомерРасчетногоДокумента);
	Если Не (ЗначениеЗаполнено(ТекущиеДанные.НомерРасчетногоДокумента)
		И ЗначениеЗаполнено(ТекущиеДанные.ДатаРасчетногоДокумента)) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	
	ПодобратьДокументРасчетовСевер(ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(СтрокаТаблицы)
	
	Если СтрокаТаблицы.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета Тогда
		СтрокаТаблицы.СуммаРегл = СтрокаТаблицы.Сумма;
	Иначе
		СтрокаТаблицы.СуммаРегл = РассчитатьСуммуРегл(СтрокаТаблицы.Сумма, СтрокаТаблицы.ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(СтрокаТаблицы)
	
	Если СтрокаТаблицы.Сумма <> 0 Тогда
		СуммаПриИзменении(СтрокаТаблицы);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаРасчетыПоРеализации.Видимость		= Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям;
	Элементы.ГруппаРасчетыПоАвансам.Видимость 	= Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам;
	
	Для Каждого Страница Из Элементы.ГруппаТипыОпераций.ПодчиненныеЭлементы Цикл
		Если Страница.Видимость И Страница.Имя <> "ГруппаКомментарий" Тогда
			Страница.Заголовок = Объект.ТипОперации;
		КонецЕсли;
	КонецЦикла;
	
	Объект.ДополнятьНомера = Истина;
	Объект.Префикс = УстановитьПрефикс(Объект.Организация);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьПрефикс(Организация)
	
	ПрефиксИнформационнойБазы = "";
	ПрефиксОрганизации        = "";
	
	// устанавливаем привилегированный режим
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПрефиксацияОбъектовПовтИсп.ЕстьФункциональнаяОпцияПрефиксИнформационнойБазы() Тогда
		
		ПрефиксИнформационнойБазы = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
		
		ДополнитьСтрокуНулямиСлева(ПрефиксИнформационнойБазы, 2);
		
	КонецЕсли;
	
	Если ПрефиксацияОбъектовПовтИсп.ЕстьФункциональнаяОпцияПрефиксыОрганизаций() Тогда
		
		ПрефиксОрганизации = ПолучитьФункциональнуюОпцию("ПрефиксыОрганизаций", Новый Структура("Организация", Организация));
		
		// если задана пустая ссылка на организацию
		Если ПрефиксОрганизации = Ложь Тогда
			
			ПрефиксОрганизации = "";
			
		КонецЕсли;
		
		ДополнитьСтрокуНулямиСлева(ПрефиксОрганизации, 2);
		
	КонецЕсли;
	
	ОсновнойПрефикс = ПрефиксОрганизации + ПрефиксИнформационнойБазы;
	
	Разделитель = ?(ПустаяСтрока(ОсновнойПрефикс), "", "-");
	
	Префикс = ОсновнойПрефикс + Разделитель + Префикс;
	
	// если префикс не задан, то устанавливаем значение по умолчанию
	Если ПустаяСтрока(Префикс) Тогда
		
		Префикс = "0";
		
	КонецЕсли;
	
	Возврат Префикс;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьСтрокуНулямиСлева(Строка, ДлинаСтроки)
	
	Строка = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка, ДлинаСтроки, "0", "Слева");
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьНомер(Номер)
		
	Если Не Объект.ДополнятьНомера
		Или Не ЗначениеЗаполнено(Номер) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = СокрЛП(Номер);
	
	Разделитель = ?(ПустаяСтрока(Объект.Префикс), "", "-");
	
	Начало = СокрЛП(Объект.Префикс) + Разделитель;
	
	Пока СтрДлина(Результат) < 11 - СтрДлина(Начало) Цикл
		Результат = "0" + Результат;
	КонецЦикла;
	
	Если СтрДлина(Результат) <= 11 - СтрДлина(Начало) Тогда
		Результат = Начало + Результат;
	КонецЕсли;
	
	Номер = Результат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ТипОперации", Объект.ТипОперации);
	Оповестить("Запись_ВводОстатков", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбораТипаРасчетов()
	
	Если Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоРеализациям Тогда
		СписокВыбора = Элементы.РасчетыПоРеализацииТипРасчетов.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить(Документы.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка(), НСтр("ru = 'Передача товаров'"));
		СписокВыбора.Добавить(Документы.ОтчетПоКомиссииМеждуОрганизациями.ПустаяСсылка(), НСтр("ru = 'Отчет по комиссии между организациями'"));
		СписокВыбора.Добавить("Не указан", НСтр("ru = 'Не указан'"));
		СписокВыбора.Добавить("Выбор", НСтр("ru = 'Выбрать объект расчетов'"));
	ИначеЕсли Объект.ТипОперации = Перечисления.ТипыОперацийВводаОстатков.ОстаткиРасчетовМеждуОрганизациямиПоАвансам Тогда
		СписокВыбора = Элементы.РасчетыПоАвансамТипРасчетов.СписокВыбора;
		СписокВыбора.Очистить();
		СписокВыбора.Добавить("Не указан", НСтр("ru = 'Не указан'"));
		СписокВыбора.Добавить("Выбор", НСтр("ru = 'Выбрать объект расчетов'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипОбъектаРасчетов()
	
	Для Каждого СтрокаТаблицы Из Объект.РасчетыМеждуОрганизациями Цикл
		СтрокаТаблицы.ТипРасчетов = Строка(ТипЗнч(СтрокаТаблицы.РасчетныйДокумент));
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыВыбораОрганизацииПолучателя(ОрганизацияПокупатель)
	
	МассивПараметров = Новый Массив;
	
	Если ЗначениеЗаполнено(ОрганизацияПокупатель)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоНеВзаимосвязанные"));
	КонецЕсли;
	
	Возврат МассивПараметров;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьИОчиститьОрганизациюПолучатель(Организация, ОрганизацияПолучатель)
	
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ОрганизацияПолучатель)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")
		И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Организация, ОрганизацияПолучатель) Тогда
		ОрганизацияПолучатель = Неопределено;
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьДокументРасчетовСевер(ТекущаяСтрокаИдентификатор)
	
	ИмяТЧ = Документы.ВводОстатков.ИмяТабличнойЧастиРасчетовПоТипуОперации(Объект.ТипОперации);
	ТекущиеДанные = Объект[ИмяТЧ].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Документы.ВводОстатков.ПодобратьДокументРасчетов(Объект, ТекущиеДанные);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммуРегл(Сумма, Валюта, ВалютаРегламентированногоУчета, ДатаДокумента)
	
	Если Валюта = ВалютаРегламентированногоУчета Тогда
		СуммаРегл = Сумма;
	Иначе
		КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Валюта, ВалютаРегламентированногоУчета, ДатаДокумента);
		СуммаРегл = Окр(Сумма * КоэффициентПересчета, 2, 1);
	КонецЕсли;
	
	Возврат СуммаРегл;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВалютуВзаиморасчетовВСтроке(Строка)
	
	Если НЕ ЗначениеЗаполнено(Строка.ВалютаВзаиморасчетов) И Не ИспользоватьНесколькоВалют Тогда
		Строка.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
КонецПроцедуры






