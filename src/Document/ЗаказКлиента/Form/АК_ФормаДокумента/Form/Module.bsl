
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	
	ИспользоватьРучныеСкидкиВПродажах         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ИспользоватьОграниченияРучныхСкидок = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям")
	                                      Или ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	ИспользоватьСоглашенияСКлиентами         = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользоватьПричиныОтменыЗаказовКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
	
	ДенежныеСредстваСервер.УстановитьВидимостьОплатыПлатежнойКартой(ЭтаФорма, Элементы.ФормаОплаты);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
		СтатусДокумента = Перечисления.СтатусыЗаказовКлиентов.ПустаяСсылка();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
		Если НЕ ИспользоватьСоглашенияСКлиентами И НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ЗаполнитьУсловияПродаж();
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДокументОснование", "Видимость", ЗначениеЗаполнено(Объект.ДокументОснование));
	ПродажиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	ПравоНаЧтениеВидаЦены = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказКлиента.ТабличныеЧасти.Товары.Реквизиты.ВидЦены);
	
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовКлиентов");
	Элементы.ГруппаСтатус.Видимость = ИспользоватьСтатусы;
	
	// Подсистема "ЭлектронныеДокументы"
	УстановитьТекстСостоянияЭДНаСервере();
	
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Элементы.ЗаголовокОрганизация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Элементы.ЗаголовокСклад.Видимость       = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	УстановитьДоступностьКомандБуфераОбмена();
	
	//{ООО "АСТЭК" Разработчик: Бурыкин Александр
	  ЗаказыПоставщиков.Параметры.УстановитьЗначениеПараметра("ДокументОснование",Объект.Ссылка);	  
	  //}

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если Объект.Проведен Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыЗаказовКлиентов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// ИГОРЬ 08 04 2014 
	// Установим цифры
	Для каждого ТекСтрока из Объект.АК_УслугиДополнительные цикл
		Если  ТекСтрока.АК_Процент = 0 тогда
			ТекСтрока.АК_Процент = 1;	
		КонецЕсли;
		Если  ТекСтрока.АК_Сумма = 0 тогда
			ТекСтрока.АК_Сумма = 1;
		КонецЕсли;
	КонецЦикла;
	
	//++АСТЭК
	Если НЕ ЗначениеЗаполнено(Объект.Соглашение) ИЛИ ПолучитьЗначениеРеквизита(Объект.Соглашение, "Типовое") = Истина Тогда
		
		Ответ = КодВозвратаДиалога.Да;
		Ответ = Вопрос("Создать новое индивидуальное соглашение с клиентом для данного КП?", РежимДиалогаВопрос.ДаНетОтмена,,Ответ);
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда	
			//ничего не делаем
		Иначе
			
			//создаем новый
			
			//
			Ключ = Новый Структура("Ключ", Объект.Ссылка);			
			//
			Форма = ПолучитьФорму("Справочник.СоглашенияСКлиентами.ФормаОбъекта", Ключ);
			СтараяДата = Объект.Дата;
			//
			Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийСКлиентами.Действует");
			//
			Форма.Объект.Партнер = Объект.Партнер;
			Форма.Объект.Контрагент = ПолучитьКонтранетнаПартнераПоУмолчанию(Форма.Объект.Партнер);			
			Если ЗначениеЗаполнено(Объект.Дата) Тогда
				Форма.Объект.Дата = Объект.Дата;
			Иначе
				Форма.Объект.Дата = ТекущаяДата();
			КонецЕсли;
			//
			Если ЗначениеЗаполнено(Объект.Соглашение) Тогда				
				//
				Форма.Объект.Соглашение = Объект.Соглашение;
				Результат = ЗаполнитьИндивидульноеСоглашениеНаОснованииТипового(Форма.Объект);
				//{ ООО «АСТЭК» Разработчик : Терёхин Дата: 10.05.2013
				// TaskID: PAX-00021
				// Закомментировал следующую строку чтобы не обнулялся подвал заказа (с итогами)
				//ЗаполнитьКомерческоеПоСоглашению(Результат);
				//}
				//
				
			КонецЕсли;	
			
			//
			Если ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
				Форма.Объект.ГрафикОплаты = Объект.ГрафикОплаты;
			КонецЕсли;	
			
			//
			Форма.Объект.ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
			
			//
			Если ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
				Форма.Объект.НалогообложениеНДС = Объект.НалогообложениеНДС;
			КонецЕсли;	
			
			//
			Если ЗначениеЗаполнено(Объект.Менеджер) Тогда
				Форма.Объект.Менеджер = Объект.Менеджер;
			КонецЕсли;
			
			//
			Если ЗначениеЗаполнено(Объект.АК_УсловияПоставки) Тогда
				Форма.Объект.АК_УсловияПоставки = Объект.АК_УсловияПоставки;
			КонецЕсли;
			
			//
			Форма.ОткрытьМодально();
			
			//
			Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
				Объект.Соглашение = Форма.Объект.Ссылка;
			КонецЕсли;	
			
		КонецЕсли;	
	КонецЕсли;	
	
	//--АСТЭК
	
	// Если документ проводится, проверим рассчитанность скидок и корректность графика оплаты по заказу
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(ЭтаФорма, "Товары", "Номенклатура,Характеристика,Количество,Склад,ДатаОтгрузки");
		
		Если ИспользоватьАвтоматическиеСкидкиВПродажах И
			Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
			
			Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			
				ОтветНаВопрос = СкидкиНаценкиКлиент.ПредложитьПользователюРассчитатьСкидки();
				
				Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
					Отказ = Истина;
					Возврат;
				ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
					ПрименитьИзмененияСкидокНаценокНаКлиенте();
				КонецЕсли;
			
			Иначе
				Объект.СкидкиРассчитаны = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению") Или
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОтгрузке") Тогда
			
			Если Не Объект.НеОтгружатьЧастями Тогда
				ЗаполнитьПустыеДатыОтгрузки();
			Иначе
				ЗаполнитьПустуюДатуОтгрузки();
			КонецЕсли;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
			Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
				ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			КонецЦикла;
			
		КонецЕсли;
			
		Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию")
			И ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
			
			СуммаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
			РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
			ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
			ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты);
			
			Если СуммаЗаказано = 0  И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
				
				КоличествоЗаказанныхСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Отменено", Ложь)).Количество();
				
				Если КоличествоЗаказанныхСтрок = 0 И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
					
					РежимДиалога = ?(Объект.Согласован, РежимДиалогаВопрос.Ок, РежимДиалогаВопрос.ОкОтмена);
					ТекстВопроса = ?(Объект.Согласован,
						НСтр("ru='В заказе все строки отменены. Таблица этапов оплаты будет очищена'"),
						НСтр("ru='В заказе все строки отменены. Очистить таблицу этапов оплаты?'"));
						
						
					// АК 3 19 03 2013	
					//ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалога);
					ОтветНаВопрос = КодВозвратаДиалога.Ок;
					
					Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
					
					Объект.ЭтапыГрафикаОплаты.Очистить();
					НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
					
				Иначе
					РежимДиалога = ?(Объект.Согласован, РежимДиалогаВопрос.Ок, РежимДиалогаВопрос.ОкОтмена);
					ТекстВопроса = ?(Объект.Согласован,
						НСтр("ru='Сумма заказанных строк нулевая. Таблица этапов оплаты будет очищена'"),
						НСтр("ru='Сумма заказанных строк нулевая. Очистить таблицу этапов оплаты?'")
					);
					//АК ИГОРЬ 19 03 2013
					//ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалога);
					ОтветНаВопрос = КодВозвратаДиалога.Ок;

					Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
						Отказ = Истина;
						Возврат;
					КонецЕсли;
					
					Объект.ЭтапыГрафикаОплаты.Очистить();
					НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
					
				КонецЕсли;
				
			ИначеЕсли СуммаЗаказано <> СуммаЭтаповОплаты Тогда
				
				Если Объект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
					
					Если ГрафикСоглашенияЗаполнен Тогда
						ТекстВопроса = НСтр("ru='Отсутствуют этапы графика оплаты. Заполнить этапы в соответствии с соглашением?'");
					ИначеЕсли ГрафикЗаполнен Тогда
						ТекстВопроса = НСтр("ru='Отсутствуют этапы графика оплаты. Заполнить этапы в соответствии с графиком?'");
					Иначе
						Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаОтгрузки) Тогда
							ТекстВопроса = НСтр("ru='Отсутствуют этапы графика оплаты. Добавить один этап ""%ВариантОплаты%"" с оплатой 100% на дату планируемой отгрузки?'");
						Иначе
							ТекстВопроса = НСтр("ru='Отсутствуют этапы графика оплаты. Добавить один этап ""%ВариантОплаты%"" с оплатой 100%?'");
						КонецЕсли;
						ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВариантОплаты%", ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки"));
					КонецЕсли;
					// АК ИГОРЬ 19 03 2013
					ОтветНаВопрос = КодВозвратаДиалога.Ок;
//					ОтветНаВопрос = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ОкОтмена);
					
					Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
						Отказ = Истина;
						Возврат;
					Иначе 
						Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
							ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
						Иначе
							ЦенообразованиеКлиент.ДобавитьЭтапОплатыПоУмолчанию(
								Объект.ЭтапыГрафикаОплаты,
								Объект.ЖелаемаяДатаОтгрузки,
								СуммаЗаказано,
								ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки")
							);
						КонецЕсли;
						ЦенообразованиеКлиент.ОповеститьОбОкончанииЗаполненияЭтаповГрафикаОплаты();
						НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
					КонецЕсли;
						
				Иначе
					
					РежимДиалога = ?(Объект.Согласован, РежимДиалогаВопрос.Ок, РежимДиалогаВопрос.ОкОтмена);
					ТекстВопроса = ?(Объект.Согласован,
						НСтр("ru='Сумма этапов графика оплаты не совпадает с суммой заказанных строк. Сумма этапов оплаты будет скорректирована.'"),
						НСтр("ru='Сумма этапов графика оплаты не совпадает с суммой заказанных строк. Скорректировать сумму этапов оплаты?'"));
					// АК ИГОРЬ 19 03 2013
					ОтветНаВопрос = КодВозвратаДиалога.Ок;
//					ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалога);
					
					Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
						Отказ = Истина;
						Возврат;
					Иначе
						ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, СуммаЗаказано);
						НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
		// Предложим пользователю скорректировать желаемую дату отгрузки
		
		Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаОтгрузки) Тогда
			
			МаксДатаАванса = ПродажиКлиент.МаксимальнаяДатаАванса(Объект.ЭтапыГрафикаОплаты);
			ПродажиКлиент.СкорректироватьЖелаемуюДатуОтгрузки(Объект.ЖелаемаяДатаОтгрузки, МаксДатаАванса, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	 //  ПрикрепитьДоговорБП(Объект.ссылка);
	
КонецПроцедуры

   &НаСервере
Процедура  ПрикрепитьДоговорБП(СсылкаНаЗаказ)
	
	Отказ = ЛОЖЬ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		 "ВЫБРАТЬ
		 |	ЗаказКлиентаПрисоединенныеФайлы.Ссылка,
		 |	ЗаказКлиента.Проведен,
		 |	ЗаказКлиента.Партнер
		 |ИЗ
		 |	Справочник.ЗаказКлиентаПрисоединенныеФайлы КАК ЗаказКлиентаПрисоединенныеФайлы
		 |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		 |		ПО ЗаказКлиентаПрисоединенныеФайлы.ВладелецФайла = ЗаказКлиента.Ссылка
		 |ГДЕ
		 |	ЗаказКлиентаПрисоединенныеФайлы.ВладелецФайла = &Ссылка
		 |	И ЗаказКлиентаПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";

		Запрос.УстановитьПараметр("Ссылка", СсылкаНаЗаказ);

	Результат = Запрос.Выполнить().Выгрузить();
	
	Если  СсылкаНаЗаказ.партнер = константы.АК_ДокторМебель.Получить() Тогда
		ДоговорПрикреплен = ИСТИНА;		
	иначеЕсли Результат.Количество()=0  Тогда
		ДоговорПрикреплен = ЛОЖЬ; 
	иначеЕсли Результат.Количество()>0  Тогда		
		Для каждого Строка из Результат  Цикл
			Если НАйти(СТРОКА(строка.ссылка),"оговор") <> 0  ТОГДА
				ДоговорПрикреплен = Истина;
			КонецЕсли;			
		КонецЦикла;
			
	КонецЕсли;
	       		   
	Если ДоговорПрикреплен = Ложь Тогда
		
		БП_ПрикрепитьДоговор = БизнесПроцессы.Задание.СоздатьБизнесПроцесс();
		БП_ПрикрепитьДоговор.Автор = ПараметрыСеанса.ТекущийПользователь; 		
		БП_ПрикрепитьДоговор.Дата = ТекущаяДата();
		БП_ПрикрепитьДоговор.Исполнитель = Объект.Ссылка.Менеджер;
		БП_ПрикрепитьДоговор.Проверяющий = ПараметрыСеанса.ТекущийПользователь;
		БП_ПрикрепитьДоговор.Предмет =  Объект.Ссылка;
		БП_ПрикрепитьДоговор.Наименование = "Прикрепить договор к заказу клиента № " + Объект.Ссылка.номер + " от " +  Строка(Объект.Ссылка.дата) ;
		БП_ПрикрепитьДоговор.СрокИсполнения = ТекущаяДата() + 2592000;  // 30 дней на выполнение задачи
		
		ПроверкаНовогоБП = новый Запрос;
		ПроверкаНовогоБП.текст = 
		"ВЫБРАТЬ
		|	Задание.Ссылка,
		|	Задание.Номер КАК Номер,
		|	Задание.ПометкаУдаления,
		|	Задание.наименование,
		|	Задание.Завершен
		|ИЗ
		|	БизнесПроцесс.Задание КАК Задание
		|ГДЕ
		|	Задание.Завершен = ЛОЖЬ
		|	И Задание.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номер";
		
		
		результат = ПроверкаНовогоБП.Выполнить().Выгрузить();
		
		
		НовыйБП = Истина;
		Для каждого Строка из  результат цикл
			Если Строка.наименование =БП_ПрикрепитьДоговор.Наименование Тогда
				НовыйБП = Ложь;					
			КонецЕсли;	
		КонецЦикла;
		
		Если НовыйБП = Истина Тогда
			БП_ПрикрепитьДоговор.Записать();
			БП_ПрикрепитьДоговор.Старт();			
			Сообщить("Была создана задача: прикрепить договор");	
/////////////////////////// Отправка письма 
// Письмо Для ЗАМ РУКОВОДИТЕЛЯ

ПараметрыПисьма = новый Структура;

ПолучательПисьма = "";
СтандартныеПодсистемыПереопределяемый.ПолучитьАдресЭлектроннойПочты(Константы.акЗамРуководителя.получить(), ПолучательПисьма);
ПараметрыПисьма.Вставить("Кому",ПолучательПисьма);


ТекстТелаПисьма = ("Создана задача: прикрепить договор к заказу клиента № " + Объект.Ссылка.номер + " от " +  Строка(Объект.Ссылка.дата));
ПараметрыПисьма.Вставить("Тело", ТекстТелаПисьма);


ТекстТемыПисьма = "Создана задача: прикрепить договор к заказу клиента № " + Объект.Ссылка.номер + " от " +  Строка(Объект.Ссылка.дата);
ПараметрыПисьма.Вставить("Тема", ТекстТемыПисьма);

Попытка
	
	РаботаСПочтовымиСообщениями.ОтправитьСообщение(
	РаботаСПочтовымиСообщениями.ПолучитьСистемнуюУчетнуюЗапись(), ПараметрыПисьма);
	
Исключение
	Сообщить("Письмо НЕ отправлено");
КонецПопытки;




////////////////////////////////		
		КонецЕсли;		
	КонецЕсли;		   
КонецПроцедуры



&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыЗаказовКлиентов.ПустаяСсылка();
	КонецЕсли;
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	// Подсистема "ЭлектронныеДокументы"
	УстановитьТекстСостоянияЭДНаСервере();
	
	ОбновитьСостояниеСервер();
	ЗаполнитьПорядокРасчетов();
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Сделка", Объект.Сделка);
	Оповестить("Запись_ЗаказКлиента", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗачтенаОплата" И Параметр = Объект.Ссылка Тогда
		ОбновитьСостояниеСервер();
		ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
		ОбновитьОграничениеЗадолженности();
	КонецЕсли;
	
	// Подсистема "ЭлектронныеДокументы"
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "СчитанаКартаЛояльности"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		СчитанаКартаЛояльности(Параметр.КартаЛояльности);
	КонецЕсли;
	
	Если ИмяСобытия = "ПолученыСообщения"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		ПолученыСообщения(Параметр.Сообщения);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	//АК
	УстановитьВидимостьШапки();
	
	// АК
	
	ЭтаФорма.ТолькоПросмотр = АК_БизнесПроцессыСервер.ЗаказНеДоступенДляРедактирования(Объект.Ссылка);

	
КонецПроцедуры




&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	СкрыватьОтмененныеСтроки =  Настройки.Получить("СкрыватьОтмененныеСтроки");
	
	Если СкрыватьОтмененныеСтроки Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ТоварыСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтроки;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Настройки.Удалить("Объект.НеОтгружатьЧастями");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем ВыполняемаяОперация;

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ВыполняемаяОперация", ВыполняемаяОперация) Тогда

		Если ВРег(ВыполняемаяОперация) = ВРег("СостояниеОбеспеченияЗаказа") Тогда

			ОбработкаВыбораСостояниеОбеспеченияЗаказаНаСервере(ВыбранноеЗначение.АдресВХранилище);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			Модифицированность = Истина;

		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаказКлиента.Форма.РеквизитыПечати" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ИначеЕсли ИсточникВыбора.Имяформы = "Справочник.Файлы.Форма.ФормаСпискаПрисоединенныхФайлов" Тогда
		           а = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.Соглашение, Объект.Дата);

КонецПроцедуры

&НаКлиенте
Процедура ЖелаемаяДатаОтгрузкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	МаксДатаАванса = ПродажиКлиент.МаксимальнаяДатаАванса(Объект.ЭтапыГрафикаОплаты);
	
	Если ЗначениеЗаполнено(МаксДатаАванса) Тогда
		
		ПредставлениеМаксДатаАванса = НСтр("ru='%МаксДатаАванса%'");
		ПредставлениеМаксДатаАванса = СтрЗаменить(ПредставлениеМаксДатаАванса, "%МаксДатаАванса%", Формат(МаксДатаАванса,"ДЛФ=DD"));
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(МаксДатаАванса, ПредставлениеМаксДатаАванса);
		
		ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент);
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			Объект.ЖелаемаяДатаОтгрузки = ВыбранноеЗначение.Значение;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииСервер()
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет, Объект.БанковскийСчетКонтрагента);
	
	ЗаполнитьПорядокРасчетов();
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы,Объект);
		Возврат;
	КонецЕсли;

	ПриИзмененииПартнераСервер();
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.Соглашение) И ИспользоватьСоглашенияСКлиентами Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
	
	Если Не ПартнерИзменился Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(Элементы,Объект);
		
	Иначе
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
		Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.ГруппаДоговор.Доступность, Элементы.ГруппаДоговор.Видимость, Объект.Договор);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено (Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	ПриИзмененииСоглашенияСервер();
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();

КонецПроцедуры

&НаКлиенте
Процедура ГрафикОплатыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
		ПриИзмененииГрафикаОплатыСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Объект.Согласован И 
		Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Согласован")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОтгрузке")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Закрыт") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению") Или
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОтгрузке") Или
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Закрыт") Тогда
			
			Если Не Объект.НеОтгружатьЧастями Тогда
				ЗаполнитьПустыеДатыОтгрузки();
			Иначе
				ЗаполнитьПустуюДатуОтгрузки();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	СтатусПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		ПриИзмененииВалютыСервер(
			Объект.Валюта,
			ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект,ВалютаДокумента)
		);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	ПриИзмененииФормыОплатыСервер();
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	ПересчитыватьЦены = ЦенообразованиеКлиент.ЗадатьВопросПересчетаЦеныПриИзмененииДаты(Объект);
	
	ЦеныРассчитаны = ДатаПриИзмененииСервер(ПересчитыватьЦены);
	
	Если ПересчитыватьЦены Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ПриИзмененииСкладаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОбновляемыеРеквизиты = Новый Структура("Подразделение");
	ОбновитьЗависимыеРеквизитыФормы(ОбновляемыеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ПриИзмененииХозяйственнойОперацииСервер();
	Иначе
		ЗаполнитьУсловияПродаж();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПродажиКлиент.ОбработкаВыбораДоговораКонтрагента(ВыбранноеЗначение, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КартыЛояльностиКлиент.НачалоВыбораКартыЛояльности(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СчитанаКартаЛояльности(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	ЗаполнитьДатуОтгрузкиСервер(Объект.ДатаОтгрузки, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтгружатьЧастямиПриИзменении(Элемент)
	
	НеОтгружатьЧастямиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОстатокДопустимогоКредитаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеПоСуммеПродажи = Новый Структура("СуммаВзаиморасчетов", ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект.Товары, Объект.ЦенаВключаетНДС));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", Объект.Ссылка);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",     Истина);
	ПараметрыФормы.Вставить("Отбор",                       Новый Структура("Договор", Объект.Договор));
	ПараметрыФормы.Вставить("Договор",                     Объект.Договор);
	ПараметрыФормы.Вставить("ДанныеПоСуммеПродажи",        ДанныеПоСуммеПродажи);
	
	ОткрытьФорму("Отчет.ПричиныЗапретаОтгрузки.Форма",
		ПараметрыФормы,
		,
		"Договор=" + Объект.Договор
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыКлиент.ОткрытьАктуальныйЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьМногооборотнуюТаруПриИзменении(Элемент)
	
	ВернутьМногооборотнуюТаруПриИзмененииСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ, СВЯЗАННЫХ С ДОСТАВКОЙ

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Найти(Элемент.Имя,"АдресДоставкиПолучателя") <> 0 Тогда
		ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(Объект.АдресДоставки,
												Объект.АдресДоставкиЗначенияПолей,
												РедактироватьАдресаДоставкиТолькоВДиалоге,
												АдресаДоставкиТолькоРоссийские);
	Иначе
		ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(Объект.АдресДоставкиПеревозчика,
												Объект.АдресДоставкиПеревозчикаЗначенияПолей,
												РедактироватьАдресаДоставкиТолькоВДиалоге,
												АдресаДоставкиТолькоРоссийские);
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы,Объект,Элемент.Имя,ВыбранноеЗначение);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранноеВремя = РаботаСДиалогамиКлиент.ВыбратьВремя(ЭтаФорма, Элемент, Объект.ВремяДоставкиС);
	Если ВыбранноеВремя <> Неопределено Тогда
		Если ВыбранноеВремя = Дата(1,1,1) Тогда
			Объект.ВремяДоставкиС = Дата(1,1,1,0,0,1);
		Иначе
			Объект.ВремяДоставкиС = ВыбранноеВремя;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиПоНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранноеВремя = РаботаСДиалогамиКлиент.ВыбратьВремя(ЭтаФорма, Элемент, Объект.ВремяДоставкиПо);
	Если ВыбранноеВремя <> Неопределено Тогда
		Если ВыбранноеВремя = Дата(1,1,1) Тогда
			Объект.ВремяДоставкиПо = Дата(1,1,1,0,0,1);
		Иначе
			Объект.ВремяДоставкиПо = ВыбранноеВремя;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.ТоварыСуммаАвтоматическойСкидки Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ Объект.СкидкиРассчитаны Тогда
			Результат = Вопрос(НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
			Если Результат = КодВозвратаДиалога.Нет Тогда
				Возврат;
			Иначе
				
				СтруктураПараметры = Новый Структура;
				СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
				СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
				СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
				СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
				
				СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
				Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
					ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
			РассчитатьСкидкиБезПримененияКОбъекту();
		КонецЕсли;
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
	ИначеЕсли Поле = Элементы.ТоварыСтатусУказанияСерий Тогда
		
		Если Элементы.ТоварыУказатьСерии.Доступность
			И НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
			ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
			
			ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтаФорма);
			
			Если ЗначениеВозврата <> Неопределено Тогда
				ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ПравоНаЧтениеВидаЦены Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И НЕ Объект.Согласован Тогда
				ОчиститьСообщения();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Для редактирования цены необходимо выбрать вид цены ""<произвольная>""'"),
					Объект.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),
				);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
	Если Копирование Тогда
		Элементы.Товары.ТекущиеДанные.УказыватьСерии = Ложь;
	КонецЕсли;
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,
		КэшированныеЗначения,
		ПараметрыУказанияСерий,
		Копирование
	);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено И Объект.НеОтгружатьЧастями Тогда
		ТекущиеДанные.ДатаОтгрузки = Объект.ДатаОтгрузки;
	КонецЕсли;
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если Не Отказ Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент,КэшированныеЗначения,ПараметрыУказанияСерий
		);
		
	КонецЕсли;
	
	ОбновитьЗависимыеРеквизитыФормы();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВариантОбеспеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТКлиент.ЗаполнитьСписокВыбораВариантаОбеспечения(
		Элементы.Товары.ТекущиеДанные,
		ДанныеВыбора,
		СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияМногострочногоТекста(
		Элемент.ТекстРедактирования,
		Элементы.Товары.ТекущиеДанные.Содержание,
		Модифицированность,
		НСтр("ru='Содержание услуги'")
	);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
     СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	СтруктураДействий.Вставить("ПроверитьЗаполнитьВариантОбеспечения");
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
    СтруктураДействий.Вставить("ПроверитьНоменклатуруНаСтарую");//Чечин Петр
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ОбновитьЗависимыеРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);

	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.Отменено Тогда
		ТекущаяСтрока.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьЗависимыеРеквизитыФормы();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию")));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	
	ОбновляемыеРеквизиты = Новый Структура("Склад");
	ОбновитьЗависимыеРеквизитыФормы(ОбновляемыеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура(
		"ГруппаСкладов, ТекущийЭлемент, Номенклатура, Характеристика, ВыборВЗаказ",
		Объект.Склад,
		ТекущиеДанные.Склад,
		ТекущиеДанные.Номенклатура,
		ТекущиеДанные.Характеристика,
		Истина
	);
	ВыбранноеЗначение = ОткрытьФормуМодально(
		"Справочник.Склады.Форма.ФормаВыбораПоОстаткам",
		СтруктураПараметров,
		Элемент
	);
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущиеДанные.Склад = ВыбранноеЗначение.Склад;
		ТекущиеДанные.ДатаОтгрузки = ВыбранноеЗначение.ДатаОтгрузки;
		ОбновляемыеРеквизиты = Новый Структура("Склад");
		ОбновитьЗависимыеРеквизитыФормы(ОбновляемыеРеквизиты);
		Модифицированность = Истина;
	КонецЕсли;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура АвтоТест_ЗаполнитьЦеныПоСоглашению(Команда) Экспорт

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", "Товары") Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", "Товары") Тогда
		
		ВидЦен = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, Истина);
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
			
		КонецЕсли;
			
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", "Товары") Тогда
		
		ВидЦен = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, Истина);
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
			
		КонецЕсли;
			
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузкиДляВсехСтрок(Команда)

	ЗаполнитьДатуОтгрузки();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузкиДляВыделенныхСтрок(Команда)

	Если Элементы.Товары.ВыделенныеСтроки.Количество() > 0 Тогда
		ЗаполнитьДатуОтгрузки(Элементы.Товары.ВыделенныеСтроки);
	Иначе
		ТекстПредупреждения = НСтр("ru='В документе не выбраны строки для заполнения. Дата отгрузки не будет заполнена.'");
		Предупреждение(ТекстПредупреждения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтроки(Команда)
	
	Если Не ПродажиКлиент.НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(Объект.Товары, "Товары", Элементы.Товары.ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;

	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	Если ИспользоватьПричиныОтменыЗаказовКлиентов Тогда
		ПричинаОтмены = ОткрытьФормуМодально("Справочник.ПричиныОтменыЗаказовКлиентов.ФормаВыбора");
		Если Не ЗначениеЗаполнено(ПричинаОтмены) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	ПродажиКлиент.ОтменитьВыделенныеСтроки(
		Объект.Товары,
		Элементы.Товары.ВыделенныеСтроки,
		ПричинаОтмены,
		СтруктураДействий
	);
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	ПродажиКлиент.ОповеститьОбОтменеВыделенныхСтрок(ПричинаОтмены);
	ОбновитьЗависимыеРеквизитыФормы();
	
	Если ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		ЗаполнитьСтатусыУказанияСерий();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНепоставленныеСтроки(Команда)

	Если Не ПродажиКлиент.НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(Объект.Товары, "Товары", Элементы.Товары.ВыделенныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьОстатки = Истина;
	
	Если Не Объект.Проведен Тогда
		
		ОтветНаВопрос = Вопрос(НСтр("ru='Заказ не проведен, отгрузка по заказу не запланирована. Будут отменены все строки. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		ПроверятьОстатки = Ложь;
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.НеСогласован")
		Или СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Согласован")
		Или СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению") Тогда
		
		ТекстВопроса = НСтр("ru='Заказ проведен в статусе %Статус%, отгрузка по заказу не запланирована. Будут отменены все строки. Продолжить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Статус%", СтатусДокумента);

		ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		ПроверятьОстатки = Ложь;
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка");
	Если ИспользоватьПричиныОтменыЗаказовКлиентов Тогда
		ПричинаОтмены = ОткрытьФормуМодально("Справочник.ПричиныОтменыЗаказовКлиентов.ФормаВыбора");
		Если Не ЗначениеЗаполнено(ПричинаОтмены) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоСтрокОтменено = ОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены, ПроверятьОстатки);
	
	Если КоличествоСтрокОтменено = 0 Тогда
		
		ПродажиКлиент.ОповеститьОбОтменеНепоставленныхСтрок(ПричинаОтмены, КоличествоСтрокОтменено, ПроверятьОстатки);
		
	Иначе
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		ПродажиКлиент.ОповеститьОбОтменеНепоставленныхСтрок(ПричинаОтмены, КоличествоСтрокОтменено, ПроверятьОстатки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьОтмененныеСтроки(Команда)
	
	СкрыватьОтмененныеСтроки = Не СкрыватьОтмененныеСтроки;
	
	Если СкрыватьОтмененныеСтроки Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ТоварыСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Соглашение)
		Или Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "заказ клиента");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение",               Объект.Соглашение);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",          Объект.ЦенаВключаетНДС);
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);	
	КонецЕсли;
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                      Истина);
	ПараметрыФормы.Вставить("СкрыватьПодакцизныеТовары",               Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("ОтображатьФлагСкрыватьПодакцизныеТовары", Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("Склад",                                   Объект.Склад);
	ПараметрыФормы.Вставить("Валюта",                                  Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок",                               ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                    Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                Объект.Ссылка);
	
	Если Не Объект.Соглашение.Пустая() Тогда
		СегментНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "СегментНоменклатуры");
		ПараметрыФормы.Вставить("СегментНоменклатуры", СегментНоменклатуры);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		Результат = Вопрос(НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
		Если Результат = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			
			СтруктураПараметры = Новый Структура;
			СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
			СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
			СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
			СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
			
			СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
			Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
				ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиБезПримененияКОбъекту();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	АдресВХранилище = ВыполнитьПредварительныйРасчетСкидокНаСервере();
	ВозвращенноеЗначение = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(АдресВХранилище);
	Если ВозвращенноеЗначение <> Неопределено Тогда
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Скидки (наценки)'"),
			,
			НСтр("ru = 'Скидки (наценки) рассчитаны'"),
			БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	
	СуммаРучнойСкидкиНаценки = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта
	);
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки,, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина);
	
	СуммаРучнойСкидкиНаценки = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта
	);

	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить()
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбеспечения(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заказ", Объект.Ссылка);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("ЖелаемаяДатаОтгрузки", Объект.ЖелаемаяДатаОтгрузки);
	ПараметрыФормы.Вставить("АдресТовары", ПоместитьТоварыВоВременноеХранилище());
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("НеОтгружатьЧастями", Объект.НеОтгружатьЧастями);
	
	ОткрытьФорму("Обработка.СостояниеОбеспечения.Форма.СостояниеОбеспеченияЗаказа", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВВыделенныхСтроках(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(Объект, Объект.Товары, "Товары", ВыделенныеСтроки) Тогда
		МассивОтбора = Новый Массив();
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"));
		СтруктураОтбора = Новый Структура("ВыборГруппы, ЭтоГруппа", МассивОтбора, Ложь);
		СтруктураПараметров = Новый Структура("Отбор,ГруппаСкладов", СтруктураОтбора, Объект.Склад);
		ВыбранныйСклад = ОткрытьФормуМодально("Справочник.Склады.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
		Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
			ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад);
			СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(ВыбранныйСклад, ЗаполненоСтрок, ВыделенныеСтроки.Количество());
			ОбновляемыеРеквизиты = Новый Структура("Склад");
			ОбновитьЗависимыеРеквизитыФормы(ОбновляемыеРеквизиты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы);
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтаФорма);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьУказаниеСерий(Команда)
	
	Если НоменклатураКлиент.ПроверитьВозможностьОтменыУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий);
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.УказыватьСерии = Ложь;
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруСообщений()
	
	Возврат СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСообщения(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуСообщений(ПолучитьСтруктуруСообщений(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьКартуЛояльности(Команда)
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.КартыЛояльности.Форма.СчитываниеКартыЛояльности",
		Новый Структура("Партнер", Объект.Партнер),
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечати(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                  Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя", Объект.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя",  Объект.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",      Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("Грузоотправитель",               Объект.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",                Объект.Грузополучатель);
	СтруктураПараметров.Вставить("Партнер",                        Объект.Партнер);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация",          Объект.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("Контрагент",                     Объект.Контрагент);
	СтруктураПараметров.Вставить("Организация",                    Объект.Организация);
	СтруктураПараметров.Вставить("Дата",                           Объект.Дата);
	СтруктураПараметров.Вставить("Руководитель",                   Объект.Руководитель);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",               Объект.ГлавныйБухгалтер);
	СтруктураПараметров.Вставить("НазначениеПлатежа",		       Объект.НазначениеПлатежа);
	СтруктураПараметров.Вставить("НомерЗаказа", ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Объект.Номер));
	СтруктураПараметров.Вставить("ДатаЗаказа", 					   Формат(Объект.Дата, "ДФ=dd.MM.yyyy"));
	
	ОткрытьФормуМодально("Документ.ЗаказКлиента.Форма.РеквизитыПечати", СтруктураПараметров, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДатуОтгрузки(Команда)
	
	НеОтгружатьЧастямиПриИзмененииСервер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтатусДокумента(Команда)
	
	Перем РезультатыПроверки;
	
	ОчиститьСообщения();
	
	ПроверкаЗаполненияИРасчетСтатуса(КэшированныеЗначения, РезультатыПроверки);
	
	ТребуетсяРассчитатьСтатус = Ложь;
	
	Если НЕ РезультатыПроверки.СтатусРассчитан И НЕ РезультатыПроверки.ВопросТребованияРасчета = Неопределено Тогда
		
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить("РассчитатьИЗаполнить", НСтр("ru = 'Рассчитать и заполнить'"));
		КнопкиВопроса.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		
		Ответ = Вопрос(РезультатыПроверки.ВопросТребованияРасчета, 
						КнопкиВопроса, , 
						КнопкиВопроса[1].Значение,
						НСтр("ru= 'Автоматический расчет статуса'"));
		
		Если Ответ = КнопкиВопроса[0].Значение Тогда
			ТребуетсяРассчитатьСтатус = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТребуетсяРассчитатьСтатус Тогда
 		РассчитатьСтатусДокументаСервер(КэшированныеЗначения, РезультатыПроверки.СтатусРассчитан);
	КонецЕсли;
	
	ОповеститьОбОкончанииРасчетаСтатуса(РезультатыПроверки.СтатусРассчитан);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)

	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		"Номенклатура,Характеристика,Количество,Склад,ДатаОтгрузки");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ЗаполнитьУсловияПродаж();
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	ПриИзмененииСкладаСервер();
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	//АК если не добавить эти 2 процедуры то сбрасываются доп реквизиты
	ОбновитьПризнакБезВозвратнойТары();
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
	
	УстановитьТекущуюСтраницуФормаОплаты();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.ГруппаДоговор.Доступность, Элементы.ГруппаДоговор.Видимость, Объект.Договор);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер("Партнер");
	
	ЗаполнитьПорядокРасчетов();
	ОбновитьОграничениеЗадолженности();
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоглашенияСервер()
	
	ГрафикОплаты = Объект.ГрафикОплаты;

	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоCоглашению();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
	ВалютаДокумента = Объект.Валюта;
	ПриИзмененииХозяйственнойОперацииСервер(Ложь);
	ПриИзмененииСкладаСервер();
	
	ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
	ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты) И ГрафикОплаты <> Объект.ГрафикОплаты;
	
	Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
		ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
	ИначеЕсли Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
		ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, СуммаЗаказано);
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	//АК если не добавить эти 2 процедуры то сбрасываются доп реквизиты
	ОбновитьПризнакБезВозвратнойТары();
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
	
	УстановитьТекущуюСтраницуФормаОплаты();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.ГруппаДоговор.Доступность, Элементы.ГруппаДоговор.Видимость, Объект.Договор);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	ЗаполнитьПорядокРасчетов();
	ОбновитьОграничениеЗадолженности();
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииГрафикаОплатыСервер()
	
	ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
	ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты);
	
	Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
		ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Истина);
	КонецЕсли;
	
	Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, , Объект.БанковскийСчет);
	Объект.Касса          = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплаты, Объект.Касса);
	УстановитьТекущуюСтраницуФормаОплаты();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта, ПересчитатьСуммы = Истина)
	
	ЗаполнитьДоговорПоУмолчанию();
	
	Если ПересчитатьСуммы Тогда
		СтараяВалюта                = ВалютаДокумента;
		ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
		СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
		
		Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.Товары,
			Объект.ЦенаВключаетНДС,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты,
			Истина,
			Истина
		);
		
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
		Ценообразование.РаспределитьСуммуПоЭтапамОплаты(Объект, СуммаЗаказано);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФормыОплатыСервер()
	
	УстановитьТекущуюСтраницуФормаОплаты();
	
	Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, , Объект.БанковскийСчет);
	Объект.Касса          = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплаты, Объект.Касса);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.ГруппаДоговор.Доступность, Элементы.ГруппаДоговор.Видимость, Объект.Договор);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда
			Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
				Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, , Объект.БанковскийСчет);
			КонецЕсли;
			Объект.Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплаты, Объект.Касса);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьБанковскийСчетИКассуПоОрганизации(Объект.Организация);
 	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаСервер()
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументоПродажи(Объект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Товары, Ложь);
	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	ОбновляемыеРеквизиты = Новый Структура("Склад");
	ОбновитьЗависимыеРеквизитыФормыСервер(ОбновляемыеРеквизиты);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказКлиента));
	УстановитьВидимостьЭлементовСерий();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииСервер()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказКлиента));
	УстановитьВидимостьЭлементовСерий();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер(ВызовПоКоманде=Истина)
	
	Если ВызовПоКоманде Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		
		Если (ИспользоватьРучныеСкидкиВПродажах Или ИспользоватьАвтоматическиеСкидкиВПродажах)Тогда
			СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары", Истина);
			СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения, Ложь);
		КонецЕсли;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		КонецЕсли; 
		
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	УстановитьВидимостьЭлементовПоОперацииСервер();
	ЗаполнитьПорядокРасчетов();
	
КонецПроцедуры

&НаСервере 
Процедура НеОтгружатьЧастямиПриИзмененииСервер(УчитыватьСостояниеОбеспечения = Ложь)
	
	// Вычислим максимальную дату отгрузки и приведем к ней ТЧ
	Если Объект.НеОтгружатьЧастями Тогда
		ДокументПродажи = РеквизитФормыВЗначение("Объект");
		ДокументПродажи.РассчитатьДатуОтгрузки(УчитыватьСостояниеОбеспечения);
		ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
		
		ЗаполнитьДатуОтгрузкиСервер(Объект.ДатаОтгрузки, Неопределено);
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.Товары,
			Новый Структура(
				"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
				Новый Структура("Номенклатура", "ТипНоменклатуры"),
				Новый Структура("Номенклатура", "ВариантОформленияПродажи")

				)
				);
			//АК если не добавить эти 2 процедуры то сбрасываются доп реквизиты
			ОбновитьПризнакБезВозвратнойТары();
			ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
				
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	
КонецПроцедуры

&НаСервере
Функция ДатаПриИзмененииСервер(ПересчитыватьЦены)
	
	Если ПересчитыватьЦены Тогда
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
	Иначе
		ЦеныРассчитаны = Ложь;
	КонецЕсли;

	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Ценообразование и скидки

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер()
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			Объект.Соглашение,
			"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
		),
		СтруктураДействий);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, ВидЦены, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			ВидЦен,
			"Цена, ВидЦены"
		),
		СтруктураДействий);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, ВидЦены, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			ВидЦен,
			"Цена, ВидЦены"
		),
		СтруктураДействий
	);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, ВзятьИзВременногоХранилища = Ложь)
	
	Если ВзятьИзВременногоХранилища Тогда
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		СкидкиНаценкиСервер.ПрименитьРезультатРасчета(Объект, ПримененныеСкидки);
	Иначе
		ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;

	Объект.СкидкиРассчитаны = Истина;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	СтруктураСообщений = СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки = Неопределено, АдресВоВременномХранилище)
	
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, Истина, Ложь, Истина,, ВыделенныеСтроки, АдресВоВременномХранилище);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияСкидокНаценокНаКлиенте()
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(Неопределено, Истина);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32
	);
	
КонецПроцедуры

&НаСервере
Процедура ПолученыСообщения(Сообщения)
	
	СкидкиНаценкиСервер.СохранитьОтработанныеСообщения(Объект, Сообщения);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
КонецПроцедуры

&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Товары.Итог("СуммаАвтоматическойСкидкиБезВозвратнойТары") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].НапомнитьПозже <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].НапомнитьПозже Тогда
				СкидкиИзменились = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подборы и обработка проверки количества

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, Упаковка, Склад, ДатаОтгрузки, ВидЦены, Цена, КоличествоУпаковок, СрокПоставки, ПроцентРучнойСкидки");
		
		Если Объект.НеОтгружатьЧастями Тогда
			ТекущаяСтрока.ДатаОтгрузки = Объект.ДатаОтгрузки;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьНоменклатуруНаСтарую");//Чечин Петр
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	//АК если не добавить эти 2 процедуры то сбрасываются доп реквизиты
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	ОбновитьЗависимыеРеквизитыФормыСервер();
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Соглашение"" не заполнено'"), Объект.Ссылка, "Объект.Соглашение",,Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ИзменятьКоличество = Не Объект.Согласован;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками,Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ИзменятьКоличество Тогда
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	КонецЕсли;
		
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерий()
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ТоварыСтатусУказанияСерий.Видимость   = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость          = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыОтменитьУказаниеСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	Элементы.ТоварыКонтекстноеМенюУказатьСерии.Видимость          = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыКонтекстноеМенюОтменитьУказаниеСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Автоматический расчет статуса заказа

&НаСервере 
Процедура ПроверкаЗаполненияИРасчетСтатуса(КэшированныеЗначения, РезультатПроверки)
	
	РезультатПроверки = Новый Структура("СтатусРассчитан, ВопросТребованияРасчета", Ложь, Неопределено);
	
	ТекстВопроса = "Для автоматического расчета статуса требуется:" + Символы.ПС;
	ЕстьТребованияРасчета = Ложь;
	// Проверим необходимые для расчета статуса данные
	
	// Проверим скидки и наценки
	Если ИспользоватьАвтоматическиеСкидкиВПродажах И
		Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") И
		Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
		
		ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Рассчитать автоматические скидки (наценки).'");
		
		ЕстьТребованияРасчета = Истина;
		
	КонецЕсли;
	
	// Проверим даты отгрузки
	Если Не (Объект.Склад.Пустая() 
		Или Объект.Товары.Количество() = 0)
		И ПродажиВызовСервера.ДатаОтгрузкиПустая(Объект, "Товары") Тогда
		
		Если Объект.НеОтгружатьЧастями Тогда
			ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Заполнить дату отгрузки.'");
		Иначе
			ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Заполнить даты отгрузки товаров.'");
		КонецЕсли;
		
		ЕстьТребованияРасчета = Истина;
		
	КонецЕсли;
	
	// Проверим этапы оплаты
	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию")
		И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		
		СуммаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
		
		// Очистим если все строки отменены или сумма нулевая
		Если СуммаЗаказано = 0  И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			КоличествоЗаказанныхСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Отменено", Ложь)).Количество();
			
			Если КоличествоЗаказанныхСтрок = 0 И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
				ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Очистить таблицу этапов оплаты, так как в заказе все строки отменены.'");
				
			Иначе
				ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Очистить таблицу этапов оплаты, так как сумма заказанных строк нулевая.'");
				
			КонецЕсли;
			
			ЕстьТребованияРасчета = Истина;
		
		ИначеЕсли СуммаЗаказано <> СуммаЭтаповОплаты Тогда
			
			Если Объект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
				
				ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
				ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты);
				
				Если ГрафикСоглашенияЗаполнен Тогда
					ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Заполнить этапы оплаты в соответствии с соглашением.'");
				ИначеЕсли ГрафикЗаполнен Тогда
					ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Заполнить этапы оплаты в соответствии с графиком оплаты.'");
				Иначе
					Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаОтгрузки) Тогда
						ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru='Заполнить этапы оплаты. Будет добавлен один этап ""%ВариантОплаты%"" с оплатой 100% на дату планируемой отгрузки.'");
						
					Иначе
						ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru='Заполнить этапы оплаты. Будет добавлен один этап ""%ВариантОплаты%"" с оплатой 100%.'");
						
					КонецЕсли;
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВариантОплаты%", ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки"));
				КонецЕсли;
				
			Иначе
				
				ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru='Скорректировать суммы этапов оплаты, так как они не совпадают с суммой заказанных строк.'");
				
			КонецЕсли;
			
			ЕстьТребованияРасчета = Истина;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьТребованияРасчета Тогда
		РезультатПроверки.ВопросТребованияРасчета = ТекстВопроса;
		
	Иначе
		РассчитатьСтатусДокументаСервер(КэшированныеЗначения, РезультатПроверки.СтатусРассчитан);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура РассчитатьСтатусДокументаСервер(КэшированныеЗначения, СтатусРассчитан)
	
	СтатусДоРасчета = Объект.Статус;
	
	ЗаполнитьПередРасчетомМаксимальногоСтатуса(КэшированныеЗначения);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("ЗаказКлиента", Объект.Ссылка);
	ПараметрыРасчета.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	ПараметрыРасчета.Вставить("Проведен", Объект.Проведен);
	ПараметрыРасчета.Вставить("Статус", Объект.Статус);
	ПараметрыРасчета.Вставить("СуммаАвансаДоОбеспечения", СуммаАвансаДоОбеспечения);
	ПараметрыРасчета.Вставить("СуммаПредоплатыДоОтгрузки", СуммаПредоплатыДоОтгрузки);
	ПараметрыРасчета.Вставить("СуммаДокумента", СуммаЗаказано);
	ПараметрыРасчета.Вставить("Договор", Объект.Договор);
	ПараметрыРасчета.Вставить("ПорядокРасчетов", ПорядокРасчетов);
	ПараметрыРасчета.Вставить("Склад", Объект.Склад);
	ПараметрыРасчета.Вставить("ЖелаемаяДатаОтгрузки", Объект.ЖелаемаяДатаОтгрузки);
	ПараметрыРасчета.Вставить("АдресТовары", ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить()));
	ПараметрыРасчета.Вставить("ЭтапыГрафикаОплаты", Объект.ЭтапыГрафикаОплаты);
	ПараметрыРасчета.Вставить("ОтборПоСостояниюНаличия", Перечисления.СостоянияНаличия.Любое);
	ПараметрыРасчета.Вставить("НеОтгружатьЧастями", Объект.НеОтгружатьЧастями);
	ПараметрыРасчета.Вставить("ВсеСтрокиОтменены", ВсеСтрокиОтменены);
	
	Если Не ДокументЗаполненКорректно() Тогда
		Если Объект.Статус.Пустая() Тогда
			Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
			ТекстСообщения = НСтр("ru = 'Максимально возможный статус - """ + Объект.Статус + """, так как документ заполнен некорректно'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Статус не может быть рассчитан, так как документ заполнен некорректно'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		Возврат;
		
	КонецЕсли;
	
	Объект.Статус = Документы.ЗаказКлиента.МаксимальныйСтатусЗаказаКлиента(ПараметрыРасчета, КэшированныеЗначения);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")

		)
	);
	//АК если не добавить эти 2 процедуры то сбрасываются доп реквизиты
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	СтатусПриИзмененииСервер();
	
	Если НЕ СтатусДоРасчета = Объект.Статус Тогда
		СтатусРассчитан = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьПередРасчетомМаксимальногоСтатуса(КэшированныеЗначения)
	
	// Заполним необходимые для расчета статуса данные
	
	// Заполним скидки и наценки
	Если ИспользоватьАвтоматическиеСкидкиВПродажах И
		Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") И
		Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		
	КонецЕсли;
	
	// Заполним даты отгрузки
	Если Объект.Склад.Пустая() 
		Или Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПродажиВызовСервера.ДатаОтгрузкиПустая(Объект, "Товары") Тогда
		Если Объект.НеОтгружатьЧастями Тогда
			ДокументПродажи = РеквизитФормыВЗначение("Объект");
			ДокументПродажи.РассчитатьДатуОтгрузки(Истина);
			ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
			
			ЗаполнитьДатуОтгрузкиСервер(Объект.ДатаОтгрузки, Неопределено);
		Иначе
			РассчитатьДатуОтгрузкиСервер();
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		Если ТекущаяСтрока.Отменено Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
	
	// Заполним этапы оплаты
	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию")
		И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		
		СуммаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
		ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты);
		
		// Очистим если все строки отменены или сумма нулевая
		Если СуммаЗаказано = 0  И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Объект.ЭтапыГрафикаОплаты.Очистить();
			
			НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
			
		ИначеЕсли СуммаЗаказано <> СуммаЭтаповОплаты Тогда
			
			// Заполним этапы оплаты, если они не указаны
			Если Объект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
				
				Если Объект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
					
					Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
						ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
					Иначе
						ДокументПродажи = РеквизитФормыВЗначение("Объект");
						ДокументПродажи.ЗаполнитьЭтапыГрафикаОплаты();
						ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
					КонецЕсли;
					
					НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
				Иначе
					
					ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, СуммаЗаказано);
					
					НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
					
				КонецЕсли;
				
				// Перезаполним если сумма заказанных строк не совпадает с суммой по этапам оплаты
			Иначе
				
				ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, СуммаЗаказано);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере 
Функция ДокументЗаполненКорректно()
	
	ЕстьОшибки = Ложь;
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.ЗаказКлиента"));
	УстановитьСоответствиеОбъектаИРеквизитаФормы(ДокументОбъект, "Объект");
	
	ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
	
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ДокументОбъект, ЕстьОшибки);
	
	ДокументОбъект.Статус = Объект.Статус;
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	//АК если не добавить эти 2 процедуры то сбрасываются доп реквизиты
	ОбновитьПризнакБезВозвратнойТары();
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	ОбновитьЗависимыеРеквизитыФормыСервер();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ОтборПоПустым = Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	ИскомыеСтроки = Объект.Товары.НайтиСтроки(ОтборПоПустым);
	
	Если Объект.Соглашение.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Соглашение"" не заполнено'"), ,
			"Объект.Соглашение");
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Если НЕ Объект.Соглашение.Пустая()
		И Объект.Соглашение.ИспользуютсяДоговорыКонтрагентов
		И Объект.Договор.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Договор"" не заполнено'"), ,
			"Объект.Договор");
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указан ни один товар'"), ,
			"Объект.Товары");
		
		ЕстьОшибки = Истина;
		
	ИначеЕсли ИскомыеСтроки.Количество() > 0 Тогда
		Для Каждого ИскомаяСтрока Из ИскомыеСтроки Цикл 
			АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ИскомаяСтрока.НомерСтроки);
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Номенклатура""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки, ,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ИскомаяСтрока.НомерСтроки, "Номенклатура"), "Объект",
				ЕстьОшибки
			);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию")
		И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
		И Объект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		
		Если НЕ ВсеСтрокиОтменены Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнены этапы графика оплаты'"), ,
				"НадписьЭтапыОплаты");
			
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

&НаКлиенте 
Процедура ОповеститьОбОкончанииРасчетаСтатуса(СтатусРассчитан = Истина) Экспорт

	Если СтатусРассчитан Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Статус заказа рассчитан'"),
			,
			НСтр("ru = 'Статус заказа изменен на'") + Символы.НПП + """" + Объект.Статус + """",
			БиблиотекаКартинок.Информация32
		);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Статус заказа не рассчитан'"),
			,
			НСтр("ru = 'Статус заказа остался прежним'") + Символы.НПП + """" + Объект.Статус + """",
			БиблиотекаКартинок.Информация32
		);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ЭлектронныеДокументы"

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ВалютаДокумента = Объект.Валюта;
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументоПродажи(Объект.Склад);
	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	УстановитьВидимостьЭлементовПоОперацииСервер();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	УстановитьТекущуюСтраницуФормаОплаты();
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	ОбновитьСостояниеСервер();
	ЗаполнитьПорядокРасчетов();
	ОбновитьЗависимыеРеквизитыФормыСервер();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказКлиента));
	УстановитьВидимостьЭлементовСерий();
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.ГруппаДоговор.Доступность, Элементы.ГруппаДоговор.Видимость);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;

	НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	ИспользоватьУправлениеДоставкой = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");
	Если ИспользоватьУправлениеДоставкой Тогда
		РедактироватьАдресаДоставкиТолькоВДиалоге = ПолучитьФункциональнуюОпцию("РедактироватьАдресаДоставкиТолькоВДиалоге");
		АдресаДоставкиТолькоРоссийские = ПолучитьФункциональнуюОпцию("АдресаДоставкиТолькоРоссийские");
		ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы,Объект);
	Иначе
		Элементы.СтраницаДоставка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиЗаказа(Форма)
	
	// АК Игорь
	# ЕСЛИ Сервер ТОГДА
		ВесИтого = 0;
		ОбъемИтого = 0;
		Для каждого текСтр из  Форма.Объект.Товары цикл
			текСтр.АК_Вес = текСтр.Номенклатура.Вес * текСтр.КоличествоУпаковок;
			ВесИтого = ВесИтого+текСтр.АК_Вес;
			текСтр.АК_Объем = текСтр.Номенклатура.Объем * текСтр.КоличествоУпаковок;
			ОбъемИтого = ОбъемИтого+текСтр.АК_Объем;
		КонецЦИкла;
		Форма.Элементы.ТоварыАК_Вес.ТекстПодвала = ВесИтого;
		Форма.Элементы.ТоварыАК_Объем.ТекстПодвала = ОбъемИтого;
	#КОНЕЦЕСЛИ	

	
	// Заполнение итогов по таблице "Товары"
	
	КоллекцияТовары = Форма.Объект.Товары;

	Форма.СуммаЗаказано     = КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары");
	Форма.СуммаНДСЗаказано  = КоллекцияТовары.Итог("СуммаНДСБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаНДСОтмененоБезВозвратнойТары");
	Форма.СуммаАвтоСкидки   = КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиОтмененоБезВозвратнойТары");
	Форма.СуммаРучнойСкидки = КоллекцияТовары.Итог("СуммаРучнойСкидкиБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаРучнойСкидкиОтмененоБезВозвратнойТары");;
	Форма.СуммаСкидки       = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	Форма.СуммаОтменено     = КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары");
	
	Если КоллекцияТовары.Итог("СуммаСНДСОтмененоБезВозвратнойТары") = КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары") Тогда
		Форма.ВсеСтрокиОтменены = Истина;
	Иначе
		Форма.ВсеСтрокиОтменены = Ложь;
	КонецЕсли;
	
	СуммаЗаказано = КоллекцияТовары.Итог("СуммаБезВозвратнойТары") - КоллекцияТовары.Итог("СуммаОтмененоБезВозвратнойТары");
	
	Если СуммаЗаказано > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаЗаказано + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаЗаказано + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	Иначе
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
	КонецЕсли;
	
	// Заполнение итогов по этапам оплаты
	
	ПредыдущееЗначениеДаты = Дата(1,1,1);
	Форма.НомерСтрокиПолнойОплаты = 0;
	ПроцентПлатежейОбщий = 0;
	
	Форма.СуммаАвансаДоОбеспечения = 0;
	Форма.СуммаПредоплатыДоОтгрузки = 0;
	Форма.СуммаКредитаПослеОтгрузки = 0;
	Форма.ПроцентАвансаДоОбеспечения = 0;
	Форма.ПроцентПредоплатыДоОтгрузки = 0;
	Форма.ПроцентКредитаПослеОтгрузки = 0;
	
	СоответствиеВариантовОплаты = Новый Соответствие;
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения"),
		Новый Структура("Сумма, Проценты", "СуммаАвансаДоОбеспечения", "ПроцентАвансаДоОбеспечения")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки"),
		Новый Структура("Сумма, Проценты", "СуммаПредоплатыДоОтгрузки", "ПроцентПредоплатыДоОтгрузки")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки"),
		Новый Структура("Сумма, Проценты", "СуммаКредитаПослеОтгрузки", "ПроцентКредитаПослеОтгрузки")
	);
	
	Для Каждого ТекСтрока Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		ПроцентПлатежейОбщий = ПроцентПлатежейОбщий + ТекСтрока.ПроцентПлатежа;
		ТекСтрока.ПроцентЗаполненНеВерно = (ПроцентПлатежейОбщий > 100);
		ТекСтрока.ДатаЗаполненаНеВерно = (ПредыдущееЗначениеДаты > ТекСтрока.ДатаПлатежа);
		ПредыдущееЗначениеДаты = ТекСтрока.ДатаПлатежа;
		Если ПроцентПлатежейОбщий = 100 Тогда
			Форма.НомерСтрокиПолнойОплаты = ТекСтрока.НомерСтроки;
		КонецЕсли;
		ИменаЭлементов = СоответствиеВариантовОплаты[ТекСтрока.ВариантОплаты];
		Если ИменаЭлементов <> Неопределено Тогда
			Форма[ИменаЭлементов.Сумма] = Форма[ИменаЭлементов.Сумма] + ТекСтрока.СуммаПлатежа;
			Форма[ИменаЭлементов.Проценты] = Форма[ИменаЭлементов.Проценты] + ТекСтрока.ПроцентПлатежа;
		КонецЕсли;
	КонецЦикла;
	
	// Выбор странцицы отображения НДС
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС")
		ИЛИ Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД") Тогда
		
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
		
	Иначе
		
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруЗависимыхРеквизитов()
	
	Возврат Новый Структура(
		"БезВозвратнойТары,ОтмененоБезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимыеРеквизитыФормы(ОбновляемыеРеквизиты = Неопределено)
	
	Если ОбновляемыеРеквизиты = Неопределено Тогда
		ОбновляемыеРеквизиты = Новый Структура("Склад, Подразделение");
	КонецЕсли;
	
	ОбновитьРеквизитыФормы = Ложь;
	ОбновитьРеквизитФормыПодразделение = Ложь;
	
	Если ОбновляемыеРеквизиты.Свойство("Склад") Тогда
		ОбновитьРеквизитыФормы = ОбщегоНазначенияУТКлиентСервер.ПроверитьНеобходимостьОбновленияРеквизитовФормы(
			Объект.Товары,
			Элементы.КартинкаНесколькоСкладов.Картинка,
			НадписьНесколькоСкладов,
			СкладГруппа,
			Объект.Склад,
			СкладОбязателен,
			Истина
		);
	КонецЕсли;
	
	Если ОбновляемыеРеквизиты.Свойство("Подразделение") Тогда
		
		ОбновитьРеквизитФормыПодразделение = ОбщегоНазначенияУТКлиентСервер.ПроверитьНеобходимостьОбновленияПодразделения(
			Объект.Товары,
			Объект.Подразделение,
			ПодразделениеОбязательно,
			Истина
		);
	КонецЕсли;
	
	Если ОбновитьРеквизитыФормы ИЛИ ОбновитьРеквизитФормыПодразделение Тогда
		ОбновитьЗависимыеРеквизитыФормыСервер(ОбновляемыеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗависимыеРеквизитыФормыСервер(ОбновляемыеРеквизиты = Неопределено)
	
	Если ОбновляемыеРеквизиты = Неопределено Тогда
		ОбновляемыеРеквизиты = Новый Структура("Склад, Подразделение");
	КонецЕсли;
	
	Если ОбновляемыеРеквизиты.Свойство("Подразделение") Тогда
		ОбновляемыеРеквизиты.Подразделение = Объект.Подразделение;
		ОбновляемыеРеквизиты.Вставить("ПодразделениеОбязательно", ПодразделениеОбязательно);
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ОбновитьЗависимыеРеквизитыФормы(
		Объект.Товары,
		Элементы.КартинкаНесколькоСкладов.Картинка,
		НадписьНесколькоСкладов,
		СкладГруппа,
		Объект.Склад,
		СкладОбязателен,
		Истина,
		НСтр("ru='Складов отгрузки'"),
		ОбновляемыеРеквизиты
	);
	
	Если ОбновляемыеРеквизиты.Свойство("Подразделение") Тогда
		ПодразделениеОбязательно = ОбновляемыеРеквизиты.ПодразделениеОбязательно;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
		Объект.Договор,
		Объект.Партнер,
		Объект.Контрагент,
		Объект.Организация,
		Объект.ХозяйственнаяОперация,
		Объект.Валюта,
		Объект.Соглашение
	);
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет, Объект.БанковскийСчетКонтрагента);
	КонецЕсли;
	
	ЗаполнитьПорядокРасчетов();
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьДатуОтгрузкиСервер()

	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.РассчитатьДатыОтгрузки();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
		
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	//АК если не добавить эти 2 процедуры то сбрасываются доп реквизиты
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Ложь;
	
	Если Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда
		
		УстановитьПодписку = Ложь;
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.Согласован Или
			Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению Или
			Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Или
			Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
			
			УстановитьПодписку = Объект.Согласован;
			
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Соглашение");
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("НалогообложениеНДС");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("Договор");
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("ЖелаемаяДатаОтгрузки");
	МассивЭлементов.Добавить("НеОтгружатьЧастями");
	МассивЭлементов.Добавить("ДатаОтгрузки");
	МассивЭлементов.Добавить("ДатаСогласования");
	МассивЭлементов.Добавить("ХозяйственнаяОперация");
	МассивЭлементов.Добавить("КартаЛояльности");
	МассивЭлементов.Добавить("ВернутьМногооборотнуюТару");
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	
	// Элементы управления, связанные с оплатой
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("ФормаОплаты");
	
	// Элементы управления, связанные с таблицей Товары
	МассивЭлементов.Добавить("ТоварыНоменклатура");
	МассивЭлементов.Добавить("ТоварыХарактеристика");
	МассивЭлементов.Добавить("ТоварыКоличествоУпаковок");
	МассивЭлементов.Добавить("ТоварыУпаковка");
	МассивЭлементов.Добавить("ТоварыВидЦены");
	МассивЭлементов.Добавить("ТоварыЦена");
	МассивЭлементов.Добавить("ТоварыСтавкаНДС");
	МассивЭлементов.Добавить("ТоварыПроцентРучнойСкидки");
	МассивЭлементов.Добавить("ТоварыСуммаРучнойСкидки");
	МассивЭлементов.Добавить("ТоварыСумма");
	МассивЭлементов.Добавить("ТоварыСодержание");
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Товары;ПередНачаломДобавления,ПередУдалением");
	
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюУдалить");
	
	МассивЭлементов.Добавить("ТоварыДобавить");
	МассивЭлементов.Добавить("ТоварыИзменить");
	МассивЭлементов.Добавить("ТоварыСкопировать");
	МассивЭлементов.Добавить("ТоварыУдалить");
	
	МассивЭлементов.Добавить("ТоварыОткрытьПодбор");
	МассивЭлементов.Добавить("ТоварыДополнитьМногооборотнойТарой");
	МассивЭлементов.Добавить("ТоварыПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	МассивЭлементов.Добавить("ТоварыЗаполнитьСкладВВыделенныхСтроках");
	
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоСоглашению");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоВидуЦен");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен");
	
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("КартаЛояльности");
	МассивЭлементов.Добавить("ТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("РассчитатьДатуОтгрузки");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
	Если Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыУказатьСерии", "Доступность", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыКонтекстноеМенюУказатьСерии", "Доступность", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыОтменитьУказаниеСерий", "Доступность", Истина);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыКонтекстноеМенюОтменитьУказаниеСерий", "Доступность", Истина);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыУказатьСерии", "Доступность", Не Объект.Согласован);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыКонтекстноеМенюУказатьСерии", "Доступность", Не Объект.Согласован);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыОтменитьУказаниеСерий", "Доступность", Не Объект.Согласован);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыКонтекстноеМенюОтменитьУказаниеСерий", "Доступность", Не Объект.Согласован);
	КонецЕсли;
		
	Если Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РассчитатьСтатусДокумента", "Доступность", Ложь);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РассчитатьСтатусДокумента", "Доступность", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ЗаказКлиента.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации
	);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	ЭтоПередачаНаКомиссию = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("Касса");
	МассивЭлементов.Добавить("БанковскийСчет");
	МассивЭлементов.Добавить("НадписьЭтапыОплаты");
	МассивЭлементов.Добавить("ТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("ТоварыОткрытьИнформациюОСкидках");
	МассивЭлементов.Добавить("КонтекстноеМенюТоварыОткрытьИнформациюОСкидках");
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("КартаЛояльности");
	МассивЭлементов.Добавить("ПроцентРучнойСкидки");
	МассивЭлементов.Добавить("СуммаРучнойСкидки");
	МассивЭлементов.Добавить("ПроцентАвтоСкидки");
	МассивЭлементов.Добавить("СуммаАвтоСкидки");
	МассивЭлементов.Добавить("ПроцентСкидки");
	МассивЭлементов.Добавить("СуммаСкидки");
	МассивЭлементов.Добавить("СуммаАвансаДоОбеспечения");
	МассивЭлементов.Добавить("ПроцентАвансаДоОбеспечения");
	МассивЭлементов.Добавить("СуммаПредоплатыДоОтгрузки");
	МассивЭлементов.Добавить("ПроцентПредоплатыДоОтгрузки");
	МассивЭлементов.Добавить("СуммаКредитаПослеОтгрузки");
	МассивЭлементов.Добавить("ПроцентКредитаПослеОтгрузки");
	МассивЭлементов.Добавить("НашДолгСуммаДолга");
	МассивЭлементов.Добавить("ДолгКлиентаСуммаДолга");
	МассивЭлементов.Добавить("СуммаДолга");
	МассивЭлементов.Добавить("ПроцентДолга");
	МассивЭлементов.Добавить("СуммаОплаты");
	МассивЭлементов.Добавить("ПроцентОплаты");
	МассивЭлементов.Добавить("СуммаОтгрузки");
	МассивЭлементов.Добавить("ПроцентОтгрузки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Не ЭтоПередачаНаКомиссию);
	
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(Объект.ХозяйственнаяОперация, Элементы.ТоварыНоменклатура);
	
	ПродажиСервер.ЗаполнитьСписокВыбораНалогообложения(Объект.ХозяйственнаяОперация, Элементы.НалогообложениеНДС);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, Знач МассивВыделенныхСтрок)

	Если МассивВыделенныхСтрок = Неопределено Тогда

		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;

	Иначе

		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(Знач МассивВыделенныхСтрок, Склад)
	
	ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.Товары, МассивВыделенныхСтрок, Склад);
	
	Если ЗаполненоСтрок > 0 Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);	
	КонецЕсли;
	
	Возврат ЗаполненоСтрок;
	
КонецФункции

&НаСервере
Процедура УстановитьТекущуюСтраницуФормаОплаты()

	Если Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		Элементы.СтраницыФормаОплаты.ТекущаяСтраница = Элементы.СтраницаНаличнаяОплата;
	Иначе
		Элементы.СтраницыФормаОплаты.ТекущаяСтраница = Элементы.СтраницаПрочаяОплата;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены, Знач ПроверятьОстатки = Ложь)
	
	КоличествоОтмененныхСтрок = ПродажиСервер.ОтменитьНепоставленныеСтроки(Объект, "Товары", ПричинаОтмены, ПроверятьОстатки);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	//АК если не добавить эти 2 процедуры то сбрасываются доп реквизиты
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	ОбновитьЗависимыеРеквизитыФормыСервер();
	
	Если КоличествоОтмененныхСтрок > 0 Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораСостояниеОбеспеченияЗаказаНаСервере(АдресТоваровВХранилище)
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Объект.Товары.Загрузить(ПолучитьИзВременногоХранилища(АдресТоваровВХранилище));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	//АК если не добавить эти 2 процедуры то сбрасываются доп реквизиты
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеСервер()
	
	Документы.ЗаказКлиента.РассчитатьСостояние(
		Объект.Ссылка,
		Объект.Договор,
		ЭтаФорма
	);
	
	Если СуммаДолга = 0 Тогда
		Элементы.ГруппаДолг.ТекущаяСтраница = Элементы.ГруппаСтраницаДолг;
	ИначеЕсли СуммаДолга > 0 Тогда
		Элементы.ГруппаДолг.ТекущаяСтраница = Элементы.ГруппаСтраницаДолгКлиента;
	Иначе
		Элементы.ГруппаДолг.ТекущаяСтраница = Элементы.ГруппаСтраницаНашДолг;
	КонецЕсли;
	
	Если СуммаДолга < 0 Тогда
		СуммаДолга = - СуммаДолга;
	КонецЕсли;
	
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам()
	
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		Элементы.ГруппаРасчеты.Заголовок = НСтр("ru='Расчеты по договору'");
	Иначе
		Элементы.ГруппаРасчеты.Заголовок = НСтр("ru='Расчеты по заказу'");
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ПроцентДолга");
	МассивЭлементов.Добавить("СуммаОплаты");
	МассивЭлементов.Добавить("ПроцентОплаты");
	МассивЭлементов.Добавить("СуммаОтгрузки");
	МассивЭлементов.Добавить("ПроцентОтгрузки");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
	);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("НашДолгСуммаДолга");
	МассивЭлементов.Добавить("ДолгКлиентаСуммаДолга");
	МассивЭлементов.Добавить("СуммаДолга");
	МассивЭлементов.Добавить("ПроцентДолга");
	МассивЭлементов.Добавить("СуммаОплаты");
	МассивЭлементов.Добавить("ПроцентОплаты");
	МассивЭлементов.Добавить("СуммаОтгрузки");
	МассивЭлементов.Добавить("ПроцентОтгрузки");
	МассивЭлементов.Добавить("СуммаАвансаДоОбеспечения");
	МассивЭлементов.Добавить("ПроцентАвансаДоОбеспечения");
	МассивЭлементов.Добавить("СуммаПредоплатыДоОтгрузки");
	МассивЭлементов.Добавить("ПроцентПредоплатыДоОтгрузки");
	МассивЭлементов.Добавить("СуммаКредитаПослеОтгрузки");
	МассивЭлементов.Добавить("ПроцентКредитаПослеОтгрузки");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
	);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Контрагент)
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузки(МассивВыделенныхСтрок = Неопределено)

	ДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
	Если Объект.Товары.Количество() > 0 Тогда
		Если РаботаСДиалогамиКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаОтгрузки, НСтр("ru='Введите дату отгрузки'"), ЧастиДаты.Дата) Тогда
			ЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, МассивВыделенныхСтрок);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияДатОтгрузки(ДатаОтгрузки, (МассивВыделенныхСтрок <> Неопределено));
		КонецЕсли;
	Иначе
		ТекстПредупреждения = НСтр("ru='В документе нет строк для заполнения. Дата отгрузки не будет заполнена.'");
		Предупреждение(ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПустыеДатыОтгрузки()
	
	Если Объект.Склад.Пустая() 
		Или Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПродажиВызовСервера.ДатаОтгрузкиПустая(Объект, "Товары") Тогда
		
		ТекстВопроса = НСтр("ru='Дата отгрузки заполнена не во всех строках. Рассчитать дату отгрузки?'");
		//+АК всегда да
		//ОтветНаВопрос = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
		//Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			
		РассчитатьДатуОтгрузкиСервер();
			
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПустуюДатуОтгрузки()
	
	Если Объект.Склад.Пустая() Или Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПродажиВызовСервера.ДатаОтгрузкиПустая(Объект, "Товары") Тогда
		
		ТекстВопроса = НСтр("ru='Дата отгрузки не заполнена. Рассчитать дату отгрузки?'");
		
		// АК ИГОРЬ 19 03 2013
		ОтветНаВопрос = КодВозвратаДиалога.Да;
		
		//ОтветНаВопрос = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			НеОтгружатьЧастямиПриИзмененииСервер(Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности)
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) И ДанныеКартыЛояльности.Партнер <> Объект.Партнер Тогда
		Объект.Партнер = ДанныеКартыЛояльности.Партнер;
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		ПриИзмененииПартнераСервер();
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
		И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение
		И ДанныеКартыЛояльности.СоглашениеДоступно Тогда
		Объект.Соглашение = ДанныеКартыЛояльности.Соглашение;
		ПриИзмененииСоглашенияСервер();
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Контрагент)
		И ДанныеКартыЛояльности.Контрагент <> Объект.Контрагент
		И ДанныеКартыЛояльности.КонтрагентДоступен Тогда
		Объект.Контрагент = ДанныеКартыЛояльности.Контрагент;
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльности(КартаЛояльности)
	
	ДанныеКартыЛояльности = КартыЛояльностиВызовСервера.ПолучитьДанныеКартыЛояльности(КартаЛояльности);
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Ссылка) Тогда
		
		Если Не ДанныеКартыЛояльности.ПартнерДоступен Тогда
			Предупреждение(НСтр("ru = 'Нет доступа к партнеру-владельцу карты лояльности.'"));
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) Тогда // Обезличенная карта
			
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			Модифицированность = Истина;
			Объект.КартаЛояльности   = КартаЛояльности;
			
			Возврат;
			
		ИначеЕсли Объект.Партнер <> ДанныеКартыЛояльности.Партнер Тогда // Партнер в карте отличается от партнера в документе.
			
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				Ответ = Вопрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Карта лояльности принадлежит партнеру ""%1"". Изменить партнера в документе?'"), ДанныеКартыЛояльности.Партнер), РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		Иначе // Партнер в документе равен партнеру в карте.
			
			ВопросОбИзмененииКонтрагента = Ложь;
			Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Контрагент)
				И ЗначениеЗаполнено(Объект.Контрагент) И ДанныеКартыЛояльности.Контрагент <> Объект.Контрагент Тогда
				ВопросОбИзмененииКонтрагента = Истина;
			КонецЕсли;
			
			ВопросОбИзмененииСоглашения = Ложь;
			Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
				И ЗначениеЗаполнено(Объект.Соглашение) И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение Тогда
				ВопросОбИзмененииСоглашения = Истина;
			КонецЕсли;
			
			Если ВопросОбИзмененииКонтрагента Или ВопросОбИзмененииСоглашения Тогда
				
				Если ВопросОбИзмененииКонтрагента И ВопросОбИзмененииСоглашения Тогда
					ТекстВопроса = НСтр("ru = 'Для карты лояльности заданы контрагент ""%1"" и соглашение ""%2"". Применить карту лояльности и подставить в документ контрагента ""%1"" и соглашение ""%2""?'");
				ИначеЕсли ВопросОбИзмененииКонтрагента Тогда
					ТекстВопроса = НСтр("ru = 'Для карты лояльности задан контрагент ""%1"". Применить карту лояльности и подставить в документ контрагента ""%1""?'");
				ИначеЕсли ВопросОбИзмененииСоглашения Тогда
					ТекстВопроса = НСтр("ru = 'Для карты лояльности задано соглашение ""%2"". Применить карту лояльности и подставить в документ соглашение ""%2""?'");
				КонецЕсли;
				
				Ответ = Вопрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДанныеКартыЛояльности.Контрагент, ДанныеКартыЛояльности.Соглашение), РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Товары", УникальныйИдентификатор, ТолькоВыделенныеСтроки);
	
КонецФункции

&НаСервере 
Процедура ЗаполнитьБанковскийСчетИКассуПоОрганизации(Организация)
	
	// Заполним банковский счет и кассу в зависимости от организации
	СвойстваАвтозаполнения = Новый Структура("Организация, БанковскийСчет, Касса", Объект.Организация);
	
	ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(Объект.Ссылка, СвойстваАвтозаполнения);
	
	ЗаполнитьЗначенияСвойств(Объект, СвойстваАвтозаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если Не Объект.Согласован  и ПроверитьПравоНаИзменениеЗаказа()Тогда
		Попытка
			ЗаблокироватьДанныеФормыДляРедактирования();
			Модифицированность = Истина;
		Исключение
			Предупреждение(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",            Ложь);
	ПараметрыФормы.Вставить("СуммаДокумента",            СуммаЗаказано);
	ПараметрыФормы.Вставить("ГрафикОплаты",              Объект.ГрафикОплаты);
	Если ПроверитьПравоНаЧтениеСоглашения() Тогда
		ПараметрыФормы.Вставить("Соглашение",                Объект.Соглашение);
	КонецЕсли; 
	ПараметрыФормы.Вставить("ЖелаемаяДатаОтгрузки",      Объект.ЖелаемаяДатаОтгрузки);
	ПараметрыФормы.Вставить("Дата",                      Объект.Дата);
	ПараметрыФормы.Вставить("Валюта",                    Объект.Валюта);
	ПараметрыФормы.Вставить("УчитыватьВариантОплаты",    Истина);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",   УникальныйИдентификатор);
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилищеНаСервере());
	ПараметрыФормы.Вставить("Ключ",                      Объект.Ссылка);
	ПараметрыФормы.Вставить("ФормаОплаты",                      Объект.ФормаОплаты);
	
	ПараметрыОплаты = ОткрытьФормуМодально("ОбщаяФорма.ЭтапыОплатыКлиентом", ПараметрыФормы, ЭтаФорма);
	
	Если ПараметрыОплаты <> Неопределено Тогда
		
		Объект.Согласован = Ложь;
		Объект.ЭтапыГрафикаОплаты.Очистить();
		Если ЗначениеЗаполнено(ПараметрыОплаты.АдресВоВременномХранилище) Тогда
			ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(ПараметрыОплаты.АдресВоВременномХранилище);
		КонецЕсли;
		НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
		
		УстановитьДоступностьЭлементовПоСтатусуСервер();
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ЭтапыГрафикаОплаты.Выгрузить());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ЭтапыОплаты = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
		НоваяСтрока = Объект.ЭтапыГрафикаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормыДатОтгрузки()
	
	Элементы.ГруппаТоварыДатаОтгрузки.Видимость = Не Объект.НеОтгружатьЧастями;
	Элементы.ТоварыДатаОтгрузки.Видимость = Не Объект.НеОтгружатьЧастями;
	Элементы.ДатаОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
	Элементы.РассчитатьДатуОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, ЗаполнятьФормуОплаты = Ложь)
	
	Если ГрафикСоглашенияЗаполнен Тогда
		ПродажиСервер.ЗаполнитьЭтапыГрафикаОплатыПоСоглашению(
			Объект,
			СуммаЗаказано,
			ЗаполнятьФормуОплаты
		);
	ИначеЕсли ГрафикЗаполнен Тогда
		ПродажиСервер.ЗаполнитьЭтапыГрафикаОплаты(
			Объект,
			СуммаЗаказано,
			ЗаполнятьФормуОплаты
		);
	КонецЕсли;
	
	НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
	
	Если ЗаполнятьФормуОплаты Тогда
		УстановитьТекущуюСтраницуФормаОплаты();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПравоНаЧтениеСоглашения()
	
	Возврат ПравоДоступа("Просмотр",Метаданные.Документы.ЗаказКлиента.Реквизиты.Соглашение);
	
КонецФункции

&НаСервере
Функция ПроверитьПравоНаИзменениеЗаказа()
	
	Возврат ПравоДоступа("Изменение",Метаданные.Документы.ЗаказКлиента);
	
КонецФункции

&НаСервере
Процедура ОбновитьОграничениеЗадолженности()
	
	ПродажиСервер.ОбновитьОграничениеЗадолженности(
		Объект.Договор,
		Объект.Дата,
		ТекстОстатокДопустимогоКредита,
		Элементы.ТекстОстатокДопустимогоКредита.Видимость,
		Элементы.ТекстОстатокДопустимогоКредита.ЦветТекста,
		Элементы.КартинкаОтгрузкаЗапрещена.Видимость
	);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродаж()
	ГрафикОплаты = Объект.ГрафикОплаты;
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоУмолчанию();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ВалютаДокумента = Объект.Валюта;
		ПриИзмененииХозяйственнойОперацииСервер(Ложь);
		
		ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
		ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты) И ГрафикОплаты <> Объект.ГрафикОплаты;
		
		Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
			ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
		ИначеЕсли Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, СуммаЗаказано);
		КонецЕсли;
		
	КонецЕсли;
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.ГруппаДоговор.Доступность, Элементы.ГруппаДоговор.Видимость, Объект.Договор);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.ГруппаДоговор.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокРасчетов()
	
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(Объект);
	
	УстановитьВидимостьЭлементовПоПорядкуРасчетов();
	УстановитьВидимостьГрафикаОплаты();
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоПорядкуРасчетов()
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("НадписьЭтапыОплаты");
	МассивЭлементов.Добавить("Касса");
	МассивЭлементов.Добавить("ДекорацияОплата");
	МассивЭлементов.Добавить("ГруппаФинансовогоУчета");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГрафикаОплаты()
	
	ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГрафикОплаты", "Видимость",
		Не ГрафикСоглашенияЗаполнен
		И ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты")
		И Объект.ХозяйственнаяОперация<>Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "Доступность", Форма.Объект.ВернутьМногооборотнуюТару);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	СтруктураДействийДобавленныеСтроки =  ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДействийИзмененныеСтроки);;
	СтруктураДействийДобавленныеСтроки.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		"Номенклатура,Характеристика,Склад,ДатаОтгрузки",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийДобавленныеСтроки);
		
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	//АК если не добавить эти 2 процедуры то сбрасываются доп реквизиты
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	ОбновитьЗависимыеРеквизитыФормыСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакБезВозвратнойТары()
	
	СтруктураДополнительныхДействий = Новый Структура;
	СтруктураДополнительныхДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару, СтруктураДополнительныхДействий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Доставка

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы);
	
	Если ИспользоватьУправлениеДоставкой Тогда
		ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Контроль несогласованных изменений

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении[Элемент.Имя]+"(Элемент)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие[Элемент.Имя]+"(Элемент)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.Команды[Команда.Имя]+"(Команда)");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения[Элемент.Имя]+"(Элемент, Отказ)");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением[Имя]+"(Элемент, Отказ)");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления[Имя]+"(Элемент, Отказ, Копирование, Родитель, Группа)");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с буфером обмена 

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	ХранилищаНастроек.ХранилищеБуфераОбмена.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры",НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре());
		ТаблицаТоваров = ХранилищаНастроек.ХранилищеБуфераОбмена.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	Иначе
		ТаблицаТоваров = ХранилищаНастроек.ХранилищеБуфераОбмена.ПолучитьСтрокиИзБуфераОбмена();
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		Если Объект.НеОтгружатьЧастями Тогда
			ТекущаяСтрока.ДатаОтгрузки = Объект.ДатаОтгрузки;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	//АК если не добавить эти 2 процедуры то сбрасываются доп реквизиты
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	ОбновитьЗависимыеРеквизитыФормыСервер();
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ХранилищаНастроек.ХранилищеБуфераОбмена.БуферОбменаПустой());
		
	Иначе
		
		МассивЭлементов.Добавить("ТоварыСкопироватьСтроки");
		МассивЭлементов.Добавить("ТОварыКонтекстноеМенюСкопироватьСтроки");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ВернутьМногооборотнуюТаруПриИзмененииСервер()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакОтмененоБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//ДОБАВЛЕННЫЕ НЕ ТИПОВЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура УстановитьВидимостьШапки()
	
	Элементы.ГруппаШапка.Видимость = Истина; //НЕ Объект.АК_ПризнакРекламация;
	Элементы.АК_ПризнакРекламацияЗаСчетПоставщика.Видимость = Истина; //Объект.АК_ПризнакРекламация;
	Элементы.ГруппаПрочиеРасходы.Видимость = Истина; //Объект.АК_ПризнакРекламация;
	
КонецПроцедуры

&НаКлиенте
Процедура АК_ПризнакРекламацияПриИзменении(Элемент)
	УстановитьВидимостьШапки();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАК_ЭскизФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//
	СтандартнаяОбработка = Ложь;
	
	//
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Предупреждение("Необходимо записать документ");
		Возврат;
	КонецЕсли;
	
	//
	Заголовок = НСтр("ru = 'Присоединенные файлы'");
	
	//
	_Параметры = Новый Структура;
	_Параметры.Вставить("ВладелецФайла", Объект.Ссылка);
	_Параметры.Вставить("ПризнакВыбор", Истина);
	_Параметры.Вставить("ЗаголовокФормы", Заголовок);
	
	//
	ФормаВыбора = ПолучитьФорму(
		"Справочник.Файлы.Форма.ФормаСпискаПрисоединенныхФайлов", 
		_Параметры,
		Элемент);
	
	//
	ФормаВыбора.Параметры.РежимВыбора = Истина;
	
	//
	ЗначениеВыбора = ФормаВыбора.ОткрытьМодально(); 
	//
	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		Элементы.Товары.ТекущиеДанные.АК_ЭскизФайл = ЗначениеВыбора;
	КонецЕсли;	


КонецПроцедуры

&НаКлиенте
Процедура АК_ПунктНазначенияПриИзменении(Элемент)
	ЗаполнитьДоставку()
КонецПроцедуры


Процедура ЗаполнитьДоставку()
	Объект.АдресДоставки = Объект.АК_ПунктНазначения.Адрес;	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусКОтгрузкеСервер()
	текОбъект = РеквизитФормыВЗначение("Объект");
	текОбъект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОтгрузке");
	Если текОбъект.Проведен тогда
		Попытка
			текОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	Иначе
		текОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	ЗначениеВРеквизитФормы(текОбъект,"Объект");
КонецПроцедуры


&НаКлиенте
Процедура УстановитьСтатусКОтгрузке(Команда)
	УстановитьСтатусКОтгрузкеСервер();
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеРеквизита(Объект, ИмяРеквизита)
	
	Результат = Неопределено;
	
	Попытка
		Результат = Объект[ИмяРеквизита];
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКонтранетнаПартнераПоУмолчанию(Партнер)
	Возврат ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
КонецФункции

&НаСервере
Функция ЗаполнитьИндивидульноеСоглашениеНаОснованииТипового(Знач Объект)
	
	Соглашение = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.СоглашенияСКлиентами"));
	Соглашение.ЗаполнитьУсловияПродажПоCоглашению();
	ЗначениеВДанныеФормы(Соглашение, Объект);	
	
	Возврат Объект;
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьКомерческоеПоСоглашению(Соглашение)
	текОбъект = РеквизитФормыВЗначение("Объект");
	ЗаполнитьЗначенияСвойств(текОбъект, Соглашение,, "Товары, СкидкиНаценки, ДополнительныеРеквизиты");
	ЗначениеВРеквизитФормы(текОбъект,"Объект");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммы(Команда)
	// Вставить содержимое обработчика.
	СтруктураДействий = Новый Структура;
		
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	

	Для каждого строка из Объект.Товары Цикл
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(строка, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла
КонецПроцедуры

&НаКлиенте
Процедура АК_УслугиДополнительныеАК_ПроцентПриИзменении(Элемент)
	
	Если Элемент.Имя = "АК_УслугиДополнительныеАК_Процент" тогда
		Элементы.АК_УслугиДополнительные.ТекущиеДанные.АК_Сумма = Объект.Товары.Итог("Сумма") * Элементы.АК_УслугиДополнительные.ТекущиеДанные.АК_Процент/100  ;	
	ИначеЕсли Элемент.Имя = "АК_УслугиДополнительныеАК_Сумма" тогда 
		Элементы.АК_УслугиДополнительные.ТекущиеДанные.АК_Процент = Элементы.АК_УслугиДополнительные.ТекущиеДанные.АК_Сумма / Объект.Товары.Итог("Сумма") * 100;	
	КОнецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура АК_СамовывозПриИзменении(Элемент)
	 
	ЗаполнитьПунктСамовывоза();
КонецПроцедуры


Процедура ЗаполнитьПунктСамовывоза()
	Если Объект.АК_Самовывоз тогда
		Объект.АК_ПунктНазначения = Справочники.АК_ПунктыНазначения.НайтиПоНаименованию("Склад Евростар-СК");	
	Иначе
		Объект.АК_ПунктНазначения = Справочники.АК_ПунктыНазначения.ПустаяСсылка();
	КонецЕсли;
	ЗаполнитьДоставку();
КонецПроцедуры
 
  
  
  
  
  
  
  
  

