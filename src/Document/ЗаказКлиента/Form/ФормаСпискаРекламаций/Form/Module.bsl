////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ (НА КЛИЕНТЕ)

// Показывает оповещение после обработки выделенных в списке заказов клиентов.
//
// Параметры:
// КоличествоОбработанных - Число - количество успешно обработанных заказов клиентов
// СписокДокументов       - ДинамическийСписок - Элемент формы
// Статус                 - ПеречислениеСсылка.СтатусыЗаказовКлиентов - Установленный статус
//
&НаКлиенте
Процедура ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, СписокДокументов, Статус)
	
	Если КоличествоОбработанных > 0 Тогда
		
		СписокДокументов.Обновить();
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке заказов клиентов установлен статус ""%Статус%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        СписокДокументов.ВыделенныеСтроки.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%",                 Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Статус ""%Статус%"" не установлен ни для одного заказа клиента.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры // ОповеститьПользователя()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ (НА СЕРВЕРЕ БЕЗ КОНТЕКСТА)

// Устанавливает статус "НеСогласован" у выделенных в списке заказов клиентов
//
// Параметры:
// ЗаказыКлиентов - Массив- массив заказов клиентов
//
&НаСервереБезКонтекста
Функция УстановитьСтатусЗаказаКлиентаНеСогласован(Знач ЗаказыКлиентов)
	
	Возврат Документы.ЗаказКлиента.УстановитьСтатус(ЗаказыКлиентов, Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
	
КонецФункции // УстановитьСтатусЗаказаКлиентаНеСогласован()

// Устанавливает статус "Согласован" у выделенных в списке заказов клиентов
//
// Параметры:
// ЗаказыКлиентов - Массив - массив заказов клиентов
//
&НаСервереБезКонтекста
Функция УстановитьСтатусЗаказаКлиентаСогласован(Знач ЗаказыКлиентов)
	
	Возврат Документы.ЗаказКлиента.УстановитьСтатус(ЗаказыКлиентов, Перечисления.СтатусыЗаказовКлиентов.Согласован);
	
КонецФункции // УстановитьСтатусЗаказаКлиентаСогласован()

// Устанавливает статус "КОбеспечению" у выделенных в списке заказов клиентов
//
// Параметры:
// ЗаказыКлиентов - Массив - массив заказов клиентов
//
&НаСервереБезКонтекста
Функция УстановитьСтатусЗаказаКлиентаКОбеспечению(Знач ЗаказыКлиентов)
	
	Возврат Документы.ЗаказКлиента.УстановитьСтатус(ЗаказыКлиентов, Перечисления.СтатусыЗаказовКлиентов.КОбеспечению);
	
КонецФункции // УстановитьСтатусЗаказаКлиентаКОбеспечению()

// Устанавливает статус "КОтгрузке" у выделенных в списке заказов клиентов
//
// Параметры:
// ЗаказыКлиентов - Массив - массив заказов клиентов
//
&НаСервереБезКонтекста
Функция УстановитьСтатусЗаказаКлиентаКОтгрузке(Знач ЗаказыКлиентов)
	
	Возврат Документы.ЗаказКлиента.УстановитьСтатус(ЗаказыКлиентов, Перечисления.СтатусыЗаказовКлиентов.КОтгрузке);
	
КонецФункции // УстановитьСтатусЗаказаКлиентаКОтгрузке()

// Устанавливает статус "Закрыт" у полностью отработанных из выделенных в списке заказов клиентов
//
// Параметры:
// ЗаказыКлиентов - Массив - массив заказов клиентов
//
&НаСервереБезКонтекста
Функция УстановитьСтатусЗаказаКлиентаЗакрытПолностьюОтработанныхЗаказов(Знач ЗаказыКлиентов)

	Возврат Документы.ЗаказКлиента.УстановитьСтатус(ЗаказыКлиентов, Перечисления.СтатусыЗаказовКлиентов.Закрыт);

КонецФункции // УстановитьСтатусЗаказаКлиентаЗакрытПолностьюОтработанныхЗаказов()

// Устанавливает статус "Закрыт" у выделенных в списке заказов клиентов
// и отменить неотработанные строки
//
// Параметры:
// ЗаказыКлиентов - Массив - массив заказов клиентов
// ПричинаОтмены  - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина отмены заказов клиентов
//
&НаСервереБезКонтекста
Функция УстановитьСтатусЗаказаКлиентаЗакрытСОтменойНеотработанныхСтрок(Знач ЗаказыКлиентов,ПричинаОтмены)

	Возврат Документы.ЗаказКлиента.Отменить(ЗаказыКлиентов, ПричинаОтмены);

КонецФункции // УстановитьСтатусЗаказаКлиентаЗакрытСОтменойНеотработанныхСтрок()

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораОтбораПоСостояниюСервер(СписокВыбора)
	
	СписокВыбора.Добавить(Неопределено, "Все");
	СписокВыбора.Добавить("ВсеОткрытые", "Все открытые");
	СписокВыбора.Добавить("ВсеОжидающиеОплаты", "Все ожидающие оплаты");
	СписокВыбора.Добавить("ВсеОжидающиеИсполнения", "Все ожидающие исполнения");
	
	Для Каждого ТекЗначение Из Перечисления.СостоянияЗаказовКлиентов Цикл
		СписокВыбора.Добавить(ТекЗначение, ТекЗначение);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокВыбораОтбораПоСостояниюСервер()

// Устанавливает отбор по состоянию
//
&НаСервере
Процедура УстановитьОтборПоСостояниюСервер()
	
	Если Состояние = "ВсеОткрытые" Тогда
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Состояние", Перечисления.СостоянияЗаказовКлиентов.Закрыт, Истина, ВидСравненияКомпоновкиДанных.НеРавно);
	ИначеЕсли Состояние = "ВсеОжидающиеОплаты" Тогда
		
		МассивСостояний = Новый Массив();
		МассивСостояний.Добавить(Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяАвансДоОбеспечения);
		МассивСостояний.Добавить(Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяПредоплатаДоОтгрузки);
		МассивСостояний.Добавить(Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяОплатаПослеОтгрузки);
		
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Состояние", МассивСостояний, Истина, ВидСравненияКомпоновкиДанных.ВСписке);
		
	ИначеЕсли Состояние = "ВсеОжидающиеИсполнения" Тогда
		
		МассивСостояний = Новый Массив();
		МассивСостояний.Добавить(Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяСогласование);
		МассивСостояний.Добавить(Перечисления.СостоянияЗаказовКлиентов.ГотовКОбеспечению);
		МассивСостояний.Добавить(Перечисления.СостоянияЗаказовКлиентов.ГотовКОтгрузке);
		МассивСостояний.Добавить(Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяОтгрузка);
		МассивСостояний.Добавить(Перечисления.СостоянияЗаказовКлиентов.ГотовКЗакрытию);
		
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Состояние", МассивСостояний, Истина, ВидСравненияКомпоновкиДанных.ВСписке);
		
	Иначе
		
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Состояние", Состояние, ЗначениеЗаполнено(Состояние));
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтборПоСостояниюСервер()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Список.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", НачалоДня(ТекущаяДата()));
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Менеджер", Менеджер, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Приоритет", Приоритет, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоАктуальностиПриСозданииНаСервере(Список, Актуальность, ДатаАктуальности, СтруктураБыстрогоОтбора);
	
	Если ОтборыСписковКлиентСервер.НеобходимОтборПоСостояниюПриСозданииНаСервере(Состояние, СтруктураБыстрогоОтбора) Тогда
		УстановитьОтборПоСостояниюСервер();
	КонецЕсли;
	
	ЗаполнитьСписокВыбораОтбораПоСостояниюСервер(Элементы.ОтборСостояние.СписокВыбора);
	
	//+++АК
	Список.Параметры.УстановитьЗначениеПараметра("Рекламация", Истина);
	//---АК
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события формы "ОбработкаОповещения".
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗачтенаОплата" Тогда
		Элементы.Список.Обновить();	
	КонецЕсли;
	
	
	Если ИмяСобытия = "ОбновитьСостояниеВерсииЭД" ИЛИ ИмяСобытия = "ПолученыНовыеЭД" Тогда
		Элементы.Список.Обновить();	
	КонецЕсли;

	
КонецПроцедуры // ОбработкаОповещения()

// Процедура - обработчик события формы "ПриЗагрузкеДанныхИзНастроекНаСервере".
//
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, "Менеджер", Менеджер, СтруктураБыстрогоОтбора, Настройки);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, "Приоритет", Приоритет, СтруктураБыстрогоОтбора, Настройки);
	ОтборыСписковКлиентСервер.ОтборПоАктуальностиПриЗагрузкеИзНастроек(Список, Актуальность, ДатаАктуальности, СтруктураБыстрогоОтбора, Настройки);

	Если ОтборыСписковКлиентСервер.НеобходимОтборПоСостояниюПриЗагрузкеИзНастроек(Список, Состояние, СтруктураБыстрогоОтбора, Настройки) Тогда
		УстановитьОтборПоСостояниюСервер();
	КонецЕсли;
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборСостояние".
//
&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	УстановитьОтборПоСостояниюСервер();
	
КонецПроцедуры // ОтборСостояниеПриИзменении()

// Процедура - обработчик события "ПриИзменении" элемента формы "ТолькоПросроченные".
//
&НаКлиенте
Процедура ОтборСрокВыполненияПриИзменении(Элемент)

	ОтборыСписковКлиентСервер.ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаАктуальности);
	
КонецПроцедуры // ОтборСрокВыполненияПриИзменении()

// Процедура - обработчик события "ПриИзменении" элемента формы "Менеджер".
//
&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Менеджер", Менеджер, ЗначениеЗаполнено(Менеджер));

КонецПроцедуры // МенеджерПриИзменении()

// Процедура - обработчик события "ПриИзменении" элемента формы "ОтборПриоритет".
//
&НаКлиенте
Процедура ОтборПриоритетПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(Список, "Приоритет", Приоритет, ЗначениеЗаполнено(Приоритет));

КонецПроцедуры // ОтборПриоритетПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" элемента формы "СрокВыполнения".
//
&НаКлиенте
Процедура ОтборСрокВыполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ПриВыбореАктуальности(ВыбранноеЗначение, Актуальность, ДатаАктуальности);
	
КонецПроцедуры // ОтборСрокВыполненияОбработкаВыбора()

// Процедура - обработчик события "Очистка" элемента формы "СрокВыполнения".
//
&НаКлиенте
Процедура ОтборСрокВыполненияОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборыСписковКлиентСервер.ПриОчисткеОтбораПоАктуальности(Список, Актуальность, ДатаАктуальности, СтандартнаяОбработка);
	
КонецПроцедуры // ОтборСрокВыполненияОчистка()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНД

// Процедура - обработчик команды "СоздатьРеализациюТоваровУслуг".
//
&НаКлиенте
Процедура СоздатьРеализациюТоваровУслуг(Команда)

	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда

		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		Предупреждение(ТекстПредупреждения);
		Возврат;

	КонецЕсли;

	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента",
				Новый Структура("Основание", 
					Новый Структура("ДокументОснование, ДатаОтгрузки",
								Элементы.Список.ТекущаяСтрока, ДатаАктуальности)));

КонецПроцедуры // СоздатьРеализациюТоваровУслуг()

// Процедура - обработчик команды "УстановитьСтатусНеСогласован" формы.
//
&НаКлиенте
Процедура УстановитьСтатусНеСогласован(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Элементы.Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заказов будет установлен статус ""Не согласован"". По принятым в работу заказам могут быть оформлены документы. Продолжить?'");
	
	Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = УстановитьСтатусЗаказаКлиентаНеСогласован(Элементы.Список.ВыделенныеСтроки);
	ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, Элементы.Список, "Не согласован");
	
КонецПроцедуры // УстановитьСтатусНеСогласован()

// Процедура - обработчик команды "УстановитьСтатусСогласован" формы.
//
&НаКлиенте
Процедура УстановитьСтатусСогласован(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Элементы.Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заказов будет установлен статус ""Согласован"". Продолжить?'");
	
	Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = УстановитьСтатусЗаказаКлиентаСогласован(Элементы.Список.ВыделенныеСтроки);
	ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, Элементы.Список, "Согласован");
	
КонецПроцедуры // УстановитьСтатусСогласован()

// Процедура - обработчик команды"УстановитьСтатусКОбеспечению" формы.
//
&НаКлиенте
Процедура УстановитьСтатусКОбеспечению(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Элементы.Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заказов будет установлен статус ""К обеспечению"". Продолжить?'");
	
	Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = УстановитьСтатусЗаказаКлиентаКОбеспечению(Элементы.Список.ВыделенныеСтроки);
	ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, Элементы.Список, "К обеспечению");
	
КонецПроцедуры // УстановитьСтатусКОбеспечению()

// Процедура - обработчик команды "УстановитьСтатусКОтгрузке" формы.
//
&НаКлиенте
Процедура УстановитьСтатусКОтгрузке(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Элементы.Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заказов будет установлен статус ""К отгрузке"". Продолжить?'");
	
	Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = УстановитьСтатусЗаказаКлиентаКОтгрузке(Элементы.Список.ВыделенныеСтроки);
	ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, Элементы.Список, "К отгрузке");
	
КонецПроцедуры // УстановитьСтатусКОтгрузке()

// Процедура - обработчик команды "УстановитьСтатусЗакрытПолностьюОтработанныхЗаказов" формы.
//
&НаКлиенте
Процедура УстановитьСтатусЗакрытПолностьюОтработанныхЗаказов(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Элементы.Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У полностью отработанных из выделенных в списке заказов будет установлен статус ""Закрыт"". Продолжить?'");
	
	Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = УстановитьСтатусЗаказаКлиентаЗакрытПолностьюОтработанныхЗаказов(Элементы.Список.ВыделенныеСтроки);
	ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, Элементы.Список, "Закрыт");
	
КонецПроцедуры // УстановитьСтатусЗакрытПолностьюОтработанныхЗаказов()

// Процедура - обработчик команды "УстановитьСтатусЗакрытСОтменойНеотработанныхСтрок" формы.
//
&НаКлиенте
Процедура УстановитьСтатусЗакрытСОтменойНеотработанныхСтрок(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Элементы.Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заказов будет установлен статус ""Закрыт"". Все неотработанные строки будут отменены. Продолжить?'");
	
	Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПричинаОтменыЗаказовКлиентов = ОткрытьФормуМодально("Справочник.ПричиныОтменыЗаказовКлиентов.ФормаВыбора",
		Новый Структура("ТекущаяСтрока",ПричинаОтменыЗаказовКлиентов));
	
	Если ЗначениеЗаполнено(ПричинаОтменыЗаказовКлиентов) Тогда
		
		КоличествоОбработанных = УстановитьСтатусЗаказаКлиентаЗакрытСОтменойНеотработанныхСтрок(Элементы.Список.ВыделенныеСтроки, ПричинаОтменыЗаказовКлиентов);
		ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, Элементы.Список, "Закрыт");
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСтатусЗакрытСОтменойНеотработанныхСтрок()
