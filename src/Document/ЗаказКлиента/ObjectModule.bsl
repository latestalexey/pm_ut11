#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Рассчитывает сумму неотмененных строк заказа
//
Функция ПолучитьСуммуЗаказанныхСтрок() Экспорт
	
	СуммаЗаказанныхСтрок = 0;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.Отменено КАК Отменено
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.СуммаСНДС),0) КАК СуммаСНДС
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Отменено
	|	И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	ИЛИ (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) И НЕ &ВернутьМногооборотнуюТару)
	|");
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(,"Номенклатура,СуммаСНДС,Отменено"));
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", ВернутьМногооборотнуюТару);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	СуммаЗаказанныхСтрок = Выгрузка[0].СуммаСНДС;
	Возврат СуммаЗаказанныхСтрок;
	
КонецФункции

// Рассчитывает количество заказанных строк заказа
//
Функция ПолучитьКоличествоЗаказанныхСтрок() Экспорт
	
	НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("Отменено", Ложь));
	Возврат НайденныеСтроки.Количество();
	
КонецФункции

// Заполняет табличную часть ЭтапыГрафикаОплаты
//
Процедура ЗаполнитьЭтапыГрафикаОплаты() Экспорт
	
	Если ЗначениеЗаполнено(ГрафикОплаты) Тогда
		
		ПродажиСервер.ЗаполнитьЭтапыГрафикаОплаты(ЭтотОбъект, ПолучитьСуммуЗаказанныхСтрок(), Ложь);
		
	Иначе
		
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			ЭтапыГрафикаОплаты.Очистить();
		КонецЕсли;
		
		Если ПолучитьКоличествоЗаказанныхСтрок() <> 0 Тогда
			
			НовыйЭтап                 = ЭтапыГрафикаОплаты.Добавить();
			НовыйЭтап.ВариантОплаты   = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки;
			НовыйЭтап.ДатаПлатежа     = ?(ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки), ЖелаемаяДатаОтгрузки, Дата);
			НовыйЭтап.ПроцентПлатежа  = 100;
			НовыйЭтап.СуммаПлатежа    = ПолучитьСуммуЗаказанныхСтрок();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж в заказе клиента
//
// Параметры:
//	УсловияПродаж - Структура - Структура для заполнения
//
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж) Экспорт
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = УсловияПродаж.Валюта;
	ХозяйственнаяОперация = УсловияПродаж.ХозяйственнаяОперация;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГрафикОплаты) Тогда
		ГрафикОплаты = УсловияПродаж.ГрафикОплаты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ФормаОплаты) Тогда
		ФормаОплаты = УсловияПродаж.ФормаОплаты;
	КонецЕсли;
	
	НалогообложениеНДС   = УсловияПродаж.НалогообложениеНДС;
	ЦенаВключаетНДС      = УсловияПродаж.ЦенаВключаетНДС;
	ВернутьМногооборотнуюТару = УсловияПродаж.ВозвращатьМногооборотнуюТару;
	СрокВозвратаМногооборотнойТары = УсловияПродаж.СрокВозвратаМногооборотнойТары;
	ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
		Дата,
		УсловияПродаж.СрокВозвратаМногооборотнойТары,
		УсловияПродаж.РассчитыватьДатуВозвратаТарыПоКалендарю);
	
	Если ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация<>Организация Тогда
		Организация = УсловияПродаж.Организация;
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация);
		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Организация, ФормаОплаты);
	КонецЕсли;
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.Контрагент) Тогда
			Контрагент = УсловияПродаж.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
		Договор,
		Партнер,
		Контрагент,
		Организация,
		ХозяйственнаяОперация,
		Валюта,
		Соглашение
	);
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчет, БанковскийСчетКонтрагента);
	
	Если ЗначениеЗаполнено(УсловияПродаж.Склад) Тогда
		Склад = УсловияПродаж.Склад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГруппаФинансовогоУчета) Тогда
		ГруппаФинансовогоУчета = УсловияПродаж.ГруппаФинансовогоУчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.СрокПоставки) Тогда
		ДатаНачала = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
		ЖелаемаяДатаОтгрузки = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачала,Перечисления.Периодичность.День, УсловияПродаж.СрокПоставки) + 1;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по умолчанию в заказе клиента
//
Процедура ЗаполнитьУсловияПродажПоУмолчанию() Экспорт
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	Если ЗначениеЗаполнено (Партнер) ИЛИ Не ИспользоватьСоглашенияСКлиентами Тогда
		
		Если Не ИспользоватьСоглашенияСКлиентами Тогда
			УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
				Партнер,
				Новый Структура("УчитыватьГруппыСкладов, ВыбранноеСоглашение, ХозяйственнаяОперация", Истина, Соглашение, ХозяйственнаяОперация)
			);
		Иначе
			УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
				Партнер,
				Новый Структура("УчитыватьГруппыСкладов, ВыбранноеСоглашение", Истина, Соглашение)
			);
			
		КонецЕсли;
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			
			Если Соглашение <> УсловияПродажПоУмолчанию.Соглашение
				И ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение) Тогда
			
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
				ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
				
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
				ПродажиСервер.ЗаполнитьЦены(
					Товары,
					, // Массив строк или структура отбора
					Новый Структура( // Параметры заполнения
						"Дата, Валюта, Соглашение, ПоляЗаполнения",
						Дата,
						Валюта,
						Соглашение,
						"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
					),
					Новый Структура( // Структура действий с измененными строками
						"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
						"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)
					)
				);
			Иначе
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			КонецЕсли;
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
			Соглашение = Неопределено;
		КонецЕсли;
		
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер,КонтактноеЛицо);
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Партнер);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по соглашению в заказе клиента
//
Процедура ЗаполнитьУсловияПродажПоCоглашению() Экспорт
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение, Истина);
	ЗаполнитьУсловияПродаж(УсловияПродаж);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
	ПродажиСервер.ЗаполнитьЦены(
		Товары,
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, ПоляЗаполнения",
			Дата,
			Валюта,
			Соглашение,
			"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)
		)
	);
	
	БанковскийСчет            = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, , БанковскийСчет);
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
	
КонецПроцедуры

// Осуществляет расчет даты возможной отгрузки в тч Товары
//
Процедура РассчитатьДатыОтгрузки() Экспорт
	
	ПараметрыСостоянияОбеспечения = Новый Структура;
	ПараметрыСостоянияОбеспечения.Вставить("Заказ", Ссылка);
	ПараметрыСостоянияОбеспечения.Вставить("Склад", Склад);
	ПараметрыСостоянияОбеспечения.Вставить("ЖелаемаяДатаОтгрузки", ЖелаемаяДатаОтгрузки);
	ПараметрыСостоянияОбеспечения.Вставить("АдресТовары", ПоместитьВоВременноеХранилище(Товары.Выгрузить()));
	ПараметрыСостоянияОбеспечения.Вставить("ОтборПоСостояниюНаличия", Перечисления.СостоянияНаличия.Любое);
	ПараметрыСостоянияОбеспечения.Вставить("НеОтгружатьЧастями", НеОтгружатьЧастями);
	
	ОбработкаСостояниеОбеспечения = Обработки.СостояниеОбеспечения.Создать();
	
	ОбработкаСостояниеОбеспечения.ПолучитьСостояниеОбеспечения(ПараметрыСостоянияОбеспечения);
	
	Для Каждого СтрокаТовары Из ОбработкаСостояниеОбеспечения.Товары Цикл
		
		СтрокаТовары.Выбран = Не ЗначениеЗаполнено(СтрокаТовары.ДатаОтгрузки) Или НеОтгружатьЧастями;
		
	КонецЦикла;
	
	ОбработкаСостояниеОбеспечения.РассчитатьДляПолнойОтгрузки(ПараметрыСостоянияОбеспечения);
	РезультатРасчета = ОбработкаСостояниеОбеспечения.ПолучитьРезультатРасчета(ПараметрыСостоянияОбеспечения);
	
	Если РезультатРасчета <> Неопределено Тогда
		
		Товары.Загрузить(РезультатРасчета);
		
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет расчет даты возможной отгрузки при отгрузке одной датой
// 
// Параметры:
//	УчитыватьСостояниеОбеспечения - Булево -	если параметр Истина, то используется механизм состояния обеспечения
//												если параметр Ложь, то механизм состояния обеспечения не используется 
//
Процедура РассчитатьДатуОтгрузки(УчитыватьСостояниеОбеспечения = Ложь) Экспорт
	
	Если УчитыватьСостояниеОбеспечения Тогда
		РассчитатьДатыОтгрузки();
	КонецЕсли;
	
	МаксимальнаяДатаОтгрузки = Дата(1,1,1);
	Для Каждого Товар Из Товары Цикл 
		МаксимальнаяДатаОтгрузки = Макс(МаксимальнаяДатаОтгрузки, Товар.ДатаОтгрузки);
		
	КонецЦикла;
	
	ДатаОтгрузки = МаксимальнаяДатаОтгрузки;
	
КонецПроцедуры

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовКлиентов[НовыйСтатус];
	
	Если ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда
		
		Если Согласован Тогда
			Согласован = Ложь;
		КонецЕсли;
		
	ИначеЕсли (Статус <> Перечисления.СтатусыЗаказовКлиентов.Закрыт И
		Статус <> Перечисления.СтатусыЗаказовКлиентов.КОбеспечению И
		Статус <> Перечисления.СтатусыЗаказовКлиентов.КОтгрузке И
		(ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению Или // Если статус меняется на "КОбеспечению"
		ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке)) Тогда // или "КОтгрузке"
		
		РассчитатьДатыОтгрузки();
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ЗначениеПараметра = Неопределено;
		Если ДополнительныеПараметры.Свойство("ОтменаНеотработанныхСтрок", ЗначениеПараметра) Тогда
			
			КоличествоСтрок = ПродажиСервер.ОтменитьНепоставленныеСтроки(
				ЭтотОбъект, 
				"Товары", 
				ЗначениеПараметра, 
				Не (Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован 
					Или Статус = Перечисления.СтатусыЗаказовКлиентов.Согласован
					Или Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению
				)
			);
			Если КоличествоСтрок <> 0 Тогда
				ЗаполнитьЭтапыГрафикаОплаты();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// ИГОРЬ 08 04 2014 
	// Если есть услуга, то она всегда активна
	Для каждого ТекСтрока из АК_УслугиДополнительные цикл
		ТекСтрока.Активность = ИСТИНА;
	КонецЦикла;
	
	
	// ИГОРЬ 08 04 2014
	// Обработаем условия доставки
	
	ЕстьДоставка = АК_БизнесПроцессыСервер.ЕстьДоставка(ЭтотОбъект);
	Если ЕстьДоставка и АК_СамовывозПроизводство тогда
		Отказ = ИСТИНА;
		Сообщить("Указан способ доставки 'самовывоз производство' и указаза услуга доставки! Запись документа невозможна!");
	КонецЕсли;
		
	Если НЕ ЕстьДоставка и АК_Самовывоз тогда
		Отказ = ИСТИНА;
		Сообщить("Указан способ доставки 'самовывоз из чехова', дожна быть добавлена услуга доставки! Запись документа невозможна!");
	КонецЕсли;

	Если АК_Самовывоз и АК_СамовывозПроизводство тогда
		Отказ = ИСТИНА;
		Сообщить("Указаны оба способа доставки! Запись документа невозможна!");
	КонецЕсли;
	
	
	Если НЕ АК_Самовывоз и НЕ АК_СамовывозПроизводство и НЕ ЕстьДоставка тогда
		Отказ = ИСТИНА;
		Сообщить("Должен быть указан способ доставки или добавлена услуга доставки! Запись документа невозможна!");
	КонецЕсли;

	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");
	
	СуммаДокумента = ПолучитьСуммуЗаказанныхСтрок();
	//+++АК
	
	//
	Для Каждого СтрокаТЧ Из Товары Цикл
		Если НЕ СтрокаТЧ.АК_ПризнакНестандарт И ЗначениеЗаполнено(СтрокаТЧ.АК_НестандартОписание) Тогда
			СтрокаТЧ.АК_НестандартОписание = "";
		КонецЕсли;	
	КонецЦикла;	
	
	//
	СтрокиБезКлюча = АК_УслугиДополнительные.НайтиСтроки(Новый Структура("КодСтроки", 0));
	Если СтрокиБезКлюча.Количество() > 0 Тогда

		ТекущийКод = МаксимальныйКодСтроки;

		Для Каждого СтрокаТовары Из СтрокиБезКлюча Цикл

			ТекущийКод = ТекущийКод + 1;
			СтрокаТовары.КодСтроки = ТекущийКод;

		КонецЦикла;

		МаксимальныйКодСтроки = ТекущийКод;

	КонецЕсли;
	
	//
	Для Каждого СтрокаТЧ Из АК_УслугиДополнительные Цикл
		СтрокаТЧ.КоличествоУпаковок = 1;
		СтрокаТЧ.Количество = 1;
	КонецЦикла;	
	
	//
	АК_СуммаРасходов = АК_ПрочиеРасходы.Итог("Сумма");
	
	//---АК
	
	
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		
		ЭтапыГрафикаОплаты.Очистить();
		СуммаАвансаДоОбеспечения = 0;
		СуммаПредоплатыДоОтгрузки = 0;
		
	Иначе
		
		ПродажиСервер.ЗаполнитьСуммыАвансаПредоплаты(ЭтотОбъект);
		
	КонецЕсли;
	
	Если Не НеОтгружатьЧастями Тогда
		НоваяДатаОтгрузки = Дата(1,1,1);
		
		Если Товары.Количество() > 0 Тогда
			
			Если Статус = Перечисления.СтатусыЗаказовКлиентов.Согласован Или
				Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Отменено", Ложь);
				СтрокиКОбеспечению = Товары.НайтиСтроки(ПараметрыОтбора);
				
				Если СтрокиКОбеспечению.Количество() > 0 Тогда
					
					ТаблицаСтрокКОбеспечению = Товары.Выгрузить(СтрокиКОбеспечению, "ДатаОтгрузки");
					ТаблицаСтрокКОбеспечению.Сортировать("ДатаОтгрузки Возр");
					НоваяДатаОтгрузки = ТаблицаСтрокКОбеспечению[0].ДатаОтгрузки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДатаОтгрузки = НоваяДатаОтгрузки;
		
	КонецЕсли;
	
	ДокументСогласован = Согласован;
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(
		ЭтотОбъект,
		РежимЗаписи,
		Перечисления.СтатусыЗаказовКлиентов.НеСогласован
	);
	
	// Установим дату согласования, если документ согласован
	Если Не ДокументСогласован И Согласован Тогда
		ДатаСогласования = ТекущаяДата();
	КонецЕсли;
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаказКлиента.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
		
	МассивРеквизитов = Новый Массив;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Наличная Тогда
		МассивРеквизитов.Добавить("Касса");
	КонецЕсли;
	
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, МассивРеквизитов, Новый Массив);
	
	НоменклатураСервер.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект, НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказКлиента));
	
	Если Не ЗначениеЗаполнено(Назначение) Тогда
		
		ТребуетсяНазначение = Ложь;
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ВариантОбеспечения) Тогда
				ТребуетсяНазначение = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТребуетсяНазначение Тогда 
			Назначение = Справочники.Назначения.ПолучитьСсылку();
		КонецЕсли;
		
	КонецЕсли;
	//+++АК
	Для Каждого СтрокаТЧ Из Товары Цикл
		Если НЕ СтрокаТЧ.АК_ПризнакНестандарт И ЗначениеЗаполнено(СтрокаТЧ.АК_НестандартОписание) Тогда
			СтрокаТЧ.АК_НестандартОписание = "";
		КонецЕсли;	
	КонецЦикла;
	
	//+ Автор
	Если Статус = Перечисления.СтатусыЗаказовКлиентов.Согласован Тогда
		Если Статус <> Ссылка.Статус Тогда
			Если Не ЗначениеЗаполнено(АК_ДатаПоставкиЗаказчику) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Не заполнена ""Дата поставки заказчику""";
				Сообщение.Сообщить();
				Отказ = Истина;
			Иначе
				ЕстьАртикулДМ = Ложь;
				Для Каждого СтрокаТовара Из Товары Цикл
					АртикулДМ = Лев(СтрокаТовара.Номенклатура.Артикул, 2);
					Если АртикулДМ = "ДМ" Тогда
						ЕстьАртикулДМ = Истина;
					КонецЕсли;	
				КонецЦикла;
				Если ЕстьАртикулДМ Тогда
					ДатаСреза = ПолучитьДатуДляПоставкиЗаказчику();
					Если АК_ДатаПоставкиЗаказчику < ДатаСреза Тогда
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = """Дата поставки заказчику"" меньше 35 рабочих дней";
						Сообщение.Сообщить();
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	//-
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Справочники.Назначения.СоздатьОбновитьНазначение(Ссылка, Назначение, Метаданные().Синоним, Номер, Дата);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	ЗаполнитьПоЗначениямАвтозаполнения(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.Партнеры") Тогда
		ЗаполнитьДокументНаОснованииПартнера(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
		ЗаполнитьДокументНаОснованииСделкиПоПродаже(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		ЗаполнитьДокументНаОснованииКоммерческогоПредложенияКлиенту(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		ЗаполнитьДокументНаОснованииИндивидуальногоСоглашенияСКлиентом(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаданиеТорговомуПредставителю") Тогда
		ЗаполнитьДокументНаОснованииЗаданияТорговомуПредставителю(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	//+++АК
	МассивНепроверяемыхРеквизитов.Добавить("АК_ТоварыПредварительно.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("АК_ТоварыЗакупочныеЦены.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("АК_УслугиДополнительные.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура.Наименование
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Ссылка
	|	И ЗаказКлиентаТовары.Номенклатура.Наименование ПОДОБНО &Наименование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказКлиентаАК_УслугиДополнительные.Номенклатура.Наименование
	|ИЗ
	|	Документ.ЗаказКлиента.АК_УслугиДополнительные КАК ЗаказКлиентаАК_УслугиДополнительные
	|ГДЕ
	|	ЗаказКлиентаАК_УслугиДополнительные.Ссылка = &Ссылка
	|	И ЗаказКлиентаАК_УслугиДополнительные.Номенклатура.Наименование ПОДОБНО &Наименование";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("Наименование","%доставка%");
	//есть доставка
	Если Запрос.Выполнить().Выбрать().Количество() > 0 Тогда
		ПроверяемыеРеквизиты.Добавить("АК_КонтактноеЛицоПартнера");	
		ПроверяемыеРеквизиты.Добавить("АК_ПунктНазначения");	
		ПроверяемыеРеквизиты.Добавить("АдресДоставки");			
	КонецЕсли;
	
	
	//---АК	
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	//+++АК НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказКлиента), Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеСодержания(ЭтотОбъект,Отказ,"Товары");

	// Срок действия заказа должен быть не меньше даты документа
	Если Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован И
		ЗначениеЗаполнено(ДатаСогласования) И ДатаСогласования < НачалоДня(ДатаСогласования) Тогда
		
		ТекстОшибки = НСтр("ru='Дата согласования должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата, "ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"СрокДействия",
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если Не НеОтгружатьЧастями ИЛИ 
		НеОтгружатьЧастями И НЕ(Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению Или
			Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Или
			Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт) 
			ИЛИ НеОтгружатьЧастями и ВсеСтрокиОтменены() Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ДатаОтгрузки");
		
	КонецЕсли;
	
	// Желаемая дата отгрузки в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки) И ЖелаемаяДатаОтгрузки < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Желаемая дата отгрузки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаОтгрузки",
			,
			Отказ
		);
		
	КонецЕсли;
	
	// Дата отгрузки в шапке должна быть не меньше даты документа
	Если НеОтгружатьЧастями И 
		ЗначениеЗаполнено(ДатаОтгрузки) И 
		ДатаОтгрузки < НачалоДня(Дата)
		И НЕ ВсеСтрокиОтменены() Тогда
	
		ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаОтгрузки",
			,
			Отказ
		);

	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ПричинаОтмены");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ДатаОтгрузки");
	
	Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
		
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Товары[ТекИндекс].НомерСтроки);
		
		// Дата отгрузки в тч Товары обязательна к заполнению только для заказов в 
		// статусах КОбеспечению, КОтгрузке, Закрыт
		Если Не НеОтгружатьЧастями 
			И (Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению Или
			Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Или
			Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт) И
			Не Товары[ТекИндекс].Отменено И
			Не ЗначениеЗаполнено(Товары[ТекИндекс].ДатаОтгрузки) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата отгрузки""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ДатаОтгрузки"),
				,
				Отказ
			);
			
		КонецЕсли;
		
		// Причина отмены обязательна для заполнения в строках без признака Отменено
		Если Товары[ТекИндекс].Отменено И
			Не ЗначениеЗаполнено(Товары[ТекИндекс].ПричинаОтмены) Тогда
			
			ТекстОшибки = НСтр("ru='Необходимо указать причину отмены'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ПричинаОтмены"),
				,
				Отказ
			);
			
		КонецЕсли;
		
		// Дата отгрузки в тч Товары должна быть не меньше даты документа
		Если Не НеОтгружатьЧастями 
			И ЗначениеЗаполнено(Товары[ТекИндекс].ДатаОтгрузки) 
			И Товары[ТекИндекс].ДатаОтгрузки < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты документа ""%Дата%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Дата%", Формат(Дата, "ДЛФ=DD"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ДатаОтгрузки"),
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Проверка заполнения подразделения для заказа в статусе "КОбеспечению" и выше.
	Если (Статус    = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению 
		 ИЛИ Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке 
		 ИЛИ Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт) Тогда
		 
		ТипыНоменклатурыВТабличнойЧасти = НоменклатураСервер.ПроверитьНаличиеРабот(ЭтотОбъект);
		ПроверятьПодразделение = ТипыНоменклатурыВТабличнойЧасти.ЕстьРаботы; 
		
	Иначе
		
		ПроверятьПодразделение = Ложь;
		
	КонецЕсли;
	
	Если ПроверятьПодразделение И Не ЗначениеЗаполнено(Подразделение) Тогда 
		
		ТекстОшибки = НСтр("ru='Необходимо указать обеспечивающее подразделение для заказываемых работ'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"Подразделение",
			,
			Отказ
		);
			
	КонецЕсли;
	//АК автоматизируем заполнение графика оплаты
	Если ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		ЗаполнитьЭтапыГрафикаОплат();
	КонецЕсли;
	//АК+
	
	//Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
	//	И ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект) <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
	//	
	//	ПродажиСервер.ПроверитьКорректностьЭтаповГрафикаОплаты(ЭтотОбъект, ПолучитьСуммуЗаказанныхСтрок(), Истина, Отказ, Истина);
	//	
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Соглашение) ИЛИ НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "ИспользуютсяДоговорыКонтрагентов") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	ПроверитьИзменениеХозяйственнойОперации(Отказ);
	
	ОтветственныеЛицаСервер.ПроверитьЗаполнениеОтветственныхЛицДокумента(ЭтотОбъект, Отказ);
	
	Если Не Отказ Тогда
		Отказ = ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты);
	КонецЕсли;
	
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект, Отказ);
	
	Отказ = ПроверкаЗаполнения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПроверкаЗаполнения(Объект)                                                                    
	
	Отказ = Ложь;	
	Если  Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению Тогда
		РезМонтажаИДоставки =  новый ТаблицаЗначений;
		РезМонтажаИДоставки.Колонки.Добавить("Услуга");
		Для каждого СтрокаТч ИЗ Объект.Ак_УслугиДополнительные Цикл
			Если  СтрокаТч.номенклатура  = Справочники.Номенклатура.АК_Монтаж 
				ИЛИ СтрокаТч.номенклатура = Справочники.Номенклатура.АК_Доставка Тогда
				
				НоваяСтрока = РезМонтажаИДоставки.добавить();		
				новаяСтрока.Услуга =   СтрокаТч.номенклатура;
			КонецЕсли;	
		КонецЦикла;
		
		РезультатСумПроц = новый ТаблицаЗначений;
		РезультатСумПроц.Колонки.Добавить("Сумма");
		РезультатСумПроц.Колонки.Добавить("Процент");			
		Для каждого СтрокаТч ИЗ Объект.Ак_УслугиДополнительные Цикл
			НоваяСтрока = РезультатСумПроц.добавить();		
			новаяСтрока.Сумма =   СтрокаТч.Ак_Сумма;
			новаяСтрока.Процент = СтрокаТч.Ак_Процент;		
		КонецЦикла;
		
		Для каждого   Строка Из РезультатСумПроц Цикл
			Если  строка.Сумма = 0  И  строка.Процент = 0  Тогда 
				ТекстСообщения = "Не указана сумма или процент на вкладке: Услуги(Дополнительные)";
				Поле  = "АК_сумма";
				ключДанных = объект.ссылка;
				ПутьКДанным ="объект" ;				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ключДанных,Поле,ПутьКДанным,Истина);	
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если  РезМонтажаИДоставки.количество()= 0 Тогда
			Если Объект.АК_Самовывоз = Истина ИЛИ Объект.АК_СамовывозПроизводство = Истина Тогда
				//Ничего не делать
			Иначе
				ТекстСообщения = "Не заполнены услуги или способ самовывоза";
				ключДанных = объект.ссылка;
				Поле  = "АК_СамовывозПроизводство";
				ПутьКДанным ="объект" ;				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ключДанных,Поле,ПутьКДанным,Истина);
				Отказ = Истина;
				
				ключДанных = объект.ссылка;
				Поле  = "АК_Самовывоз";
				ПутьКДанным ="объект" ;	
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ключДанных,Поле,ПутьКДанным,Истина);			
				Отказ = Истина;	
			КонецЕсли;
		Иначе
			Если  НЕ (объект.АК_ПунктНазначения  <> Справочники.АК_ПунктыНазначения.ПустаяСсылка() И
				объект.АК_ПунктНазначения.КонтактноеЛицоПартнера <> Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка() И
				объект.АдресДоставки <> "") Тогда
				
				Если  объект.АК_ПунктНазначения  = Справочники.АК_ПунктыНазначения.ПустаяСсылка()  тогда	
					ТекстСообщения = "Не заполнено поле";
					ключДанных = объект.ссылка;
					Поле  = "АК_ПунктНазначения";
					ПутьКДанным ="объект" ;	
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ключДанных,Поле,ПутьКДанным,Истина);	
					Отказ = Истина;
				КонецЕсли;
				
				Если  объект.АдресДоставки = "" тогда					   
					ТекстСообщения = "Не заполнено поле";
					ключДанных = объект.ссылка;
					Поле  = "АдресДоставки";
					ПутьКДанным ="объект" ;	
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ключДанных,Поле,ПутьКДанным,Истина);
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;				
		КонецЕсли;	
	КонецЕсли;
	
	
	Возврат Отказ;
КонецФункции

&наСервере
Функция  ПроверкаЗаполненияТоваров(ДанныеВвода)   
	
	
	ЗаказКлиента1 = ДанныеВвода;
	Если ДанныеВвода.АК_ПризнакРекламация=Ложь И ТипЗнч(ЗаказКлиента1.документОснование) = тип("Неопределено") ТОГДА
		
		Сообщить("Не заполнена ни рекламация, ни Коммерческое предложение!");
		Отказ=Истина;
		
	ИначеЕсли ДанныеВвода.АК_ПризнакРекламация=Ложь И ТипЗнч(ЗаказКлиента1) <> тип("Неопределено") Тогда
		//Взять табличную часть из ЗАказа Клиента	
		Запрос1 = новый Запрос;
		Запрос1.Текст = " 
		|Выбрать 
		| * ИЗ Документ.ЗаказКлиента.товары
		|Где документ.заказКлиента.товары.ссылка = &ЗаказаКлиента
		|;	
		| ////////////////////////////////////////////
		|
		|Выбрать 
		|*  ИЗ Документ.КоммерческоеПредложениеКлиенту.товары
		|Где Документ.КоммерческоеПредложениеКлиенту.Товары.Ссылка = &КоммерческоеПредложение";	
		
		Запрос1.УстановитьПараметр("ЗаказаКлиента", ДанныеВвода.ссылка);
		Запрос1.УстановитьПараметр("КоммерческоеПредложение", ДанныеВвода.документОснование);
		
		//ТБ1 = Запрос1.Выполнить().Выгрузить();
		РезультатЗапроса = Запрос1.ВыполнитьПакет();
		
		ТБ1 = РезультатЗапроса[0].Выгрузить();
		ТБ2 = РезультатЗапроса[1].Выгрузить();
		
		
		МассивОшибок = новый Массив;
		ТекстОшибки = "";
		Если ТБ1.Количество()<>Тб2.Количество() Тогда
			ТекстОшибки = "Количество товаров не совпадает!";
			//ДанныеВвода.РезультатВыполнения = ДанныеВвода.РезультатВыполнения + ТекстОшибки ;
			Отказ = Истина;
			возврат отказ;	
		КонецЕсли;
		
		ТаблицаСоответсвий = новый соответствие; 
		ТаблицаСоответсвий.Вставить("Ссылка",1);
		ТаблицаСоответсвий.Вставить("КлючСвязи",1);
		
		
		Для каждого строка из ТБ1 Цикл
			Для каждого колонка из ТБ1.Колонки Цикл
				Имя = Колонка.Имя;
				//	Если Имя = "Ссылка"  ИЛИ Имя = "КлючСвязи" Тогда
				Если ТаблицаСоответсвий[имя]=1 тогда
					Продолжить; 
				Иначе
					Индекс=Тб1.Индекс(строка);
					Если  ТБ2.Колонки.Найти(Имя)=Неопределено ТОгда
						
						Продолжить;
					КонецЕсли;
					
					Если строка[Имя]=Тб2[Индекс][имя] тогда
						Продолжить;
					Иначе
						ТекстОшибки = Символы.ПС + "Строка: " + (Индекс+1)  + " в столбце: " + Имя   ; 
						Если Имя <> "АК_ИнформацияДляОтделаЗакупки" тогда
							МассивОшибок.Добавить(ТекстОшибки); 
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		ТекстОшибки = "";
		Для каждого ЭлементМассива из МассивОшибок Цикл
			ТекстОшибки = ТекстОшибки + " " + ЭлементМассива;
		КонецЦикла;
		
		Отказ = Ложь;	
		Если ТекстОшибки <> ""  Тогда
			Сообщить("Ошибки были обнаружены: " + текстОшибки);
			//ДанныеВвода.РезультатВыполнения = "Были обнаружены ошибки заполнения: ";
			Отказ=Истина;
		КонецЕсли;
		
		
	Иначе
		//Возврат 
		Отказ=Ложь;
	КонецЕсли;
	Возврат Отказ;
КонецФункции





Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ЗаказКлиента.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	ЗаказыСервер.ОтразитьЗаказыКлиентов(ДополнительныеСвойства, Движения, Отказ);
	
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьРезервыСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьОбеспечениеЗаказовРаботами(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентамиПоследовательность(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	// АК Игорь 20 02 2013
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",Справочники.Номенклатура.НайтиПоНаименованию("Доставка"));
	СтруктураПоиска.Вставить("Активность",Истина);
	
	НайденныеСтроки = АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 тогда
		ЕстьДоставка = Истина;
	Иначе
		ЕстьДоставка = Ложь;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",Справочники.Номенклатура.НайтиПоНаименованию("Монтаж"));
	СтруктураПоиска.Вставить("Активность",Истина);
	
	НайденныеСтроки = АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 тогда
		ЕстьМонтаж = Истина;
	Иначе
		ЕстьМонтаж = Ложь;
	КонецЕсли;
	
	Если ЕстьДоставка или ЕстьМонтаж тогда
		Движения.АК_СтатусДоставкиМонтажа.Записывать = Истина;
		Для каждого ТекСтр из Товары цикл
			НоваяЗапись = Движения.АК_СтатусДоставкиМонтажа.Добавить();
			НоваяЗапись.Активность = Истина;
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяЗапись.Доставка = ?(ЕстьДоставка,ТекСтр.Количество,0);
			НоваяЗапись.Монтаж = ?(ЕстьМонтаж,ТекСтр.Количество,0);
			НоваяЗапись.Номенклатура =ТекСтр.Номенклатура;
			НоваяЗапись.Период = Дата;
			НоваяЗапись.Характеристика = ТекСтр.Характеристика;
			НоваяЗапись.ЗаказКлиента = Ссылка;
		КонецЦИкла;
	КонецЕсли;
	
	
	// проверка на наличие договора
	//Отказ = ПроверкаПрикрепленияДоговора(ссылка);
	
	ПроверкаЗаполненияТоваров(ЭтотОбъект);
	
	//	   Отказ = ПроверкаПрикрепленияСчета(ссылка);
КонецПроцедуры


Функция ПроверкаПрикрепленияДоговора(СсылкаНаЗаказ)
	
	Отказ = ЛОЖЬ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКлиентаПрисоединенныеФайлы.Ссылка,
	|	ЗаказКлиента.Проведен,
	|	ЗаказКлиента.Партнер
	|ИЗ
	|	Справочник.ЗаказКлиентаПрисоединенныеФайлы КАК ЗаказКлиентаПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО ЗаказКлиентаПрисоединенныеФайлы.ВладелецФайла = ЗаказКлиента.Ссылка
	|ГДЕ
	|	ЗаказКлиентаПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ЗаказКлиентаПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаЗаказ);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если  СсылкаНаЗаказ.партнер = константы.АК_ДокторМебель.Получить() Тогда
		Отказ = ЛОЖЬ;		
	иначеЕсли Результат.Количество()=0  Тогда
		Отказ = Истина;
	иначеЕсли Результат.Количество()>0  Тогда		
		Для каждого Строка из Результат  Цикл
			Если НАйти(СТРОКА(строка.ссылка),"оговор") <> 0  ТОГДА
				Отказ = ЛОЖЬ;		
			КонецЕсли;			
		КонецЦикла;			
	КонецЕсли;
	
	
	
	Возврат Отказ;
КонецФункции


Функция ПроверкаПрикрепленияСчета(СсылкаНаЗаказ)
	// проверка продукции ДМ
	
	ЕСЛИ ДокументОснование<>Документы.КоммерческоеПредложениеКлиенту.ПустаяСсылка() ТОГДА	
		// Проверка наличия счета
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиентаПрисоединенныеФайлы.Ссылка,
		|	ЗаказКлиента.Проведен,
		|	ЗаказКлиента.Партнер,
		|	ЗаказКлиентаПрисоединенныеФайлы.ДатаСоздания,
		|	ЗаказКлиентаПрисоединенныеФайлы.ДатаМодификацииУниверсальная
		|ИЗ
		|	Справочник.ЗаказКлиентаПрисоединенныеФайлы КАК ЗаказКлиентаПрисоединенныеФайлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ПО ЗаказКлиентаПрисоединенныеФайлы.ВладелецФайла = ЗаказКлиента.Ссылка
		|ГДЕ
		|	ЗаказКлиентаПрисоединенныеФайлы.ВладелецФайла = &Ссылка
		|	И ЗаказКлиентаПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаЗаказ);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		
		ДатаИзменения = '00010101000000'; 
		НомерСчета="";
		ДатаСчета= ДатаИзменения;
		Для каждого Строка из Результат  Цикл
			Если НАйти(СТРОКА(строка.ссылка),"чет") <> 0 ИЛИ 
				НАйти(СТРОКА(строка.ссылка),"чёт") <> 0 ТОГДА
				Если ДатаИзменения <  строка.ДатаМодификацииУниверсальная Тогда
					ДатаИзменения = строка.ДатаМодификацииУниверсальная; 
					Индекс = Результат.Индекс(Строка);
					Счет = Результат.Получить(Индекс);
					
					Если  НомерПоДаннымКлиента="" Тогда
						НачалоНомера = Найти(Нрег(Строка(Строка.ссылка)),"№");
						ДлинаСтроки = СтрДлина(Строка(Строка.ссылка)); 
						КонецНомера = Найти(Нрег(Строка(Строка.ссылка)),"от");						
						НомерСчета = Сред(Строка(Строка.ссылка),НачалоНомера+1, КонецНомера-НачалоНомера-1);
						
						
					КонецЕсли;
					
					Если  ДатаПоДаннымКлиента='00010101000000' Тогда
						НачалоДаты = КонецНомера+2;
						День = Сред(Строка(Строка.ссылка),НачалоДаты+1,2);
						месяц = Сред(Строка(Строка.ссылка),НачалоДаты+4,2);
						год = Сред(Строка(Строка.ссылка),НачалоДаты+7,2);												
						ДатаСчета = "20"+Год + месяц + день+"000000";
					КонецЕсли;
					
					Отказ = ЛОЖЬ;		
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если  ДатаПоДаннымКлиента='00010101000000' Тогда
			Попытка
				ДатаСчета =  Дата(Формат(ДатаСчета, "ДФ=""20ггММдд000000"""));
			Исключение
				ДатаПоДаннымКлиента='00010101000000';
				Сообщить("Дата не записана в формате **:**:****");
			КонецПопытки;						
			ДатаПоДаннымКлиента=ДатаСчета;
		КонецЕсли;
		
		Если  НомерПоДаннымКлиента="" Тогда
			НомерПоДаннымКлиента= СокрЛП(НомерСчета);
		КонецЕсли;
		
		Если ДатаПоДаннымКлиента='00010101000000' ИЛИ НомерПоДаннымКлиента="" Тогда
			Отказ = ИСТИНА;
		КонецЕсли;
		
	КонецЕсли;	 
	
	
	Возврат Отказ;
КонецФункции

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Статус                 = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	ЖелаемаяДатаОтгрузки   = Дата(1,1,1);
	ДатаОтгрузки           = Дата(1,1,1);
	ДатаСогласования       = Дата(1,1,1);
	МаксимальныйКодСтроки  = 0;
	Согласован             = Ложь;
	ДокументОснование      = Неопределено;
	НомерПоДаннымКлиента   = "";
	ДатаПоДаннымКлиента    = Дата(1,1,1);
	Назначение             = Неопределено;
	СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение, Истина);
		Если ЗначениеЗаполнено(УсловияПродаж.СрокПоставки) Тогда
			
			ДатаНачала = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
			ЖелаемаяДатаОтгрузки = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачала, Перечисления.Периодичность.День, УсловияПродаж.СрокПоставки) + 1;
			
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьОбособленноеОбеспечениеЗаказов = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	Для Каждого СтрокаТЧ Из Товары Цикл
		
		СтрокаТЧ.КодСтроки      = 0;
		СтрокаТЧ.ДатаОтгрузки   = Дата(1,1,1);
		СтрокаТЧ.УказыватьСерии = Ложь;
		
		Если Не ИспользоватьОбособленноеОбеспечениеЗаказов Тогда
			СтрокаТЧ.ВариантОбеспечения = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	Серии.Очистить();
	
	Для Каждого СтрокаТЧ Из ЭтапыГрафикаОплаты Цикл
		СтрокаТЧ.ДатаПлатежа = Дата(1,1,1);
	КонецЦикла;
	
	СкидкиРассчитаны = Ложь;
	СкидкиНаценкиСервер.ОтменитьСкидки(ЭтотОбъект, "Товары", Истина);
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ЗаполнитьДокументНаОснованииПартнера(Знач Основание)
	
	Партнер = Основание;
	ЗаполнитьУсловияПродажПоУмолчанию();
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииСделкиПоПродаже(Основание)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СделкиСКлиентами.Ссылка КАК Сделка,
	|	СделкиСКлиентами.Партнер КАК Партнер,
	|	СделкиСКлиентами.СоглашениеСКлиентом КАК Соглашение,
	|	СделкиСКлиентамиПартнерыИКонтактныеЛица.КонтактноеЛицо КАК КонтактноеЛицо
	|ИЗ
	|	Справочник.СделкиСКлиентами КАК СделкиСКлиентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СделкиСКлиентами.ПартнерыИКонтактныеЛица КАК СделкиСКлиентамиПартнерыИКонтактныеЛица
	|		ПО (СделкиСКлиентамиПартнерыИКонтактныеЛица.Ссылка = СделкиСКлиентами.Ссылка)
	|			И (СделкиСКлиентамиПартнерыИКонтактныеЛица.Партнер = СделкиСКлиентами.Партнер)
	|			И (СделкиСКлиентамиПартнерыИКонтактныеЛица.КонтактноеЛицо <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
	|ГДЕ
	|	СделкиСКлиентами.Ссылка = &Основание");
	
	Запрос.УстановитьПараметр("Основание",Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСделкиПоПродаже(Выборка.Партнер);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		ЗаполнитьУсловияПродажПоCоглашению();
	Иначе
		ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииИндивидуальногоСоглашенияСКлиентом(Знач ДокументОснование)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СоглашениеСКлиентом.Ссылка         КАК Соглашение,
	|	СоглашениеСКлиентом.Партнер        КАК Партнер,
	|	СоглашениеСКлиентом.КонтактноеЛицо КАК КонтактноеЛицо,
	|
	|	СоглашениеСКлиентом.Статус      КАК СтатусДокумента,
	|	ВЫБОР
	|		КОГДА
	|			СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|		ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	СоглашениеСКлиентом.Типовое КАК ЕстьОшибкиТиповое
	|
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
	|ГДЕ
	|	СоглашениеСКлиентом.Ссылка = &ДокументОснование
	|");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Выборка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыСоглашенийСКлиентами.Действует);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСоглашения(Выборка.ЕстьОшибкиТиповое);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
	Выборка.Соглашение,
	Выборка.СтатусДокумента,
	,
	Выборка.ЕстьОшибкиСтатус,
	МассивДопустимыхСтатусов
	);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	ЗаполнитьУсловияПродажПоCоглашению();
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииКоммерческогоПредложенияКлиенту(Знач Основание)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Ссылка КАК ДокументОснование,
	|	КоммерческоеПредложениеКлиенту.Партнер КАК Партнер,
	|	КоммерческоеПредложениеКлиенту.Сделка КАК Сделка,
	|	КоммерческоеПредложениеКлиенту.Валюта КАК Валюта,
	|	КоммерческоеПредложениеКлиенту.СуммаДокумента КАК СуммаДокумента,
	|	КоммерческоеПредложениеКлиенту.СрокПоставки КАК СрокПоставки,
	|	КоммерческоеПредложениеКлиенту.ГрафикОплаты КАК ГрафикОплаты,
	|	КоммерческоеПредложениеКлиенту.Организация КАК Организация,
	|	КоммерческоеПредложениеКлиенту.Соглашение КАК Соглашение,
	|	КоммерческоеПредложениеКлиенту.Соглашение.ПорядокОплаты КАК ПорядокОплаты,
	|	КоммерческоеПредложениеКлиенту.Соглашение.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	КоммерческоеПредложениеКлиенту.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	КоммерческоеПредложениеКлиенту.НалогообложениеНДС КАК НалогообложениеНДС,
	|	КоммерческоеПредложениеКлиенту.ФормаОплаты КАК ФормаОплаты,
	|	КоммерческоеПредложениеКлиенту.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	КоммерческоеПредложениеКлиенту.Склад КАК Склад,
	|	КоммерческоеПредложениеКлиенту.Статус КАК СтатусДокумента,
	|	КоммерческоеПредложениеКлиенту.КартаЛояльности КАК КартаЛояльности,
	|	КоммерческоеПредложениеКлиенту.СостояниеЗаполненияМногооборотнойТары КАК СостояниеЗаполненияМногооборотнойТары,
	|	КоммерческоеПредложениеКлиенту.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
	|	КоммерческоеПредложениеКлиенту.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
	|	(НЕ КоммерческоеПредложениеКлиенту.Проведен) КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	КоммерческоеПредложениеКлиенту.СпособДоставки КАК СпособДоставки,
	|	КоммерческоеПредложениеКлиенту.Товары.(
	|		НомерСтроки КАК НомерСтроки,
	|		КлючСвязи КАК КлючСвязи,
	|		Номенклатура КАК Номенклатура,
	|		Номенклатура.НаименованиеПолное КАК НаименованиеНоменклатурыПолное,
	|		Характеристика КАК Характеристика,
	|		Характеристика.НаименованиеПолное КАК НаименованиеХарактеристикиПолное,
	|		Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
	|		Упаковка КАК Упаковка,
	|		КоличествоУпаковок КАК КоличествоУпаковок,
	|		Количество КАК Количество,
	|		ВидЦены КАК ВидЦены,
	|		Цена КАК Цена,
	|		ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		СуммаСНДС КАК СуммаСНДС,
	|		Сумма КАК Сумма,
	|		Активность КАК Активность,
	|		ВЫБОР
	|			КОГДА КоммерческоеПредложениеКлиенту.Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|					ИЛИ КоммерческоеПредложениеКлиенту.Склад.ЭтоГруппа
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ИНАЧЕ КоммерческоеПредложениеКлиенту.Склад
	|		КОНЕЦ КАК Склад,
	|		ТекстовоеОписание КАК АК_ТекстовоеОписание,
	|		АК_ПризнакНестандарт КАК АК_ПризнакНестандарт,
	|		АК_НестандартОписание КАК АК_НестандартОписание,
	|		АК_ПризнакЭскиз КАК АК_ПризнакЭскиз,
	|		АК_ЭскизФайл КАК АК_ЭскизФайл,
	|		АК_ИнформацияДляОтделаЗакупки КАК АК_ИнформацияДляОтделаЗакупки,
	|		АК_ДопКомплектация КАК АК_ДопКомплектация,
	|		АК_ПроцентНаценкиДоставка,
	|		АК_ПроцентНаценкиМонтаж,
	|		АК_ДопУслугиСумма,
	|		АК_ДопУслугиСуммаНДС,
	|		АК_ПунктДоставки,
	|		АК_ПунктМонтажа
	|	) КАК Товары,
	|	КоммерческоеПредложениеКлиенту.АК_УслугиДополнительные.(
	|		НомерСтроки КАК НомерСтроки,
	|		КлючСвязи КАК КлючСвязи,
	|		Номенклатура КАК Номенклатура,
	|		АК_Процент,
	|		Характеристика КАК Характеристика,
	|		Упаковка КАК Упаковка,
	|		КоличествоУпаковок КАК КоличествоУпаковок,
	|		Количество КАК Количество,
	|		ВидЦены КАК ВидЦены,
	|		Цена КАК Цена,
	|		ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Сумма КАК Сумма,
	|		Активность КАК Активность,
	|		ВЫБОР
	|			КОГДА КоммерческоеПредложениеКлиенту.АК_УслугиДополнительные.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|					ИЛИ КоммерческоеПредложениеКлиенту.Склад.ЭтоГруппа
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ИНАЧЕ КоммерческоеПредложениеКлиенту.Склад
	|		КОНЕЦ КАК Склад,
	|		АК_ПризнакРаспределитьНаТовары,
	|		АК_ПунктНазначения
	|	) КАК УслугиДополнительные,
	|	КоммерческоеПредложениеКлиенту.СкидкиНаценки.(
	|		КлючСвязи КАК КлючСвязи,
	|		СкидкаНаценка КАК СкидкаНаценка,
	|		Сумма КАК Сумма
	|	) КАК СкидкиНаценки,
	|	КоммерческоеПредложениеКлиенту.КонтактноеЛицо КАК КонтактноеЛицо,
	|	КоммерческоеПредложениеКлиенту.АК_ПунктНазначения,
	|	КоммерческоеПредложениеКлиенту.АК_УсловияПоставки		
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка = &Основание");
	
	Запрос.УстановитьПараметр("Основание",Основание);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
	Выборка.ДокументОснование,
	Выборка.СтатусДокумента,
	Выборка.ЕстьОшибкиПроведен,
	Выборка.ЕстьОшибкиСтатус,
	МассивДопустимыхСтатусов
	);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	ДатаНачала = ?(ЗначениеЗаполнено(Дата),Дата,ТекущаяДата());
	
	Если ЗначениеЗаполнено(Выборка.СрокПоставки) Тогда
		ЖелаемаяДатаОтгрузки = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачала, Перечисления.Периодичность.День, Выборка.СрокПоставки) + 1;
	КонецЕсли;
	
	// ИГОРЬ 08 04 2014
	// Все равно на галочку выбрана, должны удалять из Кп
	
	//ПараметрыОтбора = Новый Структура;
	//ПараметрыОтбора.Вставить("Активность", Истина);
	
	ТаблицаТовары = Выборка.Товары.Выгрузить();
	// Без отбора
	ТаблицаТовары = ТаблицаТовары.Скопировать();
	//ТаблицаТовары = ТаблицаТовары.Скопировать(ПараметрыОтбора);
	ТаблицаТовары.Сортировать("НомерСтроки Возр");
	
	Для Каждого ТекСтрока Из ТаблицаТовары Цикл
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		Если ТекСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот Тогда
			НоваяСтрока.Содержание = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			ТекСтрока.НаименованиеНоменклатурыПолное, 
			ТекСтрока.НаименованиеХарактеристикиПолное
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//+++АК	
	//
	АК_УслугиДополнительные.Очистить();
	
	//
	_спУслуги = Новый СписокЗначений;
	_спУслуги.Добавить(Справочники.Номенклатура.АК_ДоставкаАгент);
	_спУслуги.Добавить(Справочники.Номенклатура.АК_ДоставкаКлиент);
	_спУслуги.Добавить(Справочники.Номенклатура.АК_МонтажАгент);
	_спУслуги.Добавить(Справочники.Номенклатура.АК_МонтажКлиент);
	
	//
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Активность", Истина);
	
	//
	ТаблицаУслуги = Выборка.УслугиДополнительные.Выгрузить();
	ТаблицаУслуги = ТаблицаУслуги.Скопировать(ПараметрыОтбора);
	ТаблицаТовары.Сортировать("НомерСтроки Возр");
	
	Для Каждого СтрокаТЗ Из ТаблицаУслуги Цикл
		
		Если СтрокаТЗ.АК_ПризнакРаспределитьНаТовары 
			ИЛИ _спУслуги.НайтиПоЗначению(СтрокаТЗ.Номенклатура) <> Неопределено Тогда
			
			НоваяСтрока = АК_УслугиДополнительные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			// ИГОРЬ 08 04 2014
			// А сумму тоже заполнять нужно
			НоваяСтрока.АК_Сумма = СтрокаТЗ.Сумма;
		Иначе	
			//НоваяСтрока = Товары.Добавить();
			//ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		КонецЕсли;	
		
	КонецЦикла;	
	
	//---АК	
	
	СоответствиеСтрокиДляУдаления = Новый Соответствие;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
	Договор,
	Партнер,
	Контрагент,
	Организация,
	ХозяйственнаяОперация,
	Валюта,
	Соглашение
	);
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчет, БанковскийСчетКонтрагента);
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", Новый СписокЗначений);
	
	//СкидкиНаценки.Загрузить(Выборка.СкидкиНаценки.Выгрузить());
	//СкидкиНаценкиСервер.РассчитатьПоЗаказуКлиента(ЭтотОбъект, СтруктураПараметры);
	//СкидкиРассчитаны = Истина;
	
	Если ЗначениеЗаполнено(ГрафикОплаты) Тогда
		ПродажиСервер.ЗаполнитьЭтапыГрафикаОплаты(ЭтотОбъект, ПолучитьСуммуЗаказанныхСтрок(), Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииЗаданияТорговомуПредставителю(Знач Основание)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаданиеТорговомуПредставителю.Ссылка КАК ДокументОснование,
		|	ЗаданиеТорговомуПредставителю.Организация КАК Организация,
		|	ЗаданиеТорговомуПредставителю.Партнер КАК Партнер,
		|	ЗаданиеТорговомуПредставителю.Контрагент КАК Контрагент,
		|	ЗаданиеТорговомуПредставителю.Договор КАК Договор,
		|	ЗаданиеТорговомуПредставителю.Соглашение КАК Соглашение,
		|	ЗаданиеТорговомуПредставителю.Соглашение.ПорядокОплаты КАК ПорядокОплаты,
		|	ЗаданиеТорговомуПредставителю.Валюта КАК Валюта,
		|	ЗаданиеТорговомуПредставителю.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ЗаданиеТорговомуПредставителю.ГрафикОплаты КАК ГрафикОплаты,
		|	ЗаданиеТорговомуПредставителю.Склад КАК Склад,
		|	ЗаданиеТорговомуПредставителю.ФормаОплаты КАК ФормаОплаты,
		|	ЗаданиеТорговомуПредставителю.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
		|	ЗаданиеТорговомуПредставителю.НеОтгружатьЧастями КАК НеОтгружатьЧастями,
		|	ЗаданиеТорговомуПредставителю.Статус КАК СтатусДокумента,
		|	ЗаданиеТорговомуПредставителю.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ЗаданиеТорговомуПредставителю.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ЗаданиеТорговомуПредставителю.СостояниеЗаполненияМногооборотнойТары КАК СостояниеЗаполненияМногооборотнойТары,
		|	ЗаданиеТорговомуПредставителю.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	ЗаданиеТорговомуПредставителю.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
		|	ВЫБОР
		|		КОГДА ЗаданиеТорговомуПредставителю.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийТорговымПредставителям.КОтработке)
		|				ИЛИ ЗаданиеТорговомуПредставителю.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийТорговымПредставителям.Отработано)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	ЗаданиеТорговомуПредставителю.Товары.(
		|		Номенклатура КАК Номенклатура,
		|		Характеристика КАК Характеристика,
		|		Количество КАК Количество,
		|		Упаковка КАК Упаковка,
		|		КоличествоУпаковок КАК КоличествоУпаковок,
		|		Цена КАК Цена,
		|		Сумма КАК Сумма,
		|		ВидЦены КАК ВидЦены,
		|		СтавкаНДС КАК СтавкаНДС,
		|		СуммаНДС КАК СуммаНДС,
		|		СуммаСНДС КАК СуммаСНДС,
		|		ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|		ПричинаОтмены КАК ПричинаОтмены,
		|		Содержание КАК Содержание,
		|		ВЫБОР
		|			КОГДА ЗаданиеТорговомуПредставителю.Товары.ПричинаОтмены = ЗНАЧЕНИЕ(Справочник.ПричиныОтменыЗаказовКлиентов.ПустаяСсылка)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ КАК Отменено,
		|		ВЫБОР
		|			КОГДА ЗаданиеТорговомуПредставителю.Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИНАЧЕ ЗаданиеТорговомуПредставителю.Склад
		|		КОНЕЦ КАК Склад
		|	) КАК Товары,
		|	ЗаданиеТорговомуПредставителю.ЭтапыГрафикаОплаты.(
		|		ВариантОплаты КАК ВариантОплаты,
		|		ДатаПлатежа КАК ДатаПлатежа,
		|		ПроцентПлатежа КАК ПроцентПлатежа,
		|		СуммаПлатежа КАК СуммаПлатежа,
		|		НомерСтроки КАК НомерСтроки
		|	) КАК ЭтапыГрафикаОплаты
		|ИЗ
		|	Документ.ЗаданиеТорговомуПредставителю КАК ЗаданиеТорговомуПредставителю
		|ГДЕ
		|	ЗаданиеТорговомуПредставителю.Ссылка = &Основание");
	
	Запрос.УстановитьПараметр("Основание",Основание);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаданийТорговымПредставителям.Отработано);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.ДокументОснование,
		Выборка.СтатусДокумента,
		,
		Выборка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов
	);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
			Договор,
			Партнер,
			Контрагент,
			Организация,
			ХозяйственнаяОперация,
			Валюта,
			Соглашение
		);
	КонецЕсли;
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчет, БанковскийСчетКонтрагента);
	
	Если НЕ ЗначениеЗаполнено(Статус) Тогда
		Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	КонецЕсли;
	
	ТаблицаТовары = Выборка.Товары.Выгрузить();
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Количество",0);
	ТаблицаТовары = Выборка.Товары.Выгрузить();
	
	// Найдем и удалим из таблицы строки с нулевым количеством
	НулевыеСтроки = ТаблицаТовары.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого ТекЭлемент Из НулевыеСтроки Цикл
		ТаблицаТовары.Удалить(ТекЭлемент);
	КонецЦикла;
	
	Товары.Загрузить(ТаблицаТовары);

	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
	СтруктураПараметры.Вставить("УправляемыеСкидки", Неопределено);
	
	СкидкиНаценкиСервер.РассчитатьПоЗаказуКлиента(ЭтотОбъект, СтруктураПараметры);
	СкидкиРассчитаны = Истина;
	
	ТаблицаЭтаповОплаты = Выборка.ЭтапыГрафикаОплаты.Выгрузить();
	
	// Если в задании заполнены этапы графиков оплаты - скопируем их
	Если ТаблицаЭтаповОплаты.Количество() > 0 Тогда
		ЭтапыГрафикаОплаты.Загрузить(ТаблицаЭтаповОплаты);
	ИначеЕсли ЗначениеЗаполнено(ГрафикОплаты) Тогда
		ПродажиСервер.ЗаполнитьЭтапыГрафикаОплаты(ЭтотОбъект, ПолучитьСуммуЗаказанныхСтрок(), Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		
		Партнер = ДанныеЗаполнения.Партнер;
		ЗаполнитьУсловияПродажПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗначениямАвтозаполнения(ДанныеЗаполнения = Неопределено)
	
	ЕстьДанныеЗаполнения = (НЕ ДанныеЗаполнения = Неопределено);
	ДанныеЗаполненияСтруктура = (ТипЗнч(ДанныеЗаполнения) = Тип("Структура"));
	
	Если Не ЕстьДанныеЗаполнения Или ДанныеЗаполненияСтруктура Тогда
		// Заполним основные свойства
		СвойстваАвтозаполнения = Новый Структура("Организация, Склад, ХозяйственнаяОперация");
		
		Если ДанныеЗаполненияСтруктура Тогда
			ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(СвойстваАвтозаполнения, ДанныеЗаполнения, Истина);
			
		КонецЕсли;
		
		ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(Ссылка, СвойстваАвтозаполнения);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваАвтозаполнения);
		
		// Заполним банковский счет и кассу в зависимости от органиазции
		СвойстваАвтозаполнения = Новый Структура("Организация, БанковскийСчет, Касса", Организация);
		
		Если ДанныеЗаполненияСтруктура Тогда
			ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(СвойстваАвтозаполнения, ДанныеЗаполнения, Истина);
			
		КонецЕсли;
		
		ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(Ссылка, СвойстваАвтозаполнения);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваАвтозаполнения);
		
	КонецЕсли;

КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Менеджер                  = Пользователи.ТекущийПользователь();
	Валюта                    = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
	Организация               = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	БанковскийСчет            = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, , БанковскийСчет);
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
	Касса                     = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Организация, ФормаОплаты, Касса);
	Подразделение             = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Менеджер, Подразделение);
	Склад                     = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовКлиентов") Тогда
		Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
	КонецЕсли;
	ОтветственныеЛицаСервер.ЗаполнитьОтветственныхЛицДокумента(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ЗаказыКлиентов);
		Массив.Добавить(Движения.ОбеспечениеЗаказовРаботами);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ДвижениеТоваров);
		Массив.Добавить(Движения.РасчетыСКлиентами);
		Если НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказКлиента).ИспользоватьСерииНоменклатуры Тогда
			Массив.Добавить(Движения.РезервыСерийТоваров);
		КонецЕсли;

	КонецЕсли;
	
	Массив.Добавить(Движения.ОбеспечениеЗаказов);
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	
КонецПроцедуры

Процедура ПроверитьИзменениеХозяйственнойОперации(Отказ)
	
	Если Не ЭтоНовый() И ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РасчетыСКлиентами.СуммаРасход КАК СуммаОплаты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Обороты(,,Период,
		|		ЗаказКлиента = &Ссылка
		|	) КАК РасчетыСКлиентами
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Документ.ЗаказКлиента КАК ДанныеДокумента
		|	ПО
		|		ДанныеДокумента.Ссылка = &Ссылка
		|		И ДанныеДокумента.ХозяйственнаяОперация <> &ХозяйственнаяОперация
		|ГДЕ
		|	РасчетыСКлиентами.СуммаРасход > 0
		|");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заказ клиента оплачен. Нельзя устанавливать операцию %1 '"),
				ХозяйственнаяОперация
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ХозяйственнаяОперация",
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВсеСтрокиОтменены()
	
	СтруктураОтбора = Новый Структура("Отменено", Ложь);
	НайтиСтроки = Товары.НайтиСтроки(СтруктураОтбора);
	
	Возврат ?(НайтиСтроки.Количество() = 0, Истина, Ложь);
	
КонецФункции

//АК Процедура заполняет этапы оплаты
//
Процедура ЗаполнитьЭтапыГрафикаОплат()
	НовСтрокаГрафика = ЭтапыГрафикаОплаты.Добавить();
	НовСтрокаГрафика.ВариантОплаты=Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки;
	ДатаНачала = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение, Истина);
	
	НовСтрокаГрафика.ДатаПлатежа = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачала, Перечисления.Периодичность.День, УсловияПродаж.СрокПоставки) + 1;;
	НовСтрокаГрафика.СуммаПлатежа = ПолучитьСуммуЗаказанныхСтрок();
	НовСтрокаГрафика.ПроцентПлатежа = 100;
КонецПроцедуры


Функция ПолучитьДатуДляПоставкиЗаказчику()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.Дата КАК Дата
	|ПОМЕСТИТЬ Даты
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.Дата В(&ВходящиеДаты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Даты.Дата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.Дата) КАК КоличествоРабочихДней,
	|	МАКСИМУМ(РегламентированныйПроизводственныйКалендарь.Дата) КАК Дата,
	|	РегламентированныйПроизводственныйКалендарь1.Дата КАК ДатаКалендаряДляГруппировки
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК РегламентированныйПроизводственныйКалендарь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Даты КАК Даты
	|		ПО (Даты.Дата <= РегламентированныйПроизводственныйКалендарь.Дата)
	|			И (ДОБАВИТЬКДАТЕ(Даты.Дата, ДЕНЬ, &ГлубинаДней) > РегламентированныйПроизводственныйКалендарь.Дата)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК РегламентированныйПроизводственныйКалендарь1
	|		ПО РегламентированныйПроизводственныйКалендарь.Дата <= РегламентированныйПроизводственныйКалендарь1.Дата
	|ГДЕ
	|	(РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|			ИЛИ РегламентированныйПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий))
	|
	|СГРУППИРОВАТЬ ПО
	|	РегламентированныйПроизводственныйКалендарь1.Дата,
	|	Даты.Дата
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(РегламентированныйПроизводственныйКалендарь.Дата) = РегламентированныйПроизводственныйКалендарь1.Дата И
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.Дата) = &РабочихДней";
	
	КоличествоРабочихДней = 35;
	
	Запрос.УстановитьПараметр("ВходящиеДаты", ТекущаяДата());
	Запрос.УстановитьПараметр("ГлубинаДней", КоличествоРабочихДней*2);
	Запрос.УстановитьПараметр("РабочихДней", КоличествоРабочихДней);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Дата;
	Иначе
		Возврат ТекущаяДата();
	КонецЕсли;	
	
КонецФункции	

#КонецЕсли