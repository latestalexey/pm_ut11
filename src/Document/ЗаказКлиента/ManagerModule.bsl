#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет таблицу реквизитов, зависимых от хозяйственной операции
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция соглашения
//	МассивВсехРеквизитов - Массив - реквизиты, которые не зависят от хозяйственной операции
//	МассивРеквизитовОперации - Массив - реквизиты, которые зависят от хозяйственной операции
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("Товары.ПроцентРучнойСкидки");
	МассивВсехРеквизитов.Добавить("Товары.СуммаРучнойСкидки");
	МассивВсехРеквизитов.Добавить("Товары.ПроцентАвтоматическойСкидки");
	МассивВсехРеквизитов.Добавить("Товары.СуммаАвтоматическойСкидки");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
		Или Не ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		МассивРеквизитовОперации.Добавить("Товары.ПроцентРучнойСкидки");
		МассивРеквизитовОперации.Добавить("Товары.СуммаРучнойСкидки");
		МассивРеквизитовОперации.Добавить("Товары.ПроцентАвтоматическойСкидки");
		МассивРеквизитовОперации.Добавить("Товары.СуммаАвтоматическойСкидки");
	КонецЕсли;
	
КонецПроцедуры

// Определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - Ссылка на документа
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа
//
Функция ПолучитьРеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Организация = Выборка.Организация;
		Партнер = Выборка.Партнер;
		Контрагент = Выборка.Контрагент;
		Договор = Выборка.Договор;
		ПорядокРасчетов = Выборка.ПорядокРасчетов;
		ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
		ХозяйственнаяОперация = ?(ЗначениеЗаполнено(Выборка.ХозяйственнаяОперация), Выборка.ХозяйственнаяОперация, Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		СуммаДокумента = Выборка.СуммаДокумента;
		СуммаВзаиморасчетов = ?(Выборка.Проведен, Выборка.СуммаВзаиморасчетов, 0);
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		СуммаДокумента = 0;
		СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Организация, Партнер, Контрагент, Договор, ПорядокРасчетов, ВалютаВзаиморасчетов, ХозяйственнаяОперация, СуммаДокумента, СуммаВзаиморасчетов",
		Организация,
		Партнер,
		Контрагент,
		Договор,
		ПорядокРасчетов,
		ВалютаВзаиморасчетов,
		ХозяйственнаяОперация,
		СуммаДокумента,
		СуммаВзаиморасчетов
	);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Осуществляет вычисление текущего состояния заказа клиента
//
// Параметры:
//	ЗаказКлиента            - ДокументСсылка.ЗаказКлиента - Документ, состояние которого необходимо вычислить
//	Договор                 - СправочникСсылка.ДоговорыКонтрагентов    - Договор с клиентом
//	СостояниеРасчетов       - УправляемаяФорма - Форма, в реквизиты которой будет помещено рассчитанное состояние
//
Процедура РассчитатьСостояние(Знач ЗаказКлиента,
	                          Знач Договор,
	                          СостояниеРасчетов) Экспорт
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	
	Если ЗначениеЗаполнено(ЗаказКлиента)
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) 
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыКлиентов) 
		И ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента) Тогда
	
		УстановитьПривилегированныйРежим(Истина); 
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ 
			|ВЫБОР
			|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
			|	КОГДА
			|		НЕ ДокументЗаказКлиента.Проведен
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ПустаяСсылка)
			|// ОЖИДАЕТСЯ СОГЛАСОВАНИЕ //////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяСогласование)
			|// ОЖИДАЕТСЯ АВАНС ДО ОБЕСПЕЧЕНИЯ //////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован) ИЛИ &НеИспользоватьСтатусыЗаказовКлиентов) И
			|		ДокументЗаказКлиента.СуммаАвансаДоОбеспечения > 0 И
			|		ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяАвансДоОбеспечения)
			|// ГОТОВ К ОБЕСПЕЧЕНИЮ /////////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован) И
			|		ДокументЗаказКлиента.СуммаДокумента > 0 И
			|		(ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаАвансаДоОбеспечения ИЛИ
			|		ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКОбеспечению)
			|// ОЖИДАЕТСЯ ПРЕДОПЛАТА ДО ОТГРУЗКИ ////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован) ИЛИ &НеИспользоватьСтатусыЗаказовКлиентов ИЛИ
			|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)) И
			|		ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0 И
			|		ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяПредоплатаДоОтгрузки)
			|// ГОТОВ К ОТГРУЗКЕ //////////////////////////////////////////////////////
			|	КОГДА
			|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
			|		ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)) И
			|		ДокументЗаказКлиента.СуммаДокумента > 0 И
			|		(ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения ИЛИ
			|		ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|		И ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаОстаток, 0) <> 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКОтгрузке)
			|// ОЖИДАЕТСЯ ОТГРУЗКА //////////////////////////////////////////////////////
			|	КОГДА
			|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке) ИЛИ &НеИспользоватьСтатусыЗаказовКлиентов) И
			|		ДокументЗаказКлиента.СуммаДокумента > 0 И
			|		(ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения ИЛИ
			|		ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|		И ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюОстаток, 0) <> 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяОтгрузка)
			|// ОЖИДАЕТСЯ ОПЛАТА ПОСЛЕ ОТГРУЗКИ /////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке) ИЛИ &НеИспользоватьСтатусыЗаказовКлиентов) И
			|		ДокументЗаказКлиента.СуммаДокумента - ДокументЗаказКлиента.СуммаАвансаДоОбеспечения - ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0 И
			|		ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюОстаток, 0) = 0 И
			|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) > 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяОплатаПослеОтгрузки)
			|// ГОТОВ К ЗАКРЫТИЮ ////////////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКЗакрытию)
			|// ЗАКРЫТ //////////////////////////////////////////////////////////////////
			|	КОГДА
			|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт) И НЕ &НеИспользоватьСтатусыЗаказовКлиентов) ИЛИ (&НеИспользоватьСтатусыЗаказовКлиентов)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)
			|КОНЕЦ КАК Состояние,
			|ВЫБОР
			|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
			|	КОГДА
			|		НЕ ДокументЗаказКлиента.Проведен
			|	ТОГДА
			|		ЛОЖЬ
			|// ЗАКРЫТ //////////////////////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт) И НЕ &НеИспользоватьСтатусыЗаказовКлиентов
			|	ТОГДА
			|		ЛОЖЬ
			|// ПРОСРОЧЕНО СОГЛАСОВАНИЕ /////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
			|		И ДокументЗаказКлиента.ДатаСогласования <> ДАТАВРЕМЯ(1,1,1)
			|		И ДокументЗаказКлиента.ДатаСогласования < &ТекущаяДата
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕН АВАНС ДО ОБЕСПЕЧЕНИЯ //////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован) ИЛИ &НеИспользоватьСтатусыЗаказовКлиентов) И
			|		ДокументЗаказКлиента.СуммаАвансаДоОбеспечения > 0 И
			|		ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаказКлиента.СуммаАвансаДоОбеспечения И
			|		РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕНО ОБЕСПЕЧЕНИЕ //////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован) И
			|		ДокументЗаказКлиента.СуммаДокумента > 0 И
			|		ДокументЗаказКлиента.ДатаОтгрузки <> ДАТАВРЕМЯ(1,1,1) И
			|		ДокументЗаказКлиента.ДатаОтгрузки < &ТекущаяДата И
			|		(ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаАвансаДоОбеспечения ИЛИ
			|		ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕНА ПРЕДОПЛАТА ДО ОТГРУЗКИ ///////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению) ИЛИ &НеИспользоватьСтатусыЗаказовКлиентов) И
			|		ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0 И
			|		ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения И
			|		РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕНА ОЖИДАЕТСЯ ОТГРУЗКА ///////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению) И
			|		ДокументЗаказКлиента.ДатаОтгрузки <> ДАТАВРЕМЯ(1,1,1) И
			|		ДокументЗаказКлиента.ДатаОтгрузки  < &ТекущаяДата И
			|		(ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения ИЛИ
			|		ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕНА ОТГРУЗКА /////////////////////////////////////////////////////
			|	КОГДА
			|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке) ИЛИ &НеИспользоватьСтатусыЗаказовКлиентов) И
			|		(ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения ИЛИ
			|		ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)) И
			|		ЕСТЬNULL(ЗаказыКлиентовОстаткиНаДатуАктуальности.КОформлениюОстаток, 0) <> 0
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕНА ОПЛАТА ПОСЛЕ ОТГРУЗКИ /////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке) ИЛИ &НеИспользоватьСтатусыЗаказовКлиентов) И
			|		ДокументЗаказКлиента.СуммаДокумента - ДокументЗаказКлиента.СуммаАвансаДоОбеспечения - ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0 И
			|		ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюОстаток, 0) = 0 И
			|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) > 0 И
			|		РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток > 0
			|	ТОГДА
			|		ИСТИНА
			|	ИНАЧЕ
			|		ЛОЖЬ
			|КОНЕЦ КАК Просрочен,
			|// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		ДокументЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) И
			|		ДокументЗаказКлиента.Проведен И
			|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован) И
			|		ДокументЗаказКлиента.СуммаДокумента > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаОплаты,
			|// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		ДокументЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) И
			|		ДокументЗаказКлиента.Проведен И
			|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован) И
			|		ДокументЗаказКлиента.СуммаДокумента > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ ((ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0)) * 100 / ДокументЗаказКлиента.СуммаДокумента КАК ЧИСЛО(15, 0))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентОплаты,
			|// СУММА ПРОСРОЧЕННОЙ ОПЛАТЫ ////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		ДокументЗаказКлиента.Проведен И
			|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован) И
			|		ДокументЗаказКлиента.СуммаДокумента > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаПросроченнойОплаты,
			|// СУММА ОТГРУЗКИ ///////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказКлиента.Проведен И
			|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован) И
			|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован) И
			|		ДокументЗаказКлиента.СуммаДокумента > 0
			|	ТОГДА
			|		ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаОстаток, 0)
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаОтгрузки,
			|// ПРОЦЕНТ ОТГРУЗКИ /////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказКлиента.Проведен И
			|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован) И
			|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован) И
			|		ДокументЗаказКлиента.СуммаДокумента > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ ((ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаОстаток, 0)) * 100 / ДокументЗаказКлиента.СуммаДокумента КАК ЧИСЛО(15, 0))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентОтгрузки,
			|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказКлиента.Проведен И
			|		((ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован) И
			|		ДокументЗаказКлиента.СуммаДокумента > 0) ИЛИ
			|		ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаДолга,
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		ДокументЗаказКлиента.Проведен И
			|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован) И
			|		ДокументЗаказКлиента.СуммаДокумента > 0
			|	ТОГДА
			|		ВЫБОР
			|			КОГДА
			|				ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) > 0
			|			ТОГДА
			|				ВЫРАЗИТЬ ((ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) * 100 / ДокументЗаказКлиента.СуммаДокумента) КАК ЧИСЛО(15, 0))
			|			ИНАЧЕ
			|				ВЫРАЗИТЬ ((ЕСТЬNULL(-РасчетыСКлиентамиОстатки.СуммаОстаток, 0) * 100 / ДокументЗаказКлиента.СуммаДокумента) КАК ЧИСЛО(15, 0))
			|		КОНЕЦ
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентДолга
			|ИЗ
			|	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента = &РасчетныйДокумент) КАК РасчетыСКлиентамиОстатки
			|ПО
			|	Истина
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ЗаказКлиента = &РасчетныйДокумент) КАК РасчетыСКлиентамиОстаткиНаДатуАктуальности
			|ПО
			|	Истина
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &ЗаказКлиента) КАК ЗаказыКлиентовОстатки
			|ПО
			|	Истина
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.ЗаказыКлиентов.Остатки(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ЗаказКлиента = &ЗаказКлиента) КАК ЗаказыКлиентовОстаткиНаДатуАктуальности
			|ПО
			|	Истина
			|ГДЕ
			|	ДокументЗаказКлиента.Ссылка = &ЗаказКлиента
			|
			|");
		
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента, "ПорядокРасчетов");
		
		Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
		Запрос.УстановитьПараметр("РасчетныйДокумент", ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов,
			Договор,
			ЗаказКлиента)
		);
		Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДата()));
		Запрос.УстановитьПараметр("НеИспользоватьСтатусыЗаказовКлиентов", НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовКлиентов"));
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет инициализацию структуры состояния расчетов
Функция СтруктураСостоянияРасчетов() Экспорт
	Возврат
		Новый Структура(
			"Состояние, СостояниеПросрочено, СуммаОплаты, СуммаОтгрузки, ПроцентОплаты, ПроцентОтгрузки, СуммаПросроченнойОплаты, СуммаДолга, ПроцентДолга",
			Перечисления.СостоянияЗаказовКлиентов.ПустаяСсылка(), Ложь, 0., 0., 0., 0., 0., 0.,0.);
КонецФункции

// Возвращает массив имен ролей с правом "Добавление" для данного документа
//
// Возвращаемое значение:
//	Массив - Массив с именами ролей
//
Функция ИменаРолейСПравомДобавления() Экспорт
	
	МассивРолей = Новый Массив;
	МассивРолей.Добавить("ПолныеПрава");
	МассивРолей.Добавить("ДобавлениеИзменениеЗаказовКлиентов");
	Возврат МассивРолей;
	
КонецФункции

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Склад,Статус";
	
	Возврат ИменаРеквизитов;
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в документе
//
//	Параметры
//			Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
//	Возвращаемое значение
//			Тип Структура
//				Состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ИспользованиеСерийСклад = Ложь;
	ГруппаСкладов = Справочники.Склады.ЭтоГруппа(Объект.Склад);
	Если ГруппаСкладов <> Неопределено Тогда
		Если ГруппаСкладов Тогда
			ИспользованиеСерийСклад = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
		Иначе
			ИспользованиеСерийСклад = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура("Склад", Объект.Склад));
		КонецЕсли;
	КонецЕсли;
	
	ИспользованиеСерийСклад = ИспользованиеСерийСклад
		И (Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению
		Или Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке
		Или Объект.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт);
		
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры = ИспользованиеСерийСклад;
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
		
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("УказыватьСерии");
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Склад");
	
	ПараметрыУказанияСерий.ЭтоЗаказ = Истина;
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Истина;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовКлиентов[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента
		|ПОМЕСТИТЬ
		|	ВтОстаткиПоЗаказам
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(,ЗаказКлиента В (&МассивДокументов)) КАК ЗаказыКлиентовОстатки
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыКлиентовОстатки.ЗаказКлиента
		|;
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением,
		|	ВЫБОР
		|		КОГДА ВтОстаткиПоЗаказам.ЗаказКлиента ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОстаткиПоЗаказу
		|ИЗ
		|	Документ.ЗаказКлиента КАК ТаблицаДокументов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВтОстаткиПоЗаказам
		|ПО
		|	ВтОстаткиПоЗаказам.ЗаказКлиента = ТаблицаДокументов.Ссылка
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
		|";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ЗаказКлиента КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В (&МассивДокументов)
		|";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриАвтоматическомРасчетеСтатуса(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента
		|ПОМЕСТИТЬ
		|	ВтОстаткиПоЗаказам
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(,ЗаказКлиента В (&МассивДокументов)) КАК ЗаказыКлиентовОстатки
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыКлиентовОстатки.ЗаказКлиента
		|;
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением,
		|	ВЫБОР
		|		КОГДА ВтОстаткиПоЗаказам.ЗаказКлиента ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОстаткиПоЗаказу
		|ИЗ
		|	Документ.ЗаказКлиента КАК ТаблицаДокументов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВтОстаткиПоЗаказам
		|ПО
		|	ВтОстаткиПоЗаказам.ЗаказКлиента = ТаблицаДокументов.Ссылка
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
		|";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ЗаказКлиента КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В (&МассивДокументов)
		|";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа")
		И ВыборкаПроверки.ЕстьОстаткиПоЗаказу Тогда
		
		ТекстОшибки = НСтр("ru='У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ поставлен не полностью'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата                      КАК Период,
	|	ДанныеШапки.Партнер                   КАК Партнер,
	|	ДанныеШапки.Контрагент                КАК Контрагент,
	|	ДанныеШапки.Организация               КАК Организация,
	|	ДанныеШапки.Валюта                    КАК Валюта,
	|	ДанныеШапки.Склад                     КАК Склад,
	|	ДанныеШапки.Статус                    КАК Статус,
	|	ДанныеШапки.Ссылка                    КАК ЗаказКлиента,
	|	ДанныеШапки.ЦенаВключаетНДС           КАК ЦенаВключаетНДС,
	|	ДанныеШапки.ХозяйственнаяОперация     КАК ХозяйственнаяОперация,
	|	ДанныеШапки.Договор                   КАК Договор,
	|	ДанныеШапки.Назначение                КАК Назначение,
	|	ДанныеШапки.Подразделение             КАК Подразделение,
	|	ДанныеШапки.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
	|	
	|	ВЫБОР КОГДА ДанныеШапки.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговорам,
	|	
	|	ВЫБОР КОГДА ДанныеШапки.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоНакладным
	|
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеШапки
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",          	 Реквизиты.Период);
	Запрос.УстановитьПараметр("ЗаказКлиента",    	 Реквизиты.ЗаказКлиента);
	Запрос.УстановитьПараметр("Период",          	 Реквизиты.Период);
	Запрос.УстановитьПараметр("Склад",           	 Реквизиты.Склад);
	Запрос.УстановитьПараметр("Валюта",          	 Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Статус",          	 Реквизиты.Статус);
	Запрос.УстановитьПараметр("Организация",     	 Реквизиты.Организация);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", 	 Реквизиты.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("Назначение", 		 Реквизиты.Назначение);
	Запрос.УстановитьПараметр("Подразделение", 		 Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты));
	Запрос.УстановитьПараметр("Договор",			 Реквизиты.Договор);
	Запрос.УстановитьПараметр("РасчетыПоДоговорам", Реквизиты.РасчетыПоДоговорам);
	Запрос.УстановитьПараметр("РасчетыПоНакладным", Реквизиты.РасчетыПоНакладным);
	Запрос.УстановитьПараметр("ИспользоватьСтатусыЗаказовКлиентов", ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовКлиентов"));
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", Реквизиты.ВернутьМногооборотнуюТару);
	
	Запрос.Текст = 
	// 0 ТаблицаЗаказыКлиентов
	"
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВложенныйЗапрос.Порядок)                КАК Порядок,
	|	МАКСИМУМ(ВложенныйЗапрос.НомерСтроки)            КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)           КАК ВидДвижения,
	|	ВложенныйЗапрос.Период                           КАК Период,
	|	&ЗаказКлиента                                    КАК ЗаказКлиента,
	|	ВложенныйЗапрос.Номенклатура                     КАК Номенклатура,
	|	ВложенныйЗапрос.Характеристика                   КАК Характеристика,
	|	ВложенныйЗапрос.КодСтроки                        КАК КодСтроки,
	|	ВложенныйЗапрос.Склад                            КАК Склад,
	|	СУММА(ВложенныйЗапрос.Заказано)                  КАК Заказано,
	|	СУММА(ВложенныйЗапрос.КОформлению)               КАК КОформлению,
	|	СУММА(ВложенныйЗапрос.Сумма)                     КАК Сумма,
	|	ВложенныйЗапрос.ПричинаОтмены                    КАК ПричинаОтмены
	|ИЗ
	|	(ВЫБРАТЬ
	|		1                                       КАК Порядок,
	|		ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|		НачалоПериода(&Период, День)            КАК Период,
	|		ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|		ТаблицаТовары.Характеристика            КАК Характеристика,
	|		ТаблицаТовары.КодСтроки                 КАК КодСтроки,
	|		ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
	|				ТаблицаТовары.Склад
	|			ИНАЧЕ
	|				НЕОПРЕДЕЛЕНО
	|		КОНЕЦ                                   КАК Склад,
	|		ТаблицаТовары.Количество                КАК Заказано,
	|		0                                       КАК КОформлению,
	|		ТаблицаТовары.СуммаСНДС                 КАК Сумма,
	|		НЕОПРЕДЕЛЕНО                 КАК ПричинаОтмены
	|	ИЗ
	|		Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		2                                       КАК Порядок,
	|		ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|		ТаблицаТовары.ДатаОтгрузки              КАК Период,
	|		ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|		ТаблицаТовары.Характеристика            КАК Характеристика,
	|		ТаблицаТовары.КодСтроки                 КАК КодСтроки,
	|		ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры  В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
	|				ТаблицаТовары.Склад
	|			ИНАЧЕ
	|				НЕОПРЕДЕЛЕНО
	|		КОНЕЦ                                   КАК Склад,
	|		0                                       КАК Заказано,
	|		ТаблицаТовары.Количество                КАК КОформлению,
	|		0                                       КАК Сумма,
	|		НЕОПРЕДЕЛЕНО                            КАК ПричинаОтмены
	|	ИЗ
	|		Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И (НЕ ТаблицаТовары.Отменено)
	|		И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке),
	|					 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт))
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ПричинаОтмены,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.КодСтроки,
	|	ВложенныйЗапрос.Склад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                        КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	&Период                                  КАК Период,
	|	&ЗаказКлиента                            КАК ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура               КАК Номенклатура,
	|	ТаблицаТовары.Характеристика             КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                  КАК КодСтроки,
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры  В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
	|			ТаблицаТовары.Склад
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                    КАК Склад,
	|	-ТаблицаТовары.Количество                КАК Заказано,
	|	0                                        КАК КОформлению,
	|	-ТаблицаТовары.СуммаСНДС                 КАК Сумма,
	|	ТаблицаТовары.ПричинаОтмены              КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Порядок
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 1 ТаблицаРасчетыСКлиентами
	|ВЫБРАТЬ
	|	ГрафикОплаты.НомерСтроки                     КАК НомерСтроки,
	|	КонецПериода(ГрафикОплаты.ДатаПлатежа, День) КАК Период,
	|	КонецПериода(ГрафикОплаты.ДатаПлатежа, День) КАК ДатаПлатежа,
	|	&Период                                      КАК ДатаРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&ЗаказКлиента
	|	КОНЕЦ КАК ЗаказКлиента,
	|
	|	&Валюта                                      КАК Валюта,
	|	ГрафикОплаты.Ссылка.ФормаОплаты              КАК ФормаОплаты,
	|	0                                            КАК Сумма,
	|	ГрафикОплаты.СуммаПлатежа                    КАК КОплате,
	|	0                                            КАК КОтгрузке,
	|
	|	ВЫБОР КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
	|		И ГрафикОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения)
	|	ТОГДА
	|		ЛОЖЬ
	|	КОГДА &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт))
	|		И ГрафикОплаты.ВариантОплаты В (
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения),
	|			ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки))
	|		И &ИспользоватьСтатусыЗаказовКлиентов
	|	ТОГДА
	|		ЛОЖЬ
	|	КОГДА НЕ (&ИспользоватьСтатусыЗаказовКлиентов)
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК ИсключатьПриКонтроле,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ГрафикОплаты
	|ГДЕ
	|	ГрафикОплаты.Ссылка = &Ссылка
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|	И НЕ &РасчетыПоНакладным
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаТовары.НомерСтроки)            КАК НомерСтроки,
	|	КонецПериода(ТаблицаТовары.ДатаОтгрузки, День) КАК Период,
	|	Неопределено                                   КАК ДатаПлатежа,
	|	Неопределено                                   КАК ДатаРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)         КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам                     КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&ЗаказКлиента
	|	КОНЕЦ КАК ЗаказКлиента,
	|
	|	&Валюта                                        КАК Валюта,
	|	Неопределено                                   КАК ФормаОплаты,
	|	0                                              КАК Сумма,
	|	0                                              КАК КОплате,
	|	СУММА(ТаблицаТовары.СуммаСНДС)                 КАК КОтгрузке,
	|
	|	Истина КАК ИсключатьПриКонтроле,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
	|		)
	|	И НЕ &РасчетыПоНакладным
	|	И (ТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		И НЕ &ВернутьМногооборотнуюТару)
	|СГРУППИРОВАТЬ ПО
	|	КонецПериода(ТаблицаТовары.ДатаОтгрузки, День)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Пустое движение для установки границы последовательности ПроведениеПоРасчетамСКлиентами.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	0						                     КАК НомерСтроки,
	|	&Период										 КАК Период,
	|	Неопределено								 КАК ДатаПлатежа,
	|	Неопределено                                 КАК ДатаРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&ЗаказКлиента
	|	КОНЕЦ КАК ЗаказКлиента,
	|
	|	&Валюта                                      КАК Валюта,
	|	Неопределено					             КАК ФормаОплаты,
	|	0                                            КАК Сумма,
	|	0						                     КАК КОплате,
	|	0                                            КАК КОтгрузке,
	|	Истина 										 КАК ИсключатьПриКонтроле,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ГрафикОплаты
	|ГДЕ
	|	ГрафикОплаты.Ссылка = &Ссылка
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|	И НЕ &РасчетыПоНакладным
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2 ТаблицаДвижениеТоваров
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки    КАК НомерСтроки,
	|	ТаблицаТовары.ДатаОтгрузки   КАК Период,
	|	&ЗаказКлиента                КАК Распоряжение,
	|	ТаблицаТовары.Склад          КАК Склад,
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|													ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)) ТОГДА
	|			ТаблицаТовары.Ссылка.Назначение
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                            КАК Назначение,
	|	ТаблицаТовары.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ТаблицаТовары.Количество         КАК ПланируемаяОтгрузка,
	|	ТаблицаТовары.СрокПоставки       КАК СрокПоставки
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры  В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ (ТаблицаТовары.УказыватьСерии
	|				И ТаблицаТовары.СтатусУказанияСерий = 10)
	|	И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка)) 
	|	И &Статус В
	|			(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|/////////////////////////////////////////////////////////////////////////////////
	// 3 ТаблицаСвободныеОстатки
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	0                                      КАК ВНаличии,
	|	ТаблицаТовары.Количество               КАК ВРезерве,
	|	ТаблицаТовары.СрокПоставки             КАК СрокПоставки
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (НЕ ТаблицаТовары.Отменено)
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И НЕ(ТаблицаТовары.УказыватьСерии
	|					И ТаблицаТовары.СтатусУказанияСерий = 10)
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка)
	|	И &Статус В 
	|			(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Период,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Количество,
	|	0,
	|	ТаблицаТовары.СрокПоставки
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка= &Ссылка
	|	И (НЕ ТаблицаТовары.Отменено)
	|	И ((ТаблицаТовары.УказыватьСерии И ТаблицаТовары.СтатусУказанияСерий = 10)
	|				ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада))
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт))
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 4 ТаблицаРасчетыСКлиентамиПоследовательность
	|ВЫБРАТЬ 
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 5 ТаблицаРезервыСерийТоваров
	|ВЫБРАТЬ
	|	ТаблицаСерии.НомерСтроки               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&ЗаказКлиента                          КАК ДокументРезерва,
	|	ТаблицаСерии.Склад                     КАК Склад,
	|	ТаблицаСерии.Номенклатура              КАК Номенклатура,
	|	ТаблицаСерии.Характеристика            КАК Характеристика,
	|	ТаблицаСерии.Серия                     КАК Серия,
	|	ТаблицаСерии.Количество                КАК Количество
	|ИЗ
	|	Документ.ЗаказКлиента.Серии КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Период,
	|	&ЗаказКлиента,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка),
	|	ТаблицаТовары.Количество
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры  В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТаблицаТовары.СтатусУказанияСерий В (11,12)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 6 ТаблицаОбеспечениеЗаказов
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Ссылка.Назначение        КАК Назначение,
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада) ТОГДА
	|		0
	|	ИНАЧЕ
	|		ТаблицаТовары.Количество
	|	КОНЕЦ                                  КАК Потребность,
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада) ТОГДА
	|		0
	|	ИНАЧЕ
	|		ТаблицаТовары.Количество
	|	КОНЕЦ                                  КАК КЗаказу,
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада) ТОГДА
	|		ТаблицаТовары.Количество
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК НаличиеСоСклада
	|
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры  В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ))
	|	И (НЕ ТаблицаТовары.Отменено)
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт))
	|;
	|////////////////////////////////////////////////////////////////////////////////
	// 7 ТаблицаОбеспечениеЗаказовРаботами
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ДатаОтгрузки             КАК Период,
	|	&Подразделение                         КАК Подразделение,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Ссылка.Назначение        КАК Назначение,
	|	ТаблицаТовары.Количество               КАК КОбеспечению
	|
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ))
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И (НЕ ТаблицаТовары.Отменено)
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению),
	|				 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке),
	|				 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт))
	|";
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ТаблицыДляДвижений.Вставить("ТаблицаЗаказыКлиентов",                      Результат[0].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСКлиентами",                   Результат[1].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаДвижениеТоваров",                     Результат[2].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаСвободныеОстатки",                    Результат[3].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСКлиентамиПоследовательность", Результат[4].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРезервыСерийТоваров",                 Результат[5].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаОбеспечениеЗаказов",                  Результат[6].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаОбеспечениеЗаказовРаботами",          Результат[7].Выгрузить());
	
	//+++АК
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА Таблица.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_Доставка)
	               |			ТОГДА Таблица.Количество
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК НеЗаказанаДоставка,
	               |	ВЫБОР
	               |		КОГДА Таблица.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_Монтаж)
	               |			ТОГДА Таблица.Количество
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК НеЗаказанМонтаж
	               |ПОМЕСТИТЬ ТЗ_ДоставкаМонтажПредварительно
	               |ИЗ
	               |	Документ.ЗаказКлиента.Товары КАК Таблица
	               |ГДЕ
	               |	Таблица.Ссылка = &Ссылка
	               |	И НЕ Таблица.Отменено
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА Таблица.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_Доставка)
	               |			ТОГДА Таблица.Количество
	               |		ИНАЧЕ 0
	               |	КОНЕЦ,
	               |	ВЫБОР
	               |		КОГДА Таблица.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_Монтаж)
	               |			ТОГДА Таблица.Количество
	               |		ИНАЧЕ 0
	               |	КОНЕЦ
	               |ИЗ
	               |	Документ.ЗаказКлиента.АК_УслугиДополнительные КАК Таблица
	               |ГДЕ
	               |	Таблица.Ссылка = &Ссылка
	               |	И Таблица.Номенклатура.Предопределенный
	               |	И Таблица.Активность
	               |	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(ТЗ_ДоставкаМонтажПредварительно.НеЗаказанаДоставка) КАК НеЗаказанаДоставка,
	               |	СУММА(ТЗ_ДоставкаМонтажПредварительно.НеЗаказанМонтаж) КАК НеЗаказанМонтаж
	               |ПОМЕСТИТЬ ТЗ_ДоставкаМонтаж
	               |ИЗ
	               |	ТЗ_ДоставкаМонтажПредварительно КАК ТЗ_ДоставкаМонтажПредварительно
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&Период КАК Период,
	               |	&Ссылка КАК Регистратор,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	               |	&Ссылка КАК ЗаказКлиента,
	               |	Таблица.Номенклатура,
	               |	Таблица.Характеристика,
	               |	ВЫБОР
	               |		КОГДА Таблица.Номенклатура В (ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_ДоставкаКлиент), ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_ДоставкаАгент), ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_МонтажКлиент), ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_МонтажАгент))
	               |			ТОГДА 0
	               |		ИНАЧЕ Таблица.Количество
	               |	КОНЕЦ КАК Заказано,
	               |	Таблица.Количество КАК НеЗаказаноУПоставщика,
	               |	ВЫБОР
	               |		КОГДА Таблица.Номенклатура В (ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_Доставка), ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_Монтаж))
	               |			ТОГДА 0
	               |		КОГДА ЕСТЬNULL(ТЗ_ДоставкаМонтаж.НеЗаказанаДоставка, ЛОЖЬ) > 0
	               |			ТОГДА Таблица.Количество
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК НеЗаказанаДоставка,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(ТЗ_ДоставкаМонтаж.НеЗаказанМонтаж, ЛОЖЬ) > 0
	               |			ТОГДА Таблица.Количество
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК НеЗаказанМонтаж,
	               |	Таблица.КодСтроки КАК КодСтроки,
	               |	Таблица.Количество КАК НеПолученоОтПоставщика
	               |ИЗ
	               |	Документ.ЗаказКлиента.Товары КАК Таблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_ДоставкаМонтаж КАК ТЗ_ДоставкаМонтаж
	               |		ПО (Таблица.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	               |ГДЕ
	               |	Таблица.Ссылка = &Ссылка
	               |	И НЕ Таблица.Отменено
	               |	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	&Период,
	               |	&Ссылка,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	               |	&Ссылка,
	               |	Таблица.Номенклатура,
	               |	NULL,
	               |	ВЫБОР
	               |		КОГДА Таблица.Номенклатура В (ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_ДоставкаКлиент), ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_ДоставкаАгент), ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_МонтажКлиент), ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_МонтажАгент))
	               |			ТОГДА 0
	               |		ИНАЧЕ Таблица.Количество
	               |	КОНЕЦ,
	               |	Таблица.Количество,
	               |	ЕСТЬNULL(ТЗ_ДоставкаМонтаж.НеЗаказанаДоставка, ЛОЖЬ),
	               |	ЕСТЬNULL(ТЗ_ДоставкаМонтаж.НеЗаказанМонтаж, ЛОЖЬ),
	               |	Таблица.КодСтроки,
	               |	Таблица.Количество
	               |ИЗ
	               |	Документ.ЗаказКлиента.АК_УслугиДополнительные КАК Таблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_ДоставкаМонтаж КАК ТЗ_ДоставкаМонтаж
	               |		ПО (Таблица.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	               |ГДЕ
	               |	Таблица.Ссылка = &Ссылка
	               |	И Таблица.Номенклатура.Предопределенный
	               |	И Таблица.Активность
	               |	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КодСтроки";
				   
	//
	Результат = Запрос.Выполнить();
	
	//
	ТаблицыДляДвижений.Вставить("ТаблицаЗаказыКлиентовРазмещение", Результат.Выгрузить());
	
	//
	Запрос.Текст = "ВЫБРАТЬ
	               |	&Период КАК Период,
	               |	&Ссылка КАК Регистратор,
	               |	&Ссылка КАК ЗаказКлиента,
	               |	Таблица.Номенклатура,
	               |	Таблица.КодСтроки КАК КодСтроки,
	               |	Таблица.Количество,
	               |	Таблица.АК_Процент КАК Процент,
	               |	Таблица.АК_Сумма КАК Сумма
	               |ИЗ
	               |	Документ.ЗаказКлиента.АК_УслугиДополнительные КАК Таблица
	               |ГДЕ
	               |	Таблица.Ссылка = &Ссылка
	               |	И Таблица.Номенклатура В (ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_ДоставкаКлиент), ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_ДоставкаАгент), ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_МонтажКлиент), ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_МонтажАгент))
	               |	И Таблица.Активность
	               |	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КодСтроки";
				   
	//
	Результат = Запрос.Выполнить();
	
	//
	ТаблицыДляДвижений.Вставить("ТаблицаДопУслугиКПоступлению", Результат.Выгрузить());
	
	//---АК
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Печать

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказКлиента") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказКлиента", "Заказ клиента", СформироватьПечатнуюФормуЗаказаКлиента(МассивОбъектов, ОбъектыПечати, Неопределено));
	КонецЕсли;
	
	//+++ АК
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетЗаказ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетЗаказ", ?(ПараметрыПечати["Тип"] = "Счет", "Счет на оплату", "Заказ клиента"), СформироватьПечатнуюФормуЗаказаКлиента(МассивОбъектов, ОбъектыПечати, Неопределено));
	КонецЕсли;	
	//договора потом нужно свести к одной кнопке	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДоговорДоставка") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ДоговорДоставка", "Договор доставка", СформироватьПечатнуюФормуЗаказаКлиента(МассивОбъектов, ОбъектыПечати, Неопределено));
	КонецЕсли;	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДоговорСамовывоз") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ДоговорСамовывоз","Договор самовывоз", СформироватьПечатнуюФормуЗаказаКлиента(МассивОбъектов, ОбъектыПечати, Неопределено));
	КонецЕсли;	
	
	//--- АК
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		КоллекцияПечатныхФорм.Очистить();
		СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати);
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыСчетаНаОплату(ПараметрыПечати, МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Номер КАК Номер,
	|	Документы.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	ЕСТЬNULL(Документы.БанковскийСчет.Владелец, Документы.Организация) КАК Организация,
	|	Документы.Организация КАК ОрганизацияПоставщик,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|				ИЛИ Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьНДС,
	|	Документы.Организация.Префикс КАК Префикс,
	|	Документы.Контрагент КАК Контрагент,
	|	Документы.БанковскийСчет КАК БанковскийСчет,
	|	Документы.БанковскийСчет.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	Документы.Валюта КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо.Наименование КАК Менеджер,
	|	Документы.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	Документы.СуммаДокумента КАК СуммаКВозврату,
	|	ЛОЖЬ КАК ЧастичнаяОплата,
	|	"""" КАК НазначениеПлатежа,
	|	100 КАК ПроцентОплаты,
	|	Документы.СуммаДокумента КАК СуммаДокумента,
	|	ЛОЖЬ КАК СчетКВозврату
	|ИЗ
	|	Документ.ЗаказКлиента КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Документы.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.Ссылка КАК Ссылка,
	|	ЭтапыГрафикаОплаты.НомерСтроки КАК НомерСтроки,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа КАК СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.Код КАК Код,
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Товары.Упаковка.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Товары.Характеристика.НаименованиеПолное КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Товары.Упаковка.Наименование
	|	КОНЕЦ КАК Упаковка,
	|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	Товары.Сумма + Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаБезСкидки,
	|	Товары.Содержание КАК Содержание
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|	И Товары.Отменено = ЛОЖЬ
	|	И (Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ИЛИ Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		И НЕ Товары.Ссылка.ВернутьМногооборотнуюТару)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты", ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыЗаказаКлиента(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Номер КАК Номер,
	|	Документы.Дата КАК Дата,
	|	Документы.АдресДоставки КАК АдресДоставки,
	|	Документы.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|				ИЛИ Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьНДС,
	|	Документы.Организация.Префикс КАК Префикс,
	|	Документы.Контрагент КАК Контрагент,
	|	Документы.БанковскийСчет КАК БанковскийСчет,
	|	Документы.БанковскийСчет.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	Документы.Валюта КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо.Наименование КАК Менеджер,
	|	Документы.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	Документы.Грузоотправитель КАК Грузоотправитель,
	|	Документы.Грузополучатель КАК Грузополучатель
	|ИЗ
	|	Документ.ЗаказКлиента КАК Документы
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.Ссылка КАК Ссылка,
	|	ЭтапыГрафикаОплаты.НомерСтроки КАК НомерСтроки,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ВариантОплаты КАК ВариантОплаты,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа КАК СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.Код КАК Код,
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Товары.Упаковка.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	Товары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Товары.Характеристика.НаименованиеПолное КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Товары.Упаковка.Коэффициент, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Товары.Упаковка.Наименование
	|	КОНЕЦ КАК Упаковка,
	|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	Товары.Сумма + Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаБезСкидки,
	|	Товары.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА
	|			Товары.Ссылка.ВернутьМногооборотнуюТару
	|			И Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратнаяТара
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|	И Товары.Отменено = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты", ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция СформироватьПечатнуюФормуЗаказаКлиента(МассивОбъектов, ОбъектыПечати, КомплектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗАКАЗКЛИЕНТА";
	УстановитьПривилегированныйРежим(Истина);
	ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыЗаказаКлиента(МассивОбъектов);
	ЗаполнитьТабличныйДокументЗаказаКлиента(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати);
	УстановитьПривилегированныйРежим(Ложь);
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументЗаказаКлиента(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати)
	
	ШаблонОшибкиТовары = НСтр("ru = 'В документе %1 отсутствуют товары. Печать заказа клиента не требуется'");
	ШаблонОшибкиЭтапы = НСтр("ru = 'В документе %1 отсутствуют этапы оплаты. Печать заказа клиента не требуется'");
	
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	ДанныеПечати = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ЭтапыОплаты = ДанныеДляПечати.РезультатПоЭтапамОплаты.Выгрузить();
	Товары = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	ПервыйДокумент = Истина;
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.ЗаказКлиента.ПФ_MXL_ЗаказКлиента");
	
	Смещать = ТипСмещенияТабличногоДокумента.ПоВертикали;
	ОбластьПервойКолонкиТоваров = Макет.Область("ПерваяКолонкаТовара");
	Если КолонкаКодов <> "Артикул" Тогда
		ОбластьПервойКолонкиТоваров.ШиринаКолонки = ОбластьПервойКолонкиТоваров.ШиринаКолонки + Макет.Область("Артикул").ШиринаКолонки;
		Макет.УдалитьОбласть(Макет.Область("Артикул"), Смещать);
	КонецЕсли;
	Если КолонкаКодов<>"Код" Тогда
		ОбластьПервойКолонкиТоваров.ШиринаКолонки = ОбластьПервойКолонкиТоваров.ШиринаКолонки + Макет.Область("Код").ШиринаКолонки;
		Макет.УдалитьОбласть(Макет.Область("Код"), Смещать);
	КонецЕсли;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка,"Ссылка");
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		
		ТаблицаТовары = Товары.НайтиСтроки(СтруктураПоиска);
		Если ТаблицаТовары.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибкиТовары, ДанныеПечати.Ссылка), ДанныеПечати.Ссылка);
			Продолжить;
		КонецЕсли;
		
		ТаблицаЭтапыОплаты = ЭтапыОплаты.НайтиСтроки(СтруктураПоиска);
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаголовокСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки);
		ЕстьСкидки = ЗаголовокСкидки.ЕстьСкидки;
		
		СуффиксОбласти = ?(ДанныеПечати.УчитыватьНДС, "СНДС", "") + ?(ЕстьСкидки, "СоСкидкой", "");
		
		// Вывод шапки документа
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Заказ клиента'"));
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ЗначениеЗаполнено(ДанныеПечати.Грузоотправитель) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Грузоотправитель");
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПечати.Грузополучатель) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("Грузополучатель");
			ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПечати.АдресДоставки) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("АдресДоставки");
			ОбластьМакета.Параметры.АдресДоставки = ДанныеПечати.АдресДоставки;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Таблица "Товары"
		ОбластьШапкиТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбласти);
		ОбластьПодвалаТаблицы =Макет.ПолучитьОбласть("ПодвалТаблицы" + СуффиксОбласти);
		ОбластьПодвалНДС = Макет.ПолучитьОбласть("ПодвалТаблицыНДС");
		ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
		
		Если ЕстьСкидки Тогда
			ОбластьШапкиТаблицы.Параметры.Скидка = ЗаголовокСкидки.Скидка;
			ОбластьШапкиТаблицы.Параметры.СуммаБезСкидки = ЗаголовокСкидки.СуммаСкидки;
		КонецЕсли;
		
		МассивПроверкиВывода = Новый Массив;
		МассивПроверкиВывода.Добавить(ОбластьШапкиТаблицы);
		МассивПроверкиВывода.Добавить(ОбластьПодвалаТаблицы);
		МассивПроверкиВывода.Добавить(ОбластьПодвалНДС);
		МассивПроверкиВывода.Добавить(ОбластьСуммаПрописью);
		Сумма = 0;
		СуммаНДС = 0;
		ВсегоСкидок = 0;
		ВсегоБезСкидок = 0;
		НомерСтроки = 0;
		ОбластьСтрокиТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы" + СуффиксОбласти);
		СоответствиеСтавокНДС = Новый Соответствие;
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтрокиТаблицы.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				СтрокаТовары.НаименованиеПолное,
				СтрокаТовары.Характеристика,
				СтрокаТовары.Упаковка,
				,
				СтрокаТовары.Содержание,
				СтрокаТовары.ЭтоВозвратнаяТара);
			
			ОбластьСтрокиТаблицы.Параметры.Заполнить(СтрокаТовары);
			ОбластьСтрокиТаблицы.Параметры.НомерСтроки = НомерСтроки;
			
			Если ЗаголовокСкидки.ЕстьСкидки Тогда
				ОбластьСтрокиТаблицы.Параметры.СуммаСкидки = ?(ЗаголовокСкидки.ТолькоНаценка,- СтрокаТовары.СуммаСкидки,СтрокаТовары.СуммаСкидки);
			КонецЕсли; 
			
			МассивПроверкиВывода.Добавить(ОбластьСтрокиТаблицы);
			
			Если ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
				Если НомерСтроки = 1 Тогда
					ТабличныйДокумент.Вывести(ОбластьШапкиТаблицы);
					МассивПроверкиВывода.Удалить(0);
				КонецЕслИ;
			Иначе
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьШапкиТаблицы);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокиТаблицы);
			МассивПроверкиВывода.Удалить(МассивПроверкиВывода.ВГраница());
			
			Сумма = Сумма + СтрокаТовары.Сумма;
			СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
			
			Если ЕстьСкидки Тогда
				ВсегоСкидок = ВсегоСкидок + СтрокаТовары.СуммаСкидки;
				ВсегоБезСкидок = ВсегоБезСкидок + СтрокаТовары.СуммаБезСкидки;
			КонецЕсли;
			
			Если ДанныеПечати.УчитыватьНДС Тогда
				СуммаНДСПоСтавке = СоответствиеСтавокНДС[СтрокаТовары.СтавкаНДС];
				Если СуммаНДСПоСтавке = Неопределено Тогда
					СуммаНДСПоСтавке = 0;
				КонецЕсли;
				СоответствиеСтавокНДС.Вставить(СтрокаТовары.СтавкаНДС, СуммаНДСПоСтавке + СтрокаТовары.СуммаНДС);
			КонецЕсли;
			
		КонецЦикла;
		
		// Подвал таблицы "Товары"
		Если ЕстьСкидки Тогда
			
			ОбластьПодвалаТаблицы.Параметры.ВсегоСкидок =  ?(ЗаголовокСкидки.ТолькоНаценка,-ВсегоСкидок, ВсегоСкидок);
			ОбластьПодвалаТаблицы.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
			
			Если ДанныеПечати.УчитыватьНДС Тогда
				ОбластьПодвалаТаблицы.Параметры.ВсегоСуммаНДС = СуммаНДС;
			КонецЕсли;
		
		КонецЕсли;
		ОбластьПодвалаТаблицы.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьПодвалаТаблицы);
		
		// Область "ПодвалТаблицыНДС"
		Если ДанныеПечати.УчитыватьНДС Тогда
			
			Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
				
				ОбластьПодвалНДС.Параметры.НДС = ФормированиеПечатныхФорм.ТекстНДСПоСтавке(ТекСтавкаНДС.Ключ, ДанныеПечати.ЦенаВключаетНДС);
				ОбластьПодвалНДС.Параметры.ВсегоНДС = ФормированиеПечатныхФорм.ФорматСумм(ТекСтавкаНДС.Значение, ,"-");
				ТабличныйДокумент.Вывести(ОбластьПодвалНДС);
				
			КонецЦикла;
			
		Иначе
			ОбластьПодвалНДС.Параметры.НДС = НСтр("ru='Без налога (НДС)'");
			ОбластьПодвалНДС.Параметры.ВсегоНДС = "-";
			ТабличныйДокумент.Вывести(ОбластьПодвалНДС);
		КонецЕсли;
		
		// Вывести Сумму прописью
		СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
		ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", НомерСтроки);
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
		ОбластьСуммаПрописью.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта);
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
		
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		// Вывести этапы графика оплаты
		Если ТаблицаЭтапыОплаты.Количество() > 1 Тогда
			ОбластьШапкиТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты");
			ОбластьПодвалаТаблицы = Макет.ПолучитьОбласть("ИтогоЭтапыОплаты");
			МассивПроверкиВывода.Очистить();
			МассивПроверкиВывода.Добавить(ОбластьШапкиТаблицы);
			МассивПроверкиВывода.Добавить(ОбластьПодвалаТаблицы);
			
			ОбластьСтрокиТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты");
			Для Каждого ТекЭтап Из ТаблицаЭтапыОплаты Цикл
				ОбластьСтрокиТаблицы.Параметры.Заполнить(ТекЭтап);
				ОбластьСтрокиТаблицы.Параметры.ТекстНДС = ФормированиеПечатныхФорм.СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ТекЭтап.ПроцентПлатежа);
				МассивПроверкиВывода.Добавить(ОбластьСтрокиТаблицы);
				
				Если ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
					Если ТекЭтап.НомерСтроки=1 Тогда
						ТабличныйДокумент.Вывести(ОбластьШапкиТаблицы);
						МассивПроверкиВывода.Удалить(0);
					КонецЕслИ;
				Иначе
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
					ТабличныйДокумент.Вывести(ОбластьШапкиТаблицы);
				КонецЕсли;
				МассивПроверкиВывода.Удалить(МассивПроверкиВывода.ВГраница());
				
				ТабличныйДокумент.Вывести(ОбластьСтрокиТаблицы);
			КонецЦикла;
			ТабличныйДокумент.Вывести(ОбластьПодвалаТаблицы);
		КонецЕсли;
		
		// Вывести дополнительную информацию
		Если ЗначениеЗаполнено(ДанныеПечати.ДополнительнаяИнформация) Тогда
			Область = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
			Область.Параметры.ДополнительнаяИнформация = ДанныеПечати.ДополнительнаяИнформация;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		// Вывести подписи
		Область = Макет.ПолучитьОбласть("ПодвалЗаказа");
		Область.Параметры.ФИОМенеджер = ФизическиеЛица.ФамилияИнициалыФизЛица(ДанныеПечати.Менеджер);
		ТабличныйДокумент.Вывести(Область);
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(НомерСтрокиНачало,,ТабличныйДокумент.ВысотаТаблицы);
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
			КонецЦикла;
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
КонецПроцедуры

Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
		
		КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		
	Иначе
		
		КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
			Метаданные.Документы.ЗаказКлиента.ПолноеИмя(),
			МассивОбъектов, Неопределено
		);
		
	КонецЕсли;
		
	Если КомплектПечатныхФорм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяМакета = "ЗаказКлиента";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущийМассивОбъектов = ТаблицаСсылок.ВыгрузитьКолонку("Ссылка");
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущийМассивОбъектов = МассивОбъектов
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			СформироватьПечатнуюФормуЗаказаКлиента(ТекущийМассивОбъектов, ОбъектыПечати, ТекущийКомплект)
		);
	КонецЕсли;
	
	СтруктураТипов = Новый Соответствие;
	СтруктураТипов.Вставить("Документ.ЗаказКлиента", МассивОбъектов);
	
	ИмяМакета = "СчетНаОплату";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущаяСтруктураТипов = Новый Соответствие;
			ТекущаяСтруктураТипов.Вставить("Документ.РеализацияТоваровУслуг", ТаблицаСсылок.ВыгрузитьКолонку("Ссылка"));
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущаяСтруктураТипов = СтруктураТипов;
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			Обработки.ПечатьСчетовНаОплату.СформироватьПечатнуюФормуСчетНаОплату(ТекущаяСтруктураТипов, ОбъектыПечати, ПараметрыПечати)
		);
	КонецЕсли;
	
	РегистрыСведений.НастройкиПечатиОбъектов.СформироватьКомплектВнешнихПечатныхФорм(
		"Документ.ЗаказКлиента",
		МассивОбъектов,
		ПараметрыПечати,
		КоллекцияПечатныхФорм,
		ОбъектыПечати
	);
	
КонецФункции

Функция КомплектПечатныхФорм() Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ЗаказКлиента", "Заказ клиента", 1);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСчетаНаОплатуКлиентам") Тогда
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "СчетНаОплату", "Счет на оплату", 1);
	КонецЕсли;
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	КонецЕсли;
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Автозаполнение статуса

// Осуществляет вычисление максимально возможного статуса заказа клиента
//
Функция МаксимальныйСтатусЗаказаКлиента(ПараметрыРасчета, КэшированныеЗначения = Неопределено) Экспорт
	
	МаксимальныйСтатусДокумента = Перечисления.СтатусыЗаказовКлиентов.ПустаяСсылка();
	
	ЕстьАвансДоОбеспечения					= ЕстьАвансДоОбеспечения(ПараметрыРасчета.ЭтапыГрафикаОплаты);
	ТолькоЭтапОплатыПредоплатаДоОтгрузки	= ТолькоЭтапОплатыПредоплатаДоОтгрузки(ПараметрыРасчета.ЭтапыГрафикаОплаты);
	ЕстьПредоплатаДоОтгрузки				= ЕстьПредоплатаДоОтгрузки(ПараметрыРасчета.ЭтапыГрафикаОплаты);
	ТолькоКредитныйЭтапОплаты				= ТолькоКредитныйЭтапОплаты(ПараметрыРасчета.ЭтапыГрафикаОплаты);
	ТребуетсяКонтрольСтатусаПоОбеспечению	= Ложь;
	
	Если ПараметрыРасчета.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию")
		ИЛИ ПараметрыРасчета.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
		ИЛИ ПараметрыРасчета.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		МаксимальныйСтатусДокумента = МаксимальныйСтатусЗаказаПоОбеспечению(ПараметрыРасчета);
		
	// Вычислим статус когда расчетов по документу еще нет
	ИначеЕсли Не ПараметрыРасчета.Проведен И ЕстьАвансДоОбеспечения Тогда
			
		МаксимальныйСтатусДокумента = Перечисления.СтатусыЗаказовКлиентов.Согласован;
		
	ИначеЕсли Не ПараметрыРасчета.Проведен И ЕстьПредоплатаДоОтгрузки Тогда
			
		МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению;
		
		ТребуетсяКонтрольСтатусаПоОбеспечению = Истина;
		
	ИначеЕсли Не ПараметрыРасчета.Проведен И ТолькоКредитныйЭтапОплаты Тогда
			
		МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
		
		ТребуетсяКонтрольСтатусаПоОбеспечению = Истина;
		
	ИначеЕсли ПараметрыРасчета.ВсеСтрокиОтменены Тогда
			
		МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
		
		ТребуетсяКонтрольСтатусаПоОбеспечению = Истина;
		
	Иначе
		
		МаксимальныйСтатусЗаказаПоРасчетам = МаксимальныйСтатусЗаказаПоРасчетам(ПараметрыРасчета);
		
		Если МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовКлиентов.НеСогласован
			Или МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовКлиентов.Согласован Тогда
			
			МаксимальныйСтатусДокумента = МаксимальныйСтатусЗаказаПоРасчетам;
			
			Возврат МаксимальныйСтатусДокумента;
			
		КонецЕсли;
		
		ТребуетсяКонтрольСтатусаПоОбеспечению = Истина;
		
	КонецЕсли;
	
	Если ТребуетсяКонтрольСтатусаПоОбеспечению Тогда
		МаксимальныйСтатусЗаказаПоОбеспечению = МаксимальныйСтатусЗаказаПоОбеспечению(ПараметрыРасчета);
		
		// Установим минимальный из полученных статусов
		ВозможныеСтатусы = СтатусыПоПорядку(Перечисления.СтатусыЗаказовКлиентов.НеСогласован, Перечисления.СтатусыЗаказовКлиентов.Закрыт);
		
		ИндексМаксСтатусаПоРасчетам = ВозможныеСтатусы.Найти(МаксимальныйСтатусЗаказаПоРасчетам);
		ИндексМаксСтатусаПоОбеспечению = ВозможныеСтатусы.Найти(МаксимальныйСтатусЗаказаПоОбеспечению);
		
		МинимальныйИндексСтатуса = Мин(ИндексМаксСтатусаПоРасчетам, ИндексМаксСтатусаПоОбеспечению);
		
		МаксимальныйСтатусДокумента = ВозможныеСтатусы.Получить(МинимальныйИндексСтатуса);
		
	КонецЕсли;
	
	Возврат МаксимальныйСтатусДокумента;
	
КонецФункции

Функция МаксимальныйСтатусЗаказаПоОбеспечению(ПараметрыРасчета)
	
	// Проверим состояние обеспечения
	ПараметрыСостоянияОбеспечения = Новый Структура;
	ПараметрыСостоянияОбеспечения.Вставить("Заказ", ПараметрыРасчета.ЗаказКлиента);
	ПараметрыСостоянияОбеспечения.Вставить("Склад", ПараметрыРасчета.Склад);
	ПараметрыСостоянияОбеспечения.Вставить("ЖелаемаяДатаОтгрузки", ПараметрыРасчета.ЖелаемаяДатаОтгрузки);
	ПараметрыСостоянияОбеспечения.Вставить("АдресТовары", ПараметрыРасчета.АдресТовары);
	ПараметрыСостоянияОбеспечения.Вставить("ОтборПоСостояниюНаличия", ПараметрыРасчета.ОтборПоСостояниюНаличия);
	ПараметрыСостоянияОбеспечения.Вставить("НеОтгружатьЧастями", ПараметрыРасчета.НеОтгружатьЧастями);
	
	ОбработкаСостояниеОбеспечения = Обработки.СостояниеОбеспечения.Создать();
	ОбработкаСостояниеОбеспечения.ПолучитьСостояниеОбеспечения(ПараметрыСостоянияОбеспечения);
	
	// Установим статус, если нет необспеченных потребностей - все отгружено или отменено
	Если ОбработкаСостояниеОбеспечения.Товары.Количество() = 0 Тогда
		
		МаксимальныйСтатусЗаказаПоОбеспечению = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
		
	// Установим статус, если есть необспеченные потребности
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СостояниеОбеспечения", ОбработкаСостояниеОбеспечения.Товары);
		Запрос.Текст = ТекстЗапросаПроверкиСостоянияОбеспечения();
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			МаксимальныйСтатусЗаказаПоОбеспечению = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
			
		Иначе
			
			МаксимальныйСтатусЗаказаПоОбеспечению = Перечисления.СтатусыЗаказовКлиентов.Согласован;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МаксимальныйСтатусЗаказаПоОбеспечению;
	
КонецФункции

Функция МаксимальныйСтатусЗаказаПоРасчетам(ПараметрыРасчета)
	
	МаксимальныйСтатусЗаказаПоРасчетам = ПараметрыРасчета.Статус;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаРасчетаМаксимальногоСтатусаПоРасчетам();
	Запрос.УстановитьПараметр("ЗаказКлиента", ПараметрыРасчета.ЗаказКлиента);
	Запрос.УстановитьПараметр("Проведен", ПараметрыРасчета.Проведен);
	Запрос.УстановитьПараметр("Статус", ПараметрыРасчета.Статус);
	Запрос.УстановитьПараметр("СуммаАвансаДоОбеспечения", ПараметрыРасчета.СуммаАвансаДоОбеспечения);
	Запрос.УстановитьПараметр("СуммаПредоплатыДоОтгрузки", ПараметрыРасчета.СуммаПредоплатыДоОтгрузки);
	Запрос.УстановитьПараметр("СуммаДокумента", ПараметрыРасчета.СуммаДокумента);
	Запрос.УстановитьПараметр("ДатаАктуальности", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ПорядокРасчетов", ПараметрыРасчета.ПорядокРасчетов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		МаксимальныйСтатусЗаказаПоРасчетам = Выборка.МаксимальныйСтатусЗаказа;
		
	// Все расчеты выполнены или отсутствуют
	Иначе
		Если ПараметрыРасчета.Проведен Тогда
			МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МаксимальныйСтатусЗаказаПоРасчетам;
	
КонецФункции

Функция ТекстЗапросаПроверкиСостоянияОбеспечения()
	
	ТекстЗапросаПроверкиСостоянияОбеспечения = "
	|ВЫБРАТЬ
	|	СостояниеОбеспечения.Номенклатура,
	|	СостояниеОбеспечения.Характеристика,
	|	СостояниеОбеспечения.Склад,
	|	СостояниеОбеспечения.ДатаОтгрузки,
	|	СостояниеОбеспечения.ГраницаГрафикаДоступности,
	|	СостояниеОбеспечения.НеОбеспечено,
	|	СостояниеОбеспечения.ЧастичноИлиНетВНаличии,
	|	СостояниеОбеспечения.ПринятКОбеспечению,
	|	СостояниеОбеспечения.ОжидаемаяДатаПоступления,
	|	СостояниеОбеспечения.ОбеспеченоПоступлением,
	|	СостояниеОбеспечения.ВариантОбеспечения
	|ПОМЕСТИТЬ СостояниеОбеспечения
	|ИЗ
	|	&СостояниеОбеспечения КАК СостояниеОбеспечения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрольОбеспечения.Номенклатура,
	|	КонтрольОбеспечения.Характеристика,
	|	КонтрольОбеспечения.Склад,
	|	КонтрольОбеспечения.ВариантКонтроля,
	|	КонтрольОбеспечения.ДатаОтгрузки,
	|	КонтрольОбеспечения.ГраницаГрафикаДоступности,
	|	КонтрольОбеспечения.НеОбеспечено,
	|	КонтрольОбеспечения.ЧастичноИлиНетВНаличии,
	|	КонтрольОбеспечения.ПринятКОбеспечению,
	|	КонтрольОбеспечения.ОжидаемаяДатаПоступления,
	|	КонтрольОбеспечения.ОбеспеченоПоступлением
	|ИЗ
	|	(ВЫБРАТЬ
	|		СостояниеОбеспечения.Номенклатура КАК Номенклатура,
	|		СостояниеОбеспечения.Характеристика КАК Характеристика,
	|		СостояниеОбеспечения.Склад КАК Склад,
	|		ВЫБОР
	|			КОГДА НЕ НастройкаКонтроляОстатков.ВариантКонтроля ЕСТЬ NULL 
	|				ТОГДА НастройкаКонтроляОстатков.ВариантКонтроля
	|			ИНАЧЕ Склады.ВариантКонтроля
	|		КОНЕЦ КАК ВариантКонтроля,
	|		СостояниеОбеспечения.ДатаОтгрузки КАК ДатаОтгрузки,
	|		СостояниеОбеспечения.ГраницаГрафикаДоступности КАК ГраницаГрафикаДоступности,
	|		СостояниеОбеспечения.НеОбеспечено КАК НеОбеспечено,
	|		СостояниеОбеспечения.ЧастичноИлиНетВНаличии КАК ЧастичноИлиНетВНаличии,
	|		СостояниеОбеспечения.ПринятКОбеспечению КАК ПринятКОбеспечению,
	|		СостояниеОбеспечения.ОжидаемаяДатаПоступления КАК ОжидаемаяДатаПоступления,
	|		СостояниеОбеспечения.ОбеспеченоПоступлением КАК ОбеспеченоПоступлением,
	|		СостояниеОбеспечения.ВариантОбеспечения КАК ВариантОбеспечения
	|	ИЗ
	|		СостояниеОбеспечения КАК СостояниеОбеспечения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО СостояниеОбеспечения.Склад = Склады.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаКонтроляОстатков
	|			ПО СостояниеОбеспечения.Номенклатура = НастройкаКонтроляОстатков.Номенклатура
	|				И СостояниеОбеспечения.Характеристика = НастройкаКонтроляОстатков.Характеристика
	|				И СостояниеОбеспечения.Склад = НастройкаКонтроляОстатков.Склад) КАК КонтрольОбеспечения
	|ГДЕ
	|	НЕ КонтрольОбеспечения.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)
	|	И (КонтрольОбеспечения.ЧастичноИлиНетВНаличии
	|				И КонтрольОбеспечения.ВариантКонтроля = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика)
	|				И КонтрольОбеспечения.ДатаОтгрузки < КонтрольОбеспечения.ГраницаГрафикаДоступности
	|				И (КонтрольОбеспечения.ОбеспеченоПоступлением > 0
	|						И (КонтрольОбеспечения.ОжидаемаяДатаПоступления = ДАТАВРЕМЯ(1, 1, 1)
	|							ИЛИ КонтрольОбеспечения.ОжидаемаяДатаПоступления > КонтрольОбеспечения.ГраницаГрафикаДоступности)
	|					ИЛИ КонтрольОбеспечения.НеОбеспечено > 0)
	|			ИЛИ КонтрольОбеспечения.ЧастичноИлиНетВНаличии
	|				И (КонтрольОбеспечения.ВариантКонтроля = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомРезерва)
	|					ИЛИ КонтрольОбеспечения.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)))";
	
	Возврат ТекстЗапросаПроверкиСостоянияОбеспечения;
	
КонецФункции

Функция ТекстЗапросаРасчетаМаксимальногоСтатусаПоРасчетам()
	
	ТекстЗапросаРасчетаМаксимальногоСтатусаПоРасчетам = "
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ &Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.ПустаяСсылка)
	|
	|		КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|
	|		КОГДА &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|				ИЛИ &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)
	|
	|		// Сумма аванса не оплачена
	|		КОГДА (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке))
	|				И &СуммаАвансаДоОбеспечения > 0
	|				И &СуммаАвансаДоОбеспечения > &СуммаДокумента - ЕСТЬNULL(СостояниеРасчетов.КОплатеОстаток, 0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
	|
	|		// Сумма предоплаты до отгрузки не оплачена
	|		КОГДА (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке))
	|				И &СуммаПредоплатыДоОтгрузки > 0
	|				И &СуммаПредоплатыДоОтгрузки > &СуммаДокумента - ЕСТЬNULL(СостояниеРасчетов.КОплатеОстаток, 0) - &СуммаАвансаДоОбеспечения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
	|
	|		// Аванс и предоплата до отгрузки оплачены
	|		КОГДА (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке))
	|				И &СуммаДокумента - ЕСТЬNULL(СостояниеРасчетов.КОплатеОстаток, 0) >= &СуммаАвансаДоОбеспечения + &СуммаПредоплатыДоОтгрузки
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)
	|
	|		// Кредит не оплачен
	|		КОГДА (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
	|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке))
	|				И &СуммаДокумента - &СуммаАвансаДоОбеспечения + &СуммаПредоплатыДоОтгрузки < &СуммаДокумента - ЕСТЬNULL(СостояниеРасчетов.КОплатеОстаток, 0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)
	|
	|		//Все оплачено и отгружено
	|		КОГДА &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
	|
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.ПустаяСсылка)
	|	КОНЕЦ КАК МаксимальныйСтатусЗаказа
	|ИЗ
	|	(ВЫБРАТЬ
	|		СУММА(ТаблицаРасчетов.КОплатеОстаток) КАК КОплатеОстаток,
	|		СУММА(ТаблицаРасчетов.СуммаОстаток) КАК СуммаОстаток,
	|		ТаблицаРасчетов.ЗаказКлиента КАК ЗаказКлиента
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РасчетыСКлиентамиОстатки.КОплатеОстаток КАК КОплатеОстаток,
	|			0 КАК СуммаОстаток,
	|			РасчетыСКлиентамиОстатки.ЗаказКлиента КАК ЗаказКлиента
	|		ИЗ
	|			РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента = &ЗаказКлиента) КАК РасчетыСКлиентамиОстатки
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			0,
	|			ЗаказыКлиентовОстатки.СуммаОстаток,
	|			ЗаказыКлиентовОстатки.ЗаказКлиента
	|		ИЗ
	|			РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &ЗаказКлиента) КАК ЗаказыКлиентовОстатки) КАК ТаблицаРасчетов
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаРасчетов.ЗаказКлиента) КАК СостояниеРасчетов
	|";
	
	Возврат ТекстЗапросаРасчетаМаксимальногоСтатусаПоРасчетам;
	
КонецФункции

Функция ТекстЗапросаПоСтатусамПоПорядку()
	
	Текст = "ВЫБРАТЬ
	|	СтатусыЗаказовКлиентов.Порядок
	|ПОМЕСТИТЬ НачальныйСтатус
	|ИЗ
	|	Перечисление.СтатусыЗаказовКлиентов КАК СтатусыЗаказовКлиентов
	|ГДЕ
	|	СтатусыЗаказовКлиентов.Ссылка = &НачальныйСтатус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыЗаказовКлиентов.Порядок
	|ПОМЕСТИТЬ КонечныйСтатус
	|ИЗ
	|	Перечисление.СтатусыЗаказовКлиентов КАК СтатусыЗаказовКлиентов
	|ГДЕ
	|	СтатусыЗаказовКлиентов.Ссылка = &КонечныйСтатус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыПослеТекущего.Ссылка
	|ИЗ
	|	КонечныйСтатус КАК КонечныйСтатус
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтатусыЗаказовКлиентов.Ссылка КАК Ссылка
	|		ИЗ
	|			НачальныйСтатус КАК НачальныйСтатус
	|				ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.СтатусыЗаказовКлиентов КАК СтатусыЗаказовКлиентов
	|				ПО (СтатусыЗаказовКлиентов.Порядок >= НачальныйСтатус.Порядок)) КАК СтатусыПослеТекущего
	|		ПО КонечныйСтатус.Порядок >= СтатусыПослеТекущего.Ссылка.Порядок
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыПослеТекущего.Ссылка.Порядок";
	
	Возврат Текст;
	
КонецФункции

Функция СтатусыПоПорядку(НачальныйСтатус, КонечныйСтатус)
	
	СтатусыВПорядкеУбывания = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоСтатусамПоПорядку();
	
	Запрос.УстановитьПараметр("НачальныйСтатус", НачальныйСтатус);
	Запрос.УстановитьПараметр("КонечныйСтатус", КонечныйСтатус);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		СтатусыВПорядкеУбывания = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
		
	Возврат СтатусыВПорядкеУбывания;
		
КонецФункции

Функция ЕстьКредитПослеОтгрузки(ЭтапыГрафикаОплаты)
	
	ЕстьКредитПослеОтгрузки = Ложь;
	
	ОтборПоЭтапуОплаты = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки) ;
	НайденныеСтроки = ЭтапыГрафикаОплаты.НайтиСтроки(ОтборПоЭтапуОплаты);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЕстьКредитПослеОтгрузки = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьКредитПослеОтгрузки;
	
КонецФункции

Функция ТолькоКредитныйЭтапОплаты(ЭтапыГрафикаОплаты)
	
	ТолькоКредитныйЭтапОплаты = Ложь;
	
	ОтборПоКредитномуЭтапу = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки);
	НайденныеСтроки = ЭтапыГрафикаОплаты.НайтиСтроки(ОтборПоКредитномуЭтапу);
	
	Если ЭтапыГрафикаОплаты.Количество() = 1 ИЛИ ЭтапыГрафикаОплаты.Количество() = НайденныеСтроки.Количество()Тогда
		
		ТолькоКредитныйЭтапОплаты = ЕстьКредитПослеОтгрузки(ЭтапыГрафикаОплаты);
		
	КонецЕсли;
	
	Возврат ТолькоКредитныйЭтапОплаты;
	
КонецФункции

Функция ЕстьПредоплатаДоОтгрузки(ЭтапыГрафикаОплаты)
	
	ЕстьПредоплатаДоОтгрузки = Ложь;
	
	ОтборПоЭтапуОплаты = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки) ;
	НайденныеСтроки = ЭтапыГрафикаОплаты.НайтиСтроки(ОтборПоЭтапуОплаты);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЕстьПредоплатаДоОтгрузки = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьПредоплатаДоОтгрузки;
	
КонецФункции

Функция ТолькоЭтапОплатыПредоплатаДоОтгрузки(ЭтапыГрафикаОплаты)
	
	ТолькоЭтапОплатыПредоплатаДоОтгрузки = Ложь;
	
	Если ЭтапыГрафикаОплаты.Количество() = 1 Тогда
		
		ТолькоЭтапОплатыПредоплатаДоОтгрузки = ЕстьПредоплатаДоОтгрузки(ЭтапыГрафикаОплаты);
		
	КонецЕсли;
	
	Возврат ТолькоЭтапОплатыПредоплатаДоОтгрузки;
	
КонецФункции

Функция ЕстьАвансДоОбеспечения(ЭтапыГрафикаОплаты)
	
	ЕстьАвансДоОбеспечения = Ложь;
	
	ОтборПоЭтапуОплаты = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения) ;
	НайденныеСтроки = ЭтапыГрафикаОплаты.НайтиСтроки(ОтборПоЭтапуОплаты);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЕстьАвансДоОбеспечения = Истина;
		
	КонецЕсли;
	
	Возврат ЕстьАвансДоОбеспечения;
	
КонецФункции

Функция РассчитатьСтатусДокументаСервер(Объект, КоличествоОбработанных) Экспорт
	
	СтатусДоРасчета = Объект.Статус;
	
	СтатусРасчитан = Ложь;
	
	Если СтатусДоРасчета <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Закрыт") Тогда
		
		ЗаполнитьПередРасчетомМаксимальногоСтатуса(Объект);
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Отменено", Истина);
		НайденныеСтроки =  Объект.Товары.НайтиСтроки(ПараметрыОтбора); 
		
		ВсеСтрокиОтменены = (Объект.Товары.Количество() = НайденныеСтроки.Количество());
		
		ПараметрыРасчета = Новый Структура;
		ПараметрыРасчета.Вставить("ЗаказКлиента", Объект.Ссылка);
		ПараметрыРасчета.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
		ПараметрыРасчета.Вставить("Проведен", Объект.Проведен);
		ПараметрыРасчета.Вставить("Статус", Объект.Статус);
		ПараметрыРасчета.Вставить("СуммаАвансаДоОбеспечения", Объект.СуммаАвансаДоОбеспечения);
		ПараметрыРасчета.Вставить("СуммаПредоплатыДоОтгрузки", Объект.СуммаПредоплатыДоОтгрузки);
		ПараметрыРасчета.Вставить("СуммаДокумента", Объект.СуммаДокумента);
		ПараметрыРасчета.Вставить("Договор", Объект.Договор);
		ПараметрыРасчета.Вставить("ПорядокРасчетов", ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(Объект));
		ПараметрыРасчета.Вставить("Склад", Объект.Склад);
		ПараметрыРасчета.Вставить("ЖелаемаяДатаОтгрузки", Объект.ЖелаемаяДатаОтгрузки);
		ПараметрыРасчета.Вставить("АдресТовары", ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить()));
		ПараметрыРасчета.Вставить("ЭтапыГрафикаОплаты", Объект.ЭтапыГрафикаОплаты);
		ПараметрыРасчета.Вставить("ОтборПоСостояниюНаличия", Перечисления.СостоянияНаличия.Любое);
		ПараметрыРасчета.Вставить("НеОтгружатьЧастями", Объект.НеОтгружатьЧастями);
		ПараметрыРасчета.Вставить("ВсеСтрокиОтменены", ВсеСтрокиОтменены);
		
		Объект.Статус = МаксимальныйСтатусЗаказаКлиента(ПараметрыРасчета);
		
		СтатусПриИзмененииСервер(Объект);
		
		Если НЕ СтатусДоРасчета = Объект.Статус Тогда
			СтатусРасчитан = Истина;
			КоличествоОбработанных = КоличествоОбработанных + 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусРасчитан
	
КонецФункции

Процедура ЗаполнитьПередРасчетомМаксимальногоСтатуса(Объект)
	
	// Заполним даты отгрузки
	Если Объект.Склад.Пустая() 
		Или Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПродажиВызовСервера.ДатаОтгрузкиПустая(Объект, "Товары") Тогда
		Если Объект.НеОтгружатьЧастями Тогда
			Объект.РассчитатьДатуОтгрузки(Истина);
			ЗаполнитьДатуОтгрузкиСервер(Объект, Объект.ДатаОтгрузки, Неопределено);
		Иначе
			Объект.РассчитатьДатыОтгрузки();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СтатусПриИзмененииСервер(Объект)
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказКлиента));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

Процедура ЗаполнитьДатуОтгрузкиСервер(Объект, ДатаОтгрузки, Знач МассивВыделенныхСтрок)

	Если МассивВыделенныхСтрок = Неопределено Тогда

		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;

	Иначе

		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Функция ОбособленноеОбеспечение(ЗаказКлиента) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Т
	|ГДЕ
	|	Т.Ссылка = &ЗаказКлиента
	|	И Т.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка)
	|");
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ТаблицаНеобеспеченнойПотребности(ЗаказКлиента, ПолучатьТовары = Истина, ПолучатьРаботы = Истина) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"
	|ВЫБРАТЬ
	|	Заказы.Номенклатура                 КАК Номенклатура,
	|	Заказы.Характеристика               КАК Характеристика,
	|	Заказы.Склад                        КАК Склад,
	|	Заказы.ЗаказКлиента.Подразделение   КАК Подразделение,
	|	Заказы.ЗаказКлиента.Назначение      КАК Назначение,
	|//Астек
	|	Заказы.ЗаказКлиента.Ссылка		    КАК АК_ЗаказКлиента,
	|	Заказы.ЗаказКлиента.Сделка          КАК АКСделка,
	|	МАКСИМУМ(Товары.ВариантОбеспечения) КАК ВариантОбеспечения,
	|	СУММА(Заказы.ЗаказаноОстаток)       КАК Заказано,
	|
	|	ВЫБОР КОГДА МАКСИМУМ(Товары.Упаковка) <> МИНИМУМ(Товары.Упаковка) ТОГДА
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|	ИНАЧЕ
	|		МАКСИМУМ(Товары.Упаковка)
	|	КОНЕЦ                             КАК Упаковка,
	|
	|	МАКСИМУМ(Товары.НомерСтроки)      КАК НомерСтроки
	|
	|ПОМЕСТИТЬ НоменклатураЗаказа
	|
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(,
	|			ЗаказКлиента = &ЗаказКлиента
	|		) КАК Заказы
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК Товары
	|		ПО Заказы.ЗаказКлиента      = Товары.Ссылка
	|			И Заказы.Номенклатура   = Товары.Номенклатура
	|			И Заказы.Характеристика = Товары.Характеристика
	|			И Заказы.КодСтроки      = Товары.КодСтроки
	|ГДЕ
	|	Товары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ))
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Номенклатура,
	|	Заказы.Характеристика,
	|	Заказы.Склад,
	|	Заказы.ЗаказКлиента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение, Номенклатура, Характеристика, Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбеспечениеТоварами.Номенклатура    КАК Номенклатура,
	|	ОбеспечениеТоварами.Характеристика  КАК Характеристика,
	|	ОбеспечениеТоварами.Склад           КАК Склад,
	|	ОбеспечениеТоварами.Назначение      КАК Назначение,
	|	ОбеспечениеТоварами.КЗаказуОстаток  КАК КЗаказу
	|
	|ПОМЕСТИТЬ Потребность
	|
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад, Назначение) В
	|				(ВЫБРАТЬ
	|					Т.Номенклатура,
	|					Т.Характеристика,
	|					Т.Склад,
	|					Т.Назначение
	|				ИЗ
	|					НоменклатураЗаказа КАК Т)
	|			) КАК ОбеспечениеТоварами
	|ГДЕ
	|	ОбеспечениеТоварами.КЗаказуОстаток > 0 И &ПолучатьТовары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбеспечениеРаботами.Номенклатура        КАК Номенклатура,
	|	ОбеспечениеРаботами.Характеристика      КАК Характеристика,
	|	ОбеспечениеРаботами.Подразделение       КАК Подразделение,
	|	ОбеспечениеРаботами.Назначение          КАК Назначение,
	|	ОбеспечениеРаботами.КОбеспечениюОстаток КАК КЗаказу
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказовРаботами.Остатки(,
	|				(Номенклатура, Характеристика, Подразделение, Назначение) В
	|				(ВЫБРАТЬ
	|					Т.Номенклатура,
	|					Т.Характеристика,
	|					Т.Подразделение,
	|					Т.Назначение
	|				ИЗ
	|					НоменклатураЗаказа КАК Т)
	|		) КАК ОбеспечениеРаботами
	|ГДЕ
	|	ОбеспечениеРаботами.КОбеспечениюОстаток > 0 И &ПолучатьРаботы
	|
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение, Номенклатура, Характеристика, Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таб.НомерСтроки            КАК НомерСтроки,
	|	Таб.Номенклатура           КАК Номенклатура,
	|	Таб.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	Таб.Характеристика         КАК Характеристика,
	|	Таб.Склад                  КАК Склад,
	|	Таб.Назначение             КАК Назначение,
	|	Таб.ВариантОбеспечения     КАК ВариантОбеспечения,
	|	Таб.Упаковка               КАК Упаковка,
	|	Таб.Количество             КАК Количество,
	|	Таб.Количество
	|	/ЕСТЬNULL(Таб.Упаковка.Коэффициент,1) КАК КоличествоУпаковок
	|ИЗ
	|(ВЫБРАТЬ
	|	Т.Номенклатура       КАК Номенклатура,
	|	Т.Характеристика     КАК Характеристика,
	|	Т.Склад              КАК Склад,
	|	Т.Назначение         КАК Назначение,
	|	Т.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ВЫБОР
	|		КОГДА Т.Заказано > ВтКЗаказу.КЗаказу ТОГДА
	|			ВтКЗаказу.КЗаказу
	|		ИНАЧЕ
	|			Т.Заказано
	|	КОНЕЦ                КАК Количество,
	|	Т.Упаковка           КАК Упаковка,
	|	Т.НомерСтроки        КАК НомерСтроки
	|ИЗ
	|	НоменклатураЗаказа КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Потребность КАК ВтКЗаказу
	|		ПО Т.Номенклатура      = ВтКЗаказу.Номенклатура
	|			И Т.Характеристика = ВтКЗаказу.Характеристика
	|			И Т.Склад          = ВтКЗаказу.Склад
	|			И Т.Назначение     = ВтКЗаказу.Назначение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Номенклатура       КАК Номенклатура,
	|	Т.Характеристика     КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО         КАК Склад,
	|	Т.Назначение         КАК Назначение,
	|	Т.ВариантОбеспечения КАК ВариантОбеспечения,
	|	ВЫБОР
	|		КОГДА Т.Заказано > ВтКЗаказу.КЗаказу ТОГДА
	|			ВтКЗаказу.КЗаказу
	|		ИНАЧЕ
	|			Т.Заказано
	|	КОНЕЦ                КАК Количество,
	|	Т.Упаковка           КАК Упаковка,
	|	Т.НомерСтроки        КАК НомерСтроки
	|ИЗ
	|	НоменклатураЗаказа КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Потребность КАК ВтКЗаказу
	|		ПО Т.Номенклатура      = ВтКЗаказу.Номенклатура
	|			И Т.Характеристика = ВтКЗаказу.Характеристика
	|			И Т.Подразделение  = ВтКЗаказу.Склад
	|			И Т.Назначение     = ВтКЗаказу.Назначение
	|	) КАК Таб
	|
	|УПОРЯДОЧИТЬ ПО
	|	Таб.НомерСтроки
	|");
	Запрос.УстановитьПараметр("ЗаказКлиента",   ЗаказКлиента);
	Запрос.УстановитьПараметр("ПолучатьТовары", ПолучатьТовары);
	Запрос.УстановитьПараметр("ПолучатьРаботы", ПолучатьРаботы);

	ТаблицаТовары = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаТовары;

КонецФункции

Функция ЕстьОбособленныеЗаказыПоСделке(Сделка) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Т
	|ГДЕ
	|	Т.Ссылка.Сделка = &Сделка
	|	И Т.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка)
	|");
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Обработчик обновления УТ 11.1.0.0
// Заполняет реквизит "СпособДоставки" значением по умолчанию "Самовывоз"
//
Процедура ЗаполнитьСпособДоставкиСамовывоз() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.СпособДоставки = &ПустойСпособДоставки";
	
	Запрос.УстановитьПараметр("ПустойСпособДоставки", Перечисления.СпособыДоставки.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли

