&НаКлиенте
Перем КэшированныеЗначения; // используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем КешРазделов; // используется для обработок связи между разделами и товарами
&НаКлиенте
Перем СтарыйНомерРаздела; // поддержка редактирования номера раздела
&НаКлиенте
Перем НовыйНомерРаздела; // поддержка редактирования номера раздела

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПараметрыЗаписи.Свойство("РежимЗаписи", РежимЗаписи);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Объект.Статус = Перечисления.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Отказ = Объект.Товары.НайтиСтроки(Новый Структура("НомерРаздела", 0)).Количество() > 0;
		Если Отказ Тогда
			Элементы.ТоварыПоказатьВсеТовары.Пометка = Истина;
			НастроитьСервисыЗаполнения(Элементы, Объект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьДанныеФормы();
	ЗаполнитьДополнительныеПризнакиТоваров();
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ТаможеннаяДекларацияИмпорт", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма" Тогда
		ОбработкаВыбораДобавитьТовары(ВыбранноеЗначение, ДанныеТекущегоРаздела(Элементы.Разделы), "АдресТоваровВХранилище");
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборТоваровПоПоступлению" Тогда
		ОбработкаВыбораДобавитьТовары(ВыбранноеЗначение, ДанныеТекущегоРаздела(Элементы.Разделы), "АдресТоваровВХранилище", "Товары");
	ИначеЕсли ИсточникВыбора.ИмяФормы = "РегистрНакопления.ТоварыОрганизацийКОформлению.Форма.ПодборПоОстаткам" Тогда
		ОбработкаВыбораПодобратьИзОформления(ВыбранноеЗначение, ДанныеТекущегоРаздела(Элементы.Разделы));
	КонецЕсли;
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Статус) И СтатусДокумента <> Объект.Статус
	 И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыТаможенныхДеклараций.ВыпущеноСТаможни") Тогда
		ДатаВыпуска = Объект.Дата;
		Если ВвестиДату(ДатаВыпуска, НСтр("ru='Дата выпуска с таможни'"), ЧастиДаты.Дата) Тогда
			Объект.Дата = КонецДня(ДатаВыпуска);
		КонецЕсли;
	КонецЕсли;
	СтатусДокумента = Объект.Статус;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	ПересчитатьСуммыПоВалюте();
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	ПоставщикПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеУказаноПриИзменении(Элемент)
	Если ПоступлениеУказано Тогда
		Объект.ПоступлениеТоваров = ВыбратьПоступлениеТоваров();
	Иначе
		Объект.ПоступлениеТоваров = Неопределено;
	КонецЕсли;
	ПоступлениеТоваровПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	ХозяйственнаяОперацияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	ПартнерПриИзмененииСервер();
	ПересчитатьСуммыПоВалюте();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	СоглашениеПриИзмененииСервер();
	ПересчитатьСуммыПоВалюте();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
	
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетовПриИзмененииСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.СтраницаРазделыТовары Тогда
		АктивироватьРаздел();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НомерДекларацииПриИзменении(Элемент)
	ИнициироватьЗаполнениеНомераДляСФ();
КонецПроцедуры

&НаКлиенте
Процедура НумероватьПоТоварамПриИзменении(Элемент)
	ИнициироватьЗаполнениеНомераДляСФ();
	НастроитьСервисыЗаполнения(Элементы, Объект);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ РАЗДЕЛЫ

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("АктивироватьРаздел", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РазделыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	НовыйНомерРаздела = НовыйНомерРаздела(Объект.Разделы);
	Отказ = (НовыйНомерРаздела > НомерРазделаПредел);
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Достигнут предельный номер раздела, новый раздел добавить нельзя. Проверьте нумерацию разделов.'"),
			Объект.Ссылка,
			"Разделы[" + (Элементы.Разделы.ТекущиеДанные.НомерСтроки - 1) + "].НомерРаздела",
		);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.НомерРаздела = НовыйНомерРаздела;
		Если Не Объект.НумероватьПоТоварам И ЗначениеЗаполнено(Объект.НомерДекларации) Тогда
			Элемент.ТекущиеДанные.НомерДляСФ = НомерДляСФ(Объект.НомерДекларации, Элемент.ТекущиеДанные.НомерРаздела);
		КонецЕсли;
	КонецЕсли;
	СтарыйНомерРаздела = Элемент.ТекущиеДанные.НомерРаздела;
КонецПроцедуры

&НаКлиенте
Процедура РазделыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока и Не ОтменаРедактирования Тогда
		ЗаменитьЭлементВСпискеВыбора(
			Элементы.ТоварыНомерРаздела.СписокВыбора, -1, Элемент.ТекущиеДанные.НомерРаздела, Элементы.ТоварыНомерРаздела.Формат);
	КонецЕсли;
	СтарыйНомерРаздела = Элемент.ТекущиеДанные.НомерРаздела;
КонецПроцедуры

&НаКлиенте
Процедура РазделыПередУдалением(Элемент, Отказ)
	Разделы = ОбщегоНазначенияУТКлиентСервер.ВыделенныеЭлементыКоллекции(Объект.Разделы, Элементы.Разделы.ВыделенныеСтроки);
	КешРазделов = Новый Соответствие;
	Для Каждого Раздел Из Разделы Цикл
		КешРазделов.Вставить(Раздел.НомерРаздела, Раздел.НомерРаздела);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазделыПослеУдаления(Элемент)
	ОчиститьНомераРазделовТоваров(КешРазделов);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура РазделыНомерРазделаПриИзменении(Элемент)
	НовыйНомерРаздела = Элементы.Разделы.ТекущиеДанные.НомерРаздела;
	Если НомерРазделаУникальный(Объект.Разделы, НовыйНомерРаздела) Тогда
		// меняем номер для с/ф, если требуется
		Если Не Объект.НумероватьПоТоварам И ЗначениеЗаполнено(Объект.НомерДекларации) Тогда
			Элементы.Разделы.ТекущиеДанные.НомерДляСФ = НомерДляСФ(Объект.НомерДекларации, НовыйНомерРаздела);
		КонецЕсли;
		// меняем номер раздела у связанных товаров
		ЗаполнитьПоляТабчасти("Товары", Новый Структура("НомерРаздела", НовыйНомерРаздела), Новый Структура("НомерРаздела", СтарыйНомерРаздела));
		// удалим старый номер раздела из списка выбора разделов в товарах
		ЗаменитьЭлементВСпискеВыбора(
			Элементы.ТоварыНомерРаздела.СписокВыбора, СтарыйНомерРаздела, НовыйНомерРаздела, Элементы.ТоварыНомерРаздела.Формат);
		
		АктивироватьРаздел();	
	Иначе
		Элементы.Разделы.ТекущиеДанные.НомерРаздела = СтарыйНомерРаздела;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(НСтр("ru = 'Раздел №%1 уже существует. Укажите другой номер раздела'"), "%1", НовыйНомерРаздела),
			Объект.Ссылка,
			"Разделы[" + (Элементы.Разделы.ТекущиеДанные.НомерСтроки - 1) + "].НомерРаздела",
		);
	КонецЕсли;
	НовыйНомерРаздела = Элементы.Разделы.ТекущиеДанные.НомерРаздела;
КонецПроцедуры

&НаКлиенте
Процедура РазделыТаможеннаяСтоимостьПриИзменении(Элемент)
	Раздел = Элементы.Разделы.ТекущиеДанные;
	ПересчитатьПоля(Раздел, "СуммаПошлины, СуммаНДС", Раздел);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура РазделыСтавкаПошлиныПриИзменении(Элемент)
	Раздел = Элементы.Разделы.ТекущиеДанные;
	ПересчитатьПоля(Раздел, "СуммаПошлины, СуммаНДС", Раздел);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура РазделыСуммаПошлиныПриИзменении(Элемент)
	Раздел = Элементы.Разделы.ТекущиеДанные;
	ПересчитатьПоля(Раздел, "СтавкаПошлины, СуммаНДС", Раздел);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура РазделыСтавкаНДСПриИзменении(Элемент)
	Раздел = Элементы.Разделы.ТекущиеДанные;
	ПересчитатьПоля(Раздел, "СуммаНДС", Раздел);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура РазделыСуммаНДСПриИзменении(Элемент)
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура РазделыНомерДляСФПриИзменении(Элемент)
	ОтборТоваров = Новый Структура("НомерРаздела", Элементы.Разделы.ТекущиеДанные.НомерРаздела);
	ЗаполнитьПоляТабчасти("Товары", Новый Структура("НомерГТД", Неопределено), ОтборТоваров);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		ДанныеРаздела = ДанныеТекущегоРаздела(Элементы.Разделы);
		ЗаполнитьЗначенияСвойств(Элементы.Товары.ТекущиеДанные, ДанныеРаздела, "НомерРаздела, СтранаПроисхождения, Склад");
		Если Объект.НумероватьПоТоварам И ЗначениеЗаполнено(Объект.НомерДекларации) Тогда
			Элемент.ТекущиеДанные.НомерДляСФ = НомерДляСФ(Объект.НомерДекларации, Элемент.ТекущиеДанные.НомерСтроки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Действия = Новый Структура;
    Действия.Вставить("ПроверитьХарактеристикуПоВладельцу",ТекущаяСтрока.Характеристика);
    Действия.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу",ТекущаяСтрока.Упаковка);
    Действия.Вставить("ПересчитатьКоличествоЕдиниц");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Действия = Новый Структура;
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Действия = Новый Структура;
	Действия.Вставить("ПересчитатьКоличествоЕдиниц");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Действия = Новый Структура;
    Действия.Вставить("ПересчитатьКоличествоЕдиниц");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТаможеннаяСтоимостьПриИзменении(Элемент)
	Товар = Элементы.Товары.ТекущиеДанные;
	ПересчитатьПоля(Товар, "СуммаПошлины, СуммаНДС", ДанныеТекущегоРаздела(Элементы.Разделы));
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПошлиныПриИзменении(Элемент)
	Товар = Элементы.Товары.ТекущиеДанные;
	ПересчитатьПоля(Товар, "СуммаНДС", ДанныеТекущегоРаздела(Элементы.Разделы));
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДПриИзменении(Элемент)
	ДанныеГТД = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Элементы.Товары.ТекущиеДанные.НомерГТД, "Код, СтранаПроисхождения");
	Элементы.Товары.ТекущиеДанные.НомерДляСФ = ДанныеГТД.Код;
	Элементы.Товары.ТекущиеДанные.СтранаПроисхождения = ДанныеГТД.СтранаПроисхождения;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	НоменклатураКлиент.НомерГТДОбработкаВыбора(ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура РаспределитьНаТовары(Команда)
	Если Объект.Товары.Количество() > 0 И Объект.Разделы.Количество() > 0 Тогда
		РаспределитьНаТоварыСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоТоварам(Команда)
	Если Объект.Товары.Количество() > 0 И Объект.Разделы.Количество() > 0 Тогда
		РассчитатьПоТоварамСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеТовары(Команда)
	Элементы.ТоварыПоказатьВсеТовары.Пометка = Не Элементы.ТоварыПоказатьВсеТовары.Пометка;
	НастроитьСервисыЗаполнения(Элементы, Объект);
	АктивироватьРаздел();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНомерРаздела(Команда)
	ЗаполнитьПоляТабчасти("Товары", Новый Структура("НомерРаздела", ДанныеТекущегоРаздела(Элементы.Разделы).НомерРаздела));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНомерРаздела(Команда)
	ТекущийРаздел = ДанныеТекущегоРаздела(Элементы.Разделы).НомерРаздела;
	ЗаполнитьПоляТабчасти("Товары", Новый Структура("НомерРаздела", ТекущийРаздел), Новый Структура("НомерРаздела", 0));
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	Склад = ДанныеТекущегоРаздела(Элементы.Разделы).Склад;
	ПараметрыПодбора =
		Новый Структура(
			"Документ, Дата, Склад, Соглашение,
			|ОтборПоТипуНоменклатуры, РежимПодбораИспользоватьСкладыВТабличнойЧасти,
			|РежимПодбораИсключитьГруппыДоступныеВЗаказах, РежимПодбораБезСуммовыхПараметров",
			Объект.Ссылка, ДатаДокумента(Объект.Дата), Склад, ПоступлениеСоглашение,
			Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()), Истина,
			Истина, Истина);
	ОткрытьФорму("Обработка.ПодборТоваровВДокументЗакупки.Форма", ПараметрыПодбора, ЭтаФорма, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзПоступления(Команда)
	ПараметрыПодбора =
		Новый Структура(
			"ДокументПоступления, Валюта, Дата, ЦенаВключаетНДС, ПолучатьСерииНоменклатуры",
			Объект.ПоступлениеТоваров, Объект.Валюта, ДатаДокумента(Объект.Дата), Ложь, Ложь);
	ОткрытьФорму("ОбщаяФорма.ПодборТоваровПоПоступлению", ПараметрыПодбора, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзОформления(Команда)
	Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтаФорма, Неопределено, Новый Структура("Организация, Поставщик")) Тогда
		ДанныеРаздела = ДанныеТекущегоРаздела(Элементы.Разделы);
		ОтборТоваров = Новый Структура("НомерРаздела", ДанныеРаздела.НомерРаздела);
		АдресВХранилище = ПоместитьВХранилище("Товары", "Номенклатура, Характеристика, Склад, Количество", ОтборТоваров);
		Склад = ДанныеРаздела.Склад;
		ПараметрыПодбора =
			Новый Структура(
				"АдресВХранилище, Организация, Склад, Дата, Поставщик, ДеятельностьОблагаетсяЕНВД",
				АдресВХранилище, Объект.Организация, Склад, Объект.Дата, Объект.Поставщик, Ложь);
		ОткрытьФорму("РегистрНакопления.ТоварыОрганизацийКОформлению.Форма.ПодборПоОстаткам", ПараметрыПодбора, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтоимостьПоСоглашению(Команда)
	СоглашениеСПоставщиком = ВыбратьСоглашениеСПоставщиком();
	Если ЗначениеЗаполнено(СоглашениеСПоставщиком) Тогда
		УстановитьСтоимостьСервер(СоглашениеСПоставщиком);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтоимостьПоСоглашению(Команда)
	СоглашениеСПоставщиком = ВыбратьСоглашениеСПоставщиком();
	Если ЗначениеЗаполнено(СоглашениеСПоставщиком) Тогда
		УстановитьСтоимостьСервер(СоглашениеСПоставщиком, Неопределено, Новый Структура("ТаможеннаяСтоимость", 0.));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтрануПроисхождения(Команда)
	Если Элементы.Товары.ВыделенныеСтроки.Количество()>0 Тогда
		СтранаПроисхождения = ОткрытьФормуМодально("Справочник.СтраныМира.ФормаВыбора");
		Если ЗначениеЗаполнено(СтранаПроисхождения) Тогда
			ЗаполнитьПоляТабчасти("Товары", Новый Структура("СтранаПроисхождения, НомерГТД", СтранаПроисхождения, Неопределено));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНомерДляСФ(Команда)
	ИнициироватьЗаполнениеНомераДляСФ(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСклад(Команда)
	Если Элементы.Товары.ВыделенныеСтроки.Количество()>0 Тогда
		СкладРазмещения = ОткрытьФормуМодально("Справочник.Склады.ФормаВыбора");
		Если ЗначениеЗаполнено(СкладРазмещения) Тогда
			ЗаполнитьПоляТабчасти("Товары", Новый Структура("Склад", СкладРазмещения));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ВалютаПриИзмененииСервер(ВалютаСтарая, ВалютаНовая)
	ДатаДокумента = ДатаДокумента(Объект.Дата);
	КурсыСтарые = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаСтарая, ДатаДокумента);
	КурсыНовые  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаНовая, ДатаДокумента);
	
	Для Каждого Раздел Из Объект.Разделы Цикл
		Раздел.ТаможеннаяСтоимость =
			РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Раздел.ТаможеннаяСтоимость, ВалютаСтарая, ВалютаНовая,
				КурсыСтарые.Курс, КурсыНовые.Курс, КурсыСтарые.Кратность, КурсыНовые.Кратность);
		ПересчитатьПоля(Раздел, "СуммаПошлины, СуммаНДС", Раздел);
	КонецЦикла;
	
	ТекущийРаздел = 0;
	СтавкаПошлины = 0.;
	Для Каждого Товар Из Объект.Товары Цикл
		Товар.ТаможеннаяСтоимость =
			РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				Товар.ТаможеннаяСтоимость, ВалютаСтарая, ВалютаНовая,
				КурсыСтарые.Курс, КурсыНовые.Курс, КурсыСтарые.Кратность, КурсыНовые.Кратность);
		Если ТекущийРаздел <> Товар.НомерРаздела Тогда
			ТекущийРаздел = Товар.НомерРаздела;
			Найдено = Объект.Разделы.НайтиСтроки(Новый Структура("НомерРаздела", ТекущийРаздел));
			ДанныеРаздела = ?(Найдено.Количество() > 0, Найдено[0], ДанныеПустогоРаздела());
		КонецЕсли;
		ПересчитатьПоля(Товар, "СуммаПошлины, СуммаНДС", ДанныеРаздела);
	КонецЦикла;
	
	Объект.ТаможенныйСбор = 
		РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			Объект.ТаможенныйСбор, ВалютаСтарая, ВалютаНовая,
			КурсыСтарые.Курс, КурсыНовые.Курс, КурсыСтарые.Кратность, КурсыНовые.Кратность);
	Объект.ТаможенныйШтраф =
		РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
			Объект.ТаможенныйШтраф, ВалютаСтарая, ВалютаНовая,
			КурсыСтарые.Курс, КурсыНовые.Курс, КурсыСтарые.Кратность, КурсыНовые.Кратность);
			
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммыПоВалюте()
	Если ЗначениеЗаполнено(Объект.Валюта) И ВалютаДокумента <> Объект.Валюта Тогда
		ВалютаПриИзмененииСервер(ВалютаДокумента, Объект.Валюта);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
	КонецЕсли;
	ВалютаДокумента = Объект.Валюта;
КонецПроцедуры

&НаСервере
Процедура ПоставщикПриИзмененииСервер()
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнитьДоговорПоУмолчанию();
		Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, , Объект.БанковскийСчетОрганизации);
	КонецЕсли;
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ПоступлениеТоваровПриИзмененииСервер()
	Если ЗначениеЗаполнено(Объект.ПоступлениеТоваров) Тогда
		ПоступлениеРеквизиты =
			ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Объект.ПоступлениеТоваров, "Партнер, Организация, Соглашение");
		Если Объект.Поставщик <> ПоступлениеРеквизиты.Партнер Тогда
			Объект.Поставщик = ПоступлениеРеквизиты.Партнер;
		КонецЕсли;
		Если Объект.Организация <> ПоступлениеРеквизиты.Организация Тогда
			Объект.Организация = ПоступлениеРеквизиты.Организация;
		КонецЕсли;
		ПоступлениеУказано = Истина;
		ПоступлениеСоглашение = ПоступлениеРеквизиты.Соглашение;
		
		ЗаполнитьПоляТабчасти("Разделы", Новый Структура("Склад", Неопределено), Новый Структура);
	Иначе
		ПоступлениеУказано = Ложь;
		ПоступлениеСоглашение = Неопределено;
	КонецЕсли;

	НастроитьСервисыЗаполнения(Элементы, Объект);
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	ЗаполнитьДанныеФормы();
	Если РасчетыСТаможней Тогда
		Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		Объект.ВалютаВзаиморасчетов = Объект.Валюта;
		Объект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
	КонецЕсли;
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииСервер()
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
    	Документы.ТаможеннаяДекларацияИмпорт.ЗаполнитьПоПартнеру(Объект, Объект.Партнер);
	КонецЕсли;
	
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорПоУмолчанию();
		Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , Объект.БанковскийСчетКонтрагента);
	КонецЕсли;
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура СоглашениеПриИзмененииСервер()
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(Объект.Соглашение);
		Документы.ТаможеннаяДекларацияИмпорт.ЗаполнитьПоУсловиямЗакупок(Объект, УсловияЗакупок);
	КонецЕсли;
	
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ВалютаВзаиморасчетовПриИзмененииСервер()
	ЗаполнитьДоговорПоУмолчанию();
	НастроитьЭлементыФормы();
КонецПроцедуры

&НаКлиенте
Процедура ИнициироватьЗаполнениеНомераДляСФ(БезВопроса = Ложь)
	Если ?(Объект.НумероватьПоТоварам, Объект.Товары, Объект.Разделы).Количество() > 0 И ЗначениеЗаполнено(Объект.НомерДекларации) Тогда
		ТекстВопроса = НСтр("ru = 'Заполнить колонку с № декларации для счетов-фактур?'");
		Если БезВопроса Или (КодВозвратаДиалога.Да = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет)) Тогда
			ТекущийРаздел = ДанныеТекущегоРаздела(Элементы.Разделы).НомерРаздела;
			ЗаполнитьНомерДляСФ(ТекущийРаздел);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка команд формы на сервере

&НаСервере
Процедура РаспределитьНаТоварыСервер()
	Отбор = Новый Структура("НомерРаздела");
	Разделы = ОбщегоНазначенияУТКлиентСервер.ВыделенныеЭлементыКоллекции(Объект.Разделы, Элементы.Разделы.ВыделенныеСтроки);
	Для Каждого Раздел Из Разделы Цикл
		Отбор.НомерРаздела = Раздел.НомерРаздела;
		ТоварыРаздела = Объект.Товары.Выгрузить(Отбор);
		
		Если ТоварыРаздела.Количество() > 0 Тогда
			Коэффициенты = ТоварыРаздела.ВыгрузитьКолонку("ТаможеннаяСтоимость");
			НовыеСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Раздел.ТаможеннаяСтоимость, Коэффициенты);
			Если НовыеСуммы <> Неопределено Тогда
				ТоварыРаздела.ЗагрузитьКолонку(НовыеСуммы, "ТаможеннаяСтоимость");
			КонецЕсли;
			НовыеСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Раздел.СуммаПошлины, Коэффициенты);
			Если НовыеСуммы <> Неопределено Тогда
				ТоварыРаздела.ЗагрузитьКолонку(НовыеСуммы, "СуммаПошлины");
			КонецЕсли;
			НовыеСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Раздел.СуммаНДС, Коэффициенты);
			Если НовыеСуммы <> Неопределено Тогда
				ТоварыРаздела.ЗагрузитьКолонку(НовыеСуммы, "СуммаНДС");
			КонецЕсли;
		КонецЕсли;
		
		Для каждого Товар Из ТоварыРаздела Цикл
			ОбъектТовар = Объект.Товары[Товар.НомерСтроки-1];
			Объект.Товары[Товар.НомерСтроки-1].ТаможеннаяСтоимость = ?(Раздел.ТаможеннаяСтоимость > 0., Товар.ТаможеннаяСтоимость, 0.);
			Объект.Товары[Товар.НомерСтроки-1].СуммаПошлины = ?(Раздел.СуммаПошлины > 0., Товар.СуммаПошлины, 0.);
			Объект.Товары[Товар.НомерСтроки-1].СуммаНДС = ?(Раздел.СуммаНДС > 0., Товар.СуммаНДС, 0.);
		КонецЦикла;
	КонецЦикла;
		
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоТоварамСервер()
	Отбор = Новый Структура("НомерРаздела");
	Разделы = ОбщегоНазначенияУТКлиентСервер.ВыделенныеЭлементыКоллекции(Объект.Разделы, Элементы.Разделы.ВыделенныеСтроки);
	Для Каждого Раздел Из Разделы Цикл
		Отбор.НомерРаздела = Раздел.НомерРаздела;
		ТоварыРаздела = Объект.Товары.НайтиСтроки(Отбор);
		Если ТоварыРаздела.Количество() > 0 Тогда
			Раздел.ТаможеннаяСтоимость = 0.;
			ПересчитатьПоля(Раздел, "СуммаПошлины, СуммаНДС", Раздел);
			Для Каждого Товар Из ТоварыРаздела Цикл
				Раздел.ТаможеннаяСтоимость = Раздел.ТаможеннаяСтоимость + Товар.ТаможеннаяСтоимость;
				Раздел.СуммаПошлины = Раздел.СуммаПошлины + Товар.СуммаПошлины;
				Раздел.СуммаНДС = Раздел.СуммаНДС + Товар.СуммаНДС;
			КонецЦикла;
			ПересчитатьПоля(Раздел, "СтавкаПошлины", Раздел);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораДобавитьТовары(ВыбранноеЗначение, ДанныеРаздела, ИмяАдреса, ИмяТабчасти=Неопределено)
	Действия = Новый Структура;
	УстановитьДействияДополнительныхПризнаковТоваров(Действия);
	
	БуферТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение[ИмяАдреса]);
	Если ИмяТабчасти<>Неопределено Тогда
		БуферТоваров = БуферТоваров[ИмяТабчасти];
	КонецЕсли;
	Для каждого ЭлементБуфера Из БуферТоваров Цикл
		Товар = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Товар, ЭлементБуфера, "Номенклатура, Характеристика, Упаковка, КоличествоУпаковок, Количество, Склад");
		Товар.ТаможеннаяСтоимость = ЭлементБуфера.Сумма;
		ЗаполнитьЗначенияСвойств(Товар, ДанныеРаздела, "НомерРаздела, СтранаПроисхождения");
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Товар, Действия, Неопределено);
		ПересчитатьПоля(Товар, "СуммаПошлины, СуммаНДС", ДанныеРаздела);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодобратьИзОформления(ВыбранноеЗначение, ДанныеРаздела)
	Действия = Новый Структура;
	УстановитьДействияДополнительныхПризнаковТоваров(Действия);
	
	СтрокиУдаления = Объект.Товары.НайтиСтроки(Новый Структура("НомерРаздела", ДанныеРаздела.НомерРаздела));
	Для Каждого СтрокаУдаления Из СтрокиУдаления Цикл
		Объект.Товары.Удалить(СтрокаУдаления);
	КонецЦикла;
	
	БуферТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение);
	Для каждого ЭлементБуфера Из БуферТоваров Цикл
		Товар = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(Товар, ЭлементБуфера, "Номенклатура, Характеристика, КоличествоУпаковок, Количество, Склад");
		ЗаполнитьЗначенияСвойств(Товар, ДанныеРаздела, "НомерРаздела, СтранаПроисхождения");
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Товар, Действия, Неопределено);
		ПересчитатьПоля(Товар, "СуммаПошлины, СуммаНДС", ДанныеРаздела);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаСервере
Процедура УстановитьСтоимостьСервер(Соглашение, Знач УсловиеЦен = Неопределено, ОтборТоваров = Неопределено)
	Если ОтборТоваров = Неопределено Тогда
		ТоварыЗаполнения = ОбщегоНазначенияУТКлиентСервер.ВыделенныеЭлементыКоллекции(Объект.Товары, Элементы.Товары.ВыделенныеСтроки);
	Иначе
		ТоварыЗаполнения = Объект.Товары.НайтиСтроки(ОтборТоваров);
	КонецЕсли;
	УсловиеЦен = ?(ЗначениеЗаполнено(УсловиеЦен), УсловиеЦен, Справочники.УсловияЦенПоставщиков.ПустаяСсылка());
	
	ПараметрыЗаполнения =
		Новый Структура("ПоляЗаполнения, Дата, Валюта, Соглашение, УсловиеЦеныПоставщика",
						"Цена", ДатаДокумента(Объект.Дата), Объект.Валюта, Соглашение, УсловиеЦен);
	ЦеныРассчитаны = ЗакупкиСервер.ЗаполнитьЦены(Объект.Товары, ТоварыЗаполнения, ПараметрыЗаполнения);
	
	Действия = Новый Структура;
	УстановитьДействияДополнительныхПризнаковТоваров(Действия);
	
	ТекущийРаздел = 0;
	СтавкаПошлины = 0.;
	Для Каждого Товар Из ТоварыЗаполнения Цикл
		Товар.ТаможеннаяСтоимость = Товар.КоличествоУпаковок * Товар.Цена;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Товар, Действия, Неопределено);
		Если ТекущийРаздел <> Товар.НомерРаздела Тогда
			ТекущийРаздел = Товар.НомерРаздела;
			Найдено = Объект.Разделы.НайтиСтроки(Новый Структура("НомерРаздела", ТекущийРаздел));
			ДанныеРаздела = ?(Найдено.Количество() > 0, Найдено[0], ДанныеПустогоРаздела());
		КонецЕсли;
		ПересчитатьПоля(Товар, "СуммаПошлины, СуммаНДС", ДанныеРаздела);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Поддержка таблиц формы

&НаКлиенте
Процедура АктивироватьРаздел()
	РазделОтбора = ДанныеТекущегоРаздела(Элементы.Разделы).НомерРаздела;
	ПоРазделам = Не Элементы.ТоварыПоказатьВсеТовары.Пометка;
	Товары = Элементы.Товары;
	Если ПоРазделам И (Товары.ОтборСтрок = Неопределено Или Товары.ОтборСтрок.НомерРаздела <> РазделОтбора) Тогда // включить отбор
		Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("НомерРаздела", РазделОтбора);
	ИначеЕсли Не ПоРазделам И Товары.ОтборСтрок<>Неопределено Тогда // выключить отбор
		Товары.ОтборСтрок = Неопределено;
	КонецЕсли; // ничего не менять
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйНомерРаздела(Разделы)
	МаксимальныйНомер = 0;
	Для Каждого Раздел Из Разделы Цикл
		Если Раздел.НомерРаздела > МаксимальныйНомер Тогда
			МаксимальныйНомер = Раздел.НомерРаздела;
		КонецЕсли;
	КонецЦикла;
	Возврат МаксимальныйНомер + 1;
КонецФункции

&НаСервере
Процедура ОчиститьНомераРазделовТоваров(СтарыеНомера)
	Для Каждого Товар Из Объект.Товары Цикл
		Если СтарыеНомера[Товар.НомерРаздела]<>Неопределено Тогда
			Товар.НомерРаздела = 0;
		КонецЕсли;
	КонецЦикла;
	Выбор = Элементы.ТоварыНомерРаздела.СписокВыбора;
	Для Каждого СтарыйНомер Из СтарыеНомера Цикл
		НайденныйЭлемент = Выбор.НайтиПоЗначению(СтарыйНомер.Значение);
		Выбор.Удалить(НайденныйЭлемент);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьЭлементВСпискеВыбора(Выбор, СтароеЗначение, НовоеЗначение, Формат);
	ЭлементВыбора = Выбор.НайтиПоЗначению(СтароеЗначение);
	Если Неопределено <> ЭлементВыбора Тогда
		Выбор.Удалить(ЭлементВыбора);
	КонецЕсли;
	ЭлементВыбора = Выбор.НайтиПоЗначению(СтароеЗначение);
	Если Неопределено = ЭлементВыбора Тогда
		Выбор.Добавить(НовоеЗначение, Формат(НовоеЗначение, Формат));
	КонецЕсли;
	Выбор.СортироватьПоЗначению();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеТекущегоРаздела(Разделы)
	ДанныеРаздела = ДанныеПустогоРаздела();
	Если Разделы.ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеРаздела, Разделы.ТекущиеДанные);
	КонецЕсли;
	Возврат ДанныеРаздела;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеПустогоРаздела()
	Возврат
		Новый Структура("НомерРаздела, СтавкаПошлины, СтавкаНДС, Склад, СтранаПроисхождения", 0, 0., Неопределено, Неопределено, Неопределено);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьПоля(ТекущиеДанные, Знач ПоляПересчета, Знач ДанныеРаздела) Экспорт
	ПоляПересчета = НРег(ПоляПересчета);
	Если Найти(ПоляПересчета, "суммапошлины")>0 Тогда
		ТекущиеДанные.СуммаПошлины = ТекущиеДанные.ТаможеннаяСтоимость * ДанныеРаздела.СтавкаПошлины / 100.;
	ИначеЕсли Найти(ПоляПересчета, "ставкапошлины")>0 Тогда
		ТекущиеДанные.СтавкаПошлины =
			100. * ?(ТекущиеДанные.ТаможеннаяСтоимость=0., 0., ТекущиеДанные.СуммаПошлины / ТекущиеДанные.ТаможеннаяСтоимость);
	КонецЕсли;
	Если Найти(ПоляПересчета, "суммандс")>0 Тогда
		ТекущиеДанные.СуммаНДС =
			ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(
				ТекущиеДанные.ТаможеннаяСтоимость + ТекущиеДанные.СуммаПошлины,
				ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ДанныеРаздела.СтавкаНДС), Ложь
			);
	КонецЕсли;
КонецПроцедуры

// ПоляЗначения - Структура("Поле1, Поле2, ...", Значение1, Значение2, ...)
&НаСервере
Процедура ЗаполнитьПоляТабчасти(ИмяТабчасти, ПоляЗначения, ОтборТабчасти = Неопределено)
	Если ОтборТабчасти = Неопределено Тогда
		Строки =
			ОбщегоНазначенияУТКлиентСервер.ВыделенныеЭлементыКоллекции(Объект[ИмяТабчасти], Элементы[ИмяТабчасти].ВыделенныеСтроки);
	Иначе
		Строки = Объект[ИмяТабчасти].НайтиСтроки(ОтборТабчасти);
	КонецЕсли;
	Для Каждого Строка Из Строки Цикл
		ЗаполнитьЗначенияСвойств(Строка, ПоляЗначения);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомерДляСФ(ТекущийРаздел)
	Табчасть = ?(Объект.НумероватьПоТоварам, Объект.Товары, Объект.Разделы);
	ИмяПоляДополнения = ?(Объект.НумероватьПоТоварам, "НомерСтроки",  "НомерРаздела");
	Для Каждого Строка Из Табчасть Цикл
		Строка.НомерДляСФ = НомерДляСФ(Объект.НомерДекларации, Строка[ИмяПоляДополнения]);
	КонецЦикла;
	// изменились номера для с/ф - очистим ссылки на номера ГТД
	ОтборТоваров = ?(Объект.НумероватьПоТоварам, Новый Структура("НомерРаздела", ТекущийРаздел), Новый Структура);
	ЗаполнитьПоляТабчасти("Товары", Новый Структура("НомерГТД", Неопределено), ОтборТоваров);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НомерРазделаУникальный(Разделы, НомерРаздела)
	НомерВстречался = Ложь;
	Для Каждого Раздел Из Разделы Цикл
		Если НомерВстречался И (Раздел.НомерРаздела = НомерРаздела) Тогда
			Возврат Ложь;
		КонецЕсли;
		НомерВстречался = НомерВстречался Или (Раздел.НомерРаздела = НомерРаздела);
	КонецЦикла;
	Возврат Истина;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция ПоместитьВХранилище(ИмяТабчасти, ИменаПолей, ПараметрыОтбора)
	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТабчасти].Выгрузить(ПараметрыОтбора, ИменаПолей), УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	ЗаполнитьДанныеФормы();
	ЗаполнитьДополнительныеПризнакиТоваров();
	НастроитьЭлементыФормы();
	НастроитьВыборРазделов();
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	// НомерРаздела.МаксимальноеЗначение ДОЛЖНО быть задано для нормальной работы.
	НомерРазделаПредел = Метаданные.Документы.ТаможеннаяДекларацияИмпорт.ТабличныеЧасти.Разделы.Реквизиты.НомерРаздела.МаксимальноеЗначение;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормы()
	Если Не ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ВалютаДокумента = Объект.Валюта;
	КонецЕсли;
	РасчетыСТаможней = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно);
	СтатусДокумента = Объект.Статус;
	
	ПоступлениеУказано = ЗначениеЗаполнено(Объект.ПоступлениеТоваров);
	ПоступлениеСоглашение = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ПоступлениеТоваров, "Соглашение");
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РазностиИтогов(Объект.Разделы, Объект.Товары));
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазностиИтогов(Разделы, Товары)
	Возврат Новый Структура("РазностьСтоимостей, РазностьПошлин, РазностьНДС",
		Разделы.Итог("ТаможеннаяСтоимость") - Товары.Итог("ТаможеннаяСтоимость"),
		Разделы.Итог("СуммаПошлины") - Товары.Итог("СуммаПошлины"),
		Разделы.Итог("СуммаНДС") - Товары.Итог("СуммаНДС")
	); // клиент-серверные оптимизации
КонецФункции

&НаСервере
Процедура УстановитьДействияДополнительныхПризнаковТоваров(Действия)
	Действия.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
    Действия.Вставить("ПересчитатьКоличествоЕдиниц");
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораВидаЗапасов()
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	Если ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета") Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Номенклатура", "Элементы.Товары.ТекущиеДанные.Номенклатура"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам") Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Подразделение", "Объект.Подразделение"));
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Менеджер", "Объект.Менеджер"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам") Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Сделка", "Элементы.Товары.ТекущиеДанные.Сделка"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПоставщикам") Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Поставщик", "Объект.Поставщик"));
	КонецЕсли;
	Элементы.ТоварыВидЗапасов.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеПризнакиТоваров()
	Действия = Новый Структура;
	УстановитьДействияДополнительныхПризнаковТоваров(Действия);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, Действия, Неопределено);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормаОплатыСписокВыбора()
	Список = Элементы.ФормаОплаты.СписокВыбора;
	Список.Очистить();
	Список.Добавить(Перечисления.ФормыОплаты.Безналичная);
	Если Не РасчетыСТаможней Тогда
		Список.Добавить(Перечисления.ФормыОплаты.Наличная);
		Список.Добавить(Перечисления.ФормыОплаты.ПустаяСсылка(), НСтр("ru='Любая'"));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	Перем ВсеРеквизиты;
	Перем РеквизитыОперации;
	
	Элементы.Партнер.Заголовок = ?(РасчетыСТаможней, НСтр("ru='Таможня'"), НСтр("ru='Брокер'"));
	ПараметрыВыбора = Новый Массив;
	Если РасчетыСТаможней Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ПрочиеОтношения", РасчетыСТаможней));
	Иначе
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
	КонецЕсли;
	Элементы.Партнер.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
	Элементы.ПоступлениеТоваров.Доступность = ЗначениеЗаполнено(Объект.Поставщик);
	
	Элементы.Валюта.ТолькоПросмотр = РасчетыСТаможней;
	Элементы.ВалютаВзаиморасчетов.ТолькоПросмотр = РасчетыСТаможней;

	Элементы.Соглашение.Доступность = Не РасчетыСТаможней;
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	Элементы.Договор.Доступность = Элементы.Договор.Доступность И Не РасчетыСТаможней;
	Элементы.Договор.ОтметкаНезаполненного =
		Элементы.Договор.Доступность И ЗначениеЗаполнено(Объект.Соглашение) И Не ЗначениеЗаполнено(Объект.Договор);
		
	ЗаполнитьФормаОплатыСписокВыбора();
	
	НастроитьСервисыЗаполнения(Элементы, Объект);
	УстановитьПараметрыВыбораВидаЗапасов();
КонецПроцедуры

&НаСервере
Процедура НастроитьВыборРазделов()
	Выбор = Элементы.ТоварыНомерРаздела.СписокВыбора;
	Выбор.Очистить();
	Для Каждого Раздел Из Объект.Разделы Цикл
		Выбор.Добавить(Раздел.НомерРаздела, Формат(Раздел.НомерРаздела, Элементы.ТоварыНомерРаздела.Формат));
	КонецЦикла;
	Выбор.СортироватьПоЗначению();
	Выбор.Вставить(0, 0, Формат(0, Элементы.ТоварыНомерРаздела.Формат));
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьСервисыЗаполнения(Элементы, Объект)
	ПоРазделам = Не Элементы.ТоварыПоказатьВсеТовары.Пометка;
	ПоПоступлению = ЗначениеЗаполнено(Объект.ПоступлениеТоваров);
	
	Элементы.ТоварыПодобратьИзПоступления.Доступность = ПоРазделам И ПоПоступлению;
	Элементы.ТоварыПодобратьТовары.Доступность = ПоРазделам И Не ПоПоступлению;
	Элементы.ТоварыПодобратьИзОформления.Доступность = Элементы.ТоварыПодобратьТовары.Доступность;
	
	Элементы.ТоварыЗаполнитьНомерРаздела.Доступность = Не ПоРазделам;
	Элементы.ТоварыУстановитьНомерРаздела.Доступность = Не ПоРазделам;
	
	Элементы.РазделыУстановитьНомерДляСФ.Доступность = Не Объект.НумероватьПоТоварам;
	Элементы.ТоварыУстановитьНомерДляСФ.Доступность = Объект.НумероватьПоТоварам;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
		Объект.Договор, Объект.Партнер, Объект.Контрагент, Объект.Организация,
		Документы.ТаможеннаяДекларацияИмпорт.ОперацииОтбораСоглашенийДоговоров(), Объект.ВалютаВзаиморасчетов, Объект.Соглашение
	);
	Если (Договор <> Объект.Договор) Тогда
		Объект.Договор = Договор;
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДатаДокумента(ОбъектДата)
	Возврат ?(ЗначениеЗаполнено(ОбъектДата), ОбъектДата, ТекущаяДата());
КонецФункции

&НаКлиенте
Функция ВыбратьСоглашениеСПоставщиком()
	Если ЗначениеЗаполнено(ПоступлениеСоглашение) Тогда
		ВыбранноеСоглашение = ПоступлениеСоглашение;
	Иначе
		ПараметрыПодбора = Новый Структура("Организация, Отбор", Объект.Организация, Новый Структура("Партнер, ХозяйственнаяОперация"));
		ПараметрыПодбора.Отбор.Партнер = Объект.Поставщик;
		ПараметрыПодбора.Отбор.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту");
		ВыбранноеСоглашение = ОткрытьФормуМодально("Справочник.СоглашенияСПоставщиками.ФормаВыбора", ПараметрыПодбора);
	КонецЕсли;
	Возврат ВыбранноеСоглашение;
КонецФункции

&НаКлиенте
Функция ВыбратьПоступлениеТоваров()
	ПараметрыПодбора = Новый Структура("Организация, Отбор", Объект.Организация, Новый Структура("Партнер, ХозяйственнаяОперация"));
	ПараметрыПодбора.Отбор.Партнер = Объект.Поставщик;
	ПараметрыПодбора.Отбор.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту");
	Возврат ОткрытьФормуМодально("Документ.ПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыПодбора);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерДляСФ(НомерДекларации, НомерДополнения)
	Возврат НомерДекларации + "/" + НомерДополнения;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Стандартные механизмы БСП

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
КонецПроцедуры
