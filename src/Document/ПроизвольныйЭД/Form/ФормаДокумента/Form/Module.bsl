////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Процедура ПодписатьДокументНаКлиенте(Подписан)
		
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Если ЭлектронныеДокументыСлужебныйКлиент.УстановитьРасширениеРаботыСКриптографиейНаКлиенте() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекДокумент = Элементы.Вложения.ТекущиеДанные.Ссылка;
	
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
	ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов, ОбъектСсылка", МассивСтруктурСертификатов, ТекДокумент);
	
	СтруктураПараметровПодписи = ОткрытьФормуМодально("ОбщаяФорма.УстановкаПодписиЭЦП", ПараметрыФормы);
	
	Если ТипЗнч(СтруктураПараметровПодписи) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	ДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекДокумент);
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДанныеПодписи = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьДанныеПодписи(МенеджерКриптографии,
		ТекДокумент, ДвоичныеДанныеФайла, СтруктураПараметровПодписи);
		
	ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ТекДокумент, ДанныеПодписи);
	ЭлектронныеДокументыСлужебныйКлиент.ОпределитьСтатусыПодписей(ТекДокумент);
	Подписан = Истина;
	
	ТекстСостояния = НСтр("ru = 'Подписано: (%1)'");
	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостояния, 1);
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка, ,ТекстСостояния);
	
КонецПроцедуры

&НаСервере
Процедура ПодписатьДокументНаСервере(СтруктураПараметровПодписи, Подписан)
		
	ТекДокумент = Элементы.Вложения.ТекущиеДанные.Ссылка;
	
	Попытка
		МенеджерКриптографии = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	
	ДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(ТекДокумент);
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДанныеПодписи = ЭлектронныеДокументыСлужебныйВызовСервера.СформироватьДанныеПодписи(МенеджерКриптографии,
																						ТекДокумент,
																						ДвоичныеДанныеФайла,
																						СтруктураПараметровПодписи);
	ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ТекДокумент, ДанныеПодписи);
	ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(ТекДокумент);
	Подписан = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураПараметровПодписи()
	
	ТекДокумент = Элементы.Вложения.ТекущиеДанные.Ссылка;
	МассивСтруктурСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМассивСтруктурСертификатов(Истина);
	ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов, ОбъектСсылка", МассивСтруктурСертификатов, ТекДокумент);
	
	Возврат ОткрытьФормуМодально("ОбщаяФорма.УстановкаПодписиЭЦП", ПараметрыФормы);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		Элементы.Вложения.ТолькоПросмотр  = Ложь;
		Элементы.Сообщение.ТолькоПросмотр = Ложь;
		Элементы.Вложения.КоманднаяПанель.ПодчиненныеЭлементы.Добавить.Видимость = Истина;
		Элементы.Вложения.КоманднаяПанель.ПодчиненныеЭлементы.Удалить.Видимость  = Истина;
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ПодписатьИОтправитьЭД.Заголовок = НСтр(
			"ru = 'Отправить документ'");
	Иначе
		Элементы.Вложения.ТолькоПросмотр  = Истина;
		Элементы.Сообщение.ТолькоПросмотр = Истина;
		Элементы.Вложения.КоманднаяПанель.ПодчиненныеЭлементы.Добавить.Видимость = Ложь;
		Элементы.Вложения.КоманднаяПанель.ПодчиненныеЭлементы.Удалить.Видимость  = Ложь;
		ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.ПодписатьИОтправитьЭД.Заголовок = НСтр(
			"ru = 'Отправить подтверждение'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Если Объект.Направление = Перечисления.НаправленияЭД.Исходящий Тогда
		ТекстЗаголовка = НСтр("ru = 'Исходящий документ %1 от %2'");
		ЭтаФорма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстЗаголовка, Объект.Номер, Объект.Дата);
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Входящий документ %1 от %2'");
		ЭтаФорма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстЗаголовка, Объект.Номер, Объект.Дата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ДокументЗаписан()
	
	ФлагЗаписи = Ложь;
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ТекстВопроса = НСтр("ru = 'Документ еще не записан!
		|Вложения можно добавлять только в записанный документ.
		|Записать документ?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьНовыйДокумент(ФлагЗаписи);
		КонецЕсли;
		
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
	Возврат ФлагЗаписи;
	
КонецФункции

&НаСервере
Процедура ЗаписатьНовыйДокумент(ФлагЗаписи)
	
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	Если ЕстьСоглашение(ОбъектДокумент) Тогда
		ОбъектДокумент.Дата = ТекущаяДатаСеанса();
		ОбъектДокумент.Записать();
		ЗначениеВРеквизитФормы(ОбъектДокумент, "Объект");
		
		ФлагЗаписи = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПрисоединенныеФайлыКСообщению(МассивСтруктур)
	
	МассивВозврата = Новый Массив;
	Если ЗначениеЗаполнено(СоглашениеЭД) Тогда
		ИдентификаторОрганизации = СоглашениеЭД.ИдентификаторОрганизации;
		ИдентификаторКонтрагента = СоглашениеЭД.ИдентификаторКонтрагента;
		
	ИначеЕсли НЕ СоглашениеОпределялось Тогда
		
		ПараметрыСоглашения = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(Объект.Ссылка);
		Если ЗначениеЗаполнено(ПараметрыСоглашения) Тогда
			ИдентификаторОрганизации = ПараметрыСоглашения.ИдентификаторОрганизации;
			ИдентификаторКонтрагента = ПараметрыСоглашения.ИдентификаторКонтрагента;
			СоглашениеЭД             = ПараметрыСоглашения.СоглашениеЭД;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСоглашения) И НЕ ЗначениеЗаполнено(СоглашениеЭД) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтруктураФайла Из МассивСтруктур Цикл
		ФайлБезРасширения = Неопределено;
		ФайлРасширение = Неопределено;
		АдресВоВременномХранилище = Неопределено;
		Если НЕ СтруктураФайла.Свойство("ФайлБезРасширения", ФайлБезРасширения)
			ИЛИ НЕ СтруктураФайла.Свойство("ФайлРасширение", ФайлРасширение)
			ИЛИ НЕ СтруктураФайла.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
			Продолжить;
		КонецЕсли;
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(Объект.Ссылка,
														   ФайлБезРасширения,
														   ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ФайлРасширение),
														   ТекущаяДатаСеанса(),
														   ТекущаяДатаСеанса(),
														   АдресВоВременномХранилище,
														   ,
														   ,
														   "ЭДПрисоединенныеФайлы");
			
		МассивВозврата.Добавить(ДобавленныйФайл);
		
		НомерДокумента = ЭлектронныеДокументыВнутренний.ВернутьИдЭД(
			ДобавленныйФайл, ИдентификаторОрганизации, Неопределено);
		
		СтруктураДокумента =  Новый Структура(
			"Автор, ВладелецЭД, Организация, Контрагент,
			|ВидЭД, НаправлениеЭД, НомерЭД, УникальныйИД,
			|Отправитель, Получатель, НомерДокументаОтправителя, ДатаДокументаОтправителя, НомерВерсииЭД, СоглашениеЭД,
			|ТипЭлементаВерсииЭД, СтатусЭД",
			Пользователи.АвторизованныйПользователь(), Объект.Ссылка, Объект.Организация, Объект.Контрагент,
			Перечисления.ВидыЭД.ПроизвольныйЭД, Перечисления.НаправленияЭД.Исходящий, НомерДокумента, НомерДокумента,
			ИдентификаторОрганизации, ИдентификаторКонтрагента, Объект.Номер, Объект.Дата, 0, СоглашениеЭД,
			Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД, Перечисления.СтатусыЭД.НеОтправлен);
			
		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураДокумента);
	КонецЦикла;
	
	ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуВложений()
	
	ЗапросВложений = Новый Запрос;
	ЗапросВложений.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
	ЗапросВложений.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ЭДПрисоединенныеФайлы.Наименование КАК ИмяФайла,
	|	ЭДПрисоединенныеФайлы.Расширение КАК Расширение
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И ЭДПрисоединенныеФайлы.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)";
	Результат = ЗапросВложений.Выполнить().Выгрузить();
	
	Результат.Колонки.Добавить("ИндексКартинки");
	Результат.Колонки.Добавить("НаименованиеФайла");
	
	Для Каждого ЭлементРезультат Из Результат Цикл
		
		ЭлементРезультат.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(
			ЭлементРезультат.Расширение);
		ЭлементРезультат.НаименованиеФайла = ЭлементРезультат.ИмяФайла + "." + ЭлементРезультат.Расширение;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Результат, "Вложения");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусДокумента(ПараметрыДокумента)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ПараметрыДокумента.МассивНаОтправку.Количество() > 0 Тогда
		ЭД = ПараметрыДокумента.МассивНаОтправку[0];
		ДокументОбъект.СтатусДокумента = ЭД.СтатусЭД;
	КонецЕсли;
	
	Если (СоглашениеОпределялось И ЗначениеЗаполнено(СоглашениеЭД))
		ИЛИ (НЕ СоглашениеОпределялось И ЕстьСоглашение(ДокументОбъект)) Тогда
		
		ДокументОбъект.Записать();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		ЭтаФорма.Прочитать();
		ОбновитьЗаголовокФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивЭДДляОтправки()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Если ЭтаФорма.Модифицированность И ЕстьСоглашение(ДокументОбъект) Тогда
		ДокументОбъект.Записать();
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	КонецЕсли;
	
	ТаблицаВложений = РеквизитФормыВЗначение("Вложения");

	МассивВложений = ТаблицаВложений.ВыгрузитьКолонку("Ссылка");
	ЭтоИсходящийДокумент = Объект.Направление = Перечисления.НаправленияЭД.Исходящий;
	
	Соответствие = Новый Соответствие;
	Если ЭтоИсходящийДокумент И ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() И ЗначениеЗаполнено(СоглашениеЭД) Тогда
		СтруктураПараметров = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовВПривилегированномРежиме(
																		СоглашениеЭД, "СпособОбменаЭД, СертификатАбонента");
		Если СтруктураПараметров.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
			СертификатАвторизации = СтруктураПараметров.СертификатАбонента;
		КонецЕсли;
	КонецЕсли;
	
	Возврат (Новый Структура("МассивНаОтправку, ЭтоИсходящийДокумент, Соответствие", МассивВложений, ЭтоИсходящийДокумент, Соответствие));
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыбранныеДокументы(ПараметрыПодписи)
	
	СоответствиеПаролей = ПараметрыПодписи.Соответствие;
	Если СоответствиеПаролей.Количество() > 0 Тогда
		СертификатАвторизации = СоответствиеПаролей[0];
		ПарольКСертификату = Неопределено;
		Если ЗначениеЗаполнено(СертификатАвторизации)
			И ЭлектронныеДокументыСлужебныйКлиент.ПолучитьПарольКСертификату(СертификатАвторизации, ПарольКСертификату) Тогда
			СоответствиеПаролей.Вставить(СертификатАвторизации, ПарольКСертификату);
		КонецЕсли;
	КонецЕсли;
	СтруктураПаролейИМаркеров = Новый Структура;
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
		СоответствиеМаркеров = ЭлектронныеДокументыСлужебныйКлиент.СоответствиеМаркеров(СоответствиеПаролей);
	КонецЕсли;
	СтруктураПаролейИМаркеров.Вставить("ПаролиКСертификатам", СоответствиеПаролей);
	СтруктураПаролейИМаркеров.Вставить("Маркеры", СоответствиеМаркеров);
	
	СтруктураРезультата = ЭлектронныеДокументыСлужебныйКлиент.ПодготовитьИОтправитьПЭД(
																	ПараметрыПодписи.МассивНаОтправку,
																	Ложь,
																	СтруктураПаролейИМаркеров);
		
	ЭтаФорма.Прочитать();
	
	Если СтруктураРезультата.КолОтправленных > 0 Тогда
		ТекстСостояния = НСтр("ru = 'Отправлено: (%1)'");
		Количество = СтруктураРезультата.КолОтправленных;
	Иначе
		ТекстСостояния = НСтр("ru = 'Подготовлено к отправке: (%1)'");
		Количество = СтруктураРезультата.КолПодготовленных;
	КонецЕсли;
	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостояния, Количество);
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостояния);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЛишниеПрисоединенныеФайлы()
	
	ПараметрыВыборки = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ВыборкаПрисоединенныхФайлов = ЭлектронныеДокументыСлужебный.ПолучитьВыборкуЭДПоОтбору(ПараметрыВыборки);
	
	Пока ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) И ВыборкаПрисоединенныхФайлов.Следующий() Цикл
		МассивФайлов = Вложения.Выгрузить().ВыгрузитьКолонку("Ссылка");
		Если МассивФайлов.Найти(ВыборкаПрисоединенныхФайлов.Ссылка) = Неопределено Тогда
			ВыборкаПрисоединенныхФайлов.Ссылка.ПолучитьОбъект().Удалить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьСоглашение(ОбъектДокумент)
	
	НастройкиЭД = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(ОбъектДокумент);
	СоглашениеОпределялось = Истина;
	Если ЗначениеЗаполнено(НастройкиЭД) Тогда
		ОбъектДокумент.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		СоглашениеЭД = НастройкиЭД.СоглашениеЭД;
		Возврат Истина;
	Иначе
		СоглашениеЭД = Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьЭлементов()
	
	Если Объект.СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЭД.НеОтправлен")
		ИЛИ Объект.СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЭД.Получен") Тогда
		Элементы.ПодписатьИОтправитьЭД.Доступность = Истина;
	Иначе
		Элементы.ПодписатьИОтправитьЭД.Доступность = Ложь;
		Элементы.Добавить.Доступность              = Ложь;
		Элементы.Удалить.Доступность               = Ложь;
		Элементы.Подписать.Доступность             = Ложь;
		Элементы.Сообщение.Доступность             = Ложь;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодписатьИОтправить(Команда)
	
	ОчиститьСообщения();
	Если ЭтаФорма.ПроверитьЗаполнение() Тогда
		
		ПараметрыДокумента = ПолучитьМассивЭДДляОтправки();
		ОбработатьВыбранныеДокументы(ПараметрыДокумента);
		ОбновитьСтатусДокумента(ПараметрыДокумента);
		Оповестить("ОбновитьСостояниеЭД");
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокумент(Команда)
	
	Подписан = Ложь;
	
	Если Элементы.Вложения.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		СтруктураПараметровПодписи = СтруктураПараметровПодписи();
		Если ТипЗнч(СтруктураПараметровПодписи) = Тип("Структура") Тогда
			ПодписатьДокументНаСервере(СтруктураПараметровПодписи, Подписан);
		КонецЕсли;
	Иначе
		ПодписатьДокументНаКлиенте(Подписан);
	КонецЕсли;
	
	Если Подписан Тогда
		ТекстСостояния = НСтр("ru = 'Подписано: (%1)'");
		ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСостояния, 1);
		ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка, ,ТекстСостояния);
		ЭтаФорма.Прочитать();
		УстановитьДоступностьЭлементов();
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайла(Команда)
	
	ДанныеТЧ = Элементы.Вложения.ТекущиеДанные;
	Если ДанныеТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДокумент = Элементы.Вложения.ТекущиеДанные.Ссылка;
	ПараметрыОткрытия = Новый Структура("ПрисоединенныйФайл", ТекДокумент);
	ОткрытьФорму("ОбщаяФорма.ПрисоединенныйФайл", ПараметрыОткрытия);
	ЭтаФорма.Прочитать();
	
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ ЭтаФорма.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ДокументЗаписан() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = Неопределено;
	ВыбранныйФайл   = "";
	СтруктураФайла  = Новый Структура;
	МассивСтруктур  = Новый Массив;
	Если ПоместитьФайл(АдресВХранилище, , ВыбранныйФайл, Истина, УникальныйИдентификатор) Тогда
		ФайлДанных = Новый Файл(ВыбранныйФайл);
		СтруктураФайла.Вставить("ФайлБезРасширения",         ФайлДанных.ИмяБезРасширения);
		СтруктураФайла.Вставить("ФайлРасширение",            ФайлДанных.Расширение);
		СтруктураФайла.Вставить("АдресВоВременномХранилище", АдресВХранилище);
		МассивСтруктур.Добавить(СтруктураФайла);
		
		ДобавитьПрисоединенныеФайлыКСообщению(МассивСтруктур);
	КонецЕсли;
	ОбновитьТаблицуВложений();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПослеУдаления(Элемент)
	
	УдалитьЛишниеПрисоединенныеФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭД = Элементы.Вложения.ТекущиеДанные.Ссылка;
	// Откроем вложение по стандартному механизму
	ДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(ЭД, УникальныйИдентификатор);
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Объект") Тогда
		ЗначениеВРеквизитФормы(Параметры.Объект.ПолучитьОбъект(), "Объект");
	КонецЕсли;
		
	Если Объект.Ссылка.Пустая() Тогда
		Объект.СтатусДокумента = Перечисления.СтатусыЭД.НеОтправлен;
		Объект.Направление     = Перечисления.НаправленияЭД.Исходящий;
	КонецЕсли;
	
	Если НЕ Объект.Прочитан И НЕ Объект.Ссылка.Пустая()
		И Объект.Направление = Перечисления.НаправленияЭД.Входящий Тогда
		Документ = РеквизитФормыВЗначение("Объект");
		Документ.Прочитан = Истина;
		Документ.Записать();
		ЗначениеВРеквизитФормы(Документ, "Объект");
		ИзмененСтатус = Истина;
	КонецЕсли;
	
	ОбновитьТаблицуВложений();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЗаголовокФормы();
	Если ИзмененСтатус Тогда
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	УстановитьДоступностьЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Отказ = НЕ ЕстьСоглашение(ТекущийОбъект);
	
КонецПроцедуры
