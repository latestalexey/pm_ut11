
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущийСтатус; //клиентский кеш статуса документа (нужен для возможности отката изменения пользователем статуса)

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыРазбитьСправочноПоУпаковкам.Видимость = Не ИспользоватьАдресноеХранение;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	ТекущийСтатус = Объект.Статус;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Элементы.Распоряжение.ТолькоПросмотр = ЗначениеЗаполнено(Объект.Распоряжение);
	Оповестить("Запись_РасходныйОрдерНаТовары", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПроверкаКоличестваТоваровВДокументе.Форма.Форма" Тогда
		
		ОбработатьПроверкуКоличестваТоваровНаСервере(ВыбранноеЗначение);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	СкладПомещениеПриИзмененииСервер();	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПомещениеПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если ИспользоватьАдресноеХранение Тогда 
		
		Если ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КОтбору")
			И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КУказаниюСерий") Тогда
			
			ТекстВопроса = НСтр("ru='При изменении статуса будет произведено перезаполнение ордера по отобранным из ячеек товарам.'");
			
			Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.ОК);
			
			Если Ответ <> КодВозвратаДиалога.ОК Тогда
				Объект.Статус = ТекущийСтатус;
			Иначе
				СтатусПриИзмененииСервер(Истина);
			КонецЕсли;
			
		Иначе
			
			СтатусПриИзмененииСервер(Ложь);
			
		КонецЕсли;
	Иначе
		СтатусПриИзмененииСервер(Ложь);
	КонецЕсли;
	
	ТекущийСтатус = Объект.Статус;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораСтатусовИсключаяСлужебные();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораСтатусовИсключаяСлужебные();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	             	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	Перем ТекущаяСтрока;
	Перем СтруктураДействий;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
		//{ ООО "АСТЭК" Разработчик: Бурыкин Александр 08.11.2013
	ТекущаяСтрока.АкУникальныйИдентификатор = NULL;
	Если ПроверитьЗаполнениеДанных(ТекущаяСтрока.Номенклатура,ТекущаяСтрока.Характеристика) Тогда
		ТекущаяСтрока.АкУникальныйИдентификатор = новый УникальныйИдентификатор;
		ДобавитьГрузовыеМеста(ТекущаяСтрока.Номенклатура,ТекущаяСтрока.Характеристика,ТекущаяСтрока.АкУникальныйИдентификатор,ТекущаяСтрока.акКоличествоПлан);
	Иначе
		Если НЕ ПроверитьНаличиеХарактеристики(текущаяСтрока.номенклатура)  Тогда
			ТекущаяСтрока.номенклатура = NULL;
	//	ТекущаяСтрока.АкУникальныйИдентификатор = NULL;
		КонецЕсли;

	КонецЕсли;
	//}

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
			//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013		
УдалитьГрузовыеМестаБезСсылок();
//}	

КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)
	
		//ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  18.11.2013
	Для каждого ТекущаяСтрока ИЗ  Объект.Товары  Цикл			
	//}
	СтруктураДействий = Новый Структура();
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);					
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	 //{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
	Если новаяСтрока Тогда
		Если НЕ ПроверитьЗаполнениеДанных(Элемент.ТекущиеДанные.Номенклатура,Элемент.ТекущиеДанные.Характеристика) Тогда
			Элемент.ТекущиеДанные.Характеристика = NULL;
			Элемент.ТекущиеДанные.акУникальныйИдентификатор = NULL;
			Если НЕ ПроверитьНаличиеХарактеристики(Элемент.ТекущиеДанные.номенклатура)  Тогда
				Элемент.ТекущиеДанные.номенклатура = NULL;
			КонецЕсли;
			
			Возврат;
		КонецЕсли;	
	КонецЕсли;	 
	 //}

	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
			//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013		
УдалитьГрузовыеМестаБезСсылок();
//}	

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ТоварыСтатусУказанияСерий Тогда
		Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
			ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
			
			ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
			
			Если ЗначениеВозврата <> Неопределено Тогда
				ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоРаспоряжению(Команда)

	Если Объект.Товары.Количество() > 0 Тогда

		Ответ = Вопрос(НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;

	ЗаполнитьПоРаспоряжениюСервер();

КонецПроцедуры

&НаКлиенте
Процедура РазбитьСправочноПоУпаковкам(Команда)
	Если Объект.Товары.Количество() = 0 Тогда

		Ответ = Вопрос(НСтр("ru = 'Табличная часть не заполнена. Заполнить по распоряжению?'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

		ЗаполнитьИРазбитьПоУпаковкамСервер();
		
	Иначе
		ТекстВопроса = НСтр("ru='При выполнении операции табличная часть будет перезаполнена,
		|при этом строки с нулевым количеством будут удалены. Продолжить?'");
		
		Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;	
		КонецЕсли;
		
		РазбитьСправочноПоУпаковкамСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличество(Команда)
	ОчиститьСообщения();
	Отказ = Ложь;
	
	Если Модифицированность
		ИЛИ Не Объект.Проведен Тогда
		Ответ = Вопрос(НСтр("ru = 'Перед началом проверки документ будет проведен. Продолжить?'"), РежимДиалогаВопрос.ОКОтмена, ,КодВозвратаДиалога.Отмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		Иначе
			Отказ = Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ПараметрЗаголовок = НСтр("ru = 'Проверка количества в документе %Документ%'");
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
		Иначе
			ПараметрЗаголовок = НСтр("ru = 'Проверка количества в ордере на перемещение товаров'");
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
		ПараметрыФормы.Вставить("Ложь", Истина);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ПараметрыФормы.Вставить("Помещение", Объект.Помещение);
		ПараметрыФормы.Вставить("Ордер", Объект.Ссылка);
		
		ОткрытьФорму("Обработка.ПроверкаКоличестваТоваровВДокументе.Форма.Форма", ПараметрыФормы, ЭтаФорма);
		
		Закрыть();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьКоличество(Команда)
	ОчиститьСообщения();
	Отказ = Ложь;
	
	Если Модифицированность
		ИЛИ Не Объект.Проведен Тогда
		Ответ = Вопрос(НСтр("ru = 'Перед началом исправления документ будет проведен. Продолжить?'"), РежимДиалогаВопрос.ОКОтмена, ,КодВозвратаДиалога.Отмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		Иначе
			Отказ = Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ПараметрЗаголовок = НСтр("ru = 'Исправление количества в документе %Документ%'");
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
		Иначе
			ПараметрЗаголовок = НСтр("ru = 'Исправление количества в ордере на перемещение товаров'");
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
		ПараметрыФормы.Вставить("Ложь", Истина);
		ПараметрыФормы.Вставить("Склад", Объект.Склад);
		ПараметрыФормы.Вставить("Помещение", Объект.Помещение);
		ПараметрыФормы.Вставить("Ордер", Объект.Ссылка);
		ПараметрыФормы.Вставить("РежимИсправления", Истина);
		
		ОткрытьФорму("Обработка.ПроверкаКоличестваТоваровВДокументе.Форма.Форма", ПараметрыФормы, ЭтаФорма);
		
		Закрыть();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОтобраннымТоварам(Команда)

	Если Объект.Товары.Количество() > 0 Тогда

		ТекстВопроса = НСтр("ru = 'Перед заполнением табличная часть будет очищена. Заполнить?'");
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;

	ЗаполнитьПоОтобраннымТоварамСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	Перем ТекущаяСтрока;
	
	ВесНоменклатуры = МенеджерОборудованияКлиент.ПолучитьДанныеИзВесов(ЭтаФорма, ТекущаяСтрока);
	
	Если ВесНоменклатуры <> Неопределено Тогда
		
		ТекущаяСтрока.КоличествоУпаковок = ВесНоменклатуры;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);					
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы);
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);		
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииПоFEFO(Команда)
	Если ЕстьЗаполненныеСерииПоFEFO() Тогда
		Если Не НоменклатураКлиент.ЗадатьВопросОПерезаполненииСерийПоFEFO() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		НоменклатураКлиент.ПредупредитьОбОтсутсвииСтрокЗаполняемыхПоFEFO();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура СкладПомещениеПриИзмененииСервер()
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад,Помещение",Объект.Склад,Объект.Помещение));
	
	ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение);
	
	Если ИспользоватьАдресноеХранение Тогда
		Объект.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Объект.Склад, Объект.Помещение);
	КонецЕсли;
	
	Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыРазбитьСправочноПоУпаковкам.Доступность = Не ИспользоватьАдресноеХранение;
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.РасходныйОрдерНаТовары));
	
	ЗаполнитьСписокВыбораСтатусов();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.РасходныйОрдерНаТовары));
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Склад", Объект.Склад);
	СтруктураРеквизитов.Вставить("Распоряжение", Объект.Распоряжение);
	СтруктураРеквизитов.Вставить("ДатаОтгрузки", Объект.ДатаОтгрузки);
	СтруктураРеквизитов.Вставить("Приоритет", Объект.Приоритет);
	
	РеквизитыДоставки = Документы.РасходныйОрдерНаТовары.РеквизитыДоставкиПоРаспоряжению(СтруктураРеквизитов);
	
	ЗаполнитьЗначенияСвойств(Объект, РеквизитыДоставки);

КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииСервер(ЗаполнятьПоотобраннымТоварам)
	Если ЗаполнятьПоОтобраннымТоварам Тогда
		ЗаполнитьПоОтобраннымТоварамСервер();
	Иначе
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.РасходныйОрдерНаТовары));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
		Объект.ДатаОтгрузки = ТекущаяДата();
	КонецЕсли;
	
	УстановитьДоступность(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУказанияСерий()
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	
	ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтаФорма);
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подборы и обработка проверки количества

&НаСервере
Процедура ОбработатьПроверкуКоличестваТоваровНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Объект.Товары.Загрузить(ТаблицаТоваров);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)

	ИзменятьКоличество = Ложь;
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками  = Новый Структура;
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	СтруктураДействий.ТолькоТовары                           = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если СтруктураДействий.МассивСтрокССериями.Количество() = 1
		И НоменклатураКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьФормуУказанияСерий",0.1,Истина);
		
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;	
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьШтрихкоды()

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураДействий,КэшированныеЗначения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
КонецПроцедуры

&НаСервере
Функция ЕстьЗаполненныеСерииПоFEFO()
	Возврат НоменклатураСервер.ЕстьСтрокиСЗаполненнымиПоFEFOСериями(Объект.Товары);
КонецФункции

&НаСервере
Функция ЗаполнитьСерииПоFEFOСервер()
	Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Объект.Товары) Тогда
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(Объект,ПараметрыУказанияСерий);	
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий,ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
		
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ЗаполнитьПоРаспоряжениюСервер()

	ТекОбъект = РеквизитФормыВЗначение("Объект");

	ТекОбъект.Товары.Очистить();
	ТекОбъект.Серии.Очистить();
	ТекОбъект.ЗаполнитьОстаткамиТоваровКОтгрузке();

	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	НоменклатураСервер.ЗаполнитьСерииПоFEFO(Объект,ПараметрыУказанияСерий);	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОтобраннымТоварамСервер()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	ТекОбъект.Товары.Очистить();
	ТекОбъект.ЗаполнитьОтобраннымиТоварами();
	
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.РасходныйОрдерНаТовары));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура РазбитьСправочноПоУпаковкамСервер()
	
	ТекОбъект = РеквизитФормыВЗначение("Объект",Тип("ДокументОбъект.РасходныйОрдерНаТовары"));
	ТекОбъект.РазбитьПоУпаковкамСправочно();
	ЗначениеВДанныеФормы(ТекОбъект,Объект);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИРазбитьПоУпаковкамСервер()
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	ТекОбъект.Товары.Очистить();
	ТекОбъект.ЗаполнитьОстаткамиТоваровКОтгрузке();
	ТекОбъект.РазбитьПоУпаковкамСправочно();
	
	ЗначениеВРеквизитФормы(ТекОбъект, "Объект");
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.РасходныйОрдерНаТовары));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокСкладов()
	СписокСкладов = Новый СписокЗначений;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Объект.Распоряжение) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		МассивСкладов = Документы.РасходныйОрдерНаТовары.ОрдерныеСкладыПриОтгрузке(Объект.Распоряжение, Объект.Склад);
		Для Каждого Элемент Из МассивСкладов Цикл
			СписокСкладов.Добавить(Элемент);
		КонецЦикла;
	Иначе
		Если ТипЗнч(Объект.Распоряжение) = Тип("ДокументСсылка.ЗаказНаПеремещение")
			ИЛИ ТипЗнч(Объект.Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			ИмяРеквизитаСклад = "СкладОтправитель";
		Иначе
			ИмяРеквизитаСклад = "Склад";
		КонецЕсли;
		СтруктураРеквизитов             = Новый Структура("Склад", ИмяРеквизитаСклад);
		ЗначениеРеквизитов              = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Распоряжение, СтруктураРеквизитов);
		СписокСкладов.Добавить(ЗначениеРеквизитов.Склад);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Элементы.Склад.РежимВыбораИзСписка = Истина;
	Элементы.Склад.СписокВыбора.ЗагрузитьЗначения(СписокСкладов.ВыгрузитьЗначения());
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораСтатусов()
	
	Элементы.Статус.СписокВыбора.Очистить();
	
	Если ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыРасходныхОрдеров.КУказаниюСерий);
	КонецЕсли;
	
	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыРасходныхОрдеров.КОтбору);
	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыРасходныхОрдеров.КПроверке);
	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыРасходныхОрдеров.ВРаботе);
	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыРасходныхОрдеров.КОтгрузке);
	Элементы.Статус.СписокВыбора.Добавить(Перечисления.СтатусыРасходныхОрдеров.Отгружен);
	
КонецПроцедуры

// Список выбора доступных статусов заполняется всеми разрешенными статусами,
// за исключением служебных.
//
&НаКлиенте
Процедура ЗаполнитьСписокВыбораСтатусовИсключаяСлужебные()
	
	Элементы.Статус.СписокВыбора.Очистить();
	
	Если ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Элементы.Статус.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КУказаниюСерий"));
	КонецЕсли;
	
	Элементы.Статус.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КОтбору"));
	Элементы.Статус.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КПроверке"));
	Элементы.Статус.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КОтгрузке"));
	Элементы.Статус.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.Отгружен"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
КонецФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Распоряжение) Тогда
		ЗаполнитьСписокСкладов();
	КонецЕсли;
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад,Помещение",Объект.Склад,Объект.Помещение));
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.РасходныйОрдерНаТовары));
	
	ЗаполнитьСписокВыбораСтатусов();
	
	ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение);
	Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ТоварыРазбитьСправочноПоУпаковкам.Видимость = Не ИспользоватьАдресноеХранение;
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		));
	
	Если Объект.ОтгрузкаПоЗаданиюНаПеревозку Тогда
		
		Элементы.ПорядокДоставки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		ТипОтгрузки = "ОтгрузкаПоЗаданиюНаПеревозку";
		
	Иначе
		
		Элементы.ПорядокДоставки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ТипОтгрузки = "Самовывоз";
		
	КонецЕсли;
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	УстановитьДоступность(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступность(Форма)
	
	ТоварыЗаполнитьПоРаспоряжениюДоступность = (Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КОтбору")
	Или Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КУказаниюСерий"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"ТоварыЗаполнитьПоРаспоряжению", 
		"Доступность",
		ТоварыЗаполнитьПоРаспоряжениюДоступность);
	
	ТоварыЗаполнитьПоОтобраннымТоварамДоступность = (Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КПроверке")
	Или Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КОтгрузке")
	Или Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.Отгружен"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"ТоварыЗаполнитьПоОтобраннымТоварам", 
		"Доступность",
		ТоварыЗаполнитьПоОтобраннымТоварамДоступность);
	
	ТоварыЗаполнитьСерииПоFEFOДоступность = Форма.ПараметрыУказанияСерий.ПланированиеОтгрузки
	Или Форма.ПараметрыУказанияСерий.ПланированиеОтбора;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"ТоварыЗаполнитьСерииПоFEFO", 
		"Доступность",
		ТоварыЗаполнитьСерииПоFEFOДоступность);
	
	ИсправитьКоличествоВидимость = (Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КОтгрузке")
	Или Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.Отгружен"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"ИсправитьКоличество", 
		"Видимость",
		ИсправитьКоличествоВидимость);
	
	ПроверитьКоличествоВидимость = (Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КПроверке"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"ПроверитьКоличество", 
		"Видимость",
		ПроверитьКоличествоВидимость);
	
	КонтролерДоступность = (Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КПроверке"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы, 
		"Контролер", 
		"Доступность",
		КонтролерДоступность);
	
	КонецПроцедуры
	
	
	
	   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////      ФУНКЦИИ ДЛЯ РАБОТЫ С ГРУЗОВЫМИ МЕСТАМИ   ///////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
  &НаСервере
Процедура ДобавитьГрузовыеМеста(Номенклатура,Характеристика,уникальныйИдентификатор,КоличествоНоменклатуры)
	ЗапросРегистраГрузМест = новый запрос;
	Если ПроверитьНаличиеХарактеристики(номенклатура) Тогда
				ЗапросРегистраГрузМест.Текст = "ВЫБРАТЬ
				|	НоменклатураакГрузовыеМеста.Ссылка КАК номенклатура,
				|	НоменклатураакГрузовыеМеста.ГрузовоеМесто,
				|	НоменклатураакГрузовыеМеста.Количество,
				|	ХарактеристикиНоменклатуры.Ссылка
				|ИЗ
				|	Справочник.Номенклатура.акГрузовыеМеста КАК НоменклатураакГрузовыеМеста,
				|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
				|ГДЕ
				|	НоменклатураакГрузовыеМеста.Ссылка = &Номенклатура
				|	И ХарактеристикиНоменклатуры.Ссылка = &ХарактеристикаНоменклатуры";
				
				ЗапросРегистраГрузМест.УстановитьПараметр("Номенклатура",номенклатура);
				ЗапросРегистраГрузМест.УстановитьПараметр("ХарактеристикаНоменклатуры",Характеристика);
				
				РегистрМест = ЗапросРегистраГрузМест.Выполнить().Выгрузить();
			ИНАЧЕ
				ЗапросРегистраГрузМест.Текст ="ВЫБРАТЬ
				|	НоменклатураакГрузовыеМеста.Ссылка КАК номенклатура,
				|	НоменклатураакГрузовыеМеста.ГрузовоеМесто,
				|	НоменклатураакГрузовыеМеста.Количество
				|ИЗ
				|	Справочник.Номенклатура.акГрузовыеМеста КАК НоменклатураакГрузовыеМеста
				|ГДЕ
				|	НоменклатураакГрузовыеМеста.Ссылка = &Номенклатура";
								
				ЗапросРегистраГрузМест.УстановитьПараметр("Номенклатура",Номенклатура);
			
				
				РегистрМест = ЗапросРегистраГрузМест.Выполнить().Выгрузить();
				
			КонецЕсли;
			
			Если ПроверитьНаличиеХарактеристики(номенклатура) Тогда
				ЗапросШтрихкодов = новый запрос;			
				ЗапросШтрихкодов.Текст =  "ВЫБРАТЬ
				                          |	акШтрихкодыГрузовыхМест.Номенклатура,
				                          |	акШтрихкодыГрузовыхМест.ХарактеристикаНоменклатуры,
				                          |	акШтрихкодыГрузовыхМест.ШтрихкодГрузовогоМеста,
				                          |	акШтрихкодыГрузовыхМест.ЗаказКлиента,
				                          |	акШтрихкодыГрузовыхМест.НазваниеГрузовогоМеста
				                          |ИЗ
				                          |	РегистрСведений.акШтрихкодыГрузовыхМест КАК акШтрихкодыГрузовыхМест
				                          |ГДЕ
				                          |	акШтрихкодыГрузовыхМест.Номенклатура = &Номенклатура
				                          |	И акШтрихкодыГрузовыхМест.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
				
				ЗапросШтрихкодов.УстановитьПараметр("Номенклатура",Номенклатура);
				ЗапросШтрихкодов.УстановитьПараметр("ХарактеристикаНоменклатуры",Характеристика);
				
				ТаблицаШтрихкодов =ЗапросШтрихкодов.Выполнить().Выгрузить();
			ИНАЧЕ
				ЗапросШтрихкодов = новый запрос;			
				ЗапросШтрихкодов.Текст =  "ВЫБРАТЬ
				|	акШтрихкодыГрузовыхМест.Номенклатура,
				|	акШтрихкодыГрузовыхМест.ХарактеристикаНоменклатуры,
				|	акШтрихкодыГрузовыхМест.ШтрихкодГрузовогоМеста,
				|	акШтрихкодыГрузовыхМест.ЗаказКлиента,
				|	акШтрихкодыГрузовыхМест.НазваниеГрузовогоМеста
				|ИЗ
				|	РегистрСведений.акШтрихкодыГрузовыхМест КАК акШтрихкодыГрузовыхМест
				|ГДЕ
				|	акШтрихкодыГрузовыхМест.Номенклатура = &Номенклатура";
				
				ЗапросШтрихкодов.УстановитьПараметр("Номенклатура",номенклатура);
				
				ТаблицаШтрихкодов =ЗапросШтрихкодов.Выполнить().Выгрузить();
				
			КонецЕсли;
			Для Каждого СтрокаРегистра ИЗ РегистрМест Цикл
				НоваяСтрокаГрузовогоМеста = Объект.акГрузовыеМеста.Добавить();			
				НоваяСтрокаГрузовогоМеста.номенклатура =  СтрокаРегистра.номенклатура;
				НоваяСтрокаГрузовогоМеста.Характеристика =   характеристика;
				НоваяСтрокаГрузовогоМеста.НаименованиеГрузовогоМеста =  СтрокаРегистра.ГрузовоеМесто;				
				НоваяСтрокаГрузовогоМеста.КоличествоПринять =  КоличествоНоменклатуры * СтрокаРегистра.количество;    
				НоваяСтрокаГрузовогоМеста.КоличествоПринято =  0;
				НоваяСтрокаГрузовогоМеста.акУникальныйИдентификатор = УникальныйИдентификатор;
				
				
				ВыбранныйШтрихкод = новый Структура("НазваниеГрузовогоМеста,ХарактеристикаНоменклатуры,ЗаказКлиента",СтрокаРегистра.ГрузовоеМесто,Характеристика.ссылка,Объект.акЗаказКлиента);
				МассивШтрихкодов = ТаблицаШтрихкодов.НайтиСтроки(ВыбранныйШтрихкод);
				Попытка
					НоваяСтрокаГрузовогоМеста.ШтрихКодГрузовогоМеста =  МассивШтрихкодов.Получить(0).штрихкодГрузовогоМеста;
				Исключение
					НоваяСтрокаГрузовогоМеста.ШтрихКодГрузовогоМеста = "";
				КонецПопытки;
				
			КонецЦикла;								
				
КонецПроцедуры	
	//}	
	
	//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
  &НаКлиенте
Процедура УдалитьГрузовыеМестаБезСсылок()
	
	
	Для каждого СтрокаГрузовыеМеста Из Объект.акГрузовыеМеста Цикл
		Отбор = новый структура("акУникальныйИдентификатор,Характеристика",СтрокаГрузовыеМеста.акУникальныйИдентификатор,СтрокаГрузовыеМеста.Характеристика);
		Если Объект.Товары.НайтиСтроки(Отбор).количество() = 0 Тогда
			Для каждого Строка Из Объект.акГрузовыеМеста.НайтиСтроки(Отбор) Цикл
				Объект.акГрузовыеМеста.удалить(Строка);
			КонецЦикла;
	
		КонецЕсли;		
	КонецЦикла;
	

КонецПроцедуры  
 //}

  //{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
   &НаСервере
Процедура ПересчитатьГрузовыеМестаПланТовара()

	///
	Для каждого СтрокаТовары Из  Объект.Товары Цикл	  
		ЗапросРегистраГрузМест = новый Запрос;
		ЗапросРегистраГрузМест.Текст = "ВЫБРАТЬ
		|	ГрузовыеМеста.Владелец,
		|	ГрузовыеМеста.Ссылка,
		|	ГрузовыеМеста.Количество
		|ИЗ
		|	Справочник.акГрузовыеМеста КАК ГрузовыеМеста
		|ГДЕ
		|	ГрузовыеМеста.Владелец = &Номенклатура";
		
		ЗапросРегистраГрузМест.УстановитьПараметр("Номенклатура",СтрокаТовары.Номенклатура);
		
		ГрузовыеМеста =  ЗапросРегистраГрузМест.Выполнить().Выгрузить();
		
		Для Каждого Строка ИЗ ГрузовыеМеста Цикл
			Номенклатура = Строка.владелец;
			НаименованиеГрузовогоМеста = Строка.ссылка;
			КоличествоПринятьНовое   = Строка.количество;
			Для каждого ГрузовоеМесто Из Объект.акГрузовыеМеста Цикл 
				Если  ГрузовоеМесто.Номенклатура = Номенклатура И
					ГрузовоеМесто.НаименованиеГрузовогоМеста = НаименованиеГрузовогоМеста Тогда
					ГрузовоеМесто.КоличествоПринять =  СтрокаТовары.акКоличествоПлан * КоличествоПринятьНовое;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ПересчитатьГрузовыеМеста();
КонецПроцедуры    
  //}

 //{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
// Пересчитывает количество грузовых мест которые надо принять в табличной части товары прходного ордера
&НаСервере
Процедура ПересчитатьГрузовыеМеста()	
	
	
Для каждого СтрокаТовары Из  Объект.Товары Цикл		
	
	//Пересчет мест План и Факт в таблице ТОВАРЫ	
	Номенклатура = СтрокаТовары.Номенклатура;
	Характеристика = СтрокаТовары.Характеристика;	
	СтрокаТовары.акколичествоГрузовыхМестПлан =0;
	СтрокаТовары.акколичествоГрузовыхМестФакт = 0;
	СтрокаТовары.количествоУпаковок=0;
	Значение = 1000; 
	
	
	Отбор = новый структура("акУникальныйИдентификатор,Номенклатура",СтрокаТовары.акУникальныйИдентификатор,СтрокаТовары.Номенклатура);
	Для каждого СтрокаГрузовыеМеста Из Объект.акГрузовыеМеста.НайтиСтроки(Отбор) Цикл		
		СтрокаТовары.акколичествоГрузовыхМестПлан = СтрокаТовары.акколичествоГрузовыхМестПлан + СтрокаГрузовыеМеста.КоличествоПринять; 
		СтрокаТовары.акколичествоГрузовыхМестФакт = СтрокаТовары.акколичествоГрузовыхМестФакт + СтрокаГрузовыеМеста.КоличествоПринято;
		СтрокаТовары.количествоУпаковок = Цел(Мин(Значение,(СтрокаГрузовыеМеста.КоличествоПринято*СтрокаТовары.акКоличествоПлан)/СтрокаГрузовыеМеста.КоличествоПринять));  
		Значение = СтрокаТовары.количествоУпаковок;		
	КонецЦикла;
	
КонецЦикла;


КонецПроцедуры   
 //}


//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
 &НаСервере
 Функция  ПроверитьЗаполнениеДанных(Номенклатура,Характеристика)
	 
	 Если ПроверитьНаличиеХарактеристики(номенклатура) Тогда
		 отбор = новый структура("Номенклатура,Характеристика",Номенклатура,Характеристика);				 
		 Если Объект.Товары.НайтиСтроки(Отбор).количество() > 1 Тогда			 
			 Добавить = Ложь; 
			 Сообщить("Номенклатура не уникальна!");
			 Возврат Добавить;
		 КонецЕсли;
		 
		 Если Номенклатура <> Справочники.Номенклатура.ПустаяСсылка() И     
			 Характеристика <> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() И
			 Характеристика <> NULL И
			 Объект.акГрузовыеМеста.НайтиСтроки(Отбор).количество() = 0  Тогда			 
			 Добавить = Истина;
		 Иначе
			 Добавить = Ложь;
		 КонецЕсли;
	 ИНАЧЕ
		 отбор = новый структура("Номенклатура",Номенклатура);		
		 
		 Если Объект.Товары.НайтиСтроки(Отбор).количество() > 1 Тогда			 
			 Добавить = Ложь; 
			 Сообщить("Номенклатура не уникальна!");
			 Возврат Добавить;
		 КонецЕсли;
		 
		 Если Номенклатура <> Справочники.Номенклатура.ПустаяСсылка() И     
			 Объект.акГрузовыеМеста.НайтиСтроки(Отбор).количество() = 0  Тогда			 
			 Добавить = Истина;
		 Иначе
			 Добавить = Ложь;
		 КонецЕсли;	 
	 КонецЕсли;
	 
	 Возврат Добавить;		
КонецФункции   
  //}

//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
&НаСервере
Функция ПроверитьНаличиеХарактеристики(ВыбраннаяНоменклатура);
	
	Если ВыбраннаяНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
		ХарактеристикаЕсть = Ложь;
	Иначе
		ХарактеристикаЕсть = Истина;
	КонецЕсли;
	
	Возврат ХарактеристикаЕсть;
КонецФункции
   //}

  //{ ООО "АСТЭК" Разработчик: Бурыкин Александр  18.11.2013
&НаКлиенте
Процедура акГрузовыеМестаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчитатьГрузовыеМеста();
    КоличествоУпаковокПриИзменении(Элемент)
КонецПроцедуры  
  //}


&НаКлиенте
Процедура ТоварыакКоличествоПланПриИзменении(Элемент)
	ПересчитатьГрузовыеМестаПланТовара();
КонецПроцедуры


&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
		
	//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
	

ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.АкУникальныйИдентификатор = NULL;	
	Если ПроверитьЗаполнениеДанных(ТекущаяСтрока.Номенклатура,ТекущаяСтрока.Характеристика) Тогда		
		ТекущаяСтрока.АкУникальныйИдентификатор = новый УникальныйИдентификатор;
		ДобавитьГрузовыеМеста(ТекущаяСтрока.Номенклатура,ТекущаяСтрока.Характеристика,ТекущаяСтрока.АкУникальныйИдентификатор,ТекущаяСтрока.Количество);
	Иначе 
		УдалитьГрузовыеМестаБезСсылок();
		ТекущаяСтрока.Характеристика = NULL;
	КонецЕсли;
//}	

//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
	УдалитьГрузовыеМестаБезСсылок();   	
	//}


КонецПроцедуры


  
