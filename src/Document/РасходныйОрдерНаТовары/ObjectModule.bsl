#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	НоменклатураСервер.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.РасходныйОрдерНаТовары));
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРасходныхОрдеров", Новый Структура("Склад", Склад)) Тогда
		Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Строка") Тогда
			
			Распоряжение = ДанныеЗаполнения;
			
			Если ТипЗнч(Распоряжение) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
				И Не ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Склад")) Тогда
				ТекстСообщение = НСтр("ru = 'Не заполнено поле ""Склад"" в документе ""%Распоряжение%"". Невозможно создать ордер.'");
				ТекстСообщение = СтрЗаменить(ТекстСообщение, "%Распоряжение%", Строка(Распоряжение));
				ВызватьИсключение ТекстСообщение;
			КонецЕсли;
			
			ЗаполнитьПоРаспоряжению();
			//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  18.11.2013
			ЭтотОбъект.акЗаказКлиента = ЭтотОбъект.Распоряжение.акЗаказКлиента;
			ЗаполнитьГрузовыеМестаКПоступлению();						
			//}
			Если Не СкладыСервер.ИспользоватьСкладскиеПомещения(Склад) 
				И Не СкладыСервер.ИспользоватьАдресноеХранение(Склад, Помещение)
				И ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
				РазбитьПоУпаковкамСправочно();
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ТекстСообщения = НСтр("ru='Расходный ордер на товары можно вводить только на основании распоряжения на отгрузку товаров.'");
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	ЗаполнитьРеквизитыДоставкиПоРаспоряжению();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.РасходныйОрдерНаТовары.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьТоварыКОтбору(ДополнительныеСвойства, Движения, Отказ);
 	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьРезервыСерийТоваров(ДополнительныеСвойства, Движения, Отказ);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	СкладыСервер.ОтразитьСостоянияОтгрузки(Распоряжение, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	СкладыСервер.ОтразитьСостоянияОтгрузки(Распоряжение, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Серии.Очистить();
	ИнициализироватьДокумент();

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ДополнительныеСвойства.Свойство("ОтложенноеПроведение") Тогда
		
		ПараметрыФО = Новый Структура;
		ПараметрыФО.Вставить("Склад", Склад);
		
		Если Не Проведен
			И Статус <> Перечисления.СтатусыРасходныхОрдеров.КОтбору
			И Статус <> Перечисления.СтатусыРасходныхОрдеров.КУказаниюСерий
			И (ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад",ПараметрыФО)
			Или СкладыСервер.ИспользоватьСкладскиеПомещения(Склад)
			Или СкладыСервер.ИспользоватьАдресноеХранение(Склад, Помещение)) Тогда
			
			ТекстСообщения = НСтр("ru = 'Документ должен быть проведен сначала в статусе ""К отбору"" или ""К указанию серий""'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,"Статус","Объект",Отказ);
		КонецЕсли;
	КонецЕсли;

	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

	МассивНепроверяемыхРеквизитов.Добавить("ЗаданиеНаПеревозку");
	
	Если ОтгрузкаПоЗаданиюНаПеревозку
		И Не ЗначениеЗаполнено(ЗаданиеНаПеревозку) Тогда
		ТекстСообщения = НСтр("ru = 'Распоряжение ""%Распоряжение%"" еще не добавлено в задание на перевозку (или задание еще не до конца сформировано). Расходный ордер по этому распоряжению нужно вводить позже.'");
        ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Распоряжение%", Распоряжение);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,"ЗаданиеНаПеревозку","Объект",Отказ);
	КонецЕсли;
	
	Если Не СкладыСервер.ИспользоватьСкладскиеПомещения(Склад) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Помещение");
	КонецЕсли;
	
	Если Не СкладыСервер.ИспользоватьАдресноеХранение(Склад,Помещение) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Упаковка");
		МассивНепроверяемыхРеквизитов.Добавить("ЗонаОтгрузки");
	Иначе
		Если Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору
			Или Статус = Перечисления.СтатусыРасходныхОрдеров.КУказаниюСерий Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Товары.Упаковка");
		КонецЕсли;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Товары.Упаковка");
			ТекстСообщения = НСтр("ru='В настройках программы не включено использование упаковок номенклатуры, 
			|поэтому нельзя оформить документ по складу с адресным хранением остатков. Обратитесь к администратору'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;	
	
	Если Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
		
		Если ДатаОтгрузки > ТекущаяДата() Тогда
			
			ТекстСообщения = НСтр("ru='При проведении расходного ордера в статусе ""%Отгружен%"" дата отгрузки должна быть не больше текущей даты.'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Отгружен%",Перечисления.СтатусыРасходныхОрдеров.Отгружен);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,"ДатаОтгрузки","Объект",Отказ);
			
		КонецЕсли;
	КонецЕсли;

	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.РасходныйОрдерНаТовары),Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ЗаполнитьОстаткамиТоваровКОтгрузке() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Склад",  Склад);
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузке.Серия КАК Серия,
	|	СУММА(ТоварыКОтгрузке.Количество) КАК Количество,
	|	СУММА(ТоварыКОтгрузке.Количество) КАК КоличествоУпаковок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|		ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|		ТоварыКОтгрузке.Серия КАК Серия,
	|		ТоварыКОтгрузке.КОтгрузкеОстаток - ТоварыКОтгрузке.СобираетсяОстаток - ТоварыКОтгрузке.СобраноОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.Остатки(
	|				,
	|				ДокументОтгрузки = &Распоряжение
	|					И Склад = &Склад) КАК ТоварыКОтгрузке
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыКОтгрузке.Номенклатура,
	|		ТоварыКОтгрузке.Характеристика,
	|		ТоварыКОтгрузке.Серия,
	|		ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ТоварыКОтгрузке.КОтгрузке
	|			ИНАЧЕ ТоварыКОтгрузке.КОтгрузке
	|		КОНЕЦ - ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ТоварыКОтгрузке.Собирается
	|			ИНАЧЕ ТоварыКОтгрузке.Собирается
	|		КОНЕЦ - ВЫБОР
	|			КОГДА ТоварыКОтгрузке.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ТоварыКОтгрузке.Собрано
	|			ИНАЧЕ ТоварыКОтгрузке.Собрано
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке КАК ТоварыКОтгрузке
	|	ГДЕ
	|		ТоварыКОтгрузке.Регистратор = &Ссылка
	|		И ТоварыКОтгрузке.Склад = &Склад
	|		И ТоварыКОтгрузке.Активность
	|		И ТоварыКОтгрузке.ДокументОтгрузки = &Распоряжение) КАК ТоварыКОтгрузке
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузке.Номенклатура,
	|	ТоварыКОтгрузке.Характеристика,
	|	ТоварыКОтгрузке.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОтгрузке.Количество) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыКОтгрузке.Номенклатура.Наименование,
	|	ТоварыКОтгрузке.Характеристика.Наименование
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(КоличествоУпаковок)
	|ПО
	|	Номенклатура,
	|	Характеристика";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда

		ВыборкаПоНоменклатуре = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
			ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоХарактеристикам.Следующий() Цикл
				НоваяСтрокаТоваров = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров, ВыборкаПоХарактеристикам);
				
				ВыборкаПоСериям = ВыборкаПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоСериям.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаПоСериям.Серия) Тогда
						НоваяСтрокаСерий = Серии.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаСерий, ВыборкаПоСериям);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
				
	Иначе

		ТекстСообщения = НСтр("ru = 'Нет данных для заполнения по распоряжению ""%Распоряжение%"" .'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Распоряжение%", Распоряжение);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Распоряжение");

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьОтобраннымиТоварами() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыКОтбору.Распоряжение КАК Распоряжение,
	|	ТоварыКОтбору.Номенклатура КАК Номенклатура,
	|	ТоварыКОтбору.Характеристика КАК Характеристика,
	|	ТоварыКОтбору.Упаковка КАК Упаковка,
	|	ТоварыКОтбору.СерияОтобрана КАК Серия,
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыКОтбору.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ТоварыКОтбору.Отобрано
	|			ИНАЧЕ -ТоварыКОтбору.Отобрано
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыКОтбору.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ТоварыКОтбору.ОтобраноУпаковок
	|			ИНАЧЕ -ТоварыКОтбору.ОтобраноУпаковок
	|		КОНЕЦ) КАК КоличествоУпаковок
	|ИЗ
	|	РегистрНакопления.ТоварыКОтбору КАК ТоварыКОтбору
	|ГДЕ
	|	ТоварыКОтбору.Распоряжение = &Распоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтбору.Распоряжение,
	|	ТоварыКОтбору.Характеристика,
	|	ТоварыКОтбору.Номенклатура,
	|	ТоварыКОтбору.СерияОтобрана,
	|	ТоварыКОтбору.Упаковка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыКОтбору.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ТоварыКОтбору.ОтобраноУпаковок
	|			ИНАЧЕ -ТоварыКОтбору.ОтобраноУпаковок
	|		КОНЕЦ) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыКОтбору.Номенклатура.Наименование,
	|	ТоварыКОтбору.Характеристика.Наименование";
	
	Запрос.УстановитьПараметр("Распоряжение", Ссылка);
	
	ТаблицаОтобранныхТоваров = Запрос.Выполнить().Выгрузить();
	
	Товары.Загрузить(ТаблицаОтобранныхТоваров);
	Товары.Свернуть("Номенклатура,Характеристика,Упаковка","Количество,КоличествоУпаковок");
	
	СтруктураПоиска = Новый Структура("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	МассивУдаляемыхСтрок = ТаблицаОтобранныхТоваров.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из МассивУдаляемыхСтрок Цикл
		ТаблицаОтобранныхТоваров.Удалить(Строка);
	КонецЦикла;
	
	Серии.Загрузить(ТаблицаОтобранныхТоваров);
	Серии.Свернуть("Номенклатура,Характеристика,Упаковка,Серия","Количество, КоличествоУпаковок");
КонецПроцедуры

Процедура ЗаполнитьПоРаспоряжению() Экспорт
	
	Если Не ЗначениеЗаполнено(Распоряжение) Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Новый Структура("ДатаОтгрузки, Склад, ИспользоватьОрдернуюСхему", "Дата");
	ГруппаСкладовВРаспоряжении = Ложь;
	Если ТипЗнч(Распоряжение) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		СтруктураГруппыСкладов     = Новый Структура("ЭтоГруппа", "Склад.ЭтоГруппа");
		ЗначениеГруппыСкладов      = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, СтруктураГруппыСкладов);
		ГруппаСкладовВРаспоряжении = ЗначениеГруппыСкладов.ЭтоГруппа;
		Если ГруппаСкладовВРаспоряжении Тогда
			Если Не ЗначениеЗаполнено(Склад) Тогда
				МассивСкладов = Документы.РасходныйОрдерНаТовары.ОрдерныеСкладыПриОтгрузке(Распоряжение, Неопределено);
				Если МассивСкладов.Количество() = 0 Тогда
					ТекстСообщение = НСтр("ru = 'Для складов документа ""%Распоряжение%"" оформление приходных ордеров не требуется.
					|Заполнение документа не выполнено.'");
					ТекстСообщение = СтрЗаменить(ТекстСообщение, "%Распоряжение%", Строка(Распоряжение.Склад));
					ВызватьИсключение ТекстСообщение;
				ИначеЕсли МассивСкладов.Количество() = 1 Тогда
					Склад = МассивСкладов[0];
				Иначе
					Возврат
				КонецЕсли;
			Иначе
				Возврат
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ГруппаСкладовВРаспоряжении Тогда
		Если ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			
			Реквизиты.Склад = "СкладОтправитель";
			Реквизиты.ИспользоватьОрдернуюСхему = "ЕстьNULL(СкладОтправитель.ИспользоватьОрдернуюСхемуПриОтгрузке, Ложь)";
			
		ИначеЕсли Не ГруппаСкладовВРаспоряжении Тогда
			
			Реквизиты.Склад = "Склад";
			Реквизиты.ИспользоватьОрдернуюСхему ="ЕстьNULL(Склад.ИспользоватьОрдернуюСхемуПриОтгрузке, Ложь)";
			
		КонецЕсли;
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Распоряжение, Реквизиты);
		Если ЗначенияРеквизитов.ИспользоватьОрдернуюСхему Тогда
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗначенияРеквизитов, "Склад, ДатаОтгрузки");
			ЗаполнитьОстаткамиТоваровКОтгрузке();
			ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.РасходныйОрдерНаТовары);
			
			Если ЗначениеЗаполнено(Склад) 
				И (Не СкладыСервер.ИспользоватьСкладскиеПомещения(Склад)
				Или ЗначениеЗаполнено(Помещение)) Тогда
				НоменклатураСервер.ЗаполнитьСерииПоFEFO(ЭтотОбъект,ПараметрыУказанияСерий,Ложь);	
			КонецЕсли;
			
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект,ПараметрыУказанияСерий);
			Отказ = Ложь;
			НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,ПараметрыУказанияСерий,Отказ,,Ложь);
			
			Если Не Отказ Тогда
				Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;	
			Иначе
				Статус = Перечисления.СтатусыРасходныхОрдеров.КУказаниюСерий;
			КонецЕсли;
			
		Иначе
			
			ТекстСообщение = НСтр("ru = 'Для склада ""%Склад%"" оформление расходных ордеров не требуется.
			|Заполнение документа не выполнено.'");
			ТекстСообщение = СтрЗаменить(ТекстСообщение, "%Склад%", Строка(ЗначенияРеквизитов.Склад));
			ВызватьИсключение ТекстСообщение;
			
		КонецЕсли;
	Иначе
		ЗаполнитьОстаткамиТоваровКОтгрузке();
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.РасходныйОрдерНаТовары);
		
		Если ЗначениеЗаполнено(Склад) 
			И (Не СкладыСервер.ИспользоватьСкладскиеПомещения(Склад)
				Или ЗначениеЗаполнено(Помещение)) Тогда
			НоменклатураСервер.ЗаполнитьСерииПоFEFO(ЭтотОбъект,ПараметрыУказанияСерий,Ложь);	
		КонецЕсли;
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект,ПараметрыУказанияСерий);
		Отказ = Ложь;
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,ПараметрыУказанияСерий,Отказ,,Ложь);
		
		Если Не Отказ Тогда
			Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору;	
		Иначе
			Статус = Перечисления.СтатусыРасходныхОрдеров.КУказаниюСерий;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДоставкиПоРаспоряжению()
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Склад", Склад);
	СтруктураРеквизитов.Вставить("Распоряжение", Распоряжение);
	СтруктураРеквизитов.Вставить("ДатаОтгрузки", ДатаОтгрузки);
	СтруктураРеквизитов.Вставить("Приоритет", Приоритет);
	
	РеквизитыДоставки = Документы.РасходныйОрдерНаТовары.РеквизитыДоставкиПоРаспоряжению(СтруктураРеквизитов);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыДоставки);
	
КонецПроцедуры

Процедура РазбитьПоУпаковкамСправочно() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаНоменклатурыДляЗапроса
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	МИНИМУМ(Таблица.НомерСтроки) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.Номенклатура).НаборУпаковок КАК НаборУпаковок,
	|	Таблица.Характеристика КАК Характеристика,
	|	СУММА(Таблица.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	ТаблицаНоменклатурыДляЗапроса КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Таблица.Номенклатура = СпрНоменклатура.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Номенклатура,
	|	СпрНоменклатура.НаборУпаковок,
	|	Таблица.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Количество,
	|	ТаблицаНоменклатуры.НомерСтроки,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Коэффициент, 1) КАК КоличествоВУпаковке,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)) КАК Упаковка
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|		ПО (ТаблицаНоменклатуры.Номенклатура = УпаковкиНоменклатуры.Владелец
	|				ИЛИ ТаблицаНоменклатуры.НаборУпаковок = УпаковкиНоменклатуры.Владелец)
	|			И ((НЕ УпаковкиНоменклатуры.ПометкаУдаления))
	|			И ТаблицаНоменклатуры.Количество >= УпаковкиНоменклатуры.Коэффициент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНоменклатуры.НомерСтроки,
	|	КоличествоВУпаковке УБЫВ";
	
	ТаблицаНоменклатуры = Товары.Выгрузить();
	Запрос.УстановитьПараметр("Таблица",ТаблицаНоменклатуры);
	
	Товары.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТекНомерСтроки  = Неопределено;
	ТекНоменклатура = Неопределено;
	ТекХарактеристика = Неопределено;
	Количество = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НомерСтроки <> ТекНомерСтроки Тогда
			
			Если Количество <> 0 Тогда
				НоваяСтрока = Товары.Добавить();
				НоваяСтрока.Количество = Количество;
				НоваяСтрока.КоличествоУпаковок = Количество;
				
				НоваяСтрока.Номенклатура = ТекНоменклатура;
				НоваяСтрока.Характеристика = ТекХарактеристика;
			КонецЕсли;
			
			ТекНомерСтроки              = Выборка.НомерСтроки;
			ТекНоменклатура             = Выборка.Номенклатура;
			ТекХарактеристика           = Выборка.Характеристика;
			
			Количество = Выборка.Количество;
			
		КонецЕсли;
		
		КоличествоВДокумент = Цел(Количество / Выборка.КоличествоВУпаковке);
		
		Если КоличествоВДокумент > 0 Тогда
		
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Количество = КоличествоВДокумент * Выборка.КоличествоВУпаковке;
			НоваяСтрока.КоличествоУпаковок = КоличествоВДокумент;
			НоваяСтрока.Упаковка = Выборка.Упаковка;
			
			НоваяСтрока.Номенклатура = ТекНоменклатура;
			НоваяСтрока.Характеристика = ТекХарактеристика;
			
			Количество = Количество - КоличествоВДокумент * Выборка.КоличествоВУпаковке;
		КонецЕсли;
	КонецЦикла;
	
	Если Количество <> 0 Тогда
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Количество = Количество;
		НоваяСтрока.КоличествоУпаковок = Количество;
		
		НоваяСтрока.Номенклатура = ТекНоменклатура;
		НоваяСтрока.Характеристика = ТекХарактеристика;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный = Пользователи.ТекущийПользователь();
	Приоритет     = Метаданные().Реквизиты.Приоритет.ЗначениеЗаполнения;
	Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	
	Если ЗначениеЗаполнено(Склад) Тогда
		Если СкладыСервер.ИспользоватьАдресноеХранение(Склад,Помещение)
			И Не ЗначениеЗаполнено(ЗонаОтгрузки) Тогда
			ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Склад,Помещение);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		ДатаОтгрузки = ТекущаяДата();
	КонецЕсли;
	
	СкладскаяОперация = Документы.РасходныйОрдерНаТовары.СкладскаяОперацияПоРаспоряжению(Распоряжение);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРасходныхОрдеров", Новый Структура("Склад", Склад)) Тогда
		Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	Иначе
		Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Массив.Добавить(Движения.ТоварыКОтгрузке);
		Если Статус = Перечисления.СтатусыРасходныхОрдеров.КОтбору
			Или Статус = Перечисления.СтатусыРасходныхОрдеров.КУказаниюСерий Тогда
			Массив.Добавить(Движения.ТоварыНаСкладах);
		КонецЕсли;
	КонецЕсли;
	
	Если СкладыСервер.ИспользоватьАдресноеХранение(Склад, Помещение) Тогда

		Массив.Добавить(Движения.ТоварыКОтбору);

	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры




//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013 
Процедура ЗаполнитьГрузовыеМестаКПоступлению() Экспорт
	
	// Загрузка Количества грузовых места в таблицу ТОВАРЫ приходного ордера
	ТабЧастьтовары = ЭтотОбъект.Товары.Выгрузить();
	
	Для каждого строка Из ТабЧастьтовары Цикл
		НоменклатураТовары = строка.номенклатура.получитьОбъект();
		//получить недостающее количество или количество упаковок
		Отбор = новый структура("Номенклатура,Характеристика",строка.номенклатура,строка.Характеристика);
		МассивТоваровРаспоряжения = ЭтотОбъект.Распоряжение.Товары.НайтиСтроки(Отбор);
		Для каждого СтрокаТоваровРаспоряжения ИЗ МассивТоваровРаспоряжения  цикл
			строка.количество = СтрокаТоваровРаспоряжения.Количество;
		КонецЦикла;
		строка.акКоличествоГрузовыхМестПлан = НоменклатураТовары.акКоличествоГрузовыхМест * строка.количество;
		строка.акКоличествоПлан = строка.количество;
		строка.количество = 0;  //это - количествоФакт
		строка.акУникальныйИдентификатор = Новый УникальныйИдентификатор;
	КонецЦикла;	
	
	ЭтотОбъект.Товары.Загрузить(ТабЧастьтовары);
	
	// Заполнение табличной части грузовые места
	
	ГрузМеста = новый ТаблицаЗначений ;
	ГрузМеста.Колонки.Добавить("Номенклатура");
	ГрузМеста.Колонки.Добавить("Характеристика");
	ГрузМеста.Колонки.Добавить("НомерГрузовогоМеста");	
	ГрузМеста.Колонки.Добавить("НаименованиеГрузовогоМеста");
	ГрузМеста.Колонки.Добавить("ШтрихКодГрузовогоМеста");
	ГрузМеста.Колонки.Добавить("КоличествоПринять");
	ГрузМеста.Колонки.Добавить("КоличествоПринято");
	ГрузМеста.Колонки.Добавить("акУникальныйИдентификатор");
	
	Для каждого СтрокаТовары ИЗ ТабЧастьтовары Цикл		
		Если СтрокаТовары.акКоличествоГрузовыхМестПлан > 0 Тогда
			ЗапросРегистраГрузМест = новый Запрос;
			Если ПроверитьНаличиеХарактеристики(СтрокаТовары.номенклатура.ссылка) Тогда
				ЗапросРегистраГрузМест.Текст = "ВЫБРАТЬ
				|	НоменклатураакГрузовыеМеста.Ссылка КАК номенклатура,
				|	НоменклатураакГрузовыеМеста.ГрузовоеМесто,
				|	НоменклатураакГрузовыеМеста.Количество,
				|	ХарактеристикиНоменклатуры.Ссылка
				|ИЗ
				|	Справочник.Номенклатура.акГрузовыеМеста КАК НоменклатураакГрузовыеМеста,
				|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
				|ГДЕ
				|	НоменклатураакГрузовыеМеста.Ссылка = &Номенклатура
				|	И ХарактеристикиНоменклатуры.Ссылка = &ХарактеристикаНоменклатуры";
				
				ЗапросРегистраГрузМест.УстановитьПараметр("Номенклатура",СтрокаТовары.номенклатура.ссылка);
				ЗапросРегистраГрузМест.УстановитьПараметр("ХарактеристикаНоменклатуры",СтрокаТовары.Характеристика.ссылка);
				
				РегистрМест = ЗапросРегистраГрузМест.Выполнить().Выгрузить();
			ИНАЧЕ
				ЗапросРегистраГрузМест.Текст ="ВЫБРАТЬ
				|	НоменклатураакГрузовыеМеста.Ссылка КАК номенклатура,
				|	НоменклатураакГрузовыеМеста.ГрузовоеМесто,
				|	НоменклатураакГрузовыеМеста.Количество
				|ИЗ
				|	Справочник.Номенклатура.акГрузовыеМеста КАК НоменклатураакГрузовыеМеста,
				|ГДЕ
				|	НоменклатураакГрузовыеМеста.Ссылка = &Номенклатура";
								
				ЗапросРегистраГрузМест.УстановитьПараметр("Номенклатура",СтрокаТовары.номенклатура.ссылка);
			
				
				РегистрМест = ЗапросРегистраГрузМест.Выполнить().Выгрузить();
				
			КонецЕсли;
			
			Если ПроверитьНаличиеХарактеристики(СтрокаТовары.номенклатура.ссылка) Тогда
				ЗапросШтрихкодов = новый запрос;			
				ЗапросШтрихкодов.Текст =  "ВЫБРАТЬ
				                          |	акШтрихкодыГрузовыхМест.Номенклатура,
				                          |	акШтрихкодыГрузовыхМест.ХарактеристикаНоменклатуры,
				                          |	акШтрихкодыГрузовыхМест.ШтрихкодГрузовогоМеста,
				                          |	акШтрихкодыГрузовыхМест.ЗаказКлиента,
				                          |	акШтрихкодыГрузовыхМест.НазваниеГрузовогоМеста
				                          |ИЗ
				                          |	РегистрСведений.акШтрихкодыГрузовыхМест КАК акШтрихкодыГрузовыхМест
				                          |ГДЕ
				                          |	акШтрихкодыГрузовыхМест.Номенклатура = &Номенклатура
				                          |	И акШтрихкодыГрузовыхМест.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
				
				ЗапросШтрихкодов.УстановитьПараметр("Номенклатура",СтрокаТовары.номенклатура.ссылка);
				ЗапросШтрихкодов.УстановитьПараметр("ХарактеристикаНоменклатуры",СтрокаТовары.Характеристика.ссылка);
				
				ТаблицаШтрихкодов =ЗапросШтрихкодов.Выполнить().Выгрузить();
			ИНАЧЕ
				ЗапросШтрихкодов = новый запрос;			
				ЗапросШтрихкодов.Текст =  "ВЫБРАТЬ
				|	акШтрихкодыГрузовыхМест.Номенклатура,
				|	акШтрихкодыГрузовыхМест.ХарактеристикаНоменклатуры,
				|	акШтрихкодыГрузовыхМест.ШтрихкодГрузовогоМеста,
				|	акШтрихкодыГрузовыхМест.ЗаказКлиента,
				|	акШтрихкодыГрузовыхМест.НазваниеГрузовогоМеста
				|ИЗ
				|	РегистрСведений.акШтрихкодыГрузовыхМест КАК акШтрихкодыГрузовыхМест
				|ГДЕ
				|	акШтрихкодыГрузовыхМест.Номенклатура = &Номенклатура";
				
				ЗапросШтрихкодов.УстановитьПараметр("Номенклатура",СтрокаТовары.номенклатура.ссылка);
				
				ТаблицаШтрихкодов =ЗапросШтрихкодов.Выполнить().Выгрузить();
				
			КонецЕсли;
			Для Каждого СтрокаРегистра ИЗ РегистрМест Цикл
				НоваяСтрокаГрузовогоМеста = ГрузМеста.Добавить();			
				НоваяСтрокаГрузовогоМеста.номенклатура =  СтрокаРегистра.номенклатура;
				НоваяСтрокаГрузовогоМеста.Характеристика =   СтрокаТовары.характеристика;
				НоваяСтрокаГрузовогоМеста.НаименованиеГрузовогоМеста =  СтрокаРегистра.ГрузовоеМесто;				
				НоваяСтрокаГрузовогоМеста.КоличествоПринять =  СтрокаТовары.количество * СтрокаРегистра.количество;    
				НоваяСтрокаГрузовогоМеста.КоличествоПринято =  0;
				НоваяСтрокаГрузовогоМеста.акУникальныйИдентификатор = СтрокаТовары.акУникальныйИдентификатор;
				
				
				ВыбранныйШтрихкод = новый Структура("НазваниеГрузовогоМеста,ХарактеристикаНоменклатуры,ЗаказКлиента",СтрокаРегистра.ГрузовоеМесто,СтрокаТовары.Характеристика.ссылка,ЭтотОбъект.акЗаказКлиента);
				МассивШтрихкодов = ТаблицаШтрихкодов.НайтиСтроки(ВыбранныйШтрихкод);
				Попытка
					НоваяСтрокаГрузовогоМеста.ШтрихКодГрузовогоМеста =  МассивШтрихкодов.Получить(0).штрихкодГрузовогоМеста;
				Исключение
					НоваяСтрокаГрузовогоМеста.ШтрихКодГрузовогоМеста = "";
				КонецПопытки;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ЭтотОбъект.акГрузовыеМеста.Загрузить(ГрузМеста);	
	ПересчитатьГрузовыеМестаПланТовара(ЭтотОбъект);
КонецПроцедуры
//}

//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
&НаСервере
Функция ПроверитьНаличиеХарактеристики(ВыбраннаяНоменклатура);
	
	Если ВыбраннаяНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
		ХарактеристикаЕсть = Ложь;
	Иначе
		ХарактеристикаЕсть = Истина;
	КонецЕсли;
	
	Возврат ХарактеристикаЕсть;
КонецФункции
//}

    //{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
   &НаСервере
Процедура ПересчитатьГрузовыеМестаПланТовара(ЭтотОбъект)

	///
	Для каждого СтрокаТовары Из  ЭтотОбъект.Товары Цикл	  
		ЗапросРегистраГрузМест = новый Запрос;
		ЗапросРегистраГрузМест.Текст = "ВЫБРАТЬ
		|	ГрузовыеМеста.Владелец,
		|	ГрузовыеМеста.Ссылка,
		|	ГрузовыеМеста.Количество
		|ИЗ
		|	Справочник.акГрузовыеМеста КАК ГрузовыеМеста
		|ГДЕ
		|	ГрузовыеМеста.Владелец = &Номенклатура";
		
		ЗапросРегистраГрузМест.УстановитьПараметр("Номенклатура",СтрокаТовары.Номенклатура);
		
		ГрузовыеМеста =  ЗапросРегистраГрузМест.Выполнить().Выгрузить();
		
		Для Каждого Строка ИЗ ГрузовыеМеста Цикл
			Номенклатура = Строка.владелец;
			НаименованиеГрузовогоМеста = Строка.ссылка;
			КоличествоПринятьНовое   = Строка.количество;
			Для каждого ГрузовоеМесто Из ЭтотОбъект.акГрузовыеМеста Цикл 
				Если  ГрузовоеМесто.Номенклатура = Номенклатура И
					ГрузовоеМесто.НаименованиеГрузовогоМеста = НаименованиеГрузовогоМеста Тогда
					ГрузовоеМесто.КоличествоПринять =  СтрокаТовары.акКоличествоПлан * КоличествоПринятьНовое;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ПересчитатьГрузовыеМеста(ЭтотОбъект);
КонецПроцедуры    
  //}
  
 //{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
// Пересчитывает количество грузовых мест которые надо принять в табличной части товары прходного ордера
&НаСервере
Процедура ПересчитатьГрузовыеМеста(ЭтотОбъект)	
	
	
Для каждого СтрокаТовары Из  ЭтотОбъект.Товары Цикл		
	
	//Пересчет мест План и Факт в таблице ТОВАРЫ	
	Номенклатура = СтрокаТовары.Номенклатура;
	Характеристика = СтрокаТовары.Характеристика;	
	СтрокаТовары.акколичествоГрузовыхМестПлан =0;
	СтрокаТовары.акколичествоГрузовыхМестФакт = 0;
	СтрокаТовары.количествоУпаковок=0;
	Значение = 1000; 
	
	
	Отбор = новый структура("акУникальныйИдентификатор,Номенклатура",СтрокаТовары.акУникальныйИдентификатор,СтрокаТовары.Номенклатура);
	Для каждого СтрокаГрузовыеМеста Из ЭтотОбъект.акГрузовыеМеста.НайтиСтроки(Отбор) Цикл		
		СтрокаТовары.акколичествоГрузовыхМестПлан = СтрокаТовары.акколичествоГрузовыхМестПлан + СтрокаГрузовыеМеста.КоличествоПринять; 
		СтрокаТовары.акколичествоГрузовыхМестФакт = СтрокаТовары.акколичествоГрузовыхМестФакт + СтрокаГрузовыеМеста.КоличествоПринято;
		СтрокаТовары.количествоУпаковок = Цел(Мин(Значение,(СтрокаГрузовыеМеста.КоличествоПринято*СтрокаТовары.акКоличествоПлан)/СтрокаГрузовыеМеста.КоличествоПринять));  
		Значение = СтрокаТовары.количествоУпаковок;		
	КонецЦикла;
	
КонецЦикла;


КонецПроцедуры   
 //}

 

#КонецЕсли