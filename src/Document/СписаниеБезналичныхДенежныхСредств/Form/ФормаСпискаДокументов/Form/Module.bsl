
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ИспользоватьНесколькоРасчетныхСчетов	= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов");
	ЗаполнитьСписокХозяйственныхОпераций();
	УправлениеЭлементамиФормы();
	
	ЗаказыКОплате.ТекстЗапроса = ТекстЗапросаЗаказыКОплате();
	УстановитьПараметрыДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
	СохранитьРабочиеЗначенияПолейФормы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_СписаниеБезналичныхДенежныхСредств" Тогда
		ОбновитьДиначескиеСписки();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Организация    = Настройки.Получить("Организация");
	БанковскийСчет = Настройки.Получить("БанковскийСчет");
	УстановитьОтборДинамическихСписков();
	
	Вариант = Настройки.Получить("ДатаПлатежа.Вариант");
	Если ЗначениеЗаполнено(Вариант) Тогда
		ДатаПлатежа.Вариант = Вариант;
		УстановитьПараметрыДинамическихСписков();
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура БанковскийСчетОтборПриИзменении(Элемент)
	
	БанковскийСчетОтборПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьДиначескиеСписки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПлатежаОтборПриИзменении(Элемент)
	
	УстановитьПараметрыДинамическихСписков();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиКОплатеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элементы.ЗаявкиКОплате.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОплатеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элементы.ЗаказыКОплате.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СоздатьВыдачаПодотчетнику()

	СоздатьСписаниеБезналичныхДенежныхСредств(0);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеречислениеНаДругойСчет()

	СоздатьСписаниеБезналичныхДенежныхСредств(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратОплатыКлиенту()

	СоздатьСписаниеБезналичныхДенежныхСредств(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОплатаВДругуюОрганизацию(Команда)
	
	СоздатьСписаниеБезналичныхДенежныхСредств(3);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратВДругуюОрганизацию(Команда)
	СоздатьСписаниеБезналичныхДенежныхСредств(7);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПрочиеРасходы(Команда)
	
	СоздатьСписаниеБезналичныхДенежныхСредств(4);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеречислениеВБюджет(Команда)
	
	СоздатьСписаниеБезналичныхДенежныхСредств(5);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПрочаяВыдачаДенежныхСредств()
	
	СоздатьСписаниеБезналичныхДенежныхСредств(6);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВнутреннююПередачуДенежныхСредств(Команда)
	
	СоздатьСписаниеБезналичныхДенежныхСредств(8);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеречислениеТаможне(Команда)
	
	СоздатьСписаниеБезналичныхДенежныхСредств(9);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонвертацияВалюты(Команда)
	
	СоздатьСписаниеБезналичныхДенежныхСредств(10);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыплатаЗаработнойПлаты(Команда)
	
	СоздатьСписаниеБезналичныхДенежныхСредств(11);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСписаниеПоКредитамДепозитам(Команда)
	
	Если Команда.Имя = "СоздатьОплатаПоКредитам" Тогда
		ИндексОперации = 12;
	ИначеЕсли Команда.Имя = "СоздатьВыплатаПоДепозитам" Тогда
		ИндексОперации = 13;
	ИначеЕсли Команда.Имя = "СоздатьВыплатаПоВыданнымЗаймам" Тогда
		ИндексОперации = 14;
	КонецЕсли;
	
	СоздатьСписаниеБезналичныхДенежныхСредств(ИндексОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьДокумент(Команда)
	
	Если Элементы.ЗаказыКОплате.ВыделенныеСтроки.Количество() = 1 Тогда
	
		СтрокаТаблицы = Элементы.ЗаказыКОплате.ТекущиеДанные;
		Если СтрокаТаблицы <> Неопределено Тогда
			
			СтруктураОснование = Новый Структура("Организация, ЗаказПоставщику, СуммаКОплате",
			СтрокаТаблицы.Организация,
			СтрокаТаблицы.Ссылка,
			СтрокаТаблицы.СуммаКОплате
			);
			СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
			ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.ФормаОбъекта", 
			СтруктураПараметры, 
			Элементы.СписанияБезналичныхДенежныхСредств
			);
			
		КонецЕсли;
	
	Иначе
	
		МассивСсылок = Новый Массив();
		
		Для Каждого ЗаказКОплате Из Элементы.ЗаказыКОплате.ВыделенныеСтроки Цикл
		
			Если ТипЗнч(ЗаказКОплате) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			СсылкаНаДокумент = Элементы.ЗаказыКОплате.ДанныеСтроки(ЗаказКОплате).Ссылка;
			МассивСсылок.Добавить(СсылкаНаДокумент);
			ОрганизацияЗаполнения = Элементы.ЗаказыКОплате.ДанныеСтроки(ЗаказКОплате).Организация;
			
		КонецЦикла;
		
		Если МассивСсылок.Количество() = 0 Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
			Предупреждение(ТекстПредупреждения);
			Возврат;
			
		КонецЕсли;
		
		ОчиститьСообщения();

		Если СформироватьДанныеЗаполненияСписанияДСПоНесколькимДокументамНаСервере(МассивСсылок) Тогда
		
			СтруктураОснование = Новый Структура("Организация, ДокументОснование, СуммаКОплате",
			ОрганизацияЗаполнения,
			МассивСсылок,
			0,
			);
			СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
			
			ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.ФормаОбъекта", 
			СтруктураПараметры,
			Элементы.СписанияБезналичныхДенежныхСредств
			);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура БанковскийСчетОтборПриИзмененииСервер()
	
	Организация = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет).Организация;
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.СписаниеБезналичныхДенежныхСредств.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
			Элементы.СписанияБезналичныхДенежныхСредств.ТекущаяСтрока = Ссылка;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаСписанияБезналичныхДенежныхСредств;
		КонецЕсли;
		
		ОткрытьЗначение(Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ЗаполнитьСписокХозяйственныхОпераций()
	
	СписокХозяйственныхОпераций.Очистить();
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
	Если ИспользоватьНесколькоРасчетныхСчетов Тогда
		СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	КонецЕсли; 
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочиеРасходы);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаПоДепозитам);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаПоЗаймамВыданным);
	
	Элементы.ГруппаСоздать.ПодчиненныеЭлементы.СоздатьПеречислениеНаДругойСчет.Видимость = ИспользоватьНесколькоРасчетныхСчетов;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРабочиеЗначенияПолейФормы(СохранитьНеопределено = Ложь)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТекущаяОрганизация", 
	,
	?(СохранитьНеопределено, Неопределено, Организация)
	);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТекущийБанковскийСчет",
	,
	?(СохранитьНеопределено, Неопределено, БанковскийСчет)
	);
	
КонецПроцедуры

&НаСервере
Функция МассивДинамическихСписков()

	МассивСписков = Новый Массив;
	МассивСписков.Добавить(СписанияБезналичныхДенежныхСредств);
	МассивСписков.Добавить(ЗаявкиКОплате);
	МассивСписков.Добавить(ЗаказыКОплате);
	
	Возврат МассивСписков;

КонецФункции

&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	
	Если ЗначениеЗаполнено(Организация)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ОбособленноеПодразделение
		|	И Организации.ГоловнаяОрганизация = &Организация
		|	И (Организации.ДопускаютсяВзаиморасчетыСКлиентамиЧерезГоловнуюОрганизацию
		|			ИЛИ Организации.ДопускаютсяВзаиморасчетыСПоставщикамиЧерезГоловнуюОрганизацию)");
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СписокОрганизаций.Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(БанковскийСчет);
	СписокСчетов.Добавить(Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка());
	
	Для Каждого ДинамическийСписок Из МассивДинамическихСписков() Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДинамическийСписок.Отбор,
			"Организация",
			СписокОрганизаций,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			ЗначениеЗаполнено(Организация)
		);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДинамическийСписок.Отбор,
			"БанковскийСчет",
			СписокСчетов,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			ЗначениеЗаполнено(БанковскийСчет)
		);
	КонецЦикла;
	
	СохранитьРабочиеЗначенияПолейФормы();
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДинамическихСписков()
	
	ДатаОстатков = ?(ЗначениеЗаполнено(ДатаПлатежа.Дата), ДатаПлатежа.Дата, Дата(2299,1,1));
	Граница = Новый Граница(КонецДня(ДатаОстатков), ВидГраницы.Включая);
	ЗаявкиКОплате.Параметры.УстановитьЗначениеПараметра("ДатаПлатежа", Граница);
	ЗаказыКОплате.Параметры.УстановитьЗначениеПараметра("ДатаПлатежа", Граница);
	
	
	Элементы.ЗаявкиКОплате.Обновить();
	Элементы.ЗаказыКОплате.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДиначескиеСписки()
	
	Элементы.ЗаявкиКОплате.Обновить();
	Элементы.ЗаказыКОплате.Обновить();
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаЗаказыКОплате()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.ЗаказПоставщику КАК Ссылка,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Дата КАК Дата,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Номер КАК Номер,
	|	ТИПЗНАЧЕНИЯ(РасчетыСПоставщиками.ЗаказПоставщику) КАК Тип,
	|	РасчетыСПоставщиками.Валюта КАК Валюта,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РегистрАналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|	РегистрАналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Менеджер КАК Менеджер,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Приоритет КАК Приоритет,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Проведен КАК Проведен,
	|	ЕСТЬNULL(РасчетыСПоставщиками.ЗаказПоставщику.Статус, НЕОПРЕДЕЛЕНО) КАК Статус,
	|	РасчетыСПоставщиками.ЗаказПоставщику.СуммаДокумента КАК СуммаДокумента,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Валюта КАК ВалютаДокумента,
	|	РасчетыСПоставщиками.ЗаказПоставщику.ФормаОплаты КАК ФормаОплаты,
	|	ЕСТЬNULL(РасчетыСПоставщиками.ЗаказПоставщику.БанковскийСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)) КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщиками.ЗаказПоставщику.Приоритет = ЗНАЧЕНИЕ(Перечисление.Приоритеты.Высокий)
	|			ТОГДА 0
	|		КОГДА РасчетыСПоставщиками.ЗаказПоставщику.Приоритет = ЗНАЧЕНИЕ(Перечисление.Приоритеты.Средний)
	|			ТОГДА 1
	|		КОГДА РасчетыСПоставщиками.ЗаказПоставщику.Приоритет = ЗНАЧЕНИЕ(Перечисление.Приоритеты.Низкий)
	|			ТОГДА 2
	|	КОНЕЦ КАК КартинкаПриоритета,
	|	ИСТИНА КАК ТребуетсяОплата,
	|	-РасчетыСПоставщиками.КОплатеОстаток КАК СуммаКОплате
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&ДатаПлатежа, ЗаказПоставщику <> НЕОПРЕДЕЛЕНО) КАК РасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|ГДЕ
	|	РасчетыСПоставщиками.КОплатеОстаток < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	КартинкаПриоритета
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Управление элементами формы

&НаСервере
Процедура УстановитьВидимость()
	
	БанковскийСчетВидимость = Не ЗначениеЗаполнено(БанковскийСчет);
	Элементы.БанковскийСчет.Видимость = БанковскийСчетВидимость;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ЗаявкиКОплатеБанковскийСчет");
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивЭлементов,
		?(БанковскийСчетВидимость, МассивЭлементов, Новый Массив) // МассивВидимыхРеквизитов
	);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Элементы.БанковскийСчетОтбор.Видимость = ИспользоватьНесколькоРасчетныхСчетов;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Создание документов

&НаКлиенте
Процедура СоздатьСписаниеБезналичныхДенежныхСредств(ХозяйственнаяОперацияИндекс)

	ХозяйственнаяОперацияИндекс = ?(ХозяйственнаяОперацияИндекс > 1,?(ИспользоватьНесколькоРасчетныхСчетов, ХозяйственнаяОперацияИндекс, ХозяйственнаяОперацияИндекс-1), ХозяйственнаяОперацияИндекс);
	ХозяйственнаяОперация = СписокХозяйственныхОпераций[ХозяйственнаяОперацияИндекс].Значение;

	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", Новый Структура("ХозяйственнаяОперация", ХозяйственнаяОперация));
	ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.ФормаОбъекта", СтруктураПараметры, Элементы.СписанияБезналичныхДенежныхСредств);
	
КонецПроцедуры

&НаСервере
Функция СформироватьДанныеЗаполненияСписанияДСПоНесколькимДокументамНаСервере(МассивСсылок)

	Возврат ДенежныеСредстваСервер.СформироватьДанныеЗаполненияСписанияДСПоНесколькимДокументам(МассивСсылок)

КонецФункции
