
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекущийБанковскийСчет = Объект.БанковскийСчет;
		УправлениеЭлементамиФормы();
		ЗаполнитьОрганизациюПолучателя();
		Если Параметры.Свойство("Основание") Тогда
			Основание = Параметры.Основание;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтметкуНезаполненного(Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(Объект.БанковскийСчет).РазрешитьПлатежиБезУказанияЗаявок);
	
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПередачиМеждуОрганизациями(ЭтаФорма, Элементы.ХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийВнутреннейПередачи(ЭтаФорма, Элементы.ХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииПеречислениеТаможне(ЭтаФорма, Элементы.ХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(ЭтаФорма, Элементы.ХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииПрочиеРасходы(ЭтаФорма, Элементы.ХозяйственнаяОперация);
	
	Элементы.РасшифровкаПлатежаДоговорКредитаДепозита.ПараметрыВыбора = ПараметрыВыбораДоговоровКредитовДепозитов();
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
		
		Объект.БанковскийСчет	= ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию();
		СтруктураРеквизитов	= ПолучитьРеквизитыБанковскогоСчета(Объект.БанковскийСчет);
		Объект.Организация	= СтруктураРеквизитов.Организация;
		Объект.Валюта		= СтруктураРеквизитов.Валюта;
		
	КонецЕсли;
	
	УточнитьСписокХозяйственныхОпераций();
	
	ИспользоватьСинхронизациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
	
	ЗаписатьНомерИДатуЗаказа();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ФинансыКлиент.ПроверитьЗаполнениеДокументаНаОсновании(
		Объект,
		Основание
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		
		ПолучитьРасшифровкуПлатежаИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ТекущийБанковскийСчет = Объект.БанковскийСчет;
	УправлениеЭлементамиФормы();
	ЗаполнитьОрганизациюПолучателя();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям") Тогда
		ФинансыКлиент.ПересчитатьСуммуДокументаПоРасшифровкеПлатежа(Объект, "ВедомостиНаВыплатуЗарплаты");
	Иначе
		ФинансыКлиент.ПересчитатьСуммуДокументаПоРасшифровкеПлатежа(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_СписаниеБезналичныхДенежныхСредств", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ФинансыКлиент.ОчиститьСуммуВзаиморасчетовРасшифровкиПлатежа(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	СтруктураРеквизитов = ПолучитьРеквизитыБанковскогоСчета(Объект.БанковскийСчет);
	
	Если НЕ ФинансыКлиент.НеобходимПересчетВВалюту(Объект, Объект.Валюта, СтруктураРеквизитов.Валюта) Тогда
		
		БанковскийСчетПриИзмененииСервер(СтруктураРеквизитов, Ложь);
		ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		
	ИначеЕсли ФинансыКлиент.РазрешенПересчетВВалюту(СтруктураРеквизитов.Валюта) Тогда
		
		ТекущаяВалюта = Объект.Валюта;
		БанковскийСчетПриИзмененииСервер(СтруктураРеквизитов, Истина);
		ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ТекущаяВалюта, Объект.Валюта);
		
	Иначе
		
		Объект.БанковскийСчет = ТекущийБанковскийСчет;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетКонтрагентаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.НазначениеПлатежа) Тогда
		ВставитьНазначениеПлатежаИзБанковскогоСчетаКонтрагентаСервер();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КонвертацияВалюты") Тогда
		КурсКонвертацииПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодотчетноеЛицоПриИзменении(Элемент)
	
	ПодотчетноеЛицоПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРасходованиеДенежныхСредствПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
		ЗаявкаНаРасходованиеДенежныхСредствПриИзмененииСервер();
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаПодборПоОстаткам.Доступность = Не ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряжениеНаПеремещениеДенежныхСредствПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.РаспоряжениеНаПеремещениеДенежныхСредств) Тогда
		РаспоряжениеНаПеремещениеДенежныхСредствПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПолучательПриИзменении(Элемент)
	
	БанковскийСчетПолучательПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаКонвертацииПриИзменении(Элемент)
	
	ПересчитатьКурсКонвертации();
	
КонецПроцедуры

&НаКлиенте
Процедура КурсКонвертацииПриИзменении(Элемент)
	
	КурсКонвертацииПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПлатежногоДокументаПриИзменении(Элемент)
	
	Если Объект.ТипПлатежногоДокумента = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ИнкассовоеПоручение")
		ИЛИ Объект.ТипПлатежногоДокумента = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежныйОрдер")
		ИЛИ Объект.ТипПлатежногоДокумента = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.БанковскийОрдер") Тогда
		Объект.НеКонтролироватьЗаполнениеЗаявки = Истина;
	Иначе
		Объект.НеКонтролироватьЗаполнениеЗаявки = Ложь;
	КонецЕсли;
	
	Если Объект.ТипПлатежногоДокумента = ПредопределенноеЗначение("Перечисление.ТипыПлатежныхДокументов.ПлатежноеПоручение") Тогда
		Объект.ДатаВходящегоДокумента = Неопределено;
		Объект.НомерВходящегоДокумента = Неопределено;
		Элементы.ДатаВходящегоДокумента.Доступность = Ложь;
		Элементы.НомерВходящегоДокумента.Доступность = Ложь;
	Иначе
		Элементы.ДатаВходящегоДокумента.Доступность = Истина;
		Элементы.НомерВходящегоДокумента.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречислениеВБюджетПриИзменении(Элемент)
	
	ПеречислениеВБюджетПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПеречисленияВБюджетПриИзменении(Элемент)
	
	ВидПеречисленияВБюджетПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусСоставителяПриИзменении(Элемент)
	
	Если ПустаяСтрока(Объект.СтатусСоставителя) Тогда
		Объект.СтатусСоставителя = "01";
	КонецЕсли;
	
	Если Объект.СтатусСоставителя = "08" Тогда
		Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ИнойПлатеж");
		ВидПеречисленияВБюджетПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусСоставителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Список = Новый СписокЗначений;
	Список.Добавить("01", НСтр("ru='01 - налогоплательщик (плательщик сборов) - юридическое лицо'"));
	Список.Добавить("02", НСтр("ru='02 - налоговый агент'"));
	Список.Добавить("03", НСтр("ru='03 - организация федеральной почтовой связи'"));
	Список.Добавить("04", НСтр("ru='04 - налоговый орган'"));
	Список.Добавить("05", НСтр("ru='05 - территориальные органы Федеральной службы судебных приставов'"));
	Список.Добавить("06", НСтр("ru='06 - участник внешнеэкономической деятельности - юридическое лицо'"));
	Список.Добавить("07", НСтр("ru='07 - таможенный орган'"));
	Список.Добавить("08", НСтр("ru='08 - плательщик иных обязательных платежей'")); 
	Список.Добавить("09", НСтр("ru='09 - налогоплательщик (плательщик сборов) - ИП'"));
	Список.Добавить("10", НСтр("ru='10 - налогоплательщик (плательщик сборов) - нотариус, занимающегося частной практикой'")); 
	Список.Добавить("11", НСтр("ru='11 - налогоплательщик (плательщик сборов) - адвокат'")); 
	Список.Добавить("12", НСтр("ru='12 - налогоплательщик (плательщик сборов) - глава КФХ'")); 
	Список.Добавить("13", НСтр("ru='13 - налогоплательщик (плательщик сборов) - иное физическое лицо'")); 
	Список.Добавить("14", НСтр("ru='14 - налогоплательщик, производящий выплаты физическим лицам'")); 
	Список.Добавить("15", НСтр("ru='15 - кредитная организация - документ на общую сумму без открытия банковского счета физическому лицу'")); 		
	Список.Добавить("16", НСтр("ru='16 - участник внешнеэкономической деятельности - физическое лицо'")); 
	Список.Добавить("17", НСтр("ru='17 - участник внешнеэкономической деятельности - ИП'")); 
	Список.Добавить("18", НСтр("ru='18 - плательщик таможенных платежей, не являющийся декларантом'")); 
	Список.Добавить("19", НСтр("ru='19 - организации, оформившие перечисление средств, удержанных из заработка физического лица в счет погашения задолженности по таможенным платежам'")); 
	Список.Добавить("20", НСтр("ru='20 - кредитная организация - документ по каждому платежу физического лица без открытия банковского счета'")); 
	
	ЭлементСписка = ВыбратьИзМеню(Список, Элемент);
	Если ЭлементСписка <> Неопределено Тогда
		Объект.СтатусСоставителя = ЭлементСписка.Значение;
		СтатусСоставителяПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательОснованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОснованиеПлатежа = Новый СписокЗначений;
	
	// Налоговый платеж.
	Если Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж")
		ИЛИ Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ИнойПлатеж") Тогда
		ОснованиеПлатежа.Добавить("ТП", НСтр("ru='ТП - платежи текущего года'"));
		ОснованиеПлатежа.Добавить("ЗД", НСтр("ru='ЗД - добровольное погашение задолженности по истекшим налоговым периодам'"));
		ОснованиеПлатежа.Добавить("БФ", НСтр("ru='БФ - текущие платежи физических лиц – клиентов банка (владельцев счета), уплачиваемые со своего банковского счета'"));
		ОснованиеПлатежа.Добавить("ТР", НСтр("ru='ТР - погашение задолженности по требованию об уплате налогов (сборов) от налогового органа'"));
		ОснованиеПлатежа.Добавить("РС", НСтр("ru='РС - погашение рассроченной задолженности'"));
		ОснованиеПлатежа.Добавить("ОТ", НСтр("ru='ОТ - погашение отсроченной задолженности'"));
		ОснованиеПлатежа.Добавить("РТ", НСтр("ru='РТ - погашение реструктурируемой задолженности'"));
		ОснованиеПлатежа.Добавить("ВУ", НСтр("ru='ВУ - погашение отсроченной задолженности в связи с введением внешнего управления'"));
		ОснованиеПлатежа.Добавить("ПР", НСтр("ru='ПР - погашение задолженности, приостановленной к взысканию'"));
		ОснованиеПлатежа.Добавить("АП", НСтр("ru='АП - погашение задолженности по акту проверки'"));
		ОснованиеПлатежа.Добавить("АР", НСтр("ru='АР - погашение задолженности по исполнительному документу'"));
	КонецЕсли;
	
	// Таможенный платеж.	
	Если Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		ОснованиеПлатежа.Добавить("ДЕ", НСтр("ru='ДЕ - таможенная декларация'"));
		ОснованиеПлатежа.Добавить("ПО", НСтр("ru='ПО - таможенный приходный ордер'"));
		ОснованиеПлатежа.Добавить("КВ", НСтр("ru='КВ - постановление-квитанция (при уплате штрафа)'"));
		ОснованиеПлатежа.Добавить("КТ", НСтр("ru='КТ - форма корректировки таможенной стоимости и таможенных платежей'"));
		ОснованиеПлатежа.Добавить("ИД", НСтр("ru='ИД - исполнительный документ'"));
		ОснованиеПлатежа.Добавить("ИП", НСтр("ru='ИП - инкассовое поручение'"));
		ОснованиеПлатежа.Добавить("ТУ", НСтр("ru='ТУ - требование об уплате таможенных платежей'"));
		ОснованиеПлатежа.Добавить("БД", НСтр("ru='БД - документы бухгалтерских служб таможенных органов'"));
		ОснованиеПлатежа.Добавить("ИН", НСтр("ru='ИН - документ инкассации'"));
		ОснованиеПлатежа.Добавить("КП", НСтр("ru='КП - соглашение о взаимодействии при уплате крупными плательщиками суммарных платежей в централизованном порядке'"));
	КонецЕсли;
	
	ОснованиеПлатежа.Добавить("0", НСтр("ru='0 - невозможно указать конкретное значение показателя'"));
	
	ЭлементСписка = ВыбратьИзМеню(ОснованиеПлатежа, Элемент);
	Если ЭлементСписка <> Неопределено Тогда
		Объект.ПоказательОснования = ЭлементСписка.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтруктураПараметры = Новый Структура("ПоказательПериода, ПоказательОснования",
	Объект.ПоказательПериода,
	Объект.ПоказательОснования
	);
	Значение = ОткрытьФормуМодально("Документ.СписаниеБезналичныхДенежныхСредств.Форма.ФормаВводаПериода", СтруктураПараметры, Элемент);
	Если Значение <> Неопределено Тогда
		Объект.ПоказательПериода = Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательТипаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Список = Новый СписокЗначений;
	
	// Налоговый платеж.
	Если Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж")
		ИЛИ Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ИнойПлатеж") Тогда
		Список.Добавить("НС", НСтр("ru='НС - уплата налога или сбора'"));
		Список.Добавить("ПЛ", НСтр("ru='ПЛ - уплата платежа'"));
		Список.Добавить("ГП", НСтр("ru='ГП - уплата пошлины'"));
		Список.Добавить("ВЗ", НСтр("ru='ВЗ - уплата взноса'"));
		Список.Добавить("АВ", НСтр("ru='АВ - уплата аванса или предоплата (в том числе декадные платежи)'"));
		Список.Добавить("ПЕ", НСтр("ru='ПЕ - уплата пени'"));
		Список.Добавить("ПЦ", НСтр("ru='ПЦ - уплата процентов'"));
		Список.Добавить("СА", НСтр("ru='СА - налоговые санкции, установленные Налоговым кодексом РФ'"));
		Список.Добавить("АШ", НСтр("ru='АШ - административные штрафы'"));
		Список.Добавить("ИШ", НСтр("ru='ИШ - иные штрафы, установленные соответствующими нормативными актами'"));
	КонецЕсли;
	
	// Таможенный платеж.
	Если Объект.ВидПеречисленияВБюджет = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		Список.Добавить("ТП", НСтр("ru='ТП - текущий платеж'"));
		Список.Добавить("ШТ", НСтр("ru='ШТ - уплата штрафа'"));
		Список.Добавить("ЗД", НСтр("ru='ЗД - уплата в счет погашения задолженности'"));
		Список.Добавить("ПЕ", НСтр("ru='ПЕ - уплата пени'"));
	КонецЕсли;
	
	Список.Добавить("0", НСтр("ru='0 - невозможно указать конкретное значение показателя'"));
	
	ЭлементСписка = ВыбратьИзМеню(Список, Элемент);
	Если ЭлементСписка <> Неопределено Тогда
		Объект.ПоказательТипа = ЭлементСписка.Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить("Почтой");
	ДанныеВыбора.Добавить("Телеграфом");
	ДанныеВыбора.Добавить("Электронно");
	ДанныеВыбора.Добавить("Срочно");
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодВозникновенияРасходаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Объект.ПериодВозникновенияРасхода = ФинансыКлиент.ПериодВозникновенияРасхода(
	ЭтаФорма,
	Объект.Дата,
	Элемент,
	СтандартнаяОбработка
	);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ РАСШИФРОВКА ПЛАТЕЖА

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер);
	КонецЕсли;
	ФинансыКлиент.РасшифровкаПлатежаПриНачалеРедактирования(
	Объект,
	Партнер,
	ДоговорКонтрагента,
	СтрокаТаблицы,
	НоваяСтрока,
	Копирование
	);
	
	Если НоваяСтрока И Не Копирование Тогда
		
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочиеРасходы") Тогда
			Если Не ЗначениеЗаполнено(Подразделение) Тогда
				ПолучитьПодразделениеПоУмолчанию();
			КонецЕсли;
			СтрокаТаблицы.Подразделение = Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОплатаМеждуОрганизациями = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию");
	ВозвратМеждуОрганизациями = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию");
	Если ОплатаМеждуОрганизациями Или ВозвратМеждуОрганизациями	Тогда
		Партнер = ПредопределенноеЗначение("Справочник.Партнеры.НашеПредприятие");
		Контрагент = ОрганизацияПолучатель;
	Иначе
		Партнер = Неопределено;
		Контрагент = Объект.Контрагент;
	КонецЕсли;
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(
	Объект.Организация,
	Партнер,
	Контрагент,
	Неопределено, // Соглашение
	ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация) Или ВозвратМеждуОрганизациями,
	Ложь, // ВыборОснованияПлатежа
	Элемент,
	СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяРасходовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РасшифровкаПлатежаСтатьяРасходовПриИзмененииСервер(
	СтрокаТаблицы.СтатьяРасходов,
	СтрокаТаблицы.АналитикаРасходов
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПериодВозникновенияРасходаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.ПериодВозникновенияРасхода = ФинансыКлиент.ПериодВозникновенияРасхода(
	ЭтаФорма,
	Объект.Дата,
	Элемент,
	СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСервер(СтрокаТаблицы.ДоговорКредитаДепозита, СтрокаТаблицы.ВалютаВзаиморасчетов, СтрокаТаблицы.СтатьяДвиженияДенежныхСредств);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСервер(Договор, Валюта, СтатьяДДС)
	
	РеквизитыДоговора = Справочники.ДоговорыКредитовИДепозитов.РеквизитыДоговора(Договор);
	Валюта = РеквизитыДоговора.ВалютаВзаиморасчетов;
	Если РеквизитыДоговора.ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм Тогда
		СтатьяДДС = РеквизитыДоговора.СтатьяДДСОсновногоДолга;
	Иначе
		СтатьяДДС = РеквизитыДоговора.СтатьяДДСПоступленияВыдачи;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ "Ведомости на выплату зарплаты"

&НаКлиенте
Процедура ВедомостиНаВыплатуЗарплатыВедомостьПриИзменении(Элемент)
	
	ЗаполнитьСуммуПоТекущейВедомости();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВставитьНазначениеПлатежа(Команда)
	
	СписокДействий = Новый СписокЗначений;
	Для Каждого ЭлементыКонтекстногоМеню Из Элементы.НазначениеПлатежаКонтекстноеМенюГруппаВставить.ПодчиненныеЭлементы Цикл
		Если ЭлементыКонтекстногоМеню.Видимость Тогда
			СписокДействий.Добавить(ЭлементыКонтекстногоМеню.ИмяКоманды, ЭлементыКонтекстногоМеню.Заголовок);
		КонецЕсли; 
	КонецЦикла; 
	
	ВыбранноеДействие = ВыбратьИзМеню(СписокДействий, Элементы.ВставитьНазначениеПлатежа);
	Если ВыбранноеДействие <> Неопределено Тогда
		
		Выполнить ВыбранноеДействие.Значение + "Сервер(Элементы.НазначениеПлатежа.ВыделенныйТекст);";
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьНазначениеПлатежаСписокДокументов(Команда)
	
	ВставитьНазначениеПлатежаСписокДокументовСервер(Элементы.НазначениеПлатежа.ВыделенныйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьНазначениеПлатежаНДС18(Команда)
	
	ВставитьНазначениеПлатежаНДС18Сервер(Элементы.НазначениеПлатежа.ВыделенныйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьНазначениеПлатежаНДС10(Команда)
	
	ВставитьНазначениеПлатежаНДС10Сервер(Элементы.НазначениеПлатежа.ВыделенныйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьНазначениеПлатежаБезНДС(Команда)
	
	ВставитьНазначениеПлатежаБезНДССервер(Элементы.НазначениеПлатежа.ВыделенныйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьНазначениеПлатежаИзБанковскогоСчетаКонтрагента(Команда)
	
	ВставитьНазначениеПлатежаИзБанковскогоСчетаКонтрагентаСервер(Элементы.НазначениеПлатежа.ВыделенныйТекст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	ЭтоПеречислениеВДругуюОрганизацию =
	(Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию")
	Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию"));
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("БанковскийСчет", "Счет");
	Если ЭтоПеречислениеВДругуюОрганизацию Тогда
		СтруктураРеквизитов.Вставить("БанковскийСчетПолучатель", "Получатель");
	Иначе
		СтруктураРеквизитов.Вставить("Контрагент");
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтаФорма, Неопределено, СтруктураРеквизитов) Тогда
		
		АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
		ПараметрыПодбора = Новый Структура("
		|АдресПлатежейВХранилище, 
		|Организация, 
		|Контрагент,
		|Валюта,
		|СуммаДокумента,
		|ДатаДокумента,
		|ХозяйственнаяОперация",
		АдресПлатежейВХранилище,
		Объект.Организация,
		?(ЭтоПеречислениеВДругуюОрганизацию, ОрганизацияПолучатель, Объект.Контрагент),
		Объект.Валюта,
		Объект.СуммаДокумента,
		Объект.Дата,
		Объект.ХозяйственнаяОперация
		);
		ОткрытьФорму(
		"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
		ПараметрыПодбора,
		ЭтаФорма
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВедомостиНаВыплатуЗарплатыПоОстаткам(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтаФорма, Объект.ВедомостиНаВыплатуЗарплаты, Новый Структура("БанковскийСчет")) Тогда
		
		ЗаполнитьВедомостиПоОстаткамНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	УстановитьВидимость();
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчета(Объект, Элементы.БанковскийСчет);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, Элементы.БанковскийСчетКонтрагента);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаПолучателя(Объект, Элементы.БанковскийСчетПолучатель);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораЗаявки(Объект, Элементы.ЗаявкаНаРасходованиеДенежныхСредств);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаПлатежаПартнер);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		СчетСоответствуетВладельцу = Справочники.БанковскиеСчетаКонтрагентов.ПроверитьВладельцаБанковскогоСчета(
		Объект.БанковскийСчетКонтрагента,
		Объект.ПодотчетноеЛицо
		);
	Иначе
		СчетСоответствуетВладельцу = Справочники.БанковскиеСчетаКонтрагентов.ПроверитьВладельцаБанковскогоСчета(
		Объект.БанковскийСчетКонтрагента,
		Объект.Контрагент
		);
	КонецЕсли;
	
	Если Не СчетСоответствуетВладельцу Тогда
		Объект.БанковскийСчетКонтрагента = Неопределено;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		Объект.ПеречислениеВБюджет = Истина;
		ПеречислениеВБюджетПриИзмененииСервер();
	КонецЕсли;
	
	Объект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		И Не Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация) Тогда
		
		Объект.БанковскийСчетПолучатель = Неопределено;
		Если ТекущийБанковскийСчет <> Объект.БанковскийСчет Тогда
			
			СтруктураРеквизитов = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(Объект.БанковскийСчет);
			БанковскийСчетПриИзмененииСервер(СтруктураРеквизитов, Ложь);
			ТекущийБанковскийСчет = Объект.БанковскийСчет;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьДоговорПоУмолчаниюСервер();
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетПриИзмененииСервер(СтруктураРеквизитов, ПересчитыватьСуммы)
	
	ТекущийБанковскийСчет = Объект.БанковскийСчет;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Объект.Организация = СтруктураРеквизитов.Организация;
		Если Объект.ПеречислениеВБюджет ИЛИ Не ПустаяСтрока(Объект.КодОКАТО) Тогда
			Объект.КодОКАТО = Справочники.Организации.ПолучитьРеквизитыОрганизации(Объект.Организация).КодПоОКАТО;
		КонецЕсли;
		ПолучитьДоговорПоУмолчаниюСервер();
	КонецЕсли;
	
	ТекущаяВалюта = Объект.Валюта;
	Объект.Валюта = СтруктураРеквизитов.Валюта;
	
	Если ПересчитыватьСуммы Тогда
		ПересчетСуммДокументаВВалюту(ТекущаяВалюта);
	КонецЕсли;
	
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(Объект.Валюта, Элементы);
	
	Объект.АвансовыйОтчет                      = Документы.АвансовыйОтчет.ПустаяСсылка();
	Объект.ЗаявкаНаРасходованиеДенежныхСредств = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка();
	Объект.БанковскийСчетКонтрагента           = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	Объект.БанковскийСчетПолучатель            = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
	
	УстановитьОтметкуНезаполненного(СтруктураРеквизитов.РазрешитьПлатежиБезУказанияЗаявок);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		ПересчитатьКурсКонвертации();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетПолучательПриИзмененииСервер()
	
	ЗаполнитьОрганизациюПолучателя();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		
		СтруктураРеквизитов = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(Объект.БанковскийСчетПолучатель);
		Если ЗначениеЗаполнено(СтруктураРеквизитов.Валюта) Тогда
			Объект.ВалютаКонвертации = СтруктураРеквизитов.Валюта;
			ПересчитатьКурсКонвертации();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент);
		ПолучитьДоговорПоУмолчаниюСервер();
		Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			Объект.Контрагент,
			Объект.Валюта
			);
		КонецЕсли;
		ВставитьНазначениеПлатежаИзБанковскогоСчетаКонтрагентаСервер();
		
		Элементы.РасшифровкаПлатежаДоговорКредитаДепозита.ПараметрыВыбора = ПараметрыВыбораДоговоровКредитовДепозитов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодотчетноеЛицоПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.ПодотчетноеЛицо) Тогда
		
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			Объект.ПодотчетноеЛицо,
			Объект.Валюта
			);
		КонецЕсли;
		Объект.Подразделение = Справочники.ФизическиеЛица.ПодразделениеФизическогоЛица(Объект.ПодотчетноеЛицо);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРасходованиеДенежныхСредствПриИзмененииСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
//	ДокументОбъект.Заполнить(Объект.ЗаявкаНаРасходованиеДенежныхСредств);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура РаспоряжениеНаПеремещениеДенежныхСредствПриИзмененииСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.РаспоряжениеНаПеремещениеДенежныхСредств);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ПеречислениеВБюджетПриИзмененииСервер()
	
	Если Объект.ПеречислениеВБюджет Тогда
		Если Не ЗначениеЗаполнено(Объект.ВидПеречисленияВБюджет) Тогда
			Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		КонецЕсли;
		Если ПустаяСтрока(Объект.КодОКАТО) Тогда
			Объект.КодОКАТО = Справочники.Организации.ПолучитьРеквизитыОрганизации(Объект.Организация).КодПоОКАТО;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеПоказателямиПлатежаВБюджет();
	
КонецПроцедуры

&НаСервере
Процедура ВидПеречисленияВБюджетПриИзмененииСервер()
	
	Если Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		Объект.СтатусСоставителя = "01";
		Объект.ПоказательОснования = "";
		Объект.ПоказательПериода = "";
		Объект.ПоказательТипа = "";
		
	ИначеЕсли Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		Объект.СтатусСоставителя = "06";
		Объект.ПоказательОснования = "";
		Объект.ПоказательПериода = "";
		Объект.ПоказательТипа = "";
		
	ИначеЕсли Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж Тогда
		Объект.СтатусСоставителя = "08";
		Объект.ПоказательОснования = "0";
		Объект.ПоказательПериода = "0";
		Объект.ПоказательНомера = "0";
		Объект.ПоказательДаты = "0";
		Объект.ПоказательТипа = "0";
		
	КонецЕсли;
	
	УправлениеПоказателямиПлатежаВБюджет();
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКурсКонвертации()
	
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаПолучателя(Объект, Элементы.БанковскийСчетПолучатель);
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КурсКонвертации = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
	Объект.Валюта,
	Объект.ВалютаКонвертации,
	Объект.Дата
	);
	Если КурсКонвертации <> 0 Тогда
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.КурсКонвертации = КурсКонвертации;
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента * Объект.КурсКонвертации;
		Иначе
			Объект.КурсКонвертации = 1 / КурсКонвертации;
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента / Объект.КурсКонвертации;
		КонецЕсли;
	Иначе
		Объект.КурсКонвертации = 0;
		Объект.СуммаПослеКонвертации = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КурсКонвертацииПриИзмененииСервер()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если Объект.КурсКонвертации <> 0 Тогда
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента * Объект.КурсКонвертации;
		Иначе
			Объект.СуммаПослеКонвертации = Объект.СуммаДокумента / Объект.КурсКонвертации;
		КонецЕсли;
	Иначе
		Объект.СуммаПослеКонвертации = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаСтатьяРасходовПриИзмененииСервер(СтатьяРасходов, АналитикаРасходов);
	
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, СтатьяРасходов, АналитикаРасходов);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Управление элементами формы

&НаСервере
Процедура УстановитьВидимость()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.СписаниеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
	Объект.ХозяйственнаяОперация,
	Неопределено, // ПеречислениеВБюджет
	МассивВсехРеквизитов, 
	МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
	Элементы,
	МассивВсехРеквизитов,
	МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.УстановитьВидимостьПодбораПоОстаткамРасчетов(
	Объект.ХозяйственнаяОперация,
	Элементы.РасшифровкаПлатежаПодборПоОстаткам
	);
	Элементы.НазначениеПлатежаКонтекстноеМенюВставитьНазначениеПлатежаСписокДокументов.Видимость = Элементы.РасшифровкаПлатежаЗаказ.Видимость;
	Элементы.НазначениеПлатежаКонтекстноеМенюВставитьНазначениеПлатежаИзБанковскогоСчетаКонтрагента.Видимость = Элементы.БанковскийСчетКонтрагента.Видимость;
	
	УправлениеПоказателямиПлатежаВБюджет();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
		Элементы.ВедомостиНаВыплатуЗарплаты.Видимость          = Элементы.ВедомостиНаВыплатуЗарплаты.Видимость И ИспользоватьНачислениеЗарплаты;
		Элементы.ЗаявкаНаРасходованиеДенежныхСредств.Видимость = Элементы.ЗаявкаНаРасходованиеДенежныхСредств.Видимость И Не ИспользоватьНачислениеЗарплаты;
		Элементы.НомерВедомостиНаВыплатуЗарплаты.Видимость     = Элементы.НомерВедомостиНаВыплатуЗарплаты.Видимость И Не ИспользоватьНачислениеЗарплаты;
		Элементы.ДатаВедомостиНаВыплатуЗарплаты.Видимость      = Элементы.ДатаВедомостиНаВыплатуЗарплаты.Видимость И Не ИспользоватьНачислениеЗарплаты;
		Элементы.СтатьяРасходов.Видимость                      = Элементы.СтатьяРасходов.Видимость И Не ИспользоватьНачислениеЗарплаты;
		Элементы.АналитикаРасходов.Видимость                   = Элементы.АналитикаРасходов.Видимость И Не ИспользоватьНачислениеЗарплаты;
		Элементы.ПериодВозникновенияРасхода.Видимость          = Элементы.ПериодВозникновенияРасхода.Видимость И Не ИспользоватьНачислениеЗарплаты;
		Элементы.ДекорацияВедомостьНаВыплатуЗарплаты.Видимость = Элементы.НомерВедомостиНаВыплатуЗарплаты.Видимость;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
			Элементы.НомерВедомостиНаВыплатуЗарплаты.АвтоОтметкаНезаполненного = Ложь;
			Элементы.НомерВедомостиНаВыплатуЗарплаты.ОтметкаНезаполненного = Ложь;
			Элементы.ДатаВедомостиНаВыплатуЗарплаты.АвтоОтметкаНезаполненного = Ложь;
			Элементы.ДатаВедомостиНаВыплатуЗарплаты.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуНезаполненного(РазрешеныПлатежиБезУказанияЗаявок)
	
	Если РазрешеныПлатежиБезУказанияЗаявок ИЛИ Объект.НеКонтролироватьЗаполнениеЗаявки Тогда
		Элементы.ЗаявкаНаРасходованиеДенежныхСредств.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ЗаявкаНаРасходованиеДенежныхСредств.ОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.ЗаявкаНаРасходованиеДенежныхСредств.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	УстановитьВидимость();
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, Элементы.БанковскийСчетКонтрагента);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчетаПолучателя(Объект, Элементы.БанковскийСчетПолучатель);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораЗаявки(Объект, Элементы.ЗаявкаНаРасходованиеДенежныхСредств);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчета(Объект, Элементы.БанковскийСчет);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаПлатежаПартнер);
	ДенежныеСредстваСервер.УстановитьДоступностьПодбораПоОстаткам(Объект, Элементы.РасшифровкаПлатежаПодборПоОстаткам);
	
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(
	Объект.Валюта,
	Элементы
	);
	
	ЭтоПлатежноеПоручение = (Объект.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
	Элементы.ДатаВходящегоДокумента.Доступность = Не ЭтоПлатежноеПоручение;
	Элементы.НомерВходящегоДокумента.Доступность = Не ЭтоПлатежноеПоручение;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеПоказателямиПлатежаВБюджет()
	
	МассивОпераций = Документы.СписаниеБезналичныхДенежныхСредств.МассивОперацийПеречисленияВБюджет();
	
	Если Объект.ПеречислениеВБюджет
		И МассивОпераций.Найти(Объект.ХозяйственнаяОперация) <> Неопределено Тогда
		
		Элементы.ВидПеречисленияВБюджет.Доступность = Истина;
		Элементы.КодБК.Доступность = Истина;
		Элементы.КодОКАТО.Доступность = Истина;
		
		Если Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказательПериода", "Видимость", Истина);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КодТаможенногоОргана", "Видимость", Ложь);
			
			Элементы.СтатусСоставителя.Доступность = Истина;
			Элементы.ПоказательОснования.Доступность = Истина;
			Элементы.ПоказательПериода.Доступность = Истина;
			Элементы.ПоказательНомера.Доступность = Истина;
			Элементы.ПоказательДаты.Доступность = Истина;
			Элементы.ПоказательТипа.Доступность = Истина;
			
		ИначеЕсли Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказательПериода", "Видимость", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КодТаможенногоОргана", "Видимость", Истина);
			
			Элементы.СтатусСоставителя.Доступность = Истина;
			Элементы.ПоказательОснования.Доступность = Истина;
			Элементы.ПоказательНомера.Доступность = Истина;
			Элементы.ПоказательДаты.Доступность = Истина;
			Элементы.ПоказательТипа.Доступность = Истина;
			
		ИначеЕсли Объект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж Тогда
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказательПериода", "Видимость", Истина);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КодТаможенногоОргана", "Видимость", Ложь);
			
			Элементы.СтатусСоставителя.Доступность = Ложь;
			Элементы.ПоказательОснования.Доступность = Истина;
			Элементы.ПоказательПериода.Доступность = Ложь;
			Элементы.ПоказательНомера.Доступность = Ложь;
			Элементы.ПоказательДаты.Доступность = Ложь;
			Элементы.ПоказательТипа.Доступность = Истина;
			
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПоказательПериода", "Видимость", Истина);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КодТаможенногоОргана", "Видимость", Ложь);
			
			Элементы.СтатусСоставителя.Доступность = Ложь;
			Элементы.ПоказательОснования.Доступность = Ложь;
			Элементы.ПоказательПериода.Доступность = Ложь;
			Элементы.ПоказательНомера.Доступность = Ложь;
			Элементы.ПоказательДаты.Доступность = Ложь;
			Элементы.ПоказательТипа.Доступность = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КодТаможенногоОргана", "Видимость", Ложь);
		
		Элементы.ВидПеречисленияВБюджет.Доступность = Ложь;
		Элементы.КодБК.Доступность = Ложь;
		Элементы.КодОКАТО.Доступность = Ложь;
		Элементы.СтатусСоставителя.Доступность = Ложь;
		Элементы.ПоказательОснования.Доступность = Ложь;
		Элементы.ПоказательПериода.Доступность = Ложь;
		Элементы.ПоказательНомера.Доступность = Ложь;
		Элементы.ПоказательДаты.Доступность = Ложь;
		Элементы.ПоказательТипа.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УточнитьСписокХозяйственныхОпераций()
	
	ИспользоватьНесколькоРасчетныхСчетов	= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов");
	
	Если Не ИспользоватьНесколькоРасчетныхСчетов Тогда
		
		СписокВыбораХозяйственныхОпераций = Элементы.ХозяйственнаяОперация.СписокВыбора;	
		НайденныйЭлемент = СписокВыбораХозяйственныхОпераций.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
		Если НайденныйЭлемент <> Неопределено Тогда
			СписокВыбораХозяйственныхОпераций.Удалить(НайденныйЭлемент);
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция ПараметрыВыбораДоговоровКредитовДепозитов()
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ФормаОплаты", Перечисления.ФормыОплаты.Безналичная));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХарактерДоговора", Справочники.ДоговорыКредитовИДепозитов.ХарактерДоговораПоОперации(Объект.ХозяйственнаяОперация)));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления",Ложь));
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(МассивПараметров);
	
КонецФункции

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище()
	
	АдресПлатежейВХранилище = ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(
	Объект.РасшифровкаПлатежа,
	УникальныйИдентификатор
	);	
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаИзХранилища(АдресПлатежейВХранилище)
	
	Объект.РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОрганизациюПолучателя()
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию")
		Тогда
		
		СтруктураРеквизитов = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(Объект.БанковскийСчетПолучатель);
		Если ЗначениеЗаполнено(СтруктураРеквизитов.Организация) Тогда
			ОрганизацияПолучатель = СтруктураРеквизитов.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьПодразделениеПоУмолчанию()
	
	Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Пользователи.ТекущийПользователь());
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДоговорПоУмолчаниюСервер()
	
	ХозяйственнаяОперацияДоговора = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	КонецЕсли;
	ДоговорКонтрагента = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
	ДоговорКонтрагента,
	Партнер,
	Объект.Контрагент,
	Объект.Организация,
	ХозяйственнаяОперацияДоговора,
	, // ВалютаВзаиморасчетов
	, // Соглашение
	Истина // ПорядокРасчетовПоДоговорам			
	);
	
	ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(ДоговорКонтрагента, , Объект.БанковскийСчетКонтрагента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьПартнераПоУмолчаниюСервер(Контрагент, Партнер)
	
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура ВставитьНазначениеПлатежаСписокДокументовСервер(ВыделенныйТекст)
	
	ТекстНазначенияПлатежа = ДенежныеСредстваСервер.ПолучитьТекстНазначенияПлатежа(Объект, "СписокДокументов");
	
	ВыделенныйТекст = " " + ТекстНазначенияПлатежа;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьНазначениеПлатежаНДС18Сервер(ВыделенныйТекст)
	
	ТекстНазначенияПлатежа = ДенежныеСредстваСервер.ПолучитьТекстНазначенияПлатежа(Объект, "НДС18");
	
	ВыделенныйТекст = " " + ТекстНазначенияПлатежа;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьНазначениеПлатежаНДС10Сервер(ВыделенныйТекст)
	
	ТекстНазначенияПлатежа = ДенежныеСредстваСервер.ПолучитьТекстНазначенияПлатежа(Объект, "НДС10");
	
	ВыделенныйТекст = " " + ТекстНазначенияПлатежа;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьНазначениеПлатежаБезНДССервер(ВыделенныйТекст)
	
	ТекстНазначенияПлатежа = ДенежныеСредстваСервер.ПолучитьТекстНазначенияПлатежа(Объект, "БезНДС");
	
	ВыделенныйТекст = " " + ТекстНазначенияПлатежа;
	
КонецПроцедуры

&НаСервере
Процедура ВставитьНазначениеПлатежаИзБанковскогоСчетаКонтрагентаСервер(ВыделенныйТекст = Неопределено)
	
	ТекстНазначенияПлатежа = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(Объект.БанковскийСчетКонтрагента).ТекстНазначения;
	
	Если ВыделенныйТекст <> Неопределено Тогда
		ВыделенныйТекст = " " + ТекстНазначенияПлатежа;
	ИначеЕсли ЗначениеЗаполнено(Объект.НазначениеПлатежа) Тогда
		Объект.НазначениеПлатежа = Объект.НазначениеПлатежа + "
		|" + ТекстНазначенияПлатежа;
	Иначе
		Объект.НазначениеПлатежа = ТекстНазначенияПлатежа;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВедомостиПоОстаткамНаСервере()
	
	Если Не Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
		ВызватьИсключение НСтр("ru='Не используется начисление зарплаты'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет)
	
	Возврат Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
	
КонецФункции

&НаСервере
Процедура ПересчетСуммДокументаВВалюту(ТекущаяВалюта)
	
	ДенежныеСредстваСервер.ПересчетСуммДокументаВВалюту(
	Объект,
	ТекущаяВалюта,
	Объект.Валюта
	);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммуПоТекущейВедомости()
	
	Если Не Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
		ВызватьИсключение НСтр("ru='Не используется начисление зарплаты'");
	КонецЕсли;
	
КонецПроцедуры

//&НаКлиенте
//Процедура РасшифровкаПлатежаЗаказПриИзменении(Элемент)
//	
//	
//	// При изменении поя ТБ ОБъект расчетов 
//	а=1;
//	
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура РасшифровкаПлатежаПриИзменении(Элемент)
//	// Вставить содержимое обработчика.
//	а=1;

//КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ЗаписатьНомерИДатуЗаказа(); 
	
КонецПроцедуры

// Процедура записи "номера счета" и "даты счета" заказа поставщика в поле " назначение платежа"	 
&НаСервере
Процедура  ЗаписатьНомерИДатуЗаказа()     
	
	СтрокаВФорму="";
	объект.НазначениеПлатежа="";	   
	ТабличнаяЧастьФормы = Объект.РасшифровкаПлатежа.Выгрузить();		
	Для Каждого СтрокаТБ ИЗ  ТабличнаяЧастьФормы Цикл	
		//{ ООО "АСТЭК" по заказу ООО "ПаксМед". Разработчик: Бурыкин Александр Дата: 06.02.2014
		Если ЗначениеЗаполнено(СтрокаТБ.Заказ) Тогда
		//} 
			СсылкаНаЗаказ = СтрокаТБ.Заказ.получитьОбъект() ;
			Если ТИПЗНЧ(СтрокаТБ.Заказ) <> ТИП("ДокументСсылка.ЗаказПоставщику") Тогда
			Иначе	
				НомерДляЗаписи = "";
				ДатаДляЗаписи = '00010101';
				
				НомерДляЗаписи = СсылкаНаЗаказ.НомерПоДаннымПоставщика;
				ДатаДляЗаписи  = СсылкаНаЗаказ.ДатаПоДаннымПоставщика;
				ДатаДляЗаписи = Формат(ДатаДляЗаписи, "ДФ=""дд ММММ гггг  'г.'""");
				
				//Если СокрЛП(НомерДляЗаписи) = ""  ИЛИ  ДатаДляЗаписи = "" Тогда    //ИЛИ  ДатаДляЗаписи = '00010101'
				//	ТекстОшибки = "ОШИБКА: Не заполнены номер или дата счета поставщика!";
				//	ВызватьИсключение ТекстОшибки;
				//Иначе
				
				Строка1 = "Оплата по счету № " + НомерДляЗаписи + " от " + ДатаДляЗаписи + "  ";
				Остаток = СсылкаНаЗаказ.СуммаДокумента -(СсылкаНаЗаказ.СуммаДокумента)  ;
				
				Если Остаток=0 тогда
					Строка2 = "сумма " +Строка(СсылкаНаЗаказ.СуммаДокумента)+ " руб, ";
				Иначе
					Остаток = Остаток*100;
					Строка2 = "сумма " +Строка(СсылкаНаЗаказ.СуммаДокумента)+ " руб, " + Строка(Остаток) +"коп,  " ;
					
				КонецЕсли;	
				
				ЗапросНДС = новый Запрос;
				ЗапросНДС.Текст = "ВЫБРАТЬ
				|	ЗаказПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
				|	ЗаказПоставщикуТовары.СуммаНДС КАК СуммаНДС
				|ИЗ
				|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
				|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
				|		ПО ЗаказПоставщикуТовары.Ссылка = ЗаказПоставщику.Ссылка
				|ГДЕ
				|	ЗаказПоставщику.Товары.Ссылка.Ссылка = &СсылкаНАЗаказ
				|
				|УПОРЯДОЧИТЬ ПО
				|	СтавкаНДС
				|";
				ЗапросНДС.УстановитьПараметр("СсылкаНАЗаказ",СтрокаТБ.Заказ);
				
				Результат = ЗапросНДС.Выполнить().Выгрузить(); 
				Результат.Свернуть("СтавкаНДС","СуммаНДС");
				Строка3 ="";
				Для каждого строкаРезультата ИЗ Результат Цикл			
					СуммаНДС = строкаРезультата.СуммаНДС;
					ЦелЧастьСуммаНДС = Цел(СуммаНДС);
					ОстатокСуммаНДС = СуммаНДС - Цел(СуммаНДС);
					СтавкаНДС = строкаРезультата.СтавкаНДС;
					
					Если  (СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС И СуммаНДС <> 0) И (СуммаНДС <> 0)  Тогда
						Если ОстатокСуммаНДС = 0 Тогда
							Строка3 = Строка3 + Строка(СтавкаНДС) +" "+ Строка(ЦелЧастьСуммаНДС)+" руб ";
						Иначе
							ОстатокСуммаНДС = ОстатокСуммаНДС*100;
							Строка3 = Строка3 + Строка(СтавкаНДС) +" "+ Строка(ЦелЧастьСуммаНДС)+" руб " +Строка(ОстатокСуммаНДС) +" коп, ";
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				
				Если строка3 <> "" Тогда
					СтрокаВФорму = СтрокаВФорму + Строка1 + Строка2 + "в т.ч. НДС " + Строка3;
				Иначе
					СтрокаВФорму = СтрокаВФорму + Строка1 + Строка2 + "без НДС  ";
				КонецЕсли; 
				ИндексПоследнегоЗнака = СтрДлина(СтрокаВФорму);
				
				СтрокаВФорму=  Лев(СтрокаВФорму, ИндексПоследнегоЗнака-2);
				СтрокаВФорму = СтрокаВФорму + ".  ";
				объект.НазначениеПлатежа = СтрокаВФорму;		
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЦикла;		  
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	ЗаписатьНомерИДатуЗаказа();
КонецПроцедуры










