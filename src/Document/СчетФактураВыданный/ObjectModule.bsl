#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Перем РеквизитыСчетаФактурыОснования;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Исправление") И ДанныеЗаполнения.Исправление Тогда
			ЗаполнитьСчетФактуруОснование(ДанныеЗаполнения);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Корректировочный") И ДанныеЗаполнения.Корректировочный Тогда
			ЗаполнитьИсходныйДокумент(ДанныеЗаполнения);
		КонецЕсли;
		
		Если НЕ ДанныеЗаполнения.Свойство("Валюта") Тогда
			ДанныеЗаполнения.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
			
			Если ДанныеЗаполнения.Свойство("Организация") Тогда
				
				Документы.СчетФактураВыданный.ЗаполнитьПлатежноРасчетныеДокументы(
					ПлатежноРасчетныеДокументы,
					ДанныеЗаполнения.ДокументОснование,
					ДанныеЗаполнения.Организация
				);
				СформироватьСтрокуРасчетноПлатежныхДокументов();
				
				Документы.СчетФактураВыданный.СчетаФактурыПоОснованию(
					ДанныеЗаполнения.ДокументОснование,
					ДанныеЗаполнения.Организация,
					РеквизитыСчетаФактурыОснования
				);
				
				Если РеквизитыСчетаФактурыОснования.Ссылка <> Неопределено Тогда
					ДанныеЗаполнения.Вставить("Корректировочный",                   РеквизитыСчетаФактурыОснования.Корректировочный);
					ДанныеЗаполнения.Вставить("НомерИсходногоДокумента",            РеквизитыСчетаФактурыОснования.НомерИсходногоДокумента);
					ДанныеЗаполнения.Вставить("ДатаИсходногоДокумента",             РеквизитыСчетаФактурыОснования.ДатаИсходногоДокумента);
					ДанныеЗаполнения.Вставить("НомерИсправленияИсходногоДокумента", РеквизитыСчетаФактурыОснования.НомерИсправленияИсходногоДокумента);
					ДанныеЗаполнения.Вставить("ДатаИсправленияИсходногоДокумента",  РеквизитыСчетаФактурыОснования.ДатаИсправленияИсходногоДокумента);
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ДанныеЗаполнения.Свойство("КодВидаОперации") Тогда
				ДанныеЗаполнения.Вставить("КодВидаОперации", КодВидаОперации(ДанныеЗаполнения.ДокументОснование));
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ДанныеЗаполнения.Свойство("ДатаВыставления") Тогда
			ДанныеЗаполнения.Вставить("ДатаВыставления", ТекущаяДатаСеанса());
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	// Проверим время документа относительно времени документа-основания
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ДатаДокументаОснования = ДокументОснование.Дата;
		Если НачалоДня(Дата) = НачалоДня(ДатаДокументаОснования)
			ИЛИ НЕ ЗначениеЗаполнено(Дата) Тогда
		 	
			Дата = ?(ДатаДокументаОснования = КонецДня(ДатаДокументаОснования),
					 ДатаДокументаОснования,
					 ДатаДокументаОснования + 1
					 );
			
		КонецЕсли; 
	КонецЕсли; 
	
	Если Не ПометкаУдаления Тогда
		ПроверитьДублиСчетФактуры(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.СчетФактураВыданный.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ДоходыИРасходыСервер.ОтразитьЖурналУчетаСчетовФактур(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПокупок(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПродаж(ДополнительныеСвойства, Движения, Отказ);
			
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ Исправление Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетФактураОснование");
	КонецЕсли;
	
	Если Дата < Константы.ДатаНачалаПримененияПостановления1137.Получить() Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Валюта");
		МассивНепроверяемыхРеквизитов.Добавить("КодВидаОперации");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Если Исправление Тогда
		
		// Установка номера по исходному документу.
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	&Основание КАК Ссылка
		|ПОМЕСТИТЬ ОснованияИсправлений
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КорректировкаРеализации.ДокументОснование КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	(КорректировкаРеализации.Ссылка = &Основание
		|	ИЛИ КорректировкаРеализации.ДокументОснование = &Основание)
		|	И НЕ КорректировкаРеализации.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КорректировкаРеализации.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаРеализации КАК ТекущийДокумент
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|	ПО КорректировкаРеализации.ДокументОснование = ТекущийДокумент.ДокументОснование
		|ГДЕ
		|	ТекущийДокумент.Ссылка = &Основание
		|	И КорректировкаРеализации.Ссылка <> &Основание
		|	И НЕ КорректировкаРеализации.ПометкаУдаления
		|;
		|/////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсходныеДокументы.Номер КАК Номер,
		|	ЕСТЬNULL(Исправления.НомерИсправления, 0) КАК НомерИсправления
		|ИЗ
		|	Документ.СчетФактураВыданный КАК ИсходныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОснованияИсправлений КАК ОснованияИсправлений
		|		ПО ИСТИНА
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК Исправления
		|		ПО Исправления.ДокументОснование = ОснованияИсправлений.Ссылка
		|			И Исправления.Номер = ИсходныеДокументы.Номер
		|			И Исправления.Исправление
		|			И НЕ Исправления.ПометкаУдаления
		|ГДЕ
		|	ИсходныеДокументы.Ссылка = &СчетФактураОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерИсправления УБЫВ");
		Запрос.УстановитьПараметр("Основание", ДокументОснование);
		Запрос.УстановитьПараметр("СчетФактураОснование", СчетФактураОснование);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			СтандартнаяОбработка = Ложь;
			
			// Установка номера и переопределение префикса информационной базы.
			
			ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(ЭтотОбъект, СтандартнаяОбработка, Префикс);
			
			НомерБезПрефикса = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(Выборка.Номер, Истина, Истина);
			Номер = Префикс + НомерБезПрефикса;
			
			НомерИсправления = Формат(Число(Выборка.НомерИсправления)+1, "ЧЦ=10; ЧДЦ=0; ЧГ=0");
			
		КонецЕсли;
		
	Иначе
		
		Префикс = "0";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Валюта = ДоходыИРасходыСервер.ПолучитьВалютуРегламентированногоУчета(Валюта);
	
КонецПроцедуры

Процедура ЗаполнитьСчетФактуруОснование(ДанныеЗаполнения)
	
	РеквизитыСчетаФактуры = Документы.СчетФактураВыданный.ИсправляемыйСчетФактураПоОснованию(ЭтотОбъект.Ссылка, ДанныеЗаполнения.ДокументОснование, ДанныеЗаполнения.Организация);
	Если ЗначениеЗаполнено(РеквизитыСчетаФактуры.Ссылка) Тогда
		ДанныеЗаполнения.Вставить("СчетФактураОснование", РеквизитыСчетаФактуры.Ссылка);
	Иначе
		ДанныеЗаполнения.Исправление = Ложь;
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыСчетаФактуры.Валюта) Тогда
		ДанныеЗаполнения.Вставить("Валюта", РеквизитыСчетаФактуры.Валюта);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыСчетаФактуры.КодВидаОперации) Тогда
		ДанныеЗаполнения.Вставить("КодВидаОперации", РеквизитыСчетаФактуры.КодВидаОперации);
	КонецЕсли;
	
	Если РеквизитыСчетаФактуры.Корректировочный = Истина Тогда
		ДанныеЗаполнения.Вставить("Корректировочный", РеквизитыСчетаФактуры.Корректировочный);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсходныйДокумент(ДанныеЗаполнения)
	
	ДанныеИсходногоДокумента = Документы.СчетФактураВыданный.ДанныеИсходногоДокумента(ДанныеЗаполнения.ДокументОснование);
	Если ЗначениеЗаполнено(ДанныеИсходногоДокумента.ИсходныйДокумент) Тогда
		Для Каждого КлючЗначение Из ДанныеИсходногоДокумента Цикл
			ДанныеЗаполнения.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	Иначе
		ДанныеЗаполнения.Корректировочный = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция КодВидаОперации(Основание = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Основание = ДокументОснование;
	КонецЕсли;
	
	КодВидаОперации = "";
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.АктВыполненныхРабот")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомитенту")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		КодВидаОперации = "01";
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
	 ИЛИ ТипЗнч(Основание)		= Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		КодВидаОперации = "03";
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ОтчетКомиссионера")
	 ИЛИ ТипЗнч(Основание)		= Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
		КодВидаОперации = "04";
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
	 ИЛИ ТипЗнч(Основание)		= Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		КодВидаОперации = КодВидаОперацииРеализацииТоваров(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		КодВидаОперации = КодВидаОперацииРеализацииТоваров(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ДокументОснование")
		);
		
	КонецЕсли;
	
	Возврат КодВидаОперации;
	
КонецФункции

Функция КодВидаОперацииРеализацииТоваров(РеализацияТоваров)
	
	ЕстьКомиссионныйТовар = Ложь;
	ЕстьСобственныйТовар = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Основание КАК Ссылка
	|ПОМЕСТИТЬ ДокументыПродажи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.ДокументОснование = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрганизаций.Номенклатура,
	|	ТоварыОрганизаций.Характеристика,
	|	ТоварыОрганизаций.Склад,
	|	ТоварыОрганизаций.Организация,
	|	ТоварыОрганизаций.ВидЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	ТоварыОрганизаций.НомерГТД,
	|
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ТоварыОрганизаций.Количество
	|			ИНАЧЕ -ТоварыОрганизаций.Количество
	|		КОНЕЦ) КАК Количество
	|
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыПродажи КАК ДокументыПродажи
	|		ПО ТоварыОрганизаций.Регистратор = ДокументыПродажи.Ссылка
	|ГДЕ
	|	ТоварыОрганизаций.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыОрганизаций.ВидЗапасов.ТипЗапасов,
	|	ТоварыОрганизаций.Номенклатура,
	|	ТоварыОрганизаций.Склад,
	|	ТоварыОрганизаций.НомерГТД,
	|	ТоварыОрганизаций.Организация,
	|	ТоварыОрганизаций.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыОрганизаций.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ТоварыОрганизаций.Количество
	|			ИНАЧЕ -ТоварыОрганизаций.Количество
	|		КОНЕЦ) > 0
	|ИТОГИ ПО
	|	ТипЗапасов
	|");
	Запрос.УстановитьПараметр("Основание", РеализацияТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипЗапасов = Перечисления.ТипыЗапасов.КомиссионныйТовар Тогда
			ЕстьКомиссионныйТовар = Истина;
		Иначе
			ЕстьСобственныйТовар = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьКомиссионныйТовар И ЕстьСобственныйТовар Тогда
		КодВидаОперации = "01;04";
	ИначеЕсли ЕстьКомиссионныйТовар Тогда
		КодВидаОперации = "04";
	Иначе
		КодВидаОперации = "01";
	КонецЕсли;
	
	Возврат КодВидаОперации;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ПроверитьДублиСчетФактуры(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка <> &Ссылка
	|	И ДанныеДокумента.ДокументОснование = &ДокументОснование
	|	И Не ДанныеДокумента.ПометкаУдаления
	|	И (ДанныеДокумента.Организация = &Организация
	|		ИЛИ &Организация = Неопределено)
	|	И НЕ ДанныеДокумента.Исправление
	|	И (НЕ ДанныеДокумента.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионера)
	|	И (НЕ ДанныеДокумента.ДокументОснование ССЫЛКА Документ.ОтчетПоКомиссииМеждуОрганизациями)
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если НЕ Исправление Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 по организации %2 уже введен счет-фактура %3'"),
				ДокументОснование,
				Организация,
				Выборка.Ссылка
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ДокументОснование",
				,
				Отказ
			);
			
		ИначеЕсли Исправление И СчетФактураОснование <> Выборка.Ссылка Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'На основании документа %1 введен счет-фактура %2. Недопустимо исправление счета-фактуры %3.'"),
				ДокументОснование,
				Выборка.Ссылка,
				СчетФактураОснование
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"СчетФактураОснование",
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьСтрокуРасчетноПлатежныхДокументов()
	
	СтрокаНомеровИДата = "";
	Для Каждого СтрокаТаблицы Из ПлатежноРасчетныеДокументы Цикл
		СтрокаНомеровИДата = СтрокаНомеровИДата + ?(ПустаяСтрока(СтрокаНомеровИДата), "", ", ")
			+ СтрокаТаблицы.НомерПлатежноРасчетногоДокумента 
			+ " от " + Формат(СтрокаТаблицы.ДатаПлатежноРасчетногоДокумента, "ДФ=dd.MM.yyyy");
	КонецЦикла; 
		
	Если СтрокаПлатежноРасчетныеДокументы <> СтрокаНомеровИДата Тогда
		СтрокаПлатежноРасчетныеДокументы = СтрокаНомеровИДата;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли