////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Подсистема "ЭлектронныеДокументы"
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
	ОповеститьОВыборе(ПараметрыПредставленияСервер());
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Отбор.Свойство("ДокументОснование", ДокументОснование);
	Параметры.Отбор.Свойство("Организация",       Организация);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокПродажи.Отбор, "ДокументОснование", ДокументОснование, , , Истина);
	
	Если Параметры.Отбор.Свойство("КОформлению") И Параметры.Отбор.КОформлению Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПродажи;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		Элементы.Список.Обновить();
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПродажи Тогда
		Элементы.СписокПродажи.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СоздатьСчетаФактуры(Команда)
	
	СчетаФактурыКУдалению = СчетаФактурыКУдалению();
	
	Если СчетаФактурыКУдалению.Количество() > 0 Тогда
		
		Ответ = Вопрос("Обнаружены счета-фактуры, не соответствующие строкам отчета комиссионера. Пометить на удаление?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			
			СчетаФактурыКУдалению.Очистить()
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СоздатьСчетаФактурыСервер(СчетаФактурыКУдалению);
	
	Элементы.Список.Обновить();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСписок;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.СчетФактураВыданный.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Элементы.Список.ТекущаяСтрока = МассивСсылок[0];
		ОткрытьЗначение(МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция ПараметрыПредставленияСервер()
	
	ПараметрыПредставления = ПродажиСервер.ПараметрыПредставленияСчетаФактуры(ДокументОснование, Организация);
	ПараметрыПредставления.Вставить("Организация", Организация);
	
	Возврат ПараметрыПредставления;
	
КонецФункции

Функция СчетаФактурыКУдалению()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК ДокументОснование,
	|	ТаблицаТовары.Ссылка.Организация КАК Организация,
	|	ТаблицаТовары.Покупатель КАК Покупатель,
	|	ТаблицаТовары.ДатаСчетаФактурыКомиссионера КАК Дата
	|
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК ДокументОснование,
	|	ТаблицаТовары.Ссылка.Организация КАК Организация,
	|	ТаблицаТовары.Покупатель КАК Покупатель,
	|	ТаблицаТовары.ДатаСчетаФактурыКомиссионера КАК Дата
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураВыданный.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаТовары КАК ТаблицаТовары
	|	ПО
	|		ТаблицаТовары.ДокументОснование = СчетФактураВыданный.ДокументОснование
	|		И ТаблицаТовары.Организация = СчетФактураВыданный.Организация
	|		И (ТаблицаТовары.Дата = НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ)
	|			ИЛИ ТаблицаТовары.Дата = ДАТАВРЕМЯ(1, 1, 1))
	|		И ТаблицаТовары.Покупатель = СчетФактураВыданный.Покупатель
	|
	|ГДЕ
	|	СчетФактураВыданный.ДокументОснование = &ДокументОснование
	|	И СчетФактураВыданный.Организация = &Организация
	|	И (НЕ СчетФактураВыданный.ПометкаУдаления)
	|	И ТаблицаТовары.ДокументОснование ЕСТЬ NULL
	|");
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Организация",       Организация);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура СоздатьСчетаФактурыСервер(СчетаФактурыКУдалению)
	
	Для Каждого ДокументКУдалению Из СчетаФактурыКУдалению Цикл
		ДокументОбъект = ДокументКУдалению.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТовары.ДатаСчетаФактурыКомиссионера КАК Дата,
	|	ТаблицаТовары.Ссылка КАК ДокументОснование,
	|	&Организация КАК Организация,
	|	ТаблицаТовары.Покупатель КАК Покупатель,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхСчетовФактур.ВыставляемыйКомиссионеру) КАК ТипСчетаФактуры
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера.Товары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|	ПО
	|		ТаблицаТовары.Ссылка = СчетФактураВыданный.ДокументОснование
	|		И (ТаблицаТовары.ДатаСчетаФактурыКомиссионера = НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ)
	|			ИЛИ ТаблицаТовары.ДатаСчетаФактурыКомиссионера = ДАТАВРЕМЯ(1,1,1))
	|		И ТаблицаТовары.Покупатель = СчетФактураВыданный.Покупатель
	|		И (НЕ СчетФактураВыданный.ПометкаУдаления)
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|	И СчетФактураВыданный.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ДатаСчетаФактурыКомиссионера,
	|	ТаблицаТовары.Покупатель,
	|	ТаблицаТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.ДатаСчетаФактурыКомиссионера КАК Дата,
	|	ТаблицаТовары.Ссылка КАК ДокументОснование,
	|	&Организация КАК Организация,
	|	ТаблицаТовары.Покупатель КАК Покупатель,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхСчетовФактур.ВыставляемыйКомиссионеру) КАК ТипСчетаФактуры
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|	ПО
	|		ТаблицаТовары.Ссылка = СчетФактураВыданный.ДокументОснование
	|		И ТаблицаТовары.Ссылка.Организация = СчетФактураВыданный.Организация
	|		И (ТаблицаТовары.ДатаСчетаФактурыКомиссионера = НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ)
	|			ИЛИ ТаблицаТовары.ДатаСчетаФактурыКомиссионера = ДАТАВРЕМЯ(1,1,1))
	|		И ТаблицаТовары.Покупатель = СчетФактураВыданный.Покупатель
	|		И (НЕ СчетФактураВыданный.ПометкаУдаления)
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &ДокументОснование
	|	И СчетФактураВыданный.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ДатаСчетаФактурыКомиссионера,
	|	ТаблицаТовары.Покупатель,
	|	ТаблицаТовары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	МассивНовыхДокументов = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		НовыйСчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
		НовыйСчетФактура.Заполнить(ДанныеЗаполнения);
		
		Попытка
			НовыйСчетФактура.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",       НовыйСчетФактура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				,
				);

		КонецПопытки;
			
		МассивНовыхДокументов.Добавить(НовыйСчетФактура.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры
