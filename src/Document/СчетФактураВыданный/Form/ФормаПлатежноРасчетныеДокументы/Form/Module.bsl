
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Организация", Организация);
	Параметры.Свойство("ДокументОснование", ДокументОснование);
	
	Если Параметры.Свойство("АдресВХранилище") Тогда
		ПлатежноРасчетныеДокументы.Загрузить(ПолучитьИзВременногоХранилища(Параметры.АдресВХранилище));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		КодОтвета = Вопрос(НСтр("ru='Данные не перенесены в счет-фактуру. Перенести?'"), РежимДиалогаВопрос.ДаНет);
		Если КодОтвета = КодВозвратаДиалога.Да Тогда
			
			ПроверитьЗаполнениеТабличнойЧасти(Отказ);
			Если НЕ Отказ Тогда
				
				Модифицированность = Ложь;
				
				Закрыть(ПоместитьПлатежноРасчетныеДокументыВХранилище());
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПлатежноРасчетныеДокументыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПлатежноРасчетныеДокументы(Команда)
	
	ЗаполнятьТабличнуюЧасть = Истина;

	Если ПлатежноРасчетныеДокументы.Количество() > 0 Тогда
		КодОтвета = Вопрос(НСтр("ru = 'Табличная часть будет очищена, продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Если КодОтвета = КодВозвратаДиалога.Нет Тогда
			ЗаполнятьТабличнуюЧасть = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнятьТабличнуюЧасть Тогда
		ЗаполнитьПлатежноРасчетныеДокументыСервер();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ЕстьОшибки = Ложь;
	
	ПроверитьЗаполнениеТабличнойЧасти(ЕстьОшибки);
	Если НЕ ЕстьОшибки Тогда
	
		Модифицированность = Ложь;
		
		Закрыть(ПоместитьПлатежноРасчетныеДокументыВХранилище());
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ЗаполнитьПлатежноРасчетныеДокументыСервер()
	
	ТаблицаПлатежноРасчетныеДокументы = ПлатежноРасчетныеДокументы.Выгрузить();
	
	Документы.СчетФактураВыданный.ЗаполнитьПлатежноРасчетныеДокументы(
		ТаблицаПлатежноРасчетныеДокументы,
		ДокументОснование,
		Организация
	);
	
	ПлатежноРасчетныеДокументы.Загрузить(ТаблицаПлатежноРасчетныеДокументы);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьПлатежноРасчетныеДокументыВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(ПлатежноРасчетныеДокументы.Выгрузить());
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеТабличнойЧасти(Отказ)
	
	Для ТекИндекс = 0 По ПлатежноРасчетныеДокументы.Количество()-1 Цикл
		
		Если ПустаяСтрока(ПлатежноРасчетныеДокументы[ТекИндекс].НомерПлатежноРасчетногоДокумента) Тогда
			ТекстОшибки = НСтр("ru='Не заполнен номер документа в строке %НомерСтроки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%НомерСтроки%",ТекИндекс+1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПлатежноРасчетныеДокументы", ТекИндекс+1, "НомерПлатежноРасчетногоДокумента"),
				,
				Отказ
			);
		КонецЕсли;
		
		Если ПлатежноРасчетныеДокументы[ТекИндекс].ДатаПлатежноРасчетногоДокумента = Дата('00010101') Тогда
			ТекстОшибки = НСтр("ru='Не заполнена дата документа в строке %НомерСтроки%'");
			ТекстОшибки = СтрЗаменить( ТекстОшибки,"%НомерСтроки%",ТекИндекс+1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки ,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПлатежноРасчетныеДокументы", ТекИндекс+1, "ДатаПлатежноРасчетногоДокумента"),
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
