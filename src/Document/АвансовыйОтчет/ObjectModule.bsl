#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьПоЗначениямАвтозаполнения(ДанныеЗаполнения);

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ЗаполнитьПоПоступлениюТоваровУслуг(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
	
		ЗаполнитьПоРасходномуКассовомуОрдеру(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
	
		ЗаполнитьПоСписаниюБезналичныхДенежныхСредств(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("ПодотчетноеЛицо") Тогда
			ПодотчетноеЛицо = ДанныеЗаполнения.ПодотчетноеЛицо;
		КонецЕсли;
		Если Не ДанныеЗаполнения.Свойство("Валюта") Тогда
			Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	ПолученныеАвансы.Очистить();
	ОплатаПоставщикам.Очистить();
	ЗакупкаЗаНаличныйРасчет.Очистить();
	ПрочиеРасходы.Очистить();
	
	ИтогоПолучено = 0;
	ИтогоИзрасходовано = 0;
	Остаток = 0;
	Перерасход = 0;
	
	ОтветственныеЛицаСервер.ЗаполнитьОтветственныхЛицДокумента(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьДокументыАванса(Отказ);
	ПроверитьДокументыЗакупки(Отказ);
	
	Если ОплатаПоставщикам.Количество() = 0
	 И ЗакупкаЗаНаличныйРасчет.Количество() = 0
	 И ПрочиеРасходы.Количество() = 0 Тогда
	 
		Текст = НСтр("ru = 'Сумма израсходованных денежных средств равна 0. Необходимо заполнить данные на закладках ""Оплата поставщику"", ""Закупка"" или ""Прочие расходы ""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"ИтогоИзрасходовано",
			, // ПутьКДанным
			Отказ
		);
	 
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ПроверитьЗаполнениеОтветственныхЛицДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	РасчетИтогоПолучено = ПолученныеАвансы.Итог("Сумма");	
	Если ИтогоПолучено <> РасчетИтогоПолучено Тогда
		ИтогоПолучено = РасчетИтогоПолучено;
	КонецЕсли;
	
	РасчетИтогоИзрасходовано = ОплатаПоставщикам.Итог("Сумма")
		+ ЗакупкаЗаНаличныйРасчет.Итог("Сумма")
		+ ПрочиеРасходы.Итог("Сумма");
	Если ИтогоИзрасходовано <> РасчетИтогоИзрасходовано Тогда
		ИтогоИзрасходовано = РасчетИтогоИзрасходовано;
	КонецЕсли;
	
	Если ИтогоПолучено > ИтогоИзрасходовано Тогда
		Если Остаток <> (ИтогоПолучено - ИтогоИзрасходовано) Тогда
			Остаток = ИтогоПолучено - ИтогоИзрасходовано;
			Перерасход = 0;
		КонецЕсли;
	Иначе
		Если Перерасход <> (ИтогоИзрасходовано - ИтогоПолучено) Тогда
			Остаток = 0;
			Перерасход = ИтогоИзрасходовано - ИтогоПолучено;
		КонецЕсли;
	КонецЕсли;

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Если Остаток <> 0 Тогда
			СкорректироватьПолученныеАвансы();
		КонецЕсли;
	
		// Заполнение суммы взаиморасчетов в табличной части "Расшифровка платежа".
		ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(
			Валюта,
			Дата,
			ОплатаПоставщикам
		);
		
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ПрочиеРасходы);

	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.АвансовыйОтчет.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по денежным средствам.
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваУПодотчетныхЛиц(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваКСписаниюСПодотчетныхЛиц(ДополнительныеСвойства, Движения, Отказ);
	
	// Движения по расчетам с поставщиками.
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщикамиПоследовательность(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ);
	
	// Движения по прочим расходам.
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ЗаполнитьПоПоступлениюТоваровУслуг(Знач ДокументОснование, ДанныеЗаполнения)

	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.Ссылка КАК ДокументПоступления,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Склад КАК Склад,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|	ДанныеДокумента.Подразделение КАК Подразделение
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить авансовый отчет на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;	
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		НоваяСтрока = ЗакупкаЗаНаличныйРасчет.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоРасходномуКассовомуОрдеру(Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.Ссылка КАК ДокументАванса,
	|	ДанныеДокумента.Касса.ВалютаДенежныхСредств КАК Валюта,
	|	ДанныеДокумента.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|	ДанныеДокумента.ЗаявкаНаРасходованиеДенежныхСредств.Подразделение КАК Подразделение,
	|	НЕ ДанныеДокумента.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить авансовый отчет на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;	
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДокументОснование,
			Неопределено, // Статус
			Выборка.ЕстьОшибкиПроведен
		);
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		НоваяСтрока = ПолученныеАвансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоСписаниюБезналичныхДенежныхСредств(Знач ДокументОснование, ДанныеЗаполнения)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.Ссылка КАК ДокументАванса,
	|	ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта,
	|	ДанныеДокумента.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|	ДанныеДокумента.ЗаявкаНаРасходованиеДенежныхСредств.Подразделение КАК Подразделение,
	|	НЕ ДанныеДокумента.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить авансовый отчет на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;	
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ДокументОснование,
			Неопределено, // Статус
			Выборка.ЕстьОшибкиПроведен
		);
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		НоваяСтрока = ПолученныеАвансы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗначениямАвтозаполнения(ДанныеЗаполнения = Неопределено)
	
	ЕстьДанныеЗаполнения = (НЕ ДанныеЗаполнения = Неопределено);
	ДанныеЗаполненияСтруктура = (ТипЗнч(ДанныеЗаполнения) = Тип("Структура"));
	
	// Заполним основные свойства
	СвойстваАвтозаполнения = Новый Структура("Организация, Склад");
	
	Если ДанныеЗаполненияСтруктура Тогда
		ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(СвойстваАвтозаполнения, ДанныеЗаполнения, Истина);
		
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(Ссылка, СвойстваАвтозаполнения);
	
	Если ЕстьДанныеЗаполнения И ДанныеЗаполненияСтруктура Тогда
		ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(ДанныеЗаполнения, СвойстваАвтозаполнения, Истина);
		
	ИначеЕсли НЕ ЕстьДанныеЗаполнения Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваАвтозаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И НЕ ДанныеЗаполнения.Свойство("Валюта") Тогда
		Валюта    = ДоходыИРасходыСервер.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	Подразделение = Справочники.ФизическиеЛица.ПодразделениеФизическогоЛица(ПодотчетноеЛицо);
	
	ОтветственныеЛицаСервер.ЗаполнитьОтветственныхЛицДокумента(ЭтотОбъект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ПроверитьДокументыАванса(Отказ)
	
	Если ПолученныеАвансы.Количество() > 0 Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.ДокументАванса КАК ДокументАванса
		|
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|	
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.ДокументАванса.Валюта КАК Валюта,
		|	ТаблицаДокумента.ДокументАванса.ПодотчетноеЛицо КАК ПодотчетноеЛицо
		|ИЗ
		|	ТаблицаДокумента КАК ТаблицаДокумента
		|		
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокумента.НомерСтроки
		|;
		|");
		
		ТаблицаДокумента = ПолученныеАвансы.Выгрузить(, "НомерСтроки, ДокументАванса");
		Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Валюта <> Валюта Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Валюта аванса в строке %1 списка ""Полученные авансы"" не соответствует валюте авансового отчета'"),
					Выборка.НомерСтроки
				);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					"ПолученныеАвансы[" + (Выборка.НомерСтроки - 1) + "].ДокументАванса",
					,
					Отказ
				);
			КонецЕсли;
			
			Если Выборка.ПодотчетноеЛицо <> ПодотчетноеЛицо Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Подотчетное лицо аванса в строке %1 списка ""Полученные авансы"" не соответствует авансовому отчету'"),
					Выборка.НомерСтроки
				);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					"ПолученныеАвансы[" + (Выборка.НомерСтроки - 1) + "].ДокументАванса",
					,
					Отказ
				);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДокументыЗакупки(Отказ)
	
	Если ЗакупкаЗаНаличныйРасчет.Количество() > 0 Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.ДокументПоступления КАК ДокументПоступления
		|
		|ПОМЕСТИТЬ ТаблицаДокумента
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|	
		|ВЫБРАТЬ
		|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
		|	ТаблицаДокумента.ДокументПоступления.Валюта КАК Валюта,
		|	ТаблицаДокумента.ДокументПоступления.ПодотчетноеЛицо КАК ПодотчетноеЛицо
		|ИЗ
		|	ТаблицаДокумента КАК ТаблицаДокумента
		|		
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокумента.НомерСтроки
		|;
		|");
		
		ТаблицаДокумента = ЗакупкаЗаНаличныйРасчет.Выгрузить(, "НомерСтроки, ДокументПоступления");
		Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Валюта <> Валюта Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Валюта документа в строке %1 списка ""Закупки"" не соответствует валюте авансового отчета'"),
					Выборка.НомерСтроки
				);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					"ЗакупкаЗаНаличныйРасчет[" + (Выборка.НомерСтроки - 1) + "].ДокументПоступления",
					,
					Отказ
				);
			КонецЕсли;
			
			Если Выборка.ПодотчетноеЛицо <> ПодотчетноеЛицо Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Подотчетное лицо документа в строке %1 списка ""Закупки"" не соответствует авансовому отчету'"),
					Выборка.НомерСтроки
				);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					"ЗакупкаЗаНаличныйРасчет[" + (Выборка.НомерСтроки - 1) + "].ДокументПоступления",
					,
					Отказ
				);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СкорректироватьПолученныеАвансы()

	КоличествоСтрок = ПолученныеАвансы.Количество();
	Для Сч = 1 По КоличествоСтрок Цикл

		СтрокаТаблицы = ПолученныеАвансы[КоличествоСтрок - Сч];
		Если СтрокаТаблицы.Сумма > Остаток Тогда
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма - Остаток;
			Остаток = 0;
		Иначе
			Остаток = Остаток - СтрокаТаблицы.Сумма;
			СтрокаТаблицы.Сумма = 0;
			ПолученныеАвансы.Удалить(СтрокаТаблицы);
		КонецЕсли;

	КонецЦикла;
	
	ИтогоПолучено = ПолученныеАвансы.Итог("Сумма");	

КонецПроцедуры


#КонецЕсли