#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция определяет реквизиты выбранного авансового отчета.
//
// Параметры:
//  АвансовыйОтчет - ДокументСсылка.АвансовыйОтчет - Ссылка на документ
//
// Возвращаемое значение:
//	Структура - реквизиты авансового отчета
//
Функция ПолучитьРеквизитыДокумента(АвансовыйОтчет) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &АвансовыйОтчет
	|");
	
	Запрос.УстановитьПараметр("АвансовыйОтчет", АвансовыйОтчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата = Выборка.Дата;
		Организация = Выборка.Организация;
		Валюта = Выборка.Валюта;
		ПодотчетноеЛицо = Выборка.ПодотчетноеЛицо;
	Иначе
		Дата = Дата(1,1,1);
		Организация = Неопределено;
		Валюта = Неопределено;
		ПодотчетноеЛицо = Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Дата, Организация, Валюта, ПодотчетноеЛицо",
		Дата,
		Организация,
		Валюта,
		ПодотчетноеЛицо
	);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	ТекстОплатаПоставщикам = "
	|ВЫБРАТЬ // Оплата поставщикам через подотчетное лицо (Дт 60.01 :: Кт 71)
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(РасчетыСуммаРегл.СуммаРегл, 0) - ЕСТЬNULL(Расчеты.ПредоплатаРегл, 0) КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСПоставщиками) КАК ВидСчетаДт,
	|	ЕСТЬNULL(Расчеты.ЗаказПоставщику.ГруппаФинансовогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка)) КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Расчеты.Валюта КАК ВалютаДт,
	|	Расчеты.ЗаказПоставщику.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Расчеты.Контрагент КАК СубконтоДт1,
	|	ВЫБОР КОГДА Расчеты.ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|		Расчеты.ЗаказПоставщику
	|	ИНАЧЕ
	|		Расчеты.ЗаказПоставщику.Договор
	|	КОНЕЦ СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	ЕСТЬNULL(Расчеты.Долг, 0) КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.Валюта КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	ВЫБОР КОГДА Операция.Валюта = Константы.ВалютаРегламентированногоУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СчетКт,
	|	Операция.ПодотчетноеЛицо КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	ЕСТЬNULL(Расчеты.Долг, 0) КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт
	|
	|ИЗ
	|	Документ.АвансовыйОтчет КАК Операция
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|			Расчеты.ЗаказПоставщику,
	|			Расчеты.Валюта,
	|			СУММА(Расчеты.Долг) КАК Долг,
	|			СУММА(Расчеты.Предоплата) КАК Предоплата,
	|			СУММА(Расчеты.ПредоплатаРегл) КАК ПредоплатаРегл
	|		ИЗ
	|			РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|		ГДЕ
	|			Расчеты.Регистратор = &Ссылка
	|		СГРУППИРОВАТЬ ПО
	|			Расчеты.АналитикаУчетаПоПартнерам.Контрагент,
	|			Расчеты.ЗаказПоставщику,
	|			Расчеты.Валюта
	|		) КАК Расчеты
	|	ПО
	|		ИСТИНА
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|			Расчеты.ЗаказПоставщику,
	|			Расчеты.Валюта,
	|			СУММА(Расчеты.СуммаРегл) КАК СуммаРегл
	|		ИЗ
	|			РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
	|		ГДЕ
	|			Расчеты.Регистратор = &Ссылка
	|		СГРУППИРОВАТЬ ПО
	|			Расчеты.АналитикаУчетаПоПартнерам.Контрагент,
	|			Расчеты.ЗаказПоставщику,
	|			Расчеты.Валюта
	|		) КАК РасчетыСуммаРегл
	|	ПО
	|		Расчеты.Контрагент = РасчетыСуммаРегл.Контрагент
	|		И Расчеты.ЗаказПоставщику = РасчетыСуммаРегл.ЗаказПоставщику
	|		И Расчеты.Валюта = РасчетыСуммаРегл.Валюта
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Константы КАК Константы
	|	ПО
	|		Истина
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|";
	
	ТекстПредоплатаПоставщикам = "
	|ВЫБРАТЬ // Оплата аванса поставщикам через подотчетное лицо (Дт 60.02 :: Кт 71)
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Расчеты.ПредоплатаРегл, 0) КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.АвансыВыданные) КАК ВидСчетаДт,
	|	ЕСТЬNULL(Расчеты.ЗаказПоставщику.ГруппаФинансовогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаРасчетов.ПустаяСсылка)) КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Расчеты.Валюта КАК ВалютаДт,
	|	Расчеты.ЗаказПоставщику.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	Расчеты.Контрагент КАК СубконтоДт1,
	|	ВЫБОР КОГДА Расчеты.ЗаказПоставщику ССЫЛКА Справочник.ДоговорыКонтрагентов ТОГДА
	|		Расчеты.ЗаказПоставщику
	|	ИНАЧЕ
	|		Расчеты.ЗаказПоставщику.Договор
	|	КОНЕЦ СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	ЕСТЬNULL(Расчеты.Предоплата, 0) КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.Валюта КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	ВЫБОР КОГДА Операция.Валюта = Константы.ВалютаРегламентированногоУчета ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СчетКт,
	|	Операция.ПодотчетноеЛицо КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	ЕСТЬNULL(Расчеты.Предоплата, 0) КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт
	|
	|ИЗ
	|	Документ.АвансовыйОтчет КАК Операция
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			Расчеты.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
	|			Расчеты.ЗаказПоставщику КАК ЗаказПоставщику,
	|			Расчеты.Валюта КАк Валюта,
	|			СУММА(Расчеты.Предоплата) КАК Предоплата,
	|			СУММА(Расчеты.ПредоплатаРегл) КАК ПредоплатаРегл
	|		ИЗ
	|			РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК Расчеты
	|		ГДЕ
	|			Расчеты.Регистратор = &Ссылка
	|		СГРУППИРОВАТЬ ПО
	|			Расчеты.АналитикаУчетаПоПартнерам.Контрагент,
	|			Расчеты.ЗаказПоставщику,
	|			Расчеты.Валюта
	|		) КАК Расчеты
	|	ПО
	|		ИСТИНА
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Константы КАК Константы
	|	ПО
	|		Истина
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|";
	
	ТекстПрочиеРасходы = "
	|ВЫБРАТЬ // Поступление услуг (Дт 44 :: Кт 71)
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл, Строки.Сумма) КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы) КАК ВидСчетаДт,
	|	Строки.СтатьяРасходов КАК АналитикаУчетаДт,
	|	Операция.Подразделение КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Операция.Валюта КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	ВЫБОР КОГДА Суммы.СуммаБезНДСРегл ЕСТЬ NULL ТОГДА
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал)
	|	КОНЕЦ КАК СчетКт,
	|	Операция.ПодотчетноеЛицо КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	Строки.Сумма КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт
	|
	|ИЗ
	|	Документ.АвансовыйОтчет КАК Операция
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АвансовыйОтчет.ПрочиеРасходы КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Строки.Ссылка
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|";
	
	Возврат ТекстОплатаПоставщикам
	+ "ОБЪЕДИНИТЬ ВСЕ" + ТекстПредоплатаПоставщикам
	+ "ОБЪЕДИНИТЬ ВСЕ" + ТекстПрочиеРасходы;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.Подразделение КАК Подразделение
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	// Формирование ключей аналитики учета по партнерам.
	ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Реквизиты, ДокументСсылка);
	
	ТекстЗапроса = ТекстЗапросаВременнаяТаблицаРасшифровкаПлатежа()
		+ ТекстЗапросаТаблицаДенежныеСредстваУПодотчетныхЛиц()
		+ ТекстЗапросаТаблицаДенежныеСредстваКСписаниюСПодотчетныхЛиц()
		+ ТекстЗапросаТаблицаРасчетыСПоставщиками()
		+ ТекстЗапросаТаблицаРасчетыСПоставщикамиПоследовательность()
		+ ТекстЗапросаТаблицаПрочиеРасходы()
		+ ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл()
		+ ТекстЗапросаТаблицаПартииПрочихРасходов();
		
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
		Реквизиты.Валюта, 
		, // ВалютаВзаиморасчетов
		Реквизиты.Период
	);
	                                                                     
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Период", Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("Валюта", Реквизиты.Валюта);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо", Реквизиты.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр", Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ИспользоватьУчетПрочихДоходовРасходов", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")); 
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// МассивРезультатов[0] - ВременнаяТаблицаОплатаПоставщикам
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваУПодотчетныхЛиц",          МассивРезультатов[1].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДенежныеСредстваКСписаниюСПодотчетныхЛиц", МассивРезультатов[2].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПоставщиками",                     МассивРезультатов[3].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПоставщикамиПоследовательность",   МассивРезультатов[4].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПрочиеРасходы",                            МассивРезультатов[5].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСуммыДокументовВВалютеРегл",               МассивРезультатов[6].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартииПрочихРасходов", 					   МассивРезультатов[7].Выгрузить());
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Реквизиты, ДокументСсылка)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация КАК Организация,
	|	ТаблицаОплатаПоставщикам.Контрагент КАК Контрагент,
	|	ТаблицаОплатаПоставщикам.Поставщик КАК Партнер
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ТаблицаОплатаПоставщикам
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация = Аналитика.Организация
	|		И ТаблицаОплатаПоставщикам.Контрагент = Аналитика.Контрагент
	|		И ТаблицаОплатаПоставщикам.Поставщик = Аналитика.Партнер
	|ГДЕ
	|	ТаблицаОплатаПоставщикам.Ссылка = &Ссылка
	|	И Аналитика.КлючАналитики ЕСТЬ NULL
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаПоПартнерам.СоздатьКлючАналитики(Выборка);
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаВременнаяТаблицаРасшифровкаПлатежа()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаОплатаПоставщикам.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОплатаПоставщикам.Заказ КАК Заказ,
	|
	|	ТаблицаОплатаПоставщикам.Сумма КАК Сумма,
	|	ТаблицаОплатаПоставщикам.СуммаВзаиморасчетов,
	|	ТаблицаОплатаПоставщикам.ВалютаВзаиморасчетов,
	|
	|	Аналитика.КлючАналитики КАК АналитикаУчетаПоПартнерам
	|
	|ПОМЕСТИТЬ ТаблицаОплатаПоставщикам
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ТаблицаОплатаПоставщикам
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация = Аналитика.Организация
	|		И ТаблицаОплатаПоставщикам.Контрагент = Аналитика.Контрагент
	|		И ТаблицаОплатаПоставщикам.Поставщик = Аналитика.Партнер
	|ГДЕ
	|	ТаблицаОплатаПоставщикам.Ссылка = &Ссылка
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДенежныеСредстваУПодотчетныхЛиц()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПолученныеАвансы.НомерСтроки КАК НомерСтроки,
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	&Валюта КАК Валюта,
	|	ПолученныеАвансы.ДокументАванса КАК РасчетныйДокумент,
	|	
	|	ПолученныеАвансы.Сумма
	|	
	|ИЗ
	|	Документ.АвансовыйОтчет.ПолученныеАвансы КАК ПолученныеАвансы
	|	
	|ГДЕ
	|	ПолученныеАвансы.Ссылка = &Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	999 КАК НомерСтроки,
	|	АвансовыйОтчет.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	АвансовыйОтчет.Организация КАК Организация,
	|	АвансовыйОтчет.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	АвансовыйОтчет.Валюта КАК Валюта,
	|	ВЫБОР КОГДА АвансовыйОтчет.Остаток <> 0 ТОГДА
	|		Неопределено
	|	ИНАЧЕ
	|		АвансовыйОтчет.Ссылка
	|	КОНЕЦ КАК РасчетныйДокумент,
	|	
	|	ВЫБОР КОГДА АвансовыйОтчет.Остаток <> 0 ТОГДА
	|		- АвансовыйОтчет.Остаток
	|	ИНАЧЕ
	|		АвансовыйОтчет.Перерасход
	|	КОНЕЦ КАК Сумма
	|	
	|ИЗ
	|	Документ.АвансовыйОтчет КАК АвансовыйОтчет
	|	
	|ГДЕ
	|	АвансовыйОтчет.Ссылка = &Ссылка
	|	И (АвансовыйОтчет.Остаток <> 0
	|		ИЛИ АвансовыйОтчет.Перерасход <> 0)
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДенежныеСредстваКСписаниюСПодотчетныхЛиц()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	&Валюта КАК Валюта,
	|	Закупка.ДокументПоступления КАК РасчетныйДокумент,
	|	Закупка.ДокументПоступления.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Закупка.Сумма КАК Сумма
	|ИЗ
	|	Документ.АвансовыйОтчет.ЗакупкаЗаНаличныйРасчет КАК Закупка
	|ГДЕ
	|	Закупка.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Закупка.НомерСтроки
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаОплатаПоставщикам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаОплатаПоставщикам.ВалютаВзаиморасчетов КАК Валюта,
	|	ТаблицаОплатаПоставщикам.Заказ КАК ЗаказПоставщику,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) КАК ФормаОплаты,
	|	
	|	ТаблицаОплатаПоставщикам.СуммаВзаиморасчетов КАК Сумма,
	|	ТаблицаОплатаПоставщикам.СуммаВзаиморасчетов КАК КОплате,
	|	ВЫРАЗИТЬ(ТаблицаОплатаПоставщикам.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаРегл
	|ИЗ
	|	ТаблицаОплатаПоставщикам КАК ТаблицаОплатаПоставщикам
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОплатаПоставщикам.НомерСтроки
	|	
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщикамиПоследовательность()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаОплатаПоставщикам.НомерСтроки) КАК НомерСтроки,
	|	&Ссылка КАК Регистратор,
	|	&Период КАК Период,
	|	ТаблицаОплатаПоставщикам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|	
	|ИЗ
	|	ТаблицаОплатаПоставщикам КАК ТаблицаОплатаПоставщикам
	|	
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплатаПоставщикам.АналитикаУчетаПоПартнерам
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|	
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходы()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ПрочиеРасходы.ПериодВозникновенияРасхода = ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|		&Период
	|	ИНАЧЕ
	|		ПрочиеРасходы.ПериодВозникновенияРасхода
	|	КОНЕЦ КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ПрочиеРасходы.СтатьяРасходов КАК СтатьяРасходов,
	|	ПрочиеРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	&Подразделение КАК Подразделение,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеРасходы) КАК ХозяйственнаяОперация,
	|
	|	// Рассчитаем сумму в валюте управленческого учета.
	|	ВЫРАЗИТЬ(ПрочиеРасходы.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15,2)) КАК Сумма,
	|
	|	ВЫБОР КОГДА ПрочиеРасходы.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	|	ТОГДА
	|				ВЫРАЗИТЬ(ПрочиеРасходы.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15,2))
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаБезНДС,
	|
	|	ВЫБОР КОГДА ПрочиеРасходы.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты)
	|	ТОГДА
	|		ВЫРАЗИТЬ(ПрочиеРасходы.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15,2))
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК ПрочиеРасходы
	|ГДЕ
	|	ПрочиеРасходы.Ссылка = &Ссылка
	|	И ПрочиеРасходы.СтатьяРасходов.ВариантРаспределенияРасходов <> ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	И &ИспользоватьУчетПрочихДоходовРасходов
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ПрочиеРасходы.НомерСтроки
	|	
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки,
	|	&Период КАК Период,
	|	&Валюта КАК Валюта,
	|	ТаблицаДокумента.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.Сумма КАК СуммаБезНДС,
	|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	ТаблицаДокумента.Сумма * &КоэффициентПересчетаВВалютуРегл КАК СуммаБезНДСРегл,
	|	0 КАК СуммаНДСРегл,
	|	НЕОПРЕДЕЛЕНО КАК ТипРасчетов
	|
	|ИЗ
	|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И &Валюта <> &ВалютаРегламентированногоУчета
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл()

Функция ТекстЗапросаТаблицаПартииПрочихРасходов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ПрочиеРасходы.ПериодВозникновенияРасхода = ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|		&Период
	|	ИНАЧЕ
	|		ПрочиеРасходы.ПериодВозникновенияРасхода
	|	КОНЕЦ КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 		КАК ВидДвижения,
	|	&Организация 								КАК Организация,
	|	ПрочиеРасходы.СтатьяРасходов 				КАК СтатьяРасходов,
	|	ПрочиеРасходы.АналитикаРасходов 			КАК АналитикаРасходов,
	|	&Ссылка 									КАК ДокументПоступленияРасходов,
	|	НЕОПРЕДЕЛЕНО 								КАК АналитикаУчетаПартий,
	|	&Подразделение 								КАК Подразделение,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеРасходы) КАК ХозяйственнаяОперация,
	|
	|	// Рассчитаем сумму в валюте управленческого учета.
	|	ВЫРАЗИТЬ(ПрочиеРасходы.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15,2)) КАК Стоимость,
	|
	|	ВЫРАЗИТЬ(ПрочиеРасходы.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15,2)) КАК СтоимостьБезНДС,
	|
	|	ВЫРАЗИТЬ(ПрочиеРасходы.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15,2)) КАК СтоимостьРегл
	|
	|ИЗ
	|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК ПрочиеРасходы
	|ГДЕ
	|	ПрочиеРасходы.Ссылка = &Ссылка
	|	И ПрочиеРасходы.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|	И &ИспользоватьУчетПрочихДоходовРасходов
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ПрочиеРасходы.НомерСтроки
	|	
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Печать

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АвансовыйОтчет") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"АвансовыйОтчет",
			"Авансовый отчет",
			СформироватьПечатнуюФормуАвансовогоОтчета(МассивОбъектов, ОбъектыПечати)
		);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуАвансовогоОтчета(МассивОбъектов, ОбъектыПечати)
		
	УстановитьПривилегированныйРежим(Истина);	
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.МоментВремени КАК МоментВремени,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Дата КАК ДатаДокумента,
	|	ДанныеДокумента.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.ПодотчетноеЛицо.Представление КАК ПредставлениеПодотчетногоЛица,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Организация.НаименованиеСокращенное КАК ПредставлениеОрганизации,
	|	ДанныеДокумента.Организация.КодПоОКПО КАК ОрганизацияПоОКПО,
	|	ДанныеДокумента.НазначениеАванса КАК НазначениеАванса,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Подразделение.Представление КАК ПредставлениеПодразделения,
	|	ДанныеДокумента.Подразделение.Код КАК КодПодразделения,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Валюта.Представление КАК ПредставлениеВалютыДокумента,
	|	ДанныеДокумента.КоличествоДокументов КАК КоличествоДокументов,
	|	ДанныеДокумента.КоличествоЛистов КАК КоличествоЛистов,
	|	ДанныеДокумента.ИтогоПолучено КАК ИтогоПолучено,
	|	ДанныеДокумента.ИтогоИзрасходовано КАК ИтогоИзрасходовано,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителяПредставление,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПолученныеАвансы.ДокументАванса КАК ДокументАванса
	|ПОМЕСТИТЬ ДокументыАванса
	|ИЗ
	|	Документ.АвансовыйОтчет.ПолученныеАвансы КАК ПолученныеАвансы
	|ГДЕ
	|	ПолученныеАвансы.Ссылка В(&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументАванса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПолученныеАвансы.Ссылка КАК Ссылка,
	|	ПолученныеАвансы.Ссылка.Дата КАК Дата,
	|	ПолученныеАвансы.ДокументАванса КАК ДокументАванса
	|ПОМЕСТИТЬ ПредыдущиеАвансовыеОтчеты
	|ИЗ
	|	Документ.АвансовыйОтчет.ПолученныеАвансы КАК ПолученныеАвансы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыАванса КАК ДокументыАванса
	|		ПО ПолученныеАвансы.ДокументАванса = ДокументыАванса.ДокументАванса
	|ГДЕ
	|	НЕ ПолученныеАвансы.Ссылка В (&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Дата,
	|	ДокументАванса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолученныеАвансы.Ссылка КАК Ссылка,
	|	СУММА(ВЫБОР
	|			КОГДА ПолученныеАвансы.ДокументАванса ССЫЛКА Документ.РасходныйКассовыйОрдер
	|				ТОГДА ВЫРАЗИТЬ(ПолученныеАвансы.ДокументАванса КАК Документ.РасходныйКассовыйОрдер).СуммаДокумента
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПолученоНаличными,
	|	СУММА(ВЫБОР
	|			КОГДА ПолученныеАвансы.ДокументАванса ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|				ТОГДА ВЫРАЗИТЬ(ПолученныеАвансы.ДокументАванса КАК Документ.СписаниеБезналичныхДенежныхСредств).СуммаДокумента
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПолученоБезналичными
	|ИЗ
	|	Документ.АвансовыйОтчет.ПолученныеАвансы КАК ПолученныеАвансы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПредыдущиеАвансовыеОтчеты КАК ПредыдущиеАвансовыеОтчеты
	|		ПО ПолученныеАвансы.Ссылка.Дата >= ПредыдущиеАвансовыеОтчеты.Дата
	|			И ПолученныеАвансы.Ссылка > ПредыдущиеАвансовыеОтчеты.Ссылка
	|			И ПолученныеАвансы.ДокументАванса = ПредыдущиеАвансовыеОтчеты.ДокументАванса
	|ГДЕ
	|	ПолученныеАвансы.Ссылка В(&МассивДокументов)
	|	И ПредыдущиеАвансовыеОтчеты.ДокументАванса ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолученныеАвансы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗакупкаЗаНаличныйРасчет.Ссылка КАК Ссылка,
	|	ЗакупкаЗаНаличныйРасчет.ДокументПоступления.Номер КАК ДокументНомер,
	|	ЗакупкаЗаНаличныйРасчет.ДокументПоступления.Дата КАК ДокументДата,
	|	ВЫРАЗИТЬ(ЗакупкаЗаНаличныйРасчет.Комментарий КАК СТРОКА(100)) КАК НаименованиеРасхода,
	|	СУММА(ЗакупкаЗаНаличныйРасчет.Сумма) КАК ПоОтчету,
	|	СУММА(ЗакупкаЗаНаличныйРасчет.Сумма) КАК ПоОтчетуВВалюте
	|ИЗ
	|	Документ.АвансовыйОтчет.ЗакупкаЗаНаличныйРасчет КАК ЗакупкаЗаНаличныйРасчет
	|ГДЕ
	|	ЗакупкаЗаНаличныйРасчет.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗакупкаЗаНаличныйРасчет.Ссылка,
	|	ЗакупкаЗаНаличныйРасчет.ДокументПоступления.Номер,
	|	ЗакупкаЗаНаличныйРасчет.ДокументПоступления.Дата,
	|	ВЫРАЗИТЬ(ЗакупкаЗаНаличныйРасчет.Комментарий КАК СТРОКА(100))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОплатаПоставщикам.Ссылка,
	|	ОплатаПоставщикам.НомерВходящегоДокумента,
	|	ОплатаПоставщикам.ДатаВходящегоДокумента,
	|	ВЫРАЗИТЬ(ОплатаПоставщикам.Комментарий КАК СТРОКА(100)),
	|	СУММА(ОплатаПоставщикам.Сумма),
	|	СУММА(ОплатаПоставщикам.Сумма)
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК ОплатаПоставщикам
	|ГДЕ
	|	ОплатаПоставщикам.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатаПоставщикам.Ссылка,
	|	ОплатаПоставщикам.НомерВходящегоДокумента,
	|	ОплатаПоставщикам.ДатаВходящегоДокумента,
	|	ВЫРАЗИТЬ(ОплатаПоставщикам.Комментарий КАК СТРОКА(100))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПрочиеРасходы.Ссылка,
	|	"""",
	|	"""",
	|	ВЫРАЗИТЬ(ПрочиеРасходы.Комментарий КАК СТРОКА(100)),
	|	СУММА(ПрочиеРасходы.Сумма),
	|	СУММА(ПрочиеРасходы.Сумма)
	|ИЗ
	|	Документ.АвансовыйОтчет.ПрочиеРасходы КАК ПрочиеРасходы
	|ГДЕ
	|	ПрочиеРасходы.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеРасходы.Ссылка,
	|	ВЫРАЗИТЬ(ПрочиеРасходы.Комментарий КАК СТРОКА(100))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументДата,
	|	ДокументНомер
	|ИТОГИ ПО
	|	Ссылка";
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	ЗапросПоОстаткам = Новый Запрос("
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДенежныеСредства.СуммаОстаток,0) КАК СуммаВзаиморасчетов
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц.Остатки(&МоментВремениИсключая,
	|		Организация = &Организация
	|		И Валюта = &Валюта
	|		И ПодотчетноеЛицо = &ПодотчетноеЛицо
	|	) КАК ДенежныеСредства
	|");
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = МассивРезультатов[0].Выбрать();
	// МассивРезультатов[1] - ВременнаяТаблица "ДокументыАванса"
	// МассивРезультатов[2] - ВременнаяТаблица "ПредыдущиеАвансовыеОтчеты"
	ТаблицаПолученныхАвансов = МассивРезультатов[3].Выбрать();
	ВыборкаОборотнаяСторона = МассивРезультатов[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ПечатьВИностраннойВалюте = (Выборка.Валюта <> ВалютаРегламентированногоУчета);
		Если ПечатьВИностраннойВалюте Тогда
			Макет = УправлениеПечатью.ПолучитьМакет("Документ.АвансовыйОтчет.ПФ_MXL_АвансовыйОтчетВИностраннойВалюте");
		Иначе
			Макет = УправлениеПечатью.ПолучитьМакет("Документ.АвансовыйОтчет.ПФ_MXL_АвансовыйОтчет");
		КонецЕсли;
		
		ЗапросПоОстаткам.УстановитьПараметр("МоментВремениИсключая", Новый Граница(Выборка.МоментВремени, ВидГраницы.Исключая));
		ЗапросПоОстаткам.УстановитьПараметр("Организация", Выборка.Организация);
		ЗапросПоОстаткам.УстановитьПараметр("Валюта", Выборка.Валюта);
		ЗапросПоОстаткам.УстановитьПараметр("ПодотчетноеЛицо", Выборка.ПодотчетноеЛицо);
		ПредыдущиеАвансы = ЗапросПоОстаткам.Выполнить().Выбрать();
		
		// Получение остатков авансов, выданных подотчетнику по органиации и в валюте этого авансового отчета, на момент отчета
		ПредыдущиеАвансы.Следующий();
		СуммаДоДокумента = ПредыдущиеАвансы.СуммаВзаиморасчетов;
		
		// Получение суммы наличными и безналичными
		СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
		Если ТаблицаПолученныхАвансов.НайтиСледующий(СтруктураПоиска) Тогда
			ПолученоИзКассы = ТаблицаПолученныхАвансов.ПолученоНаличными;
			ПолученоПоБанковскимКартам = ТаблицаПолученныхАвансов.ПолученоБезналичными;
		Иначе
			ПолученоИзКассы = 0;
			ПолученоПоБанковскимКартам = 0;
		КонецЕсли;
		ИтогоПолучено = ПолученоИзКассы + ПолученоПоБанковскимКартам;
		
		СуммаДоДокумента = СуммаДоДокумента - ПолученоИзКассы - ПолученоПоБанковскимКартам;
		
		// Выводим титульный лист авансового отчета
		ОбластьМакета = Макет.ПолучитьОбласть("Титул");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, Выборка.Ссылка);
		ОбластьМакета.Параметры.Заполнить(Выборка);
		
		ОбластьМакета.Параметры.НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(
			Выборка.Номер,
			Ложь,
			Истина
		);
		ОбластьМакета.Параметры.ПолученоИзКассы = ПолученоИзКассы;
		ОбластьМакета.Параметры.ПолученоПоБанковскимКартам = ПолученоПоБанковскимКартам;
		
		Если ПечатьВИностраннойВалюте Тогда
			ОбластьМакета.Параметры.ПолученоИзКассыВВалюте = ПолученоИзКассы;
			ОбластьМакета.Параметры.ПолученоПоБанковскимКартамВВалюте = ПолученоПоБанковскимКартам;
			ОбластьМакета.Параметры.Валюта = Выборка.ПредставлениеВалютыДокумента;
		КонецЕсли;
		
		Если СуммаДоДокумента >= 0 Тогда
			ОбластьМакета.Параметры.НачальныйОстаток = СуммаДоДокумента;
		Иначе
			ОбластьМакета.Параметры.НачальныйПерерасход = - СуммаДоДокумента;
		КонецЕсли;
		
		ОбластьМакета.Параметры.ИтогоПолучено = ИтогоПолучено;
		ОбластьМакета.Параметры.Израсходовано = Выборка.ИтогоИзрасходовано;
		
		ОстатокНаКонец = СуммаДоДокумента + ИтогоПолучено - Выборка.ИтогоИзрасходовано;
		
		Если ОстатокНаКонец >= 0  Тогда
			ОбластьМакета.Параметры.КонечныйОстаток    = ОстатокНаКонец;
		Иначе
			ОбластьМакета.Параметры.КонечныйПерерасход = - ОстатокНаКонец;
		КонецЕсли;
		
		Если НЕ ПечатьВИностраннойВалюте Тогда
			ИспСумма = Окр(Выборка.ИтогоИзрасходовано, 2, 1);
			ЦелСумма = Цел(Выборка.ИтогоИзрасходовано);
			КопСумма = 100 * (Окр(ИспСумма - ЦелСумма, 2, 1));
			
			ОбластьМакета.Параметры.ИзрасходованоРуб = ЦелСумма;
			ОбластьМакета.Параметры.ИзрасходованоКоп = Формат(КопСумма,"ЧН=00");
		КонецЕсли;
		
		ОбластьМакета.Параметры.РуководительПредставление = Выборка.Руководитель;
		ОбластьМакета.Параметры.ГлавныйБухгалтерПредставление = Выборка.ГлавныйБухгалтер;
		
		ОбластьМакета.Параметры.СуммаОтчетаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(
			Выборка.ИтогоИзрасходовано, 
			Выборка.Валюта,
			Ложь // ВыводитьСуммуБезКопеек
		);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		// Оборотная сторона
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Выборка);

		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим табличные части
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		ОбластьМакета.Параметры.Заполнить(Выборка);
		
		ИтогоПоОтчету        = 0;
		ИтогоПоОтчетуВВалюте = 0;
		СуммаВВалюте = 0;
		
		НомерСтроки = 0;
		СтруктураПоиска = Новый Структура("Ссылка", Выборка.Ссылка);
		ВыборкаОборотнаяСторона.НайтиСледующий(СтруктураПоиска);
		
		ВыборкаПоРасходам = ВыборкаОборотнаяСторона.Выбрать();
		Пока ВыборкаПоРасходам.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаПоРасходам);
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
			ОбластьМакета.Параметры.ДокументДата = ВыборкаПоРасходам.ДокументДата;
			ОбластьМакета.Параметры.ДокументНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(
				ВыборкаПоРасходам.ДокументНомер,
				Ложь,
				Истина
			);
			ОбластьМакета.Параметры.НаименованиеРасхода = СокрЛП(ВыборкаПоРасходам.НаименованиеРасхода);
			
			ОбластьМакета.Параметры.ПоОтчету = ВыборкаПоРасходам.ПоОтчету;
			ОбластьМакета.Параметры.ПоУчету = ВыборкаПоРасходам.ПоОтчету;
			ИтогоПоОтчету = ИтогоПоОтчету + ВыборкаПоРасходам.ПоОтчету;
			
			Если ПечатьВИностраннойВалюте Тогда
				ОбластьМакета.Параметры.ПоОтчетуВВалюте = ВыборкаПоРасходам.ПоОтчету;
				ОбластьМакета.Параметры.ПоУчетуВВалюте = ВыборкаПоРасходам.ПоОтчету;
				ИтогоПоОтчетуВВалюте = ИтогоПоОтчетуВВалюте + ВыборкаПоРасходам.ПоОтчету;
				СуммаВВалюте = 0;
			Иначе
				ОбластьМакета.Параметры.ПоОтчетуВВалюте = 0;
				ОбластьМакета.Параметры.ПоУчетуВВалюте = 0;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		// Выводим подвал авансового отчета
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Выборка);
		ОбластьМакета.Параметры.ИтогоПоОтчету                 = ИтогоПоОтчету;
		ОбластьМакета.Параметры.ИтогоПоОтчетувВалюте          = ИтогоПоОтчетуВВалюте;
		ОбластьМакета.Параметры.ИтогоПоУчету                  = ИтогоПоОтчету;
		ОбластьМакета.Параметры.ИтогоПоУчетувВалюте           = ИтогоПоОтчетуВВалюте;
		ОбластьМакета.Параметры.ПредставлениеПодотчетногоЛица = Выборка.ПредставлениеПодотчетногоЛица;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			Выборка.Ссылка
		);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецЕсли
