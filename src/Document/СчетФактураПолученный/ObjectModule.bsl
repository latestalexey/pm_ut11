#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ Исправление Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсправления");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаИсправления");
	КонецЕсли;
	
	Если НЕ Корректировочный Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсходногоДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаИсходногоДокумента");
	КонецЕсли;
	
	Если Дата < Константы.ДатаНачалаПримененияПостановления1137.Получить() Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Валюта");
		МассивНепроверяемыхРеквизитов.Добавить("КодВидаОперации");
	КонецЕсли;
	
	Если ТипСчетаФактуры <> Перечисления.ТипыПолученныхСчетовФактур.ВыставленныйКомитентом Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Покупатель");
		МассивНепроверяемыхРеквизитов.Добавить("ВсегоПоДокументу");
		МассивНепроверяемыхРеквизитов.Добавить("ВсегоПоДокументу.СуммаСНДС");
		МассивНепроверяемыхРеквизитов.Добавить("ВсегоПоДокументу.СтавкаНДС");
		МассивНепроверяемыхРеквизитов.Добавить("ВсегоПоДокументу.СуммаНДС");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ Тогда
		Отказ = ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты);
	КонецЕсли;
	
	ПроверитьЗаполнениеДокументовОснований(Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если НЕ Исправление Тогда
		НомерИсправления = "";
		ДатаИсправления  = '00010101';
	КонецЕсли;
	
	Если НЕ Корректировочный Тогда
		НомерИсходногоДокумента = "";
		ДатаИсходногоДокумента  = '00010101';
		НомерИсправленияИсходногоДокумента = "";
		ДатаИсправленияИсходногоДокумента  = '00010101';
	КонецЕсли;
	
	Если ТипСчетаФактуры <> Перечисления.ТипыПолученныхСчетовФактур.ВыставленныйКомитентом Тогда
		Покупатель = Справочники.Контрагенты.ПустаяСсылка();
		ВсегоПоДокументу.Очистить();
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПроверитьДублиСчетФактуры(Отказ);
		ПроверитьВалютуДокументовОснований(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.СчетФактураПолученный.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ДоходыИРасходыСервер.ОтразитьЖурналУчетаСчетовФактур(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПокупок(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПродаж(ДополнительныеСвойства, Движения, Отказ);
	
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Перем РеквизитыСчетаФактурыОснования, Организация, СчетФактураОснование;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
			
			ДанныеЗаполнения.Свойство("Организация", Организация);
			
			Если ДанныеЗаполнения.Свойство("Корректировочный") И ДанныеЗаполнения.Корректировочный Тогда
				// Заполним реквизиты корректировочного счета-факутуры по реквизитам корректируемого
				
				ТаблицаСчетовФактур = Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(
					?(ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления"),
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.ДокументОснование, "ДокументОснование"),
						ДанныеЗаполнения.ДокументОснование
					),
					Организация
				);
				
				Если ТаблицаСчетовФактур.Количество() > 0 Тогда
					
					ТаблицаСчетовФактур.Сортировать("НомерИсправления УБЫВ");
					Для Каждого СчетФактура Из ТаблицаСчетовФактур Цикл
						Если НЕ СчетФактура.Корректировочный Тогда
							ДанныеЗаполнения.Вставить("НомерИсходногоДокумента",            СчетФактура.Номер);
							ДанныеЗаполнения.Вставить("ДатаИсходногоДокумента",             СчетФактура.Дата);
							ДанныеЗаполнения.Вставить("НомерИсправленияИсходногоДокумента", СчетФактура.НомерИсправления);
							ДанныеЗаполнения.Вставить("ДатаИсправленияИсходногоДокумента",  СчетФактура.ДатаИсправления);
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли ДанныеЗаполнения.Свойство("Исправление") И ДанныеЗаполнения.Исправление Тогда
				// Заполним реквизиты исправления счета-фактуры по реквизитам основания
				
				Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(
					ДанныеЗаполнения.ДокументОснование,
					Организация,
					РеквизитыСчетаФактурыОснования
				);
				
				Если РеквизитыСчетаФактурыОснования.Ссылка = Неопределено
					 И ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
					 
					Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(
							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.ДокументОснование, "ДокументОснование"),
							Организация,
							РеквизитыСчетаФактурыОснования
						);
				КонецЕсли;
				
				СчетФактураОснование = РеквизитыСчетаФактурыОснования.Ссылка;
				
				ДанныеЗаполнения.Вставить("Номер",                              РеквизитыСчетаФактурыОснования.Номер);
				ДанныеЗаполнения.Вставить("Дата",                               РеквизитыСчетаФактурыОснования.Дата);
				ДанныеЗаполнения.Вставить("Валюта",                             РеквизитыСчетаФактурыОснования.Валюта);
				ДанныеЗаполнения.Вставить("Корректировочный",                   РеквизитыСчетаФактурыОснования.Корректировочный);
				ДанныеЗаполнения.Вставить("НомерИсходногоДокумента",            РеквизитыСчетаФактурыОснования.НомерИсходногоДокумента);
				ДанныеЗаполнения.Вставить("ДатаИсходногоДокумента",             РеквизитыСчетаФактурыОснования.ДатаИсходногоДокумента);
				ДанныеЗаполнения.Вставить("НомерИсправленияИсходногоДокумента", РеквизитыСчетаФактурыОснования.НомерИсправленияИсходногоДокумента);
				ДанныеЗаполнения.Вставить("ДатаИсправленияИсходногоДокумента",  РеквизитыСчетаФактурыОснования.ДатаИсправленияИсходногоДокумента);
				
			КонецЕсли;
			
			ЗаполнитьДокументыОснования(ДанныеЗаполнения.ДокументОснование, СчетФактураОснование);
			ДанныеЗаполнения.Вставить("КодВидаОперации", КодВидаОперации(ДанныеЗаполнения.ДокументОснование));
			
		ИначеЕсли ДанныеЗаполнения.Свойство("ТипСчетаФактуры")
		 И ДанныеЗаполнения.ТипСчетаФактуры = Перечисления.ТипыПолученныхСчетовФактур.ВыставленныйКомитентом Тогда
			
			ЗаполнитьСчетФактуруКомитента(ДанныеЗаполнения);
			
		КонецЕсли;
		
		Если НЕ ДанныеЗаполнения.Свойство("ДатаПолучения") Тогда
			Если ДанныеЗаполнения.Свойство("Дата")
			 И ((НЕ ДанныеЗаполнения.Свойство("Исправление")) ИЛИ (НЕ ДанныеЗаполнения.Исправление)) Тогда
				ДанныеЗаполнения.Вставить("ДатаПолучения", ДанныеЗаполнения.Дата);
			ИначеЕсли ДанныеЗаполнения.Свойство("ДатаИсправления")
			 И ДанныеЗаполнения.Свойство("Исправление") И ДанныеЗаполнения.Исправление Тогда
				ДанныеЗаполнения.Вставить("ДатаПолучения", ДанныеЗаполнения.ДатаИсправления);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ЗаполнитьДокументыОснования(Основание, СчетФактура = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СчетФактура) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ТаблицаОснований.ДокументОснование = Корректировка.ДокументОснование ТОГДА
		|		Корректировка.Ссылка
		|	ИНАЧЕ
		|		ТаблицаОснований.ДокументОснование
		|	КОНЕЦ КАК ДокументОснование
		|ИЗ
		|	Документ.СчетФактураПолученный.ДокументыОснования КАК ТаблицаОснований
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления КАК Корректировка
		|	ПО Корректировка.Ссылка = &Основание
		|
		|ГДЕ
		|	ТаблицаОснований.Ссылка = &СчетФактура
		|");
		Запрос.УстановитьПараметр("Основание", Основание);
		Запрос.УстановитьПараметр("СчетФактура", СчетФактура);
		
		МассивОснований = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументОснование");
		Для Каждого ДокументОснование Из МассивОснований Цикл
			НоваяСтрока = ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = ДокументОснование;
		КонецЦикла;
		
	Иначе
		
		НоваяСтрока = ДокументыОснования.Добавить();
		НоваяСтрока.ДокументОснование = Основание;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСчетФактуруКомитента(ДанныеЗаполнения)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.МоментВремени КАК МоментВремени,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ТаблицаТовары.Покупатель КАК Покупатель,
	|	ТаблицаТовары.ДатаСчетаФактуры КАК Дата,
	|	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ТаблицаТовары.СуммаПродажи) КАК СуммаПродажи
	|
	|ПОМЕСТИТЬ КОформлению
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Документ.ОтчетКомитенту КАК ДанныеДокумента
	|	ПО
	|		ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Партнер = &Партнер
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Организация = &Организация
	|	И ТаблицаТовары.Покупатель = &Покупатель
	|	И ТаблицаТовары.ДатаСчетаФактуры = &Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Партнер,
	|	ТаблицаТовары.ДатаСчетаФактуры,
	|	ДанныеДокумента.Контрагент,
	|	ТаблицаТовары.Покупатель,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Ссылка,
	|	ТаблицаТовары.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(КОформлениюОстатки.СуммаПродажи) КАК СуммаПродажи
	|
	|ПОМЕСТИТЬ КОформлениюОстатки
	|ИЗ (
	|	ВЫБРАТЬ
	|		КОформлению.СуммаПродажи КАК СуммаПродажи
	|	ИЗ
	|		КОформлению КАК КОформлению
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		-ТаблицаСумм.СуммаСНДС КАК СуммаПродажи
	|	ИЗ
	|		Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.СчетФактураПолученный.ДокументыОснования КАК ТаблицаОснований
	|		ПО
	|			СчетФактураПолученный.Ссылка = ТаблицаОснований.Ссылка
	|			И ТаблицаОснований.НомерСтроки = 1
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Документ.СчетФактураПолученный.ВсегоПоДокументу КАК ТаблицаСумм
	|		ПО
	|			СчетФактураПолученный.Ссылка = ТаблицаСумм.Ссылка
	|	
	|	ГДЕ
	|		СчетФактураПолученный.ТипСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ТипыПолученныхСчетовФактур.ВыставленныйКомитентом)
	|		И СчетФактураПолученный.Проведен
	|		И ТаблицаОснований.ДокументОснование.Партнер = &Партнер
	|		И СчетФактураПолученный.Контрагент = &Контрагент
	|		И СчетФактураПолученный.Организация = &Организация
	|		И СчетФактураПолученный.Покупатель = &Покупатель
	|		И НАЧАЛОПЕРИОДА(СчетФактураПолученный.Дата, ДЕНЬ) = &Дата
	|	) КАК КОформлениюОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОформлению.Ссылка КАК Ссылка,
	|	КОформлению.Контрагент КАК Контрагент,
	|	КОформлению.Организация КАК Организация,
	|	КОформлению.Покупатель КАК Покупатель,
	|	КОформлению.Дата КАК Дата,
	|	КОформлению.СтавкаНДС КАК СтавкаНДС,
	|	КОформлению.СуммаПродажи КАК СуммаПродажи,
	|	КОформлениюОстатки.СуммаПродажи КАК СуммаПродажиОстаток
	|
	|ИЗ
	|	КОформлению КАК КОформлению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		КОформлениюОстатки КАК КОформлениюОстатки
	|	ПО
	|		ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	КОформлению.МоментВремени УБЫВ,
	|	КОформлению.СтавкаНДС
	|
	|ИТОГИ
	|	СУММА(СуммаПродажи),
	|	МАКСИМУМ(СуммаПродажиОстаток)
	|ПО
	|	ОБЩИЕ
	|");
	Запрос.УстановитьПараметр("Партнер",     ДанныеЗаполнения.Партнер);
	Запрос.УстановитьПараметр("Контрагент",  ДанныеЗаполнения.Контрагент);
	Запрос.УстановитьПараметр("Организация", ДанныеЗаполнения.Организация);
	Запрос.УстановитьПараметр("Покупатель",  ДанныеЗаполнения.Покупатель);
	Запрос.УстановитьПараметр("Дата",        ДанныеЗаполнения.Дата);
	
	ВыборкаПоИтогам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаПоИтогам.Следующий() Тогда
		
		Если ВыборкаПоИтогам.СуммаПродажиОстаток >= ВыборкаПоИтогам.СуммаПродажи Тогда
			
			Выборка = ВыборкаПоИтогам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				ДокументыОснования.Добавить().ДокументОснование = Выборка.Ссылка;
				
				СтрокаСумм = ВсегоПоДокументу.Добавить();
				СтрокаСумм.СуммаСНДС = Выборка.СуммаПродажи;
				СтрокаСумм.СтавкаНДС = Выборка.СтавкаНДС;
				
			КонецЦикла;
			
		Иначе
			
			СуммаКРаспределению = ВыборкаПоИтогам.СуммаПродажиОстаток;
			
			Выборка = ВыборкаПоИтогам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.СуммаПродажи <= СуммаКРаспределению Тогда
					
					ДокументыОснования.Добавить().ДокументОснование = Выборка.Ссылка;
					
					СтрокаСумм = ВсегоПоДокументу.Добавить();
					СтрокаСумм.СуммаСНДС = Выборка.СуммаПродажи;
					СтрокаСумм.СтавкаНДС = Выборка.СтавкаНДС;
					
					СуммаКРаспределению = СуммаКРаспределению - Выборка.СуммаПродажи;
					
				Иначе
					
					ДокументыОснования.Добавить().ДокументОснование = Выборка.Ссылка;
					
					СтрокаСумм = ВсегоПоДокументу.Добавить();
					СтрокаСумм.СуммаСНДС = СуммаКРаспределению;
					СтрокаСумм.СтавкаНДС = Выборка.СтавкаНДС;
					
					СуммаКРаспределению = 0;
					
				КонецЕсли;
				Если СуммаКРаспределению = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ДокументыОснования.Свернуть("ДокументОснование");
		ВсегоПоДокументу.Свернуть("СтавкаНДС", "СуммаСНДС");
		
		Для Каждого СтрокаСумм Из ВсегоПоДокументу Цикл
			ПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаСумм.СтавкаНДС);
			СтрокаСумм.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаСумм.СуммаСНДС, ПроцентНДС, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.Свойство("Валюта") Тогда
		ДанныеЗаполнения.Вставить("Валюта", Константы.ВалютаРегламентированногоУчета.Получить());
	КонецЕсли;
	
КонецПроцедуры

Функция КодВидаОперации(Основание = Неопределено) Экспорт
	
	Если (НЕ ЗначениеЗаполнено(Основание)) И ДокументыОснования.Количество() > 0 Тогда
		Основание = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	КодВидаОперации = "";
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		КодВидаОперации = "03";
		
	Иначе
		КодВидаОперации = "01";
		
	КонецЕсли;
	
	Возврат КодВидаОперации;
	
КонецФункции

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Валюта = ДоходыИРасходыСервер.ПолучитьВалютуРегламентированногоУчета(Валюта);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ПроверитьЗаполнениеДокументовОснований(Отказ)
	
	МассивОснований = Новый Массив;
	ЭтоЗакупкаУПоставщика = Неопределено;
	ТипОснования = Неопределено;
	
	Для Каждого СтрокаОснование Из ДокументыОснования Цикл
		
		Если ТипЗнч(СтрокаОснование.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		 ИЛИ ТипЗнч(СтрокаОснование.ДокументОснование) = Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов")
		 ИЛИ ТипЗнч(СтрокаОснование.ДокументОснование) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
			Если ЭтоЗакупкаУПоставщика = Неопределено Тогда
				ЭтоЗакупкаУПоставщика = Истина;
			ИначеЕсли НЕ ЭтоЗакупкаУПоставщика Тогда
				СообщитьОбОшибкеТиповОснований(СтрокаОснование.НомерСтроки, Отказ);
			КонецЕсли;
			
		ИначеЕсли ТипОснования = Неопределено Тогда
			ТипОснования = ТипЗнч(СтрокаОснование.ДокументОснование);
			
		ИначеЕсли ТипОснования <> Неопределено И ТипОснования <> ТипЗнч(СтрокаОснование.ДокументОснование) Тогда
			СообщитьОбОшибкеТиповОснований(СтрокаОснование.НомерСтроки, Отказ);
			
		КонецЕсли;
		
		Если МассивОснований.Найти(СтрокаОснование.ДокументОснование) <> Неопределено Тогда
			СообщитьОбОшибкеДублейОснований(СтрокаОснование.НомерСтроки, СтрокаОснование.ДокументОснование, Отказ);
		КонецЕсли; 
		
		МассивОснований.Добавить(СтрокаОснование.ДокументОснование);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкеТиповОснований(НомерСтроки, Отказ)
	
	ТекстСообщения = НСтр("ru = 'Запрещено выбирать в качестве оснований документы различных типов.'");
	Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДокументыОснования", НомерСтроки, "ДокументОснование");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
	
КонецПроцедуры

Процедура СообщитьОбОшибкеДублейОснований(НомерСтроки, Основание, Отказ)
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'В строке %1 в качестве документа-основания повторно указан документ %2.'"),
		НомерСтроки,
		Основание
	);
	Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДокументыОснования", НомерСтроки, "ДокументОснование");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
	
КонецПроцедуры

Процедура ПроверитьДублиСчетФактуры(Отказ)
	
	Если Исправление ИЛИ Корректировочный Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.Ссылка <> &Ссылка
	|	И ТаблицаОснований.ДокументОснование В(&СписокОснований)
	|	И ТаблицаОснований.Ссылка.Проведен
	|	И (ТаблицаОснований.Ссылка.Организация = &Организация
	|		ИЛИ &Организация = Неопределено)
	|	И (НЕ ТаблицаОснований.Ссылка.Исправление)
	|	И (НЕ ТаблицаОснований.ДокументОснование ССЫЛКА Документ.ОтчетКомитенту)
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СписокОснований", ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для документа %1 по организации %2 уже введен счет-фактура'"),
			Выборка.ДокументОснование,
			Организация
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"ДокументыОснования",
			,
			Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВалютуДокументовОснований (Отказ)
	
	Если Исправление ИЛИ Корректировочный Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаОснований.ДокументОснование.Валюта
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОснований.ДокументОснование.Валюта"
	);	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() > 1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Документы-основания счета-фактуры должны быть оформлены в одной валюте'"),
			ЭтотОбъект,
			"ДокументыОснования",
			,
			Отказ
		);
	КонецЕсли;
	
КонецПроцедуры	

#КонецЕсли