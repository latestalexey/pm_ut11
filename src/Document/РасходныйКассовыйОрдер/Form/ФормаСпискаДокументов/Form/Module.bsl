///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ИспользоватьНесколькоКасс	= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс");
	ЗаполнитьСписокХозяйственныхОпераций();
	
	ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	
	ИспользоватьПланированиеДенежныхСредств = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеДенежныхСредств");
	Элементы.СтраницаРаспоряженияНаОплату.Видимость = ИспользоватьПланированиеДенежныхСредств;
	Элементы.СтраницаЗаказыКОплате.Видимость = НЕ ИспользоватьПланированиеДенежныхСредств;
	Элементы.СтраницаВыплатаЗарплатыПоЗаявкам.Видимость = ИспользоватьНачислениеЗарплаты И ИспользоватьПланированиеДенежныхСредств;
	Элементы.СтраницаВыплатаЗарплаты.Видимость = ИспользоватьНачислениеЗарплаты И НЕ ИспользоватьПланированиеДенежныхСредств;
	Элементы.РасходныеКассовыеОрдераКассаОтбор.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс");
	
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям;
	
	УстановитьПараметрыДинамическихСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// МеханизмВнешнегоОборудования
	Если ИспользоватьПодключаемоеОборудование // Проверка на включенную ФО "Использовать ВО"
	   И МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
		ОписаниеОшибки = "";

		ПоддерживаемыеТипыВО = Новый Массив();
		ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

		Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
			ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:
			                      |""%ОписаниеОшибки%"".'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	// Конец МеханизмВнешнегоОборудования

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			//Преобразуем предварительно к ожидаемому формату
			Если Параметр[1] = Неопределено Тогда
				ОбработатьШтрихкоды(Новый Структура("Штрихкод, Количество", Параметр[0], 1)); // Достаем штрихкод из основных данных
			Иначе
				ОбработатьШтрихкоды(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1)); // Достаем штрихкод из дополнительных данных
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_РасходныйКассовыйОрдер" Тогда
		ОбновитьДиначескиеСписки();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// МеханизмВнешнегоОборудования
	ПоддерживаемыеТипыВО = Новый Массив();
	ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
	// Конец МеханизмВнешнегоОборудования
	
	СохранитьРабочиеЗначенияПолейФормы(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Организация = Настройки.Получить("Организация");
	Касса = Настройки.Получить("Касса");
	Работник = Настройки.Получить("Работник");
	ХозяйственнаяОперация = Настройки.Получить("ХозяйственнаяОперация");
	УстановитьОтборДинамическихСписков();
	
	Вариант = Настройки.Получить("ДатаПлатежа.Вариант");
	Если ЗначениеЗаполнено(Вариант) Тогда
		ДатаПлатежа.Вариант = Вариант;
	КонецЕсли;
	УстановитьПараметрыДинамическихСписков();
	
	ВыплатаРаботнику = ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику;
	
	Элементы.РаботникОтбор.Доступность = ВыплатаРаботнику;
	Элементы.ВыплатаЗарплатыРаботникОтбор.Доступность = ВыплатаРаботнику;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьДиначескиеСписки();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиКОплатеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элементы.ЗаявкиКОплате.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОплатеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элементы.ЗаказыКОплате.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗарплатыПоЗаявкамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элементы.ВыплатаЗарплатыПоЗаявкам.ТекущиеДанные.Ведомость);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗарплатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элементы.ВыплатаЗарплаты.ТекущиеДанные.Ведомость);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходныеКассовыеОрдераКассаОтборПриИзменении(Элемент)
	КассаОтборПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаОплатуКассаОтборПриИзменении(Элемент)
	КассаОтборПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаОплатуДатаПлатежаОтборПриИзменении(Элемент)
	УстановитьПараметрыДинамическихСписков();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОплатеКассаОтборПриИзменении(Элемент)
	КассаОтборПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКОплатеДатаПлатежаОтборПриИзменении(Элемент)
	УстановитьПараметрыДинамическихСписков();
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗарплатыПоЗаявкамКассаОтборПриИзменении(Элемент)
	КассаОтборПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаПоВедомостямПриИзменении(Элемент)
	
	УстановитьПараметрыДинамическихСписков();
	
	Элементы.РаботникОтбор.Доступность = ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику");
	
КонецПроцедуры

&НаКлиенте
Процедура РаботникОтборПриИзменении(Элемент)
	УстановитьПараметрыДинамическихСписков();
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗарплатыВыплатаПоВедомостямПриИзменении(Элемент)
	
	УстановитьПараметрыДинамическихСписков();
	
	Элементы.ВыплатаЗарплатыРаботникОтбор.Доступность = ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатаЗарплатыРаботникОтборПриИзменении(Элемент)
	УстановитьПараметрыДинамическихСписков();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СоздатьВыдачаДенежныхСредствПодотчетнику(Команда)
	
	СоздатьРасходныйКассовыйОрдер(2);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратОплатыКлиенту(Команда)

	СоздатьРасходныйКассовыйОрдер(3);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПрочиеРасходы(Команда)
	
	СоздатьРасходныйКассовыйОрдер(6);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПрочаяВыдачаДенежныхСредств(Команда)

	СоздатьРасходныйКассовыйОрдер(7);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСдачаДенежныхСредствВБанк(Команда)

	СоздатьРасходныйКассовыйОрдер(0);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыдачаДенежныхСредствВДругуюКассу(Команда)

	СоздатьРасходныйКассовыйОрдер(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыдачаДенежныхСредствВКассуККМ(Команда)
	
	СоздатьРасходныйКассовыйОрдер(4);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьОплатаДенежныхСредствВДругуюОрганизацию(Команда)
	
	СоздатьРасходныйКассовыйОрдер(5);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВозвратДенежныхСредствВДругуюОрганизацию(Команда)
	СоздатьРасходныйКассовыйОрдер(8);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВнутреннююПередачуДенежныхСредств(Команда)
	
	СоздатьРасходныйКассовыйОрдер(9);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонвертацияВалюты(Команда)
	
	СоздатьРасходныйКассовыйОрдер(10);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыплатаЗаработнойПлатыПоВедомостям(Команда)
	
	СоздатьРасходныйКассовыйОрдер(11);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВыплатаЗаработнойПлатыРаботнику(Команда)
	
	СоздатьРасходныйКассовыйОрдер(12);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьДокумент(Команда)
	
	СтрокаТаблицы = Элементы.ЗаказыКОплате.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
	
		СтруктураОснование = Новый Структура("Организация, ЗаказПоставщику, СуммаКОплате",
			СтрокаТаблицы.Организация,
			СтрокаТаблицы.Ссылка,
			СтрокаТаблицы.СуммаКОплате
		);
		СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
		ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, Элементы.РасходныеКассовыеОрдера);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатитьЗарплатуПоЗаявкам(Команда)
	
	СоздатьОрдерНаВыплатуЗарплаты(Элементы.ВыплатаЗарплатыПоЗаявкам.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыплатитьЗарплату(Команда)
	
	СоздатьОрдерНаВыплатуЗарплаты(Элементы.ВыплатаЗарплаты.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОплатуПоКредитамДепозитам(Команда)
	
	Если Команда.Имя = "СоздатьОплатаПоКредитам" Тогда
		ИндексОперации = 13;
	ИначеЕсли Команда.Имя = "СоздатьВыплатаПоДепозитам" Тогда
		ИндексОперации = 14;
	ИначеЕсли Команда.Имя = "СоздатьВыплатаПоВыданнымЗаймам" Тогда
		ИндексОперации = 15;
	КонецЕсли;
	
	СоздатьРасходныйКассовыйОрдер(ИндексОперации);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура КассаОтборПриИзмененииНаСервере()
	
	Организация = Справочники.Кассы.ПолучитьРеквизитыКассы(Касса).Организация;
	УстановитьОтборДинамическихСписков();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.РасходныйКассовыйОрдер.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			Элементы.РасходныеКассовыеОрдера.ТекущаяСтрока = Ссылка;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаРасходныеКассовыеОрдера;
		КонецЕсли;
		
		ОткрытьЗначение(Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Управление элементами формы

&НаСервере
Процедура УстановитьВидимостьКассы()
	
	КассаВидимость = Не ЗначениеЗаполнено(Касса);
	Элементы.РасходныеКассовыеОрдераКасса.Видимость = КассаВидимость;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ЗаявкиКОплатеКасса");
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивЭлементов,
		?(КассаВидимость, МассивЭлементов, Новый Массив) // МассивВидимыхРеквизитов
	);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Создание документов

&НаКлиенте
Процедура СоздатьРасходныйКассовыйОрдер(ХозяйственнаяОперацияИндекс)

	ХозяйственнаяОперацияИндекс = ?(ХозяйственнаяОперацияИндекс > 1,?(ИспользоватьНесколькоКасс, ХозяйственнаяОперацияИндекс, ХозяйственнаяОперацияИндекс-1), ХозяйственнаяОперацияИндекс);
 	ХозяйственнаяОперация = СписокХозяйственныхОпераций[ХозяйственнаяОперацияИндекс].Значение;

	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("Основание", Новый Структура("ХозяйственнаяОперация", ХозяйственнаяОперация));
	ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, Элементы.РасходныеКассовыеОрдера);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьОрдерНаВыплатуЗарплаты(СтрокаТаблицы)
	
	Если СтрокаТаблицы <> Неопределено Тогда
		
		Если СтрокаТаблицы.Свойство("Касса") Тогда
			Если ЗначениеЗаполнено(СтрокаТаблицы.Касса) Тогда
				ОснованиеКасса = СтрокаТаблицы.Касса;
			Иначе
				ОснованиеКасса = Касса;
			КонецЕсли;
		Иначе
			ОснованиеКасса = Неопределено;
		КонецЕсли;
		
		СтруктураОснование = Новый Структура("Касса, Организация, Работник, Ведомость, ХозяйственнаяОперация",
			ОснованиеКасса,
			СтрокаТаблицы.Организация,
			Работник,
			СтрокаТаблицы.Ведомость,
			ХозяйственнаяОперация
		);
		СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
		ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта", СтруктураПараметры, Элементы.РасходныеКассовыеОрдера);
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ЗаполнитьСписокХозяйственныхОпераций()

	СписокХозяйственныхОпераций.Очистить();
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	Если ИспользоватьНесколькоКасс Тогда
		СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	КонецЕсли;
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочиеРасходы);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаПоДепозитам);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаПоЗаймамВыданным);
	
	Элементы.ГруппаСоздать.ПодчиненныеЭлементы.РасходныеКассовыеОрдераСоздатьВыдачаДенежныхСредствВДругуюКассу.Видимость = ИспользоватьНесколькоКасс;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРабочиеЗначенияПолейФормы(СохранитьНеопределено = Ложь)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТекущаяОрганизация", , ?(СохранитьНеопределено, Неопределено, Организация));
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ТекущаяКасса", , ?(СохранитьНеопределено, Неопределено, Касса));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическихСписков()
	
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.Добавить(Организация);
	
	Если ЗначениеЗаполнено(Организация)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ОбособленноеПодразделение
		|	И Организации.ГоловнаяОрганизация = &Организация
		|	И (Организации.ДопускаютсяВзаиморасчетыСКлиентамиЧерезГоловнуюОрганизацию
		|			ИЛИ Организации.ДопускаютсяВзаиморасчетыСПоставщикамиЧерезГоловнуюОрганизацию)");
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СписокОрганизаций.Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СписокКасс = Новый СписокЗначений;
	СписокКасс.Добавить(Касса);
	СписокКасс.Добавить(Справочники.Кассы.ПустаяСсылка());
	
	Для Каждого ДинамическийСписок Из МассивДинамическихСписков() Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДинамическийСписок.Отбор, "Организация", СписокОрганизаций, ВидСравненияКомпоновкиДанных.ВСписке,, ЗначениеЗаполнено(Организация));
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДинамическийСписок.Отбор, "Касса", СписокКасс, ВидСравненияКомпоновкиДанных.ВСписке,, ЗначениеЗаполнено(Касса));
	КонецЦикла;
	
	СохранитьРабочиеЗначенияПолейФормы();
	УстановитьВидимостьКассы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДинамическихСписков()
	
	ДатаОстатков = ?(ЗначениеЗаполнено(ДатаПлатежа.Дата), ДатаПлатежа.Дата, Дата(2299,1,1));
	Граница = Новый Граница(КонецДня(ДатаОстатков), ВидГраницы.Включая);
	ЗаявкиКОплате.Параметры.УстановитьЗначениеПараметра("ДатаПлатежа", Граница);
	ЗаказыКОплате.Параметры.УстановитьЗначениеПараметра("ДатаПлатежа", Граница);
	
	Если Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
		ВыплатаЗарплатыПоЗаявкам.Параметры.УстановитьЗначениеПараметра("Работник", Работник);
		ВыплатаЗарплатыПоЗаявкам.Параметры.УстановитьЗначениеПараметра(
			"ВыплатаПоВедомости",
			ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям
		);
		
		ВыплатаЗарплаты.Параметры.УстановитьЗначениеПараметра("Работник", Работник);
		ВыплатаЗарплаты.Параметры.УстановитьЗначениеПараметра(
			"ВыплатаПоВедомости",
			ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям
		);
	КонецЕсли;
	
	Элементы.ЗаявкиКОплате.Обновить();
	Элементы.ЗаказыКОплате.Обновить();
	Элементы.ВыплатаЗарплатыПоЗаявкам.Обновить();
	Элементы.ВыплатаЗарплаты.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДиначескиеСписки()
	
	Элементы.ЗаявкиКОплате.Обновить();
	Элементы.ЗаказыКОплате.Обновить();
	Элементы.ВыплатаЗарплатыПоЗаявкам.Обновить();
	Элементы.ВыплатаЗарплаты.Обновить();
	
КонецПроцедуры

&НаСервере
Функция МассивДинамическихСписков()

	МассивСписков = Новый Массив;
	МассивСписков.Добавить(РасходныеКассовыеОрдера);
	МассивСписков.Добавить(ЗаявкиКОплате);
	МассивСписков.Добавить(ЗаказыКОплате);
	МассивСписков.Добавить(ВыплатаЗарплатыПоЗаявкам);
	МассивСписков.Добавить(ВыплатаЗарплаты);
	
	Возврат МассивСписков;

КонецФункции

