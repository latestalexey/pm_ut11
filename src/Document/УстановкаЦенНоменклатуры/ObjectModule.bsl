#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет наборы значений доступа
// по объекту в таблице с полями:
//  - НомерНабора     Число                                     (необязательно, если набор один),
//  - ВидДоступа      ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//  - ЗначениеДоступа Неопределено, СправочникСсылка или др.    (обязательно),
//  - Чтение          Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Добавление      Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Изменение       Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Удаление        Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора).
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	Если ВидыЦен.Количество() = 0 Тогда
		
		Строка = Таблица.Добавить();
		Строка.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПустаяСсылка();
		Строка.ЗначениеДоступа = Справочники.ГруппыПользователей.ВсеПользователи;
		
	Иначе
	
		Для Каждого СтрокаВидыЦен Из ВидыЦен Цикл
			
			Строка = Таблица.Добавить();
			Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ВидыЦен;
			Строка.ЗначениеДоступа = СтрокаВидыЦен.ВидЦены;
			
		КонецЦикла;
		
	КонецЕсли;
	 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(ЭтотОбъект, РежимЗаписи, Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеЦенНоменклатуры") 
	 И Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован
	 И Не Пользователи.РолиДоступны("УстановкаЦенНоменклатурыБезСогласования") Тогда
		
		ТекстОшибки = НСтр("ru='Нет прав на установку цен номенклатуры без согласования'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Ссылка,
			,
			,
			Отказ
		);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ЗаполнитьПоПоступлениюТоваровУслуг(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ЗаполнитьПоЗаказуПоставщику(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПорчаТоваров") Тогда
		
		ЗаполнитьПоПорчеТоваров(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.СборкаТоваров") Тогда
		
		ЗаполнитьПоСборкеТоваров(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
		
		ЗаполнитьПоПрочемуОприходованиюТоваров(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИзменениеАссортимента") Тогда
		
		ЗаполнитьПоИзменениюАссортимента(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	Документы.УстановкаЦенНоменклатуры.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	Ценообразование.ОтразитьЦеныНоменклатуры(ДополнительныеСвойства, Движения, Отказ);

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	ИнициализироватьДокумент();
	Согласован = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

// Процедура заполнения документа на основании заявки на возврат товаров от клиента.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента - Ссылка на заявку
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоПоступлениюТоваровУслуг(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Характеристика КАК Характеристика,
	|	ПоступлениеТоваровУслугТовары.Упаковка КАК Упаковка,
	|	ВидыЦен.Ссылка КАК ВидЦены,
	|	0 КАК Цена
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
	|		ПО (ВидыЦен.УстанавливатьЦенуПриВводеНаОсновании)
	|			И (НЕ ВидыЦен.ПометкаУдаления)
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить установку цен номенклатуры на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;
	Иначе
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснование);
		
		Товары.Загрузить(РезультатЗапроса.Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения документа на основании заявки на возврат товаров от клиента.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента - Ссылка на заявку
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоЗаказуПоставщику(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Номенклатура   КАК Номенклатура,
	|	ЗаказПоставщикуТовары.Характеристика КАК Характеристика,
	|	ЗаказПоставщикуТовары.Упаковка       КАК Упаковка
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить установку цен номенклатуры на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;
	Иначе
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснование);
		
		Товары.Загрузить(РезультатЗапроса.Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения документа на основании заявки на возврат товаров от клиента.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента - Ссылка на заявку
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоПорчеТоваров(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПорчаТоваровТовары.НоменклатураОприходование           КАК Номенклатура,
	|	ПорчаТоваровТовары.ХарактеристикаОприходование         КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка
	|ИЗ
	|	Документ.ПорчаТоваров.Товары КАК ПорчаТоваровТовары
	|ГДЕ
	|	ПорчаТоваровТовары.Ссылка = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить установку цен номенклатуры на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;
	Иначе
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснование);
		
		Товары.Загрузить(РезультатЗапроса.Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения документа на основании сборки товаров.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента - Ссылка на заявку
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоСборкеТоваров(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос(
	"
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка
	|ИЗ
	|	Документ.СборкаТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Ссылка.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументСборкаТоваров.Номенклатура КАК Номенклатура,
	|	ДокументСборкаТоваров.Характеристика КАК Характеристика,
	|	ДокументСборкаТоваров.Упаковка КАК Упаковка
	|ИЗ
	|	Документ.СборкаТоваров КАК ДокументСборкаТоваров
	|ГДЕ
	|	ДокументСборкаТоваров.Ссылка = &Ссылка
	|	И ДокументСборкаТоваров.ТипОперации = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих)
	|
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить установку цен номенклатуры на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;
	Иначе
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснование);
		
		Товары.Загрузить(РезультатЗапроса.Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения документа на основании прочего оприходования товаров.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента - Ссылка на заявку
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоПрочемуОприходованиюТоваров(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Номенклатура           КАК Номенклатура,
	|	Товары.Характеристика         КАК Характеристика,
	|	Товары.Упаковка               КАК Упаковка
	|ИЗ
	|	Документ.ПрочееОприходованиеТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка"
	);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить установку цен номенклатуры на основании документа %1'"),
			ДокументОснование
		);
		ВызватьИсключение Текст;
	Иначе
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснование);
		
		Товары.Загрузить(РезультатЗапроса.Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения документа на основании изменения ассортимента.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.ИзменениеАссортимента - ссылка на документ
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоИзменениюАссортимента(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)
	
	АссортиментСервер.ПроверитьНеобходимостьУстановкиЦенНаОсновании(ДанныеЗаполнения.Ссылка);
	
	РезультатПакетаВидыЦенИТовары = АссортиментСервер.РезультатПакетаВидыЦенИТоварыДляУстановкиПоАссортименту(ДанныеЗаполнения.Ссылка);
	ТаблицаВидовЦен   = РезультатПакетаВидыЦенИТовары[1].Выгрузить();
	ТаблицаТоваров    = РезультатПакетаВидыЦенИТовары[0].Выгрузить();
	
	Если ТаблицаВидовЦен.Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru='Нет доступных видов цен для установки цен номенклатуры.
		|Оформление документа не требуется. 
		|Заполнение документа не выполнено.'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДанныеЗаполнения.Ссылка);
		
		ВызватьИсключение ТекстОшибки;
		
	Иначе	
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ДокументОснование", ДокументОснование);
		
		ВидыЦен.Загрузить(ТаблицаВидовЦен);
		Товары.Загрузить(ТаблицаТоваров);
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует установку цен номенклатуры.
//
Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный = Пользователи.ТекущийПользователь();

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеЦенНоменклатуры")
	 Или Пользователи.РолиДоступны("УстановкаЦенНоменклатурыБезСогласования") Тогда
		Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован;
	Иначе
	    Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован;
	КонецЕсли;
	
КонецПроцедуры



#КонецЕсли