&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаСервере
Перем КурсыВалют; // Кэш курсов валют
&НаСервере
Перем ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров; // Кэш, используемый для быстрого поиска строки дерева по номенклатуре
&НаСервере
Перем СоответствиеВидовЦенИменамКолонокТаблицыТоваров; // Кэш имет колонок видов цен

&НаКлиенте
Перем СтараяНоменклатура; // Используется в механизмах обработчиков событий табличной части Товары
&НаКлиенте
Перем СтараяХарактеристика; // Используется в механизмах обработчиков событий табличной части Товары
&НаКлиенте
Перем ИзмененаЦена; // Используется в механизмах обработчиков событий табличной части Товары

&НаКлиенте
Перем СтрокаДобавлена;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ФлагОткрытияФормы = Истина;
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НомерВПределахДня = ДатаДокумента(Объект.Дата) - НачалоДня(ДатаДокумента(Объект.Дата)) + 1;
	Иначе
		НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокумента(Объект.Дата), Объект.Ссылка);
		Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
	КонецЕсли;
	
	Элементы.НомерВПределахДня.Видимость = НомерВПределахДня <> 1;
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ИспользоватьЦеновыеГруппы              = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ИспользоватьНесколькоВидовЦен          = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен");
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	ПравоРегистрацииШтрихкодовНоменклатурыДоступно = ШтрихкодированиеНоменклатурыСервер.ПравоРегистрацииШтрихкодовНоменклатурыДоступно();
	
	// Таблица настроек СКД для видов цен с алгоритмом расчета цены "Заполнять по данным ИБ".
	ТаблицаНастройкиКомпоновкиДанных = ЗагрузитьТаблицуНастройкиКомпоновкиДанных();
	
	ИнициализироватьВыбранныеЦены(ТаблицаНастройкиКомпоновкиДанных);
	
	АдресХранилищаНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(ТаблицаНастройкиКомпоновкиДанных, УникальныйИдентификатор);
	
	ОтображатьВлияющиеЦены = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(,"УстановкаЦенНоменклатурыОтображатьВлияющиеЦены");
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ЗаполнитьДокумент();
	Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
		АдресХранилищаДанныхДляРасчетаВычисляемыхЦенНаКлиенте = ПоместитьВоВременноеХранилище(
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте,
		УникальныйИдентификатор
	);
	КонецЕсли;
	
	УстановитьРассчитыватьАвтоматически(Истина);
	УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(Истина);
	УстановитьАвтоматическиДобавлятьХарактеристики(Истина);
	ЗафиксироватьКолонкуНоменклатура(Истина);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьДоступностьЭлементовПоСтатусуСервер();
	КонецЕсли;
	
	УстановитьСостояние();
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.Основание.Видимость = Ложь;
	КонецЕсли;
	
	Если ВыбранныеЦены.Количество() = 1 Тогда
		Элементы.ВидыЦенКомандаДалее.Видимость = Ложь;
		Элементы.ВидыЦенКомандаНазад.Видимость = Ложь;
		Элементы.ГруппаВидыЦен.Видимость       = Ложь;
	КонецЕсли;
	
	ИмяДополнительнойКолонки = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	УстановитьДоступностьКомандБуфераОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");

	Если ПроверитьЗаполнениеПараметровПриОткрытии Тогда
		Если ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанных() Тогда
			Если ЗначениеЗаполнено(АдресХранилищаДанныхДляРасчетаВычисляемыхЦенНаКлиенте) Тогда
				ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПолучитьИзВременногоХранилища(АдресХранилищаДанныхДляРасчетаВычисляемыхЦенНаКлиенте);
				РассчитатьВычисляемыеЦеныНаКлиенте(ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
			РассчитатьВычисляемыеЦеныНаКлиенте(ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ФлагОткрытияФормы = Истина Тогда
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			НомерВПределахДня = ДатаДокумента(Объект.Дата) - НачалоДня(ДатаДокумента(Объект.Дата)) + 1;
		Иначе
			НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокумента(Объект.Дата), Объект.Ссылка);
			Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
		КонецЕсли;
		
		// Таблица настроек СКД для видов цен с алгоритмом расчета цены "Заполнять по данным ИБ".
		ТаблицаНастройкиКомпоновкиДанных = ЗагрузитьТаблицуНастройкиКомпоновкиДанных();
		
		ИнициализироватьВыбранныеЦены(ТаблицаНастройкиКомпоновкиДанных);
		
		ЗаполнитьДокумент();
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ВыбранныеЦеныИзменены И ДеревоЦен.ПолучитьЭлементы().Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Состав цен изменился. Необходимо перейти к установке цен.'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись
	     Или ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПроверитьКорректностьЗаполненияДокумента(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Модифицированность ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПоместитьВидыЦенВТабличнуюЧасть(ТекущийОбъект, Истина);
		ПоместитьЦеныВТабличнуюЧасть(ТекущийОбъект, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	УстановитьСостояние();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ДеревоЦен.ПолучитьЭлементы().Количество() = 0 Тогда
	
		ТекстОшибки = НСтр("ru='Не введено ни одной строки в список ""Товары"".'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Объект.Ссылка,
			"ДеревоЦен",
			,
			Отказ
		);
		
	Иначе
		
		Если Объект.Проведен Тогда
			ПроверитьКорректностьЗаполненияДокумента(Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если Настройки.Получить("ОтображениеТаблицыЦен") <> Неопределено Тогда
		ОтображениеТаблицыЦен = Строка(Элементы.ДеревоЦен.Отображение);
		Настройки["ОтображениеТаблицыЦен"] = ОтображениеТаблицыЦен;
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(,"УстановкаЦенНоменклатурыОтображатьВлияющиеЦены", ОтображатьВлияющиеЦены);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОтображениеТаблицыЦен = Настройки.Получить("ОтображениеТаблицыЦен");
	
	Если ЗначениеЗаполнено(ОтображениеТаблицыЦен) Тогда
		Если ОтображениеТаблицыЦен = "Дерево" Тогда
			Элементы.ДеревоЦен.Отображение = ОтображениеТаблицы.Дерево;
		ИначеЕсли ОтображениеТаблицыЦен = "ИерархическийСписок" Тогда
			Элементы.ДеревоЦен.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		ИначеЕсли ОтображениеТаблицыЦен = "Список" Тогда
			Элементы.ДеревоЦен.Отображение = ОтображениеТаблицы.Список;
		КонецЕсли;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		
		УстановитьРассчитыватьАвтоматически(Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ДеревоЦенРассчитыватьАвтоматически", "Видимость", Ложь);
		
	#Иначе
		
		РассчитыватьАвтоматически = Настройки.Получить("РассчитыватьАвтоматически");
		УстановитьРассчитыватьАвтоматически(РассчитыватьАвтоматически);
		
	#КонецЕсли
	
	ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре = Настройки.Получить("ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре");
	УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре);
	
	ЗафиксироватьКолонкуНоменклатура = Настройки.Получить("ЗафиксироватьКолонкуНоменклатура");
	ЗафиксироватьКолонкуНоменклатура(ЗафиксироватьКолонкуНоменклатура);
	
	ОтображатьВлияющиеЦены = Настройки.Получить("ОтображатьВлияющиеЦены");
	Элементы.ДеревоЦенПереключательОтображатьВлияющиеЦены.Пометка = ОтображатьВлияющиеЦены;
	
	АвтоматическиДобавлятьХарактеристики = Настройки.Получить("АвтоматическиДобавлятьХарактеристики");
	УстановитьАвтоматическиДобавлятьХарактеристики(АвтоматическиДобавлятьХарактеристики);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокумента(Объект.Дата), Объект.Ссылка);
	Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
	
	Элементы.НомерВПределахДня.Видимость = НомерВПределахДня <> 1;
	
	ОбновитьСтарыеЦеныНоменклатуры();
	
	Если ДеревоЦен.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НужноПересчитывать = Ложь;
	
	// Чтобы узнать необходимость пересчета - проверим, что у выбранных цен
	// есть влияющие цены с валютой, отличной от валюты выбранной цены.
	
	Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
		
		Если ТекСтрока.Выбрана И
			ТекСтрока.СпособЗаданияЦены <> ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.Вручную") Тогда
			
			Для Каждого ВлияющаяЦена Из ТекСтрока.ВлияющиеЦены Цикл
				
				НайденнаяСтрока = Неопределено;
				Для Каждого ВыбраннаяЦена Из ВыбранныеЦены Цикл
					Если ВыбраннаяЦена.Ссылка = ВлияющаяЦена.Значение Тогда
						НайденнаяСтрока = ВыбраннаяЦена;
					КонецЕсли;
				КонецЦикла;
					
				Если НайденнаяСтрока = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекСтрока.Валюта <> НайденнаяСтрока.Валюта Тогда
					НужноПересчитывать = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НужноПересчитывать Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не НужноПересчитывать Тогда
		Возврат;
	КонецЕсли;
	
	ОтветНаВопрос = Вопрос(
		"В документе выбраны виды цены с валютой, отличной от влияющих видов цен. Пересчитать цены?",
		РежимДиалогаВопрос.ДаНет
	);
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПереформироватьТаблицуЦен(Истина);
	Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
		РассчитатьВычисляемыеЦеныНаКлиенте(ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВПределахДняПриИзменении(Элемент)
	
	Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
	
	ОбновитьСтарыеЦеныНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаУстановкаЦен Тогда
		
		ПриПереходеКУстановкеЦен();
		ВыбранныеЦеныИзменены = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность
	);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ВЫБРАННЫЕ ЦЕНЫ

&НаКлиенте
Процедура ВыбранныеЦеныВыбранаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыбранныеЦены.ТекущиеДанные;
	Если ТекущиеДанные.ЗапрещенныйВидЦены Тогда
		ТекущиеДанные.Выбрана = Ложь;
		ПодключитьОбработчикОжидания("СообщитьОНевозможностиВыбора", 0.2, Истина);
		Возврат;
	КонецЕсли;
	
	ПроставитьФлагиВлияетЗависитНаКлиенте();
	ВыбранныеЦеныИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЦеныСсылкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЦеныСсылкаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеЦеныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если Поле = Элементы.ВыбранныеЦеныВлияющиеЦены Тогда
			Если ТекущиеДанные.ВлияющиеЦены.Количество() > 0 Тогда
				ОткрытьЗначение(ТекущиеДанные.ВлияющиеЦены);
			КонецЕсли;
		ИначеЕсли Поле = Элементы.ВыбранныеЦеныЗависимыеЦены Тогда
			Если ТекущиеДанные.ЗависимыеЦены.Количество() > 0 Тогда
				ОткрытьЗначение(ТекущиеДанные.ЗависимыеЦены);
			КонецЕсли;
		ИначеЕсли Поле = Элементы.ВыбранныеЦеныПараметры Тогда
			
			РедактироватьНастройки(Команды["РедактироватьНастройки"]);
			
		Иначе
			ОткрытьЗначение(ТекущиеДанные.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ДЕРЕВО ЦЕН

&НаКлиенте
Процедура ДеревоЦенПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Не Копирование Тогда
		ДобавитьНоменклатуру(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
		Или Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ДеревоЦенХарактеристика" Тогда
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		Иначе
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ДеревоЦенНоменклатура" Тогда
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		Иначе
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДеревоЦенУпаковкаПриИзмененииНаСервере(ИдентификаторСтроки, ИмяТекущейКолонки)
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = ПустаяТаблицаТовары();
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		
		Если СтрокаВидЦены.Выбрана ИЛИ СтрокаВидЦены.Влияет Тогда
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			НоваяСтрока.Номенклатура   = ТекущаяСтрока.Номенклатура;
			НоваяСтрока.Характеристика = ТекущаяСтрока.Характеристика;
			НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
			НоваяСтрока.Цена           = ТекущаяСтрока[ИмяКолонки];
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
			КонецЕсли;
			
			Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.Номенклатура   = ПодчиненнаяСтрока.Номенклатура;
				НоваяСтрока.Характеристика = ПодчиненнаяСтрока.Характеристика;
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
				НоваяСтрока.Цена           = ПодчиненнаяСтрока[ИмяКолонки];
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьСтарыеЦеныНоменклатуры(ТаблицаЗначений);
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = РассчитатьЦеныПоИдентификаторуСтроки(ИдентификаторСтроки,, ИмяТекущейКолонки);
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Процедура - обработчик события "ПриИзменении" поля "ДеревоЦенУпаковка".
//
&НаКлиенте
Процедура ДеревоЦенУпаковкаПриИзмененииКлиент(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейКолонки = СтрЗаменить(Элемент.Имя, "ДеревоЦен", "");

	Если ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре Тогда
		
		ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
		
		Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
			
			ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
			ТекущееЗначение   = ТекущиеДанные[ИмяТекущейКолонки];
			
			Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				Если ЭлементХарактеристика[ИмяТекущейКолонки] <> ТекущееЗначение Тогда
					ЭлементХарактеристика[ИмяТекущейКолонки] = ТекущееЗначение;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДеревоЦенУпаковкаПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), ИмяТекущейКолонки);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ДеревоЦенЦена".
//
&НаКлиенте
Функция ДеревоЦенЦенаПриИзмененииКлиент(Элемент)
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	КонецЕсли;
	
	ИмяТекущейКолонки  = СтрЗаменить(Элемент.Имя, "ДеревоЦен", "");
	Если Найти(ИмяТекущейКолонки, "ПроцентИзмененияВидЦены") Тогда
		ИмяТекущейКолонки = СтрЗаменить(ИмяТекущейКолонки, "ПроцентИзмененияВидЦены", "ВидЦены");
		ТекущиеДанные[ИмяТекущейКолонки] = Окр(ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки]*((ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки]/100)+1),15,2);
	КонецЕсли;
	
	ИмяКолонкиУпаковка = СтрЗаменить(СтрЗаменить(Элемент.Имя, "ПроцентИзмененияВидЦены", "ВидЦены"), "ДеревоЦенВидЦены", "УпаковкаВидЦены");
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
	
	ТекущиеДанные["ИзмененаВручную"+ИмяТекущейКолонки] = Истина;
	
	Если ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
		ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(100*(ТекущиеДанные[ИмяТекущейКолонки] - ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки])/ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки],5,2);
	Иначе
		ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
	КонецЕсли;
	
	Если ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре Тогда
		
		МассивУпаковок = Новый Массив();
		СоответствиеУпаковок = Неопределено;
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			ТекущееЗначениеУпаковки = ТекущиеДанные[ИмяКолонкиУпаковка];
			Если ЗначениеЗаполнено(ТекущееЗначениеУпаковки) Тогда
				МассивУпаковок.Добавить(ТекущееЗначениеУпаковки);
			КонецЕсли;
			
			ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
			Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				
				ЗначениеКолонкиУпаковка = ЭлементХарактеристика[ИмяКолонкиУпаковка];
				Если ЗначениеЗаполнено(ЗначениеКолонкиУпаковка) И МассивУпаковок.Найти(ЗначениеКолонкиУпаковка) = Неопределено Тогда
					МассивУпаковок.Добавить(ЗначениеКолонкиУпаковка);
				КонецЕсли;
				
			КонецЦикла;
		
			Если МассивУпаковок.Количество() > 0 Тогда
				СоответствиеУпаковок = КоэффициентыУпаковокНоменклатуры(МассивУпаковок);
			КонецЕсли;
			
		КонецЕсли;
		
		// Определим коэффициент упаковки текущей цены
		КоэффициентУпаковкиЦеныИсточника = 1;
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			Если ЗначениеЗаполнено(ТекущееЗначениеУпаковки) И СоответствиеУпаковок <> Неопределено Тогда
				НайденноеЗначение = СоответствиеУпаковок.Получить(ТекущееЗначениеУпаковки);
				Если НайденноеЗначение <> Неопределено Тогда
					КоэффициентУпаковкиЦеныИсточника = НайденноеЗначение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекущееЗначение = ТекущиеДанные[ИмяТекущейКолонки];
		ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				
				ЗначениеКолонкиУпаковка = ЭлементХарактеристика[ИмяКолонкиУпаковка];
				Если ТекущееЗначениеУпаковки = ЗначениеКолонкиУпаковка И
					
					ЭлементХарактеристика[ИмяТекущейКолонки] <> ТекущееЗначение Тогда
					ЭлементХарактеристика[ИмяТекущейКолонки] = ТекущееЗначение;
					ЭлементХарактеристика["ИзмененаВручную"+ИмяТекущейКолонки] = Истина;
					
					Если ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
						ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(100*(ЭлементХарактеристика[ИмяТекущейКолонки] - ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки])/ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки],5,2);
					Иначе
						ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
					КонецЕсли;
					
				Иначе
					
					// Определим коэффициент упаковки влияющей цены
					КоэффициентУпаковкиЦеныНазначения = 1;
					
					Если ЗначениеЗаполнено(ЗначениеКолонкиУпаковка) И СоответствиеУпаковок <> Неопределено Тогда
						НайденноеЗначение = СоответствиеУпаковок.Получить(ЗначениеКолонкиУпаковка);
						Если НайденноеЗначение <> Неопределено Тогда
							КоэффициентУпаковкиЦеныНазначения = НайденноеЗначение;
						КонецЕсли;
					КонецЕсли;
					
					Если КоэффициентУпаковкиЦеныИсточника = КоэффициентУпаковкиЦеныНазначения Тогда
						НоваяЦена = ТекущееЗначение;
					Иначе
						НоваяЦена = ТекущееЗначение / КоэффициентУпаковкиЦеныИсточника * КоэффициентУпаковкиЦеныНазначения;
					КонецЕсли;
					
					Если ЭлементХарактеристика[ИмяТекущейКолонки] <> НоваяЦена Тогда
						
						ЭлементХарактеристика[ИмяТекущейКолонки] = НоваяЦена;
						ЭлементХарактеристика["ИзмененаВручную"+ИмяТекущейКолонки] = Истина;
						
						Если ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
							ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(100*(ЭлементХарактеристика[ИмяТекущейКолонки] - ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки])/ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки],5,2);
						Иначе
							ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				НоваяЦена = ТекущееЗначение;
				
				Если ЭлементХарактеристика[ИмяТекущейКолонки] <> НоваяЦена Тогда
					
					ЭлементХарактеристика[ИмяТекущейКолонки] = НоваяЦена;
					ЭлементХарактеристика["ИзмененаВручную"+ИмяТекущейКолонки] = Истина;
					
					Если ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
						ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(100*(ЭлементХарактеристика[ИмяТекущейКолонки] - ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки])/ЭлементХарактеристика["СтараяЦена"+ИмяТекущейКолонки],5,2);
					Иначе
						ЭлементХарактеристика["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = РассчитатьЦеныПоИдентификаторуСтроки(ТекущиеДанные.ПолучитьИдентификатор(),, ИмяТекущейКолонки);
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ (ПРИВЯЗЫВАЮТСЯ ДИНАМИЧЕСКИ)

&НаКлиенте
Процедура ДеревоЦенЦенаПриИзменении(Элемент)
	
	ИзмененаЦена = Истина;
	ДеревоЦенЦенаПриИзмененииКлиент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенУпаковкаПриИзменении(Элемент)

	ДеревоЦенУпаковкаПриИзмененииКлиент(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	// Новая строка добавлена программно.
	// При отмене редактирования ее требуется удалить.
	Если СтрокаДобавлена И ОтменаРедактирования Тогда
		ДеревоЦен.ПолучитьЭлементы().Удалить(ТекущиеДанные);
		СтрокаДобавлена = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Номенклатура <> СтараяНоменклатура Тогда
		
		ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
		Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			Если ЭлементНоменклатура.Номенклатура = ТекущиеДанные.Номенклатура Тогда
				Если ТекущиеДанные.ПолучитьИдентификатор() <> ЭлементНоменклатура.ПолучитьИдентификатор() Тогда
					Если Не ОтменаРедактирования Тогда
						Ответ = Вопрос(НСтр("ru = 'Такая номенклатура уже введена. Продолжить редактирование?'"), РежимДиалогаВопрос.ДаНет);
						Если Ответ = КодВозвратаДиалога.Да Тогда
							Отказ = Истина;
						Иначе
							Элементы.ДеревоЦен.ЗакончитьРедактированиеСтроки(Истина);
						КонецЕсли;
					Иначе
						ТекущиеДанные.Номенклатура = СтараяНоменклатура;
						ТекущиеДанные.Характеристика = СтараяХарактеристика;
					КонецЕсли;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ДеревоЦенНоменклатураПриИзмененииСервер(
			Элементы.ДеревоЦен.ТекущиеДанные.ПолучитьИдентификатор(),
			Не ИзмененаЦена
		);
		Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
			РассчитатьВычисляемыеЦеныНаКлиенте(ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Если Не ОтменаРедактирования Тогда
			Ответ = Вопрос(НСтр("ru = 'Номенклатура не выбрана. Продолжить редактирование?'"), РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
			Иначе
				Элементы.ДеревоЦен.ЗакончитьРедактированиеСтроки(Истина);
			КонецЕсли;
		Иначе
			ТекущиеДанные.Номенклатура = СтараяНоменклатура;
			ТекущиеДанные.Характеристика = СтараяХарактеристика;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.Характеристика <> СтараяХарактеристика Тогда
		
		ЭлементыХарактеристики = ДеревоЦен.НайтиПоИдентификатору(Элементы.ДеревоЦен.ТекущаяСтрока);
		
		Если ЭлементыХарактеристики.ПолучитьРодителя() = Неопределено Тогда
			ЭлементыХарактеристики = ЭлементыХарактеристики.ПолучитьЭлементы();
		Иначе
			ЭлементыХарактеристики = ЭлементыХарактеристики.ПолучитьРодителя().ПолучитьЭлементы();
		КонецЕсли;
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			Если ЭлементХарактеристика.Характеристика = ТекущиеДанные.Характеристика Тогда
				Если ТекущиеДанные.ПолучитьИдентификатор() <> ЭлементХарактеристика.ПолучитьИдентификатор() Тогда
					Если Не ОтменаРедактирования Тогда
						Ответ = Вопрос(НСтр("ru = 'Такая номенклатура уже введена. Продолжить редактирование?'"), РежимДиалогаВопрос.ДаНет);
						Если Ответ = КодВозвратаДиалога.Да Тогда
							Отказ = Истина;
						Иначе
							Элементы.ДеревоЦен.ЗакончитьРедактированиеСтроки(Истина);
						КонецЕсли;
					Иначе
						ТекущиеДанные.Номенклатура = СтараяНоменклатура;
						ТекущиеДанные.Характеристика = СтараяХарактеристика;
					КонецЕсли;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ДеревоЦенХарактеристикаПриИзмененииСервер(
			Элементы.ДеревоЦен.ТекущиеДанные.ПолучитьИдентификатор(),
			Не ИзмененаЦена
		);
		Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
			РассчитатьВычисляемыеЦеныНаКлиенте(ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДобавлена = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	СтараяНоменклатура = ТекущиеДанные.Номенклатура;
	СтараяХарактеристика = ТекущиеДанные.Характеристика;
	ИзмененаЦена = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.УстановкаЦенНоменклатурыПрисоединенныеФайлы") Тогда
		
		ЗагрузитьИзExcelНаКлиенте(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ИзменитьЦеныНаПроцентНаКлиенте(Команда)
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыВыбораПараметровРасчета(Ложь, Истина);
	
	ПараметрыРасчета = ОткрытьФормуМодально(
		"Документ.УстановкаЦенНоменклатуры.Форма.ФормаВыбораПроцентаИзменения",
		ПараметрыОткрытия,
		ЭтаФорма
	);
	Если ПараметрыРасчета <> Неопределено Тогда
		
		ОчиститьСообщения();
		
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ИзменитьЦеныНаПроцентНаСервере(ПараметрыРасчета);
		Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
			РассчитатьВычисляемыеЦеныНаКлиенте(ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоЦеновойГруппе(Команда)
	
	ВыбранноеЗначение = ОткрытьФормуМодально(
		"Справочник.ЦеновыеГруппы.ФормаВыбора",
		Новый Структура("МножественныйВыбор", Истина),
		ЭтаФорма
	);
	Если ВыбранноеЗначение <> Неопределено Тогда
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ДобавитьНоменклатуруЦеновойГруппыНаСервере(ВыбранноеЗначение);
		Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
			РассчитатьВычисляемыеЦеныНаКлиенте(ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтбору(Команда)
	
	ПараметрыФормы = Новый Структура("УникальныйИдентификатор", УникальныйИдентификатор);
	АдресВоВременномХранилище = ОткрытьФормуМодально("Обработка.ПодборТоваровПоОтбору.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	Если ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ДобавитьТоварыПоОтборуНаСервере(АдресВоВременномХранилище);
		Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
			РассчитатьВычисляемыеЦеныНаКлиенте(ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТоварыБезИзмененныхЦен(Команда)
	
	УдалитьТоварыБезИзмененныхЦенНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДействующиеЦены(Команда)
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыВыбораПараметровРасчета(Истина, Ложь);
	Если ПараметрыОткрытия.РучныеВидыЦен.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Не выбраны виды цен, назначаемые вручную.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = ОткрытьФормуМодально(
		"Документ.УстановкаЦенНоменклатуры.Форма.ФормаВыбораПараметровРасчета",
		ПараметрыОткрытия,
		ЭтаФорма
	);
	Если ПараметрыРасчета <> Неопределено Тогда
		
		ОчиститьСообщения();
		
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = РассчитатьЦены(ПараметрыРасчета);
		Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
			РассчитатьВычисляемыеЦеныНаКлиенте(ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьРучныеЦены(Команда)
	
	ПараметрыОткрытия = ПараметрыОткрытияФормыВыбораПараметровРасчета(Истина, Ложь);
	Если ПараметрыОткрытия.РучныеВидыЦен.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Не выбраны виды цен, назначаемые вручную.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = ОткрытьФормуМодально("Документ.УстановкаЦенНоменклатуры.Форма.ФормаВыбораПараметровРасчета", ПараметрыОткрытия, ЭтаФорма);
	Если ПараметрыРасчета <> Неопределено Тогда
		
		ОчиститьСообщения();
		
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = РассчитатьЦены(ПараметрыРасчета);
		Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
			РассчитатьВычисляемыеЦеныНаКлиенте(ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКРедактированиюСпискаВидовЦен(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаВидыЦен;
	
КонецПроцедуры

&НаСервере
Функция НеВыбраныЗависимыеЦены()
	
	Для Каждого СтрокаВидаЦен Из ВыбранныеСтрокиТаблицыВидовЦен() Цикл
		
		ЗависимыеЦены = Новый Массив;
		Для Каждого ЗависимаяЦена Из СтрокаВидаЦен.ЗависимыеЦены Цикл
			СтрокаЗависимойЦены = НайтиСтрокуВидаЦен(ВыбранныеЦены, ЗависимаяЦена.Значение);
			ЗависимыеЦены.Добавить(СтрокаЗависимойЦены);
		КонецЦикла;
		
		Для Каждого СтрокаЗависимойЦены Из ЗависимыеЦены Цикл
			
			Если Не СтрокаЗависимойЦены.Выбрана Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиКУстановкеЦен(Команда)
	
	ОчиститьСообщения();
	
	Если НеВыбраныЗависимыеЦены() Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Найдены зависимые от выбранных виды цен. Выбрать все зависимые цены?'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВыбратьВсеЗависимыеЦены();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаУстановкаЦен;
	ПриПереходеКУстановкеЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРассчитыватьАвтоматически(Команда)
	
	УстановитьРассчитыватьАвтоматическиНаКлиенте(Не РассчитыватьАвтоматически);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(Команда)
	
	УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуреНаКлиенте(Не ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательАвтоматическиДобавлятьХарактеристики(Команда)
	
	УстановитьАвтоматическиДобавлятьХарактеристикиНаКлиенте(Не АвтоматическиДобавлятьХарактеристики);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательЗафиксироватьКолонкуНоменклатура(Команда)
	
	ЗафиксироватьКолонкуНоменклатураНаКлиенте(Не ЗафиксироватьКолонкуНоменклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтображатьВлияющиеЦены(Команда)
	
	ОтображатьВлияющиеЦены = Не ОтображатьВлияющиеЦены;
	
	Элементы.ДеревоЦенПереключательОтображатьВлияющиеЦены.Пометка = ОтображатьВлияющиеЦены;
	
	ПереформироватьТаблицуЦен = Ложь;
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		Если Не ВидЦены.Выбрана И ВидЦены.Влияет Тогда
			ПереформироватьТаблицуЦен = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ПереформироватьТаблицуЦен Тогда
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПереформироватьТаблицуЦен(Ложь);
		Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
			РассчитатьВычисляемыеЦеныНаКлиенте(ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Если Не ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета = ОткрытьФормуМодально(
		"Документ.УстановкаЦенНоменклатуры.Форма.ФормаВыбораПараметровРасчета",
		ПараметрыОткрытияФормыВыбораПараметровРасчета(Ложь, Ложь),
		ЭтаФорма
	);
	Если ПараметрыРасчета <> Неопределено Тогда
		
		ОчиститьСообщения();
		РассчитатьЦены(ПараметрыРасчета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеВидыЦен(Команда)
	
	Для Каждого СтрокаТаблицы Из ВыбранныеЦены Цикл
		Если Не СтрокаТаблицы.Выбрана И Не СтрокаТаблицы.ЗапрещенныйВидЦены Тогда
			СтрокаТаблицы.Выбрана = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ВыбранныеЦеныИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВсеВидыЦен(Команда)
	
	Для Каждого СтрокаТаблицы Из ВыбранныеЦены Цикл
		Если СтрокаТаблицы.Выбрана И Не СтрокаТаблицы.ЗапрещенныйВидЦены Тогда
			СтрокаТаблицы.Выбрана = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ВыбранныеЦеныИзменены = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеЗависимые(Команда)
	
	ВыбратьВсеЗависимыеЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеВлияющие(Команда)
	
	ВыбратьВсеВлияющиеЦены();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьХарактеристику(Команда)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Предупреждение(НСтр("ru = 'Для того, чтобы выбрать характеристику Вам необходимо предварительно выбрать номенклатуру.'"));
		Возврат;
	КонецЕсли;
	
	ВладелецХарактеристики = Неопределено;
			
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ТекущийЭлемент"  , ТекущиеДанные.Характеристика);
	ПараметрыФормыВыбора.Вставить("ПараметрВладелец", ВладелецХарактеристики);
	ПараметрыФормыВыбора.Вставить("Номенклатура"    , ТекущиеДанные.Номенклатура);
	
	ТекущийЭлемент = Элементы.ДеревоЦенХарактеристика;
	
	Характеристика = ОткрытьФормуМодально("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыФормыВыбора);
	Если Характеристика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыХарактеристики = ДеревоЦен.НайтиПоИдентификатору(Элементы.ДеревоЦен.ТекущаяСтрока);
	Если ЭлементыХарактеристики.ПолучитьРодителя() = Неопределено Тогда
		ЭлементыХарактеристики = ЭлементыХарактеристики.ПолучитьЭлементы();
	Иначе
		ЭлементыХарактеристики = ЭлементыХарактеристики.ПолучитьРодителя().ПолучитьЭлементы();
	КонецЕсли;
	Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
		Если ЭлементХарактеристика.Характеристика = Характеристика Тогда
			Элементы.ДеревоЦен.ТекущаяСтрока = ЭлементХарактеристика.ПолучитьИдентификатор();;
			Предупреждение(НСтр("ru = 'Такая характеристика уже введена.'"));
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ТекущийРодитель = ТекущиеДанные;
	КонецЕсли;
	НоваяСтрока = ТекущийРодитель.ПолучитьЭлементы().Добавить();
	Элементы.ДеревоЦен.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	Если ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийРодитель, , "Характеристика");
	Иначе
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущийРодитель, "Номенклатура, ХарактеристикиИспользуются, ЦеноваяГруппа, ЕдиницаИзмерения");
	КонецЕсли;
	НоваяСтрока.Характеристика = Характеристика;
	
	ЗаполнитьИндексКартинкиСтрокиДереваЦен(НоваяСтрока);
	ДеревоЦенХарактеристикаПриИзмененииСервер(Элементы.ДеревоЦен.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуру(Команда)
	
	ТекущийЭлемент = Элементы.ДеревоЦенНоменклатура;
	
	НоваяСтрока = ДеревоЦен.ПолучитьЭлементы().Добавить();
	Элементы.ДеревоЦен.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ЗаполнитьИндексКартинкиСтрокиДереваЦен(НоваяСтрока);
	Элементы.ДеревоЦен.ИзменитьСтроку();
	
	СтрокаДобавлена = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcel(Команда)
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		
		Если Модифицированность Тогда
			Результат = Вопрос(
				НСтр("ru = 'Перед выгрузкой документ необходимо записать. Выполнить запись документа и продолжить?'"),
				РежимДиалогаВопрос.ДаНет
			);
			Если Результат = КодВозвратаДиалога.Да Тогда
				Записать();
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(Объект.Ссылка);
		
		ПараметрыФормы = Новый Структура("МассивДокументов, УникальныйИдентификатор", МассивДокументов, УникальныйИдентификатор);
		ПараметрыПечати = ОткрытьФормуМодально(
			"Документ.УстановкаЦенНоменклатуры.Форма.ФормаНастройкиПечатнойФормыУстановкиЦенНоменклатуры",
			ПараметрыФормы
		);
		Если ПараметрыПечати <> Неопределено Тогда
			ПараметрыПечати.ВыводитьШапку = Ложь;
			Файл = ВыгрузитьВExcelНаКлиенте(ПараметрыПечати);
			Если Файл <> Неопределено Тогда
				ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Файл);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Предупреждение(НСтр("ru = 'Расширение работы с файлами не подключено.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		ПрисоединенныеФайлыКлиент.ОткрытьФормуВыбораФайлов(Объект.Ссылка, Элементы.ДеревоЦен);
	Иначе
		Предупреждение(НСтр("ru = 'Расширение работы с файлами не подключено.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкодуВыполнить()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",       Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество",     Истина);
	ПараметрыФормы.Вставить("Документ ",                               Объект.Ссылка);
	ПараметрыФормы.Вставить("Заголовок",                               НСтр("ru = 'Подбор товаров'"));
	ПараметрыФормы.Вставить("Дата",                                    ДатаДокумента(Объект.Дата));
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоДинамикеЦен(Команда)
	
	СписокНоменклатуры  = Новый СписокЗначений;
	СписокХарактеристик = Новый СписокЗначений;
	Для Каждого ИдентификаторСтрокиДереваЦен Из Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
		СтрокаТЧ = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтрокиДереваЦен);
		СписокНоменклатуры.Добавить(СтрокаТЧ.Номенклатура);
		Если СтрокаТЧ.ХарактеристикиИспользуются Тогда
			Если СтрокаТЧ.ПолучитьРодителя() = Неопределено Тогда
				Для Каждого СтрокаХарактеристика Из СтрокаТЧ.ПолучитьЭлементы() Цикл
					Если СписокХарактеристик.НайтиПоЗначению(СтрокаХарактеристика.Характеристика) = Неопределено Тогда
						СписокХарактеристик.Добавить(СтрокаХарактеристика.Характеристика);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если СписокХарактеристик.НайтиПоЗначению(СтрокаТЧ.Характеристика) = Неопределено Тогда
					СписокХарактеристик.Добавить(СтрокаТЧ.Характеристика);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СписокХарактеристик.НайтиПоЗначению(
					ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка")) = Неопределено Тогда
				СписокХарактеристик.Добавить(ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокВидовЦен = Новый СписокЗначений;
	Для Каждого СтрокаВидЦены Из ВыбранныеСтрокиТаблицыВидовЦенНаКлиенте() Цикл
		СписокВидовЦен.Добавить(СтрокаВидЦены.Ссылка, СтрокаВидЦены.Наименование);
	КонецЦикла;
	
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
	
	ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СписокНоменклатуры;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Характеристика");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СписокХарактеристик;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидЦены");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СписокВидовЦен;
	ЭлементОтбора.Использование = Истина;
	
	ПараметрыФормы = Новый Структура("ФиксированныеНастройки, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии",
	        ФиксированныеНастройки,
	        "Динамика изменения цен по видам цен номенклатуры (Диаграмма)",
	        "Динамика изменения цен по видам цен номенклатуры (Диаграмма)",
	        Истина);
	
	ОткрытьФорму("Отчет.ДинамикаИзмененияЦенНоменклатуры.Форма",
	        ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНастройки(Команда)
	
	ТекущиеДанные = Элементы.ВыбранныеЦены.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Предупреждение(НСтр("ru = 'Редактировать настройки невозможно. Не выбран вид цены'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Выбрана Тогда
			Предупреждение(НСтр("ru = 'Редактировать настройки схемы компоновки можно только для выбранных видов цен'"));
		Возврат;
	КонецЕсли;
	
	// Открыть редактор настроек схемы компоновки данных
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru = 'Настройка параметров для для вида цены ""%1""'");
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрЗаменить(ЗаголовокФормыНастройкиСхемыКомпоновкиДанных, "%1", ТекущиеДанные.Наименование);
	
	АдресНастроекСхемыКомпоновкиДанных = АдресНастроекКомпоновкиДанныхДляВидаЦены(
		ТекущиеДанные.Ссылка,
		АдресХранилищаНастройкиКомпоновкиДанных,
		УникальныйИдентификатор
	);
	
	АдресХранилищаНастройкиКомпоновщика = ОткрытьФормуМодально("ОбщаяФорма.УпрощеннаяНастройкаСхемыКомпоновкиДанных",
		Новый Структура(
			"НеПомещатьНастройкиВСхемуКомпоновкиДанных,
			|НеРедактироватьСхемуКомпоновкиДанных,
			|НеНастраиватьУсловноеОформление,
			|НеНастраиватьВыбор,
			|НеНастраиватьПорядок,
			|АдресСхемыКомпоновкиДанных,
			|АдресНастроекКомпоновкиДанных,
			|УникальныйИдентификатор,
			|Заголовок",
			Истина,
			Истина,
			Истина,
			Истина,
			Истина,
			ТекущиеДанные.АдресСхемыКомпоновкиДанных,
			?(АдресНастроекСхемыКомпоновкиДанных <> Неопределено,
			       АдресНастроекСхемыКомпоновкиДанных,
			       ТекущиеДанные.АдресНастроекСхемыКомпоновкиДанных
			),
			УникальныйИдентификатор,
			ЗаголовокФормыНастройкиСхемыКомпоновкиДанных)
	);
	
	Если АдресХранилищаНастройкиКомпоновщика <> Неопределено Тогда
		
		ВыбранныеЦеныИзменены = Истина;
		СтруктураДанных = УстановитьНастройкиКомпоновкиДанныхДляВидаЦены(
			ТекущиеДанные.Ссылка,
			АдресХранилищаНастройкиКомпоновщика,
			АдресХранилищаНастройкиКомпоновкиДанных,
			АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен
		);
		ТекущиеДанные.Параметры = СтруктураДанных.ОписаниеПараметров;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиПоУмолчанию(Команда)
	
	ТекущиеДанные = Элементы.ВыбранныеЦены.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Предупреждение(НСтр("ru = 'Редактировать настройки невозможно. Не выбран вид цены'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Выбрана Тогда
		Предупреждение(НСтр("ru = 'Редактировать настройки схемы компоновки можно только для выбранных видов цен.'"));
		Возврат;
	КонецЕсли;
	
	АдресХранилищаНастройкиКомпоновщика = НастройкиСхемыКомпоновкиДанныхПоУмолчанию(ТекущиеДанные.Ссылка, ТекущиеДанные.АдресСхемыКомпоновкиДанных);
	
	Если АдресХранилищаНастройкиКомпоновщика <> Неопределено Тогда
		ВыбранныеЦеныИзменены = Истина;
		СтруктураДанных = УстановитьНастройкиКомпоновкиДанныхДляВидаЦены(
			ТекущиеДанные.Ссылка,
			АдресХранилищаНастройкиКомпоновщика,
			АдресХранилищаНастройкиКомпоновкиДанных,
			АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен
		);
		ТекущиеДанные.Параметры = СтруктураДанных.ОписаниеПараметров;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоОтборуВидовЦен(Команда)
	
	МассивДанныхДляРасчетаВычисляемыхЦенНаКлиенте = ДобавитьТоварыПоОтборамСКД();
	Для Каждого ДанныеДляРасчетаВычисляемыхЦенНаКлиенте Из МассивДанныхДляРасчетаВычисляемыхЦенНаКлиенте Цикл
		Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		РассчитатьВычисляемыеЦеныНаКлиенте(ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоНаименованиюНоменклатуры(Команда)
	
	СортироватьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоНаименованиюНоменклатурыСУчетомИерархииВидов(Команда)
	СортироватьНаСервере("ПоНаименованиюНоменклатурыИерархияВидовНоменклатуры");
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоНаименованиюНоменклатурыСУчетомИерархииГрупп(Команда)
	СортироватьНаСервере("ПоНаименованиюНоменклатурыИерархияГрупп");
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = ПолучитьКоличествоСтрокДереваЦен();
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПолучитьСтрокиИзБуфераОбмена();
	
	Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
		РассчитатьВычисляемыеЦеныНаКлиенте(ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
	КонецЕсли;
	
	КоличествоВставленных = ПолучитьКоличествоСтрокДереваЦен() - КоличествоТоваровДоВставки;
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	Если ОбщегоНазначенияУТКлиент.ВозможноКопированиеСтрок(Элементы.ДеревоЦен.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.ДеревоЦен.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

// МеханизмВнешнегоОборудования
&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	ВозвращаемыеДанные = ДобавитьНоменклатуруПоШтрихкодамВДеревоЦен(МассивШтрихкодов);
	Если ВозвращаемыеДанные.ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
		РассчитатьВычисляемыеЦеныНаКлиенте(ВозвращаемыеДанные.ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
	КонецЕсли;
	
	СтруктураПараметровДействия = Новый Структура;
	СтруктураПараметровДействия.Вставить("НеизвестныеШтрихкоды", ВозвращаемыеДанные.НеизвестныеШтрихкоды);
	СтруктураПараметровДействия.Вставить("ФормаВладелец", УникальныйИдентификатор);
	
	Если ПравоРегистрацииШтрихкодовНоменклатурыДоступно
		И СтруктураПараметровДействия.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			СтруктураПараметровДействия,
			СтруктураПараметровДействия.ФормаВладелец,
			Новый УникальныйИдентификатор
		);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьШтрихкоды()
// Конец МеханизмВнешнегоОборудования

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервереБезКонтекста
Функция ПроверитьЗаполненностьОбязательныхПараметровСхемыКомпоновкиДанных(ВыбранныеЦены, АдресХранилищаНастройкиКомпоновкиДанных, АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен)
	
	Ошибки = Новый Массив;
	
	РазрешенныеИмена = ИменаРазрешенныхПараметров();
	
	ПараметрыСхемКомпоновкиДанныхВидовЦен = ПолучитьИзВременногоХранилища(АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
	ТаблицаНастройкиКомпоновкиДанных      = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновкиДанных);
	
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(ВидЦены, "ВидЦены");
		Если НайденнаяСтрока = Неопределено Тогда
			Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполены обязательные параметры для вида цены ""%1""'"),
				Строка(ВидЦены)
			);
			Ошибки.Добавить(Новый Структура("ВидЦены, Описание", ВидЦены, Описание));
		Иначе
			
			НайденныеСтроки = ПараметрыСхемКомпоновкиДанныхВидовЦен.НайтиСтроки(Новый Структура("ВидЦены", ВидЦены));
			Для Каждого ПараметрДанных Из НайденныеСтроки Цикл
				Для Каждого СтрокаТЧ Из НайденнаяСтрока.НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы Цикл
					Если Строка(СтрокаТЧ.Параметр) = ПараметрДанных.Имя Тогда
						Если (Не ЗначениеЗаполнено(СтрокаТЧ.Значение) ИЛИ Не СтрокаТЧ.Использование)
							И РазрешенныеИмена.Найти(ПараметрДанных.Имя) = Неопределено Тогда
							Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Не заполено значение параметра ""%1"" для вида цены ""%2""'"),
								ПараметрДанных.Заголовок,
								Строка(ВидЦены)
							);
							Ошибки.Добавить(Новый Структура("ВидЦены, Описание", ВидЦены, Описание));
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ошибки;
	
КонецФункции

&НаКлиенте
Функция ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанных()
	
	ВидыЦен = Новый Массив;
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		Если СтрокаВидЦены.Выбрана И СтрокаВидЦены.НайденыОбязательныеПараметры Тогда
			ВидыЦен.Добавить(СтрокаВидЦены.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Ошибки = ПроверитьЗаполненностьОбязательныхПараметровСхемыКомпоновкиДанных(
		ВидыЦен,
		АдресХранилищаНастройкиКомпоновкиДанных,
		АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен
	);
	Для Каждого СтруктураОшибки Из Ошибки Цикл
		СтрокаВидЦены = НайтиСтрокуВидаЦен(ВыбранныеЦены, СтруктураОшибки.ВидЦены);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтруктураОшибки.Описание,
			Объект.Ссылка,
			"ВыбранныеЦены[" + ВыбранныеЦены.Индекс(СтрокаВидЦены) + "].Параметры"
		);
	КонецЦикла;
	
	Возврат Ошибки.Количество() = 0;
	
КонецФункции

&НаСервере
Функция ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанныхНаСервере(СообщатьПользователюОбОшибках = Истина)
	
	ВидыЦен = Новый Массив;
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		Если СтрокаВидЦены.Выбрана И СтрокаВидЦены.НайденыОбязательныеПараметры Тогда
			ВидыЦен.Добавить(СтрокаВидЦены.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Ошибки = ПроверитьЗаполненностьОбязательныхПараметровСхемыКомпоновкиДанных(
		ВидыЦен,
		АдресХранилищаНастройкиКомпоновкиДанных,
		АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен
	);
	Если СообщатьПользователюОбОшибках Тогда
		Для Каждого СтруктураОшибки Из Ошибки Цикл
			СтрокаВидЦены = НайтиСтрокуВидаЦен(ВыбранныеЦены, СтруктураОшибки.ВидЦены);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтруктураОшибки.Описание,
				Объект.Ссылка,
				"ВыбранныеЦены[" + ВыбранныеЦены.Индекс(СтрокаВидЦены) + "].Параметры"
			);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ошибки.Количество() = 0;
	
КонецФункции

&НаСервере
Функция ДобавитьНоменклатуруПоШтрихкодамВДеревоЦен(ДанныеШтрихкодов)
	
	ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	
	ТаблицаШтрихкоды = Новый ТаблицаЗначений;
	ТаблицаШтрихкоды.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
	Для Каждого ЭлементМассива Из ДанныеШтрихкодов Цикл
		НоваяСтрока = ТаблицаШтрихкоды.Добавить();
		НоваяСтрока.Штрихкод = ЭлементМассива.Штрихкод;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаШтрихкоды.Штрихкод КАК Строка(200)) КАК Штрихкод
	|ПОМЕСТИТЬ ТаблицаШтрихкоды
	|ИЗ
	|	&ТаблицаШтрихкоды КАК ТаблицаШтрихкоды
	|ИНДЕКСИРОВАТЬ ПО Штрихкод
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаШтрихкоды.Штрихкод            КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура   КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика
	|ИЗ
	|	ТаблицаШтрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ШтрихкодыНоменклатуры.Штрихкод = ТаблицаШтрихкоды.Штрихкод
	|";
	
	Запрос.УстановитьПараметр("ТаблицаШтрихкоды", ТаблицаШтрихкоды);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НеизвестныеШтрихкоды = Новый Массив;
	
	ТаблицаНоменклатура = СоздатьПустуюТаблицуНоменклатуры();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			
			НоваяСтрока = ТаблицаНоменклатура.Добавить();
			НоваяСтрока.Номенклатура = Выборка.Номенклатура;
			НоваяСтрока.Характеристика = Выборка.Характеристика;
			
		Иначе
			НеизвестныеШтрихкоды.Добавить(Новый Структура("Штрихкод, Количество", Выборка.Штрихкод, 1));
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ДобавитьТоварыПоОтборуНаСервере(, ТаблицаНоменклатура);
	
	Возврат Новый Структура(
		"НеизвестныеШтрихкоды, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте",
		НеизвестныеШтрихкоды, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
	
КонецФункции

&НаСервере
Функция ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ДобавитьТоварыПоОтборуНаСервере(, ТаблицаТоваров);
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Возвращает массив ссылок на выбранные пользователем виды цен
//
&НаСервере
Функция ВыбранныеВидыЦен()
	
	ВидыЦен = Новый Массив();
	
	Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
		Если ТекСтрока.Выбрана Тогда
			ВидыЦен.Добавить(ТекСтрока.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыЦен;
	
КонецФункции

// Возвращает массив строк выбранных пользователем видов цен
//
&НаСервере
Функция ВыбранныеСтрокиТаблицыВидовЦен()
	
	ВидыЦен = Новый Массив();
	
	Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
		Если ТекСтрока.Выбрана Тогда
			ВидыЦен.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыЦен;
	
КонецФункции

// Возвращает массив строк выбранных пользователем видов цен
//
&НаКлиенте
Функция ВыбранныеСтрокиТаблицыВидовЦенНаКлиенте()
	
	ВидыЦен = Новый Массив();
	
	Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
		Если ТекСтрока.Выбрана Тогда
			ВидыЦен.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыЦен;
	
КонецФункции

&НаСервере
Процедура ВыбратьВсеЗависимыеЦены()
	
	Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
		ТекСтрока.Зависит  = Ложь;
	КонецЦикла;
	
	Заполнять = Истина;
	Пока Заполнять Цикл
		
		Заполнять = Ложь;
		Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
			
			Если ТекСтрока.Выбрана Тогда 
				
				Для Каждого ЗависимаяЦена Из ТекСтрока.ЗависимыеЦены Цикл
					СтрокаЗависимойЦены = НайтиСтрокуВидаЦен(ВыбранныеЦены, ЗависимаяЦена.Значение);
					Если Не СтрокаЗависимойЦены.Выбрана И Не СтрокаЗависимойЦены.ЗапрещенныйВидЦены Тогда
						СтрокаЗависимойЦены.Выбрана = Истина;
						ВыбранныеЦеныИзменены = Истина;
						Заполнять = Истина;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьВсеВлияющиеЦены()
	
	Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
		ТекСтрока.Влияет  = Ложь;
	КонецЦикла;
	
	Заполнять = Истина;
	Пока Заполнять Цикл
		
		Заполнять = Ложь;
		Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
			
			Если ТекСтрока.Выбрана Тогда 
				
				Для Каждого ВлияющаяЦена Из ТекСтрока.ВлияющиеЦены Цикл
					СтрокаВыбраннойЦены = НайтиСтрокуВидаЦен(ВыбранныеЦены, ВлияющаяЦена.Значение);
					Если Не СтрокаВыбраннойЦены.Выбрана И Не СтрокаВыбраннойЦены.ЗапрещенныйВидЦены Тогда
						СтрокаВыбраннойЦены.Выбрана = Истина;
						ВыбранныеЦеныИзменены = Истина;
						Заполнять = Истина;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗависимыеОтВидаЦеныВидыЦен(СтрокаВидЦены)
	
	ЗависимыеВидыЦен = Новый Массив;
	Для Каждого ЗависимаяЦена Из СтрокаВидЦены.ЗависимыеЦены Цикл
		СтрокаЗависимойЦены = НайтиСтрокуВидаЦен(ВыбранныеЦены, ЗависимаяЦена.Значение);
		Если СтрокаЗависимойЦены.Выбрана Тогда
			ЗависимыеВидыЦен.Добавить(СтрокаЗависимойЦены);
		КонецЕсли;
	КонецЦикла;
	
	Заполнять = Истина;
	Пока Заполнять Цикл
		
		Заполнять = Ложь;
		Для Каждого ТекСтрока Из ЗависимыеВидыЦен Цикл
			
			Для Каждого ЗависимаяЦена Из ТекСтрока.ЗависимыеЦены Цикл
				СтрокаЗависимойЦены = НайтиСтрокуВидаЦен(ВыбранныеЦены, ЗависимаяЦена.Значение);
				Если СтрокаЗависимойЦены.Выбрана И ЗависимыеВидыЦен.Найти(СтрокаЗависимойЦены) = Неопределено Тогда
					ЗависимыеВидыЦен.Добавить(СтрокаЗависимойЦены);
					Заполнять = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ЗависимыеВидыЦен;
	
КонецФункции

// Осуществляет поиск строки с определенным видом цен в таблице
//
// Параметры:
// ТаблицаВидовЦен - ДанныеФормыКоллекция - Таблица, в которой осуществляется поиск
// ВидЦен - СправочникСсылка.ВидыЦен - Ссылка на вид цен, который необходимо найти
//
// Возвращаемое значение:
// ДанныеФормыЭлементКоллекции - найденный вид цен
//
&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуВидаЦен(Таблица, ВидЦены)
	
	Возврат Таблица.НайтиСтроки(Новый Структура("Ссылка", ВидЦены))[0];
	
КонецФункции

// Копирует виды цен из таблицы формы ВыбранныеЦены в табличную часть ВидыЦен объекта
//
&НаСервере
Процедура ПоместитьВидыЦенВТабличнуюЧасть(ТекущийОбъект, СохранятьНастройкиКомпоновкиДанных = Ложь)
	
	ТекущийОбъект.ВидыЦен.Очистить();
	
	Если СохранятьНастройкиКомпоновкиДанных Тогда
		ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновкиДанных);
	КонецЕсли;
	
	МассивВыбранныхВидовЦен = ВыбранныеСтрокиТаблицыВидовЦен();
	Для Каждого СтрокаВидЦены Из МассивВыбранныхВидовЦен Цикл
		
		НоваяСтрока = ТекущийОбъект.ВидыЦен.Добавить();
		НоваяСтрока.ВидЦены = СтрокаВидЦены.Ссылка;
		
		Если СохранятьНастройкиКомпоновкиДанных Тогда
			НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(СтрокаВидЦены.Ссылка, "ВидЦены");
			Если НайденнаяСтрока <> Неопределено Тогда
				НоваяСтрока.НастройкиКомпоновкиДанных = Новый ХранилищеЗначения(НайденнаяСтрока.НастройкиКомпоновкиДанных);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НайтиЗависящиеИВлияющиеЦены(ТаблицаВидовЦен, ТекущаяЦена, Стек = Неопределено)
	
	СтрокаСправочника = ТаблицаВидовЦен.Найти(ТекущаяЦена, "Ссылка");
	Уровень           = 0;
	
	Для Каждого БазоваяЦена Из СтрокаСправочника.ВлияющиеВидыЦен Цикл
		
		СтрокаБазовойЦены  = ТаблицаВидовЦен.Найти(БазоваяЦена.ВлияющийВидЦен, "Ссылка");
		УровеньБазовойЦены = СтрокаБазовойЦены.Уровень;
		
		Если Стек = Неопределено Тогда
			Стек = Новый Массив();
		КонецЕсли;
		
		Стек.Добавить(СтрокаСправочника);
		УровеньБазовойЦены = НайтиЗависящиеИВлияющиеЦены(ТаблицаВидовЦен, БазоваяЦена.ВлияющийВидЦен, Стек);
		
		Если УровеньБазовойЦены > Уровень Тогда
			Уровень = УровеньБазовойЦены;
		КонецЕсли;
		
		Для Каждого ЭлементСтека Из Стек Цикл
			
			Если ЭлементСтека.ВлияющиеЦены.НайтиПоЗначению(СтрокаБазовойЦены.Ссылка) = Неопределено Тогда
				ЭлементСтека.ВлияющиеЦены.Добавить(СтрокаБазовойЦены.Ссылка);
			КонецЕсли;
			
			Если СтрокаБазовойЦены.ЗависимыеЦены.НайтиПоЗначению(ЭлементСтека.Ссылка) = Неопределено Тогда
				СтрокаБазовойЦены.ЗависимыеЦены.Добавить(ЭлементСтека.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
		Стек.Удалить(Стек.Количество() - 1);
		
	КонецЦикла;
	
	Уровень                   = Уровень + 1;
	СтрокаСправочника.Уровень = Уровень;
	
	Возврат Уровень;
	
КонецФункции

&НаСервере
Функция ЗагрузитьСправочникВидовЦен(НастройкиКомпоновкиДанных)
	
	ЗапросРазрешенныеВидыЦен = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыЦен.Ссылка
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыЦен.Ссылка                               КАК Ссылка,
	|	ВидыЦен.Наименование                         КАК Наименование,
	|	ВидыЦен.ПометкаУдаления                      КАК ПометкаУдаления,
	|	ВидыЦен.РеквизитДопУпорядочивания            КАК РеквизитДопУпорядочивания,
	|	ВидыЦен.УстанавливатьЦенуПриВводеНаОсновании КАК УстанавливатьЦенуПриВводеНаОсновании,
	|	ВидыЦен.СпособЗаданияЦены                    КАК СпособЗаданияЦены,
	|	ВидыЦен.Идентификатор                        КАК Идентификатор,
	|	ВидыЦен.ПорогСрабатывания                    КАК ПорогСрабатывания,
	|	ВидыЦен.ВалютаЦены                           КАК Валюта,
	|	ВидыЦен.Формула                              КАК Формула,
	|	ВидыЦен.БазовыйВидЦены.Идентификатор         КАК БазовыйВидЦены,
	|	ВидыЦен.Наценка                              КАК Наценка,
	|	ВидыЦен.СхемаКомпоновкиДанных                КАК СхемаКомпоновкиДанных,
	|	
	|	ВЫБОР КОГДА ВидыЦен.Ссылка НЕ В (&РазрешенныеВидыЦен) ТОГДА Истина ИНАЧЕ Ложь КОНЕЦ КАК ЗапрещенныйВидЦены,
	|	
	|	ВидыЦен.ЦеновыеГруппы.(
	|		ЦеноваяГруппа                 КАК ЦеноваяГруппа,
	|		Формула           КАК Формула,
	|		БазовыйВидЦены.Идентификатор  КАК БазовыйВидЦены,
	|		Наценка  КАК Наценка
	|	),
	|	
	|	ВидыЦен.ПорогиСрабатывания.(
	|		ЦеноваяГруппа                 КАК ЦеноваяГруппа,
	|		ПорогСрабатывания             КАК ПорогСрабатывания
	|	),
	|	
	|	ВидыЦен.ВлияющиеВидыЦен.(
	|		ВлияющийВидЦен                КАК ВлияющийВидЦен
	|	),
	|	
	|	ВидыЦен.ПравилаОкругленияЦены.(
	|		НижняяГраницаДиапазонаЦен     КАК НижняяГраницаДиапазонаЦен,
	|		ТочностьОкругления            КАК ТочностьОкругления,
	|		ПсихологическоеОкругление     КАК ПсихологическоеОкругление
	|	),
	|	
	|	ВидыЦен.ОкруглятьВБольшуюСторону  КАК ОкруглятьВБольшуюСторону
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|УПОРЯДОЧИТЬ ПО
	|	ВидыЦен.РеквизитДопУпорядочивания");
	
	Запрос.Параметры.Вставить("РазрешенныеВидыЦен", ЗапросРазрешенныеВидыЦен.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаВидовЦен = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВидовЦен.Колонки.Добавить("Уровень",       Новый ОписаниеТипов("Число"));
	ТаблицаВидовЦен.Колонки.Добавить("ВлияющиеЦены",  Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаВидовЦен.Колонки.Добавить("ЗависимыеЦены", Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаВидовЦен.Колонки.Добавить("ИмяКолонки",    Новый ОписаниеТипов("Строка"));
	// Служебные колонки для работы с настройками СКД
	ТаблицаВидовЦен.Колонки.Добавить("АдресСхемыКомпоновкиДанных",         Новый ОписаниеТипов("Строка"));
	ТаблицаВидовЦен.Колонки.Добавить("АдресНастроекСхемыКомпоновкиДанных", Новый ОписаниеТипов("Строка"));
	ТаблицаВидовЦен.Колонки.Добавить("НайденыОбязательныеПараметры", Новый ОписаниеТипов("Булево"));
	ТаблицаВидовЦен.Колонки.Добавить("Параметры",                    Новый ОписаниеТипов("Строка"));
	// Индексирование
	ТаблицаВидовЦен.Индексы.Добавить("Ссылка");
	
	ПараметрыСхемКомпоновкиДанныхВидовЦен = Новый ТаблицаЗначений;
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Использование");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("ВидЦены");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Имя");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Заголовок");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("Значение");
	ПараметрыСхемКомпоновкиДанныхВидовЦен.Колонки.Добавить("ДоступныеЗначения");
	
	МассивУдаляемыхВидовЦен = Новый Массив();
	
	Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
		
		НайтиЗависящиеИВлияющиеЦены(ТаблицаВидовЦен, СтрокаВидаЦен.Ссылка);
		
		СтрокаВидаЦен.ИмяКолонки = ИмяКолонкиПоВидуЦены(СтрокаВидаЦен.Ссылка);
		
		СхемаИНастройки = Справочники.ВидыЦен.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(
			СтрокаВидаЦен.Ссылка,
			СтрокаВидаЦен.СхемаКомпоновкиДанных
		);
		
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
		
		СтрокаВидаЦен.АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
		Если ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанных) Тогда
			СтрокаВидаЦен.АдресНастроекСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(
				СхемаИНастройки.НастройкиКомпоновкиДанных,
				УникальныйИдентификатор
			);
		КонецЕсли;
		
		// Параметры схема компоновки данных
		РазрешенныеИмена = ИменаРазрешенныхПараметров();
		Для Каждого ПараметрДанных Из СхемаКомпоновкиДанных.Параметры Цикл
			
			Если РазрешенныеИмена.Найти(ПараметрДанных.Имя) = Неопределено Тогда
				Если Найти(СхемаКомпоновкиДанных.НаборыДанных[0].Запрос,"&"+ПараметрДанных.Имя) Тогда
					СтрокаВидаЦен.НайденыОбязательныеПараметры = Истина;
				КонецЕсли;
			Иначе
				ПараметрДанных.ОграничениеИспользования = Истина;
				ПараметрДанных.ВключатьВДоступныеПоля   = Ложь;
			КонецЕсли;
			
			НайденныеСтроки = ПараметрыСхемКомпоновкиДанныхВидовЦен.НайтиСтроки(
				Новый Структура("Имя, ВидЦены",ПараметрДанных.Имя, СтрокаВидаЦен.Ссылка)
			);
			Если НайденныеСтроки.Количество() = 0
				И РазрешенныеИмена.Найти(ПараметрДанных.Имя) = Неопределено
				И Не ПараметрДанных.ОграничениеИспользования Тогда
				
				НовыйПараметр = ПараметрыСхемКомпоновкиДанныхВидовЦен.Добавить();
				НовыйПараметр.ВидЦены           = СтрокаВидаЦен.Ссылка;
				НовыйПараметр.Имя               = ПараметрДанных.Имя;
				НовыйПараметр.Заголовок         = ПараметрДанных.Заголовок;
				НовыйПараметр.Значение          = ПараметрДанных.Значение;
				НовыйПараметр.ДоступныеЗначения = ПараметрДанных.ПолучитьДоступныеЗначения();
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Настройки компоновки данных
		ПользовательскаяНастройка = НастройкиКомпоновкиДанных.Найти(СтрокаВидаЦен.Ссылка, "ВидЦены");
		Если ПользовательскаяНастройка = Неопределено
			И СтрокаВидаЦен.НайденыОбязательныеПараметры Тогда
			
			ПользовательскаяНастройка = НастройкиКомпоновкиДанных.Добавить();
			ПользовательскаяНастройка.ВидЦены                   = СтрокаВидаЦен.Ссылка;
			
			Если Не ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанных) Тогда
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				УстановитьПривилегированныйРежим(Истина);
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
				УстановитьПривилегированныйРежим(Ложь);
				
				Если ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанных) Тогда
					КомпоновщикНастроек.ЗагрузитьНастройки(СхемаИНастройки.НастройкиКомпоновкиДанных);
				Иначе
					КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
				КонецЕсли;
				
				ПользовательскаяНастройка.НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
			Иначе
				ПользовательскаяНастройка.НастройкиКомпоновкиДанных = СхемаИНастройки.НастройкиКомпоновкиДанных;
			КонецЕсли;
			
			СтруктураДанных = ОписаниеПараметров(
				СтрокаВидаЦен.Ссылка,
				ПользовательскаяНастройка.НастройкиКомпоновкиДанных,
				ПараметрыСхемКомпоновкиДанныхВидовЦен
			);
			
		ИначеЕсли ПользовательскаяНастройка = Неопределено
			И Не СтрокаВидаЦен.НайденыОбязательныеПараметры Тогда
			
			Если ЗначениеЗаполнено(СхемаИНастройки.НастройкиКомпоновкиДанных) Тогда
				СтруктураДанных = ОписаниеПараметров(
					СтрокаВидаЦен.Ссылка,
					СхемаИНастройки.НастройкиКомпоновкиДанных,
					ПараметрыСхемКомпоновкиДанныхВидовЦен
				);
			Иначе
				СтруктураДанных = ОписаниеПараметров(
					СтрокаВидаЦен.Ссылка,
					СхемаКомпоновкиДанных.НастройкиПоУмолчанию,
					ПараметрыСхемКомпоновкиДанныхВидовЦен
				);
			КонецЕсли;
			
		Иначе
			
			СтруктураДанных = ОписаниеПараметров(СтрокаВидаЦен.Ссылка,
				ПользовательскаяНастройка.НастройкиКомпоновкиДанных,
				ПараметрыСхемКомпоновкиДанныхВидовЦен
			);
			
		КонецЕсли;
		
		СтрокаВидаЦен.Параметры = СтруктураДанных.ОписаниеПараметров;
		
	КонецЦикла;
	
	АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен = ПоместитьВоВременноеХранилище(
		ПараметрыСхемКомпоновкиДанныхВидовЦен,
		УникальныйИдентификатор
	);
	
	Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
		УдалитьВидЦен = Истина;
		Если СтрокаВидаЦен.ПометкаУдаления ИЛИ СтрокаВидаЦен.ЗапрещенныйВидЦены Тогда
			
			Если СтрокаВидаЦен.ЗависимыеЦены.Количество() <> 0 Тогда
				Для Каждого ВидЦены Из СтрокаВидаЦен.ЗависимыеЦены Цикл
					НайденноеЗначение = ТаблицаВидовЦен.Найти(ВидЦены.Значение, "Ссылка");
					Если НайденноеЗначение <> Неопределено Тогда
						Если Не НайденноеЗначение.ПометкаУдаления Тогда
							УдалитьВидЦен = Ложь;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если УдалитьВидЦен
				И МассивУдаляемыхВидовЦен.Найти(СтрокаВидаЦен) = Неопределено
				И Объект.ВидыЦен.НайтиСтроки(Новый Структура("ВидЦены" , СтрокаВидаЦен.Ссылка)).Количество() = 0 Тогда
				МассивУдаляемыхВидовЦен.Добавить(СтрокаВидаЦен);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаВидаЦен Из ТаблицаВидовЦен Цикл
		УдаляемыеСтроки = Новый Массив;
		Для Каждого ВидЦены Из СтрокаВидаЦен.ЗависимыеЦены Цикл
			Если МассивУдаляемыхВидовЦен.Найти(ТаблицаВидовЦен.Найти(ВидЦены.Значение, "Ссылка")) <> Неопределено Тогда
				УдаляемыеСтроки.Добавить(ВидЦены);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементМассива Из УдаляемыеСтроки Цикл
			СтрокаВидаЦен.ЗависимыеЦены.Удалить(ЭлементМассива);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из МассивУдаляемыхВидовЦен Цикл
		ТаблицаВидовЦен.Удалить(ТекЭлемент);
	КонецЦикла;
	
	Возврат ТаблицаВидовЦен;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьВыбранныеЦены(ТаблицаНастройкиКомпоновкиДанных)
	
	ВыбранныеЦены.Очистить();
	
	Таблица = ЗагрузитьСправочникВидовЦен(ТаблицаНастройкиКомпоновкиДанных);
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		НоваяСтрока = ВыбранныеЦены.Добавить();
		
		НоваяСтрока.УстанавливатьЦенуПриВводеНаОсновании = СтрокаТЧ.УстанавливатьЦенуПриВводеНаОсновании;
		НоваяСтрока.Формула                              = СтрокаТЧ.Формула;
		НоваяСтрока.Валюта                               = СтрокаТЧ.Валюта;
		НоваяСтрока.Идентификатор                        = СтрокаТЧ.Идентификатор;
		НоваяСтрока.ИмяКолонки                           = СтрокаТЧ.ИмяКолонки;
		НоваяСтрока.Наименование                         = СтрокаТЧ.Наименование;
		НоваяСтрока.ОкруглятьВБольшуюСторону             = СтрокаТЧ.ОкруглятьВБольшуюСторону;
		НоваяСтрока.ПорогСрабатывания                    = СтрокаТЧ.ПорогСрабатывания;
		НоваяСтрока.РеквизитДопУпорядочивания            = СтрокаТЧ.РеквизитДопУпорядочивания;
		НоваяСтрока.СпособЗаданияЦены                    = СтрокаТЧ.СпособЗаданияЦены;
		НоваяСтрока.Ссылка                               = СтрокаТЧ.Ссылка;
		НоваяСтрока.Уровень                              = СтрокаТЧ.Уровень;
		НоваяСтрока.ЗапрещенныйВидЦены                   = СтрокаТЧ.ЗапрещенныйВидЦены;
		НоваяСтрока.БазовыйВидЦены                       = СтрокаТЧ.БазовыйВидЦены;
		НоваяСтрока.Наценка                              = СтрокаТЧ.Наценка;
		НоваяСтрока.ПометкаУдаления                      = СтрокаТЧ.ПометкаУдаления;
		
		// Служебные поля для работы с настройками СКД
		НоваяСтрока.АдресСхемыКомпоновкиДанных         = СтрокаТЧ.АдресСхемыКомпоновкиДанных;
		НоваяСтрока.АдресНастроекСхемыКомпоновкиДанных = СтрокаТЧ.АдресНастроекСхемыКомпоновкиДанных;
		НоваяСтрока.НайденыОбязательныеПараметры = СтрокаТЧ.НайденыОбязательныеПараметры;
		НоваяСтрока.Параметры                    = СтрокаТЧ.Параметры;
		
		НоваяСтрока.ПорогиСрабатывания.Загрузить(СтрокаТЧ.ПорогиСрабатывания);
		НоваяСтрока.ПравилаОкругленияЦены.Загрузить(СтрокаТЧ.ПравилаОкругленияЦены);
		НоваяСтрока.ЦеновыеГруппы.Загрузить(СтрокаТЧ.ЦеновыеГруппы);
		НоваяСтрока.ВлияющиеВидыЦен.Загрузить(СтрокаТЧ.ВлияющиеВидыЦен);
		НоваяСтрока.ВлияющиеЦены.ЗагрузитьЗначения(СтрокаТЧ.ВлияющиеЦены.ВыгрузитьЗначения());
		НоваяСтрока.ЗависимыеЦены.ЗагрузитьЗначения(СтрокаТЧ.ЗависимыеЦены.ВыгрузитьЗначения());
		
	КонецЦикла;
	ВыбранныеЦены.Сортировать("Уровень");
	
	ЕстьВидыЦенСКД = Ложь;
	ЕстьВидыЦенФормулы = Ложь;
	Для Каждого СтрокаТЧ Из Объект.ВидыЦен Цикл
		СтрокаВидаЦен = НайтиСтрокуВидаЦен(ВыбранныеЦены, СтрокаТЧ.ВидЦены);
		СтрокаВидаЦен.Выбрана = Истина;
	КонецЦикла;
	
	Для Каждого СтрокаВидаЦен Из ВыбранныеЦены Цикл
		Если СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
			ИЛИ СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
			ЕстьВидыЦенСКД = Истина;
		КонецЕсли;
		Если СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен
			ИЛИ СтрокаВидаЦен.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен Тогда
			ЕстьВидыЦенФормулы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВидыЦенФормулы Тогда
		// Заполнить флаги "Влияет" и "Зависит"
		Для Каждого ВидЦены Из ВыбранныеЦены Цикл
			ВидЦены.Зависит = Ложь;
			ВидЦены.Влияет  = Ложь;
		КонецЦикла;
		
		Для Каждого ВидЦены Из ВыбранныеЦены Цикл
			
			Если ВидЦены.Выбрана Тогда
				
				Для Каждого ЗависимаяЦена Из ВидЦены.ЗависимыеЦены Цикл
					СтрокаЗависимойЦены         = НайтиСтрокуВидаЦен(ВыбранныеЦены, ЗависимаяЦена.Значение);
					СтрокаЗависимойЦены.Зависит = Не СтрокаЗависимойЦены.Выбрана;
				КонецЦикла;
				
				Для Каждого ВлияющаяЦена Из ВидЦены.ВлияющиеЦены Цикл
					СтрокаВыбраннойЦены        = НайтиСтрокуВидаЦен(ВыбранныеЦены, ВлияющаяЦена.Значение);
					СтрокаВыбраннойЦены.Влияет = Не СтрокаВыбраннойЦены.Выбрана;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ВыбранныеЦеныВыбратьВсеВлияющие.Видимость  = ЕстьВидыЦенФормулы;
	Элементы.ВыбранныеЦеныВыбратьВсеЗависимые.Видимость = ЕстьВидыЦенФормулы;
	Элементы.ВыбранныеЦеныЗависимыеЦены.Видимость       = ЕстьВидыЦенФормулы;
	Элементы.ВыбранныеЦеныВлияющиеЦены.Видимость        = ЕстьВидыЦенФормулы;
	
	Элементы.ДеревоЦенПереключательОтображатьВлияющиеЦены.Видимость = ЕстьВидыЦенФормулы;
	
	Элементы.ВыбранныеЦеныГруппаПараметры.Видимость                  = ЕстьВидыЦенСКД;
	Элементы.ВыбранныеЦеныВосстановитьНастройкиПоУмолчанию.Видимость = ЕстьВидыЦенСКД;
	Элементы.ВыбранныеЦеныРедактироватьНастройки.Видимость           = ЕстьВидыЦенСКД;
	
КонецПроцедуры

// Изменяет доступность элементов в соответствии с признаком согласованности документа
//
&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Объект.Согласован;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Ответственный");
	МассивЭлементов.Добавить("Номер");
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("НомерВПределахДня");
	МассивЭлементов.Добавить("ВыбранныеЦены");
	
	МассивЭлементов.Добавить("ДеревоЦен;ПередНачаломДобавления,ПередУдалением");
	
	МассивЭлементов.Добавить("ДеревоЦенПодобратьТовары");
	МассивЭлементов.Добавить("ДеревоЦенДобавитьТоварыПоЦеновойГруппе");
	МассивЭлементов.Добавить("ДеревоЦенДобавитьТоварыПоОтбору");
	МассивЭлементов.Добавить("ДеревоЦенДобавитьНоменклатуру");
	МассивЭлементов.Добавить("ДеревоЦенДобавитьХарактеристику");
	МассивЭлементов.Добавить("ДеревоЦенЗагрузитьСтарыеЦены");
	МассивЭлементов.Добавить("ДеревоЦенРассчитать");
	МассивЭлементов.Добавить("ДеревоЦенОкруглитьРучныеЦены");
	МассивЭлементов.Добавить("ДеревоЦенИзменитьЦеныНаПроцент");
	МассивЭлементов.Добавить("КонтекстноеМенюДеревоЦенДобавитьХарактеристику");
	
	МассивЭлементов.Добавить("ВыбранныеЦеныИсключитьВсеВидыЦен");
	МассивЭлементов.Добавить("ВыбранныеЦеныВыбратьВсеВидыЦен");
	МассивЭлементов.Добавить("ВыбранныеЦеныВыбратьВсеВлияющие");
	МассивЭлементов.Добавить("ВыбранныеЦеныВыбратьВсеЗависимые");
	МассивЭлементов.Добавить("ВыбранныеЦеныРедактироватьНастройки");
	МассивЭлементов.Добавить("ВыбранныеЦеныВосстановитьНастройкиПоУмолчанию");
	
	МассивЭлементов.Добавить("ДеревоЦенСортироватьПоНаименованиюНоменклатурыСУчетомИерархииГрупп");
	МассивЭлементов.Добавить("ДеревоЦенСортироватьПоНаименованиюНоменклатурыСУчетомИерархииВидов");
	МассивЭлементов.Добавить("ДеревоЦенСортироватьПоНаименованиюНоменклатуры");
	МассивЭлементов.Добавить("ДеревоЦенДобавитьТоварыПоОтборуВидовЦен");
	
	МассивЭлементов.Добавить("ДеревоЦенВыгрузитьВExcel");
	МассивЭлементов.Добавить("ДеревоЦенЗагрузитьИзExcel");
	МассивЭлементов.Добавить("ТоварыПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	МассивЭлементов.Добавить("ДеревоЦенУдалитьТоварыБезИзмененныхЦен");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
КонецПроцедуры

// Устанавливает признак автоматического перерасчета цен
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура УстановитьРассчитыватьАвтоматически(НовоеЗначение)
	
	Если НовоеЗначение = Неопределено Тогда
		НовоеЗначение = Истина;
	КонецЕсли;
	
	РассчитыватьАвтоматически = НовоеЗначение;
	Элементы.ДеревоЦенПереключательРассчитыватьАвтоматически.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак автозаполнения цен характеристик по номенклатуре
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре(НовоеЗначение)
	
	Если НовоеЗначение = Неопределено Тогда
		НовоеЗначение = Истина;
	КонецЕсли;
	
	ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре = НовоеЗначение;
	Элементы.ДеревоЦенПереключательЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак автозаполнения цен характеристик по номенклатуре
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура УстановитьАвтоматическиДобавлятьХарактеристики(НовоеЗначение)
	
	Если НовоеЗначение = Неопределено Тогда
		НовоеЗначение = Истина;
	КонецЕсли;
	
	АвтоматическиДобавлятьХарактеристики = НовоеЗначение;
	Элементы.ДеревоЦенПереключательАвтоматическиДобавлятьХарактеристики.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак фиксации колонок "Номенклатура" и "Характеристика" слева
//
// Параметры:
// НовоеЗначение - Булево
//
&НаСервере
Процедура ЗафиксироватьКолонкуНоменклатура(НовоеЗначение)
	
	Если НовоеЗначение = Неопределено Тогда
		НовоеЗначение = Истина;
	КонецЕсли;
	
	ЗафиксироватьКолонкуНоменклатура = НовоеЗначение;
	
	Элементы.ДеревоЦенНоменклатура.ФиксацияВТаблице   = ?(ЗафиксироватьКолонкуНоменклатура,ФиксацияВТаблице.Лево,ФиксацияВТаблице.Нет);
	Элементы.ДеревоЦенХарактеристика.ФиксацияВТаблице = ?(ЗафиксироватьКолонкуНоменклатура,ФиксацияВТаблице.Лево,ФиксацияВТаблице.Нет);
	
	Элементы.ДеревоЦенПереключательЗафиксироватьКолонкуНоменклатура.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Помещает последние курсы валют во временное хранилище
//
&НаСервере
Функция СоответствиеКурсовВалют()
	
	СоответствиеВалют = Новый Соответствие;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних");
	
	Запрос.УстановитьПараметр("Дата", ДатаДокумента(Объект.Дата));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураВалюты = Новый Структура;
		СтруктураВалюты.Вставить("Валюта", Выборка.Валюта);
		СтруктураВалюты.Вставить("Курс", Выборка.Курс);
		СтруктураВалюты.Вставить("Кратность", Выборка.Кратность);
		
		СоответствиеВалют.Вставить(Выборка.Валюта, СтруктураВалюты);
		
	КонецЦикла;
	
	Возврат СоответствиеВалют;
	
КонецФункции

// Помещает последние курсы валют во временное хранилище
//
&НаСервере
Функция КурсыВалют()
	
	Если КурсыВалют = Неопределено Тогда
		КурсыВалют = СоответствиеКурсовВалют();
		Возврат КурсыВалют;
	Иначе
		Возврат КурсыВалют;
	КонецЕсли;
	
КонецФункции

// Осуществляет поиск курса валюты в таблице курсов валют
//
// Параметры:
// Валюта - СправочникСсылка.Валюты - ссылка на валюту, курсы которой необходимо получить
//
// Возвращаемое значение:
// СтрокаТаблицыЗначений - если курс найден, Неопределено в противном случае
//
&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокуВалюты(СоответствиеВалют, Валюта)
	
	СтруктураВалюты = СоответствиеВалют.Получить(Валюта);
	
	Если СтруктураВалюты = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(НСтр("ru='Не установлен курс валюты: %Валюта%'"), "%Валюта%", Валюта));
	КонецЕсли;
	
	Возврат СтруктураВалюты;
	
КонецФункции

// Осуществляет пересчет цены из валюты в валюту
//
// Параметры:
// ВалютаИсточник - СправочникСсылка.Валюты - валюта, из которой необходимо пересчитать
// ВалютаНазначение - СправочникСсылка.Валюты - валюта, в которую необходимо пересчитать
// Цена - Число - цена, которую необходимо пересчитать из валюты в валюту
//
// Возвращаемое значение:
// Цена в новой валюте
//
&НаКлиентеНаСервереБезКонтекста
Функция ПересчитатьВалюту(ВалютаИсточник, ВалютаНазначение, Цена, СоответствиеВалют)
	
	Если ВалютаИсточник <> ВалютаНазначение Тогда
		
		СтрокаВалютыИсточника  = НайтиСтрокуВалюты(СоответствиеВалют, ВалютаИсточник);
		СтрокаВалютыНазначения = НайтиСтрокуВалюты(СоответствиеВалют, ВалютаНазначение);
		
		Если СтрокаВалютыИсточника <> Неопределено И СтрокаВалютыНазначения <> Неопределено Тогда
			Возврат Окр((Цена * СтрокаВалютыИсточника.Курс * СтрокаВалютыНазначения.Кратность) / (СтрокаВалютыНазначения.Курс * СтрокаВалютыИсточника.Кратность), 2);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции

// Возвращает строку для пересчета цен из валюты в валюту
//
// Параметры:
// ВалютаИсточник - СправочникСсылка.Валюты - валюта, из которой необходимо пересчитать
// ВалютаНазначение - СправочникСсылка.Валюты - валюта, в которую необходимо пересчитать
//
// Возвращаемое значение:
// Строка, выражение для пересчета цены из валюты в валюту
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПересчетаВалюты(ВалютаИсточник, ВалютаНазначение, СоответствиеВалют)
	
	Если ВалютаИсточник <> ВалютаНазначение Тогда
		
		СтрокаВалютыИсточника  = НайтиСтрокуВалюты(СоответствиеВалют, ВалютаИсточник);
		СтрокаВалютыНазначения = НайтиСтрокуВалюты(СоответствиеВалют, ВалютаНазначение);
		
		Если СтрокаВалютыИсточника <> Неопределено И СтрокаВалютыНазначения <> Неопределено Тогда
			Возврат СтрЗаменить("*(" + Строка(Формат(СтрокаВалютыИсточника.Курс, "ЧРД=."))
			        + "*" + Строка(Формат(СтрокаВалютыНазначения.Кратность, "ЧРД=."))
			        + ")/(" + Строка(Формат(СтрокаВалютыНазначения.Курс, "ЧРД=.")) + "*"
			        + Строка(Формат(СтрокаВалютыИсточника.Кратность, "ЧРД=.")) + ")", ",", ".");
		КонецЕсли;
	КонецЕсли;

	Возврат "";
	
КонецФункции

// Возвращает строку кода на языке 1С: Предприятия для пересчета цен из упаковки в упаковку
//
// Параметры:
// СтрокаТаблицыЦен       - ДанныеФормыЭлементКоллекции - строка таблицы
// ВидЦеныИсточник        - СправочникСсылка.ВидыЦен - вид цен, из которого необходимо пересчитать
// ВидЦеныНазначение      - СправочникСсылка.ВидыЦен - вид цен, в который необходимо пересчитать
// СоответствиеУпаковок   - Соответствие - таблица, в которой можно найти коэффициент упаковки
//
// Возвращаемое значение:
// Строка, выражение для пересчета цены из упаковки в упаковку
//
&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПересчетаУпаковок(СтрокаТаблицыЦен, ВидЦеныИсточник, ВидЦеныНазначение, СоответствиеУпаковок)
	
	СтрокаПересчетаУпаковок = "";
	
	// Определение коэффициента упаковки текущей цены
	УпаковкаЦеныИсточника = СтрокаТаблицыЦен["Упаковка" + ВидЦеныИсточник.ИмяКолонки];
	КоэффициентУпаковкиЦеныИсточника = 1;
	Если ЗначениеЗаполнено(УпаковкаЦеныИсточника) Тогда
		
		НайденноеЗначение = СоответствиеУпаковок.Получить(УпаковкаЦеныИсточника);
		Если НайденноеЗначение <> Неопределено Тогда
			КоэффициентУпаковкиЦеныИсточника = НайденноеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
	// Определение коэффициента упаковки влияющей цены
	УпаковкаЦеныНазначения = СтрокаТаблицыЦен["Упаковка" + ВидЦеныНазначение.ИмяКолонки];
	КоэффициентУпаковкиЦеныНазначения = 1;
	Если ЗначениеЗаполнено(УпаковкаЦеныНазначения) Тогда
		
		НайденноеЗначение = СоответствиеУпаковок.Получить(УпаковкаЦеныНазначения);
		Если НайденноеЗначение <> Неопределено Тогда
			КоэффициентУпаковкиЦеныНазначения = НайденноеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоэффициентУпаковкиЦеныИсточника <> КоэффициентУпаковкиЦеныНазначения Тогда
		СтрокаПересчетаУпаковок = "/" + Строка(Формат(КоэффициентУпаковкиЦеныИсточника, "ЧРД=."))
		                          + "*" + Строка(Формат(КоэффициентУпаковкиЦеныНазначения, "ЧРД=."));
	КонецЕсли;
		
	Возврат СтрокаПересчетаУпаковок;
	
КонецФункции

// Осуществляет поиск строк в таблице по полям строки
//
// Параметры:
// Таблица - ДанныеФормыКоллекция - Таблица, в которой необходимо найти строки
// СтрокаКлюч - ДанныеФормыЭлементКоллеккции - Строка, по полям которой должен
// осуществляться поиск
//
// Возвращаемое значение:
// Массив найденных строк таблицы
//
&НаСервере
Функция НайтиСтрокуДереваЦен(СтрокаНоменклатуры)
	
	Если ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = Неопределено Тогда
		ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = ТаблицаСоответствия();
	КонецЕсли;
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		Отбор = Новый Структура("Номенклатура, Характеристика", СтрокаНоменклатуры.Номенклатура, СтрокаНоменклатуры.Характеристика);
	Иначе
		Отбор = Новый Структура(
			"Номенклатура, Характеристика",
			СтрокаНоменклатуры.Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка()
		);
	КонецЕсли;
	
	МассивСтрок = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.НайтиСтроки(Отбор);
	Если МассивСтрок.Количество() > 0 Тогда
		Возврат МассивСтрок[0].СтрокаДереваЦен;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Осуществляет поиск строк в таблице по полям строки
//
// Параметры:
// Таблица - ДанныеФормыКоллекция - Таблица, в которой необходимо найти строки
// СтрокаКлюч - ДанныеФормыЭлементКоллеккции - Строка, по полям которой должен
// осуществляться поиск
//
// Возвращаемое значение:
// Массив найденных строк таблицы
//
&НаСервере
Функция ТаблицаСоответствия()
	
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = СоздатьПустуюТаблицуНоменклатуры();
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Колонки.Добавить("СтрокаДереваЦен");
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		
		Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			
			НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			НоваяСтрокаТЗ.Номенклатура    = ЭлементНоменклатура.Номенклатура;
			НоваяСтрокаТЗ.Характеристика  = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
			ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
			Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				
				НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
				НоваяСтрокаТЗ.Номенклатура    = ЭлементХарактеристика.Номенклатура;
				НоваяСтрокаТЗ.Характеристика  = ЭлементХарактеристика.Характеристика;
				НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
			
			НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			НоваяСтрокаТЗ.Номенклатура    = ЭлементНоменклатура.Номенклатура;
			НоваяСтрокаТЗ.Характеристика  = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Индексы.Добавить("Номенклатура, Характеристика");
	
	Возврат ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров;
	
КонецФункции

// Осуществляет загрузку цен для всех строк табличной части товары
//
&НаСервере
Процедура ЗагрузитьТоварыВДеревоЦен(ДеревоЦен, ВыборкаНоменклатура, ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров)
	
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = СоздатьПустуюТаблицуНоменклатуры();
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Колонки.Добавить("СтрокаДереваЦен");
	
	ЭлементыДереваЦен = ДеревоЦен.ПолучитьЭлементы();
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
	
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ЭлементНоменклатура = ЭлементыДереваЦен.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
			ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
			
			НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			НоваяСтрокаТЗ.Номенклатура = ВыборкаНоменклатура.Номенклатура;
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
					
					ЭлементХарактеристика = ЭлементНоменклатура.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
					ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
					
					НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
					НоваяСтрокаТЗ.Номенклатура    = ВыборкаХарактеристики.Номенклатура;
					НоваяСтрокаТЗ.Характеристика  = ВыборкаХарактеристики.Характеристика;
					НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
					
					ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВидыЦен.Следующий() Цикл
						
						Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
						
						ЭлементХарактеристика[                     ИмяКолонки] = ВыборкаВидыЦен.Цена;
						ЭлементХарактеристика["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
						ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
						ЭлементХарактеристика["ИзмененаВручную"  + ИмяКолонки] = ВыборкаВидыЦен.ЦенаИзмененаВручную;
						ЭлементХарактеристика["Упаковка"         + ИмяКолонки] = ВыборкаВидыЦен.Упаковка;
						
					КонецЦикла;
					
				Иначе
					
					ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВидыЦен.Следующий() Цикл
						
						Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
						
						ЭлементНоменклатура[                     ИмяКолонки] = ВыборкаВидыЦен.Цена;
						ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
						ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
						ЭлементНоменклатура["ИзмененаВручную"  + ИмяКолонки] = ВыборкаВидыЦен.ЦенаИзмененаВручную;
						ЭлементНоменклатура["Упаковка"         + ИмяКолонки] = ВыборкаВидыЦен.Упаковка;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
	
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ЭлементНоменклатура = ЭлементыДереваЦен.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
			ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
			
			НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			НоваяСтрокаТЗ.Номенклатура = ВыборкаНоменклатура.Номенклатура;
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
					
					ЭлементХарактеристика = ЭлементНоменклатура.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
					ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
					
					НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
					НоваяСтрокаТЗ.Номенклатура    = ВыборкаХарактеристики.Номенклатура;
					НоваяСтрокаТЗ.Характеристика  = ВыборкаХарактеристики.Характеристика;
					НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
					
					ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВидыЦен.Следующий() Цикл
						
						Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
						
						ЭлементХарактеристика[                     ИмяКолонки] = ВыборкаВидыЦен.Цена;
						ЭлементХарактеристика["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
						ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
						ЭлементХарактеристика["ИзмененаВручную"  + ИмяКолонки] = ВыборкаВидыЦен.ЦенаИзмененаВручную;
						
					КонецЦикла;
					
				Иначе
					
					ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаВидыЦен.Следующий() Цикл
						
						Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
							Продолжить;
						КонецЕсли;
						
						ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
						
						ЭлементНоменклатура[                     ИмяКолонки] = ВыборкаВидыЦен.Цена;
						ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
						ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
						ЭлементНоменклатура["ИзмененаВручную"  + ИмяКолонки] = ВыборкаВидыЦен.ЦенаИзмененаВручную;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Индексы.Добавить("Номенклатура, Характеристика");
	
КонецПроцедуры

// Осуществляет загрузку цен для всех строк табличной части товары
//
&НаСервере
Процедура ЗагрузитьТабличнуюЧастьТовары()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Индекс                         КАК Индекс,
	|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
	|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка,
	|	ВременнаяТаблицаТовары.ЦенаИзмененаВручную            КАК ЦенаИзмененаВручную
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика, ВидЦены
	|;
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Индекс                         КАК Индекс,
	|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
	|	ВременнаяТаблицаТовары.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа     КАК ЦеноваяГруппа,
	|
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры) ТОГДА Истина
	|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры) ТОГДА Истина
	|	ИНАЧЕ Ложь КОНЕЦ КАК ХарактеристикиИспользуются,
	|
	|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
	|	ВременнаяТаблицаТовары.ЦенаИзмененаВручную            КАК ЦенаИзмененаВручную,
	|	
	|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ЦеныНоменклатуры.Цена
	|	ИНАЧЕ
	|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент,1)*ЕСТЬNULL(ВременнаяТаблицаТовары.Упаковка.Коэффициент,1)
	|	КОНЕЦ КАК ДействующаяЦена,
	|	
	|	ВЫРАЗИТЬ(ВЫБОР КОГДА ЦеныНоменклатуры.Цена <> 0 Тогда 100*(ВременнаяТаблицаТовары.Цена - ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ЦеныНоменклатуры.Цена
	|	ИНАЧЕ
	|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент,1)*ЕСТЬNULL(ВременнаяТаблицаТовары.Упаковка.Коэффициент,1)
	|	КОНЕЦ)/ 
	|	
	|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ЦеныНоменклатуры.Цена
	|	ИНАЧЕ
	|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент,1)*ЕСТЬNULL(ВременнаяТаблицаТовары.Упаковка.Коэффициент,1)
	|	КОНЕЦ ИНАЧЕ 0.00 КОНЕЦ КАК Число(10,2)) КАК Процент,
	|	
	|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, (Номенклатура, Характеристика) В (Выбрать Номенклатура, Характеристика Из ВременнаяТаблицаТовары)) КАК ЦеныНоменклатуры
	|			ПО ЦеныНоменклатуры.Номенклатура   = ВременнаяТаблицаТовары.Номенклатура
	|			 И ЦеныНоменклатуры.Характеристика = ВременнаяТаблицаТовары.Характеристика
	|			 И ЦеныНоменклатуры.ВидЦены        = ВременнаяТаблицаТовары.ВидЦены
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Индекс
	|	
	|ИТОГИ
	|	МИНИМУМ(ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ПО
	|	Номенклатура,
	|	Характеристика
	|");
	
	ТаблицаТоваров =  Объект.Товары.Выгрузить();
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТоваров, "Индекс");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Дата",   ДатаДляЗапросаЦенНоменклатуры());
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗагрузитьТоварыВДеревоЦен(ДеревоЦен, ВыборкаНоменклатура, ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров);
	
КонецПроцедуры

// Осуществляет загрузку старых цен для строк таблицы
//
&НаСервере
Процедура ЗагрузитьСтарыеЦеныНоменклатуры(ТаблицаНоменклатуры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
	|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка
	|ПОМЕСТИТЬ
	|	ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика, ВидЦены
	|;
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура                   КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика                 КАК Характеристика,
	|	ВременнаяТаблицаТовары.ВидЦены                        КАК ВидЦены,
	|	ВременнаяТаблицаТовары.Цена                           КАК Цена,
	|	
	|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ЦеныНоменклатуры.Цена
	|	ИНАЧЕ
	|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент,1)*ЕСТЬNULL(ВременнаяТаблицаТовары.Упаковка.Коэффициент,1)
	|	КОНЕЦ КАК ДействующаяЦена,
	|	
	|	ВЫРАЗИТЬ(ВЫБОР КОГДА ЦеныНоменклатуры.Цена <> 0 Тогда 100*(ВременнаяТаблицаТовары.Цена - ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ЦеныНоменклатуры.Цена
	|	ИНАЧЕ
	|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент,1)*ЕСТЬNULL(ВременнаяТаблицаТовары.Упаковка.Коэффициент,1)
	|	КОНЕЦ)/ 
	|	
	|	ВЫБОР КОГДА ЦеныНоменклатуры.Упаковка = ВременнаяТаблицаТовары.Упаковка ТОГДА
	|		ЦеныНоменклатуры.Цена
	|	ИНАЧЕ
	|		ЦеныНоменклатуры.Цена/ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент,1)*ЕСТЬNULL(ВременнаяТаблицаТовары.Упаковка.Коэффициент,1)
	|	КОНЕЦ ИНАЧЕ 0.00 КОНЕЦ КАК Число(10,2)) КАК Процент,
	|	
	|	ВременнаяТаблицаТовары.Упаковка                       КАК Упаковка
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, (Номенклатура, Характеристика, ВидЦены) В (Выбрать Т.Номенклатура, Т.Характеристика, Т.ВидЦены Из ВременнаяТаблицаТовары КАК Т)) КАК ЦеныНоменклатуры
	|			ПО ЦеныНоменклатуры.Номенклатура   = ВременнаяТаблицаТовары.Номенклатура
	|			 И ЦеныНоменклатуры.Характеристика = ВременнаяТаблицаТовары.Характеристика
	|			 И ЦеныНоменклатуры.ВидЦены        = ВременнаяТаблицаТовары.ВидЦены
	|	
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика
	|");
	
	Запрос.УстановитьПараметр("Товары",        ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры());
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНоменклатура = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХарактеристики.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
				
				ЭлементХарактеристика = НайтиСтрокуДереваЦен(ВыборкаХарактеристики);
		
				ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидыЦен.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
					
					ЭлементХарактеристика["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
					ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
					
				КонецЦикла;
				
			Иначе
				
				ЭлементНоменклатура = НайтиСтрокуДереваЦен(ВыборкаХарактеристики);
				
				ВыборкаВидыЦен = ВыборкаХарактеристики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаВидыЦен.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(ВыборкаВидыЦен.ВидЦены) Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяКолонки = ИмяКолонкиПоВидуЦены(ВыборкаВидыЦен.ВидЦены);
					
					ЭлементНоменклатура["СтараяЦена"       + ИмяКолонки] = ВыборкаВидыЦен.ДействующаяЦена;
					ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ВыборкаВидыЦен.Процент;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет колонку на форму
//
// Параметры:
// Имя - Строка - имя колонки на форме
// Заголовок - Строка - заголовок колонки на форме
// ОбработчикПриИзменении - Строка - путь к обработчику поля ПриИзменении()
// ОбработчикНачалоВыбора - Строка - путь к обработчику поля НачалоВыбора()
// ЦветФона - Цвет - цвет фона поля 
// ЦветФонаЗаголовка - Цвет - цвет фона заголовка поля
//
// Возвращаемое значение:
// ПолеФормы
//
&НаСервере
Функция ДобавитьПолеФормы(Имя,
						 Заголовок = Неопределено,
						 ОбработчикПриИзменении = "",
						 ОбработчикНачалоВыбора = "",
						 ШиринаПоля,
						 ЦветФона = Неопределено,
						 ЦветФонаЗаголовка = Неопределено,
						 Родитель = Неопределено,
						 КартинкаШапки = Неопределено,
						 ПутьКДанным = Неопределено,
						 ТолькоПросмотрПоля = Ложь,
						 СвязиПараметровВыбора = Неопределено)
	
	НовоеПоле                     = Элементы.Добавить("ДеревоЦен" + Имя, Тип("ПолеФормы"), ?(Родитель = Неопределено, Элементы.ДеревоЦен, Родитель));
	НовоеПоле.ПутьКДанным         = ?(ЗначениеЗаполнено(ПутьКДанным), ПутьКДанным, "ДеревоЦен." + Имя);
	НовоеПоле.Заголовок           = ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	НовоеПоле.Вид                 = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ТолькоПросмотр      = ТолькоПросмотрПоля;
	НовоеПоле.Ширина              = ШиринаПоля;
	
	Если СвязиПараметровВыбора <> Неопределено Тогда
		НовоеПоле.СвязиПараметровВыбора = СвязиПараметровВыбора;
	КонецЕсли;
	
	Если ЦветФонаЗаголовка <> Неопределено Тогда
		НовоеПоле.ЦветФонаЗаголовка = ЦветФонаЗаголовка;
	КонецЕсли;
	
	Если ЦветФона <> Неопределено Тогда
		НовоеПоле.ЦветФона = ЦветФона;
	КонецЕсли;
		
	Если КартинкаШапки <> Неопределено Тогда
		НовоеПоле.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОбработчикПриИзменении) Тогда
		НовоеПоле.УстановитьДействие("ПриИзменении", ОбработчикПриИзменении);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбработчикНачалоВыбора) Тогда
		НовоеПоле.УстановитьДействие("НачалоВыбора", ОбработчикНачалоВыбора);
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

// Добавляет колонку на форму
//
// Параметры:
// Имя - Строка - имя колонки на форме
// Заголовок - Строка - заголовок колонки на форме
// ОбработчикПриИзменении - Строка - путь к обработчику поля ПриИзменении()
// ОбработчикНачалоВыбора - Строка - путь к обработчику поля НачалоВыбора()
// ЦветФона - Цвет - цвет фона поля 
// ЦветФонаЗаголовка - Цвет - цвет фона заголовка поля
//
// Возвращаемое значение:
// ПолеФормы
//
&НаСервере
Функция ДобавитьГруппуФормы(Имя, Заголовок = Неопределено, ОтображатьВШапке = Ложь, КартинкаШапки = Неопределено, ГруппировкаКолонок, Родитель = Неопределено)
	
	НоваяГруппа                  = Элементы.Добавить("ДеревоЦен" + Имя, Тип("ГруппаФормы"), ?(Родитель = Неопределено, Элементы.ДеревоЦен, Родитель));
	НоваяГруппа.Заголовок        = ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НоваяГруппа.Вид              = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппа.Группировка      = ГруппировкаКолонок;
	НоваяГруппа.ОтображатьВШапке = ОтображатьВШапке;
	
	Если ОтображатьВШапке И КартинкаШапки <> Неопределено Тогда
		НоваяГруппа.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
	
	Возврат НоваяГруппа;
	
КонецФункции

// Формирует таблицу цен на форме
//
&НаСервере
Процедура ПостроитьДеревоЦен()
	
	ДобавляемыеКолонкиТаблицыЦен = Новый Массив();
	УдаляемыеКолонкиТаблицыЦен   = Новый Массив();
	УдаляемыеЭлементы            = Новый Массив();
	УсловныеОформления           = Новый Массив();
	
	ДеревоЗначений = СоздатьПустоеДеревоНоменклатуры();
	
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		
		Если ВидЦены.Выбрана Или ВидЦены.Влияет Тогда
			
			ИмяКолонки = ВидЦены.ИмяКолонки;
			
			ДеревоЗначений.Колонки.Добавить(                     ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)), ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("СтараяЦена"       + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)), ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("ПроцентИзменения" + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(05, 2, ДопустимыйЗнак.Любой)),           ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("ИзмененаВручную"  + ИмяКолонки, Новый ОписаниеТипов("Булево"),                                                                 ВидЦены.Наименование);
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				ДеревоЗначений.Колонки.Добавить("Упаковка" + ИмяКолонки, Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"), "Упаковка");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	РеквизитыТаблицыЦен = ПолучитьРеквизиты("ДеревоЦен");
	Для Каждого Реквизит Из РеквизитыТаблицыЦен Цикл
		Если Найти(Реквизит.Имя, "ВидЦены") Тогда
			УдаляемыеКолонкиТаблицыЦен.Добавить("ДеревоЦен." + Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		Если Найти(Колонка.Имя, "ВидЦены") Тогда
			УдаляемаяКолонка = УдаляемыеКолонкиТаблицыЦен.Найти("ДеревоЦен." + Колонка.Имя);
			Если УдаляемаяКолонка <> Неопределено Тогда
				УдаляемыеКолонкиТаблицыЦен.Удалить(УдаляемаяКолонка);
			Иначе
				ДобавляемыеКолонкиТаблицыЦен.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ДеревоЦен", Колонка.Заголовок, Истина));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если УдаляемыеКолонкиТаблицыЦен.Количество() > 0 Или ДобавляемыеКолонкиТаблицыЦен.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеКолонкиТаблицыЦен, УдаляемыеКолонкиТаблицыЦен);
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из Элементы.ДеревоЦен.ПодчиненныеЭлементы Цикл
		Если Найти(ТекЭлемент.Имя, "ВидЦены") Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого Оформление Из ЭтаФорма.УсловноеОформление.Элементы Цикл
		Если Оформление.Представление = "СозданоПрограммно" Тогда
			УсловныеОформления.Добавить(Оформление);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Оформление Из УсловныеОформления Цикл
		УсловноеОформление.Элементы.Удалить(Оформление);
	КонецЦикла;
	
	
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		
		ИмяКолонки = ВидЦены.ИмяКолонки;
		
		Если ВидЦены.Выбрана ИЛИ ?(ОтображатьВлияющиеЦены, ВидЦены.Влияет, Ложь) Тогда
			
			ЦветЗаголовка = Неопределено;
			ЦветФона      = Неопределено;
			КартинкаШапки = Неопределено;
			
			Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную Тогда
				
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗадаватьВручную;
				
			ИначеЕсли ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
				ИЛИ ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
				
				ЦветФона      = Метаданные.ЭлементыСтиля.КолонкаЦенЗаполнятьПоДаннымИБ.Значение;
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗаполнятьПоДаннымИБ;
				
			ИначеЕсли ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен
				ИЛИ ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен Тогда
				
				ЦветФона      = Метаданные.ЭлементыСтиля.КолонкаЦенРассчитыватьПоФормуламОтДругихВидовЦен.Значение;
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенРассчитыватьПоФормуламОтДругихВидовЦен;
				
			КонецЕсли;
			
			НоваяГруппа = ДобавитьГруппуФормы("ГруппаЦены" + ИмяКолонки, Строка(ВидЦены.Ссылка) + ", " + Строка(ВидЦены.Валюта), Истина, КартинкаШапки, ГруппировкаКолонок.Горизонтальная);
			
			ЗаголовокКолонкиСтараяЦена = ?(ВидЦены.Выбрана, НСтр("ru='Старая цена'"), НСтр("ru='Цена'"));
			
			НовоеПоле = ДобавитьПолеФормы("СтараяЦена" + ИмяКолонки, ЗаголовокКолонкиСтараяЦена, , , 12, ЦветФона, ЦветЗаголовка, НоваяГруппа,,,Истина);
			НовоеПоле.ЦветТекста = WebЦвета.Серый;
			
			Если ВидЦены.Выбрана Тогда
				
				НовоеПоле = ДобавитьПолеФормы("ПроцентИзменения" + ИмяКолонки, "%", "ДеревоЦенЦенаПриИзменении", , 6, ЦветФона, ЦветЗаголовка, НоваяГруппа);
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				НовоеПоле.ВыделятьОтрицательные = Истина;
				НовоеПоле.Подсказка = НСтр("ru = 'Процент изменения стоимости'");
				
				НовоеПоле = ДобавитьПолеФормы(ИмяКолонки, НСтр("ru='Новая цена'"), "ДеревоЦенЦенаПриИзменении", , 12, ЦветФона, ЦветЗаголовка, НоваяГруппа);
				
				НовоеПоле = ДобавитьПолеФормы("ИзмененаВручную" + ИмяКолонки, НСтр("ru='Изм.'"), , , 6, ЦветФона, ЦветЗаголовка, НоваяГруппа,,,Истина);
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				НовоеПоле.Видимость  = Ложь;
				
			КонецЕсли;
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяГруппаУпаковка = ДобавитьГруппуФормы("ГруппаУпаковки" + ИмяКолонки, НСтр("ru='Упаковка, ед. изм'"), Ложь,, ГруппировкаКолонок.ВЯчейке, НоваяГруппа);
				
				НоваяСвязь = Новый СвязьПараметраВыбора("Номенклатура", "Элементы.ДеревоЦен.ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.НеИзменять);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НоваяСвязь);
				НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);

				ДобавитьПолеФормы("Упаковка" + ИмяКолонки,
									НСтр("ru='Упаковка'"),
									"ДеревоЦенУпаковкаПриИзменении",
									"ДеревоЦенУпаковкаНачалоВыбора",
									12,
									ЦветФона,
									ЦветЗаголовка,
									НоваяГруппаУпаковка
									,
									,
									,
									,
									НовыеСвязи);
				ДобавитьПолеФормы("ЕдиницаИзмерения" + ИмяКолонки, НСтр("ru='Ед. изм.'"), , , 8, ЦветФона, ЦветЗаголовка, НоваяГруппаУпаковка, , "ДеревоЦен.ЕдиницаИзмерения", Истина);
			Иначе
				ДобавитьПолеФормы("ЕдиницаИзмерения" + ИмяКолонки, НСтр("ru='Ед. изм.'"), , , 8, ЦветФона, ЦветЗаголовка, НоваяГруппа, , "ДеревоЦен.ЕдиницаИзмерения", Истина);
			КонецЕсли;
			
			// Условное оформление цен, измененных вручную
			НовыйЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
			НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
			НовыйЭлементУсловногоОформления.Использование = Истина;
			
			ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.ИзмененаВручную" + ИмяКолонки);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Истина;
			
			НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
			НовоеПоле.Использование = Истина;
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЦен" + ИмяКолонки);
			
			НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоЦенЗначение = РеквизитФормыВЗначение("ДеревоЦен");
	ДеревоЦенЗначение.Колонки.Очистить();
	
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		ДеревоЦенЗначение.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЦенЗначение, "ДеревоЦен");
	
КонецПроцедуры

// Осуществляет расчет вычисляемых цен
//
// Параметры:
// ТаблицаНоменклатуры - ДанныеФормыКоллекция - Таблица, в которой осуществляется расчет цен
// ВидыЦен - Массив - Виды цен, которые необходимо рассчитать
// ТолькоНезаполенные - Указывает на необходимость расчета ранее заполненных цен
//
&НаСервере
Процедура РассчитатьВычисляемыеЦены(ТаблицаНоменклатуры, ВидыЦен = Неопределено, ТолькоНезаполенные = Ложь, ИзмененноеПоле = Неопределено)
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		СоответствиеУпаковок = КоэффициентыУпаковокНоменклатурыДереваТоваров(ТаблицаНоменклатуры);
	Иначе
		СоответствиеУпаковок = Неопределено;
	КонецЕсли;
	
	Если ВидыЦен = Неопределено Тогда
		Если ИзмененноеПоле = Неопределено Тогда
			ВидыЦен = ВыбранныеСтрокиТаблицыВидовЦен();
		Иначе
			СтрокаИзмененныйВидЦены = СтрокаВидаЦеныПоИмениПоля(ВыбранныеЦены, ИзмененноеПоле);
			Если СтрокаИзмененныйВидЦены <> Неопределено Тогда
				ВидыЦен = ЗависимыеОтВидаЦеныВидыЦен(СтрокаИзмененныйВидЦены);
			Иначе
				ВидыЦен = ВыбранныеСтрокиТаблицыВидовЦен();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ПозицияНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(ПозицияНоменклатуры);
		СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа);
		
		Для Каждого ВидЦены Из ВидыЦен Цикл
			
			Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен
				ИЛИ ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен Тогда
				
				Если Не ТолькоНезаполенные Тогда
					СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = 0;
				КонецЕсли;
				
				ТекущаяЦена = СтрокаТаблицыЦен[ВидЦены.ИмяКолонки];
				Если ТекущаяЦена = 0 Или Не ТолькоНезаполенные Тогда
					
					ЦеновыеГруппыАлгоритмов = ВидЦены.ЦеновыеГруппы.НайтиСтроки(СтруктураЦеноваяГруппа);
					Если ЦеновыеГруппыАлгоритмов.Количество() > 0 Тогда
						Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен Тогда
							Формула = ЦеновыеГруппыАлгоритмов[0].Формула;
						Иначе
							Формула = "[" + ЦеновыеГруппыАлгоритмов[0].БазовыйВидЦены + "]*" + Формат(((ЦеновыеГруппыАлгоритмов[0].Наценка/100)+1),"ЧРД=.; ЧГ=0");
						КонецЕсли;
					Иначе
						Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен Тогда
							Формула = ВидЦены.Формула;
						Иначе
							Формула = "[" + ВидЦены.БазовыйВидЦены + "]*" + Формат(((ВидЦены.Наценка/100)+1),"ЧРД=.; ЧГ=0");
						КонецЕсли;
					КонецЕсли;
					
					ЦеновыеГруппыПорогов = ВидЦены.ПорогиСрабатывания.НайтиСтроки(СтруктураЦеноваяГруппа);
					Если ЦеновыеГруппыПорогов.Количество() > 0 Тогда
						ПорогСрабатывания = ЦеновыеГруппыПорогов[0].ПорогСрабатывания;
					Иначе
						ПорогСрабатывания = ВидЦены.ПорогСрабатывания;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Формула) Тогда
						
						Для Каждого БазоваяЦена Из ВидЦены.ВлияющиеЦены Цикл
							
							СтрокаБазовойЦены = НайтиСтрокуВидаЦен(ВыбранныеЦены, БазоваяЦена.Значение);
							
							СтрокаПересчетаВалюты   = СтрокаПересчетаВалюты(СтрокаБазовойЦены.Валюта, ВидЦены.Валюта, КурсыВалют());
							Если ИспользоватьУпаковкиНоменклатуры Тогда
								СтрокаПересчетаУпаковок = СтрокаПересчетаУпаковок(СтрокаТаблицыЦен, СтрокаБазовойЦены, ВидЦены, СоответствиеУпаковок);
							Иначе
								СтрокаПересчетаУпаковок = "";
							КонецЕсли;
							СтрокаЗамены = " СтрокаТаблицыЦен." + СтрокаБазовойЦены.ИмяКолонки + " " + СтрокаПересчетаУпаковок + СтрокаПересчетаВалюты;
							Формула = СтрЗаменить(Формула, "[" + СтрокаБазовойЦены.Идентификатор + "]", СтрокаЗамены);
							
						КонецЦикла;
						
						Попытка
							
							ЗначениеЦены = ОкруглитьЦену(Вычислить(Формула), ВидЦены);
							
							Если СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] <> 0 Тогда
								ПроцентИзменения = Окр(100*(ЗначениеЦены - СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки])/СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки],5,2);
							Иначе
								ПроцентИзменения = 0;
							КонецЕсли;
							
							Если    ПорогСрабатывания = 0
								ИЛИ СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] = 0
								ИЛИ ?(ПроцентИзменения > 0, ПроцентИзменения >= ПорогСрабатывания, -ПроцентИзменения >= ПорогСрабатывания) Тогда
								
								СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = ЗначениеЦены;
								Если СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] <> 0 Тогда
									СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = ПроцентИзменения;
								Иначе
									СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = 0;
								КонецЕсли;
								
							Иначе
								СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки];
								СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = 0;
							КонецЕсли;
							
							СтрокаТаблицыЦен["ИзмененаВручную" + ВидЦены.ИмяКолонки] = Ложь;
							
						Исключение
							
							Если ЗначениеЗаполнено(СтрокаТаблицыЦен.Характеристика) Тогда
								ТекстСообщения = НСтр("ru='Для номенклатуры ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не рассчитана цена по виду цен ""%ВидЦены%"" по причине: %ОписаниеОшибки%'");
							Иначе
								ТекстСообщения = НСтр("ru='Для номенклатуры ""%Номенклатура%"" не рассчитана цена по виду цен ""%ВидЦены%"" по причине: %ОписаниеОшибки%'");
							КонецЕсли;
							
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидЦены%"       , ВидЦены.Ссылка);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%"  , СтрокаТаблицыЦен.Номенклатура);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Характеристика%", СтрокаТаблицыЦен.Характеристика);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								ТекстСообщения,
								Объект.Ссылка,
								"ДеревоЦен"
							);
							
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет расчет вычисляемых цен
//
// Параметры:
// ТаблицаНоменклатуры - ДанныеФормыКоллекция - Таблица, в которой осуществляется расчет цен
// ВидыЦен - Массив - Виды цен, которые необходимо рассчитать
// ТолькоНезаполенные - Указывает на необходимость расчета ранее заполненных цен
//
&НаКлиенте
Процедура РассчитатьВычисляемыеЦеныНаКлиенте(ДанныеДляРасчетаВычисляемыхЦенНаКлиенте)
	
	Соответствие = Новый Соответствие;
	
	Для Каждого СтрокаНоменклатура Из ДеревоЦен.ПолучитьЭлементы() Цикл
		Соответствие.Вставить(
			Строка(СтрокаНоменклатура.Номенклатура.УникальныйИдентификатор()),
			СтрокаНоменклатура
		);
		Для Каждого СтрокаХарактеристика Из СтрокаНоменклатура.ПолучитьЭлементы() Цикл
			Соответствие.Вставить(
				Строка(СтрокаНоменклатура.Номенклатура.УникальныйИдентификатор()) + Строка(СтрокаХарактеристика.Характеристика.УникальныйИдентификатор()),
				СтрокаХарактеристика
			);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаМассива Из ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.СтрокиТаблицыЦен Цикл
		
		Если ЗначениеЗаполнено(СтрокаМассива.Характеристика) Тогда
			Ключ = Строка(СтрокаМассива.Номенклатура.УникальныйИдентификатор()) + Строка(СтрокаМассива.Характеристика.УникальныйИдентификатор());
		Иначе
			Ключ = Строка(СтрокаМассива.Номенклатура.УникальныйИдентификатор());
		КонецЕсли;

		СтрокаТаблицыЦен = Соответствие.Получить(Ключ);
		
		СтруктураЦеноваяГруппа = Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа);
		
		Для Каждого ВидЦеныСсылка Из ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.ВидыЦен Цикл
			
			ВидЦены = НайтиСтрокуВидаЦен(ВыбранныеЦены, ВидЦеныСсылка);
			
			Если ВидЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен")
				ИЛИ ВидЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.НаценкаНаДругойВидЦен") Тогда
				
				Если Не ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.ТолькоНезаполенные Тогда
					СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = 0;
				КонецЕсли;
				
				ТекущаяЦена = СтрокаТаблицыЦен[ВидЦены.ИмяКолонки];
				Если ТекущаяЦена = 0 Или Не ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.ТолькоНезаполенные Тогда
					
					ЦеновыеГруппыАлгоритмов = ВидЦены.ЦеновыеГруппы.НайтиСтроки(СтруктураЦеноваяГруппа);
					Если ЦеновыеГруппыАлгоритмов.Количество() > 0 Тогда
						Если ВидЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен") Тогда
							Формула = ЦеновыеГруппыАлгоритмов[0].Формула;
						Иначе
							Формула = "[" + ЦеновыеГруппыАлгоритмов[0].БазовыйВидЦены + "]*" + Формат((ЦеновыеГруппыАлгоритмов[0].Наценка/100)+1,"ЧРД=.; ЧРГ=' '; ЧГ=0");
						КонецЕсли;
					Иначе
						Если ВидЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен") Тогда
							Формула = ВидЦены.Формула;
						Иначе
							Формула = "[" + ВидЦены.БазовыйВидЦены + "]*" + Формат((ВидЦены.Наценка/100)+1,"ЧРД=.; ЧРГ=' '; ЧГ=0");
						КонецЕсли;
					КонецЕсли;
					
					ЦеновыеГруппыПорогов = ВидЦены.ПорогиСрабатывания.НайтиСтроки(СтруктураЦеноваяГруппа);
					Если ЦеновыеГруппыПорогов.Количество() > 0 Тогда
						ПорогСрабатывания = ЦеновыеГруппыПорогов[0].ПорогСрабатывания;
					Иначе
						ПорогСрабатывания = ВидЦены.ПорогСрабатывания;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Формула) Тогда
						
						Для Каждого БазоваяЦена Из ВидЦены.ВлияющиеЦены Цикл
							
							СтрокаБазовойЦены = НайтиСтрокуВидаЦен(ВыбранныеЦены, БазоваяЦена.Значение);
							
							СтрокаПересчетаВалюты   = СтрокаПересчетаВалюты(СтрокаБазовойЦены.Валюта, ВидЦены.Валюта, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.КурсыВалют);
							Если ИспользоватьУпаковкиНоменклатуры Тогда
								СтрокаПересчетаУпаковок = СтрокаПересчетаУпаковок(СтрокаТаблицыЦен, СтрокаБазовойЦены, ВидЦены, ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.СоответствиеУпаковок);
							Иначе
								СтрокаПересчетаУпаковок = "";
							КонецЕсли;
							СтрокаЗамены = " СтрокаТаблицыЦен." + СтрокаБазовойЦены.ИмяКолонки + " " + СтрокаПересчетаУпаковок + СтрокаПересчетаВалюты;
							Формула = СтрЗаменить(Формула, "[" + СтрокаБазовойЦены.Идентификатор + "]", СтрокаЗамены);
							
						КонецЦикла;
						
						Попытка
							
							ЗначениеЦены = ОкруглитьЦену(Вычислить(Формула), ВидЦены);
							
							Если СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] <> 0 Тогда
								ПроцентИзменения = Окр(100*(ЗначениеЦены - СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки])/СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки],5,2);
							Иначе
								ПроцентИзменения = 0;
							КонецЕсли;
							
							Если    ПорогСрабатывания = 0
								ИЛИ СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] = 0
								ИЛИ ?(ПроцентИзменения > 0, ПроцентИзменения >= ПорогСрабатывания, -ПроцентИзменения >= ПорогСрабатывания) Тогда
								
								СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = ЗначениеЦены;
								Если СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки] <> 0 Тогда
									СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = ПроцентИзменения;
								Иначе
									СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = 0;
								КонецЕсли;
								
							Иначе
								СтрокаТаблицыЦен[ВидЦены.ИмяКолонки] = СтрокаТаблицыЦен["СтараяЦена" + ВидЦены.ИмяКолонки];
								СтрокаТаблицыЦен["ПроцентИзменения" + ВидЦены.ИмяКолонки] = 0;
							КонецЕсли;
							
							СтрокаТаблицыЦен["ИзмененаВручную" + ВидЦены.ИмяКолонки] = Ложь;
							
						Исключение
							
							Если ЗначениеЗаполнено(СтрокаТаблицыЦен.Характеристика) Тогда
								ТекстСообщения = НСтр("ru='Для номенклатуры ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не рассчитана цена по виду цен ""%ВидЦены%"" по причине: %ОписаниеОшибки%'");
							Иначе
								ТекстСообщения = НСтр("ru='Для номенклатуры ""%Номенклатура%"" не рассчитана цена по виду цен ""%ВидЦены%"" по причине: %ОписаниеОшибки%'");
							КонецЕсли;
							
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидЦены%"       , ВидЦены.Ссылка);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%"  , СтрокаТаблицыЦен.Номенклатура);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Характеристика%", СтрокаТаблицыЦен.Характеристика);
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
						
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								ТекстСообщения,
								Объект.Ссылка,
								"ДеревоЦен"
							);
							
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет расчет вычисляемых цен
//
// Параметры:
// ТаблицаНоменклатуры - ДанныеФормыКоллекция - Таблица, в которой осуществляется расчет цен
// ВидыЦен - Массив - Виды цен, которые необходимо рассчитать
// ТолькоНезаполенные - Указывает на необходимость расчета ранее заполненных цен
//
&НаСервере
Функция ПодготовитьДанныеДляРасчетаВычисляемыхЦен(ТаблицаНоменклатуры, ВидыЦен = Неопределено, ТолькоНезаполенные = Ложь, ИзмененноеПоле = Неопределено)
	
	Если ВидыЦен = Неопределено Тогда
		Если ИзмененноеПоле = Неопределено Тогда
			ВидыЦен = ВыбранныеСтрокиТаблицыВидовЦен();
		Иначе
			СтрокаИзмененныйВидЦены = СтрокаВидаЦеныПоИмениПоля(ВыбранныеЦены, ИзмененноеПоле);
			Если СтрокаИзмененныйВидЦены <> Неопределено Тогда
				ВидыЦен = ЗависимыеОтВидаЦеныВидыЦен(СтрокаИзмененныйВидЦены);
			Иначе
				ВидыЦен = ВыбранныеСтрокиТаблицыВидовЦен();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	МассивСтрокВидыЦен = Новый Массив;
	Для Каждого СтрокаВидЦены Из ВидыЦен Цикл
		Если СтрокаВидЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен")
			ИЛИ СтрокаВидЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.НаценкаНаДругойВидЦен") Тогда
			МассивСтрокВидыЦен.Добавить(СтрокаВидЦены.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокВидыЦен.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		СоответствиеУпаковок = КоэффициентыУпаковокНоменклатурыДереваТоваров(ТаблицаНоменклатуры);
	Иначе
		СоответствиеУпаковок = Неопределено;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для Каждого ПозицияНоменклатуры Из ТаблицаНоменклатуры Цикл
		МассивСтрок.Добавить(Новый Структура("Номенклатура, Характеристика", ПозицияНоменклатуры.Номенклатура, ПозицияНоменклатуры.Характеристика));
	КонецЦикла;
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Новый Структура;
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.Вставить("СтрокиТаблицыЦен", МассивСтрок);
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.Вставить("ВидыЦен", МассивСтрокВидыЦен);
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.Вставить("СоответствиеУпаковок", СоответствиеУпаковок);
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.Вставить("КурсыВалют", КурсыВалют());
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.Вставить("ТолькоНезаполенные", ТолькоНезаполенные);
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВидаЦеныПоИмениПоля(ВыбранныеЦены, Знач ИзмененноеПоле)
	
	СтрокаИзмененныйВидЦены = Неопределено;
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		Если СтрокаВидЦены.ИмяКолонки = ИзмененноеПоле
			Или "Упаковка" + СтрокаВидЦены.ИмяКолонки = ИзмененноеПоле
			Или "СтараяЦена" + СтрокаВидЦены.ИмяКолонки = ИзмененноеПоле
			Или "ПроцентИзменения" + СтрокаВидЦены.ИмяКолонки = ИзмененноеПоле Тогда
			СтрокаИзмененныйВидЦены = СтрокаВидЦены;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрокаИзмененныйВидЦены;
	
КонецФункции

&НаСервере
Процедура УстановитьПризнакРучногоИзмененияДляВидовЦен(ТаблицаНоменклатуры, МассивСтрокЗависимыхВидовЦен)
	
	Для Каждого ПозицияНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(ПозицияНоменклатуры);
		
		Для Каждого СтрокаВидЦены Из МассивСтрокЗависимыхВидовЦен Цикл
			
			Если СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен
				ИЛИ СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен Тогда
				СтрокаТаблицыЦен["ИзмененаВручную" + СтрокаВидЦены.ИмяКолонки] = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакРучногоИзмененияВычисляемыхЦен(ТаблицаНоменклатуры, ИзмененноеПоле = Неопределено)
	
	СтрокаИзмененныйВидЦены = СтрокаВидаЦеныПоИмениПоля(ВыбранныеЦены, ИзмененноеПоле);
	Если СтрокаИзмененныйВидЦены <> Неопределено Тогда
	
		МассивСтрокЗависимыхВидовЦен = ЗависимыеОтВидаЦеныВидыЦен(СтрокаИзмененныйВидЦены);
		УстановитьПризнакРучногоИзмененияДляВидовЦен(ТаблицаНоменклатуры, МассивСтрокЗависимыхВидовЦен);
	
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет расчет цен в строке по идентификатору
//
// Параметры:
// ИдентификаторСтроки - Число
// ЗагружатьЦеныИзИБ - Булево - Указывает на необходимость загрузки цен из информационной базы
// ИзмененноеПоле - Строка - поле, в котором изменена цена
//
&НаСервере
Функция РассчитатьЦеныПоИдентификаторуСтроки(ИдентификаторСтроки, ЗагружатьЦеныИзИБ = Ложь, ИзмененноеПоле = Неопределено)
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	СтрокаТаблицыЦен = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
	ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), СтрокаТаблицыЦен, "Номенклатура, Характеристика");
	
	ЭлементыХарактеристики = СтрокаТаблицыЦен.ПолучитьЭлементы();
	
	Если ИспользоватьХарактеристикиНоменклатуры И ЭлементыХарактеристики.Количество() > 0 Тогда
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаНоменклатуры.Добавить(), ЭлементХарактеристика, "Номенклатура, Характеристика");
		КонецЦикла;
	КонецЕсли;
	
	Если РассчитыватьАвтоматически Тогда
		
		Если ЗагружатьЦеныИзИБ Тогда
			ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры);
			ВычислитьЦеныПоДаннымИБ(ТаблицаНоменклатуры);
		КонецЕсли;
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПодготовитьДанныеДляРасчетаВычисляемыхЦен(ТаблицаНоменклатуры,,,ИзмененноеПоле);
		Иначе
			РассчитатьВычисляемыеЦены(ТаблицаНоменклатуры,,,ИзмененноеПоле);
		КонецЕсли;
		
	Иначе
		
		УстановитьПризнакРучногоИзмененияВычисляемыхЦен(ТаблицаНоменклатуры, ИзмененноеПоле);
		
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Осуществляет округление цены в соответствии с правилами округления для вида цен
//
// Параметры:
// ЗначениеЦены - Число - значение цены, которое необходимо округлить
// СтрокаСправочникаВидовЦен - СтрокаТаблицыЗначений - вид цены, в соответствии с которым необходимо округлить цену
//
// Возвращаемое значение:
// Число
// Округленное значение цены
//
&НаКлиентеНаСервереБезКонтекста
Функция ОкруглитьЦену(ЗначениеЦены, СтрокаСправочникаВидовЦен)
	
	КоличествоСтрок = СтрокаСправочникаВидовЦен.ПравилаОкругленияЦены.Количество();
	
	Для Индекс = 1 По КоличествоСтрок Цикл
		
		ПравилаОкругления = СтрокаСправочникаВидовЦен.ПравилаОкругленияЦены[КоличествоСтрок - Индекс];
		
		Если ПравилаОкругления.НижняяГраницаДиапазонаЦен <= ЗначениеЦены Тогда
			
			Если ЗначениеЗаполнено(ПравилаОкругления.ТочностьОкругления) Тогда
				ЗначениеЦены = ЦенообразованиеКлиентСервер.ОкруглитьЦену(ЗначениеЦены, ПравилаОкругления.ТочностьОкругления, СтрокаСправочникаВидовЦен.ОкруглятьВБольшуюСторону);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПравилаОкругления.ПсихологическоеОкругление) Тогда
				ЗначениеЦены = ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(ЗначениеЦены, ПравилаОкругления.ПсихологическоеОкругление);
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗначениеЦены;
	
КонецФункции

// Выполняет необходимые действия при переходе к странице установки цен
//
&НаКлиенте
Процедура ПриПереходеКУстановкеЦен()
	
	Если ВыбранныеСтрокиТаблицыВидовЦенНаКлиенте().Количество() > 0 Тогда
		
		Если ВыбранныеЦеныИзменены Тогда
			
			ПересчитатьЦены = ?(ДеревоЦен.ПолучитьЭлементы().Количество() > 0, Вопрос(НСтр("ru='Состав цен или параметры расчета изменились. Пересчитать цены?'"), РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да, Истина);
			
			ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПереформироватьТаблицуЦен(ПересчитатьЦены);
			Если ДанныеДляРасчетаВычисляемыхЦенНаКлиенте <> Неопределено Тогда
				РассчитатьВычисляемыеЦеныНаКлиенте(ДанныеДляРасчетаВычисляемыхЦенНаКлиенте);
			КонецЕсли;
			
			ВыбранныеЦеныИзменены = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для перехода к установке цен, необходимо выбрать один или несколько видов цен'"),,"ВыбранныеЦены");
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВидыЦен;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу цен на форме
//
// Параметры:
// ПересчитатьЦены - Булево - Указывает на необходимость перерасчета цен
//
&НаСервере
Функция ПереформироватьТаблицуЦен(ПересчитатьЦены)
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	ПоместитьЦеныВТабличнуюЧасть(Объект);
	ПостроитьДеревоЦен();
	ЗагрузитьТабличнуюЧастьТовары();
	
	Если ПересчитатьЦены Тогда
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = РассчитатьВсеЦены();
	Иначе
		ЗагрузитьБазовыеЦены();
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Копирует цены из таблицы формы ДеревоЦен в табличную часть Товары объекта
//
// Параметры:
// ТекущийОбъект    - объект, в табличную часть которого необходимо поместить цены
// СохранятьБазовые - Булево -указывает на необходимость помещения в табличную часть базовых видов цен
//
&НаСервере
Процедура ПоместитьЦеныВТабличнуюЧасть(ТекущийОбъект, СохранятьБазовые = Истина)
	
	ТекущийОбъект.Товары.Очистить();
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	
	Для Каждого ТекЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		ПоместитьСтрокуЦенВТабличнуюЧасть(ТекущийОбъект.Товары, ТекЭлементНоменклатура, СохранятьБазовые);
		
		ЭлементыХарактеристики = ТекЭлементНоменклатура.ПолучитьЭлементы();
		
		Для Каждого ТекЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			ПоместитьСтрокуЦенВТабличнуюЧасть(ТекущийОбъект.Товары, ТекЭлементХарактеристика, СохранятьБазовые);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Копирует цены по всем видам из таблицы формы ДеревоЦен в строку табличой части Товары объекта
//
// Параметры:
// Товары           - табличная часть, в которую необходимо поместить строку с ценами
// СохранятьБазовые - Булево -указывает на необходимость помещения в табличную часть базовых видов цен
//
&НаСервере
Процедура ПоместитьСтрокуЦенВТабличнуюЧасть(Товары, СтрокаЦен, СохранятьБазовые = Истина)
	
	Для Каждого ВидЦены Из ВыбранныеЦены Цикл
		
		Если ВидЦены.Выбрана Или СохранятьБазовые И ВидЦены.Влияет Тогда
			
			НоваяСтрока                = Товары.Добавить();
			НоваяСтрока.Номенклатура   = СтрокаЦен.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаЦен.Характеристика;
			НоваяСтрока.ВидЦены        = ВидЦены.Ссылка;
			
			ИмяКолонки = ВидЦены.ИмяКолонки;
			Если СтрокаЦен.Свойство(ИмяКолонки) Тогда
				НоваяСтрока.Цена = СтрокаЦен[ИмяКолонки];
				НоваяСтрока.ЦенаИзмененаВручную = СтрокаЦен["ИзмененаВручную" + ИмяКолонки];
			КонецЕсли;
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				ИмяКолонки = "Упаковка" + ИмяКолонки;
				Если СтрокаЦен.Свойство(ИмяКолонки) Тогда
					НоваяСтрока.Упаковка = СтрокаЦен[ИмяКолонки];
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет поле набора данных схемы компоновки данных
//
// Параметры:
// НаборДанных - НаборДанныхОбъектСхемыКомпоновкиДанных
// ИмяПоля - Строка
// ТипЗначения - Произвольный
//
&НаСервере
Процедура ДобавитьПолеНабораДанныхСКД(НаборДанных, ИмяПоля, ТипЗначения)
	
	ПолеНабораДанных             = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабораДанных.Поле        = ИмяПоля;
	ПолеНабораДанных.ПутьКДанным = ИмяПоля;
	ПолеНабораДанных.ТипЗначения = Новый ОписаниеТипов(ТипЗначения);
	
КонецПроцедуры

// Добавляет связь наборов данных схемы компоновки данных
//
// Параметры:
// СКД - СхемаКомпоновкиДанных
// НаборДанныхНоменклатура - НаборДанныхОбъектСхемыКомпоновкиДанных
// РабочийНаборДанных - НаборДанныхОбъектСхемыКомпоновкиДанных
// Поле - Строка
//
&НаСервере
Процедура ДобавитьСвязьНаборовДанныхСКД(СКД, НаборДанныхНоменклатура, РабочийНаборДанных, Поле)
	
	Связь                     = СКД.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = НаборДанныхНоменклатура.Имя;
	Связь.НаборДанныхПриемник = РабочийНаборДанных.Имя;
	Связь.ВыражениеИсточник   = Поле;
	Связь.ВыражениеПриемник   = Поле;
	Связь.Обязательная        = Истина;
	
КонецПроцедуры

// Добавляет выбранное поле схемы компоновки данных
//
// Параметры:
// ГруппировкаКомпоновкиДанных - ГруппировкаКомпоновкиДанных
// Поле - Строка
//
&НаСервере
Процедура ДобавитьВыбранноеПолеСКД(ГруппировкаКомпоновкиДанных, Поле)
	
	ВыбранноеПоле               = ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных(Поле);
	ВыбранноеПоле.Использование = Истина;
	
КонецПроцедуры

// Заполняет значения цен, рассчитываемым по данным информационной базы
//
// Параметры:
// ТаблицаНоменклатуры - ТаблицаЗначений
// ВидЦены - СправочникСсылка.ВидыЦен
// ТолькоНезаполненные - Указывает на необходимость вычисления только незаполненных цен
//
&НаСервере
Процедура ВычислитьЗначенияЦеныПоДаннымИБ(ТаблицаНоменклатуры, СтрокаВидЦены, ТолькоНезаполненные = Ложь, НастройкиКомпоновкиДанных = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТаблицаНоменклатуры.Количество() > 0 Тогда
		
		Если СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
			ИЛИ СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении
			ИЛИ СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления Тогда
			
			// Копирование схемы компоновки данных
			Схема = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресСхемыКомпоновкиДанных));
			СхемаКомпоновкиДанных = Схема.Получить();
			
			Если Ценообразование.ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных, СтрЗаменить(НСтр("ru='Вид цены ""%ВидЦены%""'"), "%ВидЦены%", СтрокаВидЦены.Ссылка)) Тогда
				
				// Заполнение набора данных ТаблицаНоменклатуры
				РабочийНаборДанных = СхемаКомпоновкиДанных.НаборыДанных[0];
				
				НаборДанныхНоменклатура                = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
				НаборДанныхНоменклатура.Имя            = "ТаблицаНоменклатуры";
				НаборДанныхНоменклатура.ИмяОбъекта     = "ТаблицаНоменклатуры";
				НаборДанныхНоменклатура.ИсточникДанных = РабочийНаборДанных.ИсточникДанных;
				
				ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Номенклатура", "СправочникСсылка.Номенклатура");
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьПолеНабораДанныхСКД(НаборДанныхНоменклатура, "Характеристика", "СправочникСсылка.ХарактеристикиНоменклатуры");
				КонецЕсли;
				
				СхемаКомпоновкиДанных.СвязиНаборовДанных.Очистить();
				ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "Номенклатура");
				
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьСвязьНаборовДанныхСКД(СхемаКомпоновкиДанных, НаборДанныхНоменклатура, РабочийНаборДанных, "Характеристика");
				КонецЕсли;
				
				
				// Подготовка компоновщика макета компоновки данных, загрузка настроек
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
				
				Если НастройкиКомпоновкиДанных <> Неопределено Тогда
					КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
					КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных) Тогда
						НастройкиИзВидаЦены = ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных);
						КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиИзВидаЦены);
						КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
					Иначе
						КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
					КонецЕсли;
					
				КонецЕсли;
				
				
				// Заполнение структуры отчета и выбранных полей.
				КомпоновщикНастроек.Настройки.Структура.Очистить();
				
				ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
				ГруппировкаДетальныеЗаписи.Использование = Истина;
				
				КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура");
				
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Характеристика");
				КонецЕсли;
				
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Упаковка");
					ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Коэффициент");
				КонецЕсли;
				
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Цена");
				ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Валюта");
				
				// Компоновка макета и исполнение запроса.
				КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
				СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
				МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
				
				Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Основание");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = Объект.ДокументОснование;
				КонецЕсли;
				Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ДатаДокумента");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = ДатаДляЗапросаЦенНоменклатуры();
				КонецЕсли;
				Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ВидЦены");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = СтрокаВидЦены.Ссылка;
				КонецЕсли;
				Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ЭтоВводНаОсновании");
				Если Параметр <> Неопределено Тогда
					Параметр.Значение = ЗначениеЗаполнено(Объект.ДокументОснование);
				КонецЕсли;
				
				ВнешниеНаборыДанных = Новый Структура;
				ВнешниеНаборыДанных.Вставить("ТаблицаНоменклатуры", ТаблицаНоменклатуры.Скопировать(, "Номенклатура, Характеристика"));
				
				ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
				ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

				ДанныеОтчета = Новый ТаблицаЗначений();
				ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
				ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
				
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					СоответствиеУпаковок = КоэффициентыУпаковокНоменклатурыДереваТоваров(ТаблицаНоменклатуры);
				Иначе
					СоответствиеУпаковок = Неопределено;
				КонецЕсли;

				Если СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления Тогда
					ЗагрузитьЦеныИзТаблицыЗначений(ДанныеОтчета, СоответствиеУпаковок, СтрокаВидЦены, СтрокаВидЦены.Валюта, ТолькоНезаполненные, Истина,, Истина);
				Иначе
					ЗагрузитьЦеныИзТаблицыЗначений(ДанныеОтчета, СоответствиеУпаковок, СтрокаВидЦены, СтрокаВидЦены.Валюта, ТолькоНезаполненные, Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обнуляет цены в таблице
//
// Параметры:
// ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которой необходимо очистить цены
// ВидЦены - Массив - виды цен, для которых необходимо очистить цены
//
&НаСервере
Процедура ОчиститьЦены(ТаблицаНоменклатуры, МассивСтрокВидовЦен)
	
	Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаДереваЦен = НайтиСтрокуДереваЦен(СтрокаНоменклатуры);
		Для Каждого СтрокаВидЦены Из МассивСтрокВидовЦен Цикл
			СтрокаДереваЦен[СтрокаВидЦены.ИмяКолонки] = 0;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Вычисляет цены, рассчитываемые по данным информационной базы
//
// Параметры:
// ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которой необходимо заполнить цены
// ВидЦены - Массив - виды цен, для которых необходимо вычислить цены
// ТолькоНезаполненные - Булево - указывает на необходимость вычисления только незаполненных цен
//
&НаСервере
Процедура ВычислитьЦеныПоДаннымИБ(ТаблицаНоменклатуры, МассивСтрокВидовЦен = Неопределено, ТолькоНезаполненные = Ложь)
	
	Если МассивСтрокВидовЦен = Неопределено Тогда
		
		ВидыЦенПоДаннымИБ = Новый Массив();
		Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
			Если СтрокаВидЦены.Выбрана И СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
				ИЛИ СтрокаВидЦены.Выбрана И СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении
				ИЛИ СтрокаВидЦены.Выбрана И СтрокаВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления Тогда
				ВидыЦенПоДаннымИБ.Добавить(СтрокаВидЦены);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ВидыЦенПоДаннымИБ = Новый Массив();
		Для Каждого СтрокаВидЦены Из МассивСтрокВидовЦен Цикл
			
			НайденнаяСтрока = Неопределено;
			Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
				НайденнаяСтрока = ТекСтрока;
				Если ТекСтрока.Ссылка = СтрокаВидЦены.Ссылка Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденнаяСтрока <> Неопределено Тогда
				Если НайденнаяСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
					ИЛИ НайденнаяСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении
					ИЛИ НайденнаяСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаЦенуПоступления Тогда
					ВидыЦенПоДаннымИБ.Добавить(СтрокаВидЦены);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ТолькоНезаполненные Тогда
		ОчиститьЦены(ТаблицаНоменклатуры, ВидыЦенПоДаннымИБ);
	КонецЕсли;
	
	ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновкиДанных);
	
	Для Каждого ВидЦеныПоДаннымИБ Из ВидыЦенПоДаннымИБ Цикл
		НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(ВидЦеныПоДаннымИБ.Ссылка);
		ВычислитьЗначенияЦеныПоДаннымИБ(ТаблицаНоменклатуры, ВидЦеныПоДаннымИБ, ТолькоНезаполненные, ?(НайденнаяСтрока <> Неопределено,НайденнаяСтрока.НастройкиКомпоновкиДанных,Неопределено));
	КонецЦикла;
	
КонецПроцедуры

// Загружает цены в таблицу цен из переданной таблицы
//
// Параметры:
// ДеревоЦенИсточник - ТаблицаЗначений - Таблица, из которой необходимо загрузить цены
// СоответствиеУпаковок - Соответствие - содержит упаковки и их коэффициенты
// ВидЦены - СправочникСсылка.ВидыЦен
// ВалютаЦены - СправочникСсылка.Валюта
// ТолькоНезаполненные - Булево - указывает на необходимость вычисления только незаполненных цен
// ПрименитьОкругление - Булево - указывает на необходимость применения округления к ценам
//
&НаСервере
Процедура ЗагрузитьЦеныИзТаблицыЗначений(Таблица, СоответствиеУпаковок, СтрокаЗагружаемыйВидЦены = Неопределено, ВалютаЦены = Неопределено, ТолькоНезаполненные = Ложь, ПрименитьОкругление = Ложь, ЗагружатьУпаковку = Ложь, Наценивать = Ложь)
	
	Для Каждого СтрокаИсточник Из Таблица Цикл
	
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(СтрокаИсточник);
		
		Если СтрокаЗагружаемыйВидЦены = Неопределено Тогда
			СтрокаВидЦены = НайтиСтрокуВидаЦен(ВыбранныеЦены, СтрокаИсточник.ВидЦены);
		Иначе
			СтрокаВидЦены = СтрокаЗагружаемыйВидЦены;
		КонецЕсли;
		
		ЦеновыеГруппыПорогов = СтрокаВидЦены.ПорогиСрабатывания.НайтиСтроки(Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа));
		Если ЦеновыеГруппыПорогов.Количество() > 0 Тогда
			ПорогСрабатывания = ЦеновыеГруппыПорогов[0].ПорогСрабатывания;
		Иначе
			ПорогСрабатывания = СтрокаВидЦены.ПорогСрабатывания;
		КонецЕсли;
		
		Если Наценивать Тогда
			ЦеновыеГруппыНаценок = СтрокаВидЦены.ЦеновыеГруппы.НайтиСтроки(Новый Структура("ЦеноваяГруппа", СтрокаТаблицыЦен.ЦеноваяГруппа));
			Если ЦеновыеГруппыНаценок.Количество() > 0 Тогда
				Наценка = ЦеновыеГруппыНаценок[0].Наценка;
			Иначе
				Наценка = СтрокаВидЦены.Наценка;
			КонецЕсли;
		КонецЕсли;
		
		ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
		
		Если (СтрокаТаблицыЦен[ИмяКолонки] = 0 Или Не ТолькоНезаполненные) И СтрокаИсточник.Цена <> Null Тогда
			
			Цена = СтрокаИсточник.Цена;
			Если Наценивать Тогда
				Цена = Цена * (Наценка/100+1);
			КонецЕсли;
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				
				Если СоответствиеУпаковок <> Неопределено Тогда
					
					ТекущаяУпаковка = СтрокаТаблицыЦен["Упаковка" + ИмяКолонки];
					ТекущийКоэффициент = 1;
					
					Если ЗначениеЗаполнено(СтрокаИсточник.Коэффициент)
						И (ЗначениеЗаполнено(СтрокаИсточник.Упаковка) Или ЗначениеЗаполнено(ТекущаяУпаковка)) Тогда
						
						Если ЗначениеЗаполнено(ТекущаяУпаковка) Тогда
							
							НайденноеЗначение = СоответствиеУпаковок.Получить(ТекущаяУпаковка);
							Если НайденноеЗначение <> Неопределено Тогда
								ТекущийКоэффициент = НайденноеЗначение;
							КонецЕсли;
							
						КонецЕсли;
						
						Цена = Цена / СтрокаИсточник.Коэффициент * ТекущийКоэффициент;
						
					КонецЕсли;
					
				ИначеЕсли ЗагружатьУпаковку Тогда
					СтрокаТаблицыЦен["Упаковка" + ИмяКолонки] = СтрокаИсточник.Упаковка;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВалютаЦены <> Неопределено И СтрокаИсточник.Валюта <> Null Тогда
				Цена = ПересчитатьВалюту(СтрокаИсточник.Валюта, ВалютаЦены, Цена, КурсыВалют());
			КонецЕсли;
			
			Если ПрименитьОкругление Тогда
				Цена = ОкруглитьЦену(Цена, СтрокаВидЦены);
			КонецЕсли;
			
			Если СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] <> 0 Тогда
				ПроцентИзменения = Окр(100 * (Цена - СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки]) / СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки], 10, 2);
			Иначе
				ПроцентИзменения = 0;
			КонецЕсли;
			
			Если    ПорогСрабатывания = 0
				ИЛИ СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] = 0
				ИЛИ ?(ПроцентИзменения > 0, ПроцентИзменения >= ПорогСрабатывания, -ПроцентИзменения >= ПорогСрабатывания) Тогда
				
				СтрокаТаблицыЦен[ИмяКолонки] = Цена;
				Если СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] <> 0 Тогда
					СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = ПроцентИзменения;
				Иначе
					СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = 0;
				КонецЕсли;
				
			Иначе
				СтрокаТаблицыЦен[ИмяКолонки] = СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки];
				СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = 0;
			КонецЕсли;
			
			СтрокаТаблицыЦен["ИзмененаВручную" + ИмяКолонки] = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает значения базовых цен в таблицу
//
// Параметры:
// ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которую будут загружены значения цен
// ВидыЦен - Массив - виды цен, для которых необходимо загрузить значения цен
// Дата - Дата загрузки цен
// ПроцентИзмененияЦены - Число - Процент, на который необходимо изменить цену
// ПрименятьОкругление - Булево - Указывает на необходимость применения округления
//
&НаСервере
Процедура ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры, МассивСтрокВидовЦен = Неопределено, ДатаДокумента = Неопределено, ПроцентИзмененияЦены = 0, ПрименятьОкругление = Ложь)
	
	Если МассивСтрокВидовЦен = Неопределено Тогда
		
		МассивСтрокВидовЦен = Новый Массив();
		Для Каждого ВидЦены Из ВыбранныеЦены Цикл
			Если ВидЦены.Влияет Тогда
				МассивСтрокВидовЦен.Добавить(ВидЦены);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОчиститьЦены(ТаблицаНоменклатуры, МассивСтрокВидовЦен);
	
	Если МассивСтрокВидовЦен.Количество() > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ТаблицаНоменклатуры.Номенклатура   КАК Номенклатура,
			|	ТаблицаНоменклатуры.Характеристика КАК Характеристика
			|ПОМЕСТИТЬ ТаблицаНоменклатуры
			|ИЗ
			|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
			|ИНДЕКСИРОВАТЬ ПО Номенклатура, Характеристика
			|;
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЦеныНоменклатурыСрезПоследних.Номенклатура   КАК Номенклатура,
			|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
			|	ЦеныНоменклатурыСрезПоследних.Упаковка                          КАК Упаковка,
			|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1) КАК Коэффициент,
			|	ЦеныНоменклатурыСрезПоследних.ВидЦены                                                                    КАК ВидЦены,
			|	ЦеныНоменклатурыСрезПоследних.Цена + ЦеныНоменклатурыСрезПоследних.Цена * &ПроцентИзмененияЦены / 100.00 КАК Цена
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			&ДатаДокумента,
			|			(Номенклатура, Характеристика) В
			|					(ВЫБРАТЬ
			|						ТаблицаНоменклатуры.Номенклатура   КАК Номенклатура,
			|						ТаблицаНоменклатуры.Характеристика КАК Характеристика
			|					ИЗ
			|						ТаблицаНоменклатуры КАК ТаблицаНоменклатуры)
			|				И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних");
		
		Запрос.УстановитьПараметр("ТаблицаНоменклатуры",  ТаблицаНоменклатуры);
		
		ВидыЦен = Новый Массив;
		Для Каждого СтрокаВидЦены Из МассивСтрокВидовЦен Цикл
			ВидыЦен.Добавить(СтрокаВидЦены.Ссылка);
		КонецЦикла;
		Запрос.УстановитьПараметр("ВидыЦен",              ВидыЦен);
		Запрос.УстановитьПараметр("ПроцентИзмененияЦены", ПроцентИзмененияЦены);
		Запрос.УстановитьПараметр("ДатаДокумента",        ?(ДатаДокумента = Неопределено, ДатаДляЗапросаЦенНоменклатуры(), ДатаДокумента));
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			СоответствиеУпаковок = КоэффициентыУпаковокНоменклатурыДереваТоваров(ТаблицаНоменклатуры);
		Иначе
			СоответствиеУпаковок = Неопределено;
		КонецЕсли;
		
		ЗагрузитьЦеныИзТаблицыЗначений(Выгрузка, СоответствиеУпаковок,, , , ПрименятьОкругление);
		
	КонецЕсли;
	
КонецПроцедуры

// Округляет ручные цены в таблице
//
// Параметры:
// ТаблицаНоменклатуры - ТаблицаЗначений - Таблица, в которой применяется округление
// ВидыЦен - Массив - виды цен, для которых необходимо применить округление
//
&НаСервере
Процедура ПрименитьОкруглениеКРучнымЦенам(ТаблицаНоменклатуры, ВидыЦен)
	
	Для Каждого СтрокаТаблицыНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		СтрокаТаблицыЦен = НайтиСтрокуДереваЦен(СтрокаТаблицыНоменклатуры);
		
		Для Каждого СтрокаВидЦены Из ВидыЦен Цикл
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			СтрокаТаблицыЦен[ИмяКолонки] = ОкруглитьЦену(СтрокаТаблицыЦен[ИмяКолонки], СтрокаВидЦены);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет загрузку базовых цен в таблицу цен
//
&НаСервере
Процедура ЗагрузитьБазовыеЦены()
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен();
	ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры);
	
КонецПроцедуры

// Осуществляет расчет базовых, заполняемых по данным информационной базы и рассчитываемых цен
//
&НаСервере
Функция РассчитатьВсеЦены()
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен();
	
	ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры);
	ВычислитьЦеныПоДаннымИБ(ТаблицаНоменклатуры);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПодготовитьДанныеДляРасчетаВычисляемыхЦен(ТаблицаНоменклатуры);
	Иначе
		РассчитатьВычисляемыеЦены(ТаблицаНоменклатуры);
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Рассчитывает цены в таблице цен
//
// Параметры:
// ПараметрыРасчета - Структура
//
&НаСервере
Функция РассчитатьЦены(ПараметрыРасчета)
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	МассивВидовЦен = Новый Массив;
	Для Каждого ВидЦены Из ПараметрыРасчета.ВидыЦен Цикл
		МассивВидовЦен.Добавить(НайтиСтрокуВидаЦен(ВыбранныеЦены, ВидЦены));
	КонецЦикла;
	
	Если Не ПараметрыРасчета.ТолькоВыделенныеСтроки Тогда
		
		ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен();
		
	Иначе
		
		ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
		Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
			СтрокаТаблицыЦен           = ДеревоЦен.НайтиПоИдентификатору(ВыделеннаяСтрока);
			НоваяСтрока                = ТаблицаНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура   = СтрокаТаблицыЦен.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаТаблицыЦен.Характеристика;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыРасчета.ЗагрузкаСтарыхЦен Тогда
		ЗагрузитьЗначенияБазовыхЦен(
			ТаблицаНоменклатуры,
			МассивВидовЦен,
			ПараметрыРасчета.ДатаСтарыхЦен,
			ПараметрыРасчета.ПроцентИзмененияЦены,
			ПараметрыРасчета.ПрименятьОкругление
		);
	КонецЕсли;
	
	Если ПараметрыРасчета.ОкруглениеРучныхЦен Тогда
		ПрименитьОкруглениеКРучнымЦенам(ТаблицаНоменклатуры, МассивВидовЦен);
	КонецЕсли;
	
	Если Не ПараметрыРасчета.ЗагрузкаСтарыхЦен И Не ПараметрыРасчета.ОкруглениеРучныхЦен Или РассчитыватьАвтоматически Тогда
		
		ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры);
		
		Если Не ПараметрыРасчета.ЗагрузкаСтарыхЦен И Не ПараметрыРасчета.ОкруглениеРучныхЦен Тогда 
			ВычислитьЦеныПоДаннымИБ(ТаблицаНоменклатуры, МассивВидовЦен, ПараметрыРасчета.ТолькоНезаполненные);
		КонецЕсли;
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПодготовитьДанныеДляРасчетаВычисляемыхЦен(
				ТаблицаНоменклатуры,
				?(Не ПараметрыРасчета.ЗагрузкаСтарыхЦен, МассивВидовЦен, Неопределено),
				ПараметрыРасчета.ТолькоНезаполненные
			);
		Иначе
			РассчитатьВычисляемыеЦены(
				ТаблицаНоменклатуры,
				?(Не ПараметрыРасчета.ЗагрузкаСтарыхЦен, МассивВидовЦен, Неопределено),
				ПараметрыРасчета.ТолькоНезаполненные
			);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Изменяет цены на процент
//
// Параметры:
// ПараметрыРасчета - Структура
//
&НаСервере
Функция ИзменитьЦеныНаПроцентНаСервере(ПараметрыРасчета)
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	ВидыЦен = Новый Массив;
	Для Каждого СтрокаМассива Из ПараметрыРасчета.ВидыЦен Цикл
		ВидыЦен.Добавить(НайтиСтрокуВидаЦен(ВыбранныеЦены, СтрокаМассива.ВидЦены));
	КонецЦикла;
	
	Если Не ПараметрыРасчета.ТолькоВыделенныеСтроки Тогда
		
		ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен();
		
		Для Каждого СтрокаМассива Из ПараметрыРасчета.ВидыЦен Цикл
			
			ИмяКолонки = ИмяКолонкиПоВидуЦены(СтрокаМассива.ВидЦены);
			
			ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
			Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
				
				Если ЭлементНоменклатура["СтараяЦена"+ИмяКолонки] <> 0 Тогда
					
					Если ПараметрыРасчета.ИзменятьПоОтношениюКСтаройЦене Тогда
						ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = СтрокаМассива.ПроцентИзменения;
					Иначе
						ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] + СтрокаМассива.ПроцентИзменения;
					КонецЕсли;
					
					ЭлементНоменклатура[ИмяКолонки] = Окр(ЭлементНоменклатура["СтараяЦена"+ИмяКолонки]*((ЭлементНоменклатура["ПроцентИзменения"+ИмяКолонки]/100)+1),15,2);
					
				Иначе
					
					ЭлементНоменклатура["ПроцентИзменения" + ИмяКолонки] = 0;
					Если ПараметрыРасчета.ИзменятьПоОтношениюКСтаройЦене Тогда
						ЭлементНоменклатура[ИмяКолонки] = 0;
					Иначе
						ЭлементНоменклатура[ИмяКолонки] = Окр(ЭлементНоменклатура[ИмяКолонки]*((СтрокаМассива.ПроцентИзменения/100)+1),15,2);
					КонецЕсли;
					
				КонецЕсли;
				
				ЭлементНоменклатура["ИзмененаВручную" + ИмяКолонки] = Истина;
				
				ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					
					Если ЭлементХарактеристика["СтараяЦена"+ИмяКолонки] <> 0 Тогда
						
						Если ПараметрыРасчета.ИзменятьПоОтношениюКСтаройЦене Тогда
							ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = СтрокаМассива.ПроцентИзменения;
						Иначе
							ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] + СтрокаМассива.ПроцентИзменения;
						КонецЕсли;
						
						ЭлементХарактеристика[ИмяКолонки] = Окр(ЭлементХарактеристика["СтараяЦена"+ИмяКолонки]*((ЭлементХарактеристика["ПроцентИзменения"+ИмяКолонки]/100)+1),15,2);
						
					Иначе
						
						ЭлементХарактеристика["ПроцентИзменения" + ИмяКолонки] = 0;
						Если ПараметрыРасчета.ИзменятьПоОтношениюКСтаройЦене Тогда
							ЭлементХарактеристика[ИмяКолонки] = 0;
						Иначе
							ЭлементХарактеристика[ИмяКолонки] = Окр(ЭлементХарактеристика[ИмяКолонки]*((СтрокаМассива.ПроцентИзменения/100)+1),15,2);
						КонецЕсли;
						
					КонецЕсли;
					
					ЭлементХарактеристика["ИзмененаВручную" + ИмяКолонки] = Истина;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
		Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
			СтрокаТаблицыЦен           = ДеревоЦен.НайтиПоИдентификатору(ВыделеннаяСтрока);
			НоваяСтрока                = ТаблицаНоменклатуры.Добавить();
			НоваяСтрока.Номенклатура   = СтрокаТаблицыЦен.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаТаблицыЦен.Характеристика;
		КонецЦикла;
		
		Для Каждого СтрокаМассива Из ПараметрыРасчета.ВидыЦен Цикл
			
			ИмяКолонки = ИмяКолонкиПоВидуЦены(СтрокаМассива.ВидЦены);
			Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
				
				СтрокаТаблицыЦен = ДеревоЦен.НайтиПоИдентификатору(ВыделеннаяСтрока);
				
				Если СтрокаТаблицыЦен["СтараяЦена" + ИмяКолонки] <> 0 Тогда
					
					Если ПараметрыРасчета.ИзменятьПоОтношениюКСтаройЦене Тогда
						СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = СтрокаМассива.ПроцентИзменения;
					Иначе
						СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] + СтрокаМассива.ПроцентИзменения;
					КонецЕсли;
					
					СтрокаТаблицыЦен[ИмяКолонки] = Окр(СтрокаТаблицыЦен["СтараяЦена"+ИмяКолонки]*((СтрокаТаблицыЦен["ПроцентИзменения"+ИмяКолонки]/100)+1),15,2);
					
				Иначе
					
					СтрокаТаблицыЦен["ПроцентИзменения" + ИмяКолонки] = 0;
					Если ПараметрыРасчета.ИзменятьПоОтношениюКСтаройЦене Тогда
						СтрокаТаблицыЦен[ИмяКолонки] = 0;
					Иначе
						СтрокаТаблицыЦен[ИмяКолонки] = Окр(СтрокаТаблицыЦен[ИмяКолонки]*((СтрокаМассива.ПроцентИзменения/100)+1),15,2);
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаТаблицыЦен["ИзмененаВручную" + ИмяКолонки] = Истина;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыРасчета.ПрименятьОкругление Тогда
		ПрименитьОкруглениеКРучнымЦенам(ТаблицаНоменклатуры, ВидыЦен);
	КонецЕсли;
	
	// Список видов цен, которые, которые зависят от изменяемых
	ЗависимыеЦены = Новый Массив;
	Для Каждого ВидЦены Из ВидыЦен Цикл
		МассивСтрокЗависимыхЦен = ЗависимыеОтВидаЦеныВидыЦен(ВидЦены);
		Для Каждого СтрокаВидЦены Из МассивСтрокЗависимыхЦен Цикл
			Если ЗависимыеЦены.Найти(СтрокаВидЦены) = Неопределено
				И ВидыЦен.Найти(СтрокаВидЦены) = Неопределено Тогда
				ЗависимыеЦены.Добавить(СтрокаВидЦены);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Автоматически рассчитывать нужно только те цены, по которым процент изменения которых не изменяется
	// и которые зависят от изменяемых
	ВидыЦенДляРасчета = Новый Массив;
	ВыбранныеСтрокиВидовЦен = ВыбранныеСтрокиТаблицыВидовЦен();
	Для Каждого ВидЦены Из ВыбранныеСтрокиВидовЦен Цикл
		Если ЗависимыеЦены.Найти(ВидЦены) <> Неопределено Тогда
			ВидыЦенДляРасчета.Добавить(ВидЦены);
		КонецЕсли;
	КонецЦикла;
	
	Если РассчитыватьАвтоматически Тогда
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПодготовитьДанныеДляРасчетаВычисляемыхЦен(ТаблицаНоменклатуры, ВидыЦенДляРасчета, Ложь);
		Иначе
			РассчитатьВычисляемыеЦены(ТаблицаНоменклатуры, ВидыЦенДляРасчета, Ложь);
		КонецЕсли;
	Иначе
		УстановитьПризнакРучногоИзмененияДляВидовЦен(ТаблицаНоменклатуры, ВидыЦенДляРасчета);
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Возвращает таблицу с колонками Упаковка и Коэффициент
//
// Параметры:
// МассивУпаковок - Массив - содержит упаковки номенклатуры, для которых необходимо получить коэффициенты
//
// Возвращаемое значение:
// ТаблицаЗначений
//
&НаСервереБезКонтекста
Функция КоэффициентыУпаковокНоменклатуры(МассивУпаковок)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Ссылка      КАК Упаковка,
	|	УпаковкиНоменклатуры.Коэффициент КАК Коэффициент
	|ИЗ
	|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Ссылка В(&МассивНоменклатуры)");
	
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивУпаковок);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеУпаковок = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		СоответствиеУпаковок.Вставить(Выборка.Упаковка, Выборка.Коэффициент);
	КонецЦикла;
	
	Возврат СоответствиеУпаковок;
	
КонецФункции

// Возвращает таблицу с колонками Упаковка и Коэффициент
//
// Параметры:
// СтрокаТаблицы - строка таблицаЗначений
//
// Возвращаемое значение:
// ТаблицаЗначений
//
&НаСервере
Функция КоэффициентыУпаковокНоменклатурыДереваТоваров(ТаблицаНоменклатуры)
	
	МассивВидовЦен = ВыбранныеСтрокиТаблицыВидовЦен();
	
	МассивУпаковок = Новый Массив();
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	
	Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		ДобавитьУпаковкиСтрокиТаблицыЦенВМассив(ЭлементНоменклатура, ТаблицаНоменклатуры, МассивВидовЦен, МассивУпаковок);
		
		ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			ДобавитьУпаковкиСтрокиТаблицыЦенВМассив(ЭлементХарактеристика, ТаблицаНоменклатуры, МассивВидовЦен, МассивУпаковок);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат КоэффициентыУпаковокНоменклатуры(МассивУпаковок);
	
КонецФункции

// Получает все характеристики номенклатуры
//
// Параметры:
// Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которой необходимо получить характеристики
//
&НаСервере
Процедура ЗаполнитьХарактеристикиНоменклатуры(Знач ТекущаяСтрока, СкопироватьЦеныИзТекущейСтроки = Ложь)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка           КАК Номенклатура,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СправочникНоменклатура.ЦеноваяГруппа    КАК ЦеноваяГруппа,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры) ТОГДА Истина
	|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры) ТОГДА Истина
	|	ИНАЧЕ Ложь КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ХарактеристикиНоменклатуры.Ссылка       КАК Характеристика
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|	ПО (ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.Ссылка
	|		ИЛИ ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.ВидНоменклатуры)
	|ГДЕ
	|	СправочникНоменклатура.Ссылка = &Номенклатура
	|	И ХарактеристикиНоменклатуры.Ссылка ЕСТЬ НЕ NULL
	|УПОРЯДОЧИТЬ ПО
	|	ХарактеристикиНоменклатуры.Ссылка
	|");
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		
		Запрос.Текст = Запрос.Текст + "
			|;
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.Характеристика  КАК Характеристика,
			|	ЦеныНоменклатуры.ВидЦены         КАК ВидЦены,
			|	ЦеныНоменклатуры.Упаковка        КАК Упаковка
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, Номенклатура = &Номенклатура И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
			|";
			
		Запрос.УстановитьПараметр("ВидыЦен",       ВыбранныеВидыЦен());
		Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры());
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		Упаковки = МассивРезультатов[1].Выгрузить();
		Упаковки.Индексы.Добавить("Характеристика");
	КонецЕсли;
	
	ВидыЦен = ВыбранныеВидыЦен();
	
	ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
	ВыборкаХарактеристики = МассивРезультатов[0].Выбрать();
	Пока ВыборкаХарактеристики.Следующий() Цикл
		
		ЭлементХарактеристика = ЭлементыХарактеристики.Добавить();
		
		ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
		ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			ПараметрыПоиска = Новый Структура("Характеристика", ЭлементХарактеристика.Характеристика);
			
			НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
			Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
				ЭлементХарактеристика["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СкопироватьЦеныИзТекущейСтроки Тогда
		
		МассивУпаковок = Новый Массив();
		СоответствиеУпаковок = Неопределено;
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			Для Каждого ВидЦены Из ВидыЦен Цикл
				ИмяКолонки = ИмяКолонкиПоВидуЦены(ВидЦены);
				
				Если ЗначениеЗаполнено(ТекущаяСтрока["Упаковка" + ИмяКолонки]) Тогда
					МассивУпаковок.Добавить(ТекущаяСтрока["Упаковка" + ИмяКолонки]);
				КонецЕсли;
				
				ЭлементыХарактеристики = ТекущаяСтрока.ПолучитьЭлементы();
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					
					Упаковка = ЭлементХарактеристика["Упаковка" + ИмяКолонки];
					Если ЗначениеЗаполнено(Упаковка) И МассивУпаковок.Найти(Упаковка) = Неопределено Тогда
						МассивУпаковок.Добавить(Упаковка);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если МассивУпаковок.Количество() > 0 Тогда
				СоответствиеУпаковок = КоэффициентыУпаковокНоменклатуры(МассивУпаковок);
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ВидЦены Из ВидыЦен Цикл
			ИмяКолонки = ИмяКолонкиПоВидуЦены(ВидЦены);
			
			Если ТекущаяСтрока["ИзмененаВручную" + ИмяКолонки] Тогда
				
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					
					// Определим коэффициент упаковки текущей цены
					КоэффициентУпаковкиЦеныИсточника = 1;
					Если ИспользоватьУпаковкиНоменклатуры Тогда
						Упаковка = ТекущаяСтрока["Упаковка" + ИмяКолонки];
						Если ЗначениеЗаполнено(Упаковка) И СоответствиеУпаковок <> Неопределено Тогда
							НайденноеЗначение = СоответствиеУпаковок.Получить(Упаковка);
							Если НайденноеЗначение <> Неопределено Тогда
								КоэффициентУпаковкиЦеныИсточника = НайденноеЗначение;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
					
					ЭлементХарактеристика["ИзмененаВручную" + ИмяКолонки] = Истина;
					
					Если Не ИспользоватьУпаковкиНоменклатуры ИЛИ ТекущаяСтрока["Упаковка" + ИмяКолонки] = ЭлементХарактеристика["Упаковка" + ИмяКолонки] Тогда
						ЭлементХарактеристика[ИмяКолонки] = ТекущаяСтрока[ИмяКолонки];
					Иначе
						
						// Определим коэффициент упаковки влияющей цены
						КоэффициентУпаковкиЦеныНазначения = 1;
						
						Упаковка = ЭлементХарактеристика["Упаковка" + ИмяКолонки];
						Если ЗначениеЗаполнено(Упаковка) И СоответствиеУпаковок <> Неопределено Тогда
							НайденноеЗначение = СоответствиеУпаковок.Получить(Упаковка);
							Если НайденноеЗначение <> Неопределено Тогда
								КоэффициентУпаковкиЦеныНазначения = НайденноеЗначение;
							КонецЕсли;
						КонецЕсли;
						
						Если КоэффициентУпаковкиЦеныИсточника = КоэффициентУпаковкиЦеныНазначения Тогда
							ЭлементХарактеристика[ИмяКолонки] = ТекущаяСтрока[ИмяКолонки];
						Иначе
							ЭлементХарактеристика[ИмяКолонки] = ТекущаяСтрока[ИмяКолонки] / КоэффициентУпаковкиЦеныИсточника * КоэффициентУпаковкиЦеныНазначения;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ДеревоЦенНоменклатура".
//
&НаСервере
Функция ДеревоЦенНоменклатураПриИзмененииСервер(ИдентификаторСтроки, РассчитатьЦены = Истина)
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
		Характеристики = ТекущаяСтрока.ПолучитьЭлементы();
		Если Характеристики.Количество() > 0 Тогда
			Если Характеристики[0].Номенклатура <> ТекущаяСтрока.Номенклатура Тогда
				ТекущаяСтрока.ПолучитьЭлементы().Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ВидыЦен = ВыбранныеСтрокиТаблицыВидовЦен();
	Для Каждого ВидЦены Из ВидыЦен Цикл
		
		ИмяКолонки         = ВидЦены.ИмяКолонки;
		ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока[ИмяКолонки]) И РассчитатьЦены Тогда
			ТекущаяСтрока[ИмяКолонки] = 0;
		КонецЕсли;
		
		Если ИспользоватьУпаковкиНоменклатуры И ЗначениеЗаполнено(ТекущаяСтрока[ИмяКолонкиУпаковка]) Тогда
			ТекущаяСтрока[ИмяКолонкиУпаковка] = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СправочникНоменклатура.ЦеноваяГруппа    КАК ЦеноваяГруппа,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры) ТОГДА Истина
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры) ТОГДА Истина
		|	ИНАЧЕ Ложь КОНЕЦ КАК ХарактеристикиИспользуются
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ
		|	СправочникНоменклатура.Ссылка = &Номенклатура
		|");
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|;
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.Характеристика  КАК Характеристика,
			|	ЦеныНоменклатуры.ВидЦены         КАК ВидЦены,
			|	ЦеныНоменклатуры.Упаковка        КАК Упаковка
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента,
			|													Номенклатура = &Номенклатура
			|													И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|													И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
			|";
			
			Запрос.УстановитьПараметр("ВидыЦен",       ВыбранныеВидыЦен());
			Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры());
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		ВыборкаНоменклатура = МассивРезультатов[0].Выбрать();
		
		Если ВыборкаНоменклатура.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыборкаНоменклатура);
		КонецЕсли;
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			ВыборкаУпаковки = МассивРезультатов[1].Выбрать();
			Пока ВыборкаУпаковки.Следующий() Цикл
				ТекущаяСтрока["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
			КонецЦикла;
		КонецЕсли;
		
		Если АвтоматическиДобавлятьХарактеристики И ИспользоватьХарактеристикиНоменклатуры Тогда
			ЗаполнитьХарактеристикиНоменклатуры(ТекущаяСтрока, Не РассчитатьЦены И ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре);
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		ТекущаяСтрока.ЦеноваяГруппа    = Справочники.ЦеновыеГруппы.ПустаяСсылка();
		
	КонецЕсли;
	
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = ПустаяТаблицаТовары();
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		
		Если СтрокаВидЦены.Выбрана ИЛИ СтрокаВидЦены.Влияет Тогда
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			НоваяСтрока.Номенклатура   = ТекущаяСтрока.Номенклатура;
			НоваяСтрока.Характеристика = ТекущаяСтрока.Характеристика;
			НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
			НоваяСтрока.Цена           = ТекущаяСтрока[ИмяКолонки];
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
			КонецЕсли;
			
			Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.Номенклатура   = ПодчиненнаяСтрока.Номенклатура;
				НоваяСтрока.Характеристика = ПодчиненнаяСтрока.Характеристика;
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
				НоваяСтрока.Цена           = ПодчиненнаяСтрока[ИмяКолонки];
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьСтарыеЦеныНоменклатуры(ТаблицаЗначений);
	
	Если РассчитатьЦены Тогда
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = РассчитатьЦеныПоИдентификаторуСтроки(ИдентификаторСтроки, Истина);
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Процедура - обработчик события "ПриИзменении" поля "ДеревоЦенХарактеристика".
//
&НаСервере
Функция ДеревоЦенХарактеристикаПриИзмененииСервер(ИдентификаторСтроки, РассчитатьЦены = Истина)
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			ВидыЦен = ВыбранныеВидыЦен();
			ТаблицаУпаковок = ПоследниеУпаковкиЦен(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика, ВидыЦен);
			
			Для Каждого ТекСтрока Из ТаблицаУпаковок Цикл
				ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонкиПоВидуЦены(ТекСтрока.ВидЦены);
				Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
					ТекущаяСтрока[ИмяКолонкиУпаковка] = ТекСтрока.Упаковка;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = ПустаяТаблицаТовары();
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		
		Если СтрокаВидЦены.Выбрана ИЛИ СтрокаВидЦены.Влияет Тогда
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			НоваяСтрока.Номенклатура   = ТекущаяСтрока.Номенклатура;
			НоваяСтрока.Характеристика = ТекущаяСтрока.Характеристика;
			НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
			НоваяСтрока.Цена           = ТекущаяСтрока[ИмяКолонки];
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
			КонецЕсли;
			
			Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.Номенклатура   = ПодчиненнаяСтрока.Номенклатура;
				НоваяСтрока.Характеристика = ПодчиненнаяСтрока.Характеристика;
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
				НоваяСтрока.Цена           = ПодчиненнаяСтрока[ИмяКолонки];
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяСтрока.Упаковка   = ТекущаяСтрока[ИмяКолонкиУпаковка];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьСтарыеЦеныНоменклатуры(ТаблицаЗначений);
	
	Если РассчитатьЦены Тогда
		ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = РассчитатьЦеныПоИдентификаторуСтроки(ИдентификаторСтроки, Истина);
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

// Коприрует в таблицу значений номенклатуру с характеристикой из дерева цен
//
// Возвращаемое значение:
// ТаблицаЗначений
//
&НаСервере
Функция СоздатьТаблицуНоменклатурыПоДеревуЦен()
	
	ТаблицаНоменклатуры = СоздатьПустуюТаблицуНоменклатуры();
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	
	Для Каждого ЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		НоваяСтрока = ТаблицаНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементНоменклатура);
		
		ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
		
		Для Каждого ЭлементХарактеристика Из ЭлементыХарактеристики Цикл
			
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементХарактеристика);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

// Проверяет корректность заполнения документа установки цен
//
// Параметры:
// Отказ = Булево - признак отказа от записи документа
//
&НаСервере
Процедура ПроверитьКорректностьЗаполненияДокумента(Отказ)
	
	// Для корректного построения таблицы цен по тч Товары не должно быть дублей товаров и пустых строк
	ДеревоЦенДляПроверки = СоздатьПустуюТаблицуНоменклатуры();
	ДеревоЦенДляПроверки.Колонки.Добавить("НомерСтроки",    Новый ОписаниеТипов("Число"));
	ДеревоЦенДляПроверки.Колонки.Добавить("ЭтоГруппа",      Новый ОписаниеТипов("Булево"));
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	НомерСтроки = 1;
	
	Для Каждого ТекЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		СтрокаТаблицы = ДеревоЦенДляПроверки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекЭлементНоменклатура);
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		СтрокаТаблицы.ЭтоГруппа   = Истина;
		
		НомерСтроки = НомерСтроки + 1;
		
		Если ТекЭлементНоменклатура.ХарактеристикиИспользуются Тогда
			
			ДобавленыХарактеристики = Ложь;
			
			ЭлементыХарактеристики = ТекЭлементНоменклатура.ПолучитьЭлементы();
			Для Каждого ТекЭлементХарактеристика Из ЭлементыХарактеристики Цикл
				
				СтрокаТаблицыХарактеристика = ДеревоЦенДляПроверки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыХарактеристика, ТекЭлементХарактеристика);
				СтрокаТаблицыХарактеристика.НомерСтроки = НомерСтроки;
				СтрокаТаблицыХарактеристика.ЭтоГруппа   = Ложь;
				
				НомерСтроки = НомерСтроки + 1;
				
				ДобавленыХарактеристики = Истина;
				
			КонецЦикла;
			
			Если Не ДобавленыХарактеристики Тогда
				//+АК
				////ТекстОшибки = НСтр("ru='Для номенклатуры ""%1"" в строке ""%2"" списка ""Таблица цен"" включено использование характеристик,
				////					   |Но ни одной характеристики не указано. Добавьте характеристики и укажите их цены или удалите данную номенклатуру из списка.'");
				////ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.НомерСтроки);
				////
				////ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				////	ТекстОшибки,
				////	Объект.Ссылка,
				////	ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", СтрокаТаблицы.НомерСтроки, "Номенклатура"),
				////	,
				////	Отказ
				////);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДеревоЦенДляПроверки.Количество() > 0 Тогда
		Ценообразование.ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатуры(Объект, ДеревоЦенДляПроверки, ВыбранныеВидыЦен(), Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет товары из ценовой группы в таблицу цен
//
// Параметры:
// ЦеновыеГруппы - Массив
//
&НаСервере
Функция ДобавитьНоменклатуруЦеновойГруппыНаСервере(ЦеновыеГруппы)
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
	
		Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СправочникНоменклатура.Ссылка           КАК Номенклатура,
			|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	СправочникНоменклатура.ЦеноваяГруппа    КАК ЦеноваяГруппа,
			|	ВЫБОР
			|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры) ТОГДА Истина
			|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры) ТОГДА Истина
			|	ИНАЧЕ Ложь КОНЕЦ КАК ХарактеристикиИспользуются,
			|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика
			|ИЗ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|	ПО (ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.Ссылка
			|		ИЛИ ХарактеристикиНоменклатуры.Владелец = СправочникНоменклатура.ВидНоменклатуры)
			|ГДЕ
			|	СправочникНоменклатура.ЦеноваяГруппа В (&ЦеновыеГруппы)
			|УПОРЯДОЧИТЬ ПО
			|	СправочникНоменклатура.ЦеноваяГруппа
			|ИТОГИ ПО
			|	Номенклатура
			|");
			
	Иначе
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СправочникНоменклатура.Ссылка           КАК Номенклатура,
			|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	СправочникНоменклатура.ЦеноваяГруппа    КАК ЦеноваяГруппа,
			|	ВЫБОР
			|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры) ТОГДА Истина
			|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры) ТОГДА Истина
			|	ИНАЧЕ Ложь КОНЕЦ КАК ХарактеристикиИспользуются
			|ИЗ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|ГДЕ
			|	СправочникНоменклатура.ЦеноваяГруппа В (&ЦеновыеГруппы)
			|УПОРЯДОЧИТЬ ПО
			|	СправочникНоменклатура.ЦеноваяГруппа
			|ИТОГИ ПО
			|	Номенклатура
			|");
		
	КонецЕсли;
		
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатуры.Номенклатура   КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.Упаковка       КАК Упаковка,
		|	ЦеныНоменклатуры.ВидЦены        КАК ВидЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, Номенклатура.ЦеноваяГруппа В (&ЦеновыеГруппы) И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
		|";
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ЦеновыеГруппы", ЦеновыеГруппы);
	Запрос.УстановитьПараметр("ВидыЦен",       ВыбранныеВидыЦен());
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаНоменклатура = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		Упаковки = РезультатЗапроса[1].Выгрузить();
		Упаковки.Индексы.Добавить("Номенклатура, Характеристика");
	КонецЕсли;
	
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", ВыборкаНоменклатура.Номенклатура, ПустаяХарактеристика);
		НайденнаяСтрока = НайтиСтрокуДереваЦен(ПараметрыОтбора);
		
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭлементНоменклатура = НайденнаяСтрока;
		Иначе
			
			ЭлементНоменклатура = ДеревоЦен.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
			ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
			
			НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			НоваяСтрокаТЗ.Номенклатура    = ЭлементНоменклатура.Номенклатура;
			НоваяСтрокаТЗ.Характеристика  = ЭлементНоменклатура.Характеристика;
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				
				ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика", ЭлементНоменклатура.Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				
				НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
				Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
					ЭлементНоменклатура["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьХарактеристикиНоменклатуры И АвтоматическиДобавлятьХарактеристики Тогда
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
					
					ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", ВыборкаХарактеристики.Номенклатура, ВыборкаХарактеристики.Характеристика);
					НайденнаяСтрока = НайтиСтрокуДереваЦен(ПараметрыОтбора);
					
					Если НайденнаяСтрока <> Неопределено Тогда
						ЭлементХарактеристика = НайденнаяСтрока;
					Иначе
						
						ЭлементХарактеристика = ЭлементНоменклатура.ПолучитьЭлементы().Добавить();
						ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
						ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
						
						НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
						НоваяСтрокаТЗ.Номенклатура    = ЭлементХарактеристика.Номенклатура;
						НоваяСтрокаТЗ.Характеристика  = ЭлементХарактеристика.Характеристика;
						НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
						
						Если ИспользоватьУпаковкиНоменклатуры Тогда
							
							ПараметрыПоиска = Новый Структура("Номенклатура,Характеристика", ЭлементХарактеристика.Номенклатура, ЭлементХарактеристика.Характеристика);
							
							НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
							Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
								ЭлементХарактеристика["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСтарыеЦеныНоменклатуры();
	
	// Автоматический расчет цен
	ЗагружатьЦеныИзИБ = Истина;
	Если РассчитыватьАвтоматически Тогда
		
		Если ЗагружатьЦеныИзИБ Тогда
			ЗагрузитьЗначенияБазовыхЦен(ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров);
			ВычислитьЦеныПоДаннымИБ(ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров);
		КонецЕсли;
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПодготовитьДанныеДляРасчетаВычисляемыхЦен(ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров);
		Иначе
			РассчитатьВычисляемыеЦены(ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров);
		КонецЕсли;
		
	КонецЕсли;
	
	// Установим последнюю добавленную строку текущей
	Если ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Количество() > 0 Тогда
		Элементы.ДеревоЦен.ТекущаяСтрока = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров[ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Количество()-1].СтрокаДереваЦен.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

&НаСервере
Функция ПустаяТаблицаТовары()
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	
	ТаблицаЗначений.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаЗначений.Колонки.Добавить("ВидЦены",        Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаЗначений.Колонки.Добавить("Цена",           Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("Упаковка",       Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

&НаСервере
Функция ДобавитьТоварыПоОтборуНаСервере(АдресВоВременномХранилище, Знач ТаблицаТовары = Неопределено)
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	Модифицированность = Истина;
	
	Если ТаблицаТовары = Неопределено Тогда
		ТаблицаТовары = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	КонецЕсли;
	
	Если ТаблицаТовары.Количество() = 0 Тогда
		Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТовары, "Индекс");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Индекс         КАК Индекс,
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатура
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|ВЫБРАТЬ
	|	ТаблицаНоменклатура.Номенклатура.Наименование     КАК Наименование,
	|	ТаблицаНоменклатура.Номенклатура                  КАК Номенклатура,
	|	ТаблицаНоменклатура.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаНоменклатура.Номенклатура.ЦеноваяГруппа    КАК ЦеноваяГруппа,
	|	ТаблицаНоменклатура.Характеристика                КАК Характеристика,
	|
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры) ТОГДА Истина
	|		КОГДА ТаблицаНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры) ТОГДА Истина
	|	ИНАЧЕ Ложь КОНЕЦ КАК ХарактеристикиИспользуются
	|
	|ИЗ
	|	ТаблицаНоменклатура КАК ТаблицаНоменклатура
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНоменклатура.Индекс
	|ИТОГИ ПО
	|	Номенклатура
	|";
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатуры.Номенклатура   КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.Упаковка       КАК Упаковка,
		|	ЦеныНоменклатуры.ВидЦены        КАК ВидЦены
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаДокумента, (Номенклатура, Характеристика) В (ВЫБРАТЬ Т.Номенклатура, Т.Характеристика ИЗ ТаблицаНоменклатура КАК Т) И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
		|";
	КонецЕсли;

	Запрос.УстановитьПараметр("Таблица",       ТаблицаТовары);
	Запрос.УстановитьПараметр("ВидыЦен",       ВыбранныеВидыЦен());
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДляЗапросаЦенНоменклатуры());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаНоменклатура = РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		Упаковки = РезультатЗапроса[2].Выгрузить();
		Упаковки.Индексы.Добавить("Номенклатура, Характеристика");
	КонецЕсли;
	
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	Пока ВыборкаНоменклатура.Следующий() Цикл
		
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", ВыборкаНоменклатура.Номенклатура, ПустаяХарактеристика);
		НайденнаяСтрока = НайтиСтрокуДереваЦен(ПараметрыОтбора);
		
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭлементНоменклатура = НайденнаяСтрока;
		Иначе
			
			ЭлементНоменклатура = ЭлементыНоменклатура.Добавить();
			ЗаполнитьЗначенияСвойств(ЭлементНоменклатура, ВыборкаНоменклатура);
			ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементНоменклатура);
			
			НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
			НоваяСтрокаТЗ.Номенклатура    = ЭлементНоменклатура.Номенклатура;
			НоваяСтрокаТЗ.Характеристика  = ЭлементНоменклатура.Характеристика;
			НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементНоменклатура;
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				
				ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика", ЭлементНоменклатура.Номенклатура, Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
				
				НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
				Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
					ЭлементНоменклатура["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьХарактеристикиНоменклатуры Тогда
			
			ВыборкаХарактеристики = ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ЭлементыХарактеристики = ЭлементНоменклатура.ПолучитьЭлементы();
			Пока ВыборкаХарактеристики.Следующий() Цикл
				
				Если ЗначениеЗаполнено(ВыборкаХарактеристики.Характеристика) Тогда
					
					ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", ВыборкаХарактеристики.Номенклатура, ВыборкаХарактеристики.Характеристика);
					НайденнаяСтрока = НайтиСтрокуДереваЦен(ПараметрыОтбора);
					
					Если НайденнаяСтрока <> Неопределено Тогда
						ЭлементХарактеристика = НайденнаяСтрока;
					Иначе
						
						ЭлементХарактеристика = ЭлементыХарактеристики.Добавить();
						ЗаполнитьЗначенияСвойств(ЭлементХарактеристика, ВыборкаХарактеристики);
						ЗаполнитьИндексКартинкиСтрокиДереваЦен(ЭлементХарактеристика);
						
						НоваяСтрокаТЗ = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
						НоваяСтрокаТЗ.Номенклатура    = ЭлементХарактеристика.Номенклатура;
						НоваяСтрокаТЗ.Характеристика  = ЭлементХарактеристика.Характеристика;
						НоваяСтрокаТЗ.СтрокаДереваЦен = ЭлементХарактеристика;
						
						Если ИспользоватьУпаковкиНоменклатуры Тогда
							
							ПараметрыПоиска = Новый Структура("Номенклатура,Характеристика", ЭлементХарактеристика.Номенклатура, ЭлементХарактеристика.Характеристика);
							
							НайденныеСтроки = Упаковки.НайтиСтроки(ПараметрыПоиска);
							Для Каждого ВыборкаУпаковки Из НайденныеСтроки Цикл
								ЭлементХарактеристика["Упаковка" + ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены)] = ВыборкаУпаковки.Упаковка;
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьСтарыеЦеныНоменклатуры();
	
	// Автоматический расчет цен
	ЗагружатьЦеныИзИБ = Истина;
	Если РассчитыватьАвтоматически Тогда
		
		Если ЗагружатьЦеныИзИБ Тогда
			ЗагрузитьЗначенияБазовыхЦен(ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров);
			ВычислитьЦеныПоДаннымИБ(ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров);
		КонецЕсли;
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПодготовитьДанныеДляРасчетаВычисляемыхЦен(ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров);
		Иначе
			РассчитатьВычисляемыеЦены(ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров);
		КонецЕсли;
		
	КонецЕсли;
	
	// Установим последнюю добавленную строку текущей
	Если ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Количество() > 0 Тогда
		Элементы.ДеревоЦен.ТекущаяСтрока = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров[ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Количество()-1].СтрокаДереваЦен.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

&НаСервере
Процедура УдалитьТоварыБезИзмененныхЦенНаСервере()
	
	ВидыЦен = ВыбранныеСтрокиТаблицыВидовЦен();
	
	УдаляемыеЭлементыНоменклатура = Новый Массив;
	УдаляемыеЭлементыХарактеристики = Новый Массив;
	
	ВыборкаНоменклатуры = ДеревоЦен.ПолучитьЭлементы();
	Для Каждого ЭлементНоменклатура Из ВыборкаНоменклатуры Цикл
		
		УдаляемыеЭлементыХарактеристики.Очистить();
		
		ВыборкаХарактеристика = ЭлементНоменклатура.ПолучитьЭлементы();
		Для Каждого ЭлементХарактеристика Из ВыборкаХарактеристика Цикл
			
			ЦеныИзменены = Ложь;
			Для Каждого ВидЦены Из ВидыЦен Цикл
				Если (ЭлементХарактеристика["ПроцентИзменения" + ВидЦены.ИмяКолонки] <> 0
					И ЭлементХарактеристика["СтараяЦена" + ВидЦены.ИмяКолонки] <> 0)
					Или
					(ЭлементХарактеристика["СтараяЦена" + ВидЦены.ИмяКолонки] = 0
					И ЭлементХарактеристика[ВидЦены.ИмяКолонки] <> 0) Тогда
					ЦеныИзменены = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ЦеныИзменены Тогда
				УдаляемыеЭлементыХарактеристики.Добавить(ЭлементХарактеристика);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ЭлементХарактеристика Из УдаляемыеЭлементыХарактеристики Цикл
			ВыборкаХарактеристика.Удалить(ЭлементХарактеристика);
		КонецЦикла;
		
		ЦеныИзменены = Ложь;
		Для Каждого ВидЦены Из ВидыЦен Цикл
			Если (ЭлементНоменклатура["ПроцентИзменения" + ВидЦены.ИмяКолонки] <> 0
				И ЭлементНоменклатура["СтараяЦена" + ВидЦены.ИмяКолонки] <> 0)
				Или
				(ЭлементНоменклатура["СтараяЦена" + ВидЦены.ИмяКолонки] = 0
				И ЭлементНоменклатура[ВидЦены.ИмяКолонки] <> 0) Тогда
				ЦеныИзменены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЦеныИзменены И ВыборкаХарактеристика.Количество() = 0 Тогда
			УдаляемыеЭлементыНоменклатура.Добавить(ЭлементНоменклатура);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементНоменклатура Из УдаляемыеЭлементыНоменклатура Цикл
		ВыборкаНоменклатуры.Удалить(ЭлементНоменклатура);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет упаковки элемента дерева в массив упаковок
//
// Параметры:
// ЭлементДерева       - ДанныеФормыКоллекцияЭлементовДерева - элемент дерева значений
// ТаблицаНоменклатуры - ТаблицаЗначений - необходима для определения необходимости добавления упаковок
// МассивВидовЦен      - Массив - массив видов цен для поиска колонок в дереве значений
// МассивУпаковок      - Массив - массив, в который необходимо добавить упаковки
//
&НаСервере
Процедура ДобавитьУпаковкиСтрокиТаблицыЦенВМассив(Знач ЭлементДерева, Знач ТаблицаНоменклатуры, Знач МассивВидовЦен, МассивУпаковок)
	
	Для Каждого ВидЦен Из МассивВидовЦен Цикл
		ИмяКолонки = "Упаковка" + ВидЦен.ИмяКолонки;
		Упаковка = ЭлементДерева[ИмяКолонки];
		Если ЗначениеЗаполнено(Упаковка) И МассивУпаковок.Найти(Упаковка) = Неопределено Тогда
			МассивУпаковок.Добавить(Упаковка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтарыеЦеныНоменклатуры()
	
	Если ВыбранныеЦеныИзменены Тогда
		ПоместитьЦеныВТабличнуюЧасть(Объект);
		ПостроитьДеревоЦен();
		ЗагрузитьТабличнуюЧастьТовары();
	КонецЕсли;
	
	Если ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = Неопределено Тогда
		ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров = ТаблицаСоответствия();
	КонецЕсли;
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = ПустаяТаблицаТовары();
	Для Каждого СтрокаВидЦены Из ВыбранныеЦены Цикл
		
		Если СтрокаВидЦены.Выбрана ИЛИ СтрокаВидЦены.Влияет Тогда
			
			ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
			ИмяКолонкиУпаковка = "Упаковка" + СтрокаВидЦены.ИмяКолонки;
			
			Для Каждого СтрокаТЗ Из ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров Цикл
				
				СтрокаДереваЦен = СтрокаТЗ.СтрокаДереваЦен;
				
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.Номенклатура   = СтрокаДереваЦен.Номенклатура;
				НоваяСтрока.Характеристика = СтрокаДереваЦен.Характеристика;
				НоваяСтрока.ВидЦены        = СтрокаВидЦены.Ссылка;
				НоваяСтрока.Цена           = СтрокаДереваЦен[ИмяКолонки];
				Если ИспользоватьУпаковкиНоменклатуры Тогда
					НоваяСтрока.Упаковка   = СтрокаДереваЦен[ИмяКолонкиУпаковка];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьСтарыеЦеныНоменклатуры(ТаблицаЗначений);
	
КонецПроцедуры

&НаСервере
// Формирует уникальное имя колонки таблицы
//
Функция ИмяКолонкиПоВидуЦены(ВидЦены)
	
	Значение = СоответствиеВидовЦенИменамКолонокТаблицыТоваров.Получить(ВидЦены);
	Если Значение = Неопределено Тогда
		Значение = "ВидЦены" + СтрЗаменить(ВидЦены.УникальныйИдентификатор(), "-", "");
		СоответствиеВидовЦенИменамКолонокТаблицыТоваров.Вставить(ВидЦены, Значение);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции

// Формирует дерево значений с колонками Номенклатура, Характеристика, ИндексКартинки
//
// Возвращаемое значение:
// ДеревоЗначений
//
&НаСервереБезКонтекста
Функция СоздатьПустоеДеревоНоменклатуры()
	
	ДеревоЗначений = Новый ДеревоЗначений();
	
	ДеревоЗначений.Колонки.Добавить("Номенклатура",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДеревоЗначений.Колонки.Добавить("Характеристика",             Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ДеревоЗначений.Колонки.Добавить("ИндексКартинки",             Новый ОписаниеТипов("Число"));
	ДеревоЗначений.Колонки.Добавить("ЕдиницаИзмерения",           Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ДеревоЗначений.Колонки.Добавить("ЦеноваяГруппа",              Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
	ДеревоЗначений.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	ДеревоЗначений.Колонки.Добавить("РеквизитСортировки",         Новый ОписаниеТипов("Число"));
	
	Возврат ДеревоЗначений;
	
КонецФункции

// Формирует таблицу значений с колонками Номенклатура, Характеристика
//
// Возвращаемое значение:
// ТаблицаЗначений
//
&НаСервереБезКонтекста
Функция СоздатьПустуюТаблицуНоменклатуры()
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	
	ТаблицаЗначений.Колонки.Добавить("Номенклатура",   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Возвращает упаковки, на которые ранее были установлены цены номенклатуре
// для подстановки в документы при изменении номенклатуры
//
// Параметры:
// Номенклатура - СправочникСсылка.Номенклатура - Ссылка на номенклатуру, для которой необходимо получить упаковку цен
//
// Возвращаемое значение:
// ТаблицаЗначений
//
&НаСервереБезКонтекста
Функция ПоследниеУпаковкиЦен(Знач Номенклатура, Знач Характеристика, Знач ВидыЦен, Знач Дата = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры.ВидЦены  КАК ВидЦены,
		|	ЦеныНоменклатуры.Упаковка КАК Упаковка
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура И Характеристика = &Характеристика И ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
		|";
	
	Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("ВидыЦен",        ВидыЦен);
	Запрос.УстановитьПараметр("Дата",           ?(Дата = Неопределено, ТекущаяДата(), Дата));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИндексКартинкиСтрокиДереваЦен(СтрокаДереваЦен)
	
	Если ТипЗнч(СтрокаДереваЦен) = Тип("ДанныеФормыЭлементДерева") Тогда
		Если СтрокаДереваЦен.ПолучитьРодителя() = Неопределено Тогда
			СтрокаДереваЦен.ИндексКартинки = 0;
		Иначе
			СтрокаДереваЦен.ИндексКартинки = 2;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтрокаДереваЦен) = Тип("СтрокаДереваЗначений") Тогда
		Если СтрокаДереваЦен.Родитель = Неопределено Тогда
			СтрокаДереваЦен.ИндексКартинки = 0;
		Иначе
			СтрокаДереваЦен.ИндексКартинки = 2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает признак автоматического перерасчета цен
//
// Параметры:
// НовоеЗначение - Булево
//
&НаКлиенте
Процедура УстановитьРассчитыватьАвтоматическиНаКлиенте(НовоеЗначение)
	
	РассчитыватьАвтоматически = НовоеЗначение;
	Элементы.ДеревоЦенПереключательРассчитыватьАвтоматически.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак фиксации колонки "Номенклатура"
//
// Параметры:
// НовоеЗначение - Булево
//
&НаКлиенте
Процедура ЗафиксироватьКолонкуНоменклатураНаКлиенте(НовоеЗначение)
	
	ЗафиксироватьКолонкуНоменклатура = НовоеЗначение;
	
	Элементы.ДеревоЦенНоменклатура.ФиксацияВТаблице   = ?(ЗафиксироватьКолонкуНоменклатура,ФиксацияВТаблице.Лево,ФиксацияВТаблице.Нет);
	Элементы.ДеревоЦенХарактеристика.ФиксацияВТаблице = ?(ЗафиксироватьКолонкуНоменклатура,ФиксацияВТаблице.Лево,ФиксацияВТаблице.Нет);
	
	Элементы.ДеревоЦенПереключательЗафиксироватьКолонкуНоменклатура.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак автозаполнения цен характеристик по номенклатуре
//
// Параметры:
// НовоеЗначение - Булево
//
&НаКлиенте
Процедура УстановитьЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуреНаКлиенте(НовоеЗначение)
	
	ЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре = НовоеЗначение;
	Элементы.ДеревоЦенПереключательЗаполнятьАвтоматическиЦеныХарактеристикПоНоменклатуре.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Устанавливает признак автозаполнения цен характеристик по номенклатуре
//
// Параметры:
// НовоеЗначение - Булево
//
&НаКлиенте
Процедура УстановитьАвтоматическиДобавлятьХарактеристикиНаКлиенте(НовоеЗначение)
	
	АвтоматическиДобавлятьХарактеристики = НовоеЗначение;
	Элементы.ДеревоЦенПереключательАвтоматическиДобавлятьХарактеристики.Пометка = НовоеЗначение;
	
КонецПроцедуры

// Заполняет флаги Влияет и Зависит в таблице выбранных цен
//
&НаКлиенте
Процедура ПроставитьФлагиВлияетЗависитНаКлиенте()
	
	Для Каждого Цена Из ВыбранныеЦены Цикл
		
		Цена.Зависит = Ложь;
		Цена.Влияет  = Ложь;
		
	КонецЦикла;
	
	Для Каждого Цена Из ВыбранныеЦены Цикл
		
		Если Цена.Выбрана Тогда 
			
			Для Каждого ЗависимаяЦена Из Цена.ЗависимыеЦены Цикл
				
				СтрокаЗависимойЦены         = НайтиСтрокуВидаЦен(ВыбранныеЦены, ЗависимаяЦена.Значение);
				СтрокаЗависимойЦены.Зависит = Не СтрокаЗависимойЦены.Выбрана;
				
			КонецЦикла;
			
			Для Каждого ВлияющаяЦена Из Цена.ВлияющиеЦены Цикл
				
				СтрокаВыбраннойЦены        = НайтиСтрокуВидаЦен(ВыбранныеЦены, ВлияющаяЦена.Значение);
				СтрокаВыбраннойЦены.Влияет = Не СтрокаВыбраннойЦены.Выбрана;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для расчета цен
//
// Параметры:
// ЗагрузкаСтарыхЦен - Булево - Указывает на необходимость загрузки старых значений ручных цен
// ОкруглениеРучныхЦен - Булево - Указывает на необходимость округления ручных цен
//
// Возвращаемое значение:
// Структура
// Ключи структуры:
// ЗагрузкаСтарыхЦен - Булево
// ОкруглениеРучныхЦен - Булево
// ВидыЦен - Массив
//
&НаКлиенте
Функция ПараметрыОткрытияФормыВыбораПараметровРасчета(ЗагрузкаСтарыхЦен = Ложь, ОкруглениеРучныхЦен = Ложь)
	
	РучныеВидыЦен = Новый Массив();
	
	Для Каждого СтрокаВидыЦены Из ВыбранныеЦены Цикл
		Если СтрокаВидыЦены.Выбрана
			И ((СтрокаВидыЦены.СпособЗаданияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаданияЦен.Вручную")) = (ЗагрузкаСтарыхЦен Или ОкруглениеРучныхЦен)) Тогда
			РучныеВидыЦен.Добавить(СтрокаВидыЦены.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ТолькоВыделенные = Элементы.ДеревоЦен.ВыделенныеСтроки.Количество() > 1;
	
	Возврат Новый Структура(
		"ЗагрузкаСтарыхЦен, ОкруглениеРучныхЦен, РучныеВидыЦен, ДатаДокумента, ТолькоВыделенные, ВсеВидыЦен",
		ЗагрузкаСтарыхЦен,
		ОкруглениеРучныхЦен,
		РучныеВидыЦен,
		ДатаДокумента(Объект.Дата),
		ТолькоВыделенные, ВыбранныеВидыЦен());
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьНомерВПределахДня(ДатаДокумента, Ссылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(УстановкаЦенНоменклатуры.Дата) КАК Дата
	|ИЗ
	|	Документ.УстановкаЦенНоменклатуры КАК УстановкаЦенНоменклатуры
	|ГДЕ
	|	УстановкаЦенНоменклатуры.Ссылка <> &Ссылка
	|	И УстановкаЦенНоменклатуры.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаДокумента, ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаДокумента, ДЕНЬ)");
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() И Выборка.Дата <> Null Тогда
		// Начало дня - 0 секунда. Так как как минимум один документ уже существует, то
		// нужно прибавить 1 (0 секунда соответствует номеру документа 1).
		// Так же прибавим единицу, так как нам требуется номер слудующего документа.
		Возврат Выборка.Дата - НачалоДня(ДатаДокумента) + 2;
	Иначе
		Возврат 1;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДатаДокумента(Дата)
	
	Возврат ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьДатуДокумента(ДатаДокумента, НомерВПределахДня)
	
	Возврат НачалоДня(ДатаДокумента) + НомерВПределахДня - 1;
	
КонецФункции

&НаСервере
Функция ДатаДляЗапросаЦенНоменклатуры()
	
	Возврат ДатаДокумента(Объект.Дата) - 1;
	
КонецФункции

&НаСервере
Функция ЗагрузитьТаблицуНастройкиКомпоновкиДанных()
	
	ТаблицаНастройкиКомпоновкиДанных = Новый ТаблицаЗначений;
	ТаблицаНастройкиКомпоновкиДанных.Колонки.Добавить("ВидЦены", Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаНастройкиКомпоновкиДанных.Колонки.Добавить("НастройкиКомпоновкиДанных");
	ТаблицаНастройкиКомпоновкиДанных.Колонки.Добавить("ПараметрыКомпоновкиДанных");
	// Для существующего документа - загрузить настройки схем компоновки.
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УстановкаЦенНоменклатурыВидыЦен.ВидЦены                   КАК ВидЦены,
		|	УстановкаЦенНоменклатурыВидыЦен.НастройкиКомпоновкиДанных КАК НастройкиКомпоновкиДанных
		|ИЗ
		|	Документ.УстановкаЦенНоменклатуры.ВидыЦен КАК УстановкаЦенНоменклатурыВидыЦен
		|ГДЕ
		|	УстановкаЦенНоменклатурыВидыЦен.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НастройкиКомпоновкиДанных = Выборка.НастройкиКомпоновкиДанных.Получить();
			Если НастройкиКомпоновкиДанных <> Неопределено Тогда
				НоваяСтрока = ТаблицаНастройкиКомпоновкиДанных.Добавить();
				НоваяСтрока.ВидЦены                   = Выборка.ВидЦены;
				НоваяСтрока.НастройкиКомпоновкиДанных = НастройкиКомпоновкиДанных;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаНастройкиКомпоновкиДанных;
	
КонецФункции

&НаСервере
Функция ЗаполнитьДокумент()
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	Если Объект.ВидыЦен.Количество() > 0 ИЛИ Объект.Товары.Количество() > 0 ИЛИ НЕ ИспользоватьНесколькоВидовЦен ИЛИ ВыбранныеЦены.Количество() = 1 Тогда
		
		Если ВыбранныеСтрокиТаблицыВидовЦен().Количество() > 0 Тогда
			ПостроитьДеревоЦен();
			ЗагрузитьТабличнуюЧастьТовары();
			ЗагрузитьБазовыеЦены();
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУстановкаЦен;
		Иначе
			
			Если НЕ ИспользоватьНесколькоВидовЦен Тогда
				Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
					ТекСтрока.Выбрана = Истина;
				КонецЦикла;
			КонецЕсли;

			Если ВыбранныеЦены.Количество() = 1 Тогда
				Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
					ТекСтрока.Выбрана = Истина;
				КонецЦикла;
			КонецЕсли;
			
			// Документ вводится на основании Поступления товаров и услуг.
			// Необходимо выбрать цены, расчитываемые по документу поступления и переформировать таблицу цен.
			Если ЗначениеЗаполнено(Объект.ДокументОснование)
				И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
				Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
					Если ТекСтрока.УстанавливатьЦенуПриВводеНаОсновании Тогда
						ТекСтрока.Выбрана = Истина;
						НоваяСтрока = Объект.ВидыЦен.Добавить();
						НоваяСтрока.ВидЦены = ТекСтрока.Ссылка;
					КонецЕсли;
				КонецЦикла;
				
				ВыбратьВсеЗависимыеЦены();
				ВыбранныеЦеныИзменены = Ложь;
				
				ВидыЗагружаемыхСтарыхЦен = Новый Массив();
				Для Каждого ТекСтрока Из ВыбранныеЦены Цикл
					Если ТекСтрока.Выбрана И (ТекСтрока.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную) Тогда
						ВидыЗагружаемыхСтарыхЦен.Добавить(ТекСтрока);
					КонецЕсли;
				КонецЦикла;
				
				ПостроитьДеревоЦен();
				ЗагрузитьТабличнуюЧастьТовары();
				
				ПоместитьВидыЦенВТабличнуюЧасть(Объект);
				ПоместитьЦеныВТабличнуюЧасть(Объект, Ложь);
				ОбновитьСтарыеЦеныНоменклатуры();
				
				ТаблицаНоменклатуры = СоздатьТаблицуНоменклатурыПоДеревуЦен();
				ЗагрузитьЗначенияБазовыхЦен(ТаблицаНоменклатуры, ВидыЗагружаемыхСтарыхЦен,, 0, Истина);
				
				Если ЗаполненыОбязательныеПараметрыСхемКомпоновкиДанныхНаСервере(Ложь) Тогда
					
					ВычислитьЦеныПоДаннымИБ(ТаблицаНоменклатуры);
					
					Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
						ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ПодготовитьДанныеДляРасчетаВычисляемыхЦен(ТаблицаНоменклатуры);
					Иначе
						РассчитатьВычисляемыеЦены(ТаблицаНоменклатуры);
					КонецЕсли;
					
					Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаУстановкаЦен;
				
				Иначе
					ПроверитьЗаполнениеПараметровПриОткрытии = Истина;
				КонецЕсли;
				
			Иначе
				
				ПостроитьДеревоЦен();
				ЗагрузитьТабличнуюЧастьТовары();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

&НаСервере
Процедура УстановитьСостояние()
	
	Если Объект.Проведен И Объект.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.Согласован Тогда
		Состояние = Перечисления.СостоянияУстановокЦенНоменклатуры.Действует;
	ИначеЕсли Объект.Проведен И Объект.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован Тогда
		Состояние = Перечисления.СостоянияУстановокЦенНоменклатуры.ОжидаетсяСогласование;
	Иначе
		Состояние = Перечисления.СостоянияУстановокЦенНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Просрочен = Объект.Статус = Перечисления.СтатусыУстановокЦенНоменклатуры.НеСогласован И НачалоДня(Объект.Дата) < НачалоДня(ТекущаяДата());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИменаРазрешенныхПараметров()
	
	РазрешенныеИмена = Новый Массив;
	РазрешенныеИмена.Добавить("ДатаДокумента");
	РазрешенныеИмена.Добавить("ЭтоВводНаОсновании");
	РазрешенныеИмена.Добавить("ВидЦены");
	РазрешенныеИмена.Добавить("Основание");
	
	Возврат РазрешенныеИмена;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеПараметров(ВидЦены, НастройкиКомпоновкиДанных, ПараметрыСхемКомпоновкиДанныхВидовЦен)
	
	РазрешенныеИмена = ИменаРазрешенныхПараметров();
	
	Для Каждого Элемент Из НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы Цикл
		НайденныеСтроки = ПараметрыСхемКомпоновкиДанныхВидовЦен.НайтиСтроки(Новый Структура("Имя, ВидЦены", Строка(Элемент.Параметр), ВидЦены));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.Значение      = Элемент.Значение;
			НайденнаяСтрока.Использование = Элемент.Использование;
		КонецЦикла;
	КонецЦикла;
	
	ОписаниеПараметров = "";
	Для Каждого Параметр Из ПараметрыСхемКомпоновкиДанныхВидовЦен.НайтиСтроки(Новый Структура("ВидЦены", ВидЦены)) Цикл
		
		ЗначениеПараметра = Неопределено;
		Если Параметр.Использование Тогда
			Если Параметр.ДоступныеЗначения = Неопределено Тогда
				ЗначениеПараметра = Параметр.Значение;
			Иначе
				ДоступноеЗначение = Параметр.ДоступныеЗначения.НайтиПоЗначению(Параметр.Значение);
				Если ДоступноеЗначение <> Неопределено Тогда
					ЗначениеПараметра = ?(ЗначениеЗаполнено(ДоступноеЗначение.Представление), ДоступноеЗначение.Представление, Параметр.Значение);
				Иначе
					ЗначениеПараметра = Параметр.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОписаниеПараметров = ?(ЗначениеЗаполнено(ОписаниеПараметров), ОписаниеПараметров, НСтр("ru = 'Параметры:'") + " ") + ?(Не ЗначениеЗаполнено(ОписаниеПараметров),"",", ") + Параметр.Заголовок + " = " + ?(ЗначениеЗаполнено(ЗначениеПараметра), Строка(ЗначениеПараметра),"<не заполнен>");
	КонецЦикла;
	
	ОписаниеПараметров = ОписаниеПараметров + ?(ЗначениеЗаполнено(Строка(НастройкиКомпоновкиДанных.Отбор))," " + НСтр("ru = 'Отбор:'") + " " + Строка(НастройкиКомпоновкиДанных.Отбор),"");
	
	Возврат Новый Структура("ОписаниеПараметров", ОписаниеПараметров);
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьНастройкиКомпоновкиДанныхДляВидаЦены(ВидЦены, АдресНастроекВоВременномХранилище, АдресХранилищаНастройкиКомпоновкиДанных, АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен)
	
	НастройкиКомпоновкиДанных        = ПолучитьИзВременногоХранилища(АдресНастроекВоВременномХранилище);
	ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновкиДанных);
	
	НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(ВидЦены, "ВидЦены");
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Добавить();
		НайденнаяСтрока.ВидЦены = ВидЦены;
	КонецЕсли;
	НайденнаяСтрока.НастройкиКомпоновкиДанных = НастройкиКомпоновкиДанных;
	
	ПоместитьВоВременноеХранилище(ТаблицаНастройкиКомпоновкиДанных, АдресХранилищаНастройкиКомпоновкиДанных);
	
	ПараметрыСхемКомпоновкиДанныхВидовЦен = ПолучитьИзВременногоХранилища(АдресХранилищаПараметровСхемКомпоновкиПоВидамЦен);
	Возврат ОписаниеПараметров(ВидЦены, НастройкиКомпоновкиДанных, ПараметрыСхемКомпоновкиДанныхВидовЦен);
	
КонецФункции

&НаСервере
Функция НастройкиСхемыКомпоновкиДанныхПоУмолчанию(ВидЦены, АдресСхемыКомпоновкиДанных)
	
	НастройкиКомпоновкиДанных = ВидЦены.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	Если Не ЗначениеЗаполнено(НастройкиКомпоновкиДанных) Тогда
		
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		УстановитьПривилегированныйРежим(Истина);
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
		УстановитьПривилегированныйРежим(Ложь);
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
		
		Возврат ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки(), УникальныйИдентификатор);
		
	Иначе
		Возврат ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция АдресНастроекКомпоновкиДанныхДляВидаЦены(ВидЦены, АдресХранилищаНастройкиКомпоновкиДанных, УникальныйИдентификатор)
	
	ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновкиДанных);
	
	НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(ВидЦены, "ВидЦены");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПоместитьВоВременноеХранилище(НайденнаяСтрока.НастройкиКомпоновкиДанных, УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОНевозможностиВыбора()
	ОчиститьСообщения();
	ТекущиеДанные = Элементы.ВыбранныеЦены.ТекущиеДанные;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет прав на установку цен по данному виду цены'"), Объект.Ссылка, "ВыбранныеЦены[" + ВыбранныеЦены.Индекс(ТекущиеДанные) + "].Ссылка");
КонецПроцедуры

&НаСервере
// Возвращает имена и типы полей, которые должны обязательно присутствовать
// в СКД, используемой для заполнения цен по данным ИБ
//
// Возвращаемое значение:
// Соответствие
// В ключах содержатся имена полей, в значениях - типы полей
//
Функция ПолучитьОбязательныеПоляСхемыКомпоновкиДанных() Экспорт
	
	Поля = Новый Соответствие();
	
	Поля.Вставить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Поля.Вставить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Возврат Поля;
	
КонецФункции // ПолучитьОбязательныеПоляСхемыКомпоновкиДанных()

&НаСервере
Функция ДобавитьТоварыПоОтборамСКД()
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаНастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресХранилищаНастройкиКомпоновкиДанных);

	Для Каждого СтрокаВидЦены Из ВыбранныеСтрокиТаблицыВидовЦен() Цикл
	
		// Копирование схемы компоновки данных
		Схема = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресСхемыКомпоновкиДанных));
		СхемаКомпоновкиДанных = Схема.Получить();
	
		НайденнаяСтрока = ТаблицаНастройкиКомпоновкиДанных.Найти(СтрокаВидЦены.Ссылка);
		Если НайденнаяСтрока <> Неопределено Тогда
			НастройкиКомпоновкиДанных = НайденнаяСтрока.НастройкиКомпоновкиДанных;
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных) Тогда
				НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(СтрокаВидЦены.АдресНастроекСхемыКомпоновкиДанных);
			Иначе
				НастройкиКомпоновкиДанных = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Ценообразование.ПроверитьСхемуКомпоновкиДанныхПоОбязательнымПолям(СхемаКомпоновкиДанных, ПолучитьОбязательныеПоляСхемыКомпоновкиДанных(), СтрЗаменить(НСтр("ru='Вид цены ""%ВидЦены%""'"), "%ВидЦены%", СтрокаВидЦены.Ссылка)) Тогда
			
			// Подготовка компоновщика макета компоновки данных, загрузка настроек
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
			
			Если НастройкиКомпоновкиДанных <> Неопределено Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
				КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			Иначе
				КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			КонецЕсли;
			
			// Заполнение структуры отчета и выбранных полей.
			КомпоновщикНастроек.Настройки.Структура.Очистить();
			
			ГруппировкаДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ГруппировкаДетальныеЗаписи.Использование = Истина;
			
			КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();
			ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Номенклатура");
			ДобавитьВыбранноеПолеСКД(ГруппировкаДетальныеЗаписи, "Характеристика");
			
			// Компоновка макета и исполнение запроса.
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
			
			Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Основание");
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = Объект.ДокументОснование;
			КонецЕсли;
			Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ДатаДокумента");
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ДатаДляЗапросаЦенНоменклатуры();
			КонецЕсли;
			Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ВидЦены");
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = СтрокаВидЦены.Ссылка;
			КонецЕсли;
			Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ЭтоВводНаОсновании");
			Если Параметр <> Неопределено Тогда
				Параметр.Значение = ЗначениеЗаполнено(Объект.ДокументОснование);
			КонецЕсли;
		
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;

			ДанныеОтчета = Новый ТаблицаЗначений();
			ПроцессорВывода.УстановитьОбъект(ДанныеОтчета);
			ДанныеОтчета = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			
			ДанныеДляРасчетаВычисляемыхЦенНаКлиенте.Добавить(ДобавитьТоварыПоОтборуНаСервере(Неопределено, ДанныеОтчета));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте;
	
КонецФункции

&НаСервере
Процедура СортироватьНаСервере(Режим = "ПоНаименованиюНоменклатуры")
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоместитьЦеныВТабличнуюЧасть(Объект, Ложь);
	Таблица = Объект.Товары.Выгрузить();
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(Таблица, "Индекс");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Индекс КАК Индекс,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК ВременнаяТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.Индекс
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|");
	
	Если Режим = "ПоНаименованиюНоменклатурыИерархияВидовНоменклатуры" Тогда
		Запрос.Текст = Запрос.Текст +
		"УПОРЯДОЧИТЬ ПО
		|	ВременнаяТаблицаТовары.Номенклатура.Наименование,
		|	ВременнаяТаблицаТовары.Характеристика.Наименование
		|ИТОГИ ПО
		|	Номенклатура.ВидНоменклатуры ИЕРАРХИЯ,
		|	Характеристика";
	ИначеЕсли Режим = "ПоНаименованиюНоменклатурыИерархияГрупп" Тогда
		Запрос.Текст = Запрос.Текст +
		"УПОРЯДОЧИТЬ ПО
		|	ВременнаяТаблицаТовары.Номенклатура.Наименование,
		|	ВременнаяТаблицаТовары.Характеристика.Наименование
		|ИТОГИ ПО
		|	Номенклатура ИЕРАРХИЯ,
		|	Характеристика";
	Иначе
		Запрос.Текст = Запрос.Текст +
		"УПОРЯДОЧИТЬ ПО
		|	ВременнаяТаблицаТовары.Номенклатура.Наименование,
		|	ВременнаяТаблицаТовары.Характеристика.Наименование";
	КонецЕсли;
	
	ТаблицаТоваров = Объект.Товары.Выгрузить();
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТоваров, "Индекс");
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
	Запрос.УстановитьПараметр("Дата",   ДатаДляЗапросаЦенНоменклатуры());
	
	Индекс = 1;
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТЧ ИЗ РезультатЗапроса Цикл
		Если Не СтрокаТЧ.Индекс = Null Тогда
			СтрокаДерева = НайтиСтрокуДереваЦен(СтрокаТЧ);
			СтрокаДерева.РеквизитСортировки = Индекс;
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	ДеревоЦенЗначение = РеквизитФормыВЗначение("ДеревоЦен");
	ДеревоЦенЗначение.Строки.Сортировать("РеквизитСортировки Возр", Истина);
	ЗначениеВРеквизитФормы(ДеревоЦенЗначение, "ДеревоЦен");
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКоличествоСтрокДереваЦен()
	
	ЭлементыНоменклатура = ДеревоЦен.ПолучитьЭлементы();
	Количество = ЭлементыНоменклатура.Количество();
	
	Для Каждого ТекЭлементНоменклатура Из ЭлементыНоменклатура Цикл
		
		ЭлементыХарактеристики = ТекЭлементНоменклатура.ПолучитьЭлементы();
		КоличествоХарактеристик = ЭлементыХарактеристики.Количество();
		Количество = Количество + КоличествоХарактеристик;
		
	КонецЦикла;

	Возврат Количество

КонецФункции // ()
 
////////////////////////////////////////////////////////////////////////////////
// РАБОТА С EXCEL

&НаСервере
Функция СоздатьПрисоединенныйФайлXLS97УстановкиЦенНоменклатуры(ПараметрыПечати)
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(Объект.Ссылка);
	
	ОбъектыПечати = Новый СписокЗначений;
	ОбъектыПечати.Добавить(Объект.Ссылка);
	
	ТабличныйДокумент = Документы.УстановкаЦенНоменклатуры.СформироватьПечатнуюФормуУстановкиЦенНоменклатуры(МассивДокументов, ОбъектыПечати, ПараметрыПечати);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLS97);
	
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), УникальныйИдентификатор);
	
	Файл = ПрисоединенныеФайлы.ДобавитьФайл(Объект.Ссылка, "Excel" + " " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ЧЧ.мм.сс'"), "xls", ТекущаяДата(), ТекущаяДата(), АдресФайлаВоВременномХранилище, Неопределено);
	Если Файл <> Неопределено Тогда
		ПрисоединенныеФайлыСлужебный.ЗанятьФайлДляРедактированияСервер(Файл);
		ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(Файл, УникальныйИдентификатор, Истина);
		Возврат Новый Структура("ДанныеФайла, Файл", ДанныеФайла, Файл);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьПрисоединенныйФайл(Файл, ИнформацияОФайле)
	ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(Файл, ИнформацияОФайле);
КонецПроцедуры

&НаКлиенте
Функция ВыгрузитьВExcelНаКлиенте(ПараметрыПечати)
	
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось выгрузить цены в Excel. Убедитесь, что на компьютере установлена программа Microsoft Excel. Подробности: '")
		                  + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	ВыводитьКоды = ?(ЗначениеЗаполнено(ИмяДополнительнойКолонки), Истина, Ложь);
	
	Информация = СоздатьПрисоединенныйФайлXLS97УстановкиЦенНоменклатуры(ПараметрыПечати);
	Если Информация = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Не удалось выгрузить цены в Excel.'");
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	ИмяВременногоФайла         = РабочийКаталогПользователя + Информация.ДанныеФайла.ОтносительныйПуть + Информация.ДанныеФайла.ИмяФайла;
	
	ПрисоединенныеФайлыКлиент.ПолучитьФайлВРабочийКаталог(Информация.ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
	                                                      Информация.ДанныеФайла.ОтносительныйПуть,
	                                                      Информация.ДанныеФайла.ДатаМодификацииУниверсальная,
	                                                      Информация.ДанныеФайла.ИмяФайла,
	                                                      РабочийКаталогПользователя,
	                                                      ИмяВременногоФайла
	);
	
	Попытка
		
		НомерКолонки = 5 + ?(ВыводитьКоды,1,0);
		НомерСтроки  = 1;
		
		Workbook = COMОбъект.Workbooks.Open(ИмяВременногоФайла);
		Sheet = Workbook.Worksheets(1);
		
		// Установка автофильтра на колонки цен
		Sheet.Range(Sheet.Cells(2, 1), Sheet.Cells(2, 256)).AutoFilter();
		
		// Скрытие колонок с идентификаторами номенклатуры и характеристик
		Sheet.Columns(2 + ?(ВыводитьКоды,1,0)).Hidden = Истина;
		Sheet.Columns(3 + ?(ВыводитьКоды,1,0)).Hidden = Истина;
		
		// Создание служебной таблицы для обратной загрузки
		SettingsSheet = Workbook.Worksheets.Add();
		SettingsSheet.Cells(НомерСтроки, 1).Value = НСтр("ru='Уникальный идентификатор'");
		SettingsSheet.Cells(НомерСтроки, 2).Value = НСтр("ru='Вид цены'");
		SettingsSheet.Cells(НомерСтроки, 3).Value = НСтр("ru='Номер колонки ""Старая цена""'");
		SettingsSheet.Cells(НомерСтроки, 4).Value = НСтр("ru='Номер колонки ""Процент изменения""'");
		SettingsSheet.Cells(НомерСтроки, 5).Value = НСтр("ru='Номер колонки ""Цена""'");
		SettingsSheet.Cells(НомерСтроки, 6).Value = НСтр("ru='Номер колонки ""Единица измерения""'");
		SettingsSheet.Cells(НомерСтроки, 7).Value = НСтр("ru='Номер колонки ""Уникальный идентификатор""'");
		
		НомерСтроки = НомерСтроки + 1;
		ДеревоНастроек = ПолучитьИзВременногоХранилища(ПараметрыПечати.ДеревоНастроекДляКлиента);
		Для Каждого ВидЦены Из ДеревоНастроек.Строки Цикл
			Если ВидЦены.ВыводитьНаПечать Тогда
				
				ВыводитьСтаруюЦену = Ложь;
				ВыводитьПроцентИзменения = Ложь;
				Для Каждого Колонка Из ВидЦены.Строки Цикл
					Если Колонка.Параметр = "СтараяЦена" И Колонка.ВыводитьНаПечать Тогда
						ВыводитьСтаруюЦену = Истина;
					КонецЕсли;
					Если Колонка.Параметр = "ПроцентИзменения" И Колонка.ВыводитьНаПечать Тогда
						ВыводитьПроцентИзменения = Истина;
					КонецЕсли;
				КонецЦикла;
				
				SettingsSheet.Cells(НомерСтроки, 1).Value = Строка(ВидЦены.Параметр.УникальныйИдентификатор());
				SettingsSheet.Cells(НомерСтроки, 2).Value = Строка(ВидЦены.Параметр); // Наименование вида цены
				
				Если ВыводитьСтаруюЦену Тогда
					SettingsSheet.Cells(НомерСтроки, 3).Value = НомерКолонки; // Старая цена
					НомерКолонки = НомерКолонки + 1;
				Иначе
					SettingsSheet.Cells(НомерСтроки, 3).Value = 0;
				КонецЕсли;
				
				Если ВыводитьПроцентИзменения Тогда
					SettingsSheet.Cells(НомерСтроки, 4).Value = НомерКолонки; // Процент изменения
					НомерКолонки = НомерКолонки + 1;
				Иначе
					SettingsSheet.Cells(НомерСтроки, 4).Value = 0;
				КонецЕсли;
				
				SettingsSheet.Cells(НомерСтроки, 5).Value = НомерКолонки; // Цена
				НомерКолонки = НомерКолонки + 1;
				
				SettingsSheet.Cells(НомерСтроки, 6).Value = НомерКолонки; // Единица измерения
				НомерКолонки = НомерКолонки + 1;
				
				Sheet.Columns(НомерКолонки).Hidden = Истина;
				SettingsSheet.Cells(НомерСтроки, 7).Value = НомерКолонки; // Уникальный идентификатор упаковки
				НомерКолонки = НомерКолонки + 1;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЕсли;
		КонецЦикла;
		
		ВидыЦен = Новый Массив;
		
		// Загрузка служебной таблицы
		НомерСтроки = 2;
		Пока ЗначениеЗаполнено(SettingsSheet.Cells(НомерСтроки, 1).Value) Цикл
			
			НоваяСтрока = Новый Структура("НомерКолонкиСтараяЦена, НомерКолонкиПроцентИзменения, НомерКолонкиЦена");
			НоваяСтрока.НомерКолонкиСтараяЦена       = SettingsSheet.Cells(НомерСтроки, 3).Value;
			НоваяСтрока.НомерКолонкиПроцентИзменения = SettingsSheet.Cells(НомерСтроки, 4).Value;
			НоваяСтрока.НомерКолонкиЦена             = SettingsSheet.Cells(НомерСтроки, 5).Value;
			ВидыЦен.Добавить(НоваяСтрока);
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		Если ВидыЦен.Количество() > 0 Тогда
			
			НомерСтроки = 3;
			Пока ЗначениеЗаполнено(Sheet.Cells(НомерСтроки, 3).Value) Цикл
				
				Для Каждого СтрокаТЧ Из ВидыЦен Цикл
					
					Если СтрокаТЧ.НомерКолонкиСтараяЦена <> 0
						И СтрокаТЧ.НомерКолонкиПроцентИзменения <> 0
						И СтрокаТЧ.НомерКолонкиЦена <> 0 Тогда
						
						Формула = "=IF(RC[СтараяЦен]<>0,ROUND((RC[НомерКолонкиЦена]-RC[СтараяЦен])/RC[СтараяЦен]*100,2),0)";
						Формула = СтрЗаменить(Формула,"[СтараяЦен]",       СтрокаТЧ.НомерКолонкиСтараяЦена);
						Формула = СтрЗаменить(Формула,"[НомерКолонкиЦена]",СтрокаТЧ.НомерКолонкиЦена);
						
						Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиПроцентИзменения).Formula = Формула;
						Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиПроцентИзменения).NumberFormat = "0,00;[Красный]-0,00";
						
						
					КонецЕсли;
					
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Установка защиты на ячейки
		Sheet.Protection.AllowEditRanges.Add(
			НСтр("ru = 'Цены номенклатуры'"),                                           // Title
			Sheet.Range(Sheet.Cells(3, 1), Sheet.Cells(НомерСтроки-1, НомерКолонки-1)), // Range
			                                                                            // Password
		);
		
		Sheet.Protect(,//Password
				Ложь,  //DrawingObjects
				Истина,//Contents
				Истина,//Scenarios
				Ложь,  //UserInterfaceOnly
				Истина,//AllowFormattingCells
				Истина,//AllowFormattingColumns
				Истина,//AllowFormattingRows
				Ложь,  //AllowInsertingColumns
				Ложь,  //AllowInsertingRows
				Истина,//AllowInsertingHyperlinks
				Ложь,  //AllowDeletingColumns
				Ложь,  //AllowDeletingRows
				Истина,//AllowSorting
				Истина,//AllowFiltering
				Истина //AllowUsingPivotTables
		);
		
		SettingsSheet.Visible = Ложь;
		Workbook.Save();
		Workbook.Close();
		
		COMОбъект.Quit();
		COMОбъект = 0;
		
		ИнформацияОФайле = Неопределено;
		Если ПрисоединенныеФайлыКлиент.ПоместитьФайлНаДискеВХранилище(Информация.ДанныеФайла, ИнформацияОФайле, ИмяВременногоФайла, УникальныйИдентификатор) Тогда
			ОбновитьПрисоединенныйФайл(
				Информация.Файл, ИнформацияОФайле
			);
		КонецЕсли;
		
		Возврат Информация.Файл;
		
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось записать данные в файл. Подробности: '")
		                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ЗагрузитьИзExcelНаСервере(МассивСтруктурВидыЦен, МассивСтруктурТовары)
	
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
	// Определение видов цен
	ВидыЦен = Новый ТаблицаЗначений;
	ВидыЦен.Колонки.Добавить("ВидЦены");
	ВидыЦен.Колонки.Добавить("ИдентификаторВидЦены");
	ВидыЦен.Колонки.Добавить("ИмяКолонки");
	ВидыЦен.Колонки.Добавить("НомерКолонкиЦена");
	ВидыЦен.Колонки.Добавить("НомерКолонкиУпаковка");
	
	Для Каждого СтруктураВидЦены Из МассивСтруктурВидыЦен Цикл
		
		//ВидЦены = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураВидЦены.ИдентификаторВидЦены));
		ВидЦены=Справочники.ВидыЦен.НайтиПоНаименованию("Прайс");

		Если Не ЗначениеЗаполнено(ВидЦены) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВидЦены = НайтиСтрокуВидаЦен(ВыбранныеЦены, ВидЦены);
		Если СтрокаВидЦены.Выбрана Тогда
			
			НоваяСтрока = ВидыЦен.Добавить();
			НоваяСтрока.ВидЦены              = ВидЦены;
			НоваяСтрока.ИдентификаторВидЦены = СтруктураВидЦены.ИдентификаторВидЦены;
			НоваяСтрока.НомерКолонкиЦена     = СтруктураВидЦены.НомерКолонкиЦена;
			НоваяСтрока.НомерКолонкиУпаковка = СтруктураВидЦены.НомерКолонкиУпаковка;
			НоваяСтрока.ИмяКолонки           = СтрокаВидЦены.ИмяКолонки;
			
		КонецЕсли;
		
	КонецЦикла;
	ВидыЦен.Индексы.Добавить("ИдентификаторВидЦены");
	
	Если ВидыЦен.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	// Загрузка цен в ДеревоЦен
	Для Каждого СтруктураТовар Из МассивСтруктурТовары Цикл
		//СтрокаВидЦены = ВидыЦен.Найти(СтруктураТовар.ИдентификаторВидЦены);
		СтрокаВидЦены = ВидыЦен.Найти("Прайс");
		//Если СтрокаВидЦены = Неопределено Тогда
		//	Продолжить;
		//КонецЕсли;
		//СтрокаВидЦены	= Справочники.ВидыЦен.НайтиПоНаименованию("Прайс");
		//Номенклатура   = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторНоменклатура));
		//Характеристика = Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторХарактеристика));
		//Упаковка       = Справочники.УпаковкиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураТовар.ИдентификаторУпаковка));
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Артикул = &Артикул";
		Запрос.УстановитьПараметр("Артикул",СтруктураТовар.ИдентификаторНоменклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		НужноСоздатьНоменклатуру = (Выборка.Количество()=0);
		Пока Выборка.Следующий() ИЛИ НужноСоздатьНоменклатуру Цикл
			//блок создает номенклатуру
			Если НужноСоздатьНоменклатуру Тогда
				Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			Иначе
				Номенклатура = Выборка.Ссылка;
			КонецЕсли;
			
			
			НужноСоздатьНоменклатуру = Ложь;
			//Упаковка	= Справочники.УпаковкиНоменклатуры.ПустаяСсылка() ;
			Если Не ЗначениеЗаполнено(Номенклатура) Тогда
				Номенклатура = СоздатьНоменклатуру(СтруктураТовар);
			КонецЕсли;
			Если СтруктураТовар.ЭтоАдминистративнаяМебель Тогда
				Характеристика=ПолучитьХаракетеристикуАдмин(Номенклатура);
			Иначе
				Характеристика=ПустаяХарактеристика;
			КонецЕсли;
			
			СтрокаДереваЦен = НайтиСтрокуДереваЦен(Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика));
			Если СтрокаДереваЦен = Неопределено Тогда
				
				СтрокаДереваЦен = НайтиСтрокуДереваЦен(Новый Структура("Номенклатура, Характеристика", Номенклатура, ПустаяХарактеристика));
				Если СтрокаДереваЦен = Неопределено Тогда
					
					СтрокаДереваЦен = ДеревоЦен.ПолучитьЭлементы().Добавить();
					СтрокаДереваЦен.Номенклатура = Номенклатура;
					
					НоваяСтрока = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
					НоваяСтрока.Номенклатура = Номенклатура;
					НоваяСтрока.СтрокаДереваЦен = СтрокаДереваЦен;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Характеристика) Тогда
					
					СтрокаДереваЦен = СтрокаДереваЦен.ПолучитьЭлементы().Добавить();
					СтрокаДереваЦен.Номенклатура   = Номенклатура;
					СтрокаДереваЦен.Характеристика = Характеристика;
					
					НоваяСтрока = ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров.Добавить();
					НоваяСтрока.Номенклатура    = Номенклатура;
					НоваяСтрока.Характеристика  = Характеристика;
					НоваяСтрока.СтрокаДереваЦен = СтрокаДереваЦен;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаДереваЦен[СтрокаВидЦены.ИмяКолонки] = СтруктураТовар.Цена;
			СтрокаДереваЦен["ЕдиницаИзмерения"]        = Номенклатура.ЕдиницаИзмерения;//АК++
			
			//Если ИспользоватьУпаковкиНоменклатуры Тогда
			//	СтрокаДереваЦен["Упаковка"+СтрокаВидЦены.ИмяКолонки] = Упаковка;
			//КонецЕсли;
			СтрокаДереваЦен["ИзмененаВручную"+СтрокаВидЦены.ИмяКолонки] = Истина;
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьСтарыеЦеныНоменклатуры();
	
	// Список видов цен, которые, которые зависят от изменяемых
	ЗависимыеЦены = Новый Массив;
	Для Каждого СтрокаТЧ Из ВидыЦен Цикл
		МассивСтрокЗависимыхЦен = ЗависимыеОтВидаЦеныВидыЦен(НайтиСтрокуВидаЦен(ВыбранныеЦены, СтрокаТЧ.ВидЦены));
		Для Каждого СтрокаВидЦены Из МассивСтрокЗависимыхЦен Цикл
			Если ЗависимыеЦены.Найти(СтрокаВидЦены) = Неопределено
				И ВидыЦен.Найти(СтрокаВидЦены.Ссылка) = Неопределено Тогда
				ЗависимыеЦены.Добавить(СтрокаВидЦены);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Автоматически рассчитывать нужно только те цены, по которым процент изменения которых
	// не изменяется и которые зависят от изменяемых
	ВидыЦенДляРасчета = Новый Массив;
	ВыбранныеСтрокиВидовЦен = ВыбранныеСтрокиТаблицыВидовЦен();
	Для Каждого ВидЦены Из ВыбранныеСтрокиВидовЦен Цикл
		Если ЗависимыеЦены.Найти(ВидЦены) <> Неопределено Тогда
			ВидыЦенДляРасчета.Добавить(ВидЦены);
		КонецЕсли;
	КонецЦикла;
	
	Если РассчитыватьАвтоматически Тогда
		РассчитатьВычисляемыеЦены(ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров, ВидыЦенДляРасчета, Ложь);
	Иначе
		УстановитьПризнакРучногоИзмененияДляВидовЦен(ТаблицаСоответствияНоменклатурыСтрокамДереваТоваров, ВидыЦенДляРасчета);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеФайла(ПрисоединенныйФайл,УникальныйИдентификатор)
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл,УникальныйИдентификатор, Истина);
	Возврат ДанныеФайла;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьИзExcelНаКлиенте(ПрисоединенныйФайл)
	
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось загрузить цены из файла Excel. Убедитесь, что на сервере установлена программа Microsoft Excel. Подробности: '")
		                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	ДанныеФайла                = ПолучитьДанныеФайла(ПрисоединенныйФайл,УникальныйИдентификатор);
	РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	ИмяВременногоФайла         = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
	Если Не ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
		
		ПрисоединенныеФайлыКлиент.ПолучитьФайлВРабочийКаталог(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
		                                                      ДанныеФайла.ОтносительныйПуть,
		                                                      ДанныеФайла.ДатаМодификацииУниверсальная,
		                                                      ДанныеФайла.ИмяФайла,
		                                                      РабочийКаталогПользователя,
		                                                      ИмяВременногоФайла
		);
		
	КонецЕсли;
	
	Попытка
		Workbook      = COMОбъект.Workbooks.Open(ИмяВременногоФайла);
		//SettingsSheet = Workbook.Worksheets(1);
		//Sheet         = Workbook.Worksheets(2);
		Sheet         = Workbook.Worksheets(1);
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось прочитать данные из файла. Подробности: '")
		                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	// Массивы структур
	МассивСтруктурВидыЦен = Новый Массив;
	МассивСтруктурТовары  = Новый Массив;
	
	ЕстьДополнительнаяКолонка = Ложь;
	
	// Загрузка данных
	Попытка
		
		// Загрузка служебной таблицы
		//НомерСтроки = 2;
		//Пока ЗначениеЗаполнено(SettingsSheet.Cells(НомерСтроки, 1).Value) Цикл
		//	
			НоваяСтрока = Новый Структура("ИдентификаторВидЦены, НомерКолонкиЦена, НомерКолонкиУпаковка");
			НоваяСтрока.ИдентификаторВидЦены = "Прайс";//SettingsSheet.Cells(НомерСтроки, 1).Value;
			НоваяСтрока.НомерКолонкиЦена     = 5;//SettingsSheet.Cells(НомерСтроки, 5).Value;
			НоваяСтрока.НомерКолонкиУпаковка = 4;//SettingsSheet.Cells(НомерСтроки, 7).Value;
			МассивСтруктурВидыЦен.Добавить(НоваяСтрока);
			
			//НомерСтроки = НомерСтроки + 1;
		//КонецЦикла;
		
		Если МассивСтруктурВидыЦен.Количество() > 0 Тогда
			
			// Загрузка цен номенклатуры
			НомерСтроки = 7;
			КешТекущийУровень = 0;
			КешГруппа = "";
			Пока (СокрЛП(Sheet.Cells(НомерСтроки, 1).Value)<>"999")  Цикл
				ТекущийУровень = Sheet.Rows(НомерСтроки).OutlineLevel;
				Если ТекущийУровень <> КешТекущийУровень Тогда
					КешТекущийУровень = ТекущийУровень;
					КешГруппа = ПолучитьГруппу(Sheet,НомерСтроки,ТекущийУровень);
				КонецЕсли;
				
				Если СокрЛП(Sheet.Cells(НомерСтроки, 4).Value)="" Тогда
									НомерСтроки = НомерСтроки + 1;

					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаТЧ Из МассивСтруктурВидыЦен Цикл
					НоваяСтрока = Новый Структура("ИдентификаторНоменклатура, 
					                              |ИдентификаторХарактеристика, 
												  |ИдентификаторУпаковка, 
												  |ИдентификаторВидЦены, 
												  |Цена,
												  |Группа,
												  |Размер,
												  |Наименование,
												  |ЭтоАдминистративнаяМебель");
												  
					//НоваяСтрока = Новый Структура("ИдентификаторНоменклатура, ИдентификаторХарактеристика, ИдентификаторУпаковка, ИдентификаторВидЦены, Цена");
					//НоваяСтрока.ИдентификаторНоменклатура   = Sheet.Cells(НомерСтроки, 2 + ?(ЕстьДополнительнаяКолонка,1,0)).Value;
					//НоваяСтрока.ИдентификаторХарактеристика = Sheet.Cells(НомерСтроки, 3 + ?(ЕстьДополнительнаяКолонка,1,0)).Value;
					//НоваяСтрока.ИдентификаторУпаковка       = Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиУпаковка).Value;
					//НоваяСтрока.ИдентификаторВидЦены        = СтрокаТЧ.ИдентификаторВидЦены;
					//НоваяСтрока.Цена                        = Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиЦена).Value;
					
					НоваяСтрока.ИдентификаторНоменклатура   = Sheet.Cells(НомерСтроки, 4).Value;
					НоваяСтрока.ИдентификаторВидЦены        = СтрокаТЧ.ИдентификаторВидЦены;
					НоваяСтрока.Цена                        =  Sheet.Cells(НомерСтроки, 5).Value;//Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиЦена).Value;
					НоваяСтрока.Цена=СТрЗаменить(СокрЛП(НоваяСтрока.Цена)," ","");
					НоваяСтрока.Группа = КешГруппа;
					Если КешГруппа = "АДМИНИСТРАТИВНАЯ МЕБЕЛЬ" Тогда
						НоваяСтрока.ЭтоАдминистративнаяМебель  = Истина;
					Иначе
						НоваяСтрока.ЭтоАдминистративнаяМебель  = Ложь;
					КонецЕсли;
					//могут быть объединенные
					НоваяСтрока.Размер = ПолучитьЗначениеОбъедененнойЯчеки(Sheet,НомерСтроки, 3);
					НоваяСтрока.Наименование = ПолучитьЗначениеОбъедененнойЯчеки(Sheet,НомерСтроки, 2);
					
					МассивСтруктурТовары.Добавить(НоваяСтрока);
					
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Workbook.Close();
		
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось прочитать данные из файла. Подробности: '")
		                    + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	COMОбъект.Quit();
	COMОбъект = 0;
	
	ЗагрузитьИзExcelНаСервере(МассивСтруктурВидыЦен, МассивСтруктурТовары);
	
КонецФункции

&НаСервере
Процедура ПоместитьСтрокуВТабличнуюЧасть(ПомещаемыеТовары, СтрокаЦен)
	
	НоваяСтрока                = ПомещаемыеТовары.Добавить();
	НоваяСтрока.Номенклатура   = СтрокаЦен.Номенклатура;
	НоваяСтрока.Характеристика = СтрокаЦен.Характеристика;
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		ИмяКолонки = "Упаковка" + ИмяКолонки;
		Если СтрокаЦен.Свойство(ИмяКолонки) Тогда
			НоваяСтрока.Упаковка = СтрокаЦен[ИмяКолонки];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Контроль несогласованных изменений

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении[Элемент.Имя]+"(Элемент)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие[Элемент.Имя]+"(Элемент)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.Команды[Команда.Имя]+"(Команда)");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения[Элемент.Имя]+"(Элемент, Отказ)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением[Имя]+"(Элемент, Отказ)");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления[Имя]+"(Элемент, Отказ, Копирование, Родитель, Группа)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с буфером обмена 

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	КопируемыеТовары = Новый ТаблицаЗначений;
	КопируемыеТовары.Колонки.Добавить("Номенклатура",           Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КопируемыеТовары.Колонки.Добавить("Характеристика",         Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КопируемыеТовары.Колонки.Добавить("Упаковка",               Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	
	Для Каждого ТекСтрока Из Элементы.ДеревоЦен.ВыделенныеСтроки Цикл
		
		ТекЭлементНоменклатура = ДеревоЦен.НайтиПоИдентификатору(ТекСтрока);
		
		ПоместитьСтрокуВТабличнуюЧасть(КопируемыеТовары, ТекЭлементНоменклатура);
		
	КонецЦикла;
	
	ХранилищаНастроек.ХранилищеБуфераОбмена.ПоместитьВыделенныеСтрокиВБуферОбмена(, КопируемыеТовары);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = ХранилищаНастроек.ХранилищеБуфераОбмена.ПолучитьСтрокиИзБуфераОбмена();
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = ДобавитьТоварыПоОтборуНаСервере(, ТаблицаТоваров);;
	
	Возврат ДанныеДляРасчетаВычисляемыхЦенНаКлиенте
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ХранилищаНастроек.ХранилищеБуфераОбмена.БуферОбменаПустой());
		
	Иначе
		
		МассивЭлементов.Добавить("ТоварыСкопироватьСтроки");
		МассивЭлементов.Добавить("ТоварыКонтекстноеМенюСкопироватьСтроки");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// +АК. ДОБАВЛЕННЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


&НаКлиенте
Функция ПолучитьГруппу(РабочийЛист,Знач НомерСтроки,Уровень)
	Если Уровень < 2 Тогда
		Возврат "";
	КонецЕсли;	
	
	Пока НомерСтроки > 0 Цикл
		
		ТекущийУровень = РабочийЛист.Rows(НомерСтроки).OutlineLevel;
		Если ТекущийУровень < Уровень Тогда
			Возврат СокрЛП(РабочийЛист.Cells(НомерСтроки, 2).Value)
		КонецЕсли;
		НомерСтроки = НомерСтроки - 1;
	
	КонецЦикла;
	Возврат "";
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеОбъедененнойЯчеки(РабочийЛист,НомерСтроки,НомерСтолбца)
	Если  РабочийЛист.Cells(НомерСтроки, НомерСтолбца).MergeCells  Тогда
		Возврат РабочийЛист.Cells(РабочийЛист.Cells(НомерСтроки, НомерСтолбца).MergeArea.Row, 
		                          РабочийЛист.Cells(НомерСтроки, НомерСтолбца).MergeArea.Column).Value;
	Иначе
		Возврат РабочийЛист.Cells(НомерСтроки,НомерСтолбца).Value;
	КонецЕсли
	
КонецФункции

&НаСервере
Функция ПолучитьХаракетеристикуАдмин(Номенклатура)
	ЗАпрос = Новый ЗАпрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|ГДЕ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка.Владелец = &Владелец
	|	И ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение = &Значение";
	Запрос.УстановитьПараметр("Владелец",Номенклатура);
	Запрос.УстановитьПараметр("Значение",Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию("БУК (ЛДСП)"));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
КонецФункции

//АК создаем номенклатуру по структуре
&НаСервере
Функция СоздатьНоменклатуру(СтруктураПараметров)
	//"ИдентификаторНоменклатура, 
	//|ИдентификаторХарактеристика, 
	//|ИдентификаторУпаковка, 
	//|ИдентификаторВидЦены, 
	//|Цена,
	//|Группа,
	//|Размер,
	//|Наименование,
	//|ЭтоАдминистративнаяМебель");
	НовНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	НовНоменклатура.Наименование = СтруктураПараметров.Наименование;
	НовНоменклатура.НаименованиеПолное = СтруктураПараметров.Наименование + " "+СтруктураПараметров.ИдентификаторНоменклатура;
	НовНоменклатура.СтавкаНДС=Перечисления.СтавкиНДС.БезНДС;
	НовНоменклатура.Артикул = СтруктураПараметров.ИдентификаторНоменклатура;
	//
	Запрос = Новый Запрос;
	НовНоменклатура.ВидНоменклатуры=Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Мебель");
	НовНоменклатура.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Товар;
	//{ ООО "АСТЭК" по заказу ООО "ПаксМед". Разработчик: Бурыкин Александр Дата: 05.02.2014
	//
	
		ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ЕдиницаИзмеренияПоУмолчанию();
	//Справочники.Номенклатура.УстановитьРеквизитыПоВидуНоменклатуры(НовНоменклатура);
	Если ЗначениеЗаполнено(НовНоменклатура.ВидНоменклатуры) Тогда
			
			РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовНоменклатура.ВидНоменклатуры, Новый Структура("ТипНоменклатуры, ГруппаДоступа, ВариантОформленияПродажи"));
			ЗаполнитьЗначенияСвойств(НовНоменклатура,РеквизитыОбъекта); //ЭтотОбъект, РеквизитыОбъекта);
			Если НовНоменклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар
				И НовНоменклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
				НаборУпаковок = Справочники.НаборыУпаковок.ПустаяСсылка();
				ИспользоватьУпаковки = Ложь;
				Качество = Перечисления.ГрадацииКачества.Новый;
			КонецЕсли;
			
		КонецЕсли;
       	//} 


	//доп реквизиты
	//производитель
	ДопРеквизит = НовНоменклатура.ДополнительныеРеквизиты.Добавить();
	ДопРеквизит.Свойство=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_Производитель;
	ДопРеквизит.Значение= Справочники.Партнеры.НайтиПоНаименованию("Доктор Мебель ООО");
	ДопРеквизит.ТекстоваяСтрока = Строка(ДопРеквизит.Значение);
	//размер
	ДопРеквизит = НовНоменклатура.ДополнительныеРеквизиты.Добавить();
	ДопРеквизит.Свойство=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_ГабаритныеРазмеры;
	ДопРеквизит.Значение= СтруктураПараметров.Размер;
	ДопРеквизит.ТекстоваяСтрока = СтруктураПараметров.Размер;
	//группа
	Запрос = Новый Запрос;
	ЗАпрос.Текст = "ВЫБРАТЬ
	               |	Номенклатура.Ссылка
	               |ИЗ
	               |	Справочник.Номенклатура КАК Номенклатура
	               |ГДЕ
	               |	Номенклатура.Наименование = &Наименование
	               |	И Номенклатура.ЭтоГруппа = ИСТИНА";
	Запрос.УстановитьПараметр("Наименование",СтруктураПараметров.Группа);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НовНоменклатура.Родитель = Выборка.Ссылка;
	КонецЕсли;
	
	НовНоменклатура.Записать();
	//Характеристики номенклатуры
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Ссылка
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец = &Владелец
	|	И ЗначенияСвойствОбъектов.Наименование ПОДОБНО ""%шагрень%""";
	Запрос.УстановитьПараметр("Владелец",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_Цвет);
	МассивЦветов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	МассивЦветов.Добавить(Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка());
	Для Каждого ТекЭлемент Из МассивЦветов Цикл
		новХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
		новХарактеристика.Владелец = НовНоменклатура.Ссылка;
		новХарактеристика.Наименование = СтруктураПараметров.Размер+"/"+Строка(ТекЭлемент);
		
		цвет = новХарактеристика.ДополнительныеРеквизиты.Добавить();
		цвет.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_Цвет;
		цвет.Значение = ТекЭлемент;
		цвет.ТекстоваяСтрока=Строка(цвет.Значение);
		
		размер = новХарактеристика.ДополнительныеРеквизиты.Добавить();
		размер.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_ГабаритныеРазмеры;
		размер.Значение =  СтруктураПараметров.Размер;
		размер.ТекстоваяСтрока=Строка(размер.Значение);
		новХарактеристика.Записать();
		
	КонецЦикла;
	
	
	
	Возврат НовНоменклатура.Ссылка;
	
КонецФункции



ДобавитьХарактеристику = Ложь;
СоответствиеВидовЦенИменамКолонокТаблицыТоваров = Новый Соответствие;
СтрокаДобавлена = Ложь;