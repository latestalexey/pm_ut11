&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	// АК ИГОРЬ 08 02 2013
	АК_ОбщегоНазначения.УслугиДополнительныеРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	Элементы.ГрафикОплаты.Видимость = Истина
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	
	ИспользоватьРучныеСкидкиВПродажах           = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидкиВПродажах   = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	ИспользоватьОграниченияРучныхСкидок = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям")
	ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	ИспользоватьСоглашенияСКлиентами    = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		СтатусДокумента = Объект.Статус;
		
		Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
			ЗаполнитьУсловияПродаж();
		КонецЕсли;
		//АК ИГОРЬ 08 02 2013
		Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано;
		//АК ИГОРЬ 08 02 2013
		
		
	КонецЕсли;
	
	ОбновитьСостояниеСервер(Объект.Ссылка, Состояние, СостояниеПросрочено);
	ПродажиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДокументОснование", "Видимость", ЗначениеЗаполнено(Объект.ДокументОснование));
	
	// Подсистема "ЭлектронныеДокументы"
	УстановитьТекстСостоянияЭДНаСервере();
	
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	УстановитьДоступностьКомандБуфераОбмена();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если Объект.Проведен Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыКоммерческихПредложенийКлиентам.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСостояниеСервер(Объект.Ссылка, Состояние, СостояниеПросрочено);
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.Товары,
	Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
	Новый Структура("Номенклатура", "ТипНоменклатуры"),
	)
	);
	
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	// Подсистема "ЭлектронныеДокументы"
	УстановитьТекстСостоянияЭДНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Сделка", Объект.Сделка);
	Оповестить("Запись_КоммерческоеПредложениеКлиенту", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//{ ООО  "АСТЭК" Разработчик: Бутенко Илья 12.11.2013
	//Описание: ПРоверим правильность заполнения товаров и услуг
	ТоварыЗаполнитьПоТоварамИУслугам(Неопределено);
	//}
	
	// Если документ проводится, рассчитаем скидки
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(ЭтаФорма, "Товары", "Номенклатура,Характеристика,Количество");
		
		Если ИспользоватьАвтоматическиеСкидкиВПродажах И
			Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
			
			Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
				
				ОтветНаВопрос = СкидкиНаценкиКлиент.ПредложитьПользователюРассчитатьСкидки();
				
				Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
					Отказ = Истина;
					Возврат;
				ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
					ПрименитьИзмененияСкидокНаценокНаКлиенте();
					РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
				КонецЕсли;
				
			Иначе
				Объект.СкидкиРассчитаны = Истина;
			КонецЕсли;
			
		КонецЕсли;
		//АСТЭК
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует") Тогда
			
			//
			Если НЕ ЗначениеЗаполнено(Объект.Соглашение) ИЛИ ПолучитьЗначениеРеквизита(Объект.Соглашение, "Типовое") = Истина Тогда
				
				Ответ = КодВозвратаДиалога.Да;
				Ответ = Вопрос("Создать новое индивидуальное соглашение с клиентом для данного КП?", РежимДиалогаВопрос.ДаНетОтмена,,Ответ);
				
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Отказ = Истина;
					Возврат;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда	
					//ничего не делаем
				Иначе
					
					//создаем новый
					
					//
					Ключ = Новый Структура("Ключ", Объект.Ссылка);
					
					//
					Форма = ПолучитьФорму("Справочник.СоглашенияСКлиентами.ФормаОбъекта", Ключ);
					СтараяДата = Объект.Дата;
					//
					Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийСКлиентами.Действует");
					
					//
					Форма.Объект.Партнер = Объект.Партнер;
					Форма.Объект.Контрагент = ПолучитьКонтранетнаПартнераПоУмолчанию(Форма.Объект.Партнер);
					
					//
					Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
						
						//
						Форма.Объект.Соглашение = Объект.Соглашение;
						Результат = ЗаполнитьИндивидульноеСоглашениеНаОснованииТипового(Форма.Объект);
						ЗаполнитьКомерческоеПоСоглашению(Результат);
						//
						
					КонецЕсли;	
					
					//
					Если ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
						Форма.Объект.ГрафикОплаты = Объект.ГрафикОплаты;
					КонецЕсли;	
					
					//
					Форма.Объект.СрокПоставки = Объект.СрокПоставки;
					//Форма.Объект.СрокДействия = Объект.СрокДействия;
					//
					Форма.Объект.ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
					
					//
					Если ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
						Форма.Объект.НалогообложениеНДС = Объект.НалогообложениеНДС;
					КонецЕсли;	
					
					//
					Если ЗначениеЗаполнено(Объект.Менеджер) Тогда
						Форма.Объект.Менеджер = Объект.Менеджер;
					КонецЕсли;
					
					//
					Если ЗначениеЗаполнено(Объект.АК_УсловияПоставки) Тогда
						Форма.Объект.АК_УсловияПоставки = Объект.АК_УсловияПоставки;
					КонецЕсли;
					
					//
					Форма.ОткрытьМодально();
					
					//
					Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
						Объект.Соглашение = Форма.Объект.Ссылка;	
					КонецЕсли;	
					
				КонецЕсли;	
				//гдет сбрасывает эти параметры
				ТоварыЗаполнитьПоТоварамИУслугам(Неопределено);
				Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует");
				Объект.Дата =  СтараяДата;
				
			КонецЕсли;	
			
			Если ПолучитьЗначениеРеквизита(Объект.Соглашение, "Типовое") = Истина Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В качестве соглашения должен быть выбрано Индивидуальное соглашение с клиентом'"), Объект.Ссылка, "Объект.Соглашение",,Отказ);
			КОнецЕсли;	
			
			//
			СуммаТоварыПредварительно = 0;
			СуммаДопУслуг = 0;
			СуммаТоваров = 0;
			
			//
			Для Каждого СтрокаТЧ Из Объект.АК_ТоварыПредварительно Цикл
				
				Если СтрокаТЧ.Активность Тогда
					СуммаТоварыПредварительно = СуммаТоварыПредварительно + СтрокаТЧ.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
				КонецЕсли;
				
			КонецЦикла;	
			
			//
			Для Каждого СтрокаТЧ Из Объект.АК_УслугиДополнительные Цикл
				
				Если СтрокаТЧ.Активность Тогда //+++АК И СтрокаТЧ.АК_ПризнакРаспределитьНаТовары Тогда
					СуммаДопУслуг = СуммаДопУслуг + СтрокаТЧ.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
				КонецЕсли;
				
			КонецЦикла;	
			
			//
			Для Каждого СтрокаТЧ Из Объект.Товары Цикл
				
				Если СтрокаТЧ.Активность Тогда 
					СуммаТоваров = СуммаТоваров + СтрокаТЧ.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
				КонецЕсли;	
				
			КонецЦикла;	
			
			//
			Если Окр(СуммаТоваров,0, РежимОкругления.Окр15как10) <> Окр(СуммаТоварыПредварительно + СуммаДопУслуг, 0, РежимОкругления.Окр15как10) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сумма Товаров " + Формат(СуммаТоваров, "ЧЦ=15; ЧДЦ=2; ЧН=0,00") + " не равна сумме Товаров предв. и Доп. услуг " +  Формат(СуммаТоварыПредварительно + СуммаДопУслуг, "ЧЦ=15; ЧДЦ=2") + "'"), Объект.Ссылка, "Объект.Товары",,Отказ);	
			КонецЕсли;
			
		КонецЕсли;	
		
		//---АК
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	// Подсистема "ЭлектронныеДокументы"
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	КонецЕсли;
	
	Если ИмяСобытия = "СчитанаКартаЛояльности"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		СчитанаКартаЛояльности(Параметр.КартаЛояльности);
	КонецЕсли;
	
	Если ИмяСобытия = "ПолученыСообщения"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		ПолученыСообщения(Параметр.Сообщения);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.Соглашение) И ИспользоватьСоглашенияСКлиентами Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
	
	Если Не ПартнерИзменился ИЛИ НЕ ЗначениеЗаполнено (Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено (Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	ПриИзмененииСоглашенияСервер();
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект,ВалютаДокумента) Тогда
		
		ПриИзмененииВалютыСервер(Объект.Валюта);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусДокумента = Объект.Статус;
	
	Если Объект.Согласован И 
		Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыКоммерческихПредложенийКлиентам.Отменено") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если ЦенообразованиеКлиент.ЗадатьВопросПересчетаЦеныПриИзмененииДаты(Объект) Тогда
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикОплатыПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
		
		ФормаОплаты =ПолучитьФормуОплатыСервер(Объект.ГрафикОплаты);
		
		Если ЗначениеЗаполнено(ФормаОплаты) Тогда
			Объект.ФормаОплаты = ФормаОплаты;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ПриИзмененииХозяйственнойОперацииСервер();
	Иначе
		ЗаполнитьУсловияПродаж();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.Соглашение, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КартыЛояльностиКлиент.НачалоВыбораКартыЛояльности(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура КартаЛояльностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СчитанаКартаЛояльности(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыКлиент.ОткрытьАктуальныйЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособДоставкиПриИзменении(Элемент)
	
	ДоставкаТоваровКлиентСервер.УстановитьСтраницуДоставки(Элементы,Объект.СпособДоставки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьМногооборотнуюТаруПриИзменении(Элемент)
	
	ВернутьМногооборотнуюТаруПриИзмененииСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = РедактированиеДоступно();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Если ФлагРекурсии Тогда
		
		ФлагРекурсии = Ложь;
		Возврат;
		
	КонецЕсли;
	
	Отказ        = Истина;
	ФлагРекурсии = Истина;
	
	Элементы.Товары.ДобавитьСтроку();
	
	НоваяСтрока            = Элементы.Товары.ТекущиеДанные;
	НоваяСтрока.Активность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.ТоварыСуммаАвтоматическойСкидки Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ Объект.СкидкиРассчитаны Тогда
			Результат = Вопрос(НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
			Если Результат = КодВозвратаДиалога.Нет Тогда
				Возврат;
			Иначе
				
				СтруктураПараметры = Новый Структура;
				СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
				СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
				СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
				СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
				
				СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
				Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
					ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
			РассчитатьСкидкиБезПримененияКОбъекту();
		КонецЕсли;
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
		
	ИначеЕсли Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И НЕ Объект.Согласован Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Для редактирования цены необходимо выбрать вид цены ""<произвольная>""'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Отказ = РедактированиеДоступно();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАктивностьПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(
	Элементы.Товары.ТекущиеДанные,
	СтруктураДействий,
	КэшированныеЗначения
	);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию")));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению()
	
	//Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", "Товары") Тогда
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "АК_ТоварыПредварительно", "Товары") Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоТест_ЗаполнитьЦеныПоСоглашению() Экспорт
	
	ЗаполнитьЦеныПоСоглашению()
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)
	
	//Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", "Товары") Тогда
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "АК_ТоварыПредварительно", "Товары") Тогда
		
		ВидЦен = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, Истина);
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)
	
	//Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", "Товары") Тогда
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "АК_ТоварыПредварительно", "Товары") Тогда
		
		ВидЦен = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, Истина);
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтметкиАктивностиВыделенныхСтрок(Команда)
	
	УстановитьСнятьОтметкиАктивностиВыделенныхСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиАктивностиВыделенныхСтрок(Команда)
	
	УстановитьСнятьОтметкиАктивностиВыделенныхСтрок(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Соглашение"" не заполнено'"), Объект.Ссылка, "Объект.Соглашение",,Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Соглашение)
		Или Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "коммерческое предложение клиенту");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение",      Объект.Соглашение);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);	
	КонецЕсли;
	ПараметрыФормы.Вставить("СкрыватьПодакцизныеТовары",               Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("ОтображатьФлагСкрыватьПодакцизныеТовары", Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("Склад",     Объект.Склад);
	ПараметрыФормы.Вставить("Валюта",    Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",  Объект.Ссылка);
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	Если Не Объект.СкидкиРассчитаны Тогда
		Результат = Вопрос(НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
		Если Результат = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			
			СтруктураПараметры = Новый Структура;
			СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
			СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
			СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
			СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
			
			СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
			Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
				ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиБезПримененияКОбъекту();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	АдресВХранилище = ВыполнитьПредварительныйРасчетСкидокНаСервере();
	ВозвращенноеЗначение = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(АдресВХранилище);
	Если ВозвращенноеЗначение <> Неопределено Тогда
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	//АК таблица изменеа
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "АК_ТоварыПредварительно", "АК_ТоварыПредварительно") Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь, Истина);
	
	СуммаРучнойСкидкиНаценки = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
	АдресВоВременномХранилище,
	Объект.Валюта
	);
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, , АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина, Ложь);
	
	СуммаРучнойСкидкиНаценки = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
	АдресВоВременномХранилище,
	Объект.Валюта
	);
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить()
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщения(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуСообщений(ПолучитьСтруктуруСообщений(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьКартуЛояльности(Команда)
	
	Если Объект.Согласован Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
	"Справочник.КартыЛояльности.Форма.СчитываниеКартыЛояльности",
	Новый Структура("Партнер", Объект.Партнер),
	ЭтаФорма,
	ЭтаФорма.УникальныйИдентификатор
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы);
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)
	
	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
	ЭтаФорма,
	"Товары",
	"Номенклатура,Характеристика,Количество");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ЗаполнитьУсловияПродаж();
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.Товары,
	Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
	Новый Структура("Номенклатура", "ТипНоменклатуры"),
	)
	);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	УстановитьДоступностьГрафикаОплаты();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		ДоставкаТоваров.КоммерческоеПредложениеПриИзмененииПартнера(Элементы,Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоглашенияСервер()
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоCоглашению();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	ВалютаДокумента = Объект.Валюта;
	
	ПриИзмененииХозяйственнойОперацииСервер();
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.Товары,
	Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
	Новый Структура("Номенклатура", "ТипНоменклатуры"),
	)
	);
	
	УстановитьДоступностьГрафикаОплаты();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта)
	
	СтараяВалюта                = ВалютаДокумента;
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, Объект.Дата);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, Объект.Дата);
	
	Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
	Объект.Товары,
	Объект.ЦенаВключаетНДС,
	СтараяВалюта,
	НоваяВалюта,
	СтруктураКурсовСтаройВалюты,
	СтруктураКурсовНовойВалюты,
	Истина,
	Истина
	);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Ценообразование и скидки

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер()
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
	//Объект.Товары, // Табличная часть АСТЕК
	Объект.АК_ТоварыПредварительно,
	, // Массив строк или структура отбора
	Новый Структура( // Параметры заполнения
	"Дата, Валюта, Соглашение, ПоляЗаполнения",
	Объект.Дата,
	Объект.Валюта,
	Объект.Соглашение,
	"Цена, СтавкаНДС, ВидЦены"
	),
	Новый Структура( // Структура действий с измененными строками
	"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
	"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)
	)
	);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
	//Объект.Товары,
	Объект.АК_ТоварыПредварительно,//АСТЕК
	, // Массив строк или структура отбора
	Новый Структура( // Параметры заполнения
	"Дата, Валюта, ВидЦены, ПоляЗаполнения",
	Объект.Дата,
	Объект.Валюта,
	ВидЦен,
	"Цена, ВидЦены"
	),
	Новый Структура( // Структура действий с измененными строками
	"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
	"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)
	)
	);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	//АСТЕК
	Для Каждого Строка Из Элементы.ТоварыПредварительно.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.АК_ТоварыПредварительно.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
	//Объект.Товары,
	Объект.АК_ТоварыПредварительно,
	МассивСтрок, // Массив строк или структура отбора
	Новый Структура( // Параметры заполнения
	"Дата, Валюта, ВидЦены, ПоляЗаполнения",
	Объект.Дата,
	Объект.Валюта,
	ВидЦен,
	"Цена, ВидЦены"
	),
	Новый Структура( // Структура действий с измененными строками
	"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
	"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)
	)
	);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруСообщений()
	
	Возврат СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
	НСтр("ru = 'Скидки (наценки)'"),
	,
	НСтр("ru = 'Скидки (наценки) рассчитаны'"),
	БиблиотекаКартинок.Информация32
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияСкидокНаценокНаКлиенте()
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(Неопределено, Истина);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
	НСтр("ru = 'Скидки (наценки)'"),
	,
	НСтр("ru = 'Скидки (наценки) рассчитаны'"),
	БиблиотекаКартинок.Информация32
	);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, ВзятьИзВременногоХранилища = Ложь)
	
	Если ВзятьИзВременногоХранилища Тогда
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		СкидкиНаценкиСервер.ПрименитьРезультатРасчета(Объект, ПримененныеСкидки);
	Иначе
		ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Объект.СкидкиРассчитаны = Истина;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	СтруктураСообщений = СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки = Неопределено, АдресВоВременномХранилище)
	//АК заменили Товары на АК_ТоварыПредварительно
	Если ВыделенныеСтроки = Неопределено Тогда
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "АК_ТоварыПредварительно", Истина, Истина);
	КонецЕсли;
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "АК_ТоварыПредварительно", СуммаСкидкиНаценки, Истина, Истина, Истина,, ВыделенныеСтроки, АдресВоВременномХранилище);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

&НаСервере
Процедура ПолученыСообщения(Сообщения)
	
	СкидкиНаценкиСервер.СохранитьОтработанныеСообщения(Объект, Сообщения);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
КонецПроцедуры

&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Товары.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].НапомнитьПозже <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].НапомнитьПозже Тогда
				СкидкиИзменились = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

&НаСервере
Процедура ОбновитьПризнакБезВозвратнойТары()
	
	СтруктураДополнительныхДействий = Новый Структура;
	СтруктураДополнительныхДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВернутьМногооборотнуюТару, СтруктураДополнительныхДействий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подборы и обработка проверки количества

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ИзменятьКоличество = Не Объект.Согласован;
	
	ЭтаФорма.ЗаблокироватьДанныеФормыДляРедактирования();
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("УстановитьАктивность");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками,Объект);	
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);	
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
	
	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = Неопределено;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ИзменятьКоличество Тогда
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ЭлектронныеДокументы"

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ВалютаДокумента = Объект.Валюта;
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	УстановитьВидимостьЭлементовПоОперацииСервер();
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.Товары,
	Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
	Новый Структура("Номенклатура", "ТипНоменклатуры"),
	)
	);
	ОбновитьПризнакБезВозвратнойТары();
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	УстановитьДоступностьГрафикаОплаты();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		ДоставкаТоваровКлиентСервер.УстановитьСтраницуДоставки(Элементы,Объект.СпособДоставки)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиКоммерческогоПредложения(Форма)
	
	КоллекцияТовары = Форма.Объект.Товары;
	Объект = Форма.Объект;
	//АСТЕК
	КоллекцияТоварыПредварительно = Форма.Объект.АК_ТоварыПредварительно;
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Активность", Истина);
	
	НайденныеСтроки = КоллекцияТоварыПредварительно.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		НоваяСумма             = 0;
		НоваяСуммаНДС          = 0;
		НоваяСуммаАвтоСкидки   = 0;
		НоваяСуммаРучнойСкидки = 0;
		НоваяСуммаСкидки       = 0;
		
		Для Каждого ТекЭлемент Из НайденныеСтроки Цикл
			
			НоваяСумма             = НоваяСумма + ТекЭлемент.Сумма;
			НоваяСуммаНДС          = НоваяСуммаНДС + ТекЭлемент.СуммаНДС;
			НоваяСуммаАвтоСкидки   = НоваяСуммаАвтоСкидки + ТекЭлемент.СуммаАвтоматическойСкидки;
			НоваяСуммаРучнойСкидки = НоваяСуммаРучнойСкидки + ТекЭлемент.СуммаРучнойСкидки;
			
		КонецЦикла;
		
		Форма.ПредварительноСуммаАктивныхСтрок      = НоваяСумма;
		Форма.ПредварительноСуммаНДСАктивныхСтрок   = НоваяСуммаНДС;
		Форма.ПредварительноКоличествоАктивныхСтрок = НайденныеСтроки.Количество();
		Если Объект.ЦенаВключаетНДС Тогда
			Форма.ПредварительноСуммаАктивныхСтрокСНДС   = НоваяСумма;
		Иначе
			Форма.ПредварительноСуммаАктивныхСтрокСНДС   = НоваяСумма+НоваяСуммаНДС;
		КонецЕсли;
		
		Форма.СуммаАвтоСкидки         = НоваяСуммаАвтоСкидки;
		Форма.СуммаРучнойСкидки       = НоваяСуммаРучнойСкидки;
		Форма.СуммаСкидки             = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
		
		Если Форма.ПредварительноСуммаАктивныхСтрок > 0 Тогда
			
			Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (Форма.ПредварительноСуммаАктивныхСтрок + Форма.СуммаСкидки);
			Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (Форма.ПредварительноСуммаАктивныхСтрок + Форма.СуммаСкидки);
			Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
			
		ИначеЕсли Форма.СуммаСкидки > 0 Тогда
			
			Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
			Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
			Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
			
		Иначе
			
			Форма.ПроцентАвтоСкидки   = 0;
			Форма.ПроцентРучнойСкидки = 0;
			Форма.ПроцентСкидки       = 0;
			
		КонецЕсли;
		
		Если Не Объект.ЦенаВключаетНДС Тогда
			Форма.ПредварительноСуммаАктивныхСтрок = Форма.ПредварительноСуммаАктивныхСтрок + Форма.ПредварительноСуммаНДСАктивныхСтрок;
		КонецЕсли;
		
	Иначе
		
		Форма.ПредварительноСуммаАктивныхСтрок      = 0;
		Форма.ПредварительноСуммаАктивныхСтрокСНДС	= 0;
		Форма.ПредварительноСуммаНДСАктивныхСтрок   = 0;
		Форма.ПредварительноКоличествоАктивныхСтрок = 0;
		Форма.СуммаАвтоСкидки         = 0;
		Форма.СуммаРучнойСкидки       = 0;
		Форма.СуммаСкидки             = 0;
		Форма.ПроцентАвтоСкидки       = 0;
		Форма.ПроцентРучнойСкидки     = 0;
		Форма.ПроцентСкидки           = 0;
		
	КонецЕсли;
	
	НоваяСумма = 0;
	Для каждого СтрокаТаблицы из Объект.Товары Цикл
		НоваяСумма = НоваяСумма + СтрокаТаблицы.Сумма; 	
	КонецЦикла;
	Форма.СуммаВсего = НоваяСумма;
	
	НайденныеСтроки = КоллекцияТовары.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		НоваяСумма             = 0;
		НоваяСуммаНДС          = 0;
		НоваяСуммаАвтоСкидки   = 0;
		НоваяСуммаРучнойСкидки = 0;
		НоваяСуммаСкидки       = 0;
		
		Для Каждого ТекЭлемент Из НайденныеСтроки Цикл
			
			НоваяСумма             = НоваяСумма + ТекЭлемент.Сумма;
			НоваяСуммаНДС          = НоваяСуммаНДС + ТекЭлемент.СуммаНДС;
			НоваяСуммаАвтоСкидки   = НоваяСуммаАвтоСкидки + ТекЭлемент.СуммаАвтоматическойСкидки;
			НоваяСуммаРучнойСкидки = НоваяСуммаРучнойСкидки + ТекЭлемент.СуммаРучнойСкидки;
			
		КонецЦикла;
		
		Форма.СуммаНДСАктивныхСтрок   = НоваяСуммаНДС;
		
		Если Объект.ЦенаВключаетНДС Тогда
			Форма.СуммаАктивныхСтрокСНДС   = НоваяСумма;
		Иначе
			Форма.СуммаАктивныхСтрокСНДС   = НоваяСумма+НоваяСуммаНДС;
		КонецЕсли;
		
		Если Не Объект.ЦенаВключаетНДС Тогда
			Форма.СуммаАктивныхСтрок = Форма.СуммаАктивныхСтрок + Форма.СуммаНДСАктивныхСтрок;
		КонецЕсли; 
		
	Иначе
		
		Форма.СуммаНДСАктивныхСтрок   = 0;
		Форма.СуммаАктивныхСтрокСНДС = 0;
		Форма.СуммаАктивныхСтрок = 0;
		
	КонецЕсли;
	
	
	
	//Форма.СуммаАктивныхСтрок = КоллекцияТовары.Итог("СуммаСНДСАктивностьБезВозвратнойТары");
	//Форма.СуммаНДСАктивныхСтрок = КоллекцияТовары.Итог("СуммаНДСАктивностьБезВозвратнойТары");
	//Форма.СуммаАвтоСкидки = КоллекцияТовары.Итог("СуммаАвтоматическойСкидкиАктивностьБезВозвратнойТары");
	//Форма.СуммаРучнойСкидки = КоллекцияТовары.Итог("СуммаРучнойСкидкиАктивностьБезВозвратнойТары");
	//Форма.СуммаСкидки = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	//Форма.СуммаВсего = КоллекцияТовары.Итог("СуммаСНДСБезВозвратнойТары");
	//
	//СуммаАктивныхСтрокБезНДС = КоллекцияТовары.Итог("СуммаАктивностьБезВозвратнойТары");
	//
	//Если СуммаАктивныхСтрокБезНДС > 0 Тогда
	//	Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаАктивныхСтрокБезНДС + Форма.СуммаСкидки);
	//	Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаАктивныхСтрокБезНДС + Форма.СуммаСкидки);
	//	Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	//ИначеЕсли Форма.СуммаСкидки > 0 Тогда
	//	Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
	//	Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
	//	Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	//Иначе
	//	Форма.ПроцентАвтоСкидки   = 0;
	//	Форма.ПроцентРучнойСкидки = 0;
	//	Форма.ПроцентСкидки       = 0;
	//КонецЕсли;
	//  АСТЕК TODO закомменитировал весь блок такак вылазит ошибка при открытии формы
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруЗависимыхРеквизитов()
	
	Возврат Новый Структура(
	"БезВозвратнойТары,АктивностьБезВозвратнойТары",
	"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
	"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Ложь;
	
	Если Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано Тогда
		УстановитьПодписку = Ложь;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Отменено Тогда
		УстановитьПодписку = Объект.Согласован;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует Тогда
		УстановитьПодписку = Объект.Согласован;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Соглашение");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("СрокДействия");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("НалогообложениеНДС");
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("СрокПоставки");
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("ХозяйственнаяОперация");
	МассивЭлементов.Добавить("КартаЛояльности");
	МассивЭлементов.Добавить("ВернутьМногооборотнуюТару");
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	
	МассивЭлементов.Добавить("Товары;ПередНачаломДобавления,ПередУдалением");
	
	// Элементы управления, связанные с таблицей Товары
	МассивЭлементов.Добавить("ТоварыНоменклатура");
	МассивЭлементов.Добавить("ТоварыХарактеристика");
	МассивЭлементов.Добавить("ТоварыКоличествоУпаковок");
	МассивЭлементов.Добавить("ТоварыУпаковка");
	МассивЭлементов.Добавить("ТоварыВидЦены");
	МассивЭлементов.Добавить("ТоварыЦена");
	МассивЭлементов.Добавить("ТоварыСтавкаНДС");
	МассивЭлементов.Добавить("ТоварыПроцентРучнойСкидки");
	МассивЭлементов.Добавить("ТоварыСуммаРучнойСкидки");
	МассивЭлементов.Добавить("ТоварыТекстовоеОписание");
	МассивЭлементов.Добавить("ТоварыСумма");
	
	// Элементы управления, связанные с таблицей Товары
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюУдалить");
	
	МассивЭлементов.Добавить("ТоварыДобавить");
	МассивЭлементов.Добавить("ТоварыИзменить");
	МассивЭлементов.Добавить("ТоварыСкопировать");
	МассивЭлементов.Добавить("ТоварыУдалить");
	МассивЭлементов.Добавить("ТоварыРазбитьСтроку");
	МассивЭлементов.Добавить("ТоварыПоискПоШтрихкоду");
	
	МассивЭлементов.Добавить("ТоварыОткрытьПодбор");
	МассивЭлементов.Добавить("ТоварыДополнитьМногооборотнойТарой");
	
	МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоСоглашению");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоВидуЦен");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен");
	
	МассивЭлементов.Добавить("ТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("КартаЛояльности");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		//АК предварительная продажа
		ТекущаяСтрока = Объект.АК_ТоварыПредварительно.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, Упаковка, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки");
		
		ТекущаяСтрока.Активность = Истина;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.Товары,
	Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
	)
	);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.КоммерческоеПредложениеКлиенту.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
	Объект.ХозяйственнаяОперация, 
	МассивВсехРеквизитов, 
	МассивРеквизитовОперации
	);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
	Элементы,
	МассивВсехРеквизитов,
	МассивРеквизитовОперации
	);
	
	ЭтоПередачаНаКомиссию = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("ФормаОплаты");
	
	МассивЭлементов.Добавить("ТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("ТоварыОткрытьИнформациюОСкидках");
	МассивЭлементов.Добавить("КонтекстноеМенюТоварыОткрытьИнформациюОСкидках");
	
	МассивЭлементов.Добавить("ПроцентРучнойСкидки");
	МассивЭлементов.Добавить("СуммаРучнойСкидки");
	МассивЭлементов.Добавить("ПроцентАвтоСкидки");
	МассивЭлементов.Добавить("СуммаАвтоСкидки");
	МассивЭлементов.Добавить("ПроцентСкидки");
	МассивЭлементов.Добавить("СуммаСкидки");
	
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("КартаЛояльности");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Не ЭтоПередачаНаКомиссию);
	
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(Объект.ХозяйственнаяОперация, Элементы.ТоварыНоменклатура);
	
	ПродажиСервер.ЗаполнитьСписокВыбораНалогообложения(Объект.ХозяйственнаяОперация, Элементы.НалогообложениеНДС);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		Если (ИспользоватьРучныеСкидкиВПродажах Или ИспользоватьАвтоматическиеСкидкиВПродажах)Тогда
			СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары", Истина);
			СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения, Ложь);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
			Объект.ГрафикОплаты = Справочники.ГрафикиОплаты.ПустаяСсылка();
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда
			Объект.ФормаОплаты = Перечисления.ФормыОплаты.ПустаяСсылка();
		КонецЕсли;
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	УстановитьВидимостьЭлементовПоОперацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьОтметкиАктивностиВыделенныхСтрок(Установить = Истина)
	
	Если Объект.Товары.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Таблица товаров не заполнена.'"));
		Возврат;
	КонецЕсли;
	
	АктивностьИзменена = Ложь;
	
	СтруктураДействий = Новый Структура(
	"ЗаполнитьДубликатыЗависимыхРеквизитов",
	ПолучитьСтруктуруЗависимыхРеквизитов()
	);
	
	Для Каждого ТекущаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Активность <> Установить Тогда
			
			СтрокаТаблицы.Активность = Установить;
			АктивностьИзменена       = Истина;
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если АктивностьИзменена Тогда
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РедактированиеДоступно()
	//АСТЕК
	//
	//Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует") Или
	//	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКоммерческихПредложенийКлиентам.Отменено") Тогда
	//	
	//	Отказ = Объект.Согласован;
	//	
	//Иначе		
	Отказ = Ложь;
	//КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаСервереБезКонтекста
Функция  ПолучитьФормуОплатыСервер(ГрафикОплаты)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ГрафикиОплаты.ФормаОплаты КАК ФормаОплаты
	|ИЗ
	|	Справочник.ГрафикиОплаты КАК ГрафикиОплаты
	|ГДЕ
	|	ГрафикиОплаты.Ссылка = &ГрафикОплаты
	|");
	
	Запрос.УстановитьПараметр("ГрафикОплаты", ГрафикОплаты);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ФормаОплаты;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьСостояниеСервер(КоммерческоеПредложение, Состояние, СостояниеПросрочено)
	
	Документы.КоммерческоеПредложениеКлиенту.РассчитатьСостояние(КоммерческоеПредложение, Состояние, СостояниеПросрочено);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности)
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) И ДанныеКартыЛояльности.Партнер <> Объект.Партнер Тогда
		Объект.Партнер = ДанныеКартыЛояльности.Партнер;
		Объект.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		ПриИзмененииПартнераСервер();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
		И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение
		И ДанныеКартыЛояльности.СоглашениеДоступно Тогда
		Объект.Соглашение = ДанныеКартыЛояльности.Соглашение;
		ПриИзмененииСоглашенияСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльности(КартаЛояльности)
	
	ДанныеКартыЛояльности = КартыЛояльностиВызовСервера.ПолучитьДанныеКартыЛояльности(КартаЛояльности);
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Ссылка) Тогда
		
		Если Не ДанныеКартыЛояльности.ПартнерДоступен Тогда
			Предупреждение(НСтр("ru = 'Нет доступа к партнеру-владельцу карты лояльности.'"));
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) Тогда // Обезличенная карта
			
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			Модифицированность = Истина;
			Объект.КартаЛояльности   = КартаЛояльности;
			
			Возврат;
			
		ИначеЕсли Объект.Партнер <> ДанныеКартыЛояльности.Партнер Тогда // Партнер в карте отличается от партнера в документе.
			
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				Ответ = Вопрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Карта лояльности принадлежит партнеру ""%1"". Изменить партнера в документе?'"), ДанныеКартыЛояльности.Партнер), РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		Иначе // Партнер в документе равен партнеру в карте.
			
			ВопросОбИзмененииСоглашения = Ложь;
			Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
				И ЗначениеЗаполнено(Объект.Соглашение) И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение Тогда
				ВопросОбИзмененииСоглашения = Истина;
			КонецЕсли;
			
			Если ВопросОбИзмененииСоглашения Тогда
				
				ТекстВопроса = НСтр("ru = 'Для карты лояльности задано соглашение ""%1"". Применить карту лояльности и подставить в документ соглашение ""%1""?'");
				
				Ответ = Вопрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДанныеКартыЛояльности.Соглашение), РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки, ТолькоАктивныеСтроки)
	//АК Заменена таблица товары 	
	Возврат АК_ОбщегоНазначения.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "АК_ТоварыПредварительно", УникальныйИдентификатор, ТолькоВыделенныеСтроки,,ТолькоАктивныеСтроки);
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьГрафикаОплаты()
	
	ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);;
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("ФормаОплаты");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Не ГрафикСоглашенияЗаполнен
	И ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты") И Объект.ХозяйственнаяОперация<>Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродаж()
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоУмолчанию();
	
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	ВалютаДокумента = Объект.Валюта;
	
	Если ЗначениеЗаполнено(ДокументПродажи.Соглашение) Тогда
		ПриИзмененииХозяйственнойОперацииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "Доступность", Форма.Объект.ВернутьМногооборотнуюТару);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	СтруктураДействийДобавленныеСтроки =  ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДействийИзмененныеСтроки);;
	СтруктураДействийДобавленныеСтроки.Вставить("УстановитьАктивность");
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
	Объект,
	АдресТарыВХранилище,
	"Товары",
	"Номенклатура,Характеристика",
	СтруктураДействийИзмененныеСтроки,
	СтруктураДействийДобавленныеСтроки);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.Товары,
	Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
	)
	);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВернутьМногооборотнуюТаруПриИзмененииСервер()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Контроль несогласованных изменений

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении[Элемент.Имя]+"(Элемент)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие[Элемент.Имя]+"(Элемент)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.Команды[Команда.Имя]+"(Команда)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения[Элемент.Имя]+"(Элемент, Отказ)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением[Имя]+"(Элемент, Отказ)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления[Имя]+"(Элемент, Отказ, Копирование, Родитель, Группа)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с буфером обмена 

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	ХранилищаНастроек.ХранилищеБуфераОбмена.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре());
		ТаблицаТоваров = ХранилищаНастроек.ХранилищеБуфераОбмена.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	Иначе
		ТаблицаТоваров = ХранилищаНастроек.ХранилищеБуфераОбмена.ПолучитьСтрокиИзБуфераОбмена();
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		ТекущаяСтрока.Активность = Истина;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.Товары,
	Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
	)
	);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ХранилищаНастроек.ХранилищеБуфераОбмена.БуферОбменаПустой());
		
	Иначе
		
		МассивЭлементов.Добавить("ТоварыСкопироватьСтроки");
		МассивЭлементов.Добавить("ТОварыКонтекстноеМенюСкопироватьСтроки");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ТОВАРЫ ПРЕДВАРИТЕЛЬНО

//ОБЩИЕ
&НаСервере
Процедура ТоварыПредварительноРассчитатьСкидкиБезПримененияКОбъекту()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.ТоварыПредварительноРассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры // РассчитатьСкидкиБезПримененияКОбъекту()

&НаСервере
Процедура ТоварыПредварительноРассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	ПримененныеСкидки = СкидкиНаценкиСервер.ТоварыПредварительноРассчитать(Объект, СтруктураПараметры);
	
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Объект.СкидкиРассчитаны = Истина;
	
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	
КонецПроцедуры // РассчитатьСкидкиНаценкиНаСервере()

// Устанавливает или снимает флаг активности у выделенных пользователем строк
// табличной части Товары
//
// Параметры
// Установить - Определяет действие над флагом активности: установить или снять
//
&НаКлиенте
Процедура ТоварыПредварительноУстановитьСнятьОтметкиАктивностиВыделенныхСтрок(Установить = Истина)
	
	Если Объект.АК_ТоварыПредварительно.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Таблица товаров не заполнена.'"));
		Возврат;
	КонецЕсли;
	
	АктивностьИзменена = Ложь;
	
	Для Каждого ТекущаяСтрока Из Элементы.ТоварыПредварительно.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.АК_ТоварыПредварительно.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Активность <> Установить Тогда
			
			СтрокаТаблицы.Активность = Установить;
			АктивностьИзменена       = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если АктивностьИзменена Тогда
		АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // УстановитьСнятьОтметкиАктивностиВыделенныхСтрок()

//
//
&НаСервере
Процедура ПерезаполнитьЗаказКлиентаНаСервере()
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	акЗакупкаТовара.Предмет
	|ИЗ
	|	БизнесПроцесс.акЗакупкаТовара КАК акЗакупкаТовара
	|ГДЕ
	|	акЗакупкаТовара.Предмет = &ДокументОснование");
	Запрос.УстановитьПараметр( "ДокументОснование",Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выгрузить();
	Если Выборка.Количество() > 0 Тогда			 
		Если (Найти(ПараметрыСеанса.ТекущийПользователь.Наименование,  "Савина") ) ИЛИ (Найти(ПараметрыСеанса.ТекущийПользователь.Наименование,  "astek")) Тогда
			
			
			
			
			Если НЕ Модифицированность Тогда
				
				ПодчиненныеЗаказы = Документы.КоммерческоеПредложениеКлиенту.НайтиЗаказПодчиненныеЗаказКлиента(Объект.Ссылка);
				Если ПодчиненныеЗаказы.Количество() = 0 Тогда
					Сообщить("Внимание! Отсутствуют подчиненные Заказы клиентов.", СтатусСообщения.Внимание);	
				ИначеЕсли ПодчиненныеЗаказы.Количество() > 1 Тогда
					Сообщить("Внимание! Оформлено несколько Заказов клиентов. Их необходимо отредактировать вручную.", СтатусСообщения.Внимание);		
				ИначеЕсли ПодчиненныеЗаказы.Количество() = 1 Тогда
					Если Документы.КоммерческоеПредложениеКлиенту.ОбновитьЗаказКлиентаПоКоммерческомуПредложению(ПодчиненныеЗаказы[0], Объект.Ссылка) Тогда
						Сообщить("Заказ клиента обновлен успешно", СтатусСообщения.Информация);		
					Иначе	
						Сообщить("Внимание! Заказ клиента необходимо перепровести", СтатусСообщения.Внимание);		
					КонецЕсли;	
				Иначе
				КонецЕсли;	
				
			Иначе
				
				Сообщить("Внимание! Необходимо записать текущий документ", СтатусСообщения.Внимание);
				
			КонецЕсли;
			
		Иначе
			Отказ = Истина;
			ВызватьИсключение "Для внесения изминений необходино разрещение Савиной Н.В.!!!";
			
		КонецЕсли;
	Иначе
		
		
		Если НЕ Модифицированность Тогда
			
			ПодчиненныеЗаказы = Документы.КоммерческоеПредложениеКлиенту.НайтиЗаказПодчиненныеЗаказКлиента(Объект.Ссылка);
			Если ПодчиненныеЗаказы.Количество() = 0 Тогда
				Сообщить("Внимание! Отсутствуют подчиненные Заказы клиентов.", СтатусСообщения.Внимание);	
			ИначеЕсли ПодчиненныеЗаказы.Количество() > 1 Тогда
				Сообщить("Внимание! Оформлено несколько Заказов клиентов. Их необходимо отредактировать вручную.", СтатусСообщения.Внимание);		
			ИначеЕсли ПодчиненныеЗаказы.Количество() = 1 Тогда
				Если Документы.КоммерческоеПредложениеКлиенту.ОбновитьЗаказКлиентаПоКоммерческомуПредложению(ПодчиненныеЗаказы[0], Объект.Ссылка) Тогда
					Сообщить("Заказ клиента обновлен успешно", СтатусСообщения.Информация);		
				Иначе	
					Сообщить("Внимание! Заказ клиента необходимо перепровести", СтатусСообщения.Внимание);		
				КонецЕсли;	
			Иначе
			КонецЕсли;	
			
		Иначе
			
			Сообщить("Внимание! Необходимо записать текущий документ", СтатусСообщения.Внимание);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


//КОМАНДЫ

&НаКлиенте
Процедура ТоварыПерезаполнитьЗаказКлиента(Команда)
	
	Если НЕ Модифицированность Тогда		
		ПерезаполнитьЗаказКлиентаНаСервере()	 		
	Иначе
		Сообщить("Внимание! Необходимо записать текущий документ, перезаполнение при условие, что по документу нету реализаций, по всем вопросам обращаться к Савиной Н.В.");
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик команды "УстановитьОтметкиАктивностиВыделенныхСтрок".
//
&НаКлиенте
Процедура ТоварыПредварительноУстановитьОтметкиАктивностиВыделенныхСтрок(Команда)
	
	ТоварыПредварительноУстановитьСнятьОтметкиАктивностиВыделенныхСтрок();
	
КонецПроцедуры // УстановитьОтметкиАктивностиВыделенныхСтрок()

// Процедура - обработчик команды "СнятьОтметкиАктивностиВыделенныхСтрок".
//
&НаКлиенте
Процедура ТоварыПредварительноСнятьОтметкиАктивностиВыделенныхСтрок(Команда)
	
	ТоварыПредварительноУстановитьСнятьОтметкиАктивностиВыделенныхСтрок(Ложь);
	
КонецПроцедуры // СнятьОтметкиАктивностиВыделенныхСтрок()


// Процедура - обработчик события "ПередНачаломДобавления" таблицы "Товары".
//
&НаКлиенте
Процедура ТоварыПредварительноПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = РедактированиеДоступно();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Если ФлагРекурсии Тогда
		
		ФлагРекурсии = Ложь;
		Возврат;
		
	КонецЕсли;
	
	//Отказ        = Истина;
	ФлагРекурсии = Истина;
	
	//+++АК Элементы.ТоварыПредварительно.ДобавитьСтроку();
	
	//+++АК НоваяСтрока            = Элементы.ТоварыПредварительно.ТекущиеДанные;
	//+++АК НоваяСтрока.Активность = Истина;
	
КонецПроцедуры // ТоварыПередНачаломДобавления()

// Процедура - обработчик события "ПослеУдаления" таблицы "Товары".
//
&НаКлиенте
Процедура ТоварыПредварительноПослеУдаления(Элемент)
	
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы "Товары".
//
&НаКлиенте
Процедура ТоварыПредварительноПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	
КонецПроцедуры // ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "Выбор" табличной части "Товары".
//
&НаКлиенте
Процедура ТоварыПредварительноВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.ТоварыСуммаАвтоматическойСкидки Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ Объект.СкидкиРассчитаны Тогда
			Результат = Вопрос(НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
			Если Результат = КодВозвратаДиалога.Нет Тогда
				Возврат;
			Иначе
				
				СтруктураПараметры = Новый Структура;
				СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
				СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
				СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
				СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
				
				ТоварыПредварительноРассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
			ТоварыПредварительноРассчитатьСкидкиБезПримененияКОбъекту();
		КонецЕсли;
		
		ТекущиеДанные = Элементы.ТоварыПредварительно.ТекущиеДанные;
		СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыВыбор()

// Процедура - обработчик события "ПередУдалением" таблицы "Товары".
//
&НаКлиенте
Процедура ТоварыПредварительноПередУдалением(Элемент, Отказ)
	
	Отказ = РедактированиеДоступно();
	
КонецПроцедуры // ТоварыПередУдалением()

// ОБРАБОТЧИКИ "ПриИзменении".

// Процедура - обработчик события "ПриИзменении" поля "ТоварыАктивность".
//
&НаКлиенте
Процедура ТоварыПредварительноАктивностьПриИзменении(Элемент)
	
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры // ТоварыАктивностьПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ТоварыНоменклатура".
//
&НаКлиенте
Процедура ТоварыПредварительноНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПредварительно.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	АК_ОбщегоНазначения.ОбновитьСуммыПодвала(Объект.АК_ТоварыПредварительно, Объект.ЦенаВключаетНДС, ПредварительноСуммаВсего);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ТоварыХарактеристика".
//
&НаКлиенте
Процедура ТоварыПредварительноХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПредварительно.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры // ТоварыХарактеристикаПриИзменении()

//
&НаКлиенте
Процедура ТоварыПредварительноПунктДоставкиПриИзменении(Элемент)
	
	//
	ТекущаяСтрока = Элементы.ТоварыПредварительно.ТекущиеДанные;
	
	//
	//Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.АК_ПунктМонтажа) Тогда
	//	ТекущаяСтрока.АК_ПунктМонтажа = ТекущаяСтрока.АК_ПунктДоставки;
	//КонецЕсли;	
	
КонецПроцедуры

//
&НаКлиенте
Процедура ТоварыПредварительноПунктМонтажаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ТоварыУпаковка".
//
&НаКлиенте
Процедура ТоварыПредварительноУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПредварительно.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры // ТоварыУпаковкаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ТоварыКоличествоУпаковок".
//
&НаКлиенте
Процедура ТоварыПредварительноКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПредварительно.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	//Если ТекущаяСтрока.Количество > 0 Тогда
	//	СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	//ИначеЕсли ЗначениеЗаполнено(Объект.Соглашение) Тогда
	//	СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	//ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
	//	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	//КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	//СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	//ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	АК_ОбщегоНазначения.ОбновитьСуммыПодвала(Объект.АК_ТоварыПредварительно, Объект.ЦенаВключаетНДС, ПредварительноСуммаВсего);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры // ТоварыКоличествоУпаковокПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ТоварыВидЦены".
//
&НаКлиенте
Процедура ТоварыПредварительноВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПредварительно.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	//	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	//	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	//	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);	
	
КонецПроцедуры // ТоварыВидЦеныПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ТоварыЦена".
//
&НаКлиенте
Процедура ТоварыПредварительноЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПредварительно.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;	
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ТоварыСтавкаНДС".
//
&НаКлиенте
Процедура ТоварыПредварительноСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПредварительно.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);	
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	// АК ИГОРЬ 08 02 2013
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	// АК ИГОРЬ 08 02 2013
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	// АК ИГОРЬ 08 02 2013
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", ЛОЖЬ));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", ЛОЖЬ));
	
	// АК ИГОРЬ 08 02 2013
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ПроцентРучнойСкидки".
//
&НаКлиенте
Процедура ТоварыПредварительноПроцентРучнойСкидкиПриИзменении(Элемент)
	
	//ТекущаяСтрока = Элементы.ТоварыПредварительно.ТекущиеДанные;
	//
	//СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	//СтруктураДействий = Новый Структура;
	//СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	//СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	//СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	//СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	//СтруктураДействий.Вставить("ПересчитатьСумму");
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	//СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	//СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	//СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	//СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	//
	//ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//
	ТекущаяСтрока = Элементы.ТоварыПредварительно.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	//РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	
КонецПроцедуры // ТоварыПроцентРучнойСкидкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "СуммаРучнойСкидки".
//
&НаКлиенте
Процедура ТоварыПредварительноСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПредварительно.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);	
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	
КонецПроцедуры // ТоварыСуммаРучнойСкидкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ТоварыСумма".
//
&НаКлиенте
Процедура ТоварыПредварительноСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыПредварительно.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

//команды товары




//УСЛУГИ ДОПОЛНИТЕЛЬНЫЕ

&НаКлиенте
Процедура УслугиДополнительныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = РедактированиеДоступно();
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Если ФлагРекурсии Тогда
		
		ФлагРекурсии = Ложь;
		Возврат;
		
	КонецЕсли;
	
	//Отказ        = Истина;
	ФлагРекурсии = Истина;
	
	//+++АК Элементы.УслугиДополнительные.ДобавитьСтроку();
	
	//+++АК НоваяСтрока            = Элементы.УслугиДополнительные.ТекущиеДанные;
	//+++АК НоваяСтрока.Активность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиДополнительныеПередУдалением(Элемент, Отказ)
	
	Отказ = РедактированиеДоступно();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиДополнительныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	АК_ОбщегоНазначения.УслугиДополнительныеРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиДополнительныеПослеУдаления(Элемент)
	
	//
	УслугиДополнительныеРассчитать(Неопределено);	
	
	//
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

// ОБРАБОТЧИКИ "ПриИзменении".

// Процедура - обработчик события "ПриИзменении" поля "ТоварыСумма".
//
&НаКлиенте
Процедура ПриИзмененииСуммыВСтрокеДопУслуг(СтрокаТЧ)
	
	//
	ТекущаяСтрока = СтрокаТЧ;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);	
	
	//
	СтруктураПараметров = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию");
	СтруктураПараметров.Удалить("ИспользоватьАвтоматическиеСкидки");
	СтруктураПараметров.Удалить("ИспользоватьРучныеСкидки");
	
	//
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПараметров);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	
	//
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//
	УслугиДополнительныеПриИзмененииСтрокиТЧКлиент(ТекущаяСтрока, "Сумма");
	
	//
	АК_ОбщегоНазначения.УслугиДополнительныеРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

&НаКлиенте
Процедура УслугиДополнительныеПризнакРаспределитьНаТоварыПриИзменении(Элемент)
	ТоварыЗаполнитьПоТоварамИУслугам(ЭтаФорма);
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура УслугиДополнительныеПроцентПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.УслугиДополнительные.ТекущиеДанные;
	
	УслугиДополнительныеПриИзмененииСтрокиТЧКлиент(ТекущаяСтрока);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ТоварыАктивность".
//
&НаКлиенте
Процедура УслугиДополнительныеАктивностьПриИзменении(Элемент)
	
	//
	ТекущаяСтрока = Элементы.УслугиДополнительные.ТекущиеДанные;
	
	//
	УслугиДополнительныеПриИзмененииСтрокиТЧКлиент(ТекущаяСтрока);
	
	//
	АК_ОбщегоНазначения.УслугиДополнительныеРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	ТоварыЗаполнитьПоТоварамИУслугам(ЭтаФорма);
	//парампам();
	// СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры // ТоварыАктивностьПриИзменении()
//&НаКлиенте
//функция парампам()
//	
//КонецФункции

// Процедура - обработчик события "ПриИзменении" поля "ТоварыНоменклатура".
//
&НаКлиенте
Процедура УслугиДополнительныеНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.УслугиДополнительные.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);	
	
	Если ТекущаяСтрока.КоличествоУпаковок = 0 Тогда
		ТекущаяСтрока.КоличествоУпаковок = 1;
	КонецЕсли;	
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("УстановитьАктивность", Истина);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	АК_ОбщегоНазначения.УслугиДополнительныеРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	АК_ОбщегоНазначения.ОбновитьСуммыПодвала(Объект.АК_УслугиДополнительные, Объект.ЦенаВключаетНДС, УслугиСуммаВсего);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ТоварыУпаковка".
//
&НаКлиенте
Процедура УслугиДополнительныеУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.УслугиДополнительные.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	АК_ОбщегоНазначения.УслугиДополнительныеРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры // ТоварыУпаковкаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ТоварыКоличествоУпаковок".
//
&НаКлиенте
Процедура УслугиДополнительныеКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.УслугиДополнительные.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	АК_ОбщегоНазначения.УслугиДополнительныеРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры // ТоварыКоличествоУпаковокПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ТоварыЦена".
//
&НаКлиенте
Процедура УслугиДополнительныеЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.УслугиДополнительные.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//+++АК
	ПриИзмененииСуммыВСтрокеДопУслуг(ТекущаяСтрока);
	//---АК
	
	АК_ОбщегоНазначения.УслугиДополнительныеРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ТоварыСтавкаНДС".
//
&НаКлиенте
Процедура УслугиДополнительныеСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.УслугиДополнительные.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);	
	
	АК_ОбщегоНазначения.УслугиДополнительныеРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ТоварыСумма".
//
&НаКлиенте
Процедура УслугиДополнительныеСуммаПриИзменении(Элемент)
	
	//
	ТекущаяСтрока = Элементы.УслугиДополнительные.ТекущиеДанные;
	
	//
	ПриИзмененииСуммыВСтрокеДопУслуг(ТекущаяСтрока);
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

&НаКлиенте
Процедура УслугиДополнительныеПриИзмененииСтрокиТЧКлиент(СтрокаТЧ, ВидПоказателя = "Процент")
	
	//
	СуммаПродажи = 0;
	СуммаЗакупочная = 0;
	СуммаДоставка = 0;
	СуммаДоставкаКлиент = 0;
	СуммаДоставкаАгент = 0;
	СуммаМонтаж = 0;
	СуммаМонтажКлиент = 0;
	СуммаМонтажАгент = 0;
	
	//
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Активность", Истина);
	
	//
	НайденныеСтроки = Объект.АК_ТоварыПредварительно.НайтиСтроки(СтруктураПоиска);
	Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
		СуммаПродажи = СуммаПродажи + (_СтрокаТЧ.Количество * _СтрокаТЧ.Цена) +  ?(Объект.ЦенаВключаетНДС, 0, _СтрокаТЧ.СуммаНДС);
	КонецЦикла;	
	
	//
	НайденныеСтроки = Объект.АК_ТоварыЗакупочныеЦены.НайтиСтроки(СтруктураПоиска);
	Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
		СуммаЗакупочная = СуммаЗакупочная + _СтрокаТЧ.Сумма;
	КонецЦикла;	
	
	//
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Активность", Истина);
	СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_Доставка"));
	
	//
	НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
	Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
		СуммаДоставка = СуммаДоставка + _СтрокаТЧ.Сумма;
	КонецЦикла;	
	
	//
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Активность", Истина);
	СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_ДоставкаКлиент"));
	
	//
	НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
	Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
		СуммаДоставкаКлиент = СуммаДоставкаКлиент + _СтрокаТЧ.Сумма;
	КонецЦикла;	
	
	//
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Активность", Истина);
	СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_ДоставкаАгент"));
	
	//
	НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
	Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
		СуммаДоставкаАгент = СуммаДоставкаАгент + _СтрокаТЧ.Сумма;
	КонецЦикла;
	
	//
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Активность", Истина);
	СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_Монтаж"));
	
	//
	НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
	Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
		СуммаМонтаж = СуммаМонтаж + _СтрокаТЧ.Сумма;
	КонецЦикла;	
	
	//
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Активность", Истина);
	СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_МонтажКлиент"));
	
	//
	НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
	Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
		СуммаМонтажКлиент = СуммаМонтажКлиент + _СтрокаТЧ.Сумма;
	КонецЦикла;	
	
	//
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Активность", Истина);
	СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_МонтажАгент"));
	
	//
	НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
	Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
		СуммаМонтажАгент = СуммаМонтажАгент + _СтрокаТЧ.Сумма;
	КонецЦикла;
	
	//
	Если СтрокаТЧ.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.АК_Доставка") Тогда
		
		//
		Если ВидПоказателя = "Процент" Тогда
			
			//
			СуммаНаценки = СтрокаТЧ.АК_Процент/100 * СуммаПродажи;
			СтрокаТЧ.Сумма = СуммаНаценки;
			
			//
			ПриИзмененииСуммыВСтрокеДопУслуг(СтрокаТЧ);
			
		Иначе
			
			ПроцентНаценки = 0;
			Если СтрокаТЧ.Сумма <> 0 Тогда
				ПроцентНаценки = 100 * СтрокаТЧ.Сумма/СуммаПродажи;
			КонецЕсли;	
			
			СтрокаТЧ.АК_Процент = ПроцентНаценки;
			
		КонецЕсли;	
		
		//
		КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок;
		Если КоличествоУпаковок <> 0 Тогда
			КоличествоУпаковок = 1;
		КонецЕсли;	
		
		//
		СтрокаТЧ.Цена = СтрокаТЧ.Сумма/КоличествоУпаковок; 
		
		//
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Активность", Истина);
		СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_ДоставкаКлиент"));
		
		//
		НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
		
		//
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			//
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Активность", Истина);
			СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_ДоставкаАгент"));
			
			//
			НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
			
		КонецЕсли;	
		
		//
		Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
			УслугиДополнительныеПриИзмененииСтрокиТЧКлиент(_СтрокаТЧ);
		КонецЦикла;
		
		//
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Активность", Истина);
		СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_МонтажКлиент"));
		
		//
		НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
		
		//
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			//
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Активность", Истина);
			СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_МонтажАгент"));
			
			//
			НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
			
		КонецЕсли;	
		
		//
		Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
			УслугиДополнительныеПриИзмененииСтрокиТЧКлиент(_СтрокаТЧ);
		КонецЦикла;	
		
	ИначеЕсли СтрокаТЧ.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.АК_ДоставкаКлиент") Тогда
		
		//
		Если ВидПоказателя = "Процент" Тогда
			
			//
			СуммаНаценки = СтрокаТЧ.АК_Процент/100 * (СуммаПродажи + СуммаДоставка + СуммаМонтаж);
			СтрокаТЧ.Сумма = СуммаНаценки;
			
			//
			ПриИзмененииСуммыВСтрокеДопУслуг(СтрокаТЧ);
			
		Иначе
			
			ПроцентНаценки = 0;
			Если СтрокаТЧ.Сумма <> 0 Тогда
				ПроцентНаценки = 100 * СтрокаТЧ.Сумма/(СуммаПродажи + СуммаДоставка + СуммаМонтаж);
			КонецЕсли;	
			
			СтрокаТЧ.АК_Процент = ПроцентНаценки;
			
		КонецЕсли;	
		
		//
		КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок;
		Если КоличествоУпаковок <> 0 Тогда
			КоличествоУпаковок = 1;
		КонецЕсли;	
		
		//
		СтрокаТЧ.Цена = СтрокаТЧ.Сумма/КоличествоУпаковок; 
		
		//
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Активность", Истина);
		СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_ДоставкаАгент"));
		
		//
		НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
		Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
			УслугиДополнительныеПриИзмененииСтрокиТЧКлиент(_СтрокаТЧ);
		КонецЦикла;	
		
		//
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Активность", Истина);
		СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_МонтажАгент"));
		
		//
		НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
		Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
			УслугиДополнительныеПриИзмененииСтрокиТЧКлиент(_СтрокаТЧ);
		КонецЦикла;
		
	ИначеЕсли СтрокаТЧ.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.АК_ДоставкаАгент") Тогда
		
		//
		Если ВидПоказателя = "Процент" Тогда
			
			//
			СуммаНаценки = СтрокаТЧ.АК_Процент/100 * (СуммаПродажи + СуммаДоставка + СуммаМонтаж - СуммаЗакупочная - СуммаДоставкаКлиент - СуммаМонтажКлиент);
			СтрокаТЧ.Сумма = СуммаНаценки;
			
			//
			ПриИзмененииСуммыВСтрокеДопУслуг(СтрокаТЧ);
			
		Иначе
			
			ПроцентНаценки = 0;
			Если СтрокаТЧ.Сумма <> 0 Тогда
				ПроцентНаценки = 100 * СтрокаТЧ.Сумма/(СуммаПродажи + СуммаДоставка + СуммаМонтаж - СуммаЗакупочная - СуммаДоставкаКлиент - СуммаМонтажКлиент);
			КонецЕсли;	
			
			СтрокаТЧ.АК_Процент = ПроцентНаценки;
			
		КонецЕсли;	
		
		//
		КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок;
		Если КоличествоУпаковок <> 0 Тогда
			КоличествоУпаковок = 1;
		КонецЕсли;	
		
		//
		СтрокаТЧ.Цена = СтрокаТЧ.Сумма/КоличествоУпаковок; 
		
	ИначеЕсли СтрокаТЧ.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.АК_Монтаж") Тогда
		
		//
		Если ВидПоказателя = "Процент" Тогда
			
			//
			СуммаНаценки = СтрокаТЧ.АК_Процент/100 * СуммаПродажи;
			СтрокаТЧ.Сумма = СуммаНаценки;
			
			//
			ПриИзмененииСуммыВСтрокеДопУслуг(СтрокаТЧ);
			
		Иначе
			
			ПроцентНаценки = 0;
			Если СтрокаТЧ.Сумма <> 0 Тогда
				ПроцентНаценки = 100 * СтрокаТЧ.Сумма/СуммаПродажи;
			КонецЕсли;	
			
			СтрокаТЧ.АК_Процент = ПроцентНаценки;
			
		КонецЕсли;	
		
		//
		КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок;
		Если КоличествоУпаковок <> 0 Тогда
			КоличествоУпаковок = 1;
		КонецЕсли;	
		
		//
		СтрокаТЧ.Цена = СтрокаТЧ.Сумма/КоличествоУпаковок; 
		
		//
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Активность", Истина);
		СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_ДоставкаКлиент"));
		
		//
		НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
		
		//
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			//
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Активность", Истина);
			СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_ДоставкаАгент"));
			
			//
			НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
			
		КонецЕсли;	
		
		//
		Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
			УслугиДополнительныеПриИзмененииСтрокиТЧКлиент(_СтрокаТЧ);
		КонецЦикла;
		
		//
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Активность", Истина);
		СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_МонтажКлиент"));
		
		//
		НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
		
		//
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			//
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Активность", Истина);
			СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_МонтажАгент"));
			
			//
			НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
			
		КонецЕсли;	
		
		//
		Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
			УслугиДополнительныеПриИзмененииСтрокиТЧКлиент(_СтрокаТЧ);
		КонецЦикла;	
		
	ИначеЕсли СтрокаТЧ.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.АК_МонтажКлиент") Тогда
		
		//
		Если ВидПоказателя = "Процент" Тогда
			
			//
			СуммаНаценки = СтрокаТЧ.АК_Процент/100 * (СуммаПродажи + СуммаДоставка + СуммаМонтаж);
			СтрокаТЧ.Сумма = СуммаНаценки;
			
			//
			ПриИзмененииСуммыВСтрокеДопУслуг(СтрокаТЧ);
			
		Иначе
			
			ПроцентНаценки = 0;
			Если СтрокаТЧ.Сумма <> 0 Тогда
				ПроцентНаценки = 100 * СтрокаТЧ.Сумма/(СуммаПродажи + СуммаДоставка + СуммаМонтаж);
			КонецЕсли;	
			
			СтрокаТЧ.АК_Процент = ПроцентНаценки;
			
		КонецЕсли;	
		
		//
		КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок;
		Если КоличествоУпаковок <> 0 Тогда
			КоличествоУпаковок = 1;
		КонецЕсли;	
		
		//
		СтрокаТЧ.Цена = СтрокаТЧ.Сумма/КоличествоУпаковок; 
		
		//
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Активность", Истина);
		СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_ДоставкаАгент"));
		
		//
		НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
		Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
			УслугиДополнительныеПриИзмененииСтрокиТЧКлиент(_СтрокаТЧ);
		КонецЦикла;	
		
		//
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Активность", Истина);
		СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_МонтажАгент"));
		
		//
		НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
		Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
			УслугиДополнительныеПриИзмененииСтрокиТЧКлиент(_СтрокаТЧ);
		КонецЦикла;
		
	ИначеЕсли СтрокаТЧ.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.АК_МонтажАгент") Тогда
		
		//
		Если ВидПоказателя = "Процент" Тогда
			
			//
			СуммаНаценки = СтрокаТЧ.АК_Процент/100 * (СуммаПродажи + СуммаДоставка + СуммаМонтаж - СуммаЗакупочная - СуммаДоставкаКлиент - СуммаМонтажКлиент);
			СтрокаТЧ.Сумма = СуммаНаценки;
			
			//
			ПриИзмененииСуммыВСтрокеДопУслуг(СтрокаТЧ);
			
		Иначе
			
			ПроцентНаценки = 0;
			Если СтрокаТЧ.Сумма <> 0 Тогда
				ПроцентНаценки = 100 * СтрокаТЧ.Сумма/(СуммаПродажи + СуммаДоставка + СуммаМонтаж - СуммаЗакупочная - СуммаДоставкаКлиент - СуммаМонтажКлиент);
			КонецЕсли;	
			
			СтрокаТЧ.АК_Процент = ПроцентНаценки;
			
		КонецЕсли;	
		
		//
		КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок;
		Если КоличествоУпаковок <> 0 Тогда
			КоличествоУпаковок = 1;
		КонецЕсли;	
		
		//
		СтрокаТЧ.Цена = СтрокаТЧ.Сумма/КоличествоУпаковок; 
		
	КонецЕсли;
	
	//
	АК_ОбщегоНазначения.УслугиДополнительныеРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	
КонецПроцедуры	

// Устанавливает или снимает флаг активности у выделенных пользователем строк
// табличной части Товары
//
// Параметры
// Установить - Определяет действие над флагом активности: установить или снять
//
&НаКлиенте
Процедура УслугиДополнительныеУстановитьСнятьОтметкиАктивностиВыделенныхСтрок(Установить = Истина)
	
	Если Объект.АК_УслугиДополнительные.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Таблица товаров не заполнена.'"));
		Возврат;
	КонецЕсли;
	
	АктивностьИзменена = Ложь;
	
	Для Каждого ТекущаяСтрока Из Элементы.УслугиДополнительные.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.АК_УслугиДополнительные.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Активность <> Установить Тогда
			
			СтрокаТаблицы.Активность = Установить;
			АктивностьИзменена       = Истина;
			
			УслугиДополнительныеПриИзмененииСтрокиТЧКлиент(СтрокаТаблицы, "Процент");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если АктивностьИзменена Тогда
		АК_ОбщегоНазначения.УслугиДополнительныеРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // УстановитьСнятьОтметкиАктивностиВыделенныхСтрок()

&НаКлиенте
Процедура УслугиДополнительныеУстановитьОтметкиАктивностиВыделенныхСтрок(Команда)
	УслугиДополнительныеУстановитьСнятьОтметкиАктивностиВыделенныхСтрок();
КонецПроцедуры

&НаКлиенте
Процедура УслугиДополнительныеСнятьОтметкиАктивностиВыделенныхСтрок(Команда)
	УслугиДополнительныеУстановитьСнятьОтметкиАктивностиВыделенныхСтрок(Ложь);
КонецПроцедуры

//
//
&НаСервере
Процедура ЗаполнитьУслугиДополнительныеСервер() Экспорт
	
	//
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Активность", Истина);
	
	//
	НайденныеСтроки = Объект.АК_ТоварыПредварительно.НайтиСтроки(СтруктураПоиска);
	
	//
	тзУслуги = Новый ТаблицаЗначений;
	тзУслуги.Колонки.Добавить("Активность");
	тзУслуги.Колонки.Добавить("АК_ПризнакРаспределитьНаТовары");
	тзУслуги.Колонки.Добавить("Номенклатура");
	тзУслуги.Колонки.Добавить("АК_ПунктНазначения");
	
	//
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.АК_ПунктДоставки) Тогда
			НоваяСтрока = тзУслуги.Добавить();
			НоваяСтрока.Активность = Истина;
			НоваяСтрока.АК_ПризнакРаспределитьНаТовары = Истина;
			НоваяСтрока.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.АК_Доставка");
			НоваяСтрока.АК_ПунктНазначения = СтрокаТЧ.АК_ПунктДоставки;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(СтрокаТЧ.АК_ПунктМонтажа) Тогда
			НоваяСтрока = тзУслуги.Добавить();
			НоваяСтрока.Активность = Истина;
			НоваяСтрока.АК_ПризнакРаспределитьНаТовары = Истина;
			НоваяСтрока.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.АК_Монтаж");
			НоваяСтрока.АК_ПунктНазначения = СтрокаТЧ.АК_ПунктМонтажа;
		КонецЕсли;	
		
	КонецЦикла;	
	
	//
	тзУслуги.Свернуть("Активность, АК_ПризнакРаспределитьНаТовары, Номенклатура, АК_ПунктНазначения");
	тзУслуги.Сортировать("Номенклатура, АК_ПунктНазначения");
	
	//
	Для Каждого СтрокаТЗ Из тзУслуги Цикл
		
		//
		НоваяСтрока = Объект.АК_УслугиДополнительные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		
		//
		НоваяСтрока.КоличествоУпаковок = 1;
		
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура УслугиДополнительныеЗаполнить(Команда)
	
	//
	Объект.АК_УслугиДополнительные.Очистить();
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);	
	//
	ЗаполнитьУслугиДополнительныеСервер();
	
	//
	Для Каждого СтрокаТЧ Из Объект.АК_УслугиДополнительные Цикл
		
		//
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", СтрокаТЧ.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", СтрокаТЧ.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);	
		
		АК_ОбщегоНазначения.УслугиДополнительныеРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
		ЦенообразованиеКлиентСервер.ОбновитьСуммыПодвала(Объект.АК_УслугиДополнительные, Объект.ЦенаВключаетНДС, УслугиСуммаВсего);
		
	КонецЦикла;
	
	//
	Элементы.УслугиДополнительные.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиДополнительныеРассчитать(Команда)
	
	//
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Активность", Истина);
	СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_Доставка"));
	
	//
	НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
	
	//
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		//
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Активность", Истина);
		СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_ДоставкаКлиент"));
		
		//
		НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
		
	КонецЕсли;	
	
	//
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		//
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Активность", Истина);
		СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_ДоставкаАгент"));
		
		//
		НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
		
	КонецЕсли;	
	
	//
	Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
		УслугиДополнительныеПриИзмененииСтрокиТЧКлиент(_СтрокаТЧ);
	КонецЦикла;
	
	//
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Активность", Истина);
	СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_Монтаж"));
	
	//
	НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
	
	//
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		//
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Активность", Истина);
		СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_МонтажКлиент"));
		
		//
		НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
		
	КонецЕсли;	
	
	//
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		//
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Активность", Истина);
		СтруктураПоиска.Вставить("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.АК_МонтажАгент"));
		
		//
		НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска);
		
	КонецЕсли;	
	
	//
	Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
		УслугиДополнительныеПриИзмененииСтрокиТЧКлиент(_СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////
&НаКлиенте
Процедура ТоварыАК_ЭскизФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//
	СтандартнаяОбработка = Ложь;
	
	//
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Предупреждение("Необходимо записать документ");
		Возврат;
	КонецЕсли;
	
	//
	Заголовок = НСтр("ru = 'Присоединенные файлы'");
	
	//
	_Параметры = Новый Структура;
	_Параметры.Вставить("ВладелецФайла", Объект.Ссылка);
	_Параметры.Вставить("ПризнакВыбор", Истина);
	_Параметры.Вставить("ЗаголовокФормы", Заголовок);
	
	//
	ФормаВыбора = ПолучитьФорму(
	"Справочник.Файлы.Форма.ФормаСпискаПрисоединенныхФайлов", 
	_Параметры,
	Элемент);
	
	//
	ФормаВыбора.Параметры.РежимВыбора = Истина;
	
	//
	ЗначениеВыбора = ФормаВыбора.ОткрытьМодально();
	
	//
	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		Элементы.Товары.ТекущиеДанные.АК_ЭскизФайл = ЗначениеВыбора;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаполнитьПоТоварамИУслугам(Команда)
	
	//
	Объект.Товары.Очистить();
	
	//
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Активность", Истина);
	
	//
	НайденныеСтроки = Объект.АК_ТоварыПредварительно.НайтиСтроки(СтруктураПоиска);
	Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		//ЗаполнитьЗначенияСвойств(НоваяСтрока, _СтрокаТЧ, , "ПроцентРучнойСкидки, СуммаРучнойСкидки, ПроцентАвтоматическойСкидки, СуммаАвтоматическойСкидки");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, _СтрокаТЧ);
		НоваяСтрока.ХарактеристикиИспользуются = ЗначениеЗаполнено(НоваяСтрока.Характеристика);
	КонецЦикла;	
	
	//
	БазаРаспределенияСумма = Объект.Товары.Итог("Сумма");
	БазаРаспределенияСуммаНДС = Объект.Товары.Итог("СуммаНДС");
	
	//
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Активность", Истина);
	СтруктураПоиска.Вставить("АК_ПризнакРаспределитьНаТовары", Истина);
	
	//
	_СуммаКРаспределению = 0;
	_СуммаНДСКРаспределению = 0;
	
	//
	_СуммаРаспределено = 0;
	_СуммаНДСРаспределено = 0;
	
	//
	ТоварыПоследняяСтрока = Неопределено;
	
	//
	НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска); 
	Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
		
		//
		СуммаКРаспределению = _СтрокаТЧ.Сумма;
		СуммаНДСКРаспределению = _СтрокаТЧ.СуммаНДС;
		
		//
		_СуммаКРаспределению = _СуммаКРаспределению + СуммаКРаспределению;
		_СуммаНДСКРаспределению = _СуммаНДСКРаспределению + СуммаНДСКРаспределению;
		
		//
		СуммаРаспределено = 0;
		СуммаНДСРаспределено = 0;
		
		//
		СуммаКоррекция = 0;
		СуммаНДСКоррекция = 0;
		
		//
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			
			//                             
			Если _СтрокаТЧ.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.АК_Доставка") Тогда
				
				СтрокаТЧ.АК_ПроцентНаценкиДоставка = СтрокаТЧ.АК_ПроцентНаценкиДоставка + _СтрокаТЧ.АК_Процент;
				
			КонецЕсли;
			
			//                             
			Если _СтрокаТЧ.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.АК_ДоставкаКлиент")	Тогда
				
				СтрокаТЧ.АК_ПроцентНаценкиДоставкаКлиент = СтрокаТЧ.АК_ПроцентНаценкиДоставкаКлиент + _СтрокаТЧ.АК_Процент;
				
			КонецЕсли;
			
			//                             
			Если _СтрокаТЧ.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.АК_ДоставкаАгент")	Тогда
				
				СтрокаТЧ.АК_ПроцентНаценкиДоставкаАгент = СтрокаТЧ.АК_ПроцентНаценкиДоставкаАгент + _СтрокаТЧ.АК_Процент;
				
			КонецЕсли;	  
			
			//                             
			Если _СтрокаТЧ.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.АК_Монтаж") Тогда
				
				СтрокаТЧ.АК_ПроцентНаценкиМонтаж = СтрокаТЧ.АК_ПроцентНаценкиМонтаж + _СтрокаТЧ.АК_Процент;
				
			КонецЕсли;
			
			//                             
			Если _СтрокаТЧ.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.АК_МонтажКлиент")	Тогда
				
				СтрокаТЧ.АК_ПроцентНаценкиМонтажКлиент = СтрокаТЧ.АК_ПроцентНаценкиМонтажКлиент + _СтрокаТЧ.АК_Процент;
				
			КонецЕсли;
			
			//                             
			Если _СтрокаТЧ.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.АК_МонтажАгент")	Тогда
				
				СтрокаТЧ.АК_ПроцентНаценкиМонтажАгент = СтрокаТЧ.АК_ПроцентНаценкиМонтажАгент + _СтрокаТЧ.АК_Процент;
				
			КонецЕсли;
			
			//
			Сумма = 0;
			СуммаНДС = 0;
			
			//
			Если БазаРаспределенияСумма <> 0 Тогда
				Сумма =  Окр(СуммаКРаспределению * СтрокаТЧ.Сумма/БазаРаспределенияСумма, 2);
			КонецЕсли;
			
			//
			Если БазаРаспределенияСуммаНДС <> 0 И СтрокаТЧ.КоличествоУпаковок <> 0 Тогда
				СуммаНДС =  Окр(СуммаНДСКРаспределению * СтрокаТЧ.СуммаНДС/СтрокаТЧ.КоличествоУпаковок/БазаРаспределенияСуммаНДС, 2);
			КонецЕсли;	
			
			//
			СтрокаТЧ.АК_ДопУслугиСумма =  СтрокаТЧ.АК_ДопУслугиСумма + Сумма;
			СтрокаТЧ.АК_ДопУслугиСуммаНДС =  СтрокаТЧ.АК_ДопУслугиСуммаНДС + СуммаНДС;
			
			//
			СуммаРаспределено = СуммаРаспределено + Сумма;
			СуммаНДСРаспределено = СуммаНДСРаспределено + СуммаНДС;
			
			//
			Если Объект.Товары.Индекс(СтрокаТЧ) = Объект.Товары.Количество() - 1 Тогда
				
				СуммаКоррекция = (СуммаКРаспределению - СуммаРаспределено);
				СуммаНДСКоррекция = (СуммаНДСКРаспределению - СуммаНДСРаспределено);
				
				СтрокаТЧ.АК_ДопУслугиСумма =  СтрокаТЧ.АК_ДопУслугиСумма + СуммаКоррекция;
				СтрокаТЧ.АК_ДопУслугиСуммаНДС =  СтрокаТЧ.АК_ДопУслугиСуммаНДС + СуммаНДСКоррекция;
				
			КонецЕсли;	
			
			//
			ТоварыПоследняяСтрока  =  СтрокаТЧ;
			
		КонецЦикла;	
		
		_СуммаРаспределено = _СуммаРаспределено +  СуммаРаспределено + СуммаКоррекция;
		_СуммаНДСРаспределено = _СуммаНДСРаспределено +  СуммаНДСРаспределено + СуммаНДСКоррекция;
		
	КонецЦикла;	
	
	//
	Если ТоварыПоследняяСтрока <> Неопределено Тогда
		ТоварыПоследняяСтрока.АК_ДопУслугиСумма =  ТоварыПоследняяСтрока.АК_ДопУслугиСумма + (_СуммаКРаспределению - _СуммаРаспределено);
		ТоварыПоследняяСтрока.АК_ДопУслугиСуммаНДС =  ТоварыПоследняяСтрока.АК_ДопУслугиСуммаНДС + (_СуммаНДСКРаспределению - _СуммаНДСРаспределено);
	КонецЕсли;	
	
	//
	_спУслуги = Новый СписокЗначений;
	_спУслуги.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.АК_ДоставкаАгент"));
	_спУслуги.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.АК_ДоставкаКлиент"));
	_спУслуги.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.АК_МонтажАгент"));
	_спУслуги.Добавить(ПредопределенноеЗначение("Справочник.Номенклатура.АК_МонтажКлиент"));
	
	//
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Активность", Истина);
	СтруктураПоиска.Вставить("АК_ПризнакРаспределитьНаТовары", Ложь);
	
	//
	НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(СтруктураПоиска); 
	Для Каждого _СтрокаТЧ Из НайденныеСтроки Цикл
		
		Если _спУслуги.НайтиПоЗначению(_СтрокаТЧ.Номенклатура) = Неопределено Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, _СтрокаТЧ);
		КонецЕсли;	
		
	КонецЦикла;	                                    
	
	//
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		//
		Если Объект.ЦенаВключаетНДС Тогда
			
			//
			СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + СтрокаТЧ.АК_ДопУслугиСумма;
			
		Иначе	
			
			//
			СуммаВсего = СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС + СтрокаТЧ.АК_ДопУслугиСумма + СтрокаТЧ.АК_ДопУслугиСуммаНДС;
			
			//
			ПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЧ.СтавкаНДС);
			
			//
			СтрокаТЧ.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СуммаВсего, ПроцентНДС, Истина);
			СтрокаТЧ.Сумма = СуммаВсего - СтрокаТЧ.СуммаНДС;
			
			
		КонецЕсли;		
		
		
		//Цену не пересчитывам иначе все
		
		//Если СтрокаТЧ.КоличествоУпаковок <> 0 Тогда
		//	
		//	//
		//	//СуммаБезСкидок = (СтрокаТЧ.Сумма + СтрокаТЧ.СуммаРучнойСкидки + СтрокаТЧ.СуммаАвтоматическойСкидки)/(1-(СтрокаТЧ.ПроцентРучнойСкидки + СтрокаТЧ.ПроцентАвтоматическойСкидки)/100);
		//	//СуммаБезСкидок = СтрокаТЧ.Сумма/(1-(СтрокаТЧ.ПроцентРучнойСкидки + СтрокаТЧ.ПроцентАвтоматическойСкидки)/100);
		//	СтрокаТЧ.Цена = СтрокаТЧ.Сумма/СтрокаТЧ.КоличествоУпаковок;
		//	СтрокаТЧ.Сумма = СтрокаТЧ.Цена*СтрокаТЧ.КоличествоУпаковок;
		//	
		//	////
		//	//СтрокаТЧ.СуммаАвтоматическойСкидки =  СуммаБезСкидок - СтрокаТЧ.Сумма;
		//	//СтрокаТЧ.ПроцентАвтоматическойСкидки =  100 * СтрокаТЧ.СуммаАвтоматическойСкидки/СуммаБезСкидок;
		//	
		//КонецЕсли;
		
		//
		СтруктураДействий = Новый Структура;
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);	
		
		//
		//ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСуммуВсегоВСтрокеТаблицы(СтрокаТЧ, Объект.ЦенаВключаетНДС);
		
	КонецЦикла;	
	
	//
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения( ЭтаФорма);
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	
	Для Каждого ТекСтр из Объект.Товары цикл
		СумаБезСкидки = ТекСтр.Сумма / ((100-ТекСтр.ПроцентРучнойСкидки)/100);
		ТекСтр.СуммаРучнойСкидки = СумаБезСкидки * (ТекСтр.ПроцентРучнойСкидки)/100;
		ТекСтр.Цена =  СумаБезСкидки / ТекСтр.Количество;
	КонецЦикла;
	
	Объект.СкидкиРассчитаны = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// АСТЭК

&НаСервереБезКонтекста
Функция ПолучитьКонтранетнаПартнераПоУмолчанию(Партнер)
	Возврат ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
КонецФункции

&НаСервере
Функция ПолучитьЗначениеРеквизита(Объект, ИмяРеквизита)
	
	Результат = Неопределено;
	
	Попытка
		Результат = Объект[ИмяРеквизита];
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаполнитьИндивидульноеСоглашениеНаОснованииТипового(Знач Объект)
	
	Соглашение = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.СоглашенияСКлиентами"));
	Соглашение.ЗаполнитьУсловияПродажПоCоглашению();
	ЗначениеВДанныеФормы(Соглашение, Объект);	
	
	Возврат Объект;
	
КонецФункции	

&НаСервере
Процедура ЗаполнитьКомерческоеПоСоглашению(Соглашение)
	текОбъект = РеквизитФормыВЗначение("Объект");
	ЗаполнитьЗначенияСвойств(текОбъект, Соглашение,, "Товары, СкидкиНаценки, ДополнительныеРеквизиты");
	ЗначениеВРеквизитФормы(текОбъект,"Объект");
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьИзЕxcel(Команда)
	ИмпортИзВнешнегоФайла();
КонецПроцедуры


&НаКлиенте
Процедура ИмпортИзВнешнегоФайла()
	//Выбор и загрузка файла.
	Если НЕ  ПодключитьРасширениеРаботыСФайлами() Тогда
		УстановитьРасширениеРаботыСФайлами();
	КонецЕсли;
	
	Если  ПодключитьРасширениеРаботыСФайлами() Тогда
		Режим =  РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый  ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		Фильтр = "Текст(*.xlsx)|*.xlsx";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.Заголовок = "Выберите файл для импорта";
		Если  ДиалогОткрытияФайла.Выбрать() Тогда
			
			ДанныеНачинаютсяС = 2;
			МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
			ПомещаемыеФайлы = Новый Массив;
			Для  Каждого Файл Из МассивФайлов Цикл
				ТекФайл = Новый Файл(Файл);
				Описание = Новый ОписаниеПередаваемогоФайла(Файл, "");
				ПомещаемыеФайлы.Добавить(Описание);
			КонецЦикла;
			
			ПомещенныеФайлы = Новый Массив;
			
			Если  ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ) Тогда
				//Запуск импорта
				ОчищатьТЧ = Вопрос("Очистить табличную чать?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да;
				ИмпортироватьФайлИзВременногоХранилищаВТЗ(ПомещенныеФайлы, ДанныеНачинаютсяС,ОчищатьТЧ);
			КонецЕсли;
		Иначе
			Предупреждение("Файл(ы) не  выбран!");
		КонецЕсли;
	Иначе
		Предупреждение(НСтр("ru ='Данная возможность недоступна, так как не подключено расширение работы с файлами.'", "ru"));
	КонецЕсли;
КонецПроцедуры //ИмпортИзВнешнегоФайла()   


&НаСервере
Процедура ЗаполнитьДокументПоПолученнымДаннымСервер(ПолученныеДанные,ОчиститьТЧ)
	
	//Обход файлов, записанных  во временное хранилище
	Если ОчиститьТЧ Тогда
		Объект.АК_ТоварыПредварительно.Очистить();
	КонецЕсли;
	
	Для каждого НоваяПозиция из ПолученныеДанные Цикл
		НоваяСтрока=Объект.АК_ТоварыПредварительно.Добавить();
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",НоваяПозиция.Номенклатура);
		НоваяСтрока.Количество= НоваяПозиция.Количество; 	
		НоваяСтрока.КоличествоУпаковок=  НоваяПозиция.КоличествоУпаковок;
		НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
		НоваяСтрока.АК_ПризнакНестандарт= НоваяПозиция.ПризнакНестандрат;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьСуществованиеНоменклатуры(Артикул)
	НайденнаяНоменклатура =  Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
	Если НайденнаяНоменклатура.Пустая() тогда	 
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;	
КонецФункции

&НаКлиенте
Процедура ИмпортироватьФайлИзВременногоХранилищаВТЗ(МассивФайлов,  ДанныеНачинаютсяС, ОчиститьТЧ = Истина)
	
	ПолученныеДанные=Новый Массив;
	Для Каждого  ЭлементМассива Из МассивФайлов Цикл
		ФайлИзХранилища =  ПолучитьИзВременногоХранилища(ЭлементМассива.Хранение);
		ВременныйФайл = ПолучитьИмяВременногоФайла("xlsx");
		//Сохранение во временнный файл на диске
		ФайлИзХранилища.Записать(ВременныйФайл);
		
		//Импорт
		Док =  ПолучитьCOMОбъект(ВременныйФайл);
		Артикул = Док.Sheets(1).Cells(ДанныеНачинаютсяС, 2).Value;
		Пока СокрЛП(Артикул) <> "" Цикл
			
			Если НЕ ПроверитьСуществованиеНоменклатуры(Артикул) Тогда		   
				//АК чечин петр
				ДанныеНачинаютсяС = ДанныеНачинаютсяС + 1;
				Артикул = СокрЛП(Док.Sheets(1).Cells(ДанныеНачинаютсяС, 2).Value);
				
				Сообщить("Не найдена номенклатуры с артикулом "+Артикул);
				Продолжить;
			КонецЕсли;
			
			НоваяПозиция	=	Новый Структура("Номенклатура,Количество,КоличествоУпаковок,ПризнакНестандрат");
			НоваяПозиция.Номенклатура = Артикул;
			НоваяПозиция.Количество = Док.Sheets(1).Cells(ДанныеНачинаютсяС, 4).Value;
			НоваяПозиция.КоличествоУпаковок = Док.Sheets(1).Cells(ДанныеНачинаютсяС, 4).Value;
			НоваяПозиция.ПризнакНестандрат = ?(Док.Sheets(1).Cells(ДанныеНачинаютсяС, 5).Value="да",Истина,ложь);
			ПолученныеДанные.Добавить(НоваяПозиция);
			
			ДанныеНачинаютсяС = ДанныеНачинаютсяС + 1;
			Артикул = Док.Sheets(1).Cells(ДанныеНачинаютсяС, 2).Value;
		КонецЦикла;
		
		ЗаполнитьДокументПоПолученнымДаннымСервер(ПолученныеДанные,ОчиститьТЧ);
		
		Сообщить("Импорт завершён");
		Док.Application.Quit();
	КонецЦикла;
КонецПроцедуры  //ИмпортироватьФайлИзВременногоХранилищаВТЗ() 

///////////////////////////////////////////////////////////////////////////////
// Замена номенклатуры

// Обработчик команды "Заменить номенклатуру", открывает одно с быстрой заменой 
//  номенклатурных позиций по похожему артикулу
//
&НаКлиенте
Процедура ЗаменитьНоменклатуру(Команда)
	
	ПараметрыОткрытия = Новый Структура("АдресНоменклатуры", АдресТоварыПредварительно());
	АдресТаблицыЗамен = ОткрытьФормуМодально("Документ.КоммерческоеПредложениеКлиенту.Форма.АК_ЗаменаНоменклатуры", ПараметрыОткрытия, ЭтаФорма);
	Если Не АдресТаблицыЗамен = Неопределено Тогда
		ЗаменитьТоварыПредварительно(АдресТаблицыЗамен);	
	КонецЕсли;
	
КонецПроцедуры

// Функция помещает во временное хранилище выгрузку ТЧ "Товары предварительно"
//  и возвращает адрес
//
&НаСервере
Функция АдресТоварыПредварительно()
	
	// Тебличную часть переносим вместе с идентификатором строк
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Для каждого ТекСтрока Из Объект.АК_ТоварыПредварительно Цикл
		НовСтрока = ТЗ.Добавить();
		НовСтрока.Номенклатура = ТекСтрока.Номенклатура;
		НовСтрока.НомерСтроки = ТекСтрока.ПолучитьИдентификатор();
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТЗ);	
	
КонецФункции // АдресТоварыПредварительно()

// Производит замены в ТЧ "Товары предварительно" согластно указанной таблице
//
&НаКлиенте
Процедура ЗаменитьТоварыПредварительно(АдресТаблицыЗамен)
	
	ТабНоменклатуры = ПолучитьИзВременногоХранилища(АдресТаблицыЗамен);
	
	Для каждого ТекСтрока Из ТабНоменклатуры Цикл
		ТекущаяСтрока = Объект.АК_ТоварыПредварительно.НайтиПоИдентификатору(ТекСтрока.НомерСтроки);
		СтХарактеристика = ТекущаяСтрока.Характеристика;
		ТекущаяСтрока.Номенклатура = ТекСтрока.Номенклатура;
		ТекущаяСтрока.Характеристика = ПодобратьХарактеристику(ТекущаяСтрока.Номенклатура, СтХарактеристика);
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
			СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
		КонецЕсли;
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьПризнакАктивностьБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	АК_ОбщегоНазначения.ОбновитьСуммыПодвала(Объект.АК_ТоварыПредварительно, Объект.ЦенаВключаетНДС, ПредварительноСуммаВсего);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

// Подбирает аналогичную Характеристику 
//
&НаСервере
Функция ПодобратьХарактеристику(Номенклатура, Характеристика)
	
	КолСвойств = Характеристика.ДополнительныеРеквизиты.Количество();
	КритерииПоиска = Новый Соответствие;
	Для каждого ТекСвойство Из Характеристика.ДополнительныеРеквизиты Цикл
		КритерииПоиска.Вставить(ТекСвойство.Свойство, ТекСвойство.Значение); 
	КонецЦикла; 
	
	
	Выборка = Справочники.ХарактеристикиНоменклатуры.Выбрать(,Номенклатура);
	Пока Выборка.Следующий() Цикл
		КолСовпадений = 0;
		//сравниваем только с равным количеством свойств
		Если КолСвойств = Выборка.ДополнительныеРеквизиты.Количество() Тогда
			Для Каждого ТекСвойство из Выборка.ДополнительныеРеквизиты Цикл
				эталонЗначение = СтрЗаменить(НРег(КритерииПоиска.Получить(ТекСвойство.Свойство))," " ,"");
				эталонЗначение = СтрЗаменить(эталонЗначение,"x","х");//англ. на рус.
				
				текЗначение = СтрЗаменить(НРег(ТекСвойство.Значение)," " ,"");
				текЗначение = СтрЗаменить(текЗначение,"x","х");//англ. на рус.
				
				Если эталонЗначение = текЗначение Тогда
					КолСовпадений = КолСовпадений+1;
				КонецЕсли;
			КонецЦикла;
			//все совпадает
			Если КолСовпадений = КолСвойств Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	
	
	//// Отбираем в запросе характеристики по совпадению количества и значениям дополнительных свойств
	////  или по их отсутствию
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка КАК Характеристика,
	//	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХарактеристикиНоменклатурыДополнительныеРеквизиты.НомерСтроки) КАК КоличествоСтрок
	//	|ПОМЕСТИТЬ ВремТаб
	//	|ИЗ
	//	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	//	|ГДЕ
	//	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка.Владелец = &Владелец
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка
	//	|ИЗ
	//	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	//	|ГДЕ
	//	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение В(&Значения)
	//	|	И ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка В
	//	|			(ВЫБРАТЬ
	//	|				ВремТаб.Характеристика
	//	|			ИЗ
	//	|				ВремТаб КАК ВремТаб
	//	|			ГДЕ
	//	|				ВремТаб.КоличествоСтрок = &КоличествоСтрок)
	//	|
	//	|ОБЪЕДИНИТЬ ВСЕ
	//	|
	//	|ВЫБРАТЬ
	//	|	ХарактеристикиНоменклатуры.Ссылка
	//	|ИЗ
	//	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	//	|ГДЕ
	//	|	ХарактеристикиНоменклатуры.Владелец = &Владелец
	//	|	И НЕ ХарактеристикиНоменклатуры.Ссылка В
	//	|				(ВЫБРАТЬ
	//	|					ВремТаб.Характеристика
	//	|				ИЗ
	//	|					ВремТаб КАК ВремТаб)
	//	|	И &КоличествоСтрок = 0";
	
	//Запрос.УстановитьПараметр("Владелец", Номенклатура);
	//Запрос.УстановитьПараметр("Значения", Характеристика.ДополнительныеРеквизиты.ВыгрузитьКолонку("Значение"));
	//Запрос.УстановитьПараметр("КоличествоСтрок", Характеристика.ДополнительныеРеквизиты.Количество());
	
	//Результат = Запрос.Выполнить();
	
	//ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//	Если Характеристика.ДополнительныеРеквизиты.Количество() = 0 Тогда
	//		Возврат ВыборкаДетальныеЗаписи.Ссылка;		
	//	Иначе
	//		// Проверяем весь массив дополнительных свойств
	//		// Счетчик используем для отслеживания совпадения по всем свойствам			СовпалоСвойств = 0;
	//		СовпалоСвойств = 0;
	//		Для каждого ТекСвойство Из ВыборкаДетальныеЗаписи.Ссылка.ДополнительныеРеквизиты Цикл
	//			Если Не КритерииПоиска[ТекСвойство.Свойство] = ТекСвойство.Значение Тогда
	//				// Несовпадение по свойствам - пропускаем
	//				СовпалоСвойств = 0;
	//				Прервать;				
	//			КонецЕсли;
	//			СовпалоСвойств = СовпалоСвойств + 1;
	//		КонецЦикла;
	//		
	//		Если СовпалоСвойств = Характеристика.ДополнительныеРеквизиты.Количество() Тогда
	//			// Все совпало
	//			Возврат ВыборкаДетальныеЗаписи.Ссылка;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // ПодобратьХарактеристику()

//{ ООО «АСТЭК» Разработчик : Терёхин Дата: 10.05.2013
// TaskID: PAX-00020
&НаКлиенте
Процедура ТоварыСнятьВсе(Команда)
	ТоварыУстановитьСнятьОтметкиАктивностиВсехСтрок(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура УслугиДополнительноОтметитьВсе(Команда)
	УслугиДополнительныеУстановитьСнятьОтметкиАктивностиВсехСтрок(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПредварительноОтметитьВсе(Команда)
	ТоварыПредварительноУстановитьСнятьОтметкиАктивностиВсехСтрок(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПредварительноСнятьВсе(Команда)
	ТоварыПредварительноУстановитьСнятьОтметкиАктивностиВсехСтрок(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтметитьВсе(Команда)
	ТоварыУстановитьСнятьОтметкиАктивностиВсехСтрок(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиДополнительноСнятьВсе(Команда)
	УслугиДополнительныеУстановитьСнятьОтметкиАктивностиВсехСтрок(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУстановитьСнятьОтметкиАктивностиВсехСтрок(Установить = Истина)
	
	Если Объект.Товары.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Таблица товаров не заполнена.'"));
		Возврат;
	КонецЕсли;
	
	АктивностьИзменена = Ложь;
	
	СтруктураДействий = Новый Структура(
	"ЗаполнитьДубликатыЗависимыхРеквизитов",
	ПолучитьСтруктуруЗависимыхРеквизитов()
	);
	
	Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Активность <> Установить Тогда
			
			СтрокаТаблицы.Активность = Установить;
			АктивностьИзменена       = Истина;
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если АктивностьИзменена Тогда
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПредварительноУстановитьСнятьОтметкиАктивностиВсехСтрок(Установить = Истина)
	
	Если Объект.АК_ТоварыПредварительно.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Таблица товаров не заполнена.'"));
		Возврат;
	КонецЕсли;
	
	АктивностьИзменена = Ложь;
	
	Для Каждого СтрокаТаблицы Из Объект.АК_ТоварыПредварительно Цикл
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Активность <> Установить Тогда
			
			СтрокаТаблицы.Активность = Установить;
			АктивностьИзменена       = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если АктивностьИзменена Тогда
		АК_ОбщегоНазначения.ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиДополнительныеУстановитьСнятьОтметкиАктивностиВсехСтрок(Установить = Истина)
	
	Если Объект.АК_УслугиДополнительные.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Таблица товаров не заполнена.'"));
		Возврат;
	КонецЕсли;
	
	АктивностьИзменена = Ложь;
	
	Для Каждого СтрокаТаблицы Из Объект.АК_УслугиДополнительные Цикл
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.Активность <> Установить Тогда
			
			СтрокаТаблицы.Активность = Установить;
			АктивностьИзменена       = Истина;
			
			УслугиДополнительныеПриИзмененииСтрокиТЧКлиент(СтрокаТаблицы, "Процент");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если АктивностьИзменена Тогда
		АК_ОбщегоНазначения.УслугиДополнительныеРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // УстановитьСнятьОтметкиАктивностиВыделенныхСтрок()


&НаКлиенте
Процедура ПерезаполнитьПоЗаказу(Команда)
	//{{КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
	// Данный фрагмент построен конструктором.
	// При повторном использовании конструктора, внесенные вручную изменения будут утеряны!!!
	
	ПроцедураВывода();
КонецПроцедуры

&наСервере
Функция  ПроцедураВывода()   Экспорт
	
	Запрос1 = Новый Запрос;
	Запрос1.Текст = 
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|		ПО ЗаказКлиента.ДокументОснование = КоммерческоеПредложениеКлиенту.Ссылка
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка = &Ссылка";
	Запрос1.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = Запрос1.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда 
		ВызватьИсключение ("Нет Заказов");
	КонецЕсли;
	Ссылка =  Результат[0].Ссылка;
	
	//Взять табличную часть из ЗАказа Клиента   
	Запрос1 = новый Запрос;
	Запрос1.Текст = " 
	|Выбрать 
	| * ИЗ Документ.ЗаказКлиента.товары
	|Где документ.заказКлиента.товары.ссылка = &ЗаказаКлиента
	|;            
	| ////////////////////////////////////////////
	|
	|Выбрать 
	|*  ИЗ Документ.КоммерческоеПредложениеКлиенту.товары
	|Где Документ.КоммерческоеПредложениеКлиенту.Товары.Ссылка = &КоммерческоеПредложение";         
	
	Запрос1.УстановитьПараметр("ЗаказаКлиента", Ссылка);
	Запрос1.УстановитьПараметр("КоммерческоеПредложение", Объект.Ссылка);
	
	//ТБ1 = Запрос1.Выполнить().Выгрузить();
	РезультатЗапроса = Запрос1.ВыполнитьПакет();
	
	ТБ1 = РезультатЗапроса[0].Выгрузить();
	Переменная =  РеквизитФормыВЗначение("Объект");
	ТБ2 = Переменная.АК_ТоварыПредварительно.Выгрузить();
	ТБ2.Очистить();
	
	МассивОшибок = новый Массив;
	ТекстОшибки = "";
	//Если ТБ1.Количество()<>Тб2.Количество() Тогда
	//			   Объект.РезультатВыполнения = Объект.РезультатВыполнения + ТекстОшибки ;
	//КонецЕсли;
	
	ТаблицаСоответсвий = новый соответствие; 
	ТаблицаСоответсвий.Вставить("Ссылка",1);
	ТаблицаСоответсвий.Вставить("КлючСвязи",1);
	ТаблицаСоответсвий.Вставить("НомерСтроки",1);
	ТаблицаСоответсвий.Вставить("ДатаОтгрузки",1);
	ТаблицаСоответсвий.Вставить("ПричинаОтмены",1);
	ТаблицаСоответсвий.Вставить("Активность",1);
	аба = 1;
	
	НоваяСтрока = ТБ2.Добавить();
	
	
	
	Для каждого строка из ТБ1 Цикл
		НоваяСтрока.Активность = 1;
		Для каждого колонка из ТБ2.Колонки Цикл
			Имя = Колонка.Имя;
			//            Если Имя = "Ссылка"  ИЛИ Имя = "КлючСвязи" Тогда
			Если ТаблицаСоответсвий[имя]=1 тогда
				Продолжить; 
			Иначе
				Индекс=Тб1.Индекс(строка);
				
				Попытка 							//Если
					НоваяСтрока[имя] = строка[Имя] ;
				Исключение КонецПопытки;
				//Объект.Товары[Индекс].имя = Тб2[Индекс][имя];
				//тогда
				//	Продолжить;
				//Иначе
				//	ТекстОшибки = Символы.ПС + "Строка: " + (Индекс+1)  + " в столбце: " + Имя   ; 
				//	МассивОшибок.Добавить(ТекстОшибки); 
				//КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		Если аба < ТБ1.Количество() Тогда
			НоваяСтрока = ТБ2.Добавить();
		КонецЕсли;
		аба = аба + 1;
		
	КонецЦикла;
	Переменная.АК_ТоварыПредварительно.Загрузить(ТБ2);
	ЗначениеВРеквизитФормы( Переменная, "Объект");
	ТекстОшибки = "";
	Для каждого ЭлементМассива из МассивОшибок Цикл
		ТекстОшибки = ТекстОшибки + " " + ЭлементМассива;
	КонецЦикла;
	
	Отказ = Ложь;  
	Если ТекстОшибки <> ""  Тогда
		//            Сообщить("Ошибки были обнаружены: " + текстОшибки);
		Объект.РезультатВыполнения = "Были обнаружены ошибки заполнения: ";
		Отказ=Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Объект.РезультатВыполнения = Объект.РезультатВыполнения + ТекстОшибки ;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'Задание не может быть выполнено пока не верно заполнены табличные части товаров, указанных в заказе или комерческом предложении. Верните заказ на доработку менеджеру.'"),,
		"Объект.Предмет",,
		Отказ);
		
	КонецЕсли;
	Возврат Отказ;
КонецФункции



//}

