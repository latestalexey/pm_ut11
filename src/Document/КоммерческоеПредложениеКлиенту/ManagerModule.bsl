#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет таблицу реквизитов, зависимых от хозяйственной операции
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция соглашения
//	МассивВсехРеквизитов - Массив - реквизиты, которые не зависят от хозяйственной операции
//	МассивРеквизитовОперации - Массив - реквизиты, которые зависят от хозяйственной операции
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("ГрафикОплаты");
	МассивВсехРеквизитов.Добавить("ФормаОплаты");
	МассивВсехРеквизитов.Добавить("Товары.ПроцентРучнойСкидки");
	МассивВсехРеквизитов.Добавить("Товары.СуммаРучнойСкидки");
	МассивВсехРеквизитов.Добавить("Товары.ПроцентАвтоматическойСкидки");
	МассивВсехРеквизитов.Добавить("Товары.СуммаАвтоматическойСкидки");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		МассивРеквизитовОперации.Добавить("ГрафикОплаты");
		МассивРеквизитовОперации.Добавить("ФормаОплаты");
		МассивРеквизитовОперации.Добавить("Товары.ПроцентРучнойСкидки");
		МассивРеквизитовОперации.Добавить("Товары.СуммаРучнойСкидки");
		МассивРеквизитовОперации.Добавить("Товары.ПроцентАвтоматическойСкидки");
		МассивРеквизитовОперации.Добавить("Товары.СуммаАвтоматическойСкидки");
	КонецЕсли;
	
КонецПроцедуры

// Осуществялет вычисление текущего состояния коммерческого предложения
//
// Параметры:
//	КоммерческоеПредложение - ДокументСсылка.КоммерческоеПредложение - Документ, состояние которого необходимо вычислить
//	Состояние - Строка - Реквизит, в который будет помещено рассчитанное состояние
//	СостояниеПросрочено - Булево - Реквизит, в который будет помещен признак просроченности состояния
//	КартинкаСостояния   - Картинка - Картинка состояния коммерческого предложения
//
Процедура РассчитатьСостояние(Знач КоммерческоеПредложение, Состояние, СостояниеПросрочено) Экспорт
	
	Если ЗначениеЗаполнено(КоммерческоеПредложение) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|ВЫБОР
			|	// НЕ ПРОВЕДЕНО ///////////////////////////////////////////////////////////
			|	КОГДА
			|		НЕ КоммерческоеПредложениеКлиенту.Проведен
			|	ТОГДА
			|		НЕОПРЕДЕЛЕНО
			|	// ОТМЕНЕНО ///////////////////////////////////////////////////////////////
			|	КОГДА
			|		КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Отменено)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияКоммерческихПредложенийКлиентам.Отменено)
			|	// ДЕЙСТВУЕТ //////////////////////////////////////////////////////////////
			|	КОГДА
			|		КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияКоммерческихПредложенийКлиентам.Действует)
			|	// ОЖИДАЕТСЯ СОГЛАСОВАНИЕ /////////////////////////////////////////////////
			|	КОГДА
			|		КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияКоммерческихПредложенийКлиентам.ОжидаетсяСогласование)
			|КОНЕЦ КАК Состояние,
			|ВЫБОР
			|	// СОГЛАСОВАНИЕ ПРОСРОЧЕНО ////////////////////////////////////////////////
			|	КОГДА
			|		КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано)
			|		И КоммерческоеПредложениеКлиенту.СрокДействия < &ТекущаяДата
			|		И КоммерческоеПредложениеКлиенту.СрокДействия <> ДАТАВРЕМЯ(1,1,1)
			|	ТОГДА
			|		ИСТИНА
			|	// СРОК ДЕЙСТВИЯ ИСТЕК ////////////////////////////////////////////////////
			|	КОГДА
			|		КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует)
			|		И КоммерческоеПредложениеКлиенту.СрокДействия < &ТекущаяДата
			|		И КоммерческоеПредложениеКлиенту.СрокДействия <> ДАТАВРЕМЯ(1,1,1)
			|	ТОГДА
			|		ИСТИНА
			|	ИНАЧЕ
			|		ЛОЖЬ
			|КОНЕЦ КАК Просрочен
			|ИЗ
			|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
			|ГДЕ
			|	КоммерческоеПредложениеКлиенту.Ссылка = &КоммерческоеПредложение
			|");
			
		Запрос.УстановитьПараметр("КоммерческоеПредложение", КоммерческоеПредложение);
		Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДата()));
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Состояние           = Выборка.Состояние;
		СостояниеПросрочено = Выборка.Просрочен;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив имен ролей с правом "Добавление" для данного документа
//
// Возвращаемое значение:
//	Массив - Массив с именами ролей
//
Функция ИменаРолейСПравомДобавления() Экспорт
	
	МассивРолей = Новый Массив;
	МассивРолей.Добавить("ПолныеПрава");
	МассивРолей.Добавить("ДобавлениеИзменениеКоммерческихПредложенийКлиентам");
	Возврат МассивРолей;
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыКоммерческихПредложенийКлиентам[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Для документа "КоммерческоеПредлоениеКлиенту" отсутствуют дополнительные проверки
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Печать

Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	Возврат Новый Структура("Данные,Макеты",
				ПолучитьДанныеОбъектаПоМакетам(МассивДокументов, МассивИменМакетов),
				ПолучитьМакетыИОписанияСекций(МассивИменМакетов));
	
КонецФункции

Функция ПолучитьОписаниеОбластейКоммерческоеПредложение()

	Секции = Новый Структура;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ВерхнийКолонтитул",				"ВерхнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Заголовок",						"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "КонтактноеЛицо",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Предложение",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ШапкаТаблицаТовары",				"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СтрокаТаблицаТовары",			"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ШапкаТаблицаТоварыБезСкидки",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СтрокаТаблицаТоварыБезСкидки",	"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ИтоговаяСтрока",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СрокДействия",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ЗаголовокДопИнформации",			"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ГрафикОплаты",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ФормаОплаты",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Склад",							"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ДополнительнаяИнформация",		"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Подвал",							"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ТелефонОрганизации",				"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "АдресЭлектроннойПочтыМенеджера",	"Общая");
	
	Возврат Секции;

КонецФункции

Функция ПолучитьДанныеОбъектаПоМакетам(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	РезультатЗапроса = ПолучитьДанныеДляПечати(МассивДокументов);
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеОбъектаПоМакетам = Новый Структура;
		ДанныеОбъекта = ПолучитьДанныеОбъектаПоВыборке(Выборка);
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ДанныеОбъекта);
		КонецЦикла;
		ДанныеПоВсемОбъектам.Вставить(Выборка.Ссылка, ДанныеОбъектаПоМакетам);
	КонецЦикла;
	
	Возврат ДанныеПоВсемОбъектам;
	
КонецФункции

Функция ПолучитьМакетыИОписанияСекций(знач МассивИменМакетов) Экспорт
	
	ОписаниеСекций = Новый Структура;
	ДвоичныеДанныеМакетов = Новый Структура;
	
	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
		
		Макет = Неопределено;
		ОписаниеСекцийМакета = Неопределено;
		
		Если ИмяМакета = "ПФ_DOC_КоммерческоеПредложение" Тогда
			ОписаниеСекцийМакета = ПолучитьОписаниеОбластейКоммерческоеПредложение();
			Макет = УправлениеПечатью.ПолучитьМакет("Документ.КоммерческоеПредложениеКлиенту.ПФ_DOC_КоммерческоеПредложение");
		ИначеЕсли ИмяМакета = "ПФ_ODT_КоммерческоеПредложение" Тогда
			ОписаниеСекцийМакета = ПолучитьОписаниеОбластейКоммерческоеПредложение();
			Макет = УправлениеПечатью.ПолучитьМакет("Документ.КоммерческоеПредложениеКлиенту.ПФ_ODT_КоммерческоеПредложение");
		КонецЕсли;
		
		Если ОписаниеСекцийМакета <> Неопределено И Макет <> Неопределено Тогда
			
			ОписаниеСекций.Вставить(ИмяМакета, ОписаниеСекцийМакета);
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, Макет);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура(
						"ОписаниеСекций,ДвоичныеДанныеМакетов",
						ОписаниеСекций,
						ДвоичныеДанныеМакетов
					);
	
КонецФункции

Функция СформироватьПечатнуюФормуКоммерческогоПредложения(МассивОбъектов, ОбъектыПечати, КомплектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	РезультатЗапроса = ПолучитьДанныеДляПечати(МассивОбъектов);
	Выборка = РезультатЗапроса.Выбрать();
	
	ПервыйДокумент = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(Выборка.Ссылка,"Ссылка");
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьТабличныйДокументПоДаннымОбъекта(ТабличныйДокумент, ПолучитьДанныеОбъектаПоВыборке(Выборка));
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(НомерСтрокиНачало,,ТабличныйДокумент.ВысотаТаблицы);
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
			КонецЦикла;
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
		
	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КоммерческоеПредложение") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КоммерческоеПредложение", "Коммерческое предложение", СформироватьПечатнуюФормуКоммерческогоПредложения(МассивОбъектов, ОбъектыПечати, Неопределено));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КоммерческоеПредложениеXLS_PaxMed") Тогда	
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КоммерческоеПредложениеXLS_PaxMed", "Коммерческое предложение", ПечатьКоммПредложения(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КоммерческоеПредложениеКартикиXLS_PaxMed") Тогда	
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КоммерческоеПредложениеКартикиXLS_PaxMed", "Коммерческое предложение", ПечатьКоммПредложенияКартинки(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		КоллекцияПечатныхФорм.Очистить();
		СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати);
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечати(МассивОбъектов)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Ссылка КАК Ссылка,
	|	КоммерческоеПредложениеКлиенту.Номер КАК Номер,
	|	КоммерческоеПредложениеКлиенту.Дата КАК Дата,
	|	КоммерческоеПредложениеКлиенту.Организация.НаименованиеСокращенное КАК ОрганизацияСокращенноеНаименование,
	|	КоммерческоеПредложениеКлиенту.Организация.Наименование КАК ОрганизацияНаименование,
	|	КоммерческоеПредложениеКлиенту.СрокДействия КАК СрокДействия,
	|	ВЫБОР
	|		КОГДА КоммерческоеПредложениеКлиенту.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|				ИЛИ КоммерческоеПредложениеКлиенту.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьНДС,
	|	КоммерческоеПредложениеКлиенту.Организация.Префикс КАК Префикс,
	|	КоммерческоеПредложениеКлиенту.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	КоммерческоеПредложениеКлиенту.Валюта КАК Валюта,
	|	ЕСТЬNULL(КоммерческоеПредложениеКлиенту.Менеджер.ФизическоеЛицо.Наименование, КоммерческоеПредложениеКлиенту.Менеджер.Наименование) КАК Менеджер,
	|	КоммерческоеПредложениеКлиенту.КонтактноеЛицо КАК КонтактноеЛицо,
	|	КоммерческоеПредложениеКлиенту.Партнер КАК Партнер,
	|	КоммерческоеПредложениеКлиенту.Товары.(
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Номенклатура.Код КАК Код,
	|		Номенклатура.Артикул КАК Артикул,
	|		Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|		ВЫБОР
	|			КОГДА КоммерческоеПредложениеКлиенту.Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ПРЕДСТАВЛЕНИЕ(КоммерческоеПредложениеКлиенту.Товары.Номенклатура.ЕдиницаИзмерения)
	|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(КоммерческоеПредложениеКлиенту.Товары.Упаковка.ЕдиницаИзмерения)
	|		КОНЕЦ КАК ЕдиницаИзмерения,
	|		КоличествоУпаковок КАК Количество,
	|		Цена КАК Цена,
	|		КоммерческоеПредложениеКлиенту.Товары.СуммаРучнойСкидки + КоммерческоеПредложениеКлиенту.Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|		КоммерческоеПредложениеКлиенту.Товары.Сумма + КоммерческоеПредложениеКлиенту.Товары.СуммаРучнойСкидки + КоммерческоеПредложениеКлиенту.Товары.СуммаАвтоматическойСкидки КАК СуммаБезСкидки,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		Характеристика.НаименованиеПолное КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(КоммерческоеПредложениеКлиенту.Товары.Упаковка.Коэффициент, 1) = 1
	|				ТОГДА НЕОПРЕДЕЛЕНО
	|			ИНАЧЕ КоммерческоеПредложениеКлиенту.Товары.Упаковка.Наименование
	|		КОНЕЦ КАК Упаковка,
	|		Активность КАК Активность,
	|		ВЫБОР
	|			КОГДА КоммерческоеПредложениеКлиенту.ВернутьМногооборотнуюТару
	|					И КоммерческоеПредложениеКлиенту.Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоВозвратнаяТара,
	|		АК_ПризнакНестандарт,
	|		АК_НестандартОписание
	|	),
	|	КоммерческоеПредложениеКлиенту.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	ТелефонОрганизации.Представление КАК ТелефонОрганизации,
	|	АдресОрганизации.Представление КАК АдресОрганизации,
	|	ПочтаМенеджера.Представление КАК АдресЭлектроннойПочтыМенеджера,
	|	КоммерческоеПредложениеКлиенту.ГрафикОплаты,
	|	КоммерческоеПредложениеКлиенту.ФормаОплаты,
	|	КоммерческоеПредложениеКлиенту.Склад
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ПочтаМенеджера
	|		ПО (ПочтаМенеджера.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailФизическогоЛица))
	|			И КоммерческоеПредложениеКлиенту.Менеджер.ФизическоеЛицо = ПочтаМенеджера.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ТелефонОрганизации
	|		ПО КоммерческоеПредложениеКлиенту.Организация = ТелефонОрганизации.Ссылка
	|			И (ТелефонОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК АдресОрганизации
	|		ПО КоммерческоеПредложениеКлиенту.Организация = АдресОрганизации.Ссылка
	|			И (АдресОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации))
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьДанныеОбъектаПоВыборке(Выборка)
	
	ДанныеОбъекта = Новый Структура;
	
	Если ЗначениеЗаполнено(Выборка.ОрганизацияСокращенноеНаименование) Тогда
		ПредставлениеОрганизации = Выборка.ОрганизацияСокращенноеНаименование;
	Иначе
		ПредставлениеОрганизации = Выборка.ОрганизацияНаименование;
	КонецЕсли;
	
	ЗаголовокСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(Выборка.Товары.Выгрузить(), Истина);
	
	ДанныеОбъекта.Вставить("Ссылка",                            Выборка.Ссылка);
	ДанныеОбъекта.Вставить("ПредставлениеОрганизации",          ПредставлениеОрганизации);
	ДанныеОбъекта.Вставить("Партнер",                           Выборка.Партнер);
	ДанныеОбъекта.Вставить("КонтактноеЛицо",                    Выборка.КонтактноеЛицо);
	ДанныеОбъекта.Вставить("Менеджер",                          Выборка.Менеджер);
	ДанныеОбъекта.Вставить("Номер",                             ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер, Ложь, Истина));
	ДанныеОбъекта.Вставить("Дата",                              Формат(Выборка.Дата,"ДФ=dd.MM.yyyy"));
	ДанныеОбъекта.Вставить("СрокДействия",                      Формат(Выборка.СрокДействия,"ДФ=dd.MM.yyyy"));
	ДанныеОбъекта.Вставить("ДополнительнаяИнформация",          Выборка.ДополнительнаяИнформация);
	ДанныеОбъекта.Вставить("ТелефонОрганизации",                Выборка.ТелефонОрганизации);
	ДанныеОбъекта.Вставить("АдресОрганизации",                  Выборка.АдресОрганизации);
	ДанныеОбъекта.Вставить("АдресЭлектроннойПочтыМенеджера",    Выборка.АдресЭлектроннойПочтыМенеджера);
	ДанныеОбъекта.Вставить("ГрафикОплаты",                      Выборка.ГрафикОплаты);
	ДанныеОбъекта.Вставить("ФормаОплаты",                       Выборка.ФормаОплаты);
	ДанныеОбъекта.Вставить("Склад",                             Выборка.Склад);
	ДанныеОбъекта.Вставить("ЕстьСкидки",                        ЗаголовокСкидки.ЕстьСкидки);
	ДанныеОбъекта.Вставить("ЗаголовокСкидки",                   ЗаголовокСкидки.Скидка);
	ДанныеОбъекта.Вставить("ТолькоНаценка",                     ЗаголовокСкидки.ТолькоНаценка);
	
	ДанныеОбъекта.Вставить("Товары", Новый Массив);
	
	СуммаВсего    = 0;
	СуммаВсегоНДС = 0;
	КоличествоТоваров = 0;
	
	НомерСтроки = 0;
	Товары = Выборка.Товары.Выгрузить();
	
	Для Каждого ВыборкаТовары из Товары Цикл
		
		Если НЕ ВыборкаТовары.Активность Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицыТовары = Новый Структура;
		СтрокаТаблицыТовары.Вставить("НомерСтроки",          НомерСтроки);
		
		НаименованиеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			ВыборкаТовары.НаименованиеПолное,
			// АК ИГОРЬ
			//ВыборкаТовары.Характеристика,
			?(ВыборкаТовары.АК_ПризнакНестандарт,ВыборкаТовары.АК_НестандартОписание,ВыборкаТовары.Характеристика),
			,
			,
			,
			ВыборкаТовары.ЭтоВозвратнаяТара
		);
		
		СтрокаТаблицыТовары.Вставить("Номенклатура",         НаименованиеТовара);
		СтрокаТаблицыТовары.Вставить("Количество",           ВыборкаТовары.Количество);
		СтрокаТаблицыТовары.Вставить("ЕдиницаИзмерения",     ВыборкаТовары.ЕдиницаИзмерения);
		СтрокаТаблицыТовары.Вставить("Цена",                 Формат(ВыборкаТовары.Цена,"ЧДЦ=2; ЧРД=,"));
		СтрокаТаблицыТовары.Вставить("СуммаСкидки",          ВыборкаТовары.СуммаСкидки);
		СтрокаТаблицыТовары.Вставить("Сумма",                Формат(ВыборкаТовары.Сумма,"ЧДЦ=2; ЧРД=,"));
		Если ДанныеОбъекта.ЕстьСкидки Тогда
			СтрокаТаблицыТовары.СуммаСкидки = ?(ДанныеОбъекта.ТолькоНаценка,- СтрокаТаблицыТовары.СуммаСкидки,СтрокаТаблицыТовары.СуммаСкидки);
			СтрокаТаблицыТовары.СуммаСкидки = Формат(СтрокаТаблицыТовары.СуммаСкидки,"ЧДЦ=2; ЧРД=,");
		КонецЕсли; 
		ДанныеОбъекта.Товары.Добавить(СтрокаТаблицыТовары);
		СуммаВсего        = СуммаВсего + ВыборкаТовары.Сумма;
		СуммаВсегоНДС     = СуммаВсегоНДС + ВыборкаТовары.СуммаНДС;
		КоличествоТоваров = КоличествоТоваров + 1;
		
	КонецЦикла;
	
	ПредставлениеВалюты = ?(ЗначениеЗаполнено(Выборка.Валюта), СокрЛП(Выборка.Валюта), "");
	
	СуммаКПрописи = СуммаВсего + ?(Выборка.ЦенаВключаетНДС, 0, СуммаВсегоНДС);
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, Выборка.Валюта);
	
	ИтоговаяСтрока = "";
	Если Выборка.УчитыватьНДС И НЕ Выборка.ЦенаВключаетНДС Тогда
		ИтоговаяСтрока = НСтр("ru='Итого: %СуммаВсего% %ПредставлениеВалюты%, сумма НДС: %СуммаНДС% %ПредставлениеВалюты%'") + Символы.ПС;
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаВсего%", Формат(СуммаВсего,"ЧДЦ=2; ЧРД=,"));
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаНДС%", Формат(СуммаВсегоНДС,"ЧДЦ=2; ЧРД=,; ЧН=0,00"));
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%ПредставлениеВалюты%", ПредставлениеВалюты);
	КонецЕсли;
	
	ИтоговаяСтрока = ИтоговаяСтрока + НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", КоличествоТоваров);
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, Выборка.Валюта));
	
	Если Выборка.УчитыватьНДС И Выборка.ЦенаВключаетНДС Тогда
		
		СтрокаНДС = НСтр("ru='в том числе НДС %СуммаНДС% %ПредставлениеВалюты%'");
		СтрокаНДС = СтрЗаменить(СтрокаНДС, "%СуммаНДС%", Формат(СуммаВсегоНДС,"ЧДЦ=2; ЧРД=,; ЧН=0,00"));
		СтрокаНДС = СтрЗаменить(СтрокаНДС, "%ПредставлениеВалюты%", ПредставлениеВалюты);
		ИтоговаяСтрока = ИтоговаяСтрока + ", " + СтрокаНДС;
		
	КонецЕсли;
	
	Если НЕ Выборка.УчитыватьНДС Тогда
		
		ИтоговаяСтрока = ИтоговаяСтрока + ", " + НСтр("ru='Без налога (НДС)'");
		
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ИтоговаяСтрока",    ИтоговаяСтрока);
	ДанныеОбъекта.Вставить("СтоимостьПрописью", СуммаПрописью);
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументПоДаннымОбъекта(ТабличныйДокумент, ДанныеОбъекта)
	
	Макет = УправлениеПечатью.ПолучитьМакет("Документ.КоммерческоеПредложениеКлиенту.ПФ_MXL_КоммерческоеПредложение");
	
	// Вывод заголовка
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Заполнить(ДанныеОбъекта);
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ДанныеОбъекта.Ссылка);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	// Вывод области контактного лица
	Если ЗначениеЗаполнено(ДанныеОбъекта.КонтактноеЛицо) Тогда
		ОбластьКонтактноеЛицо = Макет.ПолучитьОбласть("КонтактноеЛицо");
		ОбластьКонтактноеЛицо.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьКонтактноеЛицо);
	КонецЕсли;
	
	// Вывод области предложения
	ОбластьПредложение = Макет.ПолучитьОбласть("Предложение");
	ОбластьПредложение.Параметры.Заполнить(ДанныеОбъекта);
	ТабличныйДокумент.Вывести(ОбластьПредложение);
	
	// Вывод шапки таблицы товаров
	ИмяОбластиШапки = ?(ДанныеОбъекта.ЕстьСкидки, "ШапкаТаблицыТовары", "ШапкаТаблицыТоварыБезСкидки");
	ОбластьШапкаТаблицыТовары = Макет.ПолучитьОбласть(ИмяОбластиШапки);
	Если ДанныеОбъекта.ЕстьСкидки Тогда
		ОбластьШапкаТаблицыТовары.Параметры.Скидка = ДанныеОбъекта.ЗаголовокСкидки;
	КонецЕсли; 
	ТабличныйДокумент.Вывести(ОбластьШапкаТаблицыТовары);
	
	// Вывод строк таблицы товаров
	ИмяОбластиСтроки = ?(ДанныеОбъекта.ЕстьСкидки, "СтрокаТаблицыТовары", "СтрокаТаблицыТоварыБезСкидки");
	ОбластьСтрокаТаблицыТовары = Макет.ПолучитьОбласть(ИмяОбластиСтроки);
	Для Каждого Товар Из ДанныеОбъекта.Товары Цикл
		ОбластьСтрокаТаблицыТовары.Параметры.Заполнить(Товар);
		//Если ДанныеОбъекта.ЕстьСкидки Тогда
		//	ОбластьСтрокаТаблицыТовары.Параметры.СуммаСкидки = ?(ДанныеОбъекта.ТолькоНаценка,- Товар.СуммаСкидки,Товар.СуммаСкидки);
		//КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицыТовары);
	КонецЦикла;
	
	// Вывод подвала таблицы товров
	ОбластьПодвалТаблицыТовары = Макет.ПолучитьОбласть("ПодвалТаблицыТовары");
	ОбластьПодвалТаблицыТовары.Параметры.Заполнить(ДанныеОбъекта);
	ТабличныйДокумент.Вывести(ОбластьПодвалТаблицыТовары);
	
	// Вывод срока действия коммерческого предложения
	Если ЗначениеЗаполнено(ДанныеОбъекта.СрокДействия) Тогда
		
		ОбластьСрокДействия = Макет.ПолучитьОбласть("СрокДействия");
		ОбластьСрокДействия.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьСрокДействия);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ГрафикОплаты)
		Или ЗначениеЗаполнено(ДанныеОбъекта.ФормаОплаты)
		Или ЗначениеЗаполнено(ДанныеОбъекта.Склад)
		Или ЗначениеЗаполнено(ДанныеОбъекта.ДополнительнаяИнформация) Тогда
		
		ОбластьДопИнформацияЗаголовок = Макет.ПолучитьОбласть("ДопИнформацияЗаголовок");
		ТабличныйДокумент.Вывести(ОбластьДопИнформацияЗаголовок);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ГрафикОплаты) Тогда
		ОбластьГрафикОплаты = Макет.ПолучитьОбласть("ГрафикОплаты");
		ОбластьГрафикОплаты.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьГрафикОплаты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ФормаОплаты) Тогда
		ОбластьФормаОплаты = Макет.ПолучитьОбласть("ФормаОплаты");
		ОбластьФормаОплаты.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьФормаОплаты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Склад) Тогда
		ОбластьСклад = Макет.ПолучитьОбласть("Склад");
		ОбластьСклад.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьСклад);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ДополнительнаяИнформация) Тогда
		ОбластьДополнительнаяИнформация = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
		ОбластьДополнительнаяИнформация.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьДополнительнаяИнформация);
	КонецЕсли;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.Заполнить(ДанныеОбъекта);
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ТелефонОрганизации) Тогда
		ОбластьТелефонОрганизации = Макет.ПолучитьОбласть("ТелефонОрганизации");
		ОбластьТелефонОрганизации.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьТелефонОрганизации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.АдресЭлектроннойПочтыМенеджера) Тогда
		ОбластьАдресЭлектроннойПочтыМенеджера = Макет.ПолучитьОбласть("АдресЭлектроннойПочтыМенеджера");
		ОбластьАдресЭлектроннойПочтыМенеджера.Параметры.Заполнить(ДанныеОбъекта);
		ТабличныйДокумент.Вывести(ОбластьАдресЭлектроннойПочтыМенеджера);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
		
		КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		
	Иначе
		
		КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
			Метаданные.Документы.КоммерческоеПредложениеКлиенту.ПолноеИмя(),
			МассивОбъектов, Неопределено
		);
		
	КонецЕсли;
	
	Если КомплектПечатныхФорм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяМакета = "КоммерческоеПредложение";
	ТекущийКомплект = КомплектПечатныхФорм.Скопировать(Новый Структура("Имя,Печатать,",ИмяМакета,Истина));
	Если ТекущийКомплект.Количество() > 0 Тогда
		Если ТекущийКомплект.Колонки.Найти("Ссылка") <> Неопределено И ЗначениеЗаполнено(ТекущийКомплект[0].Ссылка) Тогда
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекциюОдинЭкземпляр(КоллекцияПечатныхФорм, ИмяМакета);
			ТаблицаСсылок = ТекущийКомплект.Скопировать(,"Ссылка");
			ТаблицаСсылок.Свернуть("Ссылка");
			ТекущийМассивОбъектов = ТаблицаСсылок.ВыгрузитьКолонку("Ссылка");
		Иначе
			РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ТекущийКомплект[0]);
			ТекущийМассивОбъектов = МассивОбъектов
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			ИмяМакета,
			ТекущийКомплект[0].Представление,
			СформироватьПечатнуюФормуКоммерческогоПредложения(ТекущийМассивОбъектов, ОбъектыПечати, ТекущийКомплект)
		);
	КонецЕсли;
	
	РегистрыСведений.НастройкиПечатиОбъектов.СформироватьКомплектВнешнихПечатныхФорм(
		"Документ.КоммерческоеПредложениеКлиенту",
		МассивОбъектов,
		ПараметрыПечати,
		КоллекцияПечатныхФорм,
		ОбъектыПечати
	);
	
КонецФункции

Функция КомплектПечатныхФорм() Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "КоммерческоеПредложение", "Коммерческое предложение", 1);
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Обновление информационной базы

// Обработчик обновления УТ 11.1.0.0
// Заполняет реквизит "СпособДоставки" значением по умолчанию "Самовывоз"
//
Процедура ЗаполнитьСпособДоставкиСамовывоз() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Ссылка
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.СпособДоставки = &ПустойСпособДоставки";
	
	Запрос.УстановитьПараметр("ПустойСпособДоставки", Перечисления.СпособыДоставки.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли

///////////////////////////////////////////////////////////////////////////////
// ДОБАВЛЕННЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////////////////

//
//
Функция _ПечатьКоммПредложения(МассивОбъектов, ОбъектыПечати)
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_КоммПредложение";
	
	Макет = ПолучитьМакет("КоммПредложение");
	
	// Постоянные свойства
	//СвойствоГабаритныеРазмеры = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_ГабаритныеРазмеры; //.НайтиПоНаименованию("Габаритные размеры");
	////+++ZEZA СвойствоТехническоеОписание = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_ТехОписание; //.НайтиПоНаименованию("Техническое описание");
	//СвойствоПроизводитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_Производитель;
	
	//АСТЭК
	СвойствоГабаритныеРазмеры = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_ГабаритныеРазмеры;//.НайтиПоНаименованию("УдалитьГабаритные размеры");
	//СвойствоТехническоеОписание = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Техническое описание");
	СвойствоПроизводитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_Производитель;//.НайтиПоНаименованию("УдалитьПроизводитель");

	
	ПостоянныеСвойства = Новый Массив;
	ПостоянныеСвойства.Добавить(СвойствоГабаритныеРазмеры);
	//+++ZEZA ПостоянныеСвойства.Добавить(СвойствоТехническоеОписание);
	
	// Постоянные услуги
	
	УслугаДоставка = Новый Массив;
	УслугаДоставка.Добавить(Справочники.Номенклатура.АК_Доставка);
	УслугаДоставка.Добавить(Справочники.Номенклатура.АК_ДоставкаАгент);
	УслугаДоставка.Добавить(Справочники.Номенклатура.АК_ДоставкаКлиент);
	
	УслугаМонтаж = Новый Массив;
	УслугаМонтаж.Добавить(Справочники.Номенклатура.АК_Монтаж);
	УслугаМонтаж.Добавить(Справочники.Номенклатура.АК_МонтажАгент);
	УслугаМонтаж.Добавить(Справочники.Номенклатура.АК_МонтажКлиент);
	
	//// Области печати
	////ОбластьРисунки = Макет.ПолучитьОбласть("Логотип");
	////Логотип = ОбластьРисунки.Рисунки[0];
	//КартинкаЛоготип = ПолучитьФайлЛоготипа(Шапка.Организация);  //Логотип.Картинка;
	
	ШапкаПостоянная = Макет.ПолучитьОбласть("Шапка|Постоянная");
	ШапкаПеременная = Макет.ПолучитьОбласть("Шапка|Переменная"); 
	ШапкаПримечание = Макет.ПолучитьОбласть("Шапка|Примечание");
	ШапкаТаблицыПостоянная = Макет.ПолучитьОбласть("ШапкаТаблицы|Постоянная");
	ШапкаТаблицыПеременная = Макет.ПолучитьОбласть("ШапкаТаблицы|Переменная"); 
	ШапкаТаблицыПримечание = Макет.ПолучитьОбласть("ШапкаТаблицы|Примечание");
	СтрокиПостоянная = Макет.ПолучитьОбласть("Строки|Постоянная");
	СтрокиПеременная = Макет.ПолучитьОбласть("Строки|Переменная"); 
	СтрокиПримечание = Макет.ПолучитьОбласть("Строки|Примечание");
	ПодвалТаблицыПостоянная = Макет.ПолучитьОбласть("ПодвалТаблицы|Постоянная");
	ПодвалТаблицыПеременная = Макет.ПолучитьОбласть("ПодвалТаблицы|Переменная"); 
	ПодвалТаблицыПримечание = Макет.ПолучитьОбласть("ПодвалТаблицы|Примечание");
	ПодвалПостоянная = Макет.ПолучитьОбласть("Подвал|Постоянная");
	//ПодвалПеременная = Макет.ПолучитьОбласть("Подвал|Переменная"); 
	//ПодвалПримечание = Макет.ПолучитьОбласть("Подвал|Примечание");
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_КоммПредложение";
	// Получаем запросом необходимые данные.
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КоммерческоеПредложениеКлиенту.Ссылка,
		|	КоммерческоеПредложениеКлиенту.Номер,
		|	КоммерческоеПредложениеКлиенту.Дата,
		|	КоммерческоеПредложениеКлиенту.Организация,
		|	КоммерческоеПредложениеКлиенту.Организация.ТекущийРуководитель.Наименование,
		|	КоммерческоеПредложениеКлиенту.Организация.ТекущийГлавныйБухгалтер.Наименование,
		|	КоммерческоеПредложениеКлиенту.Валюта,
		|	КоммерческоеПредложениеКлиенту.КонтактноеЛицо КАК КонтактноеЛицо,
		|	КоммерческоеПредложениеКлиенту.КонтактноеЛицо.КонтактнаяИнформация.(
		|		КонтактноеЛицо.КонтактнаяИнформация.АдресЭП,
		|		КонтактноеЛицо.КонтактнаяИнформация.Вид,
		|		КонтактноеЛицо.КонтактнаяИнформация.Город,
		|		КонтактноеЛицо.КонтактнаяИнформация.ДоменноеИмяСервера,
		|		КонтактноеЛицо.КонтактнаяИнформация.ЗначенияПолей,
		|		КонтактноеЛицо.КонтактнаяИнформация.НомерСтроки,
		|		КонтактноеЛицо.КонтактнаяИнформация.НомерТелефона,
		|		КонтактноеЛицо.КонтактнаяИнформация.НомерТелефонаБезКодов,
		|		КонтактноеЛицо.КонтактнаяИнформация.Представление,
		|		КонтактноеЛицо.КонтактнаяИнформация.Регион,
		|		КонтактноеЛицо.КонтактнаяИнформация.Ссылка,
		|		КонтактноеЛицо.КонтактнаяИнформация.Страна,
		|		КонтактноеЛицо.КонтактнаяИнформация.Тип
		|	) КАК КИКЛПартнера,
		|	КоммерческоеПредложениеКлиенту.Менеджер КАК Менеджер,
		|	КоммерческоеПредложениеКлиенту.Менеджер.КонтактнаяИнформация.(
		|		Менеджер.КонтактнаяИнформация.АдресЭП,
		|		Менеджер.КонтактнаяИнформация.Вид,
		|		Менеджер.КонтактнаяИнформация.Город,
		|		Менеджер.КонтактнаяИнформация.ДоменноеИмяСервера,
		|		Менеджер.КонтактнаяИнформация.ЗначенияПолей,
		|		Менеджер.КонтактнаяИнформация.НомерСтроки,
		|		Менеджер.КонтактнаяИнформация.НомерТелефона,
		|		Менеджер.КонтактнаяИнформация.НомерТелефонаБезКодов,
		|		Менеджер.КонтактнаяИнформация.Представление,
		|		Менеджер.КонтактнаяИнформация.Регион,
		|		Менеджер.КонтактнаяИнформация.Ссылка,
		|		Менеджер.КонтактнаяИнформация.Страна,
		|		Менеджер.КонтактнаяИнформация.Тип
		|	) КАК КИМенеджера,
		|	КоммерческоеПредложениеКлиенту.ЦенаВключаетНДС,
		|	КоммерческоеПредложениеКлиенту.Партнер,
		|	КоммерческоеПредложениеКлиенту.Партнер.КонтактнаяИнформация.(
		|		Партнер.КонтактнаяИнформация.АдресЭП,
		|		Партнер.КонтактнаяИнформация.Вид,
		|		Партнер.КонтактнаяИнформация.Город,
		|		Партнер.КонтактнаяИнформация.ДоменноеИмяСервера,
		|		Партнер.КонтактнаяИнформация.ЗначенияПолей,
		|		Партнер.КонтактнаяИнформация.НомерСтроки,
		|		Партнер.КонтактнаяИнформация.НомерТелефона,
		|		Партнер.КонтактнаяИнформация.НомерТелефонаБезКодов,
		|		Партнер.КонтактнаяИнформация.Представление,
		|		Партнер.КонтактнаяИнформация.Регион,
		|		Партнер.КонтактнаяИнформация.Ссылка,
		|		Партнер.КонтактнаяИнформация.Страна,
		|		Партнер.КонтактнаяИнформация.Тип
		|	) КАК КИПартнера,
		|	КоммерческоеПредложениеКлиенту.Товары.(
		|		Номенклатура
		|	) КАК Товары,
		|	КоммерческоеПредложениеКлиенту.ГрафикОплаты.Наименование КАК УсловияОплаты,
		|	КоммерческоеПредложениеКлиенту.СрокРеализации КАК СрокПоставки,
		|	КоммерческоеПредложениеКлиенту.СрокДействия КАК СрокДействия
		|ИЗ
		|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
		|ГДЕ
		|	КоммерческоеПредложениеКлиенту.Ссылка В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Шапка = Запрос.Выполнить().Выбрать();
	ПервыйДокумент = Истина;
	Пока Шапка.Следующий() Цикл
		
		// Области печати
		//ОбластьРисунки = Макет.ПолучитьОбласть("Логотип");
		//Логотип = ОбластьРисунки.Рисунки[0];
		КартинкаЛоготип = АК_ОбщегоНазначения.ПолучитьФайлЛоготипа(Шапка.Организация);  //Логотип.Картинка;
		
		Если Не ПервыйДокумент Тогда
			// Все документы нужно выводить на разных страницах.
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Заполнение табл. документа
		
		// Шапка
		ШапкаПостояннаяПараметры = Новый Структура;
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата);
		
		СведенияОКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Шапка.Партнер, Шапка.Дата);
		
		ШапкаПостояннаяПараметры.Вставить("ОПФОрганизации", ВРЕГ("Общество с ограниченной ответственностью"));
		ШапкаПостояннаяПараметры.Вставить("АдресОрганизации", СведенияОбОрганизации.ЮридическийАдрес);
		ШапкаПостояннаяПараметры.Вставить("ТелефоныОрганизации", "тел/факс: " + СведенияОбОрганизации.Телефоны + " info@teragroup.ru www.teragroup.ru");
		ШапкаПостояннаяПараметры.Вставить("ИсходящиеРеквизиты", "№ " + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Шапка.Номер, Истина, Истина) + " от " + Формат(Шапка.Дата, "ДФ=dd.MM.yyyy; ДЛФ="));
		
		ШапкаПостояннаяПараметры.Вставить("Заказчик", "Заказчик: " + ?(ЗначениеЗаполнено(Шапка.Партнер.НаименованиеПолное), Шапка.Партнер.НаименованиеПолное, Шапка.Партнер.Наименование));
		ШапкаПостояннаяПараметры.Вставить("АдресЗаказчика", "Адрес: " + ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Шапка.Партнер));
		ШапкаПостояннаяПараметры.Вставить("КонтактноеЛицоЗаказчика", "Контактное лицо (Ф.И.О.), должность: " + Шапка.КонтактноеЛицо + ", " + Шапка.КонтактноеЛицо.АК_Должность);
		ШапкаПостояннаяПараметры.Вставить("ТелефоныКЛЗаказчика", "Телефон, факс, e-mail: " 
						+ УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Шапка.КонтактноеЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица)
						+ " " + УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Шапка.КонтактноеЛицо, Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица));
		
		ШапкаПостоянная.Параметры.Заполнить(ШапкаПостояннаяПараметры);
		ТабличныйДокумент.Вывести(ШапкаПостоянная);
		
		// Получим переменные столбцы
		ЗапросСвойств = Новый Запрос;
		ЗапросСвойств.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НоменклатураДополнительныеРеквизиты.Свойство,
			|	НоменклатураДополнительныеРеквизиты.Свойство.АК_ПорядокВывода КАК ПорядокВывода2,
			|	ВЫБОР
			|		КОГДА НоменклатураДополнительныеРеквизиты.Свойство.ЭтоДополнительноеСведение
			|			ТОГДА 2
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ПорядокВывода1
			|ИЗ
			|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
			|ГДЕ
			|	НоменклатураДополнительныеРеквизиты.Ссылка В(&НоменклатураДокумента)
			|	И (НЕ НоменклатураДополнительныеРеквизиты.Свойство В (&ПостоянныеСвойства))
			|	И (НЕ НоменклатураДополнительныеРеквизиты.Свойство.ПометкаУдаления)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПорядокВывода1,
			|	ПорядокВывода2";
			
		ЗапросСвойств.УстановитьПараметр("НоменклатураДокумента", Шапка.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
		ЗапросСвойств.УстановитьПараметр("ПостоянныеСвойства", ПостоянныеСвойства);
		
		ПеременнаяШапка = ЗапросСвойств.Выполнить().Выгрузить();
		
		
		Для каждого Стр Из ПеременнаяШапка Цикл
			
			//ШапкаПеременная.Параметры.Заполнить(Стр);
			ТабличныйДокумент.Присоединить(ШапкаПеременная);
			
		КонецЦикла; 
		
		ШапкаПримечаниеПараметры = Новый Структура;
		ШапкаПримечаниеПараметры.Вставить("УсловияОплаты", Шапка.УсловияОплаты);
		ШапкаПримечаниеПараметры.Вставить("СрокПоставки", Шапка.СрокПоставки);
		ШапкаПримечаниеПараметры.Вставить("ГарантийныйСрок", "12 месяцев");
		ШапкаПримечаниеПараметры.Вставить("СрокДействия", ?(ЗначениеЗаполнено(Шапка.СрокДействия), (НачалоДня(Шапка.СрокДействия) - НачалоДня(Шапка.Дата))/(24*60*60), 30));
		ШапкаПримечание.Параметры.Заполнить(ШапкаПримечаниеПараметры);
		ТабличныйДокумент.Присоединить(ШапкаПримечание);
		
		
		// Оформим заголовок по центру
		ШиринаТаблицы = ТабличныйДокумент.ШиринаТаблицы;
		ОблОПФОрганизации = ТабличныйДокумент.Область(НомерСтрокиНачало + 3, 1, НомерСтрокиНачало + 3, ШиринаТаблицы);
		ОблОПФОрганизации.Объединить();
		ОблАдрес = ТабличныйДокумент.Область(НомерСтрокиНачало + 4, 1, НомерСтрокиНачало + 4, ШиринаТаблицы);
		ОблАдрес.Объединить();
		ОблТелефоны = ТабличныйДокумент.Область(НомерСтрокиНачало + 5, 1, НомерСтрокиНачало + 5, ШиринаТаблицы);
		ОблТелефоны.Объединить();
		ОблНазвание = ТабличныйДокумент.Область(НомерСтрокиНачало + 10, 1, НомерСтрокиНачало + 10, ШиринаТаблицы);
		ОблНазвание.Объединить();
		ОблЛоготип = ТабличныйДокумент.Область(НомерСтрокиНачало, 1, НомерСтрокиНачало + 5, ШиринаТаблицы);
		ОблЛоготип.Объединить();
		Рис = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		Рис.ГраницаСверху = Ложь;
		Рис.ГраницаСлева = Ложь;
		Рис.ГраницаСнизу = Ложь;
		Рис.ГраницаСправа = Ложь;
		Рис.РазмерКартинки = РазмерКартинки.Пропорционально;//РазмерКартинки.Пропорционально;
		Индекс = ТабличныйДокумент.Рисунки.Индекс(Рис);
		ТабличныйДокумент.Рисунки[Индекс].Картинка = КартинкаЛоготип;
		ТабличныйДокумент.Рисунки[Индекс].Расположить(ОблЛоготип);
		
		
		// Шапка таблицы
		ШапкаТаблицыПостояннаяПараметры = Новый Структура;
		ШапкаТаблицыПостояннаяПараметры.Вставить("Валюта", "Валюта: " + Шапка.Валюта);
		ШапкаТаблицыПостоянная.Параметры.Заполнить(ШапкаТаблицыПостояннаяПараметры);
		ТабличныйДокумент.Вывести(ШапкаТаблицыПостоянная);
		
		
		Для каждого Стр Из ПеременнаяШапка Цикл
			
			ШапкаТаблицыПеременная.Параметры.Заполнить(Стр);
			ТабличныйДокумент.Присоединить(ШапкаТаблицыПеременная);
			
		КонецЦикла; 
		
		ШапкаТаблицыПримечаниеПараметры = Новый Структура;
		//ТабличныйДокумент.Параметры.Заполнить(ШапкаТаблицыПримечаниеПараметры);
		ТабличныйДокумент.Присоединить(ШапкаТаблицыПримечание);
		
		// Сроки таблицы
		
		ЗапросТЧ = Новый Запрос;
		ЗапросТЧ.Текст = 
			"ВЫБРАТЬ
			|	КоммерческоеПредложениеКлиентуТовары.НомерСтроки КАК НомерСтроки,
			|	КоммерческоеПредложениеКлиентуТовары.Номенклатура КАК Номенклатура,
			|	Габариты.Значение КАК Габариты,
			|	КоммерческоеПредложениеКлиентуТовары.Номенклатура.Описание КАК ТехОписание,
			|	КоммерческоеПредложениеКлиентуТовары.Номенклатура.Артикул КАК Артикул,
			|	КоммерческоеПредложениеКлиентуТовары.Номенклатура.Код КАК Код,
			|	КоммерческоеПредложениеКлиентуТовары.Количество,
			|	КоммерческоеПредложениеКлиентуТовары.Цена КАК Цена,
			|	ВЫБОР
			|		КОГДА КоммерческоеПредложениеКлиентуТовары.Ссылка.ЦенаВключаетНДС
			|			ТОГДА КоммерческоеПредложениеКлиентуТовары.Сумма
			|		ИНАЧЕ КоммерческоеПредложениеКлиентуТовары.Сумма + КоммерческоеПредложениеКлиентуТовары.СуммаНДС
			|	КОНЕЦ КАК Сумма,
			|	КоммерческоеПредложениеКлиентуТовары.СуммаНДС,
			|	КоммерческоеПредложениеКлиентуТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдИзм,
			|	КоммерческоеПредложениеКлиентуТовары.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
			|	КоммерческоеПредложениеКлиентуТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
			|	КоммерческоеПредложениеКлиентуТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки
			|ИЗ
			|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК КоммерческоеПредложениеКлиентуТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Габариты
			|		ПО КоммерческоеПредложениеКлиентуТовары.Номенклатура = Габариты.Ссылка
			|			И (Габариты.Свойство = &ГабаритныеРазмеры)
			|ГДЕ
			|	КоммерческоеПредложениеКлиентуТовары.Ссылка = &Ссылка
			|	И КоммерческоеПредложениеКлиентуТовары.Активность
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		ЗапросТЧ.УстановитьПараметр("Ссылка", Шапка.Ссылка);
		ЗапросТЧ.УстановитьПараметр("ГабаритныеРазмеры", СвойствоГабаритныеРазмеры);
		//+++ZEZA ЗапросТЧ.УстановитьПараметр("ТехническоеОписание", СвойствоТехническоеОписание);
		
		ВыборкаТЧ = ЗапросТЧ.Выполнить().Выбрать();
		
		СуммаСкидки = 0;
		СуммаТоваров = 0;
		СуммаТоваровНДС = 0;
		СуммаДоставки = 0;
		СуммаДоставкиНДС = 0;
		СуммаМонтажа = 0;
		СуммаМонтажаНДС = 0;
		КоличествоИтого = 0;
		НомерПП = 0;
		Пока ВыборкаТЧ.Следующий() Цикл
			
			
			Если УслугаДоставка.Найти(ВыборкаТЧ.Номенклатура) <> Неопределено Тогда
				
				СуммаДоставки = СуммаДоставки + ВыборкаТЧ.Сумма;
				СуммаДоставкиНДС = СуммаДоставкиНДС + ВыборкаТЧ.СуммаНДС;
				
			ИначеЕсли УслугаМонтаж.Найти(ВыборкаТЧ.Номенклатура) <> Неопределено Тогда
				
				СуммаМонтажа = СуммаМонтажа + ВыборкаТЧ.Сумма;
				СуммаМонтажаНДС = СуммаМонтажаНДС + ВыборкаТЧ.СуммаНДС;
				
			Иначе
				
				НомерПП = НомерПП + 1;
				СуммаСкидкиСтр = ВыборкаТЧ.СуммаРучнойСкидки + ВыборкаТЧ.СуммаАвтоматическойСкидки;
				КоличествоИтого = КоличествоИтого + ВыборкаТЧ.Количество;
				СуммаТоваров = СуммаТоваров + ВыборкаТЧ.Сумма + СуммаСкидкиСтр;
				СуммаТоваровНДС	= СуммаТоваровНДС + ВыборкаТЧ.СуммаНДС;
				СуммаСкидки = СуммаСкидки + СуммаСкидкиСтр;
				
				СтрокиПостоянная.Параметры.Заполнить(ВыборкаТЧ);
				СтрокиПостоянная.Параметры.Сумма = ВыборкаТЧ.Сумма + СуммаСкидкиСтр;
				СтрокиПостоянная.Параметры.НомерСтроки = НомерПП;
				
				ТабличныйДокумент.Вывести(СтрокиПостоянная);
				
				Для каждого Стр Из ПеременнаяШапка Цикл
					
					СтрокиПеременнаяПараметры = Новый Структура;
					
					СтрокиПеременнаяПараметры.Вставить("ЗначениеСвойства", ПолучитьЗначениеСвойства(ВыборкаТЧ.Номенклатура, Стр.Свойство));
					
					Если Стр.Свойство = СвойствоПроизводитель Тогда
						СтрокиПеременнаяПараметры.Вставить("ЗначениеСвойства", "");
					КонецЕсли;
					
					СтрокиПеременная.Параметры.Заполнить(СтрокиПеременнаяПараметры);
					ТабличныйДокумент.Присоединить(СтрокиПеременная);
					
				КонецЦикла; 
				
				//СтрокиПримечаниеПараметры = Новый Структура;
				//ТабличныйДокумент.Параметры.Заполнить(СтрокиПримечаниеПараметры);
				ТабличныйДокумент.Присоединить(СтрокиПримечание);
				
			КонецЕсли; 
			
		КонецЦикла; 
			
		// Подвал таблицы
		Параметры = Новый Структура;
		Параметры.Вставить("КоличествоИтого", КоличествоИтого);
		Параметры.Вставить("СуммаИтого", СуммаТоваров);
		Параметры.Вставить("СуммаНДСИтого", СуммаТоваровНДС);
		Параметры.Вставить("СуммаСкидки", СуммаСкидки);
		Параметры.Вставить("СуммаДоставки", СуммаДоставки);
		Параметры.Вставить("СуммаДоставкиНДС", СуммаДоставкиНДС);
		Параметры.Вставить("СуммаМонтажа", СуммаМонтажа);
		Параметры.Вставить("СуммаМонтажаНДС", СуммаМонтажаНДС);
		Параметры.Вставить("СуммаВсего", СуммаТоваров + СуммаДоставки + СуммаМонтажа - СуммаСкидки);
		Если СуммаТоваров = 0 Тогда
			Параметры.Вставить("СкидкаПроцент", 0);
			Параметры.Вставить("ДоставкаПроцент", 0);
			Параметры.Вставить("МонтажПроцент", 0);
		Иначе
			Параметры.Вставить("СкидкаПроцент", СуммаСкидки / СуммаТоваров * 100);
			Параметры.Вставить("ДоставкаПроцент", СуммаДоставки / СуммаТоваров * 100);
			Параметры.Вставить("МонтажПроцент", СуммаМонтажа / СуммаТоваров * 100);
		КонецЕсли; 
		
		ПодвалТаблицыПостоянная.Параметры.Заполнить(Параметры);
		ТабличныйДокумент.Вывести(ПодвалТаблицыПостоянная);
		
		Для каждого Стр Из ПеременнаяШапка Цикл
			
			ТабличныйДокумент.Присоединить(ПодвалТаблицыПеременная);
			
		КонецЦикла; 
		
		ПодвалТаблицыПримечаниеПараметры = Новый Структура;
		//ТабличныйДокумент.Параметры.Заполнить(ПодвалТаблицыПримечаниеПараметры);
		ТабличныйДокумент.Присоединить(ПодвалТаблицыПримечание);
		
		// Подвал
		ПодвалПостояннаяПараметры = Новый Структура;
		ПодвалПостояннаяПараметры.Вставить("КонтактноеЛицоОрганизации", "" + ?(ЗначениеЗаполнено(Шапка.Менеджер.ФизическоеЛицо), Шапка.Менеджер.ФизическоеЛицо, Шапка.Менеджер)); 
		ПодвалПостояннаяПараметры.Вставить("ДолжностьКЛОрганизации", Шапка.Менеджер.АК_Должность);
		ПодвалПостояннаяПараметры.Вставить("Организация", СведенияОбОрганизации.ПолноеНаименование);
		ПодвалПостояннаяПараметры.Вставить("ТелефоныОрганизации", "Тел.: " + СведенияОбОрганизации.Телефоны);
		ПодвалПостояннаяПараметры.Вставить("ТелефоныКЛОрганизации", "Моб: "
						+ УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Шапка.Менеджер.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.МобильныйТелефонФизическогоЛица));
		ПодвалПостояннаяПараметры.Вставить("ЕмайлОрганизации", ""
						+ УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Шапка.Организация, Справочники.ВидыКонтактнойИнформации.EmailОрганизации));
		ПодвалПостоянная.Параметры.Заполнить(ПодвалПостояннаяПараметры);
		ТабличныйДокумент.Вывести(ПодвалПостоянная);
		
		//ПодвалПеременнаяПараметры = Новый Структура;
		//ТабличныйДокумент.Параметры.Заполнить(ПодвалПеременнаяПараметры);
		//ТабличныйДокумент.Присоединить(ПодвалПеременная);
		
		//ПодвалПримечаниеПараметры = Новый Структура;
		//ТабличныйДокумент.Параметры.Заполнить(ПодвалПримечаниеПараметры);
		//ТабличныйДокумент.Присоединить(ПодвалПримечание);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно 
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
		НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;	
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////////////////
//
//
Процедура ВывестиВExcel(ТабличныйДокумент, Организация, Имя = "temp")
	
	//
	ИмяФайла =  КаталогВременныхФайлов() + Строка(Имя) + " " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ЧЧ_мм'") + ".xls";
	
	//
	ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
	
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось вывести в Excel. Убедитесь, что на компьютере установлена программа Microsoft Excel. Подробности: '")
		                  + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	//
	Workbook = COMОбъект.Workbooks.Open(ИмяФайла);
	
	//ЛЕВЫЙ КОЛОНТИТУЛ
	ИмяФайлаКартинкиКолонтитулВерхнийЛевый = ПолучитьИмяВременногоФайла(".bmp");
	
	КартинкаКолонтитулВерхнийЛевый = ПолучитьЛоготип(Организация, "КолонтитулВерхнийЛевый");
	КартинкаКолонтитулВерхнийЛевый.Записать(ИмяФайлаКартинкиКолонтитулВерхнийЛевый);
	
	Workbook.ActiveSheet.PageSetup.LeftHeaderPicture.Filename = ИмяФайлаКартинкиКолонтитулВерхнийЛевый; 
	Workbook.ActiveSheet.PageSetup.LeftHeader = "&G";
	
	//ЦЕНТР КОЛОНТИТУЛ
	ИмяФайлаКартинкиКолонтитулВерхнийЦентр = ПолучитьИмяВременногоФайла(".bmp");
	
	КартинкаКолонтитулВерхнийЦентр = ПолучитьЛоготип(Организация, "КолонтитулВерхнийЦентр");
	КартинкаКолонтитулВерхнийЦентр.Записать(ИмяФайлаКартинкиКолонтитулВерхнийЦентр);
	
	Workbook.ActiveSheet.PageSetup.CenterHeaderPicture.Filename = ИмяФайлаКартинкиКолонтитулВерхнийЦентр; 
	Workbook.ActiveSheet.PageSetup.CenterHeader = "&G";
	
	//ПРАВЫЙ КОЛОНТИТУЛ
	ИмяФайлаКартинкиКолонтитулВерхнийПравый = ПолучитьИмяВременногоФайла(".bmp");
	
	КартинкаКолонтитулВерхнийПравый = ПолучитьЛоготип(Организация, "КолонтитулВерхнийПравый");
	КартинкаКолонтитулВерхнийПравый.Записать(ИмяФайлаКартинкиКолонтитулВерхнийПравый);
	
	Workbook.ActiveSheet.PageSetup.RightHeaderPicture.Filename = ИмяФайлаКартинкиКолонтитулВерхнийПравый; 
	Workbook.ActiveSheet.PageSetup.RightHeader = "&G";
	
	//
	Workbook.ActiveSheet.PageSetup.Orientation = 2;
	Workbook.ActiveSheet.PageSetup.Zoom = False;
    Workbook.ActiveSheet.PageSetup.FitToPagesTall = 1;
    Workbook.ActiveSheet.PageSetup.FitToPagesWide = 1;

    //
	Workbook.Save();
	//Workbook.Close();
	
	//
	COMОбъект.Visible = Истина;
	
	//
	УдалитьФайлы(ИмяФайлаКартинкиКолонтитулВерхнийЛевый);
	УдалитьФайлы(ИмяФайлаКартинкиКолонтитулВерхнийЦентр);
	УдалитьФайлы(ИмяФайлаКартинкиКолонтитулВерхнийПравый);
	
КонецПроцедуры	


//
//
Функция ВывестиСекции(ТабличныйДокумент, ИмяОбласти, СтруктураИспользования,Макет, НужноОбъединить , Параметры = Неопределено)
		
	    
		ТоварыШапкаНомер = Макет.ПолучитьОбласть(ИмяОбласти + "|Номер");
		Если Параметры <> Неопределено Тогда
			ТоварыШапкаНомер.Параметры.Заполнить(Параметры);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ТоварыШапкаНомер);
		
		ТоварыШапкаНоменклатура = Макет.ПолучитьОбласть(ИмяОбласти + "|Номенклатура");
		Если Параметры <> Неопределено Тогда
			ТоварыШапкаНоменклатура.Параметры.Заполнить(Параметры);
		КонецЕсли;
		Область = ТабличныйДокумент.Присоединить(ТоварыШапкаНоменклатура); 
		НачальнаяЯчейка = "R" + Область.Низ + "C" + Область.Лево; 
		
		ЕстьПустыеОбласти = Ложь;
		Для Каждого Элемент Из СтруктураИспользования Цикл
			
			Если Не Элемент.Значение Тогда
				Попытка
					ОчереднаяОбласть = Макет.ПолучитьОбласть(ИмяОбласти + "|" + Элемент.Ключ);
					Если Параметры <> Неопределено Тогда
						ОчереднаяОбласть.Параметры.Заполнить(Параметры);
					КонецЕсли;
					Область = ТабличныйДокумент.Присоединить(ОчереднаяОбласть);
					КонечнаяЯчейка = "R" + Область.Низ + "C" + Область.Право; 
					ЕстьПустыеОбласти = Истина;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НужноОбъединить И ЕстьПустыеОбласти Тогда
			Область = ТабличныйДокумент.Область(НачальнаяЯчейка + ":" + КонечнаяЯчейка);
			Область.Объединить();
		КонецЕсли;	
		
		//	
		Если СтруктураИспользования["ГабаритныеРазмеры"] Тогда
			Область = Макет.ПолучитьОбласть(ИмяОбласти + "|ГабаритныеРазмеры");
			Если Параметры <> Неопределено Тогда
					Область.Параметры.Заполнить(Параметры);
			КонецЕсли;
			ТабличныйДокумент.Присоединить(Область);
		КонецЕсли;
		//картинка
		Если СтруктураИспользования.Свойство("Изображение") Тогда
			Если СтруктураИспользования["Изображение"] Тогда
				Область = Макет.ПолучитьОбласть(ИмяОбласти + "|Изображение");
				Если Параметры <> Неопределено Тогда
					Область.Параметры.Заполнить(Параметры);
				КонецЕсли;
				ТабличныйДокумент.Присоединить(Область);
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураИспользования["ТехОписание"] Тогда
			Область = Макет.ПолучитьОбласть(ИмяОбласти + "|ТехОписание");
			Если Параметры <> Неопределено Тогда
					Область.Параметры.Заполнить(Параметры);
			КонецЕсли;
			ТабличныйДокумент.Присоединить(Область);	
		КонецЕсли;
		
		Если СтруктураИспользования["ДопКомплектация"] Тогда
			Область = Макет.ПолучитьОбласть(ИмяОбласти + "|ДопКомплектация");
			Если Параметры <> Неопределено Тогда
					Область.Параметры.Заполнить(Параметры);
			КонецЕсли;
			ТабличныйДокумент.Присоединить(Область);
		КонецЕсли;
		
		ТоварыШапкаОсновнаяЧасть = Макет.ПолучитьОбласть(ИмяОбласти + "|ОсновнаяЧасть");
		Если Параметры <> Неопределено Тогда
					ТоварыШапкаОсновнаяЧасть.Параметры.Заполнить(Параметры);
			КонецЕсли;
		ТабличныйДокумент.Присоединить(ТоварыШапкаОсновнаяЧасть);
		
		Если СтруктураИспользования["Цвет"] Тогда
			Область = Макет.ПолучитьОбласть(ИмяОбласти + "|Цвет");
			Если Параметры <> Неопределено Тогда
					Область.Параметры.Заполнить(Параметры);
			КонецЕсли;
			ТабличныйДокумент.Присоединить(Область);
		КонецЕсли;
		
		Если СтруктураИспользования["Производитель"] Тогда
			Область = Макет.ПолучитьОбласть(ИмяОбласти + "|Производитель");
			Если Параметры <> Неопределено Тогда
					Область.Параметры.Заполнить(Параметры);
			КонецЕсли;
			ТабличныйДокумент.Присоединить(Область);	
		КонецЕсли;
		
		Если СтруктураИспользования["Примечание"] Тогда
			Область = Макет.ПолучитьОбласть(ИмяОбласти + "|Примечание");
			Если Параметры <> Неопределено Тогда
					Область.Параметры.Заполнить(Параметры);
			КонецЕсли;
			ТабличныйДокумент.Присоединить(Область);
		КонецЕсли;
		
		Возврат ТабличныйДокумент;
	
КонецФункции	


//
//
Функция ВывестиСПроверкойВывода(ТабличныйДокумент, ВыводимаяОбласть,  ВерхнийКолонтитул = Неопределено, НижнийКолонтитул = Неопределено)
	
	//
	МассивВыводимыхОбластей = Новый Массив;
	
	//
	Если ТипЗнч(ВыводимаяОбласть) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ВыводимаяОбласть Цикл
			МассивВыводимыхОбластей.Добавить(ЭлементМассива);
		КонецЦикла;	
	Иначе
		МассивВыводимыхОбластей.Добавить(ВыводимаяОбласть);
	КонецЕсли;	
	
	//
	Если НижнийКолонтитул <> Неопределено Тогда
			
		Если ТипЗнч(НижнийКолонтитул) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из НижнийКолонтитул Цикл
				МассивВыводимыхОбластей.Добавить(ЭлементМассива);
			КонецЦикла;	
		Иначе
			МассивВыводимыхОбластей.Добавить(НижнийКолонтитул);
		КонецЕсли;	
			
	КонецЕсли;
//	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;          
	//        
	Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
		
		//
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		//
		Если ВерхнийКолонтитул <> Неопределено Тогда
				
			Если ТипЗнч(ВерхнийКолонтитул) = Тип("Массив") Тогда
				Для Каждого ЭлементМассива Из ВерхнийКолонтитул Цикл
					ТабличныйДокумент.Вывести(ЭлементМассива);
				КонецЦикла;
			Иначе
				ТабличныйДокумент.Вывести(ВерхнийКолонтитул);
			КонецЕсли;	
				
		КонецЕсли;
	
	КонецЕсли;
	
	//
	Для Сч = 0 По МассивВыводимыхОбластей.Количество() - 1 Цикл
			
		//
		ЭлементМассива = МассивВыводимыхОбластей[Сч];
		ТабличныйДокумент.Вывести(ЭлементМассива);
	
	КонецЦикла;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////


&НаСервере
Функция НайтиЗаказПодчиненныеЗаказКлиента(ДокументОснование) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВремТаб.Ссылка,
	               |	ВремТаб.Приоритет КАК Приоритет
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЗаказКлиента.Ссылка КАК Ссылка,
	               |		1 КАК Приоритет
	               |	ИЗ
	               |		Документ.ЗаказКлиента КАК ЗаказКлиента
	               |	ГДЕ
	               |		ЗаказКлиента.ДокументОснование = &ДокументОснование
	               |		И ЗаказКлиента.Проведен
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ЗаказКлиента.Ссылка,
	               |		2
	               |	ИЗ
	               |		Документ.ЗаказКлиента КАК ЗаказКлиента
	               |	ГДЕ
	               |		ЗаказКлиента.ДокументОснование = &ДокументОснование) КАК ВремТаб
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет";
				   
	ПостроительЗапроса = Новый ПостроительЗапроса;			   
	ПостроительЗапроса.Текст = ТекстЗапроса;
	ПостроительЗапроса.Параметры.Вставить("ДокументОснование", ДокументОснование);
	ПостроительЗапроса.Выполнить();
	
	Возврат ПостроительЗапроса.Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции



//
&НаСервере
Функция ОбновитьЗаказКлиентаПоКоммерческомуПредложению(ЗаказКлиента, ДокументОснование) Экспорт
	
	ВсеОК = Истина;
	
	ДокументОбъект = ЗаказКлиента.ПолучитьОбъект();
	//АК в 11.1 перестал очищать табличную часть при заполнении
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Заполнить(ДокументОснование);
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Текст = ОписаниеОшибки();
		ВсеОК = Ложь;
	КонецПопытки;	
	
	Возврат ВсеОК;
	
КонецФункции



//
//
Функция ПечатьКоммПредложения(МассивОбъектов, ОбъектыПечати)
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_КоммерческоеПредложение"; 	
	
	//
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	
	//
	ПервыйДокумент = Истина;	
	
	//
	Для Каждого СсылкаНаОбъект из МассивОбъектов Цикл
		
		//
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Макет и области
		Макет = ПолучитьМакет("АК_КоммерческоеПредложение");	
		
		//
		РеквизитыШапки = ПолучитьРеквизитыШапки(СсылкаНаОбъект);
		
		//ЛОГОТИП
		
		//
		_ТД_Логотип = Новый ТабличныйДокумент;
		
		////
		
		Если СсылкаНаОбъект.Организация.Префикс = "ПМ" Тогда
			ШапкаЛоготип = Макет.ПолучитьОбласть("ЛогоПМ");
		ИначеЕсли СсылкаНаОбъект.Организация.Префикс = "ДМ" Тогда
			ШапкаЛоготип = Макет.ПолучитьОбласть("ЛогоДМ");
		Иначе
			ШапкаЛоготип = Макет.ПолучитьОбласть("Пустота");
		КонецЕсли;	
		
		//АСТЭК
		СвойствоГабаритныеРазмеры 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_ГабаритныеРазмеры;
		СвойствоЦвет 				= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_Цвет;
		СвойствоПроизводитель		= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_Производитель;
		
		
		
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
		              |	ИСТИНА КАК Выводить,
		              |	Таблица.НомерСтроки,
		              |	Таблица.Номенклатура,
		              |	Таблица.Количество КАК Количество,
		              |	Таблица.Номенклатура.Артикул КАК Артикул,
		              |	Таблица.Номенклатура.Код КАК Код,
		              |	Таблица.Номенклатура.Описание КАК Описание,
		              |	ВЫБОР
		              |		КОГДА ЕСТЬNULL(ГабаритныеРазмерыПоХарактеристикам.Значение, """") <> """"
		              |			ТОГДА ГабаритныеРазмерыПоХарактеристикам.Значение
		              |		КОГДА Таблица.Характеристика.Наименование <> """"
		              |			ТОГДА Таблица.Характеристика.Наименование
		              |	КОНЕЦ КАК Габариты,
		              |	ЦветПоХарактеристикам.Значение КАК Цвет,
		              |	Производитель.Значение КАК Производитель,
		              |	Таблица.АК_ПризнакНестандарт КАК ПризнакНестандарт,
		              |	Таблица.АК_НестандартОписание КАК НестандартОписание,
		              |	Таблица.АК_ПризнакЭскиз КАК ПризнакЭскиз,
		              |	Таблица.АК_ЭскизФайл КАК АК_ЭскизФайл,
		              |	Таблица.АК_ИнформацияДляОтделаЗакупки КАК ИнформацияДляОтделаЗакупки,
		              |	Таблица.АК_ДопКомплектация КАК ДопКомплектация,
		              |	Таблица.Цена КАК Цена,
		              |	Таблица.Цена * Таблица.Количество КАК СуммаБезСкидки,
		              |	ВЫБОР
		              |		КОГДА Таблица.Ссылка.ЦенаВключаетНДС
		              |			ТОГДА Таблица.Сумма
		              |		ИНАЧЕ Таблица.Сумма + Таблица.СуммаНДС
		              |	КОНЕЦ КАК Сумма,
		              |	Таблица.СуммаНДС КАК СуммаНДС,
		              |	Таблица.ПроцентРучнойСкидки + Таблица.ПроцентАвтоматическойСкидки КАК ПроцентСкидки,
		              |	Таблица.СуммаРучнойСкидки,
		              |	Таблица.СуммаАвтоматическойСкидки,
		              |	Таблица.СтавкаНДС,
		              |	Таблица.Ссылка.ЦенаВключаетНДС,
		              |	Таблица.СуммаРучнойСкидки + Таблица.СуммаАвтоматическойСкидки КАК СуммаСкидки,
		              |	Таблица.ТекстовоеОписание,
		              |	ЕСТЬNULL(Таблица.Упаковка.Ссылка, Таблица.Номенклатура.ЕдиницаИзмерения) КАК ЕдИзм,
		              |	Таблица.АК_ПризнакНестандарт,
		              |	Таблица.АК_НестандартОписание,
		              |	NULL КАК АК_ПризнакРаспределитьНаТовары
		              |ПОМЕСТИТЬ ТЗ_Товары
		              |ИЗ
		              |	Документ.КоммерческоеПредложениеКлиенту.Товары КАК Таблица
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ГабаритныеРазмеры
		              |		ПО Таблица.Номенклатура = ГабаритныеРазмеры.Ссылка
		              |			И (ГабаритныеРазмеры.Свойство = &СвойствоГабаритныеРазмеры)
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Производитель
		              |		ПО Таблица.Номенклатура = Производитель.Ссылка
		              |			И (Производитель.Свойство = &СвойствоПроизводитель)
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ГабаритныеРазмерыПоХарактеристикам
		              |		ПО Таблица.Характеристика = ГабаритныеРазмерыПоХарактеристикам.Ссылка
		              |			И (ГабаритныеРазмерыПоХарактеристикам.Свойство = &СвойствоГабаритныеРазмеры)
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЦветПоХарактеристикам
		              |		ПО Таблица.Характеристика = ЦветПоХарактеристикам.Ссылка
		              |			И (ЦветПоХарактеристикам.Свойство = &СвойствоЦвет)
		              |ГДЕ
		              |	Таблица.Ссылка = &Ссылка
		              |	И Таблица.Активность
		              |	И НЕ Таблица.Номенклатура В (ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_Доставка), 
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_Монтаж),
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_ДоставкаАгент),
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_ДоставкаКлиент),
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_МонтажАгент),
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_МонтажКлиент))
		              |
		              |ОБЪЕДИНИТЬ ВСЕ
		              |
		              |ВЫБРАТЬ
		              |	ЛОЖЬ,
		              |	Таблица.НомерСтроки,
		              |	Таблица.Номенклатура,
		              |	Таблица.Количество,
		              |	Таблица.Номенклатура.Артикул,
		              |	Таблица.Номенклатура.Код,
		              |	Таблица.Номенклатура.Описание,
		              |	NULL,
		              |	NULL,
		              |	NULL,
		              |	NULL,
		              |	NULL,
		              |	NULL,
		              |	NULL,
		              |	NULL,
		              |	NULL,
		              |	Таблица.Цена,
		              |	Таблица.Количество * Таблица.Цена,
		              |	ВЫБОР
		              |		КОГДА Таблица.Ссылка.ЦенаВключаетНДС
		              |			ТОГДА Таблица.Сумма
		              |		ИНАЧЕ Таблица.Сумма + Таблица.СуммаНДС
		              |	КОНЕЦ,
		              |	Таблица.СуммаНДС,
		              |	Таблица.ПроцентРучнойСкидки + Таблица.ПроцентАвтоматическойСкидки,
		              |	Таблица.СуммаРучнойСкидки,
		              |	Таблица.СуммаАвтоматическойСкидки,
		              |	Таблица.СтавкаНДС,
		              |	Таблица.Ссылка.ЦенаВключаетНДС,
		              |	Таблица.СуммаРучнойСкидки + Таблица.СуммаАвтоматическойСкидки,
		              |	Таблица.ТекстовоеОписание,
		              |	ЕСТЬNULL(Таблица.Упаковка.Ссылка, Таблица.Номенклатура.ЕдиницаИзмерения),
		              |	NULL,
		              |	NULL,
		              |	Таблица.АК_ПризнакРаспределитьНаТовары
		              |ИЗ
		              |	Документ.КоммерческоеПредложениеКлиенту.АК_УслугиДополнительные КАК Таблица
		              |ГДЕ
		              |	Таблица.Ссылка = &Ссылка
		              |	И Таблица.Активность
		              |	И Таблица.Номенклатура В (ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_Доставка), 
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_Монтаж),
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_ДоставкаАгент),
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_ДоставкаКлиент),
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_МонтажАгент),
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_МонтажКлиент))
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	НоменклатураДополнительныеРеквизиты.Свойство,
		              |	НоменклатураДополнительныеРеквизиты.Значение,
		              |	НоменклатураДополнительныеРеквизиты.ТекстоваяСтрока,
		              |	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура
		              |ПОМЕСТИТЬ ТЗ_Свойства
		              |ИЗ
		              |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		              |ГДЕ
		              |	НоменклатураДополнительныеРеквизиты.Ссылка В
		              |			(ВЫБРАТЬ
		              |				ТЗ_Товары.Номенклатура
		              |			ИЗ
		              |				ТЗ_Товары)
		              |	И НЕ НоменклатураДополнительныеРеквизиты.Свойство В (&СвойствоГабаритныеРазмеры, &СвойствоПроизводитель)
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ТЗ_Товары.Выводить,
		              |	ТЗ_Товары.НомерСтроки,
		              |	ТЗ_Товары.Номенклатура,
		              |	ТЗ_Товары.Количество,
		              |	ТЗ_Товары.Артикул,
		              |	ТЗ_Товары.Код,
		              |	ТЗ_Товары.Описание,
		              |	ТЗ_Товары.Габариты,
		              |	ТЗ_Товары.Производитель,
		              |	ТЗ_Товары.Цена,
		              |	ТЗ_Товары.СуммаБезСкидки,
		              |	ТЗ_Товары.Сумма,
		              |	ТЗ_Товары.СуммаНДС,
		              |	ТЗ_Товары.СуммаРучнойСкидки,
		              |	ТЗ_Товары.СуммаАвтоматическойСкидки,
		              |	ТЗ_Товары.СтавкаНДС,
		              |	ТЗ_Товары.ЦенаВключаетНДС,
		              |	ТЗ_Товары.СуммаСкидки,
		              |	ТЗ_Товары.ЕдИзм,
		              |	ТЗ_Товары.ПроцентСкидки,
		              |	ТЗ_Товары.ТекстовоеОписание КАК Примечание,
		              |	ТЗ_Товары.СуммаБезСкидки - ТЗ_Товары.СуммаСкидки КАК СуммаСоСкидкой,
		              |	ТЗ_Товары.Цвет КАК Цвет,
		              |	ТЗ_Товары.ДопКомплектация КАК ДопКомплектация,
		              |	ТЗ_Товары.АК_ПризнакНестандарт,
		              |	ТЗ_Товары.АК_НестандартОписание,
		              |	ТЗ_Товары.АК_ПризнакРаспределитьНаТовары
		              |ИЗ
		              |	ТЗ_Товары КАК ТЗ_Товары
		              |
		              |УПОРЯДОЧИТЬ ПО
		              |	ТЗ_Товары.НомерСтроки
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ РАЗЛИЧНЫЕ
		              |	ТЗ_Свойства.Свойство
		              |ИЗ
		              |	ТЗ_Свойства КАК ТЗ_Свойства
		              |
		              |УПОРЯДОЧИТЬ ПО
		              |	ТЗ_Свойства.Свойство.АК_ПорядокВывода,
		              |	ТЗ_Свойства.Свойство.Наименование
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ТЗ_Свойства.Свойство,
		              |	ТЗ_Свойства.Значение,
		              |	ТЗ_Свойства.ТекстоваяСтрока,
		              |	ТЗ_Свойства.Номенклатура КАК Номенклатура
		              |ИЗ
		              |	ТЗ_Свойства КАК ТЗ_Свойства";
					  
		_ТД_ТоварыШапка = Новый ТабличныйДокумент;					  
		//							
		
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		
		// АСТЭК
		Запрос.УстановитьПараметр("СвойствоГабаритныеРазмеры", СвойствоГабаритныеРазмеры);
		Запрос.УстановитьПараметр("СвойствоЦвет", СвойствоЦвет);
		Запрос.УстановитьПараметр("СвойствоПроизводитель", СвойствоПроизводитель);
		
		Результат = Запрос.ВыполнитьПакет();	
		
		//
		тзТовары = Результат.Получить(Результат.Количество()-3).Выгрузить();
		тзСвойства = Результат.Получить(Результат.Количество()-2).Выгрузить();
		тзСвойстваИЗначения = Результат.Получить(Результат.Количество()-1).Выгрузить();
		
		
		//ЗАГОЛОВОК
		ЗаголовокПостоянная = Макет.ПолучитьОбласть("Заголовок|Постоянная");
				
		//
		ЗаголовокПостоянная.Параметры.Заполнить(РеквизитыШапки);
		Если НЕ ЗначениеЗаполнено(РеквизитыШапки.ПартнерАдрес) Тогда
			АдресПартнера = РеквизитыШапки.Партнер.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.АдресПартнера);
			Если ЗначениеЗаполнено(АдресПартнера) Тогда
				ЗаголовокПостоянная.Параметры.ПартнерАдрес = АдресПартнера.Представление;
			КонецЕсли;	
		КонецЕсли;
		
		//
		//ЗаголовокПостоянная.Параметры.Номер = РеквизитыШапки.Номер;
		ЗаголовокПостоянная.Параметры.Дата = Формат(РеквизитыШапки.Дата, "ДЛФ=DD");
		
		// Правая часть заголовка
		ЗаголовокПостоянная.Параметры.ГарантийныйСрок = "12 месяцев";
		ЗаголовокПостоянная.Параметры.СрокДействия = ?(ЗначениеЗаполнено(РеквизитыШапки.СрокДействия), (НачалоДня(РеквизитыШапки.СрокДействия) - НачалоДня(РеквизитыШапки.Дата))/(24*60*60), 30);
		
		//
		ЗаголовокПостоянная.Параметры.ПартнерКонтактнаяИнформация = ПолучитьИнформациюОКонтактномЛице(РеквизитыШапки.ПартнерКонтактноеЛицо, Ложь, Ложь, Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица, Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица,);
		ЗаголовокПостоянная.Параметры.Основание = РеквизитыШапки.Основание;
		//
		//_ТД_ТоварыШапка.Вывести(ЗаголовокПостоянная);
		
		// определим колонки которые не используются
		СтруктураИспользования = Новый Структура;
		СтруктураИспользования.Вставить("ГабаритныеРазмеры" , Ложь);
		//СтруктураИспользования.Вставить("Изображение" , Ложь);
		СтруктураИспользования.Вставить("ДопКомплектация" , Ложь);
		СтруктураИспользования.Вставить("Производитель" , Ложь);
		СтруктураИспользования.Вставить("ТехОписание" , Ложь);
		СтруктураИспользования.Вставить("Примечание" , Ложь);
		СтруктураИспользования.Вставить("Цвет" , Ложь);
		
		Для Каждого Строка Из тзТовары Цикл
			
			Если Не СтруктураИспользования["ГабаритныеРазмеры"] Тогда
				СтруктураИспользования["ГабаритныеРазмеры"] = ЗначениеЗаполнено(Строка.Габариты) или ЗначениеЗаполнено(Строка.АК_ПризнакНестандарт)  ;
			КонецЕсли;
			
			Если Не СтруктураИспользования["ДопКомплектация"] Тогда
				СтруктураИспользования["ДопКомплектация"] = ЗначениеЗаполнено(Строка.ДопКомплектация);
			КонецЕсли;
			
			Если Не СтруктураИспользования["Производитель"] Тогда
				СтруктураИспользования["Производитель"] = ЗначениеЗаполнено(Строка.Производитель);
			КонецЕсли;
			
			Если Не СтруктураИспользования["ТехОписание"] Тогда
				СтруктураИспользования["ТехОписание"] = ЗначениеЗаполнено(Строка.Описание);
			КонецЕсли;
			
			Если Не СтруктураИспользования["Примечание"] Тогда
				СтруктураИспользования["Примечание"] = ЗначениеЗаполнено(Строка.Примечание);
			КонецЕсли;
			
			Если Не СтруктураИспользования["Цвет"] Тогда
				СтруктураИспользования["Цвет"] = ЗначениеЗаполнено(Строка.Цвет);
			КонецЕсли;
			
		КонецЦикла;
		
		
		//// вывод ЛОГО
		_ТД_Логотип = Новый ТабличныйДокумент;
		
		_ТД_Логотип = ВывестиСекции(_ТД_Логотип, "Пустота",СтруктураИспользования,Макет, Ложь);
		
		ТабличныйДокумент.Вывести(_ТД_Логотип);
		ТабличныйДокумент.Вывести(ШапкаЛоготип);
		ТабличныйДокумент.Вывести(ЗаголовокПостоянная);
		
		_ТД_ТоварыШапка = ВывестиСекции(_ТД_ТоварыШапка, "ТоварыШапка",СтруктураИспользования,Макет, Истина);
		
		//
		КоличествоВсего = 0;
		
		// laza
		ИтогоСуммаСоСкидкой = 0;
		ИтогоСуммаНДС = 0;
		ИтогоСуммаВсего = 0;
		СуммаДляРасчетаДоставкиМонтажа = 0;
		ИтогоСкидкаПоВсемПозициям = 0;
		КоличествоСкидок = 0;
		ИтогоСуммаСкидка = 0;
		// --- laza
		
		//
		СуммаСкидки = 0;
		СуммаСкидкиНДС = 0;
		СуммаТоваровБезСкидкиВсего = 0;
		СуммаТоваровВсего = 0;
		СуммаТоваровНДСВсего = 0;
		СуммаДоставкиВсего = 0;
		СуммаДоставкиНДСВсего = 0;
		СуммаМонтажаВсего = 0;
		СуммаМонтажаНДСВсего = 0;
	//	
	//	//
		НомерСтроки = 1;
	 	//	
	//	//
		Для Каждого СтрокаТЗ из тзТовары Цикл
	//		
	//		//
			Если СтрокаТЗ.Выводить Тогда
				
				_ТД = Новый ТабличныйДокумент;
				//
				//ТабличныйДокумент = Новый ТабличныйДокумент;
				
				ТоварыСтрокаНомер = Макет.ПолучитьОбласть("ТоварыСтрока|Номер");
				ТоварыСтрокаНомер.Параметры.НомерСтроки = НомерСтроки;
				_ТД.Вывести(ТоварыСтрокаНомер);
	
				ТоварыСтрокаНоменклатура = Макет.ПолучитьОбласть("ТоварыСтрока|Номенклатура");
				ТоварыСтрокаНоменклатура.Параметры.Заполнить(СтрокаТЗ);
				Область = _ТД.Присоединить(ТоварыСтрокаНоменклатура); 
				НачальнаяЯчейка = "R" + Область.Низ + "C" + Область.Лево;
				
				ЕстьПустыеОбласти = ложь;
				Для Каждого Элемент Из СтруктураИспользования Цикл
					Если Не Элемент.Значение Тогда
						ОчереднаяОбласть = Макет.ПолучитьОбласть("ТоварыСтрока|" + Элемент.Ключ);
						Область = _ТД.Присоединить(ОчереднаяОбласть);
						КонечнаяЯчейка = "R" + Область.Низ + "C" + Область.Право; 
						ЕстьПустыеОбласти = истина;
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьПустыеОбласти Тогда
					Область = _ТД.Область(НачальнаяЯчейка + ":" + КонечнаяЯчейка);
					Область.Объединить();
				КонецЕсли;
				
				Если СтруктураИспользования["ГабаритныеРазмеры"] Тогда
					Область = Макет.ПолучитьОбласть("ТоварыСтрока|ГабаритныеРазмеры");
					Область.Параметры.Заполнить(СтрокаТЗ);
					// АК ИГОРЬ 28 02 2013
					Область.Параметры.Габариты = ?(СтрокаТЗ.АК_ПризнакНестандарт,СтрокаТЗ.АК_НестандартОписание,СтрокаТЗ.Габариты);
					_ТД.Присоединить(Область);
				КонецЕсли;
				
				Если СтруктураИспользования["ТехОписание"] Тогда
					Область = Макет.ПолучитьОбласть("ТоварыСтрока|ТехОписание");
					Область.Параметры.Заполнить(СтрокаТЗ);
					_ТД.Присоединить(Область);	
				КонецЕсли;
				
				Если СтруктураИспользования["ДопКомплектация"] Тогда
					Область = Макет.ПолучитьОбласть("ТоварыСтрока|ДопКомплектация");
					Область.Параметры.Заполнить(СтрокаТЗ);
					_ТД.Присоединить(Область);
				КонецЕсли;
				
				ТоварыСтрокаОсновнаяЧасть = Макет.ПолучитьОбласть("ТоварыСтрока|ОсновнаяЧасть");
				ТоварыСтрокаОсновнаяЧасть.Параметры.Заполнить(СтрокаТЗ);
				
				//
				ТоварыСтрокаОсновнаяЧасть.Параметры.Заполнить(СтрокаТЗ);
				  
				//
								
				Цена = СтрокаТЗ.СуммаБезСкидки/СтрокаТЗ.Количество;
				Сумма = СтрокаТЗ.СуммаБезСкидки;
				
				
				Если СтрокаТЗ.ЦенаВключаетНДС Тогда
					Цена = Цена / (ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЗ.СтавкаНДС)*100+100) * 100;        	
				КонецЕсли;
				
				
				//
				СуммаСкидки = (Цена * СтрокаТЗ.Количество) / 100 * СтрокаТЗ.ПроцентСкидки;
				СуммаБезСкидки = Цена * СтрокаТЗ.Количество;
				СуммаСоСкидкой = СуммаБезСкидки - СуммаСкидки;
				
				СуммаНДС = Окр(Ценообразование.РассчитатьСуммуНДС(СуммаСоСкидкой, СтрокаТЗ.СтавкаНДС, Ложь), 2);
				
				//
				ТоварыСтрокаОсновнаяЧасть.Параметры.Цена = Цена;
				ТоварыСтрокаОсновнаяЧасть.Параметры.СуммаСкидки = СуммаСкидки;
				ТоварыСтрокаОсновнаяЧасть.Параметры.СуммаНДС = СуммаНДС;
				ТоварыСтрокаОсновнаяЧасть.Параметры.СтавкаНДС = 100 * ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЗ.СтавкаНДС);
				ТоварыСтрокаОсновнаяЧасть.Параметры.СуммаВсего = СуммаСоСкидкой + СуммаНДС; 
				ТоварыСтрокаОсновнаяЧасть.Параметры.СуммаСоСкидкой = СуммаСоСкидкой;				
				//
				_ТД.Присоединить(ТоварыСтрокаОсновнаяЧасть);
				
				Если СтруктураИспользования["Цвет"] Тогда
					Область = Макет.ПолучитьОбласть("ТоварыСтрока|Цвет");
					Область.Параметры.Заполнить(СтрокаТЗ);
					_ТД.Присоединить(Область);
				КонецЕсли;
				
				Если СтруктураИспользования["Производитель"] Тогда
					Область = Макет.ПолучитьОбласть("ТоварыСтрока|Производитель");
					Область.Параметры.Заполнить(СтрокаТЗ);
					_ТД.Присоединить(Область);	
				КонецЕсли;
				
				Если СтруктураИспользования["Примечание"] Тогда
					Область = Макет.ПолучитьОбласть("ТоварыСтрока|Примечание");
					Область.Параметры.Заполнить(СтрокаТЗ);
					_ТД.Присоединить(Область);
				КонецЕсли;
				
				//
				Если тзТовары.Индекс(СтрокаТЗ) = 0 Тогда
					
					//
					МассивВерхнийКолонтитул = Новый Массив;
					МассивВерхнийКолонтитул.Добавить(_ТД_Логотип);
					
					//
					МассивСтрока = Новый Массив;
					МассивСтрока.Добавить(_ТД_ТоварыШапка);
					МассивСтрока.Добавить(_ТД);
					
					//
					ВывестиСПроверкойВывода(ТабличныйДокумент, МассивСтрока, МассивВерхнийКолонтитул);
					
				Иначе	
					
					//
					МассивВерхнийКолонтитул = Новый Массив;
					МассивВерхнийКолонтитул.Добавить(_ТД_Логотип);
					МассивВерхнийКолонтитул.Добавить(_ТД_ТоварыШапка);
					
					//
					ВывестиСПроверкойВывода(ТабличныйДокумент, _ТД, МассивВерхнийКолонтитул);
				
				КонецЕсли;
				
				//
				НомерСтроки = НомерСтроки + 1;
				КоличествоВсего = КоличествоВсего + СтрокаТЗ.Количество;
				
				ИтогоСуммаСоСкидкой = Окр(ИтогоСуммаСоСкидкой + СуммаСоСкидкой,2);
				ИтогоСуммаНДС = Окр(ИтогоСуммаНДС + СуммаНДС,2);
				ИтогоСуммаВсего = Окр(ИтогоСуммаВсего + СуммаСоСкидкой + СуммаНДС,2);
				ИтогоСкидкаПоВсемПозициям = ИтогоСкидкаПоВсемПозициям + (СуммаБезСкидки - СуммаСоСкидкой) / (СуммаБезСкидки/100); 
				КоличествоСкидок = КоличествоСкидок + 1;
				//
				СуммаТоваровБезСкидкиВсего = СуммаТоваровБезСкидкиВсего + Сумма;
				СуммаТоваровВсего = СуммаТоваровВсего + СтрокаТЗ.Сумма;
				СуммаТоваровНДСВсего = СуммаТоваровНДСВсего + СуммаНДС;
				
				//
				СуммаСкидкиНДС = Ценообразование.РассчитатьСуммуНДС(СтрокаТЗ.СуммаСкидки, СтрокаТЗ.СтавкаНДС, СтрокаТЗ.ЦенаВключаетНДС);
				
				//
				ИтогоСуммаСкидка = ИтогоСуммаСкидка +  СуммаСкидки;// + ?(СтрокаТЗ.ЦенаВключаетНДС, СтрокаТЗ.СуммаСкидки, СтрокаТЗ.СуммаСкидки + СуммаСкидкиНДС);
				СуммаСкидкиНДС = СуммаСкидкиНДС + СуммаСкидкиНДС;
				
				//
				Если СтрокаТЗ.Номенклатура <> Справочники.Номенклатура.АК_Монтаж
					И СтрокаТЗ.Номенклатура <> Справочники.Номенклатура.АК_МонтажАгент
					И СтрокаТЗ.Номенклатура <> Справочники.Номенклатура.АК_МонтажКлиент
					И СтрокаТЗ.Номенклатура <> Справочники.Номенклатура.АК_Доставка
					И СтрокаТЗ.Номенклатура <> Справочники.Номенклатура.АК_ДоставкаАгент
					И СтрокаТЗ.Номенклатура <> Справочники.Номенклатура.АК_ДоставкаКлиент Тогда					
				
					СуммаДляРасчетаДоставкиМонтажа = ?(СтрокаТЗ.ЦенаВключаетНДС, СуммаДляРасчетаДоставкиМонтажа + СтрокаТЗ.Цена * СтрокаТЗ.Количество, СуммаДляРасчетаДоставкиМонтажа + СтрокаТЗ.Цена * СтрокаТЗ.Количество+ СтрокаТЗ.СуммаНДС);
					
				КонецЕсли;					
				
				//СуммаДляРасчетаДоставкиМонтажа = СуммаДляРасчетаДоставкиМонтажа + СтрокаТЗ.Цена + СтрокаТЗ.СуммаНДС;
				
			КонецЕсли;	
			
			//
			Если НЕ СтрокаТЗ.Выводить И (СтрокаТЗ.Номенклатура = Справочники.Номенклатура.АК_Доставка 
				ИЛИ 
				СтрокаТЗ.Номенклатура = Справочники.Номенклатура.АК_ДоставкаАгент
				ИЛИ СтрокаТЗ.Номенклатура = Справочники.Номенклатура.АК_ДоставкаКлиент) и Не СтрокаТЗ.АК_ПризнакРаспределитьНаТовары Тогда
				
				//СуммаДоставкиБезНдс = СтрокаТЗ.Сумма / (ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЗ.СтавкаНДС)*100+100) * 100; 
				//СуммаДоставкиВсего = СуммаДоставкиВсего + СуммаДоставкиБезНдс;
				//СуммаДоставкиНДСВсего = СуммаДоставкиНДСВсего + СтрокаТЗ.СуммаНДС;
				
				СуммаДоставкиБезНдс = ?(НЕ СтрокаТЗ.ЦенаВключаетНДС, СтрокаТЗ.Сумма, СтрокаТЗ.Сумма - СтрокаТЗ.СуммаНДС); 
				СуммаДоставкиВсего = СуммаДоставкиВсего + СуммаДоставкиБезНдс;
				СуммаДоставкиНДСВсего = СуммаДоставкиНДСВсего + СтрокаТЗ.СуммаНДС;
				
				
			КонецЕсли;
			
			//
			Если НЕ СтрокаТЗ.Выводить И (СтрокаТЗ.Номенклатура = Справочники.Номенклатура.АК_Монтаж 
				ИЛИ 
				СтрокаТЗ.Номенклатура = Справочники.Номенклатура.АК_МонтажАгент
				ИЛИ СтрокаТЗ.Номенклатура = Справочники.Номенклатура.АК_МонтажКлиент) и Не СтрокаТЗ.АК_ПризнакРаспределитьНаТовары Тогда
				
				//СуммаМонтажаБезНдс = СтрокаТЗ.Сумма / (ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЗ.СтавкаНДС)*100+100) * 100; 
				//СуммаМонтажаВсего = СуммаМонтажаВсего + СуммаМонтажаБезНдс;
				//СуммаМонтажаНДСВсего = СуммаМонтажаНДСВсего + СтрокаТЗ.СуммаНДС;
				
				
				СуммаМонтажаБезНдс = ?(НЕ СтрокаТЗ.ЦенаВключаетНДС, СтрокаТЗ.Сумма, СтрокаТЗ.Сумма - СтрокаТЗ.СуммаНДС);
				СуммаМонтажаВсего = СуммаМонтажаВсего + СуммаМонтажаБезНдс;
				СуммаМонтажаНДСВсего = СуммаМонтажаНДСВсего + СтрокаТЗ.СуммаНДС;
				
				
				
			КонецЕсли;
			
			
		КонецЦикла;	
		
		ДоставкаИМонтажСуммаСоСкидкой = СуммаДоставкиВсего + СуммаМонтажаВсего; 
		ДоставкаИМонтажСуммаНДС = СуммаМонтажаНДСВсего + СуммаДоставкиНДСВсего;
		ДоставкаИМонтажСуммаВсегоСНДС = ДоставкаИМонтажСуммаСоСкидкой + ДоставкаИМонтажСуммаНДС;
		
		СуммаВсегоСоСкидкой = ДоставкаИМонтажСуммаСоСкидкой + ИтогоСуммаСоСкидкой;
		СуммаВсегоНДС = ДоставкаИМонтажСуммаНДС + ИтогоСуммаНДС;
		СуммаВсего = ДоставкаИМонтажСуммаВсегоСНДС + ИтогоСуммаВсего; 
		ИтогоСкидка = ИтогоСкидкаПоВсемПозициям / КоличествоСкидок;
		
	//	
		//ПОДВАЛ ТОВАРЫ
		
		_ТД = Новый ТабличныйДокумент;
		//
		ТоварыПодвалПостоянная = Макет.ПолучитьОбласть("ТоварыПодвал|ОсновнаяЧасть");
		
		ТоварыПодвалНомер = Макет.ПолучитьОбласть("ТоварыПодвал|Номер");
		_ТД.Вывести(ТоварыПодвалНомер);
		
		ТоварыПодвалНоменклатура = Макет.ПолучитьОбласть("ТоварыПодвал|Номенклатура");
		Область = _ТД.Присоединить(ТоварыПодвалНоменклатура); 
		
		
		Для Каждого Элемент Из СтруктураИспользования Цикл
			Если Не Элемент.Значение Тогда
				ОчереднаяОбласть = Макет.ПолучитьОбласть("ТоварыПодвал|" + Элемент.Ключ);
				Область = _ТД.Присоединить(ОчереднаяОбласть);
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураИспользования["ГабаритныеРазмеры"] Тогда
			Область = Макет.ПолучитьОбласть("ТоварыПодвал|ГабаритныеРазмеры");
			_ТД.Присоединить(Область);
		КонецЕсли;
		
		Если СтруктураИспользования["ТехОписание"] Тогда
			Область = Макет.ПолучитьОбласть("ТоварыПодвал|ТехОписание");
			_ТД.Присоединить(Область);	
		КонецЕсли;
		
		Если СтруктураИспользования["ДопКомплектация"] Тогда
			Область = Макет.ПолучитьОбласть("ТоварыПодвал|ДопКомплектация");
			_ТД.Присоединить(Область);
		КонецЕсли;
		
		
		//
		// Подвал таблицы
		Параметры = Новый Структура;
		Параметры.Вставить("КоличествоВсего", КоличествоВсего);
		Параметры.Вставить("ИтогоСкидка", ИтогоСкидка);
		Параметры.Вставить("ИтогоСуммаСкидка", ИтогоСуммаСкидка);
		
		//
		Параметры.Вставить("ИтогоСуммаСоСкидкой", ИтогоСуммаСоСкидкой);
		Параметры.Вставить("ИтогоСуммаНДС", ИтогоСуммаНДС);
		Параметры.Вставить("ИтогоСуммаВсего", ИтогоСуммаВсего);
		
		
		Параметры.Вставить("ДоставкаИМонтажСуммаСоСкидкой", ДоставкаИМонтажСуммаСоСкидкой);
		Параметры.Вставить("ДоставкаИМонтажСуммаНДС", ДоставкаИМонтажСуммаНДС);
		Параметры.Вставить("ДоставкаИМонтажСуммаВсегоСНДС", ДоставкаИМонтажСуммаВсегоСНДС);
		
		Параметры.Вставить("СуммаВсегоСоСкидкой", СуммаВсегоСоСкидкой);
		Параметры.Вставить("СуммаВсегоНДС", СуммаВсегоНДС);
		Параметры.Вставить("СуммаВсего", СуммаВсего);
		
		Если СуммаТоваровВсего = 0 Тогда
			Параметры.Вставить("СкидкаПроцент", 0);
			Параметры.Вставить("ДоставкаПроцент", 0);
			Параметры.Вставить("МонтажПроцент", 0);
		Иначе
			Параметры.Вставить("СкидкаПроцент", Окр(100 * ИтогоСуммаСкидка / СуммаТоваровБезСкидкиВсего, 2));
			Параметры.Вставить("ДоставкаИМонтажПроцент", Окр(ДоставкаИМонтажСуммаВсегоСНДС/ (СуммаДляРасчетаДоставкиМонтажа / 100)));
		КонецЕсли;
		
		//
		ТоварыПодвалПостоянная.Параметры.Заполнить(Параметры);
		
		_ТД.Присоединить(ТоварыПодвалПостоянная);
		
		Если СтруктураИспользования["Цвет"] Тогда
			Область = Макет.ПолучитьОбласть("ТоварыПодвал|Цвет");
			_ТД.Присоединить(Область);
		КонецЕсли;
		
		Если СтруктураИспользования["Производитель"] Тогда
			Область = Макет.ПолучитьОбласть("ТоварыПодвал|Производитель");
			_ТД.Присоединить(Область);	
		КонецЕсли;
		
		Если СтруктураИспользования["Примечание"] Тогда
			Область = Макет.ПолучитьОбласть("ТоварыПодвал|Примечание");
			_ТД.Присоединить(Область);
		КонецЕсли;
		
		ВывестиСПроверкойВывода(ТабличныйДокумент, _ТД, _ТД_Логотип);
		
		//ПОДВАЛ
		
		//
		ПодвалПостоянная = Макет.ПолучитьОбласть("Подвал");	
		
		//
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(РеквизитыШапки.Организация, КонецДня(РеквизитыШапки.Дата));
		
		//
		ПодвалПостояннаяПараметры = Новый Структура;
		ПодвалПостояннаяПараметры.Вставить("ОрганизацияКонтактноеЛицо", РеквизитыШапки.Ответственный.Наименование); 
		ПодвалПостояннаяПараметры.Вставить("ОрганизацияКонтактноеЛицоДолжность", РеквизитыШапки.Ответственный.АК_Должность);
		ПодвалПостояннаяПараметры.Вставить("Организация", СведенияОбОрганизации.ПолноеНаименование);
		ПодвалПостояннаяПараметры.Вставить("ОрганизацияТелефон", "Тел.: " + СведенияОбОрганизации.Телефоны);
		ПодвалПостояннаяПараметры.Вставить("ОрганизацияКонтактноеЛицоТелефон", УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(РеквизитыШапки.Ответственный.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.МобильныйТелефонФизическогоЛица));
		ПодвалПостояннаяПараметры.Вставить("ОрганизацияАдресЭП", УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(РеквизитыШапки.Ответственный.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица));
		
		//
		ПодвалПостоянная.Параметры.Заполнить(ПодвалПостояннаяПараметры);
			//
		ВывестиСПроверкойВывода(ТабличныйДокумент, ПодвалПостоянная, _ТД_Логотип);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно 
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаНаОбъект);
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

	
	
КонецФункции

//
//
Функция ПечатьКоммПредложенияКартинки(МассивОбъектов, ОбъектыПечати)
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_КоммерческоеПредложение"; 	
	
	//
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	
	//
	ПервыйДокумент = Истина;	
	
	//
	Для Каждого СсылкаНаОбъект из МассивОбъектов Цикл
		
		//
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Макет и области
		Макет = ПолучитьМакет("АК_КоммерческоеПредложениеКартинки");	
		
		//
		РеквизитыШапки = ПолучитьРеквизитыШапки(СсылкаНаОбъект);
		
		//ЛОГОТИП
		
		//
		_ТД_Логотип = Новый ТабличныйДокумент;
		
		////
		
		Если СсылкаНаОбъект.Организация.Префикс = "ПМ" Тогда
			ШапкаЛоготип = Макет.ПолучитьОбласть("ЛогоПМ");
		ИначеЕсли СсылкаНаОбъект.Организация.Префикс = "ДМ" Тогда
			ШапкаЛоготип = Макет.ПолучитьОбласть("ЛогоДМ");
		Иначе
			ШапкаЛоготип = Макет.ПолучитьОбласть("Пустота");
		КонецЕсли;	
		
		//АСТЭК
		СвойствоГабаритныеРазмеры 	= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("УдалитьГабаритные размеры");
		СвойствоЦвет 				= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("УдалитьЦвет");
		СвойствоПроизводитель		= ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("УдалитьПроизводитель");
		
		
		
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
		              |	ИСТИНА КАК Выводить,
		              |	Таблица.НомерСтроки,
		              |	Таблица.Номенклатура,
		              |	Таблица.Количество КАК Количество,
		              |	Таблица.Номенклатура.Артикул КАК Артикул,
		              |	Таблица.Номенклатура.Код КАК Код,
		              |	Таблица.Номенклатура.Описание КАК Описание,
		              |	ВЫБОР
		              |		КОГДА ЕСТЬNULL(ГабаритныеРазмерыПоХарактеристикам.Значение, """") <> """"
		              |			ТОГДА ГабаритныеРазмерыПоХарактеристикам.Значение
		              |		КОГДА Таблица.Характеристика.Наименование <> """"
		              |			ТОГДА Таблица.Характеристика.Наименование
		              |	КОНЕЦ КАК Габариты,
		              |	ЦветПоХарактеристикам.Значение КАК Цвет,
		              |	Производитель.Значение КАК Производитель,
		              |	Таблица.АК_ПризнакНестандарт КАК ПризнакНестандарт,
		              |	Таблица.АК_НестандартОписание КАК НестандартОписание,
		              |	Таблица.АК_ПризнакЭскиз КАК ПризнакЭскиз,
		              |	Таблица.АК_ЭскизФайл КАК АК_ЭскизФайл,
		              |	Таблица.АК_ИнформацияДляОтделаЗакупки КАК ИнформацияДляОтделаЗакупки,
		              |	Таблица.АК_ДопКомплектация КАК ДопКомплектация,
		              |	Таблица.Цена КАК Цена,
		              |	Таблица.Цена * Таблица.Количество КАК СуммаБезСкидки,
		              |	ВЫБОР
		              |		КОГДА Таблица.Ссылка.ЦенаВключаетНДС
		              |			ТОГДА Таблица.Сумма
		              |		ИНАЧЕ Таблица.Сумма + Таблица.СуммаНДС
		              |	КОНЕЦ КАК Сумма,
		              |	Таблица.СуммаНДС КАК СуммаНДС,
		              |	Таблица.ПроцентРучнойСкидки + Таблица.ПроцентАвтоматическойСкидки КАК ПроцентСкидки,
		              |	Таблица.СуммаРучнойСкидки,
		              |	Таблица.СуммаАвтоматическойСкидки,
		              |	Таблица.СтавкаНДС,
		              |	Таблица.Ссылка.ЦенаВключаетНДС,
		              |	Таблица.СуммаРучнойСкидки + Таблица.СуммаАвтоматическойСкидки КАК СуммаСкидки,
		              |	Таблица.ТекстовоеОписание,
		              |	ЕСТЬNULL(Таблица.Упаковка.Ссылка, Таблица.Номенклатура.ЕдиницаИзмерения) КАК ЕдИзм,
		              |	Таблица.АК_ПризнакНестандарт,
		              |	Таблица.АК_НестандартОписание,
		              |	NULL КАК АК_ПризнакРаспределитьНаТовары
		              |ПОМЕСТИТЬ ТЗ_Товары
		              |ИЗ
		              |	Документ.КоммерческоеПредложениеКлиенту.Товары КАК Таблица
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ГабаритныеРазмеры
		              |		ПО Таблица.Номенклатура = ГабаритныеРазмеры.Ссылка
		              |			И (ГабаритныеРазмеры.Свойство = &СвойствоГабаритныеРазмеры)
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Производитель
		              |		ПО Таблица.Номенклатура = Производитель.Ссылка
		              |			И (Производитель.Свойство = &СвойствоПроизводитель)
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ГабаритныеРазмерыПоХарактеристикам
		              |		ПО Таблица.Характеристика = ГабаритныеРазмерыПоХарактеристикам.Ссылка
		              |			И (ГабаритныеРазмерыПоХарактеристикам.Свойство = &СвойствоГабаритныеРазмеры)
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ЦветПоХарактеристикам
		              |		ПО Таблица.Характеристика = ЦветПоХарактеристикам.Ссылка
		              |			И (ЦветПоХарактеристикам.Свойство = &СвойствоЦвет)
		              |ГДЕ
		              |	Таблица.Ссылка = &Ссылка
		              |	И Таблица.Активность
					  |	И НЕ(Таблица.Номенклатура В (ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_Доставка), 
					  |		 					  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_Монтаж),
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_ДоставкаАгент),
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_ДоставкаКлиент),
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_МонтажАгент),
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_МонтажКлиент)))
		              |
		              |ОБЪЕДИНИТЬ ВСЕ
		              |
		              |ВЫБРАТЬ
		              |	ЛОЖЬ,
		              |	Таблица.НомерСтроки,
		              |	Таблица.Номенклатура,
		              |	Таблица.Количество,
		              |	Таблица.Номенклатура.Артикул,
		              |	Таблица.Номенклатура.Код,
		              |	Таблица.Номенклатура.Описание,
		              |	NULL,
		              |	NULL,
		              |	NULL,
		              |	NULL,
		              |	NULL,
		              |	NULL,
		              |	NULL,
		              |	NULL,
		              |	NULL,
		              |	Таблица.Цена,
		              |	Таблица.Количество * Таблица.Цена,
		              |	ВЫБОР
		              |		КОГДА Таблица.Ссылка.ЦенаВключаетНДС
		              |			ТОГДА Таблица.Сумма
		              |		ИНАЧЕ Таблица.Сумма + Таблица.СуммаНДС
		              |	КОНЕЦ,
		              |	Таблица.СуммаНДС,
		              |	Таблица.ПроцентРучнойСкидки + Таблица.ПроцентАвтоматическойСкидки,
		              |	Таблица.СуммаРучнойСкидки,
		              |	Таблица.СуммаАвтоматическойСкидки,
		              |	Таблица.СтавкаНДС,
		              |	Таблица.Ссылка.ЦенаВключаетНДС,
		              |	Таблица.СуммаРучнойСкидки + Таблица.СуммаАвтоматическойСкидки,
		              |	Таблица.ТекстовоеОписание,
		              |	ЕСТЬNULL(Таблица.Упаковка.Ссылка, Таблица.Номенклатура.ЕдиницаИзмерения),
		              |	NULL,
		              |	NULL,
		              |	Таблица.АК_ПризнакРаспределитьНаТовары
		              |ИЗ
		              |	Документ.КоммерческоеПредложениеКлиенту.АК_УслугиДополнительные КАК Таблица
		              |ГДЕ
		              |	Таблица.Ссылка = &Ссылка
		              |	И Таблица.Активность
		              |	И Таблица.Номенклатура В (ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_Доставка), 
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_Монтаж),
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_ДоставкаАгент),
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_ДоставкаКлиент),
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_МонтажАгент),
					  |							  ЗНАЧЕНИЕ(Справочник.Номенклатура.АК_МонтажКлиент))
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	НоменклатураДополнительныеРеквизиты.Свойство,
		              |	НоменклатураДополнительныеРеквизиты.Значение,
		              |	НоменклатураДополнительныеРеквизиты.ТекстоваяСтрока,
		              |	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура
		              |ПОМЕСТИТЬ ТЗ_Свойства
		              |ИЗ
		              |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		              |ГДЕ
		              |	НоменклатураДополнительныеРеквизиты.Ссылка В
		              |			(ВЫБРАТЬ
		              |				ТЗ_Товары.Номенклатура
		              |			ИЗ
		              |				ТЗ_Товары)
		              |	И НЕ НоменклатураДополнительныеРеквизиты.Свойство В (&СвойствоГабаритныеРазмеры, &СвойствоПроизводитель)
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ТЗ_Товары.Выводить,
		              |	ТЗ_Товары.НомерСтроки,
		              |	ТЗ_Товары.Номенклатура,
		              |	ТЗ_Товары.Количество,
		              |	ТЗ_Товары.Артикул,
		              |	ТЗ_Товары.Код,
		              |	ТЗ_Товары.Описание,
		              |	ТЗ_Товары.Габариты,
		              |	ТЗ_Товары.Производитель,
		              |	ТЗ_Товары.Цена,
		              |	ТЗ_Товары.СуммаБезСкидки,
		              |	ТЗ_Товары.Сумма,
		              |	ТЗ_Товары.СуммаНДС,
		              |	ТЗ_Товары.СуммаРучнойСкидки,
		              |	ТЗ_Товары.СуммаАвтоматическойСкидки,
		              |	ТЗ_Товары.СтавкаНДС,
		              |	ТЗ_Товары.ЦенаВключаетНДС,
		              |	ТЗ_Товары.СуммаСкидки,
		              |	ТЗ_Товары.ЕдИзм,
		              |	ТЗ_Товары.ПроцентСкидки,
		              |	ТЗ_Товары.ТекстовоеОписание КАК Примечание,
		              |	ТЗ_Товары.СуммаБезСкидки - ТЗ_Товары.СуммаСкидки КАК СуммаСоСкидкой,
		              |	ТЗ_Товары.Цвет КАК Цвет,
		              |	ТЗ_Товары.ДопКомплектация КАК ДопКомплектация,
		              |	ТЗ_Товары.АК_ПризнакНестандарт,
		              |	ТЗ_Товары.АК_НестандартОписание,
		              |	ТЗ_Товары.АК_ПризнакРаспределитьНаТовары
		              |ИЗ
		              |	ТЗ_Товары КАК ТЗ_Товары
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ РАЗЛИЧНЫЕ
		              |	ТЗ_Свойства.Свойство
		              |ИЗ
		              |	ТЗ_Свойства КАК ТЗ_Свойства
		              |
		              |УПОРЯДОЧИТЬ ПО
		              |	ТЗ_Свойства.Свойство.АК_ПорядокВывода,
		              |	ТЗ_Свойства.Свойство.Наименование
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ТЗ_Свойства.Свойство,
		              |	ТЗ_Свойства.Значение,
		              |	ТЗ_Свойства.ТекстоваяСтрока,
		              |	ТЗ_Свойства.Номенклатура КАК Номенклатура
		              |ИЗ
		              |	ТЗ_Свойства КАК ТЗ_Свойства";
					  
		_ТД_ТоварыШапка = Новый ТабличныйДокумент;					  
		//							
		
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		
		// АСТЭК
		Запрос.УстановитьПараметр("СвойствоГабаритныеРазмеры", СвойствоГабаритныеРазмеры);
		Запрос.УстановитьПараметр("СвойствоЦвет", СвойствоЦвет);
		Запрос.УстановитьПараметр("СвойствоПроизводитель", СвойствоПроизводитель);
		
		Результат = Запрос.ВыполнитьПакет();	
		
		//
		тзТовары = Результат.Получить(Результат.Количество()-3).Выгрузить();
		тзСвойства = Результат.Получить(Результат.Количество()-2).Выгрузить();
		тзСвойстваИЗначения = Результат.Получить(Результат.Количество()-1).Выгрузить();
		
		
		//ЗАГОЛОВОК
		ЗаголовокПостоянная = Макет.ПолучитьОбласть("Заголовок|Постоянная");
				
		//
		ЗаголовокПостоянная.Параметры.Заполнить(РеквизитыШапки);
		Если НЕ ЗначениеЗаполнено(РеквизитыШапки.ПартнерАдрес) Тогда
			АдресПартнера = РеквизитыШапки.Партнер.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.АдресПартнера);
			Если ЗначениеЗаполнено(АдресПартнера) Тогда
				ЗаголовокПостоянная.Параметры.ПартнерАдрес = АдресПартнера.Представление;
			КонецЕсли;	
		КонецЕсли;
		
		//
		//ЗаголовокПостоянная.Параметры.Номер = РеквизитыШапки.Номер;
		ЗаголовокПостоянная.Параметры.Дата = Формат(РеквизитыШапки.Дата, "ДЛФ=DD");
		
		// Правая часть заголовка
		ЗаголовокПостоянная.Параметры.ГарантийныйСрок = "12 месяцев";
		ЗаголовокПостоянная.Параметры.СрокДействия = ?(ЗначениеЗаполнено(РеквизитыШапки.СрокДействия), (НачалоДня(РеквизитыШапки.СрокДействия) - НачалоДня(РеквизитыШапки.Дата))/(24*60*60), 30);
		
		//
		ЗаголовокПостоянная.Параметры.ПартнерКонтактнаяИнформация = ПолучитьИнформациюОКонтактномЛице(РеквизитыШапки.ПартнерКонтактноеЛицо, Ложь, Ложь, Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица, Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица,);
		ЗаголовокПостоянная.Параметры.Основание = РеквизитыШапки.Основание;
		//
		//_ТД_ТоварыШапка.Вывести(ЗаголовокПостоянная);
		
		// определим колонки которые не используются
		СтруктураИспользования = Новый Структура;
		СтруктураИспользования.Вставить("ГабаритныеРазмеры" , Ложь);
		СтруктураИспользования.Вставить("Изображение" , Истина);
		СтруктураИспользования.Вставить("ДопКомплектация" , Ложь);
		СтруктураИспользования.Вставить("Производитель" , Ложь);
		СтруктураИспользования.Вставить("ТехОписание" , Ложь);
		СтруктураИспользования.Вставить("Примечание" , Ложь);
		СтруктураИспользования.Вставить("Цвет" , Ложь);
		
		Для Каждого Строка Из тзТовары Цикл
			
			Если Не СтруктураИспользования["ГабаритныеРазмеры"] Тогда
				СтруктураИспользования["ГабаритныеРазмеры"] = ЗначениеЗаполнено(Строка.Габариты) или ЗначениеЗаполнено(Строка.АК_ПризнакНестандарт)  ;
			КонецЕсли;
			
			Если Не СтруктураИспользования["ДопКомплектация"] Тогда
				СтруктураИспользования["ДопКомплектация"] = ЗначениеЗаполнено(Строка.ДопКомплектация);
			КонецЕсли;
			
			Если Не СтруктураИспользования["Производитель"] Тогда
				СтруктураИспользования["Производитель"] = ЗначениеЗаполнено(Строка.Производитель);
			КонецЕсли;
			
			Если Не СтруктураИспользования["ТехОписание"] Тогда
				СтруктураИспользования["ТехОписание"] = ЗначениеЗаполнено(Строка.Описание);
			КонецЕсли;
			
			Если Не СтруктураИспользования["Примечание"] Тогда
				СтруктураИспользования["Примечание"] = ЗначениеЗаполнено(Строка.Примечание);
			КонецЕсли;
			
			Если Не СтруктураИспользования["Цвет"] Тогда
				СтруктураИспользования["Цвет"] = ЗначениеЗаполнено(Строка.Цвет);
			КонецЕсли;
			
		КонецЦикла;
		
		
		//// вывод ЛОГО
		_ТД_Логотип = Новый ТабличныйДокумент;
		
		_ТД_Логотип = ВывестиСекции(_ТД_Логотип, "Пустота",СтруктураИспользования,Макет, Ложь);
		
		ТабличныйДокумент.Вывести(_ТД_Логотип);
		ТабличныйДокумент.Вывести(ШапкаЛоготип);
		ТабличныйДокумент.Вывести(ЗаголовокПостоянная);
		
		_ТД_ТоварыШапка = ВывестиСекции(_ТД_ТоварыШапка, "ТоварыШапка",СтруктураИспользования,Макет, Истина);
		
		//
		КоличествоВсего = 0;
		
		// laza
		ИтогоСуммаСоСкидкой = 0;
		ИтогоСуммаНДС = 0;
		ИтогоСуммаВсего = 0;
		СуммаДляРасчетаДоставкиМонтажа = 0;
		ИтогоСкидкаПоВсемПозициям = 0;
		КоличествоСкидок = 0;
		ИтогоСуммаСкидка = 0;
		// --- laza
		
		//
		СуммаСкидки = 0;
		СуммаСкидкиНДС = 0;
		СуммаТоваровБезСкидкиВсего = 0;
		СуммаТоваровВсего = 0;
		СуммаТоваровНДСВсего = 0;
		СуммаДоставкиВсего = 0;
		СуммаДоставкиНДСВсего = 0;
		СуммаМонтажаВсего = 0;
		СуммаМонтажаНДСВсего = 0;
	//	
	//	//
		НомерСтроки = 1;
	 	//	
		Для Каждого СтрокаТЗ из тзТовары Цикл
	//		
	//		//
			Если СтрокаТЗ.Выводить Тогда
				
				_ТД = Новый ТабличныйДокумент;
				//
				//ТабличныйДокумент = Новый ТабличныйДокумент;
				
				ТоварыСтрокаНомер = Макет.ПолучитьОбласть("ТоварыСтрока|Номер");
				ТоварыСтрокаНомер.Параметры.НомерСтроки = НомерСтроки;
				_ТД.Вывести(ТоварыСтрокаНомер);
	
				ТоварыСтрокаНоменклатура = Макет.ПолучитьОбласть("ТоварыСтрока|Номенклатура");
				ТоварыСтрокаНоменклатура.Параметры.Заполнить(СтрокаТЗ);
				Область = _ТД.Присоединить(ТоварыСтрокаНоменклатура); 
				НачальнаяЯчейка = "R" + Область.Низ + "C" + Область.Лево;
				
				ЕстьПустыеОбласти = ложь;
				Для Каждого Элемент Из СтруктураИспользования Цикл
					Если Не Элемент.Значение Тогда
						ОчереднаяОбласть = Макет.ПолучитьОбласть("ТоварыСтрока|" + Элемент.Ключ);
						Область = _ТД.Присоединить(ОчереднаяОбласть);
						КонечнаяЯчейка = "R" + Область.Низ + "C" + Область.Право; 
						ЕстьПустыеОбласти = истина;
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьПустыеОбласти Тогда
					Область = _ТД.Область(НачальнаяЯчейка + ":" + КонечнаяЯчейка);
					Область.Объединить();
				КонецЕсли;
				
				Если СтруктураИспользования["ГабаритныеРазмеры"] Тогда
					Область = Макет.ПолучитьОбласть("ТоварыСтрока|ГабаритныеРазмеры");
					Область.Параметры.Заполнить(СтрокаТЗ);
					// АК ИГОРЬ 28 02 2013
					Область.Параметры.Габариты = ?(СтрокаТЗ.АК_ПризнакНестандарт,СтрокаТЗ.АК_НестандартОписание,СтрокаТЗ.Габариты);
					_ТД.Присоединить(Область);
				КонецЕсли;
				
				// Добавляем картинку

				Если Не СтрокаТЗ.Номенклатура.ФайлКартинки.Пустая() Тогда
					Область = Макет.ПолучитьОбласть("ТоварыСтрокаКартинка|Изображение");
					ТекКартинка = Область.Рисунки.Картинка;				
					ФайлКартинки = СтрокаТЗ.Номенклатура.ФайлКартинки;
					Если ФайлКартинки.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
						// Получаем файл из базы
						ТекстЗапроса = 
							"ВЫБРАТЬ
							|	ПрисоединенныеФайлы.ХранимыйФайл
							|ИЗ
							|	РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
							|ГДЕ
							|	ПрисоединенныеФайлы.ПрисоединенныйФайл = &ПрисоединенныйФайл";
						
						ЗапросКартинки = Новый Запрос(ТекстЗапроса);
						ЗапросКартинки.УстановитьПараметр("ПрисоединенныйФайл", ФайлКартинки);
						
						ВыборкаКартинки = ЗапросКартинки.Выполнить().Выбрать();
						
						Если ВыборкаКартинки.Следующий() Тогда
							ТекКартинка.Картинка = Новый Картинка(ВыборкаКартинки.ХранимыйФайл.Получить());
						КонецЕсли;
					Иначе
						// Получаем внешнее изображение
						ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ФайлКартинки.Том) + ФайлКартинки.ПутьКФайлу;
						Попытка
							ТекКартинка.Картинка = Новый Картинка(ПолныйПуть);
						Исключение
							ТекКартинка.Картинка = Новый Картинка;
						КонецПопытки;
					КонецЕсли;
					ОбластьРисунка = Область.ТекущаяОбласть;
                    ТекКартинка.Расположить(ОбластьРисунка);
					ТекКартинка.Высота  = 29;
					ТекКартинка.Ширина  = 26;
					ТекКартинка.Лево  = 1;						
					ТекКартинка.ГраницаСверху  = Ложь;
					ТекКартинка.ГраницаСлева  = Ложь;
					ТекКартинка.ГраницаСнизу  = Ложь;
					ТекКартинка.ГраницаСправа  = Ложь;
				Иначе
					Область = Макет.ПолучитьОбласть("ТоварыСтрока|Изображение");

				КонецЕсли; 
				_ТД.Присоединить(Область);
				
				Если СтруктураИспользования["ТехОписание"] Тогда
					Область = Макет.ПолучитьОбласть("ТоварыСтрока|ТехОписание");
					Область.Параметры.Заполнить(СтрокаТЗ);
					_ТД.Присоединить(Область);	
				КонецЕсли;
				
				Если СтруктураИспользования["ДопКомплектация"] Тогда
					Область = Макет.ПолучитьОбласть("ТоварыСтрока|ДопКомплектация");
					Область.Параметры.Заполнить(СтрокаТЗ);
					_ТД.Присоединить(Область);
				КонецЕсли;
				
				ТоварыСтрокаОсновнаяЧасть = Макет.ПолучитьОбласть("ТоварыСтрока|ОсновнаяЧасть");
				ТоварыСтрокаОсновнаяЧасть.Параметры.Заполнить(СтрокаТЗ);
				
				//
				ТоварыСтрокаОсновнаяЧасть.Параметры.Заполнить(СтрокаТЗ);
				  
				//
								
				Цена = СтрокаТЗ.СуммаБезСкидки/СтрокаТЗ.Количество;
				Сумма = СтрокаТЗ.СуммаБезСкидки;
				
				
				Если СтрокаТЗ.ЦенаВключаетНДС Тогда
					Цена = Цена / (ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЗ.СтавкаНДС)*100+100) * 100;        	
				КонецЕсли;
				
				
				//
				СуммаСкидки = (Цена * СтрокаТЗ.Количество) / 100 * СтрокаТЗ.ПроцентСкидки;
				СуммаБезСкидки = Цена * СтрокаТЗ.Количество;
				СуммаСоСкидкой = СуммаБезСкидки - СуммаСкидки;
				
				СуммаНДС = Окр(Ценообразование.РассчитатьСуммуНДС(СуммаСоСкидкой, СтрокаТЗ.СтавкаНДС, Ложь), 2);
				
				//
				ТоварыСтрокаОсновнаяЧасть.Параметры.Цена = Цена;
				ТоварыСтрокаОсновнаяЧасть.Параметры.СуммаСкидки = СуммаСкидки;
				ТоварыСтрокаОсновнаяЧасть.Параметры.СуммаНДС = СуммаНДС;
				ТоварыСтрокаОсновнаяЧасть.Параметры.СтавкаНДС = 100 * ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЗ.СтавкаНДС);
				ТоварыСтрокаОсновнаяЧасть.Параметры.СуммаВсего = СуммаСоСкидкой + СуммаНДС; 
				ТоварыСтрокаОсновнаяЧасть.Параметры.СуммаСоСкидкой = СуммаСоСкидкой;				
				//
				_ТД.Присоединить(ТоварыСтрокаОсновнаяЧасть);
				
				Если СтруктураИспользования["Цвет"] Тогда
					Область = Макет.ПолучитьОбласть("ТоварыСтрока|Цвет");
					Область.Параметры.Заполнить(СтрокаТЗ);
					_ТД.Присоединить(Область);
				КонецЕсли;
				
				Если СтруктураИспользования["Производитель"] Тогда
					Область = Макет.ПолучитьОбласть("ТоварыСтрока|Производитель");
					Область.Параметры.Заполнить(СтрокаТЗ);
					_ТД.Присоединить(Область);	
				КонецЕсли;
				
				Если СтруктураИспользования["Примечание"] Тогда
					Область = Макет.ПолучитьОбласть("ТоварыСтрока|Примечание");
					Область.Параметры.Заполнить(СтрокаТЗ);
					_ТД.Присоединить(Область);
				КонецЕсли;
				
				//
				Если _ТД.Рисунки.Количество() > 0 Тогда
					_тд.ТекущаяОбласть.ВысотаСтроки = 91.5;
				КонецЕсли;
				
				Если тзТовары.Индекс(СтрокаТЗ) = 0 Тогда
					
					//
					МассивВерхнийКолонтитул = Новый Массив;
					МассивВерхнийКолонтитул.Добавить(_ТД_Логотип);
					
					//
					МассивСтрока = Новый Массив;
					МассивСтрока.Добавить(_ТД_ТоварыШапка);
					МассивСтрока.Добавить(_ТД);
					
					//
					ВывестиСПроверкойВывода(ТабличныйДокумент, МассивСтрока, МассивВерхнийКолонтитул);
					
				Иначе	
					
					//
					МассивВерхнийКолонтитул = Новый Массив;
					МассивВерхнийКолонтитул.Добавить(_ТД_Логотип);
					МассивВерхнийКолонтитул.Добавить(_ТД_ТоварыШапка);
					
					//
					ВывестиСПроверкойВывода(ТабличныйДокумент, _ТД, МассивВерхнийКолонтитул);
				
				КонецЕсли;
				
				//
				НомерСтроки = НомерСтроки + 1;
				КоличествоВсего = КоличествоВсего + СтрокаТЗ.Количество;
				
				ИтогоСуммаСоСкидкой = Окр(ИтогоСуммаСоСкидкой + СуммаСоСкидкой,2);
				ИтогоСуммаНДС = Окр(ИтогоСуммаНДС + СуммаНДС,2);
				ИтогоСуммаВсего = Окр(ИтогоСуммаВсего + СуммаСоСкидкой + СуммаНДС,2);
				ИтогоСкидкаПоВсемПозициям = ИтогоСкидкаПоВсемПозициям + (СуммаБезСкидки - СуммаСоСкидкой) / (СуммаБезСкидки/100); 
				КоличествоСкидок = КоличествоСкидок + 1;
				//
				СуммаТоваровБезСкидкиВсего = СуммаТоваровБезСкидкиВсего + Сумма;
				СуммаТоваровВсего = СуммаТоваровВсего + СтрокаТЗ.Сумма;
				СуммаТоваровНДСВсего = СуммаТоваровНДСВсего + СуммаНДС;
				
				//
				СуммаСкидкиНДС = Ценообразование.РассчитатьСуммуНДС(СтрокаТЗ.СуммаСкидки, СтрокаТЗ.СтавкаНДС, СтрокаТЗ.ЦенаВключаетНДС);
				
				//
				ИтогоСуммаСкидка = ИтогоСуммаСкидка +  СуммаСкидки;// + ?(СтрокаТЗ.ЦенаВключаетНДС, СтрокаТЗ.СуммаСкидки, СтрокаТЗ.СуммаСкидки + СуммаСкидкиНДС);
				СуммаСкидкиНДС = СуммаСкидкиНДС + СуммаСкидкиНДС;
				
				//
				Если СтрокаТЗ.Номенклатура <> Справочники.Номенклатура.АК_Монтаж
					И СтрокаТЗ.Номенклатура <> Справочники.Номенклатура.АК_МонтажАгент
					И СтрокаТЗ.Номенклатура <> Справочники.Номенклатура.АК_МонтажКлиент
					И СтрокаТЗ.Номенклатура <> Справочники.Номенклатура.АК_Доставка
					И СтрокаТЗ.Номенклатура <> Справочники.Номенклатура.АК_ДоставкаАгент
					И СтрокаТЗ.Номенклатура <> Справочники.Номенклатура.АК_ДоставкаКлиент Тогда					
				
					СуммаДляРасчетаДоставкиМонтажа = ?(СтрокаТЗ.ЦенаВключаетНДС, СуммаДляРасчетаДоставкиМонтажа + СтрокаТЗ.Цена * СтрокаТЗ.Количество, СуммаДляРасчетаДоставкиМонтажа + СтрокаТЗ.Цена * СтрокаТЗ.Количество+ СтрокаТЗ.СуммаНДС);
					
				КонецЕсли;					
				
				//СуммаДляРасчетаДоставкиМонтажа = СуммаДляРасчетаДоставкиМонтажа + СтрокаТЗ.Цена + СтрокаТЗ.СуммаНДС;
				
			КонецЕсли;	
			
			//
			Если НЕ СтрокаТЗ.Выводить И (СтрокаТЗ.Номенклатура = Справочники.Номенклатура.АК_Доставка 
				ИЛИ 
				СтрокаТЗ.Номенклатура = Справочники.Номенклатура.АК_ДоставкаАгент
				ИЛИ СтрокаТЗ.Номенклатура = Справочники.Номенклатура.АК_ДоставкаКлиент) и Не СтрокаТЗ.АК_ПризнакРаспределитьНаТовары Тогда
				
				//СуммаДоставкиБезНдс = СтрокаТЗ.Сумма / (ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЗ.СтавкаНДС)*100+100) * 100; 
				//СуммаДоставкиВсего = СуммаДоставкиВсего + СуммаДоставкиБезНдс;
				//СуммаДоставкиНДСВсего = СуммаДоставкиНДСВсего + СтрокаТЗ.СуммаНДС;
				
				СуммаДоставкиБезНдс = ?(НЕ СтрокаТЗ.ЦенаВключаетНДС, СтрокаТЗ.Сумма, СтрокаТЗ.Сумма - СтрокаТЗ.СуммаНДС); 
				СуммаДоставкиВсего = СуммаДоставкиВсего + СуммаДоставкиБезНдс;
				СуммаДоставкиНДСВсего = СуммаДоставкиНДСВсего + СтрокаТЗ.СуммаНДС;
				
				
			КонецЕсли;
			
			//
			Если НЕ СтрокаТЗ.Выводить И (СтрокаТЗ.Номенклатура = Справочники.Номенклатура.АК_Монтаж 
				ИЛИ 
				СтрокаТЗ.Номенклатура = Справочники.Номенклатура.АК_МонтажАгент
				ИЛИ СтрокаТЗ.Номенклатура = Справочники.Номенклатура.АК_МонтажКлиент) и Не СтрокаТЗ.АК_ПризнакРаспределитьНаТовары Тогда
				
				//СуммаМонтажаБезНдс = СтрокаТЗ.Сумма / (ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЗ.СтавкаНДС)*100+100) * 100; 
				//СуммаМонтажаВсего = СуммаМонтажаВсего + СуммаМонтажаБезНдс;
				//СуммаМонтажаНДСВсего = СуммаМонтажаНДСВсего + СтрокаТЗ.СуммаНДС;
				
				
				СуммаМонтажаБезНдс = ?(НЕ СтрокаТЗ.ЦенаВключаетНДС, СтрокаТЗ.Сумма, СтрокаТЗ.Сумма - СтрокаТЗ.СуммаНДС);
				СуммаМонтажаВсего = СуммаМонтажаВсего + СуммаМонтажаБезНдс;
				СуммаМонтажаНДСВсего = СуммаМонтажаНДСВсего + СтрокаТЗ.СуммаНДС;
				
				
				
			КонецЕсли;
			
			
		КонецЦикла;	
		
		ДоставкаИМонтажСуммаСоСкидкой = СуммаДоставкиВсего + СуммаМонтажаВсего; 
		ДоставкаИМонтажСуммаНДС = СуммаМонтажаНДСВсего + СуммаДоставкиНДСВсего;
		ДоставкаИМонтажСуммаВсегоСНДС = ДоставкаИМонтажСуммаСоСкидкой + ДоставкаИМонтажСуммаНДС;
		
		СуммаВсегоСоСкидкой = ДоставкаИМонтажСуммаСоСкидкой + ИтогоСуммаСоСкидкой;
		СуммаВсегоНДС = ДоставкаИМонтажСуммаНДС + ИтогоСуммаНДС;
		СуммаВсего = ДоставкаИМонтажСуммаВсегоСНДС + ИтогоСуммаВсего; 
		ИтогоСкидка = ИтогоСкидкаПоВсемПозициям / КоличествоСкидок;
		
	//	
		//ПОДВАЛ ТОВАРЫ
		
		_ТД = Новый ТабличныйДокумент;
		//
		ТоварыПодвалПостоянная = Макет.ПолучитьОбласть("ТоварыПодвал|ОсновнаяЧасть");
		
		ТоварыПодвалНомер = Макет.ПолучитьОбласть("ТоварыПодвал|Номер");
		_ТД.Вывести(ТоварыПодвалНомер);
		
		ТоварыПодвалНоменклатура = Макет.ПолучитьОбласть("ТоварыПодвал|Номенклатура");
		Область = _ТД.Присоединить(ТоварыПодвалНоменклатура); 
		
		
		Для Каждого Элемент Из СтруктураИспользования Цикл
			Если Не Элемент.Значение Тогда
				ОчереднаяОбласть = Макет.ПолучитьОбласть("ТоварыПодвал|" + Элемент.Ключ);
				Область = _ТД.Присоединить(ОчереднаяОбласть);
			КонецЕсли;
		КонецЦикла;
		
		Если СтруктураИспользования["ГабаритныеРазмеры"] Тогда
			Область = Макет.ПолучитьОбласть("ТоварыПодвал|ГабаритныеРазмеры");
			_ТД.Присоединить(Область);
		КонецЕсли;
		
		Область = Макет.ПолучитьОбласть("ТоварыПодвал|Изображение");
		_ТД.Присоединить(Область);
		
		Если СтруктураИспользования["ТехОписание"] Тогда
			Область = Макет.ПолучитьОбласть("ТоварыПодвал|ТехОписание");
			_ТД.Присоединить(Область);	
		КонецЕсли;
		
		Если СтруктураИспользования["ДопКомплектация"] Тогда
			Область = Макет.ПолучитьОбласть("ТоварыПодвал|ДопКомплектация");
			_ТД.Присоединить(Область);
		КонецЕсли;
		
		
		//
		// Подвал таблицы
		Параметры = Новый Структура;
		Параметры.Вставить("КоличествоВсего", КоличествоВсего);
		Параметры.Вставить("ИтогоСкидка", ИтогоСкидка);
		Параметры.Вставить("ИтогоСуммаСкидка", ИтогоСуммаСкидка);
		
		//
		Параметры.Вставить("ИтогоСуммаСоСкидкой", ИтогоСуммаСоСкидкой);
		Параметры.Вставить("ИтогоСуммаНДС", ИтогоСуммаНДС);
		Параметры.Вставить("ИтогоСуммаВсего", ИтогоСуммаВсего);
		
		
		Параметры.Вставить("ДоставкаИМонтажСуммаСоСкидкой", ДоставкаИМонтажСуммаСоСкидкой);
		Параметры.Вставить("ДоставкаИМонтажСуммаНДС", ДоставкаИМонтажСуммаНДС);
		Параметры.Вставить("ДоставкаИМонтажСуммаВсегоСНДС", ДоставкаИМонтажСуммаВсегоСНДС);
		
		Параметры.Вставить("СуммаВсегоСоСкидкой", СуммаВсегоСоСкидкой);
		Параметры.Вставить("СуммаВсегоНДС", СуммаВсегоНДС);
		Параметры.Вставить("СуммаВсего", СуммаВсего);
		
		Если СуммаТоваровВсего = 0 Тогда
			Параметры.Вставить("СкидкаПроцент", 0);
			Параметры.Вставить("ДоставкаПроцент", 0);
			Параметры.Вставить("МонтажПроцент", 0);
		Иначе
			Параметры.Вставить("СкидкаПроцент", Окр(100 * ИтогоСуммаСкидка / СуммаТоваровБезСкидкиВсего, 2));
			Параметры.Вставить("ДоставкаИМонтажПроцент", Окр(ДоставкаИМонтажСуммаВсегоСНДС/ (СуммаДляРасчетаДоставкиМонтажа / 100)));
		КонецЕсли;
		
		//
		ТоварыПодвалПостоянная.Параметры.Заполнить(Параметры);
		
		_ТД.Присоединить(ТоварыПодвалПостоянная);
		
		Если СтруктураИспользования["Цвет"] Тогда
			Область = Макет.ПолучитьОбласть("ТоварыПодвал|Цвет");
			_ТД.Присоединить(Область);
		КонецЕсли;
		
		Если СтруктураИспользования["Производитель"] Тогда
			Область = Макет.ПолучитьОбласть("ТоварыПодвал|Производитель");
			_ТД.Присоединить(Область);	
		КонецЕсли;
		
		Если СтруктураИспользования["Примечание"] Тогда
			Область = Макет.ПолучитьОбласть("ТоварыПодвал|Примечание");
			_ТД.Присоединить(Область);
		КонецЕсли;
		
		ВывестиСПроверкойВывода(ТабличныйДокумент, _ТД, _ТД_Логотип);
		
		//ПОДВАЛ
		
		//
		ПодвалПостоянная = Макет.ПолучитьОбласть("Подвал");	
		
		//
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(РеквизитыШапки.Организация, КонецДня(РеквизитыШапки.Дата));
		
		//
		ПодвалПостояннаяПараметры = Новый Структура;
		ПодвалПостояннаяПараметры.Вставить("ОрганизацияКонтактноеЛицо", РеквизитыШапки.Ответственный.Наименование); 
		ПодвалПостояннаяПараметры.Вставить("ОрганизацияКонтактноеЛицоДолжность", РеквизитыШапки.Ответственный.АК_Должность);
		ПодвалПостояннаяПараметры.Вставить("Организация", СведенияОбОрганизации.ПолноеНаименование);
		ПодвалПостояннаяПараметры.Вставить("ОрганизацияТелефон", "Тел.: " + СведенияОбОрганизации.Телефоны);
		ПодвалПостояннаяПараметры.Вставить("ОрганизацияКонтактноеЛицоТелефон", УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(РеквизитыШапки.Ответственный.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.МобильныйТелефонФизическогоЛица));
		ПодвалПостояннаяПараметры.Вставить("ОрганизацияАдресЭП", УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(РеквизитыШапки.Ответственный.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица));
		
		//
		ПодвалПостоянная.Параметры.Заполнить(ПодвалПостояннаяПараметры);
			//
		ВывестиСПроверкойВывода(ТабличныйДокумент, ПодвалПостоянная, _ТД_Логотип);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно 
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаНаОбъект);
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

	
	
КонецФункции

//
//
Функция ПолучитьЗначениеСвойства(Номенклатура, Свойство)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Значение КАК ЗначениеСвойства
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
		|	И НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура";
		
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Резульат = Запрос.Выполнить();
	Если Резульат.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = Резульат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ЗначениеСвойства;
	КонецЕсли;
	
КонецФункции

//
//
Функция ПолучитьИнформациюОКонтактномЛице(Объект, ФИО = Истина, ФИОСокращенно = Ложь, ТелефонВид = Неопределено, АдресЭПВид = Неопределено, АдресВид = Неопределено, Разделитель = ",")
	
	//
	РезультатИнформация = "";
	
	//
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КонтактныеЛицаПартнеров.Ссылка КАК КонтактноеЛицо,
	               |	КонтактныеЛицаПартнеров.Наименование КАК Наименование,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.ЗначенияПолей,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Страна,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Регион,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Город,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.ДоменноеИмяСервера,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефонаБезКодов,
	               |	ВЫБОР
	               |		КОГДА КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	               |			ТОГДА 1
	               |		КОГДА КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	               |			ТОГДА 2
	               |		КОГДА КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	               |			ТОГДА 3
	               |	КОНЕЦ КАК Порядок
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	               |		ПО (КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = КонтактныеЛицаПартнеров.Ссылка)
	               |ГДЕ
	               |	КонтактныеЛицаПартнеров.Ссылка = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КонтактноеЛицо,
	               |	Порядок
	               |ИТОГИ
	               |	МАКСИМУМ(Наименование)
	               |ПО
	               |	КонтактноеЛицо";
				   
	//			   
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	
	//
	ПостроительЗапроса.Параметры.Вставить("Ссылка", Объект);
	
	//
	ПостроительЗапроса.Выполнить();
	
	//
	ВыборкаКЛ = ПостроительЗапроса.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаКЛ.Следующий() Тогда
		
		//
		КонтактноеЛицо = ВыборкаКЛ.КонтактноеЛицо;
		
		//
		Если ФИО = Истина Тогда
			РезультатИнформация = РезультатИнформация + ВыборкаКЛ.Наименование + Разделитель + " ";
		ИначеЕсли ФИОСокращенно = Истина Тогда	
			РезультатИнформация = РезультатИнформация + СократитьФИО(ВыборкаКЛ.Наименование) + Разделитель + " ";
		КонецЕсли;	
		
		//
		ВыборкаКИ = ВыборкаКЛ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКИ.Следующий() Цикл
			
			Если ВыборкаКИ.Вид = ТелефонВид Тогда
				РезультатИнформация = РезультатИнформация + СокрЛП(ВыборкаКИ.Представление) + Разделитель + " ";
			ИначеЕсли ВыборкаКИ.Вид = АдресЭПВид Тогда
				РезультатИнформация = РезультатИнформация + СокрЛП(ВыборкаКИ.Представление) + Разделитель + " ";
			ИначеЕсли ВыборкаКИ.Вид = АдресВид Тогда
				РезультатИнформация = РезультатИнформация + СокрЛП(ВыборкаКИ.Представление) + Разделитель + " ";
			КонецЕсли;	
			
		КонецЦикла;	
		
		//
		РезультатИнформация = Лев(РезультатИнформация, СтрДлина(РезультатИнформация) - 2);
		
	КонецЕсли;	
	
	//
	Возврат РезультатИнформация;
	
КонецФункции	

//
//
Функция ПолучитьЛоготип(Организация, ИмяФайла)
	
	//
	РезультатКартинка = Новый Картинка;
	
	//
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ОрганизацииПрисоединенныеФайлы.Ссылка,
	               |	ПрисоединенныеФайлы.ХранимыйФайл
	               |ИЗ
	               |	Справочник.ОрганизацииПрисоединенныеФайлы КАК ОрганизацииПрисоединенныеФайлы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	               |		ПО ОрганизацииПрисоединенныеФайлы.Ссылка = ПрисоединенныеФайлы.ПрисоединенныйФайл
	               |ГДЕ
	               |	ОрганизацииПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	               |	И ОрганизацииПрисоединенныеФайлы.Наименование = &Наименование
	               |	И (НЕ ОрганизацииПрисоединенныеФайлы.ПометкаУдаления)";
				   
	//
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	
	//
	ПостроительЗапроса.Параметры.Вставить("ВладелецФайла", Организация);
	ПостроительЗапроса.Параметры.Вставить("Наименование", ИмяФайла);
	
	//
	ПостроительЗапроса.Выполнить();
	
	//
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		//
		РезультатКартинка = Новый Картинка(Выборка.ХранимыйФайл.Получить());
		
	КонецЕсли;	
	
	//
	Возврат РезультатКартинка;
	
	//КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецФункции	

//
//
Функция ПолучитьРеквизитыШапки(Ссылка)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Таблица.Номер,
	               |	Таблица.Дата,
	               |	Таблица.Организация,
	               |	Таблица.Партнер,
	               |	Таблица.КонтактноеЛицо КАК ПартнерКонтактноеЛицо,
	               |	Таблица.АК_ПунктНазначения.Адрес КАК ПартнерАдрес,
	               |	Таблица.Комментарий,
	               |	Таблица.Менеджер КАК Ответственный,
	               |	Таблица.ГрафикОплаты.Наименование КАК УсловияОплаты,
	               |	Таблица.СрокПоставки КАК СрокПоставки,
	               |	Таблица.СрокДействия КАК СрокДействия,
	               |	Таблица.Сделка КАК Основание
	               |ИЗ
	               |	Документ.КоммерческоеПредложениеКлиенту КАК Таблица
	               |ГДЕ
	               |	Таблица.Ссылка = &Ссылка";
				  
				   
	//
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	ПостроительЗапроса.Параметры.Вставить("Ссылка", Ссылка);
	
	//
	ПостроительЗапроса.Выполнить();
	
	//
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Выборка.Следующий();
	
	//
	Возврат Выборка;
	
КонецФункции	

//+++АК

////////////////////////////////////////////////////////////////////////////////////////////

//
//
Функция СократитьФИО(Знач z1)
	
	//
	РезультатФИО = "";
	
	//
	z1 = СтрЗаменить(z1, "  ", " ");
	z1 = СтрЗаменить(z1, "  ", " ");
	
	//
	z1 = СокрЛП(СтрЗаменить(z1, " ", Символы.ПС));
	
	//
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(z1);
	
	//
	Для Сч = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		
		//
		ТекущаяСтрока = СокрЛП(ТекстовыйДокумент.ПолучитьСтроку(Сч));
		
		//
		Если Сч = 1 Тогда
			РезультатФИО = РезультатФИО + СокрЛП(ТекущаяСтрока) + " ";
			Продолжить;
		КонецЕсли;	
		
		//
		РезультатФИО = РезультатФИО + ВРЕГ(Лев(СокрЛП(ТекущаяСтрока), 1)) + ".";
		
	КонецЦикла;	
	
	//
	Возврат РезультатФИО;

 КонецФункции
