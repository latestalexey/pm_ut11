#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет наборы значений доступа
// по объекту в таблице с полями:
//  - НомерНабора     Число                                     (необязательно, если набор один),
//  - ВидДоступа      ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//  - ЗначениеДоступа Неопределено, СправочникСсылка или др.    (обязательно),
//  - Чтение          Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Добавление      Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Изменение       Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Удаление        Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора).
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = 1;
	СтрокаТаб.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.Организации;
	СтрокаТаб.ЗначениеДоступа = Организация;

	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.НомерНабора     = 2;
	СтрокаТаб.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ГруппыПартнеров;
	СтрокаТаб.ЗначениеДоступа = Партнер;

КонецПроцедуры

// Заполняет условия продаж в коммерческом предложении
//
// Параметры:
//	УсловияПродаж - Структура - Структура для заполнения
//
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж) Экспорт
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = УсловияПродаж.Валюта;
	ХозяйственнаяОперация = УсловияПродаж.ХозяйственнаяОперация;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Организация) Тогда
		Организация = УсловияПродаж.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГрафикОплаты) Тогда
		ГрафикОплаты = УсловияПродаж.ГрафикОплаты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ФормаОплаты) Тогда
		ФормаОплаты = УсловияПродаж.ФормаОплаты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Склад) Тогда
		Склад = УсловияПродаж.Склад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.СрокПоставки) Тогда
		СрокПоставки = УсловияПродаж.СрокПоставки;
	КонецЕсли;
	
	ЦенаВключаетНДС      = УсловияПродаж.ЦенаВключаетНДС;
	НалогообложениеНДС   = УсловияПродаж.НалогообложениеНДС;
	ВернутьМногооборотнуюТару = УсловияПродаж.ВозвращатьМногооборотнуюТару;
	СрокВозвратаМногооборотнойТары = УсловияПродаж.СрокВозвратаМногооборотнойТары;
	
	ДатаДокумента = НачалоДня(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
	
	Если ЗначениеЗаполнено(УсловияПродаж.ДатаОкончанияДействия) И УсловияПродаж.ДатаОкончанияДействия >= ДатаДокумента Тогда
		СрокДействия = УсловияПродаж.ДатаОкончанияДействия;
	КонецЕсли;
	//+++АК
	АК_УсловияПоставки = УсловияПродаж.АК_УсловияПоставки;
	СрокРеализации = АК_УсловияПоставки.КоличествоДней;
	//---АК
КонецПроцедуры

// Заполняет условия продаж по умолчанию в коммерческом предложении
//
Процедура ЗаполнитьУсловияПродажПоУмолчанию() Экспорт
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер,КонтактноеЛицо);
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	Если ЗначениеЗаполнено (Партнер) ИЛИ НЕ ИспользоватьСоглашенияСКлиентами Тогда
		Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
			УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
				Партнер,
				Новый Структура("УчитыватьГруппыСкладов,ВыбранноеСоглашение, ХозяйственнаяОперация", Истина, Соглашение, ХозяйственнаяОперация)
			);
		Иначе
			УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
				Партнер,
				Новый Структура("УчитыватьГруппыСкладов,ВыбранноеСоглашение", Истина, Соглашение)
			);
			
		КонецЕсли;
		
		Если УсловияПродажПоУмолчанию = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Соглашение = УсловияПродажПоУмолчанию.Соглашение;
		ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
		ПродажиСервер.ЗаполнитьЦены(
			Товары, // Табличная часть
			, // Массив строк или структура отбора
			Новый Структура( // Параметры заполнения
				"Дата, Валюта, Соглашение, ПоляЗаполнения",
				Дата,
				Валюта,
				Соглашение,
				"Цена, СтавкаНДС, ВидЦены"
			),
			Новый Структура( // Структура действий с измененными строками
				"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
				"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)
			)
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по соглашению в коммерческом предложении клиенту
//
Процедура ЗаполнитьУсловияПродажПоCоглашению() Экспорт
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение, Истина);
	ЗаполнитьУсловияПродаж(УсловияПродаж);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
	ПродажиСервер.ЗаполнитьЦены(
		Товары, // Табличная часть
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, ПоляЗаполнения",
			Дата,
			Валюта,
			Соглашение,
			"Цена, СтавкаНДС, ВидЦены"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Ложь)
		)
	);
	
КонецПроцедуры

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам[НовыйСтатус];
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	ЗаполнитьПоЗначениямАвтозаполнения(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
		ЗаполнитьДокументНаОснованииСделкиПоПродаже(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		ЗаполнитьДокументНаОснованииИндивидуальногоСоглашенияСКлиентом(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		ЗаполнитьДокументНаОснованииКоммерческогоПредложенияКлиенту(ДанныеЗаполнения);
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	//+++АК
	МассивНепроверяемыхРеквизитов.Добавить("АК_ТоварыПредварительно.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("АК_ТоварыЗакупочныеЦены.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("АК_УслугиДополнительные.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("АК_ТоварыПредварительно.Количество");
	//---АК	
	
	//НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	//АК ПроверяемыеРеквизиты
	ПараметрыПроверки = Новый Структура("ИмяТЧ,СуффиксДопРеквизита","АК_ТоварыПредварительно","");
	//ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ,ПараметрыПроверки);

	// Срок действия коммерческого предложения должен быть не меньше даты документа
	Если ЗначениеЗаполнено(СрокДействия) И СрокДействия < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Срок действия должен быть не меньше даты коммерческого предложения'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		ТекстОшибки,
		ЭтотОбъект,
		"СрокДействия",
		,
		Отказ);
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		Отказ = ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты);
	КонецЕсли;
	
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
//	Если ОбменДанными.Загрузка Тогда
//		Возврат;
//	КонецЕсли;

//	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

//	СуммаАктивногоВарианта = РассчитатьСуммуАктивногоВарианта();
//	
//	Если СуммаАктивногоВарианта <> СуммаДокумента Тогда
//		СуммаДокумента = СуммаАктивногоВарианта;
//	КонецЕсли;
//	
//	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(ЭтотОбъект,
//		РежимЗаписи,
//		Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано
//	);
//	
//	// Очистим реквизиты документа не используемые для хозяйственной операции.
//	МассивВсехРеквизитов = Новый Массив;
//	МассивРеквизитовОперации = Новый Массив;
//	
//	Документы.КоммерческоеПредложениеКлиенту.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
//		ХозяйственнаяОперация,
//		МассивВсехРеквизитов,
//		МассивРеквизитовОперации
//	);
//	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
//		ЭтотОбъект,
//		МассивВсехРеквизитов,
//		МассивРеквизитовОперации
//	);
//	

//	
//	//Запрет пользователю менять комерческое предложение всем кроме савинной
//	Запрос = Новый Запрос("ВЫБРАТЬ
//						  |	акЗакупкаТовара.Предмет
//						  |ИЗ
//						  |	БизнесПроцесс.акЗакупкаТовара КАК акЗакупкаТовара
//						  |ГДЕ
//						  |	акЗакупкаТовара.Предмет.ДокументОснование = &ДокументОснование");
//						  Запрос.УстановитьПараметр( "ДокументОснование",ЭтотОбъект.Ссылка);
//						  Выборка = Запрос.Выполнить().Выгрузить();
//Если Выборка.Количество() > 0 Тогда			 
//Если Найти(ПараметрыСеанса.ТекущийПользователь.Наименование,  "Савина") = 0 Тогда
//		
//			   Отказ = Истина;
//			   ВызватьИсключение "Для внесения изминений необходино разрещение Савиной Н.В.!!!";
//		
//		   КонецЕсли;
//	   КонецЕсли;

Если ОбменДанными.Загрузка Тогда
	Возврат;
КонецЕсли;

ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

СуммаАктивногоВарианта = РассчитатьСуммуАктивногоВарианта();

Если СуммаАктивногоВарианта <> СуммаДокумента Тогда
	СуммаДокумента = СуммаАктивногоВарианта;
КонецЕсли;

ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(ЭтотОбъект,
РежимЗаписи,
Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано
);

// Очистим реквизиты документа не используемые для хозяйственной операции.
МассивВсехРеквизитов = Новый Массив;
МассивРеквизитовОперации = Новый Массив;

Документы.КоммерческоеПредложениеКлиенту.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
ХозяйственнаяОперация,
МассивВсехРеквизитов,
МассивРеквизитовОперации
);
ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
ЭтотОбъект,
МассивВсехРеквизитов,
МассивРеквизитовОперации
);



//Запрет пользователю менять комерческое предложение всем кроме савинной
Запрос = Новый Запрос("ВЫБРАТЬ
|       акЗакупкаТовара.Предмет
|ИЗ
|       БизнесПроцесс.акЗакупкаТовара КАК акЗакупкаТовара
|ГДЕ
|       акЗакупкаТовара.Предмет.ДокументОснование = &ДокументОснование
|       И акЗакупкаТовара.Завершен = ЛОЖЬ
|       И акЗакупкаТовара.ЗаказПроверен = ИСТИНА");
Запрос.УстановитьПараметр( "ДокументОснование",ЭтотОбъект.Ссылка);
Выборка = Запрос.Выполнить().Выгрузить();
Если Выборка.Количество() > 0 Тогда                                               
	Если (Найти(ПараметрыСеанса.ТекущийПользователь.Наименование,  "Савина") ) ИЛИ (Найти(ПараметрыСеанса.ТекущийПользователь.Наименование,  "astek")) Тогда
			
			Иначе

		Отказ = Истина;
		ВызватьИсключение "Для внесения изминений необходино разрещение Савиной Н.В.!!!";
		
	КонецЕсли;
КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Согласован         = Ложь;
	Статус             = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано;
	СрокДействия       = '00010101';
	ДокументОснование  = Документы.КоммерческоеПредложениеКлиенту.ПустаяСсылка();
	СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();
	
	СкидкиРассчитаны = Ложь;
	СкидкиНаценкиСервер.ОтменитьСкидки(ЭтотОбъект, "Товары", Истина);
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ЗаполнитьДокументНаОснованииСделкиПоПродаже(Основание)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СделкиСКлиентами.Ссылка КАК Сделка,
	|	СделкиСКлиентами.Партнер КАК Партнер,
	|	СделкиСКлиентами.СоглашениеСКлиентом КАК Соглашение,
	|	СделкиСКлиентами.ПервичныйСпрос.(
	|		ИСТИНА КАК Активность,
	|		ТекстовоеОписание КАК ТекстовоеОписание
	|	) КАК ПервичныйСпрос,
	|	СделкиСКлиентамиПартнерыИКонтактныеЛица.КонтактноеЛицо КАК КонтактноеЛицо
	|ИЗ
	|	Справочник.СделкиСКлиентами КАК СделкиСКлиентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СделкиСКлиентами.ПартнерыИКонтактныеЛица КАК СделкиСКлиентамиПартнерыИКонтактныеЛица
	|		ПО СделкиСКлиентамиПартнерыИКонтактныеЛица.Ссылка = СделкиСКлиентами.Ссылка
	|			И (СделкиСКлиентамиПартнерыИКонтактныеЛица.Партнер = СделкиСКлиентами.Партнер
	|				И СделкиСКлиентамиПартнерыИКонтактныеЛица.КонтактноеЛицо <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
	|ГДЕ
	|	СделкиСКлиентами.Ссылка = &Основание");
	
	Запрос.УстановитьПараметр("Основание",Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСделкиПоПродаже(Выборка.Партнер);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	Товары.Загрузить(Выборка.ПервичныйСпрос.Выгрузить());
	
	Если ЗначениеЗаполнено(Выборка.Соглашение) Тогда
		ЗаполнитьУсловияПродажПоCоглашению();
	Иначе
		ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииИндивидуальногоСоглашенияСКлиентом(Знач ДокументОснование)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СоглашениеСКлиентом.Ссылка          КАК Соглашение,
	|	СоглашениеСКлиентом.Партнер         КАК Партнер,
	|	СоглашениеСКлиентом.КонтактноеЛицо  КАК КонтактноеЛицо,
	|
	|	СоглашениеСКлиентом.Статус      КАК СтатусДокумента,
	|	ВЫБОР
	|		КОГДА
	|			СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|		ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	СоглашениеСКлиентом.Типовое КАК ЕстьОшибкиТиповое
	|
	|ИЗ
	|	Справочник.СоглашенияСКлиентами  КАК СоглашениеСКлиентом
	|ГДЕ
	|	СоглашениеСКлиентом.Ссылка = &ДокументОснование
	|");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Выборка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыСоглашенийСКлиентами.Действует);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСоглашения(Выборка.ЕстьОшибкиТиповое);
		
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(Выборка.Соглашение,
		Выборка.СтатусДокумента,
		,
		Выборка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов
	);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	ЗаполнитьУсловияПродажПоCоглашению();
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииКоммерческогоПредложенияКлиенту(Знач ДокументОснование)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Ссылка КАК ДокументОснование,
	|	КоммерческоеПредложениеКлиенту.Партнер КАК Партнер,
	|	КоммерческоеПредложениеКлиенту.Сделка КАК Сделка,
	|	КоммерческоеПредложениеКлиенту.Организация КАК Организация,
	|	КоммерческоеПредложениеКлиенту.КонтактноеЛицо КАК КонтактноеЛицо,
	|	КоммерческоеПредложениеКлиенту.Валюта КАК Валюта,
	|	КоммерческоеПредложениеКлиенту.СуммаДокумента КАК СуммаДокумента,
	|	КоммерческоеПредложениеКлиенту.ГрафикОплаты КАК ГрафикОплаты,
	|	КоммерческоеПредложениеКлиенту.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	КоммерческоеПредложениеКлиенту.Соглашение КАК Соглашение,
	|	КоммерческоеПредложениеКлиенту.СрокПоставки КАК СрокПоставки,
	|	КоммерческоеПредложениеКлиенту.Соглашение.ДатаОкончанияДействия КАК СрокДействия,
	|	КоммерческоеПредложениеКлиенту.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	КоммерческоеПредложениеКлиенту.НалогообложениеНДС КАК НалогообложениеНДС,
	|	КоммерческоеПредложениеКлиенту.ФормаОплаты КАК ФормаОплаты,
	|	КоммерческоеПредложениеКлиенту.Склад КАК Склад,
	|	КоммерческоеПредложениеКлиенту.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
	|	КоммерческоеПредложениеКлиенту.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
	|	КоммерческоеПредложениеКлиенту.СостояниеЗаполненияМногооборотнойТары КАК СостояниеЗаполненияМногооборотнойТары,
	|	КоммерческоеПредложениеКлиенту.КартаЛояльности КАК КартаЛояльности,
	|	КоммерческоеПредложениеКлиенту.Статус КАК СтатусДокумента,
	|	НЕ КоммерческоеПредложениеКлиенту.Проведен КАК ЕстьОшибкиПроведен,
	|	КоммерческоеПредложениеКлиенту.Товары.(
	|		Номенклатура,
	|		Характеристика,
	|		Упаковка,
	|		КоличествоУпаковок,
	|		Количество,
	|		ВидЦены,
	|		Цена,
	|		ПроцентРучнойСкидки,
	|		СуммаРучнойСкидки,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		СуммаСНДС,
	|		Сумма,
	|		Активность,
	|		ТекстовоеОписание,
	|		АК_ДопКомплектация,
	|		АК_ПунктДоставки,
	|		АК_ПунктМонтажа,
	|		АК_ПроцентНаценкиДоставка,
	|		АК_ПроцентНаценкиДоставкаКлиент,
	|		АК_ПроцентНаценкиДоставкаАгент,
	|		АК_ПроцентНаценкиМонтаж,
	|		АК_ПроцентНаценкиМонтажКлиент,
	|		АК_ПроцентНаценкиМонтажАгент,
	|		АК_ДопУслугиСумма,
	|		АК_ДопУслугиСуммаНДС,
	|		АК_ПризнакНестандарт,
	|		АК_НестандартОписание,
	|		АК_ПризнакЭскиз,
	|		АК_ЭскизФайл,
	|		АК_ИнформацияДляОтделаЗакупки
	|	) КАК Товары,
	|	КоммерческоеПредложениеКлиенту.СкидкиНаценки.(
	|		КлючСвязи КАК КлючСвязи,
	|		СкидкаНаценка КАК СкидкаНаценка,
	|		Сумма КАК Сумма
	|	) КАК СкидкиНаценки,
	|	КоммерческоеПредложениеКлиенту.АК_ТоварыПредварительно.(
	|		Ссылка,
	|		НомерСтроки,
	|		Номенклатура,
	|		Характеристика,
	|		Упаковка,
	|		КоличествоУпаковок,
	|		Количество,
	|		ВидЦены,
	|		Цена,
	|		ПроцентРучнойСкидки,
	|		СуммаРучнойСкидки,
	|		ПроцентАвтоматическойСкидки,
	|		СуммаАвтоматическойСкидки,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		Сумма,
	|		Активность,
	|		ТекстовоеОписание,
	|		КлючСвязи,
	|		АК_ДопКомплектация,
	|		АК_ПунктДоставки,
	|		АК_ПунктМонтажа,
	|		АК_ПризнакНестандарт,
	|		АК_НестандартОписание,
	|		АК_ПризнакЭскиз,
	|		АК_ЭскизФайл,
	|		АК_ИнформацияДляОтделаЗакупки
	|	) КАК ТоварыПредварительно,
	|	КоммерческоеПредложениеКлиенту.АК_ТоварыЗакупочныеЦены.(
	|		Ссылка,
	|		НомерСтроки,
	|		Номенклатура,
	|		Характеристика,
	|		Упаковка,
	|		КоличествоУпаковок,
	|		Количество,
	|		ВидЦены,
	|		Цена,
	|		ПроцентРучнойСкидки,
	|		СуммаРучнойСкидки,
	|		ПроцентАвтоматическойСкидки,
	|		СуммаАвтоматическойСкидки,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		Сумма,
	|		Активность,
	|		ТекстовоеОписание,
	|		КлючСвязи
	|	) КАК ТоварыЗакупочныеЦены,
	|	КоммерческоеПредложениеКлиенту.АК_УслугиДополнительные.(
	|		Ссылка,
	|		НомерСтроки,
	|		Номенклатура,
	|		АК_Процент,
	|		Характеристика,
	|		Упаковка,
	|		КоличествоУпаковок,
	|		Количество,
	|		ВидЦены,
	|		Цена,
	|		ПроцентРучнойСкидки,
	|		СуммаРучнойСкидки,
	|		ПроцентАвтоматическойСкидки,
	|		СуммаАвтоматическойСкидки,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		Сумма,
	|		Активность,
	|		ТекстовоеОписание,
	|		КлючСвязи,
	|		АК_ПризнакРаспределитьНаТовары,
	|		АК_ПунктНазначения
	|	) КАК УслугиДополнительные
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка = &ДокументОснование");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.ДокументОснование,
		,
		Выборка.ЕстьОшибкиПроведен
	);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	Товары.Загрузить(Выборка.Товары.Выгрузить());
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", Новый СписокЗначений);
	
	СкидкиНаценки.Загрузить(Выборка.СкидкиНаценки.Выгрузить());
	СкидкиНаценкиСервер.РассчитатьПоКоммерческомуПредложениюКлиенту(ЭтотОбъект, СтруктураПараметры);
	СкидкиРассчитаны = Истина;
	//+++АК
	АК_ТоварыПредварительно.Загрузить(Выборка.ТоварыПредварительно.Выгрузить());
	АК_ТоварыЗакупочныеЦены.Загрузить(Выборка.ТоварыЗакупочныеЦены.Выгрузить());
	АК_УслугиДополнительные.Загрузить(Выборка.УслугиДополнительные.Выгрузить());
	//---АК	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		
		Партнер = ДанныеЗаполнения.Партнер;
		ЗаполнитьУсловияПродажПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Менеджер       = Пользователи.ТекущийПользователь();
	Валюта         = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
	Организация    = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад          = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
	КонтактноеЛицо = ЗначениеНастроекПовтИсп.ПолучитьКонтактноеЛицоПартнераПоУмолчанию(Партнер);
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеКоммерческихПредложений")
	 Или Пользователи.РолиДоступны("ОтклонениеОтУсловийПродаж") Тогда
		Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует;
	Иначе
		Статус = Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗначениямАвтозаполнения(ДанныеЗаполнения = Неопределено)
	
	ЕстьДанныеЗаполнения = (НЕ ДанныеЗаполнения = Неопределено);
	ДанныеЗаполненияСтруктура = (ТипЗнч(ДанныеЗаполнения) = Тип("Структура"));
	
	// Автозаполнение не требуется при вводе на основании
	Если Не ЕстьДанныеЗаполнения Или ДанныеЗаполненияСтруктура Тогда
		// Заполним основные свойства
		СвойстваАвтозаполнения = Новый Структура("Организация, Склад, ХозяйственнаяОперация");
		
		Если ДанныеЗаполненияСтруктура Тогда
			ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(СвойстваАвтозаполнения, ДанныеЗаполнения, Истина);
			
		КонецЕсли;
		
		ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(Ссылка, СвойстваАвтозаполнения);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваАвтозаполнения);
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

Функция РассчитатьСуммуАктивногоВарианта()
	
	СуммаАктивногоВарианта = 0;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.Активность КАК Активность
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.СуммаСНДС),0) КАК СуммаСНДС
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	Товары.Активность
	|	И Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	ИЛИ (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) И НЕ &ВернутьМногооборотнуюТару)
	|");
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(,"Номенклатура,СуммаСНДС,Активность"));
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", ВернутьМногооборотнуюТару);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	СуммаАктивногоВарианта = Выгрузка[0].СуммаСНДС;
	Возврат СуммаАктивногоВарианта;
	
КонецФункции
#КонецЕсли

//+++АК

Функция ПолучитьНомерСпецификации() Экспорт
	
	//
	РезультатНомерСпецификации = 0;
	
	//
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ЕСТЬNULL(МАКСИМУМ(КоммерческоеПредложениеКлиенту.АК_НомерСпецификации), 0) КАК НомерСпецификации
	               |ИЗ
	               |	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	               |ГДЕ
	               |	КоммерческоеПредложениеКлиенту.Проведен
	               |	И КоммерческоеПредложениеКлиенту.Соглашение = &Соглашение";
				   
	//			   
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	
	//
	ПостроительЗапроса.Параметры.Вставить("Соглашение", Соглашение);
	
	//
	ПостроительЗапроса.Выполнить();
	
	//
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		РезультатНомерСпецификации = Выборка.НомерСпецификации;
	КонецЕсли;	
	
	//
	Возврат РезультатНомерСпецификации + 1;
	
КонецФункции	
	
//---АК