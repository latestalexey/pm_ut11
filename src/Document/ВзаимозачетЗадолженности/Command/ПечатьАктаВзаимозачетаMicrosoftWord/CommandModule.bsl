
// Процедура обработки команды "Печать акта взаимозачета".
//
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	
	Если УправлениеПечатьюКлиент.ПроверитьДокументыПроведены(ПараметрКоманды, ПараметрыВыполненияКоманды.Источник) Тогда
	
		СоставДокументов = ПараметрКоманды;
			
		Состояние(НСтр("ru = 'Выполняется формирование печатных форм'"));
		
		ИмяМакета = "ПФ_DOC_АктВзаимозачета";
		ТипМакета = "doc";
		
		МакетИДанныеОбъекта = УправлениеПечатьюВызовСервера.ПолучитьМакетыИДанныеОбъектов("Документ.ВзаимозачетЗадолженности",
			ИмяМакета,
			СоставДокументов
		);
			
		ДвоичныеДанныеМакетов = МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
		
		Секции = МакетИДанныеОбъекта.Макеты.ОписаниеСекций;
		
		Для Каждого ДокументСсылка Из СоставДокументов Цикл
			
			ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ДокументСсылка][ИмяМакета];
			
			Если Не ДанныеОбъекта.Взаимозачет Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не требуется печатать акт взаимозачета для документа %1'"),
					ДокументСсылка
				);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументСсылка
				);
				
			Иначе
			
				Попытка
						
					ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета);
					Макет = УправлениеПечатьюКлиент.ИнициализироватьМакет(
						ДвоичныеДанныеМакетов[ИмяМакета], ТипМакета);
						
					// Выводим заголовок документа.	
					Область = УправлениеПечатьюКлиент.ПолучитьОбласть(Макет, Секции[ИмяМакета].Заголовок);
					УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
					УправлениеПечатьюКлиент.ЗаполнитьПараметры(ПечатнаяФорма, ДанныеОбъекта);
					
					// Выводим данные дебиторской задолженности;
					Область = УправлениеПечатьюКлиент.ПолучитьОбласть(Макет, Секции[ИмяМакета].ДебиторскаяЗадолженность);
					УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
					УправлениеПечатьюКлиент.ЗаполнитьПараметры(ПечатнаяФорма, ДанныеОбъекта);
					
					Область = УправлениеПечатьюКлиент.ПолучитьОбласть(Макет, Секции[ИмяМакета].ШапкаТаблицы);
					УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					
					Область = УправлениеПечатьюКлиент.ПолучитьОбласть(Макет, Секции[ИмяМакета].СтрокаТаблицы);
					УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма,Область, ДанныеОбъекта.ДебиторскаяЗадолженность, Ложь);
					
					// Выводим данные кредиторской задолженности.
					Область = УправлениеПечатьюКлиент.ПолучитьОбласть(Макет, Секции[ИмяМакета].КредиторскаяЗадолженность);
					УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
					УправлениеПечатьюКлиент.ЗаполнитьПараметры(ПечатнаяФорма, ДанныеОбъекта);
					
					Область = УправлениеПечатьюКлиент.ПолучитьОбласть(Макет, Секции[ИмяМакета].ШапкаТаблицы);
					УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
					
					Область = УправлениеПечатьюКлиент.ПолучитьОбласть(Макет, Секции[ИмяМакета].СтрокаТаблицы);
					УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма,Область, ДанныеОбъекта.КредиторскаяЗадолженность, Ложь);
					
					// Выводим подвал документа.
					Область = УправлениеПечатьюКлиент.ПолучитьОбласть(Макет, Секции[ИмяМакета].Подвал);
					УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
					УправлениеПечатьюКлиент.ЗаполнитьПараметры(ПечатнаяФорма, ДанныеОбъекта);

					УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
					
				Исключение
				
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
					УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
							
					Возврат;
					
				КонецПопытки;

				УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
				УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Состояние(НСтр("ru = 'Формирование печатных форм завершено'"));
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаКоманды()
