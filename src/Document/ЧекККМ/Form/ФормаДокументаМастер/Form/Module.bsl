&НаКлиенте
Перем КэшированныеЗначения;//используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМ));
	УстановитьВидимостьЭлементовСерий();
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	ИспользоватьАссортимент                   = ПолучитьФункциональнуюОпцию("КонтролироватьАссортимент", Новый Структура("Склад", Объект.Склад));
	Если ИспользоватьАссортимент <> Истина Тогда
		ИспользоватьАссортимент = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	КодФормы = "Документ_ЧекККМ_ФормаДокументаМастер";
	
	ПервоеОткрытиеФормы = ПодборТоваровСервер.ПервоеОткрытиеФормы(КодФормы);
	
	Если ПервоеОткрытиеФормы Тогда
		ПодборТоваровСервер.УстановитьПараметрыДереваОтбораКачествоНовый(ЭтаФорма);
	КонецЕсли;
	
	ИспользоватьУпаковкиНоменклатуры          = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьРучныеСкидкиВПродажах         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	НазначатьСкидкиПоКнопкеРасчетВЧекеККМ     = ПолучитьФункциональнуюОпцию("НазначатьСкидкиПоКнопкеРасчетВЧекеККМ");
	ИспользоватьОплатуПлатежнымиКартами       = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	
	ИспользоватьОграниченияРучныхСкидок       = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям") 
	                                                ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	
	ИспользоватьАссортимент                   = ПолучитьФункциональнуюОпцию("КонтролироватьАссортимент", Новый Структура("Склад", Объект.Склад));
	Если ИспользоватьАссортимент <> Истина Тогда
		ИспользоватьАссортимент = Ложь;
	КонецЕсли;
	
	
	ВидНоменклатурыДоИзменения = ВидНоменклатуры;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Подключение оборудования.
	ПолучитьСсылкиНаОборудование();
	
	УстановитьЗначенияПоНастройкам();
	
	ПриСозданииЧека();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Инициализация переменных формы
	ПодборСохранятьПриЗакрытии = Ложь;
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода,ДисплейПокупателя");
	
	СтрокаДисплеяПокупателя = НСтр("ru = 'Здравствуйте!'");
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		Возврат;
	КонецЕсли;
	
	ПередЗакрытиемЧека(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЧекККМ", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ТекущийОбъект, Документы.ЧекККМ));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройкиФормыНаСервере();
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
	// Подбор номенклатуры
	Если ПодборСохранятьПриЗакрытии Тогда
		СохранитьНастройкиПодбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "СчитанаКартаЛояльности"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		СчитанаКартаЛояльности(Параметр.КартаЛояльности);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПолученыСообщения"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ПолученыСообщения(Параметр.Сообщения);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВариантНавигацииПриИзменении(Элемент)
	
	ВариантНавигацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантНавигацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	ВидНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураИсходногоКачестваПриИзменении(Элемент)
	
	НоменклатураИсходногоКачестваПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФильтрыПриИзменении(Элемент)
	
	ИспользоватьФильтрыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЦенаОтПриИзменении(Элемент)
	
	ПриИзмененииДиапазонаЦенНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЦенаДоПриИзменении(Элемент)
	
	ПриИзмененииДиапазонаЦенНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СегментНоменклатурыПриИзменении(Элемент)
	
	СегментНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СпискиВыбораКлиентСервер.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВНаличииПриИзменении(Элемент)
	
	ТолькоВНаличииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоТочномуСоответствиюПриИзменении(Элемент)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКачестваПометкаПриИзменении(Элемент)
	
	СписокКачестваПометкаПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ТОВАРЫ

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,
		КэшированныеЗначения,
		ПараметрыУказанияСерий,
		Копирование
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТоварыСтатусУказанияСерий" Тогда
		
		Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
			
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
			ПараметрыФормыСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
			
			ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыСерий.ИмяФормы,ПараметрыФормыСерий,ЭтаФорма);
			
			Если ЗначениеВозврата <> Неопределено Тогда
				ОбработатьУказаниеСерийСервер(ПараметрыФормыСерий);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,
		КэшированныеЗначения,
		ПараметрыУказанияСерий
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ПересчитатьДокументНаКлиенте();
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент,
			КэшированныеЗначения,
			ПараметрыУказанияСерий
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ИспользоватьАссортимент Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.РозничнаяТорговля"));
	
	Если ИспользоватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
		СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
		СтруктураПроверкиАссортимента.Склад = Объект.Склад;
		СтруктураПроверкиАссортимента.Дата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
		СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина или запрещен к продаже.'");
		СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныПродажи";
		СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
		СтруктураПроверкиАссортимента.РазрешатьДобавление = Ложь;
		
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);
	КонецЕсли;
	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ТекущаяНоменклатура = ТекущаяСтрока.Номенклатура;
	Если ИспользоватьАссортимент Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.РозничнаяТорговля"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ПересчитатьДокументНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		Если ИспользоватьАссортимент Тогда
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПеретащитьВКорзинуНаСервере(ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.ФормаПодбор.Пометка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Проверить выбранную строку номенклатуры.
		Отказ = Неопределено;
		ПодборТоваровКлиент.ПриВыбореСтрокиТаблицыНоменклатуры(ЭтаФорма, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТаблицыНоменклатуры = Элементы.Список.ТекущиеДанные;
		
		Если СтрокаТаблицыНоменклатуры.ХарактеристикиИспользуются Тогда
			ПерейтиКСпискуХарактеристикНаСервере();
		Иначе
			
			ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
			ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыНоменклатуры);
			ПараметрыТовара.КоличествоУпаковок = 1;
			ДобавитьВКорзину(ПараметрыТовара);
			
		КонецЕсли;
		
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ТОВАРЫ СКИДКИ

&НаКлиенте
Процедура ТоварыСкидкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыСкидкиПроцентАвтоматическойСкидки
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТоварыСкидкиСуммаАвтоматическойСкидки Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ Объект.СкидкиРассчитаны Тогда
			
			Результат = Вопрос(НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
			
			Если Результат = КодВозвратаДиалога.Нет Тогда
				Возврат;
			Иначе
				
				СтруктураПараметры = Новый Структура;
				СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
				СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
				СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
				СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
				
				СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
				Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
					ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
			РассчитатьСкидкиБезПримененияКОбъекту();
		КонецЕсли;
		
		ТекущиеДанные = Элементы.ТоварыСкидки.ТекущиеДанные;
		СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыСкидки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТоварыСкидки.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ДЕРЕВО ОТБОРА

&НаКлиенте
Процедура ДеревоОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПодборТоваровКлиент.ДеревоОтборовВыбор(ЭтаФорма);
	ДеревоОтборовОтборПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ИЕРАРХИЯ НОМЕНКЛАТУРЫ

&НаКлиенте
Процедура ИерархияНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ИерархияНоменклатурыПриАктивизацииСтрокиНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ПОДБОР ТАБЛИЦА ХАРАКТЕРИСТИК

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиТаблицыХарактеристик(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Проверить выбранную строку характеристик.
	Отказ = Неопределено;
	ПодборТоваровКлиент.ПриВыбореСтрокиТаблицыХарактеристик(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыХарактеристик = Элемент.ТекущиеДанные;
	Если СтрокаТаблицыХарактеристик = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыНоменклатуры = Элементы.Список.ТекущиеДанные;
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыХарактеристик);
	
	ПараметрыТовара.КоличествоУпаковок = 1;
	
	ДобавитьВКорзину(ПараметрыТовара);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
	ПодборТоваровКлиент.ПолучитьДанныеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ СПИСОК

&НаКлиенте
Процедура ПодборТаблицаНоменклатураПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиТаблицыНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Проверить выбранную строку номенклатуры.
	Отказ = Неопределено;
	ПодборТоваровКлиент.ПриВыбореСтрокиТаблицыНоменклатуры(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыНоменклатуры = Элемент.ТекущиеДанные;
	
	Если СтрокаТаблицыНоменклатуры.ХарактеристикиИспользуются Тогда
		ПерейтиКСпискуХарактеристикНаСервере();
	Иначе
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыНоменклатуры);
		ПараметрыТовара.КоличествоУпаковок = 1;
		ДобавитьВКорзину(ПараметрыТовара);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
	ПодборТоваровКлиент.ПолучитьДанныеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УстановитьТекущийЭлементКорзина(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементКорзина(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементНавигация(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементНавигация(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементСписокТоваров(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементСписокТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементСтрокаПоиска(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементСтрокаПоиска(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКПодборуТоваров(Команда)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары;
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах 
		И ПараметрыПримененияСкидок.НазначеныСкидки Тогда
		
		ОтменитьСкидкиНаценкиНаСервере();
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОплатуКартой(Команда)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	
	ОписаниеОшибки = "";
	
	СуммаОперации       = 0;
	НомерКарты          = "";
	НомерСсылкиОперации = "";
	НомерЧекаЭТ         = "";
	СтрокаСлипЧека      = "";
	ВидКарты            = "";
	
	Объект.Дата = ТекущаяДата();
	РезультатПроведения = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
	
	Если ФинансыКлиент.ВозможнаПечатьЧека(ЭтаФорма) Тогда
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента()Тогда // Проверка на определенность рабочего места ВО
			
			// Выбор устройства ЭТ
			Если ЭквайринговыеТерминалы.Количество() = 1 Тогда
				
				СтруктрураЭквайринговыйТерминал = ЭквайринговыеТерминалы[0].Значение;
				ИдентификаторУстройстваЭТ = СтруктрураЭквайринговыйТерминал.ПодключаемоеОборудование;
				
			ИначеЕсли ЭквайринговыеТерминалы.Количество() > 1 Тогда
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("СписокВыбора", Новый СписокЗначений);
				
				Для каждого Терминал Из ЭквайринговыеТерминалы Цикл
					ПараметрыФормы.СписокВыбора.Добавить(Терминал.Значение, Терминал.Значение.Ссылка);
				КонецЦикла;
				
				СтруктрураЭквайринговыйТерминал = ОткрытьФормуМодально("Документ.ЧекККМ.Форма.ВыборЭквайринговогоТерминала", ПараметрыФормы);
				
				Если СтруктрураЭквайринговыйТерминал <> Неопределено Тогда
					ИдентификаторУстройстваЭТ = СтруктрураЭквайринговыйТерминал.ПодключаемоеОборудование;
				Иначе
					ИдентификаторУстройстваЭТ = Неопределено;
				КонецЕсли;
				
			Иначе
				
				ИдентификаторУстройстваЭТ = Неопределено;
				СтруктрураЭквайринговыйТерминал = Неопределено;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ИдентификаторУстройстваЭТ) ИЛИ (СтруктрураЭквайринговыйТерминал <> Неопределено И СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования) Тогда
				
				ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
				ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
				
				Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) ИЛИ ИспользоватьБезПодключенияОборудования Тогда
					
					// Подключение устройства ЭТ
					Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
						
						РезультатЭТ = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(
							УникальныйИдентификатор,
							ИдентификаторУстройстваЭТ,
							ОписаниеОшибки
						);
						
					Иначе
						
						РезультатЭТ = Истина;
						
					КонецЕсли;
					
					Если РезультатЭТ Тогда
						
						// Подключение устройства ФР
						РезультатФР = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(
							УникальныйИдентификатор,
							ИдентификаторУстройстваФР,
							ОписаниеОшибки
						);
						
						Если РезультатФР ИЛИ ИспользоватьБезПодключенияОборудования Тогда
							
							// Предварительно авторизуем операцию
							ПараметрыФормы = Новый Структура();
							ПараметрыФормы.Вставить("Сумма", СуммаДокумента - Объект.ПолученоНаличными - Объект.ОплатаПлатежнымиКартами.Итог("Сумма"));
							ПараметрыФормы.Вставить("ПределСуммы", СуммаДокумента - Объект.ОплатаПлатежнымиКартами.Итог("Сумма"));
							
							СписокКарт = Новый СписокЗначений;
							Индекс = 0;
							
							Для каждого ЭлементСписка Из СтруктрураЭквайринговыйТерминал.ВидыПлатежныхКарт Цикл
								
								СписокКарт.Добавить(Индекс, ЭлементСписка.Значение);
								Индекс = Индекс + 1;
								
							КонецЦикла;
							
							ПараметрыФормы.Вставить("СписокТиповКарт", СписокКарт);
							
							Если СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
								ПараметрыФормы.Вставить("ПоказыватьНомерКарты", Истина);
							КонецЕсли;
							
							ФормаАвторизации = ПолучитьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы);
							Ответ = ФормаАвторизации.ОткрытьМодально();
							
							Если Ответ = КодВозвратаДиалога.ОК Тогда
								
								ВходныеПараметры  = Новый Массив();
								ВыходныеПараметры = Неопределено;
								
								ВходныеПараметры.Добавить(ФормаАвторизации.Параметры.ПараметрыФормы[0].Значение);
								ВходныеПараметры.Добавить(ФормаАвторизации.Параметры.ПараметрыФормы[1].Значение);
								
								СуммаОперации = ФормаАвторизации.Параметры.ПараметрыФормы[0].Значение;
								
								ВидКарты = СтруктрураЭквайринговыйТерминал.ВидыПлатежныхКарт[ФормаАвторизации.Параметры.ПараметрыФормы[4].Значение];
								
								Если НЕ СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
									
									ПозицияРазделителя = Найти(ФормаАвторизации.Параметры.ПараметрыФормы[1].Значение, "=");
									
									Если ПозицияРазделителя > 16 Тогда
										
										НомерКарты = "";
										
										Для Счетчик = 1 По ПозицияРазделителя - 6 Цикл
											НомерКарты = НомерКарты + "*";
										КонецЦикла;
										
										НомерКарты = НомерКарты + Сред(ФормаАвторизации.Параметры.ПараметрыФормы[1].Значение, ПозицияРазделителя - 5, 4);
										
									КонецЕсли;
									
									// Выполнение операции на ЭТ
									РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(
										ИдентификаторУстройстваЭТ,
										"AuthorizeSales",
										ВходныеПараметры,
										ВыходныеПараметры
									);
									
									Если РезультатЭТ Тогда
										
										СтрокаСлипЧека = ВыходныеПараметры[3][1];
										
										Если Не ПустаяСтрока(СтрокаСлипЧека) Тогда
											глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", СтрокаСлипЧека);
										КонецЕсли;
										
										НомерКарты = ?(НЕ ПустаяСтрока(НомерКарты) 
											И ПустаяСтрока(СтрЗаменить(СокрЛП(ВыходныеПараметры[0]), "*", "")), НомерКарты, ВыходныеПараметры[0]);
										
										НомерСсылкиОперации = ВыходныеПараметры[1];
										НомерЧекаЭТ = ВыходныеПараметры[2];
										
									Иначе
										
										ТекстОписаниеОшибки = ВыходныеПараметры[1];
										
									КонецЕсли;
									
								Иначе
									
									ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию оплаты на эквайринговом терминале.'") + Символы.ПС;
									ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'")        + " "+ СуммаОперации  + Символы.ПС;
									ТекстВопроса = ТекстВопроса + Символы.ПС;
									ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция оплаты на эквайринговом терминале прошла успешно?'");
									
									РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
									РезультатЭТ = (РезультатВопроса = КодВозвратаДиалога.Да);
									
									Если РезультатЭТ Тогда
										
										СтрокаСлипЧека = НСтр("ru = 'Произведена оплата на сумму %1% %2%'");
										СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%1%", СуммаОперации);
										СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%2%", Объект.Валюта);
										
									Иначе
										
										СтрокаСлипЧека = "";
										ТекстОписаниеОшибки = НСтр("ru = 'Операция отменена'");
										
									КонецЕсли;
									
									НомерКарты = ФормаАвторизации.Параметры.ПараметрыФормы[5].Значение;
									НомерСсылкиОперации = ФормаАвторизации.Параметры.ПараметрыФормы[2].Значение;
									НомерЧекаЭТ = ФормаАвторизации.Параметры.ПараметрыФормы[3].Значение;
									
								КонецЕсли;
									
								Если НЕ РезультатЭТ Тогда
									
									ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
									|""%ОписаниеОшибки%"".
									|Оплата по карте не была произведена.'");
									
									ТекстСообщения = СтрЗаменить(ТекстСообщения,
									"%ОписаниеОшибки%",
									ТекстОписаниеОшибки);
									
									ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
									
								Иначе
									
									Если НЕ ПустаяСтрока(СтрокаСлипЧека) И Не ИспользоватьБезПодключенияОборудования Тогда
										
										ВходныеПараметры = Новый Массив();
										ВходныеПараметры.Добавить(СтрокаСлипЧека);
										ВыходныеПараметры = Неопределено;
										
										РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(
											ИдентификаторУстройстваФР,
											"PrintText",
											ВходныеПараметры,
											ВыходныеПараметры
										);
										
									КонецЕсли;
									
								КонецЕсли;
								
								Если РезультатЭТ И (Не РезультатФР И Не ИспользоватьБезПодключенияОборудования) Тогда
									
									ОписаниеОшибкиФР = ВыходныеПараметры[1];
									
									ВходныеПараметры  = Новый Массив();
									ВыходныеПараметры = Неопределено;
									
									ВходныеПараметры.Добавить(СуммаОперации);
									ВходныеПараметры.Добавить(НомерСсылкиОперации);
									ВходныеПараметры.Добавить(НомерЧекаЭТ);
									
									// Выполнение операции на ЭТ
									МенеджерОборудованияКлиент.ВыполнитьКоманду(
										ИдентификаторУстройстваЭТ,
										"EmergencyVoid",
										ВходныеПараметры,
										ВыходныеПараметры
									);
									
									ТекстСообщения = НСтр("ru = 'При печати слип-чека возникла ошибка:
									|""%ОписаниеОшибки%"".
									|Операция по карте была отменена.'");
									
									ТекстСообщения = СтрЗаменить(ТекстСообщения,
									"%ОписаниеОшибки%",
									ОписаниеОшибкиФР);
									
									ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
									
								ИначеЕсли РезультатЭТ Тогда
									
									// Сохранить в таблице данные оплаты картой
									СтрокаОплатыКартой = Объект.ОплатаПлатежнымиКартами.Добавить();
									
									СтрокаОплатыКартой.ЭквайринговыйТерминал = СтруктрураЭквайринговыйТерминал.Ссылка;
									СтрокаОплатыКартой.ВидПлатежнойКарты = ВидКарты;
									СтрокаОплатыКартой.НомерПлатежнойКарты = НомерКарты; // Возможна запись пустого номера карты или номера вида "****************"
									СтрокаОплатыКартой.Сумма = СуммаОперации;
									СтрокаОплатыКартой.СсылочныйНомер = НомерСсылкиОперации;
									СтрокаОплатыКартой.НомерЧекаЭТ = НомерЧекаЭТ;
									
									Записать(); // Обязателено необходимо записать документ, для предотвращения потери информации.
									
									ПересчитатьДокументНаКлиенте();
									
									УстановитьАктивныйЭлемент();
									
								КонецЕсли;
								
							КонецЕсли;
							
							// Отключение устройства ФР
							МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(
								УникальныйИдентификатор,
								ИдентификаторУстройстваФР
							);
							
							Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
								
								// Отключение устройства ЭТ
								МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(
									УникальныйИдентификатор,
									ИдентификаторУстройстваЭТ
								);
								
							КонецЕсли;
							
						Иначе
							
							ТекстСообщения = НСтр("ru = 'При подключении фискального регистратора произошла ошибка:
							|""%ОписаниеОшибки%"".
							|Операция по карте не была выполнена.'");
							
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							
						КонецЕсли;
						
					Иначе
						
						ТекстСообщения = НСтр("ru = 'При подключении эквайрингового терминала произошла ошибка:
						|""%ОписаниеОшибки%"".
						|Операция по карте не была выполнена.'");
						
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
					
				Иначе
					
					ТекстСообщения = НСтр("ru = 'Не выбран фискальный регистратор.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			Иначе
				
				// Не выбран эквайринговый терминал
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Зарезервировать(Команда)
	
	ОтложенДо = ТекущаяДата() + 3 * 60 * 60;
	
	Если ВвестиДату(ОтложенДо, НСтр("ru = 'Отложить до:'")) Тогда
		
		Объект.ОтложенДо = ОтложенДо;
		Результат = ЗарезервироватьНаСервере();
		
		Если Результат Тогда
			Оповестить("Запись_ЧекККМ", Новый Структура, Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗапрашиватьКоличество(Команда)
	
	ЗапрашиватьКоличество = НЕ ЗапрашиватьКоличество;
	Элементы.ЗапрашиватьКоличествоЦену.Пометка = ЗапрашиватьКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОплатыПлатежнымиКартами(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВХранилище", ПоместитьТабличнуюЧастьОплатыПлатежнымиКартамиВХранилище());
	РезультатВыбора = ОткрытьФормуМодально("Документ.ЧекККМ.Форма.ТабличнаяЧастьОплатаПлатежнымиКартами", ПараметрыФормы);
	
	Если РезультатВыбора <> Неопределено 
		И РезультатВыбора.Действие = "ОтменитьОплату" Тогда
		
		УдалитьОплатуКартой(РезультатВыбора.ВыбраннаяСтрока);
		
	ИначеЕсли РезультатВыбора <> Неопределено 
		И РезультатВыбора.Действие = "НапечататьСлипЧек" Тогда
		
		//
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	ВозвращенноеЗначение = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(ВыполнитьПредварительныйРасчетСкидокНаСервере());
	Если ВозвращенноеЗначение <> Неопределено Тогда
		
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту", Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		Объект.Дата = ТекущаяДата();
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		
		Если СтруктураСообщений.Сообщения.Количество() > 0 
			И СтруктураСообщений.АвтоматическиОткрывать Тогда
			
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
		КонецЕсли;
		
		ПересчитатьДокументНаКлиенте();
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Скидки (наценки)'"),
			,
			НСтр("ru = 'Скидки (наценки) рассчитаны'"),
			БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	
	СуммаРучнойСкидкиНаценки = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта
	);
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		Модифицированность = Истина;
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки,,АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	
	ТекущееСообщениеПользователю = "";
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьПоследнийСлипЧек(Команда)
	
	Если ИспользоватьПодключаемоеОборудование Тогда // Проверка на включенную ФО "Использовать ВО"
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента()Тогда // Проверка на определенность рабочего места ВО
			
			ИдентификаторУстройстваФР = Неопределено;
			ОписаниеОшибки = "";
			
			СтрокаСлипЧека = "";
			
			Если НЕ глПодключаемоеОборудование.Свойство("ПоследнийСлипЧек", СтрокаСлипЧека) 
				ИЛИ ТипЗнч(СтрокаСлипЧека) <> Тип("Строка") 
				ИЛИ ПустаяСтрока(СтрокаСлипЧека) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Слип-чек отсутствует.
				|Возможно для данного сеанса еще не выполнялась эквайринговая операция.'"));
				
				Возврат;
				
			КонецЕсли;
			
			// Выбор устройства ФР
			ИдентификаторУстройстваФР = ПараметрыКассыККМ.ИдентификаторУстройства;
			ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
			
			Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) Тогда
				
				// Подключение устройства ФР
				РезультатФР = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(
					УникальныйИдентификатор,
					ИдентификаторУстройстваФР,
					ОписаниеОшибки
				);
				
				Если РезультатФР Тогда
					
					ВходныеПараметры  = Новый Массив();
					ВходныеПараметры.Добавить(СтрокаСлипЧека);
					ВыходныеПараметры = Неопределено;
					
					РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(
						ИдентификаторУстройстваФР,
						"PrintText",
						ВходныеПараметры,
						ВыходныеПараметры
					);
					
					Если НЕ РезультатФР Тогда
						
						ТекстСообщения = НСтр("ru = 'При печати слип-чека возникла ошибка:
						|""%ОписаниеОшибки%"".'");
						
						ТекстСообщения = СтрЗаменить(ТекстСообщения,
						"%ОписаниеОшибки%",
						ВыходныеПараметры[1]);
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
					
					// Отключение устройства ФР
					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(
						УникальныйИдентификатор,
						ИдентификаторУстройстваФР
					);
					
				Иначе
					
					ТекстСообщения = НСтр("ru = 'При подключении фискального регистратора произошла ошибка:
					|""%ОписаниеОшибки%"".'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйЧек(Команда)
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		Отказ = Ложь;
		ПередЗакрытиемЧека(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйЧекНаСервере();
	
	АдресПримененныхСкидокВоВременномХранилище = "";
	УправляемыеСкидки = Новый СписокЗначений;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары;
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	Если Не Объект.СкидкиРассчитаны Тогда
		
		Результат = Вопрос(НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
		
		Если Результат = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			
			СтруктураПараметры = Новый Структура;
			СтруктураПараметры.Вставить("ПрименятьКОбъекту", Истина);
			СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет", Ложь);
			СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
			СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
			
			СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
			
			Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
				ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиБезПримененияКОбъекту();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТоварыСкидки.ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Отложить(Команда)
	
	ОтложитьИОтменитьОплатуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	ОтменитьРучныеСкидкиНаСервере();
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПодборСохранятьПриЗакрытии = Истина;
	УстановитьВидимостьПодбора(НЕ Элементы.ФормаПодбор.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПерейтиКСпискуНоменклатуры(Команда)
	
	ПерейтиКСпискуНоменклатурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить()
	
	ОчиститьСообщения();
	
	ТекШтрихкод = "";
	
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкодуВыполнить()

&НаКлиенте
Процедура ПоказатьСообщения(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуСообщений(ПолучитьСтруктуруСообщений(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	Перем ТекущаяСтрока;
	
	ВесНоменклатуры = МенеджерОборудованияКлиент.ПолучитьДанныеИзВесов(ЭтаФорма, ТекущаяСтрока);
	
	Если ВесНоменклатуры <> Неопределено Тогда
		
		ТекущаяСтрока.КоличествоУпаковок = ВесНоменклатуры;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧек(Команда)
	
	ЧекПробит = ПробитьЧекНаКлиенте();
	
	Если ЧекПробит Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументе(Команда)
	
	Если ТолькоПросмотр Тогда // Чек пробит. Изменение информации запрещено.
		Возврат;
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("АдресВоВременномХранилище, ПревышениеКоличестваТоваровРазрешено", ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества(), Истина);
	ВозвращаемыеПараметры = ОткрытьФормуМодально("ОбщаяФорма.ПроверкаЗаполненияДокументов", ПараметрыОткрытия);
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, ?(КэшированныеЗначения = Неопределено, ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения(), КэшированныеЗначения));
		
		Модифицированность = Истина;
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНаличнойОплаты(Команда)
	
	СуммаОплатыПлатежнымиКартами = Объект.ОплатаПлатежнымиКартами.Итог("Сумма");
	Объект.ПолученоНаличными = СуммаДокумента - ?(СуммаОплатыПлатежнымиКартами > СуммаДокумента, 0, СуммаОплатыПлатежнымиКартами);
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Расчет(Команда)
	
	ОчиститьСообщения();
	
	Объект.Дата = ТекущаяДата();
	
	ЭлементФормыСуммаНаличными = Неопределено;
	Если ИспользоватьАвтоматическиеСкидкиВПродажах
		И ПараметрыПримененияСкидок.ФормаОплатыВлияетНаРасчетСкидок
		И ПараметрыПримененияСкидок.НазначеныСкидки Тогда
		
		Если Объект.ПолученоНаличными = 0 И Объект.ОплатаПлатежнымиКартами.Количество() = 0 Тогда
			
			Если ИспользоватьОплатуПлатежнымиКартами И ЭквайринговыеТерминалы.Количество() > 0 Тогда
				
				ВыбраннаяФормаОплаты = ОткрытьФормуМодально("Документ.ЧекККМ.Форма.ВыборФормыОплаты", , ЭтаФорма);
				Если ВыбраннаяФормаОплаты <> Неопределено Тогда
					
					Если ВыбраннаяФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная") Тогда
						
						Элементы.ОплатаРасчет.ТекущаяСтраница = Элементы.ИспользуетсяОплатаНаличными;
						ЭлементФормыСуммаНаличными = Элементы.ПолученоНаличными;
						
					ИначеЕсли ВыбраннаяФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда
						
						Элементы.ОплатаРасчет.ТекущаяСтраница = Элементы.ИспользуетсяОплатаКартой;
						ЭлементФормыСуммаНаличными = Неопределено;
						
					Иначе
						
						Элементы.ОплатаРасчет.ТекущаяСтраница = Элементы.ИспользуетсяОплатаКартойИНаличными;
						ЭлементФормыСуммаНаличными = Элементы.ПолученоНаличными1;
						
					КонецЕсли;
					
					Объект.ФормаОплаты = ВыбраннаяФормаОплаты;
					Модифицированность = Истина;
					
				Иначе
					
					// Форма оплаты не выбрана.
					Возврат;
					
				КонецЕсли;
				
			Иначе
				
				// Эквайринговый терминал не подключен.
				Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная");
				Элементы.ОплатаРасчет.ТекущаяСтраница = Элементы.ИспользуетсяОплатаНаличными;
				ЭлементФормыСуммаНаличными = Элементы.ПолученоНаличными;
				
			КонецЕсли;
			
		Иначе
			
			// Документ частично оплачен => форма оплаты уже выбрана.
			Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная") Тогда
				
				Элементы.ОплатаРасчет.ТекущаяСтраница = Элементы.ИспользуетсяОплатаНаличными;
				ЭлементФормыСуммаНаличными = Элементы.ПолученоНаличными;
				
			ИначеЕсли Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда
				
				Элементы.ОплатаРасчет.ТекущаяСтраница = Элементы.ИспользуетсяОплатаКартой;
				ЭлементФормыСуммаНаличными = Неопределено;
				
			Иначе
				
				Элементы.ОплатаРасчет.ТекущаяСтраница = Элементы.ИспользуетсяОплатаКартойИНаличными;
				ЭлементФормыСуммаНаличными = Элементы.ПолученоНаличными1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если ЭквайринговыеТерминалы.Количество() = 0 Тогда
			Элементы.ОплатаРасчет.ТекущаяСтраница = Элементы.ИспользуетсяОплатаНаличными;
			ЭлементФормыСуммаНаличными = Элементы.ПолученоНаличными;
		Иначе
			Элементы.ОплатаРасчет.ТекущаяСтраница = Элементы.ИспользуетсяОплатаКартойИНаличными;
			ЭлементФормыСуммаНаличными = Элементы.ПолученоНаличными1;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах
		И ПараметрыПримененияСкидок.НазначеныСкидки
		И ПараметрыПримененияСкидок.НазначеныУправляемыеСкидки
		И НазначатьСкидкиПоКнопкеРасчетВЧекеККМ Тогда
		
		ВозвращенноеЗначениеУправляемыеСкидки = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(ВыполнитьПредварительныйРасчетСкидокНаСервере());
		Если ВозвращенноеЗначениеУправляемыеСкидки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ИспользоватьАвтоматическиеСкидкиВПродажах
		И ПараметрыПримененияСкидок.НазначеныСкидки)
		ИЛИ (Не КонтрольНаСкладеОтключен) Тогда
		
		Результат = ВыполнитьЧастьРасчетаНаСервере(ВозвращенноеЗначениеУправляемыеСкидки);
		Если Не Результат.РасчетВыполненУспешно Тогда
			Возврат;
		КонецЕсли;
		
		Если Результат.СтруктураСообщений <> Неопределено И Результат.СтруктураСообщений.Сообщения.Количество() > 0 И Результат.СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", Результат.СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасчет;
	Если ЭлементФормыСуммаНаличными <> Неопределено Тогда
		ТекущийЭлемент = ЭлементФормыСуммаНаличными;
	КонецЕсли;
	
	СтрокаДисплеяПокупателя = НСтр("ru = 'К оплате'");
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьКартуЛояльности(Команда)
	
	Если ТолькоПросмотр Тогда // Чек пробит. Изменение информации запрещено.
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.КартыЛояльности.Форма.СчитываниеКартыЛояльности",
		Неопределено,
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор
	);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
		
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыСерий.ИмяФормы,ПараметрыФормыСерий,ЭтаФорма);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыСерий);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СПодобраннойНоменклатуройСовместноПродается(Команда)
	
	СПодобраннойНоменклатуройСовместноПродаетсяНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСоСхожимиСвойствами(Команда)
	
	ТоварыСоСхожимиСвойствамиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДругогоКачества(Команда)
	
	ТоварыДругогоКачестваНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Результат = Ложь;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		// Подключение устройства
		ИдентификаторУстройства                = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		Если ИдентификаторУстройства <> Неопределено ИЛИ ИспользоватьБезПодключенияОборудования Тогда
			
			ОписаниеОшибки = "";
			
			Если Не ИспользоватьБезПодключенияОборудования Тогда
				
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                              ИдентификаторУстройства,
				                                                                              ОписаниеОшибки);
				
			КонецЕсли;
			
			Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					ВходныеПараметры  = Неопределено;
					ВыходныеПараметры = Неопределено;
					
					//Открыть смену на фискальном регистраторе
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "OpenDay",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры);
					
				КонецЕсли;
				
				Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
					
					Результат = ОткрытьКассовуюСменуНаСервереБезКонтекста(Объект.КассаККМ, ОписаниеОшибки);
					
					Если Не Результат Тогда
						
						ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
						                            |Смена не открыта.
						                            |Дополнительное описание:
						                            |%ДополнительноеОписание%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
					
				Иначе
					ТекстСообщения = НСтр("ru = 'При открытии смены произошла ошибка.
					                      |Смена не открыта на фискальном регистраторе.
					                      |Дополнительное описание:
					                      |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения,
					                             "%ДополнительноеОписание%",
					                             ВыходныеПараметры[1]);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
					                                                                 ИдентификаторУстройства);
					
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
				                            |Смена не открыта на фискальном регистраторе.
				                            |Дополнительное описание:
				                            |%ДополнительноеОписание%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСменыНаСервере();
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКассовуюСмену(Команда)
	
	ОчиститьСообщения();
	
	Результат = Ложь;
	ОшибкаПриСнятииZОтчета = Ложь;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		// Подключение устройства
		ИдентификаторУстройства                = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		Если ИдентификаторУстройства <> Неопределено ИЛИ ИспользоватьБезПодключенияОборудования Тогда
			
			ОписаниеОшибки = "";
			
			Если Не ИспользоватьБезПодключенияОборудования Тогда
				
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                              ИдентификаторУстройства,
				                                                                              ОписаниеОшибки);
				
			КонецЕсли;
		
			Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					ВходныеПараметры  = Неопределено;
					ВыходныеПараметры = Неопределено;
					
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
					                                                        "PrintZReport",
					                                                        ВходныеПараметры,
					                                                        ВыходныеПараметры);
					
				КонецЕсли;
				
				Если Не Результат И Не ИспользоватьБезПодключенияОборудования Тогда
					
					ТекстВопроса = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.
					                    |""%ОписаниеОшибки%""
					                    |
					                    |Если смена на фискальном регистраторе закрыта, то
					                    |нажмите ""Да"" для формирования отчета о розничных продажах.
					                    |
					                    |Закрыть смену?'");
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					
					РезультатВопроса = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
					Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
						Результат = Истина;
					КонецЕсли;
					
					ОшибкаПриСнятииZОтчета = Истина;
					
				КонецЕсли;
				
				Если Не Результат И Не ИспользоватьБезПодключенияОборудования Тогда
					
					ТекстСообщения = НСтр("ru = 'При снятии отчета на фискальном регистраторе произошла ошибка.
					                     |""%ОписаниеОшибки%""
					                     |Отчет на фискальном регистраторе не сформирован.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				Иначе
					
					МассивДокументов = ЗакрытьКассовуюСменуНаСервереБезКонтекста(Объект.КассаККМ, ОшибкаПриСнятииZОтчета, ОписаниеОшибки);
					
					// Все результирующие документы выводим пользователю.
					Для Каждого Документ Из МассивДокументов Цикл
						
						ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаОбъекта", Новый Структура("Ключ, ПровестиПриОткрытии", Документ, Истина));
						
					КонецЦикла;
					
					// Текст ошибки должен появиться в окне открытого документа.
					Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
						ТекстСообщения = НСтр("ru = 'Смена закрыта на фискальном регистраторе.
						                      |Дополнительное описание:
						                      |%ДополнительноеОписание%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
					                                                                 ИдентификаторУстройства);
					
				КонецЕсли;
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
				                            |Отчет не напечатан и смена не закрыта на фискальном регистраторе.
				                            |Дополнительное описание:
				                            |%ДополнительноеОписание%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСменыНаСервере();
	
	ПересчитатьДокументНаКлиенте();
	
	Оповестить("Запись_ОтчетОРозничныхПродажах", Новый Структура, МассивДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнесениеДенег(Команда)
	
	Результат = Ложь;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("КассаККМ", Объект.КассаККМ);
		СтруктураВыбранныеДанные = ОткрытьФормуМодально("Документ.ВнесениеДенежныхСредствВКассуККМ.Форма.ФормаВыбораРасходногоКассовогоОрдера", ПараметрыОткрытия);
		
		Если СтруктураВыбранныеДанные <> Неопределено Тогда
			
			ОписаниеОшибки = "";
			
			ИдентификаторУстройства                = ПараметрыКассыККМ.ИдентификаторУстройства;
			ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
			
			Если ИдентификаторУстройства <> Неопределено ИЛИ ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					// Подключаем ФР
					Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
					                                                                              ИдентификаторУстройства,
					                                                                              ОписаниеОшибки);
					
				КонецЕсли;
				
				Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
					
					Если Не ИспользоватьБезПодключенияОборудования Тогда
						
						//Готовим данные
						ВходныеПараметры  = Новый Массив();
						ВыходныеПараметры = Неопределено;
						
						ВходныеПараметры.Добавить(1);
						ВходныеПараметры.Добавить(СтруктураВыбранныеДанные.СуммаВнесения);
						
						// Печатаем чек.
						Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
						                                                        "Encash",
						                                                        ВходныеПараметры,
						                                                        ВыходныеПараметры
						);
						
					КонецЕсли;
					
					Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
						
						// Итоговое действие.
						СтруктураВыбранныеДанные.Вставить("Дата", ТекущаяДата());
						
						Результат = СоздатьДокументВнесениеДенежныхСредствВКассуККМ(СтруктураВыбранныеДанные, ОписаниеОшибки);
						Если Не Результат Тогда
							
							ТекстСообщения = НСтр("ru = 'При внесении денежных средств в кассу ККМ произошла ошибка.
							                            |Дополнительное описание:
							                            |%ДополнительноеОписание%'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							
						КонецЕсли;
						
						ОбновитьСостояниеКассовойСменыНаСервере();
						
					Иначе
						
						ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
						                            |Чек не напечатан на фискальном регистраторе.
						                            |Дополнительное описание:
						                            |%ДополнительноеОписание%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,
						                             "%ДополнительноеОписание%",
						                             ВыходныеПараметры[1]);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
					
					Если Не ИспользоватьБезПодключенияОборудования Тогда
						
						// Отключаем ФР
						МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства);
						
					КонецЕсли;
					
				Иначе
					
					ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
					                            |Чек не напечатан на фискальном регистраторе.
					                            |Дополнительное описание:
					                            |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыемкаДенег(Команда)
	
	Результат = Ложь;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ИзымаемаяСумма = 0;
		
		ВозвращенноеЗначение = ОткрытьФормуМодально("Документ.ВыемкаДенежныхСредствИзКассыККМ.Форма.ВводСуммы", Новый Структура("Валюта", СтруктураСостояниеКассовойСмены.Валюта));
		Если ВозвращенноеЗначение <> Неопределено И ТипЗнч(ВозвращенноеЗначение) = Тип("Число") Тогда
		
			ИзымаемаяСумма = ВозвращенноеЗначение;
		
			ОписаниеОшибки = "";
			
			ИдентификаторУстройства                = ПараметрыКассыККМ.ИдентификаторУстройства;
			ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
			
			Если ИдентификаторУстройства <> Неопределено ИЛИ ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					// Подключаем ФР
					Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
					                                                                              ИдентификаторУстройства,
					                                                                              ОписаниеОшибки);
					
				КонецЕсли;
				
				Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
					
					Если Не ИспользоватьБезПодключенияОборудования Тогда
						
						//Готовим данные
						ВходныеПараметры  = Новый Массив();
						ВыходныеПараметры = Неопределено;
						
						ВходныеПараметры.Добавить(0);
						ВходныеПараметры.Добавить(ИзымаемаяСумма);
						
						// Печатаем чек.
						Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
						                                                        "Encash",
						                                                        ВходныеПараметры,
						                                                        ВыходныеПараметры);
						
					КонецЕсли;
					
					Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
						
						// Итоговое действие.
						Результат = СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(Новый Структура("КассаККМ, СуммаВнесения, Дата", Объект.КассаККМ, ИзымаемаяСумма, ТекущаяДата()), ОписаниеОшибки);
						Если Не Результат Тогда
							
							ТекстСообщения = НСтр("ru = 'При выемке денежных средств из кассы ККМ произошла ошибка.
							                            |Дополнительное описание:
							                            |%ДополнительноеОписание%'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							
						КонецЕсли;
						
						ОбновитьСостояниеКассовойСменыНаСервере();
						
					Иначе
						
						ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
						                            |Чек не напечатан на фискальном регистраторе.
						                            |Дополнительное описание:
						                            |%ДополнительноеОписание%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,
						                             "%ДополнительноеОписание%",
						                             ВыходныеПараметры[1]);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
					
					Если Не ИспользоватьБезПодключенияОборудования Тогда
						
						// Отключаем ФР
						МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства);
						
					КонецЕсли;
					
				Иначе
					
					ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
					                            |Чек не напечатан на фискальном регистраторе.
					                            |Дополнительное описание:
					                            |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтборыПоСвойствам(Команда)
	
	СброситьОтборыПоСвойствамНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
КонецФункции

&НаКлиенте
Процедура ДеревоОтборовОтборПриИзменении(Элемент)
	
	ПодборТоваровКлиент.ДеревоОтборовОтборПриИзменении(ЭтаФорма);
	ДеревоОтборовОтборПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Ценообразование и скидки

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки = Неопределено, АдресВоВременномХранилище)
	
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(
		Объект, 
		"Товары", 
		СуммаСкидкиНаценки, 
		Истина,,,,
		ВыделенныеСтроки, 
		АдресВоВременномХранилище
	);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьОплатыПлатежнымиКартамиВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ОплатаПлатежнымиКартами.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, Ложь);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры)
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
	Модифицированность = Истина;
	
	СтруктураСообщений = СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаСервере
Процедура ОтменитьСкидкиНаценкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьАвтоматическиеСкидкиНаценки()
	
	ПараметрыПримененияСкидок = СкидкиНаценкиСервер.ПолучитьПараметрыПримененияСкидокНаценокВЧекеККМ(Объект, ТекущаяДата());
	
	Элементы.ТоварыСкидкиОткрытьИнформациюОСкидках.Видимость = ПараметрыПримененияСкидок.НазначеныСкидки;
	Элементы.КонтекстноеМенюТоварыСкидкиОткрытьИнформациюОСкидках.Видимость = ПараметрыПримененияСкидок.НазначеныСкидки;
	Элементы.ТоварыСкидкиПроцентАвтоматическойСкидки.Видимость = ПараметрыПримененияСкидок.НазначеныСкидки;
	Элементы.ТоварыСкидкиСуммаАвтоматическойСкидки.Видимость = ПараметрыПримененияСкидок.НазначеныСкидки;
	
	Элементы.ТоварыСкидкиНазначитьАвтоматическиеСкидки.Видимость = ПараметрыПримененияСкидок.НазначеныУправляемыеСкидки;
	
КонецПроцедуры

&НаСервере
Функция СчитанаКартаЛояльностиНаСервере(КартаЛояльности)
	
	Результат = Истина;
	
	ДанныеКартыЛояльности = КартыЛояльностиВызовСервера.ПолучитьДанныеКартыЛояльности(КартаЛояльности, Ложь);
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Ссылка) Тогда
		
		Объект.КартаЛояльности = КартаЛояльности;
		
		Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) И ДанныеКартыЛояльности.Партнер <> Объект.Партнер Тогда
			Объект.Партнер = ДанныеКартыЛояльности.Партнер;
		ИначеЕсли Не ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) Тогда
			Объект.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель");
		КонецЕсли;
		
		НастроитьАвтоматическиеСкидкиНаценки();
		
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СчитанаКартаЛояльности(КартаЛояльности)
	
	Если СчитанаКартаЛояльностиНаСервере(КартаЛояльности) Тогда
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаРасчет Тогда
			Расчет(Команды["Расчет"]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подборы и обработка проверки количества

&НаСервере
Процедура СохранитьНастройкиПодбора()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЧекККМВидимостьПодбора", ,Элементы.ФормаПодбор.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура ПодборПриСозданииНаСервере()
	
	Если ИспользоватьАссортимент Тогда
		УстановитьТекстЗапросаПодбораАссортимент();
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ФорматМагазина", Объект.Склад.ФорматМагазина);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ФорматМагазина", Объект.Склад.ФорматМагазина);
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ИнициализироватьРеквизитыФормыДляПолнотекстовогоПоиска(ЭтаФорма, "ИспользоватьПолнотекстовыйПоискПриПодбореТоваров");
	
	ЗначениеОтбора = ?(ЗначениеЗаполнено(СегментНоменклатуры), СегментНоменклатуры, Неопределено);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СегментНоменклатуры", ЗначениеОтбора, ЗначениеЗаполнено(СегментНоменклатуры));
	
	Если НЕ ИспользоватьАссортимент Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ВидЦены", Объект.ВидЦены);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Валюта", Объект.Валюта);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Дата", Объект.Дата);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Склад", Объект.Склад);
	
	Если НЕ ИспользоватьАссортимент Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ВидЦены", Объект.ВидЦены);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Валюта", Объект.Валюта);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Дата", Объект.Дата);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ВладелецХарактеристик", Справочники.Номенклатура.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ВидНоменклатуры", Справочники.ВидыНоменклатуры.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Склад", Объект.Склад);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВКорзинуНаСервере(ПараметрыТовара)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура",   ПараметрыТовара.Номенклатура);
	Отбор.Вставить("Характеристика", ПараметрыТовара.Характеристика);
	Отбор.Вставить("Упаковка",       ПараметрыТовара.Упаковка);
	Отбор.Вставить("Цена",           ПараметрыТовара.Цена);
	
	РезультатПоиска = Объект.Товары.НайтиСтроки(Отбор);
	
	МожноДобавлятьСтроку = Истина;
	Если ИспользоватьАссортимент Тогда
		СтруктураСостоянияАссортимента = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(ПараметрыТовара.Номенклатура, Объект.Склад, Объект.Дата);
		Если НЕ СтруктураСостоянияАссортимента.РазрешеныПродажи Тогда
			ТекстСообщения = НСтр("ru = 'Товар """+ПараметрыТовара.Номенклатура+""" не включен в ассортимент или запрещен к продаже.'"); 
			Сообщить(ТекстСообщения);
			МожноДобавлятьСтроку = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если РезультатПоиска.Количество() = 0 Тогда
		
		Если МожноДобавлятьСтроку Тогда
			ТекущаяСтрока = Объект.Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыТовара);
			
			СтруктураДействий = Новый Структура;
			
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
			СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.РозничнаяТорговля"));
			
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока = РезультатПоиска[0];
		
		ТекущаяСтрока.КоличествоУпаковок = ПараметрыТовара.КоличествоУпаковок + ТекущаяСтрока.КоличествоУпаковок;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		
	КонецЕсли;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		// Активизируем текущую строку табличной части.
		Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
		
		СтрокаДисплеяПокупателя = Строка(ТекущаяСтрока.Номенклатура);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзину(ПараметрыТовара)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапрашиватьКоличество Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура, Характеристика, ВидЦены, Упаковка, Цена, 
		|Дата, Валюта, РедактироватьЦену, РедактироватьВидЦены");
		
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыТовара);
		
		ПараметрыФормы.Дата                 = Объект.Дата;
		ПараметрыФормы.Валюта               = Объект.Валюта;
		ПараметрыФормы.РедактироватьЦену    = Ложь;
		ПараметрыФормы.РедактироватьВидЦены = Ложь;
		
		НовыеПараметрыТовара = ОткрытьФормуМодально("Документ.ЧекККМ.Форма.ЗапросКоличества", ПараметрыФормы, ЭтаФорма);
		
		Если НовыеПараметрыТовара = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, НовыеПараметрыТовара);
		
	Иначе
		
		Если ПараметрыТовара.Упаковка.Пустая() Тогда 
			ПараметрыТовара.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(ПараметрыТовара.Номенклатура);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыТовара.Удалить("ВидЦены");
	
	ДобавитьВКорзинуНаСервере(ПараметрыТовара);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ПересчитатьДокументНаКлиенте();
	
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) И 
		(Элементы.СтраницыСписокНоменклатуры.ТекущаяСтраница = Элементы.ГруппаНоменклатура) Тогда
		ТекущийЭлемент = Элементы.СтрокаПоиска;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПодбора(ВидимостьПодбора)
	
	Элементы.ОбластьПодбора.Видимость = ВидимостьПодбора;
	Элементы.ФормаПодбор.Пометка = ВидимостьПодбора;
	
	ПодборОткрыт = ВидимостьПодбора;
	
	Если ВидимостьПодбора Тогда
		
		Элементы.КонтекстноеМенюОбластьКорзиныТоварыСкопировать.Видимость = Ложь;
		Элементы.ТоварыЗагрузитьДанныеИзТСД.Видимость = Ложь;
		
	Иначе
		
		Элементы.КонтекстноеМенюОбластьКорзиныТоварыСкопировать.Видимость = Истина;
		Элементы.ТоварыЗагрузитьДанныеИзТСД.Видимость = Истина;

	КонецЕсли;
	
	ПодборПриСозданииНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества()
	
	ТабличнаяЧастьТовары = Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок");
	ТабличнаяЧастьТовары.Свернуть("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка", "КоличествоУпаковок");
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличнаяЧастьТовары, УникальныйИдентификатор);
	
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, КэшированныеЗначения)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(ВозвращаемыеПараметры.Товары);
	
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого СтрокаИсточник Из ТаблицаТовары Цикл
		
		Отбор = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			Если СтрокаИсточник.КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаИсточник.КоличествоУпаковок >= 0 Тогда
				
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + СтрокаИсточник.КоличествоУпаковок;
				СтрокаИсточник.КоличествоУпаковок = 0;
				
			Иначе
				
				КоличествоКСписанию = -СтрокаИсточник.КоличествоУпаковок;
				КоличествоВСтроке   = СтрокаТЧ.КоличествоУпаковок;
				
				Если КоличествоКСписанию > КоличествоВСтроке Тогда
					
					СтрокаИсточник.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
					СтрокаТЧ.КоличествоУпаковок = 0;
					
				Иначе
					
					СтрокаИсточник.КоличествоУпаковок = 0;
					СтрокаТЧ.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаТЧ);
			Иначе
				
				СтруктураДействий = Новый Структура;
				ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			МожноДобавлятьСтроку = Истина;
			
			Если ИспользоватьАссортимент Тогда
				СтруктураСостоянияАссортимента = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(СтрокаИсточник.Номенклатура, Объект.Склад, Объект.Дата);
				
				Если НЕ СтруктураСостоянияАссортимента.РазрешеныПродажи Тогда
					ТекстСообщения = НСтр("ru = 'Товар """+СтрокаИсточник.Номенклатура+""" не включен в ассортимент или запрещен к продаже.'"); 
					Сообщить(ТекстСообщения);
					МожноДобавлятьСтроку = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Если МожноДобавлятьСтроку Тогда
				СтрокаТЧ = Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаИсточник);
				
				СтруктураДействий = Новый Структура;
				
				Если ИспользоватьАссортимент Тогда
					СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
				Иначе
					СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
				КонецЕсли;
				
				СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
				
				ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из УдаляемыеСтроки Цикл
		Объект.Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасчет Тогда
		Возврат;
	КонецЕсли;
	
	ИзменятьКоличество = Не ТолькоПросмотр;
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	Если ИспользоватьАссортимент Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками, Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	
	Если ИспользоватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
		СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
		СтруктураПроверкиАссортимента.Склад = Объект.Склад;
		СтруктураПроверкиАссортимента.Дата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
		СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина или запрещен к продаже.'");
		СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныПродажи";
		СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
		СтруктураПроверкиАссортимента.РазрешатьДобавление = Ложь;
		
		СтруктураДействий.ПараметрыПроверкиАссортимента = СтруктураПроверкиАссортимента;
	КонецЕсли;
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если СтруктураДействий.МассивСтрокССериями.Количество() = 1
		И НоменклатураКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьФормуУказанияСерий",0.1,Истина);
		
	КонецЕсли;
	
	Если ИзменятьКоличество Тогда
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСсылкиНаОборудование()
	
	ЭквайринговыеТерминалы.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Ссылка                                 КАК Ссылка,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование               КАК ПодключаемоеОборудование,
	|	
	|	ЭквайринговыеТерминалы.Владелец.ВидыПлатежныхКарт.(
	|		Владелец.ВидыПлатежныхКарт.ВидПлатежнойКарты КАК ВидПлатежнойКарты
	|	) КАК ВидыПлатежныхКарт
	|	
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Касса = &КассаККМ
	|	И ((ЭквайринговыеТерминалы.ПодключаемоеОборудование <> ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|		И ЭквайринговыеТерминалы.ПодключаемоеОборудование.РабочееМесто = &РабочееМесто)
	|		ИЛИ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)
	|";
	
	Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента());
	Иначе
		Запрос.УстановитьПараметр("РабочееМесто", Справочники.РабочиеМеста.ПустаяСсылка());
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Стр = Новый Структура;
		Стр.Вставить("Ссылка",                                 Выборка.Ссылка);
		Стр.Вставить("ПодключаемоеОборудование",               Выборка.ПодключаемоеОборудование);
		Стр.Вставить("ВидыПлатежныхКарт",                      Новый СписокЗначений);
		Стр.Вставить("ИспользоватьБезПодключенияОборудования", Выборка.ИспользоватьБезПодключенияОборудования);
		
		ВыборкаВидыКарт = Выборка.ВидыПлатежныхКарт.Выбрать();
		Пока ВыборкаВидыКарт.Следующий() Цикл
			Стр.ВидыПлатежныхКарт.Добавить(ВыборкаВидыКарт.ВидПлатежнойКарты);
		КонецЦикла;
		
		ЭквайринговыеТерминалы.Добавить(Стр);
		
	КонецЦикла;
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		Дисплеи.ЗагрузитьЗначения(МенеджерОборудованияСервер.ПолучитьСписокОборудования("ДисплейПокупателя",,МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента()));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОплатуКартой(ТекущиеДанные)
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	ОписаниеОшибки = "";
	
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выберите строку удаляемой оплаты картой.'"));
		Возврат;
	КонецЕсли;
	
	СуммаОперации       = ТекущиеДанные.Сумма;
	НомерКарты          = ТекущиеДанные.НомерПлатежнойКарты;
	НомерСсылкиОперации = ТекущиеДанные.СсылочныйНомер;
	НомерЧекаЭТ         = ТекущиеДанные.НомерЧекаЭТ;
	СтрокаСлипЧека      = "";
	НомерСтроки         = ТекущиеДанные.НомерСтроки;
	
	ИдентификаторУстройстваЭТ = Неопределено;
	
	Для каждого Терминал Из ЭквайринговыеТерминалы Цикл
		
		Если Терминал.Значение.Ссылка = ТекущиеДанные.ЭквайринговыйТерминал Тогда
			
			СтруктрураЭквайринговыйТерминал = Терминал.Значение;
			ИдентификаторУстройстваЭТ = СтруктрураЭквайринговыйТерминал.ПодключаемоеОборудование;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ФинансыКлиент.ВозможнаПечатьЧека(ЭтаФорма) Тогда
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
			
			Если ЗначениеЗаполнено(ИдентификаторУстройстваЭТ) ИЛИ (СтруктрураЭквайринговыйТерминал <> Неопределено И СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования) Тогда
				
				// Выбор устройства ФР
				ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
				ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
				
				Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) ИЛИ ИспользоватьБезПодключенияОборудования Тогда
					
					Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
						
						// Подключение устройства ЭТ
						РезультатЭТ = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(
							УникальныйИдентификатор,
							ИдентификаторУстройстваЭТ,
							ОписаниеОшибки
						);
						
					Иначе
						
						РезультатЭТ = Истина;
						
					КонецЕсли;
					
					Если РезультатЭТ Тогда
						
						// Подключение устройства ФР
						РезультатФР = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(
							УникальныйИдентификатор,
							ИдентификаторУстройстваФР,
							ОписаниеОшибки
						);
						
						Если РезультатФР ИЛИ ИспользоватьБезПодключенияОборудования Тогда
							
							Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
								
								ВходныеПараметры  = Новый Массив();
								ВыходныеПараметры = Неопределено;
								
								ВходныеПараметры.Добавить(СуммаОперации);
								ВходныеПараметры.Добавить(НомерСсылкиОперации);
								ВходныеПараметры.Добавить(НомерЧекаЭТ);
								
								// Выполнение операции на ЭТ
								РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(
									ИдентификаторУстройстваЭТ,
									"AuthorizeVoid",
									ВходныеПараметры,
									ВыходныеПараметры
								);
								
								Если РезультатЭТ Тогда
									
									СтрокаСлипЧека = ВыходныеПараметры[0][1];
									
									Если Не ПустаяСтрока(СтрокаСлипЧека) Тогда
										глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", СтрокаСлипЧека);
									КонецЕсли;
									
									НомерКарты          = "";
									НомерСсылкиОперации = "";
									НомерЧекаЭТ         = "";
									
								Иначе
									
									ТекстОписаниеОшибки = ВыходныеПараметры[1];
									
								КонецЕсли;
								
							Иначе
								
								ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию отмены оплаты на эквайринговом терминале.'") + Символы.ПС;
								ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'")        + " "+ СуммаОперации         + Символы.ПС;
								ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер карты:'")           + " "+ НомерКарты            + Символы.ПС;
								ТекстВопроса = ТекстВопроса + НСтр("ru = 'Ссылочный номер:'")       + " "+ НомерСсылкиОперации   + Символы.ПС;
								ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер чека:'")            + " "+ НомерЧекаЭТ           + Символы.ПС;
								ТекстВопроса = ТекстВопроса + Символы.ПС;
								ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция отмены оплаты на эквайринговом терминале прошла успешно?'");
								
								РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
								РезультатЭТ = (РезультатВопроса = КодВозвратаДиалога.Да);
								
								Если РезультатЭТ Тогда
									СтрокаСлипЧека = НСтр("ru = 'Отменена оплата на сумму %1% %2%'");
									СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%1%", СуммаОперации);
									СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%2%", Объект.Валюта);
								Иначе
									СтрокаСлипЧека = "";
									ТекстОписаниеОшибки = НСтр("ru = 'Операция отменена'");
								КонецЕсли;
								
							КонецЕсли;
							
							Если Не РезультатЭТ Тогда
								
								ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
								|""%ОписаниеОшибки%"".
								|Отмена по карте не была произведена.'");
								
								ТекстСообщения = СтрЗаменить(ТекстСообщения,
								"%ОписаниеОшибки%",
								ТекстОписаниеОшибки);
								
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
								
							Иначе
								
								Если Не ПустаяСтрока(СтрокаСлипЧека) И Не ИспользоватьБезПодключенияОборудования Тогда
									
									ВходныеПараметры  = Новый Массив();
									ВходныеПараметры.Добавить(СтрокаСлипЧека);
									ВыходныеПараметры = Неопределено;
									
									РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(
										ИдентификаторУстройстваФР,
										"PrintText",
										ВходныеПараметры,
										ВыходныеПараметры
									);
									
								КонецЕсли;
								
							КонецЕсли;
							
							Если РезультатЭТ И (Не РезультатФР И Не ИспользоватьБезПодключенияОборудования) Тогда
								
								ОписаниеОшибкиФР = ВыходныеПараметры[1];
								
								ТекстСообщения = НСтр("ru = 'При печати слип-чека возникла ошибка:
								|""%ОписаниеОшибки%"".
								|Операция по карте была отменена.'");
								
								ТекстСообщения = СтрЗаменить(ТекстСообщения,
								"%ОписаниеОшибки%",
								ОписаниеОшибкиФР);
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
								
							ИначеЕсли РезультатЭТ Тогда
								
								НайденныеСтроки = Объект.ОплатаПлатежнымиКартами.НайтиСтроки(Новый Структура("НомерСтроки", НомерСтроки));
								Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
									Объект.ОплатаПлатежнымиКартами.Удалить(НайденнаяСтрока);
								КонецЦикла;
								
								ПересчитатьДокументНаКлиенте();
								
								Записать();
								
							КонецЕсли;
							
							// Отключение устройства ФР
							МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(
								УникальныйИдентификатор,
								ИдентификаторУстройстваФР
							);
							
							Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
								
								// Отключение устройства ЭТ
								МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(
									УникальныйИдентификатор,
									ИдентификаторУстройстваЭТ
								);
								
							КонецЕсли;
							
						Иначе
							
							ТекстСообщения = НСтр("ru = 'При подключении фискального регистратора произошла ошибка:
							|""%ОписаниеОшибки%"".
							|Операция по карте не была выполнена.'");
							
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							
						КонецЕсли;
						
					Иначе
						
						ТекстСообщения = НСтр("ru = 'При подключении эквайрингового терминала произошла ошибка:
						|""%ОписаниеОшибки%"".
						|Операция по карте не была выполнена.'");
						
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
					
				Иначе
					
					ТекстСообщения = НСтр("ru = 'Не выбран фискальный регистратор.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			Иначе
				
				// Не выбран эквайринговый терминал
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий ()
	
	ИспользоватьСерииНоменклатуры = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
	Элементы.ТоварыСтатусУказанияСерий.Видимость = ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость        = ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыСерий)
	
	СтруктураДействий = Новый Структура;
	
	Если НЕ ПараметрыФормыСерий.ТолькоПросмотр Тогда
		
		СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		
	КонецЕсли;
	
	НоменклатураСервер.ОбработатьУказаниеСерий(
		Объект, 
		ПараметрыУказанияСерий, 
		ПараметрыФормыСерий, 
		СтруктураДействий
	);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
		Объект, 
		ПараметрыУказанияСерий, 
		ТекущаяСтрокаИдентификатор, 
		КэшированныеЗначения
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУказанияСерий()
	
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	
	ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтаФорма);
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с чеком

&НаСервере
Функция ЗарезервироватьНаСервере()
	
	РезервированиеВыполнено = Истина;
	
	СтарыйСтатус = Объект.Статус;
	Объект.Статус = Перечисления.СтатусыЧековККМ.ТоварЗарезервирован;
	Объект.Дата = ТекущаяДата();
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах 
		И ПараметрыПримененияСкидок.НазначеныСкидки Тогда
		
		ОтменитьСкидкиНаценкиНаСервере();
		
	КонецЕсли;
	
	Попытка
		
		РезервированиеВыполнено = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
		
		Если Не РезервированиеВыполнено Тогда
			Объект.Статус = СтарыйСтатус;
		КонецЕсли;
		
	Исключение
		
		Объект.Статус = СтарыйСтатус;
		РезервированиеВыполнено = Ложь;
		
	КонецПопытки;
	
	Возврат РезервированиеВыполнено;
	
КонецФункции

&НаКлиенте
Функция ЗарезервироватьИОтменитьОплатуНаКлиенте()
	
	Результат = ОтменитьОплату();
	
	Если Результат Тогда
		
		Результат = ЗарезервироватьНаСервере();
		
		ПересчитатьДокументНаКлиенте();
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОтложитьНаСервере()
	
	ОтложитьВыполнено = Истина;
	
	СтарыйСтатус  = Объект.Статус;
	Объект.Статус = Перечисления.СтатусыЧековККМ.Отложен;
	Объект.Дата   = ТекущаяДата();
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах 
		И ПараметрыПримененияСкидок.НазначеныСкидки Тогда
		ОтменитьСкидкиНаценкиНаСервере();
	КонецЕсли;
	
	Попытка
		
		ОтложитьВыполнено = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
		
		Если Не ОтложитьВыполнено Тогда
			Объект.Статус = СтарыйСтатус;
		КонецЕсли;
		
	Исключение
		
		Объект.Статус = СтарыйСтатус;
		ОтложитьВыполнено = Ложь;
		
	КонецПопытки;
	
	Возврат ОтложитьВыполнено;
	
КонецФункции

&НаКлиенте
Функция ОтменитьОплату()
	
	ОплатаОтменена = Ложь;
	
	Если ВнесенаОплата() Тогда
		
		РезультатВопроса = Вопрос(НСтр("ru = 'Перед выполнением операции оплата должна быть отменена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
		Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
			Возврат ОплатаОтменена;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого СтрокаОплаты Из Объект.ОплатаПлатежнымиКартами Цикл
		УдалитьОплатуКартой(СтрокаОплаты);
	КонецЦикла;
	
	// Если отмена оплаты не удалась - вернутся.
	Если Объект.ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		
		ПересчитатьДокументНаКлиенте();
		Возврат ОплатаОтменена;
		
	КонецЕсли;
	
	Объект.ФормаОплаты       = Неопределено;
	Объект.ПолученоНаличными = 0;
	
	ОплатаОтменена = Истина;
	
	Возврат ОплатаОтменена;
	
КонецФункции

&НаКлиенте
Функция ОтложитьИОтменитьОплатуНаКлиенте()
	
	Результат = ОтменитьОплату();
	
	Если Результат Тогда
		
		Объект.ОтложенДо = Дата(1,1,1);
		
		Результат = ОтложитьНаСервере();
		
		Если Результат Тогда
			Оповестить("Запись_ЧекККМ", Новый Структура, Объект.Ссылка);
		КонецЕсли;
		
		ПересчитатьДокументНаКлиенте();
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ВыполнитьЧастьРасчетаНаСервере(ВозвращенноеЗначениеУправляемыеСкидки)

	Результат = Истина;
	СтруктураСообщений = Неопределено;
	
	Если Не КонтрольНаСкладеОтключен Тогда
		
		ТоварЗарезервирован = ЗарезервироватьНаСервере();
		Если Не ТоварЗарезервирован Тогда
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат
		И ИспользоватьАвтоматическиеСкидкиВПродажах
		И ПараметрыПримененияСкидок.НазначеныСкидки Тогда
		
		Если ПараметрыПримененияСкидок.НазначеныУправляемыеСкидки Тогда
			
			УправляемыеСкидки = ВозвращенноеЗначениеУправляемыеСкидки;
			
			СтруктураПараметры = Новый Структура;
			СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
			СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
			СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
			СтруктураПараметры.Вставить("УправляемыеСкидки",                УправляемыеСкидки);
			
		Иначе
			
			СтруктураПараметры = Новый Структура;
			СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
			СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
			СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
			СтруктураПараметры.Вставить("УправляемыеСкидки",                Неопределено);
			
		КонецЕсли;
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Для Каждого СтрокаТЧ Из Объект.Товары Цикл
				Если СтрокаТЧ.Сумма = 0 И СтрокаТЧ.Цена * СтрокаТЧ.КоличествоУпаковок > 0  Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не корректно настроены скидки (наценки). После расчета скидок (наценок) сумма в строке %1 равна нулю.'"), СтрокаТЧ.НомерСтроки), Объект.Ссылка, "Объект.Товары");
					Результат = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Если Результат Тогда
				УспешноЗаписан = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
				Если Не УспешноЗаписан Тогда
					ОтменитьСкидкиНаценкиНаСервере();
					Результат = Ложь;
				КонецЕсли;
			Иначе
				ОтменитьСкидкиНаценкиНаСервере();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Новый Структура("РасчетВыполненУспешно, СтруктураСообщений", Результат, СтруктураСообщений);
	
КонецФункции

&НаСервереБезКонтекста
Функция УдалитьЧек(Ссылка)
	
	Результат = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	ЧекОбъект = Ссылка.ПолучитьОбъект();
	
	Попытка
		ЧекОбъект.Удалить();
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект.Товары, Объект.ЦенаВключаетНДС);
	мСуммаСдачи    = Объект.ОплатаПлатежнымиКартами.Итог("Сумма")
	               + Объект.ПолученоНаличными - СуммаДокумента;
	
	СуммаСкидки = Объект.Товары.Итог("СуммаРучнойСкидки") + Объект.Товары.Итог("СуммаАвтоматическойСкидки");
	
	Если Объект.ЦенаВключаетНДС Тогда
		СуммаБезСкидки = СуммаДокумента + СуммаСкидки;
	Иначе
		СуммаБезСкидки = СуммаДокумента - Объект.Товары.Итог("СуммаНДС") + СуммаСкидки;
	КонецЕсли;
	
	ЕстьТоварыВТабличнойЧасти = Объект.Товары.Количество() > 0;
	ЧекОплачен = мСуммаСдачи >= 0;
	
	Элементы.ДобавитьОплатуКартой1.Доступность = Не ЧекОплачен И СменаОткрыта;
	Элементы.ДобавитьОплатуКартой2.Доступность = Не ЧекОплачен И СменаОткрыта;
	Элементы.КнопкаПробитьЧек.Доступность      = ЧекОплачен И СменаОткрыта;
	Элементы.КнопкаРасчет.Доступность          = ЕстьТоварыВТабличнойЧасти И СменаОткрыта;
	Элементы.КнопкаОтложить2.Доступность       = ЕстьТоварыВТабличнойЧасти И СменаОткрыта;
	Элементы.КнопкаЗарезервировать.Доступность = ЕстьТоварыВТабличнойЧасти И СменаОткрыта;
	Элементы.ОткрытьКассовуюСмену.Доступность  = Не СменаОткрыта;
	Элементы.ЗакрытьКассовуюСмену.Доступность  = СменаОткрыта;
	
	Если мСуммаСдачи < 0 Тогда
		
		СуммаСдачи   = 0;
		СуммаДоплаты = - мСуммаСдачи;
		Элементы.Сдача1.ТекущаяСтраница = Элементы.СуммаДоплатить1;
		Элементы.Сдача2.ТекущаяСтраница = Элементы.СуммаДоплатить2;
		
	Иначе
		
		СуммаСдачи   = мСуммаСдачи;
		СуммаДоплаты = 0;
		Элементы.Сдача1.ТекущаяСтраница = Элементы.СуммаСдачи1;
		Элементы.Сдача2.ТекущаяСтраница = Элементы.СуммаСдачи2;
		
	КонецЕсли;
	
	ВывестиИнформациюНаДисплейПокупателя();
	ПриИзмененииКорзиныНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НовыйЧекНаСервере()
	
	НовыйЧек = Документы.ЧекККМ.СоздатьДокумент();
	НовыйЧек.Партнер = Справочники.Партнеры.РозничныйПокупатель;
	НовыйЧек.ОбработкаЗаполнения(Новый Структура("КассаККМ", Объект.КассаККМ), Истина);
	
	ЗначениеВДанныеФормы(НовыйЧек, Объект);
	
	ТолькоПросмотр = Ложь;
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМ));
	
	ПриСозданииЧека();
	
КонецПроцедуры

&НаКлиенте
Функция ПробитьЧекВыполнить()
	
	ЧекПробит = Ложь;
	
	ОписаниеОшибки = "";
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда // Проверка на определенность рабочего места ВО
	
		ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
		ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
		
		Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) ИЛИ ИспользоватьБезПодключенияОборудования Тогда
			
			// Подключаем ФР
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(
				УникальныйИдентификатор,
				ИдентификаторУстройстваФР,
				ОписаниеОшибки
			);
			
			Если Результат Или ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не ИспользоватьБезПодключенияОборудования Тогда
					
					// Готовим данные
					ВходныеПараметры  = Новый Массив;
					ВыходныеПараметры = Неопределено;
					
					НомерСекции = 1;
					
					// Подготовка таблицы товаров
					ТаблицаТоваров = Новый Массив();
					
					Для Каждого СтрокаТЧ Из Объект.Товары Цикл
						
						СтавкаНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЧ.СтавкаНДС);
						
						Если Объект.ЦенаВключаетНДС Тогда
							Сумма = СтрокаТЧ.Сумма;
						Иначе
							Сумма = СтрокаТЧ.Сумма + СтрокаТЧ.СуммаНДС;
						КонецЕсли;
						
						СуммаСкидки   = СтрокаТЧ.СуммаАвтоматическойСкидки   + СтрокаТЧ.СуммаРучнойСкидки;
						ПроцентСкидки = СтрокаТЧ.ПроцентАвтоматическойСкидки + СтрокаТЧ.ПроцентРучнойСкидки;
						
						СтрокаТаблицыТоваров = Новый СписокЗначений();
						СтрокаТаблицыТоваров.Добавить(Строка(СтрокаТЧ.Номенклатура));
						                                                            //  1 - Наименование
						СтрокаТаблицыТоваров.Добавить("");                          //  2 - Штрихкод
						СтрокаТаблицыТоваров.Добавить("");                          //  3 - Артикул
						СтрокаТаблицыТоваров.Добавить(НомерСекции);                 //  4 - Номер отдела
						СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.Цена);               //  5 - Цена за позицию без скидки
						СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.КоличествоУпаковок); //  6 - Количество
						СтрокаТаблицыТоваров.Добавить("");                          //  7 - Наименование скидки/наценки
						СтрокаТаблицыТоваров.Добавить(СуммаСкидки);                 //  8 - Сумма скидки/наценки
						СтрокаТаблицыТоваров.Добавить(ПроцентСкидки);               //  9 - Процент скидки/наценки
						СтрокаТаблицыТоваров.Добавить(Сумма);                       // 10 - Сумма позиции со скидкой
						СтрокаТаблицыТоваров.Добавить(0);                           // 11 - Номер налога (1)
						СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.СуммаНДС);           // 12 - Сумма налога (1)
						СтрокаТаблицыТоваров.Добавить(СтавкаНДС * 100);             // 13 - Процент налога (1)
						СтрокаТаблицыТоваров.Добавить(0);                           // 14 - Номер налога (2)
						СтрокаТаблицыТоваров.Добавить(0);                           // 15 - Сумма налога (2)
						СтрокаТаблицыТоваров.Добавить(0);                           // 16 - Процент налога (2)
						СтрокаТаблицыТоваров.Добавить("");                          // 17 - Наименование секции форматирования товарной строки
						
						ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);
						
					КонецЦикла;
					
					// Подготовка таблицы оплат
					ТаблицаОплат = Новый Массив();
					
					// Наличные
					СтрокаОплаты = Новый СписокЗначений();
					СтрокаОплаты.Добавить(0);
					СтрокаОплаты.Добавить(Объект.ПолученоНаличными);
					СтрокаОплаты.Добавить("Наличная оплата");
					СтрокаОплаты.Добавить("");
					ТаблицаОплат.Добавить(СтрокаОплаты);
					// Безналичные
					СтрокаОплаты = Новый СписокЗначений();
					СтрокаОплаты.Добавить(1);
					СтрокаОплаты.Добавить(Объект.ОплатаПлатежнымиКартами.Итог("Сумма"));
					СтрокаОплаты.Добавить("Безналичная оплата");
					СтрокаОплаты.Добавить("");
					ТаблицаОплат.Добавить(СтрокаОплаты);
					
					// Подготовка таблицы общих параметров
					ОбщиеПараметры = Новый Массив();
					ОбщиеПараметры.Добавить(0);                      //  1 - Тип чека
					ОбщиеПараметры.Добавить(Истина);                 //  2 - Признак фискального чека
					ОбщиеПараметры.Добавить(Неопределено);           //  3 - Печать на подкладном документе
					ОбщиеПараметры.Добавить(СуммаДокумента);         //  4 - Сумма по чеку без скидок/наценок
					ОбщиеПараметры.Добавить(СуммаДокумента);         //  5 - Сумма по чеку с учетом всех скидок/наценок
					ОбщиеПараметры.Добавить("");                     //  6 - Номер дисконтной карты
					ОбщиеПараметры.Добавить("");                     //  7 - Текст шапки
					ОбщиеПараметры.Добавить("");                     //  8 - Текст подвала
					ОбщиеПараметры.Добавить(0);                      //  9 - Номер смены (для копии чека)
					ОбщиеПараметры.Добавить(0);                      // 10 - Номер чека (для копии чека)
					ОбщиеПараметры.Добавить(0);                      // 11 - Номер документа (для копии чека)
					ОбщиеПараметры.Добавить(0);                      // 12 - Дата документа (для копии чека)
					ОбщиеПараметры.Добавить("");                     // 13 - Имя кассира (для копии чека)
					ОбщиеПараметры.Добавить("");                     // 14 - Пароль кассира
					ОбщиеПараметры.Добавить(0);                      // 15 - Номер шаблона
					ОбщиеПараметры.Добавить("");                     // 16 - Наименование секции форматирования шапки
					ОбщиеПараметры.Добавить("");                     // 17 - Наименование секции форматирования подвала
					
					ВходныеПараметры.Добавить(ТаблицаТоваров);
					ВходныеПараметры.Добавить(ТаблицаОплат);
					ВходныеПараметры.Добавить(ОбщиеПараметры);
					
					// Печатаем чек.
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
						ИдентификаторУстройстваФР,
						"PrintReceipt",
						ВходныеПараметры,
						ВыходныеПараметры
					);
					
				КонецЕсли;
				
				Если Результат ИЛИ ИспользоватьБезПодключенияОборудования Тогда
					
					// Установить полученное значение номера чека реквизиту документа.
					Если Не ИспользоватьБезПодключенияОборудования Тогда
						Объект.НомерЧекаККМ = ВыходныеПараметры[1];
					КонецЕсли;
					
					Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
					Объект.Дата   = ТекущаяДата();
					Если Не ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
						Объект.НомерЧекаККМ = 1;
					КонецЕсли;
					
					Модифицированность = Истина;
					
					РезультатПроведения = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
					
					Если РезультатПроведения = Истина Тогда
						ЧекПробит = Истина;
					КонецЕсли;
					
					ПересчитатьДокументНаКлиенте();
					ПодключитьОбработчикОжидания("УстановитьТекущийЭлементНаКнопкуЗакрыть", 0.1, Истина);
					
				Иначе
					
					ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
					|Чек не напечатан на фискальном регистраторе.
					|Дополнительное описание:
					|%ДополнительноеОписание%'");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения,
					"%ДополнительноеОписание%",
					
					ВыходныеПараметры[1]);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
				// Отключаем ФР
				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройстваФР);
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
				|Чек не напечатан на фискальном регистраторе.
				|Дополнительное описание:
				|%ДополнительноеОписание%'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Не выбран фискальный регистратор.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	Возврат ЧекПробит;
	
КонецФункции

&НаКлиенте
Функция ПробитьЧекНаКлиенте()
	
	Результат = Ложь;
	ЕстьОшибки = Ложь;
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Документ помечен на удаление'"), Объект.Ссылка,,,ЕстьОшибки);
	КонецЕсли;
	
	Если СуммаДокумента > Объект.ПолученоНаличными + Объект.ОплатаПлатежнымиКартами.Итог("Сумма") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Сумма оплаты меньше суммы чека'"), Объект.Ссылка, "СуммаСдачи",,ЕстьОшибки);
	КонецЕсли;
	
	Если СуммаДокумента < Объект.ОплатаПлатежнымиКартами.Итог("Сумма") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Сумма оплаты платежными картами превышает сумму чека'"), Объект.Ссылка, "СуммаСдачи",,ЕстьОшибки);
	КонецЕсли;
	
	Объект.Дата = ТекущаяДата();
	
	Если Не ЕстьОшибки И ПроверитьЗаполнение() Тогда
		Результат = ПробитьЧекВыполнить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ВнесенаОплата()
	
	Возврат (Объект.ПолученоНаличными > 0 ИЛИ Объект.ОплатаПлатежнымиКартами.Количество() > 0);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий на сервере

&НаСервере
Процедура ИспользоватьФильтрыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииИспользованияФильтров(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВариантНавигацииПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииВариантаНавигации(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидНоменклатурыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииВидаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИерархияНоменклатурыПриАктивизацииСтрокиНаСервере()
	
	ПодборТоваровСервер.ПриАктивизацииСтрокиИерархииНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоОтборовОтборПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ДеревоОтборовОтборПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СегментНоменклатурыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииСегментаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ТолькоВНаличииПриИзмененииНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборТолькоВНаличии(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДиапазонаЦенНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборПоДиапазонуЦен(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСоСхожимиСвойствамиНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииОтображенияТоваровСоСхожимиСвойствами(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКСпискуНоменклатурыНаСервере()
	
	ПодборТоваровСервер.ПерейтиКСпискуНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКСпискуХарактеристикНаСервере()
	
	ПодборТоваровСервер.ПерейтиКСпискуХарактеристик(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СПодобраннойНоменклатуройСовместноПродаетсяНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборПоНоменклатуреПродаваемойСовместно(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормыНаСервере()
	
	ПодборТоваровСервер.СохранитьНастройкиФормыПодбора(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКорзиныНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииКорзины(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПеретащитьВКорзинуНаСервере(НовыеСтроки)
	
	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
		
		Если НоваяСтрока.Упаковка.Пустая() Тогда 
			НоваяСтрока.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(НоваяСтрока.Номенклатура);
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура",   НоваяСтрока.Номенклатура);
		Отбор.Вставить("Характеристика", НоваяСтрока.Характеристика);
		Отбор.Вставить("Упаковка",       НоваяСтрока.Упаковка);
		Отбор.Вставить("Цена",           НоваяСтрока.Цена);
		
		РезультатПоиска = Объект.Товары.НайтиСтроки(Отбор);
		
		Если РезультатПоиска.Количество() = 0 Тогда
			
			ТекущаяСтрока = Объект.Товары.Добавить();
			
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, НоваяСтрока);
			
			СтруктураДействий = Новый Структура;
			
			СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
			СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
			СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.РозничнаяТорговля"));
			
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
			
		Иначе
			
			ТекущаяСтрока = РезультатПоиска[0];
			
			ТекущаяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок + ТекущаяСтрока.КоличествоУпаковок;
			
			СтруктураДействий = Новый Структура;
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
			
		КонецЕсли;
		
		// Активизируем текущую строку табличной части.
		Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
		
		СтрокаДисплеяПокупателя = Строка(ТекущаяСтрока.Номенклатура);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
	КонецЦикла;
	
	ПриИзмененииКорзиныНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураИсходногоКачестваПриИзмененииНаСервере()
	
	ПодборТоваровСервер.НоменклатураИсходногоКачестваПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СписокКачестваПометкаПриИзмененииНаСервере()
	
	ПодборТоваровСервер.СписокКачестваПометкаПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ВладелецХарактеристик()
	
	Возврат	ПодборТоваровСервер.ВладелецХарактеристик(ТекущаяСтрокаНоменклатуры.Номенклатура);	
	
КонецФункции

&НаСервере
Процедура СброситьОтборыПоСвойствамНаСервере()
	
	ПодборТоваровСервер.СброситьОтборыПоСвойствам(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция ПолучитьСтруктуруСообщений()
	
	Возврат СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	
КонецФункции

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя()

	Дисплей = Неопределено;
	ФорматнаяСтрока = "ЧДЦ=2; ЧРГ=' '; ЧН=0.00; ЧГ=0";
	ДлинаТекста     = 20;
	
	ДПТекст1 = "";
	ДПТекст2 = "";
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасчет Тогда
		
		ДПТекст1 = ?(
		    Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		    "",
		    Лев("К оплате:" + Формат(СуммаДокумента, ФорматнаяСтрока), ДлинаТекста)
		);
		
		Если СуммаДоплаты > 0 Тогда
			
			ДПТекст2 = ?(
			    Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
			    "",
			    Лев(НСтр("ru='Доплатить:'") + Формат(СуммаДоплаты, ФорматнаяСтрока), ДлинаТекста)
			);
			
		ИначеЕсли СуммаСдачи > 0 Тогда
			
			ДПТекст2 = ?(
			    Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
			    "",
			    Лев(НСтр("ru='Сдача:'") + Формат(СуммаСдачи, ФорматнаяСтрока), ДлинаТекста)
			);
			
		КонецЕсли;
		
	Иначе
		
		ДПТекст1 = ?(
		    Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		    "",
		    Лев(СтрокаДисплеяПокупателя, ДлинаТекста)
		);
		
		ДПТекст2 = ?(
		    Не ЗначениеЗаполнено(СтрокаДисплеяПокупателя),
		    "",
		    Лев(НСтр("ru='Итог:'") + Формат(СуммаДокумента, ФорматнаяСтрока), ДлинаТекста)
		);
		
	КонецЕсли;
	
	Для каждого ЭлементСписка Из Дисплеи Цикл
		
		Дисплей = ЭлементСписка.Значение;
		
		// Очистка
		ВходныеПараметры  = Новый Массив();
		ВыходныеПараметры = Неопределено;
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
			Дисплей.Ссылка,
			"ClearText",
			ВходныеПараметры,
			ВыходныеПараметры
		);
		
		Пока СтрДлина(ДПТекст1) < ДлинаТекста Цикл
			ДПТекст1 = ДПТекст1 + " ";
		КонецЦикла;
		
		Пока СтрДлина(ДПТекст2) < ДлинаТекста Цикл
			ДПТекст2 = ДПТекст2 + " ";
		КонецЦикла;
		
		// Подготовка данных
		ВходныеПараметры  = Новый Массив();
		ВыходныеПараметры = Неопределено;
		
		ВходныеПараметры.Добавить(ДПТекст1 + Символы.ПС + ДПТекст2);
		
		Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(
			Дисплей.Ссылка,
			"DisplayText",
			ВходныеПараметры,
			ВыходныеПараметры
		);
		
		Если НЕ Результат Тогда
			ТекстСообщения = НСтр(
				"ru = 'При использовании дисплея покупателя произошла ошибка.
				|Дополнительное описание:
				|%ДополнительноеОписание%'"
			);
			ТекстСообщения = СтрЗаменить(
				ТекстСообщения,
				"%ДополнительноеОписание%",
				ВыходныеПараметры[1]
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоНастройкам()
	
	ПодборТоваровСервер.ПриСозданииФормыПодбораНаСервере(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтруктураСостояниеКассовойСмены = РозничныеПродажи.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		Если Объект.Статус <> Перечисления.СтатусыЧековККМ.Пробит
			И Объект.КассоваяСмена <> СтруктураСостояниеКассовойСмены.КассоваяСмена Тогда
			Объект.КассоваяСмена = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		КонецЕсли;
		
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		Если Объект.Статус <> Перечисления.СтатусыЧековККМ.Пробит
			И Объект.Кассир <> ТекущийПользователь Тогда
			Объект.Кассир = ТекущийПользователь;
		КонецЕсли;
		
	Иначе
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.Товары,
			Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
			)
		);
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМ));
		УстановитьВидимостьЭлементовСерий();
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
			И ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
			Объект.Серии.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	// Параметры времени выполнения.
	КонтрольНаСкладеОтключен  = Справочники.Склады.КонтрольОстатковНаСкладеОтключен(Объект.Склад);
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
		НастроитьАвтоматическиеСкидкиНаценки();
	КонецЕсли;
	
	// Если контроль остатков отключен - функционал резервирования не используется.
	Если КонтрольНаСкладеОтключен Тогда
		Элементы.КнопкаЗарезервировать.Видимость = Ложь;
	КонецЕсли;
	
	// Если экваринговые терминалы не подключены - оплата картами не используется.
	Если ЭквайринговыеТерминалы.Количество() = 0 Тогда
		Элементы.ИспользуетсяОплатаКартой.Видимость           = Ложь;
		Элементы.ИспользуетсяОплатаКартойИНаличными.Видимость = Ложь;
	КонецЕсли;
	
	// Настройка подбора номенклатуры.
	ВидимостьПодбора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЧекККМВидимостьПодбора", );
	Если ВидимостьПодбора <> Неопределено Тогда
		УстановитьВидимостьПодбора(ВидимостьПодбора);
	Иначе
		УстановитьВидимостьПодбора(Ложь);
	КонецЕсли;
	
	Элементы.ТоварыИндексСовместноПродаваемыеТовары.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПродаваемуюСовместно");
	
КонецПроцедуры

&НаСервере
Процедура ПолученыСообщения(Сообщения)
	
	СкидкиНаценкиСервер.СохранитьОтработанныеСообщения(Объект, Сообщения);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура УстановитьТекущийЭлементНаКнопкуЗакрыть()
	
	ТекущийЭлемент = Элементы.КнопкаЗакрыть;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоиск()
	
	Если НЕ ПодборТоваровКлиент.ВыполнениеПоискаТоваровВозможно(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоискТоваровНаСервере();
	
	ПодборТоваровКлиент.ПослеВыполненияПоискаТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискТоваровНаСервере()
	
	ПодборТоваровСервер.ВыполнитьПоискТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивныйЭлемент()

	Если Элементы.КнопкаПробитьЧек.Доступность Тогда
		ТекущийЭлемент = Элементы.КнопкаПробитьЧек;
	Иначе
		
		Если Элементы.ОплатаРасчет.ТекущаяСтраница = Элементы.ИспользуетсяОплатаНаличными Тогда
			ТекущийЭлемент = Элементы.ПолученоНаличными;
		ИначеЕсли Элементы.ОплатаРасчет.ТекущаяСтраница = Элементы.ИспользуетсяОплатаКартойИНаличными Тогда		
			ТекущийЭлемент = Элементы.ПолученоНаличными1;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолученоНаличнымиПриИзменении(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	УстановитьАктивныйЭлемент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуТовара(Команда)
	
	ПодборТоваровКлиент.ОткрытьКарточкуТовара(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Товары", УникальныйИдентификатор, ТолькоВыделенныеСтроки, "ТоварыСкидки");
	
КонецФункции

&НаСервере
Процедура ТоварыДругогоКачестваНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборПоНоменклатуреДругогоКачества(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина);
	
	СуммаРучнойСкидкиНаценки = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта
	);
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		Модифицированность = Истина;
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.ТоварыСкидки.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостояниеКассовойСменыНаСервереБезКонтекста(КассаККМ)
	
	Возврат РозничныеПродажи.ПолучитьСостояниеКассовойСмены(КассаККМ);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОткрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОписаниеОшибки = "")
	
	Возврат РозничныеПродажи.ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗакрытьКассовуюСменуНаСервереБезКонтекста(КассаККМ, ОшибкаПриСнятииZОтчета, ОписаниеОшибки = "")
	
	Возврат РозничныеПродажи.ВыполнитьОперациюЗакрытияКассовойСмены(КассаККМ, ОшибкаПриСнятииZОтчета, ОписаниеОшибки);
	
КонецФункции

&НаСервере
Процедура ОбновитьСостояниеКассовойСменыНаСервере()
	
	СменаОткрыта = Ложь;
	
	СтруктураСостояниеКассовойСмены = СостояниеКассовойСменыНаСервереБезКонтекста(Объект.КассаККМ);
	Если ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.СтатусКассовойСмены) Тогда
		
		ТекстСообщения = НСтр("ru='Смена № %НомерСмены%, Статус: %СтатусСмены% %ВремяИзменения%, В кассе %НаличностьВКассе% %Валюта%'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСмены%", СокрЛП(СтруктураСостояниеКассовойСмены.НомерКассовойСмены));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтатусСмены%", СтруктураСостояниеКассовойСмены.СтатусКассовойСмены);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаличностьВКассе%", СтруктураСостояниеКассовойСмены.НаличностьВКассе);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СтруктураСостояниеКассовойСмены.ВалютаПредставление);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВремяИзменения%", Формат(СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса,"ДФ='dd.MM.yy ЧЧ:мм'"));
		
		СостояниеКассовойСмены = ТекстСообщения;
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Смена не открыта, В кассе %НаличностьВКассе% %Валюта%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаличностьВКассе%", СтруктураСостояниеКассовойСмены.НаличностьВКассе);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%", СтруктураСостояниеКассовойСмены.ВалютаПредставление);
		
		СостояниеКассовойСмены = ТекстСообщения;
		
	КонецЕсли;
	
	СменаОткрыта = СтруктураСостояниеКассовойСмены.СменаОткрыта;
	ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧека()
	
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМ));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий); 
		
		УстановитьВидимостьЭлементовСерий();
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	
	ОбновитьСостояниеКассовойСменыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЧека(Отказ)
	
	Кнопки = Новый СписокЗначений;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасчет Тогда
		
		ТекстВопроса = "Выберите действие.";
		
		Если СменаОткрыта Тогда
			Если КонтрольНаСкладеОтключен Тогда
				Кнопки.Добавить(1, НСтр("ru = 'Отложить'"));
			Иначе
				Кнопки.Добавить(1, НСтр("ru = 'Отложить без резервирования'"));
				Кнопки.Добавить(2, НСтр("ru = 'Отложить с резервированием'"));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Кнопки.Добавить(4, НСтр("ru = 'Удалить чек'"));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Кнопки.Добавить(3, НСтр("ru = 'Закрыть без сохранения'"));
		КонецЕсли;
		
		Кнопки.Добавить(99, НСтр("ru = 'Отмена'"));
		
	Иначе
		
		Если Модифицированность ИЛИ ВнесенаОплата() Тогда
			
			ТекстВопроса = НСтр("ru = 'Данные чека ККМ были изменены.'");
			
			Если СменаОткрыта Тогда
				Если КонтрольНаСкладеОтключен Тогда
					Кнопки.Добавить(1, НСтр("ru = 'Отложить'"));
				Иначе
					Кнопки.Добавить(1, НСтр("ru = 'Отложить без резервирования'"));
					Кнопки.Добавить(2, НСтр("ru = 'Отложить с резервированием'"));
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Кнопки.Добавить(3, НСтр("ru = 'Закрыть без сохранения'"));
			Иначе
				Если Не ВнесенаОплата() Тогда
					Кнопки.Добавить(3, НСтр("ru = 'Закрыть без сохранения'"));
				КонецЕсли;
			КонецЕсли;
			
			Кнопки.Добавить(99, НСтр("ru = 'Отмена'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Если Кнопки.Количество() > 0 Тогда
		
		РезультатВопроса = Вопрос(ТекстВопроса, Кнопки);
		Если РезультатВопроса = 1 Тогда
			
			// Отложить чек без резервирования
			ЧекОтложен = ОтложитьИОтменитьОплатуНаКлиенте();
			Если Не ЧекОтложен Тогда
				Отказ = Истина;
			Иначе
				Оповестить("Запись_ЧекККМ", Новый Структура, Объект.Ссылка);
			КонецЕсли;
			
		ИначеЕсли РезультатВопроса = 2 Тогда
			
			// Отложить чек с резервированием
			ОтложенДо = ТекущаяДата() + 3*60*60;
			Если ВвестиДату(ОтложенДо, НСтр("ru = 'Отложить до:'")) Тогда
				
				Объект.ОтложенДо = ОтложенДо;
				ТоварЗарезервирован = ЗарезервироватьИОтменитьОплатуНаКлиенте();
				
				Если Не ТоварЗарезервирован Тогда
					Отказ = Истина;
				Иначе
					Оповестить("Запись_ЧекККМ", Новый Структура, Объект.Ссылка);
				КонецЕсли;
				
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
		ИначеЕсли РезультатВопроса = 3 Тогда
			
			// Закрыть без сохранения.
			ОплатаОтменена = ОтменитьОплату();
			
			Если НЕ ОплатаОтменена Тогда
				Отказ = Истина;
			КонецЕсли;
			
		ИначеЕсли РезультатВопроса = 4 Тогда
			
			// Удалить чек.
			ОплатаОтменена = ОтменитьОплату();
			
			Если НЕ ОплатаОтменена Тогда
				Отказ = Истина;
			КонецЕсли;
			
			Если НЕ Отказ Тогда
				
				УдалениеВыполнено = УдалитьЧек(Объект.Ссылка);
				
				Если НЕ УдалениеВыполнено Тогда
					Отказ = Истина;
				Иначе
					Оповестить("Запись_ЧекККМ", Новый Структура, Неопределено);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаПодбораАссортимент()
	Список.ТекстЗапроса = "ВЫБРАТЬ
	|	СправочникНоменклатура.Наименование КАК Наименование,
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.Родитель КАК Родитель,
	|	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СправочникНоменклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
	|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыХарактеристик.Цена, 0) КАК ЧИСЛО(15, 2)) КАК МаксимальнаяЦенаХарактеристики,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ЭтоГруппа
	|			ТОГДА ВЫБОР
	|					КОГДА СправочникНоменклатура.ПометкаУдаления
	|						ТОГДА 13
	|					ИНАЧЕ 12
	|				КОНЕЦ
	|		ИНАЧЕ -1 + ВЫБОР
	|				КОГДА СправочникНоменклатура.ПометкаУдаления
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ + ВЫБОР
	|				КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|					ТОГДА 1
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ КАК ИндексКартинки,
	|	СправочникНоменклатура.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоТовар,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоУслуга,
	|	СправочникНоменклатура.ПометкаУдаления
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент КАК Ассортимент
	|		ПО СправочникНоменклатура.Ссылка = Ассортимент.Номенклатура
	|			И (Ассортимент.ОбъектПланирования = &ФорматМагазина)
	|			И (Ассортимент.РазрешеныПродажи)
	|			И (Ассортимент.Регистратор В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					Ассорти.Регистратор
	|				ИЗ
	|					РегистрСведений.Ассортимент КАК Ассорти
	|				ГДЕ
	|					Ассорти.Номенклатура = Ассортимент.Номенклатура
	|					И Ассорти.ОбъектПланирования = Ассортимент.ОбъектПланирования
	|					И Ассорти.Период <= &Дата
	|				УПОРЯДОЧИТЬ ПО
	|					Ассорти.Период УБЫВ,
	|					Ассорти.ДатаРегистратора УБЫВ,
	|					Ассорти.Регистратор УБЫВ))
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(, Склад = &Склад {(Номенклатура).* КАК Номенклатура, (Характеристика).* КАК Характеристика}) КАК СвободныеОстатки
	|		ПО (СвободныеОстатки.Номенклатура = СправочникНоменклатура.Ссылка)}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатуры
	|		ПО (ЦеныНоменклатуры.Номенклатура = СправочникНоменклатура.Ссылка)
	|			И (ЦеныНоменклатуры.ВидЦены = Ассортимент.ВидЦены)
	|			И (ЦеныНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|			ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
	|			МАКСИМУМ(ЦеныНоменклатуры.Цена) КАК Цена
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, {(Номенклатура).* КАК Номенклатура, (Характеристика).* КАК Характеристика}) КАК ЦеныНоменклатуры
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЦеныНоменклатуры.Номенклатура,
	|			ЦеныНоменклатуры.ВидЦены) КАК ЦеныНоменклатурыХарактеристик
	|		ПО (ЦеныНоменклатурыХарактеристик.Номенклатура = СправочникНоменклатура.Ссылка)
	|			И (ЦеныНоменклатурыХарактеристик.ВидЦены = Ассортимент.ВидЦены)}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)}
	|ГДЕ
	|	НЕ СправочникНоменклатура.ЭтоГруппа
	|{ГДЕ
	|	(1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1
	|			ИЗ
	|				РегистрСведений.НоменклатураСегмента КАК Сегменты
	|			ГДЕ
	|				Сегменты.Номенклатура = СправочникНоменклатура.Ссылка
	|				И Сегменты.Сегмент = &СегментНоменклатуры)) КАК Поле2}";
	
	ПодборТаблицаХарактеристики.ТекстЗапроса = "ВЫБРАТЬ
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	&Номенклатура КАК Номенклатура,
	|	&ТипНоменклатуры КАК ТипНоменклатуры,
	|	&ВидНоменклатуры КАК ВидНоменклатуры,
	|	&ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
	|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ВЫБОР
	|		КОГДА ХарактеристикиНоменклатуры.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	ИСТИНА КАК ХарактеристикиИспользуются,
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ХарактеристикиНоменклатуры.ПометкаУдаления
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент КАК Ассортимент
	|		ПО &Номенклатура = Ассортимент.Номенклатура
	|			И (Ассортимент.ОбъектПланирования = &ФорматМагазина)
	|			И (Ассортимент.РазрешеныПродажи)
	|			И (Ассортимент.Регистратор В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					Ассорти.Регистратор
	|				ИЗ
	|					РегистрСведений.Ассортимент КАК Ассорти
	|				ГДЕ
	|					Ассорти.Номенклатура = Ассортимент.Номенклатура
	|					И Ассорти.ОбъектПланирования = Ассортимент.ОбъектПланирования
	|					И Ассорти.Период <= &Дата
	|				УПОРЯДОЧИТЬ ПО
	|					Ассорти.Период УБЫВ,
	|					Ассорти.ДатаРегистратора УБЫВ,
	|					Ассорти.Регистратор УБЫВ))
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
	|				,
	|				Склад = &Склад
	|					И Номенклатура = &Номенклатура) КАК СвободныеОстатки
	|		ПО (СвободныеОстатки.Характеристика = ХарактеристикиНоменклатуры.Ссылка)}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Дата,
	|					Номенклатура = &Номенклатура) КАК ЦеныНоменклатуры
	|		ПО (ЦеныНоменклатуры.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
	|		И (ЦеныНоменклатуры.ВидЦены = Ассортимент.ВидЦены)
	|		}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)}
	|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК Сегменты
	|		ПО (Сегменты.Номенклатура = &Номенклатура)
	|			И (Сегменты.Характеристика = ХарактеристикиНоменклатуры.Ссылка)}
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &ВладелецХарактеристик
	|{ГДЕ
	|	(Сегменты.Сегмент = &СегментНоменклатуры)}";
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьДокументВнесениеДенежныхСредствВКассуККМ(СтруктураВыбранныеДанные, ОписаниеОшибки)
	Возврат РозничныеПродажи.СоздатьДокументВнесениеДенежныхСредствВКассуККМ(СтруктураВыбранныеДанные, ОписаниеОшибки);
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(ВходныеДанные, ОписаниеОшибки)
	Возврат РозничныеПродажи.СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(ВходныеДанные, ОписаниеОшибки);
КонецФункции



