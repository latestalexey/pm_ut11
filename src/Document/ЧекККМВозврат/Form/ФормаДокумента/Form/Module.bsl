
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; // используется механизмом серий

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
		УстановитьРежимТолькоПросмотрНаСервере();
	ИначеЕсли Объект.ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		Элементы.Товары.ТолькоПросмотр                     = Истина;
		Элементы.ТоварыПоискПоШтрихкоду.Доступность     = Ложь;
	КонецЕсли;

	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	Если ИспользоватьПодключаемоеОборудование Тогда
		ПолучитьСсылкиНаОборудование();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМВозврат));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		УстановитьВидимостьЭлементовСерий();
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.Товары,
			Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
			)
		);
		РассчитатьИтоговыеПоказателиЧекаККМНаВозврат(ЭтаФорма);
		
		Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	КонецЕсли;
	
	ИспользоватьАссортимент = ПолучитьФункциональнуюОпцию("КонтролироватьАссортимент", Новый Структура("Склад", Объект.Склад));
	Если ИспользоватьАссортимент <> Истина Тогда
		ИспользоватьАссортимент = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМВозврат));
	УстановитьВидимостьЭлементовСерий();
	
	Элементы.ПробитьЧек.Доступность = НЕ Объект.ПометкаУдаления;
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	РассчитатьИтоговыеПоказателиЧекаККМНаВозврат(ЭтаФорма);
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ТекущийОбъект, Документы.ЧекККМВозврат));
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЧекККМВозврат", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ОПЛАТА ПЛАТЕЖНЫМИ КАРТАМИ

&НаКлиенте
Процедура ОплатаПлатежнымиКартамиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчитатьДокументНаКлиенте();
	РассчитатьИтоговыеПоказателиЧекаККМНаВозврат(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ТОВАРЫ

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	РассчитатьИтоговыеПоказателиЧекаККМНаВозврат(ЭтаФорма);
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПересчитатьДокументНаКлиенте();
	РассчитатьИтоговыеПоказателиЧекаККМНаВозврат(ЭтаФорма);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);	
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ТоварыСтатусУказанияСерий" Тогда
		Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
			ПараметрыФормыУказанияСерий = ПолучитьПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
			
			ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
			
			Если ЗначениеВозврата <> Неопределено Тогда
				ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ИспользоватьАссортимент Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиЧекаККМНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	Если ИспользоватьАссортимент Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиЧекаККМНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		Если ИспользоватьАссортимент Тогда
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиЧекаККМНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
 	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиЧекаККМНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиЧекаККМНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиЧекаККМНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиЧекаККМНаВозврат(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиЧекаККМНаВозврат(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПолучитьПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплату(Команда)

	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	ОписаниеОшибки            = "";

	//Проверка выбранной строки в талице оплат платежными картами
	ТекущиеДанные = Элементы.ОплатаПлатежнымиКартами.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выберите строку отменяемой оплаты картой.'"));
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ОплатаОтменена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данная оплата уже отменена.'"));
		Возврат;
	КонецЕсли;

	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		СуммаОперации       = ТекущиеДанные.Сумма;
		НомерКарты          = ТекущиеДанные.НомерПлатежнойКарты;
		НомерСсылкиОперации = ТекущиеДанные.СсылочныйНомер;
		НомерЧекаЭТ         = ТекущиеДанные.НомерЧекаЭТ;
		СтрокаСлипЧека      = "";

		// Выбор устройства ЭТ
		Если ЭквайринговыеТерминалы.Количество() = 1 Тогда
			
			СтруктрураЭквайринговыйТерминал = ЭквайринговыеТерминалы[0].Значение;
			ИдентификаторУстройстваЭТ       = СтруктрураЭквайринговыйТерминал.ПодключаемоеОборудование;
			
		ИначеЕсли ЭквайринговыеТерминалы.Количество() > 1 Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СписокВыбора", Новый СписокЗначений);
			Для каждого Терминал Из ЭквайринговыеТерминалы Цикл
				ПараметрыФормы.СписокВыбора.Добавить(Терминал.Значение, Терминал.Значение.Ссылка);
			КонецЦикла;
			СтруктрураЭквайринговыйТерминал = ОткрытьФормуМодально("Документ.ЧекККМ.Форма.ВыборЭквайринговогоТерминала", ПараметрыФормы);
			
			Если СтруктрураЭквайринговыйТерминал <> Неопределено Тогда
				ИдентификаторУстройстваЭТ = СтруктрураЭквайринговыйТерминал.ПодключаемоеОборудование;
			Иначе
				ИдентификаторУстройстваЭТ = Неопределено;
			КонецЕсли;
			
		Иначе
			СтруктрураЭквайринговыйТерминал = Неопределено;
			ИдентификаторУстройстваЭТ       = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИдентификаторУстройстваЭТ) ИЛИ (СтруктрураЭквайринговыйТерминал <> Неопределено И СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования) Тогда
			
			ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
			ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
			
			Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) Или ИспользоватьБезПодключенияОборудования Тогда
				
				Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
					
					// Подключение устройства ЭТ
					РезультатЭТ = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
					                                                                                ИдентификаторУстройстваЭТ,
					                                                                                ОписаниеОшибки);
					
				Иначе
					
					РезультатЭТ = Истина;
					
				КонецЕсли;
				
				Если РезультатЭТ Тогда
					
					// Подключение устройства ФР
					РезультатФР = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
					                                                                                ИдентификаторУстройстваФР,
					                                                                                ОписаниеОшибки);

					Если РезультатФР Или ИспользоватьБезПодключенияОборудования Тогда

						Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
						
							ВходныеПараметры  = Новый Массив();
							ВыходныеПараметры = Неопределено;

							ВходныеПараметры.Добавить(СуммаОперации);
							ВходныеПараметры.Добавить(НомерСсылкиОперации);
							ВходныеПараметры.Добавить(НомерЧекаЭТ);

							// Выполнение операции на ЭТ
							РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ,
							                                                          "AuthorizeVoid",
							                                                           ВходныеПараметры,
							                                                           ВыходныеПараметры);
							
							Если РезультатЭТ Тогда
								
								СтрокаСлипЧека = ВыходныеПараметры[0][1];
								Если Не ПустаяСтрока(СтрокаСлипЧека) Тогда
									глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", СтрокаСлипЧека);
								КонецЕсли;
								
								НомерКарты          = "";
								НомерСсылкиОперации = "";
								НомерЧекаЭТ         = "";
								
							Иначе
								
								ТекстОписаниеОшибки = ВыходныеПараметры[1];
								
							КонецЕсли;
							
						Иначе
							
							ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию отмены оплаты на эквайринговом терминале.'") + Символы.ПС;
							ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'")        + " "+ СуммаОперации         + Символы.ПС;
							ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер карты:'")           + " "+ НомерКарты            + Символы.ПС;
							ТекстВопроса = ТекстВопроса + НСтр("ru = 'Ссылочный номер:'")       + " "+ НомерСсылкиОперации   + Символы.ПС;
							ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер чека:'")            + " "+ НомерЧекаЭТ           + Символы.ПС;
							ТекстВопроса = ТекстВопроса + Символы.ПС;
							ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция отмены оплаты на эквайринговом терминале прошла успешно?'");
							
							РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
							
							РезультатЭТ = (РезультатВопроса = КодВозвратаДиалога.Да);
							
							Если РезультатЭТ Тогда
								СтрокаСлипЧека = НСтр("ru = 'Отменена оплата на сумму %1% %2%'");
								СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%1%", СуммаОперации);
								СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%2%", Объект.Валюта);
							Иначе
								СтрокаСлипЧека = "";
								ТекстОписаниеОшибки = НСтр("ru = 'Операция отменена'");
							КонецЕсли;
							
						КонецЕсли;
						
						Если Не РезультатЭТ Тогда
							
							ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
							|""%ОписаниеОшибки%"".
							|Отмена по карте не была произведена.'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения,
							                             "%ОписаниеОшибки%",
							                             ТекстОписаниеОшибки);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							
						Иначе
							
							Если Не ПустаяСтрока(СтрокаСлипЧека) И Не ИспользоватьБезПодключенияОборудования Тогда
								ВходныеПараметры  = Новый Массив();
								ВходныеПараметры.Добавить(СтрокаСлипЧека);
								ВыходныеПараметры = Неопределено;

								РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
								                                                          "PrintText",
								                                                          ВходныеПараметры,
								                                                          ВыходныеПараметры);
							КонецЕсли;
							
						КонецЕсли;

						Если РезультатЭТ И (Не РезультатФР И Не ИспользоватьБезПодключенияОборудования) Тогда
							ОписаниеОшибкиФР = ВыходныеПараметры[1];

							ТекстСообщения = НСтр("ru = 'При печати слип-чека возникла ошибка:
							|""%ОписаниеОшибки%"".
							|Операция по карте была отменена.'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения,
							                             "%ОписаниеОшибки%",
							                             ОписаниеОшибкиФР);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

						ИначеЕсли РезультатЭТ Тогда
							ТекущиеДанные.ОплатаОтменена = Истина;

						КонецЕсли;

						// Отключение устройства ФР
						МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
						                                                                 ИдентификаторУстройстваФР);
						
						Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
							// Отключение устройства ЭТ
							МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
							                                                                 ИдентификаторУстройстваЭТ);
						КонецЕсли;
					Иначе
						ТекстСообщения = НСтр("ru = 'При подключении фискального регистратора произошла ошибка:
						|""%ОписаниеОшибки%"".
						|Операция по карте не была выполнена.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
				Иначе
					ТекстСообщения = НСтр("ru = 'При подключении эквайрингового терминала произошла ошибка:
						|""%ОписаниеОшибки%"".
						|Операция по карте не была выполнена.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	Перем ТекущаяСтрока;
	
	ВесНоменклатуры = МенеджерОборудованияКлиент.ПолучитьДанныеИзВесов(ЭтаФорма, ТекущаяСтрока);
	
	Если ВесНоменклатуры <> Неопределено Тогда
		
		ТекущаяСтрока.КоличествоУпаковок = ВесНоменклатуры;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументе(Команда)
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("АдресВоВременномХранилище, ПревышениеКоличестваТоваровРазрешено, ОтклонениеЗапрещено", ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества(), Ложь, Объект.ОплатаПлатежнымиКартами.Количество() > 0);
	ВозвращаемыеПараметры = ОткрытьФормуМодально("ОбщаяФорма.ПроверкаЗаполненияДокументов", ПараметрыОткрытия);
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, ?(КэшированныеЗначения = Неопределено, ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения(), КэшированныеЗначения));
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ИзменятьКоличество = Не (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит"));
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	Если ИспользоватьАссортимент Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
 	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками,Объект);	

	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
 	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);	

	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если СтруктураДействий.МассивСтрокССериями.Количество() = 1
		И НоменклатураКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьФормуУказанияСерий",0.1,Истина);
		
	КонецЕсли;
	
	Если ИзменятьКоличество Тогда
		Объект.СкидкиРассчитаны = Ложь;
		ПересчитатьДокументНаКлиенте();
		РассчитатьИтоговыеПоказателиЧекаККМНаВозврат(ЭтаФорма);
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить()
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСсылкиНаОборудование()
	
	ФискальныйРегистратор = ?(ЗначениеЗаполнено(Объект.КассаККМ) И ЗначениеЗаполнено(Объект.КассаККМ.ПодключаемоеОборудование),
	                          Объект.КассаККМ.ПодключаемоеОборудование.Ссылка,
	                          Справочники.ПодключаемоеОборудование.ПустаяСсылка());
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		ЭквайринговыеТерминалы.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭквайринговыеТерминалы.Ссылка                                 КАК Ссылка,
		|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
		|	ЭквайринговыеТерминалы.ПодключаемоеОборудование               КАК ПодключаемоеОборудование,
		|	
		|	ЭквайринговыеТерминалы.Владелец.ВидыПлатежныхКарт.(
		|		Владелец.ВидыПлатежныхКарт.ВидПлатежнойКарты КАК ВидПлатежнойКарты
		|	) КАК ВидыПлатежныхКарт
		|	
		|ИЗ
		|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
		|ГДЕ
		|	ЭквайринговыеТерминалы.Касса = &КассаККМ
		|	И ((ЭквайринговыеТерминалы.ПодключаемоеОборудование <> ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
		|		И ЭквайринговыеТерминалы.ПодключаемоеОборудование.РабочееМесто = &РабочееМесто)
		|		ИЛИ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)
		|";
		
		Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
		Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Стр = Новый Структура;
			Стр.Вставить("Ссылка",                                 Выборка.Ссылка);
			Стр.Вставить("ПодключаемоеОборудование",               Выборка.ПодключаемоеОборудование);
			Стр.Вставить("ВидыПлатежныхКарт",                      Новый СписокЗначений);
			Стр.Вставить("ИспользоватьБезПодключенияОборудования", Выборка.ИспользоватьБезПодключенияОборудования);
			
			ВыборкаВидыКарт = Выборка.ВидыПлатежныхКарт.Выбрать();
			Пока ВыборкаВидыКарт.Следующий() Цикл
				Стр.ВидыПлатежныхКарт.Добавить(ВыборкаВидыКарт.ВидПлатежнойКарты);
			КонецЦикла;
			
			ЭквайринговыеТерминалы.Добавить(Стр);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Серии

&НаКлиенте
Процедура ОткрытьФормуУказанияСерий()
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = ПолучитьПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	
	ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтаФорма);
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий ()
	Элементы.ТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость        = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	Если Не ПараметрыФормыУказанияСерий.ТолькоПросмотр Тогда
		СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	КонецЕсли;
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества()
	
	ТабличнаяЧастьТовары = Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок");
	ТабличнаяЧастьТовары.Свернуть("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка", "КоличествоУпаковок");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличнаяЧастьТовары, УникальныйИдентификатор);
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, КэшированныеЗначения)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(ВозвращаемыеПараметры.Товары);
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаИсточник Из ТаблицаТовары Цикл
		
		Отбор = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			Если СтрокаИсточник.КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаИсточник.КоличествоУпаковок >= 0 Тогда
				
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + СтрокаИсточник.КоличествоУпаковок;
				СтрокаИсточник.КоличествоУпаковок = 0;
				
			Иначе
				
				КоличествоКСписанию = -СтрокаИсточник.КоличествоУпаковок;
				КоличествоВСтроке   = СтрокаТЧ.КоличествоУпаковок;
				
				Если КоличествоКСписанию > КоличествоВСтроке Тогда
					СтрокаИсточник.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
					СтрокаТЧ.КоличествоУпаковок       = 0;
				Иначе
					СтрокаИсточник.КоличествоУпаковок = 0;
					СтрокаТЧ.КоличествоУпаковок       = КоличествоВСтроке - КоличествоКСписанию;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаТЧ);
			Иначе
				
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
				СтруктураДействий.Вставить("ПересчитатьСумму");
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаИсточник);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
			Если ИспользоватьАссортимент Тогда
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
			Иначе
				СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
			КонецЕсли;
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
			СтруктураДействий.Вставить("ПересчитатьСумму");
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого СтрокаТЧ Из УдаляемыеСтроки Цикл
		Объект.Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	РассчитатьИтоговыеПоказателиЧекаККМНаВозврат(ЭтаФорма);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимТолькоПросмотрНаСервере()
	
	Элементы.ГруппаШапка.ТолькоПросмотр             = Истина;
	Элементы.Товары.ТолькоПросмотр                  = Истина;
	Элементы.ОплатаПлатежнымиКартами.ТолькоПросмотр = Истина;
	Элементы.ПробитьЧек.Доступность                            = Ложь;
	Элементы.ОплатаПлатежнымиКартамиОтменитьОплату.Доступность = Ложь;
	
	Элементы.ГруппаТорговоеОборудование.Доступность          = Ложь;
	Элементы.ТоварыПроверитьКоличествоВДокументе.Доступность = Ложь;
	
	Элементы.ТоварыУказатьСерии.Доступность     = Ложь;
	Элементы.ТоварыПоискПоШтрихкоду.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимТолькоПросмотрНаКлиенте()
	
	Элементы.ГруппаШапка.ТолькоПросмотр             = Истина;
	Элементы.Товары.ТолькоПросмотр                  = Истина;
	Элементы.ОплатаПлатежнымиКартами.ТолькоПросмотр = Истина;
	Элементы.ПробитьЧек.Доступность                            = Ложь;
	Элементы.ОплатаПлатежнымиКартамиОтменитьОплату.Доступность = Ложь;
	
	Элементы.ТоварыУказатьСерии.Доступность = Ложь;
	Элементы.ТоварыПоискПоШтрихкоду.Доступность     = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект.Товары, Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииСервер()
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЧекККМВозврат));
	
КонецПроцедуры

&НаСервере
Функция ПровестиДокумент() Экспорт
	
	ВыполненоУспешно = Ложь;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	Попытка
		
		// Если документ новый установим текущую дату
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
			ДокументОбъект.Дата = ТекущаяДата();
		КонецЕсли;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
		Модифицированность = Ложь;
		ВыполненоУспешно = Истина;
		
	Исключение
		ВыполненоУспешно = Ложь;
	КонецПопытки;
	
	Возврат ВыполненоУспешно;
	
КонецФункции

&НаКлиенте
Процедура ПробитьЧек()
	
	ОписаниеОшибки = "";
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ОплатаПлатежнымиКартами.Количество() = 0 ИЛИ ФинансыКлиент.ВозможнаПечатьЧека(ЭтаФорма) Тогда
		
		ИдентификаторУстройстваЭТ = Неопределено;
		ИдентификаторУстройстваФР = Неопределено;
		РезультатФР               = Истина;
		РезультатЭТ               = Истина;
		
		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			
			ИдентификаторУстройстваФР              = ПараметрыКассыККМ.ИдентификаторУстройства;
			ИспользоватьБезПодключенияОборудования = ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования;
			
			Если ЗначениеЗаполнено(ИдентификаторУстройстваФР) Или ИспользоватьБезПодключенияОборудования Тогда
				
				// Подключение устройства ФР
				РезультатФР = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                                ИдентификаторУстройстваФР,
				                                                                                ОписаниеОшибки);
				
				Если РезультатФР Или ИспользоватьБезПодключенияОборудования Тогда
					
					//Предварительно необходимо проверить и отменить безналичные оплаты
					РезультатПроведения = Истина;
					Если Объект.ОплатаПлатежнымиКартами.Количество() > 0 Тогда
						
						// Выбор устройства ЭТ
						Если ЭквайринговыеТерминалы.Количество() = 1 Тогда
							
							СтруктрураЭквайринговыйТерминал = ЭквайринговыеТерминалы[0].Значение;
							ИдентификаторУстройстваЭТ       = СтруктрураЭквайринговыйТерминал.ПодключаемоеОборудование;
							
						ИначеЕсли ЭквайринговыеТерминалы.Количество() > 1 Тогда
							
							ПараметрыФормы = Новый Структура;
							ПараметрыФормы.Вставить("СписокВыбора", Новый СписокЗначений);
							Для каждого Терминал Из ЭквайринговыеТерминалы Цикл
								ПараметрыФормы.СписокВыбора.Добавить(Терминал.Значение, Терминал.Значение.Ссылка);
							КонецЦикла;
							СтруктрураЭквайринговыйТерминал = ОткрытьФормуМодально("Документ.ЧекККМ.Форма.ВыборЭквайринговогоТерминала", ПараметрыФормы);
							
							Если СтруктрураЭквайринговыйТерминал <> Неопределено Тогда
								ИдентификаторУстройстваЭТ = СтруктрураЭквайринговыйТерминал.ПодключаемоеОборудование;
							Иначе
								ИдентификаторУстройстваЭТ = Неопределено;
							КонецЕсли;
							
						Иначе
							
							ИдентификаторУстройстваЭТ       = Неопределено;
							СтруктрураЭквайринговыйТерминал = Неопределено;
							
						КонецЕсли;
						
						Если ИдентификаторУстройстваЭТ <> Неопределено Тогда
							
							Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
								
								// Подключение устройства ЭТ
								РезультатЭТ = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
								                                                                                ИдентификаторУстройстваЭТ,
								                                                                                ОписаниеОшибки);
								
							Иначе
								
								РезультатЭТ = Истина;
								
							КонецЕсли;
							
							Если РезультатЭТ Тогда
								
								Для Каждого ОперацияОплаты Из Объект.ОплатаПлатежнымиКартами Цикл
									
									Если ОперацияОплаты.ОплатаОтменена Тогда
										Продолжить;
									КонецЕсли;
									
									СуммаОперации       = ОперацияОплаты.Сумма;
									НомерКарты          = ОперацияОплаты.НомерПлатежнойКарты;
									НомерСсылкиОперации = ОперацияОплаты.СсылочныйНомер;
									НомерЧекаЭТ         = ОперацияОплаты.НомерЧекаЭТ;
									СтрокаСлипЧека      = "";
									
									Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
										
										ВходныеПараметры  = Новый Массив();
										ВыходныеПараметры = Неопределено;
										
										ВходныеПараметры.Добавить(СуммаОперации);
										ВходныеПараметры.Добавить(НомерСсылкиОперации);
										ВходныеПараметры.Добавить(НомерЧекаЭТ);
										
										// Выполнение операции на ЭТ
										РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ,
										                                                          "AuthorizeVoid",
										                                                          ВходныеПараметры,
										                                                          ВыходныеПараметры);
										
										Если РезультатЭТ Тогда
											
											СтрокаСлипЧека      = ВыходныеПараметры[0][1];
											Если Не ПустаяСтрока(СтрокаСлипЧека) Тогда
												глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", СтрокаСлипЧека);
											КонецЕсли;
											
											НомерКарты          = "";
											НомерСсылкиОперации = "";
											НомерЧекаЭТ         = "";
											
										Иначе
											
											ТекстОписаниеОшибки = ВыходныеПараметры[1];
											
										КонецЕсли;
										
									Иначе
										
										ТекстВопроса = НСтр("ru = 'Требуется выполнить операцию отмены оплаты на эквайринговом терминале.'") + Символы.ПС;
										ТекстВопроса = ТекстВопроса + НСтр("ru = 'Сумма операции:'")        + " "+ СуммаОперации         + Символы.ПС;
										ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер карты:'")           + " "+ НомерКарты            + Символы.ПС;
										ТекстВопроса = ТекстВопроса + НСтр("ru = 'Ссылочный номер:'")       + " "+ НомерСсылкиОперации   + Символы.ПС;
										ТекстВопроса = ТекстВопроса + НСтр("ru = 'Номер чека:'")            + " "+ НомерЧекаЭТ           + Символы.ПС;
										ТекстВопроса = ТекстВопроса + Символы.ПС;
										ТекстВопроса = ТекстВопроса + НСтр("ru = 'Операция отмены оплаты на эквайринговом терминале прошла успешно?'");
										
										РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
										
										РезультатЭТ = (РезультатВопроса = КодВозвратаДиалога.Да);
										
										Если РезультатЭТ Тогда
											СтрокаСлипЧека = НСтр("ru = 'Отменена оплата на сумму %1% %2%'");
											СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%1%", СуммаОперации);
											СтрокаСлипЧека = СтрЗаменить(СтрокаСлипЧека, "%2%", Объект.Валюта);
										Иначе
											СтрокаСлипЧека = "";
											ТекстОписаниеОшибки = НСтр("ru = 'Операция отменена'");
										КонецЕсли;
										
									КонецЕсли;
									
									Если Не РезультатЭТ Тогда
										
										ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
										                            |""%ОписаниеОшибки%"".
										                            |Отмена по карте не была произведена.'");
										ТекстСообщения = СтрЗаменить(ТекстСообщения,
										                            "%ОписаниеОшибки%",
										                            ТекстОписаниеОшибки);
										ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
										
									Иначе
										
										Если Не ПустаяСтрока(СтрокаСлипЧека) И Не ИспользоватьБезПодключенияОборудования Тогда
											
											ВходныеПараметры  = Новый Массив();
											ВходныеПараметры.Добавить(СтрокаСлипЧека);
											ВыходныеПараметры = Неопределено;
											
											РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
											                                                          "PrintText",
											                                                          ВходныеПараметры,
											                                                          ВыходныеПараметры);
											
										КонецЕсли;
										
									КонецЕсли;
									
									Если РезультатЭТ И (Не РезультатФР И Не ИспользоватьБезПодключенияОборудования) Тогда
										
										ОписаниеОшибкиФР = ВыходныеПараметры[1];
										
										ТекстСообщения = НСтр("ru = 'При печати слип-чека возникла ошибка:
										|""%ОписаниеОшибки%"".
										|Операция по карте была отменена.'");
										ТекстСообщения = СтрЗаменить(ТекстСообщения,
										                             "%ОписаниеОшибки%",
										                             ОписаниеОшибкиФР);
										ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
										
									ИначеЕсли РезультатЭТ Тогда
										
										ОперацияОплаты.ОплатаОтменена = Истина;
										
										// Запишем документ для предотвращения потери данных
										Если Объект.ОплатаПлатежнымиКартами.Количество() <> 0 Тогда
											РезультатПроведения = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
											Если Не РезультатПроведения Тогда
												Прервать;
											КонецЕсли;
										КонецЕсли;
										
									КонецЕсли;
									
								КонецЦикла;
								
								Если Не СтруктрураЭквайринговыйТерминал.ИспользоватьБезПодключенияОборудования Тогда
									
									// Отключение устройства ЭТ
									МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
									                                                                 ИдентификаторУстройстваЭТ);
									
								КонецЕсли;
								
							Иначе
								
								ТекстСообщения = НСтр("ru = 'При подключении эквайрингового терминала произошла ошибка:
									|""%ОписаниеОшибки%"".
									|Операция по карте не была выполнена.'");
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если РезультатЭТ И РезультатПроведения Тогда
						
						Если Не ИспользоватьБезПодключенияОборудования Тогда
							
							// Готовим данные
							ВходныеПараметры  = Новый Массив;
							ВыходныеПараметры = Неопределено;
							
							НомерСекции = 1;
							
							// Подготовка таблицы товаров
							ТаблицаТоваров = Новый Массив();
							
							Для Каждого СтрокаТЧ Из Объект.Товары Цикл
								СтавкаНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтрокаТЧ.СтавкаНДС);
								
								СтрокаТаблицыТоваров = Новый СписокЗначений();
								СтрокаТаблицыТоваров.Добавить(Строка(СтрокаТЧ.Номенклатура));
								                                                            //  1 - Наименование
								СтрокаТаблицыТоваров.Добавить("");                          //  2 - Штрихкод
								СтрокаТаблицыТоваров.Добавить("");                          //  3 - Артикул
								СтрокаТаблицыТоваров.Добавить(НомерСекции);                 //  4 - Номер отдела
								СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.Цена);               //  5 - Цена за позицию без скидки
								СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.КоличествоУпаковок); //  6 - Количество
								СтрокаТаблицыТоваров.Добавить("");                          //  7 - Наименование скидки/наценки
								СтрокаТаблицыТоваров.Добавить(0);                           //  8 - Сумма скидки/наценки
								СтрокаТаблицыТоваров.Добавить(0);                           //  9 - Процент скидки/наценки
								СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.Сумма);              // 10 - Сумма позиции со скидкой
								СтрокаТаблицыТоваров.Добавить(0);                           // 11 - Номер налога (1)
								СтрокаТаблицыТоваров.Добавить(СтрокаТЧ.СуммаНДС);           // 12 - Сумма налога (1)
								СтрокаТаблицыТоваров.Добавить(СтавкаНДС * 100);             // 13 - Процент налога (1)
								СтрокаТаблицыТоваров.Добавить(0);                           // 14 - Номер налога (2)
								СтрокаТаблицыТоваров.Добавить(0);                           // 15 - Сумма налога (2)
								СтрокаТаблицыТоваров.Добавить(0);                           // 16 - Процент налога (2)
								СтрокаТаблицыТоваров.Добавить("");                          // 17 - Наименование секции форматирования товарной строки
								
								ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);
							КонецЦикла;
							
							// Подготовка таблицы оплат
							ТаблицаОплат = Новый Массив();
							
							// Наличные
							СтрокаОплаты = Новый СписокЗначений();
							СтрокаОплаты.Добавить(0);
							СтрокаОплаты.Добавить(СуммаДокумента - Объект.ОплатаПлатежнымиКартами.Итог("Сумма"));
							СтрокаОплаты.Добавить("Наличная оплата");
							СтрокаОплаты.Добавить("");
							ТаблицаОплат.Добавить(СтрокаОплаты);
							// Безналичные
							СтрокаОплаты = Новый СписокЗначений();
							СтрокаОплаты.Добавить(1);
							СтрокаОплаты.Добавить(Объект.ОплатаПлатежнымиКартами.Итог("Сумма"));
							СтрокаОплаты.Добавить("Безналичная оплата");
							СтрокаОплаты.Добавить("");
							ТаблицаОплат.Добавить(СтрокаОплаты);
							
							// Подготовка таблицы общих параметров
							ОбщиеПараметры = Новый Массив();
							ОбщиеПараметры.Добавить(1);                      //  1 - Тип чека
							ОбщиеПараметры.Добавить(Истина);                 //  2 - Признак фискального чека
							ОбщиеПараметры.Добавить(Неопределено);           //  3 - Печать на подкладном документе
							ОбщиеПараметры.Добавить(СуммаДокумента);         //  4 - Сумма по чеку без скидок/наценок
							ОбщиеПараметры.Добавить(СуммаДокумента);         //  5 - Сумма по чеку с учетом всех скидок/наценок
							ОбщиеПараметры.Добавить("");                     //  6 - Номер дисконтной карты
							ОбщиеПараметры.Добавить("");                     //  7 - Текст шапки
							ОбщиеПараметры.Добавить("");                     //  8 - Текст подвала
							ОбщиеПараметры.Добавить(0);                      //  9 - Номер смены (для копии чека)
							ОбщиеПараметры.Добавить(0);                      // 10 - Номер чека (для копии чека)
							ОбщиеПараметры.Добавить(0);                      // 11 - Номер документа (для копии чека)
							ОбщиеПараметры.Добавить(0);                      // 12 - Дата документа (для копии чека)
							ОбщиеПараметры.Добавить("");                     // 13 - Имя кассира (для копии чека)
							ОбщиеПараметры.Добавить("");                     // 14 - Пароль кассира
							ОбщиеПараметры.Добавить(0);                      // 15 - Номер шаблона
							ОбщиеПараметры.Добавить("");                     // 16 - Наименование секции форматирования шапки
							ОбщиеПараметры.Добавить("");                     // 17 - Наименование секции форматирования подвала
							
							ВходныеПараметры.Добавить(ТаблицаТоваров);
							ВходныеПараметры.Добавить(ТаблицаОплат);
							ВходныеПараметры.Добавить(ОбщиеПараметры);
							
							// Печатаем чек.
							РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
							                                                        "PrintReceipt",
							                                                        ВходныеПараметры,
							                                                        ВыходныеПараметры);
							
						КонецЕсли;
						
						Если РезультатФР Или ИспользоватьБезПодключенияОборудования Тогда
							
							// Установить полученное значение номера чека реквизиту документа.
							Если Не ИспользоватьБезПодключенияОборудования Тогда
								Объект.НомерЧекаККМ = ВыходныеПараметры[1];
							КонецЕсли;
							
							Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
							Объект.Дата = ТекущаяДата();
							Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
								Объект.НомерЧекаККМ = 1;
							КонецЕсли;
							
							Модифицированность = Истина;
							
							РезультатПроведения = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
							Если РезультатПроведения = Истина Тогда
								УстановитьРежимТолькоПросмотрНаКлиенте();
							КонецЕсли;
							
						Иначе
							ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
							                            |Чек не напечатан на фискальном регистраторе.
							                            |Дополнительное описание:
							                            |%ДополнительноеОписание%'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения,
							                             "%ДополнительноеОписание%",
							                             ВыходныеПараметры[1]);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						КонецЕсли;
					КонецЕсли;
					
					// Отключаем ФР
					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройстваФР);
				Иначе
					
					ТекстСообщения = НСтр("ru = 'При подключении фискального регистратора произошла ошибка:
					|""%ОписаниеОшибки%"".
					|Операция по карте не была выполнена.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекВыполнить()
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если Объект.ПометкаУдаления Тогда
		
		ТекстОшибки = НСтр("ru='Документ помечен на удаление'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Объект.Дата = ТекущаяДата();
	
	Если НЕ Отказ И ПроверитьЗаполнение() Тогда
	
		ПробитьЧек();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиЧекаККМНаВозврат(Форма)
	
	Форма.СуммаВсего = Форма.Объект.Товары.Итог("Сумма");
	
	Если Не Форма.Объект.ЦенаВключаетНДС Тогда
		Форма.СуммаВсего = Форма.СуммаВсего + Форма.Объект.Товары.Итог("СуммаНДС");
	КонецЕсли;
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС")
	 ИЛИ Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД") Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецФункции

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры


