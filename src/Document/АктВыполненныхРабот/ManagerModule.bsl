#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - Ссылка на документа
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа
//
Функция ПолучитьРеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.АктПоЗаказам КАК АктПоЗаказам,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Организация = Выборка.Организация;
		Партнер = Выборка.Партнер;
		Контрагент = Выборка.Контрагент;
		Договор = Выборка.Договор;
		ПорядокРасчетов = Выборка.ПорядокРасчетов;
		ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
		ПоЗаказу = Выборка.АктПоЗаказам;
		СуммаДокумента = Выборка.СуммаДокумента;
		СуммаВзаиморасчетов = ?(Выборка.Проведен, Выборка.СуммаВзаиморасчетов, 0);
		
	Иначе
		
		Организация = Справочники.Организации.ПустаяСсылка();
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		ПоЗаказу = Ложь;
		СуммаДокумента = 0;
		СуммаВзаиморасчетов = 0;
		
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Организация, Партнер, Контрагент, Договор, ПорядокРасчетов, ВалютаВзаиморасчетов, ПоЗаказу, СуммаДокумента, СуммаВзаиморасчетов, ХозяйственнаяОперация",
		Организация,
		Партнер,
		Контрагент,
		Договор,
		ПорядокРасчетов,
		ВалютаВзаиморасчетов,
		ПоЗаказу,
		СуммаДокумента,
		СуммаВзаиморасчетов,
		Перечисления.ХозяйственныеОперации.РеализацияКлиенту
	);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Возвращает массив имен ролей с правом "Добавление" для данного документа
//
// Возвращаемое значение:
//	Массив - Массив с именами ролей
//
Функция ИменаРолейСПравомДобавления() Экспорт
	
	МассивРолей = Новый Массив;
	МассивРолей.Добавить("ПолныеПрава");
	МассивРолей.Добавить("ДобавлениеИзменениеАктовВыполненныхРабот");
	Возврат МассивРолей;
	
КонецФункции

// Осуществляет вычисление текущего состояния акта без заказа
//
// Параметры:
//	АктВыполненныхРабот     - ДокументСсылка.АктВыполненныхРабот - Документ, состояние которого необходимо вычислить 
//	Договор                 - СправочникСсылка.ДоговорыКонтрагентов    - Договор с клиентом
//	СостояниеРасчетов       - УправляемаяФорма - Форма, в реквизиты которой будет помещено рассчитанное состояние
//
Процедура РассчитатьСостояние(Знач АктВыполненныхРабот,
	                          Знач Договор,
	                          СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	
	Если  ЗначениеЗаполнено(АктВыполненныхРабот) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
			|ВЫБРАТЬ 
			|// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументАктВыполненныхРабот.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументАктВыполненныхРабот.Проведен И
			|		ДокументАктВыполненныхРабот.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ДокументАктВыполненныхРабот.СуммаВзаиморасчетов - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаОплаты,
			|// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументАктВыполненныхРабот.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументАктВыполненныхРабот.Проведен И
			|		ДокументАктВыполненныхРабот.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ ((ДокументАктВыполненныхРабот.СуммаВзаиморасчетов - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0)) * 100 / ДокументАктВыполненныхРабот.СуммаВзаиморасчетов КАК ЧИСЛО(15, 0))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентОплаты,
			|// СУММА ПРОСРОЧЕННОЙ ОПЛАТЫ ////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументАктВыполненныхРабот.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументАктВыполненныхРабот.Проведен И
			|		ДокументАктВыполненныхРабот.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаПросроченнойОплаты,
			|// СУММА ОТГРУЗКИ ///////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументАктВыполненныхРабот.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументАктВыполненныхРабот.Проведен И
			|		ДокументАктВыполненныхРабот.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ДокументАктВыполненныхРабот.СуммаВзаиморасчетов + ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОтгрузкеОстаток, 0)
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаОтгрузки,
			|// ПРОЦЕНТ ОТГРУЗКИ /////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументАктВыполненныхРабот.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументАктВыполненныхРабот.Проведен И
			|		ДокументАктВыполненныхРабот.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ ((ДокументАктВыполненныхРабот.СуммаВзаиморасчетов + ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОтгрузкеОстаток, 0)) * 100 / ДокументАктВыполненныхРабот.СуммаВзаиморасчетов КАК ЧИСЛО(15, 0))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентОтгрузки,
			|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументАктВыполненныхРабот.Проведен И
			|		(ДокументАктВыполненныхРабот.СуммаВзаиморасчетов > 0 ИЛИ
			|		ДокументАктВыполненныхРабот.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов))
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаДолга,
			|ВЫБОР
			|	КОГДА
			|		ДокументАктВыполненныхРабот.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументАктВыполненныхРабот.Проведен И
			|		ДокументАктВыполненныхРабот.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ВЫБОР
			|			КОГДА
			|				ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) > 0
			|			ТОГДА
			|				ВЫРАЗИТЬ ((ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) * 100 / ДокументАктВыполненныхРабот.СуммаВзаиморасчетов) КАК ЧИСЛО(15, 0))
			|			ИНАЧЕ
			|				ВЫРАЗИТЬ ((ЕСТЬNULL(-РасчетыСКлиентамиОстатки.СуммаОстаток, 0) * 100 / ДокументАктВыполненныхРабот.СуммаВзаиморасчетов) КАК ЧИСЛО(15, 0))
			|		КОНЕЦ
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентДолга
			|ИЗ
			|	Документ.АктВыполненныхРабот КАК ДокументАктВыполненныхРабот
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента = &РасчетныйДокумент) КАК РасчетыСКлиентамиОстатки
			|ПО
			|	Истина
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ЗаказКлиента = &РасчетныйДокумент) КАК РасчетыСКлиентамиОстаткиНаДатуАктуальности
			|ПО
			|	Истина
			|ГДЕ
			|	ДокументАктВыполненныхРабот.Ссылка = &АктВыполненныхРабот
			|
			|"
		);
		
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктВыполненныхРабот, "ПорядокРасчетов");
		
		Запрос.УстановитьПараметр("АктВыполненныхРабот", АктВыполненныхРабот);
		Запрос.УстановитьПараметр("РасчетныйДокумент", ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов,
			Договор,
			АктВыполненныхРабот)
		);
		Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДата()));
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет инициализацию структуры состояния расчетов
Функция СтруктураСостоянияРасчетов() Экспорт
	Возврат
		Новый Структура(
			"СуммаОплаты, СуммаОтгрузки, ПроцентОплаты, ПроцентОтгрузки, СуммаПросроченнойОплаты, СуммаДолга, ПроцентДолга",
			0., 0., 0., 0., 0., 0.,0.);
КонецФункции

// Заполняет таблицы услуг и скидок по данным отбора или массиву заказов
//
// Параметры:
//	ДанныеОтбора            - Структура - поля, по которым будут отобраны остатки заказов для заполнения документа
//	Услуги                  - ДанныеФормыКоллекция - таблица услуг, в которую будут помещены остатки заказов
//	СкидкиНаценки           - ДанныеФормыКоллекция - таблица скидок, в которую будут помещены скидки по заказам
//	МассивЗаказов           - Массив - заказы, по которым будут отобраны остатки
//	ЗаполнятьНаДатуОтгрузки - Булево - указывает на необходимость заполнения по остаткам на дату, переданную в качестве поля в ДанныеОтбора
//
Процедура ЗаполнитьПоОстаткамЗаказов(ДанныеОтбора,
	                                 Услуги,
	                                 СкидкиНаценки,
	                                 МассивЗаказов = Неопределено,
	                                 ЗаполнятьНаДатуОказанияУслуг=Ложь) Экспорт
	
	// Данные по остаткам услуг заказа
	ВыборкаУслуги = ПолучитьРезультатЗапросаПоОстаткамЗаказов(
		ДанныеОтбора,
		?(ЗаполнятьНаДатуОказанияУслуг, ДанныеОтбора.Дата, Неопределено),
		МассивЗаказов
	).Выбрать();
	
	МассивЗаказовКлиентов = Новый Массив();
	
	Пока ВыборкаУслуги.Следующий() Цикл
		Если МассивЗаказовКлиентов.Найти(ВыборкаУслуги.ЗаказКлиента) = Неопределено Тогда
			МассивЗаказовКлиентов.Добавить(ВыборкаУслуги.ЗаказКлиента);
		КонецЕсли;
	КонецЦикла;
	
	// Получение таблицы скидок/наценок
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК ЗаказКлиента,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЗаказКлиента.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В (&МассивЗаказовКлиентов)
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК ЗаказКлиента,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В (&МассивЗаказовКлиентов)
	|";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивЗаказовКлиентов", МассивЗаказовКлиентов);
	СкидкиНаценкиЗаказа = Запрос.Выполнить().Выгрузить();
	
	// Очистка таблицы скидок/наценок текущего объекта
	СкидкиНаценки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЗаказовКлиентов", МассивЗаказовКлиентов);
	Запрос.УстановитьПараметр("ВалютаДокумента",       ДанныеОтбора.Валюта);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ) КАК Дата,
	|	ТаблицаЗаказов.Ссылка                    КАК ЗаказКлиента,
	|	ТаблицаЗаказов.Валюта                    КАК Валюта,
	|	ТаблицаЗаказов.ЦенаВключаетНДС           КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА
	|			ТаблицаЗаказов.Валюта <> &ВалютаДокумента
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ПересчитатьВВалютуДокумента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ТаблицаЗаказов
	|ГДЕ
	|	ТаблицаЗаказов.Ссылка В (&МассивЗаказовКлиентов)
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ) КАК Дата,
	|	ТаблицаЗаказов.Валюта                    КАК Валюта
	|ИЗ
	|	Документ.ЗаказКлиента КАК ТаблицаЗаказов
	|ГДЕ
	|	ТаблицаЗаказов.Ссылка В (&МассивЗаказовКлиентов)
	|	И ТаблицаЗаказов.Валюта <> &ВалютаДокумента
	|
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	РеквизитыЗаказов = РезультатЗапроса[0].Выбрать();
	
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата",      Новый ОписаниеТипов("Дата"));
	ТаблицаКурсовВалют.Колонки.Добавить("Курс",      Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число"));
	
	Выборка = РезультатЗапроса[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаКурсовВалют.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		КурсыВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата);
		НоваяСтрока.Курс = КурсыВалюты.Курс;
		НоваяСтрока.Кратность = КурсыВалюты.Кратность;
		
	КонецЦикла;
	
	Если ТаблицаКурсовВалют.Количество() > 0 Тогда
		СтруктураКурсовНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеОтбора.Валюта, ТекущаяДата());
	КонецЕсли;
	
	ВыборкаУслуги.Сбросить();
	Пока ВыборкаУслуги.Следующий() Цикл
		
		ПересчитатьСуммы = (ВыборкаУслуги.Количество <> ВыборкаУслуги.КоличествоВЗаказе);
		
		ИсключитьСвойства = Неопределено;
		Если ПересчитатьСуммы Тогда
			// Если необходимой пересчитать суммы, то перечисленные в реквизиты будут пересчитаны на основе суммы взаиморасчетов
			ИсключитьСвойства = "Сумма, СуммаНДС, СуммаАвтоматическойСкидки, СуммаРучнойСкидки";
		КонецЕсли;
		
		СтрокаТаб = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаб, ВыборкаУслуги, , ИсключитьСвойства);
		
		Если ПересчитатьСуммы Тогда
			СтрокаТаб.СуммаСНДС = СтрокаТаб.СуммаВзаиморасчетов;
		КонецЕсли;
		
		СтрокаТаб.Количество = ВыборкаУслуги.Количество;
		
		РеквизитыЗаказов.Сбросить();
		ЗаказНайден = РеквизитыЗаказов.НайтиСледующий(СтрокаТаб.ЗаказКлиента, "ЗаказКлиента");
		
		ПараметрыОтбора = Новый Структура("Валюта,Дата", РеквизитыЗаказов.Валюта, РеквизитыЗаказов.Дата);
		КурсВалюты = ТаблицаКурсовВалют.НайтиСтроки(ПараметрыОтбора);
		
		Если ЗаказНайден И РеквизитыЗаказов.ПересчитатьВВалютуДокумента Тогда
			
			Если КурсВалюты.Количество() = 1 Тогда
			
				СтрокаТаб.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТаб.Цена,
					РеквизитыЗаказов.Валюта, ДанныеОтбора.Валюта,
					КурсВалюты[0].Курс,СтруктураКурсовНовойВалюты.Курс,
					КурсВалюты[0].Кратность,СтруктураКурсовНовойВалюты.Кратность
				);
				СтрокаТаб.СуммаСНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТаб.СуммаСНДС,
					РеквизитыЗаказов.Валюта, ДанныеОтбора.Валюта,
					КурсВалюты[0].Курс,СтруктураКурсовНовойВалюты.Курс,
					КурсВалюты[0].Кратность,СтруктураКурсовНовойВалюты.Кратность
				);
				ПересчитатьСуммы = Истина;
			КонецЕсли;
			
		КонецЕсли;

		КоэффициентПересчетаСкидки = ?(ПересчитатьСуммы, СтрокаТаб.Количество / ВыборкаУслуги.КоличествоВЗаказе, 1);
		Если КоэффициентПересчетаСкидки <> 1 Тогда
			СтрокаТаб.СуммаАвтоматическойСкидки = ОКР(ВыборкаУслуги.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки,2);
			СтрокаТаб.СуммаРучнойСкидки = ОКР(ВыборкаУслуги.СуммаРучнойСкидки * КоэффициентПересчетаСкидки,2);
		КонецЕсли;
		
		Если ПересчитатьСуммы Тогда
			Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(СтрокаТаб, РеквизитыЗаказов.ЦенаВключаетНДС, Ложь, Ложь, РеквизитыЗаказов.ПересчитатьВВалютуДокумента);
			Если ЗаказНайден И РеквизитыЗаказов.ПересчитатьВВалютуДокумента И КурсВалюты.Количество() = 1 Тогда
				СтрокаТаб.СуммаАвтоматическойСкидки = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТаб.СуммаАвтоматическойСкидки,
					РеквизитыЗаказов.Валюта, ДанныеОтбора.Валюта,
					КурсВалюты[0].Курс,СтруктураКурсовНовойВалюты.Курс,
					КурсВалюты[0].Кратность,СтруктураКурсовНовойВалюты.Кратность
				);
				СтрокаТаб.СуммаРучнойСкидки = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
					СтрокаТаб.СуммаРучнойСкидки,
					РеквизитыЗаказов.Валюта, ДанныеОтбора.Валюта,
					КурсВалюты[0].Курс,СтруктураКурсовНовойВалюты.Курс,
					КурсВалюты[0].Кратность,СтруктураКурсовНовойВалюты.Кратность
				);
			КонецЕсли;
		КонецЕсли;
		
		// Формирование табличной части скидок
		СуммаКРаспределению = СтрокаТаб.СуммаАвтоматическойСкидки;
		
		Если СтрокаТаб.КлючСвязи <> 0 Тогда
			Для Каждого СтрокаСкидкиЗаказа ИЗ СкидкиНаценкиЗаказа.НайтиСтроки(Новый Структура("ЗаказКлиента,КлючСвязи", СтрокаТаб.ЗаказКлиента, СтрокаТаб.КлючСвязи)) Цикл
				
				СтрокаСкидки = СкидкиНаценки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
				СтрокаСкидки.Сумма = КоэффициентПересчетаСкидки * СтрокаСкидки.Сумма;
				
				Если ЗаказНайден И РеквизитыЗаказов.ПересчитатьВВалютуДокумента И КурсВалюты.Количество() > 0 Тогда
					СтрокаСкидки.Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
						СтрокаСкидки.Сумма,
						РеквизитыЗаказов.Валюта, ДанныеОтбора.Валюта,
						КурсВалюты[0].Курс, СтруктураКурсовНовойВалюты.Курс,
						КурсВалюты[0].Кратность, СтруктураКурсовНовойВалюты.Кратность
					);
					СуммаКРаспределению = СуммаКРаспределению - СтрокаСкидки.Сумма;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Если ЗаказНайден И РеквизитыЗаказов.ПересчитатьВВалютуДокумента И СуммаКРаспределению <> 0 Тогда
			СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + СуммаКРаспределению;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
	|	ДанныеДокумента.ЗаказКлиента КАК ЗаказКлиента,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Соглашение КАК Соглашение,
	|	ДанныеДокумента.АктПоЗаказам КАК АктПоЗаказам,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплаты,
	|	ДанныеДокумента.Договор КАК Договор,
	|	
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговорам,
	|	
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоНакладным,
	|	
	|	ДанныеДокумента.Договор.ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
	|	ДанныеДокумента.НалогообложениеНДС КАК НалогообложениеНДС
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();

	ИнициализироватьКлючиАналитикиНоменклатуры(Реквизиты);
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Реквизиты.Валюта, Реквизиты.ВалютаВзаиморасчетов, Реквизиты.Период);
	
	Запрос.УстановитьПараметр("Период",                                   Реквизиты.Период);
	Запрос.УстановитьПараметр("Валюта",                                   Реквизиты.Валюта);
	Запрос.УстановитьПараметр("ДатаПлатежа",                              Реквизиты.ДатаПлатежа);
	Запрос.УстановитьПараметр("Организация",                              Реквизиты.Организация);
	Запрос.УстановитьПараметр("Партнер",                                  Реквизиты.Партнер);
	Запрос.УстановитьПараметр("Контрагент",                               Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ЗаказКлиента",                             Реквизиты.ЗаказКлиента);
	Запрос.УстановитьПараметр("РасчетыПоДоговорам",                       Реквизиты.РасчетыПоДоговорам);
	Запрос.УстановитьПараметр("РасчетыПоНакладным",                       Реквизиты.РасчетыПоНакладным);
	Запрос.УстановитьПараметр("Договор",                                  Реквизиты.Договор);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",                          ?(Реквизиты.ЦенаВключаетНДС, 0, 1));
	Запрос.УстановитьПараметр("АктПоЗаказам",                             Реквизиты.АктПоЗаказам);
	Запрос.УстановитьПараметр("Подразделение",                            Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",                     Реквизиты.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("Соглашение",                               Реквизиты.Соглашение);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",                РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты));
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУПР",           Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл",          Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуВзаиморасчетов",Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов);
	Запрос.УстановитьПараметр("ФормаОплаты",                              Реквизиты.ФормаОплаты);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",                    Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	Запрос.УстановитьПараметр("ДопустимаяСуммаЗадолженности",             Реквизиты.ДопустимаяСуммаЗадолженности);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",           Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("НалогообложениеНДС",                       Реквизиты.НалогообложениеНДС);	

	Запрос.Текст = 
	"
	// 2 ТаблицаЗаказыКлиентов.
	|ВЫБРАТЬ
	|	ТаблицаУслуги.НомерСтроки               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Период 			                    КАК Период,
	|	ТаблицаУслуги.ЗаказКлиента              КАК ЗаказКлиента,
	|	ТаблицаУслуги.Номенклатура              КАК Номенклатура,
	|	ТаблицаУслуги.Характеристика            КАК Характеристика,
	|	ТаблицаУслуги.КодСтроки                 КАК КодСтроки,
	|	ТаблицаУслуги.Количество                КАК Заказано,
	|	ТаблицаУслуги.Количество                КАК КОформлению,
	|	ТаблицаУслуги.СуммаВзаиморасчетов       КАК Сумма
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка И &АктПоЗаказам
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;";
	Запрос.Текст = Запрос.Текст
		+ ТекстЗапросаВтАналитика()
		+ ТекстЗапросаТаблицаСебестоимостьТоваров()
		+ ТекстЗапросаТаблицаВыручкаИСебестоимостьПродаж()
		+ ТекстЗапросаТаблицаРасчетыСКлиентами()
		+ ТекстЗапросаТаблицаРасчетыСКлиентамиПоследовательность()
		+ ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл()
		+ ТекстЗапросаТаблицаНДССостояниеРеализации0()
		+ ТекстЗапросаТаблицаНДСЗаписиКнигиПродаж()
		+ ТекстЗапросаТаблицаПроизводственныеЗатратыПоследовательность()
		+ ТекстЗапросаТаблицаПроизводственныеЗатраты()
		;
		
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	
	ТаблицыДляДвижений.Вставить("ТаблицаЗаказыКлиентов",                      			Результат[0].Выгрузить());
	// МассивРезультатов[1] - ВтАналитика
	ТаблицыДляДвижений.Вставить("ТаблицаСебестоимостьТоваров",                			Результат[2].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаВыручкаИСебестоимостьПродаж",         			Результат[3].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСКлиентами",                   			Результат[4].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСКлиентамиПоследовательность", 			Результат[5].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаСуммыДокументовВВалютеРегл",          			Результат[6].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаНДССостояниеРеализации0", 			  			Результат[7].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаНДСЗаписиКнигиПродаж",	 			  			Результат[8].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРасчетЗатратВПроизводствеПоследовательность",	Результат[9].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаПроизводственныеЗатраты",	 			  		Результат[10].Выгрузить());

    
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиНоменклатуры(Реквизиты)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
	|	ТаблицаУслуги.Характеристика КАК Характеристика
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТаблицаУслуги.Номенклатура = Аналитика.Номенклатура
	|		И ТаблицаУслуги.Характеристика = Аналитика.Характеристика
	|		И ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) = Аналитика.Склад
	|ГДЕ
	|	Аналитика.Номенклатура ЕСТЬ NULL 
	|	И ТаблицаУслуги.Ссылка = &Ссылка
	|	И ТаблицаУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Подразделение КАК Склад,
	|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
	|	ТаблицаУслуги.Характеристика КАК Характеристика
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		ТаблицаУслуги.Номенклатура = Аналитика.Номенклатура
	|		И ТаблицаУслуги.Характеристика = Аналитика.Характеристика
	|		И &Подразделение = Аналитика.Склад
	|ГДЕ
	|	Аналитика.Номенклатура ЕСТЬ NULL 
	|	И ТаблицаУслуги.Ссылка = &Ссылка
	|	И ТаблицаУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|");
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка)
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаВтАналитика()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналитикаНоменклатуры.КлючАналитики КАК АналитикаНоменклатуры,
	|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
	|	ТаблицаУслуги.Характеристика КАК Характеристика
	|
	|ПОМЕСТИТЬ ВтАналитика
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|	ПО
	|		ТаблицаУслуги.Номенклатура = АналитикаНоменклатуры.Номенклатура
	|		И ТаблицаУслуги.Характеристика = АналитикаНоменклатуры.Характеристика
	|		И ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) = АналитикаНоменклатуры.Склад
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка
	|	И ТаблицаУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналитикаНоменклатуры.КлючАналитики КАК АналитикаНоменклатуры,
	|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
	|	ТаблицаУслуги.Характеристика КАК Характеристика
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|	ПО
	|		ТаблицаУслуги.Номенклатура = АналитикаНоменклатуры.Номенклатура
	|		И ТаблицаУслуги.Характеристика = АналитикаНоменклатуры.Характеристика
	|		И &Подразделение = АналитикаНоменклатуры.Склад
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка
	|	И ТаблицаУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров()

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаУслуги.НомерСтроки КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ВтАналитика.АналитикаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|	НЕОПРЕДЕЛЕНО КАК ВидЗапасов,
	|	ТаблицаУслуги.Количество КАК Количество,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Неопределено КАК КорРазделУчета,
	|	Неопределено КАК КорВидЗапасов,
	|	Неопределено КАК КорАналитикаУчетаНоменклатуры,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	&Подразделение КАК Подразделение,
	|
	|	ВЫБОР КОГДА &АктПоЗаказам ТОГДА
	|		ТаблицаУслуги.ЗаказКлиента
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ КАК ЗаказКлиента
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтАналитика КАК ВтАналитика
	|	ПО
	|		ТаблицаУслуги.Номенклатура = ВтАналитика.Номенклатура
	|		И ТаблицаУслуги.Характеристика = ВтАналитика.Характеристика
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка
	|	И ТаблицаУслуги.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиДокумента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВыручкаИСебестоимостьПродаж()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаУслуги.НомерСтроки         КАК НомерСтроки,
	|	&Период                           КАК Период,
	|	&Подразделение                    КАК Подразделение,
	|	ВтАналитика.АналитикаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	&АналитикаУчетаПоПартнерам        КАК АналитикаУчетаПоПартнерам,
	|	ВЫБОР
	|		КОГДА &АктПоЗаказам
	|			ТОГДА ТаблицаУслуги.ЗаказКлиента
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ КАК ЗаказКлиента,
	|	&ХозяйственнаяОперация                        КАК ХозяйственнаяОперация,
	|	&НалогообложениеНДС                           КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)     КАК ТипЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КАК ВидЗапасов,
	|	0                                             КАК Себестоимость,
	|	ТаблицаУслуги.Количество                      КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаУслуги.СуммаСНДС
	|		* &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК СуммаВыручки,
	|	ВЫРАЗИТЬ((ТаблицаУслуги.СуммаСНДС
	|		- ТаблицаУслуги.СуммаНДС)
	|		* &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15, 2)) КАК СуммаВыручкиБезНДС,
	|
	|	ВЫРАЗИТЬ((ТаблицаУслуги.СуммаСНДС
	|		- ТаблицаУслуги.СуммаНДС)
	|		* &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаВыручкиРегл
	|
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтАналитика КАК ВтАналитика
	|	ПО
	|		ТаблицаУслуги.Номенклатура = ВтАналитика.Номенклатура
	|		И ТаблицаУслуги.Характеристика = ВтАналитика.Характеристика
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка
	|	И ТаблицаУслуги.Номенклатура.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки ;";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&ДатаПлатежа КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		ТаблицаУслуги.ЗаказКлиента
	|	КОНЕЦ КАК ЗаказКлиента,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		ТаблицаУслуги.ЗаказКлиента
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ПродажаПоЗаказу,
	|
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	Истина КАК ИсключатьПриКонтроле,
	|	Неопределено КАК ФормаОплаты,
	|	&ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
	|	СУММА(ТаблицаУслуги.СуммаВзаиморасчетов) КАК Сумма,
	|	0 КАК КОплате,
	|	СУММА(ТаблицаУслуги.СуммаВзаиморасчетов) КАК КОтгрузке
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
	|
	|ГДЕ
	|	&АктПоЗаказам
	|	И Не &РасчетыПоНакладным
	|	И ТаблицаУслуги.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУслуги.ЗаказКлиента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&ДатаПлатежа КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ КАК ЗаказКлиента,
	|
	|	Неопределено КАК ПродажаПоЗаказу,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	Истина КАК ИсключатьПриКонтроле,
	|	Неопределено КАК ФормаОплаты,
	|	&ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
	|	СУММА(ТаблицаУслуги.СуммаВзаиморасчетов) КАК Сумма,
	|	0 КАК КОплате,
	|	0 КАК КОтгрузке
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
	|
	|ГДЕ
	|	(Не &АктПоЗаказам
	|		Или &РасчетыПоНакладным)
	|	И ТаблицаУслуги.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУслуги.ЗаказКлиента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(&ДатаПлатежа, День) КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&ДатаПлатежа КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ КАК ЗаказКлиента,
	|
	|	Неопределено КАК ПродажаПоЗаказу,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	Истина КАК ИсключатьПриКонтроле,
	|	&ФормаОплаты КАК ФормаОплаты,
	|	&ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
	|	0 КАК Сумма,
	|	СУММА(ТаблицаУслуги.СуммаВзаиморасчетов) КАК КОплате,
	|	0 КАК КОтгрузке
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
	|
	|ГДЕ
	|	(Не &АктПоЗаказам
	|		Или &РасчетыПоНакладным)
	|	И ТаблицаУслуги.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУслуги.ЗаказКлиента
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентамиПоследовательность()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНДССостояниеРеализации0()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК ДатаРеализации,
	|	&Организация КАК Организация,
	|	АктВыполненныхРабот.Контрагент КАК Контрагент,
	|	&Ссылка КАК ДокументРеализации,
	|	ЕСТЬNULL(НДССостояниеРеализации0.Состояние, ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ОжидаетсяПодтверждение)) КАК Состояние,
	|	НДССостояниеРеализации0.СтавкаНДС КАК СтавкаНДС,
	|	НДССостояниеРеализации0.ДатаПодтверждения КАК ДатаПодтверждения,
	|	ВЫРАЗИТЬ(НДССостояниеРеализации0.Комментарий КАК СТРОКА(500)) КАК Комментарий
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДССостояниеРеализации0 КАК НДССостояниеРеализации0
	|		ПО АктВыполненныхРабот.Ссылка = НДССостояниеРеализации0.ДокументРеализации
	|ГДЕ
	|	АктВыполненныхРабот.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|	И АктВыполненныхРабот.Ссылка = &Ссылка
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация) 
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНДСЗаписиКнигиПродаж()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НДССостояниеРеализации0.ДатаПодтверждения КАК Период,
	|	&Ссылка КАК Регистратор,
	|	&Организация КАК Организация,
	|	&Контрагент КАК Покупатель,
	|	&Ссылка КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги) КАК ВидЦенности,
	|	ВЫБОР
	|		КОГДА НДССостояниеРеализации0.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|		ИНАЧЕ НДССостояниеРеализации0.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	NULL КАК ДатаОплаты,
	|	NULL КАК ДокументОплаты,
	|	ВЫБОР
	|		КОГДА НДССостояниеРеализации0.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ПодтвержденаСтавка0)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.НеподтвержденаСтавка0)
	|	КОНЕЦ КАК Событие,
	|	НДССостояниеРеализации0.ДатаПодтверждения КАК ДатаСобытия,
	|	ВЫБОР
	|		КОГДА НДССостояниеРеализации0.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЗаписьДополнительногоЛиста,
	|	ВЫБОР
	|		КОГДА НДССостояниеРеализации0.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ НДССостояниеРеализации0.ДатаРеализации
	|	КОНЕЦ КАК КорректируемыйПериод,
	|	NULL КАК СторнирующаяЗаписьДопЛиста,
	|	NULL КАК ДоговорКонтрагента,
	|	NULL КАК ИсправленныйСчетФактура,
	|	NULL КАК Исправление,
	|	NULL КАК ДатаСчетаФактурыКомиссионера,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СуммыВВалютеРегл.СуммаБезНДСРегл,0) = 0
	|			ТОГДА ВЫРАЗИТЬ(Операция.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ СуммыВВалютеРегл.СуммаБезНДСРегл
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА НДССостояниеРеализации0.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НДССостояниеРеализации0.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|					ТОГДА 
	|						ВЫБОР
	|							КОГДА ЕСТЬNULL(СуммыВВалютеРегл.СуммаБезНДСРегл,0) = 0
	|								ТОГДА ВЫРАЗИТЬ(Операция.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл * 0.18 КАК ЧИСЛО(15, 2))
	|							ИНАЧЕ ВЫРАЗИТЬ(СуммыВВалютеРегл.СуммаБезНДСРегл * 0.18 КАК ЧИСЛО (15,2))
	|						КОНЕЦ
	|				КОГДА НДССостояниеРеализации0.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|					ТОГДА 
	|						ВЫБОР
	|							КОГДА ЕСТЬNULL(СуммыВВалютеРегл.СуммаБезНДСРегл,0) = 0
	|								ТОГДА ВЫРАЗИТЬ(Операция.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл * 0.1 КАК ЧИСЛО(15, 2))
	|							ИНАЧЕ ВЫРАЗИТЬ(СуммыВВалютеРегл.СуммаБезНДСРегл * 0.1 КАК ЧИСЛО (15,2))
	|						КОНЕЦ
	|				КОГДА НДССостояниеРеализации0.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|					ТОГДА 
	|						ВЫБОР
	|							КОГДА ЕСТЬNULL(СуммыВВалютеРегл.СуммаБезНДСРегл,0) = 0
	|								ТОГДА ВЫРАЗИТЬ(Операция.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл * 18 / 118 КАК ЧИСЛО(15, 2))
	|							ИНАЧЕ ВЫРАЗИТЬ(СуммыВВалютеРегл.СуммаБезНДСРегл * 18 / 118 КАК ЧИСЛО (15,2))
	|						КОНЕЦ
	|				КОГДА НДССостояниеРеализации0.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|					ТОГДА 
	|						ВЫБОР
	|							КОГДА ЕСТЬNULL(СуммыВВалютеРегл.СуммаБезНДСРегл,0) = 0
	|								ТОГДА ВЫРАЗИТЬ(Операция.СуммаДокумента * &КоэффициентПересчетаВВалютуРегл * 10 / 110 КАК ЧИСЛО(15, 2))
	|							ИНАЧЕ ВЫРАЗИТЬ(СуммыВВалютеРегл.СуммаБезНДСРегл * 10 / 118 КАК ЧИСЛО (15,2))
	|						КОНЕЦ
 	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК НДС
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК Операция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НДССостояниеРеализации0 КАК НДССостояниеРеализации0
	|			ПО Операция.Ссылка = НДССостояниеРеализации0.ДокументРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(СуммыДокументовВВалютеРегл.СуммаБезНДСРегл) КАК СуммаБезНДСРегл
	|		ИЗ
	|			РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|		ГДЕ
	|			СуммыДокументовВВалютеРегл.Регистратор = &Ссылка) КАК СуммыВВалютеРегл
	|		ПО (ИСТИНА)
	|ГДЕ
	|	&НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|	И Операция.Ссылка = &Ссылка
	|	И НДССостояниеРеализации0.Состояние В (ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0), ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеподтвержденаРеализация0))
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Ссылка,
	|	&Организация,
	|	&Контрагент,
	|	&Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги),
	|	ТаблицаУслуги.СтавкаНДС,
	|	NULL,
	|	NULL,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.Реализация),
	|	&Период,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(СуммыДокументовВВалютеРегл.СуммаБезНДСРегл,0) = 0
	|				ТОГДА ВЫРАЗИТЬ((ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|			ИНАЧЕ СуммыДокументовВВалютеРегл.СуммаБезНДСРегл
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(СуммыДокументовВВалютеРегл.СуммаБезНДСРегл,0) = 0
	|				ТОГДА ВЫРАЗИТЬ(ТаблицаУслуги.СуммаНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|			ИНАЧЕ СуммыДокументовВВалютеРегл.СуммаНДСРегл
	|		КОНЕЦ)
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|		ПО ТаблицаУслуги.Ссылка = СуммыДокументовВВалютеРегл.Регистратор
	|			И ТаблицаУслуги.ИдентификаторСтроки = СуммыДокументовВВалютеРегл.ИдентификаторСтроки
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка
	|	И &НалогообложениеНДС В (ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС), ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС))
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУслуги.СтавкаНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПродаж.Период,
	|	НДСЗаписиКнигиПродаж.Регистратор,
	|	НДСЗаписиКнигиПродаж.Организация,
	|	НДСЗаписиКнигиПродаж.Покупатель,
	|	НДСЗаписиКнигиПродаж.СчетФактура,
	|	НДСЗаписиКнигиПродаж.ВидЦенности,
	|	НДСЗаписиКнигиПродаж.СтавкаНДС,
	|	НДСЗаписиКнигиПродаж.ДатаОплаты,
	|	НДСЗаписиКнигиПродаж.ДокументОплаты,
	|	НДСЗаписиКнигиПродаж.Событие,
	|	НДСЗаписиКнигиПродаж.ДатаСобытия,
	|	НДСЗаписиКнигиПродаж.ЗаписьДополнительногоЛиста,
	|	НДСЗаписиКнигиПродаж.КорректируемыйПериод,
	|	НДСЗаписиКнигиПродаж.СторнирующаяЗаписьДопЛиста,
	|	НДСЗаписиКнигиПродаж.ДоговорКонтрагента,
	|	НДСЗаписиКнигиПродаж.ИсправленныйСчетФактура,
	|	НДСЗаписиКнигиПродаж.Исправление,
	|	НДСЗаписиКнигиПродаж.ДатаСчетаФактурыКомиссионера,
	|	НДСЗаписиКнигиПродаж.СуммаБезНДС,
	|	НДСЗаписиКнигиПродаж.НДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	НДСЗаписиКнигиПродаж.Регистратор = &Ссылка
	|	И НДСЗаписиКнигиПродаж.Событие = ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ВосстановлениеНДС)
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Валюта КАК Валюта,
	|	ТаблицаУслуги.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС КАК СуммаБезНДС,
	|	ТаблицаУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаУслуги.СуммаНДС КАК СуммаНДС,
	|
	|	ВЫБОР КОГДА ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС = ЕСТЬNULL(ДанныеРегистра.СуммаБезНДС, 0) ТОГДА
	|		ЕСТЬNULL(ДанныеРегистра.СуммаБезНДСРегл, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|
	|	ВЫБОР КОГДА ТаблицаУслуги.СуммаНДС = ЕСТЬNULL(ДанныеРегистра.СуммаНДС, 0) ТОГДА
	|		ЕСТЬNULL(ДанныеРегистра.СуммаНДСРегл, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаНДСРегл,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов
	|
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК ДанныеРегистра
	|	ПО
	|		ДанныеРегистра.Регистратор = &Ссылка
	|		И ТаблицаУслуги.ИдентификаторСтроки = ДанныеРегистра.ИдентификаторСтроки
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка
	|	И &Валюта <> &ВалютаРегламентированногоУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаУслуги.НомерСтроки
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл()

Функция ТекстЗапросаТаблицаПроизводственныеЗатратыПоследовательность()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	КлючиАналитики.КлючАналитики КАК АналитикаУчетаПоНоменклатуре
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиАналитики
	|	ПО
	|		ТаблицаУслуги.Номенклатура = КлючиАналитики.Номенклатура
	|		И ТаблицаУслуги.Характеристика = КлючиАналитики.Характеристика
	|		И (&Подразделение = КлючиАналитики.Склад)
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПроизводственныеЗатраты()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаУслуги.НомерСтроки КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&Организация КАК Организация,
	|	АналитикаУчетаНоменклатуры.КлючАналитики КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаУслуги.Количество КАК Количество
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|	ПО
	|		ТаблицаУслуги.Номенклатура = АналитикаУчетаНоменклатуры.Номенклатура
	|		И ТаблицаУслуги.Характеристика = АналитикаУчетаНоменклатуры.Характеристика
	|		И &Подразделение = АналитикаУчетаНоменклатуры.Склад
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение по регл. учету

Функция ТекстОтраженияВРеглУчете() Экспорт
	
	ТекстЗадолженностьПокупателяЗаУслуги = "
	|ВЫБРАТЬ //// Отражена задолженность покупателя (Дт <62.1, 76> :: Кт <90.1, 91.1>)
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.СуммаСНДС) КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами) КАК ВидСчетаДт,
	|	Операция.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.ВалютаВзаиморасчетов КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|
	|	Операция.Контрагент КАК СубконтоДт1,
	|	Операция.Договор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	Строки.СуммаВзаиморасчетов КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ВыручкаОтПродаж) КАК ВидСчетаКт,
	|	Строки.Номенклатура.ГруппаФинансовогоУчета КАК АналитикаУчетаКт,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК МестоУчетаКт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	Строки.СтавкаНДС КАК СубконтоКт2,
	|	Строки.Номенклатура КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	Строки.Количество КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт
	|
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК Операция
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АктВыполненныхРабот.Услуги КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Строки.Ссылка
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|		И Суммы.СуммаБезНДСРегл <> 0
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|";
	
	ТекстНачислениеНДСЗаУслуги = "
	|ВЫБРАТЬ //// Начислен НДС от продаж продукции, товаров, выполнения работ, оказания услуг (Дт <90.3, 91.2> :: Кт <68.2>)
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, Строки.СуммаНДС) КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриПродаже) КАК ВидСчетаДт,
	|	Строки.Номенклатура.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК МестоУчетаДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
	|	Строки.СтавкаНДС КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС) КАК СчетКт,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт
	|
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК Операция
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АктВыполненныхРабот.Услуги КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|	ПО
	|		Суммы.Регистратор = Строки.Ссылка
	|		И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки
	|		И Суммы.СуммаНДСРегл <> 0
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|	И ЕСТЬNULL(Суммы.СуммаНДСРегл, Строки.СуммаНДС) <> 0
	|";
	
	ТекстОказаниеРабот = "
	|ВЫБРАТЬ // Выпуск продукции (Дт 90.02, 91.02 :: Кт 20.01, 23)
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(СтоимостьТоваров.Стоимость * Строки.Количество, 0) КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.СебестоимостьПродаж) КАК ВидСчетаДт,
	|	Строки.Номенклатура.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	Строки.Количество КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы) КАК ВидСчетаКт,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка) КАК АналитикаУчетаКт,
	|	Операция.Подразделение КАК МестоУчетаКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетКт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт
	|
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК Операция
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.АктВыполненныхРабот.Услуги КАК Строки
	|	ПО
	|		Строки.Ссылка = Операция.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СтоимостьТоваров КАК СтоимостьТоваров
	|	ПО
	|		Строки.Номенклатура = СтоимостьТоваров.АналитикаУчетаНоменклатуры.Номенклатура
	|		И Строки.Характеристика = СтоимостьТоваров.АналитикаУчетаНоменклатуры.Характеристика
	|		И Операция.Подразделение = СтоимостьТоваров.АналитикаУчетаНоменклатуры.Склад
	|		И Операция.Организация = СтоимостьТоваров.Организация
	|		И НАЧАЛОПЕРИОДА(Операция.Дата, Месяц) = СтоимостьТоваров.Период
	|ГДЕ
	|	Операция.Ссылка = &Ссылка
	|	И Строки.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|";
	
	ТекстНеПодтверждениеНулевойСтавкиНДС = "
	|ВЫБРАТЬ ////Начисление НДС при неподтверждении нулевой ставки НДС Дт 68.22 Кт 68.02
	|
	|	НДССостояние.ДатаПодтверждения КАК Период,
	|	Операция.Организация КАК Организация,
	|   НЕОПРЕДЕЛЕНО КАК ИндентификаторСтроки,
	|
	|	ВЫБОР
	|		КОГДА НДССостояние.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(СуммыВВалютеРегл.СуммаБезНДС,Операция.СуммаДокумента) * 0.18 КАК ЧИСЛО(15, 2))
	|		КОГДА НДССостояние.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(СуммыВВалютеРегл.СуммаБезНДС,Операция.СуммаДокумента) * 0.1 КАК ЧИСЛО(15, 2))
	|		КОГДА НДССостояние.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(СуммыВВалютеРегл.СуммаБезНДС,Операция.СуммаДокумента) * 18 / 118 КАК ЧИСЛО(15, 2))
	|		КОГДА НДССостояние.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(СуммыВВалютеРегл.СуммаБезНДС,Операция.СуммаДокумента) * 10 / 110 КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению) КАК СчетДт,
	|
	|	Операция.Контрагент КАК СубконтоДт1,
	|	Операция.Ссылка КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС) КАК СчетКт,
	|
	|	ЗНАЧЕНИЕ (Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт
	|
	|ИЗ Документ.АктВыполненныхРабот КАК Операция
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.НДССостояниеРеализации0 КАК НДССостояние
	|	ПО 
	|		Операция.Ссылка = НДССостояние.ДокументРеализации
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			СУММА(СуммыДокументовВВалютеРегл.СуммаБезНДСРегл) КАК СуммаБезНДС
	|		ИЗ
	|			РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|		ГДЕ
	|			СуммыДокументовВВалютеРегл.Регистратор = &Ссылка
	|		) КАК СуммыВВалютеРегл
	|	ПО
	|		ИСТИНА
	|
	|ГДЕ Операция.Ссылка = &Ссылка
	|	И Операция.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|	И НДССостояние.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НеПодтвержденаРеализация0)
	|	И НДССостояние.ДатаПодтверждения <> ДАТАВРЕМЯ(0001,01,01,00,00,00)
    |";
	
	Возврат
	ТекстЗадолженностьПокупателяЗаУслуги
	+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстНачислениеНДСЗаУслуги
	+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстОказаниеРабот
	+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстНеПодтверждениеНулевойСтавкиНДС;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Печать

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Акт", "Акт выполненных работ", СформироватьПечатнуюФормуАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		КоллекцияПечатныхФорм.Очистить();
		СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати);
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	Возврат Новый Структура("Данные,Макеты",
				ПолучитьДанныеОбъектаПоМакетам(МассивДокументов, МассивИменМакетов),
				ПолучитьМакетыИОписанияСекций(МассивИменМакетов));
	
КонецФункции

Функция ПолучитьДанныеОбъектаПоМакетам(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	СтруктураРезультатов = ПолучитьДанныеДляПечати(МассивДокументов);
		
	ДанныеПечати			= СтруктураРезультатов["РезультатПоШапке"].Выбрать();
	ВыборкаПоДокументам 	= СтруктураРезультатов["РезультатПоТабличнойЧасти"].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ДанныеПечати.Следующий() Цикл
		ДанныеОбъектаПоМакетам = Новый Структура;
		// Найдем в выборке услуги по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		// Если в документе пустая табличная часть услуги - перейдем к следующему документу
		Если НайденСледующий Тогда
			ВыборкаПоУслугам = ВыборкаПоДокументам.Выбрать();
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют услуги. Печать акта выполненных работ (услуг) не требуется.'"),
				ДанныеПечати.Ссылка
				);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка
			);
			
			Продолжить;
		КонецЕсли;

		ДанныеОбъекта = ПолучитьДанныеОбъектаПоВыборке(ДанныеПечати, ВыборкаПоУслугам);
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ДанныеОбъекта);
		КонецЦикла;
		ДанныеПоВсемОбъектам.Вставить(ДанныеПечати.Ссылка, ДанныеОбъектаПоМакетам);
	КонецЦикла;
	
	Возврат ДанныеПоВсемОбъектам;
	
КонецФункции

Функция ПолучитьМакетыИОписанияСекций(знач МассивИменМакетов) Экспорт
	
	ОписаниеСекций = Новый Структура;
	ДвоичныеДанныеМакетов = Новый Структура;
	
	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
		
		Макет = Неопределено;
		ОписаниеСекцийМакета = Неопределено;
		
		Если ИмяМакета = "ПФ_DOC_Акт" Тогда
			ОписаниеСекцийМакета = ПолучитьОписаниеОбластейАктВыполненныхРабот();
			Макет = УправлениеПечатью.ПолучитьМакет("Документ.АктВыполненныхРабот.ПФ_DOC_Акт");
		КонецЕсли;
		
		Если ОписаниеСекцийМакета <> Неопределено И Макет <> Неопределено Тогда
			
			ОписаниеСекций.Вставить(ИмяМакета, ОписаниеСекцийМакета);
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, Макет);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура(
						"ОписаниеСекций,ДвоичныеДанныеМакетов",
						ОписаниеСекций,
						ДвоичныеДанныеМакетов
					);
	
КонецФункции

Функция ПолучитьДанныеДляПечати(МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	АктВыполненныхРабот.Ссылка КАК Ссылка,
	|	АктВыполненныхРабот.Номер КАК Номер,
	|	АктВыполненныхРабот.Дата КАК Дата,
	|	АктВыполненныхРабот.Партнер КАК Партнер,
	|	АктВыполненныхРабот.Контрагент КАК Контрагент,
	|	АктВыполненныхРабот.Организация КАК Организация,
	|	АктВыполненныхРабот.Организация.Префикс КАК Префикс,
	|	АктВыполненныхРабот.Валюта КАК Валюта,
	|	АктВыполненныхРабот.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА АктВыполненныхРабот.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьНДС,
	|	АктВыполненныхРабот.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	АктВыполненныхРабот.ДополнительнаяИнформацияШапки КАК ДополнительнаяИнформацияШапки,
	|	АктВыполненныхРабот.БанковскийСчетОрганизации КАК СчетОрганизации,
	|	АктВыполненныхРабот.БанковскийСчетКонтрагента КАК СчетКонтрагента
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	|ГДЕ
	|	АктВыполненныхРабот.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Содержание КАК УслугаНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Код КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	|	ВложенныйЗапрос.Характеристика КАК Характеристика,
	|	ВложенныйЗапрос.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	ВложенныйЗапрос.Цена КАК Цена,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	ВложенныйЗапрос.Сумма КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС КАК СуммаНДС,
	|	ВложенныйЗапрос.СуммаСкидки КАК СуммаСкидки,
	|	ВложенныйЗапрос.СуммаБезСкидки КАК СуммаБезСкидки,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	(ВЫБРАТЬ
	|		АктВыполненныхРабот.Ссылка КАК Ссылка,
	|		АктВыполненныхРабот.Номенклатура КАК Номенклатура,
	|		АктВыполненныхРабот.Содержание КАК Содержание,
	|		1 КАК Коэффициент,
	|		АктВыполненныхРабот.ПроцентРучнойСкидки + АктВыполненныхРабот.ПроцентАвтоматическойСкидки КАК ПроцентСкидки,
	|		АктВыполненныхРабот.Характеристика КАК Характеристика,
	|		АктВыполненныхРабот.СтавкаНДС КАК СтавкаНДС,
	|		АктВыполненныхРабот.Цена КАК Цена,
	|		АктВыполненныхРабот.Количество КАК Количество,
	|		АктВыполненныхРабот.Сумма КАК Сумма,
	|		АктВыполненныхРабот.СуммаРучнойСкидки + АктВыполненныхРабот.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|		АктВыполненныхРабот.Сумма + АктВыполненныхРабот.СуммаРучнойСкидки + АктВыполненныхРабот.СуммаАвтоматическойСкидки КАК СуммаБезСкидки,
	|		АктВыполненныхРабот.СуммаНДС КАК СуммаНДС,
	|		АктВыполненныхРабот.НомерСтроки КАК НомерСтроки,
	|		АктВыполненныхРабот.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|	ИЗ
	|		Документ.АктВыполненныхРабот.Услуги КАК АктВыполненныхРабот
	|	ГДЕ
	|		АктВыполненныхРабот.Ссылка В(&МассивДокументов)
	|		И АктВыполненныхРабот.Номенклатура.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаСкидки)
	|ПО
	|	Ссылка");
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	МассивРезультатов         = Запрос.ВыполнитьПакет();
	РезультатПоШапке          = МассивРезультатов[0];
	РезультатПоТабличнойЧасти = МассивРезультатов[1];
	
	СтруктураДанныхДляПечати 	= Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти",
	                                               РезультатПоШапке, РезультатПоТабличнойЧасти);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция ПолучитьДанныеОбъектаПоВыборке(ДанныеПечати, ВыборкаПоУслугам)
	
	ДанныеОбъекта = Новый Структура;
	
	ДанныеОбъекта.Вставить("ТекстЗаголовка", ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Акт'")));
	ДанныеОбъекта.Вставить("ДополнительнаяИнформацияШапки", ДанныеПечати.ДополнительнаяИнформацияШапки);
	
	
	СведенияОИсполнителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
		ДанныеПечати.Организация, 
		ДанныеПечати.Дата,
		,
		ДанныеПечати.СчетОрганизации
	);
	СведенияОЗаказчике 	 = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
		ДанныеПечати.Контрагент,
		ДанныеПечати.Дата,
		,
		ДанныеПечати.СчетКонтрагента
	);
	
	ЗаголовокСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ВыборкаПоУслугам, Истина);
	
	ДанныеОбъекта.Вставить("ПредставлениеИсполнителя", СведенияОИсполнителе.ОфициальноеНаименование);
	ДанныеОбъекта.Вставить("ПредставлениеЗаказчика",   СведенияОЗаказчике.ОфициальноеНаименование);
	ДанныеОбъекта.Вставить("ЮрАдресИсполнителя",       СведенияОИсполнителе.ЮридическийАдрес);
	ДанныеОбъекта.Вставить("ЮрАдресЗаказчика",         СведенияОЗаказчике.ЮридическийАдрес);
	ДанныеОбъекта.Вставить("ИННИсполнителя",           СведенияОИсполнителе.ИНН);
	ДанныеОбъекта.Вставить("ИННЗаказчика",             СведенияОЗаказчике.ИНН);
	ДанныеОбъекта.Вставить("КППИсполнителя",           СведенияОИсполнителе.КПП);
	ДанныеОбъекта.Вставить("КППЗаказчика",             СведенияОЗаказчике.КПП);
	ДанныеОбъекта.Вставить("РасчетныйСчетИсполнителя", СведенияОИсполнителе.НомерСчета);
	ДанныеОбъекта.Вставить("РасчетныйСчетЗаказчика",   СведенияОЗаказчике.НомерСчета);
	ДанныеОбъекта.Вставить("КорСчетИсполнителя",       СведенияОИсполнителе.КоррСчет);
	ДанныеОбъекта.Вставить("КорСчетЗаказчика",         СведенияОЗаказчике.КоррСчет);
	ДанныеОбъекта.Вставить("БанкИсполнителя",          СведенияОИсполнителе.Банк);
	ДанныеОбъекта.Вставить("БанкЗаказчика",            СведенияОЗаказчике.Банк);
	ДанныеОбъекта.Вставить("БИКИсполнителя",           СведенияОИсполнителе.БИК);
	ДанныеОбъекта.Вставить("БИКЗаказчика",             СведенияОИсполнителе.БИК);
	ДанныеОбъекта.Вставить("ДополнительнаяИнформация", ДанныеПечати.ДополнительнаяИнформация);
	ДанныеОбъекта.Вставить("УчитыватьНДС",             ДанныеПечати.УчитыватьНДС);
	ДанныеОбъекта.Вставить("ЕстьСкидки",               ЗаголовокСкидки.ЕстьСкидки);
	ДанныеОбъекта.Вставить("ЗаголовокСкидки",          ЗаголовокСкидки.Скидка);
	ДанныеОбъекта.Вставить("ЗаголовокСуммаБезСкидки",  ЗаголовокСкидки.СуммаСкидки);
	ДанныеОбъекта.Вставить("ТолькоНаценка",            ЗаголовокСкидки.ТолькоНаценка);

	Если ДанныеПечати.УчитыватьНДС Тогда
		ДанныеОбъекта.Вставить("НДС", ?(ДанныеПечати.ЦенаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = ' Сумма НДС'")));
	Иначе
		ДанныеОбъекта.Вставить("НДС", НСтр("ru='Без налога (НДС)'"));
	КонецЕсли;

	ДанныеОбъекта.Вставить("Услуги", Новый Массив);
	
	Сумма    	= 0;
	СуммаНДС 	= 0;
	НомерСтроки = 0;
	
	ВыборкаПоУслугам.Сбросить();
	
	Пока ВыборкаПоУслугам.Следующий() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицыУслуги = Новый Структура;
		СтрокаТаблицыУслуги.Вставить("НомерСтроки",      НомерСтроки);
		СтрокаТаблицыУслуги.Вставить("Товар",          	 ВыборкаПоУслугам.УслугаНаименованиеПолное);
		СтрокаТаблицыУслуги.Вставить("Количество",       ВыборкаПоУслугам.Количество);
		СтрокаТаблицыУслуги.Вставить("ЕдиницаИзмерения", ВыборкаПоУслугам.ЕдиницаИзмерения);
		СтрокаТаблицыУслуги.Вставить("Цена",             Формат(ВыборкаПоУслугам.Цена,"ЧДЦ=2; ЧРД=,"));
		СтрокаТаблицыУслуги.Вставить("Скидка",           Формат(ВыборкаПоУслугам.СуммаСкидки,"ЧДЦ=2; ЧРД=,"));
		СтрокаТаблицыУслуги.Вставить("Сумма",            Формат(ВыборкаПоУслугам.Сумма,"ЧДЦ=2; ЧРД=,"));
		СтрокаТаблицыУслуги.Вставить("СтавкаНДС",        ВыборкаПоУслугам.СтавкаНДС);
		СтрокаТаблицыУслуги.Вставить("СуммаНДС",         Формат(ВыборкаПоУслугам.СуммаНДС,"ЧДЦ=2; ЧРД=,"));
		СтрокаТаблицыУслуги.Вставить("СуммаБезСкидки",   Формат(ВыборкаПоУслугам.СуммаБезСкидки,"ЧДЦ=2; ЧРД=,"));
		Если ДанныеОбъекта.ЕстьСкидки Тогда
			СтрокаТаблицыУслуги.Скидка = ?(ДанныеОбъекта.ТолькоНаценка,- СтрокаТаблицыУслуги.Скидка,СтрокаТаблицыУслуги.Скидка);
			СтрокаТаблицыУслуги.Скидка = Формат(СтрокаТаблицыУслуги.Скидка,"ЧДЦ=2; ЧРД=,");
		КонецЕсли; 
		ДанныеОбъекта.Услуги.Добавить(СтрокаТаблицыУслуги);
		
		Сумма    = Сумма + ВыборкаПоУслугам.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаПоУслугам.СуммаНДС;
		
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("Всего",		Сумма);
	ДанныеОбъекта.Вставить("ВсегоНДС",	СуммаНДС);
	
	СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
	
	ИтоговаяСтрока = НСтр("ru = 'Всего выполнено работ (оказано услуг) %КоличествоНаименований%, на сумму %СуммаДокумента%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоНаименований%", НомерСтроки);
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаДокумента%", ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
	
	ДанныеОбъекта.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
	ДанныеОбъекта.Вставить("СуммаПрописью",  РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта));
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПолучитьОписаниеОбластейАктВыполненныхРабот()

	Секции = Новый Структура;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Заголовок",						"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ЗаголовокШапки",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ДополнительнаяИнформацияШапки",	"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Предложение",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ШапкаТаблицы",					"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Строка",							"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ШапкаТаблицыСоСкидкой",			"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СтрокаСоСкидкой",				"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ШапкаТаблицыСоСкидкойСНДС",		"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СтрокаСоСкидкойСНДС",			"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ШапкаТаблицыСНДС",				"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СтрокаСНДС",						"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Итого",							"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ИтогоНДС",						"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СуммаПрописью",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Подписи",						"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ДополнительнаяИнформация",		"Общая");
		
	Возврат Секции;

КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка                  КАК Ссылка,
	|	ДанныеДокументов.Валюта                  КАК Валюта,
	|	ДанныеДокументов.Организация             КАК Организация,
	|	ДанныеДокументов.Подразделение           КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад
	|
	|ПОМЕСТИТЬ ТаблицаДанныхДокументов
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ДанныеДокументов
	|
	|ГДЕ
	|	ДанныеДокументов.Ссылка В (&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Выполнить();
	
	ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, НЕ ПараметрыПечати.ПечатьВВалюте);
	ПродажиСервер.ПоместитьВременнуюТаблицуСчетовФактур(МенеджерВременныхТаблиц);
	
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ШАПКЕ
	|
	|ВЫБРАТЬ
	|	АктВыполненныхРабот.Ссылка КАК Ссылка,
	|	&ПредставлениеСчетФактура КАК ПредставлениеДокумента,
	|	ЕСТЬNULL(СчетаФактуры.Номер, НЕОПРЕДЕЛЕНО) КАК Номер,
	|	ЕСТЬNULL(СчетаФактуры.Дата, НЕОПРЕДЕЛЕНО) КАК Дата,
	|	ЕСТЬNULL(СчетаФактуры.НомерИсправления, НЕОПРЕДЕЛЕНО) КАК НомерИсправления,
	|	ЕСТЬNULL(СчетаФактуры.ДатаИсправления, НЕОПРЕДЕЛЕНО) КАК ДатаИсправления,
	|	ЕСТЬNULL(СчетаФактуры.Исправление, ЛОЖЬ) КАК Исправление,
	|	НЕОПРЕДЕЛЕНО КАК НомерСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК ДатаСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправленияСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправленияСчетаФактуры,
	|	ЛОЖЬ КАК КорректировочныйСчетФактура,
	|	ЕСТЬNULL(СчетаФактуры.СтрокаПлатежноРасчетныеДокументы, """") КАК СтрокаПоДокументу,
	|	ЕСТЬNULL(СчетаФактуры.Валюта, НЕОПРЕДЕЛЕНО) КАК ВалютаСчетаФактуры,
	|	АктВыполненныхРабот.Партнер КАК Партнер,
	|	АктВыполненныхРабот.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(СчетаФактуры.ГоловнаяОрганизация, АктВыполненныхРабот.Организация) КАК Организация,
	|	АктВыполненныхРабот.Организация.Префикс КАК Префикс,
	|	ЕСТЬNULL(СчетаФактуры.ИндексПодразделения, 0) КАК ИндексПодразделения,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	АктВыполненныхРабот.Контрагент КАК Грузополучатель,
	|	ЕСТЬNULL(СчетаФактуры.Грузоотправитель, АктВыполненныхРабот.Организация) КАК Грузоотправитель,
	|	ЕСТЬNULL(СчетаФактуры.ВыводитьКППГрузоотправителя, ЛОЖЬ) КАК ВыводитьКППГрузоотправителя,
	|	"""" КАК АдресДоставки,
	|	АктВыполненныхРабот.Валюта КАК Валюта,
	|	АктВыполненныхРабот.Валюта.НаименованиеПолное КАК ВалютаНаименованиеПолное,
	|	АктВыполненныхРабот.Валюта.Код КАК ВалютаКод,
	|	ИСТИНА КАК ТолькоУслуги,
	|	ЛОЖЬ КАК ЭтоПередачаНаКомиссию
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ДанныеДокументов
	|		ПО АктВыполненныхРабот.Ссылка = ДанныеДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетовФактур КАК СчетаФактуры
	|		ПО АктВыполненныхРабот.Ссылка = СчетаФактуры.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО АктВыполненныхРабот.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////
	|// ЗАПРОС ПО ТАБЛИЧНЫМ ЧАСТЯМ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                                      КАК Ссылка,
	|	ТаблицаДокумента.Номенклатура                                КАК Номенклатура,
	|	ТаблицаДокумента.Содержание                                  КАК НоменклатураНаименование,
	|	ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения               КАК ЕдиницаИзмерения,
	|	ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаДокумента.Номенклатура.ЕдиницаИзмерения.Код           КАК ЕдиницаИзмеренияКод,
	|	НЕОПРЕДЕЛЕНО                                                 КАК Характеристика,
	|	""""                                                         КАК ХарактеристикаНаименование,
	|	ТаблицаДокумента.СтавкаНДС                                   КАК СтавкаНДС,
	|	""""                                                         КАК НомерГТД,
	|	""""                                                         КАК СтранаПроисхождения,
	|	""""                                                         КАК СтранаПроисхожденияКод,
	|	ТаблицаДокумента.Количество                                  КАК Количество,
	|	ТаблицаДокумента.СуммаБезНДС / ТаблицаДокумента.Количество   КАК Цена,
	|	ТаблицаДокумента.СуммаБезНДС                                 КАК СуммаБезНДС,
	|	ТаблицаДокумента.СуммаНДС                                    КАК СуммаНДС,
	|	ТаблицаДокумента.СуммаБезНДС + ТаблицаДокумента.СуммаНДС     КАК СуммаСНДС,
	|	ТаблицаДокумента.НомерСтроки                                 КАК НомерСтроки,
	|	ЛОЖЬ                                                         КАК ЭтоВозвратнаяТара
	|
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|
	|ИТОГИ ПО
	|	Ссылка
	|;";
	Запрос.УстановитьПараметр("ПредставлениеСчетФактура", НСтр("ru='счет-фактура'"));
	
	МассивРезультатов         = Запрос.ВыполнитьПакет();
	РезультатПоШапке          = МассивРезультатов[0];
	РезультатПоТабличнойЧасти = МассивРезультатов[1];
	
	СтруктураДанныхДляПечати 	= Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти",
	                                               РезультатПоШапке, РезультатПоТабличнойЧасти);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт

	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	КонецЕсли;
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");

КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Прочее

// Формирует результат запроса по непоставленной части заказов
//
// Параметры:
//	ДанныеОтбора     - Структура - поля, по которым будут отобраны остатки заказов
//	Дата             - Дата - дата, на которую будут отобраны остатки заказов
//	МассивЗаказов      Массив - заказы, по которым будут отобраны остатки
//
// Вовращаемое значение:
//	Результат запроса - результат запроса по неотгруженной части заказов\заявок
//
Функция ПолучитьРезультатЗапросаПоОстаткамЗаказов(ДанныеОтбора, 
	                                              Дата,
	                                              МассивЗаказов = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивЗаказов",         МассивЗаказов);
	Запрос.УстановитьПараметр("Партнер",               ДанныеОтбора.Партнер);
	Запрос.УстановитьПараметр("Контрагент",            ДанныеОтбора.Контрагент);
	Запрос.УстановитьПараметр("Договор",               ДанныеОтбора.Договор);
	Запрос.УстановитьПараметр("Организация",           ДанныеОтбора.Организация);
	Запрос.УстановитьПараметр("Сделка",                ДанныеОтбора.Сделка);
	Запрос.УстановитьПараметр("Соглашение",            ДанныеОтбора.Соглашение);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",  ДанныеОтбора.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("НалогообложениеНДС",    ДанныеОтбора.НалогообложениеНДС);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",       ДанныеОтбора.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("Регистратор",           ДанныеОтбора.Ссылка);
	Запрос.УстановитьПараметр("ОтобратьПоЗаказу",      МассивЗаказов <> Неопределено);
	
	Если Дата <> Неопределено Тогда
		Запрос.УстановитьПараметр("Период", КонецДня(Дата));
		Запрос.УстановитьПараметр("ГраницаПериод", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Иначе
		Запрос.УстановитьПараметр("Период", '00010101');
		Запрос.УстановитьПараметр("ГраницаПериод", Неопределено);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗаказы.ЗаказКлиента КАК ЗаказКлиента,
	|	ТаблицаЗаказы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказы.Характеристика КАК Характеристика,
	|	ТаблицаЗаказы.КодСтроки КАК КодСтроки,
	|	СУММА(ТаблицаЗаказы.КОформлению) КАК Количество,
	|	СУММА(ТаблицаЗаказы.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ТаблицаОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказКлиента КАК ЗаказКлиента,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КодСтроки КАК КодСтроки,
	|		ЗаказыОстатки.КОформлениюОстаток КАК КОформлению,
	|		ЗаказыОстатки.СуммаОстаток КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов.Остатки(
	|				&ГраницаПериод,
	|				ВЫБОР
	|						КОГДА &ОтобратьПоЗаказу
	|							ТОГДА ЗаказКлиента В (&МассивЗаказов)
	|						ИНАЧЕ ЗаказКлиента.Партнер = &Партнер
	|								И ЗаказКлиента.Контрагент = &Контрагент
	|								И ЗаказКлиента.Договор = &Договор
	|								И ЗаказКлиента.Организация = &Организация
	|								И ЗаказКлиента.ХозяйственнаяОперация В
	|									(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту),
	|									ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя),
	|									ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента))
	|								И ЗаказКлиента.Соглашение = &Соглашение
	|								И ЗаказКлиента.Сделка = &Сделка
	|								И ЗаказКлиента.Валюта = &ВалютаВзаиморасчетов
	|								И ЗаказКлиента.НалогообложениеНДС = &НалогообложениеНДС
	|								И ЗаказКлиента.ЦенаВключаетНДС = &ЦенаВключаетНДС
	|					КОНЕЦ
	|					И Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)) КАК ЗаказыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыДвижения.ЗаказКлиента,
	|		ЗаказыДвижения.Номенклатура,
	|		ЗаказыДвижения.Характеристика,
	|		ЗаказыДвижения.КодСтроки,
	|		ВЫБОР
	|			КОГДА ЗаказыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗаказыДвижения.КОформлению
	|			ИНАЧЕ ЗаказыДвижения.КОформлению
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ЗаказыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ЗаказыДвижения.Сумма
	|			ИНАЧЕ ЗаказыДвижения.Сумма
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов КАК ЗаказыДвижения
	|	ГДЕ
	|		ЗаказыДвижения.Регистратор = &Регистратор
	|		И ВЫБОР
	|				КОГДА &ОтобратьПоЗаказу
	|					ТОГДА ЗаказыДвижения.ЗаказКлиента В (&МассивЗаказов)
	|				ИНАЧЕ ЗаказыДвижения.ЗаказКлиента.Партнер = &Партнер
	|						И ЗаказыДвижения.ЗаказКлиента.Контрагент = &Контрагент
	|						И ЗаказыДвижения.ЗаказКлиента.Договор = &Договор
	|						И ЗаказыДвижения.ЗаказКлиента.Организация = &Организация
	|						И ЗаказыДвижения.ЗаказКлиента.ХозяйственнаяОперация В
	|							(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту),
	|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя),
	|							ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента))
	|						И ЗаказыДвижения.ЗаказКлиента.Соглашение = &Соглашение
	|						И ЗаказыДвижения.ЗаказКлиента.Сделка = &Сделка
	|						И ЗаказыДвижения.ЗаказКлиента.Валюта = &ВалютаВзаиморасчетов
	|						И ЗаказыДвижения.ЗаказКлиента.НалогообложениеНДС = &НалогообложениеНДС
	|						И ЗаказыДвижения.ЗаказКлиента.ЦенаВключаетНДС = &ЦенаВключаетНДС
	|			КОНЕЦ
	|		И ВЫБОР
	|				КОГДА &Период <> ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ЗаказыДвижения.Период <= &Период
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|		И ЗаказыДвижения.Активность
	|		И ЗаказыДвижения.Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)) КАК ТаблицаЗаказы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказы.ЗаказКлиента,
	|	ТаблицаЗаказы.Номенклатура,
	|	ТаблицаЗаказы.Характеристика,
	|	ТаблицаЗаказы.КодСтроки
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаЗаказы.КОформлению) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.ЗаказКлиента КАК ЗаказКлиента,
	|	ТаблицаОстатки.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	ТаблицаОстатки.КодСтроки КАК КодСтроки,
	|	ТаблицаОстатки.Количество КАК Количество,
	|	ТаблицаОстатки.Сумма КАК СуммаВзаиморасчетов,
	|	ЗаказТовары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказТовары.Ссылка.Сделка КАК Сделка,
	|	ЗаказТовары.ВидЦены КАК ВидЦены,
	|	ЗаказТовары.Количество КАК КоличествоВЗаказе,
	|	ЗаказТовары.Цена КАК Цена,
	|	ЗаказТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказТовары.Сумма КАК Сумма,
	|	ЗаказТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказТовары.СуммаСНДС КАК СуммаСНДС,
	|	ЗаказТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ЗаказТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ЗаказТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказТовары.КлючСвязи КАК КлючСвязи,
	|	ЗаказТовары.Содержание КАК Содержание
	|ИЗ
	|	ТаблицаОстатки КАК ТаблицаОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказТовары
	|		ПО ТаблицаОстатки.Номенклатура = ЗаказТовары.Номенклатура
	|			И ТаблицаОстатки.Характеристика = ЗаказТовары.Характеристика
	|			И ТаблицаОстатки.КодСтроки = ЗаказТовары.КодСтроки
	|			И ТаблицаОстатки.ЗаказКлиента = ЗаказТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатки.ЗаказКлиента,
	|	ТаблицаОстатки.Номенклатура,
	|	ТаблицаОстатки.Характеристика,
	|	ТаблицаОстатки.КодСтроки,
	|	ТаблицаОстатки.Количество,
	|	ТаблицаОстатки.Сумма,
	|	ЗаказТовары.ДатаОтгрузки,
	|	ЗаказТовары.НомерСтроки,
	|	ЗаказТовары.Ссылка.Сделка,
	|	ЗаказТовары.ВидЦены,
	|	ЗаказТовары.Количество,
	|	ЗаказТовары.Цена,
	|	ЗаказТовары.СтавкаНДС,
	|	ЗаказТовары.Сумма,
	|	ЗаказТовары.СуммаНДС,
	|	ЗаказТовары.СуммаСНДС,
	|	ЗаказТовары.ПроцентРучнойСкидки,
	|	ЗаказТовары.СуммаРучнойСкидки,
	|	ЗаказТовары.ПроцентАвтоматическойСкидки,
	|	ЗаказТовары.СуммаАвтоматическойСкидки,
	|	ЗаказТовары.Номенклатура.ТипНоменклатуры,
	|	ЗаказТовары.КлючСвязи,
	|	ЗаказТовары.Содержание
	|ИЗ
	|	ТаблицаОстатки КАК ТаблицаОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ЗаказТовары
	|		ПО ТаблицаОстатки.Номенклатура = ЗаказТовары.Номенклатура
	|			И ТаблицаОстатки.Характеристика = ЗаказТовары.Характеристика
	|			И ТаблицаОстатки.КодСтроки = ЗаказТовары.КодСтроки
	|			И ТаблицаОстатки.ЗаказКлиента = ЗаказТовары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОстатки.ЗаказКлиента,
	|	ЗаказТовары.НомерСтроки,
	|	ТаблицаОстатки.Номенклатура,
	|	ТаблицаОстатки.Характеристика,
	|	ЗаказТовары.ДатаОтгрузки";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();

КонецФункции

Функция СформироватьПечатнуюФормуАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктВыполненныхРабот_Акт";
	
	СтруктураРезультатов = ПолучитьДанныеДляПечати(МассивОбъектов);
		
	ДанныеПечати			= СтруктураРезультатов["РезультатПоШапке"].Выбрать();
	ВыборкаПоДокументам 	= СтруктураРезультатов["РезультатПоТабличнойЧасти"].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Найдем в выборке услуги по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		// Если в документе пустая табличная часть услуги - перейдем к следующему документу
		Если НайденСледующий Тогда
			ВыборкаПоУслугам = ВыборкаПоДокументам.Выбрать();
			ЗаголовокСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ВыборкаПоУслугам, ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки);
			ЕстьСкидки = ЗаголовокСкидки.ЕстьСкидки;
			ЕстьНДС = ДанныеПечати.УчитыватьНДС;
			ВыборкаПоУслугам.Сбросить();
		Иначе
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют услуги. Печать акта выполненных работ (услуг) не требуется.'"),
				ДанныеПечати.Ссылка
				);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка
			);
			
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.ПолучитьМакет("Документ.АктВыполненныхРабот.ПФ_MXL_Акт");
		
		// Выводим шапку акта
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Акт'"));
		
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если НЕ ДанныеПечати.ДополнительнаяИнформацияШапки="" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ДополнительнаяИнформацияШапки");
			ОбластьМакета.Параметры.ДополнительнаяИнформацияШапки= ДанныеПечати.ДополнительнаяИнформацияШапки;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ТекстШапки");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
				
		// Выводим заголовок таблицы Услуги
		
		СуффиксОбласти = ?(ЕстьСкидки, "СоСкидкой", "") + ?(ЕстьНДС, "СНДС", "");
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбласти);
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка" + СуффиксОбласти);
		
		Если ЕстьСкидки Тогда
			ОбластьМакета.Параметры.Скидка = ЗаголовокСкидки.Скидка;
			ОбластьМакета.Параметры.СуммаБезСкидки = ЗаголовокСкидки.СуммаСкидки;
		КонецЕсли; 
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Сумма       = 0;
		СуммаНДС    = 0;
		НомерСтроки = 0;
		
		// Выводим строки таблицы Услуги
		
		Пока ВыборкаПоУслугам.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтроки.Параметры.Заполнить(ВыборкаПоУслугам);
			ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
			ОбластьСтроки.Параметры.Товар = ВыборкаПоУслугам.УслугаНаименованиеПолное;
			
			Если ЕстьСкидки Тогда
				
				ОбластьСтроки.Параметры.Скидка         = ?(ЗаголовокСкидки.ТолькоНаценка,- ВыборкаПоУслугам.СуммаСкидки,ВыборкаПоУслугам.СуммаСкидки);
				ОбластьСтроки.Параметры.СуммаБезСкидки = ФормированиеПечатныхФорм.ФорматСумм(ВыборкаПоУслугам.Сумма + ВыборкаПоУслугам.СуммаСкидки);
				
			КонецЕсли;
			
			Сумма    = Сумма    + ВыборкаПоУслугам.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаПоУслугам.СуммаНДС;
			
			ТабличныйДокумент.Вывести(ОбластьСтроки);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		
		ОбластьМакета.Параметры.ВсегоНДС = СуммаНДС;
		Если ЕстьНДС Тогда
			ОбластьМакета.Параметры.НДС = ?(ДанныеПечати.ЦенаВключаетНДС, НСтр("ru = 'В том числе НДС'"), НСтр("ru = ' Сумма НДС'"));
		Иначе
			ОбластьМакета.Параметры.НДС = НСтр("ru='Без налога (НДС)'");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		
		ИтоговаяСтрока = НСтр("ru = 'Всего выполнено работ (оказано услуг) %КоличествоНаименований%, на сумму %СуммаДокумента%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоНаименований%", НомерСтроки);
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаДокумента%", ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
		
		ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
		ОбластьМакета.Параметры.СуммаПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если НЕ ДанныеПечати.ДополнительнаяИнформация="" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
			ОбластьМакета.Параметры.ДополнительнаяИнформация = ДанныеПечати.ДополнительнаяИнформация;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		СведенияОИсполнителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Организация,
			ДанныеПечати.Дата,
			,
			ДанныеПечати.СчетОрганизации
		);
		СведенияОЗаказчике 	 = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Контрагент,
			ДанныеПечати.Дата,
			,
			ДанныеПечати.СчетКонтрагента
		);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.ПредставлениеИсполнителя = СведенияОИсполнителе.ОфициальноеНаименование;
		ОбластьМакета.Параметры.ПредставлениеЗаказчика 	 = СведенияОЗаказчике.ОфициальноеНаименование;
		ОбластьМакета.Параметры.ЮрАдресИсполнителя 		 = СведенияОИсполнителе.ЮридическийАдрес;
		ОбластьМакета.Параметры.ЮрАдресЗаказчика 		 = СведенияОЗаказчике.ЮридическийАдрес;
		ОбластьМакета.Параметры.ИННИсполнителя			 = СведенияОИсполнителе.ИНН;
		ОбластьМакета.Параметры.ИННЗаказчика			 = СведенияОЗаказчике.ИНН;
		ОбластьМакета.Параметры.КППИсполнителя			 = СведенияОИсполнителе.КПП;
		ОбластьМакета.Параметры.КППЗаказчика			 = СведенияОЗаказчике.КПП;
		ОбластьМакета.Параметры.РасчетныйСчетИсполнителя = СведенияОИсполнителе.НомерСчета;
		ОбластьМакета.Параметры.РасчетныйСчетЗаказчика	 = СведенияОЗаказчике.НомерСчета;
		ОбластьМакета.Параметры.КорСчетИсполнителя		 = СведенияОИсполнителе.КоррСчет;
		ОбластьМакета.Параметры.КорСчетЗаказчика		 = СведенияОЗаказчике.КоррСчет;
		ОбластьМакета.Параметры.БанкИсполнителя			 = СведенияОИсполнителе.Банк;
		ОбластьМакета.Параметры.БанкЗаказчика			 = СведенияОЗаказчике.Банк;
		ОбластьМакета.Параметры.БИКИсполнителя			 = СведенияОИсполнителе.БИК;
		ОбластьМакета.Параметры.БИКЗаказчика			 = СведенияОЗаказчике.БИК;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует временную таблицу, содержащую табличную часть по таблице данных документов.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу ТаблицаДанныхДокументов с полями:
//		Ссылка,
//		Валюта.
//
//	ПересчитыватьВВалютуРегл - Булево - Признак необходимости пересчета сумм табличной части в валюте регламентированного учета.
//
Процедура ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, ПересчитыватьВВалютуРегл = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ПересчитыватьВВалютуРегл",       ПересчитыватьВВалютуРегл);
	
	Если ПересчитыватьВВалютуРегл Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ТаблицаДанныхДокументов КАК ДанныеДокументов
		|	ПО
		|		РасчетыСКлиентами.Регистратор = ДанныеДокументов.Ссылка
		|
		|ГДЕ
		|	ДанныеДокументов.Валюта <> &ВалютаРегламентированногоУчета
		|	И РасчетыСКлиентами.Активность
		|";
		ТаблицаАналитик = Запрос.Выполнить().Выгрузить();
		МассивАналитикУчетаПоПартнерам = ТаблицаАналитик.ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
		
		ВзаиморасчетыСервер.ВыполнитьПроведениеДокументовПоРасчетамСКлиентами(МассивАналитикУчетаПоПартнерам);
		
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                                КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки                           КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура                          КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика                        КАК Характеристика,
	|	ТаблицаДокумента.Содержание                            КАК Содержание,
	|	ТаблицаДокумента.Количество                            КАК Количество,
	|	ТаблицаДокумента.СуммаСНДС - ТаблицаДокумента.СуммаНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.СтавкаНДС                             КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаНДС                              КАК СуммаНДС
	|
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокументов КАК ДанныеДокументов
	|	ПО
	|		ТаблицаДокумента.Ссылка = ДанныеДокументов.Ссылка
	|
	|ГДЕ
	|	ДанныеДокументов.Валюта = &ВалютаРегламентированногоУчета
	|	ИЛИ (НЕ &ПересчитыватьВВалютуРегл)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                                 КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки                            КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура                           КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика                         КАК Характеристика,
	|	ТаблицаДокумента.Содержание                             КАК Содержание,
	|	ТаблицаДокумента.Количество                             КАК Количество,
	|	ЕСТЬNULL(СуммыДокументовВВалютеРегл.СуммаБезНДСРегл, 0) КАК СуммаБезНДС,
	|	ТаблицаДокумента.СтавкаНДС                              КАК СтавкаНДС,
	|	ЕСТЬNULL(СуммыДокументовВВалютеРегл.СуммаНДСРегл, 0)    КАК СуммаНДС
	|
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокументов КАК ДанныеДокументов
	|	ПО
	|		ТаблицаДокумента.Ссылка = ДанныеДокументов.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|	ПО
	|		ТаблицаДокумента.Ссылка = СуммыДокументовВВалютеРегл.Регистратор
	|		И ТаблицаДокумента.ИдентификаторСтроки = СуммыДокументовВВалютеРегл.ИдентификаторСтроки
	|
	|ГДЕ
	|	ДанныеДокументов.Валюта <> &ВалютаРегламентированногоУчета
	|	И &ПересчитыватьВВалютуРегл
	|	И СуммыДокументовВВалютеРегл.Активность
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
		
		КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		
	Иначе
		
		КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
			Метаданные.Документы.АктВыполненныхРабот.ПолноеИмя(),
			?(МассивОбъектов.Количество() = 1, МассивОбъектов[0], Неопределено)
		);
		
	КонецЕсли;
		
	Если КомплектПечатныхФорм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураТипов = Новый Соответствие;
	СтруктураТипов.Вставить("Документ.АктВыполненныхРабот", МассивОбъектов);
	
	НастройкаПечати = КомплектПечатныхФорм.Найти("АктВыполненныхРабот", "Имя");
	Если НастройкаПечати <> Неопределено И НастройкаПечати.Печатать Тогда
		РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, НастройкаПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			НастройкаПечати.Имя,
			НастройкаПечати.Представление,
			СформироватьПечатнуюФормуАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати)
		);
	КонецЕсли;
	
	НастройкаПечати = КомплектПечатныхФорм.Найти("СчетФактураАктВыполненныхРабот", "Имя");
	Если НастройкаПечати <> Неопределено И НастройкаПечати.Печатать Тогда
		РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, НастройкаПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			НастройкаПечати.Имя,
			НастройкаПечати.Представление,
			Обработки.ПечатьОбщихФорм.СформироватьПечатнуюФормуСчетФактура(СтруктураТипов, ОбъектыПечати, Новый Структура("ПечатьВВалюте", Ложь))
		);
	КонецЕсли;

	НастройкаПечати = КомплектПечатныхФорм.Найти("СчетФактураАктВыполненныхРаботВВалюте", "Имя");
	Если НастройкаПечати <> Неопределено И НастройкаПечати.Печатать Тогда
		РегистрыСведений.НастройкиПечатиОбъектов.СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, НастройкаПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			НастройкаПечати.Имя,
			НастройкаПечати.Представление,
			Обработки.ПечатьОбщихФорм.СформироватьПечатнуюФормуСчетФактура(СтруктураТипов, ОбъектыПечати, Новый Структура("ПечатьВВалюте", Истина))
		);
	КонецЕсли;
	
	РегистрыСведений.НастройкиПечатиОбъектов.СформироватьКомплектВнешнихПечатныхФорм(
		"Документ.АктВыполненныхРабот",
		МассивОбъектов,
		ПараметрыПечати,
		КоллекцияПечатныхФорм,
		ОбъектыПечати
	);
	
КонецФункции

Функция КомплектПечатныхФорм() Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "АктВыполненныхРабот", "Акт выполненных работ",                     1);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "СчетФактураАктВыполненныхРабот", "Счет-фактура",                   2);
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "СчетФактураАктВыполненныхРаботВВалюте", "Счет-фактура (в валюте)", 0);
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции

#КонецЕсли