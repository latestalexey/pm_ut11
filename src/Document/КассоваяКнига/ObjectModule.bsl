#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Если Документы.Количество() > 0 Тогда
		Документы.Очистить();
	КонецЕсли;
	ИнициализироватьДокумент(Неопределено);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверитьЗаполнениеТабличнойЧасти(Отказ);
	ПроверитьДублиДокумента(Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	Если Дата <> КонецДня(Дата) Тогда
		Дата = КонецДня(Дата);
	КонецЕсли;
	
	Если СуммаПоступления <> Документы.Итог("Приход") Тогда
		СуммаПоступления = Документы.Итог("Приход");
	КонецЕсли;
	
	Если СуммаВыдачи <> Документы.Итог("Расход") Тогда
		СуммаВыдачи = Документы.Итог("Расход");
	КонецЕсли;
	
	ЗаполнитьНомераЛистов();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Инициализаиция и заполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Ответственный = Пользователи.ТекущийПользователь();
	ОтветственныеЛицаСервер.ЗаполнитьОтветственныхЛицДокумента(ЭтотОбъект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ПроверитьЗаполнениеТабличнойЧасти(Отказ)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Документ КАК Документ
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК Таблица
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаДокумента.Документ КАК Документ
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Документ
	|ИМЕЮЩИЕ 
	|	КОЛИЧЕСТВО (*) > 1
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Документ КАК Документ,
	|	ВЫБОР КОГДА НАЧАЛОПЕРИОДА(ТаблицаДокумента.Документ.Дата, ДЕНЬ) <> НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ОтличаетсяДата,
	|	ВЫБОР КОГДА ТаблицаДокумента.Документ.Организация <> &Организация ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ОтличаетсяОрганизация,
	|	Не ТаблицаДокумента.Документ.Проведен КАК ДокументНеПроведен
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|");
	ТаблицаДокумента = Документы.Выгрузить(, "НомерСтроки, Документ");
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Дата", Дата);
	Массив = Запрос.ВыполнитьПакет();
	
	// Массив[0] - временная таблица "ТаблицаДокумента"
	РезультатЗапросаДубли = Массив[1];
	РезультатЗапросаДокументы = Массив[2];
	
	// Проверяем дубли строк в документе.
	Выборка = РезультатЗапросаДубли.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ %1 повторяется в табличной части'"),
			Выборка.Документ
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"Документы[" + (Выборка.НомерСтроки - 1) + "].Документ",
			,
			Отказ
		);
		
	КонецЦикла;
	
	// Проверяем документы, указанные в табличной части.
	Выборка = РезультатЗапросаДокументы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ДокументНеПроведен Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Указан не проведенный документ %1'"),
				Выборка.Документ
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"Документы[" + (Выборка.НомерСтроки - 1) + "].Документ",
				,
				Отказ
			);
		КонецЕсли;
	
		// Проверяем соответствие даты документа и даты листа кассовой книги.
		Если Выборка.ОтличаетсяДата Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Дата документа %1 отличается от даты листа кассовой книги %2'"),
				Выборка.Документ,
				Формат(Дата, "ДЛФ=Д") 
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"Документы[" + (Выборка.НомерСтроки - 1) + "].Документ",
				,
				Отказ
			);
		КонецЕсли;
	
		// Проверяем соответствие организации документа и листа кассовой книги.
		Если Выборка.ОтличаетсяОрганизация Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Организация документа %1 отличается от организации кассовой книги %2'"),
				Выборка.Документ,
				Организация 
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"Документы[" + (Выборка.НомерСтроки - 1) + "].Документ",
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьДублиДокумента(Отказ)
	
	// Проверка дублей документов за день
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 2
	|	КассоваяКнига.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КассоваяКнига КАК КассоваяКнига
	|ГДЕ
	|	КассоваяКнига.Ссылка <> &ТекущийДокумент
	|	И КассоваяКнига.Организация = &Организация
	|	И КассоваяКнига.Проведен
	|	И НачалоПериода(КассоваяКнига.Дата, ДЕНЬ) = &ДатаНач
	|");
	
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Дата));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'На дату %1  уже существует проведенный документ: %2'"),
			Дата, Выборка.Ссылка
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"Дата",
			,
			Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНомераЛистов()
	
	Если Документы.Количество() > 0 Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КассоваяКнигаДокументы.НомерЛиста КАК НомерЛиста,
		|	ДанныеДокумента.Дата КАК Период
		|ИЗ
		|	Документ.КассоваяКнига КАК ДанныеДокумента
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Документ.КассоваяКнига.Документы КАК КассоваяКнигаДокументы
		|	ПО
		|		ДанныеДокумента.Ссылка = КассоваяКнигаДокументы.Ссылка
		|ГДЕ
		|	ДанныеДокумента.Организация = &Организация
		|	И ДанныеДокумента.Проведен
		|	И КассоваяКнигаДокументы.НомерЛиста <> 0
		|	И НАЧАЛОПЕРИОДА(ДанныеДокумента.Дата, ДЕНЬ) < НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
		|	И НАЧАЛОПЕРИОДА(ДанныеДокумента.Дата, ГОД) = НАЧАЛОПЕРИОДА(&Дата, ГОД)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ,
		|	НомерЛиста УБЫВ
		|");
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Дата", Дата);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ПоследнийНомер = Выборка.НомерЛиста;
		Иначе
			ПоследнийНомер = 0;
		КонецЕсли;
		
		НачальныйНомерЛиста = ПоследнийНомер + 1;
		ТекущийНомерЛиста = ПоследнийНомер + 1;
		
		Сч = 0;
		Для Каждого СтрокаТаблицы Из Документы Цикл
			
			Если СтрокаТаблицы.НомерЛиста <> ТекущийНомерЛиста Тогда
				СтрокаТаблицы.НомерЛиста = ТекущийНомерЛиста;
			КонецЕсли;
			
			КонечныйНомерЛиста = ТекущийНомерЛиста;
			
			Сч = Сч + 1;
			Если Сч >= КоличествоДокументовНаЛисте Тогда
				Сч = 0;
				ТекущийНомерЛиста = ТекущийНомерЛиста + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НачальныйНомерЛиста = КонечныйНомерЛиста Тогда
			ТекущиеНомераЛистов = НачальныйНомерЛиста;
		Иначе
			ТекущиеНомераЛистов = Строка(НачальныйНомерЛиста) + "-" + Строка(КонечныйНомерЛиста); 
		КонецЕсли;
		
	Иначе
		ТекущиеНомераЛистов = "";
	КонецЕсли;
		
	Если НомераЛистов <> ТекущиеНомераЛистов Тогда
		НомераЛистов = ТекущиеНомераЛистов;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли