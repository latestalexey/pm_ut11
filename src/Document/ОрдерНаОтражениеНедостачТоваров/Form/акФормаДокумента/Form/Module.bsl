&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение", Объект.Склад, Объект.Помещение));
		ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение);
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОрдерНаОтражениеНедостачТоваров));
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОрдерНаОтражениеНедостачТоваров));
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.Товары,
			Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
			)
		);
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОрдерНаОтражениеНедостачТоваров));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		
		Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение", Объект.Склад, Объект.Помещение));
	ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОрдерНаОтражениеНедостачТоваров));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ОрдерНаОтражениеНедостачТоваров",ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПомещениеПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	СкладПомещениеПриИзмененииСервер();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	Перем ТекущаяСтрока;
	Перем СтруктураДействий;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
		//{ ООО "АСТЭК" Разработчик: Бурыкин Александр 08.11.2013
	ТекущаяСтрока.АкУникальныйИдентификатор = NULL;
	Если ПроверитьЗаполнениеДанных(ТекущаяСтрока.Номенклатура,ТекущаяСтрока.Характеристика) Тогда
		ТекущаяСтрока.АкУникальныйИдентификатор = новый УникальныйИдентификатор;
		ДобавитьГрузовыеМеста(ТекущаяСтрока.Номенклатура,ТекущаяСтрока.Характеристика,ТекущаяСтрока.АкУникальныйИдентификатор,ТекущаяСтрока.акКоличествоПлан);
	Иначе
		Если НЕ ПроверитьНаличиеХарактеристики(текущаяСтрока.номенклатура)  Тогда
			ТекущаяСтрока.номенклатура = NULL;
	//	ТекущаяСтрока.АкУникальныйИдентификатор = NULL;
		КонецЕсли;

	КонецЕсли;
	//}

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	Если ИспользоватьАдресноеХранение Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу" , ТекущаяСтрока.Упаковка);
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
			//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013		
УдалитьГрузовыеМестаБезСсылок();
//}	


КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
		 //{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
	Если новаяСтрока Тогда
		Если НЕ ПроверитьЗаполнениеДанных(Элемент.ТекущиеДанные.Номенклатура,Элемент.ТекущиеДанные.Характеристика) Тогда
			Элемент.ТекущиеДанные.Характеристика = NULL;
			Элемент.ТекущиеДанные.акУникальныйИдентификатор = NULL;
			Если НЕ ПроверитьНаличиеХарактеристики(Элемент.ТекущиеДанные.номенклатура)  Тогда
				Элемент.ТекущиеДанные.номенклатура = NULL;
			КонецЕсли;
			
			Возврат;
		КонецЕсли;	
	КонецЕсли;	 
	 //}

	 
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	


КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкодуВыполнить()

&НаКлиенте
Процедура ПолучитьВес(Команда)
	Перем ТекущаяСтрока;
	
	ВесНоменклатуры = МенеджерОборудованияКлиент.ПолучитьДанныеИзВесов(ЭтаФорма, ТекущаяСтрока);
	
	Если ВесНоменклатуры <> Неопределено Тогда
		
		ТекущаяСтрока.КоличествоУпаковок = ВесНоменклатуры;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы);
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);		
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура СкладПомещениеПриИзмененииСервер()
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение", Объект.Склад, Объект.Помещение));
	ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение);
	
	Если НЕ(ИспользоватьАдресноеХранение) Тогда
		Для Каждого Строка Из Объект.Товары Цикл
			Строка.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			Строка.Количество = Строка.КоличествоУпаковок;
		КонецЦикла;
	КонецЕсли;
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОрдерНаОтражениеНедостачТоваров));
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОрдерНаОтражениеНедостачТоваров));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	Модифицированность = Истина;
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками);

	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками);

	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ТолькоТовары                           = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если СтруктураДействий.МассивСтрокССериями.Количество() = 1
		И НоменклатураКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьФормуУказанияСерий",0.1,Истина);
		
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Серии

&НаКлиенте
Процедура ОткрытьФормуУказанияСерий()
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	
	ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтаФорма);
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
		
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий);

КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
КонецПроцедуры



   /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////      ФУНКЦИИ ДЛЯ РАБОТЫ С ГРУЗОВЫМИ МЕСТАМИ   ///////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
  &НаСервере
Процедура ДобавитьГрузовыеМеста(Номенклатура,Характеристика,уникальныйИдентификатор,КоличествоНоменклатуры)
	ЗапросРегистраГрузМест = новый запрос;
	Если ПроверитьНаличиеХарактеристики(номенклатура) Тогда
				ЗапросРегистраГрузМест.Текст = "ВЫБРАТЬ
				|	НоменклатураакГрузовыеМеста.Ссылка КАК номенклатура,
				|	НоменклатураакГрузовыеМеста.ГрузовоеМесто,
				|	НоменклатураакГрузовыеМеста.Количество,
				|	ХарактеристикиНоменклатуры.Ссылка
				|ИЗ
				|	Справочник.Номенклатура.акГрузовыеМеста КАК НоменклатураакГрузовыеМеста,
				|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
				|ГДЕ
				|	НоменклатураакГрузовыеМеста.Ссылка = &Номенклатура
				|	И ХарактеристикиНоменклатуры.Ссылка = &ХарактеристикаНоменклатуры";
				
				ЗапросРегистраГрузМест.УстановитьПараметр("Номенклатура",номенклатура);
				ЗапросРегистраГрузМест.УстановитьПараметр("ХарактеристикаНоменклатуры",Характеристика);
				
				РегистрМест = ЗапросРегистраГрузМест.Выполнить().Выгрузить();
			ИНАЧЕ
				ЗапросРегистраГрузМест.Текст ="ВЫБРАТЬ
				|	НоменклатураакГрузовыеМеста.Ссылка КАК номенклатура,
				|	НоменклатураакГрузовыеМеста.ГрузовоеМесто,
				|	НоменклатураакГрузовыеМеста.Количество
				|ИЗ
				|	Справочник.Номенклатура.акГрузовыеМеста КАК НоменклатураакГрузовыеМеста
				|ГДЕ
				|	НоменклатураакГрузовыеМеста.Ссылка = &Номенклатура";
								
				ЗапросРегистраГрузМест.УстановитьПараметр("Номенклатура",Номенклатура);
			
				
				РегистрМест = ЗапросРегистраГрузМест.Выполнить().Выгрузить();
				
			КонецЕсли;
			
			Если ПроверитьНаличиеХарактеристики(номенклатура) Тогда
				ЗапросШтрихкодов = новый запрос;			
				ЗапросШтрихкодов.Текст =  "ВЫБРАТЬ
				                          |	акШтрихкодыГрузовыхМест.Номенклатура,
				                          |	акШтрихкодыГрузовыхМест.ХарактеристикаНоменклатуры,
				                          |	акШтрихкодыГрузовыхМест.ШтрихкодГрузовогоМеста,
				                          |	акШтрихкодыГрузовыхМест.ЗаказКлиента,
				                          |	акШтрихкодыГрузовыхМест.НазваниеГрузовогоМеста
				                          |ИЗ
				                          |	РегистрСведений.акШтрихкодыГрузовыхМест КАК акШтрихкодыГрузовыхМест
				                          |ГДЕ
				                          |	акШтрихкодыГрузовыхМест.Номенклатура = &Номенклатура
				                          |	И акШтрихкодыГрузовыхМест.ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры";
				
				ЗапросШтрихкодов.УстановитьПараметр("Номенклатура",Номенклатура);
				ЗапросШтрихкодов.УстановитьПараметр("ХарактеристикаНоменклатуры",Характеристика);
				
				ТаблицаШтрихкодов =ЗапросШтрихкодов.Выполнить().Выгрузить();
			ИНАЧЕ
				ЗапросШтрихкодов = новый запрос;			
				ЗапросШтрихкодов.Текст =  "ВЫБРАТЬ
				|	акШтрихкодыГрузовыхМест.Номенклатура,
				|	акШтрихкодыГрузовыхМест.ХарактеристикаНоменклатуры,
				|	акШтрихкодыГрузовыхМест.ШтрихкодГрузовогоМеста,
				|	акШтрихкодыГрузовыхМест.ЗаказКлиента,
				|	акШтрихкодыГрузовыхМест.НазваниеГрузовогоМеста
				|ИЗ
				|	РегистрСведений.акШтрихкодыГрузовыхМест КАК акШтрихкодыГрузовыхМест
				|ГДЕ
				|	акШтрихкодыГрузовыхМест.Номенклатура = &Номенклатура";
				
				ЗапросШтрихкодов.УстановитьПараметр("Номенклатура",номенклатура);
				
				ТаблицаШтрихкодов =ЗапросШтрихкодов.Выполнить().Выгрузить();
				
			КонецЕсли;
			Для Каждого СтрокаРегистра ИЗ РегистрМест Цикл
				НоваяСтрокаГрузовогоМеста = Объект.акГрузовыеМеста.Добавить();			
				НоваяСтрокаГрузовогоМеста.номенклатура =  СтрокаРегистра.номенклатура;
				НоваяСтрокаГрузовогоМеста.Характеристика =   характеристика;
				НоваяСтрокаГрузовогоМеста.НаименованиеГрузовогоМеста =  СтрокаРегистра.ГрузовоеМесто;				
				НоваяСтрокаГрузовогоМеста.КоличествоПринять =  КоличествоНоменклатуры * СтрокаРегистра.количество;    
				НоваяСтрокаГрузовогоМеста.КоличествоПринято =  0;
				НоваяСтрокаГрузовогоМеста.акУникальныйИдентификатор = УникальныйИдентификатор;
				
				
				ВыбранныйШтрихкод = новый Структура("НазваниеГрузовогоМеста,ХарактеристикаНоменклатуры,ЗаказКлиента",СтрокаРегистра.ГрузовоеМесто,Характеристика.ссылка,Объект.акЗаказКлиента);
				МассивШтрихкодов = ТаблицаШтрихкодов.НайтиСтроки(ВыбранныйШтрихкод);
				Попытка
					НоваяСтрокаГрузовогоМеста.ШтрихКодГрузовогоМеста =  МассивШтрихкодов.Получить(0).штрихкодГрузовогоМеста;
				Исключение
					НоваяСтрокаГрузовогоМеста.ШтрихКодГрузовогоМеста = "";
				КонецПопытки;
				
			КонецЦикла;								
				
КонецПроцедуры	
	//}	
	
	//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
  &НаКлиенте
Процедура УдалитьГрузовыеМестаБезСсылок()
	
	
	Для каждого СтрокаГрузовыеМеста Из Объект.акГрузовыеМеста Цикл
		Отбор = новый структура("акУникальныйИдентификатор,Характеристика",СтрокаГрузовыеМеста.акУникальныйИдентификатор,СтрокаГрузовыеМеста.Характеристика);
		Если Объект.Товары.НайтиСтроки(Отбор).количество() = 0 Тогда
			Для каждого Строка Из Объект.акГрузовыеМеста.НайтиСтроки(Отбор) Цикл
				Объект.акГрузовыеМеста.удалить(Строка);
			КонецЦикла;
	
		КонецЕсли;		
	КонецЦикла;
	

КонецПроцедуры  
 //}

  //{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
   &НаСервере
Процедура ПересчитатьГрузовыеМестаПланТовара()

	///
	Для каждого СтрокаТовары Из  Объект.Товары Цикл	  
		ЗапросРегистраГрузМест = новый Запрос;
		ЗапросРегистраГрузМест.Текст = "ВЫБРАТЬ
		|	ГрузовыеМеста.Владелец,
		|	ГрузовыеМеста.Ссылка,
		|	ГрузовыеМеста.Количество
		|ИЗ
		|	Справочник.акГрузовыеМеста КАК ГрузовыеМеста
		|ГДЕ
		|	ГрузовыеМеста.Владелец = &Номенклатура";
		
		ЗапросРегистраГрузМест.УстановитьПараметр("Номенклатура",СтрокаТовары.Номенклатура);
		
		ГрузовыеМеста =  ЗапросРегистраГрузМест.Выполнить().Выгрузить();
		
		Для Каждого Строка ИЗ ГрузовыеМеста Цикл
			Номенклатура = Строка.владелец;
			НаименованиеГрузовогоМеста = Строка.ссылка;
			КоличествоПринятьНовое   = Строка.количество;
			Для каждого ГрузовоеМесто Из Объект.акГрузовыеМеста Цикл 
				Если  ГрузовоеМесто.Номенклатура = Номенклатура И
					ГрузовоеМесто.НаименованиеГрузовогоМеста = НаименованиеГрузовогоМеста Тогда
					ГрузовоеМесто.КоличествоПринять =  СтрокаТовары.акКоличествоПлан * КоличествоПринятьНовое;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ПересчитатьГрузовыеМеста();
КонецПроцедуры    
  //}

 //{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
// Пересчитывает количество грузовых мест которые надо принять в табличной части товары прходного ордера
&НаСервере
Процедура ПересчитатьГрузовыеМеста()	
	
	
Для каждого СтрокаТовары Из  Объект.Товары Цикл		
	
	//Пересчет мест План и Факт в таблице ТОВАРЫ	
	Номенклатура = СтрокаТовары.Номенклатура;
	Характеристика = СтрокаТовары.Характеристика;	
	СтрокаТовары.акколичествоГрузовыхМестПлан =0;
	СтрокаТовары.акколичествоГрузовыхМестФакт = 0;
	СтрокаТовары.количествоУпаковок=0;
	Значение = 1000; 
	
	
	Отбор = новый структура("акУникальныйИдентификатор,Номенклатура",СтрокаТовары.акУникальныйИдентификатор,СтрокаТовары.Номенклатура);
	Для каждого СтрокаГрузовыеМеста Из Объект.акГрузовыеМеста.НайтиСтроки(Отбор) Цикл		
		СтрокаТовары.акколичествоГрузовыхМестПлан = СтрокаТовары.акколичествоГрузовыхМестПлан + СтрокаГрузовыеМеста.КоличествоПринять; 
		СтрокаТовары.акколичествоГрузовыхМестФакт = СтрокаТовары.акколичествоГрузовыхМестФакт + СтрокаГрузовыеМеста.КоличествоПринято;
		СтрокаТовары.количествоУпаковок = Цел(Мин(Значение,(СтрокаГрузовыеМеста.КоличествоПринято*СтрокаТовары.акКоличествоПлан)/СтрокаГрузовыеМеста.КоличествоПринять));  
		Значение = СтрокаТовары.количествоУпаковок;		
	КонецЦикла;
	
КонецЦикла;


КонецПроцедуры   
 //}


//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
 &НаСервере
 Функция  ПроверитьЗаполнениеДанных(Номенклатура,Характеристика)
	 
	 Если ПроверитьНаличиеХарактеристики(номенклатура) Тогда
		 отбор = новый структура("Номенклатура,Характеристика",Номенклатура,Характеристика);				 
		 Если Объект.Товары.НайтиСтроки(Отбор).количество() > 1 Тогда			 
			 Добавить = Ложь; 
			 Сообщить("Номенклатура не уникальна!");
			 Возврат Добавить;
		 КонецЕсли;
		 
		 Если Номенклатура <> Справочники.Номенклатура.ПустаяСсылка() И     
			 Характеристика <> Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка() И
			 Характеристика <> NULL И
			 Объект.акГрузовыеМеста.НайтиСтроки(Отбор).количество() = 0  Тогда			 
			 Добавить = Истина;
		 Иначе
			 Добавить = Ложь;
		 КонецЕсли;
	 ИНАЧЕ
		 отбор = новый структура("Номенклатура",Номенклатура);		
		 
		 Если Объект.Товары.НайтиСтроки(Отбор).количество() > 1 Тогда			 
			 Добавить = Ложь; 
			 Сообщить("Номенклатура не уникальна!");
			 Возврат Добавить;
		 КонецЕсли;
		 
		 Если Номенклатура <> Справочники.Номенклатура.ПустаяСсылка() И     
			 Объект.акГрузовыеМеста.НайтиСтроки(Отбор).количество() = 0  Тогда			 
			 Добавить = Истина;
		 Иначе
			 Добавить = Ложь;
		 КонецЕсли;	 
	 КонецЕсли;
	 
	 Возврат Добавить;		
КонецФункции   
  //}

//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
&НаСервере
Функция ПроверитьНаличиеХарактеристики(ВыбраннаяНоменклатура);
	
	Если ВыбраннаяНоменклатура.ВидНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда
		ХарактеристикаЕсть = Ложь;
	Иначе
		ХарактеристикаЕсть = Истина;
	КонецЕсли;
	
	Возврат ХарактеристикаЕсть;
КонецФункции
   //}

 
&НаКлиенте
Процедура акГрузовыеМестаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПересчитатьГрузовыеМеста();
КонецПроцедуры


&НаКлиенте
Процедура ТоварыакКоличествоПланПриИзменении(Элемент)
	ПересчитатьГрузовыеМестаПланТовара();
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
		//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013		
УдалитьГрузовыеМестаБезСсылок();
//}	

КонецПроцедуры


&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
	
ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.АкУникальныйИдентификатор = NULL;	
	Если ПроверитьЗаполнениеДанных(ТекущаяСтрока.Номенклатура,ТекущаяСтрока.Характеристика) Тогда		
		ТекущаяСтрока.АкУникальныйИдентификатор = новый УникальныйИдентификатор;
		ДобавитьГрузовыеМеста(ТекущаяСтрока.Номенклатура,ТекущаяСтрока.Характеристика,ТекущаяСтрока.АкУникальныйИдентификатор,ТекущаяСтрока.Количество);
	Иначе 
		УдалитьГрузовыеМестаБезСсылок();
		ТекущаяСтрока.Характеристика = NULL;
	КонецЕсли;
//}	

	//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013
	УдалитьГрузовыеМестаБезСсылок();   	
	//}

КонецПроцедуры
  
