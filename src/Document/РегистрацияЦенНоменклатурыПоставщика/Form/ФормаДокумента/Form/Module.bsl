&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НомерВПределахДня = ДатаДокумента(Объект.Дата) - НачалоДня(ДатаДокумента(Объект.Дата)) + 1;
		Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	Иначе
		НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокумента(Объект.Дата), Объект.Ссылка);
		Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриИзмененииСоглашенияСервер();
	КонецЕсли;
	
	// Подсистема "ЭлектронныеДокументы"
	УстановитьТекстСостоянияЭДНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриИзмененииСоглашенияСервер();
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	Для каждого Товар Из Объект.Товары Цикл
		Если  НЕ ЗначениеЗаполнено(Товар.Характеристика) Тогда
		   Товар.ХарактеристикиИспользуются=Ложь;
			
		
		КонецЕсли; 
		
	
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗакупкиКлиент.ПроверитьСопоставленнуюНоменклатуруПоставщика(Объект, Отказ, НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика = Настройки.Получить("НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика");
	
	Если НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика Тогда
		Элементы.ФормаНеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма" Тогда
		ЗаполнитьТоварыИзПодбораИзВременногоХранилищаСервер(ВыбранноеЗначение.АдресТоваровВХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	// Подсистема "ЭлектронныеДокументы"
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗакупкиКлиент.НачалоВыбораСоглашенияСПоставщиком(
		Элемент,
		СтандартнаяОбработка,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.Дата
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	НомерВПределахДня = РассчитатьНомерВПределахДня(ДатаДокумента(Объект.Дата), Объект.Ссылка);
	Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		РегистрироватьЦеныПоУсловиям = Ложь;
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	ПриИзмененииСоглашенияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерВПределахДняПриИзменении(Элемент)
	
	Объект.Дата = РассчитатьДатуДокумента(ДатаДокумента(Объект.Дата), НомерВПределахДня);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыКлиент.ОткрытьАктуальныйЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗакупкиКлиент.ПриВыбореНоменклатурыПоставщика(Объект, Поле, "ТоварыНоменклатураПоставщика", НСтр("ru = 'Поставщик'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПоставщикаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗакупкиКлиент.ЗаполнитьСписокВыбораНоменклатурыПоставщика(Объект.Партнер, Элементы.Товары.ТекущиеДанные, Элементы.ТоварыНоменклатураПоставщика.СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу" , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Объект, НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
   КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Объект, НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Объект, НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика");
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(Объект, НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьУсловиеЦеныВыделенныхСтрок(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		
		Предупреждение(НСтр("ru = 'Необходимо выбрать соглашение'"));
		
	ИначеЕсли Объект.Товары.Количество() = 0 Тогда
		
		Предупреждение(НСтр("ru = 'Отсутствуют строки в списке Товары'"));
		
	ИначеЕсли Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		
		Предупреждение(НСтр("ru = 'Необходимо выделить строки в списке Товары для заполнения'"));
		
	Иначе
	
		СтруктураОтбор = Новый Структура("Владелец", Объект.Соглашение);
		УсловиеЦеныПоставщика = ОткрытьФормуМодально("Справочник.УсловияЦенПоставщиков.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбор));
		
		Если ЗначениеЗаполнено(УсловиеЦеныПоставщика) Тогда
			
			ЗаполнитьЦеныВыделенныхСтрокПоУсловиюЦеныСервер(УсловиеЦеныПоставщика);
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Условие цены заполнено'"),
				,
				СтрЗаменить(НСтр("ru='Условие цены ""%УсловиеЦеныПоставщика%"" заполнены'"), "%УсловиеЦеныПоставщика%", УсловиеЦеныПоставщика),
				БиблиотекаКартинок.Информация32
			);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНоменклатуруПоставщика(Команда)
	
	ЗакупкиКлиент.ПоказатьНоменклатуруПоставщика(Объект.Партнер, Объект.Ссылка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика(Команда)
	
	НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика = Не НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика;
	Элементы.ФормаНеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика.Пометка = НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)

	ПараметрыФормы = Новый Структура;

	ПараметрыФормы.Вставить("Документ",   Объект.Ссылка);
	ПараметрыФормы.Вставить("Партнер",    Объект.Партнер);
	ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "Валюта")
	Иначе
		Валюта = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Валюта",                                  Валюта);
	ПараметрыФормы.Вставить("Дата",                                    ДатаДокумента(Объект.Дата));
	ПараметрыФормы.Вставить("РегистрироватьЦеныПоУсловиям",            РегистрироватьЦеныПоУсловиям);
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",       Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество",     Истина);
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументЗакупки.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуруПоНоменклатуреПоставщика(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьНаличиеСтрокВСписке(Объект.Товары, "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресТоваровВХранилище = ПоместитьТоварыВоВременноеХранилищеСервер();
	РезультатВыбора = ЗакупкиКлиент.ОткрытьФормуЗаполненияНоменклатурыПоставщика(АдресТоваровВХранилище, ЭтаФорма);
	Если РезультатВыбора <> Неопределено Тогда
		ЗаполнитьТоварыИзВременногоХранилищаСервер(РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтбору(Команда)
	
	ПараметрыФормы = Новый Структура("УникальныйИдентификатор", УникальныйИдентификатор);
	АдресВоВременномХранилище = ОткрытьФормуМодально("Обработка.ПодборТоваровПоОтбору.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	Если ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
		ЗаполнитьТоварыИзПодбораИзВременногоХранилищаСервер(АдресВоВременномХранилище);
	КонецЕсли;
	ЗаполнитьНоменклатуруПоставщика();
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоДинамикеЦен(Команда)
	
	ЗакупкиКлиент.ОткрытьОтчетПоДинамикеЦенПоставщика(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Функция ПриИзмененииСоглашенияСервер()
	
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Соглашение, "РегистрироватьЦеныПоУсловиям,ХозяйственнаяОперация");
	РегистрироватьЦеныПоУсловиям = РеквизитыСоглашения.РегистрироватьЦеныПоУсловиям;
	ХозяйственнаяОперация        = РеквизитыСоглашения.ХозяйственнаяОперация;
	
	Элементы.ТоварыЗаполнитьУсловиеЦеныВыделенныхСтрок.Видимость = РегистрироватьЦеныПоУсловиям;
	
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(ХозяйственнаяОперация, Элементы.ТоварыНоменклатура);
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(ХозяйственнаяОперация, Элементы.ТоварыНоменклатураПоставщика);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	Для каждого Товар Из Объект.Товары Цикл
		Если  НЕ ЗначениеЗаполнено(Товар.Характеристика) Тогда
		   Товар.ХарактеристикиИспользуются=Ложь;
			
		
		КонецЕсли; 
		
	
	КонецЦикла;	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ЭлектронныеДокументы"

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ЗаполнитьЦеныВыделенныхСтрокПоУсловиюЦеныСервер(УсловиеЦеныПоставщика)

	Для Каждого ТекущаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.УсловиеЦеныПоставщика = УсловиеЦеныПоставщика;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыИзПодбораИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	Товары = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Для Каждого ТекСтрока Из Товары Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
		)
	);
		Для каждого Товар Из Объект.Товары Цикл
		Если  НЕ ЗначениеЗаполнено(Товар.Характеристика) Тогда
		   Товар.ХарактеристикиИспользуются=Ложь;
			
		
		КонецЕсли; 
		
	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеСервер()
	
	Возврат ЗакупкиСервер.ПоместитьТоварыВоВременноеХранилище(Объект.Товары);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТоварыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для каждого ТекСтрока Из ТаблицаТоваров Цикл
		
		МассивСтрокКоллекции = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", ТекСтрока.НомерСтроки));
		Если МассивСтрокКоллекции.Количество() <> 1 Тогда
			Продолжить;
		Иначе
			СтрокаКоллекции = МассивСтрокКоллекции[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаКоллекции, ТекСтрока, "Номенклатура, Характеристика, Упаковка");
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить(
			"ПроверитьСопоставленнуюНоменклатуруПоставщика",
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
				Объект,
				НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика
			)
		);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаКоллекции, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
		Для каждого Товар Из Объект.Товары Цикл
		Если  НЕ ЗначениеЗаполнено(Товар.Характеристика) Тогда
		   Товар.ХарактеристикиИспользуются=Ложь;
			
		
		КонецЕсли; 
		
	
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьНомерВПределахДня(ДатаДокумента, Ссылка)
	
	Возврат Документы.РегистрацияЦенНоменклатурыПоставщика.РассчитатьНомерВПределахДня(ДатаДокумента, Ссылка);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДатаДокумента(Дата)
	
	Возврат ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьДатуДокумента(ДатаДокумента, НомерВПределахДня)
	
	Возврат НачалоДня(ДатаДокумента) + НомерВПределахДня - 1;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатуруПоставщика()

	ЗакупкиСервер.ЗаполнитьНоменклатуруПоставщикаВТаблице( Объект.Товары, Объект.Партнер);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПартнераСервер()

	УсловияЗакупокПоУмолчанию = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(
		Объект.Партнер,
		Новый Структура("ТолькоДляЗакупки,ТолькоДействующее", Ложь, Ложь)
	);
	
	Если УсловияЗакупокПоУмолчанию <> Неопределено Тогда
		
		Если Объект.Соглашение <> УсловияЗакупокПоУмолчанию.Соглашение
			И ЗначениеЗаполнено(УсловияЗакупокПоУмолчанию.Соглашение) Тогда
		
			Объект.Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
			РегистрироватьЦеныПоУсловиям = УсловияЗакупокПоУмолчанию.РегистрироватьЦеныПоУсловиям;
			
		Иначе
			Объект.Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
		КонецЕсли;
			
	Иначе
		Объект.Соглашение = Неопределено;
		РегистрироватьЦеныПоУсловиям = Ложь;
	КонецЕсли;
	
КонецПроцедуры


// -----------------------------------  ЗАГРУЗКА ПРАЙС ЛИСТА ДМ ЦЕН НА НОМЕНКЛАТУРУ ИЗ ЕКСЕЛ ФАЙЛА  ---------------------------------------
  &НаКлиенте
  Процедура ЗагрузитьИзПрайсЛистаДМ(Команда)
	  
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ПодключитьРасширениеРаботыСФайлами()Тогда
		ПрисоединенныеФайлыКлиент.ОткрытьФормуВыбораФайлов(Объект.Ссылка, Элементы.Товары);
	Иначе
		Предупреждение(НСтр("ru = 'Расширение работы с файлами не подключено.'"));
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьДанныеФайла(ПрисоединенныйФайл,УникальныйИдентификатор)
	
	ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл,УникальныйИдентификатор, Истина);
	Возврат ДанныеФайла;
	
КонецФункции

 Функция ПолучитьХаракетеристикуАдмин(Номенклатура)
	ЗАпрос = Новый ЗАпрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|ГДЕ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка.Владелец = &Владелец
	|	И ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение = &Значение";
	Запрос.УстановитьПараметр("Владелец",Номенклатура);
	Запрос.УстановитьПараметр("Значение",Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию("БУК (ЛДСП)"));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	Возврат Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	
КонецФункции

&НаСервере
Функция ЗагрузитьИзПрайсЛистаДМНаСервере( МассивСтруктурТовары)
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	Объект.Товары.Очистить();
	КешГрупп = Новый Соответствие;
	Для Каждого СтруктураТовар Из МассивСтруктурТовары Цикл
		//в процедуре проверяется номенклатура и созадется если нужно
		Номенклатура = СоздатьНоменклатуру(СтруктураТовар,КешГрупп);		
		//Товар = Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",СтруктураТовар.Артикул);
		строка=Объект.Товары.Добавить();
		строка.Номенклатура=Номенклатура;
		строка.Цена=СтруктураТовар.Цена;
		Если СтруктураТовар.ЭтоАдминистративнаяМебель Тогда
			строка.Характеристика=ПолучитьХаракетеристикуАдмин(Номенклатура);
			строка.ХарактеристикиИспользуются=истина;
		Иначе
			строка.Характеристика=ПустаяХарактеристика;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

 &НаКлиенте
Функция ПолучитьГруппу(РабочийЛист,Знач НомерСтроки,Уровень)
	Если Уровень < 2 Тогда
		Возврат "";
	КонецЕсли;	
	
	Пока НомерСтроки > 0 Цикл
		
		ТекущийУровень = РабочийЛист.Rows(НомерСтроки).OutlineLevel;
		Если ТекущийУровень < Уровень Тогда
			ИмяГруппы = СокрЛП(РабочийЛист.Cells(НомерСтроки, 1).Value)+
			            СокрЛП(РабочийЛист.Cells(НомерСтроки, 2).Value);
			Если (ИмяГруппы <> "") И (ИмяГруппы <> "№ п.п.") Тогда
				Возврат ИмяГруппы;
			КонецЕсли;
		КонецЕсли;
		НомерСтроки = НомерСтроки - 1;
	
	КонецЦикла;
	Возврат "";

КонецФункции


&НаКлиенте
Функция ПолучитьЗначениеОбъедененнойЯчеки(РабочийЛист,НомерСтроки,НомерСтолбца)
	Если  РабочийЛист.Cells(НомерСтроки, НомерСтолбца).MergeCells  Тогда
		Возврат РабочийЛист.Cells(РабочийЛист.Cells(НомерСтроки, НомерСтолбца).MergeArea.Row, 
		                          РабочийЛист.Cells(НомерСтроки, НомерСтолбца).MergeArea.Column).Value;
	Иначе
		Возврат РабочийЛист.Cells(НомерСтроки,НомерСтолбца).Value;
	КонецЕсли
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьИзПрайсЛистаДМНаКлиенте(ПрисоединенныйФайл)
	
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
	Исключение
		СообщениеОбОшибке = НСтр("ru = 'Не удалось загрузить цены из файла Excel. Убедитесь, что на сервере установлена программа Microsoft Excel. Подробности: '")
		+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	ДанныеФайла                = ПолучитьДанныеФайла(ПрисоединенныйФайл,УникальныйИдентификатор);
	РабочийКаталогПользователя = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	ИмяВременногоФайла         = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
	Если Не ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
		
		ПрисоединенныеФайлыКлиент.ПолучитьФайлВРабочийКаталог(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
		ДанныеФайла.ОтносительныйПуть,
		ДанныеФайла.ДатаМодификацииУниверсальная,
		ДанныеФайла.ИмяФайла,
		РабочийКаталогПользователя,
		ИмяВременногоФайла
		);
		
	КонецЕсли;
	
	Попытка
		Workbook      = COMОбъект.Workbooks.Open(ИмяВременногоФайла);
		//SettingsSheet = Workbook.Worksheets(1);
		//Sheet         = Workbook.Worksheets(2);
		Sheet         = Workbook.Worksheets(1);
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось прочитать данные из файла. Подробности: '")
		+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	// Массивы структур
	МассивСтруктурВидыЦен = Новый Массив;
	МассивСтруктурТовары  = Новый Массив;
	
	ЕстьДополнительнаяКолонка = Ложь;
	
	// Загрузка данных
	Попытка
		// Загрузка цен номенклатуры
		НомерСтроки = 1;
		КешТекущийУровень = 0;
		КешГруппа = "";
		//В разных версиях Excel получаются по-разному, поэтому сначала определим версию Excel
		Версия = Лев(COMОбъект.Version,Найти(COMОбъект.Version,".")-1);
		Если Версия = "8" тогда
			ВсегоСтрок   = COMОбъект.Cells.CurrentRegion.Rows.Count;
			ВсегоКолонок = Макс(COMОбъект.Cells.CurrentRegion.Columns.Count, 13);
		Иначе
			ВсегоСтрок   = COMОбъект.Cells(1,1).SpecialCells(11).Row;
			ВсегоКолонок = COMОбъект.Cells(1,1).SpecialCells(11).Column;   
		Конецесли;			
		// 			
		ВремСтрока = Неопределено;
		//Пока (СокрЛП(Sheet.Cells(НомерСтроки, 1).Value)<>"999")  Цикл
		Пока НомерСтроки<=ВсегоСтрок  Цикл
			ТекущийУровень = Sheet.Rows(НомерСтроки).OutlineLevel;
			//при попадании на уровено 2 и ниже отрабатываем
			//поднимаемся вверх по строчкам и ищем группу
			Если ТекущийУровень <> КешТекущийУровень Тогда
				КешТекущийУровень = ТекущийУровень;
				КешГруппа = ПолучитьГруппу(Sheet,НомерСтроки,ТекущийУровень);
				ВремСтрока = Неопределено;
			КонецЕсли;
			//если номер строки не задан, и нет артикула - это не товар
			ПроверочноеЧисло = 0;
			Попытка
				ПроверочноеЧисло = Число(СокрЛП(Sheet.Cells(НомерСтроки, 1).Value));
			Исключение
				
			КонецПопытки;
			НетАртикула = (СокрЛП(Sheet.Cells(НомерСтроки, 4).Value)="");
			Если ПроверочноеЧисло <=0 И НетАртикула Тогда
				НомерСтроки = НомерСтроки + 1;
				Продолжить;
			КонецЕсли;
			//№ п.п.
			Если  Найти(СокрЛП(Sheet.Cells(НомерСтроки, 1).Value),"№ п.п.")>0 Тогда
				НомерСтроки = НомерСтроки + 1;
				Продолжить;					
			КонецЕсли;
			//				
			
			НоваяСтрока = Новый Структура("ИдентификаторНоменклатура, 
			|ИдентификаторХарактеристика, 
			|ИдентификаторУпаковка, 
			|ИдентификаторВидЦены, 
			|Цена,
			|Группа,
			|Размер,
			|Наименование,
			|ЭтоАдминистративнаяМебель,
			|Примечание");
			
			НоваяСтрока.ИдентификаторНоменклатура   = Sheet.Cells(НомерСтроки, 4).Value;
			НоваяСтрока.Цена                        =  Sheet.Cells(НомерСтроки, 5).Value;//Sheet.Cells(НомерСтроки, СтрокаТЧ.НомерКолонкиЦена).Value;
			НоваяСтрока.Цена=СТрЗаменить(СокрЛП(НоваяСтрока.Цена)," ","");
			НоваяСтрока.Цена=СТрЗаменить(СокрЛП(НоваяСтрока.Цена),Символы.НПП,"");
			НоваяСтрока.Примечание                  =  Sheet.Cells(НомерСтроки, 6).Value;
			
			НоваяСтрока.Группа = КешГруппа;
			Если КешГруппа = "АДМИНИСТРАТИВНАЯ МЕБЕЛЬ" Тогда
				НоваяСтрока.ЭтоАдминистративнаяМебель  = Истина;
			Иначе
				НоваяСтрока.ЭтоАдминистративнаяМебель  = Ложь;
			КонецЕсли;
			//могут быть объединенные
			НоваяСтрока.Размер = ПолучитьЗначениеОбъедененнойЯчеки(Sheet,НомерСтроки, 3);
			НоваяСтрока.Наименование = ПолучитьЗначениеОбъедененнойЯчеки(Sheet,НомерСтроки, 2);
			//могут быть пропуски, тогда берем верхнее название
			Если ВремСтрока <> Неопределено Тогда
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Наименование) Тогда
					НоваяСтрока.Наименование = ВремСтрока.Наименование;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Размер) Тогда
					НоваяСтрока.Размер = ВремСтрока.Размер;
				КонецЕсли;
			КонецЕсли;
			//для доп материалов
			Если НоваяСтрока.Размер = НоваяСтрока.Наименование Тогда
				НоваяСтрока.Размер="";
				НоваяСтрока.ИдентификаторНоменклатура="";
			КонецЕсли;
			Если Найти(НоваяСтрока.ИдентификаторНоменклатура,"ДМ")=0 Тогда
				НоваяСтрока.ИдентификаторНоменклатура="";
			КонецЕсли;
			
			МассивСтруктурТовары.Добавить(НоваяСтрока);
			ВремСтрока = НоваяСтрока;
			
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		Workbook.Close();
		
	Исключение
		COMОбъект.Quit();
		COMОбъект = 0;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось прочитать данные из файла. Подробности: '")
		+ КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
	COMОбъект.Quit();
	COMОбъект = 0;
	
	
	ЗагрузитьИзПрайсЛистаДМНаСервере(МассивСтруктурТовары);
	Предупреждение("Загрузка завершена.");
КонецФункции

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РегистрацияЦенНоменклатурыПоставщикаПрисоединенныеФайлы") Тогда
		
		ЗагрузитьИзПрайсЛистаДМНаКлиенте(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Вставить содержимое обработчика
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//1С-ИТ Чечин Петр.
&НаСервере
Функция ПолучитьГруппуНом(Наименование,Родитель = Неопределено)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование = &Наименование
		|	И Номенклатура.ЭтоГруппа = ИСТИНА
		|	И НЕ Номенклатура.Ссылка В ИЕРАРХИИ (&СТАРОЕ)";

	Запрос.УстановитьПараметр("Наименование", Наименование);
	Запрос.УстановитьПараметр("СТАРОЕ",  АК_ОбщегоНазначения.ПолучитьГруппуСтарое());

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		НовГруппа = Справочники.Номенклатура.СоздатьГруппу();
		НовГруппа.Наименование = Наименование;
		Если НЕ Родитель=Неопределено Тогда
			НовГруппа.Родитель = Родитель;
		КонецЕсли;
		
		НовГруппа.Записать();
		Возврат НовГруппа.Ссылка;
	КонецЕсли;

КонецФункции

&НаСервере
Функция СоздатьНоменклатуру(СтруктураПараметров,КешГрупп)
	// Поля: ИдентификаторНоменклатура,ИдентификаторХарактеристика, 
	// ИдентификаторУпаковка, ИдентификаторВидЦены, Цена, Группа,
	// Размер, Наименование, ЭтоАдминистративнаяМебель, Примечание
	Если КешГрупп.Получить("ПРОДУКЦИЯ ДОКТОР МЕБЕЛЬ") = Неопределено Тогда
		ГлавнаяГруппа = ПолучитьГруппуНом("ПРОДУКЦИЯ ДОКТОР МЕБЕЛЬ");
		КешГрупп.Вставить("ПРОДУКЦИЯ ДОКТОР МЕБЕЛЬ",ГлавнаяГруппа);
	Иначе
		ГлавнаяГруппа = КешГрупп.Получить("ПРОДУКЦИЯ ДОКТОР МЕБЕЛЬ");
	КонецЕсли;
	
	Если КешГрупп.Получить(СтруктураПараметров.Группа) = Неопределено Тогда
		текГруппа = ПолучитьГруппуНом(СтруктураПараметров.Группа,ГлавнаяГруппа);
		КешГрупп.Вставить(СтруктураПараметров.Группа,текГруппа);
	Иначе
		текГруппа = КешГрупп.Получить(СтруктураПараметров.Группа);
	КонецЕсли;
	
	Возврат ПроверитьСоздатьНоменклатуру(СтруктураПараметров,текГруппа);
	

КонецФункции

&НаСервере
Функция  ПроверитьСоздатьНоменклатуру(СтруктураПараметров,Группа)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	ВЫБОР
		|			КОГДА Номенклатура.Артикул = """"
		|				ТОГДА Номенклатура.Наименование = &Наименование
		|			ИНАЧЕ Номенклатура.Артикул = &Артикул
		|		КОНЕЦ
		|	И Номенклатура.ЭтоГруппа = ЛОЖЬ
		|	И Номенклатура.Родитель = &Родитель
		|	//И НЕ Номенклатура.Ссылка В ИЕРАРХИИ (&СТАРОЕ)";
		
		//Наименование + Размер (Ш*Г*В)+Примечание
		РасчетноеНаименование = Строка(СтруктураПараметров.Наименование)+" "+
		                        (?(Строка(СтруктураПараметров.Размер)<>"",Строка(СтруктураПараметров.Размер)+" ",""))+
								Строка(СтруктураПараметров.Примечание);
								
		РасчетноеНаименование = СокрЛП(РасчетноеНаименование);
		
		Если Найти(РасчетноеНаименование,"в т.ч.НДС 18%") > 0 Тогда
			РасчетноеНаименование = СтрЗаменить(РасчетноеНаименование,"в т.ч.НДС 18%","");		
			СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		Иначе
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
								

		Запрос.УстановитьПараметр("Артикул", СокрЛП(СтруктураПараметров.ИдентификаторНоменклатура));
		Запрос.УстановитьПараметр("Наименование", РасчетноеНаименование);
		Запрос.УстановитьПараметр("Родитель", Группа);
		//Запрос.УстановитьПараметр("СТАРОЕ", АК_ОбщегоНазначения.ПолучитьГруппуСтарое());
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Если НЕ ВыборкаДетальныеЗаписи.Следующий() тогда
			НовНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();	
			НовНоменклатура.Наименование = РасчетноеНаименование;
			НовНоменклатура.НаименованиеПолное = РасчетноеНаименование + " "+СтруктураПараметров.ИдентификаторНоменклатура;
			НовНоменклатура.СтавкаНДС=СтавкаНДС;
			НовНоменклатура.Артикул = СтруктураПараметров.ИдентификаторНоменклатура;
			//
			Запрос = Новый Запрос;
			НовНоменклатура.ВидНоменклатуры=Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Мебель");
			НовНоменклатура.ТипНоменклатуры=Перечисления.ТипыНоменклатуры.Товар;
			
			текЕД = Справочники.ЕдиницыИзмерения.НайтиПоНаименованию("шт");
			НовНоменклатура.ЕдиницаИзмерения = текЕД;
			Если ЗначениеЗаполнено(НовНоменклатура.ВидНоменклатуры) Тогда
				РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НовНоменклатура.ВидНоменклатуры, Новый Структура("ТипНоменклатуры, ГруппаДоступа, ВариантОформленияПродажи, ИспользованиеХарактеристик"));
				ЗаполнитьЗначенияСвойств(НовНоменклатура,РеквизитыОбъекта); //ЭтотОбъект, РеквизитыОбъекта);
				Если НовНоменклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар
					И НовНоменклатура.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
					НаборУпаковок = Справочники.НаборыУпаковок.ПустаяСсылка();
					ИспользоватьУпаковки = Ложь;
					Качество = Перечисления.ГрадацииКачества.Новый;
				КонецЕсли;
				
			КонецЕсли;
			//} 
			
			
			//доп реквизиты
			//производитель
			ДопРеквизит = НовНоменклатура.ДополнительныеРеквизиты.Добавить();
			ДопРеквизит.Свойство=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_Производитель;
			ДопРеквизит.Значение= Справочники.Партнеры.НайтиПоНаименованию("Доктор Мебель ООО");
			ДопРеквизит.ТекстоваяСтрока = Строка(ДопРеквизит.Значение);
			
			//размер
			ДопРеквизит = НовНоменклатура.ДополнительныеРеквизиты.Добавить();
			ДопРеквизит.Свойство=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_ГабаритныеРазмеры;
			ДопРеквизит.Значение= СтруктураПараметров.Размер;
			ДопРеквизит.ТекстоваяСтрока = СтруктураПараметров.Размер;
			
			//группа
			НовНоменклатура.Родитель = Группа;
			НовНоменклатура.ОбменДанными.Загрузка = Истина;
			НовНоменклатура.Записать();
			
			//Характеристики номенклатуры
			Если СтруктураПараметров.Размер <> "" Тогда
				Запрос = Новый Запрос;
				Запрос.Текст ="ВЫБРАТЬ
				|	ЗначенияСвойствОбъектов.Ссылка
				|ИЗ
				|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
				|ГДЕ
				|	ЗначенияСвойствОбъектов.Владелец = &Владелец
				|	И ЗначенияСвойствОбъектов.Наименование ПОДОБНО ""%шагрень%""";
				Запрос.УстановитьПараметр("Владелец",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_Цвет);
				МассивЦветов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
				//МассивЦветов.Добавить(Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка());
				Для Каждого ТекЭлемент Из МассивЦветов Цикл
					//Сообщить(ТекЭлемент);
					Если Строка(ТекЭлемент)="" Тогда
						Продолжить;	
						//Сообщить("(");
					КонецЕсли;					
					новХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
					новХарактеристика.Владелец = НовНоменклатура.Ссылка;
					новХарактеристика.Наименование = Строка(ТекЭлемент);
					новХарактеристика.НаименованиеПолное =  новХарактеристика.Наименование;
					
					цвет = новХарактеристика.ДополнительныеРеквизиты.Добавить();
					цвет.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_Цвет;
					цвет.Значение = ТекЭлемент;
					цвет.ТекстоваяСтрока=Строка(цвет.Значение);
					
					новХарактеристика.Записать();
					
				КонецЦикла;
			КонецЕсли;
		//Создали новую
			Возврат НовНоменклатура.Ссылка;
		//Нашли номенклатуру
		Иначе
			Возврат ВыборкаДетальныеЗаписи.Ссылка;	
		КонецЕсли;
		
КонецФункции



