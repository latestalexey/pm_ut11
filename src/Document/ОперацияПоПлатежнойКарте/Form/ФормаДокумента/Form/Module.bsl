
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекущийЭквайринговыйТерминал = Объект.ЭквайринговыйТерминал;
		УправлениеЭлементамиФормы();
		ПолучитьСписокВыбораВидовПлатежныхКарт();
		Если Параметры.Свойство("Основание") Тогда
			Основание = Параметры.Основание;
		КонецЕсли;
	КонецЕсли;

	ПолучитьСсылкиНаОборудование();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ФинансыКлиент.ПроверитьЗаполнениеДокументаНаОсновании(
			Объект,
			Основание
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		
		ПолучитьРасшифровкуПлатежаИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ТекущийЭквайринговыйТерминал = Объект.ЭквайринговыйТерминал;
	УправлениеЭлементамиФормы();
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ФинансыКлиент.ПересчитатьСуммуДокументаПоРасшифровкеПлатежа(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ОперацияПоПлатежнойКарте", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ФинансыКлиент.ОчиститьСуммуВзаиморасчетовРасшифровкиПлатежа(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	СтруктураРеквизитов = ПолучитьРеквизитыЭквайринговогоТерминала(Объект.ЭквайринговыйТерминал);
	
	Если НЕ ФинансыКлиент.НеобходимПересчетВВалюту(Объект, Объект.Валюта, СтруктураРеквизитов.Валюта) Тогда
		
		ЭквайринговыйТерминалПриИзмененииНаСервере(СтруктураРеквизитов, Ложь);
		ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		
	ИначеЕсли ФинансыКлиент.РазрешенПересчетВВалюту(СтруктураРеквизитов.Валюта) Тогда
		
		ТекущаяВалюта = Объект.Валюта;
		ЭквайринговыйТерминалПриИзмененииНаСервере(СтруктураРеквизитов, Истина);
		ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ТекущаяВалюта, Объект.Валюта);
		
	Иначе
		
		Объект.ЭквайринговыйТерминал = ТекущийЭквайринговыйТерминал;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРасходованиеДенежныхСредствПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
		ЗаявкаНаРасходованиеДенежныхСредствПриИзмененииСервер();
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежаПодборПоОстаткам.Доступность = Не ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ РАСШИФРОВКА ПЛАТЕЖА

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер);
	КонецЕсли;
	ФинансыКлиент.РасшифровкаПлатежаПриНачалеРедактирования(
		Объект,
		Партнер,
		ДоговорКонтрагента,
		СтрокаТаблицы,
		НоваяСтрока,
		Копирование
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту") Тогда
		
		СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		ФинансыКлиент.ДокументРасчетовНачалоВыбора(
			Объект.Организация,
			Неопределено, // Партнер
			Объект.Контрагент,
			Неопределено, // Соглашение
			ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация),
			Ложь, // ВыборОснованияПлатежа
			Элемент,
			СтандартнаяОбработка
		);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	СтрокаТаблицы.ВалютаВзаиморасчетов = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеПлатежа) Тогда
		СтрокаТаблицы.Заказ = Неопределено;
		ФинансыКлиент.УстановитьПустуюСсылкуНаЗаказ(СтрокаТаблицы.Заказ, ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(
		Объект.Организация,
		Неопределено, // Партнер
		Объект.Контрагент,
		Неопределено, // Соглашение
		ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация),
		Истина, // ВыборОснованияПлатежа
		Элемент,
		СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора, Объект.Организация, Объект.Контрагент, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора, Объект.Организация, Объект.Контрагент, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказОчистка(Элемент, СтандартнаяОбработка)
	
	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ЭквайринговыйТерминал", "Эквайринговый терминал");
	СтруктураРеквизитов.Вставить("Контрагент");
	СтруктураРеквизитов.Вставить("ХозяйственнаяОперация", "Операция");
	
	Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтаФорма, Неопределено, СтруктураРеквизитов) Тогда

		АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
		ПараметрыПодбора = Новый Структура("
			|АдресПлатежейВХранилище, 
			|Организация, 
			|Контрагент,
			|Валюта,
			|СуммаДокумента,
			|ДатаДокумента,
			|ХозяйственнаяОперация",
			АдресПлатежейВХранилище,
			Объект.Организация, 
			Объект.Контрагент,
			Объект.Валюта,
			Объект.СуммаДокумента,
			Объект.Дата,
			Объект.ХозяйственнаяОперация
		);
		ОткрытьФорму(
			"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
			ПараметрыПодбора, 
			ЭтаФорма
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьКартой(Команда)

	ОчиститьСообщения();
	
	ИдентификаторУстройстваЭТ = Неопределено;
	ИдентификаторУстройстваФР = Неопределено;
	ОписаниеОшибки            = "";

	СуммаОперации       = 0;
	НомерКарты          = "";
	НомерСсылкиОперации = "";
	НомерЧекаЭТ         = "";
	СтрокаСлипЧека      = "";

	Если Объект.ОплатаВыполнена Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для данного документа уже выполнена оплата платежной картой.'"));
		Возврат;
	КонецЕсли;

	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Выбор устройства ЭТ
		ИдентификаторУстройстваЭТ = ?(ЗначениеЗаполнено(ЭквайринговыйТерминал),
		                              ЭквайринговыйТерминал,
		                              МенеджерОборудованияКлиент.ВыбратьУстройство("ЭквайринговыйТерминал",
		                               НСтр("ru='Выберите эквайринговый терминал'"),
		                               НСтр("ru='Эквайринговый терминал не подключен'")));

		Если ИдентификаторУстройстваЭТ <> Неопределено Тогда
			// Выбор устройства ФР
			ИдентификаторУстройстваФР = МенеджерОборудованияКлиент.ВыбратьУстройство("ФискальныйРегистратор",
			                             НСтр("ru='Выберите фискальный регистратор'"),
			                             НСтр("ru='Фискальный регистратор не подключен'"));

			Если ИдентификаторУстройстваФР <> Неопределено Тогда
				// Подключение устройства ЭТ
				РезультатЭТ = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                                ИдентификаторУстройстваЭТ,
				                                                                                ОписаниеОшибки);

				Если РезультатЭТ Тогда
					// Подключение устройства ФР
					РезультатФР = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
					                                                                                ИдентификаторУстройстваФР,
					                                                                                ОписаниеОшибки);

					Если РезультатФР Тогда

						// Предварительно авторизуем операцию
						ПараметрыФормы = Новый Структура("Сумма, ПределСуммы", Объект.СуммаДокумента, Объект.СуммаДокумента);
						ФормаАвторизации = ПолучитьФорму("Справочник.ПодключаемоеОборудование.Форма.ФормаАвторизацииЭТ", ПараметрыФормы);
						Ответ = ФормаАвторизации.ОткрытьМодально();

						Если Ответ = КодВозвратаДиалога.ОК Тогда
							ВходныеПараметры  = Новый Массив();
							ВыходныеПараметры = Неопределено;

							ВходныеПараметры.Добавить(ФормаАвторизации.Параметры.ПараметрыФормы[0].Значение);
							ВходныеПараметры.Добавить(ФормаАвторизации.Параметры.ПараметрыФормы[1].Значение);

							СуммаОперации = ФормаАвторизации.Параметры.ПараметрыФормы[0].Значение;
							ПозицияРазделителя = Найти(ФормаАвторизации.Параметры.ПараметрыФормы[1].Значение, "=");
							Если ПозицияРазделителя > 16 Тогда
								НомерКарты = "";
								Для Счетчик = 1 По ПозицияРазделителя - 6 Цикл
									НомерКарты = НомерКарты + "*";
								КонецЦикла;
								НомерКарты = НомерКарты
								           + Сред(ФормаАвторизации.Параметры.ПараметрыФормы[1].Значение, ПозицияРазделителя - 5, 4);
							КонецЕсли;

							Если Объект.ХозяйственнаяОперация = 
							   ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента") Тогда
								// Выполнение операции на ЭТ
								РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ,
								                                                          "AuthorizeSales",
								                                                          ВходныеПараметры,
								                                                          ВыходныеПараметры);
							Иначе
								// Выполнение операции на ЭТ
								РезультатЭТ = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ,
								                                                          "AuthorizeRefund",
								                                                          ВходныеПараметры,
								                                                          ВыходныеПараметры);
							КонецЕсли;

							Если Не РезультатЭТ Тогда
								ТекстСообщения = НСтр("ru = 'При выполнении операции возникла ошибка:
								|""%ОписаниеОшибки%"".
								|Оплата по карте не была произведена.'");
								ТекстСообщения = СтрЗаменить(ТекстСообщения,
								                             "%ОписаниеОшибки%",
								                             ВыходныеПараметры[1]);
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							Иначе
								Если Не ПустаяСтрока(ВыходныеПараметры[3][1]) Тогда
									глПодключаемоеОборудование.Вставить("ПоследнийСлипЧек", ВыходныеПараметры[3][1]);
								КонецЕсли;

								НомерКарты          = ?(Не ПустаяСтрока(НомерКарты)
								                      И ПустаяСтрока(СтрЗаменить(СокрЛП(ВыходныеПараметры[0]), "*", "")),
								                        НомерКарты, ВыходныеПараметры[0]);
								НомерСсылкиОперации = ВыходныеПараметры[1];
								НомерЧекаЭТ         = ВыходныеПараметры[2];
								СтрокаСлипЧека      = ВыходныеПараметры[3][1];

								Если Не ПустаяСтрока(СтрокаСлипЧека) Тогда
									ВходныеПараметры  = Новый Массив();
									ВходныеПараметры.Добавить(СтрокаСлипЧека);
									ВыходныеПараметры = Неопределено;

									РезультатФР = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваФР,
									                                                          "PrintText",
									                                                          ВходныеПараметры,
									                                                          ВыходныеПараметры);
								КонецЕсли;
							КонецЕсли;

							Если РезультатЭТ И Не РезультатФР Тогда
								ОписаниеОшибкиФР = ВыходныеПараметры[1];

								ВходныеПараметры  = Новый Массив();
								ВыходныеПараметры = Неопределено;

								ВходныеПараметры.Добавить(СуммаОперации);
								ВходныеПараметры.Добавить(НомерСсылкиОперации);
								ВходныеПараметры.Добавить(НомерЧекаЭТ);

								// Выполнение операции на ЭТ
								МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройстваЭТ,
								                                            "EmergencyVoid",
								                                            ВходныеПараметры,
								                                            ВыходныеПараметры);

								ТекстСообщения = НСтр("ru = 'При печати слип-чека возникла ошибка:
								|""%ОписаниеОшибки%"".
								|Операция по карте была отменена.'");
								ТекстСообщения = СтрЗаменить(ТекстСообщения,
								                             "%ОписаниеОшибки%",
								                             ОписаниеОшибкиФР);
								ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
							ИначеЕсли РезультатЭТ Тогда
								Объект.НомерПлатежнойКарты = НомерКарты;
								Объект.ОплатаВыполнена = Истина;
							КонецЕсли;
						КонецЕсли;

						// Отключение устройства ФР
						МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
						                                                                 ИдентификаторУстройстваФР);
						// Отключение устройства ЭТ
						МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
						                                                                 ИдентификаторУстройстваЭТ);
					Иначе
						ТекстСообщения = НСтр("ru = 'При подключении фискального регистратора произошла ошибка:
						|""%ОписаниеОшибки%"".
						|Операция по карте не была выполнена.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;
				Иначе
					ТекстСообщения = НСтр("ru = 'При подключении эквайрингового терминала произошла ошибка:
						|""%ОписаниеОшибки%"".
						|Операция по карте не была выполнена.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	ПечатьЧека();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	УстановитьВидимость();
	УстановитьВозможностьРедактированияЗаказа();
	
	Объект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	
	ПолучитьДоговорПоУмолчаниюСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЭквайринговыйТерминалПриИзмененииНаСервере(СтруктураРеквизитов, ПересчитыватьСуммы)
	
	ТекущийЭквайринговыйТерминал = Объект.ЭквайринговыйТерминал;
	
	Если ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, СтруктураРеквизитов, "Организация, ДоговорЭквайринга, Касса");
		
		ПолучитьДоговорПоУмолчаниюСервер();
		
	КонецЕсли;
	
	ТекущаяВалюта = Объект.Валюта;
	Объект.Валюта = СтруктураРеквизитов.Валюта;
	
	Если ПересчитыватьСуммы Тогда
		ПересчетСуммДокументаВВалюту(ТекущаяВалюта);
	КонецЕсли;
	
	ПолучитьСписокВыбораВидовПлатежныхКарт();
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(Объект.Валюта, Элементы);
	
	РеквизитыКассы = Справочники.Кассы.ПолучитьРеквизитыКассы(СтруктураРеквизитов.Касса);
	УстановитьОтметкуНезаполненного(РеквизитыКассы.РазрешитьПлатежиБезУказанияЗаявок);
	
	ПолучитьСсылкиНаОборудование();
	
КонецПроцедуры

&НаСервере
Процедура ЗаявкаНаРасходованиеДенежныхСредствПриИзмененииСервер()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ЗаявкаНаРасходованиеДенежныхСредств);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент);
	ПолучитьДоговорПоУмолчаниюСервер();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора, Организация, Контрагент, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ВзаиморасчетыСервер.ЗаполнитьДанныеВыбораОснованияПлатежа(ДанныеВыбора, Текст, Новый Структура("Организация, Контрагент", Организация, Контрагент));
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаСервере
Процедура ПолучитьСсылкиНаОборудование()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Ссылка                                 КАК Ссылка,
	|	ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования КАК ИспользоватьБезПодключенияОборудования,
	|	ЭквайринговыеТерминалы.ПодключаемоеОборудование               КАК ПодключаемоеОборудование,
	|	
	|	ЭквайринговыеТерминалы.Владелец.ВидыПлатежныхКарт.(
	|		Владелец.ВидыПлатежныхКарт.ВидПлатежнойКарты КАК ВидПлатежнойКарты
	|	) КАК ВидыПлатежныхКарт
	|	
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|ГДЕ
	|	ЭквайринговыеТерминалы.Ссылка = &ЭквайринговыйТерминал
	|	И ((ЭквайринговыеТерминалы.ПодключаемоеОборудование <> ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|		И ЭквайринговыеТерминалы.ПодключаемоеОборудование.РабочееМесто = &РабочееМесто)
	|		ИЛИ ЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования)
	|";
	
	Запрос.УстановитьПараметр("ЭквайринговыйТерминал", Объект.ЭквайринговыйТерминал);
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЭквайринговыйТерминал = Выборка.ПодключаемоеОборудование;
	Иначе
		ЭквайринговыйТерминал = Справочники.ПодключаемоеОборудование.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Управление элементами формы

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	УстановитьВидимость();
	УстановитьВозможностьРедактированияЗаказа();
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораЭквайринговогоТерминала(Объект, Элементы.ЭквайринговыйТерминал);
	ДенежныеСредстваСервер.УстановитьДоступностьПодбораПоОстаткам(Объект, Элементы.РасшифровкаПлатежаПодборПоОстаткам);
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(Объект.Валюта, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ОперацияПоПлатежнойКарте.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуНезаполненного(РазрешеныПлатежиБезУказанияЗаявок)
	
	Если РазрешеныПлатежиБезУказанияЗаявок Тогда
		Элементы.ЗаявкаНаРасходованиеДенежныхСредств.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ЗаявкаНаРасходованиеДенежныхСредств.ОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.ЗаявкаНаРасходованиеДенежныхСредств.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище()
	
	АдресПлатежейВХранилище = ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(
		Объект.РасшифровкаПлатежа,
		УникальныйИдентификатор
	);	
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаИзХранилища(АдресПлатежейВХранилище)

	Объект.РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДоговорПоУмолчаниюСервер()
	
	ХозяйственнаяОперацияДоговора = Новый Массив;
	ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	ДоговорКонтрагента = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
		ДоговорКонтрагента,
		Партнер,
		Объект.Контрагент,
		Объект.Организация,
		ХозяйственнаяОперацияДоговора,
		, // ВалютаВзаиморасчетов
		, // Соглашение
		Истина // ПорядокРасчетовПоДоговорам			
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьПартнераПоУмолчаниюСервер(Контрагент, Партнер)
	
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокВыбораВидовПлатежныхКарт()
	
	МассивВидовПлатежныхКарт = Справочники.ДоговорыЭквайринга.ВидыПлатежныхКарт(Объект.ДоговорЭквайринга);
		
	Элементы.ВидПлатежнойКарты.СписокВыбора.ЗагрузитьЗначения(МассивВидовПлатежныхКарт);
	
	// Обработка заполнения вида платежной карты
	Если ЗначениеЗаполнено(Объект.ВидПлатежнойКарты)
	   И МассивВидовПлатежныхКарт.Найти(Объект.ВидПлатежнойКарты) = Неопределено Тогда
		Объект.ВидПлатежнойКарты = "";
	КонецЕсли;
		
	Если МассивВидовПлатежныхКарт.Количество() = 1 Тогда
		Объект.ВидПлатежнойКарты = МассивВидовПлатежныхКарт[0];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьРедактированияЗаказа()
	
	ЭтоВозвратОплатыКлиенту = Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
	
	Элементы.РасшифровкаПлатежаЗаказ.КнопкаВыбора		  = ЭтоВозвратОплатыКлиенту;
	Элементы.РасшифровкаПлатежаЗаказ.РедактированиеТекста = ЭтоВозвратОплатыКлиенту;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыЭквайринговогоТерминала(ЭквайринговыйТерминал)
	
	Возврат Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ЭквайринговыйТерминал);
		
КонецФункции

&НаСервере
Процедура ПересчетСуммДокументаВВалюту(ТекущаяВалюта)
	
	ДенежныеСредстваСервер.ПересчетСуммДокументаВВалюту(
		Объект,
		ТекущаяВалюта,
		Объект.Валюта
	);
	
КонецПроцедуры

&НаСервере
Функция ТипЧекаПоХозяйственнойОперацииДокумента()

	Возврат ?(Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента, 0, 1);

КонецФункции // ТипЧекаПоХозяйственнойОперацииДокумента()

&НаКлиенте
Процедура ПечатьЧека()

	ОчиститьСообщения();
	
	ОписаниеОшибки = "";

	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на фискальном регистраторе!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		Возврат;
	КонецЕсли;

	Если ФинансыКлиент.ВозможнаПечатьЧека(ЭтаФорма) Тогда

		Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
			ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ФискальныйРегистратор",
			    НСтр("ru = 'Выберите фискальный регистратор'"), НСтр("ru = 'Фискальный регистратор не подключен'"));

			Если ИдентификаторУстройства <> Неопределено Тогда
				// Подключаем ФР
				Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                              ИдентификаторУстройства,
				                                                                              ОписаниеОшибки);
				Если Результат Тогда
					//Готовим данные
					ВходныеПараметры  = Новый Массив();
					ВыходныеПараметры = Неопределено;

					НомерСекции = 2;

					// Подготовка таблицы товаров
					ТаблицаТоваров = Новый Массив();

					СтрокаТаблицыТоваров = Новый СписокЗначений();
					
					ПринятоОт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "НаименованиеПолное");
					СтрокаТаблицыТоваров.Добавить(НСтр("ru = 'Оплата от:'") + " " + ПринятоОт + Символы.ПС
					+ НСтр("ru = 'Основание:'") + " ");					   //  1 - Наименование
					СтрокаТаблицыТоваров.Добавить("");                     //  2 - Штрихкод
					СтрокаТаблицыТоваров.Добавить("");                     //  3 - Артикул
					СтрокаТаблицыТоваров.Добавить(НомерСекции);            //  4 - Номер отдела
					СтрокаТаблицыТоваров.Добавить(Объект.СуммаДокумента);  //  5 - Цена за позицию без скидки
					СтрокаТаблицыТоваров.Добавить(1);                      //  6 - Количество
					СтрокаТаблицыТоваров.Добавить("");                     //  7 - Наименование скидки/наценки
					СтрокаТаблицыТоваров.Добавить(0);                      //  8 - Сумма скидки/наценки
					СтрокаТаблицыТоваров.Добавить(0);                      //  9 - Процент скидки/наценки
					СтрокаТаблицыТоваров.Добавить(Объект.СуммаДокумента);  // 10 - Сумма позиции со скидкой
					СтрокаТаблицыТоваров.Добавить(0);                      // 11 - Номер налога (1)
					СтрокаТаблицыТоваров.Добавить(0);                      // 12 - Сумма налога (1)
					СтрокаТаблицыТоваров.Добавить(0);                      // 13 - Процент налога (1)
					СтрокаТаблицыТоваров.Добавить(0);                      // 14 - Номер налога (2)
					СтрокаТаблицыТоваров.Добавить(0);                      // 15 - Сумма налога (2)
					СтрокаТаблицыТоваров.Добавить(0);                      // 16 - Процент налога (2)
					СтрокаТаблицыТоваров.Добавить("");                     // 17 - Наименование секции форматирования товарной строки

					ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);

					// Подготовка таблицы оплат
					ТаблицаОплат = Новый Массив();

					СтрокаОплаты = Новый СписокЗначений();
					СтрокаОплаты.Добавить(1);	// Безналичная оплата.
					СтрокаОплаты.Добавить(Объект.СуммаДокумента);
					СтрокаОплаты.Добавить("");
					СтрокаОплаты.Добавить("");

					ТаблицаОплат.Добавить(СтрокаОплаты);

					// Подготовка таблицы общих параметров
					ОбщиеПараметры = Новый Массив();
					 
					ОбщиеПараметры.Добавить(ТипЧекаПоХозяйственнойОперацииДокумента()); //  1 - Тип чека
					ОбщиеПараметры.Добавить(Истина);                 //  2 - Признак фискального чека
					ОбщиеПараметры.Добавить(Неопределено);           //  3 - Печать на подкладном документе
					ОбщиеПараметры.Добавить(Объект.СуммаДокумента);  //  4 - Сумма по чеку без скидок/наценок
					ОбщиеПараметры.Добавить(Объект.СуммаДокумента);  //  5 - Сумма по чеку с учетом всех скидок/наценок
					ОбщиеПараметры.Добавить("");                     //  6 - Номер дисконтной карты
					ОбщиеПараметры.Добавить("");                     //  7 - Текст шапки
					ОбщиеПараметры.Добавить("");                     //  8 - Текст подвала
					ОбщиеПараметры.Добавить(0);                      //  9 - Номер смены (для копии чека)
					ОбщиеПараметры.Добавить(0);                      // 10 - Номер чека (для копии чека)
					ОбщиеПараметры.Добавить(0);                      // 11 - Номер документа (для копии чека)
					ОбщиеПараметры.Добавить(0);                      // 12 - Дата документа (для копии чека)
					ОбщиеПараметры.Добавить("");                     // 13 - Имя кассира (для копии чека)
					ОбщиеПараметры.Добавить("");                     // 14 - Пароль кассира
					ОбщиеПараметры.Добавить(0);                      // 15 - Номер шаблона
					ОбщиеПараметры.Добавить("");                     // 16 - Наименование секции форматирования шапки
					ОбщиеПараметры.Добавить("");                     // 17 - Наименование секции форматирования подвала

					ВходныеПараметры.Добавить(ТаблицаТоваров);
					ВходныеПараметры.Добавить(ТаблицаОплат);
					ВходныеПараметры.Добавить(ОбщиеПараметры);

					// Печатаем чек.
					Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
																			"PrintReceipt",
																			ВходныеПараметры,
																			ВыходныеПараметры);

					Если Результат Тогда
						// Установить полученное значение номера чека реквизиту документа.
						Объект.НомерЧекаККМ = ВыходныеПараметры[1];
						Модифицированность = Истина;
						Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
					Иначе
						ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
													|Чек не напечатан на фискальном регистраторе.
													|Дополнительное описание:
													|%ДополнительноеОписание%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,
													 "%ДополнительноеОписание%",
													 ВыходныеПараметры[1]);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					КонецЕсли;

					// Отключаем ФР
					МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства);
				Иначе
					ТекстСообщения = НСтр("ru = 'При подключении устройства произошла ошибка.
					                            |Чек не напечатан на фискальном регистраторе.
					                            |Дополнительное описание:
					                            |%ДополнительноеОписание%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДополнительноеОписание%", ОписаниеОшибки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры