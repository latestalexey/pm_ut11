////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ЗаполнитьСписокХозяйственныхОпераций();
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		Если СтруктураБыстрогоОтбора.Свойство("Склад", Склад) Тогда
			СкладПриИзмененииСервер();
		КонецЕсли;
		ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(
			СписокДокументы,
			"Статус",
			Статус,
			СтруктураБыстрогоОтбора
		);
		ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(
			СписокДокументы,
			"ХозяйственнаяОперация",
			ХозяйственнаяОперация,
			СтруктураБыстрогоОтбора
		);
		ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(
			СписокРаспоряженияНаОформление,
			"ХозяйственнаяОперация",
			ХозяйственнаяОперация,
			СтруктураБыстрогоОтбора
		);
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение") Тогда
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	УстановитьТекущуюСтраницу();
	ИспользоватьПеремещениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеПоНесколькимЗаказам");
	Если НЕ ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
		Элементы.СписокРаспоряженияНаОформление.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		Элементы.СписокДокументыСоздать.Видимость = Истина;
		Элементы.СписокДокументыСоздатьПеремещениеТоваров.Видимость = Ложь;
		Элементы.СписокДокументыСоздатьВнутреннююПередачуТоваров.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ПеремещениеТоваров" Или
		ИмяСобытия = "Запись_ЗаказНаПеремещение" Тогда
			Элементы.СписокРаспоряженияНаОформление.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		Склад = Настройки.Получить("Склад");
		СкладПриИзмененииСервер();
		ХозяйственнаяОперация = Настройки.Получить("ХозяйственнаяОперация");
		Статус = Настройки.Получить("Статус");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			СписокДокументы.Отбор,
			"Статус",
			Статус,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			ЗначениеЗаполнено(Статус)
		);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			СписокДокументы.Отбор,
			"ХозяйственнаяОперация",
			ХозяйственнаяОперация,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			ЗначениеЗаполнено(ХозяйственнаяОперация)
		);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			СписокРаспоряженияНаОформление.Отбор,
			"ХозяйственнаяОперация",
			ХозяйственнаяОперация,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			ЗначениеЗаполнено(ХозяйственнаяОперация)
		);
	Иначе
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		СтруктураБыстрогоОтбора.Свойство("ХозяйственнаяОперация", ХозяйственнаяОперация);
		СтруктураБыстрогоОтбора.Свойство("Статус", Статус);
	КонецЕсли;
	Настройки.Удалить("Склад");
	Настройки.Удалить("ХозяйственнаяОперация");
	Настройки.Удалить("Статус");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииСервер()
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокДокументы.Отбор, "Статус", Статус, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Статус));
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("Основание", Новый Структура("СкладОтправитель", Склад));
		ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта", СтруктураПараметры, Элементы.СписокДокументы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженияНаОформлениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СоздатьПеремещениеТоваровПоРаспоряжению(Команда)
	
	ТекущиеДанные = Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		Предупреждение(ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	РеквизитыШапки = Новый Структура();
	МассивСсылок = Новый Массив();
	ПараметрыОснования = Новый Структура();
	
	Если Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки.Количество() = 1 Или Не ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
		
		Если ТипЗнч(Элементы.СписокРаспоряженияНаОформление.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
			Предупреждение(ТекстПредупреждения);
			Возврат;
			
		КонецЕсли;
		
		ОткрытьФорму("Документ.ПеремещениеТоваров.Форма.ФормаДокумента",
			Новый Структура("Основание", Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные.Ссылка)
		);
		
	Иначе
		
		Для Каждого Заказ Из Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки Цикл
			
			Если ТипЗнч(Заказ) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСсылок.Добавить(Заказ);
			
		КонецЦикла;
		
		Если МассивСсылок.Количество() = 0 Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
			Предупреждение(ТекстПредупреждения);
			Возврат;
			
		КонецЕсли;
		
		ОчиститьСообщения();
		
		Если ДанныеЗаполненияПеремещенияТоваров(МассивСсылок, РеквизитыШапки) Тогда
			
			ПараметрыОснования.Вставить("РеквизитыШапки", РеквизитыШапки);
			ПараметрыОснования.Вставить("ДокументОснование", МассивСсылок);
			
			ОткрытьФорму("Документ.ПеремещениеТоваров.Форма.ФормаДокумента",
				Новый Структура("Основание", ПараметрыОснования)
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВнутреннююПередачуТоваров(Команда)
	
	СоздатьПеремещениеТоваровСОперацией(1);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКОтгрузке(Команда)
	
	УстановитьСтатус("КОтгрузке", НСтр("ru='К отгрузке'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтгружено(Команда)
	
	УстановитьСтатус("Отгружено", НСтр("ru='Отгружено'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПринято(Команда)
	
	УстановитьСтатус("Принято", НСтр("ru='Принято'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРаспоряжение(Команда)
	
	Если Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПеремещениеТоваров.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказНаПеремещение.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
			Элементы.СписокДокументыПоступления.ТекущаяСтрока = Ссылка;
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаПеремещенияТоваров;
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
			Элементы.СписокРаспоряженияНаОформление.ТекущаяСтрока = Ссылка;
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаРаспоряженияНаОформление;
		КонецЕсли;
		
		ОткрытьЗначение(Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ЗаполнитьСписокХозяйственныхОпераций()
	
	СписокХозяйственныхОпераций.Очистить();
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеремещениеТоваров);
	СписокХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницу()
	
	ИмяТекущейСтраницы = "";
	
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеЗаполненияПеремещенияТоваров(МассивСсылок, РеквизитыШапки)
	
	// если Отказ, тогда Ложь
	Возврат Документы.ЗаказНаПеремещение.ДанныеЗаполненияПеремещения(МассивСсылок, РеквизитыШапки);
	
КонецФункции

&НаКлиенте
Процедура УстановитьСтатус(СтатусСтрока, ПредставлениеСтатуса = Неопределено)
	
	ПредставлениеСтатуса = ?(ПредставлениеСтатуса = Неопределено, СтатусСтрока, ПредставлениеСтатуса);
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокДокументы);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке документов будет установлен статус ""%ПредставлениеСтатуса%"". Продолжить?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ПредставлениеСтатуса%", ПредставлениеСтатуса);
	Режим = Новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да,НСтр("ru='Установить'"));
	Режим.Добавить(КодВозвратаДиалога.Нет,НСтр("ru='Не устанавливать'"));
	Ответ = Вопрос(ТекстВопроса,Режим);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, СтатусСтрока);
	ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, ВыделенныеСтроки.Количество(), ПредставлениеСтатуса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, КоличествоВсего, Статус)
	
	Если КоличествоОбработанных > 0 Тогда
		
		Элементы.СписокДокументы.Обновить();
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке документов перемещений товаров установлен статус ""%Статус%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%",                 Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Статус ""%Статус%"" не установлен ни для одного документа перемещения товаров.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеремещениеТоваровСОперацией(ХозяйственнаяОперацияИндекс)
	
	СтруктураОснование = Новый Структура("ХозяйственнаяОперация,СкладОтправитель",
		СписокХозяйственныхОпераций[ХозяйственнаяОперацияИндекс].Значение, Склад
	);
	СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);
	ОткрытьФорму("Документ.ПеремещениеТоваров.ФормаОбъекта", СтруктураПараметры, Элементы.СписокДокументы);
	
КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииСервер()
	
	ГруппаОтборСкладыПеремещения  = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(СписокДокументы.Отбор.Элементы,
																"ГруппаСклад", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ГруппаОтборСкладыРаспоряжения = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(СписокРаспоряженияНаОформление.Отбор.Элементы,
																"ГруппаСклад", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(ГруппаОтборСкладыПеремещения,  "СкладОтправитель", Склад,
																ЗначениеЗаполнено(Склад), ВидСравненияКомпоновкиДанных.Равно);
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(ГруппаОтборСкладыРаспоряжения, "СкладОтправитель", Склад,
																ЗначениеЗаполнено(Склад), ВидСравненияКомпоновкиДанных.Равно);
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(ГруппаОтборСкладыПеремещения,  "СкладПолучатель", Склад,
																ЗначениеЗаполнено(Склад), ВидСравненияКомпоновкиДанных.Равно);
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(ГруппаОтборСкладыРаспоряжения, "СкладПолучатель", Склад,
																ЗначениеЗаполнено(Склад), ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		СписокДокументы.Отбор,
		"ХозяйственнаяОперация",
		ХозяйственнаяОперация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ХозяйственнаяОперация)
	);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		СписокРаспоряженияНаОформление.Отбор,
		"ХозяйственнаяОперация",
		ХозяйственнаяОперация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ХозяйственнаяОперация)
	);
	
КонецПроцедуры
