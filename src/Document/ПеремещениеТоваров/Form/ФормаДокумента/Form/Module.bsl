&НаКлиенте
Перем КэшированныеЗначения;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	КонецЕсли;
	
	Если ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
		Элементы.ТоварыПодобратьТоварыИзЗаказа.Заголовок = НСтр("ru = 'Подобрать товары из заказов'");
		Элементы.ТоварыЗаполнитьПоЗаказу.Заголовок = НСтр("ru = 'Заполнить по заказам'");
	КонецЕсли;
	
	УстановитьВидимостьОпераций();
	УстановитьДоступностьКомандБуфераОбмена();
	ТекущееСостояниеОтгрузкиДокумента = СкладыСервер.ТекущееСостояниеОтгрузкиДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УправлениеЭлементамиФормы();
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"))
	);
	УстановитьДоступностьКомандыПерезаполнитьПоОтгрузке();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПеремещениеТоваров));
	УстановитьВидимостьЭлементовСерий();
	ИспользоватьПеремещениеПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеПоНесколькимЗаказам");
	ОбновитьИнформациюПоЗаказам();
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Сделка", "Видимость", Не (ИспользоватьПеремещениеПоНесколькимЗаказам И Объект.ПеремещениеПоЗаказам));	
	УстановитьДоступностьКомандыЗаполнитьПоFEFO();
	УстановитьДоступностьЭлементовФормыПоЗаказу();
	
	СкладОтправитель = Объект.СкладОтправитель;
	СкладПолучатель  = Объект.СкладПолучатель;
	
	ИспользоватьУправлениеДоставкой = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");
	Если ИспользоватьУправлениеДоставкой Тогда
		РедактироватьАдресаДоставкиТолькоВДиалоге = ПолучитьФункциональнуюОпцию("РедактироватьАдресаДоставкиТолькоВДиалоге");
		АдресаДоставкиТолькоРоссийские = ПолучитьФункциональнуюОпцию("АдресаДоставкиТолькоРоссийские");
		ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы,Объект);
	Иначе
		Элементы.СтраницаДоставка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Перем ВыполняемаяОперация;

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ВыполняемаяОперация", ВыполняемаяОперация) Тогда

		Если ВРег(ВыполняемаяОперация) = ВРег("ПодборТоваровИзЗаказа") Тогда

			ОбработкаПодбораТоваровИзЗаказа(ВыбранноеЗначение.АдресВХранилище);

		КонецЕсли;

	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда

		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);

	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыЗапасов.Форма.ФормаВводаВидовЗапасов" Тогда	
		
		ПолучитьВидыЗапасовИзХранилища(ВыбранноеЗначение);
		Объект.ВидыЗапасовУказаныВручную = ИсточникВыбора.ВидыЗапасовУказаныВручную;
		Модифицированность = Истина;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"))
	);
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	ТекущееСостояниеОтгрузкиДокумента = СкладыСервер.ТекущееСостояниеОтгрузкиДокумента(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		ИначеЕсли ИмяСобытия = "DataCollectionTerminal" Тогда
			ОбработатьШтрихкоды(Параметр);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ОповеститьОПроведенииДокумента(ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Объект.ПеремещениеПоЗаказам Тогда
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(ЭтаФорма, "Товары", "Номенклатура,Характеристика,Количество");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СкладПолучательПриИзменении(Элемент)

	Если СкладПолучатель <> Объект.СкладПолучатель Тогда

		Если Объект.ПеремещениеПоЗаказам И Объект.Товары.Количество() > 0  Тогда
			
			Ответ = Вопрос(НСтр("ru='Список ""Товары"" будет очищен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				
				Объект.СкладПолучатель = СкладПолучатель;
				Возврат;
				
			КонецЕсли;

		КонецЕсли;

		СкладПолучательПриИзмененииСервер();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладОтправительПриИзменении(Элемент)

	Если СкладОтправитель <> Объект.СкладОтправитель Тогда

		Если Объект.ПеремещениеПоЗаказам И Объект.Товары.Количество() > 0  Тогда
			
			Ответ = Вопрос(НСтр("ru='Список ""Товары"" будет очищен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				
				Объект.СкладОтправитель = СкладОтправитель;
				Возврат;
				
			КонецЕсли;

		КонецЕсли;

		СкладОтправительПриИзмененииСервер();

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	Если ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		ЗаполнитьСерииПоОтгрузке = Ложь;
		
		Если МожноЗаполнитьСерииПоОтгрузке
			И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПеремещенийТоваров.Принято") Тогда
			ТекстВопроса = НСтр("ru = 'Заполнить серии по данным расходных ордеров?'");
			
			Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЗаполнитьСерииПоОтгрузке = Истина;
			КонецЕсли;
		КонецЕсли;
		
		СтатусПриИзмененииСервер(ЗаполнитьСерииПоОтгрузке);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокЗаказыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуМодально(
		"ОбщаяФорма.ПросмотрСпискаДокументов",
		Новый Структура("СписокДокументов, Заголовок",
			СписокЗаказов,
			НСтр("ru='Заказы на перемещение (%КоличествоДокументов%)'")
		),
		ЭтаФорма
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеПоЗаказуПриИзменении(Элемент)
	
	Заказ = Неопределено;
	
	Если Объект.ПеремещениеПоЗаказам Тогда
		
		Если ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
		
			Если Объект.Товары.Количество() = 0 Тогда
				ТекстВопроса = НСтр("ru='Список Товары будет перезаполнен остатками неоформленных товаров по заказам. Продолжить?'");
			Иначе
				ТекстВопроса = НСтр("ru='Строки в списке Товары будут привязаны к строкам заказов. Строки, которые невозможно привязать к строкам заказа, будут удалены. Продолжить?'");
			КонецЕсли;
			
		Иначе
			
			ПараметрыОтбора = Новый Структура();
			ПараметрыОтбора.Вставить("Организация",      Объект.Организация);
			ПараметрыОтбора.Вставить("Подразделение",    Объект.Подразделение);
			ПараметрыОтбора.Вставить("СкладОтправитель", Объект.СкладОтправитель);
			ПараметрыОтбора.Вставить("СкладПолучатель",  Объект.СкладПолучатель);
			
			Заказ = ОткрытьФормуМодально (
				"Документ.ПеремещениеТоваров.Форма.ФормаВыбораРаспоряжения",
				Новый Структура("Отбор,Регистратор", ПараметрыОтбора, Объект.Ссылка)
			);
			
			Если Заказ = Неопределено Тогда
				Объект.ПеремещениеПоЗаказам = Ложь;
				Возврат;
			КонецЕсли;
			
			Если Объект.Товары.Количество() = 0 Тогда
				ТекстВопроса = СтрЗаменить(НСтр("ru='Список Товары будет перезаполнен остатками неоформленных товаров по документу %ЗаказНаПеремещение%. Продолжить?'"), "%ЗаказНаПеремещение%", Заказ);
			Иначе
				ТекстВопроса = СтрЗаменить(НСтр("ru='Строки в списке Товары будут привязаны к строкам документа %ЗаказНаПеремещение%. Строки, которые невозможно привязать к строкам заказа, будут удалены.  Продолжить?'"), "%ЗаказНаПеремещение%", Заказ);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Объект.Товары.Количество() > 0 Тогда
			
			Если ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
				ТекстВопроса = НСтр("ru='Строки в списке Товары перестанут быть связанными со строками заказов. Продолжить?'");
			Иначе
				ТекстВопроса = НСтр("ru='Строки в списке Товары перестанут быть связанными со строками заказа. Продолжить?'");
			КонецЕсли;
		Иначе
			
			ПриИзмененииПеремещенияПоНесколькимЗаказам();
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Объект.ПеремещениеПоЗаказам = Не Объект.ПеремещениеПоЗаказам;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		Объект.ЗаказНаПеремещение = Заказ;
	КонецЕсли;
	
	ПриИзмененииПеремещенияПоНесколькимЗаказам();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ТекущаяОрганизация <> Объект.Организация Тогда
		
		ОрганизацияПриИзмененииСервер();
		ТекущаяОрганизация = Объект.Организация;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ, СВЯЗАННЫХ С ДОСТАВКОЙ

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Найти(Элемент.Имя,"АдресДоставкиПолучателя") <> 0 Тогда
		ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(Объект.АдресДоставки,
												Объект.АдресДоставкиЗначенияПолей,
												РедактироватьАдресаДоставкиТолькоВДиалоге,
												АдресаДоставкиТолькоРоссийские);
	Иначе
		ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(Объект.АдресДоставкиПеревозчика,
												Объект.АдресДоставкиПеревозчикаЗначенияПолей,
												РедактироватьАдресаДоставкиТолькоВДиалоге,
												АдресаДоставкиТолькоРоссийские);
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы,Объект,Элемент.Имя,ВыбранноеЗначение);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранноеВремя = РаботаСДиалогамиКлиент.ВыбратьВремя(ЭтаФорма, Элемент, Объект.ВремяДоставкиС);
	Если ВыбранноеВремя <> Неопределено Тогда
		Если ВыбранноеВремя = Дата(1,1,1) Тогда
			Объект.ВремяДоставкиС = Дата(1,1,1,0,0,1);
		Иначе
			Объект.ВремяДоставкиС = ВыбранноеВремя;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиПоНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранноеВремя = РаботаСДиалогамиКлиент.ВыбратьВремя(ЭтаФорма, Элемент, Объект.ВремяДоставкиПо);
	Если ВыбранноеВремя <> Неопределено Тогда
		Если ВыбранноеВремя = Дата(1,1,1) Тогда
			Объект.ВремяДоставкиПо = Дата(1,1,1,0,0,1);
		Иначе
			Объект.ВремяДоставкиПо = ВыбранноеВремя;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	ПроверитьВозможностьРучногоДобавления(Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);	
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	Если ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
		ОбновитьИнформациюПоЗаказам();
	КонецЕсли;
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.ТоварыСтатусУказанияСерий Тогда
		Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
			ПараметрыФормыУказанияСерий = ПолучитьПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
			
			ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
			
			Если ЗначениеВозврата <> Неопределено Тогда
				ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Поле = Элементы.ТоварыЗаказНаПеремещение Тогда
		Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.ЗаказНаПеремещение) Тогда
			ОткрытьЗначение(Элементы.Товары.ТекущиеДанные.ЗаказНаПеремещение);
		КонецЕсли;
	ИначеЕсли Поле = Элементы.ТоварыСделка Тогда
		Если ЗначениеЗаполнено(Элементы.Товары.ТекущиеДанные.Сделка) Тогда
			ОткрытьЗначение(Элементы.Товары.ТекущиеДанные.Сделка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНД

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПолучитьПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, "");
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);		
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидыЗапасов(Команда)
	
	Перем АдресТоваровВХранилище;
	Перем АдресВидовЗапасовВХранилище;
	
	ПоместитьТоварыИВидыЗапасовВХранилище(
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище
	);
	ФинансыКлиент.ОткрытьВидыЗапасов(
		Объект,
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище,
		ЭтаФорма
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Склад"" не заполнено'"), Объект.Ссылка, "Объект.СкладОтправитель");
		Возврат;
		
	КонецЕсли;
	
	ОткрытьПодборТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТоварыИзЗаказа(Команда)
	
	Если Не Объект.ПеремещениеПоЗаказам Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьПодборТоваровПоЗаказу();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОтгрузке(Команда)
	
	Если ПродажиКлиент.НеобходимоЗаполнениеТоваровПоОтгрузке(Объект.Проведен) Тогда
		
		ЕстьИзменения = Ложь;
		ЗаполнятьНесобраннымиТоварами = Ложь;
		
		СостояниеОтгрузки = ПродажиВызовСервера.ПолучитьСостояниеФактическойОтгрузки(Объект.Ссылка);
		
		Если СостояниеОтгрузки.ЕстьНесобранныеТовары Тогда
			
			Если Не ПродажиКлиент.ВопросОПерезаполненииОтгруженнымиТоварами(СостояниеОтгрузки.ЕстьОтгруженныеТовары, ЗаполнятьНесобраннымиТоварами) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ЕстьИзменения = ЗаполнитьПоОтгрузкеСервер(СостояниеОтгрузки, ЗаполнятьНесобраннымиТоварами);
		
		ПродажиКлиент.ОповеститьОбОкончанииПерезаполненияТоваровПоОтгрузке(
			ЕстьИзменения,
			СостояниеОтгрузки.ЕстьОтгруженныеТовары Или СостояниеОтгрузки.ЕстьНесобранныеТовары
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	Перем ТекущаяСтрока;
	
	ВесНоменклатуры = МенеджерОборудованияКлиент.ПолучитьДанныеИзВесов(ЭтаФорма, ТекущаяСтрока);
	
	Если ВесНоменклатуры <> Неопределено Тогда
		
		ТекущаяСтрока.КоличествоУпаковок = ВесНоменклатуры;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаказу(Команда)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ОтветНаВопрос = Вопрос(НСтр("ru='Таблица ""Товары"" будет перезаполнена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПоЗаказуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	Если ОбщегоНазначенияУТКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатиТТН(Элемент)
	
	ОткрытьРеквизитыПечатиТТН();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)

	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		"Номенклатура,Характеристика,Количество");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
//При изменении реквизитов

&НаСервере
Процедура СкладОтправительПриИзмененииСервер()

	УстановитьДоступностьКомандыПерезаполнитьПоОтгрузке();
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПеремещениеТоваров));
	
	УстановитьВидимостьЭлементовСерий();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);

	СкладОтправитель = Объект.СкладОтправитель;
	
	ОчиститьТабличнуюЧастьТоварыПриИзмененииСклада();

КонецПроцедуры

&НаСервере
Процедура СкладПолучательПриИзмененииСервер()

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПеремещениеТоваров));
	
	УстановитьВидимостьЭлементовСерий();
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Объект.ВидЦены = Справочники.Склады.УчетныйВидЦены(Объект.СкладПолучатель);	

	СкладПолучатель = Объект.СкладПолучатель;

	ОчиститьТабличнуюЧастьТоварыПриИзмененииСклада();
	
	ЗаполнитьУстановитьРеквизитыДоставкиСервер("СкладПолучатель");
	
	Если Справочники.Организации.РозничнаяТорговляОблагаетсяЕНВД(Объект.Организация, Объект.СкладПолучатель, Объект.Дата) Тогда
		Объект.ПеремещениеПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД;
	Иначе
		Объект.ПеремещениеПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииСервер(ЗаполнитьСерииПоОтгрузке)

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПеремещениеТоваров));
	
	Если ЗаполнитьСерииПоОтгрузке Тогда
		Документы.ПеремещениеТоваров.ЗаполнитьСерииПоОтгрузке(Объект);
	КонецЕсли;

	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	УстановитьДоступностьКомандыЗаполнитьПоFEFO();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация);
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.ОрганизацияПолучатель)
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров
		И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Объект.Организация, Объект.ОрганизацияПолучатель) Тогда
		Объект.ОрганизацияПолучатель = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров Тогда
		
		Если Не Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.Организация) Тогда
			Объект.Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Организация) 
			И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Объект.Организация, Объект.ОрганизацияПолучатель)
			ИЛИ Не Справочники.Организации.ОрганизацияВзаимосвязанаСДругимиОрганизациями(Объект.ОрганизацияПолучатель) Тогда
			Объект.ОрганизацияПолучатель = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Подборы и обработка проверки количества

&НаСервере
Процедура ОбработкаПодбораТоваровИзЗаказа(АдресВХранилище)

	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресВХранилище);

	СтруктураПоиска = Новый Структура("КодСтроки, Номенклатура, Характеристика, ЗаказНаПеремещение");
	Для Каждого ЭлементДанных Из СтруктураДанных.Товары Цикл

		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭлементДанных);
		СтрокиТЧТовары = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТЧТовары.Количество() = 0 Тогда

			СтрокаТЧ = Объект.Товары.Добавить();

		ИначеЕсли СтрокиТЧТовары.Количество() = 1 Тогда

			СтрокаТЧ = СтрокиТЧТовары[0];

		ИначеЕсли СтрокиТЧТовары.Количество() > 1 Тогда

			Для Каждого СтрокаТоваров Из СтрокиТЧТовары Цикл
				Объект.Товары.Удалить(СтрокаТоваров);
			КонецЦикла;

			СтрокаТЧ = Объект.Товары.Добавить();

		КонецЕсли;

		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ЭлементДанных);

	КонецЦикла;

	// Обновление признака использования характеристик.
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"))
	);
	НоменклатураСервер.ЗаполнитьСерииПоЗаказам(Объект,ПараметрыУказанияСерий);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок");

		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТоваровПоЗаказу()
	
	МассивКодовСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если СтрокаТЧ.КодСтроки <> 0 И ЗначениеЗаполнено(СтрокаТЧ.ЗаказНаПеремещение) Тогда
			МассивКодовСтрок.Добавить(
				Новый Структура("КодСтроки, ЗаказНаПеремещение",
					СтрокаТЧ.КодСтроки,
					СтрокаТЧ.ЗаказНаПеремещение
				)
			);
		КонецЕсли;
	КонецЦикла;
	
	ОткрытьФормуМодально(
		"Документ.ПеремещениеТоваров.Форма.ФормаПодбораТоваровИзЗаказа",
		Новый Структура(
			"Заказ,
			|Накладная,
			|МассивКодовСтрок,
			|Организация,
			|Подразделение,
			|СкладОтправитель,
			|СкладПолучатель,
			|Дата",
			Объект.ЗаказНаПеремещение,
			Объект.Ссылка,
			МассивКодовСтрок,
			Объект.Организация,
			Объект.Подразделение,
			Объект.СкладОтправитель,
			Объект.СкладПолучатель,
			Объект.Дата
		),
		ЭтаФорма
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТоваров()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад",                                     Объект.СкладОтправитель);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",                   Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
	ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор товаров'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества()
	
	ТабличнаяЧастьТовары = Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок");
	ТабличнаяЧастьТовары.Свернуть("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка", "КоличествоУпаковок");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличнаяЧастьТовары, УникальныйИдентификатор);
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, КэшированныеЗначения)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(ВозвращаемыеПараметры.Товары);
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаИсточник Из ТаблицаТовары Цикл
		
		Отбор = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			Если СтрокаИсточник.КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаИсточник.КоличествоУпаковок >= 0 Тогда
				
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + СтрокаИсточник.КоличествоУпаковок;
				СтрокаИсточник.КоличествоУпаковок = 0;
				
			Иначе
				
				КоличествоКСписанию = -СтрокаИсточник.КоличествоУпаковок;
				КоличествоВСтроке   = СтрокаТЧ.КоличествоУпаковок;
				
				Если КоличествоКСписанию > КоличествоВСтроке Тогда
					СтрокаИсточник.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
					СтрокаТЧ.КоличествоУпаковок       = 0;
				Иначе
					СтрокаИсточник.КоличествоУпаковок = 0;
					СтрокаТЧ.КоличествоУпаковок       = КоличествоВСтроке - КоличествоКСписанию;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаТЧ);
			Иначе
				
				СтруктураДействий = Новый Структура;
				ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаИсточник);
			
			СтруктураДействий = Новый Структура;
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого СтрокаТЧ Из УдаляемыеСтроки Цикл
		Объект.Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументе(Команда)
	
	ПараметрыОткрытия = Новый Структура("АдресВоВременномХранилище, ПревышениеКоличестваТоваровРазрешено", ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества(), Не Объект.ПеремещениеПоЗаказам);
	ВозвращаемыеПараметры = ОткрытьФормуМодально("ОбщаяФорма.ПроверкаЗаполненияДокументов", ПараметрыОткрытия);
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, ?(КэшированныеЗначения = Неопределено, ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения(), КэшированныеЗначения));
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Штрихкоды и торговое оборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ИзменятьКоличество = Не Объект.ПеремещениеПоЗаказам;
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками);

	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками);

	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	СтруктураДействий.ТолькоТовары                           = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия, КэшированныеЗначения)
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Серии

&НаСервере
Функция ПолучитьПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандыЗаполнитьПоFEFO()
	Элементы.ТоварыЗаполнитьСерииПоFEFO.Доступность = ПараметрыУказанияСерий.ПланированиеОтгрузки
													Или ПараметрыУказанияСерий.ПланированиеОтбора;
	Элементы.ТоварыЗаполнитьСерииПоОтгрузке.Доступность = (Объект.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий ()
	Элементы.ТоварыСтатусУказанияСерий.Видимость  = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость         = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыЗаполнитьСерииПоFEFO.Видимость = 
		ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура("Склад", Объект.СкладОтправитель))
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке", Новый Структура("Склад", Объект.СкладОтправитель));
		
	МожноЗаполнитьСерииПоОтгрузке = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке",Новый Структура("Склад", Объект.СкладОтправитель))
		И ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад",Новый Структура("Склад", Объект.СкладОтправитель))
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении",Новый Структура("Склад", Объект.СкладПолучатель))
		И ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад",Новый Структура("Склад", Объект.СкладПолучатель));
	
	Элементы.ТоварыЗаполнитьСерииПоОтгрузке.Видимость = МожноЗаполнитьСерииПоОтгрузке;
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
		
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСерииПоFEFOСервер()
	Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Объект.Товары) Тогда
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(Объект,ПараметрыУказанияСерий);	
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьСерииПоОтгрузкеСервер()

	Документы.ПеремещениеТоваров.ЗаполнитьСерииПоОтгрузке(Объект);	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);

КонецПроцедуры

&НаСервере
Функция ЕстьЗаполненныеСерииПоFEFO()

	Возврат НоменклатураСервер.ЕстьСтрокиСЗаполненнымиПоFEFOСериями(Объект.Товары);

КонецФункции

&НаКлиенте
Процедура ЗаполнитьСерииПоFEFO(Команда)

	Если ЕстьЗаполненныеСерииПоFEFO() Тогда
		Если Не НоменклатураКлиент.ЗадатьВопросОПерезаполненииСерийПоFEFO() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		НоменклатураКлиент.ПредупредитьОбОтсутсвииСтрокЗаполняемыхПоFEFO();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСерииПоОтгрузке(Команда)

	ЗаполнитьСерииПоОтгрузкеСервер();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Управление элементами формы

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ПеремещениеТоваров.ПолучитьМассивыРеквизитов(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	ЭтоПередачаТоваровМеждуОбособленнымиПодразделениями = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров);
	
	ЗаголовокОрганизацииОтправителя = ?(ЭтоПередачаТоваровМеждуОбособленнымиПодразделениями, "Организация-отправитель", "Организация");
	
	Элементы.Организация.Заголовок = НСтр("ru = '" + ЗаголовокОрганизацииОтправителя + "'");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Прочее

&НаСервере
Процедура ПоместитьТоварыИВидыЗапасовВХранилище(АдресТоваровВХранилище, АдресВидовЗапасовВХранилище)
	
	ЗапасыСервер.ПоместитьТоварыИВидыЗапасовВХранилище(
		Объект.Товары,
		Объект.ВидыЗапасов,
		УникальныйИдентификатор,
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище
	);
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьВидыЗапасовИзХранилища(АдресВидовЗапасовВХранилище)
	
	Объект.ВидыЗапасов.Загрузить(ПолучитьИзВременногоХранилища(АдресВидовЗапасовВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовФормыПоЗаказу()
	
	ЕстьЗаказ = Объект.ПеремещениеПоЗаказам;
	
	МассивЭлементов = Новый Массив;

	МассивЭлементов.Добавить("ТоварыДобавить");
	МассивЭлементов.Добавить("ТоварыСкопировать");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	МассивЭлементов.Добавить("ТоварыПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ТоварыПодобратьТовары");
	МассивЭлементов.Добавить("ТоварыДополнитьМногооборотнойТарой");

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов, "Доступность", Не ЕстьЗаказ);

	МассивЭлементов.Очистить();
	МассивЭлементов.Добавить("ТоварыПодобратьТоварыИзЗаказа");
	МассивЭлементов.Добавить("ТоварыЗаполнитьПоЗаказу");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов, "Доступность", ЕстьЗаказ);
	
КонецПроцедуры

&НаСервере
Функция АдресОбъектаВоВременномХранилище()
	
	СтруктураОбъекта = Новый Структура;
	
	Для каждого Реквизит Из Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты Цикл
		
		СтруктураОбъекта.Вставить(Реквизит.Имя);
		
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(СтруктураОбъекта, Объект);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураОбъекта, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьРеквизитыПечатиТТН()
	
	ИспользуетсяДоставка = ИспользоватьУправлениеДоставкой
						   И (Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ДоКлиента")
							  ИЛИ Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу"));
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                  Объект.АдресДоставки);
	СтруктураПараметров.Вставить("Перевозчик",                     Объект.Перевозчик);
	СтруктураПараметров.Вставить("БанковскийСчетПеревозчика",      Объект.БанковскийСчетПеревозчика);
	СтруктураПараметров.Вставить("СрокДоставки",                   Объект.СрокДоставки);
	СтруктураПараметров.Вставить("Автомобиль",                     Объект.Автомобиль);
	СтруктураПараметров.Вставить("Водитель",                       Объект.Водитель);
	СтруктураПараметров.Вставить("ПоказыватьРеквизитыТТН",         Истина);
	СтруктураПараметров.Вставить("ТипОбъекта",                     "ПеремещениеТоваров");
	СтруктураПараметров.Вставить("АдресОбъектаВоВременномХранилище", АдресОбъектаВоВременномХранилище());
	СтруктураПараметров.Вставить("Организация",                    Объект.Организация);
	СтруктураПараметров.Вставить("Дата",                           Объект.Дата);
	СтруктураПараметров.Вставить("Руководитель",                   Объект.Руководитель);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",               Объект.ГлавныйБухгалтер);
	СтруктураПараметров.Вставить("ИспользуетсяДоставка",           ИспользуетсяДоставка);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",      Объект.БанковскийСчетОрганизации);
	Если Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчика")
	  ИЛИ Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу") Тогда
		СтруктураПараметров.Вставить("ПеревозчикПартнер",              Объект.ПеревозчикПартнер);
	КонецЕсли;
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("Основание");
	МассивРеквизитов.Добавить("Отпустил");
	МассивРеквизитов.Добавить("ОтпустилДолжность");
	МассивРеквизитов.Добавить("Грузополучатель");
	МассивРеквизитов.Добавить("Грузоотправитель");
	МассивРеквизитов.Добавить("БанковскийСчетГрузоотправителя");
	МассивРеквизитов.Добавить("БанковскийСчетГрузополучателя");
	МассивРеквизитов.Добавить("БанковскийСчетКонтрагента");
	МассивРеквизитов.Добавить("ДоверенностьВыдана");
	МассивРеквизитов.Добавить("ДоверенностьДата");
	МассивРеквизитов.Добавить("ДоверенностьЛицо");
	МассивРеквизитов.Добавить("ДоверенностьНомер");
	
	СтруктураПараметров.Вставить("НеПоказыватьРеквизиты", МассивРеквизитов);
	
	ОткрытьФормуМодально("ОбщаяФорма.РеквизитыПечатиРеализации", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры


&НаСервере
Функция ЗаполнитьПоОтгрузкеСервер(СостояниеОтгрузки, ЗаполнятьНесобраннымиТоварами=Ложь)
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	
	СтруктураПараметров = ПродажиСервер.СтруктураДокументаДляЗаполненияПоФактическойОтгрузке();
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СостояниеОтгрузки);
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	СтруктураПараметров.Вставить("СтруктураДействийСИзмененнымиСтроками", СтруктураДействийСИзмененнымиСтроками);
	СтруктураПараметров.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	СтруктураПараметров.Вставить("ЗаполнятьНесобраннымиТоварами", ЗаполнятьНесобраннымиТоварами);
	СтруктураПараметров.Вставить("СкладВТабличнойЧасти", Ложь);
	СтруктураПараметров.Вставить("ДокументРезерваСерийВТабличнойЧасти", Истина);
	СтруктураПараметров.Вставить("ДополнятьСтроки", Не Объект.ПеремещениеПоЗаказам);
	СтруктураПараметров.Вставить("ПараметрыУказанияСерий", НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПеремещениеТоваров));
	
	ЕстьИзменения = ПродажиСервер.ЗаполнитьПоФактическойОтгрузке(Объект, СтруктураПараметров);
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандыПерезаполнитьПоОтгрузке()
	
	Элементы.ТоварыПерезаполнитьПоОтгрузке.Доступность = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке", Новый Структура("Склад", Объект.СкладОтправитель));
	
КонецПроцедуры  // УстановитьДоступностьКомандыПерезаполнитьПоОтгрузке()

&НаСервере
Процедура ОбновитьИнформациюПоЗаказам()
	
	ЗаказыСервер.ОбновитьИнформациюПоЗаказамВФорме(
		СписокЗаказов,
		Объект.ЗаказНаПеремещение,
		НадписьЗаголовокЗаказы,
		Элементы,
		Элементы.ТоварыГруппаЗаказНаПеремещение,
		Объект.Товары,
		"ЗаказНаПеремещение",
		ИспользоватьПеремещениеПоНесколькимЗаказам
		);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоЗаказуСервер()
	
	Объект.Товары.Очистить();
	
	Если ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
		МассивЗаказов = Неопределено;
	Иначе
		МассивЗаказов = Новый Массив();
		МассивЗаказов.Добавить(Объект.ЗаказНаПеремещение);
	КонецЕсли;
	
	Документы.ПеремещениеТоваров.ЗаполнитьПоОстаткамЗаказов(
		Объект,
		Объект.Товары,
		МассивЗаказов,
		Истина
	);
	
	НоменклатураСервер.ЗаполнитьСерииПоЗаказам(Объект, ПараметрыУказанияСерий);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	ОбновитьИнформациюПоЗаказам();
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВозможностьРучногоДобавления(Отказ)
	
	Отказ = Объект.ПеремещениеПоЗаказам;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПеремещенияПоНесколькимЗаказам()
	
	Если Объект.ПеремещениеПоЗаказам Тогда
		
		Если Объект.Товары.Количество() = 0 Тогда
			ЗаполнитьПоЗаказуСервер();
		Иначе
			ПривязатьСтрокиКЗаказамНаПеремещение(Не ИспользоватьПеремещениеПоНесколькимЗаказам);
		КонецЕсли;
		
		Если ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
			Объект.Сделка = Справочники.СделкиСКлиентами.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		ОтвязатьСтрокиОтЗаказов();
		Объект.ЗаказНаПеремещение = Документы.ЗаказНаПеремещение.ПустаяСсылка();
		СписокЗаказов.Очистить();
		МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
		
	КонецЕсли;
	
	ОбновитьИнформациюПоЗаказам();
	УстановитьДоступностьЭлементовФормыПоЗаказу();
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Сделка", "Видимость", Не (ИспользоватьПеремещениеПоНесколькимЗаказам И Объект.ПеремещениеПоЗаказам));
	
КонецПроцедуры

&НаСервере
Процедура ОтвязатьСтрокиОтЗаказов()
	
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		
		ТекСтрока.КодСтроки = 0;
		ТекСтрока.ЗаказНаПеремещение = Документы.ЗаказНаПеремещение.ПустаяСсылка();
		ТекСтрока.Сделка = Справочники.СделкиСКлиентами.ПустаяСсылка();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПривязатьСтрокиКЗаказамНаПеремещение(ОтобратьПоЗаказу = Ложь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение") Или
		(Не ПолучитьФункциональнуюОпцию("ИспользоватьПеремещениеПоНесколькимЗаказам")
		И Не ЗначениеЗаполнено(Объект.ЗаказНаПеремещение)) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.КодСтроки = 0
	|	И Товары.ЗаказНаПеремещение = ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗаказы.ЗаказНаПеремещение.Сделка КАК Сделка,
	|	ТаблицаЗаказы.ЗаказНаПеремещение        КАК ЗаказНаПеремещение,
	|	ТаблицаЗаказы.Номенклатура              КАК Номенклатура,
	|	ТаблицаЗаказы.Характеристика            КАК Характеристика,
	|	ТаблицаЗаказы.КодСтроки                 КАК КодСтроки,
	|	СУММА(ТаблицаЗаказы.КОформлению)        КАК КОформлениюОстаток
	|ПОМЕСТИТЬ ЗаказыНаПеремещение
	|ИЗ
	|	(ВЫБРАТЬ
	|		Заказы.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
	|		Заказы.Номенклатура КАК Номенклатура,
	|		Заказы.Характеристика КАК Характеристика,
	|		Заказы.КодСтроки КАК КодСтроки,
	|		Заказы.КОформлениюОстаток КАК КОформлению
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПеремещение.Остатки(,
	|			ВЫБОР
	|				КОГДА &ОтобратьПоЗаказу
	|					ТОГДА ЗаказНаПеремещение = &Заказ
	|				ИНАЧЕ ЗаказНаПеремещение.Подразделение = &Подразделение
	|					И ЗаказНаПеремещение.Организация = &Организация
	|					И ЗаказНаПеремещение.СкладОтправитель = &СкладОтправитель
	|					И ЗаказНаПеремещение.СкладПолучатель = &СкладПолучатель
	|				КОНЕЦ
	|				И (Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура КАК Номенклатура,
	|						Товары.Характеристика КАК Характеристика
	|					ИЗ
	|					Товары КАК Товары)) КАК Заказы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Заказы.ЗаказНаПеремещение,
	|		Заказы.Номенклатура,
	|		Заказы.Характеристика,
	|		Заказы.КодСтроки,
	|		ВЫБОР
	|			КОГДА Заказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -Заказы.КОформлению
	|			ИНАЧЕ Заказы.КОформлению
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаПеремещение КАК Заказы
	|	ГДЕ
	|		Заказы.Регистратор = &Регистратор
	|		И ВЫБОР
	|			КОГДА &ОтобратьПоЗаказу
	|				ТОГДА ЗаказНаПеремещение = &Заказ
	|			ИНАЧЕ ЗаказНаПеремещение.Подразделение = &Подразделение
	|				И ЗаказНаПеремещение.Организация = &Организация
	|				И ЗаказНаПеремещение.СкладОтправитель = &СкладОтправитель
	|				И ЗаказНаПеремещение.СкладПолучатель = &СкладПолучатель
	|		КОНЕЦ
	|		И Заказы.Активность
	|		И (Номенклатура, Характеристика) В
	|			(ВЫБРАТЬ
	|				Товары.Номенклатура КАК Номенклатура,
	|				Товары.Характеристика КАК Характеристика
	|			ИЗ
	|				Товары КАК Товары)
	|		) КАК ТаблицаЗаказы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказы.Номенклатура,
	|	ТаблицаЗаказы.Характеристика,
	|	ТаблицаЗаказы.КодСтроки,
	|	ТаблицаЗаказы.ЗаказНаПеремещение
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаЗаказы.КОформлению) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоДублей,
	|	ЗаказыНаПеремещение.Номенклатура КАК Номенклатура,
	|	ЗаказыНаПеремещение.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ДублиТоваров
	|ИЗ
	|	ЗаказыНаПеремещение КАК ЗаказыНаПеремещение
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыНаПеремещение.Номенклатура,
	|	ЗаказыНаПеремещение.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказы.Сделка КАК Сделка,
	|	Заказы.ЗаказНаПеремещение КАК ЗаказНаПеремещение,
	|	Заказы.Номенклатура КАК Номенклатура,
	|	Заказы.Характеристика КАК Характеристика,
	|	Заказы.КодСтроки КАК КодСтроки,
	|	Заказы.КОформлениюОстаток КАК КОформлениюОстаток,
	|	0 КАК Распределено,
	|	ДублиТоваров.КоличествоДублей КАК КоличествоДублей
	|ИЗ
	|	ЗаказыНаПеремещение КАК Заказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДублиТоваров КАК ДублиТоваров
	|		ПО Заказы.Номенклатура = ДублиТоваров.Номенклатура
	|			И Заказы.Характеристика = ДублиТоваров.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ЗаказТовары
	|		ПО (ЗаказТовары.Ссылка = Заказы.ЗаказНаПеремещение)
	|			И (ЗаказТовары.КодСтроки = Заказы.КодСтроки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказТовары.Номенклатура,
	|	ЗаказТовары.Характеристика,
	|	ЗаказТовары.НачалоОтгрузки,
	|	ЗаказТовары.Ссылка,
	|	ЗаказТовары.НомерСтроки");
	
	Запрос.УстановитьПараметр("Заказ",            Объект.ЗаказНаПеремещение);
	Запрос.УстановитьПараметр("Организация",      Объект.Организация);
	Запрос.УстановитьПараметр("СкладОтправитель", Объект.СкладОтправитель);
	Запрос.УстановитьПараметр("СкладПолучатель",  Объект.СкладПолучатель);
	Запрос.УстановитьПараметр("Подразделение",    Объект.Подразделение);
	Запрос.УстановитьПараметр("Регистратор",      Объект.Ссылка);
	Запрос.УстановитьПараметр("ОтобратьПоЗаказу", ОтобратьПоЗаказу);
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(,"КодСтроки,Номенклатура,Характеристика,ЗаказНаПеремещение"));
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[1].Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[3].Выбрать();
	
	ТаблицаНераспределенныхТоваров = Новый ТаблицаЗначений();
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Характеристика");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("ЗаказНаПеремещение");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("КодСтроки");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Количество");
	ТаблицаНераспределенныхТоваров.Колонки.Добавить("Сделка");
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура",   Выборка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураПоиска.Вставить("КодСтроки",      0);
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		НераспределенноеКоличество = Выборка.КОформлениюОстаток;
		
		// Если дублей нет, распределяем строку заказа по строкам накладной
		Если Выборка.КоличествоДублей < 2 Тогда
		
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
				ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, "КодСтроки,ЗаказНаПеремещение,Сделка");
				НераспределенноеКоличество = НераспределенноеКоличество - ТекСтрока.Количество;
				
				Если НераспределенноеКоличество <= 0 Тогда
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
		// Если дубли есть, распределяем строки заказов по строкам накладной с учетом количества
		Иначе
			
			// На первом проходе заполним только если количество в строке заказа и накладной совпадают
			
			НайденаПодходящаяСтрока = Ложь;
			
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				
				Если ТекСтрока.Количество = Выборка.КОформлениюОстаток Тогда
					
					НайденаПодходящаяСтрока = Истина;
					ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, "КодСтроки,ЗаказНаПеремещение,Сделка");
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не НайденаПодходящаяСтрока Тогда
				
				НоваяСтрока = ТаблицаНераспределенныхТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Количество = НераспределенноеКоличество;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Распределим дубли товаров, нераспределенные на первом проходе
	Если ТаблицаНераспределенныхТоваров.Количество() > 0 Тогда
	
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("КодСтроки", 0);
		СтруктураПоиска.Вставить("ЗаказНаПеремещение", Документы.ЗаказНаПеремещение.ПустаяСсылка());
		
		СтрокиТовары = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаТовары Из СтрокиТовары Цикл
			
			// Найдем нужные строки в таблице нераспределенных товаров
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("Номенклатура",   СтрокаТовары.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", СтрокаТовары.Характеристика);
			
			НайденныеСтроки = ТаблицаНераспределенныхТоваров.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				Если ТекСтрока.Номенклатура = СтрокаТовары.Номенклатура И
					ТекСтрока.Характеристика = СтрокаТовары.Характеристика И
					ТекСтрока.Склад = СтрокаТовары.Склад И
					ТекСтрока.Количество > 0 Тогда
					
					ЗаполнитьЗначенияСвойств(СтрокаТовары, ТекСтрока, "КодСтроки,ЗаказНаПеремещение,Сделка");
					
					// Уменьшим нераспределенное количество в таблице
					ТекСтрока.Количество = ТекСтрока.Количество - СтрокаТовары.Количество;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Удалим строки, которые не удалось привязать к заказам
	МассивУдаляемыхСтрок = Новый Массив();
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.КодСтроки) Или Не ЗначениеЗаполнено(ТекСтрока.ЗаказНаПеремещение) Тогда
			МассивУдаляемыхСтрок.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекЭлемент Из МассивУдаляемыхСтрок Цикл
		Объект.Товары.Удалить(ТекЭлемент);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
КонецФункции

&НаКлиенте
Процедура ОповеститьОПроведенииДокумента(ПараметрыЗаписи)

	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("РежимЗаписи",      ПараметрыЗаписи.РежимЗаписи);
	ПараметрыОповещения.Вставить("ЕстьРаспоряжение", Объект.ПеремещениеПоЗаказам);

	Оповестить("Запись_ПеремещениеТоваров", ПараметрыОповещения, Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличнуюЧастьТоварыПриИзмененииСклада()

	Если Объект.ПеремещениеПоЗаказам И Объект.Товары.Количество() > 0  Тогда

		Объект.Товары.Очистить();
		Если ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
			ОбновитьИнформациюПоЗаказам();
		КонецЕсли;

	КонецЕсли;


КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОпераций()
	
	Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		"Номенклатура,Характеристика",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийИзмененныеСтроки);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Доставка

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы);
	
	Если ИспользоватьУправлениеДоставкой Тогда
		ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, Объект);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с буфером обмена 

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	ХранилищаНастроек.ХранилищеБуфераОбмена.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре());
	
	ТаблицаТоваров = ХранилищаНастроек.ХранилищеБуфераОбмена.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);

		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ХранилищаНастроек.ХранилищеБуфераОбмена.БуферОбменаПустой() И НЕ ЗначениеЗаполнено(Объект.ЗаказНаПеремещение));
		
	Иначе
		
		МассивЭлементов.Добавить("ТоварыСкопироватьСтроки");
		МассивЭлементов.Добавить("ТОварыКонтекстноеМенюСкопироватьСтроки");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ЗначениеЗаполнено(Объект.ЗаказНаПеремещение));
	
КонецПроцедуры

