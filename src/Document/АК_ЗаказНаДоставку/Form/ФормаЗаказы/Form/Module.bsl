///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

&НаСервере
Функция ПолучитьСтруктуруВозврата()
	
	СтруктураВозврата = Новый Структура("Партнер, ЗаказыПартнера");
	СтруктураВозврата.Партнер = Партнер;
	
	Заказы = Новый Соответствие;
	//Заказы.Колонки.Добавить("Заказ");
	//Заказы.Колонки.Добавить("КлючСтрокиМаршрута");
	
	Пункты = ЗаказыПоАдресам.ПолучитьЭлементы();
	
	Для Каждого Пункт Из Пункты Цикл
		
		ЗаказыПоПунктам = Пункт.ПолучитьЭлементы();
		
		Для каждого Заказ Из ЗаказыПоПунктам Цикл
			
			Заказы.Вставить(Заказ.Заказ, Заказ.КлючСтрокиМаршрута);
			
			//НоваяСтрока = Заказы.Добавить();
			//НоваяСтрока.Заказ = Заказ.Заказ;
			//НоваяСтрока.КлючСтрокиМаршрута = Заказ.КлючСтрокиМаршрута;
			
		КонецЦикла; 
		
		
	КонецЦикла;
	
	СтруктураВозврата.ЗаказыПартнера = Заказы;
	
	Возврат СтруктураВозврата;
	
КонецФункции


// СОБЫТИЯ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Партнер = Параметры.Партнер;
	
	ЗаказыПоАдресамОбъект = ДанныеФормыВЗначение(ЗаказыПоАдресам, Тип("ДеревоЗначений"));
	
	Для Каждого Пункт Из Параметры.Маршрут Цикл
		
		Если Пункт.Партнер = Партнер Тогда
		
			НоваяСтрока = ЗаказыПоАдресамОбъект.Строки.Добавить();
			НоваяСтрока.ПунктНазначения = Пункт.ПунктНазначения;
			НоваяСтрока.КлючСтрокиМаршрута = Пункт.КлючСтрокиМаршрута;
			
			СтрокиЗаказов = Параметры.Заказы.НайтиСтроки(Новый Структура("КлючСтрокиМаршрута", Пункт.КлючСтрокиМаршрута));
			
			Для Каждого СтрокаЗаказа Из СтрокиЗаказов Цикл
				
				Если ЗначениеЗаполнено(СтрокаЗаказа.Заказ) Тогда
				
					НоваяСтрокаЗаказа = НоваяСтрока.Строки.Добавить();
					НоваяСтрокаЗаказа.ПунктНазначения = Пункт.ПунктНазначения;
					НоваяСтрокаЗаказа.Заказ = СтрокаЗаказа.Заказ;
					НоваяСтрокаЗаказа.КлючСтрокиМаршрута = Пункт.КлючСтрокиМаршрута;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ЗаказыПоАдресамОбъект, ЗаказыПоАдресам);
	
КонецПроцедуры


// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура ОК(Команда)
	
	Структура = ПолучитьСтруктуруВозврата();
	Закрыть(Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаказыПоАдресамНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.Значение = Новый Структура("Заказ, КлючСтрокиМаршрута", Элемент.ТекущиеДанные.Заказ, Элемент.ТекущиеДанные.КлючСтрокиМаршрута);
		
КонецПроцедуры

&НаСервере
Процедура ОтнестиЗаказКНовомуАдресу(СтараяСтрока, НоваяСтрока, Заказ)
	
	СтрокаСтарогоЗаказа = ЗаказыПоАдресам.НайтиПоИдентификатору(СтараяСтрока);
	Если СтрокаСтарогоЗаказа.ПолучитьРодителя() = Неопределено Тогда // строка пуккта не переносится
		
	Иначе
		
		СтрокаСтарогоПункта = СтрокаСтарогоЗаказа.ПолучитьРодителя();
		
		СтрокаНовогоПункта = ЗаказыПоАдресам.НайтиПоИдентификатору(НоваяСтрока);
		Если СтрокаНовогоПункта.ПолучитьРодителя() <> Неопределено Тогда
			СтрокаНовогоПункта = СтрокаНовогоПункта.ПолучитьРодителя(); // получаем строку верхнего уровня
		КонецЕсли;
		
		Если СтрокаНовогоПункта <> СтрокаСтарогоПункта Тогда
			
			// Добавляем новую строку
			Строки = СтрокаНовогоПункта.ПолучитьЭлементы();
			НоваяСтрокаЗаказа = Строки.Добавить();
			НоваяСтрокаЗаказа.ПунктНазначения = СтрокаНовогоПункта.ПунктНазначения;
			НоваяСтрокаЗаказа.Заказ = Заказ;
			НоваяСтрокаЗаказа.КлючСтрокиМаршрута = СтрокаНовогоПункта.КлючСтрокиМаршрута;
			
			// Удаляем в старой позиции
			Строки = СтрокаСтарогоПункта.ПолучитьЭлементы();
			Строки.Удалить(СтрокаСтарогоЗаказа);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПоАдресамПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ОтнестиЗаказКНовомуАдресу(Элемент.ТекущаяСтрока, Строка, ПараметрыПеретаскивания.Значение.Заказ);
		
КонецПроцедуры


&НаКлиенте
Процедура ЗаказыПоАдресамПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Предупреждение("Можно удалить только заказы");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаказыПоАдресамПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

