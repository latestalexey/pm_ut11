&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; // используется механизмом серий

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);

	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(Объект.КассаККМ);
	
	ОбновитьВидимостьЭлементов(РеквизитыКассыККМ.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	
	Элементы.ТоварыКоличествоУпаковок.АвтоОтметкаНезаполненного = Не Объект.ПоРезультатамИнвентаризации;
	
	ПриЧтенииСозданииНаСервере();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);		
	КонецЕсли;
	
	Если РеквизитыКассыККМ.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСкопировать", "Доступность", Ложь);
	КонецЕсли;
	
	Если Объект.ПоРезультатамИнвентаризации Тогда
		ПараметрыВыбора = Новый Массив;
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре())));
		Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	Иначе
		Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
	Если Параметры.ПровестиПриОткрытии Тогда
		Попытка
			Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный));
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакПодакцизныйТовар", Новый Структура("Номенклатура", "ПодакцизныйТовар"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		
	Если ИсточникВыбора.ИмяФормы = "Справочник.ВидыЗапасов.Форма.ФормаВводаВидовЗапасов" Тогда	
		
		ПолучитьВидыЗапасовИзХранилища(ВыбранноеЗначение);
		Объект.ВидыЗапасовУказаныВручную = ИсточникВыбора.ВидыЗапасовУказаныВручную;
		Модифицированность = Истина;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ОтчетОРозничныхПродажах" Тогда
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаСервере
Процедура КассаПриИзмененииНаСервере()
	
	РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(Объект.КассаККМ);
	
	Если РеквизитыКассыККМ.ВидЦены <> Объект.ВидЦены Тогда
		// Перезаполнение цен номенклатуры.
		
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыКассыККМ);
		ЗаполнитьЦеныПоВидуЦен(РеквизитыКассыККМ.ВидЦены);
		
	Иначе
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыКассыККМ);
	КонецЕсли;
	
	Объект.НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(
		Объект.Организация,
		Объект.Склад,
		Объект.Дата
	);
	
	ОбновитьВидимостьЭлементов(РеквизитыКассыККМ.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	КассаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииНаСервере(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	
	ВидЦеныПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоРезультатамИнвентаризацииПриИзменении(Элемент)
	
	Если Объект.Товары.Количество() > 0 И Объект.ПоРезультатамИнвентаризации Тогда
		Результат = Вопрос("Данные о количестве могут быть потеряны, продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Результат = КодВозвратаДиалога.Да Тогда
			ПоРезультатамИнвентаризацииНаСервере();
		Иначе
			Объект.ПоРезультатамИнвентаризации = Не Объект.ПоРезультатамИнвентаризации;
		КонецЕсли;
	Иначе
		ПоРезультатамИнвентаризацииНаСервере();
	КонецЕсли;
	
	Элементы.ТоварыКоличествоУпаковок.АвтоОтметкаНезаполненного = Не Объект.ПоРезультатамИнвентаризации;
	Если Объект.ПоРезультатамИнвентаризации Тогда
		ПараметрыВыбора = Новый Массив;
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре())));
		Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	Иначе
		Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТоварыСтатусУказанияСерий" Тогда
		Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
			ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
			
			ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
			
			Если ЗначениеВозврата <> Неопределено Тогда
				ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Партнер) Тогда
		ТекущиеДанные.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель");
	КонецЕсли;
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);	
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакПодакцизныйТовар", Новый Структура("Номенклатура", "ПодакцизныйТовар"));
	СтруктураДействий.Вставить("ЗаполнитьУчетноеКоличествоНоменклатуры", Новый Структура("Регистратор, Склад, Организация, МоментВремени", Объект.Ссылка, Объект.Склад, Объект.Организация, ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, Неопределено)));
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если КонтролироватьАссортимент Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
		//
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
		СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
		СтруктураПроверкиАссортимента.Склад = Объект.Склад;
		СтруктураПроверкиАссортимента.Дата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
		СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина или запрещен к продаже.'");
		СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныПродажи";
		СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
		СтруктураПроверкиАссортимента.РазрешатьДобавление = Истина;
		
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	Если КонтролироватьАссортимент Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьУчетноеКоличествоНоменклатуры", Новый Структура("Регистратор, Склад, Организация, МоментВремени", Объект.Ссылка, Объект.Склад, Объект.Организация, ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, Неопределено)));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		Если КонтролироватьАссортимент Тогда
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьУчетноеКоличествоНоменклатуры", Новый Структура("Регистратор, Склад, Организация, МоментВремени", Объект.Ссылка, Объект.Склад, Объект.Организация, ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, Неопределено)));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока.Количество *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока.Количество *ТекущаяСтрока.Цена <> 0 Тогда
		ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / (ТекущаяСтрока.Количество *ТекущаяСтрока.Цена), 2);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокФактПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковокПоФакту");
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ОПЛАТА ПЛАТЕЖНЫМИ КАРТАМИ

&НаКлиенте
Процедура ОплатаПлатежнымиКартамиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПлатежнымиКартамиВидПлатежнойКартыНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОплатаПлатежнымиКартами.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ЭквайринговыйТерминал) Тогда
		Элементы.ОплатаПлатежнымиКартамиВидПлатежнойКарты.СписокВыбора.Очистить();
	ИначеЕсли ТекущиеДанные.ЭквайринговыйТерминал = ЭквайринговыйТерминалПоУмолчанию Тогда
		Элементы.ОплатаПлатежнымиКартамиВидПлатежнойКарты.СписокВыбора.Очистить();
		
		Для Каждого СтрМас из ВидыПлатежныхКартЭквайринговогоТерминала Цикл
			Элементы.ОплатаПлатежнымиКартамиВидПлатежнойКарты.СписокВыбора.Добавить(СтрМас);	
		КонецЦикла;
		
	Иначе
		Элементы.ОплатаПлатежнымиКартамиВидПлатежнойКарты.СписокВыбора.ЗагрузитьЗначения(ВидыПлатежныхКарт(ТекущиеДанные.ЭквайринговыйТерминал));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПлатежнымиКартамиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		
		ТекущиеДанные = Элементы.ОплатаПлатежнымиКартами.ТекущиеДанные;
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЭквайринговыйТерминал) Тогда
			ТекущиеДанные.ЭквайринговыйТерминал = ЭквайринговыйТерминалПоУмолчанию;
			Если ВидыПлатежныхКартЭквайринговогоТерминала.Количество() = 1 Тогда
				ТекущиеДанные.ВидПлатежнойКарты = ВидыПлатежныхКартЭквайринговогоТерминала[0];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидыЗапасов(Команда)
	
	Перем АдресТоваровВХранилище;
	Перем АдресВидовЗапасовВХранилище;
	
	ПоместитьТоварыИВидыЗапасовВХранилище(
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище
	);
	ФинансыКлиент.ОткрытьВидыЗапасов(
		Объект,
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище,
		ЭтаФорма
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымУчета(Команда)
	Если Объект.Товары.Количество() > 0 Тогда
		Результат = Вопрос("Перед заполнением табличная часть будет очищена, продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Результат = КодВозвратаДиалога.Да Тогда
			ЗаполнитьПоДаннымУчетаНаСервере();
			РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
		КонецЕсли;
	Иначе
		ЗаполнитьПоДаннымУчетаНаСервере();
		РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактическоеКоличествоПоДаннымУчета(Команда)
	
	ЗаполнитьФактическоеКоличествоПоДаннымУчетаНаСервере();
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Перезаполнить(Команда)
	
	Если ЗначениеЗаполнено(Объект.КассоваяСмена) Тогда
		ПерезаполнитьНаСервере();
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Отчет перезаполнен'"),
			,
			НСтр("ru = 'Отчет о розничных продажах перезаполнен по данным кассовой смены'"),
			БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	Перем ТекущаяСтрока;
	
	ВесНоменклатуры = МенеджерОборудованияКлиент.ПолучитьДанныеИзВесов(ЭтаФорма, ТекущаяСтрока);
	
	Если ВесНоменклатуры <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		
		Если Объект.ПоРезультатамИнвентаризации Тогда
			ТекущаяСтрока.КоличествоУпаковокФакт = ВесНоменклатуры;
			
			Если ТекущаяСтрока.КоличествоУпаковокФакт < ТекущаяСтрока.КоличествоУпаковокУчет Тогда
				ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковокУчет - ТекущаяСтрока.КоличествоУпаковокФакт;
			Иначе
				ТекущаяСтрока.КоличествоУпаковок = 0;
			КонецЕсли;
			
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
			
		Иначе
			ТекущаяСтрока.КоличествоУпаковок = ВесНоменклатуры;
			
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
			
		КонецЕсли;
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура СкладПриИзмененииНаСервере(КэшированныеЗначения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Склады.Ссылка КАК Склад,
	|	Склады.РозничныйВидЦены КАК ВидЦены,
	|	Склады.РозничныйВидЦены.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Склад);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект, Выборка);
	КонецЦикла;
	
	Объект.НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(
		Объект.Организация,
		Объект.Склад,
		Объект.Дата
	);
	
	ЗаполнитьЦеныПоВидуЦен(Объект.ВидЦены);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",  Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект));
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОтчетОРозничныхПродажах));
	УстановитьВидимостьЭлементовСерий();
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	КонтролироватьАссортимент = ПолучитьФункциональнуюОпцию("КонтролироватьАссортимент", Новый Структура("Склад", Объект.Склад));
	Если КонтролироватьАссортимент <> Истина Тогда
		КонтролироватьАссортимент = Ложь;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ВидЦеныПриИзмененииНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыЦен.ЦенаВключаетНДС КАК ЦенаВключаетНДС
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ВидЦены);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект, Выборка);
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)

	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакПодакцизныйТовар", Новый Структура("Номенклатура", "ПодакцизныйТовар"));
	Если КонтролироватьАссортимент Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПартнера");
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками, Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками, Объект);
	
	Если Объект.ПоРезультатамИнвентаризации Тогда
		ИмяКолонкиКоличество = "КоличествоУпаковокФакт";
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьКоличествоУпаковокПоФакту");
		СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьКоличествоУпаковокПоФакту");
	Иначе
		ИмяКолонкиКоличество = "КоличествоУпаковок";
	КонецЕсли;
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ИмяКолонкиКоличество                   = ИмяКолонкиКоличество;
	
	Если КонтролироватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
		СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
		СтруктураПроверкиАссортимента.Склад = Объект.Склад;
		СтруктураПроверкиАссортимента.Дата = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
		СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина или запрещен к продаже.'");
		СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныПродажи";
		СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
		СтруктураПроверкиАссортимента.РазрешатьДобавление = Истина;
		
		СтруктураДействий.ПараметрыПроверкиАссортимента = СтруктураПроверкиАссортимента;
	КонецЕсли;
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если СтруктураДействий.МассивСтрокССериями.Количество() = 1
		И НоменклатураКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьФормуУказанияСерий",0.1,Истина);
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	Элементы.ТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость        = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуУказанияСерий()
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	
	ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтаФорма);
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ОбновитьВидимостьЭлементов(КассаФискальныйРегистратор)

	Элементы.КассоваяСмена.Видимость                     = КассаФискальныйРегистратор;
	Элементы.ТоварыПроцентАвтоматическойСкидки.Видимость = КассаФискальныйРегистратор;
	Элементы.ТоварыСуммаАвтоматическойСкидки.Видимость   = КассаФискальныйРегистратор;
	
	Элементы.КассаККМ.ТолькоПросмотр                     = КассаФискальныйРегистратор;
	Элементы.Склад.ТолькоПросмотр                        = КассаФискальныйРегистратор;
	
	Элементы.ПоРезультатамИнвентаризации.Видимость       = Не КассаФискальныйРегистратор;
	Элементы.ГруппаСкидка.Видимость                      = Не КассаФискальныйРегистратор;
	
	Если КассаФискальныйРегистратор Тогда
		Элементы.ТоварыПроцентРучнойСкидки.Видимость                = Ложь;
		Элементы.ТоварыСуммаРучнойСкидки.Видимость                  = Ложь;
		Элементы.ТоварыКоличествоУпаковокУчет.Видимость             = Ложь;
		Элементы.ТоварыКоличествоУпаковокФакт.Видимость             = Ложь;
		Элементы.ТоварыКоличествоУпаковок.АвтоОтметкаНезаполненного = Истина;
		Элементы.ЗаполнитьПоДаннымУчета.Видимость                            = Ложь;
		Элементы.ТоварыЗаполнитьФактическоеКоличествоПоДаннымУчета.Видимость = Ложь;
	Иначе
		Элементы.ТоварыПроцентРучнойСкидки.Видимость                = Истина;
		Элементы.ТоварыСуммаРучнойСкидки.Видимость                  = Истина;
		Элементы.ТоварыКоличествоУпаковокУчет.Видимость             = Объект.ПоРезультатамИнвентаризации;
		Элементы.ТоварыКоличествоУпаковокФакт.Видимость             = Объект.ПоРезультатамИнвентаризации;
		Элементы.ТоварыКоличествоУпаковок.АвтоОтметкаНезаполненного = НЕ Объект.ПоРезультатамИнвентаризации;
		Элементы.ТоварыКоличествоУпаковок.Доступность               = НЕ Объект.ПоРезультатамИнвентаризации;
		Элементы.ЗаполнитьПоДаннымУчета.Видимость                            = Объект.ПоРезультатамИнвентаризации;
		Элементы.ТоварыЗаполнитьФактическоеКоличествоПоДаннымУчета.Видимость = Объект.ПоРезультатамИнвентаризации;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныПоВидуЦен(ВидЦеныЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тзТовары.НомерСтроки КАК НомерСтроки,
	|	тзТовары.Номенклатура КАК Номенклатура,
	|	тзТовары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&тзТовары КАК тзТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
	|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&ДатаДокумента, ДЕНЬ),
	|				ВидЦены = &ВидЦены
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							Товары.Номенклатура,
	|							Товары.Характеристика
	|						ИЗ
	|							Товары КАК Товары)) КАК ЦеныНоменклатуры
	|		ПО Товары.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И Товары.Характеристика = ЦеныНоменклатуры.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	Запрос.УстановитьПараметр("Валюта",        Объект.Валюта);
	Запрос.УстановитьПараметр("ВидЦены",       ВидЦеныЗаполнения);
	Запрос.УстановитьПараметр("тзТовары",      Объект.Товары.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТЧ = Объект.Товары[Выборка.НомерСтроки - 1];
		
		СтрокаТЧ.Цена = Выборка.Цена;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьТоварыИВидыЗапасовВХранилище(АдресТоваровВХранилище, АдресВидовЗапасовВХранилище)
	
	ЗапасыСервер.ПоместитьТоварыИВидыЗапасовВХранилище(
		Объект.Товары,
		Объект.ВидыЗапасов,
		УникальныйИдентификатор,
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище
	);
		
КонецПроцедуры

&НаСервере
Процедура ПолучитьВидыЗапасовИзХранилища(АдресВидовЗапасовВХранилище)
	
	Объект.ВидыЗапасов.Загрузить(ПолучитьИзВременногоХранилища(АдресВидовЗапасовВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымУчетаНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Объект.Товары.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыОрганизаций.Номенклатура    КАК Номенклатура,
	|	ТоварыОрганизаций.Характеристика  КАК Характеристика,
	|	ТоварыОрганизаций.КоличествоОстаток КАК КоличествоУчет
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(&МоментВремени, Организация = &Организация И Склад = &Склад) КАК ТоварыОрганизаций
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыОрганизацийДвижения.Номенклатура,
	|	ТоварыОрганизацийДвижения.Характеристика,
	|	-ТоварыОрганизацийДвижения.Количество
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизацийДвижения
	|ГДЕ
	|	ТоварыОрганизацийДвижения.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.Номенклатура          КАК Номенклатура,
	|	ВременнаяТаблица.Характеристика        КАК Характеристика,
	|	СУММА(ВременнаяТаблица.КоличествоУчет) КАК КоличествоУчет
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблица.Номенклатура,
	|	ВременнаяТаблица.Характеристика";
	
	Запрос.УстановитьПараметр("Регистратор",   Объект.Ссылка);
	Запрос.УстановитьПараметр("Склад",         Объект.Склад);
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("МоментВремени", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, Неопределено));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура = Выборка.Номенклатура;
		НоваяСтрока.Характеристика = Выборка.Характеристика;
		НоваяСтрока.КоличествоУпаковокУчет = Выборка.КоличествоУчет;
		НоваяСтрока.КоличествоУпаковокФакт = Выборка.КоличествоУчет;
		НоваяСтрока.Партнер = Справочники.Партнеры.РозничныйПокупатель;
		
		СтруктураДействий = Новый Структура;
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",     НоваяСтрока.Характеристика);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу",  НоваяСтрока.Упаковка);
		СтруктураДействий.Вставить("ЗаполнитьПризнакПодакцизныйТовар", Новый Структура("Номенклатура", "ПодакцизныйТовар"));
		Если КонтролироватьАссортимент Тогда
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажиПоАссортименту", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныПоАссортиментуВСтрокеТЧ(Объект));
		Иначе
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныРозницаВСтрокеТЧ(Объект));
		КонецЕсли;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДанныеУчетаНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тчТовары.Номенклатура    КАК Номенклатура,
	|	тчТовары.Характеристика  КАК Характеристика,
	|	тчТовары.Упаковка        КАК Упаковка
	|ПОМЕСТИТЬ тчТовары
	|ИЗ
	|	&тчТовары КАК тчТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура    КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика  КАК Характеристика,
	|	ТоварыНаСкладахОстатки.ВНаличииОстаток КАК КоличествоУчет
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(&МоментВремени, Склад = &Склад) КАК ТоварыНаСкладахОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыНаСкладахДвижения.Номенклатура,
	|	ТоварыНаСкладахДвижения.Характеристика,
	|	-ТоварыНаСкладахДвижения.ВНаличии
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладахДвижения
	|ГДЕ
	|	ТоварыНаСкладахДвижения.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка       КАК Упаковка,
	|	СУММА(ЕСТЬNULL(ВременнаяТаблица.КоличествоУчет, 0) / ЕСТЬNULL(Товары.Упаковка.Коэффициент, 1)) КАК КоличествоУчет
	|ИЗ
	|	тчТовары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО ВременнаяТаблица.Номенклатура = Товары.Номенклатура И ВременнаяТаблица.Характеристика = Товары.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Упаковка,
	|	Товары.Характеристика";
	
	Запрос.УстановитьПараметр("Регистратор",   Объект.Ссылка);
	Запрос.УстановитьПараметр("тчТовары",      Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, Упаковка"));
	Запрос.УстановитьПараметр("Склад",         Объект.Склад);
	Запрос.УстановитьПараметр("МоментВремени", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, Неопределено));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, Упаковка", Выборка.Номенклатура, Выборка.Характеристика, Выборка.Упаковка));
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НоваяСтрока = НайденныеСтроки[0];
			НоваяСтрока.КоличествоУпаковокУчет = Выборка.КоличествоУчет;
			Если НоваяСтрока.КоличествоУпаковок > Выборка.КоличествоУчет Тогда
				НоваяСтрока.КоличествоУпаковокФакт = Выборка.КоличествоУчет;
			Иначе
				НоваяСтрока.КоличествоУпаковокФакт = Выборка.КоличествоУчет - НоваяСтрока.КоличествоУпаковок;
			КонецЕсли;
			
			Если НоваяСтрока.КоличествоУпаковокФакт < НоваяСтрока.КоличествоУпаковокУчет Тогда
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковокУчет - НоваяСтрока.КоличествоУпаковокФакт;
			Иначе
				НоваяСтрока.КоличествоУпаковок = 0;
			КонецЕсли;
			
			СтруктураДействий = Новый Структура;
			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьСтатусыУказанияСерийСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФактическоеКоличествоПоДаннымУчетаНаСервере()
	
	Для каждого СтрокаТовары Из Объект.Товары Цикл
		
		СтрокаТовары.КоличествоУпаковок = 0;
		СтрокаТовары.КоличествоУпаковокФакт = СтрокаТовары.КоличествоУпаковокУчет;
		
		СтруктураДействий = Новый Структура;
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТовары, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПоРезультатамИнвентаризацииНаСервере()
	
	РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(Объект.КассаККМ);
	
	Если Объект.ПоРезультатамИнвентаризации Тогда
		ПерезаполнитьДанныеУчетаНаСервере();
	КонецЕсли;
	
	ОбновитьВидимостьЭлементов(РеквизитыКассыККМ.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьНаСервере()
	
	ОтчетОРозничныхПродажахОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.ОтчетОРозничныхПродажах"));
	РозничныеПродажи.ЗаполнитьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажахОбъект, Объект.КассоваяСмена);
	ЗаполнитьСтатусыУказанияСерийСервер();
	// Обновим измененный объект
	Прочитать();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(Форма)
	
	Форма.СуммаВсего        = Форма.Объект.Товары.Итог("Сумма");
	Форма.СуммаРучнойСкидки = Форма.Объект.Товары.Итог("СуммаРучнойСкидки");
	Форма.СуммаСкидки       = Форма.СуммаРучнойСкидки;
		
	Если Форма.СуммаВсего > 0 Тогда
		
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (Форма.СуммаВсего + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентРучнойСкидки;
		
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = Форма.ПроцентРучнойСкидки;
		
	Иначе
		
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
		
	КонецЕсли;
	
	Если Не Форма.Объект.ЦенаВключаетНДС Тогда
		Форма.СуммаВсего = Форма.СуммаВсего + Форма.Объект.Товары.Итог("СуммаНДС");
	КонецЕсли;
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС")
	 ИЛИ Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД") Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
КонецФункции

&НаСервереБезКонтекста
Функция ВидыПлатежныхКарт(ЭквайринговыйТерминал)
	ДоговорЭквайринга = Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(
																				ЭквайринговыйТерминал).ДоговорЭквайринга;
	
	Возврат Справочники.ДоговорыЭквайринга.ВидыПлатежныхКарт(ДоговорЭквайринга);
КонецФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ОтчетОРозничныхПродажах));
	УстановитьВидимостьЭлементовСерий();
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакПодакцизныйТовар", Новый Структура("Номенклатура", "ПодакцизныйТовар"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
	
	РассчитатьИтоговыеПоказателиОтчетаОРозничныхПродажах(ЭтаФорма);
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	ЭквайринговыйТерминалПоУмолчанию = Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(Объект.КассаККМ, Объект.Организация);
	
	ВидыПлатежныхКартЭквайринговогоТерминала = Новый ФиксированныйМассив(ВидыПлатежныхКарт(ЭквайринговыйТерминалПоУмолчанию));
	
	КонтролироватьАссортимент = ПолучитьФункциональнуюОпцию("КонтролироватьАссортимент", Новый Структура("Склад", Объект.Склад));
	Если КонтролироватьАссортимент <> Истина Тогда
		КонтролироватьАссортимент = Ложь;
	КонецЕсли;
	
КонецПроцедуры

