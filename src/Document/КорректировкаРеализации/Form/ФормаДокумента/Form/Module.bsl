&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	УстановитьДоступностьКомандБуфераОбмена();
	
	// Подсистема "ЭлектронныеДокументы"
	УстановитьТекстСостоянияЭДНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения И НЕ РасхожденияАктуальны Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да,	Нстр("ru='Перезаполнить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена,Нстр("ru='Отмена'"));
		
		Ответ = Вопрос(НСтр("ru='Табличная часть ""Товары"" была изменена. Перезаполнить расхождения?'"), СписокКнопок, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			Отказ = Истина;
			
			Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтаФорма, Неопределено, Неопределено) Тогда
				ЗаполнитьРасхожденияСервер();
				НастроитьОтображениеЭлементовПоИтогамРасхождений(ЭтаФорма);
			КонецЕсли;
			
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаРасхождения;
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// Подсистема "ЭлектронныеДокументы"
	УстановитьТекстСостоянияЭДНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСлужебныеРеквизитыТабличныхЧастей();
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
	// Подсистема "ЭлектронныеДокументы"
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.КорректировкаРеализации.Форма.ФормаПодбораТоваровИзЗаказа" Тогда
		
		ОбработкаПодбораТоваровИзЗаказа(ВыбранноеЗначение.АдресТоваровВХранилище);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокумента"
		ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаСписка" Тогда
		
		НастроитьОтображениеРеквизитовСчетаФактуры(ЭтаФорма, ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.АктВыполненныхРабот")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		
		ОбработкаВыбораДокументаОснованияСервер(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПредставлениеДокументаОснованияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		ОткрытьЗначение(Объект.ДокументОснование);
		
	Иначе		
		
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("Проведен", Истина);
		СтруктураОтбор.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ИмяФормыВыбора = "Документ.РеализацияТоваровУслуг.ФормаВыбора";
			СтруктураОтбор.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено"));
			
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			ИмяФормыВыбора = "Документ.АктВыполненныхРабот.ФормаВыбора";
			
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
			ИмяФормыВыбора = "Документ.РеализацияУслугПрочихАктивов.ФормаВыбора";
			
		КонецЕсли;
		
		ОткрытьФорму(
			ИмяФормыВыбора,
			Новый Структура("Отбор", СтруктураОтбор),
			ЭтаФорма
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовПриИзменении(Элемент)
	
	Элементы.АналитикаРасходов.Доступность = ЗначениеЗаполнено(Объект.СтатьяРасходов);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДоходовПриИзменении(Элемент)
	
	Элементы.АналитикаДоходов.Доступность = ЗначениеЗаполнено(Объект.СтатьяДоходов);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Исправление      = Ложь;
	Корректировочный = Ложь;
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон") Тогда
		Корректировочный = Истина;
	Иначе
		Исправление      = Истина;
	КонецЕсли;
	
	ПродажиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект.Организация, Истина, Исправление, Корректировочный);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСчетовФактурНажатие(Элемент)
	
	СтруктураОтбор = Новый Структура("ДокументОснование, Организация, ПометкаУдаления", Объект.Ссылка, Объект.Организация, Ложь);
	
	ОткрытьФорму(
		"Документ.СчетФактураВыданный.ФормаСписка",
		Новый Структура("Отбор", СтруктураОтбор),
		ЭтаФорма
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения);
	
	РасхожденияАктуальны = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	
	РасхожденияАктуальны = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Уникальность", Объект.Ссылка.УникальныйИдентификатор());
	ПараметрыОткрытия.Вставить("Источник", ЭтаФорма);
	ПараметрыОткрытия.Вставить("Окно", ЭтаФорма.Окно);
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Объект.Ссылка, ПараметрыОткрытия);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Поле = Элементы.ТоварыЦена Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) И НЕ Объект.Согласован Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены необходимо выбрать вид цены ""<произвольная>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "ВидЦены"),
			);
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыСумма Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) И НЕ Объект.Согласован Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования суммы необходимо выбрать вид цены ""<произвольная>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "ВидЦены"),
			);
		КонецЕсли;
	
	ИначеЕсли Поле = Элементы.ТоварыСуммаСНДС Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) И НЕ Объект.Согласован Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования суммы с НДС необходимо выбрать вид цены ""<произвольная>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "ВидЦены"),
			);
		КонецЕсли;
		

	ИначеЕсли Поле = Элементы.ТоварыЗаказКлиента Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ЗаказКлиента) Тогда
			ОткрытьЗначение(ТекущаяСтрока.ЗаказКлиента);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		Если Объект.ПродажаПоЗаказам Тогда
			Заказ = Неопределено;
			ПродажаПоНесколькимЗаказам = Ложь;
			Для Каждого СтрокаТовары Из Объект.Товары Цикл
				Если СтрокаТовары.НомерСтроки = ТекущаяСтрока.НомерСтроки Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(Заказ) И СтрокаТовары.ЗаказКлиента <> Заказ Тогда
					ПродажаПоНесколькимЗаказам = Истина;
					Прервать;
				Иначе
					Заказ = СтрокаТовары.ЗаказКлиента;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ПродажаПоНесколькимЗаказам Тогда
				ТекущаяСтрока.ЗаказКлиента = Заказ;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ СкладГруппа Тогда
			ТекущаяСтрока.Склад = Объект.Склад;
		КонецЕсли;
		
	ИначеЕсли Копирование Тогда
		ТекущаяСтрока.КодСтроки = 0;
	КонецЕсли;
	
	РасхожденияАктуальны = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбновитьЗависимыеРеквизитыФормы();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбновитьЗависимыеРеквизитыФормы();
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	
	ОбновитьЗависимыеРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура(
		"ГруппаСкладов, ТекущийЭлемент, Номенклатура, Характеристика, ВыборВЗаказ",
		Объект.Склад,
		ТекущаяСтрока.Склад,
		ТекущаяСтрока.Номенклатура,
		ТекущаяСтрока.Характеристика,
		Ложь
	);
	ВыбранноеЗначение = ОткрытьФормуМодально(
		"Справочник.Склады.Форма.ФормаВыбораПоОстаткам",
		СтруктураПараметров,
		Элемент
	);
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущаяСтрока.Склад = ВыбранноеЗначение.Склад;
		ОбновитьЗависимыеРеквизитыФормы();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаказКлиентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РеквизитыДокументаОснования = РеквизитыДокументаОснования(Объект.ДокументОснование);
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Валюта",                Объект.Валюта);
		ПараметрыОтбора.Вставить("Контрагент",            Объект.Контрагент);
		ПараметрыОтбора.Вставить("Договор",    			  Объект.Договор);
		ПараметрыОтбора.Вставить("НалогообложениеНДС",    РеквизитыДокументаОснования.НалогообложениеНДС);
		ПараметрыОтбора.Вставить("Организация",           Объект.Организация);
		ПараметрыОтбора.Вставить("Партнер",               Объект.Партнер);
		ПараметрыОтбора.Вставить("Соглашение",            Объект.Соглашение);
		ПараметрыОтбора.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
		ПараметрыОтбора.Вставить("ЦенаВключаетНДС",       РеквизитыДокументаОснования.ЦенаВключаетНДС);
		
		ОткрытьФормуМодально(
			"Документ.КорректировкаРеализации.Форма.ФормаВыбораРаспоряжения",
			Новый Структура("Отбор,Склад,ДокументОснование", ПараметрыОтбора, Объект.Склад, Объект.ДокументОснование),
			Элемент
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаказКлиентаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
  	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.ЗаказКлиента = ВыбранноеЗначение;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ РАСХОЖДЕНИЯ

&НаКлиенте
Процедура РасхожденияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Расхождения.ТекущиеДанные;
	
	Если Поле = Элементы.РасхожденияЗаказКлиента Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ЗаказКлиента) Тогда
			ОткрытьЗначение(ТекущаяСтрока.ЗаказКлиента);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияВариантОтраженияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Расхождения.ТекущиеДанные;
	
	ДанныеВыбора = Новый СписокЗначений;
	Если ТекущаяСтрока.КоличествоУпаковок > 0 Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.ОтразитьНаПрочихДоходах"));
		Если ТекущаяСтрока.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализациюУчестьПриИнвентаризации"));
		Иначе
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализациюУменьшитьСкладскиеОстатки"));
		КонецЕсли;
	ИначеЕсли ТекущаяСтрока.КоличествоУпаковок < 0 Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.СписатьНаРасходы"));
		Если ТекущаяСтрока.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУчестьПриИнвентаризации"));
		Иначе
			ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУвеличитьСкладскиеОстатки"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасхожденияВариантОтраженияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Расхождения.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПеречислениеСсылка.ВариантыОтраженияКорректировокРеализаций") Тогда
		
		Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализациюУчестьПриИнвентаризации")
		 ИЛИ ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУчестьПриИнвентаризации") Тогда
		 	
		 	Если ЗначениеЗаполнено(ТекущаяСтрока.РаспоряжениеНаИнвентаризациюПоУмолчанию) Тогда
				ТекущаяСтрока.ВариантОтражения = ВыбранноеЗначение;
				ТекущаяСтрока.РаспоряжениеНаИнвентаризацию = ТекущаяСтрока.РаспоряжениеНаИнвентаризациюПоУмолчанию;
			Иначе
		 		ОткрытьФормуМодально("Документ.РаспоряжениеНаИнвентаризациюТоваров.ФормаВыбора",
					Новый Структура("Отбор", Новый Структура("Склад, Проведен", ТекущаяСтрока.Склад, Истина)),
					Элемент
				);
			КонецЕсли;
			
		Иначе
			ТекущаяСтрока.ВариантОтражения = ВыбранноеЗначение;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.РаспоряжениеНаИнвентаризациюТоваров") Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			ТекущаяСтрока.РаспоряжениеНаИнвентаризацию = ВыбранноеЗначение;
			Если ТекущаяСтрока.КоличествоУпаковок < 0 Тогда
				ТекущаяСтрока.ВариантОтражения = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУчестьПриИнвентаризации");
			Иначе
				ТекущаяСтрока.ВариантОтражения = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализациюУчестьПриИнвентаризации");
			КонецЕсли;
		Иначе
			ТекущаяСтрока.ВариантОтражения = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.ПустаяСсылка");
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.ВариантОтражения = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.ПустаяСсылка");
		
	КонецЕсли;
	
	НастроитьОтображениеЭлементовПоИтогамРасхождений(ЭтаФорма);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоИсходнымДанным(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтаФорма, Объект.Товары, Неопределено) Тогда
		ЗаполнитьПоИсходнымДаннымСервер();
	КонецЕсли;
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТоварыИзЗаказа(Команда)
	
	РеквизитыДокументаОснования = РеквизитыДокументаОснования(Объект.ДокументОснование);
	
	МассивКодовСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если СтрокаТЧ.КодСтроки <> 0 И ЗначениеЗаполнено(СтрокаТЧ.ЗаказКлиента) Тогда
			МассивКодовСтрок.Добавить(Новый Структура("КодСтроки,ЗаказКлиента", СтрокаТЧ.КодСтроки, СтрокаТЧ.ЗаказКлиента));
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПодбора = Новый Структура(
		"ВалютаДокумента,
		|Документ,
		|ДокументОснование,
		|Склад,
		|МассивКодовСтрок,
		|Партнер,
		|Сделка,
		|Контрагент,
		|Договор,
		|Организация,
		|ХозяйственнаяОперация,
		|Соглашение,
		|ВалютаВзаиморасчетов,
		|НалогообложениеНДС,
		|ЦенаВключаетНДС,
		|Дата",
		Объект.Валюта,
		Объект.Ссылка,
		Объект.ДокументОснование,
		Объект.Склад,
		МассивКодовСтрок,
		Объект.Партнер,
		Объект.Сделка,
		Объект.Контрагент,
		Объект.Договор,
		Объект.Организация,
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"),
		Объект.Соглашение,
		Объект.ВалютаВзаиморасчетов,
		РеквизитыДокументаОснования.НалогообложениеНДС,
		РеквизитыДокументаОснования.ЦенаВключаетНДС,
		Объект.Дата
	);
	
	ОткрытьФормуМодально("Документ.КорректировкаРеализации.Форма.ФормаПодбораТоваровИзЗаказа",
		ПараметрыПодбора,
		ЭтаФорма
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы);
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		Если ИспользуетсяКоличествоУпаковок Тогда
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		Иначе
			ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий, Объект);
		КонецЕсли;
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РасхожденияАктуальны = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению(Команда)
	
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", "Товары") Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		РасхожденияАктуальны = Ложь;
		
	КонецЕсли;
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", "Товары") Тогда
		
		ВидЦен = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, Истина);
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
			РасхожденияАктуальны = Ложь;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", "Товары") Тогда
		
		ВидЦен = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, Истина);
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
			РасхожденияАктуальны = Ложь;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВВыделенныхСтроках(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(Объект, Объект.Товары, "Товары", ВыделенныеСтроки) Тогда
		
		СтруктураОтбора = Новый Структура("ВыборГруппы,ЭтоГруппа", ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"), Ложь);
		СтруктураПараметров = Новый Структура("Отбор,ГруппаСкладов", СтруктураОтбора, Объект.Склад);
		ВыбранныйСклад = ОткрытьФормуМодально("Справочник.Склады.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
		
		Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
			
			ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад);
			СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(ВыбранныйСклад, ЗаполненоСтрок, ВыделенныеСтроки.Количество());
			ОбновитьЗависимыеРеквизитыФормы();
			РасхожденияАктуальны = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасхождения(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтаФорма, Объект.Расхождения, Неопределено) Тогда
		ЗаполнитьРасхожденияСервер();
		НастроитьОтображениеЭлементовПоИтогамРасхождений(ЭтаФорма);
	КонецЕсли;
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВариантыОтражения(Команда)
	
	ЕстьУвеличениеКоличестваПоОрдерномуСкладу = Ложь;
	ЕстьУвеличениеКоличестваБезИнвентаризации = Ложь;
	ЕстьУменьшениеКоличестваПоОрдерномуСкладу = Ложь;
	ЕстьУменьшениеКоличестваБезИнвентаризации = Ложь;
	
	Для Каждого СтрокаРасхождений Из Объект.Расхождения Цикл
		
		Если (СтрокаРасхождений.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			Или СтрокаРасхождений.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
		 И СтрокаРасхождений.КоличествоУпаковок > 0
		 И СтрокаРасхождений.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
			ЕстьУвеличениеКоличестваПоОрдерномуСкладу = Истина;
			
		ИначеЕсли (СтрокаРасхождений.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			Или СтрокаРасхождений.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
		 И СтрокаРасхождений.КоличествоУпаковок > 0
		 И НЕ СтрокаРасхождений.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
		 	ЕстьУвеличениеКоличестваБезИнвентаризации = Истина;
		 	
		ИначеЕсли (СтрокаРасхождений.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			Или СтрокаРасхождений.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
		 И СтрокаРасхождений.КоличествоУпаковок < 0
		 И СтрокаРасхождений.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
		 	ЕстьУменьшениеКоличестваПоОрдерномуСкладу = Истина;
			
		ИначеЕсли (СтрокаРасхождений.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			Или СтрокаРасхождений.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
		 И СтрокаРасхождений.КоличествоУпаковок < 0
		 И НЕ СтрокаРасхождений.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач Тогда
		 	ЕстьУменьшениеКоличестваБезИнвентаризации = Истина;
		 	
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ (
	 ЕстьУвеличениеКоличестваПоОрдерномуСкладу
	 ИЛИ ЕстьУвеличениеКоличестваБезИнвентаризации
	 ИЛИ ЕстьУменьшениеКоличестваПоОрдерномуСкладу
	 ИЛИ ЕстьУменьшениеКоличестваБезИнвентаризации
	 ) Тогда
		Предупреждение(НСтр("ru = 'Нет строк, в которых доступно изменение варианта отражения.'"));
		Возврат;
	КонецЕсли;
	
	Если ЕстьУвеличениеКоличестваПоОрдерномуСкладу Тогда
		
		СписокВариантовОтражения = Новый СписокЗначений;
		СписокВариантовОтражения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.ОтразитьНаПрочихДоходах"));
		СписокВариантовОтражения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализациюУчестьПриИнвентаризации"));
		
		СтруктураОтбор = Новый Структура("Ссылка", СписокВариантовОтражения);
		
		ВариантОтраженияУвеличениеКоличестваПоОрдерномуСкладу = ОткрытьФормуМодально(
			"Перечисление.ВариантыОтраженияКорректировокРеализаций.ФормаВыбора", 
			Новый Структура("Отбор", СтруктураОтбор)
		);
		
	КонецЕсли;
	
	Если ЕстьУвеличениеКоличестваБезИнвентаризации Тогда
		
		СписокВариантовОтражения = Новый СписокЗначений;
		СписокВариантовОтражения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.ОтразитьНаПрочихДоходах"));
		СписокВариантовОтражения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализациюУменьшитьСкладскиеОстатки"));
		
		СтруктураОтбор = Новый Структура("Ссылка", СписокВариантовОтражения);
		
		ВариантОтраженияУвеличениеКоличестваБезИнвентаризации = ОткрытьФормуМодально(
			"Перечисление.ВариантыОтраженияКорректировокРеализаций.ФормаВыбора", 
			Новый Структура("Отбор", СтруктураОтбор)
		);
		
	КонецЕсли;
	
	Если ЕстьУменьшениеКоличестваПоОрдерномуСкладу Тогда
		
		СписокВариантовОтражения = Новый СписокЗначений;
		СписокВариантовОтражения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.СписатьНаРасходы"));
		СписокВариантовОтражения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУчестьПриИнвентаризации"));
		
		СтруктураОтбор = Новый Структура("Ссылка", СписокВариантовОтражения);
		
		ВариантОтраженияУменьшениеКоличестваПоОрдерномуСкладу = ОткрытьФормуМодально(
			"Перечисление.ВариантыОтраженияКорректировокРеализаций.ФормаВыбора", 
			Новый Структура("Отбор", СтруктураОтбор)
		);
		
	КонецЕсли;
	
	Если ЕстьУменьшениеКоличестваБезИнвентаризации Тогда
		
		СписокВариантовОтражения = Новый СписокЗначений;
		СписокВариантовОтражения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.СписатьНаРасходы"));
		СписокВариантовОтражения.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУвеличитьСкладскиеОстатки"));
		
		СтруктураОтбор = Новый Структура("Ссылка", СписокВариантовОтражения);
		
		ВариантОтраженияУменьшениеКоличестваБезИнвентаризации = ОткрытьФормуМодально(
			"Перечисление.ВариантыОтраженияКорректировокРеализаций.ФормаВыбора", 
			Новый Структура("Отбор", СтруктураОтбор)
		);
		
	КонецЕсли;
	
	РаспоряженияПоСкладам = Новый Соответствие;
	
	Если ЗначениеЗаполнено(ВариантОтраженияУвеличениеКоличестваПоОрдерномуСкладу)
	 ИЛИ ЗначениеЗаполнено(ВариантОтраженияУвеличениеКоличестваБезИнвентаризации)
	 ИЛИ ЗначениеЗаполнено(ВариантОтраженияУменьшениеКоличестваПоОрдерномуСкладу)
	 ИЛИ ЗначениеЗаполнено(ВариантОтраженияУменьшениеКоличестваБезИнвентаризации) Тогда
		
		Для Каждого СтрокаРасхождений Из Объект.Расхождения Цикл
			
			Если (СтрокаРасхождений.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			Или СтрокаРасхождений.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
			 И СтрокаРасхождений.КоличествоУпаковок > 0
			 И СтрокаРасхождений.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
			 И ЗначениеЗаполнено(ВариантОтраженияУвеличениеКоличестваПоОрдерномуСкладу) Тогда
				СтрокаРасхождений.ВариантОтражения = ВариантОтраженияУвеличениеКоличестваПоОрдерномуСкладу;
				ЗаполнитьРаспоряжениеНаИнвентаризациюВСтроке(СтрокаРасхождений, РаспоряженияПоСкладам);
			
			ИначеЕсли (СтрокаРасхождений.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			Или СтрокаРасхождений.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
			 И СтрокаРасхождений.КоличествоУпаковок > 0
			 И (НЕ СтрокаРасхождений.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач)
			 И ЗначениеЗаполнено(ВариантОтраженияУвеличениеКоличестваБезИнвентаризации) Тогда
			 	СтрокаРасхождений.ВариантОтражения = ВариантОтраженияУвеличениеКоличестваБезИнвентаризации;
			 	
			ИначеЕсли (СтрокаРасхождений.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			Или СтрокаРасхождений.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
			 И СтрокаРасхождений.КоличествоУпаковок < 0
			 И СтрокаРасхождений.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
			 И ЗначениеЗаполнено(ВариантОтраженияУменьшениеКоличестваПоОрдерномуСкладу) Тогда
			 	СтрокаРасхождений.ВариантОтражения = ВариантОтраженияУменьшениеКоличестваПоОрдерномуСкладу;
				ЗаполнитьРаспоряжениеНаИнвентаризациюВСтроке(СтрокаРасхождений, РаспоряженияПоСкладам);
				
			ИначеЕсли (СтрокаРасхождений.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
			Или СтрокаРасхождений.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"))
			 И СтрокаРасхождений.КоличествоУпаковок < 0
			 И (НЕ СтрокаРасхождений.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач)
			 И ЗначениеЗаполнено(ВариантОтраженияУменьшениеКоличестваБезИнвентаризации) Тогда
			 	СтрокаРасхождений.ВариантОтражения = ВариантОтраженияУменьшениеКоличестваБезИнвентаризации;
			 	
			КонецЕсли;
			
		КонецЦикла;
		
		НастроитьОтображениеЭлементовПоИтогамРасхождений(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаспоряжениеНаИнвентаризациюВСтроке(СтрокаРасхождений, РаспоряженияПоСкладам)
	
	Если СтрокаРасхождений.ВариантОтражения = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УвеличитьРеализациюУчестьПриИнвентаризации")
	 ИЛИ СтрокаРасхождений.ВариантОтражения = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.УменьшитьРеализациюУчестьПриИнвентаризации") Тогда
		Если ЗначениеЗаполнено(СтрокаРасхождений.РаспоряжениеНаИнвентаризациюПоУмолчанию) Тогда
			СтрокаРасхождений.РаспоряжениеНаИнвентаризацию = СтрокаРасхождений.РаспоряжениеНаИнвентаризациюПоУмолчанию;
		Иначе
			РаспоряжениеНаИнвентаризацию = РаспоряженияПоСкладам.Получить(СтрокаРасхождений.Склад);
			Если РаспоряжениеНаИнвентаризацию <> Неопределено Тогда
				СтрокаРасхождений.РаспоряжениеНаИнвентаризацию = РаспоряжениеНаИнвентаризацию;
			Иначе
				ВыбранныйРаспоряжениеНаИнвентаризацию = ОткрытьФормуМодально("Документ.РаспоряжениеНаИнвентаризациюТоваров.ФормаВыбора",
					Новый Структура("Отбор", Новый Структура("Склад, Проведен", СтрокаРасхождений.Склад, Истина))
				);
				Если ЗначениеЗаполнено(ВыбранныйРаспоряжениеНаИнвентаризацию) Тогда
					СтрокаРасхождений.РаспоряжениеНаИнвентаризацию = ВыбранныйРаспоряжениеНаИнвентаризацию;
					РаспоряженияПоСкладам.Вставить(СтрокаРасхождений.Склад, ВыбранныйРаспоряжениеНаИнвентаризацию);
				Иначе
					СтрокаРасхождений.ВариантОтражения = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиИсправлениеСчетаФактуры(Команда)
	
	ПродажиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект.Организация, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Соглашение)
		ИЛИ Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "корректировку реализации");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("РежимПодбораИсключитьГруппыДоступныеВЗаказах", Истина);
	ПараметрыФормы.Вставить("СкрыватьПодакцизныеТовары", Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("ОтображатьФлагСкрыватьПодакцизныеТовары", Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД"));
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);
	Если Не Объект.Соглашение.Пустая() Тогда
		СегментНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "СегментНоменклатуры");
		ПараметрыФормы.Вставить("СегментНоменклатуры", СегментНоменклатуры);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатиТОРГ12(Элемент)
	
	ОткрытьРеквизитыПечатиРеализации(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатиТТН(Элемент)
	
	ОткрытьРеквизитыПечатиРеализации(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	Если ОбщегоНазначенияУТКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Заполнение

&НаСервере
Процедура ЗаполнитьПоИсходнымДаннымСервер()
	
	Документы.КорректировкаРеализации.ЗаполнитьТоварыПоИсходнымДанным(
		Объект.ДокументОснование,
		Объект.Товары);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры")
		)
	);
	
	РасхожденияАктуальны = (Объект.Расхождения.Количество() = 0);
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер()
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, СтавкаНДС, ВидЦены");
	Если НЕ ИспользуетсяКоличествоУпаковок Тогда
		ПараметрыЗаполнения.Вставить("КолонкиПоЗначению", Новый Структура("Упаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка()));
	КонецЕсли;
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		, // Массив строк или структура отбора
		ПараметрыЗаполнения,
		СтруктураДействий
	);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", ВидЦен);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены");
	Если НЕ ИспользуетсяКоличествоУпаковок Тогда
		ПараметрыЗаполнения.Вставить("КолонкиПоЗначению", Новый Структура("Упаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка()));
	КонецЕсли;
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		, // Массив строк или структура отбора
		ПараметрыЗаполнения,
		СтруктураДействий
	);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", ?(ИспользуетсяКоличествоУпаковок, "КоличествоУпаковок", "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", ВидЦен);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены");
	Если НЕ ИспользуетсяКоличествоУпаковок Тогда
		ПараметрыЗаполнения.Вставить("КолонкиПоЗначению", Новый Структура("Упаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка()));
	КонецЕсли;
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок,
		ПараметрыЗаполнения,
		СтруктураДействий
	);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(Знач МассивВыделенныхСтрок, Склад)
	
	ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.Товары, МассивВыделенныхСтрок, Склад);
	
	Возврат ЗаполненоСтрок;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРасхожденияСервер()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Документы.КорректировкаРеализации.ЗаполнитьРасхождения(Объект);
	
	ОбновитьСлужебныеРеквизитыТабличнойЧастиРасхождения();
	РасхожденияАктуальны = Истина;
	РассчитатьИтоговыеПоказателиПоступления(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ЭлектронныеДокументы"

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиПоступления(Форма)

	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда
		Форма.Элементы.ГруппаСтраницыНДСПослеИзменения.ТекущаяСтраница                          = Форма.Элементы.СтраницаБезНДСПослеИзменения;
		Форма.Элементы.ГруппаСтраницыВсегоПослеИзменения.ТекущаяСтраница                        = Форма.Элементы.СтраницаВсегоБезНДСПослеИзменения;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница = Форма.Элементы.СтраницаБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДСПослеИзменения.ТекущаяСтраница                          = Форма.Элементы.СтраницаСНДСПослеИзменения;
		Форма.Элементы.ГруппаСтраницыВсегоПослеИзменения.ТекущаяСтраница                        = Форма.Элементы.СтраницаВсегоСНДСПослеИзменения;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница = Форма.Элементы.СтраницаСНДС;

	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УстановитьПредставлениеДокументаОснования();
	
	УстановитьВидимостьЭлементовПоОснованию();
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	УстановитьВидимостьПоЗаказам();
	
	НастроитьОтображениеЭлементовПоИтогамРасхождений(ЭтаФорма);
	
	Элементы.АналитикаРасходов.Доступность = ЗначениеЗаполнено(Объект.СтатьяРасходов);
	Элементы.АналитикаДоходов.Доступность  = ЗначениеЗаполнено(Объект.СтатьяДоходов);
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументоПродажи(Объект.Склад);
	ОбновитьЗависимыеРеквизитыФормыСервер();
	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость);
	
	НастроитьОтображениеРеквизитовСчетаФактуры(
		ЭтаФорма,
		ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация)			
	);
	
	ИспользоватьЗаказыВТабличнойЧасти = ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам");
	
	ОбновитьСлужебныеРеквизитыТабличныхЧастей();
	
	Если ПравоДоступа("Изменение", Метаданные.Документы.КорректировкаРеализации) И ЗначениеЗаполнено(Объект.Основание) Тогда
		ОснованиеИзменено = (СокрЛП(Объект.Основание) <> Документы.КорректировкаРеализации.ПолучитьТекстОснованияДляПечати(Объект));
	Иначе
		ОснованиеИзменено = Ложь;
	КонецЕсли;
	
	РасхожденияАктуальны = Истина;
	
	ДенежныеСредстваСервер.УстановитьВидимостьОплатыПлатежнойКартой(ЭтаФорма, Элементы.ФормаОплаты);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеДокументаОснования()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПредставлениеДокументаОснования = Объект.ДокументОснование;
		Элементы.ПредставлениеДокументаОснования.ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ПредставлениеДокументаОснования = НСтр("ru='Реализация товаров и услуг <не выбран>'");
		Элементы.ПредставлениеДокументаОснования.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ПредставлениеДокументаОснования = НСтр("ru='Акт выполненных работ <не выбран>'");
		Элементы.ПредставлениеДокументаОснования.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		ПредставлениеДокументаОснования = НСтр("ru='Реализация услуг и прочих активов <не выбран>'");
		Элементы.ПредставлениеДокументаОснования.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОснованию()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.КорректировкаРеализации.ЗаполнитьИменаРеквизитовПоОснованию(
		Объект.ДокументОснование, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	ИспользуетсяКоличествоУпаковок = Элементы.ТоварыКоличествоУпаковок.Видимость;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыКоличество", "Видимость", НЕ ИспользуетсяКоличествоУпаковок);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыНоменклатураЕдиницаИзмерения", "Видимость", Элементы.ТоварыНоменклатура.Видимость);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыОткрытьПодбор", "Видимость", Элементы.ТоварыНоменклатура.Видимость);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЗаполнитьЦеныПоСоглашению", "Видимость", Элементы.ТоварыНоменклатура.Видимость);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЗаполнитьЦеныПоВидуЦен", "Видимость", Элементы.ТоварыНоменклатура.Видимость);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен", "Видимость", Элементы.ТоварыНоменклатура.Видимость);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасхожденияКоличество", "Видимость", НЕ ИспользуетсяКоличествоУпаковок);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РасхожденияНоменклатураЕдиницаИзмерения", "Видимость", Элементы.РасхожденияНоменклатура.Видимость);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("КартинкаНесколькоСкладов");
	МассивИменЭлементов.Добавить("НадписьНесколькоСкладов");
	МассивИменЭлементов.Добавить("ТоварыЗаполнитьСкладВВыделенныхСтроках");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость", Элементы.ТоварыСклад.Видимость);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("СуммаНаПрочиеРасходы");
	МассивИменЭлементов.Добавить("ВалютаНаПрочиеРасходы");
	МассивИменЭлементов.Добавить("ОтступНаПрочиеРасходы");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость", Элементы.СтатьяРасходов.Видимость);
	
	МассивИменЭлементов = Новый Массив;
	МассивИменЭлементов.Добавить("СуммаНаПрочиеДоходы");
	МассивИменЭлементов.Добавить("ВалютаНаПрочиеДоходы");
	МассивИменЭлементов.Добавить("ОтступНаПрочиеДоходы");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивИменЭлементов, "Видимость", Элементы.СтатьяДоходов.Видимость);
	
	Элементы.ЦенаВключаетНДС.ОтображениеПредупрежденияПриРедактировании = ?(Элементы.ТоварыВидЦены.Видимость,
		ОтображениеПредупрежденияПриРедактировании.Отображать,
		ОтображениеПредупрежденияПриРедактировании.НеОтображать
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Объект.Согласован;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("ДатаПлатежа");
	МассивЭлементов.Добавить("НалогообложениеНДС");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("Товары;ПередНачаломДобавления,ПередУдалением");
	МассивЭлементов.Добавить("Расхождения");
	МассивЭлементов.Добавить("ТоварыЗаполнить");
	МассивЭлементов.Добавить("ТоварыОткрытьПодбор");
	МассивЭлементов.Добавить("ТоварыПодобратьТоварыИзЗаказа");
	МассивЭлементов.Добавить("ТоварыРазбитьСтроку");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоСоглашению");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоВидуЦен");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен");
	МассивЭлементов.Добавить("ТоварыЗаполнитьСкладВВыделенныхСтроках");
	МассивЭлементов.Добавить("РасхожденияЗаполнитьРасхождения");
	МассивЭлементов.Добавить("РасхожденияУстановитьВариантыОтражения");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоЗаказам()
	
	Если Объект.ПродажаПоЗаказам Тогда
		Элементы.ТоварыДобавить.Заголовок = НСтр("ru='Добавить товары сверх заказа'");
	Иначе
		Элементы.ТоварыДобавить.Заголовок = НСтр("ru='Добавить'");
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПодобратьТоварыИзЗаказа", "Видимость", Объект.ПродажаПоЗаказам);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеЭлементовПоИтогамРасхождений(Форма)
	
	Форма.СуммаНаПрочиеДоходы  = 0;
	Форма.СуммаНаПрочиеРасходы = 0;
	ТребуетсяДатаПлатежа	   = Ложь;
	
	Для Каждого СтрокаРасхождений Из Форма.Объект.Расхождения Цикл
		
		Если СтрокаРасхождений.ВариантОтражения = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.ОтразитьНаПрочихДоходах") Тогда
			Форма.СуммаНаПрочиеДоходы = Форма.СуммаНаПрочиеДоходы + ?(СтрокаРасхождений.СуммаСНДС<0, -СтрокаРасхождений.СуммаСНДС, СтрокаРасхождений.СуммаСНДС);
		ИначеЕсли СтрокаРасхождений.ВариантОтражения = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияКорректировокРеализаций.СписатьНаРасходы") Тогда
			Форма.СуммаНаПрочиеРасходы = Форма.СуммаНаПрочиеРасходы + ?(СтрокаРасхождений.СуммаСНДС<0, -СтрокаРасхождений.СуммаСНДС, СтрокаРасхождений.СуммаСНДС);
		КонецЕсли;
		
		Если СтрокаРасхождений.КодСтроки = 0 Тогда
			ТребуетсяДатаПлатежа = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.Элементы.ГруппаНаПрочиеРасходы.Доступность = ЗначениеЗаполнено(Форма.СуммаНаПрочиеРасходы);
	Форма.Элементы.ГруппаНаПрочиеДоходы.Доступность  = ЗначениеЗаполнено(Форма.СуммаНаПрочиеДоходы);
	
	Если ТребуетсяДатаПлатежа Тогда
		Форма.Элементы.ДатаПлатежа.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Форма.Элементы.ДатаПлатежа.АвтоОтметкаНезаполненного = Ложь;
		Форма.Элементы.ДатаПлатежа.ОтметкаНезаполненного	 = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеРеквизитовСчетаФактуры(Форма, ПараметрыПредставления)
	
	Форма.ТекстСчетФактура = ПараметрыПредставления.ТекстСчетФактура;
	Форма.Элементы.ТекстСчетФактура.Гиперссылка = ПараметрыПредставления.ГиперссылкаСчетФактура;
	Форма.Элементы.СписокСчетовФактур.Заголовок = ПараметрыПредставления.ТекстСписок;
	Форма.Элементы.СписокСчетовФактур.Гиперссылка = ЗначениеЗаполнено(ПараметрыПредставления.ТекстСписок);
	Форма.Элементы.ВвестиИсправлениеСчетаФактуры.Доступность = ПараметрыПредставления.РазрешеныИсправления;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимыеРеквизитыФормы()
	
	Перем СкладОбязателен;
	
	ОбновитьРеквизитыФормы = ОбщегоНазначенияУТКлиентСервер.ПроверитьНеобходимостьОбновленияРеквизитовФормы(
		Объект.Товары,
		Элементы.КартинкаНесколькоСкладов.Картинка,
		НадписьНесколькоСкладов,
		СкладГруппа,
		Объект.Склад,
		СкладОбязателен
	);
	
	Если ОбновитьРеквизитыФормы Тогда
		ОбновитьЗависимыеРеквизитыФормыСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗависимыеРеквизитыФормыСервер()
	
	Перем СкладОбязателен;
	
	ОбщегоНазначенияУТ.ОбновитьЗависимыеРеквизитыФормы(
		Объект.Товары,
		Элементы.КартинкаНесколькоСкладов.Картинка,
		НадписьНесколькоСкладов,
		СкладГруппа,
		Объект.Склад,
		СкладОбязателен,
		,
		НСтр("ru='Складов отгрузки'")
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСлужебныеРеквизитыТабличныхЧастей()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры")
		)
	);
	
	ОбновитьСлужебныеРеквизитыТабличнойЧастиРасхождения();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСлужебныеРеквизитыТабличнойЧастиРасхождения()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Расхождения,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры")
		)
	);
	
	ДанныеСкладов = ПолучитьДанныеПоСкладам();
	Для Каждого СтрокаРасхождений Из Объект.Расхождения Цикл
		
		ДанныеСклада = ДанныеСкладов.Найти(СтрокаРасхождений.Склад);
		Если ДанныеСклада <> Неопределено Тогда
			СтрокаРасхождений.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач = ДанныеСклада.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач;
			СтрокаРасхождений.РаспоряжениеНаИнвентаризациюПоУмолчанию               = ДанныеСклада.РаспоряжениеНаИнвентаризациюПоУмолчанию;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораДокументаОснованияСервер(ВыбранноеЗначение)
	
	Модифицированность = Истина;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(ВыбранноеЗначение);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Объект.ДокументОснование = ВыбранноеЗначение;
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПодбораТоваровИзЗаказа(АдресТоваровВХранилище)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	СтруктураПоискаТоваров = Новый Структура("КодСтроки, ЗаказКлиента");
	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		// Обработка ТЧ товары.
		СтруктураПоискаТоваров.КодСтроки = СтрокаТоваров.КодСтроки;
		СтруктураПоискаТоваров.ЗаказКлиента = СтрокаТоваров.ЗаказКлиента;
		МассивСтрокТЧТовары = Объект.Товары.НайтиСтроки(СтруктураПоискаТоваров);
		
		Если МассивСтрокТЧТовары.Количество() = 0 Тогда
			
			СтрокаТЧТовары = Объект.Товары.Добавить();
			
		ИначеЕсли МассивСтрокТЧТовары.Количество() = 1 Тогда
			
			СтрокаТЧТовары = МассивСтрокТЧТовары[0];
			
		ИначеЕсли МассивСтрокТЧТовары.Количество() > 1 Тогда
			
			Для Каждого СтрокаКУдалению Из МассивСтрокТЧТовары Цикл
				
				Объект.Товары.Удалить(СтрокаКУдалению);
				
			КонецЦикла;
			
			СтрокаТЧТовары = Объект.Товары.Добавить();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры")
		)
	);
	
	ОбновитьЗависимыеРеквизитыФормыСервер();
	РасхожденияАктуальны = Ложь;
	
	Если Не ОснованиеИзменено Тогда
		Объект.Основание = Документы.КорректировкаРеализации.ПолучитьТекстОснованияДляПечати(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыДокументаОснования(ДокументОснование)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "НалогообложениеНДС, ЦенаВключаетНДС");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличества(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеКорректировокИСчетовФактур(Ссылка, Основание, ЕстьКорректировки, ЕстьСчетаФактуры) Экспорт
	
	ПродажиСервер.ПроверитьНаличиеКорректировокИСчетовФактур(Ссылка, Основание, ЕстьКорректировки, ЕстьСчетаФактуры)
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Соглашение"" не заполнено'"), Объект.Ссылка, "Объект.Соглашение",,Отказ);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, Упаковка, Склад, ВидЦены, Цена, КоличествоУпаковок");
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);		
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры")
		)
	);
	
	ОбновитьЗависимыеРеквизитыФормыСервер();
	РасхожденияАктуальны = Ложь;
	
	Если Не ОснованиеИзменено Тогда
		Объект.Основание = Документы.КорректировкаРеализации.ПолучитьТекстОснованияДляПечати(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресОбъектаВоВременномХранилище()
	СтруктураОбъекта = Новый Структура;
	
	СтруктураОбъекта.Вставить("Договор", Объект.Договор);
	СтруктураОбъекта.Вставить("ПродажаПоЗаказам", Объект.ПродажаПоЗаказам);
	СтруктураОбъекта.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	СтруктураОбъекта.Вставить("Товары", Объект.Товары.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураОбъекта, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьРеквизитыПечатиРеализации(ПоказыватьРеквизитыТТН)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                  Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя", Объект.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя",  Объект.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",      Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("Грузоотправитель",               Объект.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",                Объект.Грузополучатель);
	СтруктураПараметров.Вставить("ДоверенностьВыдана",             Объект.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьДата",               Объект.ДоверенностьДата);
	СтруктураПараметров.Вставить("ДоверенностьЛицо",               Объект.ДоверенностьЛицо);
	СтруктураПараметров.Вставить("ДоверенностьНомер",              Объект.ДоверенностьНомер);
	СтруктураПараметров.Вставить("Договор",                        Объект.Договор);
	СтруктураПараметров.Вставить("Основание",                      Объект.Основание);
	СтруктураПараметров.Вставить("Отпустил",                       Объект.Отпустил);
	СтруктураПараметров.Вставить("ОтпустилДолжность",              Объект.ОтпустилДолжность);
	СтруктураПараметров.Вставить("Партнер",                        Объект.Партнер);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация",          ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
	СтруктураПараметров.Вставить("Контрагент",                     Объект.Контрагент);
	СтруктураПараметров.Вставить("Перевозчик",                     Объект.Перевозчик);
	СтруктураПараметров.Вставить("БанковскийСчетПеревозчика",      Объект.БанковскийСчетПеревозчика);
	СтруктураПараметров.Вставить("СрокДоставки",                   Объект.СрокДоставки);
	СтруктураПараметров.Вставить("Автомобиль",                     Объект.Автомобиль);
	СтруктураПараметров.Вставить("Водитель",                       Объект.Водитель);
	СтруктураПараметров.Вставить("ТолькоПросмотр",                 Ложь);
	СтруктураПараметров.Вставить("ПоказыватьРеквизитыТТН",         ПоказыватьРеквизитыТТН);
	СтруктураПараметров.Вставить("ТипОбъекта",                     "КорректировкаРеализации");
	СтруктураПараметров.Вставить("ПродажаПоЗаказам",               Объект.ПродажаПоЗаказам);
	СтруктураПараметров.Вставить("АдресОбъектаВоВременномХранилище", АдресОбъектаВоВременномХранилище());
	СтруктураПараметров.Вставить("ИспользуетсяДоставка",           Ложь);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",      Объект.БанковскийСчетОрганизации);
	СтруктураПараметров.Вставить("Организация",                    Объект.Организация);
	СтруктураПараметров.Вставить("Дата",                           Объект.Дата);
	СтруктураПараметров.Вставить("Руководитель",                   Объект.Руководитель);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",               Объект.ГлавныйБухгалтер);
	
	ОткрытьФормуМодально("ОбщаяФорма.РеквизитыПечатиРеализации", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоСкладам()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РаспоряжениеНаИнвентаризацию.Склад  КАК Склад,
	|	РаспоряжениеНаИнвентаризацию.Ссылка КАК РаспоряжениеНаИнвентаризацию
	|ПОМЕСТИТЬ РаспоряженияНаИнвентаризацию
	|
	|ИЗ
	|	Документ.РаспоряжениеНаИнвентаризациюТоваров КАК РаспоряжениеНаИнвентаризацию
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспоряжениеНаИнвентаризациюТоваров КАК ДоступныеРаспоряжения
	|		ПО ДоступныеРаспоряжения.Склад = РаспоряжениеНаИнвентаризацию.Склад
	|ГДЕ
	|	РаспоряжениеНаИнвентаризацию.Склад В(&МассивСкладов)
	|	И РаспоряжениеНаИнвентаризацию.Проведен
	|	И ДоступныеРаспоряжения.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	РаспоряжениеНаИнвентаризацию.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоступныеРаспоряжения.Ссылка) = 1
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад,
	|	Склады.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач КАК ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач,
	|	РаспоряженияНаИнвентаризацию.РаспоряжениеНаИнвентаризацию КАК РаспоряжениеНаИнвентаризациюПоУмолчанию
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ РаспоряженияНаИнвентаризацию КАК РаспоряженияНаИнвентаризацию
	|		ПО Склады.Ссылка = РаспоряженияНаИнвентаризацию.Склад
	|ГДЕ
	|	Склады.Ссылка В(&МассивСкладов)
	|");
	Запрос.УстановитьПараметр("МассивСкладов", Объект.Расхождения.Выгрузить().ВыгрузитьКолонку("Склад"));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Контроль несогласованных изменений

&НаКлиенте
Функция ВыполнитьПроверкиПередИзменениемСтатуса()
	
	Перем ЕстьКорректировки, ЕстьСчетаФактуры;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено
		Или СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПроверитьНаличиеКорректировокИСчетовФактур(Объект.Ссылка, Объект.ДокументОснование, ЕстьКорректировки, ЕстьСчетаФактуры);
	
	Если ЕстьКорректировки Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, Нстр("ru='Ввести корректировку'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, Нстр("ru='Отмена'"));
		
		КодОтвета = Вопрос(
			НСтр("ru='На основании документа введена корректировка реализации.
				|Изменение исходного документа запрещено.'"),
			СписокКнопок,
			,
			КодВозвратаДиалога.Да
		);
		
	ИначеЕсли ЕстьСчетаФактуры Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, Нстр("ru='Ввести корректировку'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, Нстр("ru='Изменить текущую'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, Нстр("ru='Отмена'"));
		
		КодОтвета = Вопрос(
			НСтр("ru='На основании документа выставлен счет-фактура. Ввести корректировку реализации
				|для выставления исправленных счетов-фактур?'"),
			СписокКнопок,
			,
			КодВозвратаДиалога.Да
		);
		
	Иначе
		
		КодОтвета = КодВозвратаДиалога.Нет;
		
	КонецЕсли;
	
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		
		ОткрытьФорму("Документ.КорректировкаРеализации.ФормаОбъекта", Новый Структура("Основание", Объект.ДокументОснование));
		Возврат Ложь;
		
	ИначеЕсли КодОтвета = КодВозвратаДиалога.Нет Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении[Элемент.Имя]+"(Элемент)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие[Элемент.Имя]+"(Элемент)");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.Команды[Команда.Имя]+"(Команда)");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения[Элемент.Имя]+"(Элемент, Отказ)");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением[Имя]+"(Элемент, Отказ)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Не ВыполнитьПроверкиПередИзменениемСтатуса() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления[Имя]+"(Элемент, Отказ, Копирование, Родитель, Группа)");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с буфером обмена 

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	ХранилищаНастроек.ХранилищеБуфераОбмена.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = ХранилищаНастроек.ХранилищеБуфераОбмена.ПолучитьСтрокиИзБуфераОбмена();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);		
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры")
		)
	);
	
	ОбновитьЗависимыеРеквизитыФормыСервер();
	РасхожденияАктуальны = Ложь;
	
	Если Не ОснованиеИзменено Тогда
		Объект.Основание = Документы.КорректировкаРеализации.ПолучитьТекстОснованияДляПечати(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ХранилищаНастроек.ХранилищеБуфераОбмена.БуферОбменаПустой());
		
	Иначе
		
		МассивЭлементов.Добавить("ТоварыСкопироватьСтроки");
		МассивЭлементов.Добавить("ТОварыКонтекстноеМенюСкопироватьСтроки");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

