
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправлениеЭлементамиФормы();

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовПоСтатусу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Если ТекущийЭлемент <> Неопределено Тогда
			Если ТекущийЭлемент.Имя = "КонтактноеЛицо" Тогда
				Объект.КонтактноеЛицо = ВыбранноеЗначение;
			ИначеЕсли ТекущийЭлемент.Имя = "ФИОРуководителяКонтрагента" Тогда
				Объект.ФИОРуководителяКонтрагента = Строка(ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФИОРуководителяКонтактноеЛицоНачалоВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовПоСтатусу();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияВзаиморасчетовНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Партнер", Объект.Партнер);
	СтруктураПараметров.Вставить("Договор", Объект.Договор);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметров.Вставить("РасшифровкаПоЗаказам", Объект.РасшифровкаПоЗаказам);
	СтруктураПараметров.Вставить("РасшифровкаПоПартнерам", Объект.РасшифровкаПоПартнерам);
	СтруктураПараметров.Вставить("РасшифровкаПоДоговорам", Объект.РасшифровкаПоДоговорам);
	
	Результат = ОткрытьФормуМодально("Документ.СверкаВзаиморасчетов.Форма.ФормаНастройкиДетализации", СтруктураПараметров);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПрименитьНастройкиДетализации = Истина;
		
		Если Объект.ДанныеКонтрагента.Количество() > 0
			И ((Объект.РасшифровкаПоЗаказам И НЕ Результат.РасшифровкаПоЗаказам)
			ИЛИ (Объект.РасшифровкаПоПартнерам И НЕ Результат.РасшифровкаПоПартнерам)
			ИЛИ (Объект.РасшифровкаПоДоговорам И НЕ Результат.РасшифровкаПоДоговорам)) Тогда

			ТекстВопроса = НСтр("ru = 'Свернуть строки табличной части в соответствии
									  |с настройками детализации взаиморасчетов?'");
			
			КнопкиДиалогаВопрос = Новый СписокЗначений;
			КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Да, 	"Свернуть");
			КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Отмена, "Отменить");
			
			КодОтвета = Вопрос(ТекстВопроса, КнопкиДиалогаВопрос);
			
			Если КодОтвета = КодВозвратаДиалога.Да Тогда
				СвернутьТабличнуюЧастьПоДетализацииВзаиморасчетов(Результат);
			Иначе
				ПрименитьНастройкиДетализации = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПрименитьНастройкиДетализации Тогда
			
			Объект.Партнер = Результат.Партнер;
			Объект.Договор = Результат.Договор;
			Объект.РасшифровкаПоЗаказам = Результат.РасшифровкаПоЗаказам;
			Объект.РасшифровкаПоПартнерам = Результат.РасшифровкаПоПартнерам;
			Объект.РасшифровкаПоДоговорам = Результат.РасшифровкаПоДоговорам;
			
			ЭтаФорма.Модифицированность = Истина;
			
			УправлениеЭлементамиФормы();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОРуководителяКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФИОРуководителяКонтактноеЛицоНачалоВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ДАННЫЕКОНТРАГЕНТА

&НаКлиенте
Процедура ДанныеКонтрагентаРасчетныйДокументПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДанныеКонтрагента.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.РасчетныйДокумент) Тогда
		
		ЗаполнитьСтрокуПоРасчетномуДокументуСервер(ТекущиеДанные.РасчетныйДокумент,
												   ТекущиеДанные.ОписаниеДокумента,
												   ТекущиеДанные.ВалютаВзаиморасчетов);

	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Контрагент");
	СтруктураРеквизитов.Вставить("КонецПериода");
	
	Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтаФорма, Объект.ДанныеКонтрагента, СтруктураРеквизитов) Тогда

		ЗаполнитьПоОстаткамСервер();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период.ДатаНачала = Объект.НачалоПериода;
	Диалог.Период.ДатаОкончания = Объект.КонецПериода;
	
	Если Диалог.Редактировать() Тогда
		Объект.НачалоПериода = Диалог.Период.ДатаНачала;
		Объект.КонецПериода = Диалог.Период.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ДанныеДокумента = Документы.СверкаВзаиморасчетов.РеквизитыПоследнегоДокумента(Объект.Контрагент);
		ЗаполнитьЗначенияСвойств(Объект, ДанныеДокумента, , "ФИОРуководителяКонтрагента, ДолжностьРуководителяКонтрагента,КонтактноеЛицо");
		Если НЕ ЗначениеЗаполнено(Объект.ФИОРуководителяКонтрагента)
		 И НЕ ЗначениеЗаполнено(Объект.ДолжностьРуководителяКонтрагента) Тогда
		 	ЗаполнитьЗначенияСвойств(Объект, ДанныеДокумента, "ФИОРуководителяКонтрагента, ДолжностьРуководителяКонтрагента");
		КонецЕсли;
		
		ПартнерКонтрагента = ПартнерКонтрагента(Объект.Контрагент);
		
		Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) ИЛИ
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо,"Владелец") <> ПартнерКонтрагента Тогда
			
			Если ЗначениеЗаполнено(ДанныеДокумента.КонтактноеЛицо) Тогда
				Объект.КонтактноеЛицо = ДанныеДокумента.КонтактноеЛицо;
			Иначе
				Объект.КонтактноеЛицо = ПартнерыИКонтрагенты.ПолучитьКонтактноеЛицоПартнераПоУмолчанию(ПартнерКонтрагента);
			КонецЕсли;
		КонецЕсли;
		
		УправлениеЭлементамиФормы();
		
	Иначе
		
		Объект.КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусу()
	
	ТолькоПросмотрЭлементов = (Объект.Статус = Перечисления.СтатусыСверокВзаиморасчетов.Сверена);
	
	МассивЭлементов = Новый Массив();
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("НачалоПериода");
	МассивЭлементов.Добавить("КонецПериода");
	МассивЭлементов.Добавить("Контрагент");
		
	// Группы элементов управления
	МассивЭлементов.Добавить("ГруппаСтраницы");

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", ТолькоПросмотрЭлементов);
	
	МассивЭлементов = Новый Массив();             
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("ДетализацияВзаиморасчетов");
	МассивЭлементов.Добавить("УстановитьИнтервал");
	МассивЭлементов.Добавить("ДанныеКонтрагентаКомандаЗаполнитьПоОстаткам");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ТолькоПросмотрЭлементов);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	СтруктураПараметров = Новый Структура("РасшифровкаПоЗаказам, РасшифровкаПоПартнерам, РасшифровкаПоДоговорам, Партнер, Договор",
										  Объект.РасшифровкаПоЗаказам,
										  Объект.РасшифровкаПоПартнерам,
										  Объект.РасшифровкаПоДоговорам,
										  Объект.Партнер,
										  Объект.Договор);
	
	Документы.СверкаВзаиморасчетов.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		СтруктураПараметров, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации
	);
    ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	УстановитьВидимость();
	УстановитьДоступностьЭлементовПоСтатусу();
	
	ДетализацияВзаиморасчетов = Документы.СверкаВзаиморасчетов.ПредставлениеДетализацииВзаиморасчетов(
		Объект.Партнер,
		Объект.Договор,
		Объект.РасшифровкаПоПартнерам,
		Объект.РасшифровкаПоДоговорам,
		Объект.РасшифровкаПоЗаказам
	);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамСервер()
	                                                 
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("Дата",			   	   Объект.Дата);
	ДанныеДокумента.Вставить("Организация",		   	   Объект.Организация);
	ДанныеДокумента.Вставить("Контрагент",		   	   Объект.Контрагент);
	ДанныеДокумента.Вставить("Партнер",		 		   Объект.Партнер);
	ДанныеДокумента.Вставить("Договор",		 		   Объект.Договор);
	ДанныеДокумента.Вставить("КонецПериода", 	   	   Объект.КонецПериода);
	ДанныеДокумента.Вставить("РасшифровкаПоЗаказам",   Объект.РасшифровкаПоЗаказам);
	ДанныеДокумента.Вставить("РасшифровкаПоПартнерам", Объект.РасшифровкаПоПартнерам);
	ДанныеДокумента.Вставить("РасшифровкаПоДоговорам", Объект.РасшифровкаПоДоговорам);
	
	Документы.СверкаВзаиморасчетов.ЗаполнитьДанныеКонтрагента(ДанныеДокумента, Объект.ДанныеКонтрагента);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуПоРасчетномуДокументуСервер(ДокументСсылка, ОписаниеДокумента, ВалютаВзаиморасчетов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
								"ПолноеНаименование");
	СведенияОКонтрагенте  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Контрагент,  Объект.Дата);
	КонтрагентНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
							  "ПолноеНаименование");
	
	СтруктураПредставленийУчастников = Новый Структура;
	СтруктураПредставленийУчастников.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	СтруктураПредставленийУчастников.Вставить("КонтрагентНаименование", КонтрагентНаименование);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеРасчетногоДокумента.Номер  КАК Номер,
	|	ДанныеРасчетногоДокумента.Дата   КАК Дата,
	|	ДанныеРасчетногоДокумента.Валюта КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеРасчетногоДокумента
	|ГДЕ
	|	ДанныеРасчетногоДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРасчетногоДокумента.Номер  КАК Номер,
	|	ДанныеРасчетногоДокумента.Дата   КАК Дата,
	|	ДанныеРасчетногоДокумента.Валюта КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДанныеРасчетногоДокумента
	|ГДЕ
	|	ДанныеРасчетногоДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРасчетногоДокумента.Номер  КАК Номер,
	|	ДанныеРасчетногоДокумента.Дата   КАК Дата,
	|	ДанныеРасчетногоДокумента.Валюта КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеРасчетногоДокумента
	|ГДЕ
	|	ДанныеРасчетногоДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРасчетногоДокумента.Номер  КАК Номер,
	|	ДанныеРасчетногоДокумента.Дата   КАК Дата,
	|	ДанныеРасчетногоДокумента.Валюта КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК ДанныеРасчетногоДокумента
	|ГДЕ
	|	ДанныеРасчетногоДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРасчетногоДокумента.Номер  КАК Номер,
	|	ДанныеРасчетногоДокумента.Дата   КАК Дата,
	|	ДанныеРасчетногоДокумента.Валюта КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеРасчетногоДокумента
	|ГДЕ
	|	ДанныеРасчетногоДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРасчетногоДокумента.Номер  КАК Номер,
	|	ДанныеРасчетногоДокумента.Дата   КАК Дата,
	|	ДанныеРасчетногоДокумента.Валюта КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ДанныеРасчетногоДокумента
	|ГДЕ
	|	ДанныеРасчетногоДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРасчетногоДокумента.Номер  КАК Номер,
	|	ДанныеРасчетногоДокумента.Дата   КАК Дата,
	|	ДанныеРасчетногоДокумента.Валюта КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеРасчетногоДокумента
	|ГДЕ
	|	ДанныеРасчетногоДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРасчетногоДокумента.Номер  КАК Номер,
	|	ДанныеРасчетногоДокумента.Дата   КАК Дата,
	|	ДанныеРасчетногоДокумента.Валюта КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ПоступлениеУслугПрочихАктивов КАК ДанныеРасчетногоДокумента
	|ГДЕ
	|	ДанныеРасчетногоДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРасчетногоДокумента.Номер  КАК Номер,
	|	ДанныеРасчетногоДокумента.Дата   КАК Дата,
	|	ДанныеРасчетногоДокумента.Валюта КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеРасчетногоДокумента
	|ГДЕ
	|	ДанныеРасчетногоДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРасчетногоДокумента.Номер  КАК Номер,
	|	ДанныеРасчетногоДокумента.Дата   КАК Дата,
	|	ДанныеРасчетногоДокумента.Валюта КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеРасчетногоДокумента
	|ГДЕ
	|	ДанныеРасчетногоДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРасчетногоДокумента.Номер  КАК Номер,
	|	ДанныеРасчетногоДокумента.Дата   КАК Дата,
	|	ДанныеРасчетногоДокумента.Валюта КАК ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеРасчетногоДокумента
	|ГДЕ
	|	ДанныеРасчетногоДокумента.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		ОписаниеДокумента = Документы.СверкаВзаиморасчетов.ОписаниеРасчетногоДокумента(ДокументСсылка,
																								  Выборка.Номер,
																								  Выборка.Дата,
																								  СтруктураПредставленийУчастников);
		ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
		
	КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПартнерКонтрагента(Контрагент)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер");
	
КонецФункции

&НаСервере
Процедура СвернутьТабличнуюЧастьПоДетализацииВзаиморасчетов(ПараметрыДетализации)
	
	Документы.СверкаВзаиморасчетов.СвернутьТабличнуюЧастьПоДетализацииВзаиморасчетов(ПараметрыДетализации, Объект.ДанныеКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Функция ФИОРуководителяКонтактноеЛицоНачалоВыбора()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Отбор = Новый Структура("Владелец", ПартнерКонтрагента(Объект.Контрагент));
		ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора",
			Новый Структура("Отбор", Отбор),
			ЭтаФорма
		);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Контрагент"" не заполнено'"),
			,
			"Контрагент",
			"Объект"
			);
	КонецЕсли; 
	
КонецФункции
