#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	НоменклатураСервер.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ОрдерНаПеремещениеТоваров));
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.ОрдерНаПеремещениеТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	
	СкладыСервер.ОтразитьТоварыВСкладскихЯчейках(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьТоварыКОтбору(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Серии.Очистить();
	ИнициализироватьДокумент();

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ДополнительныеСвойства.Свойство("ОтложенноеПроведение") Тогда
		Если Не Проведен
			И Статус <> Перечисления.СтатусыОрдеровНаПеремещение.КОтбору Тогда
			
			ТекстСообщения = НСтр("ru = 'Документ должен быть проведен сначала в статусе ""К отбору""'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,"Статус","Объект",Отказ);
		КонецЕсли;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ОрдерНаПеремещениеТоваров),Отказ);	
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);

	СтруктураПараметров = Новый Структура("Склад,Помещение",Склад,ПомещениеОтправитель);
	ОтправительИспользоватьАдресноеХранение =  ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение",СтруктураПараметров);
	
	СтруктураПараметров = Новый Структура("Склад,Помещение",ПомещениеПолучатель);
	ПолучательИспользоватьАдресноеХранение =  ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение",СтруктураПараметров);
	 
	Если Не ОтправительИспользоватьАдресноеХранение
		Или Статус = Перечисления.СтатусыОрдеровНаПеремещение.КОтбору Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗонаОтгрузки");
	КонецЕсли;
	
	Если Не ПолучательИспользоватьАдресноеХранение
		Или (ПолучательИспользоватьАдресноеХранение
		И Статус <> Перечисления.СтатусыОрдеровНаПеремещение.Принят) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЗонаПриемки");
	КонецЕсли;
	
	Если Не((ОтправительИспользоватьАдресноеХранение
		И Статус <> Перечисления.СтатусыОрдеровНаПеремещение.КОтбору)
		Или (ПолучательИспользоватьАдресноеХранение
		И Статус = Перечисления.СтатусыОрдеровНаПеремещение.Принят))Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Упаковка");
	КонецЕсли;	
	
	Если  (ОтправительИспользоватьАдресноеХранение
		Или ПолучательИспользоватьАдресноеХранение)
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Упаковка");
		
		ТекстСообщения = НСтр("ru='В настройках программы не включено использование упаковок номенклатуры, 
		|поэтому нельзя оформить документ по складу с адресным хранением остатков. Обратитесь к администратору'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);

	КонецЕсли;
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если ЗначениеЗаполнено(ПомещениеОтправитель)
		И ЗначениеЗаполнено(ПомещениеПолучатель)
		И ПомещениеОтправитель = ПомещениеПолучатель Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Одно и то же складское помещение не может являться отправителем и получаетелем одновременно.'"),
				ЭтотОбъект,
				"ПомещениеОтправитель",,Отказ);

	КонецЕсли;
	

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьПоЗначениямАвтозаполнения(ДанныеЗаполнения);

	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный = Пользователи.ТекущийПользователь();
	Статус        = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	Склад         = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	
	Если Не ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		ДатаОтгрузки = ТекущаяДата();
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьОтобраннымиТоварами() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыКОтбору.Распоряжение КАК Распоряжение,
	|	ТоварыКОтбору.Номенклатура КАК Номенклатура,
	|	ТоварыКОтбору.Характеристика КАК Характеристика,
	|	ТоварыКОтбору.Упаковка КАК Упаковка,
	|	ТоварыКОтбору.СерияОтобрана КАК Серия,
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыКОтбору.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ТоварыКОтбору.Отобрано
	|			ИНАЧЕ -ТоварыКОтбору.Отобрано
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыКОтбору.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ТоварыКОтбору.ОтобраноУпаковок
	|			ИНАЧЕ -ТоварыКОтбору.ОтобраноУпаковок
	|		КОНЕЦ) КАК КоличествоУпаковок
	|ИЗ
	|	РегистрНакопления.ТоварыКОтбору КАК ТоварыКОтбору
	|ГДЕ
	|	ТоварыКОтбору.Распоряжение = &Распоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтбору.Распоряжение,
	|	ТоварыКОтбору.Характеристика,
	|	ТоварыКОтбору.Номенклатура,
	|	ТоварыКОтбору.СерияОтобрана,
	|	ТоварыКОтбору.Упаковка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА ТоварыКОтбору.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ТоварыКОтбору.ОтобраноУпаковок
	|			ИНАЧЕ -ТоварыКОтбору.ОтобраноУпаковок
	|		КОНЕЦ) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыКОтбору.Номенклатура.Наименование,
	|	ТоварыКОтбору.Характеристика.Наименование";
	
	Запрос.УстановитьПараметр("Распоряжение", Ссылка);
	
	ТаблицаОтобранныхТоваров = Запрос.Выполнить().Выгрузить();
	
	Товары.Загрузить(ТаблицаОтобранныхТоваров);
	Товары.Свернуть("Номенклатура,Характеристика,Упаковка","Количество,КоличествоУпаковок");
	
	СтруктураПоиска = Новый Структура("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	МассивУдаляемыхСтрок = ТаблицаОтобранныхТоваров.НайтиСтроки(СтруктураПоиска);
	Для Каждого Строка Из МассивУдаляемыхСтрок Цикл
		ТаблицаОтобранныхТоваров.Удалить(Строка);
	КонецЦикла;
	
	Серии.Загрузить(ТаблицаОтобранныхТоваров);
	Серии.Свернуть("Номенклатура,Характеристика,Упаковка,Серия","Количество, КоличествоУпаковок");
КонецПроцедуры

Процедура ЗаполнитьПоЗначениямАвтозаполнения(ДанныеЗаполнения = Неопределено)
	
	ЕстьДанныеЗаполнения = (НЕ ДанныеЗаполнения = Неопределено);
	ДанныеЗаполненияСтруктура = (ТипЗнч(ДанныеЗаполнения) = Тип("Структура"));
	
	// Заполним основные свойства
	СвойстваАвтозаполнения = Новый Структура("Склад");
	
	Если ДанныеЗаполненияСтруктура Тогда
		ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(СвойстваАвтозаполнения, ДанныеЗаполнения, Истина);
		
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(Ссылка, СвойстваАвтозаполнения);
	
	Если ЕстьДанныеЗаполнения И ДанныеЗаполненияСтруктура Тогда
		ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(ДанныеЗаполнения, СвойстваАвтозаполнения, Истина);
		
	ИначеЕсли НЕ ЕстьДанныеЗаполнения Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваАвтозаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	Массив.Добавить(Движения.ТоварыКОтбору);
	Массив.Добавить(Движения.ТоварыНаСкладах);
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

#КонецЕсли