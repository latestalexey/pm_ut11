#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, ВсеРеквизиты, РеквизитыОперации) Экспорт
	ВсеРеквизиты = Новый Массив;
	РеквизитыОперации = Новый Массив;
	
	ВсеРеквизиты.Добавить("Доходы.СтатьяДоходов");
	ВсеРеквизиты.Добавить("Доходы.АналитикаДоходов");
	ВсеРеквизиты.Добавить("Грузоотправитель");
	ВсеРеквизиты.Добавить("БанковскийСчетГрузоотправителя");
	ВсеРеквизиты.Добавить("Грузополучатель");
	ВсеРеквизиты.Добавить("БанковскийСчетГрузополучателя");
	ВсеРеквизиты.Добавить("АдресДоставки");
	ВсеРеквизиты.Добавить("ДоверенностьНомер");
	ВсеРеквизиты.Добавить("ДоверенностьДата");
	ВсеРеквизиты.Добавить("ДоверенностьВыдана");
	ВсеРеквизиты.Добавить("ДоверенностьЛицо");
	ВсеРеквизиты.Добавить("Отпустил");
	ВсеРеквизиты.Добавить("ОтпустилДолжность");
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
		РеквизитыОперации.Добавить("Доходы.СтатьяДоходов");
		РеквизитыОперации.Добавить("Доходы.АналитикаДоходов");
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияПрочихАктивов Тогда
		РеквизитыОперации.Добавить("Грузоотправитель");
		РеквизитыОперации.Добавить("БанковскийСчетГрузоотправителя");
		РеквизитыОперации.Добавить("Грузополучатель");
		РеквизитыОперации.Добавить("БанковскийСчетГрузополучателя");
		РеквизитыОперации.Добавить("АдресДоставки");
		РеквизитыОперации.Добавить("ДоверенностьНомер");
		РеквизитыОперации.Добавить("ДоверенностьДата");
		РеквизитыОперации.Добавить("ДоверенностьВыдана");
		РеквизитыОперации.Добавить("ДоверенностьЛицо");
		РеквизитыОперации.Добавить("Отпустил");
		РеквизитыОперации.Добавить("ОтпустилДолжность");
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьРеквизитыДокумента(ДокументСсылка) Экспорт
	Реквизиты = Новый Структура(
		"Дата, ХозяйственнаяОперация, Организация,
		|Партнер, Контрагент,
		|Договор, ПорядокРасчетов, ПоЗаказу, ВалютаВзаиморасчетов, СуммаДокумента, СуммаВзаиморасчетов",
		'00010101', Перечисления.ХозяйственныеОперации.РеализацияКлиенту, Справочники.Организации.ПустаяСсылка(),
		Справочники.Партнеры.ПустаяСсылка(), Справочники.Контрагенты.ПустаяСсылка(),
		Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), Перечисления.ПорядокРасчетов.ПустаяСсылка(), Ложь, Справочники.Валюты.ПустаяСсылка(), 0, 0
	);
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Данные.Дата КАК Дата,
		|	(ВЫБОР КОГДА Данные.ХозяйственнаяОперация=ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
		|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|		ИНАЧЕ Данные.ХозяйственнаяОперация КОНЕЦ) КАК ХозяйственнаяОперация,
		|	Данные.Организация КАК Организация,
		|	Данные.Партнер КАК Партнер,
		|	Данные.Контрагент КАК Контрагент,
		|	Данные.Договор КАК Договор,
		|	Данные.ПорядокРасчетов КАК ПорядокРасчетов,
		|	ЛОЖЬ КАК ПоЗаказу,
		|	Данные.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	Данные.СуммаДокумента КАК СуммаДокумента,
		|	(ВЫБОР КОГДА Данные.Проведен ТОГДА Данные.СуммаВзаиморасчетов ИНАЧЕ 0 КОНЕЦ) КАК СуммаВзаиморасчетов
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК Данные
		|ГДЕ
		|	Данные.Ссылка = &ДокументСсылка
		|");
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	КонецЕсли;
	Возврат Реквизиты;
КонецФункции

Функция СтруктураСостоянияРасчетов() Экспорт
	Возврат
		Новый Структура(
			"ДолгПартнера, ПорядокРасчетов, СуммаДолга, ПроцентДолга, СуммаОплаты, ПроцентОплаты",
			Ложь, Перечисления.ПорядокРасчетов.ПоЗаказамНакладным, 0., 0., 0., 0.
		);
КонецФункции

// Расчитывает КОРТЕЖ (ДолгПартнера, ПорядокРасчетов, СуммаДолга, ПроцентДолга, СуммаОплаты, ПроцентОплаты)
//	Если ДоговорСсылка задан, тогда получаем данные относительно договора по сумме документа
//	ДолгПартнера: булево - показывает, что рассчитанная сумма является задолженностью клиента
//	СуммаДолга: неотрицательная сумма
//	СуммаОплаты: расчет по договору дает 0.0, расчет по накладным дает неотрицательную сумму оплаты по накладной
Процедура РассчитатьСостояние(Знач ДокументСсылка, Знач ДоговорСсылка, СостояниеРасчетов) Экспорт
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	Если ЗначениеЗаполнено(ДокументСсылка) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	(ВЫБОР КОГДА Накладная.ПорядокРасчетов=ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|		ТОГДА Накладная.Договор ИНАЧЕ Накладная.Ссылка КОНЕЦ) КАК Заказ,
			|	Накладная.ПорядокРасчетов КАК ПорядокРасчетов
			|ИЗ
			|	Документ.РеализацияУслугПрочихАктивов КАК Накладная
			|ГДЕ
			|	Накладная.Ссылка = &Ссылка
			|");
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Запрос.УстановитьПараметр("Договор", ?(ЗначениеЗаполнено(ДоговорСсылка), ДоговорСсылка, Null));
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
    		Запрос.Текст = " // СуммаОстаток: (+) нам должны, (-) мы должны
    			|ВЫБРАТЬ 
				|	&ПорядокРасчетов КАК ПорядокРасчетов,
				|	Накладная.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
				|	ЕСТЬNULL(Расчеты.СуммаОстаток, 0) КАК СуммаОстаток,
				|	ЕСТЬNULL(Расчеты.КОплатеОстаток, 0) КАК КОплатеОстаток
				|ИЗ
				|	Документ.РеализацияУслугПрочихАктивов КАК Накладная
    			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента=&Заказ) КАК Расчеты
				|		ПО ИСТИНА
				|ГДЕ
				|	Накладная.Ссылка = &Ссылка И Накладная.Проведен И Накладная.СуммаВзаиморасчетов > 0
    			|";
    		Запрос.УстановитьПараметр("Заказ", Выборка.Заказ);
    		Запрос.УстановитьПараметр("ПорядокРасчетов", Выборка.ПорядокРасчетов);
    		Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СостояниеРасчетов.ДолгПартнера = (Выборка.СуммаОстаток >= 0.);
				СостояниеРасчетов.СуммаДолга = ?(Выборка.СуммаОстаток < 0., -Выборка.СуммаОстаток, Выборка.СуммаОстаток);
				СостояниеРасчетов.ПорядокРасчетов = Выборка.ПорядокРасчетов;
				Если Перечисления.ПорядокРасчетов.ПоЗаказамНакладным = СостояниеРасчетов.ПорядокРасчетов Тогда
					СостояниеРасчетов.СуммаОплаты = ?(Выборка.СуммаОстаток >= 0., Выборка.СуммаВзаиморасчетов - Выборка.КОплатеОстаток, 0.);
					СостояниеРасчетов.ПроцентДолга = Окр(100 * СостояниеРасчетов.СуммаДолга / Выборка.СуммаВзаиморасчетов, 0);
					СостояниеРасчетов.ПроцентОплаты = Окр(100 * СостояниеРасчетов.СуммаОплаты / Выборка.СуммаВзаиморасчетов, 0);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	ТекстЗадолженностьПокупателяЗаУслуги = "
	|ВЫБРАТЬ //// Отражена задолженность покупателя (Дт <62.1, 76> :: Кт <90.1, 91.1>)
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.СуммаСНДС) КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами) КАК ВидСчетаДт,
	|	Операция.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.ВалютаВзаиморасчетов КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|
	|	Операция.Контрагент КАК СубконтоДт1,
	|	Операция.Договор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	Строки.СуммаВзаиморасчетов КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Доходы) КАК ВидСчетаКт,
	|	Строки.СтатьяДоходов КАК АналитикаУчетаКт,
	|	Операция.Подразделение КАК МестоУчетаКт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|
	|	Строки.СтавкаНДС КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	Строки.Количество КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт
	|
	|ИЗ Документ.РеализацияУслугПрочихАктивов КАК Операция
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов.Доходы КАК Строки
	|		ПО Строки.Ссылка = Операция.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|		ПО Суммы.Регистратор = Строки.Ссылка И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки И Суммы.СуммаБезНДСРегл <> 0
	|ГДЕ Операция.Ссылка = &Ссылка
	|	И Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|";
	
	ТекстНачислениеНДСЗаУслуги = "
	|ВЫБРАТЬ //// Начислен НДС от продаж продукции, товаров, выполнения работ, оказания услуг (Дт <90.3, 91.2> :: Кт <68.2>)
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, Строки.СуммаНДС) КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриДоходах) КАК ВидСчетаДт,
	|	Строки.СтатьяДоходов КАК АналитикаУчетаДт,
	|	Операция.Подразделение КАК МестоУчетаДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|
	|	Строки.СтавкаНДС КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС) КАК СчетКт,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт
	|
	|ИЗ Документ.РеализацияУслугПрочихАктивов КАК Операция
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов.Доходы КАК Строки
	|		ПО Строки.Ссылка = Операция.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|		ПО Суммы.Регистратор = Строки.Ссылка И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки И Суммы.СуммаНДСРегл <> 0
	|ГДЕ Операция.Ссылка = &Ссылка
	|	И Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|";
	
	ТекстЗадолженностьПокупателяЗаАктивы = "
	|ВЫБРАТЬ //// Отражена задолженность покупателя (Дт <62.1, 76> :: Кт <90.1, 91.1>)
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	Строки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.СуммаСНДС) КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыСКлиентами) КАК ВидСчетаДт,
	|	Операция.ГруппаФинансовогоУчета КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	Операция.ВалютаВзаиморасчетов КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|
	|	Операция.Контрагент КАК СубконтоДт1,
	|	Операция.Договор КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	Строки.СуммаВзаиморасчетов КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеОперации) КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	Строки.Количество КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт
	|
	|ИЗ Документ.РеализацияУслугПрочихАктивов КАК Операция
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов.Доходы КАК Строки
	|		ПО Строки.Ссылка = Операция.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|		ПО Суммы.Регистратор = Строки.Ссылка И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки И Суммы.СуммаБезНДСРегл <> 0
	|ГДЕ Операция.Ссылка = &Ссылка
	|	И Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПрочихАктивов)
	|";
	
	ТекстНачислениеНДСЗаАктивы = "
	|ВЫБРАТЬ //// Начислен НДС от продаж активов (Дт <90.3, 91.2> :: Кт <68.2>)
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	Строки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, Строки.СуммаНДС) КАК Сумма,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСПриПрочихОперациях) КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
	|	Строки.СтавкаНДС КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	Операция.Подразделение КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС) КАК СчетКт,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт
	|
	|ИЗ Документ.РеализацияУслугПрочихАктивов КАК Операция
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов.Доходы КАК Строки
	|		ПО Строки.Ссылка = Операция.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
	|		ПО Суммы.Регистратор = Строки.Ссылка И Суммы.ИдентификаторСтроки = Строки.ИдентификаторСтроки И Суммы.СуммаНДСРегл <> 0
	|ГДЕ Операция.Ссылка = &Ссылка
	|	И Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПрочихАктивов)
	|";
	
	Возврат
	ТекстЗадолженностьПокупателяЗаУслуги
	+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстНачислениеНДСЗаУслуги
	+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстЗадолженностьПокупателяЗаАктивы
	+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстНачислениеНДСЗаАктивы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДанныеДокумента.Дата КАК Период,
		|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Партнер КАК Партнер,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ДанныеДокумента.Подразделение КАК Подразделение,
		|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.ФормаОплаты КАК ФормаОплаты,
		|	ДанныеДокумента.Договор КАК Договор,
		|	(ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК РасчетыПоДоговорам,
		|	ДанныеДокумента.Договор.ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();

	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Реквизиты.Валюта, Реквизиты.ВалютаВзаиморасчетов, Реквизиты.Период);
	
	Запрос.УстановитьПараметр("Валюта",							Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Период",							Реквизиты.Период);
	Запрос.УстановитьПараметр("ДатаПлатежа",					Реквизиты.ДатаПлатежа);
	Запрос.УстановитьПараметр("ФормаОплаты",					Реквизиты.ФормаОплаты);
	Запрос.УстановитьПараметр("Организация",					Реквизиты.Организация);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",				?(Реквизиты.ЦенаВключаетНДС, 0, 1));
	Запрос.УстановитьПараметр("Подразделение",					Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",			Реквизиты.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",			Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",		РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты));
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",	Коэффициенты.КоэффициентПересчетаВВалютуУпр);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл",Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	Запрос.УстановитьПараметр("Договор",						Реквизиты.Договор);
	Запрос.УстановитьПараметр("Контрагент",						Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("РасчетыПоДоговорам",				Реквизиты.РасчетыПоДоговорам);
	Запрос.УстановитьПараметр("ДопустимаяСуммаЗадолженности",	Реквизиты.ДопустимаяСуммаЗадолженности);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ИспользоватьУчетПрочихДоходовРасходов", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")); 
	
	Запрос.Текст = ТекстЗапросаТаблицаПрочиеДоходы()
		+ ТекстЗапросаТаблицаРасчетыСКлиентами()
		+ ТекстЗапросаТаблицаРасчетыСКлиентамиПоследовательность()
		+ ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл()
		+ ТекстЗапросаТаблицаНДСЗаписиКнигиПродаж() 
		+ ТекстЗапросаТаблицаПорядокОтраженияПрочихОпераций()
		;
	Результат = Запрос.ВыполнитьПакет();
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ТаблицыДляДвижений.Вставить("ТаблицаПрочиеДоходы", 							Результат[0].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСКлиентами", 					Результат[1].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСКлиентамиПоследовательность", 	Результат[2].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаСуммыДокументовВВалютеРегл", 			Результат[3].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаНДСЗаписиКнигиПродаж", 					Результат[4].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаПорядокОтраженияПрочихОпераций", 		Результат[5].Выгрузить());
КонецПроцедуры

Функция ТекстЗапросаТаблицаПрочиеДоходы()
	Возврат "
		|ВЫБРАТЬ
		|	ТаблицаДоходы.НомерСтроки КАК НомерСтроки,
		|	&Период КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	&Организация КАК Организация,
		|	&Подразделение КАК Подразделение,
		|	ТаблицаДоходы.СтатьяДоходов КАК СтатьяДоходов,
		|	ТаблицаДоходы.АналитикаДоходов КАК АналитикаДоходов,
		|
		|	ВЫРАЗИТЬ((ТаблицаДоходы.Сумма + ТаблицаДоходы.СуммаНДС * &ЦенаВключаетНДС)
		|	 * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(15,2)) КАК Сумма,
		|
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация,
		|	Неопределено КАК АналитикаУчетаНоменклатуры
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДоходы
		|ГДЕ
		|	ТаблицаДоходы.Ссылка = &Ссылка
		|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|	И &ИспользоватьУчетПрочихДоходовРасходов
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами()
	Возврат "
		|ВЫБРАТЬ
		|	&Период КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА &Договор ИНАЧЕ &Ссылка КОНЕЦ КАК ЗаказКлиента,
		|	&ВалютаВзаиморасчетов КАК Валюта,
		|
		|	ТаблицаДоходы.СуммаВзаиморасчетов КАК Сумма,
		|	0 КАК КОплате,
		|	0 КАК КОтгрузке,
		|
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация,
		|	&ФормаОплаты КАК ФормаОплаты,
		|	&Период КАК ДатаРегистратора,
		|	&ДатаПлатежа КАК ДатаПлатежа,
		|	&ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДоходы
		|
		|ГДЕ
		|	ТаблицаДоходы.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КОНЕЦПЕРИОДА(&ДатаПлатежа, День) КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА &Договор ИНАЧЕ &Ссылка КОНЕЦ КАК ЗаказКлиента,
		|	&ВалютаВзаиморасчетов КАК Валюта,
		|
		|	0 КАК Сумма,
		|	ТаблицаДоходы.СуммаВзаиморасчетов КАК КОплате,
		|	0 КАК КОтгрузке,
		|
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация,
		|	&ФормаОплаты КАК ФормаОплаты,
		|	&Период КАК ДатаРегистратора,
		|	&ДатаПлатежа КАК ДатаПлатежа,
		|	&ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДоходы
		|
		|ГДЕ
		|	ТаблицаДоходы.Ссылка = &Ссылка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентамиПоследовательность()
	Возврат "
		|ВЫБРАТЬ
		|	&Период КАК Период,
		|	&Ссылка КАК Регистратор,
		|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|;
		|/////////////////////////////////////////////////////////////////////////////
		|";
	КонецФункции

Функция ТекстЗапросаТаблицаПорядокОтраженияПрочихОпераций()
	Возврат "
		|ВЫБРАТЬ
		|	&Ссылка КАК Документ,
		|	Строки.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|
		|	&Период КАК Дата,
		|	&Организация КАК Организация
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК Строки
		|ГДЕ
		|	Строки.Ссылка = &Ссылка И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПрочихАктивов)
		|;
		|/////////////////////////////////////////////////////////////////////////////
		|";
КонецФункции

Функция ТекстЗапросаТаблицаНДСЗаписиКнигиПродаж()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	&Контрагент КАК Покупатель,
	|	&Ссылка КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги) КАК ВидЦенности,
	|	ТаблицаДоходы.СтавкаНДС КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.Реализация) КАК Событие,
	|	&Период КАК ДатаСобытия,
	|	СУММА(ВЫБОР
	|			КОГДА СуммыДокументовВВалютеРегл.СуммаБезНДСРегл ЕСТЬ NULL 
	|					ИЛИ СуммыДокументовВВалютеРегл.СуммаБезНДСРегл = 0
	|				ТОГДА ВЫРАЗИТЬ((ТаблицаДоходы.СуммаСНДС - ТаблицаДоходы.СуммаНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|			ИНАЧЕ СуммыДокументовВВалютеРегл.СуммаБезНДСРегл
	|		КОНЕЦ) КАК СуммаБезНДС,
	|	СУММА(ВЫБОР
	|			КОГДА СуммыДокументовВВалютеРегл.СуммаБезНДСРегл ЕСТЬ NULL 
	|					ИЛИ СуммыДокументовВВалютеРегл.СуммаБезНДСРегл = 0
	|				ТОГДА ВЫРАЗИТЬ(ТаблицаДоходы.СуммаНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(15, 2))
	|			ИНАЧЕ СуммыДокументовВВалютеРегл.СуммаНДСРегл
	|		КОНЕЦ) КАК НДС
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДоходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|		ПО ТаблицаДоходы.Ссылка = СуммыДокументовВВалютеРегл.Регистратор
	|			И ТаблицаДоходы.ИдентификаторСтроки = СуммыДокументовВВалютеРегл.ИдентификаторСтроки
	|ГДЕ
	|	ТаблицаДоходы.Ссылка = &Ссылка
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДоходы.СтавкаНДС
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Валюта КАК Валюта,
	|	ТаблицаДоходы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаДоходы.СуммаСНДС - ТаблицаДоходы.СуммаНДС КАК СуммаБезНДС,
	|	ТаблицаДоходы.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДоходы.СуммаНДС КАК СуммаНДС,
	|
	|	ВЫБОР КОГДА ТаблицаДоходы.СуммаСНДС - ТаблицаДоходы.СуммаНДС = ЕСТЬNULL(ДанныеРегистра.СуммаБезНДС, 0) ТОГДА
	|		ЕСТЬNULL(ДанныеРегистра.СуммаБезНДСРегл, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|
	|	ВЫБОР КОГДА ТаблицаДоходы.СуммаНДС = ЕСТЬNULL(ДанныеРегистра.СуммаНДС, 0) ТОГДА
	|		ЕСТЬNULL(ДанныеРегистра.СуммаНДСРегл, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаНДСРегл,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов
	|
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДоходы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК ДанныеРегистра
	|	ПО
	|		ДанныеРегистра.Регистратор = &Ссылка
	|		И ТаблицаДоходы.ИдентификаторСтроки = ДанныеРегистра.ИдентификаторСтроки
	|ГДЕ
	|	ТаблицаДоходы.Ссылка = &Ссылка
	|	И &Валюта <> &ВалютаРегламентированногоУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДоходы.НомерСтроки
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл()

////////////////////////////////////////////////////////////////////////////////
// Печать

Функция ПолучитьДанныеДляПечатнойФормыАктОбОказанииУслуг(ПараметрыПечати, МассивОбъектов) Экспорт
	Запрос = Новый Запрос("
		|// ЗАПРОС ПО ШАПКЕ
		|ВЫБРАТЬ // документы без посредника
		|	Реализация.Ссылка КАК Ссылка,
		|	Реализация.Номер КАК Номер,
		|	Реализация.Дата КАК Дата,
		|	Реализация.Партнер КАК Партнер,
		|	Реализация.Контрагент КАК Контрагент,
		|	Реализация.Организация КАК Организация,
		|	Реализация.Организация.Префикс КАК Префикс,
		|	Реализация.Валюта КАК Валюта,
		|	Реализация.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	(ВЫБОР КОГДА Реализация.НалогообложениеНДС В (&НалогообложениеБезНДС) ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ) КАК УчитыватьНДС,
		|	Реализация.Отпустил КАК ОтпускПроизвел
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК Реализация
		|ГДЕ
		|	Реализация.Ссылка В (&МассивДокументов) И Реализация.Проведен
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка;
		|
		|// ЗАПРОС ПО ТАБЛИЧНЫМ ЧАСТЯМ
		|ВЫБРАТЬ
		|	Реализация.Ссылка КАК Ссылка,
		|	Реализация.НомерСтроки КАК НомерСтроки,
		|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
		|	Реализация.Содержание КАК УслугаНаименованиеПолное,
		|	"""" КАК Код,
		|	"""" КАК Артикул,
		|	"""" КАК ЕдиницаЦены,
		|	Реализация.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	НЕОПРЕДЕЛЕНО КАК Характеристика,
		|	"""" КАК ХарактеристикаНаименованиеПолное,
		|	"""" КАК УпаковкаНаименование,
		|	Реализация.СтавкаНДС КАК СтавкаНДС,
		|	Реализация.Цена КАК Цена,
		|	Реализация.Количество КАК Количество,
		|	Реализация.Сумма КАК Сумма,
		|	Реализация.СуммаНДС КАК СуммаНДС,
		|	0 КАК ПроцентСкидки,
		|	0 КАК СуммаСкидки,
		|	Реализация.Сумма КАК СуммаБезСкидки,
		|	Ложь КАК ЭтоВозвратнаяТара
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК Реализация
		|ГДЕ
		|	Реализация.Ссылка В (&МассивДокументов)
		|	И Реализация.Ссылка.ХозяйственнаяОперация=ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|УПОРЯДОЧИТЬ ПО
		|	Реализация.Ссылка, Реализация.НомерСтроки
		|ИТОГИ ПО
		|	Ссылка
		|");

	НалогообложениеБезНДС = Новый Массив();
	НалогообложениеБезНДС.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	НалогообложениеБезНДС.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД);
	Запрос.УстановитьПараметр("НалогообложениеБезНДС", НалогообложениеБезНДС);
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Возврат Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти", РезультатыЗапроса[0], РезультатыЗапроса[1]);
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка                  КАК Ссылка,
	|	ДанныеДокументов.Валюта                  КАК Валюта,
	|	ДанныеДокументов.Организация             КАК Организация,
	|	ДанныеДокументов.Подразделение           КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад
	|
	|ПОМЕСТИТЬ ТаблицаДанныхДокументов
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокументов
	|
	|ГДЕ
	|	ДанныеДокументов.Ссылка В (&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Выполнить();
	
	ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, НЕ ПараметрыПечати.ПечатьВВалюте);
	ПродажиСервер.ПоместитьВременнуюТаблицуСчетовФактур(МенеджерВременныхТаблиц);
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Шапка.Ссылка КАК Ссылка,
	|	&ПредставлениеСчетФактура КАК ПредставлениеДокумента,
	|	ЕСТЬNULL(СчетаФактуры.Номер, НЕОПРЕДЕЛЕНО) КАК Номер,
	|	ЕСТЬNULL(СчетаФактуры.Дата, НЕОПРЕДЕЛЕНО) КАК Дата,
	|	ЕСТЬNULL(СчетаФактуры.НомерИсправления, НЕОПРЕДЕЛЕНО) КАК НомерИсправления,
	|	ЕСТЬNULL(СчетаФактуры.ДатаИсправления, НЕОПРЕДЕЛЕНО) КАК ДатаИсправления,
	|	ЕСТЬNULL(СчетаФактуры.Исправление, ЛОЖЬ) КАК Исправление,
	|	НЕОПРЕДЕЛЕНО КАК НомерСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК ДатаСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправленияСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправленияСчетаФактуры,
	|	ЛОЖЬ КАК КорректировочныйСчетФактура,
	|	ЕСТЬNULL(СчетаФактуры.СтрокаПлатежноРасчетныеДокументы, """") КАК СтрокаПоДокументу,
	|	ЕСТЬNULL(СчетаФактуры.Валюта, НЕОПРЕДЕЛЕНО) КАК ВалютаСчетаФактуры,
	|	Шапка.Партнер КАК Партнер,
	|	Шапка.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(СчетаФактуры.ГоловнаяОрганизация, Шапка.Организация) КАК Организация,
	|	Шапка.Организация.Префикс КАК Префикс,
	|	ЕСТЬNULL(СчетаФактуры.ИндексПодразделения, 0) КАК ИндексПодразделения,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА Шапка.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Шапка.Контрагент
	|		ИНАЧЕ Шапка.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА Шапка.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(СчетаФактуры.Грузоотправитель, Шапка.Организация)
	|		ИНАЧЕ Шапка.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ЕСТЬNULL(СчетаФактуры.ВыводитьКППГрузоотправителя, ЛОЖЬ) КАК ВыводитьКППГрузоотправителя,
	|	Шапка.АдресДоставки КАК АдресДоставки,
	|	Шапка.Валюта КАК Валюта,
	|	Шапка.Валюта.НаименованиеПолное КАК ВалютаНаименованиеПолное,
	|	Шапка.Валюта.Код КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА Шапка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТолькоУслуги,
	|	ЛОЖЬ КАК ЭтоПередачаНаКомиссию
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ТаблицаДанныхДокументов
	|		ПО Шапка.Ссылка = ТаблицаДанныхДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСчетовФактур КАК СчетаФактуры
	|		ПО Шапка.Ссылка = СчетаФактуры.ДокументОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Шапка.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	ТаблицаДокумента.Содержание КАК НоменклатураНаименование,
	|	ТаблицаДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаДокумента.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаДокумента.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	"""" КАК ХарактеристикаНаименование,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	НЕОПРЕДЕЛЕНО КАК НомерГТД,
	|	НЕОПРЕДЕЛЕНО КАК СтранаПроисхождения,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.СуммаБезНДС / ТаблицаДокумента.Количество КАК Цена,
	|	ТаблицаДокумента.СуммаБезНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокумента.СуммаБезНДС + ТаблицаДокумента.СуммаНДС КАК СуммаСНДС,
	|	ТаблицаДокумента.НомерСтроки КАК ТаблицаДокумента,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ТаблицаДокумента.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	Запрос.УстановитьПараметр("ПредставлениеСчетФактура", НСтр("ru='счет-фактура'"));
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти",
							РезультатыЗапроса[0], РезультатыЗапроса[1]);
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыМ15(ПараметрыПечати, МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка                  КАК Ссылка,
	|	ДанныеДокументов.Валюта                  КАК Валюта
	|
	|ПОМЕСТИТЬ ТаблицаДанныхДокументов
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокументов
	|
	|ГДЕ
	|	ДанныеДокументов.Ссылка В (&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Выполнить();
	
	ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц);
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Шапка.Ссылка КАК Ссылка,
	|	Шапка.Номер КАК Номер,
	|	Шапка.Дата КАК Дата,
	|	Шапка.Дата КАК ДатаСоставления,
	|	Шапка.Контрагент КАК Контрагент,
	|	Шапка.Организация КАК Организация,
	|	Шапка.Организация.Префикс КАК Префикс,
	|	Шапка.Основание КАК Основание,
	|	"""" КАК СкладНаименование,
	|	Шапка.Подразделение КАК СтруктурноеПодразделение,
	|	Шапка.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	Шапка.Валюта КАК Валюта,
	|	Шапка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	Шапка.Отпустил.Наименование КАК Кладовщик,
	|	Шапка.ОтпустилДолжность КАК ДолжностьКладовщика,
	|	ЛОЖЬ КАК ЭтоПередачаНаКомиссию
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ТаблицаДанныхДокументов
	|		ПО Шапка.Ссылка = ТаблицаДанныхДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Шапка.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	ТаблицаДокумента.Содержание КАК НоменклатураНаименование,
	|	"""" КАК НоменклатураКод,
	|	ТаблицаДокумента.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаДокумента.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	НЕОПРЕДЕЛЕНО КАК ХарактеристикаНаименование,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка,
	|	ТаблицаДокумента.СуммаБезНДС / ТаблицаДокумента.Количество КАК Цена,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	0 КАК КоличествоМест,
	|	ТаблицаДокумента.СуммаБезНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокумента.СуммаБезНДС + ТаблицаДокумента.СуммаНДС КАК СуммаСНДС,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПрочихАктивов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ТаблицаДокумента.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти",
							РезультатыЗапроса[0], РезультатыЗапроса[1]);
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыТОРГ12(ПараметрыПечати, МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка                  КАК Ссылка,
	|	ДанныеДокументов.Валюта                  КАК Валюта
	|
	|ПОМЕСТИТЬ ТаблицаДанныхДокументов
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокументов
	|
	|ГДЕ
	|	ДанныеДокументов.Ссылка В (&МассивОбъектов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;";
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Выполнить();
	
	ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц);
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Шапка.Ссылка КАК Ссылка,
	|	Шапка.Номер КАК Номер,
	|	Шапка.Дата КАК Дата,
	|	Шапка.Партнер КАК Партнер,
	|	Шапка.Контрагент КАК Контрагент,
	|	Шапка.Организация КАК Организация,
	|	Шапка.Организация.Префикс КАК Префикс,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	Шапка.Отпустил.Наименование КАК Кладовщик,
	|	Шапка.ОтпустилДолжность КАК ДолжностьКладовщика,
	|	Шапка.Основание КАК Основание,
	|	ВЫБОР
	|		КОГДА Шапка.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Шапка.Контрагент
	|		ИНАЧЕ Шапка.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА Шапка.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА Шапка.Организация
	|		ИНАЧЕ Шапка.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	Шапка.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	Шапка.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	Шапка.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	Шапка.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|	Шапка.АдресДоставки КАК АдресДоставки,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	Шапка.Валюта КАК Валюта,
	|	Шапка.ДоверенностьНомер КАК ДоверенностьНомер,
	|	Шапка.ДоверенностьДата КАК ДоверенностьДата,
	|	Шапка.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	Шапка.ДоверенностьЛицо КАК ДоверенностьЛицо
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК Шапка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанныхДокументов КАК ТаблицаДанныхДокументов
	|		ПО Шапка.Ссылка = ТаблицаДанныхДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Шапка.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	ТаблицаДокумента.Содержание КАК НоменклатураНаименование,
	|	"""" КАК НоменклатураКод,
	|	ТаблицаДокумента.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
	|	ТаблицаДокумента.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	ТаблицаДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаДокумента.ЕдиницаИзмерения.Представление КАК ВидУпаковки,
	|	1 КАК КоличествоВОдномМесте,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	"""" КАК ХарактеристикаНаименование,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка,
	|	"""" КАК УпаковкаНаименование,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаДокумента.СуммаБезНДС / ТаблицаДокумента.Количество КАК Цена,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ТаблицаДокумента.Количество КАК КоличествоМест,
	|	ТаблицаДокумента.СуммаБезНДС КАК СуммаБезНДС,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокумента.СуммаБезНДС + ТаблицаДокумента.СуммаНДС КАК СуммаСНДС,
	|	0 КАК МассаНетто,
	|	0 КАК МассаБрутто,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПрочихАктивов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ТаблицаДокумента.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	Возврат Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти",
							РезультатыЗапроса[0], РезультатыЗапроса[1]);
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	КонецЕсли;
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ЗаполнитьПоУмолчанию(Объект) Экспорт
	Объект.Менеджер = Пользователи.ТекущийПользователь();
	Объект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Объект.Менеджер, Объект.Подразделение);
	
	Объект.Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Объект.Валюта);
	Объект.ВалютаВзаиморасчетов = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Объект.ВалютаВзаиморасчетов);
	
	Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, , Объект.БанковскийСчетОрганизации);
КонецПроцедуры

Процедура ЗаполнитьПоПартнеру(Объект, Партнер) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Или (Объект.Партнер <> Партнер) Тогда
		Объект.Партнер = Партнер;
	КонецЕсли;
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
		Объект.Партнер,
		Новый Структура("ХозяйственнаяОперация, ВыбранноеСоглашение", Перечисления.ХозяйственныеОперации.РеализацияКлиенту, Объект.Соглашение)
	);
	
	Если ЗначениеЗаполнено(УсловияПродаж) Тогда
		Объект.Соглашение = УсловияПродаж.Соглашение;
		ЗаполнитьПоУсловиямПродаж(Объект, УсловияПродаж);
	Иначе
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
		Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , Объект.БанковскийСчетКонтрагента);
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Объект.Партнер, Объект.КонтактноеЛицо);
	
КонецПроцедуры

Процедура ЗаполнитьПоУсловиямПродаж(Объект, УсловияПродаж) Экспорт
	ЗаполнитьЗначенияСвойств(Объект, УсловияПродаж, "Валюта, ЦенаВключаетНДС, НалогообложениеНДС, ФормаОплаты, ГруппаФинансовогоУчета");
	Объект.ВалютаВзаиморасчетов = УсловияПродаж.Валюта;
	Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		Объект.ХозяйственнаяОперация = УсловияПродаж.ХозяйственнаяОперация;
	КонецЕсли;
	Если ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация<>Объект.Организация Тогда
		Объект.Организация = УсловияПродаж.Организация;
	КонецЕсли;
	Если (Не УсловияПродаж.Типовое) И ЗначениеЗаполнено(УсловияПродаж.Контрагент) И УсловияПродаж.Контрагент<>Объект.Контрагент Тогда
		Объект.Контрагент = УсловияПродаж.Контрагент;
	КонецЕсли;
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	Если (НЕ УсловияПродаж.Типовое) И НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		Объект.КонтактноеЛицо = УсловияПродаж.КонтактноеЛицо;
	КонецЕсли;
	Объект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
		Объект.Договор, Объект.Партнер, Объект.Контрагент, Объект.Организация,
		Перечисления.ХозяйственныеОперации.РеализацияКлиенту, Объект.ВалютаВзаиморасчетов, Объект.Соглашение
	);
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчетОрганизации, Объект.БанковскийСчетКонтрагента);
	Если ЗначениеЗаполнено(УсловияПродаж.ГрафикОплаты) Или ЗначениеЗаполнено(УсловияПродаж.Соглашение) Тогда
		Объект.ДатаПлатежа = ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(Объект.Дата, УсловияПродаж.ГрафикОплаты, УсловияПродаж.Соглашение);
	КонецЕсли;
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, , Объект.БанковскийСчетОрганизации);
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , Объект.БанковскийСчетКонтрагента);
	Объект.АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Объект.Партнер);
	
КонецПроцедуры

Функция СформироватьОснование(Объект, ИгнорироватьПорядокРасчетов=Ложь) Экспорт
	ОснованиеТекст = "";
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Договоры.НаименованиеДляПечати
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК Договоры
			|ГДЕ
			|	Договоры.Ссылка = &Ссылка И (Договоры.ПорядокРасчетов = &ПорядокРасчетов ИЛИ &ИгнорироватьПорядокРасчетов)"
		);
		Запрос.УстановитьПараметр("Ссылка", Объект.Договор);
		Запрос.УстановитьПараметр("ПорядокРасчетов", Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
		Запрос.УстановитьПараметр("ИгнорироватьПорядокРасчетов", ИгнорироватьПорядокРасчетов);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОснованиеТекст = СокрЛП(Выборка.НаименованиеДляПечати);
		КонецЕсли;
	КонецЕсли;
	Возврат ОснованиеТекст;
КонецФункции

Функция ПолучитьСписокВыбораОснованияДляПечати(Объект) Экспорт
	
	Список = Новый СписокЗначений;
	ТекстОснования = СформироватьОснование(Объект, Истина);
	Если ЗначениеЗаполнено(ТекстОснования) Тогда
		Список.Добавить(ТекстОснования);
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

Процедура ПоместитьВременнуюТаблицуТоваров(МенеджерВременныхТаблиц, ПересчитыватьВВалютуРегл = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ПересчитыватьВВалютуРегл",       ПересчитыватьВВалютуРегл);
	
	Если ПересчитыватьВВалютуРегл Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ТаблицаДанныхДокументов КАК ДанныеДокументов
		|	ПО
		|		РасчетыСКлиентами.Регистратор = ДанныеДокументов.Ссылка
		|
		|ГДЕ
		|	ДанныеДокументов.Валюта <> &ВалютаРегламентированногоУчета
		|	И РасчетыСКлиентами.Активность
		|";
		ТаблицаАналитик = Запрос.Выполнить().Выгрузить();
		МассивАналитикУчетаПоПартнерам = ТаблицаАналитик.ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
		
		ВзаиморасчетыСервер.ВыполнитьПроведениеДокументовПоРасчетамСКлиентами(МассивАналитикУчетаПоПартнерам);
		
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                                 КАК Ссылка,
	|	ТаблицаДокумента.НомерСтроки                            КАК НомерСтроки,
	|	ТаблицаДокумента.Содержание                             КАК Содержание,
	|	ТаблицаДокумента.Количество                             КАК Количество,
	|	ТаблицаДокумента.ЕдиницаИзмерения                       КАК ЕдиницаИзмерения,
	|	
	|	ЕСТЬNULL(
	|		СуммыДокументовВВалютеРегл.СуммаБезНДСРегл,
	|		ТаблицаДокумента.СуммаСНДС - ТаблицаДокумента.СуммаНДС
	|	) КАК СуммаБезНДС,
	|	
	|	ТаблицаДокумента.СтавкаНДС                              КАК СтавкаНДС,
	|	
	|	ЕСТЬNULL(
	|		СуммыДокументовВВалютеРегл.СуммаНДСРегл,
	|		ТаблицаДокумента.СуммаНДС
	|	) КАК СуммаНДС
	|
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Доходы КАК ТаблицаДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокументов КАК ДанныеДокументов
	|	ПО
	|		ТаблицаДокумента.Ссылка = ДанныеДокументов.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК СуммыДокументовВВалютеРегл
	|	ПО
	|		ТаблицаДокумента.Ссылка = СуммыДокументовВВалютеРегл.Регистратор
	|		И ТаблицаДокумента.ИдентификаторСтроки = СуммыДокументовВВалютеРегл.ИдентификаторСтроки
	|		И СуммыДокументовВВалютеРегл.Активность
	|		И &ПересчитыватьВВалютуРегл	
	|;";
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецЕсли