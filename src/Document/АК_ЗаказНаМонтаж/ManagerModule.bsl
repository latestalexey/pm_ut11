
////////////////////////////////////////////////////////////////////////////////////////////

//
//
Процедура ВывестиВExcel(ТабличныйДокумент, Организация, Имя = "temp")
	
	//
	ИмяФайла =  КаталогВременныхФайлов() + Строка(Имя) + ".xls";
	
	//
	ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
	
	//
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
	Исключение
		ВызватьИсключение "Excel не установлен";
	КонецПопытки;
	
	//
	Workbook = COMОбъект.Workbooks.Open(ИмяФайла);
	
	//ЛЕВЫЙ КОЛОНТИТУЛ
	ИмяФайлаКартинкиКолонтитулВерхнийЛевый = ПолучитьИмяВременногоФайла(".bmp");
	
	КартинкаКолонтитулВерхнийЛевый = ПолучитьЛоготип(Организация, "КолонтитулВерхнийЛевый");
	КартинкаКолонтитулВерхнийЛевый.Записать(ИмяФайлаКартинкиКолонтитулВерхнийЛевый);
	
	Workbook.ActiveSheet.PageSetup.LeftHeaderPicture.Filename = ИмяФайлаКартинкиКолонтитулВерхнийЛевый; 
	Workbook.ActiveSheet.PageSetup.LeftHeader = "&G";
	
	//ЦЕНТР КОЛОНТИТУЛ
	ИмяФайлаКартинкиКолонтитулВерхнийЦентр = ПолучитьИмяВременногоФайла(".bmp");
	
	КартинкаКолонтитулВерхнийЦентр = ПолучитьЛоготип(Организация, "КолонтитулВерхнийЦентр");
	КартинкаКолонтитулВерхнийЦентр.Записать(ИмяФайлаКартинкиКолонтитулВерхнийЦентр);
	
	Workbook.ActiveSheet.PageSetup.CenterHeaderPicture.Filename = ИмяФайлаКартинкиКолонтитулВерхнийЦентр; 
	Workbook.ActiveSheet.PageSetup.CenterHeader = "&G";
	
	//ПРАВЫЙ КОЛОНТИТУЛ
	ИмяФайлаКартинкиКолонтитулВерхнийПравый = ПолучитьИмяВременногоФайла(".bmp");
	
	КартинкаКолонтитулВерхнийПравый = ПолучитьЛоготип(Организация, "КолонтитулВерхнийПравый");
	КартинкаКолонтитулВерхнийПравый.Записать(ИмяФайлаКартинкиКолонтитулВерхнийПравый);
	
	Workbook.ActiveSheet.PageSetup.RightHeaderPicture.Filename = ИмяФайлаКартинкиКолонтитулВерхнийПравый; 
	Workbook.ActiveSheet.PageSetup.RightHeader = "&G";
	
	//
	Workbook.ActiveSheet.PageSetup.Orientation = 2;
	Workbook.ActiveSheet.PageSetup.Zoom = False;
    Workbook.ActiveSheet.PageSetup.FitToPagesTall = 1;
    Workbook.ActiveSheet.PageSetup.FitToPagesWide = 1;

    //
	Workbook.Save();
	//Workbook.Close();
	
	//
	COMОбъект.Visible = Истина;
	
	//
	УдалитьФайлы(ИмяФайлаКартинкиКолонтитулВерхнийЛевый);
	УдалитьФайлы(ИмяФайлаКартинкиКолонтитулВерхнийЦентр);
	УдалитьФайлы(ИмяФайлаКартинкиКолонтитулВерхнийПравый);
	
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////////////////

//
//
Функция СократитьФИО(Знач z1)
	
	//
	РезультатФИО = "";
	
	//
	z1 = СтрЗаменить(z1, "  ", " ");
	z1 = СтрЗаменить(z1, "  ", " ");
	
	//
	z1 = СокрЛП(СтрЗаменить(z1, " ", Символы.ПС));
	
	//
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(z1);
	
	//
	Для Сч = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		
		//
		ТекущаяСтрока = СокрЛП(ТекстовыйДокумент.ПолучитьСтроку(Сч));
		
		//
		Если Сч = 1 Тогда
			РезультатФИО = РезультатФИО + СокрЛП(ТекущаяСтрока) + " ";
			Продолжить;
		КонецЕсли;	
		
		//
		РезультатФИО = РезультатФИО + ВРЕГ(Лев(СокрЛП(ТекущаяСтрока), 1)) + ".";
		
	КонецЦикла;	
	
	//
	Возврат РезультатФИО;

 КонецФункции

//
//
Функция ВывестиСПроверкойВывода(ТабличныйДокумент, ВыводимаяОбласть,  ВерхнийКолонтитул = Неопределено, НижнийКолонтитул = Неопределено)
	
	//
	МассивВыводимыхОбластей = Новый Массив;
	
	//
	Если ТипЗнч(ВыводимаяОбласть) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ВыводимаяОбласть Цикл
			МассивВыводимыхОбластей.Добавить(ЭлементМассива);
		КонецЦикла;	
	Иначе
		МассивВыводимыхОбластей.Добавить(ВыводимаяОбласть);
	КонецЕсли;	
	
	//
	Если НижнийКолонтитул <> Неопределено Тогда
			
		Если ТипЗнч(НижнийКолонтитул) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из НижнийКолонтитул Цикл
				МассивВыводимыхОбластей.Добавить(ЭлементМассива);
			КонецЦикла;	
		Иначе
			МассивВыводимыхОбластей.Добавить(НижнийКолонтитул);
		КонецЕсли;	
			
	КонецЕсли;
	
	//
	Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивВыводимыхОбластей) Тогда
		
		//
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		//
		Если ВерхнийКолонтитул <> Неопределено Тогда
				
			Если ТипЗнч(ВерхнийКолонтитул) = Тип("Массив") Тогда
				Для Каждого ЭлементМассива Из ВерхнийКолонтитул Цикл
					ТабличныйДокумент.Вывести(ЭлементМассива);
				КонецЦикла;
			Иначе
				ТабличныйДокумент.Вывести(ВерхнийКолонтитул);
			КонецЕсли;	
				
		КонецЕсли;
	
	КонецЕсли;
	
	//
	Для Сч = 0 По МассивВыводимыхОбластей.Количество() - 1 Цикл
			
		//
		ЭлементМассива = МассивВыводимыхОбластей[Сч];
		ТабличныйДокумент.Вывести(ЭлементМассива);
	
	КонецЦикла;
	
КонецФункции

//
//
Функция ПолучитьИнформациюОКонтактномЛице(Объект, ФИО = Истина, ФИОСокращенно = Ложь, ТелефонВид = Неопределено, АдресЭПВид = Неопределено, АдресВид = Неопределено, Разделитель = ",")
	
	//
	РезультатИнформация = "";
	
	//
	ТекстЗапроса = "ВЫБРАТЬ
	               |	КонтактныеЛицаПартнеров.Ссылка КАК КонтактноеЛицо,
	               |	КонтактныеЛицаПартнеров.Наименование КАК Наименование,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.ЗначенияПолей,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Страна,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Регион,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.Город,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.ДоменноеИмяСервера,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона,
	               |	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефонаБезКодов,
	               |	ВЫБОР
	               |		КОГДА КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	               |			ТОГДА 1
	               |		КОГДА КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	               |			ТОГДА 2
	               |		КОГДА КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	               |			ТОГДА 3
	               |	КОНЕЦ КАК Порядок
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	               |		ПО (КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка = КонтактныеЛицаПартнеров.Ссылка)
	               |ГДЕ
	               |	КонтактныеЛицаПартнеров.Ссылка = &Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КонтактноеЛицо,
	               |	Порядок
	               |ИТОГИ
	               |	МАКСИМУМ(Наименование)
	               |ПО
	               |	КонтактноеЛицо";
				   
	//			   
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	
	//
	ПостроительЗапроса.Параметры.Вставить("Ссылка", Объект);
	
	//
	ПостроительЗапроса.Выполнить();
	
	//
	ВыборкаКЛ = ПостроительЗапроса.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаКЛ.Следующий() Тогда
		
		//
		КонтактноеЛицо = ВыборкаКЛ.КонтактноеЛицо;
		
		//
		Если ФИО = Истина Тогда
			РезультатИнформация = РезультатИнформация + ВыборкаКЛ.Наименование + Разделитель + " ";
		ИначеЕсли ФИОСокращенно = Истина Тогда	
			РезультатИнформация = РезультатИнформация + СократитьФИО(ВыборкаКЛ.Наименование) + Разделитель + " ";
		КонецЕсли;	
		
		//
		ВыборкаКИ = ВыборкаКЛ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКИ.Следующий() Цикл
			
			Если ВыборкаКИ.Вид = ТелефонВид Тогда
				РезультатИнформация = РезультатИнформация + СокрЛП(ВыборкаКИ.Представление) + Разделитель + " ";
			ИначеЕсли ВыборкаКИ.Вид = АдресЭПВид Тогда
				РезультатИнформация = РезультатИнформация + СокрЛП(ВыборкаКИ.Представление) + Разделитель + " ";
			ИначеЕсли ВыборкаКИ.Вид = АдресВид Тогда
				РезультатИнформация = РезультатИнформация + СокрЛП(ВыборкаКИ.Представление) + Разделитель + " ";
			КонецЕсли;	
			
		КонецЦикла;	
		
		//
		РезультатИнформация = Лев(РезультатИнформация, СтрДлина(РезультатИнформация) - 2);
		
	КонецЕсли;	
	
	//
	Возврат РезультатИнформация;
	
КонецФункции	

//
//
Функция ПолучитьРеквизитыШапки(Ссылка)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Таблица.Номер,
	               |	Таблица.Дата,
	               |	Таблица.Организация,
	               |	Таблица.Партнер,
	               |	Таблица.КонтактноеЛицоПартнера КАК ПартнерКонтактноеЛицо,
	               |	Таблица.Заказчик,
	               |	Таблица.ПунктНазначения.Адрес КАК ЗаказчикАдрес,
	               |	Таблица.КонтактноеЛицоЗаказчика КАК ЗаказчикКонтактноеЛицо,
	               |	Таблица.ДатаВремя КАК МонтажДата,
	               |	Таблица.Комментарий,
	               |	Таблица.Ответственный
	               |ИЗ
	               |	Документ.АК_ЗаказНаМонтаж КАК Таблица
	               |ГДЕ
	               |	Таблица.Ссылка = &Ссылка";
				  
				   
	//
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	ПостроительЗапроса.Параметры.Вставить("Ссылка", Ссылка);
	
	//
	ПостроительЗапроса.Выполнить();
	
	//
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Выборка.Следующий();
	
	//
	Возврат Выборка;
	
КонецФункции	

//
//
Функция ПолучитьЛоготип(Организация, ИмяФайла)
	
	//
	РезультатКартинка = Новый Картинка;
	
	//
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ОрганизацииПрисоединенныеФайлы.Ссылка,
	               |	ПрисоединенныеФайлы.ХранимыйФайл
	               |ИЗ
	               |	Справочник.ОрганизацииПрисоединенныеФайлы КАК ОрганизацииПрисоединенныеФайлы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	               |		ПО ОрганизацииПрисоединенныеФайлы.Ссылка = ПрисоединенныеФайлы.ПрисоединенныйФайл
	               |ГДЕ
	               |	ОрганизацииПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	               |	И ОрганизацииПрисоединенныеФайлы.Наименование = &Наименование
	               |	И (НЕ ОрганизацииПрисоединенныеФайлы.ПометкаУдаления)";
				   
	//
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	
	//
	ПостроительЗапроса.Параметры.Вставить("ВладелецФайла", Организация);
	ПостроительЗапроса.Параметры.Вставить("Наименование", ИмяФайла);
	
	//
	ПостроительЗапроса.Выполнить();
	
	//
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		
		//
		РезультатКартинка = Новый Картинка(Выборка.ХранимыйФайл.Получить());
		
	КонецЕсли;	
	
	//
	Возврат РезультатКартинка;
	
	//КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////////////////

//
//
Функция ПечатьЗаказаНаМонтаж(МассивОбъектов, ОбъектыПечати)
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ЗаказНаМонтаж"; 	
	
	//
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	
	//
	ПервыйДокумент = Истина;	
	
	//
	Для Каждого СсылкаНаОбъект из МассивОбъектов Цикл
		
		//
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Макет и области
		Макет = ПолучитьМакет("ЗаказНаМонтаж");	
		
		//
		РеквизитыШапки = ПолучитьРеквизитыШапки(СсылкаНаОбъект);
		
		//ЛОГОТИП
		
		//
		_ТД_Логотип = Новый ТабличныйДокумент;
		
		////
		//ШапкаЛоготип = Макет.ПолучитьОбласть("Логотип");
		//
		////
		//ОбластьРисунок = ШапкаЛоготип.Области.Найти("РисунокЛоготип");
		//ОбластьРисунок.Картинка = ПолучитьЛоготип(РеквизитыШапки.Организация, "ЛоготипЛандшафт");
		//
		////
		//_ТД_Логотип.Вывести(ШапкаЛоготип);
		//
		////
		//ТабличныйДокумент.Вывести(_ТД_Логотип);
		
		//ЗАГОЛОВОК
		Заголовок = Макет.ПолучитьОбласть("Заголовок");
		
		//
		Заголовок.Параметры.Заполнить(РеквизитыШапки);
		
		//
		Заголовок.Параметры.Номер = РеквизитыШапки.Номер;
		Заголовок.Параметры.Дата = Формат(РеквизитыШапки.Дата, "ДЛФ=DD");
		
		//
		Заголовок.Параметры.ПартнерКонтактнаяИнформация = ПолучитьИнформациюОКонтактномЛице(РеквизитыШапки.ПартнерКонтактноеЛицо, Истина, Ложь, Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица, Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица,);
		
		//
		ТабличныйДокумент.Вывести(Заголовок);
		
		//ТОВАРЫ
		
		//
		ТоварыШапкаПостоянная = Макет.ПолучитьОбласть("ТоварыШапка|Постоянная");
		ТоварыШапкаПеременная = Макет.ПолучитьОбласть("ТоварыШапка|Переменная"); 
		ТоварыШапкаПримечание = Макет.ПолучитьОбласть("ТоварыШапка|Примечание");
		
		//
		ТоварыСтрокаПостоянная = Макет.ПолучитьОбласть("ТоварыСтрока|Постоянная");
		ТоварыСтрокаПеременная = Макет.ПолучитьОбласть("ТоварыСтрока|Переменная"); 
		ТоварыСтрокаПримечание = Макет.ПолучитьОбласть("ТоварыСтрока|Примечание");
		
		//
		Запрос = Новый Запрос;
		Запрос.Текст ="ВЫБРАТЬ
		              |	Таблица.НомерСтроки,
		              |	Таблица.Номенклатура,
		              |	Таблица.Количество КАК Количество,
		              |	Таблица.Номенклатура.Артикул КАК Артикул,
		              |	Таблица.Номенклатура.Код КАК Код,
		              |	Таблица.Номенклатура.Описание КАК Описание,
		              |	ГабаритныеРазмеры.Значение КАК Габариты,
		              |	Производитель.Значение КАК Производитель
		              |ПОМЕСТИТЬ ТЗ_Товары
		              |ИЗ
		              |	Документ.АК_ЗаказНаМонтаж.Товары КАК Таблица
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ГабаритныеРазмеры
		              |		ПО Таблица.Номенклатура = ГабаритныеРазмеры.Ссылка
		              |			И (ГабаритныеРазмеры.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_ГабаритныеРазмеры))
		              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Производитель
		              |		ПО Таблица.Номенклатура = Производитель.Ссылка
		              |			И (Производитель.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_Производитель))
		              |ГДЕ
		              |	Таблица.Ссылка = &Ссылка
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	НоменклатураДополнительныеРеквизиты.Свойство,
		              |	НоменклатураДополнительныеРеквизиты.Значение,
		              |	НоменклатураДополнительныеРеквизиты.ТекстоваяСтрока,
		              |	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура
		              |ПОМЕСТИТЬ ТЗ_Свойства
		              |ИЗ
		              |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		              |ГДЕ
		              |	НоменклатураДополнительныеРеквизиты.Ссылка В
		              |			(ВЫБРАТЬ
		              |				ТЗ_Товары.Номенклатура
		              |			ИЗ
		              |				ТЗ_Товары)
		              |	И (НЕ НоменклатураДополнительныеРеквизиты.Свойство В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_ГабаритныеРазмеры), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_Производитель)))
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ТЗ_Товары.НомерСтроки,
		              |	ТЗ_Товары.Номенклатура,
		              |	ТЗ_Товары.Количество,
		              |	ТЗ_Товары.Артикул,
		              |	ТЗ_Товары.Код,
		              |	ТЗ_Товары.Описание,
		              |	ТЗ_Товары.Габариты,
		              |	ТЗ_Товары.Производитель
		              |ИЗ
		              |	ТЗ_Товары КАК ТЗ_Товары
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ РАЗЛИЧНЫЕ
		              |	ТЗ_Свойства.Свойство
		              |ИЗ
		              |	ТЗ_Свойства КАК ТЗ_Свойства
		              |
		              |УПОРЯДОЧИТЬ ПО
		              |	ТЗ_Свойства.Свойство.АК_ПорядокВывода,
		              |	ТЗ_Свойства.Свойство.Наименование
		              |;
		              |
		              |////////////////////////////////////////////////////////////////////////////////
		              |ВЫБРАТЬ
		              |	ТЗ_Свойства.Свойство,
		              |	ТЗ_Свойства.Значение,
		              |	ТЗ_Свойства.ТекстоваяСтрока,
		              |	ТЗ_Свойства.Номенклатура КАК Номенклатура
		              |ИЗ
		              |	ТЗ_Свойства КАК ТЗ_Свойства";
		
		//							
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);	
		Результат = Запрос.ВыполнитьПакет();	
		
		//
		тзТовары = Результат.Получить(Результат.Количество()-3).Выгрузить();
		тзСвойства = Результат.Получить(Результат.Количество()-2).Выгрузить();
		тзСвойстваИЗначения = Результат.Получить(Результат.Количество()-1).Выгрузить();
		
		//ШАПКА "ТОВАРЫ"
		
		//
		ТоварыШапкаПостоянная = Макет.ПолучитьОбласть("ТоварыШапка|Постоянная");
		ТоварыШапкаПеременная = Макет.ПолучитьОбласть("ТоварыШапка|Переменная"); 
		ТоварыШапкаПримечание = Макет.ПолучитьОбласть("ТоварыШапка|Примечание");
		
		//
		_ТД_ТоварыШапка = Новый ТабличныйДокумент;
		
		//
		_ТД_ТоварыШапка.Вывести(ТоварыШапкаПостоянная);
		
		//
		Для Каждого СтрокаТЗ Из тзСвойства Цикл
			ТоварыШапкаПеременная.Параметры.Свойство = СтрокаТЗ.Свойство;
			_ТД_ТоварыШапка.Присоединить(ТоварыШапкаПеременная);
		КонецЦикла;
		
		//
		_ТД_ТоварыШапка.Присоединить(ТоварыШапкаПримечание);
		
		//
		МассивВерхнийКолонтитул = Новый Массив;
		МассивВерхнийКолонтитул.Добавить(_ТД_Логотип);
		МассивВерхнийКолонтитул.Добавить(_ТД_ТоварыШапка);
		
		//ТОВАРЫ
		
		//
		ТоварыСтрокаПостоянная = Макет.ПолучитьОбласть("ТоварыСтрока|Постоянная");
		ТоварыСтрокаПримечание = Макет.ПолучитьОбласть("ТоварыСтрока|Примечание");
		
		//
		КоличествоВсего = 0;
		
		//
		Для Каждого СтрокаТЗ из тзТовары Цикл
			
			//
			_ТД = Новый ТабличныйДокумент;
			
			//
			ТоварыСтрокаПостоянная.Параметры.Заполнить(СтрокаТЗ);
			_ТД.Вывести(ТоварыСтрокаПостоянная);
			
			//
			Для Каждого СтрокаСвойство Из тзСвойства Цикл
				
				//
				ТоварыСтрокаПеременная = Макет.ПолучитьОбласть("ТоварыСтрока|Переменная");
				
				//
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Номенклатура", СтрокаТЗ.Номенклатура);
				СтруктураПоиска.Вставить("Свойство", СтрокаСвойство.Свойство);
				
				//
 				НайденныеСтроки = тзСвойстваИЗначения.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					ТоварыСтрокаПеременная.Параметры.СвойствоЗначение = НайденныеСтроки[0].Значение;
				КонецЕсли;	
				
				//
				_ТД.Присоединить(ТоварыСтрокаПеременная);
				
			КонецЦикла;	
			
			//
			_ТД.Присоединить(ТоварыСтрокаПримечание);
			
			//
			Если тзТовары.Индекс(СтрокаТЗ) = 0 Тогда
				
				//
				МассивВерхнийКолонтитул = Новый Массив;
				МассивВерхнийКолонтитул.Добавить(_ТД_Логотип);
				
				//
				МассивСтрока = Новый Массив;
				МассивСтрока.Добавить(_ТД_ТоварыШапка);
				МассивСтрока.Добавить(_ТД);
				
				//
				ВывестиСПроверкойВывода(ТабличныйДокумент, МассивСтрока, МассивВерхнийКолонтитул);
				
			Иначе	
				
				//
				МассивВерхнийКолонтитул = Новый Массив;
				МассивВерхнийКолонтитул.Добавить(_ТД_Логотип);
				МассивВерхнийКолонтитул.Добавить(_ТД_ТоварыШапка);
				
				//
				ВывестиСПроверкойВывода(ТабличныйДокумент, _ТД, МассивВерхнийКолонтитул);
			
			КонецЕсли;
			
			//
			КоличествоВсего = КоличествоВсего + СтрокаТЗ.Количество;
			
		КонецЦикла;	
		
		//ПОДВАЛ ТОВАРЫ
		
		//
		ТоварыПодвалПостоянная = Макет.ПолучитьОбласть("ТоварыПодвал|Постоянная");
		ТоварыПодвалПеременная = Макет.ПолучитьОбласть("ТоварыПодвал|Переменная"); 	
		ТоварыПодвалПримечание = Макет.ПолучитьОбласть("ТоварыПодвал|Примечание");
		
		//
		ТоварыПодвалПостоянная.Параметры.КоличествоВсего = КоличествоВсего;
		ВывестиСПроверкойВывода(ТабличныйДокумент, ТоварыПодвалПостоянная, _ТД_Логотип);
		
		//
		Для Каждого СтрокаСвойство Из тзСвойства Цикл
			ТабличныйДокумент.Присоединить(ТоварыПодвалПеременная);
		КонецЦикла;	
			
		//
		ТабличныйДокумент.Присоединить(ТоварыПодвалПримечание);
		
		
		//ПОДВАЛ
		
		//
		ПодвалПостоянная = Макет.ПолучитьОбласть("Подвал");	
		
		//
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(РеквизитыШапки.Организация, КонецДня(РеквизитыШапки.Дата));
		
		//
		ПодвалПостояннаяПараметры = Новый Структура;
		ПодвалПостояннаяПараметры.Вставить("ОрганизацияКонтактноеЛицо", РеквизитыШапки.Ответственный.Наименование); 
		ПодвалПостояннаяПараметры.Вставить("ОрганизацияКонтактноеЛицоДолжность", РеквизитыШапки.Ответственный.АК_Должность);
		ПодвалПостояннаяПараметры.Вставить("Организация", СведенияОбОрганизации.ПолноеНаименование);
		ПодвалПостояннаяПараметры.Вставить("ОрганизацияТелефон", "Тел.: " + СведенияОбОрганизации.Телефоны);
		ПодвалПостояннаяПараметры.Вставить("ОрганизацияКонтактноеЛицоТелефон", УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(РеквизитыШапки.Ответственный, Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица));
		ПодвалПостояннаяПараметры.Вставить("ОрганизацияАдресЭП", УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(РеквизитыШапки.Организация, Справочники.ВидыКонтактнойИнформации.EmailОрганизации));
		
		//
		ПодвалПостоянная.Параметры.Заполнить(ПодвалПостояннаяПараметры);
		
		//
		ВывестиСПроверкойВывода(ТабличныйДокумент, ПодвалПостоянная, _ТД_Логотип);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно 
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаНаОбъект);
		
		//
		//ВывестиВExcel(ТабличныйДокумент, РеквизитыШапки.Организация, СсылкаНаОбъект.Метаданные().Синоним + " от " + СсылкаНаОбъект.Номер);
		
	КонецЦикла;
	
	////
	//ШиринаТаблицыВПикселях = 0;
	//Для Сч = 1 По ТабличныйДокумент.ШиринаТаблицы Цикл
	//	Область = ТабличныйДокумент.Область(, Сч, , Сч);
	//	ШиринаТаблицыВПикселях = ШиринаТаблицыВПикселях + Область.ШиринаКолонки;
	//КонецЦикла;
	//
	////
	//Для Каждого Рисунок Из ТабличныйДокумент.Рисунки Цикл
	//	Рисунок.Ширина = ШиринаТаблицыВПикселях*1.835;
	//КонецЦикла;
	
	//
	Возврат ТабличныйДокумент;
	
КонецФункции

//
//
Функция _ПечатьЗаказаНаМонтаж(МассивОбъектов, ОбъектыПечати)
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ЗаказНаМонтаж"; 	
	
	ПервыйДокумент = Истина;	
	
	Для Каждого ДокЗаказ из МассивОбъектов Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Макет и области
		Макет = ПолучитьМакет("ЗаказНаМонтаж");	
		
		СвойствоГабаритныеРазмеры = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_ГабаритныеРазмеры; 
		//+++ZEZA СвойствоТехническоеОписание = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_ТехОписание; 
		СвойствоПроизводитель = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_Производитель;	
		
		ПостоянныеСвойства = Новый Массив;
		ПостоянныеСвойства.Добавить(СвойствоГабаритныеРазмеры);
		//+++ZEZA ПостоянныеСвойства.Добавить(СвойствоТехническоеОписание);	
		ПостоянныеСвойства.Добавить(СвойствоПроизводитель);	
		
		ШапкаПостоянная = Макет.ПолучитьОбласть("Шапка|Постоянная");
		ШапкаПеременная = Макет.ПолучитьОбласть("Шапка|Переменная"); 
		ШапкаПримечание = Макет.ПолучитьОбласть("Шапка|Примечание");
		ШапкаТаблицыПостоянная = Макет.ПолучитьОбласть("ШапкаТаблицы|Постоянная");
		ШапкаТаблицыПеременная = Макет.ПолучитьОбласть("ШапкаТаблицы|Переменная"); 
		ШапкаТаблицыПримечание = Макет.ПолучитьОбласть("ШапкаТаблицы|Примечание");
		
		ПодвалТаблицыПостоянная = Макет.ПолучитьОбласть("ПодвалТаблицы|Постоянная");
		ПодвалТаблицыПеременная = Макет.ПолучитьОбласть("ПодвалТаблицы|Переменная"); 
		ПодвалТаблицыПримечание = Макет.ПолучитьОбласть("ПодвалТаблицы|Примечание");
		
		ПодвалПостоянная = Макет.ПолучитьОбласть("Подвал|Постоянная");	
		
		Запрос = Новый Запрос;
		ЗАпрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	АК_ЗаказНаМонтаж.КонтактноеЛицоПартнера КАК ИсполнительФИО,
			|	АК_ЗаказНаМонтаж.КонтактноеЛицоПартнера.АК_Должность КАК ИспДолжность,
			|	АК_ЗаказНаМонтаж.Партнер.НаименованиеПолное КАК ИспОрганизация,
			|	АК_ЗаказНаМонтаж.Заказчик,
			|	АК_ЗаказНаМонтаж.ПунктНазначения.Адрес КАК АдресЗаказчика,
			|	АК_ЗаказНаМонтаж.ДатаВремя,
			|	АК_ЗаказНаМонтаж.КонтактноеЛицоПартнера,
			|	АК_ЗаказНаМонтаж.КонтактноеЛицоПартнера.АК_Должность КАК КонтактноеЛицоДолжность,
			|	АК_ЗаказНаМонтаж.Ответственный КАК КонтактноеЛицоОрганизации,
			|	АК_ЗаказНаМонтаж.Ответственный КАК Менеджер,
			|	АК_ЗаказНаМонтаж.Организация,
			|	АК_ЗаказНаМонтаж.Ответственный.АК_Должность КАК ДолжностьКЛОрганизации,
			|	АК_ЗаказНаМонтаж.Организация.КонтактнаяИнформация.(
			|		НомерТелефона КАК НомерТелефона,
			|		АдресЭП КАК Мыло
			|	) КАК КонтактыОрганизацииПодвал,
			|	АК_ЗаказНаМонтаж.КонтактноеЛицоПартнера.КонтактнаяИнформация.(
			|		НомерТелефона КАК НомерТелефона,
			|		АдресЭП КАК Мыло,
			|		НомерТелефона КАК Телефон
			|	) КАК КонтактыКЛПодвал,
			|	АК_ЗаказНаМонтаж.Партнер КАК Исполнитель,
			|	АК_ЗаказНаМонтаж.Дата,
			|	АК_ЗаказНаМонтаж.Партнер,
			|	АК_ЗаказНаМонтаж.Номер,
			|	АК_ЗаказНаМонтаж.КонтактноеЛицоЗаказчика
			|ИЗ
			|	Документ.АК_ЗаказНаМонтаж КАК АК_ЗаказНаМонтаж
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
			|		ПО АК_ЗаказНаМонтаж.Партнер = Контрагенты.Партнер
			|ГДЕ
			|	АК_ЗаказНаМонтаж.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДокЗаказ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЗапросТовары = Новый Запрос;
		ЗапросТовары.Текст = 
			"ВЫБРАТЬ
			|	АК_ЗаказНаМонтажТовары.Номенклатура,
			|	АК_ЗаказНаМонтажТовары.Количество КАК Количество,
			|	АК_ЗаказНаМонтажТовары.Номенклатура.Артикул КАК Артикул,
			|	АК_ЗаказНаМонтажТовары.Номенклатура.Код КАК Код,
			|	ГабаритныеРазмеры.Значение КАК Габариты,
			|	Производитель.Значение КАК Производитель,
			|	АК_ЗаказНаМонтажТовары.Номенклатура.Описание КАК ТехОписание
			|ИЗ
			|	Документ.АК_ЗаказНаМонтаж.Товары КАК АК_ЗаказНаМонтажТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК ГабаритныеРазмеры
			|		ПО АК_ЗаказНаМонтажТовары.Номенклатура = ГабаритныеРазмеры.Ссылка
			|			И (ГабаритныеРазмеры.Свойство = &Габариты)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК Производитель
			|		ПО АК_ЗаказНаМонтажТовары.Номенклатура = Производитель.Ссылка
			|			И (Производитель.Свойство = &Производитель)
			|ГДЕ
			|	АК_ЗаказНаМонтажТовары.Ссылка = &Ссылка";
		
		
		ЗапросТовары.УстановитьПараметр("Ссылка", ДокЗаказ);
		ЗапросТовары.УстановитьПараметр("Габариты", СвойствоГабаритныеРазмеры);
		ЗапросТовары.УстановитьПараметр("Производитель", СвойствоПроизводитель);
		//+++ZEZA ЗапросТовары.УстановитьПараметр("ТехОписание", СвойствоТехническоеОписание);		
		
		ТзТовары = ЗапросТовары.Выполнить().Выгрузить();		
		
		Если Не Выборка.Следующий() Тогда
			Продолжить;
		КонецЕсли;				   
		
		Если Не ПервыйДокумент Тогда
			// Все документы нужно выводить на разных страницах.
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;      		
		
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки, с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//ШапкаПостоянная.Параметры.Заполнить(Выборка);
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Организация, Выборка.Дата);
		
		// Области печати
		//ОбластьРисунки = Макет.ПолучитьОбласть("Логотип");
		//Логотип = ОбластьРисунки.Рисунки[0];
		КартинкаЛоготип = АК_ОбщегоНазначения.ПолучитьФайлЛоготипа(Выборка.Организация);//Логотип.Картинка;
		
		СведенияОКонтрагенте = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Партнер, Выборка.Дата);
		
		// Шапка
		ШапкаПостояннаяПараметры = Новый Структура;
		
		ШапкаПостояннаяПараметры.Вставить("ОПФОрганизации", ВРЕГ("Общество с ограниченной ответственностью"));
		ШапкаПостояннаяПараметры.Вставить("АдресОрганизации", СведенияОбОрганизации.ЮридическийАдрес);
		ШапкаПостояннаяПараметры.Вставить("ТелефоныОрганизации", "тел/факс: " + СведенияОбОрганизации.Телефоны + " info@teragroup.ru www.teragroup.ru");		
		ШапкаПостояннаяПараметры.Вставить("Заказчик", "Заказчик: " + ?(ЗначениеЗаполнено(Выборка.Заказчик.НаименованиеПолное), Выборка.Заказчик.НаименованиеПолное, Выборка.Заказчик.Наименование));
		ШапкаПостояннаяПараметры.Вставить("АдресЗаказчика", "Адрес: " + Выборка.АдресЗаказчика);
		ШапкаПостояннаяПараметры.Вставить("КонтактноеЛицоЗаказчика", "Контактное лицо (Ф.И.О.), должность: " + Выборка.КонтактноеЛицоЗаказчика);
		ШапкаПостояннаяПараметры.Вставить("ТелефоныКЛЗаказчика", "Телефон, факс, e-mail: " 
		+ УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Выборка.КонтактноеЛицоЗаказчика, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица)
		+ " " + УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Выборка.КонтактноеЛицоЗаказчика, Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица));
		
		ШапкаПостоянная.Параметры.Заполнить(ШапкаПостояннаяПараметры);
		
		
		//ШапкаПостоянная.Параметры.КонтактноеЛицоДолжность = Строка(Выборка.КонтактноеЛицоИсполнителя) + ", " + Строка(Выборка.КонтактноеЛицоДолжность);		
		ШапкаПостоянная.Параметры.НомерЗаявки = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДокЗаказ.Номер, "");		
		ШапкаПостоянная.Параметры.Число = Формат(ДокЗаказ.Дата, "ДФ = дд");
		МесяцСтрокой = ВрегПоПервым(ПадежП(Формат(ДокЗаказ.Дата, "ДФ = ММММ"), 2, 0));		
		ШапкаПостоянная.Параметры.Месяц = МесяцСтрокой;
		ШапкаПостоянная.Параметры.Год = Формат(ДокЗаказ.Дата, "ДФ = гггг");
		
		ТабличныйДокумент.Вывести(ШапкаПостоянная); 		
		
		// Получим переменные столбцы
		ЗапросСвойств = Новый Запрос;
		ЗапросСвойств.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НоменклатураДополнительныеРеквизиты.Свойство,
			|	НоменклатураДополнительныеРеквизиты.Свойство.АК_ПорядокВывода КАК ПорядокВывода2,
			|	ВЫБОР
			|		КОГДА НоменклатураДополнительныеРеквизиты.Свойство.ЭтоДополнительноеСведение
			|			ТОГДА 2
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ПорядокВывода1
			|ИЗ
			|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
			|ГДЕ
			|	НоменклатураДополнительныеРеквизиты.Ссылка В(&НоменклатураДокумента)
			|	И (НЕ НоменклатураДополнительныеРеквизиты.Свойство В (&ПостоянныеСвойства))
			|	И (НЕ НоменклатураДополнительныеРеквизиты.Свойство.ПометкаУдаления)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПорядокВывода1,
			|	ПорядокВывода2";
		
		ЗапросСвойств.УстановитьПараметр("НоменклатураДокумента", ТзТовары.ВыгрузитьКолонку("Номенклатура"));
		ЗапросСвойств.УстановитьПараметр("ПостоянныеСвойства", ПостоянныеСвойства);
		
		ПеременнаяШапка = ЗапросСвойств.Выполнить().Выгрузить(); 		
		
		Для каждого Стр Из ПеременнаяШапка Цикл		
			
			ТабличныйДокумент.Присоединить(ШапкаПеременная);
			
		КонецЦикла; 
		
		ШапкаПримечание.Параметры.ЧислоМонтаж = Формат(ДокЗаказ.ДатаВремя, "ДФ = дд");
		МесяцСтрокой = ВрегПоПервым(ПадежП(Формат(ДокЗаказ.ДатаВремя, "ДФ = ММММ"), 2, 0));		
		ШапкаПримечание.Параметры.МесяцМонтаж = МесяцСтрокой;
		ШапкаПримечание.Параметры.ГодМонтаж = Формат(ДокЗаказ.ДатаВремя, "ДФ = гггг");
		
		ШапкаПримечание.Параметры.Исполнитель = "" + Выборка.ИспОрганизация; //ФИОСИнициаламиВДатПадеже(Строка(Выборка.ИсполнительФИО));		
		ШапкаПримечание.Параметры.ИсполнительКонтактноеЛицо = Выборка.КонтактноеЛицоПартнера;
		
		Мыло = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Выборка.КонтактноеЛицоПартнера, Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица);
		Тел = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Выборка.КонтактноеЛицоПартнера, Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица);
		КонтактыСтрокой = "";
		Если ЗначениеЗаполнено(Тел) Тогда
			КонтактыСтрокой = Строка(Тел);
			
			Если ЗначениеЗаполнено(Мыло) Тогда
				КонтактыСтрокой = КонтактыСтрокой + ", " + Строка(Мыло);
			КонецЕсли;
			
		Иначе
			КонтактыСтрокой = Мыло;
		КонецЕсли;
		
		ШапкаПримечание.Параметры.ТелефонМылоИсполнитель = КонтактыСтрокой;
		
		ТабличныйДокумент.Присоединить(ШапкаПримечание);
		
		// Оформим заголовок по центру
		ШиринаТаблицы = ТабличныйДокумент.ШиринаТаблицы;
		
		// заголовок документа
		ОблЗаголовок = ТабличныйДокумент.Область(НомерСтрокиНачало + 12, 1, НомерСтрокиНачало + 12, ШиринаТаблицы);
		ОблЗаголовок.Объединить();
		ОблЗаголовок1 = ТабличныйДокумент.Область(НомерСтрокиНачало + 4, 1, НомерСтрокиНачало + 4, ШиринаТаблицы);
		ОблЗаголовок1.Объединить();
		ОблЗаголовок2 = ТабличныйДокумент.Область(НомерСтрокиНачало + 5, 1, НомерСтрокиНачало + 5, ШиринаТаблицы);
		ОблЗаголовок2.Объединить();
		ОблЗаголовок3 = ТабличныйДокумент.Область(НомерСтрокиНачало + 6, 1, НомерСтрокиНачало + 6, ШиринаТаблицы);
		ОблЗаголовок3.Объединить();
		ОблЛоготип = ТабличныйДокумент.Область(НомерСтрокиНачало, 1, НомерСтрокиНачало + 5, ШиринаТаблицы);
		ОблЛоготип.Объединить();
		Рис = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		Рис.ГраницаСверху = Ложь;
		Рис.ГраницаСлева = Ложь;
		Рис.ГраницаСнизу = Ложь;
		Рис.ГраницаСправа = Ложь;
		Рис.РазмерКартинки = РазмерКартинки.Пропорционально;
		Индекс = ТабличныйДокумент.Рисунки.Индекс(Рис);
		ТабличныйДокумент.Рисунки[Индекс].Картинка = КартинкаЛоготип;
		ТабличныйДокумент.Рисунки[Индекс].Расположить(ОблЛоготип);
		
		// Шапка таблицы
		ШапкаТаблицыПостояннаяПараметры = Новый Структура;
		ТабличныйДокумент.Вывести(ШапкаТаблицыПостоянная);		
		
		Для каждого Стр Из ПеременнаяШапка Цикл
			
			ШапкаТаблицыПеременная.Параметры.Заполнить(Стр);
			ТабличныйДокумент.Присоединить(ШапкаТаблицыПеременная);
			
		КонецЦикла; 				
		
		ТабличныйДокумент.Присоединить(ШапкаТаблицыПримечание); 		
		
		ИтогоКолвоИзделий = 0;
		НомерПП = 0;
		
		ДЛя каждого СтрТовар из ТзТовары Цикл
			//ОбластьСтрока = Макет.ПолучитьОбласть("Строки");
			
			СтрокиПостоянная = Макет.ПолучитьОбласть("Строки|Постоянная");
			СтрокиПеременная = Макет.ПолучитьОбласть("Строки|Переменная"); 
			СтрокиПримечание = Макет.ПолучитьОбласть("Строки|Примечание");			
			
			НомерПП = НомерПП + 1;
			
			СтрокиПостоянная.Параметры.Номенклатура = СтрТовар.Номенклатура;
			СтрокиПостоянная.Параметры.КолВоИзд = СтрТовар.Количество;
			СтрокиПостоянная.Параметры.Артикул = СтрТовар.Артикул;
			СтрокиПостоянная.Параметры.Код = СтрТовар.Код;
			СтрокиПостоянная.Параметры.НомерСтроки = НомерПП;
			СтрокиПостоянная.Параметры.Габариты = СтрТовар.Габариты;
			СтрокиПостоянная.Параметры.ТехОписание = СтрТовар.ТехОписание;
			СтрокиПостоянная.Параметры.Производитель = СтрТовар.Производитель;
			
			ТабличныйДокумент.Вывести(СтрокиПостоянная);
			
			Для каждого Стр Из ПеременнаяШапка Цикл
				
				СтрокиПеременнаяПараметры = Новый Структура;
				
				СтрокиПеременнаяПараметры.Вставить("ЗначениеСвойства", ПолучитьЗначениеСвойства(СтрТовар.Номенклатура, Стр.Свойство));
				
				СтрокиПеременная.Параметры.Заполнить(СтрокиПеременнаяПараметры);
				ТабличныйДокумент.Присоединить(СтрокиПеременная);
				
			КонецЦикла; 
			
			
			ИтогоКолвоИзделий = ИтогоКолвоИзделий + СтрТовар.Количество;			
			ТабличныйДокумент.Присоединить(СтрокиПримечание);
			
		КонецЦикла;    
		
		ПодвалТаблицыПостоянная.Параметры.ИтогоКолвоИзделий = ИтогоКолвоИзделий;
		
		
		
		ТабличныйДокумент.Вывести(ПодвалТаблицыПостоянная);	
		
		Для каждого Стр Из ПеременнаяШапка Цикл					
			ТабличныйДокумент.Присоединить(ПодвалТаблицыПеременная);					
		КонецЦикла; 
		
		ТабличныйДокумент.Присоединить(ПодвалТаблицыПримечание); 				
		
		// Подвал
		ПодвалПостояннаяПараметры = Новый Структура;
		ПодвалПостояннаяПараметры.Вставить("КонтактноеЛицоОрганизации", "" + Выборка.Менеджер); 
		ПодвалПостояннаяПараметры.Вставить("ДолжностьКЛОрганизации", "Менеджер-проекта");
		ПодвалПостояннаяПараметры.Вставить("Организация", СведенияОбОрганизации.ПолноеНаименование);
		ПодвалПостояннаяПараметры.Вставить("ТелефоныОрганизации", "Тел.: " + СведенияОбОрганизации.Телефоны);
		ПодвалПостояннаяПараметры.Вставить("ТелефоныКЛОрганизации", ""
		+ УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Выборка.Менеджер.ФизическоеЛицо, Справочники.ВидыКонтактнойИнформации.МобильныйТелефонФизическогоЛица));
		ПодвалПостояннаяПараметры.Вставить("ЕмайлОрганизации", ""
		+ УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(Выборка.Организация, Справочники.ВидыКонтактнойИнформации.EmailОрганизации));
		ПодвалПостоянная.Параметры.Заполнить(ПодвалПостояннаяПараметры);
		
		ТабличныйДокумент.Вывести(ПодвалПостоянная);
		
		// В табличном документе необходимо задать имя области, в которую был 
		// выведен объект. Нужно для возможности печати покомплектно 
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
		НомерСтрокиНачало, ОбъектыПечати, ДокЗАказ);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////

//
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм,
	ОбъектыПечати, ПараметрыВывода) Экспорт
	// Устанавливаем признак доступности печати покомплектно.
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНаМонтаж") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ЗаказНаМонтаж", "Заказ на монтаж", ПечатьЗаказаНаМонтаж(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////

//
//
Функция ПолучитьЗначениеСвойства(Номенклатура, Свойство)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Значение КАК ЗначениеСвойства
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Свойство = &Свойство
		|	И НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура";
		
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Резульат = Запрос.Выполнить();
	Если Резульат.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = Резульат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ЗначениеСвойства;
	КонецЕсли;
	
КонецФункции

//
//
Функция ФИОСИнициаламиВДатПадеже(Объект)
	
	ТипОбъекта = ТипЗнч(Объект);

	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект)," ");
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") Или ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(Объект.Наименование)," ");
	Иначе
		
		// используем возможно переданные отдельные строки
		Возврат Объект;
		
	КонецЕсли;
	
	КоличествоПодстрок = ФИО.Количество();
	Фамилия            = ?(КоличествоПодстрок > 0,ФИО[0],"");
	Имя                = ?(КоличествоПодстрок > 1,ФИО[1],"");
	Отчество           = ?(КоличествоПодстрок > 2,ФИО[2],"");
	
	Возврат ?(Не ПустаяСтрока(Фамилия), 
				ВрегПоПервым(ПадежП(Фамилия, 3, 0)) + ?(Не ПустаяСтрока(Имя)," " + Лев(Имя,1) + "." + ?(Не ПустаяСтрока(Отчество),Лев(Отчество,1)+".", ""), ""),
				""); 

	
КонецФункции

//
//
Функция ПадежС(z1,Знач z2=2,Знач z3="*",z4=0) Экспорт
  z5=Найти(z1,"-");
  z6=?(z5=0,"","-"+ПадежС(Сред(z1,z5+1,СтрДлина(z1)-z5+1),z2,z3,z4));
  z1=НРег(?(z5=0,z1,Лев(z1,z5-1)));
  z7=Прав(z1,3);z8=Прав(z7,2);z9=Прав(z8,1);
  z5=СтрДлина(z1);
  za=Найти("ая ия ел ок яц ий па да ца ша ба та га ка",z8);
  zb=Найти("аеёийоуэюяжнгхкчшщ",Лев(z7,1));
  zc=Макс(z2,-z2);
  zd=?(za=4,5,Найти("айяь",z9));
  zd=?((zc=1)или(z9=".")или((z4=2)и(Найти("оиеу"+?(z3="ч","","бвгджзклмнпрстфхцчшщъ"),z9)>0))или((z4=1)и(Найти("мия мяэ лия кия жая лея",z7)>0)),9,?((zd=4)и(z3="ч"),2,?(z4=1,?(Найти("оеиую",z9)+Найти("их ых аа еа ёа иа оа уа ыа эа юа яа",z8)>0,9,?(z3<>"ч",?(za=1,7,?(z9="а",?(za>18,1,6),9)),?(((Найти("ой ый",z8)>0)и(z5>4)и(Прав(z1,4)<>"опой"))или((zb>10)и(za=16)),8,zd))),zd)));
  ze=Найти("лец вей бей дец пец мец нец рец вец аец иец ыец бер",z7);
  zf=?((zd=8)и(zc<>5),?((zb>15)или(Найти("жий ний",z7)>0),"е","о"),?(z1="лев","ьв",?((Найти("аеёийоуэюя",Сред(z1,z5-3 ,1))=0)и((zb>11)или(zb=0))и(ze<>45),"",?(za=7,"л",?(za=10,"к",?(za=13,"йц",?(ze=0,"",?(ze<12,"ь"+?(ze=1,"ц",""),?(ze<37,"ц",?(ze<49,"йц","р"))))))))));
//  zf=?((zd=9)или((z4=3)и(z3="ы")),z1,Лев(z1,z5-?((zd>6)или(zf<>""),2,?(zd>0,1,0)))+zf+СокрП(Сред("а у а "+Сред("оыые",Найти("внч",z9)+1,1)+"ме "+?(Найти("гжкхш",Лев(z8,1))>0,"и","ы")+" е у ойе я ю я ем"+?(za=16,"и","е")+" и е ю ейе и и ь ьюи и и ю ейи ойойу ойойойойуюойойгомуго"+?((zf="е")или(za=16)или((zb>12)и(zb<16)),"и","ы")+"мм",10*zd+2*zc-3,2)));
  zf=?((zd=9)или((z4=3)и(Прав(z1,1)="ы")),z1,Лев(z1,z5-?((zd>6)или(zf<>""),2,?(zd>0,1,0)))+zf+СокрП(Сред("а у а "+Сред("оыые",Найти("внч",z9)+1,1)+"ме "+?(Найти("гжкхш",Лев(z8,1))>0,"и","ы")+" е у ойе я ю я ем"+?(za=16,"и","е")+" и е ю ейе и и ь ьюи и и ю ейи ойойу ойойойойуюойойгомуго"+?((zf="е")или(za=16)или((zb>12)и(zb<16)),"и","ы")+"мм",10*zd+2*zc-3,2)));
Возврат ?(""=z1,"",?(z4>0,ВРег(Лев(zf,1))+?((z2<0)и(z4>1),".",Сред(zf,2)),zf)+z6);
КонецФункции

//
//
Функция ПадежП(Знач z1,Знач z2,z3=0) Экспорт
		
  z1=СокрЛП(z1);z4=Найти(z1+" "," ")+1;z5=Лев(z1,z4-2);z6=Прав(z5,2);
  z7=?((Найти("ая ий ый",z6)>0)и(Найти("ющий нный",Сред(z1,z4-5,4))=0)и(z3=0),"1","*");
Возврат НРег(?((z6="ая")или(Прав(z6,1)="а"),ПадежС(z5,z2,z7,1)+" "+ПадежС(Сред(z1,z4),z2),ПадежС(z5,z2,"ч",1)+?((z6="ий")и(Найти(z1," ")=0),""," "+?(z7="1",ПадежП(Сред(z1,z4),z2,Число(z7)),Сред(z1,z4)))));
КонецФункции

//
//
Функция ВрегПоПервым(Переменная)
	
	Попытка
		Тмп = Лев(Переменная, 1);
	    Остаток = Сред(Переменная, 2, СтрДлина(Переменная) - 1);
		
		СтрДляВозврата =  Врег(Тмп) + Остаток;
		
		Возврат СтрДляВозврата;
	Исключение
		Возврат Переменная;
	КонецПопытки;
	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////

//
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт

	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	//
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата КАК Период,
	|	ДанныеШапки.Партнер КАК Партнер,
	|	ДанныеШапки.Организация КАК Организация,
	|	ДанныеШапки.Ссылка КАК ЗаказНаДоставку
	|ИЗ
	|	Документ.АК_ЗаказНаМонтаж КАК ДанныеШапки
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	//
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
    //
	Запрос.УстановитьПараметр("Период",          Реквизиты.Период);
	Запрос.УстановитьПараметр("ЗаказНаДоставку", Реквизиты.ЗаказНаДоставку);
	Запрос.УстановитьПараметр("Период",          Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация",     Реквизиты.Организация);
	
	//
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	

	//+++АК
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	&Период КАК Период,
	               |	&Ссылка КАК Регистратор,
	               |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	               |	Таблица.ЗаказКлиента КАК ЗаказКлиента,
	               |	Таблица.Номенклатура КАК Номенклатура,
	               |	Таблица.Характеристика КАК Характеристика,
	               |	Таблица.ЗаказКлиентаКодСтроки КАК КодСтроки,
	               |	АК_ЗаказыКлиентовРазмещениеОстаткиИОбороты.ЗаказПоставщику КАК ЗаказПоставщику,
	               |	0 КАК НеЗаказаноУПоставщика,
	               |	ВЫБОР
	               |		КОГДА Таблица.Количество > ЕСТЬNULL(АК_ЗаказыКлиентовРазмещениеОстаткиИОбороты.НеЗаказанМонтажОстаток, 0)
	               |			ТОГДА ЕСТЬNULL(АК_ЗаказыКлиентовРазмещениеОстаткиИОбороты.НеЗаказанМонтажОстаток, 0)
	               |		ИНАЧЕ Таблица.Количество
	               |	КОНЕЦ КАК НеЗаказанМонтаж
	               |ПОМЕСТИТЬ ТЗ
	               |ИЗ
	               |	Документ.АК_ЗаказНаМонтаж.Товары КАК Таблица
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.АК_ЗаказыКлиентовРазмещение.Остатки(&Период, ) КАК АК_ЗаказыКлиентовРазмещениеОстаткиИОбороты
	               |		ПО Таблица.ЗаказКлиента = АК_ЗаказыКлиентовРазмещениеОстаткиИОбороты.ЗаказКлиента
	               |			И Таблица.Номенклатура = АК_ЗаказыКлиентовРазмещениеОстаткиИОбороты.Номенклатура
	               |			И Таблица.ЗаказКлиентаКодСтроки = АК_ЗаказыКлиентовРазмещениеОстаткиИОбороты.КодСтроки
	               |			И (АК_ЗаказыКлиентовРазмещениеОстаткиИОбороты.НеЗаказанМонтажОстаток > 0)
	               |ГДЕ
	               |	Таблица.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТЗ.Период,
	               |	ТЗ.Регистратор,
	               |	ТЗ.ВидДвижения КАК ВидДвижения,
	               |	ТЗ.ЗаказКлиента,
	               |	ТЗ.Номенклатура,
	               |	ТЗ.Характеристика,
	               |	ТЗ.КодСтроки,
	               |	ТЗ.ЗаказПоставщику,
	               |	СУММА(ТЗ.НеЗаказанМонтаж) КАК НеЗаказанМонтаж
	               |ИЗ
	               |	ТЗ КАК ТЗ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТЗ.Период,
	               |	ТЗ.Регистратор,
	               |	ТЗ.ЗаказКлиента,
	               |	ТЗ.Номенклатура,
	               |	ТЗ.Характеристика,
	               |	ТЗ.КодСтроки,
	               |	ТЗ.ЗаказПоставщику,
	               |	ТЗ.ВидДвижения
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВидДвижения УБЫВ,
	               |	ТЗ.КодСтроки";
				   
	//
	Результат = Запрос.Выполнить();
	
	//
	ТаблицыДляДвижений.Вставить("ТаблицаЗаказыКлиентовРазмещение", Результат.Выгрузить());
	
	//---АК
	
КонецПроцедуры

