&НаКлиенте
Перем КэшированныеЗначения; // используется механизмом обработки изменения реквизитов ТЧ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма); // Обработчик подсистемы "ВерсионированиеОбъектов"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма); // Обработчик подсистемы "Внешние обработки"
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере(Объект);
	КонецЕсли;
	
	// Подсистема "ЭлектронныеДокументы"
	УстановитьТекстСостоянияЭДНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере(ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборТоваровМеждуОрганизациями" Тогда
		ПолучитьТоварыИзХранилища(ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыЗапасов.Форма.ФормаВводаВидовЗапасов" Тогда	
		Объект.ВидыЗапасовПолучателяУказаныВручную = (ИсточникВыбора.ВидыЗапасовУказаныВручную = Истина);
		ПолучитьВидыЗапасовИзХранилища(ВыбранноеЗначение, "ВидыЗапасовПолучателя");
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		ПолучитьРасшифровкуПлатежаИзХранилища(ВыбранноеЗначение.АдресПлатежейВХранилище);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокумента"
	 ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаСписка" Тогда
	 	НастроитьОтображениеРеквизитовСчетаФактурыВыданного(ЭтаФорма, ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокумента"
	 ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСписка" Тогда
	 	НастроитьОтображениеРеквизитовСчетаФактурыПолученного(ЭтаФорма, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	// Подсистема "ЭлектронныеДокументы"
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ПредъявленСчетФактура И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ДанныеСчетаФактуры",
			ЗакупкиСервер.ДанныеСчетаФактурыСтруктурой(
				Неопределено,
				ТекущийОбъект.ОрганизацияПолучатель,
				?(ТекущийОбъект.РасчетыЧерезОтдельногоКонтрагента,
					ТекущийОбъект.Контрагент,
					ТекущийОбъект.Организация
				),
				ТекущийОбъект.НомерСчетаФактуры,
				ТекущийОбъект.ДатаСчетаФактуры,
				ТекущийОбъект.ВалютаСчетаФактуры
			)
		);
		ТекущийОбъект.ПредъявленСчетФактура = Ложь;
	Иначе
		ПараметрыЗаписи.Вставить("ДанныеСчетаФактуры", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЗаполнитьПрочиеДанныеФормы();
	ЗаполнитьДополнительныеПризнакиТоваров();
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
	 И ПараметрыЗаписи.ДанныеСчетаФактуры <> Неопределено Тогда
		
		НеТребуетсяВводСчетаФактуры = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями);
		ДанныеСчетаФактуры = ЗакупкиСервер.ДанныеСчетаФактурыСтруктурой(
			ТекущийОбъект.Ссылка,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Организация,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Контрагент,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Номер,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Дата,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Валюта
		);
		НастроитьОтображениеРеквизитовСчетаФактурыПолученного(
			ЭтаФорма,
			ЗакупкиСервер.ВвестиСчетФактуру(ДанныеСчетаФактуры, Истина, НеТребуетсяВводСчетаФактуры)
		);
		
	КонецЕсли;
	
	// Подсистема "ЭлектронныеДокументы"
	УстановитьТекстСостоянияЭДНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ВозвратТоваровМеждуОрганизациями",ПараметрыЗаписи,Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПолучательПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
		ОрганизацияПолучательПриИзмененииСервер();
	КонецЕсли;
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Валюта) И ВалютаДокумента<>Объект.Валюта И Объект.Товары.Количество()>0 Тогда
		ВалютаПриИзмененииСервер(Объект.Валюта);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента,Объект.Валюта);
	КонецЕсли;
	ВалютаДокумента = Объект.Валюта;
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ВидЦены) И Объект.Товары.Количество()>0 Тогда
		ДиалогОтвет = Вопрос(НСтр("ru = 'Перезаполнить цены в табличной части документа?'"),РежимДиалогаВопрос.ДаНет);
		Если ДиалогОтвет = КодВозвратаДиалога.Да Тогда
			ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(Объект.ВидЦены);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, Объект.ВидЦены);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументПоступленияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ДокументПоступления) Тогда
		ДокументПоступленияПриИзмененииСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	ПартнерПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПродажиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект.Организация, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСчетовФактурНажатие(Элемент)
	
	СтруктураОтбор = Новый Структура("ДокументОснование, Организация, ПометкаУдаления", Объект.Ссылка, Объект.Организация, Ложь);
	
	ОткрытьФорму(
		"Документ.СчетФактураВыданный.ФормаСписка",
		Новый Структура("Отбор", СтруктураОтбор),
		ЭтаФорма
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураПосредникаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗакупкиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект.ОрганизацияПолучатель, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСчетовФактурПосредникаНажатие(Элемент)
	
	СтруктураОтбор = Новый Структура("ДокументОснование, Организация, Проведен", Объект.Ссылка, Объект.ОрганизацияПолучатель, Истина);
	
	ОткрытьФорму(
		"Документ.СчетФактураПолученный.ФормаСписка",
		Новый Структура("Отбор", СтруктураОтбор),
		ЭтаФорма
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредъявленСчетФактураПриИзменении(Элемент)
	
	НастроитьОтображениеРеквизитовСчетаФактурыПолученного(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыЧерезОтдельногоКонтрагентаПриИзменении(Элемент)
	НастроитьЭлементыПосредника();
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	Объект.ВидыЗапасовПолучателяУказаныВручную = Объект.ВидыЗапасовПолучателяУказаныВручную И ИзмененияВидовЗапасовПолучателяРазрешены();
	ХозяйственнаяОперацияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	НалогообложениеНДСПриИзмененииСервер();
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
КонецПроцедуры

&НаКлиенте
Процедура ПоТоварамКОформлениюПриИзменении(Элемент)
	Объект.ВидыЗапасовПолучателяУказаныВручную = Объект.ВидыЗапасовПолучателяУказаныВручную И ИзмененияВидовЗапасовПолучателяРазрешены();
	НастроитьЭлементыКомандЗаполнения();
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Уникальность", Объект.Ссылка.УникальныйИдентификатор());
	ПараметрыОткрытия.Вставить("Источник", ЭтаФорма);
	ПараметрыОткрытия.Вставить("Окно", ЭтаФорма.Окно);
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Объект.Ссылка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПриИзмененииСервер();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Поле = Элементы.ТоварыЦена
	 И ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
		
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Для редактирования цены необходимо выбрать вид цены ""<произвольная>""'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),
		);
	ИначеЕсли Поле = Элементы.ТоварыСумма
	 И ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
	 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Для редактирования суммы необходимо выбрать вид цены ""<произвольная>""'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),
		);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		Элементы.Товары.ТекущиеДанные.ВидЦены = Объект.ВидЦены;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект,Объект.Товары.Итог("СуммаСНДС"));
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект,Объект.Товары.Итог("СуммаСНДС"));
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
    ДействияЦены = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект);
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	Действия = Новый Структура;
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
    Действия.Вставить("ПроверитьХарактеристикуПоВладельцу",ТекущаяСтрока.Характеристика);
    Действия.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу",ТекущаяСтрока.Упаковка);
    Действия.Вставить("ЗаполнитьСтавкуНДС",Объект.НалогообложениеНДС);
    Действия.Вставить("ПересчитатьКоличествоЕдиниц");
    Действия.Вставить("ЗаполнитьЦенуПродажи",ДействияЦены);
    
	Действия.Вставить("ПересчитатьСумму");
	Действия.Вставить("ПересчитатьСуммуНДС",ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС",ДействияПересчетНДС);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
    ДействияЦены = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект);
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	Действия = Новый Структура;
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
    Действия.Вставить("ЗаполнитьЦенуПродажи",ДействияЦены);
    
	Действия.Вставить("ПересчитатьСумму");
	Действия.Вставить("ПересчитатьСуммуНДС",ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС",ДействияПересчетНДС);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
    ДействияЦены = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект);
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	Действия = Новый Структура;
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
    Действия.Вставить("ПересчитатьКоличествоЕдиниц");
    Если ТекущаяСтрока.Количество > 0 Тогда
        Действия.Вставить("ПересчитатьЦенуЗаУпаковку",ТекущаяСтрока.Количество);
    ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
        Действия.Вставить("ЗаполнитьЦенуПродажи",ДействияЦены);
    КонецЕсли;
    
	Действия.Вставить("ПересчитатьСумму");
	Действия.Вставить("ПересчитатьСуммуНДС",ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС",ДействияПересчетНДС);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
    ДействияЦены = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект);
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	Действия = Новый Структура;
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
	Действия.Вставить("ЗаполнитьЦенуПродажи",ДействияЦены);
    
	Действия.Вставить("ПересчитатьСумму");
	Действия.Вставить("ПересчитатьСуммуНДС",ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС",ДействияПересчетНДС);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	Действия = Новый Структура;
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) И ТекущаяСтрока.Цена<>0 Тогда
		ТекущаяСтрока.ВидЦены = Неопределено;
	КонецЕсли;
    
	Действия.Вставить("ПересчитатьСумму");
	Действия.Вставить("ПересчитатьСуммуНДС",ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС",ДействияПересчетНДС);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	Действия = Новый Структура;
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
    
	Действия.Вставить("ПересчитатьСумму");
	Действия.Вставить("ПересчитатьСуммуНДС",ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС",ДействияПересчетНДС);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	Действия = Новый Структура;
    ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	Действия.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах");

	Действия.Вставить("ПересчитатьСуммуНДС",ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС",ДействияПересчетНДС);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, Действия, КэшированныеЗначения);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ РАСШИФРОВКА ПЛАТЕЖА

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если НоваяСтрока И Не Копирование Тогда
		СтрокаТаблицы.Сумма = Объект.Товары.Итог("СуммаСНДС")-Объект.РасшифровкаПлатежа.Итог("Сумма");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(
		Объект.Организация,
		?(Объект.РасчетыЧерезОтдельногоКонтрагента,Объект.Партнер,Неопределено),
		?(Объект.РасчетыЧерезОтдельногоКонтрагента,Объект.Контрагент,Объект.ОрганизацияПолучатель),
		Неопределено, // Соглашение,
		Ложь, // ЭтоРасчетыСКлиентами
		Ложь, // ВыборОснованияПлатежа
		Элемент,
		СтандартнаяОбработка
	);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры // РасшифровкаПлатежаЗаказОбработкаВыбора()

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПриИзменении(Элемент)
	Элементы.РасшифровкаПлатежа.ТекущиеДанные.СуммаВзаиморасчетов = 0;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВалютаВзаиморасчетовПриИзменении(Элемент)
	Элементы.РасшифровкаПлатежа.ТекущиеДанные.СуммаВзаиморасчетов = 0;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВидыЗапасовОтправителя(Команда)
	Перем АдресТоваровВХранилище;
	Перем АдресВидовЗапасовВХранилище;
	ПоместитьТоварыИВидыЗапасовВХранилище(АдресТоваровВХранилище,АдресВидовЗапасовВХранилище,"ВидыЗапасов");
	ФинансыКлиент.ОткрытьВидыЗапасов(Объект,АдресТоваровВХранилище,АдресВидовЗапасовВХранилище,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВидыЗапасовПолучателя(Команда)
	Перем АдресТоваровВХранилище;
	Перем АдресВидовЗапасовВХранилище;
	
	ИзмененияВидовЗапасовПолучателяРазрешены = ИзмененияВидовЗапасовПолучателяРазрешены();
	Если ИзмененияВидовЗапасовПолучателяРазрешены Тогда
		ЗаблокироватьДанныеФормыДляРедактирования();
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
	ПоместитьТоварыИВидыЗапасовВХранилище(АдресТоваровВХранилище,АдресВидовЗапасовВХранилище,"ВидыЗапасовПолучателя");
	ПараметрыФормы = Новый Структура("
		|АдресТоваровВХранилище, АдресВидовЗапасовВХранилище, Организация, Склад, ЦенаВключаетНДС,
		|РедактироватьВидыЗапасов, ДокументМодифицирован,
		|ВидыЗапасовУказаныВручную",
		АдресТоваровВХранилище, АдресВидовЗапасовВХранилище, Объект.ОрганизацияПолучатель, Неопределено, Объект.ЦенаВключаетНДС,
		ИзмененияВидовЗапасовПолучателяРазрешены, (ЭтаФорма.Модифицированность И Не ИзмененияВидовЗапасовПолучателяРазрешены),
		Объект.ВидыЗапасовПолучателяУказаныВручную);
	ОткрытьФорму("Справочник.ВидыЗапасов.Форма.ФормаВводаВидовЗапасов", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамОтправителя(Команда)
	СтруктураРеквизитов = Новый Структура("Организация, ОрганизацияПолучатель, Склад", "Отправитель", "Получатель");
	Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтаФорма, Неопределено, СтруктураРеквизитов) Тогда
		АдресВХранилище = ПоместитьТоварыВХранилище();
		ПараметрыПодбора = Новый Структура(
			"АдресВХранилище, Организация, Склад, Дата, ОрганизацияПолучатель, ЭтоКомиссия, ЭтоПродажа",
			АдресВХранилище, Объект.Организация, Объект.Склад, Объект.Дата, Объект.ОрганизацияПолучатель, ЭтоКомиссия, ЭтоПродажа
		);
		ОткрытьФорму("ОбщаяФорма.ПодборТоваровМеждуОрганизациями", ПараметрыПодбора, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамПолучателя(Команда)
	СтруктураРеквизитов = Новый Структура("Организация, ОрганизацияПолучатель, Склад", "Отправитель", "Получатель");
	Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтаФорма, Неопределено, СтруктураРеквизитов) Тогда
		АдресВХранилище = ПоместитьТоварыВХранилище();
		ПараметрыПодбора = Новый Структура("
			|АдресВХранилище, Организация, ОрганизацияПолучатель, Склад, Дата, ОтрицательныеОстатки",
			АдресВХранилище, Объект.Организация, Объект.ОрганизацияПолучатель, Объект.Склад, Объект.Дата, Истина
		);
		ОткрытьФорму("ОбщаяФорма.ПодборТоваровМеждуОрганизациями", ПараметрыПодбора,  ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамКВозврату(Команда)
	СтруктураРеквизитов = Новый Структура("Организация, ОрганизацияПолучатель, Склад", "Отправитель", "Получатель");
	Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтаФорма, Неопределено, СтруктураРеквизитов) Тогда
		ЗаполнитьПоОстаткамКВозвратуСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", "Товары") Тогда
		ВидЦенЗаполнения = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, , Истина);
		Если ЗначениеЗаполнено(ВидЦенЗаполнения) Тогда
			ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦенЗаполнения);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦенЗаполнения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)
	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", "Товары") Тогда
		ВидЦенЗаполнения = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, , Истина);
		Если ЗначениеЗаполнено(ВидЦенЗаполнения) Тогда
			ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦенЗаполнения, Элементы.Товары.ВыделенныеСтроки);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦенЗаполнения);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткамВзаиморасчетов(Команда)
	
	СтруктураРеквизитов = Новый Структура("Организация, Валюта, ХозяйственнаяОперация", "Отправитель", "Валюта", "Операция");
	Если Объект.РасчетыЧерезОтдельногоКонтрагента Тогда	
		СтруктураРеквизитов.Вставить("Партнер","Партнер");
		СтруктураРеквизитов.Вставить("Контрагент","Контрагент");
	Иначе
		СтруктураРеквизитов.Вставить("ОрганизацияПолучатель","Получатель");
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтаФорма, Неопределено, СтруктураРеквизитов) Тогда
		АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
		ПараметрыПодбора = Новый Структура("
			|АдресПлатежейВХранилище, Организация,
			|Партнер, Контрагент,
			|Валюта, СуммаДокумента, ДатаДокумента, ХозяйственнаяОперация",
			АдресПлатежейВХранилище, Объект.Организация, 
			?(Объект.РасчетыЧерезОтдельногоКонтрагента, Объект.Партнер, Неопределено),
			?(Объект.РасчетыЧерезОтдельногоКонтрагента, Объект.Контрагент, Объект.ОрганизацияПолучатель),
			Объект.Валюта, Объект.Товары.Итог("СуммаСНДС"), Объект.Дата, Объект.ХозяйственнаяОперация
		);
		ОткрытьФорму("ОбщаяФорма.ПодборПоРасчетамСПартнерами", ПараметрыПодбора, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	Перем ТекущаяСтрока;
	
	ВесНоменклатуры = МенеджерОборудованияКлиент.ПолучитьДанныеИзВесов(ЭтаФорма, ТекущаяСтрока);
	
	Если ВесНоменклатуры <> Неопределено Тогда
		
		ТекущаяСтрока.КоличествоУпаковок = ВесНоменклатуры;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);	
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументе(Команда)
	
	ПараметрыОткрытия = Новый Структура("АдресВоВременномХранилище, ПревышениеКоличестваТоваровРазрешено", ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества(), Истина);
	ВозвращаемыеПараметры = ОткрытьФормуМодально("ОбщаяФорма.ПроверкаЗаполненияДокументов", ПараметрыОткрытия);
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, ?(КэшированныеЗначения = Неопределено, ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения(), КэшированныеЗначения));
		Модифицированность = Истина;
		
		ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкодуВыполнить()

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы);
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);					
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиИсправлениеСчетаФактуры(Команда)
	
	ПродажиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект.Организация, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиИсправлениеСчетаФактурыПосредника(Команда)
	
	ЗакупкиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект.ОрганизацияПолучатель, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатиТОРГ12(Элемент)
	
	ОткрытьРеквизитыПечатиРеализации(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент);
КонецПроцедуры

&НаСервере
Процедура ДокументПоступленияПриИзмененииСервер()
	Документы.ВозвратТоваровМеждуОрганизациями.ЗаполнитьПоПередачеТоваров(Объект,Объект.ДокументПоступления);
	НастроитьЭлементыПосредника();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПолучательПриИзмененииСервер()
	
	Объект.БанковскийСчетОрганизацииПолучателя = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.ОрганизацияПолучатель);
	Объект.АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Объект.ОрганизацияПолучатель,"Юридический");
	НовоеНалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(Объект.ОрганизацияПолучатель,Неопределено,Объект.Дата);
	Если НовоеНалогообложениеНДС <> Объект.НалогообложениеНДС Тогда
		Объект.НалогообложениеНДС = НовоеНалогообложениеНДС;
		НалогообложениеНДСПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	Объект.БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация);
	
	НеТребуетсяВводСчетаФактуры = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями);
	НастроитьОтображениеРеквизитовСчетаФактурыВыданного(
		ЭтаФорма,
		ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация, НеТребуетсяВводСчетаФактуры)
	);
	НастроитьОтображениеРеквизитовСчетаФактурыПолученного(
		ЭтаФорма,
		ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.ОрганизацияПолучатель, НеТребуетсяВводСчетаФактуры)
	);
	
	УстановитьПараметрыВыбораОрганизацииПолучателя();
	ПроверитьИОчиститьОрганизациюПолучатель();
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер(ВалютаНовая)
	
	КурсыСтарые = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента,Объект.Дата);
	КурсыНовые  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаНовая,Объект.Дата);
	
	Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(Объект.Товары,Объект.ЦенаВключаетНДС,ВалютаДокумента,ВалютаНовая,КурсыСтарые,КурсыНовые);
	ВзаиморасчетыСервер.ПересчитатьСуммыВВалютуРасшифровкаПлатежа(Объект,Объект.Товары.Итог("СуммаСНДС"));
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(Объект.Валюта,Элементы);
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер()
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	Действия = Новый Структура();
	Действия.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	Действия.Вставить("ПересчитатьСуммуНДС", ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС", ДействияПересчетНДС);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, Действия, Неопределено);
	НастроитьИтогиФормы(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	ДействияПересчетНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	Действия = Новый Структура;
	Действия.Вставить("ПересчитатьСуммуНДС", ДействияПересчетНДС);
	Действия.Вставить("ПересчитатьСуммуСНДС", ДействияПересчетНДС);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, Действия, КэшированныеЗначения);
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииСервер()
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер,Объект.Контрагент);
	Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент);
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	НеТребуетсяВводСчетаФактуры = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями);
	НастроитьОтображениеРеквизитовСчетаФактурыВыданного(
		ЭтаФорма,
		ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация, НеТребуетсяВводСчетаФактуры)
	);
	НастроитьОтображениеРеквизитовСчетаФактурыПолученного(
		ЭтаФорма,
		ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.ОрганизацияПолучатель, НеТребуетсяВводСчетаФактуры)
	);
	
	
	ЗаполнитьПрочиеДанныеФормы();
	НастроитьЭлементыВзаиморасчетов();
	НастроитьЭлементыКомандЗаполнения();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
    СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",СтруктураПересчетаСуммы);
КонецФункции

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ПриИзмененииСкладаСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подборы и обработка проверки количества

&НаСервере
Процедура ПоместитьТоварыИВидыЗапасовВХранилище(АдресТоваровВХранилище, АдресВидовЗапасовВХранилище, НазваниеТЧВидовЗапасов)
	ЗапасыСервер.ПоместитьТоварыИВидыЗапасовВХранилище(
		Объект.Товары,Объект[НазваниеТЧВидовЗапасов],УникальныйИдентификатор,
		АдресТоваровВХранилище,АдресВидовЗапасовВХранилище
	);
КонецПроцедуры 

&НаСервере
Функция ПоместитьТоварыВХранилище()
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, Количество"),УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресВХранилище)
	
	Объект.Товары.Загрузить(ПолучитьИзВременногоХранилища(АдресВХранилище));
	
	КэшированныеЗначения = Неопределено;
	Действия = Новый Структура("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, Действия, КэшированныеЗначения);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, ВидЦены, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			Объект.ВидЦены,
			"Цена, ВидЦены"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы
		)
	);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"))
	);

КонецПроцедуры // ПолучитьТоварыИзХранилища()

&НаСервере
Процедура ПолучитьВидыЗапасовИзХранилища(АдресВХранилище, НазваниеТЧВидовЗапасов)
	Объект[НазваниеТЧВидовЗапасов].Загрузить(ПолучитьИзВременногоХранилища(АдресВХранилище));
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище()
	Возврат ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(Объект.РасшифровкаПлатежа, УникальныйИдентификатор);
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаИзХранилища(АдресВХранилище)
	Объект.РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(АдресВХранилище));
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества()
	
	ТабличнаяЧастьТовары = Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок");
	ТабличнаяЧастьТовары.Свернуть("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка", "КоличествоУпаковок");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличнаяЧастьТовары, УникальныйИдентификатор);
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, КэшированныеЗначения)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(ВозвращаемыеПараметры.Товары);
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаИсточник Из ТаблицаТовары Цикл
		
		Отбор = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			Если СтрокаИсточник.КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаИсточник.КоличествоУпаковок >= 0 Тогда
				
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + СтрокаИсточник.КоличествоУпаковок;
				СтрокаИсточник.КоличествоУпаковок = 0;
				
			Иначе
				
				КоличествоКСписанию = -СтрокаИсточник.КоличествоУпаковок;
				КоличествоВСтроке   = СтрокаТЧ.КоличествоУпаковок;
				
				Если КоличествоКСписанию > КоличествоВСтроке Тогда
					СтрокаИсточник.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
					СтрокаТЧ.КоличествоУпаковок       = 0;
				Иначе
					СтрокаИсточник.КоличествоУпаковок = 0;
					СтрокаТЧ.КоличествоУпаковок       = КоличествоВСтроке - КоличествоКСписанию;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаТЧ);
			Иначе
				
				СтруктураДействий = Новый Структура;
				ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаИсточник);
			
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
			СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого СтрокаТЧ Из УдаляемыеСтроки Цикл
		Объект.Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС",   Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками,Объект);	

	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);	

	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = Неопределено;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ЭлектронныеДокументы"

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере(ТекущийОбъект)
	
	ВалютаДокумента = Объект.Валюта;
	ЗаполнитьПрочиеДанныеФормы();
	ЗаполнитьДополнительныеПризнакиТоваров();
	НастроитьЭлементыПосредника();
	НастроитьЭлементыКомандЗаполнения();
	НастроитьЭлементыВзаиморасчетов();
	УстановитьПараметрыВыбораОрганизацииПолучателя();
	
	ПроверитьИОчиститьОрганизациюПолучатель();
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	НеТребуетсяВводСчетаФактуры = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями);
	НастроитьОтображениеРеквизитовСчетаФактурыВыданного(
		ЭтаФорма,
		ПродажиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация, НеТребуетсяВводСчетаФактуры)
	);
	НастроитьОтображениеРеквизитовСчетаФактурыПолученного(
		ЭтаФорма,
		ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.ОрганизацияПолучатель, НеТребуетсяВводСчетаФактуры)
	);
	
	НастроитьИтогиФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыПосредника()
	Элементы.Партнер.Доступность = Объект.РасчетыЧерезОтдельногоКонтрагента;
	Элементы.Контрагент.Доступность = Объект.РасчетыЧерезОтдельногоКонтрагента;
	Элементы.НомерВходящегоДокумента.Доступность = Объект.РасчетыЧерезОтдельногоКонтрагента;
	Элементы.ДатаВходящегоДокумента.Доступность = Объект.РасчетыЧерезОтдельногоКонтрагента;
	Элементы.СтраницаПосредник.Видимость = Объект.РасчетыЧерезОтдельногоКонтрагента;
	Элементы.ГруппаСтраницыСчетФактураПосредника.Видимость = Объект.РасчетыЧерезОтдельногоКонтрагента;
	Если Не Объект.РасчетыЧерезОтдельногоКонтрагента Тогда
		Объект.ПредъявленСчетФактура = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыКомандЗаполнения()
	ПоОстаткам = Не Объект.ПоТоварамКОформлению;
	Элементы.ТоварыПодборПоОстаткамОтправителя.Видимость = ПоОстаткам;
	Элементы.ТоварыПодборПоОстаткамПолучателя.Видимость = ПоОстаткам;
	Элементы.ТоварыЗаполнитьПоОстаткамКВозврату.Видимость = Объект.ПоТоварамКОформлению;
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыВзаиморасчетов()
	Элементы.РасшифровкаПлатежа.ТолькоПросмотр = Не ЭтоПродажа И ЭтоКомиссия;
	Элементы.РасшифровкаПлатежаПодборПоОстаткам.Доступность = ЭтоПродажа И Не ЭтоКомиссия;
	Элементы.СтраницаВзаиморасчеты.Видимость = ЭтоПродажа И Не ЭтоКомиссия;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьИтогиФормы(Форма)

	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрочиеДанныеФормы()
	ЭтоКомиссия = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями);
	ЭтоПродажа = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеПризнакиТоваров()
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",Новый Структура("Номенклатура","ХарактеристикиИспользуются"))
	);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦенЗаполнения, Знач ВыделенныеСтроки = Неопределено)
	
	МассивСтрок = Неопределено;
	
	Если ЗначениеЗаполнено(ВыделенныеСтроки) Тогда
		
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(Строка);
			Если СтрокаТЧ <> Неопределено Тогда
				МассивСтрок.Добавить(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
		Если МассивСтрок.Количество() = 0 Тогда
			МассивСтрок = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, ВидЦены, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			ВидЦенЗаполнения,
			"Цена, ВидЦены"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы
		)
	);
	
	Возврат ЦеныРассчитаны;
КонецФункции

&НаСервере
Процедура ЗаполнитьПоОстаткамКВозвратуСервер()
	Документы.ВозвратТоваровМеждуОрганизациями.ЗаполнитьТоварыПоОстаткамКВозврату(Объект);
	Документы.ВозвратТоваровМеждуОрганизациями.ЗаполнитьНалогобложениеИЦеныПоУмолчанию(Объект);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",Новый Структура("Номенклатура", "ХарактеристикиИспользуются"))
	);
КонецПроцедуры

&НаКлиенте
Функция ИзмененияВидовЗапасовПолучателяРазрешены()
	// Дублирование метода с методом объекта сознательное
	Возврат Не Объект.ПоТоварамКОформлению И ЭтоПродажа;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеРеквизитовСчетаФактурыВыданного(Форма, ПараметрыПредставления)
	
	Форма.ТекстСчетФактура = ПараметрыПредставления.ТекстСчетФактура;
	Форма.Элементы.ТекстСчетФактура.Гиперссылка = ПараметрыПредставления.ГиперссылкаСчетФактура;
	Форма.Элементы.СписокСчетовФактур.Заголовок = ПараметрыПредставления.ТекстСписок;
	Форма.Элементы.СписокСчетовФактур.Гиперссылка = ЗначениеЗаполнено(ПараметрыПредставления.ТекстСписок);
	Форма.Элементы.ВвестиИсправлениеСчетаФактуры.Доступность = ПараметрыПредставления.РазрешеныИсправления;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеРеквизитовСчетаФактурыПолученного(Форма, ПараметрыПредставления = Неопределено)
	
	Форма.Элементы.ГруппаСтраницыСчетФактураПосредника.Видимость = Форма.Объект.РасчетыЧерезОтдельногоКонтрагента;
	
	Если ПараметрыПредставления <> Неопределено Тогда
		
		Если ПараметрыПредставления.РазрешенВводНового Тогда
			Форма.Элементы.ГруппаСтраницыСчетФактураПосредника.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаРеквизитыСчетаФактуры;
		Иначе
			Форма.ТекстСчетФактураПосредника = ПараметрыПредставления.ТекстСчетФактура;
			Форма.Элементы.ТекстСчетФактураПосредника.Гиперссылка = ПараметрыПредставления.ГиперссылкаСчетФактура;
			Форма.Элементы.СписокСчетовФактурПосредника.Заголовок = ПараметрыПредставления.ТекстСписок;
			Форма.Элементы.СписокСчетовФактурПосредника.Гиперссылка = ЗначениеЗаполнено(ПараметрыПредставления.ТекстСписок);
			Форма.Элементы.ВвестиИсправлениеСчетаФактурыПосредника.Доступность = ПараметрыПредставления.РазрешеныИсправления;
			Форма.Элементы.ГруппаСтраницыСчетФактураПосредника.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаТекстСчетФактура;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.Элементы.ГруппаСтраницыСчетФактураПосредника.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаРеквизитыСчетаФактуры Тогда
		
		ИменаЭлементов = Новый Массив;
		ИменаЭлементов.Добавить("НомерСчетаФактуры");
		ИменаЭлементов.Добавить("ДатаСчетаФактуры");
		ИменаЭлементов.Добавить("ВалютаСчетаФактуры");
		
		Если Форма.Объект.ПредъявленСчетФактура Тогда
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "Доступность", Истина);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "АвтоОтметкаНезаполненного", Истина);
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "АвтоОтметкаНезаполненного", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "ОтметкаНезаполненного", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораОрганизацииПолучателя()
	
	МассивПараметров = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("РежимВыбораВзаимосвязанныхОрганизаций", "ТолькоНеВзаимосвязанные"));
	КонецЕсли;
	
	Элементы.ОрганизацияПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьИОчиститьОрганизациюПолучатель()
	
	Если ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.ОрганизацияПолучатель)
		И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс")
		И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Объект.Организация, Объект.ОрганизацияПолучатель) Тогда
		Объект.ОрганизацияПолучатель = Неопределено;
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция АдресОбъектаВоВременномХранилище()
	
	СтруктураОбъекта = Новый Структура;
	
	Для каждого Реквизит Из Метаданные.Документы.ВозвратТоваровМеждуОрганизациями.Реквизиты Цикл
		
		СтруктураОбъекта.Вставить(Реквизит.Имя);
		
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(СтруктураОбъекта, Объект);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураОбъекта, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьРеквизитыПечатиРеализации(ПоказыватьРеквизитыТТН)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                       Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя",      Объект.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя",       Объект.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",           Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("Грузоотправитель",                    Объект.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",                     Объект.Грузополучатель);
	СтруктураПараметров.Вставить("ДоверенностьВыдана",                  Объект.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьДата",                    Объект.ДоверенностьДата);
	СтруктураПараметров.Вставить("ДоверенностьЛицо",                    Объект.ДоверенностьЛицо);
	СтруктураПараметров.Вставить("ДоверенностьНомер",                   Объект.ДоверенностьНомер);
	СтруктураПараметров.Вставить("Партнер",                             Объект.Партнер);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация",               Объект.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("ОрганизацияПолучатель",               Объект.ОрганизацияПолучатель);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизацииПолучателя", Объект.БанковскийСчетОрганизацииПолучателя);
	СтруктураПараметров.Вставить("Контрагент",                          Объект.Контрагент);
	СтруктураПараметров.Вставить("ТолькоПросмотр",                      Ложь);
	СтруктураПараметров.Вставить("ПоказыватьРеквизитыТТН",              ПоказыватьРеквизитыТТН);
	СтруктураПараметров.Вставить("ТипОбъекта",                          "ВозвратТоваровМеждуОрганизациями");
	СтруктураПараметров.Вставить("АдресОбъектаВоВременномХранилище",    АдресОбъектаВоВременномХранилище());
	СтруктураПараметров.Вставить("РасчетыЧерезОрганизацию",             НЕ Объект.РасчетыЧерезОтдельногоКонтрагента);
	СтруктураПараметров.Вставить("Организация",                         Объект.Организация);
	СтруктураПараметров.Вставить("Дата",                                Объект.Дата);
	СтруктураПараметров.Вставить("Руководитель",                        Объект.Руководитель);
	СтруктураПараметров.Вставить("ГлавныйБухгалтер",                    Объект.ГлавныйБухгалтер);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",           Объект.БанковскийСчетОрганизации);
	СтруктураПараметров.Вставить("Отпустил",                            Объект.Отпустил);
	СтруктураПараметров.Вставить("ОтпустилДолжность",                   Объект.ОтпустилДолжность);
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("Основание");
	
	СтруктураПараметров.Вставить("НеПоказыватьРеквизиты", МассивРеквизитов);
	
	ОткрытьФормуМодально("ОбщаяФорма.РеквизитыПечатиРеализации", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаСервер()
	
	СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(Объект.Склад, Объект.Менеджер);
	Если СтруктураОтветственного <> Неопределено Тогда
		Объект.Отпустил = СтруктураОтветственного.Ответственный;
		Объект.ОтпустилДолжность = СтруктураОтветственного.ОтветственныйДолжность;
	КонецЕсли;
	
КонецПроцедуры
