
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	
	ИспользоватьРучныеСкидкиВЗакупках           = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	ИспользоватьПричиныОтменыЗаказовПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам");
	
	УстановитьВидимостьОпераций();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтатусДокумента = Перечисления.СтатусыЗаказовПоставщикам.ПустаяСсылка();
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам");
	
	Элементы.ГруппаСтатус.Видимость = ИспользоватьСтатусы;
	
	ЗакупкиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОснование", "Видимость", ЗначениеЗаполнено(Объект.ДокументОснование));
	
	// Подсистема "ЭлектронныеДокументы"
	УстановитьТекстСостоянияЭДНаСервере();
	
	Элементы.ЗаголовокОрганизация.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Элементы.ЗаголовокСклад.Видимость       = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	// 1с-ит. Чечин Петр
	Если Объект.ИТ_СтоимостьНЕ=0 Тогда
		Объект.ИТ_СтоимостьНЕ = Константы.итСтоимостьНЕ.Получить();	
		
	КонецЕсли;
	
	// Доработка + 15.12.2014
	Если НЕ Объект.ДокументОснование.Пустая() Тогда 
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда 
			ТаблицаЗаказа = Объект.ДокументОснование.Товары.Выгрузить(,"Номенклатура,Характеристика,Количество");
			ТаблицаЗаказа.Свернуть("Номенклатура,Характеристика","Количество");
			Для Каждого СтрокаДанных из Объект.Товары Цикл
				Для Каждого СтрокаЗаказа из ТаблицаЗаказа Цикл
					Если (СтрокаЗаказа.Номенклатура = СтрокаДанных.Номенклатура) и (СтрокаЗаказа.Характеристика = СтрокаДанных.Характеристика) Тогда
						СтрокаДанных.ТоварыС_КоличествоПоЗаказу = СтрокаЗаказа.Количество;
					КонецЕсли;	
					КонецЦикла;
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
	// Доработка -
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если Объект.Проведен Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыЗаказовПоставщикам.ПустаяСсылка();
	КонецЕсли;	
	
	//Эл = ЭтаФорма.Товары.ТоварыС_КоличествоПоЗаказу;
	//Эл.УстановитьЭлементУправления(Тип("ПолеВвода"));
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
		
	// Если документ проводится, предложим дозаполнить данные, если они некорректны
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(ЭтаФорма, "Товары", "Номенклатура,Характеристика,Количество,Склад,ДатаПоступления");
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Подтвержден") Или
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.КПоступлению") Тогда
			
			Если НЕ Объект.ПоступлениеОднойДатой Тогда
				ЗаполнитьПустыеДатыПоступления();
			Иначе
				ЗаполнитьПустуюДатуПоступления();
			КонецЕсли;
			
		КонецЕсли;
		
		ГрафикСоглашенияЗаполнен = ЗакупкиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
		
		Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию")
			И ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
			
			СуммаЭтаповОплаты    = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
			РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
			
			КоличествоЗаказанныхСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Отменено", Ложь)).Количество();
			
			Если КоличествоЗаказанныхСтрок = 0 И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
					
					РежимДиалога = ?(Объект.Согласован, РежимДиалогаВопрос.Ок, РежимДиалогаВопрос.ОкОтмена);
					ТекстВопроса = ?(Объект.Согласован,
						НСтр("ru='В заказе все строки отменены. Таблица этапов оплаты будет очищена'"),
						НСтр("ru='В заказе все строки отменены. Очистить таблицу этапов оплаты?'"));
					
						
					// АК ИГОРЬ 19 03 2013
					ОтветНаВопрос = КодВозвратаДиалога.Ок;
//					ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалога);
					
					Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
						Отказ = Истина;
						Возврат;
					ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
						Возврат;
					КонецЕсли;
					
					Объект.ЭтапыГрафикаОплаты.Очистить();
					НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
					
			ИначеЕсли СуммаЗаказано = 0  И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
					
					РежимДиалога = ?(Объект.Согласован, РежимДиалогаВопрос.Ок, РежимДиалогаВопрос.ОкОтмена);
					ТекстВопроса = ?(Объект.Согласован,
						НСтр("ru='Сумма заказанных строк нулевая. Таблица этапов оплаты будет очищена'"),
						НСтр("ru='Сумма заказанных строк нулевая. Очистить таблицу этапов оплаты?'"));
					
					// АК ИГОРЬ 19 03 2013
					ОтветНаВопрос = КодВозвратаДиалога.Ок;
	//				ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалога);
					
					Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
						Отказ = Истина;
						Возврат;
					ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
						Возврат;
					КонецЕсли;
					
					Объект.ЭтапыГрафикаОплаты.Очистить();
					НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
					
			ИначеЕсли СуммаЗаказано <> СуммаЭтаповОплаты Тогда
				
				Если Объект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
					
					ТекстВопроса = НСтр("ru='Отсутствуют этапы графика оплаты'") + Символы.ПС;
					Если ГрафикСоглашенияЗаполнен Тогда
						ТекстВопроса = ТекстВопроса + НСтр("ru='Добавить этапы графика из соглашения?'");
					Иначе
						Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) Тогда
							ТекстВопроса = ТекстВопроса + НСтр("ru='Добавить один этап ""%ВариантОплаты%"" с оплатой 100% на дату планируемого поступления?'");
						Иначе
							ТекстВопроса = ТекстВопроса +  НСтр("ru='Добавить один этап ""%ВариантОплаты%"" с оплатой 100%?'");
						КонецЕсли;
					КонецЕсли;
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВариантОплаты%", ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления"));
					// АК ИГОРЬ 19 03 2013
					ОтветНаВопрос = КодВозвратаДиалога.Ок;
					//ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОкОтмена);
					
					Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
						Отказ = Истина;
						Возврат;
					Иначе
						Если ГрафикСоглашенияЗаполнен Тогда
							ЗаполнитьЭтапыОплатыПоСоглашениюСервер(СуммаЗаказано);
						Иначе
							ЦенообразованиеКлиент.ДобавитьЭтапОплатыПоУмолчанию(
								Объект.ЭтапыГрафикаОплаты,
								Объект.ЖелаемаяДатаПоступления,
								СуммаЗаказано,
								ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления")
							);
						КонецЕсли;
						НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
					КонецЕсли;
					
				Иначе
					
					РежимДиалога = ?(Объект.Согласован, РежимДиалогаВопрос.Ок, РежимДиалогаВопрос.ОкОтмена);
					ТекстВопроса = ?(Объект.Согласован,
						НСтр("ru='Сумма этапов графика оплаты не совпадает с суммой заказанных строк. Сумма этапов оплаты будет скорректирована.'"),
						НСтр("ru='Сумма этапов графика оплаты не совпадает с суммой заказанных строк. Скорректировать сумму этапов оплаты?'"));
					
					// АК ИГОРЬ 19 03 2013
					ОтветНаВопрос = КодВозвратаДиалога.Ок;
//					ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалога);
					
					Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
						Отказ = Истина;
						Возврат;
					Иначе
						ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, СуммаЗаказано);
						НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
		// Предложим пользователю скорректировать желаемую дату поступления
		
		Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) Тогда
			
			МаксДатаАванса = МаксимальнаяДатаАванса();
		
			Если ЗначениеЗаполнено(МаксДатаАванса) И МаксДатаАванса > Объект.ЖелаемаяДатаПоступления Тогда
				
				ТекстВопроса = НСтр("ru='Желаемая дата поступления меньше даты этапов предоплаты. Дата будет скорректирована до %МаксДатаАванса%'");
				ТекстВопроса = СтрЗаменить(ТекстВопроса, "%МаксДатаАванса%", Формат(МаксДатаАванса,"ДЛФ=DD"));
		
				// АК ИГОРЬ 19 03 2013
				ОтветНаВопрос = КодВозвратаДиалога.Ок;
			//	ОтветНаВопрос = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ОКОтмена);
				Если ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
					Объект.ЖелаемаяДатаПоступления = МаксДатаАванса;
				Иначе
					Отказ = Истина;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗакупкиКлиент.ПроверитьСопоставленнуюНоменклатуруПоставщика(Объект, Отказ, НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика);
		
	КонецЕсли;
	
	
	// АК 22 03 2013
	Если Не ЗначениеЗаполнено(Объект.Ссылка) тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Согласован");
	КонецЕсли;
	
	//Перенесем дату в заказ клиента
	Если ЗначениеЗаполнено(ЭтаФорма.Объект.АК_ДатаВремяИсполненияУслуги	) Тогда
		парампам();
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
  Процедура  парампам()
	  Документы.ЗаказПоставщику.ПерезаполнитьЗаказКлиентаДата(ЭтаФорма);
  КонецПроцедуры
  
  
  &НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		СтатусДокумента = Объект.Статус;
	Иначе
		СтатусДокумента = Перечисления.СтатусыЗаказовПоставщикам.ПустаяСсылка();
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры")
		)
	);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	// Подсистема "ЭлектронныеДокументы"
	УстановитьТекстСостоянияЭДНаСервере();
	
	ОбновитьСостояниеСервер();
	ЗаполнитьПорядокРасчетов();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	//// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗачтенаОплата" И Параметр = Объект.Ссылка Тогда
		ОбновитьСостояниеСервер();
		ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	КонецЕсли;
	
	// Подсистема "ЭлектронныеДокументы"
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		УстановитьТекстСостоянияЭДНаСервере();
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_СоглашенияСПоставщиками" Тогда
		
		УстановитьДоступностьСоглашений();
		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ПрисоединенныйФайл" Тогда
		
	    ЗаполнитьНомерЗаказа(Источник);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	// АК ИГОРЬ 20 02 2013
	Если Объект.АК_ТипУслуги = ПредопределенноеЗначение("Перечисление.АК_ТипУслуги.Доставка") тогда
		Элементы.СтраницаДоставка.Видимость = Истина;
	Иначе
		Элементы.СтраницаДоставка.Видимость = Ложь;
	КонецЕсли;		
	
	ЭтаФорма.Заголовок = "Заказ поставщику";
	
	Если Объект.АК_ТипУслуги = ПредопределенноеЗначение("Перечисление.АК_ТипУслуги.Доставка") тогда
		ЭтаФорма.Заголовок = "Заказ на доставку";
	КонецЕсли;
	
	ЭтаФорма.Элементы.ДополнительныеУслугиНормаВремениСборки.Видимость = Ложь;
	ЭтаФорма.Элементы.ДополнительныеУслугиСуммаНВС.Видимость = Ложь;
	ЭтаФорма.Элементы.ИТ_СтоимостьНЕ.Видимость = Ложь;
	Если Объект.АК_ТипУслуги = ПредопределенноеЗначение("Перечисление.АК_ТипУслуги.Монтаж") тогда
		ЭтаФорма.Заголовок = "Заказ на монтаж";
		Элементы.ДополнительныеУслугиПунктПогрузки.Видимость = Ложь;
		ЭтаФорма.Элементы.ДополнительныеУслугиНормаВремениСборки.Видимость = Истина;
		ЭтаФорма.Элементы.ДополнительныеУслугиНормаВремениСборки.Доступность = Истина;
		ЭтаФорма.Элементы.ДополнительныеУслугиСуммаНВС.Видимость = Истина;
		ЭтаФорма.Элементы.ИТ_СтоимостьНЕ.Видимость = Истина;
		
	КонецЕсли;
	
	Если Объект.АК_ТипУслуги = ПредопределенноеЗначение("Перечисление.АК_ТипУслуги.Монтаж") Тогда
		Элементы.ДополнительныеУслуги.ПодчиненныеЭлементы.ДополнительныеУслугиПримечание.Заголовок = "Отчет о монтаже"
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	СкрыватьОтмененныеСтроки =  Настройки.Получить("СкрыватьОтмененныеСтроки");
	
	Если СкрыватьОтмененныеСтроки Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ТоварыСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтроки;
	
	НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика = Настройки.Получить("НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика");
	
	Если НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика Тогда
		Элементы.ФормаНеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика.Пометка = Истина;
	КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Настройки.Удалить("Объект.ПоступлениеОднойДатой");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьВидимостьЭлементовФормыДатПоступления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗаказПоставщику", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗакупкиКлиент.НачалоВыбораСоглашенияСПоставщиком(
		Элемент,
		СтандартнаяОбработка,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.Дата,
		Истина
	);

КонецПроцедуры

&НаКлиенте
Процедура ЖелаемаяДатаПоступленияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	МаксДатаАванса = МаксимальнаяДатаАванса();
	
	Если ЗначениеЗаполнено(МаксДатаАванса) Тогда
		
		ПредставлениеМаксДатаАванса = НСтр("ru='%МаксДатаАванса%'");
		ПредставлениеМаксДатаАванса = СтрЗаменить(ПредставлениеМаксДатаАванса, "%МаксДатаАванса%", Формат(МаксДатаАванса,"ДЛФ=DD"));
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(МаксДатаАванса, ПредставлениеМаксДатаАванса);
		
		ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент);
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			Объект.ЖелаемаяДатаПоступления = ВыбранноеЗначение.Значение;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент) Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РегистрироватьЦеныПоставщика", "Видимость", Ложь);
		Объект.РегистрироватьЦеныПоставщика = Ложь;
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Если Объект.Товары.Итог("Цена")<>0 И ВопросПользователюПередЗаполнениемЦенПоСоглашению() Тогда
			ЗаполнитьЦеныПоСоглашениюСервер();
		КонецЕсли;
		
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияУсловийЗакупокПоУмолчанию();
	Иначе
		// Заполним НалогообложениеНДС зависимости от партнера
		СвойстваАвтозаполнения = Новый Структура("Партнер, НалогообложениеНДС", Объект.Партнер);
		ЗаполнитьЗначенияСвойствАвтозаполненияСервер(Объект.Ссылка, СвойстваАвтозаполнения);
		Если СвойстваАвтозаполнения.НалогообложениеНДС <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, СвойстваАвтозаполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент) экспорт
	
	ПриИзмененииСоглашенияСервер(
		ЗначениеЗаполнено(Объект.Соглашение) И Объект.Товары.Итог("Цена")<>0 И ВопросПользователюПередЗаполнениемЦенПоСоглашению()
	);
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияУсловийЗакупок();
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РегистрироватьЦеныПоставщика", "Видимость", Ложь);
		Объект.РегистрироватьЦеныПоставщика = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)

	Если Объект.Согласован И
		Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Согласован")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Подтвержден")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.КПоступлению")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Закрыт") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		// В статусе "Подтвержден" - поставим все неотмененные строки в ожидаемое поступление
		// И предложим пользователю заполнитью дату поступления в строках, в которых эта дата не заполнена
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Подтвержден") Или
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.КПоступлению") Или
			Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Закрыт") Тогда
			
			Если НЕ Объект.ПоступлениеОднойДатой Тогда
				ЗаполнитьПустыеДатыПоступления();
			Иначе
				ЗаполнитьПустуюДатуПоступления();
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПриИзмененииСтатусаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		ПересчитатьСуммы = ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект,ВалютаДокумента);
		
		ПриИзмененииВалютыСервер(
			Объект.Валюта,
			ПересчитатьСуммы
		);
		Если ПересчитатьСуммы Тогда
			ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		КонецЕсли;
	
	КонецЕсли;
	
	ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	ПриИзмененииФормыОплатыСервер();
	
	УстановитьТекущуюСтраницуФормаОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ПриИзмененииХозяйственнойОперацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ПриИзмененииСкладаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Если ЦенообразованиеКлиент.ЗадатьВопросПересчетаЦеныПриИзмененииДаты(Объект) Тогда
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоступлениеОднойДатойПриИзменении(Элемент)
	
	ПоступлениеОднойДатойПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент)
	
	ЗаполнитьДатыПоступленияСервер(Объект.ДатаПоступления);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронныеДокументыКлиент.ОткрытьАктуальныйЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ТОВАРЫ

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И Объект.ПоступлениеОднойДатой Тогда
		ТекущиеДанные.ДатаПоступления = Объект.ДатаПоступления;
	КонецЕсли;
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ОбновитьЗависимыеРеквизитыФормы();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Отказ = РедактированиеДоступно();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = РедактированиеДоступно();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗакупкиКлиент.ПриВыбореНоменклатурыПоставщика(Объект, Поле, "ТоварыНоменклатураПоставщика", НСтр("ru = 'Поставщик'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПоставщикаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗакупкиКлиент.ЗаполнитьСписокВыбораНоменклатурыПоставщика(Объект.Партнер, Элементы.Товары.ТекущиеДанные, Элементы.ТоварыНоменклатураПоставщика.СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика");
	СтруктураДействий.Вставить(
		"ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Объект,
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика
		)
	);
	СтруктураДействий.Вставить(
		"ПроверитьЗаполнитьСклад",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(
			Объект,
			СкладГруппа
		)
	);
	СтруктураДействий.Вставить("ПроверитьСтатьюАналитикуРасходов");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьЗависимыеРеквизитыФормы();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьСтатьюАналитикуРасходов", ТекущаяСтрока.Номенклатура);
	СтруктураДействий.Вставить(
		"ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Объект,
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика
		)
	);
	СтруктураДействий.Вставить(
		"ПроверитьЗаполнитьСклад",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(
			Объект,
			СкладГруппа
		)
	);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	//
	Если КонтролироватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
		СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
		СтруктураПроверкиАссортимента.Склад = Объект.Склад;
		СтруктураПроверкиАссортимента.Дата = ?(ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления), Объект.ЖелаемаяДатаПоступления, Объект.Дата);
		СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина. Заказывать его не рекомендуется.'");
		СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныЗакупки";
		СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
		СтруктураПроверкиАссортимента.РазрешатьДобавление = Истина;
		//
		СтруктураДействий.Вставить("ПроверитьАссортиментСтроки", СтруктураПроверкиАссортимента);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбновитьЗависимыеРеквизитыФормы();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить(
		"ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Объект,
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика
		)
	);
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить(
		"ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Объект,
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика
		)
	);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУсловиеЦеныПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВЗакупкахВТЧ(Объект, Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию")));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтатьяРасходовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Товары.ТекущиеДанные;
	ТоварыСтатьяРасходовПриИзмененииСервер(
		СтрокаТаблицы.СтатьяРасходов,
		СтрокаТаблицы.АналитикаРасходов
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если Не ТекущаяСтрока.Отменено Тогда
		ТекущаяСтрока.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка");
	КонецЕсли;
	
	ОбновитьЗависимыеРеквизитыФормы();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	
	ОбновитьЗависимыеРеквизитыФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура АвтоТест_ЗаполнитьЦеныПоСоглашению(Команда) Экспорт

	Если ЗакупкиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", "Товары") Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоУсловиюЦенПоставщика(Команда)

	Если ЗакупкиКлиент.НеобходимоЗаполнениеЦенПоУсловиюЦенПоставщика(Объект, "Товары", "Товары") Тогда
		
		УсловиеЦенПоставщика = ЗакупкиКлиент.ВыбратьУсловиеЦенПоставщика(Объект.Соглашение);
		
		Если ЗначениеЗаполнено(УсловиеЦенПоставщика) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныПоУсловиюЦенПоставщикаСервер(УсловиеЦенПоставщика);
			ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоУсловиюЦенПоставщика(ЦеныРассчитаны, УсловиеЦенПоставщика);
			
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоУсловиюЦенПоставщика(Команда)

	Если ЗакупкиКлиент.НеобходимоЗаполнениеЦенПоУсловиюЦенПоставщика(Объект, "Товары", "Товары") Тогда
		
		УсловиеЦенПоставщика = ЗакупкиКлиент.ВыбратьУсловиеЦенПоставщика(Объект.Соглашение);
		
		Если ЗначениеЗаполнено(УсловиеЦенПоставщика) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоУсловиюЦенПоставщикаСервер(УсловиеЦенПоставщика);
			ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоУсловиюЦенПоставщика(ЦеныРассчитаны, УсловиеЦенПоставщика);
			
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	
	СуммаРучнойСкидкиНаценки = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Ложь
	);
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки,,АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина);
	
	СуммаРучнойСкидкиНаценки = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Ложь
	);
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтроки(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Таблица товаров не заполнена.'"));
		Возврат;
	ИначеЕсли Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='В таблице товаров отсутствуют выделенные строки.'"));
		Возврат;
	КонецЕсли;
	
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка");
	Если ИспользоватьПричиныОтменыЗаказовПоставщикам Тогда
		ПричинаОтмены = ОткрытьФормуМодально("Справочник.ПричиныОтменыЗаказовПоставщикам.ФормаВыбора");
		Если ПричинаОтмены = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура(
		"ЗаполнитьДубликатыЗависимыхРеквизитов",
		ПолучитьСтруктуруЗависимыхРеквизитов()
	);
	
	Для Каждого ТекСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекСтрока);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
			КонецЕсли;
			
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьЗависимыеРеквизитыФормы();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выделенные строки отменены'"),
		,
		НСтр("ru='Выделенные строки заказа отменены.'"),
		БиблиотекаКартинок.Информация32
	);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьНепоставленныеСтроки(Команда)

	Если Объект.Товары.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Таблица товаров не заполнена.'"));
		Возврат;
	КонецЕсли;
	
	ЕстьНеотмененныеСтроки = Ложь;
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если Не ТекСтрока.Отменено Тогда
			ЕстьНеотмененныеСтроки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьНеотмененныеСтроки Тогда
		Предупреждение(НСтр("ru='Все строки отменены.'"));
		Возврат;
	КонецЕсли;
	
	ПроверятьОстатки = Истина;
	
	Если Не Объект.Проведен Тогда
		
		ОтветНаВопрос = Вопрос(НСтр("ru='Заказ не проведен, поступление по заказу не запланировано. Будут отменены все строки. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		ПроверятьОстатки = Ложь;
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.НеСогласован")
		Или СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Согласован")
		Или СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Подтвержден") Тогда
		
		ТекстВопроса = НСтр("ru='Заказ проведен в статусе %Статус%, поступление по заказу не запланировано. Будут отменены все строки. Продолжить?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Статус%", СтатусДокумента);
		
		ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		ПроверятьОстатки = Ложь;
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыЗаказовПоставщикам.ПустаяСсылка");
	Если ИспользоватьПричиныОтменыЗаказовПоставщикам Тогда
		ПричинаОтмены = ОткрытьФормуМодально("Справочник.ПричиныОтменыЗаказовПоставщикам.ФормаВыбора");
		Если ПричинаОтмены = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	КоличествоСтрокОтменено = ОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены, ПроверятьОстатки);
	
	Если КоличествоСтрокОтменено = 0 Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки не отменены'"),
			,
			НСтр("ru='По всем строкам заказа оформлено поступление. Строки не могут быть отменены.'"),
			БиблиотекаКартинок.Информация32
		);
			
	Иначе
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
		Если ПроверятьОстатки Тогда

			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Строки отменены'"),
				,
				НСтр("ru='Все непоставленные строки заказа отменены.'"),
				БиблиотекаКартинок.Информация32
			);
		
		Иначе
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Строки отменены'"),
				,
				НСтр("ru='Все строки заказа отменены.'"),
				БиблиотекаКартинок.Информация32
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПоступленияДляВсехСтрок(Команда)

	ЗаполнитьДатуПоступления();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПоступленияДляВыделенныхСтрок(Команда)

	Если Элементы.Товары.ВыделенныеСтроки.Количество() > 0 Тогда
		ЗаполнитьДатуПоступления(Элементы.Товары.ВыделенныеСтроки);
	Иначе
		ТекстПредупреждения = НСтр("ru='В документе не выбраны строки для заполнения. Дата поступления не будет заполнена.'");
		Предупреждение(ТекстПредупреждения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкрыватьОтмененныеСтроки(Команда)
	
	СкрыватьОтмененныеСтроки = Не СкрыватьОтмененныеСтроки;
	
	Если СкрыватьОтмененныеСтроки Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ТоварыСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ",    Объект.Ссылка);
	ПараметрыФормы.Вставить("Партнер",     Объект.Партнер);
	ПараметрыФормы.Вставить("Соглашение",  Объект.Соглашение);
	ПараметрыФормы.Вставить("Склад",       Объект.Склад);
	ПараметрыФормы.Вставить("Валюта",      Объект.Валюта);
	ПараметрыФормы.Вставить("РегистрироватьЦеныПоУсловиям", РегистрироватьЦеныПоУсловиям);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию") Тогда
		ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);	
	КонецЕсли;
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументЗакупки.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНоменклатуруПоставщика(Команда)
	
	ЗакупкиКлиент.ПоказатьНоменклатуруПоставщика(Объект.Партнер, Объект.Ссылка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика(Команда)
	
	НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика = Не НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика;
	Элементы.ФормаНеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика.Пометка = НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы);
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВВыделенныхСтроках(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(Объект, Объект.Товары, "Товары", ВыделенныеСтроки) Тогда
		МассивОтбора = Новый Массив();
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"));
		СтруктураОтбора = Новый Структура("ВыборГруппы, ЭтоГруппа", МассивОтбора, Ложь);
		СтруктураПараметров = Новый Структура("Отбор,ГруппаСкладов", СтруктураОтбора, Объект.Склад);
		ВыбранныйСклад = ОткрытьФормуМодально("Справочник.Склады.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
		Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
			ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад);
			СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(ВыбранныйСклад, ЗаполненоСтрок, ВыделенныеСтроки.Количество());
		КонецЕсли;
		ОбновитьЗависимыеРеквизитыФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуруПоНоменклатуреПоставщика(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьНаличиеСтрокВСписке(Объект.Товары, "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресТоваровВХранилище = ПоместитьТоварыВоВременноеХранилищеСервер();
	РезультатВыбора = ЗакупкиКлиент.ОткрытьФормуЗаполненияНоменклатурыПоставщика(АдресТоваровВХранилище, ЭтаФорма);
	Если РезультатВыбора <> Неопределено Тогда
		ЗаполнитьТоварыИзВременногоХранилищаСервер(РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьЦеныПоПоступлениям(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СкорректироватьЦеныПоПоступлениямСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	Если ОбщегоНазначенияУТКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)

	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		"Номенклатура,Характеристика,Количество,Склад,ДатаПоступления");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	ДокументЗакупки = РеквизитФормыВЗначение("Объект");
	ДокументЗакупки.ЗаполнитьУсловияЗакупокПоУмолчанию(Ложь);
	ЗначениеВРеквизитФормы(ДокументЗакупки, "Объект");
	
	УстановитьДоступностьСоглашений();
	
	ВалютаДокумента = Объект.Валюта;
	УстановитьТекущуюСтраницуФормаОплаты();
	ПриИзмененииХозяйственнойОперацииСервер(Ложь);
	ЗаполнитьФлагРегистрироватьЦеныПоУсловиям();
	УстановитьВидимостьЭлементовРегистрироватьЦеныПоУсловиям();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	ЗаполнитьПорядокРасчетов();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
		И ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
		
		Если ЗакупкиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение) Тогда
			ЗакупкиСервер.ЗаполнитьЭтапыГрафикаОплатыПоСоглашению(Объект, СуммаЗаказано);
			НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
		Иначе
			ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, СуммаЗаказано);
		КонецЕсли;
		
	КонецЕсли;
	
	ПриИзмененииСкладаСервер();
	ВернутьМногооборотнуюТаруПриИзмененииСервер();
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры")
		)
	);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	ЗакупкиСервер.ЗаполнитьНоменклатуруПоставщикаВТаблице(Объект.Товары, Объект.Партнер);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РегистрироватьЦеныПоставщика", "Видимость", ЗначениеЗаполнено(Объект.Соглашение));
	Если Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Объект.РегистрироватьЦеныПоставщика = Ложь;
	КонецЕсли;
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.Договор.Видимость;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоглашенияСервер(ПересчитатьЦены = Истина)
	
	ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ДокументЗакупки = РеквизитФормыВЗначение("Объект");
		ДокументЗакупки.ЗаполнитьУсловияЗакупокПоСоглашению(ПересчитатьЦены);
		ЗначениеВРеквизитФормы(ДокументЗакупки, "Объект");
		
		Если Не ПересчитатьЦены И ЦенаВключаетНДС <> Объект.ЦенаВключаетНДС Тогда
			
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
			
		КонецЕсли;
		
		УстановитьТекущуюСтраницуФормаОплаты();
		
		ВалютаДокумента = Объект.Валюта;
		
		ПриИзмененииХозяйственнойОперацииСервер(Ложь);
		ВернутьМногооборотнуюТаруПриИзмененииСервер();
		ЗаполнитьФлагРегистрироватьЦеныПоУсловиям();
		УстановитьВидимостьЭлементовРегистрироватьЦеныПоУсловиям();
		ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
		
		ЗаполнитьПорядокРасчетов();
		
		Если СуммаЗаказано > 0 И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
			И ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
			
			Если ЗакупкиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение) Тогда
				
				ЗакупкиСервер.ЗаполнитьЭтапыГрафикаОплатыПоСоглашению(Объект, СуммаЗаказано);
				НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
				
			ИначеЕсли Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
				
				ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, СуммаЗаказано);
				
			КонецЕсли;
			
		Иначе
			
			Объект.ЭтапыГрафикаОплаты.Очистить();
			
		КонецЕсли;
		
		ПриИзмененииСкладаСервер();
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.Товары,
			Новый Структура(
				"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
				Новый Структура("Номенклатура", "ТипНоменклатуры")
			)
		);
		
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РегистрироватьЦеныПоставщика", "Видимость", ЗначениеЗаполнено(Объект.Соглашение));
		
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		
	КонецЕсли;
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.Договор.Видимость;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта, ПересчитатьСуммы)
	
	ЗаполнитьДоговорПоУмолчанию();
	
	Если ПересчитатьСуммы Тогда
		СтараяВалюта                = ВалютаДокумента;
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, Объект.Дата);
		СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  Объект.Дата);
		
		Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.Товары,
			Объект.ЦенаВключаетНДС,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты,
			Ложь,
			Истина
		);
		ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		Ценообразование.РаспределитьСуммуПоЭтапамОплаты(Объект, СуммаЗаказано);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФормыОплатыСервер()
	
	Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплаты, Объект.БанковскийСчет);
	Объект.Касса          = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплаты, Объект.Касса);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.Договор.Видимость;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.Договор.Видимость;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда
			Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
				Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплаты, Объект.БанковскийСчет);
			КонецЕсли;
			Объект.Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплаты, Объект.Касса);
		КонецЕсли;
		
		Если НЕ СкладГруппа Тогда
			Объект.ЗакупкаПодДеятельность = Справочники.Организации.НалогообложениеНДС(
				Объект.Организация,
				Объект.Склад,
				Объект.Дата
			);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьБанковскийСчетИКассуПоОрганизации(Объект.Организация);
	Объект.АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Объект.Организация, "Фактический");

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСтатусаСервер()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер(ВызовПоКоманде=Истина)
	
	Если ВызовПоКоманде Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		
		Если ИспользоватьРучныеСкидкиВЗакупках Тогда
			ЗакупкиСервер.ОтменитьРучныеСкидки(Объект, "Товары");
			ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
		КонецЕсли;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
		Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		НалогообложениеНДСПриИзмененииСервер(Неопределено);
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	УстановитьВидимостьЭлементовПоОперацииСервер();
	ЗаполнитьПорядокРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары,СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаСервер()
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументоЗакупки(Объект.Склад);
	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Товары, Ложь);
	ОбновитьЗависимыеРеквизитыФормыСервер();
	
	Если НЕ СкладГруппа Тогда
		Объект.ЗакупкаПодДеятельность = Справочники.Организации.НалогообложениеНДС(
			Объект.Организация,
			Объект.Склад,
			Объект.Дата);
	КонецЕсли;
	КонтролироватьАссортимент = ПолучитьФункциональнуюОпцию("КонтролироватьАссортимент", Новый Структура("Склад", Объект.Склад));
	Если КонтролироватьАссортимент <> Истина Тогда
		КонтролироватьАссортимент = Ложь;
	КонецЕсли;
	Если КонтролироватьАссортимент Тогда
		АссортиментСервер.ПроверитьАссортиментТаблицыПодобранныхТоваров(Объект, "Склад");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииСервер()
	
	ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет);
	
	ЗаполнитьПорядокРасчетов();
	
КонецПроцедуры

&НаСервере 
Процедура ПоступлениеОднойДатойПриИзмененииСервер()
	
	// Вычислим максимальную дату поступления и приведем к ней ТЧ
	Если Объект.ПоступлениеОднойДатой Тогда
		
		Объект.ДатаПоступления = МаксимальнаяДатаПоступления();
		
		ЗаполнитьДатыПоступленияСервер(Объект.ДатаПоступления);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормыДатПоступления();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ПродажиКлиент.ЗаполнитьСписокВыбораАдреса(Элемент, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьМногооборотнуюТаруПриИзменении(Элемент)
	
	ВернутьМногооборотнуюТаруПриИзмененииСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Ценообразование и скидки

&НаСервере
Процедура ЗаполнитьФлагРегистрироватьЦеныПоУсловиям()
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		РегистрироватьЦеныПоУсловиям = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "РегистрироватьЦеныПоУсловиям");
	Иначе
		РегистрироватьЦеныПоУсловиям = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер()  экспорт
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	
	ЦеныРассчитаны = ЗакупкиСервер.ЗаполнитьЦены(
		Объект.Товары,
		, // Массив строк
		Новый Структура( // Параметры заполнения
			"ПоляЗаполнения, Дата, Валюта, Соглашение",
			"Цена, СтавкаНДС, УсловиеЦеныПоставщика",
			Объект.Дата,
			Объект.Валюта,
			Объект.Соглашение
		),
		СтруктураДействий
	);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки = Неопределено, АдресВоВременномХранилище)
	
	СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, Ложь, , Истина,, ВыделенныеСтроки, АдресВоВременномХранилище);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Ложь, Истина);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныПоУсловиюЦенПоставщикаСервер(УсловиеЦеныПоставщика)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	
	ЦеныРассчитаны = ЗакупкиСервер.ЗаполнитьЦены(
		Объект.Товары,
		, // Массив строк
		Новый Структура( // Параметры заполнения
			"ПоляЗаполнения, Дата, Валюта, Соглашение, УсловиеЦеныПоставщика",
			"Цена, СтавкаНДС, УсловиеЦеныПоставщика",
			Объект.Дата,
			Объект.Валюта,
			Объект.Соглашение,
			УсловиеЦеныПоставщика
		),
		СтруктураДействий
	);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаказа( ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоУсловиюЦенПоставщикаСервер(УсловиеЦенПоставщика)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
		
	КонецЦикла;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	
	ЦеныРассчитаны = ЗакупкиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок,
		Новый Структура( // Параметры заполнения
			"ПоляЗаполнения, Дата, Валюта, Соглашение, УсловиеЦеныПоставщика",
			"Цена, СтавкаНДС, УсловиеЦеныПоставщика",
			Объект.Дата,
			Объект.Валюта,
			Объект.Соглашение,
			УсловиеЦенПоставщика
		),
		СтруктураДействий
	);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаКлиенте
Функция ВопросПользователюПередЗаполнениемЦенПоСоглашению()
	
	ВариантыОтветов = Новый СписокЗначений;
	ВариантыОтветов.Добавить(Истина, НСтр("ru='Перезаполнить'"));
	ВариантыОтветов.Добавить(Ложь, НСтр("ru='Не перезаполнять'"));
	
	Возврат Вопрос(НСтр("ru='Перезаполнить цены по соглашению?'"), ВариантыОтветов);
	
КонецФункции

&НаСервере
Функция СкорректироватьЦеныПоПоступлениямСервер()
	
	ЦеныСкорректированы = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТоварыЗаказа.КодСтроки  КАК КодСтроки,
	|	ТоварыЗаказа.Количество КАК Количество,
	|	ТоварыЗаказа.Цена       КАК Цена,
	|	ТоварыЗаказа.СуммаСНДС  КАК СуммаСНДС
	|ПОМЕСТИТЬ
	|	ТоварыЗаказа
	|ИЗ
	|	&ТоварыЗаказа КАК ТоварыЗаказа
	|;
	|ВЫБРАТЬ
	|	ТоварыПоступления.КодСтроки         КАК КодСтроки,
	|	СУММА(ТоварыПоступления.Количество) КАК Количество,
	|	СРЕДНЕЕ(ТоварыПоступления.Цена)     КАК Цена,
	|	СУММА(ТоварыПоступления.СуммаСНДС)  КАК СуммаСНДС
	|ПОМЕСТИТЬ
	|	ТоварыПоступления
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТоварыПоступления
	|ГДЕ
	|	ТоварыПоступления.ЗаказПоставщику = &ЗаказПоставщику
	|	И ТоварыПоступления.Ссылка.Проведен
	|	И ТоварыПоступления.КодСтроки В (
	|		ВЫБРАТЬ
	|			ТоварыЗаказа.КодСтроки КАК КодСтроки
	|		ИЗ
	|			ТоварыЗаказа КАК ТоварыЗаказа
	|	)
	|СГРУППИРОВАТЬ ПО
	|	КодСтроки
	|;
	|ВЫБРАТЬ
	|	ТоварыЗаказа.КодСтроки КАК КодСтроки,
	|	ТоварыПоступления.Цена КАК ЦенаПоступления
	|ИЗ
	|	ТоварыЗаказа
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ТоварыПоступления
	|ПО
	|	ТоварыЗаказа.КодСтроки = ТоварыПоступления.КодСтроки
	|ГДЕ
	|	ТоварыЗаказа.Цена <> ТоварыПоступления.Цена
	|
	|");
	
	Запрос.УстановитьПараметр("ТоварыЗаказа", Объект.Товары.Выгрузить(, "КодСтроки,Количество,Цена,СуммаСНДС"));
	Запрос.УстановитьПараметр("ЗаказПоставщику", Объект.Ссылка);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Выборка = РезультатЗапроса[2].Выбрать();
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	
	Пока Выборка.Следующий() Цикл
		
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки", Выборка.КодСтроки));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			НайденныеСтроки[0].Цена =  Выборка.ЦенаПоступления;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденныеСтроки[0], СтруктураДействий, Неопределено);
			ЦеныСкорректированы = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЦеныСкорректированы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подборы и обработка проверки количества

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "НоменклатураПоставщика, Номенклатура, Характеристика, Упаковка, Склад, УсловиеЦеныПоставщика, Цена, КоличествоУпаковок, ПроцентРучнойСкидки");
		
		Если Объект.ПоступлениеОднойДатой Тогда
			ТекущаяСтрока.ДатаПоступления = Объект.ДатаПоступления;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	Если КонтролироватьАссортимент Тогда
		АссортиментСервер.ПроверитьАссортиментТаблицыПодобранныхТоваров(Объект, "Склад", ТаблицаТоваров);
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	ОбновитьЗависимыеРеквизитыФормыСервер();
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);

КонецПроцедуры


&НаСервере
Процедура ЗаполнитьНомерЗаказа(Источник) 


Если ТИПЗНЧ(Источник)=ТИП("Массив") Тогда
	ДатаМаксимальная = '00010101';
	Индекс=0;
	ИндексМакс=0;
	Для Каждого  ЭлементМассива Из Источник Цикл
		
		Если ЭлементМассива.ДатаСоздания > ДатаМаксимальная  Тогда
			ДатаМаксимальная=ЭлементМассива.ДатаСоздания; 
			
			ИндексМакс=Индекс;
			//= ЭлементМассива.Индекс;
		КонецЕсли;
		Индекс=Индекс+1;
	КонецЦикла;
	ОбъектЗаказПостащику = Источник[ИндексМакс].ВладелецФайла;
	
	Источник = Источник[ИндексМакс].Наименование;
ИначеЕсли ТИПЗНЧ(Источник)=ТИП("СправочникСсылка.ЗаказПоставщикуПрисоединенныеФайлы") ТОгда
	ОбъектЗаказПостащику = Источник.ВладелецФайла;
	Источник=Источник.Наименование;
	
	
КонецЕсли;
	
	
Если  Найти(Источник,"чет")<>0 ИЛИ            
	  Найти(Источник,"чёт")<>0 Тогда
	  
        Если Найти(Источник,"чет")<>0  Тогда
		ИндексНомерСчета=Найти(Источник,"чет")+3;
		Иначе 
		ИндексНомерСчета=Найти(Источник,"чёт")+3;
		КонецЕсли;
		
		ИндексНачалаДатыСчета = Найти(Источник,"ОТ");
		
		НомерСчета=Лев(Сред(Источник,ИндексНомерСчета+1),ИндексНачалаДатыСчета-ИндексНомерСчета-1);	
		НомерСчета=СокрЛП(НомерСчета);
		
		ДатаСчета= Сред(Источник,ИндексНачалаДатыСчета);
		ДатаСчета=СокрЛП(ДатаСчета);
		
		ДатаДень=Прав(Лев(ДатаСчета,5),2);		
		ДатаМесяц=Лев(Сред(ДатаСчета,4),2);
		ДатаГод=Сред(ДатаСчета,10,2);
		
		ДатаСчета="20"+ДатаГод+ДатаМесяц+ДатаДень;
		
		
		Попытка
			ДатаСчета=ДАТА(ДатаСчета);
		Исключение 
			ДатаСчета ='00010101';
		КонецПопытки;
	КонецЕсли;
	
	НомерСчета = СтрЗаменить(НомерСчета,"№","");
	
	
	ОбъектЗаказПостащику = ОбъектЗаказПостащику.получитьОбъект();
	//Объект=РеквизитФормыВЗначение("Объект");
	Объект.НомерПоДаннымПоставщика =  НомерСчета; 		
	Объект.ДатаПоДаннымПоставщика =  ДатаСчета;
	//ЗначениеВРеквизитФормы(Объект,"Объект");	
		


КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ИзменятьКоличество = Не Объект.Согласован;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками, Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками, Объект);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = Неопределено;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	
	Если КонтролироватьАссортимент Тогда
		СтруктураПроверкиАссортимента = АссортиментКлиентСервер.ПараметрыПроверкиАссортимента();
		СтруктураПроверкиАссортимента.Ссылка = Объект.Ссылка;
		СтруктураПроверкиАссортимента.Склад = Объект.Склад;
		СтруктураПроверкиАссортимента.Дата = ?(ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления), Объект.ЖелаемаяДатаПоступления, Объект.Дата);
		СтруктураПроверкиАссортимента.ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент магазина. Заказывать его не рекомендуется.'");
		СтруктураПроверкиАссортимента.ИмяРесурсаАссортимента = "РазрешеныЗакупки";
		СтруктураПроверкиАссортимента.ПровереноМожноДобавлять = Истина;
		СтруктураПроверкиАссортимента.РазрешатьДобавление = Истина;
		//
		СтруктураДействий.ПараметрыПроверкиАссортимента = СтруктураПроверкиАссортимента;
	КонецЕсли;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подсистема "ЭлектронныеДокументы"

&НаСервере
Процедура УстановитьТекстСостоянияЭДНаСервере()
	
	ТекстСостоянияЭД = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

///Процедура заполнения Номер счета и Даты из прикрепленных файлов в заказ Поставщика на вкладку Дополнительно
&НаСервере
Процедура ЗаполнениеНомераСчетаИДаты()
	
//Объект.НомерПоДаннымПоставщика = 

	
	
КонецПроцедуры

	
&НаСервере
Процедура ЗаполнитьЭтапыОплатыПоСоглашениюСервер(Знач СуммаДокумента)
	
	ЗакупкиСервер.ЗаполнитьЭтапыГрафикаОплатыПоСоглашению(Объект, СуммаДокумента);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УстановитьДоступностьСоглашений();
	
	ВалютаДокумента = Объект.Валюта;
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументоЗакупки(Объект.Склад);
	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	ОбновитьЗависимыеРеквизитыФормыСервер();
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РегистрироватьЦеныПоставщика", "Видимость", ЗначениеЗаполнено(Объект.Соглашение));
	УстановитьТекущуюСтраницуФормаОплаты();
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
		Новый Структура("Номенклатура", "ТипНоменклатуры")
		)
	);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	ЗаполнитьФлагРегистрироватьЦеныПоУсловиям();
	УстановитьВидимостьЭлементовРегистрироватьЦеныПоУсловиям();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость);
	Элементы.ЗаголовокДоговор.Видимость = Элементы.Договор.Видимость;
	
	УстановитьВидимостьЭлементовПоОперацииСервер();
	ОбновитьСостояниеСервер();
	ЗаполнитьПорядокРасчетов();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
	УстановитьВидимостьЭлементовФормыДатПоступления();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	КонтролироватьАссортимент = ПолучитьФункциональнуюОпцию("КонтролироватьАссортимент", Новый Структура("Склад", Объект.Склад));
	Если КонтролироватьАссортимент <> Истина Тогда
		КонтролироватьАссортимент = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиЗаказа(Форма) экспорт
	
	// Заполнение итогов по таблице "Товары"
	
	КоллекцияТовары = Форма.Объект.Товары;
	
	Форма.СуммаОтменено = КоллекцияТовары.Итог("СуммаСНДСОтменено");
	Форма.СуммаЗаказано = КоллекцияТовары.Итог("СуммаСНДС") - КоллекцияТовары.Итог("СуммаСНДСОтменено");
	Форма.СуммаНДСЗаказано = КоллекцияТовары.Итог("СуммаНДС") - КоллекцияТовары.Итог("СуммаНДСОтменено");
	Форма.СуммаРучнойСкидки = КоллекцияТовары.Итог("СуммаРучнойСкидки") - КоллекцияТовары.Итог("СуммаРучнойСкидкиОтменено");
	
	Если КоллекцияТовары.Итог("СуммаСНДСОтменено") = КоллекцияТовары.Итог("СуммаСНДС") Тогда
		Форма.ВсеСтрокиОтменены = Истина;
	Иначе
		Форма.ВсеСтрокиОтменены = Ложь;
	КонецЕсли;
	
	СуммаЗаказано = КоллекцияТовары.Итог("Сумма") - КоллекцияТовары.Итог("СуммаОтменено");
	
	Если СуммаЗаказано > 0 Тогда
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаЗаказано + Форма.СуммаРучнойСкидки);
	ИначеЕсли Форма.СуммаРучнойСкидки > 0 Тогда
		Форма.ПроцентРучнойСкидки = 100;
	Иначе
		Форма.ПроцентРучнойСкидки = 0;
	КонецЕсли;
	
	// Заполнение итогов по таблице этапы оплаты
	
	Форма.СуммаАвансаДоПодтверждения     = 0;
	Форма.СуммаПредоплатыДоПоступления   = 0;
	Форма.СуммаКредитаПослеПоступления   = 0;
	Форма.ПроцентАвансаДоПодтверждения   = 0;
	Форма.ПроцентПредоплатыДоПоступления = 0;
	Форма.ПроцентКредитаПослеПоступления = 0;
	ПроцентПлатежейОбщий                 = 0;
	
	СоответствиеВариантовОплаты = Новый Соответствие;
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.АвансДоПодтверждения"),
		Новый Структура("Сумма, Проценты", "СуммаАвансаДоПодтверждения", "ПроцентАвансаДоПодтверждения")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления"),
		Новый Структура("Сумма, Проценты", "СуммаПредоплатыДоПоступления", "ПроцентПредоплатыДоПоступления")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления"),
		Новый Структура("Сумма, Проценты", "СуммаКредитаПослеПоступления", "ПроцентКредитаПослеПоступления")
	);
	
	ПредыдущееЗначениеДаты = Дата(1, 1, 1);
	Форма.НомерСтрокиПолнойОплаты = 0;
	Для Каждого ТекСтрока Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		ПроцентПлатежейОбщий = ПроцентПлатежейОбщий + ТекСтрока.ПроцентПлатежа;
		ТекСтрока.ПроцентЗаполненНеВерно = (ПроцентПлатежейОбщий > 100);
		ТекСтрока.ДатаЗаполненаНеВерно = (ПредыдущееЗначениеДаты > ТекСтрока.ДатаПлатежа);
		ПредыдущееЗначениеДаты = ТекСтрока.ДатаПлатежа;
		Если ПроцентПлатежейОбщий = 100 Тогда
			Форма.НомерСтрокиПолнойОплаты = ТекСтрока.НомерСтроки;
		КонецЕсли;
		ИменаЭлементов = СоответствиеВариантовОплаты[ТекСтрока.ВариантОплаты];
		Если ИменаЭлементов <> Неопределено Тогда
			Форма[ИменаЭлементов.Сумма] = Форма[ИменаЭлементов.Сумма] + ТекСтрока.СуммаПлатежа;
			Форма[ИменаЭлементов.Проценты] = Форма[ИменаЭлементов.Проценты] + ТекСтрока.ПроцентПлатежа;
		КонецЕсли;
	КонецЦикла;
	
	// Выбор страницы отображения НДС
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруЗависимыхРеквизитов()
	
	Возврат Новый Структура("Отменено", "Сумма, СуммаНДС, СуммаСНДС, СуммаРучнойСкидки");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимыеРеквизитыФормы()
	
	ОбновитьРеквизитыФормы = ОбщегоНазначенияУТКлиентСервер.ПроверитьНеобходимостьОбновленияРеквизитовФормы(
		Объект.Товары,
		Элементы.КартинкаНесколькоСкладов.Картинка,
		НадписьНесколькоСкладов,
		СкладГруппа,
		Объект.Склад,
		СкладОбязателен,
		Истина
	);
	
	Если ОбновитьРеквизитыФормы Тогда
		ОбновитьЗависимыеРеквизитыФормыСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗависимыеРеквизитыФормыСервер()
	
	ОбщегоНазначенияУТ.ОбновитьЗависимыеРеквизитыФормы(
		Объект.Товары,
		Элементы.КартинкаНесколькоСкладов.Картинка,
		НадписьНесколькоСкладов,
		СкладГруппа,
		Объект.Склад,
		СкладОбязателен,
		Истина,
		НСтр("ru='Складов поступления'")
	);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
		Объект.Договор,
		Объект.Партнер,
		Объект.Контрагент,
		Объект.Организация,
		Объект.ХозяйственнаяОперация,
		Объект.Валюта,
		Объект.Соглашение
	);
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет);
	КонецЕсли;
	
	ЗаполнитьПорядокРасчетов();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(Знач МассивВыделенныхСтрок, Склад)
	
	Возврат СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.Товары, МассивВыделенныхСтрок, Склад);
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Ложь;
	
	Если Объект.Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован Тогда
		
		УстановитьПодписку = Ложь;
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Согласован Или
			Объект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден Или
			Объект.Статус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению Или
			Объект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт Тогда
			
			УстановитьПодписку = Объект.Согласован;
			
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("Соглашение");
	МассивЭлементов.Добавить("Договор");
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("НалогообложениеНДС");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("ЖелаемаяДатаПоступления");
	МассивЭлементов.Добавить("ДатаСогласования");
	МассивЭлементов.Добавить("ХозяйственнаяОперация");
	МассивЭлементов.Добавить("ПоступлениеОднойДатой");
	МассивЭлементов.Добавить("ДатаПоступления");
	МассивЭлементов.Добавить("ВернутьМногооборотнуюТару");
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	
	// Элементы управления, связанные с оплатой
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("БанковскийСчет");
	МассивЭлементов.Добавить("Касса");
	
	МассивЭлементов.Добавить("Товары;ПередНачаломДобавления,ПередУдалением");
	
	// Элементы управления, связанные с товарами
	МассивЭлементов.Добавить("ТоварыНоменклатура");
	МассивЭлементов.Добавить("ТоварыХарактеристика");
	МассивЭлементов.Добавить("ТоварыКоличествоУпаковок");
	МассивЭлементов.Добавить("ТоварыУпаковка");
	МассивЭлементов.Добавить("ТоварыУсловиеЦеныПоставщика");
	МассивЭлементов.Добавить("ТоварыЦена");
	МассивЭлементов.Добавить("ТоварыСтавкаНДС");
	МассивЭлементов.Добавить("ТоварыСуммаНДС");
	МассивЭлементов.Добавить("ТоварыПроцентРучнойСкидки");
	МассивЭлементов.Добавить("ТоварыСуммаРучнойСкидки");
	МассивЭлементов.Добавить("ТоварыСумма");
	
	// Элементы управления, связанные с товарами
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюДобавить");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюСкопировать");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюУдалить");
	
	МассивЭлементов.Добавить("ТоварыДобавить");
	МассивЭлементов.Добавить("ТоварыИзменить");
	МассивЭлементов.Добавить("ТоварыСкопировать");
	МассивЭлементов.Добавить("ТоварыУдалить");
	
	МассивЭлементов.Добавить("ТоварыПодобратьНоменклатуру");
	МассивЭлементов.Добавить("ТоварыДополнитьМногооборотнойТарой");
	
	МассивЭлементов.Добавить("ТоварыПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	МассивЭлементов.Добавить("ТоварыЗаполнитьСкладВВыделенныхСтроках");
	
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоСоглашению");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоУсловиюЦенПоставщика");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоУсловиюЦенПоставщика");
	МассивЭлементов.Добавить("ТоварыСкорректироватьЦеныПоПоступлениям");
	
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	
	МассивЭлементов.Добавить("ЗаполнитьЭтапыГрафикаОплаты");
	МассивЭлементов.Добавить("ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказам");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ЗаказПоставщику.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации
	);
		
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	ЭтоПриемНаКомиссию = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("Касса");
	МассивЭлементов.Добавить("БанковскийСчет");
	МассивЭлементов.Добавить("НадписьЭтапыОплаты");
	МассивЭлементов.Добавить("СуммаСкидки");
	МассивЭлементов.Добавить("ПроцентСкидки");
	МассивЭлементов.Добавить("СуммаРучнойСкидки");
	МассивЭлементов.Добавить("ПроцентРучнойСкидки");
	МассивЭлементов.Добавить("СуммаАвансаДоПодтверждения");
	МассивЭлементов.Добавить("ПроцентАвансаДоПодтверждения");
	МассивЭлементов.Добавить("СуммаПредоплатыДоПоступления");
	МассивЭлементов.Добавить("ПроцентПредоплатыДоПоступления");
	МассивЭлементов.Добавить("СуммаКредитаПослеПоступления");
	МассивЭлементов.Добавить("ПроцентКредитаПослеПоступления");
	МассивЭлементов.Добавить("НашДолгСуммаДолга");
	МассивЭлементов.Добавить("ДолгПоставщикаСуммаДолга");
	МассивЭлементов.Добавить("СуммаДолга");
	МассивЭлементов.Добавить("ПроцентДолга");
	МассивЭлементов.Добавить("СуммаОплаты");
	МассивЭлементов.Добавить("ПроцентОплаты");
	МассивЭлементов.Добавить("СуммаПоступления");
	МассивЭлементов.Добавить("ПроцентПоступления");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Не ЭтоПриемНаКомиссию);
	
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(Объект.ХозяйственнаяОперация, Элементы.ТоварыНоменклатура);
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(Объект.ХозяйственнаяОперация, Элементы.ТоварыНоменклатураПоставщика);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОпераций()
	
	Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьКомиссиюПриЗакупках") Тогда
		
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьИмпортныеЗакупки") Тогда
		
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуФормаОплаты()

	Если Объект.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
		Элементы.СтраницыФормаОплаты.ТекущаяСтраница = Элементы.СтраницаБезналичнаяОплата;
	ИначеЕсли Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		Элементы.СтраницыФормаОплаты.ТекущаяСтраница = Элементы.СтраницаНаличнаяОплата;
	Иначе
		Элементы.СтраницыФормаОплаты.ТекущаяСтраница = Элементы.СтраницаЛюбая;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ОтменитьНепоставленныеСтрокиСервер(ПричинаОтмены, Знач ПроверятьОстатки = Ложь)
	
	ДокументЗакупки = РеквизитФормыВЗначение("Объект");
	КоличествоОтмененныхСтрок = ДокументЗакупки.ОтменитьНепоставленныеСтроки(ПричинаОтмены, ПроверятьОстатки);
	ЗначениеВРеквизитФормы(ДокументЗакупки, "Объект");
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	ОбновитьЗависимыеРеквизитыФормыСервер();
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовРегистрироватьЦеныПоУсловиям()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоУсловиюЦенПоставщика");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоУсловиюЦенПоставщика");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", РегистрироватьЦеныПоУсловиям);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеСервер()
	
	Документы.ЗаказПоставщику.РассчитатьСостояние(
		Объект.Ссылка,
		Объект.Договор,
		ЭтаФорма);
	Если СуммаДолга = 0 Тогда
		Элементы.ГруппаДолг.ТекущаяСтраница = Элементы.ГруппаСтраницаДолг;
	ИначеЕсли СуммаДолга > 0 Тогда
		Элементы.ГруппаДолг.ТекущаяСтраница = Элементы.ГруппаСтраницаДолгПоставщика;
	Иначе
		Элементы.ГруппаДолг.ТекущаяСтраница = Элементы.ГруппаСтраницаНашДолг;
	КонецЕсли;
	
	Если СуммаДолга < 0 Тогда
		СуммаДолга = - СуммаДолга;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам()
	
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		Элементы.ГруппаРасчеты.Заголовок = НСтр("ru='Расчеты по договору'");
	Иначе
		Элементы.ГруппаРасчеты.Заголовок = НСтр("ru='Расчеты по заказу'");
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ПроцентДолга");
	МассивЭлементов.Добавить("СуммаОплаты");
	МассивЭлементов.Добавить("ПроцентОплаты");
	МассивЭлементов.Добавить("СуммаПоступления");
	МассивЭлементов.Добавить("ПроцентПоступления");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
		И ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
	);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("НашДолгСуммаДолга");
	МассивЭлементов.Добавить("ДолгПоставщикаСуммаДолга");
	МассивЭлементов.Добавить("СуммаДолга");
	МассивЭлементов.Добавить("ПроцентДолга");
	МассивЭлементов.Добавить("СуммаОплаты");
	МассивЭлементов.Добавить("ПроцентОплаты");
	МассивЭлементов.Добавить("СуммаПоступления");
	МассивЭлементов.Добавить("ПроцентПоступления");
	МассивЭлементов.Добавить("СуммаАвансаДоПодтверждения");
	МассивЭлементов.Добавить("ПроцентАвансаДоПодтверждения");
	МассивЭлементов.Добавить("СуммаПредоплатыДоПоступления");
	МассивЭлементов.Добавить("ПроцентПредоплатыДоПоступления");
	МассивЭлементов.Добавить("СуммаКредитаПослеПоступления");
	МассивЭлементов.Добавить("ПроцентКредитаПослеПоступления");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
	);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеСервер()
	
	Возврат ЗакупкиСервер.ПоместитьТоварыВоВременноеХранилище(Объект.Товары);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТоварыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для каждого ТекСтрока Из ТаблицаТоваров Цикл
		
		МассивСтрокКоллекции = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", ТекСтрока.НомерСтроки));
		Если МассивСтрокКоллекции.Количество() <> 1 Тогда
			Продолжить;
		Иначе
			СтрокаКоллекции = МассивСтрокКоллекции[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаКоллекции, ТекСтрока, "Номенклатура, Характеристика, Упаковка");
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ПроверитьСтатьюАналитикуРасходов", ТекСтрока.Номенклатура);
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить(
			"ПроверитьСопоставленнуюНоменклатуруПоставщика",
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
				Объект,
				НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика
			)
		);
		СтруктураДействий.Вставить(
			"ПроверитьЗаполнитьСклад",
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(
				Объект,
				СкладГруппа
			)
		);
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаКоллекции, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	ОбновитьЗависимыеРеквизитыФормыСервер();
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеДатыПоступленияСервер(ДатаПоступления);
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция МаксимальнаяДатаАванса()
	
	МаксДатаАванса = '00010101';
	
	Для Каждого ТекЭтап Из Объект.ЭтапыГрафикаОплаты Цикл
		
		Если ТекЭтап.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления") Или
			ТекЭтап.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.АвансДоПодтверждения") Тогда
			
			МаксДатаАванса = Макс(МаксДатаАванса, ТекЭтап.ДатаПлатежа);
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат МаксДатаАванса;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДатуПоступления(МассивВыделенныхСтрок = Неопределено)

	ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
	Если Объект.Товары.Количество() > 0 Тогда
		Если РаботаСДиалогамиКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаПоступления, НСтр("ru='Введите дату поступления'"), ЧастиДаты.Дата) Тогда
			
			Если МассивВыделенныхСтрок = Неопределено Тогда

				Для Каждого СтрокаТЧ Из Объект.Товары Цикл
					СтрокаТЧ.ДатаПоступления = ДатаПоступления;
				КонецЦикла;

			Иначе

				Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл

					СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
					СтрокаТЧ.ДатаПоступления = ДатаПоступления;

				КонецЦикла;

			КонецЕсли;
			
			ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияДатПоступления(ДатаПоступления, (МассивВыделенныхСтрок <> Неопределено));

		КонецЕсли;
	Иначе
		ТекстПредупреждения = НСтр("ru='В документе нет строк для заполнения. Дата поступления не будет заполнена.'");
		Предупреждение(ТекстПредупреждения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПустыеДатыПоступления()
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьПустуюДатуПоступленияСервер() Тогда
		
		ТекстВопроса = НСтр("ru='Заполнить дату поступления в строках, в которых дата не заполнена?'");
		// АК ИГОРЬ 19 03 2013
		ОтветНаВопрос = КодВозвратаДиалога.Да;
//		ОтветНаВопрос = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
		// Предложим выбрать дату и заполним этой датой дату в строках
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			
			Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
				ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
			Иначе
				ДатаПоступления = ТекущаяДата();
			КонецЕсли;
			
			Если РаботаСДиалогамиКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаПоступления, НСтр("ru='Введите дату поступления'"), ЧастиДаты.Дата) Тогда
				ЗаполнитьПустыеДатыПоступленияСервер(ДатаПоступления);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РедактированиеДоступно()
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Согласован") Или
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Подтвержден") Или
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.КПоступлению") Или
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Закрыт") Тогда
		
		Отказ = Объект.Согласован;
		
	Иначе
		
		Отказ = Ложь;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере 
Процедура ЗаполнитьБанковскийСчетИКассуПоОрганизации(Организация)
	
	// Заполним банковский счет и кассу в зависимости от органиазции
	СвойстваАвтозаполнения = Новый Структура("Организация, БанковскийСчет, Касса", Объект.Организация);
	
	ЗаполнитьЗначенияСвойствАвтозаполненияСервер(Объект.Ссылка, СвойстваАвтозаполнения);
	
	ЗаполнитьЗначенияСвойств(Объект, СвойстваАвтозаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если Не Объект.Согласован Тогда
		Попытка
			ЗаблокироватьДанныеФормыДляРедактирования();
			Модифицированность = Истина;
		Исключение
			Предупреждение(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",            Ложь);
	ПараметрыФормы.Вставить("СуммаДокумента",            СуммаЗаказано);
	ПараметрыФормы.Вставить("Партнер",                   Объект.Партнер);
	ПараметрыФормы.Вставить("Соглашение",                Объект.Соглашение);
	ПараметрыФормы.Вставить("Дата",                      Объект.Дата);
	ПараметрыФормы.Вставить("ЖелаемаяДатаПоступления",   Объект.ЖелаемаяДатаПоступления);
	ПараметрыФормы.Вставить("Валюта",                    Объект.Валюта);
	ПараметрыФормы.Вставить("УчитыватьВариантОплаты",    Истина);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",   УникальныйИдентификатор);
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилищеНаСервере());
	ПараметрыФормы.Вставить("Ключ",                      Объект.Ссылка);
	ПараметрыФормы.Вставить("ФормаОплаты",               Объект.ФормаОплаты);
	
	ПараметрыОплаты = ОткрытьФормуМодально("ОбщаяФорма.ЭтапыОплатыПоставщику", ПараметрыФормы, ЭтаФорма);
	
	Если ПараметрыОплаты <> Неопределено Тогда
		
		Объект.Согласован = Ложь;
		Объект.ЭтапыГрафикаОплаты.Очистить();
		Если ЗначениеЗаполнено(ПараметрыОплаты.АдресВоВременномХранилище) Тогда
			ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(ПараметрыОплаты.АдресВоВременномХранилище);
		КонецЕсли;
		НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
		
		УстановитьДоступностьЭлементовПоСтатусуСервер();
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ЭтапыГрафикаОплаты.Выгрузить());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ЭтапыОплаты = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
		НоваяСтрока = Объект.ЭтапыГрафикаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Товары", УникальныйИдентификатор, ТолькоВыделенныеСтроки,,,Ложь);
	
КонецФункции

&НаКлиенте 
Процедура ЗаполнитьПустуюДатуПоступления()
	
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьПустуюДатуПоступленияСервер() Тогда
		
		ТекстВопроса = НСтр("ru='Заполнить дату поступления?'");
		// АК ИГОРЬ 19 03 2013
		ОтветНаВопрос = КодВозвратаДиалога.Да;
//		ОтветНаВопрос = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
		// Предложим выбрать дату и заполним этой датой дату в строках
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			
			Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
				Объект.ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
			Иначе
				Объект.ДатаПоступления = ТекущаяДата();
			КонецЕсли;
			
			Если РаботаСДиалогамиКлиент.ВвестиДатуСКонтролемПустогоЗначения(Объект.ДатаПоступления, НСтр("ru='Введите дату поступления'"), ЧастиДаты.Дата) Тогда
				ЗаполнитьДатыПоступленияСервер(Объект.ДатаПоступления);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Функция МаксимальнаяДатаПоступления()
	
	МаксимальнаяДатаПоступления = Дата(1,1,1);
	Для Каждого Товар Из Объект.Товары Цикл 
		МаксимальнаяДатаПоступления = Макс(МаксимальнаяДатаПоступления, Товар.ДатаПоступления);
		
	КонецЦикла;
	
	Возврат МаксимальнаяДатаПоступления
	
КонецФункции

&НаСервере 
Процедура ЗаполнитьДатыПоступленияСервер(ДатаПоступления)

	Для Каждого Товар Из Объект.Товары Цикл
		Товар.ДатаПоступления = ДатаПоступления;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьВидимостьЭлементовФормыДатПоступления()
	
	Элементы.ГруппаТоварыДатаПоступления.Видимость = НЕ Объект.ПоступлениеОднойДатой;
	Элементы.ТоварыДатаПоступления.Видимость = НЕ Объект.ПоступлениеОднойДатой;
	Элементы.ДатаПоступления.Видимость = Объект.ПоступлениеОднойДатой;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСоглашений()
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		КоличествоСоглашенийСПоставшиком  = ЗакупкиВызовСервера.ПолучитьКоличествоСоглашенийСПоставщиком(Объект.Партнер);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Соглашение", "Видимость", КоличествоСоглашенийСПоставшиком > 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
	
	Если Не ПартнерИзменился Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		Если Объект.Товары.Итог("Цена")<>0 И ВопросПользователюПередЗаполнениемЦенПоСоглашению() Тогда
			ЗаполнитьЦеныПоСоглашениюСервер();
		КонецЕсли;
		
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияУсловийЗакупокПоУмолчанию();
	Иначе 
		// Заполним НалогообложениеНДС зависимости от партнера
		СвойстваАвтозаполнения = Новый Структура("Партнер, НалогообложениеНДС", Объект.Партнер);
		ЗаполнитьЗначенияСвойствАвтозаполненияСервер(Объект.Ссылка, СвойстваАвтозаполнения);
		Если СвойстваАвтозаполнения.НалогообложениеНДС <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, СвойстваАвтозаполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтатусДокумента(Команда)
	
	Перем РезультатыПроверки;
	
	ОчиститьСообщения();
	
	ПроверкаЗаполненияИРасчетСтатуса(КэшированныеЗначения, РезультатыПроверки);
	
	ТребуетсяРассчитатьСтатус = Ложь;
	
	Если НЕ РезультатыПроверки.СтатусРассчитан И НЕ РезультатыПроверки.ВопросТребованияРасчета = Неопределено Тогда
		
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить("РассчитатьИЗаполнить", НСтр("ru = 'Рассчитать и заполнить'"));
		КнопкиВопроса.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		
		Ответ = Вопрос(РезультатыПроверки.ВопросТребованияРасчета, 
						КнопкиВопроса, , 
						КнопкиВопроса[1].Значение,
						НСтр("ru= 'Автоматический расчет статуса'"));
		
		Если Ответ = КнопкиВопроса[0].Значение Тогда
			ТребуетсяРассчитатьСтатус = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТребуетсяРассчитатьСтатус Тогда
		РассчитатьСтатусДокументаСервер(КэшированныеЗначения, РезультатыПроверки.СтатусРассчитан);
	КонецЕсли;
	
	ОповеститьОбОкончанииРасчетаСтатуса(РезультатыПроверки.СтатусРассчитан);
	
КонецПроцедуры

&НаКлиенте 
Процедура ОповеститьОбОкончанииРасчетаСтатуса(СтатусРассчитан = Истина) Экспорт

	Если СтатусРассчитан Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Статус заказа рассчитан'"),
			,
			НСтр("ru = 'Статус заказа изменен на'") + Символы.НПП + """" + Объект.Статус + """",
			БиблиотекаКартинок.Информация32
		);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Статус заказа не рассчитан'"),
			,
			НСтр("ru = 'Статус заказа остался прежним'") + Символы.НПП + """" + Объект.Статус + """",
			БиблиотекаКартинок.Информация32
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСтатьяРасходовПриИзмененииСервер(СтатьяРасходов, АналитикаРасходов)
	
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, СтатьяРасходов, АналитикаРасходов);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Автоматический расчет статуса заказа

&НаСервере 
Процедура ПроверкаЗаполненияИРасчетСтатуса(КэшированныеЗначения, РезультатПроверки)
	
	РезультатПроверки = Новый Структура("СтатусРассчитан, ВопросТребованияРасчета", Ложь, Неопределено);
	
	ТекстВопроса = "Для автоматического расчета статуса требуется:" + Символы.ПС;
	ЕстьТребованияРасчета = Ложь;
	
	// Проверим необходимые для расчета статуса данные
	
	// Проверим даты поступления
	Если Не (Объект.Склад.Пустая() 
		Или Объект.Товары.Количество() = 0)
		И ЗакупкиВызовСервера.ДатаПоступленияПустая(Объект, "Товары") Тогда
		
		Если Объект.ПоступлениеОднойДатой Тогда
			ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Заполнить дату поступления.'");
		Иначе
			ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Заполнить даты поступления возвращаемых товаров.'");
		КонецЕсли;
		
		ЕстьТребованияРасчета = Истина;
		
	КонецЕсли;

	
	// Проверим этапы оплаты
	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию")
		И ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
		
		СуммаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
		
		// Очистим если все строки отменены или сумма нулевая
		Если СуммаЗаказано = 0  И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			КоличествоЗаказанныхСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Отменено", Ложь)).Количество();
			
			Если КоличествоЗаказанныхСтрок = 0 И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
				ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Очистить таблицу этапов расчетов, так как в заказе все строки отменены.'");
				
			Иначе
				ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Очистить таблицу этапов расчетов, так как сумма строк нулевая.'");
				
			КонецЕсли;
			
			ЕстьТребованияРасчета = Истина;
		
		ИначеЕсли СуммаЗаказано <> СуммаЭтаповОплаты Тогда
			
			Если Объект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
				
				ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
				ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты);
				
				Если ГрафикСоглашенияЗаполнен Тогда
					ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Заполнить этапы расчетов в соответствии с соглашением.'");
				ИначеЕсли ГрафикЗаполнен Тогда
					ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru = 'Заполнить этапы расчетов в соответствии с графиком оплаты.'");
				Иначе
					Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаОтгрузки) Тогда
						ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru='Заполнить этапы расчетов. Будет добавлен один этап ""%ВариантОплаты%"" с оплатой 100% на дату планируемого поступления.'");
						
					Иначе
						ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru='Заполнить этапы расчетов. Будет добавлен один этап ""%ВариантОплаты%"" с оплатой 100%.'");
						
					КонецЕсли;
					ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВариантОплаты%", ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления"));
				КонецЕсли;
				
			Иначе
				
				ТекстВопроса = ТекстВопроса + ?(ПустаяСтрока(ТекстВопроса), "", Символы.ПС) + НСтр("ru='Скорректировать суммы этапов расчетов, так как они не совпадают с суммой строк.'");
				
			КонецЕсли;
			
			ЕстьТребованияРасчета = Истина;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьТребованияРасчета Тогда
		РезультатПроверки.ВопросТребованияРасчета = ТекстВопроса;
		
	Иначе
		РассчитатьСтатусДокументаСервер(КэшированныеЗначения, РезультатПроверки.СтатусРассчитан);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура РассчитатьСтатусДокументаСервер(КэшированныеЗначения, СтатусРассчитан)
	
	СтатусДоРасчета = Объект.Статус;
	
	ЗаполнитьПередРасчетомМаксимальногоСтатуса(КэшированныеЗначения);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Заказ", Объект.Ссылка);
	ПараметрыРасчета.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	ПараметрыРасчета.Вставить("Проведен", Объект.Проведен);
	ПараметрыРасчета.Вставить("Статус", Объект.Статус);
	ПараметрыРасчета.Вставить("СуммаАвансаДоПодтверждения", СуммаАвансаДоПодтверждения);
	ПараметрыРасчета.Вставить("СуммаПредоплатыДоПоступления", СуммаПредоплатыДоПоступления);
	ПараметрыРасчета.Вставить("СуммаДокумента", СуммаЗаказано);
	ПараметрыРасчета.Вставить("Договор", Объект.Договор);
	ПараметрыРасчета.Вставить("ПорядокРасчетов", ПорядокРасчетов);
	ПараметрыРасчета.Вставить("Склад", Объект.Склад);
	ПараметрыРасчета.Вставить("ЖелаемаяДатаПоступления", Объект.ЖелаемаяДатаПоступления);
	ПараметрыРасчета.Вставить("АдресТовары", ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить()));
	ПараметрыРасчета.Вставить("ЭтапыГрафикаОплаты", Объект.ЭтапыГрафикаОплаты);
	ПараметрыРасчета.Вставить("ОтборПоСостояниюНаличия", Перечисления.СостоянияНаличия.Любое);
	ПараметрыРасчета.Вставить("ПоступлениеОднойДатой", Объект.ПоступлениеОднойДатой);
	ПараметрыРасчета.Вставить("ВсеСтрокиОтменены", ВсеСтрокиОтменены);
	
	Если Не ДокументЗаполненКорректно() Тогда
		Если Объект.Статус.Пустая() Тогда
			Объект.Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
			ТекстСообщения = НСтр("ru = 'Максимально возможный статус - """ + Объект.Статус + """, так как документ заполнен некорректно'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Статус не может быть рассчитан, так как документ заполнен некорректно'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		Возврат;
		
	КонецЕсли;
	
	Объект.Статус = Документы.ЗаказПоставщику.МаксимальныйСтатусЗаказаПоставщику(ПараметрыРасчета, КэшированныеЗначения);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
		Новый Структура("Номенклатура", "ТипНоменклатуры")
		)
	);

	ПриИзмененииСтатусаСервер();
	
	Если НЕ СтатусДоРасчета = Объект.Статус Тогда
		СтатусРассчитан = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьПередРасчетомМаксимальногоСтатуса(КэшированныеЗначения)
	
	// Заполним необходимые для расчета статуса данные
	
	// Заполним даты поступления
	Если Объект.Склад.Пустая() 
		Или Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакупкиВызовСервера.ДатаПоступленияПустая(Объект, "Товары") Тогда
		Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
			ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
		Иначе
			ДатаПоступления = ТекущаяДата();
		КонецЕсли;

		Если Объект.ПоступлениеОднойДатой Тогда
			ЗаполнитьПустуюДатуПоступленияСервер(ДатаПоступления, Неопределено);
		Иначе
			ЗаполнитьПустыеДатыПоступленияСервер(ДатаПоступления);
		КонецЕсли;
	КонецЕсли;
	
	
	СтруктураДействий = Новый Структура;
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		Если ТекущаяСтрока.Отменено Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;

	// Заполним этапы оплаты
	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию")
		И ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
		
		СуммаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
		РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
		ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ЗакупкиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
		
		// Очистим если все строки отменены или сумма нулевая
		Если СуммаЗаказано = 0  И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			
			Если ВсеСтрокиОтменены И Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
				Объект.ЭтапыГрафикаОплаты.Очистить();
				
			Иначе
				Объект.ЭтапыГрафикаОплаты.Очистить();
				
			КонецЕсли;
			
			НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
			
		ИначеЕсли СуммаЗаказано <> СуммаЭтаповОплаты Тогда
			
			// Заполним этапы оплаты, если они не указаны
			Если Объект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
				
				Если Объект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
					
					Если ГрафикСоглашенияЗаполнен  Тогда
						ЗакупкиСервер.ЗаполнитьЭтапыГрафикаОплатыПоСоглашению(Объект, СуммаЗаказано);
					Иначе
						ДокументПродажи = РеквизитФормыВЗначение("Объект");
						ДокументПродажи.ЗаполнитьЭтапыГрафикаОплаты();
						ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
					КонецЕсли;
					
					НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
				Иначе
					
					ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, СуммаЗаказано);
					
					НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
					
				КонецЕсли;
				
				// Перезаполним если сумма заказанных строк не совпадает с суммой по этапам оплаты
			Иначе
				
				ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, СуммаЗаказано);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	
КонецПроцедуры

&НаСервере 
Функция ДокументЗаполненКорректно()
	
	ЕстьОшибки = Ложь;
	
	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.ЗаказПоставщику"));
	УстановитьСоответствиеОбъектаИРеквизитаФормы(ДокументОбъект, "Объект");
	
	ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению;
	
	ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ДокументОбъект, ЕстьОшибки);
	
	ДокументОбъект.Статус = Объект.Статус;
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
		Новый Структура("Номенклатура", "ТипНоменклатуры")
		)
	);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОтборПоПустым = Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	ИскомыеСтроки = Объект.Товары.НайтиСтроки(ОтборПоПустым);
	
	Если НЕ Объект.Соглашение.Пустая()
		И Объект.Соглашение.ИспользуютсяДоговорыКонтрагентов
		И Объект.Договор.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Договор"" не заполнено'"), ,
			"Объект.Договор");
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указан ни один заказываемый товар'"), ,
			"Объект.Товары");
		
		ЕстьОшибки = Истина;
		
	ИначеЕсли ИскомыеСтроки.Количество() > 0 Тогда
		Для Каждого ИскомаяСтрока Из ИскомыеСтроки Цикл 
			АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ИскомаяСтрока.НомерСтроки);
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Номенклатура""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки, ,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ИскомаяСтрока.НомерСтроки, "Номенклатура"), "Объект",
				ЕстьОшибки
			);
		КонецЦикла;
	КонецЕсли;

	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию") 
		И ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным")
		И Объект.ЭтапыГрафикаОплаты.Количество() = 0 И Объект.Товары.Количество() <> 0 Тогда
		
		Если НЕ ВсеСтрокиОтменены Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнены этапы графика оплаты'"), ,
				"НадписьЭтапыОплаты");
			
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

&НаСервере
Функция ПроверитьПустуюДатуПоступленияСервер()
	
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		
		Если Не ТекСтрока.Отменено
			И Не ЗначениеЗаполнено(ТекСтрока.ДатаПоступления) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПустуюДатуПоступленияСервер(ДатаПоступления, Знач МассивВыделенныхСтрок)

	Если МассивВыделенныхСтрок = Неопределено Тогда

		Для Каждого СтрокаТЧ Из Объект.ВозвращаемыеТовары Цикл
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЦикла;

	Иначе

		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТЧ = Объект.ВозвращаемыеТовары.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТЧ.ДатаПоступления = ДатаПоступления;
		КонецЦикла;

	КонецЕсли;
	
	Объект.ДатаПоступления = ДатаПоступления;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьЗначенияСвойствАвтозаполненияСервер(ОбъектСсылка, СвойстваАвтозаполнения)
	
	ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(ОбъектСсылка, СвойстваАвтозаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокРасчетов()
	
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(Объект);
	
	ОбновитьСостояниеЭлементовУправленияИтоговПоРасчетам();
	УстановитьВидимостьЭлементовПоПорядкуРасчетов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоПорядкуРасчетов()
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("НадписьЭтапыОплаты");
	МассивЭлементов.Добавить("Касса");
	МассивЭлементов.Добавить("БанковскийСчет");
	МассивЭлементов.Добавить("ДекорацияОплата");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
	);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "Доступность", Форма.Объект.ВернутьМногооборотнуюТару);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	
	СтруктураДействийДобавленныеСтроки =  ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДействийИзмененныеСтроки);;
	СтруктураДействийДобавленныеСтроки.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		"Номенклатура,Характеристика,Склад,ДатаПоступления",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийДобавленныеСтроки);
		
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	ОбновитьЗависимыеРеквизитыФормыСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Контроль несогласованных изменений

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении[Элемент.Имя]+"(Элемент)");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие[Элемент.Имя]+"(Элемент)");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.Команды[Команда.Имя]+"(Команда)");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения[Элемент.Имя]+"(Элемент, Отказ)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением[Имя]+"(Элемент, Отказ)");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления[Имя]+"(Элемент, Отказ, Копирование, Родитель, Группа)");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с буфером обмена 

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	ХранилищаНастроек.ХранилищеБуфераОбмена.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПриемНаКомиссию") Тогда
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре());
		ТаблицаТоваров = ХранилищаНастроек.ХранилищеБуфераОбмена.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	Иначе
		ТаблицаТоваров = ХранилищаНастроек.ХранилищеБуфераОбмена.ПолучитьСтрокиИзБуфераОбмена();
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		Если Объект.ПоступлениеОднойДатой Тогда
			ТекущаяСтрока.ДатаПоступления = Объект.ДатаПоступления;
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	ОбновитьЗависимыеРеквизитыФормыСервер();
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ХранилищаНастроек.ХранилищеБуфераОбмена.БуферОбменаПустой());
		
	Иначе
		
		МассивЭлементов.Добавить("ТоварыСкопироватьСтроки");
		МассивЭлементов.Добавить("ТоварыКонтекстноеМенюСкопироватьСтроки");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВернутьМногооборотнуюТаруПриИзмененииСервер()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	РассчитатьИтоговыеПоказателиЗаказа(ЭтаФорма);
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЭскизФайлПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//ДОБАВЛЕННЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//ТЧ  Товары
&НаКлиенте
Процедура ТоварыЭскизФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	//
	СтандартнаяОбработка = Ложь;
	
	//
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Предупреждение("Необходимо записать документ");
		Возврат;
	КонецЕсли;
	
	//
	Заголовок = НСтр("ru = 'Присоединенные файлы'");
	
	//
	_Параметры = Новый Структура;
	_Параметры.Вставить("ВладелецФайла", Объект.Ссылка);
	_Параметры.Вставить("ПризнакВыбор", Истина);
	_Параметры.Вставить("ЗаголовокФормы", Заголовок);
	
	//
	ФормаВыбора = ПолучитьФорму(
		"Справочник.Файлы.Форма.ФормаСпискаПрисоединенныхФайлов", 
		_Параметры,
		Элемент);
	
	//
	ФормаВыбора.Параметры.РежимВыбора = Истина;
	
	//
	ЗначениеВыбора = ФормаВыбора.ОткрытьМодально();
	
	//
	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		Элементы.Товары.ТекущиеДанные.АК_ЭскизФайл = ЗначениеВыбора;
	КонецЕсли;	


КонецПроцедуры

&НаСервере
Процедура ОбновитьВремяНаСервере()
	Для Каждого СтрДопУслуги Из Объект.ДополнительныеУслуги Цикл
		Если СтрДопУслуги.НормаВремени = 0 Тогда
			СтрДопУслуги.НормаВремени = СтрДопУслуги.Номенклатура.акВремяСборки; 
		КонецЕсли;
		СтрДопУслуги.ОбщееВремя = СтрДопУслуги.НормаВремени * СтрДопУслуги.Количество;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеУслугиПриИзменении(Элемент)
	ОбновитьВремяНаСервере();	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьВремя(Команда)
	ОбновитьВремяНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьЗаказПоставщикаПоЗаказуКлиенту(Команда)
	ПерезаполнитьЗаказ();	
КонецПроцедуры

//Перезаполнить Заказ Поставщика По Заказу Клиенту
&НаСервере
Процедура ПерезаполнитьЗаказ()		
	Если ЗначениеЗаполнено(Объект.ДокументОснование) и ТипЗнч(Объект.ДокументОснование)=Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ЗаказПоставщику=РеквизитФормыВЗначение("Объект");
		ЗаказПоставщику.ЗаполнитьДокументНаОснованииЗаказа(Объект.ДокументОснование);
		ЗначениеВРеквизитФормы(ЗаказПоставщику,"Объект");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	
	Если ПровестиДокумент(Объект.Ссылка) Тогда	  
		Текст = "Создать заявку на расход ДС?";
		Результат = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , , "Создание заявки");
		Пока  Результат = КодВозвратаДиалога.Нет Цикл 
			Сообщить("Создание заявки обязательно!");
			Результат = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , , "Создание заявки");
		КонецЦикла;			
	КонецЕсли;
	
	ЭтаФорма.Закрыть();
КонецПроцедуры	

 &НаСервере
Функция  ПровестиДокумент(Документ)
	
	ДокОбъект = Документ.получитьОбъект();
	ДокОбъект.записать(РежимЗаписиДокумента.Проведение);
	
	
	Если   ДокОбъект.Движения.ЗаказыПоставщикам.количество()>0 Тогда
		Возврат ИСТИНА;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

//1с-ит. Чечин Петр. Разделение заказов по ставкам НДС.
&НаКлиенте
Процедура РазделитьЗаказПоСтавкамНДС(Команда)
	Сообщение = Новый СообщениеПользователю;
	Если Модифицированность Тогда
		Сообщение.Текст = "Запишите документ.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	//проверка необходимости разделения документа на различные ставки НДС
	Если НетРазличныхСтавокНДС(Объект.Ссылка) Тогда
		Сообщение.Текст = "Документ разделять не нужно.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	//разделение документов.
	НовДокументы = РазделитьЗаказПоСтавкамНДСНаСервере();
	//открываем формы новых документов
	Для каждого текДок из НовДокументы Цикл
		текФорма = ПолучитьФорму("Документ.ЗаказПоставщику.ФормаОбъекта",Новый Структура("Ключ",текДок));
		текФорма.Открыть();
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Функция  РазделитьЗаказПоСтавкамНДСНаСервере()
	МассивДокументов = Новый Массив;
	текДокумент = РеквизитФормыВЗначение("Объект");
	тзТовары = текДокумент.Товары.Выгрузить();
	//если есть не заполненные ставки, заполним из без НДС;
	Для каждого текСтрока из тзТовары Цикл
		Если НЕ ЗначениеЗаполнено(текСтрока.СтавкаНДС) Тогда
			текСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;				
		КонецЕсли;		
	КонецЦикла;	
	тзТовары.Сортировать("СтавкаНДС,НомерСтроки");
	текСтавка = Неопределено;
	НовДокумент = Неопределено;
	перваяСтавкаНДС = Неопределено;
	НомерДокумента = 1;
	Для каждого текСтрока из тзТовары Цикл
		Если текСтрока.СтавкаНДС <> текСтавка Тогда
			Если текСтавка = Неопределено Тогда 
				текСтавка = текСтрока.СтавкаНДС;
				перваяСтавкаНДС = текСтавка;
				Продолжить;
			КонецЕсли;
			Если НовДокумент <> Неопределено Тогда
				НовДокумент.Записать();
				МассивДокументов.Добавить(НовДокумент.Ссылка);
			КонецЕсли;
			
			текСтавка = текСтрока.СтавкаНДС;
			НовДокумент = Документы.ЗаказПоставщику.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(НовДокумент,текДокумент);
			Префикс = Лев(НовДокумент.Номер,1) + Строка(НомерДокумента);
			НовДокумент.Номер =  Префикс +Прав(НовДокумент.Номер,СтрДлина(НовДокумент.Номер)-СтрДлина(Префикс));
			НомерДокумента = НомерДокумента + 1;
		КонецЕсли;
		Если НовДокумент = Неопределено Тогда Продолжить КонецЕсли;
		НовСтрока = НовДокумент.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,текСтрока);
		
	КонецЦикла;
	//----------------------------------------------------------------------------
	Если НовДокумент <> Неопределено Тогда
		НовДокумент.Записать();
		МассивДокументов.Добавить(НовДокумент.Ссылка);
	КонецЕсли;
	//----------------------------------------------------------------------------
	//очистим документ основание от первой ставки НДС
	УдаляемыеСтроки = Новый Массив;
	Для Каждого текСтрока из текДокумент.Товары Цикл
		Если текСтрока.СтавкаНДС <> перваяСтавкаНДС Тогда
			УдаляемыеСтроки.Добавить(текСтрока);
		КонецЕсли;
	КонецЦикла;
	для Каждого текСтрока из УдаляемыеСтроки Цикл
		текДокумент.Товары.Удалить(текСтрока);		
	КонецЦикла;
	текДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	ЗначениеВРеквизитФормы(текДокумент,"Объект");
	Возврат МассивДокументов;
	
	
КонецФункции

&НаСервереБезКонтекста
Функция НетРазличныхСтавокНДС(Док)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщикуТовары.СтавкаНДС
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка = &Док
		|	И ЗаказПоставщикуТовары.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПоставщикуТовары.СтавкаНДС";

	Запрос.УстановитьПараметр("Док", Док);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Количество() <= 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


