////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаказыПоставщикам = Параметры.ЗаказыПоставщикам;
	ПоступлениеТоваровУслуг = Параметры.ПоступлениеТоваровУслуг;
	ЗаполнитьОтклоненияПоЗаказамПоставщикам();
	
	Если ТоварыКОтмене.Количество() > 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТоварыКОтмене;
	ИначеЕсли ОтклоненияЦен.Количество() > 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРазличияЦен;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗакрытиеЗаказов;
		Элементы.ОкончаниеНазад.Видимость = Ложь;
		Если ЗаказыЗакрыты Тогда
			Элементы.СтраницыЗакрытиеЗаказов.ТекущаяСтраница = Элементы.СтраницаЗакрытиеЗаказовИнформация2;
		Иначе
			Элементы.СтраницыЗакрытиеЗаказов.ТекущаяСтраница = Элементы.СтраницаЗакрытиеЗаказовИнформация1;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьТекущуюСтраницуПанелиНавигации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не Готово И Модифицированность Тогда
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		СписокКнопок.Добавить("НеЗакрывать", НСтр("ru = 'Не закрывать'"));
		
		ОтветНаВопрос = Вопрос(НСтр("ru = 'Закрытие заказов не выполнено. Закрыть форму?'"), СписокКнопок);
		
		Если ОтветНаВопрос = "НеЗакрывать" Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ К ОТМЕНЕ

&НаКлиенте
Процедура ТоварыКОтменеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ТоварыКОтмене.ТекущиеДанные <> Неопределено Тогда
		
		Если Поле.Имя = "ТоварыКОтменеЗаказПоставщику" Тогда
			ОткрытьЗначение(Элементы.ТоварыКОтмене.ТекущиеДанные.ЗаказПоставщику);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ОТКЛОНЕНИЯ ЦЕН

&НаКлиенте
Процедура ОтклоненияЦенВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ОтклоненияЦен.ТекущиеДанные <> Неопределено Тогда
		
		Если Поле.Имя = "ОтклоненияЦенЗаказПоставщику" Тогда
			ОткрытьЗначение(Элементы.ОтклоненияЦен.ТекущиеДанные.ЗаказПоставщику);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Далее(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТоварыКОтмене Тогда
		
		ПричинаОтменыНеЗаполнена = Ложь;
		
		ОчиститьСообщения();
		
		Если Не ЗначениеЗаполнено(ПричинаОтмены) Тогда
			
			ТекстОшибки = НСтр("ru='Поле ""Причина отмены"" не заполнено'");
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"ПричинаОтмены",
				,
				
				);
				
			Возврат;
			
		КонецЕсли;
		
		Если ОтклоненияЦен.Количество() > 0 Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРазличияЦен;
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗакрытиеЗаказов;
		КонецЕсли;
	
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРазличияЦен Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗакрытиеЗаказов;
		
	КонецЕсли;
	
	УстановитьТекущуюСтраницуПанелиНавигации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗакрытиеЗаказов Тогда
		
		Если ОтклоненияЦен.Количество() > 0 Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРазличияЦен;
		ИначеЕсли ТоварыКОтмене.Количество() > 0 Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТоварыКОтмене;
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРазличияЦен Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТоварыКОтмене;
		
	КонецЕсли;
	
	УстановитьТекущуюСтраницуПанелиНавигации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	Если ЗаказыЗакрыты Тогда
	
		Готово = Истина;
		Закрыть();
	
	ИначеЕсли ГотовоСервер() Тогда
		
		ТекстСообщения = НСтр("ru='Для заказов поставщикам (%КоличествоОбработанных%) установлен статус ""Закрыт""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", ЗаказыПоставщикам.Количество());
		ТекстЗаголовка = НСтр("ru='Статус ""Закрыт"" установлен'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
		Если ЗначениеЗаполнено(ПоступлениеТоваровУслуг) Тогда
			Оповестить("ЗакрытиеЗаказов", ПоступлениеТоваровУслуг);
		КонецЕсли;
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ЗаполнитьОтклоненияПоЗаказамПоставщикам()
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&ЗаказыПоставщикам)
	|	И ЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|	Остатки.Номенклатура КАК Номенклатура,
	|	Остатки.Характеристика КАК Характеристика,
	|	Остатки.КодСтроки КАК КодСтроки,
	|	Остатки.Склад КАК Склад,
	|	Остатки.КОформлениюОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику В (&ЗаказыПоставщикам)) КАК Остатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаказа.Ссылка КАК ЗаказПоставщику,
	|	ТоварыЗаказа.КодСтроки КАК КодСтроки,
	|	ТоварыЗаказа.Номенклатура КАК Номенклатура,
	|	ТоварыЗаказа.Характеристика КАК Характеристика,
	|	СУММА(ТоварыЗаказа.Количество) КАК КоличествоЗаказа,
	|	NULL КАК КоличествоПоступления,
	|	ТоварыЗаказа.Цена КАК ЦенаЗаказа,
	|	СУММА(ТоварыЗаказа.Сумма) КАК СуммаЗаказа,
	|	NULL КАК ЦенаПоступления,
	|	NULL КАК СуммаПоступления,
	|	ТоварыЗаказа.ПроцентРучнойСкидки КАК ПроцентРучнойСкидкиЗаказа,
	|	NULL КАК ПроцентРучнойСкидкиПоступления
	|ПОМЕСТИТЬ ОтклоненияЦен
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТоварыЗаказа
	|ГДЕ
	|	ТоварыЗаказа.Ссылка В(&ЗаказыПоставщикам)
	|	И ТоварыЗаказа.Ссылка.Проведен
	|	И НЕ ТоварыЗаказа.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыЗаказа.КодСтроки,
	|	ТоварыЗаказа.Номенклатура,
	|	ТоварыЗаказа.Характеристика,
	|	ТоварыЗаказа.Ссылка,
	|	ТоварыЗаказа.ПроцентРучнойСкидки,
	|	ТоварыЗаказа.Цена
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыПоступления.ЗаказПоставщику,
	|	ТоварыПоступления.КодСтроки,
	|	ТоварыПоступления.Номенклатура,
	|	ТоварыПоступления.Характеристика,
	|	NULL,
	|	СУММА(ТоварыПоступления.Количество),
	|	NULL,
	|	NULL,
	|	ТоварыПоступления.Цена,
	|	СУММА(ТоварыПоступления.Сумма),
	|	NULL,
	|	ТоварыПоступления.ПроцентРучнойСкидки
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТоварыПоступления
	|ГДЕ
	|	ТоварыПоступления.ЗаказПоставщику В(&ЗаказыПоставщикам)
	|	И ТоварыПоступления.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыПоступления.ЗаказПоставщику,
	|	ТоварыПоступления.КодСтроки,
	|	ТоварыПоступления.Номенклатура,
	|	ТоварыПоступления.Характеристика,
	|	ТоварыПоступления.Цена,
	|	ТоварыПоступления.ПроцентРучнойСкидки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтклоненияЦен.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ОтклоненияЦен.КодСтроки КАК КодСтроки,
	|	ОтклоненияЦен.Номенклатура КАК Номенклатура,
	|	ОтклоненияЦен.Характеристика КАК Характеристика,
	|	СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) КАК ЦенаЗаказа,
	|	СУММА(ОтклоненияЦен.СуммаЗаказа) КАК СуммаЗаказа,
	|	СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) КАК ЦенаПоступления,
	|	СУММА(ОтклоненияЦен.СуммаПоступления) КАК СуммаПоступления,
	|	ВЫБОР
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) = 0
	|				ИЛИ СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) * 100 / СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) - 100
	|	КОНЕЦ КАК ПроцентОтклоненияОтЦеныЗаказа,
	|	ВЫБОР
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) = 0
	|				ИЛИ СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления) * 100 / СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) - 100
	|	КОНЕЦ КАК ПроцентОтклоненияОтСуммыЗаказа,
	|	ВЫБОР
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) < СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа)
	|			ТОГДА 3
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) > СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа)
	|			ТОГДА 1
	|		ИНАЧЕ 8
	|	КОНЕЦ КАК ИндексКартинки,
	|	ВЫБОР
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления) < СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа)
	|			ТОГДА 3
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления) > СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа)
	|			ТОГДА 1
	|		ИНАЧЕ 8
	|	КОНЕЦ КАК ИндексКартинкиСуммы,
	|	ВЫБОР
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) <> СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЦенаИзменилась,
	|	ВЫБОР
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления) <> СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СуммаИзменилась,
	|	МАКСИМУМ(ОтклоненияЦен.ПроцентРучнойСкидкиЗаказа) КАК ПроцентРучнойСкидкиЗаказа,
	|	МАКСИМУМ(ОтклоненияЦен.ПроцентРучнойСкидкиПоступления) КАК ПроцентРучнойСкидкиПоступления
	|ИЗ
	|	ОтклоненияЦен КАК ОтклоненияЦен
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтклоненияЦен.ЗаказПоставщику,
	|	ОтклоненияЦен.КодСтроки,
	|	ОтклоненияЦен.Номенклатура,
	|	ОтклоненияЦен.Характеристика
	|
	|ИМЕЮЩИЕ
	|	(СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) <> СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления)
	|		ИЛИ СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) <> СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления))");
	
	Запрос.УстановитьПараметр("ЗаказыПоставщикам", ЗаказыПоставщикам.ВыгрузитьЗначения());
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаЗаказы = Результат[0].Выбрать();
	ТоварыКОтмене.Загрузить(Результат[1].Выгрузить());
	ОтклоненияЦен.Загрузить(Результат[3].Выгрузить());
	
	Если ВыборкаЗаказы.Количество() = 0 И
		ТоварыКОтмене.Количество() = 0 И
		ОтклоненияЦен.Количество() = 0 Тогда
		ЗаказыЗакрыты = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницуПанелиНавигации(Форма)
	
	Если Форма.ТоварыКОтмене.Количество() > 0 И Форма.ОтклоненияЦен.Количество() > 0 Тогда
		
		Если Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаТоварыКОтмене Тогда
			Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияНачало;
			Форма.Элементы.НачалоДалее.КнопкаПоУмолчанию = Истина;
		ИначеЕсли Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаРазличияЦен Тогда
			Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияПродолжение;
			Форма.Элементы.ПродолжениеДалее.КнопкаПоУмолчанию = Истина;
		Иначе
			Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияОкончание;
			Форма.Элементы.ОкончаниеГотово.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		
	ИначеЕсли Форма.ТоварыКОтмене.Количество() > 0 Или Форма.ОтклоненияЦен.Количество() > 0 Тогда
		
		Если Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаРазличияЦен Или
			Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаТоварыКОтмене Тогда
			Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияНачало;
			Форма.Элементы.НачалоДалее.КнопкаПоУмолчанию = Истина;
		Иначе
			Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияОкончание;
			Форма.Элементы.ОкончаниеГотово.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		
	Иначе
		
		Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияОкончание;
		Форма.Элементы.ОкончаниеГотово.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ГотовоСервер()
	
	КоличествоОбработанных = 0;
	Готово = Истина;
	ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать          = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
	
	НачатьТранзакцию();
	
	Для Каждого ТекСтрока Из ЗаказыПоставщикам Цикл
		
			// Захват объекта для редактирования
			Попытка
				ЗаблокироватьДанныеДляРедактирования(ТекСтрока.Значение);
			Исключение
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", ТекСтрока.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ТекСтрока.Значение);
				Продолжить;
			КонецПопытки;
			
			// Получение объекта документа
			Объект = ТекСтрока.Значение.ПолучитьОбъект();
			
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
			
			СтруктураДействийИзмененияЦен = Новый Структура;
			СтруктураДействийИзмененияЦен.Вставить("ПересчитатьСумму");
			СтруктураДействийИзмененияЦен.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействийИзмененияЦен.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействийИзмененияЦен.Вставить("ПересчитатьСуммуРучнойСкидки");
			СтруктураДействийИзмененияЦен.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			
			СтруктураДействийИзмененияСумм = Новый Структура;
			СтруктураДействийИзмененияСумм.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействийИзмененияСумм.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействийИзмененияСумм.Вставить("ПересчитатьСуммуРучнойСкидки");
			
			ЦеныСкорректированы = Ложь;
			
			Для Каждого СтрокаОтклонений Из ОтклоненияЦен Цикл
				
				Если СтрокаОтклонений.ЗаказПоставщику = ТекСтрока.Значение Тогда
					
					НайденнаяСтрока = Объект.Товары.Найти(СтрокаОтклонений.КодСтроки, "КодСтроки");
					
					Если НЕ СтрокаОтклонений.ЦенаИзменилась И СтрокаОтклонений.СуммаИзменилась Тогда
						
						Если НайденнаяСтрока <> Неопределено Тогда
							
							НайденнаяСтрока.Сумма = СтрокаОтклонений.СуммаПоступления;
							Если СтрокаОтклонений.ПроцентРучнойСкидкиПоступления <> 0 Тогда
								НайденнаяСтрока.ПроцентРучнойСкидки = -(СтрокаОтклонений.СуммаПоступления*100/(НайденнаяСтрока.КоличествоУпаковок*НайденнаяСтрока.Цена)-100);
							Иначе
								НайденнаяСтрока.ПроцентРучнойСкидки = 0;
							КонецЕсли; 
							ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденнаяСтрока, СтруктураДействийИзмененияСумм, Неопределено);
							ЦеныСкорректированы = Истина;
							
						КонецЕсли;
					Иначе
						Если НайденнаяСтрока <> Неопределено Тогда
							
							НайденнаяСтрока.Цена = СтрокаОтклонений.ЦенаПоступления;
							
							Если СтрокаОтклонений.ПроцентРучнойСкидкиПоступления <> 0 Тогда
								НайденнаяСтрока.ПроцентРучнойСкидки = СтрокаОтклонений.ПроцентРучнойСкидкиПоступления;
							Иначе
								НайденнаяСтрока.ПроцентРучнойСкидки = 0;
							КонецЕсли;
							ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденнаяСтрока, СтруктураДействийИзмененияЦен, Неопределено);
							ЦеныСкорректированы = Истина;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЦеныСкорректированы Тогда
				Объект.ЗаполнитьЭтапыГрафикаОплаты();
			КонецЕсли;
			
			// Установка статуса документа
			Если Не Объект.УстановитьСтатус("Закрыт", Новый Структура("ОтменаНеотработанныхСтрок", ПричинаОтмены)) Тогда
				Продолжить;
			КонецЕсли;
			
			// Запись документа
			Попытка
				Объект.Записать(РежимЗаписиДокумента.Проведение);
				КоличествоОбработанных = КоличествоОбработанных + 1;
			Исключение
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", ТекСтрока.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ТекСтрока.Значение);
			КонецПопытки
		
	КонецЦикла;
	
	Если ЗаказыПоставщикам.Количество() = КоличествоОбработанных Тогда
		
		ЗафиксироватьТранзакцию();
		Возврат Истина;
		
	Иначе
		
		ОтменитьТранзакцию();
		Возврат Ложь;
		
	КонецЕсли;
	
	
КонецФункции

&НаКлиенте
Процедура ЗаказыПоставщикамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элементы.ЗаказыПоставщикам.ТекущиеДанные.Значение);

КонецПроцедуры