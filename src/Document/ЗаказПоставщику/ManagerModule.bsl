#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	////////////////////////////////////////////////////////////////////////////////
	// ПРОГРАММНЫЙ ИНТЕРФЕЙС
	
	// Заполняет таблицу реквизитов, зависимых от хозяйственной операции
	//
	// Параметры:
	//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция соглашения
	//	МассивВсехРеквизитов - Массив - реквизиты, которые не зависят от хозяйственной операции
	//	МассивРеквизитовОперации - Массив - реквизиты, которые зависят от хозяйственной операции
	//
	Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
		
		МассивВсехРеквизитов = Новый Массив;
		МассивВсехРеквизитов.Добавить("ЗакупкаПодДеятельность");
		МассивВсехРеквизитов.Добавить("НалогообложениеНДС");
		МассивВсехРеквизитов.Добавить("Товары.СтатьяРасходов");
		МассивВсехРеквизитов.Добавить("Товары.АналитикаРасходов");
		
		МассивВсехРеквизитов.Добавить("ТоварыОтменитьРучныеСкидки");
		МассивВсехРеквизитов.Добавить("ТоварыНазначитьРучнуюСкидку");
		МассивВсехРеквизитов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
		МассивВсехРеквизитов.Добавить("Товары.ПроцентРучнойСкидки");
		МассивВсехРеквизитов.Добавить("Товары.СуммаРучнойСкидки");
		
		МассивРеквизитовОперации = Новый Массив;
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
			Или Не ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
			
			МассивРеквизитовОперации.Добавить("ЗакупкаПодДеятельность");
			МассивРеквизитовОперации.Добавить("НалогообложениеНДС");
			МассивРеквизитовОперации.Добавить("Товары.СтатьяРасходов");
			МассивРеквизитовОперации.Добавить("Товары.АналитикаРасходов");
			
			МассивРеквизитовОперации.Добавить("Товары.ПроцентРучнойСкидки");
			МассивРеквизитовОперации.Добавить("Товары.СуммаРучнойСкидки");
			МассивРеквизитовОперации.Добавить("ТоварыОтменитьРучныеСкидки");
			МассивРеквизитовОперации.Добавить("ТоварыНазначитьРучнуюСкидку");
			МассивРеквизитовОперации.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
			
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда	
			МассивРеквизитовОперации.Добавить("НалогообложениеНДС");
			
		ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
			
			МассивРеквизитовОперации.Добавить("Товары.СтатьяРасходов");
			МассивРеквизитовОперации.Добавить("Товары.АналитикаРасходов");
			
			МассивРеквизитовОперации.Добавить("Товары.ПроцентРучнойСкидки");
			МассивРеквизитовОперации.Добавить("Товары.СуммаРучнойСкидки");
			МассивРеквизитовОперации.Добавить("ТоварыОтменитьРучныеСкидки");
			МассивРеквизитовОперации.Добавить("ТоварыНазначитьРучнуюСкидку");
			МассивРеквизитовОперации.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Функция определяет реквизиты выбранного документа
	//
	// Параметры:
	//	ДокументСсылка - Ссылка на документа
	//
	// Возвращаемое значение:
	//	Структура - реквизиты выбранного документа
	//
	Функция ПолучитьРеквизитыДокумента(ДокументСсылка) Экспорт
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Партнер КАК Партнер,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
		|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
		|
		|	ДанныеДокумента.СуммаДокумента
		|	+ ЕСТЬNULL(ТаблицаСуммСверхЗаказа.СуммаВзаиморасчетов, 0)
		|	+ ЕСТЬNULL(ТаблицаСуммПоРасхождениям.СуммаВзаиморасчетов, 0)
		|		КАК СуммаВзаиморасчетов,
		|
		|	ДанныеДокумента.Проведен КАК Проведен
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ДанныеДокумента
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			СУММА(ТаблицаТовары.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов
		|		ИЗ
		|			Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
		|		ГДЕ
		|			ТаблицаТовары.Ссылка.Проведен
		|			И ТаблицаТовары.ЗаказПоставщику = &ДокументСсылка
		|			И ТаблицаТовары.КодСтроки = 0
		|	) КАК ТаблицаСуммСверхЗаказа
		|	ПО
		|		Истина
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ
		|			СУММА(
		|				ВЫБОР КОГДА ТаблицаРасхождений.ВариантОтраженияРасхождений = ЗНАЧЕНИЕ(Перечисление.ВариантыОтраженияРасхождений.ИзлишкиНаПрочиеДоходы) ТОГДА
		|					-ТаблицаРасхождений.СуммаВзаиморасчетов
		|				ИНАЧЕ
		|					ТаблицаРасхождений.СуммаВзаиморасчетов
		|				КОНЕЦ
		|			) КАК СуммаВзаиморасчетов
		|		ИЗ
		|			Документ.ПоступлениеТоваровУслуг.Расхождения КАК ТаблицаРасхождений
		|		ГДЕ
		|			ТаблицаРасхождений.Ссылка.Проведен
		|			И ТаблицаРасхождений.ЗаказПоставщику = &ДокументСсылка
		|			И ТаблицаРасхождений.ВариантОтраженияРасхождений = ЗНАЧЕНИЕ(Перечисление.ВариантыОтраженияРасхождений.ИзлишкиНаПрочиеДоходы)
		|			И ТаблицаРасхождений.ВариантОтраженияРасхождений = ЗНАЧЕНИЕ(Перечисление.ВариантыОтраженияРасхождений.НедостачиНаПрочиеРасходы)
		|			И ТаблицаРасхождений.ВариантОтраженияРасхождений = ЗНАЧЕНИЕ(Перечисление.ВариантыОтраженияРасхождений.НедостачиЗаСчетСтороннейКомпании)
		|	) КАК ТаблицаСуммПоРасхождениям
		|	ПО
		|		Истина
		|
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &ДокументСсылка
		|");
		
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Организация = Выборка.Организация;
			Партнер = Выборка.Партнер;
			Контрагент = Выборка.Контрагент;
			Договор = Выборка.Договор;
			ПорядокРасчетов = Выборка.ПорядокРасчетов;
			ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
			ХозяйственнаяОперация = ?(ЗначениеЗаполнено(Выборка.ХозяйственнаяОперация), Выборка.ХозяйственнаяОперация, Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
			СуммаДокумента = Выборка.СуммаДокумента;
			СуммаВзаиморасчетов = ?(Выборка.Проведен, Выборка.СуммаВзаиморасчетов, 0);
		Иначе
			Организация = Справочники.Организации.ПустаяСсылка();
			Партнер = Справочники.Партнеры.ПустаяСсылка();
			Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
			ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
			ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
			СуммаДокумента = 0;
			СуммаВзаиморасчетов = 0;
		КонецЕсли;
		
		СтруктураРеквизитов = Новый Структура("Организация, Партнер, Контрагент, Договор, ПорядокРасчетов, ВалютаВзаиморасчетов, ХозяйственнаяОперация, СуммаДокумента, СуммаВзаиморасчетов",
		Организация,
		Партнер,
		Контрагент,
		Договор,
		ПорядокРасчетов,
		ВалютаВзаиморасчетов,
		ХозяйственнаяОперация,
		СуммаДокумента,
		СуммаВзаиморасчетов
		);
		
		Возврат СтруктураРеквизитов;
		
	КонецФункции
	
	// Возвращает признак ТребуетсяДоверенность по последнему заказу
	//
	// Возвращаемое значение:
	//	Булево - признак необходимости доверенности
	//
	Функция ПолучитьПризнакТребуетсяДоверенностьПоследнегоЗаказа(Партнер) Экспорт
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказПоставщику.ТребуетсяДоверенность КАК ТребуетсяДоверенность
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	НЕ ЗаказПоставщику.ПометкаУдаления
		|	И ЗаказПоставщику.Партнер = &Партнер
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|");
		
		Запрос.УстановитьПараметр("Партнер", Партнер);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Метаданные.Документы.ЗаказПоставщику.Реквизиты.ТребуетсяДоверенность.ЗначениеЗаполнения;
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.ТребуетсяДоверенность;
		КонецЕсли;
		
	КонецФункции
	
	// Возвращает массив имен ролей с правом "Добавление" для данного документа
	//
	// Возвращаемое значение:
	//	Массив - Массив с именами ролей
	//
	Функция ИменаРолейСПравомДобавления() Экспорт
		
		МассивРолей = Новый Массив;
		МассивРолей.Добавить("ПолныеПрава");
		МассивРолей.Добавить("ДобавлениеИзменениеЗаказовПоставщикам");
		Возврат МассивРолей;
		
	КонецФункции
	
	// Формирует запрос проверки при смене статуса списка документов
	//
	// Параметры:
	//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
	//	НовыйСтатус - Строка - Имя нового статуса
	//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
	//
	// Возвращаемое значение:
	//	Запрос - Запрос проверки перед сменой статуса
	//
	Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
		
		ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПоставщикам[НовыйСтатус];
		
		Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику
			|ПОМЕСТИТЬ
			|	втОстаткиПоЗаказам
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику В (&МассивДокументов)) КАК ЗаказыПоставщикамОстатки
			|СГРУППИРОВАТЬ ПО
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику
			|;
			|ВЫБРАТЬ
			|	ТаблицаДокументов.Ссылка КАК Ссылка,
			|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
			|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
			|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
			|	ВЫБОР
			|		КОГДА ТаблицаДокументов.Статус = &Статус
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СтатусСовпадает,
			|	ТаблицаДокументов.Проведен КАК Проведен,
			|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
			|	ИСТИНА КАК ЗаписьПроведением,
			|	ВЫБОР КОГДА втОстаткиПоЗаказам.ЗаказПоставщику ЕСТЬ NULL
			|		ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЕстьОстаткиПоЗаказу
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ТаблицаДокументов
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	втОстаткиПоЗаказам
			|ПО
			|	ТаблицаДокументов.Ссылка = втОстаткиПоЗаказам.ЗаказПоставщику
			|ГДЕ
			|	ТаблицаДокументов.Ссылка В (&МассивДокументов)
			|";
			
		Иначе
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаДокументов.Ссылка КАК Ссылка,
			|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
			|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
			|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
			|	ВЫБОР
			|		КОГДА ТаблицаДокументов.Статус = &Статус
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СтатусСовпадает,
			|	ТаблицаДокументов.Проведен КАК Проведен,
			|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
			|	ИСТИНА КАК ЗаписьПроведением
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ТаблицаДокументов
			|ГДЕ
			|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
			|";
			
			
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		
		Возврат Запрос;
		
	КонецФункции
	
	// Формирует запрос проверки при смене статуса списка документов
	//
	// Параметры:
	//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
	//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
	//
	// Возвращаемое значение:
	//	Запрос - Запрос проверки перед сменой статуса
	//
	Функция СформироватьЗапросПроверкиПриАвтоматическомРасчетеСтатуса(МассивДокументов, ДополнительныеПараметры) Экспорт
		
		Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику
			|ПОМЕСТИТЬ
			|	втОстаткиПоЗаказам
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику В (&МассивДокументов)) КАК ЗаказыПоставщикамОстатки
			|СГРУППИРОВАТЬ ПО
			|	ЗаказыПоставщикамОстатки.ЗаказПоставщику
			|;
			|ВЫБРАТЬ
			|	ТаблицаДокументов.Ссылка КАК Ссылка,
			|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
			|	ТаблицаДокументов.Проведен КАК Проведен,
			|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
			|	ИСТИНА КАК ЗаписьПроведением,
			|	ВЫБОР КОГДА втОстаткиПоЗаказам.ЗаказПоставщику ЕСТЬ NULL
			|		ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЕстьОстаткиПоЗаказу
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ТаблицаДокументов
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	втОстаткиПоЗаказам
			|ПО
			|	ТаблицаДокументов.Ссылка = втОстаткиПоЗаказам.ЗаказПоставщику
			|ГДЕ
			|	ТаблицаДокументов.Ссылка В (&МассивДокументов)
			|";
			
		Иначе
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаДокументов.Ссылка КАК Ссылка,
			|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
			|	ТаблицаДокументов.Проведен КАК Проведен,
			|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
			|	ИСТИНА КАК ЗаписьПроведением
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ТаблицаДокументов
			|ГДЕ
			|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
			|";
			
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
		
		Возврат Запрос;
		
	КонецФункции
	
	// Возвращает результат проверки при смене статуса документа
	//
	// Параметры:
	//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
	//	НовыйСтатус - Перечисление - Новый статус
	//	ДополнительныеПараметры - Структура - Структура дополнительных параметров
	//
	// Возвращаемое значение:
	//	Булево - Истина, в случае успешного завершения проверки
	//
	Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
		
		Отказ = Ложь;
		
		Если ДополнительныеПараметры = Неопределено Тогда
			Возврат Не Отказ;
		КонецЕсли;
		
		Если ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа")
			И ВыборкаПроверки.ЕстьОстаткиПоЗаказу Тогда
			
			ТекстОшибки = НСтр("ru='У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ поставлен не полностью'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
			Отказ = Истина;
			
		КонецЕсли;
		
		Возврат Не Отказ;
		
	КонецФункции
	
	// Осуществляет вычисление текущего состояния заказа поставщику
	//
	// Параметры:
	//	ЗаказПоставщику         - ДокументСсылка.ЗаказПоставщику - Документ, состояние которого необходимо вычислить
	//	Договор                 - СправочникСсылка.ДоговорыКонтрагентов    - Договор с клиентом
	//	СостояниеРасчетов       - УправляемаяФорма - Форма, в реквизиты которой будет помещено рассчитанное состояние
	//
	Процедура РассчитатьСостояние(Знач ЗаказПоставщику,
		Знач Договор,
		СостояниеРасчетов) Экспорт
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
		
		Если ЗначениеЗаполнено(ЗаказПоставщику) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ 
			|ВЫБОР
			|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
			|	КОГДА
			|		НЕ ДокументЗаказПоставщику.Проведен
			|	ТОГДА
			|		НЕОПРЕДЕЛЕНО
			|// ОЖИДАЕТСЯ СОГЛАСОВАНИЕ //////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяСогласование)
			|// ОЖИДАЕТСЯ АВАНС ДО ПОДТВЕРЖДЕНИЯ /////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам) И
			|		ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения > 0 И
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяАвансДоПодтверждения)
			|// ОЖИДАЕТСЯ ПОДТВЕРЖДЕНИЕ //////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) И
			|		ДокументЗаказПоставщику.СуммаДокумента > 0 И
			|		(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения ИЛИ
			|		ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПодтверждение)
			|// ОЖИДАЕТСЯ ПРЕДОПЛАТА ДО ПОСТУПЛЕНИЯ //////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам ИЛИ 
			|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению) ИЛИ
			|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)) И
			|		ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления > 0 И
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПредоплатаДоПоступления)
			|// ГОТОВ К ПОСТУПЛЕНИЮ //////////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден) И
			|		ДокументЗаказПоставщику.СуммаДокумента > 0 И
			|		(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения ИЛИ
			|		ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ГотовКПоступлению)
			|// ОЖИДАЕТСЯ ПОСТУПЛЕНИЕ //////////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам) И
			|		ДокументЗаказПоставщику.СуммаДокумента > 0 И
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
			|		И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюКонечныйОстаток, 0) > 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПоступление)
			|// ОЖИДАЕТСЯ ОПЛАТА ////////////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам)
			|		И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) - ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения - ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления > 0
			|		И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток, 0) < 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяОплатаПослеПоступления)
			|// ГОТОВ К ЗАКРЫТИЮ ////////////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ГотовКЗакрытию)
			|// ЗАКРЫТ //////////////////////////////////////////////////////////////////
			|	КОГДА
			|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт) И НЕ &НеИспользоватьСтатусыЗаказовПоставщикам) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.Закрыт)
			|КОНЕЦ КАК Состояние,
			|ВЫБОР
			|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
			|	КОГДА
			|		НЕ ДокументЗаказПоставщику.Проведен
			|	ТОГДА
			|		ЛОЖЬ
			|// ЗАКРЫТ //////////////////////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт) И НЕ &НеИспользоватьСтатусыЗаказовПоставщикам
			|	ТОГДА
			|		ЛОЖЬ
			|// ПРОСРОЧЕНО СОГЛАСОВАНИЕ /////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
			|		И ДокументЗаказПоставщику.ДатаСогласования <> ДАТАВРЕМЯ(1,1,1)
			|		И ДокументЗаказПоставщику.ДатаСогласования < &ТекущаяДата
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕН АВАНС ДО ПОДТВЕРЖДЕНИЯ ////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам) И
			|		ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения > 0 И
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения И
			|		РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КОплатеОстаток < 0
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕНО ПОДТВЕРЖДЕНИЕ ////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) И
			|		ДокументЗаказПоставщику.СуммаДокумента > 0 И
			|		ДокументЗаказПоставщику.ДатаПервогоПоступления <> ДАТАВРЕМЯ(1,1,1) И
			|		ДокументЗаказПоставщику.ДатаПервогоПоступления  < &ТекущаяДата И
			|		(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения ИЛИ
			|		ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕНА ПРЕДОПЛАТА ДО ПОСТУПЛЕНИЯ ////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)  ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам ИЛИ 
			|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению)) И
			|		ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления > 0 И
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения И
			|		РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КОплатеОстаток < 0
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕНО ОЖИДАЕТСЯ ПОСТУПЛЕНИЕ ////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден) И
			|		ДокументЗаказПоставщику.ДатаПервогоПоступления <> ДАТАВРЕМЯ(1,1,1) И
			|		ДокументЗаказПоставщику.ДатаПервогоПоступления  < &ТекущаяДата И
			|		(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения ИЛИ
			|		ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕНО ПОСТУПЛЕНИЕ //////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам) И
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения И
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КПоступлениюОстаток, 0) > 0
			|	ТОГДА
			|		ИСТИНА
			|// ПРОСРОЧЕНА ОПЛАТА ///////////////////////////////////////////////////////
			|	КОГДА
			|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		(ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам) И
			|		ДокументЗаказПоставщику.СуммаДокумента - ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения - ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления > 0 И
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток, 0) < 0 И
			|		РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КОплатеОстаток < 0
			|	ТОГДА
			|		ИСТИНА
			|	ИНАЧЕ
			|		ЛОЖЬ
			|КОНЕЦ КАК Просрочен,
			|// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		ДокументЗаказПоставщику.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) И
			|		ДокументЗаказПоставщику.Проведен И
			|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
			|		ДокументЗаказПоставщику.СуммаДокумента > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаОплаты,
			|// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		ДокументЗаказПоставщику.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) И
			|		ДокументЗаказПоставщику.Проведен И
			|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
			|		ДокументЗаказПоставщику.СуммаДокумента > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) * 100 / ДокументЗаказПоставщику.СуммаДокумента КАК ЧИСЛО(15, 0))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентОплаты,
			|// СУММА ПРОСРОЧЕННОЙ ОПЛАТЫ ////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		ДокументЗаказПоставщику.Проведен И
			|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
			|		ДокументЗаказПоставщику.СуммаДокумента > 0 И
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КОплатеОстаток, 0) < 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (-ЕСТЬNULL(РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КОплатеОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаПросроченнойОплаты,
			|// СУММА ПОСТУПЛЕНИЯ ////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		ДокументЗаказПоставщику.Проведен И
			|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
			|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) И
			|		ДокументЗаказПоставщику.СуммаДокумента > 0
			|	ТОГДА
			|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюРасход, 0)
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаПоступления,
			|// ПРОЦЕНТ ПОСТУПЛЕНИЯ //////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		ДокументЗаказПоставщику.Проведен И
			|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
			|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) И
			|		ДокументЗаказПоставщику.СуммаДокумента > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюРасход, 0) * 100 / ДокументЗаказПоставщику.СуммаДокумента КАК ЧИСЛО(15, 0))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентПоступления,
			|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказПоставщику.Проведен И
			|		((ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
			|		ДокументЗаказПоставщику.СуммаДокумента > 0) ИЛИ
			|		ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(15, 2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаДолга,
			|ВЫБОР
			|	КОГДА
			|		ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
			|		ДокументЗаказПоставщику.Проведен И
			|		ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован) И
			|		ДокументЗаказПоставщику.СуммаДокумента > 0
			|	ТОГДА
			|		ВЫБОР
			|			КОГДА
			|				ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) > 0
			|			ТОГДА
			|				ВЫРАЗИТЬ ((ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) * 100 / ДокументЗаказПоставщику.СуммаДокумента) КАК ЧИСЛО(15, 0))
			|			ИНАЧЕ
			|				ВЫРАЗИТЬ ((ЕСТЬNULL(-РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) * 100 / ДокументЗаказПоставщику.СуммаДокумента) КАК ЧИСЛО(15, 0))
			|		КОНЕЦ
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентДолга
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ДокументЗаказПоставщику
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(,,,,ЗаказПоставщику = &РасчетныйДокумент) КАК РасчетыСПоставщикамиОстатки
			|ПО
			|	Истина
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСПоставщиками.Остатки(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ЗаказПоставщику = &РасчетныйДокумент) КАК РасчетыСПоставщикамиОстаткиНаДатуАктуальности
			|ПО
			|	Истина
			|ГДЕ
			|	ДокументЗаказПоставщику.Ссылка = &ЗаказПоставщику
			|
			|");
			
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику, "ПорядокРасчетов");
			
			Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
			Запрос.УстановитьПараметр("РасчетныйДокумент", ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов,
			Договор,
			ЗаказПоставщику)
			);
			Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДата()));
			Запрос.УстановитьПараметр("НеИспользоватьСтатусыЗаказовПоставщикам", НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам"));
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			
			ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Осуществляет инициализацию структуры состояния расчетов
	Функция СтруктураСостоянияРасчетов() Экспорт
		Возврат
		Новый Структура(
		"Состояние, СостояниеПросрочено, СуммаОплаты, СуммаПоступления, ПроцентОплаты, ПроцентПоступления, СуммаПросроченнойОплаты, СуммаДолга, ПроцентДолга",
		Перечисления.СостоянияЗаказовПоставщикам.ПустаяСсылка(), Ложь, 0., 0., 0., 0., 0., 0.,0.);
	КонецФункции
	
	////////////////////////////////////////////////////////////////////////////////
	// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
	////////////////////////////////////////////////////////////////////////////////
	// Проведение
	
	Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПоставщику.Дата                             КАК Период,
		|	ЗаказПоставщику.Валюта                           КАК Валюта,
		|	ЗаказПоставщику.Соглашение.Валюта                КАК ВалютаСоглашения,
		|	ЗаказПоставщику.ЦенаВключаетНДС                  КАК ЦенаВключаетНДС,
		|	ЗаказПоставщику.Соглашение.ЦенаВключаетНДС       КАК ЦенаВключаетНДССоглашения,
		|	ЗаказПоставщику.Статус                           КАК Статус,
		|	ЗаказПоставщику.Партнер                          КАК Партнер,
		|	ЗаказПоставщику.Контрагент                       КАК Контрагент,
		|	ЗаказПоставщику.Организация                      КАК Организация,
		|	ЗаказПоставщику.Подразделение                    КАК Подразделение,
		|	ЗаказПоставщику.ХозяйственнаяОперация            КАК ХозяйственнаяОперация,
		|	ЗаказПоставщику.Соглашение                       КАК Соглашение,
		|	ЗаказПоставщику.РегистрироватьЦеныПоставщика     КАК РегистрироватьЦеныПоставщика, 
		|	ЗаказПоставщику.Соглашение.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров,
		|	ЗаказПоставщику.Договор                          КАК Договор,
		|	
		|	ВЫБОР КОГДА ЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ КАК РасчетыПоДоговорам,
		|	
		|	ВЫБОР КОГДА ЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ КАК РасчетыПоНакладным
		|
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Ссылка = &Ссылка
		|";
		Реквизиты = Запрос.Выполнить().Выбрать();
		Реквизиты.Следующий();
		
		Запрос.УстановитьПараметр("Период",                       	Реквизиты.Период);
		Запрос.УстановитьПараметр("Валюта",                       	Реквизиты.Валюта);
		Запрос.УстановитьПараметр("Статус",                       	Реквизиты.Статус);
		Запрос.УстановитьПараметр("ЗаказПоставщику",              	ДокументСсылка);
		Запрос.УстановитьПараметр("Организация",                  	Реквизиты.Организация);
		Запрос.УстановитьПараметр("Подразделение", 					Реквизиты.Подразделение);
		Запрос.УстановитьПараметр("ЦенаВключаетНДС",              	Реквизиты.ЦенаВключаетНДС);
		Запрос.УстановитьПараметр("ХозяйственнаяОперация",        	Реквизиты.ХозяйственнаяОперация);
		Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",    	РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты));
		Запрос.УстановитьПараметр("РегистрироватьЦеныПоставщика", 	Реквизиты.РегистрироватьЦеныПоставщика);
		Запрос.УстановитьПараметр("Валюта",                       	Реквизиты.Валюта);
		Запрос.УстановитьПараметр("ВалютаСоглашения",             	Реквизиты.ВалютаСоглашения);
		Запрос.УстановитьПараметр("Соглашение",                   	Реквизиты.Соглашение);
		Запрос.УстановитьПараметр("Договор",                      	Реквизиты.Договор);
		Запрос.УстановитьПараметр("РасчетыПоДоговорам",           	Реквизиты.РасчетыПоДоговорам);
		Запрос.УстановитьПараметр("РасчетыПоНакладным",           	Реквизиты.РасчетыПоНакладным);
		Запрос.УстановитьПараметр("ЦенаВключаетНДССоглашения",    	Реквизиты.ЦенаВключаетНДССоглашения);
		
		Если Справочники.СоглашенияСПоставщиками.СоглашениеИспользуетсяПриПриемке(Реквизиты.ВариантПриемкиТоваров)
			И ЕстьОрдерныеСкладыВТЧТовары(ДокументСсылка) Тогда
			
			// Документ нужен если есть хотя бы 1 ордерный склад.
			Запрос.УстановитьПараметр("Распоряжение",        Справочники.СоглашенияСПоставщиками.ПолучитьСоздатьДокументРегистрации(Реквизиты.Соглашение));
			Запрос.УстановитьПараметр("ДокументПоступления", Реквизиты.Соглашение);
			
		Иначе
			
			Запрос.УстановитьПараметр("Распоряжение",        ДокументСсылка);
			Запрос.УстановитьПараметр("ДокументПоступления", ДокументСсылка);
			
		КонецЕсли;
		
		Запрос.Текст =
		// 0 ТаблицаЗаказыПоставщикам
		"ВЫБРАТЬ
		|	1                                                                 КАК Порядок,
		|	ТаблицаТовары.НомерСтроки                                         КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                            КАК ВидДвижения,
		|	&Период                                                           КАК Период,
		|	ТаблицаТовары.Ссылка                                              КАК ЗаказПоставщику,
		|	ТаблицаТовары.Номенклатура                                        КАК Номенклатура,
		|	ТаблицаТовары.Характеристика                                      КАК Характеристика,
		|	ТаблицаТовары.КодСтроки                                           КАК КодСтроки,
		|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|			ТаблицаТовары.Склад
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                                             КАК Склад,
		|	ВЫБОР КОГДА  (НЕ ТаблицаТовары.Отменено)
		|			И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению),
		|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)) ТОГДА
		|			ТаблицаТовары.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ                                                             КАК КОформлению,
		|	ТаблицаТовары.Количество                                          КАК Заказано,
		|	НЕОПРЕДЕЛЕНО                                                      КАК ПричинаОтмены
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2                                                                 КАК Порядок,
		|	ТаблицаТовары.НомерСтроки                                         КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                            КАК ВидДвижения,
		|	&Период                                                           КАК Период,
		|	ТаблицаТовары.Ссылка                                              КАК ЗаказПоставщику,
		|	ТаблицаТовары.Номенклатура                                        КАК Номенклатура,
		|	ТаблицаТовары.Характеристика                                      КАК Характеристика,
		|	ТаблицаТовары.КодСтроки                                           КАК КодСтроки,
		|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) ТОГДА
		|			ТаблицаТовары.Склад
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ                                                             КАК Склад,
		|	0                                                                 КАК КОформлению,
		|	-ТаблицаТовары.Количество                                         КАК Заказано,
		|	ТаблицаТовары.ПричинаОтмены                                       КАК ПричинаОтмены
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.Отменено
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	НомерСтроки
		|;
		|////////////////////////////////////////////////////////////////////////////////
		// 1 ТаблицаРасчетыСПоставщиками
		|ВЫБРАТЬ
		|	ЭтапыГрафикаОплаты.НомерСтроки                     КАК НомерСтроки,
		|	КонецПериода(ЭтапыГрафикаОплаты.ДатаПлатежа, ДЕНЬ) КАК Период,
		|	КонецПериода(ЭтапыГрафикаОплаты.ДатаПлатежа, ДЕНЬ) КАК ДатаПлатежа,
		|	&Период                                            КАК ДатаРегистратора,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)             КАК ВидДвижения,
		|	&АналитикаУчетаПоПартнерам                         КАК АналитикаУчетаПоПартнерам,
		|
		|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
		|		&Договор
		|	ИНАЧЕ
		|		ЭтапыГрафикаОплаты.Ссылка
		|	КОНЕЦ КАК ЗаказПоставщику,
		|
		|	&Валюта                                            КАК Валюта,
		|	ЭтапыГрафикаОплаты.Ссылка.ФормаОплаты              КАК ФормаОплаты,
		|	0                                                  КАК Сумма,
		|	ЭтапыГрафикаОплаты.СуммаПлатежа                    КАК КОплате,
		|	0                                                  КАК КПоступлению,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику) КАК ХозяйственнаяОперация
		|ИЗ
		|	Документ.ЗаказПоставщику.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
		|ГДЕ
		|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
		|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
		|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) 
		|	И НЕ &РасчетыПоНакладным
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТаблицаТовары.НомерСтроки)                КАК НомерСтроки,
		|	КонецПериода(ТаблицаТовары.ДатаПоступления, ДЕНЬ)  КАК Период,
		|	Неопределено                                       КАК ДатаПлатежа,
		|	Неопределено                                       КАК ДатаРегистратора,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)             КАК ВидДвижения,
		|	&АналитикаУчетаПоПартнерам                         КАК АналитикаУчетаПоПартнерам,
		|
		|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
		|		&Договор
		|	ИНАЧЕ
		|		&Ссылка
		|	КОНЕЦ КАК ЗаказПоставщику,
		|
		|	&Валюта                                            КАК Валюта,
		|	Неопределено                                       КАК ФормаОплаты,
		|	0                                                  КАК Сумма,
		|	0                                                  КАК КОплате,
		|	СУММА(ТаблицаТовары.СуммаСНДС)                     КАК КПоступлению,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику) КАК ХозяйственнаяОперация
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И Не ТаблицаТовары.Отменено
		|	И &Статус В (
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|		)
		|	И НЕ &РасчетыПоНакладным
		|СГРУППИРОВАТЬ ПО
		|	КонецПериода(ТаблицаТовары.ДатаПоступления, ДЕНЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|// Пустое движение для установки границы последовательности ПроведениеПоРасчетамСПоставщиками.
		|ВЫБРАТЬ
		|	0                                                  КАК НомерСтроки,
		|	&Период                                            КАК Период,
		|	Неопределено                                       КАК ДатаПлатежа,
		|	Неопределено                                       КАК ДатаРегистратора,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)             КАК ВидДвижения,
		|	&АналитикаУчетаПоПартнерам                         КАК АналитикаУчетаПоПартнерам,
		|
		|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
		|		&Договор
		|	ИНАЧЕ
		|		&Ссылка
		|	КОНЕЦ КАК ЗаказПоставщику,
		|
		|	&Валюта                                            КАК Валюта,
		|	Неопределено                                       КАК ФормаОплаты,
		|	0                                                  КАК Сумма,
		|	0                                                  КАК КОплате,
		|	0                                                  КАК КПоступлению,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику) КАК ХозяйственнаяОперация
		|ГДЕ
		|	&Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
		|	И &ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|	И НЕ &РасчетыПоНакладным
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|////////////////////////////////////////////////////////////////////////////////
		// 2 ТаблицаРасчетыСПоставщикамиПоследовательность
		|ВЫБРАТЬ 
		|	&Период КАК Период,
		|	&Ссылка КАК Регистратор,
		|	&АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|;
		|////////////////////////////////////////////////////////////////////////////////
		// 3 ТаблицаДвижениеТоваров
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки     КАК НомерСтроки,
		|	ТаблицаТовары.ДатаПоступления КАК Период,
		|	&Распоряжение                 КАК Распоряжение,
		|	ТаблицаТовары.Склад           КАК Склад,
		|	ТаблицаТовары.Номенклатура    КАК Номенклатура,
		|	ТаблицаТовары.Назначение      КАК Назначение,
		|	ТаблицаТовары.Характеристика  КАК Характеристика,
		|	ТаблицаТовары.Количество      КАК ПланируемоеПоступление
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
		|
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И НЕ ТаблицаТовары.Отменено
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|////////////////////////////////////////////////////////////////////////////////
		// 4 ТаблицаТоварыКПоступлению
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ТаблицаТовары.ДатаПоступления          КАК Период,
		|	ТаблицаТовары.Склад                    КАК Склад,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	&ДокументПоступления                   КАК ДокументПоступления,
		|	ТаблицаТовары.Количество               КАК КПоступлению
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В 
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И НЕ ТаблицаТовары.Отменено
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|////////////////////////////////////////////////////////////////////////////////
		// 5 ВременнаяТаблицаКурсыВалют
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс      КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаКурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта=&Валюта ИЛИ Валюта=&ВалютаСоглашения) КАК КурсыВалютСрезПоследних
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		// 6 ВременнаяТаблицаТовары
		|ВЫБРАТЬ
		|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
		|	Товары.Номенклатура           КАК Номенклатура,
		|	Товары.Характеристика         КАК Характеристика,
		|	Товары.УсловиеЦеныПоставщика  КАК УсловиеЦеныПоставщика,
		|	Товары.Упаковка               КАК Упаковка,
		|	ВЫРАЗИТЬ(Товары.Цена
		|				* ВЫБОР
		|					КОГДА
		|						&ЦенаВключаетНДС И НЕ &ЦенаВключаетНДССоглашения
		|					ТОГДА
		|						ВЫБОР
		|							КОГДА
		|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|							ТОГДА
		|								1
		|							КОГДА
		|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|							ТОГДА
		|								100/118
		|							КОГДА
		|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|							ТОГДА
		|								100/110
		|						КОНЕЦ
		|					КОГДА
		|						НЕ &ЦенаВключаетНДС И &ЦенаВключаетНДССоглашения
		|					ТОГДА
		|						ВЫБОР
		|							КОГДА
		|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|							ТОГДА
		|								1
		|							КОГДА
		|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18)
		|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|							ТОГДА
		|								1.18
		|							КОГДА
		|								Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10)
		|								ИЛИ Товары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|							ТОГДА
		|								1.10
		|						КОНЕЦ
		|					ИНАЧЕ
		|						1
		|				КОНЕЦ
		|				* ВЫБОР
		|					КОГДА
		|						&Валюта <> &ВалютаСоглашения
		|					ТОГДА
		|						ВЫБОР
		|							КОГДА ЕСТЬNULL(КурсыВалютыСоглашения.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалютыСоглашения.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
		|							ТОГДА 
		|								(КурсыВалюты.Курс * КурсыВалютыСоглашения.Кратность)
		|								/ (КурсыВалютыСоглашения.Курс * КурсыВалюты.Кратность)
		|							ИНАЧЕ
		|								0
		|						КОНЕЦ
		|					ИНАЧЕ 
		|						1
		|				КОНЕЦ КАК ЧИСЛО(15, 2))
		|	КАК Цена
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаТовары
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК Товары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаКурсыВалют КАК КурсыВалюты
		|ПО
		|	КурсыВалюты.Валюта = &Валюта
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаКурсыВалют КАК КурсыВалютыСоглашения
		|ПО
		|	КурсыВалютыСоглашения.Валюта = &ВалютаСоглашения
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И &РегистрироватьЦеныПоставщика
		|;
		|////////////////////////////////////////////////////////////////////////////////
		// 7 ТоварыСРазличнымиУпаковкамиЦенами
		|ВЫБРАТЬ
		|	Товары.Номенклатура                     КАК Номенклатура,
		|	Товары.Характеристика                   КАК Характеристика,
		|	Товары.УсловиеЦеныПоставщика            КАК УсловиеЦеныПоставщика,
		|	СРЕДНЕЕ(
		|		Товары.Цена / ВЫБОР
		|				КОГДА
		|					Товары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА
		|					Товары.Упаковка.Коэффициент
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|	) КАК ЦенаЗаБазовуюЕдиницу,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Упаковка)  КАК КоличествоРазличныхУпаковок
		|ПОМЕСТИТЬ
		|	ТоварыСРазличнымиУпаковкамиЦенами
		|ИЗ
		|	ВременнаяТаблицаТовары КАК Товары
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	УсловиеЦеныПоставщика
		|;
		|////////////////////////////////////////////////////////////////////////////////
		// 8 ТаблицаЦеныНоменклатуры
		|ВЫБРАТЬ
		|	МАКСИМУМ(Товары.НоменклатураПоставщика) КАК НоменклатураПоставщика,
		|	Товары.Номенклатура                     КАК Номенклатура,
		|	Товары.Характеристика                   КАК Характеристика,
		|	Товары.УсловиеЦеныПоставщика            КАК УсловиеЦеныПоставщика,
		|	&ВалютаСоглашения                       КАК Валюта,
		|	&Период                                 КАК Период,
		|	&Соглашение                             КАК Соглашение,
		|	МИНИМУМ(ВЫБОР
		|				КОГДА
		|					ТоварыСРазличнымиУпаковкамиЦенами.КоличествоРазличныхУпаковок > 1
		|				ТОГДА
		|					ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ИНАЧЕ
		|					Товары.Упаковка
		|				КОНЕЦ
		|			) КАК Упаковка,
		|	СРЕДНЕЕ(ВЫБОР
		|				КОГДА
		|					ТоварыСРазличнымиУпаковкамиЦенами.КоличествоРазличныхУпаковок > 1
		|				ТОГДА
		|					ТоварыСРазличнымиУпаковкамиЦенами.ЦенаЗаБазовуюЕдиницу
		|				ИНАЧЕ
		|					Товары.Цена
		|				КОНЕЦ
		|			) КАК Цена
		|ИЗ
		|	ВременнаяТаблицаТовары КАК Товары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ТоварыСРазличнымиУпаковкамиЦенами КАК ТоварыСРазличнымиУпаковкамиЦенами
		|ПО
		|	Товары.Номенклатура = ТоварыСРазличнымиУпаковкамиЦенами.Номенклатура
		|	И Товары.Характеристика = ТоварыСРазличнымиУпаковкамиЦенами.Характеристика
		|	И Товары.УсловиеЦеныПоставщика = ТоварыСРазличнымиУпаковкамиЦенами.УсловиеЦеныПоставщика
		|СГРУППИРОВАТЬ ПО
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.УсловиеЦеныПоставщика
		|;
		|////////////////////////////////////////////////////////////////////////////////
		// 9 ТаблицаОбеспечениеЗаказов
		|ВЫБРАТЬ
		|	&Период                                КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ТаблицаТовары.Склад                    КАК Склад,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ТаблицаТовары.Назначение               КАК Назначение,
		|	-ТаблицаТовары.Количество              КАК КЗаказу,
		|	ТаблицаТовары.Количество               КАК Заказано
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И НЕ ТаблицаТовары.Отменено
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|////////////////////////////////////////////////////////////////////////////////
		// 10 ТаблицаОбеспечениеЗаказовРаботами
		|ВЫБРАТЬ
		|	ТаблицаТовары.ДатаПоступления          КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Подразделение                         КАК Подразделение,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ТаблицаТовары.Назначение               КАК Назначение,
		|	ТаблицаТовары.Количество               КАК КОбеспечению
		|
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|	И НЕ ТаблицаТовары.Отменено
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению),
		|				 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден),
		|				 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|";
		
		Результат = Запрос.ВыполнитьПакет();
		ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
		ТаблицыДляДвижений.Вставить("ТаблицаЗаказыПоставщикам",                      Результат[0].Выгрузить());
		ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПоставщиками",                   Результат[1].Выгрузить());
		ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПоставщикамиПоследовательность", Результат[2].Выгрузить());
		ТаблицыДляДвижений.Вставить("ТаблицаДвижениеТоваров",                        Результат[3].Выгрузить());
		ТаблицыДляДвижений.Вставить("ТаблицаТоварыКПоступлению",                     Результат[4].Выгрузить());
		// Результат[5] - ВременнаяТаблицаКурсыВалют
		// Результат[6] - ВременнаяТаблицаТовары
		// Результат[7] - ТоварыСРазличнымиУпаковкамиЦенами
		ТаблицыДляДвижений.Вставить("ТаблицаЦеныНоменклатуры",                       Результат[8].Выгрузить());
		ТаблицыДляДвижений.Вставить("ТаблицаОбеспечениеЗаказов",                     Результат[9].Выгрузить());
		ТаблицыДляДвижений.Вставить("ТаблицаОбеспечениеЗаказовРаботами",             Результат[10].Выгрузить());
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// Печать
	
	// Сформировать печатные формы объектов
	//
	// ВХОДЯЩИЕ:
	//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
	//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
	//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
	//
	// ИСХОДЯЩИЕ:
	//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
	//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
	//
	Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
		
		Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказПоставщику") Тогда
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказПоставщику", "Заказ поставщику", СформироватьПечатнуюФорму(ПараметрыПечати["Тип"], МассивОбъектов, ОбъектыПечати));
		КонецЕсли;
		
		ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
		
	КонецПроцедуры
	
	Функция СформироватьПечатнуюФорму(Тип, МассивОбъектов, ОбъектыПечати)
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		ИспользоватьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка КАК Ссылка,
		|	ЗаказПоставщику.Номер КАК Номер,
		|	ЗаказПоставщику.Дата КАК Дата,
		|	ЗаказПоставщику.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщику.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК УчитыватьНДС,
		|	ЗаказПоставщику.Организация.Префикс КАК Префикс,
		|	ЗаказПоставщику.Контрагент КАК Контрагент,
		|	ЗаказПоставщику.БанковскийСчет КАК БанковскийСчет,
		|	ЗаказПоставщику.БанковскийСчет.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
		|	ЗаказПоставщику.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ЗаказПоставщику.Валюта КАК Валюта,
		|	ЗаказПоставщику.Менеджер.ФизическоеЛицо.Наименование КАК Менеджер,
		|	ЗаказПоставщику.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	ЗаказПоставщику.ЭтапыГрафикаОплаты.(
		|		ДатаПлатежа КАК ДатаПлатежа
		|	),
		|	ЗаказПоставщику.Товары.(
		|		НомерСтроки КАК НомерСтроки,
		|		НоменклатураПоставщика.Наименование КАК НаименованиеНоменклатурыПоставщика,
		|		НоменклатураПоставщика.Код КАК КодПоставщика,
		|		НоменклатураПоставщика.Артикул КАК АртикулПоставщика,
		|		Номенклатура КАК Номенклатура,
		|		УсловиеЦеныПоставщика КАК УсловиеЦеныПоставщика,
		|		Номенклатура.Код КАК Код,
		|		Номенклатура.Артикул КАК Артикул,
		|		Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		|		ВЫБОР
		|			КОГДА ЗаказПоставщику.Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА ПРЕДСТАВЛЕНИЕ(ЗаказПоставщику.Товары.Номенклатура.ЕдиницаИзмерения)
		|			ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЗаказПоставщику.Товары.Упаковка.ЕдиницаИзмерения)
		|		КОНЕЦ КАК ЕдиницаИзмерения,
		|		КоличествоУпаковок КАК Количество,
		|		Цена КАК Цена,
		|		СуммаРучнойСкидки КАК СуммаСкидки,
		|		ЗаказПоставщику.Товары.Сумма + ЗаказПоставщику.Товары.СуммаРучнойСкидки КАК СуммаБезСкидки,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		ДатаПоступления КАК ДатаПоступления,
		|		Характеристика.НаименованиеПолное КАК Характеристика,
		|		ВЫБОР
		|			КОГДА ЕСТЬNULL(ЗаказПоставщику.Товары.Упаковка.Коэффициент, 1) = 1
		|				ТОГДА НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ ЗаказПоставщику.Товары.Упаковка.Наименование
		|		КОНЕЦ КАК Упаковка,
		|		Отменено КАК Отменено,
		|		ВЫБОР
		|			КОГДА
		|				Ссылка.ВернутьМногооборотнуюТару
		|				И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|			ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ КАК ЭтоВозвратнаяТара
		|	)
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
		
		ДанныеПечати = Запрос.Выполнить().Выбрать();
		
		ПервыйДокумент = Истина;
		
		Макет = УправлениеПечатью.ПолучитьМакет("Документ.ЗаказПоставщику.ПФ_MXL_ЗаказПоставщику");
		
		Пока ДанныеПечати.Следующий() Цикл
			
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
			ПервыйДокумент = Ложь;
			
			НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
			
			ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказПоставщику_ЗаказПоставщику";
			
			ТаблицаТовары = ДанныеПечати.Товары.Выгрузить();
			ТаблицаТовары.Сортировать("НомерСтроки");
			
			ВыводитьУсловиеЦены = Ложь;
			Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
				Если ЗначениеЗаполнено(СтрокаТовары.УсловиеЦеныПоставщика) Тогда
					ВыводитьУсловиеЦены = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ЗаголовокСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки);
			ЕстьСкидки = ЗаголовокСкидки.ЕстьСкидки;
			КолонкаКодов  = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
			ВыводитьКоды  = ЗначениеЗаполнено(КолонкаКодов);
			
			Если ЕстьСкидки И ВыводитьУсловиеЦены Тогда
				ОбластьКолонкаТовар = Макет.Область("ТоварСУсловиемСоСкидкой");
			ИначеЕсли ЕстьСкидки Или ВыводитьУсловиеЦены Тогда
				ОбластьКолонкаТовар = Макет.Область("ТоварСУсловиемИлиСоСкидкой");
			Иначе
				ОбластьКолонкаТовар = Макет.Область("Товар");
			КонецЕсли;
			
			Если Не ВыводитьКоды Тогда
				
				Если ЕстьСкидки И ВыводитьУсловиеЦены Тогда
					ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.35;
				ИначеЕсли ЕстьСкидки Или ВыводитьУсловиеЦены Тогда
					ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;
				Иначе
					ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЕстьСкидки И ВыводитьУсловиеЦены Тогда
				
				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСУсловиемСоСкидкой|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСУсловиемСоСкидкой|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСУсловиемСоСкидкой|ТоварСУсловиемСоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСУсловиемСоСкидкой|ДанныеСУсловиемСоСкидкой");
				
			ИначеЕсли ЕстьСкидки Тогда
				
				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
				
			ИначеЕсли ВыводитьУсловиеЦены Тогда
				
				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСУсловием|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСУсловием|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСУсловием|ТоварСУсловиемИлиСоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСУсловием|ДанныеСУсловиемИлиСоСкидкой");
				
			Иначе
				
				ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
				ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
				
			КонецЕсли;
			
			// Заполнить реквизиты шапки
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			
			ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Заказ поставщику'"));
			
			ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
			
			СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
			
			ОбластьМакета.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета                                   = Макет.ПолучитьОбласть("Покупатель");
			ОбластьМакета.Параметры.ПредставлениеПолучателя = ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ЕстьСкидки Тогда
				ОбластьДанных.Параметры.Скидка = ЗаголовокСкидки.Скидка;
				ОбластьДанных.Параметры.СуммаБезСкидки = ЗаголовокСкидки.СуммаСкидки;
			КонецЕсли; 
			
			Если ВыводитьКоды Тогда
				
				ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;
				ТабличныйДокумент.Присоединить(ОбластьКодов);
				
			КонецЕсли;
			
			ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)'");
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			Если ЕстьСкидки И ВыводитьУсловиеЦены Тогда
				
				ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСУсловиемСоСкидкой|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСУсловиемСоСкидкой|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСУсловиемСоСкидкой|ТоварСУсловиемСоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСУсловиемСоСкидкой|ДанныеСУсловиемСоСкидкой");
				
			ИначеЕсли ЕстьСкидки Тогда
				
				ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
				
			ИначеЕсли ВыводитьУсловиеЦены Тогда
				
				ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСУсловием|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСУсловием|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСУсловием|ТоварСУсловиемИлиСоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСУсловием|ДанныеСУсловиемИлиСоСкидкой");
				
			Иначе
				
				ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицы|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицы|Товар");
				ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицы|Данные");
				
			КонецЕсли;
			
			Сумма          = 0;
			СуммаНДС       = 0;
			ВсегоСкидок    = 0;
			ВсегоБезСкидок = 0;
			
			НомерСтроки = 0;
			
			Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
				
				Если СтрокаТовары.Отменено Тогда
					Продолжить;
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
				ТабличныйДокумент.Вывести(ОбластьНомера);
				
				Если ВыводитьКоды Тогда
					
					ИмяКолонки = КолонкаКодов;
					Если Тип = "ЗаказПоставщикуПоДаннымПоставщика" Тогда
						ИмяКолонки = ИмяКолонки + "Поставщика";
					КонецЕсли;
					
					ОбластьКодов.Параметры.Артикул = СтрокаТовары[ИмяКолонки];
					ТабличныйДокумент.Присоединить(ОбластьКодов);
					
				КонецЕсли;
				
				Если Тип = "ЗаказПоставщикуПоДаннымПоставщика" Тогда
					ОбластьТовар.Параметры.Товар = СтрокаТовары.НаименованиеНоменклатурыПоставщика;
				Иначе
					ОбластьТовар.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					СтрокаТовары.НаименованиеПолное,
					СтрокаТовары.Характеристика,
					,
					,
					,
					СтрокаТовары.ЭтоВозвратнаяТара);
				КонецЕсли;
				
				ТабличныйДокумент.Присоединить(ОбластьТовар);
				ОбластьДанных.Параметры.Заполнить(СтрокаТовары);
				Если ЗаголовокСкидки.ЕстьСкидки Тогда
					ОбластьДанных.Параметры.СуммаСкидки = ?(ЗаголовокСкидки.ТолькоНаценка,- СтрокаТовары.СуммаСкидки,СтрокаТовары.СуммаСкидки);
				КонецЕсли; 
				ТабличныйДокумент.Присоединить(ОбластьДанных);
				
				Сумма          = Сумма          + СтрокаТовары.Сумма;
				СуммаНДС       = СуммаНДС       + СтрокаТовары.СуммаНДС;
				
				Если ЕстьСкидки Тогда
					ВсегоСкидок    = ВсегоСкидок    + СтрокаТовары.СуммаСкидки;
					ВсегоБезСкидок = ВсегоБезСкидок + СтрокаТовары.СуммаБезСкидки;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьСкидки И ВыводитьУсловиеЦены Тогда
				
				ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСУсловиемСоСкидкой|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСУсловиемСоСкидкой|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСУсловиемСоСкидкой|ТоварСУсловиемСоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСУсловиемСоСкидкой|ДанныеСУсловиемСоСкидкой");
				
			ИначеЕсли ЕстьСкидки Тогда
				
				ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");
				
			ИначеЕсли ВыводитьУсловиеЦены Тогда
				
				ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСУсловием|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСУсловием|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСУсловием|ТоварСУсловиемИлиСоСкидкой");
				ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСУсловием|ДанныеСУсловиемИлиСоСкидкой");
				
			Иначе
				
				ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
				ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
				ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
				ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			Если ЕстьСкидки Тогда
				
				ОбластьДанных.Параметры.ВсегоСкидок    = ?(ЗаголовокСкидки.ТолькоНаценка,-ВсегоСкидок, ВсегоСкидок);
				ОбластьДанных.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;
				
			КонецЕсли;
			
			ОбластьДанных.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			// Вывести ИтогоНДС
			
			Если ДанныеПечати.УчитыватьНДС Тогда
				
				ОбластьНомера      = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");
				ОбластьКодов       = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");
				ОбластьТовар       = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");
				ОбластьДанных      = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");
				
				ТабличныйДокумент.Вывести(ОбластьНомера);
				
				Если ВыводитьКоды Тогда
					ТабличныйДокумент.Присоединить(ОбластьКодов);
				КонецЕсли;
				
				ТабличныйДокумент.Присоединить(ОбластьТовар);
				
				ОбластьДанных.Параметры.НДС = ?(ДанныеПечати.ЦенаВключаетНДС, НСтр("ru='В том числе НДС:'"), НСтр("ru='Сумма НДС:'"));
				ОбластьДанных.Параметры.ВсегоНДС = ФормированиеПечатныхФорм.ФорматСумм(СуммаНДС);
				ТабличныйДокумент.Присоединить(ОбластьДанных);
				
			КонецЕсли;
			
			// Вывести Сумму прописью
			ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
			СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
			
			ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", НомерСтроки);
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
			
			ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
			
			ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если ЗначениеЗаполнено(ДанныеПечати.ДополнительнаяИнформация) Тогда
				
				ОбластьМакета                                    = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
				ОбластьМакета.Параметры.ДополнительнаяИнформация = ДанныеПечати.ДополнительнаяИнформация;
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли;
			
			// Вывести подписи
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");
			ОбластьМакета.Параметры.ФИОМенеджер = ФизическиеЛица.ФамилияИнициалыФизЛица(ДанныеПечати.Менеджер);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
			
		КонецЦикла;
		
		ТабличныйДокумент.АвтоМасштаб = Истина;
		
		Возврат ТабличныйДокумент;
		
	КонецФункции
	
	Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
		
		СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
		
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
			СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
		КонецЕсли;
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// Автозаполнение статуса
	
	// Осуществляет вычисление максимально возможного статуса заказа поставщику
	//
	Функция МаксимальныйСтатусЗаказаПоставщику(ПараметрыРасчета, КэшированныеЗначения = Неопределено) Экспорт
		
		МаксимальныйСтатусДокумента = Перечисления.СтатусыЗаказовПоставщикам.ПустаяСсылка();
		
		ЕстьАвансДоПодтверждения				= ЕстьАвансДоПодтверждения(ПараметрыРасчета.ЭтапыГрафикаОплаты);
		ТолькоЭтапОплатыПредоплатаДоПоступления	= ТолькоЭтапОплатыПредоплатаДоПоступления(ПараметрыРасчета.ЭтапыГрафикаОплаты);
		ЕстьПредоплатаДоПоступления				= ЕстьПредоплатаДоПоступления(ПараметрыРасчета.ЭтапыГрафикаОплаты);
		ТолькоКредитныйЭтапОплаты				= ТолькоКредитныйЭтапОплаты(ПараметрыРасчета.ЭтапыГрафикаОплаты);
		ТребуетсяКонтрольСтатусаПоОбеспечению	= Ложь;
		ТребуетсяКонтрольСтатусаПоПоступлению   = Ложь;
		
		Если ПараметрыРасчета.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию")
			ИЛИ ПараметрыРасчета.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
			ИЛИ ПараметрыРасчета.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			
			МаксимальныйСтатусДокумента = МаксимальныйСтатусЗаказаПоПоступлению(ПараметрыРасчета);
			
			// Вычислим статус когда расчетов по документу еще нет
		ИначеЕсли Не ПараметрыРасчета.Проведен И ЕстьАвансДоПодтверждения Тогда
			
			МаксимальныйСтатусДокумента = Перечисления.СтатусыЗаказовПоставщикам.Согласован;
			
		ИначеЕсли Не ПараметрыРасчета.Проведен И ЕстьПредоплатаДоПоступления Тогда
			
			МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден;
			
			ТребуетсяКонтрольСтатусаПоПоступлению = Истина;
			
		ИначеЕсли Не ПараметрыРасчета.Проведен И ТолькоКредитныйЭтапОплаты Тогда
			
			МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению;
			
			ТребуетсяКонтрольСтатусаПоПоступлению = Истина;
			
		ИначеЕсли ПараметрыРасчета.ВсеСтрокиОтменены Тогда
			
			МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
			
			ТребуетсяКонтрольСтатусаПоПоступлению = Истина;
			
		Иначе
			
			МаксимальныйСтатусЗаказаПоРасчетам = МаксимальныйСтатусЗаказаПоРасчетам(ПараметрыРасчета);
			
			Если МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован
				Или МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовПоставщикам.Согласован Тогда
				
				МаксимальныйСтатусДокумента = МаксимальныйСтатусЗаказаПоРасчетам;
				
				Возврат МаксимальныйСтатусДокумента;
				
			КонецЕсли;
			
			ТребуетсяКонтрольСтатусаПоПоступлению = Истина;
			
		КонецЕсли;
		
		Если ТребуетсяКонтрольСтатусаПоПоступлению Тогда
			МаксимальныйСтатусЗаказаПоПоступлению = МаксимальныйСтатусЗаказаПоПоступлению(ПараметрыРасчета);
			
			// Установим минимальный из полученных статусов
			ВозможныеСтатусы = СтатусыПоПорядку(Перечисления.СтатусыЗаказовПоставщикам.НеСогласован, Перечисления.СтатусыЗаказовПоставщикам.Закрыт);
			
			ИндексМаксСтатусаПоРасчетам = ВозможныеСтатусы.Найти(МаксимальныйСтатусЗаказаПоРасчетам);
			ИндексМаксСтатусаПоПоступлению = ВозможныеСтатусы.Найти(МаксимальныйСтатусЗаказаПоПоступлению);
			
			МинимальныйИндексСтатуса = Мин(ИндексМаксСтатусаПоРасчетам, ИндексМаксСтатусаПоПоступлению);
			
			МаксимальныйСтатусДокумента = ВозможныеСтатусы.Получить(МинимальныйИндексСтатуса);
			
		КонецЕсли;
		
		Возврат МаксимальныйСтатусДокумента;
		
	КонецФункции
	
	Функция ЕстьАвансДоПодтверждения(ЭтапыГрафикаОплаты)
		
		ЕстьАвансДоПодтверждения = Ложь;
		
		ОтборПоЭтапуОплаты = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения) ;
		НайденныеСтроки = ЭтапыГрафикаОплаты.НайтиСтроки(ОтборПоЭтапуОплаты);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЕстьАвансДоПодтверждения = Истина;
			
		КонецЕсли;
		
		Возврат ЕстьАвансДоПодтверждения;
		
	КонецФункции
	
	Функция ТолькоЭтапОплатыПредоплатаДоПоступления(ЭтапыГрафикаОплаты)
		
		ТолькоЭтапОплатыПредоплатаДоОтгрузки = Ложь;
		
		Если ЭтапыГрафикаОплаты.Количество() = 1 Тогда
			
			ТолькоЭтапОплатыПредоплатаДоОтгрузки = ЕстьПредоплатаДоПоступления(ЭтапыГрафикаОплаты);
			
		КонецЕсли;
		
		Возврат ТолькоЭтапОплатыПредоплатаДоОтгрузки;
		
	КонецФункции
	
	Функция ЕстьПредоплатаДоПоступления(ЭтапыГрафикаОплаты)
		
		ЕстьПредоплатаДоПоступления = Ложь;
		
		ОтборПоЭтапуОплаты = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления) ;
		НайденныеСтроки = ЭтапыГрафикаОплаты.НайтиСтроки(ОтборПоЭтапуОплаты);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЕстьПредоплатаДоПоступления = Истина;
			
		КонецЕсли;
		
		Возврат ЕстьПредоплатаДоПоступления;
		
	КонецФункции
	
	Функция ТолькоКредитныйЭтапОплаты(ЭтапыГрафикаОплаты)
		
		ТолькоКредитныйЭтапОплаты = Ложь;
		
		ОтборПоКредитномуЭтапу = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления);
		НайденныеСтроки = ЭтапыГрафикаОплаты.НайтиСтроки(ОтборПоКредитномуЭтапу);
		
		Если ЭтапыГрафикаОплаты.Количество() = 1 ИЛИ ЭтапыГрафикаОплаты.Количество() = НайденныеСтроки.Количество()Тогда
			
			ТолькоКредитныйЭтапОплаты = ЕстьКредитПослеПоступления(ЭтапыГрафикаОплаты);
			
		КонецЕсли;
		
		Возврат ТолькоКредитныйЭтапОплаты;
		
	КонецФункции
	
	Функция СтатусыПоПорядку(НачальныйСтатус, КонечныйСтатус)
		
		СтатусыВПорядкеУбывания = Неопределено;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаПоСтатусамПоПорядку();
		
		Запрос.УстановитьПараметр("НачальныйСтатус", НачальныйСтатус);
		Запрос.УстановитьПараметр("КонечныйСтатус", КонечныйСтатус);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			СтатусыВПорядкеУбывания = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
		
		Возврат СтатусыВПорядкеУбывания;
		
	КонецФункции
	
	Функция ЕстьКредитПослеПоступления(ЭтапыГрафикаОплаты)
		
		ЕстьКредитПослеПоступления = Ложь;
		
		ОтборПоЭтапуОплаты = Новый Структура("ВариантОплаты", Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления) ;
		НайденныеСтроки = ЭтапыГрафикаОплаты.НайтиСтроки(ОтборПоЭтапуОплаты);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЕстьКредитПослеПоступления = Истина;
			
		КонецЕсли;
		
		Возврат ЕстьКредитПослеПоступления;
		
	КонецФункции
	
	Функция ТекстЗапросаПоСтатусамПоПорядку()
		
		Текст = "ВЫБРАТЬ
		|	СтатусыЗаказовПоставщикам.Порядок
		|ПОМЕСТИТЬ НачальныйСтатус
		|ИЗ
		|	Перечисление.СтатусыЗаказовПоставщикам КАК СтатусыЗаказовПоставщикам
		|ГДЕ
		|	СтатусыЗаказовПоставщикам.Ссылка = &НачальныйСтатус
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыЗаказовПоставщикам.Порядок
		|ПОМЕСТИТЬ КонечныйСтатус
		|ИЗ
		|	Перечисление.СтатусыЗаказовПоставщикам КАК СтатусыЗаказовПоставщикам
		|ГДЕ
		|	СтатусыЗаказовПоставщикам.Ссылка = &КонечныйСтатус
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтатусыПослеТекущего.Ссылка
		|ИЗ
		|	КонечныйСтатус КАК КонечныйСтатус
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СтатусыЗаказовПоставщикам.Ссылка КАК Ссылка
		|		ИЗ
		|			НачальныйСтатус КАК НачальныйСтатус
		|				ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.СтатусыЗаказовПоставщикам КАК СтатусыЗаказовПоставщикам
		|				ПО (СтатусыЗаказовПоставщикам.Порядок >= НачальныйСтатус.Порядок)) КАК СтатусыПослеТекущего
		|		ПО КонечныйСтатус.Порядок >= СтатусыПослеТекущего.Ссылка.Порядок
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтатусыПослеТекущего.Ссылка.Порядок";
		
		Возврат Текст;
		
	КонецФункции
	
	Функция МаксимальныйСтатусЗаказаПоРасчетам(ПараметрыРасчета)
		
		МаксимальныйСтатусЗаказаПоРасчетам = ПараметрыРасчета.Статус;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаРасчетаМаксимальногоСтатусаПоРасчетам();
		Запрос.УстановитьПараметр("Заказ", ПараметрыРасчета.Заказ);
		Запрос.УстановитьПараметр("Проведен", ПараметрыРасчета.Проведен);
		Запрос.УстановитьПараметр("Статус", ПараметрыРасчета.Статус);
		Запрос.УстановитьПараметр("СуммаАвансаДоПодтверждения", ПараметрыРасчета.СуммаАвансаДоПодтверждения);
		Запрос.УстановитьПараметр("СуммаПредоплатыДоПоступления", ПараметрыРасчета.СуммаПредоплатыДоПоступления);
		Запрос.УстановитьПараметр("СуммаДокумента", ПараметрыРасчета.СуммаДокумента);
		Запрос.УстановитьПараметр("ПорядокРасчетов", ПараметрыРасчета.ПорядокРасчетов);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			МаксимальныйСтатусЗаказаПоРасчетам = Выборка.МаксимальныйСтатусЗаказа;
			
			// Все расчеты выполнены или отсутствуют
		Иначе
			Если ПараметрыРасчета.Проведен Тогда
				МаксимальныйСтатусЗаказаПоРасчетам = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат МаксимальныйСтатусЗаказаПоРасчетам;
		
	КонецФункции
	
	Функция ТекстЗапросаРасчетаМаксимальногоСтатусаПоРасчетам()
		
		ТекстЗапросаРасчетаМаксимальногоСтатусаПоРасчетам = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НЕ &Проведен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.ПустаяСсылка)
		|
		|		КОГДА &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
		|
		|		КОГДА &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|				ИЛИ &ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению)
		|
		|		// Сумма аванса не оплачена
		|		КОГДА (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
		|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)
		|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению))
		|				И &СуммаАвансаДоПодтверждения > 0
		|				И ЕСТЬNULL(СостояниеРасчетов.КОплатеПриход, 0) < &СуммаАвансаДоПодтверждения
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
		|
		|		// Сумма предоплаты до поступления не оплачена
		|		КОГДА (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
		|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)
		|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению))
		|				И &СуммаПредоплатыДоПоступления >0 
		|				И ЕСТЬNULL(СостояниеРасчетов.КОплатеПриход, 0) < &СуммаПредоплатыДоПоступления + &СуммаАвансаДоПодтверждения
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)
		|
		|		// Аванс и предоплата до поступления оплачены
		|		КОГДА (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
		|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)
		|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению))
		|				И (ЕСТЬNULL(СостояниеРасчетов.КОплатеПриход, 0) = &СуммаПредоплатыДоПоступления + &СуммаАвансаДоПодтверждения)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению)
		|
		|		// Кредит не оплачен
		|		КОГДА (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
		|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)
		|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению))
		|				И &СуммаДокумента - (&СуммаАвансаДоПодтверждения + &СуммаПредоплатыДоПоступления) > 0
		|				И ЕСТЬNULL(СостояниеРасчетов.КОплатеКонечныйОстаток, 0) < 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению)
		|
		|		//Все оплачено и отгружено
		|		КОГДА &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.ПустаяСсылка)
		|	КОНЕЦ КАК МаксимальныйСтатусЗаказа
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасчетыСПоставщикамиОстатки.КОплатеПриход КАК КОплатеПриход,
		|		РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток КАК КОплатеКонечныйОстаток,
		|		0 КАК СуммаОстаток,
		|		РасчетыСПоставщикамиОстатки.ЗаказПоставщику КАК ЗаказПоставщику
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(, , , , ЗаказПоставщику = &Заказ) КАК РасчетыСПоставщикамиОстатки) КАК СостояниеРасчетов
		|";
		
		Возврат ТекстЗапросаРасчетаМаксимальногоСтатусаПоРасчетам;
		
	КонецФункции
	
	Функция МаксимальныйСтатусЗаказаПоПоступлению(ПараметрыРасчета)
		
		МаксимальныйСтатусЗаявкиПоПоступлению = ПараметрыРасчета.Статус;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаРасчетаМаксимальногоСтатусаПоПоступлению();
		Запрос.УстановитьПараметр("Заказ", ПараметрыРасчета.Заказ);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			МаксимальныйСтатусЗаявкиПоПоступлению = Выборка.МаксимальныйСтатусЗаявки;
			
		ИначеЕсли МаксимальныйСтатусЗаявкиПоПоступлению = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован Тогда
			МаксимальныйСтатусЗаявкиПоПоступлению = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
		Иначе
			МаксимальныйСтатусЗаявкиПоПоступлению = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
		КонецЕсли;
		
		Возврат МаксимальныйСтатусЗаявкиПоПоступлению;
		
	КонецФункции
	
	Функция ТекстЗапросаРасчетаМаксимальногоСтатусаПоПоступлению()
		
		ТекстЗапросаРасчетаМаксимальногоСтатусаПоПоступлению = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СостояниеПоступлений.КОформлениюОстаток, 0) > 0 ИЛИ ЕСТЬNULL(СостояниеПоступлений.КПоступлениюОстаток, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусызаказовПоставщикам.КПоступлению)
		|	КОНЕЦ КАК МаксимальныйСтатусЗаявки
		|ИЗ
		|	(ВЫБРАТЬ
		|		СУММА(ТаблицаПоступлений.КОформлениюОстаток)  КАК КОформлениюОстаток,
		|		СУММА(ТаблицаПоступлений.КПоступлениюОстаток) КАК КПоступлениюОстаток,
		|		ТаблицаПоступлений.ЗаказПоставщику КАК ЗаказПоставщику
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ЗаказыПоставщикамОстатки.КОформлениюОстаток КАК КОформлениюОстаток,
		|			0 КАК КПоступлениюОстаток,
		|			ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику
		|		ИЗ
		|			РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &Заказ) КАК ЗаказыПоставщикамОстатки
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			0,
		|			ТоварыКПоступлениюОстатки.КПоступлениюОстаток,
		|			ТоварыКПоступлениюОстатки.ДокументПоступления
		|		ИЗ
		|			РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления = &Заказ) КАК ТоварыКПоступлениюОстатки) КАК ТаблицаПоступлений
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаПоступлений.ЗаказПоставщику) КАК СостояниеПоступлений
		|";
		
		Возврат ТекстЗапросаРасчетаМаксимальногоСтатусаПоПоступлению;
		
	КонецФункции
	
	Функция РассчитатьСтатусДокументаСервер(Объект, КоличествоОбработанных) Экспорт
		
		СтатусДоРасчета = Объект.Статус;
		
		СтатусРасчитан = Ложь;
		
		Если СтатусДоРасчета <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовПоставщикам.Закрыт") Тогда
			ЗаполнитьПередРасчетомМаксимальногоСтатуса(Объект);
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Отменено", Истина);
			НайденныеСтроки =  Объект.Товары.НайтиСтроки(ПараметрыОтбора); 
			
			ВсеСтрокиОтменены = (Объект.Товары.Количество() = НайденныеСтроки.Количество());
			
			ПараметрыРасчета = Новый Структура;
			ПараметрыРасчета.Вставить("Заказ", Объект.Ссылка);
			ПараметрыРасчета.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
			ПараметрыРасчета.Вставить("Проведен", Объект.Проведен);
			ПараметрыРасчета.Вставить("Статус", Объект.Статус);
			ПараметрыРасчета.Вставить("СуммаАвансаДоПодтверждения", Объект.СуммаАвансаДоПодтверждения);
			ПараметрыРасчета.Вставить("СуммаПредоплатыДоПоступления", Объект.СуммаПредоплатыДоПоступления);
			ПараметрыРасчета.Вставить("СуммаДокумента", Объект.СуммаДокумента);
			ПараметрыРасчета.Вставить("Договор", Объект.Договор);
			ПараметрыРасчета.Вставить("ПорядокРасчетов", ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(Объект));
			ПараметрыРасчета.Вставить("Склад", Объект.Склад);
			ПараметрыРасчета.Вставить("ЖелаемаяДатаПоступления", Объект.ЖелаемаяДатаПоступления);
			ПараметрыРасчета.Вставить("АдресТовары", ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить()));
			ПараметрыРасчета.Вставить("ЭтапыГрафикаОплаты", Объект.ЭтапыГрафикаОплаты);
			ПараметрыРасчета.Вставить("ОтборПоСостояниюНаличия", Перечисления.СостоянияНаличия.Любое);
			ПараметрыРасчета.Вставить("ПоступлениеОднойДатой", Объект.ПоступлениеОднойДатой);
			ПараметрыРасчета.Вставить("ВсеСтрокиОтменены", ВсеСтрокиОтменены);
			
			Объект.Статус = МаксимальныйСтатусЗаказаПоставщику(ПараметрыРасчета);
			
			Если НЕ СтатусДоРасчета = Объект.Статус Тогда
				СтатусРасчитан = Истина;
				КоличествоОбработанных = КоличествоОбработанных + 1;
			КонецЕсли;
		КонецЕсли;
		
		Возврат СтатусРасчитан
		
	КонецФункции
	
	Процедура ЗаполнитьПередРасчетомМаксимальногоСтатуса(Объект)
		
		// Заполним необходимые для расчета статуса данные
		
		Если ЗакупкиВызовСервера.ДатаПоступленияПустая(Объект, "Товары") Тогда
			Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления) И Объект.ЖелаемаяДатаПоступления >= Объект.Дата Тогда
				ДатаПоступления = Объект.ЖелаемаяДатаПоступления;
			Иначе
				ДатаПоступления = ТекущаяДата();
			КонецЕсли;
			
			Если Объект.ПоступлениеОднойДатой Тогда
				ЗаполнитьПустуюДатуПоступленияСервер(Объект, ДатаПоступления, Неопределено);
			Иначе
				ЗаполнитьПустыеДатыПоступленияСервер(Объект, ДатаПоступления);
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ЗаполнитьПустуюДатуПоступленияСервер(Объект, ДатаПоступления, Знач МассивВыделенныхСтрок)
		
		Если МассивВыделенныхСтрок = Неопределено Тогда
			
			Для Каждого СтрокаТЧ Из Объект.ВозвращаемыеТовары Цикл
				СтрокаТЧ.ДатаПоступления = ДатаПоступления;
			КонецЦикла;
			
		Иначе
			
			Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
				СтрокаТЧ = Объект.ВозвращаемыеТовары.НайтиПоИдентификатору(ИдентификаторСтроки);
				СтрокаТЧ.ДатаПоступления = ДатаПоступления;
			КонецЦикла;
			
		КонецЕсли;
		
		Объект.ДатаПоступления = ДатаПоступления;
		
	КонецПроцедуры
	
	Процедура ЗаполнитьПустыеДатыПоступленияСервер(Объект, ДатаПоступления);
		
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
				СтрокаТЧ.ДатаПоступления = ДатаПоступления;
			КонецЕсли;
		КонецЦикла;
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// Прочее
	
	Функция ЕстьОрдерныеСкладыВТЧТовары(ЗаказСсылка)
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &ЗаказСсылка
		|	И Товары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|");
		Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
		Возврат Не Запрос.Выполнить().Пустой();
		
	КонецФункции
	
	////////////////////////////////////////////////////////////////////////////////
	//Обновление информационной базы
	
	// Заполняется реквизит "Порядок расчетов" значением, установленные в договоре документа.
	//
	Процедура ЗаполнитьПорядокРасчетов() Экспорт
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ЕСТЬNULL(ДоговорыКонтрагентов.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)) КАК ПорядокРасчетов
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ПО ДанныеДокумента.Договор = ДоговорыКонтрагентов.Ссылка
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов <> ЕСТЬNULL(ДоговорыКонтрагентов.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|");
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ПорядокРасчетов = Выборка.ПорядокРасчетов;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ЗаполнитьРеквизитЗакупкаПодДеятельность() Экспорт 
		
		НалогообложениеОрганизаций = Новый Соответствие;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Документ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказПоставщику КАК Документ
		|ГДЕ
		|	Документ.ЗакупкаПодДеятельность = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
		|");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если ДокументОбъект.УдалитьЗакупкаПодДеятельностьОблагаемуюЕНВД Тогда
				ДокументОбъект.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД
			Иначе
				НалогообложениеНДС = НалогообложениеОрганизаций.Получить(ДокументОбъект.Организация);
				Если НалогообложениеНДС = Неопределено Тогда
					НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(ДокументОбъект.Организация, ДокументОбъект.Склад, ДокументОбъект.Дата);
					НалогообложениеОрганизаций.Вставить(ДокументОбъект.Организация, НалогообложениеНДС);
				КонецЕсли;
				ДокументОбъект.ЗакупкаПодДеятельность = НалогообложениеНДС;
			КонецЕсли;
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
	КонецПроцедуры
	&НаСервере
	//Ф18031994
	Функция ПерезаполнитьЗаказКлиентаДата(ЭтаФорма)  Экспорт
		Запрос = Новый Запрос ("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказПоставщику.Ссылка,
		|	ЗаказПоставщикуДополнительныеУслуги.ЗаказКлиента.Ссылка
		|ИЗ
		|	Документ.ЗаказПоставщику.ДополнительныеУслуги КАК ЗаказПоставщикуДополнительныеУслуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|		ПО ЗаказПоставщикуДополнительныеУслуги.Ссылка = ЗаказПоставщику.Ссылка
		|ГДЕ
		|	ЗаказПоставщику.Ссылка = &Ссылка
		|	И ЗаказПоставщикуДополнительныеУслуги.ЗаказКлиента.Ссылка <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПоставщику.Ссылка,
		|	ЗаказПоставщикуДополнительныеУслуги.ЗаказКлиента.Ссылка");
		Запрос.УстановитьПараметр("Ссылка", ЭтаФорма.Объект.Ссылка);
		//Запрос.УстановитьПараметр("NULL", Документы.Ссылка);
		Если НЕ Запрос.Выполнить().Пустой() Тогда   
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				ДокументОбъект = Выборка.ЗаказКлиентаСсылка.ПолучитьОбъект();
				//ДокументОбъект.АК_ДатаПоставкиЗаказчику.Очистить();
				Если Формат(ДокументОбъект.АК_ДатаПоставкиЗаказчику, "ДЛФ=Д") <> формат(ЭтаФорма.Объект.АК_ДатаВремяИсполненияУслуги, "ДЛФ=Д") Тогда
					ДокументОбъект.АК_ДатаПоставкиЗаказчику = ЭтаФорма.Объект.АК_ДатаВремяИсполненияУслуги;
					ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
					Сообщить(Строка(Выборка.ЗаказКлиентаСсылка) + " " + "(Именана Дата Поставки Заказчику) Записасан");
					Попытка
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
						Сообщить(Строка(Выборка.ЗаказКлиентаСсылка) + " " + "Проведен");
					Исключение
						Текст = ОписаниеОшибки();
					КонецПопытки;
				КонецЕсли;
				
				//Выборка.
			КонецЦикла;
		КонецЕсли;
		//ДокументОбъект = ЗаказКлиента.ПолучитьОбъект();
		////АК в 11.1 перестал очищать табличную часть при заполнении
		//ДокументОбъект.Товары.Очистить();
		//ДокументОбъект.Заполнить(ДокументОснование);
		//ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		//Попытка
		//	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		//Исключение
		//	Текст = ОписаниеОшибки();
		//	ВсеОК = Ложь;
		//КонецПопытки;
	КонецФункции
	//Ф18031994
	
#КонецЕсли



//{ ООО "АСТЭК" по заказу ООО "ПаксМед". Разработчик: Бурыкин Александр Дата: 10.02.2014
    &НаКлиенте
Функция ПечатьЗаказаНаДоставку3(СсылкаНаОбъект) ЭКСПОРТ
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Сообщить("1234567");
	//ЗаполнимЗаголовок
	Макет = Документы.ЗаказПоставщику.ПолучитьМакет("акЗаказНаДоставку3");
	
	ОбластьНомерЗаявки = Макет.ПолучитьОбласть("ДанныеЗаказа");
	ОбластьНомерЗаявки.Параметры.Заявка = СсылкаНаОбъект.Номер;
	
	//Разабьем дату на число и время
	а = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СсылкаНаОбъект.АК_ДатаВремяИсполненияУслуги);
	ДатаПодачи = а[0] + "." + а[1] + "." + а[2];
	ВремяПодачи  = а[3] + ":" + а[4];
	
	ОбластьНомерЗаявки.Параметры.ДатаПодачи =  ДатаПодачи;
	ОбластьНомерЗаявки.Параметры.ВремяПодачи = ВремяПодачи;
	ОбластьНомерЗаявки.Параметры.Транспорт = СсылкаНаОбъект.АК_Транспорт;
	
	ОбластьПунктыПогрузкиШапка = Макет.ПолучитьОбласть("ПунктыПогрузкиШапка");	
	ТабличныйДокумент.Вывести(ОбластьНомерЗаявки);
	ТабличныйДокумент.Вывести(ОбластьПунктыПогрузкиШапка);
	
	ОбластьПунктыПогрузкиСтрока = Макет.ПолучитьОбласть("ПунктыПогрузкиСтрока");
	ОбластьПунктыОтгрузкиШапка  = Макет.ПолучитьОбласть("ПунктыОтгрузкиШапка");
	ОбластьПунктыОтгрузкиСтрока = Макет.ПолучитьОбласть("ПунктыОтгрузкиСтрока");
	
	
	
	//ЕДИНЫЙ ЗАПРОС ДЛЯ ПУНКТОВ ПОГРУЗКИ И ДОСТАВКИ
	
	ЕдиныйЗапрос = новый Запрос;
	ЕдиныйЗапрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказНаДоставку.Ссылка КАК ЗаказНаДоставку,
	|	ЗаказПоставщикуДополнительныеУслуги.ПунктПогрузки,
	|	ЗаказПоставщикуДополнительныеУслуги.ПунктДоставки,
	|	ЗаказПоставщикуДополнительныеУслуги.ЗаказКлиента КАК ЗаказКлиента,
	|	ЗаказПоставщикуДополнительныеУслуги.ЗаказПоставщика КАК ЗаказПоставщику,
	|	ЗаказПоставщику.НомерПоДаннымПоставщика КАК НомерСчета,
	|	ЗаказПоставщику.ДатаПоДаннымПоставщика КАК ДатаСчета,
	|	ЗаказПоставщикуДополнительныеУслуги.ПунктПогрузки.Адрес КАК ПунктПогрузкиАдрес,
	|	ЗаказПоставщикуДополнительныеУслуги.ПунктПогрузки.ВремяРаботы КАК ПунктПогрузкиВремяРаботы,
	|	ЗаказПоставщикуДополнительныеУслуги.ПунктПогрузки.КонтактноеЛицоПартнера КАК ПунктПогрузкиКонтактноеЛицо,
	|	ЗаказПоставщикуДополнительныеУслуги.ПунктПогрузки.Наименование КАК ПунктПогрузкиОтправитель,
	|	ЗаказПоставщикуДополнительныеУслуги.ПунктДоставки.Адрес КАК ПунктДоставкиАдрес,
	|	ЗаказПоставщикуДополнительныеУслуги.ПунктДоставки.ВремяРаботы КАК ПунктДоставкиВремяРаботы,
	|	ЗаказПоставщикуДополнительныеУслуги.ПунктДоставки.КонтактноеЛицоПартнера КАК ПунктДоставкиКонтактноеЛицо,
	|	ЗаказПоставщикуДополнительныеУслуги.ПунктДоставки.Наименование КАК ПунктДоставкиПолучатель,
	|	ПогрузкаКонтактныеЛица.НомерТелефона КАК ПунктПогрузкиТелефон,
	|	ВыгрузкаКонтактныеЛица.НомерТелефона КАК ПунктДоставкиТелефон,
	|	ЗаказПоставщикуДополнительныеУслуги.ПунктПогрузки.Доверенность КАК ПунктПогрузкиДоверенность
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказНаДоставку
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.ДополнительныеУслуги КАК ЗаказПоставщикуДополнительныеУслуги
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК ПогрузкаКонтактныеЛица
	|			ПО ЗаказПоставщикуДополнительныеУслуги.ПунктПогрузки.КонтактноеЛицоПартнера = ПогрузкаКонтактныеЛица.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|			ПО ЗаказПоставщикуДополнительныеУслуги.ЗаказПоставщика = ЗаказПоставщику.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК ВыгрузкаКонтактныеЛица
	|			ПО ЗаказПоставщикуДополнительныеУслуги.ПунктДоставки.КонтактноеЛицоПартнера = ВыгрузкаКонтактныеЛица.Ссылка
	|		ПО (ЗаказПоставщикуДополнительныеУслуги.Ссылка = ЗаказНаДоставку.Ссылка)
	|ГДЕ
	|	ЗаказНаДоставку.Ссылка = &Ссылка
	|	И ПогрузкаКонтактныеЛица.Тип = &Тип
	|	И ВыгрузкаКонтактныеЛица.Тип = &Тип";
	
	ЕдиныйЗапрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	ЕдиныйЗапрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	
	Результат = ЕдиныйЗапрос.Выполнить().Выгрузить();
	
	//////////------------------------------------------
	//Заполнение пункта погрузки
	ПунктПогрузкиАдресСтарый =NULL;
	ЗаказклиентаСтарый =NULL;
	ЗаказПоставщикуСтарый =NULL;
	Для каждого СтрокаРезультата ИЗ Результат ЦИКЛ
		
		ОбластьПунктыПогрузкиСтрока.Параметры.АдресПунктаПогрузки = СтрокаРезультата.ПунктПогрузкиАдрес;
		ОбластьПунктыПогрузкиСтрока.Параметры.ВремяРаботыПунктаПогрузки = СтрокаРезультата.ПунктПогрузкиВремяРаботы;
		ОбластьПунктыПогрузкиСтрока.Параметры.КонтактноеЛицоПунктаПогрузки = СТРОКА(СтрокаРезультата.ПунктПогрузкиКонтактноеЛицо);
		
		ОбластьПунктыПогрузкиСтрока.Параметры.ОтправительПунктаПогрузки = СтрокаРезультата.ПунктПогрузкиОтправитель;
		
		Если СтрокаРезультата.ПунктПогрузкиДоверенность = ложь Тогда		        
			ОбластьПунктыПогрузкиСтрока.Параметры.ДокументыПунктаПогрузки = "По счету № " + СТРОКА(СтрокаРезультата.НомерСчета) + " от " + СТРОКА(Формат(ДАТА(СтрокаРезультата.ДатаСчета), "ДЛФ=Д"));
		Иначе
			ОбластьПунктыПогрузкиСтрока.Параметры.ДокументыПунктаПогрузки = "По счету № " + СТРОКА(СтрокаРезультата.НомерСчета) + " от " + СТРОКА(Формат(ДАТА(СтрокаРезультата.ДатаСчета), "ДЛФ=Д")) + " Необходима доверенность.";			
		КонецЕсли;
		//ОбластьПунктыПогрузкиСтрока.Параметры.ПримечаниеПунктаПогрузки = СтрокаРезультата.;	
		
		Если   ЗаказклиентаСтарый <> СтрокаРезультата.ЗаказКлиента
			ИЛИ ЗаказПоставщикуСтарый <> СтрокаРезультата.ЗаказПоставщику  Тогда
			ОбластьПунктыПогрузкиСтрока.Параметры.ОписаниеГрузаПунктаПогрузки = СТРОКА(СтрокаРезультата.ЗаказПоставщику)+ " по " +СТРОКА(СтрокаРезультата.ЗаказКлиента) + ". " ;
		КонецЕсли;
		ЗаказклиентаСтарый =СтрокаРезультата.ЗаказКлиента;
		ЗаказПоставщикуСтарый =СтрокаРезультата.ЗаказПоставщику;
		
		
		Если  ПунктПогрузкиАдресСтарый <> СтрокаРезультата.ПунктПогрузкиАдрес  Тогда
			ОбластьПунктыПогрузкиСтрока.параметры.КонтактноеЛицоПунктаПогрузки  = ОбластьПунктыПогрузкиСтрока.параметры.КонтактноеЛицоПунктаПогрузки + " тел. " + Строка(СтрокаРезультата.ПунктПогрузкиТелефон);				
			ТабличныйДокумент.Вывести(ОбластьПунктыПогрузкиСтрока);
		КонецЕсли;
		ПунктПогрузкиАдресСтарый = СтрокаРезультата.ПунктПогрузкиАдрес;
	КонецЦикла;	
	ТабличныйДокумент.Вывести(ОбластьПунктыОтгрузкиШапка);
	
	
	
	ПолучательАресСтарый = "";	
	Для каждого СтрокаРезультата ИЗ Результат ЦИКЛ
		
		ОбластьПунктыОтгрузкиСтрока.параметры.ПунктВыгрузкиПолучатель = СтрокаРезультата.ПунктДоставкиПолучатель;
		ОбластьПунктыОтгрузкиСтрока.параметры.ПунктВыгрузкиАдрес = СтрокаРезультата.ПунктДоставкиАдрес;
		
		ОбластьПунктыОтгрузкиСтрока.параметры.ПунктВыгрузкиВремяРаботы = СтрокаРезультата.ПунктДоставкиВремяРаботы;								
		ОбластьПунктыОтгрузкиСтрока.параметры.ПунктВыгрузкиКонтактноеЛицо = Строка(СтрокаРезультата.ПунктДоставкиКонтактноеЛицо);
		
		//ОбластьПунктыОтгрузкиСтрока.параметры.ПунктВыгрузкиДокументы =СтрокаРезультата.ПунктДоставки
		//ОбластьПунктыОтгрузкиСтрока.параметры.ПунктВыгрузкиКоличествоГрузчиков =СтрокаРезультата.ПунктДоставки
		//ОбластьПунктыОтгрузкиСтрока.параметры.ПунктВыгрузкиПримечание =СтрокаРезультата.ПунктДоставки
		Если  ПолучательАресСтарый <> СтрокаРезультата.ПунктДоставкиАдрес Тогда
			ОбластьПунктыОтгрузкиСтрока.параметры.ПунктВыгрузкиКонтактноеЛицо  = ОбластьПунктыОтгрузкиСтрока.параметры.ПунктВыгрузкиКонтактноеЛицо + " тел. " + Строка(СтрокаРезультата.ПунктДоставкиТелефон);
			
			
			ТабличныйДокумент.Вывести(ОбластьПунктыОтгрузкиСтрока);			
		КонецЕсли; 
		ПолучательАресСтарый = СтрокаРезультата.ПунктДоставкиАдрес;
	КонецЦикла;
	
	
	
	
	Возврат ТабличныйДокумент;
	
	
	
КонецФункции // ПечатьЗаказаНаДоставку3()


//} 