#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	////////////////////////////////////////////////////////////////////////////////
	// ПРОГРАММНЫЙ ИНТЕРФЕЙС
	
	
	// Рассчитывает сумму неотмененных строк заказа
	//
	// Возвращаемое значение:
	//	Число - Сумма заказанных строк
	//
	Функция ПолучитьСуммуЗаказанныхСтрок() Экспорт
		
		СуммаЗаказанныхСтрок = 0;
		
		НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("Отменено", Ложь));
		Если НайденныеСтроки.Количество() <> 0 Тогда
			
			Строки = Товары.Выгрузить(НайденныеСтроки, "СуммаСНДС");
			Строки.Свернуть( ,"СуммаСНДС");
			СуммаЗаказанныхСтрок = Строки[0].СуммаСНДС;
			
		КонецЕсли;
		
		Возврат СуммаЗаказанныхСтрок;
		
	КонецФункции
	
	// Рассчитывает количество заказанных строк заказа
	//
	// Возвращаемое значение:
	//	Число - Количество заказанных строк
	//
	Функция ПолучитьКоличествоЗаказанныхСтрок() Экспорт
		
		НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("Отменено", Ложь));
		Возврат НайденныеСтроки.Количество();
		
	КонецФункции
	
	// Заполняет табличную часть ЭтапыГрафикаОплаты
	//
	Процедура ЗаполнитьЭтапыГрафикаОплаты() Экспорт
		
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			ЭтапыГрафикаОплаты.Очистить();
		КонецЕсли;
		
		Если ПолучитьКоличествоЗаказанныхСтрок() <> 0 Тогда
			
			СуммаЗаказано = ПолучитьСуммуЗаказанныхСтрок();
			
			Если ЗакупкиВызовСервера.ГрафикСоглашенияЗаполнен(Соглашение) Тогда
				
				ЗакупкиСервер.ЗаполнитьЭтапыГрафикаОплатыПоСоглашению(ЭтотОбъект, СуммаЗаказано);
				
			Иначе
				
				НовыйЭтап                = ЭтапыГрафикаОплаты.Добавить();
				НовыйЭтап.ВариантОплаты  = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления;
				НовыйЭтап.ДатаПлатежа    = ?(ЗначениеЗаполнено(ЖелаемаяДатаПоступления), ЖелаемаяДатаПоступления, Дата);
				НовыйЭтап.ПроцентПлатежа = 100;
				НовыйЭтап.СуммаПлатежа   = СуммаЗаказано;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Заполняет условия продаж в заказе поставщику
	//
	// Параметры:
	//	УсловияЗакупок - Структура - Структура для заполнения
	//
	Процедура ЗаполнитьУсловияЗакупок(Знач УсловияЗакупок) Экспорт
		
		Если УсловияЗакупок = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Валюта = УсловияЗакупок.Валюта;
		
		Если ЗначениеЗаполнено(УсловияЗакупок.ФормаОплаты) Тогда
			ФормаОплаты = УсловияЗакупок.ФормаОплаты;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УсловияЗакупок.Организация) И УсловияЗакупок.Организация<>Организация Тогда
			Организация = УсловияЗакупок.Организация;
			БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, ФормаОплаты);
			Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Организация, ФормаОплаты);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УсловияЗакупок.Склад) Тогда
			Склад = УсловияЗакупок.Склад;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УсловияЗакупок.Контрагент) Тогда
			Контрагент = УсловияЗакупок.Контрагент;
		КонецЕсли;
		
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
		
		Если ЗначениеЗаполнено(УсловияЗакупок.ХозяйственнаяОперация) Тогда
			ХозяйственнаяОперация = УсловияЗакупок.ХозяйственнаяОперация;
		КонецЕсли;
		
		ХозяйственнаяОперацияДоговора = ?(
		ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет")
		Или ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо"),
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика"),
		ХозяйственнаяОперация
		);
		
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
		Договор,
		Партнер,
		Контрагент,
		Организация,
		ХозяйственнаяОперацияДоговора,
		Валюта,
		Соглашение
		);
		
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчет);
		
		НалогообложениеНДС = УсловияЗакупок.НалогообложениеНДС;
		ЦенаВключаетНДС    = УсловияЗакупок.ЦенаВключаетНДС;
		
		Если ЗначениеЗаполнено(УсловияЗакупок.ГруппаФинансовогоУчета) Тогда
			ГруппаФинансовогоУчета = УсловияЗакупок.ГруппаФинансовогоУчета;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УсловияЗакупок.СрокПоставки) Тогда
			ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
			ЖелаемаяДатаПоступления = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаДокумента, Перечисления.Периодичность.День, УсловияЗакупок.СрокПоставки) + 1;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Склад) Тогда
			ЗакупкаПодДеятельность = Справочники.Организации.НалогообложениеНДС(Организация, Склад, Дата);
		КонецЕсли;
		
		РегистрироватьЦеныПоставщика = УсловияЗакупок.РегистрироватьЦеныПоставщика;
		ВернутьМногооборотнуюТару = УсловияЗакупок.ВозвращатьМногооборотнуюТару;
		СрокВозвратаМногооборотнойТары = УсловияЗакупок.СрокВозвратаМногооборотнойТары;
		
		АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Организация, "Фактический");
		
	КонецПроцедуры
	
	// Заполняет условия закупок по торговому соглашению с поставщиком
	//
	// Параметры:
	//	ПересчитатьЦены - Булево - Истина, если необходимо пересчитать цены в табличной части документа
	//
	Процедура ЗаполнитьУсловияЗакупокПоУмолчанию(ПересчитатьЦены = Истина) Экспорт
		
		Если ЗначениеЗаполнено(Партнер) Тогда
			
			УсловияЗакупокПоУмолчанию = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(Партнер, Новый Структура("УчитыватьГруппыСкладов, ВыбранноеСоглашение", Истина, Соглашение));
			ЦеныЗаполнены = Ложь;
			
			Если УсловияЗакупокПоУмолчанию <> Неопределено Тогда
				
				Если Соглашение <> УсловияЗакупокПоУмолчанию.Соглашение
					И ЗначениеЗаполнено(УсловияЗакупокПоУмолчанию.Соглашение) Тогда
					
					Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
					ЗаполнитьУсловияЗакупок(УсловияЗакупокПоУмолчанию);
					
					Если ПересчитатьЦены И ЗначениеЗаполнено(Соглашение) Тогда
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
						ЦеныЗаполнены = ЗакупкиСервер.ЗаполнитьЦены(
						Товары,
						, // Массив строк
						Новый Структура( // Параметры заполнения
						"ПоляЗаполнения, Дата, Валюта, Соглашение",
						"Цена, СтавкаНДС, УсловиеЦеныПоставщика",
						Дата,
						Валюта,
						Соглашение
						),
						Новый Структура( // Структура действий с измененныими строками
						"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ПересчитатьСуммуСУчетомРучнойСкидки",
						"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Новый Структура("Очищать", Ложь)
						)
						);
						
					КонецЕсли;
				Иначе
					Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
				КонецЕсли;
			Иначе
				ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
				Соглашение = Неопределено;
			КонецЕсли;
			
			ТребуетсяДоверенность = Документы.ЗаказПоставщику.ПолучитьПризнакТребуетсяДоверенностьПоследнегоЗаказа(Партнер);
			
		КонецЕсли;
		
		ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
		АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Организация, "Фактический");
		
	КонецПроцедуры
	
	// Заполняет условия продаж по соглашению в заказе поставщику
	//
	// Параметры:
	//	ПересчитатьЦены - Булево - Истина, если необходимо пересчитать цены в табличной части документа
	//
	Процедура ЗаполнитьУсловияЗакупокПоСоглашению(ПересчитатьЦены = Истина) Экспорт
		
		УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(Соглашение, Истина);
		ЗаполнитьУсловияЗакупок(УсловияЗакупок);
		
		Если ПересчитатьЦены Тогда
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
			ЗакупкиСервер.ЗаполнитьЦены(
			Товары,
			, // Массив строк
			Новый Структура( // Параметры заполнения
			"ПоляЗаполнения, Дата, Валюта, Соглашение",
			"Цена, СтавкаНДС, УсловиеЦеныПоставщика",
			Дата,
			Валюта,
			Соглашение
			),
			Новый Структура( // Структура действий с измененныими строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ПересчитатьСуммуСУчетомРучнойСкидки",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Новый Структура("Очищать", Ложь)
			)
			);
		КонецЕсли;
		
	КонецПроцедуры
	
	// Отменяет все строки, по которым не было документально оформлено поступление
	//
	// Параметры:
	//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыПоставщикам
	//	ПроверятьОстатки - Булево
	//
	// Возвращаемое значение:
	//	Число - Количество отмененных строк
	//
	Функция ОтменитьНепоставленныеСтроки(ПричинаОтмены, Знач ПроверятьОстатки = Ложь) Экспорт
		
		КоличествоОтмененныхСтрок = 0;
		
		СвойстваОтмененнойСтроки = Новый Структура(
		"Отменено, ПричинаОтмены",
		Истина, ПричинаОтмены
		);
		
		Если Не ПроверятьОстатки Тогда
			Для н = 0 По Товары.Количество() - 1 Цикл
				Если Не Товары[н].Отменено Тогда
					ЗаполнитьЗначенияСвойств(Товары[н], СвойстваОтмененнойСтроки);
					КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
				КонецЕсли;
			КонецЦикла;
			Возврат КоличествоОтмененныхСтрок;
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТаблицаТовары.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
		|	ВЫРАЗИТЬ(ТаблицаТовары.КодСтроки КАК ЧИСЛО) КАК КодСтроки,
		|	ВЫРАЗИТЬ(ТаблицаТовары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
		|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО) КАК Количество,
		|	ВЫРАЗИТЬ(ТаблицаТовары.Отменено КАК БУЛЕВО) КАК Отменено
		|ПОМЕСТИТЬ ТаблицаТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Отменено = ЛОЖЬ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ТаблицаТовары.КодСтроки КАК КодСтроки,
		|	ЕСТЬNULL(ТаблицаТовары.Упаковка.Коэффициент, 1) КАК КоэффициентУпаковки,
		|	ТаблицаТовары.Количество КАК Количество,
		|	Остатки.КОформлениюОстаток,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Количество = Остатки.КОформлениюОстаток
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК РазбитьСтроку
		|ИЗ
		|	ТаблицаТовары КАК ТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &ЗаказПоставщику) КАК Остатки
		|		ПО ТаблицаТовары.КодСтроки = Остатки.КодСтроки
		|			И (Остатки.КОформлениюОстаток > 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки");
		
		Запрос.УстановитьПараметр(
		"ТаблицаТовары",
		Товары.Выгрузить(
		, // Массив строк для выгрузки
		"НомерСтроки, КодСтроки, Упаковка, Количество, Отменено"
		)
		);
		Запрос.УстановитьПараметр("ЗаказПоставщику", Ссылка);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат КоличествоОтмененныхСтрок;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Строка = Товары[Выборка.НомерСтроки-1];
			
			Если Выборка.РазбитьСтроку Тогда
				
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваОтмененнойСтроки);
				НоваяСтрока.КодСтроки = 0;
				
				Строка.Количество              = Выборка.Количество - Выборка.КОформлениюОстаток;
				Строка.КоличествоУпаковок      = (Выборка.Количество - Выборка.КОформлениюОстаток) / Выборка.КоэффициентУпаковки;
				НоваяСтрока.Количество         = Выборка.КОформлениюОстаток;
				НоваяСтрока.КоличествоУпаковок = Выборка.КОформлениюОстаток / Выборка.КоэффициентУпаковки;
				
				Ценообразование.ПересчитатьСуммыВСтроке(Строка, Ложь, Ложь, Истина, ЦенаВключаетНДС);
				Ценообразование.ПересчитатьСуммыВСтроке(НоваяСтрока, Ложь, Ложь, Истина, ЦенаВключаетНДС);
				
			Иначе
				
				ЗаполнитьЗначенияСвойств(Строка, СвойстваОтмененнойСтроки);
				
			КонецЕсли;
			
			КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			
		КонецЦикла;
		
		Возврат КоличествоОтмененныхСтрок;
		
	КонецФункции
	
	// Устанавливает статус для объекта документа
	//
	// Параметры:
	//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
	//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
	//
	// Возвращаемое значение:
	//	Булево - Истина, в случае успешной установки нового статуса
	//
	Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
		
		ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПоставщикам[НовыйСтатус];
		
		Если ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован Тогда
			
			Если Согласован Тогда
				Согласован = Ложь;
			КонецЕсли;
			
		ИначеЕсли (Статус <> Перечисления.СтатусыЗаказовПоставщикам.Закрыт И
			Статус <> Перечисления.СтатусыЗаказовПоставщикам.Подтвержден И
			Статус <> Перечисления.СтатусыЗаказовПоставщикам.КПоступлению И
			(ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден Или // Если статус меняется на "Подтвержден"
			ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению)) Тогда // или "КПоступлению"
			
			Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) Тогда
				
				Для Каждого СтрокаТЧ Из Товары Цикл
					Если Не СтрокаТЧ.Отменено
						И Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПоступления) Тогда
						СтрокаТЧ.ДатаПоступления = ЖелаемаяДатаПоступления;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДополнительныеПараметры <> Неопределено Тогда
			ЗначениеПараметра = Неопределено;
			Если ДополнительныеПараметры.Свойство("ОтменаНеотработанныхСтрок", ЗначениеПараметра) Тогда
				
				КоличествоСтрок = ОтменитьНепоставленныеСтроки(ЗначениеПараметра, Истина);
				Если КоличествоСтрок <> 0 Тогда
					ЗаполнитьЭтапыГрафикаОплаты();
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Статус = ЗначениеНовогоСтатуса;
		
		Возврат ПроверитьЗаполнение();
		
	КонецФункции
	
	////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТЧИКИ СОБЫТИЙ
	
	Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
		
		ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
		Если НЕ ТипДанныхЗаполнения = Тип("Структура") Тогда
			ЗаполнитьПоЗначениямАвтозаполнения(ДанныеЗаполнения);
		КонецЕсли;
		
		НеобходимаИнициализация = Истина;
		
		Если ТипДанныхЗаполнения = Тип("Структура") Тогда
			
			ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
			
		ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.Партнеры") Тогда
			
			ЗаполнитьДокументНаОснованииПартнера(ДанныеЗаполнения);
			
		ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
			
			ЗаполнитьДокументНаОснованииСоглашенияСПоставщиком(ДанныеЗаполнения);
			
		ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
			
			ЗаполнитьДокументНаОснованииСделки(ДанныеЗаполнения);
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			
			ЗаполнитьДокументНаОснованииЗаказа(ДанныеЗаполнения);
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
			
			ЗаполнитьДокументНаОснованииЗаказаНаПеремещение(ДанныеЗаполнения);
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
			
			ЗаполнитьДокументНаОснованииЗаказаНаСборку(ДанныеЗаполнения);
			
		ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ИзменениеАссортимента") Тогда
			
			ИнициализироватьДокумент(ДанныеЗаполнения);
			НеобходимаИнициализация = Ложь;
			ЗаполнитьДокументНаОснованииИзмененияАссортимента(ДанныеЗаполнения);
			
		КонецЕсли;
		
		Если НеобходимаИнициализация Тогда
			
			ИнициализироватьДокумент(ДанныеЗаполнения);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		
		Если ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
		
		ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
		
		ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
		ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
		
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");
		
		СуммаДокумента = ПолучитьСуммуЗаказанныхСтрок();
		ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
			Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			
			ЭтапыГрафикаОплаты.Очистить();
			СуммаАвансаДоПодтверждения = 0;
			СуммаПредоплатыДоПоступления = 0;
			
		Иначе
			ТаблицаЭтапов = ЭтапыГрафикаОплаты.Выгрузить(, "ВариантОплаты, СуммаПлатежа");
			ТаблицаЭтапов.Свернуть("ВариантОплаты", "СуммаПлатежа");
			
			СтрокаАвансаДоПодтверждения = ТаблицаЭтапов.Найти(Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения,"ВариантОплаты");
			
			Если СтрокаАвансаДоПодтверждения = Неопределено Тогда
				СуммаАвансаДоПодтверждения = 0;
			Иначе
				СуммаАвансаДоПодтверждения = СтрокаАвансаДоПодтверждения.СуммаПлатежа;
			КонецЕсли;
			
			СтрокаПредоплатыДоПоступления = ТаблицаЭтапов.Найти(Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления,"ВариантОплаты");
			
			Если СтрокаПредоплатыДоПоступления = Неопределено Тогда
				СуммаПредоплатыДоПоступления = 0;
			Иначе
				СуммаПредоплатыДоПоступления = СтрокаПредоплатыДоПоступления.СуммаПлатежа;
			КонецЕсли;
		КонецЕсли;
		
		НоваяДатаПоступления = Дата(1,1,1);
		
		Если Товары.Количество() > 0 Тогда
			
			Если Статус = Перечисления.СтатусыЗаказовПоставщикам.Согласован Или
				Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден Тогда
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Отменено", Ложь);
				ПодтвержденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
				
				Если ПодтвержденныеСтроки.Количество() > 0 Тогда
					
					ТаблицаПодтвержденныхСтрок = Товары.Выгрузить(ПодтвержденныеСтроки, "ДатаПоступления");
					ТаблицаПодтвержденныхСтрок.Сортировать("ДатаПоступления Возр");
					НоваяДатаПоступления = ТаблицаПодтвержденныхСтрок[0].ДатаПоступления;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДатаПервогоПоступления = НоваяДатаПоступления;
		
		ДокументСогласован = Согласован;
		
		ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(
		ЭтотОбъект,
		РежимЗаписи,
		Перечисления.СтатусыЗаказовПоставщикам.НеСогласован
		);
		
		// Установим дату согласования, если документ согласован
		Если Не ДокументСогласован И Согласован Тогда
			ДатаСогласования = ТекущаяДата();
		КонецЕсли;
		
		ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизитыФормыОплаты(ЭтотОбъект, ФормаОплаты);
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
			НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		КонецЕсли;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(Товары, Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Договор) Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокРасчетов");
		Иначе
			ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		КонецЕсли;
		
		// Доработка + Станислав 07.08.2014
		Для каждого ТекСтрока из Товары цикл
			Если ТекСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
				Если  ТекСтрока.СтатьяРасходов.Пустая() Тогда
					ТекСтрока.СтатьяРасходов = ПланыВидовХарактеристик["СтатьиРасходов"].НайтиПоНаименованию(СокрЛП(ТекСтрока.Номенклатура.Наименование) );
					Записать();
				//ИначеЕсли СокрЛП(ТекСтрока.Номенклатура.Наименование)  <> СокрЛП(ТекСтрока.СтатьяРасходов.Наименование) Тогда
				//	СтатьяРасходов = ПланыВидовХарактеристик["СтатьиРасходов"].НайтиПоНаименованию(СокрЛП(ТекСтрока.Номенклатура.Наименование) );
				//	Если НЕ СтатьяРасходов = Неопределено Тогда
				//	ТекСтрока.СтатьяРасходов = СтатьяРасходов;
				//	Записать();
						Иначе
					ТекСтрока.СтатьяРасходов = ПланыВидовХарактеристик["СтатьиРасходов"].НайтиПоНаименованию(СокрЛП("Прочие услуги") );
					//Записать();
					//КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 	
		КонецЦИкла;
		// Доработка - Станислав 07.08.2014

	КонецПроцедуры
	
	Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
		
		МассивНепроверяемыхРеквизитов = Новый Массив;
		
		Если Не ЗначениеЗаполнено(Соглашение) Или Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "ИспользуютсяДоговорыКонтрагентов") Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Договор");
		КонецЕсли;
		
		ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
		//АСТЕК
		//НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
		Если СокрЛП(Партнер.Наименование) =  "Доктор Мебель ООО" Тогда
			//ПроверяемыеРеквизиты.Добавить("Товары.АК_ИнформацияДляОтделаЗакупки");
		КонецЕсли;

		
		// Срок действия заказа должен быть не меньше даты документа
		Если Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован И
			ЗначениеЗаполнено(ДатаСогласования) И ДатаСогласования < НачалоДня(ДатаСогласования) Тогда
			
			ТекстОшибки = НСтр("ru='Дата согласования должна быть не меньше даты документа %Дата%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата, "ДЛФ=DD"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"СрокДействия",
			,
			Отказ
			);
			
		КонецЕсли;
		
		Если Не ПоступлениеОднойДатой ИЛИ 
			ПоступлениеОднойДатой И 
			НЕ(Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден Или
			Статус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению Или
			Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт) 
			ИЛИ ПоступлениеОднойДатой И ВсеСтрокиОтменены() Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ДатаПоступления");
			
		КонецЕсли;
		
		// Желаемая дата поступления в шапке должна быть не меньше даты документа
		Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда
			
			ТекстОшибки = НСтр("ru='Желаемая дата поступления должна быть не меньше даты документа %Дата%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаПоступления",
			,
			Отказ
			);
			
		КонецЕсли;
		
		// Дата поступления в шапке должна быть не меньше даты документа
		Если ПоступлениеОднойДатой И 
			ЗначениеЗаполнено(ДатаПоступления) И 
			ДатаПоступления < НачалоДня(Дата)
			И НЕ ВсеСтрокиОтменены() Тогда
			
			ТекстОшибки = НСтр("ru='Дата поступления должна быть не меньше даты документа %Дата%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаПоступления",
			,
			Отказ
			);
			
		КонецЕсли;
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ПричинаОтмены");
		МассивНепроверяемыхРеквизитов.Добавить("Товары.ДатаПоступления");
		//1с-ит. Чечин Петр. 2014-05-23
		Если АК_ТипУслуги = ПредопределенноеЗначение("Перечисление.АК_ТипУслуги.Монтаж") Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Товары.Цена");	
			МассивНепроверяемыхРеквизитов.Добавить("Товары.Сумма");
		КонецЕсли;
		
		Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
			
			АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""'");
			АдресОшибки =  СтрЗаменить(АдресОшибки, "%НомерСтроки%", Товары[ТекИндекс].НомерСтроки);
			
			// Дата поступления в тч Товары обязательна к заполнению только для заказов в 
			// статусах Подтвержден, КПоступлению, Закрыт
			Если Не ПоступлениеОднойДатой
				И (Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден Или
				Статус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению Или
				Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт) И
				Не Товары[ТекИндекс].Отменено И
				Не ЗначениеЗаполнено(Товары[ТекИндекс].ДатаПоступления) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата поступления""'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ДатаПоступления"),
				,
				Отказ
				);
				
			КонецЕсли;
			
			// Дата поступления в тч Товары должна быть не меньше даты документа
			Если Не ПоступлениеОднойДатой И ЗначениеЗаполнено(Товары[ТекИндекс].ДатаПоступления) И Товары[ТекИндекс].ДатаПоступления < НачалоДня(Дата) Тогда
				
				ТекстОшибки = НСтр("ru='Дата поступления должна быть не меньше даты документа %Дата%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ДатаПоступления"),
				,
				Отказ
				);
				
			КонецЕсли;
			
			// Причина отмены обязательна для заполнения в строках без признака Отменено
			Если Товары[ТекИндекс].Отменено И
				Не ЗначениеЗаполнено(Товары[ТекИндекс].ПричинаОтмены) Тогда
				
				ТекстОшибки = НСтр("ru='Необходимо указать причину отмены'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ПричинаОтмены"),
				,
				Отказ
				);
				
			КонецЕсли;
			
		КонецЦикла;
		
		//Проверка заполнения подразделения для заказа в статусе "КОбеспечению" и выше.
		Если (Статус    = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению 
			ИЛИ Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке 
			ИЛИ Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт) Тогда
			
			ТипыНоменклатурыВТабличнойЧасти = НоменклатураСервер.ПроверитьНаличиеРабот(ЭтотОбъект);
			ПроверятьПодразделение = ТипыНоменклатурыВТабличнойЧасти.ЕстьРаботы; 
			
		Иначе
			
			ПроверятьПодразделение = Ложь;
			
		КонецЕсли;
		
		Если ПроверятьПодразделение И Не ЗначениеЗаполнено(Подразделение) Тогда 
			
			ТекстОшибки = НСтр("ru='Необходимо указать обеспечивающее подразделение для заказываемых работ'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"Подразделение",
			,
			Отказ
			);
			
		КонецЕсли;
		
		// Проверим корректность заполнения этапов графика оплаты
		
		Если ЗначениеЗаполнено(Дата) Тогда
			ДатаДокумента = НачалоДня(Дата);
		КонецЕсли;
		//Доработка +
		Если ЭтапыГрафикаОплаты.Количество() = 0 Тогда
			ЗаполнитьЭтапыГрафикаОплаты();
		КонецЕсли; 
		//Доработка -
		
		Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
			И ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект) <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
			
			ЗакупкиСервер.ПроверитьКорректностьЭтаповГрафикаОплаты(ЭтотОбъект, ПолучитьСуммуЗаказанныхСтрок(), Истина, Отказ, Истина);
			
		КонецЕсли;
		
		МассивВсехРеквизитов = Новый Массив;
		МассивРеквизитовОперации = Новый Массив;
		
		Документы.ЗаказПоставщику.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
		);
		ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов
		);
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		
		ПроверитьИзменениеХозяйственнойОперации(Отказ);
		
		Если Не Отказ Тогда
			Отказ = ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты);
		КонецЕсли;
		
		ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект, Отказ);
		
	КонецПроцедуры
	
	Процедура ОбработкаПроведения(Отказ, РежимПроведения)
		
		
		
		ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
		
		Документы.ЗаказПоставщику.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
		
		ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
		
		ЗаказыСервер.ОтразитьЗаказыПоставщикам(ДополнительныеСвойства, Движения, Отказ);
		
		ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
		ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
		
		ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
		ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщикамиПоследовательность(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ);
		
		ЗапасыСервер.ОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
		ЗапасыСервер.ОтразитьОбеспечениеЗаказовРаботами(ДополнительныеСвойства, Движения, Отказ);
		
		Ценообразование.ОтразитьЦеныНоменклатурыПоставщика(ДополнительныеСвойства, Движения, Отказ);
		
		СформироватьСписокРегистровДляКонтроля();
		
		ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
		ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
		
		ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
		
		// АК Игорь 20 02 2013
		
		Если АК_ТипУслуги = Перечисления.АК_ТипУслуги.Монтаж тогда
			ЕстьМонтаж = Истина;
		Иначе
			ЕстьМонтаж = Ложь;
		КонецЕсли;
		
		Если АК_ТипУслуги = Перечисления.АК_ТипУслуги.Доставка тогда
			ЕстьДоставка = Истина;
		Иначе
			ЕстьДоставка = Ложь;
		КонецЕсли;
		
		Если ЕстьДоставка или ЕстьМонтаж тогда
			Движения.АК_СтатусДоставкиМонтажа.Записывать = Истина;
			Для каждого ТекСтр из ДополнительныеУслуги цикл
				НоваяЗапись = Движения.АК_СтатусДоставкиМонтажа.Добавить();
				НоваяЗапись.Активность = Истина;
				НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
				НоваяЗапись.Доставка = ?(ЕстьДоставка,ТекСтр.Количество,0);
				НоваяЗапись.Монтаж = ?(ЕстьМонтаж,ТекСтр.Количество,0);
				НоваяЗапись.Номенклатура =ТекСтр.Номенклатура;
				НоваяЗапись.Период = Дата;
				НоваяЗапись.Характеристика = ТекСтр.Характеристика;
				НоваяЗапись.ЗаказКлиента = ТекСтр.ЗаказКлиента;
			КонецЦИкла;
		КонецЕсли;
		
		
	КонецПроцедуры
	
	Процедура ОбработкаУдаленияПроведения(Отказ)
		
		ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
		
		ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
		
		СформироватьСписокРегистровДляКонтроля();
		
		ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
		
		ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
		
		ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
		
	КонецПроцедуры
	
	Процедура ПриКопировании(ОбъектКопирования)
		
		Статус                  = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
		ЖелаемаяДатаПоступления = Дата(1,1,1);
		ДатаПоступления         = Дата(1,1,1);
		ДатаСогласования        = Дата(1,1,1);
		МаксимальныйКодСтроки   = 0;
		Согласован              = Ложь;
		НомерПоДаннымПоставщика = "";
		ДатаПоДаннымПоставщика  = Дата(1,1,1);
		СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();
		
		Если ЗначениеЗаполнено(Соглашение) Тогда
			УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(Соглашение, Истина);
			Если ЗначениеЗаполнено(УсловияЗакупок.СрокПоставки) Тогда
				ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
				ЖелаемаяДатаПоступления = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаДокумента, Перечисления.Периодичность.День, УсловияЗакупок.СрокПоставки) + 1;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			СтрокаТЧ.КодСтроки       = 0;
			СтрокаТЧ.ДатаПоступления = Дата(1,1,1);
			
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из ЭтапыГрафикаОплаты Цикл
			СтрокаТЧ.ДатаПлатежа = Дата(1,1,1);
		КонецЦикла;
		
		ИнициализироватьДокумент();
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
	
	////////////////////////////////////////////////////////////////////////////////
	// Инициализация и заполнение
	
	Процедура ЗаполнитьДокументНаОснованииПартнера(Знач Основание)
		
		Партнер = Основание;
		ЗаполнитьУсловияЗакупокПоУмолчанию();
		
	КонецПроцедуры
	
	Процедура ЗаполнитьДокументНаОснованииСоглашенияСПоставщиком(Знач СправочникОснование)
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СоглашениеСПоставщиком.Ссылка  КАК Соглашение,
		|	СоглашениеСПоставщиком.Партнер КАК Партнер,
		|
		|	СоглашениеСПоставщиком.Статус  КАК СтатусДокумента,
		|	ВЫБОР
		|		КОГДА
		|			СоглашениеСПоставщиком.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиСтатус
		|
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
		|ГДЕ
		|	СоглашениеСПоставщиком.Ссылка = &СправочникОснование
		|");
		
		Запрос.УстановитьПараметр("СправочникОснование", СправочникОснование);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Выборка = РезультатЗапроса[0].Выбрать();
		Выборка.Следующий();
		
		МассивДопустимыхСтатусов = Новый Массив();
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыСоглашенийСПоставщиками.Действует);
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.Соглашение,
		Выборка.СтатусДокумента,
		,
		Выборка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов
		);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		
		ЗаполнитьУсловияЗакупокПоСоглашению();
		
	КонецПроцедуры
	
	Процедура ЗаполнитьДокументНаОснованииСделки(СделкаСКлиентом)
		
		Если Документы.ЗаказКлиента.ЕстьОбособленныеЗаказыПоСделке(СделкаСКлиентом) Тогда
			
			ЗаполнитьДокументНаОснованииСделкиПоОбособленныемЗаказам(СделкаСКлиентом);
			
		Иначе
			
			ЗаполнитьДокументНаОснованииСделкиСводно(СделкаСКлиентом);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)
		
		ЗаполнитьЗначенияСвойств (ЭтотОбъект,ДанныеЗаполнения);
		ЗаполнитьУсловияЗакупокПоУмолчанию();
		
	КонецПроцедуры
	
	Процедура ЗаполнитьПоЗначениямАвтозаполнения(ДанныеЗаполнения = Неопределено)
		
		ЕстьДанныеЗаполнения = (НЕ ДанныеЗаполнения = Неопределено);
		ДанныеЗаполненияСтруктура = (ТипЗнч(ДанныеЗаполнения) = Тип("Структура"));
		
		Если Не ЕстьДанныеЗаполнения Или ДанныеЗаполненияСтруктура Тогда
			// Заполним основные свойства
			СвойстваАвтозаполнения = Новый Структура("Организация, Склад, ХозяйственнаяОперация");
			
			Если ДанныеЗаполненияСтруктура Тогда
				ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(СвойстваАвтозаполнения, ДанныеЗаполнения, Истина);
				
			КонецЕсли;
			
			ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(Ссылка, СвойстваАвтозаполнения);
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваАвтозаполнения);
			
			// Заполним банковский счет и кассу в зависимости от органиазции
			СвойстваАвтозаполнения = Новый Структура("Организация, БанковскийСчет, Касса", Организация);
			
			Если ДанныеЗаполненияСтруктура Тогда
				ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(СвойстваАвтозаполнения, ДанныеЗаполнения, Истина);
				
			КонецЕсли;
			
			ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(Ссылка, СвойстваАвтозаполнения);
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваАвтозаполнения);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ЗаполнитьПоНеОбособленномуЗаказуКлиента(ДанныеЗаполнения) экспорт
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Ссылка.Статус КАК СтатусДокумента,
		|	ЗаказКлиентаТовары.Ссылка.Проведен КАК Проведен,
		|	ЗаказКлиентаТовары.Ссылка.Организация КАК Организация,
		|	ЗаказКлиентаТовары.Ссылка.Сделка КАК Сделка,
		|	ЗаказКлиентаТовары.Ссылка.Склад КАК СкладДокумента,
		|	ЗаказКлиентаТовары.Ссылка.Склад.ЭтоГруппа КАК ЭтоГруппа,
		|	ЗаказКлиентаТовары.Ссылка.Подразделение КАК Подразделение,
		|	ЗаказКлиентаТовары.Номенклатура КАК Номенклатура,
		|	ЗаказКлиентаТовары.Характеристика КАК Характеристика,
		|	ЗаказКлиентаТовары.Упаковка КАК Упаковка,
		|	ЗаказКлиентаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЗаказКлиентаТовары.Количество КАК Количество,
		|	ЗаказКлиентаТовары.СтавкаНДС КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА &ИспользоватьСклады
		|			ТОГДА ЗаказКлиентаТовары.Склад
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Склад,
		|	ВЫБОР
		|		КОГДА ЗаказКлиентаТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	ЗаказКлиентаТовары.АК_ТекстовоеОписание,
		|	ЗаказКлиентаТовары.АК_ДопКомплектация,
		|	ЗаказКлиентаТовары.АК_ПунктДоставки,
		|	ЗаказКлиентаТовары.АК_ПунктМонтажа,
		|	ЗаказКлиентаТовары.АК_ПроцентНаценкиДоставка,
		|	ЗаказКлиентаТовары.АК_ПроцентНаценкиДоставкаКлиент,
		|	ЗаказКлиентаТовары.АК_ПроцентНаценкиДоставкаАгент,
		|	ЗаказКлиентаТовары.АК_ПроцентНаценкиМонтаж,
		|	ЗаказКлиентаТовары.АК_ПроцентНаценкиМонтажКлиент,
		|	ЗаказКлиентаТовары.АК_ПроцентНаценкиМонтажАгент,
		|	ЗаказКлиентаТовары.АК_ДопУслугиСумма,
		|	ЗаказКлиентаТовары.АК_ДопУслугиСуммаНДС,
		|	ЗаказКлиентаТовары.АК_ПризнакНестандарт,
		|	ЗаказКлиентаТовары.АК_НестандартОписание,
		|	ЗаказКлиентаТовары.АК_ПризнакЭскиз,
		|	ЗаказКлиентаТовары.АК_ЭскизФайл,
		|	ЗаказКлиентаТовары.АК_ИнформацияДляОтделаЗакупки
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|ГДЕ
		|	ЗаказКлиентаТовары.Ссылка = &ДанныеЗаполнения
		|	И НЕ ЗаказКлиентаТовары.Отменено";
		
		Запрос.УстановитьПараметр("ДанныеЗаполнения", ДанныеЗаполнения);
		Запрос.УстановитьПараметр("ИспользоватьСклады", Ложь);
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Выборка = РезультатЗапроса[0].Выбрать();
		Выборка.Следующий();
		
		МассивДопустимыхСтатусов = Новый Массив();
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.Согласован);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОбеспечению);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОтгрузке);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.Закрыт);
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ДанныеЗаполнения,
		Выборка.СтатусДокумента,
		НЕ Выборка.Проведен,
		Выборка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов
		);
		
		Организация       = Выборка.Организация;
		Сделка            = Выборка.Сделка;
		ДокументОснование = ДанныеЗаполнения;
		Подразделение     = Выборка.Подразделение;
		
		ИспользованиеСкладов = Новый Структура(
		"ИспользуютсяСкладыЗакупки,ИспользуютсяСкладыПродажи",
		ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки"),
		ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
		
		Если (ИспользованиеСкладов.ИспользуютсяСкладыЗакупки И ИспользованиеСкладов.ИспользуютсяСкладыПродажи)
			ИЛИ (ИспользованиеСкладов.ИспользуютсяСкладыЗакупки И НЕ ИспользованиеСкладов.ИспользуютсяСкладыПродажи)
			ИЛИ (Не ИспользованиеСкладов.ИспользуютсяСкладыЗакупки И Не ИспользованиеСкладов.ИспользуютсяСкладыПродажи) Тогда
			
			Результат = Запрос.Выполнить().Выгрузить();
			Товары.Загрузить(Результат);
			Склад = Выборка.СкладДокумента;
			
		ИначеЕсли Не ИспользованиеСкладов.ИспользуютсяСкладыЗакупки И ИспользованиеСкладов.ИспользуютсяСкладыПродажи Тогда
			
			Результат = Запрос.Выполнить().Выгрузить();
			Товары.Загрузить(Результат);
			
			МассивСкладов = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(Товары.ВыгрузитьКолонку("Склад"));
			Если МассивСкладов.Количество() = 1 Тогда
				
				Склад = МассивСкладов[0];
				
			КонецЕсли;
			
		КонецЕсли;
		
		//АСТЕК  заполняем вручную
		Для Каждого СтрокаТовар Из Товары Цикл
			СтрокаТовар.АК_Сделка = ДанныеЗаполнения.Сделка;
			СтрокаТовар.АК_ЗаказКлиента = ДанныеЗаполнения.Ссылка;
		КонецЦикла;
		
		
	КонецПроцедуры
	
	Процедура ЗаполнитьПоОбособленномуЗаказуКлиента(ЗаказКлиента)
		
		Запрос = Новый Запрос( 
		"
		|ВЫБРАТЬ
		|	ЗаказКлиента.Статус          КАК СтатусДокумента,
		|	ЗаказКлиента.Проведен        КАК Проведен,
		|	ЗаказКлиента.Организация     КАК Организация,
		|	ЗаказКлиента.Сделка          КАК Сделка,
		|	ЗаказКлиента.Склад           КАК СкладДокумента,
		|	ЗаказКлиента.Склад.ЭтоГруппа КАК ЭтоГруппа,
		|	ЗаказКлиента.Подразделение   КАК Подразделение,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиСтатус
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &ЗаказКлиента
		|");
		Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
		Реквизиты = Запрос.Выполнить().Выбрать();
		Реквизиты.Следующий();
		
		МассивДопустимыхСтатусов = Новый Массив;
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.Согласован);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОбеспечению);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОтгрузке);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.Закрыт);
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ЗаказКлиента,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
		
		//Заполнение шапки
		Организация       = Реквизиты.Организация;
		Сделка            = Реквизиты.Сделка;
		ДокументОснование = ЗаказКлиента;
		Подразделение     = Реквизиты.Подразделение;
		
		ТаблицаТовары = Документы.ЗаказКлиента.ТаблицаНеобеспеченнойПотребности(ЗаказКлиента);
		
		//Заполнение тч товары.
		ИспользованиеСкладов = Новый Структура("ИспользуютсяСкладыЗакупки, ИспользуютсяСкладыПродажи",
		ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки"),
		ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
		
		Если (ИспользованиеСкладов.ИспользуютсяСкладыЗакупки И ИспользованиеСкладов.ИспользуютсяСкладыПродажи)
			ИЛИ (ИспользованиеСкладов.ИспользуютсяСкладыЗакупки И НЕ ИспользованиеСкладов.ИспользуютсяСкладыПродажи)
			ИЛИ (Не ИспользованиеСкладов.ИспользуютсяСкладыЗакупки И Не ИспользованиеСкладов.ИспользуютсяСкладыПродажи) Тогда
			
			Товары.Загрузить(ТаблицаТовары);
			Склад = Реквизиты.СкладДокумента;
			
		ИначеЕсли Не ИспользованиеСкладов.ИспользуютсяСкладыЗакупки И ИспользованиеСкладов.ИспользуютсяСкладыПродажи Тогда
			
			Товары.Загрузить(ТаблицаТовары);
			
			МассивСкладов = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаТовары.ВыгрузитьКолонку("Склад"));
			Если МассивСкладов.Количество() = 1 Тогда
				
				Склад = МассивСкладов[0];
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ЗаполнитьДокументНаОснованииЗаказа(Знач ЗаказКлиента) Экспорт
		
		Если Документы.ЗаказКлиента.ОбособленноеОбеспечение(ЗаказКлиента) Тогда
			
			ЗаполнитьПоОбособленномуЗаказуКлиента(ЗаказКлиента);
			
		Иначе
			
			ЗаполнитьПоНеОбособленномуЗаказуКлиента(ЗаказКлиента);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ЗаполнитьДокументНаОснованииЗаказаНаПеремещение(Знач ЗаказНаПеремещение)
		
		Запрос = Новый Запрос( 
		"
		|ВЫБРАТЬ
		|	Т.Статус          КАК СтатусДокумента,
		|	Т.Проведен        КАК Проведен,
		|	Т.Организация     КАК Организация,
		|	Т.Подразделение   КАК Подразделение
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК Т
		|ГДЕ
		|	Т.Ссылка = &ЗаказНаПеремещение
		|");
		Запрос.УстановитьПараметр("ЗаказНаПеремещение", ЗаказНаПеремещение);
		Реквизиты = Запрос.Выполнить().Выбрать();
		Реквизиты.Следующий();
		
		//Заполнение шапки
		Организация       = Реквизиты.Организация;
		ДокументОснование = ЗаказНаПеремещение;
		Подразделение     = Реквизиты.Подразделение;
		
		ТаблицаТовары = Документы.ЗаказНаПеремещение.ТаблицаНеобеспеченнойПотребности(ЗаказНаПеремещение);
		
		Если ТаблицаТовары.Количество() > 0 Тогда
			
			Склад = ТаблицаТовары[0].Склад;
			Товары.Загрузить(ТаблицаТовары);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
		
		Менеджер       = Пользователи.ТекущийПользователь();
		Валюта         = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
		Организация    = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, ФормаОплаты, БанковскийСчет);
		Касса          = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Организация, ФормаОплаты, Касса);
		Подразделение  = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Менеджер, Подразделение);
		Склад          = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки"));
		
		Если Не ЗначениеЗаполнено(ЗакупкаПодДеятельность) Тогда
			ЗакупкаПодДеятельность = Справочники.Организации.НалогообложениеНДС(Организация, Склад, Дата);
		КонецЕсли;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеЗаказовПоставщикам") Тогда
			Статус = Перечисления.СтатусыЗаказовПоставщикам.КПоступлению;
		КонецЕсли;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам") Тогда
			Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
		КонецЕсли;
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// Прочее
	
	Процедура СформироватьСписокРегистровДляКонтроля()
		
		Массив = Новый Массив;
		Если Не ДополнительныеСвойства.ЭтоНовый Тогда
			Массив.Добавить(Движения.ЗаказыПоставщикам);
		КонецЕсли;
		
		Массив.Добавить(Движения.ОбеспечениеЗаказов);
		Массив.Добавить(Движения.ОбеспечениеЗаказовРаботами);
		
		ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
		
	КонецПроцедуры
	
	Процедура ПроверитьИзменениеХозяйственнойОперации(Отказ)
		
		Если Не ЭтоНовый()
			И ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
			
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	РасчетыСПоставщиками.СуммаПриход КАК СуммаОплаты
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками.Обороты(,,Период,
			|		ЗаказПоставщику = &Ссылка
			|	) КАК РасчетыСПоставщиками
			|
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		Документ.ЗаказПоставщику КАК ДанныеДокумента
			|	ПО
			|		ДанныеДокумента.Ссылка = &Ссылка
			|		И ДанныеДокумента.ХозяйственнаяОперация <> &ХозяйственнаяОперация
			|ГДЕ
			|	РасчетыСПоставщиками.СуммаПриход > 0
			|");
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Заказ поставщику оплачен. Нельзя устанавливать операцию %1 '"),
				ХозяйственнаяОперация
				);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ХозяйственнаяОперация",
				,
				Отказ
				);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция ВсеСтрокиОтменены()
		
		СтруктураОтбора = Новый Структура("Отменено", Ложь);
		НайтиСтроки = Товары.НайтиСтроки(СтруктураОтбора);
		
		Возврат ?(НайтиСтроки.Количество() = 0, Истина, Ложь);
		
	КонецФункции
	
	Процедура ЗаполнитьДокументНаОснованииСделкиПоОбособленныемЗаказам(Знач СправочникОснование)
		
		Запрос = Новый Запрос("
		|
		|ВЫБРАТЬ
		|	Т.Ссылка КАК ЗаказКлиента
		|
		|ПОМЕСТИТЬ ВтЗаказыПоСделке
		|
		|ИЗ
		|	Документ.ЗаказКлиента КАК Т
		|ГДЕ
		|	Т.Сделка = &Сделка
		|	И Т.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению),
		|					ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке))
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Номенклатура          КАК Номенклатура,
		|	Т.Характеристика        КАК Характеристика,
		|	Т.Склад                 КАК Склад,
		|	Т.Назначение            КАК Назначение,
		|	МАКСИМУМ(Т.НомерСтроки) КАК НомерСтроки,
		|	МИНИМУМ(Т.ДатаЗаказа)   КАК ДатаЗаказа,
		|	СУММА(Т.Заказано)       КАК Заказано
		|	
		|ПОМЕСТИТЬ НоменклатураЗаказа
		|
		|ИЗ
		|	(ВЫБРАТЬ
		|		Заказы.ЗаказКлиента.Дата КАК ДатаЗаказа,
		|		Заказы.Номенклатура      КАК Номенклатура,
		|		Заказы.Характеристика    КАК Характеристика,
		|		Заказы.Склад             КАК Склад,
		|		ВЫБОР
		|			КОГДА НЕ ТоварыЗаказа.Ссылка ЕСТЬ NULL ТОГДА
		|				ТоварыЗаказа.НомерСтроки
		|			ИНАЧЕ
		|				ТоварыЗаявки.НомерСтроки
		|		КОНЕЦ                    КАК НомерСтроки,
		|		Заказы.ЗаказаноОстаток   КАК Заказано,
		|		ВЫБОР
		|			КОГДА НЕ ТоварыЗаказа.Ссылка ЕСТЬ NULL ТОГДА
		|				ТоварыЗаказа.Ссылка.Назначение
		|			ИНАЧЕ
		|				ТоварыЗаявки.Ссылка.Назначение
		|		КОНЕЦ                    КАК Назначение
		|	ИЗ
		|		РегистрНакопления.ЗаказыКлиентов.Остатки(,
		|				(ЗаказКлиента, ИСТИНА)
		|				В
		|				(ВЫБРАТЬ
		|					Т.ЗаказКлиента,
		|					ИСТИНА
		|				ИЗ
		|					ВтЗаказыПоСделке КАК Т)
		|		) КАК Заказы
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ТоварыЗаказа
		|		ПО Заказы.ЗаказКлиента      = ТоварыЗаказа.Ссылка
		|			И Заказы.Номенклатура   = ТоварыЗаказа.Номенклатура
		|			И Заказы.Характеристика = ТоварыЗаказа.Характеристика
		|			И Заказы.КодСтроки      = ТоварыЗаказа.КодСтроки
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТоварыЗаявки
		|		ПО Заказы.ЗаказКлиента      = ТоварыЗаявки.Ссылка
		|			И Заказы.Номенклатура   = ТоварыЗаявки.Номенклатура
		|			И Заказы.Характеристика = ТоварыЗаявки.Характеристика
		|			И Заказы.КодСтроки      = ТоварыЗаявки.КодСтроки
		|			И (ТоварыЗаказа.Ссылка ЕСТЬ NULL )
		|	ГДЕ
		|		ВЫБОР
		|			КОГДА НЕ ТоварыЗаказа.Ссылка ЕСТЬ NULL ТОГДА
		|				ТоварыЗаказа.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ))
		|			ИНАЧЕ
		|				ТоварыЗаявки.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ))
		|			КОНЕЦ
		|		И Заказы.ЗаказаноОстаток > 0) КАК Т
		|
		|СГРУППИРОВАТЬ ПО
		|	Т.Номенклатура,
		|	Т.Характеристика,
		|	Т.Склад,
		|	Т.Назначение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Т.Назначение,
		|	Т.Номенклатура,
		|	Т.Характеристика,
		|	Т.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Склад          КАК Склад,
		|	Т.Назначение     КАК Назначение,
		|	Т.КЗаказуОстаток КАК КЗаказу
		|
		|ПОМЕСТИТЬ Потребность
		|
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Склад, Назначение) В
		|				(ВЫБРАТЬ
		|					Т.Номенклатура,
		|					Т.Характеристика,
		|					Т.Склад,
		|					Т.Назначение
		|				ИЗ
		|					НоменклатураЗаказа КАК Т)
		|	) КАК Т
		|ГДЕ
		|	Т.КЗаказуОстаток > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Т.Назначение,
		|	Т.Номенклатура,
		|	Т.Характеристика,
		|	Т.Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтТоварыЗаказов.ДатаЗаказа     КАК ДатаЗаказа,
		|	ВтТоварыЗаказов.НомерСтроки    КАК НомерСтроки,
		|	ВтТоварыЗаказов.Номенклатура   КАК Номенклатура,
		|	ВтТоварыЗаказов.Характеристика КАК Характеристика,
		|	ВтТоварыЗаказов.Склад          КАК Склад,
		|	ВтТоварыЗаказов.Назначение     КАК Назначение,
		|	ВЫБОР
		|		КОГДА ВтТоварыЗаказов.Заказано > ВтКЗаказу.КЗаказу ТОГДА
		|			ВтКЗаказу.КЗаказу
		|		ИНАЧЕ
		|			ВтТоварыЗаказов.Заказано
		|	КОНЕЦ                          КАК Количество
		|
		|ПОМЕСТИТЬ НоменклатураКЗаказу
		|
		|ИЗ
		|	НоменклатураЗаказа КАК ВтТоварыЗаказов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Потребность КАК ВтКЗаказу
		|		ПО ВтТоварыЗаказов.Номенклатура      = ВтКЗаказу.Номенклатура
		|			И ВтТоварыЗаказов.Характеристика = ВтКЗаказу.Характеристика
		|			И ВтТоварыЗаказов.Склад          = ВтКЗаказу.Склад
		|			И ВтТоварыЗаказов.Назначение     = ВтКЗаказу.Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Т.Склад КАК Склад
		|
		|ПОМЕСТИТЬ ВТСклады
		|
		|ИЗ
		|	НоменклатураКЗаказу КАК Т
		|
		|УПОРЯДОЧИТЬ ПО 
		|	ДатаЗаказа
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Номенклатура           КАК Номенклатура,
		|	Т.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	Т.Характеристика         КАК Характеристика,
		|	Т.Склад                  КАК Склад,
		|	Т.Назначение             КАК Назначение,
		|	Т.Количество             КАК Количество,
		|	Т.Количество             КАК КоличествоУпаковок
		|
		|ИЗ
		|	НоменклатураКЗаказу КАК Т
		|ГДЕ
		|	Т.Склад В (ВЫБРАТЬ Таб.Склад ИЗ ВТСклады КАК Таб)
		|
		|УПОРЯДОЧИТЬ ПО Т.Назначение, Т.НомерСтроки
		|");
		Запрос.УстановитьПараметр("Сделка", СправочникОснование);
		Сделка = СправочникОснование;
		
		ТаблицаТовары = Запрос.Выполнить().Выгрузить();
		Если ТаблицаТовары.Количество() > 0 Тогда 
			
			Товары.Загрузить(ТаблицаТовары);
			Склад  =  Товары[0].Склад;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ЗаполнитьДокументНаОснованииСделкиСводно(Знач СправочникОснование)
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СделкиСКлиентами.Ссылка КАК Сделка
		|ИЗ
		|	Справочник.СделкиСКлиентами КАК СделкиСКлиентами
		|ГДЕ
		|	СделкиСКлиентами.Ссылка = &Сделка
		|	И СделкиСКлиентами.ОбособленныйУчетТоваровПоСделке
		|;
		|/////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыКлиентов.Номенклатура КАК Номенклатура,
		|	ЗаказыКлиентов.Характеристика КАК Характеристика,
		|	ЗаказыКлиентов.ЗаказаноОстаток КАК Количество
		|
		|ПОМЕСТИТЬ ЗаказыКлиентов
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(,
		|		ЗаказКлиента.Сделка = &Сделка
		|		И ЗаказКлиента.Статус В (
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)
		|			)
		|	) КАК ЗаказыКлиентов
		|;
		|/////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыПоставщикам.Номенклатура КАК Номенклатура,
		|	ЗаказыПоставщикам.Характеристика КАК Характеристика,
		|	ЗаказыПоставщикам.ЗаказаноПриход КАК Количество
		|
		|ПОМЕСТИТЬ ЗаказыПоставщикам
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Обороты(,, Период,
		|		ЗаказПоставщику.Сделка = &Сделка
		|	) КАК ЗаказыПоставщикам
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|/////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыКлиентов.Номенклатура        КАК Номенклатура,
		|	ЗаказыКлиентов.Характеристика      КАК Характеристика,
		|	ЗаказыКлиентов.Количество
		|		- ЕСТЬNULL(ЗаказыПоставщикам.Количество, 0) КАК Количество,
		|
		|	ЗаказыКлиентов.Количество
		|		- ЕСТЬNULL(ЗаказыПоставщикам.Количество, 0) КАК КоличествоУпаковок
		|ИЗ
		|	ЗаказыКлиентов КАК ЗаказыКлиентов
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		ЗаказыПоставщикам КАК ЗаказыПоставщикам
		|	ПО
		|		ЗаказыКлиентов.Номенклатура = ЗаказыПоставщикам.Номенклатура
		|		И ЗаказыКлиентов.Характеристика = ЗаказыПоставщикам.Характеристика
		|ГДЕ
		|	(ЗаказыКлиентов.Количество - ЕСТЬNULL(ЗаказыПоставщикам.Количество, 0)) > 0
		|");
		Запрос.УстановитьПараметр("Сделка", СправочникОснование);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ВыборкаПоСделке = МассивРезультатов[0].Выбрать();
		// МассивРезультатов[1] - Временная таблица ЗаказыКлиентов
		// МассивРезультатов[2] - Временная таблица ЗаказыПоставщикам
		ВыборкаПоТоварам = МассивРезультатов[3].Выбрать();
		
		Если ВыборкаПоСделке.Следующий() Тогда
			Сделка = ВыборкаПоСделке.Сделка;
		КонецЕсли;
		
		Пока ВыборкаПоТоварам.Следующий() Цикл
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Процедура ЗаполнитьДокументНаОснованииЗаказаНаСборку(Знач ЗаказНаСборку)
		
		Запрос = Новый Запрос( 
		"
		|ВЫБРАТЬ
		|	Т.Статус          КАК СтатусДокумента,
		|	Т.Проведен        КАК Проведен,
		|	Т.Организация     КАК Организация,
		|	Т.Подразделение   КАК Подразделение
		|ИЗ
		|	Документ.ЗаказНаСборку КАК Т
		|ГДЕ
		|	Т.Ссылка = &ЗаказНаСборку
		|");
		Запрос.УстановитьПараметр("ЗаказНаСборку", ЗаказНаСборку);
		Реквизиты = Запрос.Выполнить().Выбрать();
		Реквизиты.Следующий();
		
		//Заполнение шапки
		Организация       = Реквизиты.Организация;
		ДокументОснование = ЗаказНаСборку;
		Подразделение     = Реквизиты.Подразделение;
		
		ТаблицаТовары = Документы.ЗаказНаСборку.ТаблицаНеобеспеченнойПотребности(ЗаказНаСборку);
		
		Если ТаблицаТовары.Количество() > 0 Тогда
			
			Склад = ТаблицаТовары[0].Склад;
			Товары.Загрузить(ТаблицаТовары);
			
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ЗаполнитьДокументНаОснованииИзмененияАссортимента(Знач ИзменениеАссортимента)
		
		//
		ОснованиеПроведен = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ИзменениеАссортимента, "Проведен");
		Если НЕ ОснованиеПроведен Тогда
			ТекстИсключения = Нстр("ru='Документ-основание %1 не проведен. Заполнение документа не возможно.'");
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения, ИзменениеАссортимента);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		//
		ДокументОснование = ИзменениеАссортимента;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ИзменениеАссортиментаТовары.Номенклатура
		|ИЗ
		|	Документ.ИзменениеАссортимента.Товары КАК ИзменениеАссортиментаТовары
		|ГДЕ
		|	ИзменениеАссортиментаТовары.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИзменениеАссортиментаТовары.НомерСтроки";
		Запрос.УстановитьПараметр("Ссылка", ИзменениеАссортимента);
		
		ВыборкаТоварыОснования = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаТоварыОснования.Следующий() Цикл
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТоварыОснования);
			Ценообразование.ПересчитатьСуммыВСтроке(НоваяСтрока, Ложь, Ложь, Истина, ЦенаВключаетНДС);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	
	
#КонецЕсли
