#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Доходы.Очистить();
	Расходы.Очистить();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если РаспределениеПоВсемОрганизациям Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Организация");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Доходы.Организация");
		МассивНепроверяемыхРеквизитов.Добавить("Расходы.Организация");
	КонецЕсли;
	
	// Если есть строка, в которой не требуется способ распределения,
	// выполним специальную проверку заполнения способа распределения.
	Если Доходы.Найти(Ложь, "ТребуетсяСпособРаспределения") <> Неопределено Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Доходы.СпособРаспределения");
		
		Для Каждого СтрокаТаблицы Из Доходы Цикл
			
			ВыводитьСообщение = Ложь;
			Если СтрокаТаблицы.ТребуетсяСпособРаспределения
			   И Не ЗначениеЗаполнено(СтрокаТаблицы.СпособРаспределения) Тогда
				ВыводитьСообщение = Истина;
				
			ИначеЕсли Не СтрокаТаблицы.ТребуетсяСпособРаспределения
				И Не ЗначениеЗаполнено(СтрокаТаблицы.АналитикаДоходов)
				И Не ЗначениеЗаполнено(СтрокаТаблицы.СпособРаспределения) Тогда
				ВыводитьСообщение = Истина;
				
			КонецЕсли;
			Если ВыводитьСообщение Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Способ распределения"" в строке %1 списка ""Доходы"".'"),
					СтрокаТаблицы.НомерСтроки
				);
				Если НЕ ДополнительныеСвойства.Свойство("ВыводитьСообщенияВЖурналРегистрации") Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ЭтотОбъект,
						"Доходы[" + (СтрокаТаблицы.НомерСтроки - 1) + "].СпособРаспределения",
						,
						Отказ
					);
				Иначе
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
				
		КонецЦикла;
				
	КонецЕсли;
	
	Если Расходы.Найти(Ложь, "ТребуетсяСпособРаспределения") <> Неопределено Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Расходы.СпособРаспределения");
		
		Для Каждого СтрокаТаблицы Из Расходы Цикл
			
			ВыводитьСообщение = Ложь;
			Если СтрокаТаблицы.ТребуетсяСпособРаспределения
			   И Не ЗначениеЗаполнено(СтрокаТаблицы.СпособРаспределения) Тогда
				ВыводитьСообщение = Истина;
				
			ИначеЕсли Не СтрокаТаблицы.ТребуетсяСпособРаспределения
				И Не ЗначениеЗаполнено(СтрокаТаблицы.АналитикаРасходов)
				И Не ЗначениеЗаполнено(СтрокаТаблицы.СпособРаспределения) Тогда
				ВыводитьСообщение = Истина;
				
			КонецЕсли;
			Если ВыводитьСообщение Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Способ распределения"" в строке %1 списка ""Расходы"".'"),
					СтрокаТаблицы.НомерСтроки
				);
			Если НЕ ДополнительныеСвойства.Свойство("ВыводитьСообщенияВЖурналРегистрации") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					"Расходы[" + (СтрокаТаблицы.НомерСтроки - 1) + "].СпособРаспределения",
					,
					Отказ
				);
			Иначе
				Отказ = Истина;
			КонецЕсли;
			КонецЕсли;
				
		КонецЦикла;
				
	КонецЕсли;
	
	// Если есть строка расходов, в которой указана статья "Погрешность расчета себестоимости"
	// выполним специальную проверку заполнения подразделения.
	Если Расходы.Найти(ПланыВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости, "СтатьяРасходов") <> Неопределено Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Расходы.Подразделение");
		
		Для Каждого СтрокаТаблицы Из Расходы Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Подразделение)
			 И СтрокаТаблицы.СтатьяРасходов <> ПланыВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Подразделение"" в строке %1 списка ""Расходы"".'"),
					СтрокаТаблицы.НомерСтроки
				);
				Если НЕ ДополнительныеСвойства.Свойство("ВыводитьСообщенияВЖурналРегистрации") Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ЭтотОбъект,
						"Расходы[" + (СтрокаТаблицы.НомерСтроки - 1) + "].Подразделение",
						,
						Отказ
					);
				Иначе
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов
	);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если РаспределениеПоВсемОрганизациям Тогда
		Если ЗначениеЗаполнено(Организация) Тогда
			Организация = Неопределено;
		КонецЕсли;
		ОбновитьПредставлениеОрганизации();
	Иначе
		Для Каждого СтрокаТаблицы Из Доходы Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Организация) Тогда
				СтрокаТаблицы.Организация = Организация;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТаблицы Из Расходы Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Организация) Тогда
				СтрокаТаблицы.Организация = Организация;
			КонецЕсли;
		КонецЦикла;
		ПредставлениеОрганизаций = Строка(Организация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.РаспределениеДоходовИРасходовПоНаправлениямДеятельности.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по прочим доходам и расходам.
	ДоходыИРасходыСервер.ОтразитьПрочиеДоходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Выполним распределение расходов на себестоимость товаров.
	ДоходыИРасходыСервер.РаспределитьДоходыИРасходыПоБазе(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДОКУМЕНТА

Процедура ЗаполнитьДоходыПоОстаткам() Экспорт

	Запрос = Новый Запрос("
	| ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрочиеДоходы.Организация КАК Организация,
	|	ПрочиеДоходы.Подразделение КАК Подразделение,
	|	ПрочиеДоходы.СтатьяДоходов КАК СтатьяДоходов,
	|	ПрочиеДоходы.АналитикаДоходов КАК АналитикаДоходов,
	|	ПрочиеДоходы.СтатьяДоходов.СпособРаспределения КАК СпособРаспределения,
	|	ПрочиеДоходы.СуммаОстаток КАК Сумма,
	|
	|	ВЫБОР КОГДА ПрочиеДоходы.АналитикаДоходов ССЫЛКА Справочник.НаправленияДеятельности ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ КАК ТребуетсяСпособРаспределения
	|ИЗ
	|	РегистрНакопления.ПрочиеДоходы.Остатки(&Граница, 
	|		Организация = &Организация
	|		ИЛИ &ПоВсемОрганизациям
	|	) КАК ПрочиеДоходы
	|ГДЕ
	|	ПрочиеДоходы.СуммаОстаток <> 0
	|");
	Граница = Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Граница", Граница);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", РаспределениеПоВсемОрганизациям);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	Доходы.Загрузить(ТаблицаЗапроса);

КонецПроцедуры

Процедура ЗаполнитьРасходыПоОстаткам() Экспорт

	Запрос = Новый Запрос("
	| ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрочиеРасходы.Организация КАК Организация,
	|	ПрочиеРасходы.Подразделение КАК Подразделение,
	|	ПрочиеРасходы.СтатьяРасходов КАК СтатьяРасходов,
	|	ПрочиеРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	ПрочиеРасходы.СтатьяРасходов.СпособРаспределенияПоНаправлениямДеятельности КАК СпособРаспределения,
	|	ПрочиеРасходы.СуммаОстаток КАК Сумма,
	|
	|	ВЫБОР КОГДА ПрочиеРасходы.АналитикаРасходов ССЫЛКА Справочник.НаправленияДеятельности ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ КАК ТребуетсяСпособРаспределения
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Остатки(&Граница, 
	|		(Организация = &Организация
	|			ИЛИ &ПоВсемОрганизациям)
	|		И СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
	|	) КАК ПрочиеРасходы
	|ГДЕ
	|	ПрочиеРасходы.СуммаОстаток <> 0
	|	ИЛИ ПрочиеРасходы.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости)
	|");
	Граница = Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Граница", Граница);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", РаспределениеПоВсемОрганизациям);
	
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	
	Расходы.Загрузить(ТаблицаЗапроса);

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяОрганизация",);
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ОбновитьПредставлениеОрганизации()

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеСправочника.Наименование КАК ОрганизацияПредставление
	|ИЗ
	|	Справочник.Организации КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка В (&МассивОрганизацийДоходы)
	|	ИЛИ ДанныеСправочника.Ссылка В (&МассивОрганизацийРасходы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияПредставление
	|");
	
	МассивОрганизацийДоходы = Доходы.ВыгрузитьКолонку("Организация");
	МассивОрганизацийРасходы = Расходы.ВыгрузитьКолонку("Организация");
	Запрос.УстановитьПараметр("МассивОрганизацийДоходы", МассивОрганизацийДоходы);
	Запрос.УстановитьПараметр("МассивОрганизацийРасходы", МассивОрганизацийРасходы);
	
	ТекстПредставлениеОрганизаций = "";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстПредставлениеОрганизаций = ТекстПредставлениеОрганизаций
			+ ?(ПустаяСтрока(ТекстПредставлениеОрганизаций), "", ", ")
			+ Выборка.ОрганизацияПредставление;
	КонецЦикла;

	Если ПустаяСтрока(ТекстПредставлениеОрганизаций) Тогда 
		ТекстПредставлениеОрганизаций = НСтр("ru = 'Укажите организацию'");
	КонецЕсли;

	Если ПредставлениеОрганизаций <> ТекстПредставлениеОрганизаций Тогда
		ПредставлениеОрганизаций = ТекстПредставлениеОрганизаций;
	КонецЕсли;

КонецПроцедуры

#КонецЕсли