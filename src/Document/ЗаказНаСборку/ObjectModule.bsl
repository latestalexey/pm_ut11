#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Осуществляет расчет даты возможной начала и окончания сборки/разборки
//
Процедура РассчитатьНачалоСборкиРазборки() Экспорт
	
	ПараметрыСостоянияОбеспечения = Новый Структура;
	ПараметрыСостоянияОбеспечения.Вставить("Заказ", Ссылка);
	ПараметрыСостоянияОбеспечения.Вставить("Склад", Склад);
	ПараметрыСостоянияОбеспечения.Вставить("ЖелаемаяДатаОтгрузки", ?(ЗначениеЗаполнено(ЖелаемаяДатаПоступления), ЖелаемаяДатаПоступления - ДлительностьСборкиРазборки * 86400, Неопределено));
	
	Если ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих Тогда
		
		ТаблицаТовары = Товары.Выгрузить();
		ТаблицаТовары.Колонки.Добавить("ТипОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОперацийЗаказаНаСборку"));
		ТаблицаТовары.Колонки.Добавить("НачалоСборкиРазборки", Новый ОписаниеТипов("Дата"));
		ТаблицаТовары.ЗаполнитьЗначения(НачалоСборкиРазборки, "НачалоСборкиРазборки");
		ТаблицаТовары.ЗаполнитьЗначения(ТипОперации, "ТипОперации");
		
		ПараметрыСостоянияОбеспечения.Вставить("АдресТовары", ПоместитьВоВременноеХранилище(ТаблицаТовары));
		
	ИначеЕсли ТипОперации = Перечисления.ТипыОперацийЗаказаНаСборку.РазборкаНаКомплектующие Тогда
		
		ТаблицаТовары = Товары.Выгрузить();
		ТаблицаТовары.Очистить();
		ТаблицаТовары.Колонки.Добавить("ТипОперации", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОперацийЗаказаНаСборку"));
		ТаблицаТовары.Колонки.Добавить("НачалоСборкиРазборки", Новый ОписаниеТипов("Дата"));
		
		НоваяСтрокаТаблицаТовары = ТаблицаТовары.Добавить();
	
		НоваяСтрокаТаблицаТовары.КодСтроки = 1;
		НоваяСтрокаТаблицаТовары.НомерСтроки = 1;
		НоваяСтрокаТаблицаТовары.Номенклатура = Номенклатура;
		НоваяСтрокаТаблицаТовары.Характеристика = Характеристика;
		НоваяСтрокаТаблицаТовары.Упаковка = Упаковка;
		НоваяСтрокаТаблицаТовары.НачалоСборкиРазборки = НачалоСборкиРазборки;
		НоваяСтрокаТаблицаТовары.Количество = Количество;
		НоваяСтрокаТаблицаТовары.ТипОперации = ТипОперации;
		
		ПараметрыСостоянияОбеспечения.Вставить("АдресТовары", ПоместитьВоВременноеХранилище(ТаблицаТовары));
		
	КонецЕсли;
	
	ПараметрыСостоянияОбеспечения.Вставить("ОтборПоСостояниюНаличия", Перечисления.СостоянияНаличия.Любое);
	ПараметрыСостоянияОбеспечения.Вставить("НеОтгружатьЧастями", Ложь);
	ПараметрыСостоянияОбеспечения.Вставить("Назначение", ?(Назначение.Пустая(), НазначениеТовары, Назначение));
	
	ОбработкаСостояниеОбеспечения = Обработки.СостояниеОбеспечения.Создать();
	
	ОбработкаСостояниеОбеспечения.ПолучитьСостояниеОбеспечения(ПараметрыСостоянияОбеспечения);
	
	Для каждого СтрокаТовары из ОбработкаСостояниеОбеспечения.Товары Цикл
		
		СтрокаТовары.Выбран = НЕ ЗначениеЗаполнено(СтрокаТовары.ДатаОтгрузки);
		
	КонецЦикла;
	
	ОбработкаСостояниеОбеспечения.РассчитатьДляПолнойОтгрузки(ПараметрыСостоянияОбеспечения);
	РезультатРасчета = ОбработкаСостояниеОбеспечения.ПолучитьРезультатРасчета(ПараметрыСостоянияОбеспечения);
	
	Если РезультатРасчета <> Неопределено Тогда
		
		Для каждого СтрокаТаблицаТоваров из РезультатРасчета Цикл
			
			НачалоСборкиРазборки = Макс(НачалоСборкиРазборки, СтрокаТаблицаТоваров.НачалоСборкиРазборки);
			
		КонецЦикла;
		
		ОкончаниеСборкиРазборки = Макс(НачалоСборкиРазборки + 86400 * ДлительностьСборкиРазборки, ЖелаемаяДатаПоступления);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Статус = Перечисления.СтатусыВнутреннихЗаказов[НовыйСтатус];
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказКлиента") Тогда

		ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения);

	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;

	// Проверка количества в т.ч. товар
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);

	// Проверка количества в шапке.
	ПроверитьЗаполнениеКоличестваВШапке(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);

	Если НачалоСборкиРазборки > ОкончаниеСборкиРазборки Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Дата окончания сборки/разборки меньше даты начала сборки/разборки'"),
			ЭтотОбъект,
			"ОкончаниеСборкиРазборки",
			,
			Отказ);

	КонецЕсли;

	Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) И ЖелаемаяДатаПоступления < НачалоДня(Дата) Тогда

		ТекстОшибки = НСтр("ru='Желаемая дата поступления должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЖелаемаяДатаПоступления",
			,
			Отказ);

	КонецЕсли;

	Если ЗначениеЗаполнено(ОкончаниеСборкиРазборки) И ОкончаниеСборкиРазборки < НачалоДня(Дата) Тогда

		ТекстОшибки = НСтр("ru='Дата окончания сборки/разборки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ОкончаниеСборкиРазборки",
			,
			Отказ);

	КонецЕсли;

	Если ЗначениеЗаполнено(НачалоСборкиРазборки) И НачалоСборкиРазборки < НачалоДня(Дата) Тогда

		ТекстОшибки = НСтр("ru='Дата начала сборки/разборки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"НачалоСборкиРазборки",
			,
			Отказ);

	КонецЕсли;

	// Проверка характеристики в шапке.
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры")
		И Не Справочники.Номенклатура.ХарактеристикиИспользуются(Номенклатура) Тогда

		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");

	КонецЕсли;
		
	// Проверка характеристик в т.ч. товары.
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
	СтруктураПоиска.Вставить("Характеристика", Характеристика);
	
	НайденныеСтроки = Товары.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТЧ из НайденныеСтроки Цикл
		
		ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% указан товар ""%НазваниеТовара%"".
		|Один и тот же товар не может являться и комплектом, и комплектующей одновременно.'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НазваниеТовара%",	НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Номенклатура, Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", СтрокаТЧ.НомерСтроки);
	
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары",СтрокаТЧ.НомерСтроки,"Номенклатура");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
		
	КонецЦикла;
	
	ПараметрыУказанияСерий =  НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаСборку);
	
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,ПараметрыУказанияСерий.ТЧ, Отказ);
  	НоменклатураСервер.ПроверитьЗаполнениеСерийВШапке(ЭтотОбъект,ПараметрыУказанияСерий.Шапка,Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;

	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");

	НоменклатураСервер.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект, НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаСборку));
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если НЕ ЗначениеЗаполнено(Назначение) И НЕ ЗначениеЗаполнено(НазначениеТовары) Тогда

		ТребуетсяНазначение = Ложь;
		
		Для каждого СтрокаТовары из Товары Цикл

			Если ЗначениеЗаполнено(СтрокаТовары.ВариантОбеспечения) Тогда
				
				ТребуетсяНазначение = Истина;
				Прервать;
				
			КонецЕсли;

		КонецЦикла;

		Если ТребуетсяНазначение Тогда
			
			НазначениеТовары = Справочники.Назначения.ПолучитьСсылку();
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;

	Справочники.Назначения.СоздатьОбновитьНазначение(Ссылка, НазначениеТовары, Метаданные().Синоним, Номер, Дата);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Статус = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	НачалоСборкиРазборки    = Дата(1, 1, 1);
	ОкончаниеСборкиРазборки = Дата(1, 1, 1);
	ЖелаемаяДатаПоступления = Дата(1, 1, 1);
	МаксимальныйКодСтроки   = 0;
	УказыватьСерии          = Ложь;
	
	Для каждого СтрокаТовары из Товары Цикл

		СтрокаТовары.КодСтроки          = 0;
		СтрокаТовары.УказыватьСерии     = Ложь;
		СтрокаТовары.ВариантОбеспечения = Неопределено;
		
	КонецЦикла;

	Назначение       = Неопределено;
	НазначениеТовары = Неопределено;
	
	Серии.Очистить();

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.ЗаказНаСборку.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗаказыСервер.ОтразитьЗаказыНаСборку(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
    ЗапасыСервер.ОтразитьРезервыСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ЗаполнитьПоЗаказуКлиента(ЗаказКлиента)

	Запрос = Новый Запрос( 
	"
	|ВЫБРАТЬ
	|	ЗаказКлиента.Статус          КАК СтатусДокумента,
	|	ЗаказКлиента.Проведен        КАК Проведен,
	|	ЗаказКлиента.Организация     КАК Организация,
	|	ЗаказКлиента.Сделка          КАК Сделка,
	|	ЗаказКлиента.Склад           КАК СкладДокумента,
	|	ЗаказКлиента.Склад.ЭтоГруппа КАК ЭтоГруппа,
	|	ЗаказКлиента.Подразделение   КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ЗаказКлиента.Статус В(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиСтатус
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &ЗаказКлиента
	|");
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();

	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.Согласован);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОбеспечению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОтгрузке);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.Закрыт);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ЗаказКлиента,
		Реквизиты.СтатусДокумента,
		НЕ Реквизиты.Проведен,
		Реквизиты.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
	
	//Заполнение шапки
	Организация       = Реквизиты.Организация;
	Сделка            = Реквизиты.Сделка;
	ДокументОснование = ЗаказКлиента;
	Подразделение     = Реквизиты.Подразделение;

	ТаблицаТовары = Документы.ЗаказКлиента.ТаблицаНеобеспеченнойПотребности(ЗаказКлиента);

	Если ТаблицаТовары.Количество() > 0 Тогда

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ТаблицаТовары[0]);
		//Товары.Загрузить(ТаблицаТовары);
		//СкладПолучатель = ТаблицаТовары[0].Склад;

	КонецЕсли;

КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаСборку") Тогда
		Статус = Перечисления.СтатусыВнутреннихЗаказов.Закрыт;
	КонецЕсли;
	
КонецПроцедуры


// Процедура заполняет табличную часть "Товары" комплектующими,
// полученными по основному варианту комплектации.
//
Процедура ЗаполнитьПоОсновномуВариантуКомплектации() Экспорт

	ВариантКомплектации = Справочники.ВариантыКомплектацииНоменклатуры.ПолучитьОсновнуюКомплектацию(
				Номенклатура, Характеристика);

	Товары.Загрузить(Справочники.ВариантыКомплектацииНоменклатуры.ПолучитьКомплектующиеНоменклатуры(ВариантКомплектации, , Количество));

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Виды запасов

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ПроверитьЗаполнениеКоличестваВШапке(Объект, ПроверяемыеРеквизиты, Отказ)

	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Количество"));
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("КоличествоУпаковок"));

	Если Объект.Количество = 0 И Объект.КоличествоУпаковок <> 0 Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения'"),
				Объект,
				"КоличествоУпаковок",
				,
				Отказ);

	ИначеЕсли Объект.Количество = 0 Или Объект.КоличествоУпаковок = 0 Тогда

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена колонка ""Количество"" '"),
				Объект,
				"КоличествоУпаковок",
				,
				Отказ);

	КонецЕсли;

КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ЗаказыНаСборку);
	КонецЕсли;

	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ДвижениеТоваров);
		ПараметрыУказанияСерий =  НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЗаказНаСборку);
		Если ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры
			Или ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры Тогда
			Массив.Добавить(Движения.РезервыСерийТоваров);
		КонецЕсли;
	КонецЕсли;
	
	Массив.Добавить(Движения.ОбеспечениеЗаказов);

	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

#КонецЕсли