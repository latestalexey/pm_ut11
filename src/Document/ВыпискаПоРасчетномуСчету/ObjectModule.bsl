#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипЗначения = ТипЗнч(ДанныеЗаполнения);
	Если ТипЗначения = Тип("Структура")
	 И ДанныеЗаполнения.Свойство("МассивДокументов") Тогда
		
		ЗаполнитьПоМассивуДокументов(
			ДанныеЗаполнения.МассивДокументов,
			ДанныеЗаполнения.ЭтоВходящиеПлатежи,
			ДанныеЗаполнения
		);

	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
	
		ЗаполнитьПоПоступлениюБезналичныхДенежныхСредств(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
	
	ИначеЕсли ТипЗначения = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
		ЗаполнитьПоСписаниюБезналичныхДенежныхСредств(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	Иначе
		
		БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Неопределено);
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			Организация = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет).Организация;
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	ВходящиеПлатежи.Очистить();
	ИсходящиеПлатежи.Очистить();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Проверим соответствие сумм в табличной части и суммы платежного документа.
	Если ВходящиеПлатежи.Количество() > 0 Тогда
		ПроверитьВходящиеПлатежи(Отказ);
		МассивНепроверяемыхРеквизитов.Добавить("ИсходящиеПлатежи");
	КонецЕсли;
	
	Если ИсходящиеПлатежи.Количество() > 0 Тогда
		ПроверитьИсходящиеПлатежи(Отказ);
		МассивНепроверяемыхРеквизитов.Добавить("ВходящиеПлатежи");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);

	ЗаполнитьИтоговыеСуммы();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ВыпискаПоРасчетномуСчету.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Движения по денежным средствам.
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваБезналичные(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваКПоступлениюБезналичные(ДополнительныеСвойства, Движения, Отказ);
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваКСписаниюБезналичные(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Заполнение документа

Процедура ЗаполнитьИтоговыеСуммы()
	
	Если СуммаПоступленияВсего <> ВходящиеПлатежи.Итог("Сумма") Тогда
		СуммаПоступленияВсего = ВходящиеПлатежи.Итог("Сумма");
	КонецЕсли;
	Если СуммаСписанияВсего <> ИсходящиеПлатежи.Итог("Сумма") Тогда
		СуммаСписанияВсего = ИсходящиеПлатежи.Итог("Сумма");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоПоступлениюБезналичныхДенежныхСредств(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)

	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.Ссылка КАК ПлатежныйДокумент,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		НоваяСтрока = ВходящиеПлатежи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЕсли;
	
	ЗаполнитьИтоговыеСуммы();

КонецПроцедуры

Процедура ЗаполнитьПоСписаниюБезналичныхДенежныхСредств(
	Знач ДокументОснование,
	ДанныеЗаполнения
	)

	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.Ссылка КАК ПлатежныйДокумент,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		НоваяСтрока = ИсходящиеПлатежи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЕсли;
	
	ЗаполнитьИтоговыеСуммы();

КонецПроцедуры

Процедура ЗаполнитьПоМассивуДокументов(
	Знач МассивДокументов,
	Знач ЭтоВходящиеПлатежи,
	ДанныеЗаполнения
	)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Истина КАК ВходящийПлатеж,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.Ссылка КАК ПлатежныйДокумент,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	&ЭтоВходящиеПлатежи
	|	И ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Истина КАК ВходящийПлатеж,
	|	ДанныеДокумента.БанковскийСчетПолучатель.Владелец КАК Организация,
	|	ДанныеДокумента.БанковскийСчетПолучатель КАК БанковскийСчет,
	|	ДанныеДокумента.Ссылка КАК ПлатежныйДокумент,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	&ЭтоВходящиеПлатежи
	|	И ДанныеДокумента.Ссылка В (&МассивДокументов)
	|	И ДанныеДокумента.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ложь КАК ВходящийПлатеж,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.Ссылка КАК ПлатежныйДокумент,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	Не &ЭтоВходящиеПлатежи
	|	И ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Истина КАК ВходящийПлатеж,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.Ссылка КАК ПлатежныйДокумент,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|ГДЕ
	|	&ЭтоВходящиеПлатежи
	|	И ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ложь КАК ВходящийПлатеж,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.Ссылка КАК ПлатежныйДокумент,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|
	|ГДЕ
	|	Не &ЭтоВходящиеПлатежи
	|	И ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.СуммаДокумента < 0 ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ КАК ВходящийПлатеж,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ДоговорЭквайринга.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.Ссылка КАК ПлатежныйДокумент,
	|	ВЫБОР КОГДА ДанныеДокумента.СуммаДокумента < 0 ТОГДА
	|		-ДанныеДокумента.СуммаДокумента
	|	ИНАЧЕ
	|		ДанныеДокумента.СуммаДокумента
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	Документ.ОтчетБанкаПоОперациямЭквайринга КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&МассивДокументов)
	|");
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ЭтоВходящиеПлатежи", ЭтоВходящиеПлатежи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	КонецЕсли;
	
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВходящийПлатеж Тогда
			НоваяСтрока = ВходящиеПлатежи.Добавить();
		Иначе
			НоваяСтрока = ИсходящиеПлатежи.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ЗаполнитьИтоговыеСуммы();

КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

Функция ЗапросПоТабличнойЧасти()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	Таблица.Сумма КАК Сумма
	|
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК Таблица
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаДокумента.ПлатежныйДокумент КАК ПлатежныйДокумент
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ПлатежныйДокумент
	|ИМЕЮЩИЕ 
	|	КОЛИЧЕСТВО (*) > 1
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|
	|	ВЫБОР КОГДА ТаблицаДокумента.ПлатежныйДокумент ССЫЛКА Документ.ОтчетБанкаПоОперациямЭквайринга ТОГДА
	|		ТаблицаДокумента.ПлатежныйДокумент.ДоговорЭквайринга.БанковскийСчет
	|	КОГДА ТаблицаДокумента.ПлатежныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|		И &ВходящиеПлатежи
	|	ТОГДА
	|		ТаблицаДокумента.ПлатежныйДокумент.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		ТаблицаДокумента.ПлатежныйДокумент.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|
	|	ВЫБОР КОГДА ТаблицаДокумента.ПлатежныйДокумент.Проведен ТОГДА
	|		ВЫБОР КОГДА ТаблицаДокумента.ПлатежныйДокумент ССЫЛКА Документ.ОтчетБанкаПоОперациямЭквайринга И НЕ &ВходящиеПлатежи ТОГДА
	|			-ТаблицаДокумента.ПлатежныйДокумент.СуммаДокумента
	|		ИНАЧЕ
	|			ТаблицаДокумента.ПлатежныйДокумент.СуммаДокумента
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ТаблицаДокумента.Сумма
	|	КОНЕЦ КАК СуммаДокумента,
	|	ТаблицаДокумента.Сумма КАК Сумма
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
    |
	|");

	Возврат Запрос;
	
КонецФункции

Процедура ПроверитьВходящиеПлатежи(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = ЗапросПоТабличнойЧасти();
	
	ТаблицаДокумента = ВходящиеПлатежи.Выгрузить(, "НомерСтроки, ПлатежныйДокумент, Сумма");
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ВходящиеПлатежи", Истина);
	Массив = Запрос.ВыполнитьПакет();
	
	// Массив[0] - временная таблица "ТаблицаДокумента"
	РезультатЗапросаДубли = Массив[1];
	РезультатЗапросаДокументы = Массив[2];
	
	// Проверяем дубли строк в документе.
	Выборка = РезультатЗапросаДубли.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ %1 повторяется в табличной части'"),
			Выборка.ПлатежныйДокумент
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"ВходящиеПлатежи[" + (Выборка.НомерСтроки - 1) + "].ПлатежныйДокумент",
			,
			Отказ
		);
		
	КонецЦикла;
	
	// Проверяем документы,указанные в табличной части.
	Выборка = РезультатЗапросаДокументы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаДокумента <> Выборка.Сумма Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сумма в строке %1 списка ""Входящие платежи"" не соответствует сумме платежного документа'"),
				Выборка.НомерСтроки
				);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ВходящиеПлатежи[" + (Выборка.НомерСтроки - 1) + "].Сумма",
				,
				Отказ
			);
		КонецЕсли;
		
		Если Выборка.БанковскийСчет <> БанковскийСчет Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Счет документа в строке %1 списка ""Входящие платежи"" не соответствует счету выписки'"),
				Выборка.НомерСтроки
				);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ВходящиеПлатежи[" + (Выборка.НомерСтроки - 1) + "].ПлатежныйДокумент",
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем дублирование платежных документов в других выписках.
	Запрос = ДенежныеСредстваСервер.ЗапросПоДокументамПроведенныеБанком(
		ТаблицаДокумента.ВыгрузитьКолонку("ПлатежныйДокумент"),
		Истина, // ЭтоВходящиеПлатежи
		Ссылка
	);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ТаблицаДокумента.Найти(Выборка.ПлатежныйДокумент, "ПлатежныйДокумент");
		НомерСтроки = ?(СтрокаТаблицы <> Неопределено, СтрокаТаблицы.НомерСтроки, 1);
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Платеж %1 уже указан в документе %2'"),
			Выборка.ПлатежныйДокумент,
			Выборка.Выписка
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"ВходящиеПлатежи[" + (НомерСтроки - 1) + "].ПлатежныйДокумент",
			,
			Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьИсходящиеПлатежи(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = ЗапросПоТабличнойЧасти();
	
	ТаблицаДокумента = ИсходящиеПлатежи.Выгрузить(, "НомерСтроки, ПлатежныйДокумент, Сумма");
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ВходящиеПлатежи", Ложь);
	Массив = Запрос.ВыполнитьПакет();
	
	// Массив[0] - временная таблица "ТаблицаДокумента"
	РезультатЗапросаДубли = Массив[1];
	РезультатЗапросаДокументы = Массив[2];
	
	// Проверяем дубли строк в документе.
	Выборка = РезультатЗапросаДубли.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Документ %1 повторяется в табличной части'"),
			Выборка.ПлатежныйДокумент
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"ИсходящиеПлатежи[" + (Выборка.НомерСтроки - 1) + "].ПлатежныйДокумент",
			,
			Отказ
		);
		
	КонецЦикла;
	
	// Проверяем документы,указанные в табличной части.
	Выборка = РезультатЗапросаДокументы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СуммаДокумента <> Выборка.Сумма Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сумма в строке %1 списка ""Исходящие платежи"" не соответствует сумме платежного документа'"),
				Выборка.НомерСтроки
				);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ИсходящиеПлатежи[" + (Выборка.НомерСтроки - 1) + "].Сумма",
				,
				Отказ
			);
		КонецЕсли;
		
		Если Выборка.БанковскийСчет <> БанковскийСчет Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Счет документа в строке %1 списка ""Исходящие платежи"" не соответствует счету выписки'"),
				Выборка.НомерСтроки
				);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ИсходящиеПлатежи[" + (Выборка.НомерСтроки - 1) + "].ПлатежныйДокумент",
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверяем дублирование платежных документов в других выписках.
	Запрос = ДенежныеСредстваСервер.ЗапросПоДокументамПроведенныеБанком(
		ТаблицаДокумента.ВыгрузитьКолонку("ПлатежныйДокумент"),
		Ложь, // ЭтоВходящиеПлатежи
		Ссылка
	);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ТаблицаДокумента.Найти(Выборка.ПлатежныйДокумент, "ПлатежныйДокумент");
		НомерСтроки = ?(СтрокаТаблицы <> Неопределено, СтрокаТаблицы.НомерСтроки, 1);
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Платеж %1 уже указан в документе %2'"),
			Выборка.ПлатежныйДокумент,
			Выборка.Выписка
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ЭтотОбъект,
			"ИсходящиеПлатежи[" + (НомерСтроки - 1) + "].ПлатежныйДокумент",
			,
			Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли