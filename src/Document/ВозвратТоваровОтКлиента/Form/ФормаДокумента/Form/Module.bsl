&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	УстановитьВидимостьОперациий();
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
		Если НЕ ИспользоватьСоглашенияСКлиентами И НЕ ЗначениеЗаполнено(Объект.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
			ЗаполнитьУсловияПродаж();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПодобратьТоварыПоРеализациям", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыЗаполнитьРеализацииИЦены", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПоискПоШтрихкоду", "Доступность", Ложь);
		Если Объект.ЗаявкаНаВозвратТоваровОтКлиента.ВозвратПорчи Тогда
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыГруппаВозвращаемыйТовар", "ТолькоПросмотр", Истина);
		КонецЕсли;
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВозвратПорчи", "Доступность", Ложь);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТоварыПодобратьТоварыИзЗаявки", "Видимость", Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
		
		МассивЭлементов = Новый Массив();
		МассивЭлементов.Добавить("ТоварыСкопировать");
		МассивЭлементов.Добавить("ТоварыКонтекстноеМенюСкопировать");
		МассивЭлементов.Добавить("ТоварыОткрытьПодбор");
		МассивЭлементов.Добавить("ТоварыДополнитьМногооборотнойТарой");
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Ложь);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаявкаНаВозвратТоваровОтКлиента", "Видимость", Ложь);
	КонецЕсли;
	
	УстановитьДоступностьКомандБуфераОбмена();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		
		ПолучитьРасшифровкуПлатежаИзХранилища(ВыбранноеЗначение.АдресПлатежейВХранилище);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыЗапасов.Форма.ФормаВводаВидовЗапасов" Тогда	
		
		ПолучитьВидыЗапасовИзХранилища(ВыбранноеЗначение);
		Объект.ВидыЗапасовУказаныВручную = ИсточникВыбора.ВидыЗапасовУказаныВручную;
		Модифицированность = Истина;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборТоваровПоРеализациям" Тогда
		
		ОбработкаВыбораПодборПоРеализацииСервер(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ВозвратТоваровОтКлиента.Форма.ФормаПодбораТоваровИзЗаявки" Тогда
		
		ОбработкаВыбораПодборПоЗаявкеНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаДокумента"
	 ИЛИ ИсточникВыбора.ИмяФормы = "Документ.СчетФактураПолученный.Форма.ФормаСписка" Тогда
		
		НастроитьОтображениеРеквизитовСчетаФактуры(ЭтаФорма, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПечатьЗаявленияНаВозвратТоваровОтКлиента.Форма.РеквизитыПечатиЗаявленияНаВозврат" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ПредъявленСчетФактура И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПараметрыЗаписи.Вставить("ДанныеСчетаФактуры",
			ЗакупкиСервер.ДанныеСчетаФактурыСтруктурой(
				Неопределено,
				ТекущийОбъект.Организация,
				ТекущийОбъект.Контрагент,
				ТекущийОбъект.НомерСчетаФактуры,
				ТекущийОбъект.ДатаСчетаФактуры,
				ТекущийОбъект.ВалютаСчетаФактуры
			)
		);
		ТекущийОбъект.ПредъявленСчетФактура = Ложь;
	Иначе
		ПараметрыЗаписи.Вставить("ДанныеСчетаФактуры", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
		)
	);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВозвратПереданнойМногооборотнойТары);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
	 И ПараметрыЗаписи.ДанныеСчетаФактуры <> Неопределено Тогда
		
		НеТребуетсяВводСчетаФактуры = (Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
		ДанныеСчетаФактуры = ЗакупкиСервер.ДанныеСчетаФактурыСтруктурой(
			ТекущийОбъект.Ссылка,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Организация,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Контрагент,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Номер,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Дата,
			ПараметрыЗаписи.ДанныеСчетаФактуры.Валюта
		);
		НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтаФорма,
			ЗакупкиСервер.ВвестиСчетФактуру(ДанныеСчетаФактуры, Истина, НеТребуетсяВводСчетаФактуры)
		);
		
	КонецЕсли;
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
		ПараметрыЗаписи.Вставить("Сделка", Объект.Сделка);
	КонецЕсли;
	
	Оповестить("Запись_ВозвратТоваровОтКлиента", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(ЭтаФорма, "Товары", "Номенклатура,Характеристика,Количество");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПродажиКлиент.ОбработкаВыбораДоговораКонтрагента(ВыбранноеЗначение, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(
		Элемент,
		СтандартнаяОбработка,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.Дата
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	ИтогСуммаСНДС = Объект.Товары.Итог("СуммаСНДС");
	Если ИтогСуммаСНДС <> Объект.РасшифровкаПлатежа.Итог("Сумма") Тогда
		ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, ИтогСуммаСНДС);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Соглашение) И ИспользоватьСоглашенияСКлиентами Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено (Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииСоглашенияСервер();
	ИтогСуммаСНДС = Объект.Товары.Итог("СуммаСНДС");
	Если ИтогСуммаСНДС <> Объект.РасшифровкаПлатежа.Итог("Сумма") Тогда
		ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, ИтогСуммаСНДС);
	КонецЕсли;
	
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	УстановитьДоступностьКомандыПерезаполнитьПоПриемке();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	ПриИзмененииНалогообложенияНДССервер();
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииЧекаККМСервер(ПерезаполнитьТовары)
	ДокументРеализации = ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(Объект.ЧекККМ);
	Объект.ДокументРеализации = ДокументРеализации;
	
	Для каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.ДокументРеализации = ДокументРеализации;
	КонецЦикла;
	
	Объект.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЧекККМ, "Партнер");
	
	СтараяВалюта = ВалютаДокумента;
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ВалютаДокумента = Объект.Валюта;
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
		
		ВыполнитьПересчетСуммДокументаСервер(СтараяВалюта, ВалютаДокумента);
		ПриИзмененииХозяйственнойОперацииСервер();
		РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
		УстановитьДоступностьКомандыПерезаполнитьПоПриемке();
		
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
		)
	);
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Партнер", "ТолькоПросмотр", ЗначениеЗаполнено(Объект.ЧекККМ));
	
	НеТребуетсяВводСчетаФактуры = (Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	НастроитьОтображениеРеквизитовСчетаФактуры(
		ЭтаФорма,
		ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация, НеТребуетсяВводСчетаФактуры)
	);
	
	Если ПерезаполнитьТовары Тогда
		ЗаполнитьВозвращаемыеТоварыПоЧеку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		ПриИзмененииВалютыСервер(Объект.Валюта, ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект,ВалютаДокумента));
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		
	КонецЕсли;
	
	ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ПриИнтерактивномИзмененииХозяйственнойОперацииСервер();
	Иначе
		ЗаполнитьУсловияПродаж();
	КонецЕсли;
	
	ОчиститьДокументыРеализации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредъявленСчетФактураПриИзменении(Элемент)
	
	НастроитьОтображениеРеквизитовСчетаФактуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыданыДенежныеСредстваПриИзменении(Элемент)
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаРасходногоКассовогоОрдера", "Доступность", Объект.ВыданыДенежныеСредства);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомерРасходногоКассовогоОрдера", "Доступность", Объект.ВыданыДенежныеСредства);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧекККМПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
	
		ВариантыОтветов = Новый СписокЗначений;
		ВариантыОтветов.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Перезаполнить'"));
		ВариантыОтветов.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Не перезаполнять'"));
		
		ОтветНаВопрос = Вопрос(НСтр("ru = 'Перезаполнить возвращаемые товары по выбранному чеку ККМ?'"), ВариантыОтветов);
		
		ПерезаполнитьТовары = (ОтветНаВопрос = КодВозвратаДиалога.Да);
		ПриИзмененииЧекаККМСервер(ПерезаполнитьТовары);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Партнер", "ТолькоПросмотр", Ложь);
	КонецЕсли;
	
	ИтогСуммаСНДС = Объект.Товары.Итог("СуммаСНДС");
	Если ИтогСуммаСНДС <> Объект.РасшифровкаПлатежа.Итог("Сумма") Тогда
		ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, ИтогСуммаСНДС);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
	ОбновитьИнформациюПоРеализациям();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументРеализацииПриИзменении(Элемент)
	
	ЭтоВозвратОтРозничногоПокупателя = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя"));
	Если ЭтоВозвратОтРозничногоПокупателя Тогда
		
		Если ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
			
			Если ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(Объект.ЧекККМ) <> Объект.ДокументРеализации Тогда
				Объект.ЧекККМ = Неопределено;
			КонецЕслИ;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетФактураНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗакупкиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект.Организация, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСчетовФактурНажатие(Элемент)
	
	СтруктураОтбор = Новый Структура("ДокументОснование, Организация, Проведен", Объект.Ссылка, Объект.Организация, Истина);
	
	ОткрытьФорму(
		"Документ.СчетФактураПолученный.ФормаСписка",
		Новый Структура("Отбор", СтруктураОтбор),
		ЭтаФорма
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ДатаПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокРеализацииНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуМодально(
		"ОбщаяФорма.ПросмотрСпискаДокументов",
		Новый Структура("СписокДокументов, Заголовок",
			СписокРеализаций,
			НСтр("ru='Реализации клиентам (%КоличествоДокументов%)'")
		),
		ЭтаФорма
	);
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПереданнойМногооборотнойТарыПриИзменении(Элемент)
	
	ВозвратПереданнойМногооборотнойТарыПриИзмененииСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТоварыСтатусУказанияСерий" Тогда
		Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
			ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
			
			ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
			
			Если ЗначениеВозврата <> Неопределено Тогда
				ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
				
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	ОбновитьИнформациюПоРеализациям();
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ЗначениеЗаполнено(Объект.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
		Отказ = Истина;
		ПодборТоваровИзЗаявки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);	
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ЧекККМ) Тогда
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ДокументРеализации) Тогда
			ТекущиеДанные.ДокументРеализации = ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(Объект.ЧекККМ);
		КонецЕсли;
	КонецЕсли; 
	
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОприходованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	Если ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара");
	КонецЕсли;
	ИзменениеКачества = СкладыКлиент.ИзменитьКачество(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорчаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.Порча Тогда
		ТекущаяСтрока.НоменклатураОприходование = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		ТекущаяСтрока.ХарактеристикаОприходование = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		ТекущаяСтрока.ХарактеристикиИспользуютсяОприходование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураОприходованиеПриИзменении(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ТекущаяСтрока = Новый Структура;
	ТекущаяСтрока.Вставить("Номенклатура", ТекущиеДанные.НоменклатураОприходование);
	ТекущаяСтрока.Вставить("ХарактеристикиИспользуются", ТекущиеДанные.ХарактеристикиИспользуютсяОприходование);
	ТекущаяСтрока.Вставить("Характеристика", ТекущиеДанные.Характеристика);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	ТекущиеДанные.ХарактеристикиИспользуютсяОприходование   = ТекущаяСтрока.ХарактеристикиИспользуются;
	ТекущаяСтрока.Свойство("Характеристика", ТекущиеДанные.ХарактеристикаОприходование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
	
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока.Порча
		И ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураОприходование) Тогда
		ЕстьГрадация = ПроверитьНаличиеГрадацииСервер(ТекущаяСтрока.Номенклатура, ТекущаяСтрока.НоменклатураОприходование);
		Если Не ЕстьГрадация Тогда
			ТекущаяСтрока.НоменклатураОприходование = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
			ТекущаяСтрока.ХарактеристикаОприходование = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
			ТекущаяСтрока.ХарактеристикиИспользуютсяОприходование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуCНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
	
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
	
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
	
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументРеализацииПриИзменении(Элемент)
	
	ОбновитьИнформациюПоРеализациям();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ РАСШИФРОВКА ПЛАТЕЖА

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ФинансыКлиент.УстановитьПустуюСсылкуНаЗаказ(
		СтрокаТаблицы.Заказ,
		Истина // ЭтоРасчетыСКлиентами
	);
	
	Если НоваяСтрока И Не Копирование Тогда
		
		СуммаОстаток = Объект.Товары.Итог("СуммаСНДС") - Объект.РасшифровкаПлатежа.Итог("Сумма");
		СтрокаТаблицы.Сумма = СуммаОстаток;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(
		Объект.Организация,
		Объект.Партнер,
		Объект.Контрагент,
		Неопределено, // Соглашение
		Истина, // ЭтоРасчетыСКлиентами
		Ложь, // ВыборОснованияПлатежа
		Элемент,
		СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОткрытьВидыЗапасов(Команда)
	
	Перем АдресТоваровВХранилище;
	Перем АдресВидовЗапасовВХранилище;
	
	ПоместитьТоварыИВидыЗапасовВХранилище(
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище
	);
	ФинансыКлиент.ОткрытьВидыЗапасов(
		Объект,
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище,
		ЭтаФорма,
		Истина, // РедактироватьВидыЗапасов
		Истина // ОтображатьДокументРеализации
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Организация");
	СтруктураРеквизитов.Вставить("Партнер");
	СтруктураРеквизитов.Вставить("Контрагент");
	СтруктураРеквизитов.Вставить("Валюта");
	СтруктураРеквизитов.Вставить("ХозяйственнаяОперация", "Операция");
	
	Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтаФорма, Неопределено, СтруктураРеквизитов) Тогда

		АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
		ПараметрыПодбора = Новый Структура("
			|АдресПлатежейВХранилище, 
			|Организация, 
			|Партнер,
			|Контрагент,
			|Валюта,
			|СуммаДокумента,
			|ДатаДокумента,
			|ХозяйственнаяОперация",
			АдресПлатежейВХранилище,
			Объект.Организация, 
			Объект.Партнер,
			Объект.Контрагент,
			Объект.Валюта,
			Объект.Товары.Итог("СуммаСНДС"),
			Объект.Дата,
			Объект.ХозяйственнаяОперация
		);
		ОткрытьФорму(
			"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
			ПараметрыПодбора, 
			ЭтаФорма
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТоварыПоРеализациям(Команда)
	
	ПодборТоваровПоРеализациям();
	ОбновитьИнформациюПоРеализациям();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТоваровПоРеализациям()
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	ВозвратОтРозничногоПокупателя = Ложь;
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя") Тогда
		ВозвратОтРозничногоПокупателя = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Валюта"" не заполнено'"),
			Объект.Ссылка, "Объект.Валюта",
			,
			Отказ
		);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""НалогообложениеНДС"" не заполнено'"),
			Объект.Ссылка, "Объект.НалогообложениеНДС",
			,
			Отказ
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Организация"" не заполнено'"),
			Объект.Ссылка, "Объект.Организация",
			,
			Отказ
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Партнер"" не заполнено'"),
			Объект.Ссылка, "Объект.Партнер",
			,
			Отказ
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Контрагент"" не заполнено'"),
			Объект.Ссылка, "Объект.Контрагент",
			,
			Отказ
		);
	КонецЕсли;

	
	Если Не Отказ Тогда
		
		ПараметрыПодбора = Новый Структура(
			"ДокументВозврата, Валюта, Дата, ЦенаВключаетНДС, Склад, ОтборПоСкладу, НалогообложениеНДС, Партнер, Контрагент, Соглашение, Организация, ВозвратОтРозничногоПокупателя, ЧекККМ, ПоказыватьТовары, ПоказыватьТару",
			Объект.Ссылка,
			Объект.Валюта,
			?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()),
			Объект.ЦенаВключаетНДС,
			Объект.Склад,
			Истина,
			Объект.НалогообложениеНДС,
			Объект.Партнер,
			Объект.Контрагент,
			Объект.Соглашение,
			Объект.Организация,
			ВозвратОтРозничногоПокупателя,
			Объект.ЧекККМ,
			Истина,
			Не ВозвратОтРозничногоПокупателя И Объект.ВозвратПереданнойМногооборотнойТары
		);
		
		ОткрытьФорму(
			"ОбщаяФорма.ПодборТоваровПоРеализациям",
			ПараметрыПодбора,
			ЭтаФорма
		);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Соглашение)
		Или Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", "возврат товаров от клиента");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение",           Объект.Соглашение);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",      Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("Склад",                Объект.Склад);
	ПараметрыФормы.Вставить("Валюта",               Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок",            ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                 Объект.Дата);
	ПараметрыФормы.Вставить("Документ",             Объект.Ссылка);
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Истина);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре()));
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера")
		Или Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
		ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
		ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
		ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
		
	КонецЕсли;
	
	Если Не Объект.Соглашение.Пустая() Тогда
		СегментНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "СегментНоменклатуры");
		ПараметрыФормы.Вставить("СегментНоменклатуры", СегментНоменклатуры);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТоварыИзЗаявки(Команда)
	
	Если ЗначениеЗаполнено(Объект.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
		ПодборТоваровИзЗаявки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоПриемке(Команда)
	
	ЕстьПринятыеТовары              = Ложь;
	ЕстьПринимающиесяТовары         = Ложь;
	ЗаполнятьПринимающимисяТоварами = Ложь;
	
	ЕстьИзменения = ЗаполнитьПоПриемкеСервер(ЕстьПринятыеТовары, ЕстьПринимающиесяТовары);
	
	Если ЕстьПринимающиесяТовары Тогда
		
		Если Не ЗакупкиКлиент.ВопросОПерезаполненииПринятымиТоварами(ЕстьПринятыеТовары, ЗаполнятьПринимающимисяТоварами) Тогда
			Возврат;
		КонецЕсли;
		
	ЕстьИзменения = ЗаполнитьПоПриемкеСервер(ЕстьПринятыеТовары, ЕстьПринимающиесяТовары, ЗаполнятьПринимающимисяТоварами);
	
	КонецЕсли;
	
	ЗакупкиКлиент.ОповеститьОбОкончанииПерезаполненияТоваровПоПриемке(ЕстьИзменения, ЕстьПринятыеТовары Или ЕстьПринимающиесяТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(Команда)
	Перем ТекущаяСтрока;
	
	ВесНоменклатуры = МенеджерОборудованияКлиент.ПолучитьДанныеИзВесов(ЭтаФорма, ТекущаяСтрока);
	
	Если ВесНоменклатуры <> Неопределено Тогда
		
		ТекущаяСтрока.КоличествоУпаковок = ВесНоменклатуры;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвратПорчи(Команда)
	
	Если Объект.ВозвратПорчи Тогда 
		
		ЕстьСтрокиСПорчей = ЕстьСтрокиСПорчей();
		
		Если ЕстьСтрокиСПорчей Тогда
			
			Ответ = Вопрос("При выполнении операции будет очищена информация качестве возвращаемых товаров. Продолжить?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Объект.ВозвратПорчи = Ложь;
		НастроитьФормуДляОтраженияПорчи(Истина);
		
	Иначе
		Объект.ВозвратПорчи = Истина;
		НастроитьФормуДляОтраженияПорчи();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы);
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиИсправлениеСчетаФактуры(Команда)
	
	ЗакупкиКлиент.ВвестиСчетФактуру(ЭтаФорма, Объект.Организация, Ложь, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатиЗаявленияНаВозврат(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Контрагент",                          Объект.Контрагент);
	СтруктураПараметров.Вставить("Покупатель",                          Объект.Покупатель);
	СтруктураПараметров.Вставить("ДатаРожденияПокупателя",              Объект.ДатаРожденияПокупателя);
	СтруктураПараметров.Вставить("ПричинаВозврата",                     Объект.ПричинаВозврата);
	СтруктураПараметров.Вставить("ВидДокументаПокупателя",              Объект.ВидДокументаПокупателя);
	СтруктураПараметров.Вставить("СерияДокументаПокупателя",            Объект.СерияДокументаПокупателя);
	СтруктураПараметров.Вставить("НомерДокументаПокупателя",            Объект.НомерДокументаПокупателя);
	СтруктураПараметров.Вставить("ДатаВыдачиДокументаПокупателя",       Объект.ДатаВыдачиДокументаПокупателя);
	СтруктураПараметров.Вставить("СрокДействияДокументаПокупателя",     Объект.СрокДействияДокументаПокупателя);
	СтруктураПараметров.Вставить("КемВыданДокументПокупателя",          Объект.КемВыданДокументПокупателя);
	СтруктураПараметров.Вставить("КодПодразделенияДокументаПокупателя", Объект.КодПодразделенияДокументаПокупателя);
	СтруктураПараметров.Вставить("ДатаДокумента",                       Объект.Дата);
	СтруктураПараметров.Вставить("Организация",                         Объект.Организация);
	
	ОткрытьФормуМодально("Обработка.ПечатьЗаявленияНаВозвратТоваровОтКлиента.Форма.РеквизитыПечатиЗаявленияНаВозврат", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеализацииИЦены(Команда)
	ЗаполнитьРеализацииИЦеныНаСервере();
	ОбновитьИнформациюПоРеализациям();
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		ОбщегоНазначенияУТКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)

	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		"Номенклатура,Характеристика,Количество");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ЗаполнитьУсловияПродаж();
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
		)
	);
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Партнер", "ТолькоПросмотр", ЗначениеЗаполнено(Объект.ЧекККМ));
	
	НеТребуетсяВводСчетаФактуры = (Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	НастроитьОтображениеРеквизитовСчетаФактуры(
		ЭтаФорма,
		ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация, НеТребуетсяВводСчетаФактуры)
	);
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоглашенияСервер()
	
	СтараяВалюта = ВалютаДокумента;
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоCоглашению();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
	ВалютаДокумента = Объект.Валюта;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ВыполнитьПересчетСуммДокументаСервер(СтараяВалюта, ВалютаДокумента);
	ПриИзмененииХозяйственнойОперацииСервер();
	
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	УстановитьДоступностьКомандыПерезаполнитьПоПриемке();
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	НеТребуетсяВводСчетаФактуры = (Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	НастроитьОтображениеРеквизитовСчетаФактуры(
		ЭтаФорма,
		ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация, НеТребуетсяВводСчетаФактуры)
	);
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер()
	
	ХозяйственнаяОперацияДоговора = ПолучитьХозяйственнуюОперациюДоговора(Объект.ХозяйственнаяОперация);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		
		Объект.РасшифровкаПлатежа.Очистить();
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		КонецЕсли; 
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		
		Объект.Сделка = Справочники.СделкиСКлиентами.ПустаяСсылка();
		Объект.ВозвратПереданнойМногооборотнойТары = Ложь;
		ВозвратПереданнойМногооборотнойТарыПриИзмененииСервер();
		
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента Тогда
		Объект.ПредъявленСчетФактура = Ложь;
		Объект.ДатаСчетаФактуры = "";
		Объект.НомерСчетаФактуры = "";
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		Объект.ВыданыДенежныеСредства = Ложь;
		Объект.ДатаРасходногоКассовогоОрдера = "";
		Объект.НомерРасходногоКассовогоОрдера = "";
	КонецЕсли;
	
	НеТребуетсяВводСчетаФактуры = (Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	НастроитьОтображениеРеквизитовСчетаФактуры(
		ЭтаФорма,
		ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация, НеТребуетсяВводСчетаФактуры)
	);
	
	УстановитьВидимостьЭлементовПоОперацииСервер();
	УстановитьДоступностьРеквизитовРасходногоКассовогоОрдераСервер();
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВозвратПереданнойМногооборотнойТары", "ТолькоПросмотр", Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	
КонецПроцедуры

&НаСервере
Процедура ПриИнтерактивномИзмененииХозяйственнойОперацииСервер()
	
	Объект.ЧекККМ = Неопределено;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
	
		ПартнерИзменен = Ложь;
		
		Объект.ВозвратПереданнойМногооборотнойТары = Ложь;
		ВозвратПереданнойМногооборотнойТарыПриИзмененииСервер();
		
		Если Объект.Партнер <> Справочники.Партнеры.РозничныйПокупатель Тогда
			Объект.Партнер = Справочники.Партнеры.РозничныйПокупатель;
			ПартнерИзменен = Истина;
		КонецЕсли;
				
		Если ПартнерИзменен Тогда
			
			Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
			
			ПриИзмененииПартнераСервер();
			УстановитьВидимостьЭлементовПоОперацииСервер();
			ЗаполнитьДоговорПоУмолчанию();
			ОбновитьИнформациюПоРеализациям();
			Возврат;
			
		КонецЕсли;
				
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Партнер", "ТолькоПросмотр", ЗначениеЗаполнено(Объект.ЧекККМ));
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВозвратПереданнойМногооборотнойТары", "ТолькоПросмотр", Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	
	ПриИзмененииХозяйственнойОперацииСервер();
	ЗаполнитьДоговорПоУмолчанию();
	ОбновитьИнформациюПоРеализациям();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта, ПересчитатьЦены = Истина)
	
	ЗаполнитьДоговорПоУмолчанию();
	
	СтараяВалюта = ВалютаДокумента;
	ВыполнитьПересчетСуммДокументаСервер(СтараяВалюта, НоваяВалюта);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ЗаполнитьДоговорПоУмолчанию();
		
		НеТребуетсяВводСчетаФактуры = (Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
		НастроитьОтображениеРеквизитовСчетаФактуры(
			ЭтаФорма,
			ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация, НеТребуетсяВводСчетаФактуры)
		);
		
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары,СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНалогообложенияНДССервер()
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подборы и обработка проверки количества

&НаКлиенте
Процедура ПодборТоваровИзЗаявки()
	
	МассивКодовСтрок = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если СтрокаТЧ.КодСтроки <> 0 Тогда
			МассивКодовСтрок.Добавить(СтрокаТЧ.КодСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПодбора = Новый Структура(
		"ЗаявкаНаВозвратТоваровОтКлиента, ВалютаДокумента, ВозвратТоваровОтКлиента, МассивКодовСтрок, ПолучатьСерииНоменклатуры",
		Объект.ЗаявкаНаВозвратТоваровОтКлиента,
		Объект.Валюта,
		Объект.Ссылка,
		МассивКодовСтрок,
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры
	);
	
	ОткрытьФорму("Документ.ВозвратТоваровОтКлиента.Форма.ФормаПодбораТоваровИзЗаявки",
		ПараметрыПодбора,
		ЭтаФорма
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоВДокументе(Команда)
	
	ПараметрыОткрытия = Новый Структура("АдресВоВременномХранилище, ПревышениеКоличестваТоваровРазрешено", ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества(), Не ЗначениеЗаполнено(Объект.ЗаявкаНаВозвратТоваровОтКлиента));
	ВозвращаемыеПараметры = ОткрытьФормуМодально("ОбщаяФорма.ПроверкаЗаполненияДокументов", ПараметрыОткрытия);
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, ?(КэшированныеЗначения = Неопределено, ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения(), КэшированныеЗначения));
		Модифицированность = Истина;
		
		ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборПоРеализацииСервер(ВыбранноеЗначение)
	
	СтруктураВозвращаемыхЗначений = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	ТаблицаТоваров = СтруктураВозвращаемыхЗначений.Товары;
	СтруктураШапки = СтруктураВозвращаемыхЗначений.СтруктураШапки;
	
	ВозвратОтРозничногоПокупателя = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	КоличествоТоваровПервоначально = Объект.Товары.Количество();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма / ТекущаяСтрока.КоличествоУпаковок;
		Если ВозвратОтРозничногоПокупателя Тогда
			ТекущаяСтрока.ДокументРеализации = ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(СтрокаТовара.ДокументРеализации);
		КонецЕсли;
	КонецЦикла;
	
	Объект.Партнер = СтруктураШапки.Партнер;
	Если ЗначениеЗаполнено(СтруктураШапки.ЧекККМ) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ЧекККМ) и КоличествоТоваровПервоначально=0 Тогда
			Объект.ЧекККМ = СтруктураШапки.ЧекККМ;
			Объект.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ЧекККМ, "Партнер");
			ПриИзмененииПартнераСервер();
		КонецЕсли;
	КонецЕсли;
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
		)
	);
	ОбновитьИнформациюПоРеализациям();
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВозвратПереданнойМногооборотнойТары);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборПоЗаявкеНаКлиенте(ВыбранноеЗначение)
	
	СтруктураТаблиц = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	СтруктураПоискаТоваров = Новый Структура("КодСтроки");
	СтруктураПоискаСерий = Новый Структура("Номенклатура, Характеристика");
	
	Для Каждого СтрокаТоваров Из СтруктураТаблиц.Товары Цикл
		
		// Обработка ТЧ товары.
		СтруктураПоискаТоваров.КодСтроки = СтрокаТоваров.КодСтроки;
		МассивСтрокТЧТовары = Объект.Товары.НайтиСтроки(СтруктураПоискаТоваров);
		
		Если МассивСтрокТЧТовары.Количество() = 0 Тогда
			
			СтрокаТЧТовары = Объект.Товары.Добавить();
			
		ИначеЕсли МассивСтрокТЧТовары.Количество() = 1 Тогда
			
			СтрокаТЧТовары = МассивСтрокТЧТовары[0];
			
		ИначеЕсли МассивСтрокТЧТовары.Количество() > 1 Тогда
			
			Для Каждого СтрокаКУдалению Из МассивСтрокТЧТовары Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокаКУдалению);
				КоличествоКУдалению = СтрокаКУдалению.Количество;
				
				// Удаление строки товаров
				Объект.Товары.Удалить(СтрокаКУдалению);
				
				// Удаление строк серий
				Для Каждого СтрокаСерии Из Объект.Серии.НайтиСтроки(СтруктураПоискаСерий) Цикл
					КоличествоКУдалению = КоличествоКУдалению - СтрокаСерии.Количество;
					Если КоличествоКУдалению < 0 Тогда
						СтрокаСерии.Количество = - КоличествоКУдалению;
						Прервать;
					КонецЕсли;
					Объект.Серии.Удалить(СтрокаСерии);
				КонецЦикла;
				
			КонецЦикла;
			
			СтрокаТЧТовары = Объект.Товары.Добавить();
			
		КонецЕсли;
		
		// Удаление серий по изменяемой строке товара
		КоличествоКУдалению = СтрокаТЧТовары.Количество;
		Если КоличествоКУдалению > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоискаСерий, СтрокаТЧТовары);
			Для Каждого СтрокаСерии Из Объект.Серии.НайтиСтроки(СтруктураПоискаСерий) Цикл
				КоличествоКУдалению = КоличествоКУдалению - СтрокаСерии.Количество;
				Если КоличествоКУдалению < 0 Тогда
					СтрокаСерии.Количество = - КоличествоКУдалению;
					Прервать;
				КонецЕсли;
				Объект.Серии.Удалить(СтрокаСерии);
			КонецЦикла;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		
	КонецЦикла;
	
	// Перенос серий, полученных из формы подбора, в табличную часть серии
	Для Каждого СтрокаСерии Из СтруктураТаблиц.Серии Цикл
		ЗаполнитьЗначенияСвойств(Объект.Серии.Добавить(), СтрокаСерии);
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
		)
	);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВозвратПереданнойМногооборотнойТары);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, Цена, КоличествоУпаковок");
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками,Объект);
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	КонецЕсли;

	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);

	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ТолькоТовары                           = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если СтруктураДействий.МассивСтрокССериями.Количество() = 1
		И НоменклатураКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьФормуУказанияСерий",0.1,Истина);
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, СуммаВсего);
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма, Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий ()
	
	Элементы.ТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость        = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий,СтруктураДействий);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуУказанияСерий()
	
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	
	ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтаФорма);
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Порча

&НаСервере
Функция ЕстьСтрокиСПорчей()
	
	Возврат Объект.Товары.НайтиСтроки(Новый Структура("НоменклатураОприходование", Справочники.Номенклатура.ПустаяСсылка())).Количество()
			<> Объект.Товары.Количество() ;
	
КонецФункции

&НаСервере
Функция ОчиститьИнформациюОПорче()
	
	Для Каждого СтрТабл Из Объект.Товары Цикл
		СтрТабл.Порча                       = Ложь;
		СтрТабл.НоменклатураОприходование   = Справочники.Номенклатура.ПустаяСсылка();
		СтрТабл.ХарактеристикаОприходование = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЦикла;
	
	Если ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Для Каждого СтрТабл Из Объект.Серии Цикл
			СтрТабл.НоменклатураОприходование   = Справочники.Номенклатура.ПустаяСсылка();
			СтрТабл.ХарактеристикаОприходование = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура НастроитьФормуДляОтраженияПорчи(ОчищатьПорчу = Ложь)
	
	Элементы.ВозвратПорчи.Пометка                               = Объект.ВозвратПорчи;
	Элементы.ТоварыГруппаРанееОтгруженныйТовар.ОтображатьВШапке = Объект.ВозвратПорчи;
	Элементы.ТоварыГруппаВозвращаемыйТовар.Видимость            = Объект.ВозвратПорчи;
	
	Если ОчищатьПорчу Тогда
		 ОчиститьИнформациюОПорче()
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеГрадацииСервер(ТоварИсходногоКачества, ТоварДругогоКачества)
	
	Возврат РегистрыСведений.ТоварыДругогоКачества.ПроверитьНаличиеГрадации(ТоварИсходногоКачества, ТоварДругогоКачества);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ВалютаДокумента = Объект.Валюта;
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(Объект.Валюта, Элементы);
	УстановитьВидимостьЭлементовПоОперацииСервер();
	УстановитьДоступностьРеквизитовРасходногоКассовогоОрдераСервер();
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ВозвратТоваровОтКлиента));
	УстановитьВидимостьЭлементовСерий();
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
		)
	);
	МногооборотнаяТараСервер.ОбновитьПризнакБезВозвратнойТары(Объект.Товары, Объект.ВозвратПереданнойМногооборотнойТары);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	
	ХозяйственнаяОперацияДоговора = ПолучитьХозяйственнуюОперациюДоговора(Объект.ХозяйственнаяОперация);
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость);
	УстановитьДоступностьКомандыПерезаполнитьПоПриемке();
	НастроитьФормуДляОтраженияПорчи();
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Партнер", "ТолькоПросмотр", ЗначениеЗаполнено(Объект.ЧекККМ));
	
	НеТребуетсяВводСчетаФактуры = (Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	НастроитьОтображениеРеквизитовСчетаФактуры(
		ЭтаФорма,
		ЗакупкиСервер.ПараметрыПредставленияСчетаФактуры(Объект.Ссылка, Объект.Организация, НеТребуетсяВводСчетаФактуры)
	);
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	ОбновитьИнформациюПоРеализациям();
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВозвратПереданнойМногооборотнойТары", "ТолькоПросмотр", Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьХозяйственнуюОперациюДоговора(ХозяйственнаяОперация)
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию");
	ИначеЕсли ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияВРозницу");
	ИначеЕсли ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПустаяСсылка");
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
		Объект.Договор,
		Объект.Партнер,
		Объект.Контрагент,
		Объект.Организация,
		ХозяйственнаяОперацияДоговора,
		Объект.Валюта,
		Объект.Соглашение
	);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище()
	
	АдресПлатежейВХранилище = ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(
		Объект.РасшифровкаПлатежа,
		УникальныйИдентификатор
	);
	
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаИзХранилища(АдресПлатежейВХранилище)
	
	Объект.РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьТоварыИВидыЗапасовВХранилище(АдресТоваровВХранилище, АдресВидовЗапасовВХранилище)
	
	ЗапасыСервер.ПоместитьТоварыИВидыЗапасовВХранилище(
		Объект.Товары,
		Объект.ВидыЗапасов,
		УникальныйИдентификатор,
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище
	);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВидыЗапасовИзХранилища(АдресВидовЗапасовВХранилище)
	
	Объект.ВидыЗапасов.Загрузить(ПолучитьИзВременногоХранилища(АдресВидовЗапасовВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПересчетСуммДокументаСервер(СтараяВалюта, НоваяВалюта)
	
	Если СтараяВалюта <> НоваяВалюта Тогда
		
		ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата,ТекущаяДата());
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
		СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
		
		Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.Товары,
			Объект.ЦенаВключаетНДС,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты
		);
		
	КонецЕсли;
	
	ВзаиморасчетыСервер.ПересчитатьСуммыВВалютуРасшифровкаПлатежа(Объект, Объект.Товары.Итог("СуммаСНДС"));
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(Объект.Валюта, Элементы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОперациий()
	
	Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьКомиссиюПриПродажах") Тогда
		
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьРозничныеПродажи") Тогда
		
		ЭлементСписка = Элементы.ХозяйственнаяОперация.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.ХозяйственнаяОперация.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ХозяйственнаяОперация.СписокВыбора.Количество() = 1 Тогда 
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ХозяйственнаяОперация", "ТолькоПросмотр", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ВозвратТоваровОтКлиента.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	ЭтоВозвратОтКомиссионера = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	ЭтоВозвратОтРозничногоПокупателя = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Сделка", "Видимость", Не ЭтоВозвратОтРозничногоПокупателя);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЧекККМ", "Видимость", ЭтоВозвратОтРозничногоПокупателя);
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("РасшифровкаПлатежа");
	МассивЭлементов.Добавить("СуммаВсегоСНДС");
	МассивЭлементов.Добавить("СуммаВсегоБезНДС");
	МассивЭлементов.Добавить("СуммаНДС");
	МассивЭлементов.Добавить("ПолеБезНДС");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Не ЭтоВозвратОтКомиссионера);
	
	МассивТипов = Новый Массив();
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		МассивТипов.Добавить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
	Иначе
		МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	КонецЕсли;
	
	Элементы.ТоварыДокументРеализации.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		Элементы.ГруппаСчетФактура.Видимость = Ложь;
		Элементы.ГруппаРасходныйКассовыйОрдер.Видимость = Истина;
	Иначе
		Элементы.ГруппаСчетФактура.Видимость = Истина;
		Элементы.ГруппаРасходныйКассовыйОрдер.Видимость = Ложь;
	КонецЕсли;
	
	ПродажиСервер.ЗаполнитьСписокВыбораНалогообложения(Объект.ХозяйственнаяОперация, Элементы.НалогообложениеНДС);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРеквизитовРасходногоКассовогоОрдераСервер()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаРасходногоКассовогоОрдера", "Доступность", Объект.ВыданыДенежныеСредства);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НомерРасходногоКассовогоОрдера", "Доступность", Объект.ВыданыДенежныеСредства);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиВозврата(Форма)
	
	Форма.СуммаВсего = Форма.Объект.Товары.Итог("СуммаСНДСБезВозвратнойТары");
	Форма.СуммаНДС = Форма.Объект.Товары.Итог("СуммаНДСБезВозвратнойТары");
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС")
	 Или Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД") Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоПриемкеСервер(ЕстьПринятыеТовары,
	                             ЕстьПринимающиесяТовары,
	                             ЗаполнятьПринимающимисяТоварами=Ложь)
	
	СтуктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуНДС", СтуктураПересчетаСуммы);
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСумму");
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуСНДС", СтуктураПересчетаСуммы);
	СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСуммуНДС", СтуктураПересчетаСуммы);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСумму");
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСуммуСНДС", СтуктураПересчетаСуммы);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	Если ЗначениеЗаполнено(Объект.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
		МассивРаспоряжений = Новый Массив();
		МассивРаспоряжений.Добавить(Объект.ЗаявкаНаВозвратТоваровОтКлиента);
	Иначе
		МассивРаспоряжений = Неопределено;
	КонецЕсли;
	
	ЕстьИзменения = ЗакупкиСервер.ЗаполнитьТоварыПоФактическойПриемке(
		ЕстьПринятыеТовары,
		ЕстьПринимающиесяТовары,
		ЗаполнятьПринимающимисяТоварами,
		Объект.Товары,
		Объект.Ссылка,
		МассивРаспоряжений,
		Объект.Склад,
		Справочники.СоглашенияСПоставщиками.ПустаяСсылка(),
		СтруктураДействийСИзмененнымиСтроками,
		СтруктураДействийСДобавленнымиСтроками
	);
	
	Если ЕстьИзменения Тогда
		РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	КонецЕсли;
	
	Возврат ЕстьИзменения;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандыПерезаполнитьПоПриемке()
	
	Элементы.ТоварыПерезаполнитьПоПриемке.Доступность = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении", Новый Структура("Склад", Объект.Склад));
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ВозвратТоваровОтКлиента));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ВозвратТоваровОтКлиента));
	УстановитьВидимостьЭлементовСерий();
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьТоварыВоВременноеХранилищеДляПроверкиКоличества()
	
	ТабличнаяЧастьТовары = Объект.Товары.Выгрузить(,"Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок");
	ТабличнаяЧастьТовары.Свернуть("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка", "КоличествоУпаковок");
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТабличнаяЧастьТовары, УникальныйИдентификатор);
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ИзменитьТабличнуюЧастьПоРезультатамПроверки(ВозвращаемыеПараметры, КэшированныеЗначения)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(ВозвращаемыеПараметры.Товары);
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаИсточник Из ТаблицаТовары Цикл
		
		Отбор = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка");
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточник);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			Если СтрокаИсточник.КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаИсточник.КоличествоУпаковок >= 0 Тогда
				
				СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковок + СтрокаИсточник.КоличествоУпаковок;
				СтрокаИсточник.КоличествоУпаковок = 0;
				
			Иначе
				
				КоличествоКСписанию = -СтрокаИсточник.КоличествоУпаковок;
				КоличествоВСтроке   = СтрокаТЧ.КоличествоУпаковок;
				
				Если КоличествоКСписанию > КоличествоВСтроке Тогда
					СтрокаИсточник.КоличествоУпаковок = КоличествоВСтроке - КоличествоКСписанию;
					СтрокаТЧ.КоличествоУпаковок       = 0;
				Иначе
					СтрокаИсточник.КоличествоУпаковок = 0;
					СтрокаТЧ.КоличествоУпаковок       = КоличествоВСтроке - КоличествоКСписанию;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТЧ.КоличествоУпаковок = 0 Тогда
				УдаляемыеСтроки.Добавить(СтрокаТЧ);
			Иначе
				
				СтруктураДействий = Новый Структура;
				ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтрокаТЧ = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаИсточник);
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
			СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
			СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
			ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
			
			Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
				СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
			КонецЕсли;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из УдаляемыеСтроки Цикл
		Объект.Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ПолучитьСтруктуруЗависимыхРеквизитов());
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьОтображениеРеквизитовСчетаФактуры(Форма, ПараметрыПредставления = Неопределено)
	
	Если ПараметрыПредставления <> Неопределено Тогда
		
		Если ПараметрыПредставления.РазрешенВводНового Тогда
			Форма.Элементы.ГруппаСтраницыСчетФактура.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаРеквизитыСчетаФактуры;
		Иначе
			Форма.ТекстСчетФактура = ПараметрыПредставления.ТекстСчетФактура;
			Форма.Элементы.ТекстСчетФактура.Гиперссылка = ПараметрыПредставления.ГиперссылкаСчетФактура;
			Форма.Элементы.СписокСчетовФактур.Заголовок = ПараметрыПредставления.ТекстСписок;
			Форма.Элементы.СписокСчетовФактур.Гиперссылка = ЗначениеЗаполнено(ПараметрыПредставления.ТекстСписок);
			Форма.Элементы.ВвестиИсправлениеСчетаФактуры.Доступность = ПараметрыПредставления.РазрешеныИсправления;
			Форма.Элементы.ГруппаСтраницыСчетФактура.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаТекстСчетФактура;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.Элементы.ГруппаСтраницыСчетФактура.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаРеквизитыСчетаФактуры Тогда
		
		ИменаЭлементов = Новый Массив;
		ИменаЭлементов.Добавить("НомерСчетаФактуры");
		ИменаЭлементов.Добавить("ДатаСчетаФактуры");
		ИменаЭлементов.Добавить("ВалютаСчетаФактуры");
		
		Если Форма.Объект.ПредъявленСчетФактура Тогда
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "Доступность", Истина);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "АвтоОтметкаНезаполненного", Истина);
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "Доступность", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "АвтоОтметкаНезаполненного", Ложь);
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, ИменаЭлементов, "ОтметкаНезаполненного", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеализацииИЦеныНаСервере()
	ПродажиСервер.ЗаполнитьРеализацииИЦены(Объект, "Товары");
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюПоРеализациям()
	
	ПродажиСервер.ОбновитьИнформациюПоРеализациямВФорме(
		СписокРеализаций,
		Объект.ДокументРеализации,
		НадписьЗаголовокРеализации,
		Элементы,
		Элементы.ТоварыДокументРеализации,
		Объект.Товары,
		"ДокументРеализации"
		);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДокументыРеализации()
	
	Объект.ДокументРеализации = Неопределено;
	
	Для каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.ДокументРеализации = Неопределено;
	КонецЦикла;
	
	НадписьЗаголовокРеализации = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВозвращаемыеТоварыПоЧеку()
	
	Объект.Товары.Очистить();
	ПродажиСервер.ЗаполнитьВозвращаемыеТоварыПоЧеку(Объект, "Товары");
	ОбновитьИнформациюПоРеализациям();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродаж()
	
	СтараяВалюта = ВалютаДокумента;
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоУмолчанию();
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
	ВалютаДокумента = Объект.Валюта;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ВыполнитьПересчетСуммДокументаСервер(СтараяВалюта, ВалютаДокумента);
	ПриИзмененииХозяйственнойОперацииСервер();
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	УстановитьДоступностьКомандыПерезаполнитьПоПриемке();
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(ЧекККМ)
	
	Возврат РозничныеПродажи.ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(ЧекККМ);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	СтруктураДействийДобавленныеСтроки =  ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДействийИзмененныеСтроки);
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
	СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийДобавленныеСтроки.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	КонецЕсли;
	
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		"Номенклатура,Характеристика",
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийДобавленныеСтроки);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	ОбновитьИнформациюПоРеализациям();
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВозвратПереданнойМногооборотнойТарыПриИзмененииСервер()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ПолучитьСтруктуруЗависимыхРеквизитов());
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	РассчитатьИтоговыеПоказателиВозврата(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруЗависимыхРеквизитов()
	
	Возврат Новый Структура(
		"БезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с буфером обмена 

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	ХранилищаНастроек.ХранилищеБуфераОбмена.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре());
	
	ТаблицаТоваров = ХранилищаНастроек.ХранилищеБуфераОбмена.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
		СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВозвратПереданнойМногооборотнойТары);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ХранилищаНастроек.ХранилищеБуфераОбмена.БуферОбменаПустой() И НЕ ЗначениеЗаполнено(Объект.ЗаявкаНаВозвратТоваровОтКлиента));
		
	Иначе
		
		МассивЭлементов.Добавить("ТоварыСкопироватьСтроки");
		МассивЭлементов.Добавить("ТОварыКонтекстноеМенюСкопироватьСтроки");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ЗначениеЗаполнено(Объект.ЗаявкаНаВозвратТоваровОтКлиента));
	
КонецПроцедуры


