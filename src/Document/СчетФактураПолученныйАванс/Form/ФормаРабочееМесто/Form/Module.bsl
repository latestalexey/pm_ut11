////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Период = КонецКвартала(ТекущаяДата());
	
	КварталСтрока = УчетНДСКлиент.ДатаКакКварталПредставление(Период);
	
	ОтборСостояние = "ВсеВыплаченныеАвансы";
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получим значения констант
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Элементы.ТаблицаВыданныеАвансыСуммаАвансаРегл.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сумма (%1)'"), ВалютаРеглУчета);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КварталСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РезультатВыбора = УчетНДСКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, Период, ЭтаФорма);
	Если РезультатВыбора <> Неопределено Тогда
		КварталСтрока = РезультатВыбора;
		ПриИзмененииОтчетногоПериода();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КварталСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Период = ДобавитьМесяц(Период, 3*Направление);
	КварталСтрока = УчетНДСКлиент.ДатаКакКварталПредставление(Период);
	
	ПриИзмененииОтчетногоПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура КварталСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Период = ТекущаяДата();
	КварталСтрока = УчетНДСКлиент.ДатаКакКварталПредставление(Период);
	
	ПриИзмененииОтчетногоПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьДанныеФормы();	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ВЫДАННЫЕ АВАНСЫ

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	Если ОтборСостояние = "ТребуетсяРегистрацияСчетаФактуры" Тогда
		Элементы.ТаблицаВыданныеАвансы.ОтборСтрок = Новый ФиксированнаяСтруктура("СчетФактура",ПредопределенноеЗначение("Документ.СчетФактураПолученныйАванс.ПустаяСсылка"));
		ОтборПоставщик = Неопределено;
		//ОтборПоставщик = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Иначе
		Элементы.ТаблицаВыданныеАвансы.ОтборСтрок = Неопределено
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоставщикПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ОтборПоставщик) Тогда
		Элементы.ТаблицаВыданныеАвансы.ОтборСтрок = Неопределено
	Иначе	
		Элементы.ТаблицаВыданныеАвансы.ОтборСтрок = Новый ФиксированнаяСтруктура("Поставщик",ОтборПоставщик);
		ОтборСостояние = "ВсеВыплаченныеАвансы";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыданныеАвансыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Родитель = Элементы.ГруппаРеквизитыПлатежногоДокумента Тогда
		ОткрытьПлатежныйДокументАванс()
	Иначе	
	    ВвестиСчетФактуруПолученныйАванс();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВвестиСчетФактуруПолученныйАвансВыполнить(Команда)
	
	ВвестиСчетФактуруПолученныйАванс();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПлатежныйДокументАвансВыполнить(Команда)
	
	ОткрытьПлатежныйДокументАванс();
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьРасчеты(Команда)
	
	КодОтвета = Вопрос(НСтр("ru = 'Актуализировать расчеты с поставщиками?'"), РежимДиалогаВопрос.ДаНет);
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		АктуализироватьРасчетыСервер();
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Расчеты актуализированы'"),
			, // НавигационнаяСсылка
			НСтр("ru = 'Расчеты с поставщиками актуализированы'")
		);
		АктуальностьГраницыРасчетов = Истина;
		Элементы.ГруппаАктуальностьРасчетов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ПриИзмененииОтчетногоПериода()

	ОбновитьДанныеФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение данных формы

&НаСервере
Процедура ЗаполнитьВыданныеАвансы()

	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВыпискиПоРасчетномуСчету.Документ
	|ПОМЕСТИТЬ ВыпискиПоРасчетномуСчету
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКСписаниюБезналичные.ОстаткиИОбороты(&НачалоПериода, &ОкончаниеПериода, День, , Организация = &Организация) КАК ВыпискиПоРасчетномуСчету
	|ГДЕ
	|	ВыпискиПоРасчетномуСчету.СуммаКонечныйОстаток = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.РасчетныйДокумент КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|		ИНАЧЕ Расчеты.Валюта
	|	КОНЕЦ КАК ВалютаДокумента,
	|	СУММА(ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта = Константы.ВалютаРегламентированногоУчета
	|				ТОГДА Расчеты.ПредоплатаРеглПриход
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта = Константы.ВалютаРегламентированногоУчета
	|				ТОГДА Расчеты.ПредоплатаРеглПриход
	|			ИНАЧЕ Расчеты.ПредоплатаПриход
	|		КОНЕЦ) КАК ВалютнаяСумма,
	|	СУММА(Расчеты.ПредоплатаРеглПриход) КАК СуммаАвансаРегл,
	|	МАКСИМУМ(СчетФактураПолученныйАванс.Сумма) КАК СуммаАванса,
	|	АналитикаУчета.Контрагент КАК Поставщик,
	|	Расчеты.РасчетныйДокумент.Дата КАК Дата,
	|	Расчеты.РасчетныйДокумент.Номер КАК Номер,
	|	СчетФактураПолученныйАванс.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	СчетФактураПолученныйАванс.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	СчетФактураПолученныйАванс.Ссылка КАК СчетФактура
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Обороты(&НачалоПериода, &ОкончаниеПериода, Запись, НЕ АналитикаУчетаПоПартнерам В (&НеактуальныеРасчеты)) КАК Расчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|		ПО Расчеты.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйАванс КАК СчетФактураПолученныйАванс
	|		ПО Расчеты.РасчетныйДокумент = СчетФактураПолученныйАванс.ДокументОснование
	|			И (АналитикаУчета.Контрагент = СчетФактураПолученныйАванс.Контрагент)
	|			И (СчетФактураПолученныйАванс.Проведен)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыпискиПоРасчетномуСчету КАК ВыпискиПоРасчетномуСчету
	|		ПО (ВыпискиПоРасчетномуСчету.Документ = Расчеты.РасчетныйДокумент)
	|ГДЕ
	|	АналитикаУчета.Организация = &Организация
	|	И Расчеты.ПредоплатаПриход > 0
	|	И (НЕ ВыпискиПоРасчетномуСчету.Документ ЕСТЬ NULL 
	|			ИЛИ НЕ Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств)
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.РасчетныйДокумент,
	|	АналитикаУчета.Контрагент,
	|	Расчеты.РасчетныйДокумент.Дата,
	|	Расчеты.РасчетныйДокумент.Номер,
	|	СчетФактураПолученныйАванс.НомерВходящегоДокумента,
	|	СчетФактураПолученныйАванс.ДатаВходящегоДокумента,
	|	СчетФактураПолученныйАванс.Ссылка,
	|	ВЫБОР
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.РасходныйКассовыйОрдер
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.РасходныйКассовыйОрдер).Валюта
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.СписаниеБезналичныхДенежныхСредств).Валюта
	|		ИНАЧЕ Расчеты.Валюта
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер,
	|	ДокументОснование";
		
	Если АктуальностьГраницыРасчетов = Истина Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"НЕ АналитикаУчетаПоПартнерам В (&НеактуальныеРасчеты)"," ");	
	Иначе
		Запрос.УстановитьПараметр("НеактуальныеРасчеты", ПолучитьПоставшиковСНеактуальнымиРасчетами()); 
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация",		Организация);
	Запрос.УстановитьПараметр("НачалоПериода", 		НачалоКвартала(Период));
	Запрос.УстановитьПараметр("ОкончаниеПериода",	КонецКвартала(Период));
   	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ВыданныеАвансы.Загрузить(Результат);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПоставшиковСНеактуальнымиРасчетами()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПроведениеПоРасчетамСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	МИНИМУМ(ПроведениеПоРасчетамСПоставщиками.Период) КАК Период
	|ПОМЕСТИТЬ НачальныеДвижения
	|ИЗ
	|	Последовательность.ПроведениеПоРасчетамСПоставщиками КАК ПроведениеПоРасчетамСПоставщиками
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроведениеПоРасчетамСПоставщиками.АналитикаУчетаПоПартнерам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Границы.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачальныеДвижения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		ЕСТЬNULL(ПроведениеПоРасчетамСПоставщикамиГраницы.Период, НачальныеДвижения.Период) КАК АктуальныйПериод
	|	ИЗ
	|		НачальныеДвижения КАК НачальныеДвижения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.ПроведениеПоРасчетамСПоставщиками.Границы КАК ПроведениеПоРасчетамСПоставщикамиГраницы
	|			ПО НачальныеДвижения.АналитикаУчетаПоПартнерам = ПроведениеПоРасчетамСПоставщикамиГраницы.АналитикаУчетаПоПартнерам) КАК Границы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|		ПО Границы.АналитикаУчетаПоПартнерам = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
	|
	|СГРУППИРОВАТЬ ПО
	|	Границы.АналитикаУчетаПоПартнерам
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Границы.АктуальныйПериод) <= МАКСИМУМ(РасчетыСПоставщиками.Период) И
	|	МАКСИМУМ(Границы.АктуальныйПериод) <= &ТекущийПериод";
	
	Запрос.УстановитьПараметр("ТекущийПериод",КонецДня(Период));
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
	
	Возврат Результат
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Авансы выданные

&НаСервере
Процедура ОбновитьДанныеСтрокиВыданныхАвансов(ДокументОснование, Поставщик)
	
	РеквизитыСчетФактуры = Новый Структура;
	РеквизитыСчетФактуры.Вставить("НомерВходящегоДокумента", "");
	РеквизитыСчетФактуры.Вставить("ДатаВходящегоДокумента", '00010101');
	РеквизитыСчетФактуры.Вставить("СуммаАванса", 0);
	РеквизитыСчетФактуры.Вставить("СчетФактура", Неопределено);
	
	// Получим данные счета-фактуры
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СчетФактураПолученныйАванс.Ссылка КАК СчетФактура,
	               |	СчетФактураПолученныйАванс.НомерВходящегоДокумента,
	               |	СчетФактураПолученныйАванс.ДатаВходящегоДокумента,
	               |	СчетФактураПолученныйАванс.Сумма КАК СуммаАванса
	               |ИЗ
	               |	Документ.СчетФактураПолученныйАванс КАК СчетФактураПолученныйАванс
	               |ГДЕ
	               |	СчетФактураПолученныйАванс.ДокументОснование = &ДокументОснование
	               |	И СчетФактураПолученныйАванс.Контрагент = &Поставщик
	               |	И СчетФактураПолученныйАванс.Проведен";
	 
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("Поставщик",        Поставщик);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыСчетФактуры, Выборка);
	КонецЕсли; 
	
	// Аванс может быть в разных валютах, в этом случае будет несколько строк
	СписокАвансов = ВыданныеАвансы.НайтиСтроки(Новый Структура("ДокументОснование,Поставщик", ДокументОснование, Поставщик));
	Для каждого ЭлКоллекции Из СписокАвансов Цикл
		ЗаполнитьЗначенияСвойств(ЭлКоллекции, РеквизитыСчетФактуры);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиСчетФактуруПолученныйАванс()

	ТекущиеДанные = Элементы.ТаблицаВыданныеАвансы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.СчетФактура.Пустая() Тогда
		СтруктураОснования = Новый Структура;
		СтруктураОснования.Вставить("Организация",       Организация);
		СтруктураОснования.Вставить("ДокументОснование", ТекущиеДанные.ДокументОснование);
		СтруктураОснования.Вставить("Контрагент",        ТекущиеДанные.Поставщик);
		СтруктураОснования.Вставить("Валюта",            ВалютаРеглУчета);
		СтруктураОснования.Вставить("Дата",              ТекущиеДанные.Дата);
		СтруктураОснования.Вставить("Сумма",             ТекущиеДанные.СуммаАвансаРегл);
		
		ПараметрыФормы = Новый Структура("Основание", СтруктураОснования);
	Иначе
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.СчетФактура);
	КонецЕсли; 
	
	ОткрытьФормуМодально("Документ.СчетФактураПолученныйАванс.ФормаОбъекта", ПараметрыФормы);
	
	ОбновитьДанныеСтрокиВыданныхАвансов(ТекущиеДанные.ДокументОснование, ТекущиеДанные.Поставщик);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПлатежныйДокументАванс()

	ТекущиеДанные = Элементы.ТаблицаВыданныеАвансы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(ТекущиеДанные.ДокументОснование);
	
	ОткрытьФорму(ИмяТаблицы + ".ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.ДокументОснование))
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ОбновитьДанныеФормы()

	УстановитьАктуальностьГраницыРасчетов();
	
	ЗаполнитьВыданныеАвансы();
	
	Элементы.ТаблицаСписокСчетФактураПолученныйАванс.Период.ДатаНачала    = НачалоКвартала(Период);
	Элементы.ТаблицаСписокСчетФактураПолученныйАванс.Период.ДатаОкончания = КонецКвартала(Период);
	Элементы.ТаблицаСписокСчетФактураПолученныйАванс.Обновить();
	
	ЭлементыОтбора = СписокСчетФактураПолученныйАванс.Отбор.Элементы;
	ЭлементыОтбора[0].ПравоеЗначение = Организация;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАктуальностьГраницыРасчетов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПроведениеПоРасчетамСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	МИНИМУМ(ПроведениеПоРасчетамСПоставщиками.Период) КАК Период
	|ПОМЕСТИТЬ НачальныеДвиженияПоРасчетамСПоставщиками
	|ИЗ
	|	Последовательность.ПроведениеПоРасчетамСПоставщиками КАК ПроведениеПоРасчетамСПоставщиками
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючАналитикаУчетаПоПартнерам
	|		ПО ПроведениеПоРасчетамСПоставщиками.АналитикаУчетаПоПартнерам = КлючАналитикаУчетаПоПартнерам.КлючАналитики
	|ГДЕ
	|	КлючАналитикаУчетаПоПартнерам.Организация = &Организация
	|	И ПроведениеПоРасчетамСПоставщиками.Период <= &ТекущийПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроведениеПоРасчетамСПоставщиками.АналитикаУчетаПоПартнерам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ДОБАВИТЬКДАТЕ(Границы.АктуальныйПериод, ДЕНЬ, -1)) КАК АктуальныйПериод
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачальныеДвижения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		ЕСТЬNULL(ПроведениеПоРасчетамСПоставщикамиГраницы.Период, НачальныеДвижения.Период) КАК АктуальныйПериод
	|	ИЗ
	|		НачальныеДвиженияПоРасчетамСПоставщиками КАК НачальныеДвижения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.ПроведениеПоРасчетамСПоставщиками.Границы КАК ПроведениеПоРасчетамСПоставщикамиГраницы
	|			ПО НачальныеДвижения.АналитикаУчетаПоПартнерам = ПроведениеПоРасчетамСПоставщикамиГраницы.АналитикаУчетаПоПартнерам) КАК Границы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|		ПО Границы.АналитикаУчетаПоПартнерам = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Границы.АктуальныйПериод) <= МАКСИМУМ(РасчетыСПоставщиками.Период)";
	
	Запрос.УстановитьПараметр("Организация", 	Организация);					  
	Запрос.УстановитьПараметр("ТекущийПериод",  КонецКвартала(Период));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если НЕ ЗначениеЗаполнено(Выборка.АктуальныйПериод) Тогда
			АктуальностьГраницыРасчетов =  Истина
		Иначе	
			АктуальностьГраницыРасчетов = Ложь
	    КонецЕсли;	
   	Иначе
		АктуальностьГраницыРасчетов = Истина
	КонецЕсли;	
	
	Элементы.ГруппаАктуальностьРасчетов.Видимость = НЕ АктуальностьГраницыРасчетов;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура АктуализироватьРасчетыСервер()
	
	ВзаиморасчетыСервер.ВыполнитьПроведениеДокументовПоРасчетамСПоставщиками();
	ЗаполнитьВыданныеАвансы();
	
КонецПроцедуры