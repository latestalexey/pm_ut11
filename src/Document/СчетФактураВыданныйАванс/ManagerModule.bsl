#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает входящий номер и дату расчетного документа
//
// Параметры
//  ДокументСсылка	- ДокументСсылка - Документ входящий номер и дату которого требуется получить
//  Контрагент		- СправочникСсылка.Контрагенты - Контрагент табличной части "РасчетыСПартнерами" документа "ВводОстатков"
//
// Возвращаемое значение:
//   Структура   - содержит свойства "НомерПлатежноРасчетногоДокумента", "ДатаПлатежноРасчетногоДокумента"
//
Функция ВходящийНомерИДатаДокумента(ДокументСсылка, Контрагент = Неопределено) Экспорт
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("НомерПлатежноРасчетногоДокумента", "");
	СтруктураРезультата.Вставить("ДатаПлатежноРасчетногоДокумента" , '00010101');
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		СтруктураРезультата.Вставить("НомерПлатежноРасчетногоДокумента", ДокументСсылка.НомерВходящегоДокумента);
		СтруктураРезультата.Вставить("ДатаПлатежноРасчетногоДокумента" , ДокументСсылка.ДатаВходящегоДокумента);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		СтруктураРезультата.Вставить("НомерПлатежноРасчетногоДокумента", ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДокументСсылка.Номер, Ложь, Истина));
		СтруктураРезультата.Вставить("ДатаПлатежноРасчетногоДокумента" , ДокументСсылка.Дата);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВводОстатков") Тогда
		// Для ввода остатков данные хранятся в табличной части
		Если ЗначениеЗаполнено(Контрагент) И ТипЗнч(Контрагент)  = Тип("СправочникСсылка.Контрагенты") Тогда
			СтрокаАванса = ДокументСсылка.РасчетыСПартнерами.Найти(Контрагент, "Контрагент");
			Если СтрокаАванса <> Неопределено Тогда
				СтруктураРезультата.Вставить("НомерПлатежноРасчетногоДокумента", СтрокаАванса.НомерРасчетногоДокумента);
				СтруктураРезультата.Вставить("ДатаПлатежноРасчетногоДокумента" , СтрокаАванса.ДатаРасчетногоДокумента);
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;

КонецФункции 

// Возвращает список кодов видов операций,
//	предусмотренных законодательством.
//
// Возвращаемое значение:
//	СписокЗначений - Список кодов видов операций.
//
Функция СписокКодовВидовОпераций() Экспорт
	
	СписокКодов = Новый СписокЗначений;
	
	СписокКодов.Добавить("02", НСтр("ru='02 Авансы полученные'"));
	СписокКодов.Добавить("05", НСтр("ru='05 Авансы полученные за товары, работы, услуги комитента'"));
	СписокКодов.Добавить("06", НСтр("ru='06 Налоговый агент, статья 161 НК'"));
	СписокКодов.Добавить("12", НСтр("ru='12 Авансы полученные за товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК'"));
	
	Возврат СписокКодов;
	
КонецФункции

// Переформировывает движения счетов-фактур по регистрам НДСЗаписиКнигиПокупок и НДСЗаписиКнигиПродаж без перепроведения документа.
// Сбрасывает статус отражения в регл. учете.
//
// Параметры:
//	МассивДокументов - Массив - Документы, движения которых необходимо актуализировать.
//
Процедура СформироватьДвиженияПоКнигамПокупокПродаж(МассивРегистраторов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивДокументов = Новый Массив;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактура.Ссылка КАК Документ,
	|	СчетФактура.Дата КАК ДатаДокумента,
	|	СчетФактура.Организация КАК ОрганизацияДокумента,
	|	СчетФактура.Контрагент КАК Контрагент,
	|	СчетФактура.ДокументОснование КАК ДокументОснование,
	|	ЕСТЬNULL(СчетФактура.ДокументОснование.Дата, НЕОПРЕДЕЛЕНО) КАК ДатаОснования,
	|	СчетФактура.ПравилоОтбораАванса КАК ПравилоОтбораАванса
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК Расчеты
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураВыданныйАванс КАК СчетФактура
	|	ПО
	|		Расчеты.РасчетныйДокумент = СчетФактура.ДокументОснование
	|
	|ГДЕ
	|	Расчеты.Регистратор В (&МассивРегистраторов)
	|	И СчетФактура.Проведен
	|");
	Запрос.УстановитьПараметр("МассивРегистраторов", МассивРегистраторов);
	
	ЗапросТаблицыДвижений = Новый Запрос;
	ЗапросТаблицыДвижений.Текст = ТекстЗапросаТаблицаНДСЗаписиКнигиПродаж()
	                              + ТекстЗапросаТаблицаНДСЗаписиКнигиПокупок();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗапросТаблицыДвижений.УстановитьПараметр("Ссылка",         Выборка.Документ);
		ЗапросТаблицыДвижений.УстановитьПараметр("Период",         Выборка.ДатаДокумента);
		ЗапросТаблицыДвижений.УстановитьПараметр("Организация",    Выборка.ОрганизацияДокумента);
		ЗапросТаблицыДвижений.УстановитьПараметр("Покупатель",     Выборка.Контрагент);
		ЗапросТаблицыДвижений.УстановитьПараметр("ДокументОплаты", Выборка.ДокументОснование);
		ЗапросТаблицыДвижений.УстановитьПараметр("ДатаОснования",  Выборка.ДатаОснования);
		
		Результат = ЗапросТаблицыДвижений.ВыполнитьПакет();
		
		ТаблицаНДСЗаписиКнигиПродаж = Результат[0].Выгрузить();
		ТаблицаНДСЗаписиКнигиПокупок = ВыполнитьЗачетАванса(
			Результат[0].Выгрузить(),
			Результат[1].Выгрузить(),
			Выборка);
		
		НачатьТранзакцию();
		
		НаборЗаписейКнигиПродаж = РегистрыНакопления.НДСЗаписиКнигиПродаж.СоздатьНаборЗаписей();
		НаборЗаписейКнигиПродаж.Отбор.Регистратор.Установить(Выборка.Документ);
		НаборЗаписейКнигиПродаж.Загрузить(ТаблицаНДСЗаписиКнигиПродаж);
		НаборЗаписейКнигиПродаж.УстановитьАктивность(Истина);
		НаборЗаписейКнигиПродаж.Записать();
		
		НаборЗаписейКнигиПокупок = РегистрыНакопления.НДСЗаписиКнигиПокупок.СоздатьНаборЗаписей();
		НаборЗаписейКнигиПокупок.Отбор.Регистратор.Установить(Выборка.Документ);
		НаборЗаписейКнигиПокупок.Загрузить(ТаблицаНДСЗаписиКнигиПокупок);
		НаборЗаписейКнигиПокупок.УстановитьАктивность(Истина);
		НаборЗаписейКнигиПокупок.Записать();
		
		ЗафиксироватьТранзакцию();
		
		МассивДокументов.Добавить(Выборка.Документ);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение по регл. учету

Функция ТекстОтраженияВРеглУчете() Экспорт
	
	ТекстНачислениеНДС = "
		|ВЫБРАТЬ // Начисление НДС с полученного аванса <Дт 76.АВ :: Кт 68.02>
		|	Операция.Дата КАК Период,
		|	Операция.Организация КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
		|
		|	ЕСТЬNULL(Регистр.НДС,0) КАК Сумма,
		|
		|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
		|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
		|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
		|
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеДт,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам) КАК СчетДт,
		|
		|	Операция.Контрагент КАК СубконтоДт1,
		|	Операция.ДокументОснование КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|
		|	0 КАК ВалютнаяСуммаДт,
		|	0 КАК КоличествоДт,
		|	0 КАК СуммаНУДт,
		|	0 КАК СуммаПРДт,
		|	0 КАК СуммаВРДт,
		|
		|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
		|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
		|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
		|
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеКт,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС) КАК СчетКт,
		|
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК СубконтоКт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|
		|	0 КАК ВалютнаяСуммаКт,
		|	0 КАК КоличествоКт,
		|	0 КАК СуммаНУКт,
		|	0 КАК СуммаПРКт,
		|	0 КАК СуммаВРКт
		|ИЗ
		|	Документ.СчетФактураВыданныйАванс КАК Операция
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.НДСЗаписиКнигиПродаж КАК Регистр
		|	ПО
		|		Регистр.Регистратор = Операция.Ссылка
		|ГДЕ
		|	Операция.Ссылка = &Ссылка
		|";
	ТекстВычетНДС = "
		|ВЫБРАТЬ // Вычет НДС с полученного аванса <Дт 68.02 :: Кт 76.АВ>
		|	ЕСТЬNULL(Регистр.Период, Операция.Дата) КАК Период,
		|	Операция.Организация КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
		|
		|	ЕСТЬNULL(Регистр.НДС,0) КАК Сумма,
		|
		|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
		|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
		|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
		|
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеДт,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДС) КАК СчетДт,
		|
		|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК СубконтоДт1,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
		|
		|	0 КАК ВалютнаяСуммаДт,
		|	0 КАК КоличествоДт,
		|	0 КАК СуммаНУДт,
		|	0 КАК СуммаПРДт,
		|	0 КАК СуммаВРДт,
		|
		|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
		|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
		|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
		|
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеКт,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам) КАК СчетКт,
		|
		|	Операция.Контрагент КАК СубконтоКт1,
		|	Операция.ДокументОснование КАК СубконтоКт2,
		|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
		|
		|	0 КАК ВалютнаяСуммаКт,
		|	0 КАК КоличествоКт,
		|	0 КАК СуммаНУКт,
		|	0 КАК СуммаПРКт,
		|	0 КАК СуммаВРКт
		|ИЗ
		|	Документ.СчетФактураВыданныйАванс КАК Операция
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.НДСЗаписиКнигиПокупок КАК Регистр
		|	ПО
		|		Регистр.Регистратор = Операция.Ссылка
		|ГДЕ
		|	Операция.Ссылка = &Ссылка
		|";
			   	
	Возврат
		ТекстНачислениеНДС
		+ " ОБЪЕДИНИТЬ ВСЕ " + ТекстВычетНДС;
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Период,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеДокумента.ДокументОснование КАК ДокументОснование,
		|	ДанныеДокумента.ПравилоОтбораАванса,
		|	ЕСТЬNULL(ДанныеДокумента.ДокументОснование.Дата, НЕОПРЕДЕЛЕНО) КАК ДатаОснования,
		|	ДанныеДокумента.ДатаВыставления,
		|	ДанныеДокумента.Номер,
		|	ДанныеДокумента.Дата,
		|	ДанныеДокумента.КодВидаОперации,
		|	ДанныеДокумента.ВыставленВЭлектронномВиде
		|ИЗ
		|	Документ.СчетФактураВыданныйАванс КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка";
		
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
			
	Запрос.УстановитьПараметр("Организация",				Реквизиты.Организация);
	Запрос.УстановитьПараметр("Покупатель",					Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("ДокументОплаты",				Реквизиты.ДокументОснование);
	Запрос.УстановитьПараметр("ДатаОснования",				Реквизиты.ДатаОснования);
	Запрос.УстановитьПараметр("ДатаВыставления",			Реквизиты.ДатаВыставления);
	Запрос.УстановитьПараметр("Номер",						ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Реквизиты.Номер, Истина, Истина));
	Запрос.УстановитьПараметр("Период",						Реквизиты.Период);
	Запрос.УстановитьПараметр("КодВидаОперации",			Реквизиты.КодВидаОперации);
	Запрос.УстановитьПараметр("ВыставленВЭлектронномВиде",	Реквизиты.ВыставленВЭлектронномВиде);
	Запрос.УстановитьПараметр("Валюта", 					Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.Текст = 	ТекстЗапросаТаблицаЖурналУчетаСчетовФактур()
					+ ТекстЗапросаТаблицаНДСЗаписиКнигиПродаж ()
					+ ТекстЗапросаТаблицаНДСЗаписиКнигиПокупок()
					;

	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	ТаблицыДляДвижений.Вставить("ТаблицаЖурналУчетаСчетовФактур",   Результат[0].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаНДСЗаписиКнигиПродаж", 		Результат[1].Выгрузить());
	ТаблицыДляДвижений.Вставить("ТаблицаНДСЗаписиКнигиПокупок", 	ВыполнитьЗачетАванса(
		Результат[1].Выгрузить(), 
		Результат[2].Выгрузить(), 
		Реквизиты)
	);
		
КонецПроцедуры

Функция ТекстЗапросаТаблицаЖурналУчетаСчетовФактур()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	&Покупатель КАК Контрагент,
	|	ТаблицаАвансы.Ссылка КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры) КАК ЧастьЖурнала,
	|	&ДатаВыставления КАК ДатаВыставленияПолучения,
	|	ВЫБОР
	|		КОГДА &ВыставленВЭлектронномВиде
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КодСпособаВыставленияПолучения,
	|	&КодВидаОперации КАК КодВидаОперации,
	|	&Номер КАК НомерСчетаФактуры,
	|	&Период КАК ДатаСчетаФактуры,
	|	&Валюта КАК Валюта,	
	|	СУММА(ТаблицаАвансы.Сумма) КАК СуммаПоСчетуФактуре,
	|	СУММА(ТаблицаАвансы.СуммаНДС) КАК СуммаНДС,
	|	0 КАК СуммаПоСчетуФактуреРазницаУменьшение,
	|	0 КАК СуммаПоСчетуФактуреРазницаУвеличение,
	|	0 КАК СуммаНДСРазницаУменьшение,
	|	0 КАК СуммаНДСРазницаУвеличение,
	|	ЛОЖЬ КАК ПоСтавкеБезНДС,
	|	ЛОЖЬ КАК СчетФактураНеВыставляется
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс.Авансы КАК ТаблицаАвансы
	|ГДЕ
	|	ТаблицаАвансы.Ссылка = &Ссылка
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаАвансы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНДСЗаписиКнигиПродаж()
	
	ТекстЗапроса ="
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(&ДокументОплаты) = ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств)
	|				ИЛИ ТИПЗНАЧЕНИЯ(&ДокументОплаты) = ТИП(Документ.ОперацияПоПлатежнойКарте)
	|			ТОГДА ЕСТЬNULL(ВыпискаБанка.ДатаВыписки, &ДатаОснования)
	|		ИНАЧЕ &ДатаОснования
	|	КОНЕЦ КАК Период,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные) КАК ВидЦенности,
	|	&ДокументОплаты КАК СчетФактура,
	|	&Покупатель КАК Покупатель,
	|	&ДокументОплаты КАК ДокументОплаты,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(&ДокументОплаты) = ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств)
	|				ИЛИ ТИПЗНАЧЕНИЯ(&ДокументОплаты) = ТИП(Документ.ОперацияПоПлатежнойКарте)
	|			ТОГДА ЕСТЬNULL(ВыпискаБанка.ДатаВыписки, &ДатаОснования)
	|		ИНАЧЕ &ДатаОснования
	|	КОНЕЦ КАК ДатаОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПродажи.ПолученАванс) КАК Событие,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(&ДокументОплаты) = ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств)
	|				ИЛИ ТИПЗНАЧЕНИЯ(&ДокументОплаты) = ТИП(Документ.ОперацияПоПлатежнойКарте)
	|			ТОГДА ЕСТЬNULL(ВыпискаБанка.ДатаВыписки, &ДатаОснования)
	|		ИНАЧЕ &ДатаОснования
	|	КОНЕЦ КАК ДатаСобытия,
	|	ТаблицаАвансы.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаАвансы.СуммаНДС КАК НДС,
	|	ВЫБОР
	|		КОГДА ТаблицаАвансы.Сумма = 0
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаАвансы.Сумма - ТаблицаАвансы.СуммаНДС
	|	КОНЕЦ КАК СуммаБезНДС
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс.Авансы КАК ТаблицаАвансы,
	|	(ВЫБРАТЬ
	|		МИНИМУМ(ДенежныеСредстваКПоступлениюБезналичныеОстаткиИОбороты.Период) КАК ДатаВыписки
	|	ИЗ
	|		РегистрНакопления.ДенежныеСредстваКПоступлениюБезналичные.ОстаткиИОбороты(
	|				,
	|				,
	|				День,
	|				,
	|				Документ = &ДокументОплаты
	|					И Организация = &Организация) КАК ДенежныеСредстваКПоступлениюБезналичныеОстаткиИОбороты
	|	ГДЕ
	|		ДенежныеСредстваКПоступлениюБезналичныеОстаткиИОбороты.СуммаКонечныйОстаток = 0) КАК ВыпискаБанка
	|ГДЕ
	|	ТаблицаАвансы.Ссылка = &Ссылка
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаНДСЗаписиКнигиПокупок()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиПоДокументамОбороты.Период КАК Период,
	|	&Организация КАК Организация,
	|	РасчетыСКлиентамиПоДокументамОбороты.АналитикаУчетаПоПартнерам.Контрагент КАК Поставщик,
	|	&ДокументОплаты КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные) КАК ВидЦенности,
	|	РасчетыСКлиентамиПоДокументамОбороты.Период КАК ДатаОплаты,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияПоНДСПокупки.ПредъявленНДСКВычету) КАК Событие,
	|	РасчетыСКлиентамиПоДокументамОбороты.Период КАК ДатаСобытия,
	|	ВЫБОР 
	|		КОГДА РасчетыСКлиентамиПоДокументамОбороты.ПредоплатаРеглПриход > 0
	|			ТОГДА РасчетыСКлиентамиПоДокументамОбороты.ПредоплатаРеглПриход
	|		КОГДА РасчетыСКлиентамиПоДокументамОбороты.ПредоплатаРеглРасход < 0
	|			ТОГДА -РасчетыСКлиентамиПоДокументамОбороты.ПредоплатаРеглРасход
	|	КОНЕЦ КАК СуммаЗачета
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			АналитикаУчетаПоПартнерам.Организация = &Организация
	|				И РасчетныйДокумент = &ДокументОплаты) КАК РасчетыСКлиентамиПоДокументамОбороты
	|ГДЕ
	|	(РасчетыСКлиентамиПоДокументамОбороты.ПредоплатаРеглПриход > 0
	|		ИЛИ РасчетыСКлиентамиПоДокументамОбороты.ПредоплатаРеглРасход < 0)
	|	И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Печать

Функция ПолучитьДанныеДляПечатнойФормыСчетФактура(ПараметрыПечати, МассивОбъектов) Экспорт 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьУслуги,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|				(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьТовары
	|ПОМЕСТИТЬ НоменклатураДокументов
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс.Авансы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивДокументов)
	|	И ТаблицаТовары.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетФактура.Ссылка КАК Ссылка,
	|	&ПредставлениеСчетФактура КАК ПредставлениеДокумента,
	|	СчетФактура.Номер КАК Номер,
	|	СчетФактура.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправления,
	|	ЛОЖЬ КАК Исправление,
	|	НЕОПРЕДЕЛЕНО КАК НомерСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК ДатаСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправленияСчетаФактуры,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправленияСчетаФактуры,
	|	ЛОЖЬ КАК КорректировочныйСчетФактура,
	|	СчетФактура.СтрокаПлатежноРасчетныеДокументы КАК СтрокаПоДокументу,
	|	&ВалютаРеглУчета КАК ВалютаСчетаФактуры,
	|	СчетФактура.Контрагент КАК Контрагент,
	|	СчетФактура.Организация КАК Организация,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	СчетФактура.Организация.Префикс КАК Префикс,
	|	ВЫБОР
	|		КОГДА СчетФактура.Организация.ОбособленноеПодразделение
	|			ТОГДА СчетФактура.Организация.ЦифровойИндексОбособленногоПодразделения
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексПодразделения,
	|	СчетФактура.Контрагент КАК Грузополучатель,
	|	СчетФактура.ДокументОснование.Номер КАК НомерПлатежноРасчетногоДокумента,
	|	СчетФактура.ДокументОснование.Дата КАК ДатаПлатежноРасчетногоДокумента,
	|	СчетФактура.Организация КАК Грузоотправитель,
	|	ЛОЖЬ КАК ВыводитьКППГрузоотправителя,
	|	НЕОПРЕДЕЛЕНО КАК АдресДоставки,
	|	&ВалютаРеглУчета КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаНаименованиеПолное,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКод,
	|	ВЫБОР
	|		КОГДА НоменклатураДокументов.ЕстьУслуги
	|				И НЕ НоменклатураДокументов.ЕстьТовары
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТолькоУслуги,
	|	ЛОЖЬ КАК ЭтоПередачаНаКомиссию
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс КАК СчетФактура
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураДокументов КАК НоменклатураДокументов
	|		ПО СчетФактура.Ссылка = НоменклатураДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО СчетФактура.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	СчетФактура.Ссылка В(&МассивДокументов)
	|	И СчетФактура.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.НоменклатураНаименование КАК НоменклатураНаименование,
	|	НЕОПРЕДЕЛЕНО КАК Характеристика,
	|	"""" КАК ХарактеристикаНаименование,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	"""" КАК НомерГТД,
	|	"""" КАК СтранаПроисхождения,
	|	"""" КАК СтранаПроисхожденияКод,
	|	0 КАК Количество,
	|	0 КАК Цена,
	|	0 КАК СуммаБезНДС,
	|	СУММА(ВложенныйЗапрос.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ВложенныйЗапрос.Сумма) КАК СуммаСНДС,
	|	МАКСИМУМ(ВложенныйЗапрос.НомерСтроки) КАК НомерСтроки,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ВЫБОР
	|			КОГДА (ВЫРАЗИТЬ(ТаблицаТовары.Содержание КАК СТРОКА(1))) <> """"
	|				ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Содержание КАК СТРОКА(100))
	|			КОГДА ТаблицаТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ТОГДА ТаблицаТовары.Номенклатура.НаименованиеПолное
	|			ИНАЧЕ ""Предварительная оплата""
	|		КОНЕЦ КАК НоменклатураНаименование,
	|		ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		Документ.СчетФактураВыданныйАванс.Авансы КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка В(&МассивДокументов)
	|		И ТаблицаТовары.Ссылка.Проведен) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.НоменклатураНаименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Запрос.УстановитьПараметр("ВалютаРеглУчета", ВалютаРеглУчета);
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("ПредставлениеСчетФактура", НСтр("ru='счет-фактура'"));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатПоШапке          = МассивРезультатов[1];
	РезультатПоТабличнойЧасти = МассивРезультатов[2];
	
	СтруктураДанныхДляПечати 	= Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти, СчетФактураНаАванс",
	                                               РезультатПоШапке, РезультатПоТабличнойЧасти, Истина);
	
	Возврат СтруктураДанныхДляПечати;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

Функция ВыполнитьЗачетАванса(ТаблицаАванса, ТаблицаЗачетАванса, Реквизиты)
	
	ТаблицаЗаписиКнигиПокупок = РегистрыНакопления.НДСЗаписиКнигиПокупок.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ТаблицаЗаписиКнигиПокупок.Колонки.Удалить("Активность");
	
	Если ТаблицаАванса.Количество() = 0 Тогда
		Возврат ТаблицаЗаписиКнигиПокупок
	КонецЕсли;
	
	ДатаПоступленияАванса = ТаблицаАванса[0].Период;	
	
	Для Каждого ПогашенныйАвансПоСФ Из ТаблицаЗачетАванса Цикл
		
		//Отбор лишних зачетов аванса
		ДатаЗачетаАванса = ПогашенныйАвансПоСФ.Период;
		
		Если Реквизиты.ПравилоОтбораАванса = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеПятиДней Тогда
			
			Если (КонецДня(ДатаЗачетаАванса) - НачалоДня(ДатаПоступленияАванса)) < (4 * 86400) Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли Реквизиты.ПравилоОтбораАванса = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеМесяца Тогда 
			
			Если КонецДня(ДатаЗачетаАванса) < КонецМесяца(ДатаПоступленияАванса) Тогда
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли Реквизиты.ПравилоОтбораАванса = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеНалоговогоПериода Тогда 
			
			Если КонецДня(ДатаЗачетаАванса) < КонецКвартала(ДатаПоступленияАванса) Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		//Определение сумм для зачета
		МассивСуммаБезНДС = Новый Массив();
		МассивСуммаНДС = Новый Массив();
		
		СуммаБезНДС = 0;
		СуммаНДС = 0;
		
		Для Каждого СтрокаАванса Из ТаблицаАванса Цикл
			
			МассивСуммаБезНДС.Добавить(СтрокаАванса.СуммаБезНДС);
			МассивСуммаНДС.Добавить(СтрокаАванса.НДС);

			СуммаБезНДС = СуммаБезНДС + СтрокаАванса.СуммаБезНДС;
			СуммаНДС = СуммаНДС + СтрокаАванса.НДС;
			
		КонецЦикла; 

		СуммаСНДС = Мин(ПогашенныйАвансПоСФ.СуммаЗачета, (СуммаБезНДС+СуммаНДС));
		Если СуммаСНДС = 0 Тогда
			Продолжить;
		КонецЕсли;

		СуммаБезНДС = Окр(СуммаБезНДС * СуммаСНДС/(СуммаБезНДС + СуммаНДС),2);
		СуммаНДС = СуммаСНДС - СуммаБезНДС;
			
		Если СуммаБезНДС > 0 Тогда
			МассивСуммаБезНДС = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(СуммаБезНДС, МассивСуммаБезНДС);
		КонецЕсли;
		
		Если СуммаНДС > 0 Тогда
			МассивСуммаНДС = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(СуммаНДС, МассивСуммаНДС);
		КонецЕсли; 
		
		Счетчик =0;
		
		//Зачет аванса - записи книги покупок
		Для Каждого СтрокаАванса Из ТаблицаАванса Цикл
			
			Если ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик], 0) = 0 
				И ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик], 0) = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаРезультата = ТаблицаЗаписиКнигиПокупок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, ПогашенныйАвансПоСФ);
			
			СтрокаРезультата.СчетФактура	= СтрокаАванса.СчетФактура;
			СтрокаРезультата.Поставщик		= СтрокаАванса.Покупатель;
			СтрокаРезультата.СтавкаНДС		= СтрокаАванса.СтавкаНДС;

			СтрокаРезультата.СуммаБезНДС	= ?(СуммаБезНДС > 0, МассивСуммаБезНДС[Счетчик],0);
			СтрокаРезультата.НДС			=  ?(СуммаНДС > 0, МассивСуммаНДС[Счетчик],0);

			Счетчик = Счетчик + 1;
			
		КонецЦикла; 
	КонецЦикла;
	
	Возврат ТаблицаЗаписиКнигиПокупок;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

Процедура ЗаполнитьПравилоОтбораАвансов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактура.Ссылка КАК СчетФактура,
	|	ЕСТЬNULL(НастройкаУчетаНДС.ПорядокРегистрацииСчетовФактурНаАванс,ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы)) КАК Порядок,
	|	НастройкаУчетаНДС.Период КАК Период
	|ИЗ
	|	Документ.СчетФактураВыданныйАванс КАК СчетФактура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьНастройкаУчетаНДС КАК НастройкаУчетаНДС
	|		ПО СчетФактура.Организация = НастройкаУчетаНДС.Организация
	|			И СчетФактура.Дата >= НастройкаУчетаНДС.Период
	|ГДЕ
	|	СчетФактура.ПравилоОтбораАванса = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.ПустаяСсылка)
	|	И СчетФактура.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ
	|ИТОГИ ПО
	|	СчетФактура";
	
	ВыборкаСчетФактура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСчетФактура.Следующий() Цикл
		Выборка = ВыборкаСчетФактура.Выбрать();
		Выборка.Следующий();
		ДокументОбъект = Выборка.СчетФактура.ПолучитьОбъект();
		ДокументОбъект.ПравилоОтбораАванса = Выборка.Порядок;
		Попытка
			ДокументОбъект.Записать()
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли
