////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьЗначенияПоУмолчанию();
		
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получим значения констант
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТаблицаНеиспользуемыеСчетаФактуры.Параметры.УстановитьЗначениеПараметра("НеиспользуемыеСчетаФактуры", Новый Массив);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КварталСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РезультатВыбора = УчетНДСКлиент.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, Период, ЭтаФорма);
	Если РезультатВыбора <> Неопределено Тогда
		КварталСтрока = РезультатВыбора;
		ПриИзмененииОтчетногоПериода();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КварталСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Период = ДобавитьМесяц(Период, 3*Направление);
	КварталСтрока = УчетНДСКлиент.ДатаКакКварталПредставление(Период);
	
	ПриИзмененииОтчетногоПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура КварталСтрокаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Период = ТекущаяДата();
	КварталСтрока = УчетНДСКлиент.ДатаКакКварталПредставление(Период);
	
	ПриИзмененииОтчетногоПериода();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ПОЛУЧЕННЫЕ АВАНСЫ

&НаКлиенте
Процедура ПолученныеАвансыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПолученныеАвансы.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеАвансыСуммаАвансаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПолученныеАвансы.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	ТекущаяСтрока.ВалютнаяСумма = ТекущаяСтрока.Сумма;
	
	// Проверим валюту, если она отличается от валюты регл. учета, то пересчитаем суммы
	ВалютаДанных = ТекущаяСтрока.ВалютаДокумента;
	Если ЗначениеЗаполнено(ВалютаДанных)
		И ВалютаДанных <> ВалютаРеглУчета Тогда
		
		ПолученныеАвансыСуммаАвансаПриИзмененииСервер(
			ВалютаРеглУчета,
			ВалютаДанных,
			ТекущаяСтрока.ДатаДокументаОснования,
			ТекущаяСтрока.Сумма,
			ТекущаяСтрока.ВалютнаяСумма
		);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеАвансыВалютнаяСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПолученныеАвансы.ТекущиеДанные;
	
	ТекущаяСтрока.Сумма = ТекущаяСтрока.ВалютнаяСумма;
	
	// Проверим валюту, если она отличается от валюты регл. учета, то пересчитаем суммы
	ВалютаДанных = ТекущаяСтрока.ВалютаДокумента;
	Если ЗначениеЗаполнено(ВалютаДанных)
		И ВалютаДанных <> ВалютаРеглУчета Тогда
		
		ПолученныеАвансыВалютнаяСуммаПриИзмененииСервер(
			ВалютаРеглУчета,
			ВалютаДанных,
			ТекущаяСтрока.ДатаДокументаОснования, 
			ТекущаяСтрока.ВалютнаяСумма,
			ТекущаяСтрока.Сумма
		);
	КонецЕсли; 

	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученныеАвансыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если (Поле = Элементы.ПолученныеАвансыСчетФактура ИЛИ Поле.Родитель = Элементы.ПолученныеАвансыГруппаСФ) Тогда
		
		ТекущийСчетФактура = Элемент.ТекущиеДанные.СчетФактура;
		Если ЗначениеЗаполнено(ТекущийСчетФактура) Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьЗначение(ТекущийСчетФактура);
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ НЕИСПОЛЬЗОВАННЫЕ СЧЕТА-ФАКТУРЫ

&НаКлиенте
Процедура НеиспользуемыеСчетаФактурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущийДокумент = Элемент.ТекущиеДанные.СчетФактура;
	
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
		ОткрытьЗначение(ТекущийДокумент);		
    КонецЕсли;
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьПолученныеАвансы(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ЗаполнитьПолученныеАвансыНаСервере();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСчетаФактуры(Команда)
	
	ФормированиеСчетовФактур();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНеиспользуемыеСчетаФактуры(Команда)
	
	УдалитьНеиспользуемыеСчетаФактурыСервер();	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСчетФактуру(Команда)
	
	ДанныеАванса = Элементы.ПолученныеАвансы.ТекущиеДанные;
	
	Если ДанныеАванса = Неопределено Тогда
		Предупреждение(НСтр("ru = 'Необходимо выбрать полученный аванс!'"));
	Иначе
		ФормированиеСчетовФактур(ДанныеАванса.ПолучитьИдентификатор())
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтавкуНДС18_118(Команда)
	
	УстановитьСтавкуНДС("18%");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтавкуНДС10_110(Команда)
	
	УстановитьСтавкуНДС("10%");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ПриИзмененииОтчетногоПериода()

	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолученныеАвансыСуммаАвансаПриИзмененииСервер(ВалютаРеглУчета, ВалютаДанных, ДатаДокументаОснования, Сумма, ВалютнаяСумма)
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		ВалютаДанных,
		ДатаДокументаОснования
	);
	ВалютнаяСумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		Сумма,
		ВалютаРеглУчета,
		ВалютаДанных,
		1, СтруктураКурса.Курс,
		1, СтруктураКурса.Кратность
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолученныеАвансыВалютнаяСуммаПриИзмененииСервер(ВалютаРеглУчета, ВалютаДанных, ДатаДокументаОснования, ВалютнаяСумма, Сумма)
	
	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(
		ВалютаДанных,
		ДатаДокументаОснования
	);
	Сумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		ВалютнаяСумма,
		ВалютаДанных,
		ВалютаРеглУчета,
		СтруктураКурса.Курс, 1,
		СтруктураКурса.Кратность, 1
	);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Заполнение формы

&НаСервере
Процедура ЗаполнитьПолученныеАвансыНаСервере()
	
	//Актуализация расчетов с клиентами
	ВзаиморасчетыСервер.ВыполнитьПроведениеДокументовПоРасчетамСКлиентами();
	
	ПолученныеАвансы.Очистить();
	
	// Получим список счетов-фактур
	ЗаполнитьАвансы();
	ТаблицаНеиспользуемыеСчетаФактуры.Параметры.УстановитьЗначениеПараметра("НеиспользуемыеСчетаФактуры", НеиспользуемыеСчетаФактуры.ВыгрузитьЗначения());

КонецПроцедуры

&НаСервере
Функция ЗаполнитьАвансы()
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачалоПериода = НачалоКвартала(Период);
	КонецПериода  = КонецКвартала(Период);
		
	ВыпискиПоРасчетномуСчету = ПолучитьВыпискиПоРасчетномуСчету(НачалоПериода, КонецПериода);
	
	ИсключаемыеСчетаФактуры = Новый Массив;
		
	ВозможныйТипДокументаОснования = Метаданные.Документы.СчетФактураВыданныйАванс.Реквизиты.ДокументОснование.Тип;
	СписокРасчетныхДокументовПоКоторымНеЗарегистрированаСФ = Новый Массив;
		
	Результат = ПолучитьРезультатЗапросаПоАвансам(НачалоПериода, КонецПериода);
	
	//Выборка по дням
	ВыборкаДень = Результат.Выбрать(ОбходРезультатазапроса.ПоГруппировкам);
	
	//Проверяем ежеденевный результат авансов
	Пока ВыборкаДень.Следующий() Цикл
		
		ВыборкаДокумент = ВыборкаДень.Выбрать(ОбходРезультатазапроса.ПоГруппировкам);
		//Проверяем каждый аванс в рамках одного дня
		Пока ВыборкаДокумент.Следующий() Цикл
			
			Если ВыборкаДокумент.ДокументОснование = NULL Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаАванс = ВыборкаДокумент.Выбрать(); 
			//Берем только последнее состояние аванса на текущий день
			Если ВыборкаАванс.Следующий() Тогда
				
				//Проверяем если аванс уже зарегистрирован
				Если ИсключаемыеСчетаФактуры.Найти(ВыборкаАванс.ДокументОснование) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;	
				
				СформироватьСФ = Ложь;
				
				// Получим дату аванса
				ТипРасчетногоДокумента = ТипЗнч(ВыборкаАванс.ДокументОснование);
				Если ТипРасчетногоДокумента = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
					ИЛИ ТипРасчетногоДокумента = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
					
					СтрокаВыписки = ВыпискиПоРасчетномуСчету.Найти(ВыборкаАванс.ДокументОснование, "Документ");
					Если СтрокаВыписки = Неопределено Тогда
						// В этом периоде не было выписки по расчетному счету
						Продолжить;
					КонецЕсли; 
					ДатаПоступленияАванса = КонецДня(СтрокаВыписки.ДатаПолученияВыписки);
				Иначе	
					ДатаПоступленияАванса = КонецДня(ВыборкаАванс.ДатаДокументаОснования);
				КонецЕсли; 
				
				//Исключаем авансы других периодов
				Если ДатаПоступленияАванса < КонецДня(НачалоПериода)
					ИЛИ ДатаПоступленияАванса > КонецПериода Тогда
						Продолжить
				КонецЕсли;		
				
				// Согласно настройке определим необходимость регистрации с/ф
				Если ПравилаОтбораПолученныхАвансов = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы Тогда
					
					СформироватьСФ = ?(ВыборкаАванс.ВалютнаяСумма > 0, Истина, Ложь);
					ДатаЗачетаАванса = ДатаПоступленияАванса;
					
				ИначеЕсли ПравилаОтбораПолученныхАвансов = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеПятиДней Тогда
					
					Если КонецДня(ВыборкаАванс.Период) >= КонецКвартала(ДатаПоступленияАванса)
						ИЛИ (КонецДня(ВыборкаАванс.Период) - НачалоДня(ДатаПоступленияАванса)) >= (4 * 86400) Тогда
						
						СформироватьСФ = ?(ВыборкаАванс.ВалютнаяСумма > 0, Истина, Ложь);
						Если КонецДня(ДатаПоступленияАванса+345600) > КонецКвартала(ДатаПоступленияАванса) Тогда
							// Дата поступления аванса раньше менее чем на пять дней меньше конца квартала
							ДатаЗачетаАванса = КонецКвартала(ДатаПоступленияАванса);
						Иначе
							// На пятый день после поступления аванса
							ДатаЗачетаАванса = КонецДня(ДатаПоступленияАванса + 345600);
						КонецЕсли;
					КонецЕсли;
					
				ИначеЕсли ПравилаОтбораПолученныхАвансов = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеМесяца Тогда 
					
					Если КонецДня(ВыборкаАванс.Период) >= КонецМесяца(ДатаПоступленияАванса) Тогда
						СформироватьСФ = ?(ВыборкаАванс.ВалютнаяСумма > 0, Истина, Ложь);
						ДатаЗачетаАванса = КонецМесяца(ДатаПоступленияАванса);
					КонецЕсли;
					
				ИначеЕсли ПравилаОтбораПолученныхАвансов = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеНалоговогоПериода Тогда 
					
					Если КонецДня(ВыборкаАванс.Период) >= КонецКвартала(ДатаПоступленияАванса) Тогда
						СформироватьСФ = ?(ВыборкаАванс.ВалютнаяСумма > 0, Истина, Ложь);
						ДатаЗачетаАванса = КонецКвартала(ДатаПоступленияАванса);
					КонецЕсли;
					
				КонецЕсли;
				
				//Добавим в табличную часть
				Если СформироватьСФ Тогда
					Если ВозможныйТипДокументаОснования.СодержитТип(ТипЗнч(ВыборкаАванс.ДокументОснование)) Тогда
						НоваяСтрока = ПолученныеАвансы.Добавить();
						
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаАванс);
						
						Если ЗначениеЗаполнено(НоваяСтрока.СчетФактура) Тогда
							НоваяСтрока.СФсформирован = Истина 
						Иначе
							НоваяСтрока.СФсформирован = Ложь
						КонецЕсли;	
						
						Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
							НоваяСтрока.СтавкаНДС = СтавкаНДС;
						КонецЕсли; 
						
						Если НоваяСтрока.ДатаВыписки = '00010101' Тогда
							НоваяСтрока.ДатаВыписки = ДатаЗачетаАванса;
						КонецЕсли;
						
						НоваяСтрока.СуммаНДС  = Ценообразование.РассчитатьСуммуНДС(НоваяСтрока.Сумма, НоваяСтрока.СтавкаНДС);
					ИначеЕсли СписокРасчетныхДокументовПоКоторымНеЗарегистрированаСФ.Найти(ВыборкаАванс.ДокументОснование) = Неопределено Тогда
						СписокРасчетныхДокументовПоКоторымНеЗарегистрированаСФ.Добавить(ВыборкаАванс.ДокументОснование);
					КонецЕсли;
					
					ИсключаемыеСчетаФактуры.Добавить(ВыборкаАванс.ДокументОснование);
					
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьНеиспользуемыеСчетаФактуры();
	
	// Сообщим пользователю, что есть расчетные документы по которым не получилось сформировать счет-фактуру
	Для каждого ЭлКоллекции Из СписокРасчетныхДокументовПоКоторымНеЗарегистрированаСФ Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для документа не предусмотрена регистрация счета-фактуры: %1'"), ЭлКоллекции);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭлКоллекции);
	КонецЦикла; 
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПолучитьРезультатЗапросаПоАвансам(НачалоПериода, КонецПериода)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПериоды.ПериодДень
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	&Периоды КАК ТаблицаПериоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.Период КАК Период,
	|	Расчеты.РасчетныйДокумент КАК ДокументОснование,
	|	Расчеты.РасчетныйДокумент.Дата КАК ДатаДокументаОснования,
	|	ВЫБОР
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта
	|		ИНАЧЕ Расчеты.Валюта
	|	КОНЕЦ КАК ВалютаДокумента,
	|	СУММА(-ВЫБОР
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта = &ВалютаРеглУчета
	|				ТОГДА Расчеты.ПредоплатаРеглКонечныйОстаток
	|			КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					И ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта = &ВалютаРеглУчета
	|				ТОГДА Расчеты.ПредоплатаРеглКонечныйОстаток
	|			ИНАЧЕ Расчеты.ПредоплатаКонечныйОстаток - Расчеты.КВозвратуКонечныйОстаток
	|		КОНЕЦ) КАК ВалютнаяСумма,
	|	СУММА(-Расчеты.ПредоплатаРеглКонечныйОстаток) КАК Сумма,
	|	СУММА(Расчеты.ПредоплатаРасход + Расчеты.КВозвратуРасход) КАК СуммаАванса,
	|	АналитикаУчетаПоПартнерамДанные.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(СчетФактураВыданныйАванс.Ссылка, ЗНАЧЕНИЕ(Документ.СчетФактураВыданныйАванс.ПустаяСсылка)) КАК СчетФактура,
	|	ЕСТЬNULL(СчетФактураВыданныйАванс.Сумма, 0) КАК СуммаСчетаФактуры,
	|	ЕСТЬNULL(СчетФактураВыданныйАванс.Дата, &ПустаяДата) КАК ДатаВыписки
	|ПОМЕСТИТЬ ВТДанные
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, , АналитикаУчетаПоПартнерам.Организация = &Организация) КАК Расчеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерамДанные
	|		ПО Расчеты.АналитикаУчетаПоПартнерам = АналитикаУчетаПоПартнерамДанные.КлючАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданныйАванс КАК СчетФактураВыданныйАванс
	|		ПО Расчеты.РасчетныйДокумент = СчетФактураВыданныйАванс.ДокументОснование
	|			И (АналитикаУчетаПоПартнерамДанные.Контрагент = СчетФактураВыданныйАванс.Контрагент)
	|			И (НЕ СчетФактураВыданныйАванс.ПометкаУдаления)
	|ГДЕ
	|	Расчеты.ПредоплатаРеглОборот <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.Период,
	|	Расчеты.РасчетныйДокумент,
	|	Расчеты.РасчетныйДокумент.Дата,
	|	ВЫБОР
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПриходныйКассовыйОрдер).Валюта
	|		КОГДА Расчеты.РасчетныйДокумент ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|			ТОГДА ВЫРАЗИТЬ(Расчеты.РасчетныйДокумент КАК Документ.ПоступлениеБезналичныхДенежныхСредств).Валюта
	|		ИНАЧЕ Расчеты.Валюта
	|	КОНЕЦ,
	|	АналитикаУчетаПоПартнерамДанные.Контрагент,
	|	ЕСТЬNULL(СчетФактураВыданныйАванс.Ссылка, ЗНАЧЕНИЕ(Документ.СчетФактураВыданныйАванс.ПустаяСсылка)),
	|	ЕСТЬNULL(СчетФактураВыданныйАванс.Сумма, 0),
	|	ЕСТЬNULL(СчетФактураВыданныйАванс.Дата, &ПустаяДата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТПериоды.ПериодДень КАК Период,
	|	ВТДанные.Период КАК ПериодАванса,
	|	ВТДанные.ДокументОснование КАК ДокументОснование,
	|	ВТДанные.ДатаДокументаОснования,
	|	ВТДанные.ВалютаДокумента,
	|	ВТДанные.ВалютнаяСумма,
	|	ВТДанные.Сумма,
	|	ВТДанные.СуммаАванса,
	|	ВТДанные.Контрагент,
	|	ВТДанные.СчетФактура,
	|	ВТДанные.СуммаСчетаФактуры,
	|	ВТДанные.ДатаВыписки
	|ИЗ
	|	ВТПериоды КАК ВТПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанные КАК ВТДанные
	|		ПО ВТПериоды.ПериодДень >= ВТДанные.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	ДокументОснование,
	|	ПериодАванса УБЫВ
	|ИТОГИ ПО
	|	Период,
	|	ДокументОснование
	|АВТОУПОРЯДОЧИВАНИЕ"
	;
	
	ОписаниеТиповД = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("ПериодДень",ОписаниеТиповД);
	
	ТекущийДень 	= НачалоДня(НачалоПериода);
	ПоследнийДень 	= НачалоДня(КонецПериода);
	
	Пока ТекущийДень <= ПоследнийДень Цикл
		НоваяСтрока = ТаблицаПериодов.Добавить();
		НоваяСтрока.ПериодДень = ТекущийДень;
		ТекущийДень = ТекущийДень + 86400;
	КонецЦикла;	
	
	Запрос.УстановитьПараметр("Периоды",		ТаблицаПериодов);
	Запрос.УстановитьПараметр("НачалоПериода",	НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",	КонецПериода);
	Запрос.УстановитьПараметр("ПустаяДата",		'00010101');
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ВалютаРеглУчета",ВалютаРеглУчета);
    	
	Результат = Запрос.Выполнить();
    	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНеиспользуемыеСчетаФактуры()
	
	НеиспользуемыеСчетаФактуры.Очистить();
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СчетФактураВыданныйАванс.Ссылка КАК Ссылка,
	               |	СчетФактураВыданныйАванс.ДокументОснование
	               |ИЗ
	               |	Документ.СчетФактураВыданныйАванс КАК СчетФактураВыданныйАванс
	               |ГДЕ
	               |	СчетФактураВыданныйАванс.Организация = &Организация
	               |	И СчетФактураВыданныйАванс.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И НЕ СчетФактураВыданныйАванс.ПометкаУдаления";
	 
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(Период));
	Запрос.УстановитьПараметр("КонецПериода",  КонецКвартала(Период));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура("ДокументОснование", Выборка.ДокументОснование);
		Если ПолученныеАвансы.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
			НоваяСтрока = НеиспользуемыеСчетаФактуры.Добавить(Выборка.Ссылка);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВыпискиПоРасчетномуСчету(НачалоПериода, КонецПериода)

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДенежныеСредстваКПоступлениюБезналичныеОстаткиИОбороты.Документ,
	               |	МИНИМУМ(ДенежныеСредстваКПоступлениюБезналичныеОстаткиИОбороты.Период) КАК ДатаПолученияВыписки
	               |ИЗ
	               |	РегистрНакопления.ДенежныеСредстваКПоступлениюБезналичные.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, День, , Организация = &Организация) КАК ДенежныеСредстваКПоступлениюБезналичныеОстаткиИОбороты
	               |ГДЕ
	               |	ДенежныеСредстваКПоступлениюБезналичныеОстаткиИОбороты.СуммаКонечныйОстаток = 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДенежныеСредстваКПоступлениюБезналичныеОстаткиИОбороты.Документ";
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Документ");
	
	Возврат Результат;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка данных формы

&НаКлиенте
Процедура ФормированиеСчетовФактур(ТекущийАванс = Неопределено)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущийАванс = Неопределено Тогда
		СформироватьСчетаФактурыНаСервере()
	Иначе
		Если НЕ СоздатьСчетФактуруНаАванс(ТекущийАванс) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось сформировать счет-фактуру на аванс'"),
				,
				,
				"Объект");	
		КонецЕсли;
	КонецЕсли;	
		
	ОповеститьОбИзменении(Тип("ДокументСсылка.СчетФактураВыданныйАванс"));
	
	ПоказатьОповещениеПользователя("Завершено формирование с/ф на аванс");
	
КонецПроцедуры	

&НаСервере
Функция СформироватьСчетаФактурыНаСервере()
	
	ЕстьОшибки = Ложь;
	
	Для каждого ДанныеСчетФактуры Из ПолученныеАвансы Цикл
		
		Если ДанныеСчетФактуры.Сумма = ДанныеСчетФактуры.СуммаСчетаФактуры Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСчетФактуры.СФсформирован = Ложь;
		Если НЕ СоздатьСчетФактуруНаАванс(ДанныеСчетФактуры) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось сформировать счет-фактуру на основании документа %1'"), ДанныеСчетФактуры.ДокументОснование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				,
				"Объект");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НЕ ЕстьОшибки;

КонецФункции

&НаСервере
Функция СоздатьСчетФактуруНаАванс(Знач ДанныеСчетФактуры) 
	
	Если ТипЗнч(ДанныеСчетФактуры) = Тип("Число") Тогда
		ДанныеСчетФактуры = ПолученныеАвансы.НайтиПоИдентификатору(ДанныеСчетФактуры)
	КонецЕсли;	
	
	Если ДанныеСчетФактуры.Сумма = ДанныеСчетФактуры.СуммаСчетаФактуры 
			И ДанныеСчетФактуры.СФсформирован Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДанныеСчетФактуры.СчетФактура.Пустая() Тогда
		СчетФактураОбъект = Документы.СчетФактураВыданныйАванс.СоздатьДокумент();
		СчетФактураОбъект.Организация = Организация;
		СчетФактураОбъект.КодВидаОперации = "02";
		СчетФактураОбъект.ПравилоОтбораАванса = ПравилаОтбораПолученныхАвансов;
	Иначе
		СчетФактураОбъект = ДанныеСчетФактуры.СчетФактура.ПолучитьОбъект();
	КонецЕсли; 
	
	// Заполним реквизиты документа данными из строки аванса
	ЗаполнитьЗначенияСвойств(СчетФактураОбъект, ДанныеСчетФактуры,, "Сумма,СуммаНДС");
	СчетФактураОбъект.Дата = КонецДня(ДанныеСчетФактуры.ДатаВыписки);
	СчетФактураОбъект.ПравилоОтбораАванса = ПравилаОтбораПолученныхАвансов;
	
	ДанныеОснования = Документы.СчетФактураВыданныйАванс.ВходящийНомерИДатаДокумента(ДанныеСчетФактуры.ДокументОснование, ДанныеСчетФактуры.Контрагент);
	ЗаполнитьЗначенияСвойств(СчетФактураОбъект, ДанныеОснования);
	
	// Перезаполним суммы с/ф если они отличаются
	Если СчетФактураОбъект.Сумма <> ДанныеСчетФактуры.Сумма
		ИЛИ СчетФактураОбъект.СуммаНДС <> ДанныеСчетФактуры.СуммаНДС Тогда
		
		СчетФактураОбъект.Авансы.Очистить();
		
		НоваяСтрокаАванса = СчетФактураОбъект.Авансы.Добавить();
		НоваяСтрокаАванса.Сумма     = ДанныеСчетФактуры.Сумма;
		НоваяСтрокаАванса.СтавкаНДС = ДанныеСчетФактуры.СтавкаНДС;
		НоваяСтрокаАванса.СуммаНДС  = ДанныеСчетФактуры.СуммаНДС;
	КонецЕсли; 
	
	// Проведем счет-фактуру
	Попытка
		СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки; 
	
	// Обновим сведения о счете-фактуре
	ДанныеСчетФактуры.СФсформирован = Истина;
	ДанныеСчетФактуры.СуммаСчетаФактуры = СчетФактураОбъект.Сумма;
	ДанныеСчетФактуры.СчетФактура   = СчетФактураОбъект.Ссылка;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УдалитьНеиспользуемыеСчетаФактурыСервер()
	
	Для каждого ДанныеСчетФактуры Из НеИспользуемыеСчетаФактуры Цикл
		Попытка
			ДокументОбъект = ДанныеСчетФактуры.Значение.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
		КонецПопытки; 
	КонецЦикла; 
	
	ТаблицаНеиспользуемыеСчетаФактуры.Параметры.УстановитьЗначениеПараметра("НеиспользуемыеСчетаФактуры", Новый Массив);
	
	Элементы.СписокСчетФактураВыданный.Обновить();
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура УстановитьСтавкуНДС(ТекстСтавкаНДС)
	
	Если Элементы.ПолученныеАвансы.ВыделенныеСтроки.Количество() = 0 Тогда
		// Пользователь не выбрал строки
		Возврат;
	КонецЕсли; 
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='В выбранных строках будет установлена ставка НДС ""%1"". Продолжить?'"),
		ТекстСтавкаНДС);
		
	Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	Если ТекстСтавкаНДС = "10%" Тогда
		ТекСтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110")
	Иначе
		ТекСтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118")
	КонецЕсли;
	
	ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекСтавкаНДС);
	Для каждого ИндексСтроки Из Элементы.ПолученныеАвансы.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.ПолученныеАвансы.ДанныеСтроки(ИндексСтроки);
		Если ДанныеСтроки.СтавкаНДС <> ТекСтавкаНДС Тогда
			ДанныеСтроки.СтавкаНДС = ТекСтавкаНДС;
			
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, Неопределено);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначенияПоУмолчанию()
	
	Период = ТекущаяДата();
	КварталСтрока = УчетНДСКлиент.ДатаКакКварталПредставление(Период);
	
	Если НЕ ЗначениеЗаполнено(СтавкаНДС) Тогда
		СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118");
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ПравилаОтбораПолученныхАвансов) Тогда
		ПравилаОтбораПолученныхАвансов = ПредопределенноеЗначение("Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы");
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДанныеФормы()

	Элементы.СписокСчетФактураВыданный.Период.ДатаНачала = НачалоКвартала(Период);
	Элементы.СписокСчетФактураВыданный.Период.ДатаОкончания = КонецКвартала(Период);
	Элементы.СписокСчетФактураВыданный.Обновить();
	
	ЭлементыОтбора = СписокСчетФактураВыданныйАванс.Отбор.Элементы;
	ЭлементыОтбора[0].ПравоеЗначение = Организация;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ()

	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("ЦенаВключаетНДС", Истина);
	
	Возврат СтруктураЗаполненияЦены;

КонецФункции
