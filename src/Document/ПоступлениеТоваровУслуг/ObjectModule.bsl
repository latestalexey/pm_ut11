#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет условия продаж в заказе поставщику
//
// Параметры:
//	УсловияЗакупок - Структура - Структура для заполнения
//
Процедура ЗаполнитьУсловияЗакупок(Знач УсловияЗакупок) Экспорт
	
	Если УсловияЗакупок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта               = УсловияЗакупок.Валюта;
	ВалютаВзаиморасчетов = УсловияЗакупок.Валюта;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Организация) И УсловияЗакупок.Организация <> Организация Тогда
		Организация = УсловияЗакупок.Организация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Склад) Тогда
		Склад = УсловияЗакупок.Склад;
		СтруктураОтветственного = ЗакупкиСервер.ПолучитьОтветственногоПоСкладу(Склад, Менеджер);
		Если СтруктураОтветственного <> Неопределено Тогда
			Принял = СтруктураОтветственного.Ответственный;
			ПринялДолжность = СтруктураОтветственного.ОтветственныйДолжность;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Контрагент) И УсловияЗакупок.Контрагент <> Контрагент Тогда
		Контрагент = УсловияЗакупок.Контрагент;
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Если ЗначениеЗаполнено(УсловияЗакупок.ХозяйственнаяОперация) Тогда
		ХозяйственнаяОперация = УсловияЗакупок.ХозяйственнаяОперация;
	КонецЕсли;
	
	ХозяйственнаяОперацияДоговора = ?(
		ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет")
		Или ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо"),
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика"),
		ХозяйственнаяОперация
	);
	
	Если УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов Тогда
		
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
			Договор,
			Партнер,
			Контрагент,
			Организация,
			ХозяйственнаяОперацияДоговора,
			ВалютаВзаиморасчетов,
			Соглашение
		);
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
		
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокРасчетов");
		
	Иначе
		
		ПорядокРасчетов = УсловияЗакупок.ПорядокРасчетов;
		
	КонецЕсли;
	
	ЗаполнитьУсловияРасчетов(УсловияЗакупок);
	
	Если ЗначениеЗаполнено(УсловияЗакупок.ГруппаФинансовогоУчета) Тогда
		ГруппаФинансовогоУчета = УсловияЗакупок.ГруппаФинансовогоУчета;
	КонецЕсли;
	
	ЦенаВключаетНДС           = УсловияЗакупок.ЦенаВключаетНДС;
	НалогообложениеНДС        = УсловияЗакупок.НалогообложениеНДС;
	ВернутьМногооборотнуюТару = УсловияЗакупок.ВозвращатьМногооборотнуюТару;
	
	ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
		Дата,
		УсловияЗакупок.СрокВозвратаМногооборотнойТары,
		УсловияЗакупок.РассчитыватьДатуВозвратаТарыПоКалендарю);
		
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Склад) Тогда
		ЗакупкаПодДеятельность = Справочники.Организации.НалогообложениеНДС(Организация, Склад, Дата);
	КонецЕсли; 
	
	РегистрироватьЦеныПоставщика = УсловияЗакупок.РегистрироватьЦеныПоставщика;
	
КонецПроцедуры

// Заполняет условия закупок по торговому соглашению с поставщиком
//
// Параметры:
//	ПересчитатьЦены - Булево - Истина, если необходимо пересчитать цены в табличной части документа
//
Процедура ЗаполнитьУсловияЗакупокПоУмолчанию(ПересчитатьЦены = Истина) Экспорт
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		УсловияЗакупокПоУмолчанию = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(
			Партнер,
			Новый Структура("УчитыватьГруппыСкладов,ИсключитьГруппыСкладовДоступныеВЗаказах,ВыбранноеСоглашение", Истина, Истина, Соглашение)
		);
		
		ЦеныЗаполнены = Ложь;
		
		Если УсловияЗакупокПоУмолчанию <> Неопределено Тогда
			
			Если Соглашение <> УсловияЗакупокПоУмолчанию.Соглашение
				И ЗначениеЗаполнено(УсловияЗакупокПоУмолчанию.Соглашение) Тогда
			
				Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
				ЗаполнитьУсловияЗакупок(УсловияЗакупокПоУмолчанию);
				
				Если ПересчитатьЦены И ЗначениеЗаполнено(Соглашение) Тогда
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
					ЦеныЗаполнены = ЗакупкиСервер.ЗаполнитьЦены(
						Товары,
						, // Массив строк
						Новый Структура( // Параметры заполнения
							"ПоляЗаполнения, Дата, Валюта, Соглашение",
							"Цена, СтавкаНДС, УсловиеЦеныПоставщика",
							Дата,
							Валюта,
							Соглашение
						),
						Новый Структура( // Структура действий с измененныими строками
							"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ПересчитатьСуммуСУчетомРучнойСкидки",
							"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Новый Структура("Очищать", Ложь)
						)
					);
					
				КонецЕсли;
					
			Иначе
				Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
			КонецЕсли;
			
			БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, , БанковскийСчетОрганизации);
			
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
			Соглашение = Неопределено;
		КонецЕсли;
		
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по соглашению в заказе поставщику
//
// Параметры:
//	ПересчитатьЦены - Булево - Истина, если необходимо пересчитать цены в табличной части документа
//
Процедура ЗаполнитьУсловияЗакупокПоCоглашению(ПересчитатьЦены = Истина) Экспорт
	
	УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(Соглашение, Истина, Истина);
	ЗаполнитьУсловияЗакупок(УсловияЗакупок);
	
	Если ПересчитатьЦены Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
		ЗакупкиСервер.ЗаполнитьЦены(
			Товары,
			, // Массив строк
			Новый Структура( // Параметры заполнения
				"ПоляЗаполнения, Дата, Валюта, Соглашение",
				"Цена, СтавкаНДС, УсловиеЦеныПоставщика",
				Дата,
				Валюта,
				Соглашение
			),
			Новый Структура( // Структура действий с измененныими строками
				"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ПересчитатьСуммуСУчетомРучнойСкидки",
				"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Новый Структура("Очищать", Ложь)
			)
		);
	КонецЕсли;
	
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, , БанковскийСчетОрганизации);
	
КонецПроцедуры

// Заполняет табличную часть Расхождения
//
// Параметры:
//	ЕстьИзлишки - Булево - Переменная, в которую помещается признак наличия излишков
//	ЕстьНедостачи - Булево - Переменная, в которую помещается признак наличия недостач
//
// Возвращаемое значение:
//	Булево - Истина, если есть отличия по сравнению с предыдущим составом табличной части
//
Функция ЗаполнитьРасхождения(ЕстьИзлишки = Ложь, ЕстьНедостачи = Ложь) Экспорт
	
	Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Валюта, ВалютаВзаиморасчетов, Дата);
	
	Если ЗначениеЗаполнено(Склад) Тогда
		СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументоЗакупки(Склад);
	Иначе
		СкладГруппа = Ложь;
	КонецЕсли;
		
	ЕстьОтличия = Ложь;
	
	//Создаем таблицу расхождений товаров по табличным частям Товары и ТоварыПоДаннымПоставщика
	Если Товары.Количество() = 0 Тогда
		
		Расхождения.Загрузить(ТоварыПоДаннымПоставщика.Выгрузить());
		
		Для каждого ТекСтрока Из Расхождения Цикл
			ТекСтрока.ВариантРасхождений = Перечисления.ВариантыРасхождений.Недостачи;
			ТекСтрока.СуммаВзаиморасчетов = ТекСтрока.СуммаСНДС * Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов;
		КонецЦикла;
		
	Иначе
		
		ТипСумма  = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой));
		ТипКоличество  = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Любой));
		
		ТаблицаРасхождений = Новый ТаблицаЗначений();
		ТаблицаРасхождений.Колонки.Добавить("НомерСтрокиДокументаПоставщика", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5, 0, ДопустимыйЗнак.Неотрицательный)));
		ТаблицаРасхождений.Колонки.Добавить("НоменклатураПоставщика",         Новый ОписаниеТипов("СправочникСсылка.НоменклатураПоставщиков"));
		ТаблицаРасхождений.Колонки.Добавить("Номенклатура",                   Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаРасхождений.Колонки.Добавить("Характеристика",                 Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаРасхождений.Колонки.Добавить("Упаковка",                       Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
		ТаблицаРасхождений.Колонки.Добавить("КоличествоУпаковок",             ТипКоличество);
		ТаблицаРасхождений.Колонки.Добавить("Количество",                     ТипКоличество);
		ТаблицаРасхождений.Колонки.Добавить("УсловиеЦеныПоставщика",          Новый ОписаниеТипов("СправочникСсылка.УсловияЦенПоставщиков"));
		ТаблицаРасхождений.Колонки.Добавить("Цена",                           Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
		ТаблицаРасхождений.Колонки.Добавить("Сумма",                          ТипСумма);
		ТаблицаРасхождений.Колонки.Добавить("СтавкаНДС",                      Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
		ТаблицаРасхождений.Колонки.Добавить("СуммаНДС",                       ТипСумма);
		ТаблицаРасхождений.Колонки.Добавить("СуммаСНДС",                      ТипСумма);
		ТаблицаРасхождений.Колонки.Добавить("СуммаВзаиморасчетов",            ТипСумма);
		ТаблицаРасхождений.Колонки.Добавить("СуммаНДСВзаиморасчетов",         ТипСумма);
		ТаблицаРасхождений.Колонки.Добавить("КодСтроки",                      Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
		ТаблицаРасхождений.Колонки.Добавить("Склад",                          Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ТаблицаРасхождений.Колонки.Добавить("ЗаказПоставщику",                Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
		ТаблицаРасхождений.Колонки.Добавить("ВариантРасхождений",             Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыРасхождений"));
		ТаблицаРасхождений.Колонки.Добавить("ВариантОтраженияРасхождений",    Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОтраженияРасхождений"));
		
		//Добавляем табличную часть Товары в таблицу расхождений
		Для Каждого ТекСтрока Из Товары Цикл
			
			НоваяСтрока = ТаблицаРасхождений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			Если ТекСтрока.СуммаРучнойСкидки <> 0 И ТекСтрока.КоличествоУпаковок <> 0 Тогда
				НоваяСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.КоличествоУпаковок;
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ТекСтрока Из ТоварыПоДаннымПоставщика Цикл
			
			НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("НомерСтрокиДокументаПоставщика", ТекСтрока.НомерСтроки));
			ТаблицаПоФакту = Товары.Выгрузить(НайденныеСтроки, "Склад,ЗаказПоставщику,КодСтроки,Упаковка,Количество,КоличествоУпаковок,Сумма,СуммаНДС,СуммаСНДС,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов");
			ТаблицаПоФакту.Свернуть("Склад,ЗаказПоставщику,КодСтроки,Упаковка", "Количество,КоличествоУпаковок,Сумма,СуммаНДС,СуммаСНДС,СуммаВзаиморасчетов,СуммаНДСВзаиморасчетов");
			ТаблицаПоФакту.Сортировать("Количество Возр, КодСтроки Возр");
			
			КоличествоПоДаннымПоставщика = ТекСтрока.Количество;
			СуммаРасхожденийВСтроке = ТекСтрока.СуммаСНДС;
			СуммаРасхожденийНДСВСтроке = ТекСтрока.СуммаНДС;
			
			Если ТекСтрока.КоличествоУпаковок = 0 Тогда
				КоэффициентУпаковкиПоДаннымПоставщика = 1;
			Иначе
				КоэффициентУпаковкиПоДаннымПоставщика = ТекСтрока.Количество / ТекСтрока.КоличествоУпаковок;
			КонецЕсли;
			
			//Добавляем Товары по факту в таблицу расхождений с противоположным знаком
			Для Каждого СтрокаПоФакту Из ТаблицаПоФакту Цикл
				
				КоличествоПоДаннымПоставщика = КоличествоПоДаннымПоставщика - СтрокаПоФакту.Количество;
				
				НоваяСтрока = ТаблицаРасхождений.Добавить();
				
				НоваяСтрока.Склад           = СтрокаПоФакту.Склад;
				НоваяСтрока.КодСтроки       = СтрокаПоФакту.КодСтроки;
				НоваяСтрока.ЗаказПоставщику = СтрокаПоФакту.ЗаказПоставщику;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.НомерСтрокиДокументаПоставщика = ТекСтрока.НомерСтроки;
				
				Если КоличествоПоДаннымПоставщика < 0 Тогда
					
					НоваяСтрока.Количество             = -(КоличествоПоДаннымПоставщика + СтрокаПоФакту.Количество);
					НоваяСтрока.КоличествоУпаковок     = НоваяСтрока.Количество / КоэффициентУпаковкиПоДаннымПоставщика;
					Ценообразование.ПересчитатьСуммыВСтроке(НоваяСтрока, Ложь, Ложь, Ложь, ЦенаВключаетНДС);
					НоваяСтрока.СуммаВзаиморасчетов    = НоваяСтрока.СуммаСНДС * СтрокаПоФакту.СуммаВзаиморасчетов / СтрокаПоФакту.СуммаСНДС;
					НоваяСтрока.СуммаНДСВзаиморасчетов = НоваяСтрока.СуммаСНДС * СтрокаПоФакту.СуммаНДСВзаиморасчетов / СтрокаПоФакту.СуммаСНДС;
					СуммаРасхожденийВСтроке            = СуммаРасхожденийВСтроке + НоваяСтрока.СуммаСНДС;
					СуммаРасхожденийНДСВСтроке         = СуммаРасхожденийНДСВСтроке + НоваяСтрока.СуммаНДС;
					Прервать;
					
				Иначе
					
					НоваяСтрока.Количество             = -СтрокаПоФакту.Количество;
					НоваяСтрока.КоличествоУпаковок     = НоваяСтрока.Количество / КоэффициентУпаковкиПоДаннымПоставщика;
					Ценообразование.ПересчитатьСуммыВСтроке(НоваяСтрока, Ложь, Ложь, Ложь, ЦенаВключаетНДС);
					Если СтрокаПоФакту.СуммаСНДС <> 0 Тогда
						НоваяСтрока.СуммаВзаиморасчетов    = СтрокаПоФакту.СуммаВзаиморасчетов * НоваяСтрока.СуммаСНДС / СтрокаПоФакту.СуммаСНДС;
						НоваяСтрока.СуммаНДСВзаиморасчетов = СтрокаПоФакту.СуммаНДСВзаиморасчетов * НоваяСтрока.СуммаСНДС / СтрокаПоФакту.СуммаСНДС;
					Иначе
						НоваяСтрока.СуммаВзаиморасчетов    = 0;
						НоваяСтрока.СуммаНДСВзаиморасчетов = 0;
					КонецЕсли;
					СуммаРасхожденийВСтроке            = СуммаРасхожденийВСтроке + НоваяСтрока.СуммаСНДС;
					СуммаРасхожденийНДСВСтроке         = СуммаРасхожденийНДСВСтроке + НоваяСтрока.СуммаНДС;
					
				КонецЕсли;
				
			КонецЦикла;
			
			//Добавляем расхождения в таблицу расхождений с противоположным знаком
			НоваяСтрока = ТаблицаРасхождений.Добавить();
			
			Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
				НоваяСтрока.ЗаказПоставщику = ЗаказПоставщику;
			КонецЕсли;
			
			Если Не СкладГруппа Тогда
				НоваяСтрока.Склад = Склад;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.НомерСтрокиДокументаПоставщика = ТекСтрока.НомерСтроки;
			
			НоваяСтрока.СуммаСНДС =-СуммаРасхожденийВСтроке;
			НоваяСтрока.СуммаНДС  =-СуммаРасхожденийНДСВСтроке;
			НоваяСтрока.Сумма     = НоваяСтрока.СуммаСНДС - ?(ЦенаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
			
			Если КоличествоПоДаннымПоставщика > 0 Тогда
				НоваяСтрока.Количество         = -КоличествоПоДаннымПоставщика;
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество / КоэффициентУпаковкиПоДаннымПоставщика;
			Иначе
				НоваяСтрока.Количество         = 0;
				НоваяСтрока.КоличествоУпаковок = 0;
			КонецЕсли;

		КонецЦикла;
		
		ТаблицаРасхождений.Свернуть(
			"НомерСтрокиДокументаПоставщика,
			|НоменклатураПоставщика,
			|Номенклатура,
			|Характеристика,
			|Упаковка,
			|УсловиеЦеныПоставщика,
			|Цена,
			|СтавкаНДС,
			|ВариантРасхождений,
			|ВариантОтраженияРасхождений,
			|КодСтроки,
			|Склад,
			|ЗаказПоставщику"
			,
			"КоличествоУпаковок,
			|Количество,
			|Сумма,
			|СуммаНДС,
			|СуммаСНДС,
			|СуммаВзаиморасчетов,
			|СуммаНДСВзаиморасчетов
			|"
		);
		
		//Удаляем строки с нулевым количеством
		ПараметрыОтбора = Новый Структура("Количество",0);
		НайденныеСтроки = ТаблицаРасхождений.НайтиСтроки(ПараметрыОтбора);
		
		Для каждого ТекСтрока Из НайденныеСтроки Цикл
			ТаблицаРасхождений.Удалить(ТекСтрока);
		КонецЦикла;
		
		Если ТаблицаРасхождений.Количество() = 0 Тогда
			Расхождения.Очистить();
			Возврат Ложь;
		КонецЕсли;
		
		РазличияТаблиц = ТаблицаРасхождений.СкопироватьКолонки();
		
		СуммаСНДСРасхождения = ТаблицаРасхождений.Итог("СуммаСНДС");
		СуммаРасхождения = ТаблицаРасхождений.Итог("Сумма");
		СуммаНДСРасхождения = ТаблицаРасхождений.Итог("СуммаНДС");
		
		//Добавляем в таблицу Различия таблиц данные из таблицы расхождений с противоположным знаком и определяем вариант расхождений
		Для каждого ТекСтрока Из ТаблицаРасхождений Цикл
			
			Если ТекСтрока.СуммаСНДС < 0 Тогда
				
				ТекСтрока.ВариантРасхождений = Перечисления.ВариантыРасхождений.Недостачи;
				ЕстьНедостачи = Истина;
				
				ТекСтрока.КоличествоУпаковок = -ТекСтрока.КоличествоУпаковок;
				ТекСтрока.Количество         = -ТекСтрока.Количество;
				ТекСтрока.Сумма              = -ТекСтрока.Сумма;
				ТекСтрока.СуммаНДС           = -ТекСтрока.СуммаНДС;
				ТекСтрока.СуммаСНДС          = -ТекСтрока.СуммаСНДС;
				ТекСтрока.КодСтроки          = 0;
				
			Иначе
				
				ТекСтрока.ВариантРасхождений = Перечисления.ВариантыРасхождений.Излишки;
				ЕстьИзлишки = Истина;
				
			КонецЕсли;
			
			ТекСтрока.СуммаВзаиморасчетов = ТекСтрока.СуммаСНДС * Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов;
			
			ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекСтрока.СтавкаНДС);
			
			ТекСтрока.СуммаНДСВзаиморасчетов = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекСтрока.СуммаВзаиморасчетов, ТекПроцентНДС);
			
			НоваяСтрока = РазличияТаблиц.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока,,
				?(ТекСтрока.ВариантРасхождений=Перечисления.ВариантыРасхождений.Недостачи, "ЗаказПоставщику, Склад, КодСтроки", "")
			);
			
		КонецЦикла;
		
		//Распределяем расхождения итоговых сумм на последнюю строку Таблицы расхождений
		КоличествоСтрокТаблицыРасхождений = ТаблицаРасхождений.Количество();
		
		Если КоличествоСтрокТаблицыРасхождений > 0 Тогда
			
			СуммаСНДСРасхождения = Товары.Итог("СуммаСНДС") - ТоварыПоДаннымПоставщика.Итог("СуммаСНДС") - СуммаСНДСРасхождения;
			СуммаРасхождения     = Товары.Итог("Сумма") - ТоварыПоДаннымПоставщика.Итог("Сумма") - СуммаРасхождения;
			СуммаНДСРасхождения  =  Товары.Итог("СуммаНДС") -  ТоварыПоДаннымПоставщика.Итог("СуммаНДС") - СуммаНДСРасхождения;
			
			ТаблицаРасхождений[КоличествоСтрокТаблицыРасхождений-1].СуммаСНДС = ТаблицаРасхождений[КоличествоСтрокТаблицыРасхождений-1].СуммаСНДС + СуммаСНДСРасхождения;
			ТаблицаРасхождений[КоличествоСтрокТаблицыРасхождений-1].Сумма = ТаблицаРасхождений[КоличествоСтрокТаблицыРасхождений-1].Сумма + СуммаРасхождения;
			ТаблицаРасхождений[КоличествоСтрокТаблицыРасхождений-1].СуммаНДС = ТаблицаРасхождений[КоличествоСтрокТаблицыРасхождений-1].СуммаНДС + СуммаНДСРасхождения;
			
			Если СуммаСНДСРасхождения <> 0 Тогда
				ТаблицаРасхождений[КоличествоСтрокТаблицыРасхождений-1].СуммаВзаиморасчетов = ТекСтрока.СуммаСНДС * Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов;
				ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТаблицаРасхождений[КоличествоСтрокТаблицыРасхождений-1].СтавкаНДС);
				ТаблицаРасхождений[КоличествоСтрокТаблицыРасхождений-1].СуммаНДСВзаиморасчетов = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(
					ТаблицаРасхождений[КоличествоСтрокТаблицыРасхождений-1].СуммаВзаиморасчетов,
					ТекПроцентНДС
				);
			КонецЕсли;
			
		КонецЕсли;
		
		//Добавляем в таблицу Различия таблиц данные из табличной части Расхождения с противоположным знаком
		Для каждого ТекСтрока Из Расхождения Цикл
			
			НоваяСтрока = РазличияТаблиц.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока,,
				?(ТекСтрока.ВариантРасхождений=Перечисления.ВариантыРасхождений.Недостачи, "ЗаказПоставщику, Склад, КодСтроки", "")
			);
			НоваяСтрока.КоличествоУпаковок             = -НоваяСтрока.КоличествоУпаковок;
			НоваяСтрока.Количество                     = -НоваяСтрока.Количество;
			НоваяСтрока.Сумма                          = -НоваяСтрока.Сумма;
			НоваяСтрока.СуммаНДС                       = -НоваяСтрока.СуммаНДС;
			НоваяСтрока.СуммаСНДС                      = -НоваяСтрока.СуммаСНДС;
			
		КонецЦикла;
		
		РазличияТаблиц.Свернуть(
			"НоменклатураПоставщика,
			|Номенклатура,
			|Характеристика,
			|Упаковка,
			|УсловиеЦеныПоставщика,
			|Цена,
			|СтавкаНДС,
			|ВариантРасхождений
			|"
			,
			"КоличествоУпаковок,
			|Количество,
			|Сумма,
			|СуммаНДС,
			|СуммаСНДС
			|"
		);
		
		//Проверяем различие строк по количеству, сумме и сумме НДС
		Для Каждого ТекСтрока Из РазличияТаблиц Цикл
			
			Если ТекСтрока.Количество <> 0 Или ТекСтрока.Сумма <> 0 Или ТекСтрока.СуммаНДС <> 0 Тогда
				
				ЕстьОтличия = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		//Если строки различаются, то перезаполняем табличную часть Расхождения
		Если ЕстьОтличия Тогда
			
			Расхождения.Загрузить(ТаблицаРасхождений.Скопировать());
			СуммаРасчетовСоСтороннейКомпаниейПоРасхождениям = 0;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьНедостачи = ЕстьНедостачи И ЕстьОтличия;
	ЕстьИзлишки = ЕстьИзлишки И ЕстьОтличия;
	
	Возврат ЕстьОтличия;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Соглашение) Или Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "ИспользуютсяДоговорыКонтрагентов") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	Если НЕ ПредъявленСчетФактура Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НомерСчетаФактуры");
		МассивНепроверяемыхРеквизитов.Добавить("ДатаСчетаФактуры");
		МассивНепроверяемыхРеквизитов.Добавить("ВалютаСчетаФактуры");
	КонецЕсли;
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ПоступлениеТоваровУслуг.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов
	);
	
	ВсеСтрокиИзЗаказа = Истина;
	
	Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
		
		Если ПоступлениеПоЗаказам И
			Не ЗначениеЗаполнено(ЗаказПоставщику) И
			Не ЗначениеЗаполнено(Товары[ТекИндекс].ЗаказПоставщику) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнено поле ""Заказ поставщику"" в строке %НомерСтроки% списка ""Товары""'");
			ТекстОшибки =  СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Товары[ТекИндекс].НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ЗаказПоставщику"),
				,
				Отказ
			);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Товары[ТекИндекс].КодСтроки) Тогда
			ВсеСтрокиИзЗаказа = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПоступлениеПоЗаказам Или ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Расхождения.ЗаказПоставщику");
	КонецЕсли;
	
	Если ЕстьРасхождения Тогда
		
		ЕстьРасхожденияПоРасчетамСоСтороннейКомпанией = Ложь;
		ЕстьРасхожденияВПрочихДоходах = Ложь;
		ЕстьРасхожденияВПрочихРасходах = Ложь;
		
		Для ТекИндекс = 0 По Расхождения.Количество()-1 Цикл
			
			
			
			Если Расхождения[ТекИндекс].ВариантОтраженияРасхождений = Перечисления.ВариантыОтраженияРасхождений.НедостачиЗаСчетСтороннейКомпании Тогда
				ЕстьРасхожденияПоРасчетамСоСтороннейКомпанией = Истина;
			ИначеЕсли Расхождения[ТекИндекс].ВариантОтраженияРасхождений = Перечисления.ВариантыОтраженияРасхождений.ИзлишкиНаПрочиеДоходы Тогда
				ЕстьРасхожденияВПрочихДоходах = Истина;
			ИначеЕсли Расхождения[ТекИндекс].ВариантОтраженияРасхождений = Перечисления.ВариантыОтраженияРасхождений.НедостачиНаПрочиеРасходы Тогда
				ЕстьРасхожденияВПрочихРасходах = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЕстьРасхожденияПоРасчетамСоСтороннейКомпанией Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("ВалютаВзаиморасчетовСоСтороннейКомпанией");
			МассивНепроверяемыхРеквизитов.Добавить("СторонняяКомпания");
			МассивНепроверяемыхРеквизитов.Добавить("КонтрагентСтороннейКомпании");
			
		КонецЕсли;
		
		Если Не ЕстьРасхожденияВПрочихДоходах Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("СтатьяДоходовПоРасхождениям");
			
		КонецЕсли;
		
		Если Не ЕстьРасхожденияВПрочихРасходах Тогда
			
			МассивНепроверяемыхРеквизитов.Добавить("СтатьяРасходовПоРасхождениям");
			
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("ВалютаВзаиморасчетовСоСтороннейКомпанией");
		МассивНепроверяемыхРеквизитов.Добавить("СторонняяКомпания");
		МассивНепроверяемыхРеквизитов.Добавить("КонтрагентСтороннейКомпании");
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяДоходовПоРасхождениям");
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяРасходовПоРасхождениям");
		
	КонецЕсли;
	
	Если ВсеСтрокиИзЗаказа И ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект) <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПлатежа");
	КонецЕсли;
	
	Если Не ВернутьМногооборотнуюТару Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВозвратаМногооборотнойТары");
	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
	 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет
	 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
		ВзаиморасчетыСервер.ПроверитьДатуПлатежа(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ","ТоварыПоДаннымПоставщика");
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПоступлениеТоваровУслуг),Отказ);
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ","Расхождения");
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки);
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НомерГТД");
	МассивНепроверяемыхРеквизитов.Добавить("ТоварыПоДаннымПоставщика.НомерГТД");
	Если ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД")
	 И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
		ЗапасыСервер.ПроверитьЗаполнениеНомеровГТД(ЭтотОбъект, Отказ);
		ЗапасыСервер.ПроверитьЗаполнениеНомеровГТД(ЭтотОбъект, Отказ, "ТоварыПоДаннымПоставщика");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	ПроверитьИзменениеХозяйственнойОперации(Отказ);
	ОтветственныеЛицаСервер.ПроверитьЗаполнениеОтветственныхЛицДокумента(ЭтотОбъект, Отказ);
	
	Если Не Отказ Тогда
		Отказ = ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты);
	КонецЕсли;
	
	ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект,Отказ);
	ОбщегоНазначенияУТ.ПроверитьПравильностьУказанияХозяйственнойОперации(ЭтотОбъект, Отказ);
	
	Если ЗначениеЗаполнено("ДатаВозвратаМногооборотнойТары") И ВернутьМногооборотнуюТару И ДатаВозвратаМногооборотнойТары < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Дата возврата многооборотной тары не должна быть меньше даты документа.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.ДатаВозвратаМногооборотнойТары",
			,
			Отказ
		);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	Перем СкладПоступления;
	Перем РеквизитыШапки;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);

	ЗаполнитьПоЗначениямАвтозаполнения(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ДокументОснование")
			И (ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику")
			Или ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив")) Тогда

			ДанныеЗаполнения.Свойство("СкладПоступления", СкладПоступления);
			ДанныеЗаполнения.Свойство("РеквизитыШапки", РеквизитыШапки);
			ЗаполнитьДокументНаОснованииЗаказаПоставщику(ДанныеЗаполнения.ДокументОснование, СкладПоступления, РеквизитыШапки);

		Иначе

			ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
		КонецЕсли;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ЗаполнитьДокументНаОснованииЗаказаПоставщику(ДанныеЗаполнения, СкладПоступления);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЗаполнитьДокументНаОснованииВозвратаТоваровПоставщику(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
		ЗаполнитьДокументНаОснованииСоглашенияСПоставщиком(ДанныеЗаполнения);
	КонецЕсли;

	ИнициализироватьДокумент(ДанныеЗаполнения);
	//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  26.11.2013
    ЭтотОбъект.акЗаказКлиента = ЭтотОбъект.ЗаказПоставщику.ДокументОснование;		
	//}

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если ЕстьРасхождения Тогда
		
		СуммаИзлишков    = 0;
		СуммаНедостачи   = 0;
		СуммаРасхождений = 0;
		
		Для Каждого ТекСтрока Из Расхождения Цикл
			
			Если ТекСтрока.ВариантРасхождений = Перечисления.ВариантыРасхождений.Недостачи Тогда
				СуммаНедостачи = СуммаНедостачи + ТекСтрока.СуммаСНДС;
			ИначеЕсли ТекСтрока.ВариантРасхождений = Перечисления.ВариантыРасхождений.Излишки Тогда
				СуммаИзлишков = СуммаИзлишков + ТекСтрока.СуммаСНДС;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбщаяСуммаРасхождений = СуммаНедостачи - СуммаИзлишков;
		СуммаРасхождений = ?(ОбщаяСуммаРасхождений < 0, - ОбщаяСуммаРасхождений, ОбщаяСуммаРасхождений);
		СуммаДокумента = ПолучитьСуммуДокумента();
		
	Иначе
		
		Расхождения.Очистить();
		
		СуммаРасхождений = 0;
		СуммаИзлишков    = 0;
		СуммаНедостачи   = 0;
		
		СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС);
		
	КонецЕсли;
	
	СуммаОтнесеннаяНаТраспортнуюКомпанию = 0;
	Для Каждого ТекСтрока Из Расхождения Цикл
		Если ТекСтрока.ВариантОтраженияРасхождений = Перечисления.ВариантыОтраженияРасхождений.НедостачиЗаСчетСтороннейКомпании Тогда
			СуммаОтнесеннаяНаТраспортнуюКомпанию = СуммаОтнесеннаяНаТраспортнуюКомпанию + ТекСтрока.СуммаСНДС;
		КонецЕсли;
	КонецЦикла;
	
	Если СуммаОтнесеннаяНаТраспортнуюКомпанию = 0 Тогда
		
		СуммаРасчетовСоСтороннейКомпаниейПоРасхождениям = 0;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(СуммаРасчетовСоСтороннейКомпаниейПоРасхождениям) Тогда
		
		Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Валюта, ВалютаВзаиморасчетовСоСтороннейКомпанией, Дата);
		СуммаРасчетовСоСтороннейКомпаниейПоРасхождениям = СуммаОтнесеннаяНаТраспортнуюКомпанию * Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов;
		
	КонецЕсли;
	
	Если ПоступлениеПоЗаказам И ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		
		Для Каждого ТекСтрока Из Товары Цикл
			
			Если Не ЗначениеЗаполнено(ТекСтрока.ЗаказПоставщику) Тогда
				ТекСтрока.ЗаказПоставщику = ЗаказПоставщику;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьРасхождения Тогда
			
			Для Каждого ТекСтрока Из Расхождения Цикл
				
				Если Не ЗначениеЗаполнено(ТекСтрока.ЗаказПоставщику) Тогда
					ТекСтрока.ЗаказПоставщику = ЗаказПоставщику;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВПоступлении(ЭтотОбъект);
	Ценообразование.РассчитатьСуммыВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, "Товары");
	ВзаиморасчетыСервер.ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, "Товары");
	
	НоменклатураСервер.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПоступлениеТоваровУслуг));
	ЗакупкиСервер.ОчиститьНомерДатуСчетаФактуры(ЭтотОбъект);
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(ЭтотОбъект, РежимЗаписи);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет Тогда
			
			ВзаиморасчетыСервер.ЗаполнитьСуммуРасшифровкиПлатежаПоСуммеДокумента(
				СуммаДокумента,
				РасшифровкаПлатежа
			);
			ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(
				Валюта,
				Дата,
				РасшифровкаПлатежа
			);
		Иначе
			Если РасшифровкаПлатежа.Количество() <> 0 Тогда
				РасшифровкаПлатежа.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьВидыЗапасовДокумента();
		
		ЗаполнитьКлючиАналитикиУчетаПартийДокумента();
		
	КонецЕсли;
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ПоступлениеТоваровУслуг.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
		НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(Товары, Отказ);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Товары);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Расхождения);
	КонецЕсли;
	
	Документы.СчетФактураПолученный.ПроверитьРеквизитыСчетФактуры(Ссылка, ПометкаУдаления, Организация);
	
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.ПоступлениеТоваровУслуг.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗаказыСервер.ОтразитьЗаказыПоставщикам(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДатыПоступленияТоваровОрганизаций(ДополнительныеСвойства, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизацийКОформлению(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеДоходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщикамиПоследовательность(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ);
	
	ДенежныеСредстваСервер.ОтразитьДенежныеСредстваКСписаниюСПодотчетныхЛиц(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказовРаботами(ДополнительныеСвойства, Движения, Отказ);

	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	ПартионныйУчетСервер.ОтразитьДвиженияПартийТоваровОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ПартионныйУчетСервер.ОтразитьПартииТоваровОрганизацийПоследовательность(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ);
	
	Ценообразование.ОтразитьЦеныНоменклатурыПоставщика(ДополнительныеСвойства, Движения, Отказ);
	
	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	МногооборотнаяТараСервер.ОтразитьПринятуюВозвратнуюТару(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	ДатаПлатежа     = Дата(1,1,1);
	Согласован      = Ложь;
	ВидЗапасов      = Неопределено;
	ПоступлениеПоЗаказам = Ложь;
	ЗаказПоставщику = Документы.ЗаказПоставщику.ПустаяСсылка();
	ПредъявленСчетФактура = Ложь;
	ДатаСчетаФактуры = Дата(1,1,1);
	НомерСчетаФактуры = "";
	ВалютаСчетаФактуры = Справочники.Валюты.ПустаяСсылка();
	ДатаВходящегоДокумента = Дата(1,1,1);
	НомерВходящегоДокумента = "";
	ЕстьРасхождения = Ложь;
	СуммаРасхождений = 0;
	СторонняяКомпания = Справочники.Партнеры.ПустаяСсылка();
	КонтрагентСтороннейКомпании = Справочники.Контрагенты.ПустаяСсылка();
	ВалютаВзаиморасчетовСоСтороннейКомпанией = Справочники.Валюты.ПустаяСсылка();
	СтатьяРасходовПоРасхождениям = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	СтатьяДоходовПоРасхождениям = ПланыВидовХарактеристик.СтатьиДоходов.ПустаяСсылка();
	АналитикаРасходовПоРасхождениям = Неопределено;
	АналитикаДоходовПоРасхождениям = Неопределено;
	СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();
	
	Для Каждого ТекСтрока Из Товары Цикл
		
		ТекСтрока.ЗаказПоставщику = Документы.ЗаказПоставщику.ПустаяСсылка();
		ТекСтрока.КодСтроки = 0;

	КонецЦикла;
	
	ТоварыПоДаннымПоставщика.Очистить();
	Серии.Очистить();
	Расхождения.Очистить();
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	Документы.СчетФактураПолученный.АктуализироватьСчетФактуру(ЭтотОбъект.Ссылка, ЭтотОбъект.Проведен);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ЗаполнитьДокументНаОснованииЗаказаПоставщику(Знач ДокументОснование, Знач СкладПоступления = Неопределено, РеквизитыЗаказа = Неопределено)

	ТипОснования = ТипЗнч(ДокументОснование);
	ЗаполнятьПоОстаткам = Ложь;
	
	Если ТипОснования = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПоставщику.Сделка КАК Сделка,
		|	ЗаказПоставщику.Соглашение.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
		|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику,
		|	ЗаказПоставщику.Партнер КАК Партнер,
		|	ЗаказПоставщику.Контрагент КАК Контрагент,
		|	ЗаказПоставщику.Договор КАК Договор,
		|	ЗаказПоставщику.Организация КАК Организация,
		|	ЗаказПоставщику.Соглашение КАК Соглашение,
		|	ЗаказПоставщику.Валюта КАК Валюта,
		|	ЗаказПоставщику.Валюта КАК ВалютаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщику.Склад.ЭтоГруппа
		|				И ЗаказПоставщику.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИНАЧЕ ЗаказПоставщику.Склад
		|	КОНЕЦ КАК Склад,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщику.Склад.ЭтоГруппа
		|				И ЗаказПоставщику.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
		|	ЗаказПоставщику.ФормаОплаты КАК ФормаОплаты,
		|	ЗаказПоставщику.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ЗаказПоставщику.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ЗаказПоставщику.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ЗаказПоставщику.Статус КАК СтатусДокумента,
		|	ЗаказПоставщику.Подразделение КАК Подразделение,
		|	ЗаказПоставщику.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	ЗаказПоставщику.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	ЗаказПоставщику.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
		|	ЕСТЬNULL(ЗаказПоставщику.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю,Ложь) КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	НЕ ЗаказПоставщику.Проведен КАК ЕстьОшибкиПроведен,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению)
		|				ИЛИ ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	ЗаказПоставщику.БанковскийСчет КАК БанковскийСчетОрганизации,
		|	ЗаказПоставщику.ПорядокРасчетов КАК ПорядокРасчетов
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказыОстатки.Склад КАК Склад
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &ДокументОснование) КАК ЗаказыОстатки";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		РеквизитыЗаказа = РезультатЗапроса[0].Выбрать();
		РеквизитыЗаказа.Следующий();
		
		МассивДопустимыхСтатусов = Новый Массив();
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПоставщикам.КПоступлению);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПоставщикам.Закрыт);
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			РеквизитыЗаказа.ЗаказПоставщику,
			РеквизитыЗаказа.СтатусДокумента,
			РеквизитыЗаказа.ЕстьОшибкиПроведен,
			РеквизитыЗаказа.ЕстьОшибкиСтатус,
			МассивДопустимыхСтатусов
		);
		
		// Заполнение шапки.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			Дата,
			РеквизитыЗаказа.СрокВозвратаМногооборотнойТары,
			РеквизитыЗаказа.РассчитыватьДатуВозвратаТарыПоКалендарю);
		
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			МассивСкладов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Склад");
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("Массив") Тогда
		
		// Заполнение шапки.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		Валюта = ВалютаВзаиморасчетов;
		ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
	
		ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			Дата,
			РеквизитыЗаказа.СрокВозвратаМногооборотнойТары,
			РеквизитыЗаказа.РассчитыватьДатуВозвратаТарыПоКалендарю);
		
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказыОстатки.Склад КАК Склад
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Остатки(
			|		,
			|		ЗаказПоставщику В (&МассивДокументов)
			|) КАК ЗаказыОстатки
			|";
			
			РезультатЗапросаПоСкладам = Запрос.Выполнить();
			МассивСкладов = РезультатЗапросаПоСкладам.Выгрузить().ВыгрузитьКолонку("Склад");
			Склад = РеквизитыЗаказа.СкладПоступления;
			
		КонецЕсли;
		
		ЗакупкаПодДеятельность = Справочники.Организации.НалогообложениеНДС(Организация, Склад, Дата);
		
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(Соглашение);
		ЗаполнитьУсловияРасчетов(УсловияЗакупок);
	КонецЕсли;
	
	// Заполнение т.ч. товары.
	Если Не ЗначениеЗаполнено(СкладПоступления) Тогда
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			// Только услуги
			Если МассивСкладов.Количество() = 0 Тогда
				ЗаполнятьПоОстаткам = Истина;
			// Услуги или товары
			ИначеЕсли МассивСкладов.Количество() = 1 Тогда
				СкладПоступления = МассивСкладов[0];
				Склад = СкладПоступления;
				ЗаполнятьПоОстаткам = Истина;
			// Услуги и товары
			ИначеЕсли МассивСкладов.Количество() = 2 Тогда
				Если Не ЗначениеЗаполнено(МассивСкладов[0]) Или
					Не ЗначениеЗаполнено(МассивСкладов[1]) Тогда
					СкладПоступления = ?(ЗначениеЗаполнено(МассивСкладов[0]), МассивСкладов[0], МассивСкладов[1]);
					Склад = СкладПоступления;
					ЗаполнятьПоОстаткам = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЗаполнятьПоОстаткам = Истина;
			СкладПоступления = Склад;
		КонецЕсли;
	Иначе
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			Склад = СкладПоступления;
		КонецЕсли;
		ЗаполнятьПоОстаткам = Истина;
	КонецЕсли;
	
	Если ЗаполнятьПоОстаткам Тогда
		
		Если ТипОснования = Тип("Массив") Тогда
			МассивЗаказов = ДокументОснование;
		Иначе
			МассивЗаказов = Новый Массив();
			МассивЗаказов.Добавить(ЗаказПоставщику);
		КонецЕсли;
		
		Документы.ПоступлениеТоваровУслуг.ЗаполнитьПоОстаткамЗаказов(
			ЭтотОбъект,
			Товары,
			?(СкладПоступления=Неопределено, Справочники.Склады.ПустаяСсылка(), СкладПоступления),
			МассивЗаказов
		);
		
		ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(ЗаказПоставщику, Товары, "ЗаказПоставщику");
	
	КонецЕсли;
	
	ПоступлениеПоЗаказам = Истина;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам") Тогда
		Сделка = Справочники.СделкиСКлиентами.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииВозвратаТоваровПоставщику(Знач ДокументОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка                          КАК Ссылка,
	|	ВозвратТоваровПоставщику.Организация                     КАК Организация,
	|	ВозвратТоваровПоставщику.Партнер                         КАК Партнер,
	|	ВозвратТоваровПоставщику.Контрагент                      КАК Контрагент,
	|	ВозвратТоваровПоставщику.Подразделение                   КАК Подразделение,
	|	ВозвратТоваровПоставщику.Валюта                          КАК Валюта,
	|	ВозвратТоваровПоставщику.Валюта                          КАК ВалютаВзаиморасчетов,
	|	ВозвратТоваровПоставщику.СуммаДокумента                  КАК СуммаДокумента,
	|	ВозвратТоваровПоставщику.СуммаДокумента                  КАК СуммаВзаиморасчетов,
	|	ВозвратТоваровПоставщику.Склад                           КАК Склад,
	|	ВозвратТоваровПоставщику.ЦенаВключаетНДС                 КАК ЦенаВключаетНДС,
	|	ВозвратТоваровПоставщику.НалогообложениеНДС              КАК НалогообложениеНДС,
	|	ВозвратТоваровПоставщику.БанковскийСчетКонтрагента       КАК БанковскийСчетКонтрагента,
	|	ВозвратТоваровПоставщику.Грузоотправитель                КАК Грузоотправитель,
	|	ВозвратТоваровПоставщику.БанковскийСчетГрузоотправителя  КАК БанковскийСчетГрузоотправителя,
	|	ВозвратТоваровПоставщику.Договор                         КАК Договор,
	|	ВозвратТоваровПоставщику.Соглашение                      КАК Соглашение,
	|	ВЫБОР
	|		КОГДА
	|			ВозвратТоваровПоставщику.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту)
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	ВозвратТоваровПоставщику.ВозвратПринятойМногооборотнойТары КАК ВернутьМногооборотнуюТару,
	|
	|	НЕ ВозвратТоваровПоставщику.Проведен КАК ЕстьОшибкиПроведен,
	|
	|	ВозвратТоваровПоставщику.Товары.(
	|		НоменклатураПоставщика   КАК НоменклатураПоставщика,
	|		Номенклатура             КАК Номенклатура,
	|		Характеристика           КАК Характеристика,
	|		Упаковка                 КАК Упаковка,
	|		КоличествоУпаковок       КАК КоличествоУпаковок,
	|		Количество               КАК Количество,
	|		Цена                     КАК Цена,
	|		Сумма                    КАК Сумма,
	|		СтавкаНДС                КАК СтавкаНДС,
	|		СуммаНДС                 КАК СуммаНДС,
	|		СуммаСНДС                КАК СуммаСНДС,
	|		Ссылка.Склад             КАК Склад
	|	) КАК Товары,
	|
	|	ВозвратТоваровПоставщику.Серии.(
	|		Номенклатура             КАК Номенклатура,
	|		Характеристика           КАК Характеристика,
	|		Серия                    КАК Серия,
	|		Количество               КАК Количество
	|	) КАК Серии
	|
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка = &ДокументОснование";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.Ссылка,
		,
		Выборка.ЕстьОшибкиПроведен,
	);
	
	// Заполнение шапки и табличных частей
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	Товары.Загрузить(Выборка.Товары.Выгрузить());
	Серии.Загрузить(Выборка.Серии.Выгрузить());

КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииСоглашенияСПоставщиком(Знач СправочникОснование)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СоглашениеСПоставщиком.Ссылка      КАК Соглашение,
		|	СоглашениеСПоставщиком.Партнер     КАК Партнер,
		|
		|	СоглашениеСПоставщиком.Статус      КАК СтатусДокумента,
		|	ВЫБОР
		|		КОГДА
		|			СоглашениеСПоставщиком.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиСтатус
		|
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками  КАК СоглашениеСПоставщиком
		|ГДЕ
		|	СоглашениеСПоставщиком.Ссылка = &СправочникОснование
		|");
		
	Запрос.УстановитьПараметр("СправочникОснование", СправочникОснование);
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Выборка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыСоглашенийСПоставщиками.Действует);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.Соглашение,
		Выборка.СтатусДокумента,
		,
		Выборка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов
	);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	ЗаполнитьУсловияЗакупокПоCоглашению();
		
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		
		Партнер = ДанныеЗаполнения.Партнер;
		ЗаполнитьУсловияЗакупокПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗначениямАвтозаполнения(ДанныеЗаполнения = Неопределено)
	
	ЕстьДанныеЗаполнения = (НЕ ДанныеЗаполнения = Неопределено);
	ДанныеЗаполненияСтруктура = (ТипЗнч(ДанныеЗаполнения) = Тип("Структура"));
	
	Если Не ЕстьДанныеЗаполнения Или ДанныеЗаполненияСтруктура Тогда
		// Заполним основные свойства
		СвойстваАвтозаполнения = Новый Структура("Организация, Склад, ХозяйственнаяОперация");
		
		Если ДанныеЗаполненияСтруктура Тогда
			ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(СвойстваАвтозаполнения, ДанныеЗаполнения, Истина);
			
		КонецЕсли;
		
		ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(Ссылка, СвойстваАвтозаполнения);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваАвтозаполнения);
		
		// Заполним банковский счет в зависимости от организации
		СвойстваАвтозаполнения = Новый Структура("Организация, БанковскийСчетОрганизации", Организация);
		
		Если ДанныеЗаполненияСтруктура Тогда
			ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(СвойстваАвтозаполнения, ДанныеЗаполнения, Истина);
			
		КонецЕсли;
		
		ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(Ссылка, СвойстваАвтозаполнения);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваАвтозаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Менеджер                  = Пользователи.ТекущийПользователь();
	Валюта                    = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
	ВалютаВзаиморасчетов      = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(ВалютаВзаиморасчетов);
	Организация               = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Подразделение             = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Менеджер, Подразделение);
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, , БанковскийСчетОрганизации);
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
	Склад                     = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки"), Истина);
	
	Если Не ЗначениеЗаполнено(ЗакупкаПодДеятельность) Тогда
		ЗакупкаПодДеятельность = Справочники.Организации.НалогообложениеНДС(Организация, Склад, Дата);
	КонецЕсли; 
	
	СтруктураОтветственного = ЗакупкиСервер.ПолучитьОтветственногоПоСкладу(Склад, Менеджер);
	Если СтруктураОтветственного <> Неопределено Тогда
		Принял = СтруктураОтветственного.Ответственный;
		ПринялДолжность = СтруктураОтветственного.ОтветственныйДолжность;
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ЗаполнитьОтветственныхЛицДокумента(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Виды запасов

Процедура ПроверитьИзменениеХозяйственнойОперации(Отказ)
	
	Если Не ЭтоНовый()
	 И (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
	 Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо) Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РасчетыСПоставщиками.СуммаПриход КАК СуммаОплаты
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Обороты(,,Период,
		|		ЗаказПоставщику = &ЗаказПоставщику
		|	) КАК РасчетыСПоставщиками
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
		|	ПО
		|		ДанныеДокумента.Ссылка = &Ссылка
		|		И ДанныеДокумента.ХозяйственнаяОперация <> &ХозяйственнаяОперация
		|ГДЕ
		|	РасчетыСПоставщиками.СуммаПриход > 0
		|");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ЗаказПоставщику", ?(ЗначениеЗаполнено(ЗаказПоставщику), ЗаказПоставщику, Ссылка));
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Поступление оплачено. Нельзя устанавливать операцию %1 '"),
				ХозяйственнаяОперация
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ХозяйственнаяОперация",
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидыЗапасовДокумента()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Сделка КАК Сделка,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|	ТаблицаТоваров.ВидЗапасов КАК ВидЗапасов
	|	
	|ПОМЕСТИТЬ ТаблицаТоваровДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА
	|			ТаблицаТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			И &ВернутьМногооборотнуюТару
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратнаяТара,
	|	ВЫБОР КОГДА &ПоступлениеПоЗаказам
	|		И ТаблицаТоваров.Сделка <> ЗНАЧЕНИЕ(Справочник.СделкиСклиентами.ПустаяСсылка)
	|	ТОГДА
	|		ТаблицаТоваров.Сделка
	|	ИНАЧЕ
	|		&Сделка
	|	КОНЕЦ КАК Сделка,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|	&Подразделение КАК Подразделение,
	|	&Менеджер КАК Менеджер
	|	
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ПО
	|		ТаблицаТоваров.ВидЗапасов = ВидыЗапасов.Ссылка
	|ГДЕ
	|	ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	ИЛИ ВидыЗапасов.ТипЗапасов <> 
	|		ВЫБОР
	|			КОГДА
	|				ТаблицаТоваров.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И &ВернутьМногооборотнуюТару
	|			ТОГДА
	|				ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|			ИНАЧЕ
	|				&ТипЗапасов
	|		КОНЕЦ 
	|	ИЛИ ВидыЗапасов.Организация <> &Организация
	|	ИЛИ (Не &ФормироватьВидыЗапасовПоСделкам И ВидыЗапасов.Сделка <> ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка))
	|	ИЛИ (Не &ФормироватьВидыЗапасовПоПоставщикам И ВидыЗапасов.Поставщик <> НЕОПРЕДЕЛЕНО)
	|	ИЛИ (Не &ФормироватьВидыЗапасовПоПодразделениямМенеджерам И ВидыЗапасов.Менеджер <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|	ИЛИ (Не &ФормироватьВидыЗапасовПоПодразделениямМенеджерам И ВидыЗапасов.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) КАК ТипЗапасов,
	|	&Соглашение КАК Соглашение,
	|	&Валюта КАК Валюта,
	|	&НалогообложениеНДС КАК НалогообложениеНДС,
	|	&НалогообложениеОрганизации КАК НалогообложениеОрганизации,
	|	&Партнер КАК Поставщик,
	|	&Контрагент КАК Контрагент,
	|	&Договор КАК Договор
	|
	|ПОМЕСТИТЬ РеквизитыВидаЗапасов
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	&ЗакупкаПодДеятельность КАК НалогообложениеНДС,
	|	&НалогообложениеОрганизации КАК НалогообложениеОрганизации,
	|	&Партнер КАК Поставщик,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор
	|ГДЕ
	|	&ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров", Товары.Выгрузить(, "НомерСтроки, Номенклатура, Сделка, Назначение, ВидЗапасов"));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.УстановитьПараметр("ЗакупкаПодДеятельность", ЗакупкаПодДеятельность);
	Запрос.УстановитьПараметр("НалогообложениеОрганизации", Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата));
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ТипЗапасов", ?(ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию, Перечисления.ТипыЗапасов.КомиссионныйТовар, Перечисления.ТипыЗапасов.Товар));
	Запрос.УстановитьПараметр("ПоступлениеПоЗаказам", ПоступлениеПоЗаказам);
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", ВернутьМногооборотнуюТару);
	
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПоставщикам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПоставщикам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));

	Запрос.Выполнить();
	
	ЗапасыСервер.ЗаполнитьВидыЗапасовВТабличнойЧастиТовары(МенеджерВременныхТаблиц, Товары);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	
	// Контроль выполняется при проведении\отмене проведения не нового документа.
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ПринятаяВозвратнаяТара);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Массив.Добавить(Движения.ЗаказыПоставщикам);
		Массив.Добавить(Движения.ТоварыОрганизацийКОформлению);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Массив.Добавить(Движения.ТоварыОрганизацийКОформлению);
	КонецЕсли;

	Массив.Добавить(Движения.ОбеспечениеЗаказов);
	Массив.Добавить(Движения.ОбеспечениеЗаказовРаботами);
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Функция ПолучитьСуммуДокумента()
	
	СуммаВсегоПоДаннымПоставщика  = ТоварыПоДаннымПоставщика.Итог("Сумма");
	Если Не ЦенаВключаетНДС Тогда
		СуммаВсегоПоДаннымПоставщика = СуммаВсегоПоДаннымПоставщика + ТоварыПоДаннымПоставщика.Итог("СуммаНДС");
	КонецЕсли;
		
	ДолгПоставщика    = СуммаНедостачи;
	НашДолгПоставщику = СуммаИзлишков;
	
	Для Каждого ТекСтрока Из Расхождения Цикл
		
		Если ТекСтрока.ВариантОтраженияРасхождений = Перечисления.ВариантыОтраженияРасхождений.НедостачиНаПрочиеРасходы Тогда
			ДолгПоставщика = ДолгПоставщика - ТекСтрока.СуммаСНДС;
		КонецЕсли;
		
		Если ТекСтрока.ВариантОтраженияРасхождений = Перечисления.ВариантыОтраженияРасхождений.НедостачиЗаСчетСтороннейКомпании Тогда
			ДолгПоставщика = ДолгПоставщика - ТекСтрока.СуммаСНДС;
		КонецЕсли;
		
		Если ТекСтрока.ВариантОтраженияРасхождений = Перечисления.ВариантыОтраженияРасхождений.ИзлишкиНаПрочиеДоходы Тогда
			НашДолгПоставщику = НашДолгПоставщику - ТекСтрока.СуммаСНДС;
		КонецЕсли;
		
	КонецЦикла;
	
	ИтоговаяСуммаРасчетов = НашДолгПоставщику - ДолгПоставщика;
	
	Возврат СуммаВсегоПоДаннымПоставщика + ИтоговаяСуммаРасчетов;
	
КонецФункции

Процедура ЗаполнитьКлючиАналитикиУчетаПартийДокументаВТабличнойЧасти(ТабличнаяЧасть)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки 			КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура 		КАК Номенклатура,
	|	ТаблицаТоваров.СтавкаНДС 			КАК СтавкаНДС,
	|	ТаблицаТоваров.АналитикаУчетаПартий КАК АналитикаУчетаПартий
	|ПОМЕСТИТЬ ТаблицаТоваровДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки 		КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура 	КАК Номенклатура,
	|	ТаблицаТоваров.СтавкаНДС 		КАК СтавкаНДС,
	|	&Поставщик 						КАК Поставщик,
	|	&НалогообложениеНДС 			КАК НалогообложениеНДС,
	|	&Контрагент 					КАК Контрагент,
	|	ТаблицаТоваров.АналитикаУчетаПартий
	|
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.АналитикаУчетаПартий = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка)
	|");
	                	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров"		, 	ТабличнаяЧасть.Выгрузить(, 
													"НомерСтроки, Номенклатура, СтавкаНДС, АналитикаУчетаПартий"
													));
	Запрос.УстановитьПараметр("Поставщик"			, Партнер);
	Запрос.УстановитьПараметр("НалогообложениеНДС"	, ЗакупкаПодДеятельность);
	Запрос.УстановитьПараметр("Контрагент"			, Контрагент);

				
	Запрос.Выполнить();
	
	ПартионныйУчетСервер.ЗаполнитьАналитикуУчетаПартийВТабличнойЧастиТовары(МенеджерВременныхТаблиц, ТабличнаяЧасть);
	
КонецПроцедуры

Процедура ЗаполнитьКлючиАналитикиУчетаПартийДокумента() Экспорт
	
	ЗаполнитьКлючиАналитикиУчетаПартийДокументаВТабличнойЧасти(Товары);
	ЗаполнитьКлючиАналитикиУчетаПартийДокументаВТабличнойЧасти(Расхождения);
	
КонецПроцедуры

Процедура ЗаполнитьУсловияРасчетов(Знач УсловияЗакупок)
	
	ФормаОплаты = УсловияЗакупок.ФормаОплаты;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Организация) И УсловияЗакупок.Организация = Организация Тогда
		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Организация, ФормаОплаты);
		БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, ФормаОплаты);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаказПоставщику) Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
			Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет
			Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту
			Или Не ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
			
			ЗначениеДатыПлатежа = ЗакупкиСервер.ПолучитьПоследнююДатуПоГрафику(Дата, УсловияЗакупок.Соглашение);
			Если ЗначениеЗаполнено(ЗначениеДатыПлатежа) Тогда
				ДатаПлатежа = ЗначениеДатыПлатежа;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли
