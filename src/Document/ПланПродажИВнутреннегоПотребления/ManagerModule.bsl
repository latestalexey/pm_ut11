#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Статус КАК Статус,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ПериодПлана КАК ПериодПлана,
	|	ДанныеДокумента.НачалоПериода КАК НачалоПериода
	|ИЗ
	|	Документ.ПланПродажИВнутреннегоПотребления КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	ИнициализироватьКлючиАналитикиНоменклатуры(Реквизиты);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	0 КАК Порядок,
	|	ПланыПродажИВнутреннегоПотребления.НомерСтроки КАК НомерСтроки,
	|	&Активность КАК Активность,
	|	ПланыПродажИВнутреннегоПотребления.Период КАК Период,
	|	ПланыПродажИВнутреннегоПотребления.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ПланыПродажИВнутреннегоПотребления.Подразделение КАК Подразделение,
	|	ПланыПродажИВнутреннегоПотребления.ПериодПлана КАК ПериодПлана,
	|	ПланыПродажИВнутреннегоПотребления.Количество КАК Количество,
	|	ПланыПродажИВнутреннегоПотребления.Пользователь КАК Пользователь,
	|	ПланыПродажИВнутреннегоПотребления.Отменено КАК Отменено,
	|	ПланыПродажИВнутреннегоПотребления.Дата КАК Дата
	|ИЗ
	|	РегистрНакопления.ПланыПродажИВнутреннегоПотребления КАК ПланыПродажИВнутреннегоПотребления
	|ГДЕ
	|	ПланыПродажИВнутреннегоПотребления.Регистратор = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	МАКСИМУМ(ВложенныйЗапрос.НомерСтроки),
	|	&Активность,
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.АналитикаУчетаНоменклатуры,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.ПериодПлана,
	|	СУММА(ВложенныйЗапрос.Количество),
	|	&Пользователь,
	|	МАКСИМУМ(ВложенныйЗапрос.Отменено),
	|	&ТекущаяДата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПланыПродажИВнутреннегоПотребления.НомерСтроки КАК НомерСтроки,
	|		ПланыПродажИВнутреннегоПотребления.Период КАК Период,
	|		ПланыПродажИВнутреннегоПотребления.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|		ПланыПродажИВнутреннегоПотребления.Подразделение КАК Подразделение,
	|		ПланыПродажИВнутреннегоПотребления.ПериодПлана КАК ПериодПлана,
	|		-ПланыПродажИВнутреннегоПотребления.Количество КАК Количество,
	|		ЛОЖЬ КАК Отменено
	|	ИЗ
	|		РегистрНакопления.ПланыПродажИВнутреннегоПотребления КАК ПланыПродажИВнутреннегоПотребления
	|	ГДЕ
	|		ПланыПродажИВнутреннегоПотребления.Регистратор = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаТовары.НомерСтроки,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА &НачалоПериода
	|			ИНАЧЕ ТаблицаТовары.ДатаОтгрузки
	|		КОНЕЦ,
	|		КлючиАналитикиНоменклатуры.КлючАналитики,
	|		&Подразделение,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА &ПериодПлана
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Отменено
	|				ТОГДА 0
	|			ИНАЧЕ ТаблицаТовары.Количество
	|		КОНЕЦ,
	|		ТаблицаТовары.Отменено
	|	ИЗ
	|		Документ.ПланПродажИВнутреннегоПотребления.Товары КАК ТаблицаТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК КлючиАналитикиНоменклатуры
	|			ПО ТаблицаТовары.Номенклатура = КлючиАналитикиНоменклатуры.Номенклатура
	|				И ТаблицаТовары.Характеристика = КлючиАналитикиНоменклатуры.Характеристика
	|				И ТаблицаТовары.Склад = КлючиАналитикиНоменклатуры.Склад
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.АналитикаУчетаНоменклатуры,
	|	ВложенныйЗапрос.Подразделение,
	|	ВложенныйЗапрос.ПериодПлана
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.Количество) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Активность", Реквизиты.Статус = Перечисления.СтатусыПланов.Утвержден);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ПериодПлана", Реквизиты.ПериодПлана);
	Запрос.УстановитьПараметр("НачалоПериода", Реквизиты.НачалоПериода);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	
	Результат = Запрос.ВыполнитьПакет();
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;

	ТаблицыДляДвижений.Вставить("ТаблицаПланыПродажИВнутреннегоПотребления", Результат[0].Выгрузить());
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиНоменклатуры(Реквизиты)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Склад КАК Склад
	|ИЗ
	|	Документ.ПланПродажИВнутреннегоПотребления.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаТовары.Номенклатура = Аналитика.Номенклатура
	|			И ТаблицаТовары.Характеристика = Аналитика.Характеристика
	|			И ТаблицаТовары.Склад = Аналитика.Склад
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И Аналитика.КлючАналитики ЕСТЬ NULL ");
	
	Запрос.УстановитьПараметр("Ссылка", Реквизиты.Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
		
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Печать

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ЗаполнитьДокументНаСервере(Объект) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыДанных", Новый Структура);
	
	Если ЗначениеЗаполнено(Объект.ИзменитьРезультатНа) Тогда
		
		ДополнительныеПараметры.ПараметрыДанных.Вставить("Коэффициент", (100 + Объект.ИзменитьРезультатНа) / 100);
		
	КонецЕсли;
	
	Результат = ВыбратьДанныеПоПравилу(Объект.ПравилоЗаполнения, Объект.ПользовательскиеНастройки.Получить(), ДополнительныеПараметры);
	
	Если Результат <> Неопределено Тогда
		
		// Точность округления
		ТочностьОкругления = Объект.ТочностьОкругления + 3;
		
		// Выходные дни календарей.
		ВыходныеДниКалендарей = Новый Соответствие;
		
		Для каждого СтрокаРезультата из Результат Цикл
			
			Если Цел(СтрокаРезультата.Количество * Pow(10, ТочностьОкругления)) < Pow(10, ТочностьОкругления) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Количество = Окр(Цел(СтрокаРезультата.Количество * Pow(10, ТочностьОкругления)) / Pow(10, ТочностьОкругления), ТочностьОкругления);
			
			Если Объект.РаспределитьПоРабочимДням Тогда
				
				Календарь = СтрокаРезультата.СкладКалендарь;
				
				Если НЕ ЗначениеЗаполнено(Календарь) Тогда
					
					Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
					
				КонецЕсли;
				
				ДлительностьПериода = ДлительностьПериода(Объект.НачалоПериода, Объект.ОкончаниеПериода, Календарь, ВыходныеДниКалендарей);
				РезультатРаспределения = Новый Массив;
				
				Пока Количество > 0 Цикл
					
					Пока ДлительностьПериода > 0 Цикл
						
						КоличествоКРаспределению = Окр(Цел(Количество * Pow(10, ТочностьОкругления) / ДлительностьПериода) / Pow(10, ТочностьОкругления), ТочностьОкругления);
						
						Если КоличествоКРаспределению > 0 Тогда
							
							Прервать;
							
						Иначе
							
							ДлительностьПериода = ДлительностьПериода - 1;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если ДлительностьПериода = 0 Тогда
						
						Прервать;
						
					КонецЕсли;
					
					ИндексПериода = 0;
					
					Пока ИндексПериода < ДлительностьПериода Цикл
						
						Если ИндексПериода <= РезультатРаспределения.ВГраница() Тогда
							
							РезультатРаспределения[ИндексПериода] = РезультатРаспределения[ИндексПериода] + КоличествоКРаспределению;
							
						Иначе
							
							РезультатРаспределения.Вставить(ИндексПериода, КоличествоКРаспределению);
							
						КонецЕсли;
							
						Количество = Количество - КоличествоКРаспределению;
						ИндексПериода = ИндексПериода + 1;
						
					КонецЦикла;
					
				КонецЦикла;
				
				Если РезультатРаспределения.Количество() > 0 Тогда
					
					ДатаКалендаря = Объект.НачалоПериода;
					
					Для каждого РаспределенноеКоличество из РезультатРаспределения Цикл
						
						Пока Классификация.ЭтоВыходнойДень(ДатаКалендаря, Календарь, ВыходныеДниКалендарей) Цикл
							
							ДатаКалендаря = ДатаКалендаря + 86400;
							
						КонецЦикла;
							
						НоваяСтрокаТовары = Объект.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаРезультата);
						
						НоваяСтрокаТовары.Количество = РаспределенноеКоличество;
						НоваяСтрокаТовары.КоличествоУпаковок = НоваяСтрокаТовары.Количество;
						
						НоваяСтрокаТовары.ДатаОтгрузки = ДатаКалендаря;
						
						ДатаКалендаря = ДатаКалендаря + 86400;
						
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
			
				НоваяСтрокаТовары = Объект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаРезультата);
				НоваяСтрокаТовары.Количество = Количество;
				НоваяСтрокаТовары.КоличествоУпаковок = НоваяСтрокаТовары.Количество;
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция ВыбратьДанныеПоПравилу(Правило, ПользовательскиеНастройки, ДополнительныеПараметры = Неопределено)
	
	Перем Результат;
	
	ПравилоЗаполнения = Правило.Выгрузить();
	ПравилоЗаполнения.Колонки.Добавить("ДанныеВыбраны", Новый ОписаниеТипов("Булево"));
	ПравилоЗаполнения.Колонки.Добавить("НаборДанных");
	
	НоваяСтрокаПравилоЗаполнения = ПравилоЗаполнения.Добавить();
	НоваяСтрокаПравилоЗаполнения.ДанныеВыбраны = Ложь;
	НоваяСтрокаПравилоЗаполнения.НаборДанных = Неопределено;
	НоваяСтрокаПравилоЗаполнения.НомерСтроки = 0;
	НоваяСтрокаПравилоЗаполнения.НомерСтрокиРодитель = 99999;
	НоваяСтрокаПравилоЗаполнения.ВариантПреобразования = Перечисления.ВариантыПреобразования.Сложение;
	НоваяСтрокаПравилоЗаполнения.Источник = Справочники.ИсточникиДанныхПланирования.ПустаяСсылка();
	НоваяСтрокаПравилоЗаполнения.ТипЭлемента = 1;
	НоваяСтрокаПравилоЗаполнения.Использование = Истина;
	НоваяСтрокаПравилоЗаполнения.Исключать = Ложь;
	НоваяСтрокаПравилоЗаполнения.ПользовательскиеНастройки = Неопределено;
	НоваяСтрокаПравилоЗаполнения.Период = Неопределено;
	НоваяСтрокаПравилоЗаполнения.Дата = Неопределено;
	
	ПравилоЗаполнения.Сортировать("ТипЭлемента, НомерСтроки");
	
	// Установка признака использования.
	ВсеПравилаОбработаны = Ложь;
	
	Пока НЕ ВсеПравилаОбработаны Цикл
		
		ВсеПравилаОбработаны = Истина;
		
		Для каждого ЭлементПравилоЗаполнения из ПравилоЗаполнения Цикл
			
			Если ЭлементПравилоЗаполнения.ТипЭлемента = 1 Тогда
				
				Если НЕ ЭлементПравилоЗаполнения.Использование Тогда
				
					// Отключение использования подчиненных, размещенных в отключенном родителе.
					НайденныеСтроки = ПравилоЗаполнения.НайтиСтроки(Новый Структура("НомерСтрокиРодитель, Использование", ЭлементПравилоЗаполнения.НомерСтроки, Истина));
					
					Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
						
						НайденнаяСтрока.Использование = Ложь;
						ВсеПравилаОбработаны = Ложь;
						
					КонецЦикла;
					
				Иначе
					
					// Отключение использования родителей, содержащих только отключенные подчиненные.
					НайденныеСтроки = ПравилоЗаполнения.НайтиСтроки(Новый Структура("НомерСтрокиРодитель, Использование", ЭлементПравилоЗаполнения.НомерСтроки, Истина));
					
					Если НайденныеСтроки.Количество() = 0 Тогда
						
						ЭлементПравилоЗаполнения.Использование = Ложь;
						ВсеПравилаОбработаны = Ложь;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Обработка правил преобразования
	ВсеПравилаОбработаны = Ложь;
	
	Пока НЕ ВсеПравилаОбработаны Цикл
		
		ВсеПравилаОбработаны = Истина;
		
		Для каждого ЭлементПравилоЗаполнения из ПравилоЗаполнения Цикл
			
			Если НЕ ЭлементПравилоЗаполнения.ДанныеВыбраны И ЭлементПравилоЗаполнения.Использование Тогда
				
				ВсеПравилаОбработаны = Ложь;
				
				Если ЭлементПравилоЗаполнения.ТипЭлемента = 0 Тогда
					
					ПараметрыИсточникаДанных = Новый Структура("ИсточникДанныхПланирования, Исключать", ЭлементПравилоЗаполнения.Источник, ЭлементПравилоЗаполнения.Исключать);
					ЭлементПравилоЗаполнения.НаборДанных = Справочники.ИсточникиДанныхПланирования.ВыбратьДанные(ПараметрыИсточникаДанных, ЭлементПравилоЗаполнения.ПользовательскиеНастройки.Получить(), Новый Структура("Период, Дата", ЭлементПравилоЗаполнения.Период.Получить(), ЭлементПравилоЗаполнения.Дата.Получить()));
					ЭлементПравилоЗаполнения.ДанныеВыбраны = Истина;
					
				ИначеЕсли ПравилоЗаполнения.НайтиСтроки(Новый Структура("НомерСтрокиРодитель, Использование, ДанныеВыбраны", ЭлементПравилоЗаполнения.НомерСтроки, Истина, Ложь)).Количество() = 0 Тогда
						
					НайденныеСтроки = ПравилоЗаполнения.НайтиСтроки(Новый Структура("НомерСтрокиРодитель, Использование, ДанныеВыбраны", ЭлементПравилоЗаполнения.НомерСтроки, Истина, Истина));
					
					НаборыДанных = Новый Структура;
					
					Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
						
						НаборыДанных.Вставить("НаборДанных" + Формат(НайденнаяСтрока.НомерСтроки, "ЧГ=0"), НайденнаяСтрока.НаборДанных);
						
					КонецЦикла;
					
					ПравилоПреобразования = Новый Структура("ВариантПреобразования, Исключать", ЭлементПравилоЗаполнения.ВариантПреобразования, ЭлементПравилоЗаполнения.Исключать);
					
					Если ЭлементПравилоЗаполнения.НомерСтрокиРодитель = 99999 Тогда
						
						ЭлементПравилоЗаполнения.НаборДанных = ПреобразоватьДанныеПоПравилу(НаборыДанных, ПравилоПреобразования, ПользовательскиеНастройки, ДополнительныеПараметры);
						Результат = ЭлементПравилоЗаполнения.НаборДанных;
						
					Иначе
						
						ЭлементПравилоЗаполнения.НаборДанных = ПреобразоватьДанныеПоПравилу(НаборыДанных, ПравилоПреобразования);
						
					КонецЕсли;
						
					ЭлементПравилоЗаполнения.ДанныеВыбраны = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразоватьДанныеПоПравилу(НаборыДанных, ПараметрыПреобразования, ПользовательскиеНастройки = Неопределено, ДополнительныеПараметры = Неопределено)
	
	СхемаКомпоновкиДанных = Документы.ПланПродажИВнутреннегоПотребления.ПолучитьМакет("СхемаКомпоновкиДанныхПреобразование");
	
	// Добавление предопределенных параметров и установка значений.
	НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Добавить();
	НовыйПараметр.Имя = "Коэффициент";
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("Число");
	НовыйПараметр.Значение = 1;
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	// Добавление параметров из дополнительных параметров и установка значений.
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ПараметрыДанных") <> Неопределено Тогда
		
		Для каждого Параметр из ДополнительныеПараметры.ПараметрыДанных Цикл
			
			НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Найти(Параметр.Ключ);
			
			Если НовыйПараметр = Неопределено Тогда
				
				НовыйПараметр = СхемаКомпоновкиДанных.Параметры.Добавить();
				НовыйПараметр.Имя = Параметр.Ключ;
				НовыйПараметр.ОграничениеИспользования = Ложь;

			КонецЕсли;
			
			НовыйПараметр.Значение = Параметр.Значение;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборДанныхОбъединение = СхемаКомпоновкиДанных.НаборыДанных.Объединение;
	НаборДанныхОбъединение.Элементы.Удалить(НаборДанныхОбъединение.Элементы.НаборДанных);
	
	ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = "Количество";
	
	Если ПараметрыПреобразования.ВариантПреобразования = Перечисления.ВариантыПреобразования.Сложение Тогда
		
		ПолеИтога.Выражение = "Сумма(Количество) * &Коэффициент";
		
	ИначеЕсли ПараметрыПреобразования.ВариантПреобразования = Перечисления.ВариантыПреобразования.Максимум Тогда
		
		ПолеИтога.Выражение = "Максимум(Количество) * &Коэффициент";
		
	ИначеЕсли ПараметрыПреобразования.ВариантПреобразования = Перечисления.ВариантыПреобразования.Среднее Тогда
		
		ПолеИтога.Выражение = "Среднее(Количество) * &Коэффициент";
		
	ИначеЕсли ПараметрыПреобразования.ВариантПреобразования = Перечисления.ВариантыПреобразования.Минимум Тогда
		
		ПолеИтога.Выражение = "Минимум(Количество) * &Коэффициент";
		
	КонецЕсли;
	
	// Добавление наборов данных для каждого исходного набора данных.
	Для каждого НаборДанных из НаборыДанных Цикл
		
		// Добавление набора данных.
		НаборДанныхОбъект = НаборДанныхОбъединение.Элементы.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
		НаборДанныхОбъект.Имя = НаборДанных.Ключ;
		НаборДанныхОбъект.ИмяОбъекта = НаборДанных.Ключ;
		НаборДанныхОбъект.ИсточникДанных = "ИсточникДанных";
		
		// Добавление полей набора данных.
		ПолеНабораДанных = НаборДанныхОбъект.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Заголовок = "Склад";
		ПолеНабораДанных.Поле = "Склад";
		ПолеНабораДанных.ПутьКДанным = "Склад";
		ПолеНабораДанных.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Склады");
		
		ПолеНабораДанных = НаборДанныхОбъект.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Заголовок = "Номенклатура";
		ПолеНабораДанных.Поле = "Номенклатура";
		ПолеНабораДанных.ПутьКДанным = "Номенклатура";
		ПолеНабораДанных.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		
		ПолеНабораДанных = НаборДанныхОбъект.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Заголовок = "Характеристика";
		ПолеНабораДанных.Поле = "Характеристика";
		ПолеНабораДанных.ПутьКДанным = "Характеристика";
		ПолеНабораДанных.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
		
		ПолеНабораДанных = НаборДанныхОбъект.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Заголовок = "Количество";
		ПолеНабораДанных.Поле = "Количество";
		ПолеНабораДанных.ПутьКДанным = "Количество";
		ПолеНабораДанных.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3));
		
	КонецЦикла;
	
	// Загрузка настроек
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	// Загрузка настроек из дополнительных параметров
	Если ПользовательскиеНастройки <> Неопределено Тогда
		
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		
	КонецЕсли;
	
	// Включение использования параметров данных
	Для каждого ПараметрДанных из КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.Элементы Цикл
		
		ПараметрДанных.Использование = Истина;
		
	КонецЦикла;
	
	// Отключение вывода общих итогов
	КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	// Добавление ресурса
	Для каждого Элемент из КомпоновщикНастроекКомпоновкиДанных.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		
		Если Элемент.Ресурс И НЕ Элемент.Папка Тогда
			
			ВыбранноеПоле = КомпоновщикНастроекКомпоновкиДанных.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.Поле = Элемент.Поле;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление группировки
	ГруппировкаКомпоновкиДанных = КомпоновщикНастроекКомпоновкиДанных.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	// Добавление полей группировки
	Для каждого Элемент из КомпоновщикНастроекКомпоновкиДанных.Настройки.ДоступныеПоляГруппировок.Элементы Цикл
		
		Если НЕ Элемент.Ресурс Тогда
			
			ВыбранноеПоле = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.Поле = Элемент.Поле;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление поля группировки "Календарь"
	Если КомпоновщикНастроекКомпоновкиДанных.Настройки.ДоступныеПоляГруппировок.Элементы.Найти(Новый ПолеКомпоновкиДанных("Склад")) <> Неопределено Тогда
		
		ВыбранноеПоле = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Склад.Календарь");
		
	КонецЕсли;
	
	// Компоновка макета
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Инициализация процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыДанных);
	
	// Таблица значений, в которую будет получен результат
	Результат = Новый ТаблицаЗначений;
	
	// Получение результата
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(Результат);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ПараметрыПреобразования.Исключать И Результат.Колонки.Найти("Количество") <> Неопределено Тогда
		
		Для каждого СтрокаРезультата из Результат Цикл
			
			СтрокаРезультата.Количество = -СтрокаРезультата.Количество;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДлительностьПериода(НачалоПериода, ОкончаниеПериода, Календарь, ВыходныеДниКалендарей)
	
	ДлительностьПериода = (ОкончаниеПериода - НачалоПериода) / 86400 + 1;
	ДатаКалендаря = НачалоПериода;
	
	Пока ДатаКалендаря <= ОкончаниеПериода Цикл
		
		Если Классификация.ЭтоВыходнойДень(ДатаКалендаря, Календарь, ВыходныеДниКалендарей) Тогда
			
			ДлительностьПериода = ДлительностьПериода - 1;
			
		КонецЕсли;
		
		ДатаКалендаря = ДатаКалендаря + 86400;
		
	КонецЦикла;
	
	Возврат ДлительностьПериода;
	
КонецФункции

#КонецЕсли