////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
	
		Возврат;
	
	КонецЕсли;
	
	// Получение параметров
	ОбновитьДополнить = Параметры.ОбновитьДополнить;
	АдресПравилаЗаполнения = Параметры.АдресПравилаЗаполнения;
	ИзменитьРезультатНа = Параметры.ИзменитьРезультатНа;
	ТочностьОкругления = Параметры.ТочностьОкругления;
	АдресПользовательскихНастроек = Параметры.АдресПользовательскихНастроек;
	РаспределитьПоРабочимДням = Параметры.РаспределитьПоРабочимДням;
	
	// Дерево заполняется данными табличной части документа
	ВосстановитьДеревоИзТабличнойЧасти(ПравилоЗаполнения, АдресПравилаЗаполнения);
	
	ИнициализироватьКомпоновщикНастроек(АдресПользовательскихНастроек);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ПРАВИЛОЗАПОЛНЕНИЯ

&НаКлиенте
Процедура ПравилоЗаполненияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	// Корневой элемент не копируется
	Если Элемент.ТекущиеДанные.ТипЭлемента = 2 И Копирование Тогда
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Источник копируется
	Если Элемент.ТекущиеДанные.ТипЭлемента = 0 И Копирование Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Способ преобразования копируется с подчиненными
	Если Элемент.ТекущиеДанные.ТипЭлемента = 1 И Копирование Тогда
		
		Отказ = Истина;
		СкопироватьСтрокуСПодчиненными(ПравилоЗаполнения, ПравилоЗаполнения.НайтиПоИдентификатору(Элемент.ТекущаяСтрока).ПолучитьРодителя(), ПравилоЗаполнения.НайтиПоИдентификатору(Элемент.ТекущаяСтрока), Копирование);
		Возврат;
		
	КонецЕсли;
	
	Если ДобавляетсяНоваяСтрока Тогда
		
		ДобавляетсяНоваяСтрока = Ложь;
		Возврат;
		
	КонецЕсли;
		
	Отказ = Истина;
	ДобавляетсяНоваяСтрока = Истина;
		
	// Источник не может быть помещен в другой источник
	Если Элемент.ТекущиеДанные.ТипЭлемента = 0 Тогда
		
		Элемент.ТекущаяСтрока = Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор();
		
	КонецЕсли;
	
	// Добавление нового источника
	Элемент.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияПередУдалением(Элемент, Отказ)
	
	// Корневой элемент не удаляется
	Если Элемент.ТекущиеДанные.ТипЭлемента = 2 Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Если НЕ Копирование И ДобавляетсяВариантПреобразования Тогда
			
			Элемент.ТекущиеДанные.ТипЭлемента = 1;
			Элемент.ТекущиеДанные.ВариантПреобразования = ПредопределенноеЗначение("Перечисление.ВариантыПреобразования.Сложение");
			ДобавляетсяВариантПреобразования = Ложь;
			
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.ТипЭлемента = 0 Тогда
			
			Элемент.ТекущиеДанные.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ПравилоЗаполненияИсключать" Тогда
		
		Элемент.ТекущиеДанные.Исключать = НЕ Элемент.ТекущиеДанные.Исключать;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ПравилоЗаполненияНастройки" Тогда
		
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Источник) Тогда
			
			ПараметрыФормы = Новый Структура("Источник, АдресПользовательскихНастроек", Элемент.ТекущиеДанные.Источник, Элемент.ТекущиеДанные.АдресПользовательскихНастроек);
			ОткрытьФормуМодально("Документ.ПланПродажИВнутреннегоПотребления.Форма.ФормаНастройка", ПараметрыФормы, ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Для каждого Строка из ПараметрыПеретаскивания.Значение Цикл
		
		Если ПравилоЗаполнения.НайтиПоИдентификатору(Строка).ТипЭлемента = 2 Тогда
			
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыПеретаскивания.Значение = Новый Структура("ИсточникПеретаскивания, ЗначениеПеретаскивания", УникальныйИдентификатор, ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Значение.Свойство("ИсточникПеретаскивания") = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыПеретаскивания.Значение.ИсточникПеретаскивания <> УникальныйИдентификатор Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Строка <> Неопределено И (ПравилоЗаполнения.НайтиПоИдентификатору(Строка).ТипЭлемента = 2 ИЛИ ПравилоЗаполнения.НайтиПоИдентификатору(Строка).ТипЭлемента = 1) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	Если Строка <> Неопределено И (ПравилоЗаполнения.НайтиПоИдентификатору(Строка).ТипЭлемента = 2 ИЛИ ПравилоЗаполнения.НайтиПоИдентификатору(Строка).ТипЭлемента = 1) Тогда
		
		Модифицированность = Истина;
		СтандартнаяОбработка = Ложь;
		
		Для каждого ИдентификаторПеретаскиваемойСтроки из ПараметрыПеретаскивания.Значение.ЗначениеПеретаскивания Цикл

			ПеретаскиваемаяСтрока = ПравилоЗаполнения.НайтиПоИдентификатору(ИдентификаторПеретаскиваемойСтроки);
			
			СкопироватьСтрокуСПодчиненными(ПравилоЗаполнения, ПравилоЗаполнения.НайтиПоИдентификатору(Строка), ПеретаскиваемаяСтрока, ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование);
			
			Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение Тогда
				
				ПеретаскиваемаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ПеретаскиваемаяСтрока);
				
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияИсточникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.ПравилоЗаполнения.ТекущиеДанные.Источник = ВыбранноеЗначение.Значение;
	Элементы.ПравилоЗаполнения.ТекущиеДанные.Использование = Истина;
	Элементы.ПравилоЗаполнения.ТекущиеДанные.ВариантПериода = ВыбранноеЗначение.ОграничениеВыборкиПоПериоду;
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоЗаполненияВариантПреобразованияПриИзменении(Элемент)
	
	Элементы.ПравилоЗаполнения.ТекущиеДанные.Использование = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ДобавитьНовыйВариантПреобразования(Команда)
	
	// Способ преобразования не может быть помещен в источник
	Если Элементы.ПравилоЗаполнения.ТекущиеДанные.ТипЭлемента = 0 Тогда
		
		Элементы.ПравилоЗаполнения.ТекущаяСтрока = Элементы.ПравилоЗаполнения.ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор();
		
	КонецЕсли;
	
	ДобавляетсяНоваяСтрока = Истина;
	ДобавляетсяВариантПреобразования = Истина;
	
	// Добавление нового способа преобразования
	Элементы.ПравилоЗаполнения.ДобавитьСтроку();
	Элементы.ПравилоЗаполнения.ТекущийЭлемент = Элементы.ПравилоЗаполненияВариантПреобразования;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокумент(Команда)
	
	ПоместитьВоВременноеХранилищеПравилоЗаполнения(ПравилоЗаполнения, АдресПравилаЗаполнения);
	ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПользовательскиеНастройки, АдресПользовательскихНастроек);
	
	Закрыть(КодВозвратаДиалога.OK);
	
	Структура = Новый Структура;
	Структура.Вставить("ОбновитьДополнить", ОбновитьДополнить);
	Структура.Вставить("ИзменитьРезультатНа", ИзменитьРезультатНа);
	Структура.Вставить("ТочностьОкругления", ТочностьОкругления);
	Структура.Вставить("РаспределитьПоРабочимДням", РаспределитьПоРабочимДням);
	
	ОповеститьОВыборе(Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура Разгруппировать(Команда)
	
	// Разгруппировать можно только только одну группу
	ВыделенныеСтроки = Элементы.ПравилоЗаполнения.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 1 И ПравилоЗаполнения.НайтиПоИдентификатору(ВыделенныеСтроки[0]).ТипЭлемента = 1 Тогда
		
		РазгруппировываемаяСтрока = ПравилоЗаполнения.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
		
		Для каждого КопируемаяСтрока из РазгруппировываемаяСтрока.ПолучитьЭлементы() Цикл
			
			СкопироватьСтрокуСПодчиненными(ПравилоЗаполнения, РазгруппировываемаяСтрока.ПолучитьРодителя(), КопируемаяСтрока, Ложь);
			
		КонецЦикла;
		
		РазгруппировываемаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(РазгруппировываемаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьИсточники(Команда)
	
	// Группировка возможна только для элементов с одним родителем
	ПредыдущийРодитель = Неопределено;
	
	ВыделенныеСтроки = Элементы.ПравилоЗаполнения.ВыделенныеСтроки;
	ГруппировкаВозможна = ВыделенныеСтроки.Количество() > 0;
	
	ИндексПервойВыделеннойСтроки = Неопределено;
	
	Для каждого ВыделеннаяСтрока из ВыделенныеСтроки Цикл
		
		ДанныеФормыЭлементДерева = ПравилоЗаполнения.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		ТекущийРодитель = ДанныеФормыЭлементДерева.ПолучитьРодителя();
		
		// Корневой элемент или разные родители
		Если ДанныеФормыЭлементДерева.ТипЭлемента = 2 ИЛИ ПредыдущийРодитель <> Неопределено И ТекущийРодитель <> ПредыдущийРодитель Тогда
			
			ГруппировкаВозможна = Ложь;
			Прервать;
			
		КонецЕсли;
		
		ПредыдущийРодитель = ТекущийРодитель;
		
		Если ИндексПервойВыделеннойСтроки = Неопределено Тогда
			
			ИндексПервойВыделеннойСтроки = ДанныеФормыЭлементДерева.ПолучитьРодителя().ПолучитьЭлементы().Индекс(ДанныеФормыЭлементДерева);
			
		Иначе
			
			ИндексПервойВыделеннойСтроки = Мин(ИндексПервойВыделеннойСтроки, ДанныеФормыЭлементДерева.ПолучитьРодителя().ПолучитьЭлементы().Индекс(ДанныеФормыЭлементДерева));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ГруппировкаВозможна Тогда
		
		НовыйВариантПреобразования = ПредыдущийРодитель.ПолучитьЭлементы().Вставить(ИндексПервойВыделеннойСтроки);
		НовыйВариантПреобразования.Использование = Истина;
		НовыйВариантПреобразования.ТипЭлемента = 1;
		НовыйВариантПреобразования.ВариантПреобразования = ПредопределенноеЗначение("Перечисление.ВариантыПреобразования.Сложение");
		
		Для каждого ВыделеннаяСтрока из ВыделенныеСтроки Цикл
			
			КопируемаяСтрока = ПравилоЗаполнения.НайтиПоИдентификатору(ВыделеннаяСтрока);
			
			СкопироватьСтрокуСПодчиненными(ПравилоЗаполнения, НовыйВариантПреобразования, КопируемаяСтрока, Ложь);
			
			КопируемаяСтрока = ПравилоЗаполнения.НайтиПоИдентификатору(ВыделеннаяСтрока);
			КопируемаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(КопируемаяСтрока);
			
		КонецЦикла;
		
		Элементы.ПравилоЗаполнения.Развернуть(НовыйВариантПреобразования.ПолучитьИдентификатор(), Истина);
		Элементы.ПравилоЗаполнения.ТекущаяСтрока = НовыйВариантПреобразования.ПолучитьИдентификатор();
		Элементы.ПравилоЗаполнения.ТекущийЭлемент = Элементы.ПравилоЗаполненияВариантПреобразования;
		Элементы.ПравилоЗаполнения.ИзменитьСтроку();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	УстановитьПометкиСПодчиненными(ПравилоЗаполнения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	УстановитьПометкиСПодчиненными(ПравилоЗаполнения, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек(АдресПользовательскихНастроек)
	
	СхемаКомпоновкиДанных = Документы.ПланПродажИВнутреннегоПотребления.ПолучитьМакет("СхемаКомпоновкиДанныхПреобразование");
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор)));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ПользовательскиеНастройки = ПолучитьИзВременногоХранилища(АдресПользовательскихНастроек);
	
	Если ПользовательскиеНастройки <> Неопределено Тогда
		
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтрокуСПодчиненными(Дерево, Приемник, Источник, Копирование, СкопированныеСтроки = Неопределено)
	
	// Скопированные строки сохраняются в массив
	Если СкопированныеСтроки = Неопределено Тогда
		
		СкопированныеСтроки = Новый Массив;
		
	КонецЕсли;
	
	// Если строка источник есть в скопированных строках, копирование завершается
	Если СкопированныеСтроки.Найти(Источник.ПолучитьИдентификатор()) <> Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока = Приемник.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
	
	// Добавленная строка помещается в скопированные строки
	СкопированныеСтроки.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	
	// Для скопированных источников данных создается новое хранилище настроек
	Если НоваяСтрока.ТипЭлемента = 0 И Копирование Тогда
		
		НоваяСтрока.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		
	КонецЕсли;
	
	// Копируются подчиненные строки
	Для каждого ПодчиненнаяСтрокаИсточника из Источник.ПолучитьЭлементы() Цикл
		
		СкопироватьСтрокуСПодчиненными(Дерево, НоваяСтрока, ПодчиненнаяСтрокаИсточника, Копирование, СкопированныеСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КорневойЭлемент(Дерево)
	
	ДеревоЭлементы = Дерево.ПолучитьЭлементы();
	
	// Корневой элемент уже добавлен
	Если ДеревоЭлементы.Количество() > 0 Тогда
		
		Возврат ДеревоЭлементы.Получить(0);
		
	КонецЕсли;
	
	// Добавление корневого элемента
	КорневойЭлемент = ДеревоЭлементы.Добавить();
	
	КорневойЭлемент.Источники = НСтр("ru = 'Источники'");
	КорневойЭлемент.ТипЭлемента = 2; // Корневой элемент
	
	Возврат КорневойЭлемент;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуДереваВТабличнуюЧасть(ТабличнаяЧасть, ДобавляемаяСтрока, Родитель = 0)
	
	ТабличнаяЧастьНоваяСтрока = ТабличнаяЧасть.Добавить();
	
	ТабличнаяЧастьНоваяСтрока.Использование = ДобавляемаяСтрока.Использование;
	ТабличнаяЧастьНоваяСтрока.Исключать = ДобавляемаяСтрока.Исключать;
	ТабличнаяЧастьНоваяСтрока.ВариантПреобразования = ДобавляемаяСтрока.ВариантПреобразования;
	ТабличнаяЧастьНоваяСтрока.Источник = ДобавляемаяСтрока.Источник;
	ТабличнаяЧастьНоваяСтрока.Период = Новый ХранилищеЗначения(ДобавляемаяСтрока.Период);
	ТабличнаяЧастьНоваяСтрока.Дата = Новый ХранилищеЗначения(ДобавляемаяСтрока.Дата);
	ТабличнаяЧастьНоваяСтрока.ТипЭлемента = ДобавляемаяСтрока.ТипЭлемента;
	ТабличнаяЧастьНоваяСтрока.НомерСтроки = ТабличнаяЧасть.Количество();
	ТабличнаяЧастьНоваяСтрока.НомерСтрокиРодитель = Родитель;
	
	Если ДобавляемаяСтрока.ТипЭлемента = 0 Тогда
		
		ТабличнаяЧастьНоваяСтрока.ПользовательскиеНастройки = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(ДобавляемаяСтрока.АдресПользовательскихНастроек));
		
	КонецЕсли;
	
	Для каждого СтрокаДерева из ДобавляемаяСтрока.ПолучитьЭлементы() Цикл
		
		ДобавитьСтрокуДереваВТабличнуюЧасть(ТабличнаяЧасть, СтрокаДерева, ТабличнаяЧастьНоваяСтрока.НомерСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВосстановитьДеревоИзТабличнойЧасти(Дерево, АдресПравилаЗаполнения)
	
	ТабличнаяЧасть = ПолучитьИзВременногоХранилища(АдресПравилаЗаполнения);
	
	Дерево.ПолучитьЭлементы().Очистить();
	
	КорневойЭлемент = КорневойЭлемент(Дерево);
	
	ДобавленныеСтрокиДерева = Новый Массив;
	ДобавленныеСтрокиДерева.Добавить(КорневойЭлемент);
	
	Для каждого СтрокаТабличнойЧасти из ТабличнаяЧасть Цикл
		
		ДеревоНоваяСтрока = ДобавленныеСтрокиДерева[СтрокаТабличнойЧасти.НомерСтрокиРодитель].ПолучитьЭлементы().Добавить();
		
		ДеревоНоваяСтрока.Использование = СтрокаТабличнойЧасти.Использование;
		ДеревоНоваяСтрока.Исключать = СтрокаТабличнойЧасти.Исключать;
		ДеревоНоваяСтрока.ВариантПреобразования = СтрокаТабличнойЧасти.ВариантПреобразования;
		ДеревоНоваяСтрока.Источник = СтрокаТабличнойЧасти.Источник;
		ДеревоНоваяСтрока.Период = СтрокаТабличнойЧасти.Период.Получить();
		ДеревоНоваяСтрока.Дата = СтрокаТабличнойЧасти.Дата.Получить();
		ДеревоНоваяСтрока.ТипЭлемента = СтрокаТабличнойЧасти.ТипЭлемента;
		ДеревоНоваяСтрока.ВариантПериода = СтрокаТабличнойЧасти.Источник.ОграничениеВыборкиПоПериоду;
		
		Если СтрокаТабличнойЧасти.ТипЭлемента = 0 Тогда
			
			ДеревоНоваяСтрока.АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(СтрокаТабличнойЧасти.ПользовательскиеНастройки.Получить(), Новый УникальныйИдентификатор);
			
		КонецЕсли;
		
		ДобавленныеСтрокиДерева.Добавить(ДеревоНоваяСтрока);
		
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиСПодчиненными(Дерево, Значение)
	
	ДеревоЭлементы = Дерево.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева из ДеревоЭлементы Цикл
		
		ЭлементДерева.Использование = Значение;
		УстановитьПометкиСПодчиненными(ЭлементДерева, Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьВоВременноеХранилищеПравилоЗаполнения(Знач Данные, Адрес)
	
	ПравилоЗаполненияТаблица = ПолучитьИзВременногоХранилища(Адрес);
	
	ПравилоЗаполненияТаблица.Очистить();
	
	Для каждого СтрокаДанные из Данные.ПолучитьЭлементы().Получить(0).ПолучитьЭлементы() Цикл
		
		ДобавитьСтрокуДереваВТабличнуюЧасть(ПравилоЗаполненияТаблица, СтрокаДанные);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ПравилоЗаполненияТаблица, Адрес);
	
КонецПроцедуры
