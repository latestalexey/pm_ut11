
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		Если Параметры.Свойство("Основание") Тогда
			Основание = Параметры.Основание;
			Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
				
				Объект.ХозяйственнаяОперация	= Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника;
				Объект.СуммаДокумента			= Параметры.Основание.СуммаДокумента;
				ХозяйственнаяОперацияПриИзмененииСервер();
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ДенежныеСредстваСервер.УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(ЭтаФорма, Элементы.ХозяйственнаяОперация);
	ДенежныеСредстваСервер.УстановитьВидимостьОперацииПрочиеДоходы(ЭтаФорма, Элементы.ХозяйственнаяОперация);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов") Тогда
	
		Объект.БанковскийСчет	= ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию();
		СтруктураРеквизитов	= ПолучитьРеквизитыБанковскогоСчета(Объект.БанковскийСчет);
		Объект.Организация	= СтруктураРеквизитов.Организация;
		Объект.Валюта		= СтруктураРеквизитов.Валюта;

	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ФинансыКлиент.ПроверитьЗаполнениеДокументаНаОсновании(
			Объект,
			Основание
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоРасчетамСПартнерами" Тогда
		
		ПолучитьРасшифровкуПлатежаИзХранилища(РезультатВыбора.АдресПлатежейВХранилище);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ФинансыКлиент.ПересчитатьСуммуДокументаПоРасшифровкеПлатежа(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПоступлениеБезналичныхДенежныхСредств", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ФинансыКлиент.ОчиститьСуммуВзаиморасчетовРасшифровкиПлатежа(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	СтруктураРеквизитов = ПолучитьРеквизитыБанковскогоСчета(Объект.БанковскийСчет);
	
	Если НЕ ФинансыКлиент.НеобходимПересчетВВалюту(Объект, Объект.Валюта, СтруктураРеквизитов.Валюта) Тогда
		
		БанковскийСчетПриИзмененииСервер(СтруктураРеквизитов, Ложь);
		ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		
	ИначеЕсли ФинансыКлиент.РазрешенПересчетВВалюту(СтруктураРеквизитов.Валюта) Тогда
		
		ТекущаяВалюта = Объект.Валюта;
		БанковскийСчетПриИзмененииСервер(СтруктураРеквизитов, Истина);
		ФинансыКлиент.ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ТекущаяВалюта, Объект.Валюта);
		
	Иначе
		
		Объект.БанковскийСчет = ТекущийБанковскийСчет;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ФинансыКлиент.ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, Объект.СуммаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаКонвертацииПриИзменении(Элемент)
	
	ПересчитатьКурсКонвертации();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ РАСШИФРОВКА ПЛАТЕЖА

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ПолучитьПартнераПоУмолчаниюСервер(Объект.Контрагент, Партнер);
	КонецЕсли;
	ФинансыКлиент.РасшифровкаПлатежаПриНачалеРедактирования(
		Объект,
		Партнер,
		ДоговорКонтрагента,
		СтрокаТаблицы,
		НоваяСтрока,
		Копирование
	);

	Если НоваяСтрока И Не Копирование Тогда
		
		Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочиеДоходы") Тогда
			Если Не ЗначениеЗаполнено(Подразделение) Тогда
				ПолучитьПодразделениеПоУмолчанию();
			КонецЕсли;
			СтрокаТаблицы.Подразделение = Подразделение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	СтрокаТаблицы.ВалютаВзаиморасчетов = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеПлатежа) Тогда
		СтрокаТаблицы.Заказ = Неопределено;
		ФинансыКлиент.УстановитьПустуюСсылкуНаЗаказ(СтрокаТаблицы.Заказ, ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ФинансыКлиент.ДокументРасчетовНачалоВыбора(
		Объект.Организация,
		Неопределено, // Партнер
		Объект.Контрагент,
		Неопределено, // Соглашение
		ФинансыКлиент.ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация),
		Истина, // ВыборОснованияПлатежа
		Элемент,
		СтандартнаяОбработка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора, Объект.Организация, Объект.Контрагент, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора, Объект.Организация, Объект.Контрагент, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаОснованиеПлатежаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВалютаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтатьяДоходовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяДоходов) Тогда
		РасшифровкаПлатежаСтатьяДоходовПриИзмененииСервер(
			СтрокаТаблицы.СтатьяДоходов,
			СтрокаТаблицы.Подразделение,
			СтрокаТаблицы.АналитикаДоходов
		);
	Иначе
		СтрокаТаблицы.АналитикаДоходов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтрокаТаблицы.СуммаВзаиморасчетов = 0;
	РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСервер(СтрокаТаблицы.ДоговорКредитаДепозита,
																СтрокаТаблицы.ВалютаВзаиморасчетов,
																СтрокаТаблицы.СтатьяДвиженияДенежныхСредств);
																
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПодборПоОстаткам(Команда)
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("БанковскийСчет", "Банковский счет");
	СтруктураРеквизитов.Вставить("Контрагент");
	
	Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтаФорма, Неопределено, СтруктураРеквизитов) Тогда

		АдресПлатежейВХранилище = ПоместитьРасшифровкуПлатежаВХранилище();
		ПараметрыПодбора = Новый Структура("
			|АдресПлатежейВХранилище, 
			|Организация, 
			|Контрагент,
			|Валюта,
			|СуммаДокумента,
			|ДатаДокумента,
			|ХозяйственнаяОперация",
			АдресПлатежейВХранилище,
			Объект.Организация, 
			Объект.Контрагент,
			Объект.Валюта,
			Объект.СуммаДокумента,
			Объект.Дата,
			Объект.ХозяйственнаяОперация
		);
		ОткрытьФорму(
			"ОбщаяФорма.ПодборПоРасчетамСПартнерами",
			ПараметрыПодбора, 
			ЭтаФорма
		);
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииСервер()
	
	УстановитьВидимость();
	УстановитьОтметкуНезаполненного();
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаПлатежаПартнер);
	
	Объект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	
	ПолучитьДоговорПоУмолчаниюСервер();
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетПриИзмененииСервер(СтруктураРеквизитов, ПересчитыватьСуммы)
	
	ТекущийБанковскийСчет = Объект.БанковскийСчет;
	
	Если ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Объект.Организация = СтруктураРеквизитов.Организация;
		ПолучитьДоговорПоУмолчаниюСервер();
	КонецЕсли;
	
	ТекущаяВалюта = Объект.Валюта;
	Объект.Валюта = СтруктураРеквизитов.Валюта;
	
	Если ПересчитыватьСуммы Тогда
		ПересчетСуммДокументаВВалюту(ТекущаяВалюта);
	КонецЕсли;
	
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(Объект.Валюта, Элементы);
	
	Объект.БанковскийСчетКонтрагента = ПредопределенноеЗначение("Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка");
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		ПересчитатьКурсКонвертации();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент);
		
		ПолучитьДоговорПоУмолчаниюСервер();
		
		Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			Объект.БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
				Объект.Контрагент,
				Объект.Валюта
			);
		КонецЕсли;
		
		ЗаполнитьСписаниеБезналичныхДенежныхСредствПоУмолчаниюСервер();
		
		Элементы.РасшифровкаПлатежаДоговорКредитаДепозита.ПараметрыВыбора = ПараметрыВыбораДоговоровКредитовДепозитов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьКурсКонвертации()
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КурсКонвертации = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		Объект.Валюта,
		Объект.ВалютаКонвертации,
		Объект.Дата
	);
	Если КурсКонвертации <> 0 Тогда
		Если Объект.ВалютаКонвертации = ВалютаРегламентированногоУчета Тогда
			Объект.КурсКонвертации = КурсКонвертации;
		Иначе
			Объект.КурсКонвертации = 1 / КурсКонвертации;
		КонецЕсли;
	Иначе
		Объект.КурсКонвертации = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаСтатьяДоходовПриИзмененииСервер(СтатьяДоходов, Подразделение, АналитикаДоходов);
	
	Если Не ЗначениеЗаполнено(АналитикаДоходов) Тогда
		АналитикаДоходов = ПланыВидовХарактеристик.СтатьиДоходов.ПолучитьАналитикуДоходовПоУмолчанию(
			СтатьяДоходов,
			Объект,
			Подразделение
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасшифровкаПлатежаОснованиеПлатежаОбработкаПолученияДанныхВыбора(ДанныеВыбора, Организация, Контрагент, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ВзаиморасчетыСервер.ЗаполнитьДанныеВыбораОснованияПлатежа(ДанныеВыбора, Текст, Новый Структура("Организация, Контрагент", Организация, Контрагент));
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Управление элементами формы

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	УстановитьВидимость();
	УстановитьОтметкуНезаполненного();
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораБанковскогоСчета(Объект, Элементы.БанковскийСчет);
	ДенежныеСредстваСервер.УстановитьПараметрыВыбораПартнера(Объект, Элементы.РасшифровкаПлатежаПартнер);
	
	ДенежныеСредстваСервер.УстановитьЗаголовокСуммыПлатежа(
		Объект.Валюта,
		Элементы
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ПоступлениеБезналичныхДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.УстановитьВидимостьПодбораПоОстаткамРасчетов(
		Объект.ХозяйственнаяОперация,
		Элементы.РасшифровкаПлатежаПодборПоОстаткам
	);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуНезаполненного()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы
	 ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств Тогда
		Элементы.ДатаВходящегоДокумента.АвтоОтметкаНезаполненного = Ложь;
		Элементы.НомерВходящегоДокумента.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ДатаВходящегоДокумента.ОтметкаНезаполненного = Ложь;
		Элементы.НомерВходящегоДокумента.ОтметкаНезаполненного = Ложь;
	Иначе
		Элементы.ДатаВходящегоДокумента.АвтоОтметкаНезаполненного = Истина;
		Элементы.НомерВходящегоДокумента.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция ПараметрыВыбораДоговоровКредитовДепозитов()

	МассивПараметров = Новый Массив;
	Если НЕ Объект.БанковскийСчет.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация",  Объект.БанковскийСчет.Владелец));		
	ИначеЕсли НЕ Объект.Организация.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
	КонецЕсли;
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ФормаОплаты", Перечисления.ФормыОплаты.Безналичная));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ХарактерДоговора", Справочники.ДоговорыКредитовИДепозитов.ХарактерДоговораПоОперации(Объект.ХозяйственнаяОперация)));
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления",Ложь));
	Если НЕ Объект.Контрагент.Пустая() Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(МассивПараметров);
	
КонецФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ТекущийБанковскийСчет = Объект.БанковскийСчет;
	УправлениеЭлементамиФормы();
	Элементы.РасшифровкаПлатежаДоговорКредитаДепозита.ПараметрыВыбора = ПараметрыВыбораДоговоровКредитовДепозитов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасшифровкаПлатежаДоговорКредитаДепозитаПриИзмененииСервер(Договор, Валюта, СтатьяДДС)	

	РеквизитыДоговора = Справочники.ДоговорыКредитовИДепозитов.РеквизитыДоговора(Договор);
	Валюта = РеквизитыДоговора.ВалютаВзаиморасчетов;
	Если РеквизитыДоговора.ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм Тогда
		СтатьяДДС = РеквизитыДоговора.СтатьяДДСПоступленияВыдачи;
	Иначе
		СтатьяДДС = РеквизитыДоговора.СтатьяДДСОсновногоДолга;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьРасшифровкуПлатежаВХранилище()
	
	АдресПлатежейВХранилище = ДенежныеСредстваСервер.ПоместитьРасшифровкуПлатежаВХранилище(
		Объект.РасшифровкаПлатежа,
		УникальныйИдентификатор
	);	
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьРасшифровкуПлатежаИзХранилища(АдресПлатежейВХранилище)

	Объект.РасшифровкаПлатежа.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДоговорПоУмолчаниюСервер()
	
	ХозяйственнаяОперацияДоговора = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента Тогда
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	КонецЕсли;
	ДоговорКонтрагента = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
		ДоговорКонтрагента,
		Партнер,
		Объект.Контрагент,
		Объект.Организация,
		ХозяйственнаяОперацияДоговора,
		, // ВалютаВзаиморасчетов
		, // Соглашение
		Истина // ПорядокРасчетовПоДоговорам			
	);
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(ДоговорКонтрагента, , Объект.БанковскийСчетКонтрагента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьПартнераПоУмолчаниюСервер(Контрагент, Партнер)
	
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписаниеБезналичныхДенежныхСредствПоУмолчаниюСервер()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
	 И Не ЗначениеЗаполнено(Объект.СписаниеБезналичныхДенежныхСредств) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|	ДанныеРегистра.Документ КАК Документ,
		|	ДанныеРегистра.СуммаОстаток КАК Сумма
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКПоступлениюБезналичные.Остатки(,
		|   	ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредствКПоступлению.КонвертацияВалюты)
		|		И Организация = &Организация
		|		И БанковскийСчет = &БанковскийСчет
		|		И Документ.Контрагент = &Контрагент
		|	) КАК ДанныеРегистра
		|");
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("БанковскийСчет", Объект.БанковскийСчет);
		Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			
			Выборка.Следующий();
			
			Объект.СписаниеБезналичныхДенежныхСредств = Выборка.Документ;
			Если Объект.СуммаДокумента = 0 Тогда
				Объект.СуммаДокумента = Выборка.Сумма;
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьПодразделениеПоУмолчанию()
	
	Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Пользователи.ТекущийПользователь());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет)
	
	Возврат Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
	
КонецФункции

&НаСервере
Процедура ПересчетСуммДокументаВВалюту(ТекущаяВалюта)
	
	ДенежныеСредстваСервер.ПересчетСуммДокументаВВалюту(
		Объект,
		ТекущаяВалюта,
		Объект.Валюта
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиЗаказ(Команда)
	НайтиЗаказНаСервере();
КонецПроцедуры

&НаСервере
Процедура НайтиЗаказНаСервере()
	
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка,
	//|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Заказ,
	//|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка.НазначениеПлатежа КАК Назначение,
	//|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.ОснованиеПлатежа
	//|ИЗ
	//|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа
	//|ГДЕ
	//|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка = &Ссылка";
	//
	//Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//Выборка.Следующий();	
	//Если ЗначениеЗаполнено(Выборка.ОснованиеПлатежа) Тогда
	//	Возврат;
	//КонецЕсли;	
		
	ДлинаНазначения = СтрДлина(Объект.НазначениеПлатежа);
	НовыйНомер = "";
	ПервыйСимвол = 0;
	ДлинаСимволов = 1;
	
	Для Символ = 1 По ДлинаНазначения Цикл
		
		ТекСимвол = Сред(Объект.НазначениеПлатежа, Символ, 1);
		
		Если ТекСимвол = " " Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСимвол = "." Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Если ТипЗнч(Число(ТекСимвол)) = Тип("Число") Тогда
				ДлинаСимволов = ДлинаСимволов + 1;
				Для ДлинаСимволов = 1 По ДлинаНазначения Цикл
					ТекСимвол = Сред(Объект.НазначениеПлатежа, Символ+ДлинаСимволов, 1);
					ТекНомер = Сред(Объект.НазначениеПлатежа, Символ, ДлинаСимволов);
					Если ТекСимвол = " " Тогда
						НовыйНомер = ТекНомер;
						Символ = Символ+ДлинаСимволов;
						Прервать
					КонецЕсли;	
				КонецЦикла;	
				Продолжить;
			КонецЕсли;
		Исключение
		КонецПопытки;
					
		// Проверить слово от
		Если ВРег(Сред(Объект.НазначениеПлатежа, Символ, 2)) = "ОТ" Тогда
			//Строка.Результат = НовыйНомер;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(НовыйНомер) Тогда
		Возврат;
	КонецЕсли;	
	
	Номер = НовыйНомер;
	НужнаяДлина = 5;
	ТекДлина = СтрДлина(НовыйНомер);
	Для Длина = ТекДлина По НужнаяДлина Цикл
		Номер = "0" + Номер;
	КонецЦикла;
	
	Номер = "ПМ00-" + Номер;
	//Строка.Результат = Номер;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКлиента.Ссылка
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Номер = &Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказКлиента.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Номер", Номер);
	
	ВыборкаДок = Запрос.Выполнить().Выбрать();
	
	Документ = Неопределено;
	
	Если ВыборкаДок.Следующий() Тогда
		Документ = ВыборкаДок.Ссылка;
		Для Каждого Строка Из Объект.РасшифровкаПлатежа Цикл
			Строка.ОснованиеПлатежа = Документ;
			Строка.Заказ = Документ;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
