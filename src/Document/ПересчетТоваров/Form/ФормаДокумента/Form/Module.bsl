&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		НастроитьПоСкладуПомещению();
		ИнициализироватьКомпоновкуДанных(Ложь);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		
		Элементы.ЯчейкаКонсолидацииИзлишковТоваров.Доступность = Объект.ИспользоватьОтдельнуюЯчейкуИзлишков;
		Элементы.ЯчейкаКонсолидацииИспорченныхТоваров.Доступность = Объект.ИспользоватьОтдельнуюЯчейкуПорчи;
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.Товары,
			Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
				Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
			)
		);
		ЗаполнитьПризнакРасхождение();
		УстановитьСостояниеРедактированияПоСтатусу();
		
		Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРаспоряженияНаИнвентаризацию") Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСкопировать", "Видимость", Ложь);
	Иначе
		Объект.ВидЦены = Справочники.Склады.УчетныйВидЦены(Объект.Склад);
	КонецЕсли;
	
	УстановитьВидимостьВидЦены(Объект.ИсточникИнформацииОЦенахДляПечати)
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	НастроитьПоСкладуПомещению();
	ИнициализироватьКомпоновкуДанных(Ложь);
	
	Элементы.ЯчейкаКонсолидацииИзлишковТоваров.Доступность = Объект.ИспользоватьОтдельнуюЯчейкуИзлишков;
	Элементы.ЯчейкаКонсолидацииИспорченныхТоваров.Доступность = Объект.ИспользоватьОтдельнуюЯчейкуПорчи;
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	ЗаполнитьПризнакРасхождение();
	УстановитьСостояниеРедактированияПоСтатусу();
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И Не Объект.УчетныеДанныеЗаполнены 
		И Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='При проведении будет перезаполнено учетное количество во всех строках табличной части. Продолжить?'");
		
		Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.ОК);
		
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ТекущийОбъект.ОтборПересчета = Новый ХранилищеЗначения(ОтборПересчета.Настройки, Новый СжатиеДанных(9));

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	ЗаполнитьПризнакРасхождение();
	УстановитьСостояниеРедактированияПоСтатусу();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПомещениеПриИзмененииСервер();
	Объект.УчетныеДанныеЗаполнены = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	СкладПомещениеПриИзмененииСервер();
	Объект.УчетныеДанныеЗаполнены = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Объект.УчетныеДанныеЗаполнены = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если ИспользоватьАдресноеХранение
		И Объект.Проведен Тогда
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.ВнесениеРезультатов") Тогда
			Если Объект.БлокироватьЯчейки = Истина Тогда
				
				ТекстСообщения = НСтр("ru = 'Снять блокировку ячеек?'");
				
				Ответ = Вопрос(ТекстСообщения, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
				
				Если Ответ = КодВозвратаДиалога.Да Тогда
					Объект.БлокироватьЯчейки = Ложь;
					Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
					Возврат;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.ВРаботе") Тогда
			Объект.БлокироватьЯчейки = Истина;
		ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.Выполнено") Тогда
			Объект.БлокироватьЯчейки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСостояниеРедактированияПоСтатусу();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЯчейкуИзлишкиПриИзменении(Элемент)
	Элементы.ЯчейкаКонсолидацииИзлишковТоваров.Доступность = Объект.ИспользоватьОтдельнуюЯчейкуИзлишков;
	Если Не(Объект.ИспользоватьОтдельнуюЯчейкуИзлишков) Тогда
		Объект.ЯчейкаКонсолидацииИзлишковТоваров = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЯчейкуПорчиПриИзменении(Элемент)
	Элементы.ЯчейкаКонсолидацииИспорченныхТоваров.Доступность = Объект.ИспользоватьОтдельнуюЯчейкуПорчи;
	Если Не(Объект.ИспользоватьОтдельнуюЯчейкуПорчи) Тогда
		Объект.ЯчейкаКонсолидацииИспорченныхТоваров = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	ОтвественныйПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ТолькоРасхожденияПриИзменении(Элемент)
	Если ТолькоРасхождения Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Расхождение",Истина);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсточникИнформацииОЦенахДляПечатиПриИзменении(Элемент)
	
	ИсточникИнформацииОЦенахДляПечатиПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущиеДанные.ИзлишекПорча Тогда
		Объект.УчетныеДанныеЗаполнены = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "Факт");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если Не ТекущаяСтрока.ИзлишекПорча Тогда
		Объект.УчетныеДанныеЗаполнены = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "Факт");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	Если Не ТекущаяСтрока.ИзлишекПорча Тогда
		Объект.УчетныеДанныеЗаполнены = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		Элементы.Товары.ТекущиеДанные.Количество = 0;
		Элементы.Товары.ТекущиеДанные.КоличествоФакт = 0;
		Элементы.Товары.ТекущиеДанные.КоличествоУпаковок = 0;
		Элементы.Товары.ТекущиеДанные.КоличествоУпаковокФакт = 0;
		Если Не Копирование
			И Объект.Проведен Тогда
			Элементы.Товары.ТекущиеДанные.Ячейка = Объект.ЯчейкаКонсолидацииИзлишковТоваров;
		КонецЕсли;
		Если СостояниеРедактирования = "ОграниченноеРедактирование" Тогда
			Элементы.Товары.ТекущиеДанные.ИзлишекПорча = Истина;
		КонецЕсли;
	КонецЕсли;
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование);


КонецПроцедуры
 
&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования
		И НоваяСтрока Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		Если Не ТекущаяСтрока.ИзлишекПорча Тогда
			Объект.УчетныеДанныеЗаполнены = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокФактПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
    ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокФакт(СтруктураДействий);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЯчейкаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если Не ТекущиеДанные.ИзлишекПорча Тогда
		Объект.УчетныеДанныеЗаполнены = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	ОчиститьСообщения();
	
	Если СостояниеРедактирования = "НеРедактируется" Тогда
		Отказ = Истина;
	ИначеЕсли СостояниеРедактирования = "ОграниченноеРедактирование" Тогда
		Отказ = Истина;
		
		ВыделененныеСтроки = Элементы.Товары.ВыделенныеСтроки;
		
		Для Каждого Идентификатор из ВыделененныеСтроки Цикл
			
			СтрТабл = Элементы.Товары.ДанныеСтроки(Идентификатор);
			
			Если СтрТабл.ИзлишекПорча Тогда
				Объект.Товары.Удалить(СтрТабл);
			Иначе
				ТекстСообщения = НСтр("ru = 'Строку %НомерСтроки% удалить нельзя, т.к. она была добавлена до начала пересчета.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НомерСтроки%", СтрТабл.НомерСтроки);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрТабл.НомерСтроки, "НомерСтроки");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
			КонецЕсли;
		 КонецЦикла;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Заполнить(Команда)

	Если Не СкладПомещениеЗаполнены() Тогда
		Возврат;
	КонецЕсли;

	Если Объект.Товары.Количество() > 0 Тогда
		Ответ = Вопрос(НСтр("ru = 'Перед заполнением список товаров будет очищен. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.Товары.Очистить();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСервер();
 	Объект.УчетныеДанныеЗаполнены = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПоУчету(Команда)
		
	Если КоличествоФактЗаполнено() Тогда
		ТекстВопроса = НСтр("ru='В табличной части уже есть строки с заполненным фактическим количеством.
		                    |При заполнении эта информация будет утеряна. Продолжить?'");
		Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьФактПоУчетуСервер();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКачество(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ОчиститьСообщения();
	Если ТекущиеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru='Выберите строку табличной части'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Если Не(ТекущиеДанные.ИзлишекПорча) Тогда
		ТекстСообщения = НСтр("ru='Невозможно изменить качество в строке, добавленной до начала пересчета. Воспользуйтесь командой ""Разбить строку"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект.Товары["+Формат(ТекущиеДанные.НомерСтроки-1,"ЧГ=0")+"].НомерСтроки",,);
		Возврат
	КонецЕсли;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	Если ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущиеДанные.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущиеДанные.Упаковка);
	КонецЕсли;
	
	ИзменениеКачества = СкладыКлиент.ИзменитьКачество(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ИзменениеКачества
		И Объект.ИспользоватьОтдельнуюЯчейкуПорчи Тогда
			ТекущиеДанные.Ячейка = Объект.ЯчейкаКонсолидацииИспорченныхТоваров;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ИмяПоляКоличество = "КоличествоУпаковокФакт";
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ЗаголовокФормыВвода = НСтр("ru='Введите фактическое количество товара в новой строке'");
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, ИмяПоляКоличество, ЗаголовокФормыВвода, Истина);
	
	Если НоваяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(Объект.ЯчейкаКонсолидацииИзлишковТоваров) Тогда
			НоваяСтрока.Ячейка = Объект.ЯчейкаКонсолидацииИзлишковТоваров
		КонецЕсли;
		НоваяСтрока.ИзлишекПорча       = Истина;
		НоваяСтрока.Количество         = 0;
		НоваяСтрока.КоличествоУпаковок = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокФакт(СтруктураДействий);					
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)

	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкодуВыполнить()

&НаКлиенте
Процедура ПолучитьВес(Команда)
	Перем ТекущаяСтрока;
	
	ВесНоменклатуры = МенеджерОборудованияКлиент.ПолучитьДанныеИзВесов(ЭтаФорма, ТекущаяСтрока);
	
	Если ВесНоменклатуры <> Неопределено Тогда
		
		Если ИспользоватьАдресноеХранение Тогда
			
			ТекущаяСтрока.КоличествоУпаковокФакт = ВесНоменклатуры;
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "Факт");
			
			ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
			ТекущаяСтрока.Расхождение = ТекущаяСтрока.КоличествоУпаковок <> ТекущаяСтрока.КоличествоУпаковокФакт;
			
		Иначе
			
			ТекущаяСтрока.КоличествоФакт = ВесНоменклатуры;
			
			ТекущаяСтрока.КоличествоУпаковокФакт = ТекущаяСтрока.КоличествоФакт;
			ТекущаяСтрока.Расхождение = ТекущаяСтрока.Количество <> ТекущаяСтрока.КоличествоФакт;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПараметрыФормы = Новый Структура("ВариантЗаполнения, Пересчет", "ПоТоварамПересчета", Объект.Ссылка);
	ОткрытьФорму("Обработка.ВыгрузкаБазыТоваровВТСД.Форма", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура СкладПомещениеПриИзмененииСервер()
	ИспользоватьАдресноеХранениеТекущее = ИспользоватьАдресноеХранение;
		
	НастроитьПоСкладуПомещению();	
	
	Если ИспользоватьАдресноеХранениеТекущее
		И Не ИспользоватьАдресноеХранение Тогда
		Для Каждого СтрТабл из Объект.Товары Цикл
			
			СтрТабл.Упаковка               = Неопределено;
			СтрТабл.КоличествоУпаковок     = СтрТабл.Количество;
			СтрТабл.КоличествоУпаковокФакт = СтрТабл.КоличествоФакт;
			
		КонецЦикла;
	КонецЕсли;
	
	СтруктураЯчеек = Документы.ПересчетТоваров.ПолучитьЯчейкиИзлишковИБракаПоУмолчанию(Объект.Ссылка, Объект.Склад, Объект.Помещение);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураЯчеек);
	Элементы.ЯчейкаКонсолидацииИзлишковТоваров.Доступность = Объект.ИспользоватьОтдельнуюЯчейкуИзлишков;
	Элементы.ЯчейкаКонсолидацииИспорченныхТоваров.Доступность = Объект.ИспользоватьОтдельнуюЯчейкуПорчи;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьРаспоряженияНаИнвентаризацию") Тогда
		Объект.ИсточникИнформацииОЦенахДляПечати = Справочники.Склады.ИсточникИнформацииОЦенахДляПечати(Объект.Склад);
		ИсточникИнформацииОЦенахДляПечатиПриИзмененииНаСервере();
	КонецЕсли;
	
	ИнициализироватьКомпоновкуДанных(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОтвественныйПриИзмененииСервер()
	Объект.ПечататьКоличествоПоУчету = Документы.ПересчетТоваров.ПолучитьЗначениеПризнакаПечататьКоличествоПоУчетуПоУмолчанию(Объект.Ссылка,Объект.Ответственный);
КонецПроцедуры

&НаСервере
Процедура ИсточникИнформацииОЦенахДляПечатиПриИзмененииНаСервере()
	
	ИсточникИнформацииОЦенахДляПечати = Объект.ИсточникИнформацииОЦенахДляПечати;
	УстановитьЗначениеВидЦены(ИсточникИнформацииОЦенахДляПечати);
	УстановитьВидимостьВидЦены(ИсточникИнформацииОЦенахДляПечати);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ИзменятьКоличество = Не (СостояниеРедактирования = "НеРедактируется"); 
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокФакт(СтруктураДействийСДобавленнымиСтроками);
	Если СостояниеРедактирования = "ОграниченноеРедактирование" Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьФлагИзлишекПорча");
	КонецЕсли;

	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокФакт(СтруктураДействийСИзмененнымиСтроками);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.ИмяКолонкиКоличество                   = "КоличествоУпаковокФакт";
	СтруктураДействий.НеИспользоватьУпаковки                 = Не ИспользоватьАдресноеХранение;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	СтруктураДействий.ТолькоТовары                           = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;	
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ЗаполнитьСервер()
	
	УстановитьЗначениеПараметраНастроек(ОтборПересчета.Настройки, "ДатаОстатков", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата()));
	
	Если ИспользоватьАдресноеХранение Тогда
		СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("ОтборПересчетаПоЯчейкам");
	Иначе	
		СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("ОтборПересчетаПоСкладу");
	КонецЕсли;
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(ОтборПересчета);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ОтборПересчета.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Объект.Товары.Загрузить(ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	ЗаполнитьПризнакРасхождение();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФактПоУчетуСервер()
	Для Каждого СтрТабл из Объект.Товары Цикл
		СтрТабл.КоличествоФакт = СтрТабл.Количество;
		СтрТабл.КоличествоУпаковокФакт = СтрТабл.КоличествоУпаковок;
		СтрТабл.Расхождение = СтрТабл.КоличествоФакт <> СтрТабл.Количество Или СтрТабл.КоличествоУпаковок <> СтрТабл.КоличествоУпаковокФакт;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НастроитьПоСкладуПомещению()
	
	ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад,Объект.Помещение);
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад, Помещение",Объект.Склад,Объект.Помещение));
	
	ИспользоватьКачество = ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров");
	
	Элементы.ИспользоватьЯчейкуПорчи.Видимость              = ИспользоватьКачество И ИспользоватьАдресноеХранение;
	Элементы.ЯчейкаКонсолидацииИспорченныхТоваров.Видимость = ИспользоватьКачество И ИспользоватьАдресноеХранение;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПересчетТоваров));
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновкуДанных(ВсегдаИспользоватьНастройкиПоУмолчанию)

	Если ИспользоватьАдресноеХранение Тогда
		СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("ОтборПересчетаПоЯчейкам");
	Иначе
		СхемаКомпоновкиДанных = Документы.ПересчетТоваров.ПолучитьМакет("ОтборПересчетаПоСкладу");
	КонецЕсли;
		
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());

	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);

	ОтборПересчета.Инициализировать(ИсточникНастроек);

	ТекОбъект = РеквизитФормыВЗначение("Объект");
	ТекНастройки = ТекОбъект.ОтборПересчета.Получить();
	Если ТекНастройки = Неопределено
		Или ВсегдаИспользоватьНастройкиПоУмолчанию Тогда
		ОтборПересчета.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Иначе
		ОтборПересчета.ЗагрузитьНастройки(ТекНастройки);
	КонецЕсли;
	
	УстановитьЗначениеПараметраНастроек(ОтборПересчета.Настройки, "Склад" , Объект.Склад);
	УстановитьЗначениеПараметраНастроек(ОтборПересчета.Настройки, "Помещение", Объект.Помещение);

КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеПараметраНастроек(Настройки, ИмяПараметра, Значение)

	Параметр = Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Значение;
		Параметр.Использование = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеРедактированияПоСтатусу()
	
	Если Объект.Проведен Тогда
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.Выполнено") Тогда
			СостояниеРедактирования = "НеРедактируется";
		ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.ВнесениеРезультатов") Тогда
			СостояниеРедактирования = "ОграниченноеРедактирование";
		ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыПересчетовТоваров.ВРаботе") Тогда
			СостояниеРедактирования = "НеРедактируется";
		КонецЕсли;
	Иначе
		СостояниеРедактирования = "ПолноеРедактирование";
	КонецЕсли;
	Элементы.Дата.ТолькоПросмотр = Не (СостояниеРедактирования = "ПолноеРедактирование");
	Элементы.Склад.ТолькоПросмотр = Не (СостояниеРедактирования = "ПолноеРедактирование");
	Элементы.Помещение.ТолькоПросмотр = Не (СостояниеРедактирования = "ПолноеРедактирование");
	Элементы.ТоварыЗаполнить.Доступность = СостояниеРедактирования = "ПолноеРедактирование";
	Элементы.ТоварыЗаполнитьФактПоУчету.Доступность = СостояниеРедактирования = "ПолноеРедактирование"
													  Или СостояниеРедактирования = "ОграниченноеРедактирование";
	Элементы.ИзменитьКачество.Доступность = СостояниеРедактирования = "ПолноеРедактирование"
													  Или СостояниеРедактирования = "ОграниченноеРедактирование";
	Элементы.ТоварыРазбитьСтроку.Доступность = СостояниеРедактирования = "ПолноеРедактирование"
													  Или СостояниеРедактирования = "ОграниченноеРедактирование";													  
													  
	Элементы.ТоварыКонтекстноеМенюРазбитьСтроку.Доступность = СостояниеРедактирования = "ПолноеРедактирование"
													  Или СостояниеРедактирования = "ОграниченноеРедактирование";													  
	
	Элементы.ТоварыПоискПоШтрихкоду.Доступность = СостояниеРедактирования = "ПолноеРедактирование"
													  Или СостояниеРедактирования = "ОграниченноеРедактирование";													  
													  
	Элементы.ТоварыЗагрузитьДанныеИзТСД.Доступность = СостояниеРедактирования = "ПолноеРедактирование"
													  Или СостояниеРедактирования = "ОграниченноеРедактирование";													  
													  
	Элементы.ВыгрузитьДанныеВТСД.Доступность        = СостояниеРедактирования = "ПолноеРедактирование"
													  Или СостояниеРедактирования = "ОграниченноеРедактирование";													  
													  
	Элементы.ТоварыПолучитьВес.Доступность = СостояниеРедактирования = "ПолноеРедактирование"
													  Или СостояниеРедактирования = "ОграниченноеРедактирование";													  
													  
	Элементы.ТоварыКоличествоУпаковок.ТолькоПросмотр = Истина;
	
	Элементы.ТолькоРасхождения.Доступность = СостояниеРедактирования <> "ПолноеРедактирование";
	
	Элементы.Товары.ИзменятьСоставСтрок = (СостояниеРедактирования = "ПолноеРедактирование"
										  Или СостояниеРедактирования = "ОграниченноеРедактирование");
										  
	Элементы.Товары.ИзменятьПорядокСтрок = (СостояниеРедактирования = "ПолноеРедактирование"
										  Или СостояниеРедактирования = "ОграниченноеРедактирование");
										  
	Элементы.БлокироватьЯчейки.Доступность = (Объект.Статус = Перечисления.СтатусыПересчетовТоваров.ВнесениеРезультатов);
	
	Если Не Объект.Проведен Тогда
		Элементы.БлокироватьЯчейки.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакРасхождение()
	
	Для Каждого СтрТабл из Объект.Товары Цикл
		СтрТабл.Расхождение = СтрТабл.КоличествоФакт <> СтрТабл.Количество Или СтрТабл.КоличествоУпаковок <> СтрТабл.КоличествоУпаковокФакт;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция КоличествоФактЗаполнено()
	НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("КоличествоФакт", 0));
	
	Возврат НайденныеСтроки.Количество() <> Объект.Товары.Количество();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковокФакт(СтруктураДействий)
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "Факт");
	СтруктураДействий.Вставить("ЗаполнитьФлагРасхождение");
КонецПроцедуры

&НаКлиенте
Функция СкладПомещениеЗаполнены()

	Результат = Истина;
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Помещение)
			И ПолучитьФункциональнуюОпциюФормы("ИспользоватьСкладскиеПомещения") Тогда
			Результат = Ложь;
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Помещение"".
			|Для выполнения действия необходимо указать помещение, в котором проводится пересчет'");
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Помещение","Объект");
		КонецЕсли;
	Иначе
		Результат = Ложь;
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Склад"".
		|Для выполнения действия необходимо указать склад, на котором проводится пересчет'");
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Склад","Объект");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура УстановитьВидимостьВидЦены(ИсточникИнформацииОЦенахДляПечати)
	
	Если ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен Тогда
		Элементы.ВидЦены.Доступность = Истина;
	ИначеЕсли ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости Тогда
		Элементы.ВидЦены.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеВидЦены(ИсточникИнформацииОЦенахДляПечати)
	
	Если ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен Тогда
		Объект.ВидЦены = Справочники.Склады.УчетныйВидЦены(Объект.Склад);
	ИначеЕсли ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости Тогда
		Объект.ВидЦены = Неопределено;
	КонецЕсли;
	
КонецПроцедуры


