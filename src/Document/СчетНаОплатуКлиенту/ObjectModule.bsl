#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЗаполнитьПоРеализацииТоваров(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ЗаполнитьПоАктуВыполненныхРабот(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
		ЗаполнитьПоОтчетуКомитенту(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
		ЗаполнитьПоОтчетуКомиссионераОСписании(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ЗаполнитьПоДоговору(
			ДанныеЗаполнения,
			ДанныеЗаполнения
		);
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	СуммаЭтаповОплаты = ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
	
	// Процент платежа по всем этапам должен быть 100%
	Если ЭтапыГрафикаОплаты.Итог("ПроцентПлатежа") <> 100 Тогда

		ТекстОшибки = НСтр("ru='Процент платежей по всем этапам должен быть равен 100%'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ЭтапыГрафикаОплаты",
			,
			Отказ);

	КонецЕсли;
	
	Если СуммаЭтаповОплаты > 0 И СуммаДокумента <> СуммаЭтаповОплаты Тогда
		
		ТекстОшибки = НСтр("ru='Сумма документа не должна отличаться от суммы этапов оплаты'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"СуммаДокумента",
			,
			Отказ);
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		СуммаОснования = Документы.СчетНаОплатуКлиенту.ПолучитьСуммуДокументаОснования(ДокументОснование);
	
		Если СуммаДокумента > СуммаОснования Тогда
			
			ТекстОшибки = НСтр("ru='Сумма документа не может быть больше суммы основания ""%СуммаОснования%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СуммаОснования%",СуммаОснования);

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"СуммаДокумента",
				,
				Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеСервер.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	МассивРеквизитов = Новый Массив;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Наличная Тогда
		МассивРеквизитов.Добавить("Касса");
	КонецЕсли;
	
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(ЭтотОбъект, МассивРеквизитов, Новый Массив);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ЗаполнитьДокументПоОтбору(ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		
		ДокументОснование = ДанныеЗаполнения.ДокументОснование;
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ЗаполнитьПоРеализацииТоваров(
				ДокументОснование,
				ДанныеЗаполнения
			);
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			ЗаполнитьПоОтчетуКомитенту(
				ДокументОснование,
				ДанныеЗаполнения
			);
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
			ЗаполнитьПоОтчетуКомиссионераОСписании(
				ДокументОснование,
				ДанныеЗаполнения
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоРеализацииТоваров(Знач Основание, ДанныеЗаполнения)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплаты,
	|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Соглашение КАК Соглашение,
	|	ДанныеДокумента.Соглашение.Номер КАК НомерСоглашения,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговору,
	|
	|	NULL КАК Статус,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	ДанныеДокумента.Касса КАК Касса,
	|	НЕ ДанныеДокумента.Проведен КАК ЕстьОшибкиПроведен,
	|	ЛОЖЬ КАК ЕстьОшибкиСтатус,
	|	ВЫБОР
	|		КОГДА
	|			ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиХозяйственнаяОперация
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.ЗаказКлиента = НЕОПРЕДЕЛЕНО
	|		ИЛИ ДанныеДокумента.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|		ИЛИ ДанныеДокумента.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
	|		ИЛИ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|	)
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСКлиентами.СуммаОстаток,0) КАК СуммаОплаты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента=&Ссылка) КАК РасчетыСКлиентами
	|");
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса[0].Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	СуммаОснования = 0;
	ВыборкаПоДокументу = РезультатЗапроса[0].Выбрать();
	ВыборкаПоРасчетам  = РезультатЗапроса[1].Выбрать();
	
	Если ВыборкаПоДокументу.Следующий() Тогда
		
		МассивДопустимыхСтатусов = Новый Массив();
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.Согласован);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОбеспечению);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОтгрузке);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.Закрыт);
		
		Документы.СчетНаОплатуКлиенту.ПроверитьКорректностьХозяйственнойОперацииДокументаОснования(
			ВыборкаПоДокументу.ЕстьОшибкиХозяйственнаяОперация,
			ВыборкаПоДокументу.ХозяйственнаяОперация
		);
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ВыборкаПоДокументу.ДокументОснование,
			ВыборкаПоДокументу.Статус,
			ВыборкаПоДокументу.ЕстьОшибкиПроведен,
			ВыборкаПоДокументу.ЕстьОшибкиСтатус,
			МассивДопустимыхСтатусов
		);
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаПоДокументу);
		
		НазначениеПлатежа = Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
			ВыборкаПоДокументу.Номер,
			ВыборкаПоДокументу.Префикс,
			Основание
		);
		
		Если ВыборкаПоДокументу.РасчетыПоДоговору Тогда
			ДобавитьЭтапОплаты(ВыборкаПоДокументу.СуммаВзаиморасчетов, ВыборкаПоДокументу.ДатаПлатежа);
			ДанныеЗаполнения.Вставить("СуммаДокумента",  ВыборкаПоДокументу.СуммаВзаиморасчетов);
			ДанныеЗаполнения.Вставить("ЧастичнаяОплата", Ложь);
		Иначе
			ЗаполнитьСуммуДокументаПоРасчетамСКлиентами(ВыборкаПоДокументу, ВыборкаПоРасчетам, ДанныеЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоАктуВыполненныхРабот(Знач Основание, ДанныеЗаполнения)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.ФормаОплаты КАК ФормаОплаты,
	|	ДанныеДокумента.ДатаПлатежа КАК ДатаПлатежа,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Соглашение КАК Соглашение,
	|	ДанныеДокумента.Соглашение.Номер КАК НомерСоглашения,
	|   ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация,
	|	NULL КАК Статус,
	|	НЕ ДанныеДокумента.Проведен КАК ЕстьОшибкиПроведен,
	|	ЛОЖЬ КАК ЕстьОшибкиСтатус,
	|	ЛОЖЬ КАК ЕстьОшибкиХозяйственнаяОперация,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговору,
	|
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	ДанныеДокумента.Касса КАК Касса
	|
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И (ДанныеДокумента.ЗаказКлиента = НЕОПРЕДЕЛЕНО
	|		ИЛИ ДанныеДокумента.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
	|		ИЛИ ДанныеДокумента.ЗаказКлиента = ЗНАЧЕНИЕ(Документ.ЗаявкаНаВозвратТоваровОтКлиента.ПустаяСсылка)
	|		ИЛИ ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|	)
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСКлиентами.СуммаОстаток,0) КАК СуммаОплаты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента=&Ссылка) КАК РасчетыСКлиентами
	|");
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса[0].Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	СуммаОснования = 0;
	ВыборкаПоДокументу = РезультатЗапроса[0].Выбрать();
	ВыборкаПоРасчетам  = РезультатЗапроса[1].Выбрать();
	
	Если ВыборкаПоДокументу.Следующий() Тогда
		
		МассивДопустимыхСтатусов = Новый Массив();
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.Согласован);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОбеспечению);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОтгрузке);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.Закрыт);
		
		Документы.СчетНаОплатуКлиенту.ПроверитьКорректностьХозяйственнойОперацииДокументаОснования(
			ВыборкаПоДокументу.ЕстьОшибкиХозяйственнаяОперация,
			ВыборкаПоДокументу.ХозяйственнаяОперация
		);
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ВыборкаПоДокументу.ДокументОснование,
			ВыборкаПоДокументу.Статус,
			ВыборкаПоДокументу.ЕстьОшибкиПроведен,
			ВыборкаПоДокументу.ЕстьОшибкиСтатус,
			МассивДопустимыхСтатусов
		);
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаПоДокументу);
		
		НазначениеПлатежа = Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
			ВыборкаПоДокументу.Номер,
			ВыборкаПоДокументу.Префикс,
			Основание
		);
		
		Если ВыборкаПоДокументу.РасчетыПоДоговору Тогда
			ДобавитьЭтапОплаты(ВыборкаПоДокументу.СуммаВзаиморасчетов, ВыборкаПоДокументу.ДатаПлатежа);
			ДанныеЗаполнения.Вставить("СуммаДокумента",  ВыборкаПоДокументу.СуммаВзаиморасчетов);
			ДанныеЗаполнения.Вставить("ЧастичнаяОплата", Ложь);
		Иначе
			ЗаполнитьСуммуДокументаПоРасчетамСКлиентами(ВыборкаПоДокументу, ВыборкаПоРасчетам, ДанныеЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаПоРасчетамСКлиентами(ВыборкаПоДокументу, ВыборкаПоРасчетам, ДанныеЗаполнения)
	
	Если ВыборкаПоРасчетам.Следующий() И ВыборкаПоРасчетам.СуммаОплаты > 0 Тогда
		
		ДобавитьЭтапОплаты(ВыборкаПоРасчетам.СуммаОплаты, ВыборкаПоДокументу.ДатаПлатежа);
		ДанныеЗаполнения.Вставить("СуммаДокумента",  ВыборкаПоРасчетам.СуммаОплаты);
		ДанныеЗаполнения.Вставить("ЧастичнаяОплата", ВыборкаПоРасчетам.СуммаОплаты <> ВыборкаПоДокументу.СуммаВзаиморасчетов);
		
	Иначе
		
		ДанныеЗаполнения.Вставить("СуммаДокумента",  0);
		ДанныеЗаполнения.Вставить("ЧастичнаяОплата", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомитенту(Знач Основание, ДанныеЗаполнения)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеДокумента.Организация         КАК Организация,
	|	ДанныеДокумента.Номер               КАК Номер,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Валюта              КАК Валюта,
	|	ДанныеДокумента.СуммаВознаграждения КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Ссылка              КАК ДокументОснование,
	|	ДанныеДокумента.Партнер             КАК Партнер,
	|	ДанныеДокумента.Контрагент          КАК Контрагент,
	|	ДанныеДокумента.КонтактноеЛицо      КАК КонтактноеЛицо,
	|	ДанныеДокумента.Договор				КАК Договор,
	|	ДанныеДокумента.ДатаПлатежа         КАК ДатаПлатежа,
	|	ЛОЖЬ                                КАК ЧастичнаяОплата,
	|	НЕ ДанныеДокумента.Проведен         КАК ЕстьОшибкиПроведен,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговору
	|
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСКлиентами.СуммаОстаток,0) КАК СуммаОплаты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента=&Ссылка) КАК РасчетыСКлиентами
	|");
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса[0].Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ВыборкаПоДокументу = РезультатЗапроса[0].Выбрать();
	ВыборкаПоРасчетам  = РезультатЗапроса[1].Выбрать();
	
	Если ВыборкаПоДокументу.Следующий() Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ВыборкаПоДокументу.ДокументОснование,
			Неопределено, // Статус
			ВыборкаПоДокументу.ЕстьОшибкиПроведен,
			Ложь // ЕстьОшибкиСтатус
		);
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаПоДокументу);
		
		НазначениеПлатежа = Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
			ВыборкаПоДокументу.Номер,
			ВыборкаПоДокументу.Префикс,
			Основание
		);
		
	КонецЕсли;
	
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
		ДанныеЗаполнения.Организация,
		Неопределено, // ФормаОплаты,
		Неопределено // БанковскийСчет
	);
	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(
		ДанныеЗаполнения.Организация,
		Неопределено, // ФормаОплаты,
		Неопределено // Касса
	);
	
	Если ВыборкаПоДокументу.РасчетыПоДоговору Тогда
		
		ДобавитьЭтапОплаты(ВыборкаПоДокументу.СуммаВзаиморасчетов, ВыборкаПоДокументу.ДатаПлатежа);
		
		Если ВыборкаПоДокументу.СуммаВзаиморасчетов > 0 Тогда
			ДанныеЗаполнения.Вставить("СуммаДокумента",  ВыборкаПоДокументу.СуммаВзаиморасчетов);
			ДанныеЗаполнения.Вставить("ЧастичнаяОплата", Ложь);
		Иначе
			ДанныеЗаполнения.Вставить("СуммаДокумента",  0);
			ДанныеЗаполнения.Вставить("ЧастичнаяОплата", Истина);
		КонецЕсли;
		
	Иначе
		ЗаполнитьСуммуДокументаПоРасчетамСКлиентами(ВыборкаПоДокументу, ВыборкаПоРасчетам, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомиссионераОСписании(Знач Основание, ДанныеЗаполнения)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация         КАК Организация,
	|	ДанныеДокумента.Номер               КАК Номер,
	|	ДанныеДокумента.Организация.Префикс КАК Префикс,
	|	ДанныеДокумента.Валюта              КАК Валюта,
	|	ДанныеДокумента.СуммаДокумента      КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Партнер             КАК Партнер,
	|	ДанныеДокумента.Контрагент          КАК Контрагент,
	|	ДанныеДокумента.Договор             КАК Договор,
	|	ДанныеДокумента.ДатаПлатежа         КАК ДатаПлатежа,
	|	ДанныеДокумента.Ссылка              КАК ДокументОснование,
	|	Ложь                                КАК ЧастичнаяОплата,
	|	НЕ ДанныеДокумента.Проведен         КАК ЕстьОшибкиПроведен,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговору
	|
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСКлиентами.СуммаОстаток,0) КАК СуммаОплаты
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента=&Ссылка) КАК РасчетыСКлиентами
	|");
	Запрос.УстановитьПараметр("Ссылка", Основание);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса[0].Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ВыборкаПоДокументу = РезультатЗапроса[0].Выбрать();
	ВыборкаПоРасчетам  = РезультатЗапроса[1].Выбрать();
	
	Если ВыборкаПоДокументу.Следующий() Тогда
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ВыборкаПоДокументу.ДокументОснование,
			Неопределено, // Статус
			ВыборкаПоДокументу.ЕстьОшибкиПроведен,
			Ложь // ЕстьОшибкиСтатус
		);
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаПоДокументу);
		
		НазначениеПлатежа = Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
			ВыборкаПоДокументу.Номер, 
			ВыборкаПоДокументу.Префикс, 
			Основание
			);
		
	КонецЕсли;
	
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
		ДанныеЗаполнения.Организация,
		Неопределено, // ФормаОплаты,
		Неопределено // БанковскийСчет
	);
	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(
		ДанныеЗаполнения.Организация,
		Неопределено, // ФормаОплаты,
		Неопределено // Касса
	);
	
	Если ВыборкаПоДокументу.РасчетыПоДоговору Тогда
		ДобавитьЭтапОплаты(ВыборкаПоДокументу.СуммаВзаиморасчетов, ВыборкаПоДокументу.ДатаПлатежа);
		ДанныеЗаполнения.Вставить("СуммаДокумента",  ВыборкаПоДокументу.СуммаВзаиморасчетов);
		ДанныеЗаполнения.Вставить("ЧастичнаяОплата", Ложь);
	Иначе
		ЗаполнитьСуммуДокументаПоРасчетамСКлиентами(ВыборкаПоДокументу, ВыборкаПоРасчетам, ДанныеЗаполнения);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьПоДоговору(Знач Основание, ДанныеЗаполнения)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка               КАК Договор,
	|	ДанныеДокумента.Организация          КАК Организация,
	|	ДанныеДокумента.Номер                КАК Номер,
	|	Неопределено                         КАК Префикс,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|	0                                    КАК СуммаДокумента,
	|	ДанныеДокумента.Ссылка               КАК ДокументОснование,
	|	ДанныеДокумента.Партнер              КАК Партнер,
	|	ДанныеДокумента.Контрагент           КАК Контрагент,
	|	&ТекущаяДата                         КАК ДатаПлатежа,
	|	ИСТИНА                               КАК ЧастичнаяОплата,
	|	ДанныеДокумента.Статус               КАК Статус,
	|	ДанныеДокумента.КонтактноеЛицо       КАК КонтактноеЛицо,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                                КАК ЕстьОшибкиСтатус,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ                                КАК ЕстьОшибкиТипДоговора
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ВыборкаПоДокументу = РезультатЗапроса.Выбрать();
	
	Если ВыборкаПоДокументу.Следующий() Тогда
		
		ПроверитьВозможностьВводаНаОснованииДоговора(ВыборкаПоДокументу.ЕстьОшибкиТипДоговора);
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			ВыборкаПоДокументу.ДокументОснование,
			ВыборкаПоДокументу.Статус,
			, // ЕстьОшибкиПроведен
			ВыборкаПоДокументу.ЕстьОшибкиСтатус
		);
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ВыборкаПоДокументу);
		
		НазначениеПлатежа = Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
			ВыборкаПоДокументу.Номер,
			ВыборкаПоДокументу.Префикс,
			Основание
		);
		
	КонецЕсли;
	
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
		ДанныеЗаполнения.Организация,
		Неопределено, // ФормаОплаты,
		Неопределено // БанковскийСчет
	);
	Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(
		ДанныеЗаполнения.Организация,
		Неопределено, // ФормаОплаты,
		Неопределено // Касса
	);
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Организация    = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И НЕ ДанныеЗаполнения.Свойство("Валюта") Тогда
		Валюта = ДоходыИРасходыСервер.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	Менеджер       = Пользователи.ТекущийПользователь();
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, , БанковскийСчет);
	Касса          = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Организация, ФормаОплаты, Касса);
	ОтветственныеЛицаСервер.ЗаполнитьОтветственныхЛицДокумента(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ДобавитьЭтапОплаты(СуммаОплаты, ДатаПлатежа)
	
	ЭтапОплаты = ЭтапыГрафикаОплаты.Добавить();
	ЭтапОплаты.ПроцентПлатежа = 100;
	ЭтапОплаты.СуммаПлатежа   = СуммаОплаты;
	ЭтапОплаты.ДатаПлатежа    = ?(ЗначениеЗаполнено(ДатаПлатежа), ДатаПлатежа, ТекущаяДата());
	
КонецПроцедуры

Процедура ПроверитьВозможностьВводаНаОснованииДоговора(ЕстьОшибкиТипДоговора)
	
	Если ЕстьОшибкиТипДоговора Тогда
		
		ТекстОшибки = НСтр("ru='Ввод на основании договора с поставщиком запрещен.'");
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли