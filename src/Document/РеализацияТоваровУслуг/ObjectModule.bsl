#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ТекущийСтатус = Статус;
	
	Статус = Перечисления.СтатусыРеализацийТоваровУслуг[НовыйСтатус];
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.РеализацияТоваровУслуг);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	Отказ = Ложь;
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,ПараметрыУказанияСерий,Отказ,,Ложь);
	
	Если Отказ Тогда
		ТекстСообщения = НСтр("ru = 'Статус ""%Статус%"" не установлен - есть товары, по которым нужно указать серии.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Статус%",Статус); 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Статус = ТекущийСтатус;
	КонецЕсли;

	Возврат Не Отказ;
	
КонецФункции

// Функция формирует временные данных документа
//
// Возвращаемое значение:
//	МенеджерВременныхТаблиц - менеджер временных таблиц
//
Функция ВременныеТаблицыДанныхДокумента() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Дата КАК Дата,
	|	&Организация КАК Организация,
	|	Неопределено КАК Партнер,
	|	Неопределено КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	&НалогообложениеНДС КАК НалогообложениеНДС,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Ложь КАК ЕстьСделкиВТабличнойЧасти,
	|
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		&Подразделение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		&Менеджер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ КАК Менеджер,
	|
	|	ВЫБОР КОГДА СделкиСКлиентами.ОбособленныйУчетТоваровПоСделке
	|		И &ФормироватьВидыЗапасовПоСделкам
	|	ТОГДА
	|		&Сделка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)
	|	КОНЕЦ КАК Сделка
	|	
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|	ПО
	|		СтруктураПредприятия.Ссылка = &Подразделение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СделкиСКлиентами КАК СделкиСКлиентами
	|	ПО
	|		СделкиСКлиентами.Ссылка = &Сделка
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.Склад КАК Склад,
	|	ТаблицаТоваров.ДокументРеализации КАК ДокументРеализации,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТоваров.Сумма + (ТаблицаТоваров.СуммаНДС * &ЦенаВключаетНДС) КАК СуммаСНДС,
	|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	0 КАК СуммаВознаграждения,
	|	0 КАК СуммаНДСВознаграждения,
	|	&Сделка КАК Сделка,
	|	ТаблицаТоваров.ЗаказКлиента КАК Заказ,
	|	ТаблицаТоваров.КодСтроки КАК КодСтроки
	|	
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТоварыЗаказа.Ссылка.Назначение КАК Назначение
	|	
	|ПОМЕСТИТЬ ВтТоварыПодЗаказ
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказКлиента.Товары КАК ТоварыЗаказа
	|	ПО
	|		ТаблицаТоваров.Заказ = ТоварыЗаказа.Ссылка
	|		И ТаблицаТоваров.КодСтроки = ТоварыЗаказа.КодСтроки
	|		И ТаблицаТоваров.Номенклатура = ТоварыЗаказа.Номенклатура
	|		И ТаблицаТоваров.Характеристика = ТоварыЗаказа.Характеристика
	|ГДЕ
	|	&РеализацияПоЗаказам
	|	И ТаблицаТоваров.Заказ <> Неопределено
	|	И ТоварыЗаказа.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТоварыЗаказа.Ссылка.Назначение КАК Назначение
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ТоварыЗаказа
	|	ПО
	|		ТаблицаТоваров.Заказ = ТоварыЗаказа.Ссылка
	|		И ТаблицаТоваров.КодСтроки = ТоварыЗаказа.КодСтроки
	|		И ТаблицаТоваров.Номенклатура = ТоварыЗаказа.Номенклатура
	|		И ТаблицаТоваров.Характеристика = ТоварыЗаказа.Характеристика
	|ГДЕ
	|	&РеализацияПоЗаказам
	|	И ТаблицаТоваров.Заказ <> Неопределено
	|	И ТоварыЗаказа.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.Склад КАК Склад,
	|	ТаблицаТоваров.Заказ КАК ЗаказКлиента,
	|	ТаблицаТоваров.ДокументРеализации КАК ДокументРеализации,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТоваров.СуммаСНДС КАК СуммаСНДС,
	|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	0 КАК СуммаВознаграждения,
	|	0 КАК СуммаНДСВознаграждения,
	|	&Сделка КАК Сделка,
	|	ЕСТЬNULL(ТоварыПодЗаказ.Назначение, ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)) КАК Назначение
	|	
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтТоварыПодЗаказ КАК ТоварыПодЗаказ
	|	ПО
	|		ТаблицаТоваров.НомерСтроки = ТоварыПодЗаказ.НомерСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.Номенклатура КАК Номенклатура,
	|	ТаблицаВидыЗапасов.Характеристика КАК Характеристика,
	|	ТаблицаВидыЗапасов.ДокументРеализации КАК ДокументРеализации,
	|	ТаблицаВидыЗапасов.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД КАК НомерГТД,
	|	ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.Склад КАК Склад,
	|	ВЫБОР КОГДА &РеализацияПоНесколькимЗаказам ТОГДА
	|		ТаблицаВидыЗапасов.ЗаказКлиента
	|	ИНАЧЕ
	|		&ЗаказКлиента
	|	КОНЕЦ КАК ЗаказКлиента,
	|	&Сделка КАК Сделка,
	|	ТаблицаВидыЗапасов.Количество КАК Количество,
	|	ТаблицаВидыЗапасов.СуммаСНДС КАК СуммаСНДС,
	|	ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС,
	|	ТаблицаВидыЗапасов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
	|	
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", ?(ЦенаВключаетНДС, 0, 1));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("РеализацияПоЗаказам", РеализацияПоЗаказам);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	Запрос.УстановитьПараметр("РеализацияПоНесколькимЗаказам", РеализацияПоЗаказам И Не ЗначениеЗаполнено(ЗаказКлиента));
	Запрос.УстановитьПараметр("ТаблицаТоваров", ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(Товары.Выгрузить()));
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов", ЗапасыСервер.ТаблицаДополненнаяОбязательнымиКолонками(ВидыЗапасов.Выгрузить()));
	
	Запрос.Выполнить();
	
	Если ВидыЗапасовУказаныВручную Тогда
		ДополнительныеСвойства.Вставить("ИспользоватьОстаткиНаКонецМесяца", Истина);
	КонецЕсли;
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

// Заполняет условия продаж в заказе клиента
//
// Параметры:
//	УсловияПродаж - Структура - Структура для заполнения
//
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж) Экспорт
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = УсловияПродаж.Валюта;
	ВалютаВзаиморасчетов = УсловияПродаж.Валюта;
	
	ХозяйственнаяОперация = УсловияПродаж.ХозяйственнаяОперация;
	ЦенаВключаетНДС       = УсловияПродаж.ЦенаВключаетНДС;
	НалогообложениеНДС    = УсловияПродаж.НалогообложениеНДС;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация<>Организация Тогда
		Организация = УсловияПродаж.Организация;
		БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация);
	КонецЕсли;
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.Контрагент) И УсловияПродаж.Контрагент<>Контрагент Тогда
			Контрагент = УсловияПродаж.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
			Договор,
			Партнер,
			Контрагент,
			Организация,
			?(ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет,
				Перечисления.ХозяйственныеОперации.РеализацияКлиенту,
				ХозяйственнаяОперация
			),
			ВалютаВзаиморасчетов,
			Соглашение
		);
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
		
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокРасчетов");
		
	Иначе
		
		ПорядокРасчетов = УсловияПродаж.ПорядокРасчетов;
		
	КонецЕсли;
	
	ЗаполнитьУсловияРасчетов(УсловияПродаж);
	
	ВернутьМногооборотнуюТару = УсловияПродаж.ВозвращатьМногооборотнуюТару;
	ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
		Дата,
		УсловияПродаж.СрокВозвратаМногооборотнойТары,
		УсловияПродаж.РассчитыватьДатуВозвратаТарыПоКалендарю);
	
	Если ЗначениеЗаполнено(УсловияПродаж.Склад) Тогда
		Склад = УсловияПродаж.Склад;
		СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(Склад, Менеджер);
		Если СтруктураОтветственного <> Неопределено Тогда
			Отпустил = СтруктураОтветственного.Ответственный;
			ОтпустилДолжность = СтруктураОтветственного.ОтветственныйДолжность;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГруппаФинансовогоУчета) Тогда
		ГруппаФинансовогоУчета = УсловияПродаж.ГруппаФинансовогоУчета;
	КонецЕсли;
	
	ДатаНачала = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата());
	
	СкидкиНаценки.Очистить();
	
КонецПроцедуры

// Заполняет условия продаж по умолчанию в заказе клиента
//
Процедура ЗаполнитьУсловияПродажПоУмолчанию() Экспорт
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	Если ЗначениеЗаполнено (Партнер) ИЛИ Не ИспользоватьСоглашенияСКлиентами Тогда
		
		Если Не ИспользоватьСоглашенияСКлиентами Тогда
			УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
				Партнер,
				Новый Структура("ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение, ХозяйственнаяОперация", 
					Истина, 
					Соглашение, 
					?(ХозяйственнаяОперация=Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет, 
									Перечисления.ХозяйственныеОперации.РеализацияКлиенту, ХозяйственнаяОперация))
			);
		Иначе
			УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
				Партнер,
				Новый Структура(
					"ИсключитьГруппыСкладовДоступныеВЗаказах, ВыбранноеСоглашение",
					Истина,
					Соглашение
				)
			);
			
		КонецЕсли;
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			Если Соглашение <> УсловияПродажПоУмолчанию.Соглашение
				И ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение) Тогда
					Соглашение = УсловияПродажПоУмолчанию.Соглашение;
					ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
					
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
					ПродажиСервер.ЗаполнитьЦены(
						Товары, // Табличная часть
						, // Массив строк или структура отбора
						Новый Структура( // Параметры заполнения
							"Дата, Валюта, Соглашение, ПоляЗаполнения",
							Дата,
							Валюта,
							Соглашение,
							"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
						),
						Новый Структура( // Структура действий с измененными строками
							"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ОчиститьСуммуВзаиморасчетов, ПересчитатьСуммуСУчетомРучнойСкидки",
							"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Неопределено, Новый Структура("Очищать", Ложь)
						)
					);
					
					БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, , БанковскийСчетОрганизации);
			Иначе
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			КонецЕсли;
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
			Соглашение = Неопределено;
		КонецЕсли;
		
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Партнер);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по соглашению в реализации товаров и услуг
//
Процедура ЗаполнитьУсловияПродажПоCоглашению() Экспорт
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение, Истина, Истина);
	ЗаполнитьУсловияПродаж(УсловияПродаж);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
	ПродажиСервер.ЗаполнитьЦены(
		Товары, // Табличная часть
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, ПоляЗаполнения",
			Дата,
			Валюта,
			Соглашение,
			"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ОчиститьСуммуВзаиморасчетов, ПересчитатьСуммуСУчетомРучнойСкидки",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Неопределено, Новый Структура("Очищать", Ложь)
		)
	);
	
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, , БанковскийСчетОрганизации);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(Партнер);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказыСервер.ПроверитьДатуРаспоряжения(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	СуммаДокумента = ПолучитьСуммуДокумента();
	
	ЗаполнитьСуммуВзаиморасчетов();
	Ценообразование.РассчитатьСуммыВзаиморасчетовВТабличнойЧасти(ЭтотОбъект, "Товары");
	
	НоменклатураСервер.УдалитьНеиспользуемыеСтрокиСерий(ЭтотОбъект,НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.РеализацияТоваровУслуг));
	Документы.СчетФактураВыданный.ПроверитьРеквизитыСчетФактуры(Ссылка, ПометкаУдаления, Организация, Валюта);
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиДокумента(
		ЭтотОбъект,
		РежимЗаписи
	);
	
	Если РеализацияПоЗаказам И ЗначениеЗаполнено(ЗаказКлиента) Тогда
		
		Для Каждого ТекСтрока Из Товары Цикл
			
			Если Не ЗначениеЗаполнено(ТекСтрока.ЗаказКлиента) Тогда
				ТекСтрока.ЗаказКлиента = ЗаказКлиента;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет Тогда
			
			ВзаиморасчетыСервер.ЗаполнитьСуммуРасшифровкиПлатежаПоСуммеДокумента(
				СуммаДокумента,
				РасшифровкаПлатежа
			);
			ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(
				Валюта,
				Дата,
				РасшифровкаПлатежа
			);
		Иначе
			Если РасшифровкаПлатежа.Количество() <> 0 Тогда
				РасшифровкаПлатежа.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьВидыЗапасов(Отказ);
		
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(Товары);
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ВидыЗапасов);
		
	КонецЕсли;
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.РеализацияТоваровУслуг.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Перем СкладОтгрузки;
	Перем РеквизитыШапки;

	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);

	ЗаполнитьПоЗначениямАвтозаполнения(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		// Заполнение из формы списка распоряжений.
		Если ДанныеЗаполнения.Свойство("ДокументОснование") И ДанныеЗаполнения.Свойство("ДатаОтгрузки")
			И (ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") 
			Или ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
			Или ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив")) Тогда

			// Если передана дата отгрузки-заполняем по ней.
			Если ЗначениеЗаполнено(ДанныеЗаполнения.ДатаОтгрузки) Тогда
				Дата = ДанныеЗаполнения.ДатаОтгрузки;
			Иначе
				// Дата отгрузки берется максимально возможная для заказа.
				Дата = ЗаказыСервер.ПолучитьМаксимальнуюДатуОтгрузкиЗаказа(ДанныеЗаполнения.ДокументОснование);
			КонецЕсли;

			// Если передан склад - необходимо заполнять товары только по указанном складу.
			ДанныеЗаполнения.Свойство("СкладОтгрузки", СкладОтгрузки);
			ДанныеЗаполнения.Свойство("РеквизитыШапки", РеквизитыШапки);
			
			// ИГОРЬ 02 04 2014
			Если ДанныеЗаполнения.Свойство("ПоСтавкамНДС") тогда
				ЗаполнитьДокументНаОснованииЗаказаКлиента(ДанныеЗаполнения.ДокументОснование, СкладОтгрузки, Истина, РеквизитыШапки,ИСТИНА,ДанныеЗаполнения.СтавкаНДС);
			Иначе
				ЗаполнитьДокументНаОснованииЗаказаКлиента(ДанныеЗаполнения.ДокументОснование, СкладОтгрузки, Истина, РеквизитыШапки);
			КонецЕсли;
			
		Иначе

			ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);

		КонецЕсли;

	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СделкиСКлиентами") Тогда

		ЗаполнитьДокументНаОснованииСделкиПоПродаже(ДанныеЗаполнения);

	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказКлиента") Или
		 ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда

		Дата = ЗаказыСервер.ПолучитьМинимальнуюДатуОтгрузкиЗаказа(ДанныеЗаполнения);
		ЗаполнитьДокументНаОснованииЗаказаКлиента(ДанныеЗаполнения, СкладОтгрузки, Истина);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда

		ЗаполнитьДокументНаОснованииИндивидуальногоСоглашенияСКлиентом(ДанныеЗаполнения);

	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда

		ЗаполнитьДокументНаОснованииВозвратаТоваровОтКлиента(ДанныеЗаполнения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда

		ЗаполнитьДокументНаОснованииПоступленияТоваровУслуг(ДанныеЗаполнения);


 	КонецЕсли;

	ИнициализироватьДокумент(ДанныеЗаполнения);
	//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  26.11.2013
    ПересчитатьГрузовыеМестаТовара();

//	ЭтотОбъект.акЗаказКлиента = ЭтотОбъект.ЗаказКлиента;
	
	//}
	
КонецПроцедуры

//{ ООО "АСТЭК" Разработчик: Бурыкин Александр  11.11.2013  
    &НаСервере
Процедура ПересчитатьГрузовыеМестаТовара()
	
	Для каждого СтрокаТовары из этотОбъект.Товары Цикл
		НоменклатураТовары = СтрокаТовары.номенклатура.получитьОбъект();
		СтрокаТовары.акгрузовыеМеста = НоменклатураТовары.акКоличествоГрузовыхМест * СтрокаТовары.количество;
		КонецЦикла;
КонецПроцедуры
   //}

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	//НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект,НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.РеализацияТоваровУслуг),Отказ);
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.РеализацияТоваровУслуг.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		// Если реквизит не используется для хозяйственной операции, исключаем данный реквизит из проверки.
		Если МассивРеквизитовОперации.Найти(ЭлементМассива) = Неопределено Тогда
			МассивНепроверяемыхРеквизитов.Добавить(ЭлементМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	Если РеализацияПоЗаказам
	 И Товары.НайтиСтроки(Новый Структура("СуммаВзаиморасчетов", 0)).Количество()=0 Тогда
		СуммаВВалютеВзаиморасчетов = Товары.Итог("СуммаВзаиморасчетов");
	Иначе
		СтруктураПараметров = Новый Структура("Дата, Валюта, ВалютаВзаиморасчетов, СуммаВзаиморасчетов");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, ЭтотОбъект);
		СтруктураПараметров.Вставить("СуммаДокумента", ПолучитьСуммуДокумента());
		ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетов(СтруктураПараметров);
		СуммаВВалютеВзаиморасчетов = Окр(СтруктураПараметров.СуммаВзаиморасчетов, 2);
	КонецЕсли;
	
	ПроверитьСуммуПредоплаты(СуммаВВалютеВзаиморасчетов, Отказ);
	
	Если РеализацияПоЗаказам ИЛИ СуммаПредоплаты >= СуммаВВалютеВзаиморасчетов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаПлатежа");
	КонецЕсли;
	
	// Код строки должен быть заполнен, если реализация по заказу
	Если Не РеализацияПоЗаказам Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Товары.КодСтроки");
		
		Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			
			ВзаиморасчетыСервер.ПроверитьДатуПлатежа(ЭтотОбъект, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Соглашение) ИЛИ НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "ИспользуютсяДоговорыКонтрагентов") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		ДоставкаТоваровКлиентСервер.ПроверитьЗаполнениеРеквизитовДоставки(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ);
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("АдресДоставки");
	КонецЕсли;
	
	Если Не ВернутьМногооборотнуюТару Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаВозвратаМногооборотнойТары");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	ПроверитьИзменениеХозяйственнойОперации(Отказ);
	
	Если Не Отказ Тогда
		Отказ = ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты);
	КонецЕсли;
	
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект,Отказ);
	ОбщегоНазначенияУТ.ПроверитьПравильностьУказанияХозяйственнойОперации(ЭтотОбъект, Отказ);
	
	Если Не РеализацияПоЗаказам И Не Пользователи.РолиДоступны("СозданиеРеализацииТоваровУслугБезЗаказа") Тогда
		
		ТекстОшибки = НСтр("ru='Нет прав на создание реализации товаров и услуг без заказа'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Ссылка,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ПроверитьЗаполнениеОтветственныхЛицДокумента(ЭтотОбъект, Отказ);
	
	Если ЗначениеЗаполнено("ДатаВозвратаМногооборотнойТары") И ВернутьМногооборотнуюТару И ДатаВозвратаМногооборотнойТары < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Дата возврата многооборотной тары не должна быть меньше даты документа.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.ДатаВозвратаМногооборотнойТары",
			,
			Отказ
		);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.РеализацияТоваровУслуг.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	ЗаказыСервер.ОтразитьЗаказыКлиентов(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизацийКПередаче(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыПереданныеНаКомиссию(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьДатыПередачиТоваровНаКомиссию(ДополнительныеСвойства, Отказ);
	ЗапасыСервер.ОтразитьТоварыКОформлениюОтчетовКомитента(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьРезервыСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьВыручкуИСебестоимостьПродаж(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентамиПоследовательность(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	МногооборотнаяТараСервер.ОтразитьПереданнуюВозвратнуюТару(ДополнительныеСвойства, Движения, Отказ);	
	
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);

	ВзаиморасчетыСервер.ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ);
	
	ПартионныйУчетСервер.ОтразитьПартииТоваровОрганизацийПоследовательность(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ);
	
	//Сложный учет НДС
	ДоходыИРасходыСервер.ОтразитьНДССостояниеРеализации0(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьНДСЗаписиКнигиПродаж(ДополнительныеСвойства, Движения, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);

	СкладыСервер.ОтразитьСостоянияОтгрузки(Ссылка, Отказ);
	
	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	СформироватьСписокРегистровДляКонтроля();

	ПроведениеСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	ПроведениеСервер.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	СкладыСервер.ОтразитьСостоянияОтгрузки(Ссылка, Отказ);

	ПроведениеСервер.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	ДатаПлатежа         = Дата(1,1,1);
	Согласован          = Ложь;
	ЗаказКлиента        = Неопределено;
	Статус              = Метаданные.Документы.РеализацияТоваровУслуг.Реквизиты.Статус.ЗначениеЗаполнения;
	СкидкиРассчитаны    = Ложь;
	РеализацияПоЗаказам = Ложь;
	СостояниеЗаполненияМногооборотнойТары = Перечисления.СостоянияЗаполненияМногооборотнойТары.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Соглашение)
	 И (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет
		ИЛИ Не ЗначениеЗаполнено(ХозяйственнаяОперация)
		)
	Тогда
		УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение, Истина, Истина);
		ДатаПлатежа = ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(Дата, УсловияПродаж.ГрафикОплаты, УсловияПродаж.Соглашение);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Товары Цикл
		
		ТекСтрока.ЗаказКлиента = Неопределено;
		ТекСтрока.ДокументРезерваСерий = Неопределено;
		ТекСтрока.КодСтроки = 0;
		
	КонецЦикла;
	
	Серии.Очистить();
	ВидыЗапасов.Очистить();
	
	СкидкиНаценкиСервер.ОтменитьСкидки(ЭтотОбъект, "Товары", Истина, Истина);
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	Документы.СчетФактураВыданный.АктуализироватьСчетФактуру(ЭтотОбъект.Ссылка, ЭтотОбъект.Проведен,
		?(ЭтотОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию,Истина,Ложь));
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение


Процедура ЗаполнитьДокументНаОснованииЗаказаКлиента(Знач ДокументОснование,
	                                                Знач СкладОтгрузки = Неопределено,
	                                                Знач ЗаполнятьНаДатуОтгрузки = Истина,
	                                                РеквизитыЗаказа = Неопределено,
													// ИГОРЬ 02 04 2014
													ПоСтавкамНДС = Ложь,
													_СтавкаНДС = Неопределено)
	Перем ДатаОтгрузки;
	
	ТипОснования = ТипЗнч(ДокументОснование);
	ЗаполнятьПоОстаткам = Ложь;
	
	Если ТипОснования = Тип("ДокументСсылка.ЗаказКлиента") Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка                КАК ЗаказКлиента,
		|	ЗаказКлиента.Партнер               КАК Партнер,
		|	ЗаказКлиента.Контрагент            КАК Контрагент,
		|	ЗаказКлиента.КонтактноеЛицо        КАК КонтактноеЛицо,
		|	ЗаказКлиента.Договор               КАК Договор,
		|	ЗаказКлиента.Организация           КАК Организация,
		|	ЗаказКлиента.ФормаОплаты           КАК ФормаОплаты,
		|	ЗаказКлиента.Соглашение            КАК Соглашение,
		|	ЗаказКлиента.Сделка                КАК Сделка,
		|	ЗаказКлиента.Валюта                КАК Валюта,
		|	ЗаказКлиента.Валюта                КАК ВалютаВзаиморасчетов,
		|	ЗаказКлиента.ГрафикОплаты          КАК ГрафикОплаты,
		|	ЗаказКлиента.Подразделение         КАК Подразделение,
		|	ВЫБОР
		|		КОГДА
		|			ЗаказКлиента.Склад.ЭтоГруппа И ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|		ТОГДА
		|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИНАЧЕ
		|			ЗаказКлиента.Склад
		|	КОНЕЦ КАК Склад,
		|	ВЫБОР
		|		КОГДА
		|			ЗаказКлиента.Склад.ЭтоГруппа И ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
		|	ЗаказКлиента.ЦенаВключаетНДС       КАК ЦенаВключаетНДС,
		|	ЗаказКлиента.НалогообложениеНДС    КАК НалогообложениеНДС,
		|	ЗаказКлиента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ЗаказКлиента.НеОтгружатьЧастями    КАК НеОтгружатьЧастями,
		|	ЗаказКлиента.АдресДоставки         КАК АдресДоставки,
		|	ЗаказКлиента.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке   КАК ОрдернаяСхемаПриОтгрузке,
		|
		|	ЗаказКлиента.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	ЗаказКлиента.Статус                КАК СтатусДокумента,
		|	НЕ ЗаказКлиента.Проведен           КАК ЕстьОшибкиПроведен,
		|	ВЫБОР
		|		КОГДА
		|			ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)
		|			ИЛИ ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		|		ТОГДА
		|			ЛОЖЬ
		|		ИНАЧЕ
		|			ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|
		|	ЗаказКлиента.БанковскийСчет                 КАК БанковскийСчетОрганизации,
		|	ЗаказКлиента.БанковскийСчетКонтрагента      КАК БанковскийСчетКонтрагента,
		|	ЗаказКлиента.Грузоотправитель               КАК Грузоотправитель,
		|	ЗаказКлиента.Грузополучатель                КАК Грузополучатель,
		|	ЗаказКлиента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
		|	ЗаказКлиента.БанковскийСчетГрузополучателя  КАК БанковскийСчетГрузополучателя,
		|	ЗаказКлиента.ВернутьМногооборотнуюТару      КАК ВернутьМногооборотнуюТару,
		|	ЗаказКлиента.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
		|	ЗаказКлиента.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|
		|	ЗаказКлиента.СкидкиНаценки.(
		|		КлючСвязи,
		|		СкидкаНаценка,
		|		Сумма
		|	) КАК СкидкиНаценки,
		|	ЗаказКлиента.СпособДоставки                        КАК СпособДоставки,
		|	ЗаказКлиента.ПеревозчикПартнер                     КАК ПеревозчикПартнер,
		|	ЗаказКлиента.ЗонаДоставки                          КАК ЗонаДоставки,
		|	ЗаказКлиента.ВремяДоставкиС                        КАК ВремяДоставкиС,
		|	ЗаказКлиента.ВремяДоставкиПо                       КАК ВремяДоставкиПо,
		|	ЗаказКлиента.АдресДоставкиПеревозчика              КАК АдресДоставкиПеревозчика,
		|	ЗаказКлиента.АдресДоставкиЗначенияПолей            КАК АдресДоставкиЗначенияПолей,
		|	ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей КАК АдресДоставкиПеревозчикаЗначенияПолей,
		|	ЗаказКлиента.ДополнительнаяИнформацияПоДоставке    КАК ДополнительнаяИнформацияПоДоставке,
		|	ЗаказКлиента.ПорядокРасчетов                       КАК ПорядокРасчетов
		|
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &ЗаказКлиента
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказыОстатки.Склад КАК Склад
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(
		|		&ГраницаПериод,
		|		ЗаказКлиента = &ЗаказКлиента
		|) КАК ЗаказыОстатки
		|");
	
		Запрос.УстановитьПараметр("ЗаказКлиента", ДокументОснование);
		Если ЗаполнятьНаДатуОтгрузки Тогда
			Запрос.УстановитьПараметр("ГраницаПериод", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
		Иначе
			Запрос.УстановитьПараметр("ГраницаПериод", Неопределено);
		КонецЕсли;
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		РеквизитыЗаказа = РезультатЗапроса[0].Выбрать();
		РеквизитыЗаказа.Следующий();

		МассивДопустимыхСтатусов = Новый Массив;
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОтгрузке);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.Закрыт);
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			РеквизитыЗаказа.ЗаказКлиента,
			РеквизитыЗаказа.СтатусДокумента,
			РеквизитыЗаказа.ЕстьОшибкиПроведен,
			РеквизитыЗаказа.ЕстьОшибкиСтатус,
			МассивДопустимыхСтатусов
		);
		// Заполнение шапки
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			Дата,
			РеквизитыЗаказа.СрокВозвратаМногооборотнойТары,
			РеквизитыЗаказа.РассчитыватьДатуВозвратаТарыПоКалендарю);
		
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			МассивСкладов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Склад");
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаявкаНаВозврат.Ссылка                КАК ЗаказКлиента,
		|	ЗаявкаНаВозврат.Партнер               КАК Партнер,
		|	ЗаявкаНаВозврат.Контрагент            КАК Контрагент,
		|	ЗаявкаНаВозврат.Договор               КАК Договор,
		|	ЗаявкаНаВозврат.Организация           КАК Организация,
		|	ЗаявкаНаВозврат.ФормаОплаты           КАК ФормаОплаты,
		|	ЗаявкаНаВозврат.Соглашение            КАК Соглашение,
		|	ЗаявкаНаВозврат.Сделка                КАК Сделка,
		|	ЗаявкаНаВозврат.Валюта                КАК Валюта,
		|	ЗаявкаНаВозврат.Валюта                КАК ВалютаВзаиморасчетов,
		|	ЗаявкаНаВозврат.ГрафикОплаты          КАК ГрафикОплаты,
		|	ВЫБОР КОГДА ЗаявкаНаВозврат.Склад.ЭтоГруппа 
		|		И ЗаявкаНаВозврат.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|		ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИНАЧЕ ЗаявкаНаВозврат.Склад
		|	КОНЕЦ КАК Склад,
		|	ВЫБОР КОГДА ЗаявкаНаВозврат.Склад.ЭтоГруппа
		|		И ЗаявкаНаВозврат.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
		|	ЗаявкаНаВозврат.ЦенаВключаетНДС       КАК ЦенаВключаетНДС,
		|	ЗаявкаНаВозврат.НалогообложениеНДС    КАК НалогообложениеНДС,
		|	ВЫБОР
		|		КОГДА
		|			ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|			ИЛИ ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
		|		ТОГДА
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|	КОНЕЦ КАК ХозяйственнаяОперация,
		|	ЗаявкаНаВозврат.НеОтгружатьЧастями    КАК НеОтгружатьЧастями,
		|	ЗаявкаНаВозврат.АдресДоставки         КАК АдресДоставки,
		|	ЗаявкаНаВозврат.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке КАК ОрдернаяСхемаПриОтгрузке,
		|	ЗаявкаНаВозврат.ВернутьМногооборотнуюТару      КАК ВернутьМногооборотнуюТару,
		|	ЗаявкаНаВозврат.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
		|	ЗаявкаНаВозврат.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|
		|	ЗаявкаНаВозврат.Статус               КАК СтатусДокумента,
		|	НЕ ЗаявкаНаВозврат.Проведен          КАК ЕстьОшибкиПроведен,
		|	ВЫБОР
		|		КОГДА
		|			ЗаявкаНаВозврат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке)
		|			ИЛИ ЗаявкаНаВозврат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена)
		|		ТОГДА
		|			ЛОЖЬ
		|		ИНАЧЕ
		|			ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|
		|	ЗаявкаНаВозврат.БанковскийСчет                 КАК БанковскийСчетОрганизации,
		|	ЗаявкаНаВозврат.БанковскийСчетКонтрагента      КАК БанковскийСчетКонтрагента,
		|	ЗаявкаНаВозврат.Грузоотправитель               КАК Грузоотправитель,
		|	ЗаявкаНаВозврат.Грузополучатель                КАК Грузополучатель,
		|	ЗаявкаНаВозврат.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
		|	ЗаявкаНаВозврат.БанковскийСчетГрузополучателя  КАК БанковскийСчетГрузополучателя,
		|
		|	ЗаявкаНаВозврат.СкидкиНаценки.(
		|		КлючСвязи,
		|		СкидкаНаценка,
		|		Сумма
		|	) КАК СкидкиНаценки,
		|	ЗаявкаНаВозврат.СпособДоставки                        КАК СпособДоставки,
		|	ЗаявкаНаВозврат.ПеревозчикПартнер                     КАК ПеревозчикПартнер,
		|	ЗаявкаНаВозврат.ЗонаДоставки                          КАК ЗонаДоставки,
		|	ЗаявкаНаВозврат.ВремяДоставкиС                        КАК ВремяДоставкиС,
		|	ЗаявкаНаВозврат.ВремяДоставкиПо                       КАК ВремяДоставкиПо,
		|	ЗаявкаНаВозврат.АдресДоставкиПеревозчика              КАК АдресДоставкиПеревозчика,
		|	ЗаявкаНаВозврат.АдресДоставкиЗначенияПолей            КАК АдресДоставкиЗначенияПолей,
		|	ЗаявкаНаВозврат.АдресДоставкиПеревозчикаЗначенияПолей КАК АдресДоставкиПеревозчикаЗначенияПолей,
		|	ЗаявкаНаВозврат.ДополнительнаяИнформацияПоДоставке    КАК ДополнительнаяИнформацияПоДоставке,
		|	ЗаявкаНаВозврат.ПорядокРасчетов                       КАК ПорядокРасчетов
		|
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозврат
		|ГДЕ
		|	ЗаявкаНаВозврат.Ссылка = &ДокументОснование
		|";
		
		Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
		РеквизитыЗаказа = Запрос.Выполнить().Выбрать();
		РеквизитыЗаказа.Следующий();
		
		МассивДопустимыхСтатусов = Новый Массив();
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена);
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			РеквизитыЗаказа.ЗаказКлиента,
			РеквизитыЗаказа.СтатусДокумента,
			РеквизитыЗаказа.ЕстьОшибкиПроведен,
			РеквизитыЗаказа.ЕстьОшибкиСтатус,
			МассивДопустимыхСтатусов
		);
		
		// Заполнение шапки.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			Дата,
			РеквизитыЗаказа.СрокВозвратаМногооборотнойТары,
			РеквизитыЗаказа.РассчитыватьДатуВозвратаТарыПоКалендарю);
		
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			МассивСкладов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Склад");
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("Массив") Тогда
		
		// Заполнение шапки.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		Валюта = ВалютаВзаиморасчетов;
		БанковскийСчетОрганизации = РеквизитыЗаказа.БанковскийСчет;
		ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ЭтотОбъект);
		ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			Дата,
			РеквизитыЗаказа.СрокВозвратаМногооборотнойТары,
			РеквизитыЗаказа.РассчитыватьДатуВозвратаТарыПоКалендарю);
		
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
		Если Не ЗначениеЗаполнено(БанковскийСчетОрганизации) Тогда
			БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, , БанковскийСчетОрганизации);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
		КонецЕсли;
		
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("МассивДокументов", ДокументОснование);
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказыОстатки.Склад КАК Склад
			|ИЗ
			|	РегистрНакопления.ЗаказыКлиентов.Остатки(
			|		&ГраницаПериод,
			|		ЗаказКлиента В (&МассивДокументов)
			|) КАК ЗаказыОстатки
			|";
			
			Если ЗаполнятьНаДатуОтгрузки Тогда
				Запрос.УстановитьПараметр("ГраницаПериод", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
			Иначе
				Запрос.УстановитьПараметр("ГраницаПериод", Неопределено);
			КонецЕсли;
			
			РезультатЗапросаПоСкладам = Запрос.Выполнить();
			МассивСкладов = РезультатЗапросаПоСкладам.Выгрузить().ВыгрузитьКолонку("Склад");
			Склад = РеквизитыЗаказа.СкладОтгрузки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение);
		ЗаполнитьУсловияРасчетов(УсловияПродаж);
	КонецЕсли;
	
	// Заполнение т.ч. товары.
	Если Не ЗначениеЗаполнено(СкладОтгрузки) Тогда
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			// Только услуги
			Если МассивСкладов.Количество() = 0 Тогда
				ЗаполнятьПоОстаткам = Истина;
			// Услуги или товары
			ИначеЕсли МассивСкладов.Количество() = 1 Тогда
				СкладОтгрузки = МассивСкладов[0];
				Склад = СкладОтгрузки;
				ЗаполнятьПоОстаткам = Истина;
			// Услуги и товары
			ИначеЕсли МассивСкладов.Количество() = 2 Тогда
				Если Не ЗначениеЗаполнено(МассивСкладов[0]) Или
					Не ЗначениеЗаполнено(МассивСкладов[1]) Тогда
					СкладОтгрузки = ?(ЗначениеЗаполнено(МассивСкладов[0]), МассивСкладов[0], МассивСкладов[1]);
					Склад = СкладОтгрузки;
					ЗаполнятьПоОстаткам = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЗаполнятьПоОстаткам = Истина;
			СкладОтгрузки = Склад;
		КонецЕсли;
	Иначе
		Если РеквизитыЗаказа.ЗапрещеноВыбиратьГруппуСкладов Тогда
			Склад = СкладОтгрузки;
		КонецЕсли;
		ЗаполнятьПоОстаткам = Истина;
	КонецЕсли;
	
	// АСТЭК TODO заплатка проверить как было раншье
	
	Если ЗаполнятьПоОстаткам Тогда
		
		Если ТипОснования = Тип("Массив") Тогда
			МассивЗаказов = ДокументОснование;
		Иначе
			МассивЗаказов = Новый Массив();
			МассивЗаказов.Добавить(ЗаказКлиента);
		КонецЕсли;
		
		Документы.РеализацияТоваровУслуг.ЗаполнитьПоОстаткамЗаказов(
			ЭтотОбъект,
			Товары,
			СкидкиНаценки,
			?(СкладОтгрузки=Неопределено, Справочники.Склады.ПустаяСсылка(), СкладОтгрузки),
			МассивЗаказов,
			ЗаполнятьНаДатуОтгрузки,
			ПоСтавкамНДС,_СтавкаНДС
		);
		
		ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(ЗаказКлиента, Товары, "ЗаказКлиента");
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.РеализацияТоваровУслуг);
		НоменклатураСервер.ЗаполнитьСерииПоЗаказам(ЭтотОбъект,ПараметрыУказанияСерий);
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(ЭтотОбъект,ПараметрыУказанияСерий, Ложь);
		
	КонецЕсли;
	
	РеализацияПоЗаказам = Истина;
	
	Статус = Перечисления.СтатусыРеализацийТоваровУслуг.КОтгрузке;
	
	Основание = Документы.РеализацияТоваровУслуг.ПолучитьТекстОснованияДляПечати(ЭтотОбъект);
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииСделкиПоПродаже(Знач Основание)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СделкиСКлиентами.Ссылка КАК Сделка,
		|	СделкиСКлиентами.Партнер КАК Партнер,
		|	СделкиСКлиентами.СоглашениеСКлиентом КАК Соглашение,
		|	СделкиСКлиентамиПартнерыИКонтактныеЛица.КонтактноеЛицо КАК КонтактноеЛицо
		|ИЗ
		|	Справочник.СделкиСКлиентами КАК СделкиСКлиентами
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СделкиСКлиентами.ПартнерыИКонтактныеЛица КАК СделкиСКлиентамиПартнерыИКонтактныеЛица
		|		ПО (СделкиСКлиентамиПартнерыИКонтактныеЛица.Ссылка = СделкиСКлиентами.Ссылка)
		|			И (СделкиСКлиентамиПартнерыИКонтактныеЛица.Партнер = СделкиСКлиентами.Партнер)
		|			И (СделкиСКлиентамиПартнерыИКонтактныеЛица.КонтактноеЛицо <> ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
		|ГДЕ
		|	СделкиСКлиентами.Ссылка = &Основание");
		
	Запрос.УстановитьПараметр("Основание",Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСделкиПоПродаже(Выборка.Партнер);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		ЗаполнитьУсловияПродажПоCоглашению();
	Иначе
		ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииИндивидуальногоСоглашенияСКлиентом(Знач ДокументОснование)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СоглашениеСКлиентом.Ссылка                КАК Соглашение,
		|	СоглашениеСКлиентом.Партнер               КАК Партнер,
		|	СоглашениеСКлиентом.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	СоглашениеСКлиентом.КонтактноеЛицо        КАК КонтактноеЛицо,
		|
		|	СоглашениеСКлиентом.Статус                КАК СтатусДокумента,
		|	ВЫБОР
		|		КОГДА
		|			СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		|		ТОГДА
		|			ЛОЖЬ
		|		ИНАЧЕ
		|			ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	СоглашениеСКлиентом.Типовое КАК ЕстьОшибкиТиповое
		|
		|ИЗ
		|	Справочник.СоглашенияСКлиентами  КАК СоглашениеСКлиентом
		|ГДЕ
		|	СоглашениеСКлиентом.Ссылка = &ДокументОснование
		|");
		
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
		
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Выборка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыСоглашенийСКлиентами.Действует);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСоглашения(Выборка.ЕстьОшибкиТиповое);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.Соглашение,
		Выборка.СтатусДокумента,
		,
		Выборка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов
	);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	ЗаполнитьУсловияПродажПоCоглашению();
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииВозвратаТоваровОтКлиента(Знач ДокументОснование)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровОтКлиента.Ссылка               КАК Ссылка,
	|	ВозвратТоваровОтКлиента.Организация          КАК Организация,
	|	ВозвратТоваровОтКлиента.Партнер              КАК Партнер,
	|	ВозвратТоваровОтКлиента.Контрагент           КАК Контрагент,
	|	ВозвратТоваровОтКлиента.Сделка               КАК Сделка,
	|	ВозвратТоваровОтКлиента.Соглашение           КАК Соглашение,
	|	ВозвратТоваровОтКлиента.Валюта               КАК Валюта,
	|	ВозвратТоваровОтКлиента.Валюта               КАК ВалютаВзаиморасчетов,
	|	ВозвратТоваровОтКлиента.СуммаДокумента       КАК СуммаДокумента,
	|	ВозвратТоваровОтКлиента.СуммаДокумента       КАК СуммаВзаиморасчетов,
	|	ВозвратТоваровОтКлиента.Склад                КАК Склад,
	|	ВозвратТоваровОтКлиента.ЦенаВключаетНДС      КАК ЦенаВключаетНДС,
	|	ВозвратТоваровОтКлиента.НалогообложениеНДС   КАК НалогообложениеНДС,
	|	ВозвратТоваровОтКлиента.Договор              КАК Договор,
	|	ВозвратТоваровОтКлиента.ВозвратПереданнойМногооборотнойТары КАК ВернутьМногооборотнуюТару,
	|
	|	ВЫБОР КОГДА ВозвратТоваровОтКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|
	|	НЕ ВозвратТоваровОтКлиента.Проведен КАК ЕстьОшибкиПроведен,
	|
	|	ВозвратТоваровОтКлиента.Товары.(
	|		Номенклатура             КАК Номенклатура,
	|		Характеристика           КАК Характеристика,
	|		Упаковка                 КАК Упаковка,
	|		КоличествоУпаковок       КАК КоличествоУпаковок,
	|		Количество               КАК Количество,
	|		Цена                     КАК Цена,
	|		Сумма                    КАК Сумма,
	|		СтавкаНДС                КАК СтавкаНДС,
	|		СуммаНДС                 КАК СуммаНДС,
	|		СуммаСНДС                КАК СуммаСНДС,
	|		Ссылка.Склад             КАК Склад
	|	) КАК Товары,
	|
	|	ВозвратТоваровОтКлиента.Серии.(
	|		Номенклатура             КАК Номенклатура,
	|		Характеристика           КАК Характеристика,
	|		Серия                    КАК Серия,
	|		Количество               КАК Количество
	|	) КАК Серии
	|
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
	|ГДЕ
	|	ВозвратТоваровОтКлиента.Ссылка = &ДокументОснование";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.Ссылка,
		,
		Выборка.ЕстьОшибкиПроведен,
	);

	// Заполнение шапки и табличных частей
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	Товары.Загрузить(Выборка.Товары.Выгрузить());
	Серии.Загрузить(Выборка.Серии.Выгрузить());
	Если ЗначениеЗаполнено(Соглашение) Тогда
		ЗаполнитьУсловияПродажПоCоглашению();
	Иначе
		ЗаполнитьУсловияПродажПоУмолчанию();
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)

	Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		
		Партнер = ДанныеЗаполнения.Партнер;
		ЗаполнитьУсловияПродажПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗначениямАвтозаполнения(ДанныеЗаполнения = Неопределено)
	
	ЕстьДанныеЗаполнения = (НЕ ДанныеЗаполнения = Неопределено);
	ДанныеЗаполненияСтруктура = (ТипЗнч(ДанныеЗаполнения) = Тип("Структура"));
	
	// Автозаполнение не требуется при вводе на основании
	Если Не ЕстьДанныеЗаполнения Или ДанныеЗаполненияСтруктура И НЕ ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
		// Заполним основные свойства
		СвойстваАвтозаполнения = Новый Структура("Организация, Склад, ХозяйственнаяОперация");
		
		Если ДанныеЗаполненияСтруктура Тогда
			ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(СвойстваАвтозаполнения, ДанныеЗаполнения, Истина);
			
		КонецЕсли;
		
		ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(Ссылка, СвойстваАвтозаполнения);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваАвтозаполнения);
		
		// Заполним банковский счет и кассу в зависимости от организации
		СвойстваАвтозаполнения = Новый Структура("Организация, БанковскийСчетОрганизации, Касса", Организация);
		
		Если ДанныеЗаполненияСтруктура Тогда
			ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(СвойстваАвтозаполнения, ДанныеЗаполнения, Истина);
			
		КонецЕсли;
		
		ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(Ссылка, СвойстваАвтозаполнения);
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СвойстваАвтозаполнения);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииПоступленияТоваровУслуг(Знач ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка,
	|	ПоступлениеТоваровУслуг.Организация КАК Организация,
	|	ПоступлениеТоваровУслуг.Сделка КАК Сделка,
	|	ПоступлениеТоваровУслуг.Валюта КАК Валюта,
	|	ПоступлениеТоваровУслуг.Валюта КАК ВалютаВзаиморасчетов,
	|	ПоступлениеТоваровУслуг.Склад КАК Склад,
	|	ПоступлениеТоваровУслуг.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ПоступлениеТоваровУслуг.НалогообложениеНДС КАК НалогообложениеНДС,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация,
	|
	|	НЕ ПоступлениеТоваровУслуг.Проведен КАК ЕстьОшибкиПроведен,
	|
	|	ПоступлениеТоваровУслуг.Товары.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Упаковка КАК Упаковка,
	|		КоличествоУпаковок КАК КоличествоУпаковок,
	|		Количество КАК Количество,
	|		СтавкаНДС КАК СтавкаНДС,
	|		Склад КАК Склад
	|	) КАК Товары,
	|
	|	ПоступлениеТоваровУслуг.Серии.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Серия КАК Серия,
	|		Количество КАК Количество
	|	) КАК Серии
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ДокументОснование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();

	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.Ссылка,
		,
		Выборка.ЕстьОшибкиПроведен,);
	
	// Заполнение шапки и табличных частей
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	Товары.Загрузить(Выборка.Товары.Выгрузить());

	//Заполнение тч товары.
	ИспользованиеСкладов = Новый Структура("ИспользуютсяСкладыЗакупки, ИспользуютсяСкладыПродажи",
						ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки"),
						ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));

	Если ИспользованиеСкладов.ИспользуютсяСкладыЗакупки И Не ИспользованиеСкладов.ИспользуютсяСкладыПродажи Тогда

		МассивСкладов = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(Товары.ВыгрузитьКолонку("Склад"));
		
		Если МассивСкладов.Количество() = 1 Тогда
			Склад = МассивСкладов[0];
		Иначе
			Склад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;

	КонецЕсли;

	Серии.Загрузить(Выборка.Серии.Выгрузить());
	
	// Заполнение статусов указания серий
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.РеализацияТоваровУслуг);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Менеджер                  = Пользователи.ТекущийПользователь();
	Валюта                    = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
	ВалютаВзаиморасчетов      = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(ВалютаВзаиморасчетов);
	Организация               = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	БанковскийСчетОрганизации = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, , БанковскийСчетОрганизации);
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
	Касса                     = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Организация, , Касса);
	Подразделение             = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Менеджер, Подразделение);
	Склад                     = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"), Истина);
	ДатаРаспоряжения          = ТекущаяДата();
	
	СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(Склад, Менеджер);
	Если СтруктураОтветственного <> Неопределено Тогда
		Отпустил = СтруктураОтветственного.Ответственный;
		ОтпустилДолжность = СтруктураОтветственного.ОтветственныйДолжность;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг") Тогда
		Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	КонецЕсли;
	ОтветственныеЛицаСервер.ЗаполнитьОтветственныхЛицДокумента(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Виды запасов

Процедура ПроверитьИзменениеХозяйственнойОперации(Отказ)
	
	Если Не ЭтоНовый()
	 И ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РасчетыСКлиентами.СуммаРасход КАК СуммаОплаты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Обороты(,,Период,
		|		ЗаказКлиента = &ЗаказКлиента
		|	) КАК РасчетыСКлиентами
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
		|	ПО
		|		ДанныеДокумента.Ссылка = &Ссылка
		|		И ДанныеДокумента.ХозяйственнаяОперация <> &ХозяйственнаяОперация
		|ГДЕ
		|	РасчетыСКлиентами.СуммаРасход > 0
		|");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ЗаказКлиента", ?(ЗначениеЗаполнено(ЗаказКлиента), ЗаказКлиента, Ссылка));
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Реализация оплачена. Нельзя устанавливать операцию %1 '"),
				ХозяйственнаяОперация
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				"ХозяйственнаяОперация",
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИзменилисьРеквизитыШапкиВлияющиеНаВидыЗапасов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.НалогообложениеНДС,
	|	ВЫБОР КОГДА ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		ДанныеДокумента.Подразделение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		ДанныеДокумента.Менеджер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ КАК Менеджер,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.Сделка.ОбособленныйУчетТоваровПоСделке
	|		И &ФормироватьВидыЗапасовПоСделкам
	|	ТОГДА
	|		ДанныеДокумента.Сделка
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)
	|	КОНЕЦ КАК Сделка
	|
	|ПОМЕСТИТЬ СохраненныеДанныеДокумента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ДанныеДокумента.Организация <> СохраненныеДанные.Организация ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Подразделение <> СохраненныеДанные.Подразделение ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Менеджер <> СохраненныеДанные.Менеджер ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.Сделка <> СохраненныеДанные.Сделка ТОГДА
	|		Истина
	|	КОГДА ДанныеДокумента.НалогообложениеНДС <> СохраненныеДанные.НалогообложениеНДС ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК РеквизитыИзменены
	|ИЗ
	|	ТаблицаДанныхДокумента КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		СохраненныеДанныеДокумента КАК СохраненныеДанные
	|	ПО
	|		Истина
	|");
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеквизитыИзменены = Выборка.РеквизитыИзменены;
	Иначе
		РеквизитыИзменены = Ложь;
	КонецЕсли;
	
	Возврат РеквизитыИзменены;
	
КонецФункции

Функция ИзмениласьТЧТоварыОтносительноТЧВидыЗапасов(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТаблицаТоваров.Склад КАК Склад,
	|		ТаблицаТоваров.ЗаказКлиента КАК ЗаказКлиента,
	|		ТаблицаТоваров.Назначение КАК Назначение,
	|		ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|		ТаблицаТоваров.Характеристика КАК Характеристика,
	|		ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|		ТаблицаТоваров.Количество КАК Количество,
	|		ТаблицаТоваров.СуммаСНДС КАК СуммаСНДС,
	|		ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|		ТаблицаТоваров.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.Склад КАК Склад,
	|		ТаблицаВидыЗапасов.ЗаказКлиента КАК ЗаказКлиента,
	|		ТаблицаВидыЗапасов.ВидЗапасов.Назначение КАК Назначение,
	|		ТаблицаВидыЗапасов.Номенклатура КАК Номенклатура,
	|		ТаблицаВидыЗапасов.Характеристика КАК Характеристика,
	|		ТаблицаВидыЗапасов.СтавкаНДС КАК СтавкаНДС,
	|		-ТаблицаВидыЗапасов.Количество КАК Количество,
	|		-ТаблицаВидыЗапасов.СуммаСНДС КАК СуммаСНДС,
	|		-ТаблицаВидыЗапасов.СуммаНДС КАК СуммаНДС,
	|		-ТаблицаВидыЗапасов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|	) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Склад,
	|	ТаблицаТоваров.ЗаказКлиента,
	|	ТаблицаТоваров.Назначение,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.СтавкаНДС
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаСНДС) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаНДС) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаВзаиморасчетов) <> 0
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат (Не РезультатЗапрос.Пустой());
	
КонецФункции

Процедура СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц)
	
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		СтруктураАналитики = ЗапасыСервер.АналитикаОбособленноУчетаДокумента(МенеджерВременныхТаблиц);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Реализация превышает остаток товара организации %1 %2 %3'"),
			Организация,
			СтруктураАналитики.СтрокаАналитики,
			СтруктураАналитики.Аналитика
		);
		Если НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт
		 И НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			ТекстСообщения = ТекстСообщения + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '
				|по налогообложению %1'"),
				НалогообложениеНДС
			);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ЭтотОбъект
		);
	
		Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Номенклатура: %1, на складе %2 недостаточно %3 %4'"),
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
				СтрокаТаблицы.Склад,
				СтрокаТаблицы.Количество,
				СтрокаТаблицы.ЕдиницаИзмерения
			);
			Если СтрокаТаблицы.НеУказанНомерГТД Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru = ' с указанными номерами ГТД'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект
			);
			
		КонецЦикла;
		
		НалогообложениеНДСОрганизации = Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата);
		Если НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт
		 И НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД
		 И НалогообложениеНДСОрганизации <> НалогообложениеНДС Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Налогообложение документа отличается от налогообложения организации %1'"),
				НалогообложениеНДСОрганизации
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				"НалогообложениеНДС"
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДопКолонкиВидовЗапасов() Экспорт
	
	ТаблицаТовары = Товары.Выгрузить(, "Номенклатура, Характеристика, Склад, Упаковка, ЗаказКлиента, Количество, КоличествоУпаковок, СуммаВзаиморасчетов");
	ТаблицаТовары.Свернуть("Номенклатура, Характеристика, Склад, Упаковка, ЗаказКлиента", "Количество, КоличествоУпаковок, СуммаВзаиморасчетов");
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Склад");
	Для Каждого СтрокаТоваров Из ТаблицаТовары Цикл
		
		КоличествоТоваровПоСтроке = СтрокаТоваров.Количество;
		КоличествоУпаковокПоСтроке = СтрокаТоваров.КоличествоУпаковок;
		СуммаВзаиморасчетовПоСтроке = СтрокаТоваров.СуммаВзаиморасчетов;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		Для Каждого СтрокаЗапасов Из ВидыЗапасов.НайтиСтроки(СтруктураПоиска) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоПоСтроке = Мин(КоличествоТоваровПоСтроке, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			
			НоваяСтрока.Упаковка = СтрокаТоваров.Упаковка;
			НоваяСтрока.ЗаказКлиента = СтрокаТоваров.ЗаказКлиента;
			НоваяСтрока.КоличествоУпаковок = ?(КоличествоТоваровПоСтроке <> 0, КоличествоУпаковокПоСтроке * КоличествоПоСтроке / КоличествоТоваровПоСтроке, 0);
			НоваяСтрока.Количество = КоличествоПоСтроке;
			НоваяСтрока.СуммаСНДС = ?(СтрокаЗапасов.Количество <> 0, КоличествоПоСтроке * СтрокаЗапасов.СуммаСНДС / СтрокаЗапасов.Количество, 0);
			НоваяСтрока.СуммаНДС = ?(СтрокаЗапасов.Количество <> 0, КоличествоПоСтроке * СтрокаЗапасов.СуммаНДС / СтрокаЗапасов.Количество, 0);
			НоваяСтрока.СуммаВзаиморасчетов = ?(СтрокаЗапасов.Количество <> 0, КоличествоПоСтроке * СуммаВзаиморасчетовПоСтроке / КоличествоТоваровПоСтроке, 0);
			
			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			СтрокаЗапасов.СуммаСНДС = СтрокаЗапасов.СуммаСНДС - НоваяСтрока.СуммаСНДС;
			СтрокаЗапасов.СуммаНДС = СтрокаЗапасов.СуммаНДС - НоваяСтрока.СуммаНДС;
			
			КоличествоТоваровПоСтроке = КоличествоТоваровПоСтроке - НоваяСтрока.Количество;
			КоличествоУпаковокПоСтроке = КоличествоУпаковокПоСтроке - НоваяСтрока.КоличествоУпаковок;
			СуммаВзаиморасчетовПоСтроке = СуммаВзаиморасчетовПоСтроке - НоваяСтрока.СуммаВзаиморасчетов;
			
			Если КоличествоТоваровПоСтроке = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента();
	ПерезаполнитьВидыЗапасов = ДополнительныеСвойства.Свойство("ПерезаполнитьВидыЗапасов");
	Если Не Проведен
	 Или ПерезаполнитьВидыЗапасов
	 Или ИзменилисьРеквизитыШапкиВлияющиеНаВидыЗапасов(МенеджерВременныхТаблиц)
	 Или ИзмениласьТЧТоварыОтносительноТЧВидыЗапасов(МенеджерВременныхТаблиц) Тогда
	 
		СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц);
		ЗапасыСервер.УстановитьБлокировкуОстатковТоваровОрганизаций(МенеджерВременныхТаблиц);
		ЗапасыСервер.ТаблицаОстатковТоваровОрганизаций(Ссылка, Организация, Дата, ДополнительныеСвойства, МенеджерВременныхТаблиц);
		ТаблицаОшибок = ЗапасыСервер.ТаблицаОшибокЗаполненияВидовЗапасов();
		
		ЗапасыСервер.ЗаполнитьВидыЗапасовДокумента(
			МенеджерВременныхТаблиц,
			ДополнительныеСвойства,
			ВидыЗапасов,
			ТаблицаОшибок,
			Отказ
		);
		ВидыЗапасов.Свернуть("Номенклатура, Характеристика, ВидЗапасов, НомерГТД, Склад, СтавкаНДС", "Количество, СуммаСНДС, СуммаНДС");
		ЗаполнитьДопКолонкиВидовЗапасов();
		СообщитьОбОшибкахЗаполненияВидовЗапасов(ТаблицаОшибок, МенеджерВременныхТаблиц);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура СформироватьСписокРегистровДляКонтроля()

	Массив = Новый Массив;
	// Контроль выполняется при проведении\отмене проведения не нового документа.
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыКОтгрузке);
		Массив.Добавить(Движения.ПереданнаяВозвратнаяТара);
	КонецЕсли;

	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда

		Массив.Добавить(Движения.ОбеспечениеЗаказов);
		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ДвижениеТоваров);
		Массив.Добавить(Движения.ЗаказыКлиентов);

		Если НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.РеализацияТоваровУслуг).ИспользоватьСерииНоменклатуры Тогда
			Массив.Добавить(Движения.РезервыСерийТоваров);
			Массив.Добавить(Движения.ТоварыНаСкладах);
		КонецЕсли;

		Массив.Добавить(Движения.РасчетыСКлиентами);

	КонецЕсли;
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Процедура ЗаполнитьСуммуВзаиморасчетов()
	
	Если РеализацияПоЗаказам
		И Товары.НайтиСтроки(Новый Структура("СуммаВзаиморасчетов", 0)).Количество()=0 Тогда
		
		СуммаВзаиморасчетов = Товары.Итог("СуммаВзаиморасчетов");
		
	Иначе
		
		ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетов(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует временную таблицу товаров с аналитикой обособленного учета.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//								который будет содержать созданную таблицу
//
Процедура СформироватьВременнуюТаблицуТоваровИАналитики(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Склад КАК Склад,
	|
	|	ТаблицаДанныхДокумента.Подразделение,
	|	ТаблицаДанныхДокумента.Менеджер,
	|	ТаблицаДанныхДокумента.Сделка КАК Сделка,
	|	ТаблицаТоваров.Назначение КАК Назначение,
	|
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	&НалогообложениеНДС КАК НалогообложениеНДС,
	|
	|	ТаблицаТоваров.Количество КАК Количество
	|	
	|ПОМЕСТИТЬ ТаблицаТоваровИАналитики
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокумента КАК ТаблицаДанныхДокумента
	|	ПО
	|		Истина
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|;
	|");
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

// Процедура формирует временную таблицу доступных видов запасов
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//								который будет содержать созданную таблицу
//
Процедура СформироватьДоступныеВидыЗапасов(МенеджерВременныхТаблиц) Экспорт
	
	МассивСделок = Новый Массив;
	
	МассивСделок.Добавить(Сделка);
	
	ЗапасыСервер.ВидыЗапасовПоНалогообложению(
		Организация,
		НалогообложениеНДС,
		Дата,
		МассивСделок,
		Менеджер,
		Подразделение,
		МенеджерВременныхТаблиц
	);
	
КонецПроцедуры

Процедура ПроверитьСуммуПредоплаты(СуммаВзаиморасчетовПоДокументу, Отказ)
	
	Если СуммаПредоплаты > СуммаВзаиморасчетовПоДокументу Тогда
		
		ТекстОшибки = НСтр("ru='Сумма предоплаты превышает сумму взаиморасчетов по документу на %СуммаПревышения% %ВалютаВзаиморасчетов%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПревышения%", Формат(СуммаПредоплаты - СуммаВзаиморасчетовПоДокументу, "ЧДЦ=2"));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаВзаиморасчетов%", ВалютаВзаиморасчетов);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			Ссылка,
			"СуммаПредоплаты",
			,
			Отказ
		);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУсловияРасчетов(Знач УсловияПродаж)
	
	Если ЗначениеЗаполнено(УсловияПродаж.ФормаОплаты) Тогда
		ФормаОплаты = УсловияПродаж.ФормаОплаты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация = Организация Тогда
		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Организация, ФормаОплаты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГрафикОплаты) Или ЗначениеЗаполнено(УсловияПродаж.Соглашение)
	 И (Не ЗначениеЗаполнено(ЗаказКлиента) Или ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным) Тогда
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
		 Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет
		 Или Не ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
			ДатаПлатежа = ПродажиСервер.ПолучитьПоследнююДатуПоГрафику(Дата, УсловияПродаж.ГрафикОплаты, УсловияПродаж.Соглашение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСуммуДокумента() Экспорт
	
	СуммаЗаказанныхСтрок = 0;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.СуммаСНДС КАК СуммаСНДС
	|ПОМЕСТИТЬ
	|	Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Товары.СуммаСНДС),0) КАК СуммаСНДС
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	ИЛИ (Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) И НЕ &ВернутьМногооборотнуюТару)
	|");
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(,"Номенклатура,СуммаСНДС"));
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", ВернутьМногооборотнуюТару);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	СуммаДокумента = Выгрузка[0].СуммаСНДС;
	Возврат СуммаДокумента;
	
КонецФункции

#КонецЕсли

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	СтандартнаяОбработка = ложь;
	СтандартныйПрефикс = Организация.Префикс + "00-";
	
	Выборка = Документы.РеализацияТоваровУслуг.Выбрать(ТекущаяДата()-60*60*24*90);
	ТекНомерЧисло = 0;
	Пока выборка.Следующий() цикл
		ТекНомер = СтрЗаменить(Выборка.Номер,СтандартныйПрефикс,"");
		ДлинаНомера = СтрДлина(ТекНомер);
		Попытка
			Если Число(ТекНомер)>ТекНомерЧисло тогда
				ТекНомерЧисло = Число(ТекНомер);
				Номер = СтандартныйПрефикс + Формат(ТекНомерЧисло+1, "ЧЦ="+ДлинаНомера+"; ЧВН=; ЧГ=0");
			КонецЕсли;
		Исключение
			// Ничего	
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры
