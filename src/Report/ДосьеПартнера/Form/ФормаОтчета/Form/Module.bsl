
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Партнер") Тогда
		Если ТипЗнч(Параметры.Партнер) = Тип("СправочникСсылка.Партнеры") Тогда
			Партнеры.Добавить(Параметры.Партнер);
		ИначеЕсли ТипЗнч(Параметры.Партнер) = Тип("Массив") Тогда
			Партнеры.ЗагрузитьЗначения(Параметры.Партнер);
		КонецЕсли;

	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Отчет.ВариантКлассификацииЗадолженности = Константы.ОсновнойВариантКлассификацииЗадолженности.Получить();
		ЗагрузитьНастройки();
		УправлениеВидимостью();
		СформироватьОтчет();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТаблицаОтчета.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройки();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Сформировать(Команда)
	
	ОчиститьСообщения();
	
	СформироватьОтчет();
	ТаблицаОтчета.Показать();
	
КонецПроцедуры 

&НаКлиенте
Процедура АктуализироватьРасчеты(Команда)
	
	КодОтвета = Вопрос(НСтр("ru = 'Актуализировать расчеты с клиентами?'"), РежимДиалогаВопрос.ДаНет);
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		
		АктуализироватьРасчетыОбновитьОтчет();
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Расчеты актуализированы'"),
			, // НавигационнаяСсылка
			НСтр("ru = 'Расчеты с клиентами актуализированы'")
		);
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура СформироватьОтчет()
	
	ТаблицаОтчета.Очистить();
	ОбъектОтчет =  РеквизитФормыВЗначение("Отчет");
	
	Для каждого Партнер Из Партнеры Цикл
		
		ОбъектОтчет.СформироватьОтчет(ТаблицаОтчета,Партнер.Значение)
		
	КонецЦикла;
	
	Отчет.ЕстьНеактуальныеРасчетыСКлиентами 	= ОбъектОтчет.ЕстьНеактуальныеРасчетыСКлиентами;
	Отчет.ЕстьНеактуальныеРасчетыСПоставщиками 	= ОбъектОтчет.ЕстьНеактуальныеРасчетыСПоставщиками;
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()

	Перем Настройки;
	
	Настройки = Новый Структура;
	Настройки.Вставить("Контакты",Отчет.Контакты);
	Настройки.Вставить("ТекущаяАктивность",Отчет.ТекущаяАктивность);
	Настройки.Вставить("ДанныеКлиента",Отчет.ДанныеКлиента);
	Настройки.Вставить("ДанныеПоставщика",Отчет.ДанныеПоставщика);
	Настройки.Вставить("Классификация",Отчет.Классификация);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Отчет.КарточкаПартнера", "ФормаОтчета", Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()

	Перем ЗначениеНастроек;
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Отчет.КарточкаПартнера", "ФормаОтчета");
	Если ЗначениеНастроек = Неопределено Тогда
		
		Отчет.Контакты			= Истина;
		Отчет.ДанныеКлиента		= Истина;
		Отчет.ДанныеПоставщика	= Истина;
		Отчет.ТекущаяАктивность	= Истина;
		Отчет.Классификация		= Истина;
		
	ИначеЕсли ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		ЗначениеНастроек.Свойство("Контакты",Отчет.Контакты);
		ЗначениеНастроек.Свойство("ТекущаяАктивность",Отчет.ТекущаяАктивность);
		ЗначениеНастроек.Свойство("ДанныеКлиента",Отчет.ДанныеКлиента);
		ЗначениеНастроек.Свойство("ДанныеПоставщика",Отчет.ДанныеПоставщика);
		ЗначениеНастроек.Свойство("Классификация",Отчет.Классификация);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостью()

	Если НЕ ПравоДоступа("Чтение",Метаданные.Справочники.КонтактныеЛицаПартнеров) И
	     НЕ ПравоДоступа("Чтение",Метаданные.Справочники.Контрагенты) Тогда
		
		Отчет.Контакты = Ложь;
		Элементы.Контакты.Видимость = Ложь;
		
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.Справочники.СделкиСКлиентами) И
	     НЕ ПравоДоступа("Чтение",Метаданные.Документы.ЗаказКлиента) И 
	     НЕ ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам) И 
	     НЕ ПравоДоступа("Чтение",Метаданные.Справочники.СоглашенияСКлиентами) Тогда
		
		Отчет.ДанныеКлиента = Ложь;
		Элементы.ДанныеКлиента.Видимость = Ложь;
		
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам) И
		НЕ ПравоДоступа("Чтение",Метаданные.Справочники.СоглашенияСПоставщиками) И 
		НЕ ПравоДоступа("Чтение",Метаданные.Документы.ЗаказПоставщику) Тогда
		
		Отчет.ДанныеПоставщика = Ложь;
		Элементы.ДанныеПоставщика.Видимость = Ложь;
		
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.Документы.ЗапланированноеВзаимодействие) И 
	     НЕ ПравоДоступа("Чтение",Метаданные.Документы.Встреча) И 
	     НЕ ПравоДоступа("Чтение",Метаданные.Документы.ТелефонныйЗвонок) И
	     НЕ ПравоДоступа("Чтение",Метаданные.Документы.ЭлектронноеПисьмоВходящее) И
	     НЕ ПравоДоступа("Чтение",Метаданные.Документы.ЭлектронноеПисьмоИсходящее) И 
	     НЕ ПравоДоступа("Чтение",Метаданные.Справочники.МаркетинговыеМероприятия) И 
	     НЕ ПравоДоступа("Чтение",Метаданные.Справочники.Проекты) Тогда
		
		Отчет.ТекущаяАктивность = Ложь;
		Элементы.ТекущаяАктивность.Видимость = Ложь;
		
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.РегистрыСведений.ABCXYZКлассификацияКлиентов) И
	     НЕ ПравоДоступа("Чтение",Метаданные.РегистрыСведений.ПартнерыСегмента) Тогда
		
		Отчет.Классификация = Ложь;
		Элементы.Классификация.Видимость = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностью()

	Элементы.АктуализироватьРасчеты.Доступность = Отчет.ЕстьНеактуальныеРасчетыСКлиентами ИЛИ Отчет.ЕстьНеактуальныеРасчетыСПоставщиками;

КонецПроцедуры

&НаСервере
Функция АналитикаДляАктуализацииРасчетов()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	АналитикаУчетаПоПартнерам.КлючАналитики
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Партнер В(&МассивПартнеров)";
	
	Запрос.УстановитьПараметр("МассивПартнеров", Партнеры.ВыгрузитьЗначения());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КлючАналитики");
	
КонецФункции

&НаСервере
Процедура АктуализироватьРасчетыОбновитьОтчет()
	
	Если Отчет.ЕстьНеактуальныеРасчетыСКлиентами ИЛИ Отчет.ЕстьНеактуальныеРасчетыСПоставщиками Тогда
		МассивАналитикДляАктуализации = АналитикаДляАктуализацииРасчетов();
	КонецЕсли;
	
	Если Отчет.ЕстьНеактуальныеРасчетыСКлиентами Тогда
		ВзаиморасчетыСервер.ВыполнитьПроведениеДокументовПоРасчетамСКлиентами(МассивАналитикДляАктуализации);
		Отчет.ЕстьНеактуальныеРасчетыСКлиентами = Ложь;
	КонецЕсли;
	
	Если Отчет.ЕстьНеактуальныеРасчетыСПоставщиками Тогда
		ВзаиморасчетыСервер.ВыполнитьПроведениеДокументовПоРасчетамСПоставщиками(МассивАналитикДляАктуализации);
		Отчет.ЕстьНеактуальныеРасчетыСПоставщиками = Ложь;
	КонецЕсли;
	
	СформироватьОтчет();
	
КонецПроцедуры


