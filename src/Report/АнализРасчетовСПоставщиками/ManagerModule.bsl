#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// СтандартныеПодсистемы.ВариантыОтчетов

// Настройки вариантов этого отчета.
// Подробнее - см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчета(Настройки, ОписаниеОтчета) Экспорт
	
	// Настройка размещения, видимости по умолчанию, важности
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КредиторскаяЗадолженность");
	ВариантыОтчетовУТПереопределяемый.УстановитьВажностьВариантаОтчета(ОписаниеВарианта, "Важный");
	
КонецПроцедуры // НастроитьВариантыОтчета

///////////////////////////////////////////////////////////////////////////////
// Расширение общей формы отчетов
//

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ФормаОтчетаПереопределяемый.ПриСозданииНаСервере
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Дополнительные команды
	Элементы = ЭтаФорма.Элементы;
	Команды = ЭтаФорма.Команды;
	ПостоянныеКоманды = ЭтаФорма.ПостоянныеКоманды;
	
	// Создание команды
	КомандаАктуализироватьРасчеты = Команды.Добавить("АктуализироватьРасчетыСПоставщиками");
	КомандаАктуализироватьРасчеты.Действие = "Подключаемый_Команда";
	КомандаАктуализироватьРасчеты.Заголовок = НСтр("ru= 'Актуализировать расчеты'");
	КомандаАктуализироватьРасчеты.Подсказка = НСтр("ru= 'Актуализировать расчеты с поставщиками.'");
	
	ПостоянныеКоманды.Добавить("АктуализироватьРасчетыСПоставщиками");
	
	// Добавление кнопки вызова команды
	КнопкаАктуализироватьРасчеты = Элементы.Вставить("АктуализироватьРасчетыСПоставщиками", Тип("КнопкаФормы"), Элементы.ЛеваяЧастьКоманднойПанели, Элементы.КнопкиТабличногоДокумента);
	КнопкаАктуализироватьРасчеты.ИмяКоманды = "АктуализироватьРасчетыСПоставщиками";
	
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ФормаОтчетаПереопределяемый.ПередЗагрузкойВариантаНаСервере
//
Процедура ПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	Отчет = ЭтаФорма.Отчет;
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
	// Изменение настроек по функциональным опциям
	НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроек);
	
	// Установка значений по умолчанию
	НастроитьПараметрыОтборыПоУмолчанию(КомпоновщикНастроек);
	
	НовыеНастройкиКД = КомпоновщикНастроек.Настройки;
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ФормаОтчетаПереопределяемый.ПередЗагрузкойПользовательскихНастроекНаСервере
//
Процедура ПередЗагрузкойПользовательскихНастроекНаСервере(ЭтаФорма, НовыеПользовательскиеНастройкиКД) Экспорт
	Отчет = ЭтаФорма.Отчет;
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
	// Изменение настроек по функциональным опциям
	
	// Установка значений по умолчанию
	НастроитьПараметрыОтборыПоУмолчанию(КомпоновщикНастроек, Истина);
	
	НовыеПользовательскиеНастройкиКД = КомпоновщикНастроек.ПользовательскиеНастройки;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроек)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		ВариантыОтчетовУТПереопределяемый.УдалитьЭлементОтбораИзВсехНастроекОтчета(КомпоновщикНастроек, "Контрагент");
	КонецЕсли;
	
	Если НЕ Константы.ИспользоватьНесколькоКлассификацийЗадолженности.Получить() Тогда
		ВариантыОтчетовУТПереопределяемый.УдалитьПараметрИзПользовательскихНастроекОтчета(КомпоновщикНастроек, "ВариантКлассификацииЗадолженности");
	КонецЕсли;	
	
КонецПроцедуры

Процедура НастроитьПараметрыОтборыПоУмолчанию(КомпоновщикНастроек, ПользовательскиеНастройки = Ложь)
	НастройкаВариантКлассификацииЗадолженности = НастройкаПараметра(КомпоновщикНастроек, "ВариантКлассификацииЗадолженности", ПользовательскиеНастройки);
	НастройкаВариантКлассификацииЗадолженности.Использование = Истина;
	
	Если ТипЗнч(НастройкаВариантКлассификацииЗадолженности.Значение) <> Тип("СправочникСсылка.ВариантыКлассификацииЗадолженности") Тогда
		НастройкаВариантКлассификацииЗадолженности.Значение = Справочники.ВариантыКлассификацииЗадолженности.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НастройкаВариантКлассификацииЗадолженности.Значение) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	ВариантыКлассификацииЗадолженности.Ссылка КАК ВариантыКлассификации
		|ИЗ
		|	Справочник.ВариантыКлассификацииЗадолженности КАК ВариантыКлассификацииЗадолженности
		|ГДЕ
		|	(НЕ ВариантыКлассификацииЗадолженности.ПометкаУдаления)";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			НастройкаВариантКлассификацииЗадолженности.Значение = Выборка.ВариантыКлассификации;
		Иначе
			НастройкаВариантКлассификацииЗадолженности.Значение = Константы.ОсновнойВариантКлассификацииЗадолженности.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
	НастройкаВариантКалендарь = НастройкаПараметра(КомпоновщикНастроек, "Календарь", ПользовательскиеНастройки);
	НастройкаВариантКалендарь.Использование = Истина;
	НастройкаВариантКалендарь.Значение = НастройкаВариантКлассификацииЗадолженности.Значение.Календарь;
	
	НастройкаДатаОтчета = НастройкаПараметра(КомпоновщикНастроек, "ДатаОтчета", ПользовательскиеНастройки);
	НастройкаДатаОтчета.Использование = Истина;
	Если ТипЗнч(НастройкаДатаОтчета.Значение) = Тип("СтандартнаяДатаНачала") Тогда
		Если НЕ ЗначениеЗаполнено(НастройкаДатаОтчета.Значение.Дата) Тогда
			НастройкаДатаОтчета.Значение.Дата = КонецДня(ТекущаяДата());
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(НастройкаДатаОтчета.Значение) Тогда
			НастройкаДатаОтчета.Значение = КонецДня(ТекущаяДата());
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция НастройкаПараметра(КомпоновщикНастроек, ИмяПараметра, Пользовательский = Ложь)
	
	ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если ПараметрДанных <> Неопределено Тогда
		ПараметрПользовательскойНастройки = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ПараметрДанных.ИдентификаторПользовательскойНастройки);
		Если Пользовательский И ПараметрПользовательскойНастройки <> Неопределено Тогда
			Возврат ПараметрПользовательскойНастройки;
		Иначе
			Возврат ПараметрДанных;
		КонецЕсли;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

// Конец СтандартныеПодсистемы.ВариантыОтчетов
 
#КонецЕсли