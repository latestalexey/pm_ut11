#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СхемаЗапроса = ПолучитьМакет("ЗапросОстатковПоСправочномуУчетуСроковГодности");
	НастройкиЗапроса = СхемаЗапроса.НастройкиПоУмолчанию;
	
	ОсновнаяСхема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	
	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
	
	ОбщегоНазначенияУТКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаЗапроса, НастройкиЗапроса, НастройкиОсновнойСхемы);
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЭлементы(НастройкиЗапроса.ПараметрыДанных, НастройкиОсновнойСхемы.ПараметрыДанных);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаЗапроса,НастройкиЗапроса,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	ДеревоОбработки = Новый ДеревоЗначений;
	ПроцессорВывода.УстановитьОбъект(ДеревоОбработки);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных,Истина);
	
	ОстаткиСерийСправочно = Новый ТаблицаЗначений;
	ОстаткиСерийСправочно.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОстаткиСерийСправочно.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОстаткиСерийСправочно.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ОстаткиСерийСправочно.Колонки.Добавить("Помещение",Новый ОписаниеТипов("СправочникСсылка.СкладскиеПомещения"));
	ОстаткиСерийСправочно.Колонки.Добавить("Остаток",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	ОстаткиСерийСправочно.Колонки.Добавить("ГоденДо",Новый ОписаниеТипов("Дата"));
	ОстаткиСерийСправочно.Колонки.Добавить("УказыватьСрокГодностиСТочностьюДоЧасов",Новый ОписаниеТипов("Булево"));
	
	Для каждого СтрТовары Из ДеревоОбработки.Строки Цикл
		
		КоличествоТоваров = СтрТовары.ВНаличииОстаток;
		
		Для Каждого СтрСрокаГодности Из СтрТовары.Строки Цикл
			
			НоваяСтрокаДанных = ОстаткиСерийСправочно.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДанных,СтрСрокаГодности);
			
			НоваяСтрокаДанных.ГоденДо = СтрСрокаГодности.ГоденДоАвторасчет;
			НоваяСтрокаДанных.УказыватьСрокГодностиСТочностьюДоЧасов = СтрСрокаГодности.УказыватьСрокГодностиСТочностьюДоЧасовАвторасчет;
			
			НоваяСтрокаДанных.Остаток = Мин(КоличествоТоваров,СтрСрокаГодности.КоличествоСерия);
			
			КоличествоТоваров = КоличествоТоваров - НоваяСтрокаДанных.Остаток;
			
			Если КоличествоТоваров <= 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоТоваров <> 0 Тогда
			
			НоваяСтрокаДанных = ОстаткиСерийСправочно.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДанных,СтрТовары);
			
			НоваяСтрокаДанных.ГоденДо = СтрТовары.ГоденДоАвторасчет;
			НоваяСтрокаДанных.УказыватьСрокГодностиСТочностьюДоЧасов = СтрТовары.УказыватьСрокГодностиСТочностьюДоЧасовАвторасчет;			
			
			НоваяСтрокаДанных.Остаток = КоличествоТоваров;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ОстаткиСерийСправочно",ОстаткиСерийСправочно);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ОсновнаяСхема, НастройкиОсновнойСхемы, ДанныеРасшифровки);	
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецЕсли