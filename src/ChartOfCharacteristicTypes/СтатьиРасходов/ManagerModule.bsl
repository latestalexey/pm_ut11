#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//
// Возвращаемое значание:
//	Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ВариантРаспределенияРасходов");
	Результат.Добавить("ТипЗначенияНаНаправленияДеятельности; ТипЗначенияНаНаправленияДеятельности");
	Результат.Добавить("ТипЗначенияНаСебестоимостьТоваров; ТипЗначенияНаСебестоимостьТоваров");
	Результат.Добавить("ТипЗначенияНаРасходыБудущихПериодов; ТипЗначенияНаРасходыБудущихПериодов");
	Результат.Добавить("ТипЗначенияНаПроизводственныеЗатраты; ТипЗначенияНаПроизводственныеЗатраты");
	Результат.Добавить("ВариантРаздельногоУчетаНДС");
	
	Возврат Результат;
	
КонецФункции

// Функция определяет реквизиты выбранной статьи расходов.
//
// Параметры:
//  СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов - Ссылка на статью расходов
//
// Возвращаемое значение:
//	Структура - реквизиты статьи расходов
//
Функция ПолучитьРеквизитыСтатьиРасходов(Знач СтатьяРасходов) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СтатьиРасходов.СпособРаспределенияПоНаправлениямДеятельности КАК СпособРаспределения,
	|	СтатьиРасходов.ТипЗначения КАК ТипЗначения,
	|	СтатьиРасходов.СтатьяРасходов КАК СтатьяРасходов
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.Ссылка = &СтатьяРасходов
	|");
	
	Запрос.УстановитьПараметр("СтатьяРасходов", СтатьяРасходов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СпособРаспределения = Выборка.СпособРаспределения;
		ТребуетсяСпособРаспределения = Не Выборка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.НаправленияДеятельности"));
		ТипЗначения = Выборка.ТипЗначения;
		СтатьяРасходовРаспределение = Выборка.СтатьяРасходов;
	Иначе
		СпособРаспределения = Справочники.СпособыРаспределенияПоНаправлениямДеятельности.ПустаяСсылка();
		ТребуетсяСпособРаспределения = Ложь;
		ТипЗначения = Неопределено;
		СтатьяРасходовРаспределение = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("СпособРаспределения, ТребуетсяСпособРаспределения, ТипЗначения, СтатьяРасходов",
		СпособРаспределения,
		ТребуетсяСпособРаспределения,
		ТипЗначения,
		СтатьяРасходовРаспределение
	);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Функция определяет правило распределения на себестоимость товаров для статьи расходов.
//
// Параметры:
//  СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов - Ссылка на статью расходов
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ПравилаРаспределенияНаСебестоимостьТоваров - правило распределения статьи расходов
//
Функция ПолучитьПравилоРаспределения(СтатьяРасходов) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СтатьиРасходов.ПравилоРаспределенияНаСебестоимость КАК ПравилоРаспределения
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	СтатьиРасходов.Ссылка = &СтатьяРасходов
	|	И СтатьиРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|");
	
	Запрос.УстановитьПараметр("СтатьяРасходов", СтатьяРасходов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПравилоРаспределения = Выборка.ПравилоРаспределения;
	Иначе
		ПравилоРаспределения = Неопределено;
	КонецЕсли;
	
	Возврат ПравилоРаспределения;

КонецФункции

// Функция определяет аналитику расходов для подстановки в документ по статье расходов.
//
// Параметры:
//  СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов - Ссылка на статью расходов
//	Объект - ДанныеФормыСтруктура - Текущий объект 
//
// Возвращаемое значение:
//	СправочникСсылка, ДокументСсылка - значение аналитики расходов
//
Функция ПолучитьАналитикуРасходовПоУмолчанию(СтатьяРасходов, Объект) Экспорт
	
	АналитикаРасходов = Неопределено;
	
	Если СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Склады")
	   И Объект.Свойство("Склад") Тогда
	   
		АналитикаРасходов = Объект.Склад;
	   
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику")
		И Объект.Свойство("ЗаказПоставщику") Тогда
		
		АналитикаРасходов = Объект.ЗаказПоставщику;
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("ДокументСсылка.ПоступлениеТоваровУслуг")
		И ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		АналитикаРасходов = Объект.Ссылка;
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Партнеры")
		И Объект.Свойство("Партнер") Тогда
		
		АналитикаРасходов = Объект.Партнер;	
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации")
	   И Объект.Свойство("Организация") Тогда
	   
		АналитикаРасходов = Объект.Организация;
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия")
	   И Объект.Свойство("Подразделение") Тогда
	   
		АналитикаРасходов = Объект.Подразделение;	
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ДоговорыЭквайринга")
	   И Объект.Свойство("ДоговорЭквайринга") Тогда
	   
		АналитикаРасходов = Объект.ДоговорЭквайринга;
		
	ИначеЕсли СтатьяРасходов.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица")
		И Объект.Свойство("ПодотчетноеЛицо") Тогда
		
		АналитикаРасходов = Объект.ПодотчетноеЛицо;
	   
	КонецЕсли;
	
	Возврат АналитикаРасходов;
	
КонецФункции

// Процедура заполняет список хозяйственных операций, для которых используется
// ограничение отбора статьей расходов.
//
// Параметры:
//	СписокОпераций - СписокЗначений - Список хозяйственных операций и их представлений
//
Процедура ЗаполнитьСписокХозяйственныхОпераций(СписокОпераций, ВариантРаспределенияРасходов = Неопределено) Экспорт
	
	СписокОпераций.Очистить();
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.АвансовыйОтчет, НСтр("ru = 'Прочие расходы подотчетного лица'"));
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика, НСтр("ru = 'Услуги сторонних организаций'"));
	СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПрочиеРасходы, НСтр("ru = 'Выдача денежных средств на прочие расходы'"));
	
	Если ВариантРаспределенияРасходов <> Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьВнутреннееПотребление") Тогда
			СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию, НСтр("ru = 'Внутреннее потребление товаров'"));
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров") Тогда
			СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПорчаТоваров, НСтр("ru = 'Изменение стоимости испорченного товара'"));
		КонецЕсли;
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПересортицаТоваров, НСтр("ru = 'Изменение стоимости при пересортице'"));
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеТоваров, НСтр("ru = 'Списания недостач товаров'"));
		Если Не Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
			СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям, НСтр("ru = 'Выплата заработной платы'"));
		КонецЕсли;
	КонецЕсли;
	
	Если ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности
	 ИЛИ ВариантРаспределенияРасходов = Неопределено Тогда
		СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности, НСтр("ru = 'Списание задолженности партнеров'"));
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
			СписокОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОтчетБанкаПоОперациямЭквайринга, НСтр("ru = 'Эквайринговая комиссия'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.Отбор.Свойство("ХозяйственнаяОперация")
	 И ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
	 
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатьиРасходов.Ссылка КАК Ссылка,
		|	СтатьиРасходов.Наименование КАК Представление
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|ГДЕ
		|	СтатьиРасходов.Наименование ПОДОБНО &СтрокаПоиска
		|	И (Не СтатьиРасходов.ОграничитьИспользование
		|	ИЛИ СтатьиРасходов.Ссылка В (
		|		ВЫБРАТЬ
		|			ДоступныеОперации.Ссылка
		|		ИЗ
		|			ПланВидовХарактеристик.СтатьиРасходов.ДоступныеХозяйственныеОперации КАК ДоступныеОперации
		|		ГДЕ
		|			ДоступныеОперации.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|		)
		|	)
		|");
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Параметры.Отбор.ХозяйственнаяОперация);
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Представление);
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

Процедура ЗаполнитьПредопределенныеСтатьиРасходов() Экспорт
	
	МассивСтатей = Новый Массив;
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж);
	МассивСтатей.Добавить(ПланыВидовХарактеристик.СтатьиРасходов.ПогрешностьРасчетаСебестоимости);

	Для Каждого СтатьяРасходов Из МассивСтатей Цикл

		Если Не ЗначениеЗаполнено(СтатьяРасходов.ВариантРаспределенияРасходов) Тогда

			СтатьяРасходовОбъект = СтатьяРасходов.ПолучитьОбъект();
			СтатьяРасходовОбъект.ВариантРаспределенияРасходов = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности;
			СтатьяРасходовОбъект.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
			СтатьяРасходовОбъект.ДополнительныеСвойства.Вставить("ИзменениеКлючевыхРеквизитов", Истина);

			Попытка
				СтатьяРасходовОбъект.Записать();
			Исключение
			КонецПопытки;

		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВариантРаздельногоУчетаНДС() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатьиРасходов.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|ГДЕ
	|	НЕ СтатьиРасходов.ПометкаУдаления
	|	И НЕ СтатьиРасходов.ЭтоГруппа
	|	И СтатьиРасходов.ВариантРаздельногоУчетаНДС = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.ПустаяСсылка)"
	;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтатьяОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СтатьяОбъект.ОбменДанными.Загрузка = Истина;
		
		СтатьяОбъект.ВариантРаздельногоУчетаНДС = Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента;
		
		Попытка
			СтатьяОбъект.Записать();
		Исключение
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры
#КонецЕсли