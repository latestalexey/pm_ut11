#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтрокаПоиска = Неопределено;
	ВыборГруппИЭлементов = Неопределено;
	
	Параметры.Свойство("СтрокаПоиска", СтрокаПоиска);
	
	Если СтрокаПоиска = Неопределено Тогда
		
		СтрокаПоиска = "";
		
	КонецЕсли;
	
	Параметры.Свойство("ВыборГруппИЭлементов", ВыборГруппИЭлементов);
	
	Если ВыборГруппИЭлементов = Неопределено Тогда
		
		ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсточникиДанныхПланирования.Ссылка КАК Значение,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ИсточникиДанныхПланирования.Ссылка) КАК Представление,
	|	ИсточникиДанныхПланирования.ПометкаУдаления КАК ПометкаУдаления,
	|	ИсточникиДанныхПланирования.ОграничениеВыборкиПоПериоду КАК ОграничениеВыборкиПоПериоду
	|ИЗ
	|	Справочник.ИсточникиДанныхПланирования КАК ИсточникиДанныхПланирования
	|ГДЕ
	|	(ИсточникиДанныхПланирования.ЭтоГруппа
	|				И &Группы
	|			ИЛИ НЕ ИсточникиДанныхПланирования.ЭтоГруппа
	|				И &Элементы)
	|	И ИсточникиДанныхПланирования.Наименование ПОДОБНО &СтрокаПоиска");
	
	Запрос.УстановитьПараметр("Группы", ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы ИЛИ ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	Запрос.УстановитьПараметр("Элементы", ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы ИЛИ ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска + "%");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураВыбора = Новый Структура("Значение", Новый Структура("Значение, ОграничениеВыборкиПоПериоду", Выборка.Значение, Выборка.ОграничениеВыборкиПоПериоду));
			
			Если Выборка.ПометкаУдаления Тогда
				
				СтруктураВыбора.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
				
			КонецЕсли;
			
			ДанныеВыбора.Добавить(СтруктураВыбора, Выборка.Представление);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Прочее

Функция ВыбратьДанные(ПараметрыИсточникаДанных, ПользовательскиеНастройки, ДополнительныеПараметры) Экспорт
	
	// Схема компоновки данных
	СхемаКомпоновкиДанных = ПараметрыИсточникаДанных.ИсточникДанныхПланирования.СхемаКомпоновкиДанных.Получить();
	
	// Загрузка настроек
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Если ПользовательскиеНастройки <> Неопределено Тогда
		
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
		
	КонецЕсли;
	
	// Установка параметров данных
	ПараметрНачалоПериода = СхемаКомпоновкиДанных.Параметры.Найти("НачалоПериода");
	
	Если ПараметрНачалоПериода <> Неопределено И ДополнительныеПараметры.Свойство("Период") <> Неопределено Тогда
		
		КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", ДополнительныеПараметры.Период.ДатаНачала);
		
	КонецЕсли;
	
	ПараметрКонецПериода = СхемаКомпоновкиДанных.Параметры.Найти("КонецПериода");
	
	Если ПараметрКонецПериода <> Неопределено И ДополнительныеПараметры.Свойство("Период") <> Неопределено Тогда
		
		КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", ДополнительныеПараметры.Период.ДатаОкончания);
		
	КонецЕсли;
	
	ПараметрПериод = СхемаКомпоновкиДанных.Параметры.Найти("Период");
	
	Если ПараметрПериод <> Неопределено И ДополнительныеПараметры.Свойство("Дата") <> Неопределено Тогда
		
		КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", ДополнительныеПараметры.Дата.Дата);
		
	КонецЕсли;
	
	// Установка отбора по сегментам номенклатуры
	Если ОбщегоНазначенияУТКлиентСервер.ПолучитьПараметр(КомпоновщикНастроекКомпоновкиДанных.Настройки, "ИспользуетсяОтборПоСегментуНоменклатуры") <> Неопределено Тогда
		
		СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроекКомпоновкиДанных);
		
	КонецЕсли;
	
	// Отключение вывода общих итогов
	КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	КомпоновщикНастроекКомпоновкиДанных.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	// Компоновка макета
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Инициализация процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	// Таблица значений, в которую будет получен результат
	Результат = Новый ТаблицаЗначений;
	
	// Получение результата
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(Результат);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	Если ПараметрыИсточникаДанных.Исключать И Результат.Колонки.Найти("Количество") <> Неопределено Тогда
		
		Для каждого СтрокаРезультата из Результат Цикл
			
			СтрокаРезультата.Количество = -СтрокаРезультата.Количество;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ШаблоныСхемыКомпоновкиДанных() Экспорт
	
	Шаблоны = Новый Массив;
	
	Для каждого Макет из Метаданные.Справочники.ИсточникиДанныхПланирования.Макеты Цикл
		
		Если Макет.ТипМакета <> Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если Макет.Имя = "ЗаказыКлиентовПредопределенный" И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")
			ИЛИ Макет.Имя = "ЗаказыПоставщикамПредопределенный" И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам")
			ИЛИ Макет.Имя = "ЗаказыНаВнутреннееПотреблениеПредопределенный" И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаВнутреннееПотребление")
			ИЛИ Макет.Имя = "ЗаказыНаПеремещениеОтгрузкаПредопределенный" И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение")
			ИЛИ Макет.Имя = "ЗаказыНаПеремещениеПоступлениеПредопределенный" И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение")
			ИЛИ Макет.Имя = "ЗаказыНаСборкуОтгрузкаПредопределенный" И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку")
			ИЛИ Макет.Имя = "ЗаказыНаСборкуПоступлениеПредопределенный" И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку") Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Шаблоны.Добавить(Новый Структура("Имя, Синоним", Макет.Имя, Макет.Синоним));
		
	КонецЦикла;
	
	Возврат Шаблоны;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

Процедура ПослеЗагрузкиДанныхИзДругойМодели() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсточникиДанныхПланирования.Ссылка,
	|	ИсточникиДанныхПланирования.ИмяШаблонаСКД
	|ИЗ
	|	Справочник.ИсточникиДанныхПланирования КАК ИсточникиДанныхПланирования";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Выборка.ИмяШаблонаСКД) Тогда
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения("");
			
			СправочникОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


#КонецЕсли