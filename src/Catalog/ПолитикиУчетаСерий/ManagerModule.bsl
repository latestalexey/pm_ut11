#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

//Возвращает структуру с параметрами учетной политики по сериям
//
//	Параметры:
//		ВидНоменклатуры - вид номенклатуры для которого нужно получить параметры учетной политики по сериям
//		Склад - склад, для которого нужно получить параметры учетной политики по сериям
//	Возвращаемое значение:
//		Структура
//
Функция ПараметрыПолитикиУчетаСерийПоВидуНоменклатуры(ВидНоменклатуры, Склад) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ИспользоватьСерии");
	СтруктураВозврата.Вставить("ВидНоменклатуры");
	СтруктураВозврата.Вставить("ПолитикаУчетаСерий");
	СтруктураВозврата.Вставить("УказыватьПриПоступлении");
	СтруктураВозврата.Вставить("УказыватьПриОтгрузке");
	СтруктураВозврата.Вставить("УказыватьПриПланированииОтгрузки");
	СтруктураВозврата.Вставить("УчетСерийПоFEFO");
	СтруктураВозврата.Вставить("УказывыватьПоФактуОтбора");
	СтруктураВозврата.Вставить("УчитыватьОстаткиСерий");
	СтруктураВозврата.Вставить("ИспользоватьНомерСерии");
	СтруктураВозврата.Вставить("ИспользоватьСрокГодностиСерии");
	СтруктураВозврата.Вставить("ИспользоватьКоличествоСерии");
	СтруктураВозврата.Вставить("ТочностьУказанияСрокаГодностиСерии");
	СтруктураВозврата.Вставить("ФорматнаяСтрокаСрокаГодности");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.ИспользоватьСерии КАК ИспользоватьСерии,
	|	ВидыНоменклатуры.Ссылка КАК ВидНоменклатуры,
	|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий, ЗНАЧЕНИЕ(Справочник.ПолитикиУчетаСерий.ПустаяСсылка)) КАК ПолитикаУчетаСерий,
	|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке, ЛОЖЬ) КАК УказыватьПриПоступлении,
	|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузке, ЛОЖЬ) КАК УказыватьПриОтгрузке,
	|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки, ЛОЖЬ) КАК УказыватьПриПланированииОтгрузки,
	|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO, ЛОЖЬ) КАК УчетСерийПоFEFO,
	|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора, ЛОЖЬ) КАК УказывыватьПоФактуОтбора,
	|	ЕСТЬNULL(ТЧПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий, ЛОЖЬ) КАК УчитыватьОстаткиСерий,
	|	ВидыНоменклатуры.ИспользоватьНомерСерии КАК ИспользоватьНомерСерии,
	|	ВидыНоменклатуры.ИспользоватьСрокГодностиСерии КАК ИспользоватьСрокГодностиСерии,
	|	ВидыНоменклатуры.ИспользоватьКоличествоСерии КАК ИспользоватьКоличествоСерии,
	|	ВидыНоменклатуры.ТочностьУказанияСрокаГодностиСерии КАК ТочностьУказанияСрокаГодностиСерии
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ТЧПолитикиУчетаСерий
	|		ПО ВидыНоменклатуры.Ссылка = ТЧПолитикиУчетаСерий.Ссылка
	|			И (ТЧПолитикиУчетаСерий.Склад = &Склад)
	|ГДЕ
	|	ВидыНоменклатуры.Ссылка = &ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата,Выборка);
	
	СтруктураВозврата.ФорматнаяСтрокаСрокаГодности =  Справочники.ВидыНоменклатуры.ФорматнаяСтрокаСрокаГодности(СтруктураВозврата.ТочностьУказанияСрокаГодностиСерии);
	
	Возврат СтруктураВозврата;
КонецФункции

//Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//	Возвращаемое значание:
//		Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("ТипПолитики");
	
	Результат.Добавить("УказыватьПриОтгрузке");
	Результат.Добавить("УказыватьПриОтгрузкеВРозницу");
	Результат.Добавить("УказыватьПриОтгрузкеКлиенту");
	Результат.Добавить("УказыватьПриОтгрузкеКомплектовДляРазборки");
	Результат.Добавить("УказыватьПриОтгрузкеКомплектующихДляСборки");
	Результат.Добавить("УказыватьПриОтгрузкеНаВнутренниеНужды");
	Результат.Добавить("УказыватьПриОтгрузкеПоВозвратуПоставщику");
	Результат.Добавить("УказыватьПриОтгрузкеПоПеремещению");
	
	Результат.Добавить("УказыватьПриПриемке");
	Результат.Добавить("УказыватьПриПриемкеКомплектующихПослеРазборки");
	Результат.Добавить("УказыватьПриПриемкеОтПоставщика");
	Результат.Добавить("УказыватьПриПриемкеПоВозвратуОтКлиента");
	Результат.Добавить("УказыватьПриПриемкеПоПеремещению");
	Результат.Добавить("УказыватьПриПриемкеПоПрочемуОприходованию");
	Результат.Добавить("УказыватьПриПриемкеСобранныхКомплектов");
	Результат.Добавить("УказыватьПриОтгрузкеПоПеремещению");
	
	Результат.Добавить("УказыватьПриОтраженииИзлишковНедостачПорчи");
	Результат.Добавить("УказыватьПриПеремещенииМеждуПомещениями");
	
	Возврат Результат;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ИспользоватьСерии = Ложь;
	
	Если Не Параметры.Свойство("ИспользоватьСерии", ИспользоватьСерии) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ИспользоватьСерии Тогда
		Возврат;
	КонецЕсли;
		
	СтрокаПоиска = Параметры.СтрокаПоиска;
	
	МассивДопустимыхТиповПолитик = НоменклатураКлиентСервер.ПолучитьМассивДопустимыхТиповПолитикУчетаСерий(Параметры);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПолитикиУчетаСерий.Наименование КАК Наименование,
	|	ПолитикиУчетаСерий.Ссылка КАК ПолитикаУчетаСерий
	|ИЗ
	|	Справочник.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|ГДЕ
	|	ПолитикиУчетаСерий.ТипПолитики В(&ТипыПолитик)
	|	И ВЫБОР
	|			КОГДА (НЕ ВЫРАЗИТЬ(&Склад КАК Справочник.Склады).ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач)
	|				ТОГДА (НЕ ПолитикиУчетаСерий.УказыватьПриОтраженииИзлишковНедостачПорчи)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	" + ?(СтрокаПоиска = Неопределено, "", "И ПолитикиУчетаСерий.Наименование ПОДОБНО &СтрокаПоиска") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТипыПолитик", МассивДопустимыхТиповПолитик);
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	Если СтрокаПоиска <> Неопределено Тогда
		Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска + "%");
	КонецЕсли;
	
	ДанныеВыбора = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.ПолитикаУчетаСерий, Выборка.Наименование);
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#КонецЕсли
