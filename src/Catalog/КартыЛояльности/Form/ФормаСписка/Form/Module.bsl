
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	УстановитьВидКартыИПартнераИзОтбора();
	
	ОтборыСписковКлиентСервер.УстановитьАктуальностьПоУмолчанию(Актуальность);
	Список.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", НачалоДня(ТекущаяДата()));

	ОтборыСписковКлиентСервер.ОтборПоАктуальностиПриСозданииНаСервере(Список, Актуальность, ДатаАктуальности, СтруктураБыстрогоОтбора);

	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если ОтборыСписковКлиентСервер.НеобходимОтборПоСостояниюПриСозданииНаСервере(Состояние, СтруктураБыстрогоОтбора) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Состояние", Состояние, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Состояние));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода,СчитывательМагнитныхКарт");

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		ИначеЕсли ИмяСобытия ="TracksData" Тогда
			ОбработатьДанныеСчитывателяМагнитныхКарт(Параметр);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "СчитанаКартаЛояльности"
	 И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		Элементы.Список.ТекущаяСтрока = Параметр.КартаЛояльности;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_КартаЛояльности" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если УстановитьВидКартыИПартнераИзОтбора() Тогда
		
		ТаблицаСохраненныеНастройки = Новый ТаблицаЗначений;
		ТаблицаСохраненныеНастройки.Колонки.Добавить("Ключ");
		ТаблицаСохраненныеНастройки.Колонки.Добавить("Значение");
		
		Для Каждого КлючИЗначение Из Настройки Цикл
			НоваяСтрока = ТаблицаСохраненныеНастройки.Добавить();
			НоваяСтрока.Ключ = КлючИЗначение.Ключ;
			НоваяСтрока.Значение = КлючИЗначение.Значение;
		КонецЦикла;
		
		СохраненныеНастройки = ПоместитьВоВременноеХранилище(ТаблицаСохраненныеНастройки, УникальныйИдентификатор);
		
		Настройки.Очистить();
		
	Иначе
		
		Партнер = Настройки.Получить("Партнер");
		ВидКарты = Настройки.Получить("ВидКарты");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Партнер", Партнер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Партнер));
	ВидКартыОтборПриИзмененииНаСервере();
	
	ОтборыСписковКлиентСервер.ОтборПоАктуальностиПриЗагрузкеИзНастроек(Список, Актуальность, ДатаАктуальности, СтруктураБыстрогоОтбора, Настройки);

	Если ОтборыСписковКлиентСервер.НеобходимОтборПоСостояниюПриЗагрузкеИзНастроек(Состояние, СтруктураБыстрогоОтбора, Настройки) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Состояние", Состояние, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Состояние));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если ЭтоАдресВременногоХранилища(СохраненныеНастройки) Тогда
		
		ТаблицаСохраненныеНастройки = ПолучитьИзВременногоХранилища(СохраненныеНастройки);
		Для Каждого СтрокаТЧ Из ТаблицаСохраненныеНастройки Цикл
			Настройки.Вставить(СтрокаТЧ.Ключ, СтрокаТЧ.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВидКартыОтборПриИзменении(Элемент)
	
	ВидКартыОтборПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерОтборПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Партнер", Партнер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Партнер));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Состояние", Состояние, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Состояние));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСрокДействияПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаАктуальности);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСрокДействияОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборыСписковКлиентСервер.ПриОчисткеОтбораПоАктуальности(Список, Актуальность, ДатаАктуальности, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСрокДействияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ПриВыбореАктуальности(ВыбранноеЗначение, Актуальность, ДатаАктуальности);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ВидКартыОтборПриИзмененииНаСервере()
	
	Персонализирована = КартаПерсонализирована(ВидКарты);
	
	Если Не Персонализирована Тогда
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Партнер", Партнер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Партнер));
	КонецЕсли;
	
	Элементы.ПартнерОтбор.Доступность = Персонализирована;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Владелец", ВидКарты, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ВидКарты));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

// МеханизмВнешнегоОборудования
&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	КартыЛояльностиКлиент.ОбработатьШтрихкоды(ЭтаФорма, ДанныеШтрихкодов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеСчитывателяМагнитныхКарт(Данные)
	
	КартыЛояльностиКлиент.ОбработатьДанныеСчитывателяМагнитныхКарт(ЭтаФорма, Данные);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция УстановитьВидКартыИПартнераИзОтбора()
	
	ЗначениеОтбораУстановлено = Ложь;
	
	Если Параметры.Свойство("Отбор")
	   И Параметры.Отбор.Свойство("Владелец")
	Тогда
		ВидКарты = Параметры.Отбор.Владелец;
		Элементы.ВидКартыОтбор.ТолькоПросмотр = Истина;
		ЗначениеОтбораУстановлено = Истина;
	Иначе
		ВидКарты = Неопределено;
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор")
	   И Параметры.Отбор.Свойство("Партнер")
	Тогда
		Партнер = Параметры.Отбор.Партнер;
		Элементы.ПартнерОтбор.ТолькоПросмотр = Истина;
		ЗначениеОтбораУстановлено = Истина;
	Иначе
		Партнер = Неопределено;
	КонецЕсли;
	
	Возврат ЗначениеОтбораУстановлено;
	
КонецФункции

&НаСервереБезКонтекста
Функция КартаПерсонализирована(ВидКарты)
	
	Персонализирована = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыКартЛояльности.Персонализирована КАК Персонализирована
	|ИЗ
	|	Справочник.ВидыКартЛояльности КАК ВидыКартЛояльности
	|ГДЕ
	|	ВидыКартЛояльности.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ВидКарты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Персонализирована = Выборка.Персонализирована;
	КонецЕсли;
	
	Возврат Персонализирована;
	
КонецФункции

