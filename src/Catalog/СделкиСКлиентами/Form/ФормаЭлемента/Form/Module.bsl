
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Обработчик подсистемы "Дополнительные отчеты и обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	
	//кэширование значений
	ВалютаУпрУчета               = Константы.ВалютаУправленческогоУчета.Получить();
	СделкаПроиграна              = (Объект.Статус = Перечисления.СтатусыСделок.Проиграна);
	РольКлиент                   = Справочники.РолиПартнеровВСделкахИПроектах.Клиент;
	РольКонкурент                = Справочники.РолиПартнеровВСделкахИПроектах.Конкурент;
	ПроцессыИспользуются         = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеСделками");
	ПричинаПроигрышаНеОпределена = Справочники.ПричиныПроигрышаСделок.ПустаяСсылка();
	
	//Обработчик подсистемы "Взаимодействия"
	Взаимодействия.ПодготовитьОповещения(ЭтаФорма,Параметры);
	
	Если НЕ НеобходимоОповещение И Параметры.Свойство("НеобходимоОповещение") Тогда
		НеобходимоОповещение = Истина;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПроцессыИспользуются = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеСделками");
	ПриСозданииЧтенииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ЗадачаИсполнителя" ИЛИ ИмяСобытия = "Запись_СтатистикаСделокСКлиентами" Тогда
		Если Параметр.Свойство("Сделка") И Параметр.Сделка = Объект.Ссылка Тогда
			ЭтапПроцессаПродажи = ТекущийЭтап(Объект.Ссылка);
			Если ЗначениеЗаполнено(ЭтапПроцессаПродажи) И ЗначениеЗаполнено(ЭтапыПроцесса) Тогда
				ИндексТекущегоЭтапа = ЭтапыПроцесса.Найти(ЭтапПроцессаПродажи);
				УстановитьУправлениеЭтапами();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);

	Если Объект.Ссылка.ВидСделки <> ТекущийОбъект.ВидСделки Тогда
		ВидСделкиИзменен = Истина;
		ТипСделки = Объект.ВидСделки.ТипСделки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//подтвердить фиксацию проигрыша на текущем этапе для процессов продаж, управляемых "вручную"
	Если ПроцессыИспользуются И Не СделкаПроиграна
		И Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСделок.Проиграна")
		И (ТипСделки = ПредопределенноеЗначение("Перечисление.ТипыСделокСКлиентами.СделкиСРучнымПереходомПоЭтапам") Или Объект.ПереведенаНаУправлениеВРучную) Тогда
		
		Ответ = Вопрос(
		НСтр("ru='Фиксация проигрыша сделки на текущем этапе. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет
		);
		
		Отказ = (Ответ = КодВозвратаДиалога.Нет);
		СделкаПроиграна = Не Отказ;
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСделок.Проиграна") И Объект.ПричинаПроигрышаСделки = ПредопределенноеЗначение("Справочник.ПричиныПроигрышаСделок.ПроигрышКонкуренту") Тогда
		Если Объект.ПартнерыИКонтактныеЛица.НайтиСтроки(Новый Структура("ВыигралСделку",Истина)).Количество() = 0 Тогда
			
			Ответ = Вопрос(
				НСтр("ru='Необходимо указать конкурента, выигравшего сделку.
				|Открыть форму выбора?'"),
				РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				РезультатВыбора = ОткрытьФормуМодально("Справочник.Партнеры.ФормаВыбора",Новый Структура("Отбор",Новый Структура("Конкурент",Истина)),ЭтаФорма);
				Если РезультатВыбора <> Неопределено Тогда
					НайденныеСтроки = Объект.ПартнерыИКонтактныеЛица.НайтиСтроки(Новый Структура("Партнер,РольПартнера",РезультатВыбора,ПредопределенноеЗначение("Справочник.РолиПартнеровВСделкахИПроектах.Конкурент")));
					Если НайденныеСтроки.Количество() > 0 Тогда
						НайденныеСтроки[0].ВыигралСделку = Истина;
					Иначе
					НоваяСтрока = Объект.ПартнерыИКонтактныеЛица.Добавить();
					НоваяСтрока.Партнер = РезультатВыбора;
					НоваяСтрока.РольПартнера = ПредопределенноеЗначение("Справочник.РолиПартнеровВСделкахИПроектах.Конкурент");
					НоваяСтрока.ВыигралСделку = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект)

	УстановитьПривилегированныйРежим(Истина);
	
	// Установим предмет взаимодействия
	Если ЗначениеЗаполнено(ВзаимодействиеОснование) Тогда
		Взаимодействия.ПриЗаписиПредметаИзФормы(
			ТекущийОбъект.Ссылка, ВзаимодействиеОснование, Отказ
		);
	КонецЕсли;

	//обработать управление процессом
	Если ЗначениеЗаполнено(Объект.ВидСделки)
		И ПроцессыИспользуются
		И ТипСделки <> Перечисления.ТипыСделокСКлиентами.ПрочиеНепроцессныеСделки Тогда
		
		Если ВидСделкиИзменен Тогда
			УстановитьУправлениеПроцессами();
		КонецЕсли;

		Элементы.ВидСделки.ТолькоПросмотр = Истина;
		Если ТипСделки = Перечисления.ТипыСделокСКлиентами.СделкиСРучнымПереходомПоЭтапам
			Или ТекущийОбъект.ПереведенаНаУправлениеВРучную Тогда

			Если ВидСделкиИзменен Тогда
				УстановитьУправлениеПроцессами();
			КонецЕсли;
			
			//зафиксировать переход на выбранный этап
			Если ЭтапПроцессаПродажи <> СделкиСервер.ПолучитьТекущийЭтап(ТекущийОбъект.Ссылка) Тогда
				СделкиСервер.УстановитьЭтапПроцесса(ТекущийОбъект.Ссылка, ЭтапПроцессаПродажи);
			КонецЕсли;
		ИначеЕсли (ТекущийОбъект.Статус = Перечисления.СтатусыСделок.Проиграна) И Не СделкаПроиграна Тогда
			СделкиСервер.ПерезапуститьПроцессПродажи(ТекущийОбъект.Ссылка, ТипСделки);
			СделкаПроиграна = Истина;
		ИначеЕсли НЕ Объект.Закрыта Тогда
			СделкиСервер.ЗапуститьПроцесс(ТекущийОбъект.Ссылка);
		КонецЕсли;
	КонецЕсли;

	//зафиксировать первичный интерес
	Интерес = ПервичныйИнтерес(ТекущийОбъект.Ссылка);
	Если КаналПервичногоИнтереса <> Интерес.КаналПервичногоИнтереса
		ИЛИ ИсточникПервичногоИнтереса <> Интерес.ИсточникПервичногоИнтереса 
		ИЛИ ТекущийОбъект.Партнер <> Интерес.Партнер Тогда
		
		НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Сделка.Установить(ТекущийОбъект.Ссылка);
		
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса)
		   ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
			Запись = НаборЗаписей.Добавить();
			Запись.Партнер                    = ТекущийОбъект.Партнер;
			Запись.Сделка                     = ТекущийОбъект.Ссылка;
			Запись.ИсточникПервичногоИнтереса = ИсточникПервичногоИнтереса;
			Запись.КаналПервичногоИнтереса    = КаналПервичногоИнтереса;
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	УстановитьПривилегированныйРежим(Истина);
	
	//обработать управление процессом
	Если ЗначениеЗаполнено(Объект.ВидСделки) И ПроцессыИспользуются Тогда

		//обновить текущий этап
		Если ТипСделки <> Перечисления.ТипыСделокСКлиентами.ПрочиеНепроцессныеСделки Тогда
			ЭтапПроцессаПродажи = СделкиСервер.ПолучитьТекущийЭтап(Объект.Ссылка);
		КонецЕсли;

		УстановитьУправлениеПроцессами();
	КонецЕсли;
	
	ОпределитьДоступностьВидаСделки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если НеобходимоОповещение Тогда
		
		ПараметрыЗаписи.Вставить("Партнер",Объект.Партнер);
		ПараметрыЗаписи.Вставить("СоглашениеСКлиентом",Объект.СоглашениеСКлиентом);
		ВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтаФорма,Объект,ПараметрыЗаписи,"СделкиСКлиентами");
		
	КонецЕсли;
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеДоступностью();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СоглашениеСКлиентомНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(
		Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.СоглашениеСКлиентом
	);

КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)

	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСделок.ВРаботе") Тогда
		Элементы.ПредыдущийЭтап.Доступность = Истина;
		Элементы.СледующийЭтап.Доступность  = Истина;
		Элементы.ПричинаПроигрышаСделки.ТолькоПросмотр = Истина;
		Объект.ПричинаПроигрышаСделки       = ПричинаПроигрышаНеОпределена;
	Иначе
		Элементы.ПредыдущийЭтап.Доступность = Ложь;
		Элементы.СледующийЭтап.Доступность  = Ложь;
		Если НЕ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСделок.Проиграна") Тогда
			Объект.ПричинаПроигрышаСделки = ПричинаПроигрышаНеОпределена;
		КонецЕсли;
	КонецЕсли;
	
	ОтключитьОтметкуНезаполненного();
	УправлениеДоступностью();

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытаПриИзменении(Элемент)
	
	Если Объект.Закрыта Тогда
		Объект.ДатаОкончания = ТекущаяДата();
	Иначе
		Объект.ДатаОкончания = '00010101';
	КонецЕсли;
	
	УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)

	ИсточникПервичногоИнтереса = Неопределено;
	Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Не ЗначениеЗаполнено(КаналПервичногоИнтереса);

КонецПроцедуры

&НаКлиенте
Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура КлиентПриИзменении(Элемент)
	
	Если Объект.Партнер.Пустая() Тогда
		Объект.СоглашениеСКлиентом = ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка");
	Иначе
		
		СтруктураСоглашениеСКлиентом = ПолучитьУсловияПродажПоУмолчанию(Объект.Партнер);
		
		Если СтруктураСоглашениеСКлиентом = Неопределено Тогда
			Объект.СоглашениеСКлиентом = ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка");
		Иначе
			Объект.СоглашениеСКлиентом = СтруктураСоглашениеСКлиентом.Соглашение;
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменилисьПараметрыОкруженияСделки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидСделкиПриИзменении(Элемент)
	
	ПриИзмененииТипаСделкиСервер();
	УправлениеДоступностью();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииТипаСделкиСервер()

	ОпределитьТипСделки();
	ИспользованиеПервичногСпроса();
	
	Если ЗначениеЗаполнено(Объект.ВидСделки) Тогда
		Объект.ОбособленныйУчетТоваровПоСделке = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидСделки, "ОбособленныйУчетТоваровПоСделке");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОпределитьТипСделки()
	
	Если ЗначениеЗаполнено(Объект.ВидСделки) Тогда
		ТипСделки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидСделки,"ТипСделки");
	Иначе
		ТипСделки = Перечисления.ТипыСделокСКлиентами.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаПроигрышаСделкиПриИзменении(Элемент)
	УправлениеДоступностью();
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	ОтключитьОтметкуНезаполненного();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ПЕРВИЧНЫЙ СПРОС

&НаКлиенте
Процедура ПроцентУдовлетворенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПервичныйСпрос.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПроцентУдовлетворения = ТекущиеДанные.ПроцентУдовлетворения;
	
	Если ПроцентУдовлетворения = 100 Тогда
		
		ТекущиеДанные.ПричинаНеудовлетворения = ПредопределенноеЗначение("Справочник.ПричиныНеудовлетворенияПервичногоСпроса.ПустаяСсылка");
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПричинаНеудовлетворенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПервичныйСпрос.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПроцентУдовлетворения >= 100 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПервичныйСпрос.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентУдовлетворенияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПервичныйСпрос.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.СписокВыбора.Очистить();
	Для инд = 0 По 9 Цикл
		Элемент.СписокВыбора.Добавить(инд*10,Строка(инд*10) + "% (" + Строка(Окр(ТекущиеДанные.Сумма/10 * инд,2)) + ")");
	КонецЦикла;
	Элемент.СписокВыбора.Добавить(100,Строка(100) + "% (" + Строка(ТекущиеДанные.Сумма) + ")");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ПАРТНЕРЫ И КОНТАКТНЫЕ ЛИЦА

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПартнерыИКонтактныеЛица.ТекущиеДанные;
	ТекущиеДанные.Партнер = ПартнерКонтаткногоЛица(ТекущиеДанные.КонтактноеЛицо);
	Если ТекущиеДанные.Партнер = Объект.Партнер Тогда
		ТекущиеДанные.РольПартнера = РольКлиент;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПартнерыИКонтактныеЛица.ТекущиеДанные;
	Если ТекущиеДанные.Партнер = Объект.Партнер Тогда
		ТекущиеДанные.РольПартнера = РольКлиент;
	Иначе
		ТекущиеДанные.РольПартнера = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПартнерыИКонтактныеЛицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВыигралСделку = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПартнерыИКонтактныеЛицаПриИзменении(Элемент)
	
	ИзменилисьПараметрыОкруженияСделки = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыигралСделкуПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПартнерыИКонтактныеЛица.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ВыигралСделку Тогда
			
			ТекущийИндекс = Объект.ПартнерыИКонтактныеЛица.Индекс(ТекущиеДанные);
			Для Каждого СтрокаУчастники Из Объект.ПартнерыИКонтактныеЛица Цикл
				Если Объект.ПартнерыИКонтактныеЛица.Индекс(СтрокаУчастники) <> ТекущийИндекс Тогда
					СтрокаУчастники.ВыигралСделку = Ложь;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РольПартнераПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПартнерыИКонтактныеЛица.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И
		ТекущиеДанные.РольПартнера <> ПредопределенноеЗначение("Справочник.РолиПартнеровВСделкахИПроектах.Конкурент") И
		ТекущиеДанные.ВыигралСделку Тогда
		
		 ТекущиеДанные.ВыигралСделку = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СледующийЭтап(Команда)

	ПерейтиНаЭтапПроцесса(1);

КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийЭтап(Команда)

	ПерейтиНаЭтапПроцесса(-1);

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоДокументам(Команда)

	Если ЗначениеЗаполнено(ВалютаУпрУчета) Тогда

		Если Не ЗначениеЗаполнено(Объект.Ссылка) И ОтменаЗаписиОбъекта() Тогда
			Возврат;
		КонецЕсли;

		Потенциал = ОткрытьФормуМодально(
			"Справочник.СделкиСКлиентами.Форма.РасчетПотенциала",
			Новый Структура("Ключ", Объект.Ссылка)
		);

		Если ЗначениеЗаполнено(Потенциал) Тогда
			Объект.ПотенциальнаяСуммаПродажи = Потенциал;
		КонецЕсли;
	Иначе
		Сообщить(НСтр("ru='Не выбрана валюта управленческого учета. Расчет невозможен.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКартуМаршрутаВыполнить()

	Процесс = ПроцессПродажи(ТипСделки, Объект.Ссылка);
	ОткрытьФорму("Обработка.КартаМаршрутаБизнесПроцесса.Форма",
		Новый Структура("БизнесПроцесс", Процесс),
	);

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаРучноеУправление(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Ответ = Вопрос(
		НСтр("ru='Перед выполнением необходимо записать сделку.
			|Записать и продолжить?'"
		),
		РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	Ответ = Вопрос(
		НСтр("ru='Все текущие задачи по процессу продажи будут отменены, бизнес-процесс будет завершен.
			|Продолжить?'"
		),
		РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ЗавершитьПроцессПродажи();

КонецПроцедуры

&НаКлиенте
Процедура ПросмотрПланаПроцесса(Команда)

	Если (Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка)) И ОтменаЗаписиОбъекта() Тогда
		Возврат;
	КонецЕсли;

	ОткрытьФормуМодально(
		"Справочник.СделкиСКлиентами.Форма.ЗадачиСделкиСРучнымПереходомПоЭтапам",
		Новый Структура("Ключ", Объект.Ссылка)
	);

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВероятность(Команда)

	Если Не ЗначениеЗаполнено(Объект.Ссылка) И ОтменаЗаписиОбъекта() Тогда
		Возврат;
	КонецЕсли;

	РасчетнаяВероятность = ОткрытьФормуМодально(
		"Справочник.СделкиСКлиентами.Форма.РасчетнаяВероятность",
		Новый Структура("Ключ",Объект.Ссылка),
		ЭтаФорма
	);

	Если ЗначениеЗаполнено(РасчетнаяВероятность) Тогда
		Объект.ВероятностьУспешногоЗавершения = РасчетнаяВероятность;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗафиксироватьПрогрыш(Команда)

	ТекстВопроса = НСтр("ru='При записи сделки будет зафиксирован проигрыш на текущем этапе.'");
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);

	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСделок.Проиграна") ;
		Модифицированность = Истина;
		Элементы.ПричинаПроигрышаСделки.ТолькоПросмотр = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПроцентУдовлетворения(Команда)
	
	ВыбранноеЧисло = 100;
	Если ВвестиЧисло(ВыбранноеЧисло,"Введите число",3,0) Тогда
		Если ВыбранноеЧисло > 100 Тогда
			ВыбранноеЧисло = 100;
		ИначеЕсли ВыбранноеЧисло < 0 Тогда
			ВыбранноеЧисло = 0;
		КонецЕсли;
		Для каждого ВыделеннаяСтрока Из Элементы.ПервичныйСпрос.ВыделенныеСтроки Цикл
			ДанныеДляИзменения = Объект.ПервичныйСпрос.НайтиПоИдентификатору(ВыделеннаяСтрока);
			ДанныеДляИзменения.ПроцентУдовлетворения = ВыбранноеЧисло; 
			Если ЗначениеЗаполнено(ДанныеДляИзменения.ПричинаНеудовлетворения) Тогда
				Если ВыбранноеЧисло = 100 Тогда
					ДанныеДляИзменения.ПричинаНеудовлетворения = ПредопределенноеЗначение("Справочник.ПричиныНеудовлетворенияПервичногоСпроса.ПустаяСсылка");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПричинуНеудовлетворения(Команда)
	
	ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.ПричиныНеудовлетворенияПервичногоСпроса.Форма.ФормаВыбора",,ЭтаФорма);
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Для каждого ВыделеннаяСтрока Из Элементы.ПервичныйСпрос.ВыделенныеСтроки Цикл
			
			ТекущиеДанные = Объект.ПервичныйСпрос.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Если ТекущиеДанные.ПроцентУдовлетворения < 100  Тогда
				
				ТекущиеДанные.ПричинаНеудовлетворения = ВыбранноеЗначение;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПозвонитьВыполнить(Команда)

	СоздатьВзаимодействие("Документ.ТелефонныйЗвонок.ФормаОбъекта");

КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьВзаимодействиеВыполнить(Команда)

	СоздатьВзаимодействие("Документ.ЗапланированноеВзаимодействие.ФормаОбъекта");

КонецПроцедуры

&НаКлиенте
Процедура ЗапланироватьВстречуВыполнить(Команда)

	СоздатьВзаимодействие("Документ.Встреча.ФормаОбъекта");

КонецПроцедуры

&НаКлиенте
Процедура НаписатьПисьмоВыполнить(Команда)

	СоздатьВзаимодействие("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта");

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ИспользованиеПервичногСпроса()
	
	ИспользоватьПервичныйСпрос = ((НЕ Объект.ВидСделки.Пустая()) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидСделки,"ИспользоватьСпрос")) ИЛИ
								(НЕ ПроцессыИспользуются И ПолучитьФункциональнуюОпцию("ИспользоватьПервичныйСпрос"));
	
КонецФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()

	//определить канал и источник первичного интереса
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
			Интерес = ПервичныйИнтерес(Объект.Ссылка);
			КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
			ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Не ЗначениеЗаполнено(КаналПервичногоИнтереса);
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;

	//определение периода работы
	Сроки = НСтр("ru='Начало: '") + Формат(Объект.ДатаНачала,"ДЛФ=D");
	Если ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Сроки = Сроки + НСтр("ru='  Окончание: '") + Формат(Объект.ДатаОкончания,"ДЛФ=D");
	КонецЕсли;

	Элементы.ПричинаПроигрышаСделки.ТолькоПросмотр = Не СделкаПроиграна;

	//установить по умолчанию валюту первичного спроса = валюте управленческого учета
	Объект.ВалютаПервичногоСпроса =?(
		ЗначениеЗаполнено(Объект.ВалютаПервичногоСпроса),
		Объект.ВалютаПервичногоСпроса, ВалютаУпрУчета
	);
	
	ОпределитьТипСделки();
	
	//настроить управление процессом
	Если  ПроцессыИспользуются И (НЕ Объект.Ссылка.Пустая()) Тогда
		
		Если ЗначениеЗаполнено(Объект.ВидСделки) Тогда

			Если ТипСделки <> Перечисления.ТипыСделокСКлиентами.ПрочиеНепроцессныеСделки Тогда
				ЭтапПроцессаПродажи = СделкиСервер.ПолучитьТекущийЭтап(Объект.Ссылка);
				Элементы.ВидСделки.ТолькоПросмотр = Истина;
			КонецЕсли;

			Если ТипСделки = Перечисления.ТипыСделокСКлиентами.СделкиСРучнымПереходомПоЭтапам
				 ИЛИ Объект.ПереведенаНаУправлениеВРучную Тогда
				ЭтапыПроцесса = Новый ФиксированныйМассив(ЭтапыПроцесса(Объект.ВидСделки));
			КонецЕсли;

			УстановитьУправлениеПроцессами();
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменилисьПараметрыОкруженияСделки = Ложь;
	ОпределитьДоступностьВидаСделки();
	ИспользованиеПервичногСпроса();

КонецПроцедуры 

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДоступностьВидаСделки()
	
	Элементы.ВидСделки.Доступность 	= Объект.Ссылка.Пустая() ИЛИ (ТипСделки.Пустая() ИЛИ ТипСделки = Перечисления.ТипыСделокСКлиентами.ПрочиеНепроцессныеСделки);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностью()
	
	Элементы.Закрыта.Доступность                   = ДоступноРучноеЗакрытие() И 
	                                               (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСделок.Выиграна") ИЛИ
	                                               (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСделок.Проиграна") И НЕ Объект.ПричинаПроигрышаСделки.Пустая()));
	Элементы.Статус.ТолькоПросмотр                 = Объект.Закрыта;
	Элементы.ГруппаПервичныйСпрос.Доступность      = ИспользоватьПервичныйСпрос;
	Элементы.ПричинаПроигрышаСделки.ТолькоПросмотр = (Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыСделок.Проиграна")) ИЛИ Объект.Закрыта;
	
КонецПроцедуры

&НаКлиенте
Функция ДоступноРучноеЗакрытие()

	Возврат НЕ ПроцессыИспользуются 
			ИЛИ ТипСделки = ПредопределенноеЗначение("Перечисление.ТипыСделокСКлиентами.ПрочиеНепроцессныеСделки")
			ИЛИ ТипСделки = ПредопределенноеЗначение("Перечисление.ТипыСделокСКлиентами.СделкиСРучнымПереходомПоЭтапам")
			ИЛИ Объект.ПереведенаНаУправлениеВРучную;

КонецФункции

&НаСервереБезКонтекста
Функция ЭтапыПроцесса(ВидСделки)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВидыСделокСКлиентамиЭтапыСделкиПоПродаже.ЭтапПроцессаПродажи
	|ИЗ
	|	Справочник.ВидыСделокСКлиентами.ЭтапыСделкиПоПродаже КАК ВидыСделокСКлиентамиЭтапыСделкиПоПродаже
	|ГДЕ
	|	ВидыСделокСКлиентамиЭтапыСделкиПоПродаже.Ссылка = &ВидСделки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыСделокСКлиентамиЭтапыСделкиПоПродаже.НомерСтроки");
	Запрос.УстановитьПараметр("ВидСделки", ВидСделки);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПервичныйИнтерес(Сделка)
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ 
		|	ИсточникиПервичногоИнтереса.КаналПервичногоИнтереса,
		|	ИсточникиПервичногоИнтереса.ИсточникПервичногоИнтереса,
		|	ИсточникиПервичногоИнтереса.Партнер
		|ИЗ
		|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
		|ГДЕ
		|	ИсточникиПервичногоИнтереса.Сделка = &Сделка";
		
		Запрос.УстановитьПараметр("Сделка",Сделка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("КаналПервичногоИнтереса,ИсточникПервичногоИнтереса,Партнер",
	ПланыВидовХарактеристик.КаналыРекламныхВоздействий.ПустаяСсылка(),
	Неопределено,
	Справочники.Партнеры.ПустаяСсылка());
	
КонецФункции

&НаКлиенте
Процедура СоздатьВзаимодействие(ИмяФормы)

	Основание = Новый Структура();
	Основание.Вставить("Предмет", Объект.Ссылка);
	Основание.Вставить("Контакт",
	?(ЗначениеЗаполнено(Элементы.ПартнерыИКонтактныеЛица.ТекущиеДанные.КонтактноеЛицо),
	Элементы.ПартнерыИКонтактныеЛица.ТекущиеДанные.КонтактноеЛицо,
	Элементы.ПартнерыИКонтактныеЛица.ТекущиеДанные.Партнер));
	ОткрытьФормуМодально(ИмяФормы, Новый Структура("Основание", Основание));

КонецПроцедуры

&НаСервере
Процедура УстановитьУправлениеПроцессами()

	Если ТипСделки = Перечисления.ТипыСделокСКлиентами.ПрочиеНепроцессныеСделки Тогда
		Элементы.ЭтапПроцессаПродажи.Видимость		= Ложь;
		Элементы.ГруппаВариантыУправления.Видимость	= Ложь;
	Иначе

		Элементы.ЭтапПроцессаПродажи.Видимость		= Истина;
		Элементы.ГруппаВариантыУправления.Видимость	= Истина;

		Если ТипСделки = Перечисления.ТипыСделокСКлиентами.СделкиСРучнымПереходомПоЭтапам ИЛИ Объект.ПереведенаНаУправлениеВРучную Тогда

			Элементы.ГруппаВариантыУправления.ТекущаяСтраница = Элементы.СтраницаПереходВручную;

			//загрузить этапы процесса
			Если ВидСделкиИзменен Тогда
				ЭтапыПроцесса = Новый ФиксированныйМассив(ЭтапыПроцесса(Объект.ВидСделки));
				ВидСделкиИзменен = Ложь;
			КонецЕсли;

			//определить индекс текущего этапа
			Если ЭтапыПроцесса <> Неопределено Тогда
				Если ЭтапыПроцесса.Количество() = 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("Вид сделки настроен некорректно.")
				);
				Иначе
					Если ЗначениеЗаполнено(ЭтапПроцессаПродажи) Тогда
						ИндексТекущегоЭтапа = ЭтапыПроцесса.Найти(ЭтапПроцессаПродажи);
					Иначе
						ИндексТекущегоЭтапа = 0;
						ЭтапПроцессаПродажи = ЭтапыПроцесса[0];
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			//установить управление этапами
			Если ЭтапыПроцесса = Неопределено Тогда
				Элементы.СледующийЭтап.Доступность	= Ложь;
				Элементы.ПредыдущийЭтап.Доступность	= Ложь;
			ИначеЕсли Объект.Статус = Перечисления.СтатусыСделок.ВРаботе Тогда
				ИндексТекущегоЭтапа = ЭтапыПроцесса.Найти(ЭтапПроцессаПродажи);
				Если ИндексТекущегоЭтапа = Неопределено Тогда
					ИндексТекущегоЭтапа = 0;
					ЭтапПроцессаПродажи = ЭтапыПроцесса[0];
				КонецЕсли;
				Элементы.СледующийЭтап.Доступность  = ИндексТекущегоЭтапа < ЭтапыПроцесса.Количество() - 1;
				Элементы.ПредыдущийЭтап.Доступность = ИндексТекущегоЭтапа > 0;
			КонецЕсли; //установить управление этапами
		Иначе
			Элементы.ГруппаВариантыУправления.ТекущаяСтраница	= Элементы.СтраницаБизнесПроцесс;
			Элементы.Статус.ТолькоПросмотр						= Истина;
			Элементы.ПерейтиНаРучноеУправление.Доступность		= Не Объект.Закрыта;
			Элементы.ЗафиксироватьПрогрыш.Доступность =
				Не Объект.Закрыта И (Объект.Статус = Перечисления.СтатусыСделок.ВРаботе);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗавершитьПроцессПродажи()
	
	УстановитьПривилегированныйРежим(Истина);
	СделкиСервер.ЗавершитьПроцессПродажи(Объект.Ссылка, ТипСделки);
	Объект.ПереведенаНаУправлениеВРучную = Истина;
	ЭтапыПроцесса = Новый ФиксированныйМассив(ЭтапыПроцесса(Объект.ВидСделки));
	Записать();
	УстановитьУправлениеПроцессами();
	
КонецПроцедуры

&НаКлиенте
Функция ОтменаЗаписиОбъекта()
	
	ТекстВопроса = НСтр(
						"ru='Данные еще не записаны.
						|Выполнение действия возможно только после записи.
						|Данные будут записаны.'"
	);
	
	Ответ =  Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.Отмена);
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
	КонецЕсли;
	
	Возврат Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка);
	
КонецФункции

&НаКлиенте
Процедура УстановитьУправлениеЭтапами()
	
	Если ЭтапыПроцесса = Неопределено Тогда
		Элементы.СледующийЭтап.Доступность  = Ложь;
		Элементы.ПредыдущийЭтап.Доступность = Ложь;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСделок.ВРаботе") Тогда
		ИндексТекущегоЭтапа = ЭтапыПроцесса.Найти(ЭтапПроцессаПродажи);
		Если ИндексТекущегоЭтапа = Неопределено Тогда
			ИндексТекущегоЭтапа = 0;
			ЭтапПроцессаПродажи = ЭтапыПроцесса[0];
		КонецЕсли;
		Элементы.СледующийЭтап.Доступность  = ИндексТекущегоЭтапа < ЭтапыПроцесса.Количество() - 1;
		Элементы.ПредыдущийЭтап.Доступность = ИндексТекущегоЭтапа > 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроцессПродажи(ТипСделки, Сделка)

	ИмяПроцесса = СделкиСервер.ПолучитьОписаниеТипаСделки(ТипСделки).Имя;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПроцессПродажи.Ссылка КАК Процесс
		|ИЗ
		|	БизнесПроцесс." + ИмяПроцесса + " КАК ПроцессПродажи
		|ГДЕ
		|	ПроцессПродажи.Стартован
		|	И (НЕ ПроцессПродажи.Завершен)
		|	И ПроцессПродажи.Предмет = &Сделка"
	);
	Запрос.УстановитьПараметр("Сделка", Сделка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Процесс;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ПартнерКонтаткногоЛица(КонтактноеЛицо)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицо,"Владелец");

КонецФункции

&НаСервереБезКонтекста
Функция ТекущийЭтап(Ссылка)

	Возврат СделкиСервер.ПолучитьТекущийЭтап(Ссылка);

КонецФункции

&НаКлиенте
Процедура ПерейтиНаЭтапПроцесса(Направление)
	
	ИндексТекущегоЭтапа = ЭтапыПроцесса.Найти(ЭтапПроцессаПродажи) + Направление;
	ЭтапПроцессаПродажи = ЭтапыПроцесса[ИндексТекущегоЭтапа];
	УстановитьУправлениеЭтапами();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьУсловияПродажПоУмолчанию(Партнер)
	
	Возврат ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(Партнер);
	
КонецФункции