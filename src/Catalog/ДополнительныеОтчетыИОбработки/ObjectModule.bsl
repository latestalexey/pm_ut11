#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Если отчет публикуется, то необходим контроль уникальности имени объекта, 
	//     под которым дополнительный отчет регистрируется в системе
	Если Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется Тогда
		
		// Проверка имени
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДопОтчеты
		|ГДЕ
		|	ДопОтчеты.ИмяОбъекта = &ИмяОбъекта
		|	И &УсловиеДопОтчет
		|	И ДопОтчеты.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
		|	И ДопОтчеты.ПометкаУдаления = ЛОЖЬ
		|	И ДопОтчеты.Ссылка <> &Ссылка";
		
		ВидыДопОтчетов = Новый Массив;
		ВидыДопОтчетов.Добавить(Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет);
		ВидыДопОтчетов.Добавить(Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет);
		
		Если ВидыДопОтчетов.Найти(Вид) <> Неопределено Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДопОтчет", "ДопОтчеты.Вид В (&ВидыДопОтчетов)");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДопОтчет", "НЕ ДопОтчеты.Вид В (&ВидыДопОтчетов)");
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИмяОбъекта",     ИмяОбъекта);
		Запрос.УстановитьПараметр("ВидыДопОтчетов", ВидыДопОтчетов);
		Запрос.УстановитьПараметр("Ссылка",         Ссылка);
		Запрос.Текст = ТекстЗапроса;
		
		УстановитьПривилегированныйРежим(Истина);
		Конфликтующие = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Конфликтующие.Количество() > 0 Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Имя ""%1"", используемое данным отчетом (обработкой), уже занято другим опубликованным дополнительным отчетом (обработкой). 
					|
					|Для продолжения необходимо изменить вид Публикации с ""%2"" на ""%3"" или ""%4"".'"),
					ИмяОбъекта,
					Строка(Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется),
					Строка(Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки),
					Строка(Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена)
				),
				,
				"Объект.Публикация"
			);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	// Вызывается непосредственно до записи объекта в базу данных
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	// Предварительные проверки
	Если НЕ ЭтоНовый() И Вид <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Вид") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Невозможно сменить вид существующего дополнительного отчета или обработки.'"),,,,
			Отказ
		);
		Возврат;
	КонецЕсли;
	
	// Связь реквизитов с пометкой удаления
	Если ПометкаУдаления Тогда
		Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена;
	КонецЕсли;
	
	// Кэш стандартных проверок
	ДополнительныеСвойства.Вставить("РазделениеВключено", РазделениеВключено());
	ДополнительныеСвойства.Вставить("УстанавливатьПривилегированныйРежим", УстанавливатьПривилегированныйРежим());
	ДополнительныеСвойства.Вставить("ЭтоГлобальнаяОбработка", ДополнительныеОтчетыИОбработки.ПроверитьГлобальнаяОбработка(Вид));
	ДополнительныеСвойства.Вставить("ПубликацияИспользуется", Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется);
	
	Если ДополнительныеСвойства.ЭтоГлобальнаяОбработка Тогда
		Если ДополнительныеОтчетыИОбработки.ПравоДобавления() Тогда
			ПередЗаписьюГлобальнойОбработки(Отказ);
		КонецЕсли;
	Иначе
		ПередЗаписьюНазначаемойОбработки(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	// Вызывается непосредственно после записи объекта в базу данных
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКоманд = Неопределено;
	Если ДополнительныеСвойства.Свойство("КомандыОбработки", ТаблицаКоманд) Тогда
		ДополнительныеОтчетыИОбработки.ЗаписатьНастройкиБыстрогоДоступа(Ссылка, ТаблицаКоманд);
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЗаданияДляПостановкиВОчередь", Новый Массив);
	
	Если ДополнительныеОтчетыИОбработки.ПроверитьГлобальнаяОбработка(Вид) Тогда
		Если ДополнительныеОтчетыИОбработки.ПравоДобавления() Тогда
			ПриЗаписиГлобальнойОбработки(Отказ, ДополнительныеСвойства.ЗаданияДляПостановкиВОчередь);
		КонецЕсли;
	КонецЕсли;
	
	СтандартныеПодсистемыПереопределяемый.ДополнительныеОтчетыИОбработкиПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	// Вызывается непосредственно перед удалением объекта из базы данных
	Если ОбменДанными.Загрузка ИЛИ ЭтоГруппа ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеОтчетыИОбработки.ПроверитьГлобальнаяОбработка(Вид) Тогда
		ПередУдалениемГлобальнойОбработки(Отказ);
	Иначе
		ПередУдалениемНазначаемойОбработки(Отказ);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Глобальные обработки

Процедура ПередЗаписьюГлобальнойОбработки(Отказ)
	Если Отказ ИЛИ НЕ ДополнительныеСвойства.Свойство("КомандыОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКоманд = ДополнительныеСвойства.КомандыОбработки;
	
	ЗаданияДляОбновления = Новый Соответствие;
	
	ПубликацияВключена = (Публикация <> Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена);
	
	// Регламентные задание необходимо изменять в неразделенном режиме.
	Если ДополнительныеСвойства.УстанавливатьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РазделениеВключено Тогда
		ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	КонецЕсли;
	
	// Актуализация набора регламентных заданий для записи их идентификаторов в табличную часть.
	Для Каждого СтрокаТаблицы Из ТаблицаКоманд Цикл
		
		Если ПубликацияВключена И СтрокаТаблицы.Расписание.Количество() > 0 Тогда
			Расписание = СтрокаТаблицы.Расписание[0].Значение;
			Использование = СтрокаТаблицы.Использование И РасписаниеЗадано(Расписание);
		Иначе
			Расписание = Неопределено;
			Использование = Ложь;
		КонецЕсли;
		
		Команда = Команды.НайтиСтроки(Новый Структура("Идентификатор", СтрокаТаблицы.Идентификатор))[0];
		
		Команда.РегламентноеЗаданиеПредставление = Строка(Расписание);
		
		Задание = ДополнительныеОтчетыИОбработки.НайтиРегламентноеЗадание(Команда.РегламентноеЗаданиеGUID);
		
		Если Задание = Неопределено Тогда // Не найдено
			
			Если Использование Тогда
				// Создать и зарегистрировать
				Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание("ЗапускДополнительныхОбработок");
				Задание.Использование = Ложь;
				Задание.Наименование  = ПредставлениеЗадания(Команда);
				Задание.Записать();
				
				Команда.РегламентноеЗаданиеGUID = Задание.УникальныйИдентификатор;
				
				ЗаданияДляОбновления.Вставить(Команда, Расписание);
			Иначе
				// Действие не требуется
			КонецЕсли;
			
		Иначе // Найдено
			
			Если Использование Тогда
				// Зарегистрировать
				ЗаданияДляОбновления.Вставить(Команда, Расписание);
			Иначе
				// Удалить
				Задание.Удалить();
				Команда.РегламентноеЗаданиеGUID = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("ЗаданияДляОбновления", ЗаданияДляОбновления);
	
	Если ДополнительныеСвойства.РазделениеВключено Тогда
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина);
	КонецЕсли;
	
	Если ДополнительныеСвойства.УстанавливатьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиГлобальнойОбработки(Отказ, ЗаданияДляПостановкиВОчередь)
	Если Отказ ИЛИ НЕ ДополнительныеСвойства.Свойство("КомандыОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	// Регламентные задание необходимо изменять в неразделенном режиме.
	Если ДополнительныеСвойства.УстанавливатьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РазделениеВключено Тогда
		ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ДополнительныеСвойства.ЗаданияДляОбновления Цикл
		Команда = КлючИЗначение.Ключ;
		Расписание = КлючИЗначение.Значение;
		
		Задание = ДополнительныеОтчетыИОбработки.НайтиРегламентноеЗадание(Команда.РегламентноеЗаданиеGUID);
		
		// При включенном разделении использование задания определяется очередью
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			ЗаданияДляПостановкиВОчередь.Добавить(Задание);
		Иначе
			Задание.Использование = Истина;
		КонецЕсли;
		
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(Ссылка);
		ПараметрыЗадания.Добавить(Команда.Идентификатор);
		
		Задание.Наименование = Лев(ПредставлениеЗадания(Команда), 120);
		Задание.Параметры    = ПараметрыЗадания;
		Задание.Расписание   = Расписание;
		
		Задание.Записать();
	КонецЦикла;
	
	Если ДополнительныеСвойства.РазделениеВключено Тогда
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина);
	КонецЕсли;
	
	Если ДополнительныеСвойства.УстанавливатьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалениемГлобальнойОбработки(Отказ)
	// Регламентные задание необходимо изменять в неразделенном режиме.
	РазделениеВключено = РазделениеВключено();
	УстанавливатьПривилегированныйРежим = РазделениеВключено ИЛИ УстанавливатьПривилегированныйРежим();
	
	Если УстанавливатьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если РазделениеВключено Тогда
		ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	КонецЕсли;
	
	Для Каждого Команда Из Команды Цикл
		Задание = ДополнительныеОтчетыИОбработки.НайтиРегламентноеЗадание(Команда.РегламентноеЗаданиеGUID);
		Если Задание <> Неопределено Тогда
			Задание.Удалить();
		КонецЕсли;
	КонецЦикла;
	
	Если РазделениеВключено Тогда
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина);
	КонецЕсли;
	
	Если УстанавливатьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с регламентными заданиями

Функция ПредставлениеЗадания(Команда)
	// '%1: %2 / Команда: %3'
	Возврат (
		СокрЛП(Вид)
		+ ": "
		+ СокрЛП(Наименование)
		+ " / "
		+ НСтр("ru = 'Команда'")
		+ ": "
		+ СокрЛП(Команда.Представление)
	);
КонецФункции

Функция РасписаниеЗадано(Расписание)
	
	Возврат Строка(Расписание) <> Строка(Новый РасписаниеРегламентногоЗадания);
	
КонецФункции

Функция РазделениеВключено()
	
	Возврат ОбщегоНазначенияПовтИсп.РазделениеВключено() И ОбщегоНазначения.ИспользованиеРазделителяСеанса() = Истина;
	
КонецФункции

Функция УстанавливатьПривилегированныйРежим()
	
	Возврат ДополнительныеСвойства.РазделениеВключено ИЛИ (
		РольДоступна(Метаданные.Роли.ДобавлениеИзменениеДополнительныхОтчетовИОбработок)
		И НЕ ПравоДоступа("Администрирование", Метаданные)
	);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Назначаемые обработки

Процедура ПередЗаписьюНазначаемойОбработки(Отказ)
	
	ИмяРесурса = ПолучитьИмяРесурсаПоВидуОбработки(Вид);
	Если ЭтоНовый() Тогда
		ПредыдущееНазначение = Новый ТаблицаЗначений;
		ПредыдущееНазначение.Колонки.Добавить("ПолноеИмяОбъектаМетаданных", Новый ОписаниеТипов("Строка"));
		ОбъектВИБ = Новый Структура("ИспользоватьДляФормыОбъекта,ИспользоватьДляФормыСписка", Ложь, Ложь);
	Иначе
		ОбъектВИБ = Ссылка.ПолучитьОбъект();
		ПредыдущееНазначение = ОбъектВИБ.Назначение;
	КонецЕсли;
	
	Таблица = СверткаПоПолю(ПредыдущееНазначение, Назначение, "ПолноеИмяОбъектаМетаданных", "Строка");
	Удаленные = Таблица.НайтиСтроки(Новый Структура("Признак", -1));
	Добавленные = Таблица.НайтиСтроки(Новый Структура("Признак", 1));
	Оставшиеся = Таблица.НайтиСтроки(Новый Структура("Признак", 0));
	
	Если ПредыдущееНазначение.Количество() > 0 Тогда
		
		МассивУдаляемых = Новый Массив;
		
		Для Каждого УдаленныйЭлемент Из Удаленные Цикл
			МассивУдаляемых.Добавить(УдаленныйЭлемент.ПолноеИмяОбъектаМетаданных);
		КонецЦикла;
		
		Если ОбъектВИБ.ИспользоватьДляФормыОбъекта Тогда
			СвернутьРегистрДоступностиОтчетовИОбработок(МассивУдаляемых, Ссылка, Вид, ИмяРесурса, "ФормаОбъекта");
		КонецЕсли;
		
		Если ОбъектВИБ.ИспользоватьДляФормыСписка Тогда
			СвернутьРегистрДоступностиОтчетовИОбработок(МассивУдаляемых, Ссылка, Вид, ИмяРесурса, "ФормаСписка");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Оставшиеся.Количество() > 0 Тогда
		
		Если НЕ ОбъектВИБ.ИспользоватьДляФормыОбъекта И ИспользоватьДляФормыОбъекта Тогда // включаем
			Для Каждого СтрокаНазначение Из Оставшиеся Цикл
				ДополнительныеОтчетыИОбработки.УстановитьДоступностьКоманды(СтрокаНазначение.ПолноеИмяОбъектаМетаданных, "ФормаОбъекта", ИмяРесурса, Истина);
			КонецЦикла;
		ИначеЕсли ОбъектВИБ.ИспользоватьДляФормыОбъекта И НЕ ИспользоватьДляФормыОбъекта Тогда
			МассивОсвобождаемых = Новый Массив;
			Для Каждого ОсвобождаемыйЭлемент Из Оставшиеся Цикл
				МассивОсвобождаемых.Добавить(ОсвобождаемыйЭлемент.ПолноеИмяОбъектаМетаданных);
			КонецЦикла;
			СвернутьРегистрДоступностиОтчетовИОбработок(МассивОсвобождаемых, Ссылка, Вид, ИмяРесурса, "ФормаОбъекта");
		КонецЕсли;
		
		Если НЕ ОбъектВИБ.ИспользоватьДляФормыСписка И ИспользоватьДляФормыСписка Тогда // включаем
			Для Каждого СтрокаНазначение Из Оставшиеся Цикл
				ДополнительныеОтчетыИОбработки.УстановитьДоступностьКоманды(СтрокаНазначение.ПолноеИмяОбъектаМетаданных, "ФормаСписка", ИмяРесурса, Истина);
			КонецЦикла;
		ИначеЕсли ОбъектВИБ.ИспользоватьДляФормыСписка И НЕ ИспользоватьДляФормыСписка Тогда
			МассивОсвобождаемых = Новый Массив;
			Для Каждого ОсвобождаемыйЭлемент Из Оставшиеся Цикл
				МассивОсвобождаемых.Добавить(ОсвобождаемыйЭлемент.ПолноеИмяОбъектаМетаданных);
			КонецЦикла;
			СвернутьРегистрДоступностиОтчетовИОбработок(МассивОсвобождаемых, Ссылка, Вид, ИмяРесурса, "ФормаСписка");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Добавленные.Количество() > 0 Тогда
		
		Если ИспользоватьДляФормыОбъекта Тогда
			Для Каждого СтрокаНазначение Из Добавленные Цикл
				ДополнительныеОтчетыИОбработки.УстановитьДоступностьКоманды(СтрокаНазначение.ПолноеИмяОбъектаМетаданных, "ФормаОбъекта", ИмяРесурса, Истина);
			КонецЦикла;
		КонецЕсли;
		
		Если ИспользоватьДляФормыСписка Тогда
			Для Каждого СтрокаНазначение Из Добавленные Цикл
				ДополнительныеОтчетыИОбработки.УстановитьДоступностьКоманды(СтрокаНазначение.ПолноеИмяОбъектаМетаданных, "ФормаСписка", ИмяРесурса, Истина);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПередУдалениемНазначаемойОбработки(Отказ)
	
	ИмяРесурса = ПолучитьИмяРесурсаПоВидуОбработки(Вид);
	МассивУдаляемых = Новый Массив;
	Для Каждого ЭлементНазначение ИЗ Назначение Цикл
		МассивУдаляемых.Добавить(ЭлементНазначение.ПолноеИмяОбъектаМетаданных);
	КонецЦикла;
	
	Если ИспользоватьДляФормыОбъекта Тогда
		СвернутьРегистрДоступностиОтчетовИОбработок(МассивУдаляемых, Ссылка, Вид, ИмяРесурса, "ФормаОбъекта");
	КонецЕсли;
	
	Если ИспользоватьДляФормыСписка Тогда
		СвернутьРегистрДоступностиОтчетовИОбработок(МассивУдаляемых, Ссылка, Вид, ИмяРесурса, "ФормаСписка");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Другое

Функция СверткаПоПолю(Таблица1, Таблица2, ИмяПоля, ИмяТипаПоля)
	
	Таблица = ПолучитьТаблицуСравнения(ИмяПоля, ИмяТипаПоля);
	
	Для Каждого ЭлементПолноеИмя Из Таблица1.ВыгрузитьКолонку(ИмяПоля) Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока[ИмяПоля] = ЭлементПолноеИмя;
		НоваяСтрока.Признак = -1;
	КонецЦикла;
	
	Для Каждого ЭлементПолноеИмя Из Таблица2.ВыгрузитьКолонку(ИмяПоля) Цикл
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока[ИмяПоля] = ЭлементПолноеИмя;
		НоваяСтрока.Признак = +1;
	КонецЦикла;
	
	Таблица.Свернуть(ИмяПоля, "Признак");
	
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьТаблицуСравнения(ИмяКолонки, ИмяТипа)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	ТаблицаЗначений.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов(ИмяТипа));
	ТаблицаЗначений.Колонки.Добавить("Признак", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Процедура СвернутьРегистрДоступностиОтчетовИОбработок(МассивУдаляемых, Ссылка, Вид, ИмяРесурса, ТипФормы)
	
	Если МассивУдаляемых.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НазначениеВО.ПолноеИмяОбъектаМетаданных КАК ПолноеИмяОбъектаМетаданных
			|ИЗ
			|	Справочник.ДополнительныеОтчетыИОбработки.Назначение КАК НазначениеВО
			|	СОЕДИНЕНИЕ
			|		Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
			|			ПО НазначениеВО.Ссылка = ДополнительныеОтчетыИОбработки.Ссылка
			|ГДЕ
			|	НазначениеВО.ПолноеИмяОбъектаМетаданных В (&НаборИмен)
			|	И ДополнительныеОтчетыИОбработки.Ссылка <> &Ссылка
			|	И ДополнительныеОтчетыИОбработки.Вид = &Вид";
	
	Если ТипФормы = "ФормаОбъекта" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	И ДополнительныеОтчетыИОбработки.ИспользоватьДляФормыОбъекта";
	ИначеЕсли ТипФормы = "ФормаСписка" Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	И ДополнительныеОтчетыИОбработки.ИспользоватьДляФормыСписка";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("НаборИмен",	МассивУдаляемых);
	Запрос.Параметры.Вставить("Ссылка",		Ссылка);
	Запрос.Параметры.Вставить("Вид",		Вид);
	
	ИменаРазрешенных = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПолноеИмяОбъектаМетаданных");
	
	Для Каждого ПолноеИмяОбъектаМетаданных Из МассивУдаляемых Цикл
		Если ИменаРазрешенных.Найти(ПолноеИмяОбъектаМетаданных) = Неопределено Тогда
			ДополнительныеОтчетыИОбработки.УстановитьДоступностьКоманды(ПолноеИмяОбъектаМетаданных, ТипФормы, ИмяРесурса, Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИмяРесурсаПоВидуОбработки(Вид)
	
	ИмяРесурса = Неопределено;
	
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
		ИмяРесурса = "ИспользоватьЗаполнениеОбъекта";
	КонецЕсли;
	
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		ИмяРесурса = "ИспользоватьОтчеты";
	КонецЕсли;
	
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		ИмяРесурса = "ИспользоватьПечатныеФормы";
	КонецЕсли;
	
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		ИмяРесурса = "ИспользоватьСозданиеСвязанныхОбъектов";
	КонецЕсли;
	
	Возврат ИмяРесурса;
	
КонецФункции


#КонецЕсли