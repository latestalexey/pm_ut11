////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ПравоДобавления = ДополнительныеОтчетыИОбработки.ПравоДобавления();
	
	Если ЭтоНовый И НЕ ПравоДобавления Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ПравоДобавления Тогда
		Элементы.ЗагрузитьФайлОбработкиОтчета.Видимость = Ложь;
	КонецЕсли;
	
	ВидДополнительнаяОбработка = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
	ВидДополнительныйОтчет     = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
	ВидОтчет                   = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет;
	
	РегистрацияОбработки = Ложь;
	
	Если Объект.Ссылка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда
		ЭтоНовый = Истина;
	Иначе
		ЭтоНовый = Ложь;
		Если ДополнительныеОтчетыИОбработки.ПроверитьНазначаемаяОбработка(Объект.Вид) Тогда
			ПолноеНазначениеЗначение = ДополнительныеОтчетыИОбработки.ПолучитьПолноеНазначениеПоВидуДополнительнойВнешнейОбработки(Объект.Вид);
			ЗначениеВРеквизитФормы(ПолноеНазначениеЗначение, "ПолноеНазначение");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьКоманды();
	
	УстановитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоНовый Тогда
		
		Если НЕ ОткрытьДиалогЗагрузкиФайлаОбработкиОтчета(Истина) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборОбъектовМетаданных" Тогда
		
		Объект.Назначение.Очистить();
		
		Для Каждого ЭлементПараметр Из Параметр Цикл
			
			// поиск переданного назначения в полном возможном назначении
			НайденныеСтроки = ПолноеНазначение.НайтиСтроки(Новый Структура("ПолноеИмяОбъектаМетаданных", ЭлементПараметр.Значение));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				НовоеНазначение = Объект.Назначение.Добавить();
				НовоеНазначение.ПолноеИмяОбъектаМетаданных = ЭлементПараметр.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	АдресДанныхОбработки = ПоместитьВоВременноеХранилище(ТекущийОбъект.ХранилищеОбработки.Получить(), УникальныйИдентификатор);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если РегистрацияОбработки Тогда
		ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресДанныхОбработки);
		ТекущийОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(ДвоичныеДанныеОбработки , Новый СжатиеДанных(9));
		РегистрацияОбработки = Ложь;
	КонецЕсли;
	
	Если Объект.Вид = ВидДополнительнаяОбработка ИЛИ Объект.Вид = ВидДополнительныйОтчет Тогда
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("КомандыОбработки", РеквизитФормыВЗначение("КомандыОбработки"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ЭтоНовый = Ложь;
	УстановитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ДополнительныеОтчетыИОбработки.ПроверитьНазначаемаяОбработка(Объект.Вид) Тогда
		
		Если НЕ Объект.ИспользоватьДляФормыОбъекта И НЕ Объект.ИспользоватьДляФормыСписка Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Необходимо указать использование обработки, как минимум для одной формы'"),,,"Объект.ИспользоватьДляФормыОбъекта", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(
		Объект.Комментарий,
		Объект.Комментарий,
		Модифицированность
	);
КонецПроцедуры

&НаКлиенте
Процедура ВариантыДополнительногоОтчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВариантыДополнительногоОтчетаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ОткрытьВариант();
КонецПроцедуры

&НаКлиенте
Процедура ВариантыДополнительногоОтчетаПередУдалением(Элемент, Отказ)
	Вариант = Элементы.ВариантыДополнительногоОтчета.ТекущиеДанные;
	Если Вариант = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Вариант.Пользовательский Тогда
		Предупреждение(НСтр("ru = 'Пометка на удаление предопределенного варианта отчета запрещена.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Пометить ""%1"" на удаление?'"),
		Вариант.Наименование
	);
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УдалитьВариантДополнительногоОтчета("ВнешнийОтчет." + Объект.ИмяОбъекта, Вариант.КлючВарианта);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ КомандыОбработки

&НаКлиенте
Процедура КомандыОбработкиПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущегоЭлемента = Элемент.ТекущийЭлемент.Имя;
	
	Если ИмяТекущегоЭлемента = "КомандыИспользование" ИЛИ ИмяТекущегоЭлемента = "КомандыРасписание" Тогда
		
		Если НЕ ТекущиеДанные.Разрешено Тогда
			
			Предупреждение(
				НСтр("ru = 'Команда используется только на клиенте.
				|Регламентное задание можно настраивать только для команд исполняемых в серверном контексте.'")
			);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ИмяТекущегоЭлемента = "КомандыРасписание" Тогда
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ ТекущиеДанные.Использование ИЛИ ИмяТекущегоЭлемента = "КомандыРасписание" Тогда
			УстановитьРасписание(ТекущиеДанные);
		КонецЕсли;
		
	ИначеЕсли ИмяТекущегоЭлемента = "БыстрыйДоступПредставление" Тогда
		
		НастроитьБыстрыйДоступОбщийОбработчик(Элемент.ТекущиеДанные);
		Отказ = Истина;
		
	КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗагрузитьФайлОбработкиОтчета(Команда)
	
	ОткрытьДиалогЗагрузкиФайлаОбработкиОтчета(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлОбработкиОтчета(Команда)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресДанныхОбработки) Тогда
		Предупреждение(НСтр("ru = 'Нет данных для обработки.'"));
		Возврат;
	КонецЕсли;
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = Объект.ИмяФайла;
		ДиалогСохраненияФайла.Фильтр = ДополнительныеОтчетыИОбработкиКлиентСервер.ФильтрДиалоговВыбораИСохранения();
		ДиалогСохраненияФайла.ИндексФильтра = ?(Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидОтчет, 1, 2);
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");
		
		Если ДиалогСохраненияФайла.Выбрать() Тогда
			ПолучаемыеФайлы = Новый Массив;
			ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(, АдресДанныхОбработки));
			ПолученныеФайлы = Новый Массив;
			ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, ДиалогСохраненияФайла.ПолноеИмяФайла, Ложь);
		КонецЕсли;
		
	Иначе
		
		ПолучитьФайл(АдресДанныхОбработки, Объект.ИмяФайла, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьНазначениеОбработки(Команда)
	
	ФильтрПоОбъектамМетаданных = ПолучитьФильтрПоОбъектамМетаданных(Объект.Вид);
	
	ВыбранныеОбъектыМетаданных = Новый СписокЗначений;
	
	Для Каждого ЭлементНазначение ИЗ Объект.Назначение Цикл
		ВыбранныеОбъектыМетаданных.Добавить(ЭлементНазначение.ПолноеИмяОбъектаМетаданных);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ФильтрПоОбъектамМетаданных", ФильтрПоОбъектамМетаданных);
	ПараметрыФормы.Вставить("ВыбранныеОбъектыМетаданных", ВыбранныеОбъектыМетаданных);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Назначение дополнительной обработки'"));
	
	ОткрытьФорму("ОбщаяФорма.ВыборОбъектовМетаданных", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеКоманды(Команда)
	
	ТекущиеДанные = Элементы.КомандыОбработки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Разрешено Тогда
		УстановитьРасписание(ТекущиеДанные);
	Иначе
		Предупреждение(НСтр("ru = 'Команда используется только на клиенте.
									|Регламентное задание можно настраивать только для команд исполняемых в серверном контексте.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьРазделыКомандногоИнтерфейса(Команда)
	
	Разделы = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из Объект.Разделы Цикл
		Разделы.Добавить(СтрокаТаблицы.Раздел);
	КонецЦикла;
	
	СписокРазделов = ОткрытьФормуМодально(
		"Справочник.ДополнительныеОтчетыИОбработки.Форма.ПодборРазделов",
		Новый Структура("Разделы,ВидОбработки", Разделы, Объект.Вид)
	);
	
	Если ТипЗнч(СписокРазделов) = Тип("СписокЗначений") Тогда
		Объект.Разделы.Очистить();
		Для Каждого ЭлементСписка Из СписокРазделов Цикл
			НоваяСтрока = Объект.Разделы.Добавить();
			НоваяСтрока.Раздел = ЭлементСписка.Значение;
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьБыстрыйДоступККоманде(Команда)
	
	ТекущиеДанные = Элементы.КомандыОбработки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьБыстрыйДоступОбщийОбработчик(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыДополнительногоОтчетаОткрыть(Команда)
	Вариант = ЭтаФорма.Элементы.ВариантыДополнительногоОтчета.ТекущиеДанные;
	Если Вариант = Неопределено Тогда
		Предупреждение(НСтр("ru = 'Выберите вариант отчета.'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеОтчетыИОбработкиКлиент.ОткрытьВариантДополнительногоОтчета(Объект.Ссылка, Вариант.КлючВарианта);
КонецПроцедуры

&НаКлиенте
Процедура РазместитьВРазделах(Команда)
	МассивВариантов = Новый Массив;
	Для Каждого ИдентификаторСтроки Из Элементы.ВариантыДополнительногоОтчета.ВыделенныеСтроки Цикл
		Вариант = ВариантыДополнительногоОтчета.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ЗначениеЗаполнено(Вариант.Ссылка) Тогда
			МассивВариантов.Добавить(Вариант.Ссылка);
		КонецЕсли;
	КонецЦикла;
	СтандартныеПодсистемыКлиентПереопределяемый.ОткрытьДиалогРазмещенияВариантовДополнительныхОтчетовВРазделах(МассивВариантов);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Функция ПолучитьФильтрПоОбъектамМетаданных(ВидОбработки)
	ФильтрПоОбъектамМетаданных = Новый СписокЗначений;
	
	Если ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
		ОбщаяКоманда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиЗаполнениеОбъекта;
	ИначеЕсли ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		ОбщаяКоманда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиОтчеты;
	ИначеЕсли ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		ОбщаяКоманда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиПечатныеФормы;
	ИначеЕсли ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		ОбщаяКоманда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиСозданиеСвязанныхОбъектов;
	КонецЕсли;
	
	Для Каждого ТипПараметраКоманды Из ОбщаяКоманда.ТипПараметраКоманды.Типы() Цикл
		ФильтрПоОбъектамМетаданных.Добавить(Метаданные.НайтиПоТипу(ТипПараметраКоманды).ПолноеИмя());
	КонецЦикла;
	
	Возврат ФильтрПоОбъектамМетаданных;
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьВариантДополнительногоОтчета(КлючОбъекта, КлючВарианта)
	ХранилищаНастроек["ХранилищеВариантовОтчетов"].Удалить(КлючОбъекта, КлючВарианта, Неопределено);
КонецПроцедуры

&НаСервере
Функция ЗарегистрироватьОбработку(ПараметрыРегистрации)
	// Получает файл обработки из временного хранилища, пытается создать объект
	// обработки (внешнего отчета) и получает информацию из объекта внешней обработки (отчета)
	
	Если ПараметрыРегистрации.ОтключатьКонфликтующие = Истина Тогда
		Для Каждого ЭлементСписка Из ПараметрыРегистрации.Конфликтующие Цикл
			КонфликтующийОбъект = ЭлементСписка.Значение.ПолучитьОбъект();
			КонфликтующийОбъект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки;
			КонфликтующийОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
	Результат = Новый Структура("ИмяОбъекта, СтароеИмяОбъекта, Успешно, ИмяОбъектаЗанято, Конфликтующие, КраткоеПредставлениеОшибки");
	Результат.ИмяОбъектаЗанято = Ложь;
	Результат.Успешно = Ложь;
	Результат.СтароеИмяОбъекта = ?(ЭтоНовый, Объект.ИмяОбъекта, Объект.Ссылка.ИмяОбъекта);
	
	// Подключение и получение имени, под которым объект будет подключаться
	Менеджер = ?(ПараметрыРегистрации.ЭтоОтчет, ВнешниеОтчеты, ВнешниеОбработки);
	Результат.ИмяОбъекта = СокрЛП(Менеджер.Подключить(АдресДанныхОбработки, , Истина));
	
	// Если отчет публикуется, то необходим контроль уникальности имени объекта, 
	//     под которым дополнительный отчет регистрируется в системе
	Если Объект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется Тогда
		// Проверка имени
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДОиО.Ссылка,
		|	ДОиО.Представление
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДОиО
		|ГДЕ
		|	ДОиО.ИмяОбъекта = &ИмяОбъекта
		|	И &УсловиеДопОтчет
		|	И ДОиО.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
		|	И ДОиО.ПометкаУдаления = ЛОЖЬ
		|	И ДОиО.Ссылка <> &Ссылка";
		
		ВидыДопОтчетов = Новый Массив;
		ВидыДопОтчетов.Добавить(ВидДополнительныйОтчет);
		ВидыДопОтчетов.Добавить(ВидОтчет);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИмяОбъекта",     Результат.ИмяОбъекта);
		Запрос.УстановитьПараметр("ВидыДопОтчетов", ВидыДопОтчетов);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Если ПараметрыРегистрации.ЭтоОтчет Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДопОтчет", "ДОиО.Вид В (&ВидыДопОтчетов)");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДопОтчет", "НЕ ДОиО.Вид В (&ВидыДопОтчетов)");
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		УстановитьПривилегированныйРежим(Истина);
		Конфликтующие = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Конфликтующие.Количество() > 0 Тогда
			Результат.ИмяОбъектаЗанято = Истина;
			Результат.Конфликтующие = Новый СписокЗначений;
			Для Каждого СтрокаТаблицы Из Конфликтующие Цикл
				Результат.Конфликтующие.Добавить(СтрокаТаблицы.Ссылка, СтрокаТаблицы.Представление);
			КонецЦикла; 
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	// Получение сведений о внешней обработке
	ВнешнийОбъект = Менеджер.Создать(Результат.ИмяОбъекта);
	
	Попытка
		РегистрационныеДанные = ВнешнийОбъект.СведенияОВнешнейОбработке();
	Исключение
		Префикс = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка получения сведений о внешней обработке ""%1"" при ее загрузке:'"),
			ПараметрыРегистрации.ИмяФайла
		);
		Если Не ЭтоНовый Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Дополнительные отчеты и обработки'"),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ДополнительныеОтчетыИОбработки,
				Объект.Ссылка,
				Префикс + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецЕсли;
		Результат.КраткоеПредставлениеОшибки = Префикс + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	Если РегистрационныеДанные.БезопасныйРежим
		ИЛИ Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		// ничего не делаем
	Иначе
		Результат.КраткоеПредставлениеОшибки = НСтр("ru = 'Для добавления обработок запускаемых в небезопасном режиме требуются полные права.'");
		Возврат Результат;
	КонецЕсли;
	
	Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок[РегистрационныеДанные.Вид];
	Если НЕ ЭтоНовый И Вид <> Объект.Вид Тогда
		Результат.КраткоеПредставлениеОшибки = НСтр("ru = 'Невозможно сменить вид существующего дополнительного отчета или обработки.'");
		Возврат Результат;
	ИначеЕсли ПараметрыРегистрации.ЭтоОтчет <> (Вид = ВидДополнительныйОтчет ИЛИ Вид = ВидОтчет) Тогда
		Результат.КраткоеПредставлениеОшибки = НСтр("ru = 'Вид обработки, указанный в сведениях о внешней обработке, не соответствует её расширению.'");
		Возврат Результат;
	КонецЕсли;
	
	// Инициализация сведений об обработке
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Наименование    = РегистрационныеДанные.Наименование;
	ТекущийОбъект.Версия          = РегистрационныеДанные.Версия;
	ТекущийОбъект.БезопасныйРежим = РегистрационныеДанные.БезопасныйРежим;
	ТекущийОбъект.Информация      = РегистрационныеДанные.Информация;
	ТекущийОбъект.ИмяФайла        = ПараметрыРегистрации.ИмяФайла;
	ТекущийОбъект.ИмяОбъекта      = Результат.ИмяОбъекта;
	
	ТекущийОбъект.ИспользуетХранилищеВариантов = Ложь;
	Если Вид = ВидДополнительныйОтчет Тогда
		Если Метаданные.ХранилищеВариантовОтчетов <> Неопределено 
			И Метаданные.ХранилищеВариантовОтчетов.Имя = "ХранилищеВариантовОтчетов" Тогда
			ТекущийОбъект.ИспользуетХранилищеВариантов = Истина;
		Иначе
			ВнешнийОбъектМетаданные = ВнешнийОбъект.Метаданные();
			Если ВнешнийОбъектМетаданные.ХранилищеВариантов <> Неопределено
				И ВнешнийОбъектМетаданные.ХранилищеВариантов.Имя = "ХранилищеВариантовОтчетов" Тогда
				ТекущийОбъект.ИспользуетХранилищеВариантов = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Загружена другая обработка (изменилось имя объекта или вид обработки)
	Если ЭтоНовый ИЛИ ТекущийОбъект.ИмяОбъекта <> Результат.ИмяОбъекта ИЛИ ТекущийОбъект.Вид <> Вид Тогда
		ТекущийОбъект.Назначение.Очистить();
		ТекущийОбъект.Вид = Вид;
	КонецЕсли;
	
	// Если не заполнено назначение - устанавливаем назначение из обработки
	Если ТекущийОбъект.Назначение.Количество() = 0
		И Вид <> ВидДополнительныйОтчет
		И Вид <> ВидДополнительнаяОбработка Тогда
		
		ТекущийОбъект.ИспользоватьДляФормыОбъекта = Истина;
		ТекущийОбъект.ИспользоватьДляФормыСписка  = Истина;
		
		ПолноеНазначениеЗначение = ДополнительныеОтчетыИОбработки.ПолучитьПолноеНазначениеПоВидуДополнительнойВнешнейОбработки(ТекущийОбъект.Вид);
		
		Если РегистрационныеДанные.Свойство("Назначение") Тогда
			
			Для Каждого ЭлементЗаданноеНазначение Из РегистрационныеДанные.Назначение Цикл
				
				РазделеннаяСтрока = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭлементЗаданноеНазначение, ".");
				
				Если РазделеннаяСтрока[1] = "*" Тогда
					
					НайденныеНазначения = ПолноеНазначениеЗначение.НайтиСтроки(Новый Структура("Класс", РазделеннаяСтрока[0]));
					
					Для Каждого ЭлементНайденноеНазначение Из НайденныеНазначения Цикл
						НоваяСтрока = ТекущийОбъект.Назначение.Добавить();
						НоваяСтрока.ПолноеИмяОбъектаМетаданных = ЭлементНайденноеНазначение.ПолноеИмяОбъектаМетаданных;
					КонецЦикла;
					
				Иначе
					
					Если ПолноеНазначениеЗначение.НайтиСтроки(Новый Структура("ПолноеИмяОбъектаМетаданных", ЭлементЗаданноеНазначение)).Количество() > 0 Тогда
						НоваяСтрока = ТекущийОбъект.Назначение.Добавить();
						НоваяСтрока.ПолноеИмяОбъектаМетаданных = ЭлементЗаданноеНазначение;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ТекущийОбъект.Назначение.Свернуть("ПолноеИмяОбъектаМетаданных", "");
		
		ЗначениеВРеквизитФормы(ПолноеНазначениеЗначение, "ПолноеНазначение");
		
	КонецЕсли;
	
	КомандыСохраненные = ТекущийОбъект.Команды.Выгрузить();
	
	ТекущийОбъект.Команды.Очистить();
	
	// Инициализация команд
	
	Для Каждого ЭлементОписаниеКоманды Из РегистрационныеДанные.Команды Цикл
		
		НоваяСтрока = ТекущийОбъект.Команды.Добавить();
		НоваяСтрока.Идентификатор        = ЭлементОписаниеКоманды.Идентификатор;
		НоваяСтрока.Представление        = ЭлементОписаниеКоманды.Представление;
		НоваяСтрока.Модификатор          = ЭлементОписаниеКоманды.Модификатор;
		НоваяСтрока.ПоказыватьОповещение = ЭлементОписаниеКоманды.ПоказыватьОповещение;
		
		Если ЭлементОписаниеКоманды.Использование = "ОткрытиеФормы" Тогда
			НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы;
		ИначеЕсли ЭлементОписаниеКоманды.Использование = "ВызовКлиентскогоМетода" Тогда
			НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовКлиентскогоМетода;
		ИначеЕсли ЭлементОписаниеКоманды.Использование = "ВызовСерверногоМетода" Тогда
			НоваяСтрока.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода;
		Иначе
			ТекстСообщения = НСтр("ru = 'Для команды %1 не определен способ запуска.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ЭлементОписаниеКоманды.Представление);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	УстановитьЭлементыФормы(Истина);
	
	ЗаполнитьКоманды(КомандыСохраненные);
	
	Результат.Успешно = Истина;
	РегистрацияОбработки = Истина;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьКоманды(КомандыСохраненные = Неопределено)
	
	КомандыОбработки.Очистить();
	
	Для Каждого ЭлементКоманда Из Объект.Команды Цикл
		
		НоваяКоманда = КомандыОбработки.Добавить();
		
		НоваяКоманда.Представление = ЭлементКоманда.Представление;
		НоваяКоманда.Идентификатор = ЭлементКоманда.Идентификатор;
		
		Если Объект.Вид = ВидДополнительнаяОбработка ИЛИ Объект.Вид = ВидДополнительныйОтчет Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	Регистр.Пользователь КАК Пользователь
			|ИЗ
			|	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК Регистр
			|ГДЕ
			|	Регистр.ДополнительныйОтчетИлиОбработка = &Ссылка
			|	И Регистр.ИдентификаторКоманды = &ИдентификаторКоманды
			|	И Регистр.Доступно";
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			Запрос.УстановитьПараметр("ИдентификаторКоманды", ЭлементКоманда.Идентификатор);
			Запрос.Текст = ТекстЗапроса;
			
			УстановитьПривилегированныйРежим(Истина);
			
			МассивПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
			НоваяКоманда.БыстрыйСписокДоступа.ЗагрузитьЗначения(МассивПользователей);
			НоваяКоманда.БыстрыйДоступПредставление = ПредставлениеБыстрогоДоступаПользователей(
				НоваяКоманда.БыстрыйСписокДоступа.Количество()
			);
			
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		Если Объект.Вид <> ВидДополнительнаяОбработка
			ИЛИ ЭлементКоманда.ВариантЗапуска <> Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода Тогда
			
			НоваяКоманда.РасписаниеПредставление = НСтр("ru = 'Не применимо - команда используется только на клиенте'");
			НоваяКоманда.Использование = Ложь;
			НоваяКоманда.Разрешено     = Ложь;
			
		ИначеЕсли НЕ ПравоДобавления Тогда
			
			// Администратор абонента - только чтение представления РЗ
			НоваяКоманда.Разрешено = Ложь;
			НоваяКоманда.РасписаниеПредставление = ЭлементКоманда.РегламентноеЗаданиеПредставление;
			НоваяКоманда.Использование = (
				ЗначениеЗаполнено(ЭлементКоманда.РегламентноеЗаданиеПредставление)
				И ЭлементКоманда.РегламентноеЗаданиеПредставление <> ПредставлениеПустогоРасписания()
			);
			
		Иначе
			
			// Можно задавать расписание и указывать использование
			НоваяКоманда.Разрешено     = Истина;
			НоваяКоманда.Использование = Ложь;
			
			Если КомандыСохраненные = Неопределено Тогда
				// загрузка команд из таблицы объекта
				РегламентноеЗаданиеGUID = ЭлементКоманда.РегламентноеЗаданиеGUID;
			Иначе
				
				НайденнаяСтрока = КомандыСохраненные.Найти(ЭлементКоманда.Идентификатор, "Идентификатор");
				
				Если НайденнаяСтрока = Неопределено Тогда
					// соответствия не найдено
				Иначе
					РегламентноеЗаданиеGUID = НайденнаяСтрока.РегламентноеЗаданиеGUID;
					КомандыСохраненные.Удалить(НайденнаяСтрока);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РегламентноеЗаданиеGUID) Тогда
				
				РегламентноеЗадание = ДополнительныеОтчетыИОбработки.НайтиРегламентноеЗадание(РегламентноеЗаданиеGUID, Истина);
				
				Если РегламентноеЗадание <> Неопределено Тогда
					
					ЭлементКоманда.РегламентноеЗаданиеGUID = РегламентноеЗаданиеGUID;
					
					НоваяКоманда.РасписаниеПредставление = Строка(РегламентноеЗадание.Расписание);
					НоваяКоманда.Использование = РегламентноеЗадание.Использование;
					НоваяКоманда.Расписание.Добавить(РегламентноеЗадание.Расписание);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ НоваяКоманда.Использование Тогда
				НоваяКоманда.РасписаниеПредставление = ПредставлениеОтключенногоРасписания();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЭлементыФормы(Регистрация = Ложь)
	
	Если НЕ Регистрация И НЕ ЭтоНовый И (Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидОтчет) Тогда
		ВариантыДополнительногоОтчетаЗаполнить();
	Иначе
		ВариантыДополнительногоОтчета.Очистить();
	КонецЕсли;
	
	Если Объект.Вид = ВидДополнительныйОтчет И Объект.ИспользуетХранилищеВариантов Тогда
		// Выводить закладки
		Элементы.СтраницыВариантыКоманды.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.СтраницыВариантыКоманды.ТекущаяСтраница    = Элементы.СтраницаВарианты;
		
		КоличествоВариантов = ВариантыДополнительногоОтчета.Количество();
		Если Регистрация ИЛИ КоличествоВариантов = 0 Тогда
			Элементы.СтраницыВарианты.ТекущаяСтраница = Элементы.ВариантыСкрытьДоЗаписи;
			Элементы.СтраницаВарианты.Заголовок = НСтр("ru = 'Варианты отчета'");
		Иначе
			Элементы.СтраницыВарианты.ТекущаяСтраница = Элементы.ВариантыПоказать;
			Элементы.СтраницаВарианты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Варианты отчета (%1)'"),
				Формат(КоличествоВариантов, "ЧГ=")
			);
		КонецЕсли;
		
		КоличествоКоманд = Объект.Команды.Количество();
		Если КоличествоКоманд = 0 Тогда
			Элементы.СтраницаКоманды.Заголовок = НСтр("ru = 'Команды'");
		Иначе
			Элементы.СтраницаКоманды.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Команды (%1)'"),
				Формат(КоличествоКоманд, "ЧГ=")
			);
		КонецЕсли;
		
	Иначе
		// Без закладок
		Элементы.СтраницыВариантыКоманды.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.СтраницыВариантыКоманды.ТекущаяСтраница    = Элементы.СтраницаКоманды;
		
	КонецЕсли;
	
	
	Если Регистрация ИЛИ ЗначениеЗаполнено(Объект.Ссылка)Тогда
		
		Если Объект.Вид = ВидДополнительнаяОбработка ИЛИ Объект.Вид = ВидДополнительныйОтчет Тогда
			
			Элементы.КомандыРасписание.Видимость = Истина ИЛИ ПравоДобавления;
			Элементы.КомандыИспользование.Видимость = Истина ИЛИ ПравоДобавления;
			
			Элементы.СтраницыРазделыНазначение.ТекущаяСтраница = Элементы.СтраницаРазделы;
			
		ИначеЕсли ДополнительныеОтчетыИОбработки.ПроверитьНазначаемаяОбработка(Объект.Вид) Тогда
			
			Элементы.КомандыРасписание.Видимость = Ложь;
			Элементы.КомандыИспользование.Видимость = Ложь;
			
			Элементы.СтраницыРазделыНазначение.ТекущаяСтраница = Элементы.СтраницаНазначение;
			
			Элементы.КомандыОбработкиНастроитьБыстрыйДоступККоманде.Видимость = Ложь;
			Элементы.КомандыОбработкиНастроитьРасписаниеКоманды.Видимость = Ложь;
			
			Элементы.КомандыОбработки.ПодчиненныеЭлементы.БыстрыйДоступПредставление.Видимость = Ложь;
			
		КонецЕсли;
		
		Если Объект.БезопасныйРежим Тогда
			Если Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидОтчет Тогда
				Элементы.ГруппаДополнительнаяИнформация.ТекущаяСтраница = Элементы.ГруппаИнформацияОтчета;
			Иначе
				Элементы.ГруппаДополнительнаяИнформация.ТекущаяСтраница = Элементы.ГруппаИнформацияОбработки;
			КонецЕсли;
		Иначе
			Если Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидОтчет Тогда
				Элементы.ГруппаДополнительнаяИнформация.ТекущаяСтраница = Элементы.ГруппаПредупреждениеОтчета;
			Иначе
				Элементы.ГруппаДополнительнаяИнформация.ТекущаяСтраница = Элементы.ГруппаПредупреждениеОбработки;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоНовый Тогда
			Если Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидОтчет Тогда
				Заголовок = НСтр("ru = 'Дополнительный отчет (создание)'");
			Иначе
				Заголовок = НСтр("ru = 'Дополнительная обработка (создание)'");
			КонецЕсли;
		Иначе
			Если Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидОтчет Тогда
				Заголовок = Объект.Наименование + " " + НСтр("ru = '(Дополнительный отчет)'");
			Иначе
				Заголовок = Объект.Наименование + " " + НСтр("ru = '(Дополнительная обработка)'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВариантыДополнительногоОтчетаЗаполнить()
	ВариантыДополнительногоОтчета.Очистить();
	
	ВнешнийОбъект = ДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(Объект.Ссылка);
	ОтчетМетаданные = ВнешнийОбъект.Метаданные();
	СхемаКДМетаданные = ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных;
	Если СхемаКДМетаданные <> Неопределено Тогда
		СхемаКД = ВнешнийОбъект.ПолучитьМакет(СхемаКДМетаданные.Имя);
		Для Каждого ВариантНастроекКД Из СхемаКД.ВариантыНастроек Цикл
			ВариантСсылка = Неопределено;
			КлючВарианта = ВариантНастроекКД.Имя;
			СтандартныеПодсистемыПереопределяемый.СсылкаВариантаДополнительногоОтчета(Объект.Ссылка, КлючВарианта, ВариантСсылка);
			Если ВариантСсылка <> Неопределено Тогда
				Вариант = ВариантыДополнительногоОтчета.Добавить();
				Вариант.КлючВарианта = КлючВарианта;
				Вариант.Наименование = ВариантНастроекКД.Представление;
				Вариант.Пользовательский = Ложь;
				Вариант.ИндексКартинки = 5;
				Вариант.Ссылка = ВариантСсылка;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВариантСсылка = Неопределено;
		КлючВарианта = "";
		СтандартныеПодсистемыПереопределяемый.СсылкаВариантаДополнительногоОтчета(Объект.Ссылка, КлючВарианта, ВариантСсылка);
		Если ВариантСсылка <> Неопределено Тогда
			Вариант = ВариантыДополнительногоОтчета.Добавить();
			Вариант.КлючВарианта = КлючВарианта;
			Вариант.Наименование = ОтчетМетаданные.Представление();
			Вариант.Пользовательский = Ложь;
			Вариант.ИндексКартинки = 5;
			Вариант.Ссылка = ВариантСсылка;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ИспользуетХранилищеВариантов Тогда
		Хранилище = ХранилищаНастроек["ХранилищеВариантовОтчетов"];
		КлючОбъекта = Объект.Ссылка;
	Иначе
		Хранилище = ХранилищеВариантовОтчетов;
		КлючОбъекта = "ВнешнийОтчет." + Объект.ИмяОбъекта;
	КонецЕсли;
	
	СписокНастроек = Хранилище.ПолучитьСписок(КлючОбъекта);
	
	Для Каждого ЭлементСписка Из СписокНастроек Цикл
		Вариант = ВариантыДополнительногоОтчета.Добавить();
		Вариант.КлючВарианта = ЭлементСписка.Значение;
		Вариант.Наименование = ЭлементСписка.Представление;
		Вариант.Пользовательский = Истина;
		Вариант.ИндексКартинки = 3;
		СтандартныеПодсистемыПереопределяемый.СсылкаВариантаДополнительногоОтчета(Объект.Ссылка, Вариант.КлючВарианта, Вариант.Ссылка);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьБыстрыйДоступОбщийОбработчик(ТекущиеДанные)
	
	Идентификатор = ТекущиеДанные.Идентификатор;
	
	ТекущиеДанныеЭлементКоллекции = КомандыОбработки.НайтиСтроки(Новый Структура("Идентификатор", Идентификатор))[0];
	
	Результат = ОткрытьФормуМодально("Справочник.ДополнительныеОтчетыИОбработки.Форма.БыстрыйДоступКДополнительнымОтчетамИОбработкам",
					Новый Структура("ПользователиСБыстрымДоступом, ПредставлениеКоманды", 
									ТекущиеДанныеЭлементКоллекции.БыстрыйСписокДоступа,
									ТекущиеДанные.Представление));
	
	Если ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
		ТекущиеДанныеЭлементКоллекции.БыстрыйСписокДоступа.Очистить();
		Для Каждого ЭлементПользователь Из Результат Цикл
			ТекущиеДанныеЭлементКоллекции.БыстрыйСписокДоступа.Добавить(ЭлементПользователь.Значение);
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
	
	ТекущиеДанныеЭлементКоллекции.БыстрыйДоступПредставление = ПредставлениеБыстрогоДоступаПользователей(
		ТекущиеДанныеЭлементКоллекции.БыстрыйСписокДоступа.Количество()
	);
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьДиалогЗагрузкиФайлаОбработкиОтчета(ФлагДобавить, ПараметрыРегистрации = Неопределено)
	
	Если НЕ ПравоДобавления Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав доступа.'");
	КонецЕсли;
	
	// Выбор файла
	Если ПараметрыРегистрации = Неопределено Тогда
		ПараметрыРегистрации = Новый Структура("ИмяФайла, ЭтоОтчет, ОтключатьКонфликтующие, Конфликтующие");
		ПараметрыРегистрации.ИмяФайла = "";
		ПараметрыРегистрации.ЭтоОтчет = Неопределено;
		ПараметрыРегистрации.ОтключатьКонфликтующие = Ложь;
		ПараметрыРегистрации.Конфликтующие = Новый СписокЗначений;
		
		// Параметры результата выбора
		ВыбранноеИмяФайла = "";
		
		// Параметры выбора
		Если ПодключитьРасширениеРаботыСФайлами() Тогда
			
			ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ИмяФайла;
			ДиалогОткрытияФайла.Фильтр = ДополнительныеОтчетыИОбработкиКлиентСервер.ФильтрДиалоговВыбораИСохранения();
			ДиалогОткрытияФайла.ИндексФильтра = ?(Объект.Ссылка.Пустая(), 0, ?(Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидОтчет, 1, 2));
			ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
			ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите дополнительный отчет или обработку'");
			
			ПомещаемыеФайлы = Новый Массив;
			ПомещенныеФайлы = Новый Массив;
			
			Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, ДиалогОткрытияФайла, Истина, УникальныйИдентификатор) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			АдресДанныхОбработки = ПомещенныеФайлы[0].Хранение;
			ВыбранноеИмяФайла = ПомещенныеФайлы[0].Имя;
			
		Иначе
			
			Если НЕ ПоместитьФайл(АдресДанныхОбработки, , ВыбранноеИмяФайла, Истина, УникальныйИдентификатор) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыбранноеИмяФайла, "\");
		ПараметрыРегистрации.ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
		РасширениеФайла = ВРег(Прав(ПараметрыРегистрации.ИмяФайла, 3));
		
		Если РасширениеФайла = "ERF" Тогда
			ПараметрыРегистрации.ЭтоОтчет = Истина;
		ИначеЕсли РасширениеФайла = "EPF" Тогда
			ПараметрыРегистрации.ЭтоОтчет = Ложь;
		Иначе
			Предупреждение(НСтр("ru = 'Расширение файла не соответствует расширению внешнего отчета (ERF) или обработки (EPF).'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Вызов сервера
	РезультатРегистрации = ЗарегистрироватьОбработку(ПараметрыРегистрации);
	
	// Обработка результата работы сервера
	Если РезультатРегистрации.Успешно = Истина Тогда
		
		Модифицированность = Истина;
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Файл обработки успешно загружен'"), 
			?(ЭтоНовый, "", ПолучитьНавигационнуюСсылку(Объект.Ссылка)), 
			ПараметрыРегистрации.ИмяФайла
		);
		Возврат Истина;
		
	КонецЕсли;
	
	// Разбор причины отказа загрузки обработки и отображение информации пользователю
	Если РезультатРегистрации.ИмяОбъектаЗанято = Ложь Тогда
		
		// Причина отказа в КраткоеПредставлениеОшибки
		Предупреждение(РезультатРегистрации.КраткоеПредставлениеОшибки);
		Возврат Ложь;
		
	Иначе 
		
		// Причина отказа - имя объекта занято
		ЗаголовокВопроса = НСтр("ru = 'Имя объекта занято'");
		
		// Представление занявших объектов
		КоличествоКонфликтующих = РезультатРегистрации.Конфликтующие.Количество();
		ПредставлениеЗанявших = "";
		Для Каждого ЭлементСписка Из РезультатРегистрации.Конфликтующие Цикл
			ПредставлениеЗанявших = ПредставлениеЗанявших 
			+ ?(ПредставлениеЗанявших = "", "", ", ")
			+ СокрЛП(ЭлементСписка.Представление);
			Если СтрДлина(ПредставлениеЗанявших) > 80 Тогда
				ПредставлениеЗанявших = Лев(ПредставлениеЗанявших, 70) 
				+ "... ("
				+ Формат(КоличествоКонфликтующих, "ЧН=0; ЧГ=")
				+ " "
				+ НСтр("ru = 'шт'") 
				+ ")";
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Имя ""%1"" уже занято другими дополнительными отчетами (обработками): 
				|%2.
				|
				|Доступные действия:
				|1. ""Продолжить"" - продолжить загрузку, отключив Публикацию текущего отчета (обработки).
				|2. ""Отключить конфликтующие"" - продолжить загрузку, отключив Публикацию отчетов (обработок), конфликтующих с загружамой по имени.
				|3. ""Показать конфликтующие"" - отменить загрузку и показать список отчетов (обработок), конфликтующих с загружамой по имени.
				|4. ""Отмена"" - отменить загрузку.'"),
			РезультатРегистрации.ИмяОбъекта,
			ПредставлениеЗанявших
		);
		
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(1, НСтр("ru = 'Продолжить'"));
		КнопкиВопроса.Добавить(2, НСтр("ru = 'Отключить конфликтующие'"));
		КнопкиВопроса.Добавить(3, НСтр("ru = 'Показать конфликтующие'"));
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
		
		Ответ = Вопрос(ТекстВопроса, КнопкиВопроса, , 1, ЗаголовокВопроса);
		Если Ответ = 1 Тогда
			
			// Продолжить
			Объект.Публикация = ПредопределенноеЗначение("Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки");
			
			// Повторный вызов сервера (публикация в режиме отладки) и обработка результата
			Возврат ОткрытьДиалогЗагрузкиФайлаОбработкиОтчета(ФлагДобавить, ПараметрыРегистрации);
			
		ИначеЕсли Ответ = 2 Тогда
			
			// Отключить конфликтующие
			ПараметрыРегистрации.ОтключатьКонфликтующие = Истина;
			ПараметрыРегистрации.Конфликтующие = РезультатРегистрации.Конфликтующие;
			
			// Повторный вызов сервера (с переводом конфликтующих в режим отладки) и обработка результата
			РезультатВторогоЗахода = ОткрытьДиалогЗагрузкиФайлаОбработкиОтчета(ФлагДобавить, ПараметрыРегистрации);
			
			// Отключается несколько объектов, потому динамические списки надо обновить
			ОповеститьОбИзменении(Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки"));
			
			// Возврат результата вызывающему коду
			Возврат РезультатВторогоЗахода;
			
		ИначеЕсли Ответ = 3 Тогда
			
			// Показать конфлиткующие (отмена далее)
			Если КоличествоКонфликтующих = 1
				И (
					ЭтоНовый 
					ИЛИ РезультатРегистрации.СтароеИмяОбъекта <> РезультатРегистрации.ИмяОбъекта
				) Тогда
				
				// Форма элемента
				ОткрытьЗначение(РезультатРегистрации.Конфликтующие[0].Значение);
				
			Иначе
				
				// Форма списка с отбором по конфликтующим
				ПараметрыСписка = Новый Структура("Отбор, Заголовок, Отображение");
				ПараметрыСписка.Отбор = Новый Структура("ИмяОбъекта, ЭтоГруппа", РезультатРегистрации.ИмяОбъекта, Ложь);
				ПараметрыСписка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Дополнительные отчеты и обработки с именем объекта ""%1""'"),
					РезультатРегистрации.ИмяОбъекта
				);
				ПараметрыСписка.Отображение = "Список";
				ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.ФормаСписка", ПараметрыСписка, , Истина);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Отменить загрузку
	Возврат Ложь;
КонецФункции

&НаКлиенте
Функция РедактированиеРасписанияРегламентногоЗадания(Расписание)
	
	Если Расписание = Неопределено Тогда
		
		Расписание = Новый РасписаниеРегламентногоЗадания;
		
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	
	// открываем диалог для редактирования Расписания
	Если Диалог.ОткрытьМодально() Тогда
		
		Расписание = Диалог.Расписание;
		
	КонецЕсли;
	
	Возврат Расписание;
	
КонецФункции

&НаКлиенте
Процедура УстановитьРасписание(ТекущиеДанные)
	
	Если ТекущиеДанные.Расписание.Количество() > 0 Тогда
		Расписание = ТекущиеДанные.Расписание.Получить(0).Значение;
	Иначе
		Расписание = Неопределено;
	КонецЕсли;
	
	Расписание = РедактированиеРасписанияРегламентногоЗадания(Расписание);
	
	ТекущиеДанные.Расписание.Очистить();
	ТекущиеДанные.Расписание.Добавить(Расписание);
	
	ТекущиеДанные.РасписаниеПредставление = Строка(Расписание);
	
	Если ТекущиеДанные.РасписаниеПредставление = ПредставлениеПустогоРасписания() Тогда
		ТекущиеДанные.РасписаниеПредставление = ПредставлениеОтключенногоРасписания();
		ТекущиеДанные.Использование = Ложь;
		Модифицированность = Истина;
	Иначе
		ТекущиеДанные.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариант()
	Вариант = Элементы.ВариантыДополнительногоОтчета.ТекущиеДанные;
	Если Вариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Вариант.Ссылка) Тогда
		Предупреждение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вариант отчета ""%1"" не зарегистрирован.'"),
				Вариант.Наименование
			)
		);
	Иначе
		ОткрытьЗначение(Вариант.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПустогоРасписания()
	
	Возврат Строка(Новый РасписаниеРегламентногоЗадания);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеОтключенногоРасписания()
	
	Возврат НСтр("ru = 'Расписание не задано'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеБыстрогоДоступаПользователей(КоличествоПользователей)
	Если КоличествоПользователей = 0 Тогда
		Возврат НСтр("ru = 'Команды нет в быстром доступе'");
	КонецЕсли;
	
	ПоследняяЦифра = КоличествоПользователей - 10 * Цел(КоличествоПользователей/10);
	
	Если ПоследняяЦифра = 1 Тогда
		БыстрыйДоступПредставление = НСтр("ru = '%1 пользователь'");
	ИначеЕсли ПоследняяЦифра = 2 Или ПоследняяЦифра = 3 Или ПоследняяЦифра = 4 Тогда
		БыстрыйДоступПредставление = НСтр("ru = '%1 пользователя'");
	Иначе
		БыстрыйДоступПредставление = НСтр("ru = '%1 пользователей'");
	КонецЕсли;
	
	БыстрыйДоступПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		БыстрыйДоступПредставление, 
		Формат(КоличествоПользователей, "ЧГ=0")
	);
	
	Возврат БыстрыйДоступПредставление;
КонецФункции

