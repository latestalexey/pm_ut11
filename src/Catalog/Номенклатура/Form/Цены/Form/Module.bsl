////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	АвтоЗаголовок = Ложь;
	Заголовок = НСтр("ru = 'Цены'");
	
	ОтборНоменклатура = Параметры.Ключ;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЦеныНоменклатуры.Отбор, 
		"Номенклатура", 
		ОтборНоменклатура, 
		ВидСравненияКомпоновкиДанных.Равно, 
		"Номенклатура", 
		Истина
	);
	
	Если РольДоступна("ПолныеПрава")
		ИЛИ РольДоступна("ЧтениеЦенПартнеров")
		ИЛИ РольДоступна("ДобавлениеИзменениеАссортиментаИЦенПартнеров") Тогда
		
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЦеныНоменклатурыПоставщиков.Отбор, 
		"Номенклатура", 
		ОтборНоменклатура, 
		ВидСравненияКомпоновкиДанных.Равно, 
		"Номенклатура", 
		Истина
		);
		
		Элементы.Контрагент.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");
	КонецЕсли;	

	СписокВидовЦен = Новый СписокЗначений();
	СписокВидовЦен.ЗагрузитьЗначения(Справочники.ВидыЦен.ДоступныеВидыЦен());

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЦеныНоменклатуры.Отбор, 
		"ВидЦены", 
		СписокВидовЦен, 
		ВидСравненияКомпоновкиДанных.ВСписке, 
		"ВидЦеныОграничениеПоПравам", 
		Истина
	);
	
	Элементы.Контрагент.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");
		
	СформироватьОтчет("ПрайсЛист");
	
КонецПроцедуры
         
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПериодЦеныНоменклатурыПриИзменении(Элемент)	
	
	ПериодЦеныНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныНоменклатурыПриИзменении(Элемент)
	
	ВидЦеныНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЦеныНоменклатурыПоставщикаПриИзменении(Элемент)
	
	ПериодЦеныНоменклатурыПоставщиковПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЦеныНоменклатурыПоставщикаОчистка(Элемент, СтандартнаяОбработка)
	
	ПериодЦеныНоменклатурыПоставщиковПриИзмененииНаСервере();
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	СоглашениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеЦеныПриИзменении(Элемент)
	
	 УсловиеЦеныПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СформироватьОтчетПрайсЛист(Команда)
	
	ОбновитьОтчет("ПрайсЛист");
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьОтчетВыручкаИСебестоимостьПродаж(Команда)
	
	СформироватьОтчет("ПрайсЛист");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ЦеныНоменклатуры

&НаКлиенте
Процедура ЦеныНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ЦеныНоменклатурыПоставщиков

&НаКлиенте
Процедура ЦеныНоменклатурыПоставщиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ОбновитьОтчет(ИмяОтчета)
	
	Перем ДанныеРасшифровки;
	
	Если НЕ ПравоДоступа("Использование", Метаданные.Отчеты[ИмяОтчета]) Тогда
		Возврат;
	КонецЕсли;
	
	// При обновлении отчета применяются пользовательские настройки.
	
	Если ИмяОтчета = "ПрайсЛист" Тогда
		
		ОтчетОбъект = РеквизитФормыВЗначение(ИмяОтчета);
		
		АдресСхемы = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, УникальныйИдентификатор);
		
		ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
		
		ОтчетОбъект.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки);
		
		// Вывести отчет.
		ТаблицаРезультатаОтчета = ТаблицаРезультатаОтчета(ИмяОтчета);
		ТаблицаРезультатаОтчета.Очистить();
		
		ОтчетОбъект.СкомпоноватьРезультат(ТаблицаРезультатаОтчета, ДанныеРасшифровки);
		
		АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ТаблицаРезультатаОтчета(ИмяОтчета)
	
	Возврат ЭтаФорма["ТаблицаОтчета" + ИмяОтчета];
	
КонецФункции

&НаСервере
Процедура СформироватьОтчет(ИмяОтчета, ИмяВариантаНастроек = "ПоНоменклатуреКонтекст")
	Перем ДанныеРасшифровки;
	
	Если НЕ ПравоДоступа("Использование", Метаданные.Отчеты[ИмяОтчета]) Тогда
		Возврат;
	КонецЕсли;
	
	// Загрузить настройки отчета из схемы компоновки.
	ОтчетОбъект = РеквизитФормыВЗначение(ИмяОтчета);
	АдресСхемы = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	
	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	
	НастройкиКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек[ИмяВариантаНастроек].Настройки;
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	
	// Добавить отбор по номенклатуре.
	ЭлементОтбора = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ОтборНоменклатура;
	ЭлементОтбора.Использование = Истина;
	
	// Вывести отчет.
	ТаблицаРезультатаОтчета = ТаблицаРезультатаОтчета(ИмяОтчета);
	ТаблицаРезультатаОтчета.Очистить();
	
	ОтчетОбъект.СкомпоноватьРезультат(ТаблицаРезультатаОтчета, ДанныеРасшифровки);
	
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);	

КонецПроцедуры

&НаСервере
Процедура ПериодЦеныНоменклатурыПриИзмененииНаСервере()
		
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЦеныНоменклатуры.Отбор,"Период","Период");
	
	ГруппаЭлементовОтбора = 
	ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
	ЦеныНоменклатуры.Отбор.Элементы,
	"ЦеныНоменклатурыОтборПоПериоду",
	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ
	);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
	ГруппаЭлементовОтбора,
	"Период",
	ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
	ПериодЦеныНоменклатуры.ДатаНачала,
	"Период",
	ЗначениеЗаполнено(ПериодЦеныНоменклатуры.ДатаНачала)
	);
	
	// Установить элемент отбора в группе.
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
	ГруппаЭлементовОтбора,
	"Период",
	ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
	ПериодЦеныНоменклатуры.ДатаОкончания,	
	"Период",
	ЗначениеЗаполнено(ПериодЦеныНоменклатуры.ДатаОкончания)
	);

КонецПроцедуры

&НаСервере
Процедура ВидЦеныНоменклатурыПриИзмененииНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЦеныНоменклатуры.Отбор,,"ВидЦены");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
	ЦеныНоменклатуры.Отбор,
	"ВидЦены",
	ВидСравненияКомпоновкиДанных.Равно,
	ВидЦеныНоменклатуры,
	"ВидЦены",
	ЗначениеЗаполнено(ВидЦеныНоменклатуры)
	);
		
КонецПроцедуры

&НаСервере
Процедура ПериодЦеныНоменклатурыПоставщиковПриИзмененииНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЦеныНоменклатурыПоставщиков.Отбор,"Период","Период");
	
	ГруппаЭлементовОтбора = 
	ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
	ЦеныНоменклатурыПоставщиков.Отбор.Элементы,
	"ЦеныНоменклатурыОтборПоПериоду",
	ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ
	);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
	ГруппаЭлементовОтбора,
	"Период",
	ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
	ПериодЦеныНоменклатурыПоставщика.ДатаНачала,
	"Период",
	ЗначениеЗаполнено(ПериодЦеныНоменклатурыПоставщика.ДатаНачала)
	);
	
	// Установить элемент отбора в группе.
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
	ГруппаЭлементовОтбора,
	"Период",
	ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
	ПериодЦеныНоменклатурыПоставщика.ДатаОкончания,	
	"Период",
	ЗначениеЗаполнено(ПериодЦеныНоменклатурыПоставщика.ДатаОкончания)
	);

КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЦеныНоменклатурыПоставщиков.Отбор,"Контрагент","Контрагент");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
	ЦеныНоменклатурыПоставщиков.Отбор,
	"Контрагент",
	ВидСравненияКомпоновкиДанных.Равно,
	Контрагент,
	"Контрагент",
	ЗначениеЗаполнено(Контрагент)
	);
	
КонецПроцедуры

&НаСервере
Процедура СоглашениеПриИзмененииНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЦеныНоменклатурыПоставщиков.Отбор,"Соглашение","Соглашение");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
	ЦеныНоменклатурыПоставщиков.Отбор,
	"Соглашение",
	ВидСравненияКомпоновкиДанных.Равно,
	Соглашение,
	"Соглашение",
	ЗначениеЗаполнено(Соглашение)
	);
	
КонецПроцедуры

&НаСервере
Процедура УсловиеЦеныПриИзмененииНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЦеныНоменклатурыПоставщиков.Отбор,"УсловиеЦеныПоставщика","УсловиеЦеныПоставщика");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
	ЦеныНоменклатурыПоставщиков.Отбор,
	"УсловиеЦеныПоставщика",
	ВидСравненияКомпоновкиДанных.Равно,
	УсловиеЦеныПоставщика,
	"УсловиеЦеныПоставщика",
	ЗначениеЗаполнено(УсловиеЦеныПоставщика)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтчетаПрайсЛистОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Перем ВыполненноеДействие, ПараметрВыполненногоДействия;
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
		АдресДанныхРасшифровки,
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы)
	);
	
	ОбработкаРасшифровки.ВыбратьДействие(
		Расшифровка, 
		ВыполненноеДействие, 
		ПараметрВыполненногоДействия
	);
	
	Если НЕ (ПараметрВыполненногоДействия = Неопределено) Тогда
		
		Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			
			ОткрытьЗначение(ПараметрВыполненногоДействия);
			
		Иначе
			
			ОписаниеОбработкиРасшифровки = Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(
				АдресДанныхРасшифровки, 
				Расшифровка, 
				ПараметрВыполненногоДействия
			);
			
			ОбработатьРасшифровкуОтчетаВыручкаИСебестоимостьПродаж(ОписаниеОбработкиРасшифровки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРасшифровкуОтчетаВыручкаИСебестоимостьПродаж(ОписаниеОбработкиРасшифровки)
	
	ИмяОтчета = "ПрайсЛист";
	
	ОтчетОбъект = РеквизитФормыВЗначение(ИмяОтчета);
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникДоступныхНастроек);
	
	РезультирующиеНастройки = ОбработкаРасшифровки.ПрименитьНастройки(
		ОписаниеОбработкиРасшифровки.Идентификатор,
		ОписаниеОбработкиРасшифровки.ПрименяемыеНастройки
	);
	
	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(РезультирующиеНастройки);
	
	// Получить таблицу для вывода отчета.
	ТаблицаРезультатаОтчета = ТаблицаРезультатаОтчета(ИмяОтчета);
	ТаблицаРезультатаОтчета.Очистить();
	
	// Вывести отчет.
	ОтчетОбъект.СкомпоноватьРезультат(ТаблицаРезультатаОтчета, ДанныеРасшифровки);
	
	АдресДанныхРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, УникальныйИдентификатор);
	
КонецПроцедуры
