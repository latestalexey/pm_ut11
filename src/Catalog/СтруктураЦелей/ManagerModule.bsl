#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Помещает во временное хранилище схему компоновки данных,
// настройки компоновки данных и возвращает их адреса
//
// Параметры:
//	ЦельСсылка - Ссылка, СправочникСсылка.СтруктураЦелей - цель, для которой требуется получить адреса
//
// Возвращаемое значение:
//	Структура - структура, содержащая адреса
//				СхемаКомпоновкиДанных - Строка - адрес схемы компоновки данных
//				НастройкиКомпоновкиДанных - Строка - адрес настроек компоновки данных
//
Функция АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(ЭлементСтруктурыЦелей) Экспорт
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	Если ТипЗнч(ЭлементСтруктурыЦелей) = Тип("ДанныеФормыСтруктура") Тогда
		ЭлементСтруктурыЦелейСсылка = ЭлементСтруктурыЦелей.Ссылка;
	Иначе
		ЭлементСтруктурыЦелейСсылка = ЭлементСтруктурыЦелей;
	КонецЕсли;
	
	// Получим схему компоновки данных
	Если ЗначениеЗаполнено(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных) ИЛИ ЭлементСтруктурыЦелейСсылка.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено Тогда
		СхемаИНастройки = ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЭлементСтруктурыЦелейСсылка, ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ЭлементСтруктурыЦелейСсылка.ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено И ПустаяСтрока(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных) Тогда
		СхемаКомпоновкиДанных = Справочники.СтруктураЦелей.ПолучитьМакет("ШаблоннаяСхемаКомпоновкиДанныхПредопределенный");
	ИначеЕсли СхемаКомпоновкиДанных = Неопределено И Не ПустаяСтрока(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных) Тогда
		СхемаКомпоновкиДанных = Справочники.СтруктураЦелей.ПолучитьМакет(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных);
	КонецЕсли;
	
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	Настройки = ЭлементСтруктурыЦелейСсылка.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	Если ЗначениеЗаполнено(Настройки) Тогда
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции

// Возвращает поля-ресурсы, доступные для выбора пользователем
//
// Параметры:
//	ЦельСсылка - Ссылка, СправочникСсылка.СтруктураЦелей - цель, для которой требуется получить поля-ресурсы
//
// Возвращаемое значение:
//	СписокЗначений - список, доступных пользователю полей-ресурсов (имя и синоним)
//
Функция ДоступныеЗначенияАнализа(ЦельСсылка) Экспорт 
	
	СписокДоступныхЗначений = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ЦельСсылка.СхемаКомпоновкиДанных) ИЛИ ЦельСсылка.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено Тогда
		СхемаИНастройки = ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЦельСсылка, ЦельСсылка.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ЦельСсылка.ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Настройки = ЦельСсылка.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Если НЕ Настройки = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	ДоступныеПоля = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы;
	
	СлужебныеПоля = СлужебныеПоляЗначенияАнализа();
	
	Для Каждого ДоступноеПоле Из ДоступныеПоля Цикл 
		Если НЕ ДоступноеПоле.Ресурс 
			ИЛИ НЕ СлужебныеПоля.Найти(Строка(ДоступноеПоле.Поле)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокДоступныхЗначений.Добавить(ДоступноеПоле.Поле, ДоступноеПоле.Заголовок);
		
	КонецЦикла;
	
	Возврат СписокДоступныхЗначений;
	
КонецФункции

// Возвращает поля-измерения, доступные для выбора пользователем
//
// Параметры:
//	ЦельСсылка - Ссылка, СправочникСсылка.СтруктураЦелей - цель, для которой требуется получить поля-измерения
//
// Возвращаемое значение:
//	СписокЗначений - список, доступных пользователю полей-измерений (имя и синоним)
//
Функция ДоступныеОбъектыАнализа(ЦельСсылка) Экспорт 
	
	СписокДоступныхОбъектов = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ЦельСсылка.СхемаКомпоновкиДанных) ИЛИ ЦельСсылка.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено Тогда
		СхемаИНастройки = ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЦельСсылка, ЦельСсылка.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ЦельСсылка.ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Настройки = ЦельСсылка.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Если НЕ Настройки = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	ДоступныеПоля = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы;
	
	СлужебныеПоля = СлужебныеПоляОбъектаАнализа();
	
	Для Каждого ДоступноеПоле Из ДоступныеПоля Цикл 
		Если ДоступноеПоле.Ресурс 
			ИЛИ НЕ СлужебныеПоля.Найти(Строка(ДоступноеПоле.Поле)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокДоступныхОбъектов.Добавить(ДоступноеПоле.Поле, ДоступноеПоле.Заголовок);
		
	КонецЦикла;
	
	Возврат СписокДоступныхОбъектов;
	
КонецФункции

// Функция возвращает структуру с синонимом и схемой компоновки данных по имени макета
//
// Параметры:
//	ЦельСсылка - Ссылка, СправочникСсылка.СтруктураЦелей - цель, для которой требуется получить схему
//	ИмяМакета - Строка, Неопределено - имя получаемого макета схемы компоновки данных
//
// Возвращаемое значение:
//	Структура - Описание - Строка - синоним получаемого макета
//				СхемаКомпоновкиДанных - СхемаКомпоновкиДанных, Неопределено - найденная схема компоновки данных
//				НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных, Неопределено - найденные настройки компоновки данных
//
Функция ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЦельСсылка, ИмяМакета = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Описание",                  "");
	ВозвращаемоеЗначение.Вставить("СхемаКомпоновкиДанных",     Неопределено);
	ВозвращаемоеЗначение.Вставить("НастройкиКомпоновкиДанных", Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтруктураЦелей.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	СтруктураЦелей.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных 
	|ИЗ
	|	Справочник.СтруктураЦелей КАК СтруктураЦелей
	|ГДЕ
	|	СтруктураЦелей.Ссылка = &ЦельСсылка");
	
	Запрос.УстановитьПараметр("ЦельСсылка", ЦельСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		
		ВозвращаемоеЗначение.Описание = ИмяМакета;
		Если Выборка.Следующий() Тогда
			ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Выборка.ХранилищеСхемыКомпоновкиДанных.Получить();
			ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
		КонецЕсли;
		
	Иначе
		
		Макет = Метаданные.НайтиПоТипу(ТипЗнч(ЦельСсылка)).Макеты.Найти(ИмяМакета);
		Если НЕ Макет = Неопределено Тогда
			ВозвращаемоеЗначение.Описание = Макет.Синоним;
			ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Справочники.СтруктураЦелей.ПолучитьМакет(ИмяМакета);
			Если Выборка.Следующий() Тогда
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных.Получить();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает пользовательские настройки по умолчанию для целевых показателей 
//
// Параметры:
//	ЦельСсылка - Ссылка, СправочникСсылка.СтруктураЦелей - цель, для которой требуется получить настройки
//
// Возвращаемое значение:
//	ПользовательскиеНастройкиКомпоновкиДанных - пользовательские настройки по умолчанию
//
Функция ПользовательскиеНастройкиПоУмолчанию(ЦельСсылка) Экспорт
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	// Получим схему компоновки данных
	Если ЗначениеЗаполнено(ЦельСсылка.СхемаКомпоновкиДанных) ИЛИ ЦельСсылка.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено Тогда
		СхемаИНастройки = Справочники.СтруктураЦелей.ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЦельСсылка, ЦельСсылка.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ЦельСсылка.ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Настройки = ЦельСсылка.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
		
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Если НЕ Настройки = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	// Заполним обязательный параметр ВалютаРасчета для СКД где он есть и не заполнен
	ПараметрВалютаРасчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, НСтр("ru='ВалютаРасчета'"));
	Если НЕ ПараметрВалютаРасчета = Неопределено И ПараметрВалютаРасчета.Значение = Справочники.Валюты.ПустаяСсылка() Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, НСтр("ru='ВалютаРасчета'"), МониторингЦелевыхПоказателей.ПолучитьВалютуПоУмолчанию(), Истина);
	КонецЕсли;
	
	Возврат КомпоновщикНастроек.ПользовательскиеНастройки;
	
КонецФункции

// Возвращает служебные поля-ресурсы, недоступные для выбора пользователем
//
// Возвращаемое значение:
//	Массив - массив служебных полей-ресурсов
//
Функция СлужебныеПоляЗначенияАнализа() Экспорт
	
	СлужебныяПоля = Новый Массив;
	
	СлужебныяПоля.Добавить("ЦелевоеЗначение");
	СлужебныяПоля.Добавить("ЦелевойДиапазонМаксимум");
	СлужебныяПоля.Добавить("ЦелевойДиапазонМинимум");
	СлужебныяПоля.Добавить("ГраничноеНегативноеОтклонение");
	СлужебныяПоля.Добавить("ГраничноеПозитивноеОтклонение");
	СлужебныяПоля.Добавить("ПриведенноеГраничноеНегативноеОтклонение");
	СлужебныяПоля.Добавить("ПриведенноеГраничноеПозитивноеОтклонение");
	
	Возврат СлужебныяПоля;
	
КонецФункции

// Возвращает служебные поля-измерения, недоступные для выбора пользователем
//
// Возвращаемое значение:
//	Массив - массив служебных полей-измерений
//
Функция СлужебныеПоляОбъектаАнализа() Экспорт
	
	СлужебныяПоля = Новый Массив;
	
	СлужебныяПоля.Добавить("ВидОтклоненияОтЦелевогоЗначения");
	СлужебныяПоля.Добавить("ВидЦелевогоЗначения");
	СлужебныяПоля.Добавить("ДатаЦелевыхЗначений");
	СлужебныяПоля.Добавить("Период");
	СлужебныяПоля.Добавить("СистемныеПоля");
	СлужебныяПоля.Добавить("ПараметрыДанных");
	
	Возврат СлужебныяПоля;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Прочее

Функция ШаблоныСхемыКомпоновкиДанных() Экспорт
	
	Шаблоны = Новый Массив;
	
	Для каждого Макет из Метаданные.Справочники.СтруктураЦелей.Макеты Цикл
		
		Если Макет.ТипМакета <> Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Шаблоны.Добавить(Новый Структура("Имя, Синоним", Макет.Имя, Макет.Синоним));
		
	КонецЦикла;
	
	Возврат Шаблоны;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

Процедура ПослеЗагрузкиДанныхИзДругойМодели() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЦелей.Ссылка,
	|	СтруктураЦелей.СхемаКомпоновкиДанных
	|ИЗ
	|	Справочник.СтруктураЦелей КАК СтруктураЦелей";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Выборка.СхемаКомпоновкиДанных) Тогда
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СправочникОбъект.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения("");
			СправочникОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения("");
			
			СправочникОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


#КонецЕсли