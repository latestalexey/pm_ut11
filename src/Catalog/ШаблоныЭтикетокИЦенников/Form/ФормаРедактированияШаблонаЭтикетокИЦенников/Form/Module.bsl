
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров);
	Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение", Новый Структура)
		 Или ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранениеСправочно", Новый Структура) Тогда
		Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляСкладскихЯчеек);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаСерииНоменклатуры);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ЗначениеКопирования = Неопределено;
		Параметры.Свойство("ЗначениеКопирования", ЗначениеКопирования);
		
		Если Не ЗначениеЗаполнено(ЗначениеКопирования) Тогда
			
			ИмяМакета = Параметры.ИмяМакета;
			Если ЗначениеЗаполнено(Параметры.Назначение) Тогда
				Объект.Назначение = Параметры.Назначение;
			КонецЕсли;
			Если ЗначениеЗаполнено(Параметры.Высота) Тогда
				Объект.Высота = Параметры.Высота;
			КонецЕсли;
			Если Параметры.Ширина > 0 Тогда
				Объект.Ширина = Параметры.Ширина;
			КонецЕсли;
			Если ЗначениеЗаполнено(Параметры.Наименование) Тогда
				Объект.Наименование = Параметры.Наименование;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
				УстановитьРазмер(Объект.Ширина, Объект.Высота, Объект.РазмерЯчейки);
			КонецЕсли;
			
			ЗаполнитьДоступныеПоля();
			НастроитьШаблон();
			
		Иначе
			
			ЗаполнитьДоступныеПоля();
			ЗагрузитьШаблон();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийРазмер = ТекущийРазмерСтраницы(ЭтаФорма);
	РазмерСтраницы = ТекущийРазмер;
	
	ОбновитьЗаголовок(ЭтаФорма);
	НазначениеПриИзмененииСервер(Ложь);
	
	Коды = ПолучитьКоды();
	Для Каждого СтрокаТЧ Из Коды Цикл
		СписокТипыКодов.Добавить(СтрокаТЧ.ТипКода, СтрокаТЧ.Наименование);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьОбработчикОжидания("ОбновитьРазмещение", 1, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_ШаблоныЭтикетокИЦенников", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьДоступныеПоля();
	
	ЗагрузитьШаблон();

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	РассчитатьМаксимальноеКоличествоНаСтранице();
	
	Если НЕ ПроверитьУмещение() Тогда
		Отказ = Истина;
	Иначе
		ТекущийОбъект.Шаблон = Новый ХранилищеЗначения(ПодготовитьСтруктуруМакетаШаблона());
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	ОбновитьЗаголовок(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеПоляВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЭтаФорма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;

	Модифицированность = Истина;
	ВыборДоступногоПоля(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТекстПриИзменении(Элемент)
	Элементы.РазмерШрифта.Доступность = ОтображатьТекст;
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	НазначениеПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ШиринаПриИзменении(Элемент)
	УстановитьРазмер(Объект.Ширина, Объект.Высота, Объект.РазмерЯчейки);
КонецПроцедуры

&НаКлиенте
Процедура ВысотаПриИзменении(Элемент)
	УстановитьРазмер(Объект.Ширина, Объект.Высота, Объект.РазмерЯчейки);
КонецПроцедуры

&НаКлиенте
Процедура РазмерЯчейкиПриИзменении(Элемент)
	УстановитьРазмер(Объект.Ширина, Объект.Высота, Объект.РазмерЯчейки);
КонецПроцедуры

&НаКлиенте
Процедура НазначениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ СВОЙСТВА ЯЧЕЕК

&НаКлиенте
Процедура СвойстваЯчеекЗначениеПриИзменении(Элемент)
	
	ВыделеннаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
	ТекущиеДанные = Элементы.СвойстваЯчеек.ТекущиеДанные;
	
	Если ТипЗнч(ВыделеннаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства] = ТекущиеДанные.Значение;
		УстановитьТекущийЭлемент = Неопределено;
	ИначеЕсли ТипЗнч(ВыделеннаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		
		Если ТекущиеДанные.ИмяСвойства = "ТипКода" Тогда
			
			Для Каждого КлючИЗначение Из СписокТипыКодов Цикл
				Представление = КлючИЗначение.Представление;
				Если ТекущиеДанные.Значение = Представление Тогда
					ТипКода = КлючИЗначение.Значение;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТекущиеДанные.ИмяСвойства = "РазмерШрифта" Тогда
			РазмерШрифта = ТекущиеДанные.Значение;
		ИначеЕсли ТекущиеДанные.ИмяСвойства = "ОтображатьТекст" Тогда
			ОтображатьТекст = ТекущиеДанные.Значение;
		Иначе
			ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства] = ТекущиеДанные.Значение;
		КонецЕсли;
		
		Имя = ВыделеннаяОбласть.Имя;
		Индекс = ЗаменитьРисунокШтрихкода(Имя);
		ПолеТабличногоДокумента.Рисунки[Индекс].Имя = Имя;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЯчеекЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыделеннаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
	ТекущиеДанные = Элементы.СвойстваЯчеек.ТекущиеДанные;
	
	Если ТипЗнч(ВыделеннаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
	
		Если Найти(ТекущиеДанные.ИмяСвойства, "Граница") > 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			НастроитьЛинию(ВыделеннаяОбласть, ТекущиеДанные);
			
		КонецЕсли;
		
		Если Найти(ТекущиеДанные.ИмяСвойства, "Формат") > 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			Конструктор = Новый КонструкторФорматнойСтроки;
			Результат = Конструктор.ОткрытьМодально();
			Если Результат Тогда
				ТекущиеДанные.Значение = Конструктор.Текст;
				ВыделеннаяОбласть.Формат = Конструктор.Текст;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Найти(ТекущиеДанные.ИмяСвойства, "Заполнение") > 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			СписокЗначений = Новый СписокЗначений;
			СписокЗначений.Добавить(ТипЗаполненияОбластиТабличногоДокумента.Параметр);
			СписокЗначений.Добавить(ТипЗаполненияОбластиТабличногоДокумента.Текст);
			СписокЗначений.Добавить(ТипЗаполненияОбластиТабличногоДокумента.Шаблон);
			ЭлементСписка = ВыбратьИзСписка(СписокЗначений, Элементы.СвойстваЯчеекЗначение);
			Если ЭлементСписка <> Неопределено Тогда
				ТекущиеДанные.Значение = Строка(ЭлементСписка.Значение);
				ВыделеннаяОбласть.Заполнение = ЭлементСписка.Значение;
			КонецЕсли;
			ЗаполнитьТаблицуСвойств();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыделеннаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		
		Если Найти(ТекущиеДанные.ИмяСвойства, "Линия") > 0 Тогда
			
			СтандартнаяОбработка = Ложь;
			НастроитьЛинию(ВыделеннаяОбласть, ТекущиеДанные);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваЯчеекПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СвойстваЯчеек.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ТОгда
		Возврат;
	КонецЕсли;
	
	Элементы.СвойстваЯчеекЗначение.СписокВыбора.Очистить();
	
	ЭтоСтрокаСТипомКода = Найти(ТекущиеДанные.ИмяСвойства, "ТипКода") > 0;
	ЭтоСтрокаГраница = Найти(ТекущиеДанные.ИмяСвойства, "Граница") > 0;
	ЭтоСтрокаЛиния = Найти(ТекущиеДанные.ИмяСвойства, "Линия") > 0;
	
	Если ЭтоСтрокаСТипомКода Тогда
		
		Для Каждого ЭлементСписка Из СписокТипыКодов Цикл
			Элементы.СвойстваЯчеекЗначение.СписокВыбора.Добавить(ЭлементСписка.Представление);
		КонецЦикла;
		
		Элементы.СвойстваЯчеекЗначение.РежимВыбораИзСписка = Истина;
		Элементы.СвойстваЯчеекЗначение.КнопкаСпискаВыбора = Ложь;
		
	Иначе
		
		Элементы.СвойстваЯчеекЗначение.РежимВыбораИзСписка = Ложь;
		Элементы.СвойстваЯчеекЗначение.КнопкаСпискаВыбора = Ложь;
		
	КонецЕсли;
	
	Элементы.СвойстваЯчеекЗначение.РедактированиеТекста =  Не (ЭтоСтрокаГраница ИЛи ЭтоСтрокаСТипомКода ИЛИ ЭтоСтрокаЛиния);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Объединить(Команда)
	
	Если ПолеТабличногоДокумента.ВыделенныеОбласти.Количество() = 1
		И ТипЗнч(ПолеТабличногоДокумента.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ТекущаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
		ОбъединитьОбласть(ТекущаяОбласть.Имя);
		
	Иначе
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Некорректная область!'");
		Сообщение.Поле = "ПолеТабличногоДокумента";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Разъединить(Команда)
	
	Если ПолеТабличногоДокумента.ВыделенныеОбласти.Количество() = 1
		И ТипЗнч(ПолеТабличногоДокумента.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		ТекущаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
		РазъединитьОбласть(ТекущаяОбласть.Имя);
		
	Иначе
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Некорректная область!'");
		Сообщение.Поле = "ПолеТабличногоДокумента";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	ТекущаяСтрока = Элементы.ДоступныеПоляКомпоновкиДанных.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ВыборДоступногоПоля(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбластьПечати(Команда)
	
	Если (ПолеТабличногоДокумента.ВыделенныеОбласти[0].Лево <> 0 И ПолеТабличногоДокумента.ВыделенныеОбласти[0].Верх <> 0)
		И ПолеТабличногоДокумента.ВыделенныеОбласти.Количество() = 1
		И ТипЗнч(ПолеТабличногоДокумента.ВыделенныеОбласти[0]) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		УстановитьОбластьПечатиНаСервере(ПолеТабличногоДокумента.ВыделенныеОбласти[0].Имя);
		
	Иначе
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Некорректная область печати'");
		Сообщение.Поле = "ПолеТабличногоДокумента";
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьОбразец(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.ДляЧего) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Для чего""'"),,"Объект.ДляЧего");
		Возврат;
	КонецЕсли;
	
	Если Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров") Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников",
			"ЦенникТовары",
			ПолучитьПараметрыДляПечатиОбразцаЦенникаТовара(),
			Неопределено
		);
		
	ИначеЕсли Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров") Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников",
			"ЭтикеткаТовары",
			ПолучитьПараметрыДляПечатиОбразцаЭтикеткиТовара(),
			Неопределено
		);
		
	ИначеЕсли Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляСкладскихЯчеек") Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников",
			"ЭтикеткаСкладскиеЯчейки",
			ПолучитьПараметрыДляПечатиОбразцаЭтикеткиСкладскойЯчейки(),
			Неопределено,
		);
		
	ИначеЕсли Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки") Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников",
			"ЭтикеткаДоставки",
			ПолучитьПараметрыДляПечатиОбразцаЭтикеткиДоставки(),
			Неопределено
		);
		
	ИначеЕсли Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаСерииНоменклатуры") Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			"Обработка.ПечатьЭтикетокИЦенников",
			"ЭтикеткаСерииНоменклатуры",
			ПолучитьПараметрыДляПечатиОбразцаЭтикеткиСерииНоменклатуры(),
			Неопределено
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеВертикальноеВерх(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Предупреждение(НСтр("ru = 'Операция может быть выполнена только над ячейкой табличного документа!'"));
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.ТекущаяОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеВертикальноеЦентр(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Предупреждение(НСтр("ru = 'Операция может быть выполнена только над ячейкой табличного документа!'"));
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.ТекущаяОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеВертикальноеНиз(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Предупреждение(НСтр("ru = 'Операция может быть выполнена только над ячейкой табличного документа!'"));
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.ТекущаяОбласть.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеГоризонтальноеЛево(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Предупреждение(НСтр("ru = 'Операция может быть выполнена только над ячейкой табличного документа!'"));
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеГоризонтальноеЦентр(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Предупреждение(НСтр("ru = 'Операция может быть выполнена только над ячейкой табличного документа!'"));
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыравниваниеГоризонтальноеПраво(Команда)
	
	Если ТипЗнч(ПолеТабличногоДокумента.ТекущаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Предупреждение(НСтр("ru = 'Операция может быть выполнена только над ячейкой табличного документа!'"));
		Возврат;
	КонецЕсли;
	
	ПолеТабличногоДокумента.ТекущаяОбласть.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
	
КонецПроцедуры

&НаКлиенте
Процедура Назначить(Команда)
	
	Форма = ПолучитьФорму("Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаНазначенияШаблонов", Новый Структура("Назначение, ДляЧего, Шаблон", Объект.Назначение, Объект.ДляЧего, Объект.Ссылка));
	Форма.ОткрытьМодально();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблон(Команда)
	
	ФормаВыбора = ПолучитьФорму("Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаВыбораШаблона", Новый Структура("Назначение", Объект.Назначение));
	ИмяШаблона = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(ИмяШаблона) Тогда
		
		Результат = Вопрос(НСтр("ru = 'Редактируемый шаблон будет заменен на шаблон по умолчанию, продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Если Результат = КодВозвратаДиалога.Да Тогда
			УстановитьШаблонПоУмолчанию(ИмяШаблона);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервереБезКонтекста
Функция ПолучитьКоды()
	
	Возврат Справочники.ШаблоныЭтикетокИЦенников.ПолучитьОбразцыШтрихкодов();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПараметраШтрихкод()
	
	Возврат "Штрихкод";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазмерСтраницы(ПолеТабличногоДокумента)
	
	ВысотаСтраницы = ПолеТабличногоДокумента.ВысотаСтраницы;
	ШиринаСтраницы = ПолеТабличногоДокумента.ШиринаСтраницы;
	
	Наименование = Строка(ШиринаСтраницы)+"х"+Строка(ВысотаСтраницы);
	
	Если ШиринаСтраницы = 210 И ВысотаСтраницы = 297 Тогда
		Наименование = "A4";
	ИначеЕсли ШиринаСтраницы = 148 И ВысотаСтраницы = 210 Тогда
		Наименование = "A5";
	ИначеЕсли ШиринаСтраницы = 105 И ВысотаСтраницы = 148 Тогда
		Наименование = "A6";
	ИначеЕсли ШиринаСтраницы = 74 И ВысотаСтраницы = 105 Тогда
		Наименование = "A7";
	ИначеЕсли ШиринаСтраницы = 52 И ВысотаСтраницы = 74 Тогда
		Наименование = "A8";
	ИначеЕсли ШиринаСтраницы = 37 И ВысотаСтраницы = 52 Тогда
		Наименование = "A9";
	ИначеЕсли ШиринаСтраницы = 26 И ВысотаСтраницы = 37 Тогда
		Наименование = "A10";
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЗаголовок(Форма)
	
	Наименование = Форма.Объект.Наименование;
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Наименование = НСтр("ru = '(Создание)'");
	КонецЕсли;
	
	Форма.Автозаголовок = Ложь;
	Если Форма.Объект.Назначение      = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров") Тогда
		Форма.Заголовок = "Шаблон этикетки:" + " " + Наименование;
	ИначеЕсли Форма.Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров") Тогда
		Форма.Заголовок = "Шаблон ценника:" + " "+ Наименование;
	ИначеЕсли Форма.Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляСкладскихЯчеек") Тогда
		Форма.Заголовок = "Шаблон этикетки:" + " " + Наименование;
	ИначеЕсли Форма.Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки") Тогда
		Форма.Заголовок = "Шаблон этикетки:" + " " + Наименование;
	ИначеЕсли Форма.Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаСерииНоменклатуры") Тогда
		Форма.Заголовок = "Шаблон этикетки:" + " " + Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьШаблон()
	
	СтруктураШаблона = СтруктураШаблона();
	
	Если СтруктураШаблона <> Неопределено Тогда
		// Загрузка шаблона.
		СтруктураШаблона.Свойство("РедакторТабличныйДокумент", ПолеТабличногоДокумента);
		СтруктураШаблона.Свойство("КоличествоПоВертикали"    , КоличествоПоВертикали);
		СтруктураШаблона.Свойство("КоличествоПоГоризонтали"  , КоличествоПоГоризонтали);
		СтруктураШаблона.Свойство("ТипКода"                  , ТипКода);
		СтруктураШаблона.Свойство("РазмерШрифта"             , РазмерШрифта);
		СтруктураШаблона.Свойство("ОтображатьТекст"          , ОтображатьТекст);
		
		Элементы.РазмерШрифта.Доступность = ОтображатьТекст;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьМаксимальноеКоличествоНаСтранице()
	
	МаксимальноеКоличество = МаксимальноеКоличествоЭтикетокНаСтранице();
	
	КоличествоПоВертикали   = МаксимальноеКоличество.ПоВертикали;
	КоличествоПоГоризонтали = МаксимальноеКоличество.ПоГоризонтали;
	
	ОписаниеРазмещенияДляЦенников = "На странице" + " "+ РазмерСтраницы(ПолеТабличногоДокумента) + " " + "помещается по вертикали:"
	+ " " + КоличествоПоВертикали
	+ ", "
	+ "по горизонтали:"
	+ " "
	+ КоличествоПоГоризонтали
	;
	
КонецПроцедуры

&НаСервере
Процедура НазначениеПриИзмененииСервер(ОчищатьНазначение = Истина)
	
	ОбновитьЗаголовок(ЭтаФорма);
	Элементы.ГруппаОписаниеРазмера.Видимость = Объект.Назначение = ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров");
	
	ЗаполнитьДоступныеПоля();
	
	МассивТипов = Новый Массив;
	Элементы.ДляЧего.ВыбиратьТип = Ложь;
	Если Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров
		ИЛИ Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров Тогда
		Если ОчищатьНазначение Тогда
			Объект.ДляЧего = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
		МассивТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляСкладскихЯчеек Тогда
		Если ОчищатьНазначение Тогда
			Объект.ДляЧего = Справочники.СкладскиеЯчейки.ПустаяСсылка();
		КонецЕсли;
		МассивТипов.Добавить(Тип("СправочникСсылка.СкладскиеЯчейки"));
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки Тогда
		Элементы.ДляЧего.ВыбиратьТип = Истина;
		Если ОчищатьНазначение Тогда
			Объект.ДляЧего = Неопределено;
		КонецЕсли;
		МассивТипов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		МассивТипов.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"));
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаСерииНоменклатуры Тогда
		Если ОчищатьНазначение Тогда
			Объект.ДляЧего = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		МассивТипов.Добавить(Тип("СправочникСсылка.СерииНоменклатуры"));
	КонецЕсли;
	Элементы.ДляЧего.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	
	РассчитатьМаксимальноеКоличествоНаСтранице();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьШаблонПоУмолчанию(ИмяШаблона)
	
	ШаблонПоУмолчанию = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьМакет(ИмяШаблона);
	
	ПолеТабличногоДокумента = ШаблонПоУмолчанию;
	
	Если ИмяШаблона = "ШаблонЭтикеткиСкладскиеЯчейки" Тогда 
		
		ТипКода                 = 4; // Code128
		ОтображатьТекст         = Ложь;
		РазмерШрифта            = 12;
		
	ИначеЕсли ИмяШаблона = "ШаблонЭтикеткиСерииНоменклатуры" Тогда	
		
		ТипКода                 = 4; // Code128
		ОтображатьТекст         = Истина;
		РазмерШрифта            = 12;
		
	Иначе
		
		ТипКода                 = 1; // EAN13
		ОтображатьТекст         = Истина;
		РазмерШрифта            = 12;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтруктураШаблона()
	
	СтруктураШаблона = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	СтруктураШаблона = Объект.Ссылка.Шаблон.Получить();
	Иначе
		ЗначениеКопирования = Неопределено;
		Параметры.Свойство("ЗначениеКопирования", ЗначениеКопирования);
		Если ЗначениеКопирования <> Неопределено Тогда
			СтруктураШаблона = ЗначениеКопирования.Шаблон.Получить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураШаблона;
	
КонецФункции

&НаСервере
Функция ПодготовитьСтруктуруМакетаШаблона()
	
	СтруктураМакетаШаблона = Справочники.ШаблоныЭтикетокИЦенников.ПодготовитьСтруктуруМакетаШаблона(ПолеТабличногоДокумента, Объект.Назначение);
	СтруктураМакетаШаблона.ТипКода          = ТипКода;
	СтруктураМакетаШаблона.РазмерШрифта     = РазмерШрифта;
	СтруктураМакетаШаблона.ОтображатьТекст  = ОтображатьТекст;
	Возврат СтруктураМакетаШаблона;
	
КонецФункции

&НаСервере
Функция ПроверитьУмещение()
	
	Ошибка = Ложь;
	
	МаксимальноеКоличество = МаксимальноеКоличествоЭтикетокНаСтранице();
	
	Если МаксимальноеКоличество.ПоГоризонтали > 0
		И КоличествоПоГоризонтали > МаксимальноеКоличество.ПоГоризонтали Тогда
		
		ТекстСообщения = НСтр("ru = 'Максимальное количество по горизонтали: %Количество%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", МаксимальноеКоличество.ПоГоризонтали);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"КоличествоПоГоризонтали",,Ошибка);
		
	КонецЕсли;	
	
	Если МаксимальноеКоличество.ПоВертикали > 0
		И КоличествоПоВертикали > МаксимальноеКоличество.ПоВертикали Тогда
		
		ТекстСообщения = НСтр("ru = 'Максимальное количество по вертикали: %Количество%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", МаксимальноеКоличество.ПоВертикали);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"КоличествоПоВертикали",,Ошибка);
		
	КонецЕсли;	
	
	Возврат НЕ Ошибка;
	
КонецФункции

&НаСервере
Функция  МаксимальноеКоличествоЭтикетокНаСтранице()
	
	Возврат Справочники.ШаблоныЭтикетокИЦенников.МаксимальноеКоличествоНаСтранице(ПолеТабличногоДокумента, Объект.Назначение);
	
КонецФункции

&НаСервере
Процедура УстановитьОбластьПечатиНаСервере(ИмяОбласти)
	
	ВыделеннаяОбласть = ПолеТабличногоДокумента.Область(ИмяОбласти);
	
	НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии, 0);
	РедкийПунктир = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
	
	Если ПолеТабличногоДокумента.ОбластьПечати <> Неопределено Тогда
		ПолеТабличногоДокумента.ОбластьПечати.Обвести(НетЛинии,НетЛинии,НетЛинии,НетЛинии);
	КонецЕсли;
	
	ПолеТабличногоДокумента.ОбластьПечати = ВыделеннаяОбласть;
	ПолеТабличногоДокумента.ОбластьПечати.Обвести(РедкийПунктир,РедкийПунктир,РедкийПунктир,РедкийПунктир);
	
	ПолеТабличногоДокумента.ОбластьПечати.АвтоВысотаСтроки = Ложь;
	
КонецПроцедуры

&НаСервере
Функция УстановитьКартинкуШтрихкода(РисунокШтрихкода)

	ВнешняяКомпонента = Обработки.ПечатьЭтикетокИЦенников.ПодключитьВнешнююКомпонентуПечатиШтрихкода();
	
	Эталон = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ПримерШтрихкода = Неопределено;
	Коды = ПолучитьКоды();
	Для Каждого СтрокаТЧ Из Коды Цикл
		Если СтрокаТЧ.ТипКода = ТипКода Тогда
			ПримерШтрихкода = СтрокаТЧ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина",          Окр(РисунокШтрихкода.Ширина / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Высота",          Окр(РисунокШтрихкода.Высота / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Штрихкод",        ПримерШтрихкода.Пример);
	ПараметрыШтрихкода.Вставить("ТипКода",         ПримерШтрихкода.ТипКода);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст", ОтображатьТекст);
	ПараметрыШтрихкода.Вставить("РазмерШрифта",    РазмерШрифта);
	
	РисунокШтрихкода.Картинка = Обработки.ПечатьЭтикетокИЦенников.ПолучитьКартинкуШтрихкода(ВнешняяКомпонента, ПараметрыШтрихкода);
	
КонецФункции

&НаСервере
Функция ВставитьРисунокШтрихкода(ИмяТекущейОбласти)
	
	РисунокШтрихкода = ПолеТабличногоДокумента.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Индекс = ПолеТабличногоДокумента.Рисунки.Индекс(РисунокШтрихкода);
	РисунокШтрихкода.Расположить(ПолеТабличногоДокумента.Область(ИмяТекущейОбласти));
	РисунокШтрихкода.Имя = ИмяПараметраШтрихкод()+СтрЗаменить(Новый УникальныйИдентификатор,"-","_");
	
	УстановитьКартинкуШтрихкода(ПолеТабличногоДокумента.Рисунки[Индекс]);
	
	Возврат Индекс;
	
КонецФункции

&НаСервере
Функция ЗаменитьРисунокШтрихкода(ИмяРисунка)
	
	РисунокШтрихкодаИсточник = Неопределено;
	Для Каждого Рисунок Из ПолеТабличногоДокумента.Рисунки Цикл
		Если Рисунок.Имя <> ИмяРисунка Тогда
			Продолжить;
		КонецЕсли;
		РисунокШтрихкодаИсточник = Рисунок;
		Прервать;
	КонецЦикла;
	
	РисунокШтрихкода = ПолеТабличногоДокумента.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	РисунокШтрихкода.Верх   = РисунокШтрихкодаИсточник.Верх;
	РисунокШтрихкода.Лево   = РисунокШтрихкодаИсточник.Лево;
	РисунокШтрихкода.Высота = РисунокШтрихкодаИсточник.Высота;
	РисунокШтрихкода.Ширина = РисунокШтрихкодаИсточник.Ширина;
	РисунокШтрихкода.Имя    = РисунокШтрихкодаИсточник.Имя;
	
	ПолеТабличногоДокумента.Рисунки.Удалить(РисунокШтрихкодаИсточник);
	
	Индекс = ПолеТабличногоДокумента.Рисунки.Индекс(РисунокШтрихкода);
	УстановитьКартинкуШтрихкода(ПолеТабличногоДокумента.Рисунки[Индекс]);
	
	Возврат Индекс;
	
КонецФункции

&НаСервере
Процедура ОбъединитьОбласть(ИмяОбласти)
	
	Область = ПолеТабличногоДокумента.Область(ИмяОбласти);
	Область.Объединить();
	
КонецПроцедуры

&НаСервере
Процедура РазъединитьОбласть(ИмяОбласти)
	
	Область = ПолеТабличногоДокумента.Область(ИмяОбласти);
	Область.Разъединить();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьШаблон()
	
	Если ЗначениеЗаполнено(ИмяМакета) Тогда
		УстановитьШаблонПоУмолчанию(ИмяМакета);
	Иначе
		ПолеТабличногоДокумента = Новый ТабличныйДокумент;
		ПолеТабличногоДокумента.ОбластьПечати = ПолеТабличногоДокумента.Область("R2C2:R20C5");
		РедкийПунктир = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.РедкийПунктир, 1);
		ПолеТабличногоДокумента.ОбластьПечати.Обвести(РедкийПунктир,РедкийПунктир,РедкийПунктир,РедкийПунктир);
		КоличествоПоГоризонтали = 1;
		КоличествоПоВертикали   = 1;
		ТипКода                 = 1; // EAN-13
		ОтображатьТекст         = Истина;
		РазмерШрифта            = 12;
		
		Элементы.ОтображатьТекст.Доступность = Истина;
		Элементы.ТипКода.Доступность         = Истина;
	КонецЕсли;
	
	Элементы.РазмерШрифта.Доступность = ОтображатьТекст;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоле(Коллекция, СтруктураПоля, Дерево)
	
	Результат = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураПоля, ",");
	ИмяПоля = Результат[0];
	Иерархия = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПоля, ".");
	
	Если Результат.Количество() = 2 Тогда
		Действия = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Результат[1], ";");
	Иначе
		Действия = Новый Массив;
	КонецЕсли;
	
	КоллекцияСтрокДерева = Дерево.Строки;
	КоллекцияПолейКомпоновки = Коллекция;
	НайденныйЭлементПолеКомпоновки = Неопределено;
	НайденныйЭлементДерева = Неопределено;
	ИмяЭлемента = "";
	ИмяЭлементаОписание = "";
	ИмяРодителя = "";
	ИмяРодителяОписание = "";
	Для Каждого ЭлементИерархии Из Иерархия Цикл
		
		ИмяРодителя = ?(ЗначениеЗаполнено(ИмяЭлемента), ИмяЭлемента + ".", "");
		ИмяЭлемента = ИмяРодителя + ЭлементИерархии;
		
		НайденныйЭлементПолеКомпоновки = КоллекцияПолейКомпоновки.Найти(ИмяЭлемента);
		Если НайденныйЭлементПолеКомпоновки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		КоллекцияПолейКомпоновки = НайденныйЭлементПолеКомпоновки.Элементы;
		
		ИмяРодителяОписание = ?(ЗначениеЗаполнено(ИмяЭлементаОписание), ИмяЭлементаОписание + ".", "");
		ИмяЭлементаОписание = ИмяРодителяОписание + НайденныйЭлементПолеКомпоновки.Заголовок;
		
		НайденныйЭлементДерева = КоллекцияСтрокДерева.Найти(ЭлементИерархии, "ИмяПоля");
		Если НайденныйЭлементДерева = Неопределено Тогда
			
			НайденныйЭлементДерева = КоллекцияСтрокДерева.Добавить();
			Если КоллекцияСтрокДерева.Родитель <> Неопределено Тогда
				КоллекцияСтрокДерева.Родитель.ИндексКартинки = 0;
			КонецЕсли;
			
			НайденныйЭлементДерева.ИмяПоля = ЭлементИерархии;
			НайденныйЭлементДерева.Описание = СтрЗаменить(НайденныйЭлементПолеКомпоновки.Заголовок, ИмяРодителяОписание, "");
			
		КонецЕсли;
		КоллекцияСтрокДерева = НайденныйЭлементДерева.Строки;
		
	КонецЦикла;
	
	НайденныйЭлементДерева.ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Если НайденныйЭлементДерева.Строки.Количество() > 0 Тогда
		НайденныйЭлементДерева.ИндексКартинки = 0;
	Иначе
		НайденныйЭлементДерева.ИндексКартинки = 7;
	КонецЕсли;
	НайденныйЭлементДерева.Описание = СтрЗаменить(НайденныйЭлементПолеКомпоновки.Заголовок, ИмяРодителяОписание, "");
	
	Если Действия.Найти("Свойства") <> Неопределено Тогда
		
		НаборыРеквизитовИСведений = Новый Массив;
		Если НайденныйЭлементПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("Номенклатура")
			И ЗначениеЗаполнено(Объект.ДляЧего) Тогда
			
			Если ЗначениеЗаполнено(Объект.ДляЧего.ВидНоменклатуры.НаборСвойств) Тогда
				НаборыРеквизитовИСведений.Добавить(Объект.ДляЧего.ВидНоменклатуры.НаборСвойств);
			КонецЕсли;
			
		ИначеЕсли НайденныйЭлементПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("Характеристика")
			И ЗначениеЗаполнено(Объект.ДляЧего) Тогда
			
			Если ЗначениеЗаполнено(Объект.ДляЧего.ВидНоменклатуры.НаборСвойствХарактеристик) Тогда
				НаборыРеквизитовИСведений.Добавить(Объект.ДляЧего.ВидНоменклатуры.НаборСвойствХарактеристик);
			КонецЕсли;
			
		ИначеЕсли НайденныйЭлементПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных("Серия")
			И ЗначениеЗаполнено(Объект.ДляЧего) Тогда
			
			Если ЗначениеЗаполнено(Объект.ДляЧего.ВидНоменклатуры.НаборСвойствСерий) Тогда
				НаборыРеквизитовИСведений.Добавить(Объект.ДляЧего.ВидНоменклатуры.НаборСвойствСерий);
			КонецЕсли;
			
		Иначе
			Для Каждого Тип Из НайденныйЭлементПолеКомпоновки.Тип.Типы() Цикл
				
				ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
				
				Для Каждого Характеристика Из ОбъектМетаданных.Характеристики Цикл
					Если НаборыРеквизитовИСведений.Найти(Характеристика.ЗначениеОтбораВидов) = Неопределено Тогда
						НаборыРеквизитовИСведений.Добавить(Характеристика.ЗначениеОтбораВидов);
					КонецЕсли;
				КонецЦикла
				
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого НаборСсылка Из НаборыРеквизитовИСведений Цикл
			Набор = НаборСсылка.ПолучитьОбъект();
			Для Каждого ДополнительныйРеквизит Из Набор.ДополнительныеРеквизиты Цикл
				НоваяСтрока = НайденныйЭлементДерева.Строки.Добавить();
				НоваяСтрока.ИндексКартинки = 1;
				НоваяСтрока.ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ИмяПоля+".["+ДополнительныйРеквизит.Свойство.Наименование+"]");
				НоваяСтрока.Описание = ДополнительныйРеквизит.Свойство.Наименование;
			КонецЦикла;
			Для Каждого ДополнительноеСведение Из Набор.ДополнительныеСведения Цикл
				НоваяСтрока = НайденныйЭлементДерева.Строки.Добавить();
				НоваяСтрока.ИндексКартинки = 2;
				НоваяСтрока.ПолеКомпоновкиДанных = Новый ПолеКомпоновкиДанных(ИмяПоля+".["+ДополнительноеСведение.Свойство.Наименование+"]");
				НоваяСтрока.Описание = ДополнительноеСведение.Свойство.Наименование;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеПоля()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение доступных полей
	Если Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляСкладскихЯчеек Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблонаСкладскиеЯчейки");
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблонаТовары");
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблонаТовары");
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблонаДоставка");
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаСерииНоменклатуры Тогда
		СхемаКомпоновкиДанных = Обработки.ПечатьЭтикетокИЦенников.ПолучитьМакет("ПоляШаблонаСерииНоменклатуры");
	КонецЕсли;
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВХранилище));
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляСкладскихЯчеек Тогда
		
		ИменаПолей = Новый Массив;
		ИменаПолей.Добавить("Штрихкод");
		
		ИменаПолей.Добавить("Ячейка");
		ИменаПолей.Добавить("Ячейка.Код");
		ИменаПолей.Добавить("Ячейка.Родитель");
		ИменаПолей.Добавить("Ячейка.Линия");
		ИменаПолей.Добавить("Ячейка.Наименование");
		ИменаПолей.Добавить("Ячейка.Позиция");
		ИменаПолей.Добавить("Ячейка.ПорядокОбхода");
		ИменаПолей.Добавить("Ячейка.РабочийУчасток");
		ИменаПолей.Добавить("Ячейка.Секция");
		ИменаПолей.Добавить("Ячейка.Владелец");
		ИменаПолей.Добавить("Ячейка.Стеллаж");
		ИменаПолей.Добавить("Ячейка.Ярус");
		
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЦенникДляТоваров
	      ИЛИ Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляТоваров Тогда
		
		ИменаПолей = Новый Массив;
		
		ИменаПолей.Добавить("Штрихкод");
		
		ИменаПолей.Добавить("ВидЦены");
		ИменаПолей.Добавить("ВидЦены.ВалютаЦены");
		ИменаПолей.Добавить("ВидЦены.Наименование");
		ИменаПолей.Добавить("ВидЦены.ЦенаВключаетНДС");
		ИменаПолей.Добавить("Цена");
		ИменаПолей.Добавить("ДатаПоследнегоИзмененияЦены");
		
		ИменаПолей.Добавить("ВидЦеныДополнительно");
		ИменаПолей.Добавить("ВидЦеныДополнительно.ВалютаЦены");
		ИменаПолей.Добавить("ВидЦеныДополнительно.Наименование");
		ИменаПолей.Добавить("ВидЦеныДополнительно.ЦенаВключаетНДС");
		ИменаПолей.Добавить("ЦенаДополнительно");
		ИменаПолей.Добавить("ДатаПоследнегоИзмененияЦеныДополнительно");
		
		ИменаПолей.Добавить("Номенклатура.Артикул");
		ИменаПолей.Добавить("Номенклатура.ВариантОформленияПродажи");
		ИменаПолей.Добавить("Номенклатура.Вес");
		ИменаПолей.Добавить("Номенклатура.ВестиУчетПоГТД");
		ИменаПолей.Добавить("Номенклатура.ВидНоменклатуры");
		ИменаПолей.Добавить("Номенклатура.Родитель");
		ИменаПолей.Добавить("Номенклатура.ЕдиницаИзмерения");
		ИменаПолей.Добавить("Номенклатура.Код");
		ИменаПолей.Добавить("Номенклатура.КодДляПоиска");
		ИменаПолей.Добавить("Номенклатура.Наименование");
		ИменаПолей.Добавить("Номенклатура.НаименованиеПолное");
		ИменаПолей.Добавить("Номенклатура.Объем");
		ИменаПолей.Добавить("Номенклатура.Производитель");
		ИменаПолей.Добавить("Номенклатура.СтавкаНДС");
		ИменаПолей.Добавить("Номенклатура.Описание");
		ИменаПолей.Добавить("Номенклатура.ТипНоменклатуры");
		ИменаПолей.Добавить("Номенклатура,Свойства");
		
		ИменаПолей.Добавить("Характеристика.Наименование");
		ИменаПолей.Добавить("Характеристика.НаименованиеПолное");
		ИменаПолей.Добавить("Характеристика.Владелец");
		ИменаПолей.Добавить("Характеристика,Свойства");
		
		ИменаПолей.Добавить("Весовой");
		ИменаПолей.Добавить("КодПодключаемогоОборудованияOffline");
		ИменаПолей.Добавить("Организация");
		ИменаПолей.Добавить("ТекущееВремя");
		ИменаПолей.Добавить("ТекущийПользователь");
		ИменаПолей.Добавить("УпаковкаЕдиницаИзмерения");
		
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки Тогда
		
		ИменаПолей = Новый Массив;
		ИменаПолей.Добавить("ВесНакладной");
		ИменаПолей.Добавить("ЕдиницаИзмеренияВеса");
		ИменаПолей.Добавить("ЕдиницаИзмеренияОбъема");
		ИменаПолей.Добавить("КоличествоПозиций");
		ИменаПолей.Добавить("ОбъемНакладной");
		ИменаПолей.Добавить("Распоряжение,Свойства");
		
		ИменаПолей.Добавить("Распоряжение.Автор");
		ИменаПолей.Добавить("Распоряжение.АдресДоставки");
		ИменаПолей.Добавить("Распоряжение.БанковскийСчетГрузоотправителя");
		ИменаПолей.Добавить("Распоряжение.БанковскийСчетГрузополучателя");
		ИменаПолей.Добавить("Распоряжение.БанковскийСчетКонтрагента");
		ИменаПолей.Добавить("Распоряжение.БанковскийСчетОрганизации");
		ИменаПолей.Добавить("Распоряжение.Валюта");
		ИменаПолей.Добавить("Распоряжение.ВалютаВзаиморасчетов");
		ИменаПолей.Добавить("Распоряжение.ВидЦены");
		ИменаПолей.Добавить("Распоряжение.ВидыЗапасов");
		ИменаПолей.Добавить("Распоряжение.Грузоотправитель");
		ИменаПолей.Добавить("Распоряжение.Грузополучатель");
		ИменаПолей.Добавить("Распоряжение.Дата");
		ИменаПолей.Добавить("Распоряжение.ДоверенностьДата");
		ИменаПолей.Добавить("Распоряжение.ДатаПлатежа");
		ИменаПолей.Добавить("Распоряжение.ДатаРаспоряжения");
		ИменаПолей.Добавить("Распоряжение.Договор");
		ИменаПолей.Добавить("Распоряжение.ОтпустилДолжность");
		ИменаПолей.Добавить("Распоряжение.КартаЛояльности");
		ИменаПолей.Добавить("Распоряжение.Касса");
		ИменаПолей.Добавить("Распоряжение.ДоверенностьВыдана");
		ИменаПолей.Добавить("Распоряжение.Партнер,Свойства");
		ИменаПолей.Добавить("Распоряжение.Комментарий");
		ИменаПолей.Добавить("Распоряжение.ДоверенностьЛицо");
		ИменаПолей.Добавить("Распоряжение.Менеджер");
		ИменаПолей.Добавить("Распоряжение.НалогообложениеНДС");
		ИменаПолей.Добавить("Распоряжение.Номер");
		ИменаПолей.Добавить("Распоряжение.ДоверенностьНомер");
		ИменаПолей.Добавить("Распоряжение.ХозяйственнаяОперация");
		ИменаПолей.Добавить("Распоряжение.Организация");
		ИменаПолей.Добавить("Распоряжение.Основание");
		ИменаПолей.Добавить("Распоряжение.Ответственный");
		ИменаПолей.Добавить("Распоряжение.Отпустил");
		ИменаПолей.Добавить("Распоряжение.Подразделение");
		ИменаПолей.Добавить("Распоряжение.Склад");
		ИменаПолей.Добавить("Распоряжение.СкладОтправитель");
		ИменаПолей.Добавить("Распоряжение.СкладПолучатель");
		ИменаПолей.Добавить("Распоряжение.Согласован");
		ИменаПолей.Добавить("Распоряжение.Соглашение");
		ИменаПолей.Добавить("Распоряжение.СуммаВзаиморасчетов");
		ИменаПолей.Добавить("Распоряжение.СуммаДокумента");
		ИменаПолей.Добавить("Распоряжение.СуммаПредоплаты");
		ИменаПолей.Добавить("Распоряжение.ФормаОплаты");
		ИменаПолей.Добавить("Распоряжение.ЦенаВключаетНДС");
		
	ИначеЕсли Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаСерииНоменклатуры Тогда
		
		ИменаПолей = Новый Массив;
		ИменаПолей.Добавить("Штрихкод");
		ИменаПолей.Добавить("Серия.ВидНоменклатуры");
		ИменаПолей.Добавить("Серия.ГоденДо");
		ИменаПолей.Добавить("Серия.Наименование");
		ИменаПолей.Добавить("Серия.Номер");
		
	КонецЕсли;

	Дерево = ДанныеФормыВЗначение(ДоступныеПоляКомпоновкиДанных, Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	Для Каждого ИмяПоля Из ИменаПолей Цикл
		ДобавитьПоле(КомпоновщикНастроек.Настройки.Порядок.ДоступныеПоляПорядка.Элементы, ИмяПоля, Дерево);
	КонецЦикла;
	ЗначениеВДанныеФормы(Дерево, ДоступныеПоляКомпоновкиДанных);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРазмер(ШиринаОбластиВМиллиметрах, ВысотаОбластиВМиллиметрах, РазмерЯчейкиВМиллиметрах)
	
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел;
	ПолеТабличногоДокумента.Очистить();
	
	КоличествоЯчеекПоШирине = Цел(ШиринаОбластиВМиллиметрах / РазмерЯчейкиВМиллиметрах);
	КоличествоЯчеекПоВысоте = Цел(ВысотаОбластиВМиллиметрах / РазмерЯчейкиВМиллиметрах);
	
	ШиринаДокумента = 1 + КоличествоЯчеекПоШирине;
	ВысотаДокумента = 1 + КоличествоЯчеекПоВысоте;
	
	Для НомерКолонки = 2 По ШиринаДокумента Цикл
		// Минимальный шаг установки ширины = 0.125
		// 1 ячейка при ширине 0.5 занимает 0,97 мм
		ИмяОбласти = "C" + НомерКолонки;
		ПолеТабличногоДокумента.Область(ИмяОбласти).ШиринаКолонки = 0.5 * РазмерЯчейкиВМиллиметрах;
	КонецЦикла;
	
	Для НомерСтроки = 2 По ВысотаДокумента Цикл
		// Минимальный шаг установки высоты = 0.25
		// 1 ячейка при ширине 2.75 занимает 0,97 мм
		ИмяОбласти = "R" + НомерСтроки;
		ПолеТабличногоДокумента.Область(ИмяОбласти).АвтоВысотаСтроки = Ложь;
		ПолеТабличногоДокумента.Область(ИмяОбласти).ВысотаСтроки = 2.75 * РазмерЯчейкиВМиллиметрах;
	КонецЦикла;

	ИмяОбластиПечати = "R2C2"+":"+"R"+Формат(ВысотаДокумента,"ЧГ=0")+"C"+Формат(ШиринаДокумента,"ЧГ=0");
	ПолеТабличногоДокумента.Область("R1C1:"+"R"+200+"C"+200).ЦветФона = WebЦвета.Серый;
	ПолеТабличногоДокумента.Область(ИмяОбластиПечати).ЦветФона = Новый Цвет;
	УстановитьОбластьПечатиНаСервере(ИмяОбластиПечати);
	
	ИндексКартинки = ВставитьРисунокШтрихкода(ИмяОбластиПечати);
	ФактическаяШиринаВМиллиметрах = ПолеТабличногоДокумента.Рисунки[ИндексКартинки].Ширина;
	ФактическаяВысотаВМиллиметрах = ПолеТабличногоДокумента.Рисунки[ИндексКартинки].Высота;
	
	// Выполним подгонку для более точного соответствия реальным значениям.
	НедостающаяШиринаВМиллиметрах = ШиринаОбластиВМиллиметрах - ФактическаяШиринаВМиллиметрах;
	КоличествоЯчеекДляИзмененияШирины = Цел(НедостающаяШиринаВМиллиметрах / ((ФактическаяШиринаВМиллиметрах/ШиринаОбластиВМиллиметрах) / (0.5 / 0.125)));
	
	Дельта = 0.125;
	Коэффициент = 1;
	КоличествоИзмененныхЯчеек = 0;
	Пока КоличествоЯчеекДляИзмененияШирины > 0 Цикл // -1 для того что бы не превысить реальные требуемые значения
		
		НомерКолонки = ГенераторСлучайныхЧисел.СлучайноеЧисло(2, ШиринаДокумента);
		ИмяОбласти = "C" + НомерКолонки;
		Если ПолеТабличногоДокумента.Область(ИмяОбласти).ШиринаКолонки = 0.5 * РазмерЯчейкиВМиллиметрах + Дельта * (Коэффициент - 1) Тогда
			ПолеТабличногоДокумента.Область(ИмяОбласти).ШиринаКолонки = 0.5 * РазмерЯчейкиВМиллиметрах + Дельта * Коэффициент;
			КоличествоЯчеекДляИзмененияШирины = КоличествоЯчеекДляИзмененияШирины - 1;
			
			КоличествоИзмененныхЯчеек = КоличествоИзмененныхЯчеек + 1;
		КонецЕсли;
		
		Если КоличествоИзмененныхЯчеек = КоличествоЯчеекПоШирине Тогда
			КоличествоИзмененныхЯчеек = 0;
			Коэффициент = Коэффициент + 1;
		КонецЕсли;
		
		Если КоличествоЯчеекДляИзмененияШирины = 0 Тогда
			ФактическаяШиринаВМиллиметрах = ПолеТабличногоДокумента.Рисунки[ИндексКартинки].Ширина;
			НедостающаяШиринаВМиллиметрах = ШиринаОбластиВМиллиметрах - ФактическаяШиринаВМиллиметрах;
			КоличествоЯчеекДляИзмененияШирины = Цел(НедостающаяШиринаВМиллиметрах / ((ФактическаяШиринаВМиллиметрах/ШиринаОбластиВМиллиметрах) / (0.5 / 0.125)));
		КонецЕсли;
		
	КонецЦикла;
	
	
	// Выполним подгонку для более точного соответствия реальным значениям.
	НедостающаяВысотаВМиллиметрах = ВысотаОбластиВМиллиметрах - ФактическаяВысотаВМиллиметрах;
	КоличествоЯчеекДляИзмененияВысоты = Цел(НедостающаяВысотаВМиллиметрах / ((ФактическаяВысотаВМиллиметрах/ВысотаОбластиВМиллиметрах) / (2.75 / 0.25)));
	
	Дельта = 0.25;
	Коэффициент = 1;
	КоличествоИзмененныхЯчеек = 0;
	Пока КоличествоЯчеекДляИзмененияВысоты > 0 Цикл // -1 для того что бы не превысить реальные требуемые значения
		
		НомерСтроки = ГенераторСлучайныхЧисел.СлучайноеЧисло(2, ВысотаДокумента);
		ИмяОбласти = "R" + НомерСтроки;
		Если ПолеТабличногоДокумента.Область(ИмяОбласти).ВысотаСтроки = 2.75 * РазмерЯчейкиВМиллиметрах + Дельта * (Коэффициент - 1) Тогда
			ПолеТабличногоДокумента.Область(ИмяОбласти).ВысотаСтроки = 2.75 * РазмерЯчейкиВМиллиметрах + Дельта * Коэффициент;
			КоличествоЯчеекДляИзмененияВысоты = КоличествоЯчеекДляИзмененияВысоты - 1;
			
			КоличествоИзмененныхЯчеек = КоличествоИзмененныхЯчеек + 1;
		КонецЕсли;
		
		Если КоличествоИзмененныхЯчеек = КоличествоЯчеекПоВысоте Тогда
			КоличествоИзмененныхЯчеек = 0;
			Коэффициент = Коэффициент + 1;
		КонецЕсли;
		
		Если КоличествоЯчеекДляИзмененияВысоты = 0 Тогда
			ФактическаяВысотаВМиллиметрах = ПолеТабличногоДокумента.Рисунки[ИндексКартинки].Высота;
			НедостающаяВысотаВМиллиметрах = ВысотаОбластиВМиллиметрах - ФактическаяВысотаВМиллиметрах;
			КоличествоЯчеекДляИзмененияВысоты = Цел(НедостающаяВысотаВМиллиметрах / ((ФактическаяВысотаВМиллиметрах/ВысотаОбластиВМиллиметрах) / (2.75 / 0.25)));
		КонецЕсли;
		
	КонецЦикла;
	
	ПолеТабличногоДокумента.Рисунки.Удалить(ПолеТабличногоДокумента.Рисунки[ИндексКартинки]);
	
	РассчитатьМаксимальноеКоличествоНаСтранице();
	
КонецПроцедуры

&НаСервере
Функция ДополнитьПараметрыДляПечатиОбразца(ПараметрыПечати)
	
	ПараметрыПечати.Вставить("СтруктураМакетаШаблона", ПодготовитьСтруктуруМакетаШаблона());
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(ПараметрыПечати);
	Возврат ПараметрКоманды;
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляПечатиОбразцаЭтикеткиТовара()
	
	ПараметрыПечати = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьПараметрыДляПечатиОбразцаЭтикеткиТовара(Объект.ДляЧего, ТипКода, УникальныйИдентификатор);
	Возврат ДополнитьПараметрыДляПечатиОбразца(ПараметрыПечати);
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляПечатиОбразцаЦенникаТовара()
	
	ПараметрыПечати = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьПараметрыДляПечатиОбразцаЦенникаТовара(Объект.ДляЧего, ТипКода, УникальныйИдентификатор);
	Возврат ДополнитьПараметрыДляПечатиОбразца(ПараметрыПечати);
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляПечатиОбразцаЭтикеткиСкладскойЯчейки()
	
	ПараметрыПечати = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьПараметрыДляПечатиОбразцаЭтикеткиСкладскойЯчейки(Объект.ДляЧего, ТипКода, УникальныйИдентификатор);
	Возврат ДополнитьПараметрыДляПечатиОбразца(ПараметрыПечати);
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляПечатиОбразцаЭтикеткиДоставки()
	
	ПараметрыПечати = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьПараметрыДляПечатиОбразцаЭтикеткиДоставки(Объект.ДляЧего, УникальныйИдентификатор);
	Возврат ДополнитьПараметрыДляПечатиОбразца(ПараметрыПечати);
	
КонецФункции

&НаСервере
Функция ПолучитьПараметрыДляПечатиОбразцаЭтикеткиСерииНоменклатуры()
	
	ПараметрыПечати = Справочники.ШаблоныЭтикетокИЦенников.ПолучитьПараметрыДляПечатиОбразцаЭтикеткиСерииНоменклатуры(Объект.ДляЧего, ТипКода, УникальныйИдентификатор);
	Возврат ДополнитьПараметрыДляПечатиОбразца(ПараметрыПечати);
	
КонецФункции

&НаКлиенте
Процедура ПолеТабличногоДокументаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	СтандартнаяОбработка = Ложь;
	
	ПодставитьПолеШаблона(Область, Элементы.ДоступныеПоляКомпоновкиДанных.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеЛинии(Линия)
	
	Возврат Строка(Линия.ТипЛинии) + ", " + Строка(Линия.Толщина);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуСвойств()
	
	ВыделеннаяОбласть = ПолеТабличногоДокумента.ТекущаяОбласть;
	СвойстваЯчеек.Очистить();
	
	//Элементы.ГруппаКомандыОбластиЯчеек.Доступность = ТипЗнч(ВыделеннаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента");
	
	Если ТипЗнч(ВыделеннаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Разделитель";
		НоваяСтрока.Представление = "Оформление";
		НоваяСтрока.Значение = "Разделитель";
		
		// Шрифт и цвет
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Шрифт";
		НоваяСтрока.Представление = "Шрифт";
		НоваяСтрока.Значение = ВыделеннаяОбласть.Шрифт;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ЦветФона";
		НоваяСтрока.Представление = "Цвет фона";
		НоваяСтрока.Значение = ВыделеннаяОбласть.ЦветФона;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ЦветТекста";
		НоваяСтрока.Представление = "Цвет текста";
		НоваяСтрока.Значение = ВыделеннаяОбласть.ЦветТекста;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ОриентацияТекста";
		НоваяСтрока.Представление = "Ориентация текста";
		НоваяСтрока.Значение = ВыделеннаяОбласть.ОриентацияТекста;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Разделитель";
		НоваяСтрока.Представление = "Границы";
		НоваяСтрока.Значение = "Разделитель";
		
		// Границы
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ГраницаСлева";
		НоваяСтрока.Представление = "Граница слева";
		НоваяСтрока.Значение = ПредставлениеЛинии(ВыделеннаяОбласть.ГраницаСлева);
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ГраницаСверху";
		НоваяСтрока.Представление = "Граница сверху";
		НоваяСтрока.Значение = ПредставлениеЛинии(ВыделеннаяОбласть.ГраницаСверху);
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ГраницаСправа";
		НоваяСтрока.Представление = "Граница справа";
		НоваяСтрока.Значение = ПредставлениеЛинии(ВыделеннаяОбласть.ГраницаСправа);
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "ГраницаСнизу";
		НоваяСтрока.Представление = "Граница снизу";
		НоваяСтрока.Значение = ПредставлениеЛинии(ВыделеннаяОбласть.ГраницаСнизу);
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Разделитель";
		НоваяСтрока.Представление = "Заполнение";
		НоваяСтрока.Значение = "Разделитель";
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Формат";
		НоваяСтрока.Представление = "Формат";
		НоваяСтрока.Значение = ВыделеннаяОбласть.Формат;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Заполнение";
		НоваяСтрока.Представление = "Заполнение";
		НоваяСтрока.Значение = ВыделеннаяОбласть.Заполнение;
		
		Если ВыделеннаяОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
			НоваяСтрока = СвойстваЯчеек.Добавить();
			НоваяСтрока.ИмяСвойства = "Параметр";
			НоваяСтрока.Представление = "Параметр";
			НоваяСтрока.Значение = ВыделеннаяОбласть.Параметр;
			Если НоваяСтрока.Значение = Неопределено Тогда
				НоваяСтрока.Значение = "";
			КонецЕсли;
		Иначе
			НоваяСтрока = СвойстваЯчеек.Добавить();
			НоваяСтрока.ИмяСвойства = "Текст";
			НоваяСтрока.Представление = "Текст";
			НоваяСтрока.Значение = ВыделеннаяОбласть.Текст;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыделеннаяОбласть) = Тип("РисунокТабличногоДокумента") Тогда
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Разделитель";
		НоваяСтрока.Представление = "Параметры штрихкода";
		НоваяСтрока.Значение = "Разделитель";
		
		Если Найти(ВыделеннаяОбласть.Имя, "Штрихкод") > 0 Тогда
			
			НоваяСтрока = СвойстваЯчеек.Добавить();
			НоваяСтрока.ИмяСвойства = "ТипКода";
			НоваяСтрока.Представление = "Тип кода";
			
			ЭлементСписка = СписокТипыКодов.НайтиПоЗначению(ТипКода);
			НоваяСтрока.Значение = ЭлементСписка.Представление;
			
			НоваяСтрока = СвойстваЯчеек.Добавить();
			НоваяСтрока.ИмяСвойства = "РазмерШрифта";
			НоваяСтрока.Представление = "Размер шрифта";
			НоваяСтрока.Значение = РазмерШрифта;
			
			НоваяСтрока = СвойстваЯчеек.Добавить();
			НоваяСтрока.ИмяСвойства = "ОтображатьТекст";
			НоваяСтрока.Представление = "Отображать текст";
			НоваяСтрока.Значение = ОтображатьТекст;
			
		КонецЕсли;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Имя";
		НоваяСтрока.Представление = "Имя";
		НоваяСтрока.Значение = ВыделеннаяОбласть.Имя;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Высота";
		НоваяСтрока.Представление = "Высота";
		НоваяСтрока.Значение = ВыделеннаяОбласть.Высота;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Ширина";
		НоваяСтрока.Представление = "Ширина";
		НоваяСтрока.Значение = ВыделеннаяОбласть.Ширина;
		
		НоваяСтрока = СвойстваЯчеек.Добавить();
		НоваяСтрока.ИмяСвойства = "Линия";
		НоваяСтрока.Представление = "Линия";
		НоваяСтрока.Значение = ПредставлениеЛинии(ВыделеннаяОбласть.Линия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеТабличногоДокументаПриАктивизацииОбласти(Элемент)
	
	ПодключитьОбработчикОжидания("ЗаполнитьТаблицуСвойств", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЛинию(ВыделеннаяОбласть, ТекущиеДанные)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипЛинии", ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства].ТипЛинии);
	ПараметрыФормы.Вставить("Толщина", ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства].Толщина);
	Результат = ОткрытьФормуМодально("Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаВыбораТипаЛинии", ПараметрыФормы);
	Если Результат <> Неопределено Тогда
		
		ВыделеннаяОбласть[ТекущиеДанные.ИмяСвойства] = Новый Линия(Результат.ТипЛинии, Результат.Толщина);
		ЗаполнитьТаблицуСвойств();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийРазмерСтраницы(Форма)
	
	ТекущийРазмер = 
	  "ПолеСверху:" + Форма.ПолеТабличногоДокумента.ПолеСверху
	+ "ПолеСнизу:" + Форма.ПолеТабличногоДокумента.ПолеСнизу
	+ "ПолеСлева:" + Форма.ПолеТабличногоДокумента.ПолеСлева
	+ "ПолеСправа:" + Форма.ПолеТабличногоДокумента.ПолеСправа
	+ "Размер:" + РазмерСтраницы(Форма.ПолеТабличногоДокумента);
	
	Возврат ТекущийРазмер;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьРазмещение()
	
	ТекущийРазмер = ТекущийРазмерСтраницы(ЭтаФорма);
	
	Если ТекущийРазмер <> РазмерСтраницы Тогда
		РазмерСтраницы = ТекущийРазмер;
		РассчитатьМаксимальноеКоличествоНаСтранице();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодставитьПолеШаблона(Область, ВыбраннаяСтрока)
	
	// Перед началом добавления необходимо выделить область в табличном документе.
	Если ТипЗнч(Область) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
		Предупреждение(НСтр("ru = 'Для переноса поля шаблона нужно выделить ячейку или область ячеек!'"));
		Возврат;
	Иначе
		ТекущаяОбласть = Область;
		ОбъединитьОбласть(ТекущаяОбласть.Имя);
	КонецЕсли;

	// Подготовка данных.
	ИмяПоляВШаблоне = Строка(ДоступныеПоляКомпоновкиДанных.НайтиПоИдентификатору(ВыбраннаяСтрока).ПолеКомпоновкиДанных);
	
	// Размещение поля в шаблоне.
	Если ИмяПоляВШаблоне = ИмяПараметраШтрихкод() Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Добавить штрихкод, как картинку?'"), РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ВставитьРисунокШтрихкода(ТекущаяОбласть.Имя);
			
		Иначе
			
			ТекущаяОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
			ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + "["+ИмяПоляВШаблоне+"]";
			
		КонецЕсли;
		
	Иначе
		
		ТекущаяОбласть.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон;
		ТекущаяОбласть.Текст = ТекущаяОбласть.Текст + "["+ИмяПоляВШаблоне+"]";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДоступногоПоля(ВыбраннаяСтрока)
	
	ПодставитьПолеШаблона(ПолеТабличногоДокумента.ТекущаяОбласть, ВыбраннаяСтрока);
	
КонецПроцедуры
