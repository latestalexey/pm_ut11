
&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)
	
	ОчиститьСообщения();
	ПараметрыСоглашения = ПараметрыСоглашения(ПараметрКоманды);
		
	Если ПараметрыСоглашения.СтатусСоглашения <> ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийЭД.Действует") Тогда
		ТекстСообщения = НСтр("ru = 'Обмен производится только по соглашениям со статусом Действует.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ПараметрКоманды, "Статус");
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСоглашения.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезЭлектроннуюПочту") Тогда
		
		Состояние(
				НСтр("ru = 'Тест настроек соглашения.'"),
				,
				НСтр("ru = 'Выполняется тестирование  обмена ЭД через электронную почту. Подождите...'"));
		ПроверитьШифрование(ПараметрыСоглашения);
		РаботаСПочтовымиСообщениямиКлиент.ПроверитьУчетнуюЗапись(ПараметрыСоглашения.РесурсВходящихДокументов);
		
	ИначеЕсли ПараметрыСоглашения.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезКаталог") Тогда

		
		Состояние(
				НСтр("ru = 'Тест настроек соглашения.'"),
				,
				НСтр("ru = 'Выполняется тестирование прямого обмена ЭД. Подождите...'"));
		ПроверитьШифрование(ПараметрыСоглашения);

		ТестСвязиПрямогоОбменаНаСервере(ПараметрКоманды);
		
	ИначеЕсли ПараметрыСоглашения.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезFTP") Тогда
		
		Состояние(
			НСтр("ru = 'Тест настроек соглашения.'"),
			,
			НСтр("ru = 'Выполняется тестирование обмена через FTP. Подождите...'"));
		ПроверитьШифрование(ПараметрыСоглашения);
		ТестСвязиОбменаЧерезFTPНаСервере(ПараметрКоманды);
		
	ИначеЕсли ПараметрыСоглашения.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
		
		// Блок проверки связи с оператором.
		Состояние(
				НСтр("ru = 'Тест настроек соглашения.'"),
				,
				НСтр("ru = 'Выполняется тестирование связи с оператором. Подождите...'"));
		
		ЗавершитьТесты = Ложь;
		
		// Блок проверки версии платформы.
		СистемнаяИнформация = Новый СистемнаяИнформация;
		
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, "8.2.15.301") < 0 Тогда
			РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("106");
			ЗавершитьТесты = Истина;
		КонецЕсли;
		ШаблонСообщения = НСтр("ru = 'Тест. Проверка версии платформы 1С.
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		// Критичная ошибка - дальше тесты не проводим.
		Если ЗавершитьТесты Тогда
			Возврат;
		КонецЕсли;

		ПарольПользователя = Неопределено;
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
			Контекст = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаСервере");
		Иначе
			Контекст = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаКлиенте");
		КонецЕсли;
		ЭлектронныеДокументыСлужебныйКлиент.ТестНастроекСертификата(ПараметрыСоглашения.СертификатАбонента,
																	Контекст,
																	ПарольПользователя);

		Если ПарольПользователя <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Тест. Проверка связи с сервисом Такском.'"));
			СтруктураПараметровЗапросаМаркера = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураПараметровЗапросаМаркера(
																								ПараметрКоманды);
			Если Контекст = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаКлиенте") Тогда
				ЭлектронныеДокументыСлужебныйКлиент.ТестСвязиСОператоромЭДО(СтруктураПараметровЗапросаМаркера, ПарольПользователя);
			Иначе
				ЭлектронныеДокументыСлужебныйВызовСервера.ТестСвязиСОператоромЭДО(
																СтруктураПараметровЗапросаМаркера,
																ПарольПользователя);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыСоглашения(Соглашение)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
								Соглашение,
								"СтатусСоглашения, СпособОбменаЭД, РесурсВходящихДокументов, СертификатАбонента, СертификатОрганизацииДляРасшифровки, Наименование");

КонецФункции

&НаСервере
Процедура ТестСвязиПрямогоОбменаНаСервере(ПараметрКоманды)
	
	// Блок проверки доступа к каталогам.
	ШаблонСообщения = НСтр("ru = 'Тест. Проверка доступа к каталогам обмена.
	|%1'");
	Попытка
		Файл = Новый Файл(ПараметрКоманды.РесурсВходящихДокументов);
		Если НЕ Файл.Существует() Тогда
			СоздатьКаталог(ПараметрКоманды.РесурсВходящихДокументов);
		КонецЕсли;
		
		Файл = Новый Файл(ПараметрКоманды.РесурсИсходящихДокументов);
		Если НЕ Файл.Существует() Тогда
			СоздатьКаталог(ПараметрКоманды.РесурсИсходящихДокументов);
		КонецЕсли;
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("105");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонРезультата, ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ТестСвязиОбменаЧерезFTPНаСервере(ПараметрКоманды)
	
	ЭлектронныеДокументыСлужебный.ТестСвязиОбменаЧерезFTP(ПараметрКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШифрование(ПараметрыСоглашения)
	
	Если ЗначениеЗаполнено(ПараметрыСоглашения.СертификатОрганизацииДляРасшифровки) Тогда
			
		ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.ПараметрыСертификата(
																				ПараметрыСоглашения.СертификатОрганизацииДляРасшифровки);
		
		// Для дальнейших операций необходим пароль сертификата.
		Если НЕ ПараметрыСертификата.ЗапомнитьПарольКСертификату Тогда
			ПараметрыФормы = Новый Структура(
											"Заголовок, ПредставлениеСертификата",
											НСтр("ru = 'Введите пароль для ЭЦП'"),
											ПараметрыСоглашения.СертификатОрганизацииДляРасшифровки);
			
			КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);
			
			Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
				ПарольПользователя = КодВозврата;
			КонецЕсли;
		Иначе
			
			ПарольПользователя = ПараметрыСертификата.ПарольПользователя;
		КонецЕсли;
		
		Если НЕ ПарольПользователя = Неопределено Тогда
			Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
				ПроверитьШифрованиеНаСервере(ПараметрыСертификата);
			Иначе
				ПроверитьШифрованиеНаКлиенте(ПараметрыСертификата);
			КонецЕсли
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШифрованиеНаКлиенте(ПараметрыСертификата)
	
	ШаблонСообщения = НСтр("ru = '%1
								 |%2'");
				
	// Блок проверки установленных криптосредств на компьютере.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка средства криптографии на компьютере.'");
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	Исключение
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		ШаблонРезультата = НСтр("ru = %1.
									 |%2'");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонРезультата,
															ТекстОшибки,
															КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		МенеджерКриптографии = Неопределено;
	КонецПопытки;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														ШаблонСообщения,
														ОписаниеТеста,
														РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	// Критичная ошибка - дальше тесты не проводим.
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Блок проверки шифрования/расшифрования.
	ОтпечатокСертификатаПодписи = ПараметрыСертификата.Отпечаток;
	Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОтпечатокСертификатаПодписи);
	
	// Критичная ошибка - дальше тесты не проводим(платформа падает).
	Если Сертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций шифрования/расшифровки.'");
	ОтпечатокДвоичныеДанные = Base64Значение(ОтпечатокСертификатаПодписи);
	ДвоичныеДанные = МенеджерКриптографии.Зашифровать(ОтпечатокДвоичныеДанные, Сертификат);
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
	КонецПопытки;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщения,
							ОписаниеТеста,
							РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

&НаСервере
Процедура ПроверитьШифрованиеНаСервере(ПараметрыСертификата)
	
	ШаблонСообщения = НСтр("ru = '%1
								 |%2'");
				
	// Блок проверки установленных криптосредств на компьютере.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка средства криптографии на сервере.'");
	Попытка
		МенеджерКриптографии = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМенеджерКриптографии();
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	Исключение
		ТекстОшибки = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("110");
		ШаблонРезультата = НСтр("ru = %1.
									 |%2'");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															ШаблонРезультата,
															ТекстОшибки,
															КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		МенеджерКриптографии = Неопределено;
	КонецПопытки;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														ШаблонСообщения,
														ОписаниеТеста,
														РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	// Критичная ошибка - дальше тесты не проводим.
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Блок проверки шифрования/расшифрования.
	ОтпечатокСертификатаПодписи = ПараметрыСертификата.Отпечаток;
	Сертификат = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСертификатПоОтпечатку(ОтпечатокСертификатаПодписи);
	
	// Критичная ошибка - дальше тесты не проводим(платформа падает).
	Если Сертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций шифрования/расшифровки.'");
	ОтпечатокДвоичныеДанные = Base64Значение(ОтпечатокСертификатаПодписи);
	ДвоичныеДанные = МенеджерКриптографии.Зашифровать(ОтпечатокДвоичныеДанные, Сертификат);
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("113");
	КонецПопытки;
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							ШаблонСообщения,
							ОписаниеТеста,
							РезультатТеста);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры