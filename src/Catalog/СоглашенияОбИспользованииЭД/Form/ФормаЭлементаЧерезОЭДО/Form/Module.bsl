////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаКлиенте
Процедура ОтправитьПриглашенияУчастникам(МассивЗаписей = Неопределено)
	
	Отказ = Ложь;
	ПарольПользователя = ПарольСертификата(Отказ);
	
	Если НЕ Отказ Тогда
		ОчиститьСообщения();
		
		ОтправленоПриглашений = 0;
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
			Маркер = Маркер(ПарольПользователя);
		КонецЕсли;
		ОтправитьПриглашенияНаСервере(МассивЗаписей, ПарольПользователя, ОтправленоПриглашений, Маркер);
		ЭтаФорма.Элементы.УчастникиОбменаЭД.Обновить();
		ТекстЗаголовка = НСтр("ru = 'Отправка приглашений участникам обмена ЭД'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , НСтр("ru = 'Отправлено приглашений: '") + ОтправленоПриглашений);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоглашениеДействует()
	
	ФлагСоглашениеДействует = (Объект.Ссылка.СтатусСоглашения = Перечисления.СтатусыСоглашенийЭД.Действует);
	Если НЕ ФлагСоглашениеДействует Тогда 
		ТекстСообщения = НСтр("ru='Операция возможна только для действующего соглашения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ФлагСоглашениеДействует;
	
КонецФункции

&НаКлиенте
Функция ДанныеФормыСохранены()
	
	ОчиститьСообщения();
	ДанныеСохранены = Истина;
	Если ЭтаФорма.Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Изменены настройки соглашения.
		|Записать соглашение?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да И ОбъектЗаполнен() Тогда
			ЭтаФорма.Записать();
		Иначе
			ТекстСообщения = Нстр("ru='Действие не выполнено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ДанныеСохранены = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеСохранены;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьКомандыПолученияКонтактов(АдресРесурса)
	
	Отказ = Ложь;
	ПарольПользователя = ПарольСертификата(Отказ);
	
	Если НЕ Отказ И НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
		Маркер = Маркер(ПарольПользователя);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		ДобавленоНовыхЗаписей = 0;
		ПолучитьПриглашенияНаСервере(АдресРесурса, ДобавленоНовыхЗаписей, ПарольПользователя, Маркер);
		ТекстЗаголовка = НСтр("ru = 'Обновление статусов участников обмена ЭД'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , НСтр("ru = 'Обновлено записей: '") + ДобавленоНовыхЗаписей);
	КонецЕсли;
	
	ЭтаФорма.Элементы.УчастникиОбменаЭД.Обновить();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыСертификата(СсылкаНаСертификат)
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаСертификат, "ЗапомнитьПарольКСертификату, ПарольПользователя");
	
КонецФункции

&НаКлиенте
Функция ПарольСертификата(Отказ)
	
	СертификатАвторизации = Объект.СертификатАбонента;
	
	ПараметрыСертификата = ПараметрыСертификата(СертификатАвторизации);
	
	Если ЗначениеЗаполнено(СертификатАвторизации) Тогда
	
		Если НЕ ПараметрыСертификата.ЗапомнитьПарольКСертификату Тогда
		
			ПараметрыФормы = Новый Структура("Заголовок, ПредставлениеСертификата",
				НСтр("ru = 'Введите пароль для ЭЦП'"), СертификатАвторизации);
			КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);
			
			Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
				ПарольПользователя = КодВозврата;
			Иначе
				Отказ = Истина;
			КонецЕсли;
		
		Иначе
			
			ПарольПользователя = ПараметрыСертификата.ПарольПользователя;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПарольПользователя;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьУчастника(Команда)
	
	Если НЕ СоглашениеЗаписано() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ДобавитьУчастникаОбменаЭД(Объект.Ссылка, ВыбранноеЗначение);
		Элементы.УчастникиОбменаЭД.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУчастникаОбменаЭД(СоглашениеОбИспользованииЭД, Участник)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.УчастникиОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СоглашениеОбИспользованииЭД.Установить(СоглашениеОбИспользованииЭД);
	НаборЗаписей.Отбор.Участник.Установить(Участник);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 Тогда
		
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СоглашениеОбИспользованииЭД = СоглашениеОбИспользованииЭД;
		НоваяЗаписьНабора.Участник                    = Участник;
		НоваяЗаписьНабора.Идентификатор               = "";
		НоваяЗаписьНабора.ФорматФайловОбменаЭД        = Перечисления.ФорматыФайловОбменаЭД.СоставнойФормат;
		НоваяЗаписьНабора.Статус                      = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
		НоваяЗаписьНабора.ДатаИзмененияСтатуса        = ТекущаяДатаСеанса();
		НоваяЗаписьНабора.АдресЭП                     = ЭлектронныеДокументыПереопределяемый.АдресЭлектроннойПочтыКонтрагента(
			Участник);
		НоваяЗаписьНабора.ВерсияРегламентаЭДО            = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФайлПриглашенияКОбменуЭД(ТЗ)
	
	ИмяФайла = "";
	ДопПараметры = Новый Структура;
	ИмяФайла = ЭлектронныеДокументыВнутренний.ИсходящийЗапросПриглашенияОператораЭДО(ТЗ, ДопПараметры);
	Возврат ИмяФайла;
	
КонецФункции

&НаСервере
Функция ОтправитьФайлПриглашение(ТЗ, ПарольПользователя, Маркер)
	
	ИмяФайла = ФайлПриглашенияКОбменуЭД(ТЗ);
	
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат 0;
	КонецЕсли;

	ПутьДляПриглашений = ЭлектронныеДокументыСлужебный.РабочийКаталог("Invite");
	ИмяФайлаПриглашения = ПутьДляПриглашений + "SendContacts.xml";
	КопироватьФайл(ИмяФайла, ИмяФайлаПриглашения);
	РезультатОтправки = ЭлектронныеДокументыВнутренний.ОтправитьЧерезОператораЭДО(
																Объект.Ссылка,
																ПутьДляПриглашений,
																"SendContacts",
																ПарольПользователя,
																Истина,
																Маркер);
	Возврат РезультатОтправки;
	
КонецФункции

&НаСервере
Процедура ОтправитьПриглашенияНаСервере(МассивЗаписей, ПарольПользователя, ОтправленоПриглашений, Маркер)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(МассивЗаписей) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УчастникиОбменовЭДЧерезОператоровЭДО.Участник
		|ИЗ
		|	РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
		|ГДЕ
		|	УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = &СоглашениеОбИспользованииЭД
		|	И УчастникиОбменовЭДЧерезОператоровЭДО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить)";
		Запрос.УстановитьПараметр("СоглашениеОбИспользованииЭД", Объект.Ссылка);
		МассивУчастников = Запрос.Выполнить().Выгрузить();
	Иначе
		МассивУчастников = Новый Массив;
		Для Каждого ТекущаяЗапись Из МассивЗаписей Цикл
			МассивУчастников.Добавить(ТекущаяЗапись.Участник);
		КонецЦикла;
	КонецЕсли;
	
	// Готовим таблицу с реквизитами контрагентов
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Участник");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("НаименованиеДляСообщенияПользователю");
	ТЗ.Колонки.Добавить("ИНН");
	ТЗ.Колонки.Добавить("КПП");
	ТЗ.Колонки.Добавить("АдресЭП");
	ТЗ.Колонки.Добавить("ВнешнийКод");
	
	ЭлектронныеДокументыПереопределяемый.ЗаполнитьРеквизитыКонтрагентовДляПриглашенияКОбмену(ТЗ, МассивУчастников, Объект.Ссылка);
	Для Каждого ТекущаяСтрока Из ТЗ Цикл
		ФлагОтправки = Истина;
		КлючевойПараметр = "";
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.АдресЭП) Тогда
			ФлагОтправки = Ложь;
			КлючевойПараметр = "Адрес электронной почты";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИНН) Тогда
			ФлагОтправки = Ложь;
			КлючевойПараметр = "ИНН";
		КонецЕсли;
		Если НЕ ФлагОтправки Тогда
			ШаблонСообщения = НСтр("ru = 'Необходимо заполнить ""%1"" участника ""%2"". Отправка приглашения не выполнена.'");
			НаименованиеУчастника = СокрЛП(?(ЗначениеЗаполнено(ТекущаяСтрока.НаименованиеДляСообщенияПользователю),
				ТекущаяСтрока.НаименованиеДляСообщенияПользователю, ТекущаяСтрока.Наименование));
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КлючевойПараметр, НаименованиеУчастника);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			ТЗ.Удалить(ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Если ТЗ.Количество() > 0 И ОтправитьФайлПриглашение(ТЗ, ПарольПользователя, Маркер) <> 0 Тогда
		НаборЗаписей = РегистрыСведений.УчастникиОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СоглашениеОбИспользованииЭД.Установить(Объект.Ссылка);
		Для Каждого ТекущаяСтрока Из ТЗ Цикл
			НаборЗаписей.Отбор.Участник.Установить(ТекущаяСтрока.Участник);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				ТекущаяЗаписьНабора = НаборЗаписей[0];
				ТекущаяЗаписьНабора.Статус               = Перечисления.СтатусыУчастниковОбменаЭД.ОжидаемСогласия;
				ТекущаяЗаписьНабора.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
			КонецЕсли;
			
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	// Определим сколько отправлено приглашений.
	ОтправленоПриглашений = ТЗ.Количество();
	
КонецПроцедуры

&НаСервере
Функция ДатаПоследнегоПолученияПриглашений()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияОбменовЭДЧерезОператоровЭДО.ДатаПоследнегоПолученияПриглашений
	|ИЗ
	|	РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО КАК СостоянияОбменовЭДЧерезОператоровЭДО
	|ГДЕ
	|	СостоянияОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = &СоглашениеОбИспользованииЭД";
	Запрос.УстановитьПараметр("СоглашениеОбИспользованииЭД", Объект.Ссылка);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат ?(Результат.ДатаПоследнегоПолученияПриглашений = Дата("00000000000000"),
			Дата("20000101000000"), Результат.ДатаПоследнегоПолученияПриглашений);
	КонецЕсли;
	
	Возврат Дата("20000101000000");
	
КонецФункции

&НаСервере
Функция СтатусУчастникаПоСтроке(Состояние)
	
	Если Состояние = "Присоединен" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.Присоединен;
	ИначеЕсли Состояние = "Входящий запрос" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.ЖдетСогласия;
	ИначеЕсли Состояние = "Отсоединен" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен;
	ИначеЕсли Состояние = "Sent" Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.ОжидаемСогласия;
	ИначеЕсли Найти(Состояние, "Ошибка") > 0 Тогда
		ВозвращаемоеЗначение = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура ОбновитьИнформациюОбУчастниках(ТЗ)
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.УчастникиОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СоглашениеОбИспользованииЭД.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	ЗаписатьНабор = Ложь;
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если ЗначениеЗаполнено(Запись.Идентификатор) Тогда
			Строка = ТЗ.Найти(Запись.Идентификатор, "Идентификатор");
		Иначе
			СтруктураДанных = ЭлектронныеДокументыСлужебный.СтруктураЗначенийРеквизитов(Запись.Участник, "ИНН");
			ИНН = "";
			СтруктураДанных.Свойство("ИНН", ИНН);
			Строка = ТЗ.Найти(ИНН, "ИНН");
		КонецЕсли;
		
		Если Строка <> Неопределено Тогда
			Если Запись.Идентификатор <> Строка.Идентификатор
				ИЛИ Запись.Статус <> СтатусУчастникаПоСтроке(Строка.Состояние) Тогда
				
				Запись.Идентификатор        = Строка.Идентификатор;
				Запись.Статус               = СтатусУчастникаПоСтроке(Строка.Состояние);
				Запись.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
				ЗаписатьНабор               = Истина;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаписатьНабор Тогда
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаписьВРегистре(СтруктураПараметров)
	
	ТЗ = ИнициализироватьТЗ();
	Строка = ТЗ.Добавить();
	Строка.Идентификатор = СтруктураПараметров.Идентификатор;
	Строка.Состояние     = ?(СтруктураПараметров.Принять, "Присоединен", "Отсоединен");
	ОбновитьИнформациюОбУчастниках(ТЗ);
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьТЗ()
	
	КС = Новый КвалификаторыСтроки(255);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТиповС = Новый ОписаниеТипов(Массив, , КС);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Наименование",  ОписаниеТиповС);
	ТЗ.Колонки.Добавить("ИНН",           ОписаниеТиповС);
	ТЗ.Колонки.Добавить("КПП",           ОписаниеТиповС);
	ТЗ.Колонки.Добавить("Идентификатор", ОписаниеТиповС);
	ТЗ.Колонки.Добавить("Состояние",     ОписаниеТиповС);
	
	Возврат ТЗ;
	
КонецФункции

&НаСервере
Процедура ПолучитьПриглашенияНаСервере(
				АдресРесурса,
				ДобавленоНовыхЗаписей,
				ПарольПользователя = Неопределено,
				Маркер=Неопределено)
	
	Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		
		Если АдресРесурса = "GetContactListUpdates" Тогда
			
			ДатаПоследнегоПолученияПриглашений = ДатаПоследнегоПолученияПриглашений();
			АдресРесурса = АдресРесурса + "?date=" + Формат(ДатаПоследнегоПолученияПриглашений,
				"ДФ='yyyy-MM-dd hh:mm:ss'")+"&status=ContactStatus.Incoming";
		КонецЕсли;
		
		ФайлПриглашения = ЭлектронныеДокументыВнутренний.ПолучитьЧерезОператораЭДО(
																Объект.Ссылка,
																АдресРесурса,
																ПарольПользователя,
																,
																Маркер);
			
		Если ФайлПриглашения <> Неопределено Тогда
			
			ТЗ = ИнициализироватьТЗ();
			ЭлектронныеДокументыВнутренний.ПрочитатьЗапросПриглашенияОператораЭДО(ФайлПриглашения, ТЗ);
			СохранитьПриглашения(ТЗ, ДобавленоНовыхЗаписей);
			ОбновитьИнформациюОбУчастниках(ТЗ);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПриглашения(ТЗ, ДобавленоНовыхЗаписей)
	
	Если ТЗ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приглашения.Идентификатор,
	|	Приглашения.ИНН,
	|	Приглашения.КПП,
	|	Приглашения.Состояние,
	|	Приглашения.Наименование
	|ПОМЕСТИТЬ Приглашения
	|ИЗ
	|	&Приглашения КАК Приглашения
	|ГДЕ
	|	Приглашения.Состояние <> ""Отсоединен""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Приглашения.Идентификатор,
	|	Приглашения.ИНН,
	|	Приглашения.КПП,
	|	Приглашения.Состояние,
	|	Приглашения.Наименование
	|ИЗ
	|	Приглашения КАК Приглашения
	|ГДЕ
	|	НЕ Приглашения.Идентификатор В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					УчастникиОбменовЭДЧерезОператоровЭДО.Идентификатор КАК Идентификатор
	|				ИЗ
	|					РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
	|				ГДЕ
	|					УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = &СоглашениеОбИспользованииЭД)";
	Запрос.УстановитьПараметр("Приглашения", ТЗ);
	Запрос.УстановитьПараметр("СоглашениеОбИспользованииЭД", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		НовыеПриглашения = Результат.Выбрать();
		
		НаборЗаписей = РегистрыСведений.УчастникиОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СоглашениеОбИспользованииЭД.Установить(Объект.Ссылка);
		
		НайденыВсеКонтрагенты = Истина;
		Пока НовыеПриглашения.Следующий() Цикл
			Контрагент = Неопределено;
			Если Найти(НовыеПриглашения.Состояние, "Ошибка") = 0 Тогда
				Контрагент = ЭлектронныеДокументыПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты", НовыеПриглашения.ИНН,
					НовыеПриглашения.КПП, Объект.Организация);
			КонецЕсли;
			
			Если Контрагент = Неопределено Тогда
				НайденыВсеКонтрагенты = Ложь;
				Текст = НСтр("ru = 'Ошибка обработки приглашения для участника:
				|Наименование: %1
				|ИНН: %2
				|КПП: %3
				|Статус: %4'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, НовыеПриглашения.Наименование,
					НовыеПриглашения.ИНН, НовыеПриглашения.КПП, НовыеПриглашения.Состояние);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей.Отбор.Участник.Установить(Контрагент);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				ТекущаяЗаписьНабора = НаборЗаписей[0];
			Иначе
				ТекущаяЗаписьНабора = НаборЗаписей.Добавить();
				ТекущаяЗаписьНабора.Участник = Контрагент;
				ТекущаяЗаписьНабора.СоглашениеОбИспользованииЭД = Объект.Ссылка;
				ТекущаяЗаписьНабора.ВерсияРегламентаЭДО         = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
			КонецЕсли;
			
			ТекущаяЗаписьНабора.ДатаИзмененияСтатуса = ТекущаяДатаСеанса();
			ТекущаяЗаписьНабора.Идентификатор        = НовыеПриглашения.Идентификатор;
			ТекущаяЗаписьНабора.Статус               = Перечисления.СтатусыУчастниковОбменаЭД.ЖдетСогласия;
			ТекущаяЗаписьНабора.ФорматФайловОбменаЭД = Перечисления.ФорматыФайловОбменаЭД.СоставнойФормат;
			
			ДобавленоНовыхЗаписей = ДобавленоНовыхЗаписей + 1;
			
		КонецЦикла;
		
		Если ДобавленоНовыхЗаписей > 0 Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		Если НайденыВсеКонтрагенты Тогда
			ЗафиксироватьДатуОбработкиПриглашений();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьДатуОбработкиПриглашений()
	
	Запись = РегистрыСведений.СостоянияОбменовЭДЧерезОператоровЭДО.СоздатьМенеджерЗаписи();
	Запись.СоглашениеОбИспользованииЭД = Объект.Ссылка;
	Запись.Прочитать();
	Запись.ДатаПоследнегоПолученияПриглашений = ТекущаяДатаСеанса();
	Запись.Записать();
	
КонецПроцедуры

&НаСервере
Функция УдалитьУчастниковОбмена(МассивЗаписей)
	
	ВозвращаемоеЗначение = Истина;
	Для Каждого Запись Из МассивЗаписей Цикл
		
		ЗаписьРегистра = РегистрыСведений.УчастникиОбменовЭДЧерезОператоровЭДО.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Участник                    = Запись.Участник;
		ЗаписьРегистра.СоглашениеОбИспользованииЭД = Запись.СоглашениеОбИспользованииЭД;
		ЗаписьРегистра.Прочитать();
		
		Если ЗаписьРегистра.Статус = Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяПригласить
			ИЛИ ЗаписьРегистра.Статус = Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен Тогда
			ЗаписьРегистра.Удалить();
		Иначе
			ВозвращаемоеЗначение = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция ОбъектЗаполнен()
	
	Возврат РеквизитФормыВЗначение("Объект").ПроверитьЗаполнение();
	
КонецФункции

&НаКлиенте
Функция СоглашениеЗаписано()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Добавлять участников можно только в записанном соглашении.
		|Записать соглашение?'");
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Да И ОбъектЗаполнен() Тогда
		ЭтаФорма.Записать();
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция СоглашениеУникально(ТекстОшибки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоглашенияОбИспользованииЭД.Ссылка КАК СоглашениеЭД
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	СоглашенияОбИспользованииЭД.СертификатАбонента.Отпечаток = &Отпечаток
		|	И СоглашенияОбИспользованииЭД.Ссылка <> &Ссылка
		|	И СоглашенияОбИспользованииЭД.Организация = &Организация
		|	И СоглашенияОбИспользованииЭД.ИдентификаторОрганизации = &ИдентификаторОрганизации";

	Запрос.УстановитьПараметр("ИдентификаторОрганизации", Объект.ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Отпечаток", Объект.СертификатАбонента.Отпечаток);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

	Результат = Запрос.Выполнить();
	ТекущееСоглашениеУникально = Результат.Пустой();

	Если НЕ ТекущееСоглашениеУникально Тогда
		ТекстОшибки = НСтр("ru = 'В информационной базе уже существует действующее соглашение (%4) с реквизитами:
		|Организация - %1;
		|Идентификатор организации - %2;
		|Сертификат абонента - %3.
		|'");
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			Объект.Организация,
			Объект.ИдентификаторОрганизации,
			Объект.СертификатАбонента,
			Выборка.СоглашениеЭД);
	КонецЕсли;
	
	Возврат ТекущееСоглашениеУникально;
	
КонецФункции

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	ТекстЗаголовка = НСтр("ru='Соглашение с контрагентами об использовании электронных документов (через оператора ЭДО)'");
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭтаФорма.Заголовок = ТекстЗаголовка + НСтр("ru=' (создание)'");
	Иначе
		ЭтаФорма.Заголовок = ТекстЗаголовка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(
				Соглашение,
				Идентификатор,
				ПриглашениеПринято,
				ПарольПользователя,
				Маркер)
	
	Возврат ЭлектронныеДокументыВнутренний.ПринятьОтклонитьКонтактЧерезОператораЭДО(
													Соглашение,
													Идентификатор,
													ПриглашениеПринято,
													ПарольПользователя,
													Маркер);
	
КонецФункции

&НаСервере
Функция ЗашифрованныйМаркер()
		
	Если Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		АдресСоединения = "";
		ЗащищенноеСоединение = Ложь;
		ПротоколСоединения = "";
		
		ЭлектронныеДокументыВнутренний.ОпределитьПараметрыСайта("htt" + Символ(112) + "s://1" + Символ(67) + "-"
		+ Символ(97) + Символ(112) + Символ(105) + "."
		+ Символ(116) + Символ(97) + Символ(120) + Символ(99) + Символ(111) + Символ(109) + "."
		+ Символ(114) + Символ(117) + "/v1.2/API/", ЗащищенноеСоединение, АдресСоединения, ПротоколСоединения);
		Прокси = ЭлектронныеДокументыСлужебный.СформироватьПрокси(ПротоколСоединения);
		Соединение = Новый HTTPСоединение(АдресСоединения, , , , Прокси, ЗащищенноеСоединение);
		СтруктураПараметровЗапросаМаркера = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураПараметровЗапросаМаркера(
																								Объект.Ссылка);
		Маркер = ЭлектронныеДокументыВнутренний.ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Соединение, "", Ложь);
		Возврат Маркер;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция Маркер(ПарольПользователя)
	
	ЗашифрованныйМаркер = ЗашифрованныйМаркер();
	
	Если ЗашифрованныйМаркер = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;

	Попытка
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПарольПользователя;
		Маркер = МенеджерКриптографии.Расшифровать(ЗашифрованныйМаркер);
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;

	Возврат Маркер;
	
КонецФункции

// Механизм ИПП

&НаКлиенте
Процедура НадписьИдентификаторУчастникаОбменаЭДНажатие(Элемент)
	
	Если ДанныеФормыСохранены() Тогда
		// Проводим тест настроек сертификата подписи с подавлением вывода успешных результатов.
		ОчиститьСообщения();
		
		ПарольПользователя = Неопределено;
		Отказ = Ложь;
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
			Контекст = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаСервере");
		Иначе
			Контекст = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаКлиенте");
		КонецЕсли;
		
		ЭлектронныеДокументыСлужебныйКлиент.ТестНастроекСертификата(Объект.СертификатАбонента,
																	Контекст,
																	,
																	Истина,
																	Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ЭлектронныеДокументыКлиентПереопределяемый.СтартоватьМеханизмРаботыСОператоромЭДО(
															Объект.СертификатАбонента,
															Объект.Организация,
															"registrationED",
															Объект.ИдентификаторОрганизации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЛичныйКабинетУчастникаОбменаЭДНажатие(Элемент)
	
	ЭлектронныеДокументыКлиентПереопределяемый.СтартоватьМеханизмРаботыСОператоромЭДО(
		Объект.СертификатАбонента, Объект.Организация, "privateED", Объект.ИдентификаторОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюЛичногоКабинета()
	
	Элементы.НадписьЛичныйКабинетУчастникаОбменаЭД.Доступность = НЕ ПустаяСтрока(Объект.ИдентификаторОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиИдентификатора()
	
	Объект.ИдентификаторОрганизации = "";
	Элементы.НадписьИдентификаторУчастникаОбменаЭД.Заголовок = НСтр("ru = 'Получить уникальный идентификатор участника обмена ЭД.'");
	ШрифтЭлемента = Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт;
	Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт = Новый Шрифт(ШрифтЭлемента, , , Ложь);
	Элементы.НадписьИдентификаторУчастникаОбменаЭД.Гиперссылка = Истина;
	УправлениеДоступностьюЛичногоКабинета();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОтправитьПриглашенияВыделеннымУчастникам(Команда)
	
	ОчиститьСообщения();
	Если ДанныеФормыСохранены() И СоглашениеДействует() Тогда
		МассивЗаписей = Элементы.УчастникиОбменаЭД.ВыделенныеСтроки;
		ОтправитьПриглашенияУчастникам(МассивЗаписей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашенияВсемУчастникам(Команда)
	
	ОчиститьСообщения();
	Если ДанныеФормыСохранены() И СоглашениеДействует() Тогда
		ОтправитьПриглашенияУчастникам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоСтатусамУчастниковССервиса(Команда)
	
	ОчиститьСообщения();
	Если ДанныеФормыСохранены() И СоглашениеДействует() Тогда
		ОбработатьКомандыПолученияКонтактов("GetContactListUpdates");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашения(Команда)
	
	ОчиститьСообщения();
	Если ДанныеФормыСохранены() И СоглашениеДействует() Тогда
		ТекущиеДанные = Элементы.УчастникиОбменаЭД.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ЖдетСогласия") Тогда
				ТекстСообщения = НСтр("ru = 'Действие доступно только для участников со статусом ""Ждет согласия""'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Иначе
				Отказ = Ложь;
				ПарольПользователя = ПарольСертификата(Отказ);
				
				Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
					Маркер = Маркер(ПарольПользователя);
				КонецЕсли;
				
				Если НЕ Отказ Тогда
					Результат = ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(
										Объект.Ссылка,
										ТекущиеДанные.Идентификатор,
										Истина,
										ПарольПользователя,
										Маркер);
					Если Результат Тогда
						
						СтруктураПараметров = Новый Структура;
						СтруктураПараметров.Вставить("Идентификатор", ТекущиеДанные.Идентификатор);
						СтруктураПараметров.Вставить("Принять",       Истина);
						
						ОбновитьЗаписьВРегистре(СтруктураПараметров);
						ЭтаФорма.Элементы.УчастникиОбменаЭД.Обновить();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьУчастника(Команда)
	
	ОчиститьСообщения();
	МассивЗаписей = Элементы.УчастникиОбменаЭД.ВыделенныеСтроки;
	Если НЕ УдалитьУчастниковОбмена(МассивЗаписей) Тогда
		ТекстСообщения = НСтр(
			"ru = 'Удалять можно участников, находящихся в статусе ""Требуется пригласить"" или ""Отсоединен"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	Элементы.УчастникиОбменаЭД.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПриглашения(Команда)
	
	ОчиститьСообщения();
	Если ДанныеФормыСохранены() И СоглашениеДействует() Тогда
		ТекущиеДанные = Элементы.УчастникиОбменаЭД.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.Присоединен")
				ИЛИ ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыУчастниковОбменаЭД.ТребуетсяОтсоединить") Тогда
				
				Отказ = Ложь;
				ПарольПользователя = ПарольСертификата(Отказ);
				Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
					Маркер = Маркер(ПарольПользователя);
				КонецЕсли;
				Если НЕ Отказ Тогда
					Результат = ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(
										Объект.Ссылка,
										ТекущиеДанные.Идентификатор,
										Ложь,
										ПарольПользователя,
										Маркер);
					Если Результат Тогда
						СтруктураПараметров = Новый Структура;
						СтруктураПараметров.Вставить("Идентификатор", ТекущиеДанные.Идентификатор);
						СтруктураПараметров.Вставить("Принять",       Ложь);
						
						ОбновитьЗаписьВРегистре(СтруктураПараметров);
						ЭтаФорма.Элементы.УчастникиОбменаЭД.Обновить();
					КонецЕсли;
				КонецЕсли;
			Иначе
				ШаблонСообщения = НСтр("ru = 'Участника со статусом ""%1"" отключить от обмена невозможно.
				|Необходимо дождаться ответа от участника.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекущиеДанные.Статус);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачальнаяДатаЗапросаДанныхУОператора(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение", Объект.Ссылка);
	
	ОткрытьФормуМодально("РегистрСведений.СостоянияОбменовЭДЧерезОператоровЭДО.Форма.ФормаРедактирования", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

&НаКлиенте
Процедура СертификатАбонентаПриИзменении(Элемент)
	
	УстановитьНастройкиИдентификатора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьНастройкиИдентификатора();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОрганизацииПриИзменении(Элемент)
	
	Объект.ИдентификаторОрганизации = СокрЛП(Объект.ИдентификаторОрганизации);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.СтатусСоглашения = Перечисления.СтатусыСоглашенийЭД.НеСогласовано;
		Объект.СпособОбменаЭД   = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
	КонецЕсли;
	УчастникиОбменаЭД.Параметры.УстановитьЗначениеПараметра("СоглашениеОбИспользованииЭД", Объект.Ссылка);
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	Если Объект.СтатусСоглашения = ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийЭД.Действует") Тогда
		ТекстОшибкиАктуальности = "";
		Если НЕ СоглашениеУникально(ТекстОшибкиАктуальности) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиАктуальности, , , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УчастникиОбменаЭД.Параметры.УстановитьЗначениеПараметра("СоглашениеОбИспользованииЭД", ТекущийОбъект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ИнтернетПоддержкаПользователей
	
	// Механизм получения уникального идентификатора передает уникальный идентификатор
	// в виде строки в параметре оповещения с именем события
	// "ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД"
	Если ИмяСобытия = "ОповещениеОПолученииУникальногоИдентификатораУчастникаОбменаЭД" Тогда
		Объект.ИдентификаторОрганизации = СокрЛП(Параметр);
		Если ЗначениеЗаполнено(Объект.ИдентификаторОрганизации) Тогда // по умолчанию сразу "включаем" соглашение
			Объект.СтатусСоглашения = ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийЭД.Действует");
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = Истина;
		ШаблонСообщения = НСтр("ru = 'Идентификатор: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Параметр);
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Заголовок = ТекстСообщения;
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Гиперссылка = Ложь;
		ШрифтЭлемента = Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт;
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт = Новый Шрифт(ШрифтЭлемента, , , Истина);
		УправлениеДоступностьюЛичногоКабинета();
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ИнтернетПоддержкаПользователей
	Если ЭлектронныеДокументыСлужебныйКлиент.ПроверитьИспользованиеИнтернетПоддержкаПользователей() Тогда
		Элементы.ИдентификаторОрганизации.Видимость = Ложь;
		
		Если ЗначениеЗаполнено(Объект.ИдентификаторОрганизации) Тогда
			ШаблонСообщения = НСтр("ru = 'Идентификатор: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				Объект.ИдентификаторОрганизации);
			Элементы.НадписьИдентификаторУчастникаОбменаЭД.Заголовок = ТекстСообщения;
			Элементы.НадписьИдентификаторУчастникаОбменаЭД.Гиперссылка = Ложь;
			ШрифтЭлемента = Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт;
			Элементы.НадписьИдентификаторУчастникаОбменаЭД.Шрифт = Новый Шрифт(ШрифтЭлемента, , , Истина);
		КонецЕсли;
	Иначе
		Элементы.НадписьЛичныйКабинетУчастникаОбменаЭД.Видимость = Ложь;
		Элементы.НадписьИдентификаторУчастникаОбменаЭД.Видимость = Ложь;
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей
	
	УправлениеДоступностьюЛичногоКабинета();
	
КонецПроцедуры
