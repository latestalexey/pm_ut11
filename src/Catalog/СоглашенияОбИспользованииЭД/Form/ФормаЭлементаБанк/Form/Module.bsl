
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектЭлемента = РеквизитФормыВЗначение("Объект");
	
	ЗаполнитьВидыЭДДоступнымиЗначениями();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда // новый
		Объект.СтатусСоглашения = Перечисления.СтатусыСоглашенийЭД.НеСогласовано;
		Объект.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка;
		Объект.РесурсВходящихДокументов = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = ЭлектронныеДокументыПовтИсп.ПолучитьПустуюСсылку("Банки");
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	Если Объект.СтатусСоглашения = ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийЭД.Действует") Тогда
		ТекстОшибкиАктуальности = "";
		ПроверитьАктуальностьДанныхСоглашения(ТекстОшибкиАктуальности);
		Если НЕ ПустаяСтрока(ТекстОшибкиАктуальности) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиАктуальности, ,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Объект.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка");
			
	Если ЗначениеЗаполнено(Объект.АдресСервера) И НЕ ПравильныйФорматАдреса()
		И Объект.СтатусСоглашения = ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийЭД.Действует") Тогда
		
		ТекстСообщения = НСтр("ru = 'Адрес сервера банка должен начинаться с """"https://"""" или """"http://""""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"АдресСервера","Объект",Отказ);
		
	КонецЕсли;
	
	УдалитьПустыеСтрокиТаблиц();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПустыеСтрокиТаблиц()
	
	СписокСтрокКУдалению = Новый СписокЗначений;
	Для каждого СтрокаСертификата ИЗ Объект.СертификатыНеобходимыхПодписей Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаСертификата.Сертификат) Тогда
			СписокСтрокКУдалению.Добавить(СтрокаСертификата.НомерСтроки);
		КонецЕсли;
	КонецЦикла;

	СписокСтрокКУдалению.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	Для Каждого Запись ИЗ СписокСтрокКУдалению Цикл
		Объект.СертификатыНеобходимыхПодписей.Удалить(Запись.Значение-1);
	КонецЦикла

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ЗаполнитьТаблицуЭтапов();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ИСХОДЯЩИЕ ДОКУМЕНТЫ

&НаКлиенте
Процедура ИсходящиеДокументыПриАктивизацииСтроки(Элемент)
	
	ЗаполнитьТаблицуЭтапов();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ВХОДЯЩИЕ ДОКУМЕНТЫ

&НаКлиенте
Процедура ВходящиеДокументыПриАктивизацииСтроки(Элемент)
	
	ЗаполнитьТаблицуЭтапов();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ЗаполнитьТаблицуЭтапов()
	
	СтруктураПараметров = СтруктураПараметровВидаЭД();
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаВходящиеДокументы Тогда
		ЗаполнитьСтруктуруПараметров(СтруктураПараметров, Элементы.ВходящиеДокументы.ТекущиеДанные);
		УстановитьЗначенияЭтаповОбменаПоНастройкам(Ложь, СтруктураПараметров);
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаИсходящиеДокументы Тогда
		ЗаполнитьСтруктуруПараметров(СтруктураПараметров, Элементы.ИсходящиеДокументы.ТекущиеДанные);
		УстановитьЗначенияЭтаповОбменаПоНастройкам(СтруктураПараметров);
	КонецЕсли	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыЭДДоступнымиЗначениями()
	
	АктуальныеВидыЭД = ЭлектронныеДокументыПовтИсп.ПолучитьАктуальныеВидыЭД();
	
	Для Каждого ЗначениеПеречисления Из АктуальныеВидыЭД Цикл
		Если ЗначениеПеречисления = Перечисления.ВидыЭД.ПлатежноеПоручение 
			ИЛИ ЗначениеПеречисления = Перечисления.ВидыЭД.ЗапросВыписки Тогда
				МассивСтрок = Объект.ИсходящиеДокументы.НайтиСтроки(Новый Структура("ИсходящийДокумент", ЗначениеПеречисления));
				Если МассивСтрок.Количество() = 0 Тогда 
					НоваяСтрока = Объект.ИсходящиеДокументы.Добавить();
					НоваяСтрока.ИсходящийДокумент = ЗначениеПеречисления;
					НоваяСтрока.Формировать       = Истина;
					НоваяСтрока.ИспользоватьЭЦП   = Истина;
				КонецЕсли;
		ИначеЕсли ЗначениеПеречисления = Перечисления.ВидыЭД.ВыпискаБанка Тогда
				МассивСтрок = Объект.ВходящиеДокументы.НайтиСтроки(Новый Структура("ВходящийДокумент", ЗначениеПеречисления));
				Если МассивСтрок.Количество() = 0 Тогда 
					НоваяСтрока = Объект.ВходящиеДокументы.Добавить();
					НоваяСтрока.ВходящийДокумент = ЗначениеПеречисления;
					НоваяСтрока.Формировать       = Истина;
					НоваяСтрока.ИспользоватьЭЦП   = Истина;
				КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияЭтаповОбменаПоНастройкам(НастройкиИсходящие = Ложь, НастройкиВходящие = Ложь)
	
	Если НастройкиИсходящие <> Ложь Тогда
		МассивСтатусов = ЭлектронныеДокументыСлужебный.ВернутьМассивСтатусовЭД(НастройкиИсходящие);
		ТаблицаЗаполнения = ТаблицаЭтаповИсходящие;
	КонецЕсли;
	
	Если НастройкиВходящие <> Ложь Тогда
		МассивСтатусов = ЭлектронныеДокументыСлужебный.ВернутьМассивСтатусовЭД(НастройкиВходящие);
		ТаблицаЗаполнения = ТаблицаЭтаповВходящие;
	КонецЕсли;
	
	Если ТаблицаЗаполнения <> Неопределено Тогда
		ТаблицаЗаполнения.Очистить();
		
		Для Каждого Элемент Из МассивСтатусов Цикл
			ТаблицаЗаполнения.Добавить(Элемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураПараметровВидаЭД()
	СтруктураВозврата = Новый Структура("Направление, ВидЭД, СпособОбмена, ИспользоватьПодпись, ИспользуетсяНесколькоПодписей");
	Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтруктуруПараметров(СтруктураПараметров,ДанныеФормыКоллекция)
	
	Если ДанныеФормыКоллекция = Неопределено ИЛИ НЕ ДанныеФормыКоллекция.Формировать Тогда
		СтруктураПараметров = Неопределено; 
	Иначе
		СтруктураПараметров.ИспользоватьПодпись           = ДанныеФормыКоллекция.ИспользоватьЭЦП;
		СтруктураПараметров.СпособОбмена                  = Объект.СпособОбменаЭД;
		
		СтруктураПараметров.ИспользуетсяНесколькоПодписей = ИспользуетсяНесколькоПодписей();
		
		Если ДанныеФормыКоллекция.Свойство("ИсходящийДокумент") Тогда
			СтруктураПараметров.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий");
			СтруктураПараметров.ВидЭД = ДанныеФормыКоллекция.ИсходящийДокумент;
		Иначе
			СтруктураПараметров.Направление = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий");
			СтруктураПараметров.ВидЭД = ДанныеФормыКоллекция.ВходящийДокумент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИспользуетсяНесколькоПодписей()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Возврат Документ.СертификатыНеобходимыхПодписей.Количество() > 1;
	
КонецФункции

&НаСервере
Процедура ПроверитьАктуальностьДанныхСоглашения(ТекстОшибкиАктуальности)
	
	ЗапросПоСоглашениям = Новый Запрос;
	ЗапросПоСоглашениям.УстановитьПараметр("СтатусСоглашения",  Перечисления.СтатусыСоглашенийЭД.Действует);
	ЗапросПоСоглашениям.УстановитьПараметр("ТекущееСоглашение", Объект.Ссылка);
	ЗапросПоСоглашениям.УстановитьПараметр("Организация",       Объект.Организация);
	ЗапросПоСоглашениям.УстановитьПараметр("Контрагент",        Объект.Контрагент);
	ЗапросПоСоглашениям.Текст = "ВЫБРАТЬ
	                            |	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент КАК ТипДокумента,
	                            |	СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка КАК Соглашение
	                            |ИЗ
	                            |	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	                            |ГДЕ
	                            |	СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать = ИСТИНА
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = &СтатусСоглашения
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления = ЛОЖЬ
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка <> &ТекущееСоглашение
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	                            |	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)";
	Результат = ЗапросПоСоглашениям.Выполнить().Выгрузить();
	
	ПроверитьУникальностьДокументов(Объект.ИсходящиеДокументы, Результат, ТекстОшибкиАктуальности);
		
КонецПроцедуры

&НаСервере
Процедура ПроверитьУникальностьДокументов(ТабличнаяЧастьДокументов, РезультатПроверки, ТекстОшибки)
			
	Для Каждого ТекущийДокументСоглашения Из ТабличнаяЧастьДокументов Цикл
		Если ТекущийДокументСоглашения.Формировать Тогда
			Для Каждого ДокументВДругихСоглашениях Из РезультатПроверки Цикл
				Если ТекущийДокументСоглашения.ИсходящийДокумент = ДокументВДругихСоглашениях.ТипДокумента Тогда
					ТекстОшибки = НСтр("ru = 'По виду электронных документов %1 %2 
					|уже существует действующее соглашение между участниками %3 - %4:
					|%5.
					|'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстОшибки, 
						ДокументВДругихСоглашениях.ТипДокумента, 
						"Исходящий", 
						Объект.Организация, 
						Объект.Контрагент, 
						ДокументВДругихСоглашениях.Соглашение
						);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПравильныйФорматАдреса()
	
	Если НРег(Лев(Объект.АдресСервера, 7)) = "http://"
			ИЛИ НРег(Лев(Объект.АдресСервера, 8)) = "https://" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
