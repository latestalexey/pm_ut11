////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура ИзменитьСтатусОтклонить()
	
	Объект.СтатусЭД = Перечисления.СтатусыЭД.Отклонен;
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	ОбъектДокумент.Записать();
	ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(Объект.Ссылка);
	ЗначениеВРеквизитФормы(ОбъектДокумент, "Объект");
	
КонецПроцедуры

// Если у текущего (отклоняемого) ЭД есть подчиненные (не служебные) ЭД,
// со статусом отличным от Отклонен||ОтклоненПолучателем, то его отклонять нельзя.
//
&НаСервере
Функция МожноОтклонитьЭтотЭД()
	
	ВозвращаемоеЗначение = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК ПодчиненныеЭД
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = &ЭлектронныйДокументВладелец
	|	И (ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД)
	|			ИЛИ ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ))
	|	И ЭДПрисоединенныеФайлы.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
	|	И ЭДПрисоединенныеФайлы.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОтклоненПолучателем)";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокументВладелец", Объект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		ВозвращаемоеЗначение = Ложь;
		СписокЭлектронныхДокументов = "";
		
		ШаблонСообщения = НСтр("ru = 'Для отклонения электронного документа необходимо отклонить следующие электронные документы: %1.'");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокЭлектронныхДокументов = СписокЭлектронныхДокументов + Символы.ПС + Выборка.ПодчиненныеЭД;
		КонецЦикла;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СписокЭлектронныхДокументов);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура ИзменитьВидимостьДоступность()
	
	Если ЗначениеЗаполнено(СсылкаНаМассивСертификатов) Тогда
		МассивСтруктурСертификатов = ПолучитьИзВременногоХранилища(СсылкаНаМассивСертификатов);
	КонецЕсли;
	
	Элементы.ГруппаСодержимоеДокумента.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	Если НЕ Объект.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка И НЕ Элементы.Найти("КомандаПрочитать") = Неопределено Тогда
		Элементы.КомандаПрочитать.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаКомандВх;
		
		Элементы.КомандаОтправитьЭД.Видимость = Ложь;
		Элементы.КомандаПодписать.Видимость   = Ложь;
		
		Если Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка Тогда
			
			Элементы.ПерезаполнитьДокумент.Видимость = Ложь;
		ИначеЕсли Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			Элементы.ПерезаполнитьДокумент.Заголовок = НСтр("ru = 'Сопоставить номенклатуру'");
		ИначеЕсли Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			Элементы.КомандаОтправитьПодтверждениеЭД.Видимость = Ложь;
			Элементы.КомандаУтвердитьЭД.Видимость = Истина;
		ИначеЕсли Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			Элементы.КомандаОтправитьПодтверждениеЭД.Видимость = Ложь;
			Элементы.КомандаУтвердитьЭД.Видимость = Ложь;
			Элементы.ПерезаполнитьДокумент.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли Объект.Ссылка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		
		Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаКомандИсх;
		
		Элементы.КомандаОтправитьПодтверждениеЭД.Видимость = Ложь;
		Элементы.КомандаВыбратьДокумент.Видимость          = Ложь;
		Элементы.КомандаПодписать.Видимость                = Ложь;
		
	ИначеЕсли Объект.Ссылка.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		
		Элементы.ГруппаВправо.ПодчиненныеЭлементы.СтраницыКоманд.ТекущаяСтраница = Элементы.ГруппаКомандИсх;
		
		Элементы.КомандаОтправитьПодтверждениеЭД.Видимость = Ложь;
		Элементы.КомандаВыбратьДокумент.Видимость          = Ложь;
		Элементы.КомандаОтправитьЭД.Видимость              = Ложь;
		Элементы.ОбработкаЭлектронныеДокументыПереотправитьЭД.Видимость = Ложь;
		
	КонецЕсли;
	
	Если НЕ (ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи")
		ИЛИ НЕ ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД()) Тогда
		
		Элементы.КомандаУтвердитьЭД.Заголовок = "Утвердить и отправить";
	КонецЕсли;
	
	Если МассивСтруктурСертификатов <> Неопределено Тогда
		ЭДОтклонен = ЭДОтклонен();
		
		ЕстьВозможностьПодписания = ДоступныДляПодписиСертификаты(МассивСтруктурСертификатов);
		
		Если ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
			КомандаПодписиОтправки = Элементы.КомандаОтправитьЭД;
		Иначе
			КомандаПодписиОтправки = Элементы.КомандаПодписать;
		КонецЕсли;
		
		Если Объект.Ссылка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
			
			Элементы.КомандаОтправитьПодтверждениеЭД.Видимость = ЕстьВозможностьПодписания
			И Объект.Ссылка.ВидЭД <> Перечисления.ВидыЭД.СчетФактура
			И Объект.Ссылка.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Продавец
			И Объект.Ссылка.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
			И Объект.Ссылка.ВидЭД <> Перечисления.ВидыЭД.АктИсполнитель
			И Объект.Ссылка.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
			И Объект.Ссылка.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			И Объект.Ссылка.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель;
			
			Элементы.КомандаУтвердитьЭД.Видимость = Объект.Ссылка.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
			И Объект.Ссылка.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
			И Объект.Ссылка.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
			И Объект.Ссылка.ВидЭД <> Перечисления.ВидыЭД.ВыпискаБанка
			И (НЕ ЕстьВозможностьПодписания
			ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
			
			Элементы.ПерезаполнитьДокумент.Доступность  = НЕ ЭДОтклонен;
			Элементы.ЗаголовокОтраженВУчете.Доступность = НЕ ЭДОтклонен;
			
			Элементы.КомандаОтправитьПодтверждениеЭД.Доступность = ЕстьВозможностьПодписания
			И НЕ ЭДОтклонен И ОтраженВУчете
			И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен
			ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Утвержден);
			
			Элементы.КомандаУтвердитьЭД.Доступность = (Объект.СтатусЭД = Перечисления.СтатусыЭД.Получен
			И НЕ(Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении));
			
		ИначеЕсли Объект.Ссылка.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
			
			Если Объект.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
				КоличествоНеустановленныхПодписей =  ПолучитьКоличествоНеустановленныхПодписей();
				Элементы.КомандаОтправитьЭД.Видимость = (КоличествоНеустановленныхПодписей=1) И ЕстьВозможностьПодписания;
				Элементы.КомандаПодписать.Видимость   = КоличествоНеустановленныхПодписей>1 И ЕстьВозможностьПодписания;
				Элементы.ОбработкаЭлектронныеДокументыПереотправитьЭД.Видимость = Объект.СтатусЭД = перечисления.СтатусыЭД.ОшибкаПередачи;
			Иначе
				КомандаПодписиОтправки.Видимость   = ЕстьВозможностьПодписания И ТребуетсяПодпись;
				КомандаПодписиОтправки.Доступность = НЕ ЭДОтклонен
				И (ОтраженВУчете ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
				ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении)
				И (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.Утвержден);
				Элементы.ОбработкаЭлектронныеДокументыПереотправитьЭД.Доступность = НЕ ЭДОтклонен
				И ОтраженВУчете
				ИЛИ (Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.Подтверждение
				ИЛИ Объект.Ссылка.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении);
			КонецЕсли;
			Элементы.КомандаУтвердитьЭД.Видимость   = НЕ (ЕстьВозможностьПодписания И ТребуетсяПодпись);
			Элементы.КомандаУтвердитьЭД.Доступность = Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован;
			
		ИначеЕсли Объект.Ссылка.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			
			Элементы.КомандаПодписать.Видимость     = ЕстьВозможностьПодписания;
			Элементы.КомандаПодписать.Доступность   = (ЕстьВозможностьПодписания
			И НЕ ЭДОтклонен И Объект.СтатусЭД <> Перечисления.СтатусыЭД.ПолностьюПодписан);
			Элементы.КомандаУтвердитьЭД.Видимость   = НЕ ЕстьВозможностьПодписания;
			Элементы.КомандаУтвердитьЭД.Доступность = (Объект.СтатусЭД = Перечисления.СтатусыЭД.Сформирован);
			
		КонецЕсли;
		
		Элементы.КомандаОтклонить.Доступность = НЕ (ЭДОтклонен ИЛИ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(Объект.Ссылка));
		
		Если ЭДОтклонен Тогда
			
			ПричиныОтклонения.Очистить();
			НовСтрока = ПричиныОтклонения.Добавить();
			НовСтрока.ПричинаОтклонения = Объект.ПричинаОтклонения;
			Элементы.ГруппаСтраницыПодвала.ТекущаяСтраница = Элементы.ГруппаСтраницыПодвала.ПодчиненныеЭлементы.ГруппаСтраницаОтклонение;
			
			Если Объект.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи Тогда
				Элементы.ПричиныОтклоненияПричинаОтклонения.Заголовок = НСтр("ru = 'Ошибка обмена'");
			КонецЕсли;
			
		КонецЕсли;
		
		ОчиститьОповещениеОНеактуальности();
		УстановитьЗаголовокФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если НЕ ОтраженВУчете И НЕ (Объект.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
								ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.Подтверждение
								ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
								ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка) Тогда
		
		Если НЕ ЗначениеЗаполнено(ВерсияЭД) ИЛИ Объект.ДатаФормированияЭДОтправителем <= ВерсияЭД Тогда
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = ' - неактуальный'");
		ИначеЕсли Объект.ДатаФормированияЭДОтправителем > ВерсияЭД Тогда
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = ' - новый'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьОповещениеОНеактуальности()
	
	ЭтаФорма.Заголовок = СтрЗаменить(ЭтаФорма.Заголовок, НСтр("ru = ' - неактуальный'"), "");
	ЭтаФорма.Заголовок = СтрЗаменить(ЭтаФорма.Заголовок, НСтр("ru = ' - новый'"), "");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусЭД(СтатусЭД = Неопределено, ДатаИзмененияСтатусаЭД = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(СтатусЭД) Тогда
		СтатусЭД = Объект.Ссылка.СтатусЭД;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаИзмененияСтатусаЭД) Тогда
		ДатаИзмененияСтатусаЭД = Объект.Ссылка.ДатаИзмененияСтатусаЭД;
	КонецЕсли;
	
	ТекстСтатусЭД = " " +  СтатусЭД + ", " + Формат(ДатаИзмененияСтатусаЭД, "ДЛФ=");
	ТекстСостояния = ЭлектронныеДокументыКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.ВладелецФайла);
	ТекстДокументИБ = Строка(Объект.ВладелецФайла) + ?(ЗначениеЗаполнено(ТекстСостояния), ", состояние: " + ТекстСостояния, "");
	
	ЗапросПоОтражению = Новый Запрос;
	ЗапросПоОтражению.УстановитьПараметр("СсылкаНаОбъект", Объект.ВладелецФайла);
	
	ЗапросПоОтражению.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаОбъект";
	
	Выборка = ЗапросПоОтражению.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВерсияЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ЭлектронныйДокумент, "ДатаФормированияЭДОтправителем");
		ОтраженВУчете = (Объект.Ссылка = Выборка.ЭлектронныйДокумент);
	КонецЕсли;
	
	ТаблицаСтатусов = ПолучитьТаблицуСтатусовЭД(Объект);
	Если ЗначениеЗаполнено(ТаблицаСтатусов) Тогда
		ЗначениеВРеквизитФормы(ТаблицаСтатусов, "СтатусыЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЭЦП()
	
	Если НЕ ЗначениеЗаполнено(Объект.СоглашениеЭД)
		ИЛИ НЕ Объект.СоглашениеЭД.ПроверятьСертификатыПодписей Тогда
		
		ТаблицаЭЦП = РеквизитФормыВЗначение("ЭЦП");
		ТаблицаЭЦП.Очистить();
		
		Для Каждого ТекСтрока Из Объект.ЭлектронныеЦифровыеПодписи Цикл
			НоваяСтрока = ТаблицаЭЦП.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ТаблицаЭЦП, "ЭЦП");
		Возврат;
	КонецЕсли;
	
	МассивОтпечатковОжидаемыхСертификатов = ПолучитьОтпечаткиОжидаемыхСертификатов(Объект.СоглашениеЭД);
	
	ТаблицаЭЦП = РеквизитФормыВЗначение("ЭЦП");
	ТаблицаЭЦП.Очистить();
	
	Для Каждого ТекСтрока Из Объект.ЭлектронныеЦифровыеПодписи Цикл
		НоваяСтрока = ТаблицаЭЦП.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		Если МассивОтпечатковОжидаемыхСертификатов.Найти(ТекСтрока.Отпечаток) = Неопределено Тогда
			НоваяСтрока.ОтсутствуетВСписке = Истина;
			НоваяСтрока.ВыводКартинки = 1;
		Иначе
			НоваяСтрока.ВыводКартинки = 0;
		КонецЕсли;
		ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ТаблицаЭЦП, "ЭЦП");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОтпечаткиОжидаемыхСертификатов(ТекущееСоглашение)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыЭЦП.Отпечаток КАК Отпечаток
	|ИЗ
	|	Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|ГДЕ
	|	СертификатыЭЦП.Организация = &Организация
	|	И СертификатыЭЦП.Отозван = ЛОЖЬ
	|	И СертификатыЭЦП.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента.Отпечаток
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыПодписейКонтрагента КАК СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента
	|ГДЕ
	|	СоглашенияОбИспользованииЭДСертификатыПодписейКонтрагента.Ссылка = &СоглашениеОбИспользованииЭД";
	Запрос.УстановитьПараметр("Организация", ТекущееСоглашение.Организация);
	Запрос.УстановитьПараметр("СоглашениеОбИспользованииЭД", ТекущееСоглашение);
	
	МассивОтпечатков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Отпечаток");
	
	Возврат МассивОтпечатков;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока)
	
	Если ЗначениеЗаполнено(ТекСтрока.ДатаПроверкиПодписи) Тогда
		НоваяСтрока.ПодписьВерна = ?(ТекСтрока.ПодписьВерна, НСтр("ru = 'Верна'"), НСтр("ru = 'Неверна'"))
			+" (" + ТекСтрока.ДатаПроверкиПодписи + ")";
	Иначе
		НоваяСтрока.ПодписьВерна = НСтр("ru = 'Не проверена'");
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция НеобходимоПодписать()
	
	ФлагПодписи = Ложь;
	// Ответ на заказ никогда не подписывает покупатель или документ отклонен.
	Если НЕ( Объект.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ И Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		ИЛИ ЭДОтклонен) Тогда
		
		Если Объект.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
			ФлагПодписи = Истина;
		Иначе
						
			УстановитьПривилегированныйРежим(Истина);
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СоглашенияОбИспользованииЭДВходящиеДокументы.ИспользоватьЭЦП
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
			|ГДЕ
			|	СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = &ВидЭД
			|	И &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
			|	И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка = &Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП
			|ИЗ
			|	Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
			|ГДЕ
			|	СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
			|	И (&НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
			|			ИЛИ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани))
			|	И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка",        Объект.СоглашениеЭД);
			Запрос.УстановитьПараметр("ВидЭД",         Объект.ВидЭД);
			Запрос.УстановитьПараметр("НаправлениеЭД", Объект.НаправлениеЭД);
	
			Результат = Запрос.Выполнить().Выбрать();
			Результат.Следующий();
	
			ФлагПодписи = Результат.ИспользоватьЭЦП;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФлагПодписи;
	
КонецФункции

&НаСервере
Функция ДоступныДляПодписиСертификаты(МассивСтруктурСертификатов)
	
	МассивОтпечатков = Новый Массив;
	Для Каждого ЭлементСтруктуры Из МассивСтруктурСертификатов Цикл
		МассивОтпечатков.Добавить(ЭлементСтруктуры.Отпечаток);
	КонецЦикла;
	
	ЗапросПоСертификатам = Новый Запрос;
	ЗапросПоСертификатам.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СертификатыЭЦПВидыДокументов.Ссылка
	|ИЗ
	|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
	|ГДЕ
	|	НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отозван
	|	И (СертификатыЭЦПВидыДокументов.Ссылка.Пользователь = &ТекущийПользователь
	|			ИЛИ СертификатыЭЦПВидыДокументов.Ссылка.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления
	|	И СертификатыЭЦПВидыДокументов.Ссылка.Отпечаток В(&МассивОтпечатков)
	|	И СертификатыЭЦПВидыДокументов.ВидДокумента = &ВидДокумента
	|	И СертификатыЭЦПВидыДокументов.ИспользоватьДляПодписи
	|	И СертификатыЭЦПВидыДокументов.Ссылка.Организация = &Организация";
	
	ЗапросПоСертификатам.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	ЗапросПоСертификатам.УстановитьПараметр("МассивОтпечатков",    МассивОтпечатков);
	ЗапросПоСертификатам.УстановитьПараметр("ВидДокумента",        Объект.ВидЭД);
	ЗапросПоСертификатам.УстановитьПараметр("Организация",         Объект.Организация);
	
	ВозвращаемыйПараметр = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи")
		И НЕ ЗапросПоСертификатам.Выполнить().Пустой()
		И ТребуетсяПодпись;
		
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступностьНаКлиенте()

	Попытка
		Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
			МассивСтруктурСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМассивСтруктурСертификатов(Истина);
		Иначе
			МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
		КонецЕсли;
		СсылкаНаМассивСертификатов = ПоместитьВоВременноеХранилище(МассивСтруктурСертификатов, УникальныйИдентификатор);
	Исключение
	КонецПопытки;
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Функция ФайлДанныхЭД(СсылкаНаЭД = Неопределено, Знач ИмяФайлаПодчиненногоЭД = Неопределено)
	
	Если СсылкаНаЭД = Неопределено Тогда
		СсылкаНаЭД = Объект.Ссылка;
	КонецЕсли;
	
	ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(СсылкаНаЭД, СсылкаНаЭД.УникальныйИдентификатор(), Истина);
	
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
		Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
			ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
		Иначе
			ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		КонецЕсли;
		
		Если ИмяФайла = Неопределено Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось просмотреть электронный документ. Проверьте настройку рабочего каталога'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
		КонецЕсли;
		
		ВыборкаЭДДопДанных = ЭлектронныеДокументыСлужебный.ВыборкаДопДанныеЭД(СсылкаНаЭД);
		Если ВыборкаЭДДопДанных.Следующий() Тогда
			ДопДанныеЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаЭДДопДанных.Ссылка,
				ВыборкаЭДДопДанных.Ссылка.УникальныйИдентификатор(), Истина);
			СсылкаНаДДДопДанныхЭД = "";
			Если ДопДанныеЭД.Свойство("СсылкаНаДвоичныеДанныеФайла", СсылкаНаДДДопДанныхЭД)
				И ЗначениеЗаполнено(СсылкаНаДДДопДанныхЭД) Тогда
				ДанныеДопФайла = ПолучитьИзВременногоХранилища(СсылкаНаДДДопДанныхЭД);
			
				Если ЗначениеЗаполнено(ДопДанныеЭД.Расширение) Тогда
					ИмяФайлаДопДанных = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(ДопДанныеЭД.Расширение);
				Иначе
					ИмяФайлаДопДанных = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
				КонецЕсли;
			
				Если ИмяФайлаДопДанных = Неопределено Тогда
					ТекстОшибки = НСтр("ru = 'Не удалось получить доп. дпнные электронного документа. Проверьте настройку рабочего каталога'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
					Возврат Неопределено;
				КонецЕсли;
				ДанныеДопФайла.Записать(ИмяФайлаДопДанных);
			КонецЕсли;
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
			
			ТабличныйДокумент = ФайлДанныхЭД(СсылкаНаЭД.ЭлектронныйДокументВладелец, ИмяФайла);
			Возврат ТабличныйДокумент;
		ИначеЕсли Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
			
			ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
			ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог(,СсылкаНаЭД.УникальныйИдентификатор());
			
			Если ПапкаДляРаспаковки = Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось просмотреть электронный документ. Проверьте настройку рабочего каталога'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Возврат Неопределено;
			КонецЕсли;
			
			Попытка
				ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
					ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
																	   ТекстОшибки,
																	   ТекстСообщения);
				Возврат Неопределено;
			КонецПопытки;
			
			ФлагПросмотра = Ложь;
			ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
				
				ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
				Если Найти(РаспакованныйФайл.Имя,"packageDescription") Тогда
					Возврат ИмяФайла;
				КонецЕсли;
				
				ТабличныйДокумент = ЭлектронныеДокументыВнутренний.СформироватьПечатнуюФормуЭД(РаспакованныйФайл.ПолноеИмя,
																								 СсылкаНаЭД.НаправлениеЭД,
																								 СсылкаНаЭД.УникальныйИдентификатор(),
																								 ,
																								 СсылкаНаЭД.Наименование);
					
				Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
					Возврат ТабличныйДокумент;
				КонецЕсли;
				
			КонецЦикла;
			
			ФайлыАрхиваMXL = НайтиФайлы(ПапкаДляРаспаковки, "*.mxl");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваMXL Цикл
				ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
				ТабличныйДокумент = Новый ТабличныйДокумент;
				ТабличныйДокумент.Прочитать(ИмяФайлаДанных);
				УдалитьФайлы(ПапкаДляРаспаковки);
				Возврат ТабличныйДокумент;
			КонецЦикла;
			
			ФайлыАрхиваHTML = НайтиФайлы(ПапкаДляРаспаковки, "*.html");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваHTML Цикл
				Возврат РаспакованныйФайл.ПолноеИмя;
			КонецЦикла;
			
			ФайлыАрхиваDOCX = НайтиФайлы(ПапкаДляРаспаковки, "*.docx");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваDOCX Цикл
				Возврат РаспакованныйФайл.ПолноеИмя;
			КонецЦикла;
			
			ФайлыАрхиваXLS = НайтиФайлы(ПапкаДляРаспаковки, "*.xls");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваXLS Цикл
				Возврат РаспакованныйФайл.ПолноеИмя;
			КонецЦикла;
			
			ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
				Возврат РаспакованныйФайл.ПолноеИмя;
			КонецЦикла;
			
		ИначеЕсли Найти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
			Если СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
			
				ИмяФайлаДанных = ИмяФайла;
				ТабличныйДокумент = ЭлектронныеДокументыВнутренний.СформироватьПечатнуюФормуЭД(ИмяФайла,
																								 СсылкаНаЭД.НаправлениеЭД,
																								 СсылкаНаЭД.УникальныйИдентификатор(),
																								 ИмяФайлаПодчиненногоЭД,
																								 СсылкаНаЭД.Наименование,
																								 ИмяФайлаДопДанных);
			
				Если ТипЗнч(ТабличныйДокумент)=Тип("ТабличныйДокумент") Тогда
					Возврат ТабличныйДокумент;
				КонецЕсли;
			
			ИначеЕсли СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ЗапросВыписки
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ВыпискаБанка Тогда
			
				ИмяФайлаДанных = ИмяФайла;
				ТабличныйДокумент = ЭлектронныеДокументыВнутренний.СформироватьПечатнуюФормуЭД(ИмяФайла,
																								 СсылкаНаЭД.НаправлениеЭД,
																								 СсылкаНаЭД.УникальныйИдентификатор(),
																								 ИмяФайлаПодчиненногоЭД,
																								 СсылкаНаЭД.УникальныйИдентификатор());
			
				Если ТипЗнч(ТабличныйДокумент)=Тип("ТабличныйДокумент") Тогда
					Возврат ТабличныйДокумент;
				КонецЕсли;

			КонецЕсли;
		Иначе
			
			Возврат ИмяФайла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВыполнитьПросмотрЭДИзБДСервер(Отказ = Ложь)
	
	ДанныеЭД = ФайлДанныхЭД();
	Если ДанныеЭД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ДанныеЭД) = Тип("ТабличныйДокумент") Тогда
		ТабличныйДокументФормы = ДанныеЭД;
		ИсходныйТабличныйДокумент = ДанныеЭД;
		ОпределитьНаличиеДопДанныхСкрытьФлаг();
		Если ЕстьДопДанные Тогда
			СкрытьДопДанные(ОтключитьВыводДопДанных);
		КонецЕсли;
		Элементы.ГруппаСодержимоеДокумента.ТекущаяСтраница = Элементы.СтраницаТабличныйДокумент;
	ИначеЕсли ВРег(Сред(ДанныеЭД,СтрДлина(ДанныеЭД)-4)) = ".HTML" Тогда
		ПутьКФайлуПросмотра = ДанныеЭД;
		Элементы.ГруппаСодержимоеДокумента.ТекущаяСтраница = Элементы.СтраницаДругойФормат;
	Иначе
		ЗапуститьПриложение(ДанныеЭД);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуОповещенияНаСервере()
	
	ЭтаФорма.Прочитать();
	ЗаполнитьТаблицуЭЦП();
	ОбновитьСтатусЭД();
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДокументПоЭД(ОбъектМетаданных, ДокументЗагружен)
	
	Попытка
		ПерезаполнитьДокументИБПоЭД(Объект.ВладелецФайла, Объект.Ссылка, ДокументЗагружен);
	Исключение
	КонецПопытки;
	
	Если ДокументЗагружен Тогда
		УстановитьСостояниеЭДПоСтатусу();
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ЭлектронныеДокументыСлужебный.ПолучитьПредставлениеЭД(Объект.Ссылка);
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект.ВладелецФайла)).ПолноеИмя();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеЭДПоСтатусу()
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(Объект.Ссылка) Тогда
		
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Объект.ВладелецФайла);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			НоваяЗаписьНабора.СостояниеВерсииЭД   = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(Объект.Ссылка);
			НоваяЗаписьНабора.ЭлектронныйДокумент = Объект.Ссылка;
			НаборЗаписей.Записать();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДокументИБПоЭД(СсылкаНаВладельца, СсылкаНаЭД, ОбъектПерезаполнен=Ложь)
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаВладельца) ИЛИ НЕ ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Возврат;
	КонецЕсли;
	
	// Имя файла данных заполняться должно при чтении данных.
	ДанныеНаДиске = Новый Файл(ИмяФайлаДанных);
	Если НЕ ДанныеНаДиске.Существует() Тогда
		ШаблонСообщения = НСтр("ru = 'Файл данных не обнаружен: %1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяФайлаДанных);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВладелецЭД",     СсылкаНаВладельца);
	СтруктураПараметров.Вставить("ПолноеИмяФайла", ИмяФайлаДанных);
	
	СтруктураЭД = ЭлектронныеДокументыВнутренний.РазобратьФайлДанных(СтруктураПараметров);
	ОбъектПерезаполнен =  СтруктураЭД.Загружен;
	
КонецПроцедуры

&НаСервере
Процедура ПерепривязатьЭлектронныйДокумент(ВыбранноеЗначение)
	
	ЭлектронныйДокумент = РеквизитФормыВЗначение("Объект");
	СтарыйВладелец = ЭлектронныйДокумент.ВладелецФайла;
	ЭлектронныйДокумент.ВладелецФайла = ВыбранноеЗначение;
	Если Не ЗначениеЗаполнено(ЭлектронныйДокумент.Автор) Тогда
		ЭлектронныйДокумент.Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	ЭлектронныйДокумент.Записать();
	
	ОбновитьСостояниеЭДВладельцев(ЭлектронныйДокумент.Ссылка, СтарыйВладелец, ВыбранноеЗначение);
	ЗначениеВРеквизитФормы(ЭлектронныйДокумент, "Объект");
	
	ТекстДокументИБ = Строка(Объект.ВладелецФайла.Ссылка)
		+ ?(ЗначениеЗаполнено(ТекстСостояния), ", состояние: " + ТекстСостояния,"");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеЭДВладельцев(ЭД, СтарыйВладелец, НовыйВладелец)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.ЭлектронныйДокумент = &ЭлектронныйДокумент
	|	И СостоянияЭД.СсылкаНаОбъект = &СсылкаНаСтарыйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияЭД.СсылкаНаОбъект
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	(НЕ СостоянияЭД.ЭлектронныйДокумент = ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка))
	|	И СостоянияЭД.СсылкаНаОбъект = &СсылкаНаНовыйДокумент";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭД);
	Запрос.УстановитьПараметр("СсылкаНаСтарыйДокумент", СтарыйВладелец);
	Запрос.УстановитьПараметр("СсылкаНаНовыйДокумент", НовыйВладелец);
	
	Выборка = Запрос.ВыполнитьПакет();
	
	Результат1 = Выборка[0].Выбрать();
	Если Результат1.Следующий() Тогда
		ЗапросПоПослВерсии = Новый Запрос;
		ЗапросПоПослВерсии.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЭДПрисоединенныеФайлы.Ссылка
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
		|ГДЕ
		|	ЭДПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭДПрисоединенныеФайлы.НомерВерсииЭД УБЫВ";
		
		ЗапросПоПослВерсии.УстановитьПараметр("ВладелецФайла", СтарыйВладелец);
		
		РезультатЗапросаПоПослВерсии = ЗапросПоПослВерсии.Выполнить().Выбрать();
		Если РезультатЗапросаПоПослВерсии.Следующий() Тогда
			НовыйАктуальныйЭД  = РезультатЗапросаПоПослВерсии.Ссылка;
		Иначе	
			НовыйАктуальныйЭД = Неопределено;
		КонецЕсли;
		ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(СтарыйВладелец, НовыйАктуальныйЭД)
	КонецЕсли;
	
	Результат2 = Выборка[1].Выбрать();
	Если НЕ Результат2.Следующий() Тогда
		ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьНовуюВерсиюЭД(НовыйВладелец, ЭД);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтатус(КартаСтатусовЭД, Статус, Значение = Ложь)
	
	НовСтрока = КартаСтатусовЭД.Добавить();
	НовСтрока.Статус = Статус;
	НовСтрока.Пройден = Значение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКартуСтатусовЭД(КартаСтатусовЭД, ЭД)
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭД.Ссылка,
		"ВидЭД, НаправлениеЭД, ВерсияРегламентаЭДО, Организация, Контрагент, СоглашениеЭД");
	
	НастройкиСтатусов = Новый ТаблицаЗначений;
	НастройкиСтатусов.Колонки.Добавить("СпособОбмена");
	НастройкиСтатусов.Колонки.Добавить("Направление");
	НастройкиСтатусов.Колонки.Добавить("ВидЭД");
	НастройкиСтатусов.Колонки.Добавить("ИспользоватьПодпись");
	НастройкиСтатусов.Колонки.Добавить("ИспользоватьКвитанции");
	НастройкиСтатусов.Колонки.Добавить("ИспользуетсяНесколькоПодписей");
	НастройкиСтатусов.Колонки.Добавить("ВерсияРегламентаЭДО");
	
	Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение
		ИЛИ ((ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
			ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
			И ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий)
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении Тогда
		
		
		СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.СоглашениеЭД, "СпособОбменаЭД");
		
		НоваяСтрока = НастройкиСтатусов.Добавить();
		НоваяСтрока.СпособОбмена          = СпособОбменаЭД;
		НоваяСтрока.Направление           = ПараметрыЭД.НаправлениеЭД;
		НоваяСтрока.ВидЭД                 = ПараметрыЭД.ВидЭД;
		НоваяСтрока.ИспользоватьПодпись   = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи");
		НоваяСтрока.ИспользоватьКвитанции = Ложь;
		НоваяСтрока.ИспользуетсяНесколькоПодписей = ПараметрыЭД.СоглашениеЭД.СертификатыНеобходимыхПодписей.Количество() > 1;
		НоваяСтрока.ВерсияРегламентаЭДО   = ПараметрыЭД.ВерсияРегламентаЭДО;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидЭД",          ПараметрыЭД.ВидЭД);
		Запрос.УстановитьПараметр("НаправлениеЭД",  ПараметрыЭД.НаправлениеЭД);
		Запрос.УстановитьПараметр("Контрагент",     ПараметрыЭД.Контрагент);
		Запрос.УстановитьПараметр("Организация",    ПараметрыЭД.Организация);
		Запрос.УстановитьПараметр("ИспользуетсяЭЦП",
			ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьЭлектронныеЦифровыеПодписи"));
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ИспользуетсяЭЦП
		|			ТОГДА Соглашение.ИспользоватьПодпись
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИспользоватьПодпись,
		|	Соглашение.ИспользоватьКвитанции,
		|	Соглашение.ВидЭД,
		|	Соглашение.Направление,
		|	Соглашение.СпособОбмена
		|ИЗ
		|	(ВЫБРАТЬ
		|		СоглашенияОбИспользованииЭДВходящиеДокументы.ИспользоватьЭЦП КАК ИспользоватьПодпись,
		|		СоглашенияОбИспользованииЭДВходящиеДокументы.ОжидатьКвитанциюОДоставке КАК ИспользоватьКвитанции,
		|		ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий) КАК Направление,
		|		СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент КАК ВидЭД,
		|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СпособОбменаЭД КАК СпособОбмена,
		|		0 КАК Приоритет
		|	ИЗ
		|		Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
		|	ГДЕ
		|		СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = &ВидЭД
		|		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Организация = &Организация
		|		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Контрагент = &Контрагент
		|		И &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
		|		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.статусыСоглашенийЭД.Действует)
		|		И СоглашенияОбИспользованииЭДВходящиеДокументы.Формировать
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ОжидатьКвитанциюОДоставке,
		|		ВЫБОР
		|			КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
		|		КОНЕЦ,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент,
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД,
		|		0
		|	ИЗ
		|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
		|	ГДЕ
		|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.статусыСоглашенийЭД.Действует)
		|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
		|		И (&НаправлениеЭД = ЗНАЧЕНИЕ(перечисление.НаправленияЭД.Исходящий)
		|				ИЛИ &НаправлениеЭД = ЗНАЧЕНИЕ(перечисление.НаправленияЭД.Интеркампани))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ИСТИНА,
		|		NULL,
		|		&НаправлениеЭД,
		|		&ВидЭД,
		|		СоглашениеЧерезОЭДО.Ссылка.СпособОбменаЭД,
		|		1
		|	ИЗ
		|		РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашениеЧерезОЭДО
		|			ПО УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = СоглашениеЧерезОЭДО.Ссылка
		|	ГДЕ
		|		НЕ СоглашениеЧерезОЭДО.Ссылка.ПометкаУдаления
		|		И СоглашениеЧерезОЭДО.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
		|		И СоглашениеЧерезОЭДО.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
		|		И СоглашениеЧерезОЭДО.Ссылка.Организация = &Организация
		|		И УчастникиОбменовЭДЧерезОператоровЭДО.Участник = &Контрагент
		|		И УчастникиОбменовЭДЧерезОператоровЭДО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
		|		И НЕ &НаправлениеЭД = ЗНАЧЕНИЕ(перечисление.НаправленияЭД.Интеркампани)) КАК Соглашение
		|
		|УПОРЯДОЧИТЬ ПО
		|	Соглашение.Приоритет";
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			НоваяСтрока = НастройкиСтатусов.Добавить();
			НоваяСтрока.СпособОбмена          = Результат.СпособОбмена;
			НоваяСтрока.Направление           = Результат.Направление;
			НоваяСтрока.ВидЭД                 = Результат.ВидЭД;
			НоваяСтрока.ИспользоватьПодпись   = Результат.ИспользоватьПодпись;
			НоваяСтрока.ИспользоватьКвитанции = Результат.ИспользоватьКвитанции;
			//НоваяСтрока.ИспользуетсяНесколькоПодписей = ПараметрыСоглашения.СертификатыНеобходимыхПодписей.Количество() > 1;
			НоваяСтрока.ВерсияРегламентаЭДО   = ПараметрыЭД.ВерсияРегламентаЭДО;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиСтатусов.Количество() > 0 Тогда
		УстановитьСтатусы(КартаСтатусовЭД, НастройкиСтатусов[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусы(КартаСтатусовЭД, НастройкиСтатусов)
	
	МассивСтатусов = ЭлектронныеДокументыСлужебный.ВернутьМассивСтатусовЭД(НастройкиСтатусов);
	Для Каждого Элемент Из МассивСтатусов Цикл
		ДобавитьСтатус(КартаСтатусовЭД, Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуСтатусовЭД(ЭД)
	
	КартаСтатусовЭД = Новый ТаблицаЗначений;
	КартаСтатусовЭД.Колонки.Добавить("Статус");
	КартаСтатусовЭД.Колонки.Добавить("Пройден");
	
	Если ЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен ИЛИ ЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
		
		Если ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыЭД.Получен;
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыЭД.Отклонен;
		Иначе
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = Перечисления.СтатусыЭД.Сформирован;
			
			Стр = КартаСтатусовЭД.Добавить();
			Стр.Статус = ЭД.СтатусЭД;
		КонецЕсли;
		
		КартаСтатусовЭД.ЗаполнитьЗначения(Истина, "Пройден");
		
	Иначе
		
		ЗаполнитьКартуСтатусовЭД(КартаСтатусовЭД, ЭД);
		ПризнакПройден = Истина;
		Для Каждого ТекСтрока Из КартаСтатусовЭД Цикл 
			ТекСтрока.Пройден = ПризнакПройден;
			Если ТекСтрока.Статус = Перечисления.СтатусыЭД.Утвержден
				И (ЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен ИЛИ ЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем) Тогда
				ТекСтрока.Статус = Перечисления.СтатусыЭД.Отклонен;
				Прервать;
			КонецЕсли;
			Если ЭД.СтатусЭД = ТекСтрока.Статус Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КартаСтатусовЭД;
	
КонецФункции

&НаСервере
Функция ПечатнаяФормаСЭЦП()
	
	Если Объект.ЭлектронныеЦифровыеПодписи.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("МакетЭЦП");
	
	Область = Макет.ПолучитьОбласть("Шапка");
	Область.Параметры.Документ = ИмяДокумента();
	Область.Параметры.Дата     = Формат(Объект.ДатаДокументаОтправителя, "ДЛФ=Д");
	Область.Параметры.Номер    = Объект.НомерДокументаОтправителя;
	ТабДок.Вывести(Область);
	
	Для Каждого ЭлектроннаяПодпись Из Объект.ЭлектронныеЦифровыеПодписи Цикл
		Область = Макет.ПолучитьОбласть("СтрокаСертификата");
		Область.Параметры.Заполнить(ЭлектроннаяПодпись);
		Область.Параметры.СтатусПодписи = ?(ЭлектроннаяПодпись.ПодписьВерна, "Верна", "Неверна")
			+" (" + ЭлектроннаяПодпись.ДатаПроверкиПодписи + ")";
		ТабДок.Вывести(Область);
	КонецЦикла;
	Область = Макет.ПолучитьОбласть("Подвал");
	Область.Параметры.ИдентификаторДокумента = Объект.Ссылка;
	ТабДок.Вывести(Область);
	ТабДок.ТолькоПросмотр  = Истина;
	ТабДок.ОтображатьСетку = Ложь;
	
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Функция ИмяДокумента()
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		
		Возврат "Заказ поставщику";
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		
		Возврат "Каталог товаров";
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		
		Возврат "Товарная накладная";
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		
		Возврат "Заказ клиента";
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		
		Возврат "Прайс-лист"
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		Возврат "Счет";
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		
		Возврат "Счет-фактура";
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот
		ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		Возврат "Акт выполненных работ";
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		
		Возврат "Отчет о продажах комиссионного товара";
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		
		Возврат "Отчет о списании комиссионного товара";
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями Тогда
		
		Возврат "Передача товаров между организациями";
	ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями Тогда
		
		Возврат "Возврат товаров между организациями";
	КонецЕсли;
	Возврат "Документ";
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСертификат(НомерСтроки, Отпечаток)
	
	АдресДанныхСертификата = АдресДанныхСертификата(НомерСтроки);
	ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(АдресДанныхСертификата);
	
	ВыбранныйСертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
	Если ВыбранныйСертификат=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сертификат не найден");
		Возврат;
	КонецЕсли;
	
	СтруктураСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(ВыбранныйСертификат);
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата",
			СтруктураСертификата, Отпечаток, АдресДанныхСертификата);
		СтруктураВозврата = ОткрытьФормуМодально("Общаяформа.СертификатЭЦП", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхСертификата(НомерСтроки)
	
	ДвоичныеДанныеСертификата = Объект.Ссылка.ЭлектронныеЦифровыеПодписи[НомерСтроки-1].Сертификат.Получить();
	СсылкаНаХранилищеДанныхСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, ЭтаФорма.УникальныйИдентификатор);
	
	Возврат СсылкаНаХранилищеДанныхСертификата;
	
КонецФункции

&НаСервере
Процедура ДобавитьСертификатПодписиВСоглашение(Отпечаток, СертификатДобавлен)
	
	Если НЕ ЗначениеЗаполнено(Объект.СоглашениеЭД) Тогда
		Возврат ;
	КонецЕсли;
	
	ОбъектЭД = РеквизитФормыВЗначение("Объект");
	НайденнаяСтрока = ОбъектЭД.ЭлектронныеЦифровыеПодписи.Найти(Отпечаток, "Отпечаток");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		СоглашениеОбъект = Объект.СоглашениеЭД.ПолучитьОбъект();
		
		НоваяСтрока = СоглашениеОбъект.СертификатыПодписейКонтрагента.Добавить();
		НоваяСтрока.Сертификат = НайденнаяСтрока.Сертификат;
		НоваяСтрока.Отпечаток  = Отпечаток;
		СоглашениеОбъект.Записать();
		
		СертификатДобавлен = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификатВДоверенные(ДанныеПодписи)
	
	Если ДанныеПодписи <> Неопределено И ДанныеПодписи.ОтсутствуетВСписке Тогда 
		Текст = НСтр("ru = 'Добавить сертификат %1 в список ожидаемых сертификатов контрагента?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДанныеПодписи.КомуВыданСертификат);
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ПоказатьСертификат(Элементы.ЭЦП.ТекущиеДанные.НомерСтроки,Элементы.ЭЦП.ТекущиеДанные.Отпечаток);
			Возврат;
		КонецЕсли;
		
		// Добавим сертификат в Соглашение.
		СертификатДобавлен = Ложь;
		ДобавитьСертификатПодписиВСоглашение(ДанныеПодписи.Отпечаток, СертификатДобавлен);
		Если НЕ СертификатДобавлен Тогда 
			ТекстСообщения = НСтр("ru = 'Ошибка добавления сертификата подписи в список ожидаемых сертификатов!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Иначе
			ЗаполнитьТаблицуЭЦП();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьТекстУточненияВОбъект(ТекстУточнения)
	
	ЭлектронныйДокумент = РеквизитФормыВЗначение("Объект");
	ЭлектронныйДокумент.ПричинаОтклонения = ТекстУточнения;
	ЭлектронныйДокумент.Записать();
	ЗначениеВРеквизитФормы(ЭлектронныйДокумент, "Объект");
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьОтклонениеЭД()
	
	ВозвращаемоеЗначение = Ложь;
	Если НЕ ЭДОтклонен И НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ЭтоСлужебныйДокумент(Объект.Ссылка)
		И МожноОтклонитьЭтотЭД() Тогда
		// Нельзя снять отклонение документа.
		ТекстВопроса = НСтр("ru = 'Для отклонения документа необходимо указать причину отклонения.
		|Отменить отклонение документа в дальнейшем будет невозможно.
		|Отклонить документ?'");
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, "Отклонить");
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, "Не отклонять");
		Ответ = Вопрос(ТекстВопроса, СписокКнопок, 60,
			КодВозвратаДиалога.Нет, НСтр("Отклонение электронного документа..."));
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ТекстУточнения = "";
			УточнениеВведено = ВвестиСтроку(ТекстУточнения, НСтр("ru = 'Укажите причины отклонения документа'"), , Истина);
			
			Если УточнениеВведено И ЗначениеЗаполнено(ТекстУточнения) Тогда
				Текст = НСтр("ru = '%1, %2:
				|%3'");
				ТекстУточнения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, Объект.Организация,
					ПользователиКлиентСервер.ТекущийПользователь(), ТекстУточнения);
				Если Объект.НаправлениеЭД = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий")
					// Для входящего документа, необходимо сформировать ЭД Уведомление об уточнении.
					ИЛИ ЭтоПрямойОбмен() // ограничение на прямой обмен
					ИЛИ СформироватьПодписатьЭДУведомлениеОбУточнении(Объект.Ссылка, ТекстУточнения) Тогда
					
					ВозвращаемоеЗначение = Истина;
					ПоместитьТекстУточненияВОбъект(ТекстУточнения);
					Если ЗначениеЗаполнено(СсылкаНаМассивСертификатов) Тогда
						ИзменитьВидимостьДоступность();
					Иначе
						УстановитьВидимостьДоступностьНаКлиенте();
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекстСообщения = НСтр("ru = 'Для отклонения документа необходимо указать причину отклонения!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Функция ЭтоПрямойОбмен()
	
	СпособОбменаЭД = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.СоглашениеЭД, "СпособОбменаЭД");
	Возврат СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском;
	
КонецФункции

&НаКлиенте
Функция СформироватьПодписатьЭДУведомлениеОбУточнении(СсылкаНаЭД, ТекстУточнения)
	
	КолСформированных = 0;
	КолУтвержденных   = 0;
	КолПодписанных    = 0;
	КолПодготовленных = 0;
	КолОтправленных = 0;
	
	ФайлУведомления = ЭлектронныеДокументыСлужебныйВызовСервера.СформироватьЭДУведомлениеОбУточнении(СсылкаНаЭД,
																									 ТекстУточнения);
	
	Если ФайлУведомления <> Неопределено Тогда
		
		КолСформированных = 1;
		КолУтвержденных   = 1;
		
		ДобавленныеФайлы  = Новый Массив;
		ДобавленныеФайлы.Добавить(ФайлУведомления);
		
		СертификатПодписи = ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСертификатПодписиСлужебногоДокумента(
																			СсылкаНаЭД, "УведомлениеОбУточнении");
		Если СертификатПодписи <> Неопределено Тогда
			ПарольКСертификату = Неопределено;
			КолПодписанных = ЭлектронныеДокументыСлужебныйКлиент.ПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы, СертификатПодписи,
				ПарольКСертификату);
			Если КолПодписанных > 0 Тогда
				СоответствиеПаролей = Новый Соответствие;
				СоответствиеПаролей.Вставить(СертификатПодписи, ПарольКСертификату);
				СтруктураПаролейИМаркеров = Новый Структура;
				Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
					СоответствиеМаркеров = ЭлектронныеДокументыСлужебныйКлиент.СоответствиеМаркеров(СоответствиеПаролей);
				КонецЕсли;
				СтруктураПаролейИМаркеров.Вставить("ПаролиКСертификатам", СоответствиеПаролей);
				СтруктураПаролейИМаркеров.Вставить("Маркеры", СоответствиеМаркеров);
				СтруктураРезультата = ЭлектронныеДокументыСлужебныйКлиент.ПодготовитьИОтправитьПЭД(
																				ДобавленныеФайлы,
																				Истина,
																				СтруктураПаролейИМаркеров);
				КолОтправленных = КолОтправленных + СтруктураРезультата.КолОтправленных;
				КолПодготовленных = КолПодготовленных + СтруктураРезультата.КолПодготовленных;
			КонецЕсли;
		КонецЕсли;
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
	ЭлектронныеДокументыСлужебныйКлиент.ВывестиИнформациюОбОбработанныхЭД(КолСформированных,
																		  КолУтвержденных,
																		  КолПодписанных,
																		  КолПодготовленных,
																		  КолОтправленных);
	
	Возврат ЗначениеЗаполнено(ФайлУведомления);
	
КонецФункции

&НаСервере
Процедура УдалитьФайлыНаСервере()
	
	Если ЗначениеЗаполнено(Объект.НомерЭД) Тогда
		УдалитьФайлы(КаталогВременныхФайлов() + Объект.НомерЭД);
	КонецЕсли;
	УдалитьФайлы(ИмяФайла);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоНеустановленныхПодписей()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Отпечаток
	               |ПОМЕСТИТЬ УстановленныеПодписи
	               |ИЗ
	               |	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	               |ГДЕ
	               |	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка = &СсылкаНаЭД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей.Сертификат) КАК КоличествоНеобходимыхПодписей
	               |ИЗ
	               |	Справочник.СоглашенияОбИспользованииЭД.СертификатыНеобходимыхПодписей КАК СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей
	               |ГДЕ
	               |	НЕ СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей.Сертификат.Отпечаток В
	               |				(ВЫБРАТЬ
	               |					УстановленныеПодписи.Отпечаток
	               |				ИЗ
	               |					УстановленныеПодписи КАК УстановленныеПодписи)
	               |	И СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей.Ссылка = &СоглашениеЭД";
	Запрос.УстановитьПараметр("СсылкаНаЭД", Объект.Ссылка);
	Запрос.УстановитьПараметр("СоглашениеЭД", Объект.СоглашениеЭД);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	
	Возврат РезультатЗапроса.КоличествоНеобходимыхПодписей;
	
КонецФункции

&НаСервере
Функция ЭДОтклонен()
	
	ЭДОтклонен = (Объект.СтатусЭД = Перечисления.СтатусыЭД.Отклонен
					  ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					  ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненБанком
					  ИЛИ Объект.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи);
	Возврат ЭДОтклонен
	
КонецФункции

&НаСервере
Функция СкрытьОбластьТабличногоДокумента(ИмяОбласти)
	
	// Находим область дополнительных данных и скрываем ее.
	// Если область ДД имеет левую и/или правую границы, то это вертикальная область, иначе горизонтальная область.
	// Горизонтальная область выводится внизу таблицы, поэтому находим шапку горизонтальной области ДД и скрываем строки
	// от шапки ДД до конца всей таблицы.
	// Вертикальная область присоединяется к основной таблице данных, при этом, если таблица не помещается на одной странице,
	// то именуемая область будет присутствовать только на последней странице. В этом случае алгоритм определения скрываемой
	// области следующий:
	// 1. находим именованную область ДД (например ОбластьДД).
	// 2. вычисляем верхнюю границу области ДД: находим область шапки, следующая строка за областью шапки - будет верхней
	//  строкой области ДД, поэтому берем низ области шапки + 1.
	// 3. т.к. доп.данные присоединяются к основным данным справа, то в качестве нижней границы можно взять высоту табличного документа.
	//
	// Если область "Шапка" не существует, то область ДД может скрываться некорректно/неполностью.
	ЕстьОбластьДД = ТабличныйДокументФормы.Области.Найти(ИмяОбласти);
	Если ЕстьОбластьДД <> Неопределено Тогда
		ОбластьДДТаблицы = ТабличныйДокументФормы.Область(ИмяОбласти);
		ОбластьШапки = ТабличныйДокументФормы.Область("Шапка");
		Верх = ?(ОбластьДДТаблицы.Лево = 0 И ОбластьДДТаблицы.Право = 0 ИЛИ ОбластьШапки = Неопределено,
			ОбластьДДТаблицы.Верх, ОбластьШапки.Низ + 1);
		УдаляемаяОбласть = ТабличныйДокументФормы.Область(Верх, ОбластьДДТаблицы.Лево,
			ТабличныйДокументФормы.ВысотаТаблицы, ОбластьДДТаблицы.Право);
		ТабличныйДокументФормы.УдалитьОбласть(УдаляемаяОбласть);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СкрытьДопДанные(Скрыть)
	
	Если Скрыть Тогда
		СкрытьОбластьТабличногоДокумента("ОбластьДД");
		СкрытьОбластьТабличногоДокумента("ОбластьДДСЭЦП");
		СкрытьОбластьТабличногоДокумента("ОбластьДДБезЭЦП");
		СкрытьОбластьТабличногоДокумента("ДопДанныеШапки_Шапка");
	Иначе
		ТабличныйДокументФормы = ИсходныйТабличныйДокумент.ПолучитьОбласть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНаличиеДопДанныхСкрытьФлаг()
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик 
	 ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
	 ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
	 ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
	 ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.СчетФактура
	 ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
	 ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		ЕстьДопДанные = Истина;
	Иначе
		ЕстьДопДанные = Ложь;
	КонецЕсли;
	Элементы.ОтключитьВыводДопДанных.Видимость = ЕстьДопДанные;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПерезаполнитьДокумент(Команда)
	
	СопоставлятьНоменклатуруПередЗаполнениемДокумента = Ложь;
	ЭлектронныеДокументыКлиентПереопределяемый.СопоставлятьНоменклатуруПередЗаполнениемДокумента(СопоставлятьНоменклатуруПередЗаполнениемДокумента);
	
	Если СопоставлятьНоменклатуруПередЗаполнениемДокумента Тогда
		СтруктураПараметров = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьПараметрыФормыСопоставленияНоменклатуры(
			Объект.Ссылка);
		Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
			ОткрытьФормуМодально(СтруктураПараметров.ИмяФормы, СтруктураПараметров.ПараметрыОткрытияФормы, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
	ОбъектМетаданных = ""; ДокументЗагружен = Ложь;
	ПерезаполнитьДокументПоЭД(ОбъектМетаданных, ДокументЗагружен);
	
	Если ДокументЗагружен Тогда
		Оповестить("ОбновитьСостояниеЭД");
		Оповестить("ОбновитьДокументИБПослеЗаполнения");
		
		Если Не СопоставлятьНоменклатуруПередЗаполнениемДокумента Тогда
			СтруктураПараметров = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьПараметрыФормыСопоставленияНоменклатуры(
				Объект.Ссылка);
				
			Если ЗначениеЗаполнено(СтруктураПараметров) Тогда
				ЗначениеВозврата = ОткрытьФормуМодально(СтруктураПараметров.ИмяФормы,
				СтруктураПараметров.ПараметрыОткрытияФормы, ЭтаФорма);
				Если НЕ ЭтаФорма.Объект = Неопределено И ЗначениеЗаполнено(ЗначениеВозврата) Тогда
					
					Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
						ДанныеФормы = ЭтаФорма.Объект;
					Иначе
						ДанныеФормы = ЭтаФорма.Объект.ДокументОбъект;
					КонецЕсли;
					
					ЭлектронныеДокументыСлужебныйВызовСервера.ЗаполнитьИсточник(ДанныеФормы, ЗначениеВозврата);
					
					Если ТипЗнч(ЭтаФорма) = Тип("УправляемаяФорма") Тогда
						КопироватьДанныеФормы(ДанныеФормы, ЭтаФорма.Объект);
					Иначе
						ЭтаФорма.Объект.ДокументОбъект = ДанныеФормы;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекстСостоянияВывод = НСтр("ru = 'Документ перезаполнен.'");
		ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСостоянияВывод);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	Если ОбработатьОтклонениеЭД() Тогда
		ЭДОтклонен = Истина;
		ИзменитьСтатусОтклонить();
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	ЭтаФорма.Модифицированность = Ложь;
	ТекстПредупреждения = НСтр("ru = 'Внимание! Не рекомендуется выбирать документ отражения в учете вручную. Продолжить?'");
	Ответ = Вопрос(ТекстПредупреждения, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВыбЗнач = Объект.ВладелецФайла;
	ОписаниеТипов = Новый ОписаниеТипов();
	
	Если ВвестиЗначение(ВыбЗнач, "Укажите документ отражения в учете") Тогда
		ПерепривязатьЭлектронныйДокумент(ВыбЗнач);
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
	ЭтаФорма.Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЭДНаДиск(Команда)
	
	ПрисоединенныйФайл = ЭтаФорма.Объект.Ссылка;
	
	ДанныеФайла = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор);
	ПолноеИмяФайла = ДанныеФайла.ИмяФайла;
	
	Если НЕ ЭтоПрямойОбмен() И ПолучитьДанныеФайлаОператора(ДанныеФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьФайл(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла, ПолноеИмяФайла, Истина);
	
	Настройка = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ДействияПриСохраненииСЭЦП;
	Если Настройка = "Спрашивать" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Объект",                  ПрисоединенныйФайл);
		ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
		
		МассивСтруктурПодписей = ОткрытьФормуМодально("ОбщаяФорма.ВыборПодписей", ПараметрыФормы);
		
	ИначеЕсли Настройка = "СохранятьВсеПодписи" Тогда
		МассивСтруктурПодписей = ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьВсеПодписи(ПрисоединенныйФайл,
			УникальныйИдентификатор);
	КонецЕсли;
	
	Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
		
		Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
			ИмяФайлаПодписи = СтруктураПодписи.ИмяФайлаПодписи;
			Если НЕ ЗначениеЗаполнено(ИмяФайлаПодписи) Тогда
				ИмяФайлаПодписи = ДанныеФайла.Наименование + ".p7s";
			КонецЕсли;
		
			// Сохраним Файл из БД на диск
			ПолучитьФайл(СтруктураПодписи.АдресПодписи, ИмяФайлаПодписи, Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеФайлаОператора(ДанныеФайла)
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(ДанныеФайла.Расширение);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ИмяВременногоФайла);
	
	Результат = Ложь;
	Пока ЧтениеХМЛ.Прочитать() Цикл
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "СвОЭДОтпр" Тогда
			Идентификатор = ЧтениеХМЛ.ПолучитьАтрибут("ИдЭДО");
			
			Если Не Найти(Идентификатор, "2AL") > 0 Тогда
				
				Результат = Истина;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПечатьСЭлектроннымиПодписями(Команда)
	
	ТабДок = ТабличныйДокументФормы;
	ТабДок.Напечатать();
	Если ТабДок.ВысотаТаблицы > 0 Тогда
		ТабДокЭЦП = ПечатнаяФормаСЭЦП();
		Если НЕ ТабДокЭЦП = Неопределено Тогда
			ТабДокЭЦП.Напечатать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверятьЭтомуСертификату(Команда)
	
	ДобавитьСертификатВДоверенные(Элементы.ЭЦП.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКЖурналуСобытийЭД(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПрисоединенныйФайл", Объект.Ссылка);
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ОткрытьФормуМодально("РегистрСведений.ЖурналСобытийЭД.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	
	Если Элементы.ЭЦП.ТекущиеДанные <> Неопределено Тогда
		ПоказатьСертификат(Элементы.ЭЦП.ТекущиеДанные.НомерСтроки, Элементы.ЭЦП.ТекущиеДанные.Отпечаток);
	Иначе
		ОчиститьСообщения();
		ТекстОшибки = НСтр("ru = 'Выберите сертификат в списке установленных подписей.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ОчиститьСообщения();
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСтатусыПодписей(Объект.Ссылка, Истина);
	Иначе
		ЭлектронныеДокументыСлужебныйКлиент.ОпределитьСтатусыПодписей(Объект.Ссылка);
	КонецЕсли;
	ЭтаФорма.Прочитать();
	ЗаполнитьТаблицуЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПодтверждениеЭД(Команда)
	
	ЭлектронныеДокументыСлужебныйКлиент.ОтправитьПодтверждениеЭД(Объект.ВладелецФайла, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД(Команда)
	
	НовыйЭД = Неопределено;
	ЭлектронныеДокументыСлужебныйКлиент.УтвердитьЭД(Объект.ВладелецФайла, Объект.Ссылка, , НовыйЭД);
		
	Если НовыйЭД <> Неопределено Тогда
		
		ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", Новый Структура("Ключ", НовыйЭД),
			ЭтаФорма.ВладелецФормы, ЭтаФорма.УникальныйИдентификатор, ЭтаФорма.Окно);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЭД(Команда)
	
	ОчиститьСообщения();
	
	ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(Объект.ВладелецФайла, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	
	ЭлектронныеДокументыКлиент.ОтправитьПовторноЭД(Объект.ВладелецФайла, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЭД(Команда)
	
	ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(Объект.ВладелецФайла, Объект.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ФОРМЫ

&НаКлиенте
Процедура ТекстДокументИБНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Объект.ВладелецФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричиныОтклоненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элемент.ТекущиеДанные.ПричинаОтклонения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВыводДопДанныхПриИзменении(Элемент)
	
	СкрытьДопДанные(ОтключитьВыводДопДанных);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЕЙ ТАБЛИЦЫ ЭЛЕКТРОННЫЕ ЦИФРОВЫЕ ПОДПИСИ

&НаКлиенте
Процедура ЭЦППриАктивизацииСтроки(Элемент)
	
	Если Элементы.ЭЦП.ТекущиеДанные <> Неопределено Тогда
		Элементы.ДоверятьСертификату.Доступность = Элементы.ЭЦП.ТекущиеДанные.ОтсутствуетВСписке;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭЦПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Найти(Поле.Имя, "ЭЦПКомуВыданСертификат")>0 Тогда
		ДобавитьСертификатВДоверенные(Элемент.ТекущиеДанные);
		Если Элемент.ТекущиеДанные <> Неопределено И НЕ Элемент.ТекущиеДанные.ОтсутствуетВСписке Тогда
			ПоказатьСертификат(Элемент.ТекущиеДанные.НомерСтроки, Элемент.ТекущиеДанные.Отпечаток);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("СсылкаНаОбъект") Тогда
		ОбъектСправочника = Параметры.СсылкаНаОбъект.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ОбъектСправочника, "Объект");
	КонецЕсли;
	
	Если Параметры.Свойство("СсылкаНаМассивСертификатов") Тогда
		СсылкаНаМассивСертификатов = Параметры.СсылкаНаМассивСертификатов;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЭДОтклонен = ЭДОтклонен();
		ТребуетсяПодпись = НеобходимоПодписать();
		ОбновитьСтатусЭД();
		ЭтаФорма.Заголовок = ЭлектронныеДокументыСлужебный.ПолучитьПредставлениеЭД(Объект.Ссылка);
		ЗаполнитьТаблицуЭЦП();
		
		Если НЕ Отказ Тогда
			ВыполнитьПросмотрЭДИзБДСервер(Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаМассивСертификатов) Тогда
		ИзменитьВидимостьДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ Отказ И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(СсылкаНаМассивСертификатов) Тогда
			УстановитьВидимостьДоступностьНаКлиенте();
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	УдалитьФайлыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Если Не ЗначениеЗаполнено(СсылкаНаМассивСертификатов) Тогда
			Попытка
				Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
					МассивСтруктурСертификатов = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМассивСтруктурСертификатов(Истина);
				Иначе
					МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
				КонецЕсли;
				СсылкаНаМассивСертификатов = ПоместитьВоВременноеХранилище(МассивСтруктурСертификатов, УникальныйИдентификатор);
			Исключение
			КонецПопытки;
		КонецЕсли;
		ВыполнитьОбработкуОповещенияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СкрытьДопДанные(ОтключитьВыводДопДанных);
	
КонецПроцедуры
