////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УсловиеПредоставленияПриИзмененииНаСервере();
	КритерийПримененияЗаОбъемПродажПриИзмененииНаСервере();
	ВариантОпределенияПериодаНакопительнойСкидкиПриИзмененииНаСервере();
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Наименование = АвтоНаименование(ЭтаФорма);
	Иначе
		АвтоНаименование(ЭтаФорма);
	КонецЕсли;
	
	Для каждого ВариантНаименования Из Элементы.Наименование.СписокВыбора Цикл
		Если Объект.Наименование = ВариантНаименования.Значение Тогда
			ИспользуетсяАвтоНаименование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не ЗначениеЗаполнено(Объект.Родитель)
		И ЗначениеЗаполнено(Параметры.ДанныеДляЗаполненияРодителя) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	УсловияПредоставленияСкидокНаценок.ЭтоГруппа КАК ЭтоГруппа,
		|	УсловияПредоставленияСкидокНаценок.Родитель КАК Родитель
		|ИЗ
		|	Справочник.УсловияПредоставленияСкидокНаценок КАК УсловияПредоставленияСкидокНаценок
		|ГДЕ
		|	УсловияПредоставленияСкидокНаценок.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", Параметры.ДанныеДляЗаполненияРодителя);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			Если Выборка.ЭтоГруппа Тогда
				Объект.Родитель = Параметры.ДанныеДляЗаполненияРодителя;
			Иначе
				Объект.Родитель = Выборка.Родитель;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	
	
	
	
	ИспользоватьСегментыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры");
	
	Для Каждого ЗначениеПеречисления Из Перечисления.УсловияПредоставленияСкидокНаценок Цикл
		
		Если (НЕ (ЗначениеПеречисления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу
			И НЕ ИспользоватьСегментыНоменклатуры))
			ИЛИ (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу
			И ЗначениеПеречисления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу) Тогда
			
			Элементы.УсловиеПредоставления.СписокВыбора.Добавить(ЗначениеПеречисления);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ОбновитьАвтонаименование(Модифицированность);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	НаименованиеИзмененоПользователем = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбластьОграниченияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТипСравненияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеУсловияПредоставленияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОграниченияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СегментНоменклатурыПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВариантНакопленияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПериодНакопленияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТипСравненияЗаНакопленныйОбъемПродажПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеУсловияПредоставленияЗаНакопленныйОбъемПродажПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОграниченияЗаНакопленныйОбъемПродажПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СегментНоменклатурыЗаНакопленныйОбъемПродажПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ГрафикОплатыПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СегментНоменклатурыОграниченияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВремяДействияПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПользователейПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ВидКартыЛояльностиПриИзменении(Элемент)
	ОбновитьАвтонаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	АвтоНаименование(ЭтаФорма);
	ВыбранныйЭлемент = ВыбратьИзСписка(Элементы.Наименование.СписокВыбора, Элемент);
	Если ВыбранныйЭлемент <> Неопределено Тогда
		Объект.Наименование = ВыбранныйЭлемент.Значение;
		НаименованиеИзмененоПользователем = Истина;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеПредоставленияПриИзменении(Элемент)
	
	УсловиеПредоставленияПриИзмененииНаСервере();
	Объект.Наименование = "";
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОпределенияПериодаНакопительнойСкидкиПриИзменении(Элемент)
	
	ВариантОпределенияПериодаНакопительнойСкидкиПриИзмененииНаСервере();
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КритерийПримененияЗаОбъемПродажПриИзменении(Элемент)
	
	КритерийПримененияЗаОбъемПродажПриИзмененииНаСервере();
	
	ОбновитьАвтонаименование(Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ОбщегоНазначенияУТКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура УсловиеПредоставленияПриИзмененииНаСервере()
	
	Элементы.ЗаРазовыйОбъемПродаж.Видимость              = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж);
	Элементы.ЗаНакопленныйОбъемПродаж.Видимость          = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж);
	Элементы.ЗаВремяДействия.Видимость                   = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи);
	Элементы.ЗаГрафикОплаты.Видимость                    = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты);
	Элементы.ЗаПервуюПродажуПартнеру.Видимость           = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПервуюПродажуПартнеру);
	Элементы.ЗаПробнуюПродажу.Видимость                  = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу);
	Элементы.ЗаФормуОплаты.Видимость                     = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты);
	Элементы.ОграничениеПоГруппеПользователей.Видимость  = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ОграничениеПоГруппеПользователей);
	Элементы.КартаЛояльностиНеЗарегистрирована.Видимость = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.КартаЛояльностиНеЗарегистрирована);
	Элементы.ЗаНаличиеКартыЛояльности.Видимость          = (Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНаличиеКартыЛояльности);
	
	Если    Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты
		ИЛИ Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ОграничениеПоГруппеПользователей
		ИЛИ Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.КартаЛояльностиНеЗарегистрирована
		ИЛИ Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНаличиеКартыЛояльности
		ИЛИ Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты
		ИЛИ Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу
		ИЛИ Объект.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи Тогда
		
		Объект.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе;
		Элементы.ОбластьОграничения.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КритерийПримененияЗаОбъемПродажПриИзмененииНаСервере()
	
	Если Объект.КритерийОграниченияПримененияЗаОбъемПродаж = Перечисления.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество Тогда
		
		Элементы.ВалютаОграничения.Видимость = Ложь;
		Элементы.ВалютаОграниченияЗаНакопленныйОбъемПродаж.Видимость = Ложь;
		
	Иначе
		
		Элементы.ВалютаОграничения.Видимость = Истина;
		Элементы.ВалютаОграниченияЗаНакопленныйОбъемПродаж.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВариантОпределенияПериодаНакопительнойСкидкиПриИзмененииНаСервере()
	
	Если Объект.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантыОпределенияПериодаНакопительнойСкидки.ВесьПериод Тогда
		Элементы.ПериодНакопления.Видимость = Ложь;
		Элементы.ДекорацияКратный.Видимость = Ложь;
	Иначе
		Элементы.ПериодНакопления.Видимость = Истина;
		Элементы.ДекорацияКратный.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиентеНаСервереБезКонтекста
Функция АвтоНаименование(Форма)
	
	Форма.Элементы.Наименование.СписокВыбора.Очистить();

	Объект = Форма.Объект;
	
	Если Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи") Тогда
		СтрокаНаименования = НСтр("ru = 'Время продажи:'");
		ПервыйДень = Истина;
		Для Каждого СтрокаТаблицы Из Объект.ВремяДействия Цикл
			СтрокаНаименования = СтрокаНаименования + 
			                     ?(ПервыйДень," ", ", ")+ СтрокаТаблицы.ДеньНедели + 
			                     НСтр("ru = ' (с "+Формат(СтрокаТаблицы.ВремяНачала,"ДФ=ЧЧ:мм") + 
			                     " до "+Формат(СтрокаТаблицы.ВремяОкончания,"ДФ=ЧЧ:мм")+")'");
			ПервыйДень = Ложь;
		КонецЦикла;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты") Тогда
		СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Форма оплаты: %1'"), Объект.ФормаОплаты);
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты") Тогда
		СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'График оплаты: %1'"), Объект.ГрафикОплаты);
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.КартаЛояльностиНеЗарегистрирована") Тогда
		СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Карта лояльности ""%1"" не зарегистрирована'"), Объект.ВидКартыЛояльности);
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНаличиеКартыЛояльности") Тогда
		СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Партнер владелец карты лояльности ""%1""'"), Объект.ВидКартыЛояльности);
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПервуюПродажуПартнеру") Тогда
		СтрокаНаименования = НСтр("ru = 'Первая продажа партнеру'");
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ОграничениеПоГруппеПользователей") Тогда
		СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Группа пользователей: %1'"), Объект.ГруппаПользователей);
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу") Тогда
		СтрокаНаименования = НСтр("ru = 'Первая продажа номенклатуры сегмента'")+ " " + Объект.СегментНоменклатурыОграничения;
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж") Тогда
		СтрокаНаименования = ""+Объект.КритерийОграниченияПримененияЗаОбъемПродаж + " " + 
		?(Объект.ОбластьОграничения = ПредопределенноеЗначение("Перечисление.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе"),НСтр("ru = 'в документе'"),НСтр("ru = 'в строке'")) + " "+Объект.ТипСравнения + " "+Объект.ЗначениеУсловияОграничения + 
		?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество"), НСтр("ru = ' ед.'"), " "+Объект.ВалютаОграничения) + 
		?(ЗначениеЗаполнено(Объект.СегментНоменклатурыОграничения)," " +НСтр("ru = 'по номенклатуре сегмента'")+ " " + Объект.СегментНоменклатурыОграничения, "");
	ИначеЕсли Объект.УсловиеПредоставления = ПредопределенноеЗначение("Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж") Тогда
		СтрокаНаименования = ""+Объект.КритерийОграниченияПримененияЗаОбъемПродаж + НСтр("ru = ' проданного товара '") + // Сумма (Количество) проданного товара
		?(Объект.ВариантНакопления = ПредопределенноеЗначение("Перечисление.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоПартнеру"), НСтр("ru = 'по партнеру'"), НСтр("ru = 'по торговому соглашению'")); // по партнеру (по торговому соглашению)
		
		Если Объект.ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантыОпределенияПериодаНакопительнойСкидки.ВесьПериод") Тогда
			СтрокаНаименования = СтрокаНаименования + " " +НСтр("ru = 'за весь период'");
		ИначеЕсли Объект.ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантыОпределенияПериодаНакопительнойСкидки.ПрошлыйПериод") Тогда
			
			Если Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый год'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлую декаду'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый день'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый квартал'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлый месяц'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлую неделю'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за прошлое полугодие'");
			КонецЕсли;
			
		ИначеЕсли Объект.ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантыОпределенияПериодаНакопительнойСкидки.СНачалаТекущегоПериода") Тогда
			Если Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего года'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущей декады'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего дня'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего квартала'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего месяца'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущей недели'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'с начала текущего полугодия'");
			КонецЕсли;
		ИначеЕсли Объект.ВариантОпределенияПериодаНакопительнойСкидки = ПредопределенноеЗначение("Перечисление.ВариантыОпределенияПериодаНакопительнойСкидки.ПрошлыйСкользящийПериод") Тогда
			
			Если Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Год") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 365 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 180 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 90 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 30 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Декада") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 10 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущие 7 дней'");
			ИначеЕсли Объект.ПериодНакопления = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
				СтрокаНаименования = СтрокаНаименования + " " + НСтр("ru = 'за предыдущий день'");
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаНаименования = СтрокаНаименования + " " + Объект.ТипСравнения + " " + Объект.ЗначениеУсловияОграничения + // не менее (не более) 5 (5 Руб)
		?(Объект.КритерийОграниченияПримененияЗаОбъемПродаж = ПредопределенноеЗначение("Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество")," " + НСтр("ru = 'ед.'"), " " + Объект.ВалютаОграничения) + 
		?(ЗначениеЗаполнено(Объект.СегментНоменклатурыОграничения)," " + НСтр("ru = 'по номенклатуре сегмента'") + " " + Объект.СегментНоменклатурыОграничения, ""); // по номенклатуре сегмента Продукты
		
	КонецЕсли;
	
	Форма.Элементы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	Возврат СтрокаНаименования;

КонецФункции

&НаКлиенте
Процедура ОбновитьАвтонаименование(Обновить = Истина)
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) ИЛИ (Обновить И ИспользуетсяАвтоНаименование И Не НаименованиеИзмененоПользователем) Тогда
		Объект.Наименование = АвтоНаименование(ЭтаФорма);
		ИспользуетсяАвтоНаименование = Истина;
	КонецЕсли;
	
КонецПроцедуры
