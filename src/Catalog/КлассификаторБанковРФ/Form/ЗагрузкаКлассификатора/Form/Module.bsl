&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.Свойство("ОткрытиеИзСписка") Тогда
		// Открытие по навигационной ссылке
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
		Если РаботаСБанками.КлассификаторАктуален() Тогда
			ОповеститьКлассификаторАктуален = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьПроверкуПравДоступа("Изменение", Метаданные.Справочники.КлассификаторБанковРФ);
	ВариантЗагрузки = "РБК";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ОповеститьКлассификаторАктуален Тогда
		РаботаСБанкамиКлиент.ОповеститьКлассификаторАктуален();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ЗагрузкаССайтаРБК;
	#Иначе
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыборИсточника;
	#КонецЕсли
	
	УстановитьИзмененияВИнтерфейсе();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Далее(Команда)
	
	Если Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаРезультат Тогда
		Закрыть();
	Иначе
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ВыполняетсяЗагрузка;
		УстановитьИзмененияВИнтерфейсе();
		ПодключитьОбработчикОжидания("ВыполнитьЗагрузкуКлассификатора", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	ТекущаяСтраница = Элементы.СтраницыФормы.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаРезультат Тогда
		#Если ВебКлиент Тогда
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ЗагрузкаССайтаРБК;
		#Иначе
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыборИсточника;
		#КонецЕсли
	КонецЕсли;
	
	УстановитьИзмененияВИнтерфейсе();

КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ЗавершитьФоновоеЗадание(ИдентификаторЗадания);
	КонецЕсли;
	Закрыть();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Загружает в классификатор банков данные с диска ИТС.
//
// Параметры
//	ПараметрыЗагрузкиФайловИТС 		 - Соответствие:
//	ИмяДискаИТС						 - Строка			  - имя диска ИТС
//  ДанныеИТСАдресДвоичныхДанных 	 - ВременноеХранилище - файл данных классификатора БИК РФ с диска ИТС, 
//															помещенный во временное хранилище
//  ПодготовкаИТСАдресДвоичныхДанных - ВременноеХранилище - файл обработки подготовки данных 
//															классификатора БИК РФ с диска ИТС, помещенный во временное хранилище
//	Загружено 						 - Число 			  - Количество новых записей классификатора
//	Обновлено						 - Число 			  - Количество обновленных записей классификатора
//	ТекстСообщения					 - Строка			  - тест сообщения о результатах загрузки
//	ЗагрузкаВыполнена                - Булево             - флаг успешного завершения загрузки данных классификатора
&НаСервере
Процедура ЗагрузитьДанныеДискИТСНаСервере(ПараметрыЗагрузкиФайловИТС)
	РаботаСБанками.ЗагрузитьДанныеДискИТС(ПараметрыЗагрузкиФайловИТС);
КонецПроцедуры


// Загружает в классификатор банков данные с диска ИТС.
//
// Параметры
//	ПараметрыЗагрузкиФайловРБК 		 - Соответствие:
//	ИмяДискаИТС						 - Строка			  - имя диска ИТС
//  ДанныеИТСАдресДвоичныхДанных 	 - ВременноеХранилище - файл данных классификатора БИК РФ с диска ИТС, 
//															помещенный во временное хранилище
//  ПодготовкаИТСАдресДвоичныхДанных - ВременноеХранилище - файл обработки подготовки данных 
//															классификатора БИК РФ с диска ИТС, помещенный во временное хранилище
//	Загружено 						 - Число 			  - Количество новых записей классификатора
//	Обновлено						 - Число 			  - Количество обновленных записей классификатора
//	ТекстСообщения					 - Строка			  - тест сообщения о результатах загрузки
//	ЗагрузкаВыполнена                - Булево             - флаг успешного завершения загрузки данных классификатора
&НаСервере
Функция ПолучитьДанныеРБКНаСервере(ПараметрыЗагрузкиФайловРБК)
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		РаботаСБанками.ПолучитьДанныеРБК(ПараметрыЗагрузкиФайловРБК, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено,АдресХранилища", Истина, АдресХранилища);
	Иначе	
		НаименованиеЗадания = НСтр("ru = 'Загрузка классификатора банков РФ'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"РаботаСБанками.ПолучитьДанныеРБК", 
			ПараметрыЗагрузкиФайловРБК, 
			НаименованиеЗадания);
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// Загружает классификатор банков с диска ИТС или с сайта РБК.
//
&НаКлиенте
Процедура ЗагрузитьКлассификатор()
	
	ПараметрыЗагрузкиКлассификатора = Новый Соответствие;
	ПараметрыЗагрузкиКлассификатора.Вставить("Загружено", 0);
	ПараметрыЗагрузкиКлассификатора.Вставить("Обновлено", 0);
	ПараметрыЗагрузкиКлассификатора.Вставить("ТекстСообщения", "");
	ПараметрыЗагрузкиКлассификатора.Вставить("ЗагрузкаВыполнена", Ложь);
	
	Если ВариантЗагрузки = "ИТС" Тогда
		ПолучитьДанныеБИКРФДискИТС(ПараметрыЗагрузкиКлассификатора);
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ПоместитьВоВременноеХранилище(ПараметрыЗагрузкиКлассификатора, АдресХранилища);
		Результат = Новый Структура("ЗаданиеВыполнено,АдресХранилища", Истина, АдресХранилища);
	ИначеЕсли ВариантЗагрузки = "РБК" Тогда
		Результат = ПолучитьДанныеРБКНаСервере(ПараметрыЗагрузкиКлассификатора);
	КонецЕсли;
	
	АдресХранилища = Результат.АдресХранилища;
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	Иначе
		ЗагрузитьРезультат();
	КонецЕсли;
 КонецПроцедуры 

//Отображает результат попытки загрузки классификатора банков РФ в журнале регистрации
//и в форме загрузки
&НаКлиенте
Процедура ЗагрузитьРезультат()
	
	Если ВариантЗагрузки = "ИТС" Тогда
		Источник = НСтр("ru ='Диск ИТС'");
	Иначе	
		Источник = НСтр("ru ='Сайт РБК'");
	КонецЕсли;	
		
	ПараметрыЗагрузкиКлассификатора = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	ИмяСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru ='Загрузка классификатора банков. %1.'"), Источник);
	
	Если ПараметрыЗагрузкиКлассификатора["ЗагрузкаВыполнена"] Тогда
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия,, 
			ПараметрыЗагрузкиКлассификатора["ТекстСообщения"],, Истина);
		РаботаСБанкамиКлиент.ОповеститьКлассификаторУспешноОбновлен();
	Иначе
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытия, 
			"Ошибка", ПараметрыЗагрузкиКлассификатора["ТекстСообщения"],, Истина);
	КонецЕсли;
	Элементы.ПоясняющийТекст.Заголовок = ПараметрыЗагрузкиКлассификатора["ТекстСообщения"];
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаРезультат;
	УстановитьИзмененияВИнтерфейсе();
	
	Если (ПараметрыЗагрузкиКлассификатора["Обновлено"] > 0) или (ПараметрыЗагрузкиКлассификатора["Загружено"] > 0) Тогда
		ОповеститьОбИзменении(Тип("СправочникСсылка.КлассификаторБанковРФ"));
	КонецЕсли;	
	
КонецПроцедуры

//Унифицированная процедура проверки выполнения фонового задания
&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
		ЗагрузитьРезультат();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗадания", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
			Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

// Получает, сортирует, записывает данные классификатора БИК РФ с диска ИТС
// 
// Параметры
//	ПараметрыЗагрузкиКлассификатора - Соответствие:
//	Загружено						- Число  - Количество новых записей классификатора
//	Обновлено						- Число  - Количество обновленных записей классификатора
//	ТекстСообщения					- Строка - тест сообщения о результатах загрузки
//	ЗагрузкаВыполнена               - Булево - флаг успешного завершения загрузки данных классификатора
&НаКлиенте
Процедура ПолучитьДанныеБИКРФДискИТС(ПараметрыЗагрузкиКлассификатора) 
	
	ПараметрыЗагрузкиФайловИТС = Новый Соответствие;
	ПараметрыЗагрузкиФайловИТС.Вставить("ИмяДискаИТС", "");
	ПараметрыЗагрузкиФайловИТС.Вставить("ДанныеИТСАдресДвоичныхДанных", "");
	ПараметрыЗагрузкиФайловИТС.Вставить("ПодготовкаИТСАдресДвоичныхДанных", "");
	ПараметрыЗагрузкиФайловИТС.Вставить("Загружено", ПараметрыЗагрузкиКлассификатора["Загружено"]);
	ПараметрыЗагрузкиФайловИТС.Вставить("Обновлено", ПараметрыЗагрузкиКлассификатора["Обновлено"]);
	ПараметрыЗагрузкиФайловИТС.Вставить("ТекстСообщения", ПараметрыЗагрузкиКлассификатора["ТекстСообщения"]);
	
	ПолучитьДанныеБИКДискИТС(ПараметрыЗагрузкиФайловИТС);
	
	Если Не ПустаяСтрока(ПараметрыЗагрузкиФайловИТС["ТекстСообщения"]) Тогда
		ПараметрыЗагрузкиКлассификатора.Вставить("ТекстСообщения", ПараметрыЗагрузкиФайловИТС["ТекстСообщения"]);
		Возврат;
	КонецЕсли;
	
	ПолучитьСортировщикДискИТС(ПараметрыЗагрузкиФайловИТС);
	
	Если Не ПустаяСтрока(ПараметрыЗагрузкиФайловИТС["ТекстСообщения"]) Тогда
		ПараметрыЗагрузкиКлассификатора.Вставить("ТекстСообщения", ПараметрыЗагрузкиФайловИТС["ТекстСообщения"]);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьДанныеДискИТСНаСервере(ПараметрыЗагрузкиФайловИТС);
	
	ПараметрыЗагрузкиКлассификатора.Вставить("Загружено", ПараметрыЗагрузкиФайловИТС["Загружено"]);
	ПараметрыЗагрузкиКлассификатора.Вставить("Обновлено", ПараметрыЗагрузкиФайловИТС["Обновлено"]);
	ПараметрыЗагрузкиКлассификатора.Вставить("ТекстСообщения", ПараметрыЗагрузкиФайловИТС["ТекстСообщения"]);
	ПараметрыЗагрузкиКлассификатора.Вставить("ЗагрузкаВыполнена", Истина);
	
КонецПроцедуры	

// Получает обработку сортировки классификатора БИК РФ с диска ИТС
// 
// Параметры
//	ПараметрыЗагрузкиФайловИТС 		 - Соответствие:
//  ИмяДискаИТС						 - Символ			  - имя диска ИТС
//  ДанныеИТСАдресДвоичныхДанных 	 - ВременноеХранилище - файл данных классификатора БИК РФ с диска ИТС, 
//															помещенный во временное хранилище
//  ПодготовкаИТСАдресДвоичныхДанных - ВременноеХранилище - файл обработки подготовки данных 
//															классификатора БИК РФ с диска ИТС, помещенный во временное хранилище
//  ТекстСообщения					 - Строка			  - текст сообщения об ошибке
//
&НаКлиенте
Процедура ПолучитьСортировщикДискИТС(ПараметрыЗагрузкиФайловИТС)
	
	ТекстСообщения			  = "";
	ПодготовкаИТСАдресДвоичныхДанных = "";
	
	Результат = Новый Структура;
	
	ПодготовкаИТС = Новый Файл(ПараметрыЗагрузкиФайловИТС["ИмяДискаИТС"] + ":\1CITS\EXE\EXTDB\BIKr5v82_MA.epf");
	
	Если ПодготовкаИТС.Существует() Тогда
		ПодготовкаИТСДвоичныеДанные		 = Новый ДвоичныеДанные(ПодготовкаИТС.ПолноеИмя);
		ПодготовкаИТСАдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ПодготовкаИТСДвоичныеДанные);
	Иначе
		ТекстСообщения = НСтр("ru ='На диске ИТС не обнаружен файл обработки подготовки данных классификатора БИК РФ.'");
	КонецЕсли;
	
	ПараметрыЗагрузкиФайловИТС.Вставить("ПодготовкаИТСАдресДвоичныхДанных", ПодготовкаИТСАдресДвоичныхДанных);
	ПараметрыЗагрузкиФайловИТС.Вставить("ТекстСообщения", ТекстСообщения);
	
КонецПроцедуры

// Получает данные классификатора БИК РФ с диска ИТС
// 
// Параметры
//	ПараметрыЗагрузкиФайловИТС		 - Соответствие:
//  ИмяДискаИТС						 - Символ			  - имя диска ИТС
//  ДанныеИТСАдресДвоичныхДанных	 - ВременноеХранилище - файл данных классификатора БИК РФ с диска ИТС, 
//															помещенный во временное хранилище
//  ПодготовкаИТСАдресДвоичныхДанных - ВременноеХранилище - файл обработки подготовки данных классификатора БИК РФ 
//															с диска ИТС, помещенный во временное хранилище
//  ТекстСообщения					 - Строка			  - текст сообщения об ошибке
//
&НаКлиенте
Процедура ПолучитьДанныеБИКДискИТС(ПараметрыЗагрузкиФайловИТС)
	
	ТекстСообщения				 = "";
	ИмяДиска					 = "";
	ДанныеИТС					 = "";
	ФайлНайден					 = Ложь;
	ДанныеИТСАдресДвоичныхДанных = "";
	
	Результат = Новый Структура;
	
	Для Индекс = 68 По 90 Цикл
		// с D по Z
		ДанныеИТС = Новый Файл(Символ(Индекс) + ":\Database\Garant\MorphDB\Morph.dlc");
		Если ДанныеИТС.Существует() Тогда
			ФайлНайден = Истина;
			Прервать;
		Иначе
			ДанныеИТС = "";
		КонецЕсли;
	КонецЦикла;
		
	Если ФайлНайден Тогда	
		ИмяДискаИТС					 = Символ(Индекс);
		ДанныеИТСДвоичныеДанные		 = Новый ДвоичныеДанные(ДанныеИТС.ПолноеИмя);
		ДанныеИТСАдресДвоичныхДанных = ПоместитьВоВременноеХранилище(ДанныеИТСДвоичныеДанные);
	Иначе
		ТекстСообщения = 
			НСтр("ru ='На диске ИТС не обнаружены данные классификатора БИК РФ. 
				|Для установки требуется диск ИТС, на котором содержится база ""Гарант. Налоги, бухучет, предпринимательство.""'");
	КонецЕсли;
	
	ПараметрыЗагрузкиФайловИТС.Вставить("ИмяДискаИТС", ИмяДискаИТС);
	ПараметрыЗагрузкиФайловИТС.Вставить("ДанныеИТСАдресДвоичныхДанных", ДанныеИТСАдресДвоичныхДанных);
	ПараметрыЗагрузкиФайловИТС.Вставить("ТекстСообщения", ТекстСообщения);    		
	
КонецПроцедуры	

// В зависимости от текущей страницы устанавливает доступность тех или иных полей для пользователя
//
&НаСервере
Процедура УстановитьИзмененияВИнтерфейсе()
	
	Если Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаВыборИсточника
		Или Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ЗагрузкаССайтаРБК Тогда
		Элементы.ФормаКнопкаНазад.Доступность  = Ложь;
		Элементы.ФормаКнопкаДалее.Заголовок    = НСтр("ru ='Далее >>'");
		Элементы.ФормаКнопкаОтмена.Доступность = Истина;
		Элементы.ФормаКнопкаДалее.Доступность  = Истина;
	ИначеЕсли Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.ВыполняетсяЗагрузка Тогда
		Элементы.ФормаКнопкаНазад.Доступность  = Ложь;
		Элементы.ФормаКнопкаДалее.Доступность  = Ложь;
		Элементы.ФормаКнопкаОтмена.Доступность = Истина;
	Иначе
		Элементы.ФормаКнопкаНазад.Доступность  = Истина;
		Элементы.ФормаКнопкаДалее.Заголовок    = НСтр("ru ='Закрыть'");
		Элементы.ФормаКнопкаОтмена.Доступность = Ложь;
		Элементы.ФормаКнопкаДалее.Доступность  = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуКлассификатора()
	ЗагрузитьКлассификатор();
КонецПроцедуры


&НаСервере
Процедура ЗавершитьФоновоеЗадание(ИдентификаторЗадания)
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		ФоновоеЗадание.Отменить();
	КонецЕсли;
КонецПроцедуры
