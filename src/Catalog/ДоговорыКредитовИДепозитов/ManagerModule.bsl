#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Функция РеквизитыДоговора(Договор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ДоговорКредитаДепозита.Наименование,
	|	ДоговорКредитаДепозита.БанковскийСчет,
	|	ДоговорКредитаДепозита.БанковскийСчетКомиссии,
	|	ДоговорКредитаДепозита.БанковскийСчетКонтрагента,
	|	ДоговорКредитаДепозита.БанковскийСчетПроцентов,
	|	ДоговорКредитаДепозита.ВалютаВзаиморасчетов,
	|	ДоговорКредитаДепозита.Дата,
	|	ДоговорКредитаДепозита.ДатаПервогоТранша,
	|	ДоговорКредитаДепозита.ДатаПоследнегоПлатежа,
	|	ДоговорКредитаДепозита.Касса,
	|	ДоговорКредитаДепозита.Контрагент,
	|	ДоговорКредитаДепозита.НаименованиеДляПечати,
	|	ДоговорКредитаДепозита.Номер,
	|	ДоговорКредитаДепозита.Организация,
	|	ДоговорКредитаДепозита.Ответственный,
	|	ДоговорКредитаДепозита.Партнер,
	|	ДоговорКредитаДепозита.Подразделение,
	|	ДоговорКредитаДепозита.ПорядокОплаты,
	|	ДоговорКредитаДепозита.СрокДней,
	|	ДоговорКредитаДепозита.СрокМес,
	|	ДоговорКредитаДепозита.Статус,
	|	ДоговорКредитаДепозита.СтатьяДДСКомиссии,
	|	ДоговорКредитаДепозита.СтатьяДДСОсновногоДолга,
	|	ДоговорКредитаДепозита.СтатьяДДСПоступленияВыдачи,
	|	ДоговорКредитаДепозита.СтатьяДДСПроцентов,
	|	ДоговорКредитаДепозита.СтатьяДоходовРасходовКомиссии,
	|	ДоговорКредитаДепозита.СтатьяДоходовРасходовПроцентов,
	|	ДоговорКредитаДепозита.СуммаКомиссии,
	|	ДоговорКредитаДепозита.СуммаЛимита,
	|	ДоговорКредитаДепозита.СуммаПроцентов,
	|	ДоговорКредитаДепозита.СуммаТраншей,
	|	ДоговорКредитаДепозита.ТипДоговора,
	|	ДоговорКредитаДепозита.ТипКомиссии,
	|	ДоговорКредитаДепозита.ТипСрочности,
	|	ДоговорКредитаДепозита.ФормаОплаты,
	|	ДоговорКредитаДепозита.ХарактерДоговора
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК ДоговорКредитаДепозита
	|ГДЕ
	|	ДоговорКредитаДепозита.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Договор);
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыДоговора = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		РеквизитыДоговора.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РеквизитыДоговора, Выборка);
	КонецЕсли;
	
	Возврат РеквизитыДоговора;
	
КонецФункции

Функция ТипСтатьи(ХарактерДоговора) Экспорт
	
	Возврат ?(ХарактерДоговора = Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм,НСтр("ru='расходов'"),НСтр("ru='доходов'"));
	
КонецФункции

Функция ЗаполненыСтатьиУчета(Договор, ВыводитьСообщения = Истина, МассивСообщений = Неопределено) Экспорт
	
	СтатьиДДС_ОК = ЗаполненыСтатьиДДС(Договор, ВыводитьСообщения, МассивСообщений);
	СтатьиДоходовРасходов_ОК = ЗаполненыСтатьиДоходовРасходов(Договор, ВыводитьСообщения,МассивСообщений);
	
	Возврат СтатьиДДС_ОК И СтатьиДоходовРасходов_ОК;		
			
КонецФункции

Процедура СообщитьОбОшибкахЗаполнения(СписокДоговоров, ИдентификаторФормы = Неопределено, ШаблонТекста) Экспорт
	
	Для Каждого Договор Из СписокДоговоров Цикл
		
		МассивСообщений = Новый Массив;
		Справочники.ДоговорыКредитовИДепозитов.ЗаполненыСтатьиУчета(Договор.Значение, Ложь, МассивСообщений);				
		
		ШаблонТекста = ШаблонТекста + Символы.ПС + НСтр("ru='по причине не верного заполнения статей учета договора!'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Договор.Значение.Номер, Формат(Договор.Значение.Дата, "ДЛФ=D"), Договор.Значение);
		
		СообщитьПользователю(Текст,Договор.Значение,,ИдентификаторФормы);
		Для Каждого Сообщение Из МассивСообщений Цикл			
			СообщитьПользователю(Символы.Таб + Сообщение.Текст, Договор.Значение, Сообщение.Поле, ИдентификаторФормы);
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

Функция СоздатьЗаявкиНаРасходДС(Параметры) Экспорт
	
	ВсегоСоздано = 0;
	РезультатЗапроса = ОплатыЗаПериод(Параметры.ДатаНачала, Параметры.ДатаОкончания, Параметры.Договоры, Параметры.Контрагенты);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ВсегоСоздано;
	КонецЕсли;
	
	ВВалютеПлатежа = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеПлатежа;
	ВВалютеВзаиморасчетов = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов;
	
	ТаблицаЗаявок = ЗаявкиЗаПериод(Параметры.ДатаНачала, Параметры.ДатаОкончания, Параметры.Договоры);
	ОтборЗаявок = Новый Структура("СтатьяДвиженияДенежныхСредств,ХозяйственнаяОперация,Контрагент,ДоговорКредитаДепозита");
	КурсРегламентированногоУчета = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Константы.ВалютаРегламентированногоУчета.Получить(), Параметры.ДатаОкончания);
	ОшибочныеДоговора = Новый Соответствие;
	РасчетыВВалютеОплатаВВалюте = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте;
	ВыборкаОрганизаций = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	Пока ВыборкаОрганизаций.Следующий() Цикл
		ВыборкаПоОперациям = ВыборкаОрганизаций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоОперациям.Следующий() Цикл
			ВалютаДоговора = ВыборкаПоОперациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВалютаДоговора.Следующий() Цикл
				ФормаОплаты = ВалютаДоговора.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ФормаОплаты.Следующий() Цикл
					БанковскиеСчета = ФормаОплаты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока БанковскиеСчета.Следующий() Цикл
						Кассы = БанковскиеСчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока Кассы.Следующий() Цикл
							Контрагенты = Кассы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока Контрагенты.Следующий() Цикл
								СчетаКонтрагента = Контрагенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
								Пока СчетаКонтрагента.Следующий() Цикл					
									ДатаОплаты = СчетаКонтрагента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
									Пока ДатаОплаты.Следующий() Цикл
										
										НоваяЗаявка = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
										НоваяЗаявка.Приоритет = Перечисления.Приоритеты.Средний;
										НоваяЗаявка.Дата = ТекущаяДата();
										НоваяЗаявка.ЖелательнаяДатаПлатежа = ДатаОплаты.ДатаОплаты;
										НоваяЗаявка.ДатаПлатежа = ДатаОплаты.ДатаОплаты;
										НоваяЗаявка.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
										ЗаполнитьЗначенияСвойств(НоваяЗаявка,ДатаОплаты);
										НоваяЗаявка.КтоЗаявил = Пользователи.ТекущийПользователь();
										НоваяЗаявка.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(НоваяЗаявка.КтоЗаявил, НоваяЗаявка.Подразделение);
										
										ФлагиФормыОплаты = Неопределено;
										ВалютаВзаиморасчетов = Неопределено;
										КурсРегл = КурсРегламентированногоУчета;
										Оплата = ДатаОплаты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
										Пока Оплата.Следующий() Цикл
											
											Если НЕ ЗаполненыСтатьиУчета(Оплата.ДоговорКредитаДепозита,Ложь) Тогда
												ОшибочныеДоговора.Вставить(Оплата.ДоговорКредитаДепозита,Оплата.ДоговорКредитаДепозита);
												Продолжить;
											КонецЕсли;
											
											Если ТаблицаЗаявок.Количество() > 0 Тогда
												ЗаполнитьЗначенияСвойств(ОтборЗаявок,Оплата);
												НайденныеЗаявки = ТаблицаЗаявок.НайтиСтроки(ОтборЗаявок);
												Если НайденныеЗаявки.Количество() > 0 Тогда
													Для Каждого Документ Из НайденныеЗаявки Цикл
														ТекстДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("№%1 от %2", Документ.Заявка.Номер, Формат(Документ.Заявка.Дата, "ДЛФ=D"));
														Договор = Оплата.ДоговорКредитаДепозита;
														ТекстДоговора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("№%1 от %2 ""%3""", Договор.Номер, Формат(Договор.Дата, "ДЛФ=D"), Договор);
														Если Оплата.СуммаВзаиморасчетов = Документ.СуммаВзаиморасчетов Тогда
															ШаблонТекста = НСтр("ru='На сумму оплаты %1 по графику ""%2""
																					|	договора %3 контрагента ""%4""
																					|	уже создана заявка на оплату %5
																					|При формировании новой заявки строка графика пропущена!'");
															Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,
																																Оплата.СуммаВзаиморасчетов,
																																Оплата.ВариантГрафика,
																																ТекстДоговора,
																																Оплата.Контрагент,
																																ТекстДокумента);
														Иначе
															ШаблонТекста = НСтр("ru='Обнаружена заявка на оплату %1 
																					|	по договору %2 контрагента ""%3"" 
																					|	на дату оплаты %4, сумма в заявке %5 по статье ""%6"" 
																					|	отличается от суммы графика ""%7""
																					|При формировании новой заявки строка графика пропущена!'");
															Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, 
																																ТекстДокумента, 
																																ТекстДоговора, 
																																Оплата.Контрагент, 
																																Оплата.ДатаОплаты,
																																Документ.СуммаВзаиморасчетов,
																																Оплата.СтатьяДвиженияДенежныхСредств,
																																Оплата.ВариантГрафика);
														КонецЕсли;
														СообщитьПользователю(Текст, Документ.Заявка, , Параметры.ИдентификаторФормы);
													КонецЦикла;//по найденным заявкам												
													Продолжить;
												КонецЕсли;//нашлись уже созданные заявки
											КонецЕсли;//вообще есть заявки за период
											
											Если ВалютаВзаиморасчетов = Неопределено Тогда											
												ВалютаВзаиморасчетов = Оплата.ВалютаВзаиморасчетов;
											КонецЕсли;
											
											Если ФлагиФормыОплаты = Неопределено Тогда
												ФлагиФормыОплаты = Новый Структура("ФормаОплатыНаличная,ФормаОплатыБезналичная,ФормаОплатыПлатежнаяКарта");
												ЗаполнитьЗначенияСвойств(ФлагиФормыОплаты,Оплата);											
											КонецЕсли;
																					
											НоваяСтрока = НоваяЗаявка.РасшифровкаПлатежа.Добавить();
											ЗаполнитьЗначенияСвойств(НоваяСтрока,Оплата);
											НоваяСтрока.Сумма = Оплата.СуммаВзаиморасчетов;
											
										КонецЦикла;//по Оплатам
										
										Если НоваяЗаявка.РасшифровкаПлатежа.Количество() > 0 Тогда
											
											НоваяЗаявка.Валюта = ВалютаВзаиморасчетов;
											Если ФлагиФормыОплаты.ФормаОплатыНаличная Тогда
												ВалютаПлатежа = НоваяЗаявка.Касса.ВалютаДенежныхСредств;
											Иначе
												ВалютаПлатежа = НоваяЗаявка.БанковскийСчет.ВалютаДенежныхСредств;											
											КонецЕсли;
											
											Если ВалютаВзаиморасчетов = ВалютаПлатежа Тогда
												НоваяЗаявка.ПланированиеСуммы = ВВалютеПлатежа;
											Иначе											
												НоваяЗаявка.ПланированиеСуммы = ВВалютеВзаиморасчетов;
											КонецЕсли;
											
											НоваяЗаявка.СуммаДокумента = НоваяЗаявка.РасшифровкаПлатежа.Итог("Сумма");
											ЗаполнитьЗначенияСвойств(НоваяЗаявка,ФлагиФормыОплаты);
											
											НоваяЗаявка.УстановитьНовыйНомер();
											НоваяЗаявка.Записать(РежимЗаписиДокумента.Проведение);
											ВсегоСоздано = ВсегоСоздано + 1;
											
										КонецЕсли;
										
									КонецЦикла;//по Датам оплаты
								КонецЦикла;//по Счетам контрагента
							КонецЦикла;// по Контрагентам
						КонецЦикла;// по Кассам
					КонецЦикла;//по Банковским счетам организации
				КонецЦикла;//по Формам оплаты
			КонецЦикла;//по Валютам договора
		КонецЦикла;//по Хозяйственным операциям
	КонецЦикла;//по Организациям
	
	СообщитьОбОшибкахЗаполнения(ОшибочныеДоговора,Параметры.ИдентификаторФормы,НСтр("ru='Заявки по договору №%1 от %2 ""%3"" не созданы,'"));
	
	Возврат ВсегоСоздано;
	
КонецФункции

Функция ХарактерДоговораПоОперации(ХозяйственнаяОперация) Экспорт
	
	Результат = Неопределено;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоКредитам
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам Тогда
		Результат = Перечисления.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм;
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоДепозитам 
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаПоДепозитам Тогда
		Результат = Перечисления.ХарактерДоговораКредитовИДепозитов.Депозит;
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоЗаймамВыданным
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаПоЗаймамВыданным Тогда
		Результат = Перечисления.ХарактерДоговораКредитовИДепозитов.ЗаймВыданный;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ 

////////////////////////////////////////////////////////////////////////////////
// Контроль статей учета

Процедура ВывестиСообщение(Текст, КлючДанных, Поле = "", ВыводитьСообщения, МассивСообщений)
	
	Если ВыводитьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, КлючДанных, Поле);
	Иначе
		МассивСообщений.Добавить(Новый Структура("Текст,Поле", Текст, Поле));
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполненыСтатьиДДС(Договор, ВыводитьСообщения, МассивСообщений)
	
	Параметры = ПараметрыКонтроля(Договор, ВыводитьСообщения, МассивСообщений);
	Параметры.ТаблицаКонтроля = ТаблицаКонтроляСтатейДДС(Договор);
	Параметры.ШаблонЗаполнено = НСтр("ru = 'Не указана статья ДДС %1!'");
	Параметры.ТекстРазличны = НСтр("ru = 'Статьи ДДС должны быть различными!'");
	Параметры.ПутьКДанным = "Объект.СтатьяДДС";	
	
	Возврат СтатьиУчетаЗаполненыВерно(Параметры);
	
КонецФункции

Функция ЗаполненыСтатьиДоходовРасходов(Договор, ВыводитьСообщения, МассивСообщений)
	
	Параметры = ПараметрыКонтроля(Договор, ВыводитьСообщения, МассивСообщений);
	Параметры.ТаблицаКонтроля = ТаблицаКонтроляСтатейДоходовРасходов(Договор);
	ТипСтатьи = ТипСтатьи(Договор.ХарактерДоговора);
	Параметры.ШаблонЗаполнено = СтрЗаменить(НСтр("ru='Не указана статья %Тип% %1!'"), "%Тип%", ТипСтатьи);
	Параметры.ТекстРазличны = СтрЗаменить(НСтр("ru='Статьи %Тип% должны быть различными!'"), "%Тип%", ТипСтатьи);
	Параметры.ПутьКДанным = "Объект.СтатьяДоходовРасходов";
	
	Возврат СтатьиУчетаЗаполненыВерно(Параметры);
	
КонецФункции

Функция ПараметрыКонтроля(Договор = Неопределено, ВыводитьСообщения = Истина, МассивСообщений = Неопределено)
	
	Результат = Новый Структура("Договор,ВыводитьСообщения,МассивСообщений,ТаблицаКонтроля,ШаблонЗаполнено,ТекстРазличны,ПутьКДанным");
	Результат.Договор = Договор;
	Результат.ВыводитьСообщения = ВыводитьСообщения;
	Результат.МассивСообщений = МассивСообщений;
	
	Возврат Результат;
	
КонецФункции

Функция СтатьиУчетаЗаполненыВерно(Параметры)
	
	Результат = Истина;
	ВыводитьСообщения = Параметры.ВыводитьСообщения;
	МассивСообщений = Параметры.МассивСообщений;
	ТаблицаКонтроля = Параметры.ТаблицаКонтроля;
	
	Если МассивСообщений = Неопределено Тогда
		МассивСообщений = Новый Массив;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Договор) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов") Тогда
		КлючДанных = Параметры.Договор;
	КонецЕсли;
	
	ВсегоПолей = ТаблицаКонтроля.Количество();	
	НомерСтроки = 0;
	Результат = Истина;
	Пока НомерСтроки < ТаблицаКонтроля.Количество() Цикл
	
		Стр = ТаблицаКонтроля[НомерСтроки];
		Если НЕ ЗначениеЗаполнено(Стр.Значение) Тогда
			Результат = Ложь;
			ТаблицаКонтроля.Удалить(Стр);
			Продолжить;
		КонецЕсли;
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;//по ТаблицеКонтроля
	
	Если Результат Тогда
		ТаблицаКонтроля.Свернуть("Значение");	
		Если ТаблицаКонтроля.Количество() > 0 
			И ТаблицаКонтроля.Количество() < ВсегоПолей Тогда
			Различны = Ложь;			
			ВывестиСообщение(Параметры.ТекстРазличны, КлючДанных, "", ВыводитьСообщения, МассивСообщений);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаКонтроляСтатейДДС(Договор)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ПутьКДанным");
	Таблица.Колонки.Добавить("Назначение");
	Таблица.Колонки.Добавить("Значение");
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ПутьКДанным = "Поступления";
	НоваяСтрока.Назначение = НСтр("ru='поступления'");
	НоваяСтрока.Значение = Договор.СтатьяДДСПоступленияВыдачи;
	
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ПутьКДанным = "ОсновногоДолга";
	НоваяСтрока.Назначение = НСтр("ru='основного долга'");
	НоваяСтрока.Значение = Договор.СтатьяДДСОсновногоДолга;
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ПутьКДанным = "Процентов";
	НоваяСтрока.Назначение = НСтр("ru='процентов'");
	НоваяСтрока.Значение = Договор.СтатьяДДСПроцентов;
	
	Если Договор.ТипКомиссии <> Перечисления.ТипКомиссииКредитовИДепозитов.Нет Тогда
	
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.ПутьКДанным = "Комиссии";
		НоваяСтрока.Назначение = НСтр("ru='комиссии'");
		НоваяСтрока.Значение = Договор.СтатьяДДСКомиссии;
		
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

Функция ТаблицаКонтроляСтатейДоходовРасходов(Договор)
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("ПутьКДанным");
	Таблица.Колонки.Добавить("Назначение");
	Таблица.Колонки.Добавить("Значение");
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ПутьКДанным = "Процентов";
	НоваяСтрока.Назначение = НСтр("ru='процентов'");
	НоваяСтрока.Значение = Договор.СтатьяДоходовРасходовПроцентов;
	
	Если Договор.ТипКомиссии <> Перечисления.ТипКомиссииКредитовИДепозитов.Нет Тогда
	
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.ПутьКДанным = "Комиссии";
		НоваяСтрока.Назначение = НСтр("ru='комиссии'");
		НоваяСтрока.Значение = Договор.СтатьяДоходовРасходовКомиссии;
		
	КонецЕсли;	
	
	Возврат Таблица;
	
КонецФункции

Процедура СообщитьПользователю(Текст,КлючДанных = Неопределено,Поле = "", ИдентификаторФормы = Неопределено)
	
	Сообщение = Новый СообщениеПользователю;
	Если ИдентификаторФормы <> Неопределено Тогда
		Сообщение.ИдентификаторНазначения = ИдентификаторФормы;
	КонецЕсли;
	Сообщение.КлючДанных = КлючДанных;
	Сообщение.Поле = Поле;
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание заявок на расходование денежных средств

Функция ТекстЗапросаПоОплатам()
	
	Возврат
	"ВЫБРАТЬ
	|	ГрафикОплат.Период КАК ДатаОплаты,
	|	ДоговорыКредитовИДепозитов.Организация КАК Организация,
	|	ДоговорыКредитовИДепозитов.БанковскийСчет КАК БанковскийСчет,
	|	ДоговорыКредитовИДепозитов.Партнер,
	|	ДоговорыКредитовИДепозитов.Контрагент КАК Контрагент,
	|	ДоговорыКредитовИДепозитов.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	ГрафикОплат.Сумма КАК СуммаВзаиморасчетов,
	|	ДоговорыКредитовИДепозитов.СтатьяДДСОсновногоДолга КАК СтатьяДвиженияДенежныхСредств,
	|	ДоговорыКредитовИДепозитов.Ссылка КАК ДоговорКредитаДепозита,
	|	ДоговорыКредитовИДепозитов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДоговорыКредитовИДепозитов.ФормаОплаты КАК ФормаОплатыЗаявки,
	|	ДоговорыКредитовИДепозитов.Касса КАК Касса,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФормаОплатыНаличная,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПлатежнаяКарта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ФормаОплатыПлатежнаяКарта,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам)
	|		КОГДА ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.Депозит)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаПоДепозитам)
	|		КОГДА ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.ЗаймВыданный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаПоЗаймамВыданным)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	ДоговорыКредитовИДепозитов.ПорядокОплаты,
	|	ГрафикОплат.ВариантГрафика
	|ПОМЕСТИТЬ ОплатыПоГрафику
	|ИЗ
	|	РегистрСведений.ГрафикОплатКредитовИДепозитов КАК ГрафикОплат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
	|		ПО ГрафикОплат.ВариантГрафика.Владелец = ДоговорыКредитовИДепозитов.Ссылка
	|ГДЕ
	|	НЕ ГрафикОплат.ВариантГрафика.ПометкаУдаления
	|	И ГрафикОплат.ВариантГрафика.Используется
	|	И ДоговорыКредитовИДепозитов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ГрафикОплат.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ГрафикОплат.Сумма > 0
	|	И ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм)
	|{ГДЕ
	|	ДоговорыКредитовИДепозитов.Ссылка.* КАК Договор,
	|	ДоговорыКредитовИДепозитов.Контрагент.*}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГрафикОплат.Период,
	|	ДоговорыКредитовИДепозитов.Организация,
	|	ДоговорыКредитовИДепозитов.БанковскийСчет,
	|	ДоговорыКредитовИДепозитов.Партнер,
	|	ДоговорыКредитовИДепозитов.Контрагент,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.БанковскийСчетПроцентов = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|			ТОГДА ДоговорыКредитовИДепозитов.БанковскийСчетКонтрагента
	|		ИНАЧЕ ДоговорыКредитовИДепозитов.БанковскийСчетПроцентов
	|	КОНЕЦ,
	|	ГрафикОплат.Проценты,
	|	ДоговорыКредитовИДепозитов.СтатьяДДСПроцентов,
	|	ДоговорыКредитовИДепозитов.Ссылка,
	|	ДоговорыКредитовИДепозитов.ВалютаВзаиморасчетов,
	|	ДоговорыКредитовИДепозитов.ФормаОплаты,
	|	ДоговорыКредитовИДепозитов.Касса,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПлатежнаяКарта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам)
	|		КОГДА ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.Депозит)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаПоДепозитам)
	|		КОГДА ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.ЗаймВыданный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаПоЗаймамВыданным)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	КОНЕЦ,
	|	ДоговорыКредитовИДепозитов.ПорядокОплаты,
	|	ГрафикОплат.ВариантГрафика
	|ИЗ
	|	РегистрСведений.ГрафикОплатКредитовИДепозитов КАК ГрафикОплат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
	|		ПО ГрафикОплат.ВариантГрафика.Владелец = ДоговорыКредитовИДепозитов.Ссылка
	|ГДЕ
	|	НЕ ГрафикОплат.ВариантГрафика.ПометкаУдаления
	|	И ГрафикОплат.ВариантГрафика.Используется
	|	И ДоговорыКредитовИДепозитов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ГрафикОплат.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ГрафикОплат.Проценты > 0
	|	И ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм)
	|{ГДЕ
	|	ДоговорыКредитовИДепозитов.Ссылка.* КАК Договор,
	|	ДоговорыКредитовИДепозитов.Контрагент.*}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГрафикОплат.Период,
	|	ДоговорыКредитовИДепозитов.Организация,
	|	ДоговорыКредитовИДепозитов.БанковскийСчет,
	|	ДоговорыКредитовИДепозитов.Партнер,
	|	ДоговорыКредитовИДепозитов.Контрагент,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.БанковскийСчетКомиссии = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|			ТОГДА ДоговорыКредитовИДепозитов.БанковскийСчетКонтрагента
	|		ИНАЧЕ ДоговорыКредитовИДепозитов.БанковскийСчетКомиссии
	|	КОНЕЦ,
	|	ГрафикОплат.Комиссия,
	|	ДоговорыКредитовИДепозитов.СтатьяДДСКомиссии,
	|	ДоговорыКредитовИДепозитов.Ссылка,
	|	ДоговорыКредитовИДепозитов.ВалютаВзаиморасчетов,
	|	ДоговорыКредитовИДепозитов.ФормаОплаты,
	|	ДоговорыКредитовИДепозитов.Касса,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПлатежнаяКарта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам)
	|		КОГДА ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.Депозит)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаПоДепозитам)
	|		КОГДА ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.ЗаймВыданный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаПоЗаймамВыданным)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	КОНЕЦ,
	|	ДоговорыКредитовИДепозитов.ПорядокОплаты,
	|	ГрафикОплат.ВариантГрафика
	|ИЗ
	|	РегистрСведений.ГрафикОплатКредитовИДепозитов КАК ГрафикОплат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
	|		ПО ГрафикОплат.ВариантГрафика.Владелец = ДоговорыКредитовИДепозитов.Ссылка
	|ГДЕ
	|	НЕ ГрафикОплат.ВариантГрафика.ПометкаУдаления
	|	И ГрафикОплат.ВариантГрафика.Используется
	|	И ДоговорыКредитовИДепозитов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ГрафикОплат.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ГрафикОплат.Комиссия > 0
	|	И ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм)
	|{ГДЕ
	|	ДоговорыКредитовИДепозитов.Ссылка.* КАК Договор,
	|	ДоговорыКредитовИДепозитов.Контрагент.*}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГрафикТраншейКредитовИДепозитов.Период,
	|	ДоговорыКредитовИДепозитов.Организация,
	|	ДоговорыКредитовИДепозитов.БанковскийСчет,
	|	ДоговорыКредитовИДепозитов.Партнер,
	|	ДоговорыКредитовИДепозитов.Контрагент,
	|	ДоговорыКредитовИДепозитов.БанковскийСчетКонтрагента,
	|	ГрафикТраншейКредитовИДепозитов.Сумма,
	|	ДоговорыКредитовИДепозитов.СтатьяДДСПоступленияВыдачи,
	|	ДоговорыКредитовИДепозитов.Ссылка,
	|	ДоговорыКредитовИДепозитов.ВалютаВзаиморасчетов,
	|	ДоговорыКредитовИДепозитов.ФормаОплаты,
	|	ДоговорыКредитовИДепозитов.Касса,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПлатежнаяКарта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам)
	|		КОГДА ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.Депозит)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаПоДепозитам)
	|		КОГДА ДоговорыКредитовИДепозитов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.ЗаймВыданный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаПоЗаймамВыданным)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|	КОНЕЦ,
	|	ДоговорыКредитовИДепозитов.ПорядокОплаты,
	|	ГрафикТраншейКредитовИДепозитов.ВариантГрафика
	|ИЗ
	|	РегистрСведений.ГрафикТраншейКредитовИДепозитов КАК ГрафикТраншейКредитовИДепозитов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
	|		ПО ГрафикТраншейКредитовИДепозитов.ВариантГрафика.Владелец = ДоговорыКредитовИДепозитов.Ссылка
	|ГДЕ
	|	НЕ ГрафикТраншейКредитовИДепозитов.ВариантГрафика.ПометкаУдаления
	|	И ГрафикТраншейКредитовИДепозитов.ВариантГрафика.Используется
	|	И ДоговорыКредитовИДепозитов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ГрафикТраншейКредитовИДепозитов.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ГрафикТраншейКредитовИДепозитов.Сумма > 0
	|	И ДоговорыКредитовИДепозитов.ХарактерДоговора <> ЗНАЧЕНИЕ(Перечисление.ХарактерДоговораКредитовИДепозитов.КредитИлиЗайм)
	|{ГДЕ
	|	ДоговорыКредитовИДепозитов.Ссылка.* КАК Договор,
	|	ДоговорыКредитовИДепозитов.Контрагент.*}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОплатыПоГрафику.ДатаОплаты КАК ДатаОплаты,
	|	ОплатыПоГрафику.Организация КАК Организация,
	|	ОплатыПоГрафику.БанковскийСчет КАК БанковскийСчет,
	|	ОплатыПоГрафику.Партнер,
	|	ОплатыПоГрафику.Контрагент КАК Контрагент,
	|	ОплатыПоГрафику.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	СУММА(ОплатыПоГрафику.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	ОплатыПоГрафику.СтатьяДвиженияДенежныхСредств,
	|	ОплатыПоГрафику.ДоговорКредитаДепозита,
	|	ОплатыПоГрафику.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ОплатыПоГрафику.ФормаОплатыЗаявки КАК ФормаОплатыЗаявки,
	|	ОплатыПоГрафику.Касса КАК Касса,
	|	ОплатыПоГрафику.ФормаОплатыБезналичная,
	|	ОплатыПоГрафику.ФормаОплатыНаличная,
	|	ОплатыПоГрафику.ФормаОплатыПлатежнаяКарта,
	|	ОплатыПоГрафику.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ОплатыПоГрафику.ПорядокОплаты,
	|	ОплатыПоГрафику.ВариантГрафика
	|ИЗ
	|	ОплатыПоГрафику КАК ОплатыПоГрафику
	|{ГДЕ
	|	ОплатыПоГрафику.Контрагент.*,
	|	ОплатыПоГрафику.ДоговорКредитаДепозита.* КАК Договор}
	|
	|СГРУППИРОВАТЬ ПО
	|	ОплатыПоГрафику.ДатаОплаты,
	|	ОплатыПоГрафику.Организация,
	|	ОплатыПоГрафику.БанковскийСчет,
	|	ОплатыПоГрафику.Партнер,
	|	ОплатыПоГрафику.Контрагент,
	|	ОплатыПоГрафику.БанковскийСчетКонтрагента,
	|	ОплатыПоГрафику.СтатьяДвиженияДенежныхСредств,
	|	ОплатыПоГрафику.ДоговорКредитаДепозита,
	|	ОплатыПоГрафику.ВалютаВзаиморасчетов,
	|	ОплатыПоГрафику.ФормаОплатыЗаявки,
	|	ОплатыПоГрафику.Касса,
	|	ОплатыПоГрафику.ФормаОплатыБезналичная,
	|	ОплатыПоГрафику.ФормаОплатыНаличная,
	|	ОплатыПоГрафику.ФормаОплатыПлатежнаяКарта,
	|	ОплатыПоГрафику.ХозяйственнаяОперация,
	|	ОплатыПоГрафику.ПорядокОплаты,
	|	ОплатыПоГрафику.ВариантГрафика
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОплатыПоГрафику.ДатаОплаты
	|ИТОГИ
	|	СУММА(СуммаВзаиморасчетов)
	|ПО
	|	Организация,
	|	ХозяйственнаяОперация,
	|	ВалютаВзаиморасчетов,
	|	ФормаОплатыЗаявки,
	|	БанковскийСчет,
	|	Касса,
	|	Контрагент,
	|	БанковскийСчетКонтрагента,
	|	ДатаОплаты";
	
КонецФункции

Функция ТекстЗапросаПоЗаявкам()
	
	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаРасходДСРасшифровкаПлатежа.Ссылка КАК Заявка,
	|	ЗаявкаНаРасходДСРасшифровкаПлатежа.НомерСтроки,
	|	ЗаявкаНаРасходДСРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	ЗаявкаНаРасходДСРасшифровкаПлатежа.Ссылка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗаявкаНаРасходДСРасшифровкаПлатежа.Ссылка.Контрагент КАК Контрагент,
	|	ЗаявкаНаРасходДСРасшифровкаПлатежа.СуммаВзаиморасчетов,
	|	ЗаявкаНаРасходДСРасшифровкаПлатежа.ДоговорКредитаДепозита
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходДСРасшифровкаПлатежа
	|ГДЕ
	|	ВЫБОР 
	|		КОГДА ЗаявкаНаРасходДСРасшифровкаПлатежа.Ссылка.ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|			ЗаявкаНаРасходДСРасшифровкаПлатежа.Ссылка.ДатаПлатежа
	|		КОГДА ЗаявкаНаРасходДСРасшифровкаПлатежа.Ссылка.ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|			ЗаявкаНаРасходДСРасшифровкаПлатежа.Ссылка.ЖелательнаяДатаПлатежа
	|		ИНАЧЕ
	|			ЗаявкаНаРасходДСРасшифровкаПлатежа.Ссылка.Дата
	|	КОНЕЦ МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И НЕ ЗаявкаНаРасходДСРасшифровкаПлатежа.Ссылка.ПометкаУдаления
	|	И ЗаявкаНаРасходДСРасшифровкаПлатежа.ДоговорКредитаДепозита <> ЗНАЧЕНИЕ(Справочник.ДоговорыКредитовИДепозитов.ПустаяСсылка)
	|	И ЗаявкаНаРасходДСРасшифровкаПлатежа.Ссылка.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам), 
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаПоДепозитам), 
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаПоЗаймамВыданным))
	|{ГДЕ
	|	ЗаявкаНаРасходДСРасшифровкаПлатежа.ДоговорКредитаДепозита.* КАК Договор}";
	
КонецФункции

Функция ОплатыЗаПериод(ДатаНачала, ДатаОкончания, Договоры, Контрагенты)
	
	ТекстЗапроса = ТекстЗапросаПоОплатам();
	
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса);
	ПостроительЗапроса.Параметры.Вставить("ДатаНачала", ДатаНачала);
	ПостроительЗапроса.Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	ПостроительЗапроса.Параметры.Вставить("ВалютаРегл",Константы.ВалютаРегламентированногоУчета.Получить());
	ПоляОтбора = ПостроительЗапроса.Отбор.ПолучитьДоступныеПоля();
	ПостроительЗапроса.Отбор.УстановитьДоступныеПоля(ПоляОтбора);
	
	Если ЗначениеЗаполнено(Контрагенты) Тогда
		
		Отбор = ПостроительЗапроса.Отбор.Добавить("Контрагент");
		Отбор.ВидСравнения = ВидСравнения.ВСписке;
		Отбор.Значение = Контрагенты;
		Отбор.Использование = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договоры) Тогда
		
		Отбор = ПостроительЗапроса.Отбор.Добавить("Договор");
		Отбор.ВидСравнения = ВидСравнения.ВСписке;
		Отбор.Значение = Договоры;
		Отбор.Использование = Истина;
		
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();	
	Возврат ПостроительЗапроса.Результат;
	
КонецФункции

Функция ЗаявкиЗаПериод(ДатаНачала, ДатаОкончания, Договоры)
	
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапросаПоЗаявкам());
	ПостроительЗапроса.Параметры.Вставить("ДатаНачала", ДатаНачала);
	ПостроительЗапроса.Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	
	Если ЗначениеЗаполнено(Договоры) Тогда
		
		ОтборДоговора = ПостроительЗапроса.Отбор.Добавить("Договор");
		ОтборДоговора.Установить(Договоры);
		ОтборДоговора.ВидСравнения = ВидСравнения.ВСписке;
		
	КонецЕсли;
	
	ПостроительЗапроса.Выполнить();	
	Возврат ПостроительЗапроса.Результат.Выгрузить();
	
КонецФункции


#КонецЕсли