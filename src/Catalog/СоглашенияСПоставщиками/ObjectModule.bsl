#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет наборы значений доступа
// по объекту в таблице с полями:
//  - НомерНабора     Число                                     (необязательно, если набор один),
//  - ВидДоступа      ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//  - ЗначениеДоступа Неопределено, СправочникСсылка или др.    (обязательно),
//  - Чтение          Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Добавление      Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Изменение       Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Удаление        Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора).
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	СтрокаТаб = Таблица.Добавить();
	СтрокаТаб.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ГруппыПартнеров;
	СтрокаТаб.ЗначениеДоступа = Партнер;

	Если ЗначениеЗаполнено(Организация) Тогда

		СтрокаТаб = Таблица.Добавить();
		СтрокаТаб.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.Организации;
		СтрокаТаб.ЗначениеДоступа = Организация;

	КонецЕсли;

	Если ЗначениеЗаполнено(Склад) Тогда

		СтрокаТаб = Таблица.Добавить();
		СтрокаТаб.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.Склады;
		СтрокаТаб.ЗначениеДоступа = Склад;

	КонецЕсли;

КонецПроцедуры

// Заполняет реквизиты документа по умолчанию
//
Процедура ЗаполнитьРеквизитыПоУмолчанию() Экспорт
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.Партнеры") Тогда
		ЗаполнитьДокументНаОснованииПартнера(ДанныеЗаполнения);
	КонецЕсли;

	ИнициализироватьСправочник();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПоступлениеПоНесколькимЗаказам") Тогда
		ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Дата начала действия соглашения должна быть не меньше, чем дата документа.
	Если ЗначениеЗаполнено(Дата) И ЗначениеЗаполнено(ДатаНачалаДействия) Тогда	
			
		Если НачалоДня(Дата) > ДатаНачалаДействия Тогда
				
			ТекстОшибки = НСтр("ru='Дата начала действия соглашения должна быть не меньше даты соглашения'");

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"ДатаНачалаДействия",
				,
				Отказ
			);

		Конецесли;

	КонецЕсли;

	// Дата окончания действия соглашения должна быть не меньше, чем дата документа.
	Если ЗначениеЗаполнено(Дата) И ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда	
			
		Если НачалоДня(Дата) > ДатаОкончанияДействия Тогда
				
			ТекстОшибки = НСтр("ru='Дата окончания действия соглашения должна быть не меньше даты соглашения'");

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"ДатаОкончанияДействия",
				,
				Отказ
			);

		Конецесли;

	КонецЕсли;

	// Дата окончания действия соглашения должна быть не меньше, чем дата начала действия.
	Если ЗначениеЗаполнено(ДатаНачалаДействия) И ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда
				
		Если ДатаНачалаДействия > ДатаОкончанияДействия Тогда
			
			ТекстОшибки = НСтр("ru='Дата окончания действия соглашения должна быть не меньше даты начала действия'");

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"ДатаОкончанияДействия",
				,
				Отказ
			);
		
		Конецесли;

	КонецЕсли;

	Если Не ДоступноДляЗакупки И Не ДоступноДляПродажиКлиентам Тогда
		
			ТекстОшибки = НСтр("ru='Должен быть установлен один из флагов ""Доступно для продажи клиентами"" или ""Доступно для закупки""'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"ДоступноДляПродажиКлиентам",
				,
				Отказ
			);
		
	КонецЕсли;
		
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ПоступлениеТоваровУслуг.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов
	);
	
	Если ИспользуютсяДоговорыКонтрагентов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПорядокРасчетов");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов
	);
	
	ВзаиморасчетыСервер.ПроверитьПорядокОплаты(ЭтотОбъект, Отказ);
	
	Если Не Отказ Тогда
		Отказ = ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиСправочника(
		ЭтотОбъект,
		Перечисления.СтатусыСоглашенийСПоставщиками.НеСогласовано
	);
	
	Если ЗначениеЗаполнено(Склад) Тогда
		
		СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументоЗакупки(Склад);
		
		Если Не СкладГруппа И
			Не ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении", Новый Структура("Склад", Склад)) Тогда
			ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
		КонецЕсли;
		
	КонецЕсли;
	
	// Очистим реквизиты документа не используемые для хозяйственной операции.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Справочники.СоглашенияСПоставщиками.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
		НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	КонецЕсли;

	// Отработка смены пометки удаления
	Если Не ЭтоНовый() И ПометкаУдаления <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления") Тогда
		Документы.СоглашениеСПоставщиком.УстановитьПометкуУдаления(Ссылка, ПометкаУдаления);
		Справочники.ВидыЗапасов.УстановитьПометкуУдаления(Новый Структура("Соглашение", Ссылка), ПометкаУдаления);
	КонецЕсли;
	
	Если ИспользуютсяДоговорыКонтрагентов Тогда
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоглашенияСПоставщиками.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|ГДЕ
	|	СоглашенияСПоставщиками.ИспользуютсяДоговорыКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИспользоватьДоговорыСПоставщиками.Значение КАК ИспользоватьДоговорыСПоставщиками
	|ИЗ
	|	Константа.ИспользоватьДоговорыСПоставщиками КАК ИспользоватьДоговорыСПоставщиками");
	
	РезультатПакетаЗапросов = Запрос.ВыполнитьПакет();
	
	ИспользуютсяДоговорыКонтрагентов = Не РезультатПакетаЗапросов[0].Пустой();
	ВыборкаКонстанты = РезультатПакетаЗапросов[1].Выбрать();
	ВыборкаКонстанты.Следующий();
	
	Если ИспользуютсяДоговорыКонтрагентов И Не ВыборкаКонстанты.ИспользоватьДоговорыСПоставщиками Тогда
		ДополнительныеСвойства.Вставить("УстановленоЗначениеКонстантыИспользоватьДоговорыСПоставщиками", Истина);
		Константы.ИспользоватьДоговорыСПоставщиками.Установить(Истина);
	КонецЕсли;
	
	Если Не ИспользуютсяДоговорыКонтрагентов И ВыборкаКонстанты.ИспользоватьДоговорыСПоставщиками Тогда
		ДополнительныеСвойства.Вставить("УстановленоЗначениеКонстантыИспользоватьДоговорыСПоставщиками", Ложь);
		Константы.ИспользоватьДоговорыСПоставщиками.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Статус                  = Перечисления.СтатусыСоглашенийСПоставщиками.НеСогласовано;
	Согласован              = Ложь;
	ДатаНачалаДействия      = '00010101';
	ДатаОкончанияДействия   = '00010101';

	ИнициализироватьСправочник();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ПроверитьВозможностьВводаНаОсновании()
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыПартнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Партнер, "Поставщик,Конкурент");
	
	Если Не РеквизитыПартнера.Поставщик И Не РеквизитыПартнера.Конкурент Тогда
		
		ТекстОшибки = НСтр("ru='Партнер не является поставщиком или конкурентом. Соглашение с поставщиком может быть создано только на основании поставщика или конкурента.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Партнер%", Партнер);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет соглашение с поставщиком на основании партнера
//
// Параметры:
//	Основание - СправочникСсылка.Партнеры - ссылка на партнера
//
Процедура ЗаполнитьДокументНаОснованииПартнера(Знач Основание)
	
	Партнер = Основание;
	ПроверитьВозможностьВводаНаОсновании();
	ЗаполнитьРеквизитыПоУмолчанию();
	
КонецПроцедуры

// Заполняет соглашение с поставщиком в соответствии с отбором.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Структура со значениями заполнения
//
Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		
		Партнер = ДанныеЗаполнения.Партнер;
		ПроверитьВозможностьВводаНаОсновании();
		ЗаполнитьРеквизитыПоУмолчанию();
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Организация") Тогда
		Организация = ДанныеЗаполнения.Организация;
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует соглашение с поставщиком
//
Процедура ИнициализироватьСправочник()

	Менеджер               = Пользователи.ТекущийПользователь();
	Валюта                 = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
	Организация            = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад                  = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки"));
	ПорядокОплаты          = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Валюта, Неопределено);
	ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(ПорядокОплаты);
	Статус                 = Метаданные().Реквизиты.Статус.ЗначениеЗаполнения;
	
	Если Не ИспользуютсяДоговорыКонтрагентов Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам")
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
			ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		Иначе
			ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли
