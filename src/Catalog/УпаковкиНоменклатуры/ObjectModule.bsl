#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоНовый() Тогда

		СтруктураРеквизитов = Новый Структура;
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			СтруктураРеквизитов.Вставить("НаборУпаковок", "НаборУпаковок");
			СтруктураРеквизитов.Вставить("ТипНоменклатуры", "ТипНоменклатуры");
		Иначе // если владелец-тип справочник НаборыУпаковок.
			СтруктураРеквизитов.Вставить("НаборУпаковок", "Ссылка");
		КонецЕсли;

		ЗначенияРеквизитовВИБ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Владелец, СтруктураРеквизитов);

		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда

			Если ЗначенияРеквизитовВИБ.НаборУпаковок <> Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
				
				ТекстСообщения = НСтр("ru = 'Для номенклатуры %Владелец% выбран набор упаковок ""%ТекущееЗначение%"", 
								|поэтому все упаковки должны подчинятся набору упаковок, а не номенклатуре'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Владелец%", Строка(Владелец));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущееЗначение%", Строка(ЗначенияРеквизитовВИБ.НаборУпаковок));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Владелец",, Отказ);
				
			КонецЕсли;
			
			Если ЗначенияРеквизитовВИБ.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар И
				ЗначенияРеквизитовВИБ.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
				
				ТекстСообщения = НСтр("ru = 'Номенклатура %Владелец% не является товаром или многооборотной тарой. Упаковки ведутся только для товаров и многооборотной тары.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Владелец%", Строка(Владелец));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Владелец",, Отказ);
				
			КонецЕсли;
			
		Иначе // если владелец-тип справочник НаборыУпаковок.

			Если ЗначенияРеквизитовВИБ.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
				
				ТекстСообщения = НСтр("ru = 'Для номенклатуры %Владелец% выбран набор упаковок ""%ТекущееЗначение%"",
								|поэтому все упаковки должны подчинятся номенклатуре, а не набору упаковок'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Владелец%", Строка(Владелец));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекущееЗначение%", Строка(ЗначенияРеквизитовВИБ.НаборУпаковок));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "Владелец",, Отказ);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если Безразмерная Тогда
		Высота  = 0;
		Ширина  = 0;
		Глубина = 0;
		Объем   = 0;
		
		ЛинейныеРазмерыПредставление = НСтр("ru='Безразмерная'");
	Иначе
		
		ЛинейныеРазмерыПредставление = Строка(Высота) + " X " + Строка(Ширина) + " X " + Строка(Глубина);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Если СостоитИзДругихУпаковок Тогда
			Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Коэффициент") * КоличествоУпаковок;
		Иначе
			Родитель           = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			КоличествоУпаковок = 0;
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("НужноОбновитьВариантыПереупаковки", Истина);
		ДополнительныеСвойства.Вставить("ЭтоНовый", Истина);
		ДополнительныеСвойства.Вставить("ПоменялсяКоэффициент", Ложь);
		ДополнительныеСвойства.Вставить("ПоменялсяРодитель", Ложь);
		ДополнительныеСвойства.Вставить("БывшийРодитель", Неопределено);
	Иначе
		ДополнительныеСвойства.Вставить("ЭтоНовый", Ложь);
		РеквизитыДоЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Родитель, Коэффициент");
		
		Если РеквизитыДоЗаписи.Родитель <> Родитель
			И Не ДополнительныеСвойства.Свойство("РазрешенаСменаРодителя") Тогда
			ТекстСообщения = НСтр("ru = 'Родителя можно менять только из формы элемента.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			Возврат;
		КонецЕсли;
		
		Если СостоитИзДругихУпаковок Тогда
			Коэффициент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Родитель, "Коэффициент") * КоличествоУпаковок;
		Иначе
			Родитель           = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
			КоличествоУпаковок = 0;
		КонецЕсли;
		
		Если РеквизитыДоЗаписи.Родитель <> Родитель 
			Или РеквизитыДоЗаписи.Коэффициент <> Коэффициент Тогда
			ДополнительныеСвойства.Вставить("ПоменялсяКоэффициент", РеквизитыДоЗаписи.Коэффициент <> Коэффициент);
			ДополнительныеСвойства.Вставить("ПоменялсяРодитель", РеквизитыДоЗаписи.Родитель <> Родитель);
			ДополнительныеСвойства.Вставить("НужноОбновитьВариантыПереупаковки", Истина);
			ДополнительныеСвойства.Вставить("БывшийРодитель", Неопределено);
			Если ДополнительныеСвойства.ПоменялсяРодитель Тогда
				ДополнительныеСвойства.Вставить("БывшийРодитель", РеквизитыДоЗаписи.Родитель);
			КонецЕсли;
			
		Иначе
			ДополнительныеСвойства.Вставить("НужноОбновитьВариантыПереупаковки", Ложь);
			ДополнительныеСвойства.Вставить("ПоменялсяКоэффициент", Ложь);
			ДополнительныеСвойства.Вставить("ПоменялсяРодитель", Ложь);		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

Процедура ПередУдалением(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Упаковка = &Упаковка";
	
	Запрос.УстановитьПараметр("Упаковка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Штрихкод.Значение = Выборка.Штрихкод;
		НаборЗаписей.Отбор.Штрихкод.Использование = Истина;
		НаборЗаписей.Записать();
	КонецЦикла;
	
	//Корректировка регистра сведений "ВариантыПереупаковки"
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Родитель);
	СтарыеМаксимальныеУпаковки = Новый Массив;
	
	Если НЕ Родитель.Пустая() Тогда
		Если Не Запрос.Выполнить().Пустой() И НоваяКонечная(Родитель) Тогда
			НаборЗаписей = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Упаковка.Установить(Ссылка);
			НаборЗаписей.Прочитать();
			//Для Каждого Запись Из НаборЗаписей Цикл
			//	СтарыеМаксимальныеУпаковки.Вставить(Запись.МаксимальнаяУпаковкаВВетви);		
			//КонецЦикла;
			
			СтараяМаксимальнаяУпаковка = НаборЗаписей[0].МаксимальнаяУпаковкаВВетви;
			
			//Заменить Максимальную упаковку старую на новую
			НаборЗаписей = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.МаксимальнаяУпаковкаВВетви.Установить(СтараяМаксимальнаяУпаковка);
			НаборЗаписей.Прочитать();
			ТаблицаРегистра = НаборЗаписей.Выгрузить();
			
			НаборЗаписей = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.МаксимальнаяУпаковкаВВетви.Установить(Родитель);
			НаборЗаписей.Прочитать();
			ТаблицаРегистра.ЗаполнитьЗначения(Родитель,"МаксимальнаяУпаковкаВВетви");
			НаборЗаписей.Загрузить(ТаблицаРегистра);
			НаборЗаписей.Записать();

			//Добавить запись с пустым источником
			НаборЗаписей.Отбор.МаксимальнаяУпаковкаВВетви.Установить(Родитель);
			НаборЗаписей.Отбор.Источник.Установить(Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
			НаборЗаписей.Отбор.Упаковка.Установить(Родитель);
			НаборЗаписей.Прочитать();
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Упаковка = Родитель;
			НоваяЗапись.МаксимальнаяУпаковкаВВетви = Родитель;
			НаборЗаписей.Записать();	
			
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Функция НоваяКонечная(РодительСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВариантыПереупаковки.Упаковка,
	|	ВариантыПереупаковки.Источник,
	|	ВариантыПереупаковки.МаксимальнаяУпаковкаВВетви,
	|	ВариантыПереупаковки.Количество
	|ИЗ
	|	РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
	|ГДЕ
	|	ВариантыПереупаковки.Упаковка = &Упаковка
	|	И ВариантыПереупаковки.Источник.ПометкаУдаления = Ложь";
	Запрос.УстановитьПараметр("Упаковка",РодительСсылка);
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Если ДанныеЗаполнения = Неопределено   
		Или Не ДанныеЗаполнения.Свойство("Владелец",Владелец)
		Или Не ЗначениеЗаполнено(Владелец) Тогда
		
		ТекстИсключения = НСтр("ru='Упаковку нужно создавать из формы номенклатуры или набора упаковок.'");
		
		ВызватьИсключение ТекстИсключения;
	ИначеЕсли ДанныеЗаполнения.Свойство("Родитель",Родитель) Тогда
		Если ЗначениеЗаполнено(Родитель) Тогда
			СостоитИзДругихУпаковок = Истина;
		КонецЕсли;
	КонецЕсли;
	
	СкладскаяГруппа = ЗначениеНастроекПовтИсп.СкладскаяГруппаУпаковокПоУмолчанию(СкладскаяГруппа);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не СостоитИзДругихУпаковок Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Родитель");
		МассивНепроверяемыхРеквизитов.Добавить("КоличествоУпаковок");		
	КонецЕсли;
	
	Если Не ПоставляетсяВМногооборотнойТаре Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НоменклатураМногооборотнаяТара");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.НужноОбновитьВариантыПереупаковки Тогда
		ОбновитьВариантыПереупаковки();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Прочее


Функция МассивРодителейУпаковки(Упаковка,УпаковкаКонечная = Неопределено)
	
	МассивГрупп = Новый Массив;
	Структура = Новый Структура;
	Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Упаковка, Новый Структура("Родитель, Коэффициент", "Родитель", "Родитель.Коэффициент"));
	
	Пока ЗначениеЗаполнено(Структура.Родитель) И  Структура.Родитель <> УпаковкаКонечная Цикл
		МассивГрупп.Добавить(Структура);
		Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Структура.Родитель, Новый Структура("Родитель, Коэффициент", "Родитель", "Родитель.Коэффициент"));
	КонецЦикла;
	
	Возврат МассивГрупп; 
	
КонецФункции

Функция ЕстьПотомкиУпаковки(Упаковка)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УпаковкиНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Родитель = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Упаковка);
	
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

Функция	МаксимальныеУпаковкиВетви(Упаковка)
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Ссылка
		|ПОМЕСТИТЬ ВсеПотомкиТекущейУпаковки
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Ссылка В ИЕРАРХИИ(&Ссылка)
		|	И УпаковкиНоменклатуры.Ссылка <> &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПотомкиТекущейУпаковки.Ссылка КАК Ссылка 
		|ИЗ
		|	ВсеПотомкиТекущейУпаковки КАК ВсеПотомкиТекущейУпаковки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|		ПО ВсеПотомкиТекущейУпаковки.Ссылка = УпаковкиНоменклатуры.Родитель
		|ГДЕ
		|	УпаковкиНоменклатуры.Ссылка ЕСТЬ NULL";
		
		Запрос.УстановитьПараметр("Ссылка", Упаковка);
			
		Возврат  Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");	
КонецФункции

Функция ДобавитьЗаписиРекурсивно(Набор,МаксимальнаяУпаковка,УпаковкаИсточник,КоэффициентУпаковкиИсточника,МассивРодителей)
	Для Каждого СтрокаМассива Из МассивРодителей Цикл
		
		НоваяСтрока = Набор.Добавить();                                                                                               
		НоваяСтрока.Упаковка = СтрокаМассива.Родитель;
		НоваяСтрока.Источник = УпаковкаИсточник;
		НоваяСтрока.МаксимальнаяУпаковкаВВетви = МаксимальнаяУпаковка;
		НоваяСтрока.Количество = КоэффициентУпаковкиИсточника / СтрокаМассива.Коэффициент;
		
		Набор = ДобавитьЗаписиРекурсивно(Набор,МаксимальнаяУпаковка,СтрокаМассива.Родитель,СтрокаМассива.Коэффициент,МассивРодителейУпаковки(СтрокаМассива.Родитель)); 
		
	КонецЦикла;
	
	Возврат Набор
КонецФункции	

Процедура ОбновитьВариантыПереупаковки()
	
	Если ДополнительныеСвойства.ЭтоНовый Тогда
		ЕстьПотомкиУпаковки = Ложь;
	Иначе
		ЕстьПотомкиУпаковки = ЕстьПотомкиУпаковки(Ссылка);
	КонецЕсли;
	
	//Перемещение
	Если ДополнительныеСвойства.ПоменялсяРодитель Тогда
		
		//Удалить записи с максимальными упаковками равными новуму родителю
		НаборУдаления = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
		НаборУдаления.Отбор.МаксимальнаяУпаковкаВВетви.Установить(Ссылка.Родитель);
		НаборУдаления.Записать();

		//Удалить запись перенесенной упаковки
		НаборУдаления = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
		НаборУдаления.Отбор.Упаковка.Установить(ДополнительныеСвойства.БывшийРодитель);
		НаборУдаления.Отбор.Источник.Установить(Ссылка);
		НаборУдаления.Записать();
		
	 	МассивРодителей = МассивРодителейУпаковки(ДополнительныеСвойства.БывшийРодитель);
			
		//Изменить максимальную упаковку в ветви
		Если Не ЕстьПотомкиУпаковки(ДополнительныеСвойства.БывшийРодитель) Тогда 
			Набор = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
			Набор.Отбор.Упаковка.Установить(ДополнительныеСвойства.БывшийРодитель);
			НоваяСтрока = Набор.Добавить();
			НоваяСтрока.Упаковка = ДополнительныеСвойства.БывшийРодитель;
			НоваяСтрока.МаксимальнаяУпаковкаВВетви = ДополнительныеСвойства.БывшийРодитель;
			Набор.Записать();
			
			Набор = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
			Набор.Прочитать();
			Набор = ДобавитьЗаписиРекурсивно(Набор, ДополнительныеСвойства.БывшийРодитель, ДополнительныеСвойства.БывшийРодитель, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительныеСвойства.БывшийРодитель,"Коэффициент"), МассивРодителей);
			Набор.Записать();
			
		КонецЕсли;
		 
		МаксимальныеУпаковкиВетви = МаксимальныеУпаковкиВетви(Ссылка);
		Если МаксимальныеУпаковкиВетви.Количество() = 0 Тогда
			МаксимальныеУпаковкиВетви.Добавить(Ссылка);	
		КонецЕсли;
				
		МассивРодителей.Добавить(Новый Структура("Родитель", ДополнительныеСвойства.БывшийРодитель));
		//Удалить записи пересенных ветвей для бывших корней 
		Для Каждого СтрМас Из МассивРодителей Цикл
			Для Каждого МаксимальнаяУпаковкаВетви Из  МаксимальныеУпаковкиВетви Цикл
				
				НаборУдаления = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
				НаборУдаления.Отбор.Упаковка.Установить(СтрМас.Родитель);
				НаборУдаления.Отбор.МаксимальнаяУпаковкаВВетви.Установить(МаксимальнаяУпаковкаВетви);
				НаборУдаления.Записать();
				
			КонецЦикла;
									
		КонецЦикла;
		
		//Удалить запись для вершину на которую перенесли ветвь если у неё нет потомков		
		Набор = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
		Набор.Отбор.Упаковка.Установить(Ссылка.Родитель);
		Набор.Отбор.Источник.Установить(Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
		Набор.Записать();			
				
		//Добавить записи пересенных ветвей для новых корней
		МассивРодителей = МассивРодителейУпаковки(Ссылка);
		Если МассивРодителей.Количество()>0 Тогда
			
			Для Каждого МаксимальнаяУпаковка Из МаксимальныеУпаковкиВетви Цикл
				
				Набор = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
				Набор.Отбор.МаксимальнаяУпаковкаВВетви.Установить(МаксимальнаяУпаковка);
				Набор.Прочитать();
				
				МассивРодителейМаксимальнойУпаковки = МассивРодителейУпаковки(МаксимальнаяУпаковка,Ссылка.Родитель); 		
				МассивРодителейМаксимальнойУпаковки.Добавить(Новый Структура("Родитель,Коэффициент", МаксимальнаяУпаковка, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МаксимальнаяУпаковка,"Коэффициент")));
				Для Каждого СтрМассива Из МассивРодителейМаксимальнойУпаковки Цикл
					Набор = ДобавитьЗаписиРекурсивно(Набор, МаксимальнаяУпаковка, СтрМассива.Родитель, СтрМассива.Коэффициент, МассивРодителей);
				КонецЦикла;
				
				Набор.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Родитель) Тогда
		//Упаковка в корне дерева, она не может быть исходной для других упаковок
		Набор = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
		Набор.Отбор.Упаковка.Установить(Ссылка);
		
		Если Не ЕстьПотомкиУпаковки Тогда 
			//Упаковку не из чего брать, поэтому в качестве исходной, запишем пустую
			НоваяСтрока = Набор.Добавить();
			НоваяСтрока.Упаковка = Ссылка;
			НоваяСтрока.МаксимальнаяУпаковкаВВетви = Ссылка;
			
			Набор.Записать();
			
			Возврат;
		КонецЕсли;
		
		Если Не ДополнительныеСвойства.ПоменялсяКоэффициент Тогда
			Возврат;
		КонецЕсли;
		
		Набор.Прочитать();
		
		Для Каждого СтрТабл из Набор Цикл
			СтрТабл.Количество = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрТабл.Источник, "Коэффициент") / Коэффициент;
		КонецЦикла;
		
		Набор.Записать();
		
		Возврат;
		
	КонецЕсли;
	
	МассивРодителейУпаковки = МассивРодителейУпаковки(Ссылка);
	
	Если ЕстьПотомкиУпаковки Тогда
		
		//Определим максимальные упаковки ветви текущей упаковки	
		МаксимальныеУпаковкиВетви = МаксимальныеУпаковкиВетви(Ссылка);
		
		//Для всех родителей, перезапишем исходные упаковки
		Набор = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
		Набор.Отбор.Источник.Установить(Ссылка);
		
		Для каждого СтрМас из МассивРодителейУпаковки Цикл
			//Удалим запись с пустой упаковкой для родителя
			НаборУдаления = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
			НаборУдаления.Отбор.Упаковка.Установить(СтрМас.Родитель);
			НаборУдаления.Отбор.Источник.Установить(Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
			НаборУдаления.Записать();
			
			Для Каждого МаксимальнаяУпаковкаВетви Из  МаксимальныеУпаковкиВетви Цикл
				
				НоваяСтрока = Набор.Добавить();
				НоваяСтрока.Упаковка = СтрМас.Родитель;
				НоваяСтрока.Источник = Ссылка;
				НоваяСтрока.МаксимальнаяУпаковкаВВетви = МаксимальнаяУпаковкаВетви;
				НоваяСтрока.Количество = Коэффициент / СтрМас.Коэффициент;
				
			КонецЦикла;
						
		КонецЦикла;
		
		Набор.Записать();
		
		//Изменить количество в потоммках
		Если Не ДополнительныеСвойства.ПоменялсяКоэффициент Тогда
			Возврат;
		КонецЕсли;
		Набор = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
		Набор.Отбор.Упаковка.Установить(Ссылка);		
		Набор.Прочитать();
		
		Для Каждого СтрТабл из Набор Цикл
			СтрТабл.Количество = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрТабл.Источник, "Коэффициент") / Коэффициент;
		КонецЦикла;
		
		Набор.Записать();
		
		Возврат;
	
	Иначе
		
		//Определим максимальные упаковки ветви не нужно - упаковка сама является максимальной
		
		//Для всех родителей, перезапишем исходные упаковки
		Набор = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
		Набор.Отбор.Источник.Установить(Ссылка);
		
		Для каждого СтрМас из МассивРодителейУпаковки Цикл
			//Удалим запись с пустой упаковкой для родителя
			НаборУдаления = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
			НаборУдаления.Отбор.Упаковка.Установить(СтрМас.Родитель);
			НаборУдаления.Отбор.Источник.Установить(Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
			НаборУдаления.Записать();
			
			НоваяСтрока = Набор.Добавить();
			НоваяСтрока.Упаковка = СтрМас.Родитель;
			НоваяСтрока.Источник = Ссылка;
			НоваяСтрока.МаксимальнаяУпаковкаВВетви = Ссылка;
			НоваяСтрока.Количество = Коэффициент / СтрМас.Коэффициент;
			
		КонецЦикла;
		
		Набор.Записать();
		
		//Упаковку не из чего брать, поэтому в качестве исходной, запишем пустую
		Набор = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
		Набор.Отбор.Упаковка.Установить(Ссылка);
		НоваяСтрока = Набор.Добавить();
		НоваяСтрока.Упаковка = Ссылка;
		НоваяСтрока.МаксимальнаяУпаковкаВВетви = Ссылка;
		
		Набор.Записать();
		
		//Исправить Максимальную Упаковку в записях 
		Набор = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
		Набор.Отбор.МаксимальнаяУпаковкаВВетви.Установить(Родитель);
		Набор.Прочитать();
		ИзмененныеЗаписи = Набор.Выгрузить();
		Набор.Очистить();
		Набор.Записать();
		
		Набор = РегистрыСведений.ВариантыПереупаковки.СоздатьНаборЗаписей();
		Для Каждого Строка Из ИзмененныеЗаписи Цикл
			Набор.Отбор.Источник.Установить(Строка.Источник);
			Набор.Отбор.Упаковка.Установить(Строка.Упаковка);
			Набор.Прочитать();
			НоваяСтрока = Набор.Добавить();
			НоваяСтрока.Источник = Строка.Источник;
			НоваяСтрока.Упаковка = Строка.Упаковка;
			НоваяСтрока.МаксимальнаяУпаковкаВВетви = Ссылка;
			НоваяСтрока.Количество = Строка.Количество;
			Набор.Записать();
        КонецЦикла;

	КонецЕсли;	
		
	МассивБывшихРодителей = Неопределено;
		
КонецПроцедуры



#КонецЕсли