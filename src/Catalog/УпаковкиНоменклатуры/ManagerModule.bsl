#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС
	
//Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//	Возвращаемое значание:
//		Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	Результат = Новый Массив;
	Результат.Добавить("Коэффициент");
	Результат.Добавить("ЕдиницаИзмерения");
	Результат.Добавить("Родитель");
	Результат.Добавить("КоличествоУпаковок");
	Результат.Добавить("СостоитИзДругихУпаковок");
	Возврат Результат;
КонецФункции

//Ищет упаковку идентичную переданной упаковке, если не находит - создает упаковку для переданной номенклатуры
//
//	Параметры:
//		НоменклатураИсходногоКачества - СправочникСслыка.Номенклатура - номенклатура, среди упаковок производится поиск
//		Номенклатура - СправочникСсылка.Номенклатура - владелец новой упаковки
//		УпаковкаВДокументе - СправочникСсылка.Упаковки - упаковка качественного товара, по которой ищется идентичная упаковка
//			некачественного товара
//	Возвращаемое значение:
//		СправочникСсылка.УпаковкиНоменклатуры
//
Функция ИндентичнаяУпаковка(НоменклатураИсходногоКачества, Номенклатура, УпаковкаВДокументе) Экспорт
	
	Если ЗначениеЗаполнено(УпаковкаВДокументе) Тогда
		ЗапросПоУпаковке = Новый Запрос;
		ЗапросПоУпаковке.УстановитьПараметр("Ссылка", УпаковкаВДокументе);
		ЗапросПоУпаковке.УстановитьПараметр("Номенклатура", Номенклатура);
		ЗапросПоУпаковке.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УпаковкаНекачественногоТовара.Ссылка КАК УпаковкаНекачественногоТовара
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры КАК УпаковкаКачественногоТовара
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкаНекачественногоТовара
		|		ПО УпаковкаКачественногоТовара.Коэффициент = УпаковкаНекачественногоТовара.Коэффициент
		|			И УпаковкаКачественногоТовара.ЕдиницаИзмерения = УпаковкаНекачественногоТовара.ЕдиницаИзмерения
		|			И УпаковкаКачественногоТовара.СкладскаяГруппа = УпаковкаНекачественногоТовара.СкладскаяГруппа
		|ГДЕ
		|	УпаковкаКачественногоТовара.Ссылка = &Ссылка
		|	И УпаковкаНекачественногоТовара.Владелец = ВЫБОР
		|			КОГДА ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|				ТОГДА &Номенклатура
		|			ИНАЧЕ ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).НаборУпаковок
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	УпаковкаНекачественногоТовара.Наименование,
		|	УпаковкаНекачественногоТовара.Ссылка";
		
		ВыборкаПоУпаковке = ЗапросПоУпаковке.Выполнить().Выбрать();
		Если ВыборкаПоУпаковке.Следующий() Тогда
			НайденнаяУпаковка = ВыборкаПоУпаковке.УпаковкаНекачественногоТовара;
		Иначе
			НайденнаяУпаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НайденнаяУпаковка)
			//если у некачественной номенклатуры не индивидуальные упаковки, то создавать их автоматически мы не будем
			Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура,"НаборУпаковок") <> Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры Тогда
			
			Возврат НайденнаяУпаковка;
		КонецЕсли;
	Иначе
		Возврат Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	КонецЕсли;	
	
	ЗапросПоУпаковкам = Новый Запрос;
	ЗапросПоУпаковкам.Текст =
	"ВЫБРАТЬ
	|	УпаковкиНоменклатуры.Наименование КАК Наименование,
	|	УпаковкиНоменклатуры.Безразмерная КАК Безразмерная,
	|	УпаковкиНоменклатуры.Вес КАК Вес,
	|	УпаковкиНоменклатуры.Высота КАК Высота,
	|	УпаковкиНоменклатуры.Глубина КАК Глубина,
	|	УпаковкиНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	УпаковкиНоменклатуры.Коэффициент КАК Коэффициент,
	|	УпаковкиНоменклатуры.ЛинейныеРазмерыПредставление КАК ЛинейныеРазмерыПредставление,
	|	УпаковкиНоменклатуры.Объем КАК Объем,
	|	УпаковкиНоменклатуры.СкладскаяГруппа КАК СкладскаяГруппа,
	|	УпаковкиНоменклатуры.Типоразмер КАК Типоразмер,
	|	УпаковкиНоменклатуры.Ширина КАК Ширина,
	|	УпаковкиНоменклатуры.Представление КАК Представление
	|ИЗ
	|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|ГДЕ
	|	УпаковкиНоменклатуры.Ссылка = &УпаковкаВДокументе";
	
	ЗапросПоУпаковкам.УстановитьПараметр("УпаковкаВДокументе", УпаковкаВДокументе);
	ВыборкаПоУпаковкам = ЗапросПоУпаковкам.Выполнить().Выбрать();
	
	ВыборкаПоУпаковкам.Следующий();
	
	УстановитьПривилегированныйРежим(Истина);
	
	НоваяУпаковка = Справочники.УпаковкиНоменклатуры.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НоваяУпаковка, ВыборкаПоУпаковкам);
	
	//Упаковка может быть только индивидульной
	НоваяУпаковка.Владелец = Номенклатура;
	НоваяУпаковка.Записать();
	
	Возврат НоваяУпаковка.Ссылка;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
 	ДанныеВыбора = Новый СписокЗначений;

	Если Параметры.Свойство("ВыборРодителя") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Ссылка КАК Упаковка,
		|	ПРЕДСТАВЛЕНИЕ(УпаковкиНоменклатуры.Ссылка) КАК УпаковкаПредставление
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Ссылка <> &Ссылка
		|	И УпаковкиНоменклатуры.Владелец = &Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
		Запрос.УстановитьПараметр("Владелец", Параметры.Владелец);
		Запрос.УстановитьПараметр("Ссылка", Параметры.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(Выборка.Упаковка, Выборка.УпаковкаПредставление);
		КонецЦикла;
		
	Иначе
		
		
		Номенклатура = Неопределено;
		
		Если Не Параметры.Свойство("Номенклатура", Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		
		Если Параметры.Свойство("ДобавлятьПустуюУпаковку") Тогда
			ДобавлятьПустуюУпаковку = Параметры.ДобавлятьПустуюУпаковку;	
		ИначеЕсли Параметры.Свойство("Склад")
			И ЗначениеЗаполнено(Параметры.Склад) Тогда
			ДобавлятьПустуюУпаковку = Не СкладыСервер.ИспользоватьАдресноеХранение(Параметры.Склад,Параметры.Помещение);		
		Иначе
			ДобавлятьПустуюУпаковку = Истина;
		КонецЕсли;
		
		ПолучитьСписокДляВыбораУпаковок(Номенклатура, ДанныеВыбора, Параметры.СтрокаПоиска, ДобавлятьПустуюУпаковку);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ПолучитьСписокДляВыбораУпаковок(Номенклатура, ДанныеВыбора, СтрокаПоиска = Неопределено, Знач ДобавлятьПустуюУпаковку)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПРЕДСТАВЛЕНИЕ(СпрНоменклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
	|	ЕСТЬNULL(СпрУпаковки.Ссылка, НЕОПРЕДЕЛЕНО) КАК Упаковка,
	|	ПРЕДСТАВЛЕНИЕ(СпрУпаковки.Ссылка) КАК УпаковкаПредставление,
	|	ЕСТЬNULL(СпрУпаковки.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмеренияУпаковки,
	|	ЕСТЬNULL(СпрУпаковки.ЕдиницаИзмерения.Представление,"""") КАК ЕдиницаИзмеренияУпаковкиПредставление,
	|	ЕСТЬNULL(СпрУпаковки.Коэффициент,0) КАК Коэффициент
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК СпрУпаковки
	|		ПО (СпрУпаковки.Владелец = ВЫБОР
	|				КОГДА СпрНоменклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|					ТОГДА СпрНоменклатура.Ссылка
	|				КОГДА СпрНоменклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ПустаяСсылка)
	|					ТОГДА СпрНоменклатура.НаборУпаковок
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			" + ?(СтрокаПоиска = Неопределено, "", "И СпрУпаковки.Наименование ПОДОБНО &СтрокаПоиска") + "
	|   		И НЕ СпрУпаковки.ПометкаУдаления
	|
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Коэффициент,
	|	ЕдиницаИзмеренияУпаковкиПредставление";

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);

	Если СтрокаПоиска <> Неопределено Тогда
		Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска + "%");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьУпаковкаХранения = Ложь;
	ЕдиницаХраненияПредставление = "";
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Коэффициент = 1
			И Выборка.ЕдиницаИзмеренияУпаковки = Выборка.ЕдиницаИзмерения Тогда
			ЕстьУпаковкаХранения = Истина;
		КонецЕсли;
		
		ЕдиницаХраненияПредставление = Выборка.ЕдиницаИзмеренияПредставление; 
		
		Если Выборка.Упаковка <> Неопределено Тогда
			Если Выборка.Коэффициент = 1
				И Выборка.ЕдиницаИзмеренияУпаковки = Выборка.ЕдиницаИзмерения Тогда
				ДанныеВыбора.Добавить(Выборка.Упаковка, Выборка.УпаковкаПредставление, Истина);
			Иначе
				ДанныеВыбора.Добавить(Выборка.Упаковка, Выборка.УпаковкаПредставление, Ложь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Если ДобавлятьПустуюУпаковку
		И Не ЕстьУпаковкаХранения Тогда
		ДанныеВыбора.Вставить(0,Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), ЕдиницаХраненияПредставление)
	КонецЕсли;
КонецПроцедуры

Функция СформироватьНаименование(ЕдиницаИзмерения, Коэффициент, ЕдиницаИзмеренияВладельца) Экспорт
	Возврат СокрЛП(СокрЛП(ЕдиницаИзмерения) + " (" + Формат(Коэффициент,"ЧРД=.") + " " + СокрЛП(ЕдиницаИзмеренияВладельца) + ")");
КонецФункции

// Обработчик обновления УТ 11.1.0.0
//
Процедура УстановитьКонстантуДобавлятьИндивидуальныеУпаковки() Экспорт
	
	Если Константы.ИспользоватьУпаковкиНоменклатуры.Получить() Тогда		
		
		Константы.ДобавлятьИндивидуальныеУпаковкиПриСозданииНоменклатуры.Установить(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли