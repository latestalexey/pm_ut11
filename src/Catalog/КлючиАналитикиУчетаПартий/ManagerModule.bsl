///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС


// Функция получает финансовую партию для текущего документа.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Операция документа
//	РеквизитыДокумента - Структура или ВыборкаИзРезультатаЗапроса - Данные документа
//
// Возвращаемое значение:
//	СправочникСсылка.ВидыЗапасов - Найденный вид запасов
//
Функция КлючиАналитикиУчетаПартийДокумента(РеквизитыДокумента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВидЗапасов = СтруктураАналитикУчетаПартий(РеквизитыДокумента);
	
	МенеджерЗаписи = РегистрыСведений.АналитикаУчетаПартий.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураВидЗапасов);
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		Результат = МенеджерЗаписи.КлючАналитики;
	Иначе
		Результат = СоздатьКлючАналитики(СтруктураВидЗапасов);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция формирует строку наименования финансовой партии.
//
// Параметры:
//	СправочникОбъект - Финансовая партия, для которой необходимо определить наименовние
//
// Возвращаемое значение:
//	Строка - Наименование финансовой партии
//
Функция ПолучитьНаименованиеКлючаАналитикиУчетаПартий(СправочникОбъект) Экспорт
	
	Наименование = "";
		
	Если ЗначениеЗаполнено(СправочникОбъект.ГруппаФинансовогоУчета) Тогда
		Наименование = Наименование
			+ "Группа: " + СправочникОбъект.ГруппаФинансовогоУчета+"; ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникОбъект.Поставщик) Тогда
		Наименование = Наименование
			+ "Поставщик: " + СправочникОбъект.Поставщик+"; ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникОбъект.Контрагент) Тогда
		Наименование = Наименование
			+ "Контрагент: " + СправочникОбъект.Контрагент+"; ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникОбъект.НалогообложениеНДС) Тогда
		Наименование = Наименование
			+ "Налогообложение НДС: " + СправочникОбъект.НалогообложениеНДС+"; ";
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СправочникОбъект.СтавкаНДС) Тогда
		Наименование = Наименование
			+ "Ставка НДС: " + СправочникОбъект.СтавкаНДС;
	КонецЕсли;  	
   		
	Если Прав(СокрЛП(СправочникОбъект.Наименование), 1) =  ";" Тогда
		Наименование = Сред(СокрЛП(Наименование), 1, СтрДлина(СокрЛП(Наименование)) - 1);
	КонецЕсли;
			
	Возврат Наименование;

КонецФункции


///////////////////////////////////////////////////////////////////////////////
// Прочее

Функция СтруктураАналитикУчетаПартий(РеквизитыДокумента)
	
	СтруктураАналитикУчетаПартий = Новый Структура("
		|ГруппаФинансовогоУчета,
		|Поставщик,
		|Контрагент,
		|НалогообложениеНДС,
		|СтавкаНДС,
		|"
	);
	СтруктураАналитикУчетаПартий.ГруппаФинансовогоУчета 	= РеквизитыДокумента.ГруппаФинансовогоУчета;
	СтруктураАналитикУчетаПартий.Поставщик 				 	= РеквизитыДокумента.Поставщик;
	СтруктураАналитикУчетаПартий.Контрагент 				= РеквизитыДокумента.Контрагент;
    СтруктураАналитикУчетаПартий.НалогообложениеНДС 		= РеквизитыДокумента.НалогообложениеНДС;
	СтруктураАналитикУчетаПартий.СтавкаНДС 		 		 	= РеквизитыДокумента.СтавкаНДС;
		
	Возврат СтруктураАналитикУчетаПартий;
	
КонецФункции

Функция НайтиАналитикуУчетаПартий (СтруктураАналитикУчетаПартий)

	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	Ключ.НалогообложениеНДС 	КАК НалогообложениеНДС,
	                      |	Ключ.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	                      |	Ключ.Поставщик 				КАК Поставщик,
						  |	Ключ.Контрагент				КАК Контрагент,
	                      |	Ключ.Наименование 			КАК Наименование,
	                      |	Ключ.Ссылка 				КАК Ссылка,
						  |	Ключ.СтавкаНДС 				КАК СтавкаНДС
						  |ИЗ
	                      |	Справочник.КлючиАналитикиУчетаПартий 			КАК Ключ
	                      |ГДЕ
	                      |	Ключ.НалогообложениеНДС 	  	= &НалогообложениеНДС
	                      |	И Ключ.Поставщик 			  	= &Поставщик
						  |	И Ключ.Поставщик 			  	= &Поставщик
						  |	И Ключ.Контрагент 			  	= &Контрагент
						  |	И Ключ.СтавкаНДС 			  	= &СтавкаНДС
	                      |	И Ключ.ГруппаФинансовогоУчета 	= &ГруппаФинансовогоУчета
						  |	И НЕ Ключ.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("НалогообложениеНДС"		, СтруктураАналитикУчетаПартий.НалогообложениеНДС);
	Запрос.УстановитьПараметр("Поставщик"				, СтруктураАналитикУчетаПартий.Поставщик);
	Запрос.УстановитьПараметр("Контрагент"				, СтруктураАналитикУчетаПартий.Контрагент);
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета"	, СтруктураАналитикУчетаПартий.ГруппаФинансовогоУчета);
	Запрос.УстановитьПараметр("СтавкаНДС"				, СтруктураАналитикУчетаПартий.СтавкаНДС);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	Иначе
		Результат = Справочники.ВидыЗапасов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Функция СоздатьКлючАналитики(ПараметрыАналитики)

	МенеджерЗаписи = РегистрыСведений.АналитикаУчетаПартий.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыАналитики);
		
	Результат = НайтиАналитикуУчетаПартий(ПараметрыАналитики);
	
	// Создание нового ключа аналитики.
	Если Не ЗначениеЗаполнено(Результат) Тогда
		СправочникОбъект = Справочники.КлючиАналитикиУчетаПартий.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(СправочникОбъект, ПараметрыАналитики);
		СправочникОбъект.Наименование = ПолучитьНаименованиеКлючаАналитикиУчетаПартий(СправочникОбъект);
		СправочникОбъект.Записать();

		Результат = СправочникОбъект.Ссылка;
	КонецЕсли;

	МенеджерЗаписи.КлючАналитики = Результат;
	МенеджерЗаписи.Записать(Ложь);

	Возврат Результат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Замена дублей ключей аналитики

Процедура ЗаменитьАналитикуВНабореЗаписей(РезультатЗапроса, СоответствиеАналитик, НаборЗаписей)
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		ЗаписыватьНабор = Ложь;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			АналитикаУчетаПартий = СоответствиеАналитик[Запись.АналитикаУчетаПартий];
			Если ЗначениеЗаполнено(АналитикаУчетаПартий) Тогда
				Запись.АналитикаУчетаПартий = АналитикаУчетаПартий;
				ЗаписыватьНабор = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗаписыватьНабор Тогда
			НаборЗаписей.Записать(Истина);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаменитьКлючАналитикиУчетаПартийВДокументе(СоответствиеАналитик, ДокументСсылка, МетаданныеДокумента, МассивОбработанныхОбъектов)
	
	ДокументПолучен = Ложь;
	
	Для Каждого ТабличнаяЧасть ИЗ МетаданныеДокумента.ТабличныеЧасти Цикл

		Если ТабличнаяЧасть.Реквизиты.Найти("АналитикаУчетаПартий") <> Неопределено Тогда
	
			Если НЕ ДокументПолучен Тогда
				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ЗаписыватьДокумент = Ложь;
				ДокументПолучен = Истина;
			КонецЕсли;
						
			Для Каждого СтрокаТаблицы Из ДокументОбъект[ТабличнаяЧасть.Имя] Цикл
				
				АналитикаУчетаПартий = СоответствиеАналитик[СтрокаТаблицы.АналитикаУчетаПартий];
				Если ЗначениеЗаполнено(АналитикаУчетаПартий) Тогда
					СтрокаТаблицы.АналитикаУчетаПартий = АналитикаУчетаПартий;
					ЗаписыватьДокумент = Истина;
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Если МетаданныеДокумента.Реквизиты.Найти("АналитикаУчетаПартий") <> Неопределено Тогда
		
		Если Не ДокументПолучен Тогда
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ЗаписыватьДокумент = Ложь;
		КонецЕсли;
		
		АналитикаУчетаПартий = СоответствиеАналитик[ДокументОбъект.АналитикаУчетаПартий];
		Если ЗначениеЗаполнено(АналитикаУчетаПартий) Тогда
			ДокументОбъект.АналитикаУчетаПартий = АналитикаУчетаПартий;
			ЗаписыватьДокумент = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаписыватьДокумент И ДокументПолучен Тогда
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		МассивОбработанныхОбъектов.Добавить(ДокументСсылка);

	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаменитьДублиКлючейАналитики() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеСправочника.Ссылка 			КАК Ссылка,
	|	ДанныеСправочника.ПометкаУдаления 	КАК ПометкаУдаления,
	|	Аналитика.КлючАналитики 			КАК КлючАналитики
	|ИЗ
	|	Справочник.КлючиАналитикиУчетаПартий КАК ДанныеСправочника
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПартий КАК ДанныеРегистра
	|	ПО
	|		ДанныеСправочника.Ссылка = ДанныеРегистра.КлючАналитики
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПартий КАК Аналитика
	|	ПО
	|		ДанныеСправочника.ГруппаФинансовогоУчета = Аналитика.ГруппаФинансовогоУчета
	|		И ДанныеСправочника.Поставщик 			 = Аналитика.Поставщик
	|		И ДанныеСправочника.Контрагент			 = Аналитика.Контрагент
	|		И ДанныеСправочника.НалогообложениеНДС 	 = Аналитика.НалогообложениеНДС
	|		И ДанныеСправочника.СтавкаНДС 			 = Аналитика.СтавкаНДС
	|ГДЕ
	|	ДанныеРегистра.КлючАналитики ЕСТЬ NULL
	|");
	
	// Сформируем соответствие ключей аналитики.
	СоответствиеАналитик = Новый Соответствие;
	МассивАналитик = Новый Массив;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
	
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СоответствиеАналитик.Вставить(Выборка.Ссылка, Выборка.КлючАналитики);
			МассивАналитик.Добавить(Выборка.Ссылка);
			
			Если Не Выборка.ПометкаУдаления Тогда
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Попытка
					СправочникОбъект.УстановитьПометкуУдаления(Истина, Ложь);
				Исключение
				КонецПопытки;
			КонецЕсли;

		КонецЦикла;

		МассивОбработанныхОбъектов = Новый Массив;
		ТаблицаНайденныхОбъектов = НайтиПоСсылкам(МассивАналитик);
		
		Для Каждого СтрокаТаблицы Из ТаблицаНайденныхОбъектов Цикл
			
			Если МассивОбработанныхОбъектов.Найти(СтрокаТаблицы[1]) = Неопределено Тогда
			
				Если Метаданные.Документы.Найти(СтрокаТаблицы[2].Имя) <> Неопределено Тогда
					ЗаменитьКлючАналитикиУчетаПартийВДокументе(
						СоответствиеАналитик,
						СтрокаТаблицы[1], // ДокументСсылка
						СтрокаТаблицы[2], // МетаданныеДокумента
						МассивОбработанныхОбъектов
					);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ПартииЗатратНаВыпуск КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.АналитикаУчетаПартий В (&МассивАналитик)
		|;
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ПартииПрочихРасходов КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.АналитикаУчетаПартий В (&МассивАналитик)
		|;
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ПартииРасходовНаСебестоимостьТоваров КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.АналитикаУчетаПартий В (&МассивАналитик)
		|;
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ПартииТоваровОрганизаций КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.АналитикаУчетаПартий В (&МассивАналитик)
		|;
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ПартииТоваровПереданныеНаКомиссию КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.АналитикаУчетаПартий В (&МассивАналитик)
		|");
		Запрос.УстановитьПараметр("МассивАналитик", МассивАналитик);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		РезультатПартииЗатратНаВыпуск 					= МассивРезультатов[0];
		РезультатПартииПрочихРасходов 					= МассивРезультатов[1];
		РезультатПартииРасходовНаСебестоимостьТоваров 	= МассивРезультатов[2];
		РезультатПартииТоваровОрганизаций 				= МассивРезультатов[3];
		РезультатПартииТоваровПереданныеНаКомиссию 		= МассивРезультатов[4];
		
		// Заменим дубли аналитики в регистре "Партии затрат на выпуск".
		Если Не РезультатПартииЗатратНаВыпуск.Пустой() Тогда
			НаборЗаписей = РегистрыНакопления.ПартииЗатратНаВыпуск.СоздатьНаборЗаписей();
			ЗаменитьАналитикуВНабореЗаписей(РезультатПартииЗатратНаВыпуск, СоответствиеАналитик, НаборЗаписей);
		КонецЕсли;
		
		// Заменим дубли аналитики в регистре "Партии прочих расходов".
		Если Не РезультатПартииПрочихРасходов.Пустой() Тогда
			НаборЗаписей = РегистрыНакопления.ПартииПрочихРасходов.СоздатьНаборЗаписей();
			ЗаменитьАналитикуВНабореЗаписей(РезультатПартииПрочихРасходов, СоответствиеАналитик, НаборЗаписей);
		КонецЕсли;
		
		// Заменим дубли аналитики в регистре "Партии расходов на себестоимость товаров".
		Если Не РезультатПартииРасходовНаСебестоимостьТоваров.Пустой() Тогда
			НаборЗаписей = РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров.СоздатьНаборЗаписей();
			ЗаменитьАналитикуВНабореЗаписей(РезультатПартииРасходовНаСебестоимостьТоваров, СоответствиеАналитик, НаборЗаписей);
		КонецЕсли;
		
		// Заменим дубли аналитики в регистре "Партии товаров организаций".
		Если Не РезультатПартииТоваровОрганизаций.Пустой() Тогда
			НаборЗаписей = РегистрыНакопления.ПартииТоваровОрганизаций.СоздатьНаборЗаписей();
			ЗаменитьАналитикуВНабореЗаписей(РезультатПартииТоваровОрганизаций, СоответствиеАналитик, НаборЗаписей);
		КонецЕсли;
		
		// Заменим дубли аналитики в регистре "Партии товаров переданные на комиссию".
		Если Не РезультатПартииТоваровПереданныеНаКомиссию.Пустой() Тогда
			НаборЗаписей = РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию.СоздатьНаборЗаписей();
			ЗаменитьАналитикуВНабореЗаписей(РезультатПартииТоваровПереданныеНаКомиссию, СоответствиеАналитик, НаборЗаписей);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры


