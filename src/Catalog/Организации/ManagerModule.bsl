#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с обособленными подразделениями

// Проверяет взаимосвязанность организации по организационной структуре.
// Если первая и вторая организации одинаковы, то считается, что они относятся к одной головной.
//
// Параметры:
//	ПерваяОрганизация - СправочникСсылка.Организации - проверяемая организация.
//	ВтораяОрганизация - СправочникСсылка.Организации - организация, с которой выполняется сравнение.
//
// Возвращаемое значение:
//	Булево - признак взаимосвязанности. Если первая организация является обособленным подразделением,
//		либо если вторая организация является обособленным подразделением первой,
//		либо если обе организации являются обособленными подразделениями одной и той же головной организации.
//		В противном случае возвращается Ложь.
//
Функция ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ПерваяОрганизация, ВтораяОрганизация) Экспорт
	
	Если НЕ (ЗначениеЗаполнено(ПерваяОрганизация) И ЗначениеЗаполнено(ВтораяОрганизация))
		ИЛИ ПерваяОрганизация = ВтораяОрганизация Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивВзаимосвязанныхОрганизаций = МассивВзаимосвязанныхОрганизаций(ПерваяОрганизация);
	ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре = (МассивВзаимосвязанныхОрганизаций.Найти(ВтораяОрганизация) <> Неопределено);
	
	Возврат ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре;
	
КонецФункции

// Проверяет, связана ли организация с другими организациями по организационной структуре.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - проверяемая организация.
//
// Возвращаемое значение:
//	Булево - признак взаимосвязанности. Если организация взаимосвязана с другими,
//		возвращается Истина, в противном случае Ложь.
//
Функция ОрганизацияВзаимосвязанаСДругимиОрганизациями(Организация) Экспорт
	
	МассивВзаимосвязанныхОрганизаций = МассивВзаимосвязанныхОрганизаций(Организация);
	ОрганизацияВзаимосвязанаСДругимиОрганизациями = (МассивВзаимосвязанныхОрганизаций.Количество() <> 0);
	
	Возврат ОрганизацияВзаимосвязанаСДругимиОрганизациями;
	
КонецФункции

// Возвращает массив организаций, взаимосвязанных по организационной структуре.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация, для которой нужно искать связи,
//		если не указана, то возвращаются все взаимосвязанные организации.
//
// Возвращаемое значение:
//	Массив - массив взаимосвязанных организаций.
//
Функция МассивВзаимосвязанныхОрганизаций(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"
	|ВЫБРАТЬ  РАЗРЕШЕННЫЕ
	|	Организации.ГоловнаяОрганизация КАК Ссылка,
	|	NULL КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВзаимосвязанныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.ГоловнаяОрганизация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Организации.ГоловнаяОрганизация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаимосвязанныеОрганизации.Ссылка
	|ИЗ
	|	ВзаимосвязанныеОрганизации КАК ВзаимосвязанныеОрганизации
	|ГДЕ
	|	ВзаимосвязанныеОрганизации.Ссылка <> &Организация
	|	И (&Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ ВзаимосвязанныеОрганизации.Ссылка = &ГоловнаяОрганизация
	|			ИЛИ ВзаимосвязанныеОрганизации.ГоловнаяОрганизация = &ГоловнаяОрганизация
	|				И &ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ ВзаимосвязанныеОрганизации.ГоловнаяОрганизация = &Организация)");
	
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Справочники.Организации.ПустаяСсылка()));
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ?(ЗначениеЗаполнено(Организация),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация"), Справочники.Организации.ПустаяСсылка()));
		
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивОрганизаций;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

//Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//	Возвращаемое значание:
//		Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		Результат.Добавить("ОбособленноеПодразделение");
		Результат.Добавить("ГоловнаяОрганизация");
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция определяет значения реквизитов выбранной организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - Ссылка на организацию
//
// Возвращаемое значение:
//	Структура - реквизиты выбранной организации
//
Функция ПолучитьРеквизитыОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Организации.Наименование КАК Наименование,
	|	Организации.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	Организации.НаименованиеПолное КАК НаименованиеПолное,
	|	Организации.ИНН КАК ИНН,
	|	Организации.КПП КАК КПП,
	|	Организации.КодПоОКПО КАК КодПоОКПО,
	|	Организации.КодПоОКАТО КАК КодПоОКАТО,
	|	Организации.ЮрФизЛицо КАК ЮрФизЛицо,
	|	Организации.СвидетельствоДатаВыдачи КАК СвидетельствоДатаВыдачи,
	|	Организации.СвидетельствоСерияНомер КАК СвидетельствоСерияНомер
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|");
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Представление = ?(Не ПустаяСтрока(Выборка.НаименованиеСокращенное), Выборка.НаименованиеСокращенное, Выборка.Наименование);
		Наименование = ?(Не ПустаяСтрока(Выборка.НаименованиеСокращенное), Выборка.НаименованиеСокращенное, Выборка.Наименование);
		НаименованиеПолное = Выборка.НаименованиеПолное;
		ИНН = Выборка.ИНН;
		КПП = Выборка.КПП;
		КодПоОКПО = Выборка.КодПоОКПО;
		КодПоОКАТО = Выборка.КодПоОКАТО;
		ЮрФизЛицо = Выборка.ЮрФизЛицо;
		Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
			Свидетельство = "Свидетельство " + Выборка.СвидетельствоСерияНомер + " от " + Формат(Выборка.СвидетельствоДатаВыдачи, "ДФ=dd.MM.yyyy");
		Иначе
			Свидетельство = "";
		КонецЕсли;
	Иначе
		Представление = "";
		Наименование = "";
		НаименованиеПолное = "";
		ИНН = "";
		КПП = "";
		КодПоОКПО = "";
		КодПоОКАТО = "";
		ЮрФизЛицо = Перечисления.ЮрФизЛицо.ПустаяСсылка();
		Свидетельство = "";
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("Представление, Наименование, НаименованиеПолное, ИНН, КПП, КодПоОКПО, КодПоОКАТО, ЮрФизЛицо, Свидетельство",
		Представление,
		Наименование,
		НаименованиеПолное,
		ИНН,
		КПП,
		КодПоОКПО,
		КодПоОКАТО,
		ЮрФизЛицо,
		Свидетельство
	);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Функция определяет тип налогообложения продажи товара налогом на добавленную стоимость.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой определяется система налогообложения
//	Склад - СправочникСсылка.Склады - Розничный склад, для которого определяется система налогообложения
//	Дата - Дата определения системы налогообложения
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ТипыНалогообложенияНДС - тип налогообложения
//
Функция НалогообложениеНДС(Организация, Склад = Неопределено, Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД) КАК НалогообложениеНДС
	|ИЗ
	|	РегистрСведений.ПримененияЕНВД.СрезПоследних(&Дата,
	|		Организация = &Организация
	|		И Склад = &Склад
	|	) КАК ПримененияЕНВД
	|ГДЕ
	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС) КАК НалогообложениеНДС
	|ИЗ
	|	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних(&Дата,
	|		Организация = &Организация
	|	) КАК Налогообложение
	|ГДЕ
	|	Налогообложение.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)
	|");
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	
	Выборка = запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НалогообложениеНДС = Выборка.НалогообложениеНДС;
	КонецЕсли;
	
	Возврат НалогообложениеНДС;
	
КонецФункции

// Функция определяет применение ЕНВД для розничной торговли.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для которой определяется применение ЕНВД
//	Склад - СправочникСсылка.Склады - Розничный склад, для которого определяется применение ЕНВД
//	Дата - Дата определения применения ЕНВД
//
// Возвращаемое значение:
//	Булево - признак применения ЕНВД в розничной торговле
//
Функция РозничнаяТорговляОблагаетсяЕНВД(Организация, Склад, Дата) Экспорт
	
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Истина КАК РозничнаяТорговляОблагаетсяЕНВД
	|ИЗ
	|	РегистрСведений.ПримененияЕНВД.СрезПоследних(&Дата,
	|		Организация = &Организация
	|		И Склад = &Склад
	|	) КАК ПримененияЕНВД
	|ГДЕ
	|	ПримененияЕНВД.РозничнаяТорговляОблагаетсяЕНВД
	|");
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Выборка = запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РозничнаяТорговляОблагаетсяЕНВД = Выборка.РозничнаяТорговляОблагаетсяЕНВД;
	Иначе
		РозничнаяТорговляОблагаетсяЕНВД = Ложь;
	КонецЕсли;
	
	Возврат РозничнаяТорговляОблагаетсяЕНВД;
	
КонецФункции

// Получает организацию, если организация одна в справочнике.
//
// Возвращаемое значение:
//	СправочникСсылка.Организации - Найденная организация
// 	Неопределено - если организаций нет или организаций больше одной
//
Функция ПолучитьОрганизациюПоУмолчанию() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Не Организации.Предопределенный
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		Организация = Выборка.Организация;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Организация;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ИспользоватьУправленческуюОрганизацию = ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию");
	
	Если НЕ ИспользоватьУправленческуюОрганизацию
		ИЛИ Параметры.Свойство("ВыборУправленческойОрганизации")
		ИЛИ Параметры.Свойство("ХозяйственнаяОперация")
		ИЛИ Параметры.Свойство("РежимВыбораВзаимосвязанныхОрганизаций") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Запрос 		= Новый Запрос;
		ТекстОтбора = "";
		НомерОтбора = 0;
		
		Если Параметры.Свойство("Отбор") Тогда
			
			Реквизиты 			 = Метаданные.Справочники.Организации.Реквизиты;
			СтандартныеРеквизиты = Новый Массив;
			Для Каждого Элемент Из Метаданные.Справочники.Организации.СтандартныеРеквизиты Цикл
				СтандартныеРеквизиты.Добавить(Элемент.Имя);
			КонецЦикла;
			
			Для Каждого ТекущийОтбор Из Параметры.Отбор Цикл
				
				Если Реквизиты.Найти(ТекущийОтбор.Ключ) = Неопределено
				 И СтандартныеРеквизиты.Найти(ТекущийОтбор.Ключ) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НомерОтбора = НомерОтбора + 1;
				
				ТекстОтбора =
					ТекстОтбора
					+ "	И ДанныеДляОбщейФильтрации.Организация." + ТекущийОтбор.Ключ + " = &ЗначениеОтбора" + СокрЛП(НомерОтбора) + "
					|";
				Запрос.УстановитьПараметр("ЗначениеОтбора" + СокрЛП(НомерОтбора), ТекущийОтбор.Значение);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ОбособленныеПодразделения.ГоловнаяОрганизация КАК Ссылка
		|ПОМЕСТИТЬ ГоловныеОрганизации
		|ИЗ
		|	Справочник.Организации КАК ОбособленныеПодразделения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ  РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.Представление,
		|	Организации.Предопределенный,
		|	Организации.Наименование,
		|	ВЫБОР
		|		КОГДА Организации.ОбособленноеПодразделение
		|				ИЛИ ГоловныеОрганизации.Ссылка ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоГоловнаяОрганизация,
		|	Организации.ОбособленноеПодразделение КАК ЭтоОбособленноеПодразделение,
		|	Организации.ГоловнаяОрганизация
		|ПОМЕСТИТЬ ДанныеОрганизаций
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ГоловныеОрганизации КАК ГоловныеОрганизации
		|		ПО Организации.Ссылка = ГоловныеОрганизации.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляФильтрации.Ссылка,
		|	ДанныеДляФильтрации.Представление,
		|	ДанныеДляФильтрации.Предопределенный,
		|	ДанныеДляФильтрации.Наименование,
		|	ДанныеДляФильтрации.ЭтоГоловнаяОрганизация,
		|	ДанныеДляФильтрации.ЭтоОбособленноеПодразделение,
		|	ДанныеДляФильтрации.ГоловнаяОрганизация,
		|	ВЫБОР
		|		КОГДА ДанныеДляФильтрации.Ссылка <> &Организация
		|				И (ДанныеДляФильтрации.ЭтоГоловнаяОрганизация
		|					ИЛИ ДанныеДляФильтрации.ЭтоОбособленноеПодразделение)
		|				И (&Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ИЛИ (ДанныеДляФильтрации.Ссылка = &ГоловнаяОрганизация
		|						ИЛИ ДанныеДляФильтрации.ГоловнаяОрганизация = &Организация
		|						ИЛИ &ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|							И ДанныеДляФильтрации.ГоловнаяОрганизация = &ГоловнаяОрганизация))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Взаимосвязана
		|ПОМЕСТИТЬ ДанныеДляАльтернативнойФильтрации
		|ИЗ
		|	ДанныеОрганизаций КАК ДанныеДляФильтрации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляФильтрации.Ссылка КАК Организация,
		|	ДанныеДляФильтрации.Предопределенный,
		|	ДанныеДляФильтрации.Наименование,
		|	ДанныеДляФильтрации.Представление
		|ПОМЕСТИТЬ ДанныеДляОбщейФильтрации
		|ИЗ
		|	ДанныеДляАльтернативнойФильтрации КАК ДанныеДляФильтрации
		|ГДЕ
		|	&РежимВыбораВзаимосвязанныхОрганизаций = ""БезОбособленныхПодразделений""
		|	И ДанныеДляФильтрации.Ссылка <> &Организация
		|	И НЕ ДанныеДляФильтрации.ЭтоОбособленноеПодразделение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДляФильтрации.Ссылка,
		|	ДанныеДляФильтрации.Предопределенный,
		|	ДанныеДляФильтрации.Наименование,
		|	ДанныеДляФильтрации.Представление
		|ИЗ
		|	ДанныеДляАльтернативнойФильтрации КАК ДанныеДляФильтрации
		|ГДЕ
		|	(&РежимВыбораВзаимосвязанныхОрганизаций = ""ТолькоВзаимосвязанные""
		|				И ДанныеДляФильтрации.Взаимосвязана
		|			ИЛИ &РежимВыбораВзаимосвязанныхОрганизаций = ""ТолькоНеВзаимосвязанные""
		|				И НЕ ДанныеДляФильтрации.Взаимосвязана
		|				И ДанныеДляФильтрации.Ссылка <> &Организация)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДляАльтернативнойФильтрации.Ссылка,
		|	ДанныеДляАльтернативнойФильтрации.Предопределенный,
		|	ДанныеДляАльтернативнойФильтрации.Наименование,
		|	ДанныеДляАльтернативнойФильтрации.Представление
		|ИЗ
		|	ДанныеДляАльтернативнойФильтрации КАК ДанныеДляАльтернативнойФильтрации
		|ГДЕ
		|	&РежимВыбораВзаимосвязанныхОрганизаций = """"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ДанныеДляОбщейФильтрации.Организация
		|ИЗ
		|	ДанныеДляОбщейФильтрации КАК ДанныеДляОбщейФильтрации
		|ГДЕ
		|	НЕ((НЕ &ИспользоватьУправленческуюОрганизацию
		|				ИЛИ &ЗапрещенВыборУправленческойОрганизации)
		|				И ДанныеДляОбщейФильтрации.Предопределенный)
		|	И ДанныеДляОбщейФильтрации.Наименование ПОДОБНО &СтрокаПоиска
		|
		|//ТекстОтбора
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеДляОбщейФильтрации.Наименование";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстОтбора", ТекстОтбора);
		Запрос.Текст = ТекстЗапроса;
		
		// В параметрах выбора запрещен выбор управленческой организации
		ЗапрещенВыборУправленческойОрганизации = (Параметры.Свойство("ВыборУправленческойОрганизации") И НЕ Параметры.ВыборУправленческойОрганизации);
		СтрокаПоиска = ?(Параметры.СтрокаПоиска = Неопределено, "", Параметры.СтрокаПоиска);
		
		РежимВыбораВзаимосвязанныхОрганизаций = "";
		Если Параметры.Свойство("РежимВыбораВзаимосвязанныхОрганизаций") Тогда
			Если Параметры.РежимВыбораВзаимосвязанныхОрганизаций = "ДляРегистрацииВНалоговомОргане" Тогда
				Если Справочники.РегистрацииВНалоговомОргане.ВозможнаРегистрацияДляОбособленныхПодразделений() Тогда
					РежимВыбораВзаимосвязанныхОрганизаций = "";
				Иначе
					РежимВыбораВзаимосвязанныхОрганизаций = "БезОбособленныхПодразделений";
				КонецЕсли;
			Иначе
				РежимВыбораВзаимосвязанныхОрганизаций = Параметры.РежимВыбораВзаимосвязанныхОрганизаций;
			КонецЕсли;
		ИначеЕсли Параметры.Свойство("ХозяйственнаяОперация")
		 И Параметры.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаТоваров Тогда
			РежимВыбораВзаимосвязанныхОрганизаций = "ТолькоВзаимосвязанные";
		КонецЕсли;
		
		Организация			= ?(Параметры.Свойство("Организация"), Параметры.Организация, Справочники.Организации.ПустаяСсылка());
		ГоловнаяОрганизация	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ГоловнаяОрганизация");
		
		Запрос.УстановитьПараметр("ИспользоватьУправленческуюОрганизацию", 	ИспользоватьУправленческуюОрганизацию);
		Запрос.УстановитьПараметр("ЗапрещенВыборУправленческойОрганизации", ЗапрещенВыборУправленческойОрганизации);
		Запрос.УстановитьПараметр("СтрокаПоиска", 							СтрокаПоиска + "%");
		Запрос.УстановитьПараметр("РежимВыбораВзаимосвязанныхОрганизаций", 	РежимВыбораВзаимосвязанныхОрганизаций);
		Запрос.УстановитьПараметр("Организация", 							Организация);
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", 					ГоловнаяОрганизация);
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		
		Параметры.Вставить("Ключ", ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию());
		ВыбраннаяФорма = "ФормаЭлемента";
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

Процедура ЗаполнитьПредопределеннуюОрганизацию() Экспорт
	
	ЗаписыватьОбъект = Ложь;
	
	СправочникОбъект = Справочники.Организации.УправленческаяОрганизация.ПолучитьОбъект();
	Если Не ЗначениеЗаполнено(СправочникОбъект.ЮрФизЛицо) Тогда
		СправочникОбъект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		ЗаписыватьОбъект = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(СправочникОбъект.Префикс) Тогда
		СправочникОбъект.Префикс = "УУ";
		ЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если ЗаписыватьОбъект Тогда
		Попытка
			СправочникОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет значение реквизита ЮридическоеФизическоеЛицо в справочнике Организации
//
Процедура ЗаполнитьРеквизитЮридическоеФизическоеЛицо() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организации.ОбособленноеПодразделение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Ссылка.ЮридическоеФизическоеЛицо) Тогда
			// Для обособленного подразделения реквизит может быть уже заполнен ранее,
			// при записи элемента головной организации
			Продолжить;
		КонецЕсли;
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			// Реквизит будет заполнен в обработчике ПередЗаписью
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли