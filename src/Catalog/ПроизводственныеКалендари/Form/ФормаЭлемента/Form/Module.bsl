////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнитьФормуПоОбъекту(Параметры.ЗначениеКопирования);
	КонецЕсли;
	
	ЦветаВидовДней = Новый ФиксированноеСоответствие(Справочники.ПроизводственныеКалендари.ЦветаОформленияВидовДнейПроизводственногоКалендаря());
	
	СписокВидовДня = Справочники.ПроизводственныеКалендари.СписокВидовДня();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ЗаполнитьФормуПоОбъекту();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Перем НомерГода;
	
	Если Не ПараметрыЗаписи.Свойство("НомерГода", НомерГода) Тогда
		НомерГода = НомерТекущегоГода;
	КонецЕсли;
	
	ЗаписатьДанныеПроизводственногоКалендаря(НомерГода, ТекущийОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура НомерТекущегоГодаПриИзменении(Элемент)
	
	Если Модифицированность Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Записать измененные данные за %1 год?'"), 
							Формат(НомерПредыдущегоГода, "ЧГ=0"));
		
		Если Вопрос(ТекстСообщения, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Если Объект.Ссылка.Пустая() Тогда
				Записать(Новый Структура("НомерГода", НомерПредыдущегоГода));
			Иначе
				ЗаписатьДанныеПроизводственногоКалендаря(НомерПредыдущегоГода);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьФормуПоОбъекту();	
	
	Модифицированность = Ложь;
	
	Элементы.Календарь.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриВыводеПериода(Элемент, ОформлениеПериода)
	
	Для Каждого СтрокаОформленияПериода Из ОформлениеПериода.Даты Цикл
		ЦветОформленияДня = ЦветаВидовДней.Получить(ВидыДней.Получить(СтрокаОформленияПериода.Дата));
		Если ЦветОформленияДня = Неопределено Тогда
			ЦветОформленияДня = ОбщегоНазначенияКлиент.ЦветСтиля("ВидДняНеУказанЦвет");
		КонецЕсли;
		СтрокаОформленияПериода.ЦветТекста = ЦветОформленияДня;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ИзменитьДень(Команда)
	
	ВыделенныеДаты = Элементы.Календарь.ВыделенныеДаты;
	
	Если ВыделенныеДаты.Количество() > 0 И Год(ВыделенныеДаты[0]) = НомерТекущегоГода Тогда
		ВыбранныйЭлемент = ВыбратьИзСписка(СписокВидовДня, , СписокВидовДня.НайтиПоЗначению(ВидыДней.Получить(ВыделенныеДаты[0])));
		Если ВыбранныйЭлемент <> Неопределено Тогда
			ИзменитьВидыДней(ВыделенныеДаты, ВыбранныйЭлемент.Значение);
			Элементы.Календарь.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДень(Команда)
	
	ВыделенныеДаты = Элементы.Календарь.ВыделенныеДаты;
	
	Если ВыделенныеДаты.Количество() = 0 Или Год(ВыделенныеДаты[0]) <> НомерТекущегоГода Тогда
		Возврат;
	КонецЕсли;
		
	ПереносимыйДень = ВыделенныеДаты[0];
	ВидДня = ВидыДней.Получить(ПереносимыйДень);
	
	ПараметрыВыбораДаты = Новый Структура;
	ПараметрыВыбораДаты.Вставить("НачальноеЗначение",			ПереносимыйДень);
	ПараметрыВыбораДаты.Вставить("НачалоПериодаОтображения",	НачалоГода(Календарь));
	ПараметрыВыбораДаты.Вставить("КонецПериодаОтображения",		КонецГода(Календарь));
	ПараметрыВыбораДаты.Вставить("Заголовок",					НСтр("ru = 'Выбор даты переноса'"));
	ПараметрыВыбораДаты.Вставить("ПоясняющийТекст",				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																НСтр("ru = 'Выберите дату, на которую будет осуществлен перенос дня %1 (%2)'"), 
																Формат(ПереносимыйДень, "ДФ='д ММММ'"), 
																ВидДня));
	
	ВыбраннаяДата = ОткрытьФормуМодально("ОбщаяФорма.ВыборДаты", ПараметрыВыбораДаты);
	
	Если ВыбраннаяДата <> Неопределено Тогда
		ПеренестиВидДня(ПереносимыйДень, ВыбраннаяДата, ВидДня);
		Элементы.Календарь.Обновить();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ВидыДнейПроизводственногоКалендаря()
	
	ВидыДнейПроизводственногоКалендаря = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ДанныеПроизводственногоКалендаря Цикл
		ВидыДнейПроизводственногоКалендаря.Вставить(СтрокаТаблицы.Дата, СтрокаТаблицы.ВидДня);
	КонецЦикла;
	
	Возврат ВидыДнейПроизводственногоКалендаря;
	
КонецФункции

&НаСервере
Процедура ПрочитатьДанныеПроизводственногоКалендаря(ПроизводственныйКалендарь, НомерГода)
	
	// Загрузка данных производственного календаря за указанный год
	
	ДанныеПроизводственногоКалендаря.Загрузить(Справочники.ПроизводственныеКалендари.ДанныеПроизводственногоКалендаря(ПроизводственныйКалендарь, НомерГода));
	
	ВидыДней = Новый ФиксированноеСоответствие(ВидыДнейПроизводственногоКалендаря());
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеПроизводственногоКалендаря(Знач НомерГода, Знач ТекущийОбъект = Неопределено)
	
	// Запись данных производственного календаря за указанный год
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	ДанныеВТаблице = ДанныеПроизводственногоКалендаря.Выгрузить();
	ДанныеВТаблице.Колонки.Добавить("КодПроизводственногоКалендаря", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(3)));
	ДанныеВТаблице.ЗаполнитьЗначения(ТекущийОбъект.Код, "КодПроизводственногоКалендаря");
	ДанныеВТаблице.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"));
	ДанныеВТаблице.ЗаполнитьЗначения(НомерГода, "Год");
	
	Изменения = Справочники.ПроизводственныеКалендари.ИзмененияДанных(ДанныеВТаблице);
	
	НачатьТранзакцию();
	Попытка
		// Обновляем данные производственных календарей
		Справочники.ПроизводственныеКалендари.ОбновитьДанныеПроизводственныхКалендарей(Изменения);
		
		// Обновляем данные графиков работы, заполняемых автоматически на основании производственных календарей
		СтандартныеПодсистемыПереопределяемый.ЗапланироватьОбновлениеКалендарейПоДаннымПроизводственныхКалендарей(Изменения);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

//	Справочники.ПроизводственныеКалендари.ЗаписатьДанныеПроизводственногоКалендаря(ТекущийОбъект.Ссылка, НомерГода, ДанныеПроизводственногоКалендаря);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидыДней(ДатыДней, ВидДня)
	
	ВидыДнейПроизводственногоКалендаря = Новый Соответствие;
	Для Каждого КлючИЗначение Из ВидыДней Цикл
		ВидыДнейПроизводственногоКалендаря.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Для Каждого ВыбраннаяДата Из ДатыДней Цикл
		НайденныеСтроки = ДанныеПроизводственногоКалендаря.НайтиСтроки(Новый Структура("Дата", ВыбраннаяДата));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаДанных = ДанныеПроизводственногоКалендаря.Добавить();
			СтрокаДанных.Дата = ВыбраннаяДата;
		Иначе
			СтрокаДанных = НайденныеСтроки[0];
		КонецЕсли;
		СтрокаДанных.ВидДня = ВидДня;
		ВидыДнейПроизводственногоКалендаря.Вставить(ВыбраннаяДата, ВидДня);
	КонецЦикла;
	
	ВидыДней = Новый ФиксированноеСоответствие(ВидыДнейПроизводственногоКалендаря);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиВидДня(ПереносимыйДень, ДатаПереноса, ВидДня)
	
	ВидДняДатыПереноса = ВидыДней.Получить(ДатаПереноса);
	
	ИзменитьВидыДней(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДатаПереноса), ВидДня);
	ИзменитьВидыДней(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПереносимыйДень), ВидДняДатыПереноса);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуПоОбъекту(ЗначениеКопирования = Неопределено)
	
	Если НомерТекущегоГода = 0 Тогда
		НомерТекущегоГода = Год(ТекущаяДатаСеанса());
	КонецЕсли;
	НомерПредыдущегоГода	= НомерТекущегоГода;
	
	Элементы.Календарь.НачалоПериодаОтображения	= Дата(НомерТекущегоГода, 1, 1);
	Элементы.Календарь.КонецПериодаОтображения	= Дата(НомерТекущегоГода, 12, 31);
	
	Если ЗначениеЗаполнено(ЗначениеКопирования) Тогда
		СсылкаНаКалендарь = ЗначениеКопирования;
	Иначе
		СсылкаНаКалендарь = Объект.Ссылка;
	КонецЕсли;
	
	ПрочитатьДанныеПроизводственногоКалендаря(СсылкаНаКалендарь, НомерТекущегоГода);
	
КонецПроцедуры
