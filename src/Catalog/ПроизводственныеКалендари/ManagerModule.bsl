#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция читает данные производственного календаря из регистра
//
// Параметры
//	ПроизводственныйКалендарь			- Ссылка на текущий элемент справочника
//	НомерГода							- Номер года, за который необходимо прочитать производственный календарь
//
// Возвращаемое значение
//	ДанныеПроизводственногоКалендаря	- таблица значений, в которой хранятся сведения о виде дня на каждую дату календаря
//
Функция ДанныеПроизводственногоКалендаря(ПроизводственныйКалендарь, НомерГода) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь",	ПроизводственныйКалендарь);
	Запрос.УстановитьПараметр("ТекущийГод",	НомерГода);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата,
	|	ДанныеПроизводственногоКалендаря.ВидДня
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Год = &ТекущийГод
	|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура записывает данные производственного календаря в регистр
//
// Параметры
//	ПроизводственныйКалендарь			- Ссылка на текущий элемент справочника
//	НомерГода							- Номер года, за который необходимо записать производственный календарь
//	ДанныеПроизводственногоКалендаря	- таблица значений, в которой хранятся сведения о виде дня на каждую дату календаря
//
// Возвращаемое значение
//	Нет
//
Процедура ЗаписатьДанныеПроизводственногоКалендаря(ПроизводственныйКалендарь, НомерГода, ДанныеПроизводственногоКалендаря) Экспорт
	
	НаборЗаписей = РегистрыСведений.ДанныеПроизводственногоКалендаря.СоздатьНаборЗаписей();
	
	Для Каждого КлючИЗначение Из ДанныеПроизводственногоКалендаря Цикл
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), КлючИЗначение);
	КонецЦикла;
	
	ЗначенияОтбора = Новый Структура("ПроизводственныйКалендарь, Год", ПроизводственныйКалендарь, НомерГода);
	
	Для Каждого КлючИЗначение Из ЗначенияОтбора Цикл
		НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла;
	
	Для Каждого СтрокаНабора Из НаборЗаписей Цикл
		ЗаполнитьЗначенияСвойств(СтрокаНабора, ЗначенияОтбора);
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Функция определяет соответствие видов дня производственного календаря и цвета оформления
// этого дня в поле календаря
//
// Возвращаемое значение
//	ЦветаОформления - соответствие видов дня и цветов оформления
//
Функция ЦветаОформленияВидовДнейПроизводственногоКалендаря() Экспорт
	
	ЦветаОформления = Новый Соответствие;
	
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий,			ЦветаСтиля.ВидДняРабочийЦвет);
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота,			ЦветаСтиля.ВидДняСубботаЦвет);
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье,		ЦветаСтиля.ВидДняВоскресеньеЦвет);
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный,	ЦветаСтиля.ВидДняПредпраздничныйЦвет);
	ЦветаОформления.Вставить(Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник,			ЦветаСтиля.ВидДняПраздникЦвет);
	
	Возврат ЦветаОформления;
	
КонецФункции

// Функция составляет список всевозможных видов дней производственного календаря 
// по метаданным перечисления ВидыДнейПроизводственногоКалендаря
//
// Возвращаемое значение
//	СписокВидовДня - список значений, содержащий значение перечисления 
//  					и его синоним в качестве представления
//
Функция СписокВидовДня() Экспорт
	
	СписокВидовДня = Новый СписокЗначений;
	
	Для Каждого МетаданныеВидаДней Из Метаданные.Перечисления.ВидыДнейПроизводственногоКалендаря.ЗначенияПеречисления Цикл
		СписокВидовДня.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря[МетаданныеВидаДней.Имя], МетаданныеВидаДней.Синоним);
	КонецЦикла;
	
	Возврат СписокВидовДня;
	
КонецФункции

// Функция составляет массив доступных производственных календарей
// для использования, например, в качестве шаблона
//
Функция СписокПроизводственныхКалендарей() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПроизводственныеКалендари.Ссылка
	|ИЗ
	|	Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари
	|ГДЕ
	|	(НЕ ПроизводственныеКалендари.ПометкаУдаления)");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'Шаблоны календарей (Производственные календари) не обнаружены.'");
	КонецЕсли;
		
	СписокПроизводственныхКалендарей = Новый Массив;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокПроизводственныхКалендарей.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат СписокПроизводственныхКалендарей;
	
КонецФункции

// Функция преобразовывает данные производственных календарей, 
//  представленные в виде текстового файла
//
// Параметры:
//	- нет
//
// Возвращаемое значение - таблица значений с колонками
//	Подробнее см. комментарий к функции ДанныеПроизводственныхКалендарейИзXML
//
Функция ДанныеПроизводственныхКалендарейИзФайла(ПутьКФайлу) Экспорт
	
	Текст = Новый ЧтениеТекста(ПутьКФайлу);
	
	Возврат ДанныеПроизводственныхКалендарейИзXML(Текст.Прочитать());
	
КонецФункции

Функция СоздатьТаблицуПроизводственныхКалендарей()
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("КодПроизводственногоКалендаря", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(2)));
	ТаблицаДанных.Колонки.Добавить("ВидДня", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДнейПроизводственногоКалендаря"));
	ТаблицаДанных.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	Возврат ТаблицаДанных;
	
КонецФункции
	
// Функция преобразовывает данные производственных календарей, 
//  представленные в виде текстового документа
//
// Параметры:
//	- ТекстовыйДокумент - текстовый документ с данными
//
// Возвращаемое значение - таблица значений с колонками:
//	- КодПроизводственногоКалендаря
//	- ВидДня
//	- Год
//	- Дата
//	- ДатаПереноса
//
Функция ДанныеПроизводственныхКалендарейИзXML(Знач XML) Экспорт
	
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(XML).Данные;
	
	ТаблицаДанных = СоздатьТаблицуПроизводственныхКалендарей();
	
	Для Каждого СтрокаКлассификатора ИЗ КлассификаторТаблица Цикл
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.КодПроизводственногоКалендаря = СтрокаКлассификатора.Calendar;
		НоваяСтрока.ВидДня		= Перечисления.ВидыДнейПроизводственногоКалендаря[СтрокаКлассификатора.DayType];
		НоваяСтрока.Год			= Число(СтрокаКлассификатора.Year);
		НоваяСтрока.Дата		= Дата(СтрокаКлассификатора.Date);
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Функция возвращает разницу между текущим содержимым регистра ДанныеПроизводственногоКалендаря и переданной таблицей
//
// Возвращаемое значение
//	ТаблицаЗначений
//
Функция ИзмененияДанных(ТаблицаДанных) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлассификаторТаблица.КодПроизводственногоКалендаря КАК КалендарьКод,
	|	КлассификаторТаблица.Дата,
	|	КлассификаторТаблица.Год,
	|	КлассификаторТаблица.ВидДня
	|ПОМЕСТИТЬ КлассификаторТаблица
	|ИЗ
	|	&КлассификаторТаблица КАК КлассификаторТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроизводственныеКалендари.Ссылка КАК ПроизводственныйКалендарь,
	|	КлассификаторТаблица.Год КАК Год,
	|	КлассификаторТаблица.Дата КАК Дата,
	|	КлассификаторТаблица.ВидДня
	|ИЗ
	|	КлассификаторТаблица КАК КлассификаторТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари
	|		ПО КлассификаторТаблица.КалендарьКод = ПроизводственныеКалендари.Код
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|		ПО (ПроизводственныеКалендари.Ссылка = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь)
	|			И КлассификаторТаблица.Год = ДанныеПроизводственногоКалендаря.Год
	|			И КлассификаторТаблица.Дата = ДанныеПроизводственногоКалендаря.Дата
	|ГДЕ
	|	(ДанныеПроизводственногоКалендаря.ВидДня ЕСТЬ NULL 
	|			ИЛИ КлассификаторТаблица.ВидДня <> ДанныеПроизводственногоКалендаря.ВидДня)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроизводственныйКалендарь,
	|	Год,
	|	Дата";
	
	Запрос.УстановитьПараметр("КлассификаторТаблица", ТаблицаДанных);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Обновляет данные производственных календарей по таблице данных
//
Процедура ОбновитьДанныеПроизводственныхКалендарей(Знач Изменения) Экспорт
	
	НаборЗаписей = РегистрыСведений.ДанныеПроизводственногоКалендаря.СоздатьНаборЗаписей();
	
	КлючиРегистра = Новый Массив;
	КлючиРегистра.Добавить("ПроизводственныйКалендарь");
	КлючиРегистра.Добавить("Год");
	КлючиРегистра.Добавить("Дата");
	
	Для Каждого СтрокаИзменений из Изменения Цикл 
		НаборЗаписей.Очистить();
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), СтрокаИзменений);
		Для Каждого Ключ Из КлючиРегистра Цикл 
			НаборЗаписей.Отбор[Ключ].Установить(СтрокаИзменений[Ключ]);
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПроизводственныеКалендари(Знач КлассификаторТаблица) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(КлассификаторТаблица.Code КАК СТРОКА(2)) КАК Код,
	|	ВЫРАЗИТЬ(КлассификаторТаблица.Description КАК СТРОКА(100)) КАК Наименование
	|ПОМЕСТИТЬ КлассификаторТаблица
	|ИЗ
	|	&КлассификаторТаблица КАК КлассификаторТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлассификаторТаблица.Код,
	|	КлассификаторТаблица.Наименование,
	|	ПроизводственныеКалендари.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ПроизводственныеКалендари.Код, """") КАК ПроизводственныйКалендарьКод,
	|	ЕСТЬNULL(ПроизводственныеКалендари.Наименование, """") КАК ПроизводственныйКалендарьНаименование
	|ИЗ
	|	КлассификаторТаблица КАК КлассификаторТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПроизводственныеКалендари КАК ПроизводственныеКалендари
	|		ПО КлассификаторТаблица.Код = ПроизводственныеКалендари.Код";
	
	Запрос.УстановитьПараметр("КлассификаторТаблица", КлассификаторТаблица);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СокрЛП(Выборка.Код) = Выборка.ПроизводственныйКалендарьКод
			И СокрЛП(Выборка.Наименование) = Выборка.ПроизводственныйКалендарьНаименование Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			СправочникОбъект = Справочники.ПроизводственныеКалендари.СоздатьЭлемент();
		КонецЕсли;
		СправочникОбъект.Код = СокрЛП(Выборка.Код);
		СправочникОбъект.Наименование = СокрЛП(Выборка.Наименование);
		СправочникОбъект.Записать();
	КонецЦикла;

КонецПроцедуры

// Функция преобразовывает данные производственных календарей, 
//  поставляемые в виде макета в конфигурации
//
// Параметры:
//	- нет
//
// Возвращаемое значение - таблица значений с колонками
//	Подробнее см. комментарий к функции ДанныеПроизводственныхКалендарейИзXML
//
Функция ДанныеПроизводственныхКалендарейИзМакета() Экспорт
	
	ТекстовыйДокумент = РегистрыСведений.ДанныеПроизводственногоКалендаря.ПолучитьМакет("ДанныеПроизводственныхКалендарей");
	
	Возврат ДанныеПроизводственныхКалендарейИзXML(ТекстовыйДокумент.ПолучитьТекст());
	
КонецФункции


#КонецЕсли