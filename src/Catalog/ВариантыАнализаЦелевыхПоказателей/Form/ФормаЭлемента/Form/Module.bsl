////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Элементы.ПериодСравнения.АвтоОтметкаНезаполненного
		И НЕ ЗначениеЗаполнено(ПериодСравнения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Период сравнения"" не заполнено'"), , 
														  "ПериодСравнения", ,
														  Отказ);
		
	КонецЕсли;
	
	Если Элементы.ОбъектАнализа.АвтоОтметкаНезаполненного
		И ОбъектАнализа = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Объект анализа"" не заполнено'"), , 
														  "ОбъектАнализа", ,
														  Отказ);
		
	КонецЕсли;
	
	Если Элементы.ЗначениеАнализа.АвтоОтметкаНезаполненного
		И ЗначениеАнализа = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Значение"" не заполнено'"), , 
														  "ЗначениеАнализа", ,
														  Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьНастройкиСКДВариантаАнализа(ТекущийОбъект);
	
	ТекущийОбъект.ПериодАнализа = Новый ХранилищеЗначения(ПериодАнализа);
	
	ТекущийОбъект.ПериодСравнения = Новый ХранилищеЗначения(ПериодСравнения);
	
	ТекущийОбъект.ХранилищеНастроекОформления = ХранилищеНастроекОформления;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ГлубинаАнализаПрогнозаПриИзменении(Элемент)
	
	УстановитьНадписиКПолямПериодов(Объект, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ГоризонтПрогнозаПриИзменении(Элемент)
	
	УстановитьНадписиКПолямПериодов(Объект, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеАнализаПриИзменении(Элемент)
	
	УстановитьДоступностьЗаполненияПоШаблону();
	
КонецПроцедуры

&НаКлиенте
Процедура МетодРасчетаЗначенийПриИзменении(Элемент)
	
	УстановитьДоступностьЗаполненияПоШаблону();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектАнализаПриИзменении(Элемент)
	
	УстановитьДоступностьЗаполненияПоШаблону();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОтборПоПользователю = Новый Структура("Пользователь", Объект.Ответственный);
	
	Если Не Объект.Ответственный.Пустая() Тогда
		Если Объект.НастройкиДоступности.НайтиСтроки(ОтборПоПользователю).Количество() = 0 Тогда
			СтрокаВопроса = Формат(НСтр("ru='Сделать доступным вариант анализа для'")) + " " + Объект.Ответственный + "?"; 
			
			Ответ = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет); 
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				НоваяНастройкаДоступности = Объект.НастройкиДоступности.Добавить();
				НоваяНастройкаДоступности.Пользователь = Объект.Ответственный;
				НоваяНастройкаДоступности.ВариантОтображения = ВариантОтображенияПоУмолчанию;
				
			КонецЕсли;
			
			УстановитьНадписиНастроекДоступностиИОтчетов(Объект, Элементы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьКонтроляПриИзменении(Элемент)
	
	УстановитьНадписиКПолямПериодов(Объект, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьПрогнозПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовПрогнозированияФормы(Элементы, Объект.РассчитыватьПрогноз);
		
КонецПроцедуры

&НаКлиенте
Процедура ТипАнализаПриИзменении(Элемент)
	
	УстановитьСписокВыбораТиповДиаграмм(СоответствиеТиповСравненияИТиповДиаграмм, Элементы.ТипДиаграммы.СписокВыбора, Объект.ТипАнализа);
	
	УстановитьДоступностьЭлементовФормы(СоответствиеТиповСравненияИТиповДиаграмм, Объект, Элементы, ЭтаФорма);
	
	Объект.ТипДиаграммы = Элементы.ТипДиаграммы.СписокВыбора[0].Значение;
	
	УстановитьДоступностьЗаполненияПоШаблону();
	
	Если Не ОформлениеПокомпонентногоСравненияДоступно Тогда
		СброситьНастройкиОформленияПокомпонентногоСравнения();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТочностьРасчетаДробнойЧастиПриИзменении(Элемент)
	
	УстановитьНадписьЗнаковПослеЗапятой(Объект.ТочностьРасчетаДробнойЧасти, Элементы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьНаименованиеПоШаблону(Команда)
	
	ЭлементыНастроек = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	СтрокаПриОтборах = "";
	Если ЕстьПользовательскиеНастройки(ЭлементыНастроек, Ложь) Тогда
		СтрокаПриОтборах = НСтр("ru='Установлены отборы'");
	КонецЕсли;
	
	ОтборПоТипуСравнения = Новый Структура("ТипАнализа", Объект.ТипАнализа);
	НайденныеПараметры = СоответствиеТиповСравненияИТиповДиаграмм.НайтиСтроки(ОтборПоТипуСравнения);
	ОбъектАнализаДоступен =  НайденныеПараметры[0].ОбъектАнализаДоступен;
	
	ПараметрВалютаРасчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, НСтр("ru='ВалютаРасчета'"));
	
	Объект.Наименование = Строка(Элементы.ЗначениеАнализа.ТекстРедактирования) + ?(ПараметрВалютаРасчета = Неопределено, "", " " + "(" + ПараметрВалютаРасчета.Значение + ")")
						  + ?(ОбъектАнализаДоступен, " " + НСтр("ru='по'")+ " " + Строка(Элементы.ОбъектАнализа.ТекстРедактирования), "")
						  + ", " + Строка(Объект.МетодРасчетаЗначений)
						  + ?(НЕ ПустаяСтрока(СтрокаПриОтборах), ", " + СтрокаПриОтборах, "");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступность(Команда)
	
	ПараметрыФормы  = Новый Структура("Пользователи", Объект.НастройкиДоступности);
	Результат = ОткрытьФормуМодально("Справочник.ВариантыАнализаЦелевыхПоказателей.Форма.НастройкаДоступности", ПараметрыФормы);
	
	Если Не Результат = Неопределено Тогда
		
		ЗаполнитьНастройкиДоступности(Результат);
		
		УстановитьНадписиНастроекДоступностиИОтчетов(Объект, Элементы);
	
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборы(Команда)
	
	// Открыть редактор настроек схемы компоновки данных
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = НСтр("ru='Настройка отборов и упорядочивания для варианта анализа ""%1""'");
	ЗаголовокФормыНастройкиСхемыКомпоновкиДанных = СтрЗаменить(ЗаголовокФормыНастройкиСхемыКомпоновкиДанных, "%1", Объект.Наименование);
	
	Адреса = АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище();
	АдресПользовательскихНастроек = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПользовательскиеНастройки, УникальныйИдентификатор);
	
	ПараметрыФормы = Новый Структура("АдресаСхемыКомпоновкиДанных, АдресПользовательскихНастроек", Адреса, АдресПользовательскихНастроек);
	
	АдресПользовательскихНастроек = ОткрытьФормуМодально("Справочник.ВариантыАнализаЦелевыхПоказателей.Форма.НастройкаОтборов", ПараметрыФормы);
	
	Если Не АдресПользовательскихНастроек = Неопределено Тогда
		
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПолучитьИзВременногоХранилища(АдресПользовательскихНастроек));
		
	КонецЕсли;
	
	УстановитьНадписиНастроекОтборовИУпорядочивания(КомпоновщикНастроек, Элементы);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтчеты(Команда)
	
	ПараметрыФормы  = Новый Структура("ВариантыОтчетов", Объект.ОтчетыДляРасшифровки);
	
	Результат = ОткрытьФормуМодально("Справочник.ВариантыАнализаЦелевыхПоказателей.Форма.НастройкаОтчетовДляРасшифровки", ПараметрыФормы);
	
	Если Не Результат = Неопределено Тогда
		ЗаполнитьНастройкиОтчетовДляРасшифровки(Результат);
		
		УстановитьНадписиНастроекДоступностиИОтчетов(Объект, Элементы);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОформление(Команда)
	
	СтруктураНастроекОформления  = Новый Структура("ХранилищеНастроекОформления, 
									|ТолькоЦветОсновнойСерии,
									|ГрадиентДляПокомпонетногоСравнения,
									|ВыделятьМаксимальноеЗначениеДляПокомпонетногоСравнения,
									|ВыводитьМаркерТочекПрогноза,
									|ОтображатьЛегенду,
									|ОформлениеПокомпонентногоСравненияДоступно", 
									ХранилищеНастроекОформления, 
									Объект.ТолькоЦветОсновнойСерии,
									Объект.ГрадиентДляПокомпонетногоСравнения,
									Объект.ВыделятьМаксимальноеЗначениеДляПокомпонетногоСравнения,
									Объект.ВыводитьМаркерТочекПрогноза,
									Объект.ОтображатьЛегенду,
									ОформлениеПокомпонентногоСравненияДоступно);
	
	ПараметрыФормы = Новый Структура("СтруктураНастроекОформления", СтруктураНастроекОформления);
	
	Результат = ОткрытьФормуМодально("Справочник.ВариантыАнализаЦелевыхПоказателей.Форма.НастройкаОформления", ПараметрыФормы);
	
	Если Не Результат = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект, Результат);
		
		ХранилищеНастроекОформления = Результат.ХранилищеНастроекОформления;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаКлиенте 
Процедура УстановитьДоступностьЗаполненияПоШаблону()
	
	ОтборПоТипуСравнения = Новый Структура("ТипАнализа", Объект.ТипАнализа);
	НайденныеПараметры = СоответствиеТиповСравненияИТиповДиаграмм.НайтиСтроки(ОтборПоТипуСравнения);
	
	Если ЗначениеЗаполнено(Объект.ТипАнализа)
		И НЕ ЗначениеАнализа = Неопределено
		И НЕ Элементы.ЗначениеАнализа.СписокВыбора.НайтиПоЗначению(ЗначениеАнализа) = Неопределено
		И ЗначениеЗаполнено(Объект.МетодРасчетаЗначений) Тогда
		
		Если НайденныеПараметры[0].ОбъектАнализаДоступен Тогда
			Если НЕ ОбъектАнализа = Неопределено
				И НЕ Элементы.ОбъектАнализа.СписокВыбора.НайтиПоЗначению(ОбъектАнализа) = Неопределено Тогда
				Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Истина;
				
			Иначе
				Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Ложь;
				
			КонецЕсли;
			
		Иначе 
			Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Истина;
			
		КонецЕсли;
		
	Иначе
		Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьДоступностьЭлементовПрогнозированияФормы(Элементы, РассчитыватьПрогноз)
	
	Элементы.ГлубинаАнализаПрогноза.Доступность = РассчитыватьПрогноз;
	Элементы.ГоризонтПрогноза.Доступность = РассчитыватьПрогноз;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьДоступностьЭлементовФормы(ТипыСравненияИТипыДиаграмм, Объект, Элементы, ЭтаФорма)
	
	ОтборПоТипуСравнения = Новый Структура("ТипАнализа", Объект.ТипАнализа);
	НайденныеПараметры = ТипыСравненияИТипыДиаграмм.НайтиСтроки(ОтборПоТипуСравнения);
	
	Элементы.ПериодСравнения.Доступность = НайденныеПараметры[0].ПериодСравненияДоступен;
	Элементы.ПериодСравнения.АвтоОтметкаНезаполненного = НайденныеПараметры[0].ПериодСравненияДоступен;
	
	Элементы.ОбъектАнализа.Доступность = НайденныеПараметры[0].ОбъектАнализаДоступен;
	Элементы.ОбъектАнализа.АвтоОтметкаНезаполненного = НайденныеПараметры[0].ОбъектАнализаДоступен;
	
	Элементы.ГруппаПрогнозированиеЭлементыУправления.Доступность = НайденныеПараметры[0].ПрогнозированиеДоступно;
	
	ЭтаФорма.ОформлениеПокомпонентногоСравненияДоступно = НайденныеПараметры[0].ОформлениеПокомпонентногоСравненияДоступно;
	
	Элементы.ГлубинаАнализаПрогноза.Доступность = Объект.РассчитыватьПрогноз;
	Элементы.ГоризонтПрогноза.Доступность = Объект.РассчитыватьПрогноз;
	
	Элементы.МетодРасчетаЗначений.Доступность = ЭтаФорма.НарастающийИтогДоступен;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьНадписьЗнаковПослеЗапятой(ЗнаковПослеЗапятой, Элементы)
	
	Элементы.НадписьЗнаковПослеЗапятой.Заголовок = 
	МониторингЦелевыхПоказателейКлиентСервер.ПолучитьСклонениеСлова(ЗнаковПослеЗапятой, НСтр("ru='знак'"), НСтр("ru='знака'"), НСтр("ru='знаков'"), НСтр("ru='м'")) + " " + НСтр("ru='после запятой'");
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьНадписиКПолямПериодов(Объект, Элементы)
	
	Элементы.НадписьГлубинаАнализаПрогноза.Заголовок = МониторингЦелевыхПоказателейКлиентСервер.ПериодПрописью(Объект.ГлубинаАнализаПрогноза, Объект.ПериодичностьКонтроля);
	Элементы.НадписьГоризонтПрогноза.Заголовок = МониторингЦелевыхПоказателейКлиентСервер.ПериодПрописью(Объект.ГоризонтПрогноза, Объект.ПериодичностьКонтроля);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьНадписиНастроекДоступностиИОтчетов(Объект, Элементы)
	
	Если Объект.НастройкиДоступности.Количество() = 0 Тогда
		Элементы.НастроитьДоступность.Заголовок = НСтр("ru='настроить'");
	Иначе
		Элементы.НастроитьДоступность.Заголовок = НСтр("ru='посмотреть / изменить'");
	КонецЕсли;
	
	Если Объект.ОтчетыДляРасшифровки.Количество() = 0 Тогда
		Элементы.НастроитьОтчеты.Заголовок = НСтр("ru='настроить'");
	Иначе
		Элементы.НастроитьОтчеты.Заголовок = НСтр("ru='посмотреть / изменить'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьНадписиНастроекОтборовИУпорядочивания(КомпоновщикНастроек, Элементы)
	
	ЭлементыНастроек = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	
	Если ЕстьПользовательскиеНастройки(ЭлементыНастроек) Тогда
		Элементы.НастроитьОтборыИУпорядочивание.Заголовок = НСтр("ru='посмотреть / изменить'");
		
	иначе
		Элементы.НастроитьОтборыИУпорядочивание.Заголовок = НСтр("ru='настроить'");
	
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьСписокВыбораТиповДиаграмм(ТипыСравненияИТипыДиаграмм, СписокВыбора, ТипАнализа)
	
	СписокВыбора.Очистить();
	
	ОтборПоТипуСравнения = Новый Структура("ТипАнализа", ТипАнализа);
	НайденныеТипыДиаграмм = ТипыСравненияИТипыДиаграмм.НайтиСтроки(ОтборПоТипуСравнения);
	
	Для Каждого ТекНайденныйТипДиаграммы Из НайденныеТипыДиаграмм Цикл 
		
		СписокВыбора.Добавить(ТекНайденныйТипДиаграммы.ТипДиаграммы);
		
	КонецЦикла;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере 
Функция АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище()
	
	Возврат Справочники.СтруктураЦелей.АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(Объект.Владелец);
	
КонецФункции

&НаСервере 
Процедура ВосстановитьНастройкиСКДВариантаАнализа()
	
	ВариантАнализаОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ВариантыАнализаЦелевыхПоказателей"));
	Цель = Объект.Владелец;
	
	Если Параметры.Свойство("ЗначениеКопирования") И НЕ Параметры.ЗначениеКопирования.Пустая() Тогда
		ХранилищеПользовательскихНастроекКомпоновкиДанных = Параметры.ЗначениеКопирования.ХранилищеПользовательскихНастроекКомпоновкиДанных;
		ОбъектАнализа = Параметры.ЗначениеКопирования.ОбъектАнализа.Получить();
		ЗначениеАнализа = Параметры.ЗначениеКопирования.ЗначениеАнализа.Получить();
		
	Иначе	
		ХранилищеПользовательскихНастроекКомпоновкиДанных = ВариантАнализаОбъект.ХранилищеПользовательскихНастроекКомпоновкиДанных;
		Если ОбъектАнализа = Неопределено Тогда
			ОбъектАнализа = ВариантАнализаОбъект.ОбъектАнализа.Получить();
		КонецЕсли;
		Если ЗначениеАнализа = Неопределено Тогда
			ЗначениеАнализа = ВариантАнализаОбъект.ЗначениеАнализа.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
	Адреса = АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище();
	
	Если НЕ Адреса.СхемаКомпоновкиДанных = Неопределено Тогда
		Схема = ПолучитьИзВременногоХранилища(Адреса.СхемаКомпоновкиДанных);
		ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения(Схема);
		
		Если НЕ Адреса.НастройкиКомпоновкиДанных = Неопределено Тогда
			НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(Адреса.НастройкиКомпоновкиДанных);
			
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКомпоновкиДанных);
			
		Иначе
			ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(Схема.НастройкиПоУмолчанию);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Схема.Параметры.Найти("НарастающимИтогом") = Неопределено Тогда
		НарастающийИтогДоступен = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ВосстановитьПериодАнализаСервер()
	
	ВариантАнализаОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ВариантыАнализаЦелевыхПоказателей"));
	
	Если Параметры.Свойство("ЗначениеКопирования") И НЕ Параметры.ЗначениеКопирования.Пустая() Тогда
		ПериодАнализа = Параметры.ЗначениеКопирования.ПериодАнализа.Получить();
	Иначе
		ПериодАнализа = ВариантАнализаОбъект.ПериодАнализа.Получить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ВосстановитьПериодСравненияСервер()
	
	ВариантАнализаОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ВариантыАнализаЦелевыхПоказателей"));
	
	Если Параметры.Свойство("ЗначениеКопирования") И НЕ Параметры.ЗначениеКопирования.Пустая() Тогда
		ПериодСравнения = Параметры.ЗначениеКопирования.ПериодСравнения.Получить();
	Иначе
		ПериодСравнения = ВариантАнализаОбъект.ПериодСравнения.Получить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ЕстьПользовательскиеНастройки(ПользовательскиеНастройкиЭлементы, УчитыватьПараметры = Истина)
	
	ЕстьИспользование = Ложь;
	Для Каждого ЭлементНастроек Из ПользовательскиеНастройкиЭлементы Цикл 
		Если ТипЗнч(ЭлементНастроек) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") 
			И НЕ УчитыватьПараметры Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементНастроек.Использование Тогда
			ЕстьИспользование = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьИспользование;
	
КонецФункции

&НаСервере 
Процедура ИнициализироватьДанныеФормы()
	
	ИнициализироватьКомпоновщикНастроек();
	
	ЗаполнитьСписокВыбораОбъектовАнализа();
	
	ЗаполнитьСписокВыбораЗначенийАнализа();
	
	ВариантОтображенияПоУмолчанию = Перечисления.ВариантыОтображенияВариантовАнализа.Диаграмма;
	
КонецПроцедуры

&НаСервере 
Процедура ИнициализироватьКомпоновщикНастроек()
	
	СКДВариантаАнализа = ХранилищеСхемыКомпоновкиДанных.Получить();
	
	АдресСКД = ПоместитьВоВременноеХранилище(СКДВариантаАнализа, Новый УникальныйИдентификатор());
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
		
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Если НЕ ХранилищеНастроекКомпоновкиДанных = Неопределено И НЕ ХранилищеНастроекКомпоновкиДанных.Получить() = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(ХранилищеНастроекКомпоновкиДанных.Получить());
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СКДВариантаАнализа.НастройкиПоУмолчанию);
	КонецЕсли;
	
	Если НЕ ХранилищеПользовательскихНастроекКомпоновкиДанных.Получить() = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ХранилищеПользовательскихНастроекКомпоновкиДанных.Получить());
	КонецЕсли;
	
	// Заполним обязательный параметр ВалютРасчета для СКД где он есть и не заполнен
	ПараметрВалютаРасчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, НСтр("ru='ВалютаРасчета'"));
	Если НЕ ПараметрВалютаРасчета = Неопределено И ПараметрВалютаРасчета.Значение = Справочники.Валюты.ПустаяСсылка() Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки, НСтр("ru='ВалютаРасчета'"), МониторингЦелевыхПоказателей.ПолучитьВалютуПоУмолчанию(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьНастройкиДоступности(АдресНастроекДоступности)
	
	ХранилищеТаблицыДоступности = ПолучитьИзВременногоХранилища(АдресНастроекДоступности);
	Если НЕ ХранилищеТаблицыДоступности = Неопределено Тогда
		ТаблицаДоступности = ХранилищеТаблицыДоступности.Получить();
		
		НастройкиДоступности = Объект.НастройкиДоступности;
		НастройкиДоступности.Очистить();
		Для Каждого СтрокаДоступности Из ТаблицаДоступности Цикл 
			Если НЕ СтрокаДоступности.Доступность Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = НастройкиДоступности.Добавить();
			НоваяСтрока.Пользователь = СтрокаДоступности.Пользователь;
			НоваяСтрока.ВариантОтображения = СтрокаДоступности.ВариантОтображения;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьНастройкиОтчетовДляРасшифровки(АдресНастроекОтчетов)
	
	ХранилищеТаблицыОтчетов = ПолучитьИзВременногоХранилища(АдресНастроекОтчетов);
	Если НЕ ХранилищеТаблицыОтчетов = Неопределено Тогда
		ТаблицаОтчетов = ХранилищеТаблицыОтчетов.Получить();
		
		ОтчетыДляРасшифровки = Объект.ОтчетыДляРасшифровки;
		ОтчетыДляРасшифровки.Очистить();
		Для Каждого СтрокаОтчет Из ТаблицаОтчетов Цикл 
			Если НЕ СтрокаОтчет.Доступность Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = ОтчетыДляРасшифровки.Добавить();
			НоваяСтрока.ВариантОтчета = СтрокаОтчет.ВариантОтчета;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьОбъектИЗначениеАнализаПоУмолчанию()
	
	ДоступныеОбъектыАнализа = Справочники.СтруктураЦелей.ДоступныеОбъектыАнализа(Объект.Владелец);
	ДоступныеЗначенияАнализа = Справочники.СтруктураЦелей.ДоступныеЗначенияАнализа(Объект.Владелец);
	
	ОбъектАнализа = ДоступныеОбъектыАнализа[0].Значение;
	ЗначениеАнализа = ДоступныеЗначенияАнализа[0].Значение;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьСписокВыбораЗначенийАнализа()
	
	ДоступныеПоля = Справочники.СтруктураЦелей.ДоступныеЗначенияАнализа(Объект.Владелец);
	
	Элементы.ЗначениеАнализа.СписокВыбора.Очистить();
	
	Для Каждого ДоступноеПоле Из ДоступныеПоля Цикл 
		Элементы.ЗначениеАнализа.СписокВыбора.Добавить(ДоступноеПоле.Значение, ДоступноеПоле.Представление);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьСписокВыбораОбъектовАнализа()
	
	ДоступныеПоля = Справочники.СтруктураЦелей.ДоступныеОбъектыАнализа(Объект.Владелец);
	
	Элементы.ОбъектАнализа.СписокВыбора.Очистить();
	
	Для Каждого ДоступноеПоле Из ДоступныеПоля Цикл 
		Элементы.ОбъектАнализа.СписокВыбора.Добавить(ДоступноеПоле.Значение, ДоступноеПоле.Представление);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ПриЧтенииСозданииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УстановитьНастройкиОформленияПоУмолчанию();
		
		ЗаполнитьОбъектИЗначениеАнализаПоУмолчанию();
		
	Иначе
		ВариантАнализаОбъект = ДанныеФормыВЗначение(Объект, Тип("СправочникОбъект.ВариантыАнализаЦелевыхПоказателей"));
		ХранилищеНастроекОформления = ВариантАнализаОбъект.ХранилищеНастроекОформления;
		
	КонецЕсли;
	
	ЗначениеВДанныеФормы(МониторингЦелевыхПоказателей.ПолучитьТаблицуСоответствиТиповАнализаИТиповДиаграмм(), СоответствиеТиповСравненияИТиповДиаграмм);
	
	УстановитьСписокВыбораТиповДиаграмм(СоответствиеТиповСравненияИТиповДиаграмм, Элементы.ТипДиаграммы.СписокВыбора, Объект.ТипАнализа);
	
	УстановитьНадписиКПолямПериодов(Объект, Элементы);
	
	УстановитьНадписьЗнаковПослеЗапятой(Объект.ТочностьРасчетаДробнойЧасти, Элементы);
	
	ВосстановитьПериодАнализаСервер();
	
	ВосстановитьПериодСравненияСервер();

	ВосстановитьНастройкиСКДВариантаАнализа();
	
	ИнициализироватьДанныеФормы();
	
	УстановитьНадписиНастроекОтборовИУпорядочивания(КомпоновщикНастроек, Элементы);
	
	УстановитьНадписиНастроекДоступностиИОтчетов(Объект, Элементы);
	
	Элементы.НастроитьОформление.Заголовок = НСтр("ru='посмотреть / изменить'");
	
	УстановитьДоступностьЭлементовФормы(СоответствиеТиповСравненияИТиповДиаграмм, Объект, Элементы, ЭтаФорма);
	
	УстановитьДоступностьЗаполненияПоШаблонуСервер();
	
КонецПроцедуры

&НаКлиенте 
Процедура СброситьНастройкиОформленияПокомпонентногоСравнения()
	
	Объект.ТолькоЦветОсновнойСерии = Ложь;
	Объект.ГрадиентДляПокомпонетногоСравнения = Ложь;
	Объект.ВыделятьМаксимальноеЗначениеДляПокомпонетногоСравнения = Ложь;
	
КонецПроцедуры

&НаСервере 
Процедура СохранитьНастройкиСКДВариантаАнализа(ТекущийОбъект)
	
	ТекущийОбъект.ОбъектАнализа = Новый ХранилищеЗначения(ОбъектАнализа);
	ТекущийОбъект.ЗначениеАнализа = Новый ХранилищеЗначения(ЗначениеАнализа);
	ТекущийОбъект.ХранилищеПользовательскихНастроекКомпоновкиДанных = Новый ХранилищеЗначения(КомпоновщикНастроек.ПользовательскиеНастройки);
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьНастройкиОформленияПоУмолчанию()
	
	СтруктураНастроекОформления = Справочники.ВариантыАнализаЦелевыхПоказателей.НастройкиОформленияПоУмолчанию();
	
	Если НЕ Параметры.ЗначениеКопирования.Пустая() Тогда
		ХранилищеНастроекОформления = Параметры.ЗначениеКопирования.ХранилищеНастроекОформления;
	Иначе
		ХранилищеНастроекОформления = СтруктураНастроекОформления.ХранилищеНастроекОформления;
		ЗаполнитьЗначенияСвойств(Объект, СтруктураНастроекОформления);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьДоступностьЗаполненияПоШаблонуСервер()
	
	ОтборПоТипуСравнения = Новый Структура("ТипАнализа", Объект.ТипАнализа);
	НайденныеПараметры = СоответствиеТиповСравненияИТиповДиаграмм.НайтиСтроки(ОтборПоТипуСравнения);
	
	Если ЗначениеЗаполнено(Объект.ТипАнализа) 
		И НЕ ЗначениеАнализа = Неопределено
		И ЗначениеЗаполнено(Объект.МетодРасчетаЗначений) Тогда
		
		Если НайденныеПараметры[0].ОбъектАнализаДоступен Тогда
			Если НЕ ОбъектАнализа = Неопределено Тогда
				Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Истина;
				
			Иначе
				Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Ложь;
				
			КонецЕсли;
			
		Иначе 
			Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Истина;
			
		КонецЕсли;
		
		Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Истина;
		
	Иначе
		Элементы.ЗаполнитьНаименованиеПоШаблону.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры



