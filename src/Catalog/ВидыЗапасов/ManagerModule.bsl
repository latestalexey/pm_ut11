#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


///////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция определяет реквизиты выбранного вида запасов.
//
// Параметры:
//  ВидЗапасов - СправочникСсылка.ВидыЗапасов - Ссылка на вид запасов
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного вида запасов
//
Функция ПолучитьРеквизитыВидаЗапасов(ВидЗапасов) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВидыЗапасов.РеализацияЗапасовДругойОрганизации КАК РеализацияЗапасовДругойОрганизации,
	|	ВидыЗапасов.Организация КАК Организация,
	|	ВидыЗапасов.Валюта КАК Валюта,
	|	ВидыЗапасов.ТипЗапасов КАК ТипЗапасов
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &ВидЗапасов
	|");
	
	Запрос.УстановитьПараметр("ВидЗапасов", ВидЗапасов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РеализацияЗапасовДругойОрганизации = Выборка.РеализацияЗапасовДругойОрганизации;
		Организация = Выборка.Организация;
		Валюта = Выборка.Валюта;
		ТипЗапасов = Выборка.ТипЗапасов;
	Иначе
		РеализацияЗапасовДругойОрганизации = Ложь;
		Организация = Справочники.Организации.ПустаяСсылка();
		Валюта = Справочники.Валюты.ПустаяСсылка();
		ТипЗапасов = Перечисления.ТипыЗапасов.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("РеализацияЗапасовДругойОрганизации, Организация, Валюта, ТипЗапасов", 
		РеализацияЗапасовДругойОрганизации,
		Организация,
		Валюта,
		ТипЗапасов
	);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Функция формирует строку наименования вида запаса.
//
// Параметры:
//	СправочникОбъект - Вид запасов, для которого необходимо определить наименовние
//
// Возвращаемое значение:
//	Строка - Наименование вида запасов
//
Функция ПолучитьНаименованиеВидаЗапасов(СправочникОбъект) Экспорт
	
	Если СправочникОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
		СтрокаНалогообложение = "Облагается НДС";
	ИначеЕсли СправочникОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
		СтрокаНалогообложение = "Не облагается НДС";
	ИначеЕсли СправочникОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		СтрокаНалогообложение = "Облагается ЕНВД";
	ИначеЕсли СправочникОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт Тогда
		СтрокаНалогообложение = "Экспорт";	
	Иначе
		СтрокаНалогообложение = "";
	КонецЕсли;
	
	Если СправочникОбъект.Предназначение = Перечисления.ТипыПредназначенияВидовЗапасов.ПредназначенДляЗаказа Тогда
		АналитикаУчета = Строка(СправочникОбъект.Назначение);
	ИначеЕсли СправочникОбъект.Предназначение = Перечисления.ТипыПредназначенияВидовЗапасов.ПредназначенДляСделки Тогда
		АналитикаУчета = "Сделка: " + Строка(СправочникОбъект.Сделка);
	ИначеЕсли СправочникОбъект.Предназначение = Перечисления.ТипыПредназначенияВидовЗапасов.ПредназначенДляМенеджера Тогда
		АналитикаУчета = "Менеджер: " + Строка(СправочникОбъект.Менеджер);
	ИначеЕсли СправочникОбъект.Предназначение = Перечисления.ТипыПредназначенияВидовЗапасов.ПредназначенДляПодразделения Тогда
		АналитикаУчета = "Подразделение: " + Строка(СправочникОбъект.Подразделение);
	Иначе
		АналитикаУчета = "";
	КонецЕсли;
	
	Если СправочникОбъект.ТипЗапасов = Перечисления.ТипыЗапасов.КомиссионныйТовар Тогда
		Наименование = СокрЛП(СправочникОбъект.ТипЗапасов) + "; "
			+ ?(Не ПустаяСтрока(АналитикаУчета), АналитикаУчета + "; ", "")
			+ "Комитент: " + Строка(СправочникОбъект.Комитент) + "; "
			+ ?(ЗначениеЗаполнено(СправочникОбъект.Соглашение), "Соглашение: " + Строка(СправочникОбъект.Соглашение) + "; ", "")
			+ СтрокаНалогообложение + "; "
			+ "Валюта: " + Строка(СправочникОбъект.Валюта)
		;
	Иначе // собственный товар
		Наименование = СокрЛП(СправочникОбъект.ТипЗапасов) + "; "
			+ ?(Не ПустаяСтрока(АналитикаУчета), АналитикаУчета + "; ", "")
			+ ?(ЗначениеЗаполнено(СправочникОбъект.Поставщик), "Поставщик: " + Строка(СправочникОбъект.Поставщик) + "; ", "")
			+ ?(Не ПустаяСтрока(СтрокаНалогообложение), СтрокаНалогообложение, "")
		;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СправочникОбъект.ГруппаФинансовогоУчета) Тогда
		Наименование = Наименование
			+ ?(Прав(СокрЛП(Наименование), 1) <> ";", "; ", "") 
			+ "Группа: " + СправочникОбъект.ГруппаФинансовогоУчета;
	КонецЕсли;
	
	Если СправочникОбъект.РеализацияЗапасовДругойОрганизации Тогда
		Наименование = Наименование
			+ ?(Прав(СокрЛП(Наименование), 1) <> ";", "; ", "") 
			+ "Запасы другой организации";
	КонецЕсли;
		
	Если Прав(СокрЛП(Наименование), 1) =  ";" Тогда
		Наименование = Сред(СокрЛП(Наименование), 1, СтрДлина(СокрЛП(Наименование)) - 1);
	КонецЕсли;
		
	Возврат Наименование;

КонецФункции

// Функция получает вид запасов для текущего документа.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Операция документа
//	РеквизитыДокумента - Структура или ВыборкаИзРезультатаЗапроса - Данные документа
//
// Возвращаемое значение:
//	СправочникСсылка.ВидыЗапасов - Найденный вид запасов
//
Функция ВидЗапасовДокумента(Организация, ХозяйственнаяОперация, РеквизитыДокумента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураВидЗапасов = СтруктураВидаЗапасов(Организация, ХозяйственнаяОперация, РеквизитыДокумента);
	
	МенеджерЗаписи = РегистрыСведений.АналитикаВидовЗапасов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураВидЗапасов);
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.Выбран() Тогда
		Результат = МенеджерЗаписи.КлючАналитики;
	Иначе
		Результат = СоздатьКлючАналитики(СтруктураВидЗапасов);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Функция получает вид запасов для передачи товаров между организациями.
//
// Параметры:
//	ВидЗапасовВладельца - СправочникСсылка.ВидыЗапасов - Вид запасов организации - владельца
//	ОрганизацияПродавец - СправочникСсылка.Организации - Организация - продавец
//	ПередачаПодДеятельность - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложение деятельности
//
// Возвращаемое значение:
//	СправочникСсылка.ВидыЗапасов - Созданный вид запасов
//
Функция ВидЗапасовДляПередачиМеждуОрганизациями(ВидЗапасовВладельца, ОрганизацияПродавец, ПередачаПодДеятельность) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВидыЗапасовВладельца.Ссылка КАК ВидЗапасовВладельца,
	|	ВидыЗапасовПродавца.Ссылка КАК ВидЗапасов,
	|
	|	Настройка.ОрганизацияПродавец КАК Организация,
	|	ВидыЗапасовВладельца.Организация КАК Комитент,
	|	ВидыЗапасовВладельца.Организация КАК Контрагент,
	|	Настройка.Валюта КАК Валюта,
	|	Настройка.СпособПередачиТоваров КАК СпособПередачиТоваров,
	|	Истина КАК РеализацияЗапасовДругойОрганизации,
	|
	|	ВидыЗапасовВладельца.Предназначение КАК Предназначение,
	|	ВидыЗапасовВладельца.Сделка КАК Сделка,
	|	ВидыЗапасовВладельца.Менеджер КАК Менеджер,
	|	ВидыЗапасовВладельца.Подразделение КАК Подразделение,
	|	ВидыЗапасовВладельца.Поставщик КАК Поставщик,
	|	ВидыЗапасовВладельца.Назначение КАК Назначение,
	|	&ПередачаПодДеятельность КАК НалогообложениеНДС
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ВидыЗапасовВладельца
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.НастройкаПередачиТоваровМеждуОрганизациями КАК Настройка
	|	ПО
	|		ВидыЗапасовВладельца.Организация = Настройка.ОрганизацияВладелец
	|		И ВидыЗапасовВладельца.ТипЗапасов = Настройка.ТипЗапасов
	|		И Настройка.ОрганизацияПродавец = &ОрганизацияПродавец
	|		И Настройка.СпособПередачиТоваров <> ЗНАЧЕНИЕ(Перечисление.СпособыПередачиТоваров.НеПередается)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК ВидыЗапасовПродавца
	|	ПО
	|		ВидыЗапасовВладельца.Ссылка = ВидыЗапасовПродавца.ВидЗапасовВладельца
	|		И Настройка.ОрганизацияПродавец = ВидыЗапасовПродавца.Организация
	|		И Настройка.СпособПередачиТоваров = ВидыЗапасовПродавца.СпособПередачиТоваров
	|		И Настройка.Валюта = ВидыЗапасовПродавца.Валюта
	|		И ВидыЗапасовПродавца.НалогообложениеНДС = &ПередачаПодДеятельность
	|	
	|ГДЕ
	|	ВидыЗапасовВладельца.Ссылка = &ВидЗапасовВладельца
	|");
	
	Запрос.УстановитьПараметр("ОрганизацияПродавец", ОрганизацияПродавец);
	Запрос.УстановитьПараметр("ВидЗапасовВладельца", ВидЗапасовВладельца);
	Запрос.УстановитьПараметр("ПередачаПодДеятельность", ПередачаПодДеятельность);
	
	ВидЗапасов = Справочники.ВидыЗапасов.ПустаяСсылка();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если ЗначениеЗаполнено(Выборка.ВидЗапасов) Тогда
			ВидЗапасов = Выборка.ВидЗапасов;
		Иначе
			СтруктураПараметры = Новый Структура("
				|Организация,
				|СпособПередачиТоваров,
				|Комитент,
				|Контрагент,
				|Валюта,
				|ВидЗапасовВладельца,
				|РеализацияЗапасовДругойОрганизации,
				|Предназначение,
				|Сделка,
				|Менеджер,
				|Подразделение,
				|Поставщик,
				|Назначение,
				|НалогообложениеНДС
				|"
			);
			ЗаполнитьЗначенияСвойств(СтруктураПараметры, Выборка);
			
			Если Выборка.СпособПередачиТоваров = Перечисления.СпособыПередачиТоваров.ПередачаНаКомиссию Тогда
				НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(
					Выборка.Комитент,
					, // Склад
					// Дата
				);
			Иначе
				НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
			КонецЕсли;
			
			СправочникОбъект = Справочники.ВидыЗапасов.СоздатьЭлемент();
			СправочникОбъект.Заполнить(СтруктураПараметры);
			СправочникОбъект.НалогообложениеНДС = НалогообложениеНДС;
			СправочникОбъект.Записать();
			
			ВидЗапасов = СправочникОбъект.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидЗапасов;
	
КонецФункции

// Функция получает вид запасов для возврата товаров от клиента.
//
// Параметры:
//	ВидЗапасовОтгрузки - СправочникСсылка.ВидыЗапасов - Вид запасов реализованного товара
//
// Возвращаемое значение:
//	СправочникСсылка.ВидыЗапасов - Созданный вид запасов
//
Функция ВидЗапасовДляВозвратаТоваровОтКлиента(ВидЗапасовОтгрузки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВидыЗапасов.Ссылка КАК ВидЗапасов,
	|	ВидыЗапасов.Организация КАК Организация,
	|	ВидыЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	ВидыЗапасов.Комитент КАК Комитент,
	|	ВидыЗапасов.Контрагент КАК Контрагент,
	|	ВидыЗапасов.Договор КАК Договор,
	|	ВидыЗапасов.Соглашение КАК Соглашение,
	|	ВидыЗапасов.Валюта КАК Валюта,
	|	ВЫБОР КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	ИНАЧЕ
	|		ВидыЗапасов.НалогообложениеНДС
	|	КОНЕЦ КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеОрганизации,
	|	ВидыЗапасов.Поставщик КАК Поставщик,
	|
	|	ВидыЗапасов.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка) КАК Менеджер,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПустаяСсылка) КАК ВариантОбособленногоУчетаТоваров,
	|	ЕСТЬNULL(ВидыЗапасов.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ) КАК ОбособленныйУчетТоваровПоСделке,
	|
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|
	|	ЛОЖЬ КАК РеализацияЗапасовДругойОрганизации,
	|	НЕОПРЕДЕЛЕНО КАК ВидЗапасовВладельца,
	|
	|	ВЫБОР КОГДА ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|	КОНЕЦ КАК ХозяйственнаяОперация
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &ВидЗапасовОтгрузки
	|");
	
	Запрос.УстановитьПараметр("ВидЗапасовОтгрузки", ВидЗапасовОтгрузки);
	
	ВидЗапасов = Справочники.ВидыЗапасов.ПустаяСсылка();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВидЗапасов = Справочники.ВидыЗапасов.ВидЗапасовДокумента(
			Выборка.Организация,
			Выборка.ХозяйственнаяОперация,
			Выборка
		);
		
	КонецЕсли;
	
	Возврат ВидЗапасов;
	
КонецФункции

// Функция определяет вид запасов по умолчанию для передачи между организациями.
//
// Параметры:
//  ОрганизацияВладелец - СправочникСсылка.Организации - Ссылка на владельца
//  ОрганизацияПродавец - СправочникСсылка.Организации - Ссылка на продавца
//
// Возвращаемое значение:
//	СправочникСсылка.ВидыЗапасов - Найденный вид запасов
//
Функция ВидЗапасовДляПередачиМеждуОрганизациямиПоУмолчанию(ОрганизацияВладелец, ОрганизацияПродавец) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ВидыЗапасов.Ссылка КАК ВидЗапасов
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	Не ВидыЗапасов.ПометкаУдаления
	|	И ВидыЗапасов.РеализацияЗапасовДругойОрганизации
	|	И ВидыЗапасов.Организация = &ОрганизацияПродавец
	|	И ВидыЗапасов.ВидЗапасовВладельца.Организация = &ОрганизацияВладелец
	|");
	
	Запрос.УстановитьПараметр("ОрганизацияВладелец", ОрганизацияВладелец);
	Запрос.УстановитьПараметр("ОрганизацияПродавец", ОрганизацияПродавец);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 
	   И Выборка.Следующий()
	Тогда
		ВидЗапасов = Выборка.ВидЗапасов;
	Иначе
		ВидЗапасов = Справочники.ВидыЗапасов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВидЗапасов;

КонецФункции

// Процедура устанавливает пометку на удаление для найденных элементов справочника.
//
// Параметры:
//	СтруктураПараметров - Структура - Параметры выбора элементов справочника
//	ПометкаУдаления - Булево - Признак установки пометки на удаление
//
Процедура УстановитьПометкуУдаления(СтруктураПараметров, ПометкаУдаления) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыЗапасов КАК Таблица
	|ГДЕ
	|	Таблица.ПометкаУдаления <> &ПометкаУдаления
	|");
	Если СтруктураПараметров.Свойство("Организация") Тогда

		Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
		Запрос.Текст = Запрос.Текст + " И (Таблица.Организация = &Организация ИЛИ Таблица.Комитент = &Организация ИЛИ Таблица.Поставщик = &Организация)";

	КонецЕсли;
	Если СтруктураПараметров.Свойство("Партнер") Тогда

		Запрос.УстановитьПараметр("Партнер", СтруктураПараметров.Партнер);
		Запрос.Текст = Запрос.Текст + " И (Таблица.Комитент = &Партнер ИЛИ Таблица.Поставщик = &Партнер)";

	КонецЕсли;
	Если СтруктураПараметров.Свойство("Соглашение") Тогда

		Запрос.УстановитьПараметр("Соглашение", СтруктураПараметров.Соглашение);
		Запрос.Текст = Запрос.Текст + " И Таблица.Соглашение = &Соглашение";

	КонецЕсли;
	Если СтруктураПараметров.Свойство("Договор") Тогда

		Запрос.УстановитьПараметр("Договор", СтруктураПараметров.Договор);
		Запрос.Текст = Запрос.Текст + " И Таблица.Договор = &Договор";

	КонецЕсли;
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(ПометкаУдаления);

	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

Процедура ЗаполнитьНалогообложениеНДС() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению") Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДанныеРегистра.КлючАналитики КАК КлючАналитики,
		|	ДанныеРегистра.Организация КАК Организация,
		|	ДанныеРегистра.ТипЗапасов КАК ТипЗапасов,
		|	ДанныеРегистра.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ДанныеРегистра.Поставщик КАК Поставщик,
		|	ДанныеРегистра.Соглашение КАК Соглашение,
		|	ДанныеРегистра.Валюта КАК Валюта,
		|	ДанныеРегистра.АналитикаПредназначения КАК АналитикаПредназначения,
		|	ДанныеРегистра.УдалитьДеятельностьОблагаетсяЕНВД КАК УдалитьДеятельностьОблагаетсяЕНВД ,
		|	ДанныеРегистра.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	ДанныеРегистра.Контрагент КАК Контрагент,
		|	ДанныеРегистра.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.АналитикаВидовЗапасов КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
		|	И ДанныеРегистра.УдалитьДеятельностьОблагаетсяЕНВД 
		|	И ДанныеРегистра.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
		|	И ДанныеРегистра.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СправочникОбъект = Выборка.КлючАналитики.ПолучитьОбъект();
			СправочникОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД;
			
			Попытка
				СправочникОбъект.Записать();
			Исключение
			КонецПопытки;
			
			МенеджерЗаписи = РегистрыСведений.АналитикаВидовЗапасов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Удалить();
			
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД;
			МенеджерЗаписи.Записать(Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Замена дублей видов запасов

Процедура ЗаменитьВидЗапасовВДокументе(СоответствиеАналитик, ДокументСсылка, МетаданныеДокумента, МассивОбработанныхОбъектов)
	
	Если МетаданныеДокумента.ТабличныеЧасти.Найти("ВидыЗапасов") <> Неопределено Тогда
	
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
		ЗаписыватьДокумент = Ложь;
			
		Для Каждого СтрокаТаблицы Из ДокументОбъект.ВидыЗапасов Цикл
			
			ВидЗапасов = СоответствиеАналитик[СтрокаТаблицы.ВидЗапасов];
			Если ЗначениеЗаполнено(ВидЗапасов) Тогда
				СтрокаТаблицы.ВидЗапасов = ВидЗапасов;
				ЗаписыватьДокумент = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗаписыватьДокумент Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		МассивОбработанныхОбъектов.Добавить(ДокументСсылка);
		
	КонецЕсли;
	
	Если МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыНакопления.ТоварыОрганизаций) Тогда
		НаборЗаписей = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		ЗаменитьВидЗапасовВНабореЗаписей(
			ДокументСсылка,
			СоответствиеАналитик,
			НаборЗаписей,
			Ложь // ЕстьКорАналитика
		);
	КонецЕсли;
	
	Если МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыНакопления.СебестоимостьТоваров) Тогда
		НаборЗаписей = РегистрыНакопления.СебестоимостьТоваров.СоздатьНаборЗаписей();
		ЗаменитьВидЗапасовВНабореЗаписей(
			ДокументСсылка,
			СоответствиеАналитик,
			НаборЗаписей,
			Истина // ЕстьКорАналитика
		);
	КонецЕсли;
	
	Если МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж) Тогда
		НаборЗаписей = РегистрыНакопления.ВыручкаИСебестоимостьПродаж.СоздатьНаборЗаписей();
		ЗаменитьВидЗапасовВНабореЗаписей(
			ДокументСсылка,
			СоответствиеАналитик,
			НаборЗаписей,
			Ложь // ЕстьКорАналитика
		);
	КонецЕсли;
	
	Если МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту) Тогда
		НаборЗаписей = РегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту.СоздатьНаборЗаписей();
		ЗаменитьВидЗапасовВНабореЗаписей(
			ДокументСсылка,
			СоответствиеАналитик,
			НаборЗаписей,
			Ложь // ЕстьКорАналитика
		);
	КонецЕсли;
	
	Если МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыНакопления.ТоварыОрганизацийКПередаче) Тогда
		НаборЗаписей = РегистрыНакопления.ТоварыОрганизацийКПередаче.СоздатьНаборЗаписей();
		ЗаменитьВидЗапасовВНабореЗаписей(
			ДокументСсылка,
			СоответствиеАналитик,
			НаборЗаписей,
			Ложь // ЕстьКорАналитика
		);
	КонецЕсли;
	
	Если МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыНакопления.ТоварыПереданныеНаКомиссию) Тогда
		НаборЗаписей = РегистрыНакопления.ТоварыПереданныеНаКомиссию.СоздатьНаборЗаписей();
		ЗаменитьВидЗапасовВНабореЗаписей(
			ДокументСсылка,
			СоответствиеАналитик,
			НаборЗаписей,
			Ложь // ЕстьКорАналитика
		);
	КонецЕсли;
	
	Если МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыСведений.СтоимостьТоваров) Тогда
		НаборЗаписей = РегистрыСведений.СтоимостьТоваров.СоздатьНаборЗаписей();
		ЗаменитьВидЗапасовВНабореЗаписей(
			ДокументСсылка,
			СоответствиеАналитик,
			НаборЗаписей,
			Ложь // ЕстьКорАналитика
		);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьВидЗапасовВНабореЗаписей(Регистратор, СоответствиеАналитик, НаборЗаписей, ЕстьКорАналитика = Ложь)
	
	МетаданныеНабораЗаписей = НаборЗаписей.Метаданные();
	ЕстьВидЗапасов = (НаборЗаписей.Метаданные().Измерения.Найти("ВидЗапасов") <> Неопределено);
	ЕстьВидЗапасовПродавца = (НаборЗаписей.Метаданные().Измерения.Найти("ВидЗапасовПродавца") <> Неопределено);
	
	Если ЕстьВидЗапасов ИЛИ ЕстьВидЗапасовПродавца Тогда
	
		НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
		НаборЗаписей.Прочитать();
		
		ЗаписыватьНабор = Ложь;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если ЕстьВидЗапасов Тогда
				ВидЗапасов = СоответствиеАналитик[Запись.ВидЗапасов];
				Если ЗначениеЗаполнено(ВидЗапасов) Тогда
					Запись.ВидЗапасов = ВидЗапасов;
					ЗаписыватьНабор = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьВидЗапасовПродавца Тогда
				ВидЗапасов = СоответствиеАналитик[Запись.ВидЗапасовПродавца];
				Если ЗначениеЗаполнено(ВидЗапасов) Тогда
					Запись.ВидЗапасовПродавца = ВидЗапасов;
					ЗаписыватьНабор = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьКорАналитика Тогда
				КорВидЗапасов = СоответствиеАналитик[Запись.КорВидЗапасов];
				Если ЗначениеЗаполнено(КорВидЗапасов) Тогда
					Запись.КорВидЗапасов = КорВидЗапасов;
					ЗаписыватьНабор = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	
		Если ЗаписыватьНабор Тогда
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаменитьВидЗапасовВРегистреСведений(СоответствиеАналитик, КлючЗаписи, МетаданныеРегистра, МассивОбработанныхОбъектов)
	
	Если МетаданныеРегистра.Измерения.Найти("ВидЗапасов") <> Неопределено Тогда
	
		ВидЗапасов = СоответствиеАналитик[КлючЗаписи.ВидЗапасов];
		Если ЗначениеЗаполнено(ВидЗапасов) Тогда
			
			МенеджерЗаписи = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
			МенеджерЗаписи.Удалить();
			
			МенеджерЗаписи = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
			МенеджерЗаписи.ВидЗапасов = ВидЗапасов;
			МенеджерЗаписи.Прочитать();
			Если Не МенеджерЗаписи.Выбран() Тогда
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, КлючЗаписи);
				МенеджерЗаписи.ВидЗапасов = ВидЗапасов;
				МенеджерЗаписи.Записать(Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаменитьДублиКлючейАналитики() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеСправочника.Ссылка КАК Ссылка,
	|	ДанныеСправочника.ПометкаУдаления,
	|	ДанныеСправочника.Организация,
	|	ДанныеСправочника.ТипЗапасов,
	|	ДанныеСправочника.НалогообложениеНДС,
	|	ДанныеСправочника.Соглашение,
	|	ДанныеСправочника.Валюта,
	|
	|	ВЫБОР КОГДА ДанныеСправочника.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар) ТОГДА
	|		ДанныеСправочника.Комитент
	|	ИНАЧЕ
	|		ВЫБОР КОГДА ДанныеСправочника.Поставщик ССЫЛКА Справочник.Партнеры
	|			И ДанныеСправочника.Поставщик <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|		ТОГДА
	|			ДанныеСправочника.Поставщик
	|		КОГДА ДанныеСправочника.Поставщик ССЫЛКА Справочник.Организации
	|			И ДанныеСправочника.Поставщик <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ТОГДА
	|			ДанныеСправочника.Поставщик	
	|		ИНАЧЕ
	|			Неопределено
	|		КОНЕЦ
	|	КОНЕЦ КАК Поставщик,
	|
	|	ВЫБОР КОГДА ДанныеСправочника.Предназначение = ЗНАЧЕНИЕ(Перечисление.ТипыПредназначенияВидовЗапасов.ПредназначенДляСделки) ТОГДА
	|		ДанныеСправочника.Сделка
	|	КОГДА ДанныеСправочника.Предназначение = ЗНАЧЕНИЕ(Перечисление.ТипыПредназначенияВидовЗапасов.ПредназначенДляМенеджера) ТОГДА
	|		ДанныеСправочника.Менеджер
	|	КОГДА ДанныеСправочника.Предназначение = ЗНАЧЕНИЕ(Перечисление.ТипыПредназначенияВидовЗапасов.ПредназначенДляПодразделения) ТОГДА
	|		ДанныеСправочника.Подразделение
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК АналитикаПредназначения
	|
	|ПОМЕСТИТЬ СвободныеВидыЗапасов
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ДанныеСправочника
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидовЗапасов КАК ДанныеРегистра
	|	ПО
	|		ДанныеСправочника.Ссылка = ДанныеРегистра.КлючАналитики
	|ГДЕ
	|	ДанныеРегистра.КлючАналитики ЕСТЬ NULL
	|	И Не ДанныеСправочника.РеализацияЗапасовДругойОрганизации
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвободныеВидыЗапасов.Ссылка КАК Ссылка,
	|	СвободныеВидыЗапасов.ПометкаУдаления КАК ПометкаУдаления,
	|	Аналитика.КлючАналитики КАК КлючАналитики
	|ИЗ
	|	СвободныеВидыЗапасов КАК СвободныеВидыЗапасов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидовЗапасов КАК Аналитика
	|	ПО
	|		СвободныеВидыЗапасов.Организация = Аналитика.Организация
	|		И СвободныеВидыЗапасов.ТипЗапасов = Аналитика.ТипЗапасов
	|		И СвободныеВидыЗапасов.НалогообложениеНДС = Аналитика.НалогообложениеНДС
	|		И СвободныеВидыЗапасов.Поставщик = Аналитика.Поставщик
	|		И СвободныеВидыЗапасов.Соглашение = Аналитика.Соглашение
	|		И СвободныеВидыЗапасов.Валюта = Аналитика.Валюта
	|		И СвободныеВидыЗапасов.АналитикаПредназначения = Аналитика.АналитикаПредназначения
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСправочника.Ссылка КАК Ссылка,
	|	ДанныеСправочника.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеСправочника.Организация КАК ОрганизацияПродавец,
	|	ДанныеСправочника.НалогообложениеНДС КАК НалогообложениеНДС,
	|	СвободныеВидыЗапасов.Ссылка КАК ВидЗапасовВладельца
	|ИЗ
	|	СвободныеВидыЗапасов КАК СвободныеВидыЗапасов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаВидовЗапасов КАК Аналитика
	|	ПО
	|		СвободныеВидыЗапасов.Организация = Аналитика.Организация
	|		И СвободныеВидыЗапасов.ТипЗапасов = Аналитика.ТипЗапасов
	|		И СвободныеВидыЗапасов.НалогообложениеНДС = Аналитика.НалогообложениеНДС
	|		И СвободныеВидыЗапасов.Поставщик = Аналитика.Поставщик
	|		И СвободныеВидыЗапасов.Соглашение = Аналитика.Соглашение
	|		И СвободныеВидыЗапасов.Валюта = Аналитика.Валюта
	|		И СвободныеВидыЗапасов.АналитикаПредназначения = Аналитика.АналитикаПредназначения
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК ДанныеСправочника
	|	ПО
	|		СвободныеВидыЗапасов.Ссылка = ДанныеСправочника.ВидЗапасовВладельца
	|");
	
	// Сформируем соответствие ключей аналитики.
	СоответствиеАналитик = Новый Соответствие;
	МассивАналитик = Новый Массив;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	// МассивРезультатов[0] - СвободныеВидыЗапасов
	РезультатЗапросаВидыЗапасовКУдалению = МассивРезультатов[1];
	РезультатЗапросаИнтеркампани = МассивРезультатов[2];
	
	Если Не РезультатЗапросаВидыЗапасовКУдалению.Пустой() Тогда
	
		// Собственные виды запасов.
		Выборка = РезультатЗапросаВидыЗапасовКУдалению.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СоответствиеАналитик.Вставить(Выборка.Ссылка, Выборка.КлючАналитики);
			МассивАналитик.Добавить(Выборка.Ссылка);
			
			Если Не Выборка.ПометкаУдаления Тогда
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Попытка
					СправочникОбъект.УстановитьПометкуУдаления(Истина, Ложь);
				Исключение
				КонецПопытки;
			КонецЕсли;

		КонецЦикла;
		
		// Виды запасов интеркампани.
		Выборка = РезультатЗапросаИнтеркампани.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ВидЗапасовВладельца = СоответствиеАналитик[Выборка.ВидЗапасовВладельца];
			ВидЗапасов = ВидЗапасовДляПередачиМеждуОрганизациями(
				ВидЗапасовВладельца,
				Выборка.ОрганизацияПродавец,
				Выборка.НалогообложениеНДС
			);
			Если ЗначениеЗаполнено(ВидЗапасов) Тогда
				СоответствиеАналитик.Вставить(Выборка.Ссылка, ВидЗапасов);
				МассивАналитик.Добавить(Выборка.Ссылка);
			КонецЕсли;
			
			Если Не Выборка.ПометкаУдаления Тогда
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Попытка
					СправочникОбъект.УстановитьПометкуУдаления(Истина, Ложь);
				Исключение
				КонецПопытки;
			КонецЕсли;

		КонецЦикла;
	
		МассивОбработанныхОбъектов = Новый Массив;
		ТаблицаНайденныхОбъектов = НайтиПоСсылкам(МассивАналитик);
		
		Для Каждого СтрокаТаблицы Из ТаблицаНайденныхОбъектов Цикл
			
			Если МассивОбработанныхОбъектов.Найти(СтрокаТаблицы[1]) = Неопределено Тогда
			
				Если Метаданные.Документы.Найти(СтрокаТаблицы[2].Имя) <> Неопределено Тогда
					ЗаменитьВидЗапасовВДокументе(
						СоответствиеАналитик,
						СтрокаТаблицы[1], // ДокументСсылка
						СтрокаТаблицы[2], // МетаданныеДокумента
						МассивОбработанныхОбъектов
					);
				КонецЕсли;
				Если Метаданные.РегистрыСведений.Найти(СтрокаТаблицы[2].Имя) <> Неопределено Тогда
					ЗаменитьВидЗапасовВРегистреСведений(
						СоответствиеАналитик,
						СтрокаТаблицы[1], // КлючЗаписи
						СтрокаТаблицы[2], // МетаданныеРегистра
						МассивОбработанныхОбъектов
					);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочее

Функция СтруктураВидаЗапасов(Организация, ХозяйственнаяОперация, РеквизитыДокумента)
	
	СтруктураВидЗапасов = Новый Структура("
		|Организация,
		|ТипЗапасов,
		|Комитент,
		|Контрагент,
		|Соглашение,
		|Договор,
		|Валюта,
		|НалогообложениеНДС,
		|Поставщик,
		|Предназначение,
		|Менеджер,
		|Подразделение,
		|Сделка,
		|Назначение,
		|АналитикаПредназначения,
		|ГруппаФинансовогоУчета
		|"
	);
	СтруктураВидЗапасов.Организация = Организация;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
	 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту
	 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию Тогда
		СтруктураВидЗапасов.ТипЗапасов = Перечисления.ТипыЗапасов.КомиссионныйТовар;
		СтруктураВидЗапасов.Комитент = РеквизитыДокумента.Поставщик;
		СтруктураВидЗапасов.Контрагент = РеквизитыДокумента.Контрагент;
		СтруктураВидЗапасов.Соглашение = ?(ЗначениеЗаполнено(РеквизитыДокумента.Соглашение), РеквизитыДокумента.Соглашение, Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
		СтруктураВидЗапасов.Договор = ?(ЗначениеЗаполнено(РеквизитыДокумента.Договор), РеквизитыДокумента.Договор, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		СтруктураВидЗапасов.Валюта = РеквизитыДокумента.Валюта;
		СтруктураВидЗапасов.НалогообложениеНДС = РеквизитыДокумента.НалогообложениеНДС;
		СтруктураВидЗапасов.Поставщик = РеквизитыДокумента.Поставщик;
	Иначе
		СтруктураВидЗапасов.ТипЗапасов = Перечисления.ТипыЗапасов.Товар;
		СтруктураВидЗапасов.Комитент = Неопределено;
		СтруктураВидЗапасов.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		СтруктураВидЗапасов.Соглашение = Справочники.СоглашенияСПоставщиками.ПустаяСсылка();
		СтруктураВидЗапасов.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		СтруктураВидЗапасов.Валюта = Справочники.Валюты.ПустаяСсылка();
		Если РеквизитыДокумента = Неопределено
		 ИЛИ РеквизитыДокумента.НалогообложениеНДС = РеквизитыДокумента.НалогообложениеОрганизации
		 ИЛИ Не ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению") Тогда
			СтруктураВидЗапасов.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		Иначе
			СтруктураВидЗапасов.НалогообложениеНДС = РеквизитыДокумента.НалогообложениеНДС;
		КонецЕсли;
		Если РеквизитыДокумента <> Неопределено
		 И ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПоставщикам") Тогда
			СтруктураВидЗапасов.Поставщик = ?(ЗначениеЗаполнено(РеквизитыДокумента.Поставщик), РеквизитыДокумента.Поставщик, Неопределено);
		Иначе
			СтруктураВидЗапасов.Поставщик = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураВидЗапасов.Сделка = Справочники.СделкиСКлиентами.ПустаяСсылка();
	СтруктураВидЗапасов.Менеджер = Справочники.Пользователи.ПустаяСсылка();
	СтруктураВидЗапасов.Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	СтруктураВидЗапасов.Предназначение = Перечисления.ТипыПредназначенияВидовЗапасов.ПредназначениеНеОграничено;
	СтруктураВидЗапасов.АналитикаПредназначения = Неопределено;
	СтруктураВидЗапасов.ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка();
	
	Если РеквизитыДокумента <> Неопределено Тогда
		
		СтруктураВидЗапасов.ГруппаФинансовогоУчета = РеквизитыДокумента.ГруппаФинансовогоУчета;
		
		Если ЗначениеЗаполнено(РеквизитыДокумента.Назначение) Тогда
			СтруктураВидЗапасов.Назначение = РеквизитыДокумента.Назначение;
			СтруктураВидЗапасов.Предназначение = Перечисления.ТипыПредназначенияВидовЗапасов.ПредназначенДляЗаказа;
			СтруктураВидЗапасов.АналитикаПредназначения = РеквизитыДокумента.Назначение;
			
		ИначеЕсли РеквизитыДокумента.ОбособленныйУчетТоваровПоСделке
		 И ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам") Тогда
			СтруктураВидЗапасов.Сделка = РеквизитыДокумента.Сделка;
			СтруктураВидЗапасов.Предназначение = Перечисления.ТипыПредназначенияВидовЗапасов.ПредназначенДляСделки;
			СтруктураВидЗапасов.АналитикаПредназначения = РеквизитыДокумента.Сделка;
			
		ИначеЕсли РеквизитыДокумента.ВариантОбособленногоУчетаТоваров = Перечисления.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения
		 И ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам")Тогда
			СтруктураВидЗапасов.Менеджер = РеквизитыДокумента.Менеджер;
			СтруктураВидЗапасов.Предназначение = Перечисления.ТипыПредназначенияВидовЗапасов.ПредназначенДляМенеджера;
			СтруктураВидЗапасов.АналитикаПредназначения = РеквизитыДокумента.Менеджер;
			
		ИначеЕсли РеквизитыДокумента.ВариантОбособленногоУчетаТоваров = Перечисления.ВариантыОбособленногоУчетаТоваров.ПоПодразделению
		 И ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам") Тогда
			СтруктураВидЗапасов.Подразделение = РеквизитыДокумента.Подразделение;
			СтруктураВидЗапасов.Предназначение = Перечисления.ТипыПредназначенияВидовЗапасов.ПредназначенДляПодразделения;
			СтруктураВидЗапасов.АналитикаПредназначения = РеквизитыДокумента.Подразделение;
		
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат СтруктураВидЗапасов;
	
КонецФункции

Функция СоздатьКлючАналитики(ПараметрыАналитики)

	МенеджерЗаписи = РегистрыСведений.АналитикаВидовЗапасов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ПараметрыАналитики);
	Если ЗначениеЗаполнено(ПараметрыАналитики.Комитент) Тогда
		МенеджерЗаписи.Поставщик = ПараметрыАналитики.Комитент;
	КонецЕсли;
	
	СправочникОбъект = Справочники.ВидыЗапасов.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(СправочникОбъект, ПараметрыАналитики);
	СправочникОбъект.Наименование = ПолучитьНаименованиеВидаЗапасов(СправочникОбъект);
	СправочникОбъект.Записать();

	МенеджерЗаписи.КлючАналитики = СправочникОбъект.Ссылка;
	МенеджерЗаписи.Записать(Ложь);

	Возврат СправочникОбъект.Ссылка;

КонецФункции

#КонецЕсли
