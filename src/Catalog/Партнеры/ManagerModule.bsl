#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

//Заполняет регистр сведений "ABCXYZКлассификацияКлиентов" результатами ABC классификации партнеров
//
// Параметры
//  ДатаКлассификации  - Дата - дата, на которую выполняется классификация
//
Процедура ВыполнитьABCКлассификацию(ДатаКлассификации = Неопределено) Экспорт
	
	ИспользоватьКлассификациюПоВаловойПрибыли = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВаловойПрибыли");
	ИспользоватьКлассификациюПоВыручке = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВыручке");
	ИспользоватьКлассификациюПоКоличеству = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж");

	Если НЕ ИспользоватьКлассификациюПоВаловойПрибыли И НЕ ИспользоватьКлассификациюПоВыручке И НЕ ИспользоватьКлассификациюПоКоличеству Тогда

		Возврат;

	КонецЕсли;

	ПериодКлассификации = Константы.ПериодABCКлассификацииПартнеров.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовABCКлассификацииПартнеров.Получить();

	Если ПериодКлассификации.Пустая() ИЛИ КоличествоПериодовКлассификации = 0 Тогда

		Возврат;

	КонецЕсли;

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	РегистрСведенийАналитикаУчетаПоПартнерам.Партнер КАК Партнер,
		|	СУММА(ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот) - СУММА(ВыручкаИСебестоимостьПродажОбороты.СебестоимостьОборот) - СУММА(ВыручкаИСебестоимостьПродажОбороты.СуммаДополнительныхРасходовОборот) КАК ВаловаяПрибыль,
		|	СУММА(ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот) КАК Выручка,
		|	СУММА(ВЫБОР
		|			КОГДА ВыручкаИСебестоимостьПродажОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Количество
		|ИЗ
		|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(&НачалоПериода, &ОкончаниеПериода, Регистратор,(НЕ АналитикаУчетаПоПартнерам.Партнер.Предопределенный) И (НЕ АналитикаУчетаПоПартнерам.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))) КАК ВыручкаИСебестоимостьПродажОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрСведенийАналитикаУчетаПоПартнерам
		|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам = РегистрСведенийАналитикаУчетаПоПартнерам.КлючАналитики
		|СГРУППИРОВАТЬ ПО
		|	РегистрСведенийАналитикаУчетаПоПартнерам.Партнер"
	);

	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(?(ДатаКлассификации = Неопределено, ТекущаяДата(), ДатаКлассификации), ПериодКлассификации, - КоличествоПериодовКлассификации);
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Период.ДатаОкончания);

	РезультатКлассификации = Запрос.Выполнить().Выгрузить();

	Если ИспользоватьКлассификациюПоВаловойПрибыли Тогда

		Классификация.ВыполнитьABCКлассификацию(РезультатКлассификации, "ВаловаяПрибыль");
		ОбновитьДанныеКлассификации(
			РезультатКлассификации, Перечисления.ТипыКлассификации.ABC,
			Перечисления.ТипыПараметровКлассификации.ВаловаяПрибыль,
			Период.ДатаОкончания, Перечисления.ABCКлассификация.НеКлассифицирован
		);

	КонецЕсли;

	Если ИспользоватьКлассификациюПоВыручке Тогда

		Классификация.ВыполнитьABCКлассификацию(РезультатКлассификации, "Выручка");
		ОбновитьДанныеКлассификации(
			РезультатКлассификации, Перечисления.ТипыКлассификации.ABC,
			Перечисления.ТипыПараметровКлассификации.Выручка,
			Период.ДатаОкончания, Перечисления.ABCКлассификация.НеКлассифицирован
		);

	КонецЕсли;

	Если ИспользоватьКлассификациюПоКоличеству Тогда

		Классификация.ВыполнитьABCКлассификацию(РезультатКлассификации, "Количество");
		ОбновитьДанныеКлассификации(
			РезультатКлассификации, Перечисления.ТипыКлассификации.ABC,
			Перечисления.ТипыПараметровКлассификации.Количество,
			Период.ДатаОкончания, Перечисления.ABCКлассификация.НеКлассифицирован
		);

	КонецЕсли;

КонецПроцедуры

//Заполняет регистр сведений "ABCXYZКлассификацияКлиентов" результатами XYZ классификации партнеров
//
// Параметры
//  ДатаКлассификации  - Дата - дата, на которую выполняется классификация
//
Процедура ВыполнитьXYZКлассификацию(ДатаКлассификации = Неопределено) Экспорт

	ИспользоватьКлассификациюПоВаловойПрибыли = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВаловойПрибыли");
	ИспользоватьКлассификациюПоВыручке = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВыручке");
	ИспользоватьКлассификациюПоКоличеству = ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж");

	Если НЕ ИспользоватьКлассификациюПоВаловойПрибыли И НЕ ИспользоватьКлассификациюПоВыручке И НЕ ИспользоватьКлассификациюПоКоличеству Тогда

		Возврат;

	КонецЕсли;

	ПериодКлассификации = Константы.ПериодXYZКлассификацииПартнеров.Получить();
	КоличествоПериодовКлассификации = Константы.КоличествоПериодовXYZКлассификацииПартнеров.Получить();
	ПодпериодКлассификации = Константы.ПодпериодXYZКлассификацииПартнеров.Получить();

	Если ПериодКлассификации.Пустая() ИЛИ КоличествоПериодовКлассификации = 0 ИЛИ ПодпериодКлассификации.Пустая() Тогда

		Возврат;

	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	0 КАК РазделительКлассификации,
	|	РегистрСведенийАналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	НАЧАЛОПЕРИОДА(ВыручкаИСебестоимостьПродажОбороты.Период, " + Строка(ПодпериодКлассификации) + ") КАК Период,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК Выручка,
	|	ЕСТЬNULL(ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот, 0) - ЕСТЬNULL(ВыручкаИСебестоимостьПродажОбороты.СебестоимостьОборот, 0) - ЕСТЬNULL(ВыручкаИСебестоимостьПродажОбороты.СуммаДополнительныхРасходовОборот, 0) КАК ВаловаяПрибыль,
	|	ВЫБОР
	|		КОГДА ВыручкаИСебестоимостьПродажОбороты.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(НАЧАЛОПЕРИОДА(&НачалоПериода, " + Строка(ПодпериодКлассификации) + "), КОНЕЦПЕРИОДА(&ОкончаниеПериода, " + Строка(ПодпериодКлассификации) + "), Регистратор, (НЕ АналитикаУчетаПоПартнерам.Партнер.Предопределенный) И (НЕ АналитикаУчетаПоПартнерам.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))) КАК ВыручкаИСебестоимостьПродажОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрСведенийАналитикаУчетаПоПартнерам
	|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаПоПартнерам = РегистрСведенийАналитикаУчетаПоПартнерам.КлючАналитики
	|ИТОГИ
	|	МАКСИМУМ(РазделительКлассификации),
	|	СУММА(Выручка),
	|	СУММА(ВаловаяПрибыль),
	|	СУММА(Количество)
	|ПО
	|	Партнер,
	|	Период ПЕРИОДАМИ(" + Строка(ПодпериодКлассификации) + ", НАЧАЛОПЕРИОДА(&НачалоПериода, " + Строка(ПодпериодКлассификации) + "), КОНЕЦПЕРИОДА(&ОкончаниеПериода, " + Строка(ПодпериодКлассификации) + "))");

	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(?(ДатаКлассификации = Неопределено, ТекущаяДата(), ДатаКлассификации), ПериодКлассификации, - КоличествоПериодовКлассификации);
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Период.ДатаОкончания);

	ИсточникДанных = Новый Структура("ИсточникДанных", Запрос.Выполнить());

	Если ИспользоватьКлассификациюПоВаловойПрибыли Тогда

		РезультатКлассификации = Классификация.ВыполнитьXYZКлассификацию(ИсточникДанных, "ВаловаяПрибыль", "Номенклатура");
		ОбновитьДанныеКлассификации(
			РезультатКлассификации, Перечисления.ТипыКлассификации.XYZ,
			Перечисления.ТипыПараметровКлассификации.ВаловаяПрибыль,
			Период.ДатаОкончания, Перечисления.XYZКлассификация.НеКлассифицирован
		);

	КонецЕсли;

	Если ИспользоватьКлассификациюПоВыручке Тогда

		РезультатКлассификации = Классификация.ВыполнитьXYZКлассификацию(ИсточникДанных, "Выручка", "Номенклатура");
		ОбновитьДанныеКлассификации(
			РезультатКлассификации, Перечисления.ТипыКлассификации.XYZ,
			Перечисления.ТипыПараметровКлассификации.Выручка,
			Период.ДатаОкончания, Перечисления.XYZКлассификация.НеКлассифицирован
		);

	КонецЕсли;

	Если ИспользоватьКлассификациюПоКоличеству Тогда

		РезультатКлассификации = Классификация.ВыполнитьXYZКлассификацию(ИсточникДанных, "Количество", "Номенклатура");
		ОбновитьДанныеКлассификации(
			РезультатКлассификации, Перечисления.ТипыКлассификации.XYZ,
			Перечисления.ТипыПараметровКлассификации.Количество,
			Период.ДатаОкончания, Перечисления.XYZКлассификация.НеКлассифицирован
		);

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	МассивУстановленныхОтборов = Новый Массив;
	Если Параметры.Отбор.Свойство("Клиент") Тогда
		МассивУстановленныхОтборов.Добавить("Клиент");
	КонецЕсли;
	Если Параметры.Отбор.Свойство("Поставщик") Тогда
		МассивУстановленныхОтборов.Добавить("Поставщик");
	КонецЕсли;
	Если Параметры.Отбор.Свойство("Конкурент") Тогда
		МассивУстановленныхОтборов.Добавить("Конкурент");
	КонецЕсли;
	Если Параметры.Отбор.Свойство("ПрочиеОтношения") Тогда
		МассивУстановленныхОтборов.Добавить("ПрочиеОтношения");
	КонецЕсли;
	Если Параметры.Отбор.Свойство("ОбслуживаетсяТорговымиПредставителями") Тогда
		МассивУстановленныхОтборов.Добавить("ОбслуживаетсяТорговымиПредставителями");
	КонецЕсли;
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	Если МассивУстановленныхОтборов.Количество() > 0 ИЛИ ИспользоватьПартнеровКакКонтрагентов Тогда
		
		Запрос = Новый Запрос;
		
		УстанавливатьОтборПоТипуПартнераКакИЛИ = Ложь;
		
		Если Параметры.Свойство("УстанавливатьОтборПоТипуПартнераКакИЛИ") И Параметры.УстанавливатьОтборПоТипуПартнераКакИЛИ Тогда
			УстанавливатьОтборПоТипуПартнераКакИЛИ = Истина;
		КонецЕсли;
		
		СтандартнаяОбработка = ЛОЖЬ;
		СтрокаОтбора = "";
		СтрокаУсловия = ?(УстанавливатьОтборПоТипуПартнераКакИЛИ," ИЛИ "," И ");
		
		Для каждого ЭлементМассива Из МассивУстановленныхОтборов Цикл
		
			СтрокаОтбора = СтрокаОтбора + СтрокаУсловия + "Партнеры." + ЭлементМассива; 
		
		КонецЦикла;
		
		СтрокаОтбора = Прав(СтрокаОтбора,СтрДлина(СтрокаОтбора) - ?(УстанавливатьОтборПоТипуПартнераКакИЛИ,4,2));
		СтрокаОтбора = ?(ПустаяСтрока(СтрокаОтбора),""," И (" + СтрокаОтбора + ")");
		
		Если Параметры.Отбор.Свойство("БизнесРегион") Тогда
			СтрокаОтбора = " И Партнеры.БизнесРегион = &БизнесРегион";
			Запрос.УстановитьПараметр("БизнесРегион", Параметры.Отбор.БизнесРегион);
		КонецЕсли;
		
		Если ИспользоватьПартнеровКакКонтрагентов Тогда
			СтрокаОтбора = СтрокаОтбора + " И (НЕ Партнеры.Ссылка = Значение(Справочник.Партнеры.НашеПредприятие)) ";
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
			 СтрокаОтбора = СтрокаОтбора + " И (НЕ Партнеры.Ссылка = Значение(Справочник.Партнеры.НеизвестныйПартнер)) ";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СтрокаВвода",Параметры.СтрокаПоиска + "%" );
		
		Если ИспользоватьПартнеровКакКонтрагентов Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Партнеры.Ссылка КАК Партнер,
			|	ПРЕДСТАВЛЕНИЕ(Партнеры.Ссылка) КАК Представление,
			|	Партнеры.ПометкаУдаления КАК ПометкаУдаления,
			|	"""" КАК ИНН,
			|	""Найдено по наименованию"" КАК НайденоПо
			|ИЗ
			|	Справочник.Партнеры КАК Партнеры
			|ГДЕ
			|	Партнеры.Наименование ПОДОБНО &СтрокаВвода " + СтрокаОтбора + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Партнеры.Ссылка,
			|	ПРЕДСТАВЛЕНИЕ(Партнеры.Ссылка),
			|	Партнеры.ПометкаУдаления,
			|	Контрагенты.ИНН КАК ИНН,
			|	""Найдено по ИНН""
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
			|		ПО Контрагенты.Партнер = Партнеры.Ссылка
			|ГДЕ
			|	Контрагенты.ИНН ПОДОБНО &СтрокаВвода " + СтрокаОтбора;
			
			Выборка = Запрос.Выполнить().Выбрать();
			ДанныеВыбора = Новый СписокЗначений;
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.НайденоПо = "Найдено по наименованию" Тогда
					ТекстПредставление = Выборка.Представление;
				Иначе
					ТекстПредставление = Выборка.ИНН + " (" +Выборка.Представление + ")";
				КонецЕсли;
				
				Если Выборка.ПометкаУдаления Тогда
					СтруктураЗначение = Новый Структура("Значение,ПометкаУдаления", Выборка.Партнер, Выборка.ПометкаУдаления);
					ДанныеВыбора.Добавить(СтруктураЗначение,ТекстПредставление,, БиблиотекаКартинок.ПомеченныйНаУдалениеЭлемент);
				Иначе
					ДанныеВыбора.Добавить(Выборка.Партнер, ТекстПредставление);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Партнеры.Ссылка КАК Партнер,
			|	ПРЕДСТАВЛЕНИЕ(Партнеры.Ссылка) КАК Представление,
			|	Партнеры.ПометкаУдаления КАК ПометкаУдаления
			|ИЗ
			|	Справочник.Партнеры КАК Партнеры
			|ГДЕ
			|	Партнеры.Наименование ПОДОБНО &СтрокаВвода 
			|" + СтрокаОтбора + "
			|Упорядочить ПО ПометкаУдаления";
			
			Запрос.УстановитьПараметр("СтрокаВвода",Параметры.СтрокаПоиска + "%" );
			
			ДанныеВыбора = Новый СписокЗначений;
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ПометкаУдаления Тогда
					СтруктураЗначение = Новый Структура("Значение,ПометкаУдаления", Выборка.Партнер, Выборка.ПометкаУдаления);
					ДанныеВыбора.Добавить(СтруктураЗначение, Выборка.Представление,, БиблиотекаКартинок.ПомеченныйНаУдалениеЭлемент);
				Иначе
					ДанныеВыбора.Добавить(Выборка.Партнер, Выборка.Представление);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" И ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		
		ВыбраннаяФорма = "ФормаЭлементаРеквизитыКонтрагента";
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Заполняет предопределенные элементы справочника "Партнеры".
//
Процедура ЗаполнитьПредопределенныхПартнеров() Экспорт
	
	СправочникОбъект = Справочники.Партнеры.НашеПредприятие.ПолучитьОбъект();
	СправочникОбъект.ДатаРегистрации = Дата(1980, 1, 1);
	СправочникОбъект.НаименованиеПолное = НСтр("ru = 'Наше предприятие'");
	СправочникОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	Попытка
		СправочникОбъект.Записать();
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
			Контрагент.Наименование = СправочникОбъект.Наименование;
			Контрагент.НаименованиеПолное = СправочникОбъект.НаименованиеПолное;
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
			Контрагент.Партнер = СправочникОбъект.Ссылка;
			Контрагент.Записать();
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	СправочникОбъект = Справочники.Партнеры.РозничныйПокупатель.ПолучитьОбъект();
	СправочникОбъект.Клиент = Истина;
	СправочникОбъект.ДатаРегистрации = Дата(1980, 1, 1);
	СправочникОбъект.НаименованиеПолное = НСтр("ru = 'Розничный покупатель'");
	СправочникОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	Попытка
		СправочникОбъект.Записать();
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
			Контрагент.Наименование = СправочникОбъект.Наименование;
			Контрагент.НаименованиеПолное = СправочникОбъект.НаименованиеПолное;
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
			Контрагент.Партнер = СправочникОбъект.Ссылка;
			Контрагент.Записать();
		КонецЕсли
	Исключение
	КонецПопытки;
	
	СправочникОбъект = Справочники.Партнеры.НеизвестныйПартнер.ПолучитьОбъект();
	СправочникОбъект.Клиент = Истина;
	СправочникОбъект.Поставщик = Истина;
	СправочникОбъект.ПрочиеОтношения = Истина;
	СправочникОбъект.ДатаРегистрации = Дата(1980, 1, 1);
	СправочникОбъект.НаименованиеПолное = НСтр("ru = 'Неизвестный партнер'");
	СправочникОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	Попытка
		СправочникОбъект.Записать();
	Исключение
	КонецПопытки;
	
	
	
КонецПроцедуры

//Устанавливает значение констант ИспользоватьПартнеровИКонтрагентов и ИспользоватьПартнеровКакКонтрагентов
// в зависимости от наличия в ИБ партнеров, к которым привязано более чем один контрагент.
Процедура УстановитьЗначениеКонстантИспользованиеПартнеровИКонтрагентов() Экспорт
	
	ИспользоватьПартнеровИКонтрагентов = Константы.ИспользоватьПартнеровИКонтрагентов.Получить();
	Если НЕ ИспользоватьПартнеровИКонтрагентов Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Партнеры.Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) КАК КоличествоКонтрагентов
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
		|		ПО Контрагенты.Партнер = Партнеры.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Партнеры.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) > 1
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Партнеры.Ссылка,
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО (Контрагенты.Партнер = Партнеры.Ссылка)
		|ГДЕ
		|	Контрагенты.Ссылка ЕСТЬ NULL ";
		
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Константы.ИспользоватьПартнеровИКонтрагентов.Установить(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Константы.ИспользоватьПартнеровКакКонтрагентов.Установить(Не Константы.ИспользоватьПартнеровИКонтрагентов.Получить());
	
КонецПроцедуры

//Устанавливает значение значение юр.физ лицо в зависимости от значения юр.физ.лицо у контрагента партнера
Процедура УстановитьЗначениеРеквизитаЮрФизЛицо() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Партнеры.Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) КАК Количество
	|ПОМЕСТИТЬ ПартнерыКоличествоКонтрагентов
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Контрагенты.Партнер = Партнеры.Ссылка)
	|ГДЕ
	|	Партнеры.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Партнеры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыКоличествоКонтрагентов.Ссылка КАК Партнер,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.Компания)
	|	КОНЕЦ КАК ЮрФизЛицо
	|ИЗ
	|	ПартнерыКоличествоКонтрагентов КАК ПартнерыКоличествоКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ПартнерыКоличествоКонтрагентов.Ссылка = Контрагенты.Партнер
	|ГДЕ
	|	ПартнерыКоличествоКонтрагентов.Количество = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПартнерыКоличествоКонтрагентов.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.КомпанияЧастноеЛицо.Компания)
	|ИЗ
	|	ПартнерыКоличествоКонтрагентов КАК ПартнерыКоличествоКонтрагентов
	|ГДЕ
	|	ПартнерыКоличествоКонтрагентов.Количество <> 1";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		ПартнерОбъект = Выборка.Партнер.ПолучитьОбъект();
		ПартнерОбъект.ЮрФизЛицо = Выборка.ЮрФизЛицо;
		ПартнерОбъект.Записать();
	
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ОбновитьДанныеКлассификации(РезультатКлассификации, ТипКлассификации, ТипПараметраКлассификации, ПериодКлассификации, НеКлассифицирован)

	Если РезультатКлассификации.Колонки.Найти("Период") = Неопределено Тогда

		РезультатКлассификации.Колонки.Добавить("Период");

	КонецЕсли;

	Если РезультатКлассификации.Колонки.Найти("ТипПараметраКлассификации") = Неопределено Тогда

		РезультатКлассификации.Колонки.Добавить("ТипПараметраКлассификации");

	КонецЕсли;

	Если РезультатКлассификации.Колонки.Найти("ТипКлассификации") = Неопределено Тогда

		РезультатКлассификации.Колонки.Добавить("ТипКлассификации");

	КонецЕсли;

	РезультатКлассификации.ЗаполнитьЗначения(ПериодКлассификации, "Период");
	РезультатКлассификации.ЗаполнитьЗначения(ТипПараметраКлассификации, "ТипПараметраКлассификации");
	РезультатКлассификации.ЗаполнитьЗначения(ТипКлассификации, "ТипКлассификации");

	НаборЗаписей = РегистрыСведений.ABCXYZКлассификацияКлиентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ПериодКлассификации);
	НаборЗаписей.Отбор.ТипКлассификации.Установить(ТипКлассификации);
	НаборЗаписей.Отбор.ТипПараметраКлассификации.Установить(ТипПараметраКлассификации);

	НаборЗаписей.Загрузить(РезультатКлассификации);
	НаборЗаписей.Записать(Истина);

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(&ПериодКлассификации, ДЕНЬ) КАК Период,
		|	ABCXYZКлассификацияКлиентовСрезПоследних.Партнер КАК Партнер,
		|	ABCXYZКлассификацияКлиентовСрезПоследних.ТипПараметраКлассификации КАК ТипПараметраКлассификации,
		|	ABCXYZКлассификацияКлиентовСрезПоследних.ТипКлассификации КАК ТипКлассификации,
		|	&НеКлассифицирован КАК Класс,
		|	0 КАК ЗначениеПараметраКлассификации
		|ИЗ
		|	РегистрСведений.ABCXYZКлассификацияКлиентов.СрезПоследних(
		|			ДОБАВИТЬКДАТЕ(&ПериодКлассификации, СЕКУНДА, -1),
		|			(НЕ Партнер В
		|						(ВЫБРАТЬ
		|							ABCXYZКлассификацияКлиентов.Партнер КАК Партнер
		|						ИЗ
		|							РегистрСведений.ABCXYZКлассификацияКлиентов КАК ABCXYZКлассификацияКлиентов
		|						ГДЕ
		|							ABCXYZКлассификацияКлиентов.Период = НАЧАЛОПЕРИОДА(&ПериодКлассификации, ДЕНЬ)
		|							И ABCXYZКлассификацияКлиентов.ТипПараметраКлассификации = &ТипПараметраКлассификации
		|							И ABCXYZКлассификацияКлиентов.ТипКлассификации = &ТипКлассификации))
		|				И ТипПараметраКлассификации = &ТипПараметраКлассификации
		|				И ТипКлассификации = &ТипКлассификации) КАК ABCXYZКлассификацияКлиентовСрезПоследних"
	);

	Запрос.УстановитьПараметр("ПериодКлассификации", ПериодКлассификации);
	Запрос.УстановитьПараметр("ТипКлассификации", ТипКлассификации);
	Запрос.УстановитьПараметр("ТипПараметраКлассификации", ТипПараметраКлассификации);
	Запрос.УстановитьПараметр("НеКлассифицирован", НеКлассифицирован);

	РезультатЗапроса = Запрос.Выполнить();

	Если НЕ РезультатЗапроса.Пустой() Тогда

		НаборЗаписей.Загрузить(РезультатЗапроса.Выгрузить());
		НаборЗаписей.Записать(Ложь);

	КонецЕсли;

КонецПроцедуры


#КонецЕсли