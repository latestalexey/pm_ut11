
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УпрощенныйВводДоступен      = ПартнерыИКонтрагенты.УпрощенныйВводДоступен();
	ИспользоватьБизнесРегионы   = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесРегионы");
	ФиксироватьПервичныйИнтерес = ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес");
	ИспользуютсяТолькоПартнеры  = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	Элементы.СтраницыПомощника.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыКомпанияЧастноеЛицо.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыПодвал.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыБудетСоздан.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	ОткрытьПослеСоздания = Истина;
	
	ОсновнойМенеджер = Пользователи.ТекущийПользователь();
	
	ЕстьПравоВключенияВСегмент = СегментыСервер.ЕстьПравоИзмененияСоставаСегментов("Партнеры");
	Элементы.Сегмент.Видимость = ЕстьПравоВключенияВСегмент;
	
	Если Параметры.Свойство("СписокОтборПоТипуПартнера") Тогда
		
		Для каждого ЭлементСписка Из Параметры.СписокОтборПоТипуПартнера Цикл
			ЭтаФорма[ЭлементСписка.Значение] = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбслуживаетсяТорговымиПредставителями Тогда
		Клиент = Истина;
	КонецЕсли;
	
	Если Перевозчик Тогда
		Поставщик = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура") И 
		Параметры.Основание.Свойство("Наименование") Тогда
		
		ПолноеНаименование = Параметры.Основание.Наименование;
		
	ИначеЕсли Параметры.Свойство("КонтрагентОснование") И ТипЗнч(Параметры.КонтрагентОснование) = Тип("Структура") Тогда
		
		ЗаполнитьНаОснованииКонтрагента(Параметры.КонтрагентОснование,Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		
	ИначеЕсли Параметры.Свойство("ВводНовогоРозничногоПокупателя") И Параметры.ВводНовогоРозничногоПокупателя Тогда
		
		ПриСозданииНовогоРозничногоПокупателя();
		
	КонецЕсли;
	
	//учесть возможность создания из взаимодействия
	Взаимодействия.ПодготовитьОповещения(ЭтаФорма,Параметры,Ложь);
	
	ОбработатьЭлементыРедактированияКонтактнойИнформации();
	
	Если ЗначениеЗаполнено(Параметры.СсылкаНаФайл) Тогда
		ЕстьОшибкаЧтенияФайла = Ложь;
		РазобратьФайлНаСервере(Параметры.СсылкаНаФайл, ЕстьОшибкаЧтенияФайла);
	КонецЕсли;
	
	//группы доступа
	УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(ЭтаФорма, "ГруппаДоступа",, Тип("СправочникСсылка.Партнеры"), Истина);
	ИспользуютсяГруппыДоступаПартнеров = Справочники.ГруппыДоступаПартнеров.ИспользуютсяГруппыДоступа();
	Если Не ИспользуютсяГруппыДоступаПартнеров Тогда
		Элементы.ГруппаДоступаЧастноеЛицо.Видимость = Ложь;
	КонецЕсли;
	
	//ИспользуютсяТолькоПартнеры
	Если ИспользуютсяТолькоПартнеры Тогда
	
		УказыватьЮридическиеРеквизиты = Истина;
		Элементы.СтраницыУказыватьЮрРеквизитыКонтрагентОснование.Видимость = Ложь;
		Элементы.СтраницыУказыватьСоздаватьКонтрагентаОснование.Видимость  = Ложь;
		Элементы.РабочееНаименованиеЧастноеЛицо.Видимость                  = Ложь;
		Элементы.СокрЮрНаименованиеКонтрагента.Видимость                   = Ложь;
		Элементы.УказатьБанковскийСчетКонтрагента.Заголовок                = НСтр("ru = 'Указать данные банковского счета.'");
		Элементы.СтраницыНаименованиеПартнера.ТекущаяСтраница = Элементы.СтраницаСокрЮрНаименование;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНовогоРозничногоПокупателя()
	
	НаОснованииДанныхРозничногоПокупателя = Истина;
	ЭтоКомпания = 1;
	Клиент = Истина;
	
	Элементы.ЭтоКомпания.Видимость = Ложь;
	Элементы.ДекорацияПервичнаяИнформацияЗагрузить.Видимость = Ложь;
	Элементы.СтраницыБудетСоздан.ТекущаяСтраница = Элементы.СтраницаБудетСозданПартнер;
	Элементы.ГруппаТипОтношений.Видимость = Ложь;
	Элементы.ГруппаЧастноеЛицоКонтрагент.Видимость =Ложь;
	Заголовок = НСтр("ru = 'Помощник регистрации нового розничного покупателя'");
	Элементы.ДекорацияФинальная.Заголовок = НСтр("ru = 'Проверьте введенные сведения, и нажмите кнопку ""Создать""  для регистрации нового розничного покупателя.'");
	Элементы.ОткрытьПослеСоздания.Заголовок = НСтр("   ");
	Элементы.ДействиеПоРезультатамНайдено.СписокВыбора[0].Представление = НСтр("ru = 'Не регистрировать нового розничного покупателя, использовать найденного'");
	Элементы.ДействиеПоРезультатамНайдено.СписокВыбора[1].Представление = НСтр("ru = 'Продолжить регистрацию розничного покупателя и подчинить найденному'");
	Элементы.ДействиеПоРезультатамНайдено.СписокВыбора[2].Представление = НСтр("ru = 'Продолжить регистрацию нового розничного покупателя'");
	Элементы.ОткрытьПослеСоздания.Заголовок = НСтр("ru = 'Открыть форму вновь созданного розничного покупателя для указания дополнительной информации.'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЕстьОшибкаЧтенияФайла Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Неверный формат файла'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	УправлениеСтраницамиПодвал();
	ВидимостьСтраницПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если СозданиеВыполнено Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимостьВопроса = Ложь;
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНайдено И ДействиеПоРезультатамНайдено = 0 Тогда
		НеобходимостьВопроса = Ложь;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница <> Элементы.СтраницаПервичнаяИнформация Тогда
		НеобходимостьВопроса = Истина;
	Иначе
		Если ЭтоКомпания = 0 Тогда
			Если ЗначениеЗаполнено(Название) Или ЗначениеЗаполнено(ТелефонПартнера) Или ЗначениеЗаполнено(АдресЭППартнера) Тогда
				НеобходимостьВопроса = Истина;
			ИначеЕсли УказыватьЮридическиеРеквизиты И ВидКомпании = 0 Тогда
				Если ЗначениеЗаполнено(НаименованиеКонтрагента) ИЛИ	ЗначениеЗаполнено(ИНН) ИЛИ ЗначениеЗаполнено(КПП) ИЛИ ЗначениеЗаполнено(КодПоОКПО) Тогда
					НеобходимостьВопроса = Истина;
				КонецЕсли;
			ИначеЕсли УказыватьЮридическиеРеквизиты И ВидКомпании = 1 Тогда
				Если ЗначениеЗаполнено(НаименованиеКонтрагента) Тогда
					НеобходимостьВопроса = Истина;
				КонецЕсли
			ИначеЕсли УказыватьЮридическиеРеквизиты И ВидКомпании = 2 Тогда
				Если ЗначениеЗаполнено(ИНН) ИЛИ ЗначениеЗаполнено(КодПоОКПО) Тогда
					НеобходимостьВопроса = Истина;
				КонецЕсли;
			ИначеЕсли УказатьДанныеКонтактногоЛица И (ЗначениеЗаполнено(ФамилияКЛ) ИЛИ ЗначениеЗаполнено(ИмяКЛ) ИЛИ ЗначениеЗаполнено(ОтчествоКЛ) ИЛИ
				ЗначениеЗаполнено(ТелефонКЛ) ИЛИ ЗначениеЗаполнено(АдресЭПКЛ) ИЛИ ЗначениеЗаполнено(МобильныйТелефонКЛ) ИЛИ
				ЗначениеЗаполнено(Роль)) Тогда
				НеобходимостьВопроса = Истина;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ФамилияПартнера) ИЛИ ЗначениеЗаполнено(ИмяПартнера) ИЛИ ЗначениеЗаполнено(ОтчествоПартнера) ИЛИ
				ЗначениеЗаполнено(АдресЭППартнераФизЛицо) ИЛИ ЗначениеЗаполнено(ТелефонПартнераФизЛицо) ИЛИ ЗначениеЗаполнено(ИННПартнерФизЛицо) Тогда
				НеобходимостьВопроса = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НеобходимостьВопроса Тогда
		Ответ = Вопрос(НСтр("ru='При закрытии формы введенная в нее информация будет утеряна. Закрыть?'"),РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура АдресЭПКЛПриИзменении(Элемент)
	ОтключитьОтметкуНезаполненного();
КонецПроцедуры

&НаКлиенте
Процедура УказатьБанковскийСчетКонтрагентаПриИзменении(Элемент)
	
	УправлениеДоступностьюРасчетныйСчет();
	
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(НомерСчета) Тогда
		НомерСчетаПриИзмененииСервер();
	КонецЕсли;

	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуетсяБанкДляРасчетовПриИзменении(Элемент)
	
	УправлениеДоступностьюРасчетныйСчет();
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаПриИзменении(Элемент)
	
	СписокБанков = ПолучитьСписокБанковПоРеквизитам(
		Элемент.Имя,
		БИКБанка,
		Банк,
		БИКБанка,
		КоррСчетБанка
	);
	ФинансыКлиент.ПолучитьБанкПоРеквизитам(
		ЭтаФорма,
		Элемент,
		БИКБанка,
		СписокБанков,
		Банк
	);
	Если ЗначениеЗаполнено(Банк) Тогда
		ЗаполнитьБИКиКоррСчет(
			Банк,
			БИКБанка,
			КоррСчетБанка
		);
	КонецЕсли;
	
	ПредставлениеБанка = ПредставлениеБанка(Банк);
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФорму(
		"Справочник.КлассификаторБанковРФ.ФормаВыбора", 
		, // Параметры
		Элемент // Владелец
	);
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийБанк = Банк;

	ЗаполнитьБИКиКоррСчет(
		ВыбранноеЗначение,
		БИКБанка,
		КоррСчетБанка
	);
	Банк = ВыбранноеЗначение;
	
	Если Банк <> ТекущийБанк Тогда
		ПредставлениеБанка = ПредставлениеБанка(Банк);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовПриИзменении(Элемент)
	
	СписокБанков = ПолучитьСписокБанковПоРеквизитам(
		Элемент.Имя,
		КоррСчетБанкаДляРасчетов,
		БанкДляРасчетов,
		БИКБанкаДляРасчетов,
		КоррСчетБанкаДляРасчетов
	);
	ФинансыКлиент.ПолучитьБанкПоРеквизитам(
		ЭтаФорма,
		Элемент,
		КоррСчетБанкаДляРасчетов,
		СписокБанков,
		БанкДляРасчетов
	);
	Если ЗначениеЗаполнено(БанкДляРасчетов) Тогда
		ЗаполнитьБИКиКоррСчет(
			БанкДляРасчетов,
			БИКБанкаДляРасчетов,
			КоррСчетБанкаДляРасчетов
		);
	КонецЕсли;
	
	ПредставлениеБанка = ПредставлениеБанка(Банк);
	
	//ФинансыКлиент.ПолучитьБанкПоРеквизитам(
	//	ЭтаФорма,
	//	Элемент,
	//	БИКБанкаДляРасчетов,
	//	БанкДляРасчетов,
	//	БИКБанкаДляРасчетов,
	//	КоррСчетБанкаДляРасчетов
	//);
	//
	//ПредставлениеБанкаДляРасчетов = ПредставлениеБанка(БанкДляРасчетов);
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФорму(
		"Справочник.КлассификаторБанковРФ.ФормаВыбора", 
		, // Параметры
		Элемент // Владелец
	);
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаДляРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийБанкДляРасчетов = БанкДляРасчетов;
	
	ЗаполнитьБИКиКоррСчет(
		ВыбранноеЗначение,
		БИКБанкаДляРасчетов,
		КоррСчетБанкаДляРасчетов
	);
	БанкДляРасчетов = ВыбранноеЗначение;
	
	Если БанкДляРасчетов <> ТекущийБанкДляРасчетов Тогда
		ПредставлениеБанкаДляРасчетов = ПредставлениеБанка(БанкДляРасчетов);
	КонецЕсли;
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.Имя = "Банк" И ЗначениеЗаполнено(Банк) Тогда
		ОткрытьЗначение(Банк);
	ИначеЕсли Элемент.Имя = "БанкДляРасчетов" И ЗначениеЗаполнено(БанкДляРасчетов) Тогда
		ОткрытьЗначение(БанкДляРасчетов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоррСчетБанкаПриИзменении(Элемент)
	
	СписокБанков = ПолучитьСписокБанковПоРеквизитам(
		Элемент.Имя,
		КоррСчетБанка,
		Банк,
		БИКБанка,
		КоррСчетБанка
	);
	ФинансыКлиент.ПолучитьБанкПоРеквизитам(
		ЭтаФорма,
		Элемент,
		КоррСчетБанка,
		СписокБанков,
		Банк
	);
	Если ЗначениеЗаполнено(Банк) Тогда
		ЗаполнитьБИКиКоррСчет(
			Банк,
			БИКБанка,
			КоррСчетБанка
		);
	КонецЕсли;
	
	ПредставлениеБанка = ПредставлениеБанка(Банк);
	
КонецПроцедуры

&НаКлиенте
Процедура КоррСчетБанкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ЗаполнитьБИКиКоррСчет(
		ВыбранноеЗначение,
		БИКБанка,
		КоррСчетБанка
	);
	Банк = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКЛНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораТелефонаИОбработатьРезультат(	ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"),
													"ТелефонКЛ",
													"ТелефонКЛЗначенияПолей");
	
КонецПроцедуры

&НаКлиенте
Процедура МобильныйТелефонКЛНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 	
	ОткрытьФормуВыбораТелефонаИОбработатьРезультат(	ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица"),
													"МобильныйТелефонКЛ",
													"МобильныйТелефонКЛЗначенияПолей");
	
 КонецПроцедуры   

&НаКлиенте
Процедура ТелефонПартнераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораТелефонаИОбработатьРезультат(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
	                                               "ТелефонПартнера",
	                                               "ТелефонПартнераЗначенияПолей");

КонецПроцедуры

&НаКлиенте
Процедура ТелефонПартнераПриИзменении(Элемент)
	
	ЗаполнитьПоляВЗаписиПоПредставлениюТелефона(ТелефонПартнера, ТелефонПартнераЗначенияПолей);
	Если НЕ КорректноВведенНомерТелефона(ТелефонПартнераЗначенияПолей) Тогда
		  ОткрытьФормуВыбораТелефонаИОбработатьРезультат(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
													"ТелефонПартнера",
													"ТелефонПартнераЗначенияПолей",
													НСтр("ru='Уточните номер телефона.'"));
	Иначе
		ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МобильныйТелефонКЛПриИзменении(Элемент)
	
	ЗаполнитьПоляВЗаписиПоПредставлениюТелефона(МобильныйТелефонКЛ, МобильныйТелефонКЛЗначенияПолей);
	Если НЕ КорректноВведенНомерТелефона(МобильныйТелефонКЛЗначенияПолей) Тогда
		ОткрытьФормуВыбораТелефонаИОбработатьРезультат(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица"),
		"МобильныйТелефонКЛ",
		"МобильныйТелефонКЛЗначенияПолей",
		НСтр("ru='Уточните номер телефона.'"));
	Иначе
													ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКЛПриИзменении(Элемент)
	
	ЗаполнитьПоляВЗаписиПоПредставлениюТелефона(ТелефонКЛ, ТелефонКЛЗначенияПолей);
	Если НЕ КорректноВведенНомерТелефона(ТелефонКЛЗначенияПолей) Тогда
		ОткрытьФормуВыбораТелефонаИОбработатьРезультат(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"),
		"ТелефонКЛ",
		"ТелефонКЛЗначенияПолей",
		НСтр("ru='Уточните номер телефона.'"));
	Иначе
		ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПартнераФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораТелефонаИОбработатьРезультат(	ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
													"ТелефонПартнераФизЛицо",
													"ТелефонПартнераФизЛицоЗначенияПолей");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПартнераФизЛицоПриИзменении(Элемент)
	
	ЗаполнитьПоляВЗаписиПоПредставлениюТелефона(ТелефонПартнераФизЛицо, ТелефонПартнераФизЛицоЗначенияПолей);
	Если НЕ КорректноВведенНомерТелефона(ТелефонПартнераФизЛицоЗначенияПолей) Тогда
			ОткрытьФормуВыбораТелефонаИОбработатьРезультат(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
														 "ТелефонПартнераФизЛицо",
														 "ТелефонПартнераФизЛицоЗначенияПолей",
														 НСтр("ru='Уточните номер телефона.'"));
	КонецЕсли;
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоКомпанияПриИзменении(Элемент)
	
	ВидимостьСтраницПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура СокрЮрНаименованиеКонтрагентаПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.СокрЮрНаименованиеПриИзменении(НаименованиеКонтрагента, ПолноеЮридическоеНаименование);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПубличноеНаименованиеПриИзменении(Элемент)
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНайденоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОткрытьНайдено();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПоРезультатамНайденоПриИзменении(Элемент)
	
	УправлениеСтраницамиПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораАдресаИОбработатьРезультат(Элемент,
												ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента"),
												"ФактическийАдрес",
												"ФактическийАдресЗначенияПолей");
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресЧастноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораАдресаИОбработатьРезультат(Элемент,
												ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента"),
												"ФактическийАдрес",
												"ФактическийАдресЗначенияПолей");
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораАдресаИОбработатьРезультат(Элемент,
	                                             ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента"),
	                                             "ЮридическийАдрес",
	                                             "ЮридическийАдресЗначенияПолей");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКомпанииПриИзменении(Элемент)
	
	ВидимостьСтраницПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура УказыватьЮридическиеРеквизитыЧастноеЛицоПриИзменении(Элемент)
	
	ВидимостьСтраницПервичнаяИнформация();
	УправлениеДоступностьюПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура УказыватьЮридическиеРеквизитыПриИзменении(Элемент)
	
	ВидимостьСтраницПервичнаяИнформация();
	УправлениеДоступностьюПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьДанныеКонтактногоЛицаПриИзменении(Элемент)
	
	УправлениеДоступностьюПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНайденоПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборТаблицаРасшифровкиНайдено();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасшифровкаНайденоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаРасшифровкаНайдено.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьЗначение(ТекущиеДанные.НайденоПоСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	
	УправлениеДоступностьюДополнительныеСведения();
	Если НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		ИсточникПервичногоИнтереса = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагПризнакПартнераПриИзменении(Элемент)
	
	УправлениеДоступностьюДополнительныеСведения();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДоступаПриИзменении(Элемент)
	ОтключитьОтметкуНезаполненного(); 
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПервичнаяИнформацияЗагрузитьНажатие(Элемент)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Текст = "ru = ""XML файл""; en = ""XML file""";
	Фильтр = НСтр(Текст)+"(*.xml)|*.xml";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
		Если МассивФайлов.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		ФайлЗагрузки = МассивФайлов[0];
		ДвоичныеДанные  = Новый ДвоичныеДанные(ФайлЗагрузки);
		СсылкаНаФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		ЕстьОшибкаЧтенияФайла = Ложь;
		РазобратьФайлНаСервере (СсылкаНаФайл, ЕстьОшибкаЧтенияФайла);
		Если ЕстьОшибкаЧтенияФайла Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Неверный формат файла'"));
			Возврат;
		КонецЕсли;
		ЭтоКомпания = 0;
		ВидимостьСтраницПервичнаяИнформация();
		УправлениеДоступностьюПервичнаяИнформация();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭППартнераПриИзменении(Элемент)
	ОтключитьОтметкуНезаполненного();
КонецПроцедуры

&НаКлиенте
Процедура БизнесРегионПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(БизнесРегион) Тогда
			ОсновнойМенеджерБизнесРегиона = ПартнерыИКонтрагентыВызовСервера.ОсновнойМенеджерБизнесРегиона(БизнесРегион);
			Если ЗначениеЗаполнено(ОсновнойМенеджерБизнесРегиона) И ОсновнойМенеджерБизнесРегиона <> ОсновнойМенеджер Тогда
				
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для выбранного бизнес-региона основным менеджером является %1. Установить его основным менеджером партнера?'"),ОсновнойМенеджерБизнесРегиона);
				Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
				Если Результат = КодВозвратаДиалога.Да Тогда
					
					ОсновнойМенеджер = ОсновнойМенеджерБизнесРегиона;
					
				КонецЕсли;
				
			КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	УстановитьДоступностьКомандыЗаполнитьИНН();
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияКЛПриИзменении(Элемент)
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКЛПриИзменении(Элемент)
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура СокрЮридическоеНаименованиеТолькоПартнерыПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.СокрЮрНаименованиеПриИзменении(ПолноеНаименование, ПолноеЮридическоеНаименование);
	Название = ПолноеНаименование;
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьДокументУдостоверяющийЛичностьПриИзменении(Элемент)
	
	УправлениеДоступностьюПервичнаяИнформация();
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Далее(Команда)
	
	ВыполнитьПереходПоСтраницам(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ВыполнитьПереходПоСтраницам(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЮридическийАдресРавнымФактическому(Команда)
	
	ЮридическийАдрес = ФактическийАдрес;
	ЮридическийАдресЗначенияПолей = ФактическийАдресЗначенияПолей.Скопировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКПП(Команда)
	
	ПартнерыИКонтрагентыКлиент.ЗаполнитьКППпоИНН(ИНН, КПП, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Формирование итоговой информации

&НаСервере
Процедура ЗаполнитьИтоговуюИнформацию()
	
	ИтоговаяИнформация = Справочники.Партнеры.ПолучитьМакет("Макет").ПолучитьТекст();
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ЗаголовокНаименованиеПартнера#", ?(ИспользуютсяТолькоПартнеры,НСтр("ru = 'Сокращенное юр. наименование'"), НСтр("ru = 'Публичное наименование'")));
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#НаименованиеПартнера#", ?(ЭтоКомпания = 0, ?(ИспользуютсяТолькоПартнеры,ПолноеЮридическоеНаименование,ПолноеНаименование), ФИО_ОднойСтрокой(ФамилияПартнера,ИмяПартнера,ОтчествоПартнера)));
	Если ЭтоКомпания = 1 Тогда
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДатаРождения#", ?(ДатаРождения = Дата(1,1,1), "", Формат(ДатаРождения,"ДФ=dd.MM.yyyy")));
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Пол#", ?(ЗначениеЗаполнено(Пол),Пол,""));
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ФЛ#", "");
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ФЛ#");
	КонецЕсли;
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#РабочееНаименованиеПартнера#", ?(ЭтоКомпания = 0, Название,ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера)));
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Родитель#", Родитель);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ТипОтношений#", ПолучитьСтрокуТипОтношений());
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#АдресЭП#", ?(ЭтоКомпания = 0, АдресЭППартнера, АдресЭППартнераФизЛицо));
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Телефон#", ?(ЭтоКомпания = 0, ТелефонПартнера, ТелефонПартнераФизЛицо));
	Если ИспользуютсяТолькоПартнеры Тогда
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация,"#АП#");
	Иначе
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Адрес#", ФактическийАдрес);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#АП#", "");
	КонецЕсли; 
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Адрес#", ФактическийАдрес);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Группа доступа#", ГруппаДоступа);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ОтветственныйМенеджер#", ОсновнойМенеджер);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесРегионы") Тогда
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#БизнесРегион#", БизнесРегион);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#БР#", "");
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#БР#");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КаналПервичногоИнтереса#", КаналПервичногоИнтереса);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ИсточникПервичногоИнтереса#", ИсточникПервичногоИнтереса);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ПИ#", "");
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ПИ#");
	КонецЕсли;
	
	Если ЕстьПравоВключенияВСегмент Тогда
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Сегмент#", Сегмент);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#СГ#", "");
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#СГ#");
	КонецЕсли;
	
	Если УказыватьЮридическиеРеквизиты Тогда
		
		СтруктураИНН = ДанныеИНН_КПП();
		
		НайденныйДубльПоИНН = Неопределено;
		Если Не ПустаяСтрока(СтруктураИНН.ИНН) Тогда
			НайденныйДубльПоИНН = ПартнерыИКонтрагенты.ИННКППУжеИспользуетсяВИнформационнойБазе(СтруктураИНН.ИНН,СтруктураИНН.КПП);
		КонецЕсли;
		
		Если НайденныйДубльПоИНН <> Неопределено Тогда
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ИнформацияДубльИНН#", СообщениеДубльИНН(СтруктураИНН.ИНН_КПП, НайденныйДубльПоИНН));
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ИД#", "");
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#РД#");
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ДК#");
		Иначе
			Элементы.Далее2.Доступность =Истина;
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ИД#");
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ПредставлениеТипаЮрФизЛица#", ПредставлениеТипаЮрФизЛица());
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ПолноеНаименованиеКонтрагента#", ПолноеЮридическоеНаименование);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ИНН#", СтруктураИНН.ИНН_КПП);
			Если ЭтоКомпания = 0 И ВидКомпании <> 1 Тогда
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КодПоОКПО#", КодПоОКПО);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#РДК#", "");
			Иначе
				ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#РДК#");
			КонецЕсли;
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ЮридическийАдрес#", ЮридическийАдрес);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ФактическийАдрес#", ФактическийАдрес);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#РД#", "");
			
			Если ЭтоКомпания = 1 И УказатьДокументУдостоверяющийЛичность Тогда
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ВидДокумента#" ,ВидДокумента);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#СерияДокумента#", СерияДокумента);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#НомерДокумента#", НомерДокумента);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДатаВыдачи#", Формат(ДатаВыдачи,"ДФ=dd.MM.yyyy"));
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#СрокДействия#", Формат(СрокДействия,"ДФ=dd.MM.yyyy"));
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КемВыдан#", КемВыданДокумент);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КодПодразделения#",КодПодразделения);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДК#", "");
			Иначе
				ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ДК#");
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#РД#");
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ИД#");
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ДК#");
	КонецЕсли;
	
	Если (НЕ НаОснованииКонтрагента) И УказыватьЮридическиеРеквизиты И УказатьБанковскийСчетКонтрагента Тогда
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#НомерСчета#", НомерСчета);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ВалютаДенежныхСредств#", ВалютаДенежныхСредств);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Банк#", Банк);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КоррСчетБанка#", КоррСчетБанка);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#БанкДляРасчетов#", БанкДляРасчетов);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КоррСчетБанкаДляРасчетов#", КоррСчетБанкаДляРасчетов);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#БС#", "")
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#БС#");
	КонецЕсли;
	
	Если ЭтоКомпания = 0 И УказатьДанныеКонтактногоЛица Тогда
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ФИО#",ФИО_ОднойСтрокой(ФамилияКЛ, ИмяКЛ, ОтчествоКЛ));
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#АдресЭПКЛ#" ,АдресЭПКЛ);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ТелефонКЛ#", ТелефонКЛ);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#МобильныйТелефонКЛ#", МобильныйТелефонКЛ);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Роль#", Роль);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДКЛ#", "");
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ДКЛ#");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуТипОтношений()
	
	СтрокаТипОтношений = ?(Клиент,"Клиент","") + ?(Поставщик, ", Поставщик","") + ?(Перевозчик, ", Перевозчик","") + ?(Конкурент, ", Конкурент","") + ?(ПрочиеОтношения, ", Прочие отношения","");
	Если Лев(СтрокаТипОтношений, 2) = ", " Тогда
		СтрокаТипОтношений = Прав(СтрокаТипОтношений, СтрДлина(СтрокаТипОтношений)-2);
	КонецЕсли;
	
	Возврат СтрокаТипОтношений;
	
КонецФункции

&НаСервере
Функция НаименованиеКонтрагента()
	
	Если ЭтоКомпания = 0 Тогда
		Возврат НаименованиеКонтрагента; 
	Иначе
		Возврат ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДанныеИНН_КПП()
	
	СтруктураИНН = Новый Структура;
	СтруктураИНН.Вставить("ИНН", "");
	СтруктураИНН.Вставить("КПП", "");
	СтруктураИНН.Вставить("ИНН_КПП", "");
	
	СтруктураИНН.ИНН = ?(ЭтоКомпания = 0, ИНН, ИННПартнерФизЛицо);
	
	Если ЭтоКомпания = 0 И ВидКомпании <> 2 Тогда
		СтруктураИНН.КПП     = КПП;
		СтруктураИНН.ИНН_КПП = СтруктураИНН.ИНН + ?(ПустаяСтрока(КПП), "", "\" + КПП);
	КонецЕсли;
	
	Возврат СтруктураИНН;
	
КонецФункции

&НаСервере
Функция СообщениеДубльИНН(ПредставлениеИНН_КПП,НайденныйДубльПоИНН)
	
	Если ИспользуютсяТолькоПартнеры Тогда
		СтрСообщение = НСтр("ru='Партнер создан не будет. ИНН\КПП - %1 уже указаны для партнера %2 с кодом %3, ответственный - %4. Измените КПП или используйте уже имеющегося партнера.'");
		Элементы.Далее2.Доступность =Ложь;
	Иначе
		СтрСообщение = НСтр("ru='Контрагент создан не будет. ИНН\КПП - %1 уже указаны для контрагента %2 с кодом %3, ответственный - %4.'");
	КонецЕсли;
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрСообщение, ПредставлениеИНН_КПП,НайденныйДубльПоИНН.Ссылка, НайденныйДубльПоИНН.Код, НайденныйДубльПоИНН.ОсновнойМенеджер);
	
КонецФункции

&НаСервере
Функция ПредставлениеТипаЮрФизЛица()
	
	Если ЭтоКомпания = 0 Тогда
		Если ВидКомпании = 0 Тогда
			Возврат НСтр("ru='Юридическое лицо'");
		ИначеЕсли ВидКомпании = 1 Тогда
			Возврат НСтр("ru='Юридическое лицо(за пределами РФ)'");
		Иначе
			Возврат НСтр("ru='Индивидуальный предприниматель(ПБОЮЛ)'");
		КонецЕсли;
	Иначе
		Возврат НСтр("ru='Физическое лицо'");
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ТипЮрФизЛица()
	
	Если ЭтоКомпания = 0 Тогда
		Если ВидКомпании = 0 Тогда
			Возврат Перечисления.ЮрФизЛицо.ЮрЛицо;
		ИначеЕсли ВидКомпании = 1 Тогда
			Возврат Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
		Иначе
			Возврат Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель; 
		КонецЕсли;
	Иначе
		Возврат Перечисления.ЮрФизЛицо.ФизЛицо;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Управление видимостью и доступностью элементов формы

&НаКлиенте
Процедура УправлениеСтраницамиПодвал()
	
	ПредыдущаяСтраницаПодвал = Элементы.СтраницыПодвал.ТекущаяСтраница;
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНайдено Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = ?(ДействиеПоРезультатамНайдено = 0, Элементы.СтраницаКнопкиГотово, Элементы.СтраницаКнопкиНазадДалее);
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаФинальная Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиСоздать;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения ИЛИ 
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРасчетныйСчет Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиНазадДалее;
	Иначе	
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиДалее;
	КонецЕсли;
	
	Если ПредыдущаяСтраницаПодвал <> Элементы.СтраницыПодвал.ТекущаяСтраница Тогда
		Если Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиДалее Тогда
			Элементы.Далее.КнопкаПоУмолчанию = Истина;
		ИначеЕсли Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиГотово Тогда
			Элементы.Далее1.КнопкаПоУмолчанию = Истина;
		ИначеЕсли Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиСоздать Тогда
			Элементы.Далее2.КнопкаПоУмолчанию = Истина;
		ИначеЕсли Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиНазадДалее Тогда
			Элементы.Далее3.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьСтраницПервичнаяИнформация()
	
	Если ЭтоКомпания = 0 Тогда
		
		Элементы.СтраницыКомпанияЧастноеЛицо.ТекущаяСтраница = Элементы.СтраницаКомпания;
		
	Иначе
		
		Элементы.СтраницыКомпанияЧастноеЛицо.ТекущаяСтраница = Элементы.СтраницаФизическоеЛицо;
		
	КонецЕсли;
	
	Если Не НаОснованииКонтрагента Тогда
		Элементы.СтраницыБудетСоздан.ТекущаяСтраница = 
		?(НЕ УказыватьЮридическиеРеквизиты ИЛИ ИспользуютсяТолькоПартнеры, Элементы.СтраницаБудетСозданПартнер, Элементы.СтраницаБудетСозданПартнерИКонтрагент);
	КонецЕсли;
	УправлениеДоступностьюПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюПервичнаяИнформация()
	
	//Юридические реквизиты
	Если НЕ НаОснованииКонтрагента Тогда
		Если ЭтоКомпания = 0 Тогда
			УстановитьСвойствоЭлементовГруппы(Элементы.ГруппаРегистрационныеДанныеФНС, "Доступность", УказыватьЮридическиеРеквизиты);
			Если УказыватьЮридическиеРеквизиты Тогда
				УстановитьСвойствоЭлементовГруппы(Элементы.ГруппаИННКПП, "Доступность", ВидКомпании <> 1);
				Элементы.КПП.Доступность = (ВидКомпании = 0);
			КонецЕсли;
		Иначе
			УстановитьСвойствоЭлементовГруппы(Элементы.ГруппаДанныеКонтрагентаЧастноеЛицо, "Доступность", УказыватьЮридическиеРеквизиты);
			УстановитьСвойствоЭлементовГруппы(Элементы.ГруппаДанныеДокументаФизическогоЛица, "Доступность", УказатьДокументУдостоверяющийЛичность);
		КонецЕсли;
	КонецЕсли;
	
	//Контактное лицо
	УстановитьСвойствоЭлементовГруппы(Элементы.ГруппаДанныеКонтактногоЛица, "Доступность", УказатьДанныеКонтактногоЛица);
	
	УстановитьДоступностьКомандыЗаполнитьИНН();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюРасчетныйСчет()
	
	Если НЕ УказатьБанковскийСчетКонтрагента И ИспользуетсяБанкДляРасчетов Тогда
		ИспользуетсяБанкДляРасчетов = ЛОЖЬ;
	КонецЕсли;
	
	Элементы.ГруппаДанныеБанковскогоСчета.Доступность = УказатьБанковскийСчетКонтрагента;
	Если УказатьБанковскийСчетКонтрагента Тогда
		Элементы.ГруппаБанкДляРасчетов.Доступность = ИспользуетсяБанкДляРасчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюДополнительныеСведения()
	
	Элементы.ЮридическийАдрес.ТолькоПросмотр = (НЕ УказыватьЮридическиеРеквизиты И ЭтоКомпания = 0);
	Элементы.ЮридическийАдресРавенФактическому.Доступность = (УказыватьЮридическиеРеквизиты);
	Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса);
	Элементы.ИсточникПервичногоИнтересаЧастноеЛицо.ТолькоПросмотр = Не ЗначениеЗаполнено(КаналПервичногоИнтереса);
	
	Элементы.ОбслуживаетсяТорговымиПредставителями.Доступность = Клиент;
	Если НЕ Клиент Тогда
		ОбслуживаетсяТорговымиПредставителями = Ложь;
	КонецЕсли;
	
	Элементы.Перевозчик.Доступность = Поставщик;
	Если НЕ Поставщик Тогда
		Поставщик = Ложь;
	КонецЕсли;
	
	Если ЭтоКомпания = 0 Тогда
		Элементы.СтраницыДополнительныеСведения.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведенияКомпания;
		Элементы.СтраницыАдреса.ТекущаяСтраница = Элементы.СтраницаАдресаКомпания;
	Иначе
		Элементы.СтраницыДополнительныеСведения.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведенияЧастноеЛицо;
		Элементы.СтраницыАдреса.ТекущаяСтраница = Элементы.СтраницаАдресаЧастноеЛицо;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойствоЭлементовГруппы(ГруппаЭлементов, ИмяСвойства, ЗначениеСвойства)
	
	Для каждого ПодчиненныйЭлемент Из ГруппаЭлементов.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") Тогда
			
			УстановитьСвойствоЭлементовГруппы(ПодчиненныйЭлемент, ИмяСвойства, ЗначениеСвойства);
			
		Иначе
			
			ПодчиненныйЭлемент[ИмяСвойства] = ЗначениеСвойства;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандыЗаполнитьИНН()
	
	Элементы.ЗаполнитьКПП.Доступность = (ЭтоКомпания = 0 И ВидКомпании = 0 И НЕ ПустаяСтрока(ИНН));
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Поиск по первичной информации

&НаСервере
Функция ПодзапросПоНазванию()
	
	ТекстУсловияПоНеизвестномуПартнеруКонтрагент = " И (НЕ Контрагенты.Партнер.Предопределенный)";
	ТекстУсловияПоНеизвестномуПартнеру           = " И (НЕ Партнеры.Ссылка.Предопределенный)";
	
	ТекстПодзапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Партнеры.Ссылка КАК Партнер,
	|	ВЫБОР
	|		КОГДА  Партнеры.Наименование ПОДОБНО &Название
	|			ТОГДА Партнеры.Наименование
	|			ИНАЧЕ Партнеры.НаименованиеПолное
	|	КОНЕЦ КАК ЗначениеРеквизита,
	|	&СтрокаПартнеры КАК НайденоВОбъекте,
	|	ВЫБОР
	|		КОГДА  Партнеры.Наименование ПОДОБНО &Название
	|			ТОГДА &СтрокаНаименование
	|			ИНАЧЕ &СтрокаНаименованиеПолное
	|	КОНЕЦ КАК НайденоВРеквизите,
	|	Партнеры.Ссылка КАК НайденоПоСсылка
	|ПОМЕСТИТЬ НайденоПоНазванию
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Наименование ПОДОБНО &Название ИЛИ Партнеры.НаименованиеПолное ПОДОБНО &Название" + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру,"");
	
	Если Не ИспользуютсяТолькоПартнеры Тогда
		ТекстПодзапроса = ТекстПодзапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	Контрагенты.Партнер,
		|	ВЫБОР
		|		КОГДА  Контрагенты.Наименование ПОДОБНО &Название
		|			ТОГДА Контрагенты.Наименование
		|			ИНАЧЕ Контрагенты.НаименованиеПолное
		|	КОНЕЦ КАК ЗначениеРеквизита,
		|	&СтрокаКонтрагенты,
		|	ВЫБОР
		|		КОГДА  Контрагенты.Наименование ПОДОБНО &Название
		|			ТОГДА &СтрокаНаименование
		|			ИНАЧЕ &СтрокаНаименованиеПолное
		|	КОНЕЦ КАК НайденоВРеквизите,
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	(Контрагенты.Наименование ПОДОБНО &Название ИЛИ Контрагенты.НаименованиеПолное ПОДОБНО &Название) И 
		|	Контрагенты.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеруКонтрагент, "");
	КонецЕсли;
	
	ТекстПодзапроса = ТекстПодзапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|";
	
	Возврат ТекстПодзапроса;
	
КонецФункции

&НаСервере
Функция ПодзапросПоАдресуЭлектроннойПочты()

	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ ПартнерыКонтактнаяИнформация.Ссылка.Предопределенный)";
	ТекстУсловияПоНеизвестномуПартнеруКЛ = " И (НЕ КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец.Предопределенный)";
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
	|	ПартнерыКонтактнаяИнформация.АдресЭП КАК ЗначениеРеквизита,
	|	&СтрокаПартнеры КАК НайденоВОбъекте,
	|	&СтрокаEmail КАК НайденовРеквизите,
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК НайденоПоСсылка
	|ПОМЕСТИТЬ НайденоПоАдресуЭП
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.АдресЭП В (&АдресаЭП) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру,"") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП,
	|	&СтрокаКонтактныеЛицаПартнеров,
	|	&СтрокаEmail,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП В (&АдресаЭП) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеруКЛ, "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецФункции

&НаСервере
Функция ПодзапросПоНомеруТелефона(МассивПредставленийТелефона)
	
	//партнеры
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
	|	ПартнерыКонтактнаяИнформация.НомерТелефона КАК ЗначениеРеквизита,
	|	&СтрокаПартнеры КАК НайденоВОбъекте,
	|	&СтрокаТелефон КАК НайденовРеквизите,
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК НайденоПоСсылка
	|ПОМЕСТИТЬ НайденоПоТелефону
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	(ПартнерыКонтактнаяИнформация.НомерТелефонаБезКодов В(&МассивНомеровТелефона) ";
	
	
	Для инд = 0 По  МассивПредставленийТелефона.Количество()-1 Цикл
		
		ТекстЗапроса = ТекстЗапроса + " ИЛИ ПартнерыКонтактнаяИнформация.Представление ПОДОБНО &ПредставлениеТелефона" + Строка(инд) + " "  ; 
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ")
	|	И (ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс))";
	
	Если НаОснованииКонтрагента Тогда
		
		ТекстЗапроса = ТекстЗапроса + " И (НЕ ПартнерыКонтактнаяИнформация.Ссылка.Предопределенный)";
		
	КонецЕсли;
	
	//контактные лица
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона,
	|	&СтрокаКонтактныеЛицаПартнеров,
	|	&СтрокаТелефон,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	(КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефонаБезКодов В (&МассивНомеровТелефона) ";
	
	Для инд = 0 По  МассивПредставленийТелефона.Количество()-1 Цикл
		
		ТекстЗапроса = ТекстЗапроса + " ИЛИ КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление ПОДОБНО &ПредставлениеТелефона" + Строка(инд) + " "  ; 
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ")
	|	И (КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс))";
	
	Если НаОснованииКонтрагента Тогда
		
		ТекстЗапроса = ТекстЗапроса + " И (НЕ КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец.Предопределенный)";
		
	КонецЕсли;
	
	//физические лица
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"; 
	
	Возврат ТекстЗапроса;
	
КонецФункции 

&НаСервере
Функция ПодзапросПоИНН()
	
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ Контрагенты.Партнер.Предопределенный)";
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Партнер,
	|	Контрагенты.ИНН КАК ЗначениеРеквизита,
	|	&СтрокаКонтрагенты КАК НайденоВОбъекте,
	|	&СтрокаИНН КАК НайденоВРеквизите,
	|	Контрагенты.Ссылка КАК НайденоПоСсылка
	|ПОМЕСТИТЬ КонтрагентыПоИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН И
	|	Контрагенты.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру,"") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецФункции

&НаСервере
Функция ПодзапросПоОКПО()
	
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ Контрагенты.Партнер.Предопределенный)";
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Партнер,
	|	Контрагенты.КодПоОКПО КАК ЗначениеРеквизита,
	|	&СтрокаКонтрагенты КАК НайденоВОбъекте,
	|	&СтрокаКодОКПО КАК НайденоВРеквизите,
	|	Контрагенты.Ссылка КАК НайденоПоСсылка
	|ПОМЕСТИТЬ КонтрагентыПоОКПО
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.КодПоОКПО = &КодПоОКПО И
	|	Контрагенты.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру, "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецФункции

Функция ПодзапросПоДокументуУдостоверяющемуЛичность()
	
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ Партнеры.Предопределенный)";
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Партнеры.Ссылка КАК Партнер,
	|	ДокументыФизическихЛицСрезПоследних.Представление КАК ЗначениеРеквизита,
	|	&СтрокаКонтрагенты КАК НайденоВОбъекте,
	|	&СтрокаДанныеДокумента КАК НайденоВРеквизите,
	|	Контрагенты.Ссылка КАК НайденоПоСсылка
	|ПОМЕСТИТЬ КонтрагентыПоДокументу
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ТекущаяДата, Физлицо ССЫЛКА Справочник.Контрагенты) КАК ДокументыФизическихЛицСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|			ПО Контрагенты.Партнер = Партнеры.Ссылка
	|		ПО ДокументыФизическихЛицСрезПоследних.Физлицо = Контрагенты.Ссылка
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента = &ВидДокумента
	|	И ДокументыФизическихЛицСрезПоследних.Серия = &Серия
	|	И ДокументыФизическихЛицСрезПоследних.Номер = &Номер " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру, "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецФункции

&НаСервере
Функция ПодзапросПоФИО(Запрос)
	
	МассивФИО = Новый Массив;
	Если НЕ ПустаяСтрока(ФамилияПартнера) Тогда
		ДобавитьВМассивФИО(МассивФИО, ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ФамилияКЛ) Тогда
		ДобавитьВМассивФИО(МассивФИО, ФамилияКЛ, ИмяКЛ, ОтчествоКЛ);
	КонецЕсли;
	
	ПодзапросПоКонтактнымЛицам = "";
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ КонтактныеЛицаПартнеров.Владелец.Предопределенный)";
	
	Для Инд = 1 По МассивФИО.Количество() Цикл
	
		ПодзапросПоКонтактнымЛицам = ПодзапросПоКонтактнымЛицам + ?(ПустаяСтрока(ПодзапросПоКонтактнымЛицам),"","ОБЪЕДИНИТЬ ВСЕ")+ "
		|
		|ВЫБРАТЬ " +  ?(Инд = 1,"РАЗРЕШЕННЫЕ","") + "
		|	КонтактныеЛицаПартнеров.Владелец КАК Партнер,
		|	КонтактныеЛицаПартнеров.Наименование КАК ЗначениеРеквизита,
		|	&СтрокаКонтактныеЛицаПартнеров КАК НайденоВОбъекте,
		|	&СтрокаНаименование КАК НайденоВРеквизите,
		|	КонтактныеЛицаПартнеров.Ссылка КАК НайденоПоСсылка
		|" + ?(ПустаяСтрока(ПодзапросПоКонтактнымЛицам),"ПОМЕСТИТЬ НайденоПоФИОКонтактныхЛиц","")  + "
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Наименование ПОДОБНО &ФИО_" + Строка(Инд) + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру, "") +"
		|";
		
		Запрос.УстановитьПараметр("ФИО_" + Строка(Инд), МассивФИО[Инд-1]+"%")

	КонецЦикла;
	
	ПодзапросПоКонтактнымЛицам = ПодзапросПоКонтактнымЛицам + "
	|;
	|////////////////////////////////////////////////////////////////////////////////";
	
	Возврат ПодзапросПоКонтактнымЛицам ;
	
КонецФункции

&НаСервере
Функция СводныйЗапрос(ЕстьАдресЭП, ЕстьНомерТелефона, ЕстьИНН, ЕстьФИО, ЕстьНаименованиеКонтрагента, ЕстьКодПоОКПО, ЕстьДокументКонтрагента)
		
	СводныйЗапрос ="
		|
		|ВЫБРАТЬ 
		|	НайденоПоНазванию.Партнер,
		|	НайденоПоНазванию.ЗначениеРеквизита,
		|	НайденоПоНазванию.НайденоВОбъекте,
		|	НайденоПоНазванию.НайденоВРеквизите,
		|   НайденоПоНазванию.НайденоПоСсылка
		|ПОМЕСТИТЬ НайденныеПартнеры
		|ИЗ
		|	НайденоПоНазванию КАК НайденоПоНазванию
		|";
	
	Если ЕстьИНН Тогда
		
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КонтрагентыПоИНН.Партнер КАК Партнер,
		|	КонтрагентыПоИНН.ЗначениеРеквизита,
		|	КонтрагентыПоИНН.НайденоВОбъекте,
		|	КонтрагентыПоИНН.НайденоВРеквизите,
		|   КонтрагентыПоИНН.НайденоПоСсылка
		|ИЗ
		|	КонтрагентыПоИНН КАК КонтрагентыПоИНН
		|"; 
		
	КонецЕсли;
	
	Если ЕстьАдресЭП Тогда
		
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	НайденоПоАдресуЭП.Партнер,
		|	НайденоПоАдресуЭП.ЗначениеРеквизита,
		|	НайденоПоАдресуЭП.НайденоВОбъекте,
		|	НайденоПоАдресуЭП.НайденовРеквизите,
		|   НайденоПоАдресуЭП.НайденоПоСсылка
		|ИЗ
		|	НайденоПоАдресуЭП КАК НайденоПоАдресуЭП
		|";		
		
	КонецЕсли;
	
	Если ЕстьНомерТелефона Тогда
		
		СводныйЗапрос = СводныйЗапрос +  "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	НайденоПоТелефону.Партнер,
		|	НайденоПоТелефону.ЗначениеРеквизита,
		|	НайденоПоТелефону.НайденоВОбъекте,
		|	НайденоПоТелефону.НайденоВРеквизите,
		|   НайденоПоТелефону.НайденоПоСсылка
		|ИЗ
		|	НайденоПоТелефону КАК НайденоПоТелефону
		|";
		
	КонецЕсли;
	
	Если ЕстьФИО Тогда
		
		СводныйЗапрос = СводныйЗапрос +  "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	НайденоПоФИОКонтактныхЛиц.Партнер,
		|	НайденоПоФИОКонтактныхЛиц.ЗначениеРеквизита,
		|	НайденоПоФИОКонтактныхЛиц.НайденоВОбъекте,
		|	НайденоПоФИОКонтактныхЛиц.НайденоВРеквизите,
		|   НайденоПоФИОКонтактныхЛиц.НайденоПоСсылка
		|ИЗ
		|	НайденоПоФИОКонтактныхЛиц КАК НайденоПоФИОКонтактныхЛиц
		|";
		
	КонецЕсли;
	
	Если ЕстьНаименованиеКонтрагента Тогда
		
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КонтрагентыПоНаименованию.Партнер КАК Партнер,
		|	КонтрагентыПоНаименованию.ЗначениеРеквизита,
		|	КонтрагентыПоНаименованию.НайденоВОбъекте,
		|	КонтрагентыПоНаименованию.НайденоВРеквизите,
		|   КонтрагентыПоНаименованию.НайденоПоСсылка
		|ИЗ
		|	КонтрагентыПоНаименованию КАК КонтрагентыПоНаименованию
		|"; 
		
	КонецЕсли;
	
	Если ЕстьКодПоОКПО Тогда
	
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КонтрагентыПоОКПО.Партнер КАК Партнер,
		|	КонтрагентыПоОКПО.ЗначениеРеквизита,
		|	КонтрагентыПоОКПО.НайденоВОбъекте,
		|	КонтрагентыПоОКПО.НайденоВРеквизите,
		|	КонтрагентыПоОКПО.НайденоПоСсылка
		|ИЗ
		|	КонтрагентыПоОКПО КАК КонтрагентыПоОКПО
		|";
	
	КонецЕсли;
	
	Если ЕстьДокументКонтрагента Тогда
	
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КонтрагентыПоДокументу.Партнер КАК Партнер,
		|	КонтрагентыПоДокументу.ЗначениеРеквизита,
		|	КонтрагентыПоДокументу.НайденоВОбъекте,
		|	КонтрагентыПоДокументу.НайденоВРеквизите,
		|	КонтрагентыПоДокументу.НайденоПоСсылка
		|ИЗ
		|	КонтрагентыПоДокументу КАК КонтрагентыПоДокументу
		|";
	
	КонецЕсли;
	
	СводныйЗапрос = СводныйЗапрос + "
	|;
	|////////////////////////////////////////////////////////////////////////////////";
	
	СводныйЗапрос = СводныйЗапрос + "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	НайденныеПартнеры.Партнер КАК Партнер,
	|	НайденныеПартнеры.ЗначениеРеквизита КАК ЗначениеРеквизита,
	|	НайденныеПартнеры.НайденоВОбъекте КАК НайденоВОбъекте,
	|	НайденныеПартнеры.НайденоВРеквизите КАК НайденоВРеквизите,
	|	НайденныеПартнеры.НайденоПоСсылка КАК НайденоПоСсылка,
	|	Партнеры.ОсновнойМенеджер КАК ОсновнойМенеджер,
	|	Партнеры.Представление
	|ИЗ
	|	НайденныеПартнеры КАК НайденныеПартнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО НайденныеПартнеры.Партнер = Партнеры.Ссылка
	|ИТОГИ ПО
	|	Партнер";
	
	Возврат СводныйЗапрос;
	
КонецФункции

&НаСервере
Функция ПодзапросПоНаименованиюКонтрагента()
	
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ Контрагенты.Партнер.Предопределенный)";
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Партнер,
	|	ВЫБОР
	|		КОГДА  Контрагенты.Наименование ПОДОБНО &Название
	|			ТОГДА Контрагенты.Наименование
	|			ИНАЧЕ Контрагенты.НаименованиеПолное
	|	КОНЕЦ КАК ЗначениеРеквизита,
	|	&СтрокаКонтрагенты КАК НайденоВОбъекте,
	|	ВЫБОР
	|		КОГДА  Контрагенты.Наименование ПОДОБНО &Название
	|			ТОГДА &СтрокаНаименование
	|			ИНАЧЕ &СтрокаНаименованиеПолное
	|	КОНЕЦ КАК НайденоВРеквизите,
	|	Контрагенты.Ссылка КАК НайденоПоСсылка
	|ПОМЕСТИТЬ КонтрагентыПоНаименованию
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование ПОДОБНО &НаименованиеКонтрагента ИЛИ Контрагенты.НаименованиеПолное ПОДОБНО &НаименованиеКонтрагента" + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру, "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецФункции

&НаСервере
Процедура ВыполнитьПоискПоПервичнойИнформации()
	
	ЕстьНаименованиеКонтрагента = УказыватьЮридическиеРеквизиты И ЭтоКомпания = 0 И НЕ ИспользуютсяТолькоПартнеры ;
	ЕстьАдресЭП                 = ?(ЭтоКомпания = 0, НЕ ПустаяСтрока(АдресЭППартнера) ИЛИ (УказатьДанныеКонтактногоЛица И 
	                               НЕ ПустаяСтрока(АдресЭПКЛ)),НЕ ПустаяСтрока(АдресЭППартнераФизЛицо));
	ЕстьНомерТелефона           = ?(ЭтоКомпания = 0,НЕ ПустаяСтрока(ТелефонПартнера)  ИЛИ (УказатьДанныеКонтактногоЛица И 
	                               (НЕ ПустаяСтрока(ТелефонКЛ)ИЛИ НЕ ПустаяСтрока(МобильныйТелефонКЛ))),НЕ ПустаяСтрока(ТелефонПартнераФизЛицо));
	ЕстьИНН                     = (УказыватьЮридическиеРеквизиты И ЭтоКомпания = 0 И НЕ ПустаяСтрока(ИНН)) ИЛИ (ЭтоКомпания = 1 И
	                               НЕ ПустаяСтрока(ИННПартнерФизЛицо));
	ЕстьФИО                     = (ЭтоКомпания = 1) ИЛИ (ЭтоКомпания = 0 И УказатьДанныеКонтактногоЛица И НЕ ПустаяСтрока(ФамилияКЛ));
	ЕстьКодПоОКПО               = (ЭтоКомпания = 0 И УказыватьЮридическиеРеквизиты И ВидКомпании <> 1 И НЕ ПустаяСтрока(КодПоОКПО));
	ЕстьДокументКонтрагента     = (ЭтоКомпания = 1) И УказыватьЮридическиеРеквизиты И УказатьДокументУдостоверяющийЛичность;
	
	МассивПредставленийТелефона = МассивПредставленийТелефонов();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = ПодзапросПоНазванию();
	
	Если ЕстьАдресЭП Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоАдресуЭлектроннойПочты();
	КонецЕсли;
	
	Если ЕстьНомерТелефона Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоНомеруТелефона(МассивПредставленийТелефона);
	КонецЕсли;
	
	Если ЕстьИНН Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоИНН();
	КонецЕсли;
	
	Если ЕстьФИО Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоФио(Запрос);
	КонецЕсли;
	
	Если ЕстьНаименованиеКонтрагента Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоНаименованиюКонтрагента();
	КонецЕсли;
	
	Если ЕстьКодПоОКПО Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоОКПО();
	КонецЕсли;
	
	Если ЕстьДокументКонтрагента Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоДокументуУдостоверяющемуЛичность()
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + СводныйЗапрос(ЕстьАдресЭП, ЕстьНомерТелефона, ЕстьИНН, ЕстьФИО, ЕстьНаименованиеКонтрагента, ЕстьКодПоОКПО, ЕстьДокументКонтрагента);
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Название",?(ЭтоКомпания = 0,?(ИспользуютсяТолькоПартнеры,"%"+ ПолноеЮридическоеНаименование+"%","%"+ ПолноеНаименование+"%"),
	                          СокрЛП(СокрЛП(ФамилияПартнера) + " " + СокрЛП(ИмяПартнера) + " " +СокрЛП(ОтчествоПартнера))));
	Запрос.УстановитьПараметр("АдресаЭП", МассивАдресовЭлектроннойПочтыДляПоиска());
	Запрос.УстановитьПараметр("ИНН", ?(ЭтоКомпания = 0, ИНН, ИННПартнерФизЛицо));
	Запрос.УстановитьПараметр("МассивНомеровТелефона", МассивНомеровТелефонаДляПоиска());
	Запрос.УстановитьПараметр("НаименованиеКонтрагента","%"+ПолноеЮридическоеНаименование+"%");
	Запрос.УстановитьПараметр("КодПоОКПО", КодПоОКПО);
	Запрос.УстановитьПараметр("СтрокаКонтрагенты", ?(ИспользуютсяТолькоПартнеры, НСтр("ru='Партнеры'"), НСтр("ru='Контрагенты'")));
	Запрос.УстановитьПараметр("СтрокаНаименование", НСтр("ru='Наименование'"));
	Запрос.УстановитьПараметр("СтрокаНаименованиеПолное", НСтр("ru='НаименованиеПолное'"));
	Запрос.УстановитьПараметр("СтрокаКонтактныеЛицаПартнеров", НСтр("ru='Контактные лица партнеров'"));
	Запрос.УстановитьПараметр("СтрокаКодОКПО", НСтр("ru='Код по ОКПО'"));
	Запрос.УстановитьПараметр("СтрокаИНН", НСтр("ru='ИНН'"));
	Запрос.УстановитьПараметр("СтрокаТелефон", НСтр("ru='Телефон'"));
	Запрос.УстановитьПараметр("СтрокаПартнеры", НСтр("ru='Партнеры'"));
	Запрос.УстановитьПараметр("СтрокаEmail", НСтр("ru='Email'"));
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("Серия", СерияДокумента);
	Запрос.УстановитьПараметр("Номер", НомерДокумента);
	Запрос.УстановитьПараметр("СтрокаДанныеДокумента", НСтр("ru='Документ контрагента'"));
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Для инд = 0 По  МассивПредставленийТелефона.Количество()-1 Цикл
		
		Запрос.УстановитьПараметр("ПредставлениеТелефона" + Строка(инд), "%"+МассивПредставленийТелефона[инд]+"%") ; 
		
	КонецЦикла;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЗаполнитьРезультатыНайдено(РезультатЗапроса);
	
	СтруктураИНН = ДанныеИНН_КПП();
		
	НайденныйДубльПоИНН = Неопределено;
	Если Не ПустаяСтрока(СтруктураИНН.ИНН) Тогда
		НайденныйДубльПоИНН = ПартнерыИКонтрагенты.ИННКППУжеИспользуетсяВИнформационнойБазе(СтруктураИНН.ИНН, СтруктураИНН.КПП);
	КонецЕсли;
	
	Если НайденныйДубльПоИНН <> Неопределено Тогда
		Элементы.ДекорацияДубльИННКПП.Заголовок = СообщениеДубльИНН(СтруктураИНН.ИНН_КПП, НайденныйДубльПоИНН);
		Если ИспользуютсяТолькоПартнеры Тогда
			Элементы.ДействиеПоРезультатамНайдено.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ДействиеПоРезультатамНайдено.Доступность = Истина;
		Элементы.ДекорацияДубльИННКПП.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
//Чечин Петр. Ищем дубли по инн
Функция  ит_ПрерватьРаботуМастера()
	//проверка инн
	текИНН = ?(ЭтоКомпания = 0, ИНН, ИННПартнерФизЛицо);
	Если ЗначениеЗаполнено(текИНН) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.ИНН,
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН";
		
		Запрос.УстановитьПараметр("ИНН", СокрЛП(текИНН));
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Если  Выборка.Количество() > 0 Тогда 
			текСообщение = новый СообщениеПользователю;
			текСообщение.Текст = "такой ИНН в базе уже есть, введение нового партнера запрещено";
			текСообщение.Сообщить();
			Возврат Истина; 
		КонецЕсли;
	КонецЕсли;
	//проверка названия
	Если ЭтоКомпания = 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Партнеры.Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	Партнеры.НаименованиеПолное = &НаименованиеПолное";
		
		Запрос.УстановитьПараметр("НаименованиеПолное", СокрЛП(ПолноеЮридическоеНаименование));
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Если  Выборка.Количество() > 0 Тогда 
			текСообщение = новый СообщениеПользователю;
			текСообщение.Текст = "Это юридическое лицо уже зарегистрировано, введение нового партнера запрещено";
			текСообщение.Сообщить();
			Возврат Истина; 
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция МассивАдресовЭлектроннойПочтыДляПоиска()

	МассивАдресовЭП = Новый Массив;
	Если ЭтоКомпания = 0 И НЕ ПустаяСтрока(АдресЭППартнера) Тогда
		МассивАдресовЭП.Добавить(АдресЭППартнера);
	КонецЕсли;
	Если ЭтоКомпания = 0 И УказатьДанныеКонтактногоЛица И НЕ ПустаяСтрока(АдресЭПКЛ) Тогда
		МассивАдресовЭП.Добавить(АдресЭПКЛ);
	КонецЕсли;
	Если ЭтоКомпания = 1 И НЕ ПустаяСтрока(АдресЭППартнераФизЛицо) Тогда
		МассивАдресовЭП.Добавить(АдресЭППартнераФизЛицо);
	КонецЕсли;
	
	Возврат МассивАдресовЭП;

КонецФункции

&НаСервере
Функция МассивПредставленийТелефонов()
	
	МассивПредставленийТелефонов = Новый Массив;
	
	Если ЭтоКомпания = 0 Тогда
		Если НЕ ПустаяСтрока(ТелефонПартнера) Тогда
			МассивПредставленийТелефонов.Добавить(ТелефонПартнера);
		КонецЕсли;
		Если УказатьДанныеКонтактногоЛица Тогда
			Если НЕ ПустаяСтрока(ТелефонКЛ) Тогда
				МассивПредставленийТелефонов.Добавить(ТелефонКЛ);
			КонецЕсли;
			Если НЕ ПустаяСтрока(МобильныйТелефонКЛ) Тогда
				МассивПредставленийТелефонов.Добавить(МобильныйТелефонКЛ);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ ПустаяСтрока(ТелефонПартнераФизЛицо) Тогда
			МассивПредставленийТелефонов.Добавить(ТелефонПартнераФизЛицо);
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивПредставленийТелефонов;
	
КонецФункции

&НаСервере
Функция МассивНомеровТелефонаДляПоиска()
	
	МассивНомеровТелефона = Новый Массив;
	
	Если ЭтоКомпания = 0 Тогда
		Если НЕ ПустаяСтрока(ТелефонПартнера) Тогда
			ДобавитьВМассивНомерТелефонаБезКодов(МассивНомеровТелефона, ТелефонПартнераЗначенияПолей);
		КонецЕсли;
		Если УказатьДанныеКонтактногоЛица Тогда
			Если НЕ ПустаяСтрока(ТелефонКЛ) Тогда
				ДобавитьВМассивНомерТелефонаБезКодов(МассивНомеровТелефона, ТелефонКЛЗначенияПолей);
			КонецЕсли;
			Если НЕ ПустаяСтрока(МобильныйТелефонКЛ) Тогда
				ДобавитьВМассивНомерТелефонаБезКодов(МассивНомеровТелефона, МобильныйТелефонКЛЗначенияПолей);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ ПустаяСтрока(ТелефонПартнераФизЛицо) Тогда
			ДобавитьВМассивНомерТелефонаБезКодов(МассивНомеровТелефона, ТелефонПартнераФизЛицоЗначенияПолей);
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивНомеровТелефона;
	
КонецФункции

&НаСервере
Процедура ДобавитьВМассивНомерТелефонаБезКодов(МассивНомеров, СписокЗначенияПолей)
	
	Для каждого ЭлементСписка Из СписокЗначенияПолей Цикл
		Если ЭлементСписка.Представление = "НомерТелефона" И НЕ ПустаяСтрока(ЭлементСписка.Значение) Тогда
			МассивНомеров.Добавить(ЭлементСписка.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВМассивФИО(МассивФИО, Фамилия, Имя, Отчество)
	
	СтрокаДляДобавления =  СокрЛП(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество));
	Если МассивФИО.Найти(СтрокаДляДобавления) = Неопределено Тогда
		МассивФИО.Добавить(СтрокаДляДобавления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатыНайдено(РезультатЗапроса)
	
	ТаблицаНайдено.Очистить();
	ТаблицаРасшифровкаНайдено.Очистить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПартнер  = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПартнер.Следующий() Цикл
		СтрокаТаблицыНайдено = ТаблицаНайдено.Добавить();
		СтрокаТаблицыНайдено.Партнер = ВыборкаПартнер.Партнер;
		СтрокаТаблицыНайдено.КоличествоНайденныхАналогов = 0;
		ВыборкаНайдено = ВыборкаПартнер.Выбрать();
		Пока ВыборкаНайдено.Следующий() Цикл
			
			СтрокаТаблицыРасшифровкаНайдено = ТаблицаРасшифровкаНайдено.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРасшифровкаНайдено,ВыборкаНайдено);
			Если ИспользуютсяТолькоПартнеры И ТипЗнч(ВыборкаНайдено.НайденоПоСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
				СтрокаТаблицыРасшифровкаНайдено.НайденоПоСсылка = ВыборкаНайдено.Партнер;
			КонецЕсли;
			
			НайденоВРеквизите = ВыборкаНайдено.НайденоВРеквизите;
			Если НайденоВРеквизите = НСтр("ru = 'Наименование'") Тогда
				Если ТипЗнч(ВыборкаНайдено.НайденоПоСсылка) = Тип("СправочникСсылка.Партнеры") ИЛИ ТипЗнч(ВыборкаНайдено.НайденоПоСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
					НайденоВРеквизите = НСтр("ru = 'Рабочее наименование'");
				КонецЕсли;
			ИначеЕсли НайденоВРеквизите = НСтр("ru = 'НаименованиеПолное'") Тогда
				Если ТипЗнч(ВыборкаНайдено.НайденоПоСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
					Если ИспользуютсяТолькоПартнеры Тогда
						НайденоВРеквизите = НСтр("ru = 'Сокращенное юр. наименование'");
					Иначе
						НайденоВРеквизите = НСтр("ru = 'Публичное наименование'");
					КонецЕсли;
				ИначеЕсли ТипЗнч(ВыборкаНайдено.НайденоПоСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
					НайденоВРеквизите = НСтр("ru = 'Сокращенное юр. наименование'");
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТаблицыРасшифровкаНайдено.ПредставлениеНайденоПо = "(" + ВыборкаНайдено.НайденоВОбъекте + ") " + Строка(ВыборкаНайдено.НайденоПоСсылка) + " - (" + НайденоВРеквизите + ") " + ВыборкаНайдено.ЗначениеРеквизита;
			СтрокаТаблицыНайдено.КоличествоНайденныхАналогов = СтрокаТаблицыНайдено.КоличествоНайденныхАналогов + 1;
			СтрокаТаблицыНайдено.ОсновнойМенеджер = ВыборкаНайдено.ОсновнойМенеджер;
			СтрокаТаблицыНайдено.Представление = ВыборкаНайдено.Представление;
			
		КонецЦикла;
		
		СтрокаТаблицыНайдено.ПредставлениеПартнер = Строка(ВыборкаПартнер.Партнер) + ?(СтрокаТаблицыНайдено.КоличествоНайденныхАналогов > 1, " (Совпадений - " + СтрокаТаблицыНайдено.КоличествоНайденныхАналогов + ")","");
		
	КонецЦикла;
	
	Если ТаблицаНайдено.Количество() > 0 Тогда
		ТаблицаНайдено.Сортировать("КоличествоНайденныхАналогов УБЫВ");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с контактной информацией

&НаКлиенте
Процедура ЗаполнитьПоляВЗаписиПоПредставлениюТелефона(Представление, СписокПолей)
	
	текСтр = СокрЛП(Представление);
	СписокПолей.Очистить();
	КодСтраны     = "";
	КодГорода     = "";
	НомерТелефона = "";
	Добавочный    = "";
	Комментарий   = "";
	
	// вырежем добавочный номер с комментарием
	ПозДоб = Найти(ВРЕГ(текСтр), "ДОБ.");
	Если ПозДоб <> 0 Тогда
		ДобавочныйСКомментарием = СокрЛП(Сред(текСтр, ПозДоб+4));
		
		текСтр = СокрЛП(Лев(текСтр, ПозДоб-1));
		
		Если Прав(текСтр, 1) = "," Тогда
			текСтр = Лев(текСтр, СтрДлина(текСтр)-1);
		КонецЕсли;
		
		ПозДоб = Найти(ВРЕГ(ДобавочныйСКомментарием), ", ");
		
		Если ПозДоб <> 0 Тогда
			Добавочный = СокрЛП(Лев(ДобавочныйСКомментарием, ПозДоб-1));
			Комментарий = СокрЛП(Сред(ДобавочныйСКомментарием, ПозДоб+2));
		Иначе
			Добавочный = ДобавочныйСКомментарием;
		КонецЕсли;
		
	КонецЕсли;
	
	// вырежем код города
	Поз = Найти(текСтр, "(");
	Если Поз <> 0 Тогда
		КодСтраны = СокрЛП(Лев(текСтр, Поз-1));
		
		текСтр = СокрЛП(Сред(текСтр, Поз+1));
		Поз = Найти(текСтр, ")");
		
		Если Поз <> 0 Тогда
			КодГорода = СокрЛП(Лев(текСтр, Поз-1));
			текСтр = СокрЛП(Сред(текСтр, Поз+1));
		КонецЕсли;
	КонецЕсли;
	
	Поз = Найти(текСтр, ", ");
	// Если добавочного номера нет - ориентируемся по номеру телефона и комментарию
	Если ПозДоб = 0 И Поз <> 0 Тогда
		// вырежем комментарий
		НомерТелефона = СокрЛП(Лев(текСтр, Поз-1));
		Комментарий = СокрЛП(Сред(текСтр, Поз+2));
	Иначе
		// все оставшееся это номер
		НомерТелефона = текСтр;
	КонецЕсли;
	
	// Поправим представление
	Представление = ПредставлениеТелефона(КодСтраны, КодГорода, НомерТелефона, Добавочный, Комментарий);
	СписокПолей.Добавить(КодСтраны,     "КодСтраны");
	СписокПолей.Добавить(КодГорода,     "КодГорода");
	СписокПолей.Добавить(НомерТелефона, "НомерТелефона");
	СписокПолей.Добавить(Добавочный,    "Добавочный");
	СписокПолей.Добавить(Комментарий,   "Комментарий");
	
КонецПроцедуры 

&НаКлиенте
Функция ПредставлениеТелефона(КодСтраны, КодГорода, НомерТелефона, Добавочный, Комментарий)
	
	Представление = СокрЛП(КодСтраны);
	
	Если Не ПустаяСтрока(КодГорода) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + "(" + СокрЛП(КодГорода) + ")";
	КонецЕсли;
	
	Если Не ПустаяСтрока(НомерТелефона) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", " ") + СокрЛП(НомерТелефона);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Добавочный) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + "доб. " + СокрЛП(Добавочный);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		Представление = Представление + ?(ПустаяСтрока(Представление), "", ", ") + СокрЛП(Комментарий);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораТелефонаИОбработатьРезультат(ВидКонтактнойИнформации, ИмяРеквизитаПредставление, ИмяРеквизитаЗначениеПолей, Заголовок = "");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Вид",ВидКонтактнойИнформации);
	СтруктураПараметров.Вставить("Представление",ЭтаФорма[ИмяРеквизитаПредставление]);
	СтруктураПараметров.Вставить("ЗначенияПолей",ЭтаФорма[ИмяРеквизитаЗначениеПолей]);
	Если НЕ ПустаяСтрока(Заголовок) Тогда
		СтруктураПараметров.Вставить("Автозаголовок",Ложь);
		СтруктураПараметров.Вставить("Заголовок",Заголовок);
	КонецЕсли;	
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.ВводТелефона",СтруктураПараметров);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("Представление") Тогда
			ЭтаФорма[ИмяРеквизитаПредставление] = Результат.Представление;
		КонецЕсли;
		Если Результат.Свойство("ЗначенияПолей") Тогда
			ЭтаФорма[ИмяРеквизитаЗначениеПолей] = Результат.ЗначенияПолей;
		КонецЕсли;
		
		ОтключитьОтметкуНезаполненного();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораАдресаИОбработатьРезультат(Элемент, ВидКонтактнойИнформации, ИмяРеквизитаПредставление, ИмяРеквизитаЗначенияПолей)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗначенияПолей",                ЭтаФорма[ИмяРеквизитаЗначенияПолей]);
	СтруктураПараметров.Вставить("Вид",                          ВидКонтактнойИнформации);
	СтруктураПараметров.Вставить("Представление",                ЭтаФорма[ИмяРеквизитаПредставление]);
	СтруктураПараметров.Вставить("РедактированиеТолькоВДиалоге", Не Элемент.РедактированиеТекста);
	СтруктураПараметров.Вставить("АдресТолькоРоссийский",        ВидКомпании = 0);
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.ВводАдреса",СтруктураПараметров);
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("Представление") Тогда
			ЭтаФорма[ИмяРеквизитаПредставление] = Результат.Представление;
		КонецЕсли;
		Если Результат.Свойство("ЗначенияПолей") Тогда
			ЭтаФорма[ИмяРеквизитаЗначенияПолей] = Результат.ЗначенияПолей;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КорректноВведенНомерТелефона(СписокЗначенияПолей)
	
	НомерТелефона = "";
	КодГорода = "";
	КодСтраны = "";
	
	Для каждого ЭлементСписка Из СписокЗначенияПолей Цикл
		Если ЭлементСписка.Представление = "НомерТелефона" Тогда
			НомерТелефона = ЭлементСписка.Значение;
		КонецЕсли;
		Если ЭлементСписка.Представление = "КодГорода" Тогда
			КодГорода = ЭлементСписка.Значение;
		КонецЕсли;
		Если ЭлементСписка.Представление = "КодСтраны" Тогда
			КодСтраны = ЭлементСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(КодСтраны) Тогда
		КодСтраны = СокрЛП(КодСтраны);
		Если ЛЕВ(КодСтраны,1)= "+" Тогда
			КодСтраны = Прав(КодСтраны, СтрДлина(КодСтраны)-1);
		КонецЕсли;
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодСтраны) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КодГорода) Тогда
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодГорода) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(НомерТелефона) Тогда
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерТелефона) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаТабличнойЧасти, ЗначенияПолей)
	
	КодСтраны = "";
	КодГорода = "";
	НомерТелефона = "";
	
	Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
		Если ВРег(ЗначениеПоля.Представление) = "КОДСТРАНЫ" Тогда
			КодСтраны = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "КОДГОРОДА" Тогда
			КодГорода = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "НОМЕРТЕЛЕФОНА" Тогда
			НомерТелефона = ЗначениеПоля.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если Лев(КодСтраны, 1) = "+" Тогда
		КодСтраны = Сред(КодСтраны, 2);
	КонецЕсли;
	
	Поз = Найти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	Поз = Найти(НомерТелефона, Символы.ПС);
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = НомерТелефонаБезРазделителя(НомерТелефона);
	СтрокаТабличнойЧасти.НомерТелефона         = НомерТелефонаБезРазделителя(КодСтраны + КодГорода + НомерТелефона);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаТабличнойЧасти, ЗначенияПолей)
	
	Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
		Если ВРег(ЗначениеПоля.Представление) = "СТРАНА" Тогда
			СтрокаТабличнойЧасти.Страна = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "РЕГИОН" Тогда
			СтрокаТабличнойЧасти.Регион = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "ГОРОД" Тогда
			СтрокаТабличнойЧасти.Город = ЗначениеПоля.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НомерТелефонаБезРазделителя(Знач СтрНомер)
	
	Поз = Найти(СтрНомер, ",");
	Если Поз <> 0 Тогда
		СтрНомер = Лев(СтрНомер, Поз-1);
	КонецЕсли;
	
	СтрНомер = СтрЗаменить(СтрНомер, "-", "");
	СтрНомер = СтрЗаменить(СтрНомер, " ", "");
	СтрНомер = СтрЗаменить(СтрНомер, "+", "");

	Возврат СтрНомер;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СписокПолейВСтроку(СоответствиеПолей)
	
	Результат = "";
	Для Каждого Элемент Из СоответствиеПолей Цикл
		
		Значение = Элемент.Значение;
		Если ПустаяСтрока(Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + ?(Результат = "", "", Символы.ПС) + 
			Элемент.Представление + "=" + СтрЗаменить(Значение, Символы.ПС, Символы.ПС + Символы.Таб);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОбработатьЭлементыРедактированияКонтактнойИнформации()

	МассивВидовКИ = Новый Массив;
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Ссылка В(&МассивВидовКонтактнойИнформации)
	|	И ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге";
	
	Запрос.УстановитьПараметр("МассивВидовКонтактнойИнформации",МассивВидовКИ);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица Тогда
			Элементы.МобильныйТелефонКЛ.РедактированиеТекста = Ложь;
			Элементы.МобильныйТелефонКЛ.ЦветФона = WebЦвета.Кремовый;
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица Тогда
			Элементы.ТелефонКЛ.РедактированиеТекста = Ложь;
			Элементы.ТелефонКЛ.ЦветФона = WebЦвета.Кремовый;
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера Тогда
			Элементы.ТелефонПартнера.РедактированиеТекста = Ложь;
			Элементы.ТелефонПартнера.ЦветФона = WebЦвета.Кремовый;
			Элементы.ТелефонПартнераФизЛицо.РедактированиеТекста = Ложь;
			Элементы.ТелефонПартнераФизЛицо.ЦветФона = WebЦвета.Кремовый;
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
			Элементы.ФактическийАдрес.РедактированиеТекста = Ложь;
			Элементы.ФактическийАдрес.ЦветФона = WebЦвета.Кремовый;
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
			Элементы.ЮридическийАдрес.РедактированиеТекста = Ложь;
			Элементы.ЮридическийАдрес.ЦветФона = WebЦвета.Кремовый;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиентеНаСервереБезКонтекста
Функция ФИО_ОднойСтрокой(Фамилия,Имя,Отчество)
	
	Возврат СокрЛП(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество));
	
КонецФункции

&НаКлиенте
Процедура ОткрытьНайдено()
	
	ТекущиеДанные =  Элементы.ТаблицаНайдено.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьЗначение(ТекущиеДанные.Партнер);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРабочееНаименование()
	
	Если ПустаяСтрока(ПолноеЮридическоеНаименование) Тогда
		Если УказыватьЮридическиеРеквизиты Тогда
			Если ЭтоКомпания = 1 Тогда
				ПолноеЮридическоеНаименование = ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
			КонецЕсли;
		КонецЕсли
	КонецЕсли;
	
	Если НаОснованииДанныхРозничногоПокупателя Тогда
		ЗаголовокДекорации = НСтр("ru = 'Укажите прочие доступные сведения о розничном покупателе:'");
	Иначе
		ЗаголовокДекорации = НСтр("ru = 'Укажите прочие доступные сведения о партнере '");
	КонецЕсли;
	
	Если ЭтоКомпания = 0 Тогда
		НаименованиеПартнераДляЗаголовка = ПолноеНаименование;
	Иначе
		НаименованиеПартнераДляЗаголовка = ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
	КонецЕсли;
	
	Название = НаименованиеПартнераДляЗаголовка;
	
	Элементы.ДекорацияДополнительныеСведения.Заголовок = ЗаголовокДекорации + НаименованиеПартнераДляЗаголовка + ":";
	Элементы.ДекорацияБанковскиеСведения.Заголовок = 
		СтрЗаменить(Элементы.ДекорацияБанковскиеСведения.Заголовок, "#НаименованиеПартнера#", НаименованиеПартнераДляЗаголовка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборТаблицаРасшифровкиНайдено()
	
	ТекущиеДанные = Элементы.ТаблицаНайдено.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ТаблицаРасшифровкаНайдено.ОтборСтрок = Новый ФиксированнаяСтруктура("Партнер", ТекущиеДанные.Партнер);
	
КонецПроцедуры

&НаКлиенте
Функция ПервичнаяИнформацияЗаполненаНеправильно()
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если ЭтоКомпания = 0 Тогда
		Если ИспользуютсяТолькоПартнеры Тогда
			Если ПустаяСтрока(ПолноеЮридическоеНаименование) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Не указано сокращенное юр. наименование партнера'"),"ПолноеЮридическоеНаименование");
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(ПолноеНаименование) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Не указано публичное наименование партнера'"),"ПолноеНаименование");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЭтоКомпания = 1 Тогда
		Если ПустаяСтрока(ФамилияПартнера) Тогда
			ВывестиСообщениеПользователю(НСтр("ru = 'Не указано фамилия партнера'"),"ФамилияПартнера");
			Отказ = Истина;
		КонецЕсли;
		Если ПустаяСтрока(ИмяПартнера) Тогда
			ВывестиСообщениеПользователю(НСтр("ru = 'Не указано имя партнера'"),"ИмяПартнера");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	//Чечин Петр: указание информации не всегда возможно. в итоге вводят формальную информаци.
	//			  и создают дубли партнеров.
	//Если ЭтоКомпания = 0 Тогда
	//	Если ПустаяСтрока(АдресЭППартнера) И ПустаяСтрока(ТелефонПартнера) Тогда
	//		Если (УказатьДанныеКонтактногоЛица И ЭтоКомпания = 0) Тогда
	//			
	//			Если ПустаяСтрока(ТелефонКЛ) И ПустаяСтрока(МобильныйТелефонКЛ) И ПустаяСтрока(АдресЭПКЛ) Тогда
	//				
	//				ВывестиСообщениеПользователю(НСтр("ru = 'Необходимо указать хотя бы одно значение контактной информации'"),"АдресЭППартнера");
	//				Отказ = Истина;
	//				
	//			КонецЕсли;
	//			
	//		Иначе
	//			
	//			ВывестиСообщениеПользователю(НСтр("ru = 'Необходимо указать хотя бы одно значение контактной информации'"),"АдресЭППартнера");
	//			Отказ = Истина;
	//			
	//		КонецЕсли;
	//		
	//	КонецЕсли;
	//	
	//Иначе
	//	
	//	Если ПустаяСтрока(АдресЭППартнераФизЛицо) И ПустаяСтрока(ТелефонПартнераФизЛицо) Тогда
	//		
	//		ВывестиСообщениеПользователю(НСтр("ru = 'Необходимо указать хотя бы одно значение контактной информации'"),"АдресЭППартнераФизЛицо");
	//		Отказ = Истина;
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
	Если УказыватьЮридическиеРеквизиты Тогда
		
		Если Не ИспользуютсяТолькоПартнеры И ЭтоКомпания = 0 Тогда
			Если ПустаяСтрока(ПолноеЮридическоеНаименование) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Не указано сокращенное юр. наименование'"),"НаименованиеКонтрагента");
				Отказ = Истина; 
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоКомпания = 0 И ВидКомпании = 0 Тогда
			Если ПустаяСтрока(ИНН) И Не ПустаяСтрока(КПП) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Указан КПП, но не указан ИНН'"),"ИНН");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоКомпания = 0 И НЕ ВидКомпании = 1 И НЕ УпрощенныйВводДоступен Тогда
			Если ПустаяСтрока(ИНН) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Не указано значение ИНН'"),"ИНН");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоКомпания = 1 И УказыватьЮридическиеРеквизиты И УказатьДокументУдостоверяющийЛичность Тогда
			Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Не указано вид документа удостоверяющего личность'"),"ВидДокумента");
				Отказ = Истина
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УказатьДанныеКонтактногоЛица И ЭтоКомпания = 0 Тогда
		
		Если ПустаяСтрока(ФамилияКЛ) Тогда
			ВывестиСообщениеПользователю(НСтр("ru = 'Не указана фамилия контактного лица'"),"ФамилияКЛ");
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяКл) Тогда
			ВывестиСообщениеПользователю(НСтр("ru = 'Не указано имя контактного лица'"),"ИмяКЛ");
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТелефонКЛ) И ПустаяСтрока(АдресЭПКЛ) И ПустаяСтрока(МобильныйТелефонКЛ) Тогда
			ВывестиСообщениеПользователю(НСтр("ru = 'Необходимо указать хотя бы одно значение контактной инофрмации контактного лица'"),"АдресЭПКЛ");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		//Проверка ИНН
		Если УказыватьЮридическиеРеквизиты И (ЭтоКомпания = 0 И ВидКомпании <> 1 И НЕ ПустаяСтрока(ИНН)) Тогда
			ТекстСообщения = "";
			Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, ?(ЭтоКомпания = 0, ?(ВидКомпании = 0, Истина, Ложь), Ложь), ТекстСообщения) Тогда
				Отказ = Истина;
				ВывестиСообщениеПользователю(ТекстСообщения,"ИНН");
			КонецЕсли;
		ИначеЕсли УказыватьЮридическиеРеквизиты И ЭтоКомпания = 1 И (НЕ ПустаяСтрока(ИННПартнерФизЛицо)) Тогда
			ТекстСообщения = "";
			Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИННПартнерФизЛицо, Ложь, ТекстСообщения) Тогда
				Отказ = Истина;
				ВывестиСообщениеПользователю(ТекстСообщения,"ИННПартнерФизЛицо");
			КонецЕсли;
		КонецЕсли;
		
		//Проверка КПП
		Если УказыватьЮридическиеРеквизиты И ЭтоКомпания = 0 И ВидКомпании = 0 И НЕ ПустаяСтрока(КПП) Тогда
			ТекстСообщения = "";
			Если НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(КПП, ТекстСообщения) Тогда
				Отказ = Истина;
				ВывестиСообщениеПользователю(ТекстСообщения,"КПП");
			КонецЕсли;
		КонецЕсли;
		
		//ПроверкаОКПО
		Если УказыватьЮридическиеРеквизиты И ЭтоКомпания = 0 И ВидКомпании <> 1 И Не ПустаяСтрока(КодПоОКПО) Тогда
			ТекстСообщения = "";
			Если НЕ РегламентированныеДанныеКлиентСервер.КодПоОКПОСоответствуетТребованиям(КодПоОКПО, ?(ЭтоКомпания = 0, ?(ВидКомпании <> 2, Истина, Ложь), Ложь),ТекстСообщения) Тогда
				Отказ = Истина;
				ВывестиСообщениеПользователю(ТекстСообщения,"КодПоОКПО");
			КонецЕсли;
		КонецЕсли;
		
		//проверка корректности адресов электронной почты
		Если  НЕ ПустаяСтрока(АдресЭППартнера) И ЭтоКомпания = 0 Тогда
			Если ОбщегоНазначенияУТКлиентСервер.ПроверитьЗаполнениеПочтовогоАдреса(АдресЭППартнера) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Неверный формат адреса электронной почты партнера'"), "АдресЭППартнера");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если  НЕ ПустаяСтрока(АдресЭППартнераФизЛицо) И ЭтоКомпания = 1 Тогда
			Если ОбщегоНазначенияУТКлиентСервер.ПроверитьЗаполнениеПочтовогоАдреса(АдресЭППартнераФизЛицо) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Неверный формат адреса электронной почты партнера'"), "АдресЭППартнераФизЛицо");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если  УказатьДанныеКонтактногоЛица И НЕ ПустаяСтрока(АдресЭПКЛ) И ЭтоКомпания = 0 Тогда
			Если ОбщегоНазначенияУТКлиентСервер.ПроверитьЗаполнениеПочтовогоАдреса(АдресЭПКЛ) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Неверный формат адреса электронной почты контактного лица'"), "АдресЭПКЛ");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		//Проверка данных физического лица
		Если  ЭтоКомпания = 1 И УказыватьЮридическиеРеквизиты И УказатьДокументУдостоверяющийЛичность Тогда
			
			ТекстОшибки = "";
			Отказ = Не ФизическиеЛицаКлиентСервер.СерияДокументаУказанаПравильно(ВидДокумента, СерияДокумента, ТекстОшибки) Или Отказ;
			Если Не ПустаяСтрока(ТекстОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "СерияДокумента");
			КонецЕсли;
			
			ТекстОшибки = "";
			Отказ = Не ФизическиеЛицаКлиентСервер.НомерДокументаУказанПравильно(ВидДокумента, НомерДокумента, ТекстОшибки) Или Отказ;
			Если Не ПустаяСтрока(ТекстОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НомерДокумента");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Функция ДополнительныеСведенияЗаполненыНеправильно()
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если НЕ Клиент И НЕ Поставщик И НЕ ПрочиеОтношения И НЕ Конкурент Тогда
		ВывестиСообщениеПользователю(НСтр("ru = 'Необходимо определить хотя бы один тип отношений'"),"Клиент");
		Отказ = Истина;
	КонецЕсли;
	
	Если ИспользуютсяГруппыДоступаПартнеров
	 И ГруппаДоступа = ПредопределенноеЗначение("Справочник.ГруппыДоступаПартнеров.ПустаяСсылка") Тогда
		ВывестиСообщениеПользователю(НСтр("ru = 'Необходимо указать группу доступа партнера'"),"ГруппаДоступа");
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Функция РасчетныйСчетЗаполненНеправильно()
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если УказатьБанковскийСчетКонтрагента Тогда
		
		Если ПустаяСтрока(НомерСчета) Тогда
			ВывестиСообщениеПользователю(НСтр("ru = 'Необходимо указать номер банковского счета'"),"НомерСчета");
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
			ВывестиСообщениеПользователю(НСтр("ru = 'Необходимо указать валюту денежных средств'"),"ВалютаДенежныхСредств");
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(БИКБанка) Тогда
			ВывестиСообщениеПользователю(НСтр("ru = 'Необходимо указать БИК банка'"),"БИКБанка");
			Отказ = Истина;
		КонецЕсли;
		
		Если ИспользуетсяБанкДляРасчетов Тогда
			
			Если ПустаяСтрока(БИКБанкаДляРасчетов) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Необходимо указать БИК банка для расчетов'"),"БИКБанкаДляРасчетов");
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Функция УсловияПереходаПоСтраницамНеВыполнены(Команда)
	
	Отказ = Ложь;
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПервичнаяИнформация Тогда
		Если Команда.Имя = "Далее" Тогда
			Отказ = ПервичнаяИнформацияЗаполненаНеправильно();
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения Тогда
		Если Команда.Имя = "Далее" Тогда
			Отказ = ДополнительныеСведенияЗаполненыНеправильно();
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРасчетныйСчет Тогда
		Если Команда.Имя = "Далее" Тогда
			Отказ = РасчетныйСчетЗаполненНеправильно();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьНеобходимыеДействияПриПереходеПоСтраницам(Команда)
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПервичнаяИнформация Тогда
		Если Команда.Имя = "Далее" Тогда
			//Чечин Петр.
			Если ит_ПрерватьРаботуМастера() Тогда
				Возврат;
			КонецЕсли;
			
			ВыполнитьПоискПоПервичнойИнформации();
			Если ТаблицаНайдено.Количество() > 0 Тогда
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНайдено;
				УстановитьОтборТаблицаРасшифровкиНайдено();
				ТекущийЭлемент = Элементы.ТаблицаНайдено;
			Иначе
				ЗаполнитьРабочееНаименование();
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения;
				УправлениеДоступностьюДополнительныеСведения();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНайдено Тогда
		Если Команда.Имя = "Далее" Тогда
			Если ВыборПользователяПоРезультатамНайдено() Тогда
				Возврат;
			КонецЕсли;
			ЗаполнитьРабочееНаименование();
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения;
			УправлениеДоступностьюДополнительныеСведения();
		ИначеЕсли Команда.Имя = "Назад" Тогда
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПервичнаяИнформация 
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения Тогда
		Если Команда.Имя = "Далее" Тогда
			Если (НЕ НаОснованииКонтрагента) И (УказыватьЮридическиеРеквизиты) Тогда
				УправлениеДоступностьюРасчетныйСчет();
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРасчетныйСчет;
			Иначе
				ЗаполнитьИтоговуюИнформацию();
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаФинальная;
			КонецЕсли;
		ИначеЕсли Команда.Имя = "Назад" Тогда
			Если ТаблицаНайдено.Количество() > 0 Тогда
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНайдено;
			Иначе
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПервичнаяИнформация;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРасчетныйСчет Тогда
		
		Если Команда.Имя = "Далее" Тогда
			ЗаполнитьИтоговуюИнформацию();
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаФинальная;
		ИначеЕсли Команда.Имя = "Назад" Тогда
			Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения;
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаФинальная Тогда
		Если Команда.Имя = "Далее" Тогда
			СписокСозданных = Новый СписокЗначений;
			СозданныйПартнер = ЗаписатьПартнераИСвязанныеДанные(СписокСозданных);
			Для каждого ЭлементСписка Из СписокСозданных Цикл
				ПоказатьОповещениеПользователя("Создание",ЭлементСписка.Значение,ЭлементСписка.Представление);
			КонецЦикла;
			Если СписокСозданных.Количество() > 0 Тогда
				Если НаОснованииКонтрагента И ЗначениеЗаполнено(КонтрагентОснование) Тогда
					ОповеститьОбИзменении(КонтрагентОснование);
				ИначеЕсли ОбъектОснование = Неопределено Тогда
					Оповестить("ВыборПартнераНайдено",Новый Структура("Партнер,ОсновнойМенеджер",СозданныйПартнер,ОсновнойМенеджер));
				Иначе
					ВзаимодействияКлиент.КонтактПослеЗаписи(
						ЭтаФорма,
						Новый Структура("Ссылка, Наименование", СозданныйПартнер, СписокСозданных[0].Представление),
						Новый Структура,"Партнеры");
				КонецЕсли;
			КонецЕсли;
			Если ОткрытьПослеСоздания Тогда
				ОткрытьЗначение(СозданныйПартнер);
			КонецЕсли;
			Закрыть(СозданныйПартнер);
		ИначеЕсли Команда.Имя = "Назад" Тогда
			Если (НЕ НаОснованииКонтрагента) И (УказыватьЮридическиеРеквизиты) Тогда
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРасчетныйСчет;
			Иначе
				Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьПартнераИСвязанныеДанные(СписокСозданных)

	НачатьТранзакцию();
	
	//Партнер
	ОбъектПартнер = Справочники.Партнеры.СоздатьЭлемент();
	ОбъектПартнер.Наименование                          = Название;
	ОбъектПартнер.Родитель                              = Родитель;
	ОбъектПартнер.БизнесРегион                          = БизнесРегион;
	ОбъектПартнер.ГруппаДоступа                         = ГруппаДоступа;
	ОбъектПартнер.ДатаРегистрации                       = ТекущаяДата();
	ОбъектПартнер.Клиент                                = Клиент;
	ОбъектПартнер.Конкурент                             = Конкурент;
	ОбъектПартнер.Поставщик                             = Поставщик;
	ОбъектПартнер.ОбслуживаетсяТорговымиПредставителями = ОбслуживаетсяТорговымиПредставителями;
	ОбъектПартнер.ПрочиеОтношения                       = ПрочиеОтношения;
	ОбъектПартнер.ОсновнойМенеджер                      = ОсновнойМенеджер;
	ОбъектПартнер.НаименованиеПолное                    = ?(ИспользуютсяТолькоПартнеры, ПолноеЮридическоеНаименование,
	                                                      ?(ЭтоКомпания = 0, ПолноеНаименование, ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера)));
	ОбъектПартнер.ЮрФизЛицо                             = ?(ЭтоКомпания = 0, Перечисления.КомпанияЧастноеЛицо.Компания, Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
	ОбъектПартнер.Пол                                   = Пол;
	ОбъектПартнер.ДатаРождения                          = ДатаРождения;
	ОбъектПартнер.Перевозчик                            = Перевозчик;
	
	//контактная информация партнера
	Если НЕ ПустаяСтрока(ФактическийАдрес) Тогда
		НоваяСтрокаКИ = ОбъектПартнер.КонтактнаяИнформация.Добавить();
		НоваяСтрокаКИ.Тип				= Перечисления.ТипыКонтактнойИнформации.Адрес;
		НоваяСтрокаКИ.Вид				= Справочники.ВидыКонтактнойИнформации.АдресПартнера;
		НоваяСтрокаКИ.Представление		= ФактическийАдрес;
		НоваяСтрокаКИ.ЗначенияПолей		= СписокПолейВСтроку(ФактическийАдресЗначенияПолей);
		ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрокаКИ,ФактическийАдресЗначенияПолей);
	КонецЕсли;
	
	Если ЭтоКомпания = 0 Тогда
		ИмяРеквизитаТелефон = "ТелефонПартнера";
		ИмяРеквизитаТелефонЗначенияПолей = "ТелефонПартнераЗначенияПолей";
		ИмяРеквизитаАдресЭП = "АдресЭППартнера";
	Иначе
		ИмяРеквизитаТелефон = "ТелефонПартнераФизЛицо";
		ИмяРеквизитаТелефонЗначенияПолей = "ТелефонПартнераФизЛицоЗначенияПолей";
		ИмяРеквизитаАдресЭП = "АдресЭППартнераФизЛицо";
	КонецЕсли;
	
	Если ЭтаФорма[ИмяРеквизитаТелефонЗначенияПолей].Количество()> 0 Тогда
		НоваяСтрокаКИ = ОбъектПартнер.КонтактнаяИнформация.Добавить();
		НоваяСтрокаКИ.Тип 				= Перечисления.ТипыКонтактнойИнформации.Телефон;
		НоваяСтрокаКИ.Вид				= Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		НоваяСтрокаКИ.Представление		= ЭтаФорма[ИмяРеквизитаТелефон];
		НоваяСтрокаКИ.ЗначенияПолей		= СписокПолейВСтроку(ЭтаФорма[ИмяРеквизитаТелефонЗначенияПолей]);
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрокаКИ,ЭтаФорма[ИмяРеквизитаТелефонЗначенияПолей]);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ЭтаФорма[ИмяРеквизитаАдресЭП]) Тогда
		НоваяСтрокаКИ = ОбъектПартнер.КонтактнаяИнформация.Добавить();
		НоваяСтрокаКИ.Тип				= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		НоваяСтрокаКИ.Вид 				= Справочники.ВидыКонтактнойИнформации.EmailПартнера;
		НоваяСтрокаКИ.Представление 	= ЭтаФорма[ИмяРеквизитаАдресЭП];
		НоваяСтрокаКИ.АдресЭП 			= ЭтаФорма[ИмяРеквизитаАдресЭП];
		Поз = Найти(ЭтаФорма[ИмяРеквизитаАдресЭП], "@");
		Если Поз <> 0 Тогда
			НоваяСтрокаКИ.ДоменноеИмяСервера = Сред(ЭтаФорма[ИмяРеквизитаАдресЭП], Поз+1);
		КонецЕсли;
	КонецЕсли;
	
	ОбъектПартнер.Записать();
	СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(ОбъектПартнер.Ссылка),ОбъектПартнер.Наименование);
	
	//зафиксировать первичный интерес
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") И ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда

		УстановитьПривилегированныйРежим(Истина);
		Запись = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
		Запись.Партнер                    = ОбъектПартнер.Ссылка;
		Запись.КаналПервичногоИнтереса    = КаналПервичногоИнтереса;
		Запись.ИсточникПервичногоИнтереса = ИсточникПервичногоИнтереса;
		Запись.Записать();
		УстановитьПривилегированныйРежим(Ложь);

	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сегмент) И Сегмент.СпособФормирования = Перечисления.СпособыФормированияСегментов.ФормироватьВручную Тогда
		
		СегментыСервер.ДобавитьПартнераВСегмент(Сегмент, ОбъектПартнер.Ссылка);
		
	КонецЕсли;
	
	//Контрагент
	Если (НЕ НаОснованииКонтрагента) И УказыватьЮридическиеРеквизиты Тогда
		
		ОбъектКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Если НЕ ИспользуютсяТолькоПартнеры Тогда
			ОбъектКонтрагент.Наименование = ?(ЭтоКомпания = 0,НаименованиеКонтрагента,
			                                ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера));
		Иначе
			ОбъектКонтрагент.Наименование = ?(ЭтоКомпания = 0,Название,ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера));
		КонецЕсли;
		ОбъектКонтрагент.ЮрФизЛицо          = ТипЮрФизЛица();
		ОбъектКонтрагент.ИНН                = ?(ЭтоКомпания = 0,?(ВидКомпании <> 1,ИНН,""),ИННПартнерФизЛицо);
		ОбъектКонтрагент.КПП                = ?(ЭтоКомпания = 0 И ВидКомпании <> 1,КПП,"");
		ОбъектКонтрагент.КодПоОКПО          = ?(ЭтоКомпания = 0 И ВидКомпании <> 1,КодПоОКПО,"");
		ОбъектКонтрагент.Партнер            = ОбъектПартнер.Ссылка;
		ОбъектКонтрагент.НаименованиеПолное = ?(ЭтоКомпания = 0,ПолноеЮридическоеНаименование,ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера));
		
		ЕстьДубльПоИННКПП = НЕ ПустаяСтрока(ОбъектКонтрагент.ИНН) И 
			ПартнерыИКонтрагенты.ИННКППУжеИспользуетсяВИнформационнойБазе(ОбъектКонтрагент.ИНН, ОбъектКонтрагент.КПП) <> Неопределено;
		
		Если НЕ ЕстьДубльПоИННКПП Тогда
			
			//контактная информация контрагента
			Если НЕ ПустаяСтрока(ФактическийАдрес) Тогда
				НоваяСтрокаКИ = ОбъектКонтрагент.КонтактнаяИнформация.Добавить();
				НоваяСтрокаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Адрес;
				НоваяСтрокаКИ.Вид           = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				НоваяСтрокаКИ.Представление = ФактическийАдрес;
				НоваяСтрокаКИ.ЗначенияПолей = СписокПолейВСтроку(ФактическийАдресЗначенияПолей);
				ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрокаКИ, ФактическийАдресЗначенияПолей);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ЮридическийАдрес) Тогда
				НоваяСтрокаКИ = ОбъектКонтрагент.КонтактнаяИнформация.Добавить();
				НоваяСтрокаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Адрес;
				НоваяСтрокаКИ.Вид           = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				НоваяСтрокаКИ.Представление = ЮридическийАдрес;
				НоваяСтрокаКИ.ЗначенияПолей = СписокПолейВСтроку(ЮридическийАдресЗначенияПолей);
				ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрокаКИ, ЮридическийАдресЗначенияПолей);
			КонецЕсли;
			
			Если ЭтоКомпания = 1 И НЕ ПустаяСтрока(ТелефонПартнераФизЛицо) Тогда
				НоваяСтрокаКИ = ОбъектКонтрагент.КонтактнаяИнформация.Добавить();
				НоваяСтрокаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Телефон;
				НоваяСтрокаКИ.Вид           = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
				НоваяСтрокаКИ.Представление = ТелефонПартнераФизЛицо;
				НоваяСтрокаКИ.ЗначенияПолей = СписокПолейВСтроку(ТелефонПартнераФизЛицоЗначенияПолей);
				ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрокаКИ, ТелефонПартнераФизЛицоЗначенияПолей);
			КонецЕсли;
			
			ОбъектКонтрагент.Записать();
			СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(ОбъектКонтрагент.Ссылка),ОбъектКонтрагент.Наименование);
			
			Если УказатьБанковскийСчетКонтрагента Тогда
				
				БанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
				БанковскийСчет.Владелец = ОбъектКонтрагент.Ссылка;
				БанковскийСчет.Наименование = АвтоНаименованиеБанковскогоСчета();
				БанковскийСчет.ВалютаДенежныхСредств = ВалютаДенежныхСредств;
				БанковскийСчет.НомерСчета = НомерСчета;
				БанковскийСчет.Банк = Банк;
				БанковскийСчет.БанкДляРасчетов = БанкДляРасчетов;
				
				БанковскийСчет.Записать();
				СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(БанковскийСчет.Ссылка), БанковскийСчет.Наименование);
				
			КонецЕсли;
			
			Если ЭтоКомпания = 1 И УказыватьЮридическиеРеквизиты И УказатьДокументУдостоверяющийЛичность Тогда
				
				МенеджерЗаписи = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Активность                               = Истина;
				МенеджерЗаписи.Период                                   = ТекущаяДата();
				МенеджерЗаписи.Физлицо                                  = ОбъектКонтрагент.Ссылка;
				МенеджерЗаписи.ВидДокумента                             = ВидДокумента;
				МенеджерЗаписи.Серия                                    = СерияДокумента;
				МенеджерЗаписи.Номер                                    = НомерДокумента;
				МенеджерЗаписи.ДатаВыдачи                               = ДатаВыдачи;
				МенеджерЗаписи.СрокДействия                             = СрокДействия;
				МенеджерЗаписи.КемВыдан                                 = КемВыданДокумент;
				МенеджерЗаписи.КодПодразделения                         = КодПодразделения;
				МенеджерЗаписи.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
				МенеджерЗаписи.Записать();
				
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ФамилияКЛ) Тогда
		
		ОбъектКонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
		ОбъектКонтактноеЛицо.Владелец 				= ОбъектПартнер.Ссылка;
		ОбъектКонтактноеЛицо.ДатаРегистрацииСвязи 	= ТекущаяДата();
		ОбъектКонтактноеЛицо.Наименование 			= ФИО_ОднойСтрокой(ФамилияКЛ, ИмяКЛ, ОтчествоКЛ);
		ОбъектКонтактноеЛицо.Автор					= Пользователи.ТекущийПользователь();
		Если Не Роль.Пустая() Тогда
			СтрокаРоли = ОбъектКонтактноеЛицо.РолиКонтактногоЛица.Добавить();
			СтрокаРоли.РольКонтактногоЛица = Роль;
		КонецЕсли;	
		
		Если Не ПустаяСтрока(АдресЭПКЛ) Тогда
			НоваяСтрокаКИ = ОбъектКонтактноеЛицо.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип				= Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НоваяСтрокаКИ.Вид 				= Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
			НоваяСтрокаКИ.Представление 	= АдресЭПКЛ;
			НоваяСтрокаКИ.АдресЭП 			= АдресЭПКЛ;
			Поз = Найти(АдресЭПКЛ, "@");
			Если Поз <> 0 Тогда
				НоваяСтрокаКИ.ДоменноеИмяСервера = Сред(АдресЭПКЛ, Поз+1);
			КонецЕсли;
		КонецЕсли;
		
		Если ТелефонКЛЗначенияПолей.Количество()> 0 Тогда
			НоваяСтрокаКИ = ОбъектКонтактноеЛицо.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип 				= Перечисления.ТипыКонтактнойИнформации.Телефон;
			НоваяСтрокаКИ.Вид				= Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
			НоваяСтрокаКИ.Представление		= ТелефонКЛ;
			НоваяСтрокаКИ.ЗначенияПолей		= СписокПолейВСтроку(ТелефонКЛЗначенияПолей);
			ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрокаКИ, ТелефонКЛЗначенияПолей);
		КонецЕсли;
		
		Если МобильныйТелефонКЛЗначенияПолей.Количество()> 0 Тогда
			НоваяСтрокаКИ = ОбъектКонтактноеЛицо.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип				= Перечисления.ТипыКонтактнойИнформации.Телефон;
			НоваяСтрокаКИ.Вид				= Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
			НоваяСтрокаКИ.Представление		= МобильныйТелефонКЛ;
			НоваяСтрокаКИ.ЗначенияПолей		= СписокПолейВСтроку(МобильныйТелефонКЛЗначенияПолей);
			ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрокаКИ, МобильныйТелефонКЛЗначенияПолей);
		КонецЕсли;
		
		ОбъектКонтактноеЛицо.Записать();
		СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(ОбъектКонтактноеЛицо.Ссылка), ОбъектКонтактноеЛицо.Наименование);
		
	КонецЕсли;
	
	Если НаОснованииКонтрагента И ЗначениеЗаполнено(КонтрагентОснование) Тогда
		
		ВыполнитьЗаписьКонтрагентаОснование(ОбъектПартнер.Ссылка, КонтрагентОснование);
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	СозданиеВыполнено = Истина;
	
	СегментыСервер.ПроверитьВходениеПартераВСегментыПриСоздании(ОбъектПартнер.Ссылка);
	
	Возврат ОбъектПартнер.Ссылка;

КонецФункции

&НаСервереБезКонтекста
Процедура ВыполнитьЗаписьКонтрагентаОснование(Партнер, Контрагент)
	
	КонтрагентОбъект = Контрагент.ПолучитьОбъект();
	КонтрагентОбъект.Партнер = Партнер;
	КонтрагентОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Функция ВыборПользователяПоРезультатамНайдено()
	
	ТекущиеДанные =  Элементы.ТаблицаНайдено.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДействиеПоРезультатамНайдено = 0 Тогда
		
		Если НаОснованииКонтрагента И ЗначениеЗаполнено(КонтрагентОснование) Тогда
			
			ВыполнитьЗаписьКонтрагентаОснование(ТекущиеДанные.Партнер, КонтрагентОснование);
			ОповеститьОбИзменении(КонтрагентОснование);
			Закрыть();
			
		ИначеЕсли ОбъектОснование = Неопределено Тогда
			
			Оповестить(
				"ВыборПартнераНайдено",
				Новый Структура("Партнер,ОсновнойМенеджер",ТекущиеДанные.Партнер,ТекущиеДанные.ОсновнойМенеджер));
			Закрыть(ТекущиеДанные.Партнер);
			
		Иначе
			
			ВзаимодействияКлиент.КонтактПослеЗаписи(
						ЭтаФорма,
						Новый Структура("Ссылка, Наименование", ТекущиеДанные.Партнер, ТекущиеДанные.Представление),
						Новый Структура,"Партнеры");
			Закрыть();
			
		КонецЕсли;
		
		Возврат Истина;
	
	ИначеЕсли ДействиеПоРезультатамНайдено = 1 Тогда
		
		Родитель = ТекущиеДанные.Партнер;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПереходПоСтраницам(Команда)
	
	Отказ = УсловияПереходаПоСтраницамНеВыполнены(Команда);
	
	Если Не Отказ Тогда
		ВыполнитьНеобходимыеДействияПриПереходеПоСтраницам(Команда)
	КонецЕсли;
	
	УправлениеСтраницамиПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеПользователю(ТекстСообщения, Поле="", ОчищатьСообщения = Ложь)
	
	Если ОчищатьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле);
	
КонецПроцедуры

&НаСервере
Процедура РазобратьФайлНаСервере(СсылкаНаФайл, ЕстьОшибка);
	
	СтруктураВозврата = Новый Структура;
	
	ЭлектронныеДокументыВнутренний.РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, ЕстьОшибка);
			
	Если Не ЕстьОшибка Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураВозврата);
		Если ЗначениеЗаполнено(НомерСчета) Тогда
			ВалютаДенежныхСредств = ДенежныеСредстваСервер.ПолучитьВалютуПоНомеруСчета(НомерСчета)
		КонецЕсли;
		Если ЗначениеЗаполнено(БИКБанка) Тогда
			Банк = Справочники.КлассификаторБанковРФ.НайтиПоКоду(БИКБанка);
			Если Не ЗначениеЗаполнено(Банк) Тогда
				ПредставлениеБанка = "";
				ТекстОшибки = НСтр("ru='В справочнике Банки не найден банк по БИК = '")+БИКБанка;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецЕсли;	
		Если ЗначениеЗаполнено(БИКБанкаДляРасчетов) Тогда
			БанкДляРасчетов = Справочники.КлассификаторБанковРФ.НайтиПоКоду(БИКБанкаДляРасчетов);
			Если Не ЗначениеЗаполнено(БанкДляРасчетов) Тогда
				ПредставлениеБанкаДляРасчетов = "";
				ТекстОшибки = НСтр("ru='В справочнике Банки не найден банк по БИК = '")+БИКБанкаДляРасчетов;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаОснованииКонтрагента(ДанныеКонтрагента,Отказ)
	
	НаОснованииКонтрагента = Истина;
	Элементы.ЭтоКомпания.Доступность = Ложь;
	Элементы.ДекорацияПервичнаяИнформацияЗагрузить.Видимость = Ложь;
	Элементы.СтраницыУказыватьЮрРеквизитыКонтрагентОснование.ТекущаяСтраница = Элементы.СтраницаНаОснованииКонтрагента;
	Элементы.СтраницыУказыватьСоздаватьКонтрагентаОснование.ТекущаяСтраница  = Элементы.СтраницаНаОснованииКонтрагентаЧастноеЛицо;
	Элементы.ГруппаЮридическиеДанные.ТолькоПросмотр = Истина;
	Элементы.ГруппаЮридическиеДанные.Доступность    = Истина;
	Элементы.ГруппаИННЧастноеЛицо.ТолькоПросмотр    = Истина;
	
	ДанныеКонтрагента = Параметры.КонтрагентОснование;
	
	Если ДанныеКонтрагента.Свойство("Ссылка") Тогда
		
		КонтрагентОснование = ДанныеКонтрагента.Ссылка;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Контрагенты.ЮрФизЛицо,
		|	Контрагенты.ИНН,
		|	Контрагенты.КодПоОКПО,
		|	Контрагенты.КПП,
		|	Контрагенты.Наименование,
		|	Контрагенты.КонтактнаяИнформация.(
		|		Вид,
		|		Представление,
		|		ЗначенияПолей
		|	),
		|	Контрагенты.Партнер,
		|	Контрагенты.НаименованиеПолное
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",ДанныеКонтрагента.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если Выборка.Партнер <> Справочники.Партнеры.НеизвестныйПартнер И Выборка.Партнер <> Справочники.Партнеры.РозничныйПокупатель Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ДанныеКонтрагента.Вставить("Название", Выборка.Наименование);
			ДанныеКонтрагента.Вставить("ИНН", Выборка.ИНН);
			ДанныеКонтрагента.Вставить("КодПоОКПО", Выборка.КодПоОКПО);
			ДанныеКонтрагента.Вставить("КПП", Выборка.КПП);
			ДанныеКонтрагента.Вставить("ЮрФизЛицо", Выборка.ЮрФизЛицо);
			ДанныеКонтрагента.Вставить("ПолноеЮридическоеНаименование",Выборка.НаименованиеПолное);
			
			ТаблицаКонтактнаяИнформация = Выборка.КонтактнаяИнформация.Выгрузить();
			
			Для каждого КонтактнаяИнформация Из ТаблицаКонтактнаяИнформация Цикл
				
				Если КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
					ВидКонтактнойИнформации = "ФактАдресКонтрагента";
				ИначеЕсли КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
					ВидКонтактнойИнформации = "ЮрАдресКонтрагента";
				ИначеЕсли КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
					ВидКонтактнойИнформации = "EmailКонтрагента";
				ИначеЕсли КонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
					ВидКонтактнойИнформации = "ТелефонКонтрагента";
				Иначе
					Продолжить;
				КонецЕсли;
				
				ДанныеКонтрагента.Вставить(ВидКонтактнойИнформации,Новый Структура("Представление, ЗначенияПолей", КонтактнаяИнформация.Представление, КонтактнаяИнформация.ЗначенияПолей));
				
			КонецЦикла;
			
		Иначе
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеКонтрагента.Вставить("ПолноеНаименование",ДанныеКонтрагента.ПолноеЮридическоеНаименование);
	
	Если ДанныеКонтрагента.Свойство("ФактАдресКонтрагента") Тогда
		
		ФактическийАдрес = ДанныеКонтрагента.ФактАдресКонтрагента.Представление;
		ФактическийАдресЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ДанныеКонтрагента.ФактАдресКонтрагента.ЗначенияПолей);
		
	КонецЕсли;
	
	Если ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		
		ЭтоКомпания = 1;
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеКонтрагента,,"Название,ИНН");
		
		ИННПартнерФизЛицо = ДанныеКонтрагента.ИНН;
		
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ДанныеКонтрагента.Название)," ");
		КоличествоПодстрок = ФИО.Количество();
		ФамилияПартнера  = ?(КоличествоПодстрок > 0,ФИО[0],"");
		ИмяПартнера      = ?(КоличествоПодстрок > 1,ФИО[1],"");
		ОтчествоПартнера = ?(КоличествоПодстрок > 2,ФИО[2],"");
		
		Если ДанныеКонтрагента.Свойство("ТелефонКонтрагента") Тогда
			
			ТелефонПартнераФизЛицо = ДанныеКонтрагента.ТелефонКонтрагента.Представление;
			ТелефонПартнераФизЛицоЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ДанныеКонтрагента.ТелефонКонтрагента.ЗначенияПолей);
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("EmailКонтрагента") Тогда
			
			АдресЭППартнераФизЛицо = ДанныеКонтрагента.EmailКонтрагента.Представление;
			
		КонецЕсли;
		
	ИначеЕсли ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		
		ЭтоКомпания = 0;
		ВидКомпании = 2;
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеКонтрагента,,"КПП");
		
		Если ДанныеКонтрагента.Свойство("ТелефонКонтрагента") Тогда
			
			ТелефонПартнера = ДанныеКонтрагента.ТелефонКонтрагента.Представление;
			ТелефонПартнераЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ДанныеКонтрагента.ТелефонКонтрагента.ЗначенияПолей);
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("EmailКонтрагента") Тогда
			
			АдресЭППартнера = ДанныеКонтрагента.EmailКонтрагента.Представление;
			
		КонецЕсли;
		
	ИначеЕсли ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		
		ЭтоКомпания = 0;
		ВидКомпании = 1;
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеКонтрагента,,"КПП,КодПоОКПО");
		НаименованиеКонтрагента = Название;
		
		Если ДанныеКонтрагента.Свойство("ЮрАдресКонтрагента") Тогда
			
			ЮридическийАдрес = ДанныеКонтрагента.ЮрАдресКонтрагента.Представление;
			ЮридическийАдресЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ДанныеКонтрагента.ЮрАдресКонтрагента.ЗначенияПолей);
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("ТелефонКонтрагента") Тогда
			
			ТелефонПартнера = ДанныеКонтрагента.ТелефонКонтрагента.Представление;
			ТелефонПартнераЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ДанныеКонтрагента.ТелефонКонтрагента.ЗначенияПолей);
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("EmailКонтрагента") Тогда
			
			АдресЭППартнера = ДанныеКонтрагента.EmailКонтрагента.Представление;
			
		КонецЕсли;
		
	Иначе
		
		ЭтоКомпания = 0;
		ВидКомпании = 0;
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеКонтрагента);
		НаименованиеКонтрагента = Название;
		
		Если ДанныеКонтрагента.Свойство("ЮрАдресКонтрагента") Тогда
			
			ЮридическийАдрес = ДанныеКонтрагента.ЮрАдресКонтрагента.Представление;
			ЮридическийАдресЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ДанныеКонтрагента.ЮрАдресКонтрагента.ЗначенияПолей);
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("ТелефонКонтрагента") Тогда
			
			ТелефонПартнера = ДанныеКонтрагента.ТелефонКонтрагента.Представление;
			ТелефонПартнераЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(ДанныеКонтрагента.ТелефонКонтрагента.ЗначенияПолей);
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("EmailКонтрагента") Тогда
			
			АдресЭППартнера = ДанныеКонтрагента.EmailКонтрагента.Представление;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АвтоНаименованиеБанковскогоСчета()
	
	СтрокаНаименования = Прав(СокрЛП(НомерСчета), 4)
		+ ?(ЗначениеЗаполнено(Банк), " в " + Строка(Банк), "")
		+ " (" + Строка(ВалютаДенежныхСредств) + ")";
	
	Возврат Лев(СтрокаНаименования, 150);
	
КонецФункции

&НаКлиенте
Функция ПредставлениеБанка(БанкДляПредставления)

	Если НЕ ЗначениеЗаполнено(БанкДляПредставления) Тогда
		Возврат "";
	Иначе
		Возврат ПредставлениеБанкаСервер(БанкДляПредставления);
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеБанкаСервер(БанкДляПредставления)
	
	ГородБанкаДляПредставления = БанкДляПредставления.Город;
	Возврат Строка(БанкДляПредставления) + ?(ПустаяСтрока(ГородБанкаДляПредставления),""," ("+ ГородБанкаДляПредставления +")");
	
КонецФункции

&НаСервере
Процедура НомерСчетаПриИзмененииСервер()
	
	Валюта = ДенежныеСредстваСервер.ПолучитьВалютуПоНомеруСчета(НомерСчета);
	Если ЗначениеЗаполнено(Валюта) Тогда
		ВалютаДенежныхСредств = Валюта;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокБанковПоРеквизитам(Поле, Значение, Банк, БИК, КоррСчет)
	
	СписокБанков = ДенежныеСредстваСервер.ПолучитьСписокБанковПоРеквизитам(
		Поле,
		Значение,
		Банк,
		БИК,
		КоррСчет
	);
	Возврат СписокБанков;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьБИКиКоррСчет(Банк, Бик, КоррСчет)
	
	ДенежныеСредстваСервер.ЗаполнитьБИКиКоррСчет(
		Банк,
		БИК,
		КоррСчет
	);
	
КонецПроцедуры