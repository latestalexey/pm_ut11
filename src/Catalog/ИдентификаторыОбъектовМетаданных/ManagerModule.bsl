#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура обновляет данные справочника по метаданным конфигурации.
//
// Параметры:
//  ЕстьИзменения - Булево (возвращаемое значение) - в этот параметр возвращается
//                  значение Истина, если производилась запись, иначе не изменяется.
//
//  ЕстьУдаленные - Булево (возвращаемое значение) - в этот параметр возвращается
//                  значение Истина, если хотя бы один элемент справочника был помечен
//                  на удаление, иначе не изменяется.
//
Процедура ОбновитьДанныеСправочника(ЕстьИзменения = Ложь, ЕстьУдаленные = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если МонопольныйРежим() Тогда
		МонопольныйРежим = Истина;
	Иначе
		МонопольныйРежим = Ложь;
		УстановитьМонопольныйРежим(Истина);
	КонецЕсли;
	
	СвойстваКоллекцийОбъектовМетаданных = СвойстваКоллекцийОбъектовМетаданных();
	СвойстваОбъектовМетаданных = СвойстваОбъектовМетаданных(СвойстваКоллекцийОбъектовМетаданных);
	СправочникМенеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.ИдентификаторыОбъектовМетаданных");
	
	// Найден - состояние, когда для объекта метаданных найден идентификатор.
	СвойстваОбъектовМетаданных.Колонки.Добавить("Найден", Новый ОписаниеТипов("Булево"));
	
	// Порядок обновления:
	// 1. Переименование объектов метаданных (с учетом нижестоящих подсистем).
	// 2. Обновление предопределенных идентификаторов (коллекций объектов метаданных).
	// 3. Обновление идентификаторов объектов метаданных, которые    имеют ключ  объекта метаданных.
	// 4. Обновление идентификаторов объектов метаданных, которые не имеют ключа объекта метаданных.
	// 5. В процессе 3 и 4 пометка удаления дублей идентификаторов (по полным именам).
	// 6. Добавление новых идентификаторов объектов метаданных.
	// 7. Обновление родителей идентификаторов объектов метаданных и запись обновленных.
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.ИдентификаторыОбъектовМетаданных");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки = Блокировка.Добавить("Константа.ПараметрыБазовойФункциональности");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Идентификаторы.Ссылка,
		|	Идентификаторы.Родитель,
		|	Идентификаторы.ПометкаУдаления,
		|	Идентификаторы.Предопределенный КАК Предопределенный,
		|	Идентификаторы.Наименование,
		|	Идентификаторы.ПорядокКоллекции,
		|	Идентификаторы.Имя,
		|	Идентификаторы.Синоним,
		|	Идентификаторы.ПолноеИмя,
		|	Идентификаторы.ПолныйСиноним,
		|	Идентификаторы.БезДанных,
		|	Идентификаторы.ЗначениеПустойСсылки,
		|	Идентификаторы.КлючОбъектаМетаданных КАК ХранилищеКлюча
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы";
		Выгрузка = Запрос.Выполнить().Выгрузить();
		Выгрузка.Колонки.Добавить("КлючОбъектаМетаданных");
		Выгрузка.Колонки.Добавить("БезКлючаОбъектаМетаданных", Новый ОписаниеТипов("Булево"));
		Выгрузка.Колонки.Добавить("ЭтоНовый",                  Новый ОписаниеТипов("Булево"));
		Выгрузка.Колонки.Добавить("Обновлен",                  Новый ОписаниеТипов("Булево"));
		Выгрузка.Колонки.Добавить("ОбъектМетаданных");
		
		// Упорядочение иденитификаторов перед обработкой.
		Для каждого Строка Из Выгрузка Цикл
			Строка.КлючОбъектаМетаданных = Строка.ХранилищеКлюча.Получить();
			
			Строка.БезКлючаОбъектаМетаданных = Строка.КлючОбъектаМетаданных = Неопределено
			                               ИЛИ Строка.КлючОбъектаМетаданных = Тип("Неопределено");
		КонецЦикла;
		Выгрузка.Сортировать("Предопределенный УБЫВ,
		                     |ПометкаУдаления ВОЗР,
		                     |БезКлючаОбъектаМетаданных ВОЗР");
		Выгрузка.Индексы.Добавить("ПолноеИмя");
		
		// Переименование полных имен перед обработкой.
		ТаблицаПереименования = ТаблицаПереименованияДляТекущейВерсии(СвойстваКоллекцийОбъектовМетаданных);
		
		Для каждого ОписаниеПереименования Из ТаблицаПереименования Цикл
			ДлинаСтарогоПолногоИмени = СтрДлина(ОписаниеПереименования.СтароеПолноеИмя);
			ЭтоПодсистема = ВРег(Лев(ОписаниеПереименования.СтароеПолноеИмя, 11)) = ВРег("Подсистема.");
			
			Для каждого Строка Из Выгрузка Цикл
				
				Если Строка.Предопределенный Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭтоПодсистема Тогда
					Если ВРег(Лев(Строка.ПолноеИмя, ДлинаСтарогоПолногоИмени))
					     = ВРег(ОписаниеПереименования.СтароеПолноеИмя) Тогда
						
						Строка.ПолноеИмя = ОписаниеПереименования.НовоеПолноеИмя
							+ Сред(Строка.ПолноеИмя, ДлинаСтарогоПолногоИмени + 1);
					КонецЕсли;
				Иначе
					Если ВРег(Строка.ПолноеИмя) = ВРег(ОписаниеПереименования.СтароеПолноеИмя) Тогда
						Строка.ПолноеИмя = ОписаниеПереименования.НовоеПолноеИмя;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		// Обработка идентификаторов объектов метаданных.
		Для каждого Свойства Из Выгрузка Цикл
			
			// Проверка и обновление свойств идентификаторов коллекций объектов метаданных.
			СвойстваКоллекции = СвойстваКоллекцийОбъектовМетаданных.Найти(
				Свойства.Ссылка, "ИдентификаторКоллекции");
			
			Если СвойстваКоллекции <> Неопределено Тогда
				ПроверитьОбновитьСвойстваКоллекции(Свойства, СвойстваКоллекции);
				Продолжить;
			КонецЕсли;
			
			Если Свойства.Предопределенный Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В справочнике ""Идентификаторы объектов метаданных""
					           |для предопределенного элемента
					           |с именем ""%1""
					           |и представлением ""%2""
					           |не найдено типа объектов метаданных.
					           |
					           |Следует удалить предопределенный элемент.'"),
					ПолучитьИмяПредопределенного(Свойства.Ссылка),
					Строка(Свойства.Ссылка));
			КонецЕсли;
			
			КлючОбъектаМетаданных = Свойства.КлючОбъектаМетаданных;
			ОбъектМетаданных = ОбъектМетаданныхПоКлючу(КлючОбъектаМетаданных);
			
			Если ОбъектМетаданных = Неопределено Тогда
				// Если объект метаданных без ключа, то его можно найти только по полному имени.
				ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Свойства.ПолноеИмя);
			Иначе
				// Если объект метаданных удалялся с целью реструктуризации, тогда
				// старый идентификатор нужно использовать для нового объекта метаданных,
				// а для старых объектов метаданных создать новые идентификаторы.
				Если ВРег(Лев(ОбъектМетаданных.Имя, СтрДлина("Удалить"))) =  ВРег("Удалить")
				   И ВРег(Лев(Свойства.Имя,         СтрДлина("Удалить"))) <> ВРег("Удалить") Тогда
					
					НовыйОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Свойства.ПолноеИмя);
					Если НовыйОбъектМетаданных <> Неопределено Тогда
						ОбъектМетаданных = НовыйОбъектМетаданных;
						КлючОбъектаМетаданных = Неопределено; // Чтобы выполнить обновление идентификатора.
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Если объект метаданных найден по ключу или полному имени,
			// тогда нужно подготовить строку свойств объекта метаданных.
			Если ОбъектМетаданных <> Неопределено Тогда
				Свойства.ОбъектМетаданных = ОбъектМетаданных;
				СвойстваОбъекта = СвойстваОбъектовМетаданных.Найти(ОбъектМетаданных.ПолноеИмя(), "ПолноеИмя");
			КонецЕсли;
			
			Если ОбъектМетаданных = Неопределено ИЛИ СвойстваОбъекта.Найден Тогда
				// Если объект метаданных не найден или найден повторно
				// тогда идентификатор требуется пометить на удаление.
				Если НЕ Свойства.ПометкаУдаления
				 ИЛИ ЗначениеЗаполнено(Свойства.Родитель)
				 ИЛИ Лев(Свойства.Наименование, 1)  <> "?"
				 ИЛИ Лев(Свойства.Имя, 1)           <> "?"
				 ИЛИ Лев(Свойства.Синоним, 1)       <> "?"
				 ИЛИ Лев(Свойства.ПолноеИмя, 1)     <> "?"
				 ИЛИ Лев(Свойства.ПолныйСиноним, 1) <> "?"
				 ИЛИ Свойства.ЗначениеПустойСсылки  <> Неопределено
				 ИЛИ Свойства.КлючОбъектаМетаданных <> Неопределено Тогда
					
					// Установка новых свойств идентификатора объекта метаданных.
					Свойства.ПометкаУдаления       = Истина;
					Свойства.Родитель              = ПустаяСсылка();
					Свойства.Наименование          = ВставитьЗнакВопроса(Свойства.Наименование);
					Свойства.Имя                   = ВставитьЗнакВопроса(Свойства.Имя);
					Свойства.Синоним               = ВставитьЗнакВопроса(Свойства.Синоним);
					Свойства.ПолноеИмя             = ВставитьЗнакВопроса(Свойства.ПолноеИмя);
					Свойства.ПолныйСиноним         = ВставитьЗнакВопроса(Свойства.ПолныйСиноним);
					Свойства.ЗначениеПустойСсылки  = Неопределено;
					Свойства.КлючОбъектаМетаданных = Неопределено;
					Свойства.Обновлен = Истина;
					ЕстьУдаленные = Истина;
				КонецЕсли;
			Иначе
				// Обновление свойств существующих объектов метаданных, если изменились.
				СвойстваОбъекта.Найден = Истина;
				Если Свойства.Наименование         <> СвойстваОбъекта.Наименование
				 ИЛИ Свойства.ПорядокКоллекции     <> СвойстваОбъекта.ПорядокКоллекции
				 ИЛИ Свойства.Имя                  <> СвойстваОбъекта.Имя
				 ИЛИ Свойства.Синоним              <> СвойстваОбъекта.Синоним
				 ИЛИ Свойства.ПолноеИмя            <> СвойстваОбъекта.ПолноеИмя
				 ИЛИ Свойства.ПолныйСиноним        <> СвойстваОбъекта.ПолныйСиноним
				 ИЛИ Свойства.БезДанных            <> СвойстваОбъекта.БезДанных
				 ИЛИ Свойства.ЗначениеПустойСсылки <> СвойстваОбъекта.ЗначениеПустойСсылки
				 ИЛИ Свойства.ПометкаУдаления
				 ИЛИ КлючОбъектаМетаданных = Неопределено
				 ИЛИ СвойстваОбъекта.БезКлючаОбъектаМетаданных
				     И КлючОбъектаМетаданных <> Тип("Неопределено") Тогда
					
					// Установка новых свойств идентификатора объекта метаданных.
					ЗаполнитьЗначенияСвойств(Свойства, СвойстваОбъекта);
					
					Если КлючОбъектаМетаданных = Неопределено
					 ИЛИ СвойстваОбъекта.БезКлючаОбъектаМетаданных
					     И КлючОбъектаМетаданных <> Тип("Неопределено") Тогда
						
						Свойства.КлючОбъектаМетаданных = КлючОбъектаМетаданных(СвойстваОбъекта.ПолноеИмя);
					КонецЕсли;
					
					Свойства.ПометкаУдаления = Ложь;
					Свойства.Обновлен = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Добавление идентификаторов новых объектов метаданных.
		Для каждого СвойстваОбъекта Из СвойстваОбъектовМетаданных.НайтиСтроки(Новый Структура("Найден", Ложь)) Цикл
			Свойства = Выгрузка.Добавить();
			ЗаполнитьЗначенияСвойств(Свойства, СвойстваОбъекта);
			Свойства.ЭтоНовый = Истина;
			Свойства.Ссылка = ПолучитьСсылку();
			Свойства.Предопределенный = Ложь;
			Свойства.ПометкаУдаления  = Ложь;
			Свойства.ОбъектМетаданных = СвойстваОбъекта.ОбъектМетаданных;
			Свойства.КлючОбъектаМетаданных = КлючОбъектаМетаданных(Свойства.ПолноеИмя);
		КонецЦикла;
		
		// Обновление родителей идентификаторов объектов метаданных.
		Для каждого Свойства Из Выгрузка Цикл
			
			Если НЕ Свойства.Предопределенный Тогда
				СвойстваОбъекта = СвойстваОбъектовМетаданных.Найти(Свойства.ПолноеИмя, "ПолноеИмя");
				НовыйРодитель = ПустаяСсылка();
				
				Если СвойстваОбъекта <> Неопределено Тогда
				
					Если НЕ ЗначениеЗаполнено(СвойстваОбъекта.ПолноеИмяРодителя) Тогда
						// Коллекция объектов метаданных.
						НовыйРодитель = СвойстваОбъекта.Родитель;
					Иначе
						// Не коллекция объектов метаданных, например, подсистема.
						ОписаниеРодителя = Выгрузка.Найти(СвойстваОбъекта.ПолноеИмяРодителя, "ПолноеИмя");
						Если ОписаниеРодителя <> Неопределено Тогда
							НовыйРодитель = ОписаниеРодителя.Ссылка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Свойства.Родитель <> НовыйРодитель Тогда
					Свойства.Родитель = НовыйРодитель;
					Свойства.Обновлен = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если Свойства.ЭтоНовый Тогда
				ТаблицаОбъект = СоздатьЭлемент();
				ТаблицаОбъект.УстановитьСсылкуНового(Свойства.Ссылка);
				
			ИначеЕсли Свойства.Обновлен Тогда
				ТаблицаОбъект = Свойства.Ссылка.ПолучитьОбъект();
			Иначе
				Продолжить;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ТаблицаОбъект, Свойства);
			ТаблицаОбъект.КлючОбъектаМетаданных = Новый ХранилищеЗначения(Свойства.КлючОбъектаМетаданных);
			ТаблицаОбъект.ДополнительныеСвойства.Вставить("ВыполняетсяАвтоматическоеОбновлениеДанныхСправочника");
			ТаблицаОбъект.Записать();
			ЕстьИзменения = Истина;
		КонецЦикла;
		
		ОбновитьКэшИдентификаторов(Выгрузка, ЕстьИзменения);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если НЕ МонопольныйРежим Тогда
		УстановитьМонопольныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Только для внутреннего использования.
Процедура ВыгрузитьДанныеСправочника(Знач КаталогВыгрузки) Экспорт
	
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(КаталогВыгрузки + "MetadataObjectsIdentifiers.xml");
	Запись.ЗаписатьОбъявлениеXML();
	
	Запись.ЗаписатьНачалоЭлемента("Data");
	Запись.ЗаписатьСоответствиеПространстваИмен("xs",  "http://www.w3.org/2001/XMLSchema");
	Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	Запись.ЗаписатьСоответствиеПространстваИмен("ns1", "http://v8.1c.ru/8.1/data/core");
	Запись.ЗаписатьСоответствиеПространстваИмен("ns2", "http://v8.1c.ru/8.1/data/enterprise");
	Запись.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/8.1/data/enterprise/current-config");
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "Справочник.ИдентификаторыОбъектовМетаданных";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИдентификаторыОбъектовМетаданных.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных";
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Пока Выборка.Следующий() Цикл
		СериализаторXDTO.ЗаписатьXML(Запись, Выборка.Ссылка.ПолучитьОбъект(), НазначениеТипаXML.Явное);
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.Закрыть();
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ДополнитьСловарьЗаменСсылокИдентификаторовТекущихИЗагружаемыхДанных(
		Знач СловарьЗамен,
		Знач КаталогВыгрузки) Экспорт
	
	// Перед загрузкой в пустую базу требутся обновление справочника.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы
	|ГДЕ
	|	НЕ Идентификаторы.Предопределенный";
	
	Если Запрос.Выполнить().Пустой() Тогда
		ОбновитьДанныеСправочника();
	КонецЕсли;
	
	СоответствиеСсылок = Новый Соответствие;
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(КаталогВыгрузки + "MetadataObjectsIdentifiers.xml");
	Чтение.ПерейтиКСодержимому();
	Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		ИЛИ Чтение.Имя <> "Data" Тогда
		
		ВызватьИсключение(НСтр("ru = 'Неверный формат файла MetadataObjectsIdentifiers.xml'"));
		
	КонецЕсли;
	
	Если НЕ Чтение.Прочитать() Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Обнаружено завершение файла.'"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Идентификаторы.Ссылка,
	|	Идентификаторы.ПолноеИмя,
	|	Идентификаторы.ПометкаУдаления
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы";
	
	СвойстваИдентификаторов = Запрос.Выполнить().Выгрузить();
	СвойстваИдентификаторов.Индексы.Добавить("Ссылка");
	СвойстваИдентификаторов.Индексы.Добавить("ПолноеИмя");
	
	Пока Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		Данные = СериализаторXDTO.ПрочитатьXML(Чтение);
		
		СвойстваИдентификатора = СвойстваИдентификаторов.Найти(Данные.Ссылка, "Ссылка");
		Если СвойстваИдентификатора = Неопределено
		 ИЛИ СвойстваИдентификатора.ПометкаУдаления Тогда
			
			КлючОбъектаМетаданных = Данные.КлючОбъектаМетаданных.Получить();
			ОбъектМетаданных = ОбъектМетаданныхПоКлючу(КлючОбъектаМетаданных);
			
			Если ОбъектМетаданных = Неопределено Тогда
				ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Данные.ПолноеИмя);
			КонецЕсли;
			
			Если ОбъектМетаданных <> Неопределено Тогда
				Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
				
				// Ключ     - Существующая ссылка.
				// Значение - Загружаемая  ссылка.
				Если ЗначениеЗаполнено(Данные.Ссылка) Тогда
					ЗагружаемыйИдентификатор = Данные.Ссылка.УникальныйИдентификатор();
				Иначе
					ЗагружаемыйИдентификатор = Данные.ПолучитьСсылкуНового().УникальныйИдентификатор();
				КонецЕсли;
				
				Если Идентификатор.УникальныйИдентификатор() <> ЗагружаемыйИдентификатор Тогда
					СоответствиеСсылок.Вставить(Идентификатор.УникальныйИдентификатор(), ЗагружаемыйИдентификатор);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаФрагмента = СловарьЗамен.Добавить();
	СтрокаФрагмента.Тип = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных");
	СтрокаФрагмента.СоответствиеСсылок = СоответствиеСсылок;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Только для внутреннего использования.
Функция КлючОбъектаМетаданныхСоответствуетПолномуИмени(СвойстваИдентификатора) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("НеСоответствует", Истина);
	РезультатПроверки.Вставить("КлючОбъектаМетаданных", Неопределено);
	
	КлючОбъектаМетаданных = СвойстваИдентификатора.КлючОбъектаМетаданных.Получить();
	
	Если КлючОбъектаМетаданных <> Неопределено
	   И КлючОбъектаМетаданных <> Тип("Неопределено") Тогда
		// Ключ задан, поиск объекта метаданных по ключу
		РезультатПроверки.Вставить("КлючОбъектаМетаданных", КлючОбъектаМетаданных);
		ОбъектМетаданных = ОбъектМетаданныхПоКлючу(КлючОбъектаМетаданных);
		Если ОбъектМетаданных <> Неопределено Тогда
			РезультатПроверки.НеСоответствует = ОбъектМетаданных.ПолноеИмя() <> СвойстваИдентификатора.ПолноеИмя;
		КонецЕсли;
	Иначе
		// Ключ не задан, поиск объекта метаданных по полному имени
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(СвойстваИдентификатора.ПолноеИмя);
		Если ОбъектМетаданных = Неопределено Тогда
			// Возможно задана коллекция
			СвойстваКоллекций = СвойстваКоллекцийОбъектовМетаданных();
			Строка = СвойстваКоллекций.Найти(СвойстваИдентификатора.Ссылка, "ИдентификаторКоллекции");
			Если Строка <> Неопределено Тогда
				ОбъектМетаданных = Метаданные[Строка.Имя];
				РезультатПроверки.НеСоответствует = Строка.Имя <> СвойстваИдентификатора.ПолноеИмя;
			КонецЕсли;
		Иначе
			РезультатПроверки.НеСоответствует = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки.Вставить("ОбъектМетаданных", ОбъектМетаданных);
	
	Возврат РезультатПроверки;
	
КонецФункции

// Только для внутреннего использования.
Функция ПолноеИмяИспользуется(ПолноеИмя, КромеИдентификатора = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПолноеИмя", ПолноеИмя);
	Запрос.УстановитьПараметр("Ссылка",    КромеИдентификатора);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.Ссылка <> &Ссылка
	|	И ИдентификаторыОбъектовМетаданных.ПолноеИмя = &ПолноеИмя";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Только для внутреннего использования.
// ПолноеИмя в объекте должно быть уже установлено и корректно.
//
Процедура ОбновитьСвойстваИдентификатора(Объект) Экспорт
	
	ПолноеИмя = Объект.ПолноеИмя;
	
	// Восстановление старых значений.
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтарыеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Объект.Ссылка,
			"Наименование,
			|ПорядокКоллекции,
			|Имя,
			|ПолноеИмя,
			|Синоним,
			|ПолныйСиноним,
			|БезДанных,
			|ЗначениеПустойСсылки,
			|КлючОбъектаМетаданных");
		ЗаполнитьЗначенияСвойств(Объект, СтарыеЗначения);
	КонецЕсли;
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
	
	Если ОбъектМетаданных = Неопределено Тогда
		Объект.ПометкаУдаления       = Истина;
		Объект.Родитель              = ПустаяСсылка();
		Объект.Наименование          = ВставитьЗнакВопроса(Объект.Наименование);
		Объект.Имя                   = ВставитьЗнакВопроса(Объект.Имя);
		Объект.Синоним               = ВставитьЗнакВопроса(Объект.Синоним);
		Объект.ПолноеИмя             = ВставитьЗнакВопроса(Объект.ПолноеИмя);
		Объект.ПолныйСиноним         = ВставитьЗнакВопроса(Объект.ПолныйСиноним);
		Объект.ЗначениеПустойСсылки  = Неопределено;
		
		Если ТипЗнч(Объект) <> Тип("ДанныеФормыСтруктура") Тогда
			Объект.КлючОбъектаМетаданных = Неопределено;
		КонецЕсли;
	Иначе
		Объект.ПометкаУдаления = Ложь;
		
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		ПозицияТочки = Найти(ПолноеИмя, ".");
		ИмяБазовогоТипа = Лев(ПолноеИмя, ПозицияТочки -1);
		
		СвойстваКоллекцийОбъектовМетаданных = СвойстваКоллекцийОбъектовМетаданных();
		Отбор = Новый Структура("ИмяВЕдЧисле", ИмяБазовогоТипа);
		Строки = СвойстваКоллекцийОбъектовМетаданных.НайтиСтроки(Отбор);
		СвойстваКоллекцийОбъектовМетаданных = СвойстваКоллекцийОбъектовМетаданных.Скопировать(Строки);
		
		СвойстваОбъектовМетаданных = СвойстваОбъектовМетаданных(СвойстваКоллекцийОбъектовМетаданных);
		СвойстваОбъекта = СвойстваОбъектовМетаданных.Найти(ПолноеИмя, "ПолноеИмя");
		
		ЗаполнитьЗначенияСвойств(Объект, СвойстваОбъекта);
		
		Если ТипЗнч(Объект) <> Тип("ДанныеФормыСтруктура") Тогда
			КлючОбъектаМетаданных = Объект.КлючОбъектаМетаданных.Получить();
			Если КлючОбъектаМетаданных = Неопределено
			 ИЛИ СвойстваОбъекта.БезКлючаОбъектаМетаданных
			     И КлючОбъектаМетаданных <> Тип("Неопределено") Тогда
				
				Объект.КлючОбъектаМетаданных = Новый ХранилищеЗначения(КлючОбъектаМетаданных(СвойстваОбъекта.ПолноеИмя));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Функция ЗапрещеноИзменятьПолноеИмя(Объект) Экспорт
	
	Если Объект.Предопределенный Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПозицияТочки = Найти(Объект.ПолноеИмя, ".");
	ИмяБазовогоТипа = Лев(Объект.ПолноеИмя, ПозицияТочки -1);
	
	СвойстваКоллекцийОбъектовМетаданных = СвойстваКоллекцийОбъектовМетаданных();
	СвойстваКоллекции = СвойстваКоллекцийОбъектовМетаданных.Найти(ИмяБазовогоТипа, "ИмяВЕдЧисле");
	
	Если СвойстваКоллекции <> Неопределено
	   И НЕ СвойстваКоллекции.БезКлючаОбъектаМетаданных Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПроверитьОбновитьСвойстваКоллекции(Знач ТекущиеСвойства, Знач НовыеСвойства)
	
	НаименованиеКоллекции = НовыеСвойства.Синоним;
	
	Если ТекущиеСвойства.Наименование          <> НаименованиеКоллекции
	 ИЛИ ТекущиеСвойства.ПорядокКоллекции      <> НовыеСвойства.ПорядокКоллекции
	 ИЛИ ТекущиеСвойства.Имя                   <> НовыеСвойства.Имя
	 ИЛИ ТекущиеСвойства.Синоним               <> НовыеСвойства.Синоним
	 ИЛИ ТекущиеСвойства.ПолноеИмя             <> НовыеСвойства.Имя
	 ИЛИ ТекущиеСвойства.ПолныйСиноним         <> НовыеСвойства.Синоним
	 ИЛИ ТекущиеСвойства.БезДанных             <> Ложь
	 ИЛИ ТекущиеСвойства.ЗначениеПустойСсылки  <> Неопределено
	 ИЛИ ТекущиеСвойства.КлючОбъектаМетаданных <> Неопределено Тогда
		
		// Установка новых свойств.
		ТекущиеСвойства.Наименование          = НаименованиеКоллекции;
		ТекущиеСвойства.ПорядокКоллекции      = НовыеСвойства.ПорядокКоллекции;
		ТекущиеСвойства.Имя                   = НовыеСвойства.Имя;
		ТекущиеСвойства.Синоним               = НовыеСвойства.Синоним;
		ТекущиеСвойства.ПолноеИмя             = НовыеСвойства.Имя;
		ТекущиеСвойства.ПолныйСиноним         = НовыеСвойства.Синоним;
		ТекущиеСвойства.БезДанных             = Ложь;
		ТекущиеСвойства.ЗначениеПустойСсылки  = Неопределено;
		ТекущиеСвойства.КлючОбъектаМетаданных = Неопределено;
		ТекущиеСвойства.Обновлен = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ТаблицаПереименованияДляТекущейВерсии(СвойстваКоллекцийОбъектовМетаданных)
	
	ТаблицаПереименования = Новый ТаблицаЗначений;
	ТаблицаПереименования.Колонки.Добавить("ПорядокБиблиотеки", Новый ОписаниеТипов("Число"));
	ТаблицаПереименования.Колонки.Добавить("ВерсияЧасть1",      Новый ОписаниеТипов("Число"));
	ТаблицаПереименования.Колонки.Добавить("ВерсияЧасть2",      Новый ОписаниеТипов("Число"));
	ТаблицаПереименования.Колонки.Добавить("ВерсияЧасть3",      Новый ОписаниеТипов("Число"));
	ТаблицаПереименования.Колонки.Добавить("ВерсияЧасть4",      Новый ОписаниеТипов("Число"));
	ТаблицаПереименования.Колонки.Добавить("ПорядокДобавления", Новый ОписаниеТипов("Число"));
	ТаблицаПереименования.Колонки.Добавить("СтароеПолноеИмя",   Новый ОписаниеТипов("Строка"));
	ТаблицаПереименования.Колонки.Добавить("НовоеПолноеИмя",    Новый ОписаниеТипов("Строка"));
	
	КоллекцииБезКлюча = Новый Соответствие;
	
	Отбор = Новый Структура("БезКлючаОбъектаМетаданных", Истина);
	КоллекцииБезКлючаОбъектаМетаданных = СвойстваКоллекцийОбъектовМетаданных.НайтиСтроки(Отбор);
	
	Для каждого Строка Из КоллекцииБезКлючаОбъектаМетаданных Цикл
		КоллекцииБезКлюча.Вставить(ВРег(Строка.ИмяВЕдЧисле), Строка.ИмяВЕдЧисле);
	КонецЦикла;
	
	Итог = Новый Структура;
	Итог.Вставить("Таблица", ТаблицаПереименования);
	Итог.Вставить("КоллекцииБезКлюча", КоллекцииБезКлюча);
	Итог.Вставить("ВерсииБиблиотек",  Новый Соответствие);
	Итог.Вставить("ПорядокБиблиотек", Новый Соответствие);
	
	СтандартныеПодсистемыПереопределяемый.ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог);
	ОбщегоНазначенияПереопределяемый.ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог);
	
	ТаблицаПереименования.Сортировать(
		"ПорядокБиблиотеки ВОЗР,
		|ВерсияЧасть1 ВОЗР,
		|ВерсияЧасть2 ВОЗР,
		|ВерсияЧасть3 ВОЗР,
		|ВерсияЧасть4 ВОЗР,
		|ПорядокДобавления ВОЗР");
	
	Возврат ТаблицаПереименования;
	
КонецФункции

Функция КлючОбъектаМетаданных(ПолноеИмя)
	
	ПозицияТочки = Найти(ПолноеИмя, ".");
	
	КлассОМ = Лев( ПолноеИмя, ПозицияТочки-1);
	ИмяОМ   = Сред(ПолноеИмя, ПозицияТочки+1);
	
	Если ВРег(КлассОМ) = ВРег("ПланОбмена") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Справочник") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Документ") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("ЖурналДокументов") Тогда
		Возврат ТипЗнч(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя));
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Отчет") Тогда
		Возврат Тип(КлассОМ + "Объект." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Обработка") Тогда
		Возврат Тип(КлассОМ + "Объект." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("ПланВидовХарактеристик") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("ПланСчетов") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("ПланВидовРасчета") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("РегистрСведений") Тогда
		Возврат Тип(КлассОМ + "КлючЗаписи." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("РегистрНакопления") Тогда
		Возврат Тип(КлассОМ + "КлючЗаписи." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("РегистрБухгалтерии") Тогда
		Возврат Тип(КлассОМ + "КлючЗаписи." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("РегистрРасчета") Тогда
		Возврат Тип(КлассОМ + "КлючЗаписи." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("БизнесПроцесс") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
		
	ИначеЕсли ВРег(КлассОМ) = ВРег("Задача") Тогда
		Возврат Тип(КлассОМ + "Ссылка." + ИмяОМ);
	Иначе
		// Без ключа объекта метаданных
		Возврат Тип("Неопределено");
	КонецЕсли;
	
КонецФункции 

Функция ОбъектМетаданныхПоКлючу(КлючОбъектаМетаданных)
	
	ОбъектМетаданных = Неопределено;
	
	Если ТипЗнч(КлючОбъектаМетаданных) = Тип("Тип") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(КлючОбъектаМетаданных);
	КонецЕсли;
	
	Возврат ОбъектМетаданных;
	
КонецФункции

Функция СвойстваОбъектовМетаданных(СвойстваКоллекцийОбъектовМетаданных)
	
	СвойстваОбъектовМетаданных = Новый ТаблицаЗначений;
	СвойстваОбъектовМетаданных.Колонки.Добавить("Наименование",              Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ПолноеИмя",                 Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(510)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ПолноеИмяРодителя",         Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(510)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ПорядокКоллекции",          Новый ОписаниеТипов("Число"));
	СвойстваОбъектовМетаданных.Колонки.Добавить("Родитель",                  Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	СвойстваОбъектовМетаданных.Колонки.Добавить("Имя",                       Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(150)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("Синоним",                   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ПолныйСиноним",             Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(510)));
	СвойстваОбъектовМетаданных.Колонки.Добавить("БезДанных",                 Новый ОписаниеТипов("Булево"));
	СвойстваОбъектовМетаданных.Колонки.Добавить("БезКлючаОбъектаМетаданных", Новый ОписаниеТипов("Булево"));
	СвойстваОбъектовМетаданных.Колонки.Добавить("ЗначениеПустойСсылки");
	СвойстваОбъектовМетаданных.Колонки.Добавить("ОбъектМетаданных");
	
	Для каждого СвойстваКоллекции Из СвойстваКоллекцийОбъектовМетаданных Цикл
		ДобавитьСвойстваОбъектовМетаданных(Метаданные[СвойстваКоллекции.Имя], СвойстваКоллекции, СвойстваОбъектовМетаданных);
	КонецЦикла;
	
	СвойстваОбъектовМетаданных.Индексы.Добавить("ПолноеИмя");
	
	Возврат СвойстваОбъектовМетаданных;
	
КонецФункции

Процедура ДобавитьСвойстваОбъектовМетаданных(Знач КолекцияОбъектовМетаданных,
                                             Знач СвойстваКоллекции,
                                             Знач СвойстваОбъектовМетаданных,
                                             Знач ПолноеИмяРодителя = "",
                                             Знач ПолныйСинонимРодителя = "")
	
	Для каждого ОбъектМетаданных Из КолекцияОбъектовМетаданных Цикл
		
		ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
		
		Если НЕ СвойстваКоллекции.БезДанных
		   И Найти(СвойстваКоллекции.ИмяВЕдЧисле, "Регистр") = 0 Тогда
			
			ЗначениеПустойСсылки = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя).ПустаяСсылка();
		Иначе
			ЗначениеПустойСсылки = Неопределено;
		КонецЕсли;
		
		НоваяСтрока = СвойстваОбъектовМетаданных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваКоллекции);
		НоваяСтрока.Родитель          = СвойстваКоллекции.ИдентификаторКоллекции;
		НоваяСтрока.Наименование      = ПредставлениеОбъектаМетаданных(ОбъектМетаданных, СвойстваКоллекции);
		НоваяСтрока.ПолноеИмя         = ПолноеИмя;
		НоваяСтрока.ПолноеИмяРодителя = ПолноеИмяРодителя;
		НоваяСтрока.Имя               = ОбъектМетаданных.Имя;
		
		НоваяСтрока.Синоним = ?(
			ЗначениеЗаполнено(ОбъектМетаданных.Синоним), ОбъектМетаданных.Синоним, ОбъектМетаданных.Имя);
		
		НоваяСтрока.ПолныйСиноним =
			ПолныйСинонимРодителя + СвойстваКоллекции.СинонимВЕдЧисле + ". " + НоваяСтрока.Синоним;
		
		НоваяСтрока.ЗначениеПустойСсылки = ЗначениеПустойСсылки;
		НоваяСтрока.ОбъектМетаданных     = ОбъектМетаданных;
		
		Если СвойстваКоллекции.Имя = "Подсистемы" Тогда
			ДобавитьСвойстваОбъектовМетаданных(
				ОбъектМетаданных.Подсистемы,
				СвойстваКоллекции,
				СвойстваОбъектовМетаданных,
				ПолноеИмя,
				НоваяСтрока.ПолныйСиноним + ". ");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеОбъектаМетаданных(Знач ОбъектМетаданных, Знач СвойстваКоллекции)
	
	Постфикс = "(" + СвойстваКоллекции.СинонимВЕдЧисле + ")";
	
	Синоним = ?(ЗначениеЗаполнено(ОбъектМетаданных.Синоним), ОбъектМетаданных.Синоним, ОбъектМетаданных.Имя);
	
	МаксимальнаяДлинаСинонима = 150 - СтрДлина(Постфикс);
	Если СтрДлина(Синоним) > МаксимальнаяДлинаСинонима + 1 Тогда
		Возврат Лев(Синоним, МаксимальнаяДлинаСинонима - 2) + "..." + Постфикс;
	КонецЕсли;
	
	Возврат Синоним + " (" + СвойстваКоллекции.СинонимВЕдЧисле + ")";
	
КонецФункции

Функция СвойстваКоллекцийОбъектовМетаданных()
	
	СвойстваКоллекцийОбъектовМетаданных = Новый ТаблицаЗначений;
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("Имя",                       Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("ИмяВЕдЧисле",               Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("Синоним",                   Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("СинонимВЕдЧисле",           Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("ПорядокКоллекции",          Новый ОписаниеТипов("Число"));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("БезДанных",                 Новый ОписаниеТипов("Булево"));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("БезКлючаОбъектаМетаданных", Новый ОписаниеТипов("Булево"));
	СвойстваКоллекцийОбъектовМетаданных.Колонки.Добавить("ИдентификаторКоллекции",    Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	
	// Подсистемы
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "Подсистемы";
	Строка.Синоним         = НСтр("ru = 'Подсистемы'");
	Строка.ИмяВЕдЧисле     = "Подсистема";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Подсистема'");
	Строка.БезДанных       = Истина;
	Строка.БезКлючаОбъектаМетаданных = Истина;
	
	// Роли
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "Роли";
	Строка.Синоним         = НСтр("ru = 'Роли'");
	Строка.ИмяВЕдЧисле     = "Роль";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Роль'");
	Строка.БезДанных       = Истина;
	Строка.БезКлючаОбъектаМетаданных = Истина;
	
	// ПланыОбмена
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "ПланыОбмена";
	Строка.Синоним         = НСтр("ru = 'Планы обмена'");
	Строка.ИмяВЕдЧисле     = "ПланОбмена";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'План обмена'");
	
	// Справочники
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "Справочники";
	Строка.Синоним         = НСтр("ru = 'Справочники'");
	Строка.ИмяВЕдЧисле     = "Справочник";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Справочник'");
	
	// Документы
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "Документы";
	Строка.Синоним         = НСтр("ru = 'Документы'");
	Строка.ИмяВЕдЧисле     = "Документ";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Документ'");
	
	// ЖурналыДокументов
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "ЖурналыДокументов";
	Строка.Синоним         = НСтр("ru = 'Журналы документов'");
	Строка.ИмяВЕдЧисле     = "ЖурналДокументов";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Журнал документов'");
	Строка.БезДанных       = Истина;
	
	// Отчеты
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "Отчеты";
	Строка.Синоним         = НСтр("ru = 'Отчеты'");
	Строка.ИмяВЕдЧисле     = "Отчет";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Отчет'");
	Строка.БезДанных       = Истина;
	
	// Обработки
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "Обработки";
	Строка.Синоним         = НСтр("ru = 'Обработки'");
	Строка.ИмяВЕдЧисле     = "Обработка";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Обработка'");
	Строка.БезДанных       = Истина;
	
	// ПланыВидовХарактеристик
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "ПланыВидовХарактеристик";
	Строка.Синоним         = НСтр("ru = 'Планы видов характеристик'");
	Строка.ИмяВЕдЧисле     = "ПланВидовХарактеристик";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'План видов характеристик'");
	
	// ПланыСчетов
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "ПланыСчетов";
	Строка.Синоним         = НСтр("ru = 'Планы счетов'");
	Строка.ИмяВЕдЧисле     = "ПланСчетов";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'План счетов'");
	
	// ПланыВидовРасчета
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "ПланыВидовРасчета";
	Строка.Синоним         = НСтр("ru = 'Планы видов расчета'");
	Строка.ИмяВЕдЧисле     = "ПланВидовРасчета";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'План видов расчета'");
	
	// РегистрыСведений
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "РегистрыСведений";
	Строка.Синоним         = НСтр("ru = 'Регистры сведений'");
	Строка.ИмяВЕдЧисле     = "РегистрСведений";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Регистр сведений'");
	
	// РегистрыНакопления
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "РегистрыНакопления";
	Строка.Синоним         = НСтр("ru = 'Регистры накопления'");
	Строка.ИмяВЕдЧисле     = "РегистрНакопления";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Регистр накопления'");
	
	// РегистрыБухгалтерии
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "РегистрыБухгалтерии";
	Строка.Синоним         = НСтр("ru = 'Регистры бухгалтерии'");
	Строка.ИмяВЕдЧисле     = "РегистрБухгалтерии";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Регистр бухгалтерии'");
	
	// РегистрыРасчета
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "РегистрыРасчета";
	Строка.Синоним         = НСтр("ru = 'Регистры расчета'");
	Строка.ИмяВЕдЧисле     = "РегистрРасчета";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Регистр расчета'");
	
	// БизнесПроцессы
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "БизнесПроцессы";
	Строка.Синоним         = НСтр("ru = 'Бизнес-процессы'");
	Строка.ИмяВЕдЧисле     = "БизнесПроцесс";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Бизнес-процесс'");
	
	// Задачи
	Строка = СвойстваКоллекцийОбъектовМетаданных.Добавить();
	Строка.Имя             = "Задачи";
	Строка.Синоним         = НСтр("ru = 'Задачи'");
	Строка.ИмяВЕдЧисле     = "Задача";
	Строка.СинонимВЕдЧисле = НСтр("ru = 'Задача'");
	
	// Заполнение дополнительных свойств.
	СправочникМенеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.ИдентификаторыОбъектовМетаданных");
	
	Для каждого Строка Из СвойстваКоллекцийОбъектовМетаданных Цикл
		Попытка
			Строка.ИдентификаторКоллекции = СправочникМенеджер[Строка.Имя];
		Исключение
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найден идентификатор типа объектов метаданных
				           |""%1"".
				           |
				           |Следует добавить предопределенный элемент в
				           |Справочник ""Идентификаторы объектов метаданных"".'"),
				Строка.Имя);
		КонецПопытки;
		Строка.ПорядокКоллекции = СвойстваКоллекцийОбъектовМетаданных.Индекс(Строка);
	КонецЦикла;
	
	СвойстваКоллекцийОбъектовМетаданных.Индексы.Добавить("ИдентификаторКоллекции");
	
	Возврат СвойстваКоллекцийОбъектовМетаданных;
	
КонецФункции

Функция ВставитьЗнакВопроса(Знач Строка)
	
	Если Лев(Строка, 1) <> "?" Тогда
		Если Лев(Строка, 1) <> " " Тогда
			Строка = "? " + Строка;
		Иначе
			Строка = "?" + Строка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

Процедура ОбновитьКэшИдентификаторов(Выгрузка, ЕстьИзменения);
	
	// Обновление параметра работы программы ИдентификаторыОбъектовМетаданных,
	// используемого, как кэш для ускорения работы программы.
	ПоПолнымИменам               = Новый Соответствие; // Идентификатор по полному имени.
	ПоТипам                      = Новый Соответствие; // Идентификатор по типам (основным).
	ТипыПоИдентификаторам        = Новый Соответствие; // Один из типов по идентификатору.
	ПолныеИменаПоИдентификаторам = Новый Соответствие; // Полное имя по идентификатору.
	
	НайденныеСтроки = Выгрузка.НайтиСтроки(Новый Структура("ПометкаУдаления", Ложь));
	Для каждого Свойства Из НайденныеСтроки Цикл
		
		Если Свойства.ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Параметры для быстрого поиска идентификатора.
		ПоПолнымИменам.Вставить(Свойства.ПолноеИмя, Свойства.Ссылка);
		
		Если НЕ Свойства.БезДанных Тогда
			ТипСсылки = СтандартныеПодсистемыСервер.ТипСсылкиИлиКлючаЗаписиОбъектаМетаданных(
				Свойства.ОбъектМетаданных);
			
			ТипОбъекта = СтандартныеПодсистемыСервер.ТипОбъектаИлиНабораЗаписейОбъектаМетаданных(
				Свойства.ОбъектМетаданных);
			
			ПоТипам.Вставить(ТипСсылки,  Свойства.Ссылка);
			ПоТипам.Вставить(ТипОбъекта, Свойства.Ссылка);
		КонецЕсли;
		
		// Параметры для быстрого поиска объекта метаданных.
		ПолныеИменаПоИдентификаторам.Вставить(Свойства.Ссылка, Свойства.ПолноеИмя);
		
		Если Свойства.КлючОбъектаМетаданных <> Неопределено
		   И Свойства.КлючОбъектаМетаданных <> Тип("Неопределено") Тогда
			
			ТипыПоИдентификаторам.Вставить(Свойства.Ссылка, Свойства.КлючОбъектаМетаданных);
		КонецЕсли;
	КонецЦикла;
	
	КэшИдентификаторов = Новый Структура;
	КэшИдентификаторов.Вставить("ПоПолнымИменам",               ПоПолнымИменам);
	КэшИдентификаторов.Вставить("ПоТипам",                      ПоТипам);
	КэшИдентификаторов.Вставить("ТипыПоИдентификаторам",        ТипыПоИдентификаторам);
	КэшИдентификаторов.Вставить("ПолныеИменаПоИдентификаторам", ПолныеИменаПоИдентификаторам);
	
	КэшИдентификаторов = ОбщегоНазначения.ФиксированныеДанные(КэшИдентификаторов);
	
	Параметры = ОбновлениеИнформационнойБазы.ПараметрыРаботыПрограммы(
		"ПараметрыБазовойФункциональности");
		
	Сохраненные = Неопределено;
	
	Если Параметры.Свойство("ИдентификаторыОбъектовМетаданных") Тогда
		Сохраненные = Параметры.ИдентификаторыОбъектовМетаданных;
		
		Если НЕ ОбщегоНазначения.ДанныеСовпадают(КэшИдентификаторов, Сохраненные) Тогда
			Сохраненные = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Сохраненные = Неопределено Тогда
		ОбновлениеИнформационнойБазы.УстановитьПараметрРаботыПрограммы(
			"ПараметрыБазовойФункциональности",
			"ИдентификаторыОбъектовМетаданных",
			КэшИдентификаторов);
		
		ЕстьИзменения = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли