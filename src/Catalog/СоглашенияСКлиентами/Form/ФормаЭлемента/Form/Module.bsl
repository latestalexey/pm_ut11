&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	
	ИспользоватьТиповыеСоглашенияСКлиентами        = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	ОтклонениеОтУсловийПродаж                      = Пользователи.РолиДоступны("ОтклонениеОтУсловийПродаж");
	ИспользоватьСоглашенияСКлиентами               = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Соглашение","Видимость",Не Объект.Типовое И ИспользоватьТиповыеСоглашенияСКлиентами И ИспользоватьИндивидуальныеСоглашенияСКлиентами);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Соглашение","АвтоОтметкаНезаполненного",Не Объект.Типовое И ИспользоватьТиповыеСоглашенияСКлиентами И ИспользоватьИндивидуальныеСоглашенияСКлиентами И НЕ ОтклонениеОтУсловийПродаж);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"СегментПартнеров","Видимость",Объект.Типовое И ИспользоватьСоглашенияСКлиентами);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Партнер","Видимость",Не Объект.Типовое);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Контрагент","Видимость",Не Объект.Типовое);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Наименование", "Видимость", ИспользоватьСоглашенияСКлиентами);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ХозяйственнаяОперация", "Видимость", ИспользоватьСоглашенияСКлиентами);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"КонтактноеЛицо", "Видимость", ИспользоватьСоглашенияСКлиентами);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаПериодДействия", "Видимость", ИспользоватьСоглашенияСКлиентами);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"Организация","Видимость", ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
	                                                                                                 И ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
	
	// Заголовок документа
	
	Если Объект.Типовое Тогда
		
		Если ЗначениеЗаполнено(Объект.Номер) И ЗначениеЗаполнено(Объект.Дата) И ИспользоватьСоглашенияСКлиентами Тогда
			ТекстЗаголовка = НСтр("ru='Типовое соглашение об условиях продаж %Номер% от %Дата%'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Номер%", Объект.Номер);
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Дата%",  Объект.Дата);
		ИначеЕсли НЕ ИспользоватьСоглашенияСКлиентами ТОгда
			ТекстЗаголовка = Объект.Наименование;
		Иначе
			ТекстЗаголовка = НСтр("ru='Типовое соглашение об условиях продаж'");
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Номер) И ЗначениеЗаполнено(Объект.Дата) Тогда 
			ТекстЗаголовка = НСтр("ru='Индивидуальное соглашение об условиях продаж %Номер% от %Дата%'");
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Номер%", Объект.Номер);
			ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Дата%",  Объект.Дата);
		Иначе
			ТекстЗаголовка = НСтр("ru='Индивидуальное соглашение об условиях продаж'");
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтаФорма.Заголовок = ТекстЗаголовка;
	ПродажиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	
	// Обновим список Скидок(наценок)
	ПостроитьДеревоСкидкиНаценки();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	//+++АК
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если ЗначениеЗаполнено(ТекущийОбъект.Номер) Тогда
			ТекущийОбъект.Код = ТекущийОбъект.Номер;
		Иначе
			//ТекущийОбъект.УстановитьНовыйКод(ТекущийОбъект.Организация.Префикс);
			ТекущийОбъект.УстановитьНовыйКод(ТекущийОбъект.Организация.Префикс);
			ТекущийОбъект.Номер = ТекущийОбъект.Код;
		КонецЕсли;
		
		//
		ТекущийОбъект.Наименование = "№" + ТекущийОбъект.Номер + " от " + Формат(ТекущийОбъект.Дата, "ДФ='dd.MM.yyyy ""г.""'");
		
	КонецЕсли;
	
 //---АК	
	
КонецПроцедуры




&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("УстановленоЗначениеКонстантыИспользоватьДоговорыСКлиентами") Тогда
		ОбновитьИнтерфейс = Истина;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененРеквизитЗависящийОтСтатуса"
		И Параметр.УникальныйИдентификатор = УникальныйИдентификатор Тогда
		Если Объект.Согласован Тогда
			Объект.Согласован = Ложь;
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.Ссылка, Объект.Дата, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		Объект.Соглашение = ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка");
		Возврат;
	КонецЕсли;
	
	ПриИзмененииПартнераСервер();
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено (Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;

	ПриИзмененииСоглашенияСервер();
	
	РазвернутьДеревоСкидокРекурсивно(СкидкиНаценки, Элементы.СкидкиНаценки);
	
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	ЗаполнитьПорядокОплатыГруппуФинансовогоУчета(
		Объект.Валюта,
		Объект.НалогообложениеНДС,
		Объект.ПорядокОплаты,
		Объект.ГруппаФинансовогоУчета
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента) Тогда
		
		ПриИзмененииВалютыСервер(Объект.Валюта);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		
	Иначе
		
		ЗаполнитьПорядокОплатыГруппуФинансовогоУчета(
			Объект.Валюта,
			Объект.НалогообложениеНДС,
			Объект.ПорядокОплаты,
			Объект.ГруппаФинансовогоУчета
		);
		
	КонецЕсли;
	
	ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусДокумента = Объект.Статус;
	
	Если Объект.Согласован И 
		Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийСКлиентами.Действует")
		И Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыСоглашенийСКлиентами.Закрыто") Тогда
		
		Объект.Согласован = Ложь;
		
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РегулярноеПриИзменении(Элемент)
	
	ПриИзмененииРегулярностиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	РассчитатьПериодДействияРегулярногоСоглашения();
	ОписаниеРегулярныхУсловий = ОписаниеРегулярныхУсловий(Объект.КоличествоПериодов, Объект.Период, Объект.СуммаДокумента, ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПериодовПриИзменении(Элемент)
	
	РассчитатьПериодДействияРегулярногоСоглашения();
	ОписаниеРегулярныхУсловий = ОписаниеРегулярныхУсловий(Объект.КоличествоПериодов, Объект.Период, Объект.СуммаДокумента, ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ОписаниеРегулярныхУсловий = ОписаниеРегулярныхУсловий(Объект.КоличествоПериодов, Объект.Период, Объект.СуммаДокумента, ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ПриИзмененииХозяйственнойОперацииСервер();
	
	РазвернутьДеревоСкидокРекурсивно(СкидкиНаценки, Элементы.СкидкиНаценки);
	
КонецПроцедуры

&НаСервере
Процедура СпособРасчетаВознагражденияПриИзмененииСервер()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ПроцентВознаграждения");
	МассивЭлементов.Добавить("УдержатьВознаграждение");
	
	Если Объект.СпособРасчетаВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Или
		Не ЗначениеЗаполнено(Объект.СпособРасчетаВознаграждения) Тогда
		Объект.ПроцентВознаграждения  = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.ПроцентВознаграждения.ЗначениеЗаполнения;
		Объект.УдержатьВознаграждение = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.УдержатьВознаграждение.ЗначениеЗаполнения;
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Ложь);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаВознагражденияПриИзменении(Элемент)
	
	СпособРасчетаВознагражденияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаДействияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаДействия) Тогда
		РассчитатьПериодДействияРегулярногоСоглашения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОплатыПриИзменении(Элемент)
	
	ЗаполнитьГруппуФинансовогоУчета(Объект.ПорядокОплаты, Объект.ГруппаФинансовогоУчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаФинансовогоУчетаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ПорядокОплаты) Тогда
		ЗаполнитьПорядокОплаты(Объект.ГруппаФинансовогоУчета, Объект.ПорядокОплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользуютсяДоговорыКонтрагентовПриИзменении(Элемент)
	
	Объект.ИспользуютсяДоговорыКонтрагентов = Булево(ИспользуютсяДоговорыКонтрагентов);
	
	НастроитьСписокВыбораПорядкаРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьРучныеСкидкиПриИзменении(Элемент)
	
	ОбновитьВидимостьЭлементовОграниченияРучныхСкидок(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВозвращатьМногооборотнуюТаруПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) И НЕ Объект.Согласован Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены необходимо выбрать вид цены ""<произвольная>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
	
	Элементы.Товары.ТекущиеДанные.Цена = 0;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ СКИДКИ

&НаКлиенте
Процедура СкидкиНаценкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Для каждого ВыделеннаяСтрока Из Элементы.СкидкиНаценки.ВыделенныеСтроки Цикл
		НайденнаяСтрока = СкидкиНаценки.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если НайденнаяСтрока <> Неопределено Тогда
			УдалитьСкидкуНаценкуРекурсивно(НайденнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	// Обновим список Скидок(наценок)
	ПостроитьДеревоСкидкиНаценки();
	
	РазвернутьДеревоСкидокРекурсивно(СкидкиНаценки, Элементы.СкидкиНаценки);
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкиНаценкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СкидкиНаценки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.СкидкаНаценка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкидкиНаценкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ПодобратьСкидкиНаценкиКлиент();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УстановитьИнтервалВыполнить(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала    = Объект.ДатаНачалаДействия;
	Диалог.Период.ДатаОкончания = Объект.ДатаОкончанияДействия;
	
	Если Диалог.Редактировать() Тогда
		
		Объект.ДатаНачалаДействия    = Диалог.Период.ДатаНачала;
		Объект.ДатаОкончанияДействия = Диалог.Период.ДатаОкончания;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидЦенВыделенныхСтрокТовары(Команда)
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		Предупреждение(НСтр("ru='В документе не заполнена таблица Товары. Вид цен не может быть заполнен'"));
		Возврат;
		
	КонецЕсли;
		
	ВидЦен = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, Истина);
		
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЗаполнитьВидЦенВыделенныхСтрокТоварыСервер(ВидЦен);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Вид цен заполнен'"),
			,
			СтрЗаменить(НСтр("ru='Вид цен ""%ВидЦен%"" в таблице Товары заполнен.'"), "%ВидЦен%", ВидЦен),
			БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидЦенВыделенныхСтрокЦеновыеГруппы(Команда)
	
	Если Объект.ЦеновыеГруппы.Количество() = 0 Тогда
		
		Предупреждение(НСтр("ru='В документе не заполнена таблица Ценовые группы. Вид цен не может быть заполнен'"));
		Возврат;
		
	КонецЕсли;
		
	ВидЦен = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, Истина);
		
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЗаполнитьВидЦенВыделенныхСтрокЦеновыеГруппыСервер(ВидЦен);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Вид цен заполнен'"),
			,
			СтрЗаменить(НСтр("ru='Вид цен ""%ВидЦен%"" в таблице Ценовые группы заполнен.'"),"%ВидЦен%",ВидЦен),
			БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСкидкиНаценки(Команда)
	
	ПодобратьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСкидкуНаценкуРекурсивно(СтрокаДерева)
	
	КоллекцияПодчиненныхЭлементов = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого ЭлементДерева ИЗ КоллекцияПодчиненныхЭлементов Цикл
		УдалитьСкидкуНаценкуРекурсивно(ЭлементДерева);
	КонецЦикла;
	
	НайденныеСтроки = Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаДерева.СкидкаНаценка));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Объект.СкидкиНаценки.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств(Команда)
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТоварыПоОтбору(Команда)
	
	ПараметрыФормы = Новый Структура("УникальныйИдентификатор", УникальныйИдентификатор);
	АдресВоВременномХранилище = ОткрытьФормуМодально("Обработка.ПодборТоваровПоОтбору.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	Если ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
		ДобавитьТоварыПоОтборуНаСервере(АдресВоВременномХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОплатаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Объект.Согласован Тогда
		Попытка
			ЗаблокироватьДанныеФормыДляРедактирования();
			Модифицированность = Истина;
		Исключение
			Предупреждение(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Согласован",                   Объект.Согласован);
	ПараметрыФормы.Вставить("ФормаОплаты",                  Объект.ФормаОплаты);
	ПараметрыФормы.Вставить("ДоступноВнешнимПользователям", Объект.ДоступноВнешнимПользователям);
	ПараметрыФормы.Вставить("Календарь",                    Объект.Календарь);
	ПараметрыФормы.Вставить("ХозяйственнаяОперация",        Объект.ХозяйственнаяОперация);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",      УникальныйИдентификатор);
	ПараметрыФормы.Вставить("АдресВоВременномХранилище",    ПоместитьВоВременноеХранилищеНаСервере());
	ПараметрыФормы.Вставить("Ключ",                         Объект.Ссылка);
	ПараметрыОплаты = ОткрытьФормуМодально("Справочник.СоглашенияСКлиентами.Форма.ФормаОплаты", ПараметрыФормы, ЭтаФорма);
	
	Если ПараметрыОплаты <> Неопределено Тогда
		
		Объект.Согласован = Ложь;
		Объект.ФормаОплаты = ПараметрыОплаты.ФормаОплаты;
		Объект.Календарь = ПараметрыОплаты.Календарь;
		Объект.ЭтапыГрафикаОплаты.Очистить();
		Если ЗначениеЗаполнено(ПараметрыОплаты.АдресВоВременномХранилище) Тогда
			ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(ПараметрыОплаты.АдресВоВременномХранилище);
		КонецЕсли;
		НадписьОплата = НадписьОплата(Объект.ФормаОплаты, Объект.Календарь, Объект.ЭтапыГрафикаОплаты.Количество());
		
		УстановитьДоступностьЭлементовПоСтатусуСервер();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	СправочникОбъект.ЗаполнитьУсловияПродажПоУмолчанию();
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
	
	УстановитьВидимостьЭлементовПоРегулярностиСервер();
	УстановитьВидимостьЭлементовПоОперацииСервер();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСоглашенияСервер()
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	СправочникОбъект.ЗаполнитьУсловияПродажПоCоглашению();
	ЗначениеВРеквизитФормы(СправочникОбъект, "Объект");
	
	УстановитьВидимостьЭлементовПоРегулярностиСервер();
	УстановитьВидимостьЭлементовПоОперацииСервер();
	ОбновитьВидимостьЭлементовОграниченияРучныхСкидок(ЭтаФорма);
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	ПостроитьДеревоСкидкиНаценки();
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	ИспользуютсяДоговорыКонтрагентов = Число(Объект.ИспользуютсяДоговорыКонтрагентов);
	Элементы.ПорядокРасчетов.Доступность = НЕ Объект.ИспользуютсяДоговорыКонтрагентов;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	Объект.НалогообложениеНДС = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Объект.Организация, , Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта)

	СтараяВалюта = ВалютаДокумента;
	
	ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
	
	Ценообразование.ПересчитатьСуммыВВалютуТовары(
		Объект,
		СтараяВалюта,
		НоваяВалюта,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты,
		Ложь
	);
	
	ЗаполнитьПорядокОплатыГруппуФинансовогоУчета(
		Объект.Валюта,
		Объект.НалогообложениеНДС,
		Объект.ПорядокОплаты,
		Объект.ГруппаФинансовогоУчета
	);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРегулярностиСервер()

	Если Объект.Регулярное Тогда
		
		Объект.Период             = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.Период.ЗначениеЗаполнения;
		Объект.КоличествоПериодов = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.КоличествоПериодов.ЗначениеЗаполнения;
		Объект.СуммаДокумента     = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.СуммаДокумента.ЗначениеЗаполнения;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовПоРегулярностиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		
		Если ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
			
			Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|	ГрафикиОплаты.ТолькоКредитныеЭтапы КАК ТолькоКредитныеЭтапы
				|ИЗ
				|	Справочник.ГрафикиОплаты КАК ГрафикиОплаты
				|ГДЕ
				|	ГрафикиОплаты.Ссылка = &ГрафикОплаты
				|");
				
			Запрос.УстановитьПараметр("ГрафикОплаты", Объект.ГрафикОплаты);
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Если Не Выборка.ТолькоКредитныеЭтапы Тогда
				Объект.ГрафикОплаты = Справочники.ГрафикиОплаты.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.СкидкиНаценки.Количество() Тогда
			Объект.СкидкиНаценки.Очистить();
			ПостроитьДеревоСкидкиНаценки();
		КонецЕсли;
		
		Объект.ОграничиватьРучныеСкидки = Ложь;
		Объект.ПроцентРучнойСкидки  = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.ПроцентРучнойСкидки.ЗначениеЗаполнения;
		Объект.ПроцентРучнойНаценки = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.ПроцентРучнойНаценки.ЗначениеЗаполнения;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		Объект.СпособРасчетаВознаграждения = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.СпособРасчетаВознаграждения.ЗначениеЗаполнения;
		Объект.ПроцентВознаграждения       = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.ПроцентВознаграждения.ЗначениеЗаполнения;
		Объект.УдержатьВознаграждение      = Метаданные.Справочники.СоглашенияСКлиентами.Реквизиты.УдержатьВознаграждение.ЗначениеЗаполнения;
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовПоОперацииСервер();
	НастроитьСписокВыбораПорядкаРасчетов();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ВалютаДокумента = Объект.Валюта;
	СтатусДокумента = Объект.Статус;
	
	ИспользоватьЗаказыКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов");
	
	УстановитьВидимостьЭлементовПоРегулярностиСервер();
	УстановитьВидимостьЭлементовПоОперацииСервер();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	УстановитьВидимостьКоманд();
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	ИспользуютсяДоговорыКонтрагентов = Число(Объект.ИспользуютсяДоговорыКонтрагентов);
	НадписьОплата = НадписьОплата(Объект.ФормаОплаты, Объект.Календарь, Объект.ЭтапыГрафикаОплаты.Количество());
	
	ОбновитьВидимостьЭлементовОграниченияРучныхСкидок(ЭтаФорма);
	
	ВидимостьЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Количество() > 0 Или Не ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"КомандаПереходаКОплате", "Видимость", ВидимостьЭтаповОплаты);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"НадписьОплата", "Видимость", ВидимостьЭтаповОплаты);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГрафикОплаты", "Видимость", Не ВидимостьЭтаповОплаты);
	
	НастроитьСписокВыбораПорядкаРасчетов();
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	УстановитьПодписку = Ложь;
	
	Если Объект.Статус = Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано Тогда
		УстановитьПодписку = Ложь;
	ИначеЕсли Объект.Статус = Перечисления.СтатусыСоглашенийСКлиентами.Закрыто Или
		Объект.Статус = Перечисления.СтатусыСоглашенийСКлиентами.Действует Тогда
		УстановитьПодписку = Объект.Согласован;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Номер");
	МассивЭлементов.Добавить("Партнер");
	МассивЭлементов.Добавить("СегментПартнеров");
	МассивЭлементов.Добавить("Соглашение");
	МассивЭлементов.Добавить("Регулярное");
	МассивЭлементов.Добавить("Период");
	МассивЭлементов.Добавить("КоличествоПериодов");
	МассивЭлементов.Добавить("СуммаСоглашения");
	МассивЭлементов.Добавить("ДатаНачалаДействия");
	МассивЭлементов.Добавить("ДатаОкончанияДействия");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Валюта");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("ВидЦен");
	МассивЭлементов.Добавить("НалогообложениеНДС");
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("ПорядокОплаты");
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("СрокПоставки");
	МассивЭлементов.Добавить("СегментНоменклатуры");
	МассивЭлементов.Добавить("ХозяйственнаяОперация");
	МассивЭлементов.Добавить("ПроцентРучнойСкидки");
	МассивЭлементов.Добавить("ПроцентРучнойНаценки");
	МассивЭлементов.Добавить("ОграничиватьРучныеСкидки");
	МассивЭлементов.Добавить("ЦеновыеГруппы");
	МассивЭлементов.Добавить("Товары");
	МассивЭлементов.Добавить("СкидкиНаценки");
	МассивЭлементов.Добавить("ДоступноВнешнимПользователям");
	МассивЭлементов.Добавить("ИспользуютсяДоговорыКонтрагентов");
	МассивЭлементов.Добавить("ПорядокРасчетов");
	МассивЭлементов.Добавить("ИспользуетсяВРаботеТорговыхПредставителей");
	МассивЭлементов.Добавить("ВозвращатьМногооборотнуюТару");
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	МассивЭлементов.Добавить("РассчитыватьДатуВозвратаТарыПоКалендарю");
	
	МассивЭлементов.Добавить("УстановитьИнтервал");
	МассивЭлементов.Добавить("СкидкиНаценкиПодобратьСкидкиНаценки");
	МассивЭлементов.Добавить("СкидкиНаценкиУдалитьСкидкуНаценку");
	МассивЭлементов.Добавить("КонтекстноеМенюСкидкиНаценкиПодобратьСкидкиНаценки");
	МассивЭлементов.Добавить("КонтекстноеМенюСкидкиНаценкиУдалитьСкидкуНаценку");
	МассивЭлементов.Добавить("ЦеновыеГруппыЗаполнитьВидЦенВыделенныхСтрокЦеновыеГруппы");
	МассивЭлементов.Добавить("ТоварыЗаполнитьВидЦенВыделенныхСтрокТовары");
	МассивЭлементов.Добавить("ТоварыДобавитьТоварыПоОтбору");
	
	ОбщегоНазначенияУТ.УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(ЭтаФорма, МассивЭлементов, УстановитьПодписку);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоРегулярностиСервер()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("Период");
	МассивЭлементов.Добавить("КоличествоПериодов");
	МассивЭлементов.Добавить("ОписаниеРегулярныхУсловий");
	МассивЭлементов.Добавить("СуммаСоглашения");
	МассивЭлементов.Добавить("СуммаСоглашенияВалюта");

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Объект.Регулярное);
	
	Если Объект.Регулярное Тогда
		ОписаниеРегулярныхУсловий = ОписаниеРегулярныхУсловий(Объект.КоличествоПериодов, Объект.Период, Объект.СуммаДокумента, ВалютаДокумента);
	Иначе
		ОписаниеРегулярныхУсловий = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Справочники.СоглашенияСКлиентами.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации
	);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТолькоКредитныеЭтапы", Истина));
	КонецЕсли;
	Элементы.ГрафикОплаты.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("СпособРасчетаВознаграждения");
	МассивЭлементов.Добавить("ПроцентВознаграждение");
	МассивЭлементов.Добавить("УдержатьВознаграждение");
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Истина);
		СпособРасчетаВознагражденияПриИзмененииСервер();
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
	КонецЕсли;
	
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(Объект.ХозяйственнаяОперация, Элементы.ТоварыНоменклатура);
	
	ПродажиСервер.ЗаполнитьСписокВыбораНалогообложения(Объект.ХозяйственнаяОперация, Элементы.НалогообложениеНДС);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКоманд()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ФормаСкопировать");
	МассивЭлементов.Добавить("ФормаУдалить");
	МассивЭлементов.Добавить("ФормаУстановитьПометкуУдаления");
	МассивЭлементов.Добавить("ФормаГруппаКнопок");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидЦенВыделенныхСтрокТоварыСервер(ВидЦен)

	Для Каждого ТекущаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.ВидЦены = ВидЦен;
		Если СтрокаТаблицы.Цена <> 0 Тогда
			СтрокаТаблицы.Цена = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоСкидкиНаценкиРекурсивно(ДеревоСкидок)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ПостроитьДеревоСкидкиНаценкиРекурсивно(СтрокаДерева);
			
			СтрокаДерева.ИндексКартинки = СкидкиНаценкиСервер.ПолучитьИндексКартинкиДляГруппы(СтрокаДерева);
			СтрокаДерева.СкидкаНаценка = СтрокаДерева.СкидкаНаценка;
			
		Иначе
			
			СтрокаДерева.ИндексКартинки = СкидкиНаценкиСервер.ПолучитьИндексКартинкиДляСкидки(СтрокаДерева);
			СтрокаДерева.СкидкаНаценка  = СтрокаДерева.СкидкаНаценка;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоСкидкиНаценки()
	
	ДеревоСкидок = СкидкиНаценкиСервер.ПолучитьДеревоСкидок(Объект.СкидкиНаценки.Выгрузить().ВыгрузитьКолонку("СкидкаНаценка"), Новый Массив);
	ДеревоСкидок.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	
	ПостроитьДеревоСкидкиНаценкиРекурсивно(ДеревоСкидок);
	
	ЗначениеВРеквизитФормы(ДеревоСкидок, "СкидкиНаценки");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТоварыПоОтборуНаСервере(АдресВоВременномХранилище)
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для Каждого ТекСтрока Из ТаблицаТовары Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура", ТекСтрока.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", ТекСтрока.Характеристика);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора); 
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидЦенВыделенныхСтрокЦеновыеГруппыСервер(ВидЦен)

	Для Каждого ТекущаяСтрока Из Элементы.ЦеновыеГруппы.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.ЦеновыеГруппы.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.ВидЦен = ВидЦен;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПорядокОплатыГруппуФинансовогоУчета(Валюта, НалогообложениеНДС, ПорядокОплаты, ГруппаФинансовогоУчета)
	
	ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Валюта, НалогообложениеНДС);
	ЗаполнитьГруппуФинансовогоУчета(ПорядокОплаты, ГруппаФинансовогоУчета);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьГруппуФинансовогоУчета(ПорядокОплаты, ГруппаФинансовогоУчета)
	
	ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(ПорядокОплаты);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПорядокОплаты(ГруппаФинансовогоУчета, ПорядокОплаты)
	
	ПорядокОплаты = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьРеквизитыГруппыФинансовогоУчета(ГруппаФинансовогоУчета).ПорядокОплаты;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеРегулярныхУсловий(КоличествоПериодов, Период, СуммаДокумента, ВалютаДокумента)
	
	// Проверка на заполненность реквизитов
	Если КоличествоПериодов = 0 Или Период = ПредопределенноеЗначение("Перечисление.Периодичность.ПустаяСсылка") Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеПериодов = Новый Соответствие;
	
	ПредставлениеКоличестваПериодов = "";
	ОстатокОтДеления10              = КоличествоПериодов % 10;
	ОстатокОтДеления100             = КоличествоПериодов % 100;
	ПериодСтрокой                   = Строка(Период);
	
	СоответствиеПериодов.Вставить("День",      НСтр("ru='каждый день'"));
	СоответствиеПериодов.Вставить("Неделя",    НСтр("ru='каждую неделю'"));
	СоответствиеПериодов.Вставить("Декада",    НСтр("ru='каждую декаду'"));
	СоответствиеПериодов.Вставить("Месяц",     НСтр("ru='каждый месяц'"));
	СоответствиеПериодов.Вставить("Квартал",   НСтр("ru='каждый квартал'"));
	СоответствиеПериодов.Вставить("Полугодие", НСтр("ru='каждое полугодие'"));
	СоответствиеПериодов.Вставить("Год",       НСтр("ru='каждый год'"));
	
	Если ОстатокОтДеления10 = 1 Тогда
		
		ПредставлениеКоличестваПериодов = Строка(КоличествоПериодов) + НСтр("ru='-го периода'");
		
	ИначеЕсли ОстатокОтДеления10 > 1 И ОстатокОтДеления10 <= 4 Тогда
		
		ПредставлениеКоличестваПериодов = Строка(КоличествоПериодов) + НСтр("ru='-х периодов'");
		
	Иначе
		
		ПредставлениеКоличестваПериодов = Строка(КоличествоПериодов) + НСтр("ru='-и периодов'");
		
	КонецЕсли;
	
	Если КоличествоПериодов = 11
		Или КоличествоПериодов = 12
		Или КоличествоПериодов = 13
		Или КоличествоПериодов = 14
		Или ОстатокОтДеления100 = 11
		Или ОстатокОтДеления100 = 12
		Или ОстатокОтДеления100 = 13
		Или ОстатокОтДеления100 = 14 Тогда
		
		ПредставлениеКоличестваПериодов = Строка(КоличествоПериодов) + НСтр("ru='-и периодов'");
		
	КонецЕсли;
	
	ОписаниеРегулярныхУсловий = НСтр("ru='Поставки товаров должны осуществляться %ПериодСтрокой% на сумму %СуммаДокумента% %ВалютаДокумента% в течение %ПредставлениеКоличестваПериодов%'");
	ОписаниеРегулярныхУсловий = СтрЗаменить(ОписаниеРегулярныхУсловий, "%ПредставлениеКоличестваПериодов%", ПредставлениеКоличестваПериодов);
	ОписаниеРегулярныхУсловий = СтрЗаменить(ОписаниеРегулярныхУсловий, "%ПериодСтрокой%",                   СоответствиеПериодов.Получить(ПериодСтрокой));
	ОписаниеРегулярныхУсловий = СтрЗаменить(ОписаниеРегулярныхУсловий, "%СуммаДокумента%",                  СуммаДокумента);
	ОписаниеРегулярныхУсловий = СтрЗаменить(ОписаниеРегулярныхУсловий, "%ВалютаДокумента%",                 ВалютаДокумента);
	
	Возврат ОписаниеРегулярныхУсловий;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьДеревоСкидокРекурсивно(СтрокаДерева, ЭлементФормы)
	
	КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		ЭлементФормы.Развернуть(Элемент.ПолучитьИдентификатор());
		РазвернутьДеревоСкидокРекурсивно(Элемент, ЭлементФормы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПериодДействияРегулярногоСоглашения()
	
	Если Объект.Регулярное И ЗначениеЗаполнено (Объект.Период) И
		ЗначениеЗаполнено (Объект.КоличествоПериодов) Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ДатаНачалаДействия) И ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.ДатаНачалаДействия = Объект.Дата;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДатаНачалаДействия) Тогда
		
			ДатаНачалаБлижайшегоПериода  =  ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуНачалаБлижайшегоПериода(Объект.ДатаНачалаДействия, Объект.Период);
			Объект.ДатаОкончанияДействия = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачалаБлижайшегоПериода, Объект.Период, Объект.КоличествоПериодов);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьЭлементовОграниченияРучныхСкидок(Форма)
	
	ОграничиватьРучныеСкидки = Форма.Объект.ОграничиватьРучныеСкидки И Форма.Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию");
	
	Форма.Элементы.ПроцентРучнойСкидки.Видимость  = ОграничиватьРучныеСкидки;
	Форма.Элементы.ПроцентРучнойНаценки.Видимость = ОграничиватьРучныеСкидки;
	Форма.Элементы.ЦеновыеГруппыПроцентРучнойСкидки.Видимость = ОграничиватьРучныеСкидки;
	Форма.Элементы.ЦеновыеГруппыПроцентРучнойНаценки.Видимость = ОграничиватьРучныеСкидки;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ЭтапыГрафикаОплаты.Выгрузить());
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьОплата(ФормаОплаты, Календарь, КоличествоЭтаповОплаты)
	
	НадписьОплата = НСтр("ru='Форма оплаты: %ФормаОплаты%, Календарь: %Календарь%, Этапов оплаты: %КоличествоЭтаповОплаты%'");
	НадписьОплата = СтрЗаменить(НадписьОплата, "%ФормаОплаты%", ?(ЗначениеЗаполнено(ФормаОплаты), ФормаОплаты, НСтр("ru='Любая'")));
	НадписьОплата = СтрЗаменить(НадписьОплата, "%Календарь%", ?(ЗначениеЗаполнено(Календарь), Календарь, НСтр("ru='<не указан>'")));
	НадписьОплата = СтрЗаменить(НадписьОплата, "%КоличествоЭтаповОплаты%", КоличествоЭтаповОплаты);
	
	Возврат НадписьОплата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ЭтапыОплаты = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
		НоваяСтрока = Объект.ЭтапыГрафикаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСкидкиНаценкиКлиент()
	
	СписокСкидкиНаценки = Новый СписокЗначений();
	Для Каждого ТекСтрока Из Объект.СкидкиНаценки Цикл
		СписокСкидкиНаценки.Добавить(ТекСтрока.СкидкаНаценка);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ",      Объект.Ссылка);
	ПараметрыФормы.Вставить("СкидкиНаценки", СписокСкидкиНаценки);
	СписокСкидкиНаценки = ОткрытьФормуМодально("Справочник.СкидкиНаценки.Форма.ФормаПодбора", ПараметрыФормы, ЭтаФорма);
	
	Если СписокСкидкиНаценки <> Неопределено Тогда
		
		Объект.СкидкиНаценки.Очистить();
		
		Для Каждого ТекСтрока Из СписокСкидкиНаценки Цикл
			
			НоваяСтрока = Объект.СкидкиНаценки.Добавить();
			НоваяСтрока.СкидкаНаценка = ТекСтрока.Значение;
			
		КонецЦикла;
		
		// Обновим список Скидок(наценок)
		ПостроитьДеревоСкидкиНаценки();
		
		РазвернутьДеревоСкидокРекурсивно(СкидкиНаценки, Элементы.СкидкиНаценки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
	
	Если Не ПартнерИзменился Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		
		Объект.Соглашение = ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка");
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПриИзмененииПартнераСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСписокВыбораПорядкаРасчетов()
	
	СписокВыбора = Элементы.ПорядокРасчетов.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Объект.ИспользуютсяДоговорыКонтрагентов Тогда
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПустаяСсылка(), НСтр("ru='Определяется в договорах'"));
		Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным, НСтр("ru='По отчетам по комиссии'"));
		Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	ИначеЕсли НЕ ИспользоватьЗаказыКлиентов Тогда
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
		Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
	Иначе
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоЗаказамНакладным);
		СписокВыбора.Добавить(Перечисления.ПорядокРасчетов.ПоНакладным);
	КонецЕсли;
	
	Элементы.ПорядокРасчетов.Доступность = НЕ Объект.ИспользуютсяДоговорыКонтрагентов;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Контроль несогласованных изменений

&НаКлиенте
Процедура Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении[Элемент.Имя]+"(Элемент)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер(Команда)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(Команда.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.Команды[Команда.Имя]+"(Команда)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Свойство(Элемент.Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения[Элемент.Имя]+"(Элемент, Отказ)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Свойство(Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением[Имя]+"(Элемент, Отказ)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ОбщегоНазначенияУТКлиент.ПриДействииСЭлементомЗависящимОтСтатуса(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	Имя = Элемент.Имя;
	Если СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Свойство(Имя) Тогда
		Выполнить(СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления[Имя]+"(Элемент, Отказ, Копирование, Родитель, Группа)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизитаЗависящегоОтСтатуса()
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	ОбщегоНазначенияУТКлиент.ПослеИзмененияРеквизитаЗависящегоОтСтатуса(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("РассчитыватьДатуВозвратаТарыПоКалендарю");
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "Доступность", Форма.Объект.ВозвращатьМногооборотнуюТару);
	
КонецПроцедуры
