#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура ЗаполнитьНаборыЗначенийДоступа заполняет наборы значений доступа
// по объекту в таблице с полями:
//  - НомерНабора     Число                                     (необязательно, если набор один),
//  - ВидДоступа      ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//  - ЗначениеДоступа Неопределено, СправочникСсылка или др.    (обязательно),
//  - Чтение          Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Добавление      Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Изменение       Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора),
//  - Удаление        Булево (необязательно, если набор для всех прав; устанавливается для одной строки набора).
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт

	Если ЗначениеЗаполнено(Партнер) Тогда

		СтрокаТаб = Таблица.Добавить();
		СтрокаТаб.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ГруппыПартнеров;
		СтрокаТаб.ЗначениеДоступа = Партнер;

	КонецЕсли;

	Если ЗначениеЗаполнено(Организация) Тогда

		СтрокаТаб = Таблица.Добавить();
		СтрокаТаб.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.Организации;
		СтрокаТаб.ЗначениеДоступа = Организация;

	КонецЕсли;

	Если ЗначениеЗаполнено(Склад) Тогда

		СтрокаТаб = Таблица.Добавить();
		СтрокаТаб.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.Склады;
		СтрокаТаб.ЗначениеДоступа = Склад;

	КонецЕсли;

	Если Таблица.Количество() = 0 Тогда

		СтрокаТаб = Таблица.Добавить();
		СтрокаТаб.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ПустаяСсылка();
		СтрокаТаб.ЗначениеДоступа = Справочники.ГруппыПользователей.ВсеПользователи;

	КонецЕсли;

КонецПроцедуры

// Заполняет условия продаж в соглашении с клиентом.
//
// Параметры:
//	УсловияПродаж - Структура - Структура для заполнения
//
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж) Экспорт
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = УсловияПродаж.Валюта;
	ХозяйственнаяОперация = УсловияПродаж.ХозяйственнаяОперация;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГрафикОплаты) Тогда
		ГрафикОплаты = УсловияПродаж.ГрафикОплаты;
	КонецЕсли;
	
	ПорядокОплаты = УсловияПродаж.ПорядокОплаты;
	ГруппаФинансовогоУчета = УсловияПродаж.ГруппаФинансовогоУчета;
	
	Если ЗначениеЗаполнено(УсловияПродаж.СрокПоставки) Тогда
		СрокПоставки = УсловияПродаж.СрокПоставки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ВидЦен) Тогда
		ВидЦен = УсловияПродаж.ВидЦен;
	КонецЕсли;
	
	ЦенаВключаетНДС    = УсловияПродаж.ЦенаВключаетНДС;
	НалогообложениеНДС = УсловияПродаж.НалогообложениеНДС;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Организация) Тогда
		
		Организация = УсловияПродаж.Организация;
		
	КонецЕсли;
	
	СуммаДокумента = УсловияПродаж.СуммаДокумента;
	Регулярное     = УсловияПродаж.Регулярное;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Период) Тогда
		Период = УсловияПродаж.Период;
	КонецЕсли;
	
	КоличествоПериодов = УсловияПродаж.КоличествоПериодов;
	
	Если Регулярное И ЗначениеЗаполнено (Период) И
		ЗначениеЗаполнено (КоличествоПериодов) Тогда
		
		Если Не ЗначениеЗаполнено(ДатаНачалаДействия) Тогда
			ДатаНачалаДействия = Дата;
		КонецЕсли;

		Если ЗначениеЗаполнено(ДатаНачалаДействия) Тогда
			ДатаОкончанияДействия = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачалаДействия, Период, КоличествоПериодов);
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользуетсяВРаботеТорговыхПредставителей = УсловияПродаж.ИспользуетсяВРаботеТорговыхПредставителей;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Склад) Тогда
		Склад = УсловияПродаж.Склад;
	КонецЕсли;
	
	СегментНоменклатуры = УсловияПродаж.СегментНоменклатуры;
	
	ОграничиватьРучныеСкидки  = УсловияПродаж.ОграничиватьРучныеСкидки;
	ПроцентРучнойСкидки  = УсловияПродаж.ПроцентРучнойСкидки;
	ПроцентРучнойНаценки = УсловияПродаж.ПроцентРучнойНаценки;
	
	Если ЗначениеЗаполнено(УсловияПродаж.СпособРасчетаВознаграждения) Тогда
		СпособРасчетаВознаграждения = УсловияПродаж.СпособРасчетаВознаграждения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ПроцентВознаграждения) Тогда
		ПроцентВознаграждения = УсловияПродаж.ПроцентВознаграждения;
	КонецЕсли;
	
	УдержатьВознаграждение = УсловияПродаж.УдержатьВознаграждение;
	
	ИспользуютсяДоговорыКонтрагентов = УсловияПродаж.ИспользуютсяДоговорыКонтрагентов;
	ДоступноВнешнимПользователям = УсловияПродаж.ДоступноВнешнимПользователям;
	
	ВозвращатьМногооборотнуюТару = УсловияПродаж.ВозвращатьМногооборотнуюТару;
	СрокВозвратаМногооборотнойТары = УсловияПродаж.СрокВозвратаМногооборотнойТары;
	РассчитыватьДатуВозвратаТарыПоКалендарю = УсловияПродаж.РассчитыватьДатуВозвратаТарыПоКалендарю;
	
КонецПроцедуры

// Заполняет условия продаж по умолчанию в коммерческом предложении.
//
Процедура ЗаполнитьУсловияПродажПоУмолчанию() Экспорт
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	КонецЕсли;

	Если ЗначениеЗаполнено (Партнер) Тогда
	
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
			Партнер,
			Новый Структура(
				"ТолькоТиповые,
				|УчитыватьГруппыСкладов, ВыбранноеСоглашение",
				Истина,
				Истина,
				Соглашение
			)
		);
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			
			Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
			ЗаполнитьТабличныеЧастиПоСоглашению(Соглашение);
			
		КонецЕсли;
		
		ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
		ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по соглашению в соглашении.
//
Процедура ЗаполнитьУсловияПродажПоCоглашению() Экспорт
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение, Истина);
	ЗаполнитьУсловияПродаж(УсловияПродаж);
	ЗаполнитьТабличныеЧастиПоСоглашению(Соглашение);
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьДокументПоОтбору(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.Партнеры") Тогда
		ЗаполнитьДокументНаОснованииПартнера(ДанныеЗаполнения);
	КонецЕсли;

	ИнициализироватьСправочник();

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Типовое Тогда
		
		// В типовом соглашении не нужно заполнять реквизиты "Партнер", "Соглашение"
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("Соглашение");
		
	КонецЕсли;
	
	// В индивидуальных соглашениях при условии использования только их
	// и при условии совместного использования с типовыми, но при праве отклонения от условий продаж
	// соглашение заполнять не нужно
	ИспользоватьТиповыеСоглашенияСКлиентами        = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	
	ТолькоИндивидуальные = НЕ ИспользоватьТиповыеСоглашенияСКлиентами И ИспользоватьИндивидуальныеСоглашенияСКлиентами;
	ОтклонениеОтУсловийПродаж = Пользователи.РолиДоступны("ОтклонениеОтУсловийПродаж");
	
	Если Не Типовое 
		И (ТолькоИндивидуальные 
		ИЛИ (ИспользоватьТиповыеСоглашенияСКлиентами И ИспользоватьИндивидуальныеСоглашенияСКлиентами И ОтклонениеОтУсловийПродаж))Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Соглашение");
	КонецЕсли;

	Если НЕ ДоступноВнешнимПользователям Тогда
		
		// В соглашении не для внешних пользователей не обязательно заполнять "ВидЦен", "График оплаты", "Этапы оплаты", "Организация"
		МассивНепроверяемыхРеквизитов.Добавить("Организация");
		МассивНепроверяемыхРеквизитов.Добавить("ВидЦен");
		МассивНепроверяемыхРеквизитов.Добавить("ГрафикОплаты");
		МассивНепроверяемыхРеквизитов.Добавить("ЭтапыГрафикаОплаты");
		
	Иначе
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты") Тогда 
			МассивНепроверяемыхРеквизитов.Добавить("ГрафикОплаты");
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("ЭтапыГрафикаОплаты");
		КонецЕсли;
		
	КонецЕсли;
	
	// Дата начала действия соглашения должна быть не меньше, чем дата документа.
	Если ЗначениеЗаполнено(Дата) И ЗначениеЗаполнено(ДатаНачалаДействия) Тогда
		
		Если НачалоДня(Дата) > ДатаНачалаДействия Тогда
			
			ТекстОшибки = НСтр("ru='Дата начала действия соглашения должна быть не меньше даты соглашения'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, 
				"ДатаНачалаДействия",
				,
				Отказ
			);
			
		Конецесли;
		
	КонецЕсли;
	
	// Дата окончания действия соглашения должна быть не меньше, чем дата документа.
	Если ЗначениеЗаполнено(Дата) И ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда
		
		Если НачалоДня(Дата) > ДатаОкончанияДействия Тогда
			
			ТекстОшибки = НСтр("ru='Дата окончания действия соглашения должна быть не меньше даты соглашения'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, 
				"ДатаОкончанияДействия",
				,
				Отказ
			);
			
		Конецесли;
		
	КонецЕсли;
	
	// Дата окончания действия соглашения должна быть не меньше, чем дата начала действия.
	Если ЗначениеЗаполнено(ДатаНачалаДействия) И ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда
		
		Если ДатаНачалаДействия > ДатаОкончанияДействия Тогда
			
			ТекстОшибки = НСтр("ru='Дата окончания действия соглашения должна быть не меньше даты начала действия'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, 
				"ДатаОкончанияДействия",
				,
				Отказ
			);
			
		Конецесли;
		
	КонецЕсли;
	
	// При передаче на комиссию можно указать только график с кредитными этапами оплаты.
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		И ЗначениеЗаполнено(ГрафикОплаты)
		И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГрафикОплаты, "ТолькоКредитныеЭтапы") Тогда
		
		ТекстОшибки = НСтр("ru='Необходимо указать график оплаты, содержащий только кредитные этапы'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект, 
			"ГрафикОплаты",
			,
			Отказ
		);
		
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("ДатаНачалаДействия");
	МассивНепроверяемыхРеквизитов.Добавить("СуммаДокумента");
	МассивНепроверяемыхРеквизитов.Добавить("КоличествоПериодов");
	МассивНепроверяемыхРеквизитов.Добавить("Период");
	
	Если Регулярное Тогда
		
		// В регулярном соглашении должна быть указана сумма, периодичность, количество периодов, дата начала действия
		
		Если Не ЗначениеЗаполнено(ДатаНачалаДействия) Тогда
			
			ТекстОшибки = НСтр("ru='В регулярном соглашении необходимо заполнить поле ""Дата начала действия""'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект, 
				"ДатаНачалаДействия",
				,
				Отказ
			);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СуммаДокумента) Тогда
			
			ТекстОшибки = НСтр("ru='В регулярном соглашении необходимо заполнить поле ""Cумма""'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"СуммаДокумента",
				,
				Отказ
			);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КоличествоПериодов) Тогда
			
			ТекстОшибки = НСтр("ru='В регулярном соглашении необходимо заполнить поле ""Количество периодов""'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"КоличествоПериодов",
				,
				Отказ
			);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Период) Тогда
			
			ТекстОшибки = НСтр("ru='В регулярном соглашении необходимо заполнить поле ""Период""'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"Период",
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Дата окончания действия соглашения должна быть не меньше, чем дата окончания указанного количества периодов
	Если Регулярное И ЗначениеЗаполнено(Период) И ЗначениеЗаполнено(КоличествоПериодов) И
		ЗначениеЗаполнено(ДатаНачалаДействия) И ЗначениеЗаполнено(ДатаОкончанияДействия) Тогда
		
		ДатаНачалаБлижайшегоПериода =  ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуНачалаБлижайшегоПериода(ДатаНачалаДействия, Период);
		ДатаОкончанияПериода = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачалаБлижайшегоПериода, Период, КоличествоПериодов);
		
		Если ДатаОкончанияПериода > КонецДня(ДатаОкончанияДействия) Тогда
			
			ТекстОшибки = НСтр("ru='Дата окончания действия соглашения не должна быть меньше, чем дата окончания указанного количества периодов ""%ДатаОкончанияПериода%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОкончанияПериода%", Формат(ДатаОкончанияПериода,"ДЛФ=DD"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"ДатаОкончанияДействия",
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// В табличной части Товары должен быть заполнен вид цен или фиксированная цена
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ВидЦены");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Цена");
	Для ТекИндекс = 0 По Товары.Количество()-1 Цикл
		
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Товары[ТекИндекс].НомерСтроки);
		
		Если Не ЗначениеЗаполнено(Товары[ТекИндекс].ВидЦены) И
			Не ЗначениеЗаполнено(Товары[ТекИндекс].Цена) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Вид цены"" или колонка ""Цена""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ЭтотОбъект,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Товары[ТекИндекс].НомерСтроки, "ВидЦены"),
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям")
		И ОграничиватьРучныеСкидки Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЦеновыеГруппы.ВидЦен");
	КонецЕсли;
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	Если ИспользуютсяДоговорыКонтрагентов Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПорядокРасчетов");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
	Если Не Отказ Тогда
		Отказ = ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты);
	КонецЕсли;
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументоПродажи(Склад);
	
	Если СкладГруппа И (ИспользуетсяВРаботеТорговыхПредставителей Или ДоступноВнешнимПользователям) Тогда
		
		ТекстОшибки = НСтр("ru='Запрещено выбирать группу складов, если соглашение используется в работе торговых представителей или доступно внешним пользователям'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"Склад",
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если НЕ Типовое И ТолькоИндивидуальные И НЕ ОтклонениеОтУсловийПродаж И 
		НЕ Согласован И Статус <> Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано Тогда
		
		ТекстОшибки = НСтр("ru='Запрещено изменять статус несогласованного соглашения, если нет прав на отклонение от условий продаж. Необходимо согласование.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"Статус",
			,
			Отказ
		);
		
	КонецЕсли;
	
	ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(ЭтотОбъект, Отказ);
	ВзаиморасчетыСервер.ПроверитьПорядокОплаты(ЭтотОбъект, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ИзменитьПризнакСогласованностиСправочника(
		ЭтотОбъект,
		Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано
	);
	
	Если Типовое Тогда

		Соглашение  = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		Партнер     = Справочники.Партнеры.ПустаяСсылка();
		Контрагент  = Справочники.Контрагенты.ПустаяСсылка();

	Иначе

		СегментПартнеров = Справочники.СегментыНоменклатуры.ПустаяСсылка();

	КонецЕсли;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		Если СкидкиНаценки.Количество() <> 0 Тогда
			СкидкиНаценки.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	НастройкиПродажДляПользователейСервер.ОчиститьНеиспользуемыеПравилаПродаж(ЭтотОбъект);
	
	Если ИспользуютсяДоговорыКонтрагентов Тогда
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоглашенияСКлиентами.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.ИспользуютсяДоговорыКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИспользоватьДоговорыСКлиентами.Значение КАК ИспользоватьДоговорыСКлиентами
	|ИЗ
	|	Константа.ИспользоватьДоговорыСКлиентами КАК ИспользоватьДоговорыСКлиентами");
	
	РезультатПакетаЗапросов = Запрос.ВыполнитьПакет();
	
	ИспользуютсяДоговорыКонтрагентов = Не РезультатПакетаЗапросов[0].Пустой();
	ВыборкаКонстанты = РезультатПакетаЗапросов[1].Выбрать();
	ВыборкаКонстанты.Следующий();
	
	Если ИспользуютсяДоговорыКонтрагентов И Не ВыборкаКонстанты.ИспользоватьДоговорыСКлиентами Тогда
		ДополнительныеСвойства.Вставить("УстановленоЗначениеКонстантыИспользоватьДоговорыСКлиентами", Истина);
		Константы.ИспользоватьДоговорыСКлиентами.Установить(Истина);
	КонецЕсли;
	
	Если Не ИспользуютсяДоговорыКонтрагентов И ВыборкаКонстанты.ИспользоватьДоговорыСКлиентами Тогда
		ДополнительныеСвойства.Вставить("УстановленоЗначениеКонстантыИспользоватьДоговорыСКлиентами", Ложь);
		Константы.ИспользоватьДоговорыСКлиентами.Установить(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	Статус                  = Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано;
	Согласован              = Ложь;
	ДатаНачалаДействия      = '00010101';
	ДатаОкончанияДействия   = '00010101';

	ИнициализироватьСправочник();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение

Процедура ПроверитьВозможностьВводаНаОсновании()
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерКлиент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Партнер, "Клиент");
	
	Если Не ПартнерКлиент Тогда
		
		ТекстОшибки = НСтр("ru='Партнер не является клиентом. Соглашение с клиентом может быть создано только на основании клиента.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Партнер%", Партнер);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиПоСоглашению(Знач СоглашениеСКлиентом)
	Если СоглашениеСКлиентом <> ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка") Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СоглашенияСКлиентами.Товары.(
		|		Ссылка,
		|		НомерСтроки,
		|		Номенклатура,
		|		Характеристика,
		|		Упаковка,
		|		ВидЦены,
		|		Цена,
		|		СрокПоставки
		|	) КАК Товары,
		|	СоглашенияСКлиентами.ЦеновыеГруппы.(
		|		Ссылка,
		|		НомерСтроки,
		|		ЦеноваяГруппа,
		|		ВидЦен,
		|		СрокПоставки,
		|		ПроцентРучнойСкидки,
		|		ПроцентРучнойНаценки
		|	) КАК ЦеновыеГруппы,
		|	СоглашенияСКлиентами.СкидкиНаценки.(
		|		Ссылка,
		|		НомерСтроки,
		|		СкидкаНаценка
		|	) КАК СкидкиНаценки
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|ГДЕ
		|	СоглашенияСКлиентами.Ссылка = &СоглашениеСКлиентом");
		
		Запрос.УстановитьПараметр("СоглашениеСКлиентом", СоглашениеСКлиентом);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Товары.Загрузить(Выборка.Товары.Выгрузить());
		ЦеновыеГруппы.Загрузить(Выборка.ЦеновыеГруппы.Выгрузить());
		СкидкиНаценки.Загрузить(Выборка.СкидкиНаценки.Выгрузить());
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииПартнера(Знач Основание)
	
	Партнер = Основание;
	ПроверитьВозможностьВводаНаОсновании();
	ЗаполнитьУсловияПродажПоУмолчанию();
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоОтбору(Знач ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		
		Партнер = ДанныеЗаполнения.Партнер;
		ПроверитьВозможностьВводаНаОсновании();
		ЗаполнитьУсловияПродажПоУмолчанию();
		
	ИначеЕсли ДанныеЗаполнения.Свойство("ПартнерОтбор") Тогда
		
		Партнер = ДанныеЗаполнения.ПартнерОтбор;
		ПроверитьВозможностьВводаНаОсновании();
		ЗаполнитьУсловияПродажПоУмолчанию();
		
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Организация") Тогда
		Организация = ДанныеЗаполнения.Организация;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьСправочник()

	Менеджер               = Пользователи.ТекущийПользователь();
	Валюта                 = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
	Организация            = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад                  = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
	НалогообложениеНДС     = ЗначениеНастроекПовтИсп.ПолучитьНалогообложениеНДС(Организация, , Дата);
	ПорядокОплаты          = Перечисления.ПорядокОплатыПоСоглашениям.ПолучитьПорядокОплатыПоУмолчанию(Валюта, НалогообложениеНДС);
	ГруппаФинансовогоУчета = Справочники.ГруппыФинансовогоУчетаРасчетов.ПолучитьГруппуФинансовогоУчетаПоУмолчанию(ПорядокОплаты);

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеСоглашенийСКлиентами")
	 Или Пользователи.РолиДоступны("ОтклонениеОтУсловийПродаж") Тогда
		Статус = Перечисления.СтатусыСоглашенийСКлиентами.Действует;
	Иначе
		Статус = Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано;
	КонецЕсли;
	
	Если Не ИспользуютсяДоговорыКонтрагентов Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		Иначе
			ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли