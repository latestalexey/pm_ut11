////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет таблицу реквизитов, зависимых от хозяйственной операции
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция соглашения
//	МассивВсехРеквизитов - Массив - реквизиты, которые не зависят от хозяйственной операции
//	МассивРеквизитовОперации - Массив - реквизиты, которые зависят от хозяйственной операции
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("СпособРасчетаВознаграждения");
	МассивВсехРеквизитов.Добавить("ПроцентВознаграждения");
	МассивВсехРеквизитов.Добавить("УдержатьВознаграждение");
	МассивВсехРеквизитов.Добавить("ПроцентРучнойСкидки");
	МассивВсехРеквизитов.Добавить("ПроцентРучнойНаценки");
	МассивВсехРеквизитов.Добавить("ОграничиватьРучныеСкидки");
	МассивВсехРеквизитов.Добавить("СкидкиНаценки");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		МассивРеквизитовОперации.Добавить("СпособРасчетаВознаграждения");
		МассивРеквизитовОперации.Добавить("ПроцентВознаграждения");
		МассивРеквизитовОперации.Добавить("УдержатьВознаграждение");
	Иначе
		МассивРеквизитовОперации.Добавить("ПроцентРучнойСкидки");
		МассивРеквизитовОперации.Добавить("ПроцентРучнойНаценки");
		МассивРеквизитовОперации.Добавить("СкидкиНаценки");
		МассивРеквизитовОперации.Добавить("ОграничиватьРучныеСкидки");
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет реквизиты документа.
//
// Параметры:
//	ДокументСсылка - СправочникСсылка.СоглашенияСКлиентами - Ссылка на документ
//
// Возвращаемое значение:
//	Структура - Реквизиты выбранного документа
//
Функция ПолучитьРеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ЭтоПередачаНаКомиссию
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ХозяйственнаяОперация = Выборка.ХозяйственнаяОперация;
		ЭтоПередачаНаКомиссию = Выборка.ЭтоПередачаНаКомиссию;
	Иначе
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПустаяСсылка();
		ЭтоПередачаНаКомиссию = Ложь;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура("ХозяйственнаяОперация, ЭтоПередачаНаКомиссию",
		ХозяйственнаяОперация,
		ЭтоПередачаНаКомиссию
	);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Устанавливает статус соглашений с клиентами
//
// Параметры:
//	Соглашения - Массив - массив ссылок на соглашения с клиентами
//	Статус     - ПеречислениеСсылка.СтатусыСоглашенийСКлиентами - статус, который будет установлен у соглашений
//
Функция УстановитьСтатус(Знач Соглашения, Знач Статус) Экспорт
	
	МассивСсылок = Новый Массив();
	КоличествоОбработанных = 0;
	
	Для Каждого Соглашение Из Соглашения Цикл
	
		Если ТипЗнч(Соглашение) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСсылок.Добавить(Соглашение);
		
	КонецЦикла;
	
	Если МассивСсылок = 0 Тогда
		Возврат КоличествоОбработанных;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СоглашениеСКлиентом.Ссылка КАК Ссылка,
	|	СоглашениеСКлиентом.ПометкаУдаления КАК ПометкаУдаления,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
	|ГДЕ
	|	СоглашениеСКлиентом.Ссылка В(&МассивСсылок)");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("Статус", Статус);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			
			ТекстОшибки = НСтр("ru='Соглашение %Соглашение% помечено на удаление. Невозможно изменить статус'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Соглашение%", Выборка.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
			
		КонецЕслИ;
		
		Если Выборка.СтатусСовпадает Тогда
			
			ТекстОшибки = НСтр("ru='Соглашению %Соглашение% уже присвоен статус ""%Статус%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Соглашение%", Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Статус);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			Продолжить;
			
		КонецЕслИ;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось заблокировать %Соглашение%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Соглашение%", Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			
		КонецПопытки;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Статус = Статус;
		
		Если Статус = Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано Тогда
			Если Объект.Согласован Тогда
				Объект.Согласован = Ложь;
			КонецЕсли;
		КонецЕсли;
			
		Если Не Объект.ПроверитьЗаполнение() Тогда
			Продолжить;
		КонецЕсли;
			
		Попытка
			
			Объект.Записать();
			КоличествоОбработанных = КоличествоОбработанных + 1;
			
		Исключение
			
			ТекстОшибки = НСтр("ru='Не удалось записать %Соглашение%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Соглашение%", Выборка.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			
		КонецПопытки
		
	КонецЦикла;
	
	Возврат КоличествоОбработанных;
	
КонецФункции

// Возвращает массив имен ролей с правом "Добавление" для данного документа
//
// Параметры:
//	ДляТиповыхСоглашений - Булево
//	ДляИндивидуальныхСоглашений - Булево
//
// Возвращаемое значение:
//	Массив - Массив с именами ролей
//
Функция ИменаРолейСПравомДобавления(ДляТиповыхСоглашений = Истина, ДляИндивидуальныхСоглашений = Истина) Экспорт
	
	МассивРолей = Новый Массив;
	МассивРолей.Добавить("ПолныеПрава");
	Если ДляИндивидуальныхСоглашений Тогда
		МассивРолей.Добавить("ДобавлениеИзменениеИндивидуальныхСоглашенийСКлиентами");
	КонецЕсли;
	Если ДляТиповыхСоглашений Тогда
		МассивРолей.Добавить("ДобавлениеИзменениеСоглашенийСКлиентами");
	КонецЕсли;
	Возврат МассивРолей;
	
КонецФункции

Функция ТиповыеПравилаПродаж(ХозяйственнаяОперация) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		Возврат Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	КонецЕсли;
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СоглашенияСКлиентами.Ссылка
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И НЕ СоглашенияСКлиентами.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.СоглашенияСКлиентами.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Партнер                     = Справочники.Партнеры.ПустаяСсылка();
	ДатаДокумента               = ТекущаяДата();
	ТолькоТиповые               = Ложь;
	ТолькоИспользуемыеВРаботеТП = Ложь;
	СтрокаПоиска                = "";
	
	Если Параметры.Отбор.Свойство("Партнер") Тогда
		Партнер = Параметры.Отбор.Партнер;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
		
	Если Параметры.Отбор.Свойство("Дата") Тогда
		ДатаДокумента = НачалоДня(Параметры.Отбор.Дата);
	КонецЕсли;
		
	Если Параметры.Свойство("ТолькоТиповые") Тогда
		ТолькоТиповые = Параметры.ТолькоТиповые;
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоИспользуемыеВРаботеТП") Тогда
		ТолькоИспользуемыеВРаботеТП = Параметры.ТолькоИспользуемыеВРаботеТП;
	КонецЕсли;
	
	Параметры.Свойство("СтрокаПоиска",СтрокаПоиска);
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 51
		|	ДокументСоглашениеСКлиентом.Ссылка          КАК Ссылка,
		|	ДокументСоглашениеСКлиентом.Наименование    КАК Наименование,
		|	ДокументСоглашениеСКлиентом.Номер           КАК Номер,
		|	ДокументСоглашениеСКлиентом.Дата            КАК Дата,
		|	ДокументСоглашениеСКлиентом.Типовое         КАК Типовое,
		|
		|	ВЫБОР
		|		КОГДА
		|			ДокументСоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		|			И ((ДокументСоглашениеСКлиентом.ДатаНачалаДействия <> ДАТАВРЕМЯ(1,1,1) И
		|			ДокументСоглашениеСКлиентом.ДатаНачалаДействия > &ДатаДокумента))
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК СрокДействияНеНаступил,
		|
		|	ВЫБОР
		|		КОГДА
		|			ДокументСоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		|			И ((ДокументСоглашениеСКлиентом.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1,1,1) И
		|			ДокументСоглашениеСКлиентом.ДатаОкончанияДействия < &ДатаДокумента))
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК СрокДействияИстек
		|
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК ДокументСоглашениеСКлиентом
		|ГДЕ
		|	НЕ ДокументСоглашениеСКлиентом.ПометкаУдаления
		|	И ДокументСоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		|	И 
		|	ВЫБОР
		|		КОГДА &ТолькоТиповые = ИСТИНА
		|		И (ДокументСоглашениеСКлиентом.Типовое
		|		И (ДокументСоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		|		ИЛИ ДокументСоглашениеСКлиентом.СегментПартнеров В
		|			(ВЫБРАТЬ
		|				ПартнерыСегмента.Сегмент
		|			ИЗ
		|				РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|			ГДЕ
		|				ПартнерыСегмента.Партнер = &Партнер)))
		|		ТОГДА ИСТИНА
		|		
		|		КОГДА &ТолькоТиповые = ЛОЖЬ
		|		И (ДокументСоглашениеСКлиентом.Типовое
		|		И (ДокументСоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		|		ИЛИ ДокументСоглашениеСКлиентом.СегментПартнеров В
		|			(ВЫБРАТЬ
		|				ПартнерыСегмента.Сегмент
		|			ИЗ
		|				РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|			ГДЕ
		|				ПартнерыСегмента.Партнер = &Партнер))
		|			ИЛИ
		|				(НЕ ДокументСоглашениеСКлиентом.Типовое И
		|				ДокументСоглашениеСКлиентом.Партнер = &Партнер))
		|		ТОГДА ИСТИНА
		|		
		|		ИНАЧЕ ЛОЖЬ
		|	
		|	КОНЕЦ
		|	И
		|	ВЫБОР
		|		КОГДА &ТолькоИспользуемыеВРаботеТП = ИСТИНА И
		|			ДокументСоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей
		|			ТОГДА ИСТИНА
		|		КОГДА &ТолькоИспользуемыеВРаботеТП = ЛОЖЬ ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ 
		|	И (ДокументСоглашениеСКлиентом.Наименование ПОДОБНО &СтрокаПоиска
		|	ИЛИ ДокументСоглашениеСКлиентом.Номер ПОДОБНО &СтрокаПоиска)
		|УПОРЯДОЧИТЬ ПО
		|	Типовое ВОЗР,
		|	ДатаНачалаДействия ВОЗР,
		|	ДатаОкончанияДействия ВОЗР
		|");
		
	Запрос.УстановитьПараметр("Партнер",                     Партнер);
	Запрос.УстановитьПараметр("ДатаДокумента",               НачалоДня(ДатаДокумента));
	Запрос.УстановитьПараметр("ТолькоТиповые",               ТолькоТиповые);
	Запрос.УстановитьПараметр("ТолькоИспользуемыеВРаботеТП", ТолькоИспользуемыеВРаботеТП);
	Запрос.УстановитьПараметр("СтрокаПоиска",                СтрокаПоиска + "%");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ДанныеВыбора = Новый СписокЗначений();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.Наименование) И
				ЗначениеЗаполнено(Выборка.Дата) И
				ЗначениеЗаполнено(Выборка.Номер) Тогда
				
				Представление = НСтр("ru='%Наименование% (%Номер% от %Дата%)'");
				Представление = СтрЗаменить(Представление,"%Наименование%", Выборка.Наименование);
				Представление = СтрЗаменить(Представление,"%Номер%",        Выборка.Номер);
				Представление = СтрЗаменить(Представление,"%Дата%",         Формат(Выборка.Дата, "ДФ=dd.MM.yyyy"));
				
			ИначеЕсли ЗначениеЗаполнено(Выборка.Наименование) И
				ЗначениеЗаполнено(Выборка.Дата) Тогда
				
				Представление = НСтр("ru='%Наименование% (от %Дата%)'");
				Представление = СтрЗаменить(Представление,"%Наименование%", Выборка.Наименование);
				Представление = СтрЗаменить(Представление,"%Дата%",         Формат(Выборка.Дата, "ДФ=dd.MM.yyyy"));
				
			ИначеЕсли ЗначениеЗаполнено(Выборка.Наименование) И
				ЗначениеЗаполнено(Выборка.Номер) Тогда
				
				Представление = НСтр("ru='%Наименование% (%Номер%)'");
				Представление = СтрЗаменить(Представление,"%Наименование%", Выборка.Наименование);
				Представление = СтрЗаменить(Представление,"%Номер%",        Выборка.Номер);
				
			Иначе
				
				Представление = НСтр("ru='%Наименование%'");
				Представление = СтрЗаменить(Представление,"%Наименование%", Выборка.Наименование);
				
			КонецЕсли;
			
			Если Выборка.Типовое Тогда
				КартинкаСоглашения = БиблиотекаКартинок.ТиповоеСоглашениеСКлиентом;
			Иначе
				КартинкаСоглашения = БиблиотекаКартинок.ИндивидуальноеСоглашениеСКлиентом;
			КонецЕсли;
			
			Структура = Новый Структура();
			Структура.Вставить("Значение", Выборка.Ссылка);
			
			Если Выборка.СрокДействияНеНаступил Тогда
				Структура.Вставить("Предупреждение", НСтр("ru='У соглашения не наступил срок действия.'"));
			ИначеЕсли Выборка.СрокДействияИстек Тогда
				Структура.Вставить("Предупреждение", НСтр("ru='У соглашения истек срок действия.'"));
			КонецЕсли;
			
			ДанныеВыбора.Добавить(
				Структура,
				Представление,
				,
				КартинкаСоглашения
			);
			
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Печать

Функция СформироватьПечатнуюФорму(Соглашение, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияСКлиентами.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА СоглашенияСКлиентами.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ТОГДА &СтрокаБезОграничений
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(СоглашенияСКлиентами.Склад)
	|	КОНЕЦ КАК Склад,
	|	СоглашенияСКлиентами.Номер,
	|	СоглашенияСКлиентами.Дата,
	|	СоглашенияСКлиентами.Организация,
	|	СоглашенияСКлиентами.Контрагент,
	|	СоглашенияСКлиентами.ДатаНачалаДействия,
	|	СоглашенияСКлиентами.ДатаОкончанияДействия,
	|	ПРЕДСТАВЛЕНИЕ(СоглашенияСКлиентами.Валюта) КАК Валюта,
	|	ПРЕДСТАВЛЕНИЕ(СоглашенияСКлиентами.НалогообложениеНДС) КАК НалогообложениеНДС,
	|	СоглашенияСКлиентами.ЦенаВключаетНДС,
	|	СоглашенияСКлиентами.СрокПоставки,
	|	СоглашенияСКлиентами.ГрафикОплаты,
	|	ВЫБОР
	|		КОГДА ГрафикиОплаты.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка)
	|			ТОГДА &СтрокаЛюбая
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ГрафикиОплаты.ФормаОплаты)
	|	КОНЕЦ КАК ФормаОплаты,
	|	ГрафикиОплаты.Этапы.(
	|		НомерСтроки,
	|		ВариантОплаты,
	|		Сдвиг,
	|		ПроцентПлатежа
	|	),
	|	СоглашенияСКлиентами.Ссылка
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиОплаты КАК ГрафикиОплаты
	|		ПО СоглашенияСКлиентами.ГрафикОплаты = ГрафикиОплаты.Ссылка
	|ГДЕ
	|	СоглашенияСКлиентами.Ссылка = &Соглашение";
	
	Запрос.УстановитьПараметр("СтрокаБезОграничений",НСтр("ru = 'без ограничений'"));
	Запрос.УстановитьПараметр("СтрокаЛюбая",НСтр("ru = 'любая'"));
	
	ЗаполнитьТабличныйДокументСоглашениеСКлиентом(ТабличныйДокумент, Запрос, ОбъектыПечати);
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СоглашениеСКлиентом") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СоглашениеСКлиентом", "Соглашение с клиентом", СформироватьПечатнуюФорму(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ЗаполнитьРеквизитыШапкиДокументСоглашениеСКлиентом(ДанныеПечати, Макет, ТабличныйДокумент)
	
	ОбластьПоставщик 				= Макет.ПолучитьОбласть("Поставщик");
	ОбластьЮрЛицоПокупатель 		= Макет.ПолучитьОбласть("ЮрЛицоПокупатель");
	ОбластьПериодДействия			= Макет.ПолучитьОбласть("ПериодДействия");
	ОбластьУсловияСоглашения		= Макет.ПолучитьОбласть("УсловияСоглашения");
	ОбластьНДС						= Макет.ПолучитьОбласть("НДС");
	ОбластьВалюта					= Макет.ПолучитьОбласть("Валюта");
	ОбластьСкладСрокОтгрузки		= Макет.ПолучитьОбласть("СкладСрокОтгрузки");
		
	//Период действия
	ОбластьПериодДействия.Параметры.ТекстПериодДействия = ФормированиеПечатныхФорм.СформироватьТекстПериодДействия(ДанныеПечати.ДатаНачалаДействия,ДанныеПечати.ДатаОкончанияДействия);
	ТабличныйДокумент.Вывести(ОбластьПериодДействия);
	
	//Наша организация
	СведенияООрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация,ТекущаяДата());
	ОбластьПоставщик.Параметры.ПредставлениеПоставщика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияООрганизации);
	ТабличныйДокумент.Вывести(ОбластьПоставщик);
	
	//Контрагент клиента
	Если ДанныеПечати.Контрагент.Пустая() Тогда
		ПредставлениеЮрЛицоПокупатель = НСтр("ru='Без ограничений'");
	Иначе	
		СведенияОПокупателе  		  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент,ТекущаяДата());
		ПредставлениеЮрЛицоПокупатель = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	КонецЕсли;
	
	ОбластьЮрЛицоПокупатель.Параметры.ПредставлениеЮрЛицоПокупатель = ПредставлениеЮрЛицоПокупатель;
	ТабличныйДокумент.Вывести(ОбластьЮрЛицоПокупатель);
	
	//Условия соглашения
	ТабличныйДокумент.Вывести(ОбластьУсловияСоглашения);
		
	ОбластьВалюта.Параметры.ТекстВалюта =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru='Валюта соглашения - %1'"),ДанныеПечати.Валюта) + ".";
	ТабличныйДокумент.Вывести(ОбластьВалюта);
	
	ОбластьНДС.Параметры.ТекстНДС = ФормированиеПечатныхФорм.СформироватьТекстНДС(ДанныеПечати.НалогообложениеНДС,ДанныеПечати.ЦенаВключаетНДС);
	ТабличныйДокумент.Вывести(ОбластьНДС);
	
	ОбластьСкладСрокОтгрузки.Параметры.ТекстСкладСрокОтгрузки =  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Склад: %1. Срок поставки(дней): %2.'"),
																														 ДанныеПечати.Склад,
																														 ДанныеПечати.СрокПоставки);
	ТабличныйДокумент.Вывести(ОбластьСкладСрокОтгрузки);		
	
КонецПроцедуры

Процедура ЗаполнитьГрафикОплатыСоглашениеСКлиентом(ДанныеПечати,Макет,ТабличныйДокумент)

	ОбластьГрафикОплатыЗаголовок	= Макет.ПолучитьОбласть("ГрафикОплатыЗаголовок");
	ОбластьЭтапыОплатыШапка 		= Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплатыВариантОплаты");
	ОбластьФормаОплаты				= Макет.ПолучитьОбласть("ФормаОплаты");
	ОбластьЭтапыОплатыСтрока		= Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплатыВариантОплаты");
	ОбластьПодвалЭтапыОплаты		= Макет.ПолучитьОбласть("ПодвалЭтапыОплаты");
	
	//График оплаты
	ТабличныйДокумент.Вывести(ОбластьГрафикОплатыЗаголовок);
	
	ОбластьФормаОплаты.Параметры.ТекстФормаОплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Форма оплаты: %1.'"),ДанныеПечати.ФормаОплаты);
	ТабличныйДокумент.Вывести(ОбластьФормаОплаты);
	
	ТабличныйДокумент.Вывести(ОбластьЭтапыОплатыШапка);
	
	Для каждого ЭтапОплаты Из ДанныеПечати.Этапы.Выгрузить() Цикл
		ЗаполнитьЗначенияСвойств(ОбластьЭтапыОплатыСтрока.Параметры,ЭтапОплаты);
		ТабличныйДокумент.Вывести(ОбластьЭтапыОплатыСтрока);
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(ОбластьПодвалЭтапыОплаты);

КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументСоглашениеСКлиентом(ТабличныйДокумент, Запрос, ОбъектыПечати) Экспорт
	
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	ДанныеПечати.Следующий();
	
	Макет = УправлениеПечатью.ПолучитьМакет("Справочник.СоглашенияСКлиентами.ПФ_MXL_СоглашениеСКлиентом");

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");

	ОбластьЗаголовок.Параметры.ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ДанныеПечати.Наименование + " №" + ДанныеПечати.Номер + " %1 " + Формат(ДанныеПечати.Дата,"ДЛФ=DD"),НСтр("ru='от'"));
	
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьЗаголовок, ДанныеПечати.Ссылка);
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ЗаполнитьРеквизитыШапкиДокументСоглашениеСКлиентом(ДанныеПечати,Макет,ТабличныйДокумент);
	ЗаполнитьГрафикОплатыСоглашениеСКлиентом(ДанныеПечати,Макет,ТабличныйДокумент);
	
КонецПроцедуры

// Создает соглашение по-умолчанию
//
// Параметры
//  ПередачаНаКомиссию  - Булево - Определяет необходимость создания соглашения с видом операции ПередачаНаКомиссию
//
Процедура СоздатьСоглашениеПоУмолчанию(Знач ПередачаНаКомиссию = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоглашенияСКлиентами.Ссылка
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|	И СоглашенияСКлиентами.Типовое
	|	И НЕ ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СоглашенияСКлиентами.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоглашенияСКлиентами.Дата УБЫВ");

	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ? (ПередачаНаКомиссию, Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию,Перечисления.ХозяйственныеОперации.РеализацияКлиенту));

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если НЕ ВыборкаДетальныеЗаписи.Следующий() Тогда
		Соглашение = Справочники.СоглашенияСКлиентами.СоздатьЭлемент();
		Соглашение.Дата = ТекущаяДата();
		Соглашение.Статус = Перечисления.СтатусыСоглашенийСКлиентами.Действует;
		Соглашение.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		Соглашение.Типовое = Истина;
		Если ПередачаНаКомиссию Тогда
			Соглашение.Наименование = НСтр("ru='Типовые правила продаж (комиссия)'");
			Соглашение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
			Соглашение.СпособРасчетаВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается;
		Иначе
			Соглашение.Наименование = НСтр("ru='Типовые правила продаж'");
			Соглашение.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		КонецЕсли;
		Соглашение.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		Соглашение.ЦенаВключаетНДС = Истина;
		Соглашение.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
		Соглашение.Записать();
	КонецЕсли;

КонецПроцедуры // СоздатьСоглашениеПоУмолчанию()
