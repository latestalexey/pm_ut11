#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

//Возвращает имена блокруемых реквизитов для механизма блокирования реквизитов БСП
//	Возвращаемое значание:
//		Массив - имена блокируемых реквизитов
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт

	Результат = Новый Массив;
	Результат.Добавить("ИспользоватьОрдернуюСхемуПриОтгрузке");
	Результат.Добавить("ИспользоватьОрдернуюСхемуПриПоступлении");
	Результат.Добавить("ИспользоватьСкладскиеПомещения");
 	Результат.Добавить("НастройкаАдресногоХранения");
	Результат.Добавить("ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач");
	Результат.Добавить("ТипСклада");
	Результат.Добавить("Родитель");
	Результат.Добавить("РозничныйВидЦены");
	Результат.Добавить("ИспользоватьСтатусыРасходныхОрдеров");
	Результат.Добавить("ИспользоватьСтатусыПриходныхОрдеров");
	
	Возврат Результат;

КонецФункции

//Возвращает розничный склад, если найден один розничный склад, иначе - пустую ссылку
//
//	Возвращаемое значение:
//		СправочникСслыка.Склады - розничный склад
//
Функция РозничныйСкладПоУмолчанию() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	Склады.Ссылка КАК Склад
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	(НЕ Склады.ПометкаУдаления)
	|	И Склады.ТипСклада = ЗНАЧЕНИЕ(Перечисление.ТипыСкладов.РозничныйМагазин)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 
	   И Выборка.Следующий()
	Тогда
		Склад = Выборка.Склад;
	Иначе
		Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Склад;

КонецФункции 

//Возвращает розничный склад, если найден один розничный склад, иначе - пустую ссылку
//
//	Параметры:
//		УчитыватьГруппыСкладов - Булево - если ИСТИНА, но может быть возвращена группа складов, которую разрешено выбирать в документах,
//						иначе - возвращается только конкретный склад, если он один в справочнике
//		ИсключитьГруппыДоступныеВЗаказах - Булево - если УчитыватьГруппыСкладов = ИСТИНА, то этот параметр позволяет исключить из анализа
//						группы складов, которые можно выбирать только в заказах
//	Возвращаемое значение:
//		СправочникСслыка.Склады - розничный склад
//
Функция СкладПоУмолчанию(УчитыватьГруппыСкладов = Ложь, ИсключитьГруппыДоступныеВЗаказах = Ложь) Экспорт
	
	Если УчитыватьГруппыСкладов Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Таблица.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Таблица
		|ГДЕ
		|	НЕ Таблица.ПометкаУдаления
		|	И Таблица.ВыборГруппы В (&ВыборГруппыСкладов)
		|");
		
		Запрос.УстановитьПараметр("ВыборГруппыСкладов", ВариантыВыбораГруппыСкладов(ИсключитьГруппыДоступныеВЗаказах));
		
	Иначе
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	Таблица.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Таблица
		|ГДЕ
		|	(НЕ Таблица.ПометкаУдаления)
		|	И (НЕ Таблица.ЭтоГруппа)
		|");
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.Количество() = 1 Тогда
		Склад = Выборка.Склад;
	Иначе
		Склад = Справочники.Склады.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции

// Проверяет, что на складе отключен контроль свободных остатков
//
//	Возвращаемое значение:
//		Булево
//  
Функция КонтрольОстатковНаСкладеОтключен(Склад) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Результат
	|ИЗ
	|	РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаКонтроляОстатков
	|ГДЕ
	|	НастройкаКонтроляОстатков.Склад = &Склад
	|	И НастройкаКонтроляОстатков.ВариантКонтроля <> ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.НеКонтролировать)");
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

// Фукнция возвращает учетный вид цен склада
//
//	Параметры:
//		Склад - СправочникСсылка.Склады - склад, для которого определяется учетный вид цены.
//	Возвращаемое значение:
//		СправочникСсылка.ВидыЦен
//
Функция УчетныйВидЦены(Склад) Экспорт
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Справочники.ВидыЦен.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.УчетныйВидЦены
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка = &Склад";
	Запрос.УстановитьПараметр("Склад",Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.УчетныйВидЦены;
	Иначе
		Возврат Справочники.ВидыЦен.ПустаяСсылка();
	КонецЕсли;
КонецФункции

// Фукнция возвращает источник информации о ценах для печати склада
//
//	Параметры:
//		Склад - СправочникСсылка.Склады - склад, для которого определяется учетный вид цены.
//	Возвращаемое значение:
//		ПеречислениеСсылка.ИсточникиИнформацииОЦенахДляПечати
//
Функция ИсточникИнформацииОЦенахДляПечати(Склад) Экспорт
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Склады.ИсточникИнформацииОЦенахДляПечати
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка = &Склад";
	Запрос.УстановитьПараметр("Склад",Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИсточникИнформацииОЦенахДляПечати;
	Иначе
		Возврат Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПустаяСсылка();
	КонецЕсли;
КонецФункции

// Проверяет в привелигированном режиме, является ли элемент справочника группой складов
//	
//	Параметры:
//		Склад - СправочникСсылка.Склады - элемента справочника, для которого производится проверка
//	Возвращаемое значение:
// 		Булево 
//
Функция ЭтоГруппа(Склад) Экспорт
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ЭтоГруппа");
	
КонецФункции 

// Проверяет в привелигированном режиме, является ли элемент справочника группой складов, и при этом
// склады могут указываться в табличных частях документов продажи	
//
//	Параметры:
//		Склад - СправочникСсылка.Склады - элемента справочника, для которого производится проверка
//	Возвращаемое значение:
// 		Булево 
//
Функция ЭтоГруппаИСкладыИспользуютсяВТЧДокументоПродажи(Склад) Экспорт
	
	Если ЗначениеЗаполнено(Склад) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи") Тогда
		Возврат Справочники.Склады.ЭтоГруппа(Склад);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции 

// Проверяет в привелигированном режиме, является ли элемент справочника группой складов, и при этом
// склады могут указываться в табличных частях документов закупки	
//
// Параметры:
// Склад - СправочникСсылка.Склады - Склад, признак которого нужно получить
//
// Возвращаемое значение:
// Булево
//
Функция ЭтоГруппаИСкладыИспользуютсяВТЧДокументоЗакупки(Склад) Экспорт
	
	Если ЗначениеЗаполнено(Склад) 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки") Тогда
		Возврат Справочники.Склады.ЭтоГруппа(Склад);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции 

// Возврашает массив возможных (согласно настройкам ФО) вариатов выбора группы складов
//
// Параметры:
// 		ИсключитьГруппыДоступныеВЗаказах - Булево - указывает на необходимость в массив не включать значение РазрешитьВЗаказах
//
// Возвращаемое значение:
// 		Массив - содержит значения перечисления ВыборГруппыСкладов, по которым необходимо отобрать склады
//
Функция ВариантыВыбораГруппыСкладов(ИсключитьГруппыДоступныеВЗаказах) Экспорт
	
	ВыборГруппыСкладов = Новый Массив();
	ВыборГруппыСкладов.Добавить(Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных);
	Если Не ИсключитьГруппыДоступныеВЗаказах Тогда
		ВыборГруппыСкладов.Добавить(Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказах);
	КонецЕсли;
	
	Возврат ВыборГруппыСкладов;
	
КонецФункции

//Возвращает массив ссылок на группы складов, в иерархию которых входит указанный склад
//	
//	Параметры:
//		Склад - СправочникСслыка.Склады - склад, для которого нужно получить массив групп
//	Возвращаемое значение:
//		Масссив - массив ссылок на группы, в иерархию которых входит склад
//
Функция ИерархияГрупп(Склад) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	МассивГрупп = Новый Массив;
	
	Группа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "Родитель");
	
	Пока ЗначениеЗаполнено(Группа) Цикл
		МассивГрупп.Добавить(Группа);
		Группа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Группа, "Родитель");
	КонецЦикла;

	Возврат МассивГрупп; 
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Склад              = Неопределено;
	СтрокаПоиска       = Неопределено;
	ВыборГруппыСкладов = Неопределено;
	
	Параметры.Свойство("СтрокаПоиска", СтрокаПоиска);
	Если СтрокаПоиска = Неопределено Тогда
		СтрокаПоиска = "";
	КонецЕсли;
	
	Если Параметры.Свойство("Склад", Склад) И Параметры.Свойство("ВыборГруппыСкладов", ВыборГруппыСкладов) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений();
		
		Если ЗначениеЗаполнено(Склад) Тогда
			
			Запрос = Новый Запрос("
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Склады.Ссылка          КАК Склад,
				|	Склады.ПометкаУдаления КАК ПометкаУдаления
				|ИЗ
				|	Справочник.Склады КАК Склады
				|ГДЕ
				|	Склады.Ссылка В ИЕРАРХИИ(&Склад)
				|	И НЕ Склады.ЭтоГруппа
				|	И Склады.ВыборГруппы В (&ВыборГруппыСкладов)
				|	И Склады.Наименование ПОДОБНО &СтрокаПоиска
				|");
				
			Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска + "%");
			Запрос.УстановитьПараметр("ВыборГруппыСкладов", ВыборГруппыСкладов);
			Запрос.УстановитьПараметр("Склад", Склад);
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					СтруктураВыбора = Новый Структура("Значение", Выборка.Склад);
					Если Выборка.ПометкаУдаления Тогда
						СтруктураВыбора.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
					КонецЕсли;
					ДанныеВыбора.Добавить(СтруктураВыбора);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("ВыборГруппыСкладов", ВыборГруппыСкладов) Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений();
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Склады.Ссылка          КАК Склад,
			|	Склады.ПометкаУдаления КАК ПометкаУдаления
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	(НЕ Склады.ЭтоГруппа
			|	ИЛИ (Склады.ЭтоГруппа И Склады.ВыборГруппы В (&ВыборГруппыСкладов)))
			|	И Склады.Наименование ПОДОБНО &СтрокаПоиска
			|");
			
		Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска + "%");
		Запрос.УстановитьПараметр("ВыборГруппыСкладов", ВыборГруппыСкладов);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				СтруктураВыбора = Новый Структура("Значение", Выборка.Склад);
				Если Выборка.ПометкаУдаления Тогда
					СтруктураВыбора.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
				КонецЕсли;
				ДанныеВыбора.Добавить(СтруктураВыбора);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПолученияДанныхВыбора()

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		
		Параметры.Вставить("Ключ", ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию());
		ВыбраннаяФорма = "ФормаЭлемента";
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Обработчик обновления УТ 11.1.0.0
// Заполняет реквизит ИсточникИнформацииОЦенахДляПечати
Процедура ЗаполнитьИсточникИнформацииОЦенахДляПечати() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.ИсточникИнформацииОЦенахДляПечати = ЗНАЧЕНИЕ(Перечисление.ИсточникиИнформацииОЦенахДляПечати.ПустаяСсылка)
	|	И НЕ Склады.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен;
				
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления УТ 11.1.0.0
// Устанавливает в Истина константу ИспользоватьОрдерныеСклады,
//	если в информационной базе есть хотя бы один склад, на котором применяется ордерная схема.
// Устанавливает константы ИспользоватьРаспоряженияНаИнвентаризацию и НеИспользоватьРаспоряженияНаИнвентаризацию
//	в зависимости от значения константы ИспользоватьОрдерныеСклады
//	и в зависимости от наличия в информационной базе распоряжений на инвентаризацию
//
Процедура ВключитьИспользованиеОрдерныхСкладов_РаспоряженийНаИнвентаризациюТоваров() Экспорт
	
	Если НЕ Константы.ИспользоватьОрдерныеСклады.Получить() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Склады.Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	(Склады.ИспользоватьОрдернуюСхемуПриОтгрузке
		|			ИЛИ Склады.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
		|			ИЛИ Склады.ИспользоватьОрдернуюСхемуПриПоступлении)";
		
		Константы.ИспользоватьОрдерныеСклады.Установить(НЕ Запрос.Выполнить().Пустой());
	КонецЕсли;
	
	Если Не Константы.ИспользоватьРаспоряженияНаИнвентаризацию.Получить()
			И Не Константы.НеИспользоватьРаспоряженияНаИнвентаризацию.Получить() Тогда
		
		Если Константы.ИспользоватьОрдерныеСклады.Получить() Тогда
			
			Константы.НеИспользоватьРаспоряженияНаИнвентаризацию.Установить(Ложь);
			Константы.ИспользоватьРаспоряженияНаИнвентаризацию.Установить(Истина);
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РаспоряжениеНаИнвентаризациюТоваров.Ссылка
			|ИЗ
			|	Документ.РаспоряжениеНаИнвентаризациюТоваров КАК РаспоряжениеНаИнвентаризациюТоваров";
			
			Если Запрос.Выполнить().Пустой() Тогда
				Константы.НеИспользоватьРаспоряженияНаИнвентаризацию.Установить(Истина);
				Константы.ИспользоватьРаспоряженияНаИнвентаризацию.Установить(Ложь);
			Иначе
				Константы.НеИспользоватьРаспоряженияНаИнвентаризацию.Установить(Ложь);
				Константы.ИспользоватьРаспоряженияНаИнвентаризацию.Установить(Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик обновления УТ 11.1.0.0
// Для всех ордерных складов включает использование статусов расходных и приходных ордеров
Процедура ВключитьИспользованиеСтатусовОрдеров() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка 
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	(Склады.ИспользоватьОрдернуюСхемуПриОтгрузке <> Склады.ИспользоватьСтатусыРасходныхОрдеров
	|			ИЛИ Склады.ИспользоватьОрдернуюСхемуПриПоступлении <> Склады.ИспользоватьСтатусыПриходныхОрдеров)
	|	И НЕ Склады.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ИспользоватьСтатусыРасходныхОрдеров = СправочникОбъект.ИспользоватьОрдернуюСхемуПриОтгрузке;
		СправочникОбъект.ИспользоватьСтатусыПриходныхОрдеров = СправочникОбъект.ИспользоватьОрдернуюСхемуПриПоступлении;
		
		СправочникОбъект.Записать();
		
	КонецЦикла;

КонецПроцедуры

// Обработчик обновления УТ 11.1.0.0
// Если есть рабочие участки, то включается их использование
Процедура ВключитьИспользованиеРабочихУчастков() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РабочиеУчастки.Ссылка) КАК Количество,
	|	РабочиеУчастки.Владелец КАК Склад,
	|	РабочиеУчастки.Помещение КАК Помещение
	|ПОМЕСТИТЬ РабочиеУчастки
	|ИЗ
	|	Справочник.РабочиеУчастки КАК РабочиеУчастки
	|
	|СГРУППИРОВАТЬ ПО
	|	РабочиеУчастки.Владелец,
	|	РабочиеУчастки.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА Склады.ИспользоватьСкладскиеПомещения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИспользованиеСкладскихРабочихУчастков.ОпределяетсяНастройкамиПомещения)
	|		КОГДА РабочиеУчастки.Количество ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИспользованиеСкладскихРабочихУчастков.НеИспользовать)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИспользованиеСкладскихРабочихУчастков.Использовать)
	|	КОНЕЦ КАК ИспользованиеРабочихУчастков
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РабочиеУчастки КАК РабочиеУчастки
	|		ПО Склады.Ссылка = РабочиеУчастки.Склад
	|			И (ЗНАЧЕНИЕ(Справочник.СкладскиеПомещения.ПустаяСсылка) = РабочиеУчастки.Помещение)
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|	И ВЫБОР
	|			КОГДА Склады.ИспользоватьСкладскиеПомещения
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ИспользованиеСкладскихРабочихУчастков.ОпределяетсяНастройкамиПомещения)
	|			КОГДА РабочиеУчастки.Количество ЕСТЬ NULL 
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ИспользованиеСкладскихРабочихУчастков.НеИспользовать)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИспользованиеСкладскихРабочихУчастков.Использовать)
	|		КОНЕЦ <> Склады.ИспользованиеРабочихУчастков";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ИспользованиеРабочихУчастков = Выборка.ИспользованиеРабочихУчастков;
		
		СправочникОбъект.Записать();
		
	КонецЦикла;

КонецПроцедуры

#КонецЕсли