
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Объект, "ГруппаДополнительныеРеквизиты");
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	ТипКартыПриИзмененииНаСервере();
	
	ПостроитьДеревоСкидкиНаценки();
	
	Если Объект.Персонализирована Тогда
		ТипПерсонализации = "Персонализированная";
	Иначе
		ТипПерсонализации = "Обезличенная";
	КонецЕсли;
	
	Если Объект.АвтоматическаяРегистрацияПриПервомСчитывании Тогда
		ПорядокАктивации = "ПриПервомСчитывании";
	Иначе
		ПорядокАктивации = "СПомощьюПомощника";
	КонецЕсли;
	
	Элементы.ПорядокАктивации.Доступность = НЕ Объект.ТипКарты = Перечисления.ТипыКарт.Смешанная;
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СформироватьОписаниеНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Элементы.ГруппаКомментарий.Картинка = ОбщегоНазначенияУТ.ПолучитьКартинкуКомментария(Объект.Комментарий);
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ТипКартыПриИзменении(Элемент)
	
	ТипКартыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипКартыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПерсонализацииПриИзменении(Элемент)
	
	Объект.Персонализирована = ТипПерсонализации = "Персонализированная";
	СформироватьОписаниеНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокАктивацииПриИзменении(Элемент)
	
	Объект.АвтоматическаяРегистрацияПриПервомСчитывании = ПорядокАктивации = "ПриПервомСчитывании";
	СформироватьОписаниеНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыВидовКартЛояльности.Закрыт") Тогда
		
		Ответ = Вопрос("Действующие карты лояльности будут аннулированы, продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ СКИДКИНАЦЕНКИ

&НаКлиенте
Процедура СкидкиНаценкиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Не Элементы.СкидкиНаценкиУдалить.Доступность Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ВыделеннаяСтрока Из Элементы.СкидкиНаценки.ВыделенныеСтроки Цикл
		НайденнаяСтрока = СкидкиНаценки.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если НайденнаяСтрока <> Неопределено Тогда
			УдалитьСкидкуНаценкуРекурсивно(НайденнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	// Обновим список Скидок(наценок)
	ПостроитьДеревоСкидкиНаценки();
	
	РазвернутьДеревоСкидокРекурсивно(СкидкиНаценки, Элементы.СкидкиНаценки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНД

&НаКлиенте
Процедура ПроверитьПересеченияДиапазонов(Команда)
	
	ОчиститьСообщения();
	ПроверитьПересечениеДиапазоновНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСкидкиНаценки(Команда)
	
	СписокСкидкиНаценки = Новый СписокЗначений();
	Для Каждого ТекСтрока Из Объект.СкидкиНаценки Цикл
		СписокСкидкиНаценки.Добавить(ТекСтрока.СкидкаНаценка);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ",      Объект.Ссылка);
	ПараметрыФормы.Вставить("СкидкиНаценки", СписокСкидкиНаценки);
	СписокСкидкиНаценки = ОткрытьФормуМодально("Справочник.СкидкиНаценки.Форма.ФормаПодбора", ПараметрыФормы, ЭтаФорма);
	
	Если СписокСкидкиНаценки <> Неопределено Тогда
		
		Объект.СкидкиНаценки.Очистить();
		
		Для Каждого ТекСтрока Из СписокСкидкиНаценки Цикл
			
			НоваяСтрока = Объект.СкидкиНаценки.Добавить();
			НоваяСтрока.СкидкаНаценка = ТекСтрока.Значение;
			
		КонецЦикла;
		
		// Обновим список Скидок(наценок)
		ПостроитьДеревоСкидкиНаценки();
		
		РазвернутьДеревоСкидокРекурсивно(СкидкиНаценки, Элементы.СкидкиНаценки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала    = Объект.ДатаНачалаДействия;
	Диалог.Период.ДатаОкончания = Объект.ДатаОкончанияДействия;
	
	Если Диалог.Редактировать() Тогда
		
		Объект.ДатаНачалаДействия    = Диалог.Период.ДатаНачала;
		Объект.ДатаОкончанияДействия = Диалог.Период.ДатаОкончания;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ОбщегоНазначенияУТКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ТипКартыПриИзмененииНаСервере()
	
	Элементы.ШаблоныКодовКартЛояльностиДлинаМагнитногоКода.Видимость = Объект.ТипКарты = Перечисления.ТипыКарт.Магнитная ИЛИ Объект.ТипКарты = Перечисления.ТипыКарт.Смешанная;
	Элементы.ШаблоныКодовКартЛояльностиНачалоДиапазонаМагнитногоКода.Видимость = Объект.ТипКарты = Перечисления.ТипыКарт.Магнитная ИЛИ Объект.ТипКарты = Перечисления.ТипыКарт.Смешанная;
	Элементы.ШаблоныКодовКартЛояльностиКонецДиапазонаМагнитногоКода.Видимость = Объект.ТипКарты = Перечисления.ТипыКарт.Магнитная ИЛИ Объект.ТипКарты = Перечисления.ТипыКарт.Смешанная;
	Элементы.ШаблоныКодовКартЛояльностиШаблонКодаМагнитнойКарты.Видимость = Объект.ТипКарты = Перечисления.ТипыКарт.Магнитная ИЛИ Объект.ТипКарты = Перечисления.ТипыКарт.Смешанная;
	
	Элементы.ШаблоныКодовКартЛояльностиДлинаШтрихкода.Видимость = Объект.ТипКарты = Перечисления.ТипыКарт.Штриховая ИЛИ Объект.ТипКарты = Перечисления.ТипыКарт.Смешанная;
	Элементы.ШаблоныКодовКартЛояльностиНачалоДиапазонаШтрихкода.Видимость = Объект.ТипКарты = Перечисления.ТипыКарт.Штриховая ИЛИ Объект.ТипКарты = Перечисления.ТипыКарт.Смешанная;
	Элементы.ШаблоныКодовКартЛояльностиКонецДиапазонаШтрихкода.Видимость = Объект.ТипКарты = Перечисления.ТипыКарт.Штриховая ИЛИ Объект.ТипКарты = Перечисления.ТипыКарт.Смешанная;
	
	Элементы.ПорядокАктивации.Доступность = НЕ Объект.ТипКарты = Перечисления.ТипыКарт.Смешанная;
	Если Объект.ТипКарты = Перечисления.ТипыКарт.Смешанная Тогда
		Объект.АвтоматическаяРегистрацияПриПервомСчитывании = Ложь;
		ПорядокАктивации = "СПомощьюПомощника";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы свойств

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ПостроитьДеревоСкидкиНаценкиРекурсивно(ДеревоСкидок)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ПостроитьДеревоСкидкиНаценкиРекурсивно(СтрокаДерева);
			
			СтрокаДерева.ИндексКартинки = СкидкиНаценкиСервер.ПолучитьИндексКартинкиДляГруппы(СтрокаДерева);
			СтрокаДерева.СкидкаНаценка = СтрокаДерева.СкидкаНаценка;
			
		Иначе
			
			СтрокаДерева.ИндексКартинки = СкидкиНаценкиСервер.ПолучитьИндексКартинкиДляСкидки(СтрокаДерева);
			СтрокаДерева.СкидкаНаценка  = СтрокаДерева.СкидкаНаценка;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоСкидкиНаценки()
	
	ДеревоСкидок = СкидкиНаценкиСервер.ПолучитьДеревоСкидок(Объект.СкидкиНаценки.Выгрузить().ВыгрузитьКолонку("СкидкаНаценка"), Новый Массив);
	ДеревоСкидок.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
	
	ПостроитьДеревоСкидкиНаценкиРекурсивно(ДеревоСкидок);
	
	ЗначениеВРеквизитФормы(ДеревоСкидок, "СкидкиНаценки");
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСкидкуНаценкуРекурсивно(СтрокаДерева)
	
	КоллекцияПодчиненныхЭлементов = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого ЭлементДерева ИЗ КоллекцияПодчиненныхЭлементов Цикл
		УдалитьСкидкуНаценкуРекурсивно(ЭлементДерева);
	КонецЦикла;
	
	НайденныеСтроки = Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаДерева.СкидкаНаценка));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Объект.СкидкиНаценки.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоСкидокРекурсивно(СтрокаДерева, ЭлементФормы)
	
	КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		ЭлементФормы.Развернуть(Элемент.ПолучитьИдентификатор());
		РазвернутьДеревоСкидокРекурсивно(Элемент, ЭлементФормы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПересечениеДиапазоновНаСервере()
	
	Для Каждого СтрокаТЧ ИЗ Объект.ШаблоныКодовКартЛояльности Цикл
		
		Запрос = Новый Запрос(
		"
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыКодовКарт.Штрихкод) КАК ТипКода,
		|	ШаблоныКодовКартЛояльности.Ссылка КАК ВидКарты,
		|	ШаблоныКодовКартЛояльности.НомерСтроки КАК НомерСтроки,
		|	ШаблоныКодовКартЛояльности.ДлинаКода КАК ДлинаКода,
		|	ШаблоныКодовКартЛояльности.НачалоДиапазона КАК НачалоДиапазона,
		|	ШаблоныКодовКартЛояльности.КонецДиапазона КАК КонецДиапазона
		|ИЗ
		|	(ВЫБРАТЬ
		|		ШаблоныКодовКартЛояльности.Ссылка КАК Ссылка,
		|		ШаблоныКодовКартЛояльности.НомерСтроки КАК НомерСтроки,
		|		ШаблоныКодовКартЛояльности.ДлинаШтрихкода КАК ДлинаКода,
		|		ШаблоныКодовКартЛояльности.НачалоДиапазонаШтрихкода КАК НачалоДиапазона,
		|		ШаблоныКодовКартЛояльности.КонецДиапазонаШтрихкода КАК КонецДиапазона
		|	ИЗ
		|		Справочник.ВидыКартЛояльности.ШаблоныКодовКартЛояльности КАК ШаблоныКодовКартЛояльности
		|	ГДЕ
		|		&ПроверятьШтрихкоды
		|	) КАК ШаблоныКодовКартЛояльности
		|ГДЕ
		|	ШаблоныКодовКартЛояльности.ДлинаКода = &ДлинаШтрихкода
		|	И ВЫБОР
		|			КОГДА ШаблоныКодовКартЛояльности.Ссылка = &ВидКарты
		|					И ШаблоныКодовКартЛояльности.НомерСтроки = &НомерСтроки
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ШаблоныКодовКартЛояльности.НачалоДиапазона < &НачалоДиапазонаШтрихкода
		|					И ШаблоныКодовКартЛояльности.КонецДиапазона < &НачалоДиапазонаШтрихкода
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ШаблоныКодовКартЛояльности.НачалоДиапазона > &КонецДиапазонаШтрихкода
		|							И ШаблоныКодовКартЛояльности.КонецДиапазона > &КонецДиапазонаШтрихкода
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|		КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.ТипыКодовКарт.МагнитныйКод) КАК ТипКода,
		|	ШаблоныКодовКартЛояльности.Ссылка КАК ВидКарты,
		|	ШаблоныКодовКартЛояльности.НомерСтроки КАК НомерСтроки,
		|	ШаблоныКодовКартЛояльности.ДлинаКода КАК ДлинаКода,
		|	ШаблоныКодовКартЛояльности.НачалоДиапазона КАК НачалоДиапазона,
		|	ШаблоныКодовКартЛояльности.КонецДиапазона КАК КонецДиапазона
		|ИЗ
		|	(ВЫБРАТЬ
		|		ШаблоныКодовКартЛояльности.Ссылка КАК Ссылка,
		|		ШаблоныКодовКартЛояльности.НомерСтроки КАК НомерСтроки,
		|		ШаблоныКодовКартЛояльности.ДлинаМагнитногоКода КАК ДлинаКода,
		|		ШаблоныКодовКартЛояльности.НачалоДиапазонаМагнитногоКода КАК НачалоДиапазона,
		|		ШаблоныКодовКартЛояльности.КонецДиапазонаМагнитногоКода КАК КонецДиапазона
		|	ИЗ
		|		Справочник.ВидыКартЛояльности.ШаблоныКодовКартЛояльности КАК ШаблоныКодовКартЛояльности
		|	ГДЕ
		|		&ПроверятьМагнитныеКоды
		|	) КАК ШаблоныКодовКартЛояльности
		|ГДЕ
		|	ШаблоныКодовКартЛояльности.ДлинаКода = &ДлинаМагнитногоКода
		|	И ВЫБОР
		|			КОГДА ШаблоныКодовКартЛояльности.Ссылка = &ВидКарты
		|					И ШаблоныКодовКартЛояльности.НомерСтроки = &НомерСтроки
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА ШаблоныКодовКартЛояльности.НачалоДиапазона < &НачалоДиапазонаМагнитногоКода
		|					И ШаблоныКодовКартЛояльности.КонецДиапазона < &НачалоДиапазонаМагнитногоКода
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ВЫБОР
		|					КОГДА ШаблоныКодовКартЛояльности.НачалоДиапазона > &КонецДиапазонаМагнитногоКода
		|							И ШаблоныКодовКартЛояльности.КонецДиапазона > &КонецДиапазонаМагнитногоКода
		|						ТОГДА ЛОЖЬ
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|		КОНЕЦ
		
		|");
		
		Запрос.УстановитьПараметр("ДлинаМагнитногоКода"          , СтрокаТЧ.ДлинаМагнитногоКода);
		Запрос.УстановитьПараметр("НачалоДиапазонаМагнитногоКода", СтрокаТЧ.НачалоДиапазонаМагнитногоКода);
		Запрос.УстановитьПараметр("КонецДиапазонаМагнитногоКода" , СтрокаТЧ.КонецДиапазонаМагнитногоКода);
		
		Запрос.УстановитьПараметр("ДлинаШтрихкода"          , СтрокаТЧ.ДлинаШтрихкода);
		Запрос.УстановитьПараметр("НачалоДиапазонаШтрихкода", СтрокаТЧ.НачалоДиапазонаШтрихкода);
		Запрос.УстановитьПараметр("КонецДиапазонаШтрихкода" , СтрокаТЧ.КонецДиапазонаШтрихкода);
		
		Запрос.УстановитьПараметр("ПроверятьШтрихкоды" ,    Объект.ТипКарты = Перечисления.ТипыКарт.Штриховая ИЛИ Объект.ТипКарты = Перечисления.ТипыКарт.Смешанная);
		Запрос.УстановитьПараметр("ПроверятьМагнитныеКоды", Объект.ТипКарты = Перечисления.ТипыКарт.Магнитная ИЛИ Объект.ТипКарты = Перечисления.ТипыКарт.Смешанная);
		
		Запрос.УстановитьПараметр("НомерСтроки" ,    СтрокаТЧ.НомерСтроки);
		Запрос.УстановитьПараметр("ВидКарты" ,       Объект.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ТипКода = Перечисления.ТипыКодовКарт.МагнитныйКод Тогда
				
				Если Выборка.ВидКарты <> Объект.Ссылка Тогда
					ТекстСообщения = НСтр("ru = 'Диапазон магнитных кодов %2 - %3 в строке %1 пересекается с диапазоном магнитных кодов карт ""%5"" %6 - %7 в строке %4'");
				Иначе
					Если Выборка.НомерСтроки > СтрокаТЧ.НомерСтроки Тогда
						Продолжить;
					КонецЕсли;
					ТекстСообщения = НСтр("ru = 'Диапазон магнитных кодов %2 - %3 в строке %1 пересекается с диапазоном магнитных кодов %6 - %7 в строке %4'");
				КонецЕсли;
				
				ТекстШаблона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					СтрокаТЧ.НомерСтроки,                   //%1
					СтрокаТЧ.НачалоДиапазонаМагнитногоКода, //%2
					СтрокаТЧ.КонецДиапазонаМагнитногоКода,  //%3
					Выборка.НомерСтроки,                    //%4
					Выборка.ВидКарты,                       //%5
					Выборка.НачалоДиапазона,                //%6
					Выборка.КонецДиапазона                  //%7
				);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстШаблона, Объект.Ссылка, ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ШаблоныКодовКартЛояльности", СтрокаТЧ.НомерСтроки, "НачалоДиапазонаМагнитногоКода"));
				
			Иначе
				
				Если Выборка.ВидКарты <> Объект.Ссылка Тогда
					ТекстСообщения = НСтр("ru = 'Диапазон штрихкодов %2 - %3 в строке %1 пересекается с диапазоном штрихкодов карт ""%5"" %6 - %7 в строке %4'");
				Иначе
					Если Выборка.НомерСтроки > СтрокаТЧ.НомерСтроки Тогда
						Продолжить;
					КонецЕсли;
					ТекстСообщения = НСтр("ru = 'Диапазон штрихкодов %2 - %3 в строке %1 пересекается с диапазоном штрихкодов %6 - %7 в строке %4'");
				КонецЕсли;
				
				ТекстШаблона = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСообщения,
					СтрокаТЧ.НомерСтроки,                   //%1
					СтрокаТЧ.НачалоДиапазонаШтрихкода,      //%2
					СтрокаТЧ.КонецДиапазонаШтрихкода,       //%3
					Выборка.НомерСтроки,                    //%4
					Выборка.ВидКарты,                       //%5
					Выборка.НачалоДиапазона,                //%6
					Выборка.КонецДиапазона                  //%7
				);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстШаблона, Объект.Ссылка, ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ШаблоныКодовКартЛояльности", СтрокаТЧ.НомерСтроки, "НачалоДиапазонаШтрихкода"));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОписаниеНастроек()
	
	Если Объект.Персонализирована И Объект.АвтоматическаяРегистрацияПриПервомСчитывании Тогда
		ОписаниеНастроек = НСтр("ru = 'Карты данного вида могут быть накопительными
		                              |и активируются при первом считывании в документе продажи или с помощью помощника регистрации'");
	ИначеЕсли Объект.Персонализирована И НЕ Объект.АвтоматическаяРегистрацияПриПервомСчитывании Тогда
		ОписаниеНастроек = НСтр("ru = 'Карты данного вида могут быть накопительными
		                              |и активируются с помощью помощника регистрации карт лояльности.'");
	ИначеЕсли Не Объект.Персонализирована И Объект.АвтоматическаяРегистрацияПриПервомСчитывании Тогда
		ОписаниеНастроек = НСтр("ru = 'Карты данного вида не могут быть накопительными
		                              |и активируются при первом считывании в документе продажи или с помощью помощника регистрации'");
	ИначеЕсли Не Объект.Персонализирована И Не Объект.АвтоматическаяРегистрацияПриПервомСчитывании Тогда
		ОписаниеНастроек = НСтр("ru = 'Карты данного вида не могут быть накопительными
		                              |и активируются с помощью помощника регистрации карт лояльности.'");
	КонецЕсли;
	
КонецПроцедуры
