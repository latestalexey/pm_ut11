////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Подсистема запрета редактирования ключевых реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	ПриЧтенииСозданииНаСервере();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ЕстьПравоРедактирования = Справочники.ГруппыДоступаНоменклатуры.ЕстьПравоИзменения(Объект);
		ЭтаФорма.ТолькоПросмотр = НЕ ЕстьПравоРедактирования;
		
	Иначе
		
		ТолькоОбщие = Истина;
		
		ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
			ТаблицаДопРеквизитовНоменклатуры, 
			Объект.НаборСвойств, 
			Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие,
			"Реквизиты",
			ТолькоОбщие
		);
		
		ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
			ТаблицаДопСведенийНоменклатуры, 
			Объект.НаборСвойств, 
			Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие,
			"Сведения",
			ТолькоОбщие
		);
		
	КонецЕсли;
	
	УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(ЭтаФорма);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Элементы.ЗапретРедактированияНаименованияНоменклатурыДляПечати.Видимость   = Ложь;
		Элементы.ЗапретРедактированияНаименованияХарактеристикиДляПечати.Видимость = Ложь;
		Элементы.ЗапретРедактированияРабочегоНаименованияНоменклатуры.Видимость    = Ложь;
		Элементы.ЗапретРедактированияРабочегоНаименованияХарактеристики.Видимость  = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не ИспользоватьНесколькоСкладов Тогда
		Объект.ПолитикиУчетаСерий.Очистить();
		Если ЗначениеЗаполнено(ПолитикаУчетаСерий) Тогда
			НоваяСтрока = Объект.ПолитикиУчетаСерий.Добавить();
			НоваяСтрока.Склад              = Склад;
			НоваяСтрока.ПолитикаУчетаСерий = ПолитикаУчетаСерий;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВидыНоменклатуры");
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопРеквизит", "Номенклатура");
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопРеквизит", "Характеристики");
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопРеквизит", "Серии");
	
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопСведение", "Номенклатура");
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопСведение", "Характеристики");
	ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопСведение", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПодборСвойствВНабор" Тогда
		
		ПриПодбореДопРеквизитовСведенийВНабор(Параметр.ДобавляемыеСвойства);
		
	ИначеЕсли ИмяСобытия = "ПодборРеквизитовВТаблицуОтбора" Тогда
		
		// При подборе элемента в таблицу реквизитов отбора номенклатуры или характеристик.
		Отбор = Новый Структура("ИмяРеквизита, ЭтоДопРеквизит, Свойство");
		
		Если ТекущийТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			
			ТЧРеквизитовОтбора = Объект.РеквизитыБыстрогоОтбораНоменклатуры;
			
		ИначеЕсли ТекущийТипВладельцаНабораЭлементов = "Характеристики" Тогда
			
			ТЧРеквизитовОтбора = Объект.РеквизитыБыстрогоОтбораХарактеристик;
			
		КонецЕсли;
		
		Для каждого ПараметрыСтроки Из Параметр.МассивДобавляемых Цикл
			
			ЗаполнитьЗначенияСвойств(Отбор, ПараметрыСтроки);
			
			РеквизитНеНайден = (ТЧРеквизитовОтбора.НайтиСтроки(Отбор).Количество() = 0);
			
			Если РеквизитНеНайден Тогда
				
				НоваяСтрока = ТЧРеквизитовОтбора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыСтроки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Модифицированность = Истина;
		
	ИначеЕсли ИмяСобытия = "Запись_НаборыДополнительныхРеквизитовИСведений" Тогда
		
		// При записи набора доп.реквизитов (сведений), например: 
		// открыли форму редактирования общих доп.реквизитов (сведений) и записали его.
		ПриЗаписиНабораДополнительныхРеквизитовИСведенийНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("ОтображатьВстроеннуюСправку", ОтображатьВстроеннуюСправку);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВидНоменклатуры_ФормаЭлемента_НастройкиФормы", , НастройкиФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьЗаголовокНадписиСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипНоменклатурыПриИзменении(Элемент)
	
	ТипНоменклатурыПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьХарактеристикиПриИзменении(Элемент)
	
	ИспользоватьХарактеристикиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеХарактеристикПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеХарактеристикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерииПриИзменении(Элемент)
	
	ИспользоватьСерииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИспользованияСерийПриИзменении(Элемент)
	
	Если Объект.НастройкаИспользованияСерий = ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара")
		И Объект.ПолитикиУчетаСерий.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Для серий, которые используются для учета экземляров товаров, на складах могут быть назначены
		|только политики учета серий с типом ""%СправочноеУказаниеСерий%"". Политики с другими типами будут очищены. Продолжить?'");
		
		ТекстВопроса = СтрЗаменить(ТекстВопроса,"%СправочноеУказаниеСерий%", ПредопределенноеЗначение("Перечисление.ТипыПолитикУказанияСерий.СправочноеУказаниеСерий"));
		
		Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			УдалитьНеКорректныеПолитики();
		Иначе
			Объект.НастройкаИспользованияСерий = ТекущаяНастройкаИспользованияСерий;
		КонецЕсли;
		
	ИначеЕсли Объект.НастройкаИспользованияСерий <> ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ПартияТоваровПоНомеруИСрокуГодности")
		И Объект.НастройкаИспользованияСерий <> ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ПартияТоваровПоСрокуГодности")
		И Объект.ПолитикиУчетаСерий.Количество()> 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Настройка работы с сериями не предусматривает указания в сериях срока годности.
		|Из списка настроек учета серий будут удалены сроки, в которых указаны политики учета серий 
		|с типами политики ""%СерииПоFEFO%"" и ""%СрокиГодностиПоПоступлению%"". Продолжить?'");
		
		ТекстВопроса = СтрЗаменить(ТекстВопроса,"%СерииПоFEFO%", ПредопределенноеЗначение("Перечисление.ТипыПолитикУказанияСерий.УправлениеПоFEFOОстаткамиСерий"));
		ТекстВопроса = СтрЗаменить(ТекстВопроса,"%СрокиГодностиПоПоступлению%", ПредопределенноеЗначение("Перечисление.ТипыПолитикУказанияСерий.АвторасчетПоFEFOОстатковСерий"));
		
		Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			УдалитьНеКорректныеПолитики();
		Иначе
			Объект.НастройкаИспользованияСерий = ТекущаяНастройкаИспользованияСерий;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.НастройкаИспользованияСерий = ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ПартияТоваровПоСрокуГодности")
		ИЛИ Объект.НастройкаИспользованияСерий = ПредопределенноеЗначение("Перечисление.НастройкиИспользованияСерийНоменклатуры.ПартияТоваровПоНомеруИСрокуГодности") Тогда 
		
		Элементы.СтраницыТочностьУказанияСерий.ТекущаяСтраница = Элементы.СтраницаТочностьУказанияСрокаГодности;
		
	Иначе
		
		Элементы.СтраницыТочностьУказанияСерий.ТекущаяСтраница = Элементы.СтраницаТочностьУказанияСрокаГодностиПустая;
		
	КонецЕсли;
	
	ТекущаяНастройкаИспользованияСерий = Объект.НастройкаИспользованияСерий;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУпаковкиПриИзменении(Элемент)
	
	Элементы.НаборУпаковок.Доступность = Объект.ИспользоватьУпаковки;
	Элементы.НаборУпаковок.АвтоОтметкаНезаполненного = Объект.ИспользоватьУпаковки;
	
	Если НЕ Объект.ИспользоватьУпаковки Тогда
		Объект.НаборУпаковок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонРабочегоНаименованияНоменклатурыПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ШаблонРабочегоНаименованияНоменклатуры) Тогда
		ПриОчисткеШаблонаРабочегоНаименованияНоменклатуры();
	КонецЕсли;
	
	УстановитьДоступностьПоШаблону(
		Объект, 
		ЭтаФорма, 
		"ШаблонРабочегоНаименованияНоменклатуры", 
		"ЗапретРедактированияРабочегоНаименованияНоменклатуры"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонРабочегоНаименованияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПриНачалеВыбораШаблонаРабочегоНаименованияНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонРабочегоНаименованияНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	
	ПриОчисткеШаблонаРабочегоНаименованияНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонНаименованияДляПечатиНоменклатурыПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ШаблонНаименованияДляПечатиНоменклатуры) Тогда
		ПриОчисткеШаблонаНаименованияДляПечатиНоменклатуры();
	КонецЕсли;
	
	УстановитьДоступностьПоШаблону(
		Объект, 
		ЭтаФорма, 
		"ШаблонНаименованияДляПечатиНоменклатуры", 
		"ЗапретРедактированияНаименованияНоменклатурыДляПечати"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонНаименованияДляПечатиНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПриНачалеВыбораШаблонаНаименованияДляПечатиНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонНаименованияДляПечатиНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	
	ПриОчисткеШаблонаНаименованияДляПечатиНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонРабочегоНаименованияХарактеристикиПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ШаблонРабочегоНаименованияХарактеристики) Тогда
		ПриОчисткеШаблонаРабочегоНаименованияХарактеристики();
	КонецЕсли;
	
	УстановитьДоступностьПоШаблону(
		Объект, 
		ЭтаФорма, 
		"ШаблонРабочегоНаименованияХарактеристики", 
		"ЗапретРедактированияРабочегоНаименованияХарактеристики"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонРабочегоНаименованияХарактеристикиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПриНачалеВыбораШаблонаРабочегоНаименованияХарактеристики();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонРабочегоНаименованияХарактеристикиОчистка(Элемент, СтандартнаяОбработка)
	
	ПриОчисткеШаблонаРабочегоНаименованияХарактеристики();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонНаименованияДляПечатиХарактеристикиПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.ШаблонНаименованияДляПечатиХарактеристики) Тогда
		ПриОчисткеШаблонаНаименованияДляПечатиХарактеристики();
	КонецЕсли;
	
	УстановитьДоступностьПоШаблону(
		Объект, 
		ЭтаФорма, 
		"ШаблонНаименованияДляПечатиХарактеристики", 
		"ЗапретРедактированияНаименованияХарактеристикиДляПечати"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонНаименованияДляПечатиХарактеристикиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПриНачалеВыбораШаблонаНаименованияДляПечатиХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонНаименованияДляПечатиХарактеристикиОчистка(Элемент, СтандартнаяОбработка)
	
	ПриОчисткеШаблонаНаименованияДляПечатиХарактеристики();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТаблицаДопРеквизитовНоменклатуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовНоменклатурыПриИзменении(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "Номенклатура");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовНоменклатурыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовНоменклатурыПередУдалением(Элемент, Отказ)
	
	ПередУдалениемЭлементаДопРеквизитовСведений(Отказ, "ДопРеквизит", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений(
		"ДопРеквизит", 
		"Номенклатура", 
		Элемент.ТекущиеДанные.Свойство
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПриПодбореДопРеквизитовСведенийВНабор(ВыбранноеЗначение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТаблицаДопРеквизитовХарактеристик

&НаКлиенте
Процедура ТаблицаДопРеквизитовХарактеристикПриИзменении(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "Характеристики");
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовХарактеристикПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовХарактеристикПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовХарактеристикПередУдалением(Элемент, Отказ)
	
	ПередУдалениемЭлементаДопРеквизитовСведений(Отказ, "ДопРеквизит", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовХарактеристикВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений(
		"ДопРеквизит", 
		"Характеристики", 
		Элемент.ТекущиеДанные.Свойство
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовХарактеристикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПриПодбореДопРеквизитовСведенийВНабор(ВыбранноеЗначение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТаблицаДопРеквизитовСерий

&НаКлиенте
Процедура ТаблицаДопРеквизитовСерийПриИзменении(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "Серии");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовСерийПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовСерийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьДопРеквизитСведение("ДопРеквизит", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовСерийПередУдалением(Элемент, Отказ)
	
	ПередУдалениемЭлементаДопРеквизитовСведений(Отказ, "ДопРеквизит", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовСерийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений(
		"ДопРеквизит", 
		"Серии", 
		Элемент.ТекущиеДанные.Свойство
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопРеквизитовСерийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПриПодбореДопРеквизитовСведенийВНабор(ВыбранноеЗначение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТаблицаДопСведенийНоменклатуры

&НаКлиенте
Процедура ТаблицаДопСведенийНоменклатурыПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийНоменклатурыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопСведение", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьДопРеквизитСведение("ДопСведение", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийНоменклатурыПередУдалением(Элемент, Отказ)
	
	ПередУдалениемЭлементаДопРеквизитовСведений(Отказ, "ДопСведение", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений(
		"ДопСведение", 
		"Номенклатура", 
		Элемент.ТекущиеДанные.Свойство
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПриПодбореДопРеквизитовСведенийВНабор(ВыбранноеЗначение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТаблицаДопСведенийХарактеристик

&НаКлиенте
Процедура ТаблицаДопСведенийХарактеристикПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийХарактеристикПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопСведение", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийХарактеристикПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийХарактеристикПередУдалением(Элемент, Отказ)
	
	ПередУдалениемЭлементаДопРеквизитовСведений(Отказ, "ДопСведение", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийХарактеристикВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений(
		"ДопСведение", 
		"Характеристики", 
		Элемент.ТекущиеДанные.Свойство
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийХарактеристикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПриПодбореДопРеквизитовСведенийВНабор(ВыбранноеЗначение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТаблицаДопСведенийСерий

&НаКлиенте
Процедура ТаблицаДопСведенийСерийПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийСерийПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопСведение", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийСерийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ДобавитьДопРеквизитСведение("ДопСведение", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийСерийПередУдалением(Элемент, Отказ)
	
	ПередУдалениемЭлементаДопРеквизитовСведений(Отказ, "ДопСведение", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийСерийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПриВыбореСтрокиТаблицыДопРеквизитовСведений(
		"ДопСведение", 
		"Серии", 
		Элемент.ТекущиеДанные.Свойство
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДопСведенийСерийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПриПодбореДопРеквизитовСведенийВНабор(ВыбранноеЗначение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РеквизитыДляКонтроляНоменклатуры

&НаКлиенте
Процедура РеквизитыДляКонтроляНоменклатурыУникаленПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыДляКонтроляНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоДопРеквизит И Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ИдентификаторСтрокиТаблицы = ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииНастройкиКонтроля("Номенклатура", ИдентификаторСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыДляКонтроляНоменклатурыОбязателенДляЗаполненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыДляКонтроляНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ДоступностьОтображатьПриСоздании = НЕ ТекущиеДанные.ОбязателенДляЗаполнения;
	
	Если ТекущиеДанные.ОбязателенДляЗаполнения Тогда
		ТекущиеДанные.ОтображатьПриСоздании = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РеквизитыДляКонтроляХарактеристик

&НаКлиенте
Процедура РеквизитыДляКонтроляХарактеристикУникаленПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыДляКонтроляХарактеристик.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтрокиТаблицы = ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииНастройкиКонтроля("Характеристики", ИдентификаторСтрокиТаблицы);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыДляКонтроляХарактеристикОбязателенДляЗаполненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РеквизитыДляКонтроляХарактеристик.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ДоступностьОтображатьПриСоздании = НЕ ТекущиеДанные.ОбязателенДляЗаполнения;
	
	Если ТекущиеДанные.ОбязателенДляЗаполнения Тогда
		ТекущиеДанные.ОтображатьПриСоздании = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РеквизитыБыстрогоОтбораНоменклатуры

&НаКлиенте
Процедура РеквизитыБыстрогоОтбораНоменклатурыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.РеквизитыБыстрогоОтбораНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ИмяРеквизита, ЭтоДопРеквизит");
	ЗаполнитьЗначенияСвойств(Отбор, ТекущиеДанные);
	
	МассивСтрок = ТаблицаРеквизитовОтбораНоменклатуры.НайтиСтроки(Отбор);
	
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаТаблицы.Используется = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыБыстрогоОтбораНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ТекущийТипЭлемента = "ДопРеквизит";
	ТекущийТипВладельцаНабораЭлементов = "Номенклатура";
	
	МассивРеквизитовОтбора = ПреобразоватьКоллекциюФормыВМассив(ТаблицаРеквизитовОтбораНоменклатуры);
	АдресТаблицыРеквизитов = ПоместитьВоВременноеХранилище(МассивРеквизитовОтбора);
	
	СтруктураПараметров = Новый Структура("АдресВХранилище", АдресТаблицыРеквизитов);
	
	ОткрытьФормуМодально(
		"Справочник.ВидыНоменклатуры.Форма.ФормаРедактированияСоставаРеквизитов", 
		СтруктураПараметров
	);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ РеквизитыБыстрогоОтбораХарактеристик

&НаКлиенте
Процедура РеквизитыБыстрогоОтбораХарактеристикПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.РеквизитыБыстрогоОтбораХарактеристик.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ИмяРеквизита, ЭтоДопРеквизит");
	ЗаполнитьЗначенияСвойств(Отбор, ТекущиеДанные);
	
	МассивСтрок = ТаблицаРеквизитовОтбораХарактеристик.НайтиСтроки(Отбор);
	
	Для каждого СтрокаТаблицы Из МассивСтрок Цикл
		СтрокаТаблицы.Используется = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыБыстрогоОтбораХарактеристикПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.НаборСвойствХарактеристик) Тогда
		
		ТекстВопроса = НСтр("ru = 'Редактирование состава панели быстрого отбора характеристик
		|возможно только после записи элемента, записать элемент?'");
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.Отмена, НСтр("ru = 'Редактирование панели быстрого отбора'"));
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоДоступных = ТаблицаДопРеквизитовХарактеристик.Количество();
	
	Если КоличествоДоступных = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Невозможно отредактировать состав панели быстрого отбора характеристик.
		                            |Не указаны дополнительные реквизиты характеристик.
		                            |Перед редактированием состава панели быстрого отбора нужно настроить состав 
		                            |дополнительных реквизитов характеристик.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийТипЭлемента = "ДопРеквизит";
	ТекущийТипВладельцаНабораЭлементов = "Характеристики";
	
	МассивРеквизитовОтбора = ПреобразоватьКоллекциюФормыВМассив(ТаблицаРеквизитовОтбораХарактеристик);
	АдресТаблицыРеквизитов = ПоместитьВоВременноеХранилище(МассивРеквизитовОтбора);
	
	СтруктураПараметров = Новый Структура("АдресВХранилище", АдресТаблицыРеквизитов);
	
	ОткрытьФормуМодально(
		"Справочник.ВидыНоменклатуры.Форма.ФормаРедактированияСоставаРеквизитов", 
		СтруктураПараметров
	);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВключитьПроверкуЗаполненияДляРеквизитовНоменклатуры(Команда)
	
	ВключитьПроверкуЗаполненияДляРеквизитовНоменклатурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновНаименованийНоменклатуры(Команда)
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновНоменклатурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновНаименованийХарактеристик(Команда)
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновХарактеристикНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПроверкуЗаполненияДляРеквизитовБыстрогоОтбораНоменклатуры(Команда)
	
	ВключитьПроверкуЗаполненияДляРеквизитовБыстрогоОтбораНоменклатурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПроверкуЗаполненияДляРеквизитовХарактеристик(Команда)
	
	ВключитьПроверкуЗаполненияДляРеквизитовХарактеристикНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьПроверкуЗаполненияДляРеквизитовБыстрогоОтбораХарактеристик(Команда)
	
	ВключитьПроверкуЗаполненияДляРеквизитовБыстрогоОтбораХарактеристикНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОбщиеДопРеквизитыНоменклатуры(Команда)
	
	РедактироватьОбщиеДопРеквизитыСведения("ДопРеквизит", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОбщиеДопРеквизитыХарактеристик(Команда)
	
	РедактироватьОбщиеДопРеквизитыСведения("ДопРеквизит", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОбщиеДопРеквизитыСерий(Команда)
	
	РедактироватьОбщиеДопРеквизитыСведения("ДопРеквизит", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОбщиеДопСведенияНоменклатуры(Команда)
	
	РедактироватьОбщиеДопРеквизитыСведения("ДопСведение", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОбщиеДопСведенияХарактеристик(Команда)
	
	РедактироватьОбщиеДопРеквизитыСведения("ДопСведение", "Характеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьОбщиеДопСведенияСерий(Команда)
	
	РедактироватьОбщиеДопРеквизитыСведения("ДопСведение", "Серии");
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонРабочегоНаименованияНоменклатуры(Команда)
	
	ПриНачалеВыбораШаблонаРабочегоНаименованияНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонНаименованияДляПечатиНоменклатуры(Команда)
	
	ПриНачалеВыбораШаблонаНаименованияДляПечатиНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонРабочегоНаименованияХарактеристики(Команда)
	
	ПриНачалеВыбораШаблонаРабочегоНаименованияХарактеристики();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьШаблонНаименованияДляПечатиХарактеристики(Команда)
	
	ПриНачалеВыбораШаблонаНаименованияДляПечатиХарактеристик();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСкрытьВстроеннуюСправку(Команда)
	
	ОтобразитьСкрытьВстроеннуюСправкуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСкрытьВстроеннуюСправкуНаСервере()
	
	Элементы.ФормаОтобразитьСкрытьВстроеннуюСправку.Пометка = НЕ Элементы.ФормаОтобразитьСкрытьВстроеннуюСправку.Пометка;
	ОтображатьВстроеннуюСправку = Элементы.ФормаОтобразитьСкрытьВстроеннуюСправку.Пометка;
	
	УстановитьВидимостьВстроеннойСправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбщиеХарактеристикиНоменклатуры(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к ""Характеристики номенклатуры"" возможен только после записи данных.
		|Данные будут записаны.'");
		
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			ЭлементЗаписан = Записать();
		Исключение
			Возврат;
		КонецПопытки;
		
		Если НЕ ЭлементЗаписан Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("Владелец", Объект.Ссылка));
	ПараметрыОткрытия.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаСписка", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для редактирования таблиц доп. реквизитов (сведений).

// Функция возвращает структуру команд редактирования таблицы доп. реквизитов (сведений).
//
// Параметры:
//	ТипЭлемента (Строка) - Тип элемента, команды редактирования коллекции которых надо получить.
//	Принимает значения: "ДопСведение", "ДопРеквизит".
//
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов, команды редактирования коллекции которых надо получить.
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	Структура.
//	Структура команд редактирования таблицы доп. реквизитов (сведений). Ключ структуры - строка - имя команды,
//	а значение - строка - имя элемента-команды редактирования.
//
&НаКлиенте
Функция КомандыРедактированияДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	СтруктураКоманд = Новый Структура;
	СтруктураКоманд.Вставить("Удалить");
	СтруктураКоманд.Вставить("ПереместитьВверх");
	СтруктураКоманд.Вставить("ПереместитьВниз");
	
	СтруктураКоманд.Вставить("КонтекстноеМенюУдалить");
	СтруктураКоманд.Вставить("КонтекстноеМенюПереместитьВверх");
	СтруктураКоманд.Вставить("КонтекстноеМенюПереместитьВниз");
	
	ИмяТаблицыДопРеквизитовСведений = ИмяТаблицыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	СтруктураКоманд.Удалить                         = ИмяТаблицыДопРеквизитовСведений + "Удалить";
	СтруктураКоманд.ПереместитьВверх                = ИмяТаблицыДопРеквизитовСведений + "ПереместитьВверх";
	СтруктураКоманд.ПереместитьВниз                 = ИмяТаблицыДопРеквизитовСведений + "ПереместитьВниз";
	
	СтруктураКоманд.КонтекстноеМенюУдалить          = ИмяТаблицыДопРеквизитовСведений + "КонтекстноеМенюУдалить";
	СтруктураКоманд.КонтекстноеМенюПереместитьВверх = ИмяТаблицыДопРеквизитовСведений + "КонтекстноеМенюПереместитьВверх";
	СтруктураКоманд.КонтекстноеМенюПереместитьВниз  = ИмяТаблицыДопРеквизитовСведений + "КонтекстноеМенюПереместитьВниз";
	
	Возврат СтруктураКоманд;
	
КонецФункции

// Функция возвращает таблицу формы - таблицу доп. реквизитов (сведений),
// относящуюся к нужному набору (номенклатуры, характеристик или серий).
//
// Параметры:
//	ТипЭлемента (Строка) - Тип элементов, таблицу формы которых надо получить. 
//	Принимает значения: "ДопСведение", "ДопРеквизит".
//
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов, таблицу формы которых надо получить.
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	ТаблицаФормы.
//	Элемент формы - таблица доп.реквизитов (сведений) нужного набора.
//
&НаКлиенте
Функция ТаблицаФормыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат Элементы.ТаблицаДопРеквизитовНоменклатуры;
		ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
			Возврат Элементы.ТаблицаДопРеквизитовХарактеристик;
		ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
			Возврат Элементы.ТаблицаДопРеквизитовСерий;
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
		
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат Элементы.ТаблицаДопСведенийНоменклатуры;
		ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
			Возврат Элементы.ТаблицаДопСведенийХарактеристик;
		ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
			Возврат Элементы.ТаблицаДопСведенийСерий;
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция возвращает коллекцию - таблицу доп. ревизитов (сведений),
// относящуюся к нужному набору (набору номенклатуры, характеристик или серий).
//
// Параметры:
//	ТипЭлемента (Строка) - Тип элементов, коллекцию которых надо получить.
//	Принимает значения: "ДопСведение", "ДопРеквизит".
//
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов.
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	ДанныеФормыКоллекция.
//	Коллекция доп.реквизитов (сведений) нужного набора.
//
&НаКлиентеНаСервереБезКонтекста
Функция КоллекцияДопРеквизитовСведений(Форма, ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат Форма.ТаблицаДопРеквизитовНоменклатуры;
		ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
			Возврат Форма.ТаблицаДопРеквизитовХарактеристик;
		ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
			Возврат Форма.ТаблицаДопРеквизитовСерий;
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
		
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат Форма.ТаблицаДопСведенийНоменклатуры;
		ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
			Возврат Форма.ТаблицаДопСведенийХарактеристик;
		ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
			Возврат Форма.ТаблицаДопСведенийСерий;
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает коллекцию - таблицу ревизитов быстрого отбора,
// относящуюся к нужному владельцу - номенклатуре или характеристикам.
//
// Параметры:
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов.
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	ДанныеФормыКоллекция.
//	Коллекция доп.реквизитов (сведений) нужного набора.
//
&НаКлиентеНаСервереБезКонтекста
Функция КоллекцияРеквизитовОтбора(ТекущийОбъект, ТипВладельцаНабораЭлементов)
	
	Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
		Возврат ТекущийОбъект.РеквизитыБыстрогоОтбораНоменклатуры;
	ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
		Возврат ТекущийОбъект.РеквизитыБыстрогоОтбораХарактеристик;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает коллекцию - таблицу ревизитов,
// относящуюся к нужному набору (набору номенклатуры, характеристик).
//
// Параметры:
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов.
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	ДанныеФормыКоллекция.
//	Коллекция доп.реквизитов (сведений) нужного набора.
//
&НаКлиентеНаСервереБезКонтекста
Функция КоллекцияРеквизитовДляКонтроля(ТекущийОбъект, ТипВладельцаНабораЭлементов)
	
	Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
		Возврат ТекущийОбъект.РеквизитыДляКонтроляНоменклатуры;
	ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
		Возврат ТекущийОбъект.РеквизитыДляКонтроляХарактеристик;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает имя элемента - таблицы доп. ревизитов (сведений),
// относящуюся к нужному набору (набору номенклатуры, характеристик или серий).
//
// Параметры:
//	ТипЭлемента (Строка) - Тип элемента, имя элемента формы коллекции которых надо получить.
//	Принимает значения: "ДопСведение", "ДопРеквизит".
//	
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов.
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	Строка.
//	Имя элемента коллекции доп.реквизитов (сведений) нужного набора.
//
&НаКлиентеНаСервереБезКонтекста
Функция ИмяТаблицыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат "ТаблицаДопРеквизитовНоменклатуры";
		ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
			Возврат "ТаблицаДопРеквизитовХарактеристик";
		ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
			Возврат "ТаблицаДопРеквизитовСерий";
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
		
		Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			Возврат "ТаблицаДопСведенийНоменклатуры";
		ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
			Возврат "ТаблицаДопСведенийХарактеристик";
		ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
			Возврат "ТаблицаДопСведенийСерий";
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет добавление дополнительного реквизита (сведения).
//
// Параметры:
//	ТипЭлемента (Строка) - Тип элемента который добавляется. 
//	Принимает значения: "ДопСведение", "ДопРеквизит",
//
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов в который добавляется элемент.
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	ЭлементФормы.
//	Элемент-владелец формы выбора доп.реквизитов, сведений.
//
&НаКлиенте
Функция ВладелецФормыВыбораДополнительныхРеквизитовИСведений(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	ВладелецФормыВыбора = ТаблицаФормыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	Возврат ВладелецФормыВыбора;
	
КонецФункции

// Функция возвращает ссылку на таблицу набора доп.реквизитов / сведений объекта.
//
// Параметры:
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов в который добавляется элемент. 
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	ДанныеФормыКоллекция.
//	Данные табличной части набора свойств.
//
&НаКлиенте
Функция НаборДопРеквизитовСведенийОбъекта(ТипВладельцаНабораЭлементов)
	
	Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
		Возврат Объект.НаборСвойств;
	ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
		Возврат Объект.НаборСвойствХарактеристик;
	ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
		Возврат Объект.НаборСвойствСерий;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет добавление дополнительного реквизита (сведения).
//
// Параметры:
//	ТипЭлемента (Строка) - Тип элемента который добавляется. 
//	Принимает значения: "ДопСведение", "ДопРеквизит",
//
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов в который добавляется элемент. 
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
&НаКлиенте
Процедура ДобавитьДопРеквизитСведение(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	НаборДопРеквизитовСведений = НаборДопРеквизитовСведенийОбъекта(ТипВладельцаНабораЭлементов);
	
	Если НЕ ДопустимоИзменятьСоставДопРеквизитовСведений(ТипЭлемента, НаборДопРеквизитовСведений) Тогда
		Возврат;
	КонецЕсли;
	
	РедактируютсяОбщиеРеквизитыСведения = Ложь;
	
	ТекущийТипЭлемента = ТипЭлемента;
	ТекущийТипВладельцаНабораЭлементов = ТипВладельцаНабораЭлементов;
	
	ЭтоДополнительноеСведение = (ТипЭлемента = "ДопСведение");
	ВыбранныеДопРеквизитыСведения = ВыбранныеДопРеквизитыСведенияНабора(ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	// Открыть форму подбора дополнительных реквизитов (сведений).
	
	// ... подготовить параметры открытия формы.
	Отбор = Новый Структура("ЭтоДополнительноеСведение", ЭтоДополнительноеСведение);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", ЭтоДополнительноеСведение);
	ПараметрыФормы.Вставить("ВыбранныеЗначения", ВыбранныеДопРеквизитыСведения);
	
	ВладелецФормыВыбора = ВладелецФормыВыбораДополнительныхРеквизитовИСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	// ... открыть форму выбора.
	ОткрытьФорму(
		"ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаВыбора",
		ПараметрыФормы, 
		ВладелецФормыВыбора,
		УникальныйИдентификатор
	);
	
КонецПроцедуры

// Процедура управляет доступностью команд редактирования таблиц доп. реквизитов (сведений).
//
// Параметры:
//	ТипЭлемента (Строка) - Тип элемента который удаляется.
//	Принимает значения: "ДопСведение", "ДопРеквизит".
//
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов из которого удаляется элемент.
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
&НаКлиенте
Процедура УстановитьДоступностьКомандРедактированияДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	ТаблицаДопРеквизитовСведений = ТаблицаФормыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	ТекущиеДанные = ТаблицаДопРеквизитовСведений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияДопРеквизитовСведений = КоллекцияДопРеквизитовСведений(ЭтаФорма, ТипЭлемента, ТипВладельцаНабораЭлементов);
	КомандыРедактирования = КомандыРедактированияДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	// Если активная строка - строка общего доп. реквизита (сведения), то сделать недоступными кнопки добавления, удаления, перемещения.
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.Удалить, 
		"Доступность", 
		НЕ ТекущиеДанные.ОбщееСвойство
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.ПереместитьВверх, 
		"Доступность", 
		НЕ ТекущиеДанные.ОбщееСвойство
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.ПереместитьВниз, 
		"Доступность", 
		НЕ ТекущиеДанные.ОбщееСвойство
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.КонтекстноеМенюУдалить, 
		"Доступность", 
		НЕ ТекущиеДанные.ОбщееСвойство
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.КонтекстноеМенюПереместитьВверх, 
		"Доступность", 
		НЕ ТекущиеДанные.ОбщееСвойство
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.КонтекстноеМенюПереместитьВниз,
		"Доступность",
		НЕ ТекущиеДанные.ОбщееСвойство
	);
	
	// Если активная строка - первая или последняя в списке, то сделать недоступными кнопки сдвига вверх или вниз.
	Если Не ТекущиеДанные.ОбщееСвойство Тогда
		
		ИндексСтроки = КоллекцияДопРеквизитовСведений.Индекс(ТекущиеДанные);
		
		Если ИндексСтроки = 0 Тогда
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, 
				КомандыРедактирования.ПереместитьВверх, 
				"Доступность", 
				Ложь
			);
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, 
				КомандыРедактирования.КонтекстноеМенюПереместитьВверх, 
				"Доступность", 
				Ложь
			);
			
		КонецЕсли;
		
		Если ИндексСтроки = КоллекцияДопРеквизитовСведений.Количество() - 1 Тогда
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, 
				КомандыРедактирования.ПереместитьВниз, 
				"Доступность", 
				Ложь
			);
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, 
				КомандыРедактирования.КонтекстноеМенюПереместитьВниз, 
				"Доступность", 
				Ложь
			);
			
		КонецЕсли;
		
		Если ИндексСтроки <> 0 Тогда
			
			ПредыдущаяСтрока = КоллекцияДопРеквизитовСведений[ИндексСтроки - 1];
			
			Если ПредыдущаяСтрока.ОбщееСвойство Тогда
				
				// Если предыдущая строка является строкой общего реквизита, то сделать недоступной кнопку сдвига вверх.
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, 
					КомандыРедактирования.ПереместитьВверх, 
					"Доступность", 
					Ложь
				);
				
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, 
					КомандыРедактирования.КонтекстноеМенюПереместитьВверх, 
					"Доступность", 
					Ложь
				);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет запись изменившихся наборов доп. реквизитов (сведений).
// Вызывается при записи текущего элемента на сервере.
//
// Параметры:
//	Отказ (Булево) - Признак отказа от записи. Значение по умолчанию: Ложь,
//
//	ТекущийОбъект (СправочникОбъект.ВидыНоменклатуры) - Записываемый объект - вид номенклатуры,
//
//	ТипЭлемента (Строка) - Тип элемента который удаляется. 
//	Принимает значения: "ДопСведение", "ДопРеквизит",
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов из которого удаляется элемент. 
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
&НаСервере
Процедура ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
		НаборСвойствДопРеквизитовСведений = ТекущийОбъект.НаборСвойств;
	ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
		НаборСвойствДопРеквизитовСведений = ТекущийОбъект.НаборСвойствХарактеристик;
	ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
		НаборСвойствДопРеквизитовСведений = ТекущийОбъект.НаборСвойствСерий;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаборСвойствДопРеквизитовСведений) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектНаборСвойств = НаборСвойствДопРеквизитовСведений.ПолучитьОбъект();
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		ТЧДополнительныеРеквизитыСведения = ОбъектНаборСвойств.ДополнительныеРеквизиты;
	ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
		ТЧДополнительныеРеквизитыСведения = ОбъектНаборСвойств.ДополнительныеСведения;
	КонецЕсли;
	
	КоллекцияДопРеквизитовСведений = КоллекцияДопРеквизитовСведений(ЭтаФорма, ТипЭлемента, ТипВладельцаНабораЭлементов);
	ТЧДополнительныеРеквизитыСведения.Очистить();
	
	Для каждого ЭлементСтр Из КоллекцияДопРеквизитовСведений Цикл
		Если НЕ ЭлементСтр.ОбщееСвойство Тогда
			ТЧДополнительныеРеквизитыСведения.Добавить().Свойство = ЭлементСтр.Свойство;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ОбъектНаборСвойств.Записать();
	Исключение
		
		// Установить признак отказа записи.
		Отказ = Истина;
		
		// Добавить запись в журнал регистрации.
		ИмяСобытия = НСтр("ru = 'Дополнительные %1 %2. Не удалось обновить состав дополнительных %3 набора.'");
		
		ТипСведений = ?(ТипЭлемента = "ДопРеквизит", "реквизиты", "сведения");
		ТипОбъекта  = ?(ТипВладельцаНабораЭлементов = "Номенклатура", "номенклатуры", ?(ТипВладельцаНабораЭлементов = "Характеристики", "характеристик", "серий"));
		ТипСостава  = ?(ТипЭлемента = "ДопРеквизит", "реквизитов", "сведений");
		
		ИмяСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ИмяСобытия, 
			ТипСведений, 
			ТипОбъекта, 
			ТипСостава
		);
		
		КомментарийЖурнала  = НСтр("ru = 'При обновлении табличной части дополнительных реквизитов набора свойств ""%1"" произошла ошибка: ""%2""'");
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		КомментарийЖурнала  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			КомментарийЖурнала, 
			НаборСвойствДопРеквизитовСведений, 
			ПредставлениеОшибки
		);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, 
			, 
			НаборСвойствДопРеквизитовСведений, 
			КомментарийЖурнала, 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная
		);
		
		// Вызвать исключение.
		ВыражениеИсключения = НСтр("ru = 'При записи дополнительных %1 %2 произошла ошибка (см. журнал регистрации).'");
		
		ТипСведений = ?(ТипЭлемента = "ДопРеквизит", "реквизитов", "сведений");
		ТипОбъекта = ?(ТипВладельцаНабораЭлементов = "Номенклатура", "номенклатуры", ?(ТипВладельцаНабораЭлементов = "Характеристики", "характеристик", "серий"));
		
		ВыражениеИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ВыражениеИсключения, 
			ТипСведений, 
			ТипОбъекта, 
			ТипСостава
		);
		
		ВызватьИсключение(ВыражениеИсключения);
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура открывает форму редактирования набора общих доп. реквизитов (сведений).
//
// Параметры:
//	ТипЭлемента (Строка) - Тип элемента набор общих свойство которого редактируется.
//	Принимает значения: "ДопСведение", "ДопРеквизит".
//
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов из состав которого редактируется.
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
&НаКлиенте
Процедура РедактироватьОбщиеДопРеквизитыСведения(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	РедактируютсяОбщиеРеквизитыСведения = Истина;
	
	Если ТипВладельцаНабораЭлементов = "Номенклатура" Тогда
		
		НаборОбщихДопРеквизитовСвойств = 
		ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие");
		
	ИначеЕсли ТипВладельцаНабораЭлементов = "Характеристики" Тогда
		
		НаборОбщихДопРеквизитовСвойств = 
		ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие");
		
	ИначеЕсли ТипВладельцаНабораЭлементов = "Серии" Тогда
		
		НаборОбщихДопРеквизитовСвойств = 
		ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие");
		
	КонецЕсли;
	
	ТекущийТипВладельцаНабораЭлементов = ТипВладельцаНабораЭлементов;
	ТекущийТипЭлемента = ТипЭлемента;
	
	СтруктрураПараметров = Новый Структура("Ключ", НаборОбщихДопРеквизитовСвойств);
	
	ОткрытьФорму(
		"Справочник.НаборыДополнительныхРеквизитовИСведений.Форма.ФормаЭлемента", 
		СтруктрураПараметров
	);
	
КонецПроцедуры

// Процедура выполняет проверку, является ли удаляемый элемент общим доп. реквизитом (сведением),
// если да, то устанавливается флаг отказа. Если нет, то разрешается удаление элемента из списка
// доп.реквизитов, при этом, также удаляются записи с этим реквизитом из таблицы реквизитов и 
// таблицы реквизитов для отборов.
//
// Параметры:
//	Отказ (Булево) - Признак отказа от удаления. Значение по умолчанию: Ложь,
//	
//	ТипЭлемента (Строка) - Тип элемента который удаляется.
//	Принимает значения: "ДопСведение", "ДопРеквизит".
//
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов из которого удаляется элемент.
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
&НаКлиенте
Процедура ПередУдалениемЭлементаДопРеквизитовСведений(Отказ, ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	ТаблицаДопРеквизитовСведений = ТаблицаФормыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	КоллекцияДопРеквизитовСведений = КоллекцияДопРеквизитовСведений(ЭтаФорма, ТипЭлемента, ТипВладельцаНабораЭлементов);
	ИмяТаблицыДопРеквизитовСведений = ИмяТаблицыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	ТекущиеДанные = ТаблицаДопРеквизитовСведений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ОбщееСвойство Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		
		ТекстСообщения = НСтр("ru = '%1 %2 ""%3"" является общим. Состав общих дополнительных %4 
		                            |можно редактировать только в форме элемента набора общих %4.'");

		Параметр1 = ?(ТипЭлемента = "ДопРеквизит", "Дополнительный", "Дополнительное");
		Параметр2 = ?(ТипЭлемента = "ДопРеквизит", "реквизит", "сведение");
		Параметр3 = ТекущиеДанные.Свойство;
		Параметр4 = ?(ТипЭлемента = "ДопРеквизит", "реквизитов", "сведений");
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Параметр1, Параметр2, Параметр3, Параметр4);
		Сообщение.Текст = ТекстСообщения;
		
		ИндексСтроки = КоллекцияДопРеквизитовСведений.Индекс(ТекущиеДанные);
		Сообщение.Поле = ИмяТаблицыДопРеквизитовСведений + "[" + Формат(ИндексСтроки, "ЧЦ=10; ЧДЦ=0; ЧГ=0") + "].Свойство";
		
		Сообщение.Сообщить();
		
	Иначе
		
		Если ТипЭлемента = "ДопРеквизит" 
			И (ТипВладельцаНабораЭлементов = "Номенклатура" Или ТипВладельцаНабораЭлементов = "Характеристики")  Тогда
			
			Отбор = Новый Структура("Свойство", ТекущиеДанные.Свойство, Истина);
			
			КоллекцияРеквизитовДляКонтроля = КоллекцияРеквизитовДляКонтроля(Объект, ТипВладельцаНабораЭлементов);
			НайденныеСтроки = КоллекцияРеквизитовДляКонтроля.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				КоллекцияРеквизитовДляКонтроля.Удалить(НайденныеСтроки[0]);
				
			КонецЕсли;
			
			КоллекцияРеквизитовОтбора = КоллекцияРеквизитовОтбора(Объект, ТипВладельцаНабораЭлементов);
			
			НайденныеСтроки = КоллекцияРеквизитовОтбора.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				КоллекцияРеквизитовОтбора.Удалить(НайденныеСтроки[0]);
			КонецЕсли;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает массив выбранных доп.реквизитов (сведений) соответсвующего набора.
//
// Параметры:
//	ТипЭлемента (Строка) - Тип элементов массив которых надо получить.
//	Принимает значения: "ДопСведение", "ДопРеквизит".
//
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов массив которых надо получить.
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	Массив.
//	Массив выбранных элементов (доп.реквизитов или сведений) заданного набора.
//
&НаКлиенте
Функция ВыбранныеДопРеквизитыСведенияНабора(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	ДопРеквизитыСведенияНабора = Новый Массив;
	КоллекцияДопРеквизитовСведений = КоллекцияДопРеквизитовСведений(ЭтаФорма, ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	Для каждого ЭлементКоллекции Из КоллекцияДопРеквизитовСведений Цикл
		ДопРеквизитыСведенияНабора.Добавить(ЭлементКоллекции.Свойство);
	КонецЦикла;
	
	Возврат ДопРеквизитыСведенияНабора;
	
КонецФункции

&НаСервере
Процедура ДобавитьВыбранныеСвойстваВТаблицыРеквизитов(ДобавляемыеСвойства)
	
	// Если есть добавленные реквизиты, то добавить их в таблицу дополнительных реквизитов,
	// в таблицу реквизитов для контроля и в таблицу реквизитов для отборов.
	Модифицированность = Истина;
	
	УсловияДоступности = УсловияДоступности();
	КоллекцияДопРеквизитовСведений = КоллекцияДопРеквизитовСведений(ЭтаФорма, ТекущийТипЭлемента, ТекущийТипВладельцаНабораЭлементов);
	
	Отбор = Новый Структура("ИмяРеквизита, Свойство, ЭтоДопРеквизит");
	ОтборПоКоллекции = Новый Структура("Свойство, ОбщееСвойство");
	
	Если ТекущийТипЭлемента = "ДопРеквизит" Тогда
		
		КоллекцияРеквизитовДляКонтроля = КоллекцияРеквизитовДляКонтроля(Объект, ТекущийТипВладельцаНабораЭлементов);
		КоллекцияРеквизитовОтбора = КоллекцияРеквизитовОтбора(Объект, ТекущийТипВладельцаНабораЭлементов);
		
		Если ТекущийТипВладельцаНабораЭлементов = "Номенклатура" Тогда
			ТаблицаРеквизитовОтбора = ТаблицаРеквизитовОтбораНоменклатуры;
		ИначеЕсли ТекущийТипВладельцаНабораЭлементов = "Характеристики" Тогда
			ТаблицаРеквизитовОтбора = ТаблицаРеквизитовОтбораХарактеристик;
		КонецЕсли;
		
		НеИспользуемыеДляКонтроляТипы = НеИспользуемыеДляКонтроляТипы();
		ТипЗначенияБулево = Новый ОписаниеТипов("Булево");
		
		Для каждого ДобавляемоеСвойство Из ДобавляемыеСвойства Цикл
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавляемоеСвойство, "ЭтоГруппа") Тогда
				Продолжить;
			КонецЕсли;
			
			// ... заполнить поля отбора.
			ОтборПоКоллекции.Свойство = ДобавляемоеСвойство;
			ОтборПоКоллекции.ОбщееСвойство = РедактируютсяОбщиеРеквизитыСведения;
			
			Отбор.ИмяРеквизита = ДобавляемоеСвойство;
			Отбор.Свойство = ДобавляемоеСвойство;
			Отбор.ЭтоДопРеквизит = Истина;
			
			// ... в таблицу дополнительных реквизитов.
			НайденныеСтроки = КоллекцияДопРеквизитовСведений.НайтиСтроки(ОтборПоКоллекции);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = КоллекцияДопРеквизитовСведений.Добавить();
			
			НоваяСтрока.Свойство = ДобавляемоеСвойство;
			НоваяСтрока.ОбщееСвойство = РедактируютсяОбщиеРеквизитыСведения;
			
			// ... сформировать представленеи реквизита.
			ПредставлениеРеквизита = Строка(ДобавляемоеСвойство);
			Если РедактируютсяОбщиеРеквизитыСведения Тогда
				
				ПредставлениеРеквизита = ПредставлениеОбщегоРеквизита(ПредставлениеРеквизита);
				
			КонецЕсли;
			
			НоваяСтрока.ПредставлениеРеквизита = ПредставлениеРеквизита;
			
			Если ТекущийТипВладельцаНабораЭлементов = "Номенклатура" 
				Или ТекущийТипВладельцаНабораЭлементов = "Характеристики" Тогда
				
				// ... в таблицу реквизитов.
				НайденныеСтроки = КоллекцияРеквизитовДляКонтроля.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = КоллекцияРеквизитовДляКонтроля.Добавить();
				
				НоваяСтрока.ИмяРеквизита = ДобавляемоеСвойство;
				НоваяСтрока.ПредставлениеРеквизита = ПредставлениеРеквизита;
				НоваяСтрока.Свойство = ДобавляемоеСвойство;
				НоваяСтрока.ЭтоДопРеквизит = Истина;
				
				УсловияДоступности.ЭтоДопРеквизит = Истина;
				УсловияДоступности.ЭтоНеиспользуемыйДляКонтроляТип = (НеИспользуемыеДляКонтроляТипы.Найти(ДобавляемоеСвойство.ТипЗначения) <> Неопределено);
				УсловияДоступности.ТипРеквизитаБулево = (ДобавляемоеСвойство.ТипЗначения = ТипЗначенияБулево);
				
				УстановитьДоступностьНастройкиПолейРеквизитаДляКонтроля(НоваяСтрока, УсловияДоступности);
				
				// ... в ТЧ реквизитов быстрого отбора.
				НайденныеСтроки = КоллекцияРеквизитовОтбора.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = КоллекцияРеквизитовОтбора.Добавить();
				
				НоваяСтрока.ИмяРеквизита = ДобавляемоеСвойство;
				НоваяСтрока.ПредставлениеРеквизита = ПредставлениеРеквизита;
				НоваяСтрока.Свойство = ДобавляемоеСвойство;
				НоваяСтрока.ЭтоДопРеквизит = Истина;
				НоваяСтрока.Используется = Истина;
				
				// в таблицу реквизитов быстрого отбора.
				НайденныеСтроки = ТаблицаРеквизитовОтбора.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаРеквизитовОтбора.Добавить();
				
				НоваяСтрока.ИмяРеквизита = ДобавляемоеСвойство;
				НоваяСтрока.ПредставлениеРеквизита = ПредставлениеРеквизита;
				НоваяСтрока.Свойство = ДобавляемоеСвойство;
				НоваяСтрока.ЭтоДопРеквизит = Истина;
				НоваяСтрока.Используется = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТекущийТипЭлемента = "ДопСведение" Тогда
		// Если есть добавленные сведения, то добавить их в таблицу дополнительных сведений.
		
		Для каждого ДобавляемоеСвойство Из ДобавляемыеСвойства Цикл
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавляемоеСвойство, "ЭтоГруппа") Тогда
				Продолжить;
			КонецЕсли;
			
			// ... в таблицу дополнительных сведений.
			НоваяСтрока = КоллекцияДопРеквизитовСведений.Добавить();
			
			НоваяСтрока.Свойство = ДобавляемоеСвойство;
			НоваяСтрока.ОбщееСвойство = РедактируютсяОбщиеРеквизитыСведения;
			
			// ... сформировать представленеи реквизита.
			ПредставлениеРеквизита = Строка(ДобавляемоеСвойство);
			Если РедактируютсяОбщиеРеквизитыСведения Тогда
				
				ПредставлениеРеквизита = ПредставлениеОбщегоРеквизита(ПредставлениеРеквизита);
				
			КонецЕсли;
			
			НоваяСтрока.ПредставлениеРеквизита = ПредставлениеРеквизита;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет, есть ли добавляемое свойство в наборе, если своство отсутствует,
// то оно добавляется в набор, если оно уже есть, то не добавляется.
//
// Параметры:
//	ДобавляемоеСвойство (ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения) - добавляемое свойство,
//	
//	КоллекцияДопРеквизитовСведений (ДанныеФормыКоллекция) - коллекция, в которую добавляется свойство,
//	
//	ДобавляемыеСвойства (Массив) - массив, в который включается добавляемое свойство,
//	
//	ПомеченныеНаУдалениеДобавляемыеСвойства (Массив) - массив, в который включается добавлемое свойство,
//	если оно помечено на удаление.
//
&НаКлиенте
Процедура ОбработатьДобавляемыйДопРеквизитСведение(ДобавляемоеСвойство, КоллекцияДопРеквизитовСведений, 
	ДобавляемыеСвойства, ПомеченныеНаУдалениеДобавляемыеСвойства)
	
	Отбор = Новый Структура("Свойство", ДобавляемоеСвойство);
	
	Если КоллекцияДопРеквизитовСведений.НайтиСтроки(Отбор).Количество() = 0 Тогда // этого свойства нет в коллекции
		
		ЭлементПомеченНаУдаление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДобавляемоеСвойство, "ПометкаУдаления");
		
		Если ЭлементПомеченНаУдаление Тогда
			ПомеченныеНаУдалениеДобавляемыеСвойства.Добавить(ДобавляемоеСвойство);
		Иначе
			ДобавляемыеСвойства.Добавить(ДобавляемоеСвойство);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при подборе доп.реквизита\сведения из формы подбора доп.реквизитов.
//
// Параметры:
//	ВыбранныеСвойства (СправочникСсылка, Массив) - свойство, или массив свойств.
//
&НаКлиенте
Процедура ПриПодбореДопРеквизитовСведенийВНабор(ВыбранныеСвойства)
	
	Если РедактируютсяОбщиеРеквизитыСведения Тогда
		Возврат;
	КонецЕсли;
	
	// Сформировать массив свойств которые будут добавлены в соответствующие таблицы.
	ДобавляемыеСвойства = Новый Массив;
	ПомеченныеНаУдалениеДобавляемыеСвойства = Новый Массив;
	
	КоллекцияДопРеквизитовСведений = КоллекцияДопРеквизитовСведений(ЭтаФорма, ТекущийТипЭлемента, ТекущийТипВладельцаНабораЭлементов);
	
	Отбор = Новый Структура("Свойство");
	
	Если ТипЗнч(ВыбранныеСвойства) = Тип("Массив") Тогда
		
		Для Каждого ДобавляемоеСвойство Из ВыбранныеСвойства Цикл
			
			ОбработатьДобавляемыйДопРеквизитСведение(
				ДобавляемоеСвойство, 
				КоллекцияДопРеквизитовСведений, 
				ДобавляемыеСвойства, 
				ПомеченныеНаУдалениеДобавляемыеСвойства
			);
			
		КонецЦикла;
		
	Иначе
		
		ДобавляемоеСвойство = ВыбранныеСвойства;
		
		ОбработатьДобавляемыйДопРеквизитСведение(
			ДобавляемоеСвойство, 
			КоллекцияДопРеквизитовСведений, 
			ДобавляемыеСвойства, 
			ПомеченныеНаУдалениеДобавляемыеСвойства
		);
		
	КонецЕсли;
	
	// Если в списке выбранных элементов есть помеченные на удаление, то спросить, нужно ли добавлять их в набор.
	Если ПомеченныеНаУдалениеДобавляемыеСвойства.Количество() > 0 Тогда
		
		Если ПомеченныеНаУдалениеДобавляемыеСвойства.Количество() = 1 Тогда
			
			ТекстВопроса = НСтр("ru = 'Элемент ""%1"" помечен на удаление. Добавить его?'");
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ПомеченныеНаУдалениеДобавляемыеСвойства[0]);
			
		Иначе
			
			ТекстВопроса = НСтр("ru = 'Есть помеченные на удаление элементы. Добавить их?'");
			
		КонецЕсли;
		
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
			
			Для каждого ЭлементМассива Из ПомеченныеНаУдалениеДобавляемыеСвойства Цикл
				ДобавляемыеСвойства.Добавить(ЭлементМассива);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДобавляемыеСвойства.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВыбранныеСвойстваВТаблицыРеквизитов(ДобавляемыеСвойства);
	
	// Оповестить форму подбора свойств набора дополнительных реквизитов (сведений) 
	// об изменении набора выбранных элементов.
	
	// ... получить массив всех выбранных (в т.ч. общих) дополнительных реквизитов (сведений) набора.
	ДопРеквизитыСведенияНабора = ВыбранныеДопРеквизитыСведенияНабора(ТекущийТипЭлемента, ТекущийТипВладельцаНабораЭлементов);
	
	// ... сформировать параметры оповещения.
	ПараметрСообщения = Новый Структура("Операция, МассивСвойств");
	
	ПараметрСообщения.Операция      = "Добавление";
	ПараметрСообщения.МассивСвойств = ДопРеквизитыСведенияНабора;
	
	Оповестить("ИзменилсяНаборВыбранных", ПараметрСообщения, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСтрокиТаблицыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов, Свойство)
	
	ТекущийТипЭлемента = ТипЭлемента;
	ТекущийТипВладельцаНабораЭлементов = ТипВладельцаНабораЭлементов;
	
	ПараметрыФормы = Новый Структура("Ключ", Свойство);
	
	ОткрытьФорму(
		"ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Форма.ФормаЭлемента", 
		ПараметрыФормы, 
		ЭтаФорма
	);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРеквизитыДляКонтроляИОтбора()
	
	Если НЕ (ТекущийТипВладельцаНабораЭлементов = "Номенклатура" 
		ИЛИ ТекущийТипВладельцаНабораЭлементов = "Характеристики") Тогда
		Возврат;
	КонецЕсли;
	
	// Если редактируется состав набора общих дополнительных сведений,
	// то изменять состав реквизитов для контроля и отбора не нужно.
	Если ТекущийТипЭлемента = "ДопСведение" Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДляКонтроля = КоллекцияРеквизитовДляКонтроля(Объект, ТекущийТипВладельцаНабораЭлементов);
	РеквизитыДляОтбора = КоллекцияРеквизитовОтбора(Объект, ТекущийТипВладельцаНабораЭлементов);
	
	// В таблицах дополнительных реквизитов и их состав еще не изменился, получить исходный список можно оттуда.
	ДопРеквизитыСведения = Новый Массив;
	
	ТаблицаДопРеквизитовСведений = КоллекцияДопРеквизитовСведений(
		ЭтаФорма, 
		ТекущийТипЭлемента, 
		ТекущийТипВладельцаНабораЭлементов
	);
	
	Для Каждого Элемент Из ТаблицаДопРеквизитовСведений Цикл
		
		Если РедактируютсяОбщиеРеквизитыСведения Тогда
			
			Если Элемент.ОбщееСвойство Тогда
				ДопРеквизитыСведения.Добавить(Элемент.Свойство);
			КонецЕсли;
			
		Иначе
			
			Если НЕ Элемент.ОбщееСвойство Тогда
				ДопРеквизитыСведения.Добавить(Элемент.Свойство);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Получить новый состав набора дополнительных реквизитов для текущего типа владельца.
	Запрос = Новый Запрос;
	НаборСвойствДопРеквизитов = Новый Массив;
	
	Если ТекущийТипВладельцаНабораЭлементов = "Номенклатура" Тогда
		
		Если РедактируютсяОбщиеРеквизитыСведения Тогда
			НаборСвойствДопРеквизитов.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие);
		Иначе
			НаборСвойствДопРеквизитов.Добавить(Объект.НаборСвойств);
			НаборСвойствДопРеквизитов.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие);
		КонецЕсли;
		
	ИначеЕсли ТекущийТипВладельцаНабораЭлементов = "Характеристики" Тогда
		
		Если РедактируютсяОбщиеРеквизитыСведения Тогда
			НаборСвойствДопРеквизитов.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие);
		Иначе
			НаборСвойствДопРеквизитов.Добавить(Объект.НаборСвойствХарактеристик);
			НаборСвойствДопРеквизитов.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Наименование КАК ИмяДопРеквизита,
	|	ДополнительныеРеквизитыИСведения.Представление КАК ПредставлениеДопРеквизита,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО НаборыДополнительныхРеквизитов.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	НЕ ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
	|	И НаборыДополнительныхРеквизитов.Ссылка В(&НаборСвойств)";
	
	Запрос.УстановитьПараметр("НаборСвойств", НаборСвойствДопРеквизитов);
	
	РезультатЗапроса = Запрос.Выполнить();
	НовТаблицаДопРеквизитовСведений = РезультатЗапроса.Выгрузить();
	
	// Удалить из таблицы реквизитов для контроля и из таблицы реквизитов для отбора удаленные свойства.
	Отбор = Новый Структура("Свойство, ЭтоДопРеквизит");
	
	Для каждого ДопРеквизит Из ДопРеквизитыСведения Цикл
		
		Если НЕ (НовТаблицаДопРеквизитовСведений.Найти(ДопРеквизит, "Свойство") = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор.Свойство = ДопРеквизит;
		Отбор.ЭтоДопРеквизит = Истина;
		
		// Из таблицы реквизитов для контроля.
		НайденныеСтроки = РеквизитыДляКонтроля.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			РеквизитыДляКонтроля.Удалить(НайденныеСтроки[0]);
		КонецЕсли;
		
		// Из таблицы реквизитов для отбора.
		НайденныеСтроки = РеквизитыДляОтбора.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			РеквизитыДляОтбора.Удалить(НайденныеСтроки[0]);
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавить в таблицу реквизитов для контроля и в таблицу реквизитов для отбора добавленные свойства.
	Для каждого СтрокаТаблицы Из НовТаблицаДопРеквизитовСведений Цикл
		
		Если НЕ (ДопРеквизитыСведения.Найти(СтрокаТаблицы.Свойство) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		// В таблицу реквизитов для контроля.
		НоваяСтрока = РеквизитыДляКонтроля.Добавить();
		
		НоваяСтрока.ИмяРеквизита = СтрокаТаблицы.ИмяДопРеквизита;
		НоваяСтрока.ПредставлениеРеквизита = СтрокаТаблицы.ПредставлениеДопРеквизита;
		НоваяСтрока.Свойство = СтрокаТаблицы.Свойство;
		НоваяСтрока.ЭтоДопРеквизит = Истина;
		НоваяСтрока.ДоступностьУникален = Истина;
		НоваяСтрока.ДоступностьОбязателенДляЗаполнения = Истина;
		НоваяСтрока.ДоступностьОтображатьПриСоздании = Истина;
		
		// В таблицу реквизитов для отбора.
		НоваяСтрока = РеквизитыДляОтбора.Добавить();
		
		НоваяСтрока.ИмяРеквизита = СтрокаТаблицы.ИмяДопРеквизита;
		НоваяСтрока.ПредставлениеРеквизита = СтрокаТаблицы.ПредставлениеДопРеквизита;
		НоваяСтрока.Свойство = СтрокаТаблицы.Свойство;
		НоваяСтрока.ЭтоДопРеквизит = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНабораДополнительныхРеквизитовИСведенийНаСервере()
	
	РедактируютсяОбщиеРеквизитыСведения = Истина;
	
	ИзменитьРеквизитыДляКонтроляИОтбора();
	ЗаполнитьСпискиДопРеквизитовСведений();
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

// Процедура вызывается при начале выбора шаблона наименования номенклатуры или характеристик.
// Проверяет модифицированность элемента и открывается форму редактирования шаблона.
//
// Параметры:
//	ШаблонНаименования (Строка) - шаблон наименования,
//	ЭлементШаблонаНаименования (ПолеФормы) - элемент шаблона,
//	ИмяШаблона (Строка) - имя шаблона наименования,
//	ФлагЗапрета (Строка) - имя флага запрета.
//
&НаКлиенте
Процедура ПриНачалеВыбораШаблона(ШаблонНаименования, ЭлементШаблонаНаименования, ИмяШаблона, ФлагЗапрета)
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Изменение шаблона наименования с помощью редактора формул 
		                          |возможно только после записи элемента, записать элемент?'");
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.Отмена, НСтр("ru = 'Редактирование шаблона'"));
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		Иначе
			Если НЕ Записать() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	НаборСвойств = Новый Структура("НаборСвойствНоменклатуры, Набор");
	
	Если Найти(ИмяШаблона, "Характеристики") = 0 Тогда
		
		НаборСвойств.НаборСвойствНоменклатуры = Истина;
		НаборСвойств.Набор = Объект.НаборСвойств;
		
	Иначе
		
		НаборСвойств.НаборСвойствНоменклатуры = Ложь;
		НаборСвойств.Набор = Объект.НаборСвойствХарактеристик;
		
	КонецЕсли;
	
	ПараметрыРедактированияШаблона = Новый Структура("Формула, ОперандыЗаголовок, Операторы, СтроковаяФормула, НаборСвойств");
	
	ПараметрыРедактированияШаблона.Формула           = ШаблонНаименования;
	ПараметрыРедактированияШаблона.ОперандыЗаголовок = "Доступные реквизиты";
	ПараметрыРедактированияШаблона.Операторы         = АдресХранилищаДереваОператоров;
	ПараметрыРедактированияШаблона.СтроковаяФормула  = Истина;
	ПараметрыРедактированияШаблона.НаборСвойств      = НаборСвойств;
	
	Шаблон = ОткрытьФормуМодально(
		"ОбщаяФорма.КонструкторФормул",
		ПараметрыРедактированияШаблона,
		ЭлементШаблонаНаименования);
	
	Если НЕ (Шаблон = Неопределено) Тогда
		Модифицированность = Истина;
		ШаблонНаименования = Шаблон;
	КонецЕсли;
	
	УстановитьДоступностьПоШаблону(Объект, ЭтаФорма, ИмяШаблона, ФлагЗапрета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеВыбораШаблонаРабочегоНаименованияНоменклатуры()
	
	ПриНачалеВыбораШаблона(
		Объект.ШаблонРабочегоНаименованияНоменклатуры, 
		Элементы.ШаблонРабочегоНаименованияНоменклатуры,
		"ШаблонРабочегоНаименованияНоменклатуры",
		"ЗапретРедактированияРабочегоНаименованияНоменклатуры"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеВыбораШаблонаНаименованияДляПечатиНоменклатуры()
	
	ПриНачалеВыбораШаблона(
		Объект.ШаблонНаименованияДляПечатиНоменклатуры, 
		Элементы.ШаблонНаименованияДляПечатиНоменклатуры,
		"ШаблонНаименованияДляПечатиНоменклатуры",
		"ЗапретРедактированияНаименованияНоменклатурыДляПечати"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеВыбораШаблонаРабочегоНаименованияХарактеристики()
	
	ПриНачалеВыбораШаблона(
		Объект.ШаблонРабочегоНаименованияХарактеристики, 
		Элементы.ШаблонРабочегоНаименованияХарактеристики,
		"ШаблонРабочегоНаименованияХарактеристики",
		"ЗапретРедактированияРабочегоНаименованияХарактеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеВыбораШаблонаНаименованияДляПечатиХарактеристик()
	
	ПриНачалеВыбораШаблона(
		Объект.ШаблонНаименованияДляПечатиХарактеристики, 
		Элементы.ШаблонНаименованияДляПечатиХарактеристики,
		"ШаблонНаименованияДляПечатиХарактеристики",
		"ЗапретРедактированияНаименованияХарактеристикиДляПечати"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОчисткеШаблонаРабочегоНаименованияНоменклатуры()
	
	Объект.ЗапретРедактированияРабочегоНаименованияНоменклатуры = Ложь;
	Элементы.ЗапретРедактированияРабочегоНаименованияНоменклатуры.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОчисткеШаблонаНаименованияДляПечатиНоменклатуры()

	Объект.ЗапретРедактированияНаименованияНоменклатурыДляПечати = Ложь;
	Элементы.ЗапретРедактированияНаименованияНоменклатурыДляПечати.Доступность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПриОчисткеШаблонаРабочегоНаименованияХарактеристики()
	
	Объект.ЗапретРедактированияРабочегоНаименованияХарактеристики = Ложь;
	Элементы.ЗапретРедактированияРабочегоНаименованияХарактеристики.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОчисткеШаблонаНаименованияДляПечатиХарактеристики()
	
	Объект.ЗапретРедактированияНаименованияХарактеристикиДляПечати = Ложь;
	Элементы.ЗапретРедактированияНаименованияХарактеристикиДляПечати.Доступность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоОператоров()
	
	Дерево = РаботаСФормулами.ПолучитьПустоеДеревоОператоров();
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "Разделители");
	
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "/", " + ""/"" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "\", " + ""\"" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "|", " + ""|"" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "_", " + ""_"" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ",", " + "", "" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ".", " + "". "" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "Пробел", " + "" "" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "(", " + "" ("" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ")", " + "") "" + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, """", " + """""""" + ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "Операторы");
	
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "Логические операторы и константы");
	
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<", " < ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">", " > ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<=", " <= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, ">=", " >= ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "=", " = ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "<>", " <> ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "И", " И ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "Или", " Или ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "Не", " Не ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "ИСТИНА", " ИСТИНА ");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "ЛОЖЬ", " ЛОЖЬ ");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "Числовые функции");
	
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "Максимум", "Макс(,)", 2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "Минимум", "Мин(,)", 2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "Округление", "Окр(,)", 2);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "Целая часть", "Цел()", 1);
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "Строковые функции");
	
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "Строка", "Строка()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "ВРег", "ВРег()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "Лев", "Лев()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "НРег", "НРег()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "Прав", "Прав()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "СокрЛ", "СокрЛ()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "СокрЛП", "СокрЛП()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "СокрП", "СокрП()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "ТРег", "ТРег()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "СтрЗаменить", "СтрЗаменить(,,)");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "СтрДлина", "СтрДлина()");
	
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "Прочие функции");
	
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "Условие", "?(,,)", 3);
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "Предопределенное значение", "ПредопределенноеЗначение()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "Значение заполнено", "ЗначениеЗаполнено()");
	РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "Формат", "Формат(,)");
	
	АдресХранилищаДереваОператоров = ПоместитьВоВременноеХранилище(Дерево, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция НедоступныеДляКонтроляЗаполненияРеквизиты()
	
	Результат = Новый Массив;
	
	Результат.Добавить("ФайлКартинки");
	Результат.Добавить("ФайлОписанияДляСайта");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НеотображаемыеРеквизиты()
	
	Результат = Новый Массив;
	
	Результат.Добавить("КодДляПоиска");
	Результат.Добавить("ИспользоватьИндивидуальныйШаблонЦенника");
	Результат.Добавить("ИспользоватьИндивидуальныйШаблонЭтикетки");
	Результат.Добавить("ВариантОформленияПродажи");
	Результат.Добавить("ИспользоватьУпаковки");
	Результат.Добавить("НаборУпаковок");
	Результат.Добавить("ТипНоменклатуры");
	Результат.Добавить("ЕстьТоварыДругогоКачества");
	Результат.Добавить("ИспользованиеХарактеристик");
	Результат.Добавить("НоменклатураМногооборотнаяТара");
	Результат.Добавить("ХарактеристикаМногооборотнаяТара");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НеИспользуемыеДляОтборовРеквизиты()
	
	Результат = Новый Массив;
	
	Результат.Добавить("ШаблонЦенника");
	Результат.Добавить("ШаблонЭтикетки");
	Результат.Добавить("Описание");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РеквизитыОтключенныеПоФО()
	
	ЭтоТовар = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	
	ВыводитьКачество               = ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров");
	ИспользоватьПризнакПодакцизный = ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению");
	ИспользоватьАдресноеХранение   = ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение", Новый Структура);
	ВыводитьЦеновуюГруппу          = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ВыводитьГруппуФинУчета         = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыФинансовогоУчета");
	ВыводитьАссортимент            = ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент");
	ВыводитьМногооборотнуюТару     = ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару");

	Результат = Новый Массив;
	
	Если Не ВыводитьКачество Тогда
		Результат.Добавить("Качество");
	КонецЕсли;
	
	Если Не ИспользоватьПризнакПодакцизный Тогда
		Результат.Добавить("ПодакцизныйТовар");
	КонецЕсли;
	
	Если Не ЭтоТовар Или Не ИспользоватьАдресноеХранение Тогда
		Результат.Добавить("СкладскаяГруппа");
	КонецЕсли;
	
	Если Не ВыводитьЦеновуюГруппу Тогда
		Результат.Добавить("ЦеноваяГруппа");
	КонецЕсли;
	
	Если Не ВыводитьГруппуФинУчета Тогда
		Результат.Добавить("ГруппаФинансовогоУчета");
	КонецЕсли;
	
	Если Не ВыводитьАссортимент Тогда
		Результат.Добавить("ТоварнаяКатегория");
		Результат.Добавить("Марка");
	КонецЕсли;
	
	Если Не ВыводитьМногооборотнуюТару Тогда
		Результат.Добавить("ПоставляетсяВМногооборотнойТаре");
		Результат.Добавить("НоменклатураМногооборотнаяТара");
		Результат.Добавить("ХарактеристикаМногооборотнаяТара");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НеИспользуемыеДляКонтроляТипы()
	
	Результат = Новый Массив;
	
	Результат.Добавить(Новый ОписаниеТипов("СправочникСсылка.НоменклатураПрисоединенныеФайлы"));
	Результат.Добавить(Новый ОписаниеТипов("СправочникСсылка.Файлы"));
	Результат.Добавить(Новый ОписаниеТипов("ХранилищеЗначения"));
	Результат.Добавить(Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0)));
	Результат.Добавить(Новый ОписаниеТипов("СправочникСсылка.НаборыУпаковок"));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НеИспользуемыеДляОтборовТипы()
	
	Результат = Новый Массив;
	
	Результат.Добавить(Новый ОписаниеТипов("СправочникСсылка.НоменклатураПрисоединенныеФайлы"));
	Результат.Добавить(Новый ОписаниеТипов("СправочникСсылка.Файлы"));
	Результат.Добавить(Новый ОписаниеТипов("ХранилищеЗначения"));
	Результат.Добавить(Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(0)));
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭтоРеквизитСоставногоТипа(Реквизит)
	
	Возврат Не Реквизит.Тип.Типы().Количество() < 2;
	
КонецФункции

&НаСервере
Функция ЭтоОбязательноОтображаемыйРеквизит(ИмяРеквизита, ВладелецРеквизита, ЭтоДопРеквизит)
	
	Если ЭтоДопРеквизит Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВладелецРеквизита = "Номенклатура" Тогда
		
		ОбязательноОтображаемыеРеквизиты = Справочники.Номенклатура.ИменаОбязательноОтображаемыхРеквизитов();
		ОбязательноОтображаемый = (ОбязательноОтображаемыеРеквизиты.Найти(ИмяРеквизита) <> Неопределено);
		
		Возврат ОбязательноОтображаемый;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЭтоОбязательныйДляЗаполненияРеквизит(ИмяРеквизита, ВладелецРеквизита, ЭтоДопРеквизит)
	
	Если ЭтоДопРеквизит Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВладелецРеквизита = "Номенклатура" Тогда
		
		Реквизит = Метаданные.Справочники.Номенклатура.Реквизиты.Найти(ИмяРеквизита);
		
		Если НЕ (Реквизит = Неопределено) Тогда
			
			Если ИмяРеквизита = "ЕдиницаИзмерения" Тогда
				ОбязательныйДляЗаполнения = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар)
					Или (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
			Иначе
				ОбязательныйДляЗаполнения = (Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку);
			КонецЕсли;
			
			Возврат ОбязательныйДляЗаполнения;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ДоступноИзменениеНастройкиОбязательностиЗаполненияРеквизита(ИмяРеквизита, ВладелецРеквизита, ЭтоДопРеквизит)
	
	Если ЭтоОбязательныйДляЗаполненияРеквизит(ИмяРеквизита, ВладелецРеквизита, ЭтоДопРеквизит) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ДоступноИзменениеНастройкиОтображенияРеквизита(ИмяРеквизита, ВладелецРеквизита, ЭтоДопРеквизит)
	
	Если ЭтоОбязательноОтображаемыйРеквизит(ИмяРеквизита, ВладелецРеквизита, ЭтоДопРеквизит) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЭтоОбязательныйДляЗаполненияРеквизит(ИмяРеквизита, ВладелецРеквизита, ЭтоДопРеквизит) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура вызывается при изменении значения флажка контроля уникальности в строке
// таблицы реквизитов для контроля номенклатуры. В процедуре выполняется контроль доступности
// изменения настройки отображения и заполнения для реквизита. По полученным настройкам
// доступности выполняется установка доступности изменения настроек.
//
// Параметры:
//	ВладелецРеквизита (Строка) - Имя владельца строки таблицы контроля реквизитов.
//	Приинимает значения: "Номенклатура", "Характеристики".
//
//	ИдентификаторСтрокиТаблицы (Число) - Идентификатор строки таблицы контроля реквизитов.
//
&НаСервере
Процедура ПриИзмененииНастройкиКонтроля(ВладелецРеквизита, ИдентификаторСтрокиТаблицы)
	
	Если ВладелецРеквизита = "Номенклатура" Тогда
		ТекущиеДанные = Объект.РеквизитыДляКонтроляНоменклатуры.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	Иначе
		ТекущиеДанные = Объект.РеквизитыДляКонтроляХарактеристик.НайтиПоИдентификатору(ИдентификаторСтрокиТаблицы);
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Типы = Новый Массив();
	Типы.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(Типы);
	
	ДоступноИзменениеНастройкиОтображения = ДоступноИзменениеНастройкиОтображенияРеквизита(ТекущиеДанные.ИмяРеквизита, ВладелецРеквизита, ТекущиеДанные.ЭтоДопРеквизит);
	ДоступноИзменениеНастройкиОбязательностиЗаполнения = ДоступноИзменениеНастройкиОбязательностиЗаполненияРеквизита(ТекущиеДанные.ИмяРеквизита, ВладелецРеквизита, ТекущиеДанные.ЭтоДопРеквизит);
	
	ТекущиеДанные.ДоступностьОтображатьПриСоздании = НЕ (ТекущиеДанные.Уникален ИЛИ ТекущиеДанные.ОбязателенДляЗаполнения) И ДоступноИзменениеНастройкиОтображения;
	ТекущиеДанные.ДоступностьОбязателенДляЗаполнения = НЕ ТекущиеДанные.Уникален И ДоступноИзменениеНастройкиОбязательностиЗаполнения;
	
	Если ТекущиеДанные.Уникален Тогда
		ТекущиеДанные.ОбязателенДляЗаполнения = Истина;
		ТекущиеДанные.ОтображатьПриСоздании = Истина;
	КонецЕсли;
	
	Если ТекущиеДанные.ОбязателенДляЗаполнения Тогда
		ТекущиеДанные.ОтображатьПриСоздании = Истина;
	КонецЕсли;
	
	// Если тип реквизита - Булево, то не включать контроль заполнения.
	Если ТекущиеДанные.ЭтоДопРеквизит Тогда
		
		Если ВладелецРеквизита = "Номенклатура" Тогда
			ДополнительныеРеквизиты = ДополнительныеРеквизитыНоменклатуры();
		ИначеЕсли ВладелецРеквизита = "Характеристики" Тогда
			ДополнительныеРеквизиты = ДополнительныеРеквизитыХарактеристик();
		КонецЕсли;
		
		Отбор = Новый Структура("ИмяРеквизита, Свойство, ЭтоДопРеквизит", ТекущиеДанные.ИмяРеквизита, ТекущиеДанные.Свойство, Истина);
		
		НайденныеСтроки = ДополнительныеРеквизиты.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		НайденнаяСтрока = НайденныеСтроки[0];
		
		ТипЗначения = НайденнаяСтрока.ТипЗначения;
		
		Если ТипЗначения = ОписаниеТиповБулево Тогда
			ТекущиеДанные.ОбязателенДляЗаполнения = Ложь;
			ТекущиеДанные.ДоступностьОбязателенДляЗаполнения = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ВладелецРеквизита = "Номенклатура" Тогда
			
			Реквизит = Метаданные.Справочники.Номенклатура.Реквизиты.Найти(ТекущиеДанные.ИмяРеквизита);
			
			Если Реквизит = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если Реквизит.Тип = ОписаниеТиповБулево Тогда
				ТекущиеДанные.ОбязателенДляЗаполнения = Ложь;
				ТекущиеДанные.ДоступностьОбязателенДляЗаполнения = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоСоставнойТипЗначения(ТипЗначения)
	
	Возврат НЕ ТипЗначения.Типы().Количество() < 2;
	
КонецФункции

&НаСервере
Процедура ДобавитьРеквизитДляКонтроляНоменклатуры(ИмяРеквизита, ПредставлениеРеквизита)
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	
	НайденныеСтроки = Объект.РеквизитыДляКонтроляНоменклатуры.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		СтрокаТаблицыРеквизитовДляКонтроля = Объект.РеквизитыДляКонтроляНоменклатуры.Добавить();
		
		СтрокаТаблицыРеквизитовДляКонтроля.ИмяРеквизита = ИмяРеквизита;
		СтрокаТаблицыРеквизитовДляКонтроля.ПредставлениеРеквизита = ПредставлениеРеквизита;
		СтрокаТаблицыРеквизитовДляКонтроля.ДоступностьУникален = Истина;
		СтрокаТаблицыРеквизитовДляКонтроля.ДоступностьОбязателенДляЗаполнения = Истина;
		СтрокаТаблицыРеквизитовДляКонтроля.ДоступностьОтображатьПриСоздании = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитДляОтбораНоменклатуры(ИмяРеквизита, ПредставлениеРеквизита)
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	
	НайденныеСтроки = ТаблицаРеквизитовОтбораНоменклатуры.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		СтрокаТаблицыРеквизитов = ТаблицаРеквизитовОтбораНоменклатуры.Добавить();
		
		СтрокаТаблицыРеквизитов.ИмяРеквизита = ИмяРеквизита;
		СтрокаТаблицыРеквизитов.ПредставлениеРеквизита = ПредставлениеРеквизита;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРеквизитДляКонтроляНоменклатуры(ИмяРеквизита)
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	
	НайденныеСтроки = Объект.РеквизитыДляКонтроляНоменклатуры.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		СтрокаТаблицыРеквизитов = НайденныеСтроки[0];
		Объект.РеквизитыДляКонтроляНоменклатуры.Удалить(СтрокаТаблицыРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРеквизитДляОтбораНоменклатуры(ИмяРеквизита)
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	
	НайденныеСтроки = ТаблицаРеквизитовОтбораНоменклатуры.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		СтрокаТаблицыРеквизитов = НайденныеСтроки[0];
		ТаблицаРеквизитовОтбораНоменклатуры.Удалить(СтрокаТаблицыРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатурыПоТипуНоменклатуры()
	
	Перем СтрокаТаблицыРеквизитовДляКонтроля;
	
	ЭтоТовар = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	ИспользоватьКачествоТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров");
	ИспользоватьМногооборотнуюТару = ПолучитьФункциональнуюОпцию("ИспользоватьМногооборотнуюТару");
	
	// Сформировать таблицу реквизитов для заполнения.
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизита");
	ТаблицаРеквизитов.Колонки.Добавить("ПредставлениеРеквизита");
	ТаблицаРеквизитов.Колонки.Добавить("ДействиеРеквизитыДляКонтроля");
	ТаблицаРеквизитов.Колонки.Добавить("ДействиеРеквизитыДляОтбора");
	
	// Добавить реквизиты.
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита                 = "ЕдиницаИзмерения";
	НоваяСтрока.ПредставлениеРеквизита       = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, НСтр("ru = 'Единица хранения'"), НСтр("ru = 'Единица измерения'"));
	НоваяСтрока.ДействиеРеквизитыДляКонтроля = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Добавить");
	НоваяСтрока.ДействиеРеквизитыДляОтбора   = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
	
	Если ИспользоватьКачествоТоваров Тогда
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.ИмяРеквизита                 = "Качество";
		НоваяСтрока.ПредставлениеРеквизита       = НСтр("ru = 'Качество'");
		НоваяСтрока.ДействиеРеквизитыДляКонтроля = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
		НоваяСтрока.ДействиеРеквизитыДляОтбора   = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
		
	КонецЕсли;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита                 = "Вес";
	НоваяСтрока.ПредставлениеРеквизита       = НСтр("ru = 'Вес (нетто)'");
	НоваяСтрока.ДействиеРеквизитыДляКонтроля = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
	НоваяСтрока.ДействиеРеквизитыДляОтбора   = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита                 = "ВестиУчетПоГТД";
	НоваяСтрока.ПредставлениеРеквизита       = НСтр("ru = 'Вести учет по ГТД'");
	НоваяСтрока.ДействиеРеквизитыДляКонтроля = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
	НоваяСтрока.ДействиеРеквизитыДляОтбора   = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита                 = "ПодакцизныйТовар";
	НоваяСтрока.ПредставлениеРеквизита       = НСтр("ru = 'Подакцизный товар'");
	НоваяСтрока.ДействиеРеквизитыДляКонтроля = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
	НоваяСтрока.ДействиеРеквизитыДляОтбора   = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита                 = "Объем";
	НоваяСтрока.ПредставлениеРеквизита       = НСтр("ru = 'Объем'");
	НоваяСтрока.ДействиеРеквизитыДляКонтроля = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
	НоваяСтрока.ДействиеРеквизитыДляОтбора   = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита                 = "Производитель";
	НоваяСтрока.ПредставлениеРеквизита       = НСтр("ru = 'Производитель'");
	НоваяСтрока.ДействиеРеквизитыДляКонтроля = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
	НоваяСтрока.ДействиеРеквизитыДляОтбора   = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент") Тогда
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.ИмяРеквизита                 = "Марка";
		НоваяСтрока.ПредставлениеРеквизита       = НСтр("ru = 'Марка (бренд)'");
		НоваяСтрока.ДействиеРеквизитыДляКонтроля = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
		НоваяСтрока.ДействиеРеквизитыДляОтбора   = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.ИмяРеквизита                 = "ТоварнаяКатегория";
		НоваяСтрока.ПредставлениеРеквизита       = НСтр("ru = 'Товарная категория'");
		НоваяСтрока.ДействиеРеквизитыДляКонтроля = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
		НоваяСтрока.ДействиеРеквизитыДляОтбора   = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
	КонецЕсли;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита                 = "ФайлКартинки";
	НоваяСтрока.ПредставлениеРеквизита       = НСтр("ru = 'Файл картинки'");
	НоваяСтрока.ДействиеРеквизитыДляКонтроля = ?(ЭтоТовар Или ЭтоМногооборотнаяТара, "Добавить", "Удалить");
	НоваяСтрока.ДействиеРеквизитыДляОтбора   = "Удалить";
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита                 = "ПоставляетсяВМногооборотнойТаре";
	НоваяСтрока.ПредставлениеРеквизита       = НСтр("ru = 'Поставляется в многооборотной таре'");
	НоваяСтрока.ДействиеРеквизитыДляКонтроля = ?(ЭтоТовар И ИспользоватьМногооборотнуюТару, "Добавить", "Удалить");
	НоваяСтрока.ДействиеРеквизитыДляОтбора   = "Удалить";

	// Пройти по таблице реквизитов, выполнить нужную обработку.
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Для каждого СтрокаТаблицыРеквизитов Из ТаблицаРеквизитов Цикл
		
		ИмяРеквизита           = СтрокаТаблицыРеквизитов.ИмяРеквизита;
		ПредставлениеРеквизита = СтрокаТаблицыРеквизитов.ПредставлениеРеквизита;
		
		// Выполнить действия с таблицами реквизитов для контроля и отбора.
		
		Отбор.ИмяРеквизита = ИмяРеквизита;
		
		// ... с таблицей реквизитов для контроля.
		ИмяДействия = СтрокаТаблицыРеквизитов.ДействиеРеквизитыДляКонтроля;
		
		Если ЗначениеЗаполнено(ИмяДействия) Тогда
			
			НайденныеСтроки = Объект.РеквизитыДляКонтроляНоменклатуры.НайтиСтроки(Отбор);
			
			Если ИмяДействия = "Добавить" Тогда
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					СтрокаТаблицыРеквизитовДляКонтроля = НайденныеСтроки[0];
					
					СтрокаТаблицыРеквизитовДляКонтроля.ПредставлениеРеквизита = ПредставлениеРеквизита;
					
					// Для реквизита "ЕдиницаИзмерения" - отдельная обработка.
					Если ИмяРеквизита = "ЕдиницаИзмерения" Тогда
						
						Если ЭтоТовар Или ЭтоМногооборотнаяТара Тогда
							
							СтрокаТаблицыРеквизитовДляКонтроля.ОтображатьПриСоздании = Истина;
							СтрокаТаблицыРеквизитовДляКонтроля.ОбязателенДляЗаполнения = Истина;
							
							СтрокаТаблицыРеквизитовДляКонтроля.ДоступностьОбязателенДляЗаполнения = Ложь;
							СтрокаТаблицыРеквизитовДляКонтроля.ДоступностьОтображатьПриСоздании = Ложь;
							СтрокаТаблицыРеквизитовДляКонтроля.ДоступностьУникален = Истина;
							
						Иначе
							
							СтрокаТаблицыРеквизитовДляКонтроля.ДоступностьОбязателенДляЗаполнения = НЕ СтрокаТаблицыРеквизитовДляКонтроля.Уникален;
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					ДобавитьРеквизитДляКонтроляНоменклатуры(ИмяРеквизита, ПредставлениеРеквизита);
					
				КонецЕсли;
				
			ИначеЕсли ИмяДействия = "Удалить" Тогда
				
				УдалитьРеквизитДляКонтроляНоменклатуры(ИмяРеквизита);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// ... с таблицей реквизитов для отбора.
		ИмяДействия = СтрокаТаблицыРеквизитов.ДействиеРеквизитыДляОтбора;
		
		Если ЗначениеЗаполнено(ИмяДействия) Тогда
			
			НайденныеСтроки = ТаблицаРеквизитовОтбораНоменклатуры.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				НайденныеСтроки[0].ПредставлениеРеквизита = ПредставлениеРеквизита;
				
			КонецЕсли;
			
			Если ИмяДействия = "Добавить" Тогда
				
				ДобавитьРеквизитДляОтбораНоменклатуры(ИмяРеквизита, ПредставлениеРеквизита);
				
			ИначеЕсли ИмяДействия = "Удалить" Тогда
				
				УдалитьРеквизитДляОтбораНоменклатуры(ИмяРеквизита);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.РеквизитыДляКонтроляНоменклатуры.Сортировать("ИмяРеквизита");
	
	ТаблицаРеквизитовОтбораНоменклатуры.Сортировать("ИмяРеквизита");
	
КонецПроцедуры

// Процедура заполняет нужную таблицу дополнительных реквизитов (сведений).
//
// Параметры:
//	Таблица (ДанныеФормыКоллекция) - Таблица доп.реквизитов (сведений).
//	
//	НаборСвойствДопРеквизитов (СправочникСсылка.НаборыДополнительныхРеквизитовИСведений) - Ссылка на элемент-владелец 
//	набора доп.реквизитов (сведений).
//	
//	НаборОбщихСвойствДопРеквизитов (СправочникСсылка.НаборыДополнительныхРеквизитовИСведений) - Ссылка на элемент-владелец 
//	набора общих доп.реквизитов (сведений).
//	
//	ТипДанных (Строка) - Тип данных которые будут заполняться. 
//	Принимает значения: "Реквизиты", "Сведения".
//	
//	ТолькоОбщиеСвойства (Булево) - Если параметр, установлен в Истина, то предварительно очищается не вся таблица,
//	а только список общих доп.реквизитов (сведений). Это сделано для того чтобы избежать 
//	потери введенных данных о не общих доп.реквизитах (сведениях) в форму.
//	Значение по умолчанию: Ложь
//	
&НаСервере
Процедура ЗаполнитьСписокСвойствДопРеквизитовТаблицы(Таблица, НаборСвойствДопРеквизитов, НаборОбщихСвойствДопРеквизитов, 
	ТипДанных, ТолькоОбщиеСвойства = Ложь)
	
	// Если нужно перезаполнить свойства, то проверить, что передана ссылка на набор свойств.
	Если НЕ ТолькоОбщиеСвойства Тогда
		Если НЕ ЗначениеЗаполнено(НаборСвойствДопРеквизитов) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		// Если нужно перезаполнить только ОБЩИЕ свойства, то проверить, что передана ссылка на набор ОБЩИХ свойств.
		Если НЕ ЗначениеЗаполнено(НаборОбщихСвойствДопРеквизитов) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТолькоОбщиеСвойства Тогда
		
		// Удалить из таблицы только строки общих свойств.
		ВГраница = Таблица.Количество() - 1;
		
		Для ОбрИндекс = 0 По ВГраница Цикл
			
			СтрокаТаблицы = Таблица[ВГраница - ОбрИндекс];
			
			Если СтрокаТаблицы.ОбщееСвойство Тогда
				Таблица.Удалить(СтрокаТаблицы);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Таблица.Очистить();
		
	КонецЕсли;
	
	Если ТипДанных = "Реквизиты" Тогда
		ИмяТЧ = "ДополнительныеРеквизиты";
	ИначеЕсли ТипДанных = "Сведения" Тогда
		ИмяТЧ = "ДополнительныеСведения";
	КонецЕсли;
	
	// Получить список дополнительных реквизитов из набора свойств, и дополнительных реквизитов из набора общих свойств.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НаборОбщихСвойств", НаборОбщихСвойствДопРеквизитов);
	
	Если ТолькоОбщиеСвойства Тогда
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбщиеДопРеквизитыСведения.Свойство КАК Свойство,
		|	ОбщиеДопРеквизитыСведения.Свойство.Представление КАК ПредставлениеРеквизита,
		|	ИСТИНА КАК ОбщееСвойство,
		|	ОбщиеДопРеквизитыСведения.НомерСтроки КАК НомерСтрокиДляСортировки
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений." + ИмяТЧ + " КАК ОбщиеДопРеквизитыСведения
		|ГДЕ
		|	ОбщиеДопРеквизитыСведения.Ссылка = &НаборОбщихСвойств";
		
	Иначе
		
		Запрос.УстановитьПараметр("НаборСвойств", НаборСвойствДопРеквизитов);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДопРеквизитыСведения.Свойство КАК Свойство,
		|	ДопРеквизитыСведения.Свойство.Представление КАК ПредставлениеРеквизита,
		|	ЛОЖЬ КАК ОбщееСвойство,
		|	ДопРеквизитыСведения.НомерСтроки КАК НомерСтрокиДляСортировки
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений." + ИмяТЧ + " КАК ДопРеквизитыСведения
		|ГДЕ
		|	ДопРеквизитыСведения.Ссылка = &НаборСвойств
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбщиеДопРеквизитыСведения.Свойство,
		|	ОбщиеДопРеквизитыСведения.Свойство.Представление,
		|	ИСТИНА,
		|	ОбщиеДопРеквизитыСведения.НомерСтроки
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений." + ИмяТЧ + " КАК ОбщиеДопРеквизитыСведения
		|ГДЕ
		|	ОбщиеДопРеквизитыСведения.Ссылка = &НаборОбщихСвойств";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДопРеквизитовСведений = РезультатЗапроса.Выгрузить();
	
	Если ТолькоОбщиеСвойства Тогда
		
		ТаблицаДопРеквизитовСведений.Сортировать("НомерСтрокиДляСортировки Возр");
		
		ТаблицаВсехДопРеквизитовСведений = Таблица.Выгрузить();
		ТаблицаВсехДопРеквизитовСведений.Очистить();
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДопРеквизитовСведений, ТаблицаВсехДопРеквизитовСведений);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, ТаблицаВсехДопРеквизитовСведений);
		
		Таблица.Загрузить(ТаблицаВсехДопРеквизитовСведений);
		
	Иначе
		
		ТаблицаДопРеквизитовСведений.Сортировать("ОбщееСвойство Убыв, НомерСтрокиДляСортировки Возр");
		
		Таблица.Загрузить(ТаблицаДопРеквизитовСведений);
		
	КонецЕсли;
	
	// Сформировать представление для общих реквизитов.
	Для каждого СтрокаТаблицы Из Таблица Цикл
		
		Если НЕ СтрокаТаблицы.ОбщееСвойство Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.ПредставлениеРеквизита = ПредставлениеОбщегоРеквизита(СтрокаТаблицы.ПредставлениеРеквизита);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеОбщегоРеквизита(ПредставлениеРеквизита)
	
	МеткаОбщегоСвойства = НСтр("ru = ' (Общий)'");
	
	Возврат СокрЛП(ПредставлениеРеквизита) + МеткаОбщегоСвойства;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСпискиДопРеквизитовСведений()
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопРеквизитовНоменклатуры, 
		Объект.НаборСвойств, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие,
		"Реквизиты",
		РедактируютсяОбщиеРеквизитыСведения
	);
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопРеквизитовХарактеристик, 
		Объект.НаборСвойствХарактеристик, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие,
		"Реквизиты",
		РедактируютсяОбщиеРеквизитыСведения
	);
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопРеквизитовСерий, 
		Объект.НаборСвойствСерий, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие,
		"Реквизиты",
		РедактируютсяОбщиеРеквизитыСведения
	);
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопСведенийНоменклатуры, 
		Объект.НаборСвойств, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие,
		"Сведения",
		РедактируютсяОбщиеРеквизитыСведения
	);
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопСведенийХарактеристик, 
		Объект.НаборСвойствХарактеристик, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие,
		"Сведения",
		РедактируютсяОбщиеРеквизитыСведения
	);
	
	ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
		ТаблицаДопСведенийСерий, 
		Объект.НаборСвойствСерий, 
		Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие,
		"Сведения",
		РедактируютсяОбщиеРеквизитыСведения
	);
	
КонецПроцедуры

&НаСервере
Функция ОбязательныйДляЗаполненияРеквизит(Реквизит)
	
	ИмяРеквизита = Реквизит.Имя;
	
	ОбязательныйДляЗаполнения = (Реквизит.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку);
	
	Если ИмяРеквизита = "ШаблонЦенника" Или ИмяРеквизита = "ШаблонЭтикетки" Тогда
		ОбязательныйДляЗаполнения = Ложь;
	КонецЕсли;
	
	Если ИмяРеквизита = "ЕдиницаИзмерения" Тогда
		ОбязательныйДляЗаполнения = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар)
		Или (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	КонецЕсли;
	
	Возврат ОбязательныйДляЗаполнения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатурыПоРеквизитам()
	
	// Получить правила заполнения для реквизитов.
	РеквизитыОтключенныеПоФО         = РеквизитыОтключенныеПоФО();
	НеиспользуемыеДляКонтроляРеквизиты = Справочники.Номенклатура.ИменаНеиспользуемыхДляКонтроляРеквизитов();
	ОбязательноОтображаемыеРеквизиты = Справочники.Номенклатура.ИменаОбязательноОтображаемыхРеквизитов();
	НеотображаемыеРеквизиты          = НеотображаемыеРеквизиты();
	НедоступныеДляКонтроляЗаполнения = НедоступныеДляКонтроляЗаполненияРеквизиты();
	ТипыНеИспользуемыеДляКонтроля    = НеИспользуемыеДляКонтроляТипы();
	ТипыНеИспользуемыеДляОтборов     = НеИспользуемыеДляОтборовТипы();
	НеИспользуемыеДляОтборов         = НеИспользуемыеДляОтборовРеквизиты();
	
	Отбор = Новый Структура("ИмяРеквизита, ЭтоДопРеквизит");
	
	СвойстваДляЗаполнения = "Уникален, ОбязателенДляЗаполнения, ОтображатьПриСоздании, 
	                        |ДоступностьУникален, ДоступностьОбязателенДляЗаполнения, ДоступностьОтображатьПриСоздании";
	
	Типы = Новый Массив();
	Типы.Добавить(Тип("Булево"));
	
	ОписаниеТиповБулево = Новый ОписаниеТипов(Типы);
	
	Для Каждого Реквизит Из Метаданные.Справочники.Номенклатура.Реквизиты Цикл
		
		ИмяРеквизита           = Реквизит.Имя;
		ТипРеквизита           = Реквизит.Тип;
		ПредставлениеРеквизита = Реквизит.Синоним;
		
		ЭтоОтключенныйРеквизит                      = (РеквизитыОтключенныеПоФО.Найти(ИмяРеквизита) <> Неопределено);
		ЭтоНеотображаемыйРеквизит                   = (НеотображаемыеРеквизиты.Найти(ИмяРеквизита) <> Неопределено);
		ЭтоНеиспользуемыйДляКонтроляРеквизит        = (НеиспользуемыеДляКонтроляРеквизиты.Найти(ИмяРеквизита) <> Неопределено);
		ЭтоНеиспользуемыйДляКонтроляТип             = (ТипыНеИспользуемыеДляКонтроля.Найти(ТипРеквизита) <> Неопределено);
		ЭтоНеиспользуемыйДляОтборовТип              = (ТипыНеИспользуемыеДляОтборов.Найти(ТипРеквизита) <> Неопределено);
		ЭтоРеквизитСоставногоТипа                   = ЭтоРеквизитСоставногоТипа(Реквизит);
		ЭтоНеиспользуемыйДляОтборовРеквизит         = (НеИспользуемыеДляОтборов.Найти(ИмяРеквизита) <> Неопределено);
		ЭтоОбязательноОтображаемыйРеквизит          = (ОбязательноОтображаемыеРеквизиты.Найти(ИмяРеквизита) <> Неопределено);
		ЭтоНедоступныйДляКонтроляЗаполненияРеквизит = (НедоступныеДляКонтроляЗаполнения.Найти(ИмяРеквизита) <> Неопределено);
		ЭтоОбязательныйДляЗаполненияРеквизит        = ОбязательныйДляЗаполненияРеквизит(Реквизит);
		ТипРеквизитаБулево                          = (ТипРеквизита = ОписаниеТиповБулево);
		
		Если ЭтоОтключенныйРеквизит Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоНеотображаемыйРеквизит Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПредставлениеРеквизита) Тогда
			ПредставлениеРеквизита = ИмяРеквизита;
		КонецЕсли;
		
		// Добавить реквизит в таблицу реквизитов для контроля номенклатуры.
		СтрокаРеквизитовДляКонтроля = Объект.РеквизитыДляКонтроляНоменклатуры.Добавить();
		
		// Если реквизит был в таблице реквизитов для контроля, то заполнить свойства по существовашей записи.
		Отбор.ИмяРеквизита   = ИмяРеквизита;
		Отбор.ЭтоДопРеквизит = Ложь;
		
		МассивИспользуемых = ТаблицаРеквизитовДляКонтроляНоменклатуры.НайтиСтроки(Отбор);
		РеквизитИспользуется = (МассивИспользуемых.Количество() > 0);
		
		Если РеквизитИспользуется Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляКонтроля, МассивИспользуемых[0], СвойстваДляЗаполнения);
		КонецЕсли;
		
		СтрокаРеквизитовДляКонтроля.ИмяРеквизита            = ИмяРеквизита;
		СтрокаРеквизитовДляКонтроля.ПредставлениеРеквизита  = ПредставлениеРеквизита;
		
		Если НЕ СтрокаРеквизитовДляКонтроля.ОбязателенДляЗаполнения Тогда
			
			СтрокаРеквизитовДляКонтроля.ОбязателенДляЗаполнения = ЭтоОбязательныйДляЗаполненияРеквизит;
			
		КонецЕсли;
		
		Если НЕ СтрокаРеквизитовДляКонтроля.ОтображатьПриСоздании Тогда
			
			СтрокаРеквизитовДляКонтроля.ОтображатьПриСоздании = ЭтоОбязательноОтображаемыйРеквизит ИЛИ ЭтоОбязательныйДляЗаполненияРеквизит;
			
		КонецЕсли;
		
		// ... установить флажки управления доступностью настройки реквизитов для контроля номенклатуры.
		СтрокаРеквизитовДляКонтроля.ДоступностьУникален                = Истина;
		СтрокаРеквизитовДляКонтроля.ДоступностьОбязателенДляЗаполнения = Истина;
		СтрокаРеквизитовДляКонтроля.ДоступностьОтображатьПриСоздании   = Истина;
		
		Если ЭтоНеиспользуемыйДляКонтроляРеквизит
			ИЛИ ЭтоНеиспользуемыйДляКонтроляТип 
			ИЛИ ЭтоНедоступныйДляКонтроляЗаполненияРеквизит Тогда
			
			СтрокаРеквизитовДляКонтроля.ДоступностьУникален = Ложь;
			
		КонецЕсли;
		
		Если ЭтоОбязательноОтображаемыйРеквизит ИЛИ ЭтоОбязательныйДляЗаполненияРеквизит Тогда
			
			СтрокаРеквизитовДляКонтроля.ДоступностьОтображатьПриСоздании = Ложь;
			
		КонецЕсли;
		
		Если ЭтоНедоступныйДляКонтроляЗаполненияРеквизит ИЛИ ЭтоОбязательныйДляЗаполненияРеквизит 
			ИЛИ ТипРеквизитаБулево ИЛИ СтрокаРеквизитовДляКонтроля.Уникален Тогда
			
			СтрокаРеквизитовДляКонтроля.ДоступностьОбязателенДляЗаполнения = Ложь;
			
		КонецЕсли;
		
		// Добавить реквизит в таблицу реквизитов для отборов номенклатуры.
		Если НЕ (ЭтоНеиспользуемыйДляОтборовТип ИЛИ ЭтоРеквизитСоставногоТипа ИЛИ ЭтоНеиспользуемыйДляОтборовРеквизит) Тогда
			
			СтрокаРеквизитовДляОтбора = ТаблицаРеквизитовОтбораНоменклатуры.Добавить();
			
			СтрокаРеквизитовДляОтбора.ИмяРеквизита           = ИмяРеквизита;
			СтрокаРеквизитовДляОтбора.ПредставлениеРеквизита = ПредставлениеРеквизита;
			СтрокаРеквизитовДляОтбора.ЭтоДопРеквизит         = Ложь;
			СтрокаРеквизитовДляОтбора.Используется           = (Объект.РеквизитыБыстрогоОтбораНоменклатуры.НайтиСтроки(Отбор).Количество() > 0);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДополнительныеРеквизитыХарактеристик()
	
	МассивНаборовСвойств = Новый Массив;
	МассивНаборовСвойств.Добавить(Объект.НаборСвойствХарактеристик);
	МассивНаборовСвойств.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Наименование  КАК ИмяРеквизита,
	|	ДополнительныеРеквизитыИСведения.Представление КАК ПредставлениеРеквизита,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения   КАК ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.Ссылка        КАК Свойство,
	|	ИСТИНА                                         КАК ЭтоДопРеквизит
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ЛЕВОЕ СОЕДИНеНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО НаборыДополнительныхРеквизитов.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	(Не ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение)
	|	И НаборыДополнительныхРеквизитов.Ссылка В (&НаборСвойств)";
	
	Запрос.УстановитьПараметр("НаборСвойств", МассивНаборовСвойств);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ДополнительныеРеквизитыНоменклатуры()
	
	МассивНаборовСвойств = Новый Массив;
	МассивНаборовСвойств.Добавить(Объект.НаборСвойств);
	МассивНаборовСвойств.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Наименование  КАК ИмяРеквизита,
	|	ДополнительныеРеквизитыИСведения.Представление КАК ПредставлениеРеквизита,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения   КАК ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.Ссылка        КАК Свойство,
	|	ИСТИНА                                         КАК ЭтоДопРеквизит
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ЛЕВОЕ СОЕДИНеНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО НаборыДополнительныхРеквизитов.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	(Не ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение)
	|	И НаборыДополнительныхРеквизитов.Ссылка В (&НаборСвойств)";
	
	Запрос.УстановитьПараметр("НаборСвойств", МассивНаборовСвойств);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатурыПоДопРеквизитам()
	
	ТипыНеИспользуемыеДляКонтроля = НеИспользуемыеДляКонтроляТипы();
	ТипыНеИспользуемыеДляОтборов  = НеИспользуемыеДляОтборовТипы();
	
	СвойстваДляЗаполнения = "Уникален, ОбязателенДляЗаполнения, ОтображатьПриСоздании, 
	                        |ДоступностьУникален, ДоступностьОбязателенДляЗаполнения, ДоступностьОтображатьПриСоздании";
	
	Отбор = Новый Структура("ИмяРеквизита, Свойство, ЭтоДопРеквизит");
	
	УсловияДоступности = УсловияДоступности();
	
	Типы = Новый Массив();
	Типы.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(Типы);
	
	ДополнительныеРеквизитыНоменклатуры = ДополнительныеРеквизитыНоменклатуры();
	
	Для Каждого СтрокаДопРеквизитовСведений Из ДополнительныеРеквизитыНоменклатуры Цикл
		
		ТипЗначения = СтрокаДопРеквизитовСведений.ТипЗначения;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаДопРеквизитовСведений);
		
		ЭтоНеиспользуемыйДляКонтроляТип = (ТипыНеИспользуемыеДляКонтроля.Найти(ТипЗначения) <> Неопределено);
		ЭтоНеиспользуемыйДляОтборовТип  = (ТипыНеИспользуемыеДляОтборов.Найти(ТипЗначения) <> Неопределено);
		ЭтоСоставнойТипЗначения         =  ЭтоСоставнойТипЗначения(ТипЗначения);
		ТипРеквизитаБулево              = (ТипЗначения = ОписаниеТиповБулево);
		
		// Добавить доп.реквизит в таблицу реквизитов номенклатуры.
		СтрокаРеквизитовДляКонтроля = Объект.РеквизитыДляКонтроляНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляКонтроля, СтрокаДопРеквизитовСведений);
		
		// Если реквизит был в таблице реквизитов для контроля, то заполнить свойства по существовашей записи.
		НайденныеСтроки = ТаблицаРеквизитовДляКонтроляНоменклатуры.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляКонтроля, НайденныеСтроки[0], СвойстваДляЗаполнения);
		КонецЕсли;
		
		// ... установить доступность настройки реквизитов для контроля номенклатуры.
		УсловияДоступности.ЭтоДопРеквизит                  = Истина;
		УсловияДоступности.ЭтоНеиспользуемыйДляКонтроляТип = ЭтоНеиспользуемыйДляКонтроляТип;
		УсловияДоступности.ТипРеквизитаБулево              = ТипРеквизитаБулево;
		
		УстановитьДоступностьНастройкиПолейРеквизитаДляКонтроля(СтрокаРеквизитовДляКонтроля, УсловияДоступности);
		
		// Добавить доп. реквизит в таблицу реквизитов отбора номенклатуры.
		Если НЕ (ЭтоНеиспользуемыйДляОтборовТип ИЛИ ЭтоСоставнойТипЗначения) Тогда
			
			СтрокаРеквизитовДляОтбора = ТаблицаРеквизитовОтбораНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляОтбора, СтрокаДопРеквизитовСведений);
			
			НайденныеСтроки = Объект.РеквизитыБыстрогоОтбораНоменклатуры.НайтиСтроки(Отбор);
			СтрокаРеквизитовДляОтбора.Используется = (НайденныеСтроки.Количество() > 0);
			
			Если СтрокаРеквизитовДляОтбора.Используется Тогда
				ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], СтрокаДопРеквизитовСведений, "ИмяРеквизита, ПредставлениеРеквизита");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыДляКэширования()
	
	ТаблицаРеквизитовОтбораНоменклатуры.Очистить();
	ТаблицаРеквизитовДляКонтроляНоменклатуры.Очистить();
	
	ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(Объект.РеквизитыДляКонтроляНоменклатуры, ТаблицаРеквизитовДляКонтроляНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицыОбъекта()
	
	Объект.РеквизитыДляКонтроляНоменклатуры.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатуры()
	
	ЗаполнитьТаблицыДляКэширования();
	
	ОчиститьТаблицыОбъекта();
	
	ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатурыПоРеквизитам();
	
	ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатурыПоДопРеквизитам();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыДляКонтроляИОтбораХарактеристик()
	
	Если НЕ (Объект.ИспользоватьХарактеристики И ЗначениеЗаполнено(Объект.НаборСвойствХарактеристик)) Тогда
		Возврат;
	КонецЕсли;
	
	// Получить правила заполнения для доп.реквизитов.
	ТипыНеИспользуемыеДляКонтроля = НеИспользуемыеДляКонтроляТипы();
	ТипыНеИспользуемыеДляОтборов = НеИспользуемыеДляОтборовТипы();
	
	Отбор = Новый Структура("Свойство, ЭтоДопРеквизит");
	УсловияДоступности = УсловияДоступности();
	
	ТаблицаРеквизитовОтбораХарактеристик.Очистить();
	ТаблицаРеквизитовДляКонтроляХарактеристик = Объект.РеквизитыДляКонтроляХарактеристик.Выгрузить();
	
	Объект.РеквизитыДляКонтроляХарактеристик.Очистить();
	
	// Получить список доп.реквизитов характеристик (набора свойств и общего набора свойств).
	СвойстваДляЗаполнения = "Уникален, ОбязателенДляЗаполнения, ОтображатьПриСоздании, 
	                        |ДоступностьУникален, ДоступностьОбязателенДляЗаполнения, ДоступностьОтображатьПриСоздании";
	
	Типы = Новый Массив();
	Типы.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(Типы);
	
	МассивНаборовСвойств = Новый Массив;
	МассивНаборовСвойств.Добавить(Объект.НаборСвойствХарактеристик);
	МассивНаборовСвойств.Добавить(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаборСвойств", МассивНаборовСвойств);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Наименование КАК ИмяРеквизита,
	|	ДополнительныеРеквизитыИСведения.Представление КАК ПредставлениеРеквизита,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения КАК ТипЗначения,
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство,
	|	ИСТИНА КАК ЭтоДопРеквизит
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО НаборыДополнительныхРеквизитов.Свойство = ДополнительныеРеквизитыИСведения.Ссылка
	|ГДЕ
	|	НЕ ДополнительныеРеквизитыИСведения.ЭтоДополнительноеСведение
	|	И НаборыДополнительныхРеквизитов.Ссылка В(&НаборСвойств)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТипЗначения = Выборка.ТипЗначения;
		
		ЗаполнитьЗначенияСвойств(Отбор, Выборка);
		
		ЭтоНеиспользуемыйДляКонтроляТип = (ТипыНеИспользуемыеДляКонтроля.Найти(ТипЗначения) <> Неопределено);
		ЭтоНеиспользуемыйДляОтборовТип  = (ТипыНеИспользуемыеДляОтборов.Найти(ТипЗначения) <> Неопределено);
		ЭтоСоставнойТипЗначения         =  ЭтоСоставнойТипЗначения(ТипЗначения);
		ТипРеквизитаБулево              = (ТипЗначения = ОписаниеТиповБулево);
		
		// Добавить доп.реквизит в таблицу реквизитов дял контроля характеристик.
		СтрокаРеквизитовДляКонтроля = Объект.РеквизитыДляКонтроляХарактеристик.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляКонтроля, Выборка);
		
		НайденныеСтроки = ТаблицаРеквизитовДляКонтроляХарактеристик.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаТаблицы = НайденныеСтроки[0];
			
			ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляКонтроля, СтрокаТаблицы, СвойстваДляЗаполнения);
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, "ИмяРеквизита, ПредставлениеРеквизита");
			
		КонецЕсли;
		
		// ... установить доступность настройки реквизитов для контроля номенклатуры.
		УсловияДоступности.ЭтоДопРеквизит                  = Истина;
		УсловияДоступности.ЭтоНеиспользуемыйДляКонтроляТип = ЭтоНеиспользуемыйДляКонтроляТип;
		УсловияДоступности.ТипРеквизитаБулево              = ТипРеквизитаБулево;
		
		УстановитьДоступностьНастройкиПолейРеквизитаДляКонтроля(СтрокаРеквизитовДляКонтроля, УсловияДоступности);
		
		// Добавить доп.реквизит в таблицу реквизитов для отбора характеристик.
		Если Не ЭтоНеиспользуемыйДляОтборовТип И Не ЭтоСоставнойТипЗначения Тогда
			
			СтрокаРеквизитовДляОтбора = ТаблицаРеквизитовОтбораХарактеристик.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРеквизитовДляОтбора, Выборка);
			
			МассивИспользуемых = Объект.РеквизитыБыстрогоОтбораХарактеристик.НайтиСтроки(Отбор);
			СтрокаРеквизитовДляОтбора.Используется = (МассивИспользуемых.Количество() > 0);
			
			Если СтрокаРеквизитовДляОтбора.Используется Тогда
				ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], Выборка, "ИмяРеквизита, ПредставлениеРеквизита");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьНастройкиПолейРеквизитаДляКонтроля(СтрокаРеквизитаДляКонтроля, УсловияДоступности)
	
	СтрокаРеквизитаДляКонтроля.ДоступностьУникален                = Истина;
	СтрокаРеквизитаДляКонтроля.ДоступностьОбязателенДляЗаполнения = Истина;
	СтрокаРеквизитаДляКонтроля.ДоступностьОтображатьПриСоздании   = Истина;
	
	Если УсловияДоступности.ЭтоДопРеквизит Тогда
		
		СтрокаРеквизитаДляКонтроля.ДоступностьУникален                = НЕ УсловияДоступности.ЭтоНеиспользуемыйДляКонтроляТип;
		СтрокаРеквизитаДляКонтроля.ДоступностьОбязателенДляЗаполнения = НЕ УсловияДоступности.ТипРеквизитаБулево И НЕ СтрокаРеквизитаДляКонтроля.Уникален;
		СтрокаРеквизитаДляКонтроля.ДоступностьОтображатьПриСоздании   = НЕ СтрокаРеквизитаДляКонтроля.ОбязателенДляЗаполнения;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	Элементы.ИспользованиеХарактеристик.Доступность = Объект.ИспользоватьХарактеристики;
	Элементы.НаборУпаковок.Доступность = Объект.ИспользоватьУпаковки;
	
	УстановитьДоступностьПоШаблону(
		Объект, 
		ЭтаФорма, 
		"ШаблонРабочегоНаименованияНоменклатуры", 
		"ЗапретРедактированияРабочегоНаименованияНоменклатуры"
	);
	
	УстановитьДоступностьПоШаблону(
		Объект, 
		ЭтаФорма, 
		"ШаблонНаименованияДляПечатиНоменклатуры", 
		"ЗапретРедактированияНаименованияНоменклатурыДляПечати"
	);
	
	УстановитьДоступностьПоШаблону(
		Объект, 
		ЭтаФорма, 
		"ШаблонРабочегоНаименованияХарактеристики", 
		"ЗапретРедактированияРабочегоНаименованияХарактеристики"
	);
	
	УстановитьДоступностьПоШаблону(
		Объект, 
		ЭтаФорма, 
		"ШаблонНаименованияДляПечатиХарактеристики", 
		"ЗапретРедактированияНаименованияХарактеристикиДляПечати"
	);
	
	Элементы.НаборУпаковок.Доступность = Объект.ИспользоватьУпаковки;
	Элементы.НаборУпаковок.АвтоОтметкаНезаполненного = Объект.ИспользоватьУпаковки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ЭтоТовар = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	Если ЭтоТовар Или ЭтоМногооборотнаяТара Тогда
		Элементы.СтраницыВариантОформленияПродажиСерии.ТекущаяСтраница = Элементы.СтраницаИспользованиеСерий;
	Иначе
		Элементы.СтраницыВариантОформленияПродажиСерии.ТекущаяСтраница = Элементы.СтраницаВариантОформленияПродажи;
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовУчетаПоХарактеристикам();
	УстановитьВидимостьРеквизитовУчетаПоСериям();
	УстановитьВидимостьРеквизитовУчетаПоУпаковкам();
	УстановитьВидимостьРеквизитовУчетаПоСрокамГодности();
	УстановитьВидимостьРеквизитовУчетаПоСкладскимГруппам();
	УстановитьВидимостьДопРеквизитовСведений();
	УстановитьВидимостьВстроеннойСправки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовУчетаПоХарактеристикам()
	
	ИспользоватьОбщиеХарактеристики = (Объект.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры"));
	
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ИспользованиеХарактеристик", 
		"Видимость", 
		ИспользоватьХарактеристикиНоменклатуры
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ИспользоватьХарактеристики", 
		"Видимость", 
		ИспользоватьХарактеристикиНоменклатуры
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"СтраницаНастройкиХарактеристик", 
		"Видимость", 
		ИспользоватьХарактеристикиНоменклатуры И Объект.ИспользоватьХарактеристики
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"РеквизитыБыстрогоОтбораХарактеристик", 
		"Видимость", 
		ИспользоватьХарактеристикиНоменклатуры И Объект.ИспользоватьХарактеристики
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ТаблицаДопРеквизитовХарактеристик", 
		"Видимость", 
		ИспользоватьХарактеристикиНоменклатуры И Объект.ИспользоватьХарактеристики
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ТаблицаДопСведенийХарактеристик", 
		"Видимость", 
		ИспользоватьХарактеристикиНоменклатуры И Объект.ИспользоватьХарактеристики
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ГруппаНастройкиИспользованияРеквизитовХарактеристик", 
		"Видимость", 
		ИспользоватьХарактеристикиНоменклатуры И Объект.ИспользоватьХарактеристики
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ГруппаШаблоныНаименованийХарактеристик", 
		"Видимость", 
		ИспользоватьХарактеристикиНоменклатуры И Объект.ИспользоватьХарактеристики
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ОбщиеХарактеристики", 
		"Видимость", 
		ИспользоватьХарактеристикиНоменклатуры И ИспользоватьОбщиеХарактеристики И Объект.ИспользоватьХарактеристики
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"НаборСвойствХарактеристикДополнительныеРеквизиты", 
		"Видимость", 
		ИспользоватьХарактеристикиНоменклатуры
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"НаборСвойствХарактеристикДополнительныеСведения", 
		"Видимость", 
		ИспользоватьХарактеристикиНоменклатуры
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"НаборСвойствСерийДополнительныеРеквизиты", 
		"Видимость", 
		ИспользоватьСерииНоменклатуры
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовУчетаПоСериям()
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ИспользоватьНесколькоСкладов", 
		"Видимость", 
		ИспользоватьСерииНоменклатуры И Объект.ИспользоватьСерии И ИспользоватьНесколькоСкладов
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ИспользоватьОдинСклад", 
		"Видимость", 
		ИспользоватьСерииНоменклатуры И Объект.ИспользоватьСерии И Не ИспользоватьНесколькоСкладов
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"НадписьПодсказкаПолитикиУчетаСерийИспользоватьОдинСклад", 
		"Видимость", 
		ИспользоватьСерииНоменклатуры И Объект.ИспользоватьСерии И Не ИспользоватьНесколькоСкладов И Не ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ТаблицаДопРеквизитовСерий", 
		"Видимость", 
		ИспользоватьСерииНоменклатуры И Объект.ИспользоватьСерии
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ТаблицаДопСведенийСерий", 
		"Видимость", 
		ИспользоватьСерииНоменклатуры И Объект.ИспользоватьСерии
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"НастройкаИспользованияСерий", 
		"Видимость", 
		ИспользоватьСерииНоменклатуры И Объект.ИспользоватьСерии
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ГруппаНастройкиВеденияУчетаСерийНаСкладах", 
		"Видимость", 
		ИспользоватьСерииНоменклатуры И Объект.ИспользоватьСерии
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ПолитикиУчетаСерий", 
		"Видимость", 
		ИспользоватьСерииНоменклатуры И Объект.ИспользоватьСерии
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ТочностьУказанияСрокаГодностиСерии", 
		"Видимость", 
		ИспользоватьСерииНоменклатуры И Объект.ИспользоватьСерии
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ШаблонЭтикеткиСерии", 
		"Видимость", 
		ИспользоватьСерииНоменклатуры И Объект.ИспользоватьСерии
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ИспользоватьСерии", 
		"Видимость", 
		ИспользоватьСерииНоменклатуры
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"НаборСвойствСерийДополнительныеСведения", 
		"Видимость", 
		ИспользоватьСерииНоменклатуры
	);
	
	Если НЕ ИспользоватьСерииНоменклатуры Тогда
		
		ЭтоТовар = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
		ЭтоМногооборотнаяТара = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
		
		ВидимостьВариантаОформленияПродажи = Истина;
		
		Если ЭтоТовар Или ЭтоМногооборотнаяТара Тогда
			
			Элементы.СтраницыВариантОформленияПродажиСерии.ТекущаяСтраница = Элементы.СтраницаИспользованиеСерий;
			
			ВидимостьВариантаОформленияПродажи = Ложь;
			
		КонецЕсли;
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, 
			"СтраницаВариантОформленияПродажи", 
			"Видимость", 
			ВидимостьВариантаОформленияПродажи
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовУчетаПоУпаковкам()
	
	ЭтоТовар = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	// Реквизиты для учета по упаковкам.
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ИспользоватьУпаковки", 
		"Видимость", 
		ИспользоватьУпаковкиНоменклатуры И (ЭтоТовар Или ЭтоМногооборотнаяТара)
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"НаборУпаковок", 
		"Видимость", 
		ИспользоватьУпаковкиНоменклатуры И (ЭтоТовар Или ЭтоМногооборотнаяТара)
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовУчетаПоСрокамГодности()
	
	Элементы.СтраницыТочностьУказанияСерий.ТекущаяСтраница = Элементы.СтраницаТочностьУказанияСрокаГодностиПустая;
	
	ИспользоватьСерииСоСрокомГодности = 
	(Объект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваровПоСрокуГодности
	ИЛИ Объект.НастройкаИспользованияСерий = Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваровПоНомеруИСрокуГодности);
	
	Если ИспользоватьСерииСоСрокомГодности Тогда
		Элементы.СтраницыТочностьУказанияСерий.ТекущаяСтраница = Элементы.СтраницаТочностьУказанияСрокаГодности;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДопРеквизитовСведений()
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"СтраницаДопРеквизиты", 
		"Видимость", 
		ИспользоватьДополнительныеРеквизитыИСведения
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"СтраницаДопСведения", 
		"Видимость", 
		ИспользоватьДополнительныеРеквизитыИСведения
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовУчетаПоСкладскимГруппам()
	
	ЭтоТовар = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоМногооборотнаяТара = (Объект.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"СкладскаяГруппа", 
		"Видимость", 
		(ЭтоТовар Или ЭтоМногооборотнаяТара) И ИспользоватьСкладскиеГруппыНоменклатуры
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьВстроеннойСправки()
	
	ЭлементыВстроеннойСправки = ЭлементыВстроеннойСправки();
	
	Для каждого ЭлементСправки Из ЭлементыВстроеннойСправки Цикл
		
		Элементы[ЭлементСправки.ИмяЭлемента].Видимость = ЭлементСправки.Видимость;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЭлементыВстроеннойСправки()
	
	Результат = Новый Массив;
	
	ИмяЭлемента = "НадписьОсновноеОписание";
	Видимость   = ОтображатьВстроеннуюСправку;
	
	Результат.Добавить(Новый Структура("ИмяЭлемента, Видимость", ИмяЭлемента, Видимость));
	
	ИмяЭлемента = "НадписьПодсказкаПоХарактеристикам";
	Видимость   = ОтображатьВстроеннуюСправку И ИспользоватьХарактеристикиНоменклатуры;
	
	Результат.Добавить(Новый Структура("ИмяЭлемента, Видимость", ИмяЭлемента, Видимость));
	
	ИмяЭлемента = "НадписьДопРеквизитыОписание";
	Видимость   = ОтображатьВстроеннуюСправку;
	
	Результат.Добавить(Новый Структура("ИмяЭлемента, Видимость", ИмяЭлемента, Видимость));
	
	ИмяЭлемента = "НадписьПодсказкаПоРабочемуНаименованию";
	Видимость   = ОтображатьВстроеннуюСправку;
	
	Результат.Добавить(Новый Структура("ИмяЭлемента, Видимость", ИмяЭлемента, Видимость));
	
	ИмяЭлемента = "НадписьПодсказкаПоНаименованию";
	Видимость   = ОтображатьВстроеннуюСправку;
	
	Результат.Добавить(Новый Структура("ИмяЭлемента, Видимость", ИмяЭлемента, Видимость));
	
	ИмяЭлемента = "НадписьПодсказкаПоРабочемуНаименованиюХарактеристики";
	Видимость   = ОтображатьВстроеннуюСправку И ИспользоватьХарактеристикиНоменклатуры И Объект.ИспользоватьХарактеристики;
	
	Результат.Добавить(Новый Структура("ИмяЭлемента, Видимость", ИмяЭлемента, Видимость));
	
	ИмяЭлемента = "НадписьПодсказкаПоНаименованиюХарактеристики";
	Видимость   = ОтображатьВстроеннуюСправку И ИспользоватьХарактеристикиНоменклатуры И Объект.ИспользоватьХарактеристики;
	
	Результат.Добавить(Новый Структура("ИмяЭлемента, Видимость", ИмяЭлемента, Видимость));
	
	ИмяЭлемента = "НадписьНастройкиПанелиБыстрогоОтбораОписание";
	Видимость   = ОтображатьВстроеннуюСправку;
	
	Результат.Добавить(Новый Структура("ИмяЭлемента, Видимость", ИмяЭлемента, Видимость));
	
	ИмяЭлемента = "НадписьНастройкиСозданияОписаниеОтображатьПриСоздании";
	Видимость   = ОтображатьВстроеннуюСправку;
	
	Результат.Добавить(Новый Структура("ИмяЭлемента, Видимость", ИмяЭлемента, Видимость));
	
	ИмяЭлемента = "НадписьНастройкиСозданияОписаниеКонтролироватьЗаполнение";
	Видимость   = ОтображатьВстроеннуюСправку;
	
	Результат.Добавить(Новый Структура("ИмяЭлемента, Видимость", ИмяЭлемента, Видимость));
	
	ИмяЭлемента = "НадписьНастройкиСозданияОписаниеКонтролироватьУникальность";
	Видимость   = ОтображатьВстроеннуюСправку И КонтролироватьУникальностьНоменклатурыИХарактеристикПоСочетаниюЗначенийРеквизитов;
	
	Результат.Добавить(Новый Структура("ИмяЭлемента, Видимость", ИмяЭлемента, Видимость));
	
	ИмяЭлемента = "НадписьПодсказкаПоПечати";
	Видимость   = ОтображатьВстроеннуюСправку;
	
	Результат.Добавить(Новый Структура("ИмяЭлемента, Видимость", ИмяЭлемента, Видимость));
	
	ИмяЭлемента = "НадписьПодсказкаПоЗначениямПоУмолчанию";
	Видимость   = ОтображатьВстроеннуюСправку;
	
	Результат.Добавить(Новый Структура("ИмяЭлемента, Видимость", ИмяЭлемента, Видимость));
	
	ИмяЭлемента = "НадписьДопСведенияОписание";
	Видимость   = ОтображатьВстроеннуюСправку;
	
	Результат.Добавить(Новый Структура("ИмяЭлемента, Видимость", ИмяЭлемента, Видимость));
	
	ИмяЭлемента = "НадписьПодсказкаПоСериям";
	Видимость   = ОтображатьВстроеннуюСправку И ИспользоватьСерииНоменклатуры;
	
	Результат.Добавить(Новый Структура("ИмяЭлемента, Видимость", ИмяЭлемента, Видимость));
	
	ИмяЭлемента = "НадписьПодсказкаПолитикиУчетаСерий";
	Видимость   = ОтображатьВстроеннуюСправку И ИспользоватьСерииНоменклатуры;
	
	Результат.Добавить(Новый Структура("ИмяЭлемента, Видимость", ИмяЭлемента, Видимость));
	
	ИмяЭлемента = "НадписьПодсказкаПоПечатиЭтикетокСерий";
	Видимость   = ОтображатьВстроеннуюСправку И ИспользоватьСерииНоменклатуры И Объект.ИспользоватьСерии;
	
	Результат.Добавить(Новый Структура("ИмяЭлемента, Видимость", ИмяЭлемента, Видимость));
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПоШаблону(Объект, Форма, ПолеШаблона, ФлагЗапрета)
	
	Если ЗначениеЗаполнено(Объект[ПолеШаблона]) Тогда
		
		Форма.Элементы[ФлагЗапрета].Доступность = Истина;
		
	Иначе
		
		Объект[ФлагЗапрета] = Ложь;
		Форма.Элементы[ФлагЗапрета].Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ПолучитьЗначенияФункциональныхОпций();
	
	// Сбросить флаг редактирования общих дополнительных реквизитов (сведений).
	РедактируютсяОбщиеРеквизитыСведения = Ложь;
	
	УстановитьЗначенияПоНастройкам();
	ПостроитьДеревоОператоров();
	ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатуры();
	ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатурыПоТипуНоменклатуры();
	ЗаполнитьРеквизитыДляКонтроляИОтбораХарактеристик();
	ЗаполнитьСпискиДопРеквизитовСведений();
	УстановитьВидимость();
	УстановитьДоступность();
	
	// Установить текущую настройку использования серий.
	ТекущаяНастройкаИспользованияСерий = Объект.НастройкаИспользованияСерий;
	
	Если Не ИспользоватьНесколькоСкладов Тогда
		Если Объект.ПолитикиУчетаСерий.Количество() > 0 Тогда
			Склад              = Объект.ПолитикиУчетаСерий[0].Склад;
			ПолитикаУчетаСерий = Объект.ПолитикиУчетаСерий[0].ПолитикаУчетаСерий;
		КонецЕсли;
		Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗначенияФункциональныхОпций()
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьДополнительныеРеквизитыИСведения = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	ИспользоватьСкладскиеГруппыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение", Новый Структура); 
	
	КонтролироватьУникальностьНоменклатурыИХарактеристикПоСочетаниюЗначенийРеквизитов = ПолучитьФункциональнуюОпцию("КонтролироватьУникальностьНоменклатурыИХарактеристикПоСочетаниюЗначенийРеквизитов");
	
КонецПроцедуры

&НаСервере
Процедура ТипНоменклатурыПриИзмененииСервер()
	
	ЭтоТовар = (Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	ЭтоМногооборотнаяТара = (Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	
	Если ЭтоТовар Или ЭтоМногооборотнаяТара Тогда
		Объект.ВариантОформленияПродажи = ПредопределенноеЗначение("Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг");
	Иначе
		Объект.ИспользоватьСерии = Ложь;
	КонецЕсли;
	
	ЗаполнитьРеквизитыДляКонтроляИОтбораНоменклатурыПоТипуНоменклатуры();
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНеКорректныеПолитики()
	
	МассивДопустимыхТиповПолитик = НоменклатураКлиентСервер.ПолучитьМассивДопустимыхТиповПолитикУчетаСерий(Объект);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатурыПолитикиУчетаСерий.НомерСтроки КАК НомерСтроки,
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий,
	|	ВидыНоменклатурыПолитикиУчетаСерий.Склад
	|ПОМЕСТИТЬ ТаблицаПолитик
	|ИЗ
	|	&ТаблицаПолитик КАК ВидыНоменклатурыПолитикиУчетаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПолитик.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПолитик.ПолитикаУчетаСерий,
	|	ТаблицаПолитик.Склад
	|ИЗ
	|	ТаблицаПолитик КАК ТаблицаПолитик
	|ГДЕ
	|	ВЫРАЗИТЬ(ТаблицаПолитик.ПолитикаУчетаСерий КАК Справочник.ПолитикиУчетаСерий).ТипПолитики В (&ТипыПолитик)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ТипыПолитик",МассивДопустимыхТиповПолитик);
	Запрос.УстановитьПараметр("ТаблицаПолитик",Объект.ПолитикиУчетаСерий.Выгрузить());
	
	Объект.ПолитикиУчетаСерий.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьКоллекциюФормыВМассив(КоллекцияФормы)
	
	МассивСтрок = Новый Массив;
	
	Для Каждого СтрокаКоллекцииформы Из КоллекцияФормы Цикл
		
		ПараметрыСтроки = Новый Структура("ИмяРеквизита, ПредставлениеРеквизита, ЭтоДопРеквизит, Свойство, Используется");
		
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаКоллекцииформы);
		МассивСтрок.Добавить(ПараметрыСтроки);
		
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

// Обработчик команды, создаваемой механизмом запрета редактирования ключевых реквизитов.
//
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Результат = ОткрытьФормуМодально("Справочник.ВидыНоменклатуры.Форма.РазблокированиеРеквизитов");
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовНоменклатурыНаСервере()
	
	Для каждого СтрокаТаблицы Из Объект.РеквизитыДляКонтроляНоменклатуры Цикл
		
		Если Не СтрокаТаблицы.ДоступностьОбязателенДляЗаполнения Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаТаблицы.ОбязателенДляЗаполнения Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.ОбязателенДляЗаполнения          = Ложь;
		СтрокаТаблицы.ДоступностьУникален              = Истина;
		СтрокаТаблицы.ДоступностьОтображатьПриСоздании = Истина;
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновНоменклатурыНаСервере();
	ВключитьПроверкуЗаполненияДляРеквизитовБыстрогоОтбораНоменклатурыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаНоменклатурыНаСервере(ШаблонНаименования)
	
	Если Не ЗначениеЗаполнено(ШаблонНаименования) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеРеквизиты = ДополнительныеРеквизитыНоменклатуры();
	
	Типы = Новый Массив();
	Типы.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(Типы);
	
	Отбор = Новый Структура("ИмяРеквизита, Свойство, ЭтоДопРеквизит");
	
	ОперандыТекстовойФормулы = РаботаСФормуламиКлиентСервер.ПолучитьМассивОперандовТекстовойФормулы(ШаблонНаименования);
	
	Для каждого СтрокаТЧ Из Объект.РеквизитыДляКонтроляНоменклатуры Цикл
		
		ИмяРеквизита = СтрокаТЧ.ИмяРеквизита;
		
		РеквизитИспользуетсяВФормуле = (ОперандыТекстовойФормулы.Найти(ИмяРеквизита) <> Неопределено);
		
		Если Не РеквизитИспользуетсяВФормуле Тогда
			Продолжить;
		КонецЕсли;
		
		// Если тип реквизита - Булево, то не включать для него контроль заполнения.
		Если СтрокаТЧ.ЭтоДопРеквизит Тогда
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
			
			НайденныеСтроки = ДополнительныеРеквизиты.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДопРеквизитовСведений = НайденныеСтроки[0];
			
			ТипЗначенияРеквизита = СтрокаДопРеквизитовСведений.ТипЗначения;
			
		Иначе
			
			Реквизит = Метаданные.Справочники.Номенклатура.Реквизиты.Найти(ИмяРеквизита);
			
			Если Реквизит = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЗначенияРеквизита = Реквизит.Тип;
			
		КонецЕсли;
		
		Если ТипЗначенияРеквизита = ОписаниеТиповБулево Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.ОбязателенДляЗаполнения          = Истина;
		СтрокаТЧ.ОтображатьПриСоздании            = Истина;
		СтрокаТЧ.ДоступностьОтображатьПриСоздании = Ложь;
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновНоменклатурыНаСервере()
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаНоменклатурыНаСервере(Объект.ШаблонРабочегоНаименованияНоменклатуры);
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаНоменклатурыНаСервере(Объект.ШаблонНаименованияДляПечатиНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовХарактеристикНаСервере()
	
	Для каждого СтрокаТаблицы Из Объект.РеквизитыДляКонтроляХарактеристик Цикл
		
		Если Не СтрокаТаблицы.ДоступностьОбязателенДляЗаполнения Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаТаблицы.ОбязателенДляЗаполнения Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.ОбязателенДляЗаполнения          = Ложь;
		СтрокаТаблицы.ДоступностьУникален              = Истина;
		СтрокаТаблицы.ДоступностьОтображатьПриСоздании = Истина;
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновХарактеристикНаСервере();
	ВключитьПроверкуЗаполненияДляРеквизитовБыстрогоОтбораХарактеристикНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаХарактеристикНаСервере(ШаблонНаименованияХарактеристики)
	
	Если Не ЗначениеЗаполнено(ШаблонНаименованияХарактеристики) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеРеквизиты = ДополнительныеРеквизитыХарактеристик();
	
	Типы = Новый Массив();
	Типы.Добавить(Тип("Булево"));
	ОписаниеТиповБулево = Новый ОписаниеТипов(Типы);
	
	Отбор = Новый Структура("ИмяРеквизита, Свойство, ЭтоДопРеквизит");
	
	ОперандыТекстовойФормулы = 
	    РаботаСФормуламиКлиентСервер.ПолучитьМассивОперандовТекстовойФормулы(ШаблонНаименованияХарактеристики);
	
	Для каждого СтрокаТЧ Из Объект.РеквизитыДляКонтроляХарактеристик Цикл
		
		ИмяРеквизита = СтрокаТЧ.ИмяРеквизита;
		
		РеквизитИспользуетсяВФормуле = (ОперандыТекстовойФормулы.Найти(СтрокаТЧ.ИмяРеквизита) <> Неопределено);
		
		Если Не РеквизитИспользуетсяВФормуле Тогда
			Продолжить;
		КонецЕсли;
		
		// Если тип реквизита - Булево, то не включать для него контроль заполнения.
		Если СтрокаТЧ.ЭтоДопРеквизит Тогда
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЧ);
			
			НайденныеСтроки = ДополнительныеРеквизиты.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДопРеквизитовСведений = НайденныеСтроки[0];
			
			ТипЗначенияРеквизита = СтрокаДопРеквизитовСведений.ТипЗначения;
			
		Иначе
			
			Реквизит = Метаданные.Справочники.ХарактеристикиНоменклатуры.Реквизиты.Найти(ИмяРеквизита);
			
			Если Реквизит = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипЗначенияРеквизита = Реквизит.Тип;
			
		КонецЕсли;
		
		Если ТипЗначенияРеквизита = ОписаниеТиповБулево Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.ОбязателенДляЗаполнения          = Истина;
		СтрокаТЧ.ОтображатьПриСоздании            = Истина;
		СтрокаТЧ.ДоступностьОтображатьПриСоздании = Ложь;
		
		Модифицированность = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовИзШаблоновХарактеристикНаСервере()
	
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаХарактеристикНаСервере(Объект.ШаблонРабочегоНаименованияХарактеристики);
	ВключитьПроверкуЗаполненияДляРеквизитовИзШаблонаХарактеристикНаСервере(Объект.ШаблонНаименованияДляПечатиХарактеристики);
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовБыстрогоОтбораНоменклатурыНаСервере()
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Для каждого СтрокаТЧ Из Объект.РеквизитыДляКонтроляНоменклатуры Цикл
		
		Отбор.ИмяРеквизита = СтрокаТЧ.ИмяРеквизита;
		
		РеквизитИспользуетсяДляОтбора = (Объект.РеквизитыБыстрогоОтбораНоменклатуры.НайтиСтроки(Отбор).Количество() <> 0);
		
		Если РеквизитИспользуетсяДляОтбора Тогда
			
			СтрокаТЧ.ОбязателенДляЗаполнения          = Истина;
			СтрокаТЧ.ОтображатьПриСоздании            = Истина;
			СтрокаТЧ.ДоступностьОтображатьПриСоздании = Ложь;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьПроверкуЗаполненияДляРеквизитовБыстрогоОтбораХарактеристикНаСервере()
	
	Отбор = Новый Структура("ИмяРеквизита");
	
	Для каждого СтрокаТЧ Из Объект.РеквизитыДляКонтроляХарактеристик Цикл
		
		Отбор.ИмяРеквизита = СтрокаТЧ.ИмяРеквизита;
		
		Если Объект.РеквизитыБыстрогоОтбораХарактеристик.НайтиСтроки(Отбор).Количество() <> 0 Тогда
			
			СтрокаТЧ.ОбязателенДляЗаполнения          = Истина;
			СтрокаТЧ.ОтображатьПриСоздании            = Истина;
			СтрокаТЧ.ДоступностьОтображатьПриСоздании = Ложь;
			
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет, есть ли ссылка дополнительных реквизитов (сведений).
// Если нет, то выводит вопрос с предложением записать элемент. Новые наборы 
// дополнительных реквизитов (сведений) создаются при записи.
//
// Параметры:
//	ТипЭлемента (Строка) - Тип элемента, существование ссылки на набор которого надо проверить.
//	Принимает значения: "ДопСведение", "ДопРеквизит".
//
//	НаборСвойствДопРеквизитов (СправочникСсылка.НаборыДополнительныхРеквизитовИСведений) - Ссылка на элемент-владелец 
//	набора доп.реквизитов (сведений).
//
// Возвращаемое значение:
//	Булево.
//	Возвращается Истина если ссылка на набор заполнена, или была выполнена запись
//	элемента. Ложь - если ссылка не заполнена и был отказ от записи или при записи
//	произошла ошибка.
//
&НаКлиенте
Функция ДопустимоИзменятьСоставДопРеквизитовСведений(ТипЭлемента, НаборСвойствДопРеквизитов)
	
	Если НЕ ЗначениеЗаполнено(НаборСвойствДопРеквизитов) Тогда
		
		Если ТипЭлемента = "ДопРеквизит" Тогда
			
			ТекстВопроса = НСтр("ru = 'Изменение состава дополнительных реквизитов 
			                          |возможно только после записи элемента, записать элемент?'");
			ЗаголовокОкнаВопроса = НСтр("ru = 'Редактирование дополнительных реквизитов'");
			
		ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
			
			ТекстВопроса = НСтр("ru = 'Изменение состава дополнительных сведений 
			                          |возможно только после записи элемента, записать элемент?'");
			ЗаголовокОкнаВопроса = НСтр("ru = 'Редактирование дополнительных сведений'")
			
		КонецЕсли;
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.Отмена, ЗаголовокОкнаВопроса);
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат Ложь;
		Иначе
			Если НЕ Записать() Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УсловияДоступности()
	
	Возврат Новый Структура("ЭтоДопРеквизит, ЭтоНеиспользуемыйДляКонтроляТип, ТипРеквизитаБулево");
	
КонецФункции

&НаСервере
Процедура УстановитьЗначенияПоНастройкам()
	
	ОтображатьВстроеннуюСправку = Истина;
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ВидНоменклатуры_ФормаЭлемента_НастройкиФормы");
	
	Если НЕ (НастройкиФормы = Неопределено) Тогда
		
		Если НастройкиФормы.Свойство("ОтображатьВстроеннуюСправку") Тогда
			ОтображатьВстроеннуюСправку = НастройкиФормы.ОтображатьВстроеннуюСправку;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ФормаОтобразитьСкрытьВстроеннуюСправку.Пометка = ОтображатьВстроеннуюСправку;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокНадписиСтраницы()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНастройкиСоздания Тогда
		
		ЗаголовокНадписиСтраницы = НСтр("ru = 'Настройки создания номенклатуры'");
		
		Если ИспользоватьХарактеристикиНоменклатуры И Объект.ИспользоватьХарактеристики Тогда
			ЗаголовокНадписиСтраницы = НСтр("ru = 'Настройки создания номенклатуры и характеристик'");
		КонецЕсли;
		
		Элементы.НадписьНастройкиСоздания.Заголовок = ЗаголовокНадписиСтраницы;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьХарактеристикиПриИзмененииНаСервере()
	
	Элементы.ИспользованиеХарактеристик.Доступность = Объект.ИспользоватьХарактеристики;
	
	Если НЕ Объект.ИспользоватьХарактеристики Тогда
		
		Объект.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать");
		
		Объект.ШаблонНаименованияДляПечатиХарактеристики = "";
		Объект.ШаблонРабочегоНаименованияХарактеристики  = "";
		
		Объект.ЗапретРедактированияНаименованияХарактеристикиДляПечати = Ложь;
		Объект.ЗапретРедактированияРабочегоНаименованияХарактеристики  = Ложь;
		
	Иначе
		
		Объект.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры");
		Объект.ШаблонНаименованияДляПечатиХарактеристики = "[Наименование]";
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			ТолькоОбщие = Истина;
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопРеквизитовХарактеристик, 
				Объект.НаборСвойствХарактеристик, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие,
				"Реквизиты",
				ТолькоОбщие
			);
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопСведенийХарактеристик, 
				Объект.НаборСвойствХарактеристик, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры_Общие,
				"Сведения",
				ТолькоОбщие
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьСерииПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Объект.ИспользоватьСерии Тогда
			
			ТолькоОбщие = Истина;
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопРеквизитовСерий, 
				Объект.НаборСвойствСерий, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие,
				"Реквизиты",
				ТолькоОбщие
			);
			
			ЗаполнитьСписокСвойствДопРеквизитовТаблицы(
				ТаблицаДопСведенийСерий, 
				Объект.НаборСвойствСерий, 
				Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_СерииНоменклатуры_Общие,
				"Сведения",
				ТолькоОбщие
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры
