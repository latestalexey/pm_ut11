////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НеОтображатьНулевыеПоказатели = Элементы.УстановитьОтображениеНулевыхПоказателей.Пометка;
	
	СформироватьДеревоПоказателей();
	
	ДобавляемыеРеквизиты = ПолучитьМассивДобавляемыхРеквизитов();
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	СоздатьЭлементыФормы();
	Пользователь = Пользователи.ТекущийПользователь();
	СформироватьПоказатели();
	УстановитьОтображениеЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НастройкаОтображенияНулевых = Настройки.Получить("НеОтображатьНулевыеПоказатели");
	Если НастройкаОтображенияНулевых <> Неопределено Тогда
		НеОтображатьНулевыеПоказатели = НастройкаОтображенияНулевых;
	КонецЕсли;
	
	Элементы.УстановитьОтображениеНулевыхПоказателей.Пометка = НеОтображатьНулевыеПоказатели;
	
	УстановитьОтображениеЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекущиеДелаКлиентПереопределяемый.ОбработатьПоказателиПослеЗаполненияЗначений(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	ТекущиеДелаКлиентПереопределяемый.ОбработатьПоказателиПередЗаполнениемЗначений(ЭтаФорма);
	ОбновитьДанныеНаСервере();
	ТекущиеДелаКлиентПереопределяемый.ОбработатьПоказателиПослеЗаполненияЗначений(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображениеНулевыхПоказателей(Команда)
	
	НеОтображатьНулевыеПоказатели = НЕ НеОтображатьНулевыеПоказатели;
	Элементы.УстановитьОтображениеНулевыхПоказателей.Пометка = НеОтображатьНулевыеПоказатели;
	УстановитьОтображениеЭлементов();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ

&НаКлиенте
Процедура Подключаемый_ОбработатьНажатиеПоказателя(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьНажатиеПоказателя(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьВыборТабличногоПоказателя(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьВыборТабличногоПоказателя(Элемент, ВыбраннаяСтрока, Поле);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет обработку нажатия гиперссылки показателя в форме
//
// Параметры:
//  ИмяПоказателя - Имя показателя, для которого требуется обработать нажатие
//
&НаКлиенте
Процедура ОбработатьНажатиеПоказателя(ИмяПоказателя)

	Группа = Элементы[ИмяПоказателя].Родитель;
	
	Если Группа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДереваПоказателей = ТекущиеДелаКлиент.ПолучитьСтрокуДереваПоказателей(ДеревоПоказателей, ИмяПоказателя, Группа.Имя);
	
	Если СтрокаДереваПоказателей.Вид = 1 Тогда
		
		// Табличный показатель
		СтруктураПараметров = Новый Структура();
		
		СтруктураПараметров.Вставить("Заголовок", 	  Группа.Заголовок);
		СтруктураПараметров.Вставить("Группа", 		  Группа.Имя);
		СтруктураПараметров.Вставить("Показатель", 	  ИмяПоказателя);
		СтруктураПараметров.Вставить("ПоляТаблицы",   СтрокаДереваПоказателей["ПоляТаблицы"]);
		СтруктураПараметров.Вставить("ДанныеТаблицы", СтрокаДереваПоказателей["ДанныеТаблицы"]);
		
		ОткрытьФормуМодально("ОбщаяФорма.ВыборПоказателяТекущихДелИзТаблицы", СтруктураПараметров);
	
	Иначе
		
		// Обычный показатель
		СтруктураПараметров = ТекущиеДелаКлиент.ПолучитьСтруктуруПараметровФормы(ИмяПоказателя);
		ИмяОткрываемойФормы = ТекущиеДелаКлиент.ПолучитьИмяФормы(ИмяПоказателя, Группа.Имя);
		
		Если ИмяОткрываемойФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОткрытьФорму(ИмяОткрываемойФормы, СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку выбора для табличного показателя в форме
//
// Параметры:
//  Элемент - таблица-показатель, для которого требуется обработать выбор
//  СтрокаТаблицы - выбранная строка таблицы
//  КолонкаТаблицы - выбранная колонка таблицы
//
&НаКлиенте
Процедура ОбработатьВыборТабличногоПоказателя(Элемент, СтрокаТаблицы, КолонкаТаблицы)

	ИмяПоказателя = Элемент.Имя;
	Группа 		  = Элементы[ИмяПоказателя].Родитель;
	
	Если Группа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтрокиТаблицы = Элемент.ДанныеСтроки(СтрокаТаблицы);
	
	СтруктураПараметров = ТекущиеДелаКлиент.ПолучитьСтруктуруПараметровФормы(ИмяПоказателя, ДанныеСтрокиТаблицы);
	ИмяОткрываемойФормы = ТекущиеДелаКлиент.ПолучитьИмяФормы(ИмяПоказателя, Группа.Имя);
	
	Если ИмяОткрываемойФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ИмяОткрываемойФормы, СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере()
	
	СформироватьПоказатели();
	УстановитьОтображениеЭлементов();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом показателей.

// Формирует дерево показателей
//
&НаСервере
Процедура СформироватьДеревоПоказателей()
	
	ОбъектДерево = РеквизитФормыВЗначение("ДеревоПоказателей");
	
	ТекущиеДелаПереопределяемый.ДобавитьСтрокиГруппПоказателей(ОбъектДерево);
	
	Для Каждого СтрокаГруппы Из ОбъектДерево.Строки Цикл
		ТекущиеДелаПереопределяемый.ДобавитьСтрокиПоказателей(СтрокаГруппы);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ОбъектДерево, "ДеревоПоказателей");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Формирование элементов формы.

// Выполняет создание элементов формы на основании данных дерева показателей
//
&НаСервере
Процедура СоздатьЭлементыФормы()
		
	ЭлементыДереваПоказателей = ДеревоПоказателей.ПолучитьЭлементы();
	
	Для Каждого СтрокаГруппы из ЭлементыДереваПоказателей Цикл
		
		ГруппаЭлементовФормы = СоздатьГруппуПоказателей(СтрокаГруппы.Показатель, СтрокаГруппы.Заголовок);
		
		Показатели = СтрокаГруппы.ПолучитьЭлементы();
		
		Для Каждого СтрокаПоказателя из Показатели Цикл
			СоздатьЭлементПоказателя(СтрокаПоказателя, ГруппаЭлементовФормы);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает группу формы, объединяющую ряд показателей, касающихся одного объекта
//
// Параметры:
//  ИмяГруппы - имя создаваемой группы
//  Заголовок - заголовок создаваемой группы
//
// Возвращаемое значение:
//  Группа - созданная группа формы
//
&НаСервере
Функция СоздатьГруппуПоказателей(ИмяГруппы, Заголовок)
	
	Группа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"));
	Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	Группа.Отображение = ОтображениеОбычнойГруппы.Отступ;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Группа.ОтображатьЗаголовок = Истина;
	Группа.Заголовок = Заголовок;
	Группа.ШрифтЗаголовка = Новый Шрифт(,, Истина);
	
	Возврат Группа;
	
КонецФункции

// Создает элемент, отображающий конкретный показатель
//
// Параметры:
//  СтрокаПоказателя - элемент дерева показателей
//  ГруппаРодитель - группа формы, к которой относится создаваемая группа
//
&НаСервере
Процедура СоздатьЭлементПоказателя(СтрокаПоказателя, ГруппаРодитель)

	Если СтрокаПоказателя.Вид = 1 И СтрокаПоказателя.ОтображатьВВидеТаблицы Тогда
		
		Элемент = Элементы.Добавить(СтрокаПоказателя.Показатель, Тип("ТаблицаФормы"), ГруппаРодитель);
		Элемент.ПутьКДанным = СтрокаПоказателя.Показатель;
		Элемент.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		Элемент.ТолькоПросмотр = Истина;
		Элемент.РастягиватьПоВертикали = Ложь;
		
		Для Каждого ЭлементДанных из СтрокаПоказателя.ПоляТаблицы Цикл
			ИмяПоляТаблицы = СтрокаПоказателя.Показатель + ЭлементДанных.Представление;
			ЭлементТаблицы = Элементы.Добавить(ИмяПоляТаблицы, Тип("ПолеФормы"), Элемент);
			ЭлементТаблицы.ПутьКДанным = СтрокаПоказателя.Показатель + "." + ЭлементДанных.Представление;
			
			СтруктураОписанияПоля = ЭлементДанных.Значение;
			Если ЗначениеЗаполнено(СтруктураОписанияПоля.Заголовок) Тогда
				ЭлементТаблицы.Заголовок = СтруктураОписанияПоля.Заголовок;
			КонецЕсли;
			
		КонецЦикла;
		
		Элемент.УстановитьДействие("Выбор", "Подключаемый_ОбработатьВыборТабличногоПоказателя");
		
	Иначе
		Элемент = Элементы.Добавить(СтрокаПоказателя.Показатель, Тип("ПолеФормы"), ГруппаРодитель);
		Элемент.Вид = ВидПоляФормы.ПолеНадписи;
		Элемент.ПутьКДанным = СтрокаПоказателя.Показатель;
		Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		Элемент.Гиперссылка = Истина;
		
		Если СтрокаПоказателя.ВыделятьЦветом Тогда
			Элемент.ЦветТекста = WebЦвета.Кирпичный;
		Иначе
			Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
		КонецЕсли;
		
		Элемент.УстановитьДействие("Нажатие", "Подключаемый_ОбработатьНажатиеПоказателя");
		
	КонецЕсли;
	
	Элемент.Заголовок = СтрокаПоказателя.Заголовок;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.РастягиватьПоГоризонтали = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивДобавляемыхРеквизитов()
	
	Массив = Новый Массив();
	
	ГруппыПоказателей = ДеревоПоказателей.ПолучитьЭлементы();
	Для Каждого Группа из ГруппыПоказателей Цикл
		
		СтрокиПоказателей = Группа.ПолучитьЭлементы();
		Для Каждого СтрокаПоказателя из СтрокиПоказателей Цикл
			
			Массив.Добавить(СоздатьРеквизитФормы(СтрокаПоказателя.Показатель,,СтрокаПоказателя.Вид, СтрокаПоказателя.ОтображатьВВидеТаблицы));
			
			Если СтрокаПоказателя.Вид = 1 И СтрокаПоказателя.ОтображатьВВидеТаблицы Тогда
				// Добавляем поля колонки таблицы
				Для Каждого ЭлементДанных из СтрокаПоказателя.ПоляТаблицы Цикл
					СтруктураОписанияПоля = ЭлементДанных.Значение;
					Массив.Добавить(Новый РеквизитФормы(ЭлементДанных.Представление, СтруктураОписанияПоля.ОписаниеТипов, СтрокаПоказателя.Показатель));
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Функция СоздатьРеквизитФормы(ИмяРеквизита, Синоним="", Вид, ОтображатьВВидеТаблицы)
	
	Если Вид = 1 И ОтображатьВВидеТаблицы Тогда
		ОписаниеТипов = Новый ОписаниеТипов("ТаблицаЗначений");
	Иначе
		ОписаниеТипов = Новый ОписаниеТипов("Строка");
	КонецЕсли;
	
	Реквизит = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипов,,Синоним);
	
	Возврат Реквизит;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗначенияРеквизитов()

	МассивРеквизитов = ПолучитьРеквизиты();
	
	ДеревоЗначенийПоказателей = РеквизитФормыВЗначение("ДеревоПоказателей");
	
	Для Каждого Реквизит Из МассивРеквизитов Цикл
		
		СтрокаПоказателя = ДеревоЗначенийПоказателей.Строки.Найти(Реквизит.Имя, "Показатель", Истина);
		
		Если СтрокаПоказателя <>Неопределено Тогда
			
			Если ТипЗнч(Элементы[Реквизит.Имя]) = Тип("ТаблицаФормы") Тогда
				ЗначениеВРеквизитФормы(ПолучитьТаблицуДанныхПоказателя(Реквизит.Имя, СтрокаПоказателя), Реквизит.Имя);
			ИначеЕсли НЕ ЗначениеЗаполнено(Реквизит.Путь) Тогда
				Если СтрокаПоказателя.Вид=1 И НЕ СтрокаПоказателя.ОтображатьВВидеТаблицы Тогда
					ЭтаФорма[Реквизит.Имя] = ПолучитьЗначениеРеквизитаДляТабличногоПоказателя(СтрокаПоказателя);
				Иначе
					ЭтаФорма[Реквизит.Имя] = СтрокаПоказателя.Заголовок + " (" + СтрокаПоказателя.Значение + ")";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеРеквизитаДляТабличногоПоказателя(СтрокаПоказателя)
	
	ТаблицаДанных = ПолучитьТаблицуДанныхПоказателя(СтрокаПоказателя.Показатель, СтрокаПоказателя);
	ЗначениеПоказателя = ТаблицаДанных.Итог("ЗначениеПоказателя");
	
	Возврат СтрокаПоказателя.Заголовок + " (" + ЗначениеПоказателя + ")";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с показателями.

// Выполняет расчет значений показателей
//
&НаСервере
Процедура РассчитатьЗначенияПоказателей()
	
	ДеревоЗначенийПоказателей = РеквизитФормыВЗначение("ДеревоПоказателей");
	
	МассивГрупп = Новый Массив;
	
	Для Каждого СтрокаГруппы из ДеревоЗначенийПоказателей.Строки Цикл
		Если СтрокаГруппы.Отображать И ТекущиеДелаПереопределяемый.ГруппаПоказателейДоступна(СтрокаГруппы.Показатель) Тогда
			МассивГрупп.Добавить(СтрокаГруппы.Показатель);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанных = ПолучитьСтруктуруРассчитанныхДанных(МассивГрупп);
	
	Для Каждого Группа из МассивГрупп Цикл
		СтруктураПоказателейГруппы = СтруктураДанных[Группа];
		ЗанестиПоказателиВДерево(СтруктураПоказателейГруппы, ДеревоЗначенийПоказателей);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначенийПоказателей, "ДеревоПоказателей");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидПоказателя(Знач Показатель)
	
	ЭлементыДереваПоказателей = ДеревоПоказателей.ПолучитьЭлементы();
	
	Для Каждого Элемент из ЭлементыДереваПоказателей Цикл
		Если Элемент.Показатель = Показатель Тогда
			Возврат Элемент.Вид;
		КонецЕсли;
	КонецЦикла;
		
	Возврат 0;
	
КонецФункции

// Заносит значения показателей в дерево показателей
//
// Параметры:
//  СтруктураПоказателей - структура, содержащая рассчитанные значения показателей
//  ДеревоЗначенийПоказателей - дерево показателей
//
&НаСервере
Процедура ЗанестиПоказателиВДерево(СтруктураПоказателей, ДеревоЗначенийПоказателей)

	Для Каждого Элемент из СтруктураПоказателей Цикл
		
		СтрокаДерева = ДеревоЗначенийПоказателей.Строки.Найти(Элемент.Ключ, "Показатель", Истина);
		
		Если СтрокаДерева <> Неопределено Тогда
			Если СтрокаДерева.Вид = 1 Тогда
				// Для табличного показателя в значение заносим количество строк таблицы
				СтрокаДерева.ДанныеТаблицы = ПолучитьСписокИзТаблицыДанных(Элемент.Значение);
				СтрокаДерева.Значение = СтрокаДерева.ДанныеТаблицы.Количество();
			Иначе
				СтрокаДерева.Значение = Элемент.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуДанныхПоказателя(ИмяРеквизита, СтрокаПоказателя)
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	
	СписокПолей = СтрокаПоказателя.ПоляТаблицы;
	Для Каждого ЭлементСписка из СписокПолей Цикл
		ТаблицаЗначений.Колонки.Добавить(ЭлементСписка.Представление);
	КонецЦикла;
	
	ДанныеТаблицы = СтрокаПоказателя.ДанныеТаблицы;
	
	Для Каждого ЭлементДанных из ДанныеТаблицы Цикл
		
		СтруктураЗначения = ЭлементДанных.Значение;
		НоваяСтрока = ТаблицаЗначений.Добавить();
		
		Для Каждого ЭлементСтруктуры из СтруктураЗначения Цикл
			НоваяСтрока[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокИзТаблицыДанных(ТаблицаЗначений)
	
	СписокЗначений = Новый СписокЗначений();
	
	Для Каждого СтрокаТаблицы из ТаблицаЗначений Цикл
		
		СтруктураЗначенийПолей = Новый Структура();
		Для Каждого Колонка из ТаблицаЗначений.Колонки Цикл
			СтруктураЗначенийПолей.Вставить(Колонка.Имя,СтрокаТаблицы[Колонка.Имя]);
		КонецЦикла;
			
		СписокЗначений.Добавить(СтруктураЗначенийПолей);
	КонецЦикла;
	
	Возврат СписокЗначений;
	
КонецФункции

// Выполняет формирование показателей и управляет отображением показателей
//
&НаСервере
Процедура СформироватьПоказатели()
	
	РассчитатьЗначенияПоказателей();
	ЗаполнитьЗначенияРеквизитов();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Отображение показателей.

// Управляет Отображение элементов формы, исходя из настроек, заданных пользователем
// и доступности показателей для пользователя с точки зрения прав
//
&НаСервере
Процедура УстановитьОтображениеЭлементов()
	
	ДеревоЗначенийПоказателей = РеквизитФормыВЗначение("ДеревоПоказателей", Тип("ДеревоЗначений"));
	
	ЭлементыДереваПоказателей = ДеревоПоказателей.ПолучитьЭлементы();
	
	Для Каждого ЭлементДерева из ЭлементыДереваПоказателей Цикл
		// Установка видимости групп элементов формы
		Группа = Элементы[ЭлементДерева.Показатель];
		Группа.Видимость = ЭлементДерева.Отображать	И ТекущиеДелаПереопределяемый.ГруппаПоказателейДоступна(Группа.Имя);
		
		// Установка видимости конечных показателей
		КонечныеПоказатели = ЭлементДерева.ПолучитьЭлементы();
		Для Каждого КонечныйПоказатель из КонечныеПоказатели Цикл
			
			ДоступностьПоказателя = ТекущиеДелаПереопределяемый.ПоказательДоступен(КонечныйПоказатель.Показатель, Группа.Имя);
			ОтображениеПоЗначению = КонечныйПоказатель.Значение<>0 ИЛИ НЕ НеОтображатьНулевыеПоказатели;
			Элементы[КонечныйПоказатель.Показатель].Видимость = ДоступностьПоказателя.Видимость И ОтображениеПоЗначению;
			
			Если КонечныйПоказатель.Вид = 1 И КонечныйПоказатель.ОтображатьВВидеТаблицы И Элементы[КонечныйПоказатель.Показатель].Видимость Тогда
				УстановитьВысотуТаблицы(КонечныйПоказатель);
			Конецесли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВысотуТаблицы(СтрокаПоказателя)
	
	Если СтрокаПоказателя.Значение = 0 Тогда
		Элементы[СтрокаПоказателя.Показатель].ВысотаВСтрокахТаблицы = 1;
	ИначеЕсли СтрокаПоказателя.Значение <= 4 Тогда
		Элементы[СтрокаПоказателя.Показатель].ВысотаВСтрокахТаблицы = СтрокаПоказателя.Значение;
	Иначе 
		Элементы[СтрокаПоказателя.Показатель].ВысотаВСтрокахТаблицы = 0;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Расчет показателей.

&НаСервере
Функция ПолучитьСтруктуруРассчитанныхДанных(МассивГрупп)
	
	СтруктураРассчитанныхДанных = Новый Структура;
	
	ИтоговыйТекстЗапроса = "";
	Для Каждого Группа из МассивГрупп Цикл
		
		ТекстЗапроса = ТекущиеДелаПереопределяемый.ПолучитьТекстаЗапросаДляРасчетаПоказателейГруппы(Группа);
		
		Если ТекстЗапроса <> "" Тогда
			ИтоговыйТекстЗапроса = ИтоговыйТекстЗапроса + ТекстЗапроса + ";";
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИтоговыйТекстЗапроса = "" Тогда
		Возврат СтруктураРассчитанныхДанных;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ИтоговыйТекстЗапроса;
	
	ТекущиеДелаПереопределяемый.УстановитьПараметрыЗапроса(Запрос, МассивГрупп);
	
	СтруктураПоказателейГрупп = ПолучитьСтруктуруПоказателейГрупп(МассивГрупп);
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	Индекс = 0;
	Для Каждого Группа из МассивГрупп Цикл
		
		РезультатЗапроса = МассивРезультатовЗапроса[Индекс];
		
		СтруктураПоказателейГруппы = СтруктураПоказателейГрупп[Группа];
		
		Вид = ПолучитьВидПоказателя(Группа);
		
		Если Вид = 1 Тогда
			
			Для Каждого ЭлементСтруктуры из СтруктураПоказателейГруппы Цикл
				
				ТаблицаПоказателя = РезультатЗапроса.Выгрузить();
				ТекущиеДелаПереопределяемый.ОбработатьТаблицуПоказателяПередПомещениемВДерево(ЭлементСтруктуры.Ключ, ТаблицаПоказателя);
				СтруктураПоказателейГруппы.Вставить(ЭлементСтруктуры.Ключ, ТаблицаПоказателя);
				
			КонецЦикла;
		Иначе
			
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(СтруктураПоказателейГруппы, Выборка);
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураРассчитанныхДанных.Вставить(Группа, СтруктураПоказателейГруппы);
		
		Индекс = Индекс+1;
		
	КонецЦикла;
	
	Возврат СтруктураРассчитанныхДанных;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПоказателейГрупп(МассивГрупп)
	
	СтруктураПоказателейГрупп = Новый Структура();
	
	Для Каждого Группа из МассивГрупп Цикл
		СтруктураПоказателейГруппы = ПолучитьСтруктуруПоказателейДляГруппы(Группа);
		СтруктураПоказателейГрупп.Вставить(Группа, СтруктураПоказателейГруппы);
	КонецЦикла;
	
	Возврат СтруктураПоказателейГрупп;
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруПоказателейДляГруппы(Группа)
	
	СтруктураПоказателей = Новый Структура();
	
	ДеревоЗначенийПоказателей = РеквизитФормыВЗначение("ДеревоПоказателей");
	
	СтрокаГруппы = ДеревоЗначенийПоказателей.Строки.Найти(Группа, "Показатель");
	
	Если СтрокаГруппы <> Неопределено Тогда
		Для Каждого СтрокаПоказателя из СтрокаГруппы.Строки Цикл
			Если СтрокаПоказателя.Вид = 1 Тогда
				СтруктураПоказателей.Вставить(СтрокаПоказателя.Показатель, Новый ТаблицаЗначений());
			Иначе
				СтруктураПоказателей.Вставить(СтрокаПоказателя.Показатель, 0);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураПоказателей;
	
КонецФункции
