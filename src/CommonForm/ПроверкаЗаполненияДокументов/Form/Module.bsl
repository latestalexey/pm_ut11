&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ОбработкаЗакрытия;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	НеИспользоватьУпаковки = Параметры.НеИспользоватьУпаковки;
	
	ПревышениеКоличестваТоваровРазрешено = Параметры.ПревышениеКоличестваТоваровРазрешено;
	ОтклонениеЗапрещено = Параметры.ОтклонениеЗапрещено;
	
	АдресВоВременномХранилище = Параметры.АдресВоВременномХранилище;
	
	Товары.Загрузить(ПолучитьИзВременногоХранилища(АдресВоВременномХранилище));
	
	Если НеИспользоватьУпаковки Тогда
		Элементы.Упаковка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу значений с колонками Номенклатура, Характеристика
//
// Возвращаемое значение:
// ТаблицаЗначений
//
&НаСервереБезКонтекста
Функция СоздатьПустуюТаблицуНоменклатуры()
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	
	ТаблицаЗначений.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗначений.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаЗначений.Колонки.Добавить("ХарактеристикиИспользуются",  Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаЗначений.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция ЗакончитьПроверкуНаСервере()
	
	МассивСтрокНовыеТовары = Новый Массив;
	МассивСтрокНедостачи   = Новый Массив;
	МассивСтрокИзлишки     = Новый Массив;
	Для Каждого СтрокаТЧ Из Товары Цикл
		Если СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковокФакт Тогда
			// Нет расхождений
		ИначеЕсли СтрокаТЧ.КоличествоУпаковок = 0 И СтрокаТЧ.КоличествоУпаковокФакт > 0 Тогда
			// Новый товар
			МассивСтрокНовыеТовары.Добавить(СтрокаТЧ);
		ИначеЕсли СтрокаТЧ.КоличествоУпаковок > СтрокаТЧ.КоличествоУпаковокФакт Тогда
			// Недостача
			МассивСтрокНедостачи.Добавить(СтрокаТЧ);
		ИначеЕсли СтрокаТЧ.КоличествоУпаковок < СтрокаТЧ.КоличествоУпаковокФакт Тогда
			// Излишек
			МассивСтрокИзлишки.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТовары = СоздатьПустуюТаблицуНоменклатуры();
	Если ПревышениеКоличестваТоваровРазрешено Тогда
		Для Каждого СтрокаТЧ Из МассивСтрокНовыеТовары Цикл
			НоваяСтрока = ТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, , "КоличествоУпаковок");
			НоваяСтрока.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковокФакт - СтрокаТЧ.КоличествоУпаковок;
		КонецЦикла;
		Для Каждого СтрокаТЧ Из МассивСтрокИзлишки Цикл
			НоваяСтрока = ТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, , "КоличествоУпаковок");
			НоваяСтрока.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковокФакт - СтрокаТЧ.КоличествоУпаковок;
		КонецЦикла;
	КонецЕсли;
	Для Каждого СтрокаТЧ Из МассивСтрокНедостачи Цикл
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ, , "КоличествоУпаковок");
		НоваяСтрока.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковокФакт - СтрокаТЧ.КоличествоУпаковок;
	КонецЦикла;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТаблицаТовары, АдресВоВременномХранилище);
	
	ПараметрыЗакрытия = новый Структура;
	ПараметрыЗакрытия.Вставить("Товары", АдресВоВременномХранилище);
	
	Возврат ПараметрыЗакрытия;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПроверку(Команда)
	
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	МассивСтрокНовыеТовары = Новый Массив;
	МассивСтрокНедостачи   = Новый Массив;
	МассивСтрокИзлишки     = Новый Массив;
	Для Каждого СтрокаТЧ Из Товары Цикл
		Если СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.КоличествоУпаковокФакт Тогда
			// Нет расхождений
		ИначеЕсли СтрокаТЧ.КоличествоУпаковок = 0 И СтрокаТЧ.КоличествоУпаковокФакт > 0 Тогда
			// Новый товар
			МассивСтрокНовыеТовары.Добавить(СтрокаТЧ);
		ИначеЕсли СтрокаТЧ.КоличествоУпаковок > СтрокаТЧ.КоличествоУпаковокФакт Тогда
			// Недостача
			МассивСтрокНедостачи.Добавить(СтрокаТЧ);
		ИначеЕсли СтрокаТЧ.КоличествоУпаковок < СтрокаТЧ.КоличествоУпаковокФакт Тогда
			// Излишек
			МассивСтрокИзлишки.Добавить(СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
	Если    МассивСтрокНовыеТовары.Количество() > 0
		ИЛИ МассивСтрокНедостачи.Количество()   > 0
		ИЛИ МассивСтрокИзлишки.Количество()     > 0 Тогда
		
		Если ОтклонениеЗапрещено Тогда
			ТекстПредупреждения = НСтр("ru='Обнаружены расхождения между количеством товаров в документе и результатом проверки.
			                               |В данном документе расхождения запрещены.'");
			Предупреждение(ТекстПредупреждения);
			Возврат;
		КонецЕсли;
		
		Если ПревышениеКоличестваТоваровРазрешено ИЛИ (МассивСтрокИзлишки.Количество() = 0 И МассивСтрокНовыеТовары.Количество() = 0) Тогда
			ТекстВопроса = НСтр("ru='Обнаружены расхождения между количеством товаров в документе и результатом проверки.
			                        |Перенести расхождения в документ?'");
			РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
			Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
				Возврат;
			КонецЕсли;
		Иначе
			ТекстВопроса = НСтр("ru='Обнаружены расхождения между количеством товаров в документе и результатом проверки.
			                        |Отложите в сторону товары (излишки), по которым фактическое количество превышает количество по документу'");
			РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОК);
			Возврат;
		КонецЕсли;
		
		ОбработкаЗакрытия = Истина;
		Закрыть(ЗакончитьПроверкуНаСервере());
	
	Иначе
		ОбработкаЗакрытия = Истина;
		Закрыть(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	ОбработкаЗакрытия = Ложь;
	ТекущийЭлемент = Элементы.Номенклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = Неопределено;
	СтруктураДействий.РегистрироватьНовыеШтрихКоды           = Ложь;
	СтруктураДействий.ИмяКолонкиКоличество                   = "КоличествоУпаковокФакт";
	СтруктураДействий.НеИспользоватьУпаковки                 = НеИспользоватьУпаковки;
	СтруктураДействий.БлокироватьДанныеФормы                 = Ложь;

	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
КонецПроцедуры // ОбработатьШтрихкоды()

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,ЭтаФорма,СтруктураПараметровДействия,КэшированныеЗначения);
КонецПроцедуры

// Процедура - обработчик события Действие команды ПолучитьВес
//
&НаКлиенте
Процедура ПолучитьВес(Команда)
	Перем ТекущаяСтрока;
	
	ВесНоменклатуры = МенеджерОборудованияКлиент.ПолучитьДанныеИзВесов(ЭтаФорма, ТекущаяСтрока);
	
	Если ВесНоменклатуры <> Неопределено Тогда
		
		ТекущаяСтрока.КоличествоУпаковокФакт = ВесНоменклатуры;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьВес()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда, Отказ = Ложь)
	
	ОбработкаЗакрытия = Истина;
	Закрыть(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ОбработкаЗакрытия Тогда
		
		Если ОтклонениеЗапрещено Тогда
			Отмена(Неопределено, Отказ);
		Иначе
			ОтветНаВопрос = Вопрос(НСтр("ru = 'Завершить проверку без переноса расхождений в документ?'"), РежимДиалогаВопрос.ДаНет);
			Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
				Отмена(Неопределено, Отказ);
			Иначе
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик команды "ПоискПоШтрихкоду".
//
&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить()
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкодуВыполнить()

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Отказ = Истина;
	ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	ОчиститьСообщения();
	
	УдаляемыеСтроки = Новый Массив;
	НеудаляемыеСтроки = Новый Массив;
	Для Каждого Идентификатор из Элементы.Товары.ВыделенныеСтроки Цикл
		СтрокаТаблицы = Элементы.Товары.ДанныеСтроки(Идентификатор);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.КоличествоУпаковок) Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицы);
			Если Идентификатор = ИдентификаторТекущейСтроки Тогда
				
				// Текущая строка удаляется - нужно перепозиционироваться.
				ИдентификаторПредыдущейСтроки = Неопределено;
				НайденаТекущаяСтрока = Ложь;
				НайденаНоваяТекущаяСтрока = Ложь;
				Для Каждого СтрокаТЧ Из Товары Цикл
					Если СтрокаТЧ.ПолучитьИдентификатор() = ИдентификаторТекущейСтроки Тогда
						НайденаТекущаяСтрока = Истина;
					Иначе
						Если НайденаТекущаяСтрока Тогда
							Если УдаляемыеСтроки.Найти(СтрокаТЧ) = Неопределено Тогда
								Элементы.Товары.ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();
								НайденаНоваяТекущаяСтрока = Истина;
								Прервать;
							КонецЕсли;
						Иначе
							Если УдаляемыеСтроки.Найти(СтрокаТЧ) = Неопределено Тогда
								ИдентификаторПредыдущейСтроки = СтрокаТЧ.ПолучитьИдентификатор();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если Не НайденаНоваяТекущаяСтрока Тогда
					Элементы.Товары.ТекущаяСтрока = ИдентификаторПредыдущейСтроки;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			НеудаляемыеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ из УдаляемыеСтроки Цикл
		Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из НеудаляемыеСтроки Цикл
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Строку %1 удалить нельзя, т.к. она присутствует в исходном документе.'"), Товары.Индекс(СтрокаТЧ) + 1);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Товары",,Отказ);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		
		Отказ = Истина;
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
		НоваяСтрока.КоличествоУпаковок     = 0;
		НоваяСтрока.КоличествоУпаковокФакт = 0;
		НоваяСтрока.Расхождение            = 0;
		
		Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	
	Для Каждого СтрокаТЧ Из Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнено поле ""Номенклатура"" в строке %1 списка ""Товары""'"), Товары.Индекс(СтрокаТЧ) + 1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Товары["+Товары.Индекс(СтрокаТЧ)+"].Номенклатура",,Отказ);
		КонецЕсли;
		Если ИспользоватьХарактеристикиНоменклатуры И Не ЗначениеЗаполнено(СтрокаТЧ.Характеристика) И СтрокаТЧ.ХарактеристикиИспользуются Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнено поле ""Характеристика"" в строке %1 списка ""Товары""'"), Товары.Индекс(СтрокаТЧ) + 1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Товары["+Товары.Индекс(СтрокаТЧ)+"].Характеристика",,Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
