&НаКлиенте
Перем ПараметрыОбработчика;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Определение констант
	ЦветОтключенногоОтбора = ЦветаСтиля.СкрытыйВариантОтчетаЦвет;
	
	// Реквизиты
	ДобавляемыеРеквизиты = Новый Массив;
	
	ВсеТипы = Новый ОписаниеТипов();
	
	ИмяТаблицы = "ПутиКФормамОтборов";
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Тип", ВсеТипы, ИмяТаблицы));
	
	ИмяТаблицы = "КэшНастроекСКД";
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Тип",              ВсеТипы, ИмяТаблицы));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Пользовательская", ВсеТипы, ИмяТаблицы));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Общая",            ВсеТипы, ИмяТаблицы));
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Локальные переменные
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	СхемаКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных;
	
	РежимРасшифровки = (Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено);
	РежимВариантаОтчета = (Параметры.Свойство("КлючВарианта") И Параметры.КлючВарианта <> Неопределено);
	КлючОбъекта = ОтчетМетаданные.ПолноеИмя();
	НаименованиеОтчета = СокрЛП(ОтчетМетаданные.Представление());
	ПравоВывода = ПравоДоступа("Вывод", Метаданные);
	
	// Реквизиты
	ВерсияСтандартныхФункцийОтчетов = "";
	Попытка 
		ВерсияСтандартныхФункцийОтчетов = ОтчетОбъект.ВерсияСтандартныхФункцийОтчетов();
	Исключение
	КонецПопытки;
	
	// Параметры по умолчанию
	Если ВерсияСтандартныхФункцийОтчетов = "1" Тогда
		НастройкиОтчета = ОтчетОбъект.ПолучитьНастройкиОтчета();
	Иначе
		НастройкиОтчета = ФункцииОтчетовКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
	КонецЕсли;
	
	// Параметры печати печати и сохранения положения окна.
	УстановитьКлючиФормы();
	
	// Параметры формы
	ЭтаФормаПараметры = Новый Структура(
		"КлючНазначенияИспользования, КлючПользовательскихНастроек,
		|Расшифровка, СформироватьПриОткрытии, ТолькоПросмотр,
		|ФиксированныеНастройки, ОтчетСсылка"
	);
	ЗаполнитьЗначенияСвойств(ЭтаФормаПараметры, Параметры);
	Если НЕ ЗначениеЗаполнено(ЭтаФормаПараметры.ОтчетСсылка) Тогда
		ОтчетИнформация = ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени(КлючОбъекта);
		Если НЕ ЗначениеЗаполнено(ОтчетИнформация.ТекстОшибки) Тогда
			ЭтаФормаПараметры.ОтчетСсылка = ОтчетИнформация.Отчет;
		Иначе
			ЭтаФормаПараметры.ОтчетСсылка = КлючОбъекта;
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФормаПараметры = Новый ФиксированнаяСтруктура(ЭтаФормаПараметры);
	
	ВариантСсылка = ВариантыОтчетов.ПолучитьСсылку(ЭтаФормаПараметры.ОтчетСсылка, КлючТекущегоВарианта);
	
	// Скрытие команд вариантов
	Если НЕ Параметры.Свойство("ВидимостьКомандВариантовОтчетов", ВидимостьКомандВариантовОтчетов) Тогда
		ВидимостьКомандВариантовОтчетов = Истина;
	КонецЕсли;
	
	// Регистрация элементов, команд и реквизитов формы, которые не удаляются при перезаполнении быстрых настроек
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		ПостоянныеРеквизиты.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	НаборЭлементов = Новый Массив;
	ДобавитьПодчиненныеЭлементы(НаборЭлементов, Элементы.БыстрыеНастройки.ПодчиненныеЭлементы, Истина);
	Для Каждого Элемент Из НаборЭлементов Цикл
		ПостоянныеЭлементы.Добавить(Элемент.Имя);
	КонецЦикла;
	
	// Скрытие кнопки выбора варианта из расшифровки.
	Если РежимРасшифровки Тогда
		Элементы.ФормаЗагрузитьВариант.Видимость = Ложь;
		Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
			РежимРасшифровкиПредставлениеВладельца = ОтчетНаименованиеТекущегоВарианта;
		КонецЕсли;
	КонецЕсли;
	
	// Приведение зависимых элементов формы к кондиции
	ВидимостьДоступностьКорректность();
	
	// Механизмы расширения
	СтандартныеПодсистемыПереопределяемый.ФормаОтчетаПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	ФормаОтчетаПереопределяемый.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Если в подменю одна команда, то выпадающий список не отображается.
	Если Элементы.Отправить.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.Отправить.Вид = ВидГруппыФормы.ГруппаКнопок;
		Элементы.ОтправитьПоЭлектроннойПочте.Заголовок = Элементы.Отправить.Заголовок + "...";
	КонецЕсли;
	Если Элементы.ОтправитьВсеДействия.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.ОтправитьВсеДействия.Вид = ВидГруппыФормы.ГруппаКнопок;
		Элементы.ОтправитьПоЭлектроннойПочтеВсеДействия.Заголовок = Элементы.ОтправитьВсеДействия.Заголовок + "...";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Результат = Ложь;
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаНастроекОтчета" Тогда
		СуффиксФормыИсточникаИзменений = "Настроек";
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ФормаВариантаОтчета" Тогда
		СуффиксФормыИсточникаИзменений = "Варианта";
	Иначе
		СуффиксФормыИсточникаИзменений = СтрЗаменить("^" + ИсточникВыбора.ИмяФормы, "^" + ИмяФормы, ""); // ^ - начало строки
	КонецЕсли;
	
	Если СуффиксФормыИсточникаИзменений = "Настроек" ИЛИ СуффиксФормыИсточникаИзменений = "Варианта" Тогда
		БыстрыеНастройкиЗагрузитьСхемуИОчиститьФорму(ВыбранноеЗначение, СуффиксФормыИсточникаИзменений);
		БыстрыеНастройкиЗаполнить();
		
		Результат = Истина;
	КонецЕсли;
	
	// Механизмы расширения
	СтандартныеПодсистемыКлиентПереопределяемый.ФормаОтчетаОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, Результат);
	ФормаОтчетаКлиентПереопределяемый.ОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, Результат);
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(НовыеНастройкиКД)
	// Вызов переопределяемого модуля
	ФормаОтчетаПереопределяемый.ПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД);
	
	// Загрузка фиксированных настроек для режима расшифровки.
	Если РежимРасшифровки Тогда
		Если Параметры <> Неопределено И Параметры.Свойство("Расшифровка") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Параметры.Расшифровка.ПрименяемыеНастройки);
			Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Параметры печати печати и сохранения положения окна.
	УстановитьКлючиФормы();
	
	// Заполнение панели быстрых настроек
	РежимВариантаОтчета = Истина;
	ВариантСсылка = ВариантыОтчетов.ПолучитьСсылку(ЭтаФормаПараметры.ОтчетСсылка, КлючТекущегоВарианта);
	БыстрыеНастройкиЗагрузитьСхемуИОчиститьФорму(НовыеНастройкиКД);
	БыстрыеНастройкиЗаполнить();
	
	// Вызов переопределяемого модуля
	ФормаОтчетаПереопределяемый.ПриЗагрузкеВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД);
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииВариантаНаСервере(Настройки)
	
	// Заголовок
	ВидимостьДоступностьКорректность("ВариантОтчета");
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	// Вызов переопределяемого модуля
	ФормаОтчетаПереопределяемый.ПередЗагрузкойПользовательскихНастроекНаСервере(ЭтаФорма, НовыеПользовательскиеНастройкиКД);
	
	Если РежимВариантаОтчета Тогда
		БыстрыеНастройкиЗагрузитьСхемуИОчиститьФорму(НовыеПользовательскиеНастройкиКД);
		БыстрыеНастройкиЗаполнить();
	КонецЕсли;
	
	// Вызов переопределяемого модуля
	ФормаОтчетаПереопределяемый.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, НовыеПользовательскиеНастройкиКД);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// Табличный документ

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	ФормаОтчетаКлиентПереопределяемый.ОбработкаРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	ФормаОтчетаКлиентПереопределяемый.ОбработкаДополнительнойРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые - При изменении

&НаКлиенте
Процедура Подключаемый_Параметр_Использование_ПриИзменении(Элемент)
	
	ИспользованиеПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГруппаЭлементовОтбораКомпоновкиДанных_Использование_ПриИзменении(Элемент)
	
	ИспользованиеПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементОтбораКомпоновкиДанных_Использование_ПриИзменении(Элемент)
	
	ИспользованиеПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Параметр_Значение_ПриИзменении(Элемент)
	
	СкомпоноватьНастройкиЭлемента(Элемент, Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементОтбораКомпоновкиДанных_Таблица_ПриИзменении(Элемент)
	
	Настройки = СкомпоноватьНастройкиЭлемента(Элемент, Истина, Истина);
	
	ЗаполнитьПараметрыВыбора(Настройки.Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементОтбораКомпоновкиДанных_Значение_ПриИзменении(Элемент)
	
	Настройки = СкомпоноватьНастройкиЭлемента(Элемент, Истина, Истина);
	
	ЗаполнитьПараметрыВыбора(Настройки.Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Группировки_Использование_ПриИзменении(Элемент)
	
	ИспользованиеПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементУсловногоОформленияКомпоновкиДанных_Использование_ПриИзменении(Элемент)
	
	ИспользованиеПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбранныеПоляКомпоновкиДанных_КолонкаИспользование_ПриИзменении(Элемент)
	
	Настройки = СкомпоноватьНастройкиЭлемента(Элемент, Истина, Ложь);
	
	СтрокаТаблицы = Настройки.Элемент.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПользовательскойНастройки = ФункцииОтчетовКлиентСервер.НайтиВложеннуюПользовательскуюНастройку(Настройки.Пользовательская, СтрокаТаблицы.Идентификатор);
	Если СтрокаПользовательскойНастройки <> Неопределено Тогда
		СтрокаПользовательскойНастройки.Использование = СтрокаТаблицы.Использование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПорядокКомпоновкиДанных_КолонкаИспользование_ПриИзменении(Элемент)
	
	Настройки = СкомпоноватьНастройкиЭлемента(Элемент, Истина, Ложь);
	
	СтрокаТаблицы = Настройки.Элемент.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПользовательскойНастройки = ФункцииОтчетовКлиентСервер.НайтиВложеннуюПользовательскуюНастройку(Настройки.Пользовательская, СтрокаТаблицы.Идентификатор);
	Если СтрокаПользовательскойНастройки <> Неопределено Тогда
		СтрокаПользовательскойНастройки.Использование = СтрокаТаблицы.Использование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтруктураНастроекКомпоновкиДанных_КолонкаИспользование_ПриИзменении(Элемент)
	
	Настройки = СкомпоноватьНастройкиЭлемента(Элемент, Истина, Ложь);
	
	СтрокаТаблицы = Настройки.Элемент.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИндексСтрокиТаблицы = Настройки.Значение.Индекс(СтрокаТаблицы);
	
	ПолеГруппировки = Настройки.Пользовательская.Структура.Получить(ИндексСтрокиТаблицы);
	ПолеГруппировки.Использование = СтрокаТаблицы.Использование;
	ПолеГруппировки.Состояние     = СостояниеЭлементаНастройкиКомпоновкиДанных[?(СтрокаТаблицы.Использование, "Включен", "Отключен")];
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_ВидПериода_ПриИзменении(Элемент)
	
	Настройки = СкомпоноватьНастройкиЭлемента(Элемент, Ложь, Ложь);
	
	СтраницыИмя                   = "Период_Страницы_"              + Настройки.ЭлементИдентификатор;
	СтраницаПроизвольныйПериодИмя = "Период_Страница_Произвольный_" + Настройки.ЭлементИдентификатор;
	СтраницаСтандартныйПериодИмя  = "Период_Страница_Стандартный_"  + Настройки.ЭлементИдентификатор;
	
	ВидПериода = ЭтаФорма[Элемент.Имя];
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		
		Элементы[СтраницыИмя].ТекущаяСтраница = Элементы[СтраницаПроизвольныйПериодИмя];
		
		ЭтаФорма["Период_Произвольный_Начало_"    + Настройки.ЭлементИдентификатор] = Настройки.Пользовательская.Значение.ДатаНачала;
		ЭтаФорма["Период_Произвольный_Окончание_" + Настройки.ЭлементИдентификатор] = Настройки.Пользовательская.Значение.ДатаОкончания;
		
	Иначе
		
		Элементы[СтраницыИмя].ТекущаяСтраница = Элементы[СтраницаСтандартныйПериодИмя];
		
		НачалоПериода = НачалоДня(Настройки.Пользовательская.Значение.ДатаНачала);
		
		Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
			НачалоПериода = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		КонецЕсли;
		
		НачалоПериода = ФункцииОтчетовКлиентСервер.НачалоПериодаОтчета(ВидПериода, НачалоПериода);
		КонецПериода  = ФункцииОтчетовКлиентСервер.КонецПериодаОтчета(ВидПериода, НачалоПериода);
		
		Настройки.Пользовательская.Значение.ДатаНачала    = НачалоПериода;
		Настройки.Пользовательская.Значение.ДатаОкончания = КонецПериода;
		Настройки.Пользовательская.Использование = Истина;
		
		Список = ФункцииОтчетовКлиентСервер.ПолучитьСписокПериодов(НачалоПериода, ВидПериода);
		ЭлементСписка = Список.НайтиПоЗначению(НачалоПериода);
		Если ЭлементСписка <> Неопределено Тогда
			ЭтаФорма["Период_Стандартный_Значение_" + Настройки.ЭлементИдентификатор] = ЭлементСписка.Представление;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_НачалоПериода_ПриИзменении(Элемент)
	
	НачалоПериода = ЭтаФорма[Элемент.Имя];
	Если НачалоПериода <> '00010101' Тогда
		НачалоПериода = НачалоДня(НачалоПериода);
	КонецЕсли;
	
	Настройки = СкомпоноватьНастройкиЭлемента(Элемент, Ложь, Ложь);
	Настройки.Пользовательская.Использование = Истина;
	Настройки.Пользовательская.Значение.ДатаНачала = НачалоПериода;
	ЭтаФорма[Элемент.Имя] = НачалоПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_КонецПериода_ПриИзменении(Элемент)
	
	КонецПериода = ЭтаФорма[Элемент.Имя];
	Если КонецПериода <> '00010101' Тогда
		КонецПериода = КонецДня(КонецПериода);
	КонецЕсли;
	
	Настройки = СкомпоноватьНастройкиЭлемента(Элемент, Ложь, Ложь);
	Настройки.Пользовательская.Использование = Истина;
	Настройки.Пользовательская.Значение.ДатаОкончания = КонецПериода;
	ЭтаФорма[Элемент.Имя] = КонецПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТрехрежимныйФлажокОтбора_Значение_ПриИзменении(Элемент)
	
	Настройки = СкомпоноватьНастройкиЭлемента(Элемент, Ложь, Ложь);
	Настройки.Пользовательская.Использование = (Настройки.Значение <> 2);
	Настройки.Пользовательская.ПравоеЗначение = (Настройки.Значение = 1);
	Настройки.Элемент.ЦветТекстаЗаголовка = ?(Настройки.Значение = 2, ЦветОтключенногоОтбора, Новый Цвет);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТрехрежимныйФлажокПараметра_Значение_ПриИзменении(Элемент)
	
	Настройки = СкомпоноватьНастройкиЭлемента(Элемент, Ложь, Ложь);
	Настройки.Пользовательская.Использование = (Настройки.Значение <> 2);
	Настройки.Пользовательская.Значение = (Настройки.Значение = 1);
	Настройки.Элемент.ЦветТекстаЗаголовка = ?(Настройки.Значение = 2, ЦветОтключенногоОтбора, Новый Цвет);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые - Очистка

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_Значение_Очистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые - Обработка выбора

&НаКлиенте
Процедура Подключаемый_ЭлементОтбораКомпоновкиДанных_Таблица_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Контроль уникальности + Сразу можно загружать итоговый список значений в пользовательскую настройку
	СтандартнаяОбработка = Ложь;
	
	Настройки = СкомпоноватьНастройкиЭлемента(Элемент, Ложь, Ложь);
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			Если Настройки.Значение.НайтиПоЗначению(ЭлементМассива) = Неопределено Тогда
				Настройки.Значение.Добавить(ЭлементМассива);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Настройки.Значение.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено Тогда
			Настройки.Значение.Добавить(ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Если Настройки.Пользовательская.ПравоеЗначение = Неопределено Тогда
		Настройки.Пользовательская.ПравоеЗначение = Новый СписокЗначений;
	КонецЕсли;
	
	Настройки.Пользовательская.ПравоеЗначение.ЗагрузитьЗначения(Настройки.Значение.ВыгрузитьЗначения());
	Настройки.Пользовательская.Использование = Истина;
	ЭтаФорма[Настройки.СтрокаКэша.ИмяРеквизитаИспользование] = Истина;
	
	ЗаполнитьПараметрыВыбора(Настройки.Идентификатор);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые - Начало выбора из списка

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_Значение_НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = СкомпоноватьНастройкиЭлемента(Элемент, Ложь, Ложь);
	
	ВидПериода = ЭтаФорма["Период_ВидПериода_" + Настройки.ЭлементИдентификатор];
	
	НачалоПериода = Настройки.Пользовательская.Значение.ДатаНачала;
	Если НачалоПериода = '00010101' тогда
		НачалоПериода = ФункцииОтчетовКлиентСервер.НачалоПериодаОтчета(ВидПериода, ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
	РезультатВыбора = ВыбратьПериодИзВыпадающегоСписка(Элемент, ВидПериода, НачалоПериода);
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = ФункцииОтчетовКлиентСервер.НачалоПериодаОтчета(ВидПериода, РезультатВыбора.Значение);
	КонецПериода  = ФункцииОтчетовКлиентСервер.КонецПериодаОтчета(ВидПериода, РезультатВыбора.Значение);
	
	ЭтаФорма[Элемент.Имя] = РезультатВыбора.Представление;
	ЭтаФорма["Период_Произвольный_Начало_"    + Настройки.ЭлементИдентификатор] = НачалоПериода;
	ЭтаФорма["Период_Произвольный_Окончание_" + Настройки.ЭлементИдентификатор] = КонецПериода;
	
	Настройки.Пользовательская.Значение.ДатаНачала    = НачалоПериода;
	Настройки.Пользовательская.Значение.ДатаОкончания = КонецПериода;
	Настройки.Пользовательская.Использование = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые - Начало выбора

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_Значение_НачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбратьПериодВОтдельнойФорме(Элемент);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СкрытьПоказатьБыстрыеНастройки(Команда)
	
	СостояниеДоИзменения = Новый Структура("Видимость, ДополнительныйРежимОтображения, Картинка, Текст");
	ЗаполнитьЗначенияСвойств(СостояниеДоИзменения, Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния);
	
	ДопСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДопСвойства.ВидимостьБыстрыхНастроек = НЕ ДопСвойства.ВидимостьБыстрыхНастроек;
	ВидимостьДоступностьКорректность("СкрытьПоказатьБыстрыеНастройки");
	
	ЗаполнитьЗначенияСвойств(Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния, СостояниеДоИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтчет(Команда)
	
	ПараметрыФормы = Новый Структура;
	Для Каждого КлючИЗначение Из ЭтаФормаПараметры Цикл
		ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	ПараметрыФормы.Вставить("Вариант",                               Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючВарианта",                          Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",             Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",                 Строка(ОтчетНаименованиеТекущегоВарианта));
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "");
	
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОткрытьФорму(КлючОбъекта + ".ФормаНастроек", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантОтчета(Команда)
	
	ПараметрыФормы = Новый Структура;
	Для Каждого КлючИЗначение Из ЭтаФормаПараметры Цикл
		ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	ПараметрыФормы.Вставить("Вариант",                               Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючВарианта",                          Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",             Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",                 Строка(ОтчетНаименованиеТекущегоВарианта));
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "");
	
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОткрытьФорму(КлючОбъекта + ".ФормаВарианта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройки(Команда)
	Если ВариантМодифицирован = Истина Тогда
		Предупреждение(НСтр("ru = 'Необходимо сохранить вариант отчета до сброса пользовательских настроек.'"));
		Возврат;
	КонецЕсли;
	
	// Заполнение панели быстрых настроек
	БыстрыеНастройкиЗагрузитьСхемуИОчиститьФорму("СброситьНастройки");
	БыстрыеНастройкиЗаполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	Если НЕ ФункцииОтчетовКлиентСервер.АктуализироватьТабличныйДокумент(ЭтаФорма, "ОтчетТабличныйДокумент") Тогда
		Возврат;
	КонецЕсли;
	
	ТабличныеДокументы = Новый СписокЗначений;
	ТабличныеДокументы.Добавить(ЭтаФорма.ОтчетТабличныйДокумент, ЭтаФорма.ОтчетНаименованиеТекущегоВарианта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТабличныеДокументы", ТабличныеДокументы);
	ПараметрыФормы.Вставить("Заголовок", СтрЗаменить(
			НСтр("ru = 'Отправка отчета ""%1"" по почте'"),
			"%1",
			ЭтаФорма.ОтчетНаименованиеТекущегоВарианта
		)
	);
	
	ОткрытьФорму("ОбщаяФорма.ОтправкаТабличныхДокументовПоПочте", ПараметрыФормы, , );
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСкомпоноватьРезультат(Команда)
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая
		ИЛИ ТипЗнч(ЭтаФормаПараметры.ОтчетСсылка) = Тип("Строка") Тогда
		
		ОтчетСкомпоноватьРезультатНаСервере(Ложь);
		
	Иначе
		
		РезультатЗапуска = ОтчетСкомпоноватьРезультатНаСервере(Истина);
		
		Если РезультатЗапуска.ЗаданиеВыполнено Тогда
			// Действия не требуется
		ИначеЕсли РезультатЗапуска.ВызваноИсключение Тогда
			// Вывод сообщения об ошибке
			Предупреждение(
				НСтр("ru = 'Не удалось сформировать отчет.
				|Подробности см. в журнале регистрации.'")
			);
		Иначе
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 1, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	// Механизмы расширения
	Результат = Ложь;
	СтандартныеПодсистемыКлиентПереопределяемый.ФормаОтчетаОбработчикКоманды(ЭтаФорма, Команда, Результат);
	ФормаОтчетаКлиентПереопределяемый.ОбработчикКоманды(ЭтаФорма, Команда, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементОтбораКомпоновкиДанных_Таблица_Подбор(Команда)
	
	Настройки = СкомпоноватьНастройкиЭлемента(Команда, Ложь, Ложь);
	
	Если ТипЗнч(Настройки.Значение) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ПростыеТипы = Новый Массив;
	ПростыеТипы.Добавить(Тип("Строка"));
	ПростыеТипы.Добавить(Тип("Дата"));
	ПростыеТипы.Добавить(Тип("Число"));
	
	СписокВыбора = Новый СписокЗначений;
	
	МассивТипов = Настройки.Значение.ТипЗначения.Типы();
	Для Каждого Тип Из МассивТипов Цикл
		Если ПростыеТипы.Найти(Тип) = Неопределено Тогда
			СписокВыбора.Добавить(Тип, Строка(Тип));
		КонецЕсли;
	КонецЦикла;
	
	Если СписокВыбора.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли СписокВыбора.Количество() = 1 Тогда
		ВыбранныйТип = СписокВыбора[0].Значение;
	Иначе
		ВыбранныйЭлемент = ВыбратьИзМеню(СписокВыбора, Элементы[Команда.Имя].Родитель);
		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ВыбранныйТип = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	ЭлементЗначение = Элементы.Найти("Отбор_Значение_" + Настройки.ЭлементИдентификатор);
	
	Найденные = ПутиКФормамОтборов.НайтиСтроки(Новый Структура("Отбор, Тип", Настройки.Идентификатор, ТипЗнч(Неопределено)));
	Если Найденные.Количество() = 0 Тогда
		Найденные = ПутиКФормамОтборов.НайтиСтроки(Новый Структура("Отбор, Тип", Настройки.Идентификатор, ВыбранныйТип));
	КонецЕсли;
	Если Найденные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ПутьКФорме = Найденные[0].ПутьКФорме;
	
	ПараметрыФормыВыбора = ФункцииОтчетовКлиентСервер.ПолучитьСтруктуруОтборов(ЭтаФорма, Отчет.КомпоновщикНастроек, Настройки.ЭлементИдентификатор, ВыбранныйТип);
	// Стандартные параметры формы
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе",            Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормыВыбора.Вставить("Отбор",                         Новый Структура);
	// Стандартные параметры формы выбора (см. Расширение управляемой формы для динамического списка)
	ПараметрыФормыВыбора.Вставить("ВыборГруппИЭлементов",          ЭлементЗначение.ВыборГруппИЭлементов);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор",            Истина);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",                   Истина);
	// Предполагаемые реквизиты
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыФормыВыбора.Вставить("РазрешитьНачалоПеретаскивания", Ложь);
	
	// Добавление фиксированных параметров выбора.
	Для Каждого ПараметрВыбора Из ЭлементЗначение.ПараметрыВыбора Цикл
		Если ЗначениеЗаполнено(ПараметрВыбора.Имя) Тогда
			Если ВРег(Лев(ПараметрВыбора.Имя, 6)) = ВРег("Отбор.") Тогда
				ПараметрыФормыВыбора.Отбор.Вставить(Сред(ПараметрВыбора.Имя, 7), ПараметрВыбора.Значение);
			Иначе
				ПараметрыФормыВыбора.Вставить(ПараметрВыбора.Имя, ПараметрВыбора.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Добавление динамических параметров выбора (от ведущих).
	Для Каждого СвязьПараметраВыбора Из ЭлементЗначение.СвязиПараметровВыбора Цикл
		НастройкиВедущего = СкомпоноватьНастройкиЭлемента(СвязьПараметраВыбора.ПутьКДанным, Ложь, Ложь);
		Если НастройкиВедущего.Использование И ЗначениеЗаполнено(СвязьПараметраВыбора.Имя) Тогда
			Если ВРег(Лев(СвязьПараметраВыбора.Имя, 6)) = ВРег("Отбор.") Тогда
				ПараметрыФормыВыбора.Отбор.Вставить(Сред(СвязьПараметраВыбора.Имя, 7), НастройкиВедущего.Значение);
			Иначе
				ПараметрыФормыВыбора.Вставить(СвязьПараметраВыбора.Имя, НастройкиВедущего.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОткрытьФорму(ПутьКФорме, ПараметрыФормыВыбора, Элементы.Найти(Настройки.СтрокаКэша.ИмяРеквизита));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбранныеПоляКомпоновкиДанных_ПереместитьВверх(Команда)
	Направление = -1;
	ПереместитьСтрокуТаблицы(Направление, Команда);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбранныеПоляКомпоновкиДанных_ПереместитьВниз(Команда)
	Направление = 1;
	ПереместитьСтрокуТаблицы(Направление, Команда);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПорядокКомпоновкиДанных_ПереместитьВверх(Команда)
	Направление = -1;
	ПереместитьСтрокуТаблицы(Направление, Команда);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПорядокКомпоновкиДанных_ПереместитьВниз(Команда)
	Направление = 1;
	ПереместитьСтрокуТаблицы(Направление, Команда);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтруктураНастроекКомпоновкиДанных_ПереместитьВверх(Команда)
	Направление = -1;
	ПереместитьСтрокуТаблицы(Направление, Команда);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтруктураНастроекКомпоновкиДанных_ПереместитьВниз(Команда)
	Направление = 1;
	ПереместитьСтрокуТаблицы(Направление, Команда);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Клиент + Сервер

&НаКлиентеНаСервереБезКонтекста
Функция ПривестиИдентификаторКИмени(Идентификатор)
	Возврат СтрЗаменить(Строка(Идентификатор), "-", "");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПривестиИмяКИдентификатору(ЭлементИдентификатор)
	
	Возврат (
		Сред(ЭлементИдентификатор, 1, 8)
		+ "-"
		+ Сред(ЭлементИдентификатор, 9, 4)
		+ "-"
		+ Сред(ЭлементИдентификатор, 13, 4)
		+ "-"
		+ Сред(ЭлементИдентификатор, 17, 4)
		+ "-"
		+ Сред(ЭлементИдентификатор, 21)
	);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НайтиВКэше(КэшНастроекСКД, ИмяРеквизита, ЗначениеРеквизита)
	Найденные = КэшНастроекСКД.НайтиСтроки(Новый Структура(ИмяРеквизита, ЗначениеРеквизита));
	Если Найденные.Количество() > 0 Тогда
		Возврат Найденные[0];
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ИспользованиеПриИзменении(Элемент)
	
	Настройки = СкомпоноватьНастройкиЭлемента(Элемент, Ложь, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодВОтдельнойФорме(ЭлементИлиКоманда)
	
	Настройки = СкомпоноватьНастройкиЭлемента(ЭлементИлиКоманда, Ложь, Ложь);
	
	ВидПериода = ЭтаФорма["Период_ВидПериода_" + Настройки.ЭлементИдентификатор];
	
	МинимальнаяПериодичность = НастройкиОтчета.СоответствиеПериодичностиПараметров[Настройки.Общая.Параметр];
	Если МинимальнаяПериодичность = Неопределено Тогда
		МинимальнаяПериодичность = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НачалоПериода",     Настройки.Пользовательская.Значение.ДатаНачала);
	ПараметрыФормы.Вставить("КонецПериода",      Настройки.Пользовательская.Значение.ДатаОкончания);
	ПараметрыФормы.Вставить("МинимальныйПериод", МинимальнаяПериодичность);
	ПараметрыФормы.Вставить("ВидПериода",        ВидПериода);
	
	РезультатВыбора = ОткрытьФормуМодально("ОбщаяФорма.ВыборПроизвольногоПериода", ПараметрыФормы, ЭтаФорма);
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПериодЗаполнен = Ложь;
	НачалоПериода = РезультатВыбора.НачалоПериода;
	КонецПериода = РезультатВыбора.КонецПериода;
	Если НачалоПериода <> '00010101' Тогда
		НачалоПериода = НачалоДня(НачалоПериода);
		ПериодЗаполнен = Истина;
	КонецЕсли;
	Если КонецПериода <> '00010101' Тогда
		КонецПериода = КонецДня(КонецПериода);
		ПериодЗаполнен = Истина;
	КонецЕсли;
	
	Если НачалоПериода = ПараметрыФормы.НачалоПериода
		И КонецПериода = ПараметрыФормы.КонецПериода Тогда
		Возврат;
	КонецЕсли;
	
	Настройки.Пользовательская.Значение.ДатаНачала    = НачалоПериода;
	Настройки.Пользовательская.Значение.ДатаОкончания = КонецПериода;
	Настройки.Пользовательская.Использование = Истина;
	
	Элементы["Период_Страницы_"   + Настройки.ЭлементИдентификатор].ТекущаяСтраница = Элементы["Период_Страница_Произвольный_" + Настройки.ЭлементИдентификатор];
	ЭтаФорма["Период_ВидПериода_" + Настройки.ЭлементИдентификатор] = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод");
	
	ЭтаФорма["Период_Произвольный_Начало_"    + Настройки.ЭлементИдентификатор] = НачалоПериода;
	ЭтаФорма["Период_Произвольный_Окончание_" + Настройки.ЭлементИдентификатор] = КонецПериода;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбратьПериодИзВыпадающегоСписка(Элемент, ВидПериода, НачалоПериода, ЛистаниеВверх = Неопределено)
	
	СписокВыбора = ФункцииОтчетовКлиентСервер.ПолучитьСписокПериодов(НачалоПериода, ВидПериода);
	
	Если ЛистаниеВверх = Истина Тогда
		НачальноеЗначение = 0;
	ИначеЕсли ЛистаниеВверх = Ложь Тогда
		НачальноеЗначение = СписокВыбора.Количество() - 1;
	Иначе
		НачальноеЗначение = СписокВыбора.НайтиПоЗначению(НачалоПериода);
	КонецЕсли;
	
	РезультатВыбора = ВыбратьИзСписка(СписокВыбора, Элемент, НачальноеЗначение);
	
	Если РезультатВыбора = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Индекс = СписокВыбора.Индекс(РезультатВыбора);
	Если Индекс = 0 Тогда
		Возврат ВыбратьПериодИзВыпадающегоСписка(Элемент, ВидПериода, РезультатВыбора.Значение, Истина);
	ИначеЕсли Индекс = СписокВыбора.Количество() - 1 Тогда
		Возврат ВыбратьПериодИзВыпадающегоСписка(Элемент, ВидПериода, РезультатВыбора.Значение, Ложь);
	КонецЕсли;
	
	Возврат РезультатВыбора;
	
КонецФункции 

&НаКлиенте
Процедура ПереместитьСтрокуТаблицы(Направление, Команда)
	
	Настройки = СкомпоноватьНастройкиЭлемента(Команда, Ложь, Ложь);
	
	СтрокаТаблицы = Настройки.Элемент.ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИндексСтроки = Настройки.Значение.Индекс(СтрокаТаблицы);
	
	Если ИндексСтроки + Направление < 0 ИЛИ ИндексСтроки + Направление >= Настройки.Значение.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПользовательскойНастройки = ФункцииОтчетовКлиентСервер.НайтиВложеннуюПользовательскуюНастройку(Настройки.Пользовательская, СтрокаТаблицы.Идентификатор);
	Настройки.Пользовательская.Элементы.Сдвинуть(СтрокаПользовательскойНастройки, Направление);
	
	Настройки.Значение.Сдвинуть(ИндексСтроки, Направление);
	
КонецПроцедуры

&НаКлиенте
Функция СкомпоноватьНастройкиЭлемента(ИмяИлиЭлементИлиКоманда, УстановитьИспользование, УстановитьЗначение)
	
	Если ТипЗнч(ИмяИлиЭлементИлиКоманда) = Тип("Строка") Тогда
		ИмяИнициатора = ИмяИлиЭлементИлиКоманда;
	Иначе
		ИмяИнициатора = ИмяИлиЭлементИлиКоманда.Имя;
	КонецЕсли;
	
	Настройки = Новый Структура(
		"Идентификатор, ЭлементИдентификатор, СтрокаКэша, Пользовательская, Общая, Прочие,
		|Использование, Значение, Элемент"
	);
	Настройки.ЭлементИдентификатор = Прав(ИмяИнициатора, 32);
	Настройки.Идентификатор        = ПривестиИмяКИдентификатору(Настройки.ЭлементИдентификатор);
	Настройки.СтрокаКэша           = НайтиВКэше(КэшНастроекСКД, "Идентификатор", Настройки.Идентификатор);
	Настройки.Пользовательская     = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(Настройки.СтрокаКэша.Пользовательская);
	Настройки.Общая                = Настройки.СтрокаКэша.Общая;
	
	Если ЗначениеЗаполнено(Настройки.СтрокаКэша.ИмяРеквизита) Тогда
		Настройки.Значение = ЭтаФорма[Настройки.СтрокаКэша.ИмяРеквизита];
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Настройки.СтрокаКэша.ИмяЭлемента) Тогда
		Настройки.Элемент = Элементы.Найти(Настройки.СтрокаКэша.ИмяЭлемента);
	КонецЕсли;
	
	ИмяРеквизитаИспользование = Настройки.СтрокаКэша.ИмяРеквизитаИспользование;
	Если ЗначениеЗаполнено(ИмяРеквизитаИспользование) Тогда
		Если УстановитьИспользование И ЭтаФорма.Элементы[ИмяРеквизитаИспользование].ТолькоПросмотр = Ложь Тогда
			ЭтаФорма[ИмяРеквизитаИспользование] = ЗначениеЗаполнено(Настройки.Значение);
		КонецЕсли;
		Настройки.Использование = ЭтаФорма[ИмяРеквизитаИспользование];
		Настройки.Пользовательская.Использование = Настройки.Использование;
	Иначе
		Настройки.Использование = Истина;
	КонецЕсли;
	
	Если УстановитьЗначение Тогда
		Если Настройки.СтрокаКэша.ЭтоОтбор Тогда
			Если Настройки.СтрокаКэша.СодержитТипТип И ТипЗнч(Настройки.Значение) = Тип("ОписаниеТипов") Тогда
				Настройки.Пользовательская.ПравоеЗначение = Настройки.Значение.Типы()[0];
			Иначе
				Настройки.Пользовательская.ПравоеЗначение = Настройки.Значение;
			КонецЕсли;
		ИначеЕсли Настройки.СтрокаКэша.ЭтоПараметр Тогда
			Настройки.Пользовательская.Значение = Настройки.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Настройки;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьКонтекстныйВызовСервера(КлючОперации, ПараметрыОперации) Экспорт // Исключение из стандартов разработки
	
	Возврат КонтекстныйВызовСервера(КлючОперации, ПараметрыОперации);
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	РезультатЗапуска = ФоновоеЗаданиеПроверитьНаСервере(ФоновоеЗаданиеИдентификатор);
	Если РезультатЗапуска.ЗаданиеВыполнено Тогда
		ФоновоеЗаданиеЗагрузитьРезультат(РезультатЗапуска);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет сформирован'"), , Заголовок);
	ИначеЕсли РезультатЗапуска.ВызваноИсключение Тогда
		// Вывод сообщения об ошибке
		Предупреждение(
			НСтр("ru = 'Не удалось сформировать отчет.
			|Подробности см. в журнале регистрации.'")
		);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Процедура ВидимостьДоступностьКорректность(Изменения = "")
	// Быстрые настройки
	Если Изменения = "" ИЛИ Изменения = "СкрытьПоказатьБыстрыеНастройки" Тогда
		Элементы.КомандыВариантовПользовательскихНастроек.Видимость = Ложь;
		Элементы.КомандыВариантовОтчета.Видимость = РежимВариантаОтчета И ВидимостьКомандВариантовОтчетов;
		Элементы.БыстрыеНастройки.Видимость = РежимВариантаОтчета И НЕ РежимРасшифровки;
		ПользовательскиеНастройкиКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		Если РежимВариантаОтчета И ПользовательскиеНастройкиКД.Элементы.Количество() > 0 Тогда
			Элементы.КомандыВариантовПользовательскихНастроек.Видимость = Истина;
			Если Элементы.ГруппаСкрытьПоказатьБыстрыеНастройки.Видимость = Истина Тогда
				ВидимостьБыстрыхНастроек = Неопределено;
				ПользовательскиеНастройкиКД.ДополнительныеСвойства.Свойство("ВидимостьБыстрыхНастроек", ВидимостьБыстрыхНастроек);
				Если ВидимостьБыстрыхНастроек = Истина Тогда
					Элементы.БыстрыеНастройки.Видимость = Истина;
					Элементы.СкрытьПоказатьБыстрыеНастройки.Пометка = Истина;
					Команды.СкрытьПоказатьБыстрыеНастройки.Подсказка = НСтр("ru = 'Скрыть быстрые настройки'");
				Иначе
					Элементы.БыстрыеНастройки.Видимость = Ложь;
					Элементы.СкрытьПоказатьБыстрыеНастройки.Пометка = Ложь;
					Команды.СкрытьПоказатьБыстрыеНастройки.Подсказка = НСтр("ru = 'Показать быстрые настройки'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Заголовок
	Если Изменения = "" ИЛИ Изменения = "ВариантОтчета" Тогда
		ОтчетНаименованиеТекущегоВарианта = СокрЛП(ОтчетНаименованиеТекущегоВарианта);
		Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
			Заголовок = ОтчетНаименованиеТекущегоВарианта;
		Иначе
			Заголовок = НаименованиеОтчета;
		Конецесли;
		Если РежимРасшифровки Тогда
			Заголовок = РежимРасшифровкиПредставлениеВладельца + " (" + НРег(Заголовок) + ")";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиЗагрузитьСхемуИОчиститьФорму(НовыеНастройки, СуффиксФормыИсточникаИзменений = "")
	
	Если НовыеНастройки <> Неопределено Тогда
		ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость = Истина;
		ОтображениеСостояния.Текст     = НСтр("ru = 'Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.'");
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	КонецЕсли;
	
	Если ТипЗнч(НовыеНастройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		
		ПользовательскиеНастройкиМодифицированы = Истина;
		
		Если СуффиксФормыИсточникаИзменений = "Варианта" Тогда
			ВариантМодифицирован = Истина;
		КонецЕсли;
		
		Если СуффиксФормыИсточникаИзменений = "Настроек" И ВариантМодифицирован = Ложь Тогда
			
			ПользовательскиеНастройкиКД = НовыеНастройки.ПользовательскиеНастройки;
			КэшНастроек = РеквизитФормыВЗначение("КэшНастроекСКД", Тип("ТаблицаЗначений"));
			Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройкиКД.Элементы Цикл
				Идентификатор = ПользовательскиеНастройкиКД.ПолучитьИдентификаторПоОбъекту(ПользовательскаяНастройка);
				СтрокаТаблицы = КэшНастроек.Найти(Идентификатор, "Пользовательская");
				Если СтрокаТаблицы = Неопределено Тогда
					ВариантМодифицирован = Истина;
					Прервать;
				КонецЕсли;
				КэшНастроек.Удалить(СтрокаТаблицы);
			КонецЦикла;
			
			Если КэшНастроек.Количество() > 0 Тогда
				ВариантМодифицирован = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НовыеНастройки.Настройки);
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(НовыеНастройки.ПользовательскиеНастройки);
		
	ИначеЕсли ТипЗнч(НовыеНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НовыеНастройки);
	ИначеЕсли ТипЗнч(НовыеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(НовыеНастройки);
	ИначеЕсли НовыеНастройки = "СброситьНастройки" Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетМетаданные = ОтчетОбъект.Метаданные();
		
		// Чтение настроек варианта
		КомпоновщикНастроекКД = Отчет.КомпоновщикНастроек;
		ВариантНастройкиКД = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.Найти(КлючТекущегоВарианта);
		Если ВариантНастройкиКД = Неопределено Тогда
			// Из хранилища
			Если ОтчетМетаданные.ХранилищеВариантов = Неопределено Тогда
				МенеджерХранилища = ХранилищеВариантовОтчетов;
			Иначе
				МенеджерХранилища = ХранилищаНастроек[ОтчетМетаданные.ХранилищеВариантов.Имя];
			КонецЕсли;
			НастройкиКД = МенеджерХранилища.Загрузить(КлючОбъекта, КлючТекущегоВарианта);
		Иначе
			// Из метаданных СКД
			НастройкиКД = ВариантНастройкиКД.Настройки;
		КонецЕсли;
		Если НастройкиКД = Неопределено Тогда
			// По умолчанию
			НастройкиКД = ОтчетОбъект.СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		КонецЕсли;
		
		АдресСхемыКД = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, УникальныйИдентификатор);
		КомпоновщикНастроекКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКД));
		КомпоновщикНастроекКД.ЗагрузитьНастройки(НастройкиКД);
		
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	// Удаление элементов
	УдаляемыеЭлементы = Новый Массив;
	ДобавитьПодчиненныеЭлементы(УдаляемыеЭлементы, Элементы.БыстрыеНастройки.ПодчиненныеЭлементы, Истина);
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	// Удаление реквизитов
	УдаляемыеРеквизиты = Новый Массив;
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		Если ПостоянныеРеквизиты.НайтиПоЗначению(Реквизит.Имя) = Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	ИзменитьРеквизиты(Новый Массив, УдаляемыеРеквизиты);
	
	// Удаление команд
	УдаляемыеКоманды = Новый Массив;
	Для Каждого Команда Из Команды Цикл
		Если ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя) = Неопределено Тогда
			УдаляемыеКоманды.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Команда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команда);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиЗаполнить()
	
	// Элементы управления
	БыстрыеНастройкиСоздатьЭлементыУправления();
	
	// Значения
	БыстрыеНастройкиЗагрузитьЗначения();
	
	// Связи отборов
	ЗаполнитьПараметрыВыбора();
	
	// Заголовок
	ВидимостьДоступностьКорректность();
	
	// Вызов переопределяемого модуля
	ФормаОтчетаПереопределяемый.ПослеЗаполненияПанелиБыстрыхНастроек(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция КонтекстныйВызовСервера(КлючОперации, ПараметрыОперации)
	
	РезультатВызова = Новый Структура;
	ФормаОтчетаПереопределяемый.КонтекстныйВызовСервера(ЭтаФорма, КлючОперации, ПараметрыОперации, РезультатВызова);
	Возврат РезультатВызова;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФоновоеЗаданиеПроверитьНаСервере(ФоновоеЗаданиеИдентификатор)
	РезультатЗапуска = Новый Структура("ЗаданиеВыполнено, ВызваноИсключение, РезультатВыполнения");
	Попытка
		РезультатЗапуска.ЗаданиеВыполнено  = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
		РезультатЗапуска.ВызваноИсключение = Ложь;
	Исключение
		ВариантыОтчетов.ОшибкаПоВарианту(Неопределено, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		РезультатЗапуска.ЗаданиеВыполнено  = Ложь;
		РезультатЗапуска.ВызваноИсключение = Истина;
	КонецПопытки;
	
	Возврат РезультатЗапуска;
КонецФункции

&НаСервере
Функция ОтчетСкомпоноватьРезультатНаСервере(ВФоновомЗадании)
	
	Если ВФоновомЗадании Тогда
		
		ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость                      = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
		ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
		
		// Запуск фонового задания
		ПараметрыФормированияОтчета = Новый Структура("Настройки, ФиксированныеНастройки, ПользовательскиеНастройки");
		ЗаполнитьЗначенияСвойств(ПараметрыФормированияОтчета, Отчет.КомпоновщикНастроек);
		ПараметрыФормированияОтчета.Вставить("ОтчетСсылка", ЭтаФормаПараметры.ОтчетСсылка);
		
		РезультатЗапуска = Новый Структура("ЗаданиеВыполнено, ВызваноИсключение, РезультатВыполнения");
		
		Попытка
			РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
				УникальныйИдентификатор,
				"ВариантыОтчетов.СформироватьОтчет", 
				ПараметрыФормированияОтчета, 
				НСтр("ru = 'Варианты отчетов: Формирование отчета'")
			);
			
			РезультатЗапуска.ЗаданиеВыполнено  = РезультатФоновогоЗадания.ЗаданиеВыполнено;
			РезультатЗапуска.ВызваноИсключение = Ложь;
			
			ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
			ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
		Исключение
			ВариантыОтчетов.ОшибкаПоВарианту(Неопределено, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			РезультатЗапуска.ЗаданиеВыполнено  = Ложь;
			РезультатЗапуска.ВызваноИсключение = Истина;
		КонецПопытки;
		
		Если РезультатЗапуска.ЗаданиеВыполнено Тогда
			ФоновоеЗаданиеЗагрузитьРезультат(РезультатЗапуска);
		КонецЕсли;
		
		Возврат РезультатЗапуска;
		
	Иначе
		
		// Формирование отчета.
		КлючПараметровПечатиДоКомпоновки = ОтчетТабличныйДокумент.КлючПараметровПечати;
		СкомпоноватьРезультат(РежимКомпоновкиРезультата.Авто);
		ОтчетТабличныйДокумент.КлючПараметровПечати = КлючПараметровПечатиДоКомпоновки;
		
		// Перезаполнение настроек.
		Перезаполнить = Ложь;
		ДопСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
		Если ДопСвойства.Свойство("ВариантМодифицирован") Тогда
			Если ДопСвойства.ВариантМодифицирован = Истина Тогда
				Перезаполнить = Истина;
				ВариантМодифицирован = Истина;
				ПользовательскиеНастройкиМодифицированы = Истина;
			КонецЕсли;
			ДопСвойства.Удалить("ВариантМодифицирован");
		КонецЕсли;
		Если ДопСвойства.Свойство("ПользовательскиеНастройкиМодифицированы") Тогда
			Если ДопСвойства.ПользовательскиеНастройкиМодифицированы = Истина Тогда
				Перезаполнить = Истина;
				ПользовательскиеНастройкиМодифицированы = Истина;
			КонецЕсли;
			ДопСвойства.Удалить("ПользовательскиеНастройкиМодифицированы");
		КонецЕсли;
		Если Перезаполнить Тогда
			БыстрыеНастройкиЗагрузитьСхемуИОчиститьФорму(Неопределено, Неопределено);
			БыстрыеНастройкиЗаполнить();
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ФоновоеЗаданиеЗагрузитьРезультат(РезультатЗапуска)
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";
	
	РезультатФормирования = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	Если РезультатФормирования = Неопределено Тогда
		
		ОтчетСкомпоноватьРезультатНаСервере(Ложь);
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(РезультатЗапуска, РезультатФормирования);
		
		КлючПараметровПечатиДоКомпоновки = ОтчетТабличныйДокумент.КлючПараметровПечати;
		ОтчетТабличныйДокумент = РезультатФормирования.ОтчетТабличныйДокумент;
		ОтчетТабличныйДокумент.КлючПараметровПечати = КлючПараметровПечатиДоКомпоновки;
		
		Если ЗначениеЗаполнено(ОтчетДанныеРасшифровки) И ЭтоАдресВременногоХранилища(ОтчетДанныеРасшифровки) Тогда
			УдалитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
		КонецЕсли;
		ОтчетДанныеРасшифровки = ПоместитьВоВременноеХранилище(РезультатФормирования.ОтчетРасшифровка, УникальныйИдентификатор);
		
		Перезаполнить = Ложь;
		Если РезультатФормирования.ВариантМодифицирован = Истина Тогда
			Перезаполнить = Истина;
			ВариантМодифицирован = Истина;
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(РезультатФормирования.НастройкиКД);
		КонецЕсли;
		Если РезультатФормирования.ПользовательскиеНастройкиМодифицированы = Истина Тогда
			Перезаполнить = Истина;
			ПользовательскиеНастройкиМодифицированы = Истина;
			Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(РезультатФормирования.ПользовательскиеНастройкиКД);
		КонецЕсли;
		Если Перезаполнить Тогда
			БыстрыеНастройкиЗагрузитьСхемуИОчиститьФорму(Неопределено, Неопределено);
			БыстрыеНастройкиЗаполнить();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура БыстрыеНастройкиСоздатьЭлементыУправления()
	
	// Реквизиты
	ДобавляемыеРеквизиты = Новый Массив;
	ПутиКДанным          = Новый СписокЗначений;
	ТипыСписковЗначений  = Новый Соответствие;
	ОбработчикиСобытий   = Новый Структура;
	
	ПутиКФормамОтборов.Очистить();
	
	ГрупповыеВидыСравнений = Новый Массив;
	ГрупповыеВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
	ГрупповыеВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	ГрупповыеВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
	ГрупповыеВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);
	
	ПростыеВидыСравнений = Новый Массив;
	ПростыеВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.Заполнено);
	ПростыеВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	КэшНастроекСКД.Очистить();
	КэшНастроек = РеквизитФормыВЗначение("КэшНастроекСКД", Тип("ТаблицаЗначений"));
	
	СвязиПоТипу = Новый ТаблицаЗначений;
	СвязиПоТипу.Колонки.Добавить("ПодчиненныйИдентификатор");
	СвязиПоТипу.Колонки.Добавить("ВедущийПоле");
	СвязиПоТипу.Колонки.Добавить("НомерСубконто");
	
	СвязиПараметровВыбора = Новый ТаблицаЗначений;
	СвязиПараметровВыбора.Колонки.Добавить("ПодчиненныйИдентификатор");
	СвязиПараметровВыбора.Колонки.Добавить("ВедущийПоле");
	СвязиПараметровВыбора.Колонки.Добавить("РеквизитСвязи");
	СвязиПараметровВыбора.Колонки.Добавить("Действие");
	
	// Связи из метаданных
	СвязиОбъектовМетаданных = Новый ТаблицаЗначений;
	СвязиОбъектовМетаданных.Колонки.Добавить("ПодчиненныйРеквизит", Новый ОписаниеТипов("Строка"));
	СвязиОбъектовМетаданных.Колонки.Добавить("ПодчиненныйТип",      Новый ОписаниеТипов("Тип"));
	СвязиОбъектовМетаданных.Колонки.Добавить("ВедущийТип",          Новый ОписаниеТипов("Тип"));
	Для Каждого Подчиненный Из Метаданные.Справочники Цикл
		Для Каждого Владелец Из Подчиненный.Владельцы Цикл
			СтрокаТаблицы = СвязиОбъектовМетаданных.Добавить();
			СтрокаТаблицы.ПодчиненныйРеквизит = "Отбор.Владелец";
			СтрокаТаблицы.ПодчиненныйТип      = Тип(СтрЗаменить(Подчиненный.ПолноеИмя(), ".", "Ссылка."));
			СтрокаТаблицы.ВедущийТип          = Тип(СтрЗаменить(Владелец.ПолноеИмя(), ".", "Ссылка."));
		КонецЦикла;
	КонецЦикла;
	ФормаОтчетаПереопределяемый.ДополнитьСвязиОбъектовМетаданных(СвязиОбъектовМетаданных);
	СвязиОбъектовМетаданных.Колонки.Добавить("ПодчиненныйНайденВСКД",            Новый ОписаниеТипов("Булево"));
	СвязиОбъектовМетаданных.Колонки.Добавить("ПодчиненныйМассивИдентификаторов", Новый ОписаниеТипов("Массив"));
	СвязиОбъектовМетаданных.Колонки.Добавить("ВедущийНайденВСКД",                Новый ОписаниеТипов("Булево"));
	СвязиОбъектовМетаданных.Колонки.Добавить("ВедущийМассивИдентификаторов",     Новый ОписаниеТипов("Массив"));
	
	СписокОтборов = Новый ТаблицаЗначений;
	СписокОтборов.Колонки.Добавить("ИдентификаторОтбора");
	СписокОтборов.Колонки.Добавить("ИдентификаторОбъекта");
	СписокОтборов.Колонки.Добавить("Тип");
	СписокОтборов.Колонки.Добавить("Поле");
	
	КомпоновщикНастроекКД       = Отчет.КомпоновщикНастроек;
	ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	НастройкиКД                 = КомпоновщикНастроекКД.ПолучитьНастройки();
	
	ШаблонТаблицы = Новый Структура;
	ШаблонТаблицы.Вставить("Отображение",              ОтображениеТаблицы.Список);
	ШаблонТаблицы.Вставить("ПоложениеЗаголовка",       ПоложениеЗаголовкаЭлементаФормы.Нет);
	ШаблонТаблицы.Вставить("ПоложениеКоманднойПанели", ПоложениеКоманднойПанелиЭлементаФормы.Нет); 
	ШаблонТаблицы.Вставить("ВертикальныеЛинии",        Ложь);
	ШаблонТаблицы.Вставить("ГоризонтальныеЛинии",      Ложь);
	ШаблонТаблицы.Вставить("Шапка",                    Ложь);
	ШаблонТаблицы.Вставить("Подвал",                   Ложь);
	ШаблонТаблицы.Вставить("ИзменятьПорядокСтрок",     Истина);
	ШаблонТаблицы.Вставить("РастягиватьПоГоризонтали", Истина);
	ШаблонТаблицы.Вставить("РастягиватьПоВертикали",   Истина);
	ШаблонТаблицы.Вставить("Высота",                   3);
	
	ШаблонГруппыСФлажками = Новый Структура;
	ШаблонГруппыСФлажками.Вставить("Вид", ВидГруппыФормы.ОбычнаяГруппа);
	ШаблонГруппыСФлажками.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная);
	ШаблонГруппыСФлажками.Вставить("Отображение", ОтображениеОбычнойГруппы.Линия);
	ШаблонГруппыСФлажками.Вставить("ОтображатьЗаголовок", Истина);
	ШаблонГруппыСФлажками.Вставить("РастягиватьПоГоризонтали", Истина);
	
	ШаблонПоляВводаПроизвольногоПериода = Новый Структура;
	ШаблонПоляВводаПроизвольногоПериода.Вставить("Вид", ВидПоляФормы.ПолеВвода);
	ШаблонПоляВводаПроизвольногоПериода.Вставить("РастягиватьПоГоризонтали", Истина);
	ШаблонПоляВводаПроизвольногоПериода.Вставить("КнопкаВыбора", Истина);
	ШаблонПоляВводаПроизвольногоПериода.Вставить("КнопкаОткрытия", Ложь);
	ШаблонПоляВводаПроизвольногоПериода.Вставить("КнопкаОчистки", Ложь);
	ШаблонПоляВводаПроизвольногоПериода.Вставить("КнопкаРегулирования", Ложь);
	ШаблонПоляВводаПроизвольногоПериода.Вставить("КнопкаСпискаВыбора", Ложь);
	ШаблонПоляВводаПроизвольногоПериода.Вставить("РедактированиеТекста", Истина);
	
	ЕстьБыстрыеНастройки = Ложь;
	
	Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройкиКД.Элементы Цикл
		
		Идентификатор = ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки;
		ЭлементИдентификатор = ПривестиИдентификаторКИмени(Идентификатор);
		
		СтрокаКэша = КэшНастроек.Добавить();
		СтрокаКэша.Идентификатор = Идентификатор;
		СтрокаКэша.Представление = Заголовок;
		СтрокаКэша.Пользовательская = ПользовательскиеНастройкиКД.ПолучитьИдентификаторПоОбъекту(ПользовательскаяНастройка);
		
		ОбщаяНастройка = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(НастройкиКД, Идентификатор);
		Если ОбщаяНастройка = Неопределено
			ИЛИ ОбщаяНастройка.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ Тогда 
			Продолжить;
		КонецЕсли;
		
		ТипОбщейНастройки = ТипЗнч(ОбщаяНастройка);
		
		Если ТипОбщейНастройки = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			СтрокаКэша.ЭтоОтбор = Истина;
			СтрокаКэша.ПолеКД   = ОбщаяНастройка.ЛевоеЗначение;
			СтрокаКэша.Общая    = ОбщаяНастройка;
			ДоступнаяНастройка  = ФункцииОтчетовКлиентСервер.НайтиДоступнуюНастройку(НастройкиКД, ОбщаяНастройка, Истина);
			
			Если ДоступнаяНастройка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ТипОбщейНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			СтрокаКэша.ЭтоПараметр = Истина;
			СтрокаКэша.ПолеКД      = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(ОбщаяНастройка.Параметр));
			СтрокаКэша.Общая       = ОбщаяНастройка;
			ДоступнаяНастройка     = ФункцииОтчетовКлиентСервер.НайтиДоступнуюНастройку(НастройкиКД, ОбщаяНастройка, Ложь);
			
			Если ДоступнаяНастройка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			ДоступнаяНастройка = Неопределено;
		КонецЕсли;
		
		ЕстьБыстрыеНастройки = Истина;
		
		// Переменные цикла
		ПараметрыВыбора = Новый Массив;
		
		// Связи - Объявление
		Если ДоступнаяНастройка <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДоступнаяНастройка.СвязьПоТипу) Тогда
				
				СтрокаСвязи = СвязиПоТипу.Добавить();
				СтрокаСвязи.ПодчиненныйИдентификатор = Идентификатор;
				СтрокаСвязи.ВедущийПоле              = ДоступнаяНастройка.СвязьПоТипу.Поле;
				СтрокаСвязи.НомерСубконто            = ДоступнаяНастройка.СвязьПоТипу.ЭлементСвязи;
				
			КонецЕсли;
			
			Для Каждого СтрокаСвязи Из ДоступнаяНастройка.ПолучитьСвязиПараметровВыбора() Цикл
				
				СтрокаСвязиПараметров = СвязиПараметровВыбора.Добавить();
				СтрокаСвязиПараметров.ПодчиненныйИдентификатор = Идентификатор;
				СтрокаСвязиПараметров.ВедущийПоле              = СтрокаСвязи.Поле;
				СтрокаСвязиПараметров.РеквизитСвязи            = СтрокаСвязи.Имя;
				СтрокаСвязиПараметров.Действие                 = СтрокаСвязи.ИзменениеЗначения;
				
			КонецЦикла;
			
			Для Каждого ПараметрВыбораКД Из ДоступнаяНастройка.ПолучитьПараметрыВыбора() Цикл
				ПараметрыВыбора.Добавить(Новый ПараметрВыбора(ПараметрВыбораКД.Имя, ПараметрВыбораКД.Значение));
			КонецЦикла;
			
		КонецЕсли;
		
		// Заголовок настройки
		СтруктураПредставлений = Новый Структура("Представление, ПредставлениеПользовательскойНастройки", "", "");
		ЗаполнитьЗначенияСвойств(СтруктураПредставлений, ОбщаяНастройка);
		Если ЗначениеЗаполнено(СтруктураПредставлений.ПредставлениеПользовательскойНастройки) Тогда
			ЭлементЗаголовок = СтруктураПредставлений.ПредставлениеПользовательскойНастройки;
		ИначеЕсли ЗначениеЗаполнено(СтруктураПредставлений.Представление) Тогда
			ЭлементЗаголовок = СтруктураПредставлений.Представление;
		ИначеЕсли ДоступнаяНастройка <> Неопределено И ЗначениеЗаполнено(ДоступнаяНастройка.Заголовок) Тогда
			ЭлементЗаголовок = ДоступнаяНастройка.Заголовок;
		Иначе
			
			Если ТипОбщейНастройки = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				ЭлементЗаголовок = Строка(ПользовательскаяНастройка.ТипГруппы);
			ИначеЕсли ТипОбщейНастройки = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ЭлементЗаголовок = Строка(ОбщаяНастройка.ЛевоеЗначение);
			ИначеЕсли ТипОбщейНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ЭлементЗаголовок = Строка(ОбщаяНастройка.Параметр);
			ИначеЕсли ТипОбщейНастройки = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
				ЭлементЗаголовок = НСтр("ru = 'Оформление'");
				Если НЕ ПустаяСтрока(Строка(ПользовательскаяНастройка.Оформление)) Тогда
					ЭлементЗаголовок = ЭлементЗаголовок +" ("+ НРег(Строка(ПользовательскаяНастройка.Оформление)) +")";
				КонецЕсли;
			ИначеЕсли ТипОбщейНастройки = Тип("ГруппировкаКомпоновкиДанных") Тогда
				Суффикс = СокрЛП(Строка(ОбщаяНастройка.ПоляГруппировки));
				ЭлементЗаголовок = НСтр("ru = 'Группировка'") + ?(Суффикс = "", "", " '" + Суффикс + "'");
			ИначеЕсли ТипОбщейНастройки = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
				Суффикс = СокрЛП(Строка(ОбщаяНастройка.ПоляГруппировки));
				ЭлементЗаголовок = НСтр("ru = 'Группировка диаграммы'") + ?(Суффикс = "", "", " '" + Суффикс + "'");
			ИначеЕсли ТипОбщейНастройки = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
				ЭлементЗаголовок = НСтр("ru = 'Выбранные поля'");
			ИначеЕсли ТипОбщейНастройки = Тип("ПорядокКомпоновкиДанных") Тогда
				ЭлементЗаголовок = НСтр("ru = 'Сортировка'");
			ИначеЕсли ТипОбщейНастройки = Тип("ОтборКомпоновкиДанных") Тогда
				ЭлементЗаголовок = НСтр("ru = 'Отбор'");
			ИначеЕсли ТипОбщейНастройки = Тип("УсловноеОформлениеКомпоновкиДанных") Тогда
				ЭлементЗаголовок = НСтр("ru = 'Условное оформление'");
			ИначеЕсли ТипОбщейНастройки = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
				ЭлементЗаголовок = НСтр("ru = 'Структура настроек'");
			ИначеЕсли ТипОбщейНастройки = Тип("ТаблицаКомпоновкиДанных") Тогда
				ЭлементЗаголовок = НСтр("ru = 'Таблица'");
			ИначеЕсли ТипОбщейНастройки = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
				ЭлементЗаголовок = НСтр("ru = 'Группировка таблицы'");
			ИначеЕсли ТипОбщейНастройки = Тип("ДиаграммаКомпоновкиДанных") Тогда
				ЭлементЗаголовок = НСтр("ru = 'Диаграмма'");
			ИначеЕсли ТипОбщейНастройки = Тип("ГруппировкаДиаграммыМакетаКомпоновкиДанных") Тогда
				ЭлементЗаголовок = НСтр("ru = 'Группировка диаграммы макета'");
			Иначе
				ЭлементЗаголовок = Строка(ПользовательскаяНастройка);
			КонецЕсли;
			
		КонецЕсли;
		ЭлементЗаголовок = СокрЛП(ЭлементЗаголовок);
		
		СменитьТипНаГруппуЭлементовОтбора = ЗначениеЗаполнено(СтруктураПредставлений.Представление);
		
		Если ТипОбщейНастройки = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
			ИЛИ СменитьТипНаГруппуЭлементовОтбора Тогда
			
			ИспользованиеИмя = "ГруппаОтбора_Использование_" + ЭлементИдентификатор;
			
			// Реквизиты
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИспользованиеИмя, Новый ОписаниеТипов("Булево")));
			
			// Связь реквизитов с элементами
			ПутиКДанным.Добавить(ИспользованиеИмя, ИспользованиеИмя);
			
			// Имена реквизитов
			СтрокаКэша.ИмяРеквизитаИспользование = ИспользованиеИмя;
			СтрокаКэша.ИмяРеквизита              = ИспользованиеИмя;
			СтрокаКэша.ИмяЭлемента               = ИспользованиеИмя;
			
			// Флажок
			ИспользованиеОтбора = Элементы.Добавить(ИспользованиеИмя, Тип("ПолеФормы"), Элементы.ПараметрыИОтборы);
			ИспользованиеОтбора.Вид                = ВидПоляФормы.ПолеФлажка;
			ИспользованиеОтбора.Заголовок          = ЭлементЗаголовок;
			ИспользованиеОтбора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ИспользованиеОтбора.УстановитьДействие("ПриИзменении", "Подключаемый_ГруппаЭлементовОтбораКомпоновкиДанных_Использование_ПриИзменении");
			
		ИначеЕсли ТипОбщейНастройки = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			ЭтоГрупповойВидСравнения = (ГрупповыеВидыСравнений.Найти(ОбщаяНастройка.ВидСравнения) <> Неопределено);
			ЭтоПростойВидСравнения = (ПростыеВидыСравнений.Найти(ОбщаяНастройка.ВидСравнения) <> Неопределено);
			
			СодержитТипДата = Ложь;
			СодержитТипБулево = Ложь;
			
			ДобавляемыеТипы = Новый Массив;
			ВычитаемыеТипы = Новый Массив;
			ДоступнаяНастройкаТипы = ДоступнаяНастройка.ТипЗначения.Типы();
			Для Каждого Тип Из ДоступнаяНастройкаТипы Цикл
				Если Тип = Тип("ПолеКомпоновкиДанных") Тогда
					ВычитаемыеТипы.Добавить(Тип);
				КонецЕсли;
				
				Если Тип = Тип("Дата") Тогда
					СодержитТипДата = Истина;
				ИначеЕсли Тип = Тип("Булево") Тогда
					СодержитТипБулево = Истина;
				ИначеЕсли Тип = Тип("Тип") И НЕ ЭтоГрупповойВидСравнения Тогда
					СтрокаКэша.СодержитТипТип = Истина;
					ДобавляемыеТипы.Добавить(Тип("ОписаниеТипов"));
					ВычитаемыеТипы.Добавить(Тип("Тип"));
				КонецЕсли;
				
				ЗарегистрироватьСвязиВедущихИПодчиненных(СвязиОбъектовМетаданных, Тип, Идентификатор);
				Если ЭтоГрупповойВидСравнения Тогда
					ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
					Если ОбъектМетаданных <> Неопределено Тогда
						СтрокаОтбора = ПутиКФормамОтборов.Добавить();
						СтрокаОтбора.Отбор      = Идентификатор;
						СтрокаОтбора.Тип        = Тип;
						СтрокаОтбора.ПутьКФорме = ОбъектМетаданных.ПолноеИмя() + ".ФормаВыбора";
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ОтборОписаниеТипов = Новый ОписаниеТипов(ДоступнаяНастройка.ТипЗначения, ДобавляемыеТипы, ВычитаемыеТипы);
			
			КоличествоТипов = ОтборОписаниеТипов.Типы().Количество();
			Если КоличествоТипов = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СодержитДругиеТипы = НЕ (КоличествоТипов = 1 И (СодержитТипДата ИЛИ СодержитТипБулево ИЛИ СтрокаКэша.СодержитТипТип));
			
			ВыборИзСписка = (
				ТипЗнч(ДоступнаяНастройка) = Тип("ДоступноеПолеОтбораКомпоновкиДанных")
				И ТипЗнч(ДоступнаяНастройка.ДоступныеЗначения) = Тип("СписокЗначений")
				И ДоступнаяНастройка.ДоступныеЗначения.Количество() > 0
			);
			
			ЭтоТрехрежимныйФлажок = СодержитТипБулево И НЕ СодержитДругиеТипы;
			
			ИспользованиеОтбораИмя = "ИспользованиеОтбора_" + ЭлементИдентификатор;
			ОтборИмя               = "Отбор_"               + ЭлементИдентификатор;
			
			Если ЭтоТрехрежимныйФлажок Тогда
				// Один реквизит (число) вместо двух (булево).
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ОтборИмя, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0))));
				
				// Связь реквизитов с элементами
				ПутиКДанным.Добавить(ОтборИмя, ОтборИмя);
				
				// Имена реквизитов
				СтрокаКэша.ИмяРеквизита = ОтборИмя;
			Иначе
				// Реквизиты
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИспользованиеОтбораИмя, Новый ОписаниеТипов("Булево")));
				Если ЭтоГрупповойВидСравнения Тогда
					ТипыСписковЗначений.Вставить(ОтборИмя, ОтборОписаниеТипов);
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ОтборИмя, Новый ОписаниеТипов("СписокЗначений")));
				Иначе
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ОтборИмя, ОтборОписаниеТипов));
				КонецЕсли;
				
				// Связь реквизитов с элементами
				ПутиКДанным.Добавить(ИспользованиеОтбораИмя, ИспользованиеОтбораИмя);
				
				// Имена реквизитов
				СтрокаКэша.ИмяРеквизитаИспользование = ИспользованиеОтбораИмя;
				СтрокаКэша.ИмяРеквизита              = ОтборИмя;
			КонецЕслИ;
			
			ГруппаОтбора = Элементы.Добавить("ГруппаОтбора_" + ЭлементИдентификатор, Тип("ГруппаФормы"), Элементы.ПараметрыИОтборы);
			ГруппаОтбора.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаОтбора.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаОтбора.Отображение         = ОтображениеОбычнойГруппы.Нет;
			ГруппаОтбора.Заголовок           = ЭлементЗаголовок;
			ГруппаОтбора.ОтображатьЗаголовок = Ложь;
			
			// Элементы и группы
			Если ЭтоГрупповойВидСравнения Тогда
				
				ОтборЗначениеИмя = "Отбор_Значение_" + ЭлементИдентификатор;
				
				ПутиКДанным.Добавить(ОтборИмя, ОтборИмя);
				ПутиКДанным.Добавить(ОтборЗначениеИмя, ОтборИмя + ".Значение");
				
				СтрокаКэша.ИмяЭлемента = ОтборЗначениеИмя;
				
				КомандаПодбор = Команды.Добавить("Подбор_" + ЭлементИдентификатор);
				КомандаПодбор.Действие    = "Подключаемый_ЭлементОтбораКомпоновкиДанных_Таблица_Подбор";
				КомандаПодбор.Заголовок   = НСтр("ru = 'Подбор'");
				КомандаПодбор.Отображение = ОтображениеКнопки.Текст;
				
				ГруппаОтбора.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				
				ГруппаПанелиОтбора = Элементы.Добавить("ГруппаПанелиОтбора_" + ЭлементИдентификатор, Тип("ГруппаФормы"), ГруппаОтбора);
				ГруппаПанелиОтбора.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаПанелиОтбора.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				ГруппаПанелиОтбора.Отображение         = ОтображениеОбычнойГруппы.Нет;
				ГруппаПанелиОтбора.ОтображатьЗаголовок = Ложь;
				
				ФлажокИспользование = Элементы.Добавить(ИспользованиеОтбораИмя, Тип("ПолеФормы"), ГруппаПанелиОтбора);
				ФлажокИспользование.Вид                = ВидПоляФормы.ПолеФлажка;
				ФлажокИспользование.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
				ФлажокИспользование.Заголовок          = ЭлементЗаголовок + ":";
				ФлажокИспользование.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементОтбораКомпоновкиДанных_Использование_ПриИзменении");
				Если ОбщаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
					ИЛИ ОбщаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
					ФлажокИспользование.Заголовок = ЭлементЗаголовок + " (" + НСтр("ru = 'за исключением выбранных'") + "):";
				КонецЕсли;
				
				ПустаяДекорация = Элементы.Добавить("ПустаяДекорация_" + ЭлементИдентификатор, Тип("ДекорацияФормы"), ГруппаПанелиОтбора);
				ПустаяДекорация.Вид                      = ВидДекорацииФормы.Надпись;
				ПустаяДекорация.Заголовок                = " ";
				ПустаяДекорация.РастягиватьПоГоризонтали = Истина;
				
				ПанельКнопокОтбора = Элементы.Добавить("ПанельКнопокОтбора_" + ЭлементИдентификатор, Тип("ГруппаФормы"), ГруппаПанелиОтбора);
				ПанельКнопокОтбора.Вид                      = ВидГруппыФормы.КоманднаяПанель;
				ПанельКнопокОтбора.ГоризонтальноеПоложение  = ГоризонтальноеПоложениеЭлемента.Право;
				
				КнопкаПодбор = Элементы.Добавить("Подбор_" + ЭлементИдентификатор, Тип("КнопкаФормы"), ПанельКнопокОтбора);
				КнопкаПодбор.ИмяКоманды = "Подбор_" + ЭлементИдентификатор;
				
				ТаблицаОтбора = Элементы.Добавить(ОтборИмя, Тип("ТаблицаФормы"), ГруппаОтбора);
				ЗаполнитьЗначенияСвойств(ТаблицаОтбора, ШаблонТаблицы);
				
				СобытияТаблицы = Новый Структура;
				СобытияТаблицы.Вставить("ПриИзменении",    "Подключаемый_ЭлементОтбораКомпоновкиДанных_Таблица_ПриИзменении");
				СобытияТаблицы.Вставить("ОбработкаВыбора", "Подключаемый_ЭлементОтбораКомпоновкиДанных_Таблица_ОбработкаВыбора");
				ОбработчикиСобытий.Вставить(ОтборИмя, СобытияТаблицы);
				
				КолонкаЗначение = Элементы.Добавить(ОтборЗначениеИмя, Тип("ПолеФормы"), ТаблицаОтбора);
				КолонкаЗначение.Вид = ВидПоляФормы.ПолеВвода;
				
				ЗаполнитьЗначенияСвойств(КолонкаЗначение, ДоступнаяНастройка, "БыстрыйВыбор, Маска, ФормаВыбора, ФорматРедактирования");
				
				Если ВыборИзСписка Тогда
					КолонкаЗначение.РежимВыбораИзСписка = Истина;
					Для Каждого ЭлементСписка Из ДоступнаяНастройка.ДоступныеЗначения Цикл
						ЭлементСпискаВыбора = КолонкаЗначение.СписокВыбора.Добавить();
						ЗаполнитьЗначенияСвойств(ЭлементСпискаВыбора, ЭлементСписка);
					КонецЦикла;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДоступнаяНастройка.ФормаВыбора) Тогда
					СтрокаОтбора = ПутиКФормамОтборов.Добавить();
					СтрокаОтбора.Отбор      = Идентификатор;
					СтрокаОтбора.Тип        = ТипЗнч(Неопределено);
					СтрокаОтбора.ПутьКФорме = ДоступнаяНастройка.ФормаВыбора;
				КонецЕсли;
				
				Если ПараметрыВыбора.Количество() > 0 Тогда
					КолонкаЗначение.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
				КонецЕсли;
				
			ИначеЕсли ЭтоПростойВидСравнения Тогда
				
				СтрокаКэша.ИмяЭлемента = ОтборИмя;
				
				ФлажокИспользование = Элементы.Добавить(ИспользованиеОтбораИмя, Тип("ПолеФормы"), ГруппаОтбора);
				ФлажокИспользование.Вид                = ВидПоляФормы.ПолеФлажка;
				ФлажокИспользование.Заголовок          = НСтр("ru = 'Поле'") + " """ + ЭлементЗаголовок + """ " + НРег(Строка(ОбщаяНастройка.ВидСравнения));
				ФлажокИспользование.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
				ФлажокИспользование.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементОтбораКомпоновкиДанных_Использование_ПриИзменении");
				
			ИначеЕсли ЭтоТрехрежимныйФлажок Тогда
				
				СтрокаКэша.ИмяЭлемента = ОтборИмя;
				
				ЗначениеОтбора = Элементы.Добавить(ОтборИмя, Тип("ПолеФормы"), ГруппаОтбора);
				ЗначениеОтбора.Вид                 = ВидПоляФормы.ПолеФлажка;
				ЗначениеОтбора.Заголовок           = ЭлементЗаголовок;
				ЗначениеОтбора.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Право;
				ЗначениеОтбора.ТриСостояния        = Истина;
				ЗначениеОтбора.УстановитьДействие("ПриИзменении", "Подключаемый_ТрехрежимныйФлажокОтбора_Значение_ПриИзменении");
				
			Иначе
				
				ПутиКДанным.Добавить(ОтборИмя, ОтборИмя);
				
				СтрокаКэша.ИмяЭлемента = ОтборИмя;
				
				// Элементы
				ФлажокИспользование = Элементы.Добавить(ИспользованиеОтбораИмя, Тип("ПолеФормы"), ГруппаОтбора);
				ФлажокИспользование.Вид                = ВидПоляФормы.ПолеФлажка;
				ФлажокИспользование.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
				ФлажокИспользование.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементОтбораКомпоновкиДанных_Использование_ПриИзменении");
				
				Если ОбщаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
					ИЛИ ОбщаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
					ФлажокИспользование.Заголовок = ЭлементЗаголовок + ":";
				Иначе
					ФлажокИспользование.Заголовок = ЭлементЗаголовок + " (" + НРег(Строка(ОбщаяНастройка.ВидСравнения)) + "):";
				КонецЕсли;
				
				ЗначениеОтбора = Элементы.Добавить(ОтборИмя, Тип("ПолеФормы"), ГруппаОтбора);
				ЗначениеОтбора.Вид                 = ВидПоляФормы.ПолеВвода;
				ЗначениеОтбора.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Нет;
				ЗначениеОтбора.КнопкаВыбора        = Истина;
				ЗначениеОтбора.КнопкаОткрытия      = Ложь;
				ЗначениеОтбора.КнопкаОчистки       = СодержитДругиеТипы;
				ЗначениеОтбора.КнопкаРегулирования = Ложь;
				ЗначениеОтбора.КнопкаСпискаВыбора  = Ложь;
				ЗначениеОтбора.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементОтбораКомпоновкиДанных_Значение_ПриИзменении");
				
				ЗаполнитьЗначенияСвойств(ЗначениеОтбора, ДоступнаяНастройка, "БыстрыйВыбор, Маска, ФормаВыбора, ФорматРедактирования");
				
				Если ВыборИзСписка Тогда
					ЗначениеОтбора.РежимВыбораИзСписка = Истина;
					Для Каждого ЭлементСписка Из ДоступнаяНастройка.ДоступныеЗначения Цикл
						ЭлементСпискаВыбора = ЗначениеОтбора.СписокВыбора.Добавить();
						ЗаполнитьЗначенияСвойств(ЭлементСпискаВыбора, ЭлементСписка);
						Если ТипЗнч(ЭлементСпискаВыбора.Значение) = Тип("Тип") Тогда
							МассивТипов = Новый Массив;
							МассивТипов.Добавить(ЭлементСпискаВыбора.Значение);
							ЭлементСпискаВыбора.Значение = Новый ОписаниеТипов(МассивТипов);
						КонецЕсли;
					КонецЦикла;
					ЗначениеОтбора.РастягиватьПоГоризонтали = Истина;
				КонецЕсли;
				
				Если ПараметрыВыбора.Количество() > 0 Тогда
					ЗначениеОтбора.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипОбщейНастройки = Тип("ГруппировкаКомпоновкиДанных")
			ИЛИ ТипОбщейНастройки = Тип("ТаблицаКомпоновкиДанных")
			ИЛИ ТипОбщейНастройки = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			ИЛИ ТипОбщейНастройки = Тип("ДиаграммаКомпоновкиДанных")
			ИЛИ ТипОбщейНастройки = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			
			ИспользованиеЭлементаСтруктурыИмя = "ИспользованиеЭлементаСтруктуры_" + ЭлементИдентификатор;
			
			// Реквизиты
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИспользованиеЭлементаСтруктурыИмя, Новый ОписаниеТипов("Булево")));
			
			// Связь реквизитов с элементами
			ПутиКДанным.Добавить(ИспользованиеЭлементаСтруктурыИмя, ИспользованиеЭлементаСтруктурыИмя);
			
			// Имена реквизитов
			СтрокаКэша.ИмяРеквизитаИспользование = ИспользованиеЭлементаСтруктурыИмя;
			СтрокаКэша.ИмяРеквизита              = ИспользованиеЭлементаСтруктурыИмя;
			СтрокаКэша.ИмяЭлемента               = ИспользованиеЭлементаСтруктурыИмя;
			
			// Элементы
			ИспользованиеГруппировки = Элементы.Добавить(ИспользованиеЭлементаСтруктурыИмя, Тип("ПолеФормы"), Элементы.Группировки);
			ИспользованиеГруппировки.Вид                = ВидПоляФормы.ПолеФлажка;
			ИспользованиеГруппировки.Заголовок          = ЭлементЗаголовок;
			ИспользованиеГруппировки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ИспользованиеГруппировки.УстановитьДействие("ПриИзменении", "Подключаемый_Группировки_Использование_ПриИзменении");
			
		ИначеЕсли ТипОбщейНастройки = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
			
			УсловноеОформлениеИмя = "УсловноеОформление_" + ЭлементИдентификатор;
			
			// Реквизиты
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(УсловноеОформлениеИмя, Новый ОписаниеТипов("Булево")));
			
			// Связь реквизитов с элементами
			ПутиКДанным.Добавить(УсловноеОформлениеИмя, УсловноеОформлениеИмя);
			
			// Имена реквизитов
			СтрокаКэша.ИмяРеквизитаИспользование = УсловноеОформлениеИмя;
			СтрокаКэша.ИмяРеквизита              = УсловноеОформлениеИмя;
			СтрокаКэша.ИмяЭлемента               = УсловноеОформлениеИмя;
			
			// Элементы
			ФлагУсловногоОформления = Элементы.Добавить(УсловноеОформлениеИмя, Тип("ПолеФормы"), Элементы.Оформления);
			ФлагУсловногоОформления.Вид                 = ВидПоляФормы.ПолеФлажка;
			ФлагУсловногоОформления.Заголовок           = ЭлементЗаголовок;
			ФлагУсловногоОформления.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Право;
			ФлагУсловногоОформления.УстановитьДействие("ПриИзменении", "Подключаемый_ЭлементУсловногоОформленияКомпоновкиДанных_Использование_ПриИзменении");
			
		ИначеЕсли ТипОбщейНастройки = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
			
			ГруппаИмя                  = "ГруппаПолейВыбора_" + ЭлементИдентификатор;
			ТаблицаИмя                 = "ТаблицаПолейВыбора_" + ЭлементИдентификатор;
			КолонкаИспользованиеИмя    = "ТаблицаПолейВыбора_Использование_" + ЭлементИдентификатор;
			КолонкаПредставлениеИмя    = "ТаблицаПолейВыбора_Представление_" + ЭлементИдентификатор;
			КомандаПереместитьВверхИмя = "ТаблицаПолейВыбора_ПереместитьВверх_" + ЭлементИдентификатор;
			КомандаПереместитьВнизИмя  = "ТаблицаПолейВыбора_ПереместитьВниз_" + ЭлементИдентификатор;
			
			// Реквизиты
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ТаблицаИмя, Новый ОписаниеТипов("ТаблицаЗначений")));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Идентификатор", Новый ОписаниеТипов("Строка"), ТаблицаИмя));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Использование", Новый ОписаниеТипов("Булево"), ТаблицаИмя));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Представление", Новый ОписаниеТипов("Строка"), ТаблицаИмя));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИдентификаторРодителя", Новый ОписаниеТипов("Строка"), ТаблицаИмя));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЭтоГруппа", Новый ОписаниеТипов("Булево"), ТаблицаИмя));
			
			// Связь реквизитов с элементами
			ПутиКДанным.Добавить(ТаблицаИмя, ТаблицаИмя);
			ПутиКДанным.Добавить(КолонкаИспользованиеИмя, ТаблицаИмя + ".Использование");
			ПутиКДанным.Добавить(КолонкаПредставлениеИмя, ТаблицаИмя + ".Представление");
			
			// Имена реквизитов
			СтрокаКэша.ИмяРеквизитаИспользование = "";
			СтрокаКэша.ИмяРеквизита              = ТаблицаИмя;
			СтрокаКэша.ИмяЭлемента               = ТаблицаИмя;
			
			// Команды
			КомандаПереместитьВверх = Команды.Добавить(КомандаПереместитьВверхИмя);
			КомандаПереместитьВверх.Действие    = "Подключаемый_ВыбранныеПоляКомпоновкиДанных_ПереместитьВверх";
			КомандаПереместитьВверх.Картинка    = БиблиотекаКартинок.ПереместитьВверх;
			КомандаПереместитьВверх.Отображение = ОтображениеКнопки.Картинка;
			
			КомандаПереместитьВниз = Команды.Добавить(КомандаПереместитьВнизИмя);
			КомандаПереместитьВниз.Действие    = "Подключаемый_ВыбранныеПоляКомпоновкиДанных_ПереместитьВниз";
			КомандаПереместитьВниз.Картинка    = БиблиотекаКартинок.ПереместитьВниз;
			КомандаПереместитьВниз.Отображение = ОтображениеКнопки.Картинка;
			
			// Группы и элементы
			Группа = Элементы.Добавить(ГруппаИмя, Тип("ГруппаФормы"), Элементы.ВыбранныеПоля);
			ЗаполнитьЗначенияСвойств(Группа, ШаблонГруппыСФлажками);
			Группа.Заголовок = ЭлементЗаголовок + ":";
			
			ТаблицаПолейВыбора = Элементы.Добавить(ТаблицаИмя, Тип("ТаблицаФормы"), Группа);
			ЗаполнитьЗначенияСвойств(ТаблицаПолейВыбора, ШаблонТаблицы);
			ТаблицаПолейВыбора.ИзменятьСоставСтрок = Ложь;
			
			КолонкаИспользование = Элементы.Добавить(КолонкаИспользованиеИмя, Тип("ПолеФормы"), ТаблицаПолейВыбора);
			КолонкаИспользование.Вид                 = ВидПоляФормы.ПолеФлажка;
			КолонкаИспользование.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
			КолонкаИспользование.УстановитьДействие("ПриИзменении", "Подключаемый_ВыбранныеПоляКомпоновкиДанных_КолонкаИспользование_ПриИзменении");
			
			КолонкаПредставление = Элементы.Добавить(КолонкаПредставлениеИмя, Тип("ПолеФормы"), ТаблицаПолейВыбора);
			КолонкаПредставление.Вид            = ВидПоляФормы.ПолеВвода;
			КолонкаПредставление.ТолькоПросмотр = Истина;
			
			// Командная панель
			ТаблицаКоманднаяПанель = Элементы.Добавить(ТаблицаИмя + "_КоманднаяПанель", Тип("ГруппаФормы"), Группа);
			ТаблицаКоманднаяПанель.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			ТаблицаКоманднаяПанель.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ТаблицаКоманднаяПанель.Отображение         = ОтображениеОбычнойГруппы.Нет;
			ТаблицаКоманднаяПанель.ОтображатьЗаголовок = Ложь;
			
			// Кнопки
			КнопкаПереместитьВверх = Элементы.Добавить(КомандаПереместитьВверхИмя, Тип("КнопкаФормы"), ТаблицаКоманднаяПанель);
			КнопкаПереместитьВверх.ИмяКоманды = КомандаПереместитьВверхИмя;
			КнопкаПереместитьВверх.Заголовок  = НСтр("ru = 'Переместить группировку вверх'");
			
			КнопкаПереместитьВниз = Элементы.Добавить(КомандаПереместитьВнизИмя, Тип("КнопкаФормы"), ТаблицаКоманднаяПанель);
			КнопкаПереместитьВниз.ИмяКоманды = КомандаПереместитьВнизИмя;
			КнопкаПереместитьВниз.Заголовок  = НСтр("ru = 'Переместить группировку вниз'");
			
			// Условное оформление для групп
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить(); 
			ЭлементУсловногоОформления.Использование = Истина;
			
			ОтборОформления = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборОформления.Использование = Истина;
			ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ТаблицаИмя + ".ЭтоГруппа");
			ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборОформления.ПравоеЗначение = Истина;
			
			ПолеОформление = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
			ПолеОформление.Использование = Истина;
			ПолеОформление.Поле          = Новый ПолеКомпоновкиДанных(ТаблицаИмя);
			
			ШрифтОформления = ЭлементУсловногоОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт")); 
			ШрифтОформления.Значение      = Новый Шрифт(ШрифтОформления.Значение, , , Истина, , Истина, ); 
			ШрифтОформления.Использование = Истина;
			
		ИначеЕсли ТипОбщейНастройки = Тип("ПорядокКомпоновкиДанных") Тогда
			
			ГруппаИмя                  = "ГруппаПорядка_" + ЭлементИдентификатор;
			ТаблицаИмя                 = "ТаблицаПорядка_" + ЭлементИдентификатор;
			КолонкаИспользованиеИмя    = "ТаблицаПорядка_Использование_" + ЭлементИдентификатор;
			КолонкаПредставлениеИмя    = "ТаблицаПорядка_Представление_" + ЭлементИдентификатор;
			КомандаПереместитьВверхИмя = "ТаблицаПорядка_ПереместитьВверх_" + ЭлементИдентификатор;
			КомандаПереместитьВнизИмя  = "ТаблицаПорядка_ПереместитьВниз_" + ЭлементИдентификатор;
			
			// Реквизиты
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ТаблицаИмя, Новый ОписаниеТипов("ТаблицаЗначений")));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Использование", Новый ОписаниеТипов("Булево"), ТаблицаИмя));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Представление", Новый ОписаниеТипов("Строка"), ТаблицаИмя));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Идентификатор", Новый ОписаниеТипов("Строка"), ТаблицаИмя));
			
			// Связь реквизитов с элементами
			ПутиКДанным.Добавить(ТаблицаИмя, ТаблицаИмя);
			ПутиКДанным.Добавить(КолонкаИспользованиеИмя, ТаблицаИмя + ".Использование");
			ПутиКДанным.Добавить(КолонкаПредставлениеИмя, ТаблицаИмя + ".Представление");
			
			// Имена реквизитов
			СтрокаКэша.ИмяРеквизитаИспользование = "";
			СтрокаКэша.ИмяРеквизита              = ТаблицаИмя;
			СтрокаКэша.ИмяЭлемента               = ТаблицаИмя;
			
			// Команды
			КомандаПереместитьВверх = Команды.Добавить(КомандаПереместитьВверхИмя);
			КомандаПереместитьВверх.Действие    = "Подключаемый_ПорядокКомпоновкиДанных_ПереместитьВверх";
			КомандаПереместитьВверх.Картинка    = БиблиотекаКартинок.ПереместитьВверх;
			КомандаПереместитьВверх.Отображение = ОтображениеКнопки.Картинка;
			
			КомандаПереместитьВверх = Команды.Добавить(КомандаПереместитьВнизИмя);
			КомандаПереместитьВверх.Действие    = "Подключаемый_ПорядокКомпоновкиДанных_ПереместитьВниз";
			КомандаПереместитьВверх.Картинка    = БиблиотекаКартинок.ПереместитьВниз;
			КомандаПереместитьВверх.Отображение = ОтображениеКнопки.Картинка;
			
			// Группы и элементы
			Группа = Элементы.Добавить(ГруппаИмя, Тип("ГруппаФормы"), Элементы.Порядки);
			ЗаполнитьЗначенияСвойств(Группа, ШаблонГруппыСФлажками);
			Группа.Заголовок = ЭлементЗаголовок + ":";
			
			ТаблицаПолейВыбора = Элементы.Добавить(ТаблицаИмя, Тип("ТаблицаФормы"), Группа);
			ЗаполнитьЗначенияСвойств(ТаблицаПолейВыбора, ШаблонТаблицы);
			ТаблицаПолейВыбора.ИзменятьСоставСтрок = Ложь;
			
			КолонкаИспользование = Элементы.Добавить(КолонкаИспользованиеИмя, Тип("ПолеФормы"), ТаблицаПолейВыбора);
			КолонкаИспользование.Вид                 = ВидПоляФормы.ПолеФлажка;
			КолонкаИспользование.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
			КолонкаИспользование.УстановитьДействие("ПриИзменении", "Подключаемый_ПорядокКомпоновкиДанных_КолонкаИспользование_ПриИзменении");
			
			КолонкаПредставление = Элементы.Добавить(КолонкаПредставлениеИмя, Тип("ПолеФормы"), ТаблицаПолейВыбора);
			КолонкаПредставление.Вид            = ВидПоляФормы.ПолеВвода;
			КолонкаПредставление.ТолькоПросмотр = Истина;
			
			// Командная панель
			ТаблицаКоманднаяПанель = Элементы.Добавить("ТаблицаПорядка_КоманднаяПанель_" + ЭлементИдентификатор, Тип("ГруппаФормы"), Группа);
			ТаблицаКоманднаяПанель.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			ТаблицаКоманднаяПанель.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ТаблицаКоманднаяПанель.Отображение         = ОтображениеОбычнойГруппы.Нет;
			ТаблицаКоманднаяПанель.ОтображатьЗаголовок = Ложь;
			
			// Кнопки
			КнопкаВверх = Элементы.Добавить(КомандаПереместитьВверхИмя, Тип("КнопкаФормы"), ТаблицаКоманднаяПанель);
			КнопкаВверх.ИмяКоманды = КомандаПереместитьВверхИмя;
			КнопкаВверх.Заголовок  = НСтр("ru = 'Переместить строку вверх'");
			
			КнопкаВниз = Элементы.Добавить(КомандаПереместитьВнизИмя, Тип("КнопкаФормы"), ТаблицаКоманднаяПанель);
			КнопкаВниз.ИмяКоманды = КомандаПереместитьВнизИмя;
			КнопкаВниз.Заголовок  = НСтр("ru = 'Переместить строку вниз'");
			
		ИначеЕсли ТипОбщейНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			
			Если ТипЗнч(ПользовательскаяНастройка.Значение) = Тип("СтандартныйПериод") Тогда
				
				ВидПериодаИмя      = "Период_ВидПериода_"             + ЭлементИдентификатор;
				ПериодИмя          = "Период_Стандартный_Значение_"   + ЭлементИдентификатор;
				ПериодНачалоИмя    = "Период_Произвольный_Начало_"    + ЭлементИдентификатор;
				ПериодОкончаниеИмя = "Период_Произвольный_Окончание_" + ЭлементИдентификатор;
				
				// Реквизиты
				ОписаниеТипаДата = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ВидПериодаИмя,      Новый ОписаниеТипов("ПеречислениеСсылка.ДоступныеПериодыОтчета")));
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ПериодИмя,          Новый ОписаниеТипов("Строка")));
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ПериодНачалоИмя,    ОписаниеТипаДата));
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ПериодОкончаниеИмя, ОписаниеТипаДата));
				
				// Связь реквизитов с элементами
				ПутиКДанным.Добавить(ВидПериодаИмя, ВидПериодаИмя);
				ПутиКДанным.Добавить(ПериодИмя, ПериодИмя);
				ПутиКДанным.Добавить(ПериодНачалоИмя, ПериодНачалоИмя);
				ПутиКДанным.Добавить(ПериодОкончаниеИмя, ПериодОкончаниеИмя);
				
				// Основная Группа
				ОсновнаяГруппа = Элементы.Добавить("ГруппаПериод_" + ЭлементИдентификатор, Тип("ГруппаФормы"), Элементы.Периоды);
				ОсновнаяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				ОсновнаяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				ОсновнаяГруппа.Отображение         = ОтображениеОбычнойГруппы.Нет;
				ОсновнаяГруппа.ОтображатьЗаголовок = Ложь;
				//ОсновнаяГруппа.Заголовок           = ЭлементЗаголовок;
				
				// Вид периода
				ВидПериода = Элементы.Добавить(ВидПериодаИмя, Тип("ПолеФормы"), ОсновнаяГруппа);
				ВидПериода.Вид                  = ВидПоляФормы.ПолеВвода;
				ВидПериода.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Лево;
				ВидПериода.РедактированиеТекста = Ложь;
				ВидПериода.Заголовок            = ЭлементЗаголовок;
				ВидПериода.КнопкаВыбора         = Ложь;
				ВидПериода.КнопкаОткрытия       = Ложь;
				ВидПериода.КнопкаОчистки        = Ложь;
				ВидПериода.КнопкаРегулирования  = Ложь;
				ВидПериода.КнопкаСпискаВыбора   = Истина;
				ВидПериода.РастягиватьПоГоризонтали = Ложь;
				ВидПериода.Ширина = 9;
				ВидПериода.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_ВидПериода_ПриИзменении");
				
				// Вид периода - Список выбора
				МинимальнаяПериодичность = НастройкиОтчета.СоответствиеПериодичностиПараметров[ОбщаяНастройка.Параметр];
				Если МинимальнаяПериодичность = Неопределено Тогда
					МинимальнаяПериодичность = Перечисления.ДоступныеПериодыОтчета.День;
				КонецЕсли;
				
				ДоступныеПериоды = ФункцииОтчетовКлиентСервер.ПолучитьСписокДоступныхПериодов();
				Для Индекс = ДоступныеПериоды.Найти(МинимальнаяПериодичность) По ДоступныеПериоды.ВГраница() Цикл
					ВидПериода.СписокВыбора.Добавить(ДоступныеПериоды[Индекс]);
				КонецЦикла;
				
				// Страницы
				ГруппаСтраниц = Элементы.Добавить("Период_Страницы_" + ЭлементИдентификатор, Тип("ГруппаФормы"), ОсновнаяГруппа);
				ГруппаСтраниц.Вид = ВидГруппыФормы.Страницы;
				ГруппаСтраниц.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
				
				// Страница СтандартныйПериод
				СтраницаСтандартныйПериод = Элементы.Добавить("Период_Страница_Стандартный_" + ЭлементИдентификатор, Тип("ГруппаФормы"), ГруппаСтраниц);
				СтраницаСтандартныйПериод.Вид                 = ВидГруппыФормы.Страница;
				СтраницаСтандартныйПериод.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				СтраницаСтандартныйПериод.ОтображатьЗаголовок = Ложь;
				
				// Страница Произвольный
				СтраницаПроизвольныйПериод = Элементы.Добавить("Период_Страница_Произвольный_" + ЭлементИдентификатор, Тип("ГруппаФормы"), ГруппаСтраниц);
				СтраницаПроизвольныйПериод.Вид                 = ВидГруппыФормы.Страница;
				СтраницаПроизвольныйПериод.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				СтраницаПроизвольныйПериод.ОтображатьЗаголовок = Ложь;
				
				// Стандартный период
				Период = Элементы.Добавить(ПериодИмя, Тип("ПолеФормы"), СтраницаСтандартныйПериод);
				Период.Вид                  = ВидПоляФормы.ПолеВвода;
				Период.Заголовок            = НСтр("ru = 'Период'");
				Период.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Нет;
				Период.КнопкаВыбора         = Истина;
				Период.КнопкаОткрытия       = Ложь;
				Период.КнопкаОчистки        = Ложь;
				Период.КнопкаРегулирования  = Ложь;
				Период.КнопкаСпискаВыбора   = Истина;
				Период.РедактированиеТекста = Ложь;
				Период.УстановитьДействие("Очистка",              "Подключаемый_СтандартныйПериод_Значение_Очистка");
				Период.УстановитьДействие("НачалоВыбораИзСписка", "Подключаемый_СтандартныйПериод_Значение_НачалоВыбораИзСписка");
				Период.УстановитьДействие("НачалоВыбора",         "Подключаемый_СтандартныйПериод_Значение_НачалоВыбора");
				
				// Начало произвольного периода
				ПериодНачало = Элементы.Добавить(ПериодНачалоИмя, Тип("ПолеФормы"), СтраницаПроизвольныйПериод);
				ЗаполнитьЗначенияСвойств(ПериодНачало, ШаблонПоляВводаПроизвольногоПериода);
				ПериодНачало.Заголовок = НСтр("ru = 'с'");
				ПериодНачало.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_НачалоПериода_ПриИзменении");
				
				// Окончание произвольного периода
				ПериодОкончание = Элементы.Добавить(ПериодОкончаниеИмя, Тип("ПолеФормы"), СтраницаПроизвольныйПериод);
				ЗаполнитьЗначенияСвойств(ПериодОкончание, ШаблонПоляВводаПроизвольногоПериода);
				ПериодОкончание.Заголовок = НСтр("ru = 'по'");
				ПериодОкончание.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_КонецПериода_ПриИзменении");
				
			Иначе
				
				ЭтоТрехрежимныйФлажок = (
					ДоступнаяНастройка.ТипЗначения.СодержитТип(Тип("Булево"))
					И ДоступнаяНастройка.ТипЗначения.Типы().Количество() = 1
				);
				
				ЗначениеИмя = "Параметр_Значение_" + ЭлементИдентификатор;
				ИспользуетсяВсегда = (ДоступнаяНастройка.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда);
				
				// Имена реквизитов
				СтрокаКэша.ИмяРеквизита = ЗначениеИмя;
				СтрокаКэша.ИмяЭлемента  = ЗначениеИмя;
				
				// Связь реквизитов с элементами
				ПутиКДанным.Добавить(ЗначениеИмя, ЗначениеИмя);
				
				СодержитТипДата = Ложь;
				СодержитТипБулево = Ложь;
				СодержитДругиеТипы = Ложь;
				
				ВычитаемыеТипы = Новый Массив;
				ДоступнаяНастройкаТипы = ДоступнаяНастройка.ТипЗначения.Типы();
				Для Каждого Тип Из ДоступнаяНастройкаТипы Цикл
					Если Тип = Тип("ПолеКомпоновкиДанных") Тогда
						ВычитаемыеТипы.Добавить(Тип);
					КонецЕсли;
					Если Тип = Тип("Дата") Тогда
						СодержитТипДата = Истина;
					ИначеЕсли Тип = Тип("Булево") Тогда
						СодержитТипБулево = Истина;
					Иначе
						СодержитДругиеТипы = Истина;
					КонецЕсли;
					ЗарегистрироватьСвязиВедущихИПодчиненных(СвязиОбъектовМетаданных, Тип, Идентификатор);
				КонецЦикла;
				
				ГруппаПараметра = Элементы.Добавить("ГруппаПараметра_" + ЭлементИдентификатор, Тип("ГруппаФормы"), Элементы.ПараметрыИОтборы);
				ГруппаПараметра.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаПараметра.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				ГруппаПараметра.Отображение         = ОтображениеОбычнойГруппы.Нет;
				ГруппаПараметра.Заголовок           = ЭлементЗаголовок;
				ГруппаПараметра.ОтображатьЗаголовок = Ложь;
				
				ЭтоФлажок = СодержитТипБулево И НЕ СодержитТипДата И НЕ СодержитДругиеТипы;
				ЭтоТрехрежимныйФлажок = ЭтоФлажок И НЕ ИспользуетсяВсегда;
				Если ЭтоТрехрежимныйФлажок Тогда
					
					// Один реквизит (число) вместо двух (булево).
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ЗначениеИмя, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0))));
					
					ЗначениеОтбора = Элементы.Добавить(ЗначениеИмя, Тип("ПолеФормы"), ГруппаПараметра);
					ЗначениеОтбора.Вид                 = ВидПоляФормы.ПолеФлажка;
					ЗначениеОтбора.Заголовок           = ЭлементЗаголовок;
					ЗначениеОтбора.ПоложениеЗаголовка  = ПоложениеЗаголовкаЭлементаФормы.Право;
					ЗначениеОтбора.ТриСостояния        = Истина;
					ЗначениеОтбора.УстановитьДействие("ПриИзменении", "Подключаемый_ТрехрежимныйФлажокПараметра_Значение_ПриИзменении");
					
				Иначе
					
					// Реквизиты
					ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ЗначениеИмя, Новый ОписаниеТипов(ДоступнаяНастройка.ТипЗначения, , ВычитаемыеТипы)));
					
					Если ИспользуетсяВсегда Тогда
						
						ПользовательскаяНастройка.Использование = Истина;
						
					Иначе
						
						ИспользованиеИмя = "Параметр_Использование_" + ЭлементИдентификатор;
						
						СтрокаКэша.ИмяРеквизитаИспользование = ИспользованиеИмя;
						
						ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИспользованиеИмя, Новый ОписаниеТипов("Булево")));
						
						ПутиКДанным.Добавить(ИспользованиеИмя, ИспользованиеИмя);
						
						ФлажокИспользование = Элементы.Добавить(ИспользованиеИмя, Тип("ПолеФормы"), ГруппаПараметра);
						ФлажокИспользование.Вид                = ВидПоляФормы.ПолеФлажка;
						ФлажокИспользование.Заголовок          = ЭлементЗаголовок + ":";
						ФлажокИспользование.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
						ФлажокИспользование.УстановитьДействие("ПриИзменении", "Подключаемый_Параметр_Использование_ПриИзменении");
						
					КонецЕсли;
					
					Параметр = Элементы.Добавить(ЗначениеИмя, Тип("ПолеФормы"), ?(ИспользуетсяВсегда, Элементы.ПараметрыИОтборы, ГруппаПараметра));
					Параметр.Заголовок           = ЭлементЗаголовок;
					
					Если ЭтоФлажок Тогда
						Параметр.Вид                 = ВидПоляФормы.ПолеФлажка;
						Параметр.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
					Иначе
						Параметр.Вид                 = ВидПоляФормы.ПолеВвода;
						Параметр.Заголовок           = ЭлементЗаголовок;
						Параметр.КнопкаВыбора        = Истина;
						Параметр.КнопкаОткрытия      = Ложь;
						Параметр.КнопкаОчистки       = СодержитДругиеТипы И НЕ ДоступнаяНастройка.ЗапрещатьНезаполненныеЗначения;
						Параметр.КнопкаРегулирования = Ложь;
						Параметр.КнопкаСпискаВыбора  = Ложь;
						Параметр.РастягиватьПоГоризонтали = СодержитДругиеТипы;
						
						Если ИспользуетсяВсегда Тогда
							Параметр.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
						Иначе
							Параметр.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(Параметр, ДоступнаяНастройка, "БыстрыйВыбор, Маска, ФормаВыбора, ФорматРедактирования");
						Параметр.АвтоОтметкаНезаполненного = ДоступнаяНастройка.ЗапрещатьНезаполненныеЗначения;
						
						Если ТипЗнч(ДоступнаяНастройка) = Тип("ДоступноеПолеОтбораКомпоновкиДанных")
							И ТипЗнч(ДоступнаяНастройка.ДоступныеЗначения) = Тип("СписокЗначений")
							И ДоступнаяНастройка.ДоступныеЗначения.Количество() > 0 Тогда
							Параметр.РежимВыбораИзСписка = Истина;
							Для Каждого ЭлементСписка Из ДоступнаяНастройка.ДоступныеЗначения Цикл
								ЗаполнитьЗначенияСвойств(Параметр.СписокВыбора.Добавить(), ЭлементСписка);
							КонецЦикла;
							Параметр.РастягиватьПоГоризонтали = Истина;
						КонецЕсли;
						
						Если ТипЗнч(ДоступнаяНастройка) = Тип("ДоступныйПараметрКомпоновкиДанных")
							И ТипЗнч(ДоступнаяНастройка.ДоступныеЗначения) = Тип("СписокЗначений")
							И ДоступнаяНастройка.ДоступныеЗначения.Количество() > 0 Тогда
							Параметр.РежимВыбораИзСписка = Истина;
							Для Каждого ЭлементСписка Из ДоступнаяНастройка.ДоступныеЗначения Цикл
								ЗаполнитьЗначенияСвойств(Параметр.СписокВыбора.Добавить(), ЭлементСписка);
							КонецЦикла;
							Параметр.РастягиватьПоГоризонтали = Истина;
						КонецЕсли;
					КонецЕсли;
					
					Параметр.УстановитьДействие("ПриИзменении", "Подключаемый_Параметр_Значение_ПриИзменении");
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипОбщейНастройки = Тип("ОтборКомпоновкиДанных") Тогда
			
		ИначеЕсли ТипОбщейНастройки = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
			
			ГруппаИмя                             = "ГруппаГруппировки_" + ЭлементИдентификатор;
			ТаблицаГруппировокИмя                 = "ТаблицаГруппировок_" + ЭлементИдентификатор;
			ТаблицаГруппировокИспользованиеИмя    = "ТаблицаГруппировок_Использование_" + ЭлементИдентификатор;
			ТаблицаГруппировокПредставлениеИмя    = "ТаблицаГруппировок_Представление_" + ЭлементИдентификатор;
			ТаблицаГруппировокПереместитьВверхИмя = "ТаблицаГруппировок_ПереместитьВверх_" + ЭлементИдентификатор;
			ТаблицаГруппировокПереместитьВнизИмя  = "ТаблицаГруппировок_ПереместитьВниз_" + ЭлементИдентификатор;
			
			// Реквизиты
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ТаблицаГруппировокИмя, Новый ОписаниеТипов("ТаблицаЗначений")));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Идентификатор", Новый ОписаниеТипов("Строка"), ТаблицаГруппировокИмя));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Использование", Новый ОписаниеТипов("Булево"), ТаблицаГруппировокИмя));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Представление", Новый ОписаниеТипов("Строка"), ТаблицаГруппировокИмя));
			
			// Связь реквизитов с элементами
			ПутиКДанным.Добавить(ТаблицаГруппировокИмя, ТаблицаГруппировокИмя);
			ПутиКДанным.Добавить(ТаблицаГруппировокИспользованиеИмя, ТаблицаГруппировокИмя + ".Использование");
			ПутиКДанным.Добавить(ТаблицаГруппировокПредставлениеИмя, ТаблицаГруппировокИмя + ".Представление");
			
			// Имена реквизитов
			СтрокаКэша.ИмяРеквизитаИспользование = "";
			СтрокаКэша.ИмяРеквизита              = ТаблицаГруппировокИмя;
			СтрокаКэша.ИмяЭлемента               = ТаблицаГруппировокИмя;
			
			// Команды
			КомандаПереместитьВверх = Команды.Добавить(ТаблицаГруппировокПереместитьВверхИмя);
			КомандаПереместитьВверх.Действие    = "Подключаемый_СтруктураНастроекКомпоновкиДанных_ПереместитьВверх";
			КомандаПереместитьВверх.Картинка    = БиблиотекаКартинок.ПереместитьВверх;
			КомандаПереместитьВверх.Отображение = ОтображениеКнопки.Картинка;
			
			КомандаПереместитьВверх = Команды.Добавить(ТаблицаГруппировокПереместитьВнизИмя);
			КомандаПереместитьВверх.Действие    = "Подключаемый_СтруктураНастроекКомпоновкиДанных_ПереместитьВниз";
			КомандаПереместитьВверх.Картинка    = БиблиотекаКартинок.ПереместитьВниз;
			КомандаПереместитьВверх.Отображение = ОтображениеКнопки.Картинка;
			
			// Группы и элементы
			ГруппаГруппировки = Элементы.Добавить(ГруппаИмя, Тип("ГруппаФормы"), Элементы.СтруктурыНастроек);
			ГруппаГруппировки.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаГруппировки.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаГруппировки.Отображение         = ОтображениеОбычнойГруппы.Линия;
			ГруппаГруппировки.Заголовок           = ЭлементЗаголовок + ":";
			ГруппаГруппировки.ОтображатьЗаголовок = Истина;
			
			ТаблицаГруппировок = Элементы.Добавить(ТаблицаГруппировокИмя, Тип("ТаблицаФормы"), ГруппаГруппировки);
			ЗаполнитьЗначенияСвойств(ТаблицаГруппировок, ШаблонТаблицы);
			ТаблицаГруппировок.ИзменятьСоставСтрок = Ложь;
			
			КолонкаИспользование = Элементы.Добавить(ТаблицаГруппировокИспользованиеИмя, Тип("ПолеФормы"), ТаблицаГруппировок);
			КолонкаИспользование.Вид                 = ВидПоляФормы.ПолеФлажка;
			КолонкаИспользование.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
			КолонкаИспользование.УстановитьДействие("ПриИзменении", "Подключаемый_СтруктураНастроекКомпоновкиДанных_КолонкаИспользование_ПриИзменении");
			
			КолонкаПредставление = Элементы.Добавить(ТаблицаГруппировокПредставлениеИмя, Тип("ПолеФормы"), ТаблицаГруппировок);
			КолонкаПредставление.Вид            = ВидПоляФормы.ПолеВвода;
			КолонкаПредставление.ТолькоПросмотр = Истина;
			
			// Командная панель
			ТаблицаКоманднаяПанель = Элементы.Добавить("ТаблицаГруппировок_КоманднаяПанель_" + ЭлементИдентификатор, Тип("ГруппаФормы"), ГруппаГруппировки);
			ТаблицаКоманднаяПанель.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			ТаблицаКоманднаяПанель.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ТаблицаКоманднаяПанель.Отображение         = ОтображениеОбычнойГруппы.Нет;
			ТаблицаКоманднаяПанель.ОтображатьЗаголовок = Ложь;
			
			// Кнопки
			КнопкаВверх = Элементы.Добавить(ТаблицаГруппировокПереместитьВверхИмя, Тип("КнопкаФормы"), ТаблицаКоманднаяПанель);
			КнопкаВверх.ИмяКоманды = ТаблицаГруппировокПереместитьВверхИмя;
			КнопкаВверх.Заголовок = НСтр("ru = 'Переместить группировку вверх'");
			
			КнопкаВниз = Элементы.Добавить(ТаблицаГруппировокПереместитьВнизИмя, Тип("КнопкаФормы"), ТаблицаКоманднаяПанель);
			КнопкаВниз.ИмяКоманды = ТаблицаГруппировокПереместитьВнизИмя;
			КнопкаВниз.Заголовок = НСтр("ru = 'Переместить группировку вниз'");
			
		Иначе
			
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, Новый Массив);
	
	// Установка связей элементов с данными
	Для Каждого ЭлементСписка Из ПутиКДанным Цикл
		Элементы[ЭлементСписка.Значение].ПутьКДанным = ЭлементСписка.Представление;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ТипыСписковЗначений Цикл
		ЭтаФорма[КлючИЗначение.Ключ].ТипЗначения = КлючИЗначение.Значение;
		ЭтаФорма[КлючИЗначение.Ключ].Очистить();
	КонецЦикла;
	
	// Некоторые действия доступны только после установки связи элементов с данными
	Для Каждого ЭлементИОбработчики Из ОбработчикиСобытий Цикл
		Элемент = Элементы[ЭлементИОбработчики.Ключ];
		Для Каждого Обработчики Из ЭлементИОбработчики.Значение Цикл
			Элемент.УстановитьДействие(Обработчики.Ключ, Обработчики.Значение);
		КонецЦикла;
	КонецЦикла;
	
	// Связи отборов
	СвязиОтборов.Очистить();
	Найденные = СвязиОбъектовМетаданных.НайтиСтроки(Новый Структура("ПодчиненныйНайденВСКД, ВедущийНайденВСКД", Истина, Истина));
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		ПодчиненныйМетаданные = Метаданные.НайтиПоТипу(СтрокаТаблицы.ПодчиненныйТип);
		ВедущийМетаданные     = Метаданные.НайтиПоТипу(СтрокаТаблицы.ВедущийТип);
		
		Если ПодчиненныйМетаданные = Неопределено ИЛИ ВедущийМетаданные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПодчиненныйИмяТипа = СтрЗаменить(ПодчиненныйМетаданные.ПолноеИмя(), ".", "Ссылка.");
		ВедущийИмяТипа     = СтрЗаменить(ВедущийМетаданные.ПолноеИмя(),     ".", "Ссылка.");
		
		Для Каждого ПодчиненныйИдентификатор Из СтрокаТаблицы.ПодчиненныйМассивИдентификаторов Цикл
			Для Каждого ВедущийИдентификатор Из СтрокаТаблицы.ВедущийМассивИдентификаторов Цикл
				
				СтрокаСвязиОтбора = СвязиОтборов.Добавить();
				СтрокаСвязиОтбора.ИдентификаторОтбора         = ПодчиненныйИдентификатор;
				СтрокаСвязиОтбора.Тип                         = ПодчиненныйИмяТипа;
				СтрокаСвязиОтбора.РеквизитПоля                = СтрокаТаблицы.ПодчиненныйРеквизит;
				СтрокаСвязиОтбора.ИдентификаторЗначенияОтбора = ВедущийИдентификатор;
				СтрокаСвязиОтбора.ТипЗначенияОтбора           = ВедущийИмяТипа;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Связи по типу
	Для Каждого ЭлементСвязи Из СвязиПоТипу Цикл
		
		Подчиненный = НайтиВКэше(КэшНастроек, "Идентификатор", ЭлементСвязи.ПодчиненныйИдентификатор);
		Ведущий     = НайтиВКэше(КэшНастроек, "ПолеКД",        ЭлементСвязи.ВедущийПоле);
		
		Если Подчиненный = Неопределено ИЛИ Ведущий = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПодчиненныйЭлемент = Элементы.Найти(Подчиненный.ИмяЭлемента);
		Если ПодчиненныйЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПодчиненныйЭлемент.СвязьПоТипу = Новый СвязьПоТипу(Ведущий.ИмяРеквизита, ЭлементСвязи.НомерСубконто);
		
	КонецЦикла;
	
	// Связи параметров выбора
	Для Каждого ЭлементСвязи Из СвязиПараметровВыбора Цикл
		
		Если НЕ ЗначениеЗаполнено(ЭлементСвязи.РеквизитСвязи) Тогда
			ЭлементСвязи.РеквизитСвязи = "ИмяПараметраСвязиНеУказано";
		КонецЕсли;
		
		Подчиненный = НайтиВКэше(КэшНастроек, "Идентификатор", ЭлементСвязи.ПодчиненныйИдентификатор);
		Ведущий     = НайтиВКэше(КэшНастроек, "ПолеКД",        ЭлементСвязи.ВедущийПоле);
		
		Если Подчиненный = Неопределено ИЛИ Ведущий = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПодчиненныйЭлемент = Элементы.Найти(Подчиненный.ИмяЭлемента);
		Если ПодчиненныйЭлемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивЭлементов = Новый Массив;
		Для Каждого СвязьПараметра Из ПодчиненныйЭлемент.СвязиПараметровВыбора Цикл
			МассивЭлементов.Добавить(СвязьПараметра);
		КонецЦикла;
		МассивЭлементов.Добавить(Новый СвязьПараметраВыбора(ЭлементСвязи.РеквизитСвязи, Ведущий.ИмяРеквизита, ЭлементСвязи.Действие));
		ПодчиненныйЭлемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивЭлементов);
		
	КонецЦикла;
	
	Если Элементы.Периоды.ПодчиненныеЭлементы.Количество() > 0 Тогда
		Элементы.ПараметрыИОтборы.Отображение = ОтображениеОбычнойГруппы.Линия;
	Иначе
		Элементы.ПараметрыИОтборы.Отображение = ОтображениеОбычнойГруппы.Нет;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(КэшНастроек, "КэшНастроекСКД");
	
	Элементы.ГруппаСкрытьПоказатьБыстрыеНастройки.Видимость = ЕстьБыстрыеНастройки;
	
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиЗагрузитьЗначения()
	
	ГрупповыеВидыСравнений = Новый Массив;
	ГрупповыеВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
	ГрупповыеВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	ГрупповыеВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
	ГрупповыеВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);
	
	КомпоновщикНастроекКД       = Отчет.КомпоновщикНастроек;
	ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	НастройкиКД                 = КомпоновщикНастроекКД.ПолучитьНастройки();
	
	Если РежимРасшифровки Тогда
		ПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("ВидимостьБыстрыхНастроек", Ложь);
	ИначеЕсли НЕ ПользовательскиеНастройкиКД.ДополнительныеСвойства.Свойство("ВидимостьБыстрыхНастроек") Тогда
		ПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("ВидимостьБыстрыхНастроек", Истина);
	КонецЕсли;
	
	Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройкиКД.Элементы Цикл
		
		Идентификатор = ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки;
		ЭлементИдентификатор = ПривестиИдентификаторКИмени(Идентификатор);
		
		ОбщаяНастройка = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(НастройкиКД, Идентификатор);
		Если ОбщаяНастройка = Неопределено
			ИЛИ ОбщаяНастройка.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ Тогда 
			Продолжить;
		КонецЕсли;
		
		ТипОбщейНастройки = ТипЗнч(ОбщаяНастройка);
		
		Если ТипОбщейНастройки = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ДоступнаяНастройка = ФункцииОтчетовКлиентСервер.НайтиДоступнуюНастройку(НастройкиКД, ОбщаяНастройка, Истина);
			Если ДоступнаяНастройка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ТипОбщейНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ДоступнаяНастройка = ФункцииОтчетовКлиентСервер.НайтиДоступнуюНастройку(НастройкиКД, ОбщаяНастройка, Ложь);
			Если ДоступнаяНастройка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			ДоступнаяНастройка = Неопределено;
		КонецЕсли;
		
		СтруктураПредставлений = Новый Структура("Представление, ПредставлениеПользовательскойНастройки", "", "");
		ЗаполнитьЗначенияСвойств(СтруктураПредставлений, ОбщаяНастройка);
		СменитьТипНаГруппуЭлементовОтбора = ЗначениеЗаполнено(СтруктураПредставлений.Представление);
		
		Если ТипОбщейНастройки = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
			ИЛИ СменитьТипНаГруппуЭлементовОтбора Тогда
			
			ИспользованиеОтбораИмя = "ГруппаОтбора_Использование_" + ЭлементИдентификатор;
			ЭтаФорма[ИспользованиеОтбораИмя] = ПользовательскаяНастройка.Использование;
			
		ИначеЕсли ТипОбщейНастройки = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			ОтборИмя = "Отбор_" + ЭлементИдентификатор;
			ИспользованиеОтбораИмя = "ИспользованиеОтбора_" + ЭлементИдентификатор;
			
			ЭтоГрупповойВидСравнения = (ГрупповыеВидыСравнений.Найти(ОбщаяНастройка.ВидСравнения) <> Неопределено);
			
			ЭтоТрехрежимныйФлажок = (
				ДоступнаяНастройка.ТипЗначения.СодержитТип(Тип("Булево"))
				И ДоступнаяНастройка.ТипЗначения.Типы().Количество() = 1
			);
			
			Если ЭтоГрупповойВидСравнения Тогда
				ЭтаФорма[ИспользованиеОтбораИмя] = ПользовательскаяНастройка.Использование;
				
				СписокЗначений = ЭтаФорма[ОтборИмя];
				СписокЗначений.Очистить();
				Если ПользовательскаяНастройка.ПравоеЗначение <> Неопределено Тогда
					Для Каждого ЭлементСписка Из ПользовательскаяНастройка.ПравоеЗначение Цикл
						ЗаполнитьЗначенияСвойств(СписокЗначений.Добавить(), ЭлементСписка);
					КонецЦикла;
				КонецЕсли;
			ИначеЕсли ЭтоТрехрежимныйФлажок Тогда
				ЭтаФорма[ОтборИмя] = ?(ПользовательскаяНастройка.Использование, ?(ПользовательскаяНастройка.ПравоеЗначение, 1, 0), 2);
				Элементы[ОтборИмя].ЦветТекстаЗаголовка = ?(НЕ ПользовательскаяНастройка.Использование, ЦветОтключенногоОтбора, Новый Цвет);
			Иначе
				ЭтаФорма[ИспользованиеОтбораИмя] = ПользовательскаяНастройка.Использование;
				Если ТипЗнч(ПользовательскаяНастройка.ПравоеЗначение) = Тип("Тип") Тогда
					МассивТипов = Новый Массив;
					МассивТипов.Добавить(ПользовательскаяНастройка.ПравоеЗначение);
					ЭтаФорма[ОтборИмя] = Новый ОписаниеТипов(МассивТипов);
				Иначе
					ЭтаФорма[ОтборИмя] = ПользовательскаяНастройка.ПравоеЗначение;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипОбщейНастройки = Тип("ГруппировкаКомпоновкиДанных")
			ИЛИ ТипОбщейНастройки = Тип("ТаблицаКомпоновкиДанных")
			ИЛИ ТипОбщейНастройки = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			ИЛИ ТипОбщейНастройки = Тип("ДиаграммаКомпоновкиДанных")
			ИЛИ ТипОбщейНастройки = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			
			ИспользованиеЭлементаСтруктурыИмя = "ИспользованиеЭлементаСтруктуры_" + ЭлементИдентификатор;
			ЭтаФорма[ИспользованиеЭлементаСтруктурыИмя] = ПользовательскаяНастройка.Использование;
			
		ИначеЕсли ТипОбщейНастройки = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
			
			УсловноеОформлениеИмя = "УсловноеОформление_" + ЭлементИдентификатор;
			ЭтаФорма[УсловноеОформлениеИмя] = ПользовательскаяНастройка.Использование;
			
		ИначеЕсли ТипОбщейНастройки = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
			
			ГруппаИмя  = "ГруппаПолейВыбора_" + ЭлементИдентификатор;
			ТаблицаИмя = "ТаблицаПолейВыбора_" + ЭлементИдентификатор;
			Таблица = ЭтаФорма[ТаблицаИмя];
			Таблица.Очистить();
			ФункцииОтчетовКлиентСервер.ДобавитьЭлементыНастройки(ЭтаФорма, Таблица, ПользовательскаяНастройка, ПользовательскаяНастройка, Истина);
			Элементы[ГруппаИмя].Видимость = (Таблица.Количество() > 0);
			
		ИначеЕсли ТипОбщейНастройки = Тип("ПорядокКомпоновкиДанных") Тогда
			
			ГруппаИмя  = "ГруппаПорядка_" + ЭлементИдентификатор;
			ТаблицаИмя = "ТаблицаПорядка_" + ЭлементИдентификатор;
			Таблица = ЭтаФорма[ТаблицаИмя];
			Таблица.Очистить();
			Для Каждого ЭлементПорядка Из ПользовательскаяНастройка.Элементы Цикл
				Если ТипЗнч(ЭлементПорядка) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
					
					ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(НастройкиКД.ДоступныеПоляПорядка, ЭлементПорядка.Поле);
					Если ДоступноеПоле = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаПорядка = Таблица.Добавить();
					СтрокаПорядка.Использование = ЭлементПорядка.Использование;
					СтрокаПорядка.Идентификатор = ПользовательскаяНастройка.ПолучитьИдентификаторПоОбъекту(ЭлементПорядка);
					СтрокаПорядка.Представление = ДоступноеПоле.Заголовок;
					
				КонецЕсли;
			КонецЦикла;
			Элементы[ГруппаИмя].Видимость = (Таблица.Количество() > 0);
			
		ИначеЕсли ТипОбщейНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			
			Если ТипЗнч(ПользовательскаяНастройка.Значение) = Тип("СтандартныйПериод") Тогда
				
				ВидПериодаИмя      = "Период_ВидПериода_"             + ЭлементИдентификатор;
				ПериодИмя          = "Период_Стандартный_Значение_"   + ЭлементИдентификатор;
				ПериодНачалоИмя    = "Период_Произвольный_Начало_"    + ЭлементИдентификатор;
				ПериодОкончаниеИмя = "Период_Произвольный_Окончание_" + ЭлементИдентификатор;
				
				НачалоПериода = ПользовательскаяНастройка.Значение.ДатаНачала;
				КонецПериода  = ПользовательскаяНастройка.Значение.ДатаОкончания;
				ВидПериода    = ФункцииОтчетовКлиентСервер.ПолучитьВидПериода(НачалоПериода, КонецПериода, Элементы[ВидПериодаИмя].СписокВыбора);
				Представление = ФункцииОтчетовКлиентСервер.ПолучитьПредставлениеПериода(ВидПериода, НачалоПериода, КонецПериода);
				
				Если ВидПериода = Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод Тогда
					Элементы["Период_Страницы_" + ЭлементИдентификатор].ТекущаяСтраница = Элементы["Период_Страница_Произвольный_" + ЭлементИдентификатор];
				Иначе
					Элементы["Период_Страницы_" + ЭлементИдентификатор].ТекущаяСтраница = Элементы["Период_Страница_Стандартный_" + ЭлементИдентификатор];
				КонецЕсли;
				
				ЭтаФорма[ВидПериодаИмя]      = ВидПериода;
				ЭтаФорма[ПериодИмя]          = Представление;
				ЭтаФорма[ПериодНачалоИмя]    = НачалоПериода;
				ЭтаФорма[ПериодОкончаниеИмя] = КонецПериода;
				
			Иначе
				
				ПараметрИмя = "Параметр_Значение_" + ЭлементИдентификатор;
				ИспользуетсяВсегда = (ДоступнаяНастройка.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда);
				
				ЭтоТрехрежимныйФлажок = (
					НЕ ИспользуетсяВсегда
					И ДоступнаяНастройка.ТипЗначения.СодержитТип(Тип("Булево"))
					И ДоступнаяНастройка.ТипЗначения.Типы().Количество() = 1
				);
				
				Если ТипЗнч(ПользовательскаяНастройка.Значение) = Тип("СтандартнаяДатаНачала") Тогда
					ЭтаФорма[ПараметрИмя] = Дата(ПользовательскаяНастройка.Значение);
				ИначеЕсли ЭтоТрехрежимныйФлажок Тогда
					ЭтаФорма[ПараметрИмя] = ?(ПользовательскаяНастройка.Использование, ?(ПользовательскаяНастройка.Значение, 1, 0), 2);
					Элементы[ПараметрИмя].ЦветТекстаЗаголовка = ?(НЕ ПользовательскаяНастройка.Использование, ЦветОтключенногоОтбора, Новый Цвет);
				Иначе
					ЭтаФорма[ПараметрИмя] = ПользовательскаяНастройка.Значение;
				КонецЕсли;
				
				Если НЕ ИспользуетсяВсегда И НЕ ЭтоТрехрежимныйФлажок Тогда
					ИспользованиеИмя = "Параметр_Использование_" + ЭлементИдентификатор;
					ЭтаФорма[ИспользованиеИмя] = ПользовательскаяНастройка.Использование;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипОбщейНастройки = Тип("ОтборКомпоновкиДанных") Тогда
			
			
		ИначеЕсли ТипОбщейНастройки = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
			
			ГруппаИмя             = "ГруппаГруппировки_" + ЭлементИдентификатор;
			ТаблицаГруппировокИмя = "ТаблицаГруппировок_" + ЭлементИдентификатор;
			
			Таблица = ЭтаФорма[ТаблицаГруппировокИмя];
			Таблица.Очистить();
			
			Для Каждого ЭлементСтруктуры Из ПользовательскаяНастройка.Структура Цикл
				Представление = "";
				Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
					ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
					ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
					
					Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
						Если НЕ ПолеГруппировки.Использование Тогда
							Продолжить;
						КонецЕсли;
						ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(НастройкиКД.ДоступныеПоляГруппировок, ПолеГруппировки.Поле);
						Если ДоступноеПоле = Неопределено Тогда
							Представление = Строка(ПолеГруппировки.Поле);
						ИначеЕсли ДоступноеПоле.Родитель <> Неопределено Тогда
							Представление = Представление + СтрЗаменить(СтрЗаменить(ДоступноеПоле.Заголовок, ДоступноеПоле.Родитель.Заголовок, ""), ".", "")+ ", ";
						ИНаче
							Представление = Представление + ДоступноеПоле.Заголовок + ", ";
						КонецЕсли;
					КонецЦикла;
					
					Представление = Лев(Представление,  СтрДлина(Представление) - 2);
				Иначе
					Представление = НСтр("ru = 'Таблица / диаграмма'");
				КонецЕсли;
				
				СтрокиГруппировки = Таблица.Добавить();
				СтрокиГруппировки.Идентификатор = ЭлементСтруктуры.ИдентификаторПользовательскойНастройки;
				СтрокиГруппировки.Использование = ЭлементСтруктуры.Использование;
				СтрокиГруппировки.Представление = Представление;
			КонецЦикла;
			
			Элементы[ГруппаИмя].Видимость = (Таблица.Количество() > 0);
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеЭлементы(Куда, Откуда, Рекурсивно)
	Для Каждого ПодчиненныйЭлемент Из Откуда Цикл
		Если Рекурсивно И (ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") ИЛИ ТипЗнч(ПодчиненныйЭлемент) = Тип("ТаблицаФормы")) Тогда
			ДобавитьПодчиненныеЭлементы(Куда, ПодчиненныйЭлемент.ПодчиненныеЭлементы, Истина);
		КонецЕсли;
		Если ПостоянныеЭлементы.НайтиПоЗначению(ПодчиненныйЭлемент.Имя) = Неопределено Тогда
			Куда.Добавить(ПодчиненныйЭлемент);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыВыбора(ИдентификаторОтбора = "")
	
	Если ИдентификаторОтбора = "" Тогда
		Найденные = СвязиОтборов;
	Иначе
		Найденные = СвязиОтборов.НайтиСтроки(Новый Структура("ИдентификаторЗначенияОтбора", ИдентификаторОтбора))
	КонецЕсли;
	
	КомпоновщикНастроекКД       = Отчет.КомпоновщикНастроек;
	ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	НастройкиКД                 = КомпоновщикНастроекКД.ПолучитьНастройки();
	
	ГрупповыеВидыСравнений = Новый Массив;
	ГрупповыеВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.ВСписке);
	ГрупповыеВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	ГрупповыеВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.НеВСписке);
	ГрупповыеВидыСравнений.Добавить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);
	
	Для Каждого СтрокаОтбора Из Найденные Цикл
		
		ПодчиненныйИдентификатор             = СтрокаОтбора.ИдентификаторОтбора;
		ПодчиненныйЭлементИдентификатор      = ПривестиИдентификаторКИмени(ПодчиненныйИдентификатор);
		ПодчиненныйПользовательскаяНастройка = ФункцииОтчетовКлиентСервер.НайтиПользовательскуюНастройку(ПользовательскиеНастройкиКД, ПодчиненныйИдентификатор);
		Если ТипЗнч(ПодчиненныйПользовательскаяНастройка) <> Тип("ОтборКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		ВедущийИдентификатор             = СтрокаОтбора.ИдентификаторЗначенияОтбора;
		ВедущийПользовательскаяНастройка = ФункцииОтчетовКлиентСервер.НайтиПользовательскуюНастройку(ПользовательскиеНастройкиКД, ВедущийИдентификатор);
		Если ВедущийПользовательскаяНастройка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПодчиненныйОбщаяНастройка = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(НастройкиКД, ПодчиненныйИдентификатор);
		Если ПодчиненныйОбщаяНастройка = Неопределено
			ИЛИ ПодчиненныйОбщаяНастройка.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ Тогда 
			Продолжить;
		КонецЕсли;
		
		ЭтоГрупповойВидСравнения = (ГрупповыеВидыСравнений.Найти(ПодчиненныйОбщаяНастройка.ВидСравнения) <> Неопределено);
		
		Если ЭтоГрупповойВидСравнения Тогда
			ПодчиненныйЭлемент = Элементы.Найти("Отбор_Значение_" + ПодчиненныйЭлементИдентификатор);
			Если ПодчиненныйЭлемент = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			МассивТипов = ЭтаФорма["Отбор_" + ПодчиненныйЭлементИдентификатор].ТипЗначения.Типы();
			Для Каждого Тип Из МассивТипов Цикл
				Если ВедущийПользовательскаяНастройка.Использование Тогда
					ПодчиненныйПараметрыВыбора = МассивПараметровВыбораПолей(ПользовательскиеНастройкиКД, ПодчиненныйИдентификатор, Тип);
				Иначе
					ПодчиненныйПараметрыВыбора = Новый Массив;
				КонецЕсли;
				ПодчиненныйЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПодчиненныйПараметрыВыбора);
			КонецЦикла;
		Иначе
			ПодчиненныйЭлемент = ЭтаФорма.Элементы.Найти("Отбор_" + ПодчиненныйЭлементИдентификатор);
			Если ПодчиненныйЭлемент = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Тип = ТипЗнч(ЭтаФорма["Отбор_" + ПодчиненныйЭлементИдентификатор]);
			Если ВедущийПользовательскаяНастройка.Использование Тогда
				ПодчиненныйПараметрыВыбора = МассивПараметровВыбораПолей(ПользовательскиеНастройкиКД, ПодчиненныйИдентификатор, Тип);
			Иначе
				ПодчиненныйПараметрыВыбора = Новый Массив;
			КонецЕсли;
			ПодчиненныйЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПодчиненныйПараметрыВыбора);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция МассивПараметровВыбораПолей(ПользовательскиеНастройкиКД, ПодчиненныйИдентификатор, Тип)
	
	МассивСвязейПараметров = Новый Массив;
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
	Если МетаданныеТипа = Неопределено Тогда
		Возврат МассивСвязейПараметров;
	КонецЕсли;
	
	ИмяТипа = СтрЗаменить(МетаданныеТипа.ПолноеИмя(), ".", "Ссылка.");
	
	Найденные = СвязиОтборов.НайтиСтроки(Новый Структура("ИдентификаторОтбора, Тип", ПодчиненныйИдентификатор, ИмяТипа));
	Для Каждого СтрокаСвязи Из Найденные Цикл
		Идентификатор = СтрокаСвязи.ИдентификаторЗначенияОтбора;
		ЭлементИдентификатор = ПривестиИдентификаторКИмени(Идентификатор);
		ПользовательскаяНастройка = ФункцииОтчетовКлиентСервер.НайтиПользовательскуюНастройку(ПользовательскиеНастройкиКД, Идентификатор);
		Если ТипЗнч(ПользовательскаяНастройка) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗначениеПараметра = ЭтаФорма["Отбор_" + ЭлементИдентификатор];
		ИначеЕсли ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ЗначениеПараметра = ЭтаФорма["Параметр_" + ЭлементИдентификатор];
		Иначе
			Продолжить;
		КонецЕсли;
		МассивСвязейПараметров.Добавить(Новый ПараметрВыбора(СтрокаСвязи.РеквизитПоля, ЗначениеПараметра));
	КонецЦикла;
	
	Возврат МассивСвязейПараметров;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗарегистрироватьСвязиВедущихИПодчиненных(СвязиОбъектовМетаданных, Тип, Идентификатор)
	
	// Регистрация подчиненного
	Найденные = СвязиОбъектовМетаданных.НайтиСтроки(Новый Структура("ПодчиненныйТип", Тип));
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		СтрокаТаблицы.ПодчиненныйНайденВСКД = Истина;
		СтрокаТаблицы.ПодчиненныйМассивИдентификаторов.Добавить(Идентификатор);
	КонецЦикла;
	
	// Регистрация ведущего
	Найденные = СвязиОбъектовМетаданных.НайтиСтроки(Новый Структура("ВедущийТип", Тип));
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		СтрокаТаблицы.ВедущийНайденВСКД = Истина;
		СтрокаТаблицы.ВедущийМассивИдентификаторов.Добавить(Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКлючиФормы()
	Если ПравоВывода Тогда
		ЗаполнитьЗначенияСвойств(ОтчетТабличныйДокумент, НастройкиОтчета.ПараметрыПечатиПоУмолчанию);
		
		Уникальность = КлючОбъекта;
		Если ЗначениеЗаполнено(КлючТекущегоВарианта) Тогда
			Уникальность = Уникальность + "/КлючВарианта." + КлючТекущегоВарианта;
		КонецЕсли;
		
		ОтчетТабличныйДокумент.КлючПараметровПечати = Уникальность;
		КлючСохраненияПоложенияОкна = Уникальность;
	КонецЕсли;
КонецПроцедуры
