////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если ПустаяСтрока(ПользователиИнформационнойБазы.ТекущийПользователь().Имя)
	 Или Пользователи.РолиДоступны("ИспользованиеДополнительныхОтчетовИОбработок,ДобавлениеИзменениеДополнительныхОтчетовИОбработок") Тогда
		
		ПолноеИмяОбъектаМетаданных = "Документ.РеализацияТоваровУслуг";
		ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ТипФормыСДополнительнымиОтчетамиИОбработками", "ФормаСписка"));
		ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ТипОбъектаКонфигурации", ПолноеИмяОбъектаМетаданных));
		
	КонецЕсли;
	
	ДатаОтгрузки = ТекущаяДата();
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("ДатаОтгрузки", ДатаОтгрузки);
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		СтруктураБыстрогоОтбора.Свойство("Статус", Статус);
	КонецЕсли;
	
	// Установка отборов.
	УстановитьОтборПоСкладуСервер();
	
	Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		УстановитьОтборПоДатеОформленияСервер();
	Иначе
		СписокРаспоряженияНаОформление.Параметры.УстановитьЗначениеПараметра("ДатаОтгрузки",ДатаОтгрузки);
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРеализацииТоваровУслуг, "Менеджер", Менеджер, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокАктовВыполненныхРабот, "Менеджер", Менеджер, СтруктураБыстрогоОтбора);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(СписокРеализацииТоваровУслуг, "Статус", Статус, СтруктураБыстрогоОтбора);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") И
		Не ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов") Тогда
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокРаспоряженияНаОформление", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Склад", "Видимость", Ложь);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДатаОтгрузки", "Видимость", Ложь);
		
	КонецЕсли;
	
	УстановитьТекущуюСтраницу();
	
	ИспользоватьРеализациюПоНесколькимЗаказам           = ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам");
	ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам");
	
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.МенеджерРеализация.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейПоМассивуРолей(Документы.РеализацияТоваровУслуг.ИменаРолейСПравомДобавления())
	);
	
	ОтборыСписковКлиентСервер.СкопироватьСписокВыбораОтбораПоМенеджеру(
		Элементы.МенеджерАктВыполненныхРабот.СписокВыбора,
		ОбщегоНазначенияУТ.ПолучитьСписокПользователейПоМассивуРолей(Документы.АктВыполненныхРабот.ИменаРолейСПравомДобавления())
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_РеализацияТоваровУслуг"
	 ИЛИ ИмяСобытия = "Запись_ЗаказКлиента"
	 ИЛИ ИмяСобытия = "Запись_ЗаявкаНаВозвратТоваровОтКлиента"
	 ИЛИ ИмяСобытия = "Запись_АктВыполненныхРабот" Тогда
			Элементы.СписокРаспоряженияНаОформление.Обновить();
	КонецЕсли;
	
	// Подсистема "ЭлектронныеДокументы"
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		Элементы.СписокРеализацииТоваровУслуг.Обновить();
		Элементы.СписокАктовВыполненныхРабот.Обновить();
	КонецЕсли;
	
	Если ИмяСобытия = "ВыбранТипДокументаПродажи" Тогда
		Если Параметр = "Реализация товаров и услуг" Тогда
			ПродажиКлиент.СоздатьРеализациюТоваровУслугНаОснованииЗаказаКлиента(
				Элементы.СписокРаспоряженияНаОформление,
				ИспользоватьРеализациюПоНесколькимЗаказам,
				Склад,
				ДатаОтгрузки
			);
		ИначеЕсли Параметр = "Акт выполненных работ" Тогда
			ПродажиКлиент.СоздатьАктВыполненныхРаботНаОснованииЗаказаКлиента(
				Элементы.СписокРаспоряженияНаОформление,
				ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам,
				ДатаОтгрузки
			);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Склад", Склад);
		Настройки.Удалить("Склад");
	Иначе
		Склад = Настройки.Получить("Склад");
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРеализацииТоваровУслуг, "Менеджер", Менеджер, СтруктураБыстрогоОтбора, Настройки);
	Настройки.Вставить("Менеджер", Менеджер);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокАктовВыполненныхРабот, "Менеджер", Менеджер, СтруктураБыстрогоОтбора, Настройки);
	ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(СписокРеализацииТоваровУслуг, "Статус", Статус, СтруктураБыстрогоОтбора, Настройки);

	СписокРаспоряженияНаОформление.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокРеализацииТоваровУслуг.Отбор, "Менеджер", Менеджер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Менеджер));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокАктовВыполненныхРабот.Отбор, "Менеджер", Менеджер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Менеджер));
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокРеализацииТоваровУслуг.Отбор, "Статус", Статус, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Статус));

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	УстановитьОтборПоСкладуСервер();

КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)

	Если ДатаОтгрузки = '00010101' Или ДатаОтгрузки < НачалоДня(ТекущаяДата()) Тогда
		ДатаОтгрузки = ТекущаяДата();
	КонецЕсли;

	УстановитьОтборПоДатеОформленияСервер();

КонецПроцедуры

&НаКлиенте
Процедура СписокРаспоряженияНаОформлениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(Элемент.ТекущиеДанные.Распоряжение);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРеализацииТоваровУслуг Тогда
		ПолноеИмяОбъектаМетаданных = "Документ.РеализацияТоваровУслуг";
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыполненныхРабот Тогда
		ПолноеИмяОбъектаМетаданных = "Документ.АктВыполненныхРабот";
	КонецЕсли;
	
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ТипОбъектаКонфигурации", ПолноеИмяОбъектаМетаданных));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УстановитьСтатусОтгружен(Команда)

	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокРеализацииТоваровУслуг);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос(НСтр("ru='У выделенных в списке документов реализации будет установлен статус ""Отгружено"". Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Отгружено");
	ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='Отгружено'"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКОтгрузке(Команда)
	
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокРеализацииТоваровУслуг);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос(НСтр("ru='У выделенных в списке документов реализации будет установлен статус ""К отгрузке"". Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "КОтгрузке");
	ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='К отгрузке'"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКПредоплате(Команда)
	
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокРеализацииТоваровУслуг);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос(НСтр("ru='У выделенных в списке документов реализации будет установлен статус ""К предоплате"". Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "КПредоплате");
	ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, ВыделенныеСтроки.Количество(), НСтр("ru='К предоплате'"));

КонецПроцедуры

&НаКлиенте
Процедура ОформитьПродажу(Команда)
	
	Если Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные = Неопределено Тогда
		Предупреждение(НСтр("ru = 'Команда не может быть выполнена для указанного объекта.'"));
		Возврат;
	КонецЕсли;
	
	Если Не НастройкиОформленияСохранены Тогда
		Результат = ОткрытьФормуНастройкиПараметров();
		Если Результат <> Неопределено Тогда
			СохранитьНастройки(Результат);
		КонецЕсли;
	КонецЕсли;
	
	Если СоздаватьДокументПродажи Тогда
		СоздатьНапечататьДокументы();
	Иначе
		СоздатьНаОсновании();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНапечататьДокументы()
	
	ТекущиеДанные = Элементы.СписокРаспоряженияНаОформление.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		Предупреждение(ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	МассивСсылок = Новый Массив();
	
	Для Каждого ЗаказКлиента Из Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки Цикл
	
		Если ТипЗнч(ЗаказКлиента) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСсылок.Добавить(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ЗаказКлиента).Ссылка);
		
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		Предупреждение(ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ОчиститьСообщения();
	
	МассивДокументов = СформироватьДокументыПродажиСервер(МассивСсылок);
	МассивПечатаемыхДокументов = Новый Массив();
	
	Для Каждого ТекЭлемент Из МассивДокументов Цикл
		
		Если Не ТекЭлемент.Проведен Тогда
			
			ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента", Новый Структура("Ключ", ТекЭлемент.Документ));
			
		ИначеЕсли ТекЭлемент.Печатать Тогда
			
			МассивПечатаемыхДокументов.Добавить(ТекЭлемент.Документ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.СписокРаспоряженияНаОформление.Обновить();
	
	Если МассивПечатаемыхДокументов.Количество() > 0 Тогда
		
		Если ПечататьРеализациюТоваровУслуг Или ПечататьАктВыполненныхРабот Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(
				"РегистрСведений.НастройкиПечатиОбъектов",
				"КомплектДокументов",
				МассивПечатаемыхДокументов,
				Неопределено
			);
			ТекстСообщения = НСтр("ru = 'Документы созданы и напечатаны (%КоличествоДокументов%)'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Документы созданы (%КоличествоДокументов%)'");
		КонецЕсли;
			
		ПоказатьОповещениеПользователя(
			СтрЗаменить(ТекстСообщения, "%КоличествоДокументов%", МассивДокументов.Количество()),
			,
			НСтр("ru=''"),
			БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьДокументыПродажиСервер(МассивСсылок)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Партнер                  КАК Партнер,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Контрагент               КАК Контрагент,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Договор                  КАК Договор,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Организация              КАК Организация,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение               КАК Соглашение,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Сделка                   КАК Сделка,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Склад                    КАК Склад,
	|	ВЫБОР
	|		КОГДА
	|			ЗаказыКлиентовОстатки.ЗаказКлиента.Склад.ЭтоГруппа И ЗаказыКлиентовОстатки.ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИНАЧЕ
	|			ЗаказыКлиентовОстатки.ЗаказКлиента.Склад
	|	КОНЕЦ КАК СкладОтгрузки,
	|	ВЫБОР
	|		КОГДА
	|			ЗаказыКлиентовОстатки.ЗаказКлиента.Склад.ЭтоГруппа И ЗаказыКлиентовОстатки.ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
	|	ВЫБОР
	|		КОГДА
	|			ЗаказыКлиентовОстатки.ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
	|			ИЛИ ЗаказыКлиентовОстатки.ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|		КОГДА
	|			ЗаказыКлиентовОстатки.ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|		ИНАЧЕ
	|			ЗаказыКлиентовОстатки.ЗаказКлиента.ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Валюта                   КАК ВалютаВзаиморасчетов,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.НалогообложениеНДС       КАК НалогообложениеНДС,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.ЦенаВключаетНДС          КАК ЦенаВключаетНДС,
	|	ЗаказыКлиентовОстатки.Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки           КАК СпособДоставки,
	|	ВЫБОР
	|		КОГДА
	|			ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			ИЛИ ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|		ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.ПеревозчикПартнер
	|		ИНАЧЕ Значение(Справочник.Партнеры.ПустаяСсылка)
	|	КОНЕЦ                                                        КАК ПеревозчикПартнер,
	|	ВЫБОР
	|		КОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
	|		ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.АдресДоставки
	|		ИНАЧЕ """"
	|	КОНЕЦ                                                       КАК АдресДоставки,
	|	ВЫБОР
	|		КОГДА
	|			ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			ИЛИ ЗаказыКлиентовОстатки.ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|		ТОГДА ЗаказыКлиентовОстатки.ЗаказКлиента.АдресДоставкиПеревозчика
	|		ИНАЧЕ """"
	|	КОНЕЦ                                                       КАК АдресДоставкиПеревозчика,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента                          КАК ЗаказКлиента,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю КАК РассчитыватьДатуВозвратаТарыПоКалендарю
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(
	|			&ДатаОтгрузки,
	|			ЗаказКлиента В (&МассивСсылок)
	|				И (Склад = &Склад
	|					ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|					ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|				И Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг)) КАК ЗаказыКлиентовОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Партнер                  КАК Партнер,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Контрагент               КАК Контрагент,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Договор                  КАК Договор,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Организация              КАК Организация,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение               КАК Соглашение,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Сделка                   КАК Сделка,
	|	НЕОПРЕДЕЛЕНО                                                КАК Склад,
	|	НЕОПРЕДЕЛЕНО                                                КАК СкладОтгрузки,
	|	ЛОЖЬ                                                        КАК ЗапрещеноВыбиратьГруппуСкладов,
	|	НЕОПРЕДЕЛЕНО                                                КАК ХозяйственнаяОперация,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Валюта                   КАК ВалютаВзаиморасчетов,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.НалогообложениеНДС       КАК НалогообложениеНДС,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.ЦенаВключаетНДС          КАК ЦенаВключаетНДС,
	|	ЗаказыКлиентовОстатки.Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
	|	НЕОПРЕДЕЛЕНО                                                КАК СпособДоставки,
	|	НЕОПРЕДЕЛЕНО                                                КАК ПеревозчикПартнер,
	|	НЕОПРЕДЕЛЕНО                                                КАК АдресДоставки,
	|	НЕОПРЕДЕЛЕНО                                                КАК АдресДоставкиПеревозчика,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента                          КАК ЗаказКлиента,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
	|	ЗаказыКлиентовОстатки.ЗаказКлиента.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю КАК РассчитыватьДатуВозвратаТарыПоКалендарю
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(
	|			&ДатаОтгрузки,
	|			ЗаказКлиента В (&МассивСсылок)
	|				И (Склад = &Склад
	|					ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|					ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|				И Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)) КАК ЗаказыКлиентовОстатки
	|УПОРЯДОЧИТЬ ПО
	|	ВариантОформленияПродажи,
	|	Партнер,
	|	Контрагент,
	|	Договор,
	|	Организация,
	|	Соглашение,
	|	Сделка,
	|	СкладОтгрузки,
	|	ХозяйственнаяОперация,
	|	ВалютаВзаиморасчетов,
	|	НалогообложениеНДС,
	|	ЦенаВключаетНДС,
	|	ЗапрещеноВыбиратьГруппуСкладов,
	|	ЗаказКлиента,
	|	ВернутьМногооборотнуюТару,
	|	СрокВозвратаМногооборотнойТары,
	|	РассчитыватьДатуВозвратаТарыПоКалендарю
	|";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("Склад",        Склад);
	Запрос.УстановитьПараметр("ДатаОтгрузки", Новый Граница (КонецДня(ДатаОтгрузки), ВидГраницы.Включая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивДокументов = Новый Массив();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выгрузка = РезультатЗапроса.Выгрузить();
		Выгрузка.Свернуть("
			|Партнер,
			|Контрагент,
			|Договор,
			|Организация,
			|Соглашение,
			|Сделка,
			|Склад,
			|СкладОтгрузки,
			|ХозяйственнаяОперация,
			|ВалютаВзаиморасчетов,
			|НалогообложениеНДС,
			|ЦенаВключаетНДС,
			|ЗапрещеноВыбиратьГруппуСкладов,
			|ВариантОформленияПродажи,
			|СпособДоставки,
			|ПеревозчикПартнер,
			|АдресДоставки,
			|АдресДоставкиПеревозчика,
			|ВернутьМногооборотнуюТару,
			|СрокВозвратаМногооборотнойТары,
			|РассчитыватьДатуВозвратаТарыПоКалендарю
			|");
		
		СтруктураПоиска = Новый Структура("
			|Партнер,
			|Контрагент,
			|Договор,
			|Организация,
			|Соглашение,
			|Сделка,
			|Склад,
			|СкладОтгрузки,
			|ХозяйственнаяОперация,
			|ВалютаВзаиморасчетов,
			|НалогообложениеНДС,
			|ЦенаВключаетНДС,
			|ЗапрещеноВыбиратьГруппуСкладов,
			|ВариантОформленияПродажи,
			|СпособДоставки,
			|ПеревозчикПартнер,
			|АдресДоставки,
			|АдресДоставкиПеревозчика,
			|ВернутьМногооборотнуюТару,
			|СрокВозвратаМногооборотнойТары,
			|РассчитыватьДатуВозвратаТарыПоКалендарю
			|");
		
		Для Каждого ТекСтрока Из Выгрузка Цикл
			
			МассивСсылок = Новый Массив();
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрока);
			Выборка.Сбросить();
			
			Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
				МассивСсылок.Добавить(Выборка.ЗаказКлиента);
			КонецЦикла;
			
			ПараметрыОснования = Новый Структура();
			ПараметрыОснования.Вставить("ДатаОтгрузки", ДатаОтгрузки);
			Если Выборка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг Тогда
				ПараметрыОснования.Вставить("СкладОтгрузки", Склад);
			КонецЕсли;
			
			Если (Выборка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
				И ИспользоватьРеализациюПоНесколькимЗаказам) Или
				(Выборка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот
				И ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам) Тогда
				
				РеквизитыРаспоряжения = ПолучитьРеквизитыРаспоряжений(МассивСсылок);
				РеквизитыШапки = Новый Структура();
				ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(РеквизитыШапки, СтруктураПоиска, Истина);
				ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(РеквизитыШапки, РеквизитыРаспоряжения, Истина);
				
				ПараметрыОснования.Вставить("РеквизитыШапки",    РеквизитыШапки);
				ПараметрыОснования.Вставить("ДокументОснование", МассивСсылок);
				СоздатьДокументПродажи(СтруктураПоиска, ПараметрыОснования, МассивДокументов);
				
			Иначе
				
				Для Каждого ТекЭлемент Из МассивСсылок Цикл
					ПараметрыОснования.Вставить("ДокументОснование", ТекЭлемент);
					СоздатьДокументПродажи(СтруктураПоиска, ПараметрыОснования, МассивДокументов);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивДокументов;
	
КонецФункции

&НаКлиенте
Процедура СоздатьНаОсновании()
	
	МассивСсылокДляАктовВыполненныхРабот = Новый Массив();
	МассивСсылокДляРеализации = Новый Массив();
	
	Если ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам Тогда
		Для Каждого ЗаказКлиента Из Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки Цикл
		
			Если ТипЗнч(ЗаказКлиента) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСсылокДляАктовВыполненныхРабот.Добавить(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ЗаказКлиента).Ссылка);
			
		КонецЦикла;
	Иначе
		МассивСсылокДляАктовВыполненныхРабот.Добавить(элементы.СписокРаспоряженияНаОформление.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	Если ИспользоватьРеализациюПоНесколькимЗаказам Тогда
		Для Каждого ЗаказКлиента Из Элементы.СписокРаспоряженияНаОформление.ВыделенныеСтроки Цикл
		
			Если ТипЗнч(ЗаказКлиента) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСсылокДляРеализации.Добавить(Элементы.СписокРаспоряженияНаОформление.ДанныеСтроки(ЗаказКлиента).Ссылка);
			
		КонецЦикла;
	Иначе
		МассивСсылокДляРеализации.Добавить(элементы.СписокРаспоряженияНаОформление.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	ОчиститьСообщения();
	Действие = ДействиеВводаНаОсновании(МассивСсылокДляРеализации, МассивСсылокДляАктовВыполненныхРабот, ДатаОтгрузки, Склад);
	
	Если Действие = "АктВыполненныхРабот" Тогда
		ПродажиКлиент.СоздатьАктВыполненныхРаботНаОснованииЗаказаКлиента(
			Элементы.СписокРаспоряженияНаОформление,
			ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам,
			ДатаОтгрузки
		);
	ИначеЕсли Действие = "РеализацияТоваровУслуг" Тогда
		ПродажиКлиент.СоздатьРеализациюТоваровУслугНаОснованииЗаказаКлиента(
			Элементы.СписокРаспоряженияНаОформление,
			ИспользоватьРеализациюПоНесколькимЗаказам,
			Склад,
			ДатаОтгрузки
		);
	КонецЕсли;
	Если Действие = "ПредложитьВыбратьТипДокументаПродажи" Тогда
		СписокЗаказовДляРеализации = Новый СписокЗначений;
		СписокЗаказовДляРеализации.ЗагрузитьЗначения(МассивСсылокДляРеализации);
		СписокЗаказовДляАктовВыполненныхРабот = Новый СписокЗначений;
		СписокЗаказовДляАктовВыполненныхРабот.ЗагрузитьЗначения(МассивСсылокДляАктовВыполненныхРабот);
		ОткрытьФормуМодально("ОбщаяФорма.ВыборТипаДокументаПродажи", 
							Новый Структура("СписокЗаказовДляРеализации, СписокЗаказовДляАктовВыполненныхРабот, ДатаОтгрузки",
											СписокЗаказовДляРеализации, 
											СписокЗаказовДляАктовВыполненныхРабот,
											ДатаОтгрузки
											)
							);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.РеализацияТоваровУслуг.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.АктВыполненныхРабот.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Элементы.СписокРеализацииТоваровУслуг.ТекущаяСтрока = Ссылка;
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаРеализацииТоваровУслуг;
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			Элементы.СписокАктовВыполненныхРабот.ТекущаяСтрока = Ссылка;
			Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаВыполненныхРабот;
		КонецЕсли;
		
		ОткрытьЗначение(Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура СоздатьДокументПродажи(ПоляДокумента, ПараметрыОснования, МассивДокументов)
	
	Если ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг Тогда
		НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг") Тогда
			НовыйДокумент.Статус = СтатусРеализацииТоваровУслуг;
		Иначе
			НовыйДокумент.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		КонецЕсли;
	Иначе
		НовыйДокумент = Документы.АктВыполненныхРабот.СоздатьДокумент();
	КонецЕсли;
	
	НовыйДокумент.Дата = ДатаОтгрузки;
	НовыйДокумент.Заполнить(ПараметрыОснования);
	НовыйДокумент.СкидкиРассчитаны = Истина;
	Если НачалоДня(НовыйДокумент.Дата) = НачалоДня(ТекущаяДата()) Тогда
		НовыйДокумент.Дата = НовыйДокумент.Дата + Число(ТекущаяДата() - НачалоДня(ТекущаяДата()));
	Иначе
		НовыйДокумент.Дата = НовыйДокумент.Дата;
	КонецЕсли;
	
	Если ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг Тогда
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(НовыйДокумент,Документы.РеализацияТоваровУслуг);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(НовыйДокумент, ПараметрыУказанияСерий);
	КонецЕсли;
	
	ДокументПроведен = Ложь;
	
	Если НовыйДокумент.ПроверитьЗаполнение() Тогда
		
		Попытка
			
			Если (ПечататьРеализациюТоваровУслуг И ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг) Или
				(ПечататьАктВыполненныхРабот И ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот) Тогда
				
				Печатать = Истина;
				
			Иначе
				
				Печатать = Ложь;
				
			КонецЕсли;
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			МассивДокументов.Добавить(Новый Структура("Документ,Проведен,Печатать", НовыйДокумент.Ссылка, Истина, Печатать));
			ДокументПроведен = Истина;
			
		Исключение
			
			НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
			МассивДокументов.Добавить(Новый Структура("Документ,Проведен", НовыйДокумент.Ссылка, Ложь, Ложь));
			
		КонецПопытки;
		
		Если ДокументПроведен И (ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг И 
			НовыйДокумент.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию) Или
			ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот Тогда
			
			НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(НовыйДокумент.Организация, Неопределено, НовыйДокумент.Дата);
			
			Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
				
				СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(СчетФактура, НовыйДокумент);
				СчетФактура.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
				СчетФактура.ДокументОснование = НовыйДокумент.Ссылка;
				СчетФактура.Дата = ДатаОтгрузки;
				СчетФактура.УстановитьНовыйНомер();
				
				ДанныеСчетаФактуры = Новый Структура;
				ДанныеСчетаФактуры.Вставить("ДокументОснование", НовыйДокумент.Ссылка);
				ДанныеСчетаФактуры.Вставить("Организация",       НовыйДокумент.Организация);
				ДанныеСчетаФактуры.Вставить("Дата",              НовыйДокумент.Дата);
				ДанныеСчетаФактуры.Вставить("Выставлен",         Истина);
				ДанныеСчетаФактуры.Вставить("ДатаВыставления",   НовыйДокумент.Дата);
				
				СчетФактура.Заполнить(ДанныеСчетаФактуры);
				СчетФактура.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		МассивДокументов.Добавить(Новый Структура("Документ,Проведен", НовыйДокумент.Ссылка, Ложь));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыРаспоряжений(МассивРаспоряжений)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчет
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Организация) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчет)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчетКонтрагента
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Контрагент) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчетКонтрагента)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетКонтрагента,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.Грузоотправитель
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Грузоотправитель)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.Грузополучатель
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Грузополучатель)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчетГрузоотправителя <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчетГрузоотправителя
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.Грузоотправитель
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчетГрузоотправителя)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетГрузоотправителя,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчетГрузополучателя <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчетГрузополучателя
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.Грузополучатель
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчетГрузополучателя)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетГрузополучателя,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.Касса
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Касса)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|	КОНЕЦ КАК Касса,
	|	ЗаказКлиента.ФормаОплаты КАК ФормаОплаты,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫРАЗИТЬ(ЗаказКлиента.АдресДоставкиЗначенияПолей КАК СТРОКА(1000))) = 1
	|			ТОГДА МАКСИМУМ(ВЫРАЗИТЬ(ЗаказКлиента.АдресДоставкиЗначенияПолей КАК СТРОКА(1000)))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|						ТОГДА ВЫРАЗИТЬ(ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей КАК СТРОКА(1000))
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ВЫРАЗИТЬ(ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей КАК СТРОКА(1000)))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресДоставкиПеревозчикаЗначенияПолей,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА (ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|							И ЗаказКлиента.ЗонаДоставки <> ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.ЗонаДоставки
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ЗонаДоставки)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка)
	|	КОНЕЦ КАК ЗонаДоставки,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|						ТОГДА ЗаказКлиента.ВремяДоставкиС
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ВремяДоставкиС)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ВремяДоставкиС,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|						ТОГДА ЗаказКлиента.ВремяДоставкиПо
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ВремяДоставкиПо)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ВремяДоставкиПо,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫРАЗИТЬ(ЗаказКлиента.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(1000))) = 1
	|			ТОГДА МАКСИМУМ(ВЫРАЗИТЬ(ЗаказКлиента.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(1000)))
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДополнительнаяИнформацияПоДоставке
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказКлиента.Контрагент КАК Контрагент,
	|		ЗаказКлиента.Организация КАК Организация,
	|		ЗаказКлиента.БанковскийСчет КАК БанковскийСчет,
	|		ЗаказКлиента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|		ЗаказКлиента.Грузоотправитель КАК Грузоотправитель,
	|		ЗаказКлиента.Грузополучатель КАК Грузополучатель,
	|		ЗаказКлиента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|		ЗаказКлиента.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|		ЗаказКлиента.Касса КАК Касса,
	|		ЗаказКлиента.ФормаОплаты КАК ФормаОплаты,
	|		ЗаказКлиента.СпособДоставки                        КАК СпособДоставки,
	|		ЗаказКлиента.АдресДоставкиЗначенияПолей            КАК АдресДоставкиЗначенияПолей,
	|		ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей КАК АдресДоставкиПеревозчикаЗначенияПолей,
	|		ЗаказКлиента.ЗонаДоставки                          КАК ЗонаДоставки,
	|		ЗаказКлиента.ВремяДоставкиС                        КАК ВремяДоставкиС,
	|		ЗаказКлиента.ВремяДоставкиПо                       КАК ВремяДоставкиПо,
	|		ЗаказКлиента.ДополнительнаяИнформацияПоДоставке    КАК ДополнительнаяИнформацияПоДоставке
	|	ИЗ
	|		Документ.ЗаказКлиента КАК ЗаказКлиента
	|	ГДЕ
	|		ЗаказКлиента.Ссылка В(&МассивРаспоряжений)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаявкаНаВозвратТоваровОтКлиента.Контрагент,
	|		ЗаявкаНаВозвратТоваровОтКлиента.Организация,
	|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчет,
	|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчетКонтрагента,
	|		ЗаявкаНаВозвратТоваровОтКлиента.Грузоотправитель,
	|		ЗаявкаНаВозвратТоваровОтКлиента.Грузополучатель,
	|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчетГрузоотправителя,
	|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчетГрузополучателя,
	|		ЗаявкаНаВозвратТоваровОтКлиента.Касса,
	|		ЗаявкаНаВозвратТоваровОтКлиента.ФормаОплаты,
	|		ЗаявкаНаВозвратТоваровОтКлиента.СпособДоставки,
	|		ЗаявкаНаВозвратТоваровОтКлиента.АдресДоставкиЗначенияПолей,
	|		ЗаявкаНаВозвратТоваровОтКлиента.АдресДоставкиПеревозчикаЗначенияПолей,
	|		ЗаявкаНаВозвратТоваровОтКлиента.ЗонаДоставки,
	|		ЗаявкаНаВозвратТоваровОтКлиента.ВремяДоставкиС,
	|		ЗаявкаНаВозвратТоваровОтКлиента.ВремяДоставкиПо,
	|		ЗаявкаНаВозвратТоваровОтКлиента.ДополнительнаяИнформацияПоДоставке
	|	ИЗ
	|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
	|	ГДЕ
	|		ЗаявкаНаВозвратТоваровОтКлиента.Ссылка В(&МассивРаспоряжений)) КАК ЗаказКлиента
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказКлиента.ФормаОплаты");
		
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("БанковскийСчет",                 Выборка.БанковскийСчет);
	СтруктураРеквизитов.Вставить("БанковскийСчетКонтрагента",      Выборка.БанковскийСчетКонтрагента);
	СтруктураРеквизитов.Вставить("Грузоотправитель",               Выборка.Грузоотправитель);
	СтруктураРеквизитов.Вставить("Грузополучатель",                Выборка.Грузополучатель);
	СтруктураРеквизитов.Вставить("БанковскийСчетГрузоотправителя", Выборка.БанковскийСчетГрузоотправителя);
	СтруктураРеквизитов.Вставить("БанковскийСчетГрузополучателя",  Выборка.БанковскийСчетГрузополучателя);
	СтруктураРеквизитов.Вставить("Касса",                          Выборка.Касса);
	СтруктураРеквизитов.Вставить("ФормаОплаты",                    Выборка.ФормаОплаты);
	
	СтруктураРеквизитов.Вставить("АдресДоставкиЗначенияПолей",            Выборка.АдресДоставкиЗначенияПолей);
	СтруктураРеквизитов.Вставить("АдресДоставкиПеревозчикаЗначенияПолей", Выборка.АдресДоставкиПеревозчикаЗначенияПолей);
	СтруктураРеквизитов.Вставить("ЗонаДоставки",                          Выборка.ЗонаДоставки);
	СтруктураРеквизитов.Вставить("ВремяДоставкиС",                        Выборка.ВремяДоставкиС);
	СтруктураРеквизитов.Вставить("ВремяДоставкиПо",                       Выборка.ВремяДоставкиПо);
	СтруктураРеквизитов.Вставить("ДополнительнаяИнформацияПоДоставке",    Выборка.ДополнительнаяИнформацияПоДоставке);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборПоСкладуСервер()
	
	СписокРаспоряженияНаОформление.Параметры.УстановитьЗначениеПараметра("Склад", Склад);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоДатеОформленияСервер()

	СписокРаспоряженияНаОформление.Параметры.УстановитьЗначениеПараметра("ДатаОтгрузки",
			Новый Граница(КонецДня(ДатаОтгрузки), ВидГраницы.Включая));

КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницу()
	
	ИмяТекущейСтраницы = "";
	
	Если Параметры.Свойство("ИмяТекущейСтраницы", ИмяТекущейСтраницы) Тогда
		Если ЗначениеЗаполнено(ИмяТекущейСтраницы) Тогда
			ТекущийЭлемент = Элементы[ИмяТекущейСтраницы];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДействиеВводаНаОсновании(МассивСсылокДляРеализации, МассивСсылокДляАктовВыполненныхРабот, ДатаОтгрузки, Склад)
	
	ВыборКорректный = ОпределитьКорректностьВыбора(МассивСсылокДляРеализации, МассивСсылокДляАктовВыполненныхРабот);
	
	Если Не ВыборКорректный ТОгда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаказыКлиентовОстатки.Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи
	               |ИЗ
	               |	РегистрНакопления.ЗаказыКлиентов.Остатки(
	               |			&ДатаОтгрузки,
	               |			ЗаказКлиента В (&МассивСсылокДляРеализации)
	               |				И (Склад = &Склад
	               |					ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	               |					ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	               |				И Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг)) КАК ЗаказыКлиентовОстатки
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗаказыКлиентовОстатки.Номенклатура.ВариантОформленияПродажи
	               |ИЗ
	               |	РегистрНакопления.ЗаказыКлиентов.Остатки(
	               |			&ДатаОтгрузки,
	               |			ЗаказКлиента В (&МассивСсылокДляАктовВыполненныхРабот)
	               |				И (Склад = &Склад
	               |					ИЛИ &Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	               |					ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	               |				И Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)) КАК ЗаказыКлиентовОстатки";
	Запрос.УстановитьПараметр("МассивСсылокДляРеализации", МассивСсылокДляРеализации);
	Запрос.УстановитьПараметр("МассивСсылокДляАктовВыполненныхРабот", МассивСсылокДляАктовВыполненныхРабот);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДатаОтгрузки", Новый Граница (КонецДня(ДатаОтгрузки), ВидГраницы.Включая));
	ТаблицаВариантов = Запрос.Выполнить().Выгрузить();
	Если ТаблицаВариантов.Количество()=1 Тогда
		Если ТаблицаВариантов[0].ВариантОформленияПродажи=Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот Тогда
			Возврат "АктВыполненныхРабот";
		ИначеЕсли	ТаблицаВариантов[0].ВариантОформленияПродажи=Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг ТОгда
			Возврат "РеализацияТоваровУслуг";
		КонецЕсли;
	ИначеЕсли	ТаблицаВариантов.Количество()=2 Тогда	
		Возврат "ПредложитьВыбратьТипДокументаПродажи";
	Конецесли;
	
КонецФункции 

&НаСервере
Функция ОпределитьКорректностьВыбора(МассивСсылокДляРеализации, МассивСсылокДляАктовВыполненныхРабот)
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Партнер) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияПартнер,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Контрагент) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияКонтрагент,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Договор) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияДоговор,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Организация) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияОрганизация,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Соглашение) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияСоглашение,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Сделка) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияСделка,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Склад) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияСклад,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ХозяйственнаяОперация) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияХозяйственнаяОперация,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ВалютаВзаиморасчетов) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияВалютаВзаиморасчетов,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.НалогообложениеНДС) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияНалогообложениеНДС,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ЦенаВключаетНДС) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияЦенаВключаетНДС,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ВернутьМногооборотнуюТару) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияВернутьМногооборотнуюТару,
					|	ВЫБОР
					|		КОГДА
					|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.СрокВозвратаМногооборотнойТары) > 1
					|		ТОГДА
					|			ИСТИНА
					|		ИНАЧЕ
					|			ЛОЖЬ
					|	КОНЕЦ КАК ЕстьОтличияСрокВозвратаМногооборотнойТары
					|ИЗ
					|	(ВЫБРАТЬ
					|		ЗаказКлиента.Партнер               КАК Партнер,
					|		ЗаказКлиента.Контрагент            КАК Контрагент,
					|		ЗаказКлиента.Организация           КАК Организация,
					|		ЗаказКлиента.Договор               КАК Договор,
					|		ЗаказКлиента.Соглашение            КАК Соглашение,
					|		ЗаказКлиента.Сделка                КАК Сделка,
					|		ВЫБОР
					|			КОГДА
					|				ЗаказКлиента.Склад.ЭтоГруппа И ЗаказКлиента.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
					|			ТОГДА
					|				ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
					|			ИНАЧЕ
					|				ЗаказКлиента.Склад
					|		КОНЕЦ                                       КАК Склад,
					|		ЗаказКлиента.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
					|		ЗаказКлиента.Валюта                         КАК ВалютаВзаиморасчетов,
					|		ЗаказКлиента.НалогообложениеНДС             КАК НалогообложениеНДС,
					|		ЗаказКлиента.ЦенаВключаетНДС                КАК ЦенаВключаетНДС,
					|		ЗаказКлиента.ВернутьМногооборотнуюТару      КАК ВернутьМногооборотнуюТару,
					|		ЗаказКлиента.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары
					|	ИЗ
					|		Документ.ЗаказКлиента КАК ЗаказКлиента
					|	ГДЕ
					|		(ЗаказКлиента.Ссылка В (&МассивСсылокДляАктовВыполненныхРабот)
					|				ИЛИ ЗаказКлиента.Ссылка В (&МассивСсылокДляРеализации))
					|	
					|	ОБЪЕДИНИТЬ ВСЕ
					|	
					|	ВЫБРАТЬ
					|		ЗаявкаНаВозврат.Партнер            КАК Партнер,
					|		ЗаявкаНаВозврат.Контрагент         КАК Контрагент,
					|		ЗаявкаНаВозврат.Организация        КАК Организация,
					|		ЗаявкаНаВозврат.Договор            КАК Договор,
					|		ЗаявкаНаВозврат.Соглашение         КАК Соглашение,
					|		ЗаявкаНаВозврат.Сделка             КАК Сделка,
					|		ЗаявкаНаВозврат.Склад              КАК Склад,
					|		ВЫБОР
					|			КОГДА ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
					|					ИЛИ ЗаявкаНаВозврат.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
					|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
					|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
					|		КОНЕЦ                                          КАК ХозяйственнаяОперация,
					|		ЗаявкаНаВозврат.Валюта                         КАК Валюта,
					|		ЗаявкаНаВозврат.НалогообложениеНДС             КАК НалогообложениеНДС,
					|		ЗаявкаНаВозврат.ЦенаВключаетНДС                КАК ЦенаВключаетНДС,
					|		ЗаявкаНаВозврат.ВернутьМногооборотнуюТару      КАК ВернутьМногооборотнуюТару,
					|		ЗаявкаНаВозврат.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары
					|	ИЗ
					|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозврат
					|	ГДЕ
					|		(ЗаявкаНаВозврат.Ссылка В (&МассивСсылокДляАктовВыполненныхРабот)
					|				ИЛИ ЗаявкаНаВозврат.Ссылка В (&МассивСсылокДляРеализации))) КАК ЗаказКлиента
					|
					|";
		
	Запрос.УстановитьПараметр("МассивСсылокДляРеализации", МассивСсылокДляРеализации);
	Запрос.УстановитьПараметр("МассивСсылокДляАктовВыполненныхРабот", МассивСсылокДляАктовВыполненныхРабот);
	ВыборкаРеквизитыШапки = Запрос.Выполнить().Выбрать();
	ВыборкаРеквизитыШапки.Следующий();
	
	Если ПродажиСервер.СообщитьОбОшибкахФормированияДанныхЗаполненияРеализации(ВыборкаРеквизитыШапки) Тогда
	
		ТекстОшибки = НСтр("ru='Ввод одного документа продажи на основании выделенных распоряжений невозможен'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, КоличествоВыделенных, Статус)

	Если КоличествоОбработанных > 0 Тогда

		Элементы.СписокРеализацииТоваровУслуг.Обновить();

		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке документов установлен статус ""%Статус%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВыделенных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%",                 Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);

	Иначе

		ТекстСообщения = НСтр("ru='Статус ""%Статус%"" не установлен ни для одного документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);

	КонецЕсли;

	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);

КонецПроцедуры

&НаКлиенте
Процедура Параметры(Команда)
	
	Результат = ОткрытьФормуНастройкиПараметров();
	Если Результат <> Неопределено Тогда
		СохранитьНастройки(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПараметрыОформленияДокументовПродажи" Тогда
		Если ВыбранноеЗначение <> Неопределено Тогда
			СохранитьНастройки(ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Настройки)
	
	НастройкиОформленияСохранены = Истина;
	
	СоздаватьДокументПродажи       = Настройки.СоздаватьДокументПродажи;
	ПечататьРеализациюТоваровУслуг = Настройки.ПечататьРеализациюТоваровУслуг;
	ПечататьАктВыполненныхРабот    = Настройки.ПечататьАктВыполненныхРабот;
	СтатусРеализацииТоваровУслуг   = Настройки.СтатусРеализацииТоваровУслуг;
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьФормуНастройкиПараметров()
	
	Если Не ЗначениеЗаполнено(СтатусРеализацииТоваровУслуг) Тогда
		СтатусРеализацииТоваровУслуг = ПредопределенноеЗначение("Перечисление.СтатусыРеализацийТоваровУслуг.КОтгрузке");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СоздаватьДокументПродажи",       СоздаватьДокументПродажи);
	ПараметрыФормы.Вставить("ПечататьРеализациюТоваровУслуг", ПечататьРеализациюТоваровУслуг);
	ПараметрыФормы.Вставить("ПечататьАктВыполненныхРабот",    ПечататьАктВыполненныхРабот);
	ПараметрыФормы.Вставить("СтатусРеализацииТоваровУслуг",   СтатусРеализацииТоваровУслуг);
	
	Возврат ОткрытьФормуМодально("ОбщаяФорма.ПараметрыОформленияДокументовПродажи", ПараметрыФормы);
	
КонецФункции
