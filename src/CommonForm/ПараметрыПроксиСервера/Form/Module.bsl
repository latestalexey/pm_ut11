////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	НастройкаПроксиНаКлиенте = Параметры.НастройкаПроксиНаКлиенте;
	Если НЕ Параметры.НастройкаПроксиНаКлиенте
		И НЕ Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав доступа.
			|
			|Настройка прокси-сервера выполняется администратором.'");
	КонецЕсли;
	
	Если НастройкаПроксиНаКлиенте Тогда
		НастройкаПроксиСервера = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкаПроксиСервера");
	Иначе
		НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.ПолучитьНастройкиПроксиНаСервере1СПредприятие();
	КонецЕсли;
	
	Если ТипЗнч(НастройкаПроксиСервера) = Тип("Соответствие") Тогда
		
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		Сервер       = НастройкаПроксиСервера.Получить("Сервер");
		Пользователь = НастройкаПроксиСервера.Получить("Пользователь");
		Пароль       = НастройкаПроксиСервера.Получить("Пароль");
		Порт         = НастройкаПроксиСервера.Получить("Порт");
		НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера.Получить("НеИспользоватьПроксиДляЛокальныхАдресов");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		
		МассивСерверовИсключений = НастройкаПроксиСервера.Получить("НеИспользоватьПроксиДляАдресов");
		Если ТипЗнч(МассивСерверовИсключений) = Тип("Массив") Тогда
			СерверыИсключений.ЗагрузитьЗначения(МассивСерверовИсключений);
		КонецЕсли;
		
		ДополнительныеПрокси = НастройкаПроксиСервера.Получить("ДополнительныеНастройкиПрокси");
		
		Если ТипЗнч(ДополнительныеПрокси) <> Тип("Соответствие") Тогда
			ОдинПроксиДляВсехПротоколов = Истина;
		Иначе
			
			// Если в настройках заданы дополнительные прокси-серверы,
			// то прочитать их из настроек
			Для каждого ПротоколСервер Из ДополнительныеПрокси Цикл
				Протокол             = ПротоколСервер.Ключ;
				НастройкаПоПротоколу = ПротоколСервер.Значение;
				ЭтаФорма["Сервер" + Протокол] = НастройкаПоПротоколу.Адрес;
				ЭтаФорма["Порт"   + Протокол] = НастройкаПоПротоколу.Порт;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВариантИспользованияПроксиСервера = ?(ИспользоватьПрокси, ?(ИспользоватьСистемныеНастройки = Истина, 1, 2), 0);
	Если Не НастройкаПроксиНаКлиенте Тогда
		НастройкиПрокси = Неопределено;
		// Варианты настройки прокси-сервера:
		// 0 - Не использовать прокси-сервер (по умолчанию, соответствует Новый ИнтернетПрокси(Ложь))
		// 1 - Использовать системные настройки прокси-сервера (соответствует Новый ИнтернетПрокси(Истина))
		// 2 - Использовать свои настройки прокси-сервера (соответствует ручной настройке параметров прокси-сервера)
		// Для последнего становятся достуно ручное изменение параметров прокси-сервера
		Если ВариантИспользованияПроксиСервера = 0 Тогда
			НастройкиПрокси = ПустыеНастройкиПроксиСервера();
		ИначеЕсли ВариантИспользованияПроксиСервера = 1 Тогда
			НастройкиПрокси = СистемныеНастройкиПроксиСервераНаСервере();
		КонецЕсли;
		ИнициализироватьЭлементыФормы(ЭтаФорма, НастройкиПрокси);
	КонецЕсли;
	
	// Управление видимостью элементов формы для настроек прокси на сервере 1С:Предприятия
	Если НЕ НастройкаПроксиНаКлиенте Тогда
		Если ТипЗнч(НастройкаПроксиСервера) = Тип("Соответствие") Тогда
			НастройкиИзФайла = (НастройкаПроксиСервера.Получить("ИспользоватьНастройкиИзФайлаКонфигурации") = Истина);
			Если НЕ НастройкиИзФайла Тогда
				Элементы.ГруппаПредупреждение.Видимость = Истина;
			Иначе
				
				ОбщиеНастройкиДляВсехВерсийПлатформы = (НастройкаПроксиСервера.Получить("ОбщиеДляВсехВерсийПлатформы") = Истина);
				Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
					Если ОбщиеНастройкиДляВсехВерсийПлатформы Тогда
						ЗаголовокИнформации = НСтр("ru = 'Заданные параметры действуют для всех файловых информационных баз и
												   |любой версии платформы на данном компьютере.'");
					Иначе
						ЗаголовокИнформации = НСтр("ru = 'Заданные параметры действуют для всех файловых информационных баз,
												   |работающих под управлением текущей версии платформы на данном компьютере.'");
					КонецЕсли;
				Иначе
					Если ОбщиеНастройкиДляВсехВерсийПлатформы Тогда
						ЗаголовокИнформации = НСтр("ru = 'Заданные параметры действуют для всех информационных баз и версий
												   |платформы, расположенных на сервере 1С:Предприятия.'");
					Иначе
						ЗаголовокИнформации = НСтр("ru = 'Заданные параметры действуют для всех информационных баз, расположенных
												   |на сервере 1С:Предприятия и работающих под управлением текущей версии платформы.'");
					КонецЕсли;
				КонецЕсли;
				
				Элементы.ДекорацияИнформацияДляНастроекИзФайла.Заголовок = ЗаголовокИнформации;
				Элементы.ДекорацияИнформацияДляНастроекИзФайла.Видимость = Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НастройкаПроксиНаКлиенте Тогда
#Если ВебКлиент Тогда
		Предупреждение(НСтр("ru = 'В веб-клиенте параметры прокси-сервера необходимо задавать в настройках браузера.'"));
		Отказ = Истина;
		Возврат;
#КонецЕсли		
		НастройкиПрокси = Неопределено;
		// Варианты настройки прокси-сервера:
		// 0 - Не использовать прокси-сервер (по умолчанию, соответствует Новый ИнтернетПрокси(Ложь))
		// 1 - Использовать системные настройки прокси-сервера (соответствует Новый ИнтернетПрокси(Истина))
		// 2 - Использовать свои настройки прокси-сервера (соответствует ручной настройке параметров прокси-сервера)
		// Для последнего становятся достуно ручное изменение параметров прокси-сервера
		Если ВариантИспользованияПроксиСервера = 0 Тогда
			НастройкиПрокси = ПустыеНастройкиПроксиСервера();
		ИначеЕсли ВариантИспользованияПроксиСервера = 1 Тогда
			НастройкиПрокси = СистемныеНастройкиПроксиСервераНаКлиенте();
		КонецЕсли;
		ИнициализироватьЭлементыФормы(ЭтаФорма, НастройкиПрокси);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		КодВозврата = Вопрос(НСтр("ru = 'Параметры прокси-сервера были изменены. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		Если КодВозврата = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		ИначеЕсли КодВозврата = КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
			// При закрытии форма должна возвратить настройки прокси-сервера.
			СохранитьНастройкиПроксиСервераИЗакрытьФорму();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ИспользоватьСистемныеНастройкиПроксиСервераПриИзменении(Элемент)
	
	ИспользоватьПрокси = ВариантИспользованияПроксиСервера > 0;
	ИспользоватьСистемныеНастройки = ВариантИспользованияПроксиСервера = 1;
	
	НастройкиПрокси = Неопределено;
	// Варианты настройки прокси-сервера:
	// 0 - Не использовать прокси-сервер (по умолчанию, соответствует Новый ИнтернетПрокси(Ложь))
	// 1 - Использовать системные настройки прокси-сервера (соответствует Новый ИнтернетПрокси(Истина))
	// 2 - Использовать свои настройки прокси-сервера (соответствует ручной настройке параметров прокси-сервера)
	// Для последнего становятся достуно ручное изменение параметров прокси-сервера
	Если ВариантИспользованияПроксиСервера = 0 Тогда
		НастройкиПрокси = ПустыеНастройкиПроксиСервера();
	ИначеЕсли ВариантИспользованияПроксиСервера = 1 Тогда
		НастройкиПрокси = ?(НастройкаПроксиНаКлиенте, СистемныеНастройкиПроксиСервераНаКлиенте(), СистемныеНастройкиПроксиСервераНаСервере());
	КонецЕсли;
	ИнициализироватьЭлементыФормы(ЭтаФорма, НастройкиПрокси);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ДополнительныеПараметрыПроксиСервера(Команда)
	
	// Формирование параметров для дополнительных настроек
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОдинПроксиДляВсехПротоколов", ОдинПроксиДляВсехПротоколов);
	
	ПараметрыФормы.Вставить("Сервер"     , Сервер);
	ПараметрыФормы.Вставить("Порт"       , Порт);
	ПараметрыФормы.Вставить("СерверHTTP" , СерверHTTP);
	ПараметрыФормы.Вставить("ПортHTTP"   , ПортHTTP);
	ПараметрыФормы.Вставить("СерверHTTPS", СерверHTTPS);
	ПараметрыФормы.Вставить("ПортHTTPS"  , ПортHTTPS);
	ПараметрыФормы.Вставить("СерверFTP"  , СерверFTP);
	ПараметрыФормы.Вставить("ПортFTP"    , ПортFTP);
	
	ПараметрыФормы.Вставить("НеИспользоватьПроксиДляАдресов", СерверыИсключений);
	
	ДополнительныеНастройки = ОткрытьФормуМодально("ОбщаяФорма.ДополнительныеПараметрыПроксиСервера",
		ПараметрыФормы);
	
	Если ТипЗнч(ДополнительныеНастройки) = Тип("Структура") Тогда
		
		Для каждого ИмяРеквизитаЗначение Из ДополнительныеНастройки Цикл
			Если ИмяРеквизитаЗначение.Ключ <> "НеИспользоватьПроксиДляАдресов" Тогда
				ЭтаФорма[ИмяРеквизитаЗначение.Ключ] = ИмяРеквизитаЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		СерверыИсключений = ДополнительныеНастройки.НеИспользоватьПроксиДляАдресов;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОК(Команда)
	
	// Сохраняет настройки прокси-сервера и закрывает форму,
	// передавая в качестве возвращаемого результата параметры прокси.
	СохранитьНастройкиПроксиСервераИЗакрытьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОтмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет сохранение настроек прокси-сервера в интерактивном режиме в
// результате действий пользователя с отображением сообщений пользователю,
// после чего закрывает форму с возвратом настроек прокси-сервера.
//
&НаКлиенте
Процедура СохранитьНастройкиПроксиСервераИЗакрытьФорму()
	
	НастройкаПроксиСервера = Новый Соответствие;
	
	НастройкаПроксиСервера.Вставить("ИспользоватьПрокси", ИспользоватьПрокси);
	НастройкаПроксиСервера.Вставить("Пользователь"      , Пользователь);
	НастройкаПроксиСервера.Вставить("Пароль"            , Пароль);
	НастройкаПроксиСервера.Вставить("Сервер"            , НормализованныйАдресПроксиСервера(Сервер));
	НастройкаПроксиСервера.Вставить("Порт"              , Порт);
	НастройкаПроксиСервера.Вставить("НеИспользоватьПроксиДляЛокальныхАдресов", НеИспользоватьПроксиДляЛокальныхАдресов);
	НастройкаПроксиСервера.Вставить("НеИспользоватьПроксиДляАдресов", СерверыИсключений.ВыгрузитьЗначения());
	НастройкаПроксиСервера.Вставить("ИспользоватьСистемныеНастройки", ИспользоватьСистемныеНастройки);
	
	// Формирование дополнительных адресов прокси-серверов
	
	Если НЕ ОдинПроксиДляВсехПротоколов Тогда
		
		ДополнительныеНастройки = Новый Соответствие;
		Если НЕ ПустаяСтрока(СерверHTTP) Тогда
			ДополнительныеНастройки.Вставить("http",
				Новый Структура("Адрес,Порт", НормализованныйАдресПроксиСервера(СерверHTTP), ПортHTTP));
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СерверHTTPS) Тогда
			ДополнительныеНастройки.Вставить("https",
				Новый Структура("Адрес,Порт", НормализованныйАдресПроксиСервера(СерверHTTPS), ПортHTTPS));
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СерверFTP) Тогда
			ДополнительныеНастройки.Вставить("ftp",
				Новый Структура("Адрес,Порт", НормализованныйАдресПроксиСервера(СерверFTP), ПортFTP));
		КонецЕсли;
		
		Если ДополнительныеНастройки.Количество() > 0 Тогда
			НастройкаПроксиСервера.Вставить("ДополнительныеНастройкиПрокси", ДополнительныеНастройки);
		КонецЕсли;
		
	КонецЕсли;
	
	СохранитьНастройкиПроксиСервера(НастройкаПроксиНаКлиенте, НастройкаПроксиСервера);
	
	Если НЕ НастройкаПроксиНаКлиенте И НЕ НастройкаПроксиСервера["ИспользоватьНастройкиИзФайлаКонфигурации"] Тогда
		Предупреждение(НСтр("ru = 'Ошибка доступа к файлу конфигурации сети.
							|Заданные настройки не будут действовать для механизмов, рассчитанных
							|на работу с веб-сервисами. Подробная информация в журнале регистрации.'"));
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть(НастройкаПроксиСервера);
	
КонецПроцедуры

// Выполняет непосредственное сохранение настроек прокси-сервера.
&НаСервереБезКонтекста
Процедура СохранитьНастройкиПроксиСервера(НастройкаПроксиНаКлиенте, НастройкаПроксиСервера)
	Если НастройкаПроксиНаКлиенте Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкаПроксиСервера", , НастройкаПроксиСервера);
		ОбновитьПовторноИспользуемыеЗначения();
	Иначе
		ПолучениеФайловИзИнтернета.СохранитьНастройкиПроксиНаСервере1СПредприятие(НастройкаПроксиСервера);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьЭлементыФормы(Форма, НастройкиПрокси)
	
	Если НастройкиПрокси <> Неопределено Тогда
		
		Форма.Сервер       = НастройкиПрокси.Сервер;
		Форма.Порт         = НастройкиПрокси.Порт;
		Форма.СерверHTTP   = НастройкиПрокси.СерверHTTP;
		Форма.ПортHTTP     = НастройкиПрокси.ПортHTTP;
		Форма.СерверHTTPS  = НастройкиПрокси.СерверHTTPS;
		Форма.ПортHTTPS    = НастройкиПрокси.ПортHTTPS;
		Форма.СерверFTP    = НастройкиПрокси.СерверFTP;
		Форма.ПортFTP      = НастройкиПрокси.ПортFTP;
		Форма.Пользователь = НастройкиПрокси.Пользователь;
		Форма.Пароль       = НастройкиПрокси.Пароль;
		Форма.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкиПрокси.НеИспользоватьПроксиДляЛокальныхАдресов;
		Форма.СерверыИсключений.ЗагрузитьЗначения(НастройкиПрокси.НеИспользоватьПроксиДляАдресов);
		
		// Если настройки по всем протоколам совпадают с настройками прокси
		// по умолчанию, то считаем, что один прокси используется для всех протоколов
		Форма.ОдинПроксиДляВсехПротоколов = (Форма.Сервер = Форма.СерверHTTP
			И Форма.СерверHTTP = Форма.СерверHTTPS
			И Форма.СерверHTTPS = Форма.СерверFTP
			И Форма.Порт = Форма.ПортHTTP
			И Форма.ПортHTTP = Форма.ПортHTTPS
			И Форма.ПортHTTPS = Форма.ПортFTP);
		
	КонецЕсли;
	
	// Изменяем доступность группы редактирования параметров прокси в зависимости
	// от варианта использования прокси-сервера
	Форма.Элементы.ПараметрыПрокси.Доступность = (Форма.ВариантИспользованияПроксиСервера = 2);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПустыеНастройкиПроксиСервера()
	
	Результат = Новый Структура;
	Результат.Вставить("Сервер"      , "");
	Результат.Вставить("Порт"        , 0);
	Результат.Вставить("СерверHTTP"  , "");
	Результат.Вставить("ПортHTTP"    , 0);
	Результат.Вставить("СерверHTTPS" , "");
	Результат.Вставить("ПортHTTPS"   , 0);
	Результат.Вставить("СерверFTP"   , "");
	Результат.Вставить("ПортFTP"     , 0);
	Результат.Вставить("Пользователь", "");
	Результат.Вставить("Пароль"      , "");
	
	Результат.Вставить("НеИспользоватьПроксиДляЛокальныхАдресов", Ложь);
	Результат.Вставить("НеИспользоватьПроксиДляАдресов", Новый Массив);
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СистемныеНастройкиПроксиСервера()
	
	Прокси = Новый ИнтернетПрокси(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("Сервер", Прокси.Сервер());
	Результат.Вставить("Порт"  , Прокси.Порт());
	
	Результат.Вставить("СерверHTTP" , Прокси.Сервер("http"));
	Результат.Вставить("ПортHTTP"   , Прокси.Порт("http"));
	Результат.Вставить("СерверHTTPS", Прокси.Сервер("https"));
	Результат.Вставить("ПортHTTPS"  , Прокси.Порт("https"));
	Результат.Вставить("СерверFTP"  , Прокси.Сервер("ftp"));
	Результат.Вставить("ПортFTP"    , Прокси.Порт("ftp"));
	
	Результат.Вставить("Пользователь", Прокси.Пользователь);
	Результат.Вставить("Пароль"      , Прокси.Пароль);
	
	Результат.Вставить("НеИспользоватьПроксиДляЛокальныхАдресов",
		Прокси.НеИспользоватьПроксиДляЛокальныхАдресов);
	
	НеИспользоватьПроксиДляАдресов = Новый Массив;
	Для Каждого АдресСервера Из Прокси.НеИспользоватьПроксиДляАдресов Цикл
		НеИспользоватьПроксиДляАдресов.Добавить(АдресСервера);
	КонецЦикла;
	Результат.Вставить("НеИспользоватьПроксиДляАдресов", НеИспользоватьПроксиДляАдресов);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция СистемныеНастройкиПроксиСервераНаКлиенте()
	
	Возврат СистемныеНастройкиПроксиСервера();
	
КонецФункции

&НаСервереБезКонтекста
Функция СистемныеНастройкиПроксиСервераНаСервере()
	
	Возврат СистемныеНастройкиПроксиСервера();
	
КонецФункции

// Возвращает нормализованный адрес прокси-сервера - без пробелов.
// Если между значащими символами встречаются пробелы, то адрес
// обрезается до первого пробела.
//
// Параметры:
//	АдресПроксиСервера (Строка) - нормализуемый адрес прокси-сервера.
//
// Возвращаемое значение: Строка - нормализованный адрес прокси-сервера.
//
&НаКлиенте
Функция НормализованныйАдресПроксиСервера(Знач АдресПроксиСервера)
	
	АдресПроксиСервера = СокрЛП(АдресПроксиСервера);
	ПозицияПробела = Найти(АдресПроксиСервера, " ");
	Если ПозицияПробела > 0 Тогда
		// если в адресе сервера присутствуют пробелы, то
		// берется часть адреса перед первым пробелом
		АдресПроксиСервера = Лев(АдресПроксиСервера, ПозицияПробела - 1);
	КонецЕсли;
	
	Возврат АдресПроксиСервера;
	
КонецФункции
