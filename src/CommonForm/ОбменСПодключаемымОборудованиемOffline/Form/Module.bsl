
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура НазначитьПравилоДляВыделенныхУстройствНаСервере(Устройства, ПравилоОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Для Каждого Устройство Из Устройства Цикл
		
		УстойствоОбъект = Устройство.ПолучитьОбъект();
		УстойствоОбъект.ПравилоОбмена = ПравилоОбмена;
		УстойствоОбъект.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОтчетОРозничныхПродажахПоКассе(КассаККМ, ДатаЗагрузки)
	
	Отчет = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка КАК Отчет
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.КассаККМ = &КассаККМ
	|	И ОтчетОРозничныхПродажах.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания");
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("ДатаНачала",    ДатаЗагрузки - 5);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаЗагрузки + 5);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Отчет = Выборка.Отчет;
	КонецЕсли;
	
	Возврат Отчет;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
	
	Весы.Параметры.УстановитьЗначениеПараметра("ТекущееРабочееМесто", РабочееМесто);
	КассыККМ.Параметры.УстановитьЗначениеПараметра("ТекущееРабочееМесто", РабочееМесто);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СкладККМOffline = Настройки.Получить("СкладККМOffline");
	СкладВесы = Настройки.Получить("СкладВесы");
	
	ПравилоОбменаВесы = Настройки.Получить("ПравилоОбменаВесы");
	ПравилоОбменаККМOffline = Настройки.Получить("ПравилоОбменаККМOffline");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(КассыККМ.Отбор, "Склад", СкладККМOffline, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(СкладККМOffline));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(КассыККМ.Отбор, "ПравилоОбмена", ПравилоОбменаККМOffline, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ПравилоОбменаККМOffline));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Весы.Отбор, "Склад", СкладВесы, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(СкладВесы));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Весы.Отбор, "ПравилоОбмена", ПравилоОбменаВесы, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ПравилоОбменаВесы));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Весы.Отбор, "ПодключеноКТекущемуРабочемуМесту", Истина, ВидСравненияКомпоновкиДанных.Равно,, ВсеОборудованиеВесы = Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(КассыККМ.Отбор, "ПодключеноКТекущемуРабочемуМесту", Истина, ВидСравненияКомпоновкиДанных.Равно,, ВсеОборудованиеККМOffline = Ложь);
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененоРабочееМестоТекущегоСеанса" Тогда
		
		РабочееМесто = МенеджерОборудованияСервер.ПолучитьРабочееМестоКлиента();
		
		Весы.Параметры.УстановитьЗначениеПараметра("ТекущееРабочееМесто", РабочееМесто);
		КассыККМ.Параметры.УстановитьЗначениеПараметра("ТекущееРабочееМесто", РабочееМесто);
		
	ИначеЕсли ИмяСобытия = "Запись_ПравилаОбменаСПодключаемымОборудованиемOffline"
		ИЛИ ИмяСобытия = "Запись_КодыТоваровПодключаемогоОборудования" Тогда
		
		Элементы.Весы.Обновить();
		Элементы.КассыККМ.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД

&НаКлиенте
Процедура ВесыПосмотретьСписокТоваров(Команда)
	
	ТекущиеДанные = Элементы.Весы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПравилоОбмена) Тогда
		
		ПараметрыФормы = Новый Структура("Устройство, ПравилоОбмена", ТекущиеДанные.ПодключаемоеОборудование, ТекущиеДанные.ПравилоОбмена);
		ОткрытьФорму("РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline.Форма.СписокТоваров", ПараметрыФормы, УникальныйИдентификатор);
		
	Иначе
		
		Предупреждение(НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыНазначитьПравилоДляВыделенных(Команда)
	
	Устройства = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.Весы.ВыделенныеСтроки Цикл
		Устройства.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	Если Устройства.Количество() > 0 Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ТипПодключаемогоОборудования", ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток"));
		ПравилоОбмена = ОткрытьФормуМодально("Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline.ФормаВыбора", ПараметрыОткрытия, УникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(ПравилоОбмена) Тогда
			НазначитьПравилоДляВыделенныхУстройствНаСервере(Устройства, ПравилоОбмена);
		КонецЕсли;
		
		Элементы.Весы.Обновить();
		
	Иначе
		
		Предупреждение(НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыТоварыВыгрузить(Команда)
	
	Выполнено = ПодключаемоеОборудованиеOfflineКлиент.ВыгрузитьТоварыВВесы(Элементы.Весы.ВыделенныеСтроки);
	
	Если Выполнено > 0 Тогда
		Элементы.Весы.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыТоварыОчистить(Команда)
	
	Выполнено = ПодключаемоеОборудованиеOfflineКлиент.ОчиститьТоварыВВесах(Элементы.Весы.ВыделенныеСтроки);
	
	Если Выполнено > 0 Тогда
		Элементы.Весы.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыТоварыПерезагрузить(Команда)
	
	Выполнено = ПодключаемоеОборудованиеOfflineКлиент.ВыгрузитьПолныйСписокТоваровВВесы(Элементы.Весы.ВыделенныеСтроки);
	
	Если Выполнено > 0 Тогда
		Элементы.Весы.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассыПосмотретьСписокТоваров(Команда)
	
	ТекущиеДанные = Элементы.КассыККМ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПравилоОбмена) Тогда
		
		ПараметрыФормы = Новый Структура("Устройство, ПравилоОбмена", ТекущиеДанные.ПодключаемоеОборудование, ТекущиеДанные.ПравилоОбмена);
		ОткрытьФорму("РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline.Форма.СписокТоваров", ПараметрыФормы, УникальныйИдентификатор);
		
	Иначе
		
		Предупреждение(НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассыНазначитьПравилоДляВыделенных(Команда)
	
	Устройства = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.КассыККМ.ВыделенныеСтроки Цикл
		Устройства.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	Если Устройства.Количество() > 0 Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ТипПодключаемогоОборудования", ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ККМOffline"));
		ПравилоОбмена = ОткрытьФормуМодально("Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline.ФормаВыбора", ПараметрыОткрытия, УникальныйИдентификатор);
		
		Если ЗначениеЗаполнено(ПравилоОбмена) Тогда
			НазначитьПравилоДляВыделенныхУстройствНаСервере(Устройства, ПравилоОбмена);
		КонецЕсли;
		
		Элементы.КассыККМ.Обновить();
		
	Иначе
		
		Предупреждение(НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассыТоварыВыгрузить(Команда)
	
	Выполнено = ПодключаемоеОборудованиеOfflineКлиент.ВыгрузитьТоварыВККМOffline(Элементы.КассыККМ.ВыделенныеСтроки);
	
	Если Выполнено > 0 Тогда
		Элементы.КассыККМ.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассыТоварыОчистить(Команда)
	
	Выполнено = ПодключаемоеОборудованиеOfflineКлиент.ОчиститьТоварыВККМOffline(Элементы.КассыККМ.ВыделенныеСтроки);
	
	Если Выполнено > 0 Тогда
		Элементы.КассыККМ.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассыТоварыПерезагрузить(Команда)
	
	Выполнено = ПодключаемоеОборудованиеOfflineКлиент.ВыгрузитьПолныйСписокТоваровВККМOffline(Элементы.КассыККМ.ВыделенныеСтроки);
	
	Если Выполнено > 0 Тогда
		Элементы.КассыККМ.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассыТоварыЗагрузитьОтчетОРозничныхПродажах(Команда)
	
	Выполнено = ПодключаемоеОборудованиеOfflineКлиент.ЗагрузитьОтчетОРозничныхПродажах(Элементы.КассыККМ.ВыделенныеСтроки);
	
	Если Выполнено > 0 Тогда
		Элементы.КассыККМ.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыОткрытьПравилоОбмена(Команда)
	
	ТекущиеДанные = Элементы.Весы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПравилоОбмена) Тогда
		
		ОткрытьЗначение(ТекущиеДанные.ПравилоОбмена);
		
	Иначе
		
		Предупреждение(НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассыОткрытьПравилоОбмена(Команда)
	
	ТекущиеДанные = Элементы.КассыККМ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПравилоОбмена) Тогда
		
		ОткрытьЗначение(ТекущиеДанные.ПравилоОбмена);
		
	Иначе
		
		Предупреждение(НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическийОбмен(Команда)
	
	ПараметрыФормы = Новый Структура("РабочееМесто", РабочееМесто);
	ОткрытьФорму("ОбщаяФорма.АвтоматическийОбменСПодключаемымОборудованиемOffline", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура СкладВесыПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Весы.Отбор, "Склад", СкладВесы, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(СкладВесы));
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоОбменаВесыПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Весы.Отбор, "ПравилоОбмена", ПравилоОбменаВесы, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ПравилоОбменаВесы));
	
КонецПроцедуры

&НаКлиенте
Процедура СкладККМOfflineПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(КассыККМ.Отбор, "Склад", СкладККМOffline, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(СкладККМOffline));
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоОбменаККМOfflineПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(КассыККМ.Отбор, "ПравилоОбмена", ПравилоОбменаККМOffline, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ПравилоОбменаККМOffline));
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеККМOfflineПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(КассыККМ.Отбор, "ПодключеноКТекущемуРабочемуМесту", Истина, ВидСравненияКомпоновкиДанных.Равно,, ВсеОборудованиеККМOffline = Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеВесыПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Весы.Отбор, "ПодключеноКТекущемуРабочемуМесту", Истина, ВидСравненияКомпоновкиДанных.Равно,, ВсеОборудованиеВесы = Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КассыККМВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Поле = Элементы.КассыККМДатаЗагрузки И ЗначениеЗаполнено(ТекущиеДанные.ДатаЗагрузки) Тогда
		СтандартнаяОбработка = Ложь;
		Отчет = ПолучитьОтчетОРозничныхПродажахПоКассе(ТекущиеДанные.КассаККМ, ТекущиеДанные.ДатаЗагрузки);
		
		Если ЗначениеЗаполнено(Отчет) Тогда
			ОткрытьЗначение(Отчет);
		Иначе
			Предупреждение(НСтр("ru = 'Отчет о розничных продажах не найден.'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
