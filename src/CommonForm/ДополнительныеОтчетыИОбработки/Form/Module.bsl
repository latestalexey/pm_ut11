&НаКлиенте
Перем ПараметрыОбработчика;

&НаКлиенте
Перем ВыполняемаяОбработка;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("РежимОткрытияОкна") Тогда
		ЭтаФорма.РежимОткрытияОкна = Параметры.РежимОткрытияОкна;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ИмяРаздела)
		И Параметры.ИмяРаздела <> ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола() Тогда
		Раздел = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Подсистемы.Найти(Параметры.ИмяРаздела));
	КонецЕсли;
	
	ВидОбработокСтрока = Параметры.Вид;
	
	Если ВидОбработокСтрока = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта() Тогда
		Заголовок = НСтр("ru = 'Команды заполнения объектов'");
	ИначеЕсли ВидОбработокСтрока = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет() Тогда
		Заголовок = НСтр("ru = 'Отчеты'");
	ИначеЕсли ВидОбработокСтрока = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма() Тогда
		Заголовок = НСтр("ru = 'Дополнительные печатные формы'");
	ИначеЕсли ВидОбработокСтрока = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов() Тогда
		Заголовок = НСтр("ru = 'Команды создания связанных объектов'");
	ИначеЕсли ВидОбработокСтрока = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка() Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Дополнительные обработки (%1)'"), 
			ДополнительныеОтчетыИОбработки.ПолучитьИмяРабочегоМеста(Раздел)
		);
	ИначеЕсли ВидОбработокСтрока = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет()Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Дополнительные отчеты (%1)'"), 
			ДополнительныеОтчетыИОбработки.ПолучитьИмяРабочегоМеста(Раздел)
		);
	КонецЕсли;
	
	ВидОбработок = ДополнительныеОтчетыИОбработки.ПолучитьВидОбработкиПоСтроковомуПредставлениюВида(ВидОбработокСтрока);
	
	Если ВидОбработок = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет
	 ИЛИ ВидОбработок = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		Элементы.НастроитьСписокБыстрогоДоступа.Заголовок = НСтр("ru = 'Настроить список моих отчетов'");
	Иначе
		Элементы.НастроитьСписокБыстрогоДоступа.Заголовок = НСтр("ru = 'Настроить список моих обработок'");
	КонецЕсли;
	
	ЭтоГлобальныеОбработки = ДополнительныеОтчетыИОбработки.ПроверитьГлобальнаяОбработка(ВидОбработок);
	ЭтоНазначаемыеОбработки = ДополнительныеОтчетыИОбработки.ПроверитьНазначаемаяОбработка(ВидОбработок);
	Если ЭтоНазначаемыеОбработки Тогда
		
		Элементы.НастроитьСписокБыстрогоДоступа.Видимость = Ложь;
		
		ОбъектыНазначения.ЗагрузитьЗначения(Параметры.ОбъектыНазначения.ВыгрузитьЗначения());
		ОбНазначенияСсылка = ОбъектыНазначения.Получить(0).Значение;
		МетаданныеОбНазначения = ОбъектыНазначения.Получить(0).Значение.Метаданные();
		
		ПолноеИмяОбъектаМетаданных = МетаданныеОбНазначения.ПолноеИмя();
		
		ЭтоФормаОбъекта = ДополнительныеОтчетыИОбработки.ЭтоФормаОбъекта(ПолноеИмяОбъектаМетаданных, Параметры.ИмяФормы);
		
	КонецЕсли;
	
	ЗаполнитьТаблицуОбработок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ВыбранноеЗначение = "ВыполненаНастройкаМоихОтчетовИОбработок" Тогда
		ЗаполнитьТаблицуОбработок();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Обработки

&НаКлиенте
Процедура ОбработкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыполнитьОбработкуПоПараметрам();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	
	ВыполнитьОбработкуПоПараметрам()
	
КонецПроцедуры

&НаКлиенте
Процедура Настроить(Команда)
	Открытие = Новый Структура("Имя, Параметры, Владелец, Уникальность, Окно");
	
	Открытие.Имя = "ОбщаяФорма.НастройкаМоихОтчетовИОбработок";
	Открытие.Владелец = ЭтаФорма;
	Открытие.Уникальность = Ложь;
	
	Открытие.Параметры = Новый Структура("ВидОбработок, ЭтоГлобальныеОбработки, ТекущийРаздел");
	Открытие.Параметры.ВидОбработок           = ВидОбработок;
	Открытие.Параметры.ЭтоГлобальныеОбработки = ЭтоГлобальныеОбработки;
	Открытие.Параметры.ТекущийРаздел          = Раздел;
	
	ОткрытьФорму(Открытие.Имя, Открытие.Параметры, Открытие.Владелец, Открытие.Уникальность, Открытие.Окно);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыполнениеОбработки(Команда)
	ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаполнитьТаблицуОбработок()
	
	ДоступныеКоманды = ДополнительныеОтчетыИОбработки.ПолучитьДоступныеКоманды(
		ЭтоНазначаемыеОбработки,
		ПолноеИмяОбъектаМетаданных,
		ЭтоФормаОбъекта,
		Раздел,
		ВидОбработок
	);
	
	ЗначениеВРеквизитФормы(ДоступныеКоманды, "Обработки");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуПоПараметрам()
	ДанныеОбработки = Элементы.Обработки.ТекущиеДанные;
	Если ДанныеОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполняемаяОбработка = Новый Структура(
		"Ссылка, БезопасныйРежим, Представление, 
		|Идентификатор, ВариантЗапуска, ПоказыватьОповещение, 
		|Модификатор, ОбъектыНазначения"
	);
	ЗаполнитьЗначенияСвойств(ВыполняемаяОбработка, ДанныеОбработки);
	Если НЕ ЭтоГлобальныеОбработки Тогда
		ВыполняемаяОбработка.ОбъектыНазначения = ОбъектыНазначения.ВыгрузитьЗначения();
	КонецЕсли;
	
	Если ДанныеОбработки.ВариантЗапуска = ДополнительныеОтчетыИОбработкиКлиент.ВариантЗапускаОткрытиеФормы() Тогда
		
		ВыполнитьОткрытиеФормыОбработки();
		
		
	ИначеЕсли ДанныеОбработки.ВариантЗапуска = ДополнительныеОтчетыИОбработкиКлиент.ВариантЗапускаВызовКлиентскогоМетода() Тогда
		
		ВыполнитьКлиентскийМетодОбработки();
		
	ИначеЕсли ВидОбработокСтрока = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма()
		И ДанныеОбработки.Модификатор = "ПечатьMXL" Тогда
		
		ВыполнитьОткрытиеПечатнойФормы();
		
	ИначеЕсли ДанныеОбработки.ВариантЗапуска = ДополнительныеОтчетыИОбработкиКлиент.ВариантЗапускаВызовСерверногоМетода() Тогда
		
		// Изменение элементов формы
		Элементы.ПоясняющаяДекорация.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполняется обработка ""%1""...'"),
			ДанныеОбработки.Представление
		);
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаВыполненияОбработки;
		Элементы.СтраницыКомандныеПанели.ТекущаяСтраница = Элементы.СтраницаКоманднаяПанельСтраницыВыполненияОбработки;
		
		// Вызов сервера только после перехода формы в консистентное состояние
		ПодключитьОбработчикОжидания("ВыполнитьСерверныйМетодОбработки", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОткрытиеФормыОбработки()
	ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ВыполняемаяОбработка.Ссылка);
	
	ПараметрыОбработки = Новый Структура("ИдентификаторКоманды, ДополнительнаяОбработкаСсылка");
	ПараметрыОбработки.ИдентификаторКоманды          = ВыполняемаяОбработка.Идентификатор;
	ПараметрыОбработки.ДополнительнаяОбработкаСсылка = ВыполняемаяОбработка.Ссылка;
	
	Если НЕ ЭтоГлобальныеОбработки Тогда
		ПараметрыОбработки.Вставить("ОбъектыНазначения", ВыполняемаяОбработка.ОбъектыНазначения);
	КонецЕсли;
	
	Если ВидОбработокСтрока = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет()
		ИЛИ ВидОбработокСтрока = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет() Тогда
		ОткрытьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма", ПараметрыОбработки);
	Иначе
		ОткрытьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма", ПараметрыОбработки);
	КонецЕсли;
	
	ПоказатьРезультатВыполненияОбработки();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКлиентскийМетодОбработки()
	Если ВыполняемаяОбработка.ПоказыватьОповещение Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Обработка выполняется...'"));
	КонецЕсли;
	
	ИмяОбработки = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(ВыполняемаяОбработка.Ссылка);
	
	ПараметрыОбработки = Новый Структура("ИдентификаторКоманды,ДополнительнаяОбработкаСсылка");
	ПараметрыОбработки.ИдентификаторКоманды          = ВыполняемаяОбработка.Идентификатор;
	ПараметрыОбработки.ДополнительнаяОбработкаСсылка = ВыполняемаяОбработка.Ссылка;
	
	Если НЕ ЭтоГлобальныеОбработки Тогда
		ПараметрыОбработки.Вставить("ОбъектыНазначения", ВыполняемаяОбработка.ОбъектыНазначения);
	КонецЕсли;
	
	Если ВидОбработокСтрока = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет()
		ИЛИ ВидОбработокСтрока = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет() Тогда
		ФормаОбработки = ПолучитьФорму("ВнешнийОтчет."+ ИмяОбработки +".Форма", ПараметрыОбработки);
	Иначе
		ФормаОбработки = ПолучитьФорму("ВнешняяОбработка."+ ИмяОбработки +".Форма", ПараметрыОбработки);
	КонецЕсли;
	
	Если ЭтоГлобальныеОбработки Тогда
		
		ФормаОбработки.ВыполнитьКоманду(ВыполняемаяОбработка.Идентификатор);
		
	ИначеЕсли ВидОбработокСтрока = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов() Тогда
		
		СозданныеОбъекты = Новый Массив;
		
		ФормаОбработки.ВыполнитьКоманду(ВыполняемаяОбработка.Идентификатор, ВыполняемаяОбработка.ОбъектыНазначения, СозданныеОбъекты);
		
		ТипыСозданныхОбъектов = Новый Массив;
		
		Для Каждого СозданныйОбъект Из СозданныеОбъекты Цикл
			Тип = ТипЗнч(СозданныйОбъект);
			Если ТипыСозданныхОбъектов.Найти(Тип) = Неопределено Тогда
				ТипыСозданныхОбъектов.Добавить(Тип);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Тип Из ТипыСозданныхОбъектов Цикл
			ОповеститьОбИзменении(Тип);
		КонецЦикла;
		
	ИначеЕсли ВидОбработокСтрока = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма() Тогда
		
		ФормаОбработки.Печать(ВыполняемаяОбработка.Идентификатор, ВыполняемаяОбработка.ОбъектыНазначения);
		
	ИначеЕсли ВидОбработокСтрока = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта() Тогда
		
		ФормаОбработки.ВыполнитьКоманду(ВыполняемаяОбработка.Идентификатор, ВыполняемаяОбработка.ОбъектыНазначения);
		
		ТипыИзмененныхОбъектов = Новый Массив;
		
		Для Каждого ИзмененныйОбъект Из ВыполняемаяОбработка.ОбъектыНазначения Цикл
			Тип = ТипЗнч(ИзмененныйОбъект);
			Если ТипыИзмененныхОбъектов.Найти(Тип) = Неопределено Тогда
				ТипыИзмененныхОбъектов.Добавить(Тип);
			КонецЕсли;
		КонецЦикла;
	
		Для Каждого Тип Из ТипыИзмененныхОбъектов Цикл
			ОповеститьОбИзменении(Тип);
		КонецЦикла;
		
	ИначеЕсли ВидОбработокСтрока = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет() Тогда
		
		ФормаОбработки.ВыполнитьКоманду(ВыполняемаяОбработка.Идентификатор, ВыполняемаяОбработка.ОбъектыНазначения);
		
	КонецЕсли;
	
	ПоказатьРезультатВыполненияОбработки();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОткрытиеПечатнойФормы()
	Если УправлениеПечатьюКлиент.ПроверитьДокументыПроведены(ВыполняемаяОбработка.ОбъектыНазначения) Тогда
		
		ПараметрыОткрытия = Новый Структура("ИсточникДанных, ПараметрыИсточника");
		ПараметрыОткрытия.ИсточникДанных     = ВыполняемаяОбработка.Ссылка;
		ПараметрыОткрытия.ПараметрыИсточника = Новый Структура("ИдентификаторКоманды, ОбъектыНазначения");
		ПараметрыОткрытия.ПараметрыИсточника.ИдентификаторКоманды = ВыполняемаяОбработка.Идентификатор;
		ПараметрыОткрытия.ПараметрыИсточника.ОбъектыНазначения    = ВыполняемаяОбработка.ОбъектыНазначения;
		
		ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия);
		
		ПоказатьРезультатВыполненияОбработки();
		
	Иначе
		
		// Действие не требуется - подсистема "Управление печатью" сама выводит ошибки,
		// а данная форма остается открытой
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСерверныйМетодОбработки()
	ПараметрыВызоваСервера = Новый Структура("ВнешняяОбработкаСсылка, ИдентификаторКоманды, ОбъектыНазначения, РезультатВыполнения");
	ПараметрыВызоваСервера.ВнешняяОбработкаСсылка = ВыполняемаяОбработка.Ссылка;
	ПараметрыВызоваСервера.ИдентификаторКоманды   = ВыполняемаяОбработка.Идентификатор;
	ПараметрыВызоваСервера.ОбъектыНазначения      = ВыполняемаяОбработка.ОбъектыНазначения;
	ПараметрыВызоваСервера.РезультатВыполнения    = Новый Массив;
	
	Результат = ВыполнитьСерверныйМетодОбработкиНаСервере(ПараметрыВызоваСервера);
	
	Если Результат.ЗаданиеВыполнено Тогда
		ПоказатьРезультатВыполненияОбработки(Результат);
	ИначеЕсли Результат.ВызваноИсключение Тогда
		// Изменение элементов формы
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОткрытьОбработку;
		Элементы.СтраницыКомандныеПанели.ТекущаяСтраница = Элементы.СтраницаКоманднаяПанельСтраницыОткрытьОбработку;
		// Вывод сообщения об ошибке
		Предупреждение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось выполнить обработку ""%1"".
				|Подробности см. в журнале регистрации.'"),
				ВыполняемаяОбработка.Представление
			)
		);
	Иначе
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания", 1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВыполнитьСерверныйМетодОбработкиНаСервере(ПараметрыВызоваСервера)
	Результат = Новый Структура("ЗаданиеВыполнено, ВызваноИсключение, РезультатВыполнения");
	
	Попытка
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			РезультатФоновогоЗадания = Новый Структура("ЗаданиеВыполнено, АдресХранилища");
			РезультатФоновогоЗадания.ЗаданиеВыполнено = Истина;
			РезультатФоновогоЗадания.АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			ДополнительныеОтчетыИОбработки.ВыполнитьОбработкуВКонтекстеСеанса(ПараметрыВызоваСервера, РезультатФоновогоЗадания.АдресХранилища);
		Иначе
			РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
				УникальныйИдентификатор,
				"ДополнительныеОтчетыИОбработки.ВыполнитьОбработкуВКонтекстеСеанса", 
				ПараметрыВызоваСервера, 
				НСтр("ru = 'Дополнительные отчеты и обработки: Выполнение серверного метода обработки'")
			);
		КонецЕсли;
		
		Результат.ЗаданиеВыполнено  = РезультатФоновогоЗадания.ЗаданиеВыполнено;
		Результат.ВызваноИсключение = Ложь;
		Если Результат.ЗаданиеВыполнено Тогда
			РезультатРаботыМетода = ПолучитьИзВременногоХранилища(РезультатФоновогоЗадания.АдресХранилища);
			Если РезультатРаботыМетода <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Результат, РезультатРаботыМетода);
			КонецЕсли;
		Иначе
			ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
			ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
		КонецЕсли;
	Исключение
		Результат.ЗаданиеВыполнено  = Ложь;
		Результат.ВызваноИсключение = Истина;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПоказатьРезультатВыполненияОбработки(Результат = Неопределено)
	// Показать оповещение
	Если ВыполняемаяОбработка.ПоказыватьОповещение Тогда
		ОповещениеЗаголовок = НСтр("ru = 'Обработка выполнена'");
		ОповещениеТекст     = ВыполняемаяОбработка.Представление;
		ОповещениеКартинка  = БиблиотекаКартинок.ВыполнитьЗадачу;
		ПоказатьОповещениеПользователя(ОповещениеЗаголовок, , ОповещениеТекст, ОповещениеКартинка);
	КонецЕсли;
	
	// Обновить измененные типы
	Если Результат <> Неопределено 
		И Результат.Свойство("РезультатВыполнения") 
		И ТипЗнч(Результат.РезультатВыполнения) = Тип("Массив") Тогда
		
		Для Каждого ЭлементМассива Из Результат.РезультатВыполнения Цикл
			ОповеститьОбИзменении(ЭлементМассива);
		КонецЦикла;
		
	КонецЕсли;
	
	// Обновить форму владельца
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") Тогда
		Попытка
			ВладелецФормы.Прочитать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// Закрыть текущую форму
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнениеФоновогоЗадания()
	Результат = ПроверитьВыполнениеФоновогоЗаданияНаСервере(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища);
	Если Результат.ЗаданиеВыполнено Тогда
		ПоказатьРезультатВыполненияОбработки(Результат);
	ИначеЕсли Результат.ВызваноИсключение Тогда
		// Изменение элементов формы
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОткрытьОбработку;
		Элементы.СтраницыКомандныеПанели.ТекущаяСтраница = Элементы.СтраницаКоманднаяПанельСтраницыОткрытьОбработку;
		// Вывод сообщения об ошибке
		Предупреждение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось выполнить обработку ""%1"".
				|Подробности см. в журнале регистрации.'"),
				ВыполняемаяОбработка.Представление
			)
		);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВыполнениеФоновогоЗаданияНаСервере(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища)
	Результат = Новый Структура("ВнешняяОбработкаСсылка, ИдентификаторКоманды, ОбъектыНазначения, РезультатВыполнения, ЗаданиеВыполнено, ВызваноИсключение");
	Попытка
		Результат.ЗаданиеВыполнено  = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
		Результат.ВызваноИсключение = Ложь;
		Если Результат.ЗаданиеВыполнено Тогда
			РезультатРаботыМетода = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
			Если РезультатРаботыМетода <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Результат, РезультатРаботыМетода);
			КонецЕсли;
		КонецЕсли;
	Исключение
		Результат.ЗаданиеВыполнено  = Ложь;
		Результат.ВызваноИсключение = Истина;
	КонецПопытки;
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецФункции
