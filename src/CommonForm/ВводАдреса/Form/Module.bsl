////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИспользуютсяКлассификаторы = Ложь;
	СтандартныеПодсистемыПереопределяемый.ИспользуютсяКлассификаторы(ИспользуютсяКлассификаторы);
	
	Если Не ИспользуютсяКлассификаторы Тогда
		Элементы.Классификатор.Видимость                   = Ложь;
		Элементы.ПроверитьКорректностьЗаполнения.Видимость = Ложь;
		Элементы.СкрыватьНеактуальныеАдреса.Видимость      = Ложь;
	КонецЕсли;
	
	ПрочитатьЗначенияПараметров();
	
	ПредставлениеСВидом = НаименованиеВида + ": " + Представление;
	Заголовок = НаименованиеВида;
	
	СтранаРоссия = Справочники.СтраныМира.Россия;
	
	Если Параметры.АдресТолькоРоссийский Тогда
		
		Страна = СтранаРоссия;
		Элементы.Страна.Доступность = Ложь;
		Элементы.Страна.КнопкаВыбора = Ложь;
		
	Иначе
		
		Если Не ПустаяСтрока(КодСтраны) ИЛИ Не ПустаяСтрока(НаименованиеСтраны) Тогда
			// если задан код или наименование страны, то найдем страну
			НайтиСтрануПоКодуИлиНаименованию(КодСтраны, НаименованиеСтраны);
		Иначе
			Страна = СтранаРоссия;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Страна) Тогда
		ЗаполнитьКодИНаименованиеСтраны();
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Параметры.Заголовок) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	Если Не ИспользуютсяКлассификаторы Тогда 
		Возврат;
	КонецЕсли;
	
	// Восстанавливаем значение флага "Скрывать неактуальные адреса"
	Значение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ВводАдреса", "СкрыватьНеактуальныеАдреса");
	Если Значение = Неопределено Тогда
		СкрыватьНеактуальныеАдреса = Ложь;
	Иначе
		СкрыватьНеактуальныеАдреса = Значение;
	КонецЕсли;
	
	// Заполнение Региона по КодуРегиона
	Если ПустаяСтрока(Регион) Тогда 
		Если Не ПустаяСтрока(КодРегиона) Тогда 
			Регион = "";
			СтандартныеПодсистемыПереопределяемый.ОпределитьНаименованиеРегионаПоКоду(Регион, Число(КодРегиона));
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение КодаРегиона по Региону
	Если ПустаяСтрока(КодРегиона) Тогда 
		Если Не ПустаяСтрока(Регион) Тогда 
			КодРегиона = 0;
			СтандартныеПодсистемыПереопределяемый.ОпределитьКодРегионаПолНаименованию(КодРегиона, Регион);
		КонецЕсли;
	КонецЕсли;

	
	Если ИспользуютсяКлассификаторы И (Страна = СтранаРоссия) И Не ПустаяСтрока(Регион) Тогда
		СтруктураАдреса = ПолучитьСтруктуруАдресаНаСервере();
		СтруктураЗагруженных = ЗагруженныеПоляПоРегиону(СтруктураАдреса);
		ЗаписатьСтруктуруАдресаНаСервере(СтруктураАдреса);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьТипыПолей();
	ПроверитьКнопкиВыбора();
	
	Если Не ИспользуютсяКлассификаторы Тогда 
		Возврат;
	КонецЕсли;
	
	Если ИспользуютсяКлассификаторы И (Страна = СтранаРоссия) И Не ПустаяСтрока(Регион) Тогда
		УстановитьДоступностьПолейПоРегиону(СтруктураЗагруженных);
	КонецЕсли;
	Элементы.СкрыватьНеактуальныеАдреса.Пометка = СкрыватьНеактуальныеАдреса;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ЗапроситьПодтверждениеЗакрытияФормы(Отказ, Модифицированность, БылиНажатыКнопкиЗакрытия); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если Не ИспользуютсяКлассификаторы Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ВводАдреса", "СкрыватьНеактуальныеАдреса", СкрыватьНеактуальныеАдреса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Не ИспользуютсяКлассификаторы Тогда 
		Возврат;
	КонецЕсли;
	
	Если ВРег(ИмяСобытия) = ВРег("Запись_АдресныйКлассификатор") Тогда
		
		СтруктураАдреса = ПолучитьСтруктуруАдреса();
		СтруктураЗагруженных = ЗагруженныеПоляПоРегиону(СтруктураАдреса);
		ЗаписатьСтруктуруАдреса(СтруктураАдреса);
		УстановитьДоступностьПолейПоРегиону(СтруктураЗагруженных);
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтранаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Страна) Тогда
		Страна = СтранаРоссия;
	КонецЕсли;
	
	ЗаполнитьКодИНаименованиеСтраны();
	
	СформироватьПредставление();
	ПроверитьКнопкиВыбора();
	
	Если Страна <> СтранаРоссия Тогда
		// Разрешаем вводить любые адреса
		Элементы.Район.Доступность 				= Истина;
		Элементы.Город.Доступность 				= Истина;
		Элементы.НаселенныйПункт.Доступность 	= Истина;
		Элементы.Улица.Доступность 				= Истина;
	КонецЕсли;
	
	Если ИспользуютсяКлассификаторы И (Страна = СтранаРоссия) И Не ПустаяСтрока(Регион) Тогда
		ЗагрузитьРегион();
		СтруктураАдреса = ПолучитьСтруктуруАдреса();
		СтруктураЗагруженных = ЗагруженныеПоляПоРегиону(СтруктураАдреса);
		ЗаписатьСтруктуруАдреса(СтруктураАдреса);
		УстановитьДоступностьПолейПоРегиону(СтруктураЗагруженных);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИндексПриИзменении(Элемент)
	
	Если (Страна = СтранаРоссия) И ИспользуютсяКлассификаторы
	И Не ПустаяСтрока(Индекс) И (СтрДлина(Индекс) = 6) Тогда

		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Индекс", Индекс);
		ПараметрыПоиска.Вставить("СкрыватьНеактуальныеАдреса", СкрыватьНеактуальныеАдреса);
		
		Результат = ОткрытьФормуМодально("ОбщаяФорма.ПоискПоИндексу", ПараметрыПоиска);
		
		Если Результат = Неопределено Тогда
			СформироватьПредставление();
			Возврат;
		КонецЕсли;
		
		Элементы.СкрыватьНеактуальныеАдреса.Пометка = Результат.СкрыватьНеактуальныеАдреса;
		ЗаписатьСтруктуруАдреса(Результат.СтруктураАдреса);
		УстановитьДоступностьПолейПоРегиону(Результат.СтруктураЗагруженных);
		
		#Если Не ВебКлиент Тогда
		Если Не ПустаяСтрока(Улица) Тогда
			ТекущийЭлемент = Элементы.Улица;
		ИначеЕсли Не ПустаяСтрока(НаселенныйПункт) Тогда
			ТекущийЭлемент = Элементы.НаселенныйПункт;
		ИначеЕсли Не ПустаяСтрока(Город) Тогда
			ТекущийЭлемент = Элементы.Город;
		ИначеЕсли Не ПустаяСтрока(Район) Тогда
			ТекущийЭлемент = Элементы.Район;
		ИначеЕсли Не ПустаяСтрока(Регион) Тогда
			ТекущийЭлемент = Элементы.Регион;
		КонецЕсли;
		#КонецЕсли
			
	КонецЕсли;
	
	СформироватьПредставление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПриИзменении(Элемент)
	
	ПроверитьТипыПолей();
	
	Если ИспользуютсяКлассификаторы И (Страна = СтранаРоссия) Тогда
		
		// Обрабатываем поля и готовим данные на сервере для дальнейшей обработки на клиенте
		СтруктураАдреса = ПолучитьСтруктуруАдреса();
		СтруктураРезультата = ОбработатьПолеНаСервере(СтруктураАдреса, ПолучитьУровеньЭлемента(Элемент));
		ЗаписатьСтруктуруАдреса(СтруктураАдреса);
		
		УстановитьДоступностьПолейПоРегиону(СтруктураРезультата.СтруктураЗагруженных);
		
		Для Каждого Ошибка ИЗ СтруктураРезультата.СтруктураОшибок Цикл
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка.Значение, , Ошибка.Ключ);
		КонецЦикла;
		
		Если Элемент.Имя = "Регион" Тогда
			ЗагрузитьРегион(СтруктураРезультата.МожноЗагружатьРегион);
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьПредставление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если (Не ИспользуютсяКлассификаторы) ИЛИ (Страна <> СтранаРоссия) Тогда
		Возврат;
	КонецЕсли;
	
	Уровень = ПолучитьУровеньЭлемента(Элемент);
	СтруктураАдреса = ПолучитьСтруктуруАдреса();
	СтруктураАдреса.Вставить("Уровень", Уровень);
	
		
	// При подборе из формы необходимо, чтобы был заполнен регион, в противном случае получится пустой список
	Если ИспользуютсяКлассификаторы И (Страна = СтранаРоссия) Тогда
			
		Отказ = Ложь;
		Если Элемент.Имя <> "Регион" Тогда
			Если ПустаяСтрока(Регион) Тогда
				ОчиститьСообщения();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите регион.'"), , "Регион");
				Отказ = Истина;
			Иначе
				Отказ = ПередВыборомАдресногоЭлемента(Регион, СкрыватьНеактуальныеАдреса, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		// Открываем форму подбора адреса
		СтруктураРезультата = Неопределено;
		СтандартныеПодсистемыКлиентПереопределяемый.ПодобратьАдресныйОбъект(СтруктураАдреса, СтруктураРезультата);
		
		Если СтруктураРезультата = Неопределено Тогда
			// Восстанавливаем значение флага "Скрывать неактуальные адреса"
			Значение = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ВводАдреса", "СкрыватьНеактуальныеАдреса");
			Если Значение = Неопределено Тогда
				СкрыватьНеактуальныеАдреса = Ложь;
			Иначе
				СкрыватьНеактуальныеАдреса = Значение;
			КонецЕсли;
			Элементы.СкрыватьНеактуальныеАдреса.Пометка = СкрыватьНеактуальныеАдреса;
			Возврат;
		КонецЕсли;
		
		ЭтаФорма[Элемент.Имя] = СокрЛП(СтруктураРезультата.Наименование + " " + СтруктураРезультата.Сокращение);
		ПолеИзменилось = (ЭтаФорма[Элемент.Имя] <> СокрЛП(Элемент.ТекстРедактирования));
		ЗаписатьСтруктуруАдреса(СтруктураРезультата.СтруктураАдреса);
		Элементы.СкрыватьНеактуальныеАдреса.Пометка = СтруктураРезультата.СкрыватьНеактуальныеАдреса;
		ПроверитьТипыПолей();
		
		Для Каждого Ошибка ИЗ СтруктураРезультата.СтруктураОшибок Цикл
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка.Значение, , Ошибка.Ключ);
		КонецЦикла;
		
		Если Элемент.Имя = "Регион" Тогда
			ЗагрузитьРегион(СтруктураРезультата.МожноЗагружатьРегион);
		КонецЕсли;
	
		Если ПустаяСтрока(КодРегиона) Тогда
			РезультатКодРегиона = Неопределено;
			Если СтруктураРезультата.Свойство("КодРегиона", РезультатКодРегиона) <> Неопределено Тогда 
				КодРегиона = РезультатКодРегиона;
			КонецЕсли;	
		КонецЕсли;
		
		УстановитьДоступностьПолейПоРегиону(СтруктураРезультата.СтруктураЗагруженных);
	
		Модифицированность = Истина;
		
	КонецЕсли;
	
	СформироватьПредставление();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПередВыборомАдресногоЭлемента(Регион, СкрыватьНеактуальныеАдреса, ПроверяетсяРегион)
		
	Если Не ПроверяетсяРегион И НЕ ПустаяСтрока(Регион) Тогда
		
		РегионЗагружен = Ложь;
		СтандартныеПодсистемыПереопределяемый.ОпределитьЗагруженностьАдресногоЭлемента(РегионЗагружен, Регион);
		Если Не РегионЗагружен Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
		
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВводАдреса", "СкрыватьНеактуальныеАдреса", СкрыватьНеактуальныеАдреса);
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ПолеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ОбработкаАвтоПодбораИОкончанияВвода(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаАвтоПодбораИОкончанияВвода(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаАвтоПодбораИОкончанияВвода(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если (Не ИспользуютсяКлассификаторы) ИЛИ (ПустаяСтрока(Текст)) ИЛИ (Страна <> СтранаРоссия) Тогда
		Возврат;
	КонецЕсли;
	
	УровеньЭлемента = ПолучитьУровеньЭлемента(Элемент);
	СтруктураАдреса = ПолучитьСтруктуруАдреса();
	Результат = РезультатАвтоПодбора(Текст, СтруктураАдреса, УровеньЭлемента);
	ЗаписатьСтруктуруАдреса(СтруктураАдреса);
	
 	Если Результат <> Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Удаляем неактуальные адреса из результата, если это нужно
		Если СкрыватьНеактуальныеАдреса Тогда
			МассивУдаляемыхРезультатов = Новый Массив;
			Для Каждого ЭлементРезультата Из Результат Цикл
				Если ЭлементРезультата.Значение.ПометкаУдаления Тогда
					МассивУдаляемыхРезультатов.Добавить(ЭлементРезультата);
				КонецЕсли;
			КонецЦикла;
			Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхРезультатов Цикл
				Результат.Удалить(УдаляемыйЭлемент);
			КонецЦикла;
		КонецЕсли;
		
		// Удаляем возможные повторы
		МассивЗначений = Новый Массив;
		СписокРезультатов = Новый СписокЗначений;
		Для Каждого ЭлементРезультата Из Результат Цикл
			НайденоеЗначение = МассивЗначений.Найти(ЭлементРезультата.Значение.Значение);
			Если НайденоеЗначение = Неопределено Тогда
				МассивЗначений.Добавить(ЭлементРезультата.Значение.Значение);
				СписокРезультатов.Добавить(ЭлементРезультата.Значение);
			КонецЕсли;			
		КонецЦикла;
		
		ДанныеВыбора = СписокРезультатов;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаОтменаВыполнить()
	
	БылиНажатыКнопкиЗакрытия = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОКВыполнить()
	
	БылиНажатыКнопкиЗакрытия = Истина;
	Закрыть(ПолучитьРезультатРедактирования());
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьВыполнить()
	
	Модифицированность = Истина;
	
	Страна = СтранаРоссия;
	СтранаПриИзменении(Элементы.Страна);
	
	Индекс = "";
	Регион = "";
	Район = "";
	Город = "";
	НаселенныйПункт = "";
	Улица = "";
	Дом = "";
	Корпус = "";
	Квартира = "";
	ТипДома     = Элементы.ТипДома.СписокВыбора[0].Значение;
	ТипКорпуса  = Элементы.ТипКорпуса.СписокВыбора[0].Значение;
	ТипКвартиры = Элементы.ТипКвартиры.СписокВыбора[0].Значение;
	
	СформироватьПредставление();
	
КонецПроцедуры

&НаКлиенте
Процедура КлассификаторВыполнить()
	
	СтандартныеПодсистемыКлиентПереопределяемый.ЗагрузитьАдресныйКлассификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьЗаполнения(Команда)
	
	Если Страна <> СтранаРоссия Тогда 
		Предупреждение(НСтр("ru = 'Проверять на корректность можно только российские адреса.'"));
		Возврат;
	КонецЕсли;
	
	СтруктураПроверки = ОпределитьСоответствиеАдресаКЛАДРу(Индекс, Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус);
	
	Если СтруктураПроверки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтруктураПроверки.ЕстьОшибки Тогда
		
		ОчиститьСообщения();
		Для Каждого Элемент Из СтруктураПроверки.СтруктураОшибок Цикл
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Элемент.Значение, , Элемент.Ключ);
			
		КонецЦикла;
		
	Иначе
		
		Предупреждение(НСтр("ru = 'Адрес введен корректно.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьНеактуальныеАдреса(Команда)
	
	Если Не ИспользуютсяКлассификаторы Тогда 
		Возврат;
	КонецЕсли;
	
	СкрыватьНеактуальныеАдреса = Не СкрыватьНеактуальныеАдреса;
	Элементы.СкрыватьНеактуальныеАдреса.Пометка = СкрыватьНеактуальныеАдреса;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Функция ПолучитьУровеньЭлемента(Элемент)
	
	Если Элемент = Элементы.Регион Тогда
		Возврат 1;
		
	ИначеЕсли Элемент = Элементы.Район Тогда
		Возврат 2;
		
	ИначеЕсли Элемент = Элементы.Город Тогда
		Возврат 3;
		
	ИначеЕсли Элемент = Элементы.НаселенныйПункт Тогда
		Возврат 4;
		
	ИначеЕсли Элемент = Элементы.Улица Тогда
		Возврат 5;
		
	ИначеЕсли Элемент = Элементы.Дом ИЛИ Элемент = Элементы.Корпус Тогда
		Возврат 6;
		
	Иначе
		Возврат 0;
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Процедура СформироватьПредставление()
	
	Представление = "";
	
	СтруктураАдреса = ПолучитьСтруктуруАдреса();
	СтруктураАдреса.Вставить("Страна", ?(Страна <> СтранаРоссия, Страна, Неопределено));
	СтруктураАдреса.Вставить("НаименованиеСтраны", ?(Страна <> СтранаРоссия, НаименованиеСтраны, ""));
	СтруктураАдреса.Вставить("ТипДома",	ТипДома);
	СтруктураАдреса.Вставить("ТипКорпуса",	ТипКорпуса);
	СтруктураАдреса.Вставить("ТипКвартиры",	ТипКвартиры);
	СтруктураАдреса.Вставить("НаименованиеВида", НаименованиеВида);
	СтруктураАдреса.Вставить("Представление", Представление);
	
	ПредставлениеСВидом = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураАдреса
	, Представление, НаименованиеВида);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗначенияПараметров()
	
	Представление    = Параметры.Представление;
	НаименованиеВида = Строка(Параметры.Вид);
	
	Для Каждого ЭлементАдреса Из Параметры.ЗначенияПолей Цикл
		// Для Страны - отдельная обработка, т.к. в отличие от других полей это ссылочный тип
		Если ЭлементАдреса.Представление = "Страна" Тогда
			Страна = Справочники.СтраныМира.НайтиПоНаименованию(ЭлементАдреса.Значение);
		Иначе
			ЭтаФорма[ЭлементАдреса.Представление] = ЭлементАдреса.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗначениеПоля(Значение, ИмяПоля)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ЗначенияПолей.Добавить(Значение, ИмяПоля);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРезультатРедактирования()

	ЗначенияПолей.Очистить();
	ДобавитьЗначениеПоля(Индекс,              "Индекс");
	ДобавитьЗначениеПоля(КодРегиона,          "КодРегиона");
	ДобавитьЗначениеПоля(Регион,              "Регион");
	ДобавитьЗначениеПоля(Район,               "Район");
	ДобавитьЗначениеПоля(Город,               "Город");
	ДобавитьЗначениеПоля(НаселенныйПункт,     "НаселенныйПункт");
	ДобавитьЗначениеПоля(Улица,               "Улица");
	ДобавитьЗначениеПоля(Дом,                 "Дом");
	ДобавитьЗначениеПоля(Корпус,              "Корпус");
	ДобавитьЗначениеПоля(Квартира,            "Квартира");
	ДобавитьЗначениеПоля(НаименованиеСтраны,  "Страна");
	ДобавитьЗначениеПоля(КодСтраны,           "КодСтраны");
	
	Если Не ПустаяСтрока(Дом) Тогда
		ДобавитьЗначениеПоля(ТипДома,         "ТипДома");
	КонецЕсли;
	Если Не ПустаяСтрока(Корпус) Тогда
		ДобавитьЗначениеПоля(ТипКорпуса,      "ТипКорпуса");
	КонецЕсли;
	Если Не ПустаяСтрока(Квартира) Тогда
		ДобавитьЗначениеПоля(ТипКвартиры,     "ТипКвартиры");
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ЗначенияПолей", ЗначенияПолей);
	Результат.Вставить("Представление", Представление);
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПроверитьТипыПолей()
	
	ТипДома     = ?(ЗначениеЗаполнено(ТипДома),     ТипДома,     Элементы.ТипДома.СписокВыбора[0].Значение);
	ТипКорпуса  = ?(ЗначениеЗаполнено(ТипКорпуса),  ТипКорпуса,  Элементы.ТипКорпуса.СписокВыбора[0].Значение);
	ТипКвартиры = ?(ЗначениеЗаполнено(ТипКвартиры), ТипКвартиры, Элементы.ТипКвартиры.СписокВыбора[0].Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКнопкиВыбора()
	
	ЕстьКнопки = ИспользуютсяКлассификаторы И (Страна = СтранаРоссия);
	
	Элементы.Регион.КнопкаВыбора          = ЕстьКнопки;
	Элементы.Район.КнопкаВыбора           = ЕстьКнопки;
	Элементы.Город.КнопкаВыбора           = ЕстьКнопки;
	Элементы.НаселенныйПункт.КнопкаВыбора = ЕстьКнопки;
	Элементы.Улица.КнопкаВыбора           = ЕстьКнопки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКодИНаименованиеСтраны()
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Страна, "Код, Наименование");
	КодСтраны = ЗначенияРеквизитов.Код;
	НаименованиеСтраны = ЗначенияРеквизитов.Наименование;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НайтиСтрануПоКодуИлиНаименованию(КодСтраны, НаименованиеСтраны)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодСтраны", КодСтраны);
	Запрос.УстановитьПараметр("НаименованиеСтраны", НаименованиеСтраны);
	
	Если ПустаяСтрока(КодСтраны) ИЛИ ПустаяСтрока(НаименованиеСтраны) Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СтраныМира.Ссылка КАК Страна
		|ИЗ
		|	Справочник.СтраныМира КАК СтраныМира
		|ГДЕ
		|	СтраныМира.Код = &КодСтраны";
		Если ПустаяСтрока(КодСтраны) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Код", "Наименование");
		КонецЕсли;
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Страны.Ссылка КАК Страна
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		СтраныМира.Ссылка КАК Ссылка,
		|		1 КАК Порядок
		|	ИЗ
		|		Справочник.СтраныМира КАК СтраныМира
		|	ГДЕ
		|		СтраныМира.Код = &КодСтраны
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ ПЕРВЫЕ 1
		|		СтраныМира.Ссылка,
		|		2
		|	ИЗ
		|		Справочник.СтраныМира КАК СтраныМира
		|	ГДЕ
		|		СтраныМира.Наименование = &НаименованиеСтраны) КАК Страны
		|
		|УПОРЯДОЧИТЬ ПО
		|	Страны.Порядок";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Страна = ?(Выборка.Следующий(), Выборка.Страна, Справочники.СтраныМира.ПустаяСсылка());
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруАдреса()
	
	СтруктураАдреса = Новый Структура();
	СтруктураАдреса.Вставить("Индекс", Индекс);
	СтруктураАдреса.Вставить("Регион", Регион);
	СтруктураАдреса.Вставить("Район", Район);
	СтруктураАдреса.Вставить("Город", Город);
	СтруктураАдреса.Вставить("НаселенныйПункт", НаселенныйПункт);
	СтруктураАдреса.Вставить("Улица", Улица);
	СтруктураАдреса.Вставить("Дом", Дом);
	СтруктураАдреса.Вставить("Корпус", Корпус);
	СтруктураАдреса.Вставить("Квартира", Квартира);
	Возврат СтруктураАдреса;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьСтруктуруАдреса(СтруктураАдреса)
	
	Если Индекс <> СтруктураАдреса.Индекс Тогда
		Индекс = СтруктураАдреса.Индекс;
	КонецЕсли;
	Если Регион <> СтруктураАдреса.Регион Тогда
		Регион = СтруктураАдреса.Регион;
	КонецЕсли;
	Если Район <> СтруктураАдреса.Район Тогда
		Район = СтруктураАдреса.Район;
	КонецЕсли;
	Если Город <> СтруктураАдреса.Город Тогда
		Город = СтруктураАдреса.Город;
	КонецЕсли;
	Если НаселенныйПункт <> СтруктураАдреса.НаселенныйПункт Тогда
		НаселенныйПункт = СтруктураАдреса.НаселенныйПункт;
	КонецЕсли;
	Если Улица <> СтруктураАдреса.Улица Тогда
		Улица = СтруктураАдреса.Улица;
	КонецЕсли;
	Если Дом <> СтруктураАдреса.Дом Тогда
		Дом = СтруктураАдреса.Дом;
	КонецЕсли;
	Если Корпус <> СтруктураАдреса.Корпус Тогда
		Корпус = СтруктураАдреса.Корпус;
	КонецЕсли;
	Если Квартира <> СтруктураАдреса.Квартира Тогда
		Квартира = СтруктураАдреса.Квартира;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтруктуруАдресаНаСервере(СтруктураАдреса)
	
	Если Индекс <> СтруктураАдреса.Индекс Тогда
		Индекс = СтруктураАдреса.Индекс;
	КонецЕсли;
	Если Регион <> СтруктураАдреса.Регион Тогда
		Регион = СтруктураАдреса.Регион;
	КонецЕсли;
	Если Район <> СтруктураАдреса.Район Тогда
		Район = СтруктураАдреса.Район;
	КонецЕсли;
	Если Город <> СтруктураАдреса.Город Тогда
		Город = СтруктураАдреса.Город;
	КонецЕсли;
	Если НаселенныйПункт <> СтруктураАдреса.НаселенныйПункт Тогда
		НаселенныйПункт = СтруктураАдреса.НаселенныйПункт;
	КонецЕсли;
	Если Улица <> СтруктураАдреса.Улица Тогда
		Улица = СтруктураАдреса.Улица;
	КонецЕсли;
	Если Дом <> СтруктураАдреса.Дом Тогда
		Дом = СтруктураАдреса.Дом;
	КонецЕсли;
	Если Корпус <> СтруктураАдреса.Корпус Тогда
		Корпус = СтруктураАдреса.Корпус;
	КонецЕсли;
	Если Квартира <> СтруктураАдреса.Квартира Тогда
		Квартира = СтруктураАдреса.Квартира;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруАдресаНаСервере()
	
	СтруктураАдреса = Новый Структура();
	СтруктураАдреса.Вставить("Индекс",          Индекс);
	СтруктураАдреса.Вставить("Регион",          Регион);
	СтруктураАдреса.Вставить("Район",           Район);
	СтруктураАдреса.Вставить("Город",           Город);
	СтруктураАдреса.Вставить("НаселенныйПункт", НаселенныйПункт);
	СтруктураАдреса.Вставить("Улица",           Улица);
	СтруктураАдреса.Вставить("Дом",             Дом);
	СтруктураАдреса.Вставить("Корпус",          Корпус);
	СтруктураАдреса.Вставить("Квартира",        Квартира);
	Возврат СтруктураАдреса;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьПолейПоРегиону(СтруктураЗагруженных)
	
	Если Не ИспользуютсяКлассификаторы Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтруктураЗагруженных.Регион Тогда
		
		// Блокируем те поля, по которым в адресном классификаторе нет элементов
		Элементы.Район.Доступность 				= СтруктураЗагруженных.Район;
		Элементы.Город.Доступность 				= СтруктураЗагруженных.Город;
		Элементы.НаселенныйПункт.Доступность	= СтруктураЗагруженных.НаселенныйПункт;
		Элементы.Улица.Доступность 				= СтруктураЗагруженных.Улица;
		
		// А также убераем кнопки выбора для тех полей, по которым в КЛАДР нет элементов
		Элементы.Район.КнопкаВыбора				= СтруктураЗагруженных.Район;
		Элементы.Город.КнопкаВыбора 			= СтруктураЗагруженных.Город;
		Элементы.НаселенныйПункт.КнопкаВыбора	= СтруктураЗагруженных.НаселенныйПункт;
		Элементы.Улица.КнопкаВыбора 			= СтруктураЗагруженных.Улица;

	Иначе
		
		// Разрешаем вводить любые адреса, если отказались от загрузки
		Элементы.Район.Доступность 				= Истина;
		Элементы.Город.Доступность 				= Истина;
		Элементы.НаселенныйПункт.Доступность 	= Истина;
		Элементы.Улица.Доступность 				= Истина;
		
		// А также отключаем кнопки выбора
		Элементы.Район.КнопкаВыбора				= Ложь;
		Элементы.Город.КнопкаВыбора 			= Ложь;
		Элементы.НаселенныйПункт.КнопкаВыбора	= Ложь;
		Элементы.Улица.КнопкаВыбора 			= Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРегион(МожноЗагружатьРегион = Неопределено)
	
	Если Не ИспользуютсяКлассификаторы Тогда 
		Возврат;
	КонецЕсли;
	
	Если МожноЗагружатьРегион = Неопределено Тогда
		МожноЗагружатьРегион = ЗагружатьРегион(Регион);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Регион) И МожноЗагружатьРегион Тогда
		
		// Предлагаем загрузить регион из классификатора адресов (КЛАДР)
		ВопросПроЗагрузкуРегиона = НСтр("ru='По региону ""%Регион%"" не загружен адресный классификатор (КЛАДР).%ПереводСтроки%Загрузить?'"); 
		ВопросПроЗагрузкуРегиона = СтрЗаменить(ВопросПроЗагрузкуРегиона, "%Регион%", Регион);
		ВопросПроЗагрузкуРегиона = СтрЗаменить(ВопросПроЗагрузкуРегиона, "%ПереводСтроки%", Символы.ПС);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить("Загрузить");
		СписокКнопок.Добавить("Отмена");
		Ответ = Вопрос(ВопросПроЗагрузкуРегиона, СписокКнопок);
		Если Ответ = "Загрузить" Тогда
			ПодготовкаКЗагрузкеАдресногоКлассификатораРегиона(Регион);
			СтандартныеПодсистемыКлиентПереопределяемый.ЗагрузитьАдресныйКлассификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагружатьРегион(Регион)
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ИспользуютсяКлассификаторы Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	// Загрузить регион могут только администраторы или пользователи с правом добавления/изменения базовой НСИ
	Если НЕ Пользователи.РолиДоступны("ДобавлениеИзменениеОбщейБазовойНСИ") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Разбиваем регион на наименование и сокращение
	АдресноеСокращение = "";
	НаименованиеРегиона = Регион;
	СтандартныеПодсистемыПереопределяемый.ОпределитьИмяИАдресноеСокращение(НаименованиеРегиона, Регион, АдресноеСокращение);
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ ПЕРВЫЕ 1
					|	АдресныйКлассификатор.Код КАК Код
					|ИЗ
					|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
					|ГДЕ
					|	АдресныйКлассификатор.ТипАдресногоЭлемента = 1
					|	И АдресныйКлассификатор.Наименование = &НаименованиеРегиона";
	Запрос.УстановитьПараметр("НаименованиеРегиона", НаименованиеРегиона);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь; // Загружаются только регионы, которые есть в списке регионов.
	Иначе
		РегионЗагружен = Ложь;
		СтандартныеПодсистемыПереопределяемый.ОпределитьЗагруженностьАдресногоЭлемента(РегионЗагружен, Регион);
		Возврат Не РегионЗагружен; // Загружаем регион, если он не загружен.
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИсправитьПоля(СтруктураАдреса, Уровень)
	
	Если Не ИспользуютсяКлассификаторы Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	// Получаем поля из структуры адреса
	Индекс = СтруктураАдреса.Индекс;
	Регион = СтруктураАдреса.Регион;
	Район = СтруктураАдреса.Район;
	Город = СтруктураАдреса.Город;
	НаселенныйПункт = СтруктураАдреса.НаселенныйПункт;
	Улица = СтруктураАдреса.Улица;
	Дом = СтруктураАдреса.Дом;
	Корпус = СтруктураАдреса.Корпус;
	Квартира = СтруктураАдреса.Квартира;
	
	РегионЗагружен = Ложь;
	СтандартныеПодсистемыПереопределяемый.ОпределитьЗагруженностьАдресногоЭлемента(РегионЗагружен, Регион);
	
	Если Не РегионЗагружен Тогда
		СтруктураПолей = Новый Структура("СтруктураОшибок,СтруктураАдреса", Новый Структура, СтруктураАдреса);
		Возврат СтруктураПолей;
	КонецЕсли;
	
	СтруктураПроверки = Неопределено;
	СтандартныеПодсистемыПереопределяемый.ОпределитьСоответствиеАдресаКЛАДРу(СтруктураПроверки, "",
		Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус);
		
	// Очищаем не подходящие поля
	Если СтруктураПроверки.ЕстьОшибки Тогда
		
		СтандартныеПодсистемыПереопределяемый.ОчиститьПотомковПоУровнюАдресногоЭлемента(Регион, Район,
			Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира, Уровень); 
		
	КонецЕсли;
	
	// Заполняем или исправляем промежуточные поля
	Если Уровень > 2 И (ПустаяСтрока(Район) Или СтруктураПроверки.СтруктураОшибок.Свойство("Район")) Тогда
		Район = СокрЛП(СтруктураПроверки.Район.Наименование + " " + СтруктураПроверки.Район.Сокращение);	
	КонецЕсли;
	
	Если Уровень > 3 И (ПустаяСтрока(Город) Или СтруктураПроверки.СтруктураОшибок.Свойство("Город")) Тогда
		Город = СокрЛП(СтруктураПроверки.Город.Наименование + " " + СтруктураПроверки.Город.Сокращение);	
	КонецЕсли;
	
	Если Уровень > 4 И (ПустаяСтрока(НаселенныйПункт) Или СтруктураПроверки.СтруктураОшибок.Свойство("НаселенныйПункт")) Тогда
		НаселенныйПункт = СокрЛП(СтруктураПроверки.НаселенныйПункт.Наименование + " " 
		+ СтруктураПроверки.НаселенныйПункт.Сокращение);
	КонецЕсли;
	
	// Исправляем индекс
	НовыйИндекс = "";
	СтандартныеПодсистемыПереопределяемый.ОпределитьИндекс(НовыйИндекс, Регион, 
		Район, Город, НаселенныйПункт, Улица, Дом, Корпус);
	
	Если Не ПустаяСтрока(НовыйИндекс) Тогда
		Индекс = НовыйИндекс;
	КонецЕсли;
	
	// Обновляем структуру адреса
	СтруктураАдреса.Индекс = Индекс;
	СтруктураАдреса.Регион = Регион;
	СтруктураАдреса.Район = Район;
	СтруктураАдреса.Город = Город;
	СтруктураАдреса.НаселенныйПункт = НаселенныйПункт;
	СтруктураАдреса.Улица = Улица;
	СтруктураАдреса.Дом = Дом;
	СтруктураАдреса.Корпус = Корпус;
	СтруктураАдреса.Квартира = Квартира;
	
	// Проверяем ещё раз и возвращаем структуру ошибок
	СтруктураПроверки = Неопределено;
	СтандартныеПодсистемыПереопределяемый.ОпределитьСоответствиеАдресаКЛАДРу(СтруктураПроверки, "",
		Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус);
	
	СтруктураПроверки.Вставить("СтруктураАдреса", СтруктураАдреса);
	
	Возврат СтруктураПроверки;
	
КонецФункции

&НаСервере
Функция ЗагруженныеПоляПоРегиону(СтруктураАдреса)
	
	Если Не ИспользуютсяКлассификаторы Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	АдресныйЭлементЗагружен = Ложь;
	СтандартныеПодсистемыПереопределяемый.ОпределитьЗагруженностьАдресногоЭлемента(АдресныйЭлементЗагружен, СтруктураАдреса.Регион);
	
	Если АдресныйЭлементЗагружен Тогда
		
		СтруктураЗагруженных = Неопределено;
		СтандартныеПодсистемыПереопределяемый.ОпределитьСтруктуруЗагруженныхЭлементовАдреса(СтруктураЗагруженных,
			СтруктураАдреса.Регион, СтруктураАдреса.Район, СтруктураАдреса.Город, СтруктураАдреса.НаселенныйПункт, СтруктураАдреса.Улица);
		
		Возврат СтруктураЗагруженных;
		
	Иначе
		
		Возврат Новый Структура("Регион", Ложь);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПодготовкаКЗагрузкеАдресногоКлассификатораРегиона(Регион)
	
	Если Не ИспользуютсяКлассификаторы Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураПолей = Неопределено;
	СтандартныеПодсистемыПереопределяемый.ОпределитьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(СтруктураПолей,
		Регион, "", "", "", "");
	МассивЗагружаемыхАО = Новый Массив;
	МассивЗагружаемыхАО.Добавить(Формат(СтруктураПолей.КодАдресногоОбъектаВКоде, "ЧЦ=2; ЧВН="));
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПараметрыЗагрузкиАдресногоКлассификатора", "ЗагружаемыеРегионы"
	, МассивЗагружаемыхАО);
	
КонецПроцедуры

&НаСервере
Функция РезультатАвтоПодбора(Текст, СтруктураАдреса, Уровень)
	
	Если Не ИспользуютсяКлассификаторы Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементЗагружен = Ложь;
	СтандартныеПодсистемыПереопределяемый.ОпределитьЗагруженностьАдресногоЭлемента(ЭлементЗагружен, СтруктураАдреса.Регион,
		СтруктураАдреса.Район, СтруктураАдреса.Город, СтруктураАдреса.НаселенныйПункт, СтруктураАдреса.Улица, Уровень);
	
	Если ЭлементЗагружен ИЛИ Уровень = 1 Тогда
		Результат = Новый СписокЗначений;
		СтандартныеПодсистемыПереопределяемый.ОпределитьСписокАвтоПодбораТекстаВАдресномЭлементе(Результат, Текст
			, ?(Уровень > 1, СтруктураАдреса.Регион, ""), ?(Уровень > 2, СтруктураАдреса.Район, "")
			, ?(Уровень > 3, СтруктураАдреса.Город, ""), ?(Уровень > 4, СтруктураАдреса.НаселенныйПункт, ""), Уровень);
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбработатьПолеНаСервере(СтруктураАдреса, Уровень)
	
	Если Не ИспользуютсяКлассификаторы Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПолей = ИсправитьПоля(СтруктураАдреса, Уровень);
	СтруктураАдреса = СтруктураПолей.СтруктураАдреса;
	СтруктураОшибок = СтруктураПолей.СтруктураОшибок;
	СтруктураЗагруженных = ЗагруженныеПоляПоРегиону(СтруктураАдреса);
	МожноЗагружатьРегион = ЗагружатьРегион(СтруктураАдреса.Регион);
	
	СтруктураРезультата = Новый Структура("СтруктураОшибок,СтруктураЗагруженных,МожноЗагружатьРегион"
	, СтруктураОшибок, СтруктураЗагруженных, МожноЗагружатьРегион);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Функция ОпределитьСоответствиеАдресаКЛАДРу(Индекс, Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус)
	
	Если Не ИспользуютсяКлассификаторы Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураПроверки = Неопределено;
	СтандартныеПодсистемыПереопределяемый.ОпределитьСоответствиеАдресаКЛАДРу(СтруктураПроверки, 
		Индекс, Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус);
	
	Возврат СтруктураПроверки;
	
КонецФункции