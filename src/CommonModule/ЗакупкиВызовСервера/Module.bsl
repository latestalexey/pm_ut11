////////////////////////////////////////////////////////////////////////////////
// Модуль "ЗакупкиВызовСервера", содержит процедуры и функции для 
// серверной обработки действий пользователя в процессе работы с документами закупки
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

//Проверяет, есть ли в табличной части строки с незаполненной датой поступления в неотмененных строках
//	
//Параметры:
//		Объект - ДанныеФормыСтруктура - проверяемый обеъкт
//		ИмяТЧ - Строка - имя проверяемой ТЧ
//
//Возвращаемое значение:
//		Булево - признак наличия строк с незаполненной датой поступления
Функция ДатаПоступленияПустая(Знач Объект, ИмяТЧ) Экспорт
	
	Для Каждого ТекСтрока Из Объект[ИмяТЧ] Цикл
		
		Если Не ТекСтрока.Отменено 
			И Не ЗначениеЗаполнено(ТекСтрока.ДатаПоступления) Тогда
			
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет наличие в информационной базе ранее сопоставленной номенклатуры поставщика
//
Функция ПроверитьСопоставленнуюНоменклатуруПоставщика(Знач Объект) Экспорт
	
	ВыводитьПредупреждение = Ложь;
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") Тогда
		Возврат ВыводитьПредупреждение;
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Товары.НомерСтроки            КАК НомерСтроки,
		|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
		|	Товары.Номенклатура           КАК Номенклатура,
		|	Товары.Характеристика         КАК Характеристика,
		|	Товары.Упаковка               КАК Упаковка
		|ПОМЕСТИТЬ
		|	Товары
		|ИЗ
		|	&Товары КАК Товары
		|ГДЕ
		|	Товары.НоменклатураПоставщика <> ЗНАЧЕНИЕ(Справочник.НоменклатураПоставщиков.ПустаяСсылка)
		|	И Товары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|;
		|ВЫБРАТЬ
		|	ТоварыДляПроверки.НомерСтроки            КАК НомерСтроки,
		|	ТоварыДляПроверки.НоменклатураПоставщика КАК НоменклатураПоставщика,
		|	ТоварыДляПроверки.Номенклатура           КАК Номенклатура,
		|	ТоварыДляПроверки.Характеристика         КАК Характеристика,
		|	ТоварыДляПроверки.Упаковка               КАК Упаковка
		|ПОМЕСТИТЬ
		|	ТоварыДляПроверки
		|ИЗ
		|	Товары КАК ТоварыДляПроверки
		|ГДЕ
		|	ТоварыДляПроверки.НоменклатураПоставщика.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|;
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(НоменклатураПоставщиков.Ссылка) КАК КоличествоНоменклатурыПоставщика,
		|	НоменклатураПоставщиков.Номенклатура       КАК Номенклатура,
		|	НоменклатураПоставщиков.Характеристика     КАК Характеристика,
		|	НоменклатураПоставщиков.Упаковка           КАК Упаковка
		|ПОМЕСТИТЬ
		|	НоменклатураПоставщиков
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Владелец = &Партнер
		|	И Не НоменклатураПоставщиков.ПометкаУдаления
		|	И (Номенклатура,Характеристика,Упаковка) В (
		|		ВЫБРАТЬ
		|			Товары.Номенклатура,
		|			Товары.Характеристика,
		|			Товары.Упаковка
		|		ИЗ
		|			Товары КАК Товары
		|		)
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураПоставщиков.Номенклатура,
		|	НоменклатураПоставщиков.Характеристика,
		|	НоменклатураПоставщиков.Упаковка
		|;
		|ВЫБРАТЬ
		|	ТоварыДляПроверки.НомерСтроки                             КАК НомерСтроки,
		|	ТоварыДляПроверки.Номенклатура                            КАК Номенклатура,
		|	ТоварыДляПроверки.Характеристика                          КАК Характеристика,
		|	ТоварыДляПроверки.Упаковка                                КАК Упаковка,
		|	НоменклатураПоставщиков.КоличествоНоменклатурыПоставщика  КАК КоличествоНоменклатурыПоставщика
		|ИЗ
		|	ТоварыДляПроверки КАК ТоварыДляПроверки
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ПО
		|	ТоварыДляПроверки.Номенклатура = НоменклатураПоставщиков.Номенклатура
		|	И ТоварыДляПроверки.Характеристика = НоменклатураПоставщиков.Характеристика
		|	И ТоварыДляПроверки.Упаковка = НоменклатураПоставщиков.Упаковка
		|");
	
	ТаблицаТоваров = Новый ТаблицаЗначений();
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки",            Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("НоменклатураПоставщика", Новый ОписаниеТипов("СправочникСсылка.НоменклатураПоставщиков"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",           Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",         Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка",               Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		
		СтрокаТаблицы = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекСтрока);
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Товары",  ТаблицаТоваров);
	Запрос.УстановитьПараметр("Партнер", Объект.Партнер);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если Не РезультатЗапроса[3].Пустой() Тогда
		
		Выборка = РезультатЗапроса[3].Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
				
				ТекстОшибки = НСтр("ru='Номенклатуре ""%Номенклатура%"" с характеристикой ""%Характеристика%"" уже сопоставлена другая номенклатура поставщика (%КоличествоНоменклатурыПоставщика%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",                     Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%",                   Выборка.Характеристика);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоНоменклатурыПоставщика%", Выборка.КоличествоНоменклатурыПоставщика);
				
			Иначе
				
				ТекстОшибки = НСтр("ru='Номенклатуре ""%Номенклатура%"" уже сопоставлена другая номенклатура поставщика (%КоличествоНоменклатурыПоставщика%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",                     Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоНоменклатурыПоставщика%", Выборка.КоличествоНоменклатурыПоставщика);
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", Выборка.НомерСтроки, "Номенклатура"),
				,
				ВыводитьПредупреждение
			);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВыводитьПредупреждение;
	
КонецФункции

// Формирует список значений номенклатуры поставщика по партнеру, номенклатуре, характеристике, упаковке
//
Функция СформироватьСписокВыбораНоменклатурыПоставщика(Знач Партнер, Знач Номенклатура, Знач Характеристика, Знач Упаковка) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	|ГДЕ
	|	НоменклатураПоставщиков.Владелец = &Партнер
	|	И (НоменклатураПоставщиков.Номенклатура = &Номенклатура
	|			ИЛИ НоменклатураПоставщиков.Номенклатура В
	|				(ВЫБРАТЬ
	|					ТоварыДругогоКачества.Номенклатура
	|				ИЗ
	|					РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	|				ГДЕ
	|					ТоварыДругогоКачества.НоменклатураБрак = &Номенклатура))
	|	И НоменклатураПоставщиков.Характеристика = &Характеристика
	|	И НоменклатураПоставщиков.Упаковка = &Упаковка
	|	И (НЕ НоменклатураПоставщиков.ПометкаУдаления)");
		
	Запрос.УстановитьПараметр("Партнер",        Партнер);
	Запрос.УстановитьПараметр("Номенклатура",   Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Упаковка",       Упаковка);
	
	РезультатЗапроса = Запрос.Выполнить();
	СписокВыбора = Новый СписокЗначений();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокВыбора.Добавить(Выборка.НоменклатураПоставщика);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции

// Формирует структуру для создания поступления по одному или нескольким заказам поставщикам
// Если в переданных заказах отличаются реквизиты шапки, выдается сообщение об ошибке
//
// Параметры:
// МассивСсылок   - Массив - заказы поставщикам, по которым необходимо ввести поступление
// РеквизитыШапки - Структура - структура, в которую будут помещены реквизиты шапки из массива заказов
//
// Возвращаемое значение:
// Булево
// Ложь, если в переданных заказах отличаются реквизиты шапки
//
Функция СформироватьДанныеЗаполненияПоступления(МассивСсылок, РеквизитыШапки) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	МИНИМУМ(ЗаказПоставщику.Партнер)                        КАК Партнер,
		|	МИНИМУМ(ЗаказПоставщику.Контрагент)                     КАК Контрагент,
		|	МИНИМУМ(ЗаказПоставщику.Договор)                        КАК Договор,
		|	МИНИМУМ(ЗаказПоставщику.Организация)                    КАК Организация,
		|	МИНИМУМ(ЗаказПоставщику.Соглашение)                     КАК Соглашение,
		|	МИНИМУМ(ЗаказПоставщику.Склад)                          КАК Склад,
		|	МИНИМУМ(ЗаказПоставщику.ХозяйственнаяОперация)          КАК ХозяйственнаяОперация,
		|	МИНИМУМ(ЗаказПоставщику.Валюта)                         КАК ВалютаВзаиморасчетов,
		|	МИНИМУМ(ЗаказПоставщику.НалогообложениеНДС)             КАК НалогообложениеНДС,
		|	МИНИМУМ(ЗаказПоставщику.ЦенаВключаетНДС)                КАК ЦенаВключаетНДС,
		|	МИНИМУМ(ЗаказПоставщику.ВернутьМногооборотнуюТару)      КАК ВернутьМногооборотнуюТару,
		|	МИНИМУМ(ЗаказПоставщику.СрокВозвратаМногооборотнойТары) КАК СрокВозвратаМногооборотнойТары,
		|	МИНИМУМ(ЗаказПоставщику.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю) КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	ВЫБОР
		|		КОГДА
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщику.Партнер) > 1
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОтличияПартнер,
		|	ВЫБОР
		|		КОГДА
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщику.Контрагент) > 1
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОтличияКонтрагент,
		|	ВЫБОР
		|		КОГДА
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщику.Договор) > 1
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОтличияДоговор,
		|	ВЫБОР
		|		КОГДА
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщику.Организация) > 1
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОтличияОрганизация,
		|	ВЫБОР
		|		КОГДА
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщику.Соглашение) > 1
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОтличияСоглашение,
		|	ВЫБОР
		|		КОГДА
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщику.Склад) > 1
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОтличияСклад,
		|	ВЫБОР
		|		КОГДА
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщику.ХозяйственнаяОперация) > 1
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОтличияХозяйственнаяОперация,
		|	ВЫБОР
		|		КОГДА
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщику.Валюта) > 1
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОтличияВалютаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщику.НалогообложениеНДС) > 1
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОтличияНалогообложениеНДС,
		|	ВЫБОР
		|		КОГДА
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщику.ЦенаВключаетНДС) > 1
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОтличияЦенаВключаетНДС,
		|	ВЫБОР
		|		КОГДА
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщику.ВернутьМногооборотнуюТару) > 1
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОтличияВернутьМногооборотнуюТару,
		|	ВЫБОР
		|		КОГДА
		|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПоставщику.СрокВозвратаМногооборотнойТары) > 1
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОтличияСрокВозвратаМногооборотнойТары,
		|	ВЫБОР
		|		КОГДА
		|			МИНИМУМ(ЗаказПоставщику.Склад.ЭтоГруппа) = ИСТИНА И МИНИМУМ(ЗаказПоставщику.Склад.ВыборГруппы) = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|		ТОГДА
		|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИНАЧЕ
		|			МИНИМУМ(ЗаказПоставщику.Склад)
		|	КОНЕЦ КАК СкладПоступления,
		|	ВЫБОР
		|		КОГДА
		|			МИНИМУМ(ЗаказПоставщику.Склад.ЭтоГруппа) = ИСТИНА И МИНИМУМ(ЗаказПоставщику.Склад.ВыборГруппы) = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Ссылка В (&МассивСсылок)
		|;
		|ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику,
		|	ЗаказПоставщику.Статус КАК Статус,
		|	НЕ ЗаказПоставщику.Проведен КАК ЕстьОшибкиПроведен,
		|	ВЫБОР
		|		КОГДА
		|			ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению)
		|			ИЛИ ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|		ТОГДА
		|			ЛОЖЬ
		|		ИНАЧЕ
		|			ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Ссылка В (&МассивСсылок)
		|	И (НЕ ЗаказПоставщику.Проведен ИЛИ
		|	ЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению)
		|	И ЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт))"
	);
		
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаРеквизитыШапки = РезультатЗапроса[0].Выбрать();
	ВыборкаРеквизитыШапки.Следующий();
	
	Отказ = Ложь;
	
	ТекстСообщения = НСтр("ru='У выделенных распоряжений отличается поле ""%ПредставлениеПоля%""'");
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияПартнер Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Партнер'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияКонтрагент Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Контрагент'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияОрганизация Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Организация'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСоглашение Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Соглашение'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияДоговор Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Договор'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСклад Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Склад'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияХозяйственнаяОперация Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Операция'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВалютаВзаиморасчетов Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Валюта взаиморасчетов'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияНалогообложениеНДС Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Налогообложение НДС'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияЦенаВключаетНДС Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Цена включает НДС'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВернутьМногооборотнуюТару Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Вернуть многооборотную тару'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСрокВозвратаМногооборотнойТары Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Срок возврата многооборотной тары'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		ТекстОшибки = НСтр("ru='Ввод одного поступления товаров и услуг на основании выделенных распоряжений невозможен'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			,
			,
			Отказ
		);
		
	Иначе
		
		Если Не РезультатЗапроса[1].Пустой() > 0 Тогда
			
			ВыборкаЗаказы = РезультатЗапроса[1].Выбрать();
			
			Пока ВыборкаЗаказы.Следующий() Цикл
			
				Если ВыборкаЗаказы.ЕстьОшибкиПроведен Тогда
					
					ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаЗаказы.ЗаказПоставщику);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						,
						,
						Отказ
					);
					
				ИначеЕсли ВыборкаЗаказы.ЕстьОшибкиСтатус Тогда
					
					ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании разрешен только в статусах ""К поступлению"", ""Закрыт"".'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаЗаказы.ЗаказПоставщику);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%",   ВыборкаЗаказы.Статус);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						,
						,
						Отказ
					);
					
				КонецЕсли;
				
				
			КонецЦикла;
			
		КонецЕсли;
		
		РеквизитыШапки.Вставить("Партнер",                        ВыборкаРеквизитыШапки.Партнер);
		РеквизитыШапки.Вставить("Контрагент",                     ВыборкаРеквизитыШапки.Контрагент);
		РеквизитыШапки.Вставить("Договор",                        ВыборкаРеквизитыШапки.Договор);
		РеквизитыШапки.Вставить("Организация",                    ВыборкаРеквизитыШапки.Организация);
		РеквизитыШапки.Вставить("Склад",                          ВыборкаРеквизитыШапки.Склад);
		РеквизитыШапки.Вставить("Соглашение",                     ВыборкаРеквизитыШапки.Соглашение);
		РеквизитыШапки.Вставить("ХозяйственнаяОперация",          ВыборкаРеквизитыШапки.ХозяйственнаяОперация);
		РеквизитыШапки.Вставить("ВалютаВзаиморасчетов",           ВыборкаРеквизитыШапки.ВалютаВзаиморасчетов);
		РеквизитыШапки.Вставить("НалогообложениеНДС",             ВыборкаРеквизитыШапки.НалогообложениеНДС);
		РеквизитыШапки.Вставить("ЦенаВключаетНДС",                ВыборкаРеквизитыШапки.ЦенаВключаетНДС);
		РеквизитыШапки.Вставить("ВернутьМногооборотнуюТару",      ВыборкаРеквизитыШапки.ВернутьМногооборотнуюТару);
		РеквизитыШапки.Вставить("РассчитыватьДатуВозвратаТарыПоКалендарю", ВыборкаРеквизитыШапки.РассчитыватьДатуВозвратаТарыПоКалендарю);
		РеквизитыШапки.Вставить("СрокВозвратаМногооборотнойТары", ВыборкаРеквизитыШапки.СрокВозвратаМногооборотнойТары);
		РеквизитыШапки.Вставить("СкладПоступления",               ВыборкаРеквизитыШапки.СкладПоступления);
		РеквизитыШапки.Вставить("ЗапрещеноВыбиратьГруппуСкладов", ВыборкаРеквизитыШапки.ЗапрещеноВыбиратьГруппуСкладов);
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

// Процедура заполняет банковский счета документа по договору.
//
// Параметры:
//		Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор;
//		БанковскийСчетОрганизации - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет организации;
//		БанковскийСчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов - Банковский счет контрагента.
//
Процедура ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации = Неопределено, БанковскийСчетКонтрагента = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Договор) Тогда
		Справочники.ДоговорыКонтрагентов.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на счет-фактуру по документу.
//
// Параметры:
//  Основание - ДокументСсылка - Документ, на основании которого вводится счет-фактура;
//  Организация - СправочникСсылка.Организации - Организация, на имя которой оформляется счет-фактура.
//
// Возвращаемое значение:
//  ДокументСсылка.СчетФактураПолученный, Неопределено - Ссылка на счет-фактуру по документу.
//		Если счет-фактура не найдена - Неопределено.
//
Функция СчетФактураДокумента(Основание, Организация = Неопределено) Экспорт
	
	Перем РеквизитыСчетаФактуры;
	
	Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(Основание, Организация, РеквизитыСчетаФактуры);
	
	Если РеквизитыСчетаФактуры <> Неопределено Тогда
		СчетФактураДокумента = РеквизитыСчетаФактуры.Ссылка;
	Иначе
		СчетФактураДокумента = Неопределено;
	КонецЕсли;
	
	Возврат СчетФактураДокумента;
	
КонецФункции

// Функция проверки наличия графика оплаты в соглашении
//
// Параметры:
// 		Соглашение - СправочникСсылка.Соглашение
//
// Возвращаемое значение:
// 		Булево - "Истина", если в графике есть хотя бы один этап
//
Функция ГрафикСоглашенияЗаполнен(Соглашение) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК СоглашенияСПоставщикамиЭтапыГрафикаОплаты
	|ГДЕ
	|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка = &Соглашение");
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает количество соглашений с указанным поставщиком
//
// Параметры:
//	Партнер           - Ссылка на партнера, для которого необходимо получить количество соглашений
//	ПараметрыОтбора   - Структура с параметрами отбора соглашений 
//
// Возвращаемое значение:
//  Структура, включающая условия продаж
//
Функция ПолучитьКоличествоСоглашенийСПоставщиком(Знач Партнер,
	                                      Знач ПараметрыОтбора = Неопределено) Экспорт
	
	ВсеПараметрыОтбора = Новый Структура();
	ВсеПараметрыОтбора.Вставить("ТолькоДляЗакупки",                        Истина);
	ВсеПараметрыОтбора.Вставить("ТолькоДействующее",                       Истина);
	ВсеПараметрыОтбора.Вставить("ИсключитьГруппыСкладовДоступныеВЗаказах", Ложь);
	ВсеПараметрыОтбора.Вставить("ХозяйственныеОперации",                   Неопределено);
	
	Если ПараметрыОтбора <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВсеПараметрыОтбора, ПараметрыОтбора);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	СоглашениеСПоставщиком.Ссылка                       КАК Соглашение
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
	|ГДЕ
	|	НЕ СоглашениеСПоставщиком.ПометкаУдаления И
	|	(НЕ &ОтборХозяйственныеОперации ИЛИ СоглашениеСПоставщиком.ХозяйственнаяОперация В (&ХозяйственныеОперации)) И
	|" + ?(ВсеПараметрыОтбора.ТолькоДляЗакупки," СоглашениеСПоставщиком.ДоступноДляЗакупки И ","") + "
	|" + ?(ВсеПараметрыОтбора.ТолькоДействующее," СоглашениеСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует) И","") + "
	|	СоглашениеСПоставщиком.Партнер = &Партнер
	|";
	
	Запрос.УстановитьПараметр("Партнер",                    Партнер);
	Запрос.УстановитьПараметр("ОтборХозяйственныеОперации", ВсеПараметрыОтбора.ХозяйственныеОперации <> Неопределено);
	Запрос.УстановитьПараметр("ХозяйственныеОперации",      ВсеПараметрыОтбора.ХозяйственныеОперации);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Количество();
	
КонецФункции // ПолучитьКоличествоСоглашенийСПоставщиком()
