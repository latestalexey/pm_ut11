////////////////////////////////////////////////////////////////////////////////
// Подсистема "Настройка порядка элементов".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет перемещение объекта вверх или вниз по списку.
//
// Параметры:
//  Ссылка              - Ссылка                         - ссылка на перемещаемый элемент;
//  УстановленныеОтборы - Структура:
//                         ЕстьОтборПоРодителю  - Булево - наличие отбора по родителю в списке;
//                         ЕстьОтборПоВладельцу - Булево - наличие отбора по владельцу в списке;
//  ОтображениеСписком  - Булево                         - Свойство "Отображение" у элемента формы равно "ОтображениеТаблицы.Список";
//  Вверх               - Булево                         - Истина, если перемещение вверх, иначе вниз.
//
// Возвращаемое значение:
//  Строка - описание ошибки.
Функция ИзменитьПорядокЭлементов(Ссылка, УстановленныеОтборы, ОтображениеСписком, ПередвинутьВверх) Экспорт
	
	ПараметрыДоступа = ПараметрыДоступа("Изменение", Ссылка.Метаданные(), "Ссылка");
	Если Не ПараметрыДоступа.Доступность Или ПараметрыДоступа.ОграничениеУсловием Тогда
		Возврат НСтр("ru = 'Недостаточно прав для изменения порядка элементов.'");
	КонецЕсли;
	
	Информация = ПолучитьИнформациюДляПеремещенияОМетаданных(Ссылка);
	
	// Для иерархических справочников может быть установлен отбор по родителю, если нет,
	// то способ отображения должен быть иерархический или в виде дерева
	Если Информация.ЕстьРодитель И ОтображениеСписком И Не УстановленныеОтборы.ЕстьОтборПоРодителю Тогда
		Возврат НСтр("ru = 'Для изменения порядка элементов необходимо установить режим просмотра ""Дерево"" или ""Иерархический список"".'");
	КонецЕсли;
	
	// Для подчиненных справочников должен быть установлен отбор по владельцу
	Если Информация.ЕстьВладелец И НЕ УстановленныеОтборы.ЕстьОтборПоВладельцу Тогда
		Возврат НСтр("ru = 'Для изменения порядка элементов необходимо установить отбор по полю ""Владелец"".'");
	КонецЕсли;
	
	// Проверим, есть ли у выбранного объекта реквизит доп. упорядочивания
	Если Информация.ЕстьГруппы Тогда
		ЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ЭтоГруппа");
		Если ЭтоГруппа И Не Информация.ДляГрупп Тогда
			// Это группа, но для группа порядок не назначается
			Возврат "";
		ИначеЕсли Не ЭтоГруппа И Не Информация.ДляЭлементов Тогда
			// Это элемент, но для элементов порядок не назначается
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	УсловияЗапроса = Новый Массив;
	
	// Добавим условие по родителю
	Если Информация.ЕстьРодитель Тогда
		УсловияЗапроса.Добавить("Таблица.Родитель = &Родитель");
		Запрос.УстановитьПараметр("Родитель", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Родитель"));
	КонецЕсли;
	
	// Добавим условие по владельцу
	Если Информация.ЕстьВладелец Тогда
		УсловияЗапроса.Добавить("Таблица.Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Владелец"));
	КонецЕсли;
	
	// Добавим условие на группу
	Если Информация.ЕстьГруппы Тогда
		Если Информация.ДляГрупп И Не Информация.ДляЭлементов Тогда
			УсловияЗапроса.Добавить("Таблица.ЭтоГруппа");
		ИначеЕсли Не Информация.ДляГрупп И Информация.ДляЭлементов Тогда
			УсловияЗапроса.Добавить("НЕ Таблица.ЭтоГруппа");
		КонецЕсли;
	КонецЕсли;
	
	// Подготовка строки условий 
	ДополнительныеУсловия = "ИСТИНА";
	Для Каждого Условие Из УсловияЗапроса Цикл
		ДополнительныеУсловия = ДополнительныеУсловия + " И " + Условие;
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.РеквизитДопУпорядочивания КАК ПорядокСтарый,
	|	Таблица.РеквизитДопУпорядочивания КАК ПорядокНовый
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	&ДополнительныеУсловия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Таблица.РеквизитДопУпорядочивания";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", Ссылка.Метаданные().ПолноеИмя());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеУсловия", ДополнительныеУсловия);
	
	Запрос.Текст = ТекстЗапроса;
	ТаблицаУпорядочивания = Запрос.Выполнить().Выгрузить();
	
	СдвигаемаяСтрока = ТаблицаУпорядочивания.Найти(Ссылка, "Ссылка");
	Если СдвигаемаяСтрока = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Смещение = ?(ПередвинутьВверх, -1, 1);
	
	ИндексСоседнейСтроки = ТаблицаУпорядочивания.Индекс(СдвигаемаяСтрока) + Смещение;
	Если Не((0 <= ИндексСоседнейСтроки) И (ИндексСоседнейСтроки < ТаблицаУпорядочивания.Количество())) Тогда
		Возврат "";
	КонецЕсли;
	
	СоседняяСтрока = ТаблицаУпорядочивания[ИндексСоседнейСтроки];
	
	СдвигаемаяСтрока.ПорядокНовый = СоседняяСтрока.ПорядокСтарый;
	СоседняяСтрока.ПорядокНовый = СдвигаемаяСтрока.ПорядокСтарый;
	
	ТаблицаУпорядочивания.Сдвинуть(СдвигаемаяСтрока, Смещение);
	
	ПредыдущийПорядок = 0;
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого ТекущаяСтрока Из ТаблицаУпорядочивания Цикл
			
			Если ПредыдущийПорядок >= ТекущаяСтрока.ПорядокНовый Тогда
				ТекущаяСтрока.ПорядокНовый = ПредыдущийПорядок + 1;
			КонецЕсли;
			
			ПредыдущийПорядок = ТекущаяСтрока.ПорядокНовый;
			
			Если ТекущаяСтрока.ПорядокНовый <> ТекущаяСтрока.ПорядокСтарый Тогда
				Объект = ТекущаяСтрока.Ссылка.ПолучитьОбъект();
				ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка);
				Объект.РеквизитДопУпорядочивания = ТекущаяСтрока.ПорядокНовый;
				Объект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

// Возвращает структуру с информацией о метаданных объекта.
// 
// Параметры:
//  Ссылка - ссылка на объект.
//
// Возвращаемое значение:
//  Структура - информация из метаданных объекта.
Функция ПолучитьИнформациюДляПеремещенияОМетаданных(Ссылка) Экспорт
	
	Информация = Новый Структура;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	МетаданныеРеквизита = МетаданныеОбъекта.Реквизиты.РеквизитДопУпорядочивания;
	
	Информация.Вставить("ПолноеИмя",    МетаданныеОбъекта.ПолноеИмя());
	
	ЭтоСправочник = Метаданные.Справочники.Содержит(МетаданныеОбъекта);
	ЭтоПВХ        = Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта);
	
	Если ЭтоСправочник ИЛИ ЭтоПВХ Тогда
		
		Информация.Вставить("ЕстьГруппы",
					МетаданныеОбъекта.Иерархический И 
							?(ЭтоПВХ, Истина, МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов));
		
		Информация.Вставить("ДляГрупп",     (МетаданныеРеквизита.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента));
		Информация.Вставить("ДляЭлементов", (МетаданныеРеквизита.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы));
		Информация.Вставить("ЕстьРодитель",  МетаданныеОбъекта.Иерархический);
		Информация.Вставить("ГруппыСверху", ?(НЕ Информация.ЕстьРодитель, Ложь, МетаданныеОбъекта.ГруппыСверху));
		Информация.Вставить("ЕстьВладелец", ?(ЭтоПВХ, Ложь, (МетаданныеОбъекта.Владельцы.Количество() <> 0)));
		
	Иначе
		
		Информация.Вставить("ЕстьГруппы",   Ложь);
		Информация.Вставить("ДляГрупп",     Ложь);
		Информация.Вставить("ДляЭлементов", Истина);
		Информация.Вставить("ЕстьРодитель", Ложь);
		Информация.Вставить("ЕстьВладелец", Ложь);
		Информация.Вставить("ГруппыСверху", Ложь);
		
	КонецЕсли;
	
	Возврат Информация;
	
КонецФункции

// Возвращает значение реквизита доп. упорядочивания для нового объекта.
//
// Параметры:
//  Информация - Структура - информация о метаданных объекта;
//  Родитель   - Ссылка    - ссылка на родителя объекта;
//  Владелец   - Ссылка    - ссылка на владельца объекта.
//
// Возвращаемое значение:
//  Число - значение реквизита доп. упорядочивания.
Функция ПолучитьНовоеЗначениеРеквизитаДопУпорядочивания(Информация, Родитель, Владелец) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	
	УсловияЗапроса = Новый Массив;
	
	Если Информация.ЕстьРодитель Тогда
		УсловияЗапроса.Добавить("Таблица.Родитель = &Родитель");
		Запрос.УстановитьПараметр("Родитель", Родитель);
	КонецЕсли;
	
	Если Информация.ЕстьВладелец Тогда
		УсловияЗапроса.Добавить("Таблица.Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	
	ДополнительныеУсловия = "ИСТИНА";
	Для Каждого Условие Из УсловияЗапроса Цикл
		ДополнительныеУсловия = ДополнительныеУсловия + " И " + Условие;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	&ДополнительныеУсловия
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания УБЫВ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", Информация.ПолноеИмя);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеУсловия", ДополнительныеУсловия);
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат ?(Не ЗначениеЗаполнено(Выборка.РеквизитДопУпорядочивания), 1, Выборка.РеквизитДопУпорядочивания + 1);
	
КонецФункции
