///////////////////////////////////////////////////////////////////////////////
//ЗАКАЗ ПОКУПАТЕЛЯ

// Заполняет заказ клиента на основании коммерческого предложения клиенту.
//
// Параметры:
// Основание - ДокументСсылка.КоммерческоеПредложениеКлиенту - Ссылка на коммерческое предложение клиенту.
//
Процедура ЗаполнитьДокументНаОснованииЗаказаКлиента(Источник, Знач Основание)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказКлиента.Ссылка КАК ДокументОснование,
		|	ЗаказКлиента.Партнер КАК Партнер,
		|	ЗаказКлиента.Контрагент,
		|	ЗаказКлиента.Сделка КАК Сделка,
		|	ЗаказКлиента.Валюта КАК Валюта,
		|	ЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
		|	ЗаказКлиента.ГрафикОплаты КАК ГрафикОплаты,
		|	ЗаказКлиента.Организация КАК Организация,
		|	ЗаказКлиента.Соглашение КАК Соглашение,
		|	ЗаказКлиента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ЗаказКлиента.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ЗаказКлиента.ФормаОплаты КАК ФормаОплаты,
		|	ЗаказКлиента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ЗаказКлиента.Склад КАК Склад,
		|	ЗаказКлиента.Статус КАК СтатусДокумента,
		|	(НЕ ЗаказКлиента.Проведен) КАК ЕстьОшибкиПроведен,
		|	ВЫБОР
		|		КОГДА ЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	ЗаказКлиента.Товары.(
		|		НомерСтроки КАК НомерСтроки,
		|		КлючСвязи КАК КлючСвязи,
		|		Номенклатура КАК Номенклатура,
		|		Характеристика КАК Характеристика,
		|		Упаковка КАК Упаковка,
		|		КоличествоУпаковок КАК КоличествоУпаковок,
		|		Количество КАК Количество,
		|		ВидЦены КАК ВидЦены,
		|		Цена КАК Цена,
		|		ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
		|		СуммаРучнойСкидки КАК СуммаРучнойСкидки,
		|		СтавкаНДС КАК СтавкаНДС,
		|		СуммаНДС КАК СуммаНДС,
		|		Сумма КАК Сумма,
		|		ВЫБОР
		|			КОГДА ЗаказКлиента.Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|					ИЛИ ЗаказКлиента.Склад.ЭтоГруппа
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИНАЧЕ ЗаказКлиента.Склад
		|		КОНЕЦ КАК Склад,
		|		АК_ТекстовоеОписание КАК АК_ТекстовоеОписание,
		|		АК_ПризнакНестандарт КАК АК_ПризнакНестандарт,
		|		АК_НестандартОписание КАК АК_НестандартОписание,
		|		АК_ПризнакЭскиз КАК АК_ПризнакЭскиз,
		|		АК_ЭскизФайл КАК АК_ЭскизФайл,
		|		АК_ИнформацияДляОтделаЗакупки КАК АК_ИнформацияДляОтделаЗакупки,
		|		АК_ДопКомплектация КАК АК_ДопКомплектация,
		|		АК_ПроцентНаценкиДоставка,
		|		АК_ПроцентНаценкиМонтаж,
		|		АК_ДопУслугиСумма,
		|		АК_ДопУслугиСуммаНДС,
		|		АК_ПунктДоставки,
		|		АК_ПунктМонтажа
		|	) КАК Товары,
		|	ЗаказКлиента.АК_ПунктНазначения,
		|	ЗаказКлиента.АК_УсловияПоставки
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.Ссылка = &Основание");

	//
	Запрос.УстановитьПараметр("Основание",Основание);
	
	//
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	//
	МассивДопустимыхСтатусов = Новый Массив();
	//МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовКлиентов.);
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		Выборка.ДокументОснование,
		Выборка.СтатусДокумента,
		Ложь,
		Ложь,
		МассивДопустимыхСтатусов
	);
	
	//
	ЗаполнитьЗначенияСвойств(Источник, Выборка);
	
	//
	ТаблицаТовары = Выборка.Товары.Выгрузить();
	Источник.Товары.Загрузить(ТаблицаТовары);
	
    //
	СоответствиеСтрокиДляУдаления = Новый Соответствие;
	
	//
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Источник.Партнер, Источник.Контрагент);
	
	//
	Если ЗначениеЗаполнено(Источник.ГрафикОплаты) Тогда
		ПродажиСервер.ЗаполнитьЭтапыГрафикаОплаты(Источник, Источник.ПолучитьСуммуЗаказанныхСтрок(), Ложь);
	КонецЕсли;
	
	//
	Источник.АК_ПризнакРекламация = Истина;
	
КонецПроцедуры // ЗаполнитьДокументНаОснованииКоммерческогоПредложенияКлиенту()

Процедура ЗаказКлиента_ОбработкаЗаполнения(Источник,ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказКлиента") Тогда 		
		ЗаполнитьДокументНаОснованииЗаказаКлиента(Источник, ДанныеЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоммерческоеПредложение_ПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	//+++АК
	
	//
	Для Каждого СтрокаТЧ Из Источник.АК_УслугиДополнительные Цикл
		СтрокаТЧ.КоличествоУпаковок = 1;
		СтрокаТЧ.Количество = 1;
	КонецЦикла;	
	
	Если Источник.Статус = ПредопределенноеЗначение("Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует") 
			И НЕ ЗначениеЗаполнено(Источник.АК_НомерСпецификации) Тогда
		
		АК_НомерСпецификации = Источник.ПолучитьНомерСпецификации();	
		
	КонецЕсли;	
	
	//
	Для Каждого СтрокаТЧ Из Источник.АК_ТоварыПредварительно Цикл
		Если НЕ СтрокаТЧ.АК_ПризнакНестандарт И ЗначениеЗаполнено(СтрокаТЧ.АК_НестандартОписание) Тогда
			СтрокаТЧ.АК_НестандартОписание = "";
		КонецЕсли;	
		Если НЕ СтрокаТЧ.АК_ПризнакЭскиз И ЗначениеЗаполнено(СтрокаТЧ.АК_ЭскизФайл) Тогда
			СтрокаТЧ.АК_ЭскизФайл = Неопределено;
		КонецЕсли;	
	КонецЦикла;	
	
	//
	Для Каждого СтрокаТЧ Из Источник.Товары Цикл
		Если НЕ СтрокаТЧ.АК_ПризнакНестандарт И ЗначениеЗаполнено(СтрокаТЧ.АК_НестандартОписание) Тогда
			СтрокаТЧ.АК_НестандартОписание = "";
		КонецЕсли;
		Если НЕ СтрокаТЧ.АК_ПризнакЭскиз И ЗначениеЗаполнено(СтрокаТЧ.АК_ЭскизФайл) Тогда
			СтрокаТЧ.АК_ЭскизФайл = Неопределено;
		КонецЕсли;	
	КонецЦикла;	
	
	//---АК
КонецПроцедуры

Процедура КоммерческоеПредложение_ПриКопировании(Источник, ОбъектКопирования) Экспорт
	Источник.АК_НомерСпецификации = 0;	
КонецПроцедуры

Процедура Номенклатура_ПередЗаписью(Источник, Отказ) Экспорт
	Если СокрЛП(Источник.Артикул) = "" Тогда
		Возврат;
	КонецЕсли;
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	//перед записью если заполнен артикул. проверим наличие такого же в базе
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Артикул = &Артикул
	|	И Номенклатура.Ссылка <> &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Источник.Ссылка);
	Запрос.УстановитьПараметр("Артикул",Источник.Артикул);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТекстИсключения = НСтр("ru='Значение поля ""Артикул"" не уникально'");
		ВызватьИсключение ТекстИсключения; 		
		Отказ = Истина;
	КонецЕсли;
	
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ЗАДАЧИ ПРОЕКТОВ

Процедура ЗадачиПроектов_ПриЗаписи(Источник,Отказ) Экспорт
	Если НЕ Источник.ПометкаУдаления Тогда
		Если Источник.акКодСДР = "" Тогда
			АК_РаботаСПроектами.ЗаполнитьКодыСДРПроектныхЗадач(Источник.Владелец);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

