
//
&НаСервере
Процедура ПередЗаписьюДокументаЗаполнениеСделок(Источник, РежимЗаписи, РежимПроведения, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
	Если Источник.НеИзменятьСделки Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		Для Каждого Элемент Из Источник.Товары Цикл
			
			Если Элемент.АналитикаРасходов <> Элемент.АК_ЗаказКлиента.Сделка Тогда
				
				Элемент.АналитикаРасходов = Элемент.АК_ЗаказКлиента.Сделка;
				
			КонецЕсли; 
		
		КонецЦикла; 
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		Если ЛОжь Тогда
			Источник = Документы.ЗаказПоставщику.СоздатьДокумент();
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказПоставщикуТовары.АналитикаРасходов КАК Сделка
			|ИЗ
			|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
			|ГДЕ
			|	ЗаказПоставщикуТовары.Ссылка = &Заказ";
			
		Запрос.УстановитьПараметр("Заказ", Источник.ЗаказПоставщику);
		
		Результат = Запрос.Выполнить();
		
		Источник.АК_Сделки.Загрузить(Результат.Выгрузить());
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Заказ
			|ПОМЕСТИТЬ ОплачиваемыеДокументы
			|ИЗ
			|	&РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказПоставщикуТовары.АК_Сделка КАК Сделка
			|ПОМЕСТИТЬ Сделки
			|ИЗ
			|	ОплачиваемыеДокументы КАК ОплачиваемыеДокументы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
			|		ПО ОплачиваемыеДокументы.Заказ = ЗаказПоставщикуТовары.Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ПоступлениеТоваровУслугАК_Сделки.Сделка
			|ИЗ
			|	ОплачиваемыеДокументы КАК ОплачиваемыеДокументы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.АК_Сделки КАК ПоступлениеТоваровУслугАК_Сделки
			|		ПО ОплачиваемыеДокументы.Заказ = ПоступлениеТоваровУслугАК_Сделки.Ссылка
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РеализацияТоваровУслуг.Сделка
			|ИЗ
			|	ОплачиваемыеДокументы КАК ОплачиваемыеДокументы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|		ПО ОплачиваемыеДокументы.Заказ = РеализацияТоваровУслуг.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Сделки.Сделка
			|ИЗ
			|	Сделки КАК Сделки";
			
		Запрос.УстановитьПараметр("РасшифровкаПлатежа", Источник.РасшифровкаПлатежа);
		
		Результат = Запрос.Выполнить();
		
		Источник.АК_Сделки.Загрузить(Результат.Выгрузить());
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.АК_ЗаказНаМонтаж") Тогда
		
		Для Каждого Элемент Из Источник.Товары Цикл
			
			Если Элемент.Сделка <> Элемент.Заказ.Сделка Тогда
				
				Элемент.Сделка = Элемент.Заказ.Сделка;
				
			КонецЕсли; 
		
		КонецЦикла; 
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.АК_ЗаказНаДоставку") Тогда
		
		
		
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		
		// изменим сделку в поступлениях
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаказПоставщикуТовары.Ссылка КАК ЗаказПоставщику
			|ИЗ
			|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
			|ГДЕ
			|	ЗаказПоставщикуТовары.АК_ЗаказКлиента = &Документ
			|	И ЗаказПоставщикуТовары.АК_Сделка <> &Сделка
			|	И ЗаказПоставщикуТовары.АК_ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
			|
			|ДЛЯ ИЗМЕНЕНИЯ";
		
		Запрос.УстановитьПараметр("Документ", Источник.Ссылка);
		Запрос.УстановитьПараметр("Сделка", Источник.Сделка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаказПоставщику = Выборка.ЗаказПоставщику.ПолучитьОбъект();
			Для каждого Элемент Из ЗаказПоставщику.Товары Цикл
				Элемент.АК_Сделка = Источник.Сделка;
			КонецЦикла;
			ЗаказПоставщику.НеИзменятьСделки = Истина;
			ЗаказПоставщику.Записать();
		
		КонецЦикла;
		
		// изменим сделку в реализация
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РеализацияТоваровУслуг.Ссылка КАК ЗаказПоставщику
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|ГДЕ
			|	РеализацияТоваровУслуг.ЗаказКлиента = &Документ
			|	И РеализацияТоваровУслуг.Сделка <> &Сделка
			|	И РеализацияТоваровУслуг.ЗаказКлиента <> ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка)
			|
			|ДЛЯ ИЗМЕНЕНИЯ";
		
		Запрос.УстановитьПараметр("Документ", Источник.Ссылка);
		Запрос.УстановитьПараметр("Сделка", Источник.Сделка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Реализация = Выборка.ЗаказПоставщику.ПолучитьОбъект();
			Реализация.Сделка = Источник.Сделка;
			Реализация.НеИзменятьСделки = Истина;
			Реализация.Записать();
		
		КонецЦикла;
		
	КонецЕсли; 

КонецПроцедуры // ПередЗаписьюДокументаЗаполнениеСделок()

//
&НаСервере
Процедура ПолучитьОсновнойАдресПартнера(Партнер, ОсновнойАдрес) Экспорт
	
	ОсновнойАдрес = "";
	СтруктураПоиса = Новый Структура("Основной", Истина);
	ОсновныеПункты = Партнер.АК_ПунктыНазначения.НайтиСтроки(СтруктураПоиса);
	Если ОсновныеПункты.Количество() > 0 Тогда
		
		ОсновнойАдрес = ОсновныеПункты[0].ПунктНазначения;
		
	ИначеЕсли Партнер.АК_ПунктыНазначения.Количество() > 0 Тогда
		
		ОсновнойАдрес = Партнер.АК_ПунктыНазначения[0].ПунктНазначения;
		
	КонецЕсли;
	
КонецПроцедуры

// 
&НаСервере
Функция ПолучитьФайлЛоготипа(Организация, АльбомнаяОриентация = Истина) Экспорт
	
	Логотип = Новый Картинка;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Файлы.Ссылка КАК Файл,
		|	ВерсииФайлов.Ссылка КАК Версия
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ПО Файлы.ТекущаяВерсия = ВерсииФайлов.Ссылка
		|ГДЕ
		|	Файлы.Наименование = &Наименование
		|	И Файлы.ВладелецФайла = &Организация";
		
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Наименование", ?(Не АльбомнаяОриентация, "Логотип", "ЛоготипЛ"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	//Сообщить(Выборка.Количество());
	
	Если Выборка.Следующий() Тогда
		
		Данные = Выборка.Версия.ФайлХранилище.Получить();
		
		//АдресФайла = РаботаСФайлами.ПолучитьДанныеФайлаДляОткрытия(Выборка.Файл);
		//Сообщить(ТипЗнч(АдресФайла.НавигационнаяСсылкаТекущейВерсии));
		//Сообщить(АдресФайла.НавигационнаяСсылкаТекущейВерсии);
		//Файл = ПолучитьИзВременногоХранилища(АдресФайла.НавигационнаяСсылкаТекущейВерсии);
		
		Логотип = Новый Картинка(Данные, Истина);
		
	КонецЕсли;
	
	Возврат Логотип;
	
КонецФункции

 //
&НаСервере
Функция ПолучитьЗначениеРеквизита(Объект, ИмяРеквизита) Экспорт
	
	Результат = Неопределено;
	
	Попытка
		Результат = Объект[ИмяРеквизита];
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции	

//=============================================================================
//Процедуры ОбработкаТабличнойЧастиТоварыКлиентСервер


//=============================================================================

//+++АК

// Рассчитывает итоговые показатели документа КоммерческоеПредложениеКлиенту.
//
// Параметры:
// Объект
// Форма
//
Процедура ТоварыПредварительноРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, Форма) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Активность", Истина);

	НайденныеСтроки = Объект.АК_ТоварыПредварительно.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		НоваяСумма             = 0;
		НоваяСуммаНДС          = 0;
		НоваяСуммаАвтоСкидки   = 0;
		НоваяСуммаРучнойСкидки = 0;
		НоваяСуммаСкидки       = 0;

		Для Каждого ТекЭлемент Из НайденныеСтроки Цикл
			
			НоваяСумма             = НоваяСумма + ТекЭлемент.Сумма;
			НоваяСуммаНДС          = НоваяСуммаНДС + ТекЭлемент.СуммаНДС;
			НоваяСуммаАвтоСкидки   = НоваяСуммаАвтоСкидки + ТекЭлемент.СуммаАвтоматическойСкидки;
			НоваяСуммаРучнойСкидки = НоваяСуммаРучнойСкидки + ТекЭлемент.СуммаРучнойСкидки;
			
		КонецЦикла;

		Форма.ПредварительноСуммаАктивныхСтрок      = НоваяСумма;
		Форма.ПредварительноСуммаНДСАктивныхСтрок   = НоваяСуммаНДС;
		Форма.ПредварительноКоличествоАктивныхСтрок = НайденныеСтроки.Количество();
		
		Форма.СуммаАвтоСкидки         = НоваяСуммаАвтоСкидки;
		Форма.СуммаРучнойСкидки       = НоваяСуммаРучнойСкидки;
		Форма.СуммаСкидки             = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
		Если Объект.ЦенаВключаетНДС Тогда
			Форма.ПредварительноСуммаАктивныхСтрокСНДС   = НоваяСумма;
		Иначе
			Форма.ПредварительноСуммаАктивныхСтрокСНДС   = НоваяСумма+НоваяСуммаНДС;
		КонецЕсли;
		
		Форма.СуммаАвтоСкидки         = НоваяСуммаАвтоСкидки;
		Форма.СуммаРучнойСкидки       = НоваяСуммаРучнойСкидки;
		Форма.СуммаСкидки             = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
		
		Если Форма.ПредварительноСуммаАктивныхСтрок > 0 Тогда
			
			Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (Форма.ПредварительноСуммаАктивныхСтрок + Форма.СуммаСкидки);
			Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (Форма.ПредварительноСуммаАктивныхСтрок + Форма.СуммаСкидки);
			Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
			
		ИначеЕсли Форма.СуммаСкидки > 0 Тогда
			
			Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
			Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
			Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
			
		Иначе
			
			Форма.ПроцентАвтоСкидки   = 0;
			Форма.ПроцентРучнойСкидки = 0;
			Форма.ПроцентСкидки       = 0;
			
		КонецЕсли;
		
		Если Не Объект.ЦенаВключаетНДС Тогда
			Форма.ПредварительноСуммаАктивныхСтрок = Форма.ПредварительноСуммаАктивныхСтрок + Форма.ПредварительноСуммаНДСАктивныхСтрок;
		КонецЕсли;
		
	Иначе
		
		Форма.ПредварительноСуммаАктивныхСтрок      = 0;
		Форма.ПредварительноСуммаАктивныхСтрокСНДС	= 0;
		Форма.ПредварительноСуммаНДСАктивныхСтрок   = 0;
		Форма.ПредварительноКоличествоАктивныхСтрок = 0;
		Форма.СуммаАвтоСкидки         = 0;
		Форма.СуммаРучнойСкидки       = 0;
		Форма.СуммаСкидки             = 0;
		Форма.ПроцентАвтоСкидки       = 0;
		Форма.ПроцентРучнойСкидки     = 0;
		Форма.ПроцентСкидки           = 0;

	КонецЕсли;
	
	АК_ОбщегоНазначения.ОбновитьСуммыПодвала(Объект.АК_ТоварыПредварительно, Объект.ЦенаВключаетНДС, Форма.ПредварительноСуммаВсего);
	
	Если Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС") Тогда
		Форма.Элементы.ПредварительноГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.ПредварительноСтраницаБезНДС;
		Форма.Элементы.ПредварительноГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.ПредварительноСтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ПредварительноГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.ПредварительноСтраницаСНДС;
		Форма.Элементы.ПредварительноГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.ПредварительноСтраницаВсегоСНДС;
	КонецЕсли;

КонецПроцедуры // РассчитатьИтоговыеПоказателиКоммерческогоПредложения()


// Рассчитывает итоговые показатели документа КоммерческоеПредложениеКлиенту.
//
// Параметры:
// Объект
// Форма
//
Процедура УслугиДополнительныеРассчитатьИтоговыеПоказателиКоммерческогоПредложения(Объект, Форма) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Активность", Истина);

	НайденныеСтроки = Объект.АК_УслугиДополнительные.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		НоваяСумма             = 0;
		НоваяСуммаНДС          = 0;
		НоваяСуммаАвтоСкидки   = 0;
		НоваяСуммаРучнойСкидки = 0;
		НоваяСуммаСкидки       = 0;

		Для Каждого ТекЭлемент Из НайденныеСтроки Цикл
			
			НоваяСумма             = НоваяСумма + ТекЭлемент.Сумма;
			НоваяСуммаНДС          = НоваяСуммаНДС + ТекЭлемент.СуммаНДС;
			НоваяСуммаАвтоСкидки   = НоваяСуммаАвтоСкидки + ТекЭлемент.СуммаАвтоматическойСкидки;
			НоваяСуммаРучнойСкидки = НоваяСуммаРучнойСкидки + ТекЭлемент.СуммаРучнойСкидки;
			
		КонецЦикла;
        
		Форма.УслугиСуммаАктивныхСтрок      = НоваяСумма;
		Форма.УслугиСуммаНДСАктивныхСтрок   = НоваяСуммаНДС;
		Форма.УслугиКоличествоАктивныхСтрок = НайденныеСтроки.Количество();
		
		// АК ИГОРЬ 08 02 2013
		Форма.ДополнительныеУслугиСуммаВсего = НоваяСумма;
		Форма.УслугиКоличествоАктивныхСтрок = НоваяСуммаНДС;
		// АК ИГОРЬ 08 02 2013
		
		Если Не Объект.ЦенаВключаетНДС Тогда
			Форма.УслугиСуммаАктивныхСтрок = Форма.УслугиСуммаАктивныхСтрок + Форма.УслугиСуммаНДСАктивныхСтрок;
		КонецЕсли;
		
	Иначе
		
		Форма.УслугиСуммаАктивныхСтрок      = 0;
		Форма.УслугиСуммаНДСАктивныхСтрок   = 0;
		Форма.УслугиКоличествоАктивныхСтрок = 0;
		
		// АК ИГОРЬ 08 02 2013
		Форма.ДополнительныеУслугиСуммаВсего = 0;
		Форма.УслугиКоличествоАктивныхСтрок = 0;
		// АК ИГОРЬ 08 02 2013
		
		
	КонецЕсли;
	
	// АК ИГОРЬ 08 02 2013
	Форма.ДополнительныеУслугиСуммаНДСАктивныхСтрок = Объект.АК_УслугиДополнительные.Итог("Сумма");;
	// АК ИГОРЬ 08 02 2013
	
	
	
	АК_ОбщегоНазначения.ОбновитьСуммыПодвала(Объект.АК_УслугиДополнительные, Объект.ЦенаВключаетНДС, Форма.УслугиСуммаВсего);
	
КонецПроцедуры // РассчитатьИтоговыеПоказателиКоммерческогоПредложения()

// Строковое описание разности дат в днях с учетом склонений
Функция РазностьДатВДнях(Дата1, Дата2) Экспорт
	
	ИспользоватьДатуИВремяВСрокахЗадач = Истина;
	
		ЧислоЧасов = Окр((Дата1 - Дата2) / (60*60));
		ЧислоДней = Окр(ЧислоЧасов / 24);
		ЧислоЧасов = ЧислоЧасов - ЧислоДней * 24;
		
	Если ЧислоЧасов < 0 Тогда
		ЧислоДней = ЧислоДней - 1;
		ЧислоЧасов = ЧислоЧасов + 24;
	КонецЕсли;
	ПодписьДней = ПолучитьПодписьДней(ЧислоДней);
	ПодписьЧасов = ПолучитьПодписьЧасов(ЧислоЧасов);
	
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Если ЧислоДней > 0 И ЧислоЧасов > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 %2 и %3 %4",
				Строка(ЧислоДней),
				ПодписьДней,
				Строка(ЧислоЧасов),
				ПодписьЧасов);
		ИначеЕсли ЧислоДней > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 %2",
				Строка(ЧислоДней),
				ПодписьДней);
		ИначеЕсли ЧислоЧасов > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 %2",
				Строка(ЧислоЧасов),
				ПодписьЧасов);
		Иначе
			Возврат НСтр("ru = 'Менее 1 часа'");
		КонецЕсли;
	Иначе
		Если ЧислоДней > 0 Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1 %2",
				Строка(ЧислоДней),
				ПодписьДней);
		Иначе
			Возврат НСтр("ru = 'Менее 1 дня'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Подпиь к количеству дней по склонениям
Функция ПолучитьПодписьДней(ЧислоДней) Экспорт
	
	Если ЧислоДней > 10 И ЧислоДней < 20 Тогда
		Подпись = НСтр("ru = 'дней'");
	Иначе
		ПоследниеДвеЦифры = ЧислоДней - Цел(ЧислоДней / 100) * 100;
		ПоследняяЦифра = ЧислоДней - Цел(ЧислоДней / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'дней'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'дней'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'день'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'дня'");
			Иначе
				Подпись = НСтр("ru = 'дней'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпиь к количеству рабочих дней по склонениям
Функция ПолучитьПодписьРабочихДней(ЧислоДней) Экспорт
	
	Если ЧислоДней > 10 И ЧислоДней < 20 Тогда
		Подпись = НСтр("ru = 'рабочих дней'");
	Иначе
		ПоследниеДвеЦифры = ЧислоДней - Цел(ЧислоДней / 100) * 100;
		ПоследняяЦифра = ЧислоДней - Цел(ЧислоДней / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'рабочих дней'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'рабочих дней'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'рабочий день'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'рабочих дня'");
			Иначе
				Подпись = НСтр("ru = 'рабочих дней'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпиь к количеству часов по склонениям
Функция ПолучитьПодписьЧасов(ЧислоЧасов) Экспорт
	
	Если ЧислоЧасов > 10 И ЧислоЧасов < 20 Тогда
		Подпись = НСтр("ru = 'часов'");
	Иначе
		Срок = ЧислоЧасов - Цел(ЧислоЧасов / 10) * 10;
		Если Срок = 0 Тогда
			Подпись = НСтр("ru = 'часов'");
		ИначеЕсли Срок = 1 Тогда
			Подпись = Нстр("ru = 'час'");
		ИначеЕсли Срок < 5 Тогда
			Подпись = НСтр("ru = 'часа'");
		Иначе
			Подпись = НСтр("ru = 'часов'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпиь к количеству минут по склонениям
Функция ПолучитьПодписьМинут(ЧислоМинут) Экспорт
	
	Если ЧислоМинут > 10 И ЧислоМинут < 20 Тогда
		Подпись = НСтр("ru = 'минут'");
	Иначе
		Срок = ЧислоМинут - Цел(ЧислоМинут / 10) * 10;
		Если Срок = 0 Тогда
			Подпись = НСтр("ru = 'минут'");
		ИначеЕсли Срок = 1 Тогда
			Подпись = НСтр("ru = 'минута'");
		ИначеЕсли Срок < 5 Тогда
			Подпись = НСтр("ru = 'минуты'");
		Иначе
			Подпись = НСтр("ru = 'минут'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпиь к количеству месяцев по склонениям
Функция ПолучитьПодписьМесяцев(ЧислоМесяцев) Экспорт
	
	Если ЧислоМесяцев > 10 И ЧислоМесяцев < 20 Тогда
		Подпись = НСтр("ru = 'месяцев'");
	Иначе
		Срок = ЧислоМесяцев - Цел(ЧислоМесяцев / 10) * 10;
		Если Срок = 0 Тогда
			Подпись = НСтр("ru = 'месяцев'");
		ИначеЕсли Срок = 1 Тогда
			Подпись = НСтр("ru = 'месяц'");
		ИначеЕсли Срок < 5 Тогда
			Подпись = НСтр("ru = 'месяца'");
		Иначе
			Подпись = НСтр("ru = 'месяцев'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпиь к количеству недель по склонениям
Функция ПолучитьПодписьНедель(ЧислоНедель) Экспорт
	
	Если ЧислоНедель > 10 И ЧислоНедель < 20 Тогда
		Подпись = НСтр("ru = 'недель'");
	Иначе
		Срок = ЧислоНедель - Цел(ЧислоНедель / 10) * 10;
		Если Срок = 0 Тогда
			Подпись = НСтр("ru = 'недель'");
		ИначеЕсли Срок = 1 Тогда
			Подпись = НСтр("ru = 'неделя'");
		ИначеЕсли Срок < 5 Тогда
			Подпись = НСтр("ru = 'недели'");
		Иначе
			Подпись = НСтр("ru = 'недель'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Рассчитывает сумму документа и помещает рассчитанное значение в реквизит формы СуммаВсего
//
// Параметры:
// Товары          - тч документа для подсчета суммы документа
// ЦенаВключаетНДС - Признак включения НДС в цену документа
// СуммаВсего      - Реквизит формы документа, в который будет помещена сумма
//
Процедура ОбновитьСуммыПодвала(Знач Товары, Знач ЦенаВключаетНДС, СуммаВсего) Экспорт

	СуммаДокумента = ПолучитьСуммуДокумента(Товары, ЦенаВключаетНДС);

	Если СуммаДокумента <> СуммаВсего Тогда
		СуммаВсего = СуммаДокумента;
	КонецЕсли;

КонецПроцедуры // ОбновитьСуммыПодвала()

// Возвращает сумму документа с учетом НДС
//
// Параметры:
// Товары          - тч документа для подсчета суммы документа
// ЦенаВключаетНДС - Признак включения НДС в цену документа
//
// Возвращаемое значение:
// Число
// Сумма документа с учетом НДС
//
Функция ПолучитьСуммуДокумента(Знач Товары, Знач ЦенаВключаетНДС) Экспорт

	СуммаДокумента = Товары.Итог("Сумма");

	Если Не ЦенаВключаетНДС Тогда
		СуммаДокумента = СуммаДокумента + Товары.Итог("СуммаНДС");
	КонецЕсли;

	Возврат СуммаДокумента;

КонецФункции // ПолучитьСуммуДокумента()

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Форма, ИмяТаблицы, УникальныйИдентификатор, ТолькоДляВыделенныхСтрок, ИмяТаблицыВыделенныхСтрок = Неопределено, ТолькоАктивныеСтроки = Ложь, ИспользоватьОграничения = Истина) Экспорт
	
	СоглашениеСКлиентом = Неопределено;
	Если ОбщегоНазначенияУТ.ЕстьРеквизитОбъекта(Форма.Объект, "Соглашение") Тогда
		СоглашениеСКлиентом = Форма.Объект.Соглашение;
	КонецЕсли;

	ИспользоватьРучныеСкидки                     = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьОграниченияРучныхСкидокВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям");
	
	Если ЗначениеЗаполнено(СоглашениеСКлиентом) Тогда
		ИспользоватьОграниченияПоСоглашениям = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	Иначе
		ИспользоватьОграниченияПоСоглашениям = Ложь;
	КонецЕсли;

	ИспользоватьОграниченияРучныхСкидок = ИспользоватьОграничения И ИспользоватьРучныеСкидки И (ИспользоватьОграниченияРучныхСкидокВПродажах ИЛИ ИспользоватьОграниченияПоСоглашениям);

	Если ИмяТаблицы = "Услуги" Тогда
		ИмяКоличества = "Количество";
	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура",              Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить(ИмяКоличества,               Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	Товары.Колонки.Добавить("Цена",                      Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	Товары.Колонки.Добавить("СуммаАвтоматическойСкидки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	Товары.Колонки.Добавить("СуммаРучнойСкидки",         Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	Если ТолькоДляВыделенныхСтрок Тогда
		
		Для Каждого ТекСтрока Из Форма.Элементы[?(ИмяТаблицыВыделенныхСтрок = Неопределено, ИмяТаблицы, ИмяТаблицыВыделенныхСтрок)].ВыделенныеСтроки Цикл
			
			СтрокаКоллекции = Форма.Объект[ИмяТаблицы].НайтиПоИдентификатору(ТекСтрока);
			
			Если СтрокаКоллекции = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			
		КонецЦикла;
	Иначе
		
		Если Не ТолькоАктивныеСтроки Тогда
			Для Каждого СтрокаТЧ Из Форма.Объект[ИмяТаблицы] Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		Иначе
			НайденныеСтроки =Форма.Объект[ИмяТаблицы].НайтиСтроки(Новый Структура("Активность", Истина));
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьОграниченияРучныхСкидок Тогда
		
		ОграниченияРучныхСкидок = НастройкиПродажДляПользователейСервер.ОграниченияСкидокНаценок(СоглашениеСКлиентом, Пользователи.ТекущийПользователь());
		ЦеновыеГруппы = ОграниченияРучныхСкидок.ВыгрузитьКолонку("ЦеноваяГруппа");
		
	Иначе
		
		ОграниченияРучныхСкидок = Новый ТаблицаЗначений;
		ОграниченияРучныхСкидок.Колонки.Добавить("ЦеноваяГруппа", Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
		ОграниченияРучныхСкидок.Колонки.Добавить("МаксимальныйПроцентРучнойСкидки",  Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		ОграниченияРучныхСкидок.Колонки.Добавить("МаксимальныйПроцентРучнойНаценки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		
		Ограничение = ОграниченияРучныхСкидок.Добавить();
		Ограничение.ЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка();
		Ограничение.МаксимальныйПроцентРучнойСкидки  = 999.99;
		Ограничение.МаксимальныйПроцентРучнойНаценки = 999.99;
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары." + ИмяКоличества + " " + "КАК КоличествоУпаковок,
	|	Товары.Цена КАК ЦенаЗаУпаковку,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.ЦенаЗаУпаковку КАК ЦенаЗаУпаковку,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	ВременнаяТаблица КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = Товары.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОграниченияРучныхСкидок.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки КАК МаксимальныйПроцентРучнойНаценки
	|ПОМЕСТИТЬ ОграниченияРучныхСкидок
	|ИЗ
	|	&ОграниченияРучныхСкидок КАК ОграниченияРучныхСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Т.СуммаБезСкидки КАК СуммаБезСкидки,
	|	Т.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Т.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки КАК МаксимальныйПроцентРучнойНаценки,
	|	ВЫРАЗИТЬ(ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки / 100 * Т.СуммаБезСкидки КАК ЧИСЛО(15, 2)) КАК МаксимальнаяСуммаРучнойСкидки,
	|	ВЫРАЗИТЬ(ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки / 100 * Т.СуммаБезСкидки КАК ЧИСЛО(15, 2)) КАК МаксимальнаяСуммаРучнойНаценки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа В (&ЦеновыеГруппы)
	|				ТОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|		КОНЕЦ КАК ЦеноваяГруппа,
	|		СУММА(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.КоличествоУпаковок * ВременнаяТаблицаТовары.ЦенаЗаУпаковку КАК ЧИСЛО(15, 2))) КАК СуммаБезСкидки,
	|		СУММА(ВременнаяТаблицаТовары.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
	|		СУММА(ВременнаяТаблицаТовары.СуммаРучнойСкидки) КАК СуммаРучнойСкидки
	|	ИЗ
	|		ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР
	|			КОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа В (&ЦеновыеГруппы)
	|				ТОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|		КОНЕЦ) КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОграниченияРучныхСкидок КАК ОграниченияРучныхСкидок
	|		ПО (ОграниченияРучныхСкидок.ЦеноваяГруппа = Т.ЦеноваяГруппа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.ЦеноваяГруппа КАК ЦеноваяГруппа
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("Товары", Товары);
	Запрос.Параметры.Вставить("ОграниченияРучныхСкидок", ОграниченияРучныхСкидок);
	Запрос.Параметры.Вставить("ЦеновыеГруппы", ЦеновыеГруппы);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Ограничения = Результат[3].Выгрузить();
	Ограничения.Индексы.Добавить("ЦеноваяГруппа");
	
	Товары = Результат[4].Выгрузить();
	Товары.Индексы.Добавить("Номенклатура");
	
	Возврат ПоместитьВоВременноеХранилище(Новый Структура("Ограничения, Товары, ИспользоватьОграниченияРучныхСкидок", Ограничения, Товары, ИспользоватьОграниченияРучныхСкидок), УникальныйИдентификатор);
	
КонецФункции


&НаКлиенте
Функция ПечататьВсеТовары()Экспорт 
	Возврат  НЕ(Вопрос("Печать все товары",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет)
КонецФункции

Функция УбратьНоменклатуру(ДанныеДляПечати) Экспорт
	Возврат ДанныеДляПечати;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
//
// РАБОТА С ПРАЙСОМ, СТАРЫЕ ПОЗИЦИИ
//

&НаСервере
Функция ПолучитьГруппуСтарое() Экспорт
	СсылкаНаГуппу = Новый УникальныйИдентификатор("096c5a4c-b425-11e3-830a-ac162d8cd073");
	Результат = Справочники.Номенклатура.ПолучитьСсылку(СсылкаНаГуппу);
	Если СокрЛП(Результат.Код)="" Тогда
		НовГруппа = Справочники.Номенклатура.СоздатьГруппу();
		НовГруппа.Наименование = "СТАРОЕ";
		НовГруппа.УстановитьСсылкуНового(Результат);
		НовГруппа.Записать();
	КонецЕсли;
	Возврат Результат;
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Анализ строк

&НаСервере 
Функция ПолучитьГабаритыИзСтроки(АнализируемыйТекст) Экспорт
	Попытка
		АнализируемыйТекст = Строка(АнализируемыйТекст);
	Исключение
		Возврат "";
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Истина);

	RegExp = Новый COMОбъект("VBScript.RegExp");    // создаем объект для работы с регулярными выражениями

	
	//Заполняем данные
	RegExp.MultiLine = 	Ложь;		// истина — текст многострочный, ложь — одна строка
	RegExp.Global = 	Ложь;		// истина — поиск по всей строке, ложь — до первого совпадения
	RegExp.IgnoreCase = Истина;		// истина — игнорировать регистр строки при поиске
	RegExp.Pattern = "(\d+\s*\D\s*\d+\s*\D\s*\d+)";		// шаблон (регулярное выражение)	
	
	РезультатАнализаСтроки = RegExp.Execute(АнализируемыйТекст);
	Если РезультатАнализаСтроки.Count>0 Тогда
		Габариты = РезультатАнализаСтроки.Item(0).Value;
	Иначе
		Габариты="";
	КонецЕсли;	
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Габариты;
КонецФункции

