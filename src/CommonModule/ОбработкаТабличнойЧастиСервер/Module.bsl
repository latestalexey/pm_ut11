////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Обработка строки табличной части - вызывается из клиентского общего модуля при необходимости выполнения на сервере.
//
// СтруктураДействий - Структура. Возможно передавать следующие поля:
//  "ПроверитьХарактеристикуПоВладельцу", Характеристика.
//  "ПроверитьЗаполнитьУпаковкуПоВладельцу"      , Упаковка.
//  "ЗаполнитьОбъемВесУпаковки"	        , Упаковка.
//  "ПересчитатьКоличествоЕдиниц".
//  "ПересчитатьКоличествоЕдиницСуффикс". Суффикс
//  "ПересчитатьКоличествоУпаковок".,
//  "ПересчитатьКоличествоУпаковокСуффикс". Суффикс,
//  "ЗаполнитьЦенуПродажи"              , СтруктураПараметровДействия.
//  "ПересчитатьСумму".
//  "ПересчитатьСуммуСУчетомРучнойСкидки"     , СтруктураПараметровДействия.
//  "ПересчитатьСуммуСУчетомАвтоматическойСкидки"     , СтруктураПараметровДействия.
//  "ПересчитатьЦенуПоСуммеВСтрокеТЧ",
//  "ПересчитатьЦенуЗаУпаковку".
//  "ПересчитатьСуммуНДС".
//  "ЗаполнитьСтавкуНДС".
//  "ОбработатьШтрихкоды".
//  "ЗаполнитьНоменклатуруПоНоменклатуреПоставщика".
//  "ЗаполнитьУсловияПродажВСтрокеТЧКлиент"
//  "ЗаполнитьУсловияЗакупокВСтрокеТЧКлиент"
//  "ЗаполнитьФлагИзлишекПорча"
//  "ЗаполнитьФлагРасхождение"
//  "ОчиститьСуммуВзаиморасчетов"
//	"ЗаполнитьФлагиНедоборНеотгружаемые"
//  "ПересчитатьКоличествоНеОтгружать"
//
Процедура ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	ПроверитьНоменклатуруНаСтарую(                         ТекущаяСтрока, СтруктураДействий);//Чечин Петр
	ПроверитьАссортиментСтроки(                            ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьНоменклатуруПоНоменклатуреПоставщикаВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьНоменклатуруПоставщикаПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьСопоставленнуюНоменклатуруПоставщикаВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(    ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки( ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоНеОтгружатьСтрокеТЧ(              ТекущаяСтрока, СтруктураДействий);
	ПересчитатьКоличествоУпаковокПоФактуВСтрокеТЧ(         ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения); 
	ПересчитатьКоличествоЕдиницВСтрокеТЧ(                  ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ(           ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоУпаковокВСтрокеТЧ(                ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(         ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьОбъемВесПоУпаковкеВСтрокеТЧ(                  ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ(                    ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьВидЦеныВСтрокеТЧ(                             ТекущаяСтрока, СтруктураДействий); 
	ЗаполнитьЦенуПродажиВСтрокеТЧ(                         ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПродажиПоАссортиментуВСтрокеТЧ(           ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуЗакупкиВСтрокеТЧ(                         ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьУсловияПродажВСтрокеТЧ(                       ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеТЧ(                           ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ(             ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуРучнойСкидкиВСтрокеТЧ(                 ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ(               ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуВСтрокеТЧ(                             ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧ(        ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧ(        ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуПоСуммеВСтрокеТЧ(                       ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения); 
	ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ(         ТекущаяСтрока, СтруктураДействий);
	ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ(  ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ(          ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДСВСтрокеТЧ(                          ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСНДСВСтрокеТЧ(                         ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуПродажиВСтрокеТЧ(                      ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуПродажиНДСВСтрокеТЧ(                   ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьРеквизитыПоНоменклатуреВСтрокеТЧ(             ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьСтатьюАналитикуРасходов(                      ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОчиститьСуммуВознагражденияВСтрокеТЧ(                  ТекущаяСтрока, СтруктураДействий);
	УстановитьАктивностьСтроки(                            ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьЗаполнитьСкладВСтрокеТЧ(                      ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьПолучитьВариантКомплектации(                  ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьФлагиРасхождениеИИзлишекПорча(                ТекущаяСтрока, СтруктураДействий);
	ОчиститьСуммуВзаиморасчетовВСтрокеТЧ(                  ТекущаяСтрока, СтруктураДействий);
	ОчиститьАвтоматическуюСкидкуВСтрокеТЧ(                 ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьСодержаниеУслуги(                             ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию(           ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьФлагиНедоборНеотгружаемые(                    ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПартнера(                                     ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьУчетноеКоличествоНоменклатуры(                ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно(ТекущаяСтрока, СтруктураДействий);
	ПроверитьЗаполнитьВариантОбеспечения(                  ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПризнакБезВозвратнойТары(                     ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПризнакОтмененоБезВозвратнойТары(             ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПризнакАктивностьБезВозвратнойТары(           ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьДубликатыЗависимыхРеквизитов(                 ТекущаяСтрока, СтруктураДействий);
	
КонецПроцедуры

Процедура ОбработатьТЧ(ТЧ,СтруктураДействий,КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	Для Каждого СтрТабл из ТЧ Цикл
		ОбработатьСтрокуТЧ(СтрТабл, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Процедуры пересчета и заполнения сервер.

//Чечин Петр.
//очищает номенклатуру в если она входит в группу Старое
Процедура ПроверитьНоменклатуруНаСтарую(ТекущаяСтрока, СтруктураДействий) 
	
	Если СтруктураДействий.Свойство("ПроверитьНоменклатуруНаСтарую") Тогда
		ГруппаСтарое = АК_ОбщегоНазначения.ПолучитьГруппуСтарое();
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Если ТекущаяСтрока.Номенклатура.ПринадлежитЭлементу(ГруппаСтарое) Тогда
				Попытка
					НомСтроки = "Строка № " + Строка(ТекущаяСтрока.НомерСтроки);
				Исключение
					НомСтроки = "";
				КонецПопытки;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НомСтроки+" Выбранная позиция "+ТекущаяСтрока.Номенклатура.Наименование+" находится в группе СТАРОЕ, использовать в документе нельзя");
				ТекущаяСтрока.Номенклатура = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПолучитьВариантКомплектации(ТекущаяСтрока, СтруктураДействий)

	Если Не СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда

		СтрутураРезультата = Справочники.ВариантыКомплектацииНоменклатуры.ПроверитьПринадлежностьВариантаКомплектации(
								ТекущаяСтрока.ВариантКомплектации, ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика);
		Если Не СтрутураРезультата.ПринадлежитНоменклатуреХарктеристике Тогда

			ТекущаяСтрока.ВариантКомплектации = СтрутураРезультата.ОсновнойВариантКомплектации;

		КонецЕсли;

	ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) И ТекущаяСтрока.ХарактеристикиИспользуются Тогда 

		ТекущаяСтрока.ВариантКомплектации = Неопределено;

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем Характеристика;
	Перем Упаковка;
	СтруктураПараметровДействия = Неопределено;

	ПроверитьХарактеристикуПоВладельцу = СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу", Характеристика);
	ПроверитьЗаполнитьУпаковкуПоВладельцу       = СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу", Упаковка);

	Если ПроверитьХарактеристикуПоВладельцу 
		Или ПроверитьЗаполнитьУпаковкуПоВладельцу Тогда
		РезультатПроверки = Справочники.Номенклатура.ХарактеристикаИУпаковкаПринаджлежатВладельцу(ТекущаяСтрока.Номенклатура, Характеристика, Упаковка);

		Если ПроверитьХарактеристикуПоВладельцу Тогда
			ТекущаяСтрока.Характеристика             = РезультатПроверки.Характеристика;
			ТекущаяСтрока.ХарактеристикиИспользуются = РезультатПроверки.ХарактеристикиИспользуются;
		КонецЕсли;
		
		Если ПроверитьЗаполнитьУпаковкуПоВладельцу Тогда
			ТекущаяСтрока.Упаковка = РезультатПроверки.Упаковка;
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара")
			И ПроверитьЗаполнитьУпаковкуПоВладельцу
			И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
			И НЕ ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
			
				ТекущаяСтрока.Упаковка = Справочники.УпаковкиНоменклатуры.ИндентичнаяУпаковка(ТекущаяСтрока.НоменклатураИсходногоКачества, 
																										  ТекущаяСтрока.Номенклатура, 
																										  Упаковка);
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара")
			И ЗначениеЗаполнено(Характеристика)
			И Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) 
			И ТекущаяСтрока.Номенклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
			ТекущаяСтрока.Характеристика = Справочники.ХарактеристикиНоменклатуры.ИдентичнаяХарактеристика(
																						ТекущаяСтрока.НоменклатураИсходногоКачества, 
																						ТекущаяСтрока.Номенклатура, 
																						Характеристика);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьКоличествоНеОтгружатьСтрокеТЧ(ТекущаяСтрока, СтруктураДействий);
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		
		Если ТекущаяСтрока.КоличествоУпаковок > ТекущаяСтрока.КоличествоУпаковокВДокументе + ТекущаяСтрока.КоличествоУпаковокНеОтгружать Тогда
			
			ТекущаяСтрока.КоличествоУпаковокНеОтгружать = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокВДокументе;
			
		ИначеЕсли ТекущаяСтрока.КоличествоУпаковок > ТекущаяСтрока.КоличествоУпаковокВДокументе Тогда
			
			Если ТекущаяСтрока.КоличествоУпаковокНеОтгружать > ТекущаяСтрока.КоличествоУпаковок Тогда
				
				ТекущаяСтрока.КоличествоУпаковокНеОтгружать = ТекущаяСтрока.КоличествоУпаковок;
				
			КонецЕсли;
			
		ИначеЕсли ТекущаяСтрока.КоличествоУпаковокНеОтгружать > ТекущаяСтрока.КоличествоУпаковок Тогда
			
			ТекущаяСтрока.КоличествоУпаковокНеОтгружать = ТекущаяСтрока.КоличествоУпаковок;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПересчитатьКоличествоЕдиницВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
		ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок
		   * ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс",Суффикс) Тогда
		Если Суффикс = Неопределено Тогда
			Суффикс = "";
		КонецЕсли;
		
		ТекущаяСтрока["Количество" + Суффикс]  = ТекущаяСтрока["КоличествоУпаковок" + Суффикс]
		   * ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковокВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.Количество
		   / ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Суффикс = Неопределено;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс",Суффикс) Тогда
		Если Суффикс = Неопределено Тогда
			Суффикс = "";
		КонецЕсли;
		ТекущаяСтрока["КоличествоУпаковок" + Суффикс] = ТекущаяСтрока["Количество" + Суффикс] 
		   / ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковокПоФактуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоФакту") Тогда
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковокУчет - ТекущаяСтрока.КоличествоУпаковокФакт;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьОбъемВесПоУпаковкеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемВесУпаковки") Тогда
		ТекущаяСтрока.ОбъемУпаковки = ПолучитьОбъемУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
		ТекущаяСтрока.ВесУпаковки = ПолучитьВесУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;
КонецПроцедуры

Процедура ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем КоличествоЕдиницДоПересчета;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку", КоличествоЕдиницДоПересчета)
	   И КоличествоЕдиницДоПересчета <> 0 Тогда
		ТекущаяСтрока.Цена = ТекущаяСтрока.Цена
		   / КоличествоЕдиницДоПересчета
		   * ТекущаяСтрока.Количество;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтавкуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Перем НалогообложениеНДС;

	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС", НалогообложениеНДС) Тогда
		
		Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
			СтавкаНДС = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(ТекущаяСтрока.Номенклатура).СтавкаНДС;
			
		ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			
		ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			Реквизиты = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(ТекущаяСтрока.Номенклатура);
			Если Реквизиты.ПодакцизныйТовар Тогда
				СтавкаНДС = Реквизиты.СтавкаНДС;
			Иначе
				СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			КонецЕсли;
			
		ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт Тогда
			СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
			
		Иначе
			СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			
		КонецЕсли;
		
		ТекущаяСтрока.СтавкаНДС = СтавкаНДС;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем ЭтоВозвратнаяТара;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары", ЭтоВозвратнаяТара)
		И ЭтоВозвратнаяТара И ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
		ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСумму", ИмяКоличества) Тогда
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества="КоличествоУпаковок"
		КонецЕсли;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьПроцентРучнойСкидки", ИмяКоличества) Тогда
		Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		Если ТекущаяСтрока[ИмяКоличества] * ТекущаяСтрока.Цена <> 0 Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / (ТекущаяСтрока[ИмяКоличества] *ТекущаяСтрока.Цена), 2);
		Иначе
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуРучнойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	ИмяКоличества = Неопределено;
		
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРучнойСкидки", ИмяКоличества) Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок"; 
		КонецЕсли;
			
		ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока[ИмяКоличества] *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИспользоватьАвтоматическиеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьАвтоматическиеСкидки") Тогда
				ИспользоватьАвтоматическиеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИмяКоличества = "КоличествоУпаковок";
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если НЕ СтруктураПараметровДействия.Свойство("ИмяКоличества",ИмяКоличества) Тогда
				ИмяКоличества = "КоличествоУпаковок";
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах = Неопределено Тогда
			КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
		КонецЕсли;
		
		Если ИспользоватьАвтоматическиеСкидки И КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах = Неопределено Тогда
			КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
		КонецЕсли;
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах Тогда
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				
				ТекущаяСтрока.Цена                = 0;
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				
			Иначе
				
				Если ТекущаяСтрока.Цена = 0 Тогда
					Если ЗначениеЗаполнено(ТекущаяСтрока.ПроцентРучнойСкидки) Тогда
						ТекущаяСтрока.СуммаРучнойСкидки = (ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентРучнойСкидки)  / (100 - ТекущаяСтрока.ПроцентРучнойСкидки);
					КонецЕсли;
					ТекущаяСтрока.Цена = Окр((ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаРучнойСкидки) / ТекущаяСтрока[ИмяКоличества], 2);
				Иначе
					СуммаБезСкидки = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
					ТекущаяСтрока.СуммаРучнойСкидки   = СуммаБезСкидки - ТекущаяСтрока.Сумма;
					ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / СуммаБезСкидки, 2);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				ТекущаяСтрока.Цена = 0;
			Иначе
				ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьАвтоматическиеСкидки Тогда
			Если КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
				ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
				ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", СтруктураПараметровДействия) Тогда
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИмяКоличества = "КоличествоУпаковок";
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если НЕ СтруктураПараметровДействия.Свойство("ИмяКоличества",ИмяКоличества) Тогда
				ИмяКоличества = "КоличествоУпаковок";
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках = Неопределено Тогда
			КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
		КонецЕсли;
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках Тогда
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				
				ТекущаяСтрока.Цена                = 0;
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				
			Иначе
				
				Если ТекущаяСтрока.Цена = 0 Тогда
					Если ЗначениеЗаполнено(ТекущаяСтрока.ПроцентРучнойСкидки) Тогда
						ТекущаяСтрока.СуммаРучнойСкидки = (ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентРучнойСкидки)  / (100 - ТекущаяСтрока.ПроцентРучнойСкидки);
					КонецЕсли;
					ТекущаяСтрока.Цена = Окр((ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаРучнойСкидки) / ТекущаяСтрока[ИмяКоличества], 2);
				Иначе
					СуммаБезСкидки = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
					ТекущаяСтрока.СуммаРучнойСкидки   = СуммаБезСкидки - ТекущаяСтрока.Сумма;
					ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / СуммаБезСкидки, 2);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				ТекущаяСтрока.Цена = 0;
			Иначе
				ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьЦенуПоСуммеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСумме",ИмяКоличества) Тогда
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		Если ТекущаяСтрока[ИмяКоличества] = 0 Тогда
			ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		Иначе
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) 
	
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПродажиПоСуммеПродажи") Тогда
		
		ТекущаяСтрока.ЦенаПродажи = ?(ТекущаяСтрока.КоличествоУпаковок <> 0, Окр(ТекущаяСтрока.СуммаПродажи / ТекущаяСтрока.КоличествоУпаковок, 2, 1), 0);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	СтруктураПараметровДействия = Неопределено;
		
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		ИмяКоличества = "КоличествоУпаковок";
		Очищать = Неопределено;
		ПересчитыватьСуммуРучнойСкидки = Неопределено;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			
			СтруктураПараметровДействия.Свойство("Очищать", Очищать);
			СтруктураПараметровДействия.Свойство("ПересчитыватьСуммуРучнойСкидки", ПересчитыватьСуммуРучнойСкидки);
			СтруктураПараметровДействия.Свойство("ИмяКоличества", ИмяКоличества);
			
			Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
				ИмяКоличества = "КоличествоУпаковок";
			КонецЕсли;
			
			Если Очищать = Истина Тогда
				
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				ТекущаяСтрока.ПроцентРучнойСкидки = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПересчитыватьСуммуРучнойСкидки = Ложь Тогда
			
		Иначе
			ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока[ИмяКоличества]*ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		КонецЕсли;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаРучнойСкидки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		СтруктураПараметровДействия.Свойство("Очищать", Очищать);
		
		Если Очищать Тогда
			
			ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
			ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
			
		КонецЕсли;
		
		Скидка = ТекущаяСтрока.СуммаАвтоматическойСкидки;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - Скидка;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[ТекущаяСтрока.СтавкаНДС];
		Иначе
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
			ТекПроцентНДС = Неопределено;
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(ТекущаяСтрока.СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		ТекущаяСтрока.СуммаНДС = Ценообразование.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма, ТекущаяСтрока.СтавкаНДС, СтруктураПараметровДействия.ЦенаВключаетНДС);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуСНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.Сумма + ?(СтруктураПараметровДействия.ЦенаВключаетНДС, 0, ТекущаяСтрока.СуммаНДС);
	
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуПродажиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи", СтруктураПараметровДействия) Тогда
	
		ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.ЦенаПродажи * ТекущаяСтрока.КоличествоУпаковок;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуПродажиНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажиНДС", СтруктураПараметровДействия) Тогда
	
		ТекущийПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
		ТекущаяСтрока.СуммаПродажиНДС = Окр(ТекущаяСтрока.СуммаПродажи * ТекущийПроцентНДС / (1 + ТекущийПроцентНДС), 2, РежимОкругления.Окр15как20);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУсловияПродажВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж", СтруктураПараметровДействия) Тогда

		Запрос = Новый Запрос("
			|
			|
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Валюта    КАК Валюта,
			|	ВложенныйЗапрос.ВидЦены   КАК ВидЦены,
			|	ВЫБОР
			|		КОГДА
			|			ВложенныйЗапрос.Цена > 0
			|		ТОГДА
			|			ВЫБОР
			|				КОГДА
			|					&Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|				ТОГДА
			|					ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиНоменклатуры).Коэффициент
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|			* ВложенныйЗапрос.Цена/ЕстьNULL(ВложенныйЗапрос.КоэффициентУпаковкиСоглашения,1)
			|			* ВЫБОР
			|				КОГДА &Валюта <> ВложенныйЗапрос.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
			|							ТОГДА
			|								(КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность)
			|								/ (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|		КОГДА
			|			ВложенныйЗапрос.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|			И ((ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0) ИЛИ (ЕСТЬNULL(ЦеныАртикул.Цена, 0) > 0) )
			|		ТОГДА
			|			ВЫБОР
			|				КОГДА
			|					&Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|				ТОГДА
			|					ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиНоменклатуры).Коэффициент
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|			* ВЫБОР КОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0 ТОГДА
			|					ЦеныНоменклатурыСрезПоследних.Цена
			|			  ИНАЧЕ
			|			    ЦеныАртикул.Цена
			|			КОНЕЦ/ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент,1)
			|			* ВЫБОР
			|				КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
			|							ТОГДА
			|									(КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность)
			|									/ (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК Цена,
			|	ВложенныйЗапрос.СрокПоставки КАК СрокПоставки
			|ИЗ (
			|ВЫБРАТЬ
			|	СоглашениеШапка.Валюта,
			|ВЫБОР
			|	КОГДА
			|		ЕСТЬNULL(СоглашениеТовары.Цена,0) > 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	КОГДА (СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL)
			|	ТОГДА
			|		СоглашениеТовары.ВидЦены
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
			|		И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА 
			|		СоглашениеЦеновыеГруппы.ВидЦен
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
			|		ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
			|		И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА
			|		СоглашениеШапка.ВидЦен
			|КОНЕЦ КАК ВидЦены,
			|ЕСТЬNULL(СоглашениеТовары.Цена,0) КАК Цена,
			|СоглашениеТовары.Упаковка             КАК Упаковка,
			|СоглашениеТовары.Упаковка.Коэффициент КАК КоэффициентУпаковкиСоглашения,
			|ВЫБОР
			|	КОГДА ЕСТЬNULL(СоглашениеТовары.СрокПоставки, 0) > 0
			|		ТОГДА СоглашениеТовары.СрокПоставки
			|	ИНАЧЕ ВЫБОР
			|			КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.СрокПоставки, 0) > 0
			|				ТОГДА СоглашениеЦеновыеГруппы.СрокПоставки
			|			ИНАЧЕ СоглашениеШапка.СрокПоставки
			|		КОНЕЦ
			|КОНЕЦ КАК СрокПоставки
			|	
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|ПО
			|	СправочникНоменклатура.Ссылка = &Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеТовары.Ссылка
			|	И СоглашениеТовары.Номенклатура = &Номенклатура
			|	И СоглашениеТовары.Характеристика = &Характеристика
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка
			|	И СправочникНоменклатура.Ссылка.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
			|
			|ГДЕ
			|	СоглашениеШапка.Ссылка = &Соглашение
			|) КАК ВложенныйЗапрос
			|
			|// СОЕДИНЕНИЯ С ЦЕНАМИ НОМЕНКЛАТУРАЫ И КУРСАМИ ВАЛЮТ
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), Номенклатура = &Номенклатура И Характеристика = &Характеристика
			|) КАК ЦеныНоменклатурыСрезПоследних
			|ПО
			|	ВложенныйЗапрос.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), Номенклатура = &Номенклатура И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|) КАК ЦеныАртикул
			|ПО
			|	ВложенныйЗапрос.ВидЦены = ЦеныАртикул.ВидЦены

			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыСрезПоследнихВалютаЦены
			|ПО
			|	КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
			|ПО
			|	ИСТИНА
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыСрезПоследнихВалютаСоглашения
			|ПО
			|	КурсыСрезПоследнихВалютаСоглашения.Валюта = ВложенныйЗапрос.Валюта
			|
			|");
		Запрос.УстановитьПараметр("Упаковка"        , ТекущаяСтрока.Упаковка);
    КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги", СтруктураПараметровДействия) Тогда
		    Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Валюта    КАК Валюта,
			|	ВложенныйЗапрос.ВидЦены   КАК ВидЦены,
			|	ВЫБОР
			|		КОГДА
			|			ВложенныйЗапрос.Цена > 0
			|		ТОГДА
			|			ВложенныйЗапрос.Цена
			|			* ВЫБОР
			|				КОГДА &Валюта <> ВложенныйЗапрос.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
			|							ТОГДА
			|								(КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность)
			|								/ (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|		КОГДА
			|			ВложенныйЗапрос.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|			И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
			|		ТОГДА
			|			ЦеныНоменклатурыСрезПоследних.Цена
			|			* ВЫБОР
			|				КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
			|							ТОГДА
			|									(КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность)
			|									/ (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК Цена
			|ИЗ (
			|ВЫБРАТЬ
			|	СоглашениеШапка.Валюта,
			|ВЫБОР
			|	КОГДА
			|		ЕСТЬNULL(СоглашениеТовары.Цена,0) > 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	КОГДА (СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL)
			|	ТОГДА
			|		СоглашениеТовары.ВидЦены
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
			|		И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА 
			|		СоглашениеЦеновыеГруппы.ВидЦен
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
			|		ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
			|		И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА
			|		СоглашениеШапка.ВидЦен
			|КОНЕЦ КАК ВидЦены,
			|ЕСТЬNULL(СоглашениеТовары.Цена,0) КАК Цена
			|	
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|ПО
			|	СправочникНоменклатура.Ссылка = &Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеТовары.Ссылка
			|	И СоглашениеТовары.Номенклатура = &Номенклатура
			|	И СоглашениеТовары.Характеристика = &Характеристика
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка
			|	И СправочникНоменклатура.Ссылка.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
			|
			|ГДЕ
			|	СоглашениеШапка.Ссылка = &Соглашение
			|) КАК ВложенныйЗапрос
			|
			|// СОЕДИНЕНИЯ С ЦЕНАМИ НОМЕНКЛАТУРАЫ И КУРСАМИ ВАЛЮТ
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), Номенклатура = &Номенклатура И Характеристика = &Характеристика
			|) КАК ЦеныНоменклатурыСрезПоследних
			|ПО
			|	ВложенныйЗапрос.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыСрезПоследнихВалютаЦены
			|ПО
			|	КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
			|ПО
			|	ИСТИНА
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыСрезПоследнихВалютаСоглашения
			|ПО
			|	КурсыСрезПоследнихВалютаСоглашения.Валюта = ВложенныйЗапрос.Валюта
			|
			|");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж", СтруктураПараметровДействия) 
	 ИЛИ СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги", СтруктураПараметровДействия) Тогда

		Запрос.УстановитьПараметр("Соглашение"      , СтруктураПараметровДействия.Соглашение);
		Запрос.УстановитьПараметр("Дата"            , СтруктураПараметровДействия.Дата);
		Запрос.УстановитьПараметр("Номенклатура"    , ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика"  , ТекущаяСтрока.Характеристика);
		Запрос.УстановитьПараметр("Валюта"          , СтруктураПараметровДействия.Валюта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			ТекущаяСтрока.Цена = Выборка.Цена;
			
			Если ТекущаяСтрока.Свойство("ВидЦены") Тогда
				
				Если ЗначениеЗаполнено(Выборка.ВидЦены) Тогда
					ТекущаяСтрока.ВидЦены = Выборка.ВидЦены;
				Иначе
					ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущаяСтрока.Свойство("СрокПоставки") Тогда
				
				ТекущаяСтрока.СрокПоставки = Выборка.СрокПоставки;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьВидЦеныВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВидЦены", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.ВидЦены = СтруктураПараметровДействия.ВидЦены;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВидЦеныВСтрокеТЧ()

Процедура ЗаполнитьЦенуПродажиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	Если Не СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	// Получение параметров запроса
	СтруктураПараметровОтбора = Новый Структура("Валюта, Дата, ВидЦены, Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, СтруктураПараметровДействия);
	
	Если (СтруктураПараметровДействия.Свойство("ОбработатьШтрихкоды", ЗначениеСвойства) И ЗначениеСвойства.НеИспользоватьУпаковки)
	Или СтруктураПараметровОтбора.Упаковка = Неопределено Тогда
		СтруктураПараметровОтбора.Вставить("Упаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Цена = ПродажиСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
	Если ЗначениеЗаполнено(Цена) Тогда
		ТекущаяСтрока.Цена = Цена;
	ИначеЕсли ЗначениеЗаполнено(СтруктураПараметровОтбора.ВидЦены) Тогда
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЦенуЗакупкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	Если Не СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	// Получение параметров запроса
	СтруктураПараметровОтбора = Новый Структура("Валюта, Соглашение, Дата, УсловиеЦеныПоставщика, Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, СтруктураПараметровДействия);
	Если Не ЗначениеЗаполнено(СтруктураПараметровОтбора.УсловиеЦеныПоставщика) Тогда
		СтруктураПараметровОтбора.Вставить("УсловиеЦеныПоставщика", Справочники.УсловияЦенПоставщиков.ПустаяСсылка());
	КонецЕсли;
	
	Цена = ЗакупкиСервер.ПолучитьЦенуПоОтбору(СтруктураПараметровОтбора);
	Если ЗначениеЗаполнено(Цена) Тогда
		ТекущаяСтрока.Цена = Цена;
	ИначеЕсли ЗначениеЗаполнено(СтруктураПараметровОтбора.УсловиеЦеныПоставщика) Тогда
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	СтруктураДействийЗаполнения = Новый Структура;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", СтруктураПараметровДействия);
	КонецЕсли;	
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействийЗаполнения.Количество() <> 0 Тогда
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтруктуре(ТекущаяСтрока, СтруктураДействийЗаполнения);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ()

Процедура ЗаполнитьНоменклатуруПоНоменклатуреПоставщикаВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
		|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
		|	НоменклатураПоставщиков.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА НоменклатураПоставщиков.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|				ИЛИ НоменклатураПоставщиков.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА НоменклатураПоставщиков.Номенклатура <> &Номенклатура
		|				И (НЕ НоменклатураПоставщиков.Номенклатура В
		|						(ВЫБРАТЬ
		|							ТоварыДругогоКачества.Номенклатура
		|						ИЗ
		|							РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
		|						ГДЕ
		|							ТоварыДругогоКачества.НоменклатураБрак = &Номенклатура))
		|			ТОГДА ИСТИНА
		|		КОГДА НоменклатураПоставщиков.Характеристика <> &Характеристика
		|			ТОГДА ИСТИНА
		|		КОГДА НоменклатураПоставщиков.Упаковка <> &Упаковка
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеобходимоПерезаполнить
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Ссылка = &НоменклатураПоставщика";
		
		Запрос.УстановитьПараметр("НоменклатураПоставщика", ТекущаяСтрока.НоменклатураПоставщика);
		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.Характеристика);
		Запрос.УстановитьПараметр("Упаковка", ТекущаяСтрока.Упаковка);

		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если ЗначениеЗаполнено(Выборка.Номенклатура) И Выборка.НеобходимоПерезаполнить Тогда
				
				ТекущаяСтрока.Номенклатура   = Выборка.Номенклатура;
				ТекущаяСтрока.Характеристика = Выборка.Характеристика;
				Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
					СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", Выборка.Характеристика);
				КонецЕсли;
				ТекущаяСтрока.ХарактеристикиИспользуются = Выборка.ХарактеристикиИспользуются;
				Если ЗначениеЗаполнено(Выборка.Упаковка) Тогда
					ТекущаяСтрока.Упаковка = Выборка.Упаковка;
					Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
						СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", Выборка.Упаковка);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьНоменклатуруПоставщикаПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем Партнер;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Партнер) Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") Тогда
		
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
			|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
			|	НоменклатураПоставщиков.Упаковка КАК Упаковка
			|ИЗ
			|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
			|ГДЕ
			|	НоменклатураПоставщиков.Ссылка = &НоменклатураПоставщика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 2
			|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика,
			|	ВЫБОР
			|		КОГДА НоменклатураПоставщиков.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЕстьУпаковка
			|ИЗ
			|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
			|ГДЕ
			|	НоменклатураПоставщиков.Владелец = &Партнер
			|	И (НоменклатураПоставщиков.Номенклатура = &Номенклатура
			|			ИЛИ НоменклатураПоставщиков.Номенклатура В
			|				(ВЫБРАТЬ
			|					ТоварыДругогоКачества.Номенклатура
			|				ИЗ
			|					РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
			|				ГДЕ
			|					ТоварыДругогоКачества.НоменклатураБрак = &Номенклатура))
			|	И НоменклатураПоставщиков.Характеристика = &Характеристика
			|	И (НоменклатураПоставщиков.Упаковка = &Упаковка ИЛИ НоменклатураПоставщиков.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка))
			|	И (НЕ НоменклатураПоставщиков.ЭтоГруппа)
			|	И (НЕ НоменклатураПоставщиков.ПометкаУдаления)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЕстьУпаковка УБЫВ");
			
			Запрос.УстановитьПараметр("Партнер",                Партнер);
			Запрос.УстановитьПараметр("НоменклатураПоставщика", ТекущаяСтрока.НоменклатураПоставщика);
			Запрос.УстановитьПараметр("Номенклатура",           ТекущаяСтрока.Номенклатура);
			Запрос.УстановитьПараметр("Характеристика",         ТекущаяСтрока.Характеристика);
			Запрос.УстановитьПараметр("Упаковка",               ТекущаяСтрока.Упаковка);
			
			РезультатЗапроса = Запрос.ВыполнитьПакет();
			
			Выборка1 = РезультатЗапроса[0].Выбрать();
			Выборка2 = РезультатЗапроса[1].Выбрать();
			
			// Определение наличии упаковки в первой записи выборки 2
			// 		если выборка не сработала, присваиваем значение "Ложь"
			ЕстьУпаковка1 = (Выборка2.Следующий() И Выборка2.ЕстьУпаковка = 1);
			
			ПерезаполнятьНоменклатуруПоставщика = Ложь;
			
			Если ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураПоставщика) Тогда
				
				Если Выборка1.Следующий() Тогда
					
					Если ((Выборка1.Номенклатура <> ТекущаяСтрока.Номенклатура И ЗначениеЗаполнено(Выборка1.Номенклатура)) Или
						(Выборка1.Характеристика <> ТекущаяСтрока.Характеристика И ЗначениеЗаполнено(Выборка1.Характеристика)) Или
						(Выборка1.Упаковка <> ТекущаяСтрока.Упаковка И (ЕстьУпаковка1 ИЛИ ЗначениеЗаполнено(Выборка1.Упаковка)))) Тогда
						
						ПерезаполнятьНоменклатуруПоставщика = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				ПерезаполнятьНоменклатуруПоставщика = Истина;
			КонецЕсли;
			
			Если ПерезаполнятьНоменклатуруПоставщика Тогда
				
				Если Выборка2.Количество() = 1 Тогда
					
					ТекущаяСтрока.НоменклатураПоставщика = Выборка2.НоменклатураПоставщика;
					
				ИначеЕсли Выборка2.Количество() > 1 Тогда
					
					НоменклатураПоставщика = Выборка2.НоменклатураПоставщика;
					
					Выборка2.Следующий();
					ЕстьУпаковка2 = Выборка2.ЕстьУпаковка;
					
					Если ЕстьУпаковка1 <> ЕстьУпаковка2 Тогда
						ТекущаяСтрока.НоменклатураПоставщика = НоменклатураПоставщика;
					Иначе
						ТекущаяСтрока.НоменклатураПоставщика = Справочники.НоменклатураПоставщиков.ПустаяСсылка();
					КонецЕсли;
					
				Иначе
					
					ТекущаяСтрока.НоменклатураПоставщика = Справочники.НоменклатураПоставщиков.ПустаяСсылка();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСопоставленнуюНоменклатуруПоставщикаВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПоставщика", СтруктураПараметровДействия) Тогда
		
		ВыводитьПредупреждение = Ложь;
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") Тогда
			Возврат;
		ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(НоменклатураПоставщиков.Ссылка) КАК КоличествоНоменклатурыПоставщика,
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
		|	НоменклатураПоставщиков.Характеристика КАК Характеристика,
		|	НоменклатураПоставщиков.Упаковка КАК Упаковка
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Владелец = &Партнер
		|	И (НЕ НоменклатураПоставщиков.ПометкаУдаления)
		|	И НоменклатураПоставщиков.Номенклатура = &Номенклатура
		|	И НоменклатураПоставщиков.Характеристика = &Характеристика
		|	И НоменклатураПоставщиков.Упаковка = &Упаковка
		|	И НоменклатураПоставщиков.Ссылка <> &НоменклатураПоставщика
		|	И ВЫРАЗИТЬ(&НоменклатураПоставщика КАК Справочник.НоменклатураПоставщиков).Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураПоставщиков.Номенклатура,
		|	НоменклатураПоставщиков.Характеристика,
		|	НоменклатураПоставщиков.Упаковка");
		
		Запрос.УстановитьПараметр("Партнер",                СтруктураПараметровДействия.Партнер);
		Запрос.УстановитьПараметр("НоменклатураПоставщика", ТекущаяСтрока.НоменклатураПоставщика);
		Запрос.УстановитьПараметр("Номенклатура",           ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика",         ТекущаяСтрока.Характеристика);
		Запрос.УстановитьПараметр("Упаковка",               ТекущаяСтрока.Упаковка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Если Выборка.Следующий() Тогда
				
				Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
					
					ТекстОшибки = НСтр("ru='Номенклатуре ""%Номенклатура%"" с характеристикой ""%Характеристика%"" уже сопоставлена другая номенклатура поставщика (%КоличествоНоменклатурыПоставщика%)'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",                     Выборка.Номенклатура);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%",                   Выборка.Характеристика);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоНоменклатурыПоставщика%", Выборка.КоличествоНоменклатурыПоставщика);
					
				Иначе
					
					ТекстОшибки = НСтр("ru='Номенклатуре ""%Номенклатура%"" уже сопоставлена другая номенклатура поставщика (%КоличествоНоменклатурыПоставщика%)'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",                     Выборка.Номенклатура);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоНоменклатурыПоставщика%", Выборка.КоличествоНоменклатурыПоставщика);
					
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					СтруктураПараметровДействия.Ссылка,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "Номенклатура"),
					,
					ВыводитьПредупреждение
				);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре", СтруктураПараметровДействия) Тогда
		Реквизиты = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(ТекущаяСтрока.Номенклатура);
		ТекущаяСтрока.ВестиУчетПоГТД = Реквизиты.ВестиУчетПоГТД;
		ТекущаяСтрока.ЭтоУслуга = Реквизиты.ЭтоУслуга;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьСтатьюАналитикуРасходов(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Если СтруктураДействий.Свойство("ПроверитьСтатьюАналитикуРасходов") Тогда
		
		Если ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Или
			ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.СтатьяРасходов) Тогда
				ТекущаяСтрока.СтатьяРасходов    = Неопределено;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекущаяСтрока.АналитикаРасходов) Тогда
				ТекущаяСтрока.АналитикаРасходов = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСуммуВознагражденияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения", СтруктураПараметровДействия) Тогда
	
		ТекущаяСтрока.СуммаВознаграждения = 0;
		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьАктивностьСтроки (ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		ТекущаяСтрока.Активность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьСкладВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад", СтруктураПараметровДействия) Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Или
			((ТекущаяСтрока.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар
			И ТекущаяСтрока.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара)
			И ЗначениеЗаполнено(ТекущаяСтрока.Склад)) Тогда
				
			ТекущаяСтрока.Склад = Справочники.Склады.ПустаяСсылка();
			
		ИначеЕсли Не СтруктураПараметровДействия.СкладГруппа
			И (ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
			Или ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара) Тогда
			
			ТекущаяСтрока.Склад = СтруктураПараметровДействия.Склад;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьФлагиРасхождениеИИзлишекПорча(ТекущаяСтрока, СтруктураДействий)
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда
		ТекущаяСтрока.Расхождение = (ТекущаяСтрока.КоличествоУпаковок <> ТекущаяСтрока.КоличествоУпаковокФакт);		
	КонецЕсли;
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда
		ТекущаяСтрока.ИзлишекПорча = Истина;		
	КонецЕсли;
КонецПроцедуры

Процедура ОчиститьСуммуВзаиморасчетовВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) 
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда
		
		ТекущаяСтрока.СуммаВзаиморасчетов = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьАвтоматическуюСкидкуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) 
	
	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда
		
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
		ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСодержаниеУслуги(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание", СтруктураПараметровДействия) ТОгда
		
		ЗаполнятьДляВсехУслуг = Неопределено;
		СтруктураПараметровДействия.Свойство("ЗаполнятьДляВсехУслуг", ЗаполнятьДляВсехУслуг);
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) И ЗаполнятьДляВсехУслуг <> Неопределено Тогда
		
			РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ТекущаяСтрока.Номенклатура,
				"ТипНоменклатуры, ВариантОформленияПродажи, НаименованиеПолное"
			);
			
			Если ЗаполнятьДляВсехУслуг
				И РеквизитыНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар И
				РеквизитыНоменклатуры.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
				
				ТекущаяСтрока.Содержание = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					РеквизитыНоменклатуры.НаименованиеПолное, 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Характеристика,"НаименованиеПолное")
				);
				
			ИначеЕсли Не ЗаполнятьДляВсехУслуг
				И РеквизитыНоменклатуры.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот Тогда
				
				ТекущаяСтрока.Содержание = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					РеквизитыНоменклатуры.НаименованиеПолное, 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Характеристика,"НаименованиеПолное")
				);
				
			Иначе
				ТекущаяСтрока.Содержание = "";
			КонецЕсли;
			
		Иначе
			ТекущаяСтрока.Содержание = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДубликатыЗависимыхРеквизитов(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрСтруктурыДействий;
	Если Не СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", ПараметрСтруктурыДействий) Тогда
		Возврат;
	КонецЕсли;
	
	// ПараметрСтруктурыДействий - Структура
	// 		Ключ: Имя реквизита флага активности
	// 		Значение: Строка с перечислением через запятую имен зависимых реквизитов
	
	Для Каждого ПолеСтруктуры Из ПараметрСтруктурыДействий Цикл
		
		ИмяФлагаАктивности = ПолеСтруктуры.Ключ;
		ЗначениеФлагаАктивности = ТекущаяСтрока[ИмяФлагаАктивности];
		
		ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
		Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
			ТекущаяСтрока[Реквизит.Ключ+ИмяФлагаАктивности] = ?(
				ЗначениеФлагаАктивности,
				ТекущаяСтрока[Реквизит.Ключ],
				0
			);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрСтруктурыДействий;
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию", ПараметрСтруктурыДействий)
	 И НЕ ЗначениеЗаполнено(ТекущаяСтрока.СтатьяРасходов) Тогда
		
		ДоходыИРасходыСервер.ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию(ПараметрСтруктурыДействий.Организация,
																		 ПараметрСтруктурыДействий.Подразделение,
																		 ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию() 

Процедура ЗаполнитьФлагиНедоборНеотгружаемые(ТекущаяСтрока, СтруктураДействий)
	Если СтруктураДействий.Свойство("ЗаполнитьФлагиНедоборНеотгружаемые") Тогда
		ТекущаяСтрока.ЕстьНедобор 		= ((ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокНеОтгружать) < ТекущаяСтрока.КоличествоУпаковокВДокументе);
		ТекущаяСтрока.ЕстьНеотгружаемые = ТекущаяСтрока.КоличествоУпаковокНеОтгружать > 0;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПартнера(ТекущаяСтрока, СтруктураДействий)
	Если СтруктураДействий.Свойство("ЗаполнитьПартнера") Тогда
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Партнер) Тогда
			ТекущаяСтрока.Партнер = Справочники.Партнеры.РозничныйПокупатель;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьУчетноеКоличествоНоменклатуры(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрСтруктурыДействий;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры", ПараметрСтруктурыДействий) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыОрганизаций.Номенклатура    КАК Номенклатура,
		|	ТоварыОрганизаций.Характеристика  КАК Характеристика,
		|	ТоварыОрганизаций.КоличествоОстаток КАК КоличествоУчет
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(&МоментВремени, Организация = &Организация И Склад = &Склад И Номенклатура = &Номенклатура И Характеристика = &Характеристика) КАК ТоварыОрганизаций
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыОрганизацийДвижения.Номенклатура,
		|	ТоварыОрганизацийДвижения.Характеристика,
		|	-ТоварыОрганизацийДвижения.Количество
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизацийДвижения
		|ГДЕ
		|	ТоварыОрганизацийДвижения.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица.Номенклатура          КАК Номенклатура,
		|	ВременнаяТаблица.Характеристика        КАК Характеристика,
		|	СУММА(ВременнаяТаблица.КоличествоУчет) КАК КоличествоУчет
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблица.Номенклатура,
		|	ВременнаяТаблица.Характеристика";
		
		Запрос.УстановитьПараметр("Регистратор",    ПараметрСтруктурыДействий.Регистратор);
		Запрос.УстановитьПараметр("Склад",          ПараметрСтруктурыДействий.Склад);
		Запрос.УстановитьПараметр("Организация",    ПараметрСтруктурыДействий.Организация);
		Запрос.УстановитьПараметр("МоментВремени",  ПараметрСтруктурыДействий.МоментВремени);
		Запрос.УстановитьПараметр("Номенклатура",   ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.Характеристика);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
				Коэффициент = ТекущаяСтрока.Упаковка.Коэффициент;
			Иначе
				Коэффициент = 1;
			КонецЕсли;
			ТекущаяСтрока.КоличествоУпаковокУчет = Выборка.КоличествоУчет / Коэффициент;
			ТекущаяСтрока.КоличествоУпаковокФакт = Выборка.КоличествоУчет / Коэффициент;
		Иначе
			ТекущаяСтрока.КоличествоУпаковокУчет = 0;
			ТекущаяСтрока.КоличествоУпаковокФакт = 0;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрСтруктурыДействий;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПараметрСтруктурыДействий) Тогда
		
		Товары = Новый ТаблицаЗначений;
		Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ЗаполнитьЗначенияСвойств(Товары.Добавить(),ТекущаяСтрока);
		Товары = НоменклатураПродаваемаяСовместно.ПолучитьДанныеОНоменклатуреПродаваемойСовместно(Товары, ПараметрСтруктурыДействий);
		Если Товары.Количество() > 0 Тогда
			ТекущаяСтрока.ИндексСовместноПродаваемыеТовары = 1;
		Иначе
			ТекущаяСтрока.ИндексСовместноПродаваемыеТовары = 0;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьВариантОбеспечения(ТекущаяСтрока, СтруктураДействий)
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантОбеспечения") Тогда
		
		Если ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
			И ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда
			ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ПустаяСсылка();
		ИначеЕсли ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
			ТекущаяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакБезВозвратнойТары(ТекущаяСтрока, СтруктураДействий)
	
	Перем ВернутьМногооборотнуюТару;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", ВернутьМногооборотнуюТару) Тогда
	
		ТекущаяСтрока.БезВозвратнойТары = Не (ВернутьМногооборотнуюТару
			И ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакОтмененоБезВозвратнойТары(ТекущаяСтрока, СтруктураДействий)
	
	Перем ВернутьМногооборотнуюТару;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", ВернутьМногооборотнуюТару) Тогда
	
		ТекущаяСтрока.ОтмененоБезВозвратнойТары = Не (ВернутьМногооборотнуюТару
			И ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара) И ТекущаяСтрока.Отменено;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакАктивностьБезВозвратнойТары(ТекущаяСтрока, СтруктураДействий)
	
	Перем ВернутьМногооборотнуюТару;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", ВернутьМногооборотнуюТару) Тогда
	
		ТекущаяСтрока.АктивностьБезВозвратнойТары = Не (ВернутьМногооборотнуюТару
			И ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара) И ТекущаяСтрока.Активность;
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры.

Функция ПолучитьКоэффициентУпаковки(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекКоэффициент = КэшированныеЗначения.КоэффициентыУпаковок[ТекУпаковка];
		Если ТекКоэффициент = Неопределено Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекУпаковка,"Коэффициент,Объем,Вес");
			ТекКоэффициент = ЗначенияРеквизитов.Коэффициент;
			КэшированныеЗначения.КоэффициентыУпаковок.Вставить(ТекУпаковка, ЗначенияРеквизитов.Коэффициент);
			КэшированныеЗначения.ОбъемУпаковок.Вставить(ТекУпаковка, ЗначенияРеквизитов.Объем);
			КэшированныеЗначения.ВесУпаковок.Вставить(ТекУпаковка, ЗначенияРеквизитов.Вес);
		КонецЕсли;
	Иначе
		ТекКоэффициент = 1;
	КонецЕсли;

	Возврат ТекКоэффициент;

КонецФункции

Функция ПолучитьВесУпаковки(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекВес = КэшированныеЗначения.ВесУпаковок[ТекУпаковка];
		Если ТекВес = Неопределено Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекУпаковка,"Коэффициент,Объем,Вес");
			ТекВес =  ЗначенияРеквизитов.Вес;
			КэшированныеЗначения.КоэффициентыУпаковок.Вставить(ТекУпаковка, ЗначенияРеквизитов.Коэффициент);
			КэшированныеЗначения.ОбъемУпаковок.Вставить(ТекУпаковка, ЗначенияРеквизитов.Объем);
			КэшированныеЗначения.ВесУпаковок.Вставить(ТекУпаковка, ЗначенияРеквизитов.Вес);
		КонецЕсли;
	Иначе
		ТекВес = 0;
	КонецЕсли;

	Возврат ТекВес;

КонецФункции

Функция ПолучитьОбъемУпаковки(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекОбъем = КэшированныеЗначения.ОбъемУпаковок[ТекУпаковка];
		Если ТекОбъем = Неопределено Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекУпаковка,"Коэффициент,Объем,Вес");
			ТекОбъем = ЗначенияРеквизитов.Объем; 
			КэшированныеЗначения.КоэффициентыУпаковок.Вставить(ТекУпаковка, ЗначенияРеквизитов.Коэффициент);
			КэшированныеЗначения.ОбъемУпаковок.Вставить(ТекУпаковка, ЗначенияРеквизитов.Объем);
			КэшированныеЗначения.ВесУпаковок.Вставить(ТекУпаковка, ЗначенияРеквизитов.Вес);
		КонецЕсли;
	Иначе
		ТекОбъем = 0;
	КонецЕсли;

	Возврат ТекОбъем;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции заполнения служебных реквизитов по номенклатуре.

// Возвращает шаблон поля выборки соответствуюий для указанного ключа действия
//
// Параметры:
// 		КлючДействия - Строка - Строка имени ключа действия
//
// Возвращаемое значение:
// 		Строка - Строка шаблоно поля запроса
//
Функция ПолучитьШаблонПоляВыборкиПоКлючуДействия(КлючДействия)
	
	Если КлючДействия = "ЗаполнитьПризнакТипНоменклатуры" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ТипНоменклатуры КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВариантОформленияПродажи" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВариантОформленияПродажи КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакХарактеристикиИспользуются" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.%Ключ%.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|		ИЛИ втТаблицаНоменклатуры.%Ключ%.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВедетсяУчетПоГТД" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВестиУчетПоГТД КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакЭтоУслуга" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.%Ключ%.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакПодакцизныйТовар" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ПодакцизныйТовар КАК %Значение%";
	КонецЕсли;
	
	Если ТипЗнч(КлючДействия) = Тип("Строка") Тогда
		ТекстЗапроса =
			",
			|	втТаблицаНоменклатуры.%Ключ%.%ИмяПоля% КАК %Значение%";
		Возврат СтрЗаменить(ТекстЗапроса, "%ИмяПоля%", КлючДействия);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает текст запроса выборки по служебным реквизитам номенклатуры
//
// Парметры:
// 		СтруктураРеквизитов - Структура - Структура с именами служебыных реквизитов в качестве полей
// 		СтруктураДопДанных - Структура - Структура с дополнительными данными
//
// Возвращаемое значение:
// 		Строка - Строка с текстом запроса
//
Функция ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(СтруктураДействий, СтруктураДопДанных) Экспорт
	
	ШаблонЗапроса = "";
	
	// Формирование шаблона запроса временной таблицы по номенклатуре
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки%ТекстВЫБРАТЬ%
	|ПОМЕСТИТЬ втТаблицаНоменклатуры
	|ИЗ
	|	&КоллекцияДанных КАК Таблица;";
	
	ШаблонВЫБРАТЬ = ",
	|	ВЫРАЗИТЬ(Таблица.%ИмяПоля% КАК Справочник.Номенклатура) КАК %ИмяПоля%";
	
	ТекстВЫБРАТЬ = "";
	Для Каждого Поле Из СтруктураДопДанных.СтруктураИсточников Цикл
		ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + СтрЗаменить(ШаблонВЫБРАТЬ, "%ИмяПоля%", Поле.Ключ);
	КонецЦикла;
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%ТекстВЫБРАТЬ%", ТекстВЫБРАТЬ);
	
	// Шаблон запроса основной выборки
	ШаблонЗапроса = ШаблонЗапроса + "
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки%ТекстВЫБРАТЬ%
	|ИЗ
	|	втТаблицаНоменклатуры КАК втТаблицаНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	
	// Формирование полей запроса основной выборки
	ТекстВЫБРАТЬ = "";
	Для Каждого Действие Из СтруктураДействий Цикл
		ШаблонВЫБРАТЬ = ПолучитьШаблонПоляВыборкиПоКлючуДействия(Действие.Ключ);
		Если ШаблонВЫБРАТЬ <> Неопределено Тогда
			Для Каждого Поле Из Действие.Значение Цикл
				ТекстВыбрать = ТекстВЫБРАТЬ + СтрЗаменить(СтрЗаменить(ШаблонВЫБРАТЬ, "%Значение%", Поле.Значение), "%Ключ%", Поле.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрЗаменить(ШаблонЗапроса, "%ТекстВЫБРАТЬ%", ТекстВЫБРАТЬ);
	
КонецФункции // ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ

// Возвращает структуру дополнительной информации получения служебных реквизитов
//
// Параметры:
// 		СтруктураДействий - Структура - Структура с действиями по получения служебных реквизитов
//
// Возвращаемое значение:
// 		Структура
//
Функция ПолучитьСтруктуруДополнительнойИнформации(СтруктураДействий) Экспорт
	
	СтруктураИсточников = Новый Структура;
	СтрокаРеквизитовЗаполнения = "";
	СтрокаРеквизитовВыгрузки = "";
	
	Для Каждого Действие Из СтруктураДействий Цикл
		Для Каждого Поле Из Действие.Значение Цикл
			Если Не СтруктураИсточников.Свойство(Поле.Ключ) Тогда
				СтруктураИсточников.Вставить(Поле.Ключ);
				СтрокаРеквизитовВыгрузки = СтрокаРеквизитовВыгрузки + ", " + Поле.Ключ;
			КонецЕсли;
			СтрокаРеквизитовЗаполнения = СтрокаРеквизитовЗаполнения + ", " + Поле.Значение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый Структура(
		"СтруктураИсточников, РеквизитыЗаполнения, РеквизитыВыгрузки",
		СтруктураИсточников,
		Сред(СтрокаРеквизитовЗаполнения, 2), // Отрезать первый символ строки, т.к. это запятая
		СтрокаРеквизитовВыгрузки
	);
	
КонецФункции // ПолучитьСтруктуруДополнительнойИнформации()

////////////////////////////////////////////////////////////////////////////////
// Прочее.

Процедура ЗаполнитьЦенуПродажиПоАссортиментуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	Если Не СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	// Получение параметров запроса
	СтруктураПараметровОтбора = Новый Структура("Валюта, Дата, Склад, Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, СтруктураПараметровДействия);
	
	Если (СтруктураПараметровДействия.Свойство("ОбработатьШтрихкоды", ЗначениеСвойства) И ЗначениеСвойства.НеИспользоватьУпаковки)
	Или СтруктураПараметровОтбора.Упаковка = Неопределено Тогда
		СтруктураПараметровОтбора.Вставить("Упаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Цена = АссортиментСервер.ПолучитьЦенуПоАссортименту(СтруктураПараметровОтбора);
	ТекущаяСтрока.Цена = Цена;
	
КонецПроцедуры

Процедура ПроверитьАссортиментСтроки(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	Если Не СтруктураДействий.Свойство("ПроверитьАссортиментСтроки", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	КонтролироватьАссортимент = ПолучитьФункциональнуюОпцию("КонтролироватьАссортимент", 
															Новый Структура("Склад", СтруктураПараметровДействия.Склад));
	Если КонтролироватьАссортимент <> Истина Тогда
		КонтролироватьАссортимент = Ложь;
	КонецЕсли;
	
	Если КонтролироватьАссортимент Тогда
		
		СтруктураСостояния = АссортиментСервер.СтруктураСостоянияАссортиментаТовараВФормате(ТекущаяСтрока.Номенклатура,
																							СтруктураПараметровДействия.Склад,
																							СтруктураПараметровДействия.Дата);
		
		Если НЕ СтруктураСостояния[СтруктураПараметровДействия.ИмяРесурсаАссортимента] Тогда
			
			ТекстСообщения = СтруктураПараметровДействия.ТекстСообщения;
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ТекущаяСтрока.Номенклатура);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				СтруктураПараметровДействия.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "Номенклатура"),
				,
				Ложь);
			
			Если НЕ СтруктураПараметровДействия.РазрешатьДобавление Тогда
				ТекущаяСтрока.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

