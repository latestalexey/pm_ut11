////////////////////////////////////////////////////////////////////////////////
// Подсистема "Дополнительные отчеты и обработки"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Открывает форму с доступными командами.
// 
// Параметры:
//   ПараметрКоманды            (...) Передается "как есть" из параметров обработчика команды.
//   ПараметрыВыполненияКоманды (...) Передается "как есть" из параметров обработчика команды.
//   Вид                     (Строка) Вид обработки, который можно получить из серии функций:
//                                    ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработки<...>()
//   ИмяРаздела              (Строка) Имя раздела командного интерфейса, из которого вызывается команда.
//
Процедура ОткрытьФормуКомандДополнительныхОтчетовИОбработок(ПараметрКоманды, ПараметрыВыполненияКоманды, Вид, ИмяРаздела = "") Экспорт
	
	ОбъектыНазначения = Новый СписокЗначений;
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда // назначаемая обработка
		ОбъектыНазначения.ЗагрузитьЗначения(ПараметрКоманды);
	КонецЕсли;
	
	Параметры = Новый Структура("ОбъектыНазначения, Вид, ИмяРаздела, РежимОткрытияОкна");
	Параметры.ОбъектыНазначения = ОбъектыНазначения;
	Параметры.Вид = Вид;
	Параметры.ИмяРаздела = ИмяРаздела;
	Параметры.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда // назначаемая обработка
		Параметры.Вставить("ИмяФормы", ПараметрыВыполненияКоманды.Источник.ИмяФормы);
	КонецЕсли;
	
	ОткрытьФорму(
		"ОбщаяФорма.ДополнительныеОтчетыИОбработки", 
		Параметры,
		ПараметрыВыполненияКоманды.Источник
	);
	
КонецПроцедуры

// Открывает форму дополнительного отчета с заданным вариантом.
// 
// Параметры:
//   Ссылка (СправочникСсылка.ДополнительныеОтчетыИОбработки)
//   КлючВарианта (Строка)
//
Процедура ОткрытьВариантДополнительногоОтчета(Ссылка, КлючВарианта) Экспорт
	
	ИмяОтчета = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(Ссылка);
	ПараметрыОткрытия = Новый Структура("КлючВарианта", КлючВарианта);
	Уникальность = "ВнешнийОтчет." + ИмяОтчета + "/КлючВарианта." + КлючВарианта;
	ОткрытьФорму("ВнешнийОтчет." + ИмяОтчета + ".Форма", ПараметрыОткрытия, Неопределено, Уникальность);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Вызывает диалог сохранения редактируемых данных произвольной формы
//   Вызывается из обработчиков "ПередЗакрытием" и "ПриЗакрытии".
// 
// Параметры:
//   Отказ - (...) Флаг отказа от закрытия формы.
//       |- (Булево)    для обработчика "ПередЗакрытием", используется для толстого и тонкого клиентов
//       |- (Неопределено) для обработчика "ПриЗакрытии", используется для веб клиента
//   Модифицированность - (Булево) Флаг модифицированности формы.
//       Если форма не модифицирована, то сохранять нечего и запрос не требуется
// 
// Возвращаемое значение: 
//   (Булево) Необходимость сохранения данных формы.
//
Функция СохранитьДанныеПроизвольнойФормы(Модифицированность, Отказ = Неопределено) Экспорт
	// Изменение сохраняемых данных должно устанавливать модифицированность формы
	Если Модифицированность <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Определение клиента
	#Если ВебКлиент Тогда
		ЭтоВебКлиент = Истина;
	#Иначе
		ЭтоВебКлиент = Ложь;
	#КонецЕсли
	
	// Предупреждение необходимо вызвать только один раз для одного клиента
	Если ЭтоВебКлиент <> (Отказ = Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
	Кнопки = ?(ЭтоВебКлиент, РежимДиалогаВопрос.ДаНет, РежимДиалогаВопрос.ДаНетОтмена);
	Ответ = Вопрос(ТекстВопроса, Кнопки, 60, КодВозвратаДиалога.Нет); 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ЭтоВебКлиент И Ответ = КодВозвратаДиалога.Отмена Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Для внутреннего использования
// 
Функция ВариантЗапускаВызовКлиентскогоМетода() Экспорт
	
	Возврат "ВызовКлиентскогоМетода";
	
КонецФункции

// Для внутреннего использования
// 
Функция ВариантЗапускаВызовСерверногоМетода() Экспорт
	
	Возврат "ВызовСерверногоМетода";
	
КонецФункции

// Для внутреннего использования
// 
Функция ВариантЗапускаОткрытиеФормы() Экспорт
	
	Возврат "ОткрытиеФормы";
	
КонецФункции
