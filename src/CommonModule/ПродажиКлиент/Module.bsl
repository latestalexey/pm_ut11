////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции для обработки действий пользователя
// в процессе работы с документами продажи.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Предлагает пользователю скорректировать желаемую дату отгрузки до максимальной из дат авансов
//
// Параметры:
//	ЖелаемаяДатаОтгрузки - Дата
//	МаксДатаАванса       - Дата
//	Отказ                - Булево
//
Процедура СкорректироватьЖелаемуюДатуОтгрузки(ЖелаемаяДатаОтгрузки, Знач МаксДатаАванса, Отказ) Экспорт
	
	// Предложим пользователю скорректировать желаемую дату отгрузки
	
	Если ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки) Тогда
		
		Если ЗначениеЗаполнено(МаксДатаАванса) И МаксДатаАванса > ЖелаемаяДатаОтгрузки Тогда
			
			ТекстВопроса = НСтр("ru='Желаемая дата отгрузки меньше даты этапов предоплаты. Дата будет скорректирована до %МаксДатаАванса%.'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%МаксДатаАванса%", Формат(МаксДатаАванса,"ДЛФ=DD"));
	
			ОтветНаВопрос = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ОКОтмена);
			Если ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
				ЖелаемаяДатаОтгрузки = МаксДатаАванса;
			Иначе
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Возвращает наибольшую из дат аванса в строке тч ЭтапыОплаты
//
// Параметры:
//	ЭтапыГрафикаОплаты - ДанныеФормыКоллекция - этапы оплаты, в которых необходимо рассчитать дату аванса
//
// Возвращаемое значение:
//	Дата
//	Максимальная дата аванса, если дат аванса нет - пустая дата
//
Функция МаксимальнаяДатаАванса(ЭтапыГрафикаОплаты) Экспорт
	
	МаксДатаАванса = '00010101';
	
	Для Каждого ТекЭтап Из ЭтапыГрафикаОплаты Цикл
		
		Если ТекЭтап.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки") Или
			ТекЭтап.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения") Тогда
			
			МаксДатаАванса = Макс(МаксДатаАванса, ТекЭтап.ДатаПлатежа);
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат МаксДатаАванса;
	
КонецФункции

// Создает документ "Счет-фактура выданный" или открывает существующий.
//
// Параметры:
//	Форма - Форма - Форма, из которой вызвана команда. Устанавливается владелецем открываемой формы счета-фактуры;
//  Организация - СправочникСсылка.Организации - Организация, на имя которой оформляется счет-фактура;
//  ОткрыватьСуществующую - Булево - Признак необходимости поиска и открытия формы найденного счета-фактуры;
//  Исправление - Булево - Истина - Создается исправление счета-фактуры;
//  Корректировочный - Булево - Создается корректировочный счет-фактура.
//
Процедура ВвестиСчетФактуру(Форма, Организация, ОткрыватьСуществующую = Ложь, Исправление = Ложь, Корректировочный = Ложь) Экспорт
	
	ВводитьСчетФактуру = Истина;
	
	Если ОткрыватьСуществующую Тогда
		СчетФактураДокумента = ПродажиВызовСервера.СчетФактураДокумента(Форма.Объект.Ссылка, Организация);
		Если ЗначениеЗаполнено(СчетФактураДокумента) Тогда
			ВводитьСчетФактуру = Ложь;
			
			ПараметрыФормы = Новый Структура("Ключ, ДокументОснование, ВозвращатьПараметрыПредставления",
				СчетФактураДокумента, Форма.Объект.Ссылка, Истина
			);
			ОткрытьФорму("Документ.СчетФактураВыданный.ФормаОбъекта", ПараметрыФормы, Форма);
		КонецЕсли;
	КонецЕсли; 
	
	Если ВводитьСчетФактуру
		И (НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка)
		ИЛИ НЕ Форма.Объект.Проведен
		ИЛИ Форма.Модифицированность) Тогда
	 	
		ТекстВопроса = НСтр("ru = 'Ввод счета-фактуры возможен только после проведения документа, провести документ?'");
		КодОтвета = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если КодОтвета = КодВозвратаДиалога.Да Тогда
			Попытка
				ВводитьСчетФактуру = Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
			Исключение
				Предупреждение(НСтр("ru = 'Не удалось выполнить проведение документа'"));
				ВводитьСчетФактуру = Ложь;
			КонецПопытки;
		Иначе
			ВводитьСчетФактуру = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВводитьСчетФактуру Тогда
		
		ДанныеСчетаФактуры = Новый Структура;
		ДанныеСчетаФактуры.Вставить("ДокументОснование", Форма.Объект.Ссылка);
		ДанныеСчетаФактуры.Вставить("Организация",       Организация);
		ДанныеСчетаФактуры.Вставить("Дата", 	         ?(ОткрыватьСуществующую, Форма.Объект.Дата, '00010101'));
		ДанныеСчетаФактуры.Вставить("Исправление",       Исправление);
		ДанныеСчетаФактуры.Вставить("Корректировочный",  Корректировочный);
		
		ПараметрыФормы = Новый Структура("Основание, ДокументОснование, ВозвращатьПараметрыПредставления",
			ДанныеСчетаФактуры, Форма.Объект.Ссылка, Истина
		);
		ОткрытьФорму("Документ.СчетФактураВыданный.ФормаОбъекта", ПараметрыФормы, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирование для элемента формы списка выбора адресов на основании контактной информации адресата.
//
Процедура ЗаполнитьСписокВыбораАдреса(ЭлементАдреса, АдресатСсылка, ОчищатьСписок = Истина) Экспорт
	
	Если ОчищатьСписок Тогда
		ЭлементАдреса.СписокВыбора.Очистить();
	КонецЕсли;
	
	СоответствиеАдресов = ПродажиВызовСервера.ПолучитьСписокАдресов(АдресатСсылка);
	
	Для Каждого Адрес Из СоответствиеАдресов Цикл
		ЭлементАдреса.СписокВыбора.Добавить(Адрес.Ключ, Адрес.Значение);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с выбором значений.

// Процедура - обработчик события "НачалоВыбора" элемента формы "Соглашение"
//
// Параметры:
//	Партнер                      - СправочникСсылка.Партнеры - ссылка на партнера, для которого необходимо выбрать соглашение
//	Документ                     - СправочникСсылка.СоглашенияСКлиентами - ссылка на ранее выбранное соглашение для  начального позиционирования в списке
//	ТолькоТиповые                - Булево - флаг, позволяющий включать в список выбора только типовые соглашения
//	ТолькоИспользуемыеВРаботеТП  - Булево - флаг, позволяющий включать в список выбора только соглашения,
//	используемые в работе торговых представителей
//	ТолькоНаКомиссию             - Булево - флаг, позволяющий включать в список выбора только комиссионные соглашения
//	ТолькоИндивидуальные         - Булево - флаг, определяющий необходимость отбора только индивидуальных соглашений
//
Процедура НачалоВыбораСоглашенияСКлиентом(Элемент,
	                                      СтандартнаяОбработка,
	                                      Партнер,
	                                      Документ,
	                                      ДатаДокумента='00010101',
	                                      ТолькоТиповые=Ложь,
	                                      ТолькоИспользуемыеВРаботеТП=Ложь,
	                                      ХозяйственнаяОперация=Неопределено
	                                      ) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Партнер = ОткрытьФормуМодально ("Справочник.Партнеры.ФормаВыбора", Новый Структура("Отбор", Новый Структура("Клиент", Истина)));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	Иначе
		ОткрытьФорму (
			"Справочник.СоглашенияСКлиентами.ФормаВыбора",
			Новый Структура("ДатаДокумента,Партнер,ТолькоТиповые,ТолькоИспользуемыеВРаботеТП,ТекущаяСтрока,ХозяйственнаяОперация",
				ДатаДокумента, Партнер, ТолькоТиповые, ТолькоИспользуемыеВРаботеТП, Документ, ХозяйственнаяОперация),
			Элемент
		);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаВыбораДоговораКонтрагента(ВыбранноеЗначение, ДанныеФормы) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		СтруктураОснование = Новый Структура("Партнер, Контрагент, Организация, ХозяйственнаяОперация, ВалютаВзаиморасчетов, Соглашение");
		ЗаполнитьЗначенияСвойств(СтруктураОснование, ДанныеФормы);
		
		СтруктураОснование.Вставить("Номер", СокрЛП(ВыбранноеЗначение));
		
		ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", Новый Структура("Основание", СтруктураОснование));
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораДоговораКонтрагента() 

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции проверки возможности выполнения действий.

// Проверяет заполненность реквизитов, необходимых для заполнения цен в документе по соглашению с клиентом
//
// Параметры:
//	Документ                    - ДокументОбъект, для которого выполняются проверки
//	ИмяТабличнойЧасти           - Строка - имя табличной части, в которой необходимо осуществить проверку
//	ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя
//
// Возвращаемое значение:
//	Булево - Ложь, если необходимые данные не заполнены
//
Функция НеобходимоЗаполнениеЦенПоСоглашению(Документ, ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти) Экспорт

	Если Не ЗначениеЗаполнено(Документ.Соглашение) Тогда
		
		Предупреждение(НСтр("ru='В документе не указано соглашение с клиентом. Цены не могут быть заполнены'"));
		Возврат Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(Документ.Валюта) Тогда
		
		Предупреждение(НСтр("ru='В документе не указана валюта. Цены не могут быть заполнены'"));
		Возврат Ложь;
		
	ИначеЕсли Документ[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		Предупреждение(ТекстПредупреждения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

// Проверяет заполненность реквизитов, необходимых для заполнения цен в документе по виду цен
//
// Параметры:
//	Документ                    - ДокументОбъект, для которого выполняются проверки
//	ИмяТабличнойЧасти           - Строка - имя табличной части, в которой необходимо осуществить проверку
//	ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя
//
// Возвращаемое значение:
//	Булево
//	Ложь, если необходимые данные не заполнены
//
Функция НеобходимоЗаполнениеЦенПоВидуЦен(Документ, ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти) Экспорт

	Если Не ЗначениеЗаполнено(Документ.Валюта) Тогда
		
		Предупреждение(НСтр("ru='В документе не указана валюта. Цены не могут быть заполнены'"));
		Возврат Ложь;
		
	ИначеЕсли Документ[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		Предупреждение(ТекстПредупреждения);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Проверяет заполненность реквизитов, необходимых для отмены строк в таблице
//
// Параметры:
//	Документ                    - ДокументОбъект, для которого выполняются проверки
//	ТабличнаяЧасть              - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку
//	ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя
//
// Возвращаемое значение:
//	Булево
//	Ложь, если необходимые данные не заполнены
//
Функция НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(ТабличнаяЧасть, ПредставлениеТабличнойЧасти, ВыделенныеСтроки) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Строки не могут быть отменены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		Предупреждение(ТекстПредупреждения);
		Возврат Ложь;
		
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда
		
		Предупреждение(НСтр("ru='В таблице отсутствуют выделенные строки. Выделите строки для отмены'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Проверяет заполненность реквизитов, необходимых для отмены непоставленных строк
//
// Параметры:
//	Документ                    - ДокументОбъект, для которого выполняются проверки
//	ТабличнаяЧасть              - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку
//	ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя
//
// Возвращаемое значение:
//	Булево
//	Ложь, если необходимые данные не заполнены
//
Функция НеобходимоЗаполнениеПричиныОтменыНепоставленныхСтрок(ТабличнаяЧасть, ПредставлениеТабличнойЧасти) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Строки не могут быть отменены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		Предупреждение(ТекстПредупреждения);
		Возврат Ложь;
		
		ЕстьНеотмененныеСтроки = Ложь;
		Для Каждого ТекСтрока Из ТабличнаяЧасть Цикл
			Если Не ТекСтрока.Отменено Тогда
				ЕстьНеотмененныеСтроки = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьНеотмененныеСтроки Тогда
			Предупреждение(НСтр("ru='Все строки отменены'"));
			Возврат Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Проверяет заполненность реквизитов, необходимых для заполнения товаров по отгрузке
//
// Параметры:
//	ДокументПроведен - Булево - признак проведенности документа
//
// Возвращаемое значение:
//	Булево
//	Ложь, если необходимые данные не заполнены
//
Функция НеобходимоЗаполнениеТоваровПоОтгрузке(ДокументПроведен) Экспорт
	
	Если Не ДокументПроведен Тогда
		Предупреждение(НСтр("ru='Документ не проведен, заполнение невозможно.'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры оповещения пользователя о выполненных действиях.

//Показывает оповещение пользователя об окончании заполнения условий продаж по умолчанию
//
Процедура ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Условия продаж заполнены'"),
		,
		НСтр("ru='Условия продаж по умолчанию заполнены'"),
		БиблиотекаКартинок.Информация32
	);

КонецПроцедуры

//Показывает оповещение пользователя об окончании заполнения условий продаж
//
Процедура ОповеститьОбОкончанииЗаполненияУсловийПродаж() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Условия продаж заполнены'"),
		,НСтр("ru='Условия продаж по соглашению с клиентом заполнены'"),
		БиблиотекаКартинок.Информация32
	);

КонецПроцедуры

//Показывает оповещение пользователя об окончании заполнения цен по соглашению с клиентом
//
// Параметры:
//	ЦеныРассчитаны - Булево - Признак успешного расчета цен хотя бы в одной строке
//
Процедура ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны = Истина) Экспорт

	Если ЦеныРассчитаны Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены заполнены'"),
			,
			НСтр("ru='Цены по соглашению с клиентом заполнены'"),
			БиблиотекаКартинок.Информация32
		);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены не заполнены'"),
			,
			НСтр("ru='Ни в одной строке цены по соглашению с клиентом не заполнены'"),
			БиблиотекаКартинок.Информация32
		);
	КонецЕсли;
	
КонецПроцедуры

//Показывает оповещение пользователя об окончании заполнения цен по виду цен
//
// Параметры:
//	ЦеныРассчитаны - Булево - Признак успешного расчета цен хотя бы в одной строке
//	ВидЦен - СправочникСсылка.ВидыЦен - Вид цен, по которому осуществлялось заполнение цен
//
Процедура ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны = Истина, ВидЦен) Экспорт

	Если ЦеныРассчитаны Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены заполнены'"),
			,
			СтрЗаменить(НСтр("ru='Цены по виду цен ""%ВидЦен%"" заполнены'"), "%ВидЦен%", ВидЦен),
			БиблиотекаКартинок.Информация32
		);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены не заполнены'"),
			,
			СтрЗаменить(НСтр("ru='Ни в одной строке цены по виду цен ""%ВидЦен%"" не заполнены'"), "%ВидЦен%", ВидЦен),
			БиблиотекаКартинок.Информация32
		);
	КонецЕсли;
	
КонецПроцедуры

//Показывает оповещение пользователя об отмене выделенных строк
//
// Параметры:
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - Причина отмены выделенных строк
//
Процедура ОповеститьОбОтменеВыделенныхСтрок(ПричинаОтмены) Экспорт

		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выделенные строки отменены'"),
			,
			СтрЗаменить(НСтр("ru='Выделенные строки отменены по причине ""%ПричинаОтмены%""'"), "%ПричинаОтмены%", ПричинаОтмены),
			БиблиотекаКартинок.Информация32
		);
	
КонецПроцедуры

//Показывает оповещение пользователя об отмене выделенных строк
//
// Параметры:
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - Причина отмены выделенных строк
//
Процедура ОповеститьОбОтменеНепоставленныхСтрок(ПричинаОтмены, КоличествоОтмененныхСтрок, ПроверятьОстатки) Экспорт

	Если КоличествоОтмененныхСтрок = 0 Тогда
			
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки не отменены'"),
			,
			НСтр("ru='По всем строкам оформлена реализация. Строки не могут быть отменены'"),
			БиблиотекаКартинок.Информация32
		);
			
		Иначе
			
			Если ПроверятьОстатки Тогда

				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Строки отменены'"),
					,
					СтрЗаменить(НСтр("ru='Все непоставленные строки отменены по причине ""%ПричинаОтмены%""'"), "%ПричинаОтмены%", ПричинаОтмены),
					БиблиотекаКартинок.Информация32
				);
			
			Иначе
				
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Строки отменены'"),
					,
					СтрЗаменить(НСтр("ru='Все строки отменены по причине ""%ПричинаОтмены%"".'"), "%ПричинаОтмены%", ПричинаОтмены),
					БиблиотекаКартинок.Информация32
				);
				
			КонецЕсли;
			
		КонецЕсли;
	
КонецПроцедуры

//Показывает оповещение пользователя об окончании заполнения дат отгрузки всех строк тч
//
// Параметры:
//	ДатаОтгрузки - Дата - дата отгрузки, по которой заполнялась дата в табличной части
//	ВыделенныеСтроки - Массив - влияет на текст сообщения
//
Процедура ОповеститьОбОкончанииЗаполненияДатОтгрузки(ДатаОтгрузки, ЗаполнениеВыделенныхСтрок) Экспорт

	Если ЗаполнениеВыделенныхСтрок Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Дата отгрузки заполнена'"),
			,
			СтрЗаменить(НСтр("ru='Для выделенных строк установлена дата отгрузки %ДатаОтгрузки%'"), "%ДатаОтгрузки%", Формат(ДатаОтгрузки, "ДФ=dd.MM.yyyy")),
			БиблиотекаКартинок.Информация32
		);
		
	Иначе
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Дата отгрузки заполнена'"),
			,
			СтрЗаменить(НСтр("ru='Для всех строк установлена дата отгрузки %ДатаОтгрузки%'"), "%ДатаОтгрузки%", Формат(ДатаОтгрузки, "ДФ=dd.MM.yyyy")),
			БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

//Показывает оповещение пользователя об окончании перезаполнения товаров по фактической отгрузке
//
// Параметры:
//	ЕстьИзменения           - Булево - Если Истина - есть изменения в табличной части
//	КоличествоПерезаполнено - Булево - Если Истина - количество было перезаполнено по фактической отгрузке
//
Процедура ОповеститьОбОкончанииПерезаполненияТоваровПоОтгрузке(ЕстьИзменения, КоличествоПерезаполнено) Экспорт
	
	Если ЕстьИзменения Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Количество перезаполнено'"),
			,
			НСтр("ru='В строках перезаполнено количество.'"),
			БиблиотекаКартинок.Информация32
			);
		
	Иначе
		
		Если КоличествоПерезаполнено Тогда
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Перезаполнение не требуется'"),
				,
				НСтр("ru='Перезаполнение не требуется, т.к. во всех строках количество совпадает с указанным.'"),
				БиблиотекаКартинок.Информация32
			);
			
		Иначе
		
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Перезаполнение не требуется'"),
				,
				НСтр("ru='Ни по одной строке не начата отгрузка.'"),
				БиблиотекаКартинок.Информация32
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры обработки команд пользователя.

// Проверяет заполненность реквизитов, необходимых для заполнения товаров по отгрузке
//
// Параметры:
//	ЕстьОтгруженныеТовары - Булево
//	ЗаполнятьНесобраннымиТоварами - Булево 
//
// Возвращаемое значение:
//	Булево
//	Ложь, если пользователь отказался от заполнения
//
Функция ВопросОПерезаполненииОтгруженнымиТоварами(ЕстьОтгруженныеТовары, ЗаполнятьНесобраннымиТоварами) Экспорт
	
	СписокКнопок = Новый СписокЗначений();
	
	Если ЕстьОтгруженныеТовары Тогда
		
		ТекстВопроса = НСтр("ru='Не все товары собраны/отгружены. Учитывать при заполнении товары, которые находятся в процессе сборки?'");
		СписокКнопок.Добавить("Учитывать", НСтр("ru = 'Учитывать'"));
		СписокКнопок.Добавить("НеУчитывать", НСтр("ru = 'Не учитывать'"));
		
	Иначе
		
		ТекстВопроса = НСтр("ru='Отсутствуют собранные/отгруженные товары. Учитывать при заполнении товары, которые находятся в процессе сборки?'");
		СписокКнопок.Добавить("Учитывать", НСтр("ru = 'Учитывать'"));
		
	КонецЕсли;
	
	СписокКнопок.Добавить("НеПерезаполнять", НСтр("ru = 'Не перезаполнять'"));
	ОтветНаВопрос = Вопрос(ТекстВопроса, СписокКнопок);
	
	ЗаполнятьНесобраннымиТоварами = (ОтветНаВопрос = "Учитывать");
	
	Если ОтветНаВопрос = "НеПерезаполнять" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура для выбора вида цен из формы выбора.
//
// Параметры:
//	Форма                                     - УправляемаяФорма - форма, в которой необходимо заполнить цены
//	ИспользоватьПриПродаже                    - Булево - Выбор вида цены для продажи
//	ИспользоватьПриПередачеМеждуОрганизациями - Булево - Выбор вида цены для передачи между организациями
//
Функция ВыбратьВидЦен(ЦенаВключаетНДС, ИспользоватьПриПродаже = Неопределено, ИспользоватьПриПередачеМеждуОрганизациями = Неопределено) Экспорт

	СтруктураОтбор = Новый Структура("ЦенаВключаетНДС", ЦенаВключаетНДС);
	Если ИспользоватьПриПродаже <> Неопределено Тогда
		СтруктураОтбор.Вставить("ИспользоватьПриПродаже", ИспользоватьПриПродаже);
	КонецЕсли;
	Если ИспользоватьПриПередачеМеждуОрганизациями <> Неопределено Тогда
		СтруктураОтбор.Вставить("ИспользоватьПриПередачеМеждуОрганизациями", ИспользоватьПриПередачеМеждуОрганизациями);
	КонецЕсли;
		
	ВидЦен = ОткрытьФормуМодально("Справочник.ВидыЦен.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбор));
	Возврат ВидЦен;
	
КонецФункции

// Устанавливает у выделенных в списке соглашений статус "НеСогласовано".
//
// Параметры:
//	Список - ДинамическийСписок - Список соглашений
//
Процедура УстановитьСтатусСоглашенийСКлиентамиНеСогласовано(Список) Экспорт
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке соглашений будет установлен статус ""Не согласовано"". По действующим соглашениям могут быть оформлены документы. После изменения статуса действующие соглашения перестанут действовать. Продолжить?'");
	Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ПродажиВызовСервера.УстановитьСтатусСоглашенийСКлиентамиНеСогласовано(Список.ВыделенныеСтроки);
	ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, Список, "Не согласовано");
	
КонецПроцедуры

// Устанавливает у выделенных в списке соглашений статус "Действует".
//
// Параметры:
//	Список - ДинамическийСписок - Список соглашений
//
Процедура УстановитьСтатусСоглашенийСКлиентамиДействует(Список) Экспорт
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке соглашений будет установлен статус ""Действует"". Продолжить?'");
	Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ПродажиВызовСервера.УстановитьСтатусСоглашенийСКлиентамиДействует(Список.ВыделенныеСтроки);
	ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, Список, "Действует");
	
КонецПроцедуры

// Устанавливает у выделенных в списке соглашений статус "Закрыто".
//
// Параметры:
//	Список - ДинамическийСписок - Список соглашений
//
Процедура УстановитьСтатусСоглашенийСКлиентамиЗакрыто(Список) Экспорт
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке соглашений будет установлен статус ""Закрыто"". После изменения статуса действующие соглашения перестанут действовать. Продолжить?'");
	Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ПродажиВызовСервера.УстановитьСтатусСоглашенийСКлиентамиЗакрыто(Список.ВыделенныеСтроки);
	ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, Список, "Закрыто");
	
КонецПроцедуры

// Устанавливает у выделенных в таблице строк признак Отменено и заполняет причину отмены.
//
// Параметры:
//	ТабличнаяЧасть - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку
//	ВыделенныеСтроки - Массив - массив выделенных пользователем строк табличной части
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина, по которой отменяются строки
//	СтруктураДействийСИзмененнымиСтроками - Структура - Структура действий с измененными строками
//
Процедура ОтменитьВыделенныеСтроки(ТабличнаяЧасть, ВыделенныеСтроки, ПричинаОтмены, СтруктураДействийСИзмененнымиСтроками=Неопределено) Экспорт
	
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(ТекСтрока);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
			КонецЕсли;
			
			Если СтрокаТаблицы.ПричинаОтмены <> ПричинаОтмены Тогда
				СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
			КонецЕсли;
			
			Если СтруктураДействийСИзмененнымиСтроками <> Неопределено Тогда
				ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействийСИзмененнымиСтроками, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает реализацию товаров и услуг по одному или нескольким заказам клиентов
//
// Параметры:
//	Список - ТаблицаФормы - список заказов клиентов, по выделенным заказам которого будет создана реализация
//	ИспользоватьРеализациюПоНесколькимЗаказам - Булево - значение ф.о. ИспользоватьРеализациюПоНесколькимЗаказам
//	Склад - СправочникСсылка.Склады - склад, по которому необходимо оформить реализацию товаров и услуг
//
Процедура СоздатьРеализациюТоваровУслугНаОснованииЗаказаКлиента(Список, ИспользоватьРеализациюПоНесколькимЗаказам, Склад = Неопределено, ДатаОтгрузки = Неопределено) Экспорт
	
	ТекущиеДанные = Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		Предупреждение(ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОснования = Новый Структура();
	
	Если Список.ВыделенныеСтроки.Количество() = 1 Или Не ИспользоватьРеализациюПоНесколькимЗаказам Тогда
		
		Если ТипЗнч(Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
			Предупреждение(ТекстПредупреждения);
			Возврат;
			
		КонецЕсли;
		
		ПараметрыОснования.Вставить("ДокументОснование", ТекущиеДанные.Ссылка);
		ПараметрыОснования.Вставить("СкладОтгрузки",     Склад);
		ПараметрыОснования.Вставить("ДатаОтгрузки",      ДатаОтгрузки);
		ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента",
			Новый Структура("Основание", ПараметрыОснования));
	
	Иначе
		
		МассивСсылок = Новый Массив();
		
		Для Каждого ЗаказКлиента Из Список.ВыделенныеСтроки Цикл
		
			Если ТипЗнч(ЗаказКлиента) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСсылок.Добавить(Список.ДанныеСтроки(ЗаказКлиента).Ссылка);
			
		КонецЦикла;
		
		Если МассивСсылок.Количество() = 0 Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
			Предупреждение(ТекстПредупреждения);
			Возврат;
			
		КонецЕсли;
		
		РеквизитыШапки = Новый Структура();
		ОчиститьСообщения();
		
		Если ПродажиВызовСервера.СформироватьДанныеЗаполненияРеализации(МассивСсылок, РеквизитыШапки) Тогда
		
			ПараметрыОснования.Вставить("РеквизитыШапки",    РеквизитыШапки);
			ПараметрыОснования.Вставить("ДокументОснование", МассивСсылок);
			ПараметрыОснования.Вставить("СкладОтгрузки",     Склад);
			ПараметрыОснования.Вставить("ДатаОтгрузки",      ДатаОтгрузки);
	
			ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента",
				Новый Структура("Основание", ПараметрыОснования));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает Акт выполненных работ по одному или нескольким заказам клиентов
//
// Параметры:
//	Список - ТаблицаФормы - список заказов клиентов, по выделенным заказам которого будет создано Акт выполненных работ
//	ИспользоватьРеализациюПоНесколькимЗаказам - Булево - значение ф.о. ИспользоватьРеализациюПоНесколькимЗаказам
//
Процедура СоздатьАктВыполненныхРаботНаОснованииЗаказаКлиента(Список, ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам, ДатаОтгрузки) Экспорт
	
	ТекущиеДанные = Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		Предупреждение(ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОснования = Новый Структура();
	
	Если Список.ВыделенныеСтроки.Количество() = 1 Или Не ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам Тогда
		
		Если ТипЗнч(Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
			Предупреждение(ТекстПредупреждения);
			Возврат;
			
		КонецЕсли;
	
		ПараметрыОснования.Вставить("ДокументОснование", ТекущиеДанные.Ссылка);
		ПараметрыОснования.Вставить("ДатаОтгрузки",      ДатаОтгрузки);
		ОткрытьФорму("Документ.АктВыполненныхРабот.Форма.ФормаДокумента",
			Новый Структура("Основание", ПараметрыОснования));
	
	Иначе
		
		МассивСсылок = Новый Массив();
		
		Для Каждого ЗаказКлиента Из Список.ВыделенныеСтроки Цикл
		
			Если ТипЗнч(ЗаказКлиента) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСсылок.Добавить(Список.ДанныеСтроки(ЗаказКлиента).Ссылка);
			
		КонецЦикла;
		
		Если МассивСсылок.Количество() = 0 Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
			Предупреждение(ТекстПредупреждения);
			Возврат;
			
		КонецЕсли;
		
		РеквизитыШапки = Новый Структура();
		ОчиститьСообщения();
		
		Если ПродажиВызовСервера.СформироватьДанныеЗаполненияАктовВыполненныхРабот(МассивСсылок, РеквизитыШапки) Тогда
		
			ПараметрыОснования.Вставить("РеквизитыШапки",    РеквизитыШапки);
			ПараметрыОснования.Вставить("ДокументОснование", МассивСсылок);
			ПараметрыОснования.Вставить("ДатаОтгрузки",      ДатаОтгрузки);
			
			ОткрытьФорму("Документ.АктВыполненныхРабот.Форма.ФормаДокумента",
				Новый Структура("Основание", ПараметрыОснования));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Процедуры оповещения пользователя о выполненных действиях.

//Процедура показывает оповещение после обработки выделенных в списке соглашений с клиентами.
//
// Параметры
//	КоличествоОбработанных - Число - количество успешно обработанных соглашений с клиентами
//	СписокДокументов       - ДинамическийСписок - Элемент формы
//	Статус                 - Установленный статус
//
Процедура ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, СписокДокументов, Статус)
	
	Если КоличествоОбработанных > 0 Тогда
		
		СписокДокументов.Обновить();
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке соглашений с клиентами установлен статус ""%Статус%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        СписокДокументов.ВыделенныеСтроки.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%",                 Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Статус ""%Статус%"" не установлен ни для одного соглашения с клиентом.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры
