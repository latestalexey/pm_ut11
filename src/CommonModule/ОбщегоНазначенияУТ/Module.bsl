////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Методы работы автозаполнения реквизитов документа.

Функция ПолучитьКартинкуКомментария(Комментарий) Экспорт
	
	Если ЗначениеЗаполнено(Комментарий) Тогда
		Картинка = БиблиотекаКартинок.Комментарий;
	Иначе
		Картинка = Новый Картинка;
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции // ПолучитьКартинкуКомментария()

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти) Экспорт

	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти));

КонецФункции // ПолучитьОписаниеТиповЧисла()

// Служебная функция, предназначенная для получения описания типов даты
// 
// Параметры:
//  ЧастиДаты - системное перечисление ЧастиДаты.
// 
Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт

	Возврат Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты));

КонецФункции // ПолучитьОписаниеТиповДаты()

//Дополняет одну таблицу значений строками другой таблицы значений
//Параметры:
//	Приемник - таблица значений, в которую добавляются строки
//	Источник - таблица значений, из которой беруться добавляемые строки
Процедура ДобавитьСтрокиВТаблицу(Приемник, Источник) Экспорт

	Для каждого СтрокаИсточника Из Источник Цикл
		ЗаполнитьЗначенияСвойств(Приемник.Добавить(), СтрокаИсточника);
	КонецЦикла;

КонецПроцедуры

//Заполняет колонку таблицы значений последовательными номерами
//Параметры:
//	Таблица - таблица значений, строки которой нужно пронумеровать
//	ИмяКолонкиНомераСтроки - колонка таблицы значений, в которой будут указаны номера строк
Процедура ПронумероватьТаблицуЗначений(Таблица, ИмяКолонкиНомераСтроки) Экспорт

	Таблица.Колонки.Добавить(ИмяКолонкиНомераСтроки, ПолучитьОписаниеТиповЧисла(15, 0));

	КоличествоСтрок = Таблица.Количество() - 1;
	Для НомерСтроки = 0 По КоличествоСтрок Цикл
		Таблица[НомерСтроки][ИмяКолонкиНомераСтроки] = НомерСтроки;
	КонецЦикла;

КонецПроцедуры

// Выгружает таблицу значений из ДанныеФормыКоллекция и ТабличнаяЧасть
//
// Параметры:
// 		ТаблицаИсточник - ДанныеФормыКоллекция, ТабличнаяЧасть - Таблица источник выгрузки
// 		Строки - Массив, Структура - Массив строк для выгрузки или структура отбора
// 		Колонки - Строка - Перечисленные через запятую имена колонок для выгрузки
// 		КолонкиПоЗначению - Структура - Структура колонок для добавление в результирующую таблицу:
// 										Ключ - Имя новой колонки
// 										Значение - Значение для подстановки по все строки новой колонки
// 		НовыеИменаКолонок - Структура - Структура с данными о переименовании колонок в результирующей таблице:
// 										Ключ - Текущее имя колонки
// 										Значение - Новое имя колонки
//
// Возвращаемое значение:
// 		ТаблицаЗначений - Таблица результат выгрузки из таблицы источника с добавленными и переименоваными колонками
//
Функция ВыгрузитьТаблицуЗначений(ТаблицаИсточник, Строки=Неопределено, Колонки, Знач КолонкиПоЗначению=Неопределено, Знач НовыеИменаКолонок=Неопределено) Экспорт
	
	// Определение значений по умолчанию
	Если КолонкиПоЗначению = Неопределено Тогда
		КолонкиПоЗначению = Новый Структура;
	КонецЕсли;
	Если НовыеИменаКолонок = Неопределено Тогда
		НовыеИменаКолонок = Новый Структура;
	КонецЕсли;
	
	// Определить список выгружаемых колонок
	СтруктураДругихИменКолонок = Новый Структура;
	Для Каждого НовоеИмя Из НовыеИменаКолонок Цикл
		СтруктураДругихИменКолонок.Вставить(НовоеИмя.Значение, НовоеИмя.Ключ);
	КонецЦикла;
	ИменаКолонок = "";
	ИмяКолонки = "";
	СтруктураКолонок = Новый Структура(Колонки);
	Для Каждого Колонка Из СтруктураКолонок Цикл
		Если Не СтруктураДругихИменКолонок.Свойство(Колонка.Ключ, ИмяКолонки) Тогда
			ИмяКолонки = Колонка.Ключ;
		КонецЕсли;
		Если Не КолонкиПоЗначению.Свойство(ИмяКолонки) Тогда
			ИменаКолонок = ИменаКолонок + ", " + ИмяКолонки;
		КонецЕсли;
	КонецЦикла;
	
	// Выгрузить из таблицы источника
	ТаблицаРезультата = ТаблицаИсточник.Выгрузить(Строки, Сред(ИменаКолонок, 3));
	
	// Добавить новые колонки в таблицу результата
	Если КолонкиПоЗначению <> Неопределено Тогда
		Для Каждого Колонка Из КолонкиПоЗначению Цикл
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(Колонка.Значение));
			ТаблицаРезультата.Колонки.Добавить(Колонка.Ключ, Новый ОписаниеТипов(МассивТипов));
			ТаблицаРезультата.ЗаполнитьЗначения(Колонка.Значение, Колонка.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	// Переименовать колонки в таблице результата
	Если НовыеИменаКолонок <> Неопределено Тогда
		Для Каждого Колонка Из НовыеИменаКолонок Цикл
			ТаблицаРезультата.Колонки[Колонка.Ключ].Имя = Колонка.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаРезультата;
	
КонецФункции // ВыгрузитьТаблицуЗначений()

// Получает и возвращает запрос из переданного макета компоновки данных
//
// Параметры:
//  Макет - макет компоновки данных, из которого требуется получить запрос.
//  ИмяНабораДанных - имя набора данных из макета, для которого получается запрос.
//
// Возвращаемое значение:
//  Запрос, сформированный на основании макета компоновки
//
Функция ПолучитьЗапросИзМакетаКомпоновки(Макет, ИмяНабораДанных) Экспорт

	Запрос = Новый Запрос(Макет.НаборыДанных[ИмяНабораДанных].Запрос);

	Для Каждого Параметр Из Макет.ЗначенияПараметров Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, Параметр.Значение);
	КонецЦикла;

	Возврат Запрос;

КонецФункции

// Получает и возвращает макет компоновки данных для схемы компоновки
//
// Параметры:
//  СхемаКомпоновки - схема компоновки данных, для которой получается макет компоновки
//  Настройки - настройки компоновки, применяемые к схеме
//
// Возвращаемое значение:
//  Макет компоновки данных
//
Функция ПолучитьМакетКомпоновки(СхемаКомпоновки, Настройки) Экспорт

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	Возврат КомпоновщикМакета.Выполнить(СхемаКомпоновки, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

КонецФункции

//Процедура делает запись в журнал регистрации и сообщает пользователю, если это сообщение об ошибке 
// Параметры:
//   ПараметрыЖурнала - Структура - параметры записи в журнал регистрации
//			Свойства:
//       		ГруппаСобытий - Строка - префикс для имени события журнала регистрации
//       		Метаданные - ОбъектМетаданных - метаданные для записи в журнал регистрации
//       		Данные - Произвольный - данные для записи в журнал регистрации
//   ИмяСобытия - Строка  - имя события (в журнал событие записывается в формате ГруппаСобытий.ИмяСобытия)
//   Уровень - УровеньЖурналаРегистрации  - Соответствует уровням журнала регистрации
//   Комментарий - Строка - комментарий о событии
//   ИнформацияОбОшибке - ИнформацияОбОшибке, Строка - Информация об ошибке, которую так же необходимо задокументировать в комментарии журнала регистрации
//
Процедура ЗаписатьВЖурналСообщитьПользователю(ПараметрыЖурнала, УровеньЖурнала, ИмяСобытия, Знач Комментарий = "", ИнформацияОбОшибке = Неопределено) Экспорт
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		Если Комментарий = "" Тогда
			ТестСообщенияПользователю = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			Комментарий = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Иначе
			ТестСообщенияПользователю = Комментарий + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			Комментарий = Комментарий + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") 
			И Не ПустаяСтрока(ИнформацияОбОшибке) Тогда
			Комментарий = Комментарий + Символы.ПС + ИнформацияОбОшибке;
		КонецЕсли;
		ТестСообщенияПользователю = Комментарий;
	КонецЕсли;
	
	// Журнал регистрации 
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьЖурналаРегистрации(
		ПараметрыЖурнала.ГруппаСобытий + ?(ИмяСобытия = "", "", ". "+ ИмяСобытия), 
		УровеньЖурнала, 
		ПараметрыЖурнала.Метаданные, 
		ПараметрыЖурнала.Данные, 
		Комментарий
	);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка 
		Или УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СокрЛП(ТестСообщенияПользователю),ПараметрыЖурнала.Данные);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ключ данных для подстановки в сообщение пользователю
// Ключ данных нужен при групповой обработке объектов - если он установлен, то при нажатии пользователем на сообщение
// будет открываться форма объекта
//
//	Параметры:
//		Объект - Произвольный - объект, для которого нужно получить ключ данных
//	
//	Возвращаемое значение
//		Ссылка - ссылка на объект информационной базы
//
Функция КлючДанныхДляСообщенияПользователю(Объект) Экспорт
	
	КлючДанных = Неопределено;
	XMLТипЗнч = XMLТипЗнч(Объект); 
	
	Если XMLТипЗнч <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч.ИмяТипа;
		Если Найти(ТипЗначенияСтрокой, "Object.") > 0 Тогда
			КлючДанных = Объект.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КлючДанных;
	
КонецФункции

// Вызывается из подписки ЗаполнитьРеквизитыОбъекта
// Проверет заполненность реквизитов формы, связанных с фукциональными опциями
// ИспользоватьНесколькоОрганизаций, ИспользоватьНесколькоСкладов, ИспользоватьНесколькоВалют
//
//	Параметры:
//		Объект - Произвольный - объект
//		ДанныеЗаполнения - Структура
//		СтандартнаяОбработка - Структура
//	
//	Возвращаемое значение
//		Ссылка - ссылка на объект информационной базы
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		И ЕстьРеквизитОбъекта(Объект, "Организация")
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации");
			
			Если Запрос.Выполнить().Выбрать().Количество() = 2 Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Организация"". В информационной базе введено несколько организаций,
				                             |Включите функциональную опцию ""Использовать несколько организаций""!'");
			Иначе
				ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Организация"". Возможно, в информационной базе не введено ни одной организации!'");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов")
		И ЕстьРеквизитОбъекта(Объект, "Склад")
		И Не ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Объект.Склад);
		Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Склады.Ссылка
			|ИЗ
			|	Справочник.Склады КАК Склады");
			
			Если Запрос.Выполнить().Выбрать().Количество() = 2 Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Склад"". В информационной базе введено несколько складов,
				                             |Включите функциональную опцию ""Использовать несколько складов""!'");
			Иначе
				ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Склад"". Возможно, в информационной базе не введено ни одного склада'");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют")
		И ЕстьРеквизитОбъекта(Объект, "Валюта")
		И Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Объект.Валюта);
		Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Валюта"". Установите валюту управленческого учета!'");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют")
		И ЕстьРеквизитОбъекта(Объект, "ВалютаВзаиморасчетов")
		И Не ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
		Объект.ВалютаВзаиморасчетов = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Объект.ВалютаВзаиморасчетов);
		Если Не ЗначениеЗаполнено(Объект.ВалютаВзаиморасчетов) Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""ВалютаВзаиморасчетов"". Установите валюту управленческого учета!'");
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс")
		И ЕстьРеквизитОбъекта(Объект, "Касса")
		И Не ЗначениеЗаполнено(Объект.Касса) Тогда
		Объект.Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(,,Объект.Касса);
		Если Не ЗначениеЗаполнено(Объект.Касса) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	Кассы.Ссылка
			|ИЗ
			|	Справочник.Кассы КАК Кассы");
			
			Если Запрос.Выполнить().Выбрать().Количество() = 2 Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Касса"". В информационной базе введено несколько касс,
				                             |Включите функциональную опцию ""Использовать несколько касс""!'");
			Иначе
				ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Касса"". Возможно, в информационной базе не введено ни одной кассы!'");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов")
		И ЕстьРеквизитОбъекта(Объект, "БанковскийСчет")
		И Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(,,Объект.БанковскийСчет);
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	БанковскиеСчетаОрганизаций.Ссылка
			|ИЗ
			|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций");
			
			Если Запрос.Выполнить().Выбрать().Количество() = 2 Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Банковский счет"". В информационной базе введено несколько банковских счетов организаций,
				                             |Включите функциональную опцию ""Использовать несколько банковских счетов""!'");
			Иначе
				ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Банковский счет"". Возможно, в информационной базе не введено ни одного банковского счета организации!'");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для получения представления данных.

//Возвращает строковое представление документа для отображения в сообщениях
//Параметры
// 		Ссылка - ссылка на документ
// 		Номер - номер документа
// 		Дата - дата документа
Функция ПолучитьПредставлениеДокумента(Ссылка, Номер, Дата) Экспорт
	
	Возврат Ссылка.Метаданные().Синоним + " " + Номер + " от " + Формат(Дата,"ДЛФ=D");
	
КонецФункции // ПолучитьПредставлениеДокумента()

// Возвращает строковое предстваление источника причины отмены заказа поставщика
//
// Параметры:
// 		ИсточникПричиныОтмены - Перечисление.ИсточникиПричинОтменыЗаказовПоставщикам
//
// Возвращаемое значение:
// 		Строка - Строковое представление источника причины отмены
//
Функция ПолучитьПредставлениеПоИнициаторуОтменыЗаказаПоставщику(ИнициаторОтмены) Экспорт
	
	Если ИнициаторОтмены = ПредопределенноеЗначение("Перечисление.ИнициаторОтменыЗаказовПоставщикам.Поставщик") Тогда
		
		Возврат НСтр("ru='Отмененные по инициативе поставщика'");
		
	ИначеЕсли ИнициаторОтмены = ПредопределенноеЗначение("Перечисление.ИнициаторОтменыЗаказовПоставщикам.НашеПредприятие") Тогда
		
		Возврат НСтр("ru='Отмененные по нашей инициативе'");
		
	Иначе
		
		Возврат НСтр("ru='Неотмененные заказы'");
		
	КонецЕсли;
	
КонецФункции

// Возвращает сокращенное строковое представление коллекции значений
// 
// Параметры:
//  Коллекция 						- массив или список значений.
//  МаксимальноеКоличествоЭлементов - число, максимальное количество элементов включаемое в представление.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПолучитьСокращенноеПредставлениеКоллекцииЗначений(Коллекция, МаксимальноеКоличествоЭлементов = 2) Экспорт
	
	СтрокаПредставления = "";
	
	КоличествоЗначений			 = Коллекция.Количество();
	КоличествоВыводимыхЭлементов = Мин(КоличествоЗначений, МаксимальноеКоличествоЭлементов);
	
	Если КоличествоВыводимыхЭлементов = 0 Тогда
		
		Возврат "";
		
	Иначе
		
		Для НомерЗначения = 1 По КоличествоВыводимыхЭлементов Цикл
			
			СтрокаПредставления = СтрокаПредставления + Коллекция.Получить(НомерЗначения - 1) + ", ";	
			
		КонецЦикла;
		
		СтрокаПредставления = Лев(СтрокаПредставления, СтрДлина(СтрокаПредставления) - 2);
		Если КоличествоЗначений > КоличествоВыводимыхЭлементов Тогда
			СтрокаПредставления = СтрокаПредставления + ", ... ";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции.

// Процедура устанавливает блокировку документа для редактирования.
//
// Параметры:
//	ДокументСсылка - документ, на который устанавливается блокировка
//	ОтменятьТранзакцию - Булево - Признак необходимости отмены транзакции
//
Процедура ЗаблокироватьДокументДляРедактирования(ДокументСсылка, ОтменятьТранзакцию = Ложь) Экспорт
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ДокументСсылка);
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось заблокировать %1. %2'"),
			ДокументСсылка,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		Если ОтменятьТранзакцию Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры // ЗаблокироватьДокументДляРедактирования()

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
// 		Объект                      - ДокументОбъект, СправочникОбъект - Проверяемый объект.
// 		МассивПроверяемыхРеквизитов - Массив - массив проверяемых реквизитов.
//
// Возвращаемое значение:
// 		Булево - Истина, если значение хотя бы одного реквизита не заполнено, иначе Ложь
//
Функция ПроверитьЗаполнениеРеквизитовОбъекта(Объект, МассивПроверяемыхРеквизитов) Экспорт
	
	Перем ПроверяемыеРеквизитыТЧ;
	Отказ = Ложь;
	
	// Получение метаданных объекта
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	
	// Создание структуры стандартных реквизитов
	СтандартныеРеквизиты = Новый Структура;
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		СтандартныеРеквизиты.Вставить(Реквизит.Имя, ?(ЗначениеЗаполнено(Реквизит.Синоним), Реквизит.Синоним, Реквизит.Имя));
	КонецЦикла;
	
	// Создание структуры для хранения имен табличных частей и проверяемых реквизитов в них.
	// 		Ключ -  Имя табличной части
	// 		Значение - Массив - Массив строк, реквизитов этой табличной части для проверки
	ТабличныеЧасти = Новый Структура;
	
	// Создание шаблонов сообщений об ошибках не заполненных реквизитов и реквизитов табличных частей
	ШаблонОшибкиРеквизита = НСтр("ru='Поле ""%ИмяРеквизита%"" не заполнено'");
	ШаблонОшибкиТЧ = НСтр("ru='Не введено ни одной строки в список ""%ИмяРеквизита%""'");
	ШаблонОшибкиРеквизитаТЧ = НСтр("ru='Не заполнена колонка ""%ИмяРеквизита%"" в строке %НомерСтроки% списка ""%ИмяТабличнойЧасти%""'");
	
	// Проверка реквизитов объекта и заполнение структуры по реквизитам табличных частей
	Для Каждого Реквизит Из МассивПроверяемыхРеквизитов Цикл
		
		ПозицияТочки = Найти(Реквизит,".");
		
		Если ПозицияТочки > 0 Тогда // В случае если указан реквизит табличной части
			
			ДлинаСтроки       = СтрДлина(Реквизит);
			ИмяТабличнойЧасти = Лев(Реквизит, ПозицияТочки-1);
			ИмяРеквизита      = Прав(Реквизит, ДлинаСтроки - ПозицияТочки);
			
			// Сохранение проверяемого реквизита табличной части в структуру
			Если НЕ ТабличныеЧасти.Свойство(ИмяТабличнойЧасти, ПроверяемыеРеквизитыТЧ) Тогда
				ПроверяемыеРеквизитыТЧ = Новый Массив;
				ТабличныеЧасти.Вставить(ИмяТабличнойЧасти, ПроверяемыеРеквизитыТЧ);
			КонецЕсли;
			ПроверяемыеРеквизитыТЧ.Добавить(ИмяРеквизита);
			
		Иначе // В случае если указан реквизит объекта
			
			Если Не ЗначениеЗаполнено(Объект[Реквизит]) Тогда
				
				Если МетаданныеОбъекта.Реквизиты.Найти(Реквизит) <> Неопределено Тогда // Если указано имя реквизита
					ТекстОшибки = СтрЗаменить(ШаблонОшибкиРеквизита, "%ИмяРеквизита%",
						МетаданныеОбъекта.Реквизиты[Реквизит].Синоним
					);
				ИначеЕсли СтандартныеРеквизиты.Свойство(Реквизит) Тогда // Если указано имя стандартного реквизита
					ТекстОшибки = СтрЗаменить(ШаблонОшибкиРеквизита, "%ИмяРеквизита%",
						СтандартныеРеквизиты[Реквизит]
					);
				Иначе // Если указано имя табличной части
					ТекстОшибки = СтрЗаменить(ШаблонОшибкиТЧ, "%ИмяРеквизита%",
						МетаданныеОбъекта.ТабличныеЧасти[Реквизит].Синоним
					);
				КонецЕсли;
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					Объект,
					Реквизит,
					,
					Отказ
				);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка реквизитов в табличных частях
	Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
		
		ИмяТабличнойЧасти = ТабличнаяЧасть.Ключ;
		ТабличнаяЧастьОбъекта = Объект[ТабличнаяЧасть.Ключ];
		МассивРеквизитов = ТабличнаяЧасть.Значение;
		
		// Цикл по всем строкам табличной части.
		Для НомерСтроки=0 По ТабличнаяЧастьОбъекта.Количество()-1 Цикл
			
			// Цикл по всем проверяемым реквизитам для текущей табличной части.
			Для НомерРеквизита=0 По МассивРеквизитов.Количество()-1 Цикл
				
				ИмяРеквизита = МассивРеквизитов[НомерРеквизита];
				
				Если Не ЗначениеЗаполнено(ТабличнаяЧастьОбъекта[НомерСтроки][ИмяРеквизита]) Тогда
					
					ТекстОшибки = СтрЗаменить(ШаблонОшибкиРеквизитаТЧ, "%ИмяРеквизита%", МетаданныеОбъекта.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяРеквизита].Синоним);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Формат(НомерСтроки+1, "ЧГ=0"));
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяТабличнойЧасти%", МетаданныеОбъекта.ТабличныеЧасти[ИмяТабличнойЧасти].Синоним);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						Объект,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, НомерСтроки+1, ИмяРеквизита),
						,
						Отказ
					);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивПроверяемыхРеквизитов.Очистить();
	
	Возврат Отказ;
	
КонецФункции // ПроверитьЗаполнениеРеквизитовОбъекта()

// Осуществляет проверку соответствия организации документа и хозяйственной операции.
//
Процедура ПроверитьПравильностьУказанияХозяйственнойОперации(ДокументОбъект, Отказ) Экспорт
	
	Если ДокументОбъект.Организация = Справочники.Организации.УправленческаяОрганизация
	   И (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет
	 ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет) Тогда
	 
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В документе нельзя указывать операцию %1 и управленческую организацию'"),
			ДокументОбъект.ХозяйственнаяОперация
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"ХозяйственнаяОперация",
			,
			Отказ
		);
	 
	КонецЕсли;
	
КонецПроцедуры // ПроверитьПравильностьУказанияХозяйственнойОперации()

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
// Документ           - ДокументСсылка - Документ, на основании которого осуществляется ввод
// Статус             - Статус документ, на основании которого осуществляется ввод
// ЕстьОшибкиПроведен - Булево - Если Истина - документ, на основании которого осуществляется ввод, не проведен
// ЕстьОшибкиСтатус   - Булево - Если Истина - документ, на основании которого осуществляется ввод, имеет некорректный статус
//
Процедура ПроверитьВозможностьВводаНаОсновании(Документ, Статус = Неопределено, ЕстьОшибкиПроведен = Ложь, ЕстьОшибкиСтатус = Ложь, МассивДопустимыхСтатусов = Неопределено) Экспорт
	
	Если ЕстьОшибкиПроведен Тогда
		
		ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", Документ);
	
		ВызватьИсключение ТекстОшибки;
		
	ИначеЕсли ЕстьОшибкиСтатус Тогда
		
		Если МассивДопустимыхСтатусов = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании запрещен.'");
		ИначеЕсли ТипЗнч(МассивДопустимыхСтатусов) = Тип("Массив") Тогда
			
			ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании разрешен в %СтрокаДопустимыхСтатусов%.'");
			СтрокаДопустимыхСтатусов = "";
			
			Для Каждого ДопустимыйСтатус Из МассивДопустимыхСтатусов Цикл
				СтрокаДопустимыхСтатусов = СтрокаДопустимыхСтатусов + """"+ ДопустимыйСтатус + """, ";
			КонецЦикла;
			
			СтрокаДопустимыхСтатусов = Лев(СтрокаДопустимыхСтатусов, СтрДлина(СтрокаДопустимыхСтатусов)-2);
			
			Если МассивДопустимыхСтатусов.Количество() = 0 Тогда
				ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании запрещен.'");
			ИначеЕсли МассивДопустимыхСтатусов.Количество() = 1 Тогда
				ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании разрешен только в статусе %СтрокаДопустимыхСтатусов%.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтрокаДопустимыхСтатусов%", СтрокаДопустимыхСтатусов);
			Иначе
				ТекстОшибки = НСтр("ru='Документ %Документ% находится в статусе ""%Статус%"". Ввод на основании разрешен только в статусах %СтрокаДопустимыхСтатусов%.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтрокаДопустимыхСтатусов%", СтрокаДопустимыхСтатусов);
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", Документ);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%",   Статус);
	
		//ВызватьИсключение ТекстОшибки;
		//АСТЕК. всем все можно
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьВозможностьВводаНаОсновании()

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
// Документ           - ДокументСсылка - Документ, на основании которого осуществляется ввод
// Статус             - Статус документ, на основании которого осуществляется ввод
// ЕстьОшибкиПроведен - Булево - Если Истина - документ, на основании которого осуществляется ввод, не проведен
// ЕстьОшибкиСтатус   - Булево - Если Истина - документ, на основании которого осуществляется ввод, имеет некорректный статус
//
Процедура ПроверитьВозможностьВводаНаОснованииВыкупаТары(Документ, ЕстьОшибкиПроведен, ЕстьОшибкиВернутьМногооборотнуюТару) Экспорт
	
	Если ЕстьОшибкиПроведен Тогда
		
		ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", Документ);
	
		ВызватьИсключение ТекстОшибки;
		
	ИначеЕсли ЕстьОшибкиВернутьМногооборотнуюТару Тогда
		
		ТекстОшибки = НСтр("ru='В документе %Документ% не стоит признак возврата многооборотной тары. Ввод на основании запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", Документ);
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьВозможностьВводаНаОснованииВыкупаВозвратаТары()

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
// ЕстьОшибкиТиповое  - Булево - Если Истина - соглашение, на основании которого осуществляется ввод - типовое
//
Процедура ПроверитьВозможностьВводаНаОснованииСоглашения(ЕстьОшибкиТиповое) Экспорт
	
	Если ЕстьОшибкиТиповое Тогда
		
		ТекстОшибки = НСтр("ru='Ввод на основании типового соглашения с клиентом запрещен.'");
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьВозможностьВводаНаОснованииСоглашения()

// Осуществляет проверку заполненности проверяемых реквизитов.
//
// Параметры:
// Партнер - СправочникСсылка.Партнеры - Партнер из сделки по продаже
//
Процедура ПроверитьВозможностьВводаНаОснованииСделкиПоПродаже(Партнер) Экспорт
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		
		ТекстОшибки = НСтр("ru='В сделке не указан партнер, ввод на основании запрещен.'");
	
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьВозможностьВводаНаОснованииСделкиПоПродаже()

// Устанавливает или сбрасывает флаг Согласован у справочника.
// Вызывается из процедуры ПередЗаписью документа.
//
// Параметры:
// ДокументОбъект     - СправочникОбъект - Справочник, в котором необходимо изменить флаг Согласован
// СтатусНеСогласован - Статус документа, в котором флаг Согласован должен быть сброшен
//
Процедура ИзменитьПризнакСогласованностиСправочника(СправочникОбъект, Знач СтатусНеСогласован = Неопределено) Экспорт
	
	// Справочник не имеет статуса
	Если СтатусНеСогласован = Неопределено Тогда
		
		Если Не СправочникОбъект.Согласован Тогда
			СправочникОбъект.Согласован = Истина;
		КонецЕсли;
		
	// Справочник имеет статус, в котором проведенный справочник не согласован
	Иначе
		
		Если СправочникОбъект.Статус = СтатусНеСогласован И СправочникОбъект.Согласован Тогда
			СправочникОбъект.Согласован = Ложь;
		ИначеЕсли СправочникОбъект.Статус <> СтатусНеСогласован И Не СправочникОбъект.Согласован Тогда
			СправочникОбъект.Согласован = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьПризнакСогласованностиСправочника()

// Устанавливает или сбрасывает флаг Согласован у документа.
// Вызывается из процедуры ПередЗаписью документа.
//
// Параметры:
// ДокументОбъект     - ДокументОбъект - Документ, в котором необходимо изменить флаг Согласован
// РежимЗаписи        - Режим записи документа
// СтатусНеСогласован - Статус документа, в котором флаг Согласован должен быть сброшен
//
Процедура ИзменитьПризнакСогласованностиДокумента(ДокументОбъект, Знач РежимЗаписи, Знач СтатусНеСогласован = Неопределено) Экспорт
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись Или
		 РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		Если ДокументОбъект.Согласован Тогда
			ДокументОбъект.Согласован = Ложь;
		КонецЕсли;
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		// Документ не имеет статуса
		Если СтатусНеСогласован = Неопределено Тогда
		
			Если Не ДокументОбъект.Согласован Тогда
				ДокументОбъект.Согласован = Истина;
			КонецЕсли;
			
		// Документ имеет статус из массива, в которых проведенный документ не согласован
		ИначеЕсли ТипЗнч(СтатусНеСогласован) = Тип("Массив") Тогда
			
			Если ДокументОбъект.Согласован Тогда
				
				Для Каждого ТекСтатус Из СтатусНеСогласован Цикл
					
					Если ДокументОбъект.Статус = ТекСтатус Тогда
						
						ДокументОбъект.Согласован = Ложь;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				ДокументСогласован = Истина;
				
				Для Каждого ТекСтатус Из СтатусНеСогласован Цикл
					
					Если ДокументОбъект.Статус = ТекСтатус Тогда
						ДокументСогласован = Ложь;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ДокументСогласован Тогда
					ДокументОбъект.Согласован = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		// Документ имеет статус, в котором проведенный документ не согласован
		Иначе
			
			Если ДокументОбъект.Статус = СтатусНеСогласован И ДокументОбъект.Согласован Тогда
				ДокументОбъект.Согласован = Ложь;
			ИначеЕсли ДокументОбъект.Статус <> СтатусНеСогласован И Не ДокументОбъект.Согласован Тогда
				ДокументОбъект.Согласован = Истина;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ИзменитьПризнакСогласованностиДокумента()

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме
// Параметры:
//   Форма - Форма, в которой необходимо настроить подключаемое оборудование
//
Процедура НастроитьПодключаемоеОборудование(Форма) Экспорт
	
	ТипыПодключенногоОборудования = ПодключаемоеОборудованиеУТПовтИсп.ТипыПодключенногоОборудования();
	
	Форма.ИспользоватьПодключаемоеОборудование = ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования);
	
	ЕстьТСД  =
		ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных) <> Неопределено;
	ЕстьВесы =
		ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Найти(Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы) <> Неопределено;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТоварыЗагрузитьДанныеИзТСД",
		"Видимость",
		Форма.ИспользоватьПодключаемоеОборудование И ЕстьТСД
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ВыгрузитьДанныеВТСД",
		"Видимость",
		Форма.ИспользоватьПодключаемоеОборудование И ЕстьТСД
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ТоварыПолучитьВес",
		"Видимость",
		Форма.ИспользоватьПодключаемоеОборудование И ЕстьВесы
	);
	
КонецПроцедуры

// Проверяет, что включена ф.о "Использовать подключаемое оборудование",
// настроено ли оборудование и авторизовался пользователь,
// а не внешний пользователь.
Функция ИспользоватьПодключаемоеОборудование(ТипыПодключенногоОборудования = Неопределено) Экспорт
	
	ИспользоватьПодключаемоеОборудование = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	ПользовательАвторизовался 			 = ТипЗнч(Пользователи.АвторизованныйПользователь()) = Тип("СправочникСсылка.Пользователи");
	
	Если ТипыПодключенногоОборудования = Неопределено Тогда
		ТипыПодключенногоОборудования = ПодключаемоеОборудованиеУТПовтИсп.ТипыПодключенногоОборудования();
	КонецЕсли;
	
	Возврат
		ИспользоватьПодключаемоеОборудование
		И ПользовательАвторизовался
		И ТипыПодключенногоОборудования <> Неопределено
		И ТипыПодключенногоОборудования.Количество() > 0;
												 
КонецФункции

// Функция возвращает календарь предприятия
Функция ПолучитьКалендарьПредприятия(Календарь) Экспорт
	
	Если ЗначениеЗаполнено(Календарь) Тогда
		Возврат Календарь;
	Иначе
		Возврат Константы.ОсновнойКалендарьПредприятия.Получить();
	КонецЕсли;
	
КонецФункции

// Функция возвращает список разрешенных для чтения пользователей, принадлежащих ролям указанным в качестве параметра
//
// Параметры:
// 		МассивРолей - Массив - Массив со строковыми именами ролей
//
Функция ПолучитьСписокПользователейПоМассивуРолей(МассивРолей, ПредставлениеТекущегоПользователя = Неопределено) Экспорт
	
	СписокПользователей = Новый СписокЗначений;
	Если ПредставлениеТекущегоПользователя = Неопределено Тогда
		ПредставлениеТекущегоПользователя = НСтр("ru='<Мои документы>'");
	КонецЕсли;
	
	// Запрос получения списка всех пользователей. Выполняется в привилегированном режиме
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступаРоли.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПрофилиГруппДоступа
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|ГДЕ
	|	ПрофилиГруппДоступаРоли.Роль.Имя В(&МассивРолей)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрофилиГруппДоступаРоли.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ГруппыПользователейСостав.Пользователь, ГруппыДоступаПользователи.Пользователь) КАК Пользователь
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|		ПО ГруппыДоступаПользователи.Пользователь = ГруппыПользователейСостав.Ссылка
	|ГДЕ
	|	ГруппыДоступаПользователи.Ссылка.Профиль В
	|			(ВЫБРАТЬ
	|				ПрофилиГруппДоступа.Ссылка
	|			ИЗ
	|				ПрофилиГруппДоступа КАК ПрофилиГруппДоступа)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ГруппыПользователейСостав.Пользователь, ГруппыДоступаПользователи.Пользователь)";
	
	Запрос.УстановитьПараметр("МассивРолей", МассивРолей);
	
	МассивВсехПользователей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Запрос получения списка "разрешенных" пользователей
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка В(&МассивПользователей)
	|	И Пользователи.ПометкаУдаления = ЛОЖЬ
	|	И Пользователи.Недействителен = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование";
	Запрос.УстановитьПараметр("МассивПользователей", МассивВсехПользователей);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТекущийПользователь = Выборка.Пользователь Тогда
			СписокПользователей.Вставить(0, Выборка.Пользователь, ПредставлениеТекущегоПользователя);
		Иначе
			СписокПользователей.Добавить(Выборка.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокПользователей;
	
КонецФункции // ПолучитьСписокПользователейПоМассивуРолей()

// Заполняет картинку и текст, для предупреждения отгрузки с нескольких складов / поступления на несколько складов
//
// Параметры:
// Товары - Булево - ДанныеФормыКоллекция - таблица формы Товары
// СкладГруппа - Булево - выбранный в документе склад группа или элемент
// НеУчитыватьОтмененныеСтроки - Булево
// СтруктураДопПроверок - Структура с опциональными полями:
//  ПодразделениеОбязательно - Булево - Наличие поля означает: проверить необходимость
//    заполнения подразделения.
//  Подразделение - СправочникСсылка.СтруктураПредприятия - Поле есть только при наличии
//     поля ПодразделениеОбязательно, содержит текущее значение реквизита формы Подразделение.
//
Процедура ОбновитьЗависимыеРеквизитыФормы(Товары,
	                                      ПолеКартинки,
	                                      НадписьНесколькоСкладов,
	                                      СкладГруппа,
	                                      Склад,
	                                      СкладОбязателен,
	                                      НеУчитыватьОтмененныеСтроки=Ложь,
	                                      ТекстСообщения,
	                                      СтруктураПроверок = Неопределено) Экспорт

	Если СтруктураПроверок = Неопределено Тогда
		СтруктураПроверок = Новый Структура("Склад");
	КонецЕсли;
	
	КоличествоТоваровВсего = Товары.Количество();
	ПроверятьСклад         = Ложь;
	ПроверятьПодразделение = Ложь;
	
	Если СтруктураПроверок.Свойство("Склад") Тогда
		
		СкладОбязателен = Ложь;
		Если КоличествоТоваровВсего = 0 Или (Не СкладГруппа И ЗначениеЗаполнено(Склад)) Тогда
			ПолеКартинки = Новый Картинка();
			НадписьНесколькоСкладов = "";
		Иначе
			ПроверятьСклад = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураПроверок.Свойство("Подразделение") Тогда
		
		СтруктураПроверок.ПодразделениеОбязательно = Ложь;
		Если КоличествоТоваровВсего > 0
			И НЕ ЗначениеЗаполнено(СтруктураПроверок.Подразделение) Тогда
			ПроверятьПодразделение = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПроверятьСклад И Не ПроверятьПодразделение Тогда
		Возврат;
	КонецЕсли;
	
	МассивСкладов = Новый Массив();
	
	Для Каждого ТекСтрока Из Товары Цикл
		
		Если ПроверятьСклад Тогда
			
			Если ЗначениеЗаполнено(ТекСтрока.Склад)
				И МассивСкладов.Найти(ТекСтрока.Склад) = Неопределено Тогда
				
				Если НеУчитыватьОтмененныеСтроки Тогда
					Если Не ТекСтрока.Отменено Тогда
						МассивСкладов.Добавить(ТекСтрока.Склад);
					КонецЕсли;
				Иначе
					МассивСкладов.Добавить(ТекСтрока.Склад);
				КонецЕсли;
				
			КонецЕсли;
			
			Если (ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
				Или  ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара)
				И Не ЗначениеЗаполнено(Склад) Тогда
				СкладОбязателен = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПроверятьПодразделение Тогда
			Если ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа Тогда
				СтруктураПроверок.ПодразделениеОбязательно = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПроверятьСклад Тогда
		Если МассивСкладов.Количество() > 1 Тогда
			ПолеКартинки = БиблиотекаКартинок.Информация;
			НадписьНесколькоСкладов = СтрЗаменить(ТекстСообщения + НСтр("ru=': %КоличествоСкладовОтгрузки%'"), "%КоличествоСкладовОтгрузки%", МассивСкладов.Количество());
		Иначе
			ПолеКартинки = Новый Картинка();
			НадписьНесколькоСкладов = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьЗависимыеРеквизитыФормы()

Функция СвернутьТаблицуЗначенийПоРеквизиту(ТаблицаРеквизитыДокументов, ИмяРеквизита) Экспорт
	
	Таблица = ТаблицаРеквизитыДокументов.Скопировать();
	Таблица.Свернуть(ИмяРеквизита);
	Возврат Таблица;
	
КонецФункции // СвернутьТаблицуЗначенийПоРеквизиту()

// Функция проверяет наличие согласующего по указанной роли в регистре сведений Исполнители задач
//
//Параметры:
//	ПроверяемаяРоль - Ссылка на роль исполнителя - Элемент справочника РолиИсполнителей
//
Функция ПроверитьСогласующегоБизнесПроцесс(ПроверяемаяРоль) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнителиЗадач.Исполнитель КАК ЕстьИсполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя =&РольИсполнителя";

	Запрос.УстановитьПараметр("РольИсполнителя", ПроверяемаяРоль);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции // ПроверитьСогласующегоБизнесПроцесс()

//Фукнция раскладывает переданный массив сслылок в соотвествие по типам этих ссылок
//
//	Параметры:
//		МассивСсылок - Массив - массив ссылок на объекты информационной базы
//  Возвращаемое значение:
//		Соотвествие:
//			Ключ - полное имя типа ссылки
//	        Значение - массив ссылок этого типа
//
Функция СоответствиеМассивовПоТипамОбъектов(МассивСсылок) Экспорт
	
	СоответствиеТипов = Новый Соответствие;
	
	Для Каждого Объект Из МассивСсылок Цикл
		
		ТипОбъекта = Объект.Метаданные().ПолноеИмя();
		ТекущийТипОбъекта = СоответствиеТипов.Получить(ТипОбъекта);
		
		Если ТекущийТипОбъекта = Неопределено Тогда
			СоответствиеТипов.Вставить(ТипОбъекта, Новый Массив);
			ТекущийТипОбъекта = СоответствиеТипов.Получить(ТипОбъекта);
		КонецЕсли;
		ТекущийТипОбъекта.Добавить(Объект);
		
	КонецЦикла;
	
	Возврат СоответствиеТипов;
	
КонецФункции

// Возвращает разницу между двумя датами (в днях)
//
// Параметры
//  ДатаНачала 		- Дата - начальная дата периода
//  ДатаОкончания	- Дата - конечная дата периода
//
// Возвращаемое значение:
//   Число	 - количество дней между двумя датами
//
Функция РазностьДат(ДатаНачала, ДатаОкончания, Периодичность) Экспорт
	
	СекундВМинуте = 60;
	МинутВЧасе = 60;
	ЧасовВДне = 24;
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат Год(ДатаОкончания) - Год(ДатаНачала);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Возврат ?(Месяц(ДатаОкончания)>6, 2, 1) - ?(Месяц(ДатаНачала)>6, 2, 1) + 2*(Год(ДатаОкончания) - Год(ДатаНачала));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат Цел(Месяц(НачалоКвартала(ДатаОкончания))/3) - Цел(Месяц(НачалоКвартала(ДатаНачала))/3) + 4*(Год(ДатаОкончания) - Год(ДатаНачала));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат Месяц(ДатаОкончания) - Месяц(ДатаНачала) + 12*(Год(ДатаОкончания) - Год(ДатаНачала));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		Возврат Цел((ДатаОкончания - ДатаНачала)/(10 * СекундВМинуте*МинутВЧасе*ЧасовВДне));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат Цел((НачалоНедели(ДатаОкончания) - НачалоНедели(ДатаНачала))/(7 * СекундВМинуте*МинутВЧасе*ЧасовВДне));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		Возврат (ДатаОкончания - ДатаНачала)/(СекундВМинуте*МинутВЧасе*ЧасовВДне);
		
	КонецЕсли;
	
КонецФункции

// Проверяет использование объекта
//
// Параметры:
//  Параметры		- Структура - содержит объект использование которого нужно проверить
//  АдресХранилища	- Строка - адрес хранилища в которое будут помещен результат проверки
//
Процедура ПроверитьИспользованиеОбъекта(Параметры, АдресХранилища) Экспорт
	
	ЕстьСсылки = ОбщегоНазначенияВызовСервера.ЕстьСсылкиНаОбъект(Параметры.Объект);
	
	ПоместитьВоВременноеХранилище(ЕстьСсылки, АдресХранилища);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с СКД.

// Среди элементов полей СКД найти поле по имени.
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя) Экспорт
	
	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиПолеСКДПоИмени()

// Полное имя поля разделить по частям
//
Функция ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя) Экспорт

	масЧастей = Новый Массив;
	СтрИмя = ПолноеИмя;
	
	Пока Не ПустаяСтрока(СтрИмя) Цикл
		Если Лев(СтрИмя, 1) = "[" Тогда
			
			Поз = Найти(СтрИмя, "]");
			Если Поз = 0 Тогда
				масЧастей.Добавить(Сред(СтрИмя, 2));
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Сред(СтрИмя, 1, Поз));
				СтрИмя = Сред(СтрИмя, Поз + 2);
			КонецЕсли;
			
		Иначе
			
			Поз = Найти(СтрИмя, ".");
			Если Поз = 0 Тогда
				масЧастей.Добавить(СтрИмя);
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Лев(СтрИмя, Поз - 1));
				СтрИмя = Сред(СтрИмя, Поз + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат масЧастей;

КонецФункции // ИзПолногоИмениПоляПолучитьЧасти()

Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя) Экспорт

	масЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя);
	колЧастей = масЧастейИмен.Количество();
	
	текИмя = масЧастейИмен[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, текИмя);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По колЧастей Цикл
		текИмя = текИмя +"." + масЧастейИмен[Сч-1];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, текИмя);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Поле;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции установки статусов для массива документов.

// Устанавливает статус для списка документов
//
// Параметры:
// 		МассивДокументов - Массив - Массив документов
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров
//
// Возвращаемое значение:
// 		Число - Количество документов у которых был изменен статус
//
// ВАЖНО. При использования процедуры для каждого типа документа из массива должны быть объявлены функции:
// В модуле менеджера документа:
// 		Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
// 		Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
// В модуле объекта документа:
// 		Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
//
Функция РассчитатьСтатусыДокументовАвтоматически(Знач МассивДокументов, Знач ДополнительныеПараметры=Неопределено) Экспорт
	
	Перем РезультатыПроверки;
	
	// Получение шаблонов сообщений стандартных ошибок
	ШаблонОшибкиСтатусСовпадает   = НСтр("ru='Документу %Документ% уже присвоен статус ""%Статус%""'");
	ШаблонОшибкиНеПроведен        = НСтр("ru='Документ %Документ% не проведен. Невозможно изменить статус'");
	ШаблонОшибкиПомеченНаУдаление = НСтр("ru='Документ %Документ% помечен на удаление. Невозможно изменить статус'");
	ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать          = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
	
	// Получение соответствие типов документов из массива документов разных типов
	СоответствиеТипов = РазложитьМассивСсылокПоТипам(МассивДокументов);
	
	КоличествоОбработанных = 0;
	Для Каждого СоставДокументов Из СоответствиеТипов Цикл
		
		// Получение менеджера документов данного типа
		МенеджерДокументов = Документы[Метаданные.НайтиПоТипу(СоставДокументов.Ключ).Имя];
		
		// Получение массива ссылок документов данного типа
		МассивСсылок = СоставДокументов.Значение;
		
		// Формирование запроса
		Запрос = МенеджерДокументов.СформироватьЗапросПроверкиПриАвтоматическомРасчетеСтатуса(МассивСсылок, ДополнительныеПараметры);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат 0;
		КонецЕсли;
		
		// Цикл обхода выборки
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Универсальные проверки
			Если Выборка.ПометкаУдаления Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(ШаблонОшибкиПомеченНаУдаление, "%Документ%", Выборка.Представление), Выборка.Ссылка);
				Продолжить;
			КонецЕсли;

			Если Не Выборка.Проведен Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(ШаблонОшибкиНеПроведен, "%Документ%", Выборка.Представление), Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			
			// Захват объекта для редактирования
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			Исключение
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", Выборка.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
				Продолжить;
			КонецПопытки;
			
			// Получение объекта документа
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Авторасчет статуса
			
			Если НЕ МенеджерДокументов.РассчитатьСтатусДокументаСервер(Объект, КоличествоОбработанных) Тогда
				Продолжить;
			КонецЕсли; 
			
			// Запись документа
			Попытка
				Объект.Записать(?(Выборка.ЗаписьПроведением, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			Исключение
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", Выборка.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			КонецПопытки
			
		КонецЦикла; // выборки документов данного типа
		
	КонецЦикла; // обхода соответствия типов
	
	Возврат КоличествоОбработанных;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Методы работы автозаполнения реквизитов документа.

// Заполняет реквизит "Автор" переданного по подписке незаписанного источника 
// 
// Параметры:
//	Источник - ДокументСсылка - источник с общим реквизитом "Автор".
//
Процедура УстановитьАвтораДокументаПередЗаписью(Источник) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если Источник.Ссылка.Пустая() Или Источник.Автор = Неопределено Или Источник.Автор.Пустая() Тогда
		Источник.Автор = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
КонецПроцедуры

// Получает значения автозаполнения по статистике и заполняет ими переданную структуру
// Заполненные свойства не перезаполняются и выступают в роли отбора
// Свойства, которые не найдены в метаданных объекта удаляются из структуры
// 
// Параметры:
//	ОбъектСсылка - ДокументСсылка - ссылка на заполняемый документ
//	СвойстваАвтозаполнения - Структура - свойства, которые нужно заполнить
//
Процедура ЗаполнитьЗначенияСвойствАвтозаполнения(ОбъектСсылка, СвойстваАвтозаполнения) Экспорт
	
	// Проверим доступность свойств в объекте метаданных,
	// выделим параметры и поля запросов
	ПараметрыЗапроса				= Новый Массив;
	ПоляЗапроса						= Новый Массив;
	
	Для Каждого СвойствоАвтозаполнения Из СвойстваАвтозаполнения Цикл
		
		КлючСвойства = СвойствоАвтозаполнения.Ключ;
		
		Если НЕ ЕстьРеквизитОбъекта(ОбъектСсылка, КлючСвойства) Тогда
			СвойстваАвтозаполнения.Удалить(КлючСвойства);
			
		Иначе
			Если НЕ СвойствоАвтозаполнения.Значение = Неопределено Тогда
				ПараметрыЗапроса.Добавить(КлючСвойства);
			Иначе
				ПоляЗапроса.Добавить(КлючСвойства);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Возвращаем переданную заполненную структуру
	Если ПоляЗапроса.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	СтруктураСвойствАвтозаполнения = Новый Структура;
	СтруктураСвойствАвтозаполнения.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	СтруктураСвойствАвтозаполнения.Вставить("ПоляЗапроса", ПоляЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСвойствАвтозаполнения(ОбъектСсылка, СтруктураСвойствАвтозаполнения);
	
	Если ЕстьРеквизитОбъекта(ОбъектСсылка, "Автор") Тогда
		Запрос.УстановитьПараметр("Автор", Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса, СвойстваАвтозаполнения[ПараметрЗапроса]);
	
	КонецЦикла; 
	
	РезультатыПакетаЗапросов = Запрос.ВыполнитьПакет();
	
	СчетчикПолей = 2;
	Для Каждого ПолеЗапроса Из ПоляЗапроса Цикл 
		РезультатПакета = РезультатыПакетаЗапросов[СчетчикПолей];
		
		Если НЕ РезультатПакета.Пустой() Тогда
			ВыборкаРезультата = РезультатПакета.Выбрать();
			ВыборкаРезультата.Следующий();
			
			СвойстваАвтозаполнения[ПолеЗапроса] = ВыборкаРезультата.ОбъектПоиска;
			
		КонецЕсли;
		
		СчетчикПолей = СчетчикПолей + 3;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Настройки форм.

Процедура НастроитьФормуПоПараметрам(Форма, ПараметрыНастройки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НастройкиФорм.Ссылка
	|ИЗ
	|	Справочник.ПараметрыКонтекстныхФункциональныхОпций КАК НастройкиФорм
	|ГДЕ
	|	ИСТИНА";
	
	Для каждого ПараметрНастройки Из ПараметрыНастройки Цикл
	
		ТекстЗапроса = ТекстЗапроса + " 
		|	И НастройкиФорм." + ПараметрНастройки.Ключ + " = &" + ПараметрНастройки.Ключ;
		Запрос.УстановитьПараметр(ПараметрНастройки.Ключ, ПараметрНастройки.Значение);
	
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Настройка = Выборка.Ссылка;
		
	Иначе
		
		СправочникОбъект = Справочники.ПараметрыКонтекстныхФункциональныхОпций.СоздатьЭлемент();
		
		ЗаполнитьЗначенияСвойств(СправочникОбъект, ПараметрыНастройки);
		
		СправочникОбъект.Записать();
		
		Настройка = СправочникОбъект.Ссылка;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("НастройкаФормы", Настройка));
	
КонецПроцедуры

Процедура ИнициализироватьРеквизитыФормыДляПолнотекстовогоПоиска(Форма, ИмяФОИспользованияППД) Экспорт
	
	Форма.ИнформационнаяБазаФайловая      = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	Форма.ИспользоватьПолнотекстовыйПоиск = ПолучитьФункциональнуюОпцию(ИмяФОИспользованияППД)
											И ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить;
	
	Если Форма.ИспользоватьПолнотекстовыйПоиск Тогда
			
		Форма.ИндексПолнотекстовогоПоискаАктуален = ПолнотекстовыйПоискСервер.ИндексПоискаАктуален();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьТаблицуТоваровВВалютуРегл(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ТаблицаТоваровПредварительная
	|
	|ИТОГИ
	|	СУММА(ТаблицаТоваровПредварительная.СуммаБезНДС),
	|	СУММА(ТаблицаТоваровПредварительная.СуммаНДС),
	|	МАКСИМУМ(ТаблицаТоваровПредварительная.Валюта),
	|	МАКСИМУМ(ТаблицаТоваровПредварительная.Дата)
	|ПО
	|	ТаблицаТоваровПредварительная.Ссылка
	|";
	РезультатЗапроса = Запрос.Выполнить();
	
	ПересчитанныеСуммыДокументов = Новый ТаблицаЗначений;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ПересчитанныеСуммыДокументов.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	КэшКурсовВалют = РаботаСКурсамиВалютУТ.ИнициализироватьКэшКурсовВалют();
	
	ВыборкаПоДокументу = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументу.Следующий() Цикл
		
		КурсВалютыДокумента = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(ВыборкаПоДокументу.Валюта, ВыборкаПоДокументу.Дата, КэшКурсовВалют);
		КурсВалютыРегл      = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(ВалютаРегл, ВыборкаПоДокументу.Дата, КэшКурсовВалют);
		
		СуммаДокумента     = ВыборкаПоДокументу.СуммаБезНДС + ВыборкаПоДокументу.СуммаНДС;
		СуммаДокументаРегл = СуммаДокумента * КурсВалютыДокумента / КурсВалютыРегл;
		
		УчтеноБазыРаспределения = 0;
		УжеРаспределено = 0;
		
		Выборка = ВыборкаПоДокументу.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СуммаСНДС = Выборка.СуммаБезНДС + Выборка.СуммаНДС;
			
			СуммаСНДСРегл = ?(СуммаДокумента <> 0, Окр(СуммаДокументаРегл * (УчтеноБазыРаспределения + СуммаСНДС) / СуммаДокумента, 2) - УжеРаспределено, 0);
			
			УчтеноБазыРаспределения = УчтеноБазыРаспределения + СуммаСНДС;
			УжеРаспределено         = УжеРаспределено + СуммаСНДСРегл;
			
			НоваяЗапись = ПересчитанныеСуммыДокументов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка, , "СуммаНДС, СуммаБезНДС");
			
			ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Выборка.СтавкаНДС);
			
			НоваяЗапись.СуммаНДС    = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СуммаСНДСРегл, ТекПроцентНДС);
			НоваяЗапись.СуммаБезНДС = СуммаСНДСРегл - НоваяЗапись.СуммаНДС;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.Текст = "
	|УНИЧТОЖИТЬ ТаблицаТоваровПредварительная;
	|ВЫБРАТЬ";
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Запрос.Текст = Запрос.Текст + "
		|Таблица." + Колонка.Имя + ",";
	КонецЦикла;
	Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-1);
	Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ ТаблицаТоваровПредварительная
	|ИЗ &Таблица КАК Таблица";
	Запрос.УстановитьПараметр("Таблица", ПересчитанныеСуммыДокументов);
	Запрос.Выполнить();
	
КонецПроцедуры

//Удаляет повторяющиеся элементы массива
//
Функция УдалитьПовторяющиесяЭлементыМассива(Массив, НеИспользоватьНеопределено = Ложь) Экспорт
	
	ОписаниеТиповСправочники  = Справочники.ТипВсеСсылки(); 
	ОписаниеТиповДокументы    = Документы.ТипВсеСсылки(); 
	ОписаниеТиповПВХ          = ПланыВидовХарактеристик.ТипВсеСсылки(); 
	ОписаниеТиповПланыСчетов  = ПланыСчетов.ТипВсеСсылки(); 
	ОписаниеТиповПланыРасчета = ПланыВидовРасчета.ТипВсеСсылки(); 
	
	Если ТипЗнч(Массив) = Тип("Массив") Тогда 
		
		УжеВМассиве 		   = Новый Соответствие; 
		БылоНеопределено 	   = Ложь;
		КолвоЭлементовВМассиве = Массив.Количество(); 
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВМассиве Цикл 
			
			ЭлементМассива = Массив[КолвоЭлементовВМассиве - ОбратныйИндекс]; 
			ТипЭлемента    = ТипЗнч(ЭлементМассива); 
			
			Если ЭлементМассива = Неопределено Тогда
				
				Если БылоНеопределено ИЛИ НеИспользоватьНеопределено Тогда
					Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс); 
				Иначе
					БылоНеопределено = Истина;
				КонецЕсли;
				
				Продолжить;
				
			ИначеЕсли ОписаниеТиповСправочники.СодержитТип(ТипЭлемента) 
			 ИЛИ ОписаниеТиповДокументы.СодержитТип(ТипЭлемента) 
			 ИЛИ ОписаниеТиповПВХ.СодержитТип(ТипЭлемента) 
			 ИЛИ ОписаниеТиповПланыСчетов.СодержитТип(ТипЭлемента) 
			 ИЛИ ОписаниеТиповПланыРасчета.СодержитТип(ТипЭлемента) Тогда 
				
				ИДЭлемента = Строка(ЭлементМассива.УникальныйИдентификатор()); 
				
			Иначе 
				
				ИДЭлемента = ЭлементМассива; 
				
			КонецЕсли; 
			
			Если УжеВМассиве[ИДЭлемента] = Истина Тогда 
				Массив.Удалить(КолвоЭлементовВМассиве - ОбратныйИндекс); 
			Иначе 
				УжеВМассиве[ИДЭлемента] = Истина; 
			КонецЕсли; 
			
		КонецЦикла;      
		
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

// Функция возвращает запрос схемы компоновки данных с учетом настроек
//
// Параметры:
//	СхемаКомпоновки						- Схема компоновки, которая содержит запрос к данным
//	ПользовательскиеНастройкиКомпоновки - НастройкиКомпоновкиДанных, настройки (отбор), которые установил пользователь
//	СтруктураПараметров					- Структура, которая содержит значения параметров
//	СтруктураОтбора						- Структура, которая содержит дополнительный отбор (по периоду, организации и т.д.)
//	СтруктураВидовСравненияОтбора		- Структура, которая содержит вид сравнения применяемый в отборе
//
// Возвращаемое значение
//	Запрос
//
Функция ПолучитьЗапросСУчетомНастроек(СхемаКомпоновки, ПользовательскиеНастройкиКомпоновки = Неопределено, СтруктураПараметров = Неопределено, СтруктураОтбора = Неопределено, СтруктураВидовСравненияОтбора = Неопределено) Экспорт
	
	// Получим настройки по умолчанию и добавим в них пользовательские настройки
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки)); 
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	
	НастройкиКомпоновки = Компоновщик.ПолучитьНастройки();
	
	Если ПользовательскиеНастройкиКомпоновки <> Неопределено Тогда
		СкопироватьЭлементы(НастройкиКомпоновки.Отбор, ПользовательскиеНастройкиКомпоновки.Отбор);
	КонецЕсли; 
	
	// Добавим в настройки дополнительный отбор
	Если СтруктураОтбора <> Неопределено Тогда
		Для каждого ЭлементОтбора Из СтруктураОтбора Цикл
			Если НРег(ЭлементОтбора.Ключ) = "период" Тогда
				Если НастройкиКомпоновки.ДоступныеПоляОтбора.Элементы.Найти("Дата") <> Неопределено Тогда
					Если ЗначениеЗаполнено(ЭлементОтбора.Значение.ДатаНачала) Тогда
						ДобавитьОтбор(НастройкиКомпоновки.Отбор, "Дата", НачалоДня(ЭлементОтбора.Значение.ДатаНачала), ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					КонецЕсли; 
					Если ЗначениеЗаполнено(ЭлементОтбора.Значение.ДатаОкончания) Тогда
						ДобавитьОтбор(НастройкиКомпоновки.Отбор, "Дата", КонецДня(ЭлементОтбора.Значение.ДатаОкончания), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
					КонецЕсли; 
				КонецЕсли; 
				
				ПараметрПериод = НастройкиКомпоновки.ПараметрыДанных.Элементы.Найти("Период");
				Если ПараметрПериод <> Неопределено Тогда
					ПараметрПериод.Значение = ЭлементОтбора.Значение;
				КонецЕсли; 
			Иначе
				
				ВидСравненияОтбора = Неопределено;
				
				Если СтруктураВидовСравненияОтбора <> Неопределено Тогда
					СтруктураВидовСравненияОтбора.Свойство(ЭлементОтбора.Ключ, ВидСравненияОтбора);
				КонецЕсли;
				
				ДобавитьОтбор(НастройкиКомпоновки.Отбор, ЭлементОтбора.Ключ, ЭлементОтбора.Значение, ВидСравненияОтбора);
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли; 
	
	// Установим в настройке параметры
	Если СтруктураПараметров <> Неопределено Тогда
		Для Каждого ТекущийПараметр Из СтруктураПараметров Цикл
			НастройкиКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра(ТекущийПараметр.Ключ,  ТекущийПараметр.Значение);
		КонецЦикла;
	КонецЕсли;	
	
	// Получим запрос из макета компоновки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновки, НастройкиКомпоновки);
	Запрос = Новый Запрос(МакетКомпоновки.НаборыДанных[0].Запрос);
	
	// Установим параметры запроса
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого ОписаниеПараметраЗапроса ИЗ ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметраЗапроса.Имя, МакетКомпоновки.ЗначенияПараметров[ОписаниеПараметраЗапроса.Имя].Значение);
	КонецЦикла;
	
	Возврат Запрос;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Закрытие месяца.

Процедура ВыполнитьЗакрытиеМесяца(Организация) Экспорт
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегламентныеЗаданияЗакрытияМесяца.ЗакрываемыйПериод
		|ИЗ
		|	РегистрСведений.РегламентныеЗаданияЗакрытияМесяца КАК РегламентныеЗаданияЗакрытияМесяца
		|ГДЕ
		|	РегламентныеЗаданияЗакрытияМесяца.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Запрос.Выполнить();
		ЗакрываемыйПериод = Дата("00010101000000");
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗакрываемыйПериод = ВыборкаДетальныеЗаписи.ЗакрываемыйПериод;
		КонецЦикла;
		
		Обработка = Обработки.ОперацииЗакрытияМесяца.Создать();
		Обработка.Организация = Организация;
		Обработка.ПериодРегистрации = ЗакрываемыйПериод;
		Обработка.ВыполнитьРегламентноеЗаданиеПоЗакрытиюМесяца();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнения табличных частей документа.

// Процедуры проверки заполнения реквизита Количество и КоличествоУпаковок в документах.
// Параметры:
//	Объект - проверяемый ДокументОбъект
//	ПроверяемыеРеквизиты - массив проверяемых реквизитов
//	Отказ - отказ продолжения операции
Процедура ПроверитьЗаполнениеКоличества(Объект, ПроверяемыеРеквизиты, Отказ,ПараметрыПроверки = Неопределено) Экспорт
	
	Перем ИмяТЧ;
	Перем ЗаполнятьРеквизитОбязательно;
	Перем СуффиксДопРеквизита;
	Перем ЗаполнятьДопРеквизитОбязательно;
	
	Если ПараметрыПроверки <> Неопределено Тогда
		ПараметрыПроверки.Свойство("ИмяТЧ",ИмяТЧ);
		ПараметрыПроверки.Свойство("СуффиксДопРеквизита",СуффиксДопРеквизита);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ИмяТЧ) Тогда
		ИмяТЧ = "Товары";	
	КонецЕсли;
	
	КлючДанных = КлючДанныхДляСообщенияПользователю(Объект);
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	РеквизитПроверки =  ПроверяемыеРеквизиты.Найти(ИмяТЧ + ".КоличествоУпаковок");
	ЗаполнятьРеквизитОбязательно = РеквизитПроверки <> Неопределено;
	Если РеквизитПроверки <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(РеквизитПроверки);
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти(ИмяТЧ + ".Количество"));
	КонецЕсли;
	
	ПредставлениеТЧ                          = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаКоличествоУпаковок = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.КоличествоУпаковок.Синоним;
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		РеквизитПроверки =  ПроверяемыеРеквизиты.Найти(ИмяТЧ + ".КоличествоУпаковок"+СуффиксДопРеквизита);
		ЗаполнятьДопРеквизитОбязательно = РеквизитПроверки <> Неопределено;
		Если РеквизитПроверки <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(РеквизитПроверки);
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти(ИмяТЧ + ".Количество"+СуффиксДопРеквизита));
		КонецЕсли;
		ПредставлениеРеквизитаКоличествоУпаковокДоп  = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты["КоличествоУпаковок"+СуффиксДопРеквизита].Синоним;
	Иначе
		ЗаполнятьДопРеквизитОбязательно = Ложь;
		ПредставлениеРеквизитаКоличествоУпаковокДоп = "";
	КонецЕсли;
	
	ШаблонОшибкаКоличества = НСтр("ru = 'Не заполнена колонка ""%ПредставлениеКолонки%"" в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
	ШаблонОшибкаПересчета = НСтр("ru = 'Обнаружено нулевое количество при пересчете в единицу хранения в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
	
	Для Каждого СтрокаТаб Из Объект[ИмяТЧ] Цикл
		
		Если СтрокаТаб.Количество = 0 
			И СтрокаТаб.КоличествоУпаковок <> 0 Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонОшибкаПересчета, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки, "КоличествоУпаковок");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
			
		ИначеЕсли ЗаполнятьРеквизитОбязательно
			И (СтрокаТаб.Количество = 0
			Или СтрокаТаб.КоличествоУпаковок = 0) Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонОшибкаКоличества, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеКолонки%", ПредставлениеРеквизитаКоличествоУпаковок);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки, "КоличествоУпаковок");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
					
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаб["Количество"+СуффиксДопРеквизита] = 0 
			И СтрокаТаб["КоличествоУпаковок"+СуффиксДопРеквизита] <> 0 Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонОшибкаПересчета, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки, "КоличествоУпаковок"+СуффиксДопРеквизита);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
			
		ИначеЕсли ЗаполнятьДопРеквизитОбязательно
			И (СтрокаТаб["Количество"+СуффиксДопРеквизита] = 0
			Или СтрокаТаб["КоличествоУпаковок"+СуффиксДопРеквизита]  = 0) Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонОшибкаКоличества, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеКолонки%", ПредставлениеРеквизитаКоличествоУпаковокДоп);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, СтрокаТаб.НомерСтроки,"КоличествоУпаковок"+СуффиксДопРеквизита);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
					
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверяет дубли строк в табличной части
// Параметры:
//	Объект - проверяемый ДокументОбъект
//	ИмяТЧ - имя проверяемой табличной части
//	КлючевыеРеквизиты - массив имен реквизитов, по которым определяется уникальность строки
//	Отказ - отказ продолжения операции
Процедура ПроверитьНаличиеДублейСтрокТЧ(Объект,ИмяТЧ,КлючевыеРеквизиты,Отказ, ПредставлениеТЧ = "") Экспорт
	
	КлючДанных = КлючДанныхДляСообщенияПользователю(Объект);
	
	МетаданныеОбъекта = Объект.Метаданные();
	Если ПустаяСтрока(ПредставлениеТЧ) Тогда
		ПредставлениеТЧ   = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	КонецЕсли;
	
	ТекстПоляВыборки = "";
	ТекстПоляСоединения = "";	
    ТекстПоляВыгрузки = "";
	ТекстДляСообщенияОДублях = "";
	Для Каждого СтрМас из КлючевыеРеквизиты Цикл
		ТекстПоляВыборки = ТекстПоляВыборки + "
	|	ТаблицаПроверки." + СтрМас + ",";
		ТекстПоляСоединения = ТекстПоляСоединения + "
	|	И ТаблицаПроверки." + СтрМас + " = ДублирующиесяСтроки."+ СтрМас;
		ТекстПоляВыгрузки = ТекстПоляВыгрузки + СтрМас + ",";
		
		ПредставлениеРеквизита = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[СтрМас].Синоним;
		
		ТекстДляСообщенияОДублях = ТекстДляСообщенияОДублях + """"  + ПредставлениеРеквизита  + """, "
	КонецЦикла;	
	
	ТекстДляСообщенияОДублях = Лев(ТекстДляСообщенияОДублях, СтрДлина(ТекстДляСообщенияОДублях) - 2);
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстПоляВыборки,1);
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ТекстПоляВыгрузки,1);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ТаблицаПроверки.НомерСтроки, " +
		ТекстПоляВыборки + "
	|ПОМЕСТИТЬ ТаблицаПроверки
	|ИЗ
	|	&ТаблицаПроверки КАК ТаблицаПроверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаПроверки.НомерСтроки) КАК НомерСтроки,
	|	СУММА(1) КАК КоличествоДублей,"+
		ТекстПоляВыборки + "
	|ПОМЕСТИТЬ ДублирующиесяСтроки
	|ИЗ
	|	ТаблицаПроверки КАК ТаблицаПроверки
	|
	|СГРУППИРОВАТЬ ПО " +
		ТекстПоляВыборки + "
	|
	|ИМЕЮЩИЕ
	|	СУММА(1) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПроверки.НомерСтроки,
	|	ДублирующиесяСтроки.НомерСтроки КАК ПерваяСтрока
	|ИЗ
	|	ТаблицаПроверки КАК ТаблицаПроверки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДублирующиесяСтроки КАК ДублирующиесяСтроки
	|		ПО ТаблицаПроверки.НомерСтроки <> ДублирующиесяСтроки.НомерСтроки " +
	     		ТекстПоляСоединения;
	Запрос.УстановитьПараметр("ТаблицаПроверки",Объект[ИмяТЧ].Выгрузить(,"НомерСтроки," + ТекстПоляВыгрузки));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если КлючевыеРеквизиты.Количество() = 1 Тогда
		ШаблонСообщения = НСтр("ru = 'Данные в строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" совпадают с данными в строке %ПерваяСтрока% по значению поля %НазванияПолей%.'");
	Иначе
		ШаблонСообщения = НСтр("ru = 'Данные в строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" совпадают с данными в строке %ПерваяСтрока% по сочетанию значений полей %НазванияПолей%.'");
	КонецЕсли;	
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения =  СтрЗаменить(ШаблонСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%ПерваяСтрока%", Выборка.ПерваяСтрока);
		ТекстСообщения =  СтрЗаменить(ТекстСообщения, "%НазванияПолей%", ТекстДляСообщенияОДублях);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "НомерСтроки");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
		
	КонецЦикла;
КонецПроцедуры

// Процедура заполняет значения реквизитов табличной части по структуре
//
// Параметры:
// 		КоллекцияДанных - ДанныеФормыКоллекция - Табличная часть
// 		СтруктураРеквизитов - Структура - Структура. Ключ - имя реквизита флага активности. Значение - строка перечисления зависимых реквизитов
//
Процедура ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(КоллекцияДанных, СтруктураРеквизитов) Экспорт
	
	// Получение шаблона поля выборки для значения дубликата реквизита
	// 		Если флаг активности ИСТИНА - скопировать значение из реквизита
	// 		Иначе - заполнить пустым значением
	ШаблонПоляВыборки = ",
	|	ВЫБОР КОГДА Коллекция.%ИмяФлага% = ИСТИНА
	|		ТОГДА Коллекция.%ИмяРеквизита%
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК %ИмяРеквизита%%ИмяФлага%";
	
	ПоляВыборки = ""; // Поля выборки для запроса получения данных
	ПоляВыгрузки = "НомерСтроки"; // Перечисление через запятую полей, выгружаемых из коллекции
	Для Каждого РеквизитФлага Из СтруктураРеквизитов Цикл
		ПоляВыгрузки = ПоляВыгрузки + ", " + РеквизитФлага.Ключ;
		ЗависимыеРеквизиты = Новый Структура(РеквизитФлага.Значение);
		Для Каждого ЗависимыйРеквизит Из ЗависимыеРеквизиты Цикл
			ПоляВыборки = ПоляВыборки + СтрЗаменить(СтрЗаменить(ШаблонПоляВыборки, "%ИмяФлага%", РеквизитФлага.Ключ), "%ИмяРеквизита%", ЗависимыйРеквизит.Ключ);
			ПоляВыгрузки = ПоляВыгрузки + ", " + ЗависимыйРеквизит.Ключ + ", " + ЗависимыйРеквизит.Ключ + РеквизитФлага.Ключ;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Коллекция.НомерСтроки" + ПоляВыборки + "
	|ПОМЕСТИТЬ втКоллекция
	|ИЗ &КоллекцияДанных КАК Коллекция;
	|
	|ВЫБРАТЬ *
	|ИЗ втКоллекция КАК втКоллекция
	|УПОРЯДОЧИТЬ ПО НомерСтроки");
	Запрос.УстановитьПараметр("КоллекцияДанных", КоллекцияДанных.Выгрузить( , ПоляВыгрузки));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(КоллекцияДанных[Выборка.НомерСтроки-1], Выборка, , "НомерСтроки");
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции()

///////////////////////////////////////////////////////////////////////////////////////////
// Контроль несогласованных изменений

// Осуществляет установку подписки на события изменения элементов формы.
//
// Параметры:
// 		Форма                    - ДокументОбъект, СправочникОбъект - Проверяемый объект.
// 		МассивЭлементов          - Массив - массив элементов формы.
// 		УстановитьПодписку - Булево - необходимость установки или снятия предупреждения.
//
Процедура УстановитьПодпискуНаСобытияИзмененияЭлементовФормы(Форма, ИменаЭлементов, Установить) Экспорт
	
	ОбработчикиСобытийТабличныхЧастей = Новый Структура();
	МассивЭлементов = Новый Массив;
	Для Каждого ИмяЭлементаПолное Из ИменаЭлементов Цикл
		
		Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЭлементаПолное, ";");
		ИмяЭлемента = Массив[0];
		
		Если МассивЭлементов.Найти(ИмяЭлемента) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивЭлементов.Добавить(ИмяЭлемента);
		
		Если Массив.Количество() > 1 Тогда
			ОбработчикиСобытийТабличныхЧастей.Вставить(ИмяЭлемента, СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Массив[1], ","))
		КонецЕсли;
		
		ОбработатьВложенныеПоля(Форма, ИмяЭлемента, МассивЭлементов);
		
	КонецЦикла;
	
	ИмяОбработчикаПустой = "Подключаемый_ПустойОбработчик_УстановитьДоступностьЭлементовПоСтатусуСервер";
	Если Установить И Форма.СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено Тогда
		
		Форма.СтруктураДействийКонтрольНеСогласованныхИзменений = Новый Структура;
		Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.Вставить("Команды", Новый Структура);
		Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.Вставить("ПриИзменении", Новый Структура);
		Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.Вставить("Нажатие", Новый Структура);
		Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.Вставить("ПередНачаломИзменения", Новый Структура);
		Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.Вставить("ПередНачаломДобавления", Новый Структура);
		Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.Вставить("ПередУдалением", Новый Структура);
		
		Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.Вставить("ПриИзмененииПустыеОбработчики", Новый Структура);
		Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.Вставить("НажатиеПустыеОбработчики", Новый Структура);
		Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.Вставить("ПередНачаломИзмененияПустыеОбработчики", Новый Структура);
		Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.Вставить("ПередНачаломДобавленияПустыеОбработчики", Новый Структура);
		Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.Вставить("ПередУдалениемПустыеОбработчики", Новый Структура);
		
		Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.Вставить("ОжидаетсяОповещение", Ложь);
		
		ИмяОбработчикаПриИзменении            = "Подключаемый_ПриИзменении_УстановитьДоступностьЭлементовПоСтатусуСервер";
		ИмяОбработчикаНажатие                 = "Подключаемый_Нажатие_УстановитьДоступностьЭлементовПоСтатусуСервер";
		ИмяОбработчикаКоманды                 = "Подключаемый_Команда_УстановитьДоступностьЭлементовПоСтатусуСервер";
		ИмяОбработчикаПередНачаломИзменения   = "Подключаемый_ПередНачаломИзменения_УстановитьДоступностьЭлементовПоСтатусуСервер";
		ИмяОбработчикаПередНачаломДобавления  = "Подключаемый_ПередНачаломДобавления_УстановитьДоступностьЭлементовПоСтатусуСервер";
		ИмяОбработчикаПередУдалением          = "Подключаемый_ПередУдалением_УстановитьДоступностьЭлементовПоСтатусуСервер";
		
		Для Каждого ИмяЭлементаПолное Из МассивЭлементов Цикл
			
			Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяЭлементаПолное, ";");
			ИмяЭлемента = Массив[0];
			Действия = Неопределено;
			Если Массив.Количество() > 1 Тогда
				Действия = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Массив[1], ",");
			КонецЕсли;
			
			Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Форма.Элементы[ИмяЭлемента]) = Тип("ПолеФормы") Тогда
				
				Действие = Форма.Элементы[ИмяЭлемента].ПолучитьДействие("ПриИзменении");
				Если ЗначениеЗаполнено(Действие) И Действие <> ИмяОбработчикаПустой Тогда
					Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении.Вставить(ИмяЭлемента, Действие);
				Иначе
					Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзмененииПустыеОбработчики.Вставить(ИмяЭлемента, Действие);
				КонецЕсли;
				
				Форма.Элементы[ИмяЭлемента].УстановитьДействие("ПриИзменении", ИмяОбработчикаПриИзменении);
				
			ИначеЕсли ТипЗнч(Форма.Элементы[ИмяЭлемента]) = Тип("ТаблицаФормы") Тогда
				
				Действия = Неопределено;
				ОбработчикиСобытийТабличныхЧастей.Свойство(ИмяЭлемента, Действия);
				
				Если Действия = Неопределено Или Действия.Найти("ПередНачаломДобавления") <> Неопределено Тогда
					Действие = Форма.Элементы[ИмяЭлемента].ПолучитьДействие("ПередНачаломДобавления");
					Если ЗначениеЗаполнено(Действие) И Действие <> ИмяОбработчикаПустой Тогда
						Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления.Вставить(ИмяЭлемента, Действие);
					Иначе
						Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавленияПустыеОбработчики.Вставить(ИмяЭлемента, Действие);
					КонецЕсли;
					Форма.Элементы[ИмяЭлемента].УстановитьДействие("ПередНачаломДобавления", ИмяОбработчикаПередНачаломДобавления);
				КонецЕсли;
				
				Если Действия = Неопределено Или Действия.Найти("ПередУдалением") <> Неопределено Тогда
					Действие = Форма.Элементы[ИмяЭлемента].ПолучитьДействие("ПередУдалением");
					Если ЗначениеЗаполнено(Действие) И Действие <> ИмяОбработчикаПустой Тогда
						Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением.Вставить(ИмяЭлемента, Действие);
					Иначе
						Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалениемПустыеОбработчики.Вставить(ИмяЭлемента, Действие);
					КонецЕсли;
					Форма.Элементы[ИмяЭлемента].УстановитьДействие("ПередУдалением", ИмяОбработчикаПередУдалением);
				КонецЕсли;
				
				Если Действия = Неопределено Или Действия.Найти("ПередНачаломИзменения") <> Неопределено Тогда
					Действие = Форма.Элементы[ИмяЭлемента].ПолучитьДействие("ПередНачаломИзменения");
					Если ЗначениеЗаполнено(Действие) И Действие <> ИмяОбработчикаПустой Тогда
						Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения.Вставить(ИмяЭлемента, Действие);
					Иначе
						Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзмененияПустыеОбработчики.Вставить(ИмяЭлемента, Действие);
					КонецЕсли;
					Форма.Элементы[ИмяЭлемента].УстановитьДействие("ПередНачаломИзменения", ИмяОбработчикаПередНачаломИзменения);
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Форма.Элементы[ИмяЭлемента]) = Тип("КнопкаФормы") Тогда
				
				ИмяКоманды = Форма.Элементы[ИмяЭлемента].ИмяКоманды;
				
				Если Не ЗначениеЗаполнено(ИмяКоманды) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Свойство(ИмяКоманды) Тогда
					Продолжить;
				КонецЕсли;
				
				Действие = Форма.Команды[ИмяКоманды].Действие;
				Если ЗначениеЗаполнено(Действие) Тогда
					Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.Команды.Вставить(ИмяКоманды, Действие);
				КонецЕсли;
				
				Форма.Команды[ИмяКоманды].Действие = ИмяОбработчикаКоманды;
				
			ИначеЕсли ТипЗнч(Форма.Элементы[ИмяЭлемента]) = Тип("ДекорацияФормы") Тогда
				
				Действие = Форма.Элементы[ИмяЭлемента].ПолучитьДействие("Нажатие");
				Если ЗначениеЗаполнено(Действие) И Действие <> ИмяОбработчикаПустой Тогда
					Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие.Вставить(ИмяЭлемента, Действие);
				Иначе
					Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.НажатиеПустыеОбработчики.Вставить(ИмяЭлемента, Действие);
				КонецЕсли;
				
				Форма.Элементы[ИмяЭлемента].УстановитьДействие("Нажатие", ИмяОбработчикаНажатие);
				
			Иначе
				ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если (Не Установить) И Форма.СтруктураДействийКонтрольНеСогласованныхИзменений <> Неопределено Тогда
		
		Для Каждого Элемент Из Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.Команды Цикл
			Форма.Команды[Элемент.Ключ].Действие = Элемент.Значение;
		КонецЦикла;
		
		Для Каждого Элемент Из Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзменении Цикл
			Форма.Элементы[Элемент.Ключ].УстановитьДействие("ПриИзменении", Элемент.Значение);
		КонецЦикла;
		
		Для Каждого Элемент Из Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.Нажатие Цикл
			Форма.Элементы[Элемент.Ключ].УстановитьДействие("Нажатие", Элемент.Значение);
		КонецЦикла;
		
		Для Каждого Элемент Из Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавления Цикл
			Форма.Элементы[Элемент.Ключ].УстановитьДействие("ПередНачаломДобавления", Элемент.Значение);
		КонецЦикла;
		
		Для Каждого Элемент Из Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалением Цикл
			Форма.Элементы[Элемент.Ключ].УстановитьДействие("ПередУдалением", Элемент.Значение);
		КонецЦикла;
		
		Для Каждого Элемент Из Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзменения Цикл
			Форма.Элементы[Элемент.Ключ].УстановитьДействие("ПередНачаломИзменения", Элемент.Значение);
		КонецЦикла;
		
		Для Каждого Элемент Из Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПриИзмененииПустыеОбработчики Цикл
			Форма.Элементы[Элемент.Ключ].УстановитьДействие("ПриИзменении", ИмяОбработчикаПустой);
		КонецЦикла;
		
		Для Каждого Элемент Из Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.НажатиеПустыеОбработчики Цикл
			Форма.Элементы[Элемент.Ключ].УстановитьДействие("Нажатие", ИмяОбработчикаПустой);
		КонецЦикла;
		
		Для Каждого Элемент Из Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломДобавленияПустыеОбработчики Цикл
			Форма.Элементы[Элемент.Ключ].УстановитьДействие("ПередНачаломДобавления", ИмяОбработчикаПустой);
		КонецЦикла;
		
		Для Каждого Элемент Из Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПередУдалениемПустыеОбработчики Цикл
			Форма.Элементы[Элемент.Ключ].УстановитьДействие("ПередУдалением", ИмяОбработчикаПустой);
		КонецЦикла;
		
		Для Каждого Элемент Из Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПередНачаломИзмененияПустыеОбработчики Цикл
			Форма.Элементы[Элемент.Ключ].УстановитьДействие("ПередНачаломИзменения", ИмяОбработчикаПустой);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции установки статусов для массива документов.

// Возвращает соответствие массивов документов по типам
//
// Параметры:
// 		МассивСсылок - Массив - Массив ссылок
//
// Возвращаемое значение:
// 		Соответствие - Ключ: Тип; значение: Массив ссылок на документы
//
Функция РазложитьМассивСсылокПоТипам(МассивСсылок) Экспорт
	
	СоответствиеТипов = Новый Соответствие;
	
	Для н = 0 По МассивСсылок.Количество() -1 Цикл
		
		ТипСсылки = ТипЗнч(МассивСсылок[н]);
		Массив = СоответствиеТипов[ТипСсылки];
		Если Массив = Неопределено Тогда
			Массив = Новый Массив;
			СоответствиеТипов.Вставить(ТипСсылки, Массив);
		КонецЕсли;
		Массив.Добавить(МассивСсылок[н]);
		
	КонецЦикла;
	
	Возврат СоответствиеТипов;
	
КонецФункции // РазложитьМассивСсылокПоТипам

////////////////////////////////////////////////////////////////////////////////
// Методы работы автозаполнения реквизитов документа.

Функция ИмяВидаОбъекта(ОбъектСсылка)
	
	ИмяВидаОбъекта = "";
	
	ТипЗначенияОбъекта = ТипЗнч(ОбъектСсылка);
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗначенияОбъекта);
	
	Если НЕ МетаданныеОбъекта = Неопределено Тогда
		ИмяВидаОбъекта = МетаданныеОбъекта.Имя;
		
	КонецЕсли;
	
	Возврат ИмяВидаОбъекта;
	
КонецФункции

Функция ЕстьРеквизитОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);

	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

Функция ШаблонЗапросаСвойствАвтозаполнения(ИмяВидаОбъекта, ОграничитьПоАвтору = Истина)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 5
	|	СтатистикаСДатами.ОбъектПоиска КАК ОбъектПоиска,
	|	СУММА(СтатистикаСДатами.Использование) КАК ОбщийВес
	|ПОМЕСТИТЬ Статистика_%ИмяОбъектаПоиска%
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 5
	|		ВидДокумента.%ИмяОбъектаПоиска% КАК ОбъектПоиска,
	|		1 КАК Использование
	|	ИЗ
	|		Документ." + ИмяВидаОбъекта + " КАК ВидДокумента
	|	ГДЕ
	|		НЕ ВидДокумента.ПометкаУдаления
	|		" + ?(ОграничитьПоАвтору,"И (ВидДокумента.Автор = &Автор)","") + "
	|			%ДополнительныеУсловия%
	|	
	|	УПОРЯДОЧИТЬ ПО
	|		ВидДокумента.Дата УБЫВ) КАК СтатистикаСДатами
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатистикаСДатами.ОбъектПоиска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбщийВес УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Статистика.ОбщийВес) КАК ОбщийВес
	|ПОМЕСТИТЬ ОбщееКоличество_%ИмяОбъектаПоиска%
	|ИЗ
	|	Статистика_%ИмяОбъектаПоиска% КАК Статистика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ОбъектПоиска
	|ИЗ
	|	(ВЫБРАТЬ
	|		Статистика.ОбъектПоиска КАК ОбъектПоиска,
	|		100 * Статистика.ОбщийВес / ОбщееКоличество.ОбщийВес КАК ВесПоСтатистике
	|	ИЗ
	|		Статистика_%ИмяОбъектаПоиска% КАК Статистика
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбщееКоличество_%ИмяОбъектаПоиска% КАК ОбщееКоличество
	|			ПО ИСТИНА) КАК ВложенныйЗапрос
	|ГДЕ
	|	ВложенныйЗапрос.ВесПоСтатистике > 50";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСвойствАвтозаполнения(ОбъектСсылка, СтруктураСвойствАвтозаполнения)
	
	ТекстЗапроса			= "";
	ДополнительныеУсловия	= "";
	
	ИмяВидаОбъекта					= ИмяВидаОбъекта(ОбъектСсылка);
	ПараметрыЗапроса				= СтруктураСвойствАвтозаполнения.ПараметрыЗапроса;
	ПоляЗапроса						= СтруктураСвойствАвтозаполнения.ПоляЗапроса;
	
	// Сформируем текст дополнительных условий
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл 
		ДополнительныеУсловия = ДополнительныеУсловия + "И" + " " + ПараметрЗапроса + " " + "=" + " " + "&" + ПараметрЗапроса + Символы.ПС;
		
	КонецЦикла;
	
	ШаблонТекстаЗапроса = ШаблонЗапросаСвойствАвтозаполнения(ИмяВидаОбъекта,
												ЕстьРеквизитОбъекта(ОбъектСсылка, "Автор"));
	
	// Сформируем текст пакета запросов
	Для Каждого ПолеЗапроса Из ПоляЗапроса Цикл 
		ТекстЗапросаПустой = ПустаяСтрока(ТекстЗапроса);
		
		Если НЕ ТекстЗапросаПустой Тогда
			ТекстЗапроса = ТекстЗапроса + Символы.ПС + ";" + Символы.ПС + "////////////////////////////////////////////////////////////////////////////////" + Символы.ПС;
			
		КонецЕсли;
		
		ТекстЗапросаСОбъектомПоиска				= СтрЗаменить(ШаблонТекстаЗапроса, "%ИмяОбъектаПоиска%", ПолеЗапроса);
		ТекстЗапросаСОбъектомПоискаИПараметрами	= СтрЗаменить(ТекстЗапросаСОбъектомПоиска, "%ДополнительныеУсловия%", ДополнительныеУсловия);
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаСОбъектомПоискаИПараметрами;
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройки форм.

// Заполняет одну коллекцию элементов на основании другой
//
Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено)
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Копирует элементы из одной коллекции в другую
//
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина)
	
	Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			// Элементы порядка добавляем в начало
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			Попытка 
				ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
				ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
				ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
				ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
			Исключение
			КонецПопытки
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Добавляет отбор в набор отборов компоновщика или группы отборов
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина)
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение  = Поле;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	Возврат НовыйЭлемент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ОбработатьВложенныеПоля(Форма, ИмяЭлемента, МассивЭлементов)
	
	Если ТипЗнч(Форма.Элементы[ИмяЭлемента]) = Тип("ТаблицаФормы")
		ИЛИ ТипЗнч(Форма.Элементы[ИмяЭлемента]) = Тип("ГруппаФормы") Тогда
		Для Каждого Элемент Из Форма.Элементы[ИмяЭлемента].ПодчиненныеЭлементы Цикл
			Если ТипЗнч(Форма.Элементы[Элемент.Имя]) = Тип("ПолеФормы") Тогда
				Если МассивЭлементов.Найти(Элемент.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				МассивЭлементов.Добавить(Элемент.Имя);
			ИначеЕсли ТипЗнч(Форма.Элементы[Элемент.Имя]) = Тип("ГруппаФормы") Тогда
				ОбработатьВложенныеПоля(Форма, Элемент.Имя, МассивЭлементов);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
