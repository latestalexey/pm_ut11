////////////////////////////////////////////////////////////////////////////////
// Клиентские процедуры работы с номенклатурой и связанными справочниками
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирует наименование элемента справочника по заданному для вида номенклатуры шаблону.
//
//Параметры:
//		ДанныеДляФормированияНаименования - Структура - структура, возвращаемая фукнцией НоменклатураСервер.ФормулаНаименования
//		ВидНоменклатуры - СправочникСслыка.ВидыНоменклатуры	- вид номенклатуры, в котором задан шаблон наименования
//		Наименование - Строка - в формулу полного наименования может входить наименование. Наименование может быть не
//								заполнено на момент формирования массива ДанныеДляФормированияНаименования.МассивЗначенийРеквизитов,
//								поэтому перед расчетом полного наименования значение наименования нужно обновить
// Возвращаемое значение:
// Строка - Наименование полученное по алгоритму расчета
// Пустая строка - если не удалось сформировать наименование или не заполнены операнды алгоритма
//
Функция НаименованиеПоФормуле(ДанныеДляФормированияНаименования, ВидНоменклатуры, ЗначениеНаименования = "") Экспорт
	
	Наименование = "";
	Если ЗначениеЗаполнено(ДанныеДляФормированияНаименования.ФормулаНаименования) Тогда
		
		МассивЗначенийРеквизитов = ДанныеДляФормированияНаименования.МассивЗначенийРеквизитов;
		
		Для Каждого Индекс из ДанныеДляФормированияНаименования.ИндексыНаименованияВМассивеЗначенийРеквизитов Цикл
			МассивЗначенийРеквизитов[Индекс] = ЗначениеНаименования;
		КонецЦикла;
		
		Попытка
			
			Выполнить("Наименование = """" + " + ДанныеДляФормированияНаименования.ФормулаНаименования);
			
		Исключение
			
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Невозможно рассчитать наименование по заданному для вида номенклатуры ""%ВидНоменклатуры%"" шаблону. Проверьте правильность шаблона.'");
			
			СообщениеОбОшибке = СтрЗаменить(ШаблонСообщенияОбОшибке, "%ВидНоменклатуры%", ВидНоменклатуры);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

// Возвращает фильтр, используемый для выбора файлов-изображений
// Возвращаемое значение:
// Строка - строка, содержащая фильтр для файлов-изображений
//
Функция ФильтрФайловИзображений() Экспорт
	Возврат НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		                            + "|Все файлы(*.*)|*.*"
		                            + "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		                            + "|Формат GIF(*.gif*)|*.gif"
		                            + "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		                            + "|Формат PNG(*.png*)|*.png"
		                            + "|Формат TIFF(*.tif)|*.tif"
		                            + "|Формат icon(*.ico)|*.ico"
		                            + "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерактивные действия.

Процедура НомерГТДОбработкаВыбора(ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		СтруктураОснование = Новый Структура("Код", СокрЛП(ВыбранноеЗначение));
		ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.НомераГТД.ФормаОбъекта", Новый Структура("Основание", СтруктураОснование));
		
	КонецЕсли;
	
КонецПроцедуры // НомерГТДОбработкаВыбора()

//Функция является обработчиком события "НачалоВыбора" для тех элементов форм, в которых может быть
//выбрана как группа справочника, так и элемент
Процедура ВыбратьЭлементГруппуНоменклатуры(Форма, Элемент, СтандартнаяОбработка) Экспорт
	Если Элемент.ВыборГруппИЭлементов <> ГруппыИЭлементы.Группы
		И Элемент.ВыборГруппИЭлементов <> ГруппыИЭлементы.Элементы Тогда 
		
		СтандартнаяОбработка = Ложь;
		
		СписокГруппаЭлемент = Новый СписокЗначений;
		СписокГруппаЭлемент.Добавить(ИспользованиеГруппИЭлементов.Группы, НСтр("ru = 'Выбрать группу номенклатуры'"));
		СписокГруппаЭлемент.Добавить(ИспользованиеГруппИЭлементов.Элементы, НСтр("ru = 'Выбрать позицию номенклатуры'"));
		
		ЭлементСписка = Форма.ВыбратьИзСписка(СписокГруппаЭлемент,Элемент);
		
		Если ЭлементСписка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормыВыбораНоменклатуры = Новый Структура;
		ПараметрыФормыВыбораНоменклатуры.Вставить("ВыборГруппИЭлементов", ЭлементСписка.Значение);
	
		Если ПараметрыФормыВыбораНоменклатуры.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
			ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора",ПараметрыФормыВыбораНоменклатуры, Элемент);
		Иначе
			ОткрытьФорму("Справочник.Номенклатура.ФормаВыбораГруппы",ПараметрыФормыВыбораНоменклатуры, Элемент);
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры работы с сериями.

// Фукнция проверяет необходимость указания серий в строке
// Параметры
//		Форма - форма документа, в которой инициировано указание серий
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
// Возвращаемое значение
//      Тип Булево
Функция ПроверитьВозможностьУказанияСерий(Форма,ПараметрыУказанияСерий,ИмяТабличногоПоля = "") Экспорт
	
	Если ИмяТабличногоПоля = "" Тогда
		ИмяТабличногоПоля = ПараметрыУказанияСерий.ИмяТЧТовары;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		Если Форма.Объект.СтатусУказанияСерий = 0 Тогда
			ТекстСообщения = НСтр("ru='Для указанного товара серии указывать не нужно.'");
			Предупреждение(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		ТекущиеДанные = Форма.Элементы[ИмяТабличногоПоля].ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Необходимо выбрать строку товаров, для которой необходимо указать серии.'");
			Предупреждение(ТекстСообщения);
			Возврат Ложь;
		ИначеЕсли ТекущиеДанные.СтатусУказанияСерий = 0
			Или ТекущиеДанные.СтатусУказанияСерий = 12 Тогда
			ТекстСообщения = НСтр("ru='Для выбранной строки товаров серии указывать не нужно.'");
			Предупреждение(ТекстСообщения);
			Возврат Ложь;
		ИначеЕсли ТекущиеДанные.ХарактеристикиИспользуются
			И Не ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
			
			ТекстСообщения = НСтр("ru='Перед указанием серий нужно заполнить характеристику.'");
			Предупреждение(ТекстСообщения);
			Возврат Ложь;
		ИначеЕсли ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено
			И Не ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
			
			ТекстСообщения = НСтр("ru='Перед указанием серий нужно заполнить упаковку.'");
			Предупреждение(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
				
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Фукнция проверяет возможность отмены указания серий в строке
// Параметры
//		Форма - форма документа, в которой инициировано указание серий
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
// Возвращаемое значение
//      Тип Булево
Функция ПроверитьВозможностьОтменыУказанияСерий(Форма,ПараметрыУказанияСерий) Экспорт
	
	ИмяТабличногоПоля = ПараметрыУказанияСерий.ИмяТЧТовары;
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		Если Не Форма.Объект.УказыватьСерии Тогда
			ТекстСообщения = НСтр("ru='Для указанного товара серии не указаны.'");
			Предупреждение(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		ТекущиеДанные = Форма.Элементы[ИмяТабличногоПоля].ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Необходимо выбрать строку товаров, для которой необходимо отменить указание серий.'");
			Предупреждение(ТекстСообщения);
			Возврат Ложь;
		ИначеЕсли Не ТекущиеДанные.УказыватьСерии Тогда
			ТекстСообщения = НСтр("ru='Для выбранной строки серии не указаны.'");
			Предупреждение(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Процедура обновляет кеш ключевых реквизитов текущей строки товаров. По ключевым реквизитам осуществляется связь
// между ТЧ серий и ТЧ товаров
// Параметры
//		ТаблицаФормы - таблица формы, отображающая ТЧ товаров
//      КэшированныеЗначения - переменная модуля формы, в которой храняться кешируемые значения
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//      Копирование - признак, что кешированная строка скопирована (параметр события ПриНачалеРедактирования)
Процедура ОбновитьКешированныеЗначенияДляУчетаСерий(ТаблицаФормы,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование = Ложь) Экспорт
	
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	НоменклатураКлиентСервер.ОбновитьКешированныеЗначенияДляУчетаСерий(ТекущиеДанные,КэшированныеЗначения,ПараметрыУказанияСерий,Копирование);
	
КонецПроцедуры

// Процедура обновляет кеш ключевых реквизитов товара в шапке документа. По ключевым реквизитам осуществляется связь
// между ТЧ серий товаром
// Параметры
//		Объект - ДанныеФормыСтуктура - основной реквизит формы
//      КэшированныеЗначения - переменная модуля формы, в которой храняться кешируемые значения
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
Процедура ОбновитьКешированныеЗначенияШапкиДляУчетаСерий(Объект,КэшированныеЗначения,ПараметрыУказанияСерий) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	КэшированныеЗначения.Вставить("НоменклатураШапка",Объект.Номенклатура);
	КэшированныеЗначения.Вставить("ХарактеристикаШапка",Объект.Характеристика);
	КэшированныеЗначения.Вставить("КоличествоШапка",Объект.Количество);
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		КэшированныеЗначения.Вставить(СтрМас+"Шапка",Объект[СтрМас]);
	КонецЦикла;
		
КонецПроцедуры

// Фукнция проверяет необходимость обновления статусов указания серий при окончании редактирования строки товаров
// Параметры
//		ТаблицаФормы - таблица формы, отображающая ТЧ товаров
//      КэшированныеЗначения - переменная модуля формы, в которой храняться кешируемые значения
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//		Удаление - признак, что проверка вызвается при удалении строки ТЧ
// Возвращаемое значение
//		ИСТИНА - нужно обновить статусы указания серий, ЛОЖЬ - в противном случае
Функция НеобходимоОбновитьСтатусыСерий(ТаблицаФормы,КэшированныеЗначения,ПараметрыУказанияСерий, Удаление = Ложь) Экспорт
	
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Удаление Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
		Если КэшированныеЗначения.Номенклатура = ТекущиеДанные.Номенклатура Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас;
	КонецЦикла;
	
	Если ПараметрыУказанияСерий.ЭтоЗаказ
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки")) = Неопределено
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки")) = Неопределено Тогда
		ЕстьОтменаСтроки = Истина;
	Иначе
		ЕстьОтменаСтроки = Ложь;
	КонецЕсли;
	
	Если ЕстьОтменаСтроки Тогда
		ТекстПоляСвязи = ТекстПоляСвязи + ",Отменено,ВариантОбеспечения";
	КонецЕсли;
	
	Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(КэшированныеЗначения,ТекущиеДанные,
		"Количество,Номенклатура,Характеристика"+ТекстПоляСвязи) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Фукнция проверяет необходимость обновления статуса указания серий для товара в шапке документа
// Параметры
//		Объект - ДанныеФормыСтуктура - основной реквизит формы
//      КэшированныеЗначения - переменная модуля формы, в которой храняться кешируемые значения
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
// Возвращаемое значение
//		ИСТИНА - нужно обновить статус указания серий, ЛОЖЬ - в противном случае
Функция НеобходимоОбновитьСтатусСерийВШапке(Объект,КэшированныеЗначения,Знач ПараметрыУказанияСерий) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если КэшированныеЗначения.НоменклатураШапка <> Объект.Номенклатура
		Или  КэшированныеЗначения.ХарактеристикаШапка <> Объект.Характеристика
		Или  КэшированныеЗначения.КоличествоШапка <> Объект.Количество Тогда
		Возврат Истина;
	Иначе	
		Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
			Если КэшированныеЗначения[СтрМас+"Шапка"] <> Объект[СтрМас] Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Фукнция запрашивает у пользователя подтверждение перезаполнения серий по FEFO
Функция ЗадатьВопросОПерезаполненииСерийПоFEFO() Экспорт
	ТекстВопроса = НСтр("ru = 'Есть строки, в которых серии по FEFO уже заполнены. При выполнении операции
	|серии в этих строках будут перезаполнены. Продолжить?'");	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.ОК);
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

// Фукнция выводит предпреждение, что в ТЧ нет строк, серии по которым можно заполнить по FEFO
Процедура ПредупредитьОбОтсутсвииСтрокЗаполняемыхПоFEFO() Экспорт
	ТекстПредупреждения = НСтр("ru = 'В табличной части нет товаров, по которым серии можно заполнить по FEFO.'");	
	
	Предупреждение(ТекстПредупреждения);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
