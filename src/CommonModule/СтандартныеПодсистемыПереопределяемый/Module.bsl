////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
// Переопределяемые процедуры и функции для интеграции между собой подсистем библиотеки БСП.
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Базовая функциональность

// Возвращает признак, является ли конфигурация базовой.
//
// Пример реализации:
//  Если конфигурации выпускаются парами, то в имени базовой версии
//  может включаться дополнительное слово "Базовая". Тогда логика
//  определения базовой версии выглядит таким образом:
//
//	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;
//
// Возвращаемое значение:
//   Булево   - Истина, если конфигурация - базовая.
//
Функция ЭтоБазоваяВерсияКонфигурации() Экспорт

	Возврат Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;

КонецФункции

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Функция ОбработчикиИнициализацииПараметровСеансаСтандартныхПодсистем() Экспорт
	
	// Для задания обработчиков параметров сеанса следует использовать шаблон:
	// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
	//
	// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
	//             что один обработчик будет вызван для инициализации всех параметров сеанса
	//             с именем, начинающимся на слово НачалоИмениПараметраСеанса
	//
	
	Обработчики = Новый Соответствие;
	
	// СтандартныеПодсистемы.ОбменДанными
	Обработчики.Вставить("ДатаОбновленияПовторноИспользуемыхЗначенийМРО", "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ОбменДаннымиВключен",                           "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ИспользуемыеПланыОбмена",                       "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаВыборочнойРегистрацииОбъектов",          "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	Обработчики.Вставить("ПравилаРегистрацииОбъектов",                    "ОбменДаннымиВызовСервера.УстановкаПараметровСеанса");
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Обработчики.Вставить("ОграничиватьДоступПоВиду*",               "УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("ВидыДоступа*",                            "УправлениеДоступомСлужебный.УстановкаПараметровСеанса");
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Пользователи
	Обработчики.Вставить("ТекущийПользователь",        "ПользователиСлужебный.УстановкаПараметровСеанса");
	Обработчики.Вставить("ТекущийВнешнийПользователь", "ПользователиСлужебный.УстановкаПараметровСеанса");
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Обработчики.Вставить("ТекущийЗамерВремени", "ОценкаПроизводительностиВызовСервера.УстановкаПараметровСеанса");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Возврат Обработчики;
	
КонецФункции

// Возвращает список процедур-обработчиков обновления библиотеки.
//
// Здесь в алфавитном порядке размещаются только процедуры-обработчики обновления 
// библиотечных подсистем, которые используются в данной конфигурации. 
// Процедуры-обработчики обновления самой конфигурации следует размещать в функции 
// ОбработчикиОбновления общего модуля ОбновлениеИнформационнойБазыПереопределяемый.
//
// Возвращаемое значение:
//   ТаблицаЗначений - описание полей структуры см. в функции
//               ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления() 
//
Функция ОбработчикиОбновленияСтандартныхПодсистем() Экспорт
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	// Подключаются процедуры-обработчики обновления библиотеки
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	АдресныйКлассификатор.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	БизнесПроцессыИЗадачиСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.ВариантыОтчетов
	ВариантыОтчетов.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ВариантыОтчетов
	
	// СтандартныеПодсистемы.Взаимодействия
	Взаимодействия.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзмененияСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.КалендарныеГрафики
	КалендарныеГрафики.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.КалендарныеГрафики
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.КалендарныеГрафикиВМоделиСервиса
	КалендарныеГрафикиСлужебныйВМоделиСервиса.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.КалендарныеГрафикиВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	КурсыВалютСлужебныйВМоделиСервиса.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	ОбменДаннымиВМоделиСервиса.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// СтандартныеПодсистемы.ОбменДанными
	ОбменДаннымиСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	ОбменСообщениямиВнутренний.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	ОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	
	// СтандартныеПодсистемы.ОбновлениеКонфигурации
	ОбновлениеКонфигурации.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	ОчередьЗаданий.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	
	// СтандартныеПодсистемы.ПолнотекстовыйПоиск
	ПолнотекстовыйПоискСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ПолнотекстовыйПоиск
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	ПолучениеФайловИзИнтернета.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// СтандартныеПодсистемы.Валюты
	РаботаСКурсамиВалют.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.Валюты
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебныйВызовСервера.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.РегламентныеЗадания
	РегламентныеЗаданияСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РегламентныеЗадания
	
	СтандартныеПодсистемыСервер.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	УправлениеДоступомСлужебныйВМоделиСервиса.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступомСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ФайловыеФункцииВМоделиСервиса
	ФайловыеФункцииСлужебныйВМоделиСервиса.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ФайловыеФункцииВМоделиСервиса
	
	// СтандартныеПодсистемы.ФайловыеФункции
	ФайловыеФункцииСлужебный.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ФайловыеФункции
	
	// СтандартныеПодсистемы.ФизическиеЛица
	ФизическиеЛица.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ФизическиеЛица
	
	// СтандартныеПодсистемы.РаботаСПочтовымиСообщениями
	ЭлектроннаяПочта.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаСПочтовымиСообщениями
	
	// СтандартныеПодсистемы.ЭлектроннаяЦифроваяПодпись
	ЭлектроннаяЦифроваяПодпись.ЗарегистрироватьОбработчикиОбновления(Обработчики);
	// Конец СтандартныеПодсистемы.ЭлектроннаяЦифроваяПодпись
	
	Возврат Обработчики;
	
КонецФункции

// Возвращает список имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Возвращаемое значение:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Функция ИсключенияПоискаСсылок() Экспорт
	
	Массив = Новый Массив;
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	Массив.Добавить(Метаданные.РегистрыСведений.ИсполнителиЗадач.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ДанныеБизнесПроцессов.ПолноеИмя());
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.Валюты
	Массив.Добавить(Метаданные.РегистрыСведений.КурсыВалют.ПолноеИмя());
	// Конец СтандартныеПодсистемы.Валюты
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Массив.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов.ПолноеИмя());
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Пользователи
	Массив.Добавить(Метаданные.РегистрыСведений.СоставыГруппПользователей.ПолноеИмя());
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Массив.Добавить(Метаданные.РегистрыСведений.НаличиеПрисоединенныхФайлов.ПолноеИмя());
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Массив.Добавить(Метаданные.РегистрыСведений.ФайлыВРабочемКаталоге.ПолноеИмя());
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.Свойства
	Массив.Добавить(Метаданные.РегистрыСведений.ДополнительныеСведения.ПолноеИмя());
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Массив.Добавить(Метаданные.РегистрыСведений.ГруппыЗначенийДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ЗависимостиПравДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ЗначенияГруппДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.НаборыЗначенийДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ПраваРолей.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ПраваПоЗначениямДоступа.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ТаблицыГруппДоступа.ПолноеИмя());
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ФизическиеЛица
	Массив.Добавить(Метаданные.РегистрыСведений.ДокументыФизическихЛиц.ПолноеИмя());
	// Конец СтандартныеПодсистемы.ФизическиеЛица
	
	Возврат Массив;
	
КонецФункции

// Возвращает признак доступности подсистемы ПолучениеФайловИзИнтернета.
//
// Параметры:
//  ПолучениеДоступно - Булево - (возвращаемое значение) - признак доступности подсистемы ПолучениеФайловИзИнтернета.
//
Процедура ДоступноПолучениеФайловИзИнтернета(ПолучениеДоступно) Экспорт
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	ПолучениеДоступно = Истина;
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
КонецПроцедуры

// Получить файл из Интернета по протоколу http(s), либо ftp и сохранить его во временный файл.
//
// Параметры:
//   URL                  - Строка - url файла в формате
//                                   [Протокол://]<Сервер>/<Путь к файлу на сервере>
//   ПараметрыПолучения   - Структура со свойствами
//     ПутьДляСохранения    - Строка - путь на сервере (включая имя файла), для сохранения скачанного файла
//     Пользователь         - Строка - пользователь от имени которого установлено соединение
//     Пароль               - Строка - пароль пользователя от которого установлено соединение
//     Порт                 - Число  - порт сервера с которым установлено соединение
//     ЗащищенноеСоединение - Булево - для случая http загрузки флаг указывает,
//                                     что соединение должно производиться через https
//     ПассивноеСоединение  - Булево - для случая ftp загрузки флаг указывает,
//                                     что соединение должно пассивным (или активным)
//   ВозвращаемоеЗначение - (выходной параметр)
//     Структура, со свойствами
//       Статус - Булево - ключ присутствует в структуре всегда, значения
//                         Истина - вызов функции успешно завершен
//                         Ложь   - вызов функции завершен неудачно
//       Путь   - Строка - путь к файлу на сервере, ключ используется только
//                         если статус Истина
//       СообщениеОбОшибке - Строка - сообщение об ошибке, если статус Ложь
//
Процедура СкачатьФайлНаСервере(Знач Адрес, Знач ПараметрыПолучения, ВозвращаемоеЗначение) Экспорт
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	ВозвращаемоеЗначение = ПолучениеФайловИзИнтернета.СкачатьФайлНаСервере(Адрес, ПараметрыПолучения);
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
КонецПроцедуры

// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог) Экспорт
	
	Библиотека = "СтандартныеПодсистемы";
	
	// СтандартныеПодсистемы.АнализЖурналаРегистрации
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.0.1",
		"Подсистема.СтандартныеПодсистемы.Подсистема.КонтрольЖурналаРегистрации",
		"Подсистема.СтандартныеПодсистемы.Подсистема.АнализЖурналаРегистрации",
		Библиотека);
	// Конец СтандартныеПодсистемы.АнализЖурналаРегистрации
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.0.1.2",
		"Роль.ДобавлениеИзменениеОбщихПоставляемыхДанных",
		"Роль.ДобавлениеИзменениеОбщейБазовойНСИ",
		Библиотека);
	
	// СтандартныеПодсистемы.ВариантыОтчетов
	ОбщегоНазначения.ДобавитьПереименование(
		Итог, "2.1.0.2", "Роль.ЧтениеВариантовОтчетов", "Роль.ИспользованиеВариантовОтчетов", Библиотека);
	// Конец СтандартныеПодсистемы.ВариантыОтчетов
	
	// СтандартныеПодсистемы.ОбменДанными
	ОбщегоНазначения.ДобавитьПереименование(
		Итог, "2.1.2.5", "Роль.ВыполнениеОбменовДанными", "Роль.ВыполнениеСинхронизацииДанных", Библиотека);
		
	ОбщегоНазначения.ДобавитьПереименование(
		Итог, "2.1.2.5", "Роль.ДобавлениеИзменениеОбменовДанными", "Роль.НастройкаСинхронизацииДанных", Библиотека);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
КонецПроцедуры

// Устанавливает текстовое описание предмета
//
// Параметры
//  СсылкаНаПредмет  – ЛюбаяСсылка – объект ссылочного типа.
//  Представление	 - Строка - сюда необходимо поместить текстовое описание.
Процедура УстановитьПредставлениеПредмета(СсылкаНаПредмет, Представление) Экспорт
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	Если ТипЗнч(СсылкаНаПредмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().Представление();
		КонецЕсли;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1 (%2)", СсылкаНаПредмет.Наименование, ПредставлениеОбъекта);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.Взаимодействия
	Если ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") ИЛИ
		ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") ИЛИ
		ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.ТелефонныйЗвонок") ИЛИ 
		ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.Встреча") ИЛИ 
		ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.ЗапланированноеВзаимодействие") Тогда
		
		ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().Представление();
		КонецЕсли;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 (%2)", СсылкаНаПредмет.Тема, ПредставлениеОбъекта);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Взаимодействия
	
КонецПроцедуры

// Блокирует текущую область, начиная транзакцию и накладывая исключительную блокировку
// на все разделяемые объекты метаданных области.
//
// Параметры:
// ПроверитьОтсутствиеДругихСеансов - Булево - проверить отсутствие других
// пользовательских сеансов со значением разделителя равным текущему.
// В случае обнаружения других сеансов будет выдано исключение.
//
Процедура ЗаблокироватьТекущуюОбластьДанных(Знач ПроверитьОтсутствиеДругихСеансов = Истина) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	НачатьТранзакцию();
	РаботаВМоделиСервиса.ЗаблокироватьТекущуюОбластьДанных(ПроверитьОтсутствиеДругихСеансов);
	
	Возврат;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецПроцедуры

// Снимает блокировки с текущей области, фиксируя (или, в случае ошибки, откатывая) транзакцию.
//
Процедура РазблокироватьТекущуюОбластьДанных() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	// Если ИнформацияОбОшибке().Описание заполнено - код выполняется
	// из Исключение ...
	Если ПустаяСтрока(ИнформацияОбОшибке().Описание) Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
	Возврат;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецПроцедуры

// Вызывается при включении разделения данных по областям данных.
//
Процедура ПриВключенииРазделенияПоОбластямДанных() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	ОчередьЗаданий.ОбновитьРазделенныеРегламентныеЗадания();
	
	Если Константы.МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания.Получить() = 0 Тогда
		Константы.МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания.Установить(600);
	КонецЕсли;
	
	Если Константы.МаксимальноеКоличествоИсполняющихФоновыхЗаданий.Получить() = 0 Тогда
		Константы.МаксимальноеКоличествоИсполняющихФоновыхЗаданий.Установить(1);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.УдалитьЭлементыСправочникаСтраныМира();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	РаботаВМоделиСервисаПереопределяемый.ПриВключенииРазделенияПоОбластямДанных();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

// Вызывается при создании первого администратора.
Процедура ОбновитьПараметрыРаботыПрограммы() Экспорт
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	Справочники.ИдентификаторыОбъектовМетаданных.ОбновитьДанныеСправочника();
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ОбновитьПараметрыРаботыПользователей();
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступомСлужебный.ОбновитьПараметрыОграниченияДоступа();
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
// Возвращаемое значение:
//   Булево   - Ложь, если дальнейшее заполнение параметров необходимо прервать.
//
Функция ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске(Параметры) Экспорт
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	Если НЕ СтандартныеПодсистемыСервер.ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Тогда
		Возврат Ложь;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.НапоминанияПользователя
	НапоминанияПользователяСервер.ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры);
	// Конец СтандартныеПодсистемы.НапоминанияПользователя
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	ОбменДаннымиВМоделиСервиса.ДобавитьПараметрыРаботыКлиентскойЛогикиПриЗапуске(Параметры);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// СтандартныеПодсистемы.ОбменДанными
	ОбменДаннымиСервер.ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	ОбновлениеИнформационнойБазы.ДобавитьПараметрыРаботыКлиентскойЛогикиПриЗапуске(Параметры);
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// СтандартныеПодсистемы.ОбновлениеКонфигурации
	ОбновлениеКонфигурации.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	РаботаВМоделиСервиса.ДобавитьПараметрыРаботыКлиентаВМоделиСервиса(Параметры);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	
	// СтандартныеПодсистемы.РегламентныеЗадания
	РегламентныеЗаданияСлужебный.ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры);
	// Конец СтандартныеПодсистемы.РегламентныеЗадания
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	// Параметры не возвращаются, устанавливается флаг признака входа пользователя в 
	// область данных после создания последней резервной копии. Возможный вызов
	// несколько раз за сеанс не является проблемой.
	РезервноеКопированиеОбластейДанных.УстановитьФлагАктивностиПользователяВОбласти();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	
	// СтандартныеПодсистемы.РезервноеКопированиеИБ
	РезервноеКопированиеИБСервер.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.РезервноеКопированиеИБ
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	СоединенияИБ.ДобавитьПараметрыРаботыКлиентскойЛогикиПриЗапуске(Параметры);
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	
	// СтандартныеПодсистемы.Банки
	РаботаСБанками.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.Банки
	
	// СтандартныеПодсистемы.Валюты
	РаботаСКурсамиВалют.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.Валюты
	
	Возврат Истина;
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры) Экспорт
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	СтандартныеПодсистемыСервер.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.Взаимодействия
	Взаимодействия.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	СоединенияИБ.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	
	// СтандартныеПодсистемы.НапоминанияПользователя
	НапоминанияПользователяСервер.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.НапоминанияПользователя

	// СтандартныеПодсистемы.ОбменДанными
	ОбменДаннымиСервер.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.ОбновлениеКонфигурации
	ОбновлениеКонфигурации.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	ПолучениеФайловИзИнтернета.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	РаботаВМоделиСервиса.ДобавитьПараметрыРаботыКлиентаВМоделиСервиса(Параметры);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	ОбменДаннымиВМоделиСервиса.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// СтандартныеПодсистемы.РегламентныеЗадания
	РегламентныеЗаданияСлужебный.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.РегламентныеЗадания
	
	// СтандартныеПодсистемы.РезервноеКопированиеИБ
	РезервноеКопированиеИБСервер.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.РезервноеКопированиеИБ
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступомСлужебный.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ФайловыеФункции
	ФайловыеФункцииСлужебный.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.ФайловыеФункции
	
	// СтандартныеПодсистемы.ЭлектроннаяЦифроваяПодпись
	ЭлектроннаяЦифроваяПодпись.ДобавитьПараметрыРаботыКлиента(Параметры);
	// Конец СтандартныеПодсистемы.ЭлектроннаяЦифроваяПодпись
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при завершении работы конфигурации, т.е. в обработчиках:
// - ПередЗавершениемРаботыСистемы,
// - ПриЗавершенииРаботыСистемы
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗавершении(Параметры) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебный.ДобавитьПараметрыРаботыКлиентаПриЗавершении(Параметры);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	ОбменДаннымиВМоделиСервиса.ДобавитьПараметрыРаботыКлиентаПриЗавершении(Параметры);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// СтандартныеПодсистемы.РезервноеКопированиеИБ
	РезервноеКопированиеИБСервер.ДобавитьПараметрыРаботыКлиентаПриЗавершении(Параметры);
	// Конец СтандартныеПодсистемы.РезервноеКопированиеИБ
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Базовая функциональность: Обмен данными РИБ

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхПодчиненному(Источник = Неопределено, ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза) Экспорт
	
	// СтандартныеПодсистемы.ОбменДанными
	// Вставка кода от подсистемы обмена данными должна быть первой.
	ОбменДаннымиСобытия.ПриОтправкеДанныхКорреспонденту(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	ОбновлениеИнформационнойБазыСобытия.ПриОтправкеВерсийПодсистем(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза);
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ПриОтправкеДанных(ЭлементДанных, ОтправкаЭлемента, Истина);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	// Вставка кода от подсистемы обмена данными в модели сервиса должна быть последней.
	ОбменДаннымиВМоделиСервиса.ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Источник);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхГлавному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхГлавному(Источник = Неопределено, ЭлементДанных, ОтправкаЭлемента) Экспорт
	
	// Вставка кода от подсистемы обмена данными должна быть первой.
	// При отправке данных главному обработчик не вызываем, 
	// т.к. ограничение миграции "снизу-вверх" в РИБ по умолчанию не предусмотрено.
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	ОбновлениеИнформационнойБазыСобытия.ПриОтправкеВерсийПодсистем(ЭлементДанных, ОтправкаЭлемента);
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ПриОтправкеДанных(ЭлементДанных, ОтправкаЭлемента, Ложь);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	ОбменДаннымиВМоделиСервиса.ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненного(Источник = Неопределено, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	СтандартныеПодсистемыСервер.ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Истина);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриПолученииДополнительнойОбработки(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Истина);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступомСлужебный.ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Истина);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	ОбменДаннымиВМоделиСервиса.ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтГлавного(Источник = Неопределено, ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад) Экспорт
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	СтандартныеПодсистемыСервер.ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Ложь);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриПолученииДополнительнойОбработки(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Ложь);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступомСлужебный.ПриПолученииДанных(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Ложь);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура-обработчик события после получения данных в главном узле от подчиненного узла распределенной ИБ.
// Вызывается в момент завершения чтения сообщения обмена, когда все данные из сообщения обмена успешно прочитаны и записаны в ИБ.
// 
//  Параметры:
// Отправитель – ПланОбменаОбъект. Объект узла плана обмена, от которого получены данные.
// Отказ – Булево. Флаг отказа. Если установить данному параметру значение Истина,
// то сообщение будет считаться не принятым. Также произойдет отмена транзакции загрузки данных,
// если все данные были загружены в одной транзакции или отмена последней транзакции загрузки данных,
// если данные были загружены порциями.
//
Процедура ПослеПолученияДанныхОтПодчиненного(Отправитель, Отказ) Экспорт
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ПослеПолученияДанных(Отправитель, Отказ, Истина);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступомСлужебный.ПослеПолученияДанных(Отправитель, Отказ, Истина);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура-обработчик события после получения данных в подчиненном узле от главного узла распределенной ИБ.
// Вызывается в момент завершения чтения сообщения обмена, когда все данные из сообщения обмена успешно прочитаны и записаны в ИБ.
// 
//  Параметры:
// Отправитель – ПланОбменаОбъект. Объект узла плана обмена, от которого получены данные.
// Отказ – Булево. Флаг отказа. Если установить данному параметру значение Истина,
// то сообщение будет считаться не принятым. Также произойдет отмена транзакции загрузки данных,
// если все данные были загружены в одной транзакции или отмена последней транзакции загрузки данных,
// если данные были загружены порциями.
//
Процедура ПослеПолученияДанныхОтГлавного(Отправитель, Отказ) Экспорт
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебный.ПослеПолученияДанных(Отправитель, Отказ, Ложь);
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступомСлужебный.ПослеПолученияДанных(Отправитель, Отказ, Ложь);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры


// Процедура-обработчик события после отправки данных из подчиненного узла в главный узел распределенной ИБ.
// Вызывается в момент завершения записи сообщения обмена, когда все зарегистрированные изменения данных успешно выгружены в сообщение обмена.
// 
//  Параметры:
// Получатель – ПланОбменаОбъект. Объект узла плана обмена, для которого формируется сообщение обмена.
// Отказ – Булево. Флаг отказа. Если установить данному параметру значение Истина,
// то сообщение не будет считаться сформированным и отправленным.
//
Процедура ПослеОтправкиДанныхГлавному(Получатель, Отказ) Экспорт
	
	
	
КонецПроцедуры

// Процедура-обработчик события после отправки данных из главного узла в подчиненный узел распределенной ИБ.
// Вызывается в момент завершения записи сообщения обмена, когда все зарегистрированные изменения данных успешно выгружены в сообщение обмена.
// 
//  Параметры:
// Получатель – ПланОбменаОбъект. Объект узла плана обмена, для которого формируется сообщение обмена.
// Отказ – Булево. Флаг отказа. Если установить данному параметру значение Истина,
// то сообщение не будет считаться сформированным и отправленным.
//
Процедура ПослеОтправкиДанныхПодчиненному(Получатель, Отказ) Экспорт
	
	
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// Базовая функциональность: Разделение данных

// Устанавливает разделение сеанса.
//
// Параметры:
// Использование - Булево - Использование разделителя ОбластьДанных в сеансе
// ОбластьДанных - Число - Значение разделителя ОбластьДанных
//
Процедура УстановитьРазделениеСеанса(Знач Использование, Знач ОбластьДанных = Неопределено) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	РаботаВМоделиСервиса.УстановитьРазделениеСеанса(Использование, ОбластьДанных);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

// Возвращает значение разделителя текущей области данных.
// В случае если значение не установлено выдается ошибка.
// 
// Возвращаемое значение: 
// Тип значения разделителя.
// Значение разделителя текущей области данных. 
// 
Функция ЗначениеРазделителяСеанса() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	Возврат РаботаВМоделиСервиса.ЗначениеРазделителяСеанса();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецФункции

// Возвращает флаг использования разделителя ОбластьДанных для текущего сеанса.
// 
// Возвращаемое значение: 
// Булево - Истина разделение используется, иначе нет.
// 
Функция ИспользованиеРазделителяСеанса() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	Возврат РаботаВМоделиСервиса.ИспользованиеРазделителяСеанса();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	ВызватьИсключение(НСтр("ru = 'Подсистема ""Работа в модели сервиса"" не доступна'"));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Базовая функциональность: Версионирование программных интерфейсов

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию подсистем,
// используя в качестве ключей названия подсистем.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура: 
//	- Ключи = Названия подсистем. 
//	- Значения = Массивы названий поддерживаемых версий.
//
// Пример реализации:
//
//	// СервисПередачиФайлов
//	МассивВерсий = Новый Массив;
//	МассивВерсий.Добавить("1.0.1.1");	
//	МассивВерсий.Добавить("1.0.2.1"); 
//	СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//	// Конец СервисПередачиФайлов
//
Процедура ПолучитьПоддерживаемыеВерсииПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
	// СтандартныеПодсистемы.ОбменДанными
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("2.0.1.6");
	МассивВерсий.Добавить("2.1.1.7");
	СтруктураПоддерживаемыхВерсий.Вставить("ОбменДанными", МассивВерсий);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("2.0.1.6");
	МассивВерсий.Добавить("2.1.1.7");
	МассивВерсий.Добавить("2.1.2.1");
	СтруктураПоддерживаемыхВерсий.Вставить("ОбменДаннымиВМоделиСервиса", МассивВерсий);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("2.0.1.6");
	МассивВерсий.Добавить("2.1.1.7");
	СтруктураПоддерживаемыхВерсий.Вставить("ОбменСообщениями", МассивВерсий);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("1.0.1.1");	
	СтруктураПоддерживаемыхВерсий.Вставить("РезервноеКопированиеОбластейДанных", МассивВерсий);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("1.0.3.1");
	МассивВерсий.Добавить("1.0.3.2");
	СтруктураПоддерживаемыхВерсий.Вставить("СообщенияВМоделиСервиса", МассивВерсий);
	
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	
КонецПроцедуры

// СтандартныеПодсистемы.БизнесПроцессыИЗадачи

/////////////////////////////////////////////////////////////////////////////////
// Бизнес-процессы и задачи

// Возвращает адрес электронной почты пользователя Получатель для рассылки уведомлений о задачах.
//
// Параметры
//  Получатель  – СправочникСсылка.Пользователи
//  Адрес       - Строка – возвращаемый адрес электронной почты.
//
//
Процедура ПолучитьАдресЭлектроннойПочты(Знач Получатель, Адрес) Экспорт

	// СтандартныеПодсистемы.КонтактнаяИнформация
	Адрес = УправлениеКонтактнойИнформацией.ПолучитьКонтактнуюИнформацияОбъекта(
		Получатель, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры 

// Возвращает Истина, если используется подсистема ВнешниеЗадачиИБизнесПроцессы
Функция ИспользоватьВнешниеЗадачиИБизнесПроцессы() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает содержание переданного объекта для передачи в другую информационную систему.
//
// Параметры
//  ПредметЗадачи - объект, представление которого надо сформировать
//  Представление - Строка - содержание в виде HTML или MXL документа
//
Процедура ПолучитьПредставлениеПредметаВнешнейЗадачи(ПредметЗадачи, Представление) Экспорт
	
	
КонецПроцедуры

// Возвращает массив объектов типа ОписаниеПередаваемогоФайла или Неопределено.
//
// Параметры
//  ПредметЗадачи - объект, список файлов которого надо вернуть
//  СписокФайлов - Массив - список файлов предмета
//
Процедура ПолучитьСписокФайлов(ПредметЗадачи, СписокФайлов) Экспорт
	
	
КонецПроцедуры

// Возвращает Истина, если задача является внешней. 
//
// Параметры
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя
//
Функция ЭтоВнешняяЗадача(ЗадачаСсылка) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Помечает задачу-источник бизнес-процесса БизнесПроцесс как выполненную.
//
// Параметры
//  БизнесПроцесс - БизнесПроцессОбъект.Задание
//
Процедура ВыполнитьЗадачуИсточник(БизнесПроцесс) Экспорт
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи


// СтандартныеПодсистемы.ВариантыОтчетов

/////////////////////////////////////////////////////////////////////////////////
// Варианты отчетов

// Заменяет тип и ссылку внешнего отчета для дополнительных отчетов, подключенных
//   к хранилищу подсистемы.
//
// Параметры:
//   Результат (Структура) см. ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени()
//
Процедура ЗаменитьТипИСсылкуЕслиОтчетДополнительный(Результат) Экспорт
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДопОтчет.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДопОтчет
	|ГДЕ
	|	ДопОтчет.ИмяОбъекта = &ИмяОбъекта
	|	И ДопОтчет.ПометкаУдаления = ЛОЖЬ
	|	И ДопОтчет.ИспользуетХранилищеВариантов = ИСТИНА
	|	И ДопОтчет.Публикация = &Публикация";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбъекта", Результат.ОтчетИмя);
	Если ВариантыОтчетов.ПодключеныВсеОтчеты() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ДопОтчет.ИспользуетХранилищеВариантов = ИСТИНА", "");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	// Привилегированный режим необходим для целостности формируемых данных.
	// Права доступа будут применяться на этапе их использования.
	УстановитьПривилегированныйРежим(Истина);
	
	ОтчетНайден = Истина;
	
	Запрос.УстановитьПараметр("Публикация", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		
		Запрос.УстановитьПараметр("Публикация", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если НЕ Выборка.Следующий() Тогда
			
			Запрос.УстановитьПараметр("Публикация", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если НЕ Выборка.Следующий() Тогда
				
				ОтчетНайден = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ОтчетНайден Тогда
		Результат.Отчет = Выборка.Ссылка;
		Результат.ТипОтчета = Перечисления.ТипыОтчетов.Дополнительный;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры // ЗаменитьТипИСсылкуЕслиОтчетДополнительный

// Дополняет массив ссылкам дополнительных отчетов, доступных текущему пользователю.
//
// Параметры:
//   Результат (Массив) из (*) см. тип реквизита Отчет справочника ВариантыОтчетов.
//       Ссылки отчетов, доступных текущему пользователю.
//
Процедура ДобавитьДополнительныеОтчетыДоступныеТекущемуПользователю(Результат) Экспорт
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДопОтчеты.Ссылка
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ДопОтчеты
		|ГДЕ
		|	ДопОтчеты.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет)
		|	И ДопОтчеты.ИспользуетХранилищеВариантов
		|	И НЕ ДопОтчеты.Ссылка В (&МассивСсылок)";
		Запрос.УстановитьПараметр("МассивСсылок", Результат);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры // ДополнитьОтчетыТекущегоПользователя

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Параметры:
//   ЭтаФорма (УправляемаяФорма)
//   Остальные параметры передаются из параметров обработчика "как есть",
//       см. события для "УправляемаяФорма" в справке.
//
Процедура ФормаОтчетаПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.РассылкаОтчетов
	РассылкаОтчетов.ФормаОтчетаДобавитьКоманды(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.РассылкаОтчетов
	
КонецПроцедуры

// Создает экземпляр объекта отчета.
//
// Параметры:
//   ОтчетСсылка (*) см. реквизит справочника ВариантыОтчетов.Отчет
//   ОтчетОбъект (ОтчетОбъект)
//
Процедура ПолучитьОбъектОтчета(ОтчетСсылка, ОтчетОбъект) Экспорт
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	Если ТипЗнч(ОтчетСсылка) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		ОтчетОбъект = ДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(ОтчетСсылка);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры // ПолучитьОбъектОтчета

// Конец СтандартныеПодсистемы.ВариантыОтчетов


// СтандартныеПодсистемы.Валюты

/////////////////////////////////////////////////////////////////////////////////
// Валюты

// Обновляет связи между справочником валют и файлом поставляемых курсов
// в зависимости от флажка ЗагружаетсяИзИнтернета
//
// Параметры:
//   Валюта - СправочникОбъект.Валюты
//
Функция ОбновитьКурсыВалютВМоделиСервиса(Валюта) Экспорт

	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	КурсыВалютСлужебныйВМоделиСервиса.ЗапланироватьКопированиеКурсовВалюты(Валюта);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса

КонецФункции

// Конец СтандартныеПодсистемы.Валюты

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

/////////////////////////////////////////////////////////////////////////////////
// Дополнительные отчеты и обработки

// Обработчик, вызываемый при записи регламентного задания по выполнению дополнительной обработки.
//
// Параметры:
// РегламентноеЗадание - РегламентноеЗадание - записываемое регламентное задание.
// Использование - Булево - флаг использования задания.
//
Процедура ДополнительныеОтчетыИОбработкиПриЗаписи(ТекущийОбъект, Отказ) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса
	Для Каждого РегламентноеЗадание Из ТекущийОбъект.ДополнительныеСвойства.ЗаданияДляПостановкиВОчередь Цикл
		ДополнительныеОтчетыИОбработкиСлужебныйВМоделиСервиса.УточнитьПараметрыЗаданияВОчереди(РегламентноеЗадание, ТекущийОбъект.ДополнительныеСвойства.РазделениеВключено);
	КонецЦикла;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса
	
	// СтандартныеПодсистемы.ВариантыОтчетов
	Если ТекущийОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ ТекущийОбъект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		Если ТекущийОбъект.ЭтоНовый() Тогда
			ВнешнийОбъект = ВнешниеОтчеты.Создать(ТекущийОбъект.ИмяОбъекта);
		Иначе
			ВнешнийОбъект = ДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(ТекущийОбъект.Ссылка);
		КонецЕсли;
		
		ВариантыОтчетов.ОбработкаВариантовДополнительногоОтчета(ТекущийОбъект, Отказ, ВнешнийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВариантыОтчетов
	
КонецПроцедуры

// Формирует ссылку варианта дополнительного отчета.
// 
// Параметры:
//   Отчет (СправочникСсылка.ДополнительныеОтчетыИОбработки)
//   КлючВарианта (Строка)
//   Результат (*) См. описание вызываемых процедур и функций.
// 
Процедура СсылкаВариантаДополнительногоОтчета(Отчет, КлючВарианта, Результат) Экспорт
	
	// СтандартныеПодсистемы.ВариантыОтчетов
	Результат = ВариантыОтчетов.ПолучитьСсылку(Отчет, КлючВарианта);
	// Конец СтандартныеПодсистемы.ВариантыОтчетов
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки


// СтандартныеПодсистемы.ЗавершениеРаботыПользователей

/////////////////////////////////////////////////////////////////////////////////
// Завершение работы пользователей

// Вызывается при отключении сеанса на стороне сервера 1С:Предприятия.
//
// Параметры
//  НомерСеанса - Число - номер сеанса для отключения.
//  Результат - Булево – результат отключения сеанса.
//  СообщениеОбОшибке - Строка - в этом параметре возвращается текст сообщения об ошибке в случае неудачи.
//  СтандартнаяОбработка - Булево - вернуть Ложь, если необходимо запретить стандартную обработку отключения сеанса.
//
Процедура ПриОтключенииСеанса(НомерСеанса, Результат, СообщениеОбОшибке, СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	Если СоединенияИБПовтИсп.ПараметрыОтключенияСеансов().WindowsПлатформаНаСервере Тогда
		Возврат;
	КонецЕсли;	
		
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;	
	
	// Если сервер работает не под управлением ОС Microsoft Windows, то передаем управление Агенту сервиса.
	СтандартнаяОбработка = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	Параметры = СоединенияИБПовтИсп.ПолучитьПараметрыАдминистрированияИБ();
	Попытка
		Результат = РаботаВМоделиСервиса.УдалитьСеансыИРазорватьСоединенияЧерезАгентСервиса(НомерСеанса, Параметры);
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Результат = Ложь;
	КонецПопытки;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей


// СтандартныеПодсистемы.ЗащитаПерсональныхДанных

/////////////////////////////////////////////////////////////////////////////////
// Защита персональных данных

// Процедура обеспечивает сбор сведений о хранении данных, 
// относящихся к персональным
//
// Параметры:
//		ТаблицаСведений - таблица значений с полями:
//			Объект 			- строка, содержащая полное имя объекта метаданных,
//			ПоляРегистрации - строка, в которой перечислены имена полей регистрации, 
//								отдельные поля регистрации отделяются запятой,
//								альтернативные - символом "|",
//			ПоляДоступа		- строка, в которой перечислены через запятую имена полей доступа
//			ОбластьДанных	- строка с идентификатором области данных, необязательно для заполнения
//
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	// СтандартныеПодсистемы.ФизическиеЛица
	Если ТаблицаСведений.Найти("Справочник.ФизическиеЛица", "Объект") = Неопределено Тогда
		НовыеСведения = ТаблицаСведений.Добавить();
		НовыеСведения.Объект			= "Справочник.ФизическиеЛица";
		НовыеСведения.ПоляРегистрации	= "Ссылка";
		НовыеСведения.ПоляДоступа		= "ДатаРождения,Пол,ИНН";
		НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
		
		НовыеСведения = ТаблицаСведений.Добавить();
		НовыеСведения.Объект			= "Справочник.ФизическиеЛица";
		НовыеСведения.ПоляРегистрации	= "Ссылка";
		НовыеСведения.ПоляДоступа		= "КонтактнаяИнформация.ЗначенияПолей,КонтактнаяИнформация.Представление,КонтактнаяИнформация.Регион,КонтактнаяИнформация.Город,КонтактнаяИнформация.АдресЭП,КонтактнаяИнформация.НомерТелефона,КонтактнаяИнформация.НомерТелефонаБезКодов";
		НовыеСведения.ОбластьДанных		= "КонтактнаяИнформация";
	КонецЕсли;
	
	Если ТаблицаСведений.Найти("РегистрСведений.ДокументыФизическихЛиц", "Объект") = Неопределено Тогда
		НовыеСведения = ТаблицаСведений.Добавить();
		НовыеСведения.Объект			= "РегистрСведений.ДокументыФизическихЛиц";
		НовыеСведения.ПоляРегистрации	= "Физлицо";
		НовыеСведения.ПоляДоступа		= "ВидДокумента,Серия,Номер,ДатаВыдачи,СрокДействия,КемВыдан,КодПодразделения,Представление";
		НовыеСведения.ОбластьДанных		= "ПаспортныеДанные";
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ФизическиеЛица
	
КонецПроцедуры

// Процедура обеспечивает составление коллекции областей персональных данных
//
// Параметры:
//		ОбластиПерсональныхДанных - таблица значений с полями:
//			Имя - идентификатор области данных
//			Представление - пользовательское представление области данных
//			Родитель - идентификатор родительской области данных
//
Процедура ЗаполнитьОбластиПерсональныхДанных(ОбластиПерсональныхДанных) Экспорт
	
	// СтандартныеПодсистемы.ФизическиеЛица
	Если ОбластиПерсональныхДанных.Найти("ЛичныеДанные", "Имя") = Неопределено Тогда
		НоваяОбласть = ОбластиПерсональныхДанных.Добавить();
		НоваяОбласть.Имя = "ЛичныеДанные";
		НоваяОбласть.Представление = НСтр("ru = 'Личные данные'");
	КонецЕсли;
	
	Если ОбластиПерсональныхДанных.Найти("ПаспортныеДанные", "Имя") = Неопределено Тогда
		НоваяОбласть = ОбластиПерсональныхДанных.Добавить();
		НоваяОбласть.Имя = "ПаспортныеДанные";
		НоваяОбласть.Представление = НСтр("ru = 'Паспортные данные'");
		НоваяОбласть.Родитель = "ЛичныеДанные";
	КонецЕсли;
	
	Если ОбластиПерсональныхДанных.Найти("КонтактнаяИнформация", "Имя") = Неопределено Тогда
		НоваяОбласть = ОбластиПерсональныхДанных.Добавить();
		НоваяОбласть.Имя = "КонтактнаяИнформация";
		НоваяОбласть.Представление = НСтр("ru = 'Адреса и телефоны'");
		НоваяОбласть.Родитель = "ЛичныеДанные";
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ФизическиеЛица
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗащитаПерсональныхДанных


// СтандартныеПодсистемы.КалендарныеГрафики

/////////////////////////////////////////////////////////////////////////////////
// Календарные графики

// Вызывается для установки связи между календарем и ПК
//
Процедура УстановитьРучноеРедактированиеКалендаря(Знач Календарь, Знач РучноеИзменение) Экспорт
	
// СтандартныеПодсистемы.РаботаВМоделиСервиса.КалендарныеГрафикиВМоделиСервиса
	Менеджер = РегистрыСведений.РучноеИзменениеКалендарей.СоздатьМенеджерЗаписи();
	Менеджер.Календарь = Календарь;
	Менеджер.РучноеИзменение = РучноеИзменение;
	Менеджер.Записать();
// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.КалендарныеГрафикиВМоделиСервиса
	
КонецПроцедуры

// Вызывается на форме редактирования календаря
//
Функция СчитатьРучноеИзменениеКалендаря(Знач Календарь) Экспорт
	
// СтандартныеПодсистемы.РаботаВМоделиСервиса.КалендарныеГрафикиВМоделиСервиса
	Выборка = РегистрыСведений.РучноеИзменениеКалендарей.Выбрать(Новый Структура("Календарь", Календарь));
	Если Выборка.Следующий() Тогда
		Возврат Выборка.РучноеИзменение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.КалендарныеГрафикиВМоделиСервиса

	//Вне сервиса календари всегда редактируемы
	Возврат Истина;
	
КонецФункции

// Вызывается при ручном редактировании производственного календаря
//
Процедура ЗапланироватьОбновлениеКалендарейПоДаннымПроизводственныхКалендарей(Знач Изменения) Экспорт
	
// СтандартныеПодсистемы.РаботаВМоделиСервиса.КалендарныеГрафикиВМоделиСервиса
	КалендарныеГрафикиСлужебныйВМоделиСервиса.ЗапланироватьОбновлениеКалендарей(Изменения);
// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.КалендарныеГрафикиВМоделиСервиса
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КалендарныеГрафики

// СтандартныеПодсистемы.КонтактнаяИнформация

/////////////////////////////////////////////////////////////////////////////////
// Контактная информация

// Определяет Используются ли в конфигурации классификаторы
//
// Параметры:
//  Используются - Булево - Истина, если используются, Ложь - иначе.
//
Процедура ИспользуютсяКлассификаторы(Используются) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	Используются = Истина;
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры

// Определяет по индексу записи в адресном классификаторе.
//
// Параметры:
//	Индекс - Строка - индекс, по которому будет производиться поиск.
//	АдресныеОбъекты - Неопределено или Структура с полями:
//    Количество      - Число - количество найденных вариантов
//    НайденныйРегион - Строка - если найден один регион
//    НайденныйРайон  - Строка - если найден один район
//    ПризнакАктуальности - Число - признак актуальности если найден один вариант
//    АдресВХранилище - Строка - идентификатор сохраненной в хранилище таблицы с найденными вариантами
//
Процедура ОпределитьЗаписиПоИндексу(Индекс, АдресныеОбъекты) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	АдресныеОбъекты = АдресныйКлассификатор.НайтиЗаписиПоИндексу(Индекс);
	Возврат;
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры

// Получить компоненты адресного элемента по его коду
//
// Параметры:
//	КодАдресногоЭлемента - Число - код адресного элемента, по которому ищутся компоненты адреса 
//	Результат - структура с полями(в которую выгружается результат поиска):
//		Регион - Строка - наименование найденного региона
//		Район - Строка - наименование найденного района
//		Город - Строка - наименование найденного города
//		НаселенныйПункт - Строка - наименование найденного населенного пункта
//		Улица - Строка - наименование найденной улицы
//		ПризнакАктуальности - Число - признак актуальности найденного адреса
//
Процедура ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодАдресногоЭлемента, Результат) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	АдресныйКлассификатор.ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодАдресногоЭлемента, Результат);
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры

// Определяет структуру адреса.
//
// Параметры:
//	СтруктураАдреса -Структура с полями:
//		Индекс - Строка - индекс адреса по переданным параметрам
//		Регион - Строка - регион по переданному коду
//		Район - Строка - район по переданному коду
//		Город - Строка - город по переданному коду
//		НаселенныйПункт - Строка - населенный пункт по переданному коду
//		Улица - Строка - улица по переданному коду
//		Дом - Строка - переданный номер дома
//		Корпус - Строка - переданный номер корпуса
//		Квартира - Строка - переданный номер квартиры
//	КодАдресногоЭлемента - Число - код адресного элемента, по которому ищутся компоненты адреса 
//	Дом - Строка - номер дома, если требуется
//	Корпус - Строка - номер корпуса, если требуется
//	Квартира - Строка - номер квартиры, если требуется
//
Процедура ОпределитьСтруктуруАдреса(СтруктураАдреса, КодАдресногоЭлемента, Дом = "", Корпус = "", Квартира = "") Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	СтруктураАдреса = АдресныйКлассификатор.ПолучитьСтруктуруАдреса(КодАдресногоЭлемента, Дом, Корпус, Квартира);
	Возврат;
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры

// Определяет индекс по переданным региону, району, городу, населенному пункту,
// улице, дому и корпусу
//
// Параметры: 
//	Индекс - Строка - почтовый индекс.
//	НазваниеРегиона - название региона( с сокращением)
//	НазваниеРайона - название района( с сокращением)
//	НазваниеГорода - название города( с сокращением)
//	НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//	Улица - название улицы ( с сокращением)
//	НомерДома - номер дома, для которого необходимо получить индекс
//	НомерКорпуса - номер корпуса
//	РодительИндекса - переменная, в которую сохраняется структура найденного адресного элемента
//
Процедура ОпределитьИндекс(Индекс, НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, 
	НазваниеУлицы, НомерДома, НомерКорпуса, РодительИндекса = Неопределено) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	Индекс = АдресныйКлассификатор.ПолучитьИндекс(НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, 
		НазваниеУлицы, НомерДома, НомерКорпуса, РодительИндекса);
	Возврат;
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры

// Обработчик автоподбора в адресном элементе ввода.
//
// Параметры:
//	СписокАвтоПодбора - СписокЗначений - список для автоподбора.
//	Текст  - Строка - введенный пользователем текст в адресном элементе ввода
//	Регион - Строка - ранее введенное название региона
//	Район  - Строка - ранее введенное название района
//	Город  - Строка - ранее введенное название города
//	НаселенныйПункт - Строка - ранее введенное название населенного пункта
//	УровеньЭлемента - Число - идентификатор адресного элемента ввода.
//                            1 - регион, 2 - район, 3 - город, 4 - населенный пункт, 5 - улица, 0 - прочее.
//	ПризнакАктуальности - Число - признак актуальности элемента.
//
// Возвращаемое значение:
// 	СписокЗначений; Неопределено
//
Процедура ОпределитьСписокАвтоПодбораТекстаВАдресномЭлементе(СписокАвтоПодбора, Текст, Регион, Район, Город, НаселенныйПункт, УровеньЭлемента,
	ПризнакАктуальности = 0) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	СписокАвтоПодбора = АдресныйКлассификатор.АвтоПодборТекстВАдресномЭлементе(Текст, Регион, Район, Город, НаселенныйПункт, УровеньЭлемента,
		ПризнакАктуальности);
	Возврат;
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры

// Определяет соответствие адреса КЛАДРу по переданным индексу, региону, району, городу, населенному пункту,
// улице, дому и корпусу.
//
// Параметры:
//	СтруктураПроверки - Структура с полями:
//		Регион - Структура - структура полей найденного региона
//		Район - Структура - структура полей найденного района
//		Город - Структура - структура полей найденного города
//		НаселенныйПункт - Структура - структура полей найденного населенного пункта
//		Улица - Структура - структура полей найденной улицы
//		Дом - Структура - структура полей найденного дома
//		ЕстьОшибки - Булево - найдены ли ошибки при проверке
//		СтруктураОшибок - Структура - структура в которой в качестве ключа выступает название элемента
//			а в качестве значения - подробный текст ошибки.
//	УказанныйИндекс - Строка - индекс
//	НазваниеРегиона - Строка - название региона(с сокращением)
//	НазваниеРайона - Строка - название района(с сокращением)
//	НазваниеГорода - Строка - название города(с сокращением)
//	НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//	НазваниеУлицы - Строка - название улицы(с сокращением)
//	НомерДома - Строка - номер дома, для которого необходимо получить индекс
//	НомерКорпуса - Строка - номер корпуса
//
Процедура ОпределитьСоответствиеАдресаКЛАДРу(СтруктураПроверки, УказанныйИндекс = "", НазваниеРегиона = "", НазваниеРайона = "",
	НазваниеГорода = "", НазваниеНаселенногоПункта = "", НазваниеУлицы = "", НомерДома = "", НомерКорпуса = "") Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	СтруктураПроверки = АдресныйКлассификатор.ПроверитьСоответствиеАдресаКЛАДРу(УказанныйИндекс, НазваниеРегиона,НазваниеРайона, 
		НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы, НомерДома , НомерКорпуса);
	Возврат;
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры

// Проверяет загружен ли адресный элемент в базу.
//
// Параметры: 
//	АдресныйЭлементЗагружен - Булево - признак загруженности адресного элемента.
//	НазваниеРегиона - Строка - название региона(с сокращением)
//	НазваниеРайона - Строка - название района(с сокращением)
//	НазваниеГорода - Строка - название города(с сокращением)
//	НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//	НазваниеУлицы - Строка - название улицы(с сокращением)
//	Уровень - Число - уровень, который нужно проверить на загруженность
//
// Возвращаемое значение:
//	Булево - Истина, если адресный элемент загружен, Ложь - в противном случае.
//
Процедура ОпределитьЗагруженностьАдресногоЭлемента(АдресныйЭлементЗагружен, НазваниеРегиона, НазваниеРайона = "", НазваниеГорода = "",
	НазваниеНаселенногоПункта = "", НазваниеУлицы = "", Уровень = 1) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	АдресныйЭлементЗагружен = АдресныйКлассификатор.АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, НазваниеГорода,
		НазваниеНаселенногоПункта, НазваниеУлицы, Уровень);
	Возврат;
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры

// По полному наименованию адресного элемента определяет отдельно его имя, и отдельно его адресное сокращение
//
// Параметры:
//	ИмяИАдресноеСокращение - Строка - имя адресное сокращение.
//	СтрокаЭлемента - Строка - строка элемента.
//	АдресноеСокращение - Строка - адресное сокращение.
//
Процедура ОпределитьИмяИАдресноеСокращение(ИмяИАдресноеСокращение, СтрокаЭлемента, АдресноеСокращение) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	ИмяИАдресноеСокращение = АдресныйКлассификатор.ПолучитьИмяИАдресноеСокращение(СтрокаЭлемента, АдресноеСокращение);
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры

// По переданным элементам адреса определяет, загружен ли КЛАДР по соответствующим элементам. 
//
// Параметры:
//	СтруктураЗагруженныхЭлементовАдреса - Структура с полями:
//		Регион - Булево - регион загружен
//		Район - Булево - район загружен
//		Город - Булево - город загружен
//		НаселенныйПункт - населенный пункт загружен
//		Улица - Булево - улица загружена
//		Дом - Булево - дом загружен.
//	НазваниеРегиона - Строка - название региона(с сокращением)
//	НазваниеРайона - Строка - название района(с сокращением)
//	НазваниеГорода - Строка - название города(с сокращением)
//	НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//	НазваниеУлицы - Строка - название улицы(с сокращением)
//
Процедура ОпределитьСтруктуруЗагруженныхЭлементовАдреса(СтруктураЗагруженныхЭлементовАдреса, НазваниеРегиона, НазваниеРайона, НазваниеГорода,
	НазваниеНаселенногоПункта, НазваниеУлицы) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	СтруктураЗагруженныхЭлементовАдреса = АдресныйКлассификатор.СтруктураЗагруженныхЭлементовАдреса(НазваниеРегиона, НазваниеРайона, НазваниеГорода,
		НазваниеНаселенногоПункта, НазваниеУлицы)
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры

// Определяет наименование региона по коду.
//
// Параметры:
//	НаименованиеРегиона - наименование региона.
//	КодРегиона - Число - код региона.
//
Процедура ОпределитьНаименованиеРегионаПоКоду(НаименованиеРегиона, КодРегиона) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	НаименованиеРегиона = АдресныйКлассификатор.ПолучитьНаименованиеРегионаПоКоду(КодРегиона);
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры

// Определяет код региона по наименованию.
//
// Параметры:
//	КодРегиона - Число - код региона.
//	Регион - Строка - наименование региона.
//
Процедура ОпределитьКодРегионаПолНаименованию(КодРегиона, Регион) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	КодРегиона = АдресныйКлассификатор.ПолучитьКодРегионаПоНаименованию(Регион);
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры

// Возвращает строку(структуру) адресного классификатора по значениям адресных элементов
//
// Параметры:
//	СтруктураАдресногоКлассификатора - Неопределено или Структура - Структура полей по найденому адресному элементу (см. функцию "АдресныйКлассификатор.ПолучитьПустуюСтруктуруАдреса()")
//	НазваниеРегиона - название региона( с сокращением)
//	НазваниеРайона - название района( с сокращением)
//	НазваниеГорода - название города( с сокращением)
//	НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//	НазваниеУлицы - название улицы( с сокращением)
//
Процедура ОпределитьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(СтруктураАдресногоКлассификатора, НазваниеРегиона, НазваниеРайона,
	НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	СтруктураАдресногоКлассификатора = АдресныйКлассификатор.ВернутьСтруктуруАдресногоКлассификатораПоАдреснымЭлементам(НазваниеРегиона, НазваниеРайона,
		НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы);
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры

// Процедура очищает потомков определенного адресного элемента
//
// Параметры:
//  Регион - строка - строка, куда будет помещено строковое представление "родительского" региона.
//  Район - строка - строка, куда будет помещено строковое представление "родительского" района.
//  Город - строка - строка, куда будет помещено строковое представление "родительского" города.
//  НаселенныйПункт - строка - строка, куда будет помещено строковое представление "родительского" населенного пункта.
//  Улица - строка - строка, куда будет помещено строковое представление "родительской" улицы.
//  Дом - строка - строка, куда будет помещено строковое представление "родительского" номера дома.
//  Корпус - строка - строка, куда будет помещено строковое представление "родительского" номера корпуса дома.
//  Квартира - строка - строка, куда будет помещено строковое представление "родительского" номера квартиры.
//  Уровень - Число - уровень адресного элемента.
//
Процедура ОчиститьПотомковПоУровнюАдресногоЭлемента(Регион, Район, Город, НаселенныйПункт, Улица, 
	Дом, Корпус, Квартира, Уровень) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	АдресныйКлассификатор.ОчиститьПотомковПоУровнюАдресногоЭлемента(Регион, Район, Город, НаселенныйПункт, Улица, 
		Дом, Корпус, Квартира, Уровень);
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.ОбменДанными

/////////////////////////////////////////////////////////////////////////////////
// Обмен данными

// Обработчик при выгрузке данных.
// Используется для переопределения стандартной обработки выгрузки данных.
// В данном обработчике должна быть реализована логика выгрузки данных:
// выборка данных для выгрузки, сериализация данных в файл сообщения или сериализация данных в поток.
// После выполнения обработчика выгруженные данные будут отправлены получателю подсистемой обмена данными.
// Формат сообщения для выгрузки может быть произвольным.
// В случае ошибок при отправке данных следует прерывать выполнение обработчика
// методом ВызватьИсключение с описанием ошибки.
//
// Параметры:
//
// СтандартнаяОбработка. Тип: Булево.
// В данный параметр передается признак выполнения стандартной (системной) обработки события.
// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная
// обработка события производиться не будет. Отказ от стандартной обработки не отменяет действие.
// Значение по умолчанию: Истина.
//
// Получатель (только для чтения). Тип: ПланОбменаСсылка.
// Узел плана обмена, для которого выполняется выгрузка данных.
//
// ИмяФайлаСообщения (только для чтения). Тип: Строка.
// Имя файла, в который необходимо выполнить выгрузку данных. Если этот параметр заполнен, то система ожидает,
// что данные будут выгружены в файл. После выгрузки система выполнит отправку данных из этого файла.
// Если параметр пустой, то система ожидает, что данные будут выгружены в параметр ДанныеСообщения.
//
// ДанныеСообщения. Тип: Произвольный.
// Если параметр ИмяФайлаСообщения пустой, то система ожидает, что данные будут выгружены в этот параметр.
//
// КоличествоЭлементовВТранзакции (только для чтения). Тип: Число.
// Определяет максимальное число элементов данных, которые помещаются в сообщение в рамках одной транзакции базы данных.
// При необходимости в обработчике следует реализовать логику установки транзакционных блокировок на выгружаемые данные.
// Значение параметра задается в настройках подсистемы обмена данными.
//
// ИмяСобытияЖурналаРегистрации (только для чтения). Тип: Строка.
// Имя события журнала регистрации текущего сеанса обмена данными. Используется для записи в журнал регистрации 
// данных (ошибок, предупреждений, информации) с заданным именем события.
// Соответствует параметру ИмяСобытия метода глобального контекста ЗаписьЖурналаРегистрации.
//
// КоличествоОтправленныхОбъектов. Тип: Число.
// Счетчик отправленных объектов. Используется для определения количества отправленных объектов
// для последующей фиксации в протоколе обмена.
//
Процедура ПриВыгрузкеДанных(СтандартнаяОбработка,
								Получатель,
								ИмяФайлаСообщения,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ИмяСобытияЖурналаРегистрации,
								КоличествоОтправленныхОбъектов
	) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	ОбменСообщениямиВнутренний.ПриВыгрузкеДанных(СтандартнаяОбработка,
								Получатель,
								ИмяФайлаСообщения,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ИмяСобытияЖурналаРегистрации,
								КоличествоОтправленныхОбъектов
	);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	
КонецПроцедуры

// Обработчик при загрузке данных.
// Используется для переопределения стандартной обработки загрузки данных.
// В данном обработчике должна быть реализована логика загрузки данных:
// необходимые проверки перед загрузкой данных, сериализация данных из файла сообщения или сериализация данных из потока.
// Формат сообщения для загрузки может быть произвольным.
// В случае ошибок при получении данных следует прерывать выполнение обработчика
// методом ВызватьИсключение с описанием ошибки.
//
// Параметры:
//
// СтандартнаяОбработка. Тип: Булево.
// В данный параметр передается признак выполнения стандартной (системной) обработки события.
// Если в теле процедуры-обработчика установить данному параметру значение Ложь, стандартная обработка события производиться не будет.
// Отказ от стандартной обработки не отменяет действие.
// Значение по умолчанию: Истина.
//
// Отправитель (только для чтения). Тип: ПланОбменаСсылка.
// Узел плана обмена, для которого выполняется загрузка данных.
//
// ИмяФайлаСообщения (только для чтения). Тип: Строка.
// Имя файла, из которого требуется выполнить загрузку данных. Если параметр не заполнен, то данные для загрузки
// передаются через параметр ДанныеСообщения.
//
// ДанныеСообщения. Тип: Произвольный.
// Параметр содержит данные, которые необходимо загрузить. Если параметр ИмяФайлаСообщения пустой,
// то данные для загрузки передаются через этот параметр.
//
// КоличествоЭлементовВТранзакции (только для чтения). Тип: Число.
// Определяет максимальное число элементов данных, которые читаются из сообщения и записываются в базу данных
// в рамках одной транзакции. При необходимости в обработчике следует реализовать логику записи данных в транзакции.
// Значение параметра задается в настройках подсистемы обмена данными.
//
// ИмяСобытияЖурналаРегистрации (только для чтения). Тип: Строка.
// Имя события журнала регистрации текущего сеанса обмена данными. Используется для записи в журнал регистрации
// данных (ошибок, предупреждений, информации) с заданным именем события.
// Соответствует параметру ИмяСобытия метода глобального контекста ЗаписьЖурналаРегистрации.
//
// КоличествоПолученныхОбъектов. Тип: Число.
// Счетчик полученных объектов. Используется для определения количества загруженных объектов
// для последующей фиксации в протоколе обмена.
//
Процедура ПриЗагрузкеДанных(СтандартнаяОбработка,
								Отправитель,
								ИмяФайлаСообщения,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ИмяСобытияЖурналаРегистрации,
								КоличествоПолученныхОбъектов
	) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	ОбменСообщениямиВнутренний.ПриЗагрузкеДанных(СтандартнаяОбработка,
								Отправитель,
								ИмяФайлаСообщения,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ИмяСобытияЖурналаРегистрации,
								КоличествоПолученныхОбъектов
	);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями
	
КонецПроцедуры

// Определяет используется ли в конфигурации групповое изменение объектов
//
// Параметры:
//  Используется - Булево - Истина, если используется, Ложь - иначе.
//
Процедура ИспользуетсяГрупповоеИзменениеОбъектов(Используется) Экспорт
	
	// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	Используется = Истина;
	// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	
КонецПроцедуры

// Определяет используется ли в конфигурации версионирование
//
// Параметры:
//  Используется - Булево - Истина, если используется, Ложь - иначе.
//
Процедура ИспользуетсяВерсионирование(Используется) Экспорт
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Используется = Истина;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

// Определяет используется ли в конфигурации подсистема даты запрета изменения
//
// Параметры:
//  Используется - Булево - Истина, если используется, Ложь - иначе.
//
Процедура ИспользуетсяДатыЗапретаИзменения(Используется) Экспорт
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	Используется = Истина;
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

// Обработчик установки константы ИспользоватьСинхронизациюДанных.
//
//  Параметры:
// Отказ – Булево. Флаг отказа включения синхронизации данных.
// Если установить в значение Истина, то синхронизация включена не будет.
//
Процедура ПриВключенииСинхронизацииДанных(Отказ) Экспорт
	
КонецПроцедуры

// Обработчик снятия константы ИспользоватьСинхронизациюДанных.
//
//  Параметры:
// Отказ – Булево. Флаг отказа отключения синхронизации данных.
// Если установить в значение Истина, то синхронизация отключена не будет.
//
Процедура ПриОтключенииСинхронизацииДанных(Отказ) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	ОбменДаннымиВМоделиСервиса.ПриОтключенииСинхронизацииДанных(Отказ);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Обработчик вызывается перед записью данных в ИБ при загрузке из сообщения обмена
// Используется только для обменов не РИБ.
//
//  Параметры:
// Данные            – СправочникОбъект, ДокументОбъект, РегистСведенийНаборЗаписей и др. данные.
//                     Данные, которые были зачитаны из сообщения обмена, но еще не были записаны в ИБ.
// УзелПланаОбмена   - ПланыОбменаСсылка.
// Отказ             - Булево (возвращаемое значение).
// СообщениеОбОшибке - Строка (возвращаемое значение).
//
Процедура ПередЗаписьюДанныхИзСообщенияОбмена(Данные, УзелПланаОбмена, Отказ, СообщениеОбОшибке) Экспорт
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	Отказ = ДатыЗапретаИзменения.ЗагрузкаЗапрещена(Данные, УзелПланаОбмена, СообщениеОбОшибке);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

// Обработчик механизма регистрации объектов "После определения получателей".
// Событие возникает в транзакции записи данных в ИБ, когда определены 
// получатели изменений данных по правилам регистрации объектов.
//
// Параметры:
// Данные. Записываемый объект, представляющий данные - документ, элемент справочника,
// счет бухгалтерского учета, менеджер записи константы, набор записей регистра и т. п.
//
// Получатели. Тип: Массив. Массив узлов планов обмена на которых будут зарегистрированы изменения текущих данных.
//
// ИмяПланаОбмена. Тип: Строка. Имя плана обмена, как объекта метаданных,
// для которого выполняются правила регистрации объектов.
//
Процедура ПослеОпределенияПолучателей(Данные, Получатели, Знач ИмяПланаОбмена) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	ОбменДаннымиВМоделиСервиса.ПослеОпределенияПолучателей(Данные, Получатели, ИмяПланаОбмена);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Устанавливает признак игнорирования версии объекта
//
// Параметры:
//	Ссылка - Ссылка на игнорируемый объект
//	НомерВерсии - Число - Номер версии игнорируемого объекта
//	Игнорировать - Булево Признак игнорирования версии
//
Процедура ПриИгнорированииВерсииОбъекта(Ссылка, НомерВерсии, Игнорировать) Экспорт
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ИгнорироватьВерсиюОбъекта(Ссылка, НомерВерсии, Игнорировать);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

// Создает и записывает версию объекта в информационную базу.
//
// Параметры
//	Объект - записываемый объект ИБ;
//	АвторВерсии - Пользователь или Узел плана обмена - Источник версии;
//	ТипВерсииОбъекта - Перечисление - Тип создаваемой версии;
//	Комментарий - Строка - Комментарий к создаваемой версии;
//	УникальныйИдентификаторСтрокой - Строка - Создает пустую ссылку из УИДа, если у переданного объекта ссылка отсутствует.
//
Процедура ПриСозданииВерсииОбъекта(Объект, АвторВерсии = Неопределено, Знач ТипВерсииОбъекта = Неопределено,
	Комментарий = "", УникальныйИдентификаторСтрокой = "", БезусловнаяЗапись = Ложь) Экспорт
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.СоздатьВерсиюОбъекта(Объект, АвторВерсии, ТипВерсииОбъекта, Комментарий, УникальныйИдентификаторСтрокой, БезусловнаяЗапись);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

// Обработчик перехода на версию объекта
//
// Параметры:
//	ОбъектСсылка - Ссылка - Ссылка на объект, для которого имеется версия
//	НомерВерсииДляПерехода - Число - Номер версии, на которую необходимо выполнить переход
//	НомерИгнорируемойВерсии - Число - Номер версии, на которую необходимо проигнорировать
//	ПропуститьПроверкуЗапретаИзменения - Булево - Признак пропуска проверки даты запрета загрузки
//
Процедура ПриПереходеНаВерсиюОбъекта(ОбъектСсылка, НомерВерсииДляПерехода, НомерИгнорируемойВерсии, ПропуститьПроверкуЗапретаИзменения = Ложь) Экспорт
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Перем ДатаВерсии;
	
	Объект = ВерсионированиеОбъектов.ОбъектИзВерсии(ОбъектСсылка, НомерВерсииДляПерехода, ДатаВерсии);
	
	Объект.ДополнительныеСвойства.Вставить("ВерсионированиеОбъектовКомментарийКВерсии",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполнен переход к версии №%1 от %2'"),
			Строка(НомерВерсииДляПерехода),
			Формат(ДатаВерсии, "ДЛФ=DT")) );
			
	Если ПропуститьПроверкуЗапретаИзменения Тогда
		Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
	КонецЕсли;
	
	Объект.Записать();
	
	ВерсионированиеОбъектов.ИгнорироватьВерсиюОбъекта(ОбъектСсылка, НомерИгнорируемойВерсии, Истина);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

// Возвращает количество коллизий или непринятых объектов
//
// Параметры:
//	ЭтоКоличествоКоллизий - Булево - Если Истина, то возвращает количество коллизий, иначе количество непринятых.
//	ПоказыватьПроигнорированные - Булево - Признак необходимости учета проигнорированных.
//	УзелИнформационнойБазы - ПланОбменаСсылка - Количество по конкретному узлу
//	Период - Стандартный период - Количество за дату
//	СтрокаПоиска - Строка - Количество объектов, содержащих в комментарии СтрокаПоиска
//
Процедура ПриОбновленииЗаголовковСтраницРезультатовОбменаДанными(Количество, ЭтоКоличествоКоллизий, ПоказыватьПроигнорированные = Ложь,
	УзелИнформационнойБазы = Неопределено, Период = Неопределено, СтрокаПоиска = "") Экспорт
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Количество = ВерсионированиеОбъектов.КоличествоКоллизийИлиНепринятых(ЭтоКоличествоКоллизий, ПоказыватьПроигнорированные,
		УзелИнформационнойБазы, Период, СтрокаПоиска);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

// Возвращает дату последенй коллизии или дату последнего запрета загрузки
// Параметры:
//	ПолучитьДатуПоследнейКоллизии - Булево - Если Истина, то возвращает дату последней коллизии,
//	если Ложь, то возвращает дату последнего запрета загрузки
//
Процедура ПриОбновленииЗаголовковКомандМонитораОбменаДанными(ДатаСобытия, ПолучитьДатуПоследнейКоллизии) Экспорт
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ДатаСобытия = ВерсионированиеОбъектов.ДатаПоследнейКоллизииИлиЗапретаЗагрузки(ПолучитьДатуПоследнейКоллизии);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбменДанными

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

/////////////////////////////////////////////////////////////////////////////////
// Обновление версии ИБ

// Вызывается перед обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	// СтандартныеПодсистемы.ОбменДанными
	ОбменДаннымиСервер.ПередОбновлениемИнформационнойБазы();
	// Конец СтандартныеПодсистемы.ОбменДанными
	
КонецПроцедуры

// Вызывается после завершении обновления данных ИБ.
// Подробнее см. ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновленияИнформационнойБазы
// 
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсияИБ, Знач ТекущаяВерсияИБ, 
	Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений) Экспорт
	
	// СтандартныеПодсистемы.ОбменДанными
	ОбменДаннымиСервер.ПослеОбновленияИнформационнойБазы();
	// Конец СтандартныеПодсистемы.ОбменДанными
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ


// СтандартныеПодсистемы.ОбновлениеКонфигурации

/////////////////////////////////////////////////////////////////////////////////
// Обновление конфигурации

// Вызывается при выполнении скрипта обновления из процедуры ОбновлениеКонфигурации.ЗавершитьОбновление().
Процедура ПослеЗавершенияОбновления() Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации


// СтандартныеПодсистемы.Печать

/////////////////////////////////////////////////////////////////////////////////
// Печать

// Присоединяет файл печатной формы к объекту.
// Вызывается из общей формы ПечатьДокументов.
//
// Параметры:
//  СсылкаНаОбъект            - ЛюбаяСсылка - объект, к которому надо присоединить файл печатной формы;
//  ИмяФайла                  - Строка      - имя присоединяемого файла с расширением;
//  АдресВоВременномХранилище - Строка      - адрес двоичных данных файла во временном хранилище.
//
Процедура ПриПрисоединенииПечатнойФормыКОбъекту(СсылкаНаОбъект, ИмяФайла, АдресВоВременномХранилище) Экспорт
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлы.ДобавитьФайл(СсылкаНаОбъект, ИмяФайла, , , , АдресВоВременномХранилище, , НСтр("ru = 'Печатная форма'"));
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Определяет возможность сохранения печатной формы при объекте.
// Вызывается из общей формы СохранениеПечатнойФормы.
//
// Параметры:
//  СсылкаНаОбъект    - ЛюбаяСсылка - объект, к которому надо присоединить файл печатной формы;
//  МожноПрисоединять - Булево - (возвращаемый) признак возможности присоединения файлов к объекту.
//
Процедура ПриПроверкеВозможностиПрисоединенияФайловКОбъекту(СсылкаНаОбъект, МожноПрисоединять) Экспорт
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	МожноПрисоединять = ПрисоединенныеФайлы.КОбъектуМожноПрисоединятьФайлы(СсылкаНаОбъект);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Заполняет список печатных форм из внешних источников.
//
// Параметры:
//  ВнешниеПечатныеФормы - СписокЗначений:
//                                         Значение      - Строка - идентификатор печатной формы;
//                                         Представление - Строка - название печатной формы.
//  ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных, для которого требуется получить список печатных форм.
//
Процедура ПриПолученииСпискаВнешнихПечатныхФорм(ВнешниеПечатныеФормы, ПолноеИмяОбъектаМетаданных) Экспорт
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриПолученииСпискаВнешнихПечатныхФорм(ВнешниеПечатныеФормы, ПолноеИмяОбъектаМетаданных);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

КонецПроцедуры

// Возвращает ссылку на объект внешней печатной формы.
//
Процедура ПриПолученииВнешнейПечатнойФормы(Идентификатор, ПолноеИмяОбъектаМетаданных, ВнешняяПечатнаяФормаСсылка) Экспорт
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриПолученииВнешнейПечатнойФормы(Идентификатор, ПолноеИмяОбъектаМетаданных, ВнешняяПечатнаяФормаСсылка);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать


// СтандартныеПодсистемы.Пользователи

/////////////////////////////////////////////////////////////////////////////////
// Пользователи

// Процедуры, как в модуле ПользователиПереопределяемый.

// Переопределяет стандартный способ установки ролей пользователям ИБ.
//
// Параметры:
//  Запрет - Булево. Если установить Истина, изменение ролей
//           блокируется (в том числе для администратора).
//
Процедура ИзменитьЗапретРедактированияРолей(Запрет) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	
	// Роли устанавливаются автоматически по данным групп доступа
	// через связь: ПользователиГруппыДоступа -> Профиль -> РолиПрофиля
	Запрет = Истина;
	
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Переопределяет поведение формы пользователя и формы внешнего пользователя,
// группы внешних пользователей.
//
// Параметры:
//  Ссылка - СправочникСсылка.Пользователи,
//           СправочникСсылка.ВнешниеПользователи,
//           СправочникСсылка.ГруппыВнешнихПользователей
//           ссылка на пользователя, внешнего пользователя или группу внешних пользователей
//           при создании формы.
//
//  ДействияВФорме - Структура (со свойствами типа Строка):
//           Роли                   = "", "Просмотр",     "Редактирование"
//           КонтактнаяИнформация   = "", "Просмотр",     "Редактирование"
//           СвойстваПользователяИБ = "", "ПросмотрВсех", "РедактированиеВсех", РедактированиеСвоих"
//           СвойстваЭлемента       = "", "Просмотр",     "Редактирование"
//           
//           Для групп внешних пользователей КонтактнаяИнформация и СвойстваПользователяИБ не существуют.
//
Процедура ИзменитьДействияВФорме(Знач Ссылка, Знач ДействияВФорме) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	ДействияВФорме.Роли = "";
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Обработчики записи администратора.

// Переопределяет текст вопроса перед записью первого администратора.
//  Вызывается из обработчика ПередЗаписью формы пользователя.
//  Вызов выполняется если установлен ЗапретРедактированияРолей() и
// количество пользователей информационной базы равно нулю.
// 
Процедура ТекстВопросаПередЗаписьюПервогоАдминистратора(ТекстВопроса) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	ТекстВопроса = НСтр("ru = 'В список пользователей программы добавляется первый пользователь, 
		|поэтому он будет автоматически включен в группу доступа Администраторы. 
		|Продолжить?'")
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Доопределяет действия при записи пользователя, когда он записывается
// совместно с пользователем ИБ, у которого есть роль ПолныеПрава.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи (изменение объекта запрещено).
//
Процедура ПриЗаписиАдминистратора(Пользователь) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	
	// Администраторы автоматически добавляются в группу доступа Администраторы.
	Если ПривилегированныйРежим() Тогда
		Объект = Справочники.ГруппыДоступа.Администраторы.ПолучитьОбъект();
		Если Объект.Пользователи.Найти(Пользователь, "Пользователь") = Неопределено Тогда
			Объект.Пользователи.Добавить().Пользователь = Пользователь;
			Объект.ДополнительныеСвойства.Вставить("НезависимоеИзменениеОбъекта");
			Объект.Записать();
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Переопределяет текст комментария при авторизации пользователя ИБ,
// созданного в конфигураторе с административными правами.
//  Вызывается из Пользователи.АвторизоватьТекущегоПользователя().
//  Комментарий записывается в журнал регистрации.
// 
// Параметры:
//  Комментарий  - Строка - начальное значение задано.
//
Процедура ПослеЗаписиАдминистратораПриАвторизации(Комментарий) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Комментарий = НСтр("ru = 'Обнаружено, что пользователь информационной базы
	                         |с ролью ""Полные права"" был создан в Конфигураторе:
	                         |
	                         |- пользователь не найден в справочнике Пользователи,
	                         |- пользователь зарегистрирован в справочнике Пользователи,
	                         |- пользователь добавлен в группу доступа Администраторы.
	                         |
	                         |Пользователей информационной базы следует создавать в режиме 1С:Предприятия.'");
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Переопределяет действие перед авторизацией пользователя,
// выполняемой при начале работы системы (в процессе получения
// параметров работы клиента при запуске).
//
// Можно заполнить состав пользователей и выполнить перезапуск.
// 
// Требуется, например, при настройке автономного рабочего места.
// 
// Параметры:
//  Перезапустить - Булево, начальное значение Ложь. Если указать
//                  Истина, тогда работа системы будет прекращена.
//
//  ДополнительныеПараметрыКоманднойСтроки - Строка, которая может
//                  быть заполнена для передачи во второй параметр
//                  метода ПрекратитьРаботуСистемы.
//
Процедура ПередАвторизациейТекущегоПользователяПриНачалеРаботыСистемы(
		Перезапустить, ДополнительныеПараметрыКоманднойСтроки) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	АвтономнаяРаботаСлужебный.ПередАвторизациейТекущегоПользователяПриНачалеРаботыСистемы(Перезапустить);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Переопределяет действие при авторизации администратора локальной ИБ
// или администратора области данных.
//
Процедура ПриАвторизацииАдминистратораПриНачалеРаботыСистемы(Администратор) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	
	// Администратор автоматически добавляется в группу доступа Администраторы при авторизации.
	Если ПривилегированныйРежим() Тогда
		Объект = Справочники.ГруппыДоступа.Администраторы.ПолучитьОбъект();
		Если Объект.Пользователи.Найти(Администратор, "Пользователь") = Неопределено Тогда
			Объект.Пользователи.Добавить().Пользователь = Администратор;
			Объект.ДополнительныеСвойства.Вставить("НезависимоеИзменениеОбъекта");
			Объект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры



// Обработчики записи пользователей и групп пользователей.

// Доопределяет действия, необходимые после завершения обновления
// связей в регистре СоставыГруппПользователей.
//
// Параметры:
//  УчастникиИзменений - Массив значений типов:
//                       - СправочникСсылка.Пользователи.
//                       - СправочникСсылка.ВнешниеПользователи.
//                       Пользователи которые участвовали в изменении состава групп.
//
//  ИзмененныеГруппы   - Массив значений типов:
//                       - СправочникСсылка.ГруппыПользователей.
//                       - СправочникСсылка.ГруппыВнешнихПользователей.
//                       Группы, состав которых был изменен.
//
Процедура ПослеОбновленияСоставовГруппПользователей(УчастникиИзменений, ИзмененныеГруппы) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступомСлужебный.ПослеОбновленияСоставовГруппПользователей(
		УчастникиИзменений, ИзмененныеГруппы);
	
	УправлениеДоступом.ОбновитьРолиПользователей(УчастникиИзменений);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Доопределяет действия, необходимые после изменении объекта авторизации внешнего пользователя.
// 
// Параметры:
//  ВнешнийПользователь     - СправочникСсылка.ВнешниеПользователи.
//  СтарыйОбъектАвторизации - NULL - при добавлении внешнего пользователя.
//                            Например, СправочникСсылка.ФизическиеЛица.
//  НовыйОбъектАвторизации  - Например, СправочникСсылка.ФизическиеЛица.
//
Процедура ПослеИзмененияОбъектаАвторизацииВнешнегоПользователя(ВнешнийПользователь,
                                                               СтарыйОбъектАвторизации = Неопределено,
                                                               НовыйОбъектАвторизации) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступомСлужебный.ПослеИзмененияОбъектаАвторизацииВнешнегоПользователя(
		ВнешнийПользователь, СтарыйОбъектАвторизации, НовыйОбъектАвторизации);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Доопределяет действия, необходимые после добавления или изменения пользователя,
// группы пользователей, внешнего пользователя, группы внешних пользователей.
//
// Параметры:
//  Ссылка     - СправочникСсылка.Пользователи.
//             - СправочникСсылка.ГруппыПользователей.
//             - СправочникСсылка.ВнешниеПользователи.
//             - СправочникСсылка.ГруппыВнешнихПользователей.
//
//  ЭтоНовый   - Булево, если Истина, объект был добавлен, иначе изменен.
//
Процедура ПослеДобавленияИзмененияПользователяИлиГруппы(Ссылка, ЭтоНовый) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступомСлужебный.ПослеДобавленияИзмененияПользователяИлиГруппы(
		Ссылка, ЭтоНовый);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Доопределяет действия, необходимые после установки пользователя
// информационной базы у пользователя или внешнего пользователя,
// т.е. при изменении реквизита ИдентификаторПользователяИБ на не пустой.
//
// Например, можно обновить роли.
// 
// Параметры:
//  Ссылка - СправочникСсылка.Пользователи.
//         - СправочникСсылка.ВнешниеПользователи.
//
Процедура ПослеУстановкиПользователяИБ(Ссылка, ПарольПользователяСервиса) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ОбновитьРолиПользователей(Ссылка, ПарольПользователяСервиса);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Для поддержки работы в модели сервиса.

// Обработчик, вызываемый перед записью пользователя.
Процедура ОбновитьОписаниеWebСервисаМенеджераСервиса() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	ПользователиСлужебныйВМоделиСервиса.ОбновитьОписаниеWebСервисаМенеджераСервиса();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

// Обработчик, вызываемый при записи пользователя.
Процедура ОбновитьПользователяСервиса(ПользовательОбъект, СоздатьПользователяСервиса) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	ПользователиСлужебныйВМоделиСервиса.ОбновитьПользователяСервиса(
		ПользовательОбъект, СоздатьПользователяСервиса);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

// Снимает у пользователя права доступа в приложение, в записях
// менеджера сервиса.
//
// Параметры:
//  ПользовательОбъект - СправочникОбъект.Пользователи - пользователь,
//   для которого требуется аннулировать доступ.
//
Процедура АннулироватьДоступПользователяСервиса(ПользовательОбъект) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	ПользователиСлужебныйВМоделиСервиса.АннулироватьДоступПользователяСервиса(
		ПользовательОбъект);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

// Обработчик, вызываемый при получении формы справочника Пользователи
//
// Параметры:
//  См. параметры платформенного обработчика ОбработкаПолученияФормы
//
Процедура ОбработкаПолученияФормыПользователя(ВидФормы,
                                              Параметры,
                                              ВыбраннаяФорма,
                                              ДополнительнаяИнформация,
                                              СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	ПользователиСлужебныйВМоделиСервиса.ОбработкаПолученияФормыПользователя(
		ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
КонецПроцедуры

// Проверяет содержится ли пользователь ИБ с заданным идентификатором
// в списке неразделенных пользователей.
//
// Параметры:
// ИдентификаторПользователяИБ - УникальныйИдентификатор - идентификатор
// пользователя ИБ принадлежность которого к неразделенным пользователям
// требуется проверить.
//
Функция ЭтоНеразделенныйПользовательИБ(Знач ИдентификаторПользователяИБ) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	Возврат ПользователиСлужебныйВМоделиСервиса.ЭтоНеразделенныйПользовательИБ(
		ИдентификаторПользователяИБ);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	
	Возврат Ложь;
	
КонецФункции

// При работе в модели сервиса, заносит текущего пользователя в список неразделенных,
// если у него не установлено использование разделителей.
//
Процедура ЗарегистрироватьНеразделенногоПользователя() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	ПользователиСлужебныйВМоделиСервиса.ЗарегистрироватьНеразделенногоПользователя();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	
КонецПроцедуры

// Возвращает флаг доступности действий изменения пользователей.
//
// Возвращаемое значение:
// Булево - Истина, если изменение пользователей доступно, иначе Ложь.
//
Функция ДоступноИзменениеПользователей() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	Возврат ПользователиСлужебныйВМоделиСервиса.ДоступноИзменениеПользователей();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	
	Возврат Истина;
	
КонецФункции

// Пользовательские настройки вариантов отчетов.

// Получает варианты переданного отчета и их представления
//
// Параметры:
//  ОтчетМетаданные                - Объект метаданных - отчет, для которого получаются варианты отчета.
//  ПользовательИнформационнойБазы - Строка - имя пользователя информационной базы.
//  СведенияОВариантахОтчетов      - ТаблицаЗначений - таблица, в которую сохраняется информация о варианте отчета.
//          |-КлючОбъекта          - Строка - ключ отчета вида "Отчет.НазваниеОтчета".
//          |-КлючВарианта         - Строка - ключ варианта отчета.
//          |-Представление        - Строка - представление варианта отчета.
//          |-СтандартнаяОбработка - Булево - если Истина - вариант отчета сохранен в стандартном хранилище.
//  СтандартнаяОбработка           - Булево - если Истина - вариант отчета сохранен в стандартном хранилище.
//
Процедура ПолучитьПользовательскиеВариантыОтчетов(ОтчетМетаданные, ПользовательИнформационнойБазы, СведенияОВариантахОтчетов, СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.ВариантыОтчетов
	ВариантыОтчетов.ПользовательскиеВариантыОтчетов(ОтчетМетаданные, ПользовательИнформационнойБазы, СведенияОВариантахОтчетов, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.ВариантыОтчетов
	
КонецПроцедуры

// Удаляет переданный вариант отчета из хранилища вариантов отчетов
//
// Параметры:
//  СведенияОВариантахОтчетов      - ТаблицаЗначений - таблица, в которой сохранена информация о варианте отчета.
//          |-КлючОбъекта          - Строка - ключ отчета вида "Отчет.НазваниеОтчета".
//          |-КлючВарианта         - Строка - ключ варианта отчета.
//          |-Представление        - Строка - представление варианта отчета.
//          |-СтандартнаяОбработка - Булево - если Истина - вариант отчета сохранен в стандартном хранилище.
//  ПользовательИнформационнойБазы - Строка - имя пользователя информационной базы у которого очищается вариант отчета
//  СтандартнаяОбработка           - Булево - если Истина - вариант отчета сохранен в стандартном хранилище.
//
Процедура УдалитьПользовательскийВариантОтчета(СведенияОВариантеОтчета, ПользовательИнформационнойБазы, СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.ВариантыОтчетов
	ВариантыОтчетов.УдалитьПользовательскийВариантОтчета(СведенияОВариантеОтчета, ПользовательИнформационнойБазы, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.ВариантыОтчетов
	
КонецПроцедуры

// Прочие пользовательские настройки.

// Получает список прочих пользовательских настроек у переданного пользователя справочника
//
// Параметры:
//  ПользовательСсылка     - СправочникСсылка.Пользователи - пользователь, у которого нужно получить настройки.
//  Настройки              - Структура - прочие пользовательские настройки.
//     |-НазваниеНастройки - Строка - название, которое будет отображаться в дереве настроек обработки.
//     |-КартинкаНастройки - Картинка - картинка, которая будет отображаться в дереве обработки.
//     |-СписокНастроек    - СписокЗначений - список полученных настроек
//
Процедура ПолучитьПрочиеПользовательскиеНастройки(ПользовательСсылка, Настройки) Экспорт
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПолучитьНастройкиДополнительныхОтчетовИОбработок(ПользовательСсылка, Настройки);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры

// Сохраняет прочие пользовательские настройки переданным пользователям справочника
//
// Параметры:
//  Настройки              - СписокЗначений - список ключей сохраняемых настроек
//  ПользователиПолучатели - Массив - элемент массива - СправочникСсылка.Пользователи - пользователи,
//                           которым нужно скопировать настройки
//
Процедура СохранитьПрочиеПользовательскиеНастройки(Настройки, ПользователиПолучатели) Экспорт
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ДобавитьКомандыВСписокБыстрогоДоступа(Настройки, ПользователиПолучатели);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры

// Очищает прочие пользовательские настройки переданному пользователю справочника
//
// Параметры:
//  Настройки              - СписокЗначений - список ключей очищаемых настроек
//  ОчищаемыйПользователь  - СправочникСсылка.Пользователи - пользователь, у
//                           которого нужно очистить настройки
//
Процедура УдалитьПрочиеПользовательскиеНастройки(Настройки, ОчищаемыйПользователь) Экспорт
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.УдалитьКомандыИзСпискаБыстрогоДоступа(Настройки, ОчищаемыйПользователь);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Пользователи


// СтандартныеПодсистемы.ПрефиксацияОбъектов

/////////////////////////////////////////////////////////////////////////////////
// ПрефиксацияОбъектов

// Возвращает признак наличия в конфигурации функциональной опции ПрефиксыОрганизаций.
//
// Возвращаемое значение:
//  Булево - признак наличия в конфигурации функциональной опции ПрефиксыОрганизаций.
//
Функция ЕстьФункциональнаяОпцияПрефиксыОрганизаций() Экспорт
	
	// СтандартныеПодсистемы.Организации
	Возврат Истина;
	// Конец СтандартныеПодсистемы.Организации
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак наличия в конфигурации функциональной опции ПрефиксИнформационнойБазы.
//
// Возвращаемое значение:
//  Булево - признак наличия в конфигурации функциональной опции ПрефиксИнформационнойБазы.
//
Функция ЕстьФункциональнаяОпцияПрефиксИнформационнойБазы() Экспорт
	
	// СтандартныеПодсистемы.ОбменДанными
	Возврат Истина;
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	Возврат Ложь;
	
КонецФункции

// Возвращает префикс этой информационной базы
//
Функция ПрефиксИнформационнойБазы() Экспорт
	
	// СтандартныеПодсистемы.ОбменДанными
	Возврат ОбменДаннымиСервер.ПрефиксИнформационнойБазы();
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	Возврат "";
КонецФункции

// Возвращает префикс организации
//
//  Параметры:
// Организация. Тип: СправочникСсылка.Организации – организация для которой надо получить префикс.
//
Функция ПрефиксОрганизации(Знач Организация) Экспорт
	
	// СтандартныеПодсистемы.Организации
	Возврат ПолучитьФункциональнуюОпцию("ПрефиксыОрганизаций", Новый Структура("Организация", Организация));
	// Конец СтандартныеПодсистемы.Организации
	
	Возврат "";
КонецФункции

// Устанавливает префикс этой информационной базы
//
Процедура УстановитьПрефиксИнформационнойБазы(Знач Префикс) Экспорт
	
	// СтандартныеПодсистемы.ОбменДанными
	ОбменДаннымиСервер.УстановитьПрефиксИнформационнойБазы(Префикс);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПрефиксацияОбъектов


// СтандартныеПодсистемы.РаботаВМоделиСервиса

/////////////////////////////////////////////////////////////////////////////////
// Работа в модели сервиса

// Формирует список имен неразделенных регистров сведений, хранящих разделенные данные.
// 
// Параметры:
// ОбщиеРегистры - Массив - массив строк.
// 
Процедура ПолучитьОбщиеРегистрыСведенийСРазделеннымиДанными(Знач ОбщиеРегистры) Экспорт
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	ОбщиеРегистры.Добавить("ВерсииПодсистем");
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	ОбщиеРегистры.Добавить("ОчередьЗаданий");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	
КонецПроцедуры

// Формирует список типов данных которые не могут быть скопированы между областями
// 
// Параметры:
// ОбщиеРегистры - Массив - массив типов.
// 
Процедура ПолучитьНезагружаемыеВОбластиДанныхТипы(Знач Типы) Экспорт
	
	Для каждого ТипОбщихДанных Из ТипыОбщихДанных() Цикл
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТипОбщихДанных);
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипОбщихДанных) Тогда
			Типы.Добавить(Тип("СправочникОбъект." + МетаданныеТипа.Имя));
		Иначе // Регистр сведений
			Типы.Добавить(Тип("РегистрСведенийНаборЗаписей." + МетаданныеТипа.Имя));
		КонецЕсли;
	КонецЦикла;
	
	// СтандартныеПодсистемы.Пользователи
	Типы.Добавить(Тип("СправочникОбъект.ВнешниеПользователи"));
	// Конец СтандартныеПодсистемы.Пользователи
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	Типы.Добавить(Тип("РегистрСведенийНаборЗаписей.ОчередьЗаданий"));
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса
	Типы.Добавить(Тип("СправочникОбъект.ДополнительныеОтчетыИОбработки"));
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ДополнительныеОтчетыИОбработкиВМоделиСервиса
	
КонецПроцедуры

// Формирует список типов данных которые не должны передаваться между
// информационными базам.
// 
// Параметры:
// ОбщиеРегистры - Массив - массив типов.
// 
Процедура ПолучитьНевыгружаемыеИзИнформационнойБазыТипы(Знач Типы) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	Типы.Добавить(Тип("РегистрСведенийНаборЗаписей.АдресныеСокращения"));
	Типы.Добавить(Тип("РегистрСведенийНаборЗаписей.АдресныйКлассификатор"));
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	Типы.Добавить(Тип("КонстантаМенеджерЗначения.КлючОбластиДанных"));
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	
КонецПроцедуры

// Вызывается при удалении области данных.
// В процедуре необходимо удалить данные области данных, которые не
// могут быть удалены стандартным механизмом
//
// Параметры:
// ОбластьДанных - Тип значения разделителя - значение разделителя
// удаляемой области данных.
// 
Процедура ПриУдаленииОбластиДанных(Знач ОбластьДанных) Экспорт
	
КонецПроцедуры

// Формирует список параметров ИБ.
//
// Параметры:
// ТаблицаПараметров - ТаблицаЗначений - таблица описания параметров.
// Описание состав колонок - см. РаботаВМоделиСервиса.ПолучитьТаблицуПараметровИБ()
//
Процедура ПолучитьТаблицуПараметровИБ(Знач ТаблицаПараметров) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация() Тогда
		РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИспользоватьРазделениеПоОбластямДанных");
		
		РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "РежимИспользованияИнформационнойБазы");
		
		РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "КопироватьОбластиДанныхИзЭталонной");
	КонецЕсли;
	
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ВнутреннийАдресМенеджераСервиса");
	
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИмяСлужебногоПользователяМенеджераСервиса");
	
	СтрокаПараметра = РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ПарольСлужебногоПользователяМенеджераСервиса");
	СтрокаПараметра.ЗапретЧтения = Истина;
	
	// Для совместимости с предыдущими версиями
	СтрокаПараметра = РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ВнутреннийАдресМенеджераСервиса");
	СтрокаПараметра.Имя = "URLСервиса";
	
	СтрокаПараметра = РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИмяСлужебногоПользователяМенеджераСервиса");
	СтрокаПараметра.Имя = "ИмяСлужебногоПользователяСервиса";
	
	СтрокаПараметра = РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ПарольСлужебногоПользователяМенеджераСервиса");
	СтрокаПараметра.Имя = "ПарольСлужебногоПользователяСервиса";
	СтрокаПараметра.ЗапретЧтения = Истина;
	// Конец Для совместимости с предыдущими версиями
	
	СтрокаПараметра = ТаблицаПараметров.Добавить();
	СтрокаПараметра.Имя = "ВерсияКонфигурации";
	СтрокаПараметра.Описание = НСтр("ru = 'Версия конфигурации'");
	СтрокаПараметра.ЗапретЗаписи = Истина;
	СтрокаПараметра.Тип = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная));
	
	// СтандартныеПодсистемы.РегламентныеЗадания
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания");
	
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "МаксимальноеКоличествоИсполняющихФоновыхЗаданий");
	// Конец СтандартныеПодсистемы.РегламентныеЗадания
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "СообщениеБлокировкиПриОбновленииКонфигурации");
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	// (для совместимости с предыдущими версиями)
	СтрокаПараметра = РаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресВебСервисаОбменаДанными");
	СтрокаПараметра.Имя = "URLСервисаОбмена";
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Вызывается перед попыткой получения значений параметров ИБ из одноименных
// констант.
//
// Параметры:
// ИменаПараметров - Массив строк - имена параметров, значения которых необходимо получить.
// В случае если значение параметра получается в данной процедуре, необходимо удалить
// имя обработанного параметра из массива.
// ЗначенияПараметров - Структура - значения параметров.
//
Процедура ПриПолученииЗначенийПараметровИБ(Знач ИменаПараметров, Знач ЗначенияПараметров) Экспорт
	
	// ВерсияКонфигурации
	Индекс = ИменаПараметров.Найти("ВерсияКонфигурации");
	Если Индекс <> Неопределено Тогда
		ЗначенияПараметров.Вставить("ВерсияКонфигурации", Метаданные.Версия);
		ИменаПараметров.Удалить(Индекс);
	КонецЕсли;
	
	// URLСервиса
	Индекс = ИменаПараметров.Найти("URLСервиса");
	Если Индекс <> Неопределено Тогда
		ЗначенияПараметров.Вставить("URLСервиса", Константы.ВнутреннийАдресМенеджераСервиса.Получить());
		ИменаПараметров.Удалить(Индекс);
	КонецЕсли;
	
	// ИмяСлужебногоПользователяСервиса
	Индекс = ИменаПараметров.Найти("ИмяСлужебногоПользователяСервиса");
	Если Индекс <> Неопределено Тогда
		ЗначенияПараметров.Вставить("ИмяСлужебногоПользователяСервиса", Константы.ИмяСлужебногоПользователяМенеджераСервиса.Получить());
		ИменаПараметров.Удалить(Индекс);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// URLСервисаОбмена
	Индекс = ИменаПараметров.Найти("URLСервисаОбмена");
	Если Индекс <> Неопределено Тогда
		ЗначенияПараметров.Вставить("URLСервисаОбмена", Константы.АдресВебСервисаОбменаДанными.Получить());
		ИменаПараметров.Удалить(Индекс);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Вызывается перед попыткой записи значений параметров ИБ в одноименные
// константы.
//
// Параметры:
// ЗначенияПараметров - Структура - значения параметров которые требуется установить.
// В случае если значение параметра устанавливается в данной процедуре из структуры
// необходимо удалить соответствующую пару КлючИЗначение
//
Процедура ПриУстановкеЗначенийПараметровИБ(Знач ЗначенияПараметров) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УдаленноеАдминистрирование
	Если ЗначенияПараметров.Свойство("URLСервиса") Тогда
		Константы.ВнутреннийАдресМенеджераСервиса.Установить(ЗначенияПараметров.URLСервиса);
		ЗначенияПараметров.Удалить("URLСервиса");
	КонецЕсли;
	
	Если ЗначенияПараметров.Свойство("ИмяСлужебногоПользователяСервиса") Тогда
		Константы.ИмяСлужебногоПользователяМенеджераСервиса.Установить(ЗначенияПараметров.ИмяСлужебногоПользователяСервиса);
		ЗначенияПараметров.Удалить("ИмяСлужебногоПользователяСервиса");
	КонецЕсли;
	
	Если ЗначенияПараметров.Свойство("ПарольСлужебногоПользователяСервиса") Тогда
		Константы.ПарольСлужебногоПользователяМенеджераСервиса.Установить(ЗначенияПараметров.ПарольСлужебногоПользователяСервиса);
		ЗначенияПараметров.Удалить("ПарольСлужебногоПользователяСервиса");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УдаленноеАдминистрирование
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	Если ЗначенияПараметров.Свойство("URLСервисаОбмена") Тогда
		Константы.АдресВебСервисаОбменаДанными.Установить(ЗначенияПараметров.URLСервисаОбмена);
		ЗначенияПараметров.Удалить("URLСервисаОбмена");
	КонецЕсли;
	
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Вызывается после окончания загрузки данных из локальной версии
// в область данных сервиса или наоборот.
//
Процедура ПослеЗагрузкиДанныхИзДругойМодели() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	//Создаем связи между разделенными и неразделенными валютами, копируем курсы
	КурсыВалютСлужебныйВМоделиСервиса.ОбновитьКурсыВалют();
	
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса

	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено()
	 ИЛИ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		// Предполагается, что справочник ИдентификаторыОбъектовМетаданных уже обновлен.
		УправлениеДоступомСлужебный.ОбновитьПараметрыОграниченияДоступа();
	КонецЕсли;
	УправлениеДоступомСлужебный.ОбновитьВспомогательныеДанныеПоИзменениямКонфигурации();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	
КонецПроцедуры

// Дополнительные действия, выполняемые при изменении разделения сеанса.
//
Процедура ПриИзмененииОбластиДанных() Экспорт
	
	РаботаВМоделиСервиса.ОчиститьВсеПараметрыСеансаКромеРазделителей();
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса

// Создает / обновляет запись запись пользователя сервиса.
// 
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи/СправочникОбъект.Пользователи
//  СоздатьПользователяСервиса - Булево - Истина - создать нового пользователя
//   сервиса, Ложь - обновить существующего.
//  ПарольПользователяСервиса - Строка - пароль текущего пользователя
//   для доступа к менеджеру сервиса
//
Процедура ЗаписатьПользователяСервиса(Знач Пользователь, Знач СоздатьПользователяСервиса, Знач ПарольПользователяСервиса) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	ПользователиСлужебныйВМоделиСервиса.ЗаписатьПользователяСервиса(Пользователь, 
		СоздатьПользователяСервиса, ПарольПользователяСервиса);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	
КонецПроцедуры

// Формирует запрос на изменение адреса электронной почты пользователя сервиса.
//
// Параметры:
//  НоваяПочта                - Строка - новый адрес электронной почты пользователя.
//  Пользователь              - СправочникСсылка.Пользователи - пользователь, которому требуется изменить
//                                                              адрес электронной почты.
//  ПарольПользователяСервиса - Строка - пароль текущего пользователя для доступа к менеджеру сервиса.
//
Процедура СоздатьЗапросНаСменуПочты(Знач НоваяПочта, Знач Пользователь, Знач ПарольПользователяСервиса) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	ПользователиСлужебныйВМоделиСервиса.СоздатьЗапросНаСменуПочты(
		НоваяПочта, Пользователь, ПарольПользователяСервиса);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных

/////////////////////////////////////////////////////////////////////////////////
// Выгрузка и загрузка данных

// Обработчик, вызываемый для данных перед их записью в файл при выгрузке областей.
//
// Параметры:
// ЭлементДанных - КонстантаМенеджер.<Имя>; СправочникОбъект.<Имя>; Регистр<Вид>НаборЗаписей.<Имя>.
//
Процедура ПередВыгрузкойДанных(ЭлементДанных) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
	РаботаСФайламиСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
	ПрисоединенныеФайлыСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Обработчик, вызываемый для считанных из файла данных перед их записью в ИБ при загрузке областей.
//
// Параметры:
// ЭлементДанных - КонстантаМенеджер.<Имя>; СправочникОбъект.<Имя>; Регистр<Вид>НаборЗаписей.<Имя>.
//
Процедура ПередЗагрузкойДанных(ЭлементДанных) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПолучениеЭлемента = ПолучениеЭлементаДанных.Авто;
	РаботаСФайламиСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПолучениеЭлемента = ПолучениеЭлементаДанных.Авто;
	ПрисоединенныеФайлыСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Возвращает массив типов неразделенных данных. Он используется при обновлении ссылок 
// при загрузке-выгрузке конфигурации
// 
// Возвращаемое значение:
//  Массив Типов данных
//
Функция ТипыОбщихДанных() Экспорт 
	Перем Результат;
	
	Результат = Новый Массив;
	СтандартныеТипыОбщихДанных(Результат);
	ВыгрузкаЗагрузкаДанныхПереопределяемый.ТипыОбщихДанных(Результат);
	
	Возврат Результат;
	
КонецФункции

// Заполняет массив типов неразделенных данных. Он используется при обновлении ссылок 
// при загрузке-выгрузке конфигурации
// 
// Параметры:
//  МассивТипов - массив
//
Процедура СтандартныеТипыОбщихДанных(Знач МассивТипов)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	МассивТипов.Добавить(Тип("СправочникСсылка.СтраныМира"));
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных


// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями

/////////////////////////////////////////////////////////////////////////////////
// Обмен сообщениями

// Получает список обработчиков сообщений, которые обрабатывают подсистемы библиотеки.
// 
// Параметры:
//  Обработчики - ТаблицаЗначений - состав полей см. в ОбменСообщениями.НоваяТаблицаОбработчиковСообщений
// 
Процедура ПолучитьОбработчикиКаналовСообщений(Обработчики) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	ОбработчикКаналовСообщенийОбменаДаннымиВРежимеСервиса.ПолучитьОбработчикиКаналовСообщений(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	ОбработчикКаналовСообщенийПоставляемыхДанных.ПолучитьОбработчикиКаналовСообщений(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные

	// СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	СообщенияВМоделиСервиса.ПолучитьОбработчикиКаналовСообщений(Обработчики, 
		РезервноеКопированиеОбластейДанныхПовтИсп.ПакетУправлениеРезервнымКопированиемОбластейДанных(),
		ОбработчикСообщенийУправленияРезервнымКопированием);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УдаленноеАдминистрирование
	
	СообщенияВМоделиСервиса.ПолучитьОбработчикиКаналовСообщений(Обработчики, 
		РаботаВМоделиСервисаПовтИсп.ПакетУдаленноеАдминистрирование_1_0_3_1(),
		ОбработчикСообщенийУдаленногоАдминистрирования);
		
	СообщенияВМоделиСервиса.ПолучитьОбработчикиКаналовСообщений(Обработчики, 
		РаботаВМоделиСервисаПовтИсп.ПакетУдаленноеАдминистрирование_1_0_3_2(),
		ОбработчикСообщенийУдаленногоАдминистрирования);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УдаленноеАдминистрирование
	
КонецПроцедуры

// Обработчик события при отправке сообщения.
// Обработчик данного события вызывается перед помещением сообщения в XML-поток.
// Обработчик вызывается для каждого отправляемого сообщения.
//
//  Параметры:
// КаналСообщений (только чтение) Тип: Строка. Идентификатор канала сообщений, в который отправляется сообщение.
// ТелоСообщения (чтение и запись) Тип: Произвольный. Тело отправляемого сообщения.
// В обработчике события тело сообщения может быть изменено, например, дополнено информацией.
//
Процедура ПриОтправкеСообщения(КаналСообщений, ТелоСообщения) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	СообщенияВМоделиСервиса.ПриОтправкеСообщения(КаналСообщений, ТелоСообщения);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	
КонецПроцедуры

// Обработчик события при получении сообщения.
// Обработчик данного события вызывается при получении сообщения из XML-потока.
// Обработчик вызывается для каждого получаемого сообщения.
//
//  Параметры:
// КаналСообщений (только чтение) Тип: Строка. Идентификатор канала сообщений, из которого получено сообщение.
// ТелоСообщения (чтение и запись) Тип: Произвольный. Тело полученного сообщения.
// В обработчике события тело сообщения может быть изменено, например, дополнено информацией.
//
Процедура ПриПолученииСообщения(КаналСообщений, ТелоСообщения) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	СообщенияВМоделиСервиса.ПриПолученииСообщения(КаналСообщений, ТелоСообщения);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями


// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий

/////////////////////////////////////////////////////////////////////////////////
// Очередь заданий

// Заполняет список имен неразделенных регламентных заданий, которые
// должны выполняться в разделенном режиме.
//
// Параметры:
// СписокРазделенныхРегламентныхЗаданий - Массив - Массив с именами неразделенных 
//                                        регламентных заданий, которые будут 
//                                        выполняться механизмом подсистемы "Регламентные задания"
//                                        в областях данных.
//
Процедура ЗаполнитьСписокРазделенныхРегламентныхЗаданий(СписокРазделенныхРегламентныхЗаданий) Экспорт

	// СтандартныеПодсистемы.УправлениеДоступом
	СписокРазделенныхРегламентныхЗаданий.Добавить("ЗаполнениеДанныхДляОграниченияДоступа");
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	СписокРазделенныхРегламентныхЗаданий.Добавить("ЗапускДополнительныхОбработок");
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	СписокРазделенныхРегламентныхЗаданий.Добавить("МониторингЗадач");
	СписокРазделенныхРегламентныхЗаданий.Добавить("УведомлениеИсполнителейОНовыхЗадачах");
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.УправлениеИтогамиИАгрегатами
	СписокРазделенныхРегламентныхЗаданий.Добавить("ОбновлениеАгрегатов");
	СписокРазделенныхРегламентныхЗаданий.Добавить("ПерестроениеАгрегатов");
	СписокРазделенныхРегламентныхЗаданий.Добавить("УстановкаПериодаРассчитанныхИтогов");
	// Конец СтандартныеПодсистемы.УправлениеИтогамиИАгрегатами
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения 
	СписокРазделенныхРегламентныхЗаданий.Добавить("ПересчетТекущихЗначенийОтносительныхДатЗапретаИзменения");
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Взаимодействия
	СписокРазделенныхРегламентныхЗаданий.Добавить("ПолучениеИОтправкаЭлектронныхПисем");
	// Конец СтандартныеПодсистемы.Взаимодействия
	
КонецПроцедуры

// Процедура формирует таблицу регламентных заданий
// с признаком использования
//
// Параметры:
// ТаблицаИспользования - ТаблицаЗначений - таблица, которую необходимо 
// заполнить регламентными заданиями и признаком использования
//
Процедура ЗаполнитьТаблицуИспользованияРегламентныхЗаданий(ТаблицаИспользования) Экспорт
	
	// СтандартныеПодсистемы.Валюты
	НоваяСтрока = ТаблицаИспользования.Добавить();
	НоваяСтрока.РегламентноеЗадание = "ЗагрузкаКурсовВалют";
	НоваяСтрока.Использование       = Ложь;
	// Конец СтандартныеПодсистемы.Валюты
	
	// СтандартныеПодсистемы.ОбменДанными
	НоваяСтрока = ТаблицаИспользования.Добавить();
	НоваяСтрока.РегламентноеЗадание = "СинхронизацияДанных";
	НоваяСтрока.Использование       = Ложь;
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.Банки
	НоваяСтрока = ТаблицаИспользования.Добавить();
	НоваяСтрока.РегламентноеЗадание = "ЗагрузкаКлассификатораБанковРФССайтаРБК";
	НоваяСтрока.Использование       = Ложь;
	// Конец СтандартныеПодсистемы.Банки
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	НоваяСтрока = ТаблицаИспользования.Добавить();
	НоваяСтрока.РегламентноеЗадание = "ОбслуживаниеОбластейДанных";
	НоваяСтрока.Использование       = Истина;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.БазоваяФункциональностьВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	НоваяСтрока = ТаблицаИспользования.Добавить();
	НоваяСтрока.РегламентноеЗадание = "ОбновлениеОбластейДанных";
	НоваяСтрока.Использование       = Истина;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	
	// СтандартныеПодсистемы.ФайловыеФункции
	НоваяСтрока = ТаблицаИспользования.Добавить();
	НоваяСтрока.РегламентноеЗадание = "ИзвлечениеТекста";
	НоваяСтрока.Использование       = Ложь;
	// Конец СтандартныеПодсистемы.ФайловыеФункции
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ФайловыеФункцииВМоделиСервиса
	НоваяСтрока = ТаблицаИспользования.Добавить();
	НоваяСтрока.РегламентноеЗадание = "ПланированиеИзвлеченияТекстаВМоделиСервиса";
	НоваяСтрока.Использование       = Истина;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ФайловыеФункцииВМоделиСервиса
	
	
КонецПроцедуры

// Формирует список методов разрешенных к вызову через механизм очереди заданий
//
// Параметры:
//  РазрешенныеМетоды - Массив - имена методов, разрешенных к вызову через
//    механизм очереди заданий
//
Процедура ПолучитьРазрешенныеМетодыОчередиЗаданий(Знач РазрешенныеМетоды) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	РазрешенныеМетоды.Добавить("ОбменДаннымиВМоделиСервиса.УстановитьПризнакИзмененияДанных");
	РазрешенныеМетоды.Добавить("ОбменДаннымиВМоделиСервиса.ВыполнитьОбменДанными");
	РазрешенныеМетоды.Добавить("ОбменДаннымиВМоделиСервиса.ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе");
	РазрешенныеМетоды.Добавить("ОбменДаннымиВМоделиСервиса.ВыполнитьДействиеСценарияОбменаДаннымиВоВторойИнформационнойБазе");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	РазрешенныеМетоды.Добавить("ОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса.ВыполнитьОбновлениеТекущейОбластиДанных");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбновлениеВерсииИБВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	РазрешенныеМетоды.Добавить("РаботаВМоделиСервиса.ПодготовитьОбластьДанныхКИспользованию");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	РазрешенныеМетоды.Добавить("РаботаВМоделиСервиса.ОчиститьОбластьДанных");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	РазрешенныеМетоды.Добавить("УправлениеДоступомСлужебный.ЗаполнениеДанныхДляОграниченияДоступаОбработчикЗадания");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	РазрешенныеМетоды.Добавить("РезервноеКопированиеОбластейДанных.ВыгрузитьОбластьВХранилищеМС");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.РезервноеКопированиеОбластейДанных
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	РазрешенныеМетоды.Добавить("ОбработчикКаналовСообщенийПоставляемыхДанных.ЗагрузитьДанные");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	РазрешенныеМетоды.Добавить("КурсыВалютСлужебныйВМоделиСервиса.КопироватьКурсыВалюты");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.КалендарныеГрафикиВМоделиСервиса
	РазрешенныеМетоды.Добавить("КалендарныеГрафикиСлужебныйВМоделиСервиса.ОбновитьКалендариПоДаннымПроизводственныхКалендарей");
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.КалендарныеГрафикиВМоделиСервиса

КонецПроцедуры

// Переопределяет массив реквизитов объекта, относительно которых разрешается устанавливать время напоминания.
// Например, можно скрыть те реквизиты с датами, которые являются служебными или не имеют смысла для 
// установки напоминаний: дата документа или задачи и прочие.
// 
// Параметры
//  Источник	 - Любая ссылка - Ссылка на объект, для которого формируется массив реквизитов с датами
//  МассивРеквизитов - Массив - Массив имён реквизитов (из метаданных), содержащих даты
//
Процедура ПриЗаполненииСпискаРеквизитовИсточникаСДатамиДляНапоминания(Источник, МассивРеквизитов) Экспорт
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	Если ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		МассивРеквизитов.Очистить();
		МассивРеквизитов.Добавить("СрокИсполнения"); 
		МассивРеквизитов.Добавить("ДатаНачала"); 
	КонецЕсли;
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
		
	// СтандартныеПодсистемы.ЗаметкиПользователя
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.Заметки") Тогда
		МассивРеквизитов.Очистить();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ЗаметкиПользователя
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий


// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные

/////////////////////////////////////////////////////////////////////////////////
// Поставляемые данные

// Зарегистрировать обработчики поставляемых данных
//
// При получении уведомления о доступности новых общих данных, вызывается процедуры
// ДоступныНовыеДанные модулей, зарегистрированных через ПолучитьОбработчикиПоставляемыхДанных.
// В процедуру передается Дескриптор - ОбъектXDTO Descriptor.
// 
// В случае, если ДоступныНовыеДанные устанавливает аргумент Загружать в значение Истина, 
// данные загружаются, дескриптор и путь к файлу с данными передаются в процедуру 
// ОбработатьНовыеДанные. Файл будет автоматически удален после завершения процедуры.
// Если в менеджере сервиса не был указан файл - значение аргумента равно Неопределено.
//
// Параметры: 
//   Обработчики, ТаблицаЗначений - таблица для добавления обработчиков. 
//       Колонки:
//	      ВидДанных, строка - код вида данных, обрабатываемый обработчиком
//		  КодОбработчика, строка(20) - будет использоваться при восстановлении обработки данных после сбоя
//		  Обработчик,  ОбщийМодуль - модуль, содержащий следующие процедуры:
//		  	ДоступныНовыеДанные(Дескриптор, Загружать) Экспорт  
//			ОбработатьНовыеДанные(Дескриптор, ПутьКФайлу) Экспорт
//			ОбработкаДанныхОтменена(Дескриптор) Экспорт
//
Процедура ПолучитьОбработчикиПоставляемыхДанных(Обработчики) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса
	РаботаВМоделиСервиса.ЗарегистрироватьОбработчикиПоставляемыхДанных(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	КурсыВалютСлужебныйВМоделиСервиса.ЗарегистрироватьОбработчикиПоставляемыхДанных(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ВалютыВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.АдресныйКлассификаторВМоделиСервиса
	АдресныйКлассификаторСлужебныйВМоделиСервиса.ЗарегистрироватьОбработчикиПоставляемыхДанных(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.АдресныйКлассификаторВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.КалендарныеГрафикиВМоделиСервиса
	КалендарныеГрафикиСлужебныйВМоделиСервиса.ЗарегистрироватьОбработчикиПоставляемыхДанных(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.КалендарныеГрафикиВМоделиСервиса
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.БанкиВМоделиСервиса
	БанкиСлужебныйВМоделиСервиса.ЗарегистрироватьОбработчикиПоставляемыхДанных(Обработчики);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.БанкиВМоделиСервиса
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные

// СтандартныеПодсистемы.РаботаСФайлами

// Проверяет возможность пометки удаления для текущего пользователя
// при использовании ограничения для папки или файла.
// 
// Параметры:
//  Ссылка       - СправочникСсылка.ПапкиФайлов, СправочникСсылка.Файлы,
//                 <ссылка на владельца>.
//
//  ПометкаНаУдалениеРазрешена - Булево (возвращаемое значение).
//                 Начальное значение Истина. Если права нет нужно установить Ложь.
//
Процедура ПроверитьПравоПометкиУдаления(Ссылка, ПометкаНаУдалениеРазрешена) Экспорт
	
	// СтандартныеПодсистемы.УправлениеДоступом
	
	// Проверка права пометки удаления.
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		Если НЕ УправлениеДоступом.ЕстьПравоПоЗначениюДоступа("ПометкаУдаленияПапокИФайлов", Ссылка) Тогда
			ПометкаНаУдалениеРазрешена = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами


// СтандартныеПодсистемы.РассылкаОтчетов

/////////////////////////////////////////////////////////////////////////////////
// Рассылка отчетов

// Подключает отчет подсистемы "Дополнительные отчеты и обработки".
//   Обработка исключений производится управляющим кодом.
// 
// Параметры:
//   ДопОтчет        (СправочникСсылка.ДополнительныеОтчетыИОбработки) Отчет, который необходимо инициализировать
//   ПараметрыОтчета (Структура) Набор параметров, получаемый в процессе проверки и подключения отчета
//                               см. описание функции "ИнициализироватьОтчет" модуля "РассылкаОтчетов"
//   Результат       (Булево, Неопределено)
//     |- Истина       - Удалось подключить дополнительный отчет
//     |- Ложь         - Не удалось подключить дополнительный отчет
//     |- Неопределено - По умолчанию. Подсистема доп. отчетов недоступна.
//
Процедура РассылкаОтчетовПодключитьДопОтчет(ДопОтчет, ПараметрыОтчета, Результат) Экспорт
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	Если ДопОтчет.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ ДопОтчет.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		ПараметрыОтчета.Имя = ДополнительныеОтчетыИОбработки.ПодключитьВнешнююОбработку(ДопОтчет);
		ПараметрыОтчета.Объект = ВнешниеОтчеты.Создать(ПараметрыОтчета.Имя);
		ПараметрыОтчета.Метаданные = ПараметрыОтчета.Объект.Метаданные();
		
		Результат = Истина;
		
	Иначе
		
		ПараметрыОтчета.Ошибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Элемент %1 не является дополнительным отчетом'"), 
			"'"+ Строка(ДопОтчет) +"'"
		);
		
		Результат = Ложь;
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры

// Записывает вложения в папку.
// 
// Параметры: см. описание процедуры "ВыполнитьДоставку" модуля "РассылкаОтчетов"
//
Процедура РассылкаОтчетовДоставитьВПапку(ПараметрыДоставки, Вложения) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	
	// Перенос вложений в таблицу
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаВложений = Новый ТаблицаЗначений;
	ТаблицаВложений.Колонки.Добавить("ИмяФайла",              Новый ОписаниеТипов("Строка"));
	ТаблицаВложений.Колонки.Добавить("ПолныйПутьКФайлу",      Новый ОписаниеТипов("Строка"));
	ТаблицаВложений.Колонки.Добавить("Файл",                  Новый ОписаниеТипов("Файл"));
	ТаблицаВложений.Колонки.Добавить("ФайлСсылка",            Новый ОписаниеТипов("СправочникСсылка.Файлы"));
	ТаблицаВложений.Колонки.Добавить("ИмяФайлаБезРасширения", Метаданные.Справочники.Файлы.Реквизиты.ПолноеНаименование.Тип);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого Вложение Из Вложения Цикл
		СтрокаТаблицы = ТаблицаВложений.Добавить();
		СтрокаТаблицы.ИмяФайла              = Вложение.Ключ;
		СтрокаТаблицы.ПолныйПутьКФайлу      = Вложение.Значение;
		СтрокаТаблицы.Файл                  = Новый Файл(СтрокаТаблицы.ПолныйПутьКФайлу);
		СтрокаТаблицы.ИмяФайлаБезРасширения = СтрокаТаблицы.Файл.ИмяБезРасширения;
	КонецЦикла;
	
	// Поиск существующих файлов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Файлы.Ссылка,
	|	Файлы.ПолноеНаименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПолноеНаименование В(&МассивИменФайлов)";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ПараметрыДоставки.Папка);
	Запрос.УстановитьПараметр("МассивИменФайлов", ТаблицаВложений.ВыгрузитьКолонку("ИмяФайлаБезРасширения"));
	
	СуществующиеФайлы = Запрос.Выполнить().Выгрузить();
	Для Каждого Файл Из СуществующиеФайлы Цикл
		СтрокаТаблицы = ТаблицаВложений.Найти(Файл.ПолноеНаименование, "ИмяФайлаБезРасширения");
		СтрокаТаблицы.ФайлСсылка = Файл.Ссылка;
	КонецЦикла;
	
	// Постоянные переменные
	Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Рассылка отчетов %1 от %2'"),
		"'"+ ПараметрыДоставки.Рассылка +"'",
		Формат(ПараметрыДоставки.ДатаВыполнения, "ДЛФ=DT")
	);
	ХранитьВерсии = Истина;
	ЭтоВебКлиент = Ложь;
	АдресВременногоХранилищаТекста = "";
	Пользователь = Пользователи.ТекущийПользователь();
	ЗаписатьВИсторию = Истина;
	ВладелецФайла = ПараметрыДоставки.Папка;
	
	Для Каждого Вложение Из ТаблицаВложений Цикл
		// Временные переменные
		АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Вложение.ПолныйПутьКФайлу));
		ВремяИзменения              = Вложение.Файл.ПолучитьВремяИзменения();
		ВремяИзмененияУниверсальное = Вложение.Файл.ПолучитьУниверсальноеВремяИзменения();
		Размер                      = Вложение.Файл.Размер();
		РасширениеБезТочки          = СтрЗаменить(Вложение.Файл.Расширение, ".", "");
		ИмяБезРасширения            = Вложение.ИмяФайлаБезРасширения;
		
		// Запись
		Если ЗначениеЗаполнено(Вложение.ФайлСсылка) Тогда
			РаботаСФайламиСлужебныйВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(
				ВремяИзменения,
				ВремяИзмененияУниверсальное,
				Вложение.ФайлСсылка, 
				ИмяБезРасширения, 
				Размер, 
				РасширениеБезТочки, 
				АдресВременногоХранилищаФайла, 
				АдресВременногоХранилищаТекста,
				ЭтоВебКлиент,
				Пользователь
			);
		Иначе
			Вложение.ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(
				ВладелецФайла,
				ИмяБезРасширения,
				РасширениеБезТочки,
				ВремяИзменения,
				ВремяИзмененияУниверсальное,
				Размер,
				АдресВременногоХранилищаФайла,
				АдресВременногоХранилищаТекста,
				ЭтоВебКлиент,
				Пользователь,
				Комментарий,
				ЗаписатьВИсторию
			);
		КонецЕсли;
		
		// Заполнение ссылки на файл
		Если ПараметрыДоставки.ДобавлятьСсылки <> "" Тогда
			ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СтрЗаменить(
				ПараметрыДоставки.ПредставлениеОтчетовПолучателя,
				Вложение.ПолныйПутьКФайлу,
				ПолучитьНавигационнуюСсылкуИнформационнойБазы() +"#"+ ПолучитьНавигационнуюСсылку(Вложение.ФайлСсылка)
			);
		КонецЕсли;
		
		// Очистка
		УдалитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
	КонецЦикла;
	
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Проверяет право изменения папки.
//
// Параметры: см. описание процедуры "ВыполнитьДоставку" модуля "РассылкаОтчетов"
//
Процедура РассылкаОтчетовПравоИзмененияПапкиИФайлов(Папка, Результат) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	// СтандартныеПодсистемы.УправлениеДоступом
	Результат = УправлениеДоступом.ЕстьПравоПоЗначениюДоступа("ИзменениеПапокИФайлов", Папка);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Получает настройки прокси на сервере.
//
Процедура РассылкаОтчетовНастройкиПрокси(Прокси) Экспорт
	
	// СтандартныеПодсистемы.ПолучениеФайловИзИнтернета
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.ПолучитьНастройкиПроксиНаСервере1СПредприятие();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		Прокси = Новый ИнтернетПрокси();
		Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
		ЗаполнитьЗначенияСвойств(Прокси, НастройкаПроксиСервера);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПолучениеФайловИзИнтернета 
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РассылкаОтчетов


// СтандартныеПодсистемы.УправлениеДоступом

/////////////////////////////////////////////////////////////////////////////////
// Управление доступом

// Заполняет свойства видов доступа, добавленных прикладным разработчиком
// в план видов характеристик ВидыДоступа, как предопределенные элементы.
//
// Параметры:
//  Свойства - Структура со свойствами,
//             описание которых см. в комментарии к функции
//             ПланыВидовХарактеристик.ВидыДоступа.СвойстваВидовДоступа().
//
Процедура ЗаполнитьСвойстваВидаДоступа(Знач Свойства) Экспорт
	
	Если Ложь Тогда
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	ИначеЕсли Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.Пользователи Тогда
		Свойства.Таблицы.Добавить("Справочник.ГруппыИсполнителейЗадач");
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.Организации
	ИначеЕсли Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.Организации Тогда
		Свойства.Таблицы.Добавить("Справочник.Организации");
	// Конец СтандартныеПодсистемы.Организации
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ИначеЕсли Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПапкиФайлов Тогда
		Свойства.Таблицы.Добавить("Справочник.ПапкиФайлов");
		Свойства.ВидДоступаЧерезПраваПоЗначениямДоступа = Истина;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.РаботаСПочтовымиСообщениями
	ИначеЕсли Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.УчетныеЗаписиЭлектроннойПочты Тогда
		Свойства.Таблицы.Добавить("Справочник.УчетныеЗаписиЭлектроннойПочты");
	// Конец СтандартныеПодсистемы.РаботаСПочтовымиСообщениями
	
	// СтандартныеПодсистемы.Свойства
	ИначеЕсли Свойства.ВидДоступа = ПланыВидовХарактеристик.ВидыДоступа.ДополнительныеСведения Тогда
		Свойства.Таблицы.Добавить("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения");
	// Конец СтандартныеПодсистемы.Свойства
	
	КонецЕсли;
	
КонецПроцедуры

// Заполняет описания возможных прав, назначаемых по значениям доступа.
// 
// Параметры:
//  ВозможныеПрава - ТаблицаЗначений, содержащая поля,
//                   описание которых  см. в комментарии к функции
//                   РегистрыСведений.ПраваПоЗначениямДоступа.ВозможныеПрава().
//
Процедура ЗаполнитьВозможныеПраваПоЗначениямДоступа(Знач ВозможныеПрава) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	
	////////////////////////////////////////////////////////////
	// Справочник.ПапкиФайлов
	////////////////////////////////////////////////////////////
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = "Справочник.ПапкиФайлов";
	Право.Имя           = "ЧтениеПапокИФайлов";
	Право.Синоним       = НСтр("ru = 'Чтение папок и файлов'");
	Право.Сокращение    = НСтр("ru = 'Чтение'");
	Право.Заголовок     = НСтр("ru = 'Чт'");
	Право.НачальноеЗначение = Истина;
	// Требуемая роль (одна из указанных)
	Право.ТребуемаяРоль.Добавить("РаботаСПапкамиФайлов");
	// Права для стандартных шаблонов ограничений доступа.
	Право.ЧтениеВТаблицах.Добавить("Справочник.ПапкиФайлов");
	Право.ЧтениеВТаблицах.Добавить("Справочник.Файлы");
	Право.ЧтениеВТаблицах.Добавить("Справочник.ВерсииФайлов");
	Право.ЧтениеВТаблицах.Добавить("РегистрСведений.ХранимыеФайлыВерсий");
	
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = "Справочник.ПапкиФайлов";
	Право.Имя           = "ДобавлениеПапокИФайлов";
	Право.Синоним       = НСтр("ru = 'Добавление папок и файлов'");
	Право.Сокращение    = НСтр("ru = 'Добавление'");
	Право.Заголовок     = НСтр("ru = 'Доб'");
	// Права, требуемые для этого права.
	Право.ТребуемыеПрава.Добавить("ЧтениеПапокИФайлов");
	Право.ТребуемыеПрава.Добавить("ИзменениеПапокИФайлов");
	// Требуемая роль (одна из указанных).
	Право.ТребуемаяРоль.Добавить("РаботаСПапкамиФайлов");
	// Права для стандартных шаблонов ограничений доступа.
	Право.ДобавлениеВТаблицах.Добавить("Справочник.ПапкиФайлов");
	Право.ДобавлениеВТаблицах.Добавить("Справочник.Файлы");
	
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = "Справочник.ПапкиФайлов";
	Право.Имя           = "ИзменениеПапокИФайлов";
	Право.Синоним       = НСтр("ru = 'Изменение папок и файлов'");
	Право.Сокращение    = НСтр("ru = 'Изменение'");
	Право.Заголовок     = НСтр("ru = 'Изм'");
	// Требуемая роль (одна из указанных).
	Право.ТребуемаяРоль.Добавить("РаботаСПапкамиФайлов");
	Право.ТребуемыеПрава.Добавить("ЧтениеПапокИФайлов");
	// Права для стандартных шаблонов ограничений доступа.
	Право.ИзменениеВТаблицах.Добавить("Справочник.ПапкиФайлов");
	Право.ИзменениеВТаблицах.Добавить("Справочник.Файлы");
	
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = "Справочник.ПапкиФайлов";
	Право.Имя           = "ПометкаУдаленияПапокИФайлов";
	Право.Синоним       = НСтр("ru = 'Пометка удаления папок и файлов'");
	Право.Сокращение    = НСтр("ru = 'Пометка удаления'");
	Право.Заголовок     = НСтр("ru = 'ПомУд'");
	// Права, требуемые для этого права.
	Право.ТребуемыеПрава.Добавить("ЧтениеПапокИФайлов");
	Право.ТребуемыеПрава.Добавить("ИзменениеПапокИФайлов");
	// Требуемая роль (одна из указанных)
	Право.ТребуемаяРоль.Добавить("РаботаСПапкамиФайлов");
	
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = "Справочник.ПапкиФайлов";
	Право.Имя           = "УправлениеПравами";
	Право.Синоним       = НСтр("ru = 'Управление правами папок файлов'");
	Право.Сокращение    = НСтр("ru = 'Управление правами'");
	Право.Заголовок     = НСтр("ru = 'Адм'");
	// Права, требуемые для этого права.
	Право.ТребуемыеПрава.Добавить("ЧтениеПапокИФайлов");
	// Требуемая роль (одна из указанных)
	Право.ТребуемаяРоль.Добавить("РаботаСПапкамиФайлов");
	
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Заполняет зависимости прав доступа "подчиненного" объекта, например, задачи ЗадачаИсполнителя,
// от "ведущего" объекта, например,  бизнес-процесса Задание, которые отличаются от стандартных.
//
// Зависимости прав используются в стандартном шаблоне ограничения доступа для вида доступа "Объект":
// 1) стандартно при чтении "подчиненного" объекта
//    проверяется наличие права чтения "ведущего" объекта
//    и проверяется отсутствие ограничения чтения "ведущего" объекта;
// 2) стандартно при добавлении, изменении, удалении "подчиненного" объекта
//    проверяется наличие права изменения "ведущего" объекта
//    и проверяется отсутствие ограничения изменения "ведущего" объекта.
//
// Параметры:
//  Таблица      - РегистрСведенийНаборЗаписей.ЗависимостиПравДоступа.
//                 Допустимые значения ресурсов:
//                   "ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения",
//                   "ПланыВидовХарактеристик.ВидыДоступа.ПравоДобавления",
//                   "ПланыВидовХарактеристик.ВидыДоступа.ПравоИзменения".
//
//                 Если задано недопустимое значение, будет установлено значение по умолчанию:
//                 для права Чтение                         - ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения,
//                 для прав Добавление, Изменение, Удаление - ПланыВидовХарактеристик.ВидыДоступа.ПравоИзменения.
//                 
//                 Следует иметь в виду, что обычная "жесткость" условия ограничения доступа
//                 уменьшается в порядке "Добавление", "Изменение", "Чтение",
//                 Т.е. то, что можно добавить, можно и изменить и прочитать,
//                 соответственно, то что можно изменить можно и прочитать, но не наоборот.
//
Процедура ЗаполнитьЗависимостиПравДоступа(Знач Таблица) Экспорт
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	// Задача исполнителя может быть изменена, когда бизнес-процесс доступен только для чтения,
	// поэтому проверка права изменения и ограничения изменения не требуется,
	// а требуется более "мягкое" условие - проверка права и ограничения чтения.
	//
	// Для задач права добавление и удаление могут быть использованы только в привилегированном
	// режиме, поэтому для них проверять что-либо не требуется.
	Строка = Таблица.Добавить();
	Строка.ПодчиненнаяТаблица   = "Задача.ЗадачаИсполнителя";
	Строка.ТипВедущейТаблицы = БизнесПроцессы.Задание.ПустаяСсылка();
	// Для права Изменения проверка изменяется с "Изменение" на "Чтение".
	Строка.ПриПроверкеПраваИзменение  = ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения;
	
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
КонецПроцедуры

// Заполняет состав видов доступа, используемых при ограничении прав объектов метаданных.
// Если состав видов доступа не заполнен, отчет "Права доступа" покажет некорректные сведения.
//
// Обязательно требуется заполнить только виды доступа, используемые
// в шаблонах ограничения доступа явно, а виды доступа, используемые
// в наборах значений доступа могут быть получены из текущего состояния
// регистра сведений НаборыЗначенийДоступа.
//
//  Для автоматической подготовки содержимого процедуры следует
// воспользоваться инструментами разработчика для подсистемы
// Управление доступом.
//
// Параметры:
//  Описание     - Строка, многострочная строка формата <Таблица>.<Право>.<ВидДоступа>[.Таблица объекта]
//                 Например, Документ.ПриходнаяНакладная.Чтение.Организации
//                           Документ.ПриходнаяНакладная.Чтение.Контрагенты
//                           Документ.ПриходнаяНакладная.Добавление.Организации
//                           Документ.ПриходнаяНакладная.Добавление.Контрагенты
//                           Документ.ПриходнаяНакладная.Изменение.Организации
//                           Документ.ПриходнаяНакладная.Изменение.Контрагенты
//                           Документ.ЭлектронныеПисьма.Чтение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.ЭлектронныеПисьма.Добавление.Объект.Документ.ЭлектронныеПисьма
//                           Документ.ЭлектронныеПисьма.Изменение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.Файлы.Чтение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Чтение.Объект.Документ.ЭлектронноеПисьмо
//                           Документ.Файлы.Добавление.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Добавление.Объект.Документ.ЭлектронноеПисьмо
//                           Документ.Файлы.Изменение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Изменение.Объект.Документ.ЭлектронноеПисьмо
//                 Вид доступа Объект предопределен, как литерал, его нет в предопределенных элементах
//                 ПланыВидовХарактеристик.ВидыДоступа. Этот вид доступа используется в шаблонах ограничений доступа,
//                 как "ссылка" на другой объект, по которому ограничивается таблица.
//                 Когда вид доступа "Объект" задан, также требуется задать типы таблиц, которые используются
//                 для этого вида доступа. Т.е. перечислить типы, которые соответствующие полю,
//                 использованному в шаблоне ограничения доступа в паре с видом доступа "Объект".
//                 При перечислении типов по виду доступа "Объект" нужно перечислить только те типы поля,
//                 которые есть у поля РегистрыСведений.НаборыЗначенийДоступа.Объект, остальные типы лишние.
// 
Процедура ЗаполнитьВидыОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	Описание = Описание + 
	"
	|РегистрСведений.ИсполнителиЗадач.Чтение.Организации
	|РегистрСведений.ИсполнителиЗадач.Изменение.Организации
	|БизнесПроцесс.Задание.Чтение.Пользователи
	|БизнесПроцесс.Задание.Добавление.Пользователи
	|БизнесПроцесс.Задание.Изменение.Пользователи
	|Задача.ЗадачаИсполнителя.Чтение.Объект.БизнесПроцесс.Задание
	|Задача.ЗадачаИсполнителя.Чтение.Пользователи
	|Задача.ЗадачаИсполнителя.Изменение.Пользователи
	|РегистрСведений.ДанныеБизнесПроцессов.Чтение.Объект.БизнесПроцесс.Задание
	|";
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	// СтандартныеПодсистемы.Взаимодействия
	Описание = Описание + 
	"
	|Справочник.ПапкиЭлектронныхПисем.Чтение.УчетныеЗаписиЭлектроннойПочты
	|Справочник.ПапкиЭлектронныхПисем.Добавление.УчетныеЗаписиЭлектроннойПочты
	|Справочник.ПапкиЭлектронныхПисем.Изменение.УчетныеЗаписиЭлектроннойПочты
	|Справочник.ПравилаОбработкиЭлектроннойПочты.Чтение.УчетныеЗаписиЭлектроннойПочты
	|Справочник.ПравилаОбработкиЭлектроннойПочты.Добавление.УчетныеЗаписиЭлектроннойПочты
	|Справочник.ПравилаОбработкиЭлектроннойПочты.Изменение.УчетныеЗаписиЭлектроннойПочты
	|Документ.Встреча.Чтение.Объект.Документ.Встреча
	|Документ.Встреча.Добавление.Объект.Документ.Встреча
	|Документ.Встреча.Изменение.Объект.Документ.Встреча
	|Документ.ЗапланированноеВзаимодействие.Чтение.Объект.Документ.ЗапланированноеВзаимодействие
	|Документ.ЗапланированноеВзаимодействие.Добавление.Объект.Документ.ЗапланированноеВзаимодействие
	|Документ.ЗапланированноеВзаимодействие.Изменение.Объект.Документ.ЗапланированноеВзаимодействие
	|Документ.ТелефонныйЗвонок.Чтение.Объект.Документ.ТелефонныйЗвонок
	|Документ.ТелефонныйЗвонок.Добавление.Объект.Документ.ТелефонныйЗвонок
	|Документ.ТелефонныйЗвонок.Изменение.Объект.Документ.ТелефонныйЗвонок
	|Документ.ЭлектронноеПисьмоВходящее.Чтение.Объект.Документ.ЭлектронноеПисьмоВходящее
	|Документ.ЭлектронноеПисьмоВходящее.Добавление.Объект.Документ.ЭлектронноеПисьмоВходящее
	|Документ.ЭлектронноеПисьмоВходящее.Изменение.Объект.Документ.ЭлектронноеПисьмоВходящее
	|Документ.ЭлектронноеПисьмоИсходящее.Чтение.Объект.Документ.ЭлектронноеПисьмоИсходящее
	|Документ.ЭлектронноеПисьмоИсходящее.Добавление.Объект.Документ.ЭлектронноеПисьмоИсходящее
	|Документ.ЭлектронноеПисьмоИсходящее.Изменение.Объект.Документ.ЭлектронноеПисьмоИсходящее
	|ЖурналДокументов.Взаимодействия.Чтение.Объект.Документ.Встреча
	|ЖурналДокументов.Взаимодействия.Чтение.Объект.Документ.ЗапланированноеВзаимодействие
	|ЖурналДокументов.Взаимодействия.Чтение.Объект.Документ.ТелефонныйЗвонок
	|ЖурналДокументов.Взаимодействия.Чтение.Объект.Документ.ЭлектронноеПисьмоВходящее
	|ЖурналДокументов.Взаимодействия.Чтение.Объект.Документ.ЭлектронноеПисьмоИсходящее
	|РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты.Чтение.УчетныеЗаписиЭлектроннойПочты
	|";
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Описание = Описание + 
	"
	|Справочник.ВстречаПрисоединенныеФайлы.Чтение.Объект.Документ.Встреча
	|Справочник.ВстречаПрисоединенныеФайлы.Добавление.Объект.Документ.Встреча
	|Справочник.ВстречаПрисоединенныеФайлы.Изменение.Объект.Документ.Встреча
	|Справочник.ЗапланированноеВзаимодействиеПрисоединенныеФайлы.Чтение.Объект.Документ.ЗапланированноеВзаимодействие
	|Справочник.ЗапланированноеВзаимодействиеПрисоединенныеФайлы.Добавление.Объект.Документ.ЗапланированноеВзаимодействие
	|Справочник.ЗапланированноеВзаимодействиеПрисоединенныеФайлы.Изменение.Объект.Документ.ЗапланированноеВзаимодействие
	|Справочник.ТелефонныйЗвонокПрисоединенныеФайлы.Чтение.Объект.Документ.ТелефонныйЗвонок
	|Справочник.ТелефонныйЗвонокПрисоединенныеФайлы.Добавление.Объект.Документ.ТелефонныйЗвонок
	|Справочник.ТелефонныйЗвонокПрисоединенныеФайлы.Изменение.Объект.Документ.ТелефонныйЗвонок
	|Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.Чтение.Объект.Документ.ЭлектронноеПисьмоВходящее
	|Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.Добавление.Объект.Документ.ЭлектронноеПисьмоВходящее
	|Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.Изменение.Объект.Документ.ЭлектронноеПисьмоВходящее
	|Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.Чтение.Объект.Документ.ЭлектронноеПисьмоИсходящее
	|Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.Добавление.Объект.Документ.ЭлектронноеПисьмоИсходящее
	|Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.Изменение.Объект.Документ.ЭлектронноеПисьмоИсходящее
	|";
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	
	// СтандартныеПодсистемы.Организации
	Описание = Описание + 
	"
	|Справочник.Организации.Чтение.Организации
	|";
	// Конец СтандартныеПодсистемы.Организации
	
	
	// СтандартныеПодсистемы.Пользователи
	Описание = Описание + 
	"
	|Справочник.ВнешниеПользователи.Чтение.ВнешниеПользователи
	|Справочник.ВнешниеПользователи.Изменение.ВнешниеПользователи
	|Справочник.ГруппыВнешнихПользователей.Чтение.ВнешниеПользователи
	|Справочник.ГруппыПользователей.Чтение.Пользователи
	|Справочник.Пользователи.Чтение.Пользователи
	|Справочник.Пользователи.Изменение.Пользователи
	|РегистрСведений.СоставыГруппПользователей.Чтение.ВнешниеПользователи
	|РегистрСведений.СоставыГруппПользователей.Чтение.Пользователи
	|";
	// Конец СтандартныеПодсистемы.Пользователи
	
	
	// СтандартныеПодсистемы.РаботаСПочтовымиСообщениями
	Описание = Описание + 
	"
	|Справочник.УчетныеЗаписиЭлектроннойПочты.Чтение.УчетныеЗаписиЭлектроннойПочты
	|";
	// Конец СтандартныеПодсистемы.РаботаСПочтовымиСообщениями
	
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Описание = Описание + 
	"
	|Справочник.ПапкиФайлов.Чтение.ПапкиФайлов
	|Справочник.ПапкиФайлов.Добавление.ПапкиФайлов
	|Справочник.ПапкиФайлов.Изменение.ПапкиФайлов
	|Справочник.ВерсииФайлов.Чтение.Объект.Справочник.ПапкиФайлов
	|Справочник.ВерсииФайлов.Чтение.Объект.БизнесПроцесс.Задание
	|Справочник.Файлы.Чтение.Объект.Справочник.ПапкиФайлов
	|Справочник.Файлы.Чтение.Объект.БизнесПроцесс.Задание
	|Справочник.Файлы.Добавление.Объект.Справочник.ПапкиФайлов
	|Справочник.Файлы.Добавление.Объект.БизнесПроцесс.Задание
	|Справочник.Файлы.Изменение.Объект.Справочник.ПапкиФайлов
	|Справочник.Файлы.Изменение.Объект.БизнесПроцесс.Задание
	|РегистрСведений.ХранимыеФайлыВерсий.Чтение.Объект.БизнесПроцесс.Задание
	|РегистрСведений.ХранимыеФайлыВерсий.Чтение.Объект.Справочник.ПапкиФайлов
	|";
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.Свойства
	Описание = Описание + 
	"
	|ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.Чтение.ДополнительныеСведения
	|РегистрСведений.ДополнительныеСведения.Чтение.ДополнительныеСведения
	|РегистрСведений.ДополнительныеСведения.Изменение.ДополнительныеСведения
	|";
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

// Возвращает менеджер временных таблиц, содержащий временную таблицу пользователей
// некоторых дополнительных групп пользователей, например, пользователей групп
// исполнителей задач, которые соответствуют ключам адресации
// (РольИсполнителя + ОсновнойОбъектАдресации + ДополнительныйОбъектАдресации).
//
//  При изменении состава дополнительных групп пользователей, необходимо вызвать
// процедуру ОбновитьПользователейГруппИсполнителей в модуле УправлениеДоступом,
// чтобы применить изменения к внутренним данным подсистемы.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц, в который можно поместить таблицу:
//                            ТаблицаГруппИсполнителей с полями:
//                              ГруппаИсполнителей - Например,
//                                                   СправочникСсылка.ГруппыИсполнителейЗадач.
//                              Пользователь       - СправочникСсылка.Пользователи,
//                                                   СправочникСсылка.ВнешниеПользователи.
//
//  СодержаниеПараметра     - Неопределено - параметр не указан, вернуть все данные.
//                            Строка, когда
//                              "ГруппыИсполнителей" требуется вернуть
//                               только составы указанных групп исполнителей.
//                              "Исполнители" требуется вернуть
//                               только составы групп исполнителей, которые
//                               в которые входят указанные исполнители.
//
//  ЗначениеПараметра       - Неопределено, когда СодержаниеПараметра = Неопределено,
//                          - Например, СправочникСсылка.ГруппыИсполнителейЗадач,
//                            когда СодеражаниеПараметра = "ГруппыИсполнителей".
//                          - СправочникСсылка.Пользователи,
//                            СправочникСсылка.ВнешниеПользователи,
//                            когда СодеражаниеПараметра = "Исполнители".
//                            Массив указанных выше типов.
//
// Возвращаемое значение:
//  Булево - если Истина, МенеджерВременныхТаблиц содержит временную таблицу, иначе нет.
//
Функция ТаблицаГруппИсполнителей(МенеджерВременныхТаблиц, СодержаниеПараметра, ЗначениеПараметра) Экспорт
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если СодержаниеПараметра = "ГруппыИсполнителей" Тогда
		
		Запрос.УстановитьПараметр("ГруппыИсполнителей", ЗначениеПараметра);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиЗадач.ГруппаИсполнителейЗадач КАК ГруппаИсполнителей,
		|	ИсполнителиЗадач.Исполнитель КАК Пользователь
		|ПОМЕСТИТЬ ТаблицаГруппИсполнителей
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.ГруппаИсполнителейЗадач В(&ГруппыИсполнителей)";
		
	ИначеЕсли СодержаниеПараметра = "Исполнители" Тогда
		
		Запрос.УстановитьПараметр("Исполнители", ЗначениеПараметра);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиЗадач.ГруппаИсполнителейЗадач КАК ГруппаИсполнителей,
		|	ИсполнителиЗадач.Исполнитель КАК Пользователь
		|ПОМЕСТИТЬ ТаблицаГруппИсполнителей
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.ИсполнителиЗадач КАК ГруппыИсполнителей
		|			ГДЕ
		|				ГруппыИсполнителей.ГруппаИсполнителейЗадач = ИсполнителиЗадач.ГруппаИсполнителейЗадач
		|				И ГруппыИсполнителей.Исполнитель В (&Исполнители))";
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсполнителиЗадач.ГруппаИсполнителейЗадач КАК ГруппаИсполнителей,
		|	ИсполнителиЗадач.Исполнитель КАК Пользователь
		|ПОМЕСТИТЬ ТаблицаГруппИсполнителей
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач";
	КонецЕсли;
	
	Запрос.Выполнить();
	
	Возврат Истина;
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
	Возврат Ложь;
	
КонецФункции

// Устанавливает использование регламентного задания заполнения данных управления доступом.
//
// Параметры:
// Использование - Булево - Истина, если задание нужно включить, иначе Ложь.
//
Процедура УстановитьИспользованиеЗаданияЗаполненияДанныхУправленияДоступом(Знач Использование) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	УправлениеДоступомСлужебныйВМоделиСервиса.УстановитьИспользованиеЗаданияЗаполненияДанных(Использование);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.УправлениеДоступомВМоделиСервиса
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом


// СтандартныеПодсистемы.ФайловыеФункции

/////////////////////////////////////////////////////////////////////////////////
// Файловые функции

// Дополняет структуру, содержащую общие и персональные настройки по работе с файлами.
Процедура ДобавитьНастройкиРаботыСФайлами(ОбщиеНастройки, ПерсональныеНастройки) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебныйВызовСервера.ДобавитьНастройкиРаботыСФайлами(ОбщиеНастройки, ПерсональныеНастройки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Добавляет файл на том при "Разместить файлы начального образа"
//
Процедура ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ХранитьФайлыВТомахНаДиске, ПрисоединяемыеФайлы) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебныйВызовСервера.ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ХранитьФайлыВТомахНаДиске);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ХранитьФайлыВТомахНаДиске, ПрисоединяемыеФайлы);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Удаляет регистрацию изменений после "Разместить файлы начального образа"
//
Процедура УдалитьРегистрациюИзменений(ПланОбменаСсылка, ПрисоединяемыеФайлы) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебныйВызовСервера.УдалитьРегистрациюИзменений(ПланОбменаСсылка);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.УдалитьРегистрациюИзменений(ПланОбменаСсылка, ПрисоединяемыеФайлы);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Возвращает структуру с двоичными данными файла и подписи.
Функция ПолучитьДвоичныеДанныеФайлаИПодписи(ДанныеСтроки) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если РаботаСФайламиСлужебный.ЭтоЭлементРаботаСФайлами(ДанныеСтроки.Объект) Тогда
		
		Возврат РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИДвоичныеДанные(
			, ДанныеСтроки.Объект, ДанныеСтроки.АдресПодписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Если ПрисоединенныеФайлыСлужебный.ЭтоЭлементПрисоединенныеФайлы(ДанныеСтроки.Объект) Тогда
		
		Возврат ПрисоединенныеФайлыСлужебный.ПолучитьДвоичныеДанныеФайлаИПодписи(
			ДанныеСтроки.Объект, ДанныеСтроки.АдресПодписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает текст запроса для извлечения текста
//
Процедура ПолучитьТекстЗапросаДляИзвлеченияТекста(ТекстЗапроса, ПолучитьВсеФайлы = Ложь) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебныйВызовСервера.ПолучитьТекстЗапросаДляИзвлеченияТекста(ТекстЗапроса, ПолучитьВсеФайлы);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ПолучитьТекстЗапросаДляИзвлеченияТекста(ТекстЗапроса, ПолучитьВсеФайлы);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Возвращает число файлов с неизвлеченным текстом
//
Процедура ПолучитьКоличествоВерсийСНеизвлеченнымТекстом(ЧислоВерсий) Экспорт
	
	ЧислоВерсий = 0;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ЧислоВерсий = ЧислоВерсий + РаботаСФайламиСлужебныйВызовСервера.ПолучитьКоличествоВерсийСНеизвлеченнымТекстом();
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ЧислоВерсий = ЧислоВерсий + ПрисоединенныеФайлыСлужебный.ПолучитьКоличествоВерсийСНеизвлеченнымТекстом();
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Вычисляет объём файлов тома в байтах, результат возвращается в параметр РазмерФайлов.
Процедура ПодсчитатьРазмерФайловНаТоме(СсылкаТома, РазмерФайлов) Экспорт
	
	РазмерФайлов = 0;
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РазмерФайлов = РазмерФайлов + РаботаСФайламиСлужебныйВызовСервера.ПодсчитатьРазмерФайловНаТоме(СсылкаТома);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Получает полный путь к файлу на диске
Функция ПолучитьИмяФайлаСПутемКДвоичнымДанным(ФайлСсылка) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если РаботаСФайламиСлужебный.ЭтоЭлементРаботаСФайлами(ФайлСсылка) Тогда
		Возврат РаботаСФайламиСлужебныйВызовСервера.ПолучитьИмяФайлаСПутемКДвоичнымДанным(ФайлСсылка);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Если ПрисоединенныеФайлыСлужебный.ЭтоЭлементПрисоединенныеФайлы(ФайлСсылка) Тогда
		Возврат ПрисоединенныеФайлыСлужебный.ПолучитьИмяФайлаСПутемКДвоичнымДанным(ФайлСсылка);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецФункции

// Записывает извлеченный текст
Процедура ЗаписатьИзвлеченныйТекст(ФайлОбъект) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если РаботаСФайламиСлужебный.ЭтоЭлементРаботаСФайлами(ФайлОбъект) Тогда
		РаботаСФайламиСлужебныйВызовСервера.ЗаписатьИзвлеченныйТекст(ФайлОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Если ПрисоединенныеФайлыСлужебный.ЭтоЭлементПрисоединенныеФайлы(ФайлОбъект) Тогда
		ПрисоединенныеФайлыСлужебный.ЗаписатьИзвлеченныйТекст(ФайлОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Возвращает навигационную ссылку на файл (на реквизит или во временное хранилище)
Функция ПолучитьНавигационнуюСсылкуФайла(ФайлСсылка, УникальныйИдентификатор) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если РаботаСФайламиСлужебный.ЭтоЭлементРаботаСФайлами(ФайлСсылка) Тогда
		Возврат РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ФайлСсылка, УникальныйИдентификатор);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	Если ПрисоединенныеФайлыСлужебный.ЭтоЭлементПрисоединенныеФайлы(ФайлСсылка) Тогда
		Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлСсылка, УникальныйИдентификатор).СсылкаНаДвоичныеДанныеФайла;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецФункции

// Возвращает в параметре КоличествоФайловВТомах количество файлов в томах.
Процедура ОпределитьКоличествоФайловВТомах(КоличествоФайловВТомах) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебныйВызовСервера.ОпределитьКоличествоФайловВТомах(КоличествоФайловВТомах);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ОпределитьКоличествоФайловВТомах(КоличествоФайловВТомах);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Возвращает Истина в параметре ЕстьХранимыеФайлы, если есть хранимые файлы к объекту ВнешнийОбъект.
//
Процедура ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебныйВызовСервера.ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
	
КонецПроцедуры

// Возвращает в параметре ХранимыеФайлы массив хранимых файлов к объекту ВнешнийОбъект.
//
Процедура ПолучитьХранимыеФайлы(ВнешнийОбъект, ХранимыеФайлы) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебныйВызовСервера.ПолучитьХранимыеФайлы(ВнешнийОбъект, ХранимыеФайлы);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПрисоединенныеФайлы
	ПрисоединенныеФайлыСлужебный.ПолучитьХранимыеФайлы(ВнешнийОбъект, ХранимыеФайлы);
	// Конец СтандартныеПодсистемы.ПрисоединенныеФайлы
		
КонецПроцедуры

// Читает кодировку версии файла
//
// Параметры
// ВерсияСсылка - ссылка на версию файла
//
// Возвращаемое значение:
//   Строка кодировки
Процедура ПолучитьКодировкуВерсииФайла(ВерсияСсылка, Кодировка) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Кодировка = РаботаСФайламиСлужебныйВызовСервера.ПолучитьКодировкуВерсииФайла(ВерсияСсылка);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ФайловыеФункции

/////////////////////////////////////////////////////////////////////////////////
// Пользователи в модели сервиса

// Возвращает доступные текущему пользователю действия с указанным пользователем сервиса.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - пользователь, доступные
//   действия с которым требуется получить. Если параметр не указан, проверяются
//   доступные действия с текущим пользователем.
//  ПарольПользователяСервиса - Строка - пароль текущего пользователя для
//   доступа в сервис.
//  
Функция ПолучитьДействияСПользователемСервиса(Знач Пользователь = Неопределено) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	Возврат ПользователиСлужебныйВМоделиСервиса.ПолучитьДействияСПользователемСервиса(
		Пользователь);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
		
КонецФункции

/////////////////////////////////////////////////////////////////////////////////
// Файловые функции в модели сервиса

// Добавляет и удаляет записи в регистр сведений ОчередьИзвлеченияТекста при изменении
// состояние извлечения текста версий файлов
//
// Параметры:
//	ИсточникТекста - СправочникСсылка.ВерсииФайлов, СправочникСсылка.*ПрисоединенныеФайлы,
//		файл, у которого изменилось состояние извлечения текста
//	СостояниеИзвлеченияТекста - ПеречислениеСсылка.СтатусыИзвлеченияТекстаФайлов, новый
//		статус извлечения текста у файла
//
Процедура ОбновитьСостояниеОчередиИзвлеченияТекста(ИсточникТекста, СостояниеИзвлеченияТекста) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ФайловыеФункцииВМоделиСервиса
	Если ОбщегоНазначения.ИспользованиеРазделителяСеанса() Тогда
		ФайловыеФункцииСлужебныйВМоделиСервиса.ОбновитьСостояниеОчередиИзвлеченияТекста(ИсточникТекста, СостояниеИзвлеченияТекста);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ФайловыеФункцииВМоделиСервиса
	
КонецПроцедуры
