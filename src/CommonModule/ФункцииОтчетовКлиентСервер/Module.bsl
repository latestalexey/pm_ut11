////////////////////////////////////////////////////////////////////////////////
// Варианты отчетов - Функции отчетов (клиент, сервер)
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирует настройки отчета по умолчанию.
//
// Возвращаемое значение:
//   Настройки (Структура)
//       |- СоответствиеПериодичностиПараметров (Соответствие)
//           |- Ключ     (ПараметрКомпоновкиДанных)
//           |- Значение (ПеречислениеСсылка.ДоступныеПериодыОтчета)
//       |- ПараметрыПечатиПоУмолчанию (Структура)
//
Функция ПолучитьНастройкиОтчетаПоУмолчанию() Экспорт
	
	Настройки = Новый Структура;
	Настройки.Вставить("СоответствиеПериодичностиПараметров", Новый Соответствие);
	Настройки.Вставить("ПараметрыПечатиПоУмолчанию", Новый Структура);
	Настройки.ПараметрыПечатиПоУмолчанию.Вставить("ПолеСверху", 10);
	Настройки.ПараметрыПечатиПоУмолчанию.Вставить("ПолеСлева", 10);
	Настройки.ПараметрыПечатиПоУмолчанию.Вставить("ПолеСнизу", 10);
	Настройки.ПараметрыПечатиПоУмолчанию.Вставить("ПолеСправа", 10);
	Настройки.ПараметрыПечатиПоУмолчанию.Вставить("ОриентацияСтраницы", ОриентацияСтраницы.Портрет);
	Настройки.ПараметрыПечатиПоУмолчанию.Вставить("АвтоМасштаб", Истина);
	Настройки.ПараметрыПечатиПоУмолчанию.Вставить("МасштабПечати", Неопределено);
	
	Возврат Настройки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Находит доступную настройку для отбора или параметра.
//
// Параметры:
//   НастройкиКД (НастройкиКомпоновкиДанных)
//   ОбщаяНастройка (ЭлементОтбораКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных)
//   ТипОбщейНастройки (Тип)
//
Функция НайтиДоступнуюНастройку(НастройкиКД, ОбщаяНастройка, ЭтоОтбор = Неопределено) Экспорт
	Если ЭтоОтбор = Неопределено Тогда
		ТипОбщейНастройки = ТипЗнч(ОбщаяНастройка);
		Если ТипОбщейНастройки = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЭтоОтбор = Истина;
		ИначеЕсли ТипОбщейНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ЭтоОтбор = Ложь;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ДоступнаяНастройка = ?(
		ЭтоОтбор,
		НастройкиКД.ДоступныеПоляОтбора.НайтиПоле(ОбщаяНастройка.ЛевоеЗначение),
		НастройкиКД.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ОбщаяНастройка.Параметр)
	);
	
	Если ДоступнаяНастройка <> Неопределено Тогда
		Возврат ДоступнаяНастройка;
	КонецЕсли;
	
	МассивСтруктур = Новый Массив;
	МассивСтруктур.Добавить(НастройкиКД.Структура);
	Пока МассивСтруктур.Количество() > 0 Цикл
		СтруктураКД = МассивСтруктур[0];
		МассивСтруктур.Удалить(0);
		Для Каждого ЭлементСтруктурыКД Из СтруктураКД Цикл
			
			Если ТипЗнч(ЭлементСтруктурыКД) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
				ДоступнаяНастройка = ?(
					ЭтоОтбор,
					ЭлементСтруктурыКД.Настройки.ДоступныеПоляОтбора.НайтиПоле(ОбщаяНастройка.ЛевоеЗначение),
					ЭлементСтруктурыКД.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(ОбщаяНастройка.Параметр)
				);
				
				Если ДоступнаяНастройка <> Неопределено Тогда
					Возврат ДоступнаяНастройка;
				КонецЕсли;
				
				МассивСтруктур.Добавить(ЭлементСтруктурыКД.Настройки.Структура);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Находит пользовательскую настройку по ее идентификатору.
//
// Параметры:
//   ПользовательскиеНастройкиКД (ПользовательскиеНастройкиКомпоновкиДанных)
//   Идентификатор (Строка)
//
Функция НайтиПользовательскуюНастройку(ПользовательскиеНастройкиКД, Идентификатор) Экспорт
	Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройкиКД.Элементы Цикл
		Если ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
			Возврат ПользовательскаяНастройка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Находит вложенную пользовательскую настройку по ее идентификатору.
//
Функция НайтиВложеннуюПользовательскуюНастройку(ПользовательскаяНастройка, Идентификатор) Экспорт
	
	Для Каждого ВложеннаяНастройка Из ПользовательскаяНастройка.Элементы Цикл
		Если Строка(ПользовательскаяНастройка.ПолучитьИдентификаторПоОбъекту(ВложеннаяНастройка)) = Идентификатор Тогда
			Возврат ВложеннаяНастройка;
		КонецЕсли;
		Если ТипЗнч(ВложеннаяНастройка) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			РезультатПоиска = НайтиПолеВыбора(ПользовательскаяНастройка, Идентификатор, ВложеннаяНастройка);
			Если РезультатПоиска <> Неопределено Тогда
				Возврат РезультатПоиска;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Находит общую настройку по идентификатору пользовательской настройки.
//
// Параметры:
//   Настройки (НастройкиКомпоновкиДанных)
//   ИдентификаторПользовательскойНастройки (Строка)
//
Функция ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки, ИдентификаторПользовательскойНастройки) Экспорт
	
	ТипНастройки = ТипЗнч(Настройки);
	
	Если ТипНастройки <> Тип("НастройкиКомпоновкиДанных") Тогда
		
		Если Настройки.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			
			Возврат Настройки;
			
		ИначеЕсли ТипНастройки = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			
			Возврат ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Настройки, ИдентификаторПользовательскойНастройки);
			
		ИначеЕсли ТипНастройки = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
			ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных")
			ИЛИ ТипНастройки = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
			
			Для Каждого ВложенныйЭлемент Из Настройки Цикл
				РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(ВложенныйЭлемент, ИдентификаторПользовательскойНастройки);
				Если РезультатПоиска <> Неопределено Тогда
					Возврат РезультатПоиска;
				КонецЕсли;
			КонецЦикла;
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Настройки.Выбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
		Возврат Настройки.Выбор;
	ИначеЕсли Настройки.УсловноеОформление.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
		Возврат Настройки.УсловноеОформление;
	КонецЕсли;
	
	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		Если Настройки.Отбор.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат Настройки.Отбор;
		ИначеЕсли Настройки.Порядок.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Возврат Настройки.Порядок;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипНастройки = Тип("НастройкиКомпоновкиДанных") Тогда
		РезультатПоиска = НайтиЭлементНастройки(Настройки.ПараметрыДанных, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипНастройки <> Тип("ТаблицаКомпоновкиДанных") И ТипНастройки <> Тип("ДиаграммаКомпоновкиДанных") Тогда
		РезультатПоиска = НайтиЭлементНастройки(Настройки.Отбор, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПоиска = НайтиЭлементНастройки(Настройки.УсловноеОформление, ИдентификаторПользовательскойНастройки);
	Если РезультатПоиска <> Неопределено Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	Если ТипНастройки = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Строки, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Колонки, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	ИначеЕсли ТипНастройки = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Точки, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Серии, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	Иначе
		
		РезультатПоиска = ПолучитьОбъектПоПользовательскомуИдентификатору(Настройки.Структура, ИдентификаторПользовательскойНастройки);
		Если РезультатПоиска <> Неопределено Тогда
			Возврат РезультатПоиска;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция возвращает доступное поле компоновки данных
//
// Параметры:
//		Доступные поля - доступные поля компоновки данные, доступные поля отбора компоновки данные и т.д.
//		Поле           - Имя поля компоновки данных
//
Функция ПолучитьДоступноеПоле(ДоступныеПоля, Поле) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		ПолеДоступа = Новый ПолеКомпоновкиДанных(Поле);
	ИначеЕсли ТипЗнч(Поле) = Тип("ПолеКомпоновкиДанных") Тогда
		ПолеДоступа = Поле;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДоступныеПоля.НайтиПоле(ПолеДоступа);
	
КонецФункции

// Функция возвращает доступный параметр компоновки данных
//
// Параметры:
//		Доступные поля - доступные поля компоновки данные, доступные поля отбора компоновки данные и т.д.
//		Параметр       - Имя параметра компоновки данных
//
Функция ПолучитьДоступныйПараметр(ДоступныеПараметры, Параметр) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Строка") Тогда
		ПараметрДоступа = Новый ПараметрКомпоновкиДанных(Параметр);
	ИначеЕсли ТипЗнч(Параметр) = Тип("ПараметрКомпоновкиДанных") Тогда
		ПараметрДоступа = Параметр;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДоступныеПараметры.НайтиПараметр(ПараметрДоступа);
	
КонецФункции

// Загружает значения элемента настроек в таблицу.
//
Процедура ДобавитьЭлементыНастройки(ФормаОтчета, Таблица, ЭлементНастройки, ЭлементВыбора, ДобавлятьИерархическиеПоля, Отступ = "") Экспорт
	
	Для каждого ПолеВыбора Из ЭлементВыбора.Элементы Цикл
		Заголовок = ПолеВыбора.Заголовок;
		Если Заголовок = "" Тогда
			ДоступноеПоле = ПолучитьДоступноеПоле(ФормаОтчета.Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора, ПолеВыбора.Поле);
			Если ДоступноеПоле <> Неопределено Тогда
				Заголовок = ДоступноеПоле.Заголовок;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		СтрокаПоляВыбора = Таблица.Добавить();
		СтрокаПоляВыбора.Представление = Отступ + Заголовок;
		СтрокаПоляВыбора.Использование = ПолеВыбора.Использование;

		СтрокаПоляВыбора.Идентификатор = Строка(ЭлементНастройки.ПолучитьИдентификаторПоОбъекту(ПолеВыбора));
		Если ПолеВыбора.Родитель <> Неопределено Тогда
			СтрокаПоляВыбора.ИдентификаторРодителя = Строка(ЭлементНастройки.ПолучитьИдентификаторПоОбъекту(ПолеВыбора.Родитель));
		КонецЕсли;
		Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СтрокаПоляВыбора.ЭтоГруппа = Истина;
		КонецЕсли;
		Если ДобавлятьИерархическиеПоля И ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") И ПолеВыбора.Элементы.Количество() > 0 Тогда
			ДобавитьЭлементыНастройки(ФормаОтчета, Таблица, ЭлементНастройки, ПолеВыбора, Истина, Отступ + "    ");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список периодов в диапазоне периода.
//
Функция ПолучитьСтруктуруОтборов(ФормаОтчета, КомпоновщикНастроек, СтрокаИдентификатора, ТипОтбора = Неопределено, СтрокаТипаОтбора = Неопределено) Экспорт
	
	СтруктураПараметров = Новый Структура();
	
	Если ТипОтбора = Неопределено И (СтрокаТипаОтбора = Неопределено Или СтрокаТипаОтбора = "") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипОтбора = Неопределено И СтрокаТипаОтбора <> Неопределено И СтрокаТипаОтбора = "" Тогда
		ТипОтбора = Тип(СтрокаТипаОтбора);
	КонецЕсли;
	
	// Получим таблицу связей 
	СтрокиСвязей = ФормаОтчета.СвязиОтборов.НайтиСтроки(Новый Структура("ИдентификаторОтбора", СтрокаИдентификатора));
	МассивСтрокСвязи = Новый Массив;
	Для каждого СтрокаСвязи Из СтрокиСвязей Цикл
		Если Тип(СтрокаСвязи.Тип) = ТипОтбора Тогда
			МассивСтрокСвязи.Добавить(СтрокаСвязи);
		КонецЕсли;
	КонецЦикла;
	
	// Добавим отборы и параметры из элементов настройки отчета по таблице связей полей
	Для Каждого СтрокаСвязи Из МассивСтрокСвязи Цикл
		ЭлементНастройки = НайтиПользовательскуюНастройку(КомпоновщикНастроек.ПользовательскиеНастройки, СтрокаСвязи.ИдентификаторЗначенияОтбора);
		Если ЭлементНастройки = Неопределено Или Не ЭлементНастройки.Использование Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеОтбора = НеОпределено;
		Если ТипЗнч(ЭлементНастройки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЗначениеОтбора = ЭлементНастройки.ПравоеЗначение;
		ИначеЕсли ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ЗначениеОтбора = ЭлементНастройки.Значение;
		КонецЕсли;
		Если ЗначениеОтбора <> НеОпределено Тогда
			ПараметрВыбораИмена = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСвязи.РеквизитПоля, ".");
			Если ПараметрВыбораИмена.Количество() = 1 Тогда
				СтруктураПараметров.Вставить(ПараметрВыбораИмена[0], ЗначениеОтбора);
			ИначеЕсли ПараметрВыбораИмена[0] = "Отбор" Тогда
				Если Не СтруктураПараметров.Свойство("Отбор") Тогда
					СтруктураПараметров.Вставить("Отбор", Новый Структура());
				КонецЕсли;
				СтруктураПараметров.Отбор.Вставить(ПараметрВыбораИмена[1], ЗначениеОтбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Добавляет выбранное поле компоновки данных.
//
// Параметры:
//   Куда         (КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, ВыбранныеПоляКомпоновкиДанных)
//   ИмяИлиПолеКД (Строка, ПолеКомпоновкиДанных)
//   Заголовок    (Строка) Необязательный.
//
// Возвращаемое значение:
//   (ВыбранноеПолеКомпоновкиДанных)
//
Функция ДобавитьВыбранноеПоле(Куда, ИмяИлиПолеКД, Заголовок = "") Экспорт
	
	Если ТипЗнч(Куда) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Настройки.Выбор;
	ИначеЕсли ТипЗнч(Куда) = Тип("НастройкиКомпоновкиДанных") Тогда
		ВыбранныеПоляКД = Куда.Выбор;
	Иначе
		ВыбранныеПоляКД = Куда;
	КонецЕсли;
	
	Если ТипЗнч(ИмяИлиПолеКД) = Тип("Строка") Тогда
		ПолеКД = Новый ПолеКомпоновкиДанных(ИмяИлиПолеКД);
	Иначе
		ПолеКД = ИмяИлиПолеКД;
	КонецЕсли;
	
	ВыбранноеПолеКД = ВыбранныеПоляКД.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПолеКД.Поле = ПолеКД;
	Если Заголовок <> "" Тогда
		ВыбранноеПолеКД.Заголовок = Заголовок;
	КонецЕсли;
	
	Возврат ВыбранноеПолеКД;
	
КонецФункции

// Возвращает список всех группировок компоновщика настроек
// 
// Параметры:
//		ЭлементСтруктуры - элемент структуры настройки СКД, настройка СКД или компоновщик настроек 
//		ПоказыватьГруппировкиТаблиц - признак добавления в список группировки колонок (по умолчанию Истина)
//
Функция ПолучитьГруппировки(ЭлементСтруктуры, ПоказыватьГруппировкиТаблиц = Истина) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Структура = ЭлементСтруктуры.Настройки.Структура;
		ДобавитьГруппировки(Структура, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Структура = ЭлементСтруктуры.Структура;
		ДобавитьГруппировки(Структура, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
		ДобавитьГруппировки(ЭлементСтруктуры.Строки, СписокПолей);
		ДобавитьГруппировки(ЭлементСтруктуры.Колонки, СписокПолей);
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		ДобавитьГруппировки(ЭлементСтруктуры.Серии, СписокПолей);
		ДобавитьГруппировки(ЭлементСтруктуры.Точки, СписокПолей);
	Иначе
		ДобавитьГруппировки(ЭлементСтруктуры.Структура, СписокПолей, ПоказыватьГруппировкиТаблиц);
	КонецЕсли;
	Возврат СписокПолей;
	
КонецФункции

// Находит пользовательскую настройку по имени параметра.
//   Если пользовательская настройка не найдена (например, 
//   если параметр не выведен в пользовательские настройки),
//   то получает общую настройку параметра.
//
// Параметры:
//   КомпоновщикНастроекКД (КомпоновщикНастроекКомпоновкиДанных)
//   ИмяПараметра          (Строка)
//
// Возвращаемое значение:
//   (ЗначениеПараметраНастроекКомпоновкиДанных, Неопределено)
//
Функция ПолучитьПараметр(КомпоновщикНастроекКД, ИмяПараметра) Экспорт
	ПараметрКД = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	
	Для Каждого ПользовательскаяНастройка Из КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И ПользовательскаяНастройка.Параметр = ПараметрКД Тогда
			Возврат ПользовательскаяНастройка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КомпоновщикНастроекКД.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКД);
КонецФункции

// Возвращает список полей группировок всех группировок компоновщика настроек
//
// Параметры: 
//		КомпоновщикНастроек - компоновщик настроек
//		БезПользовательскихПолей - признак не включения пользовательских настроек СКД
//
Функция ПолучитьПоляГруппировок(КомпоновщикНастроек, БезПользовательскихПолей = Ложь) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей);
	Возврат СписокПолей;
	
КонецФункции

// Возвращает последний элемент структуры - группировку
//
// Параметры:
//		ЭлементСтруктурыНастроек - элемент структуры компоновки данных
//		Строки - признак для получения последний группировки строк (Серий) или колонок (точек)
//
Функция ПолучитьПоследнийЭлементСтруктуры(ЭлементСтруктурыНастроек, Строки = Истина) Экспорт
	
	Если ТипЗнч(ЭлементСтруктурыНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = ЭлементСтруктурыНастроек.Настройки;
	ИначеЕсли ТипЗнч(ЭлементСтруктурыНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = ЭлементСтруктурыНастроек;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Структура = Настройки.Структура;
	Если Структура.Количество() = 0 Тогда
		Возврат Настройки;
	КонецЕсли;
	
	Если Строки Тогда
		ИмяСтруктурыТаблицы = "Строки";
		ИмяСтруктурыДиаграммы = "Серии";
	Иначе
		ИмяСтруктурыТаблицы = "Колонки";
		ИмяСтруктурыДиаграммы = "Точки";
	КонецЕсли;
	
	Пока Истина Цикл
		ЭлементСтруктуры = Структура[0];
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыДиаграммы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры.Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыТаблицы];
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")	Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
		Иначе
			Возврат ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Структура[0];
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

// Добавляет вложенные поля группировки.
//
Процедура ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Строки, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Колонки, СписокПолей, БезПользовательскихПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Серии, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Точки, СписокПолей, БезПользовательскихПолей);
		Иначе
			Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(ТекущееПолеГруппировки.Поле);
				Если ДоступноеПоле <> Неопределено 
				  И (ДоступноеПоле.Родитель = Неопределено ИЛИ Не БезПользовательскихПолей ИЛИ ДоступноеПоле.Родитель.Поле <> Новый ПолеКомпоновкиДанных("UserFields")) Тогда
					СписокПолей.Добавить(Строка(ДоступноеПоле.Поле), ДоступноеПоле.Заголовок);
				КонецЕсли;
			КонецЦикла;
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Структура, СписокПолей, БезПользовательскихПолей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет вложенные группировки элемента структуры.
//
Процедура ДобавитьГруппировки(Структура, СписокГруппировок, ПоказыватьГруппировкиТаблиц = Истина)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Строки, СписокГруппировок);
			ДобавитьГруппировки(ЭлементСтруктуры.Колонки, СписокГруппировок);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Серии, СписокГруппировок);
			ДобавитьГруппировки(ЭлементСтруктуры.Точки, СписокГруппировок);
		Иначе
			СписокГруппировок.Добавить(ЭлементСтруктуры);
			Если ПоказыватьГруппировкиТаблиц Тогда
				ДобавитьГруппировки(ЭлементСтруктуры.Структура, СписокГруппировок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Находит выбранное поле компоновки данных по идентификатору.
//
Функция НайтиПолеВыбора(ЭлементНастроек, Идентификатор, Группа)
	
	НайденноеПолеВыбора = Неопределено;
	
	Для каждого ПолеВыбора Из Группа.Элементы Цикл
		Если Строка(ЭлементНастроек.ПолучитьИдентификаторПоОбъекту(ПолеВыбора)) = Идентификатор Тогда
			НайденноеПолеВыбора = ПолеВыбора;
			Прервать;
		КонецЕсли;
		Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			НайденноеПолеВыбора = НайтиПолеВыбора(ЭлементНастроек, Идентификатор, ПолеВыбора);
			Если НайденноеПолеВыбора <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденноеПолеВыбора;
КонецФункции

// Находит общую настройку компоновки данных по идентификатору.
//
Функция НайтиЭлементНастройки(ЭлементНастройки, ИдентификаторПользовательскойНастройки)
	МассивГрупп = Новый Массив;
	МассивГрупп.Добавить(ЭлементНастройки);
	
	Пока МассивГрупп.Количество() > 0 Цикл
		
		Для Каждого ПодчиненныйЭлемент Из МассивГрупп[0].Элементы Цикл
			Если ПодчиненныйЭлемент.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
				Возврат ПодчиненныйЭлемент;
			Иначе
				Если ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
					ИЛИ ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
					МассивГрупп.Добавить(ПодчиненныйЭлемент);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		МассивГрупп.Удалить(0);
		
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для работы с механизмом периодичности

// Возвращает дату начала периода.
//
Функция НачалоПериодаОтчета(ВидПериода, ДатаПериода) Экспорт
	НачалоПериода = ДатаПериода;
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		// Действие не требуется
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		НачалоПериода = НачалоГода(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие") Тогда
		Если Месяц(ДатаПериода) >= 7 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), 7, 1);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), 1, 1);
		КонецЕсли;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		НачалоПериода = НачалоКвартала(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		НачалоПериода = НачалоМесяца(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада") Тогда
		Если День(ДатаПериода) <= 10 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 1);
		ИначеЕсли День(ДатаПериода) <= 20 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 11);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 21);
		КонецЕсли;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя") Тогда
		НачалоПериода = НачалоНедели(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
		НачалоПериода = НачалоДня(ДатаПериода);
	КонецЕсли;
	
	Возврат НачалоПериода;
	
КонецФункции

// Возвращает дату окончания периода.
//
Функция КонецПериодаОтчета(ВидПериода, ДатаПериода) Экспорт
	КонецПериода = ДатаПериода;
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		// Действие не требуется
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		КонецПериода = КонецГода(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие") Тогда
		Если Месяц(ДатаПериода) >= 7 Тогда
			КонецПериода = КонецГода(ДатаПериода);
		Иначе
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), 6, 30));
		КонецЕсли;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		КонецПериода = КонецКвартала(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		КонецПериода = КонецМесяца(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада") Тогда
		Если День(ДатаПериода) <= 10 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 10));
		ИначеЕсли День(ДатаПериода) <= 20 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 20));
		Иначе
			КонецПериода = КонецМесяца(ДатаПериода);
		КонецЕсли;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя") Тогда
		КонецПериода = КонецНедели(ДатаПериода);
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
		КонецПериода = КонецДня(ДатаПериода);
	КонецЕсли;
	
	Возврат КонецПериода;
	
КонецФункции

// Возвращает список периодов в диапазоне начала периода.
//
Функция ПолучитьСписокПериодов(НачалоПериода, ВидПериода) Экспорт
	СписокПериодов = Новый СписокЗначений;
	Если НачалоПериода = '00010101' Тогда
		Возврат Новый СписокЗначений;
	Иначе
		ЗначениеНачалоПериода = НачалоПериода;
	КонецЕсли;
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		ТекущийГод = Год(ЗначениеНачалоПериода);
		
		СписокПериодов.Добавить(Дата(ТекущийГод - 4, 1, 1), НСтр("ru = 'Предыдущие годы...'"));
		Для Счетчик = ТекущийГод - 3 По ТекущийГод + 3 Цикл
			СписокПериодов.Добавить(Дата(Счетчик, 1, 1), Формат(Счетчик, "ЧГ=0"));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод + 4, 1, 1), НСтр("ru = 'Последующие годы...'"));
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие") Тогда
		ТекущийГод = Год(ЗначениеНачалоПериода);
		
		СписокПериодов.Добавить(Дата(ТекущийГод - 2, 1, 1), Формат(ТекущийГод - 2, "ЧГ=0") + "...");
		Для Счетчик = ТекущийГод - 1 По ТекущийГод + 1 Цикл
			СписокПериодов.Добавить(Дата(Счетчик, 1, 1), НСтр("ru = 'I полугодие'")  + " " + Формат(Счетчик, "ЧГ=0"));
			СписокПериодов.Добавить(Дата(Счетчик, 7, 1), НСтр("ru = 'II полугодие'") + " " + Формат(Счетчик, "ЧГ=0"));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод + 2, 1, 1), Формат(ТекущийГод + 2, "ЧГ=0") + "...");
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		ТекущийГод = Год(ЗначениеНачалоПериода);
		
		СписокПериодов.Добавить(Дата(ТекущийГод-1, 1, 1), Формат(ТекущийГод-1, "ЧГ=0") + "...");
		Для Счетчик = ТекущийГод По ТекущийГод Цикл
			СуффиксПериода = " " + Формат(Счетчик, "ЧГ=0");
			СписокПериодов.Добавить(Дата(Счетчик, 1, 1),  НСтр("ru = 'I квартал'")   + СуффиксПериода);
			СписокПериодов.Добавить(Дата(Счетчик, 4, 1),  НСтр("ru = 'II квартал'")  + СуффиксПериода);
			СписокПериодов.Добавить(Дата(Счетчик, 7, 1),  НСтр("ru = 'III квартал'") + СуффиксПериода);
			СписокПериодов.Добавить(Дата(Счетчик, 10, 1), НСтр("ru = 'IV квартал'")  + СуффиксПериода);
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод+1, 1, 1), Формат(ТекущийГод+1, "ЧГ=0") + "...");
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		ТекущийГод = Год(ЗначениеНачалоПериода);
		
		СписокПериодов.Добавить(Дата(ТекущийГод-1, 1, 1), Формат(ТекущийГод-1, "ЧГ=0") + "...");
		Для Счетчик = 1 По 12 Цикл
			СписокПериодов.Добавить(Дата(ТекущийГод, Счетчик, 1), Формат(Дата(ТекущийГод, Счетчик, 1), "ДФ='MMMM yyyy'"));
		КонецЦикла;
		СписокПериодов.Добавить(Дата(ТекущийГод+1, 1, 1), Формат(ТекущийГод+1, "ЧГ=0") + "...");
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада") Тогда
		ТекущийГод   = Год(ЗначениеНачалоПериода);
		ТекущийМесяц = Месяц(ЗначениеНачалоПериода);
		
		СчМесяц = ?(ТекущийМесяц - 4 < 1, 12 + ТекущийМесяц - 4, ТекущийМесяц - 4);
		СчГод   = ?(ТекущийМесяц - 4 < 1, ТекущийГод-1, ТекущийГод);
		Сч = 6;
		
		СписокПериодов.Добавить(Дата(?(СчМесяц <> 1, СчГод, СчГод-1), ?(СчМесяц > 1, СчМесяц-1, 12), 1), Формат(Дата(?(СчМесяц <> 1, СчГод, СчГод-1), ?(СчМесяц > 1, СчМесяц-1, 12), 1), "ДФ='MMMM yyyy'") + "...");
		Пока Сч >0 Цикл
			СуффиксПериода = " " + Нрег(Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'"));
			СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 1),  НСтр("ru = 'I дек.'")   + СуффиксПериода);
			СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 11), НСтр("ru = 'II дек.'")  + СуффиксПериода);
			СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 21), НСтр("ru = 'III дек.'") + СуффиксПериода);
			СчМесяц = СчМесяц + 1;
			Если СчМесяц > 12 Тогда
				СчГод = СчГод + 1;
				СчМесяц = 1;
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		СписокПериодов.Добавить(Дата(СчГод, СчМесяц, 1), Формат(Дата(СчГод, СчМесяц, 1), "ДФ='MMMM yyyy'") + "...");
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя") Тогда
		НачалоНедели = НачалоНедели(ЗначениеНачалоПериода)-21*86400;
		СписокПериодов.Добавить(НачалоНедели-7*86400, НСтр("ru = 'Пред. недели ...'"));
		
		ШаблонПериода = НСтр("ru = '%1 - %2 (%3 неделя года)'");
		
		Для Сч  = 0 По 6 Цикл
			НачНедели = НачалоНедели + 7*Сч*86400;  
			КонНедели = КонецНедели(НачНедели);
			ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонПериода,
				Формат(НачНедели, "ДФ=dd.MM"),
				Формат(КонНедели, "ДФ=dd.MM"),
				НеделяГода(КонНедели)
			);
			СписокПериодов.Добавить(НачНедели, ПредставлениеПериода);
		КонецЦикла;
		
		СписокПериодов.Добавить(НачалоНедели + 7*7*86400, НСтр("ru = 'След. недели ...'"));
		
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
		КонецНедели   = КонецНедели(ЗначениеНачалоПериода);
		ДатаДняНедели = НачалоНедели(ЗначениеНачалоПериода);
		
		СписокПериодов.Добавить(ДатаДняНедели - 86400, НСтр("ru = 'Предыдущая неделя'"));
		
		Пока ДатаДняНедели < КонецНедели Цикл
			СписокПериодов.Добавить(ДатаДняНедели, Формат(ДатаДняНедели, "ДФ='dd MMMM yyyy (ddd)'"));
			ДатаДняНедели = ДатаДняНедели + 86400;
		КонецЦикла;
		
		СписокПериодов.Добавить(КонецНедели + 1, НСтр("ru = 'Следующая неделя'"));
		
	КонецЕсли;
		
	Возврат СписокПериодов;
КонецФункции

// Возвращает вид периода.
//
Функция ПолучитьВидПериода(НачалоПериода, КонецПериода, ДоступныеПериоды = Неопределено) Экспорт
	
	ВидПериода = Неопределено;
	Если НачалоПериода = НачалоДня(НачалоПериода)
		И КонецПериода = КонецДня(КонецПериода) Тогда
		
		РазностьДней = (КонецПериода - НачалоПериода + 1) / (60*60*24);
		Если РазностьДней = 1 Тогда
			
			ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День");
			
		ИначеЕсли РазностьДней = 7 Тогда
			
			Если НачалоПериода = НачалоНедели(НачалоПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 11 Тогда
			
			Если (День(НачалоПериода) = 1 И День(КонецПериода) = 10)
				ИЛИ (День(НачалоПериода) = 11 И День(КонецПериода) = 20)
				ИЛИ (День(НачалоПериода) = 21 И КонецПериода = КонецМесяца(НачалоПериода)) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 31 Тогда
			
			Если НачалоПериода = НачалоМесяца(НачалоПериода) И КонецПериода = КонецМесяца(НачалоПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 92 Тогда
			
			Если НачалоПериода = НачалоКвартала(НачалоПериода) И КонецПериода = КонецКвартала(НачалоПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 190 Тогда
			
			Если Месяц(НачалоПериода) + 5 = Месяц(КонецПериода)
				И НачалоПериода = НачалоМесяца(НачалоПериода)
				И КонецПериода = КонецМесяца(КонецПериода)
				И (НачалоПериода = НачалоГода(НачалоПериода) ИЛИ КонецПериода = КонецГода(НачалоПериода)) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие");
			КонецЕсли;
			
		ИначеЕсли РазностьДней <= 366 Тогда
			
			Если НачалоПериода = НачалоГода(НачалоПериода) И КонецПериода = КонецГода(НачалоПериода) Тогда
				ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПериода = Неопределено Тогда
		ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод");
	КонецЕсли;
	
	Если ДоступныеПериоды <> Неопределено И ДоступныеПериоды.НайтиПоЗначению(ВидПериода) = Неопределено Тогда
		ВидПериода = ДоступныеПериоды[0].Значение;
	КонецЕсли;
	
	Возврат ВидПериода;
	
КонецФункции

// Возвращает доступные периоды в порядке возрастания периодичности.
//
Функция ПолучитьСписокДоступныхПериодов() Экспорт
	
	СписокДоступныхПериодов = Новый Массив;
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год"));
	СписокДоступныхПериодов.Добавить(ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод"));
	
	Возврат СписокДоступныхПериодов;
	
КонецФункции

// Возвращает представление периода, используя его вид и указанное значение.
//
Функция ПолучитьПредставлениеПериода(ВидПериода, НачалоПериода, КонецПериода) Экспорт
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		Возврат Формат(НачалоПериода, "ДФ='dd MMMM yyyy'") + " - " + Формат(КонецПериода, "ДФ='dd MMMM yyyy'");
		
	Иначе
		Список = ПолучитьСписокПериодов(НачалоПериода, ВидПериода);
		ЭлементСписка = Список.НайтиПоЗначению(НачалоПериода);
		Если ЭлементСписка <> Неопределено Тогда
			Возврат ЭлементСписка.Представление;
		Иначе
			Возврат "";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
КонецФункции

// Находит пользовательскую настройку по ее идентификатору.
//
// Параметры:
//   ПользовательскиеНастройкиКД (ПользовательскиеНастройкиКомпоновкиДанных)
//   Идентификатор (Строка)
//
Функция АктуализироватьТабличныйДокумент(ЭтаФорма, ИмяЭлемента) Экспорт
	
	ОтображениеСостояния = ЭтаФорма.Элементы[ИмяЭлемента].ОтображениеСостояния;
	
	Если ОтображениеСостояния.Видимость = Истина
		И ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		
		#Если Клиент Тогда
			ТекстВопроса = НСтр("ru = 'Отчет не сформирован. Сформировать?'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли;
		#КонецЕсли
		
		ЭтаФорма.СкомпоноватьРезультат();
	КонецЕсли;
	
	Возврат Истина;
КонецФункции


