
// Процедура устанавливает видимость элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается видимость
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть видны на форме.
//
Процедура УстановитьВидимостьЭлементовПоМассиву(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> Тип("Массив") Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(ЭлементМассива, ".", "");
		
		// Если реквизита нет в массиве видимых реквизитов, снимаем видимость элемента формы.
		ВидимостьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
		 И Элементы[ИмяРеквизита].Видимость <> ВидимостьРеквизита Тогда
			Элементы[ИмяРеквизита].Видимость = ВидимостьРеквизита;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьЭлементовПоМассиву()

// Процедура устанавливает доступность элементов формы по массиву имен.
//
// Параметры:
//	Элементы - ВсеЭлементыФормы - Коллекция элементов формы
//	МассивВсехРеквизитов - Массив - Массив имен реквизитов, для которых устанавливается доступность.
//	МассивВидимыхРеквизитов - Массив - Массив имен реквизитов, которые должны быть доступны на форме.
//
Процедура УстановитьДоступностьЭлементовПоМассиву(Элементы, Знач МассивВсехРеквизитов, Знач МассивВидимыхРеквизитов) Экспорт
	
	Если ТипЗнч(МассивВидимыхРеквизитов) <> Тип("Массив") Тогда
		МассивВидимыхРеквизитов = Новый Массив;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		ИмяРеквизита = СтрЗаменить(ЭлементМассива, ".", "");
		
		// Если реквизита нет в массиве видимых реквизитов, снимаем видимость элемента формы.
		ДоступностьРеквизита = (МассивВидимыхРеквизитов.Найти(ЭлементМассива) <> Неопределено);
		Если Элементы.Найти(ИмяРеквизита) <> Неопределено
		 И Элементы[ИмяРеквизита].Доступность <> ДоступностьРеквизита Тогда
			Элементы[ИмяРеквизита].Доступность = ДоступностьРеквизита;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьДоступностьЭлементовПоМассиву()

// Процедура устанавливает доступность кнопки "Подобрать по остаткам" в документе в зависимости от указания заявки на оплату.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	Кнопка - КнопкаФормы - кнопка "Подобрать по остаткам".
//
Процедура УстановитьДоступностьПодбораПоОстаткам(Объект, Кнопка) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеДенежныхСредств") Тогда
	 
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		 ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
			Кнопка.Доступность = Не ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств);
		Иначе
			Кнопка.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьПодбораПоОстаткам()

// Процедура устанавливает видимость подбора по остаткам расчетов в форме.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	Кнопка - КнопкаФормы - Кнопка формы для открытия подбора
//
Процедура УстановитьВидимостьПодбораПоОстаткамРасчетов(ХозяйственнаяОперация, Кнопка) Экспорт
	
	МассивОпераций = Новый Массив;
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	
	Кнопка.Видимость = (МассивОпераций.Найти(ХозяйственнаяОперация) <> Неопределено);
	
КонецПроцедуры // УстановитьВидимостьПодбораПоОстаткамРасчетов()

// Процедура устанавливает видимость выбора оплаты платежной картой в форме.
//
// Параметры:
//	Форма - УправляемаяФорма - Текущая форма
//	Поле - ПолеФормы - Поле формы для выбора формы оплаты
//
Процедура УстановитьВидимостьОплатыПлатежнойКартой(Форма, Поле) Экспорт
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьОплатуПлатежнымиКартами") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ФормыОплаты.ПлатежнаяКарта);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению("ПлатежнаяКарта");
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьОплатыПлатежнойКартой()

// Процедура устанавливает видимость выбора операций с кассами ККМ в форме.
//
// Параметры:
//	Форма - УправляемаяФорма - Текущая форма
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийСКассамиККМ(Форма, Поле) Экспорт
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьРозничныеПродажи") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьОперацийСКассамиККМ()

// Процедура устанавливает видимость выбора операций оплаты ДС в другую организацию в форме.
//
// Параметры:
//	Форма - УправляемаяФорма - Текущая форма
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийПередачиМеждуОрганизациями(Форма, Поле) Экспорт
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
		
		Для Каждого ХозяйственнаяОперация Из МассивОпераций Цикл
		
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьОперацийПередачиМеждуОрганизациями()

// Процедура устанавливает видимость выбора операций внутренней передачи ДС в форме.
//
// Параметры:
//	Форма - УправляемаяФорма - Текущая форма
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийВнутреннейПередачи(Форма, Поле) Экспорт
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции оплаты таможенного платежа в форме.
//
// Параметры:
//	Форма - УправляемаяФорма - Текущая форма
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииПеречислениеТаможне(Форма, Поле) Экспорт
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьИмпортныеЗакупки") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает заголовок колонки "Сумма платежа".
//
// Параметры:
//	Валюта - СправочникСсылка.Валюты - Валюта документа
//	Элементы - ВсеЭлементыФормы - Коллекция элементов управляемой формы.
//
Процедура УстановитьЗаголовокСуммыПлатежа(Валюта, Элементы) Экспорт
	
	Элементы.РасшифровкаПлатежаСумма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сумма (%1)'"),
		Строка(Валюта)
	);
	
КонецПроцедуры // УстановитьЗаголовокСуммыПлатежа()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция проверяет наличие заказа в табличной части "Расшифровка платежа" документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//
// Возвращаемое значение:
//	Булево - Истина - заказ указан в строке табличной части
//
Функция УказанЗаказВРасшифровкеПлатежа(Объект)
	
	ЗаказУказан = Ложь;
	Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
			ЗаказУказан = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗаказУказан;
	
КонецФункции // УказанЗаказВРасшифровкеПлатежа()

// Процедура устанавливает параметры выбора для кассы.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементКасса - ПолеФормы - Поле для ввода кассы.
//
Процедура УстановитьПараметрыВыбораКассы(Объект, ЭлементКасса) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	
		Если Не ЗначениеЗаполнено(Объект.Касса)
		 ИЛИ УказанЗаказВРасшифровкеПлатежа(Объект) Тогда
			НуженОтборПоОрганизации = Истина;
		ИначеЕсли Объект.Свойство("ЗаявкаНаРасходованиеДенежныхСредств")
		 И ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
			НуженОтборПоОрганизации = Истина;
		Иначе
			НуженОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		МассивПараметров = Новый Массив;
		Если НуженОтборПоОрганизации Тогда
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		КонецЕсли;
		ЭлементКасса.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций())));
	КонецЕсли;
	
	ЭлементКасса.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораКассы()

// Процедура устанавливает параметры выбора для кассы получателя.
//
Процедура УстановитьПараметрыВыбораКассыПолучателя(Объект, ЭлементКасса) Экспорт
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		Если ЗначениеЗаполнено(Объект.ВалютаКонвертации) Тогда
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.ВалютаКонвертации"));
		КонецЕсли;
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта"));
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
	 И Объект.Свойство("ОрганизацияПолучатель")
	 И ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ОрганизацияПолучатель"));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));	
		
	КонецЕсли;
	
	ЭлементКасса.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	МассивПараметров.Очистить();
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация))));
	КонецЕсли;
	
	ЭлементКасса.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораКассыПолучателя()

// Процедура устанавливает параметры выбора для банковского счета.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементБанковскийСчет - ПолеФормы - Поле для ввода банковского счета.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчета(Объект, ЭлементБанковскийСчет) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчет)
		 ИЛИ УказанЗаказВРасшифровкеПлатежа(Объект) Тогда
			НуженОтборПоОрганизации = Истина;
		ИначеЕсли Объект.Свойство("ЗаявкаНаРасходованиеДенежныхСредств")
		 И ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
			НуженОтборПоОрганизации = Истина;
		Иначе
			НуженОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		МассивПараметров = Новый Массив;
		Если НуженОтборПоОрганизации Тогда
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		КонецЕсли;
		ЭлементБанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций())));
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", Константы.ВалютаРегламентированногоУчета.Получить()));
	КонецЕсли;
	
	ЭлементБанковскийСчет.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораБанковскогоСчета()

// Процедура устанавливает параметры выбора для банковского счета получателя.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчетаПолучателя(Объект, ЭлементБанковскийСчет) Экспорт
	
	МассивПараметров = Новый Массив;
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		Если ЗначениеЗаполнено(Объект.ВалютаКонвертации) Тогда
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.ВалютаКонвертации"));
		КонецЕсли;
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта"));
	КонецЕсли;
	
	Если (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
	 И Объект.Свойство("ОрганизацияПолучатель")
	 И ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ОрганизацияПолучатель"));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
		
	КонецЕсли;
	
	ЭлементБанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	МассивПараметров.Очистить();
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Новый ФиксированныйМассив(Справочники.Организации.МассивВзаимосвязанныхОрганизаций(Объект.Организация))));
	КонецЕсли;
	
	ЭлементБанковскийСчет.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораБанковскогоСчетаПолучателя()

// Процедура устанавливает параметры выбора для эквайрингового терминала.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементЭквайринговыйТерминал - ПолеФормы - Поле для ввода эквайрингового терминала.
//
Процедура УстановитьПараметрыВыбораЭквайринговогоТерминала(Объект, ЭлементЭквайринговыйТерминал) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	
		Если Не ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал)
		 ИЛИ ЗначениеЗаполнено(Объект.ЗаявкаНаРасходованиеДенежныхСредств)
		 ИЛИ УказанЗаказВРасшифровкеПлатежа(Объект) Тогда
			НуженОтборПоОрганизации = Истина;
		Иначе
			НуженОтборПоОрганизации = Ложь;
		КонецЕсли;
		
		Если НуженОтборПоОрганизации Тогда
			МассивПараметров = Новый Массив;
			МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
			ЭлементЭквайринговыйТерминал.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПараметрыВыбораЭквайринговогоТерминала()

// Процедура устанавливает параметры выбора для партнера.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементПартнер - ПолеФормы - Поле для ввода партнера.
//
Процедура УстановитьПараметрыВыбораПартнера(Объект, ЭлементПартнер) Экспорт
	
	МассивПараметров = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
	 ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
	Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПрочиеОтношения", Истина));
		
	Иначе
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Поставщик", Истина));
		
	КонецЕсли;
	
	ЭлементПартнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораПартнера()

// Процедура устанавливает параметры выбора для контрагента.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементКонтрагент - ПолеФормы - Поле для ввода контрагента.
//
Процедура УстановитьПараметрыВыбораКонтрагента(Объект, ЭлементКонтрагент) Экспорт
	
	МассивПараметров = Новый Массив;
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Партнер", "Объект.Партнер", РежимИзмененияСвязанногоЗначения.НеИзменять));
	КонецЕсли;
		
	ЭлементКонтрагент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораКонтрагента()

// Процедура устанавливает параметры выбора для банковского счета контрагента.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементБанковскийСчетКонтрагента - ПолеФормы - Поле для ввода банковского счета контрагента.
//
Процедура УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента(Объект, ЭлементБанковскийСчетКонтрагента) Экспорт
	
	МассивПараметров = Новый Массив;
	
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.Валюта"));
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.ПодотчетноеЛицо"));
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент"));
	КонецЕсли;
	
	ЭлементБанковскийСчетКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента()

// Процедура устанавливает параметры выбора для заявки на расходование денежных средств.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементЗаявка - ПолеФормы - Поле для ввода заявки на расходование денежных средств.
//
Процедура УстановитьПараметрыВыбораЗаявки(Объект, ЭлементЗаявка) Экспорт
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Валюта", "Объект.Валюта"));

	МассивПараметровВыбора = Новый Массив;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям
		ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику Тогда
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям);
		
		МассивПараметровВыбора.Добавить(ПараметрВыбора);
		
		
		//ЭлементЗаявка.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	Иначе
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ХозяйственнаяОперация", "Объект.ХозяйственнаяОперация"));
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.ПодотчетноеЛицо", "Объект.ПодотчетноеЛицо"));
	КонецЕсли;
	ПараметрВыбораЗаявки = Новый ПараметрВыбора("Отбор.ЗаявкаОплачена", Ложь);
	МассивПараметровВыбора.Добавить(ПараметрВыбораЗаявки);
	
	ПараметрВыбораЗаявкиСтатус = Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена);
	МассивПараметровВыбора.Добавить(ПараметрВыбораЗаявкиСтатус);
	
	ЭлементЗаявка.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);

	ЭлементЗаявка.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораЗаявки()

// Процедура устанавливает ограничение типа для поля "Соглашение" табличной части.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий объект
//	ЭлементРасшифровкаПлатежаСоглашение - ПолеФормы - Поле для ввода соглашения.
//
Процедура УстановитьОграничениеТипаСоглашения(Объект, ЭлементРасшифровкаПлатежаСоглашение) Экспорт

	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
	 ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		ЭлементРасшифровкаПлатежаСоглашение.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами");
	Иначе
		ЭлементРасшифровкаПлатежаСоглашение.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками");
	КонецЕсли;

КонецПроцедуры // УстановитьОграничениеТипаСоглашения()

////////////////////////////////////////////////////////////////////////////////
// Функции заполнения документов.

// Функция определяет партнера, соответствующего выбранному контрагенту.
//
// Возвращает ссылку котрагента, если найден один контрагент.
// Возвращает Неопределено, если контрагенты не найдены или контрагентов больше одного
//
// Параметры
//  Партнер		- ссылка на партнера, контрагента которого нужно найти
//
Функция ПолучитьПартнераПоКонтрагенту(Контрагент) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Контрагенты.Партнер КАК Партнер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|");
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Партнер = Выборка.Партнер;
	Иначе
		Партнер = Неопределено;
	КонецЕсли;
	
	Возврат Партнер;

КонецФункции // ПолучитьПартнераПоКонтрагенту()
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура заполняет значения полей "БИК" и "КоррСчет".
//
Процедура ЗаполнитьБИКиКоррСчет(Банк, Бик, КоррСчет) Экспорт

	Если Не ЗначениеЗаполнено(Банк) Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Код КАК БИК,
	|	КоррСчет КАК КоррСчет
	|ИЗ
	|	Справочник.КлассификаторБанковРФ КАК Банки
	|ГДЕ
	|	Банки.Ссылка = &Ссылка
	|";
	Запрос.УстановитьПараметр("Ссылка", Банк);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Бик = Выборка.БИК;
		КоррСчет = Выборка.КоррСчет;
	КонецЕсли;

КонецПроцедуры

// Процедура получает банк по указанному БИК или корреспондентскому счету.
//
// Параметры:
//	Поле - Строка - Имя поля, в котором произведен выбор значения.
//	Значение - Строка - Значение, выбранное в поле.
//	Банк - СправочникСсылка.КлассификаторБанковРФ - Значение поля для указания банка
//	БИК - Строка - БИК банка
//	КоррСчет - Строка - Корреспондентский счет банка
//
// Возвращаемое значение:
//	СписокЗначений - Список банков для интерактивного выбора.
//
Функция ПолучитьСписокБанковПоРеквизитам(Поле, Значение, Банк, БИК, КоррСчет) Экспорт

	СписокБанков = Новый СписокЗначений;
	
	// Если значение не выбрано, очистим значение банка.
	Если ПустаяСтрока(Значение) Тогда
	
		Банк = Справочники.КлассификаторБанковРФ.ПустаяСсылка();
		БИК = "";
		КоррСчет = "";
		
		Возврат СписокБанков;
		
	КонецЕсли;
		
	ТаблицаБанков = Новый ТаблицаЗначений;
	Колонки = ТаблицаБанков.Колонки;
	Колонки.Добавить("Ссылка");
	Колонки.Добавить("Код");
	Колонки.Добавить("КоррСчет");
	
	ЭтоБИК = Ложь;
	ЭтоКоррСчет = Ложь;
	Если Найти(Поле, "БИК") <> 0 Тогда
		ЭтоБИК = Истина;
	ИначеЕсли Найти(Поле, "КоррСчет") <> 0 Тогда
		ЭтоКоррСчет = Истина;
	КонецЕсли;
	
	Если (ЭтоБИК И СтрДлина(Значение) = 9)
	 ИЛИ (ЭтоКоррСчет И СтрДлина(Значение) = 20)
	Тогда
		
		Если ЭтоБИК Тогда
			СтруктураОтбора = Новый Структура("Код", Значение);
			
		ИначеЕсли ЭтоКоррСчет Тогда
			СтруктураОтбора = Новый Структура("КоррСчет", Значение);
			
		КонецЕсли;
		
		Выборка = Справочники.КлассификаторБанковРФ.Выбрать(,, СтруктураОтбора, "Код Возр");
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаБанков.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
				
	КонецЕсли;
	
	Если ТаблицаБанков.Количество() = 1 Тогда
		ДанныеБанка = ТаблицаБанков[0];
		
		Банк = ДанныеБанка.Ссылка;
		БИК = ДанныеБанка.Код;
		КоррСчет = ДанныеБанка.КоррСчет;
		СписокБанков.Добавить(Банк);
		
	ИначеЕсли ТаблицаБанков.Количество() > 1 Тогда
		МассивБанков = ТаблицаБанков.ВыгрузитьКолонку("Ссылка");
		СписокБанков.ЗагрузитьЗначения(МассивБанков);
		
	КонецЕсли;
	
	Возврат СписокБанков;
	
КонецФункции

// Функция получает валюту, соответствующую номеру банковского счета.
// 6-8 разряды номера банковского счета соответствуют коду валюты.
// Для рублей используется код 810.
//
// Параметры:
//	НомерСчета - Число - Номер банковского счета
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты - Валюта банковского счета
//
Функция ПолучитьВалютуПоНомеруСчета(НомерСчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КодВалюты = Сред(НомерСчета, 6, 3);
	Если КодВалюты = "810" Тогда
		КодВалюты = "643";
	КонецЕсли;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	Валюты.Ссылка КАК Валюта
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	Валюты.Код = &КодВалюты
	|");
	Запрос.УстановитьПараметр("КодВалюты", КодВалюты);
	
	Валюта = Справочники.Валюты.ПустаяСсылка();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Валюта = Выборка.Валюта;
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции // ПолучитьВалютуПоНомеруСчета()

// Функция помещает расшифровку платежа во временное хранилище и возвращает адрес.
//
Функция ПоместитьРасшифровкуПлатежаВХранилище(Знач РасшифровкаПлатежа, УникальныйИдентификатор) Экспорт

	АдресПлатежейВХранилище = ПоместитьВоВременноеХранилище(
		РасшифровкаПлатежа.Выгрузить(,"Заказ, Сумма, ВалютаВзаиморасчетов, СуммаВзаиморасчетов"),
		УникальныйИдентификатор
	);
		
	Возврат АдресПлатежейВХранилище;
	
КонецФункции // ПоместитьРасшифровкуПлатежаВХранилище()

// Процедура заполняет кассу, банковский счет или эквайринговый терминал в зависимости от формы оплаты документа.
//
// Параметры:
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Фактическая форма оплаты заявки
//	ДанныеЗаполнения - Структура - Данные для заполнения документа
//
Процедура ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения) Экспорт
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
	
		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(
			ДанныеЗаполнения.Организация,
			ФормаОплаты,
			ДанныеЗаполнения.Касса
		);
		Если Не ЗначениеЗаполнено(Касса) Тогда
			Касса = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяКасса",);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Касса) Тогда
			Валюта = Справочники.Кассы.ПолучитьРеквизитыКассы(Касса).Валюта;
			ДанныеЗаполнения.Вставить("Касса", Касса);
			ДанныеЗаполнения.Вставить("Валюта", Валюта);
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
	
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
			ДанныеЗаполнения.Организация,
			ФормаОплаты,
			ДанныеЗаполнения.БанковскийСчет
		);
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			БанковскийСчет = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийБанковскийСчет",);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			Валюта = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет).Валюта;
			ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчет);
			ДанныеЗаполнения.Вставить("Валюта", Валюта);
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
		
		ЭквайринговыйТерминал = Справочники.ЭквайринговыеТерминалы.ПолучитьЭквайринговыйТерминалПоУмолчанию(
			Неопределено, // Касса
			ДанныеЗаполнения.Организация
		);
		Если Не ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			ЭквайринговыйТерминал = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийЭквайринговыйТерминал",);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			Реквизиты = Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ЭквайринговыйТерминал);
			ДанныеЗаполнения.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
			ДанныеЗаполнения.Вставить("Валюта", Реквизиты.Валюта);
			ДанныеЗаполнения.Вставить("ДоговорЭквайринга", Реквизиты.ДоговорЭквайринга);
			ДанныеЗаполнения.Вставить("Касса", Реквизиты.Касса);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыДокументаПоФормеОплаты()

// Процедура заполняет документ на основании заявки на расходование денежных средств.
//
// Параметры:
//	Заявка - ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств - Документ - основание
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа
//	ДанныеЗаполнения - Структура - Данные заполнения
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Фактическая форма оплаты (зависит от вводимого документа оплаты)
//
Процедура ЗаполнитьДокументПоЗаявкеНаРасходованиеДенежныхСредств(
	Знач Заявка,
	Знач ВалютаДокумента,
	ДанныеЗаполнения,
	РасшифровкаПлатежа,
	ФормаОплаты,
	ТаблицаВедомостей = Неопределено
	) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполним данные шапки документа.
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Заявка.Организация КАК Организация,
	               |	Заявка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	               |	Заявка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	               |	Заявка.Подразделение КАК Подразделение,
	               |	Заявка.Контрагент КАК Контрагент,
	               |	Заявка.Контрагент.Наименование КАК КонтрагентНаименование,
	               |	Заявка.Контрагент.НаименованиеПолное КАК КонтрагентНаименованиеПолное,
	               |	Заявка.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	               |	Заявка.ПодотчетноеЛицо.Наименование КАК ПодотчетноеЛицоНаименование,
	               |	Заявка.АвансовыйОтчет КАК АвансовыйОтчет,
	               |	Заявка.Валюта КАК ВалютаЗаявки,
	               |	Заявка.Валюта КАК Валюта,
	               |	&Ссылка КАК ДокументОснование,
	               |	Заявка.ВалютаКонвертации КАК ВалютаКонвертации,
	               |	Заявка.КурсКонвертации КАК КурсКонвертации,
	               |	Заявка.Статус КАК Статус,
	               |	ВЫБОР
	               |		КОГДА Заявка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ПеречислениеВБюджет,
	               |	Заявка.Касса КАК Касса,
	               |	ВЫБОР
	               |		КОГДА Заявка.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств))
	               |			ТОГДА Заявка.КассаПолучатель
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК КассаПолучатель,
	               |	Заявка.БанковскийСчет КАК БанковскийСчет,
	               |	ВЫБОР
	               |		КОГДА Заявка.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств))
	               |			ТОГДА Заявка.БанковскийСчетПолучатель
	               |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	               |	КОНЕЦ КАК БанковскийСчетПолучатель,
	               |	Заявка.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	               |	Заявка.Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
	               |	Заявка.НазначениеПлатежа КАК НазначениеПлатежа,
	               |	ЕСТЬNULL(-ДенежныеСредства.СуммаОстаток, 0) КАК СуммаДокумента,
	               |	ТаблицаВедомостей.Ведомость КАК Ведомость,
	               |	Заявка.НомерВедомостиНаВыплатуЗарплаты КАК НомерВедомостиНаВыплатуЗарплаты,
	               |	Заявка.ДатаВедомостиНаВыплатуЗарплаты КАК ДатаВедомостиНаВыплатуЗарплаты,
	               |	Заявка.СтатьяРасходов КАК СтатьяРасходов,
	               |	Заявка.АналитикаРасходов КАК АналитикаРасходов,
	               |	Заявка.ПериодВозникновенияРасхода КАК ПериодВозникновенияРасхода
				   |ИЗ
	               |	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.ВедомостиНаВыплатуЗарплаты КАК ТаблицаВедомостей
	               |		ПО Заявка.Ссылка = ТаблицаВедомостей.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(, ) КАК ДенежныеСредства
	               |		ПО (Заявка.Ссылка = ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств
	               |				ИЛИ ТаблицаВедомостей.Ведомость = ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств)
	               |ГДЕ
	               |	Заявка.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Заявка);

	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	КонецЕсли;
	
	Если Выборка.Статус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена Тогда
		Текст = НСтр("ru = 'Заявка на расходование денежных средств не утверждена'");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная
	   И Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить расходный кассовый ордер на основании документа %1'"),
			Заявка
		);
		ВызватьИсключение Текст;
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта
	   И Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить эквайринговую операцию на основании документа %1'"),
			Заявка
		);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		ДанныеЗаполнения.Вставить("Выдать", ФизическиеЛица.ФамилияИнициалыФизЛица(Выборка.ПодотчетноеЛицоНаименование));
	ИначеЕсли Не ПустаяСтрока(Выборка.КонтрагентНаименованиеПолное) Тогда
		ДанныеЗаполнения.Вставить("Выдать", Выборка.КонтрагентНаименованиеПолное);
	Иначе
		ДанныеЗаполнения.Вставить("Выдать", Выборка.КонтрагентНаименование);
	КонецЕсли;
	
	// Заполним кассу, банковский счет или эквайринговый терминал.
	ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения);
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
		Выборка.ВалютаЗаявки,
		?(ЗначениеЗаполнено(ВалютаДокумента), ВалютаДокумента, ДанныеЗаполнения.Валюта),
		ТекущаяДата()
	);
	
	МассивВедомостей = Новый Массив;
	Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		МассивВедомостей.Добавить(Выборка.Ведомость);
		Пока Выборка.Следующий() Цикл
			МассивВедомостей.Добавить(Выборка.Ведомость);
			ДанныеЗаполнения.СуммаДокумента = ДанныеЗаполнения.СуммаДокумента + Выборка.СуммаДокумента;
		КонецЦикла;
	КонецЕсли;
	
	Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям
	 И ТаблицаВедомостей <> Неопределено Тогда
		ТабличнаяЧасть = ТаблицаВедомостей;
	Иначе
		ТабличнаяЧасть = РасшифровкаПлатежа;
	КонецЕсли;
	
	// Заполним табличную часть документа.
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Аналитика.Партнер КАК Партнер,
	|	ДенежныеСредства.Заказ КАК Заказ,
	|	ДенежныеСредства.СтатьяРасходов КАК СтатьяРасходов,
	|	ДенежныеСредства.АналитикаРасходов КАК АналитикаРасходов,
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств КАК Ведомость,
	|	&Подразделение КАК Подразделение,
	|	ДенежныеСредства.СтатьяДвиженияДенежныхСредств,
	|	ДенежныеСредства.ДоговорКредитаДепозита,
	|	&ВалютаЗаявки КАК ВалютаВзаиморасчетов,
	|	СУММА(
	|		ВЫБОР КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			-ДенежныеСредства.Сумма
	|		ИНАЧЕ
	|			ДенежныеСредства.Сумма
	|		КОНЕЦ
	|	) * &КоэффициентПересчетаВВалютуДокумента
	|	КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате КАК ДенежныеСредства
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		ДенежныеСредства.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|ГДЕ
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|	ИЛИ ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств В (&МассивВедомостей)
	|
	|СГРУППИРОВАТЬ ПО
	|	Аналитика.Партнер,
	|	ДенежныеСредства.Заказ,
	|	ДенежныеСредства.СтатьяРасходов,
	|	ДенежныеСредства.АналитикаРасходов,
	|	ДенежныеСредства.ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДенежныеСредства.СтатьяДвиженияДенежныхСредств,
	|	ДенежныеСредства.ДоговорКредитаДепозита
	|";
	Запрос.УстановитьПараметр("Подразделение", ДанныеЗаполнения.Подразделение);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуДокумента", Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов);
	Запрос.УстановитьПараметр("МассивВедомостей", МассивВедомостей);
	Запрос.УстановитьПараметр("ВалютаЗаявки", ДанныеЗаполнения.ВалютаЗаявки);
	
	ТабличнаяЧасть.Очистить();
	    
	Выборка = Запрос.Выполнить().Выбрать();
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента * Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Сумма > 0 Тогда
			Сумма = Мин(Выборка.Сумма, СуммаДокумента);
			СуммаДокумента = СуммаДокумента - Сумма;
			Если Сумма > 0 Тогда
				НоваяСтрока = ТабличнаяЧасть.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				НоваяСтрока.Сумма = Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("СуммаДокумента", ТабличнаяЧасть.Итог("Сумма"));
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
	 И ДанныеЗаполнения.КурсКонвертации <> 0 Тогда
		ДанныеЗаполнения.Вставить("СуммаПослеКонвертации", ДанныеЗаполнения.СуммаДокумента / ДанныеЗаполнения.КурсКонвертации);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоЗаявкеНаРасходованиеДенежныхСредств()

// Процедура заполняет документ на основании распоряжения на перемещение денежных средств.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств - Документ - основание
//	ДокументОбъект - Текущий документ
//	ДанныеЗаполнения - Структура - Данные заполнения
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть "Расшифровка платежа" документа
//
Процедура ЗаполнитьДокументПоРаспоряжениюНаПеремещениеДенежныхСредств(
	Знач ДокументОснование,
	ДокументОбъект,
	ДанныеЗаполнения,
	РасшифровкаПлатежа = Неопределено
	) Экспорт
	
	// Заполним данные шапки документа.
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК РаспоряжениеНаПеремещениеДенежныхСредств,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Статус КАК Статус,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка) ТОГДА
	|		ДанныеДокумента.КассаПолучатель
	|	ИНАЧЕ
	|		ДанныеДокумента.Касса
	|	КОНЕЦ КАК Касса,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу) ТОГДА
	|		ДанныеДокумента.КассаПолучатель
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК КассаПолучатель,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк) ТОГДА
	|		ДанныеДокумента.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		ДанныеДокумента.БанковскийСчет
	|	КОНЕЦ КАК БанковскийСчет,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет) ТОГДА
	|		ДанныеДокумента.БанковскийСчетПолучатель
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК БанковскийСчетПолучатель,
	|
	|	ДанныеДокумента.НазначениеПлатежа КАК НазначениеПлатежа,
	|	(-ДенежныеСредства.СуммаОстаток) КАК СуммаДокумента
	|ИЗ
	|	Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК ДанныеДокумента
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
	|			ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка
	|		) КАК ДенежныеСредства
	|	ПО 
	|		Истина
 	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация В (&МассивОпераций)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	МассивОпераций = Новый Массив;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
		ПредставлениеДокумента = НСтр("ru = 'Приходный кассовый ордер'");
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
		ПредставлениеДокумента = НСтр("ru = 'Расходный кассовый ордер'");
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
		ПредставлениеДокумента = НСтр("ru = 'Списание безналичных ДС'");
		
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивОпераций", МассивОпераций);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить %1 на основании документа %2'"),
			ПредставлениеДокумента,
			ДокументОснование
		);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		Если Выборка.Статус <> Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.Утверждено Тогда
			Текст = НСтр("ru = 'Распоряжение на перемещение денежных средств не утверждено'");
			ВызватьИсключение Текст;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоРаспоряжениюНаПеремещениеДенежныхСредств()

// Процедура заполняет хозяйственную операцию в шапке документа.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	ДанныеЗаполнения - Структура
//
Процедура ЗаполнитьСтатьюДвиженияДенежныхСредств(ДокументОбъект, ДанныеЗаполнения, ХозяйственнаяОперация) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
	   И ДанныеЗаполнения.Свойство("СтатьяДвиженияДенежныхСредств") Тогда
		СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
	Иначе
		СтатьяДвиженияДенежныхСредств = ДокументОбъект.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		   И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация") Тогда
			ДанныеЗаполнения.Вставить("СтатьяДвиженияДенежныхСредств", ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ДанныеЗаполнения.ХозяйственнаяОперация));
		Иначе
			ДокументОбъект.СтатьяДвиженияДенежныхСредств = ЗначениеНастроекПовтИсп.ПолучитьСтатьюДвиженияДенежныхСредств(ХозяйственнаяОперация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтатьюДвиженияДенежныхСредств()

// Возвращает список команд контекстного меню для заполнения назначения платежа.
//
// Возвращаемое значение: СписокЗначений.
//
Функция ПолучитьСписокКомандЗаполненияНазначенияПлатежа() Экспорт

	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("ПоУмолчанию", "По умолчанию");
	СписокКоманд.Добавить("Сумма", "Сумма");
	
	СписокКомандВложенный = Новый СписокЗначений;
	СписокКомандВложенный.Добавить("НДС18", "в т.ч. НДС(18%)...");
	СписокКомандВложенный.Добавить("НДС10", "в т.ч. НДС(10%)...");
	
	СписокКоманд.Добавить(СписокКомандВложенный, "НДС");
	
	Возврат СписокКоманд;

КонецФункции // ПолучитьСписокКомандЗаполненияНазначенияПлатежа() 

// Функция формирует текст строки "В том числе НДС" платежа.
//
// Параметры:
// Возвращаемое значение:
//	СуммаДокумента - Число - Общая сумма документа
//	МассивДокументов - Массив - Массив документов для определения суммы НДС
//	ДобавлятьТекстВТомЧисле - Булево - Добавлять строку "В т.ч." в текст платежа
//  ОплатаОтКлиента - Булево - Признак оплаты от клиента
//
// Возвращаемое значение:
//	Строка - Текст суммы НДС платежа
//
Функция ТекстСуммаНДСПлатежа(СуммаДокумента, МассивДокументов, ДобавлятьТекстВТомЧисле, ОплатаОтКлиента = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсходнаяТаблица.Документ КАК Документ
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ИсходнаяТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(Товары.Сумма) КАК Сумма
	|ИЗ (
	|	ВЫБРАТЬ
	|		Товары.СтавкаНДС КАК СтавкаНДС,
	|		(
	|		Товары.Сумма +
	|		ВЫБОР КОГДА Товары.Ссылка.ЦенаВключаетНДС ТОГДА
	|			0
	|		ИНАЧЕ
	|			Товары.СуммаНДС
	|		КОНЕЦ
	|		) КАК Сумма
	|	ИЗ
	|		Документ.ЗаказПоставщику.Товары КАК Товары
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО
	|			Товары.Ссылка = ТаблицаДокументов.Документ
	|	ГДЕ
	|		Не Товары.Отменено
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Товары.СтавкаНДС КАК СтавкаНДС,
	|		(
	|		Товары.Сумма +
	|		ВЫБОР КОГДА Товары.Ссылка.ЦенаВключаетНДС ТОГДА
	|			0
	|		ИНАЧЕ
	|			Товары.СуммаНДС
	|		КОНЕЦ
	|		) КАК Сумма
	|	ИЗ
	|		Документ.ЗаказКлиента.Товары КАК Товары
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО
	|			Товары.Ссылка = ТаблицаДокументов.Документ
	|	ГДЕ
	|		Не Товары.Отменено
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Товары.СтавкаНДС КАК СтавкаНДС,
	|		(
	|		Товары.Сумма +
	|		ВЫБОР КОГДА Товары.Ссылка.ЦенаВключаетНДС ТОГДА
	|			0
	|		ИНАЧЕ
	|			Товары.СуммаНДС
	|		КОНЕЦ
	|		) КАК Сумма
	|	ИЗ
	|		Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК Товары
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО
	|			Товары.Ссылка = ТаблицаДокументов.Документ
	|	ГДЕ
	|		НЕ &ОплатаОтКлиента
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Товары.СтавкаНДС КАК СтавкаНДС,
	|		(
	|		Товары.Сумма +
	|		ВЫБОР КОГДА Товары.Ссылка.ЦенаВключаетНДС ТОГДА
	|			0
	|		ИНАЧЕ
	|			Товары.СуммаНДС
	|		КОНЕЦ
	|		) КАК Сумма
	|	ИЗ
	|		Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК Товары
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО
	|			Товары.Ссылка = ТаблицаДокументов.Документ
	|	ГДЕ
	|		Не (Товары.Отменено)
	|		И &ОплатаОтКлиента
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Товары.СтавкаНДС КАК СтавкаНДС,
	|		(
	|		Товары.Сумма +
	|		ВЫБОР КОГДА Товары.Ссылка.ЦенаВключаетНДС ТОГДА
	|			0
	|		ИНАЧЕ
	|			Товары.СуммаНДС
	|		КОНЕЦ
	|		) КАК Сумма
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК Товары
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО
	|			Товары.Ссылка = ТаблицаДокументов.Документ
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Товары.СтавкаНДС КАК СтавкаНДС,
	|		(
	|		Товары.Сумма +
	|		ВЫБОР КОГДА Товары.Ссылка.ЦенаВключаетНДС ТОГДА
	|			0
	|		ИНАЧЕ
	|			Товары.СуммаНДС
	|		КОНЕЦ
	|		) КАК Сумма
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг.Товары КАК Товары
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО
	|			Товары.Ссылка = ТаблицаДокументов.Документ
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Расходы.СтавкаНДС КАК СтавкаНДС,
	|		(
	|		Расходы.Сумма +
	|		ВЫБОР КОГДА Расходы.Ссылка.ЦенаВключаетНДС ТОГДА
	|			0
	|		ИНАЧЕ
	|			Расходы.СуммаНДС
	|		КОНЕЦ
	|		) КАК Сумма
	|	ИЗ
	|		Документ.ПоступлениеУслугПрочихАктивов.Расходы КАК Расходы
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО
	|			Расходы.Ссылка = ТаблицаДокументов.Документ
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Товары.СтавкаНДС КАК СтавкаНДС,
	|		Товары.СуммаСНДС КАК Сумма
	|	ИЗ
	|		Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК Товары
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО
	|			Товары.Ссылка = ТаблицаДокументов.Документ
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Товары.СтавкаНДС КАК СтавкаНДС,
	|		Товары.СуммаПродажи КАК Сумма
	|	ИЗ
	|		Документ.ОтчетКомитенту.Товары КАК Товары
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО
	|			Товары.Ссылка = ТаблицаДокументов.Документ
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Товары.СтавкаНДС КАК СтавкаНДС,
	|		Товары.СуммаСНДС КАК Сумма
	|	ИЗ
	|		Документ.ОтчетКомитентуОСписании.Товары КАК Товары
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО
	|			Товары.Ссылка = ТаблицаДокументов.Документ
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Товары.СтавкаНДС КАК СтавкаНДС,
	|		Товары.СуммаПродажи КАК Сумма
	|	ИЗ
	|		Документ.ОтчетПоКомиссииМеждуОрганизациями.Товары КАК Товары
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО
	|			Товары.Ссылка = ТаблицаДокументов.Документ
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеДокументов.СтавкаНДСВознаграждения КАК СтавкаНДС,
	|		ДанныеДокументов.СуммаВознаграждения КАК Сумма
	|	ИЗ
	|		Документ.ОтчетКомиссионера КАК ДанныеДокументов
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО
	|			ДанныеДокументов.Ссылка = ТаблицаДокументов.Документ
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеДокументов.СтавкаНДС КАК СтавкаНДС,
	|		ДанныеДокументов.СуммаСНДС КАК Сумма
	|	ИЗ
	|		Документ.РеализацияУслугПрочихАктивов.Доходы КАК ДанныеДокументов
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО
	|			ДанныеДокументов.Ссылка = ТаблицаДокументов.Документ
	|
	|	) КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.СтавкаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС
	|		
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	Общие
	|");
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Документ", Документы.ТипВсеСсылки());
	Для Сч = 1 По МассивДокументов.Количество() Цикл
		ТаблицаДокументов.Добавить();
	КонецЦикла;
	ТаблицаДокументов.ЗагрузитьКолонку(МассивДокументов, "Документ");
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);
	Запрос.УстановитьПараметр("ОплатаОтКлиента", ОплатаОтКлиента);
	
	ТаблицаНДС = Новый ТаблицаЗначений;
	ТаблицаНДС.Колонки.Добавить("СтавкаНДС");
	ТаблицаНДС.Колонки.Добавить("Сумма");
	ТаблицаНДС.Колонки.Добавить("СуммаНДС");
	
	СуммаВсего = 0;
	СуммаКРаспределению = СуммаДокумента;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда
			СуммаВсего = Выборка.Сумма;
		Иначе
			СтавкаНДСЧисло = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Выборка.СтавкаНДС) * 100;
			
			Если СтавкаНДСЧисло <> 0 Тогда
				НоваяСтрока = ТаблицаНДС.Добавить();
				НоваяСтрока.СтавкаНДС = Выборка.СтавкаНДС;
				НоваяСтрока.Сумма = ?(СуммаВсего <> 0, ОКР(СуммаКРаспределению * Выборка.Сумма / СуммаВсего, 2, 1), 0);
				НоваяСтрока.СуммаНДС = НоваяСтрока.Сумма * СтавкаНДСЧисло / (100 + СтавкаНДСЧисло);
				СуммаКРаспределению = СуммаКРаспределению - НоваяСтрока.Сумма;
			Иначе
				СуммаКРаспределению = СуммаКРаспределению - ?(СуммаВсего <> 0, ОКР(СуммаКРаспределению * Выборка.Сумма / СуммаВсего, 2, 1), 0);
			КонецЕсли;
				
			СуммаВсего = СуммаВсего - Выборка.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаНДС.Количество() > 0 Тогда
		
		ТекстНазначениеПлатежаНДС = "";
	
		Для Каждого СтрокаТаблицы Из ТаблицаНДС Цикл
			ТекстНазначениеПлатежаНДС = ТекстНазначениеПлатежаНДС
				+ ?(ПустаяСтрока(ТекстНазначениеПлатежаНДС), "", ", ")
				+ НСтр("ru = 'НДС'") + " (" + СтрокаТаблицы.СтавкаНДС + ") "
				+ Формат(СтрокаТаблицы.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
		КонецЦикла;
			
		Если ДобавлятьТекстВТомЧисле Тогда
			ТекстНазначениеПлатежаНДС = НСтр("ru = 'В т.ч. '") + ТекстНазначениеПлатежаНДС;
		КонецЕсли;
		
	Иначе
		ТекстНазначениеПлатежаНДС = НСтр("ru = 'Без налога (НДС)'");
	КонецЕсли;
	
	Возврат ТекстНазначениеПлатежаНДС;
	
КонецФункции // ТекстСуммаНДСПлатежа()

// Функция формирует текст назначения платежа, в соответствии с выбранным вариантом.
//
// Параметры: Объект - ДокументСсылка - Документ оплаты.
//			  Действие - Строка - Идентификатор варианта заполнения.
//
// Возвращаемое значение: Строка.
//
Функция ПолучитьТекстНазначенияПлатежа(Объект, Действие) Экспорт

	Если Действие = "СписокДокументов" Тогда
		
		ТекстНазначенияПлатежа = ПолучитьСписокДокументовДляНазначенияПлатежа(Объект);
		
	ИначеЕсли Действие = "НДС18" Тогда
		
		СуммаНДС = Окр(Объект.СуммаДокумента / (1 + 0.18) * 0.18, 2);
		ТекстНазначенияПлатежа = НСтр("ru='В т.ч. НДС (18%) '") + Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");

	ИначеЕсли Действие = "НДС10" Тогда
		
		СуммаНДС = Окр(Объект.СуммаДокумента / (1 + 0.1) * 0.1, 2);
		ТекстНазначенияПлатежа = НСтр("ru='В т.ч. НДС (10%) '") + Формат(СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");

	ИначеЕсли Действие = "БезНДС" Тогда
		
		ТекстНазначенияПлатежа = НСтр("ru='Без налога (НДС)'");

	КонецЕсли; 
	
	Возврат ТекстНазначенияПлатежа;

КонецФункции // ПолучитьТекстНазначенияПлатежа() 

////////////////////////////////////////////////////////////////////////////////
// Функции заполнения документов.

// Возвращает строку с перечислением документов из расшифровки платежа.
//
// Параметры: Объект - ДокументСсылка - Документ, содержащий расшифровку платежа.
//
// Возвращаемое значение: Строка.
//
Функция ПолучитьСписокДокументовДляНазначенияПлатежа(Объект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстНазначенияПлатежа = НСтр("ru='Оплата '"); 
	ПредставленияДокументов = ПолучитьПредставленияДокументов();

	РасшифровкаПлатежа = Объект.РасшифровкаПлатежа.Выгрузить(,"Заказ, Сумма");
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Документ", Новый ОписаниеТипов(Документы.ТипВсеСсылки(), "СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаДокументов.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Для Сч = 1 По РасшифровкаПлатежа.Количество() Цикл
		ТаблицаДокументов.Добавить();
	КонецЦикла;
	ТаблицаДокументов.ЗагрузитьКолонку(РасшифровкаПлатежа.ВыгрузитьКолонку("Заказ"), "Документ");
	ТаблицаДокументов.ЗагрузитьКолонку(РасшифровкаПлатежа.ВыгрузитьКолонку("Сумма"), "Сумма");
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.Документ КАК Документ,
	|	ИсходнаяТаблица.Сумма	 КАК Сумма
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ТаблицаДокументов КАК ИсходнаяТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	ТаблицаДокументов.Сумма						  КАК Сумма,
	|	&Валюта										  КАК Валюта
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	ТаблицаДокументов.Сумма						  КАК Сумма,
	|	&Валюта										  КАК Валюта
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	ТаблицаДокументов.Сумма						  КАК Сумма,
	|	&Валюта										  КАК Валюта
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	ТаблицаДокументов.Сумма						  КАК Сумма,
	|	&Валюта										  КАК Валюта
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	ТаблицаДокументов.Сумма						  КАК Сумма,
	|	&Валюта										  КАК Валюта
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	ТаблицаДокументов.Сумма						  КАК Сумма,
	|	&Валюта										  КАК Валюта
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	ТаблицаДокументов.Сумма						  КАК Сумма,
	|	&Валюта										  КАК Валюта
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	ТаблицаДокументов.Сумма						  КАК Сумма,
	|	&Валюта										  КАК Валюта
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	ТаблицаДокументов.Сумма						  КАК Сумма,
	|	&Валюта										  КАК Валюта
	|ИЗ
	|	Документ.ПоступлениеУслугПрочихАктивов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	ТаблицаДокументов.Сумма						  КАК Сумма,
	|	&Валюта										  КАК Валюта
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	ТаблицаДокументов.Сумма						  КАК Сумма,
	|	&Валюта										  КАК Валюта
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.Номер						  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	ТаблицаДокументов.Сумма						  КАК Сумма,
	|	&Валюта										  КАК Валюта
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка						  КАК Документ,
	|	ДанныеДокумента.Организация.Префикс			  КАК Префикс,
	|	ДанныеДокумента.НомерГТД					  КАК Номер,
	|	ДанныеДокумента.Дата						  КАК Дата,
	|	ТаблицаДокументов.Сумма						  КАК Сумма,
	|	&Валюта										  КАК Валюта
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ТаблицаДокументов.Документ = ДанныеДокумента.Ссылка
	|
	|");
	Запрос.УстановитьПараметр("Валюта", Объект.Валюта);
	Запрос.УстановитьПараметр("ТаблицаДокументов", ТаблицаДокументов);

	Выборка = Запрос.Выполнить().Выбрать();
	СуммаКРаспределению = Объект.РасшифровкаПлатежа.Итог("Сумма");
	ПервыйПроход = Истина;
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.Документ) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			ТекстНазначенияПлатежа = ТекстНазначенияПлатежа 
						 + ?(НЕ ПервыйПроход, ", ", "по ")
						 + ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Документ, "НаименованиеДляПечати")
						 + " " + Формат(Выборка.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")
						 + " " + ?(Выборка.Валюта = Константы.ВалютаРегламентированногоУчета.Получить(),
						 		   "руб.",
								   Выборка.Валюта.Наименование);
			
		Иначе
			
			ВидДокумента = "";
			ПредставленияДокументов.Свойство(Выборка.Документ.Метаданные().Имя, ВидДокумента);
			Если ЗначениеЗаполнено(ВидДокумента) Тогда
				ТекстНазначенияПлатежа = ТекстНазначенияПлатежа 
										 + ?(НЕ ПервыйПроход, ", ", "по ")
										 + ВидДокумента
										 + НСтр("ru=' №'") + ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Выборка.Номер, Ложь, Истина)
										 + НСтр("ru=' от '") + Формат(Выборка.Дата, "ДЛФ=D")
										 + " " + Формат(Выборка.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")
										 + " " + ?(Выборка.Валюта = Константы.ВалютаРегламентированногоУчета.Получить(),
										 		   "руб.",
												   Выборка.Валюта.Наименование);
			КонецЕсли;

		КонецЕсли; 
		
		ПервыйПроход = Ложь;
		СуммаКРаспределению = СуммаКРаспределению - Выборка.Сумма;
		
	КонецЦикла;
	
	Если СуммаКРаспределению > 0 Тогда
		ТекстНазначенияПлатежа = ТекстНазначенияПлатежа 
								 + ?(НЕ ПервыйПроход, ", ", "")
								 + НСтр("ru='без указания назначения:'")
								 + " " + Формат(СуммаКРаспределению, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=")
								 + " " + ?(Объект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить(),
									 	   "руб.",
										   Объект.Валюта.Наименование);
	КонецЕсли;
	
	Если Прав(ТекстНазначенияПлатежа, 1) <> "." Тогда
		ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + ".";
	КонецЕсли;
	
	ТекстСуммаНДС = ТекстСуммаНДСПлатежа(
		Объект.РасшифровкаПлатежа.Итог("Сумма"),
		РасшифровкаПлатежа.ВыгрузитьКолонку("Заказ"),
		Истина // ДобавлятьТекстВТомЧисле
	);
	ТекстНазначенияПлатежа = ТекстНазначенияПлатежа + Символы.ПС + ТекстСуммаНДС;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	
	Возврат ТекстНазначенияПлатежа;

КонецФункции // ПолучитьСписокДокументовДляНазначенияПлатежа() 

// Возвращает перечень документов с их синонимами для назначения платежа
//
// Возвращаемое значение: Структура, в ключах которой - имена документов, в значениях - синонимы.
//
Функция ПолучитьПредставленияДокументов()

	ВидыДокументовКонтрагента = Новый Структура;

	ВидыДокументовКонтрагента.Вставить("ЗаказКлиента", 						   "заказу");
	ВидыДокументовКонтрагента.Вставить("ЗаказПоставщику", 					   "заказу");
	ВидыДокументовКонтрагента.Вставить("ЗаявкаНаВозвратТоваровОтКлиента",	   "заявке на возврат товаров");
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",					   "отчету комитенту");
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",					   "отчету комитенту");
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОСписании",			   "отчету комитенту");
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациями",    "отчету комитенту");
	ВидыДокументовКонтрагента.Вставить("ПередачаТоваровМеждуОрганизациями",    "накладной");
	ВидыДокументовКонтрагента.Вставить("ПоступлениеТоваровУслуг",			   "накладной");
	ВидыДокументовКонтрагента.Вставить("ПоступлениеУслугПрочихАктивов",		   "акту");
	ВидыДокументовКонтрагента.Вставить("РеализацияТоваровУслуг", 			   "накладной");
	ВидыДокументовКонтрагента.Вставить("ТаможеннаяДекларацияИмпорт", 		   "декларации на товары");

	Возврат ВидыДокументовКонтрагента;
	
КонецФункции // ПолучитьПредставленияДокументов()

// Процедура заполняет назначения платежа.
//
// Параметры:
//	Объект - ДокументОбъект или ДанныеФормы - Текущий документ
//
Процедура ЗаполнитьТекстНазначенияПлатежа(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПозицияСуммы = Найти(Объект.НазначениеПлатежа, "Сумма");
	
	Если ПозицияСуммы > 0 Тогда
		ТекстНазначениеПлатежа = Лев(Объект.НазначениеПлатежа, ПозицияСуммы - 2);
	Иначе
		ТекстНазначениеПлатежа = Объект.НазначениеПлатежа;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстНазначениеПлатежа)
	   И ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
		ТекстНазначениеПлатежа = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(Объект.БанковскийСчетКонтрагента).ТекстНазначения;
	КонецЕсли;
	
	ТекстСумма = "Сумма " + Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	
	Если (ТипЗнч(Объект) <> Тип("ДанныеФормыСтруктура") И НЕ Объект.ПеречислениеВБюджет)
		ИЛИ НЕ Объект.Свойство("ПеречислениеВБюджет")
		ИЛИ НЕ Объект.ПеречислениеВБюджет Тогда
			
		МассивЗаказов = Объект.РасшифровкаПлатежа.Выгрузить(,"Заказ").ВыгрузитьКолонку("Заказ");
		
		Если (ТипЗнч(Объект) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
				И ЗначениеЗаполнено(Объект.РаспоряжениеНаПеремещениеДенежныхСредств))
			ИЛИ ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура")
				И Объект.Свойство("РаспоряжениеНаПеремещениеДенежныхСредств")
				И ЗначениеЗаполнено(Объект.РаспоряжениеНаПеремещениеДенежныхСредств) Тогда

		КонецЕсли;
		
		ТекстСуммаНДС = ТекстСуммаНДСПлатежа(
			Объект.СуммаДокумента,
			МассивЗаказов,
			Истина // ДобавлятьТекстВТомЧисле
		);
	Иначе
		ТекстСуммаНДС = "";
	КонецЕсли;
	
	Объект.НазначениеПлатежа = ТекстНазначениеПлатежа 
		+ ?(Не ПустаяСтрока(ТекстНазначениеПлатежа), Символы.ПС, "")
		+ ТекстСумма
		+ ?(Не ПустаяСтрока(ТекстСуммаНДС), Символы.ПС + ТекстСуммаНДС, "");
		
КонецПроцедуры // ЗаполнитьТекстНазначенияПлатежа()

// Процедура устаналивает статус документов.
//
// Параметры:
//	Запрос - Запрос по документам, для которых необходимо установить статус
//	Статус - ПеречислениеСсылка - Устанавливаемый статус
//	КоличествоОбработанных - Число - Количество документов, для которых установлен статус
//
Процедура УстановитьСтатусДокументов(Запрос, Статус, КоличествоОбработанных) Экспорт 

	НачатьТранзакцию();

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначенияУТ.ЗаблокироватьДокументДляРедактирования(
			Выборка.Ссылка,
			Истина // ОтменятьТранзакцию
		);

		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Статус = Статус;
		
		Если (ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
		 ИЛИ ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена)
			И Не ЗначениеЗаполнено(ДокументОбъект.ДатаПлатежа)
			И ЗначениеЗаполнено(ДокументОбъект.ЖелательнаяДатаПлатежа) Тогда
			
			ДокументОбъект.ДатаПлатежа = Макс(ДокументОбъект.Дата, ДокументОбъект.ЖелательнаяДатаПлатежа);
			
		КонецЕсли;
		
		Если Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена Тогда
			ДокументОбъект.КтоРешил = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
		НетОшибок = ?(ДокументОбъект.Проведен, ДокументОбъект.ПроверитьЗаполнение(), Истина);
		
		Если НетОшибок Тогда

			Попытка
				ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				КоличествоОбработанных = КоличествоОбработанных + 1;
			Исключение
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось записать %1. %2'"),
					Выборка.Ссылка,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
				);	
				ОтменитьТранзакцию();
				ВызватьИсключение ТекстОшибки;
			КонецПопытки
			
		КонецЕсли;

	КонецЦикла;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры // УстановитьСтатусДокументов()

////////////////////////////////////////////////////////////////////////////////
// Процедуры проверки заполнения документов.

// Функция формирует запрос по табличной части "Расшифровка платежа".
//
// Параметры:
//	ДокументОбъект - Документ
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//
// Возвращаемое значение:
//	Запрос - запрос по табличной части
//
Функция ЗапросПоТабличнойЧастиРасшифровкаПлатежа(ДокументОбъект, ХозяйственнаяОперация)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|
	|	ВЫБОР КОГДА ТаблицаДокумента.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка)
	|		И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		И &ИспользоватьСчетаНаОплатуКлиентам
	|	ТОГДА
	|		Истина
	|	ИНАЧЕ
	|		Ложь
	|	КОНЕЦ КАК ПроверкаСчетаНаОплату
	|
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ВЫБОР
	|	КОГДА ТаблицаДокумента.Заказ ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями ТОГДА
	|		ТаблицаДокумента.Заказ.Организация НЕ В (&Организация) И ТаблицаДокумента.Заказ.ОрганизацияПолучатель НЕ В (&Организация)
	|	КОГДА ТаблицаДокумента.Заказ ССЫЛКА Документ.ОтчетПоКомиссииМеждуОрганизациями ТОГДА
	|		ТаблицаДокумента.Заказ.Организация НЕ В (&Организация)
	|		 И ТаблицаДокумента.Заказ.Комиссионер НЕ В (&Организация)
	|	КОГДА ТаблицаДокумента.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка)
	|		И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента)
	|		И &ИспользоватьСчетаНаОплатуКлиентам
	|	ТОГДА
	|		ВЫБОР КОГДА ТаблицаДокумента.СчетНаОплату.Организация ЕСТЬ NULL ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ТаблицаДокумента.СчетНаОплату.Организация НЕ В(&Организация)
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ВЫБОР КОГДА ТаблицаДокумента.Заказ.Организация ЕСТЬ NULL ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ТаблицаДокумента.Заказ.Организация НЕ В(&Организация)
	|		КОНЕЦ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|;
	|");
	
	ТаблицаДокумента = ДокументОбъект.РасшифровкаПлатежа.Выгрузить();
	Если ТаблицаДокумента.Колонки.Найти("СчетНаОплату") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуКлиенту"));
	КонецЕсли;
	КолонкаЗаказИзДокумента = ТаблицаДокумента.Колонки.Найти("Заказ");
	КолонкаЗаказИзДокумента.Имя = "ЗаказИзДокумента";
	МассивДобавляемыхТипов = Новый Массив;
	МассивДобавляемыхТипов.Добавить(Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями"));
	МассивДобавляемыхТипов.Добавить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"));
	ТаблицаДокумента.Колонки.Добавить("Заказ", Новый ОписаниеТипов(КолонкаЗаказИзДокумента.ТипЗначения, МассивДобавляемыхТипов));
	ТаблицаДокумента.ЗагрузитьКолонку(ТаблицаДокумента.ВыгрузитьКолонку(КолонкаЗаказИзДокумента), "Заказ");
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ИспользоватьСчетаНаОплатуКлиентам", ПолучитьФункциональнуюОпцию("ИспользоватьСчетаНаОплатуКлиентам"));
	
	ДоступныеОрганизации = Новый Массив;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		ЗапросПоДоступнымОрганизациям = Новый Запрос("ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = &Организация
		|	И (Организации.ДопускаютсяВзаиморасчетыСКлиентамиЧерезГоловнуюОрганизацию
		|				И &ЭтоРасчетыСКлиентами
		|			ИЛИ Организации.ДопускаютсяВзаиморасчетыСПоставщикамиЧерезГоловнуюОрганизацию
		|				И НЕ &ЭтоРасчетыСКлиентами)");
		ЗапросПоДоступнымОрганизациям.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
			ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
			ЭтоРасчетыСКлиентами = Истина;
		Иначе
			ЭтоРасчетыСКлиентами = Ложь;
		КонецЕсли;
		
		ЗапросПоДоступнымОрганизациям.УстановитьПараметр("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
		
		ДоступныеОрганизации = ЗапросПоДоступнымОрганизациям.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	ДоступныеОрганизации.Добавить(ДокументОбъект.Организация);
	
	Запрос.УстановитьПараметр("Организация", ДоступныеОрганизации);
	
	Возврат Запрос;
	
КонецФункции // ЗапросПоТабличнойЧастиРасшифровкаПлатежа()
////////////////////////////////////////////////////////////////////////////////
// Процедуры проверки заполнения документов.

// Процедура проверяет заполнение табличной части "Расшифровка платежа".
//
// Параметры:
//	ДокументОбъект - Документ
//	СуммаДокумента - Число - Общая сумма документа
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьЗаполнениеРасшифровкиПлатежа(
	ДокументОбъект,
	СуммаДокумента,
	ХозяйственнаяОперация,
	Отказ
	) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	МассивНепроверяемыхОпераций = Новый Массив;
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту);
	
	Если МассивНепроверяемыхОпераций.Найти(ХозяйственнаяОперация) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим соответствие сумм документа и табличной части.
	Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0
	   И СуммаДокумента <> ДокументОбъект.РасшифровкаПлатежа.Итог("Сумма")
	Тогда
	    Текст = НСтр("ru = 'Сумма по строкам в табличной части должна равняться сумме документа'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"РасшифровкаПлатежа[0].Сумма",
			,
			Отказ
		);
	КонецЕсли;
	
	// Проверим соответствие организации в шапке документа и в табличной части.
	Запрос = ЗапросПоТабличнойЧастиРасшифровкаПлатежа(ДокументОбъект, ХозяйственнаяОперация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.ПроверкаСчетаНаОплату Тогда
			ТекстДокумент = НСтр("ru = 'счете на оплату'");
			ИмяПоля = "СчетНаОПлату";
		Иначе
			ТекстДокумент = НСтр("ru = 'заказе'");
			ИмяПоля = "Заказ";
		КонецЕсли;
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Организация в %1 в строке %2 списка ""Расшифровка платежа"" не соответствует организации документа %3'"),
			ТекстДокумент,
			Выборка.НомерСтроки,
			ДокументОбъект.Организация
			);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			ДокументОбъект,
			"РасшифровкаПлатежа[" + (Выборка.НомерСтроки - 1) + "]." + ИмяПоля,
			,
			Отказ
		);
	
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеРасшифровкиПлатежа()

// Процедура проверки заявки на расходование денежных средств, указанной в документе.
//
// Параметры:
//	ДокументОбъект - Документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьЗаявкуНаРасходованиеДенежныхСредств(
	ДокументОбъект,
	Отказ
	) Экспорт
	
	МассивНепроверяемыхОпераций = Новый Массив;
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	МассивНепроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеДенежныхСредств")
		И МассивНепроверяемыхОпераций.Найти(ДокументОбъект.ХозяйственнаяОперация) = Неопределено
		И ЗначениеЗаполнено(ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
	
		Реквизиты = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолучитьРеквизитыЗаявки(ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств);
		Если Реквизиты.Организация <> ДокументОбъект.Организация Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Организация в заявке не соответствует организации документа %1'"),
				ДокументОбъект.Организация
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"ЗаявкаНаРасходованиеДенежныхСредств",
				,
				Отказ
			);
			
		КонецЕсли;
		
		Если Реквизиты.Статус <> Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена Тогда
			
			Текст = НСтр("ru = 'Заявка на расходование денежных средств не утверждена'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"ЗаявкаНаРасходованиеДенежныхСредств",
				,
				Отказ
			);
			
		КонецЕсли;
		
		//Если Реквизиты.Валюта <> ДокументОбъект.Валюта Тогда
		//	
		//	Текст = НСтр("ru = 'Валюта заявки не соответствует валюте документа'");
		//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		//		Текст,
		//		ДокументОбъект,
		//		"ЗаявкаНаРасходованиеДенежныхСредств",
		//		,
		//		Отказ
		//	);
		//	
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаявкуНаРасходованиеДенежныхСредств()

// Процедура проверки распоряжения на перемещение денежных средств, указанного в документе.
//
// Параметры:
//	ДокументОбъект - Документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьРаспоряжениеНаПеремещениеДенежныхСредств(
	ДокументОбъект,
	Отказ
	) Экспорт
	
	МассивПроверяемыхОпераций = Новый Массив;
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	МассивПроверяемыхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеДенежныхСредств")
	   И МассивПроверяемыхОпераций.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.РаспоряжениеНаПеремещениеДенежныхСредств)
	Тогда
	
		Реквизиты = Документы.РаспоряжениеНаПеремещениеДенежныхСредств.ПолучитьРеквизитыДокумента(ДокументОбъект.РаспоряжениеНаПеремещениеДенежныхСредств);
		Если Реквизиты.Организация <> ДокументОбъект.Организация Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Организация в распоряжении не соответствует организации документа %1'"),
				ДокументОбъект.Организация
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ
			);
			
		КонецЕсли;
		
		Если Реквизиты.Статус <> Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.Утверждено Тогда
			
			Текст = НСтр("ru = 'Распоряжение на перемещение денежных средств не утверждено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ
			);
			
		КонецЕсли;
		
		Если Реквизиты.Валюта <> ДокументОбъект.Валюта Тогда
			
			Текст = НСтр("ru = 'Валюта распоряжения не соответствует валюте документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"РаспоряжениеНаПеремещениеДенежныхСредств",
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьРаспоряжениеНаПеремещениеДенежныхСредств()

// Процедура проверяет кассу получателя, указанную в документе.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьКассуПолучателя(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.КассаПолучатель)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка
		   И ЗначениеЗаполнено(ДокументОбъект.Касса)
		   И ДокументОбъект.Касса = ДокументОбъект.КассаПолучатель Тогда
		   
			Текст = НСтр("ru = 'Одна и та же касса не может являться отправителем и получателем одновременно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаПолучатель",
				,
				Отказ
			);
		Иначе 
		
			РеквизитыКассы = Справочники.Кассы.ПолучитьРеквизитыКассы(ДокументОбъект.КассаПолучатель);
			
			Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
			 И ДокументОбъект.Организация <> РеквизитыКассы.Организация Тогда
				Текст = НСтр("ru = 'Организация кассы получателя не соответствует организации документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ
				);
			КонецЕсли;
			
			Если ДокументОбъект.Валюта <> РеквизитыКассы.Валюта Тогда
				Текст = НСтр("ru = 'Валюта кассы получателя не соответствует валюте документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ
				);
			КонецЕсли;
			
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
			 И ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
			 	
			 	Запрос = Новый Запрос("
			 	|ВЫБРАТЬ
			 	|	ПолучателиПлатежейПриПеремещенииДС.ПолучательПлатежа КАК КассаПолучатель
			 	|ИЗ
			 	|	Справочник.Кассы.ПолучателиПлатежейПриПеремещенииДС КАК ПолучателиПлатежейПриПеремещенииДС
			 	|ГДЕ
			 	|	ПолучателиПлатежейПриПеремещенииДС.Ссылка = &Касса");
			 	Запрос.УстановитьПараметр("Касса", ДокументОбъект.Касса);
				
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ РезультатЗапроса.Пустой()
				 И РезультатЗапроса.Выгрузить().Найти(ДокументОбъект.КассаПолучатель) = Неопределено Тогда
					Текст = НСтр("ru = 'Касса получатель недоступна для перемещения денежных средств из кассы документа'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						Текст,
						ДокументОбъект,
						"КассаПолучатель",
						,
						Отказ
					);
				КонецЕсли; 
			
			КонецЕсли;
			
			// Проверка взаимосвязанности организации кассы получателя с организацией кассы отправителя по организационной структуре
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Организация) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
					
			ИначеЕсли ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ДокументОбъект.Организация, РеквизитыКассы.Организация) Тогда
				
				Текст = НСтр("ru='Организация кассы получателя не должна быть взаимосвязана с организацией кассы отправителя по организационной структуре.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуПолучателя()

// Процедура проверяет соответствие кассы получателя валюте и организации документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	Валюта - СправочникСсылка.Валюты - Валюта документа
//
Процедура ПроверитьИОчиститьКассуПолучателя(Объект, Валюта) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(Объект.КассаПолучатель)
	   И ЗначениеЗаполнено(Объект.Организация)
	Тогда
		
		РеквизитыКассы = Справочники.Кассы.ПолучитьРеквизитыКассы(Объект.КассаПолучатель);
			
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
			Если Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Объект.Организация, РеквизитыКассы.Организация) Тогда
				Объект.КассаПолучатель = Неопределено;
			КонецЕсли;
			
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
			Если Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Объект.Организация, РеквизитыКассы.Организация) Тогда
				Объект.КассаПолучатель = Неопределено;
			КонецЕсли;
			
		ИначеЕсли Объект.Организация <> РеквизитыКассы.Организация Тогда
			Объект.КассаПолучатель = Неопределено;
		КонецЕсли;
			
		Если Валюта <> РеквизитыКассы.Валюта Тогда
			Объект.КассаПолучатель = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуПолучателя()

// Процедура проверяет кассу ККМ, указанную в документе.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьКассуККМ(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.КассаККМ)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		РеквизитыКассыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(ДокументОбъект.КассаККМ);
		Если ДокументОбъект.Организация <> РеквизитыКассыККМ.Организация Тогда
			Текст = НСтр("ru = 'Организация кассы ККМ не соответствует организации документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаККМ",
				,
				Отказ
			);
		КонецЕсли;
		Если ДокументОбъект.Валюта <> РеквизитыКассыККМ.Валюта Тогда
			Текст = НСтр("ru = 'Валюта кассы ККМ не соответствует валюте документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"КассаККМ",
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКассуККМ()

// Процедура проверяет банковский счет получатель, указанный в документе.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьБанковскийСчетПолучатель(ДокументОбъект, Отказ) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(ДокументОбъект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетПолучатель)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
		   И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет)
		   И ДокументОбъект.БанковскийСчет = ДокументОбъект.БанковскийСчетПолучатель Тогда
		   
			Текст = НСтр("ru = 'Один и тот же банковский счет не может являться отправителем и получателем одновременно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"БанковскийСчетПолучатель",
				,
				Отказ
			);
		Иначе
			
			РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ДокументОбъект.БанковскийСчетПолучатель);
			
			Если ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				И ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
			 И ДокументОбъект.Организация <> РеквизитыСчета.Организация Тогда
				Текст = НСтр("ru = 'Организация счета получателя не соответствует организации документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"БанковскийСчетПолучатель",
					,
					Отказ
				);
			КонецЕсли;
			
			Если ДокументОбъект.Валюта <> РеквизитыСчета.Валюта Тогда
				Текст = НСтр("ru = 'Валюта счета получателя не соответствует валюте документа'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"БанковскийСчетПолучатель",
					,
					Отказ
				);
			КонецЕсли;
			
			// Проверка взаимосвязанности организации счета получателя с организацией кассы отправителя по организационной структуре
			Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ДокументОбъект.Организация, РеквизитыСчета.Организация) Тогда
				
				Текст = НСтр("ru='Организация счета получателя должна быть взаимосвязана с организацией счета отправителя по организационной структуре.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
					
			ИначеЕсли ДокументОбъект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
				И Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(ДокументОбъект.Организация, РеквизитыСчета.Организация) Тогда
				
				Текст = НСтр("ru='Организация счета получателя не должна быть взаимосвязана с организацией счета отправителя по организационной структуре.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					Текст,
					ДокументОбъект,
					"КассаПолучатель",
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьБанковскийСчетПолучатель()

// Процедура проверяет банковский счет контрагента, указанный в документе.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	МассивНепроверяемыхРеквизитов - Массив - Реквизиты, не используемые для операции документа
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьБанковскийСчетКонтрагента(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ) Экспорт
	
	Если МассивНепроверяемыхРеквизитов.Найти("БанковскийСчетКонтрагента") = Неопределено
	   И ЗначениеЗаполнено(ДокументОбъект.БанковскийСчетКонтрагента)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация)
	Тогда
		
		РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(ДокументОбъект.БанковскийСчетКонтрагента);
			
		Если ДокументОбъект.Валюта <> РеквизитыСчета.Валюта Тогда
			Текст = НСтр("ru = 'Валюта банковского счета не соответствует валюте документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"БанковскийСчетКонтрагента",
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьБанковскийСчетКонтрагента()

// Процедура проверяет соответствие банковского счета получателя валюте и организации документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	Валюта - СправочникСсылка.Валюты - Валюта документа
//
Процедура ПроверитьИОчиститьБанковскийСчетПолучатель(Объект, Валюта) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Массив.Добавить(Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	
	Если Массив.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
	   И ЗначениеЗаполнено(Объект.БанковскийСчетПолучатель)
	   И ЗначениеЗаполнено(Объект.Организация)
	Тогда
		
		РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(Объект.БанковскийСчетПолучатель);
			
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
			Если Не Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Объект.Организация, РеквизитыСчета.Организация) Тогда
				Объект.БанковскийСчетПолучатель = Неопределено;
			КонецЕсли;
			
		ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
			Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
			Если Справочники.Организации.ОрганизацииВзаимосвязаныПоОрганизациционнойСтруктуре(Объект.Организация, РеквизитыСчета.Организация) Тогда
				Объект.БанковскийСчетПолучатель = Неопределено;
			КонецЕсли;
			
		ИначеЕсли Объект.Организация <> РеквизитыСчета.Организация Тогда
			Объект.БанковскийСчетПолучатель = Неопределено;
		КонецЕсли;
			
		Если Валюта <> РеквизитыСчета.Валюта Тогда
			Объект.БанковскийСчетПолучатель = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьИОчиститьБанковскийСчетПолучатель()

// Процедура проверяет авансовый отчет, указанный в документе.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьАвансовыйОтчет(ДокументОбъект, Отказ) Экспорт
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
	   И ЗначениеЗаполнено(ДокументОбъект.Валюта)
	   И ЗначениеЗаполнено(ДокументОбъект.АвансовыйОтчет)
	Тогда
		
		Реквизиты = Документы.АвансовыйОтчет.ПолучитьРеквизитыДокумента(ДокументОбъект.АвансовыйОтчет);
		Если ДокументОбъект.Организация <> Реквизиты.Организация Тогда
			Текст = НСтр("ru = 'Организация авансового отчета не соответствует организации документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"АвансовыйОтчет",
				,
				Отказ
			);
		КонецЕсли;
		Если ДокументОбъект.Валюта <> Реквизиты.Валюта Тогда
			Текст = НСтр("ru = 'Валюта авансового отчета не соответствует валюте документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"АвансовыйОтчет",
				,
				Отказ
			);
		КонецЕсли;
		Если ДокументОбъект.ПодотчетноеЛицо <> Реквизиты.ПодотчетноеЛицо Тогда
			Текст = НСтр("ru = 'Подотчетное лицо авансового отчета не соответствует документу'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"АвансовыйОтчет",
				,
				Отказ
			);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьАвансовыйОтчет()

// Процедура проверяет валюту конвертации, указанную в документе.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьВалютуКонвертации(ДокументОбъект, Отказ) Экспорт
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
	   И ЗначениеЗаполнено(ДокументОбъект.Валюта)
	   И ЗначениеЗаполнено(ДокументОбъект.ВалютаКонвертации)
	Тогда
		
		Если ДокументОбъект.Валюта = ДокументОбъект.ВалютаКонвертации Тогда
		   
			Текст = НСтр("ru = 'Валюта конвертации должна отличаться от валюты документа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"ВалютаКонвертации",
				,
				Отказ
			);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует запрос по документам, которые уже проведены банком.
//
Функция ЗапросПоДокументамПроведенныеБанком(МассивДокументов, ЭтоВходящиеПлатежи, ДокументСсылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документы.ПлатежныйДокумент КАК ПлатежныйДокумент,
	|	Документы.Выписка КАК Выписка
	|ИЗ (
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка КАК ПлатежныйДокумент,
	|		ВходящиеПлатежи.Ссылка КАК Выписка
	|	ИЗ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.ВыпискаПоРасчетномуСчету.ВходящиеПлатежи КАК ВходящиеПлатежи
	|		ПО
	|			ДанныеДокумента.Ссылка = ВходящиеПлатежи.ПлатежныйДокумент
	|			И ВходящиеПлатежи.Ссылка.Проведен
	|			И ВходящиеПлатежи.Ссылка <> &Ссылка
	|			И Не ВходящиеПлатежи.Ссылка.ПометкаУдаления
	|
	|	ГДЕ
	|		&ЭтоВходящиеПлатежи
	|		И ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка КАК ПлатежныйДокумент,
	|		ИсходящиеПлатежи.Ссылка КАК Выписка
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.ВыпискаПоРасчетномуСчету.ВходящиеПлатежи КАК ИсходящиеПлатежи
	|		ПО
	|			ДанныеДокумента.Ссылка = ИсходящиеПлатежи.ПлатежныйДокумент
	|			И ИсходящиеПлатежи.Ссылка.Проведен
	|			И ИсходящиеПлатежи.Ссылка <> &Ссылка
	|			И Не ИсходящиеПлатежи.Ссылка.ПометкаУдаления
	|
	|	ГДЕ
	|		&ЭтоВходящиеПлатежи
	|		И ДанныеДокумента.Ссылка В (&МассивДокументов)
	|		И ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет),
	|		 	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		 	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
	|		)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка КАК ПлатежныйДокумент,
	|		ИсходящиеПлатежи.Ссылка КАК Выписка
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.ВыпискаПоРасчетномуСчету.ИсходящиеПлатежи КАК ИсходящиеПлатежи
	|		ПО
	|			ДанныеДокумента.Ссылка = ИсходящиеПлатежи.ПлатежныйДокумент
	|			И ИсходящиеПлатежи.Ссылка.Проведен
	|			И ИсходящиеПлатежи.Ссылка <> &Ссылка
	|			И Не ИсходящиеПлатежи.Ссылка.ПометкаУдаления
	|
	|	ГДЕ
	|		Не &ЭтоВходящиеПлатежи
	|		И ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка КАК ПлатежныйДокумент,
	|		ВходящиеПлатежи.Ссылка КАК Выписка
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.ВыпискаПоРасчетномуСчету.ВходящиеПлатежи КАК ВходящиеПлатежи
	|		ПО
	|			ДанныеДокумента.Ссылка = ВходящиеПлатежи.ПлатежныйДокумент
	|			И ВходящиеПлатежи.Ссылка.Проведен
	|			И ВходящиеПлатежи.Ссылка <> &Ссылка
	|			И Не ВходящиеПлатежи.Ссылка.ПометкаУдаления
	|
	|	ГДЕ
	|		&ЭтоВходящиеПлатежи
	|		И ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка КАК ПлатежныйДокумент,
	|		ИсходящиеПлатежи.Ссылка КАК Выписка
	|	ИЗ
	|		Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.ВыпискаПоРасчетномуСчету.ИсходящиеПлатежи КАК ИсходящиеПлатежи
	|		ПО
	|			ДанныеДокумента.Ссылка = ИсходящиеПлатежи.ПлатежныйДокумент
	|			И ИсходящиеПлатежи.Ссылка.Проведен
	|			И ИсходящиеПлатежи.Ссылка <> &Ссылка
	|			И Не ИсходящиеПлатежи.Ссылка.ПометкаУдаления
	|
	|	ГДЕ
	|		Не &ЭтоВходящиеПлатежи
	|		И ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка КАК ПлатежныйДокумент,
	|		ВходящиеПлатежи.Ссылка КАК Выписка
	|	ИЗ
	|		Документ.ОтчетБанкаПоОперациямЭквайринга КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.ВыпискаПоРасчетномуСчету.ВходящиеПлатежи КАК ВходящиеПлатежи
	|		ПО
	|			ДанныеДокумента.Ссылка = ВходящиеПлатежи.ПлатежныйДокумент
	|			И ВходящиеПлатежи.Ссылка.Проведен
	|			И ВходящиеПлатежи.Ссылка <> &Ссылка
	|			И Не ВходящиеПлатежи.Ссылка.ПометкаУдаления
	|
	|	ГДЕ
	|		ДанныеДокумента.Ссылка В (&МассивДокументов)
	|		И ДанныеДокумента.СуммаДокумента > 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка КАК ПлатежныйДокумент,
	|		ИсходящиеПлатежи.Ссылка КАК Выписка
	|	ИЗ
	|		Документ.ОтчетБанкаПоОперациямЭквайринга КАК ДанныеДокумента
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.ВыпискаПоРасчетномуСчету.ИсходящиеПлатежи КАК ИсходящиеПлатежи
	|		ПО
	|			ДанныеДокумента.Ссылка = ИсходящиеПлатежи.ПлатежныйДокумент
	|			И ИсходящиеПлатежи.Ссылка.Проведен
	|			И ИсходящиеПлатежи.Ссылка <> &Ссылка
	|			И Не ИсходящиеПлатежи.Ссылка.ПометкаУдаления
	|
	|	ГДЕ
	|		ДанныеДокумента.Ссылка В (&МассивДокументов)
	|		И ДанныеДокумента.СуммаДокумента < 0
	|
	|	) КАК Документы
	|");
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ЭтоВходящиеПлатежи", ЭтоВходящиеПлатежи);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	Возврат Запрос;
	
КонецФункции // ЗапросПоДокументамПроведенныеБанком()

// Функция получает массив документов, которые уже проведены банком.
//
// Параметры:
//	Массив - Массив документов
//	ЭтоВходящиеПлатежи - Булево - Признак заполнения входящих платежей
//
// Возвращаемое значение:
//	Массив - массив документов, проведенных банком
//
Функция ПолучитьПроведенныеБанкомДокументы(МассивДокументов, ЭтоВходящиеПлатежи)
		
	МассивПроведенныхДокументов = Новый Массив;
	
	Запрос = ЗапросПоДокументамПроведенныеБанком(МассивДокументов, ЭтоВходящиеПлатежи);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МассивПроведенныхДокументов.Добавить(Выборка.ПлатежныйДокумент);
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Платеж %1 уже указан в документе %2'"),
			Выборка.ПлатежныйДокумент,
			Выборка.Выписка
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			Выборка.Выписка
		);
		
	КонецЦикла;
	
	Возврат МассивПроведенныхДокументов;
	
КонецФункции // ПолучитьПроведенныеБанкомДокументы()

// Процедура проверяет банковский счет документов.
//
// Параметры:
//	Массив - Массив документов
//	ЭтоВходящиеПлатежи - Булево - Признак заполнения входящих платежей
//
// Возвращаемые параметры:
//	БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет документов
//
// Возвращаемое значение:
//	Булево - Истина - документы принадлежат одному банковскому счету
//			 Ложь - документы принадлежат разным банковским счетам
//
Функция ДокументыПринадлежатОдномуБанковскомуСчету(МассивДокументов, ЭтоВходящиеПлатежи, БанковскийСчет = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документы.БанковскийСчет КАК БанковскийСчет
	|ИЗ (
	|	ВЫБРАТЬ
	|		ДанныеДокумента.БанковскийСчет КАК БанковскийСчет
	|	ИЗ
	|		Документ.ПоступлениеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ГДЕ
	|		&ЭтоВходящиеПлатежи
	|		И ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеДокумента.БанковскийСчетПолучатель КАК БанковскийСчет
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ГДЕ
	|		&ЭтоВходящиеПлатежи
	|		И ДанныеДокумента.Ссылка В (&МассивДокументов)
	|		И ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|		)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеДокумента.БанковскийСчет КАК БанковскийСчет
	|	ИЗ
	|		Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
	|	ГДЕ
	|		Не &ЭтоВходящиеПлатежи
	|		И ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеДокумента.БанковскийСчет КАК БанковскийСчет
	|	ИЗ
	|		Документ.ПриходныйКассовыйОрдер КАК ДанныеДокумента
	|	ГДЕ
	|		Не &ЭтоВходящиеПлатежи
	|		И ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеДокумента.БанковскийСчет КАК БанковскийСчет
	|	ИЗ
	|		Документ.РасходныйКассовыйОрдер КАК ДанныеДокумента
	|	ГДЕ
	|		&ЭтоВходящиеПлатежи
	|		И ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеДокумента.ДоговорЭквайринга.БанковскийСчет КАК БанковскийСчет
	|	ИЗ
	|		Документ.ОтчетБанкаПоОперациямЭквайринга КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.Ссылка В (&МассивДокументов)
	|
	|	) КАК Документы
	|");
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ЭтоВходящиеПлатежи", ЭтоВходящиеПлатежи);
	
	ОдинБанковскийСчет = Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1
	   И Выборка.Следующий() Тогда
		ОдинБанковскийСчет = Истина;
		БанковскийСчет = Выборка.БанковскийСчет;
	КонецЕсли;
	
	Если Не ОдинБанковскийСчет Тогда
		Текст = НСтр("ru = 'Выбранные документы относятся к разным банковским счетам'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	
	МассивПроведенныхДокументов	= ПолучитьПроведенныеБанкомДокументы(МассивДокументов, ЭтоВходящиеПлатежи);
	Для Каждого Документ Из МассивПроведенныхДокументов Цикл
		Номер = МассивДокументов.Найти(Документ);
		Если Номер <> Неопределено Тогда
			МассивДокументов.Удалить(Номер);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОдинБанковскийСчет;
	
КонецФункции // ДокументыПринадлежатОдномуБанковскомуСчету()

// Определяет, разрешены ли платежи без указания заявок на расходование денежных средств.
//
// Параметры: ДокументОбъект - документ, для которого выполняется проверка.
//
// Возвращаемое значение: Булево.
//
Функция РазрешеныПлатежиБезУказанияЗаявок(ДокументОбъект) Экспорт                 
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Реквизиты = Справочники.Кассы.ПолучитьРеквизитыКассы(ДокументОбъект.Касса);
		Возврат Реквизиты.РазрешитьПлатежиБезУказанияЗаявок;
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		
		Реквизиты = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ДокументОбъект.БанковскийСчет);
		Возврат Реквизиты.РазрешитьПлатежиБезУказанияЗаявок;
		
	ИначеЕсли ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте")
		И ТипЗнч(ДокументОбъект.ЭквайринговыйТерминал.Касса) = Тип("СправочникСсылка.Кассы") Тогда
		
		Реквизиты = Справочники.Кассы.ПолучитьРеквизитыКассы(ДокументОбъект.ЭквайринговыйТерминал.Касса);
		Возврат Реквизиты.РазрешитьПлатежиБезУказанияЗаявок;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции // РазрешеныПлатежиБезУказанияЗаявок() 

// Процедура очищает неиспользуемые для хозяйственной операции реквизиты.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	МассивВсехРеквизитов - Массив - Массив всех реквизитов документа, которые необходимо очищать
//	МассивРеквизитовОперации - Массив - Массив реквизитов документа, которые относятся к хозяйственной операции документа
//
Процедура ОчиститьНеиспользуемыеРеквизиты(ДокументОбъект, Знач МассивВсехРеквизитов, Знач МассивРеквизитовОперации) Экспорт
	
	// Удалим из массива реквизиты, относящиеся к хозяйственной операции.
	Для Каждого ЭлементМассива Из МассивРеквизитовОперации Цикл
		
		Номер = МассивВсехРеквизитов.Найти(ЭлементМассива);
		Если Номер <> Неопределено Тогда
			МассивВсехРеквизитов.Удалить(Номер);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураТабличныхЧастей = Новый Структура;
	
	Для Каждого ЭлементМассива Из МассивВсехРеквизитов Цикл
		
		Позиция = Найти(ЭлементМассива, ".");
		
		// Реквизит табличной части.
		Если Позиция <> 0 Тогда
			ИмяТабличнойЧасти = Лев(ЭлементМассива, Позиция - 1);
			РеквизитыТабличнойЧасти = Неопределено;
			Если Не СтруктураТабличныхЧастей.Свойство(ИмяТабличнойЧасти, РеквизитыТабличнойЧасти) Тогда
				СтруктураТабличныхЧастей.Вставить(ИмяТабличнойЧасти, Новый Массив);
				РеквизитыТабличнойЧасти = СтруктураТабличныхЧастей[ИмяТабличнойЧасти];
			КонецЕсли;
			РеквизитыТабличнойЧасти.Добавить(Сред(ЭлементМассива, Позиция + 1));
			
		// Для табличной части ничего не делаем.	
		ИначеЕсли ЭлементМассива = "РасшифровкаПлатежа"
		 ИЛИ ЭлементМассива = "ВедомостиНаВыплатуЗарплаты"
		 ИЛИ ЭлементМассива = "ВыплатаЗаработнойПлаты" Тогда
			Продолжить;
			
		// Реквизит шапки.	
		Иначе
			Если ЗначениеЗаполнено(ДокументОбъект[СокрЛП(ЭлементМассива)]) Тогда
				ДокументОбъект[СокрЛП(ЭлементМассива)] = Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Очистим необходимые реквизиты табличной части.
	Если СтруктураТабличныхЧастей.Количество() > 0 Тогда
		
		Для Каждого ТабличнаяЧасть ИЗ СтруктураТабличныхЧастей Цикл
			
			Для Каждого СтрокаТаблицы Из ДокументОбъект[ТабличнаяЧасть.Ключ] Цикл
				
				Для Каждого ЭлементМассива Из ТабличнаяЧасть.Значение Цикл
					Если ЗначениеЗаполнено(СтрокаТаблицы[СокрЛП(ЭлементМассива)]) Тогда
						СтрокаТаблицы[СокрЛП(ЭлементМассива)] = Неопределено;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьНеиспользуемыеРеквизиты()

// Процедура очищает неиспользуемые реквизиты для указанной в документе формы оплаты.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Форма оплаты документа
//
Процедура ОчиститьНеиспользуемыеРеквизитыФормыОплаты(ДокументОбъект, ФормаОплаты) Экспорт
	
	МассивРеквизитов = Новый Массив;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Наличная Тогда
		МассивРеквизитов.Добавить("Касса");
	КонецЕсли;
	Если ФормаОплаты <> Перечисления.ФормыОплаты.Безналичная Тогда
		МассивРеквизитов.Добавить("БанковскийСчет");
	КонецЕсли;
	
	ОчиститьНеиспользуемыеРеквизиты(ДокументОбъект, МассивРеквизитов, Новый Массив);
	
КонецПроцедуры // ОчиститьНеиспользуемыеРеквизитыФормыОплаты()

Процедура ДобавитьНепроверяемыеРеквизитыПоВыплатеЗаработнойПлаты(ДокументОбъект, МассивНепроверяемыхРеквизитов, ФормаОплатыНаличная = Ложь) Экспорт
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыПоВедомостям
		Или ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		Если Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ЗаявкаНаРасходованиеДенежныхСредств");
			МассивНепроверяемыхРеквизитов.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("СтатьяРасходов");
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных") Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Ведомость");
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты");
			МассивНепроверяемыхРеквизитов.Добавить("ВедомостиНаВыплатуЗарплаты");
			
		Иначе
			МассивНепроверяемыхРеквизитов.Добавить("НомерВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("ДатаВедомостиНаВыплатуЗарплаты");
			МассивНепроверяемыхРеквизитов.Добавить("Ведомость");
			МассивНепроверяемыхРеквизитов.Добавить("ВыплатаЗаработнойПлаты");
			МассивНепроверяемыхРеквизитов.Добавить("ВедомостиНаВыплатуЗарплаты");
			
		КонецЕсли;
		
		Если ФормаОплатыНаличная Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры формирования движений по денежным средствам.

// Процедура формирования движений по регистру "Денежные средства (наличные)".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваНаличные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваНаличные;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваНаличные;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваНаличные()

// Процедура формирования движений по регистру "Денежные средства (наличные)".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваВКассахККМ(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваВКассахККМ;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваВКассахККМ;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваВКассахККМ()

// Процедура формирования движений по регистру "Денежные средства (безналичные)".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваБезналичные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваБезналичные;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваБезналичные;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваБезналичные()

// Процедура формирования движений по регистру "Денежные средства к поступлению (наличные)".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваКПоступлениюНаличные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваКПоступлениюНаличные;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваКПоступлениюНаличные;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваКПоступлениюНаличные()

// Процедура формирования движений по регистру "Денежные средства к списанию (наличные)".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваКСписаниюНаличные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваКСписаниюНаличные;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваКСписаниюНаличные;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваКСписаниюНаличные()

// Процедура формирования движений по регистру "Денежные средства к поступлению (безналичные)".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваКПоступлениюБезналичные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваКПоступлениюБезналичные;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваКПоступлениюБезналичные;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваКПоступлениюБезналичные()

// Процедура формирования движений по регистру "Денежные средства к списанию (безналичные)".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваКСписаниюБезналичные(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваКСписаниюБезналичные;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваКСписаниюБезналичные;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваКСписаниюБезналичные()

// Процедура формирования движений по регистру "Денежные средства у подотчетных лиц".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваУПодотчетныхЛиц(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваУПодотчетныхЛиц;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваУПодотчетныхЛиц;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваУПодотчетныхЛиц()

// Процедура формирования движений по регистру "Денежные средства к списанию с подотчетных лиц".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваКСписаниюСПодотчетныхЛиц(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваКСписаниюСПодотчетныхЛиц;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваКСписаниюСПодотчетныхЛиц;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваКСписаниюСПодотчетныхЛиц()

// Процедура формирования движений по регистру "Денежные средства к выплате".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДенежныеСредстваКВыплате(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДенежныеСредства = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДенежныеСредстваКВыплате;
	
	Если Отказ ИЛИ ТаблицаДенежныеСредства.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.ДенежныеСредстваКВыплате;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаДенежныеСредства);
	
КонецПроцедуры // ОтразитьДенежныеСредстваКВыплате()

// Процедура формирования движений по регистру "Расчеты по эквайрингу".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьРасчетыПоЭквайрингу(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаРасчетыПоЭквайрингу = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыПоЭквайрингу;
	
	Если Отказ ИЛИ ТаблицаРасчетыПоЭквайрингу.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.РасчетыПоЭквайрингу;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаРасчетыПоЭквайрингу);
	
КонецПроцедуры // ОтразитьРасчетыПоЭквайрингу()

// Функция проверяет возможность формирования документа "Списание безналичных ДС"
// на основании нескольких документов. 
//
// Параметры
//  МассивСсылок  - Массив - заказы поставщикам, по которым необходимо ввести реализацию
//
// Возвращаемое значение:
//   Булево   - Истина, если формирование возможно.
//
Функция СформироватьДанныеЗаполненияСписанияДСПоНесколькимДокументам(МассивСсылок) Экспорт

	Отказ = Ложь;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Контрагент) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияКонтрагент,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Организация) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияОрганизация,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.ТипДокумента) > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОтличияТип
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоступлениеТоваровУслуг.Организация КАК Организация,
	|		ПоступлениеТоваровУслуг.Контрагент КАК Контрагент,
	|		""А"" КАК ТипДокумента
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|	ГДЕ
	|		ПоступлениеТоваровУслуг.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПоступлениеУслугПрочихАктивов.Организация,
	|		ПоступлениеУслугПрочихАктивов.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ПоступлениеУслугПрочихАктивов КАК ПоступлениеУслугПрочихАктивов
	|	ГДЕ
	|		ПоступлениеУслугПрочихАктивов.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказПоставщику.Организация,
	|		ЗаказПоставщику.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|	ГДЕ
	|		ЗаказПоставщику.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомитенту.Организация,
	|		ОтчетКомитенту.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|	ГДЕ
	|		ОтчетКомитенту.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомитентуОСписании.Организация,
	|		ОтчетКомитентуОСписании.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|	ГДЕ
	|		ОтчетКомитентуОСписании.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомиссионера.Организация,
	|		ОтчетКомиссионера.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетКомиссионера КАК ОтчетКомиссионера
	|	ГДЕ
	|		ОтчетКомиссионера.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПередачаТоваровМеждуОрганизациями.Организация,
	|		NULL,
	|		""А""
	|	ИЗ
	|		Документ.ПередачаТоваровМеждуОрганизациями КАК ПередачаТоваровМеждуОрганизациями
	|	ГДЕ
	|		ПередачаТоваровМеждуОрганизациями.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетПоКомиссииМеждуОрганизациями.Организация,
	|		NULL,
	|		""А""
	|	ИЗ
	|		Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ОтчетПоКомиссииМеждуОрганизациями
	|	ГДЕ
	|		ОтчетПоКомиссииМеждуОрганизациями.Ссылка В(&МассивСсылок)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаможеннаяДекларацияИмпорт.Организация,
	|		ТаможеннаяДекларацияИмпорт.Контрагент,
	|		""А""
	|	ИЗ
	|		Документ.ТаможеннаяДекларацияИмпорт КАК ТаможеннаяДекларацияИмпорт
	|	ГДЕ
	|		ТаможеннаяДекларацияИмпорт.Ссылка В(&МассивСсылок)
	|	
	|";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
	
		Возврат Отказ
	
	КонецЕсли; 
		
	Если СообщитьОбОшибкахФормированияДанныхЗаполненияСписанияДС(Выборка) Тогда
	
		ТекстОшибки = НСтр("ru='Ввод одного документа Списание безналичных ДС на основании выделенных распоряжений невозможен'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			,
			,
			Отказ
		);
	
	КонецЕсли; 

	Возврат НЕ Отказ;
	
КонецФункции // СформироватьДанныеЗаполненияСписанияДСПоНесколькимДокументам()

// Выводит сообщения об ошибках при вводе списания безналичных ДС на основании 
// нескольких документов.
//
// Параметры
//  Выборка  - Выборка из результата запроса
//
// Возвращаемое значение:
//   Булево   - Истина, если отказ от ввода на основании
//
Функция СообщитьОбОшибкахФормированияДанныхЗаполненияСписанияДС(Выборка)

	Отказ = Ложь;
	
	ТекстСообщения = НСтр("ru='У выделенных документов отличается %ПредставлениеПоля%'");
	
	Если Выборка.ЕстьОтличияКонтрагент Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='поле ""Контрагент""'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если Выборка.ЕстьОтличияОрганизация Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='поле ""Организация""'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если Выборка.ЕстьОтличияТип Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='тип документов'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
    Возврат Отказ;
	
КонецФункции // СообщитьОбОшибкахФормированияДанныхЗаполненияСписанияДС()

// Процедура устанавливает видимость выбора операций оплаты ДС по договорам кредитов и депозитов.
//
// Параметры:
//	Форма - УправляемаяФорма - Текущая форма
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(Форма, Поле) Экспорт
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		
		МассивОпераций = Новый Массив;
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаПоДепозитам);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыплатаПоЗаймамВыданным);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам);
		МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным);
		
		Для Каждого ХозяйственнаяОперация Из МассивОпераций Цикл
		
			ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(ХозяйственнаяОперация);
			Если ЭлементСписка <> Неопределено Тогда
				Поле.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов()

// Процедура устанавливает видимость выбора операции "Прочие доходы" в форме.
//
// Параметры:
//	Форма - УправляемаяФорма - Текущая форма
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииПрочиеДоходы(Форма, Поле) Экспорт
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьУчетПрочихДоходовРасходов") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПрочиеДоходы);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора операции "Прочие расходы" в форме.
//
// Параметры:
//	Форма - УправляемаяФорма - Текущая форма
//	Поле - ПолеФормы - Поле формы для выбора хозяйственной операции
//
Процедура УстановитьВидимостьОперацииПрочиеРасходы(Форма, Поле) Экспорт
	
	Если Не Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьУчетПрочихДоходовРасходов") Тогда
		
		ЭлементСписка = Поле.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПрочиеРасходы);
		Если ЭлементСписка <> Неопределено Тогда
			Поле.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет пересчет сумм документа в новую валюту.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	ТекущаяВалюта - СправочникСсылка.Валюты - Текущая валюта
//	НоваяВалюта - СправочникСсылка.Валюты - Новая валюта
//
Процедура ПересчетСуммДокументаВВалюту(Объект, ТекущаяВалюта, НоваяВалюта) Экспорт
	
	КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		ТекущаяВалюта,
		НоваяВалюта,
		Объект.Дата
	);
	
	// Пересчитаем сумму документа в новую валюту.
	Объект.СуммаДокумента = Окр(КоэффициентПересчета * Объект.СуммаДокумента, 2, 1);
	
	МассивТабличныйЧастей = Новый Массив;
	МассивТабличныйЧастей.Добавить("РасшифровкаПлатежа");
	МассивТабличныйЧастей.Добавить("ДебиторскаяЗадолженность");
	МассивТабличныйЧастей.Добавить("КредиторскаяЗадолженность");
			
	Для Каждого ТабличнаяЧасть Из МассивТабличныйЧастей Цикл
				
		Если Объект.Свойство(ТабличнаяЧасть) Тогда
			
			ИтогСумма = Объект[ТабличнаяЧасть].Итог("Сумма");
			СуммаДокумента = Окр(КоэффициентПересчета * ИтогСумма, 2, 1);
							
			// Пересчитаем суммы в табличной части документа.
			Если ИтогСумма <> 0 Тогда
				
				Для Каждого СтрокаТаблицы Из Объект[ТабличнаяЧасть] Цикл
					
					Сумма = ?(ИтогСумма <> 0, Окр(СуммаДокумента * СтрокаТаблицы.Сумма / ИтогСумма, 2, 1), 0);
					ИтогСумма = ИтогСумма - СтрокаТаблицы.Сумма;
					СуммаДокумента = СуммаДокумента - Сумма;
					СтрокаТаблицы.Сумма = Сумма;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры

// Процедура формирования движений по регистру "Расчеты по договорам кредитов и депозитов".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьРасчетыПоДоговорамКредитовИДепозитов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаРасчетыПоДоговорамКредитовИДепозитов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыПоДоговорамКредитовИДепозитов;
	
	Если Отказ ИЛИ ТаблицаРасчетыПоДоговорамКредитовИДепозитов.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияДенежныеСредства = Движения.РасчетыПоДоговорамКредитовИДепозитов;
	ДвиженияДенежныеСредства.Записывать = Истина;
	ДвиженияДенежныеСредства.Загрузить(ТаблицаРасчетыПоДоговорамКредитовИДепозитов);
	
КонецПроцедуры // ОтразитьРасчетыПоДоговорамКредитовИДепозитов()

////////////////////////////////////////////////////////////////////////////////
// Процедуры работы с функциональными опциями.

Функция ПолучитьПервыйВариантКлассификацииЗадолженности() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВариантыКлассификацииЗадолженности.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВариантыКлассификацииЗадолженности КАК ВариантыКлассификацииЗадолженности
	|ГДЕ
	|	НЕ ВариантыКлассификацииЗадолженности.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
    Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // ПолучитьПервыйВариантКлассификацииЗадолженности()

