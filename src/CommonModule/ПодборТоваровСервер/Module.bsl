////////////////////////////////////////////////////////////////////////////////
// Модуль "ПодборТоваровСервер", содержит процедуры и функции необходимые для
// работы форм подбора товаров. Модуль содержит основные функции которые отвечают
// за установку и снятие отборов, переключение страниц номенклатуры/характеристик,
// функции работы с поиском.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Работа с корзиной.

// Процедура вызывается при изменениия данных в корзине подобранных товаров в формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура ПриИзмененииКорзины(Форма) Экспорт
	
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	ЭтоФормаЧекаККМ                  = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	ЭтоФормаПомощникаПродаж          = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(Форма);
	
	Если (ЭтоФормаПодбораВДокументыПродажи И НЕ Форма.РежимПодбораБезСуммовыхПараметров)
		ИЛИ ЭтоФормаПомощникаПродаж ИЛИ ЭтоФормаЧекаККМ Тогда
		
		ПодборТоваровКлиентСервер.УстановитьВидимостьКомандыПодбораНоменклатурыПродаваемойСовместно(Форма, Форма.Объект);
		ПодборТоваровКлиентСервер.ЗаполнитьСписокВыбораВариантовНавигации(Форма, Форма.Объект);
		
		Если Форма.ВариантНавигации = "Совместно" Тогда
			
			Если ПодборТоваровКлиентСервер.ЕстьТоварыПродаваемыеСовместно(Форма, Форма.Объект) Тогда
				УстановитьОтборПоНоменклатуреПродаваемойСовместно(Форма);
			Иначе
				Форма.ВариантНавигации = "ПоИерархии";
				ПриИзмененииВариантаНавигации(Форма);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Получение информации о цене, остатках товаров из форм подборов.

// Процедура получет информацию о товаре - цене закупки и остатках товара.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора товаров.
//
Процедура ПолучитьИнформациюОТовареПриЗакупке(Форма) Экспорт
	
	ОстаткиПоСкладам = Форма.ОстаткиТоваров.ПолучитьЭлементы();
	ОстаткиПоСкладам.Очистить();
	
	ОстаткиПоСкладамПоставщика = Форма.ОстаткиТоваровПоставщика.ПолучитьЭлементы();
	ОстаткиПоСкладамПоставщика.Очистить();
	
	Если Форма.РежимПодбораБезСуммовыхПараметров И НЕ Форма.ОтображатьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	ХарактеристикиИспользуются = Форма.ТекущаяСтрокаНоменклатуры.ХарактеристикиИспользуются;
	ЭтоТовар = Форма.ТекущаяСтрокаНоменклатуры.ЭтоТовар;
	
	Если ЭтоТовар = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Если НЕ ЭтоТовар Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Форма.ОтображатьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОТоваре = ЦенаЗакупкиИОстаткиТовара(Форма);
	
	СтруктураЦена = ИнформацияОТоваре.Цена;
	
	НаименованиеУпаковкиЕдиницыИзмерения = ?(ЗначениеЗаполнено(СтруктураЦена.Упаковка), 
		Строка(СтруктураЦена.Упаковка), 
		Строка(СтруктураЦена.ЕдиницаИзмерения)
	);
	
	Для Каждого СтрокаТекущиеОстатки Из ИнформацияОТоваре.ТекущиеОстатки Цикл
		
		СтрокаОстаткиПоСкладам = ОстаткиПоСкладам.Добавить();
		
		СтрокаОстаткиПоСкладам.Период = ТекущаяДата();
		СтрокаОстаткиПоСкладам.ПериодОписание = НСтр("ru = 'Сейчас'");
		
		СтрокаОстаткиПоСкладам.Доступно = СтрокаТекущиеОстатки.Свободно;
		
		СтрокаОстаткиПоСкладам.ДоступноОписание = ОписаниеДоступногоКоличества(
			СтрокаОстаткиПоСкладам.Доступно,
			НаименованиеУпаковкиЕдиницыИзмерения,
			ХарактеристикиИспользуются,
			Форма.НавигацияПоХарактеристикам ИЛИ Форма.НавигацияПоНоменклатуреПоставщика 
		);
		
		СтрокаОстаткиПоСкладам.Склад = СтрокаТекущиеОстатки.Склад;
		СтрокаОстаткиПоСкладам.СкладОписание = Строка(СтрокаТекущиеОстатки.Склад);
		СтрокаОстаткиПоСкладам.СкладДоступенДляВыбора = Форма.Склады.НайтиПоЗначению(СтрокаОстаткиПоСкладам.Склад) <> Неопределено;
		
		СтрокаОстаткиПоСкладамПоставщика = ОстаткиПоСкладамПоставщика.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОстаткиПоСкладамПоставщика, СтрокаОстаткиПоСкладам);
		
		ПланируемыеОстаткиПоДатам = СтрокаОстаткиПоСкладам.ПолучитьЭлементы();
		ПланируемыеОстаткиПоДатамПоставщика = СтрокаОстаткиПоСкладамПоставщика.ПолучитьЭлементы();
		
		// Вывести планируемые остатки по графику движений товаров.
		Для Каждого СтрокаПланируемыеОстатки Из ИнформацияОТоваре.ПланируемыеОстатки Цикл
			
			Если СтрокаПланируемыеОстатки.Склад <> СтрокаОстаткиПоСкладам.Склад Тогда
				Продолжить;
			КонецЕсли;
			
			// ... в таблицу планируемых остатков по датам.
			СтрокаПланируемыеОстаткиПоДатам = ПланируемыеОстаткиПоДатам.Добавить();
			
			СтрокаПланируемыеОстаткиПоДатам.Период = СтрокаПланируемыеОстатки.Период;
			СтрокаПланируемыеОстаткиПоДатам.ПериодОписание = Формат(СтрокаПланируемыеОстатки.Период, "ДФ=dd.MM.yyyy");
			
			СтрокаПланируемыеОстаткиПоДатам.Доступно = СтрокаПланируемыеОстатки.Доступно;
			
			СтрокаПланируемыеОстаткиПоДатам.ДоступноОписание = ОписаниеДоступногоКоличества(
				СтрокаПланируемыеОстаткиПоДатам.Доступно,
				НаименованиеУпаковкиЕдиницыИзмерения,
				ХарактеристикиИспользуются,
				Форма.НавигацияПоХарактеристикам
			);
			
			СтрокаПланируемыеОстаткиПоДатам.Склад = СтрокаПланируемыеОстатки.Склад;
			СтрокаПланируемыеОстаткиПоДатам.СкладОписание = "";
			СтрокаПланируемыеОстаткиПоДатам.СкладДоступенДляВыбора = Форма.Склады.НайтиПоЗначению(СтрокаПланируемыеОстаткиПоДатам.Склад) <> Неопределено;
			
			// ... в таблицу планируемых остатков поставщика по датам.
			СтрокаПланируемыеОстаткиПоставщикаПоДатам = ПланируемыеОстаткиПоДатамПоставщика.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПланируемыеОстаткиПоставщикаПоДатам, СтрокаПланируемыеОстаткиПоДатам);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура получает информацию товаре - цене продажи и остатках товара.
// Используется в формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура ПолучитьИнформациюОТовареПриПродаже(Форма) Экспорт
	
	ЭтоФормаПомощникаПродаж = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	ЭтоФормаЧекаККМ         = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	
	ОстаткиПоСкладам = Форма.ОстаткиТоваров.ПолучитьЭлементы();
	ОстаткиПоСкладам.Очистить();
	
	Если НЕ (ЭтоФормаЧекаККМ ИЛИ ЭтоФормаПомощникаПродаж) Тогда
		Если Форма.РежимПодбораБезСуммовыхПараметров Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Форма.ОтображатьОстатки Тогда
		Возврат;
	КонецЕсли;
	
	ХарактеристикиИспользуются = Форма.ТекущаяСтрокаНоменклатуры.ХарактеристикиИспользуются;
	ЭтоТовар = Форма.ТекущаяСтрокаНоменклатуры.ЭтоТовар;
	
	Если НЕ ЭтоТовар Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияОТоваре = ЦенаПродажиИОстаткиТовара(Форма);
	ЦенаПродажиТовара = ИнформацияОТоваре.Цена;
	
	НаименованиеУпаковкиЕдиницыИзмерения = ?(ЗначениеЗаполнено(ЦенаПродажиТовара.Упаковка), 
		Строка(ЦенаПродажиТовара.Упаковка), 
		Строка(ЦенаПродажиТовара.ЕдиницаИзмерения)
	);
	
	Для Каждого СтрокаТЧ Из ИнформацияОТоваре.ТекущиеОстатки Цикл
		
		СтрокаОстаткиПоСкладам = ОстаткиПоСкладам.Добавить();
		
		СтрокаОстаткиПоСкладам.Период = ТекущаяДата();
		СтрокаОстаткиПоСкладам.ПериодОписание = НСтр("ru = 'Сейчас'");
		СтрокаОстаткиПоСкладам.Доступно = СтрокаТЧ.Свободно;
		
		СтрокаОстаткиПоСкладам.ДоступноОписание = ОписаниеДоступногоКоличества(
			СтрокаОстаткиПоСкладам.Доступно,
			НаименованиеУпаковкиЕдиницыИзмерения,
			ХарактеристикиИспользуются,
			Форма.НавигацияПоХарактеристикам
		);
		
		СтрокаОстаткиПоСкладам.Склад = СтрокаТЧ.Склад;
		СтрокаОстаткиПоСкладам.СкладОписание = Строка(СтрокаТЧ.Склад);
		СтрокаОстаткиПоСкладам.СкладДоступенДляВыбора = Форма.Склады.НайтиПоЗначению(СтрокаОстаткиПоСкладам.Склад) <> Неопределено;
		
		ПланируемыеОстаткиПоДатам = СтрокаОстаткиПоСкладам.ПолучитьЭлементы();
		
		Для Каждого СтрокаТЧ Из ИнформацияОТоваре.ПланируемыеОстатки Цикл
			
			Если НЕ (СтрокаТЧ.Склад = СтрокаОстаткиПоСкладам.Склад) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаПланируемыеОстаткиПоДатам = ПланируемыеОстаткиПоДатам.Добавить();
			
			СтрокаПланируемыеОстаткиПоДатам.Период = СтрокаТЧ.Период;
			СтрокаПланируемыеОстаткиПоДатам.ПериодОписание = Формат(СтрокаТЧ.Период, "ДФ=dd.MM.yyyy");
			СтрокаПланируемыеОстаткиПоДатам.Доступно = СтрокаТЧ.Доступно;
			
			СтрокаПланируемыеОстаткиПоДатам.ДоступноОписание = ОписаниеДоступногоКоличества(
				СтрокаПланируемыеОстаткиПоДатам.Доступно,
				НаименованиеУпаковкиЕдиницыИзмерения,
				ХарактеристикиИспользуются,
				Форма.НавигацияПоХарактеристикам
			);
			
			СтрокаПланируемыеОстаткиПоДатам.Склад = СтрокаТЧ.Склад;
			СтрокаПланируемыеОстаткиПоДатам.СкладОписание = "";
			
			СкладДоступенДляВыбора = (Форма.Склады.НайтиПоЗначению(СтрокаПланируемыеОстаткиПоДатам.Склад) <> Неопределено);
			СтрокаПланируемыеОстаткиПоДатам.СкладДоступенДляВыбора = СкладДоступенДляВыбора;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает структуру - данные об остатках товара.
//
// Параметры:
//	Номенклатура (СправочникСсылка.Номенклатура) - номенклатура товара,
//	Характеристика (СправочникСсылка.Характеристики) - характеристика товара,
//	Склады (Массив) - массив складов.
//
Функция ОстаткиНоменклатуры(Номенклатура, Характеристика, Склады = Неопределено) Экспорт
	
	СоставРазделовЗапроса = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОстаткиТовара(СоставРазделовЗапроса);
	
	Если Не ЗначениеЗаполнено(Характеристика) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоНоменклатуреОстатки", "И Номенклатура = &Номенклатура");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоНоменклатуреОстатки", "И Номенклатура = &Номенклатура И Характеристика = &Характеристика");
	КонецЕсли;
	
	Если Склады = Неопределено Тогда
		
		ЗапросПоСкладам = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	(НЕ Склады.ЭтоГруппа)");
		
		Запрос.УстановитьПараметр("Склады", ЗапросПоСкладам.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад"));
		
	Иначе
		Запрос.УстановитьПараметр("Склады", Склады);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура",     Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",   Характеристика);
	Запрос.УстановитьПараметр("ТекущаяДата",      НачалоДня(ТекущаяДата()));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.ВыполнитьПакет();
	
	// Планируемые остатки
	Выборка = Результат[СоставРазделовЗапроса.Найти("РезультатЗапросаПланируемыеОстатки")].Выбрать();
	
	ПланируемыеОстатки = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Новый Структура("Склад, Период, Доступно");
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
		ПланируемыеОстатки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Выборка = Результат[СоставРазделовЗапроса.Найти("РезультатЗапросаДоступныеТовары")].Выбрать();
	
	// Текущие остатки.
	ТекущиеОстатки = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Новый Структура("Склад, ВНаличии, Свободно");
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
		ТекущиеОстатки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат Новый Структура("ТекущиеОстатки, ПланируемыеОстатки", ТекущиеОстатки, ПланируемыеОстатки);
	
КонецФункции

// Функция переносит данные установленных значений отборов из дерева отборов по
// свойствам вида номенклатуры в таблицу значений и помещает ее во временное
// хранилище.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
// Возвращаемое значение:
//	Строка. Адрес таблицы значений во временном хранилище.
//
Функция АдресТаблицыПараметровДереваОтборов(Форма) Экспорт
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	ДеревоЗначенийОтборов        = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	АдресТаблицы = Неопределено;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ИмяРеквизита");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеОтбора");
	ТаблицаПараметров.Колонки.Добавить("ЭтоДопРеквизит");
		
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	СтрокиДереваОтборов = ДеревоЗначенийОтборов.Строки;
	
	НайденныеСтроки = СтрокиДереваОтборов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДереваОтборов Из НайденныеСтроки Цикл
		
		Если ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка")
			ИЛИ ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
		ИначеЕсли НЕ СтрокаДереваОтборов.ОтборДоступен Тогда
			
			ПодчиненныеСтроки = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора);
			
			Если ПодчиненныеСтроки.Количество() = 1 Тогда
				
				СтрокаЗначенияОтбора = ПодчиненныеСтроки[0];
				СтрокаТаблицы = ТаблицаПараметров.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗначенияОтбора);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПараметров.Количество() > 0 Тогда
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПараметров, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Возврат АдресТаблицы;
	
КонецФункции

// Функция переносит данные установленных значений отборов из дерева отборов по
// свойствам вида номенклатуры в таблицу значений и помещает ее во временное
// хранилище.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
// Возвращаемое значение:
//	Строка. Адрес таблицы значений во временном хранилище.
//
Функция АдресТаблицыСопостовленияДереваОтборов(Форма) Экспорт
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	ДеревоЗначенийОтборов        = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	АдресТаблицы = Неопределено;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ИмяРеквизита");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеОтбора");
	ТаблицаПараметров.Колонки.Добавить("ЭтоДопРеквизит");
	ТаблицаПараметров.Колонки.Добавить("ИнтервалОт");
	ТаблицаПараметров.Колонки.Добавить("ИнтервалДо");
	ТаблицаПараметров.Колонки.Добавить("Интервал");	
	
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	СтрокиДереваОтборов = ДеревоЗначенийОтборов.Строки;
	
	НайденныеСтроки = СтрокиДереваОтборов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДереваОтборов Из НайденныеСтроки Цикл
		
		Если СтрокаДереваОтборов.ФиксированноеЗначение Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
			Если СтрокаДереваОтборов.ИнтервалОт <> Неопределено Тогда
				СтрокаТаблицы.Интервал = Истина;	
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка")
			ИЛИ ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
			СтрокаТаблицы.Интервал = Ложь;
			
		ИначеЕсли НЕ СтрокаДереваОтборов.ОтборДоступен Тогда
			
			ПодчиненныеСтроки = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого СтрокаЗначенияОтбора Из ПодчиненныеСтроки Цикл				
				
				СтрокаТаблицы = ТаблицаПараметров.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗначенияОтбора);
				
				СтрокаТаблицы.Интервал = Ложь;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПараметров.Количество() > 0 Тогда
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПараметров, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Возврат АдресТаблицы;
	
КонецФункции

// Функция возвращает структуру параметров товара необходимую для передачи в форму подбора
// при записи и закрытии формы "ПомощникНового" номенклатуры
//
// Возвращаемое значение:
//	Структура. Структура параметров товара.
//
Функция ПараметрыТовараИзПомощникаНовогоНоменклатуры(Форма) Экспорт
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();                                 
	                                                   
	ПараметрыТовара.ТипНоменклатуры=            Форма.Объект.ТипНоменклатуры;
	ПараметрыТовара.ХарактеристикиИспользуются= ?(Форма.Объект.ИспользованиеХарактеристик = ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать"),Ложь,Истина);
	ПараметрыТовара.КоличествоУпаковок=         1;
	ПараметрыТовара.ЭтоТовар=                   ?(Форма.Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
		Или Форма.Объект.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"), Истина, Ложь);
	ПараметрыТовара.ЭтоУслуга=                  Не ПараметрыТовара.ЭтоТовар;
	
	Если Форма.СтруктураПарметровДереваОтборов <> Неопределено Тогда
		
		Если Форма.СтруктураПарметровДереваОтборов.ВидНоменклатуры <> Форма.Объект.ВидНоменклатуры Тогда
			ПараметрыТовара.ПерейтиКСпискуХарактеристик = Ложь;		
		КонецЕсли;
		
		Если Не СоответствиеОтборов(Форма) Тогда
			ПараметрыТовара.ПерейтиКСпискуХарактеристик = Ложь;	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат ПараметрыТовара;
	
КонецФункции

// Функция анализирует соответствуют ли реквизиты номенклатуры отборам в форме подбора 
//
// Параметры:
//	Форма (УправляемаяФорма) - форма помощника нового(номенклатуры).
//
// Возвращаемое значение:
//	Булево. Признак соответсия(Истина-соответствует, Ложь -нет).
//
Функция СоответствиеОтборов(Форма) Экспорт
	
	Если Форма.СтруктураПарметровДереваОтборов.АдресТаблицыСопостовления = Неопределено Тогда
		Возврат Истина;	
	КонецЕсли;
	
	ТаблицаЗначенийРеквизитов = ПолучитьИзВременногоХранилища(Форма.СтруктураПарметровДереваОтборов.АдресТаблицыСопостовления);
	
	МассивРеквизитов = ТаблицаЗначенийРеквизитов.НайтиСтроки(Новый Структура("ЭтоДопРеквизит", Ложь));
	
    ПоследнееИмяРеквизита = "";
	Соответствует = Истина;
	
	Для Каждого Отбор Из МассивРеквизитов Цикл	
		
		Если ПоследнееИмяРеквизита <> Отбор.ИмяРеквизита Тогда
			
			Если Не Соответствует Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ПоследнееИмяРеквизита = Отбор.ИмяРеквизита;
			Соответствует = Ложь;
			
			ЗначениеРеквизитаОбъекта = Форма.Объект[Отбор.ИмяРеквизита];
			
		КонецЕсли;
					
		Если Отбор.Интервал Тогда
			
			Если ЗначениеРеквизитаОбъекта <= Отбор.ИнтервалДо 
				ИЛИ ЗначениеРеквизитаОбъекта >= Отбор.ИнтервалОт  Тогда				
				Соответствует = Истина;							
			КонецЕсли;	
			
		Иначе	
			
			Если ЗначениеРеквизитаОбъекта = Отбор.ЗначениеОтбора Тогда				
				Соответствует = Истина;							
			КонецЕсли;	
			
		КонецЕсли;	
			
	КонецЦикла;	
		
	МассивДопРеквизитов = ТаблицаЗначенийРеквизитов.НайтиСтроки(Новый Структура("ЭтоДопРеквизит", Истина));
	
	Если МассивДопРеквизитов.Количество() > 0 Тогда
		
		ТаблицаДопРеквизитов = Новый ТаблицаЗначений;
		ТаблицаДопРеквизитов.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка",,,Новый КвалификаторыСтроки(255)));
		
		Для Каждого ЭлементМассива Из МассивДопРеквизитов Цикл
			
			НоваяСтрока = ТаблицаДопРеквизитов.Добавить();
			НоваяСтрока.ИмяРеквизита = ЭлементМассива.ИмяРеквизита;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДопРеквизитов.ИмяРеквизита
		|ПОМЕСТИТЬ ТаблицаИменСвойств
		|ИЗ
		|	&ТаблицаДопРеквизитов КАК ТаблицаДопРеквизитов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИменСвойств.ИмяРеквизита КАК ИмяРеквизита,
		|	НаборыДополнительныхРеквизитов.Свойство КАК Свойство
		|ИЗ
		|	ТаблицаИменСвойств КАК ТаблицаИменСвойств
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитов
		|		ПО ТаблицаИменСвойств.ИмяРеквизита = НаборыДополнительныхРеквизитов.Свойство.Наименование
		|ГДЕ
		|	НаборыДополнительныхРеквизитов.Ссылка = &НаборРеквизитов";
		
		Запрос.УстановитьПараметр("ТаблицаДопРеквизитов", ТаблицаДопРеквизитов);
		Запрос.УстановитьПараметр("НаборРеквизитов",      Форма.НаборСвойств);
		
		ТаблицаСвойств = Запрос.Выполнить().Выгрузить();
		СтруктураПоиска = Новый Структура("ИмяРеквизита");
		
		Для Каждого СтрокаТаблицы Из ТаблицаСвойств Цикл
			
			СтруктураПоискаЗначения = Новый Структура("Свойство", СтрокаТаблицы.Свойство);
			МассивСтрок = Форма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоискаЗначения);
			СтрокаРеквизита = МассивСтрок[0];
			ПутьКДанным = СтрокаРеквизита.ИмяРеквизитаЗначение;			
			ЗначениеРеквизитаОбъекта = Форма[ПутьКДанным];
			
			ОтборыПоДопРеквизиту = ТаблицаЗначенийРеквизитов.НайтиСтроки(Новый Структура("ЭтоДопРеквизит,ИмяРеквизита", Истина,СтрокаТаблицы.ИмяРеквизита));
			
			Если ОтборыПоДопРеквизиту.Количество()=1 Тогда
				
				Отбор = ОтборыПоДопРеквизиту[0];
				
				Если Отбор.Интервал Тогда
					
					Если ЗначениеРеквизитаОбъекта >= Отбор.ИнтервалДо 
						ИЛИ ЗначениеРеквизитаОбъекта <= Отбор.ИнтервалОт  Тогда				
						
						Возврат Ложь;
						
					КонецЕсли;	
					
				ИначеЕсли ЗначениеРеквизитаОбъекта <> Отбор.ЗначениеОтбора Тогда
					
					Возврат Ложь;
					
				КонецЕсли;		
				
			ИначеЕсли ОтборыПоДопРеквизиту.Количество()>0 Тогда 	
				
				Соответствует = Ложь;
				
				Для Каждого Отбор Из ОтборыПоДопРеквизиту Цикл
					
					Если ЗначениеРеквизитаОбъекта = Отбор.ЗначениеОтбора Тогда
						
						Соответствует = Истина;
						
					КонецЕсли;	
					
				КонецЦикла;	
				
				Если Не Соответствует Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			Иначе		
				
				Возврат Ложь;

			КонецЕсли;	
				
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат Истина;
		
КонецФункции	
	
////////////////////////////////////////////////////////////////////////////////
// Навигация по характеристикам в формах подборов.

// Процедура устанавливает текущей страницей страницу со списком номенклатуры.
// Используется в формах подборов (в документ продажи, закупки, чек ККМ).
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура ПерейтиКСпискуНоменклатуры(Форма) Экспорт
	
	Если НЕ ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		
		Если ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма)
			ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма) Тогда	 
			
			УстановитьДоступностьЭлементовФильтров(Форма);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Форма.Элементы.СтраницыСписокНоменклатуры.ТекущаяСтраница = Форма.Элементы.ГруппаНоменклатура;
	Форма.НавигацияПоХарактеристикам = Ложь;
	Форма.Элементы.СегментНоменклатуры.ТолькоПросмотр = Ложь;
	
	УстановитьСтраницуКнопокНавигации(Форма);
	УстановитьДоступностьЭлементовФильтров(Форма);
	
	Если ЗначениеЗаполнено(Форма.СтрокаПоиска) Тогда
		Форма.ТекущийЭлемент = Форма.Элементы.СтрокаПоиска;
	Иначе
		Форма.ТекущийЭлемент = Форма.Элементы.Список;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает текущей страницей страницу со списком номенклатуры.
// Используется в формах подборов (в документ продажи, закупки, чек ККМ).
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура ПерейтиКСпискуНоменклатурыПоставщика(Форма) Экспорт
	
	Если НЕ ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.СтраницыСписокНоменклатуры.ТекущаяСтраница = Форма.Элементы.ГруппаНоменклатура;
	Форма.НавигацияПоХарактеристикам = Ложь;
	Форма.Элементы.СегментНоменклатуры.ТолькоПросмотр = Ложь;
	
	УстановитьСтраницуКнопокНавигации(Форма);
	УстановитьДоступностьЭлементовФильтров(Форма);
	
	Форма.ТекущийЭлемент = Форма.Элементы.Список;
	
КонецПроцедуры

// Процедура устанавливает текущей страницей страницу со списком характеристик.
// Используется в формах подборов (в документах продажи, закупки, Чек ККМ).
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура ПерейтиКСпискуХарактеристик(Форма) Экспорт
	
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	
	// Включить признак навигации по характеристикам.
	Форма.НавигацияПоХарактеристикам = Истина;
	
	// Установить заголовок таблицы характеристик.
	ТекстЗаголовка = НСтр("ru = 'Характеристики: ""%1""'");
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, Форма.ТекущаяСтрокаНоменклатуры.Номенклатура);
	
	Форма.Элементы.ПодборТаблицаХарактеристики.ПодчиненныеЭлементы.ПодборТаблицаХарактеристикиХарактеристика.Заголовок = ТекстЗаголовка;
	
	// Установить параметры динамического списка характеристик.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ПодборТаблицаХарактеристики, 
		"Номенклатура", 
		Форма.ТекущаяСтрокаНоменклатуры.Номенклатура
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ПодборТаблицаХарактеристики, 
		"ЕдиницаИзмерения", 
		Форма.ТекущаяСтрокаНоменклатуры.ЕдиницаИзмерения
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ПодборТаблицаХарактеристики, 
		"ВладелецХарактеристик", 
		ВладелецХарактеристик(Форма.ТекущаяСтрокаНоменклатуры.Номенклатура)
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ПодборТаблицаХарактеристики, 
		"ТипНоменклатуры", 
		Форма.ТекущаяСтрокаНоменклатуры.ТипНоменклатуры
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ПодборТаблицаХарактеристики, 
		"ВидНоменклатуры", 
		Форма.ТекущаяСтрокаНоменклатуры.ВидНоменклатуры
	);
	
	Если НЕ ЭтоФормаЧекаККМ И НЕ ЭтоФормаПодбораВДокументыЗакупки Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.ПодборТаблицаХарактеристики, 
			"ЦеноваяГруппа", 
			Форма.ТекущаяСтрокаНоменклатуры.ЦеноваяГруппа
		);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ПодборТаблицаХарактеристики, 
		"СегментНоменклатуры", 
		Форма.СегментНоменклатуры, 
		ЗначениеЗаполнено(Форма.СегментНоменклатуры)
	);
	
	// Установить отбор таблицы характеристик для товаров покупаемых совместно.
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
		
		ХарактеристикиТоваровПродаваемыхСовместно = Новый Массив;
		
		Для Каждого СтрокаТЧ Из Форма.ТаблицаНоменклатураПродаваемаяСовместно Цикл
			Если СтрокаТЧ.Номенклатура = Форма.ТекущаяСтрокаНоменклатуры.Номенклатура Тогда
				ХарактеристикиТоваровПродаваемыхСовместно.Добавить(СтрокаТЧ.Характеристика);
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Форма.ПодборТаблицаХарактеристики.Отбор,
			"Характеристика",
			ХарактеристикиТоваровПродаваемыхСовместно,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
			ХарактеристикиТоваровПродаваемыхСовместно.Количество() > 0
		);
		
	КонецЕсли; 
	
	// Переключить страницу.
	Форма.Элементы.СтраницыСписокНоменклатуры.ТекущаяСтраница = Форма.Элементы.ГруппаХарактеристики;
	Форма.ТекущийЭлемент = Форма.Элементы.ПодборТаблицаХарактеристики;
	Форма.Элементы.СегментНоменклатуры.ТолькоПросмотр = Истина;
	
	УстановитьСтраницуКнопокНавигации(Форма);
	УстановитьДоступностьЭлементовФильтров(Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие обработчики событий форм.

// Процедура вызывается из обработчика события "ПриСозданииНаСервере" форм списков.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка, формы выбора.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	УстановитьЗначенияПоНастройкамФормы(Форма);
	ОбщегоНазначенияУТ.ИнициализироватьРеквизитыФормыДляПолнотекстовогоПоиска(Форма, "ИспользоватьПолнотекстовыйПоискПриПодбореТоваров");
	
КонецПроцедуры

// Процедура вызывается из обработчика события "ПриСозданииНаСервере" форм подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора,
//	Объект (ДанныеФормыСтруктура) - объект для которого вызвана форма подбора.
//
Процедура ПриСозданииФормыПодбораНаСервере(Форма) Экспорт
	
	УстановитьЗначенияПоНастройкамФормыПодбора(Форма);
	УстановитьСтраницуКнопокНавигации(Форма);
	УстановитьСкладскиеНастройкиПоПараметрам(Форма);
	УстановитьДоступностьФильтраПоЦенам(Форма);
	УстановитьОтборТолькоВНаличии(Форма);
	УстановитьЗаголовкиЭлементовФормыПоПараметрам(Форма);
	УстановитьЭлементыСпискаЗначенийКачества(Форма);
	УстановитьОтборПоТипуНоменклатурыПоПараметрам(Форма);
	
	// Создать структуры для хранения данных текущих строк списка номенклатуры
	// и списка характеристик.
	Форма.ТекущаяСтрокаНоменклатуры = ПодборТоваровКлиентСервер.СтруктураСтрокиНоменклатуры();
	Форма.ТекущаяСтрокаХарактеристик = ПодборТоваровКлиентСервер.СтруктураСтрокиХарактеристик();
	
	// Инициализировать реквизиты для полнотекстового поиска.
	ОбщегоНазначенияУТ.ИнициализироватьРеквизитыФормыДляПолнотекстовогоПоиска(
		Форма, 
		"ИспользоватьПолнотекстовыйПоискПриПодбореТоваров"
	);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом отбора по свойствам вида номенклатуры.

// Процедура вызывается при изменении значения в дереве отбора по свойствам вида номенклатуры.
// Т.е. клиентсике функции обрабатывают обработку значений на элементе формы (устанавливают
// значения флажков на строках, подчиненных строках, открывают форму установки интервала значений
// и т.п.), затем управление передается на сервер и сначала отключаются все установленные отборы
// по дереву свойств, затем включается отбор только по значениям строк с установленными флажками отбора.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура ДеревоОтборовОтборПриИзменении(Форма) Экспорт
	
	Если НЕ Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Процедура вызывается при изменении значения в дереве отбора по свойствам вида номенклатуры.
// Т.е. клиентсике функции обрабатывают обработку значений на элементе формы (устанавливают
// значения флажков на строках, подчиненных строках, открывают форму установки интервала значений
// и т.п.), затем управление передается на сервер и сначала отключаются все установленные отборы
// по дереву свойств, затем включается отбор только по значениям строк с установленными флажками отбора.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура СписокКачестваПометкаПриИзменении(Форма) Экспорт
	
	Если НЕ Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьОтборПоКачествуНоменклатуры(Форма);
	УстановитьОтборПоКачествуНоменклатуры(Форма);
	
КонецПроцедуры

// Процедура вызывается при изменении значения в дереве отбора по свойствам вида номенклатуры.
// Т.е. клиентсике функции обрабатывают обработку значений на элементе формы (устанавливают
// значения флажков на строках, подчиненных строках, открывают форму установки интервала значений
// и т.п.), затем управление передается на сервер и сначала отключаются все установленные отборы
// по дереву свойств, затем включается отбор только по значениям строк с установленными флажками отбора.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура НоменклатураИсходногоКачестваПриИзменении(Форма) Экспорт
	
	Если НЕ Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЭлементыСпискаЗначенийКачества(Форма);
	УстановитьОтборПоНоменклатуреИсходногоКачества(Форма);
	УдалитьОтборПоКачествуНоменклатуры(Форма);
	УстановитьПометкуГрадацииКачества(Форма);
	УстановитьОтборПоКачествуНоменклатуры(Форма);
	
КонецПроцедуры

// Процедура заполняет дерево отборов характеристик по свойствам вида номенклатуры
// выбранного на форме.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура ЗаполнитьДеревоОтборовХарактеристик(Форма) Экспорт
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийОтборовХарактеристик(Форма, ДеревоОтборов);
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Установка и удаление отборов.

// Процедура устанавливает отбор по владельцу характеристик. Используется
// в форме подбора справочника "Характеристики номенклатуры".
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьОтборПоВладельцуХарактеристик(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Форма.Список.Отбор,
		"Владелец",
		Форма.ВладелецХарактеристик,
		ВидСравненияКомпоновкиДанных.Равно,
		"ОтборПоВладельцуХарактеристик",
		Истина
	);
	
КонецПроцедуры

// Процедура устанавливает отбор на список номенклатуры по товарам продаваемым совместно
// с заданной номенклатурой.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьОтборПоНоменклатуреПродаваемойСовместно(Форма) Экспорт
	
	ЭтоФормаЧекаККМ         = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	ЭтоФормаПомощникаПродаж = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	
	Форма.ИспользоватьФильтры = Истина;
	Форма.ВариантНавигации    = "Совместно";
	
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	УдалитьОтборПоИерархииНоменклатуры(Форма);
	УстановитьСтраницуВариантаНавигации(Форма);
	
	// Установить фильтр по номенклатуре, продаваемой совместно.
	Форма.ТаблицаНоменклатураПродаваемаяСовместноПредпосылка.Очистить();
	
	Если ЭтоФормаЧекаККМ ИЛИ ЭтоФормаПомощникаПродаж Тогда
		Корзина = Форма.Объект.Товары;
	Иначе
		Корзина = Форма.Объект.Корзина;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Корзина Цикл
		
		Если СтрокаТЧ.ИндексСовместноПродаваемыеТовары = 1 Тогда
			НоваяСтрока = Форма.ТаблицаНоменклатураПродаваемаяСовместноПредпосылка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоФормаЧекаККМ Тогда
		Товары = НоменклатураПродаваемаяСовместно.ПолучитьДанныеОНоменклатуреПродаваемойСовместно(
			Корзина.Выгрузить(,"Номенклатура, Характеристика"), 
			Перечисления.ВариантыАнализаНоменклатурыПродаваемойСовместно.РозничнаяТорговля
		);
	Иначе
		Товары = НоменклатураПродаваемаяСовместно.ПолучитьДанныеОНоменклатуреПродаваемойСовместно(
			Корзина.Выгрузить(,"Номенклатура, Характеристика"), 
			Перечисления.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля
		);
	КонецЕсли;
	
	Форма.ТаблицаНоменклатураПродаваемаяСовместно.Загрузить(Товары);
	
	СовместноПродаваемыеТовары = Товары.ВыгрузитьКолонку("Номенклатура");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Форма.Список.Отбор,
		"Номенклатура",
		СовместноПродаваемыеТовары,
		ВидСравненияКомпоновкиДанных.ВСписке,
		"ПоНоменклатуреПродаваемойСовместно",
		Истина
	);
	
КонецПроцедуры

// Процедура устанавливает отбор по группе номенклатыр в списке номенклатуры поставщика.
// Если на форме используется вариант навигации отличный от навигации по иерархии,
// то отбор не устанавливается.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоИерархииНоменклатурыПоставщика(Форма) Экспорт
	
	Если НЕ Форма.ИспользоватьФильтрНоменклатураПоставщика Тогда
		Возврат;
	КонецЕсли;
		
	ОтборПоИерархииНоменклатурыПоставщика = Форма.Элементы.ИерархияНоменклатурыПоставщика.ТекущаяСтрока;
	
	Если ОтборПоИерархииНоменклатурыПоставщика = Неопределено Тогда
		ОтборПоИерархииНоменклатурыПоставщика = Справочники.НоменклатураПоставщиков.ПустаяСсылка();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Форма.ПодборТаблицаНоменклатураПоставщика.Отбор,
		"Родитель",
		ОтборПоИерархииНоменклатурыПоставщика,
		ВидСравненияКомпоновкиДанных.Равно,
		"Родитель",
		Истина
	);
	
КонецПроцедуры

// Процедура устанавливает отбор по владельцу характеристик. Используется
// в форме подбора справочника "Характеристики номенклатуры".
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьОтборПоНоменклатуреИсходногоКачества(Форма) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыДругогоКачества.НоменклатураБрак
	|ИЗ
	|	РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	|ГДЕ
	|	ТоварыДругогоКачества.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Форма.НоменклатураИсходногоКачества);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	// Создать группу элементов отбора.
	ГруппаЭлементовОтбора = 
	ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Форма.Список.Отбор.Элементы,
		"ПоискПоНоменклатурИсходногоКачества",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ
	);
	
	// Установить элемент отбора в группе.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаЭлементовОтбора,
		"Ссылка",
		Таблица.ВыгрузитьКолонку("НоменклатураБрак"),
		ВидСравненияКомпоновкиДанных.ВСписке,
		"ПоискПоНоменклатурИсходногоКачества",
		Истина
	);
	
КонецПроцедуры

// Процедура устанавливает отбор по владельцу характеристик. Используется
// в форме подбора справочника "Характеристики номенклатуры".
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьОтборПоКачествуНоменклатуры(Форма) Экспорт
	
	МассивКачевств = Новый Массив;
	Для Каждого ЭлементСписка Из Форма.СписокКачества Цикл
		
		Если ЭлементСписка.Пометка Тогда
			МассивКачевств.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивКачевств.Количество()>0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Форма.Список.Отбор,
			"Качество",
			МассивКачевств,
			ВидСравненияКомпоновкиДанных.ВСписке,
			,
		);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает отбор по группе номенклатыр в списке номенклатуры.
// Если на форме используется вариант навигации отличный от навигации по иерархии,
// то отбор не устанавливается.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоИерархииНоменклатуры(Форма) Экспорт
	
	Если НЕ Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Форма.ВариантНавигации = "ПоИерархии" Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоИерархииНоменклатуры = Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
	
	Если ОтборПоИерархииНоменклатуры = Неопределено Тогда
		ОтборПоИерархииНоменклатуры = Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Форма.Список.Отбор,
		"Родитель",
		ОтборПоИерархииНоменклатуры,
		ВидСравненияКомпоновкиДанных.Равно,
		"Родитель",
		Истина
	);
	
КонецПроцедуры

// Процедура добавляет отбор в указанную коллекцию области отбора.
//
// Параметры:
//	ОбластьОтбора (ОтборКомпоновкиДанных) - отбор динамического списка,
//	ЛевоеЗначение (Строка) - путь к данным поля отбора,
//	ПравоеЗначение (Произвольный) - значение отбора,
//	ВидОтбора (ВидСравненияКомпоновкиДанных) - вид сравнения,
//	Представление (Строка) - представление элемента отбора.
//
Процедура ДобавитьЭлементОтбора(ОбластьОтбора, ЛевоеЗначение, ПравоеЗначение, ВидОтбора, Представление = "") Экспорт
	
	ЭлементОтбора                   = ОбластьОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	ЭлементОтбора.ПравоеЗначение    = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения  = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ВидСравнения      = ВидОтбора;
	
	Если ЗначениеЗаполнено(Представление) Тогда
		ЭлементОтбора.Представление      = Представление;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов на формах подборов.

// Процедура вызывается из форм подборов при изменении флажка использования фильтров.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииИспользованияФильтров(Форма) Экспорт
	
	Если Форма.ИспользоватьФильтры Тогда
		
		Если Форма.ВариантНавигации = "ПоСвойствам" Тогда
			УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
		ИначеЕсли Форма.ВариантНавигации = "ПоИерархии" Тогда
			УстановитьОтборПоРодителюТекущейСтрокиНоменклатуры(Форма);
			УстановитьОтборПоИерархииНоменклатуры(Форма);
		ИначеЕсли Форма.ВариантНавигации = "Совместно" Тогда
			УстановитьОтборПоНоменклатуреПродаваемойСовместно(Форма);
		ИначеЕсли Форма.ВариантНавигации = "ПоТоварамДругогоКачества" Тогда
			УстановитьОтборПоНоменклатуреИсходногоКачества(Форма);
			УстановитьОтборПоКачествуНоменклатуры(Форма);
		КонецЕсли;
		
	Иначе
		УдалитьОтборПоИерархииНоменклатуры(Форма);
		УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
		УдалитьОтборПоНоменклатуреИсходногоКачества(Форма);
		УдалитьОтборПоКачествуНоменклатуры(Форма);
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФильтров(Форма);
	УстановитьОтборПоДиапазонуЦен(Форма);
	ПерейтиКСпискуНоменклатуры(Форма);
	
КонецПроцедуры

// Процедура вызывается из форм подборов при изменении флажка использования фильтров для номенклатуры поставщика.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииИспользованияФильтровНоменклатурыПоставщика(Форма) Экспорт
	
	Если Форма.ИспользоватьФильтрНоменклатураПоставщика Тогда
		
		УстановитьОтборПоРодителюТекущейСтрокиНоменклатурыПоставщика(Форма);
		УстановитьОтборПоИерархииНоменклатурыПоставщика(Форма);
		
	Иначе
		УдалитьОтборПоИерархииНоменклатурыПоставщика(Форма);
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФильтраНоменклатурыПоставщика(Форма);
	УстановитьОтборПоДиапазонуЦенПоставщика(Форма);
	
КонецПроцедуры

// Процедура вызывается из форм подборов при изменении варианта навигации.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора,
//	Объект (ОбработкаОбъект) - обработка подбора товаров, объект документа.
//
Процедура ПриИзмененииВариантаНавигации(Форма) Экспорт
	
	УстановитьВариантНавигацииИИспользоватьФильтрДоТДК(Форма);
	УстановитьСтраницуВариантаНавигации(Форма);
	УдалитьОтборПоИерархииНоменклатуры(Форма);
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	УдалитьОтборПоНоменклатуреИсходногоКачества(Форма);
	УдалитьОтборПоКачествуНоменклатуры(Форма);
	
	Если Форма.ВариантНавигации = "ПоИерархии" Тогда
		УстановитьОтборПоИерархииНоменклатуры(Форма);
	ИначеЕсли Форма.ВариантНавигации = "ПоСвойствам" Тогда
		УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	ИначеЕсли Форма.ВариантНавигации = "Совместно" Тогда
		УстановитьОтборПоНоменклатуреПродаваемойСовместно(Форма);
	ИначеЕсли Форма.ВариантНавигации = "ПоТоварамДругогоКачества" Тогда
		УстановитьОтборПоНоменклатуреИсходногоКачества(Форма);
		УстановитьОтборПоКачествуНоменклатуры(Форма);
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		ПерейтиКСпискуНоменклатуры(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается из форм подбороа при изменении вида номенклатуры.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииВидаНоменклатуры(Форма) Экспорт
	
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	
	Если НЕ ЗначениеЗаполнено(Форма.ВидНоменклатуры) Тогда
		ОчиститьДеревоОтборов(Форма);
		УстановитьОтборПоВидуНоменклатуры(Форма);
	Иначе
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) 
			ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма)
			ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма) Тогда
			СохранитьПараметрыДереваОтбора(Форма, Ложь);
			ЗаполнитьДеревоОтборовНоменклатуры(Форма);
			ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);
		Иначе
			ЗаполнитьДеревоОтборовНоменклатуры(Форма);
		КонецЕсли;
		
		УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		ПерейтиКСпискуНоменклатуры(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыДереваОтбораКачествоНовый(Форма) Экспорт
	
	СтрокаТаблицы = Форма.ТаблицаПараметровОтбора.Добавить();
	СтрокаТаблицы.ИмяРеквизита = "Качество";
	СтрокаТаблицы.ЗначениеОтбора = Перечисления.ГрадацииКачества.Новый;
	СтрокаТаблицы.Представление = "Новый";
	СтрокаТаблицы.ФиксированноеЗначение = Ложь;
	СтрокаТаблицы.Отбор = Истина;
	
КонецПроцедуры

// Процедура вычисляет максимально допустимое значение процента ручной скидки на основании
// ограничений по пользователю и соглашению, и устанавливает в реквизите формы подбора.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьМаксимальныйПроцентРучнойСкидки(Форма) Экспорт
	
	МаксПроцентРучнойСкидкиПользователя = 100;
	МаксПроцентРучнойСкидкиСоглашения = 100;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма)
		ИЛИ  ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма) Тогда
		
		Если ТипЗнч(ПользователиКлиентСервер.АвторизованныйПользователь()) <> Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям") Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	НастройкиПродажДляПользователей.ПроцентРучнойСкидки КАК Скидка
				|ИЗ
				|	Справочник.НастройкиПродажДляПользователей КАК НастройкиПродажДляПользователей
				|ГДЕ
				|	НастройкиПродажДляПользователей.ОграничиватьРучныеСкидки = ИСТИНА
				|	И НастройкиПродажДляПользователей.Владелец = &ТекущийПользователь";
				Запрос.УстановитьПараметр("ТекущийПользователь",Пользователи.ТекущийПользователь());
				РезультатЗапрос = Запрос.Выполнить();
				Если Не РезультатЗапрос.Пустой() Тогда
					МаксПроцентРучнойСкидкиПользователя = РезультатЗапрос.Выгрузить()[0].Скидка;
				КонецЕсли;
				
				УстановитьПривилегированныйРежим(Ложь);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
		
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма) Тогда
	    Соглашение = Форма.Соглашение;
	Иначе
		Соглашение = Форма.Объект.Соглашение;
	КонецЕсли;
	
	Если Не Соглашение.Пустая() Тогда
		
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
			
			СтруктураРеквизитов = Новый Структура("ПроцентРучнойСкидки");
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение, СтруктураРеквизитов);	
			
			МаксПроцентРучнойСкидкиСоглашения = Реквизиты.ПроцентРучнойСкидки;
			
		ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям") Тогда

			СтруктураРеквизитов = Новый Структура("ПроцентРучнойСкидки,ОграничиватьРучныеСкидки");
			
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение, СтруктураРеквизитов);	
			Если Реквизиты.ОграничиватьРучныеСкидки Тогда
				МаксПроцентРучнойСкидкиСоглашения = Реквизиты.ПроцентРучнойСкидки;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.МаксПроцентРучнойСкидки = Мин(МаксПроцентРучнойСкидкиПользователя,МаксПроцентРучнойСкидкиСоглашения);
	
КонецПроцедуры		

// Процедура вызывается из форм подборов при изменении значения сегмента номенклатуры.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииУсловияЦеныПоставщика(Форма) Экспорт
	
	Если НЕ УсловиеЦеныПоставщикаИзменилось(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборПоУсловиеЦеныПоставщика(Форма);
	УстановитьОтборПоДиапазонуЦенПоставщика(Форма);
	
КонецПроцедуры

// Процедура для сброса флажков для свойств номенклатуры
// в контекстном меню списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура СброситьОтборыПоСвойствам(Форма) Экспорт
	
	Для Каждого ОтборПервыйУровень Из Форма.ДеревоОтборов.ПолучитьЭлементы() Цикл
		
		Если ОтборПервыйУровень.Отбор Тогда
			
			ОтборПервыйУровень.Отбор = Ложь;
			
			Для Каждого ОтборВторойУровень Из ОтборПервыйУровень.ПолучитьЭлементы() Цикл
				
				ОтборВторойУровень.Отбор = Ложь;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Процедура вызывается при выполнени команды отображения товаров другого качества
// в контекстном меню списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоНоменклатуреДругогоКачества(Форма) Экспорт
	
	Если Форма.Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УстановитьВариантНавигацииИИспользоватьФильтрДоТДК(Форма);
	
	Форма.ИспользоватьФильтры = Истина;
	Форма.ВариантНавигации = "ПоТоварамДругогоКачества";
	Форма.Элементы.ВариантНавигации.Доступность = Истина;
	
	ТекущаяСтрока = Форма.Элементы.Список.ТекущаяСтрока;
	Форма.НоменклатураИсходногоКачества = ТекущаяСтрока.Ссылка;
	
	УстановитьСтраницуВариантаНавигации(Форма);
	УдалитьОтборПоИерархииНоменклатуры(Форма);
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	УдалитьОтборПоНоменклатуреИсходногоКачества(Форма);
	
	НоменклатураИсходногоКачестваПриИзменении(Форма);
	
	ПерейтиКСпискуНоменклатуры(Форма);
	
КонецПроцедуры

// Процедура вызывается из форм подборов при изменении значения сегмента номенклатуры.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииСегментаНоменклатуры(Форма) Экспорт
	
	Если НЕ СегментНоменклатурыИзменился(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборПоСегментуНоменклатуры(Форма);
	УстановитьОтборПоДиапазонуЦен(Форма);
	
КонецПроцедуры

// Процедура вызывается при выполнени команды отображения товаров с аналогичными свойствами
// в контекстном меню списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииОтображенияТоваровСоСхожимиСвойствами(Форма) Экспорт
	
	ТекущаяСтрока = Форма.Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтфильтроватьПоАналогичнымСвойствам(Форма, ТекущаяСтрока.Ссылка);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		ПерейтиКСпискуНоменклатуры(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при активизации строки табличного поля иерархии номенклатуры.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка, форма подбора.
//
Процедура ПриАктивизацииСтрокиИерархииНоменклатуры(Форма) Экспорт
	
	Если Форма.ТекущаяИерархияНоменклатуры = Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ТекущаяИерархияНоменклатуры = Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
	УстановитьОтборПоИерархииНоменклатуры(Форма);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) 
		И Форма.НавигацияПоХарактеристикам Тогда
		ПерейтиКСпискуНоменклатуры(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при активизации строки табличного поля иерархии номенклатуры.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка, форма подбора.
//
Процедура ПриАктивизацииСтрокиИерархииНоменклатурыПоставщика(Форма) Экспорт
	
	Если Форма.ТекущаяИерархияНоменклатурыПоставщика = Форма.Элементы.ИерархияНоменклатурыПоставщика.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ТекущаяИерархияНоменклатурыПоставщика = Форма.Элементы.ИерархияНоменклатурыПоставщика.ТекущаяСтрока;
	УстановитьОтборПоИерархииНоменклатурыПоставщика(Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Отборы по наличию, по ценам.

// Процедура устанавливает отбор "Только в наличии" на список номенклатуры
// и характеристик в формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьОтборТолькоВНаличии(Форма) Экспорт
	
	// Для списка номенклатуры.
	ГруппаОтбораТолькоВНаличииНоменклатура = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Форма.Список.Отбор.Элементы,
		"ГруппаТолькоВНаличии",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтбораТолькоВНаличииНоменклатура,
		"ВНаличииОстаток",
		0,
		ВидСравненияКомпоновкиДанных.Больше,
		,
		Форма.ТолькоВНаличии
	);
	
	// Для списка характеристик.
	ГруппаОтбораТолькоВНаличииХарактеристики = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Форма.ПодборТаблицаХарактеристики.Отбор.Элементы,
		"ГруппаТолькоВНаличии",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтбораТолькоВНаличииХарактеристики,
		"ВНаличииОстаток",
		0,
		ВидСравненияКомпоновкиДанных.Больше,
		,
		Форма.ТолькоВНаличии
	);
	
	УстановитьОтборПоДиапазонуЦен(Форма);
	
	УстановитьАктивныйСписокНаФорме(Форма);
	
КонецПроцедуры

// Процедура устанавливает отбор по диапазону цен на список номенклатуры поставщика в формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора товаров.
//
Процедура УстановитьОтборПоДиапазонуЦенПоставщика(Форма) Экспорт
	
	Если НЕ ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьФильтраПоЦенамПоставщика(Форма);
	
	ФильтрЦенамПоставщикаДоступен = ФильтрЦенамПоставщикаДоступен(Форма);
	
	// Отбор на список номенклатуры поставщика.
	ГруппаОтбораЦенаНоменклатура = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Форма.ПодборТаблицаНоменклатураПоставщика.Отбор.Элементы,
		"ЦеныНоменклатуры",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
	);
	
	ГруппаОтборПоЦене = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ГруппаОтбораЦенаНоменклатура.Элементы,
		"ОтборПоЦене",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ
	);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоЦене,
		"Цена",
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		Форма.ОтборЦенаОтПоставщика,
		"Цена",
		ФильтрЦенамПоставщикаДоступен И ЗначениеЗаполнено(Форма.ОтборЦенаОтПоставщика)
	);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоЦене,
		"Цена",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		Форма.ОтборЦенаДоПоставщика,
		"Цена",
		ФильтрЦенамПоставщикаДоступен И ЗначениеЗаполнено(Форма.ОтборЦенаДоПоставщика)
	);
	
КонецПроцедуры

// Процедура устанавливает отбор по диапазону цен на список номенклатуры и 
// список характеристик в формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора товаров.
//
Процедура УстановитьОтборПоДиапазонуЦен(Форма) Экспорт
	
	Если НЕ ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьФильтраПоЦенам(Форма);
	
	ФильтрЦенамДоступен = ФильтрЦенамДоступен(Форма);
	
	// Отбор на список номенклатуры.
	ГруппаОтбораЦенаНоменклатура = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Форма.Список.Отбор.Элементы,
		"ЦеныНоменклатуры",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли
	);
	
	ГруппаОтборПоЦене = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ГруппаОтбораЦенаНоменклатура.Элементы,
		"ОтборПоЦене",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ
	);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоЦене,
		"Цена",
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		Форма.ОтборЦенаОт,
		"Цена",
		ФильтрЦенамДоступен И ЗначениеЗаполнено(Форма.ОтборЦенаОт)
	);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоЦене,
		"Цена",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		Форма.ОтборЦенаДо,
		"Цена",
		ФильтрЦенамДоступен И ЗначениеЗаполнено(Форма.ОтборЦенаДо)
	);
	
	// Отбор на список характеристик.
	СписокВариантов = Новый СписокЗначений();
	СписокВариантов.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры);
	СписокВариантов.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораЦенаНоменклатура,
		"ИспользованиеХарактеристик",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокВариантов,
		"ИспользованиеХарактеристик",
		ФильтрЦенамДоступен И ЗначениеЗаполнено(Форма.ОтборЦенаОт)
	);
	
	// Установить фильтр на список характеристик.
	ГруппаОтбораЦенаХарактеристики = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Форма.ПодборТаблицаХарактеристики.Отбор.Элементы,
		"ЦенаХарактеристики",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ
	);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораЦенаХарактеристики,
		"Цена",
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		Форма.ОтборЦенаОт,
		"Цена",
		ФильтрЦенамДоступен И ЗначениеЗаполнено(Форма.ОтборЦенаОт)
	);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораЦенаХарактеристики,
		"Цена",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		Форма.ОтборЦенаДо,
		"Цена",
		ФильтрЦенамДоступен И ЗначениеЗаполнено(Форма.ОтборЦенаДо)
	);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Отборы, вспомогательные.

// Функция возвращает массив свойств по которым устанавливается отбор при отображении
// списка товаров с аналогичными свойствами в формах подборов.
//
// Параметры:
//	Номенклатура (СправочникСсылка.Номенклатура) - номенклатура для которой формируется массив свойств.
//
// Возвращаемое значение:
//	Массив. Массив свойств и значений свойств элемента номенклатуры по которым нужно
//	будет отобрать товары.
//
Функция СвойстваДляПодбораТоваровСАналогичнымиСвойствами(Номенклатура) Экспорт
	
	ДополнительныеРеквизиты = Новый Массив;
	Свойства                = Новый Массив;
	
	// Получить имена и значения реквизитов которые используются для отбора.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РеквизитыБыстрогоОтбораНоменклатуры.ИмяРеквизита   КАК ИмяРеквизита,
	|	РеквизитыБыстрогоОтбораНоменклатуры.Свойство       КАК Свойство,
	|	РеквизитыБыстрогоОтбораНоменклатуры.ЭтоДопРеквизит КАК ЭтоДопРеквизит
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораНоменклатуры КАК РеквизитыБыстрогоОтбораНоменклатуры
	|ГДЕ
	|	РеквизитыБыстрогоОтбораНоменклатуры.Ссылка = &ВидНоменклатуры");
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	
	КоличествоПолей = 0;
	
	ТекстЗапроса = "ВЫБРАТЬ";
	
	РеквизитыБыстрогоОтбораНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из РеквизитыБыстрогоОтбораНоменклатуры Цикл
		
		Если СтрокаТЧ.ЭтоДопРеквизит Тогда
			ДополнительныеРеквизиты.Добавить(СтрокаТЧ.Свойство);
		Иначе
			
			КоличествоПолей = КоличествоПолей + 1;
			
			Если КоличествоПолей = 1 Тогда
				ТекстЗапроса = ТекстЗапроса + " " + "Т." + СтрокаТЧ.ИмяРеквизита + " " + "КАК " + СтрокаТЧ.ИмяРеквизита;
			Иначе
				ТекстЗапроса = ТекстЗапроса + ", " + "Т." + СтрокаТЧ.ИмяРеквизита + " " + "КАК " + СтрокаТЧ.ИмяРеквизита;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоПолей > 0 Тогда
		
		ТекстЗапроса = ТекстЗапроса +" " + "Из Справочник.Номенклатура КАК Т ГДЕ Т.Ссылка = &Номенклатура";
		
		Запрос = Новый Запрос(
		ТекстЗапроса +
		";
		|ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
		|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура
		|	И НоменклатураДополнительныеРеквизиты.Свойство В (&ДополнительныеРеквизиты)");
		
		Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
		Запрос.УстановитьПараметр("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		
		Результат = Запрос.ВыполнитьПакет();
		
		Выборка = Результат[0].Выбрать(); // обход реквизитов номенклатуры
		
		Пока Выборка.Следующий() Цикл
			
			Для Каждого Колонка Из Результат[0].Колонки Цикл
				
				НоваяСтрока = Новый Структура("ИмяРеквизита, Значение, Представление");
				
				НоваяСтрока.ИмяРеквизита = Колонка.Имя;
				НоваяСтрока.Значение     = Выборка[Колонка.Имя];
				
				Реквизит = Метаданные.Справочники.Номенклатура.Реквизиты.Найти(Колонка.Имя);
				
				НоваяСтрока.Представление = Реквизит.Синоним;
				
				Свойства.Добавить(НоваяСтрока); // в выходной массив добавляется имя и значение реквизита элемента номенклатуры
				
			КонецЦикла;
			
		КонецЦикла;
		
		Выборка = Результат[1].Выбрать(); // обход дополнительных реквизитов номенклатуры
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Новый Структура("Свойство, Значение, Представление");
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.Представление = Строка(Выборка.Свойство);
			
			Свойства.Добавить(НоваяСтрока); // в выходной массив добавляется имя и значение доп.реквизита вида номенклатуры
			
		КонецЦикла;
		
	Иначе
		
		// В том случае, если реквизиты вида номенклатуры не включены в панель быстрого отбора,
		// то в выходной массив добавляются только значения доп.реквизитов вида номенклатуры.
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Свойство        КАК Свойство,
		|	НоменклатураДополнительныеРеквизиты.Значение        КАК Значение
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура
		|	И НоменклатураДополнительныеРеквизиты.Свойство В (&ДополнительныеРеквизиты)");
		
		Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
		Запрос.УстановитьПараметр("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Новый Структура("Свойство, Значение, Представление");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.Представление = Строка(Выборка.Свойство);
			
			Свойства.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

// Процедура устанавливает отбор на список номенклатуры по аналогичным свойствам
// вида номенклатуры переданного товара.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора,
//	Номенклатура (СправочникСсылка.Номенклатура) - товар по значениям свойств которого необходимо 
//	установить отбор списка номенклатуры.
//
Процедура ОтфильтроватьПоАналогичнымСвойствам(Форма, Номенклатура) Экспорт
	
	// Включить использование фильтров..
	Форма.ИспользоватьФильтры = Истина;
	УстановитьДоступностьЭлементовФильтров(Форма);
	
	// Установить вариант навигации - "по свойствам".
	Форма.ВариантНавигации = "ПоСвойствам";
	Форма.Элементы.ВариантыНавигации.ТекущаяСтраница = Форма.Элементы.НавигацияВидыНоменклатуры;
	
	// Установить вид номенклатуры и заполнить дерево отборов.
	Форма.ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	УстановитьОтборПоВидуНоменклатуры(Форма);
	ЗаполнитьДеревоОтборовНоменклатуры(Форма);
	
	// Получить список свойств и значений вида номенклатуры текущего товара..
	СвойстваДляПодбораТоваровСАналогичнымиСвойствами = СвойстваДляПодбораТоваровСАналогичнымиСвойствами(Номенклатура);
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	// Пройти по полученному списку свойств, проставить флажки использования.
	Для Каждого ДополнительноеСвойство Из СвойстваДляПодбораТоваровСАналогичнымиСвойствами Цикл
		
		Для Каждого Свойство Из ДеревоОтборов.Строки Цикл
			
			Если ЗначениеЗаполнено(Свойство.ИмяРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ЗначениеСвойства Из Свойство.Строки Цикл
				
				Если НЕ (ДополнительноеСвойство.Представление = Свойство.Представление) Тогда
					Продолжить;
				КонецЕсли;
				
				// Включить использование свойства в отборе, если значение дерева отбора аналогично 
				// значению списка свойств вида текущей номенклатуры.
				ЗначениеСвойства.Отбор = (ЗначениеСвойства.ЗначениеОтбора = ДополнительноеСвойство.Значение);
				
				Если ЗначениеСвойства.Отбор Тогда
					Свойство.Отбор = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
	// Флажки расставлены, теперь применить отборы к списку номенклатуры.
	УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск на формах подборов.

// Функция выполняет поиск товаров по строке поиска.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//	Булево.
//	Истина - удалось выполнить поиск, элементы найдены,
//	Ложь   - не удалось выполнить поиск.
//
Функция ВыполнитьПоискТоваров(Форма) Экспорт
	
	РезультатПоиска = СтруктураРезультатовПоиска();
	ПоискВыполнен = Ложь;
	СтрокаПоиска = Форма.СтрокаПоиска;
	
	Форма.ПодборПоискНеУдачный = Ложь;
	Форма.КодОшибкиПоиска = "";
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		
		Если НЕ Форма.ИспользоватьПолнотекстовыйПоиск ИЛИ Форма.НайтиПоТочномуСоответствию Тогда
			ВыполнитьНеПолнотекстовыйПоискТоваров(Форма, РезультатПоиска);
		Иначе
			ВыполнитьПолнотекстовыйПоискТоваров(Форма, РезультатПоиска);
		КонецЕсли;
		
		ПоискВыполнен = Истина;
		
	КонецЕсли;
	
	Форма.ПодборПоискНеУдачный = (ПоискВыполнен И ЗначениеЗаполнено(РезультатПоиска.КодОшибки));
	Форма.КодОшибкиПоиска = РезультатПоиска.КодОшибки;
	
	// Отбор на список номенклатуры (или список характеристик для формы выбора
	// справочника характеристик номенклатуры).
	УстановитьОтборСпискаПоСтрокеПоиска(
		Форма.Список.Отбор.Элементы, 
		РезультатПоиска.Номенклатура,
		ПоискВыполнен);
	
	// Отбор на список характеристик.
	// АСТЭК
	//Если ЭтоФормаПодбора Тогда
	//	УстановитьОтборСпискаПоСтрокеПоиска(
	//		Форма.ПодборТаблицаХарактеристики.Отбор.Элементы, 
	//		РезультатПоиска.ХарактеристикиНоменклатуры,
	//		ПоискВыполнен);
	//	
	//	Форма.ЕстьФильтрПоПоиску = ПоискВыполнен;
	//КонецЕсли;
	
	// Отбор на список номенклатуры поставщиков.
	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
		
		// Список номенклатуры поставщиков отображается в виде иерархического списка.
		// При выполнении поиска по строке следует отключить вывод иерархии,
		// а при отмене поиска - включить.
		Форма.Элементы.ПодборТаблицаНоменклатураПоставщика.Отображение = ?(ПоискВыполнен, 
			ОтображениеТаблицы.Список, 
			ОтображениеТаблицы.ИерархическийСписок);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Форма.ПодборТаблицаНоменклатураПоставщика.Отбор,
			"ЭтоГруппа",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно,
			"ЭтоГруппа",
			ПоискВыполнен);
		
		УстановитьОтборСпискаПоСтрокеПоиска(
			Форма.ПодборТаблицаНоменклатураПоставщика.Отбор.Элементы, 
			РезультатПоиска.НоменклатураПоставщиков,
			ПоискВыполнен);
		
	КонецЕсли;
	
	УстановитьОтборПоДиапазонуЦен(Форма);
	
	Возврат ПоискВыполнен;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции сохранения и восстановления настроек.

// Процедура сохраняет значения реквизитов на форме в хранилище общих настроек.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка, форма выбора.
//
Процедура СохранитьНастройкиФормы(Форма) Экспорт
	
	НастройкиФормы = НастройкиФормы(Форма);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Форма.КодФормы, , НастройкиФормы);
	СохранитьСпискиВыбора(Форма);
	
КонецПроцедуры

// Процедура сохраняет значения реквизитов на форме подбора в хранилище общих настроек.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура СохранитьНастройкиФормыПодбора(Форма) Экспорт
	
	НастройкиФормыПодбора = НастройкиФормыПодбора(Форма);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Форма.КодФормы, , НастройкиФормыПодбора);
	
КонецПроцедуры

// Процедура восстанавливает значение реквизитов на форме из хранилища общих настроек.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка, форма выбора.
//
Процедура УстановитьЗначенияПоНастройкамФормы(Форма) Экспорт
	
	// Установить значения по умолчанию.
	Форма.ИспользоватьФильтры         = Истина;
	Форма.ВариантНавигации            = "ПоИерархии";
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма)  
		ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма)
		ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма)Тогда
		
		Форма.ИспользоватьФильтрыДоТДК = Истина;
		Форма.ВариантНавигацииДоТДК = "ПоИерархии";
	КонецЕсли;
	
	Форма.ВидНоменклатуры             = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	Форма.ТекущаяИерархияНоменклатуры = Справочники.Номенклатура.ПустаяСсылка();
	
	// Если есть сохраненные настройки, то установить значения по настройкам.
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Форма.КодФормы);
	
	Если Настройки <> Неопределено Тогда
		
		Если Настройки.Свойство("ИспользоватьФильтры") Тогда
			Форма.ИспользоватьФильтры = Настройки.ИспользоватьФильтры;
		КонецЕсли;
		
		Если Настройки.Свойство("ИспользоватьФильтрНоменклатураПоставщика") Тогда
			Форма.ИспользоватьФильтрНоменклатураПоставщика = Настройки.ИспользоватьФильтрНоменклатураПоставщика;
		КонецЕсли;
		
		Если Настройки.Свойство("ВариантНавигации") Тогда
			Форма.ВариантНавигации = Настройки.ВариантНавигации;
		КонецЕсли;
		
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма)  
			ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма)
			ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма)Тогда
			
			Форма.ИспользоватьФильтрыДоТДК = Форма.ИспользоватьФильтры;
			Форма.ВариантНавигацииДоТДК = Форма.ВариантНавигации;
		КонецЕсли;
		
		Если Настройки.Свойство("ТаблицаПараметровОтбора") Тогда
			
			Если ЗначениеЗаполнено(Настройки.ТаблицаПараметровОтбора) Тогда
				Форма.ТаблицаПараметровОтбора.Загрузить(Настройки.ТаблицаПараметровОтбора);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Настройки.Свойство("ВидНоменклатуры") Тогда
			
			Если ЗначениеЗаполнено(Настройки.ВидНоменклатуры) Тогда
				
				// Проверить, что ссылка указывает на существующий объект.
				Если Настройки.ВидНоменклатуры.ПолучитьОбъект() <> Неопределено Тогда
					
					Форма.ВидНоменклатуры = Настройки.ВидНоменклатуры;
					
					Если Форма.ВариантНавигации = "ПоИерархии" Тогда
						ЗаполнитьДеревоОтборовНоменклатуры(Форма);
						
						Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма)  
							ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма)
							ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма)Тогда
							
							ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если Форма.ВариантНавигации = "ПоТоварамДругогоКачества" Тогда
						
						ЗаполнитьДеревоОтборовНоменклатуры(Форма);
						
						Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма)  
							ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма)
							ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма)Тогда
							
							ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Настройки.Свойство("ТекущаяИерархияНоменклатуры") Тогда
			
			Если ЗначениеЗаполнено(Настройки.ТекущаяИерархияНоменклатуры) Тогда
				
				// Проверить, что ссылка указывает на существующий объект.
				Если Настройки.ТекущаяИерархияНоменклатуры.ПолучитьОбъект() <> Неопределено Тогда
					Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Настройки.ТекущаяИерархияНоменклатуры;
					Форма.ТекущаяИерархияНоменклатуры                 = Настройки.ТекущаяИерархияНоменклатуры;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Настройки.Свойство("ТекущаяИерархияНоменклатурыПоставщика") Тогда
			
			Если ЗначениеЗаполнено(Настройки.ТекущаяИерархияНоменклатурыПоставщика) Тогда
				
				// Проверить, что ссылка указывает на существующий объект.
				Если Настройки.ТекущаяИерархияНоменклатурыПоставщика.ПолучитьОбъект() <> Неопределено Тогда
					Форма.Элементы.ИерархияНоменклатурыПоставщика.ТекущаяСтрока = Настройки.ТекущаяИерархияНоменклатурыПоставщика;
					Форма.ТекущаяИерархияНоменклатурыПоставщика = Настройки.ТекущаяИерархияНоменклатурыПоставщика;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Настройки.Свойство("НоменклатураИсходногоКачества") Тогда
			
			Если ЗначениеЗаполнено(Настройки.НоменклатураИсходногоКачества) Тогда
				
				// Проверить, что ссылка указывает на существующий объект.
				Если Настройки.НоменклатураИсходногоКачества.ПолучитьОбъект() <> Неопределено Тогда
					Форма.НоменклатураИсходногоКачества = Настройки.НоменклатураИсходногоКачества;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСтраницуВариантаНавигации(Форма);
	
	Если Форма.ВариантНавигации = "ПоСвойствам" Тогда
		ПриИзмененииВидаНоменклатуры(Форма);
	ИначеЕсли Форма.ВариантНавигации = "ПоИерархии" Тогда
		УстановитьОтборПоТекущейИерархииНоменклатуры(Форма);
	КонецЕсли;
	
	ПриИзмененииИспользованияФильтров(Форма);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		УстановитьОтборПоТекущейИерархииНоменклатурыПоставщика(Форма);
		ПриИзмененииИспользованияФильтровНоменклатурыПоставщика(Форма);
	КонецЕсли;
	
	СпискиВыбораКлиентСервер.Загрузить("ИсторияПоискаНоменклатуры", Форма.Элементы.СтрокаПоиска.СписокВыбора);
	СпискиВыбораКлиентСервер.Загрузить("ИсторияВыбораСегментовНоменклатуры", Форма.Элементы.СегментНоменклатуры.СписокВыбора);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		СпискиВыбораКлиентСервер.Загрузить("ИсторияПоискаНоменклатуры", Форма. Элементы.СтрокаПоискаНоменклатураПоставщика.СписокВыбора);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значения реквизитов формы, специфичные для формы подбора.
// Вызывается из форм подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьЗначенияПоНастройкамФормыПодбора(Форма) Экспорт
	
	ЭтоФормаПомощникаПродаж = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	
	УстановитьЗначенияПоНастройкамФормы(Форма);
	
	Форма.ТолькоВНаличии = Ложь;
	Форма.ОтображатьОстатки = Истина;
	
	Если НЕ ЭтоФормаПомощникаПродаж Тогда
		Форма.ПоказыватьПодобранныеТовары = Истина;
	КонецЕсли;
	
	Форма.ЗапрашиватьКоличество = Истина;
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Форма.КодФормы);
	
	Если НЕ (Настройки = Неопределено) Тогда
		
		Если Настройки.Свойство("ТолькоВНаличии") Тогда
			
			Форма.ТолькоВНаличии = Настройки.ТолькоВНаличии;
			
			// В форме помощника продаж значение реквизита "Склад" при открытии всегда не заполнено,
			// значит установка фильтра "Только в наличии" (без указания склада) не имеет смысла.
			Если ЭтоФормаПомощникаПродаж Тогда
				Форма.ТолькоВНаличии = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Настройки.Свойство("ОтображатьОстатки") Тогда
			Форма.ОтображатьОстатки = Настройки.ОтображатьОстатки;
		КонецЕсли;
		
		Если Настройки.Свойство("ПоказыватьПодобранныеТовары") Тогда
			
			Если НЕ ЭтоФормаПомощникаПродаж Тогда
				Форма.ПоказыватьПодобранныеТовары = Настройки.ПоказыватьПодобранныеТовары;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Настройки.Свойство("ЗапрашиватьКоличество") Тогда
			Форма.ЗапрашиватьКоличество = Настройки.ЗапрашиватьКоличество;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.ЗапрашиватьКоличествоЦену.Пометка = Форма.ЗапрашиватьКоличество;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции заполнения форм по параметрам.

// Процедура заполняет складские настройки формы подбора. Заполняет список доступных
// складов и устанавливает видимость колонки корзины.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьСкладскиеНастройкиПоПараметрам(Форма) Экспорт
	
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	ЭтоФормаПомощникаПродаж = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	
	Если ЭтоФормаЧекаККМ ИЛИ ЭтоФормаПомощникаПродаж Тогда
		Возврат;
	КонецЕсли;
	
	Склад = Форма.Параметры.Склад;
	ЭтоГруппаСкладов = Справочники.Склады.ЭтоГруппа(Склад);
	
	Если ЗначениеЗаполнено(Склад) 
		И ЭтоГруппаСкладов Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка В ИЕРАРХИИ(&Склад)
		|	И Склады.ВыборГруппы В(&ВыборГруппыСкладов)
		|	И НЕ Склады.ЭтоГруппа");
		
		ВыборГруппыСкладов = Новый Массив();
		ВыборГруппыСкладов.Добавить(Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных);
		
		Если НЕ Форма.Параметры.РежимПодбораИсключитьГруппыДоступныеВЗаказах Тогда
			ВыборГруппыСкладов.Добавить(Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказах);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Склад", Склад);
		Запрос.УстановитьПараметр("ВыборГруппыСкладов", ВыборГруппыСкладов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Форма.Склады.Добавить(Выборка.Склад);
			Форма.Элементы.КорзинаСклад.СписокВыбора.Добавить(Выборка.Склад);
		КонецЦикла;
		
	Иначе
		
		Если ЗначениеЗаполнено(Склад) Тогда
			
			Форма.Склады.Добавить(Склад);
			Форма.Элементы.КорзинаСклад.СписокВыбора.Добавить(Склад);
			
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоСкладов = Форма.Склады.Количество();
	НесколькоСкладов = (КоличествоСкладов > 1);
	
	Форма.Элементы.КорзинаСклад.Видимость = НесколькоСкладов И Форма.Параметры.РежимПодбораИспользоватьСкладыВТабличнойЧасти;
	
	Если КоличествоСкладов = 0 Тогда
		
		Форма.ТолькоВНаличии = Ложь;
		Форма.ОтображатьОстатки = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции общего назначения.

// Функция выполняет попытку загрузить настройки из общего хранилища настроек
// по имени ключа объекта. Если настройки в общем хранилище есть, значит форма
// уже открывалась, если нет, значит это первое открытие формы.
//
// Параметры:
//		КлючОбъекта (Строка) - ключ объекта настроек формы.
//
Функция ПервоеОткрытиеФормы(КлючОбъекта) Экспорт
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта,);
	
	Если НастройкиФормы = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция возвращает владельца характеристик номенклатуры - в зависимости от настроек
// вида номенклатуры это может быть либо сам вид номенклатуры, либо конкретная номенклатура.
//
// Параметры:
//	Номенклатура (СправочникСсылка.Номенклатура) - номенклатура
//
// Возвращаемое значение:
//	СправочникСсылка.Номенклатура, СправочникСсылка.ВидыНоменклатуры, Неопределено.
//
Функция ВладелецХарактеристик(Номенклатура) Экспорт
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ВидНоменклатуры,ИспользованиеХарактеристик");
	
	Если Реквизиты.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
		Возврат Реквизиты.ВидНоменклатуры;
	ИначеЕсли Реквизиты.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
		Возврат Номенклатура;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Получение информации о цене, остатках товаров из форм подборов.

// Функция возвращает структуру - информацию о цене закупки и остатках товара.
//
// Парамметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
// Возвращаемое значение:
//	Структура. Структура с информацией о цене закупки и остатках товара.
//
Функция ЦенаЗакупкиИОстаткиТовара(Форма) 
	
	Перем СоставРазделовЗапроса;
	
	ЦенаЗакупки = Новый Структура("Цена, Упаковка, ЕдиницаИзмерения");
	ЦенаЗакупки.Цена             = 0;
	ЦенаЗакупки.Упаковка         = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	ЦенаЗакупки.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОстаткиТовара(СоставРазделовЗапроса) + ТекстЗапросаЦенаЗакупкиТовара(СоставРазделовЗапроса);
	
	Номенклатура = Форма.ТекущаяСтрокаНоменклатуры.Номенклатура;
	Характеристика = Форма.ТекущаяСтрокаХарактеристик.Характеристика;
	
	Если Форма.НавигацияПоНоменклатуреПоставщика Тогда
		
		Если Форма.Элементы.ПодборТаблицаНоменклатураПоставщика.ТекущаяСтрока = Неопределено Тогда
			Возврат Новый Структура("ТекущиеОстатки, ПланируемыеОстатки, Цена", Новый Массив, Новый Массив, ЦенаЗакупки);
		КонецЕсли;	
			
		Номенклатура = Форма.Элементы.ПодборТаблицаНоменклатураПоставщика.ТекущаяСтрока.Номенклатура;
		Характеристика = Форма.Элементы.ПодборТаблицаНоменклатураПоставщика.ТекущаяСтрока.Характеристика;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоНоменклатуреОстатки", "И Номенклатура = &Номенклатура");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоНоменклатуреОстатки", "И Номенклатура = &Номенклатура И Характеристика = &Характеристика");
	КонецЕсли;
	
	Если Форма.Склады = Неопределено Тогда
		
		ЗапросПоСкладам = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	(НЕ Склады.ЭтоГруппа)");
		
		Запрос.УстановитьПараметр("Склады", ЗапросПоСкладам.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад"));
		
	Иначе
		Запрос.УстановитьПараметр("Склады", Форма.Склады);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	Запрос.УстановитьПараметр("Валюта",         Форма.Валюта);
	Запрос.УстановитьПараметр("Соглашение",     Форма.Соглашение);
	Запрос.УстановитьПараметр("ТекущаяДата",    НачалоДня(ТекущаяДата()));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.ВыполнитьПакет();
	
	// Расчет цены закупки товара.
	Коэффициент = 1;
		
	Выборка = Результат[СоставРазделовЗапроса.Найти("РезультатЗапросаЦеныЗакупкиНоменклатуры")].Выбрать();
	
	Если Выборка.Следующий() Тогда
		Коэффициент = Выборка.Коэффициент;
		ЗаполнитьЗначенияСвойств(ЦенаЗакупки, Выборка);
	КонецЕсли;
	
	// Текущие остатки.
	Выборка = Результат[СоставРазделовЗапроса.Найти("РезультатЗапросаДоступныеТовары")].Выбрать();
	
	ТекущиеОстатки = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Новый Структура("Склад, ВНаличии, Свободно");
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
		НоваяСтрока.ВНаличии = НоваяСтрока.ВНаличии / Коэффициент;
		НоваяСтрока.Свободно = НоваяСтрока.Свободно / Коэффициент;
		
		ТекущиеОстатки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	// Планируемые остатки.
	Выборка = Результат[СоставРазделовЗапроса.Найти("РезультатЗапросаПланируемыеОстатки")].Выбрать();
	
	ПланируемыеОстатки = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Новый Структура("Склад, Период, Доступно");
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
		НоваяСтрока.Доступно = НоваяСтрока.Доступно / Коэффициент;
		
		ПланируемыеОстатки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат Новый Структура("ТекущиеОстатки, ПланируемыеОстатки, Цена", ТекущиеОстатки, ПланируемыеОстатки, ЦенаЗакупки);
	
КонецФункции

// Функция возвращает структуру - информацию о цене продажи и остатках товара.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
// Возвращаемое значение:
//	Структура. Структура с информацией о цене продажи и остатках товара.
//
Функция ЦенаПродажиИОстаткиТовара(Форма) 
	
	Перем СоставРазделовЗапроса;
	
	ЭтоФормаПомощникаПродаж = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаОстаткиТовара(СоставРазделовЗапроса) + ТекстЗапросаЦенаПродажиТовара(СоставРазделовЗапроса);
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоНоменклатуреОстатки", "И Номенклатура = &Номенклатура И Характеристика = &Характеристика");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоНоменклатуреОстатки", "И Номенклатура = &Номенклатура");
	КонецЕсли;
	
	Если Форма.Склады = Неопределено Тогда
		
		ЗапросПоСкладам = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	(НЕ Склады.ЭтоГруппа)");
		
		Запрос.УстановитьПараметр("Склады", ЗапросПоСкладам.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад"));
	Иначе
		Запрос.УстановитьПараметр("Склады", Форма.Склады);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", Форма.ТекущаяСтрокаНоменклатуры.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Форма.ТекущаяСтрокаХарактеристик.Характеристика);
	Запрос.УстановитьПараметр("ВидыЦен", Форма.ВидыЦен);
	
	Если ЭтоФормаПомощникаПродаж Тогда
		
		Запрос.УстановитьПараметр("Валюта", Форма.Объект.Валюта);
		Запрос.УстановитьПараметр("Соглашение", Форма.Объект.Соглашение);
		
	Иначе
		
		Запрос.УстановитьПараметр("Валюта", Форма.Валюта);
		Запрос.УстановитьПараметр("Соглашение", Форма.Соглашение);
		
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ТекущаяДата",    НачалоДня(ТекущаяДата()));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.ВыполнитьПакет();
	
	// Цена продажи.
	Коэффициент = 1;
	
	ЦенаПродажи = Новый Структура("ВидЦены, Цена, Упаковка, ЕдиницаИзмерения, Описание, СрокПоставки");
	
	ЦенаПродажи.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
	ЦенаПродажи.Цена = 0;
	ЦенаПродажи.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	ЦенаПродажи.ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	ЦенаПродажи.Описание = "";
	ЦенаПродажи.СрокПоставки = '00010101';
	
	Выборка = Результат[СоставРазделовЗапроса.Найти("РезультатЗапросаЦенаПродажиНоменклатуры")].Выбрать();
	Если Выборка.Следующий() Тогда
		
		Коэффициент = Выборка.Коэффициент;
		ЗаполнитьЗначенияСвойств(ЦенаПродажи, Выборка);
		
	КонецЕсли;
	
	// Планируемые остатки.
	Выборка = Результат[СоставРазделовЗапроса.Найти("РезультатЗапросаПланируемыеОстатки")].Выбрать();
	ПланируемыеОстатки = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Новый Структура("Склад, Период, Доступно");
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
		НоваяСтрока.Доступно = НоваяСтрока.Доступно / Коэффициент;
		ПланируемыеОстатки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	// Текущие остатки.
	Выборка = Результат[СоставРазделовЗапроса.Найти("РезультатЗапросаДоступныеТовары")].Выбрать();
	ТекущиеОстатки = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Новый Структура("Склад, ВНаличии, Свободно");
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
		НоваяСтрока.ВНаличии = НоваяСтрока.ВНаличии / Коэффициент;
		НоваяСтрока.Свободно = НоваяСтрока.Свободно / Коэффициент;
		
		ТекущиеОстатки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Возврат Новый Структура("ТекущиеОстатки, ПланируемыеОстатки, Цена", ТекущиеОстатки, ПланируемыеОстатки, ЦенаПродажи);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение текстов запросов цен, остатков.

// Функция возвращает текст запроса для получения информации о цене продажи товара.
//
// Параметры:
//	СоставРазделовЗапроса (Массив) - переменная в которую записывается массив - состав
//	разделов текста запроса.
//
// Возвращаемое значение:
//	Строка. Текст запроса для получения информации о цене продажи товара.
//
Функция ТекстЗапросаЦенаПродажиТовара(СоставРазделовЗапроса)
	
	Если СоставРазделовЗапроса = Неопределено Тогда
		СоставРазделовЗапроса = Новый Массив;
	КонецЕсли;
	
	СоставРазделовЗапроса.Добавить("РезультатЗапросаЦенаПродажиНоменклатуры");
	
	Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|			ТОГДА СоглашениеТовары.ВидЦены
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|					ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеШапка.ВидЦен
	|	КОНЕЦ КАК ВидЦены,
	|	
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0 // На товар назначена индивидуальная цена
	|			ТОГДА 1
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) // На товар назначен индивидуальный вид цен
	|			И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL
	|			ТОГДА 2
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) // На ценовую группу товара назначен вид цен
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|			И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
	|			И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ТОГДА 3
	|			КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) // Для соглашения назначен вид цен
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|			И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
	|				ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА 4
	|	КОНЕЦ КАК Описание,
	|	
	|	ВЫБОР КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0 ТОГДА СоглашениеТовары.Упаковка ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КОНЕЦ КАК Упаковка,
	|	
	|	СправочникНоменклатура.ЕдиницаИзмерения           КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент,1) КАК Коэффициент,
	|	
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|				ТОГДА СоглашениеТовары.Цена
	|			КОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|							ТОГДА СоглашениеТовары.ВидЦены
	|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|								И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|								И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|								И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|									ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|								И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|							ТОГДА СоглашениеШапка.ВидЦен
	|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
	|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
	|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(СоглашениеТовары.СрокПоставки, 0) > 0
	|				ТОГДА СоглашениеТовары.СрокПоставки
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.СрокПоставки, 0) > 0
	|						ТОГДА СоглашениеЦеновыеГруппы.СрокПоставки
	|					ИНАЧЕ СоглашениеШапка.СрокПоставки
	|				КОНЕЦ
	|		КОНЕЦ КАК СрокПоставки
	|		
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
	|		ПО (СоглашениеТовары.Ссылка = &Соглашение)
	|			И (СоглашениеТовары.Номенклатура = &Номенклатура)
	|			//астек И (СоглашениеТовары.Характеристика = &Характеристика)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = &Номенклатура)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
	|		ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
	|			И (СоглашениеЦеновыеГруппы.ЦеноваяГруппа = СправочникНоменклатура.ЦеноваяГруппа)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ),
	|				ВидЦены В (&ВидыЦен)
	|					И Номенклатура = &Номенклатура
	|					//астек И Характеристика = &Характеристика
	|					) КАК ЦеныНоменклатуры
	|		ПО (ЦеныНоменклатуры.ВидЦены =
	|			ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|					ТОГДА СоглашениеТовары.ВидЦены
	|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|						И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|						И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|						И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|							ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|						И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА СоглашениеШапка.ВидЦен
	|			КОНЕЦ)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)
	|
	|ГДЕ
	|	СоглашениеШапка.Ссылка = &Соглашение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Текст;
	
КонецФункции

// Функция возвращает текст запроса для получения информации об остатках товара.
//
// Параметры:
//	СоставРазделовЗапроса (Массив) - переменная в которую записывается массив - состав
//	разделов текста запроса.
//
// Возвращаемое значение:
//	Строка.
//	Текст запроса для получения информации об остатках товара на складах.
//
Функция ТекстЗапросаОстаткиТовара(СоставРазделовЗапроса)
	
	Если СоставРазделовЗапроса = Неопределено Тогда
		СоставРазделовЗапроса = Новый Массив();
	КонецЕсли;
	
	СоставРазделовЗапроса.Добавить("НастройкаКонтроляОстатков");
	СоставРазделовЗапроса.Добавить("ВтСвободныеОстатки");
	СоставРазделовЗапроса.Добавить("ВтГрафик");
	СоставРазделовЗапроса.Добавить("ВТПоступления");
	СоставРазделовЗапроса.Добавить("РезультатЗапросаПланируемыеОстатки");
	СоставРазделовЗапроса.Добавить("ВтРезервыПоГрафику");
	СоставРазделовЗапроса.Добавить("РезультатЗапросаДоступныеТовары");
	
	Текст = "
	|ВЫБРАТЬ
	|	СправочникСклады.Ссылка                             КАК Склад,
	|	ЕСТЬNULL(НастройкаХарактеристика.ВариантКонтроля, 
	|		ЕСТЬNULL(НастройкаНоменклатура.ВариантКонтроля,
	|			 НастройкаСклад.ВариантКонтроля))           КАК ВариантКонтроля,
	|	ЕСТЬNULL(НастройкаХарактеристика.ГраницаГрафикаДоступности,
	|		 ЕСТЬNULL(НастройкаНоменклатура.ГраницаГрафикаДоступности,
	|		 	 НастройкаСклад.ГраницаГрафикаДоступности)) КАК ГраницаГрафикаДоступности,
	|	ЕСТЬNULL(НастройкаХарактеристика.СрокПоставки,
	|		 ЕСТЬNULL(НастройкаНоменклатура.СрокПоставки,
	|		 	 НастройкаСклад.СрокПоставки))              КАК СрокПоставки
	|		 	 
	|ПОМЕСТИТЬ НастройкаКонтроляОстатков
	|
	|ИЗ
	|	Справочник.Склады КАК СправочникСклады
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаХарактеристика
	|		ПО СправочникСклады.Ссылка = НастройкаХарактеристика.Склад
	|			И (&Номенклатура = НастройкаХарактеристика.Номенклатура)
	|			И (&Характеристика = НастройкаХарактеристика.Характеристика)
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаНоменклатура
	|		ПО СправочникСклады.Ссылка = НастройкаНоменклатура.Склад
	|			И (&Номенклатура = НастройкаНоменклатура.Номенклатура)
	|			И (НастройкаНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (НастройкаХарактеристика.Склад ЕСТЬ NULL )
	|			
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаСклад
	|		ПО СправочникСклады.Ссылка = НастройкаСклад.Склад
	|			И (НастройкаСклад.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|			И (НастройкаСклад.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (НастройкаХарактеристика.Склад ЕСТЬ NULL )
	|			И (НастройкаНоменклатура.Склад ЕСТЬ NULL )
	|ГДЕ
	|	СправочникСклады.Ссылка В(&Склады)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ВНаличииОстаток КАК ВНаличии,
	|	Таблица.ВРезервеОстаток КАК ВРезерве,
	|	Таблица.Склад           КАК Склад
	|	
	|ПОМЕСТИТЬ ВтСвободныеОстатки
	|ИЗ
	|	РегистрНакопления.СвободныеОстатки.Остатки(
	|			,
	|			Склад В (&Склады)
	|			//ОтборПоНоменклатуреОстатки
	|	) КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Период                    КАК Период,
	|	Таблица.Склад                     КАК Склад,
	|	Настройка.ВариантКонтроля         КАК ВариантКонтроля,
	|	Таблица.КоличествоКонечныйОстаток КАК Количество,
	|	ВЫБОР
	|		КОГДА Таблица.КоличествоКонечныйОстаток < 0 ТОГДА
	|			0
	|		ИНАЧЕ
	|			Таблица.КоличествоКонечныйОстаток
	|	КОНЕЦ                              КАК ПоложительноеКоличество
	|	
	|ПОМЕСТИТЬ ВтГрафик
	|
	|ИЗ
	|	РегистрНакопления.ГрафикДвиженияТоваров.ОстаткиИОбороты(
	|			&ТекущаяДата,
	|			,
	|			День,
	|			,
	|			Склад В (&Склады)
	|			//ОтборПоНоменклатуреОстатки
	|		) КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкаКонтроляОстатков КАК Настройка
	|		ПО Таблица.Склад = Настройка.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Поступления.Склад             КАК Склад,
	|	СУММА(Поступления.Количество) КАК Количество,
	|	ВЫБОР
	|		КОГДА Поступления.ДатаСобытия < &ТекущаяДата ТОГДА
	|			&ТекущаяДата
	|		ИНАЧЕ
	|			Поступления.ДатаСобытия
	|	КОНЕЦ                         КАК ДатаСобытия
	|	
	|ПОМЕСТИТЬ ВТПоступления
	|
	|ИЗ
	|	РегистрНакопления.ГрафикДвиженияТоваров КАК Поступления
	|ГДЕ
	|	Поступления.Активность
	|	И Поступления.ВидДвижения    = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И Поступления.Номенклатура   = &Номенклатура
	|	И Поступления.Характеристика = &Характеристика
	|	И Поступления.Склад В
	|			(ВЫБРАТЬ
	|				Настройки.Склад
	|			ИЗ
	|				НастройкаКонтроляОстатков КАК Настройки
	|			ГДЕ
	|				Настройки.ВариантКонтроля = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомРезерва))
	|
	|СГРУППИРОВАТЬ ПО
	|	Поступления.Склад,
	|	ВЫБОР
	|		КОГДА Поступления.ДатаСобытия < &ТекущаяДата
	|			ТОГДА &ТекущаяДата
	|		ИНАЧЕ Поступления.ДатаСобытия
	|	КОНЕЦ
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад,
	|	ДатаСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(Таблица.Период)          КАК Период,
	|	Таблица.Склад                    КАК Склад,
	|	Таблица.КоличествоДоступно
	|	 + ЕСТЬNULL(Остатки.ВНаличии, 0) КАК Доступно
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтГрафик.Период КАК Период,
	|		ВтГрафик.Склад  КАК Склад,
	|		ВЫБОР
	|			КОГДА ВтГрафик.ВариантКонтроля = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика) ТОГДА
	|				МИНИМУМ(Т.ПоложительноеКоличество)
	|			ИНАЧЕ
	|				ВтГрафик.ПоложительноеКоличество
	|		КОНЕЦ КАК КоличествоДоступно
	|	ИЗ
	|		ВтГрафик КАК ВтГрафик
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтГрафик КАК Т
	|		ПО ВтГрафик.Склад      = Т.Склад
	|			И ВтГрафик.Период <= Т.Период
	|			И ВтГрафик.ВариантКонтроля = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика)
	|	
	|	ГДЕ
	|	  ВтГрафик.ВариантКонтроля <> ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомРезерва)
	|	  
	|	СГРУППИРОВАТЬ ПО
	|		ВтГрафик.Склад,
	|		ВтГрафик.Период,
	|		ВтГрафик.ПоложительноеКоличество,
	|		ВтГрафик.ВариантКонтроля
	|	) КАК Таблица
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтСвободныеОстатки КАК Остатки
	|	ПО Таблица.Склад = Остатки.Склад
	|
	|ГДЕ
	|	Таблица.КоличествоДоступно > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Склад,
	|	Таблица.КоличествоДоступно + ЕСТЬNULL(Остатки.ВНаличии, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ВТПоступления.ДатаСобытия          КАК Период,
	|	ВТПоступления.Склад                КАК Склад,
	|	ВТПоступления.Количество 
	|	+ СУММА(ЕСТЬNULL(Т.Количество, 0))
	|	+ МАКСИМУМ(
	|		ЕСТЬNULL(Остатки.ВНаличии, 0)) КАК Доступно
	|ИЗ
	|	ВТПоступления КАК ВТПоступления
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПоступления КАК Т
	|		ПО ВТПоступления.Склад          = Т.Склад
	|			И ВТПоступления.ДатаСобытия > Т.ДатаСобытия
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтСвободныеОстатки КАК Остатки
	|	ПО ВТПоступления.Склад = Остатки.Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТПоступления.Склад,
	|	ВТПоступления.Количество,
	|	ВТПоступления.ДатаСобытия
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Склад,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	График.Склад                КАК Склад,
	|	-МИНИМУМ(График.Количество) КАК Количество
	|	
	|ПОМЕСТИТЬ ВтРезервыПоГрафику
	|
	|ИЗ
	|	ВтГрафик КАК График
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкаКонтроляОстатков КАК Настройка
	|	ПО График.Склад                 = Настройка.Склад
	|	   И (Настройка.ВариантКонтроля = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика))
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Настройка.ГраницаГрафикаДоступности >= &ТекущаяДата ТОГДА 
	|			
	|				График.Период <= Настройка.ГраницаГрафикаДоступности
	|				
	|			КОГДА Настройка.СрокПоставки > 0 ТОГДА
	|
	|				График.Период <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, Настройка.СрокПоставки - 1)
	|
	|			ИНАЧЕ
	|				ЛОЖЬ
	|		КОНЕЦ
	|	И График.Количество < 0
	|
	|СГРУППИРОВАТЬ ПО
	|	График.Склад
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкаКонтроляОстатков.Склад        КАК Склад,
	|	ЕСТЬNULL(СвободныеОстатки.ВНаличии, 0) КАК ВНаличии,
	|	ЕСТЬNULL(СвободныеОстатки.ВНаличии, 0)
	|	 - ВЫБОР
	|		КОГДА НастройкаКонтроляОстатков.ВариантКонтроля = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомРезерва) ТОГДА
	|
	|			ЕСТЬNULL(СвободныеОстатки.ВРезерве, 0)
	|
	|		КОГДА НастройкаКонтроляОстатков.ВариантКонтроля = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика) ТОГДА
	|
	|			ЕСТЬNULL(РезервыПоГрафику.Количество, 0)
	|
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ                                  КАК Свободно
	|ИЗ
	|	НастройкаКонтроляОстатков КАК НастройкаКонтроляОстатков
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСвободныеОстатки КАК СвободныеОстатки
	|		ПО НастройкаКонтроляОстатков.Склад = СвободныеОстатки.Склад
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРезервыПоГрафику КАК РезервыПоГрафику
	|		ПО (СвободныеОстатки.Склад = РезервыПоГрафику.Склад)
	|			И (НастройкаКонтроляОстатков.ВариантКонтроля = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НастройкаКонтроляОстатков.Склад.Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Текст;
	
КонецФункции

// Функция возвращает текст запроса для получения информации о цене закупки товара.
//
// Параметры:
//	СоставРазделовЗапроса (Массив) - переменная в которую записывается массив - состав
//	разделов текста запроса.
//
// Возвращаемое значение:
//	Строка.
//	Текст запроса для получения информации о цене закупки товара.
//
Функция ТекстЗапросаЦенаЗакупкиТовара(СоставРазделовЗапроса)
	
	Если СоставРазделовЗапроса = Неопределено Тогда
		СоставРазделовЗапроса = Новый Массив;
	КонецЕсли;
	
	СоставРазделовЗапроса.Добавить("РезультатЗапросаЦеныЗакупкиНоменклатуры");
	
	Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка))                 КАК Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения                                                                                КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Упаковка.Коэффициент, 1)                                                           КАК Коэффициент,
	|	
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена, 0) *
	|	ВЫБОР
	|		КОГДА
	|			&Валюта <> ЦеныНоменклатурыПоставщиков.Валюта
	|		ТОГДА
	|			ВЫБОР
	|				КОГДА
	|					ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|					И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|					И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|					И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|					ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|				ИНАЧЕ
	|					0
	|			КОНЕЦ
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ КАК Число(15,2)) КАК Цена
	|	
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашениеШапка
	|	ПО Истина
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ),
	|																Соглашение = &Соглашение
	|																И УсловиеЦеныПоставщика = ЗНАЧЕНИЕ(Справочник.УсловияЦенПоставщиков.ПустаяСсылка)
	|																И Номенклатура = &Номенклатура И Характеристика = &Характеристика) КАК ЦеныНоменклатурыПоставщиков
	|	ПО Истина
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыПоставщиков.Валюта)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)
	|
	|ГДЕ
	|	СоглашениеШапка.Ссылка = &Соглашение
	|	И СправочникНоменклатура.Ссылка = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Текст;
	
КонецФункции

// Функция возвращает структуру - текст запроса по дереву свойств вида номенклатуры
// и массив имен реквизитов номенклатуры по которым выполняется построение дерева свойств.
//
// Параметры:
//	ЕстьОтборПоРеквизитам (Булево) - признак наличия отбора по реквизитам,
//	ЕстьОтборПоДопРеквизитам (Булево) - признак наличия отбора по доп.реквизитам,
//	ЕстьОтборПоСегменту (Булево) - признак наличия отбора по сегменту.
//
// Возвращаемое значение:
//	Структура.
//		- ТекстЗапроса (Строка) - текст запроса,
//		- МассивЗначений (Массив) - массив имен реквизитов номенклатуры у которых ссылочный тип.
//
Функция ТекстЗапросаПоДеревуСвойствВидаНоменклатуры(ЕстьОтборПоРеквизитам, ЕстьОтборПоДопРеквизитам, ЕстьОтборПоСегменту)
	
	Если ЕстьОтборПоРеквизитам Тогда
		
		РеквизитыНоменклатуры = Метаданные.Справочники.Номенклатура.Реквизиты;
		
		МассивНеиспользуемыхРеквизитов = Справочники.Номенклатура.ИменаНеиспользуемыхДляКонтроляРеквизитов();
		
		ТекстВыбораРеквизитов                 = "";
		ТекстВыбораРеквизитовПримитивныхТипов = "";
		
		МассивИменРеквизитов = Новый Массив;
		
		Для Каждого РеквизитНоменклатуры Из РеквизитыНоменклатуры Цикл
			
			Если МассивНеиспользуемыхРеквизитов.Найти(РеквизитНоменклатуры.Имя) = Неопределено Тогда
				
				Если НЕ РеквизитНоменклатуры.Тип.СодержитТип(Тип("Строка"))
					И НЕ РеквизитНоменклатуры.Тип.СодержитТип(Тип("Дата"))
					И НЕ РеквизитНоменклатуры.Тип.СодержитТип(Тип("Число"))
					И НЕ РеквизитНоменклатуры.Тип.СодержитТип(Тип("Булево")) Тогда
					
					ТекстВыбораРеквизитов = ТекстВыбораРеквизитов + "
					|		КОГДА СписокСвойств.ИмяРеквизита = """ + РеквизитНоменклатуры.Имя + """
					|			ТОГДА СправочникНоменклатура." + РеквизитНоменклатуры.Имя;
					
					МассивИменРеквизитов.Добавить(РеквизитНоменклатуры.Имя);
					
				Иначе
					
					Если РеквизитНоменклатуры.Тип.СодержитТип(Тип("Строка")) Тогда
						ЗначениеПоУмолчанию = """""";
						
					ИначеЕсли РеквизитНоменклатуры.Тип.СодержитТип(Тип("Дата")) Тогда
						ЗначениеПоУмолчанию = "ДАТАВРЕМЯ(1,1,1)";
						
					ИначеЕсли  РеквизитНоменклатуры.Тип.СодержитТип(Тип("Число")) Тогда
						ЗначениеПоУмолчанию = "0";
						
					ИначеЕсли РеквизитНоменклатуры.Тип.СодержитТип(Тип("Булево")) Тогда
						ЗначениеПоУмолчанию = "ЛОЖЬ";
						
					КонецЕсли;
					
					ТекстВыбораРеквизитовПримитивныхТипов = ТекстВыбораРеквизитовПримитивныхТипов + "
					|		КОГДА СписокСвойств.ИмяРеквизита = """ + РеквизитНоменклатуры.Имя + """
					|			ТОГДА " + ЗначениеПоУмолчанию;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапросаПоСпискуСвойств = "
	|ВЫБРАТЬ
	|	ТаблицаРеквизитовОтбора.НомерСтроки            КАК НомерСтроки,
	|	ТаблицаРеквизитовОтбора.Свойство               КАК Свойство,
	|	ТаблицаРеквизитовОтбора.ИмяРеквизита           КАК ИмяРеквизита,
	|	ТаблицаРеквизитовОтбора.ПредставлениеРеквизита КАК ПредставлениеРеквизита,
	|	ТаблицаРеквизитовОтбора.ЭтоДопРеквизит         КАК ЭтоДопРеквизит,
	|	ТаблицаРеквизитовОтбора.ТипЗначения            КАК ТипЗначения
	|ПОМЕСТИТЬ СписокСвойств
	|ИЗ
	|	&ТаблицаРеквизитов КАК ТаблицаРеквизитовОтбора
	|;";
	
	ТекстЗапросаЗначенийДопРеквизитов = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК ЗначениеОтбора,
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК ИмяРеквизита,
	|	ИСТИНА КАК ЭтоДопРеквизит,
	|	ЛОЖЬ КАК Отбор
	|ПОМЕСТИТЬ СписокЗначенийОтбора
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка.ВидНоменклатуры = &ВидНоменклатуры
	|	И НоменклатураДополнительныеРеквизиты.Свойство В
	|			(ВЫБРАТЬ
	|				СписокСвойств.Свойство
	|			ИЗ
	|				СписокСвойств
	|			ГДЕ
	|				СписокСвойств.ЭтоДопРеквизит)
	|	%ТекстУсловияОтбораПоСегменту%
	|;";
	
	ТекстУсловияОтбораПоСегменту = "";
	
	Если ЕстьОтборПоСегменту Тогда
		
		ТекстУсловияОтбораПоСегменту = "
		|	И 1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				РегистрСведений.НоменклатураСегмента КАК Сегменты
		|			ГДЕ
		|				Сегменты.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
		|				И Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры))
		|";
		
	КонецЕсли; 
	
	ТекстЗапросаЗначенийДопРеквизитов = СтрЗаменить(ТекстЗапросаЗначенийДопРеквизитов, "%ТекстУсловияОтбораПоСегменту%", ТекстУсловияОтбораПоСегменту);
	
	ТекстЗапросаПоДопРеквизитам = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСвойств.НомерСтроки                          КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита               КАК ПредставлениеРеквизита,
	|	НоменклатураДополнительныеРеквизиты.Свойство       КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.ЗначениеОтбора КАК ЗначениеОтбора,
	|	НоменклатураДополнительныеРеквизиты.ИмяРеквизита   КАК ИмяРеквизита,
	|	НоменклатураДополнительныеРеквизиты.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
	|	НоменклатураДополнительныеРеквизиты.Отбор          КАК Отбор
	|ИЗ
	|	СписокЗначенийОтбора КАК НоменклатураДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСвойств КАК СписокСвойств
	|		ПО НоменклатураДополнительныеРеквизиты.Свойство = СписокСвойств.Свойство
	|ГДЕ
	|	СписокСвойств.ЭтоДопРеквизит
	|	И СписокСвойств.ТипЗначения <> ""Строка""
	|	И СписокСвойств.ТипЗначения <> ""Дата""
	|	И СписокСвойств.ТипЗначения <> ""Число""
	|	И СписокСвойств.ТипЗначения <> ""Булево""";
	
	ТекстЗапросаПоДопРеквизитамПримитивныхТипов = "
	|ВЫБРАТЬ
	|	СписокСвойств.НомерСтроки                       КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита            КАК ПредставлениеРеквизита,
	|	СписокСвойств.Свойство                          КАК Свойство,
	|	ВЫБОР
	|		КОГДА СписокСвойств.ТипЗначения = ""Строка""
	|			ТОГДА """"
	|		КОГДА СписокСвойств.ТипЗначения = ""Дата""
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА СписокСвойств.ТипЗначения = ""Число""
	|			ТОГДА 0
	|		КОГДА СписокСвойств.ТипЗначения = ""Булево""
	|			ТОГДА ЛОЖЬ
	|	КОНЕЦ                                           КАК ЗначениеОтбора,
	|	СписокСвойств.ИмяРеквизита                      КАК ИмяРеквизита,
	|	СписокСвойств.ЭтоДопРеквизит                    КАК ЭтоДопРеквизит,
	|	ЛОЖЬ КАК Отбор
	|ИЗ
	|	СписокСвойств КАК СписокСвойств
	|ГДЕ
	|	СписокСвойств.ЭтоДопРеквизит
	|	И (СписокСвойств.ТипЗначения = ""Строка""
	|	ИЛИ СписокСвойств.ТипЗначения = ""Дата""
	|	ИЛИ СписокСвойств.ТипЗначения = ""Число""
	|	ИЛИ СписокСвойств.ТипЗначения = ""Булево"")";
	
	ТекстОбъединения = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ТекстЗапросаПоРеквизитам = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСвойств.НомерСтроки КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита КАК ПредставлениеРеквизита,
	|	СписокСвойств.ПредставлениеРеквизита КАК Свойство,
	|	ВЫБОР" + ТекстВыбораРеквизитов + "
	|	КОНЕЦ                                  КАК ЗначениеОтбора,
	|	СписокСвойств.ИмяРеквизита КАК ИмяРеквизита,
	|	ЛОЖЬ КАК ЭтоДопРеквизит,
	|	ЛОЖЬ КАК Отбор
	|ИЗ
	|	СписокСвойств КАК СписокСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СписокСвойств.ИмяРеквизита В (&МассивИменРеквизитов))
	|			И СправочникНоменклатура.ВидНоменклатуры = &ВидНоменклатуры
	|ГДЕ
	|	НЕ СписокСвойств.ЭтоДопРеквизит
	|	%ТекстУсловияОтбораПоСегменту%
	|";
	
	ТекстУсловияОтбораПоСегменту = "";
	
	Если ЕстьОтборПоСегменту Тогда
		
		ТекстУсловияОтбораПоСегменту = "
		|	И 1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				РегистрСведений.НоменклатураСегмента КАК Сегменты
		|			ГДЕ
		|				Сегменты.Номенклатура = СправочникНоменклатура.Ссылка
		|				И Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры))
		|";
		
	КонецЕсли; 
	
	ТекстЗапросаПоРеквизитам = СтрЗаменить(ТекстЗапросаПоРеквизитам, "%ТекстУсловияОтбораПоСегменту%", ТекстУсловияОтбораПоСегменту);
	
	ТекстЗапросаПоРеквизитамПримитивныхТипов = "
	|ВЫБРАТЬ
	|	СписокСвойств.НомерСтроки              КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита   КАК ПредставлениеРеквизита,
	|	СписокСвойств.ПредставлениеРеквизита   КАК Свойство,
	|	ВЫБОР" + ТекстВыбораРеквизитовПримитивныхТипов + "
	|	КОНЕЦ                                  КАК ЗначениеОтбора,
	|	СписокСвойств.ИмяРеквизита             КАК ИмяРеквизита,
	|	ЛОЖЬ                                   КАК ЭтоДопРеквизит,
	|	ЛОЖЬ                                   КАК Отбор
	|ИЗ
	|	СписокСвойств КАК СписокСвойств
	|ГДЕ
	|	(НЕ СписокСвойств.ЭтоДопРеквизит)";
	
	ТекстИтогов = "
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Свойство";
	
	ТекстЗапросаПоДереву = "";
	
	Если ЕстьОтборПоРеквизитам И НЕ ЕстьОтборПоДопРеквизитам Тогда
		
		ТекстЗапросаПоДереву = 
		ТекстЗапросаПоСпискуСвойств + ТекстЗапросаПоРеквизитам + ТекстОбъединения + 
		ТекстЗапросаПоРеквизитамПримитивныхТипов + ТекстИтогов;
		
	ИначеЕсли ЕстьОтборПоДопРеквизитам И НЕ ЕстьОтборПоРеквизитам Тогда
		
		ТекстЗапросаПоДереву = 
		ТекстЗапросаПоСпискуСвойств + ТекстЗапросаЗначенийДопРеквизитов + ТекстЗапросаПоДопРеквизитам + 
		ТекстОбъединения + ТекстЗапросаПоДопРеквизитамПримитивныхТипов + ТекстИтогов;
		
	ИначеЕсли ЕстьОтборПоДопРеквизитам И ЕстьОтборПоРеквизитам Тогда
		
		ТекстЗапросаПоДереву = 
		ТекстЗапросаПоСпискуСвойств + ТекстЗапросаЗначенийДопРеквизитов + ТекстЗапросаПоДопРеквизитам + 
		ТекстОбъединения + ТекстЗапросаПоДопРеквизитамПримитивныхТипов + ТекстОбъединения + ТекстЗапросаПоРеквизитам + 
		ТекстОбъединения + ТекстЗапросаПоРеквизитамПримитивныхТипов + ТекстИтогов;
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("ТекстЗапроса, МассивЗначений", ТекстЗапросаПоДереву, МассивИменРеквизитов);
	
	Возврат СтруктураВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

// Возвращает строковое описание доступного количества. Используется при выводе
// строк в таблицу остатков в формах подбора товаров в документ продажи, документ
// закупки.
//
// Параметры
//  КоличествоДоступно (Число) - количество товаров,
//	НаименованиеУпаковкиЕдиницыИзмерения (Строка) - наименование упаковки, единицы измерения,
//	ХарактеристикиИспользуются (Булево) - признак ведения учета по характеристикам у товара,
//	НавигацияПоХарактеристикам (Булево) - признак навигации по характеристикам на форме подбора.
//
// Возвращаемое значение:
//	Строка. Описание доступного количества товаров для текущей строки в форме подбора.
//
Функция ОписаниеДоступногоКоличества(КоличествоДоступно, НаименованиеУпаковкиЕдиницыИзмерения, 
	ХарактеристикиИспользуются, НавигацияПоХарактеристикам)
	
	ДоступноОписание = "";
	
	Если ХарактеристикиИспользуются И НЕ НавигацияПоХарактеристикам Тогда
		Если ЗначениеЗаполнено(КоличествоДоступно) Тогда
			ДоступноОписание = "...";
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(КоличествоДоступно) Тогда
			ДоступноОписание = Формат(КоличествоДоступно,"ЧДЦ=3") + " " + НаименованиеУпаковкиЕдиницыИзмерения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоступноОписание;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Навигация по характеристикам в формах подборов.

// Процедура устанавливает страницу кнопок навигации: переход к номенклатуре,
// переход к характеристикам.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьСтраницуКнопокНавигации(Форма) Экспорт
	
	ЭтоФормаПомощникаПродаж          = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	
	СтраницыКнопокНавигации = Форма.Элементы.СтраницыКнопкиНавигации.ПодчиненныеЭлементы;
	
	ТекСтраницаНавигации = СтраницыКнопокНавигации.СтраницаБезКнопок;
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		ТекСтраницаНавигации = СтраницыКнопокНавигации.СтраницаКнопкаНоменклатура;
	КонецЕсли;
	
	Форма.Элементы.СтраницыКнопкиНавигации.ТекущаяСтраница = ТекСтраницаНавигации;
	
	Если ЭтоФормаПомощникаПродаж
		ИЛИ ЭтоФормаПодбораВДокументыЗакупки 
		ИЛИ ЭтоФормаПодбораВДокументыПродажи Тогда
		
		СтраницыКнопокСоздать = Форма.Элементы.СтраницыСоздать.ПодчиненныеЭлементы;
		
		ТекСтраницаНавигации = СтраницыКнопокСоздать.СтраницаСоздатьНоменклатуру;
		
		Если Форма.НавигацияПоХарактеристикам Тогда
			ТекСтраницаНавигации = СтраницыКнопокСоздать.СтраницаСоздатьХарактеристику;
		КонецЕсли;
		
		Форма.Элементы.СтраницыСоздать.ТекущаяСтраница = ТекСтраницаНавигации;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает страницу варианта навигации при на форме подбора.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьСтраницуВариантаНавигации(Форма)
	
	Если Форма.ВариантНавигации = "ПоИерархии" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатуры;
	ИначеЕсли Форма.ВариантНавигации = "" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатуры;
		Форма.ВариантНавигации = "ПоИерархии";
	ИначеЕсли Форма.ВариантНавигации = "ПоСвойствам" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияВидыНоменклатуры;
	ИначеЕсли Форма.ВариантНавигации = "Совместно" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.СтраницаПодобранныеТовары;
	ИначеЕсли Форма.ВариантНавигации = "ПоТоварамДругогоКачества" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.СтраницаТоварыДругогоКачества;
	КонецЕсли;
	
	Форма.Элементы.ВариантыНавигации.ТекущаяСтраница = СтраницаВариантаНавигации;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом отбора по свойствам вида номенклатуры.

// Процедура заполняет дерево отборов по свойствам вида номенклатуры выбранного на форме.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура ЗаполнитьДеревоОтборовНоменклатуры(Форма)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийОтборовНоменклатуры(Форма, ДеревоОтборов);
	
	// Если для выбранного на форме вида номенклатуры включен учет по характеристикам,
	// то дополнить дерево отборов свойствами и значениями свойств для характеристик.
	ИспользуютсяХарактеристики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ВидНоменклатуры, "ИспользоватьХарактеристики");
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) 
		И ИспользуютсяХарактеристики Тогда
		ЗаполнитьДеревоЗначенийОтборовХарактеристикВидаНоменклатуры(Форма, ДеревоОтборов);
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

// Процедура заполняет дерево значений отборов формы (списка, подбора) значениями
// отбора для номенклатуры.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка, форма подбора.
//	ДеревоОтборов (ДеревоЗначений) - дерево значений отборов свойств.
//
Процедура ЗаполнитьДеревоЗначенийОтборовНоменклатуры(Форма, ДеревоОтборов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеквизитыБыстрогоОтбораНоменклатуры.НомерСтроки КАК НомерСтроки,
	|	РеквизитыБыстрогоОтбораНоменклатуры.Свойство КАК Свойство,
	|	РеквизитыБыстрогоОтбораНоменклатуры.ИмяРеквизита КАК ИмяРеквизита,
	|	ВЫБОР
	|		КОГДА РеквизитыБыстрогоОтбораНоменклатуры.ЭтоДопРеквизит
	|			ТОГДА РеквизитыБыстрогоОтбораНоменклатуры.Свойство.Наименование
	|		ИНАЧЕ РеквизитыБыстрогоОтбораНоменклатуры.ПредставлениеРеквизита
	|	КОНЕЦ КАК ПредставлениеРеквизита,
	|	РеквизитыБыстрогоОтбораНоменклатуры.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
	|	ВЫБОР
	|		КОГДА НЕ РеквизитыБыстрогоОтбораНоменклатуры.Свойство ЕСТЬ NULL 
	|			ТОГДА РеквизитыБыстрогоОтбораНоменклатуры.Свойство.ТипЗначения
	|	КОНЕЦ КАК ОписаниеТипаЗначения
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораНоменклатуры КАК РеквизитыБыстрогоОтбораНоменклатуры
	|ГДЕ
	|	РеквизитыБыстрогоОтбораНоменклатуры.Ссылка = &ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Форма.ВидНоменклатуры);
	
	РеквизитыБыстрогоОтбораНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	КолонкаТипов = РеквизитыБыстрогоОтбораНоменклатуры.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(6, ДопустимаяДлина.Фиксированная)));
	
	Для Каждого Строка Из РеквизитыБыстрогоОтбораНоменклатуры Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.ОписаниеТипаЗначения) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ОписаниеТипаЗначения.СодержитТип(Тип("Строка")) Тогда
			Строка.ТипЗначения = "Строка";
		ИначеЕсли Строка.ОписаниеТипаЗначения.СодержитТип(Тип("Дата")) Тогда
			Строка.ТипЗначения = "Дата";
		ИначеЕсли Строка.ОписаниеТипаЗначения.СодержитТип(Тип("Число")) Тогда
			Строка.ТипЗначения = "Число";
		ИначеЕсли Строка.ОписаниеТипаЗначения.СодержитТип(Тип("Булево")) Тогда
			Строка.ТипЗначения = "Булево";
		КонецЕсли;
		
	КонецЦикла;
	
	РеквизитыБыстрогоОтбораНоменклатуры.Колонки.Удалить("ОписаниеТипаЗначения");
	
	ЕстьОтборПоРеквизитам    = (РеквизитыБыстрогоОтбораНоменклатуры.Найти(Ложь, "ЭтоДопРеквизит") <> Неопределено);
	ЕстьОтборПоДопРеквизитам = (РеквизитыБыстрогоОтбораНоменклатуры.Найти(Истина, "ЭтоДопРеквизит") <> Неопределено);
	ЕстьОтборПоСегменту      = ЗначениеЗаполнено(Форма.СегментНоменклатуры);
	
	СтруктураЗапроса = ТекстЗапросаПоДеревуСвойствВидаНоменклатуры(ЕстьОтборПоРеквизитам, ЕстьОтборПоДопРеквизитам, ЕстьОтборПоСегменту);
	
	ТекстЗапроса = СтруктураЗапроса.ТекстЗапроса;
	Если НЕ ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат
	КонецЕсли;
	
	ЗапросПоДеревуОтборов = Новый Запрос;
	ЗапросПоДеревуОтборов.Текст = ТекстЗапроса;
	ЗапросПоДеревуОтборов.УстановитьПараметр("ВидНоменклатуры",   Форма.ВидНоменклатуры);
	ЗапросПоДеревуОтборов.УстановитьПараметр("ТаблицаРеквизитов", РеквизитыБыстрогоОтбораНоменклатуры);
	
	Если ЕстьОтборПоСегменту Тогда
		ЗапросПоДеревуОтборов.УстановитьПараметр("СегментНоменклатуры", Форма.СегментНоменклатуры);
	КонецЕсли;
	
	Если ЕстьОтборПоРеквизитам Тогда
		ЗапросПоДеревуОтборов.УстановитьПараметр("МассивИменРеквизитов", СтруктураЗапроса.МассивЗначений);
	КонецЕсли;
	
	ВыборкаПоРеквизитам = ЗапросПоДеревуОтборов.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоРеквизитам.Следующий() Цикл
		
		ВыборкаЗначения = ВыборкаПоРеквизитам.Выбрать();
		
		Если ВыборкаЗначения.Количество() = 0 Тогда
			Продолжить
		КонецЕсли;
		
		СтрокаРеквизита = ДеревоОтборов.Строки.Добавить();
		СтрокаРеквизита.ИмяРеквизита = ВыборкаПоРеквизитам.Свойство;
		
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, ВыборкаПоРеквизитам);
		ВыборкаЗначения.Следующий();
		
		СтрокаРеквизита.Представление = ВыборкаЗначения.ПредставлениеРеквизита;
		ВыборкаЗначения.Сбросить();
		
		Пока ВыборкаЗначения.Следующий() Цикл
			
			Если ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число")
				ИЛИ ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Дата") Тогда
				
				СтрокаРеквизита.ИнтервалОт            = ?(ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число"), 0, Дата('00010101'));
				СтрокаРеквизита.ИнтервалДо            = ?(ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число"), 0, Дата('00010101'));
				СтрокаРеквизита.ИмяРеквизита          = ВыборкаЗначения.ИмяРеквизита;
				СтрокаРеквизита.ЭтоДопРеквизит        = ВыборкаЗначения.ЭтоДопРеквизит;
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ОтборДоступен         = Истина;
				СтрокаРеквизита.ЗначениеОтбора        = ВыборкаЗначения.ЗначениеОтбора;
				СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
				
				Прервать;
				
			ИначеЕсли ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Булево") Тогда
				
				СтрокаРеквизита.ИмяРеквизита   = ВыборкаЗначения.ИмяРеквизита;
				СтрокаРеквизита.ОтборДоступен  = Истина;
				СтрокаРеквизита.ЗначениеОтбора = Истина;
				СтрокаРеквизита.ЭтоДопРеквизит = ВыборкаЗначения.ЭтоДопРеквизит;
				
				Прервать;
				
			ИначеЕсли ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Строка") Тогда
				
				СтрокаРеквизита.ИмяРеквизита          = ВыборкаЗначения.ИмяРеквизита;
				СтрокаРеквизита.ЭтоДопРеквизит        = ВыборкаЗначения.ЭтоДопРеквизит;
				СтрокаРеквизита.ОтборДоступен         = Истина;
				СтрокаРеквизита.ЗначениеОтбора        = "";
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
				
				Прервать;
				
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаЗначения.ЗначениеОтбора) Тогда 
				Продолжить;
			КонецЕсли;
			
			СтрокаЗначения = СтрокаРеквизита.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗначения, ВыборкаЗначения);
			
			СтрокаЗначения.Представление = ВыборкаЗначения.ЗначениеОтбора;
			СтрокаЗначения.ОтборДоступен = Истина;
			
		КонецЦикла;
		
		Если СтрокаРеквизита.Строки.Количество() = 0 И НЕ СтрокаРеквизита.ОтборДоступен Тогда
			ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
		ИначеЕсли СтрокаРеквизита.Строки.Количество() > 0 И НЕ СтрокаРеквизита.ОтборДоступен Тогда
			СтрокаРеквизита.Строки.Сортировать("Представление");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет дерево значений отборов формы (списка, подбора) значениями отбора
// для характеристик.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка, форма подбора.
//	ДеревоОтборов (ДеревоЗначений) - дерево значений отборов свойств.
//
Процедура ЗаполнитьДеревоЗначенийОтборовХарактеристик(Форма, ДеревоОтборов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеквизитыБыстрогоОтбораХарактеристик.НомерСтроки КАК НомерСтроки,
	|	РеквизитыБыстрогоОтбораХарактеристик.Свойство КАК Свойство,
	|	РеквизитыБыстрогоОтбораХарактеристик.ИмяРеквизита КАК ИмяРеквизита,
	|	РеквизитыБыстрогоОтбораХарактеристик.ПредставлениеРеквизита КАК ПредставлениеРеквизита,
	|	РеквизитыБыстрогоОтбораХарактеристик.ЭтоДопРеквизит
	|ПОМЕСТИТЬ СписокСвойств
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораХарактеристик КАК РеквизитыБыстрогоОтбораХарактеристик
	|ГДЕ
	|	РеквизитыБыстрогоОтбораХарактеристик.Ссылка = &ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХарактеристикиДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиДополнительныеРеквизиты.Значение КАК ЗначениеОтбора,
	|	ХарактеристикиДополнительныеРеквизиты.Свойство.Представление КАК ИмяРеквизита,
	|	ЛОЖЬ КАК Отбор
	|ПОМЕСТИТЬ СписокЗначенийОтбора
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиДополнительныеРеквизиты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец) = ТИП(Справочник.ВидыНоменклатуры)
	|				ТОГДА ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец = &ВидНоменклатуры
	|			ИНАЧЕ ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец.ВидНоменклатуры = &ВидНоменклатуры
	|		КОНЕЦ
	|	И ХарактеристикиДополнительныеРеквизиты.Свойство В
	|			(ВЫБРАТЬ
	|				СписокСвойств.Свойство
	|			ИЗ
	|				СписокСвойств)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСвойств.НомерСтроки КАК НомерСтроки,
	|	ХарактеристикиДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиДополнительныеРеквизиты.ЗначениеОтбора КАК ЗначениеОтбора,
	|	ХарактеристикиДополнительныеРеквизиты.ИмяРеквизита КАК ИмяРеквизита,
	|	ХарактеристикиДополнительныеРеквизиты.Отбор КАК Отбор,
	|	СписокСвойств.ЭтоДопРеквизит
	|ИЗ
	|	СписокЗначенийОтбора КАК ХарактеристикиДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСвойств КАК СписокСвойств
	|		ПО ХарактеристикиДополнительныеРеквизиты.Свойство = СписокСвойств.Свойство
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Свойство";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Форма.ВидНоменклатуры);
	
	ВыборкаПоРеквизитам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоРеквизитам.Следующий() Цикл
		
		СтрокаРеквизита = ДеревоОтборов.Строки.Добавить();
		СтрокаРеквизита.ИмяРеквизита = ВыборкаПоРеквизитам.Свойство;
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, ВыборкаПоРеквизитам);
		СтрокаРеквизита.Представление = ?(ТипЗнч(ВыборкаПоРеквизитам.Свойство) = Тип("Строка"), ВыборкаПоРеквизитам.Свойство, ВыборкаПоРеквизитам.Свойство.Наименование);
		
		ВыборкаЗначения = ВыборкаПоРеквизитам.Выбрать();
		
		Пока ВыборкаЗначения.Следующий() Цикл
			
			Если ТипЗнч(ВыборкаЗначения.ЗначениеОтбора)    = Тип("Число")
				ИЛИ ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Дата") Тогда
				
				СтрокаРеквизита.ИнтервалОт                 = ?(ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число"), 0, Дата('00010101'));
				СтрокаРеквизита.ИнтервалДо                 = ?(ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число"), 0, Дата('00010101'));
				СтрокаРеквизита.ИмяРеквизита               = ВыборкаЗначения.ИмяРеквизита;
				СтрокаРеквизита.ФиксированноеЗначение      = Истина;
				СтрокаРеквизита.ОтборДоступен              = Истина;
				СтрокаРеквизита.ЗначениеОтбора             = ВыборкаЗначения.ЗначениеОтбора;
				СтрокаРеквизита.ПредставлениеОтбора        = НСтр("ru = '<не задано>'");
				
				Прервать;
				
			ИначеЕсли ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Булево") Тогда
				
				СтрокаРеквизита.ИмяРеквизита               = ВыборкаЗначения.ИмяРеквизита;
				СтрокаРеквизита.ОтборДоступен  = Истина;
				СтрокаРеквизита.ЗначениеОтбора = Истина;
				
				Прервать;
				
			ИначеЕсли ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Строка") Тогда
				
				СтрокаРеквизита.ИмяРеквизита               = ВыборкаЗначения.ИмяРеквизита;
				СтрокаРеквизита.ОтборДоступен         = Истина;
				СтрокаРеквизита.ЗначениеОтбора        = "";
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
				
				Прервать;
				
			КонецЕсли;
			
			СтрокаЗначения = СтрокаРеквизита.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗначения, ВыборкаЗначения);
			СтрокаЗначения.Представление = ВыборкаЗначения.ЗначениеОтбора;
			СтрокаЗначения.ОтборДоступен = Истина;
			
		КонецЦикла;
		
		Если СтрокаРеквизита.Строки.Количество() = 0
			И НЕ СтрокаРеквизита.ОтборДоступен Тогда
			
			ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет дерево отборов на форме значениями быстрого отбора
// и элементами значений быстрого отбора. Используется в формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора,
//	ДеревоОтборов (ДеревоЗначений) - дерево отборов на форме подбора.
//
Процедура ЗаполнитьДеревоЗначенийОтборовХарактеристикВидаНоменклатуры(Форма, ДеревоОтборов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеквизитыБыстрогоОтбораХарактеристик.НомерСтроки КАК НомерСтроки,
	|	РеквизитыБыстрогоОтбораХарактеристик.Свойство КАК Свойство,
	|	РеквизитыБыстрогоОтбораХарактеристик.ИмяРеквизита КАК ИмяРеквизита,
	|	РеквизитыБыстрогоОтбораХарактеристик.Свойство.Наименование КАК ПредставлениеРеквизита,
	|	ВЫБОР
	|		КОГДА НЕ РеквизитыБыстрогоОтбораХарактеристик.Свойство ЕСТЬ NULL 
	|			ТОГДА РеквизитыБыстрогоОтбораХарактеристик.Свойство.ТипЗначения
	|	КОНЕЦ КАК ОписаниеТипаЗначения
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораХарактеристик КАК РеквизитыБыстрогоОтбораХарактеристик
	|ГДЕ
	|	РеквизитыБыстрогоОтбораХарактеристик.Ссылка = &ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Форма.ВидНоменклатуры);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	КолонкаТипов = Результат.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(6,ДопустимаяДлина.Фиксированная)));
	
	Для Каждого Строка Из Результат Цикл
		
		Если ЗначениеЗаполнено(Строка.ОписаниеТипаЗначения) Тогда
			
			Если Строка.ОписаниеТипаЗначения.СодержитТип(Тип("Строка")) Тогда
				Строка.ТипЗначения = "Строка";
			ИначеЕсли Строка.ОписаниеТипаЗначения.СодержитТип(Тип("Дата")) Тогда
				Строка.ТипЗначения = "Дата";
			ИначеЕсли Строка.ОписаниеТипаЗначения.СодержитТип(Тип("Число")) Тогда
				Строка.ТипЗначения = "Число";
			ИначеЕсли Строка.ОписаниеТипаЗначения.СодержитТип(Тип("Булево")) Тогда
				Строка.ТипЗначения = "Булево";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Колонки.Удалить("ОписаниеТипаЗначения");
	
	ЕстьОтборПоСегменту = ЗначениеЗаполнено(Форма.СегментНоменклатуры);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеквизитыБыстрогоОтбораХарактеристик.НомерСтроки КАК НомерСтроки,
	|	РеквизитыБыстрогоОтбораХарактеристик.Свойство КАК Свойство,
	|	РеквизитыБыстрогоОтбораХарактеристик.ИмяРеквизита КАК ИмяРеквизита,
	|	РеквизитыБыстрогоОтбораХарактеристик.ПредставлениеРеквизита КАК ПредставлениеРеквизита,
	|	РеквизитыБыстрогоОтбораХарактеристик.ТипЗначения КАК ТипЗначения
	|ПОМЕСТИТЬ СписокСвойств
	|ИЗ
	|	&ТаблицаСвойствХарактеристик КАК РеквизитыБыстрогоОтбораХарактеристик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХарактеристикиДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиДополнительныеРеквизиты.Значение КАК ЗначениеОтбора,
	|	ХарактеристикиДополнительныеРеквизиты.Свойство.Наименование КАК ИмяРеквизита,
	|	ЛОЖЬ КАК Отбор
	|ПОМЕСТИТЬ СписокЗначенийОтбора
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиДополнительныеРеквизиты
	|ГДЕ ";
	Если ЕстьОтборПоСегменту Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец) = ТИП(Справочник.ВидыНоменклатуры)
		|				ТОГДА ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец = &ВидНоменклатуры
		|					И 1 В (ВЫБРАТЬ ПЕРВЫЕ 1
		|							1
		|						 ИЗ
		|							РегистрСведений.НоменклатураСегмента КАК Сегменты
		|						 ГДЕ
		|							Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры)
		|                           И Сегменты.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры)
		|			ИНАЧЕ ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец.ВидНоменклатуры = &ВидНоменклатуры	
		|				И 1 В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						1
		|					 ИЗ
		|						РегистрСведений.НоменклатураСегмента КАК Сегменты
		|					 ГДЕ
		|						Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры)
		|						И Сегменты.Номенклатура = ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец)
		|		КОНЕЦ";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец) = ТИП(Справочник.ВидыНоменклатуры)
		|				ТОГДА ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец = &ВидНоменклатуры
		|			ИНАЧЕ ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец.ВидНоменклатуры = &ВидНоменклатуры	
		|		КОНЕЦ
		|";
	КонецЕсли; 
	Запрос.Текст = Запрос.Текст + "
	|	И ХарактеристикиДополнительныеРеквизиты.Свойство В
	|			(ВЫБРАТЬ
	|				СписокСвойств.Свойство
	|			ИЗ
	|				СписокСвойств)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСвойств.НомерСтроки КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита КАК ПредставлениеРеквизита,
	|	ХарактеристикиДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиДополнительныеРеквизиты.ЗначениеОтбора КАК ЗначениеОтбора,
	|	ХарактеристикиДополнительныеРеквизиты.ИмяРеквизита КАК ИмяРеквизита,
	|	ХарактеристикиДополнительныеРеквизиты.Отбор КАК Отбор
	|ИЗ
	|	СписокЗначенийОтбора КАК ХарактеристикиДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСвойств КАК СписокСвойств
	|		ПО ХарактеристикиДополнительныеРеквизиты.Свойство = СписокСвойств.Свойство	
	|ГДЕ
	|	СписокСвойств.ТипЗначения <> ""Строка""
	|	И СписокСвойств.ТипЗначения <> ""Дата""
	|	И СписокСвойств.ТипЗначения <> ""Число""
	|	И СписокСвойств.ТипЗначения <> ""Булево""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписокСвойств.НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита,
	|	СписокСвойств.Свойство,
	|	ВЫБОР
	|		КОГДА СписокСвойств.ТипЗначения = ""Строка""
	|			ТОГДА """"
	|		КОГДА СписокСвойств.ТипЗначения = ""Дата""
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА СписокСвойств.ТипЗначения = ""Число""
	|			ТОГДА 0
	|		КОГДА СписокСвойств.ТипЗначения = ""Булево""
	|			ТОГДА ЛОЖЬ
	|	КОНЕЦ,
	|	СписокСвойств.ИмяРеквизита,
	|	ЛОЖЬ
	|ИЗ
	|	СписокСвойств КАК СписокСвойств
	|ГДЕ
	|	(СписокСвойств.ТипЗначения = ""Строка""
	|			ИЛИ СписокСвойств.ТипЗначения = ""Дата""
	|			ИЛИ СписокСвойств.ТипЗначения = ""Число""
	|			ИЛИ СписокСвойств.ТипЗначения = ""Булево"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Свойство";
			
	Запрос.УстановитьПараметр("ТаблицаСвойствХарактеристик", Результат);
	Запрос.УстановитьПараметр("ВидНоменклатуры", Форма.ВидНоменклатуры);
	Если ЕстьОтборПоСегменту Тогда
		Запрос.УстановитьПараметр("СегментНоменклатуры", Форма.СегментНоменклатуры);
	КонецЕсли; 
	
	ВыборкаПоРеквизитам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоРеквизитам.Следующий() Цикл
		
		ВыборкаЗначения = ВыборкаПоРеквизитам.Выбрать();
		
		Если ВыборкаЗначения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРеквизита = ДеревоОтборов.Строки.Добавить();
		СтрокаРеквизита.ОтборХарактеристик = Истина;
		СтрокаРеквизита.ЭтоДопРеквизит = Истина;
		СтрокаРеквизита.ИмяРеквизита = ВыборкаПоРеквизитам.Свойство;
		
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, ВыборкаПоРеквизитам);	
		ВыборкаЗначения.Следующий();
		
		СтрокаРеквизита.Представление = ВыборкаЗначения.ПредставлениеРеквизита;
		ВыборкаЗначения.Сбросить();
		
		Пока ВыборкаЗначения.Следующий() Цикл
			
			Если ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число")
				ИЛИ ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Дата") Тогда
				
				СтрокаРеквизита.ИнтервалОт = ?(ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число"), 0, Дата('00010101'));
				СтрокаРеквизита.ИнтервалДо = ?(ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число"), 0, Дата('00010101'));
				СтрокаРеквизита.ИмяРеквизита = ВыборкаЗначения.ИмяРеквизита;
				СтрокаРеквизита.ОтборХарактеристик = Истина;
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ОтборДоступен = Истина;
				СтрокаРеквизита.ЗначениеОтбора = ВыборкаЗначения.ЗначениеОтбора;
				СтрокаРеквизита.ПредставлениеОтбора = НСтр("ru = '<не задано>'");
				
				Прервать;
				
			ИначеЕсли ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Булево") Тогда
				
				СтрокаРеквизита.ИмяРеквизита = ВыборкаЗначения.ИмяРеквизита;
				СтрокаРеквизита.ОтборХарактеристик = Истина;
				СтрокаРеквизита.ОтборДоступен = Истина;
				СтрокаРеквизита.ЗначениеОтбора = Истина;
				
				Прервать;
				
			ИначеЕсли ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Строка") Тогда
				
				СтрокаРеквизита.ИмяРеквизита = ВыборкаЗначения.ИмяРеквизита;
				СтрокаРеквизита.ОтборХарактеристик = Истина;
				СтрокаРеквизита.ОтборДоступен = Истина;
				СтрокаРеквизита.ЗначениеОтбора = "";
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ПредставлениеОтбора = НСтр("ru = '<не задано>'");
				
				Прервать;
				
			КонецЕсли;
			
			СтрокаЗначения = СтрокаРеквизита.Строки.Добавить();
			СтрокаЗначения.ЭтоДопРеквизит = Истина;
			СтрокаЗначения.ОтборХарактеристик = Истина;
			
			ЗаполнитьЗначенияСвойств(СтрокаЗначения, ВыборкаЗначения);
			
			СтрокаЗначения.Представление = ВыборкаЗначения.ЗначениеОтбора;
			СтрокаЗначения.ОтборДоступен = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура очищает дерево свойств для отбора по свойствам вида номенклатуры.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура ОчиститьДеревоОтборов(Форма)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Установка и удаление отборов.

// Процедура устанавливает отбор списка номенклатуры по текущей иерархии номенклатуры.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка, форма подбора.
//
Процедура УстановитьОтборПоТекущейИерархииНоменклатуры(Форма)
	
	Если НЕ Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Форма.Список.Отбор,
		"Родитель",
		Форма.ТекущаяИерархияНоменклатуры,
		ВидСравненияКомпоновкиДанных.Равно,
		"Родитель",
		Истина
	);
	
КонецПроцедуры

// Процедура устанавливает отбор списка номенклатуры по текущей иерархии номенклатуры.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка, форма подбора.
//
Процедура УстановитьОтборПоТекущейИерархииНоменклатурыПоставщика(Форма)
	
	Если НЕ Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Форма.ПодборТаблицаНоменклатураПоставщика.Отбор,
		"Родитель",
		Форма.ТекущаяИерархияНоменклатурыПоставщика,
		ВидСравненияКомпоновкиДанных.Равно,
		"Родитель",
		Истина
	);
	
КонецПроцедуры

Процедура УстановитьПометкуГрадацииКачества(Форма)
	
	Для Каждого ЭлементСписка Из Форма.СписокКачества Цикл
		ЭлементСписка.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Процедура отключает установленный отбор по группе номенклатуры у списка номенклатуры
// на форме подбора.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоИерархииНоменклатуры(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Список.Отбор, "Родитель",,,,Ложь);
	
КонецПроцедуры

// Процедура отключает установленный отбор по группе номенклатуры поставщика у списка номенклатуры поставщика
// на форме подбора.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоИерархииНоменклатурыПоставщика(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.ПодборТаблицаНоменклатураПоставщика.Отбор, "Родитель",,,,Ложь);
	
КонецПроцедуры

// Процедура устанавливает отбор по родителю текущей строки списка номенклатуры
// в формах подборов товаров.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоРодителюТекущейСтрокиНоменклатуры(Форма)
	
	ТекущаяСтрока = Форма.Элементы.Список.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока, "Родитель");
	
	Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Родитель;
	
КонецПроцедуры

// Процедура устанавливает отбор по родителю текущей строки списка номенклатуры поставщика
// в формах подборов товаров.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоРодителюТекущейСтрокиНоменклатурыПоставщика(Форма)
	
	ТекущаяСтрока = Форма.Элементы.ПодборТаблицаНоменклатураПоставщика.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока, "Родитель");
	
	Форма.Элементы.ИерархияНоменклатурыПоставщика.ТекущаяСтрока = Родитель;
	
КонецПроцедуры

// Процедура устанавливает отборпо виду номенклатуры и свойствам вида номенклатуры
// у списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма)
	
	УстановитьОтборПоВидуНоменклатуры(Форма);
	УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Процедура устанавливает отбор по виду номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоВидуНоменклатуры(Форма)
	
	ВидНоменклатуры = Форма.ВидНоменклатуры;
	ЭлементыОтбора = Форма.Список.Отбор;
	
	// Установить отбор по виду номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементыОтбора,
		"ВидНоменклатуры",
		ВидНоменклатуры,
		ВидСравненияКомпоновкиДанных.Равно, 
		"ОтборПоВидуНоменклатуры",
		Истина
	);
	
КонецПроцедуры

// Устанавливает отбор по списку значений из строк дерева отборов.
//
// Параметры:
//	ИмяЭлементаОтбора (Строка) - имя элемента отбора,
//	Отбор (ОтборКомпоновкиДанных) - коллекция элементов отбора списка номенклатуры,
//	СтрокиДереваОтборов (Массив) - массив строк дерева отборов.
//
Процедура УстановитьОтборПоСтрокамДереваОтборов(ИмяЭлементаОтбора, Отбор, СтрокиДереваОтборов)
	
	ЗначенияОтборов = Новый Массив;
	Для Каждого Строка Из СтрокиДереваОтборов Цикл
		ЗначенияОтборов.Добавить(Строка.ЗначениеОтбора);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Отбор, 
		ИмяЭлементаОтбора, 
		ЗначенияОтборов, 
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина
	);
	
КонецПроцедуры

// Процедура устанавливает отбор по свойствам вида номенклатуры у списка номенклатуры
// на форме подбора.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоСвойствамВидаНоменклатуры(Форма)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	ЭлементыОтбора = Форма.Список.Отбор;
	ИмяСсылки = "Ссылка.[";
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) 
		И Форма.НавигацияПоХарактеристикам Тогда
		ЭлементыОтбора = Форма.ПодборТаблицаХарактеристики.Отбор;
	КонецЕсли;
	
	Для каждого СтрокаДереваОтборов Из ДеревоОтборов.Строки Цикл
		
		Если СтрокаДереваОтборов.ОтборДоступен Тогда
			
			Если НЕ СтрокаДереваОтборов.Отбор Тогда
				Продолжить;
			КонецЕсли;
			
			// Сформировать имя элемента отбора.
			ИмяЭлементаОтбора = СтрокаДереваОтборов.ИмяРеквизита;
			Если СтрокаДереваОтборов.ЭтоДопРеквизит Тогда
				ИмяЭлементаОтбора = ИмяСсылки + СтрокаДереваОтборов.ИмяРеквизита + "]";
			КонецЕсли;
			
			// В зависимости от типа установить значение элемента отбора.
			Если ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ЭлементыОтбора, 
					ИмяЭлементаОтбора, 
					Истина, 
					ВидСравненияКомпоновкиДанных.Равно,
					,
					Истина
				);
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Дата") 
				ИЛИ ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Число") Тогда
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалОт) Тогда
					
					ДобавитьЭлементОтбора(
						ЭлементыОтбора, 
						ИмяЭлементаОтбора, 
						СтрокаДереваОтборов.ИнтервалОт, 
						ВидСравненияКомпоновкиДанных.БольшеИлиРавно
					);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалДо) Тогда
					
					ДобавитьЭлементОтбора(
						ЭлементыОтбора, 
						ИмяЭлементаОтбора, 
						СтрокаДереваОтборов.ИнтервалДо, 
						ВидСравненияКомпоновкиДанных.МеньшеИлиРавно
					);
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка") Тогда
				
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ЭлементыОтбора, 
					ИмяЭлементаОтбора, 
					СтрокаДереваОтборов.ЗначениеОтбора, 
					ВидСравненияКомпоновкиДанных.Равно,
					,
					Истина
				);
				
			КонецЕсли;
			
		Иначе
			
			// Отбор не доступен - это строка отбора, имеющая подчиненные строки.
			НайденныеСтроки = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтбора = НайденныеСтроки[0];
			
			// Сформировать имя элемента отбора.
			ИмяЭлементаОтбора = СтрокаОтбора.ИмяРеквизита;
			Если СтрокаОтбора.ЭтоДопРеквизит Тогда
				ИмяЭлементаОтбора = ИмяСсылки + СтрокаОтбора.ИмяРеквизита + "]";
			КонецЕсли;
			
			// Установить отбор по значениям подчиненных строк строки дерева отборов.
			УстановитьОтборПоСтрокамДереваОтборов(ИмяЭлементаОтбора, ЭлементыОтбора, НайденныеСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура отключает установленные отборы по виду номенклатуры и по свойствам выбранного
// вида номенклатуры на форме подбора.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма)
	
	УдалитьОтборПоВидуНоменклатуры(Форма);
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Процедура удаляет отбор по виду номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоВидуНоменклатуры(Форма)
	
	ВидНоменклатуры = Форма.ВидНоменклатуры;
	ЭлементыОтбора  = Форма.Список.Отбор;
	
	// Установить отбор по виду номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементыОтбора,
		"ВидНоменклатуры",
		ВидНоменклатуры,
		ВидСравненияКомпоновкиДанных.Равно, 
		"ОтборПоВидуНоменклатуры",
		Ложь
	);
	
КонецПроцедуры

// Процедура удаляет установленные отборы по свойствам вида номенклатуры.
// Точнее удаляются все установленные отборы на списке за исключением тех
// которые не относятся к отборам дерева свойств.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоСвойствамВидаНоменклатуры(Форма)
	
	// Некоторые элементы отбора не должны удаляться - они не относятся
	// к отбору по свойствам вида номенклатуры.
	НеУдаляемыеЭлементы = Новый Массив;
	НеУдаляемыеЭлементы.Добавить("ПоискПоПодстроке");
	НеУдаляемыеЭлементы.Добавить("ЦеныНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ЦенаХарактеристики");
	НеУдаляемыеЭлементы.Добавить("ГруппаТолькоВНаличии");
	НеУдаляемыеЭлементы.Добавить("ОтборПоВидуНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ОтборПоВладельцуХарактеристик");
	НеУдаляемыеЭлементы.Добавить("ОтборПоТипуНоменклатуры");
	
	// Удалить элементы отбора по свойствам вида номенклатуры.
	ЭлементыОтбора = Форма.Список.Отбор.Элементы;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) 
		И Форма.НавигацияПоХарактеристикам Тогда
		ЭлементыОтбора = Форма.ПодборТаблицаХарактеристики.Отбор.Элементы;
	КонецЕсли;
	
	КолЭлементов = ЭлементыОтбора.Количество();
	ВГраница     = КолЭлементов - 1;
	
	Для ОбрИндекс = 0 По ВГраница Цикл
		
		ЭлементОтбора = ЭлементыОтбора[ВГраница - ОбрИндекс];
		
		Если НеУдаляемыеЭлементы.Найти(ЭлементОтбора.Представление) = Неопределено Тогда
			ЭлементыОтбора.Удалить(ЭлементОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура удаляет отбор по номенклатуре исходного качества.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоНоменклатуреИсходногоКачества(Форма)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.Список.Отбор,"Ссылка","ПоискПоНоменклатурИсходногоКачества");
	
КонецПроцедуры

// Процедура удаляет отбор по качеству номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоКачествуНоменклатуры(Форма)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.Список.Отбор,"Качество","КачествоНоменклатуры");
	
КонецПроцедуры

// Процедура устанавливает отбор по условию цены поставщика на форме подбора.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры поставщика или форма подбора.
//
Процедура УстановитьОтборПоУсловиеЦеныПоставщика(Форма)
	
	// Отбор по сегменту у списка номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ПодборТаблицаНоменклатураПоставщика, 
		"УсловиеЦеныПоставщика", 
		Форма.УсловиеЦеныПоставщика 
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.Список, 
		"УсловиеЦеныПоставщика", 
		Форма.УсловиеЦеныПоставщика 
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.ПодборТаблицаХарактеристики, 
		"УсловиеЦеныПоставщика", 
		Форма.УсловиеЦеныПоставщика 
	);

КонецПроцедуры

// Процедура устанавливает отбор по сегменту номенклатуры на форме подбора.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоСегментуНоменклатуры(Форма)
	
	// Отбор по сегменту у списка номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.Список, 
		"СегментНоменклатуры", 
		Форма.СегментНоменклатуры, 
		ЗначениеЗаполнено(Форма.СегментНоменклатуры)
	);
	
	// Отбор по сегменту у списка характеристик.
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.ПодборТаблицаХарактеристики, 
			"СегментНоменклатуры", 
			Форма.СегментНоменклатуры, 
			ЗначениеЗаполнено(Форма.СегментНоменклатуры)
		);
	КонецЕсли;
	
	// В списке выбора сегментов должны отображаться 7 последних выбранных элементов.
	Если ЗначениеЗаполнено(Форма.СегментНоменклатуры) Тогда
		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(
			Форма.Элементы.СегментНоменклатуры.СписокВыбора, 
			Форма.СегментНоменклатуры, 
			7
		);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов на формах подборов.

// Процедура сохраняет флаги для дерева отбора на формах подбора.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//	Закрыть (Булево) - признак показывыющий что форма закрывается, тогда нужно сохранять
//	все настройки отборов, а не только Качество в случае изменения вида номенклатуры.
//
Процедура СохранитьПараметрыДереваОтбора(Форма,Закрыть)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	
	Если Закрыть Тогда
		
		ТаблицаПараметровОтбора.Очистить(); 
		
		Для Каждого ПервыйУровень Из ДеревоОтборов.Строки Цикл
			
			Если ПервыйУровень.Отбор Тогда
				
				Если ПервыйУровень.ФиксированноеЗначение Тогда
					
					НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
					НоваяСтрока.ИмяРеквизита = ПервыйУровень.Представление;
					НоваяСтрока.Представление = ПервыйУровень.Представление;
					НоваяСтрока.ЗначениеОтбора = ПервыйУровень.ЗначениеОтбора;
					НоваяСтрока.ПредставлениеОтбора = ПервыйУровень.ПредставлениеОтбора;
					НоваяСтрока.ФиксированноеЗначение = Истина;
					НоваяСтрока.Отбор = Истина;
					
					Если ПервыйУровень.ИнтервалОт<>Неопределено Или ПервыйУровень.ИнтервалДо<>Неопределено Тогда
						
						Если ТипЗнч(ПервыйУровень.ИнтервалОт) = Тип("Дата") Или ТипЗнч(ПервыйУровень.ИнтервалДо) = Тип("Дата") Тогда
							
							НоваяСтрока.ИнтервалДата = Истина;
							НоваяСтрока.ИнтервалДатаОт = ПервыйУровень.ИнтервалОт;
							НоваяСтрока.ИнтервалДатаДо = ПервыйУровень.ИнтервалДо;
							НоваяСтрока.Отбор = Истина;
							
						Иначе
							
							НоваяСтрока.ИнтервалЧисла = Истина;
							НоваяСтрока.ИнтервалЧислаОт = ПервыйУровень.ИнтервалОт;
							НоваяСтрока.ИнтервалЧислаДо = ПервыйУровень.ИнтервалДо;
							НоваяСтрока.Отбор = Истина;
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					ИмяРеквизита = ПервыйУровень.Представление;
					
					Для Каждого ВторойУровень Из ПервыйУровень.Строки Цикл
						
						Если ВторойУровень.Отбор Тогда
							
							НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
							НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
							НоваяСтрока.Представление = ВторойУровень.Представление;
							НоваяСтрока.ЗначениеОтбора = ВторойУровень.ЗначениеОтбора;
							НоваяСтрока.Отбор = Истина;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ПервыйУровень Из ДеревоОтборов.Строки Цикл
			
			Если ПервыйУровень.Представление="Качество" Тогда
				
				Для Каждого ВторойУровень Из ПервыйУровень.Строки Цикл
					
					Отбор = Новый Структура();
					Отбор.Вставить("Представление",ВторойУровень.Представление);
					ОтобранныеСтроки = ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
					
					Если ЗначениеЗаполнено(ОтобранныеСтроки) Тогда
						ОтобранныеСтроки[0].Отбор = ВторойУровень.Отбор; 
					Иначе
						
						НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
						НоваяСтрока.ИмяРеквизита = "Качество";
						НоваяСтрока.Представление = ВторойУровень.Представление;
						НоваяСтрока.ЗначениеОтбора = ВторойУровень.ЗначениеОтбора;
						Если НоваяСтрока.Представление = "Новый" Тогда 
							НоваяСтрока.Отбор = Истина;
						Иначе
							НоваяСтрока.Отбор = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.ТаблицаПараметровОтбора.Загрузить(ТаблицаПараметровОтбора);
	
КонецПроцедуры

// Процедура расставляет флаги для дерева отбора на формах подбора.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	
	ТекущиеИмяРеквизита = "";
	
	Отбор = Новый Структура();
	Отбор.Вставить("Отбор",Истина);
	ОтобранныеСтроки = ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТаблицы Из ОтобранныеСтроки Цикл
		
		Если СтрокаТаблицы.ИмяРеквизита <> ТекущиеИмяРеквизита Тогда
			
			ТекущиеИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
			ЕстьПометкаНаВторомУровне = Ложь;
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Представление", ТекущиеИмяРеквизита);
			СтрокаДереваПервогоУровня = ДеревоОтборов.Строки.НайтиСтроки(ПараметрыОтбора, Ложь);
			Если СтрокаДереваПервогоУровня.Количество()>0 Тогда
				
				Если СтрокаТаблицы.ФиксированноеЗначение Тогда
					
					СтрокаДереваПервогоУровня[0].ФиксированноеЗначение = Истина;
					СтрокаДереваПервогоУровня[0].ЗначениеОтбора = СтрокаТаблицы.ЗначениеОтбора;
					СтрокаДереваПервогоУровня[0].ПредставлениеОтбора = СтрокаТаблицы.ПредставлениеОтбора;
					
					Если СтрокаТаблицы.ИнтервалДаты Тогда
						
						СтрокаДереваПервогоУровня[0].ФиксированноеЗначение = Истина;
						СтрокаДереваПервогоУровня[0].ЗначениеОтбора = СтрокаТаблицы.ЗначениеОтбора;
						СтрокаДереваПервогоУровня[0].ПредставлениеОтбора = СтрокаТаблицы.ПредставлениеОтбора;
						СтрокаДереваПервогоУровня[0].ИнтервалОт = СтрокаТаблицы.ИнтервалДатыОт;
						СтрокаДереваПервогоУровня[0].ИнтервалДо = СтрокаТаблицы.ИнтервалДатыДо;
						
						Продолжить;
						
					ИначеЕсли СтрокаТаблицы.ИнтервалЧисла Тогда
						
						СтрокаДереваПервогоУровня[0].ФиксированноеЗначение = Истина;
						СтрокаДереваПервогоУровня[0].ЗначениеОтбора = СтрокаТаблицы.ЗначениеОтбора;
						СтрокаДереваПервогоУровня[0].ПредставлениеОтбора = СтрокаТаблицы.ПредставлениеОтбора;
						СтрокаДереваПервогоУровня[0].ИнтервалОт = СтрокаТаблицы.ИнтервалЧислаОт;
						СтрокаДереваПервогоУровня[0].ИнтервалДо = СтрокаТаблицы.ИнтервалЧислаДо;
						
						Продолжить;
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				СтрокиДереваВторогоУровня = СтрокаДереваПервогоУровня[0].Строки;
				СтрокаНайдена= Истина;
			Иначе
				СтрокаНайдена = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаНайдена Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Представление", СтрокаТаблицы.Представление);
			СтрокаПоиска = СтрокиДереваВторогоУровня.НайтиСтроки(ПараметрыОтбора, Ложь);
			
			Если СтрокаПоиска.Количество() > 0 Тогда
				СтрокаПоиска[0].Отбор = Истина;
				СтрокаДереваПервогоУровня[0].Отбор = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

// Процедура сохраняет вариант навигации до выбора ТДК.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
Процедура УстановитьВариантНавигацииИИспользоватьФильтрДоТДК(Форма)
	
	Если Форма.ВариантНавигации <> "ПоТоварамДругогоКачества" Тогда
		Форма.ВариантНавигацииДоТДК = Форма.ВариантНавигации;
		Форма.ИспользоватьФильтрыДоТДК = Форма.ИспользоватьФильтры;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Отборы по наличию, по ценам.

// Процедура устанавливает доступность элементов фильтра по диапазону цен на формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора товаров.
//
Процедура УстановитьДоступностьФильтраПоЦенам(Форма)
	
	Если НЕ ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ФильтрЦенамДоступен = ФильтрЦенамДоступен(Форма);
	
	// Установить доступность элементов отбора по диапазону цен.
	Форма.Элементы.ОтборЦенаОт.Доступность = ФильтрЦенамДоступен;
	Форма.Элементы.ОтборЦенаДо.Доступность = ФильтрЦенамДоступен;
	Форма.Элементы.Валюта.Доступность = ФильтрЦенамДоступен;
	
КонецПроцедуры

// Процедура устанавливает доступность элементов фильтра по диапазону цен на формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора товаров.
//
Процедура УстановитьДоступностьФильтраПоЦенамПоставщика(Форма)
	
	Если НЕ ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ФильтрЦенамПоставщикаДоступен = ФильтрЦенамПоставщикаДоступен(Форма);
	
	// Установить доступность элементов отбора по диапазону цен.
	Форма.Элементы.ОтборЦенаОтПоставщика.Доступность = ФильтрЦенамПоставщикаДоступен;
	Форма.Элементы.ОтборЦенаДоПоставщика.Доступность = ФильтрЦенамПоставщикаДоступен;
	Форма.Элементы.ВалютаПоставщика.Доступность      = ФильтрЦенамПоставщикаДоступен;
	
КонецПроцедуры

// Функция возвращает Истина, если условие цены поставщика на форме подбора был изменен
// по сравнению с ранее установленным значением.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Функция УсловиеЦеныПоставщикаИзменилось(Форма)
	
	ПодборТаблицаНоменклатураПоставщика = Форма.ПодборТаблицаНоменклатураПоставщика;
	ИмяПараметра = "УсловиеЦеныПоставщика";
	
	ЗначениеПараметра = ПодборТаблицаНоменклатураПоставщика.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	
	Если ЗначениеПараметра = Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.УсловиеЦеныПоставщика) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат НЕ (ЗначениеПараметра.Значение = Форма.УсловиеЦеныПоставщика);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отборы, вспомогательные.

// Функция возвращает Истина, если сегмент номенклатуры на форме подбора был изменен
// по сравнению с ранее установленным значением.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Функция СегментНоменклатурыИзменился(Форма)
	
	Список       = Форма.Список;
	ИмяПараметра = "СегментНоменклатуры";
	
	ЗначениеПараметра = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	
	Если ЗначениеПараметра = Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.СегментНоменклатуры) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат НЕ (ЗначениеПараметра.Значение = Форма.СегментНоменклатуры);
	
КонецФункции

// Процедура устанавливает значения доступности элементов фильтров в зависимости от значения
// флажка использования фильтров.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьДоступностьЭлементовФильтров(Форма)
	
	Если НЕ ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма) Тогда
		
		Форма.Элементы.ВариантНавигации.Доступность              = Форма.ИспользоватьФильтры;
		Форма.Элементы.ИерархияНоменклатуры.Доступность          = Форма.ИспользоватьФильтры;
		Форма.Элементы.ВидНоменклатуры.Доступность               = Форма.ИспользоватьФильтры;
		Форма.Элементы.ВидНоменклатуры.АвтоОтметкаНезаполненного = Форма.ИспользоватьФильтры;
		
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма)
		ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма)
		ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма) Тогда
		
		Форма.Элементы.НоменклатураИсходногоКачества.Доступность = Форма.ИспользоватьФильтры;
		Форма.Элементы.СписокКачества.Доступность                = Форма.ИспользоватьФильтры;
		Форма.Элементы.СброситьОтборыПоСвойствам.Доступность     = Форма.ИспользоватьФильтры;
		
	КонецЕсли;
	
	Форма.Элементы.ДеревоОтборовПредставление.ТолькоПросмотр = НЕ Форма.ИспользоватьФильтры;
	Форма.Элементы.ДеревоОтборовОтбор.ТолькоПросмотр = НЕ Форма.ИспользоватьФильтры;
	Форма.Элементы.ДеревоОтборовПредставлениеОтбора.ТолькоПросмотр = НЕ Форма.ИспользоватьФильтры;
	
КонецПроцедуры

// Процедура устанавливает значения доступности элементов фильтра номенклатуры поставщика в зависимости от значения
// флажка использования фильтра номенклатуры поставщика.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьДоступностьЭлементовФильтраНоменклатурыПоставщика(Форма)
	
	Форма.Элементы.ИерархияНоменклатурыПоставщика.Доступность = Форма.ИспользоватьФильтрНоменклатураПоставщика;
	
КонецПроцедуры

// Функция проверяет, доступно ли использование фильтра по ценам поставщика на форме подбора.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
// Возвращаемое значение:
//	Булево. Истина - фильтр по ценам поставщика доступен, Ложь - нет.
//
Функция ФильтрЦенамПоставщикаДоступен(Форма)
	
	ФильтрДоступен = 
	Форма.ЕстьФильтрПоПоиску 
	ИЛИ Форма.ИспользоватьФильтрНоменклатураПоставщика
	ИЛИ (ЗначениеЗаполнено(Форма.УсловиеЦеныПоставщика));
	
	Возврат ФильтрДоступен;
	
КонецФункции

// Функция проверяет, доступно ли использование фильтра по ценам на форме подбора.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
// Возвращаемое значение:
//	Булево. Истина - фильтр по ценам доступен, Ложь - нет.
//
Функция ФильтрЦенамДоступен(Форма)
	
	ФильтрДоступен = 
	Форма.ЕстьФильтрПоПоиску 
	ИЛИ Форма.ИспользоватьФильтры
	ИЛИ Форма.НавигацияПоХарактеристикам
	ИЛИ (ЗначениеЗаполнено(Форма.СегментНоменклатуры))
	ИЛИ Форма.ТолькоВНаличии;
	
	Возврат ФильтрДоступен;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Поиск на формах подборов.

// Процедура устанавливает отбор по строке поиска у динамического списка.
//
// Параметры:
//	ЭлементыОтбора (Коллекция) - коллекция элементов отбора,
//	ЗначениеОтбора (Массив) - массив значений отбора.
//
Процедура УстановитьОтборСпискаПоСтрокеПоиска(ЭлементыОтбора, ЗначениеОтбора, ПоискВыполнен)
	
	ИмяПоля = "Ссылка";
	ПредставлениеОтбора = "ПоискПоПодстроке";
	ИспользованиеОтбора = ПоискВыполнен;
	
	// Создать группу элементов отбора.
	ГруппаЭлементовОтбора = 
	ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ЭлементыОтбора,
		"ПоискПоПодстроке",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ
	);
	
	// Установить элемент отбора в группе.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаЭлементовОтбора,
		ИмяПоля,
		ЗначениеОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		ПредставлениеОтбора,
		ИспользованиеОтбора
	);
	
КонецПроцедуры

// Функция выполняет полнотекстовый поиск элементов по строке поиска.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма из которой была вызвана функция поиска,
//	РезультатПоиска (Неопределено) - переменная, в которую записывается результат поиска.
//
Процедура ВыполнитьПолнотекстовыйПоискТоваров(Форма, РезультатПоиска)
	
	СтрокаПоиска = Форма.СтрокаПоиска;
	РезультатПоиска = СтруктураРезультатовПоиска();
	ОбластиПоискаТоваров = ОбластиПоискаТоваров(Форма);
	МаксимальноеКоличествоЭлементовПоиска = МаксимальноеКоличествоЭлементовПоиска();
	
	// Создать список поиска.
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска);
	СписокПоиска.ПолучатьОписание = Ложь;
	СписокПоиска.ОбластьПоиска = ОбластиПоискаТоваров;
	
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		РезультатПоиска.КодОшибки = "ОшибкаПоиска";
		Возврат;
	КонецПопытки;
	
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	КоличествоРезультатов = СписокПоиска.ПолноеКоличество();
	
	Если КоличествоРезультатов = 0 Тогда
		РезультатПоиска.КодОшибки = "НичегоНеНайдено";
		Возврат;
	КонецЕсли;
	
	Если КоличествоРезультатов > МаксимальноеКоличествоЭлементовПоиска Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	// Пройти по списку поиска.
	РазмерПорции     = 20;
	НачальнаяПозиция = 0;
	ВГраница         = ?(КоличествоРезультатов > РазмерПорции, РазмерПорции, КоличествоРезультатов) - 1;
	
	ЕстьСледующаяПорция = Истина;
	
	Пока ЕстьСледующаяПорция Цикл
		
		Для А = 0 По ВГраница Цикл
			ЭлементСписка = СписокПоиска.Получить(А);
			ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска);
		КонецЦикла;
		
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоРезультатов - 1);
		
		Если ЕстьСледующаяПорция Тогда
			ВГраница = ?(КоличествоРезультатов > (НачальнаяПозиция + РазмерПорции), РазмерПорции, КоличествоРезультатов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработатьРезультатыПоиска(РезультатПоиска);
	
КонецПроцедуры

// Функция выполняет неполнотекстовый поиск элементов по строке поиска.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма из которой была вызвана функция поиска,
//	РезультатПоиска (Неопределено) - переменная, в которую записывается структура, результат поиска.
//
Процедура ВыполнитьНеПолнотекстовыйПоискТоваров(Форма, РезультатПоиска)
	
	РезультатПоиска = СтруктураРезультатовПоиска();
	МаксимальноеКоличествоЭлементовПоиска = МаксимальноеКоличествоЭлементовПоиска();
	
	СписокПоиска = СоздатьСписокПоиска(Форма);
	
	// Проверить, не превышает ли количество найденных элементов
	// заданного ограничения на макс. количество найденных элементов.
	Если СписокПоиска.СлишкомМногоРезультатов Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	КоличествоРезультатов = СписокПоиска.ПолноеКоличество;
	
	Если КоличествоРезультатов = 0 Тогда
		РезультатПоиска.КодОшибки = "НичегоНеНайдено";
		Возврат;
	КонецЕсли;
	
	Если КоличествоРезультатов > МаксимальноеКоличествоЭлементовПоиска Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	// Если количество найденных элементов не превышает заданного ограничения,
	// то включить элементы из списка поиска в результаты поиска.
	ВГраница = КоличествоРезультатов - 1;
	
	Для А = 0 По ВГраница Цикл
		ЭлементСписка = СписокПоиска.Элементы[А];
		ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска);
	КонецЦикла;
	
	ОбработатьРезультатыПоиска(РезультатПоиска);
	
КонецПроцедуры

// Процедура проверяет принадлежность элемента списка поиска, в зависиимости
// от принадлежности элемента к типу метаданных, включает значение элемента
// в нужный раздел результата поиска.
//
// Параметры:
//	ЭлементСписка (ЭлементСпискаЗначений) - элемент списка поиска,
//	РезультатПоиска (Структура) - структура результатов поиска.
//
Процедура ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска)
	
	МетаданныеЭлемента = ЭлементСписка.Метаданные;
	ЗначениеЭлемента   = ЭлементСписка.Значение;
	
	Если ТипЗнч(МетаданныеЭлемента) = Тип("ОбъектМетаданных") Тогда
		Если МетаданныеЭлемента = Метаданные.Справочники.Номенклатура Тогда
			РезультатПоиска.Номенклатура.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = Метаданные.Справочники.ХарактеристикиНоменклатуры Тогда
			РезультатПоиска.ХарактеристикиНоменклатуры.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры Тогда
			РезультатПоиска.ШтрихкодыНоменклатуры.Добавить(ЗначениеЭлемента.Штрихкод);
		ИначеЕсли МетаданныеЭлемента = Метаданные.Справочники.НоменклатураПоставщиков Тогда
			РезультатПоиска.НоменклатураПоставщиков.Добавить(ЗначениеЭлемента);
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестная ошибка'");
		КонецЕсли;
	Иначе
		Если МетаданныеЭлемента = "Номенклатура" Тогда
			РезультатПоиска.Номенклатура.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = "ХарактеристикиНоменклатуры" Тогда
			РезультатПоиска.ХарактеристикиНоменклатуры.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = "ШтрихкодыНоменклатуры" Тогда
			РезультатПоиска.ШтрихкодыНоменклатуры.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = "НоменклатураПоставщиков" Тогда
			РезультатПоиска.НоменклатураПоставщиков.Добавить(ЗначениеЭлемента);
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестная ошибка'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция создает список найденных по строке поиска элементов.
// Поиск выполняется в заданных областях поиска.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора, форма списка.
//
// Возвращаемое значение:
//	Структура. Результаты поиска в областях поиска по строке. В структуру
//	включется список и количество найденных элементов.
//
Функция СоздатьСписокПоиска(Форма)
	
	ТочноеСоответствие = Форма.НайтиПоТочномуСоответствию;
	СтрокаПоиска = ФорматироватьСтрокуПоиска(Форма.СтрокаПоиска, ТочноеСоответствие);
	ОбластиПоиска = ОбластиПоискаТоваров(Форма);
	
	МаксимальноеКоличествоЭлементовПоиска = МаксимальноеКоличествоЭлементовПоиска();
	
	СписокПоиска = СтруктураСпискаПоиска();
	
	// Сформировать текст запроса по областям поиска.
	Запрос = Новый Запрос;
	
	РазделительВТекстеЗапросов = "
	|;
	|";
	
	Для каждого ОбластьПоиска Из ОбластиПоиска Цикл
		
		ТекстЗапросаПоискаПоОбласти = ТекстЗапросаПоискаПоОбласти(ОбластьПоиска, ТочноеСоответствие);
		
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), РазделительВТекстеЗапросов, "") + ТекстЗапросаПоискаПоОбласти;
		
		Если ОбластьПоиска = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры Тогда
			Запрос.УстановитьПараметр("СтрокаПоискаПоШтрихкоду", ИсходнаяСтрокаПоиска(СтрокаПоиска, ТочноеСоответствие));
		КонецЕсли;
		
		Если ОбластьПоиска = Метаданные.Справочники.НоменклатураПоставщиков Тогда
			Запрос.УстановитьПараметр("Партнер", Форма.ПоставщикПартнер);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
	Запрос.УстановитьПараметр("СтарыйАртикул","%*ДМ%");
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Добавить найденные элементы в список поиска. Как только количество элементов в списке
	// превысит максимальное количество найденных элементов, прервать цикл обхода.
	Для каждого РезультатЗапроса Из РезультатыЗапроса Цикл
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЭлементПоиска = Новый Структура("Значение, Метаданные");
			ЗаполнитьЗначенияСвойств(ЭлементПоиска, Выборка);
			
			СписокПоиска.Элементы.Добавить(ЭлементПоиска);
			
			Если СписокПоиска.Элементы.Количество() > МаксимальноеКоличествоЭлементовПоиска Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокПоиска.Элементы.Количество() > МаксимальноеКоличествоЭлементовПоиска Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	СписокПоиска.ПолноеКоличество = СписокПоиска.Элементы.Количество();
	СписокПоиска.СлишкомМногоРезультатов = (СписокПоиска.ПолноеКоличество > МаксимальноеКоличествоЭлементовПоиска);
	
	Возврат СписокПоиска;
	
КонецФункции

// Функция возвращает массив областей поиска товаров.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма из которой была вызвана функция поиска.
//
// Возвращаемое значение:
//	Массив. Массив метаданных - областей поиска товаров.
//
Функция ОбластиПоискаТоваров(Форма)
	
	ИмяФормы = Форма.ИмяФормы;
	
	// В зависимости от того, из какой формы выполняется вызов функции поиска,
	// список областей поиска будет различаться.
	ОбластиПоиска = Новый Массив;
	
	ОбластиПоиска.Добавить(Метаданные.Справочники.Номенклатура);
	//АСТЭК ОбластиПоиска.Добавить(Метаданные.Справочники.ХарактеристикиНоменклатуры);
	ОбластиПоиска.Добавить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		ОбластиПоиска.Добавить(Метаданные.Справочники.НоменклатураПоставщиков);
	КонецЕсли;
	
	Возврат ОбластиПоиска;
	
КонецФункции

// Функцяи возвращает структуру результатов поиска.
// Используется при неполнотекстовом товаров поиске.
//
Функция СтруктураРезультатовПоиска()
	
	РезультатПоиска = Новый Структура();
	
	РезультатПоиска.Вставить("КодОшибки", "");
	РезультатПоиска.Вставить("Номенклатура", Новый Массив);
	//АСТЭК РезультатПоиска.Вставить("ХарактеристикиНоменклатуры", Новый Массив);
	РезультатПоиска.Вставить("ШтрихкодыНоменклатуры", Новый Массив);
	РезультатПоиска.Вставить("НоменклатураПоставщиков", Новый Массив);
	
	Возврат РезультатПоиска;
	
КонецФункции

// Функция возвращает структуру списка поиска.
// Используется при неполнотекстовом поиске товаров.
//
Функция СтруктураСпискаПоиска()
	
	СписокПоиска = Новый Структура;
	СписокПоиска.Вставить("Элементы", Новый Массив);
	СписокПоиска.Вставить("ПолноеКоличество", 0);
	СписокПоиска.Вставить("СлишкомМногоРезультатов", Ложь);
	
	Возврат СписокПоиска;
	
КонецФункции

// Функция возвращает максимальное количество элементов которое может быть обработано
// при выполнении полнотекстового или неполнотекствого поиска. Если количество найденных
// элементов превышает возвращаемое этой функцией, то считается что условие поиска задано
// неточно и предлагается уточнить его.
//
Функция МаксимальноеКоличествоЭлементовПоиска()
	
	Возврат 500;
	
КонецФункции

// Процедура выполняет дополнительную обработку результатов поиска:
// если выполнялся поиск по характеристикам, штрихкодам или номенклатуре
// поставщиков, то процедура выполняет дополнительный запроса для поиска
// номенклатуры - владельцев найденных элементов. Найденная номенклатура
// включается в результат поиска в раздел "Номенклатура".
//
// Параметры:
//	РезультатПоиска (Структура) - структура результатов поиска.
//
Процедура ОбработатьРезультатыПоиска(РезультатПоиска)
	
	// Если найдены характеристики номенклатуры, номенклатура поставщиков или штрихкоды номенклатуры,
	// то для них нужно найти владельцев и добавить их в список номенклатуры.
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	// АСТЭК
	//Если РезультатПоиска.ХарактеристикиНоменклатуры.Количество() > 0 Тогда
	//	
	//	Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), " ОБЪЕДИНИТЬ ВСЕ ", "") + 
	//	"ВЫБРАТЬ
	//	|	Номенклатура.Ссылка КАК Номенклатура
	//	|ИЗ
	//	|	Справочник.Номенклатура КАК Номенклатура
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	//	|		ПО (Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
	//	|				ИЛИ Номенклатура.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец)
	//	|ГДЕ
	//	|	ХарактеристикиНоменклатуры.Ссылка В(&СписокХарактеристик)";
	//	
	//	Запрос.УстановитьПараметр("СписокХарактеристик", РезультатПоиска.ХарактеристикиНоменклатуры);
	//	
	//КонецЕсли;
	//
	
	Если РезультатПоиска.ШтрихкодыНоменклатуры.Количество() > 0 Тогда
		
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), " ОБЪЕДИНИТЬ ВСЕ ", "") + 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод В(&СписокШтрихкодов)";
		
		Запрос.УстановитьПараметр("СписокШтрихкодов", РезультатПоиска.ШтрихкодыНоменклатуры);
		
	КонецЕсли;
	
	Если РезультатПоиска.НоменклатураПоставщиков.Количество() > 0 Тогда
		
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), " ОБЪЕДИНИТЬ ВСЕ ", "") + 
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Ссылка В(&СписокНоменклатурыПоставщиков)";
		
		Запрос.УстановитьПараметр("СписокНоменклатурыПоставщиков", РезультатПоиска.НоменклатураПоставщиков);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				РезультатПоиска.Номенклатура.Добавить(Выборка.Номенклатура);
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает текст запроса необходимый для выполнения поиска по области.
//
// Параметры:
//	ОбластьПоиска (ОбъектМетаданных) - идентификатор области поиска,
//	ТочноеСоответствие (Булево) - признак выполнения поиска по точному соответствию.
//
Функция ТекстЗапросаПоискаПоОбласти(ОбластьПоиска, ТочноеСоответствие)
	
	МаксКоличество = МаксимальноеКоличествоЭлементовПоиска() + 1;
	
	ТекстЗапроса = "";
	
	Если ОбластьПоиска = Метаданные.Справочники.Номенклатура Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ %МаксКоличество%
		|	СправочникНоменклатура.Ссылка КАК Значение,
		|	""Номенклатура"" КАК Метаданные
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ
		|	((СправочникНоменклатура.Наименование %ВидСравнения% &СтрокаПоиска
		|			ИЛИ СправочникНоменклатура.НаименованиеПолное %ВидСравнения% &СтрокаПоиска
		|			ИЛИ СправочникНоменклатура.КодДляПоиска %ВидСравнения% &СтрокаПоиска
		|			ИЛИ СправочникНоменклатура.Артикул %ВидСравнения% &СтрокаПоиска)
		|			//Чечин Петр. убираем удаленные и старые позиции ДМ
		|			И   СправочникНоменклатура.ПометкаУдаления = ЛОЖЬ
		|			И   НЕ (СправочникНоменклатура.Артикул ПОДОБНО &СтарыйАртикул))";
		
	КонецЕсли;
	
	Если ОбластьПоиска = Метаданные.Справочники.НоменклатураПоставщиков Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ %МаксКоличество%
		|	НоменклатураПоставщиков.Ссылка КАК Значение,
		|	""НоменклатураПоставщиков"" КАК Метаданные
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	(НоменклатураПоставщиков.Артикул %ВидСравнения% &СтрокаПоиска
		|		ИЛИ НоменклатураПоставщиков.Наименование %ВидСравнения% &СтрокаПоиска)
		|	И НоменклатураПоставщиков.Владелец = &Партнер";
		
	КонецЕсли;
	
	//АСТЕК
	//Если ОбластьПоиска = Метаданные.Справочники.ХарактеристикиНоменклатуры Тогда
	//	
	//	ТекстЗапроса = "
	//	|ВЫБРАТЬ ПЕРВЫЕ %МаксКоличество%
	//	|	ХарактеристикиНоменклатуры.Ссылка КАК Значение,
	//	|	""ХарактеристикиНоменклатуры"" КАК Метаданные
	//	|ИЗ
	//	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	//	|ГДЕ
	//	|	ХарактеристикиНоменклатуры.Наименование %ВидСравнения% &СтрокаПоиска
	//	|	ИЛИ ХарактеристикиНоменклатуры.НаименованиеПолное %ВидСравнения% &СтрокаПоиска";
	//	
	//КонецЕсли;
	//
	
	Если ОбластьПоиска = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ %МаксКоличество%
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Значение,
		|	""ШтрихкодыНоменклатуры"" КАК Метаданные
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &СтрокаПоискаПоШтрихкоду";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%МаксКоличество%", Формат(МаксКоличество, "ЧЦ=10; ЧГ=0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВидСравнения%", ?(ТочноеСоответствие, "=", "ПОДОБНО"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает исходную строку поиска - которая была введена на форме поиска.
// Используется при неполнотекстовом поиске.
//
// Параметры:
//	СтрокаПоиска (Строка) - строка поиска,
//	ТочноеСоответствие (Булево) - признак поиска по точному соответствию.
//
// Возвращаемое значение:
//	Строка. Исходная строка поиска.
//
Функция ИсходнаяСтрокаПоиска(Знач СтрокаПоиска, ТочноеСоответствие)
	
	Если ТочноеСоответствие Тогда
		Возврат СтрокаПоиска;
	КонецЕсли;
	
	Возврат Сред(СтрокаПоиска, 2, СтрДлина(СтрокаПоиска) - 2);
	
КонецФункции

// Функция возвращает фоматированную строку поиска - строку с добавлением
// служебных символов. Используется при неполнотекстовом поиске.
//
// Параметры:
//	СтрокаПоиска (Строка) - строка поиска,
//	ТочноеСоответствие (Булево) - признак поиска по точному соответствию.
//
// Возвращаемое значение:
//	Строка. Форматированная строка поиска.
//
Функция ФорматироватьСтрокуПоиска(Знач СтрокаПоиска, ТочноеСоответствие)
	
	Если НЕ ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Возврат СтрокаПоиска;
	КонецЕсли;
	
	Если ТочноеСоответствие Тогда
		Возврат СтрокаПоиска;
	КонецЕсли;
	
	Если Лев(СтрокаПоиска, 1) <> "%" Тогда
		СтрокаПоиска = "%" + СтрокаПоиска;
	КонецЕсли;
	
	Если Прав(СтрокаПоиска, 1) <> "%" Тогда
		СтрокаПоиска = СтрокаПоиска + "%";
	КонецЕсли;
	
	Возврат СтрокаПоиска;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции сохранения и восстановления настроек.

// Функция возвращает структуру - значения настроек формы списка, формы выбора товаров.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка, форма выбора.
//
// Возвращаемое значение:
//	Структура. Значения настроек формы списка, формы выбора.
//
Функция НастройкиФормы(Форма)
	
	НастройкиФормы = Новый Структура;
	
	НастройкиФормы.Вставить("ИспользоватьФильтры", Форма.ИспользоватьФильтры);
	НастройкиФормы.Вставить("ВариантНавигации", Форма.ВариантНавигации);
	НастройкиФормы.Вставить("ВидНоменклатуры", Форма.ВидНоменклатуры);
	НастройкиФормы.Вставить("ТекущаяИерархияНоменклатуры", Форма.ТекущаяИерархияНоменклатуры);
	
	//Сохранение параметров отбора.
	Если ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма)
		ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма) Тогда
		
		СохранитьПараметрыДереваОтбора(Форма, Истина);
		
		НастройкиФормы.Вставить("ТаблицаПараметровОтбора", Форма.ТаблицаПараметровОтбора.Выгрузить());
		НастройкиФормы.Вставить("НоменклатураИсходногоКачества", Форма.НоменклатураИсходногоКачества);
		
		Если Форма.ВариантНавигации = "ПоТоварамДругогоКачества" Тогда
			НастройкиФормы.Вставить("ВариантНавигации", Форма.ВариантНавигацииДоТДК);
			НастройкиФормы.Вставить("ИспользоватьФильтры", Форма.ИспользоватьФильтрыДоТДК);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НастройкиФормы;
	
КонецФункции

// Функция возвращает структуру - значения настроек формы подбора товаров.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
// Возвращаемое значение:
//	Структура. Значения настроек формы подбора.
//
Функция НастройкиФормыПодбора(Форма)
	
	НастройкиФормыПодбора = НастройкиФормы(Форма);
	
	НастройкиФормыПодбора.Вставить("ЗапрашиватьКоличество", Форма.ЗапрашиватьКоличество);
	
	Если НЕ ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма) Тогда
		НастройкиФормыПодбора.Вставить("ПоказыватьПодобранныеТовары", Форма.ПоказыватьПодобранныеТовары);
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		НастройкиФормыПодбора.Вставить("ИспользоватьФильтрНоменклатураПоставщика", Форма.ИспользоватьФильтрНоменклатураПоставщика);
		НастройкиФормыПодбора.Вставить("ТекущаяИерархияНоменклатурыПоставщика", Форма.ТекущаяИерархияНоменклатурыПоставщика);	
	КонецЕсли;
	
	НастройкиФормыПодбора.Вставить("ОтображатьОстатки", Форма.ОтображатьОстатки);
	
	НастройкиФормыПодбора.Вставить("ТолькоВНаличии", Форма.ТолькоВНаличии);
	
	Если Форма.ВариантНавигации = "Совместно" Тогда
		НастройкиФормыПодбора.Вставить("ВариантНавигации", "ПоИерархии");
	КонецЕсли;
	
	//Сохранение параметров Отбора
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		
		СохранитьПараметрыДереваОтбора(Форма, Истина);
		
		НастройкиФормыПодбора.Вставить("ТаблицаПараметровОтбора", Форма.ТаблицаПараметровОтбора.Выгрузить());
		НастройкиФормыПодбора.Вставить("НоменклатураИсходногоКачества", Форма.НоменклатураИсходногоКачества);
		
		Если Форма.ВариантНавигации = "ПоТоварамДругогоКачества" Тогда
			НастройкиФормыПодбора.Вставить("ВариантНавигации", Форма.ВариантНавигацииДоТДК);
			НастройкиФормыПодбора.Вставить("ИспользоватьФильтры", Форма.ИспользоватьФильтрыДоТДК);	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НастройкиФормыПодбора;
	
КонецФункции

// Процедура сохраняет значения списков выбора на формах списков, формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка, форма подборов.
//
Процедура СохранитьСпискиВыбора(Форма)
	
	СпискиВыбораКлиентСервер.Сохранить("ИсторияПоискаНоменклатуры",          Форма.Элементы.СтрокаПоиска.СписокВыбора);
	СпискиВыбораКлиентСервер.Сохранить("ИсторияВыбораСегментовНоменклатуры", Форма.Элементы.СегментНоменклатуры.СписокВыбора);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции заполнения форм по параметрам.

// Процедура устанавливает заголовки элементов на форме подбора.
//
//Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьЗаголовкиЭлементовФормыПоПараметрам(Форма)
	
	ЭтоФормаЧекаККМ         = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	ЭтоФормаПомощникаПродаж = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	
	// Установить заголовок полей цены.
	Если ЭтоФормаЧекаККМ ИЛИ ЭтоФормаПомощникаПродаж Тогда
		
		Валюта = Форма.Объект.Валюта;
		Склад  = Форма.Объект.Склад;
		
	Иначе
		
		Валюта = Форма.Параметры.Валюта;
		Склад  = Форма.Параметры.Склад;
		
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Цена'");
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Цена (%1)'"), Валюта);
	КонецЕсли;
	
	Форма.Элементы.Список.ПодчиненныеЭлементы.ПодборТаблицаНоменклатураЦена.Заголовок = ТекстЗаголовка;
	Форма.Элементы.ПодборТаблицаХарактеристики.ПодчиненныеЭлементы.ПодборТаблицаХарактеристикиЦена.Заголовок = ТекстЗаголовка;
	
	Если ЭтоФормаЧекаККМ ИЛИ ЭтоФормаПомощникаПродаж Тогда
		
		Форма.Элементы.ТоварыЦена.Заголовок = ТекстЗаголовка;
		ВыбранаГруппаСкладов = Справочники.Склады.ЭтоГруппа(Форма.Объект.Склад);
		
	Иначе
		
		Форма.Элементы.КорзинаЦена.Заголовок = ТекстЗаголовка;
		ВыбранаГруппаСкладов = Справочники.Склады.ЭтоГруппа(Форма.Параметры.Склад);
		
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Только в наличии на складе ""%1""'");
	Если ВыбранаГруппаСкладов Тогда
		ТекстЗаголовка = НСтр("ru = 'Только в наличии на группе складов ""%1""'");
	КонецЕсли;
	
	Склад = ?(ЗначениеЗаполнено(Склад), Склад, "<склад не выбран>");
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, Склад);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТолькоВНаличии", "Заголовок", ТекстЗаголовка);
	
КонецПроцедуры

// Процедура обрабатывает переданное в параметрах формы значение параметра <ОтборПоТипуНоменклатуры>.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьОтборПоТипуНоменклатурыПоПараметрам(Форма) Экспорт
	
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаВыбораНоменклатуры       = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	Если (ЭтоФормаПодбораВДокументыПродажи ИЛИ ЭтоФормаПодбораВДокументыЗакупки) Тогда
		
		Если Форма.Параметры.ОтборПоТипуНоменклатуры = Неопределено Тогда
			Возврат;			
		Иначе
			ОтборПоТипуНоменклатуры = Форма.Параметры.ОтборПоТипуНоменклатуры;
		КонецЕсли;
		
	ИначеЕсли ЭтоФормаВыбораНоменклатуры Тогда			
		
		Для Каждого Элемент Из Форма.Параметры.Отбор Цикл
			
			Если Элемент.Ключ = "ТипНоменклатуры" Тогда
				ОтборПоТипуНоменклатуры = Элемент.Значение;						
			КонецЕсли;   
			
		КонецЦикла;
		
		Если ОтборПоТипуНоменклатуры = Неопределено Тогда
			Возврат;
		КонецЕсли;			
		
	Иначе
		
		Возврат;	
		
	КонецЕсли;
			
	// Параметр <ОтборПоТипуНоменклатуры> произвольного типа. Может быть передан как отдельный тип
	// номенклатуры, так и массив типов.	
	ОтборыПоТипуНоменклатуры = Новый СписокЗначений;
	
	Если ТипЗнч(ОтборПоТипуНоменклатуры) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
		ОтборыПоТипуНоменклатуры.Добавить(ОтборПоТипуНоменклатуры);
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатуры) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Значение Из ОтборПоТипуНоменклатуры Цикл
			ОтборыПоТипуНоменклатуры.Добавить(Значение);		
		КонецЦикла;	
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатуры) = Тип("Массив") Тогда
		ОтборыПоТипуНоменклатуры.ЗагрузитьЗначения(ОтборПоТипуНоменклатуры);
	Иначе 
		Возврат;
	КонецЕсли;
	
	// Установить отбор по типам номенклатуры для списка номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(	
		Форма.Список.Отбор,
		"ТипНоменклатуры",
		ОтборыПоТипуНоменклатуры,
		ВидСравненияКомпоновкиДанных.ВСписке, 
		"ОтборПоТипуНоменклатуры",
		(ОтборыПоТипуНоменклатуры.Количество() > 0));
	
	// Установить параметры выбора у номенклатуры корзины.
	Если ОтборыПоТипуНоменклатуры.Количество() > 0
		И (ЭтоФормаПодбораВДокументыПродажи Или ЭтоФормаПодбораВДокументыЗакупки) Тогда
		
		ПараметрыВыбора = Новый Массив;
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ОтборыПоТипуНоменклатуры));
		
		Форма.Элементы.КорзинаНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
		
		Если ЭтоФормаПодбораВДокументыЗакупки Тогда
			
			ПараметрыВыбора = Новый Массив;
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("ТипНоменклатуры", ОтборыПоТипуНоменклатуры));
			
			Форма.Элементы.НоменклатураПоставщика.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции общего назначения.

// Процедура устанавливает активным элементом на форме список номенклатуры
// или список характеристик. Используется в случае изменения значений фильтров.
// В этом случае теряется фокус, установленный на списке, и при попытке выбора
// товара активизируется другой элемент.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьАктивныйСписокНаФорме(Форма)
	
	ТекущийЭлемент = Форма.Элементы.Список;
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		ТекущийЭлемент = Форма.Элементы.ПодборТаблицаХарактеристики;
	КонецЕсли;
	
	Форма.ТекущийЭлемент = ТекущийЭлемент;
	
КонецПроцедуры

// Процедура устанавливает градации качества в списке
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьЭлементыСпискаЗначенийКачества(Форма)
	
	Форма.СписокКачества.Очистить();

	Если Форма.НоменклатураИсходногоКачества.Пустая() Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыДругогоКачества.ГрадацияКачества
	|ИЗ
	|	РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	|ГДЕ
	|	ТоварыДругогоКачества.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыДругогоКачества.ГрадацияКачества.Порядок";
	
	Запрос.УстановитьПараметр("Номенклатура", Форма.НоменклатураИсходногоКачества);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Форма.СписокКачества.Добавить(Выборка.ГрадацияКачества);
	КонецЦикла;
	
	УстановитьПометкуГрадацииКачества(Форма);
	
КонецПроцедуры
