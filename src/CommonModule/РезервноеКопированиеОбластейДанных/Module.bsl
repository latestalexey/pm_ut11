
////////////////////////////////////////////////////////////////////////////////
// РезервноеКопированиеОбластейДанных.
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Обмен сообщениями

// Сообщить об успешной архивации текущей области.
//
Функция ОтправитьСообщениеРезервнаяКопияОбластиСоздана(Знач ПараметрыСообщения) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			РезервноеКопированиеОбластейДанныхПовтИсп.СообщениеРезервнаяКопияОбластиСоздана());
		
		Сообщение.Body.Zone = ПараметрыСообщения.ОбластьДанных;
		Сообщение.Body.BackupId = ПараметрыСообщения.ИДКопии;
		Сообщение.Body.FileId = ПараметрыСообщения.ИДФайла;
		Сообщение.Body.Date = ТекущаяУниверсальнаяДата();
		
		СообщенияВМоделиСервиса.ОтправитьСообщение(
			Сообщение,
			РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса());
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
			
КонецФункции

// Планировать архивацию области в прикладной базе.
//
Функция ОтправитьСообщениеОшибкаАрхивацииОбласти(Знач ПараметрыСообщения) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			РезервноеКопированиеОбластейДанныхПовтИсп.СообщениеОшибкаАрхивацииОбласти());
		
		Сообщение.Body.Zone = ПараметрыСообщения.ОбластьДанных;
		Сообщение.Body.BackupId = ПараметрыСообщения.ИДКопии;
		
		СообщенияВМоделиСервиса.ОтправитьСообщение(
			Сообщение,
			РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса());
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
			
КонецФункции

// Планировать архивацию области в прикладной базе.
//
Функция ОтправитьСообщениеАрхивацияОбластиПропущена(Знач ПараметрыСообщения) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			РезервноеКопированиеОбластейДанныхПовтИсп.СообщениеАрхивацияОбластиПропущена());
		
		Сообщение.Body.Zone = ПараметрыСообщения.ОбластьДанных;
		Сообщение.Body.BackupId = ПараметрыСообщения.ИДКопии;
		
		СообщенияВМоделиСервиса.ОтправитьСообщение(
			Сообщение,
			РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса());
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
			
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Версионирование интерфейсов

// Взводит либо сбрасывает константу-флаг ПоддержкаРезервногоКопирования наличия в Менеджере сервиса функциональности резервного копирования.
// К флагу привязана одноименная функциональная опция, обслуживающая доступность соответствующего пользовательского интерфейса.
// Возвращает новое значение константы.
//
// Возвращаемое значение:
// Булево - новое значение константы.
//
Функция УстановитьСтатусРезервногоКопирования() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьПоддержка = РезервноеКопированиеОбластейДанныхПовтИсп.МенеджерСервисаПоддерживаетРезервноеКопирование();
	Константы.ПоддержкаРезервногоКопирования.Установить(ЕстьПоддержка);
	Возврат ЕстьПоддержка;

КонецФункции

// Активность пользователей в области данных

// Устанавливает признак активности пользователя в текущей области.
// Признаком является наличие записи по данной области в регистре ОбластиКРезервномуКопированию.
//
Процедура УстановитьФлагАктивностиПользователяВОбласти() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ПоддержкаРезервногоКопирования") Тогда
		УстановитьФлагАктивностиВОбласти();
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает либо снимает признак активности пользователя в текущей области.
// Признаком является наличие записи по данной области в регистре ОбластиКРезервномуКопированию.
// Снятие признака - удаление записи.
//
// Параметры:
// ОбластьДанных - Число; Неопределено - Значение разделителя. Неопределено означает значение разделителя текущей области данных.
// Состояние - Булево - Истина, если признак надо установить; Ложь, если снять.
//
Процедура УстановитьФлагАктивностиВОбласти(Знач ОбластьДанных = Неопределено, Знач Состояние = Истина)
	
	Если ОбластьДанных = Неопределено Тогда
		ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	Иначе
		Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()
			И ОбластьДанных <> ОбщегоНазначения.ЗначениеРазделителяСеанса() Тогда
			
			ВызватьИсключение(НСтр("ru = 'Запрещено работать с данными области кроме текущей'"));
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ОбластиКРезервномуКопированию.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбластьДанных = ОбластьДанных;
	
	Если Состояние Тогда
		МенеджерЗаписи.Записать();
	Иначе	
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Выгрузка областей данных.

// Планирует создание резервной копии области данных.
// 
// Параметры:
//  ПараметрыВыгрузки - Структура, состав ключей см. СоздатьПустыеПараметрыВыгрузки()
//   
Процедура ЗапланироватьАрхивациюВОчереди(Знач ПараметрыВыгрузки) Экспорт
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(ПараметрыВыгрузки);
	ПараметрыМетода.Добавить(Неопределено);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяМетода", РезервноеКопированиеОбластейДанныхПовтИсп.ИмяМетодаФоновогоРезервногоКопирования());
	ПараметрыЗадания.Вставить("Ключ", "" + ПараметрыВыгрузки.ИДКопии);
	
	// Поиск активных заданий с тем же ключом.
	АктивныеЗадания = ОчередьЗаданий.ПолучитьЗадание(ПараметрыЗадания, ПараметрыВыгрузки.ОбластьДанных); // Возвращает массив ИД заданий или один ИД.
	
	Если АктивныеЗадания = Неопределено Тогда
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
		ПараметрыЗадания.Вставить("ЗапланированныйМоментЗапуска", ПараметрыВыгрузки.МоментЗапуска);
		
		ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания, ПараметрыВыгрузки.ОбластьДанных);
	Иначе
		ПараметрыЗадания.Вставить("СостояниеЗадания", Перечисления.СостоянияЗаданий.Запланировано);
		АктивныеЗадания = ОчередьЗаданий.ПолучитьЗадание(ПараметрыЗадания, ПараметрыВыгрузки.ОбластьДанных);
		Если АктивныеЗадания = Неопределено Тогда // Нет запланированных.
			Возврат;
		КонецЕсли;
		ПараметрыЗадания.Удалить("СостояниеЗадания");
		
		Если ТипЗнч(АктивныеЗадания) = Тип("Массив") Тогда
			Задание = АктивныеЗадания[0];
		Иначе
			Задание = АктивныеЗадания;
		КонецЕсли;	
		
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
		ПараметрыЗадания.Вставить("ЗапланированныйМоментЗапуска", ПараметрыВыгрузки.МоментЗапуска);
		
		ОчередьЗаданий.ИзменитьЗадание(Задание, ПараметрыЗадания, ПараметрыВыгрузки.ОбластьДанных);
	КонецЕсли;
	
КонецПроцедуры	

// Создает файл выгрузки заданной области и помещает его в хранилище Менеджера сервиса.
//
// Параметры:
// ПараметрыВыгрузки - Структура:
// 	- ОбластьДанных - Число.
//	- ИДКопии - УникальныйИдентификатор; Неопределено.
//  - МоментЗапуска - Дата - момент запуска архивирования области.
//	- Принудительно - Булево - Флаг из МС: необходимость создавать копию вне зависимости от активности пользователей.
//	- ПоТребованию - Булево - флаг интерактивного запуска архивирования. Если из МС - всегда Ложь.
//	- ИДФайла - УникальныйИдентификатор - ИД файла выгрузки в хранилище МС.
//	- НомерПопытки - Число - Счетчик попыток. Начальное значение: 1.
//
Процедура ВыгрузитьОбластьВХранилищеМС(Знач ПараметрыВыгрузки, АдресХранилища = Неопределено) Экспорт
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		ВызватьИсключение(НСтр("ru = 'Нарушение прав доступа'"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ТребуетсяВыгрузка(ПараметрыВыгрузки) Тогда
		ОтправитьСообщениеАрхивацияОбластиПропущена(ПараметрыВыгрузки);
		Возврат;
	КонецЕсли;
	
	ИмяАрхива = Неопределено;
	
	НачатьТранзакцию();
	Попытка
		РаботаВМоделиСервиса.ЗаблокироватьТекущуюОбластьДанных(, Истина);
		ИмяАрхива = ВыгрузкаЗагрузкаДанных.ВыгрузитьТекущуюОбластьВАрхив();
		ИДФайла = РаботаВМоделиСервиса.ПоместитьФайлВХранилищеМенеджераСервиса(Новый Файл(ИмяАрхива));
		ПараметрыВыгрузки.Вставить("ИДФайла", ИДФайла);
		ОтправитьСообщениеРезервнаяКопияОбластиСоздана(ПараметрыВыгрузки);
		Если ЗначениеЗаполнено(АдресХранилища) Тогда
			ПоместитьВоВременноеХранилище(ИДФайла, АдресХранилища);
		КонецЕсли;	
		УстановитьФлагАктивностиВОбласти(ПараметрыВыгрузки.ОбластьДанных, Ложь);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание резервной копии области данных'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Если ИмяАрхива <> Неопределено И НайтиФайлы(ИмяАрхива).Количество() > 0 Тогда
			Попытка
				УдалитьФайлы(ИмяАрхива);
			Исключение
			КонецПопытки;
		КонецЕсли;
		Если ПараметрыВыгрузки.ПоТребованию Тогда
			ВызватьИсключение;
		Иначе	
			Если ПараметрыВыгрузки.НомерПопытки > 3 Тогда
				ОтправитьСообщениеОшибкаАрхивацииОбласти(ПараметрыВыгрузки);
			Иначе	
				// Перепланировать: текущее время области + 10 минут.
				ПараметрыВыгрузки.НомерПопытки = ПараметрыВыгрузки.НомерПопытки + 1;
				МоментПовторногоЗапуска = ТекущаяДатаОбласти(ПараметрыВыгрузки.ОбластьДанных); // Сейчас в области.
				МоментПовторногоЗапуска = МоментПовторногоЗапуска + 10 * 60; // На 10 минут позже.
				ПараметрыВыгрузки.Вставить("МоментЗапуска", МоментПовторногоЗапуска);
				ЗапланироватьАрхивациюВОчереди(ПараметрыВыгрузки);
			КонецЕсли;
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

Функция ТекущаяДатаОбласти(Знач ОбластьДанных)
	
	ЧасовойПояс = ПолучитьЧасовойПоясОбластиДанных(ОбластьДанных);
	Возврат МестноеВремя(ТекущаяУниверсальнаяДата(), ЧасовойПояс);
	
КонецФункции	

Функция ТребуетсяВыгрузка(Знач ПараметрыВыгрузки)
	
	Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()
		И ПараметрыВыгрузки.ОбластьДанных <> ОбщегоНазначения.ЗначениеРазделителяСеанса() Тогда
		
		ВызватьИсключение(НСтр("ru = 'Запрещено работать с данными области кроме текущей'"));
	КонецЕсли;
	
	Результат = ПараметрыВыгрузки.Принудительно;
	
	Если Не Результат Тогда
		МенеджерЗаписи = РегистрыСведений.ОбластиКРезервномуКопированию.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОбластьДанных = ПараметрыВыгрузки.ОбластьДанных;
		МенеджерЗаписи.Прочитать();
		Результат = МенеджерЗаписи.Выбран();
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

// Создает незаполненную структуру нужного формата.
//
// Возвращаемое значение:
// Структура:
// 	- ОбластьДанных - Число.
//	- ИДКопии - УникальныйИдентификатор; Неопределено.
//  - МоментЗапуска - Дата - момент запуска архивирования области.
//	- Принудительно - Булево - Флаг из МС: необходимость создавать копию вне зависимости от активности пользователей.
//	- ПоТребованию - Булево - флаг интерактивного запуска архивирования. Если из МС - всегда Ложь.
//	- ИДФайла - УникальныйИдентификатор - ИД файла выгрузки в хранилище МС.
//	- НомерПопытки - Число - Счетчик попыток. Начальное значение: 1.
//
Функция СоздатьПустыеПараметрыВыгрузки() Экспорт
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ОбластьДанных");
	ПараметрыВыгрузки.Вставить("ИДКопии");
	ПараметрыВыгрузки.Вставить("МоментЗапуска");
	ПараметрыВыгрузки.Вставить("Принудительно");
	ПараметрыВыгрузки.Вставить("ПоТребованию");
	ПараметрыВыгрузки.Вставить("ИДФайла");
	ПараметрыВыгрузки.Вставить("НомерПопытки", 1);
	Возврат ПараметрыВыгрузки;
	
КонецФункции

// Отменяет запланированное ранее создание резервной копии.
//
// ПараметрыОтмены - Структура
//  ОбластьДанных - Число - область данных создание резервной копии в которой требуется отменить
//  ИДКопии - УникальныйИдентификатор - идентификатор копии, создание которой требуется отменить
//
Процедура ОтменитьСозданиеРезервнойКопииОбласти(Знач ПараметрыОтмены) Экспорт
	
	Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		ВызватьИсключение(НСтр("ru = 'Не достаточно прав для выполнения операции'"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяМетода = РезервноеКопированиеОбластейДанныхПовтИсп.ИмяМетодаФоновогоРезервногоКопирования();
	
	Отбор = Новый Структура("ИмяМетода, Ключ", ИмяМетода, "" + ПараметрыОтмены.ИДКопии);
	Задания = ОчередьЗаданий.ПолучитьЗадание(Отбор, ПараметрыОтмены.ОбластьДанных);
	
	Если ТипЗнч(Задания) = Тип("Строка") Тогда
		ОчередьЗаданий.УдалитьЗадание(Задания, ПараметрыОтмены.ОбластьДанных);
	ИначеЕсли ТипЗнч(Задания) = Тип("Массив") Тогда
		Для Каждого Задание Из Задания Цикл
			ОчередьЗаданий.УдалитьЗадание(Задание, ПараметрыОтмены.ОбластьДанных);
		КонецЦикла;	
	КонецЕсли;
	
	// Отменить активные фоновые задания.
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Попытка
		Для Каждого Задание Из Задания Цикл
			Задание.Отменить();
		КонецЦикла;	
		ФоновыеЗадания.ОжидатьЗавершения(Задания, 3);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Отмена архивации области данных.'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры	

// Возвращает часовой пояс заданной области.
//
// Параметры:
// ОбластьДанных - Число.
//
// Возвращаемое значение:
// Строка; Неопределено - Часовой пояс области.
//
Функция ПолучитьЧасовойПоясОбластиДанных(Знач ОбластьДанных) Экспорт
	
	Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()
		И ОбластьДанных <> ОбщегоНазначения.ЗначениеРазделителяСеанса() Тогда
		
		ВызватьИсключение(НСтр("ru = 'Запрещено работать с данными области кроме текущей'"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОбластиДанных.ЧасовойПояс
	|ИЗ
	|	РегистрСведений.ОбластиДанных КАК ОбластиДанных
	|ГДЕ
	|	ОбластиДанных.ОбластьДанных = &ОбластьДанных";
	Запрос.УстановитьПараметр("ОбластьДанных", ОбластьДанных);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда 
		ЧасовойПояс = "";
	Иначе
		ЧасовойПояс = Результат.Выгрузить().Получить(0).ЧасовойПояс;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧасовойПояс) Тогда
		Возврат ЧасовойПояс;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с настройками резервного копирования

// Возвращает структуру настроек резервного копирования области данных.
//
// Параметры:
// ОбластьДанных - Число; Неопределено - Если Неопределено, возвращаются системные настройки.
//
// Возвращаемое значение:
// Структура - структура настроек. 
//	См. РезервноеКопированиеОбластейДанныхПовтИсп.СоответствиеРусскихИменПолейНастроекАнглийским().
//
Функция ПолучитьНастройкиРезервногоКопированияОбласти(Знач ОбластьДанных = Неопределено) Экспорт
	
	Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()
		И ОбластьДанных <> ОбщегоНазначения.ЗначениеРазделителяСеанса() Тогда
		
		ВызватьИсключение(НСтр("ru = 'Запрещено работать с данными области кроме текущей'"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Прокси = РезервноеКопированиеОбластейДанныхПовтИсп.ПроксиКонтроляРезервногоКопирования();
	
	НастройкиXDTO = Неопределено;
	СообщениеОбОшибке = Неопределено;
	Если ОбластьДанных = Неопределено тогда
		ОперацияВыполнена = Прокси.GetDefaultSettings(НастройкиXDTO, СообщениеОбОшибке);
	Иначе
		ОперацияВыполнена = Прокси.GetSettings(ОбластьДанных, НастройкиXDTO, СообщениеОбОшибке);
	КонецЕсли;
	
	Если НЕ ОперацияВыполнена Тогда
		ШаблонСообщения = НСтр("ru = 'Ошибка при получении настроек резервного копирования:
			|%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СообщениеОбОшибке);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Возврат НастройкиXDTOВСтруктуру(НастройкиXDTO);
	
КонецФункции	

// Записывает настройки резервного копирования области данных в хранилище менеджера сервиса.
//
// Параметры:
// ОбластьДанных - Число.
// НастройкиРезервногоКопирования - Структура.
//
// Возвращаемое значение:
// Булево - успешность записи. 
//
Процедура УстановитьНастройкиРезервногоКопированияОбласти(Знач ОбластьДанных, Знач НастройкиРезервногоКопирования) Экспорт
	
	Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()
		И ОбластьДанных <> ОбщегоНазначения.ЗначениеРазделителяСеанса() Тогда
		
		ВызватьИсключение(НСтр("ru = 'Запрещено работать с данными области кроме текущей'"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Прокси = РезервноеКопированиеОбластейДанныхПовтИсп.ПроксиКонтроляРезервногоКопирования();
	
	Тип = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/SaaS/1.0/XMLSchema/ZoneBackupControl", "Settings");
	НастройкиXDTO = Прокси.ФабрикаXDTO.Создать(Тип);
	
	СоответствиеИмен = РезервноеКопированиеОбластейДанныхПовтИсп.СоответствиеРусскихИменПолейНастроекАнглийским();
	Для Каждого ПараИменНастроек Из СоответствиеИмен Цикл
		НастройкиXDTO[ПараИменНастроек.Ключ] = НастройкиРезервногоКопирования[ПараИменНастроек.Значение];
	КонецЦикла;
	
	СообщениеОбОшибке = Неопределено;
	Если НЕ Прокси.SetSettings(ОбластьДанных, НастройкиXDTO, СообщениеОбОшибке) Тогда
		ШаблонСообщения = НСтр("ru = 'Ошибка при сохранении настроек резервного копирования:
                                |%1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СообщениеОбОшибке);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Преобразования типов

Функция НастройкиXDTOВСтруктуру(Знач НастройкиXDTO)
	
	Если НастройкиXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Результат = Новый Структура;
	СоответствиеИмен = РезервноеКопированиеОбластейДанныхПовтИсп.СоответствиеРусскихИменПолейНастроекАнглийским();
	Для Каждого ПараИменНастроек Из СоответствиеИмен Цикл
		Если НастройкиXDTO.Установлено(ПараИменНастроек.Ключ) Тогда
			Результат.Вставить(ПараИменНастроек.Значение, НастройкиXDTO[ПараИменНастроек.Ключ]);
		КонецЕсли;
	КонецЦикла;
	Возврат  Результат; 
	
КонецФункции	
	
