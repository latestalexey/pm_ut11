////////////////////////////////////////////////////////////////////////////////
// Модуль "ЗакупкиКлиент", содержит процедуры и функции для 
// обработки действий пользователя в процессе работы с документами закупки
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с выбором значений.

// Процедура - обработчик события "НачалоВыбора" элемента формы "Соглашение"
//
// Параметры:
//	Партнер                  - СправочникСсылка.Партнеры - ссылка на партнера, для которого необходимо выбрать соглашение
//	Документ                 - ДокументСсылка - ссылка на ранее выбранное соглашение для  начального позиционирования в списке
//	ДатаДокумента            - Дата - дата документа, в котором выбирается соглашение
//	ДоступноДляЗакупки       - Булево - Если Истина, отбираются только соглашения с установленным флагом ДоступноДляЗакупки
//	БезКомиссионныхСоглашений - Булево - Если Истина, отбираются только соглашения с хоз. операций "Закупка у поставщика"
//
Процедура НачалоВыбораСоглашенияСПоставщиком(Элемент,
	                                         СтандартнаяОбработка,
	                                         Партнер,
	                                         Документ,
	                                         ДатаДокумента='00010101',
	                                         ДоступноДляЗакупки = Ложь,
	                                         СтруктураДополнительногоОтбора = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		
		Партнер = ОткрытьФормуМодально (
			"Справочник.Партнеры.ФормаВыбора",
			Новый Структура("Отбор", Новый Структура("Поставщик", Истина))
		);
		
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	Иначе
		
		Если ЗначениеЗаполнено(СтруктураДополнительногоОтбора) Тогда
			СтруктураОтбора = СтруктураДополнительногоОтбора;
			СтруктураОтбора.Вставить("Партнер",Партнер);
		Иначе
			СтруктураОтбора = Новый Структура("Партнер",Партнер);
		КонецЕсли;
		
		ОткрытьФорму (
			"Справочник.СоглашенияСПоставщиками.ФормаВыбора",
			Новый Структура("ДатаДокумента,ДоступноДляЗакупки,ТекущаяСтрока,Отбор", ДатаДокумента, ДоступноДляЗакупки, Документ, СтруктураОтбора),
			Элемент
		);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаВыбораДоговораКонтрагента(ВыбранноеЗначение, ДанныеФормы) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		
		СтруктураОснование = Новый Структура("Партнер, Контрагент, Организация, ХозяйственнаяОперация, ВалютаВзаиморасчетов, Соглашение");
		ЗаполнитьЗначенияСвойств(СтруктураОснование, ДанныеФормы);
		
		СтруктураОснование.Вставить("Номер", СокрЛП(ВыбранноеЗначение));
		
		ВыбранноеЗначение = ОткрытьФормуМодально("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", Новый Структура("Основание", СтруктураОснование));
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции проверки возможности выполнения действий.

// Проверяет заполненность реквизитов, необходимых для заполнения цен в документе по соглашению с поставщиком
//
// Параметры:
//	Документ                    - ДокументОбъект, для которого выполняются проверки
//	ИмяТабличнойЧасти           - Строка - имя табличной части, в которой необходимо осуществить проверку
//	ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя
//
// Возвращаемое значение:
//	Булево
//	Ложь, если необходимые данные не заполнены
//
Функция НеобходимоЗаполнениеЦенПоСоглашению(Документ, ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти) Экспорт

	Если Не ЗначениеЗаполнено(Документ.Соглашение) Тогда
		
		Предупреждение(НСтр("ru='В документе не указано соглашение с поставщиком, или соглашения с поставщиком отсутствуют. Цены не могут быть заполнены'"));
		Возврат Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(Документ.Валюта) Тогда
		
		Предупреждение(НСтр("ru='В документе не указана валюта. Цены не могут быть заполнены'"));
		Возврат Ложь;
		
	ИначеЕсли Документ[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		Предупреждение(ТекстПредупреждения);
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;

КонецФункции

// Проверяет заполненность реквизитов, необходимых для заполнения цен в документе по условию цен поставщика
//
// Параметры:
//	Документ                    - ДокументОбъект, для которого выполняются проверки
//	ИмяТабличнойЧасти           - Строка - имя табличной части, в которой необходимо осуществить проверку
//	ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя
//
// Возвращаемое значение:
//	Булево
//	Ложь, если необходимые данные не заполнены
//
Функция НеобходимоЗаполнениеЦенПоУсловиюЦенПоставщика(Документ, ИмяТабличнойЧасти, ПредставлениеТабличнойЧасти) Экспорт

	Если Не ЗначениеЗаполнено(Документ.Валюта) Тогда
		
		Предупреждение(НСтр("ru='В документе не указана валюта. Цены не могут быть заполнены'"));
		Возврат Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(Документ.Соглашение) Тогда
		
		Предупреждение(НСтр("ru='В документе не указано соглашение. Цены не могут быть заполнены'"));
		Возврат Ложь;
		
	ИначеЕсли Документ[ИмяТабличнойЧасти].Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнена таблица %ПредставлениеТабличнойЧасти%. Цены не могут быть заполнены'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		Предупреждение(ТекстПредупреждения);
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;

КонецФункции

// Вызывает проверку на наличие в информационной базе ранее сопоставленной номенклатуры поставщика
// Если ранее сопоставленная номенклатура найдена - предупреждает об этом пользователя
//
Процедура ПроверитьСопоставленнуюНоменклатуруПоставщика(Объект, Отказ, НеВыполнятьПроверкуДляПользователя) Экспорт
	
	Если Объект.Товары.Количество() > 0 И Не НеВыполнятьПроверкуДляПользователя Тогда
		ВыводитьПредупреждение = ЗакупкиВызовСервера.ПроверитьСопоставленнуюНоменклатуруПоставщика(Объект);
		
		Если ВыводитьПредупреждение Тогда
			
			ТекстВопроса = НСтр("ru='Для некоторой номенклатуры найдена ранее сопоставленная номенклатура поставщика.'");
			ТекстВопроса = ТекстВопроса + Символы.ПС + НСтр("ru='Несопоставленная номенклатура поставщика будет сопоставлена с номенклатурой. Продолжить?'");
			
			ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// При попытке выбора номенклатуры поставщика в строке таблицы пользователь получает сообщение о незаполненности партнера
//
// Параметры:
//	Объект              - ДанныеФормыСтруктура - документ, для выдачи сообщения об ошибках
//	Поле                - ПолеФормы - поле, в котором пользователь осуществляет выбор
//	ИмяПроверяемогоПоля - Строка - имя поля, для которого необходимо выдать ошибку
//
Процедура ПриВыбореНоменклатурыПоставщика(Объект, Поле, ИмяПроверяемогоПоля, ПредставлениеПартнера) Экспорт
	
	Если Поле.Имя = ИмяПроверяемогоПоля Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
			
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Поле ""%ПредставлениеПартнера%"" не заполнено'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеПартнера%", ПредставлениеПартнера);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, "Объект.Партнер");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры оповещения пользователя о выполненных действиях.

//Показывает оповещение пользователя об окончании заполнения условий закупок по умолчанию
//
Процедура ОповеститьОбОкончанииЗаполненияУсловийЗакупокПоУмолчанию() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Условия закупок заполнены'"),
		,
		НСтр("ru='Условия закупок по умолчанию заполнены'"),
		БиблиотекаКартинок.Информация32
	);

КонецПроцедуры

//Показывает оповещение пользователя об окончании заполнения условий закупок
//
Процедура ОповеститьОбОкончанииЗаполненияУсловийЗакупок() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Условия закупок заполнены'"),
		,НСтр("ru='Условия закупок по соглашению с поставщиком заполнены'"),
		БиблиотекаКартинок.Информация32
	);

КонецПроцедуры

//Показывает оповещение пользователя об окончании заполнения цен по соглашению с клиентом
//
// Параметры:
//	ЦеныРассчитаны - Булево - Признак успешного расчета цен хотя бы в одной строке
//
Процедура ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны = Истина) Экспорт

	Если ЦеныРассчитаны Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены заполнены'"),
			,
			НСтр("ru='Цены по соглашению с поставщиком заполнены'"),
			БиблиотекаКартинок.Информация32
		);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены не заполнены'"),
			,
			НСтр("ru='Ни в одной строке цены по соглашению с поставщиком не заполнены'"),
			БиблиотекаКартинок.Информация32
		);
	КонецЕсли;
	
КонецПроцедуры

//Показывает оповещение пользователя об окончании заполнения цен по условию цен поставщика
//
// Параметры:
//	ЦеныРассчитаны       - Булево - Признак успешного расчета цен хотя бы в одной строке
//	УсловиеЦенПоставщика - СправочникСсылка.УсловияЦенПоставщиков - Условие цены поставщика, по которому осуществлялось заполнение цен
//
Процедура ОповеститьОбОкончанииЗаполненияЦенПоУсловиюЦенПоставщика(ЦеныРассчитаны = Истина, УсловиеЦенПоставщика) Экспорт

	Если ЦеныРассчитаны Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены заполнены'"),
			,
			СтрЗаменить(НСтр("ru='Цены по условию цен поставщика ""%УсловиеЦенПоставщика%"" заполнены'"), "%УсловиеЦенПоставщика%", УсловиеЦенПоставщика),
			БиблиотекаКартинок.Информация32
		);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены не заполнены'"),
			,
			СтрЗаменить(НСтр("ru='Ни в одной строке цены по условию цены поставщика ""%УсловиеЦенПоставщика%"" не заполнены'"), "%УсловиеЦенПоставщика%", УсловиеЦенПоставщика),
			БиблиотекаКартинок.Информация32
		);
	КонецЕсли;
	
КонецПроцедуры

//Показывает оповещение пользователя об окончании заполнения дат поступления всех строк тч
//
// Параметры:
//	ДатаПоступления - Дата - дата отгрузки, по которой заполнялась дата в табличной части
//	ВыделенныеСтроки - Массив - влияет на текст сообщения
//
Процедура ОповеститьОбОкончанииЗаполненияДатПоступления(ДатаПоступления, ЗаполнениеВыделенныхСтрок) Экспорт

	Если ЗаполнениеВыделенныхСтрок Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = Дата поступления заполнена'"),
			,
			СтрЗаменить(НСтр("ru='Для выделенных строк установлена дата поступления %ДатаПоступления%'"), "%ДатаПоступления%", Формат(ДатаПоступления, "ДФ=dd.MM.yyyy")),
			БиблиотекаКартинок.Информация32
		);
		
	Иначе
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Дата поступления заполнена'"),
			,
			СтрЗаменить(НСтр("ru='Для всех строк установлена дата поступления %ДатаПоступления%'"), "%ДатаПоступления%", Формат(ДатаПоступления, "ДФ=dd.MM.yyyy")),
			БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

//Показывает оповещение пользователя об окончании перезаполнения товаров по фактической приемке
//
// Параметры:
//	ЕстьИзменения           - Булево - Если Истина - есть изменения в табличной части
//	КоличествоПерезаполнено - Булево - Если Истина - количество было перезаполнено по фактической приемке
//
Процедура ОповеститьОбОкончанииПерезаполненияТоваровПоПриемке(ЕстьИзменения, КоличествоПерезаполнено) Экспорт
	
	Если ЕстьИзменения Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Количество перезаполнено'"),
			,
			НСтр("ru='В строках перезаполнено количество.'"),
			БиблиотекаКартинок.Информация32
			);
		
	Иначе
		
		Если КоличествоПерезаполнено Тогда
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Перезаполнение не требуется'"),
				,
				НСтр("ru='Перезаполнение не требуется, т.к. во всех строках количество совпадает с указанным.'"),
				БиблиотекаКартинок.Информация32
			);
			
		Иначе
		
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Перезаполнение не требуется'"),
				,
				НСтр("ru='Ни по одной строке не начата приемка.'"),
				БиблиотекаКартинок.Информация32
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры обработки команд пользователя.

// Процедура для выбора условия цен поставщика из формы выбора.
//
// Параметры:
//	Соглашение - СправочникСсылка.СоглашенияСПоставщиками - соглашение, для которого необходимо выбрать условия цен поставщиков
//
Функция ВыбратьУсловиеЦенПоставщика(Соглашение) Экспорт

	УсловиеЦенПоставщика = ОткрытьФормуМодально("Справочник.УсловияЦенПоставщиков.ФормаВыбора", Новый Структура("Отбор",Новый Структура("Владелец", Соглашение)));
	Возврат УсловиеЦенПоставщика;
	
КонецФункции

// Формирует список выбора номенклатуры поставщика с отбором по номенклатуре, характеристике, упаковке
//
// Параметры:
//	Партнер       - СправочникСсылка.Партнеры - владелец номенклатуры поставщика
//	ТекущаяСтрока - ДанныеФормыЭлементКоллекции - текущая строка таблицы Товары
//	СписокВыбора  - СписокЗначений - список выбора номенклатуры поставщика
//
Процедура ЗаполнитьСписокВыбораНоменклатурыПоставщика(Партнер, ТекущаяСтрока, СписокВыбора) Экспорт
	
	Если ТекущаяСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		СписокВыбора.Очистить();
	Иначе
		
		СписокЗначений = ЗакупкиВызовСервера.СформироватьСписокВыбораНоменклатурыПоставщика(
			Партнер,
			ТекущаяСтрока.Номенклатура,
			ТекущаяСтрока.Характеристика,
			ТекущаяСтрока.Упаковка
		);
		
		СписокВыбора.ЗагрузитьЗначения(СписокЗначений.ВыгрузитьЗначения());
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму списка номенклатуры поставщика с отбором по владельцу, номенклатуре, характеристике, упаковке
//
// Параметры:
//	Партнер       - СправочникСсылка.Партнеры - владелец номенклатуры поставщика
//	Ссылка        - ДокументСсылка - ссылка на документ из формы которого вызывается процедура
//	ТекущаяСтрока - ДанныеФормыЭлементКоллекции - текущая строка таблицы Товары
//
Процедура ПоказатьНоменклатуруПоставщика(Партнер, Ссылка, ТекущаяСтрока) Экспорт
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Отказ = Истина;
	КонецЕсли;
		
	Если ТекущаяСтрока = Неопределено Тогда
		Отказ = Истина;
	ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		
		ОчиститьСообщения();
		
		Если Не ЗначениеЗаполнено(Партнер) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Партнер"" не заполнено'"), Ссылка, "Объект.Партнер");
		КонецЕсли;
		
		Если ТекущаяСтрока = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите строку таблицы ""Товары""'"), Ссылка, "Объект.Товары");
		ИначеЕсли Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не заполнена колонка ""Номенклатура""'"),
				Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущаяСтрока.НомерСтроки, "Номенклатура")
			);
		КонецЕсли;
		
	Иначе
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("Владелец",       Партнер);
		СтруктураПараметров.Вставить("Номенклатура",   ТекущаяСтрока.Номенклатура);
		СтруктураПараметров.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
		СтруктураПараметров.Вставить("Упаковка",       ТекущаяСтрока.Упаковка);
		
		ОткрытьФорму("Справочник.НоменклатураПоставщиков.Форма.ФормаСписка", Новый Структура("Отбор", СтруктураПараметров));
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполненность реквизитов, необходимых для заполнения товаров по приемке
//
// Параметры:
//	ЕстьПринятыеТовары              - Булево
//	ЗаполнятьПринимающимисяТоварами - Булево
//
// Возвращаемое значение:
//	Булево
//	Ложь, если пользователь отказался от заполнения
//
Функция ВопросОПерезаполненииПринятымиТоварами(ЕстьПринятыеТовары, ЗаполнятьПринимающимисяТоварами) Экспорт
	
	СписокКнопок = Новый СписокЗначений();
	
	Если ЕстьПринятыеТовары Тогда
		
		ТекстВопроса = НСтр("ru='Не все товары приняты. Учитывать при заполнении товары, которые принимаются?'");
		СписокКнопок.Добавить("Учитывать", НСтр("ru = 'Учитывать'"));
		СписокКнопок.Добавить("НеУчитывать", НСтр("ru = 'Не учитывать'"));
		
	Иначе
		
		ТекстВопроса = НСтр("ru='Отсутствуют принятые товары. Учитывать при заполнении товары, которые принимаются?'");
		СписокКнопок.Добавить("Учитывать", НСтр("ru = 'Учитывать'"));
		
	КонецЕсли;
	
	СписокКнопок.Добавить("НеПерезаполнять", НСтр("ru = 'Не перезаполнять'"));
	ОтветНаВопрос = Вопрос(ТекстВопроса, СписокКнопок);
	
	ЗаполнятьПринимающимисяТоварами = (ОтветНаВопрос = "Учитывать");
	
	Если ОтветНаВопрос = "НеПерезаполнять" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Создает поступление товаров и услуг по одному или нескольким заказам поставщикам
//
// Параметры:
//	Список - ТаблицаФормы - список заказов поставщикам, по выделенным заказам которого будет создано поступление
//	ИспользоватьПоступлениеПоНесколькимЗаказам - Булево - значение ф.о. ИспользоватьПоступлениеПоНесколькимЗаказам
//	Склад - СправочникСсылка.Склады - склад, по которому необходимо оформить поступление товаров и услуг
//
Процедура СоздатьПоступлениеТоваровУслугНаОснованииЗаказаПоставщику(Список, ИспользоватьПоступлениеПоНесколькимЗаказам, Склад = Неопределено) Экспорт
	
	ТекущиеДанные = Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
		Предупреждение(ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОснования = Новый Структура();
	
	Если Список.ВыделенныеСтроки.Количество() = 1 Или Не ИспользоватьПоступлениеПоНесколькимЗаказам Тогда
		
		Если ТипЗнч(Список.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
			Предупреждение(ТекстПредупреждения);
			Возврат;
			
		КонецЕсли;
	
		ПараметрыОснования.Вставить("ДокументОснование", ТекущиеДанные.Ссылка);
		ПараметрыОснования.Вставить("СкладПоступления",  Склад);
		ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокумента",
			Новый Структура("Основание", ПараметрыОснования));
	
	Иначе
		
		МассивСсылок = Новый Массив();
		
		Для Каждого ЗаказПоставщику Из Список.ВыделенныеСтроки Цикл
		
			Если ТипЗнч(ЗаказПоставщику) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСсылок.Добавить(ЗаказПоставщику);
			
		КонецЦикла;
		
		Если МассивСсылок.Количество() = 0 Тогда
			
			ТекстПредупреждения = НСтр("ru = 'Команда не может быть выполнена для указанного объекта!'");
			Предупреждение(ТекстПредупреждения);
			Возврат;
			
		КонецЕсли;
		
		РеквизитыШапки = Новый Структура();
		ОчиститьСообщения();
		
		Если ЗакупкиВызовСервера.СформироватьДанныеЗаполненияПоступления(МассивСсылок, РеквизитыШапки) Тогда
			
			ПараметрыОснования.Вставить("РеквизитыШапки",    РеквизитыШапки);
			ПараметрыОснования.Вставить("ДокументОснование", МассивСсылок);
			ПараметрыОснования.Вставить("СкладПоступления",  Склад);
	
			ОткрытьФорму("Документ.ПоступлениеТоваровУслуг.Форма.ФормаДокумента",
				Новый Структура("Основание", ПараметрыОснования));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает отчет ДинамикаИзмененияЦенНоменклатурыПоставщика с отбором из формы
//
// Параметры:
//	Форма - УправляемаяФорма - форма документа, из которого открывается отчет
//
Процедура ОткрытьОтчетПоДинамикеЦенПоставщика(Форма) Экспорт
	
	СписокНоменклатуры  = Новый СписокЗначений;
	СписокХарактеристик = Новый СписокЗначений;
	СписокУсловийЦен = Новый СписокЗначений;
	
	Для Каждого ТекСтрока Из Форма.Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Форма.Объект.Товары.НайтиПоИдентификатору(ТекСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокНоменклатуры.Добавить(СтрокаТаблицы.Номенклатура);
		СписокХарактеристик.Добавить(СтрокаТаблицы.Характеристика);
		СписокУсловийЦен.Добавить(СтрокаТаблицы.УсловиеЦеныПоставщика);
		
	КонецЦикла;
	
	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
	
	ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СписокНоменклатуры;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Характеристика");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СписокХарактеристик;
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОтбора = ФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УсловиеЦеныПоставщика");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение = СписокУсловийЦен;
	ЭлементОтбора.Использование = Истина;
	
	ПараметрыФормы = Новый Структура("ФиксированныеНастройки, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии, Отбор",
	        ФиксированныеНастройки,
	        "Динамика изменения цен по видам цен номенклатуры (Диаграмма)",
	        "Динамика изменения цен по видам цен номенклатуры (Диаграмма)",
	        Истина,
	        Новый Структура("Соглашение", Форма.Объект.Соглашение));
	
	ОткрытьФорму("Отчет.ДинамикаИзмененияЦенНоменклатурыПоставщика.Форма",
	        ПараметрыФормы);
	
КонецПроцедуры

// Создает документ "Счет-фактура полученный" с признаком "Исправление" или открывает существующий.
//
// Параметры:
//  Форма - Форма - Форма, из которой вызвана команда. Устанавливается владелецем открываемой формы счета-фактуры;
//  Организация - СправочникСсылка.Организации - Организация, на имя которой оформляется счет-фактура;
//  ОткрыватьСуществующую - Булево - Признак необходимости поиска и открытия формы найденного счета-фактуры;
//  Исправление - Булево - Истина - Создается исправление счета-фактуры;
//  Корректировочный - Булево - Создается корректировочный счет-фактура.
//
Процедура ВвестиСчетФактуру(Форма, Организация, ОткрыватьСуществующую = Ложь, Исправление = Ложь, Корректировочный = Ложь) Экспорт
	
	ВводитьСчетФактуру = Истина;
	
	Если ОткрыватьСуществующую Тогда
		СчетФактураДокумента = ЗакупкиВызовСервера.СчетФактураДокумента(Форма.Объект.Ссылка, Организация);
		Если ЗначениеЗаполнено(СчетФактураДокумента) Тогда
			ВводитьСчетФактуру = Ложь;
			
			ПараметрыФормы = Новый Структура("Ключ, ДокументОснование",
				СчетФактураДокумента, Форма.Объект.Ссылка
			);
			ОткрытьФорму("Документ.СчетФактураПолученный.ФормаОбъекта", ПараметрыФормы, Форма);
		КонецЕсли;
	КонецЕсли; 
	
	Если ВводитьСчетФактуру
		И (НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка)
		ИЛИ НЕ Форма.Объект.Проведен
		ИЛИ Форма.Модифицированность) Тогда
	 	
		ТекстВопроса = НСтр("ru = 'Ввод счета-фактуры возможен только после проведения документа, провести документ?'");
		КодОтвета = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если КодОтвета = КодВозвратаДиалога.Да Тогда
			Попытка
				ВводитьСчетФактуру = Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
			Исключение
				Предупреждение(НСтр("ru = 'Не удалось выполнить проведение документа'"));
				ВводитьСчетФактуру = Ложь;
			КонецПопытки;
		Иначе
			ВводитьСчетФактуру = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВводитьСчетФактуру Тогда
		
		ДанныеСчетаФактуры = Новый Структура;
		ДанныеСчетаФактуры.Вставить("ДокументОснование", Форма.Объект.Ссылка);
		ДанныеСчетаФактуры.Вставить("Организация",       Организация);
		ДанныеСчетаФактуры.Вставить("Исправление",       Исправление);
		ДанныеСчетаФактуры.Вставить("Корректировочный",  Корректировочный);
		ДанныеСчетаФактуры.Вставить("Контрагент",        Форма.Объект.Контрагент);
		Если ОткрыватьСуществующую Тогда
			ДанныеСчетаФактуры.Вставить("ДатаИсправления", Форма.Объект.Дата);
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Основание, ДокументОснование",
			ДанныеСчетаФактуры, Форма.Объект.Ссылка
		);
		ОткрытьФорму("Документ.СчетФактураПолученный.ФормаОбъекта", ПараметрыФормы, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с номенклатурой поставщика в документах закупки.

Функция ОткрытьФормуЗаполненияНоменклатурыПоставщика(АдресТоваровВХранилище, Форма) Экспорт
	
	Если АдресТоваровВХранилище = Неопределено Тогда
		Предупреждение(НСтр("ru = 'Отсутствуют строки, в которых указана номенклатура поставщика, но не указана номенклатура'"));
		Возврат Неопределено;
	Иначе
		Возврат ОткрытьФормуМодально("ОбщаяФорма.ЗаполнениеНоменклатурыПоНоменклатуреПоставщика", Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище), Форма);
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
