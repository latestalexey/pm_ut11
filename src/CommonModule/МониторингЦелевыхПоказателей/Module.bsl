///////////////////////////////////////////////////////////////////////////////
// Модуль содержит методы формирования управленческой отчетности
///////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Персональные настройки монитора целевых показателей.

// Возвращает пользовательские настройки монитора целевых показателей
//
// Возвращаемое значение:
//	Структура - содержит пользовательские настройки
//	ВариантГруппировкиПоказателей - Строка - принимает значения "ПоКатегориямЦелей" и "ПоВажности"
//	ВариантОтображенияДеталей - Строка - принимает значения "ПоказыватьТолькоТекущееЗначение" и "ПоказыватьТекущееЗначениеИДетали"
//	КоличествоКолонокМонитораПоказателей - Число
//	РазмерДиаграмм - Число - принимает значения 1(малый) и 2(Крупный)
//	ПериодАвтообновления - Число - период в минутах
//
Функция ПолучитьНастройкиМонитораЦелевыхПоказателей() Экспорт
	
	НастройкиПоУмолчанию = ОбщегоНазначенияУТКлиентСервер.ПолучитьПерсональныеНастройкиМонитораЦелевыхПоказателейПоУмолчанию();
	
	НастройкиМонитораЦелевыхПоказателей = Новый Структура;
	
	// порядок вывода показателей
	ВариантГруппировкиПоказателейВрем = 
	ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиМонитораЦелевыхПоказателей", "ВариантГруппировкиПоказателей");
	Если ВариантГруппировкиПоказателейВрем = Неопределено Тогда
		ВариантГруппировкиПоказателей = НастройкиПоУмолчанию.ВариантГруппировкиПоказателей;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиМонитораЦелевыхПоказателей", "ВариантГруппировкиПоказателей", ВариантГруппировкиПоказателей);
	Иначе 
		ВариантГруппировкиПоказателей = ВариантГруппировкиПоказателейВрем;
	КонецЕсли;
	
	КоличествоКолонокМонитораПоказателейВрем = 
	ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиМонитораЦелевыхПоказателей", "КоличествоКолонокМонитораПоказателей");
	Если КоличествоКолонокМонитораПоказателейВрем = Неопределено Тогда
		КоличествоКолонокМонитораПоказателей = НастройкиПоУмолчанию.КоличествоКолонокМонитораПоказателей;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиМонитораЦелевыхПоказателей", "КоличествоКолонокМонитораПоказателей", КоличествоКолонокМонитораПоказателей);
	Иначе 
		КоличествоКолонокМонитораПоказателей = КоличествоКолонокМонитораПоказателейВрем;
	КонецЕсли;
	
	НастройкиМонитораЦелевыхПоказателей.Вставить("ВариантГруппировкиПоказателей", ВариантГруппировкиПоказателей);
	НастройкиМонитораЦелевыхПоказателей.Вставить("КоличествоКолонокМонитораПоказателей", КоличествоКолонокМонитораПоказателей);
	
	// Внешний вид показателей
	РазмерДиаграммВрем = 
	ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиМонитораЦелевыхПоказателей", "РазмерДиаграмм");
	Если РазмерДиаграммВрем = Неопределено Тогда
		РазмерДиаграмм = НастройкиПоУмолчанию.РазмерДиаграмм;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиМонитораЦелевыхПоказателей", "РазмерДиаграмм", РазмерДиаграмм);
	Иначе 
		РазмерДиаграмм = РазмерДиаграммВрем;
	КонецЕсли;
	
	ВариантОтображенияДеталейВрем = 
	ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиМонитораЦелевыхПоказателей", "ВариантОтображенияДеталей");
	Если ВариантОтображенияДеталейВрем = Неопределено Тогда
		ВариантОтображенияДеталей = НастройкиПоУмолчанию.ВариантОтображенияДеталей;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиМонитораЦелевыхПоказателей", "ВариантОтображенияДеталей", ВариантОтображенияДеталей);
	Иначе 
		ВариантОтображенияДеталей = ВариантОтображенияДеталейВрем;
	КонецЕсли;
	
	НастройкиМонитораЦелевыхПоказателей.Вставить("РазмерДиаграмм", РазмерДиаграмм);
	НастройкиМонитораЦелевыхПоказателей.Вставить("ВариантОтображенияДеталей", ВариантОтображенияДеталей);
	
	// Обновление данных
	ПериодАвтообновленияВрем = 
	ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиМонитораЦелевыхПоказателей", "ПериодАвтообновления");
	Если ПериодАвтообновленияВрем = Неопределено Тогда
		ПериодАвтообновления = НастройкиПоУмолчанию.ПериодАвтообновления;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиМонитораЦелевыхПоказателей", "ПериодАвтообновления", ПериодАвтообновления);
	Иначе 
		ПериодАвтообновления = ПериодАвтообновленияВрем;
	КонецЕсли;
	
	НастройкиМонитораЦелевыхПоказателей.Вставить("ПериодАвтообновления", ПериодАвтообновления);
	
	// Отображаемые варианты анализа
	ВариантыАнализа = 
	ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиМонитораЦелевыхПоказателей", "ВариантыАнализаПользовательскиеНастройки");
	НастройкиМонитораЦелевыхПоказателей.Вставить("ВариантыАнализаПользовательскиеНастройки", ВариантыАнализа);
	
	Возврат НастройкиМонитораЦелевыхПоказателей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Регламентированный расчет источников данных целевых показателей.

// Выполняет расчет источников данных, доступных хотя бы одному пользователю.
// Вызывается из регламентного задания "РасчетИсточниковДанныхВариантовАнализа".
//
Процедура РасчетИсточниковДанныхВариантовАнализа() Экспорт
	
	ИспользоватьМониторингЦелевыхПоказателей = ПолучитьФункциональнуюОпцию("ИспользоватьМониторингЦелевыхПоказателей");

	Если Не ИспользоватьМониторингЦелевыхПоказателей Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получим все настроенные варианты анализа с учетом пользовательских настроек
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Пользователи.Ссылка,
	               |	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи";
	ТаблицаПользователей = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПользовательскихВариантовАнализа = Новый ТаблицаЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ВариантыАнализаЦелевыхПоказателей"));
	ОписаниеТипаВариантаАнализа = Новый ОписаниеТипов(МассивТипов);
	
	МассивТипов.Очистить();
	МассивТипов.Добавить(Тип("ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа"));
	ОписаниеТипаВариантаОтображения = Новый ОписаниеТипов(МассивТипов);
	
	ТаблицаПользовательскихВариантовАнализа.Колонки.Добавить("ВариантАнализа", ОписаниеТипаВариантаАнализа);
	ТаблицаПользовательскихВариантовАнализа.Колонки.Добавить("ВариантОтображения", ОписаниеТипаВариантаОтображения);
	
	Для Каждого Пользователь Из ТаблицаПользователей Цикл 
		
		ПользовательИнформационнойБазы = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ);
		Если Не ПользовательИнформационнойБазы = Неопределено Тогда
			ИмяПользователяТаблицы = ПользовательИнформационнойБазы.Имя;
			
			ХранилищеВариантовАнализаПользователя = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиМонитораЦелевыхПоказателей", "ВариантыАнализаПользовательскиеНастройки",, ИмяПользователяТаблицы);
			Если НЕ ХранилищеВариантовАнализаПользователя = Неопределено Тогда
				
				ВариантыАнализаПользователя = ХранилищеВариантовАнализаПользователя.Получить();
				Для Каждого ВариантАнализаПользователя Из ВариантыАнализаПользователя Цикл 
					НовыйВариантВТаблице = ТаблицаПользовательскихВариантовАнализа.Добавить();
					НовыйВариантВТаблице.ВариантАнализа = ВариантАнализаПользователя.ВариантАнализа;
					НовыйВариантВТаблице.ВариантОтображения = ВариантАнализаПользователя.ВариантОтображения;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПользовательскихВариантовАнализа.Свернуть("ВариантАнализа, ВариантОтображения");
	
	Запрос.УстановитьПараметр("ВариантыАнализа", ТаблицаПользовательскихВариантовАнализа);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПользовательскиеНастройкиВариантовАнализа.ВариантАнализа,
	               |	ПользовательскиеНастройкиВариантовАнализа.ВариантОтображения
	               |ПОМЕСТИТЬ ПользовательскиеНастройкиВариантовАнализа
	               |ИЗ
	               |	&ВариантыАнализа КАК ПользовательскиеНастройкиВариантовАнализа
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВариантыАнализа.ВариантАнализа,
	               |	ВариантыАнализа.ВариантОтображения
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка КАК ВариантАнализа,
	               |		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.ВариантОтображения КАК ВариантОтображения
	               |	ИЗ
	               |		Справочник.ВариантыАнализаЦелевыхПоказателей.НастройкиДоступности КАК ВариантыАнализаЦелевыхПоказателейНастройкиДоступности
	               |	ГДЕ
	               |		(НЕ ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.ПометкаУдаления)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ПользовательскиеНастройкиВариантовАнализа.ВариантАнализа,
	               |		ПользовательскиеНастройкиВариантовАнализа.ВариантОтображения
	               |	ИЗ
	               |		ПользовательскиеНастройкиВариантовАнализа КАК ПользовательскиеНастройкиВариантовАнализа) КАК ВариантыАнализа
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВариантыАнализа.ВариантАнализа,
	               |	ВариантыАнализа.ВариантОтображения";
						  
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаВариантовАнализа = РезультатЗапроса.Выгрузить();
	Для Каждого ТекущийВариантАнализа Из ТаблицаВариантовАнализа Цикл 
		
		ПолучитьИсточникДанныхВариантаАнализа(ТекущийВариантАнализа.ВариантАнализа, ТекущийВариантАнализа.ВариантОтображения, Истина);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Первоначальное заполнение объектов подсистемы мониторинга.

// Процедура заполняет справочники "Категории целей", "Структура целей" и "Варианты анализа целевых показаталей"
// по заданным шаблонам при условии, что справочники еще не заполнялись.
// Процедура используется только при обновлении информационной базы и первом запуске.
//
Процедура ЗаполнитьСтруктуруЦелейИВариантыАнализа() Экспорт
	
	Если СправочникиУправленияПоЦелямЗаполнялись() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	// Загрузим категории целей по шаблону
	КатегорииЦелейXML = Справочники.КатегорииЦелей.ПолучитьМакет("БазовыеКатегорииЦелей").ПолучитьТекст();
	
	КатегорииЦелейТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КатегорииЦелейXML).Данные;
	
	КэшКатегорий = Новый Соответствие;
	
	Для Каждого ЗаписьКЦ Из КатегорииЦелейТаблица Цикл
		НоваяКатегория = Справочники.КатегорииЦелей.СоздатьЭлемент();
		НоваяКатегория.Наименование					= ЗаписьКЦ.Наименование;
		НоваяКатегория.РеквизитДопУпорядочивания	= ЗаписьКЦ.РеквизитДопУпорядочивания;
		
		НоваяКатегория.Записать();
		
		КэшКатегорий.Вставить(ЗаписьКЦ.ID, НоваяКатегория.Ссылка);
		
	КонецЦикла;
	
	// Заполним структуру целей по шаблону
	СтруктураЦелейXML = Справочники.СтруктураЦелей.ПолучитьМакет("БазоваяСтруктураЦелей").ПолучитьТекст();
	
	СтруктураЦелейТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(СтруктураЦелейXML).Данные;
	
	КэшЦелей = Новый Соответствие;
	
	Для Каждого ЗаписьСЦ Из СтруктураЦелейТаблица Цикл
		НоваяЦель = Справочники.СтруктураЦелей.СоздатьЭлемент();
		
		ЗаполнитьЗначенияСвойств(НоваяЦель, ЗаписьСЦ, , "ЦельИзмеримая, ЦелевойТренд");
		
		Если НЕ ПустаяСтрока(ЗаписьСЦ.ParentID) Тогда
			НоваяЦель.Родитель = КэшЦелей[ЗаписьСЦ.ParentID];
		КонецЕсли;
		Если НЕ ПустаяСтрока(ЗаписьСЦ.CategoryID) Тогда
			НоваяЦель.КатегорияЦели = КэшКатегорий[ЗаписьСЦ.CategoryID];
		КонецЕсли;
		Если НЕ ПустаяСтрока(ЗаписьСЦ.ЦельИзмеримая) Тогда
			НоваяЦель.ЦельИзмеримая = Булево(ЗаписьСЦ.ЦельИзмеримая);
		КонецЕсли;
		Если НЕ ПустаяСтрока(ЗаписьСЦ.ЦелевойТренд) Тогда
			НоваяЦель.ЦелевойТренд = Перечисления.ВидыЦелевыхТрендовПоказателей[ЗаписьСЦ.ЦелевойТренд];
		КонецЕсли;
		
		НоваяЦель.Записать();
		
		// Формирование настроек шаблона расчета
		Если ЗначениеЗаполнено(НоваяЦель.СхемаКомпоновкиДанных) Тогда
			ОписаниеИСхемаКомпоновкиДанных = Справочники.СтруктураЦелей.ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(НоваяЦель.Ссылка, НоваяЦель.СхемаКомпоновкиДанных);
			СхемаКомпоновкиДанных = ОписаниеИСхемаКомпоновкиДанных.СхемаКомпоновкиДанных;
			
			Если ОписаниеИСхемаКомпоновкиДанных.НастройкиКомпоновкиДанных = Неопределено Тогда
				НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
			Иначе
				НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиКомпоновкиДанных;
			КонецЕсли;
			
			ИскомыйПараметр = ОбщегоНазначенияУТКлиентСервер.ПолучитьПараметр(НастройкиКомпоновкиДанных, "ВалютаРасчета");
			
			Если НЕ ИскомыйПараметр = Неопределено Тогда
				ВалютаПоУмолчанию = ПолучитьВалютуПоУмолчанию();
				ОбщегоНазначенияУТКлиентСервер.УстановитьПараметр(НастройкиКомпоновкиДанных, ИскомыйПараметр.Параметр, ВалютаПоУмолчанию);
				
				НоваяЦель.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения(НастройкиКомпоновкиДанных);
				
				НоваяЦель.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
		КэшЦелей.Вставить(ЗаписьСЦ.ID, НоваяЦель.Ссылка);
		
	КонецЦикла;
	
	// Создадим базовые варианты анализа
	БазовыеСвойстваXML = Справочники.ВариантыАнализаЦелевыхПоказателей.ПолучитьМакет("БазовыеСвойстваВариантовАнализа").ПолучитьТекст();
	БазовыеСвойстваТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(БазовыеСвойстваXML).Данные;
	
	ВариантыОтчетовXML = Справочники.ВариантыАнализаЦелевыхПоказателей.ПолучитьМакет("ОтчетыДляРасшифровкиВариантовАнализа").ПолучитьТекст();
	ВариантыОтчетовТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ВариантыОтчетовXML).Данные;
	
	// Получим общие свойства вариантов анализа
	СвойстваВАЦП = Новый Структура("ПериодАнализа, 
									|ПериодСравнения, 
									|ПериодичностьКонтроля, 
									|МетодРасчетаЗначений, 
									|ТочностьРасчетаДробнойЧасти,
									|ГлубинаАнализаПрогноза,
									|ГоризонтПрогноза");
									
	СвойстваВАЦП.ГлубинаАнализаПрогноза = 30;
	СвойстваВАЦП.ГоризонтПрогноза = 1;
	
	НастройкиОформления = Справочники.ВариантыАнализаЦелевыхПоказателей.НастройкиОформленияПоУмолчанию();
	НастройкиОформленияПокомпонентногоСравнения = Справочники.ВариантыАнализаЦелевыхПоказателей.НастройкиОформленияПоУмолчанию(Истина);

	СоответствиеТиповСравненияИТиповДиаграмм = ПолучитьТаблицуСоответствиТиповАнализаИТиповДиаграмм();
	
	Для Каждого ЦельИзКэшаЦелей Из КэшЦелей Цикл 
		
		Если НЕ ЦельИзКэшаЦелей.Значение.ЦельИзмеримая Тогда
			Продолжить;
		КонецЕсли;
		
		ПользовательскиеНастройкиПоУмолчанию = Справочники.СтруктураЦелей.ПользовательскиеНастройкиПоУмолчанию(ЦельИзКэшаЦелей.Значение);
	
		ОтборСвойств = Новый Структура("OwnerID", ЦельИзКэшаЦелей.Ключ);
		ИскомыеБазовыеСвойства = БазовыеСвойстваТаблица.НайтиСтроки(ОтборСвойств);
		
		Если ИскомыеБазовыеСвойства.Количество() > 0 Тогда
			НовыйПериодАнализа = Новый СтандартныйПериод;
			НовыйПериодАнализа.Вариант = ВариантСтандартногоПериода[ИскомыеБазовыеСвойства[0].ПериодАнализа];
			СвойстваВАЦП.Вставить("ПериодАнализа", Новый ХранилищеЗначения(НовыйПериодАнализа));
			
			НовыйПериодСравнения = Новый СтандартныйПериод;
			НовыйПериодСравнения.Вариант = ВариантСтандартногоПериода[ИскомыеБазовыеСвойства[0].ПериодСравнения];
			СвойстваВАЦП.Вставить("ПериодСравнения", Новый ХранилищеЗначения(НовыйПериодСравнения));
			
			СвойстваВАЦП.Вставить("ПериодичностьКонтроля", Перечисления.Периодичность[ИскомыеБазовыеСвойства[0].ПериодичностьКонтроля]);
			СвойстваВАЦП.Вставить("МетодРасчетаЗначений", Перечисления.МетодыРасчетаВариантовАнализаЦелевыхПоказателей[ИскомыеБазовыеСвойства[0].МетодРасчетаЗначений]);
			СвойстваВАЦП.Вставить("ТочностьРасчетаДробнойЧасти", Число(ИскомыеБазовыеСвойства[0].ТочностьРасчетаДробнойЧасти));
			
		КонецЕсли;
		
		ДоступныеЗначенияАнализа = Справочники.СтруктураЦелей.ДоступныеЗначенияАнализа(ЦельИзКэшаЦелей.Значение);
		
		Если ДоступныеЗначенияАнализа.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Вариант анализа динамики
		НовыйВариантАнализа = Справочники.ВариантыАнализаЦелевыхПоказателей.СоздатьЭлемент();
		НовыйВариантАнализа.Владелец = ЦельИзКэшаЦелей.Значение;
		
		НовыйВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ДинамикаИзменения;
		НовыйВариантАнализа.ТипДиаграммы = Перечисления.ТипыДиаграммПоказателей.График;
		
		НовыйВариантАнализа.ЗначениеАнализа = Новый ХранилищеЗначения(ДоступныеЗначенияАнализа[0].Значение);
		НовыйВариантАнализа.КратностьЗначений = Перечисления.ВидыПредставленияЧисел.БезИзменений;
		
		НовыйВариантАнализа.ПериодАктуальностиРасчета = 1;
		НовыйВариантАнализа.ВидПериодаАктуальностиРасчета = Перечисления.ВидыПериодовАктуальностиРасчета.Час;
		
		ЗаполнитьЗначенияСвойств(НовыйВариантАнализа, СвойстваВАЦП);
		ЗаполнитьЗначенияСвойств(НовыйВариантАнализа, НастройкиОформления);
		
		// Заполним наименование по шаблону
		ОтборПоТипуСравнения = Новый Структура("ТипАнализа", НовыйВариантАнализа.ТипАнализа);
		НайденныеПараметры = СоответствиеТиповСравненияИТиповДиаграмм.НайтиСтроки(ОтборПоТипуСравнения);
		ОбъектАнализаДоступен = НайденныеПараметры[0].ОбъектАнализаДоступен;

		НовыйВариантАнализа.Наименование = Строка(ДоступныеЗначенияАнализа[0].Представление)
								  			+ ", " + Строка(НовыйВариантАнализа.МетодРасчетаЗначений);
								  
		НовыйВариантАнализа.ХранилищеПользовательскихНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПользовательскиеНастройкиПоУмолчанию);
		
		// Заполним отчеты для расшифровки
		ОтборОтчетов = Новый Структура("OwnerID", ЦельИзКэшаЦелей.Ключ);
		ДобавляемыеВариантыОтчетов = ВариантыОтчетовТаблица.НайтиСтроки(ОтборОтчетов);
		
		Если ДобавляемыеВариантыОтчетов.Количество() > 0 Тогда
			Для Каждого ДобавляемыйВариантОтчета Из ДобавляемыеВариантыОтчетов Цикл
				
				ВариантОтчета = ПолучитьВариантОтчетаПоКлючам(ДобавляемыйВариантОтчета.КлючОбъекта, ДобавляемыйВариантОтчета.КлючВарианта);
				
				Если НЕ ВариантОтчета = Неопределено Тогда
					НовыйОтчет = НовыйВариантАнализа.ОтчетыДляРасшифровки.Добавить();
					НовыйОтчет.ВариантОтчета = ВариантОтчета;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовыйВариантАнализа.Записать();
		
		// Вариант сравнения с прошлым периодом
		НовыйВариантАнализа = Справочники.ВариантыАнализаЦелевыхПоказателей.СоздатьЭлемент();
		НовыйВариантАнализа.Владелец = ЦельИзКэшаЦелей.Значение;
		
		НовыйВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.СравнениеСПрошлымПериодом;
		НовыйВариантАнализа.ТипДиаграммы = Перечисления.ТипыДиаграммПоказателей.Гистограмма;
		
		НовыйВариантАнализа.ЗначениеАнализа = Новый ХранилищеЗначения(ДоступныеЗначенияАнализа[0].Значение);
		НовыйВариантАнализа.КратностьЗначений = Перечисления.ВидыПредставленияЧисел.БезИзменений;
		
		НовыйВариантАнализа.ПериодАктуальностиРасчета = 1;
		НовыйВариантАнализа.ВидПериодаАктуальностиРасчета = Перечисления.ВидыПериодовАктуальностиРасчета.Час;
		
		ЗаполнитьЗначенияСвойств(НовыйВариантАнализа, СвойстваВАЦП);
		ЗаполнитьЗначенияСвойств(НовыйВариантАнализа, НастройкиОформления);
		
		// Заполним наименование по шаблону
		ОтборПоТипуСравнения = Новый Структура("ТипАнализа", НовыйВариантАнализа.ТипАнализа);
		НайденныеПараметры = СоответствиеТиповСравненияИТиповДиаграмм.НайтиСтроки(ОтборПоТипуСравнения);
		ОбъектАнализаДоступен = НайденныеПараметры[0].ОбъектАнализаДоступен;

		НовыйВариантАнализа.Наименование = Строка(ДоступныеЗначенияАнализа[0].Представление)
								  			+ ", " + Строка(НовыйВариантАнализа.МетодРасчетаЗначений);
								  
		НовыйВариантАнализа.ХранилищеПользовательскихНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПользовательскиеНастройкиПоУмолчанию);
		
		// Заполним отчеты для расшифровки
		ОтборОтчетов = Новый Структура("OwnerID", ЦельИзКэшаЦелей.Ключ);
		ДобавляемыеВариантыОтчетов = ВариантыОтчетовТаблица.НайтиСтроки(ОтборОтчетов);
		
		Если ДобавляемыеВариантыОтчетов.Количество() > 0 Тогда
			Для Каждого ДобавляемыйВариантОтчета Из ДобавляемыеВариантыОтчетов Цикл
				
				ВариантОтчета = ПолучитьВариантОтчетаПоКлючам(ДобавляемыйВариантОтчета.КлючОбъекта, ДобавляемыйВариантОтчета.КлючВарианта);
				
				Если НЕ ВариантОтчета = Неопределено Тогда
					НовыйОтчет = НовыйВариантАнализа.ОтчетыДляРасшифровки.Добавить();
					НовыйОтчет.ВариантОтчета = ВариантОтчета;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НовыйВариантАнализа.Записать();
		
		// Варианты покомпонентного сравнения по доступным вариантам анализа
		ДоступныеОбъектыАнализа = Справочники.СтруктураЦелей.ДоступныеОбъектыАнализа(ЦельИзКэшаЦелей.Значение);
		
		Если ДоступныеОбъектыАнализа.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ДоступныйОбъектАнализа Из ДоступныеОбъектыАнализа Цикл 
			НовыйВариантАнализа = Справочники.ВариантыАнализаЦелевыхПоказателей.СоздатьЭлемент();
			НовыйВариантАнализа.Владелец = ЦельИзКэшаЦелей.Значение;
			
			НовыйВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение;
			НовыйВариантАнализа.ТипДиаграммы = Перечисления.ТипыДиаграммПоказателей.Гистограмма;
			
			НовыйВариантАнализа.ОбъектАнализа = Новый ХранилищеЗначения(ДоступныйОбъектАнализа.Значение);
			НовыйВариантАнализа.ЗначениеАнализа = Новый ХранилищеЗначения(ДоступныеЗначенияАнализа[0].Значение);
			НовыйВариантАнализа.КратностьЗначений = Перечисления.ВидыПредставленияЧисел.БезИзменений;
			
			НовыйВариантАнализа.ПериодАктуальностиРасчета = 1;
			НовыйВариантАнализа.ВидПериодаАктуальностиРасчета = Перечисления.ВидыПериодовАктуальностиРасчета.Час;
			
			ЗаполнитьЗначенияСвойств(НовыйВариантАнализа, СвойстваВАЦП);
			ЗаполнитьЗначенияСвойств(НовыйВариантАнализа, НастройкиОформленияПокомпонентногоСравнения);
			
			// Заполним наименование по шаблону
			ОтборПоТипуСравнения = Новый Структура("ТипАнализа", НовыйВариантАнализа.ТипАнализа);
			НайденныеПараметры = СоответствиеТиповСравненияИТиповДиаграмм.НайтиСтроки(ОтборПоТипуСравнения);
			ОбъектАнализаДоступен = НайденныеПараметры[0].ОбъектАнализаДоступен;

			НовыйВариантАнализа.Наименование =  Строка(ДоступныеЗначенияАнализа[0].Представление)
									  			+ ?(ОбъектАнализаДоступен, " " + НСтр("ru='по'")+ " " + Строка(ДоступныйОбъектАнализа.Представление), "")
									  			+ ", " + Строка(НовыйВариантАнализа.МетодРасчетаЗначений);
									  
			НовыйВариантАнализа.ХранилищеПользовательскихНастроекКомпоновкиДанных = Новый ХранилищеЗначения(ПользовательскиеНастройкиПоУмолчанию);
			
			// Заполним отчеты для расшифровки
			ОтборОтчетов = Новый Структура("OwnerID", ЦельИзКэшаЦелей.Ключ);
			ДобавляемыеВариантыОтчетов = ВариантыОтчетовТаблица.НайтиСтроки(ОтборОтчетов);
			
			Если ДобавляемыеВариантыОтчетов.Количество() > 0 Тогда
				Для Каждого ДобавляемыйВариантОтчета Из ДобавляемыеВариантыОтчетов Цикл
					
					ВариантОтчета = ПолучитьВариантОтчетаПоКлючам(ДобавляемыйВариантОтчета.КлючОбъекта, ДобавляемыйВариантОтчета.КлючВарианта);
					
					Если НЕ ВариантОтчета = Неопределено Тогда
						НовыйОтчет = НовыйВариантАнализа.ОтчетыДляРасшифровки.Добавить();
						НовыйОтчет.ВариантОтчета = ВариантОтчета;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			НовыйВариантАнализа.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Анализ взаимосвязанных целевых показателей.

// Возвращает набор источников данных взаимосвязанных вариантов анализа
//
// Параметры:
//	ВидПоиска - ПеречислениеСсылка.ВидыПоискаСвязанныхПоказателей - способ поиска связей
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - вариант анализа, для которого ищуться взаимосвязанные
//	ОтборСтатус - Число - характеризует статус или набор статусов
//	АдресаДинамическихПараметров - ТаблицаЗначений - содержит варианты анализа и адреса их дин. параметров
//
// Возвращаемое значение:
//	Структура - содержит набор источников данных и обобщенную информацию об источниках взаимосвязанных показателей
//
Функция ПолучитьВзаимосвязанныеВариантыАнализа(ВидПоиска, ВариантАнализа, ОтборСтатус, АдресаДинамическихПараметров) Экспорт
	
	ПолученныйСоставМонитора			= Новый Структура("НаборИсточниковДанных, СтатистикаПоСтрокам, Пустой", , , Истина);
	НаборИсточниковДанных				= Новый ТаблицаЗначений;
	
	ВидыПоиска = Перечисления.ВидыПоискаСвязанныхПоказателей;
	ВариантыОтображенияВариантовАнализа	= Перечисления.ВариантыОтображенияВариантовАнализа;
	ЗоныВнимания						= Перечисления.ЗоныВниманияВариантовАнализа;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	Запрос.Текст = ТекстЗапросаПоСтруктуреДоступныхВариантовАнализа();
	
	РезультатПакетаЗапросов = Запрос.ВыполнитьПакет();
	
	Если ВидПоиска = ВидыПоиска.ВзаимосвязанныеПоказатели
		И (НЕ РезультатПакетаЗапросов[1].Пустой() ИЛИ НЕ РезультатПакетаЗапросов[2].Пустой()) Тогда
		
		Если НЕ РезультатПакетаЗапросов[1].Пустой() Тогда
			НаборИсточниковДанных = РезультатПакетаЗапросов[1].Выгрузить();
			
		КонецЕсли;
		
		Если НЕ РезультатПакетаЗапросов[2].Пустой() Тогда
			Если НаборИсточниковДанных.Количество() = 0 Тогда
				НаборИсточниковДанных = РезультатПакетаЗапросов[2].Выгрузить();
				
			Иначе
				ВыборкаВариантов = РезультатПакетаЗапросов[2].Выбрать();
				
				Пока ВыборкаВариантов.Следующий() Цикл 
					НоваяСтрока = НаборИсточниковДанных.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаВариантов);
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидПоиска = ВидыПоиска.ЗависимыеПоказатели И НЕ РезультатПакетаЗапросов[1].Пустой() Тогда
		Если НЕ РезультатПакетаЗапросов[1].Пустой() Тогда
			НаборИсточниковДанных = РезультатПакетаЗапросов[1].Выгрузить();
			
		КонецЕсли;
		
	ИначеЕсли ВидПоиска = ВидыПоиска.ВлияющиеПоказатели И НЕ РезультатПакетаЗапросов[2].Пустой() Тогда
		Если НЕ РезультатПакетаЗапросов[2].Пустой() Тогда
			НаборИсточниковДанных = РезультатПакетаЗапросов[2].Выгрузить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ РезультатПакетаЗапросов[3].Пустой() Тогда
		ВыборкаВариантов = РезультатПакетаЗапросов[3].Выбрать();
		
		Пока ВыборкаВариантов.Следующий() Цикл 
			НоваяСтрока = НаборИсточниковДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаВариантов);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Дополним таблицу служебными колонками
	НаборИсточниковДанных.Колонки.Добавить("ИсточникДанных");
	НаборИсточниковДанных.Колонки.Добавить("ЗонаВнимания");
	НаборИсточниковДанных.Колонки.Добавить("Пустой");
	НаборИсточниковДанных.Колонки.Добавить("РасчетыНеактуальны");
	НаборИсточниковДанных.Колонки.Добавить("ОшибкаРасчета");
	НаборИсточниковДанных.Колонки.Добавить("ПорядокЗоныВнимания");
	
	Для Каждого ЭлементНабора Из НаборИсточниковДанных Цикл 
		ВариантАнализа = ЭлементНабора.ВариантАнализа;
		
		// Получим адрес динамических параметров
		ОтборПоВариантуАнализа = Новый Структура("ВариантАнализа", ВариантАнализа);
		НайденныеСоставМонитора = АдресаДинамическихПараметров.НайтиСтроки(ОтборПоВариантуАнализа);
		Если НайденныеСоставМонитора.Количество() > 0 Тогда
			АдресДинамическихПараметров = НайденныеСоставМонитора[0].АдресДинамическихПараметров;
			
			Если НЕ ПустаяСтрока(АдресДинамическихПараметров) Тогда
				ДинамическиеПараметры = ПолучитьИзВременногоХранилища(АдресДинамическихПараметров);
				
				ИсточникДанныхВариантаАнализа = ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, ЭлементНабора.ВариантОтображения, Истина, ДинамическиеПараметры);
			Иначе
				ИсточникДанныхВариантаАнализа = ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, ЭлементНабора.ВариантОтображения, Истина);
				
			КонецЕсли;
		Иначе
		
			ИсточникДанныхВариантаАнализа = ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, ЭлементНабора.ВариантОтображения, Истина);
			
		КонецЕсли;
		
		// Получим данные варианта анализа
		ЭлементНабора.ИсточникДанных = Новый ХранилищеЗначения(ИсточникДанныхВариантаАнализа);
		
		ЭлементНабора.Пустой = ИсточникДанныхВариантаАнализа.Пустой;
		ЭлементНабора.ОшибкаРасчета = ИсточникДанныхВариантаАнализа.ОшибкаРасчета;
		// Получим зону внимания
		ЭлементНабора.ЗонаВнимания = ИсточникДанныхВариантаАнализа.СвойстваЗоныАнализаИТренда.ЗонаВнимания;
		ЭлементНабора.ПорядокЗоныВнимания = ИсточникДанныхВариантаАнализа.СвойстваЗоныАнализаИТренда.ПорядокЗоныВнимания;
		
	КонецЦикла;
	
	// Установим отбор
	Если ОтборСтатус = 1 Тогда
		
		ОтборКритических = Новый Структура("ЗонаВнимания", ЗоныВнимания.КритическоеСостояние);
		НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборКритических);
		
	ИначеЕсли ОтборСтатус = 2 Тогда
		
		ОтборВажных = Новый Структура("ЗонаВнимания", ЗоныВнимания.Важно);
		НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборВажных);
		
	ИначеЕсли ОтборСтатус = 3 Тогда
		
		ОтборКСведению = Новый Структура("ЗонаВнимания", ЗоныВнимания.КСведению);
		ЭлементыМонитораКУдалению = НаборИсточниковДанных.НайтиСтроки(ОтборКСведению);
		
		Для Каждого ЭлементМонитораКУдалению Из ЭлементыМонитораКУдалению Цикл 
			
			НаборИсточниковДанных.Удалить(ЭлементМонитораКУдалению);
			
		КонецЦикла;
		
		ОтборПоРассчитаннымСОшибками = Новый Структура("ЗонаВнимания", ЗоныВнимания.РассчитанныеСОшибками);
		ЭлементыМонитораКУдалению = НаборИсточниковДанных.НайтиСтроки(ОтборПоРассчитаннымСОшибками);
		
		Для Каждого ЭлементМонитораКУдалению Из ЭлементыМонитораКУдалению Цикл 
			
			НаборИсточниковДанных.Удалить(ЭлементМонитораКУдалению);
			
		КонецЦикла;
		
	ИначеЕсли ОтборСтатус = 4 Тогда
		
		ОтборКСведению = Новый Структура("ЗонаВнимания", ЗоныВнимания.КСведению);
		НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборКСведению);
		
	ИначеЕсли ОтборСтатус = 5 Тогда
		
		ОтборПоРассчитаннымСОшибками = Новый Структура("ЗонаВнимания", ЗоныВнимания.РассчитанныеСОшибками);
		НаборИсточниковДанных = НаборИсточниковДанных.Скопировать(ОтборПоРассчитаннымСОшибками);
		
	КонецЕсли;
	
	Если НЕ НаборИсточниковДанных.Количество() = 0 Тогда
		ПолученныйСоставМонитора.Пустой = Ложь;
		
	КонецЕсли;
	
	ПолученныйСоставМонитора.Вставить("НаборИсточниковДанных", НаборИсточниковДанных);
	
	ПолученныйСоставМонитора.Вставить("СтатистикаПоСтрокам", СтатистикаИсточниковДанныхПоЗонамВнимания(НаборИсточниковДанных, Истина));
	
	Возврат ПолученныйСоставМонитора;
	
КонецФункции

// Возвращает доступность зависимых/влияющих вариантов анализа для текущего пользователя
// и переданного варианта анализа
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - вариант анализа, для которого ищуться взаимосвязанные
//
// Возвращаемое значение:
//	Структура - содержит признаки доступности
//			ЕстьДоступныеВлияющие - Булево
//			ЕстьДоступныеЗависимые - Булево
//
Функция ПолучитьПараметрыДоступностиАнализаВзаимосвязанных(ВариантАнализа) Экспорт
	
	СтруктураДоступныхВзаимосвязей = Новый Структура("ЕстьДоступныеВлияющие, ЕстьДоступныеЗависимые", Ложь, Ложь);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	Запрос.Текст = ТекстЗапросаПоСтруктуреДоступныхВариантовАнализа();
	
	РезультатПакетаЗапросов = Запрос.ВыполнитьПакет();
	
	// Есть доступные зависимые измеримые цели и варианты анализа
	СтруктураДоступныхВзаимосвязей.ЕстьДоступныеЗависимые = (НЕ РезультатПакетаЗапросов[1].Пустой());
	
	// Есть доступные влияющие измеримые цели и варианты анализа
	СтруктураДоступныхВзаимосвязей.ЕстьДоступныеВлияющие = (НЕ РезультатПакетаЗапросов[2].Пустой());
	
	Возврат СтруктураДоступныхВзаимосвязей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование печатной формы варианта анализа и сводного отчета.

// Заполняет сводный отчет - титул, содержание, страницы показателей, обозначения 
//
// Параметры
//	ТабличныйДокумент  - ТабличныйДокумент для заполнения
//	ТаблицаВариантовАнализа - таблица ссылок на показатели, которые должны попасть в отчет
//
Функция ЗаполнитьСводныйОтчетДаннымиПоказателя(Знач СводныйОтчет, Знач ВариантыАнализаОтчета, ВариантГруппировки = "ПоГруппам", ПринудительноОбновитьДанные = Ложь) Экспорт
	
	ПустаяКартинка = Новый Картинка;
	
	Если ТипЗнч(ВариантыАнализаОтчета) = Тип("ДанныеФормыКоллекция") Тогда
		ВариантыАнализаОтчета = ВариантыАнализаОтчета.Выгрузить(,"ВариантАнализа, АдресДинамическихПараметров");
		ВариантыАнализаОтчета.Колонки.ВариантАнализа.Имя = "Значение";
	КонецЕсли;
	
	СводныйОтчет.Очистить();
	
	МакетЭлектроннойФормы = Отчеты.МониторЦелевыхПоказателей.ПолучитьМакет("МакетЭлектроннойФормыПоказателя");
	
	// Показатели
	Для Каждого ВариантАнализа Из ВариантыАнализаОтчета Цикл 
		
		Если ТипЗнч(ВариантыАнализаОтчета) = Тип("ТаблицаЗначений") Тогда
			Если НЕ ПустаяСтрока(ВариантАнализа.АдресДинамическихПараметров) Тогда
				ДинамическиеПараметры = ПолучитьИзВременногоХранилища(ВариантАнализа.АдресДинамическихПараметров);
				ИсточникСПараметрами = ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа.Значение, Перечисления.ВариантыОтображенияВариантовАнализа.Диаграмма, Истина, ДинамическиеПараметры);
				
			Иначе
				ИсточникСПараметрами = ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа.Значение, Перечисления.ВариантыОтображенияВариантовАнализа.Диаграмма, ПринудительноОбновитьДанные);
				
			КонецЕсли;
		Иначе	
			ИсточникСПараметрами = ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа.Значение, Перечисления.ВариантыОтображенияВариантовАнализа.Диаграмма, ПринудительноОбновитьДанные);
			
		КонецЕсли;
		
		Если НЕ ИсточникСПараметрами.ОшибкаРасчета И НЕ ИсточникСПараметрами.Пустой И ИсточникСПараметрами.РасчетыАктуальны Тогда
			ПодготовитьИсточник(ИсточникСПараметрами, ВариантАнализа.Значение);
		КонецЕсли;
		
		СводныйОтчет.НачатьАвтогруппировкуСтрок();
		
		ЗаполнитьСправочныеДанныеПоказателя(СводныйОтчет, ВариантАнализа.Значение, ИсточникСПараметрами);
		ЗаполнитьДанныеДиаграммы(СводныйОтчет, ВариантАнализа.Значение, ИсточникСПараметрами);
		
		СводныйОтчет.ЗакончитьАвтогруппировкуСтрок();
		
		СводныйОтчет.ВывестиГоризонтальныйРазделительСтраниц();	
		
	КонецЦикла;
	
	// Обозначения
	Если ВариантыАнализаОтчета.Количество() > 1 Тогда
		МакетОбозначений = Отчеты.МониторЦелевыхПоказателей.ПолучитьМакет("МакетОбозначенийЭлектроннойФормыПоказателя");
		ОбластьОбозначений = МакетОбозначений.ПолучитьОбласть("Обозначения");
		СводныйОтчет.Вывести(ОбластьОбозначений);
		
	КонецЕсли;
	
	// Параметры вывода
	СводныйОтчет.Защита = Истина;
	СводныйОтчет.ОтображатьЗаголовки = Ложь;
	СводныйОтчет.ОтображатьСетку = Ложь;
	СводныйОтчет.КлючПараметровПечати = "ПечатнаяФормаВариантаАнализа";
	СводныйОтчет.АвтоМасштаб = Истина;

	Возврат СводныйОтчет;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Агрегатные функции системы компоновки данных.

// Возвращает последнее значение из переданного из СКД массива итогов
//
// Параметры:
//	Данные - Массив - массив итогов
//
// Возвращаемое значение:
//	Произвольное - последнее значение в массиве
//
Функция ПолучитьПоследнееЗначениеМассива(Данные) Экспорт
	
	КоличествоЭлементов = Данные.Количество();
	
	Если КоличествоЭлементов > 0 Тогда
		Возврат Данные[КоличествоЭлементов - 1];
	Иначе
		Возврат Null;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Расчет источников данных и значений вариантов анализа.

// Возвращает структуру с параметрами "Значение", "ЦелевоеЗначение", "Изменение"
// Используется в списке показателей для вывода последних вычисленных значений
//
// Параметры:
//  ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей
//
// Возвращаемое значение:
//  Структура - содержащая заполненные свойства "Значение", "ЦелевоеЗначение", "Изменение"
//
Функция ПолучитьЗначенияПоказателя(ВариантАнализа) Экспорт
	Перем СтруктураЗначенийПоказателя;
	
	СтруктураЗначенийПоказателя = Новый Структура("Значение, ЦелевоеЗначение, Изменение", 0, 0, 0);
	// Получим данные
	ИсточникДанных = ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, Перечисления.ВариантыОтображенияВариантовАнализа.Диаграмма);
	
	// Заполним структуру
	СтрокаСПослФактЗначением = ИсточникДанных.Данные.Найти(НачалоДня(ИсточникДанных.ДатаПоследнегоФактическогоЗначения),"Период");
	СтрокаСПредпослФактЗначением = ИсточникДанных.Данные.Найти(ДатаСоСмещением(НачалоДня(ИсточникДанных.ДатаПоследнегоФактическогоЗначения), Перечисления.Периодичность.День, -1),"Период");
	
	СтруктураЗначенийПоказателя.Значение = ИсточникДанных.ПоследнееФактическоеЗначение;
	СтруктураЗначенийПоказателя.ЦелевоеЗначение = СтрокаСПослФактЗначением.ЦелевоеЗначение;
	СтруктураЗначенийПоказателя.Изменение = СтрокаСПослФактЗначением.Значение - СтрокаСПредпослФактЗначением.Значение;
	
	Возврат СтруктураЗначенийПоказателя;
	
КонецФункции

// Возвращает источник данных варианта анализа
// Если источник данных в кэше устарел, то производится перерасчет и обновление кэша
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей
//	ВариантОтображения - ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа - кратко, диаграмма, таблица
//	ПринудительноОбновитьДанные - Булево - указывает, что проверять актуальность данных не нужно.
//	ДинамическиеПараметры - Структура - содержит примененные дин. параметры варианта анализа
//			ПериодичностьКонтроля - ПеречислениеСсылка.Периодичность
//			ОбъектАнализа - Строка - имя поля-измерения, которое будет в роли объекта анализа
//
// Возвращаемое значение:
//	Структура - источник данных варианта анализа
//
Функция ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, ВариантОтображения, ПринудительноОбновитьДанные = Ложь, ДинамическиеПараметры = Неопределено) Экспорт
	
	// Инициализация переменных
	ИсточникДанных = Новый Структура;
	ПолучатьДанныеИзИБ = Истина;
	ПомеченНаУдаление = ВариантАнализа.ПометкаУдаления;
	
	// Проверим устарели ли данные показателя
	// Если ПериодАктуальностиРасчета = 0, то данные всегда беруться из ИБ
	Если НЕ ВариантАнализа.ПериодАктуальностиРасчета = 0 И НЕ ПринудительноОбновитьДанные И НЕ ПомеченНаУдаление Тогда
		// Проверим есть ли данные в кэше и их актуальность
		Если СвойстваДанныхВариантаАнализаВКэше(ВариантАнализа, ВариантОтображения).ДанныеАктуальны Тогда
			ПолучатьДанныеИзИБ = Ложь;
			
			// Получим данные из кэша
			ИсточникДанных = ПолучитьИсточникДанныхВариантаАнализаИзКэша(ВариантАнализа, ВариантОтображения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим данные из ИБ	
	Если ПолучатьДанныеИзИБ Тогда
		ИсточникДанных = ПолучитьИсточникДанныхВариантаАнализаИзИнформационнойБазы(ВариантАнализа, ВариантОтображения, ДинамическиеПараметры);
		
		Если НЕ ПомеченНаУдаление И ДинамическиеПараметры = Неопределено Тогда
			ЗаписатьДанныеВариантаАнализаВКэш(ИсточникДанных, ВариантОтображения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИсточникДанных;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее.

// Добавляет группировку в компоновщик настроек в самый нижний уровень структуры, если поле не указано - детальные поля
Функция ДобавитьГруппировкуВКореньСтруктуры(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина) Экспорт
	
	ЭлементСтруктуры = ОбщегоНазначенияУТКлиентСервер.ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки);
	Если ЭлементСтруктуры = Неопределено 
		ИЛИ ОбщегоНазначенияУТКлиентСервер.ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) <> Неопределено 
		И Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЭлементСтруктуры = КомпоновщикНастроек.Настройки;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	Если Поле <> Неопределено Тогда
		ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Поле;
	КонецЕсли;
	Возврат НоваяГруппировка;
	
КонецФункции

// Возвращает заполненную и настроенную диаграмму для монитора показателей
//
// Параметры:
//	Диаграмма			 - исходный объект Диаграмма
//	ВариантАнализа			 - Ссылка на вариант анализа
//	ИсточникСПараметрами - Структура - полное описание источника данных
//
// Возвращаемое значение:
//	Диаграмма - заполненная данными и настроенная диаграмма
//
Функция ЗаполнитьДиаграммуДляМонитора(Знач Диаграмма, ВариантАнализа, ИсточникСПараметрами) Экспорт
	
	ПодготовитьИсточник(ИсточникСПараметрами, ВариантАнализа);
	
	ИсточникДанныхДляДиаграммы = ИсточникСПараметрами.Данные;
	ДинамическиеСвойстваВариантаАнализа = ИсточникСПараметрами.ДинамическиеСвойстваВариантаАнализа;
	
	УстановитьИсточникДанныхДиаграммы(Диаграмма, ИсточникСПараметрами, ВариантАнализа);
	УстановитьНастройкиПоУмолчаниюДиаграммы(Диаграмма, ВариантАнализа);
	
	// Установим настройки для точек
	Если НЕ ИсточникДанныхДляДиаграммы.Колонки.Найти("Период") = Неопределено Тогда
		УстановитьИменаТочекДиаграммы(Диаграмма.Точки, ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа, ДинамическиеСвойстваВариантаАнализа.ПериодичностьКонтроля);
	КонецЕсли;
	
	Если НЕ ИсточникДанныхДляДиаграммы.Колонки.Найти("Признак") = Неопределено 
		И ВариантАнализа.РассчитыватьПрогноз 
		И НЕ ИсточникСПараметрами.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.Пустой Тогда
		// Выделим все периоды прогноза
		ОтборПоПризнаку = Новый Структура("Признак", Истина);
		НайденныеСтрокиСПериодами = ИсточникДанныхДляДиаграммы.НайтиСтроки(ОтборПоПризнаку);
		ПериодыСПризнаком = ИсточникДанныхДляДиаграммы.Скопировать(НайденныеСтрокиСПериодами, "Период");
		УстановитьПользовательскиеНастройкиТочекДиаграммы(Диаграмма.Точки, ВариантАнализа, ПериодыСПризнаком);
		
		// Удалить серию "Признак"
		КолонкиИсточника = ИсточникДанныхДляДиаграммы.Колонки;
		КолонкиИсточника.Удалить(КолонкиИсточника.Индекс(КолонкиИсточника.Найти("Признак")));
		
	КонецЕсли;
	
	УстановитьНастройкиПоУмолчаниюСерийДиаграммы(Диаграмма.Серии);
	
	Если ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ИзмерениеТекущегоСостояния Тогда
		УстановитьНастройкиИзмерительнойДиаграммы(Диаграмма, ВариантАнализа, ИсточникСПараметрами);
		
	Иначе
		УстановитьПользовательскиеНастройкиСерийДиаграммы(Диаграмма.Серии, ВариантАнализа);
		
	КонецЕсли;
	
	Возврат Диаграмма;
	
КонецФункции

// Заполняет таблицу значений для монитора показателей
//
// Параметры:
//	ТаблицаЗначенийМонитора	 - исходный объект ТаблицаЗначений
//	ИдентификаторЭлементаФормы - строковый идентификатор элемента формы, определяющий уникальность
//	ВариантАнализа				 - Ссылка на вариант анализа
//	ИсточникСПараметрами	 - Структура - полное описание источника данных
//
Процедура ЗаполнитьТаблицуДляМонитора(ТаблицаЗначенийМонитора, ИдентификаторЭлементаФормы, ВариантАнализа, ИсточникСПараметрами) Экспорт
	
	ПодготовитьИсточник(ИсточникСПараметрами, ВариантАнализа);
	
	ДанныеИсточникаДанных = ИсточникСПараметрами.Данные;
	ДинамическиеСвойстваВариантаАнализа = ИсточникСПараметрами.ДинамическиеСвойстваВариантаАнализа;
	
	КратностьЗначений = ВариантАнализа.КратностьЗначений;
	ТочностьРасчетаДробнойЧасти = ВариантАнализа.ТочностьРасчетаДробнойЧасти;
	
	КолонкиИсточника = ДанныеИсточникаДанных.Колонки;
	Для Каждого КолонкаИсточника Из КолонкиИсточника Цикл
		Если КолонкаИсточника.Имя = ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа Тогда
			КолонкаИсточника.Имя = НСтр("ru='КолонкаОбъектАнализа'") + "__" + ИдентификаторЭлементаФормы;
		ИначеЕсли КолонкаИсточника.Имя = ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа Тогда
			КолонкаИсточника.Имя = НСтр("ru='КолонкаЗначениеАнализа'") + "__" + ИдентификаторЭлементаФормы;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗначенийМонитора.Загрузить(ДанныеИсточникаДанных);
	
	// Форматируем значение в соотвествии с данными показателя
	Для Каждого СтрокаТаблицыЗначенийМонитора Из ТаблицаЗначенийМонитора Цикл 
		ИмяКолонкиЗначение = "КолонкаЗначениеАнализа" + "__" + ИдентификаторЭлементаФормы;
		УстанавливаемоеЗначение = Окр(СтрокаТаблицыЗначенийМонитора[ИмяКолонкиЗначение], ТочностьРасчетаДробнойЧасти);
		
		СтрокаТаблицыЗначенийМонитора[ИмяКолонкиЗначение] = ПолучитьСокращенноеПредставлениеЧисла(УстанавливаемоеЗначение, ТочностьРасчетаДробнойЧасти, КратностьЗначений) + " " + ДинамическиеСвойстваВариантаАнализа.Размерность;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает базовое значение, для построения диаграмм с прогнозами
Функция ПолучитьБазовоеЗначениеДляДиаграмм() Экспорт
	
	Возврат 0.01;
	
КонецФункции

// Возвращает валюту по умолчанию для заполнения настроек структуры целей и вариантов анализа.
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты - валюта по умолчанию для настроек.
//
Функция ПолучитьВалютуПоУмолчанию() Экспорт
	
	ВалютаПоУмолчанию = Справочники.Валюты.ПустаяСсылка();
	
	ВалютаУправленческогоУчета = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
	
	Если НЕ ВалютаУправленческогоУчета.Пустая() Тогда
		ВалютаПоУмолчанию = ВалютаУправленческогоУчета;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Код", "643");
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Валюты.Ссылка КАК Валюта
		               |ИЗ
		               |	Справочник.Валюты КАК Валюты
		               |ГДЕ
		               |	Валюты.Код = &Код";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ВалютаПоУмолчанию = Выборка.Валюта;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВалютаПоУмолчанию;
	
КонецФункции

// Возвращает значение числа в виде тыс., млн
// 
// Параметры:
//	ИсходноеЧисло		  - Число - форматируемое число
//	Разрядность			  - Число - количество знаков после запятой
//	ВидПредставленияЧисла - Перечисление - вид представления возвращаемой строки
//
// Возвращаемое значение:
//	Строка
//
Функция ПолучитьЗначениеСокращенногоПредставленияЧисла(ИсходноеЧисло, Разрядность, ВидПредставленияЧисла) Экспорт 
	
	ЗначениеСокращенногоПредставленияЧисла = "";
	
	ЗначениеСокращенногоПредставленияЧисла = СтрЗаменить(Формат(ИсходноеЧисло, "ЧДЦ=" + Разрядность + ";ЧН="), " ", Символы.НПП);
	
	Возврат Число(ЗначениеСокращенногоПредставленияЧисла);
	
КонецФункции

// Возвращает имя значения объекта метаданных перечисление по ссылке
//
// Параметры
//  ПеречислениеСсылка
//
// Возвращаемое значение:
//  ИмяЗначенияПеречисления - Строка. Если не найдено, то пустая строка
//
Функция ПолучитьИмяЗначенияПеречисления(ПеречислениеСсылка) Экспорт
	
	ИмяЗначения = "";
	
	МетаданныеПеречисления = ПеречислениеСсылка.Метаданные();
	
	ИмяПеречисления = МетаданныеПеречисления.Имя;
	ИндексЗначения = Перечисления[ИмяПеречисления].Индекс(ПеречислениеСсылка);
	
	ИмяЗначения = МетаданныеПеречисления.ЗначенияПеречисления[ИндексЗначения].Имя;
	
	Возврат ИмяЗначения;
	
КонецФункции

// Возвращает индекс картинки, характеризующей состояние(статус) показателя для списка
//
// Параметры
//	ВариантАнализа - ссылка на вариант анализа
//
// Возвращаемое значение:
//	Индекс - Число - индекс картинки в коллекции
//
Функция ПолучитьИндексКартинкиСостоянияДляПоказателя(ВариантАнализа, ИсточникДанных) Экспорт
	
	Перем ИндексКартинкиСтатусаПоказателя;
	
	ИндексКартинкиСтатусаПоказателя = Неопределено;
	
	ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных, ВариантАнализа.Владелец.ЦелевойТренд, ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, ВариантАнализа), ВариантАнализа.ТочностьРасчетаДробнойЧасти);
	
	ИмяОбластиМатрицыСостояний =  "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона_" + ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ВариантАнализа.Владелец.ЦелевойТренд);
	
	МатрицаСостояний = МониторингЦелевыхПоказателейПовтИсп.ПолучитьМатрицуСостояний();
	СекцияИмяКартинкиСостояния = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ИмяКартинкиСтатуса");
	ТекстСекции = СекцияИмяКартинкиСостояния.ТекущаяОбласть.Текст;
	
	Если ТекстСекции = "ПиктограммаПоказателяЦельДостигнута" Тогда
		ИндексКартинкиСтатусаПоказателя = 3;
		
	ИначеЕсли ТекстСекции = "ПиктограммаПоказателяПриемлемоеЗначение" Тогда
		ИндексКартинкиСтатусаПоказателя = 2;
		
	ИначеЕсли ТекстСекции = "ПиктограммаПоказателяСтатусНеопределен" Тогда
		ИндексКартинкиСтатусаПоказателя = 1;
		
	ИначеЕсли ТекстСекции = "ПиктограммаПоказателяНеприемлемоеЗначение" Тогда
		ИндексКартинкиСтатусаПоказателя = 0;
		
	КонецЕсли;
	
	Возврат ИндексКартинкиСтатусаПоказателя;
	
КонецФункции

// Возвращает индекс картинки, характеризующей тренд(характер изменений) показателя для списка
//
// Параметры
//	ВариантАнализа - Ссылка на вариант анализа
//
// Возвращаемое значение:
//	Индекс - Число - индекс картинка в коллекции
//
Функция ПолучитьИндексКартинкиТрендаДляПоказателя(ВариантАнализа, ИсточникДанных) Экспорт
	
	Перем ИндексКартинкиТрендаПоказателя;
	
	ИндексКартинкиТрендаПоказателя = Неопределено;
	
	ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных, ВариантАнализа.Владелец.ЦелевойТренд, ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, ВариантАнализа), ВариантАнализа.ТочностьРасчетаДробнойЧасти);
	
	ИмяОбластиМатрицыСостояний =  "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона_" + ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ВариантАнализа.Владелец.ЦелевойТренд);
	
	МатрицаСостояний = МониторингЦелевыхПоказателейПовтИсп.ПолучитьМатрицуСостояний();
	СекцияИмяКартинкиТренда = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ИмяКартинкиТренда");
	ТекстСекции = СекцияИмяКартинкиТренда.ТекущаяОбласть.Текст;
	
	Если ТекстСекции = "ПиктограммаТрендаБезИзменений" Тогда
		ИндексКартинкиТрендаПоказателя = 6;
		
	ИначеЕсли ТекстСекции = "ПиктограммаТрендаПадениеВДиапазоне" Тогда
		ИндексКартинкиТрендаПоказателя = 5;
		
	ИначеЕсли ТекстСекции = "ПиктограммаТрендаПадениеУхудшается" Тогда
		ИндексКартинкиТрендаПоказателя = 4;
		
	ИначеЕсли ТекстСекции = "ПиктограммаТрендаПадениеУлучшается" Тогда
		ИндексКартинкиТрендаПоказателя = 3;
		
	ИначеЕсли ТекстСекции = "ПиктограммаТрендаРостВДиапазоне" Тогда
		ИндексКартинкиТрендаПоказателя = 2;
		
	ИначеЕсли ТекстСекции = "ПиктограммаТрендаРостУхудшается" Тогда
		ИндексКартинкиТрендаПоказателя = 1;
		
	ИначеЕсли ТекстСекции = "ПиктограммаТрендаРостУлучшается" Тогда
		ИндексКартинкиТрендаПоказателя = 0;
		
	ИначеЕсли ТекстСекции = "ПиктограммаТрендаНеопределен" Тогда
		ИндексКартинкиТрендаПоказателя = 7;
		
	КонецЕсли;
	
	Возврат ИндексКартинкиТрендаПоказателя;
	
КонецФункции

// Возвращает картинку, характеризующую состояние(статус) показателя
//
// Параметры
//	ВариантАнализа		- Ссылка на вариант анализа
//	ИсточникДанных 	- ТаблицаЗначений с данными для диаграммы
//
// Возвращаемое значение:
//	Картинка		- картинка из библиотеки картинок
//
Функция ПолучитьКартинкуСостоянияДляПоказателя(ВариантАнализа, ИсточникДанных) Экспорт
	
	Перем КартинкаСтатусаПоказателя;
	
	КартинкаСтатусаПоказателя = Новый Картинка;
	
	ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных, ВариантАнализа.Владелец.ЦелевойТренд, ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, ВариантАнализа), ВариантАнализа.ТочностьРасчетаДробнойЧасти);
	
	ИмяОбластиМатрицыСостояний =  "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона_" + ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ВариантАнализа.Владелец.ЦелевойТренд);
	
	МатрицаСостояний = МониторингЦелевыхПоказателейПовтИсп.ПолучитьМатрицуСостояний();
	СекцияИмяКартинкиСостояния = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ИмяКартинкиСтатуса");
	ИмяКартинкиСостояния = СекцияИмяКартинкиСостояния.ТекущаяОбласть.Текст;
	
	КартинкаСтатусаПоказателя = БиблиотекаКартинок[ИмяКартинкиСостояния];
	
	Возврат КартинкаСтатусаПоказателя;
	
КонецФункции

// Возвращает картинку, характеризующую тренд(характер изменений) показателя
//
// Параметры
//	ВариантАнализа - Ссылка на вариант анализа
//
// Возвращаемое значение:
//	Индекс - Число - картинка из библиотеки
//
Функция ПолучитьКартинкуТрендаДляПоказателя(ВариантАнализа, ИсточникДанных) Экспорт
	
	Перем КартинкаТрендаПоказателя;
	
	КартинкаТрендаПоказателя = Новый Картинка;
	
	ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных, ВариантАнализа.Владелец.ЦелевойТренд, ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, ВариантАнализа), ВариантАнализа.ТочностьРасчетаДробнойЧасти);
	
	ИмяОбластиМатрицыСостояний =  "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона_" + ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ВариантАнализа.Владелец.ЦелевойТренд);
	
	МатрицаСостояний = МониторингЦелевыхПоказателейПовтИсп.ПолучитьМатрицуСостояний();
	СекцияИмяКартинкиТренда = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ИмяКартинкиТренда");
	ИмяКартинкиТренда = СекцияИмяКартинкиТренда.ТекущаяОбласть.Текст;
	
	КартинкаТрендаПоказателя = БиблиотекаКартинок[ИмяКартинкиТренда];
	
	Возврат КартинкаТрендаПоказателя;
	
КонецФункции

// Служебная функция, предназначенная для получения описания типов строки
// 
// Параметры:
//  ДлинаСтроки 			- число, количество символов в строке.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт
	Массив = Новый Массив; 
	Массив.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);
	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);
КонецФункции

// Служебная функция, предназначенная для получения описания типов хранилища значений
// 
// Возвращаемое значение:
//  ОписаниеТипов - для хранилища значения
//
Функция ПолучитьОписаниеТиповХранилищаЗначения() Экспорт
	Массив = Новый Массив; 
	Массив.Добавить(Тип("ХранилищеЗначения"));
	Возврат Новый ОписаниеТипов(Массив);
КонецФункции

// Возвращает структуру, содержащую все свойства варианта анализа
//
// Параметры
//  ВариантАнализа - ссылка на вариант анализа
//
// Возвращаемое значение:
//  Структура - структура рекивзитов и сопутствующих данных варианта анализа
//
Функция ПолучитьСвойстваВариантаАнализа(ВариантАнализа, ИсточникДанных) Экспорт
	
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	// Инициализируем переменные
	СвойстваВариантаАнализа = Новый Структура("Цель,
	|КатегорияЦели,
	|ЦелевойПоказатель,
	|КраткоеНаименованиеЦелевогоПоказателя,
	|Описание,
	|ФормулаРасчета,
	|Размерность,
	|ВариантАнализа,
	|Ответственный,
	|ЦелевойТренд,
	|ЦелевыеЗначения,
	|ФактическийТренд,
	|ФактическоеЗначение,
	|ФактическоеСостояние,
	|ПериодАнализа,
	|ПериодСравнения,
	|ТипАнализа,
	|ПериодичностьКонтроля,
	|ОбъектАнализа,
	|ЗначениеАнализа,
	|КратностьЗначений,
	|ТочностьРасчетаДробнойЧасти,
	|МетодРасчетаЗначений,
	|ПользовательскиеОтборы,
	|ДатаВремяФормирования,
	|Пользователь,
	|СпособРасчета,
	|Адекватность");
	
	ВидыОтклоненийОтЦелевыхЗначенийПоказателей = Перечисления.ВидыОтклоненийОтЦелевыхЗначенийПоказателей;
	ВидыЦелевыхЗначенийВариантовАнализа = Перечисления.ВидыЦелевыхЗначенийВариантовАнализа;
	
	// Получим свойства варианта анализа и цели
	ЗапросСвойствВариантаАнализа = Новый Запрос;
	ЗапросСвойствВариантаАнализа.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	ЗапросСвойствВариантаАнализа.Текст = 
	"ВЫБРАТЬ
	|	ВариантыАнализаЦелевыхПоказателей.Владелец.Ссылка КАК Цель,
	|	ВариантыАнализаЦелевыхПоказателей.Владелец.КатегорияЦели КАК КатегорияЦели,
	|	ВариантыАнализаЦелевыхПоказателей.Владелец.ЦелевойПоказатель КАК ЦелевойПоказатель,
	|	ВариантыАнализаЦелевыхПоказателей.Владелец.КраткоеНаименованиеЦелевогоПоказателя КАК КраткоеНаименованиеЦелевогоПоказателя,
	|	ВариантыАнализаЦелевыхПоказателей.Владелец.Описание КАК Описание,
	|	ВариантыАнализаЦелевыхПоказателей.Владелец.ФормулаРасчета КАК ФормулаРасчета,
	|	ВариантыАнализаЦелевыхПоказателей.Владелец.ЦелевойТренд КАК ЦелевойТренд,
	|	ВариантыАнализаЦелевыхПоказателей.ПериодАнализа,
	|	ВариантыАнализаЦелевыхПоказателей.ПериодСравнения,
	|	ВариантыАнализаЦелевыхПоказателей.ТипАнализа,
	|	ВариантыАнализаЦелевыхПоказателей.ПериодичностьКонтроля,
	|	ВариантыАнализаЦелевыхПоказателей.ОбъектАнализа,
	|	ВариантыАнализаЦелевыхПоказателей.ЗначениеАнализа,
	|	ВариантыАнализаЦелевыхПоказателей.МетодРасчетаЗначений,
	|	ВариантыАнализаЦелевыхПоказателей.ХранилищеПользовательскихНастроекКомпоновкиДанных,
	|	ВариантыАнализаЦелевыхПоказателей.Ответственный,
	|	ВариантыАнализаЦелевыхПоказателей.ТочностьРасчетаДробнойЧасти,
	|	ВариантыАнализаЦелевыхПоказателей.КратностьЗначений,
	|	ВариантыАнализаЦелевыхПоказателей.Ссылка КАК ВариантАнализа
	|ИЗ
	|	Справочник.ВариантыАнализаЦелевыхПоказателей КАК ВариантыАнализаЦелевыхПоказателей
	|ГДЕ
	|	ВариантыАнализаЦелевыхПоказателей.Ссылка = &ВариантАнализа";
	
	РезультатЗапросаСвойствВариантаАнализа = ЗапросСвойствВариантаАнализа.Выполнить();
	
	Если НЕ РезультатЗапросаСвойствВариантаАнализа.Пустой() Тогда
		
		ВыборкаСвойствВариантаАнализа = РезультатЗапросаСвойствВариантаАнализа.Выбрать();
		ВыборкаСвойствВариантаАнализа.Следующий();
		
		ЗаполнитьЗначенияСвойств(СвойстваВариантаАнализа, ВыборкаСвойствВариантаАнализа);
		
		Если СвойстваВариантаАнализа.Ответственный.Пустая() Тогда
			СвойстваВариантаАнализа.Ответственный = "Ответственный не определен";
			
		КонецЕсли;
		
		СвойстваВариантаАнализа.ПериодАнализа = ПредставлениеСтандартногоПериода(ВыборкаСвойствВариантаАнализа.ПериодАнализа.Получить());
		
		ПериодСравнения = ВыборкаСвойствВариантаАнализа.ПериодСравнения.Получить();
		Если НЕ ПериодСравнения = Неопределено И СвойстваВариантаАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда
			СвойстваВариантаАнализа.ПериодСравнения = ПредставлениеСтандартногоПериода(ВыборкаСвойствВариантаАнализа.ПериодСравнения.Получить());
			
		Иначе
			СвойстваВариантаАнализа.ПериодСравнения = Неопределено;
			
		КонецЕсли;
		
		// Заполним информацию по пользовательским настройкам
		ПользовательскиеНастройки = ВыборкаСвойствВариантаАнализа.ХранилищеПользовательскихНастроекКомпоновкиДанных.Получить();
		Если НЕ ПользовательскиеНастройки = Неопределено Тогда
			
			ПользовательскиеНастройкиЭлементы = ПользовательскиеНастройки.Элементы;
			
			ПользовательскиеОтборы = "";
			Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройкиЭлементы Цикл
				Если ПользовательскаяНастройка.Использование Тогда
					ПользовательскиеОтборы = "Установлены пользовательские отборы";
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ПустаяСтрока(ПользовательскиеОтборы) Тогда
				СвойстваВариантаАнализа.ПользовательскиеОтборы = ПользовательскиеОтборы;
				
			Иначе
				СвойстваВариантаАнализа.ПользовательскиеОтборы = Неопределено;
				
			КонецЕсли;
			
		Иначе
			СвойстваВариантаАнализа.ПользовательскиеОтборы = Неопределено;
			
		КонецЕсли;
		
		СвойстваВариантаАнализа.Размерность = Символы.НПП + Строка(ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.Размерность);
		СвойстваВариантаАнализа.ПериодичностьКонтроля = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ПериодичностьКонтроля;
		СвойстваВариантаАнализа.ОбъектАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ОбъектАнализаПредставление;
		СвойстваВариантаАнализа.ЗначениеАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаПредставление;
		
	КонецЕсли;
	
	// Заполним информацию о фактическом состоянии
	СвойстваВариантаАнализа.ФактическийТренд = ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКТренду;
	СвойстваВариантаАнализа.ФактическоеСостояние = ИсточникДанных.СвойстваЗоныАнализаИТренда.Статус;
	СвойстваВариантаАнализа.ФактическоеЗначение = ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений);
	
	// Заполним информацию по целям
	ПредставлениеРазмерности = "";
	Если НЕ ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность) И НЕ ДинамическиеСвойстваВариантаАнализа.Размерность = Неопределено Тогда
		ПредставлениеРазмерности = Символы.НПП + ДинамическиеСвойстваВариантаАнализа.Размерность;
	КонецЕсли;
	
	Если НЕ ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = Неопределено И НЕ ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения.Пустая() Тогда
		Если ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Абсолютное Тогда
			РазмерностьОтклонения = Символы.НПП + ДинамическиеСвойстваВариантаАнализа.Размерность;
			
		ИначеЕсли ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Относительное Тогда
			РазмерностьОтклонения = "%";
			
		КонецЕсли;
		ЦелиУстановлены = Истина;
		
		
		Если ИсточникДанных.СвойстваДанныхПоПериодам.ВидЦелевогоЗначения = ВидыЦелевыхЗначенийВариантовАнализа.Значение Тогда
			Если ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Абсолютное Тогда
				СвойстваВариантаАнализа.ЦелевыеЗначения = ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений) 
				+ ПредставлениеРазмерности + Символы.ПС
				+ НСтр("ru='с позитивным отклонением'") + " " 
				+ ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеПозитивноеОтклонение, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений)
				+ РазмерностьОтклонения + " "
				+ НСтр("ru='и негативным отклонением'") + " " 
				+ ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеНегативноеОтклонение, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений)
				+ РазмерностьОтклонения;
				
			ИначеЕсли ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Относительное Тогда
				СвойстваВариантаАнализа.ЦелевыеЗначения = ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений) 
				+ ПредставлениеРазмерности + Символы.ПС
				+ НСтр("ru='с позитивным отклонением'") + " " + ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеПозитивноеОтклонение
				+ РазмерностьОтклонения + " "
				+ НСтр("ru='и негативным отклонением'") + " " + ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеНегативноеОтклонение
				+ РазмерностьОтклонения;
				
			КонецЕсли;
		Иначе 
			Если ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Абсолютное Тогда
				СвойстваВариантаАнализа.ЦелевыеЗначения = ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевойДиапазонМинимум, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений) 
				+ " - " + ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевойДиапазонМаксимум, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений)
				+ ПредставлениеРазмерности + Символы.ПС
				+ НСтр("ru='с позитивным отклонением'") + " " 
				+ ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеПозитивноеОтклонение, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений)
				+ РазмерностьОтклонения + " "
				+ НСтр("ru='и негативным отклонением'") + " " 
				+ ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеНегативноеОтклонение, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений)
				+ РазмерностьОтклонения;
				
			ИначеЕсли ИсточникДанных.СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Относительное Тогда
				СвойстваВариантаАнализа.ЦелевыеЗначения = ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевойДиапазонМинимум, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений) 
				+ " - " + ПолучитьСокращенноеПредставлениеЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевойДиапазонМаксимум, СвойстваВариантаАнализа.ТочностьРасчетаДробнойЧасти, СвойстваВариантаАнализа.КратностьЗначений)
				+ ПредставлениеРазмерности + Символы.ПС
				+ НСтр("ru='с позитивным отклонением'") + " " + ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеПозитивноеОтклонение
				+ РазмерностьОтклонения + " "
				+ НСтр("ru='и негативным отклонением'") + " " + ИсточникДанных.СвойстваДанныхПоПериодам.ГраничноеНегативноеОтклонение
				+ РазмерностьОтклонения;
				
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		РазмерностьОтклонения = "";
		ЦелиУстановлены = Ложь;
		СвойстваВариантаАнализа.ЦелевыеЗначения = НСтр("ru='Цели не установлены'");
	КонецЕсли;
	
	// Заполним информацию о прогнозе
	Если ВариантАнализа.РассчитыватьПрогноз 
		И НЕ ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда = Неопределено
		И НЕ ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.Пустой Тогда
		СвойстваВариантаАнализа.СпособРасчета	= ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.СпособРасчета;
		СвойстваВариантаАнализа.Адекватность	= Строка(Окр(100 * ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.Адекватность, 2)) + " " + "%";
		
	КонецЕсли;

	// Заполним информацию о сфромировавшем и дате актуальности информации.
	СвойстваВариантаАнализа.ДатаВремяФормирования = ТекущаяДата();
	СвойстваВариантаАнализа.Пользователь = Пользователи.ТекущийПользователь();
	
	Возврат СвойстваВариантаАнализа;
	
КонецФункции

// Возвращает сдвиг числа для видов тыс., млн
// 
// Параметры:
//	ВариантАнализа	- Ссылка на вариант анализа
//
// Возвращаемое значение:
//	Число
//
Функция ПолучитьСдвигПоВидуПредставленияЧисел(ВариантАнализа) Экспорт
	
	Сдвиг = 0;
	КратностьЧисла = ВариантАнализа.КратностьЗначений;
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	
	Если КратностьЧисла = ВидыПредставленияЧисел.БезИзменений Тогда
		Сдвиг = 0;
		
	ИначеЕсли КратностьЧисла = ВидыПредставленияЧисел.ВТысячах Тогда
		Сдвиг = 3;
		
	ИначеЕсли КратностьЧисла = ВидыПредставленияЧисел.ВМиллионах Тогда
		Сдвиг = 6;
		
	КонецЕсли;
	
	Возврат Сдвиг;
	
КонецФункции

// Возвращает представление числа в виде тыс., млн
// 
// Параметры:
//	ИсходноеЧисло		  - Число - форматируемое число
//	Разрядность			  - Число - количество знаков после запятой
//	ВидПредставленияЧисла - Перечисление - вид представления возвращаемой строки
//
// Возвращаемое значение:
//	Строка
//
Функция ПолучитьСокращенноеПредставлениеЧисла(ИсходноеЧисло, Разрядность, ВидПредставленияЧисла) Экспорт 
	
	СокращенноеПредставлениеЧисла = "";
	СокращенноеПредставлениеПорядкаЧисел = "";
	
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	
	Если ВидПредставленияЧисла = ВидыПредставленияЧисел.ВТысячах Тогда
		СокращенноеПредставлениеПорядкаЧисел = НСтр("ru='тыс.'");
		
	ИначеЕсли ВидПредставленияЧисла = ВидыПредставленияЧисел.ВМиллионах Тогда
		СокращенноеПредставлениеПорядкаЧисел = НСтр("ru='млн'");
		
	КонецЕсли;
	
	СокращенноеПредставлениеЧисла = СтрЗаменить(Формат(ИсходноеЧисло, "ЧДЦ=" + Разрядность + ";ЧН="), " ", Символы.НПП) + ?(НЕ ПустаяСтрока(СокращенноеПредставлениеПорядкаЧисел), Символы.НПП + СокращенноеПредставлениеПорядкаЧисел, "");
	
	Возврат СокращенноеПредставлениеЧисла;              
	
КонецФункции

// Возвращает строку для видов тыс., млн
// 
// Параметры:
//	ВариантАнализа	- Ссылка на вариант анализа
//
// Возвращаемое значение:
//	Строка
//
Функция ПолучитьСтрокуПредставленияЧисел(ВариантАнализа) Экспорт
	
	СокращенноеПредставлениеПорядкаЧисел = "";
	
	ВидПредставленияЧисла = ВариантАнализа.КратностьЗначений;
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	
	Если ВидПредставленияЧисла = ВидыПредставленияЧисел.ВТысячах Тогда
		СокращенноеПредставлениеПорядкаЧисел = НСтр("ru='тыс.'");
		
	ИначеЕсли ВидПредставленияЧисла = ВидыПредставленияЧисел.ВМиллионах Тогда
		СокращенноеПредставлениеПорядкаЧисел = НСтр("ru='млн'");
		
	КонецЕсли;
	
	Возврат СокращенноеПредставлениеПорядкаЧисел;
	
КонецФункции

// Возвращает количества источников данных с разбивкой по зонам внимания и вариантам отображения 
//
// Параметры:
//	НаборИсточниковДанных - ТаблицаЗначений - анализируемый набор
//	УчитыватьВариантыОтображения - Булево
//
// Возвращаемое значение:
//	Структура - содержит количества источников данных
//
Функция СтатистикаИсточниковДанныхПоЗонамВнимания(НаборИсточниковДанных, УчитыватьВариантыОтображения = Ложь) Экспорт
	
	ВариантыОтображенияВариантовАнализа = Перечисления.ВариантыОтображенияВариантовАнализа;
	ЗоныВнимания = Перечисления.ЗоныВниманияВариантовАнализа;
	
	Если УчитыватьВариантыОтображения Тогда
		СтатистикаПоСтрокам = Новый Структура("КритическоеСостояниеКратко, 
		|КритическоеСостояниеПодробно, 
		|ВажноКратко, 
		|ВажноПодробно, 
		|КСведениюКратко,
		|КСведениюПодробно,
		|РассчитанныеСОшибкамиКратко,
		|РассчитанныеСОшибкамиПодробно");
		
		// Отберем критическое состояние
		Отбор = Новый Структура("ЗонаВнимания, ВариантОтображения", ЗоныВнимания.КритическоеСостояние, ВариантыОтображенияВариантовАнализа.Кратко);
		СтатистикаПоСтрокам.КритическоеСостояниеКратко = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		ОтборВсехКратких = Новый Структура("ВариантОтображения", ВариантыОтображенияВариантовАнализа.Кратко);
		НаборИсточниковДанныхБезКратких = ПрименитьКТаблицеУсловиеНЕ(НаборИсточниковДанных, ОтборВсехКратких);
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.КритическоеСостояние);
		СтатистикаПоСтрокам.КритическоеСостояниеПодробно = НаборИсточниковДанныхБезКратких.НайтиСтроки(Отбор).Количество();
		
		// Отберем важные
		Отбор = Новый Структура("ЗонаВнимания, ВариантОтображения", ЗоныВнимания.Важно, ВариантыОтображенияВариантовАнализа.Кратко);
		СтатистикаПоСтрокам.ВажноКратко = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.Важно);
		СтатистикаПоСтрокам.ВажноПодробно = НаборИсточниковДанныхБезКратких.НайтиСтроки(Отбор).Количество();
		
		// Отберем показатели к сведению
		Отбор = Новый Структура("ЗонаВнимания, ВариантОтображения", ЗоныВнимания.КСведению, ВариантыОтображенияВариантовАнализа.Кратко);
		СтатистикаПоСтрокам.КСведениюКратко = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.КСведению);
		СтатистикаПоСтрокам.КСведениюПодробно = НаборИсточниковДанныхБезКратких.НайтиСтроки(Отбор).Количество();
		
		// Отберем показатели, рассчитанные с ошибками
		Отбор = Новый Структура("ЗонаВнимания, ВариантОтображения", ЗоныВнимания.РассчитанныеСОшибками, ВариантыОтображенияВариантовАнализа.Кратко);
		СтатистикаПоСтрокам.РассчитанныеСОшибкамиКратко = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.РассчитанныеСОшибками);
		СтатистикаПоСтрокам.РассчитанныеСОшибкамиПодробно = НаборИсточниковДанныхБезКратких.НайтиСтроки(Отбор).Количество();
		
	Иначе
		СтатистикаПоСтрокам = Новый Структура("
		|КритическоеСостояние, 
		|Важно, 
		|КСведению,
		|РассчитанныеСОшибками");
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.КритическоеСостояние);
		СтатистикаПоСтрокам.КритическоеСостояние = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.Важно);
		СтатистикаПоСтрокам.Важно = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.КСведению);
		СтатистикаПоСтрокам.КСведению = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
		Отбор = Новый Структура("ЗонаВнимания", ЗоныВнимания.РассчитанныеСОшибками);
		СтатистикаПоСтрокам.РассчитанныеСОшибками = НаборИсточниковДанных.НайтиСтроки(Отбор).Количество();
		
	КонецЕсли;
	
	Возврат СтатистикаПоСтрокам;
	
КонецФункции

// Возвращает свойства типов анализа - доступные типы диаграмм, 
// доступность объекта анализа, требуется ли оформление типа анализа
//
Функция ПолучитьТаблицуСоответствиТиповАнализаИТиповДиаграмм() Экспорт
	
	ТаблицаСоответствий = Новый ТаблицаЗначений;
	ТаблицаСоответствий.Колонки.Добавить("ТипАнализа");
	ТаблицаСоответствий.Колонки.Добавить("ТипДиаграммы");
	ТаблицаСоответствий.Колонки.Добавить("ОформлениеПокомпонентногоСравненияДоступно");
	ТаблицаСоответствий.Колонки.Добавить("ОбъектАнализаДоступен");
	ТаблицаСоответствий.Колонки.Добавить("ПериодСравненияДоступен");
	ТаблицаСоответствий.Колонки.Добавить("ПрогнозированиеДоступно");
	
	ТипыСравнений = Перечисления.ТипыАнализаПоказателей;
	ТипыДиаграмм = Перечисления.ТипыДиаграммПоказателей;
	
	// Покомпонентное сравнение
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;

	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплением;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаГоризонтальная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаГоризонтальнаяОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяГоризонтальная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяГоризонтальнаяОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемГоризонтальная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемГоризонтальнаяОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнение;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Круговая;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Истина;
	НовоеСравнение.ОбъектАнализаДоступен = Истина;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	
	// Динамика изменений
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Истина;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Истина;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.График;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Истина;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикПоШагам;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Истина;
	
	// Текущее состояние
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ИзмерениеТекущегоСостояния;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Измерительная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	НовоеСравнение.ПериодСравненияДоступен = Ложь;
	НовоеСравнение.ПрогнозированиеДоступно = Ложь;
	
	// Сравнение с прошлым периодом
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.СравнениеСПрошлымПериодом;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	НовоеСравнение.ПериодСравненияДоступен = Истина;
	НовоеСравнение.ПрогнозированиеДоступно = Истина;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.СравнениеСПрошлымПериодом;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	НовоеСравнение.ОформлениеПокомпонентногоСравненияДоступно = Ложь;
	НовоеСравнение.ОбъектАнализаДоступен = Ложь;
	НовоеСравнение.ПериодСравненияДоступен = Истина;
	НовоеСравнение.ПрогнозированиеДоступно = Истина;
	
	Возврат ТаблицаСоответствий;
	
КонецФункции

// Возвращает цвет в зависимости от числового значения в диапазона от 0 до 100%
// При этом: 
//	0 соответствует красному цвету, 
//	50 - оранжевому,
//	100 - зеленому.
//
// Параметры:
//  ЗначениеИндикатораВПроцентах - Число - значение в диапазоне от 0 до 100
//  Оттенок	- Число - значение в диапазоне от 0 до 255 (0 - самый насыщенный)
//
// Возвращаемое значение:
//  Цвет
//
Функция ПолучитьЦветИндикатора(ЗначениеИндикатораВПроцентах, Оттенок) Экспорт
	
	Перем КрасныйЗначение, ЗеленыйЗначение, СинийЗначение, ЦветИндикатора;
	
	КрасныйЗначение = 255;
	ЗеленыйЗначение = Оттенок;
	СинийЗначение = Оттенок;
	
	Если ЗначениеИндикатораВПроцентах < 50 Тогда	
		
		КрасныйЗначение = 255;
		ЗеленыйЗначение = Оттенок + (255 - Оттенок)*(2 * ЗначениеИндикатораВПроцентах / 100);
		
		ЦветИндикатора = Новый Цвет(КрасныйЗначение, ЗеленыйЗначение, СинийЗначение);	
		
	ИначеЕсли ЗначениеИндикатораВПроцентах < 100 Тогда 
		
		КрасныйЗначение = 255 - (255 - Оттенок)*(2 * ЗначениеИндикатораВПроцентах / 100 - 1);
		ЗеленыйЗначение = 255;
		
		ЦветИндикатора = Новый Цвет(КрасныйЗначение, ЗеленыйЗначение, СинийЗначение);	
		
	Иначе 
		
		ЦветИндикатора = ЦветаСтиля.ЦветТекстаФормы;	
		
	КонецЕсли;
	
	Возврат ЦветИндикатора;
	
КонецФункции

// Возвращает цвет, характеризующую состояние(статус) показателя
//
// Параметры
//	ВариантАнализа		- Ссылка на вариант анализа
//	ИсточникДанных 	- ТаблицаЗначений с данными для диаграммы
//
// Возвращаемое значение:
//	Картинка		- картинка из библиотеки картинок
//
Функция ПолучитьЦветСостоянияДляПоказателя(ВариантАнализа, ИсточникДанных) Экспорт
	
	Перем ЦветСтатусаПоказателя;
	
	ЦелевойТренд = ВариантАнализа.Владелец.ЦелевойТренд;
	
	ЦветСтатусаПоказателя = Новый Цвет;
	
	ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных, ЦелевойТренд, ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, ВариантАнализа), ВариантАнализа.ТочностьРасчетаДробнойЧасти);
	
	ИмяОбластиМатрицыСостояний =  "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона_" + ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ЦелевойТренд);
	
	МатрицаСостояний = МониторингЦелевыхПоказателейПовтИсп.ПолучитьМатрицуСостояний();
	СекцияЗначениеЦветаСтатуса = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ЗначениеЦветаСтатуса");
	
	ЦветСтатусаПоказателя = ПолучитьЦветИндикатора(Число(СекцияЗначениеЦветаСтатуса.ТекущаяОбласть.Текст), 0);
	
	Возврат ЦветСтатусаПоказателя;
	
КонецФункции

// Возвращает таблицу значений с примененным к ней отбором
//
// Параметры:
//	ТаблицаЗначений - ТаблицаЗначений - обрабатываемая таблица
//	СтруктураОтборов - Структура - применяемые отборы
//
// Возвращаемое значение:
//	ТаблицаЗначений - обработанная таблица
//
Функция ПрименитьКТаблицеУсловие(ТаблицаЗначений, СтруктураОтборов) Экспорт
	
	ТаблицаЗначенийКОбработке = ТаблицаЗначений.Скопировать();
	
	СтрокиКУдалению = НайтиСтрокиТаблицыПоУсловиюНЕ(ТаблицаЗначенийКОбработке, СтруктураОтборов);
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл 
		ТаблицаЗначенийКОбработке.Удалить(СтрокаКУдалению);
		
	КонецЦикла;
	
	Возврат ТаблицаЗначенийКОбработке;
	
КонецФункции

// Возвращает таблицу значений с примененным к ней отбором по условию НЕ
//
// Параметры:
//	ТаблицаЗначений - ТаблицаЗначений - обрабатываемая таблица
//	СтруктураОтборов - Структура - применяемые отборы
//
// Возвращаемое значение:
//	ТаблицаЗначений - обработанная таблица
//
Функция ПрименитьКТаблицеУсловиеНЕ(ТаблицаЗначений, СтруктураОтборов) Экспорт
	
	ТаблицаЗначенийКОбработке = ТаблицаЗначений.Скопировать();
	
	СтрокиКУдалению = ТаблицаЗначенийКОбработке.НайтиСтроки(СтруктураОтборов);
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл 
		ТаблицаЗначенийКОбработке.Удалить(СтрокаКУдалению);
		
	КонецЦикла;
	
	Возврат ТаблицаЗначенийКОбработке;
	
КонецФункции

// Возвращает результат проверки шаблона расчета целевого показателя
//
// Параметры:
//	МакетСКДПоказателя - СхемаКомпоновкиДанных - проверяемый шаблон расчета
//
// Возвращаемое значение:
//	Структура - содержит признак корректности шаблона и описание ошибки
//			МакетКорректный - Булево
//			ОписаниеОшибок - Массив - обнаруженные ошибки
//
Функция ПроверитьСхемуКомпоновкиДанных(МакетСКДПоказателя) Экспорт
	
	РезультатПроверки = Новый Структура("МакетКорректный, ОписаниеОшибок", Истина, Неопределено);
	
	МассивОшибок = Новый Массив;
	
	// Проверим доступность обязательных наборов данных
	
	Если МакетСКДПоказателя.НаборыДанных.Найти("ТаблицаПериодов") = Неопределено Тогда
		МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя не содержит обязательного набора данных ""ТаблицаПериодов"". 
										|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
									
	Если МакетСКДПоказателя.НаборыДанных.Найти("ЦелевыеЗначения") = Неопределено Тогда
		МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя не содержит обязательного набора данных ""ЦелевыеЗначения"". 
										|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
									
	Если МакетСКДПоказателя.НаборыДанных.Найти("ДанныеДляАнализа") = Неопределено Тогда
		МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя не содержит обязательного набора данных ""ДанныеДляАнализа"". 
										|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
	
	// Проверим корректность связей наборов данных
	
	ТаблицаПериодовЕсть = Ложь;
	ЦелевыеЗначенияЕсть = Ложь;
	ДанныеДляАнализаЕсть = Ложь;
	Если МакетСКДПоказателя.СвязиНаборовДанных.Количество() = 2 Тогда
		Для Каждого СвязьНаборовДанных Из МакетСКДПоказателя.СвязиНаборовДанных Цикл 
			Если Найти(СвязьНаборовДанных.ВыражениеИсточник, "ТаблицаПериодов")
				И Найти(СвязьНаборовДанных.ВыражениеПриемник, "ЦелевыеЗначения") Тогда
					ТаблицаПериодовЕсть = Истина;
					ЦелевыеЗначенияЕсть = Истина;
				
			ИначеЕсли Найти(СвязьНаборовДанных.ВыражениеИсточник, "ТаблицаПериодов")
				И Найти(СвязьНаборовДанных.ВыражениеПриемник, "ЦелевыеЗначения") Тогда
					ТаблицаПериодовЕсть = Истина;
					ДанныеДляАнализаЕсть = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаПериодовЕсть И НЕ ЦелевыеЗначенияЕсть ИЛИ МакетСКДПоказателя.СвязиНаборовДанных.Количество() < 2 Тогда
		МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя не содержит связи между таблицей периодов и целевых значений. 
										|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
	
	Если ТаблицаПериодовЕсть И НЕ ДанныеДляАнализаЕсть ИЛИ МакетСКДПоказателя.СвязиНаборовДанных.Количество() < 2 Тогда
		МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя не содержит связи между таблицей периодов и данными для анализа. 
										|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
		
	// Проверим, что вариант настроек один
	Если МакетСКДПоказателя.ВариантыНастроек.Количество() <> 1 Тогда
		МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя должен содержать один вариант настроек. 
										|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
	
	URLСхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(МакетСКДПоказателя, Новый УникальныйИдентификатор());
	НовыйИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемаКомпоновкиДанных);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(НовыйИсточникДоступныхНастроек);
		
	// Проверим, что служебные поля доступны
	СлужебныеРесурсы = Справочники.СтруктураЦелей.СлужебныеПоляЗначенияАнализа();
	СлужебныеИзмерения = Справочники.СтруктураЦелей.СлужебныеПоляОбъектаАнализа();
	
	Для Каждого СлужебныйРесурс Из СлужебныеРесурсы Цикл 
		ИскомоеСлужебноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(СлужебныйРесурс));
		Если ИскомоеСлужебноеПоле = Неопределено Тогда
			МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя должен содержать служебное поле """ + СлужебныйРесурс + """. 
											|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
			РезультатПроверки.МакетКорректный = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИскомоеСлужебноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных("Период"));
	Если ИскомоеСлужебноеПоле = Неопределено Тогда
		МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя должен содержать служебное поле ""Период"". 
										|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
		
	// Проверим, что доступны измерения кроме служебных
	КоличествоНеслужебныхИзмерений = 0;
	Для Каждого ДоступноеПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл 
		Если НЕ ДоступноеПолеВыбора.Ресурс 
			И НЕ ДоступноеПолеВыбора.Папка 
			И НЕ ДоступноеПолеВыбора.Таблица 
			И СлужебныеИзмерения.Найти(Строка(ДоступноеПолеВыбора.Поле)) = Неопределено Тогда
			КоличествоНеслужебныхИзмерений = КоличествоНеслужебныхИзмерений + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоНеслужебныхИзмерений < 1 Тогда
		МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя должен содержать неслужебные измерения. 
										|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
		
	КоличествоНеслужебныхРесурсов = 0;
	Для Каждого ДоступноеПолеВыбора Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл 
		Если ДоступноеПолеВыбора.Ресурс 
			И НЕ ДоступноеПолеВыбора.Папка 
			И НЕ ДоступноеПолеВыбора.Таблица 
			И СлужебныеРесурсы.Найти(Строка(ДоступноеПолеВыбора.Поле)) = Неопределено Тогда
			КоличествоНеслужебныхРесурсов = КоличествоНеслужебныхРесурсов + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоНеслужебныхРесурсов < 1 Тогда
		МассивОшибок.Добавить(НСтр("ru='Шаблон расчета целевого показателя должен содержать неслужебные ресурсы. 
										|Необходимо настроить шаблон расчета целевого показателя в соответствии с требованиями.'"));
		РезультатПроверки.МакетКорректный = Ложь;
		
	КонецЕсли;
		
	// Запишем ошибки в результат
	
	РезультатПроверки.ОписаниеОшибок = МассивОшибок;
	
	Возврат РезультатПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Прогнозирование.

// Функция рассчитывает прогноз на основании переданной таблицы значений и дополняет ее при необходимости
//
// Параметры:
//   КолонкаХ       - строка, наименование колонки для данных по оси Х.
//   КолонкаУ       - строка, наименование колонки для данных по оси У.
//   Базис          - Структура:
//                    ДатаНачала, дата - базовая дата отчета.
//					  Период    , ТипЕдиницыИнтервалаВремениАнализаДанных - Используемый период для расчета.
//                    КоличествоПериодов, Число - количество периодов между соседними значениями дат по оси Х.
//   ГлубинаАнализа - смещение по оси Х, в пределах которого рассчитывается тренд.
//   Смещение       - смещение по оси Х, в пределах которого рассчитываются экстраполируемые значения.
//   ДополнятьТаблицу - булево, Истина - в таблицу значений добавляются экстраполированные значения.
// Возвращаемое значение:
//
//   Структура     - Значение      - Число,  экстраполированное значение для смещения по оси Х, или неопределено, при ошибке в расчете.
//                   Адекватность  - Число,  значение коэффициента отклонения.
//                   СпособРасчета - Строка, содержит наименование метода расчета.
//
Функция СформироватьПрогнозныеЗначенияИсточникаДанных(ИсточникДанных, КолонкаХ, КолонкаУ, КолонкаПризнак = Неопределено, Базис, ГлубинаАнализа, Смещение, ДополнятьТаблицу = Ложь, Прогноз = Ложь)
	
	СтруктураНеобходимостиРасчетов = Новый Структура("Линейная, Логарифмическая, Квадратичная, Экспоненциальная"
	, Истина
	, Истина
	, Истина
	, Истина);
	ПозицияБазиса = 0;
	
	СумФакт=0;
	СумЛогФакт=0;
	СумФактАргумент=0;
	СумФактЛогАргумент=0;
	СумЛогФактАргумент=0;
	СумФактАргумент2=0;
	СумАргумент=0;
	СумЛогАргумент=0;
	СумАргумент2=0;
	СумЛогАргумент2=0;
	СумАргумент3=0;
	СумАргумент4=0;
	ЗнакОткл=1;
	
	ТаблицаЗначений = ИсточникДанных.Данные;
	ДатаПослФактЗначения = ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения;
	
	Если ТаблицаЗначений.Найти(Базис.ДатаНачала, КолонкаХ) = Неопределено Тогда
		Возврат Новый Структура("Значение, Адекватность, СпособРасчета, Пустой", 0, 0, Неопределено, Истина);
	КонецЕсли;
	
	// Всегда подается с непрерывным интервалом
	РабочаяТаблица = ТаблицаСНепрерывнымИнтервалом(ТаблицаЗначений, Базис, ГлубинаАнализа, КолонкаХ, КолонкаУ, ПозицияБазиса); 
	
	Если РабочаяТаблица = Неопределено Тогда
		Возврат Новый Структура("Значение, Адекватность, СпособРасчета, Пустой", 0, 0, Неопределено, Истина);
	КонецЕсли;
	
	РабочаяТаблица.Сортировать("ПорядковыйНомер");
	
	Для Каждого Строка Из РабочаяТаблица Цикл
		
		НомерСтроки = Строка.ПорядковыйНомер;
		
		НомерПериода=0;
		
		Факт=Строка.Значение;
		
		
		СумФакт=СумФакт+Факт;
		СумЛогФакт=СумЛогФакт+?(Факт>0,Log(Факт),0);
		СумФактАргумент=СумФактАргумент+Факт*НомерСтроки;
		СумФактЛогАргумент=СумФактЛогАргумент+Факт*Log(НомерСтроки);
		СумЛогФактАргумент=СумЛогФактАргумент+?(Факт>0,Log(Факт),0)*НомерСтроки;
		СумФактАргумент2=СумФактАргумент2+Факт*Pow(НомерСтроки,2);
		СумАргумент=СумАргумент+НомерСтроки;
		СумЛогАргумент=СумЛогАргумент+Log(НомерСтроки);
		СумАргумент2=СумАргумент2+Pow(НомерСтроки,2);
		СумЛогАргумент2=СумЛогАргумент2+Pow(Log(НомерСтроки),2);
		СумАргумент3=СумАргумент3+Pow(НомерСтроки,3);
		СумАргумент4=СумАргумент4+Pow(НомерСтроки,4);
		
	КонецЦикла; 
	КолФакт  = РабочаяТаблица.Количество();
	СредФакт = ?(КолФакт>0,СумФакт/КолФакт,0);
	
	// Формулы Крамера для линейной аппроксимации
	Если СтруктураНеобходимостиРасчетов.Линейная Тогда
		ОпределительЛинПолный = КолФакт*СумАргумент2-Pow(СумАргумент,2);
		ОпределительЛин1      = СумФакт*СумАргумент2-СумАргумент*СумФактАргумент;
		ОпределительЛин2      = КолФакт*СумФактАргумент-СумФакт*СумАргумент;
		
		Если ОпределительЛинПолный=0 тогда
			СтруктураНеобходимостиРасчетов.Линейная = Ложь;
		Иначе
			КоэффициентЛинейной1=ОпределительЛин1/ОпределительЛинПолный;
			КоэффициентЛинейной2=ОпределительЛин2/ОпределительЛинПолный;
		КонецЕсли; 
	КонецЕсли;
	// Формулы Крамера для экспоненциальной аппроксимации
	Если СтруктураНеобходимостиРасчетов.Экспоненциальная Тогда
		ОпределительЭкспПолный = КолФакт*СумАргумент2-Pow(СумАргумент,2);
		ОпределительЭксп1      = СумЛогФакт*СумАргумент2-СумАргумент*СумЛогФактАргумент;
		ОпределительЭксп2      = КолФакт*СумЛогФактАргумент-СумЛогФакт*СумАргумент;
		
		Если ОпределительЭкспПолный=0 тогда
			СтруктураНеобходимостиРасчетов.Экспоненциальная = Ложь;
		Иначе
			КоэффициентЭкспоненциальной1=Exp(ОпределительЭксп1/ОпределительЭкспПолный);
			КоэффициентЭкспоненциальной2=ОпределительЭксп2/ОпределительЭкспПолный;
		КонецЕсли;
	КонецЕсли;
	// Формулы Крамера для логарифмической аппроксимации
	Если СтруктураНеобходимостиРасчетов.Логарифмическая Тогда
		ОпределительЛогПолный = КолФакт*СумЛогАргумент2-Pow(СумЛогАргумент,2);
		ОпределительЛог1      = СумФакт*СумЛогАргумент2-СумЛогАргумент*СумФактЛогАргумент;
		ОпределительЛог2      = КолФакт*СумФактЛогАргумент-СумФакт*СумЛогАргумент;
		
		Если ОпределительЛогПолный=0 тогда
			СтруктураНеобходимостиРасчетов.Логарифмическая = Ложь;
		Иначе
			КоэффициентЛогарифмической1=ОпределительЛог1/ОпределительЛогПолный;
			КоэффициентЛогарифмической2=ОпределительЛог2/ОпределительЛогПолный;
		КонецЕсли;
		
	КонецЕсли;
	// Формулы Крамера для квадратичной аппроксимации
	Если СтруктураНеобходимостиРасчетов.Квадратичная Тогда
		ОпределительКвПолный =КолФакт*СумАргумент2*СумАргумент4+2*СумАргумент*СумАргумент2*СумАргумент3-
		Pow(СумАргумент2,3)-КолФакт*Pow(СумАргумент3,2)-Pow(СумАргумент,2)*СумАргумент4;
		ОпределительКв1      =СумФакт*СумАргумент2*СумАргумент4+СумАргумент*СумАргумент3*СумФактАргумент2+СумФактАргумент*СумАргумент2*СумАргумент3-
		Pow(СумАргумент2,2)*СумФактАргумент2-СумФактАргумент*СумАргумент*СумАргумент4-Pow(СумАргумент3,2)*СумФакт;
		ОпределительКв2      =КолФакт*СумФактАргумент*СумАргумент4+СумФакт*СумАргумент3*СумАргумент2+СумАргумент*СумФактАргумент2*СумАргумент2-
		Pow(СумАргумент2,2)*СумФактАргумент-СумФакт*СумАргумент*СумАргумент4-КолФакт*СумФактАргумент2*СумАргумент3;
		ОпределительКв3      =КолФакт*СумАргумент2*СумФактАргумент2+СумАргумент*СумФактАргумент*СумАргумент2+СумАргумент*СумАргумент3*СумФакт-
		Pow(СумАргумент2,2)*СумФакт-Pow(СумАргумент,2)*СумФактАргумент2-КолФакт*СумАргумент3*СумФактАргумент;
		
		Если ОпределительКвПолный=0 тогда
			СтруктураНеобходимостиРасчетов.Квадратичная = Ложь;
		Иначе
			КоэффициентКвадратичной1=ОпределительКв1/ОпределительКвПолный;
			КоэффициентКвадратичной2=ОпределительКв2/ОпределительКвПолный;
			КоэффициентКвадратичной3=ОпределительКв3/ОпределительКвПолный;
		КонецЕсли;
		
	КонецЕсли;
	
	СумОстЛинейной=0;
	СумОстКвадратичной=0;
	СумОстЭкспоненциальной=0;
	СумОстЛогарифмической=0;
	СумПолн=0;
	
	Для Каждого Строка Из РабочаяТаблица Цикл
		
		Факт 		= Строка.Значение;
		НомерСтроки = Строка.ПорядковыйНомер;
		
		Если СтруктураНеобходимостиРасчетов.Линейная Тогда
			РасчетПоЛинейной=КоэффициентЛинейной1+КоэффициентЛинейной2*НомерСтроки;
			СумОстЛинейной=СумОстЛинейной+Pow((Факт-РасчетПоЛинейной),2);
		КонецЕсли;
		
		Если СтруктураНеобходимостиРасчетов.Квадратичная Тогда
			РасчетПоКвадратичной=КоэффициентКвадратичной1+КоэффициентКвадратичной2*НомерСтроки+КоэффициентКвадратичной3*Pow(НомерСтроки,2);
			СумОстКвадратичной=СумОстКвадратичной+Pow((Факт-РасчетПоКвадратичной),2);
		КонецЕсли;
		
		Если СтруктураНеобходимостиРасчетов.Экспоненциальная Тогда
			РасчетПоЭкспоненциальной=КоэффициентЭкспоненциальной1*Exp(КоэффициентЭкспоненциальной2*НомерСтроки);
			СумОстЭкспоненциальной=СумОстЭкспоненциальной+Pow((Факт-РасчетПоЭкспоненциальной),2);
		КонецЕсли;
		
		Если СтруктураНеобходимостиРасчетов.Логарифмическая Тогда
			РасчетПоЛогарифмической=КоэффициентЛогарифмической1+КоэффициентЛогарифмической2*Log(НомерСтроки);
			СумОстЛогарифмической=СумОстЛогарифмической+Pow((Факт-РасчетПоЛогарифмической),2);
		КонецЕсли;
		
		СумПолн=СумПолн+Pow((СредФакт-Факт),2);
		
	КонецЦикла;
	
	МаксКоэффициент   = Неопределено;
	ВыбранноеЗначение = Неопределено;
	
	Если СтруктураНеобходимостиРасчетов.Линейная Тогда
		КоэффДетЛинейной=?(СумПолн<>0,1-СумОстЛинейной/СумПолн,1);
		Если МаксКоэффициент = Неопределено Тогда
			ВыбранноеЗначение = "Линейная";
			МаксКоэффициент   = КоэффДетЛинейной;
		ИначеЕсли МаксКоэффициент < КоэффДетЛинейной Тогда
			ВыбранноеЗначение = "Линейная";
			МаксКоэффициент   = КоэффДетЛинейной;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНеобходимостиРасчетов.Квадратичная Тогда
		
		КоэффДетКвадратичной=?(СумПолн<>0,1-СумОстКвадратичной/СумПолн,0);
		Если МаксКоэффициент = Неопределено Тогда
			ВыбранноеЗначение = "Квадратичная";
			МаксКоэффициент   = КоэффДетКвадратичной;
		ИначеЕсли МаксКоэффициент < КоэффДетКвадратичной Тогда
			ВыбранноеЗначение = "Квадратичная";
			МаксКоэффициент   = КоэффДетКвадратичной;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНеобходимостиРасчетов.Логарифмическая Тогда
		
		КоэффДетЛогарифмической=?(СумПолн<>0,1-СумОстЛогарифмической/СумПолн,0);
		Если МаксКоэффициент = Неопределено Тогда
			ВыбранноеЗначение = "Логарифмическая";
			МаксКоэффициент   = КоэффДетЛогарифмической;
		ИначеЕсли МаксКоэффициент < КоэффДетЛогарифмической Тогда
			ВыбранноеЗначение = "Логарифмическая";
			МаксКоэффициент   = КоэффДетЛогарифмической;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНеобходимостиРасчетов.Экспоненциальная Тогда
		
		КоэффДетЭкспоненциальной=?(СумПолн<>0,1-СумОстЭкспоненциальной/СумПолн,0);
		
		Если МаксКоэффициент = Неопределено Тогда
			ВыбранноеЗначение = "Экспоненциальная";
			МаксКоэффициент   = КоэффДетЭкспоненциальной;
		ИначеЕсли МаксКоэффициент < КоэффДетЭкспоненциальной Тогда
			ВыбранноеЗначение = "Экспоненциальная";
			МаксКоэффициент   = КоэффДетЭкспоненциальной;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат Новый Структура("Значение, Адекватность, СпособРасчета, Пустой", 0, 0, Неопределено, Истина);
	КонецЕсли;
	
	Если ДополнятьТаблицу Тогда
		Если Прогноз Тогда
			КолонкаПрогноза = ТаблицаЗначений.Колонки.Добавить("Прогноз", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3), "Прогноз");
		Иначе
			КолонкаТренда = ТаблицаЗначений.Колонки.Добавить("Тренд", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3), "Тренд");
		КонецЕсли;
		КолонкаПризнака = ТаблицаЗначений.Колонки.Добавить(КолонкаПризнак, ПолучитьОписаниеТиповБулево(), КолонкаПризнак);
	КонецЕсли;
	
	БазовоеЗначение = ПолучитьБазовоеЗначениеДляДиаграмм();
	
	Для Инд = ?(ДополнятьТаблицу, 0, Смещение) По Смещение Цикл
		
		Аргумент = ПозицияБазиса + Инд;
		
		Если Не Инд = 0 И ВыбранноеЗначение = "Линейная" тогда
			
			// Линейная аппроксимация
			
			СуммаРасч    = КоэффициентЛинейной1+КоэффициентЛинейной2*Аргумент;
			Адекватность = КоэффДетЛинейной;
		ИначеЕсли Не Инд = 0 И ВыбранноеЗначение = "Квадратичная" тогда
			
			// Квадратичная аппроксимация
			
			СуммаРасч=КоэффициентКвадратичной1+КоэффициентКвадратичной2*Аргумент+КоэффициентКвадратичной3*Pow(Аргумент,2); 
			Адекватность = КоэффДетКвадратичной;
			
		ИначеЕсли Не Инд = 0 И ВыбранноеЗначение = "Экспоненциальная" тогда
			
			// Экспоненциальная аппроксимация
			
			СуммаРасч=КоэффициентЭкспоненциальной1*Exp(КоэффициентЭкспоненциальной2*Аргумент); 
			Адекватность = КоэффДетЭкспоненциальной;
			
		ИначеЕсли Не Инд = 0 И ВыбранноеЗначение = "Логарифмическая" тогда
			
			// Логарифмическая аппроксимация
			
			СуммаРасч=КоэффициентЛогарифмической1+КоэффициентЛогарифмической2*Log(Аргумент);
			Адекватность = КоэффДетЛогарифмической;
			
		КонецЕсли;
		
		Если ДополнятьТаблицу Тогда
			ТекДата = ДатаСоСмещением(Базис.ДатаНачала, Базис.Период, Инд * Базис.КоличествоПериодов);
			
			СтрокаССуществующимПериодом = ТаблицаЗначений.Найти(ТекДата, КолонкаХ);
			
			Если СтрокаССуществующимПериодом = Неопределено Тогда
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока[КолонкаХ] = ТекДата;
				НоваяСтрока[КолонкаУ] = БазовоеЗначение;
				
			Иначе 
				НоваяСтрока = СтрокаССуществующимПериодом;
				Если ТекДата > ДатаПослФактЗначения Тогда
					НоваяСтрока[КолонкаУ] = БазовоеЗначение;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Прогноз Тогда
				Если ТекДата = ДатаПослФактЗначения Тогда
					НоваяСтрока[КолонкаПрогноза.Имя] = НоваяСтрока[КолонкаУ];
					
				Иначе
					НоваяСтрока[КолонкаПрогноза.Имя] = СуммаРасч;
					
				КонецЕсли;
				
			Иначе 
				НоваяСтрока[КолонкаТренда.Имя] = СуммаРасч;
				
			КонецЕсли;
			
			Если КолонкаПризнак <> Неопределено Тогда
				НоваяСтрока[КолонкаПризнак] = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДополнятьТаблицу Тогда 
		
		// Заполним базовым значением "пустых" точек трендов и прогнозов
		ОтборНеПризнак = Новый Структура("Признак", Ложь);
		СтрокиНеПризнак = ТаблицаЗначений.НайтиСтроки(ОтборНеПризнак);
		Для Каждого СтрокаНеПризнак Из СтрокиНеПризнак Цикл 
			
			СтрокаНеПризнак[?(Прогноз, КолонкаПрогноза.Имя, КолонкаТренда.Имя)] = БазовоеЗначение;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Новый Структура("Значение, Адекватность, СпособРасчета, Пустой", СуммаРасч, Адекватность, ВыбранноеЗначение, Ложь);
	
КонецФункции

// Формирует таблицу, в которой строки идут с заданным шагом по датам
//
// Параметры:
//	ТаблицаЗначений  - исходные данные
//	КолонкаХ		 - строка, наименование колонки для данных по оси Х.
//	КолонкаУ		 - строка, наименование колонки для данных по оси У.
//	Базис			 - Структура:
//						ДатаНачала - Дата - базовая дата отчета.
//						Период, ТипЕдиницыИнтервалаВремениАнализаДанных - используемый период для расчета.
//						КоличествоПериодов - Число - количество периодов между соседними значениями дат по оси Х.
//	ГлубинаАнализа	 - Число - смещение по оси Х, в пределах которого рассчитывается тренд.
//	Смещение		 - Число - смещение по оси Х, в пределах которого рассчитываются экстраполируемые значения.
//	ДополнятьТаблицу - Булево - Истина - в таблицу значений добавляются экстраполированные значения.
//
// Возвращаемое значение:
//	ТаблицаЗначений - если удалось обработать
//	Неопределено - если данных недостаточно для экстраполяции
//
Функция ТаблицаСНепрерывнымИнтервалом(Знач ТаблицаЗначений, Базис, ГлубинаАнализа, КолонкаХ, КолонкаУ, ПозицияБазиса)
	
	РабочаяТаблица = Новый ТаблицаЗначений;
	
	РабочаяТаблица.Колонки.Добавить("ПорядковыйНомер", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(5, 0));
	РабочаяТаблица.Колонки.Добавить("Дата", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	РабочаяТаблица.Колонки.Добавить("Значение", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ПоследнееЗаполненное		= Неопределено;
	КоличествоЗаполненныхДанных = 0;
	ПорядковыйНомер				= 1;
	
	Для Инд = 1 По ГлубинаАнализа Цикл
		ТекДата		= ДатаСоСмещением(Базис.ДатаНачала, Базис.Период, (Инд - ГлубинаАнализа) * Базис.КоличествоПериодов);
		ФактСтрока	= ТаблицаЗначений.Найти(ТекДата, КолонкаХ);
		
		Если ФактСтрока = Неопределено Тогда
			
			Если ПоследнееЗаполненное <> Неопределено Тогда
				НоваяСтрока = РабочаяТаблица.Добавить();       	
				НоваяСтрока.ПорядковыйНомер = ПорядковыйНомер;
				НоваяСтрока.Дата            = ТекДата;
				НоваяСтрока.Значение        = 0;
				ПорядковыйНомер             = ПорядковыйНомер + 1;
			КонецЕсли;
			
		Иначе
			НоваяСтрока = РабочаяТаблица.Добавить();
			НоваяСтрока.ПорядковыйНомер = ПорядковыйНомер;
			НоваяСтрока.Дата			= ТекДата;
			НоваяСтрока.Значение		= ФактСтрока[КолонкаУ];
			КоличествоЗаполненныхДанных = КоличествоЗаполненныхДанных + 1;
			Если ПоследнееЗаполненное <> Неопределено И ПоследнееЗаполненное < ПорядковыйНомер - 1 Тогда
				НачЗначение = РабочаяТаблица.Найти(ПоследнееЗаполненное, "ПорядковыйНомер").Значение;
				КонЗначение = НоваяСтрока.Значение;
				Коэффициент = (КонЗначение - НачЗначение) / (ПорядковыйНомер - ПоследнееЗаполненное + 1);
				
				Для Инд2 = ПоследнееЗаполненное + 1 По ПорядковыйНомер - 1 Цикл
					ПустойПериод		  = РабочаяТаблица.Найти(Инд2, "ПорядковыйНомер");
					ПустойПериод.Значение = НачЗначение + Коэффициент * Инд2;
				КонецЦикла;
				
			КонецЕсли;
			
			ПоследнееЗаполненное = ПорядковыйНомер;
			ПорядковыйНомер = ПорядковыйНомер + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоЗаполненныхДанных < 2 Тогда 
		#Если Клиент Тогда
			Сообщить("Недостаточно данных для экстраполяции");
		#КонецЕсли
		Возврат Неопределено;
		
	Иначе
		ПозицияБазиса = ПорядковыйНомер - 1;
		Возврат РабочаяТаблица;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Зоны анализа значений целевых показателей.

// Возвращает зону анализа источника данных
//
// Параметры:
//	ИсточникДанных - Структура - специально подготовленная структура с расчетными данными, характеристиками и прогнозом
//	ВидЦелевогоЗначения - Перечисление - диапазон или значение
//	ТочностьРасчетаДробнойЧасти - Число - целое число, устанавливающее степень округления при расчетах
//
// Возвращаемое значение:
//	ЗонаАнализа - Структура - содержит указание на зону анализа и характер изменений
//					Факт - Число - зона, в которой находится последнее фактическое значение 
//									(матрица в макете справочника "Показатели" - "МатрицаСостоянийПоказателей")
//					ФактическийТренд - Строка - характер изменений показателя "Рост", "Падение", "БезИзменений"
//
Функция ЗонаАнализаЗначения(ИсточникДанных, Тренд, ВидЦелевогоЗначения, ТочностьРасчетаДробнойЧасти)
	Перем ЗонаАнализа;
	
	ЗонаАнализа = Новый Структура("НомерЗоны, ФактическийТренд", Неопределено, Неопределено);
	ВидыЦелевыхЗначений = Перечисления.ВидыЦелевыхЗначенийВариантовАнализа;
	
	ВидыТрендов = Перечисления.ВидыЦелевыхТрендовПоказателей;
	ПоследнееЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение;
	
	ПредпоследнееЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ПредпоследнееЗначение;
	
	Если НЕ ИсточникДанных.РасчетыАктуальны Тогда 
		ЗонаАнализаНомерЗоны = 500;
		
	ИначеЕсли НЕ ИсточникДанных.ОшибкаРасчета И (ВидЦелевогоЗначения = Неопределено ИЛИ ИсточникДанных.Пустой) Тогда
		ЗонаАнализаНомерЗоны = 0;
		
	ИначеЕсли ИсточникДанных.ОшибкаРасчета Тогда 
		ЗонаАнализаНомерЗоны = 100;
		
	Иначе 
		// Получим зону анализа факта
		Если ВидЦелевогоЗначения = ВидыЦелевыхЗначений.Значение Тогда
			ЦелевоеЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение;		
			ПриведенноеГраничноеПозитивноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение;		
			ПриведенноеГраничноеНегативноеОтклонение  = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение;		
			
			Если Тренд = ВидыТрендов.Максимизация Тогда
				Если ПоследнееЗначение > ПриведенноеГраничноеПозитивноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 1;
				ИначеЕсли ПоследнееЗначение = ПриведенноеГраничноеПозитивноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 2;
				ИначеЕсли ПоследнееЗначение < ПриведенноеГраничноеПозитивноеОтклонение
					И ПоследнееЗначение > ЦелевоеЗначение Тогда
					ЗонаАнализаНомерЗоны = 3;
				ИначеЕсли ПоследнееЗначение = ЦелевоеЗначение Тогда
					ЗонаАнализаНомерЗоны = 4;
				ИначеЕсли ПоследнееЗначение < ЦелевоеЗначение
					И ПоследнееЗначение > ПриведенноеГраничноеНегативноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 5;
				ИначеЕсли ПоследнееЗначение = ПриведенноеГраничноеНегативноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 6;
				ИначеЕсли ПоследнееЗначение < ПриведенноеГраничноеНегативноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 7;
				КонецЕсли;
				
			ИначеЕсли Тренд = ВидыТрендов.Минимизация Тогда
				Если ПоследнееЗначение > ПриведенноеГраничноеНегативноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 1;
				ИначеЕсли ПоследнееЗначение = ПриведенноеГраничноеНегативноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 2;
				ИначеЕсли ПоследнееЗначение < ПриведенноеГраничноеНегативноеОтклонение
					И ПоследнееЗначение > ЦелевоеЗначение Тогда
					ЗонаАнализаНомерЗоны = 3;
				ИначеЕсли ПоследнееЗначение = ЦелевоеЗначение Тогда
					ЗонаАнализаНомерЗоны = 4;
				ИначеЕсли ПоследнееЗначение < ЦелевоеЗначение
					И ПоследнееЗначение > ПриведенноеГраничноеПозитивноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 5;
				ИначеЕсли ПоследнееЗначение = ПриведенноеГраничноеПозитивноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 6;
				ИначеЕсли ПоследнееЗначение < ПриведенноеГраничноеПозитивноеОтклонение Тогда
					ЗонаАнализаНомерЗоны = 7;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ВидЦелевогоЗначения = ВидыЦелевыхЗначений.Диапазон Тогда
			ЦелевойДиапазонМаксимум = ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевойДиапазонМаксимум;		
			ЦелевойДиапазонМинимум = ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевойДиапазонМинимум;		
			ПриведенноеГраничноеПозитивноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение;		
			ПриведенноеГраничноеНегативноеОтклонение  = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение;		
			
			Если ПоследнееЗначение > ПриведенноеГраничноеПозитивноеОтклонение Тогда
				ЗонаАнализаНомерЗоны = 1;
			ИначеЕсли ПоследнееЗначение = ПриведенноеГраничноеПозитивноеОтклонение Тогда
				ЗонаАнализаНомерЗоны = 2;
			ИначеЕсли ПоследнееЗначение < ПриведенноеГраничноеПозитивноеОтклонение
				И ПоследнееЗначение > ЦелевойДиапазонМаксимум Тогда
				ЗонаАнализаНомерЗоны = 3;
			ИначеЕсли ПоследнееЗначение = ЦелевойДиапазонМаксимум Тогда
				ЗонаАнализаНомерЗоны = 4;
			ИначеЕсли ПоследнееЗначение < ЦелевойДиапазонМаксимум
				И ПоследнееЗначение > ЦелевойДиапазонМинимум Тогда
				ЗонаАнализаНомерЗоны = 5;
			ИначеЕсли ПоследнееЗначение = ЦелевойДиапазонМинимум Тогда
				ЗонаАнализаНомерЗоны = 6;
			ИначеЕсли ПоследнееЗначение < ЦелевойДиапазонМинимум
				И ПоследнееЗначение > ПриведенноеГраничноеНегативноеОтклонение Тогда
				ЗонаАнализаНомерЗоны = 7;
			ИначеЕсли ПоследнееЗначение = ПриведенноеГраничноеНегативноеОтклонение Тогда
				ЗонаАнализаНомерЗоны = 8;
			ИначеЕсли ПоследнееЗначение < ПриведенноеГраничноеНегативноеОтклонение Тогда
				ЗонаАнализаНомерЗоны = 9;
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗонаАнализа.НомерЗоны = ЗонаАнализаНомерЗоны;
	
	// Получим реальный тренд
	// Если вариант анализа сравнивается с прошлыми периодами, то трендом является изменение по сравнению с прошлым периодом
	// Если сравнение не указано, то трендом является изменение в указанном периоде
	Если НЕ ИсточникДанных.Пустой И ИсточникДанных.РасчетыАктуальны Тогда
		Если ИсточникДанных.Свойство("ДанныеСравнения") И НЕ ИсточникДанных.ДанныеСравнения = Неопределено Тогда
			РазницаМеждуЗначениямиФакта = Окр(ПоследнееЗначение - ИсточникДанных.ДанныеСравнения.ПоследнееФактическоеЗначение, ТочностьРасчетаДробнойЧасти);
		Иначе
			РазницаМеждуЗначениямиФакта = Окр(ПоследнееЗначение - ПредпоследнееЗначение, ТочностьРасчетаДробнойЧасти);
		КонецЕсли;
		
		Если РазницаМеждуЗначениямиФакта > 0 Тогда
			ФактическийТренд = "Рост";
		ИначеЕсли РазницаМеждуЗначениямиФакта = 0 Тогда
			ФактическийТренд = "БезИзменений";
		ИначеЕсли РазницаМеждуЗначениямиФакта < 0 Тогда
			ФактическийТренд = "Падение";
		КонецЕсли;
	Иначе
		ФактическийТренд = "Неопределен";
	КонецЕсли;
	
	ЗонаАнализа.ФактическийТренд = ФактическийТренд;
	
	Возврат ЗонаАнализа;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с периодами и датами.

Функция ДатаСоСмещением(Дата, Периодичность, ЧислоПериодов)
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		
		Возврат ДобавитьМесяц(Дата, 12 * ЧислоПериодов);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		
		Возврат ДобавитьМесяц(Дата, 6 * ЧислоПериодов);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		
		Возврат ДобавитьМесяц(Дата, 3 * ЧислоПериодов);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		
		Возврат ДобавитьМесяц(Дата, ЧислоПериодов);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		
		Возврат ДатаСоСмещениемДляДекады(Дата, ЧислоПериодов);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		
		Возврат НачалоНедели(Дата + 3600 * 24 * 7 * ЧислоПериодов);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		
		Возврат Дата  + 3600 * 24 * ЧислоПериодов;
		
	Иначе 
		Возврат Дата;
	КонецЕсли;
	
КонецФункции

Функция ДатаСоСмещениемДляДекады(Знач РасчетнаяДата, Знач Смещение)
	
	// анализируем
	ГодДатыНачала						= Год(РасчетнаяДата);
	МесяцДатыНачала						= Месяц(РасчетнаяДата);
	ДеньДатыНачала						= День(РасчетнаяДата);
	ДекадаДатыНачала					= Цел((ДеньДатыНачала - 1) / 10) + 1;
	ДекадаДатыНачала					= ?(ДекадаДатыНачала = 4, 3, ДекадаДатыНачала);
	НомерДекадыНЭ						= ГодДатыНачала * 36 + (МесяцДатыНачала - 1) * 3 + (ДекадаДатыНачала - 1);
	
	// изменяем
	НомерДекадыНЭ						= НомерДекадыНЭ + Смещение;
	
	// синтезируем
	ГодДатыНачалаОтнПериода				= Цел((НомерДекадыНЭ)/ 36);
	ДекадаВГоду							= НомерДекадыНЭ % 36;
	МесяцВГодуДатыНачалаОтнПериода		= Цел(ДекадаВГоду / 3) + 1;
	ДекадаВМесяце						= ДекадаВГоду % 3;
	ДеньВМесяцеДатыНачалаОтнПериода		= ДекадаВМесяце * 10 + 1;
	
	Возврат Дата(ГодДатыНачалаОтнПериода, МесяцВГодуДатыНачалаОтнПериода, ДеньВМесяцеДатыНачалаОтнПериода);
	
КонецФункции

// Возвращает таблицу значений, дополненную невошедшими датами 
// для последующего использования в качестве объекта СКД
//
// Параметры
//  НачалоПериода 	- Дата - начало периода
//  КонецПериода	- Дата - окончание периода
//  Периодичность	- Строка - принимает значения "ДЕНЬ,НЕДЕЛЯ,ДЕКАДА,МЕСЯЦ,КВАРТАЛ,ПОЛУГОДИЕ,ГОД"
//
// Возвращаемое значение:
//   ТаблицаЗначений	 - таблица значений, содержащая колонку "Период" и значения периодов
//
Функция ДополнитьТаблицуПериодов(Знач ТаблицаПериодов, НачалоПериода, КонецПериода, Периодичность) 
	
	Периодичности = Перечисления.Периодичность;
	
	РазностьДат = ОбщегоНазначенияУТ.РазностьДат(НачалоПериода, КонецПериода, Периодичность);
	
	Счетчик = 0;
	Пока Счетчик <= РазностьДат Цикл 
		ДобавляемыйПериод = ДатаСоСмещением(НачалоПериода, Периодичность, Счетчик);
		
		ИскомаяСтрока = ТаблицаПериодов.Найти(ДобавляемыйПериод, "Период");
		Если ИскомаяСтрока = Неопределено Тогда
			НовыйПериод = ТаблицаПериодов.Добавить();
			НовыйПериод.Период = ДобавляемыйПериод;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	ТаблицаПериодов.Сортировать("Период");
	
	Возврат ТаблицаПериодов;
	
КонецФункции

Процедура ЗаменитьИмяПериодичности(Выражение, НовоеИмяПериодичности)
	
	Выражение = СтрЗаменить(Выражение, НСтр("ru='""ДЕНЬ""'"), """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, НСтр("ru='""НЕДЕЛЯ""'"), """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, НСтр("ru='""ДЕКАДА""'"), """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, НСтр("ru='""МЕСЯЦ""'"), """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, НСтр("ru='""КВАРТАЛ""'"), """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, НСтр("ru='""ПОЛУГОДИЕ""'"), """" + НовоеИмяПериодичности + """");
	Выражение = СтрЗаменить(Выражение, НСтр("ru='""ГОД""'"), """" + НовоеИмяПериодичности + """");
	
КонецПроцедуры

Функция ПериодАктуальностиРасчетаВМинутах(КоличествоПериодов, ВидПериодаАктуальностиРасчета)
	
	ПериодВМинутах = 0;
	
	ВидыПериодовАктуальностиРасчета = Перечисления.ВидыПериодовАктуальностиРасчета;
	
	Если ВидПериодаАктуальностиРасчета = ВидыПериодовАктуальностиРасчета.День Тогда
		ПериодВМинутах = КоличествоПериодов * 1440;
	ИначеЕсли ВидПериодаАктуальностиРасчета = ВидыПериодовАктуальностиРасчета.Час Тогда
		ПериодВМинутах = КоличествоПериодов * 60;
	ИначеЕсли ВидПериодаАктуальностиРасчета = ВидыПериодовАктуальностиРасчета.Минута Тогда
		ПериодВМинутах = КоличествоПериодов;
	КонецЕсли;
	
	Возврат ПериодВМинутах;
	
КонецФункции

Функция ПолучитьНачалоПериода(Дата, Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат НачалоГода(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Возврат ДатаСоСмещением(НачалоГода(Дата), Периодичность, ?(Месяц(Дата)>6, 1, 0));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат НачалоКвартала(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат НачалоМесяца(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		Возврат ДатаСоСмещением(НачалоГода(Дата), Периодичность, ОбщегоНазначенияУТ.РазностьДат(НачалоГода(Дата), Дата, Периодичность));
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат НачалоНедели(Дата);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		Возврат НачалоДня(Дата);
		
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу значений, для последующего использования в качестве внешнего источника 
//
// Параметры
//  НачалоПериода 	- Дата - начало периода
//  КонецПериода	- Дата - окончание периода
//  Периодичность	- Строка - принимает значения "ДЕНЬ,НЕДЕЛЯ,ДЕКАДА,МЕСЯЦ,КВАРТАЛ,ПОЛУГОДИЕ,ГОД"
//
// Возвращаемое значение:
//   ТаблицаЗначений	 - таблица значений, содержащая колонку "Период" и значения периодов
//
Функция ПолучитьТаблицуПериодов(НачалоПериода, КонецПериода, Периодичность) 
	
	Перем ТаблицаПериодов;
	
	Периодичности = Перечисления.Периодичность;
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("Период");
	
	НовыйПериод = ТаблицаПериодов.Добавить();
	НовыйПериод.Период = НачалоПериода;
	
	РазностьДат = ОбщегоНазначенияУТ.РазностьДат(НачалоПериода, КонецПериода, Периодичность);
	
	Счетчик = 1;
	Пока Счетчик <= РазностьДат Цикл 
		
		НовыйПериод = ТаблицаПериодов.Добавить();
		НовыйПериод.Период = ДатаСоСмещением(НачалоПериода, Периодичность, Счетчик);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Возврат ТаблицаПериодов;
	
КонецФункции

Функция ПредставлениеСтандартногоПериода(ЗначениеСтандартногоПериода, ВыводитьВариант = Истина)
	
	ПредставлениеДатыНачала = Формат(ЗначениеСтандартногоПериода.ДатаНачала, "Л=ru; ДФ=dd.MM.yyyy");
	ПредставлениеДатыОкончания = Формат(ЗначениеСтандартногоПериода.ДатаОкончания, "Л=ru; ДФ=dd.MM.yyyy");
	
	ПредставлениеСтандартногоПериода = ?(ВыводитьВариант, Строка(ЗначениеСтандартногоПериода.Вариант) + " " + "(", "") + ПредставлениеДатыНачала + " - " + ПредставлениеДатыОкончания + ?(ВыводитьВариант, ")", "");
	
	Возврат ПредставлениеСтандартногоПериода;
	
КонецФункции

Функция ПрименитьФорматДаты(Дата, Периодичность)
	
	ФорматированнаяДата = "01.01.01";
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		ФорматированнаяДата = Формат(Дата(Дата), "ДФ='дд.ММ.гг ""г.""'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ФорматированнаяДата = Формат(Дата(Дата), "ДФ='дд.ММ.гг ""г.""'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		ФорматированнаяДата = Формат(Дата(Дата), "ДФ='дд.ММ.гг ""г.""'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ФорматированнаяДата = Формат(Дата(Дата), "ДФ='МММ гггг ""г.""'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ФорматированнаяДата = Формат(Дата(Дата), "ДФ='к ""кв.""'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ФорматированнаяДата = Формат(Дата(Дата), "ДФ='к ""кв.""'");
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		ФорматированнаяДата = Формат(Дата(Дата), "ДФ='гггг ""г.""'");
	КонецЕсли;

	Возврат ФорматированнаяДата;
	
КонецФункции

Процедура УстановитьПериодВыраженийПолейИтогов(СхемаКомпоновки, Периодичность)
	
	ПоляИтогов = СхемаКомпоновки.ПоляИтога;
	ИмяПериодичности = ПолучитьИмяЗначенияПеречисления(Периодичность);
	
	ЗнаменательТребуется = Ложь;
	
	Для Каждого ПолеИтога Из ПоляИтогов Цикл 
		ЗаменитьИмяПериодичности(ПолеИтога.Выражение, ИмяПериодичности);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Преобразование цветов rgb <-> hsv.

Процедура ПолучитьHSVпоRGB(Красный, Зеленый, Синий, Тон, Насыщенность, Светлота)
	
	ПриведенныйКрасный = Красный/255;
	ПриведенныйЗеленый = Зеленый/255;
	ПриведенныйСиний = Синий/255;
	
	// Определим светлоту
	МаксЦветов = Макс(ПриведенныйКрасный, ПриведенныйЗеленый, ПриведенныйСиний);	
	МинЦветов = Мин(ПриведенныйКрасный, ПриведенныйЗеленый, ПриведенныйСиний);
	
	Светлота = Окр(100 * МаксЦветов);
	
	// Определим насыщенность
	Если МаксЦветов = 0 Тогда 
		Насыщенность = 0;
		
	Иначе 
		Насыщенность = Окр(100 * (1 - МинЦветов/МаксЦветов));
		
	КонецЕсли;
	
	// Определим цветовой тон
	Если МаксЦветов = МинЦветов Тогда
		Тон = 0;
		
	ИначеЕсли МаксЦветов = ПриведенныйКрасный И ПриведенныйЗеленый >= ПриведенныйСиний Тогда
		Тон = 60*(ПриведенныйЗеленый - ПриведенныйСиний)/(МаксЦветов - МинЦветов);
		
	ИначеЕсли МаксЦветов = ПриведенныйКрасный И ПриведенныйЗеленый < ПриведенныйСиний Тогда
		Тон = 60*(ПриведенныйЗеленый - ПриведенныйСиний)/(МаксЦветов - МинЦветов) + 360;
		
	ИначеЕсли МаксЦветов = ПриведенныйЗеленый Тогда
		Тон = 60*(ПриведенныйСиний - ПриведенныйКрасный)/(МаксЦветов - МинЦветов) + 120;
		
	ИначеЕсли МаксЦветов = ПриведенныйСиний Тогда
		Тон = 60*(ПриведенныйКрасный - ПриведенныйЗеленый)/(МаксЦветов - МинЦветов) + 240;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьRGBWebЦвета(Цвет, Красный, Зеленый, Синий)
	
	ВебЦветаВRGB = Отчеты.МониторЦелевыхПоказателей.ПолучитьМакет("ВебЦветаВRGB");
	ОбластьСоответствиеWebЦветов = ВебЦветаВRGB.Области.СоответствиеWebЦветов;
	
	ИмяЦвета = ПолучитьСоответствияЦветов().Получить(Цвет);
	
	НомерИскомойСтроки = ВебЦветаВRGB.НайтиТекст(ИмяЦвета,,ОбластьСоответствиеWebЦветов,, Истина).Низ;
	Если НЕ НомерИскомойСтроки = Неопределено Тогда
		Красный = Число(ВебЦветаВRGB.Область("R"+НомерИскомойСтроки+"C3:R"+НомерИскомойСтроки+"C3").Текст);
		Зеленый = Число(ВебЦветаВRGB.Область("R"+НомерИскомойСтроки+"C4:R"+НомерИскомойСтроки+"C4").Текст);
		Синий = Число(ВебЦветаВRGB.Область("R"+НомерИскомойСтроки+"C5:R"+НомерИскомойСтроки+"C5").Текст);
		
	Иначе 
		Красный = 0;
		Зеленый = 0;
		Синий = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьRGBпоHSV(Тон, Насыщенность, Светлота, Красный, Зеленый, Синий)
	
	ПриведеннаяНасыщенность = Насыщенность/100;
	ПриведеннаяСветлота = Светлота/100;
	
	Целые60 = Цел(Тон/60);
	Остаток60 = Тон/60 - Целые60;
	
	p = ПриведеннаяСветлота * (1 - ПриведеннаяНасыщенность);
	q = ПриведеннаяСветлота * (1 - Остаток60 * ПриведеннаяНасыщенность);
	t = ПриведеннаяСветлота * (1 - (1 - Остаток60) * ПриведеннаяНасыщенность);
	
	Если Целые60 = 0 Тогда
		ПриведенныйКрасный = ПриведеннаяСветлота;
		ПриведенныйЗеленый = t;
		ПриведенныйСиний= p;
		
	ИначеЕсли Целые60 = 1 Тогда
		ПриведенныйКрасный = q;
		ПриведенныйЗеленый = ПриведеннаяСветлота;
		ПриведенныйСиний= p;
		
	ИначеЕсли Целые60 = 2 Тогда
		ПриведенныйКрасный = p;
		ПриведенныйЗеленый = ПриведеннаяСветлота;
		ПриведенныйСиний= t;
		
	ИначеЕсли Целые60 = 3 Тогда
		ПриведенныйКрасный = p;
		ПриведенныйЗеленый = q;
		ПриведенныйСиний= ПриведеннаяСветлота;
		
	ИначеЕсли Целые60 = 4 Тогда
		ПриведенныйКрасный = t;
		ПриведенныйЗеленый =p ;
		ПриведенныйСиний= ПриведеннаяСветлота;
		
	ИначеЕсли Целые60 = 5 Тогда
		ПриведенныйКрасный = ПриведеннаяСветлота;
		ПриведенныйЗеленый = p;
		ПриведенныйСиний= q;
		
	КонецЕсли;
	
	Красный = 255 * ПриведенныйКрасный;
	Зеленый = 255 * ПриведенныйЗеленый;
	Синий = 255 * ПриведенныйСиний;
	
КонецПроцедуры

Процедура ПолучитьДополнительныйЦветПоHSV(Тон, Насыщенность, Светлота, НовыйТон, НоваяНасыщенность, НоваяСветлота)
	
	ПриведеннаяНасыщенность = Насыщенность/100;
	ПриведеннаяСветлота = Светлота/100;
	
	Если Тон >= 180 Тогда
		НовыйТон = Тон - 180;
		
	Иначе
		НовыйТон = Тон + 180;
		
	КонецЕсли;
	
	НоваяНасыщенность = 100 * (Светлота * Насыщенность) / (Светлота * (Насыщенность - 1) + 1);
	
	НоваяСветлота = 100 * (Светлота * (Насыщенность - 1) + 1);
	
КонецПроцедуры

Процедура ПолучитьДополнительныйЦветПоRGB(Красный, Зеленый, Синий, НовыйКрасный, НовыйЗеленый, НовыйСиний)
	
	Тон = 0;
	Насыщенность = 0;
	Светлота = 0;
	
	ПолучитьHSVпоRGB(Красный, Зеленый, Синий, Тон, Насыщенность, Светлота);
	ПолучитьДополнительныйЦветПоHSV(Тон, Насыщенность, Светлота, Тон, Насыщенность, Светлота);
	ПолучитьRGBпоHSV(Тон, Насыщенность, Светлота, НовыйКрасный, НовыйЗеленый, НовыйСиний);
	
КонецПроцедуры

Функция ПолучитьСоответствияЦветов()
	
	СоответствиеWebЦвета = Новый Соответствие;
	
	СоответствиеWebЦвета.Вставить(WebЦвета.АкварельноСиний, "АкварельноСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.АнтикБелый, "АнтикБелый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦианАкварельный, "ЦианАкварельный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Аквамарин, "Аквамарин");
	СоответствиеWebЦвета.Вставить(WebЦвета.Лазурный, "Лазурный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Бежевый, "Бежевый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоКоричневый, "СветлоКоричневый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Черный, "Черный");
	СоответствиеWebЦвета.Вставить(WebЦвета.БледноМиндальный, "БледноМиндальный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Синий, "Синий");
	СоответствиеWebЦвета.Вставить(WebЦвета.СинеФиолетовый, "СинеФиолетовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Коричневый, "Коричневый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Древесный, "Древесный");
	СоответствиеWebЦвета.Вставить(WebЦвета.СероСиний, "СероСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЗеленоватоЖелтый, "ЗеленоватоЖелтый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Шоколадный, "Шоколадный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Коралловый, "Коралловый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Васильковый, "Васильковый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ШелковыйОттенок, "ШелковыйОттенок");
	СоответствиеWebЦвета.Вставить(WebЦвета.Кремовый, "Кремовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Малиновый, "Малиновый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Циан, "Циан");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноСиний, "ТемноСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦианТемный, "ЦианТемный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноЗолотистый, "ТемноЗолотистый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноСерый, "ТемноСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноЗеленый, "ТемноЗеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ХакиТемный, "ХакиТемный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ФуксинТемный, "ФуксинТемный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноОливковоЗеленый, "ТемноОливковоЗеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноОранжевый, "ТемноОранжевый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ОрхидеяТемный, "ОрхидеяТемный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноКрасный, "ТемноКрасный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЛососьТемный, "ЛососьТемный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦветМорскойВолныТемный, "ЦветМорскойВолныТемный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноГрифельноСиний, "ТемноГрифельноСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноГрифельноСерый, "ТемноГрифельноСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноБирюзовый, "ТемноБирюзовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноФиолетовый, "ТемноФиолетовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НасыщенноРозовый, "НасыщенноРозовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НасыщенноНебесноГолубой, "НасыщенноНебесноГолубой");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТусклоСерый, "ТусклоСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СинеСерый, "СинеСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Кирпичный, "Кирпичный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦветокБелый, "ЦветокБелый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЗеленыйЛес, "ЗеленыйЛес");
	СоответствиеWebЦвета.Вставить(WebЦвета.Фуксия, "Фуксия");
	СоответствиеWebЦвета.Вставить(WebЦвета.СеребристоСерый, "СеребристоСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ПризрачноБелый, "ПризрачноБелый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Золотой, "Золотой");
	СоответствиеWebЦвета.Вставить(WebЦвета.Золотистый, "Золотистый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Серый, "Серый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Зеленый, "Зеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЗеленоЖелтый, "ЗеленоЖелтый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Роса, "Роса");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТеплоРозовый, "ТеплоРозовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Киноварь, "Киноварь");
	СоответствиеWebЦвета.Вставить(WebЦвета.Индиго, "Индиго");
	СоответствиеWebЦвета.Вставить(WebЦвета.СлоноваяКость, "СлоноваяКость");
	СоответствиеWebЦвета.Вставить(WebЦвета.Хаки, "Хаки");
	СоответствиеWebЦвета.Вставить(WebЦвета.БледноЛиловый, "БледноЛиловый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ГолубойСКраснымОттенком, "ГолубойСКраснымОттенком");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЗеленаяЛужайка, "ЗеленаяЛужайка");
	СоответствиеWebЦвета.Вставить(WebЦвета.Лимонный, "Лимонный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Голубой, "Голубой");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоКоралловый, "СветлоКоралловый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦианСветлый, "ЦианСветлый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоЗолотистый, "СветлоЗолотистый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоЖелтыйЗолотистый, "СветлоЖелтыйЗолотистый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоСерый, "СветлоСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоЗеленый, "СветлоЗеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоРозовый, "СветлоРозовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЛососьСветлый, "ЛососьСветлый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦветМорскойВолныСветлый, "ЦветМорскойВолныСветлый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоНебесноГолубой, "СветлоНебесноГолубой");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоГрифельноСиний, "СветлоГрифельноСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоГрифельноСерый, "СветлоГрифельноСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ГолубойСоСтальнымОттенком, "ГолубойСоСтальнымОттенком");
	СоответствиеWebЦвета.Вставить(WebЦвета.СветлоЖелтый, "СветлоЖелтый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЗеленоватоЛимонный, "ЗеленоватоЛимонный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЛимонноЗеленый, "ЛимонноЗеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Льняной, "Льняной");
	СоответствиеWebЦвета.Вставить(WebЦвета.Фуксин, "Фуксин");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТемноБордовый, "ТемноБордовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноАквамариновый, "НейтральноАквамариновый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноСиний, "НейтральноСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноСерый, "НейтральноСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноЗеленый, "НейтральноЗеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ОрхидеяНейтральный, "ОрхидеяНейтральный");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноПурпурный, "НейтральноПурпурный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦветМорскойВолныНейтральный, "ЦветМорскойВолныНейтральный");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноГрифельноСиний, "НейтральноГрифельноСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноВесеннеЗеленый, "НейтральноВесеннеЗеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноБирюзовый, "НейтральноБирюзовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноФиолетовоКрасный, "НейтральноФиолетовоКрасный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ПолночноСиний, "ПолночноСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.МятныйКрем, "МятныйКрем");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТусклоРозовый, "ТусклоРозовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЗамшаСветлый, "ЗамшаСветлый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НавахоБелый, "НавахоБелый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Ультрамарин, "Ультрамарин");
	СоответствиеWebЦвета.Вставить(WebЦвета.СтароеКружево, "СтароеКружево");
	СоответствиеWebЦвета.Вставить(WebЦвета.Оливковый, "Оливковый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТусклоОливковый, "ТусклоОливковый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Оранжевый, "Оранжевый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ОранжевоКрасный, "ОранжевоКрасный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Орхидея, "Орхидея");
	СоответствиеWebЦвета.Вставить(WebЦвета.БледноЗолотистый, "БледноЗолотистый");
	СоответствиеWebЦвета.Вставить(WebЦвета.БледноЗеленый, "БледноЗеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.БледноБирюзовый, "БледноБирюзовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.БледноКрасноФиолетовый, "БледноКрасноФиолетовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ТопленоеМолоко, "ТопленоеМолоко");
	СоответствиеWebЦвета.Вставить(WebЦвета.Персиковый, "Персиковый");
	СоответствиеWebЦвета.Вставить(WebЦвета.НейтральноКоричневый, "НейтральноКоричневый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Розовый, "Розовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Сливовый, "Сливовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СинийСПороховымОттенком, "СинийСПороховымОттенком");
	СоответствиеWebЦвета.Вставить(WebЦвета.Пурпурный, "Пурпурный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Красный, "Красный");
	СоответствиеWebЦвета.Вставить(WebЦвета.РозовоКоричневый, "РозовоКоричневый");
	СоответствиеWebЦвета.Вставить(WebЦвета.КоролевскиГолубой, "КоролевскиГолубой");
	СоответствиеWebЦвета.Вставить(WebЦвета.КожаноКоричневый, "КожаноКоричневый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Лосось, "Лосось");
	СоответствиеWebЦвета.Вставить(WebЦвета.ПесочноКоричневый, "ПесочноКоричневый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦветМорскойВолны, "ЦветМорскойВолны");
	СоответствиеWebЦвета.Вставить(WebЦвета.Перламутровый, "Перламутровый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Охра, "Охра");
	СоответствиеWebЦвета.Вставить(WebЦвета.Серебряный, "Серебряный");
	СоответствиеWebЦвета.Вставить(WebЦвета.НебесноГолубой, "НебесноГолубой");
	СоответствиеWebЦвета.Вставить(WebЦвета.ГрифельноСиний, "ГрифельноСиний");
	СоответствиеWebЦвета.Вставить(WebЦвета.ГрифельноСерый, "ГрифельноСерый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Белоснежный, "Белоснежный");
	СоответствиеWebЦвета.Вставить(WebЦвета.ВесеннеЗеленый, "ВесеннеЗеленый");
	СоответствиеWebЦвета.Вставить(WebЦвета.СинийСоСтальнымОттенком, "СинийСоСтальнымОттенком");
	СоответствиеWebЦвета.Вставить(WebЦвета.РыжеватоКоричневый, "РыжеватоКоричневый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЦианНейтральный, "ЦианНейтральный");
	СоответствиеWebЦвета.Вставить(WebЦвета.БледноСиреневый, "БледноСиреневый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Томатный, "Томатный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Бирюзовый, "Бирюзовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Фиолетовый, "Фиолетовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.КрасноФиолетовый, "КрасноФиолетовый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Пшеничный, "Пшеничный");
	СоответствиеWebЦвета.Вставить(WebЦвета.Белый, "Белый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ДымчатоБелый, "ДымчатоБелый");
	СоответствиеWebЦвета.Вставить(WebЦвета.Желтый, "Желтый");
	СоответствиеWebЦвета.Вставить(WebЦвета.ЖелтоЗеленый, "ЖелтоЗеленый");
	
	Возврат СоответствиеWebЦвета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Первоначальное заполнение объектов подсистемы мониторинга.

Функция ПолучитьВариантОтчетаПоКлючам(КлючОтчета, КлючВарианта)
	
	ВариантОтчета = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлючОтчета", КлючОтчета);
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Идентификаторы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Идентификаторы
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы
	|ГДЕ
	|	Идентификаторы.ПолноеИмя = ""Отчет."" + &КлючОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВариантыОтчетов.Ссылка КАК ВариантОтчета
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Идентификаторы КАК Идентификаторы
	|		ПО ВариантыОтчетов.Отчет = Идентификаторы.Ссылка
	|ГДЕ
	|	ВариантыОтчетов.КлючВарианта = &КлючВарианта
	|	И НЕ ВариантыОтчетов.Пользовательский
	|	И НЕ ВариантыОтчетов.ТолькоДляАвтора";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ВариантОтчета = Выборка.ВариантОтчета;
		
	КонецЕсли;
	
	Возврат ВариантОтчета;
	
КонецФункции

Функция СправочникиУправленияПоЦелямЗаполнялись()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	КатегорииЦелей.Ссылка
	               |ИЗ
	               |	Справочник.КатегорииЦелей КАК КатегорииЦелей
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	СтруктураЦелей.Ссылка
	               |ИЗ
	               |	Справочник.СтруктураЦелей КАК СтруктураЦелей
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВариантыАнализаЦелевыхПоказателей.Ссылка
	               |ИЗ
	               |	Справочник.ВариантыАнализаЦелевыхПоказателей КАК ВариантыАнализаЦелевыхПоказателей";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Анализ взаимосвязанных целевых показателей.

Функция ТекстЗапросаПоСтруктуреДоступныхВариантовАнализа()
	
	Текст = "ВЫБРАТЬ
	|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка КАК ВариантАнализа,
	|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.Владелец КАК Цель,
	|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.ВариантОтображения
	|ПОМЕСТИТЬ ДоступныеВариантыАнализа
	|ИЗ
	|	Справочник.ВариантыАнализаЦелевыхПоказателей.НастройкиДоступности КАК ВариантыАнализаЦелевыхПоказателейНастройкиДоступности
	|ГДЕ
	|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Пользователь = &Пользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеВариантыАнализа.ВариантАнализа КАК ВариантАнализа,
	|	ДоступныеВариантыАнализа.Цель,
	|	ДоступныеВариантыАнализа.Цель.ЦелевойПоказатель,
	|	ВЫБОР
	|		КОГДА ДоступныеВариантыАнализа.ВариантАнализа.МетодРасчетаЗначений = ЗНАЧЕНИЕ(Перечисление.МетодыРасчетаВариантовАнализаЦелевыхПоказателей.СуммаНарастающимИтогом)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СостояниеПоНарастающемуИтогу,
	|	ДоступныеВариантыАнализа.ВариантОтображения,
	|	ЛОЖЬ КАК ВыводитьПодробности,
	|	ЛОЖЬ КАК ВыводитьИтогТаблицы,
	|	ДоступныеВариантыАнализа.ВариантАнализа.РеквизитДопУпорядочивания КАК Позиция,
	|	ДоступныеВариантыАнализа.Цель.КраткоеНаименованиеЦелевогоПоказателя КАК НаименованиеЦелевогоПоказателя,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПоискаСвязанныхПоказателей.ЗависимыеПоказатели) КАК Группа
	|ИЗ
	|	Справочник.ВариантыАнализаЦелевыхПоказателей КАК ВариантыАнализаЦелевыхПоказателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураЦелей КАК СтруктураЦелей
	|			ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеВариантыАнализа КАК ДоступныеВариантыАнализа
	|			ПО СтруктураЦелей.Ссылка = ДоступныеВариантыАнализа.Цель
	|		ПО ВариантыАнализаЦелевыхПоказателей.Владелец.Родитель = СтруктураЦелей.Ссылка
	|ГДЕ
	|	ВариантыАнализаЦелевыхПоказателей.Ссылка = &ВариантАнализа
	|	И СтруктураЦелей.ЦельИзмеримая
	|	И (НЕ ДоступныеВариантыАнализа.ВариантАнализа ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеВариантыАнализа.ВариантАнализа КАК ВариантАнализа,
	|	ДоступныеВариантыАнализа.Цель,
	|	ДоступныеВариантыАнализа.Цель.ЦелевойПоказатель,
	|	ВЫБОР
	|		КОГДА ДоступныеВариантыАнализа.ВариантАнализа.МетодРасчетаЗначений = ЗНАЧЕНИЕ(Перечисление.МетодыРасчетаВариантовАнализаЦелевыхПоказателей.СуммаНарастающимИтогом)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СостояниеПоНарастающемуИтогу,
	|	ДоступныеВариантыАнализа.ВариантОтображения,
	|	ЛОЖЬ КАК ВыводитьПодробности,
	|	ЛОЖЬ КАК ВыводитьИтогТаблицы,
	|	ДоступныеВариантыАнализа.ВариантАнализа.РеквизитДопУпорядочивания КАК Позиция,
	|	ДоступныеВариантыАнализа.Цель.КраткоеНаименованиеЦелевогоПоказателя КАК НаименованиеЦелевогоПоказателя,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПоискаСвязанныхПоказателей.ВлияющиеПоказатели) КАК Группа
	|ИЗ
	|	Справочник.ВариантыАнализаЦелевыхПоказателей КАК ВариантыАнализаЦелевыхПоказателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураЦелей КАК СтруктураЦелей
	|			ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеВариантыАнализа КАК ДоступныеВариантыАнализа
	|			ПО СтруктураЦелей.Ссылка = ДоступныеВариантыАнализа.Цель
	|		ПО ВариантыАнализаЦелевыхПоказателей.Владелец = СтруктураЦелей.Родитель
	|ГДЕ
	|	ВариантыАнализаЦелевыхПоказателей.Ссылка = &ВариантАнализа
	|	И СтруктураЦелей.ЦельИзмеримая
	|	И (НЕ ДоступныеВариантыАнализа.ВариантАнализа ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеВариантыАнализа.ВариантАнализа КАК ВариантАнализа,
	|	ДоступныеВариантыАнализа.Цель,
	|	ДоступныеВариантыАнализа.Цель.ЦелевойПоказатель,
	|	ВЫБОР
	|		КОГДА ДоступныеВариантыАнализа.ВариантАнализа.МетодРасчетаЗначений = ЗНАЧЕНИЕ(Перечисление.МетодыРасчетаВариантовАнализаЦелевыхПоказателей.СуммаНарастающимИтогом)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СостояниеПоНарастающемуИтогу,
	|	ДоступныеВариантыАнализа.ВариантОтображения,
	|	ЛОЖЬ КАК ВыводитьПодробности,
	|	ЛОЖЬ КАК ВыводитьИтогТаблицы,
	|	ДоступныеВариантыАнализа.ВариантАнализа.РеквизитДопУпорядочивания КАК Позиция,
	|	ДоступныеВариантыАнализа.Цель.КраткоеНаименованиеЦелевогоПоказателя КАК НаименованиеЦелевогоПоказателя,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПоискаСвязанныхПоказателей.ПустаяСсылка) КАК Группа
	|ИЗ
	|	Справочник.ВариантыАнализаЦелевыхПоказателей КАК ВариантыАнализаЦелевыхПоказателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеВариантыАнализа КАК ДоступныеВариантыАнализа
	|		ПО ВариантыАнализаЦелевыхПоказателей.Ссылка = ДоступныеВариантыАнализа.ВариантАнализа
	|ГДЕ
	|	ВариантыАнализаЦелевыхПоказателей.Ссылка = &ВариантАнализа
	|	И (НЕ ДоступныеВариантыАнализа.ВариантАнализа ЕСТЬ NULL )";
	
	Возврат Текст;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование диаграмм.

// Заполняет секцию "Диаграмма" переданного табличного документа 
//
// Параметры:
//	ТабличныйДокумент	- ТабличныйДокумент для заполнения
//	ВариантАнализа		- Ссылка на вариант анализа
//	ИсточникДанных		- Структура, хранящая данные, необходимые для анализа показателя
//
Процедура ЗаполнитьДанныеДиаграммы(ТабличныйДокумент, ВариантАнализа, ИсточникДанных)
	
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	МакетПечатнойФормыВариантаАнализа = МониторингЦелевыхПоказателейПовтИсп.ПолучитьМакетПечатнойФормыВариантаАнализа();
	
	Если НЕ ИсточникДанных.РасчетыАктуальны ИЛИ ИсточникДанных.ОшибкаРасчета ИЛИ ИсточникДанных.Пустой Тогда
		ОбластьМакета = МакетПечатнойФормыВариантаАнализа.ПолучитьОбласть("РезультатЗаголовокОшибкаРасчета");
		
		Если ИсточникДанных.Свойство("ОписаниеОшибки") Тогда
			ОбластьМакета.Параметры.ОписаниеОшибки = ИсточникДанных.ОписаниеОшибки;
			
		КонецЕсли;
		
	Иначе
		ОбластьМакета = МакетПечатнойФормыВариантаАнализа.ПолучитьОбласть("РезультатЗаголовок");
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета, 2, "Результат");
	
	Если НЕ ИсточникДанных.ОшибкаРасчета И НЕ ИсточникДанных.Пустой И ИсточникДанных.РасчетыАктуальны Тогда
		ОбластьМакета = МакетПечатнойФормыВариантаАнализа.ПолучитьОбласть("РезультатДиаграмма");
		
		ВыведеннаяОбласть = ТабличныйДокумент.Вывести(ОбластьМакета, 3, "Результат");
		
		ОбластьМакетаСДиаграммой = ОбластьМакета.Области.РасположениеДиаграммы;
		
		РисунокДиаграмма = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Диаграмма);
		РисунокДиаграмма.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная);
		РисунокДиаграмма.ЦветЛинии = WebЦвета.СеребристоСерый;
		
		Индекс = ТабличныйДокумент.Рисунки.Индекс(РисунокДиаграмма);
		РисунокДиаграмма.Имя = "Диаграмма";
		Диаграмма = РисунокДиаграмма.Объект;
		
		УстановитьИсточникДанныхДиаграммы(Диаграмма, ИсточникДанных, ВариантАнализа);
		
		УстановитьНастройкиПоУмолчаниюДиаграммы(Диаграмма, ВариантАнализа);
		
		Если ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ДинамикаИзменения Тогда
			УстановитьИменаТочекДиаграммы(Диаграмма.Точки, ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа, ДинамическиеСвойстваВариантаАнализа.ПериодичностьКонтроля);
		КонецЕсли;
		
		Если НЕ ИсточникДанных.Данные.Колонки.Найти("Признак") = Неопределено 
			И ВариантАнализа.РассчитыватьПрогноз 
			И ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.Пустой Тогда
			// Выделим все периоды прогноза
			ОтборПоПризнаку = Новый Структура("Признак", Истина);
			НайденныеСтрокиСПериодами = ИсточникДанных.Данные.НайтиСтроки(ОтборПоПризнаку);
			ПериодыСПризнаком = ИсточникДанных.Данные.Скопировать(НайденныеСтрокиСПериодами, "Период");
			УстановитьПользовательскиеНастройкиТочекДиаграммы(Диаграмма.Точки, ВариантАнализа, ПериодыСПризнаком);
			
			// Удалить серию "Признак"
			КолонкиИсточника = ИсточникДанных.Данные.Колонки;
			КолонкиИсточника.Удалить(КолонкиИсточника.Индекс(КолонкиИсточника.Найти("Признак")));
			
		КонецЕсли;
		
		УстановитьНастройкиПоУмолчаниюСерийДиаграммы(Диаграмма.Серии);
		
		Если ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ИзмерениеТекущегоСостояния Тогда
			УстановитьНастройкиИзмерительнойДиаграммы(Диаграмма, ВариантАнализа, ИсточникДанных);
			
		Иначе
			УстановитьПользовательскиеНастройкиСерийДиаграммы(Диаграмма.Серии, ВариантАнализа);
			
		КонецЕсли;
		
		Диаграмма.ОтображатьЛегенду = ВариантАнализа.ОтображатьЛегенду;
		РисунокДиаграмма.Защита = Ложь;
		
		Диаграмма.ПрозрачныйФон = Истина;
		
		ВерхДиаграммы = ВыведеннаяОбласть.Верх;
		ЛевоДиаграммы = ВыведеннаяОбласть.Лево + ОбластьМакетаСДиаграммой.Лево;
		НизДиаграммы = ВерхДиаграммы + ОбластьМакетаСДиаграммой.Низ - ОбластьМакетаСДиаграммой.Верх + 10;
		ПравоДиаграммы = ЛевоДиаграммы + ОбластьМакетаСДиаграммой.Право - ОбластьМакетаСДиаграммой.Лево;
		
		ОбластьМакетаСДиаграммой = ТабличныйДокумент.Область(ВерхДиаграммы, ЛевоДиаграммы, НизДиаграммы, ПравоДиаграммы);
		ТабличныйДокумент.Рисунки[Индекс].Расположить(ОбластьМакетаСДиаграммой);
		
		ТабличныйДокумент.Вывести(МониторингЦелевыхПоказателейПовтИсп.ПолучитьРазделительПечатнойФормыВариантаАнализа(), 3, "Результат");
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает имена точек диаграммы соответсвии с данными диаграммы из внешнего источника
//
// Параметры
//	ТочкиДиаграммы - содержит точки объекта Диаграмма
//
Процедура УстановитьИменаТочекДиаграммы(ТочкиДиаграммы, ЗначениеАнализаИмяПоля, Периодичность)
	
	Для каждого ТочкаДиаграммы Из ТочкиДиаграммы Цикл
		Если ТочкаДиаграммы.Значение = ЗначениеАнализаИмяПоля Тогда
			Прервать;
		КонецЕсли;
		
		ТочкаДиаграммы.Текст = ПрименитьФорматДаты(ТочкаДиаграммы.Текст, Периодичность);
		
	КонецЦикла; 
	
КонецПроцедуры

// Устанавливает источник данных для диаграммы
//
// Параметры
//	Диаграмма	   - содержит заполняемый объект Диаграмма
//	ИсточникДанных - ТаблицаЗначений с данными для диаграммы
//
Процедура УстановитьИсточникДанныхДиаграммы(Диаграмма, ИсточникДанных, ВариантАнализа, Минидиаграмма = Ложь)
	
	СерииДиаграммы = Диаграмма.Серии;
	ТочкиДиаграммы = Диаграмма.Точки;
	
	ДанныеИсточникаДанных = ИсточникДанных.Данные;
	КолонкиИсточникаДанных = ДанныеИсточникаДанных.Колонки;
	
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	СвойстваОбщейСтатистики = ИсточникДанных.СвойстваОбщейСтатистики;
	
	ТипыАнализа = Перечисления.ТипыАнализаПоказателей;
	ТипАнализа = ВариантАнализа.ТипАнализа;
	СерииВКолонках = НЕ (ТипАнализа = ТипыАнализа.ИзмерениеТекущегоСостояния)
	И НЕ (ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение);
	
	Точность = ВариантАнализа.ТочностьРасчетаДробнойЧасти;
	Сдвиг = ПолучитьСдвигПоВидуПредставленияЧисел(ВариантАнализа);
	
	ЕстьГрадиент = ((ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение) 
	И ВариантАнализа.ТолькоЦветОсновнойСерии 
	И ВариантАнализа.ГрадиентДляПокомпонетногоСравнения);
	
	Если ЕстьГрадиент Тогда
		МаксимумИсточникаДанных = СвойстваОбщейСтатистики.ПоОбъектамАнализа.Максимум;
	КонецЕсли;
	
	Для Каждого СтрокаИсточникаДанных Из ДанныеИсточникаДанных Цикл
		
		ЗначениеСтроки = СтрокаИсточникаДанных[ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа];
		
		Если ЕстьГрадиент Тогда
			Если НЕ МаксимумИсточникаДанных = 0 Тогда
				ВесСерии = Окр(100 * ЗначениеСтроки / МаксимумИсточникаДанных);
				
			Иначе
				ВесСерии = 0;
				
			КонецЕсли;
		КонецЕсли;
		
		Если СерииВКолонках Тогда
			ТекущаяТочкаДиаграммы = Диаграмма.УстановитьТочку(СтрокаИсточникаДанных[0]);
			ТекущаяТочкаДиаграммы.Текст = СтрокаИсточникаДанных[0];
		Иначе
			ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию(СтрокаИсточникаДанных[0]);
			
			Если ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение Тогда
				УстанавливаемоеПредставлениеЗначения = ПолучитьСокращенноеПредставлениеЧисла(ЗначениеСтроки, ВариантАнализа.ТочностьРасчетаДробнойЧасти, ВариантАнализа.КратностьЗначений) + " " + ДинамическиеСвойстваВариантаАнализа.Размерность;
				ТекстСерии = Строка(СтрокаИсточникаДанных[0]) + " = " + УстанавливаемоеПредставлениеЗначения + ?(ЕстьГрадиент,"#" + ВесСерии + "#","");
				
			ИначеЕсли ТипАнализа = ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
				УстанавливаемоеПредставлениеЗначения = ПолучитьСокращенноеПредставлениеЧисла(ЗначениеСтроки, ВариантАнализа.ТочностьРасчетаДробнойЧасти, ВариантАнализа.КратностьЗначений) + " " + ДинамическиеСвойстваВариантаАнализа.Размерность;
				ТекстСерии = ИсточникДанных.СвойстваЗоныАнализаИТренда.ПояснениеКСтатусу + " " + НСтр("ru='на'") + " " + Формат(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, "ДФ=dd.MM.yy; ДЛФ=D") + " " + "=" + " " + УстанавливаемоеПредставлениеЗначения;
				
			Иначе
				ТекстСерии = СтрокаИсточникаДанных[0];
				
			КонецЕсли;
			
			ТекущаяСерияДиаграммы.Текст = ТекстСерии;
			
		КонецЕсли;
		
		Для каждого КолонкаИсточникаДанных Из КолонкиИсточникаДанных Цикл
			
			ИмяКолонкиИсточникаДанных = КолонкаИсточникаДанных.Имя;
			ЗаголовокКолонкиИстоникаДанных = КолонкаИсточникаДанных.Заголовок;
			
			Если Найти(ИмяКолонкиИсточникаДанных, НСтр("ru='Период'")) 
				ИЛИ ?(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа = Неопределено, Ложь, Найти(ИмяКолонкиИсточникаДанных, ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа))
				ИЛИ Найти(ИмяКолонкиИсточникаДанных, НСтр("ru='ПериодСравнения'"))
				ИЛИ Найти(ИмяКолонкиИсточникаДанных, НСтр("ru='Признак'")) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СерииВКолонках Тогда
				ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию(ИмяКолонкиИсточникаДанных);
				ТекущаяСерияДиаграммы.Значение = ИмяКолонкиИсточникаДанных;
				ТекущаяСерияДиаграммы.Текст = ЗаголовокКолонкиИстоникаДанных;
				
			Иначе
				ТекущаяТочкаДиаграммы = Диаграмма.УстановитьТочку(ИмяКолонкиИсточникаДанных);
				ТекущаяТочкаДиаграммы.Значение = ИмяКолонкиИсточникаДанных;
				ТекущаяТочкаДиаграммы.Текст = ЗаголовокКолонкиИстоникаДанных;
				
			КонецЕсли;
			
			ТекущееЗначение = СтрокаИсточникаДанных[ИмяКолонкиИсточникаДанных];
			
			УстанавливаемоеПредставлениеЗначения = ПолучитьСокращенноеПредставлениеЧисла(ТекущееЗначение, ВариантАнализа.ТочностьРасчетаДробнойЧасти, ВариантАнализа.КратностьЗначений) + " " + ДинамическиеСвойстваВариантаАнализа.Размерность;
			
			Если СерииВКолонках Тогда
				Если НЕ КолонкиИсточникаДанных.Найти(НСтр("ru='Период'")) = Неопределено Тогда
					ФорматированнаяПодписьТочкиСерии = ПрименитьФорматДаты(ТекущаяТочкаДиаграммы.Текст, ДинамическиеСвойстваВариантаАнализа.ПериодичностьКонтроля);
				Иначе 
					ФорматированнаяПодписьТочкиСерии = ТекущаяТочкаДиаграммы.Текст;
				КонецЕсли;
				
			Иначе
				Если НЕ КолонкиИсточникаДанных.Найти(НСтр("ru='Период'")) = Неопределено И НЕ ТипАнализа = ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
					ФорматированнаяПодписьТочкиСерии = ПрименитьФорматДаты(ТекущаяСерияДиаграммы.Текст, ДинамическиеСвойстваВариантаАнализа.ПериодичностьКонтроля);
				Иначе 
					ФорматированнаяПодписьТочкиСерии = ТекущаяСерияДиаграммы.Текст;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение Тогда
				Если ЕстьГрадиент Тогда
					ТекстСерии = ТекущаяСерияДиаграммы.Текст;
					
					НачалоМаркераВесаСерии = Найти(ТекстСерии, "#");
					ДлинаЗначенияСерии = СтрДлина(ТекстСерии);
					МаркерВесаСерии = Прав(ТекстСерии, ДлинаЗначенияСерии - НачалоМаркераВесаСерии + 1);
					
					ТекстПодсказки = СтрЗаменить(ТекстСерии, МаркерВесаСерии, "");
				Иначе 
					ТекстПодсказки = ТекущаяСерияДиаграммы.Текст;
				КонецЕсли;
				
				Диаграмма.УстановитьЗначение(ТекущаяТочкаДиаграммы, 
				ТекущаяСерияДиаграммы, 
				ТекущееЗначение, ,
				ТекстПодсказки);
				
			ИначеЕсли ТипАнализа = ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
				Диаграмма.УстановитьЗначение(ТекущаяТочкаДиаграммы, 
				ТекущаяСерияДиаграммы, 
				ТекущееЗначение, ,
				ТекущаяСерияДиаграммы.Текст); 
				
			Иначе
				Диаграмма.УстановитьЗначение(ТекущаяТочкаДиаграммы, 
				ТекущаяСерияДиаграммы, 
				ТекущееЗначение, ,
				ТекущаяСерияДиаграммы.Текст + " = " + УстанавливаемоеПредставлениеЗначения + ", " + ФорматированнаяПодписьТочкиСерии); 
				
			КонецЕсли;
		КонецЦикла; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Устанавливает настройки по умолчанию для измерительной диаграммы
// Такие параметры, как, полосы, размеры и т.д.
//
// Параметры
//	Диаграмма		- содержит заполняемый объект Диаграмма
//	ВариантАнализа		- Ссылка на вариант анализа
//	ИсточникДанных	- ТаблицаЗначений с данными для диаграммы
//
Процедура УстановитьНастройкиИзмерительнойДиаграммы(Диаграмма, ВариантАнализа, ИсточникДанных)
	
	// Инициализируем переменные
	ПолосыДиаграммы = Диаграмма.ПолосыИзмерительнойДиаграммы;
	ЦветаПоказателя = ВариантАнализа.ХранилищеНастроекОформления.Получить().Цвета;
	
	ТочностьРасчетаДробнойЧасти = ВариантАнализа.ТочностьРасчетаДробнойЧасти;
	КратностьЗначений = ВариантАнализа.КратностьЗначений;
	
	ЦелевойТренд = ИсточникДанных.Цель.ЦелевойТренд;
	
	ЦелевоеЗначение = ПолучитьЗначениеСокращенногоПредставленияЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение, ТочностьРасчетаДробнойЧасти, КратностьЗначений);
	
	Если ЦелевойТренд = Перечисления.ВидыЦелевыхТрендовПоказателей.Максимизация Тогда
		МинимальноеЗначениеЦели = ПолучитьЗначениеСокращенногоПредставленияЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение, ТочностьРасчетаДробнойЧасти, КратностьЗначений);
		МаксимальноеЗначениеЦели = ПолучитьЗначениеСокращенногоПредставленияЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение, ТочностьРасчетаДробнойЧасти, КратностьЗначений);
		
	ИначеЕсли ЦелевойТренд = Перечисления.ВидыЦелевыхТрендовПоказателей.Минимизация Тогда
		МинимальноеЗначениеЦели = ПолучитьЗначениеСокращенногоПредставленияЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение, ТочностьРасчетаДробнойЧасти, КратностьЗначений);
		МаксимальноеЗначениеЦели = ПолучитьЗначениеСокращенногоПредставленияЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение, ТочностьРасчетаДробнойЧасти, КратностьЗначений);
		
	ИначеЕсли ЦелевойТренд = Перечисления.ВидыЦелевыхТрендовПоказателей.Диапазон Тогда
	КонецЕсли;
	
	ТекущееЗначение = ПолучитьЗначениеСокращенногоПредставленияЧисла(ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение, ТочностьРасчетаДробнойЧасти, КратностьЗначений);
	
	МинимальноеЗначение = Мин(ТекущееЗначение, МинимальноеЗначениеЦели);
	МаксимальноеЗначение = Макс(ТекущееЗначение, МаксимальноеЗначениеЦели);
	
	// Настройки диаграммы
	Диаграмма.НачальныйУголИзмерительнойДиаграммы	= 0;
	Диаграмма.КонечныйУголИзмерительнойДиаграммы	= 180;
	Диаграмма.ТолщинаШкалыИзмерительнойДиаграммы	= 6;
	Диаграмма.ТолщинаВтулкиИзмерительнойДиаграммы	= 6;
	
	ДельтаМинимум	= Мин(МинимальноеЗначение, ТекущееЗначение) * 0.1;
	ДельтаМаксимум	= Мин(МаксимальноеЗначение, ТекущееЗначение) * 0.1;
	
	Диаграмма.БазовоеЗначение			= Окр(Мин(МинимальноеЗначение, ТекущееЗначение) - ДельтаМинимум, 0);
	Диаграмма.АвтоМинимальноеЗначение	= Ложь;
	Диаграмма.МинимальноеЗначение		= Окр(Мин(МинимальноеЗначение, ТекущееЗначение), 0);
	Диаграмма.АвтоМаксимальноеЗначение	= Ложь;
	Диаграмма.МаксимальноеЗначение		= Окр(Макс(МаксимальноеЗначение, ТекущееЗначение) + ДельтаМаксимум, 0);
	
	// Добавим полосы диаграммы
	Если ЦелевойТренд = Перечисления.ВидыЦелевыхТрендовПоказателей.Максимизация Тогда
		Если ИсточникДанных.СвойстваЗоныАнализаИТренда.НомерЗоныАнализа > 0 Тогда
			ПолосаМеньшеМинимума = ПолосыДиаграммы.Добавить();
			ПолосаМеньшеМинимума.Начало = Диаграмма.БазовоеЗначение;
			ПолосаМеньшеМинимума.Конец = МинимальноеЗначение;
			ПолосаМеньшеМинимума.Подсказка = "Диапазон недопустимых значений: Показатель < Мин. = " + МинимальноеЗначение;
			ПолосаМеньшеМинимума.ЦветФона = ЦветаПоказателя["НегативноеОтклонение"];
			
			ПолосаБольшеМинимумаМеньшеЦели = ПолосыДиаграммы.Добавить();
			ПолосаБольшеМинимумаМеньшеЦели.Начало = МинимальноеЗначение;
			ПолосаБольшеМинимумаМеньшеЦели.Конец = ЦелевоеЗначение * (1 - 0.01);
			ПолосаБольшеМинимумаМеньшеЦели.Подсказка = "Диапазон допустимых значений: Мин. = " + МинимальноеЗначение + " < Показатель < Цель = " + ЦелевоеЗначение;
			ПолосаБольшеМинимумаМеньшеЦели.ЦветФона = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
			
			ПолосаЦелевогоЗначения = ПолосыДиаграммы.Добавить();
			ПолосаЦелевогоЗначения.Начало = ЦелевоеЗначение * (1 - 0.01);
			ПолосаЦелевогоЗначения.Конец = ЦелевоеЗначение * (1 + 0.01);
			ПолосаЦелевогоЗначения.Подсказка = "Целевое значение: Цель = " + ЦелевоеЗначение;
			ПолосаЦелевогоЗначения.ЦветФона = ЦветаПоказателя["ЦелевоеЗначение"];
			
			ПолосаБольшеЦелиМеньшеМаксимума = ПолосыДиаграммы.Добавить();
			ПолосаБольшеЦелиМеньшеМаксимума.Начало = ЦелевоеЗначение * (1 + 0.01);
			ПолосаБольшеЦелиМеньшеМаксимума.Конец = МаксимальноеЗначение;
			ПолосаБольшеЦелиМеньшеМаксимума.Подсказка = "Диапазон допустимых значений: Цель = " + ЦелевоеЗначение + " < Показатель < Макс. = " + МаксимальноеЗначение;
			ПолосаБольшеЦелиМеньшеМаксимума.ЦветФона = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
			
			ПолосаБольшеМаксимума = ПолосыДиаграммы.Добавить();
			ПолосаБольшеМаксимума.Начало = МаксимальноеЗначение;
			ПолосаБольшеМаксимума.Конец = Диаграмма.МаксимальноеЗначение-1;
			ПолосаБольшеМаксимума.Подсказка = "Диапазон значений: Показатель > Макс. = " + МаксимальноеЗначение;
			ПолосаБольшеМаксимума.ЦветФона = ЦветаПоказателя["ПозитивноеОтклонение"];
			
			Если ТекущееЗначение < МинимальноеЗначение Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["НегативноеОтклонение"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["НегативноеОтклонение"];
				
			ИначеЕсли (ТекущееЗначение > МинимальноеЗначение И ТекущееЗначение < ЦелевоеЗначение * (1 - 0.01))
				ИЛИ (ТекущееЗначение > ЦелевоеЗначение * (1 + 0.01) И ТекущееЗначение < МаксимальноеЗначение) Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
				
			ИначеЕсли (ТекущееЗначение > ЦелевоеЗначение * (1 - 0.01) И ТекущееЗначение < ЦелевоеЗначение * (1 + 0.01)) Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ЦелевоеЗначение"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ЦелевоеЗначение"];
				
			ИначеЕсли ТекущееЗначение > МаксимальноеЗначение Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ПозитивноеОтклонение"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ПозитивноеОтклонение"];
				
			КонецЕсли;
		Иначе
			// Одна полоса фактических значений
			ПолосаБольшеЦелиМеньшеМаксимума = ПолосыДиаграммы.Добавить();
			ПолосаБольшеЦелиМеньшеМаксимума.Начало = МинимальноеЗначение;
			ПолосаБольшеЦелиМеньшеМаксимума.Конец = МаксимальноеЗначение;
			ПолосаБольшеЦелиМеньшеМаксимума.Подсказка = "Цели не установлены. Диапазон без учета целевых значений.";
			ПолосаБольшеЦелиМеньшеМаксимума.ЦветФона = ЦветаПоказателя["Значение"];
			Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["Значение"];
			Диаграмма.Серии[0].Цвет = ЦветаПоказателя["Значение"];
			
		КонецЕсли;
	ИначеЕсли ЦелевойТренд = Перечисления.ВидыЦелевыхТрендовПоказателей.Минимизация Тогда
		Если ИсточникДанных.СвойстваЗоныАнализаИТренда.НомерЗоныАнализа > 0 Тогда
			ПолосаМеньшеМинимума = ПолосыДиаграммы.Добавить();
			ПолосаМеньшеМинимума.Начало = Диаграмма.БазовоеЗначение;
			ПолосаМеньшеМинимума.Конец = МинимальноеЗначение;
			ПолосаМеньшеМинимума.Подсказка = "Диапазон значений: Показатель < Мин. = " + МинимальноеЗначение;
			ПолосаМеньшеМинимума.ЦветФона = ЦветаПоказателя["ПозитивноеОтклонение"];
			
			ПолосаБольшеМинимумаМеньшеЦели = ПолосыДиаграммы.Добавить();
			ПолосаБольшеМинимумаМеньшеЦели.Начало = МинимальноеЗначение;
			ПолосаБольшеМинимумаМеньшеЦели.Конец = ЦелевоеЗначение * (1 - 0.01);
			ПолосаБольшеМинимумаМеньшеЦели.Подсказка = "Диапазон допустимых значений: Мин. = " + МинимальноеЗначение + " < Показатель < Цель = " + ЦелевоеЗначение;
			ПолосаБольшеМинимумаМеньшеЦели.ЦветФона = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
			
			ПолосаЦелевогоЗначения = ПолосыДиаграммы.Добавить();
			ПолосаЦелевогоЗначения.Начало = ЦелевоеЗначение * (1 - 0.01);
			ПолосаЦелевогоЗначения.Конец = ЦелевоеЗначение * (1 + 0.01);
			ПолосаЦелевогоЗначения.Подсказка = "Целевое значение: Цель = " + ЦелевоеЗначение;
			ПолосаЦелевогоЗначения.ЦветФона = ЦветаПоказателя["ЦелевоеЗначение"];
			
			ПолосаБольшеЦелиМеньшеМаксимума = ПолосыДиаграммы.Добавить();
			ПолосаБольшеЦелиМеньшеМаксимума.Начало = ЦелевоеЗначение * (1 + 0.01);
			ПолосаБольшеЦелиМеньшеМаксимума.Конец = МаксимальноеЗначение;
			ПолосаБольшеЦелиМеньшеМаксимума.Подсказка = "Диапазон допустимых значений: Цель = " + ЦелевоеЗначение + " < Показатель < Макс. = " + МаксимальноеЗначение;
			ПолосаБольшеЦелиМеньшеМаксимума.ЦветФона = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
			
			ПолосаБольшеМаксимума = ПолосыДиаграммы.Добавить();
			ПолосаБольшеМаксимума.Начало = МаксимальноеЗначение;
			ПолосаБольшеМаксимума.Конец = Диаграмма.МаксимальноеЗначение;
			ПолосаБольшеМаксимума.Подсказка = "Диапазон недопустимых значений: Показатель > Макс. = " + МаксимальноеЗначение;
			ПолосаБольшеМаксимума.ЦветФона = ЦветаПоказателя["НегативноеОтклонение"];
			
			Если ТекущееЗначение < МинимальноеЗначение Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["НегативноеОтклонение"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ПозитивноеОтклонение"];
				
			ИначеЕсли (ТекущееЗначение > МинимальноеЗначение И ТекущееЗначение < ЦелевоеЗначение * (1 - 0.01))
				ИЛИ (ТекущееЗначение > ЦелевоеЗначение * (1 + 0.01) И ТекущееЗначение < МаксимальноеЗначение) Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ЗонаДопустимыхОтклонений"];
				
			ИначеЕсли (ТекущееЗначение > ЦелевоеЗначение * (1 - 0.01) И ТекущееЗначение < ЦелевоеЗначение * (1 + 0.01)) Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ЦелевоеЗначение"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["ЦелевоеЗначение"];
				
			ИначеЕсли ТекущееЗначение > МаксимальноеЗначение Тогда
				Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["ПозитивноеОтклонение"];
				Диаграмма.Серии[0].Цвет = ЦветаПоказателя["НегативноеОтклонение"];
				
			КонецЕсли;
			
		Иначе
			// Одна полоса фактических значений
			ПолосаБольшеЦелиМеньшеМаксимума = ПолосыДиаграммы.Добавить();
			ПолосаБольшеЦелиМеньшеМаксимума.Начало = МинимальноеЗначение;
			ПолосаБольшеЦелиМеньшеМаксимума.Конец = МаксимальноеЗначение;
			ПолосаБольшеЦелиМеньшеМаксимума.Подсказка = "Цели не установлены. Диапазон без учета целевых значений.";
			ПолосаБольшеЦелиМеньшеМаксимума.ЦветФона = ЦветаПоказателя["Значение"];
			Диаграмма.ЦветВтулкиИзмерительнойДиаграммы = ЦветаПоказателя["Значение"];
			Диаграмма.Серии[0].Цвет = ЦветаПоказателя["Значение"];
			
		КонецЕсли;
	ИначеЕсли ЦелевойТренд = Перечисления.ВидыЦелевыхТрендовПоказателей.Диапазон Тогда
	КонецЕсли;
КонецПроцедуры

// Устанавливает настройки по умолчанию оформления объекта диаграммы
//
// Параметры
//	Диаграмма  - содержит заполняемый объект Диаграмма
//	ВариантАнализа - Ссылка на вариант анализа
//
Процедура УстановитьНастройкиПоУмолчаниюОбъектаДиаграммы(Диаграмма, ВариантАнализа)
	
	Диаграмма.ОтображатьЛегенду = ВариантАнализа.ОтображатьЛегенду;
	
	ИмяТипаДиаграммы = ПолучитьИмяЗначенияПеречисления(ВариантАнализа.ТипДиаграммы);
	Диаграмма.ТипДиаграммы = ТипДиаграммы[ИмяТипаДиаграммы];
	
	Диаграмма.Окантовка = Ложь;
	
	Если Диаграмма.ТипДиаграммы = ТипДиаграммы.Гистограмма Тогда
		Диаграмма.РежимПробелов = РежимПробеловДиаграммы.ПоловинаШирины;		
		
	ИначеЕсли Диаграмма.ТипДиаграммы = ТипДиаграммы.Круговая Тогда
		Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.ЗначениеПроцент;
		
	КонецЕсли;
	
	// Базовое значение для "пустых" точек трендов и прогнозов
	Диаграмма.БазовоеЗначение = ПолучитьБазовоеЗначениеДляДиаграмм();
	Диаграмма.ПропускатьБазовоеЗначение = Истина;
	Диаграмма.ФорматЗначенийВПодписях = "ЧДЦ=" + ВариантАнализа.ТочностьРасчетаДробнойЧасти;
	Диаграмма.РазделительПодписей = " ; ";
	
КонецПроцедуры

// Устанавливает настройки по умолчанию области заголовка диаграммы
//
// Параметры
//	Диаграмма  - содержит заполняемый объект Диаграмма
//	ВариантАнализа - Ссылка на вариант анализа
//
Процедура УстановитьНастройкиПоУмолчаниюОбластиЗаголовкаДиаграммы(Диаграмма, ВариантАнализа)
	
	ОбластьЗаголовка = Диаграмма.ОбластьЗаголовка;
	
	ОбластьЗаголовка.Верх = 0;
	ОбластьЗаголовка.Низ = 0;
	ОбластьЗаголовка.Лево = 0;
	ОбластьЗаголовка.Право = 0;
	
КонецПроцедуры

// Устанавливает настройки по умолчанию области построения диаграммы
//
// Параметры
//	Диаграмма  - содержит заполняемый объект Диаграмма
//	ВариантАнализа - Ссылка на вариант анализа
//
Процедура УстановитьНастройкиПоУмолчаниюОбластиПостроенияДиаграммы(Диаграмма, ВариантАнализа)
	
	ОбластьПостроения = Диаграмма.ОбластьПостроения;
	
	Если ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ДинамикаИзменения
		ИЛИ ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда
		
		ОбластьПостроения.ОриентацияМеток = ОриентацияМетокДиаграммы.Горизонтально;
		
	ИначеЕсли ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение
		ИЛИ ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ИзмерениеТекущегоСостояния Тогда
		
		ОбластьПостроения.ОриентацияМеток = ОриентацияМетокДиаграммы.Авто;
		
	КонецЕсли;
	
	ОбластьПостроения.ОтображатьПодписиШкалыТочек = Истина;
	ОбластьПостроения.ОтображатьЛинииЗначенийШкалы = Ложь;
	ОбластьПостроения.ФорматШкалыЗначений = "ЧДЦ=" + ВариантАнализа.ТочностьРасчетаДробнойЧасти;
	
	Если ВариантАнализа.ОтображатьЛегенду Тогда
		ОбластьПостроения.Верх = 0;
		ОбластьПостроения.Низ = 0.75;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает настройки по умолчанию области легенды диаграммы
//
// Параметры
//	Диаграмма  - содержит заполняемый объект диаграмма
//	ВариантАнализа - Ссылка на вариант анализа
//
Процедура УстановитьНастройкиПоУмолчаниюОбластиЛегендыДиаграммы(Диаграмма, ВариантАнализа)
	
	Диаграмма.ОтображатьЛегенду = ВариантАнализа.ОтображатьЛегенду;
	
	ОбластьЛегенды = Диаграмма.ОбластьЛегенды;
	ОбластьЛегенды.Прокрутка = Истина;
	
	ОбластьЛегенды.Верх = 0.82;
	ОбластьЛегенды.Низ = 1;
	ОбластьЛегенды.Лево = 0;
	ОбластьЛегенды.Право = 1;
	
КонецПроцедуры

// Устанавливает настройки по умолчанию для всех областей диаграммы
// Осуществляет вызов соответствующих процедур
//
// Параметры
//	Диаграмма  - содержит заполняемый объект Диаграмма
//	ВариантАнализа - Ссылка на вариант анализа
//
Процедура УстановитьНастройкиПоУмолчаниюДиаграммы(Диаграмма, ВариантАнализа)
	
	УстановитьНастройкиПоУмолчаниюОбъектаДиаграммы(Диаграмма, ВариантАнализа);
	
	УстановитьНастройкиПоУмолчаниюОбластиЗаголовкаДиаграммы(Диаграмма, ВариантАнализа);
	УстановитьНастройкиПоУмолчаниюОбластиПостроенияДиаграммы(Диаграмма, ВариантАнализа);
	УстановитьНастройкиПоУмолчаниюОбластиЛегендыДиаграммы(Диаграмма, ВариантАнализа);
	УстановитьНастройкиПоУмолчаниюТочекДиаграммы(Диаграмма, ВариантАнализа);
	
КонецПроцедуры

// Устанавливает настройки умолчания оформления серий диаграммы
//
// Параметры
//	СерииДиаграммы - содержит серии объекта Диаграмма
//
Процедура УстановитьНастройкиПоУмолчаниюСерийДиаграммы(СерииДиаграммы)
	
	Для каждого СерияДиаграммы Из СерииДиаграммы Цикл
		
		ИдентификаторСерии = СерияДиаграммы.Значение;
		
		Если Найти(ИдентификаторСерии, "ЦелевоеЗначение") Тогда
			СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
			СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 1);
			СерияДиаграммы.Индикатор = Истина;
			
		ИначеЕсли Найти(ИдентификаторСерии, "Приведенное") Тогда
			СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
			СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир, 1);
			СерияДиаграммы.Индикатор = Истина;
			
		ИначеЕсли Найти(ИдентификаторСерии, "Тренд")
			ИЛИ Найти(ИдентификаторСерии, "Прогноз") Тогда
			СерияДиаграммы.Индикатор = Истина;
			
		ИначеЕсли Найти(ИдентификаторСерии, "МаркерПоследнегоЗначения") Тогда
			СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Круг;
			СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
			
		Иначе
			СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
			СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

// Устанавливает настройки по умолчанию точек диаграммы
//
// Параметры
//	Диаграмма  - содержит заполняемый объект Диаграмма
//	ВариантАнализа - Ссылка на вариант анализа
//
Процедура УстановитьНастройкиПоУмолчаниюТочекДиаграммы(Диаграмма, ВариантАнализа)
	
	ТочкиДиаграммы = Диаграмма.Точки;
	
	Если ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда
		Для Каждого ТочкаДиаграммы Из ТочкиДиаграммы Цикл 
			Если Найти(ТочкаДиаграммы.Значение, "Прогноз") Тогда
				ТочкаДиаграммы.Цвет = ВариантАнализа.ХранилищеНастроекОформления.Получить().Цвета["Прогноз"];
				ТочкаДиаграммы.ПриоритетЦвета = Истина;
			ИначеЕсли Найти(ТочкаДиаграммы.Значение, "Прошлый") Тогда
				ТочкаДиаграммы.Цвет = WebЦвета.ТемноСерый;
				ТочкаДиаграммы.ПриоритетЦвета = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметры оформления серий диаграммы в соответсвии с настройками показателя 
//
// Параметры
//	СерииДиаграммы - содержит серии объекта Диаграмма
//	ВариантАнализа	   - Ссылка на вариант анализа
//
Процедура УстановитьПользовательскиеНастройкиСерийДиаграммы(СерииДиаграммы, ВариантАнализа)
	
	ЗначениеАнализаПоле = ВариантАнализа.ЗначениеАнализа.Получить();
	Если НЕ ЗначениеАнализаПоле = Неопределено Тогда
		ЗначениеАнализаИмяПоля = Строка(ЗначениеАнализаПоле);
	Иначе
		ЗначениеАнализаИмяПоля = "";
	КонецЕсли;	
	
	Если НЕ ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение Тогда
		ЦветаСерийПоказателя = ВариантАнализа.ХранилищеНастроекОформления.Получить().Цвета;
		
		Для каждого СерияДиаграммы Из СерииДиаграммы Цикл
			
			ИдентификаторСерии = СерияДиаграммы.Значение;
			
			Если Найти(ИдентификаторСерии, НСтр("ru='Признак'")) Тогда
				Продолжить;
			КонецЕсли;
			
			// Цвета и маркеры серий
			Если Найти(ИдентификаторСерии, НСтр("ru='ПриведенноеГраничноеПозитивноеОтклонение'"))
				ИЛИ Найти(ИдентификаторСерии, НСтр("ru='ПриведенноеГраничноеНегативноеОтклонение'")) Тогда
				СерияДиаграммы.Цвет = ЦветаСерийПоказателя[СтрЗаменить(ИдентификаторСерии, НСтр("ru='ПриведенноеГраничное'"), "")];
				
			ИначеЕсли Найти(ИдентификаторСерии, НСтр("ru='Прогноз'"))
				ИЛИ Найти(ИдентификаторСерии, НСтр("ru='Тренд'")) Тогда
				
				Если ВариантАнализа.ВыводитьМаркерТочекПрогноза Тогда
					СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Ромб;
					СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Сплошная, 2);
				Иначе
					СерияДиаграммы.Маркер = ТипМаркераДиаграммы.Нет;
					СерияДиаграммы.Линия = Новый Линия(ТипЛинииДиаграммы.Пунктир, 2);
				КонецЕсли;
				СерияДиаграммы.Цвет = ЦветаСерийПоказателя[ИдентификаторСерии];
				
			ИначеЕсли Найти(ИдентификаторСерии, НСтр("ru='МаркерПоследнегоЗначения'")) Тогда
				СерияДиаграммы.Цвет = ЦветаСерийПоказателя[НСтр("ru='Значение'")];
				
			ИначеЕсли Найти(ИдентификаторСерии, НСтр("ru='ЦелевойДиапазон'"))
				ИЛИ Найти(ИдентификаторСерии, НСтр("ru='ЦелевоеЗначение'")) Тогда
				СерияДиаграммы.Цвет = ЦветаСерийПоказателя[НСтр("ru='ЦелевоеЗначение'")];
				
			ИначеЕсли Найти(ИдентификаторСерии, ЗначениеАнализаИмяПоля) Тогда 
				СерияДиаграммы.Цвет = ЦветаСерийПоказателя[НСтр("ru='Значение'")];
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение Тогда
		
		Если ВариантАнализа.ТолькоЦветОсновнойСерии Тогда
			ЦветОсновнойСерии = ВариантАнализа.ХранилищеНастроекОформления.Получить().Цвета[НСтр("ru='Значение'")];
			ЦветНегативногоЗначения = ВариантАнализа.ХранилищеНастроекОформления.Получить().Цвета[НСтр("ru='НегативноеОтклонение'")];
			КоличествоСерийДиаграммы = СерииДиаграммы.Количество();
			
			ЕстьГрадиент = ВариантАнализа.ГрадиентДляПокомпонетногоСравнения;
			ВыделятьМаксимальноеЗначение = ВариантАнализа.ВыделятьМаксимальноеЗначениеДляПокомпонетногоСравнения;
			
			ИсходныйКрасный = 0;
			ИсходныйЗеленый = 0;
			ИсходныйСиний = 0;
			ИсходныйТон = 0;
			ИсходнаяНасыщенность = 0;
			ИсходнаяСветлота = 0;
			
			ПолучитьRGBWebЦвета(ЦветОсновнойСерии, ИсходныйКрасный, ИсходныйЗеленый, ИсходныйСиний);
			ПолучитьHSVпоRGB(ИсходныйКрасный, ИсходныйЗеленый, ИсходныйСиний, ИсходныйТон, ИсходнаяНасыщенность, ИсходнаяСветлота);
			
			Если ЕстьГрадиент Тогда
				ВесМаксимальнойСерии = 0;
				Для Каждого СерияДиаграммы Из СерииДиаграммы Цикл
					// По весу серии
					ТекстСерии = СерияДиаграммы.Текст;
					НачалоМаркераВесаСерии = Найти(ТекстСерии, "#");
					ДлинаЗначенияСерии = СтрДлина(ТекстСерии);
					МаркерВесаСерии = Прав(ТекстСерии, ДлинаЗначенияСерии - НачалоМаркераВесаСерии + 1);
					
					ВесМаксимальнойСерии = Макс(ВесМаксимальнойСерии, Число(СтрЗаменить(МаркерВесаСерии, "#","")));
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого СерияДиаграммы Из СерииДиаграммы Цикл
				
				Если ЕстьГрадиент Тогда
					// По весу серии
					ТекстСерии = СерияДиаграммы.Текст;
					НачалоМаркераВесаСерии = Найти(ТекстСерии, "#");
					ДлинаЗначенияСерии = СтрДлина(ТекстСерии);
					МаркерВесаСерии = Прав(ТекстСерии, ДлинаЗначенияСерии - НачалоМаркераВесаСерии + 1);
					
					СерияДиаграммы.Текст = СтрЗаменить(ТекстСерии, МаркерВесаСерии, "");
					
					ВесСерии = Число(СтрЗаменить(МаркерВесаСерии, "#",""));
					
					Если ВесМаксимальнойСерии = 0 Тогда
						Продолжить;
						
					КонецЕсли;
					
					КоэффициентВесаСерии = ВесСерии/ВесМаксимальнойСерии;
					
					СерияКрасный = 0;
					СерияЗеленый = 0;
					СерияСиний = 0;
					
					// По весу серии
					Если ВыделятьМаксимальноеЗначение И ВесСерии = ВесМаксимальнойСерии Тогда
						
						// Если выделять первое значение ИсходнаяНасыщенность * КоэффициентВесаСерии
						ПолучитьRGBпоHSV(ИсходныйТон, 100, ИсходнаяСветлота + (100 - ИсходнаяСветлота) * (1 - КоэффициентВесаСерии), СерияКрасный, СерияЗеленый, СерияСиний);
						ПолучитьДополнительныйЦветПоRGB(СерияКрасный, СерияЗеленый, СерияСиний, СерияКрасный, СерияЗеленый, СерияСиний);
						
					Иначе
						ПолучитьRGBпоHSV(ИсходныйТон, ИсходнаяНасыщенность * КоэффициентВесаСерии, ИсходнаяСветлота + (100 - ИсходнаяСветлота) * (1 - КоэффициентВесаСерии), СерияКрасный, СерияЗеленый, СерияСиний);
						
					КонецЕсли;
					
					Если ВесСерии < 0 Тогда
						СерияДиаграммы.Цвет = ЦветНегативногоЗначения;
					Иначе
						СерияДиаграммы.Цвет = Новый Цвет(СерияКрасный, СерияЗеленый, СерияСиний);
					КонецЕсли;
				Иначе
					СерияДиаграммы.Цвет = ЦветОсновнойСерии;
					
				КонецЕсли;
				
				Если ЕстьГрадиент И ВыделятьМаксимальноеЗначение И ВесСерии = ВесМаксимальнойСерии Тогда
					
					// Если выделять первое значение ИсходнаяНасыщенность * КоэффициентВесаСерии
					ПолучитьRGBпоHSV(ИсходныйТон, 100, ИсходнаяСветлота + (100 - ИсходнаяСветлота) * (1 - КоэффициентВесаСерии), СерияКрасный, СерияЗеленый, СерияСиний);
					ПолучитьДополнительныйЦветПоRGB(СерияКрасный, СерияЗеленый, СерияСиний, СерияКрасный, СерияЗеленый, СерияСиний);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметры оформления точек диаграммы в соответсвии с настройками показателя 
//
// Параметры
//	ТочкиДиаграммы - содержит точки объекта Диаграмма
//	ВариантАнализа	   - Ссылка на вариант анализа
//
Процедура УстановитьПользовательскиеНастройкиТочекДиаграммы(ТочкиДиаграммы, ВариантАнализа, ПериодыСПризнаком)
	
	ЦветаПоказателя = ВариантАнализа.ХранилищеНастроекОформления.Получить().Цвета;
	
	Для каждого ТочкаДиаграммы Из ТочкиДиаграммы Цикл
		
		ИдентификаторТочки = ТочкаДиаграммы.Значение;
		
		// Найдем точки с "Признак" = Истина в источнике данных
		Если НЕ ПериодыСПризнаком.Найти(Дата(ИдентификаторТочки)) = Неопределено Тогда
			
			ТочкаДиаграммы.ПриоритетЦвета = Истина;
			ТочкаДиаграммы.Цвет = ЦветаПоказателя["Прогноз"];
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Формирование печатной формы варианта анализа и сводного отчета.

// Заполняет шапку табличного документа (Имя показателя, статус, параметры)
//
// Параметры
//	ТабличныйДокументАнализаПоказателя 	- ТабличныйДокумент для заполнения
//	ВариантАнализа						- Ссылка на вариант анализа
//	ИсточникДанных						- ТаблицаЗначений с данными для диаграммы
//
Процедура ЗаполнитьСправочныеДанныеПоказателя(ТабличныйДокумент, ВариантАнализа, ИсточникДанных)
	
	ТипыАнализа = Перечисления.ТипыАнализаПоказателей;
	ТипАнализа = ВариантАнализа.ТипАнализа;
	
	СвойстваВариантаАнализа = ПолучитьСвойстваВариантаАнализа(ВариантАнализа, ИсточникДанных);
	МакетПечатнойФормы = МониторингЦелевыхПоказателейПовтИсп.ПолучитьМакетПечатнойФормыВариантаАнализа();
	Разделитель = МониторингЦелевыхПоказателейПовтИсп.ПолучитьРазделительПечатнойФормыВариантаАнализа();
	
	ЕстьСравнение = (ТипАнализа = ТипыАнализа.СравнениеСПрошлымПериодом);
	
	ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаНаименование");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СвойстваВариантаАнализа); 
	
	Если ЕстьСравнение Тогда
		ОтображаемоеЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ОбщийИтог;
	Иначе 
		ОтображаемоеЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение;
	КонецЕсли;
	
	ОбластьМакета.Рисунки.КартинкаСостоянияПоказателя.Картинка = ПолучитьКартинкуСостоянияДляПоказателя(ВариантАнализа, ИсточникДанных);
	ОбластьМакета.Рисунки.КартинкаТрендаПоказателя.Картинка = ПолучитьКартинкуТрендаДляПоказателя(ВариантАнализа, ИсточникДанных);
	
	ТабличныйДокумент.Вывести(ОбластьМакета, 1, "Шапка");
	ТабличныйДокумент.Вывести(Разделитель, 2, "Шапка");
	
	// Выведем информацию о цели
	ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаИнформацияОЦели");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СвойстваВариантаАнализа);
	ТабличныйДокумент.Вывести(ОбластьМакета, 3, "Шапка");
	
	// Выведем информацию о целевом показателе
	ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаИнформацияОЦелевомПоказателе");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СвойстваВариантаАнализа);
	ТабличныйДокумент.Вывести(ОбластьМакета, 3, "Шапка");
	
	ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаИнформацияОЦелевомСостоянии");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СвойстваВариантаАнализа);
	ТабличныйДокумент.Вывести(ОбластьМакета, 3, "Шапка");
	
	// Выведем информацию о фактическом состоянии
	ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаИнформацияОФактическомСостоянии");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СвойстваВариантаАнализа);
	ТабличныйДокумент.Вывести(ОбластьМакета, 3, "Шапка");
	
	// Выведем информацию о параметрах анализа
	ОбластьМакетаПараметров = МакетПечатнойФормы.ПолучитьОбласть("ШапкаИнформацияОПараметрахАнализа");
	ЗаполнитьЗначенияСвойств(ОбластьМакетаПараметров.Параметры, СвойстваВариантаАнализа);
	
	Если НЕ ЕстьСравнение Тогда
		ОбластьМакетаПараметров.УдалитьОбласть(ОбластьМакетаПараметров.Области.ШапкаПериодСравнения, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	КонецЕсли;
	
	Если НЕ ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение Тогда
		ОбластьМакета = ОбластьМакетаПараметров.ПолучитьОбласть("ШапкаОбъектАнализа");
		ОбластьМакетаПараметров.УдалитьОбласть(ОбластьМакетаПараметров.Области.ШапкаОбъектАнализа, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	КонецЕсли;
	
	Если СвойстваВариантаАнализа.ПользовательскиеОтборы = Неопределено Тогда
		ОбластьМакета = ОбластьМакетаПараметров.ПолучитьОбласть("ШапкаПользовательскиеОтборы");
		ОбластьМакетаПараметров.УдалитьОбласть(ОбластьМакетаПараметров.Области.ШапкаПользовательскиеОтборы, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаПараметров, 3, "Шапка");
	
	// Выведем информацию о параметрах анализа
	Если ВариантАнализа.РассчитыватьПрогноз 
		И НЕ ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда = Неопределено
		И НЕ ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.Пустой Тогда
		ОбластьМакетаПараметровПрогноза = МакетПечатнойФормы.ПолучитьОбласть("ШапкаИнформацияОПараметрахПрогноза");
		ЗаполнитьЗначенияСвойств(ОбластьМакетаПараметровПрогноза.Параметры, СвойстваВариантаАнализа);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПараметровПрогноза, 3, "Шапка");
		
	КонецЕсли;

	ТабличныйДокумент.Вывести(Разделитель, 3, "Шапка");
	
	ОбластьМакета = МакетПечатнойФормы.ПолучитьОбласть("ШапкаСформирован");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, СвойстваВариантаАнализа);
	ТабличныйДокумент.Вывести(ОбластьМакета, 3, "Шапка");
	
	ТабличныйДокумент.Вывести(Разделитель, 3, "Шапка");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Расчет источников данных и значений вариантов анализа.

Функция ВидОтклоненияОтЦелевогоЗначения(ВариантАнализа, ДатаЦелевогоЗначения)
	
	ВидОтклоненияОтЦелевогоЗначения = Перечисления.ВидыОтклоненийОтЦелевыхЗначенийПоказателей.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	Запрос.УстановитьПараметр("ДатаЦелевогоЗначения", ДатаЦелевогоЗначения);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ВидОтклоненияОтЦелевогоЗначения
	               |ИЗ
	               |	РегистрСведений.ЦелевыеЗначенияВариантовАнализа.СрезПоследних(%ПараметрПериода%, ВариантАнализа = &ВариантАнализа) КАК ЦелевыеЗначенияВариантовАнализаСрезПоследних";
				   
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
								"%ПараметрПериода%",
								"КОНЕЦПЕРИОДА(&ДатаЦелевогоЗначения, " + ВРег(ПолучитьИмяЗначенияПеречисления(ВариантАнализа.ПериодичностьКонтроля)) + ")");

	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда 
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ВидОтклоненияОтЦелевогоЗначения = Выборка.ВидОтклоненияОтЦелевогоЗначения;
		
	КонецЕсли;
	
	Возврат ВидОтклоненияОтЦелевогоЗначения;
	
КонецФункции

Процедура ЗаписатьДанныеВариантаАнализаВКэш(ИсточникДанных, ВариантОтображения)
	
	НаборЗаписей = РегистрыСведений.ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВариантАнализа.Значение = ИсточникДанных.ВариантАнализа;
	НаборЗаписей.Отбор.ВариантАнализа.Использование = Истина;
	НаборЗаписей.Отбор.ВариантОтображения.Значение = ВариантОтображения;
	НаборЗаписей.Отбор.ВариантОтображения.Использование = Истина;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ВариантАнализа = ИсточникДанных.ВариантАнализа;
	НоваяЗапись.ВариантОтображения = ВариантОтображения;
	НоваяЗапись.ДатаРасчета = ИсточникДанных.ДатаРасчета;
	НоваяЗапись.ИсточникДанных = Новый ХранилищеЗначения(ИсточникДанных);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОбУстановленныхЦелях(СвойстваДанныхПоПериодам, СтрокаСПоследнимиЗначениями, ВариантАнализа)
	
	ВидЦелевогоЗначения = ПолучитьВидЦелевогоЗначения(СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, ВариантАнализа);
	
	СвойстваДанныхПоПериодам.ВидЦелевогоЗначения = ВидЦелевогоЗначения;
	СвойстваДанныхПоПериодам.ЦелевоеЗначение = СтрокаСПоследнимиЗначениями.ЦелевоеЗначение;
	СвойстваДанныхПоПериодам.ЦелевойДиапазонМаксимум = СтрокаСПоследнимиЗначениями.ЦелевойДиапазонМаксимум;
	СвойстваДанныхПоПериодам.ЦелевойДиапазонМинимум = СтрокаСПоследнимиЗначениями.ЦелевойДиапазонМинимум;
	СвойстваДанныхПоПериодам.ВидОтклоненияОтЦелевогоЗначения = ВидОтклоненияОтЦелевогоЗначения(ВариантАнализа, СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения);
	СвойстваДанныхПоПериодам.ГраничноеПозитивноеОтклонение = СтрокаСПоследнимиЗначениями.ГраничноеПозитивноеОтклонение;
	СвойстваДанныхПоПериодам.ГраничноеНегативноеОтклонение = СтрокаСПоследнимиЗначениями.ГраничноеНегативноеОтклонение;
	СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение = СтрокаСПоследнимиЗначениями.ПриведенноеГраничноеПозитивноеОтклонение;
	СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение = СтрокаСПоследнимиЗначениями.ПриведенноеГраничноеНегативноеОтклонение;
	
КонецПроцедуры

Функция ИнициализироватьИсточникДанных()
	
	ИсточникДанных = Новый Структура("Цель,
	|ВариантАнализа,
	|ДинамическиеСвойстваВариантаАнализа,
	|Данные,
	|ДатаРасчета, 
	|ДанныеАктуальны,
	|РасчетыАктуальны,
	|ДляТаблицы,
	|Пустой,
	|ОшибкаРасчета,
	|ОписаниеОшибки,
	|СвойстваДанныхПоПериодам,
	|СвойстваДанныхПоПериодамСравнения,
	|СвойстваДанныхПоОбъектамАнализа,
	|СвойстваПрогнозаДанныхПоПериодам,
	|СвойстваЗоныАнализаИТренда,
	|СвойстваОбщейСтатистики", 
	Справочники.СтруктураЦелей.ПустаяСсылка(), 
	Справочники.ВариантыАнализаЦелевыхПоказателей.ПустаяСсылка(),,
	Новый ТаблицаЗначений,
	Дата(1,1,1), 
	Ложь,
	Истина,
	Ложь,
	Ложь,
	Ложь,
	""); 
	
	ДинамическиеСвойстваВариантаАнализа = Новый Структура("Размерность,
	|ОбъектАнализа,
	|ОбъектАнализаПредставление,
	|ЗначениеАнализа,
	|ЗначениеАнализаПредставление,
	|ПериодичностьКонтроля,
	|Отборы");
	ИсточникДанных.Вставить("ДинамическиеСвойстваВариантаАнализа", ДинамическиеСвойстваВариантаАнализа);
	
	СвойстваДанныхПоПериодам = Новый Структура("ДатаПервогоЗначения, 
	|ДатаПредпоследнегоЗначения, 
	|ДатаПоследнегоЗначения, 
	|ПервоеЗначение, 
	|ПредпоследнееЗначение, 
	|ПоследнееЗначение,
	|ОбщийИтог,
	|ВидЦелевогоЗначения,
	|ЦелевоеЗначение, 
	|ЦелевойДиапазонМинимум, 
	|ЦелевойДиапазонМаксимум,
	|ВидОтклоненияОтЦелевогоЗначения,
	|ГраничноеПозитивноеОтклонение, 
	|ГраничноеНегативноеОтклонение,
	|ПриведенноеГраничноеПозитивноеОтклонение, 
	|ПриведенноеГраничноеНегативноеОтклонение");
	ИсточникДанных.Вставить("СвойстваДанныхПоПериодам", СвойстваДанныхПоПериодам);
	
	СвойстваДанныхПоПериодамСравнения = Новый Структура("ДатаПервогоЗначения, 
	|ДатаПредпоследнегоЗначения, 
	|ДатаПоследнегоЗначения, 
	|ПервоеЗначение, 
	|ПредпоследнееЗначение, 
	|ПоследнееЗначение,
	|ОбщийИтог,
	|ВидЦелевогоЗначения,
	|ЦелевоеЗначение, 
	|ЦелевойДиапазонМинимум, 
	|ЦелевойДиапазонМаксимум, 
	|ВидОтклоненияОтЦелевогоЗначения,
	|ГраничноеПозитивноеОтклонение, 
	|ГраничноеНегативноеОтклонение,
	|ПриведенноеГраничноеПозитивноеОтклонение, 
	|ПриведенноеГраничноеНегативноеОтклонение");
	ИсточникДанных.Вставить("СвойстваДанныхПоПериодамСравнения", СвойстваДанныхПоПериодамСравнения);
	
	СвойстваДанныхПоОбъектамАнализа = Новый Структура("ОбъектАнализаМаксимум, 
	|ОбъектАнализаМинимум, 
	|МаксимальноеЗначение, 
	|МинимальноеЗначение");
	ИсточникДанных.Вставить("СвойстваДанныхПоОбъектамАнализа", СвойстваДанныхПоОбъектамАнализа);
	
	СвойстваПрогнозаДанныхПоПериодам = Новый Структура("Периодичность, 
	|Смещение, 
	|ДатаНачала, 
	|КоличествоПериодов, 
	|Базис, 
	|ГлубинаАнализа, 
	|ДополнятьТаблицу, 
	|СтатистическиеПараметрыТренда");
	ИсточникДанных.Вставить("СвойстваПрогнозаДанныхПоПериодам", СвойстваПрогнозаДанныхПоПериодам);
	
	СвойстваЗоныАнализаИТренда = Новый Структура("ИзмененияСтабильны, 
	|ЦелевойТренд, 
	|НомерЗоныАнализа, 
	|ФактическийТренд,
	|ПояснениеКТренду,
	|ТочекВРеальномТренде, 
	|Статус, 
	|ПояснениеКСтатусу,
	|ХарактерИзменений, 
	|ЗонаВнимания,
	|ПорядокЗоныВнимания,
	|ЦелевыеЗначенияПредставление");
	ИсточникДанных.Вставить("СвойстваЗоныАнализаИТренда", СвойстваЗоныАнализаИТренда);
	
	СтруктураСтатистики = Новый Структура("Количество, 
	|Минимум, 
	|Максимум, 
	|Среднее, 
	|Размах, 
	|СтандартноеОтклонение, 
	|Медиана");
	
	СвойстваОбщейСтатистики = Новый Структура("ПоПериодам, ПоОбъектамАнализа", СтруктураСтатистики, СтруктураСтатистики) ;
	
	ИсточникДанных.Вставить("СвойстваОбщейСтатистики", СвойстваОбщейСтатистики);
	
	Возврат ИсточникДанных;
	
КонецФункции

Функция ИсточникДанныхПустойПоИтогам(ДанныеИсточникаДанных)
	
	РезультатПроверки = Истина;
	
	КолонкиИсточникаДанных = ДанныеИсточникаДанных.Колонки;
	
	Для каждого КолонкаИсточникаДанных Из КолонкиИсточникаДанных Цикл
		ИтогПоКолонке = ДанныеИсточникаДанных.Итог(КолонкаИсточникаДанных.Имя);
		
		Если НЕ ИтогПоКолонке = Неопределено И НЕ ИтогПоКолонке = 0 Тогда
			РезультатПроверки = Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ОбщаяСтатистикаИсточникаДанных(ИсточникДанных)
	
	АнализИсточникаДанных = Новый АнализДанных;
	АнализИсточникаДанных.ТипАнализа = Тип("АнализДанныхОбщаяСтатистика");
	АнализИсточникаДанных.ИсточникДанных = ИсточникДанных;
	РезультатАнализИсточникаДанных = АнализИсточникаДанных.Выполнить();
	
	Возврат РезультатАнализИсточникаДанных;
	
КонецФункции

// Изменяет состав колонок источника данных в зависимости от назначения показателя
//
// Параметры
//		ИсточникДанных - ТаблицаЗначений - содержит данные расчета показателя
//		ВариантАнализа - Ссылка на вариант анализа
//
Процедура ПодготовитьИсточник(ИсточникДанных, ВариантАнализа)
	
	ВидыЦелевыхЗначенийВариантовАнализа	= Перечисления.ВидыЦелевыхЗначенийВариантовАнализа;	
	КолонкиИсточникаДанных				= ИсточникДанных.Данные.Колонки;
	ДанныеИсточника						= ИсточникДанных.Данные;
	ДатаПоследнегоЗначения				= ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения;
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	ТипыАнализа	= Перечисления.ТипыАнализаПоказателей;
	ТипАнализа	= ВариантАнализа.ТипАнализа;
	
	Если ТипАнализа = ТипыАнализа.ПокомпонентноеСравнение ИЛИ ИсточникДанных.ДляТаблицы Тогда
		
		// Удалим колонки, которые не нужны при покомпонентном сравнении
		КолонкиКУдалению = Новый Массив;
		КоличествоКолонок = КолонкиИсточникаДанных.Количество();
		Для Каждого КолонкаИсточникаДанных Из КолонкиИсточникаДанных Цикл 
			ИмяКолонки = КолонкаИсточникаДанных.Имя;
			Если НЕ ИмяКолонки = ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа И НЕ ИмяКолонки = ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа Тогда
				КолонкиКУдалению.Добавить(ИмяКолонки);
				
			КонецЕсли;
			
		КонецЦикла;
		Для Каждого КолонкаКУдалению Из КолонкиКУдалению Цикл 
			КолонкиИсточникаДанных.Удалить(КолонкаКУдалению);
		КонецЦикла;
		
	ИначеЕсли ТипАнализа = ТипыАнализа.ДинамикаИзменения Тогда
		
		ВидЦелевогоЗначения = ПолучитьВидЦелевогоЗначения(ДатаПоследнегоЗначения, ВариантАнализа);
		
		Если ВидЦелевогоЗначения = ВидыЦелевыхЗначенийВариантовАнализа.Значение Тогда
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМаксимум");
			Если НЕ УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМинимум");
			Если НЕ УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				
			КонецЕсли;
			
		ИначеЕсли ВидЦелевогоЗначения = ВидыЦелевыхЗначенийВариантовАнализа.Диапазон Тогда
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевоеЗначение");
			Если НЕ УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				
			КонецЕсли;
			
		ИначеЕсли ВидЦелевогоЗначения = Неопределено Тогда 
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевоеЗначение");
			Если НЕ УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМаксимум");
			Если НЕ УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМинимум");
			Если НЕ УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ПриведенноеГраничноеНегативноеОтклонение");
			Если НЕ УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ПриведенноеГраничноеПозитивноеОтклонение");
			Если НЕ УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ГраничноеНегативноеОтклонение");
		Если НЕ УдаляемаяКолонка = Неопределено Тогда
			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			
		КонецЕсли;
		
		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ГраничноеПозитивноеОтклонение");
		Если НЕ УдаляемаяКолонка = Неопределено Тогда
			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			
		КонецЕсли;
		
		Если ВариантАнализа.ТипДиаграммы <> Перечисления.ТипыДиаграммПоказателей.Гистограмма
			И ВариантАнализа.ТипДиаграммы <> Перечисления.ТипыДиаграммПоказателей.ГистограммаОбъемная Тогда 
			// Добавим серию "Маркер последнего значения"
			КолонкиИсточникаДанных.Добавить("МаркерПоследнегоЗначения",,"Последнее значение");
			ДанныеИсточника.ЗаполнитьЗначения(ПолучитьБазовоеЗначениеДляДиаграмм(), "МаркерПоследнегоЗначения");
			
			СтрокаСПоследнимЗначением = ДанныеИсточника.Найти(ДатаПоследнегоЗначения, "Период");
			СтрокаСПоследнимЗначением.МаркерПоследнегоЗначения = СтрокаСПоследнимЗначением[ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа];
			
		КонецЕсли;
		
	ИначеЕсли ТипАнализа = ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
		ВидЦелевогоЗначения = ПолучитьВидЦелевогоЗначения(ДатаПоследнегоЗначения, ВариантАнализа);
		
		Если ВидЦелевогоЗначения = ВидыЦелевыхЗначенийВариантовАнализа.Значение Тогда
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМаксимум");
			Если НЕ УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМинимум");
			Если НЕ УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				
			КонецЕсли;
			
		ИначеЕсли ВидЦелевогоЗначения = ВидыЦелевыхЗначенийВариантовАнализа.Диапазон Тогда
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевоеЗначение");
			Если НЕ УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				
			КонецЕсли;
			
		Иначе
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМаксимум");
			Если НЕ УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевойДиапазонМинимум");
			Если НЕ УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				
			КонецЕсли;
			
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевоеЗначение");
			Если НЕ УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ГраничноеПозитивноеОтклонение");
		Если НЕ УдаляемаяКолонка = Неопределено Тогда
			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			
		КонецЕсли;
		
		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ГраничноеНегативноеОтклонение");
		Если НЕ УдаляемаяКолонка = Неопределено Тогда
			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			
		КонецЕсли;
		
		// Для измерительной диаграммы оставим только последнее фактическое значение
		ОтборПоДате = Новый Структура(НСтр("ru='Период'"), НачалоДня(ДатаПоследнегоЗначения));
		МассивСтрок = ДанныеИсточника.НайтиСтроки(ОтборПоДате);
		ИсточникДанных.Данные = ДанныеИсточника.Скопировать(МассивСтрок);
		
		// Перенесем отдельные значения в структуру источника
		КолонкиИсточникаДанных = ИсточникДанных.Данные.Колонки;
		
		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ПриведенноеГраничноеНегативноеОтклонение");
		Если НЕ УдаляемаяКолонка = Неопределено Тогда
			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			
		КонецЕсли;
		
		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ПриведенноеГраничноеПозитивноеОтклонение");
		Если НЕ УдаляемаяКолонка = Неопределено Тогда
			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			
		КонецЕсли;
		
		Если ВариантАнализа.РассчитыватьПрогноз Тогда
			УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("Прогноз");
			Если НЕ УдаляемаяКолонка = Неопределено Тогда
				КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
				
			КонецЕсли;
			
		КонецЕсли;
		
		УдаляемаяКолонка = КолонкиИсточникаДанных.Найти("ЦелевоеЗначение");
		Если НЕ УдаляемаяКолонка = Неопределено Тогда
			КолонкиИсточникаДанных.Удалить(УдаляемаяКолонка);
			
		КонецЕсли;
		
	Иначе 
		
		// Для сравнения с прошлыми периодами перезаполним данные
		// на основании текущих и предыдущих значений
		ДанныеДляСравненияПериодов = Новый ТаблицаЗначений;
		КолонкиДанных = ДанныеДляСравненияПериодов.Колонки;
		
		КолонкиДанных.Добавить(НСтр("ru='ПериодСравнения'"),, НСтр("ru='Период сравнения'"));
		КолонкиДанных.Добавить(ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа, ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3), ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаПредставление);
		КолонкиДанных.Добавить("ЦелевоеЗначение", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3), НСтр("ru='Целевое значение'"));
		КолонкиДанных.Добавить("ПриведенноеГраничноеПозитивноеОтклонение", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3), НСтр("ru='Приведенное граничное позитивное отклонение'"));
		КолонкиДанных.Добавить("ПриведенноеГраничноеНегативноеОтклонение", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3), НСтр("ru='Приведенное граничное негативное отклонение'"));
		
		СтрокаПрошлогоПериода = ДанныеДляСравненияПериодов.Добавить();
		ПредставлениеПрошлогоПериода = ПредставлениеСтандартногоПериода(ИсточникДанных.ВариантАнализа.ПериодСравнения.Получить(), Ложь);
		СтрокаПрошлогоПериода.ПериодСравнения = НСтр("ru='Прошлый'") + " " + ПредставлениеПрошлогоПериода; 
		СтрокаПрошлогоПериода[ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа] = ИсточникДанных.СвойстваДанныхПоПериодамСравнения.ОбщийИтог;
		СтрокаПрошлогоПериода.ЦелевоеЗначение = ИсточникДанных.СвойстваДанныхПоПериодамСравнения.ЦелевоеЗначение; 
		СтрокаПрошлогоПериода.ПриведенноеГраничноеПозитивноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодамСравнения.ПриведенноеГраничноеПозитивноеОтклонение; 
		СтрокаПрошлогоПериода.ПриведенноеГраничноеНегативноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодамСравнения.ПриведенноеГраничноеНегативноеОтклонение; 
		
		СтрокаТекущегоПериода = ДанныеДляСравненияПериодов.Добавить();
		ПредставлениеТекущегоПериода = ПредставлениеСтандартногоПериода(ИсточникДанных.ВариантАнализа.ПериодАнализа.Получить(), Ложь);
		СтрокаТекущегоПериода.ПериодСравнения = НСтр("ru='Текущий'") + " " + ПредставлениеТекущегоПериода; 
		СтрокаТекущегоПериода[ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа] = ИсточникДанных.СвойстваДанныхПоПериодам.ОбщийИтог;
		СтрокаТекущегоПериода.ЦелевоеЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение; 
		СтрокаТекущегоПериода.ПриведенноеГраничноеПозитивноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение; 
		СтрокаТекущегоПериода.ПриведенноеГраничноеНегативноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение; 
		
		Если ВариантАнализа.РассчитыватьПрогноз И НЕ ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда.Пустой Тогда 
			ДатаПрогноза = НачалоДня(ДатаСоСмещением(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, ВариантАнализа.ПериодичностьКонтроля, 1));
			
			СтрокаПрогнозногоПериода = ДанныеДляСравненияПериодов.Добавить();
			СтрокаПрогнозногоПериода.ПериодСравнения = НСтр("ru='Прогноз'") + " " + НСтр("ru='на '") + Формат(ДатаПрогноза, "Л=ru; ДФ=dd.MM.yy"); 
			СтрокаПрогнозногоПериода[ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа] = ИсточникДанных.Данные.Найти(ДатаПрогноза, "Период").Прогноз; 
			СтрокаПрогнозногоПериода.ЦелевоеЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение; 
			СтрокаПрогнозногоПериода.ПриведенноеГраничноеПозитивноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеПозитивноеОтклонение; 
			СтрокаПрогнозногоПериода.ПриведенноеГраничноеНегативноеОтклонение = ИсточникДанных.СвойстваДанныхПоПериодам.ПриведенноеГраничноеНегативноеОтклонение; 
			
		КонецЕсли;
		
		ИсточникДанных.Данные = ДанныеДляСравненияПериодов;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИсточникДанныхВариантаАнализаИзИнформационнойБазы(ВариантАнализа, ВариантОтображения, ДинамическиеПараметры = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Инициализация переменных
	ИсточникДанных = ИнициализироватьИсточникДанных();
	
	ИсточникДанных.Цель = ВариантАнализа.Владелец;
	ИсточникДанных.ВариантАнализа = ВариантАнализа;
	
	ВариантыОтображенияВариантовАнализа = Перечисления.ВариантыОтображенияВариантовАнализа;
	ТипыАнализаПоказателей = Перечисления.ТипыАнализаПоказателей;
	МетодыРасчетаВАЦП = Перечисления.МетодыРасчетаВариантовАнализаЦелевыхПоказателей;
	
	ТипАнализа = ВариантАнализа.ТипАнализа;
	
	// Получим данные
	ПериодСравнения = ВариантАнализа.ПериодСравнения.Получить();
	ПериодАнализа = ВариантАнализа.ПериодАнализа.Получить();
	ЕстьСравнение = Ложь;
	ЕстьНарастающийИтог = (ВариантАнализа.МетодРасчетаЗначений = МетодыРасчетаВАЦП.СуммаНарастающимИтогом);
	РассчитыватьПрогноз = Ложь;
	// Получим настройки периодичности
	Если НЕ ДинамическиеПараметры = Неопределено И ДинамическиеПараметры.Свойство("ПериодичностьКонтроля") Тогда
		ПериодичностьКонтроля = ДинамическиеПараметры.ПериодичностьКонтроля;
	Иначе
		ПериодичностьКонтроля = ВариантАнализа.ПериодичностьКонтроля;
		
	КонецЕсли;
	
	// Получим настройки полей варианта анализа
	Если НЕ ДинамическиеПараметры = Неопределено И ДинамическиеПараметры.Свойство("ОбъектАнализа") Тогда
		ОбъектАнализаПоле = Новый ПолеКомпоновкиДанных(ДинамическиеПараметры.ОбъектАнализа);
		ОбъектАнализаИмяПоля = ДинамическиеПараметры.ОбъектАнализа;
		
	Иначе
		ОбъектАнализаПоле = ВариантАнализа.ОбъектАнализа.Получить();
		Если НЕ ОбъектАнализаПоле = Неопределено Тогда
			ОбъектАнализаИмяПоля = Строка(ОбъектАнализаПоле);
		Иначе
			ОбъектАнализаИмяПоля = Неопределено;
		КонецЕсли;	
		
	КонецЕсли;
	
	ЗначениеАнализаПоле = ВариантАнализа.ЗначениеАнализа.Получить();
	Если НЕ ЗначениеАнализаПоле = Неопределено Тогда
		ЗначениеАнализаИмяПоля = Строка(ЗначениеАнализаПоле);
	Иначе
		ЗначениеАнализаИмяПоля = Неопределено;
	КонецЕсли;	
	
	Если ВариантОтображения = ВариантыОтображенияВариантовАнализа.Диаграмма Тогда 
		Если ТипАнализа = ТипыАнализаПоказателей.ДинамикаИзменения Тогда
			РассчитыватьПрогноз = Истина;
			
		ИначеЕсли ТипАнализа = ТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда
			ЕстьСравнение = Истина;
			РассчитыватьПрогноз = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ВариантОтображения = ВариантыОтображенияВариантовАнализа.Таблица Тогда 
		ИсточникДанных.ДляТаблицы = Истина;
		
	КонецЕсли;
	
	ДобавлятьПрогноз = РассчитыватьПрогноз И ВариантАнализа.РассчитыватьПрогноз;
	ГоризонтПрогноза = ?(ДобавлятьПрогноз, ВариантАнализа.ГоризонтПрогноза, 0);
	
	Адреса = Справочники.ВариантыАнализаЦелевыхПоказателей.АдресаСхемыКомпоновкиДанныхИПользовательскихНастроек(ВариантАнализа);
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(Адреса.СхемаКомпоновкиДанных);
	Если Не Адреса.НастройкиКомпоновкиДанных = Неопределено Тогда
		НастройкиКомпоновкиДанных = ПолучитьИзВременногоХранилища(Адреса.НастройкиКомпоновкиДанных);
	Иначе
		НастройкиКомпоновкиДанных = Неопределено;
	КонецЕсли;
	
	Если Не Адреса.ПользовательскиеНастройки = Неопределено Тогда 
		ПользовательскиеНастройки = ПолучитьИзВременногоХранилища(Адреса.ПользовательскиеНастройки);
	Иначе
		ПользовательскиеНастройки = Неопределено;
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		ИсточникДанных.Пустой = Истина;
		ИсточникДанных.ОшибкаРасчета = Истина;
		ИсточникДанных.ОписаниеОшибки = НСтр("ru='Шаблон расчета не определен'");
		Возврат ИсточникДанных;
	КонецЕсли;
	
	ПривестиВыраженияПолейИтоговКУказаннойТочности(СхемаКомпоновкиДанных, ВариантАнализа.КратностьЗначений, ВариантАнализа.ТочностьРасчетаДробнойЧасти);
	
	УстановитьПериодВыраженийПолейИтогов(СхемаКомпоновкиДанных, ПериодичностьКонтроля);
	
	СхемаКомпоновкиДанныхПараметры = СхемаКомпоновкиДанных.Параметры;
	
	Попытка
		СхемаКомпоновкиДанныхПараметры.ПериодСравнения.Значение = ПериодСравнения;
		СхемаКомпоновкиДанныхПараметры.НачалоПериодаСравнения.Значение = ПериодСравнения.ДатаНачала;
		СхемаКомпоновкиДанныхПараметры.КонецПериодаСравнения.Значение  = ПериодСравнения.ДатаОкончания;
	Исключение
	КонецПопытки;
	
	Попытка
		Если ДобавлятьПрогноз Тогда
			ПериодАнализа.ДатаОкончания = ДатаСоСмещением(ПериодАнализа.ДатаОкончания, ПериодичностьКонтроля, ГоризонтПрогноза);
		КонецЕсли;
		
		СхемаКомпоновкиДанныхПараметры.НачалоПериода.Значение = ПериодАнализа.ДатаНачала;
		СхемаКомпоновкиДанныхПараметры.КонецПериода.Значение  = ПериодАнализа.ДатаОкончания;
	Исключение
	КонецПопытки;
	
	СхемаКомпоновкиДанныхПараметры.Период.Значение 			= ПериодАнализа;
	СхемаКомпоновкиДанныхПараметры.ВариантАнализа.Значение 	= ВариантАнализа;
	
	ТаблицаПериодов = ПолучитьТаблицуПериодов(ПериодАнализа.ДатаНачала, ПериодАнализа.ДатаОкончания, ПериодичностьКонтроля);
	Если ЕстьСравнение Тогда
		ТаблицаПериодов = ДополнитьТаблицуПериодов(ТаблицаПериодов, ПериодСравнения.ДатаНачала, ПериодСравнения.ДатаОкончания, ВариантАнализа.ПериодичностьКонтроля);
	КонецЕсли;
	
	// Установим связи наборов данных по периоду
	Если СхемаКомпоновкиДанных.Параметры.Найти("НеИзменятьСвязьПоДатеРасчета") = Неопределено
		ИЛИ (НЕ СхемаКомпоновкиДанных.Параметры.Найти("НеИзменятьСвязьПоДатеРасчета") = Неопределено
		И НЕ СхемаКомпоновкиДанных.Параметры.Найти("НеИзменятьСвязьПоДатеРасчета").Значение) Тогда
		СвязиНаборовДанных = СхемаКомпоновкиДанных.СвязиНаборовДанных;
		Для Каждого СвязьНаборовДанных Из СвязиНаборовДанных Цикл 
			Если СвязьНаборовДанных.НаборДанныхПриемник = НСтр("ru='ДанныеДляАнализа'") Тогда 
				Если Найти(СвязьНаборовДанных.ВыражениеИсточник, НСтр("ru='Период'")) Тогда
					СвязьНаборовДанных.ВыражениеПриемник = НСтр("ru='Период'") + ПолучитьИмяЗначенияПеречисления(ПериодичностьКонтроля);
					
				КонецЕсли;
			ИначеЕсли СвязьНаборовДанных.НаборДанныхПриемник = НСтр("ru='ЦелевыеЗначения'") Тогда 
				СвязьНаборовДанных.ВыражениеИсточник = "КОНЕЦПЕРИОДА(" + НСтр("ru='Период'") + ", """ + ВРег(ПолучитьИмяЗначенияПеречисления(ПериодичностьКонтроля)) + """)";
			КонецЕсли;
			
		КонецЦикла;
	ИначеЕсли НЕ СхемаКомпоновкиДанных.Параметры.Найти("НеИзменятьСвязьПоДатеРасчета") = Неопределено
		И СхемаКомпоновкиДанных.Параметры.Найти("НеИзменятьСвязьПоДатеРасчета").Значение Тогда
		СвязиНаборовДанных = СхемаКомпоновкиДанных.СвязиНаборовДанных;
		Для Каждого СвязьНаборовДанных Из СвязиНаборовДанных Цикл 
			Если Найти(СвязьНаборовДанных.ВыражениеИсточник, НСтр("ru='Период'")) Тогда
				СвязьНаборовДанных.ВыражениеИсточник = "КОНЕЦПЕРИОДА(" + НСтр("ru='Период'") + ", """ + ВРег(ПолучитьИмяЗначенияПеречисления(ПериодичностьКонтроля)) + """)";
				СвязьНаборовДанных.ВыражениеПриемник = "КОНЕЦПЕРИОДА(" + НСтр("ru='ДатаРасчета'") + ", """ + ВРег(ПолучитьИмяЗначенияПеречисления(ПериодичностьКонтроля)) + """)";
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	URLСхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	НовыйИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемаКомпоновкиДанных);
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаПериодов", ТаблицаПериодов);
	
	// Восстановим пользовательские настройки отборов
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(НовыйИсточникДоступныхНастроек);
	Если НЕ НастройкиКомпоновкиДанных = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	Если НЕ ПользовательскиеНастройки = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	КонецЕсли;
	
	// Проверим, что можно применять нарастающий итог для компоновки
	Если НЕ ОбщегоНазначенияУТКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "НарастающимИтогом") = Неопределено Тогда
		СхемаКомпоновкиДанныхПараметры.НарастающимИтогом.Значение = ЕстьНарастающийИтог;
		
	Иначе 
		ЕстьНарастающийИтог = Ложь;
		
	КонецЕсли;
	
	ПрименитьНастройкиВариантаОтображения(КомпоновщикНастроек, ВариантАнализа, ВариантОтображения, ДинамическиеПараметры);
	
	СхемаКомпоновкиДанныхНастройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакетаСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетСхемаКомпоновкиДанных = КомпоновщикМакетаСКД.Выполнить(СхемаКомпоновкиДанных, СхемаКомпоновкиДанныхНастройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")); 
	
	// Установим связь внешней, чтобы все данные таблицы периодов попали в результат
	СвязиНаборовДанных = МакетСхемаКомпоновкиДанных.СвязиНаборовДанных;
	Для Каждого СвязьНабораДанных Из СвязиНаборовДанных Цикл 
		Если СвязьНабораДанных.НаборДанныхИсточник = "ТаблицаПериодов"
			И СвязьНабораДанных.НаборДанныхПриемник = "ДанныеДляАнализа" Тогда
			СвязьНабораДанных.ТипСвязи = ТипСвязиНаборовДанныхКомпоновкиДанных.Внешняя;
			
		КонецЕсли;
	КонецЦикла;

	// Проверим корректность СКД
	ПроверкаСКДВариантаАнализаПройдена = ПроверитьСхемуКомпоновкиДанных(СхемаКомпоновкиДанных).МакетКорректный;
	
	Если НЕ ПроверкаСКДВариантаАнализаПройдена Тогда
		ИсточникДанных.Пустой = Истина;
		ИсточникДанных.ОшибкаРасчета = Истина;
		ИсточникДанных.ОписаниеОшибки = НСтр("ru='Неверный шаблон расчета'");
		
		СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
		СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
		СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ДатаСоСмещением(НачалоДня(ПериодАнализа.ДатаОкончания), ПериодичностьКонтроля, -1);
		СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = НачалоДня(ПериодАнализа.ДатаОкончания);
		
		// Определим зоны анализа, статус, тренд
		СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
		ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных));
		
		Возврат ИсточникДанных;
		
	КонецЕсли;
	
	//Заполним динамические свойства варианта анализа в источнике данных
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	Если НЕ СхемаКомпоновкиДанныхПараметры.Найти(НСтр("ru='ВалютаРасчета'")) = Неопределено 
		И СхемаКомпоновкиДанныхПараметры.Найти(НСтр("ru='ВалютаРасчета'")).Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда Тогда
		
		ВалютаРасчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВалютаРасчета");
		ДинамическиеСвойстваВариантаАнализа.Размерность = ВалютаРасчета.Значение;
		
	Иначе 
		
		ДинамическиеСвойстваВариантаАнализа.Размерность = ВариантАнализа.Владелец.Размерность;
		
	КонецЕсли;
	
	Если НЕ ОбъектАнализаПоле = Неопределено Тогда
		
		ИскомыйОбъектАнализа = СхемаКомпоновкиДанныхНастройки.ДоступныеПоляВыбора.НайтиПоле(ОбъектАнализаПоле);
		
		Если НЕ ИскомыйОбъектАнализа = Неопределено Тогда
			ДинамическиеСвойстваВариантаАнализа.ОбъектАнализаПредставление = ИскомыйОбъектАнализа.Заголовок;
			ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа = ОбъектАнализаИмяПоля;
			
		Иначе
			ИсточникДанных.Пустой = Истина;
			ИсточникДанных.ОшибкаРасчета = Истина;
			ИсточникДанных.ОписаниеОшибки = НСтр("ru='Объект анализа не найден в шаблоне расчета'");
			
			СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
			СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
			СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ДатаСоСмещением(НачалоДня(ПериодАнализа.ДатаОкончания), ПериодичностьКонтроля, -1);
			СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = НачалоДня(ПериодАнализа.ДатаОкончания);
			
			// Определим зоны анализа, статус, тренд
			СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
			ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных));
			
			Возврат ИсточникДанных;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИскомоеЗначениеАнализа = СхемаКомпоновкиДанныхНастройки.ДоступныеПоляВыбора.НайтиПоле(ЗначениеАнализаПоле);
	Если НЕ ИскомоеЗначениеАнализа = Неопределено Тогда
		ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа = ЗначениеАнализаИмяПоля;
		ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаПредставление = ИскомоеЗначениеАнализа.Заголовок;
		
	Иначе 
		ИсточникДанных.Пустой = Истина;
		ИсточникДанных.ОшибкаРасчета = Истина;
		ИсточникДанных.ОписаниеОшибки = НСтр("ru='Значение анализа не найдено в шаблоне расчета'");
		
		СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
		СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
		СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ДатаСоСмещением(НачалоДня(ПериодАнализа.ДатаОкончания), ПериодичностьКонтроля, -1);
		СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = НачалоДня(ПериодАнализа.ДатаОкончания);
		
		// Определим зоны анализа, статус, тренд
		СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
		ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных));
		
		Возврат ИсточникДанных;
			
	КонецЕсли;	
	
	ДинамическиеСвойстваВариантаАнализа.ПериодичностьКонтроля = ПериодичностьКонтроля;
	
	// Получим данные
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетСхемаКомпоновкиДанных, ВнешниеНаборыДанных,, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ИсточникДанных.Данные);
	
	Попытка
		ИсточникДанных.Данные = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	Исключение
		ИсточникДанных.Пустой = Истина;
		ИсточникДанных.ОшибкаРасчета = Истина;
		ИсточникДанных.ОписаниеОшибки = НСтр("ru='Неверный шаблон расчета'");
		
		СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
		СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
		СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ДатаСоСмещением(НачалоДня(ПериодАнализа.ДатаОкончания), ПериодичностьКонтроля, -1);
		СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = НачалоДня(ПериодАнализа.ДатаОкончания);
		
		// Определим зоны анализа, статус, тренд
		СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
		ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных));
		
		Возврат ИсточникДанных;
			
	КонецПопытки;
	
	// Проверим, что данные получены и их достаточно для анализа
	Если ИсточникДанныхПустойПоИтогам(ИсточникДанных.Данные) ИЛИ ИсточникДанных.Данные.Количество() = 0 Тогда 
		ИсточникДанных.Пустой = Истина;
		ИсточникДанных.ОписаниеОшибки = НСтр("ru='Недостаточно данных'");
		
		ИсточникДанных.Данные = Новый ТаблицаЗначений;
		
		СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
		СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
		СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ДатаСоСмещением(НачалоДня(ПериодАнализа.ДатаОкончания), ПериодичностьКонтроля, -1);
		СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = НачалоДня(ПериодАнализа.ДатаОкончания);
		
		ЗаполнитьИнформациюОбУстановленныхЦелях(СвойстваДанныхПоПериодам, ЦелевыеЗначенияВариантаАнализа(ВариантАнализа, СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения), ВариантАнализа);
		
		// Определим зоны анализа, статус, тренд
		СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
		ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных));
		
		Возврат ИсточникДанных;
		
	КонецЕсли;
	
	// Заполним параметры источника данных сводной информацией
	ИсточникДанных.ДатаРасчета = ТекущаяДата();
	ИсточникДанных.ДанныеАктуальны = Истина;
	
	// Проверим актуальность данных
	КолонкаАктуальностиРасчетов = ИсточникДанных.Данные.Колонки.Найти("РасчетыАктуальны");
	Если НЕ КолонкаАктуальностиРасчетов = Неопределено Тогда
		
		ОтборПоАктуальности = Новый Структура("РасчетыАктуальны", Истина);
		НайденныеСтрокиАктуальности = ИсточникДанных.Данные.НайтиСтроки(ОтборПоАктуальности);
		
		Если НайденныеСтрокиАктуальности.Количество() > 0 Тогда
			ИсточникДанных.РасчетыАктуальны = Истина;
			ИсточникДанных.Данные.Удалить(НайденныеСтрокиАктуальности[0]);
		
		КонецЕсли;
		
		ОтборПоАктуальности = Новый Структура("РасчетыАктуальны", Ложь);
		НайденныеСтрокиНеАктуальности = ИсточникДанных.Данные.НайтиСтроки(ОтборПоАктуальности);
		
		Если НайденныеСтрокиНеАктуальности.Количество() > 0 Тогда
			ИсточникДанных.РасчетыАктуальны = Ложь;
			ИсточникДанных.Данные.Удалить(НайденныеСтрокиНеАктуальности[0]);
			
		КонецЕсли;
		
		Если ВариантОтображения = ВариантыОтображенияВариантовАнализа.Таблица
		ИЛИ (ВариантОтображения = ВариантыОтображенияВариантовАнализа.Диаграмма
		И ТипАнализа = ТипыАнализаПоказателей.ПокомпонентноеСравнение) Тогда
			ИсточникДанных.Данные.Свернуть(ОбъектАнализаИмяПоля + ", Период, ЦелевоеЗначение, ЦелевойДиапазонМаксимум, ЦелевойДиапазонМинимум, ГраничноеПозитивноеОтклонение, ГраничноеНегативноеОтклонение, ПриведенноеГраничноеПозитивноеОтклонение, ПриведенноеГраничноеНегативноеОтклонение", ЗначениеАнализаИмяПоля);
		Иначе
			ИсточникДанных.Данные.Свернуть("Период, ЦелевоеЗначение, ЦелевойДиапазонМаксимум, ЦелевойДиапазонМинимум, ГраничноеПозитивноеОтклонение, ГраничноеНегативноеОтклонение, ПриведенноеГраничноеПозитивноеОтклонение, ПриведенноеГраничноеНегативноеОтклонение", ЗначениеАнализаИмяПоля);
		КонецЕсли;
		
		Если НЕ ИсточникДанных.РасчетыАктуальны Тогда
			ИсточникДанных.Данные = Новый ТаблицаЗначений;
			ИсточникДанных.ОписаниеОшибки = НСтр("ru='Данные не актуальны'");
			
			СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
			СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
			СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ДатаСоСмещением(НачалоДня(ПериодАнализа.ДатаОкончания), ПериодичностьКонтроля, -1);
			СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = НачалоДня(ПериодАнализа.ДатаОкончания);
			
			ЗаполнитьИнформациюОбУстановленныхЦелях(СвойстваДанныхПоПериодам, ЦелевыеЗначенияВариантаАнализа(ВариантАнализа, СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения), ВариантАнализа);
			
			// Определим зоны анализа, статус, тренд
			СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
			ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных));
			
			Возврат ИсточникДанных;
			
		КонецЕсли;
	КонецЕсли;
	
	// Обработаем таблицу значений для двух видов анализа по объектам
	Если ЕстьНарастающийИтог Тогда 
		Если ЕстьСравнение Тогда
			НарастающиеИтоги = РассчитатьНарастающийИтогСравнения(ИсточникДанных.Данные, ОбъектАнализаИмяПоля, ЗначениеАнализаИмяПоля, ПериодАнализа, ПериодСравнения);
		Иначе
			НарастающиеИтоги = РассчитатьНарастающийИтогСравнения(ИсточникДанных.Данные, ОбъектАнализаИмяПоля, ЗначениеАнализаИмяПоля, ПериодАнализа);
		КонецЕсли;
	КонецЕсли;
	
	Если ВариантОтображения = ВариантыОтображенияВариантовАнализа.Таблица
		ИЛИ (ВариантОтображения = ВариантыОтображенияВариантовАнализа.Диаграмма
		И ТипАнализа = ТипыАнализаПоказателей.ПокомпонентноеСравнение) Тогда
		ОтборПоПустымПериодам = Новый Структура("Период", Неопределено);
		
		ТаблицаПоПериодам = ИсточникДанных.Данные.Скопировать();
		НайденныеСтроки = ТаблицаПоПериодам.НайтиСтроки(ОтборПоПустымПериодам);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ТаблицаПоПериодам.Удалить(НайденнаяСтрока);
		КонецЦикла;
		ТаблицаПоПериодам.Свернуть("Период, ЦелевоеЗначение, ЦелевойДиапазонМаксимум, ЦелевойДиапазонМинимум, ГраничноеПозитивноеОтклонение, ГраничноеНегативноеОтклонение, ПриведенноеГраничноеПозитивноеОтклонение, ПриведенноеГраничноеНегативноеОтклонение", ЗначениеАнализаИмяПоля);
		
		ТаблицаПоПериодам.Сортировать("Период");
		
		НайденныеСтроки = ИсточникДанных.Данные.НайтиСтроки(ОтборПоПустымПериодам);
		Если НайденныеСтроки.Количество() = 0 Тогда
			ИсточникДанных.Пустой = Истина;
			ИсточникДанных.ОписаниеОшибки = НСтр("ru='Надостаточно данных'");
			ИсточникДанных.Данные = Новый ТаблицаЗначений;
			
			СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
			СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
			СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ДатаСоСмещением(НачалоДня(ПериодАнализа.ДатаОкончания), ПериодичностьКонтроля, -1);
			СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = НачалоДня(ПериодАнализа.ДатаОкончания);
			
			ЗаполнитьИнформациюОбУстановленныхЦелях(СвойстваДанныхПоПериодам, ЦелевыеЗначенияВариантаАнализа(ВариантАнализа, СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения), ВариантАнализа);
			
			// Определим зоны анализа, статус, тренд
			СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
			ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных));
			
			Возврат ИсточникДанных;
			
		КонецЕсли;
		
		ИсточникДанных.Данные = ИсточникДанных.Данные.Скопировать(НайденныеСтроки);
		ИсточникДанных.Данные.Сортировать(ЗначениеАнализаИмяПоля + " " + "УБЫВ");
		
		ИсточникДанныхСПериодами = ТаблицаПоПериодам;
		
	Иначе
		ИсточникДанныхСПериодами = ИсточникДанных.Данные;
		
	КонецЕсли;
	
	// Проверим, что после анализа и подготовки источника, в нем все еще достаточно данных
	Если ИсточникДанныхПустойПоИтогам(ИсточникДанных.Данные) ИЛИ ИсточникДанных.Данные.Количество() = 0 Тогда 
		ИсточникДанных.Пустой = Истина;
		ИсточникДанных.ОписаниеОшибки = НСтр("ru='Недостаточно данных'");
		
		ИсточникДанных.Данные = Новый ТаблицаЗначений;
		
		СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
		СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
		СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ДатаСоСмещением(НачалоДня(ПериодАнализа.ДатаОкончания), ПериодичностьКонтроля, -1);
		СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = НачалоДня(ПериодАнализа.ДатаОкончания);
		
		ЗаполнитьИнформациюОбУстановленныхЦелях(СвойстваДанныхПоПериодам, ЦелевыеЗначенияВариантаАнализа(ВариантАнализа, СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения), ВариантАнализа);
		
		// Определим зоны анализа, статус, тренд
		СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
		ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных));
		
		Возврат ИсточникДанных;
		
	КонецЕсли;
	
	СвойстваДанныхПоПериодам = ИсточникДанных.СвойстваДанныхПоПериодам;
	СвойстваДанныхПоПериодам.ДатаПервогоЗначения = ПериодАнализа.ДатаНачала;
	КоличествоСтрокДанных = ИсточникДанныхСПериодами.Количество();
	Если НЕ ПустаяСтрока(ИсточникДанныхСПериодами[КоличествоСтрокДанных - 1 - ГоризонтПрогноза].Период) Тогда
		СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения = ИсточникДанныхСПериодами[КоличествоСтрокДанных - 1 - ГоризонтПрогноза].Период;
	КонецЕсли;
	Если КоличествоСтрокДанных > (1 + ГоризонтПрогноза) И НЕ ПустаяСтрока(ИсточникДанныхСПериодами[КоличествоСтрокДанных - 2 - ГоризонтПрогноза].Период) Тогда
		СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения = ИсточникДанныхСПериодами[КоличествоСтрокДанных - 2 - ГоризонтПрогноза].Период;
	КонецЕсли;
	
	СтрокаСПоследнимиЗначениями = ИсточникДанныхСПериодами.Найти(СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, "Период");
	
	СвойстваДанныхПоПериодам.ПервоеЗначение = ИсточникДанныхСПериодами.Найти(СвойстваДанныхПоПериодам.ДатаПервогоЗначения, "Период")[ЗначениеАнализаИмяПоля];
	
	СтрокаПредпоследнегоЗначения = ИсточникДанныхСПериодами.Найти(СвойстваДанныхПоПериодам.ДатаПредпоследнегоЗначения, "Период");
	Если НЕ СтрокаПредпоследнегоЗначения = Неопределено Тогда 
		СвойстваДанныхПоПериодам.ПредпоследнееЗначение = СтрокаПредпоследнегоЗначения[ЗначениеАнализаИмяПоля];
	Иначе
		СвойстваДанныхПоПериодам.ПредпоследнееЗначение = СтрокаСПоследнимиЗначениями[ЗначениеАнализаИмяПоля];
	КонецЕсли;
	
	СвойстваДанныхПоПериодам.ПоследнееЗначение = СтрокаСПоследнимиЗначениями[ЗначениеАнализаИмяПоля];
	Если ЕстьНарастающийИтог Тогда
		СвойстваДанныхПоПериодам.ОбщийИтог = ?(ЕстьСравнение, НарастающиеИтоги.ОбщийИтог, 0);
	Иначе
		СвойстваДанныхПоПериодам.ОбщийИтог = СвойстваДанныхПоПериодам.ПоследнееЗначение;
	КонецЕсли;
	
	ЗаполнитьИнформациюОбУстановленныхЦелях(СвойстваДанныхПоПериодам, СтрокаСПоследнимиЗначениями, ВариантАнализа);
	
	Если ДобавлятьПрогноз Тогда
		// Добавим данные прогноза
		Если ПериодичностьКонтроля = Перечисления.Периодичность.Год Тогда
			
			ДатаНачала = НачалоГода(ДатаСоСмещением(ПериодАнализа.ДатаОкончания, ПериодичностьКонтроля, -ГоризонтПрогноза));
			
		ИначеЕсли ПериодичностьКонтроля = Перечисления.Периодичность.Полугодие Тогда
			
			ДатаНачала = ДатаСоСмещением(НачалоКвартала(ДатаСоСмещением(ПериодАнализа.ДатаОкончания, ПериодичностьКонтроля, -ГоризонтПрогноза)), Перечисления.Периодичность.Квартал, -1);
			
		ИначеЕсли ПериодичностьКонтроля = Перечисления.Периодичность.Квартал Тогда
			
			ДатаНачала = НачалоКвартала(ДатаСоСмещением(ПериодАнализа.ДатаОкончания, ПериодичностьКонтроля, -ГоризонтПрогноза));
			
		ИначеЕсли ПериодичностьКонтроля = Перечисления.Периодичность.Месяц Тогда
			
			ДатаНачала = НачалоМесяца(ДатаСоСмещением(ПериодАнализа.ДатаОкончания, ПериодичностьКонтроля, -ГоризонтПрогноза));
			
		ИначеЕсли ПериодичностьКонтроля = Перечисления.Периодичность.Декада Тогда
			
			ДатаНачала = ДатаСоСмещением(ПериодАнализа.ДатаОкончания, ПериодичностьКонтроля, -ГоризонтПрогноза);
			
		ИначеЕсли ПериодичностьКонтроля = Перечисления.Периодичность.Неделя Тогда
			
			ДатаНачала = НачалоНедели(ДатаСоСмещением(ПериодАнализа.ДатаОкончания, ПериодичностьКонтроля, -ГоризонтПрогноза));
			
		ИначеЕсли ПериодичностьКонтроля = Перечисления.Периодичность.День Тогда
			
			ДатаНачала = НачалоДня(ДатаСоСмещением(ПериодАнализа.ДатаОкончания, ПериодичностьКонтроля, -ГоризонтПрогноза));
			
		КонецЕсли;
		
		ШагПериодов = 1;
		Базис = Новый Структура("ДатаНачала, Период, КоличествоПериодов", ДатаНачала, ПериодичностьКонтроля, ШагПериодов);
		
		ГлубинаАнализа = ВариантАнализа.ГлубинаАнализаПрогноза;
		ДополнятьТаблицу = Истина;
		Прогноз = Истина;
		
		КолонкаПериода = НСтр("ru='Период'");
		КолонкаПризнака = НСтр("ru='Признак'");
		
		// Заполним статистические свойства данных прогноза
		СвойстваПрогнозаДанныхПоПериодам = ИсточникДанных.СвойстваПрогнозаДанныхПоПериодам;
		СвойстваПрогнозаДанныхПоПериодам.Периодичность = ПериодичностьКонтроля;
		СвойстваПрогнозаДанныхПоПериодам.Смещение = ГоризонтПрогноза;
		СвойстваПрогнозаДанныхПоПериодам.ДатаНачала = ДатаНачала;
		СвойстваПрогнозаДанныхПоПериодам.КоличествоПериодов = ШагПериодов;
		СвойстваПрогнозаДанныхПоПериодам.Базис = Базис;
		СвойстваПрогнозаДанныхПоПериодам.ГлубинаАнализа = ГлубинаАнализа;
		СвойстваПрогнозаДанныхПоПериодам.ДополнятьТаблицу = ДополнятьТаблицу;
		
		СвойстваПрогнозаДанныхПоПериодам.СтатистическиеПараметрыТренда = СформироватьПрогнозныеЗначенияИсточникаДанных(ИсточникДанных, КолонкаПериода, ЗначениеАнализаИмяПоля, КолонкаПризнака, Базис, ГлубинаАнализа, ВариантАнализа.ГоризонтПрогноза, ДополнятьТаблицу, Прогноз);
	КонецЕсли;
	
	Если ЕстьСравнение Тогда
		
		// Заполним статистические свойства данных по периодам сравнения
		СвойстваДанныхПоПериодамСравнения = ИсточникДанных.СвойстваДанныхПоПериодамСравнения;
		СвойстваДанныхПоПериодамСравнения.ДатаПервогоЗначения = ПериодСравнения.ДатаНачала;
		СвойстваДанныхПоПериодамСравнения.ДатаПоследнегоЗначения = ПолучитьНачалоПериода(ПериодСравнения.ДатаОкончания, ПериодичностьКонтроля);
		СвойстваДанныхПоПериодамСравнения.ДатаПредпоследнегоЗначения = ДатаСоСмещением(СвойстваДанныхПоПериодамСравнения.ДатаПоследнегоЗначения, ПериодичностьКонтроля, -1);
		
		СтрокаСПоследнимиЗначениями = ИсточникДанныхСПериодами.Найти(СвойстваДанныхПоПериодамСравнения.ДатаПоследнегоЗначения, "Период");
		
		СвойстваДанныхПоПериодамСравнения.ПервоеЗначение = ИсточникДанныхСПериодами.Найти(СвойстваДанныхПоПериодамСравнения.ДатаПервогоЗначения, "Период")[ЗначениеАнализаИмяПоля];
		СвойстваДанныхПоПериодамСравнения.ПоследнееЗначение = СтрокаСПоследнимиЗначениями[ЗначениеАнализаИмяПоля];
		Если ЕстьНарастающийИтог Тогда
			СвойстваДанныхПоПериодамСравнения.ОбщийИтог = НарастающиеИтоги.ОбщийИтогСравнения;
		Иначе
			СвойстваДанныхПоПериодамСравнения.ОбщийИтог = СвойстваДанныхПоПериодамСравнения.ПоследнееЗначение;
		КонецЕсли;
		
		ЗаполнитьИнформациюОбУстановленныхЦелях(СвойстваДанныхПоПериодамСравнения, СтрокаСПоследнимиЗначениями, ВариантАнализа);
		
	КонецЕсли;
	
	// Определим свойства общей статистики
	СвойстваОбщейСтатистики = ИсточникДанных.СвойстваОбщейСтатистики;
	
	ЗаполнитьЗначенияСвойств(СвойстваОбщейСтатистики, ОбщаяСтатистикаИсточникаДанных(ИсточникДанныхСПериодами).НепрерывныеПоля[ЗначениеАнализаИмяПоля]);
	
	Если НЕ ВариантОтображения = ВариантыОтображенияВариантовАнализа.Кратко 
		И ТипАнализа = ТипыАнализаПоказателей.ПокомпонентноеСравнение Тогда
		
		// Удалим данные для статистики по периоду
		ОтборПоПустомуОбъектуАнализа = Новый Структура(ОбъектАнализаИмяПоля, Неопределено);
		НайденныеСтроки = ИсточникДанных.Данные.НайтиСтроки(ОтборПоПустомуОбъектуАнализа);
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
			ИсточникДанных.Данные.Удалить(НайденнаяСтрока);
			
		КонецЦикла;
		
		ИсточникДанных.Данные.Колонки.Удалить("Период");
		
		// Заполним статистические свойства данных по объектам анализа
		СвойстваДанныхПоОбъектамАнализа = ИсточникДанных.СвойстваДанныхПоОбъектамАнализа;
		СвойстваДанныхПоОбъектамАнализа.ОбъектАнализаМаксимум = ИсточникДанных.Данные[0][ОбъектАнализаИмяПоля];
		СвойстваДанныхПоОбъектамАнализа.ОбъектАнализаМинимум = ИсточникДанных.Данные[ИсточникДанных.Данные.Количество()-1][ОбъектАнализаИмяПоля];
		СвойстваДанныхПоОбъектамАнализа.МаксимальноеЗначение = ИсточникДанных.Данные[0][ЗначениеАнализаИмяПоля];
		СвойстваДанныхПоОбъектамАнализа.МинимальноеЗначение = ИсточникДанных.Данные[ИсточникДанных.Данные.Количество()-1][ЗначениеАнализаИмяПоля];
		
		ЗаполнитьЗначенияСвойств(СвойстваОбщейСтатистики.ПоОбъектамАнализа, ОбщаяСтатистикаИсточникаДанных(ИсточникДанных.Данные).НепрерывныеПоля[ЗначениеАнализаИмяПоля]);
		
	КонецЕсли;
	
	// Определим зоны анализа, статус, тренд
	СвойстваЗоныАнализаИТренда = ИсточникДанных.СвойстваЗоныАнализаИТренда;
	ЗаполнитьЗначенияСвойств(СвойстваЗоныАнализаИТренда, СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных));
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИсточникДанных;
	
КонецФункции

Функция ПолучитьИсточникДанныхВариантаАнализаИзКэша(ВариантАнализа, ВариантОтображения)
	
	ИсточникДанных = Неопределено; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	Запрос.УстановитьПараметр("ВариантОтображения", ВариантОтображения);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ПериодАктуальностиРасчета", ПериодАктуальностиРасчетаВМинутах(ВариантАнализа.ПериодАктуальностиРасчета, ВариантАнализа.ВидПериодаАктуальностиРасчета));
	Запрос.Текст = ТекстЗапросаДанныхВариантаАнализаВКэше();
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ИсточникДанных = Выборка.ИсточникДанных.Получить();
		ИсточникДанных.ДатаРасчета = Выборка.ДатаРасчета;
		ИсточникДанных.ДанныеАктуальны = Выборка.ДанныеАктуальны;
		
	КонецЕсли;
	
	Возврат ИсточникДанных;
	
КонецФункции

Функция ПорядокЗоныВнимания(ЗонаВнимания)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЗонаВнимания);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗоныВниманияВариантовАнализа.Порядок КАК Порядок
	               |ИЗ
	               |	Перечисление.ЗоныВниманияВариантовАнализа КАК ЗоныВниманияВариантовАнализа
	               |ГДЕ
	               |	ЗоныВниманияВариантовАнализа.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Порядок;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ПривестиВыраженияПолейИтоговКУказаннойТочности(СхемаКомпоновки, ВидПредставленияЧисла, Разрядность)
	
	ПоляИтогов = СхемаКомпоновки.ПоляИтога;
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	
	ЗнаменательТребуется = Ложь;
	
	Если ВидПредставленияЧисла = ВидыПредставленияЧисел.ВТысячах Тогда
		Знаменатель = СтрЗаменить(Строка(Pow(10, 3)), Символы.НПП, "");
		ЗнаменательТребуется = Истина;
	ИначеЕсли ВидПредставленияЧисла = ВидыПредставленияЧисел.ВМиллионах Тогда
		Знаменатель = СтрЗаменить(Строка(Pow(10, 6)), Символы.НПП, "");
		ЗнаменательТребуется = Истина;
	КонецЕсли;
	
	Для Каждого ПолеИтога Из ПоляИтогов Цикл 
		Если ПолеИтога.ПутьКДанным = "ГраничноеПозитивноеОтклонение"
			ИЛИ ПолеИтога.ПутьКДанным = "ГраничноеНегативноеОтклонение" Тогда
			ПолеИтога.Выражение = "ВЫБОР КОГДА ВидОтклоненияОтЦелевогоЗначения = ЗНАЧЕНИЕ(Перечисление.ВидыОтклоненийОтЦелевыхЗначенийПоказателей.Абсолютное)
			|ТОГДА ВЫРАЗИТЬ(" + ПолеИтога.Выражение + ?(ЗнаменательТребуется,"/" + Знаменатель,"") + ",""Число(15," + Разрядность + ")"")
			|ИНАЧЕ " + ПолеИтога.Выражение 
			+ " КОНЕЦ";
			
		Иначе
			ПолеИтога.Выражение = "ВЫРАЗИТЬ(" + ПолеИтога.Выражение 
			+ ?(ЗнаменательТребуется,"/" + Знаменатель,"") 
			+ ",""Число(15," + Разрядность + ")"")";
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьНастройкиВариантаОтображения(КомпоновщикНастроек, ВариантАнализа, ВариантОтображения, ДинамическиеПараметры = Неопределено)
	
	ВариантыОтображенияВариантовАнализа = Перечисления.ВариантыОтображенияВариантовАнализа;
	ТипыАнализаПоказателей = Перечисления.ТипыАнализаПоказателей;
	
	ТипАнализа = ВариантАнализа.ТипАнализа;
	
	// Получим настройки периодичности контроля
	Если НЕ ДинамическиеПараметры = Неопределено И ДинамическиеПараметры.Свойство("ПериодичностьКонтроля") Тогда
		ТипДополнения = ПолучитьИмяЗначенияПеречисления(ДинамическиеПараметры.ПериодичностьКонтроля);
		
	Иначе
		ТипДополнения = ПолучитьИмяЗначенияПеречисления(ВариантАнализа.ПериодичностьКонтроля);
		
	КонецЕсли;
	
	// Получим настройки полей варианта анализа
	Если НЕ ДинамическиеПараметры = Неопределено И ДинамическиеПараметры.Свойство("ОбъектАнализа") Тогда
		ОбъектАнализаПоле = Новый ПолеКомпоновкиДанных(ДинамическиеПараметры.ОбъектАнализа);
		ОбъектАнализаИмяПоля = ДинамическиеПараметры.ОбъектАнализа;
		
	Иначе
		ОбъектАнализаПоле = ВариантАнализа.ОбъектАнализа.Получить();
		Если НЕ ОбъектАнализаПоле = Неопределено Тогда
			ОбъектАнализаИмяПоля = Строка(ОбъектАнализаПоле);
		Иначе
			ОбъектАнализаИмяПоля = Неопределено;
		КонецЕсли;	
		
	КонецЕсли;
	
	ЗначениеАнализаПоле = ВариантАнализа.ЗначениеАнализа.Получить();
	Если НЕ ЗначениеАнализаПоле = Неопределено Тогда
		ЗначениеАнализаИмяПоля = Строка(ЗначениеАнализаПоле);
	Иначе
		ЗначениеАнализаИмяПоля = Неопределено;
	КонецЕсли;	
		
	КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	Если ВариантОтображения = ВариантыОтображенияВариантовАнализа.Кратко Тогда 
		ГруппировкаПериода = ОбщегоНазначенияУТКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек, "Период");
		
	ИначеЕсли ВариантОтображения = ВариантыОтображенияВариантовАнализа.Диаграмма Тогда 
		Если ТипАнализа = ТипыАнализаПоказателей.ДинамикаИзменения Тогда
			ГруппировкаПериода = ОбщегоНазначенияУТКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек, "Период");
			
		ИначеЕсли ТипАнализа = ТипыАнализаПоказателей.ПокомпонентноеСравнение Тогда
			ГруппировкаОбъектаАнализа = ОбщегоНазначенияУТКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек, ОбъектАнализаИмяПоля);
			
			ГруппировкаПериода = ДобавитьГруппировкуВКореньСтруктуры(КомпоновщикНастроек, "Период");
			
			// Установим упорядочивание
			УстановитьУпорядочиваниеГруппировки(ГруппировкаОбъектаАнализа, ВариантАнализа.ЗначениеАнализа.Получить(), НаправлениеСортировкиКомпоновкиДанных.Убыв);
			
		ИначеЕсли ТипАнализа = ТипыАнализаПоказателей.ИзмерениеТекущегоСостояния Тогда
			ГруппировкаПериода = ОбщегоНазначенияУТКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек, "Период");
			
		ИначеЕсли ТипАнализа = ТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда
			ГруппировкаПериода = ОбщегоНазначенияУТКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек, "Период");
			
		КонецЕсли;
		
	ИначеЕсли ВариантОтображения = ВариантыОтображенияВариантовАнализа.Таблица Тогда 
		ГруппировкаОбъектаАнализа = ОбщегоНазначенияУТКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроек, ОбъектАнализаИмяПоля);
			
		ГруппировкаПериода = ДобавитьГруппировкуВКореньСтруктуры(КомпоновщикНастроек, "Период");
		
		// Установим упорядочивание
		УстановитьУпорядочиваниеГруппировки(ГруппировкаОбъектаАнализа, ВариантАнализа.ЗначениеАнализа.Получить(), НаправлениеСортировкиКомпоновкиДанных.Убыв);
		
	КонецЕсли;
	
	Если НЕ КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы.Найти("РасчетыАктуальны") = Неопределено Тогда
		ГруппировкаАктуальности = ДобавитьГруппировкуВКореньСтруктуры(КомпоновщикНастроек, "РасчетыАктуальны");
	КонецЕсли;
	
	// Добавим выбранное значение анализа и удалим добавленные ранее
	СлужебныеПоля = Справочники.СтруктураЦелей.СлужебныеПоляЗначенияАнализа();
	ПоляКУдалению = Новый Массив;
	ВыбранныеПоля = КомпоновщикНастроек.Настройки.Выбор.Элементы;
	Для Каждого ВыбранноеПоле Из ВыбранныеПоля Цикл 
		Если СлужебныеПоля.Найти(Строка(ВыбранноеПоле.Поле)) = Неопределено Тогда
			ПоляКУдалению.Добавить(ВыбранноеПоле);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ПолеКУдалению Из ПоляКУдалению Цикл 
		ВыбранныеПоля.Удалить(ПолеКУдалению);
	КонецЦикла;
	ОбщегоНазначенияУТКлиентСервер.ДобавитьВыбранноеПоле(КомпоновщикНастроек, ЗначениеАнализаПоле);
	
	// Установим тип дополнения
	ПолеНачалоПериода = Новый ПолеКомпоновкиДанных("ПараметрыДанных.НачалоПериода");
	ПолеКонецПериода = Новый ПолеКомпоновкиДанных("ПараметрыДанных.КонецПериода");
	
КонецПроцедуры

Функция РассчитатьНарастающийИтогСравнения(ТаблицаПоПериодам, КолонкаОбъектаАнализа, КолонкаРасчета, ПериодАнализа, ПериодСравнения = Неопределено)
	
	НарастающиеИтоги = Новый Структура("ОбщийИтог, ОбщийИтогСравнения", 0, 0);
	
	ПериодСравненияУказан = (НЕ ПериодСравнения = Неопределено);
	
	Если ПериодСравненияУказан Тогда
		КонецПериодаСравнения = ПериодСравнения.ДатаОкончания;
		
	КонецЕсли;
	
	ПериодыСовпадают = (ПериодАнализа = ПериодСравнения);
	
	ЕстьКолонкаОбъектАнализа = (НЕ ТаблицаПоПериодам.Колонки.Найти(КолонкаОбъектаАнализа) = Неопределено);
	
	БазовыйИндекс = 0;
	БазовыйИндексОбъектаАнализа = 0;
	ЕстьОбъектыАнализа = Ложь;
	ОбщийИтог = 0;
	ОбщийИтогОбъектаАнализа = 0;
	ОбщийИтогСравнения = 0;
	СчитатьОбщийИтог = Ложь;
	СчитатьОбщийИтогСравнения = Ложь;
	КоличествоСтрокТаблицы = ТаблицаПоПериодам.Количество();
	Для Каждого СтрокаТаблицы Из ТаблицаПоПериодам Цикл 
		
		Если ЕстьКолонкаОбъектАнализа И НЕ СтрокаТаблицы[КолонкаОбъектаАнализа] = Неопределено Тогда
			Продолжить;
			
		КонецЕсли;
		
		ИндексСтрокиТаблицы = ТаблицаПоПериодам.Индекс(СтрокаТаблицы);
		
		Если ПериодСравненияУказан И СтрокаТаблицы.Период < КонецПериодаСравнения Тогда
			Если НЕ СчитатьОбщийИтогСравнения Тогда
				БазовыйИндекс = ИндексСтрокиТаблицы;
				СчитатьОбщийИтогСравнения = Истина;
				СчитатьОбщийИтог = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ СчитатьОбщийИтог Тогда
				БазовыйИндекс = ИндексСтрокиТаблицы;
				СчитатьОбщийИтогСравнения = Ложь;
				СчитатьОбщийИтог = Истина;
			КонецЕсли;
		КонецЕсли;
			
		Если СчитатьОбщийИтог Тогда
			ОбщийИтог = ОбщийИтог + СтрокаТаблицы[КолонкаРасчета];
			ОбщийИтогОбъектаАнализа = ОбщийИтогОбъектаАнализа + СтрокаТаблицы[КолонкаРасчета];
			
		КонецЕсли;
		
		Если СчитатьОбщийИтогСравнения Тогда
			ОбщийИтогСравнения = ОбщийИтогСравнения + СтрокаТаблицы[КолонкаРасчета];
			
		КонецЕсли;
		
		Если ИндексСтрокиТаблицы > БазовыйИндекс Тогда
			СтрокаТаблицы[КолонкаРасчета] = СтрокаТаблицы[КолонкаРасчета] + ТаблицаПоПериодам[ИндексСтрокиТаблицы-1][КолонкаРасчета];
			
		КонецЕсли;
		
		Если ЕстьОбъектыАнализа И ИндексСтрокиТаблицы = (КоличествоСтрокТаблицы - 1) Тогда
			ТаблицаПоПериодам[БазовыйИндексОбъектаАнализа][КолонкаРасчета] = ОбщийИтогОбъектаАнализа;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПериодыСовпадают Тогда
		НарастающиеИтоги.ОбщийИтог = ОбщийИтогСравнения;
	Иначе 
		НарастающиеИтоги.ОбщийИтог = ОбщийИтог;
	КонецЕсли;
	НарастающиеИтоги.ОбщийИтогСравнения = ОбщийИтогСравнения;
	
	Возврат НарастающиеИтоги;
	
КонецФункции

Функция СвойстваДанныхВариантаАнализаВКэше(ВариантАнализа, ВариантОтображения)
	
	СвойстваДанныхВариантаАнализаВКэше = Новый Структура("ДатаРасчета, ДанныеАктуальны", Дата(1,1,1), Ложь); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	Запрос.УстановитьПараметр("ВариантОтображения", ВариантОтображения);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ПериодАктуальностиРасчета", ПериодАктуальностиРасчетаВМинутах(ВариантАнализа.ПериодАктуальностиРасчета, ВариантАнализа.ВидПериодаАктуальностиРасчета));
	Запрос.Текст = ТекстЗапросаДанныхВариантаАнализаВКэше(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		СвойстваДанныхВариантаАнализаВКэше.ДатаРасчета = Выборка.ДатаРасчета;
		СвойстваДанныхВариантаАнализаВКэше.ДанныеАктуальны = Выборка.ДанныеАктуальны;
		
	КонецЕсли;
	
	Возврат СвойстваДанныхВариантаАнализаВКэше;
	
КонецФункции

// Возвращает зону внимания, характеризующую состояние(статус) показателя
//
// Параметры
//	ВариантАнализа		- Ссылка на вариант анализа
//	ИсточникДанных 	- ТаблицаЗначений с данными для диаграммы
//
// Возвращаемое значение:
//	Структура		- свойства зоны анализа
//
Функция СвойстваЗоныАнализа(ВариантАнализа, ИсточникДанных)
	
	ЦелевойПоказатель = ВариантАнализа.Владелец;
	
	СвойстваЗоныАнализаИТренда = Новый Структура("ИзмененияСтабильны, 
	|ЦелевойТренд, 
	|НомерЗоныАнализа, 
	|ФактическийТренд,
	|ПояснениеКТренду,
	|ТочекВРеальномТренде, 
	|Статус, 
	|ПояснениеКСтатусу,
	|ХарактерИзменений, 
	|ЗонаВнимания,
	|ПорядокЗоныВнимания");
	
	МатрицаСостояний = МониторингЦелевыхПоказателейПовтИсп.ПолучитьМатрицуСостояний();
	ЗонаАнализа = ЗонаАнализаЗначения(ИсточникДанных, ЦелевойПоказатель.ЦелевойТренд, ПолучитьВидЦелевогоЗначения(ИсточникДанных.СвойстваДанныхПоПериодам.ДатаПоследнегоЗначения, ВариантАнализа), ВариантАнализа.ТочностьРасчетаДробнойЧасти);
	ИмяОбластиМатрицыСостояний = "Нестабильный" + "_" + ЗонаАнализа.ФактическийТренд + "_" + "Зона_" + ЗонаАнализа.НомерЗоны + "_" + ПолучитьИмяЗначенияПеречисления(ЦелевойПоказатель.ЦелевойТренд);
	
	СвойстваЗоныАнализаИТренда.ИзмененияСтабильны = Ложь;
	СвойстваЗоныАнализаИТренда.ЦелевойТренд = ЦелевойПоказатель.ЦелевойТренд;
	СвойстваЗоныАнализаИТренда.НомерЗоныАнализа = ЗонаАнализа.НомерЗоны;
	СвойстваЗоныАнализаИТренда.ФактическийТренд = ЗонаАнализа.ФактическийТренд;
	СвойстваЗоныАнализаИТренда.ПояснениеКТренду = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ПояснениеКТренду").ТекущаяОбласть.Текст;
	СвойстваЗоныАнализаИТренда.ТочекВРеальномТренде = Неопределено;
	СвойстваЗоныАнализаИТренда.Статус = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "Статус").ТекущаяОбласть.Текст;
	СвойстваЗоныАнализаИТренда.ПояснениеКСтатусу = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ПояснениеКСтатусу").ТекущаяОбласть.Текст;
	СвойстваЗоныАнализаИТренда.ХарактерИзменений = МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ХарактерИзменений").ТекущаяОбласть.Текст;
	СвойстваЗоныАнализаИТренда.ЗонаВнимания = Перечисления.ЗоныВниманияВариантовАнализа[МатрицаСостояний.ПолучитьОбласть(ИмяОбластиМатрицыСостояний + "|" + "ЗонаВнимания").ТекущаяОбласть.Текст];
	СвойстваЗоныАнализаИТренда.ПорядокЗоныВнимания = ПорядокЗоныВнимания(СвойстваЗоныАнализаИТренда.ЗонаВнимания);
	
	Возврат СвойстваЗоныАнализаИТренда;
	
КонецФункции

Функция ТекстЗапросаДанныхВариантаАнализаВКэше(ТолькоСвойства = Ложь)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	МАКСИМУМ(ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ДатаРасчета) КАК ДатаРасчета,
	|	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа
	|ПОМЕСТИТЬ МаксимумДатыРасчета
	|ИЗ
	|	РегистрСведений.ИсточникиДанныхВариантовАнализаЦелевыхПоказателей КАК ИсточникиДанныхВариантовАнализаЦелевыхПоказателей
	|ГДЕ
	|	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа = &ВариантАнализа
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ДатаРасчета КАК ДатаРасчета,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ДатаРасчета, &ТекущаяДата, МИНУТА) <= &ПериодАктуальностиРасчета
	|				И ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ДатаРасчета >= МаксимумДатыРасчета.ДатаРасчета
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДанныеАктуальны";
	
	Если НЕ ТолькоСвойства Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ИсточникДанных";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	РегистрСведений.ИсточникиДанныхВариантовАнализаЦелевыхПоказателей КАК ИсточникиДанныхВариантовАнализаЦелевыхПоказателей
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимумДатыРасчета КАК МаксимумДатыРасчета
	|		ПО ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа = МаксимумДатыРасчета.ВариантАнализа
	|ГДЕ
	|	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа = &ВариантАнализа
	|	И ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантОтображения = &ВариантОтображения";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьУпорядочиваниеГруппировки(ПолеГруппировки, ПолеУпорядочивания, ТипУпорядочивания)
	
	ЭлементыПорядка = ПолеГруппировки.Порядок.Элементы;
	ЭлементыПорядка.Очистить();
	
	НовыйЭлементПорядка = ЭлементыПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйЭлементПорядка.Использование = Истина;
	НовыйЭлементПорядка.Поле = ПолеУпорядочивания;
	НовыйЭлементПорядка.ТипУпорядочивания = ТипУпорядочивания;
	
КонецПроцедуры

Функция ЦелевыеЗначенияВариантаАнализа(ВариантАнализа, Дата)
	
	СтруктураЦелей = Новый Структура("ЦелевоеЗначение, 
	|ЦелевойДиапазонМинимум, 
	|ЦелевойДиапазонМаксимум,
	|ГраничноеПозитивноеОтклонение, 
	|ГраничноеНегативноеОтклонение,
	|ПриведенноеГраничноеПозитивноеОтклонение, 
	|ПриведенноеГраничноеНегативноеОтклонение");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ЦелевоеЗначение,
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ЦелевойДиапазонМинимум,
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ЦелевойДиапазонМаксимум,
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ГраничноеНегативноеОтклонение,
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ГраничноеПозитивноеОтклонение,
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ПриведенноеГраничноеНегативноеОтклонение,
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ПриведенноеГраничноеПозитивноеОтклонение
	|ИЗ
	|	РегистрСведений.ЦелевыеЗначенияВариантовАнализа.СрезПоследних(&Дата, ВариантАнализа = &ВариантАнализа) КАК ЦелевыеЗначенияВариантовАнализаСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СтруктураЦелей, Выборка);
		
	КонецЕсли;
	
	Возврат СтруктураЦелей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее.

Функция НайтиСтрокиТаблицыПоУсловиюНЕ(ТаблицаЗначений, СтруктураОтборов)
	
	НайденныеСтроки = Новый Массив;
	
	ИсключаемыеСтроки = ТаблицаЗначений.НайтиСтроки(СтруктураОтборов);
	
	Для каждого СтрокаТаблицыЗначенийКОбработке Из ТаблицаЗначений Цикл
		Если ИсключаемыеСтроки.Найти(СтрокаТаблицыЗначенийКОбработке) = Неопределено Тогда
			НайденныеСтроки.Добавить(СтрокаТаблицыЗначенийКОбработке);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат НайденныеСтроки;
	
КонецФункции

// Возвращает вид целевого значения показателя на указанную дату
//
// Параметры
//		ДатаАктуальности - дата на которую хотим получить вид действующего целевого значения
//		ВариантАнализа - Ссылка на вариант анализа
//
// Возвращаемое значение:
//		ВидЦелевогоЗначения - Перечисление
//
Функция ПолучитьВидЦелевогоЗначения(ДатаАктуальности, ВариантАнализа)
	
	Перем ВидЦелевогоЗначения;
	
	ВидЦелевогоЗначения = Неопределено;
	
	ЗапросЦелевогоЗначения = Новый Запрос;
	ЗапросЦелевогоЗначения.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	ЗапросЦелевогоЗначения.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	ЗапросЦелевогоЗначения.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦелевыеЗначенияВариантовАнализаСрезПоследних.ВидЦелевогоЗначения
	|ИЗ
	|	РегистрСведений.ЦелевыеЗначенияВариантовАнализа.СрезПоследних(%ПараметрПериода%, ВариантАнализа = &ВариантАнализа) КАК ЦелевыеЗначенияВариантовАнализаСрезПоследних";
	
	ЗапросЦелевогоЗначения.Текст = СтрЗаменить(ЗапросЦелевогоЗначения.Текст,
											   "%ПараметрПериода%",
												"КОНЕЦПЕРИОДА(&ДатаАктуальности, " + ВРег(ПолучитьИмяЗначенияПеречисления(ВариантАнализа.ПериодичностьКонтроля)) + ")");

	РезультатЗапроса = ЗапросЦелевогоЗначения.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ВидЦелевогоЗначения = Выборка.ВидЦелевогоЗначения;
		
	КонецЕсли;	
	
	Возврат ВидЦелевогоЗначения;
	
КонецФункции

// Служебная функция, предназначенная для получения описания типа булево
// 
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для типа Булево
//
Функция ПолучитьОписаниеТиповБулево()
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Булево"));
	Возврат Новый ОписаниеТипов(Массив);
	
КонецФункции
