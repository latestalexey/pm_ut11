////////////////////////////////////////////////////////////////////////////////
// Подсистема "Календарные графики в модели сервиса"
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОЛУЧЕНИЯ ПОСТАВЛЯЕМЫХ ДАННЫХ

// Регистрирует обработчики поставляемых данных за день и за все время
//
Процедура ЗарегистрироватьОбработчикиПоставляемыхДанных(Знач Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ВидДанных = "ПроизвКалендари";
	Обработчик.КодОбработчика = "ДанныеПроизводственныхКалендарей";
	Обработчик.Обработчик = КалендарныеГрафикиСлужебныйВМоделиСервиса;
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению, 
// и если да - установить флажок Загружать
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
 	Если Дескриптор.DataType = "ПроизвКалендари" Тогда
		Загружать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Дескриптор.
//   ПутьКФайлу   - строка. Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	ЧтениеXML.ПерейтиКСодержимому();
	Если Не НачалоЭлемента(ЧтениеXML, "CalendarSuppliedData") Тогда
		Возврат;
	КонецЕсли;
	ЧтениеXML.Прочитать();
	Если Не НачалоЭлемента(ЧтениеXML, "Calendars") Тогда
		Возврат;
	КонецЕсли;
	
	//Обновляем список календарей
	КалендарныеГрафикиИзФайла = ОбщегоНазначения.ПрочитатьXMLВТаблицу(ЧтениеXML).Данные;
	Справочники.ПроизводственныеКалендари.ОбновитьПроизводственныеКалендари(КалендарныеГрафикиИзФайла);
	
	ЧтениеXML.Прочитать();
	Если Не КонецЭлемента(ЧтениеXML, "Calendars") Тогда
		Возврат;
	КонецЕсли;
	ЧтениеXML.Прочитать();
	Если Не НачалоЭлемента(ЧтениеXML, "CalendarData") Тогда
		Возврат;
	КонецЕсли;
	
	//Обновляем дни в календарях
	ТаблицаДанных = Справочники.ПроизводственныеКалендари.ДанныеПроизводственныхКалендарейИзXML(ЧтениеXML);
	
	ИзмененияДанных = Справочники.ПроизводственныеКалендари.ИзмененияДанных(ТаблицаДанных);
	
	ОбластиДляОбновления = ПоставляемыеДанные.ОбластиТребующиеОбработки(
		Дескриптор.FileGUID, "ДанныеПроизводственныхКалендарей");
	
	// Обновление графиков работы по областям данных
	// Делаем это до обновления неразделенных данных, т.к. возможен сбой, и после него мы уже
	// не смогли бы определить, какие именно данные изменились
	РаспространитьДанныеПроизводственныхКалендарейПоГрафикамРаботы(ИзмененияДанных, ОбластиДляОбновления, 
		Дескриптор.FileGUID, "ДанныеПроизводственныхКалендарей");
		
	// Обновление неразделенных данных 
	Справочники.ПроизводственныеКалендари.ОбновитьДанныеПроизводственныхКалендарей(ИзмененияДанных);

КонецПроцедуры

Функция НачалоЭлемента(Знач ЧтениеXML, Знач Имя)
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> Имя Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые данные.Календарные графики'"), УровеньЖурналаРегистрации.Ошибка,
		,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Неверный формат файла данных. Ожидается начало элемента %1'"), Имя));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция КонецЭлемента(Знач ЧтениеXML, Знач Имя)
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Или ЧтениеXML.Имя <> Имя Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые данные.Календарные графики'"), УровеньЖурналаРегистрации.Ошибка,
		,, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Неверный формат файла данных. Ожидается конец элемента %1'"), Имя));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт 
	
	ПоставляемыеДанные.ОбластьОбработана(Дескриптор.FileGUID, "ДанныеПроизводственныхКалендарей", Неопределено);
	
КонецПроцедуры	

///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.1.2.6";
		Обработчик.Процедура = "КалендарныеГрафикиСлужебныйВМоделиСервиса.ЗаполнитьФлагиРучногоИзменения";
		Обработчик.Опциональный = Истина;
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при обновлении версии в модели сервиса
//
Процедура ЗаполнитьФлагиРучногоИзменения() Экспорт
	
	УстановитьПривилегированныйРежим (Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбластиДанных.ОбластьДанных КАК ОбластьДанных
	               |ИЗ
	               |	РегистрСведений.ОбластиДанных КАК ОбластиДанных
	               |ГДЕ
	               |	ОбластиДанных.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбластейДанных.Используется)";
				   
	ВыборкаОбластей = Запрос.Выполнить().Выбрать();		
	Попытка
		Пока ВыборкаОбластей.Следующий() Цикл
			
			ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ВыборкаОбластей.ОбластьДанных);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	УдалитьСвязиПоставляемыхДанных.ЭлементРазделенныхДанных КАК ЭлементРазделенныхДанных,
			               |	УдалитьСвязиПоставляемыхДанных.РучноеИзменение КАК РучноеИзменение,
			               |	УдалитьСвязиПоставляемыхДанных.ЭлементОбщихДанных КАК ЭлементОбщихДанных
			               |ИЗ
			               |	РегистрСведений.УдалитьСвязиПоставляемыхДанных КАК УдалитьСвязиПоставляемыхДанных
			               |ГДЕ
			               |	УдалитьСвязиПоставляемыхДанных.ОбластьДанных = &ОбластьДанных
			               |	И ТИПЗНАЧЕНИЯ(УдалитьСвязиПоставляемыхДанных.ЭлементОбщихДанных) = ТИП(Справочник.ПроизводственныеКалендари)";
			Запрос.УстановитьПараметр("ОбластьДанных", ВыборкаОбластей.ОбластьДанных);
			ВыборкаСправочников = Запрос.Выполнить().Выбрать();
			Пока ВыборкаСправочников.Следующий() Цикл
				СтандартныеПодсистемыПереопределяемый.УстановитьРучноеРедактированиеКалендаря(ВыборкаСправочников.ЭлементРазделенныхДанных, ВыборкаСправочников.РучноеИзменение);
				Календарь = ВыборкаСправочников.ЭлементРазделенныхДанных.ПолучитьОбъект();
				Календарь.ПроизводственныйКалендарь = ВыборкаСправочников.ЭлементОбщихДанных;
				Календарь.Записать();
			КонецЦикла;
		КонецЦикла;
	Исключение
		ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
		ВызватьИсключение;
	КонецПопытки;
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);

КонецПроцедуры



// Заполняет данные графика работы по данным производственного календаря по всем ОД
//
// Параметры
//  ДатаКурсов - Дата или Неопределено. Курсы добавляются за указанную дату либо за все время
//  ТаблицаДанных - ТаблицаЗначений с курсами
//  ОбластиДляОбновления - Массив со списком кодов областей
//  ИдентификаторФайла - УникальныйИдентификатор файла обрабатываемых курсов
//  КодОбработчика - Строка, код обработчика
//
Процедура РаспространитьДанныеПроизводственныхКалендарейПоГрафикамРаботы(Знач ИзмененияДанных, 
	Знач ОбластиДляОбновления, Знач ИдентификаторФайла, Знач КодОбработчика)
	
	Для каждого ОбластьДанных Из ОбластиДляОбновления Цикл
	
		УстановитьПривилегированныйРежим(Истина);
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
		УстановитьПривилегированныйРежим(Ложь);
		
		НачатьТранзакцию();
		Справочники.Календари.ОбновитьКалендариПоДаннымПроизводственныхКалендарей(ИзмененияДанных);
		ПоставляемыеДанные.ОбластьОбработана(ИдентификаторФайла, КодОбработчика, ОбластьДанных);
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	
КонецПроцедуры

// Вызывается при изменении производственных календарей
//
Процедура ЗапланироватьОбновлениеКалендарей(Знач Изменения) Экспорт
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Изменения);
	ПараметрыМетода.Добавить(Новый УникальныйИдентификатор);

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяМетода"    , "КалендарныеГрафикиСлужебныйВМоделиСервиса.ОбновитьКалендариПоДаннымПроизводственныхКалендарей");
	ПараметрыЗадания.Вставить("Параметры"    , ПараметрыМетода);
	ПараметрыЗадания.Вставить("Использование", Истина);
	ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
		
	ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания, -1);

КонецПроцедуры

// Вызывается при ручном редактировании производственного календаря
//
Процедура ОбновитьКалендариПоДаннымПроизводственныхКалендарей(Знач Изменения, Знач Идентификатор) Экспорт
	
	ОбластиДляОбновления = ПоставляемыеДанные.ОбластиТребующиеОбработки(
		Идентификатор, "ДанныеПроизводственныхКалендарей");
	
	// Обновление графиков работы по областям данных
	РаспространитьДанныеПроизводственныхКалендарейПоГрафикамРаботы(Изменения, ОбластиДляОбновления, 
		Идентификатор, "ДанныеПроизводственныхКалендарей");
	
КонецПроцедуры
