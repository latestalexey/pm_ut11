////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Чтение контактной информации другими подсистемами

// Получить значение определенного вида контактной информации у объекта.
//
// Параметры
//  Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация, контрагент, партнер и т.д.)
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации
//
// Возвращаемое значение:
//  Строка - строковое представление значения.
//
Функция ПолучитьКонтактнуюИнформацияОбъекта(Ссылка, ВидКонтактнойИнформации) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка
		|	И КонтактнаяИнформация.Вид = &Вид";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Вид",    ВидКонтактнойИнформации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Представление;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Обновляет поля контактной информации из ТаблицыЗначений (например объекта другого вида справочника)
//
// Параметры:
//	Источник - ТаблицаЗначений - таблица значений с контактной информацией.
//	Приемник - УправляемаяФорма - форма объекта. куда надо передать контактную информацию.
//
Процедура ЗаполнитьКонтактнуюИнофрмацию(Источник, Приемник) Экспорт
	
	КоллекцияПолейКонтактнойИнформации = Приемник.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Для Каждого ЭлементКоллекцияПолейКонтактнойИнформации Из КоллекцияПолейКонтактнойИнформации Цикл
		
		СтрокаВКИ = Источник.Найти(ЭлементКоллекцияПолейКонтактнойИнформации.Вид, "Вид");
		Если СтрокаВКИ <> Неопределено Тогда
			Приемник[ЭлементКоллекцияПолейКонтактнойИнформации.ИмяРеквизита]	= СтрокаВКИ.Представление;
			ЭлементКоллекцияПолейКонтактнойИнформации.ЗначенияПолей				= УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(СтрокаВКИ.ЗначенияПолей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы и модуля объекта

// Обработчик для события формы ПриСозданииНаСервере
Процедура ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения) Экспорт
	
	МассивРеквизитов = Новый Массив;
	
	// Создадим таблицу значений
	ИмяОписания = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания,        Новый ОписаниеТипов("ТаблицаЗначений")));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизита",     Новый ОписаниеТипов("Строка"),                                      ИмяОписания));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ЗначенияПолей",    Новый ОписаниеТипов("СписокЗначений"),                              ИмяОписания));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ТолькоРоссийский", Новый ОписаниеТипов("Булево"),                                      ИмяОписания));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Тип",              Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), ИмяОписания));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("Вид",              Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"),   ИмяОписания));
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ТипНомер",         Новый ОписаниеТипов("Число"),                                       ИмяОписания));

	
	// Получим список видов КИ
	ИмяГруппыВидовКИ = СтрЗаменить(Объект.Ссылка.Метаданные().ПолноеИмя(), ".", "");
	ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Вид,
	|	ВидыКонтактнойИнформации.Наименование КАК Наименование,
	|	ВидыКонтактнойИнформации.Тип КАК Тип,
	|	ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге КАК РедактированиеТолькоВДиалоге,
	|	ВидыКонтактнойИнформации.АдресТолькоРоссийский КАК АдресТолькоРоссийский,
	|	ВидыКонтактнойИнформации.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК Использовать
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПометкаУдаления,
	|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	УстановитьПривилегированныйРежим(Истина);
	КонтактнаяИнформация = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	
	// Добавим нужные реквизиты
	Если ТипЗнч(Объект.КонтактнаяИнформация) = Тип("ТаблицаЗначений") Тогда
		ТаблицаКИ = Объект.КонтактнаяИнформация;
	Иначе
		ТаблицаКИ = Объект.КонтактнаяИнформация.Выгрузить();
	КонецЕсли;
	
	Номер = 0;
	СоответствиеВидаКИИмениРеквизита = Новый Соответствие;
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		
		СтрокаВТаблице = ТаблицаКИ.Найти(СтрокаКИ.Вид, "Вид");
		Если СтрокаВТаблице = Неопределено И СтрокаКИ.ПометкаУдаления Тогда
			СтрокаКИ.Использовать = Ложь;
			Продолжить;
		КонецЕсли;
		
		Номер = Номер + 1;
		ИмяРеквизита = "КонтактнаяИнформацияПоле" + Номер;
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка"), , СтрокаКИ.Наименование, Истина));
		
		СоответствиеВидаКИИмениРеквизита.Вставить(СтрокаКИ.Вид, ИмяРеквизита);
		
	КонецЦикла;
	
	// Добавим новые реквизиты
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
	// Создадим элементы на форме и заполним значения реквизитов
	Родитель = ?(ПустаяСтрока(ИмяЭлементаДляРазмещения), Форма, Форма.Элементы[ИмяЭлементаДляРазмещения]);
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		
		Если Не СтрокаКИ.Использовать Тогда
			Продолжить;
		КонецЕсли;
		
		Вид = СтрокаКИ.Вид;
		ИмяРеквизита = СоответствиеВидаКИИмениРеквизита.Получить(Вид);
		Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Родитель);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ИмяРеквизита;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		
		Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			Элемент.Высота = 5;
			Элемент.МногострочныйРежим = Истина;
		КонецЕсли;
		
		Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(СтрокаКИ.Тип) Тогда
			Элемент.КнопкаВыбора = Истина;
			Если СтрокаКИ.РедактированиеТолькоВДиалоге Тогда
				Элемент.РедактированиеТекста = Ложь;
				Элемент.ЦветФона = ЦветаСтиля.КонтактнаяИнформацияСРедактированиемВДиалогеЦвет;
			КонецЕсли;
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
		КонецЕсли;
		
		НоваяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
		НоваяСтрока.ИмяРеквизита     = ИмяРеквизита;
		НоваяСтрока.ТолькоРоссийский = СтрокаКИ.АдресТолькоРоссийский;
		НоваяСтрока.Вид              = Вид;
		НоваяСтрока.Тип              = СтрокаКИ.Тип;
		НоваяСтрока.ТипНомер         = ПоТипуКонтактнойИнформацииПолучитьНомер(СтрокаКИ.Тип);
		
		СтрокаВТаблице = ТаблицаКИ.Найти(СтрокаКИ.Вид, "Вид");
		Если СтрокаВТаблице <> Неопределено Тогда
			
			Форма[ИмяРеквизита] = СтрокаВТаблице.Представление;
			НоваяСтрока.ЗначенияПолей   = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(СтрокаВТаблице.ЗначенияПолей);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик для события формы ПередЗаписьюНаСервере
Процедура ПередЗаписьюНаСервере(Форма, ТекущийОбъект, Отказ = Ложь) Экспорт
	
	ТекущийОбъект.КонтактнаяИнформация.Очистить();
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Представление = Форма[СтрокаТаблицы.ИмяРеквизита];
		Если ПустаяСтрока(Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТекущийОбъект.КонтактнаяИнформация.Добавить();
		НоваяСтрока.Тип = СтрокаТаблицы.Тип;
		НоваяСтрока.Вид = СтрокаТаблицы.Вид;
		НоваяСтрока.Представление = Представление;
		
		Если СтрокаТаблицы.ЗначенияПолей.Количество() > 0 Тогда
			НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСписокПолейВСтроку(СтрокаТаблицы.ЗначенияПолей);
		КонецЕсли;
		
		// Заполним значения дополнительных реквизитов таб. части
		Если СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			// Email
			СообщениеОбОшибке = "";
			ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(НоваяСтрока, СообщениеОбОшибке);
			Если НЕ ПустаяСтрока(СообщениеОбОшибке) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, , СтрокаТаблицы.ИмяРеквизита);
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			// Адрес
			ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрока, СтрокаТаблицы.ЗначенияПолей);
		ИначеЕсли СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон  ИЛИ СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
			// Телефон/факс
			ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрока, СтрокаТаблицы.ЗначенияПолей);
		ИначеЕсли СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			// WWW
			ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение дополнительных реквизитов табличной части "Контактная информация"

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса.
//
// Параметры:
//	СтрокаТабличнойЧасти - Строка табличной части - строка табличной части "Контактная информация".
//	ЗначенияПолей - Список значений - список значений полей.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаТабличнойЧасти, ЗначенияПолей)
	
	Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
		Если ВРег(ЗначениеПоля.Представление) = "СТРАНА" Тогда
			СтрокаТабличнойЧасти.Страна = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "РЕГИОН" Тогда
			СтрокаТабличнойЧасти.Регион = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "ГОРОД" Тогда
			СтрокаТабличнойЧасти.Город = ЗначениеПоля.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса электронной почты.
//
// Параметры:
//	СтрокаТабличнойЧасти - Строка табличной части - строка табличной части "Контактная информация".
//  СообщениеОбОшибке - Строка - сообщение об ошибке.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаТабличнойЧасти, СообщениеОбОшибке = "")
	
	Попытка
		Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрокаТабличнойЧасти.Представление);
	Исключение
		СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	Если Результат.Количество() > 0 Тогда
		СтрокаТабличнойЧасти.АдресЭП = Результат[0].Адрес;
		
		Поз = Найти(СтрокаТабличнойЧасти.АдресЭП, "@");
		Если Поз <> 0 Тогда
			СтрокаТабличнойЧасти.ДоменноеИмяСервера = Сред(СтрокаТабличнойЧасти.АдресЭП, Поз+1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//	СтрокаТабличнойЧасти - Строка табличной части - строка табличной части "Контактная информация".
//	ЗначенияПолей - Список значений - список значений полей.
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаТабличнойЧасти, ЗначенияПолей)
	
	КодСтраны = "";
	КодГорода = "";
	НомерТелефона = "";
	
	Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
		Если ВРег(ЗначениеПоля.Представление) = "КОДСТРАНЫ" Тогда
			КодСтраны = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "КОДГОРОДА" Тогда
			КодГорода = ЗначениеПоля.Значение;
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "НОМЕРТЕЛЕФОНА" Тогда
			НомерТелефона = ЗначениеПоля.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если Лев(КодСтраны, 1) = "+" Тогда
		КодСтраны = Сред(КодСтраны, 2);
	КонецЕсли;
	
	Поз = Найти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	Поз = Найти(НомерТелефона, Символы.ПС);
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = УбратьРазделителиВНомерТелефона(НомерТелефона);
	СтрокаТабличнойЧасти.НомерТелефона         = УбратьРазделителиВНомерТелефона(КодСтраны + КодГорода + НомерТелефона);
		
КонецПроцедуры

// Убирает разделители в номере телефона.
//
// Параметры:
//	НомерТелефона - Строка - номер телефона или факса.
//
// Возвращаемое значение - Строка - номер телефона или факса без разделителей.
//
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = Найти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");

	Возврат НомерТелефона;

КонецФункции

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для веб-страницы.
//
// Параметры:
//	СтрокаТабличнойЧасти - Строка табличной части - строка табличной части "Контактная информация".
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаТабличнойЧасти)

	АдресВебСтраницы = СтрокаТабличнойЧасти.Представление;

	// Вырежем имя протокола
	ПозицияСимволов = Найти(АдресВебСтраницы, "://");
	Если ПозицияСимволов <> 0 Тогда
		ЛевЧасть = НРег(Лев(АдресВебСтраницы, ПозицияСимволов - 1));
		Если (ЛевЧасть = "http") ИЛИ (ЛевЧасть = "https") Тогда
			АдресВебСтраницы = Сред(АдресВебСтраницы, ПозицияСимволов + 3);
		КонецЕсли;
	КонецЕсли;

	// Вырежем слева www
	Если НРег(Лев(АдресВебСтраницы, 4)) = "www." Тогда
		АдресВебСтраницы = Сред(АдресВебСтраницы, 5);
	КонецЕсли;
	
	ПозицияСимвола = Найти(АдресВебСтраницы, "/");
	СтрокаТабличнойЧасти.ДоменноеИмяСервера = ?(ПозицияСимвола = 0, АдресВебСтраницы, Лев(АдресВебСтраницы, ПозицияСимвола - 1));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные

// Возвращает структуру адреса.
//
// Возвращаемое значение:
//	Структура с полями:
//		Индекс - Строка - индекс.
//		Регион - Строка - регион.
//		Район - Строка - район.
//		Город - Строка - город.
//		НаселенныйПункт - Строка - населенный пункт.
//		Улица - Строка - улица.
//		Дом - Строка - номер дома.
//		Корпус - Строка - номер корпуса.
//		Квартира - Строка - номер квартиры.
Функция ПолучитьПустуюСтруктуруАдреса() Экспорт
	
	СтруктураАдреса = Новый Структура();
	СтруктураАдреса.Вставить("Индекс",          "");
	СтруктураАдреса.Вставить("Регион",          "");
	СтруктураАдреса.Вставить("Район",           "");
	СтруктураАдреса.Вставить("Город",           "");
	СтруктураАдреса.Вставить("НаселенныйПункт", "");
	СтруктураАдреса.Вставить("Улица",           "");
	СтруктураАдреса.Вставить("Дом",             "");
	СтруктураАдреса.Вставить("Корпус",          "");
	СтруктураАдреса.Вставить("Квартира",        "");
	Возврат СтруктураАдреса;
	
КонецФункции

// Возвращает доступно ли редактирование в диалоге по типу контактной информации.
//
// Параметры:
//	Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение - Булево - доступно или нет редактирование в диалоге.
//
Функция ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип)
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает номер по типу контактной информации.
//
// Параметры:
//	Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение - Число:
// 		1 - Адрес
// 		2 - Телефон или факс
//		0 - Все остальные типы
//
Функция ПоТипуКонтактнойИнформацииПолучитьНомер(Тип)
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат 1;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат 2;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Процедура удаляет элементы справочника СтраныМира.
//
Процедура УдалитьЭлементыСправочникаСтраныМира() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраныМира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтраныМира КАК СтраныМира
	|ГДЕ
	|	СтраныМира.Предопределенный = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Удаление = Новый УдалениеОбъекта(Выборка.Ссылка);
			Удаление.ОбменДанными.Загрузка = Истина;
			Удаление.Записать();
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.12";
	Обработчик.Процедура = "УправлениеКонтактнойИнформациейПереопределяемый.КонтактнаяИнформацияОбновлениеИБ";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.2";
	Обработчик.Процедура = "УправлениеКонтактнойИнформацией.ЗагрузитьСтраныМира";
	Обработчик.ОбщиеДанные = Истина;
	
КонецПроцедуры	

// Обновляет один вид контактной информации.
//
// Параметры:
//	ВидКИ - Справочник.ВидыКонтактнойИнформации - вид контактной информации.
//	Тип - Перечисление.ТипыКонтактнойИнформации - тип контактной информации.
//	МожноИзменятьСпособРедактирования - Булево - Истина, если есть возможность изменять способ редактирования, Ложь - иначе.
//	РедактированиеТолькоВДиалоге - Булево - Истина, если редактировать только в диалоге, Ложь - иначе.
//	АдресТолькоРоссийский - Булево - Истина, если адрес только российский, Ложь - Иначе.
//  Порядок - Неопределено или Число - порядок вида контактной информации.
//
Процедура ОбновитьВидКИ(ВидКИ, Тип, МожноИзменятьСпособРедактирования, РедактированиеТолькоВДиалоге, АдресТолькоРоссийский,
						Порядок = Неопределено) Экспорт

	Объект = ВидКИ.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка);
	Объект.Тип                               = Тип;
	Объект.МожноИзменятьСпособРедактирования = МожноИзменятьСпособРедактирования;
	Объект.РедактированиеТолькоВДиалоге      = РедактированиеТолькоВДиалоге;
	Объект.АдресТолькоРоссийский             = АдресТолькоРоссийский;
	Если Порядок <> Неопределено Тогда
		Объект.РеквизитДопУпорядочивания = Порядок;
	КонецЕсли;
	
	Объект.Записать();

КонецПроцедуры

// Обновить справочник стран мира согласно данным из макета Справочники.СтраныМира.Макеты.Классификатор.
// Идентификация существующих элементов в справочнике выполняется по полю Код.
//
Процедура ЗагрузитьСтраныМира() Экспорт
	
	// Получим список уже загруженных стран
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтраныМира.Код КАК Код,
	|	СтраныМира.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтраныМира КАК СтраныМира
	|
	|	УПОРЯДОЧИТЬ ПО Код";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Макет 				= Справочники.СтраныМира.ПолучитьМакет("Классификатор");
	ТаблицаСтран 		= ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст()).Данные;
	СтруктураЭлемента 	= Новый Структура;
	
	Для Каждого ТекущаяСтрана Из ТаблицаСтран Цикл
		НайденныйЭлемент = РезультатЗапроса.Найти(ТекущаяСтрана.Code, "Код");
		
		Если НайденныйЭлемент = Неопределено Тогда
			Элемент 					= Справочники.СтраныМира.СоздатьЭлемент();
			Элемент.Код					= ТекущаяСтрана.Code;
			Элемент.Наименование		= ТекущаяСтрана.ShortName;
			Элемент.КодАльфа2			= ТекущаяСтрана.Alpha2;
			Элемент.КодАльфа3			= ТекущаяСтрана.Alpha3;
			Элемент.НаименованиеПолное 	= ТекущаяСтрана.FullName;
			Элемент.Записать();

			Продолжить;
			
		КонецЕсли;
		
		Элемент 			= НайденныйЭлемент.Ссылка;
		Поля 				= "";
		Если Элемент.Код <> ТекущаяСтрана.Code Тогда 
			СтруктураЭлемента.Вставить("Код", ТекущаяСтрана.Code);
			Поля = Поля + "%Поле%,"; 
			Поля = СтрЗаменить(Поля, "%Поле%", "Код");
		КонецЕсли;
		Если Элемент.Наименование <> ТекущаяСтрана.ShortName Тогда 
			СтруктураЭлемента.Вставить("Наименование", ТекущаяСтрана.ShortName);
			Поля = Поля + "%Поле%,";
			Поля = СтрЗаменить(Поля, "%Поле%", "Наименование");
		КонецЕсли;
		Если Элемент.КодАльфа2 <> ТекущаяСтрана.Alpha2 Тогда 
			СтруктураЭлемента.Вставить("КодАльфа2", ТекущаяСтрана.Alpha2);
			Поля = Поля + "%Поле%,";
			Поля = СтрЗаменить(Поля, "%Поле%", "КодАльфа2");
		КонецЕсли;
		Если Элемент.КодАльфа3 <> ТекущаяСтрана.Alpha3 Тогда 
			СтруктураЭлемента.Вставить("КодАльфа3", ТекущаяСтрана.Alpha3);
			Поля = Поля + "%Поле%,";
			Поля = СтрЗаменить(Поля, "%Поле%", "КодАльфа3");
		КонецЕсли;
		Если Элемент.НаименованиеПолное <> ТекущаяСтрана.FullName Тогда 
			СтруктураЭлемента.Вставить("НаименованиеПолное", ТекущаяСтрана.FullName);
			Поля = Поля + "%Поле%,";
			Поля = СтрЗаменить(Поля, "%Поле%", "НаименованиеПолное");
		КонецЕсли;
		
		Если СтруктураЭлемента.Количество() > 0 Тогда 
			ДлинаСтроки 	= СтрДлина(Поля);
			Поля 			= Лев(Поля, ДлинаСтроки - 1);
			СтранаОбъект 	= Элемент.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(СтранаОбъект, СтруктураЭлемента, Поля);
			СтранаОбъект.Записать();
		КонецЕсли;	
		
		СтруктураЭлемента.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

// Получить значения определенного типа контактной информации у объекта.
//
// Параметры
//  Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация, контрагент, партнер и т.д.)
//  ТипКонтактнойИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации
//
// Возвращаемое значение:
//  ТаблицаЗначений - с полями 
//    Значение (строка) - строковое представление значения
//    Вид (строка}      - представление вида контактной информации
//
Функция ЗначенияКонтактнойИнформацииОбъекта(Ссылка, ТипКонтактнойИнформации) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Представление как Значение,
		|	КонтактнаяИнформация.Вид.Представление как Вид
		|ИЗ
		|	Справочник." + Ссылка.Метаданные().Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка
		|	И КонтактнаяИнформация.Тип = &Тип
		|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Тип", ТипКонтактнойИнформации);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получить значения поля адреса.
//
// Параметры:
//	СтрокаЗначенийПолей - строка со значениями полей адреса.
//	ИмяПоля - имя поля. Например, "Район".
// 
// Возвращаемое значение:
//  Строка - значение поля.
//
Функция ПолучитьЗначениеПоляАдреса(СтрокаЗначенийПолей, ИмяПоля) Экспорт
	
	ПозицияПоля = Найти(СтрокаЗначенийПолей, ИмяПоля);
	Значение = "";
	Если ПозицияПоля <> 0 Тогда
		ЗначенияПолей = Прав(СтрокаЗначенийПолей, СтрДлина(СтрокаЗначенийПолей) - ПозицияПоля - СтрДлина(ИмяПоля));
		ПозицияПС = Найти(ЗначенияПолей, Символы.ПС);
		Значение = Сред(ЗначенияПолей, 0 ,ПозицияПС - 1);
	КонецЕсли;
	Возврат Значение;

КонецФункции

// Получает значения поля адреса
//
// Параметры:
//	СтрокаЗначенийПолей - Строка - строка значений полей 
//	ИмяПоля - Строка - имя поля 
//
// Возвращаемое значение - Строка - значение контактной информации.
//
Функция ПолучитьЗначениеКонтактнойИнформации(СтрокаЗначенийПолей, ИмяПоля) Экспорт
	
	ПозицияПоля = Найти(СтрокаЗначенийПолей, ИмяПоля);
	Значение = "";
	Если ПозицияПоля <> 0 Тогда
		ЗначенияПолей = Прав(СтрокаЗначенийПолей, СтрДлина(СтрокаЗначенийПолей) - ПозицияПоля - СтрДлина(ИмяПоля));
		ПозицияПС   = Найти(ЗначенияПолей, Символы.ПС);
		Значение    = Сред(ЗначенияПолей, 0 , ПозицияПС - 1);
	КонецЕсли;
	
	Возврат Значение;

КонецФункции
