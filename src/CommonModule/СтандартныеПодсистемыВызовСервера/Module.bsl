////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Записать настройку подтверждения завершения работы программы
// для текущего пользователя.
// 
// Параметры:
//   Значение - Булево   - значение настройки.
// 
Процедура СохранитьНастройкуПодтвержденияПриЗавершенииПрограммы(Значение) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбщиеНастройкиПользователя", "ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", Значение);
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Подробнее см. ПараметрыРаботыКлиентаПриЗапуске в общем модуле СтандартныеПодсистемыПереопределяемый.
//
Функция ПараметрыРаботыКлиентаПриЗапуске() Экспорт
	
	Параметры = Новый Структура();
	
	Если НЕ СтандартныеПодсистемыПереопределяемый.ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске(Параметры) Тогда
		Возврат Новый ФиксированнаяСтруктура(Параметры);
	КонецЕсли;
	
	ПрикладныеПараметры = ОбщегоНазначенияВызовСервераПереопределяемый.ПараметрыРаботыКлиентаПриЗапуске();
	ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиентаПриЗапуске(ПрикладныеПараметры);
	
	Для Каждого Параметр Из ПрикладныеПараметры Цикл
		Параметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(Параметры);
	
КонецФункции

// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации. 
//
// Подробнее см. ПараметрыРаботыКлиента в общем модуле СтандартныеПодсистемыПереопределяемый.
//
Функция ПараметрыРаботыКлиента() Экспорт
	
	Параметры = Новый Структура();
	СтандартныеПодсистемыПереопределяемый.ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры);
	
	ПрикладныеПараметры = ОбщегоНазначенияВызовСервераПереопределяемый.ПараметрыРаботыКлиента();
	ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиента(ПрикладныеПараметры);
	
	Для Каждого Параметр Из ПрикладныеПараметры Цикл
		Параметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(Параметры);
	
КонецФункции

// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации при завершении работы.
//
// Подробнее см. ПараметрыРаботыКлиентаПриЗавершении в общем модуле СтандартныеПодсистемыПереопределяемый.
//
Функция ПараметрыРаботыКлиентаПриЗавершении() Экспорт
	
	Параметры = Новый Структура();
	СтандартныеПодсистемыПереопределяемый.ДобавитьПараметрыРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗавершении(Параметры);
	
	ПрикладныеПараметры = ОбщегоНазначенияВызовСервераПереопределяемый.ПараметрыРаботыКлиентаПриЗавершении();
	ОбщегоНазначенияПереопределяемый.ПараметрыРаботыКлиентаПриЗавершении(ПрикладныеПараметры);
	
	Для Каждого Параметр Из ПрикладныеПараметры Цикл
		Параметры.Вставить(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(Параметры);
	
КонецФункции

// Возвращает тип платформы строкой.
Функция ТипПлатформыСервераСтрокой() Экспорт
	
	СистемнаяИнфо = Новый СистемнаяИнформация;
	
	Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Linux_x86 Тогда
		Возврат "Linux_x86";
		
	ИначеЕсли СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		Возврат "Linux_x86_64";
		
	ИначеЕсли СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		Возврат "Windows_x86";
		
	ИначеЕсли СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Возврат "Windows_x86_64";
		
	ИначеЕсли СистемнаяИнфо.ТипПлатформы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Неизвестный тип платформы ""%1""'"),
		Строка(СистемнаяИнфо.ТипПлатформы));
	
КонецФункции

