////////////////////////////////////////////////////////////////////////////////
// Подсистема "Дополнительные отчеты и обработки"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Подключает внешнюю обработку (отчет). После подключения
//   обработка (отчет) регистрируется в программе под определенным именем,
//   используя которое можно создавать объект или открывать формы обработки (отчета).
//
// Параметры:
//   Ссылка (СправочникСсылка.ДополнительныеОтчетыИОбработки) Подключаемая обработка.
//
// Возвращаемое значение: 
//   (Строка)       Имя подключенной обработки (отчета).
//   (Неопределено) Если передана некорректная ссылка.
//
Функция ПодключитьВнешнююОбработку(Ссылка) Экспорт
	
	// Проверка корректности переданных параметров
	Если ТипЗнч(Ссылка) <> Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") 
		ИЛИ Ссылка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Подключение
	Если Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Менеджер = ВнешниеОтчеты;
	Иначе
		Менеджер = ВнешниеОбработки;
	КонецЕсли;
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Ссылка.ХранилищеОбработки.Получить());
	
	ИмяОбработки = Менеджер.Подключить(АдресВоВременномХранилище, , Ссылка.БезопасныйРежим);
	
	Возврат ИмяОбработки;
	
КонецФункции

// Создает и возвращает объект внешней обработки (отчета).
//
// Параметры:
//   Ссылка (СправочникСсылка.ДополнительныеОтчетыИОбработки) Подключаемая обработка.
//
// Возвращаемое значение: 
//   (ВнешняяОбработкаОбъект.*) Объект подключенной обработки.
//   (ВнешнийОтчетОбъект.*)     Объект подключенного отчета.
//   (Неопределено)             Если передана некорректная ссылка.
//
Функция ПолучитьОбъектВнешнейОбработки(Ссылка) Экспорт
	
	// Подключение
	ИмяОбработки = ПодключитьВнешнююОбработку(Ссылка);
	
	// Проверка корректности переданных параметров
	Если ИмяОбработки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получение экземпляра объекта
	Если Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Менеджер = ВнешниеОтчеты;
	Иначе
		Менеджер = ВнешниеОбработки;
	КонецЕсли;
	
	Возврат Менеджер.Создать(ИмяОбработки);
	
КонецФункции

// Установка параметров функциональных опций формы (требуется для формирования
//   командного интерфейса формы)
//
// Параметры:
//   ЭтаФорма (УправляемаяФорма)
//
Процедура ПриСозданииНаСервере(ЭтаФорма) Экспорт
	
	ИмяФормыМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭтаФорма.ИмяФормы, ".");
	ПолноеИмяОбъектаМетаданных = ИмяФормыМассив[0] + "." + ИмяФормыМассив[1];
	
	ТипФормы = Неопределено;
	ТипОбъекта = ПолноеИмяОбъектаМетаданных;
	
	Если Пользователи.РолиДоступны("ИспользованиеДополнительныхОтчетовИОбработок, ДобавлениеИзменениеДополнительныхОтчетовИОбработок") Тогда
		Если ЭтоФормаОбъекта(ПолноеИмяОбъектаМетаданных, ЭтаФорма.ИмяФормы) Тогда
			ТипФормы = "ФормаОбъекта";
		Иначе
			ТипФормы = "ФормаСписка";
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ТипФормыСДополнительнымиОтчетамиИОбработками", ТипФормы));
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ТипОбъектаСДополнительнымиОтчетамиИОбработками", ТипОбъекта));
	
КонецПроцедуры

// Формирует печатную форму по внешнему источнику
// 
// Параметры:
//   Ссылка (СправочникСсылка.ДополнительныеОтчетыИОбработки) Внешняя обработка
//   ПараметрыИсточника (Структура)
//       |- ИдентификаторКоманды (Строка) Список макетов, перечисленных через запятую
//       |- ОбъектыНазначения    (Массив)
//   КоллекцияПечатныхФорм (ТаблицаЗначений) см. УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику()
//   ОбъектыПечати         (СписокЗначений)  см. УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику()
//   ПараметрыВывода       (Структура)       см. УправлениеПечатьюПереопределяемый.ПечатьПоВнешнемуИсточнику()
// 
Процедура ПечатьПоВнешнемуИсточнику(Ссылка, ПараметрыИсточника, КоллекцияПечатныхФорм,
	ОбъектыПечати, ПараметрыВывода) Экспорт
	
	КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(ПараметрыИсточника.ИдентификаторКоманды);
	
	ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();
	
	ОбъектыПечати = Новый СписокЗначений;
	
	ВнешняяОбработкаОбъект = ПолучитьОбъектВнешнейОбработки(Ссылка);
	
	Если ВнешняяОбработкаОбъект = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Внешняя обработка ""%1"" (тип ""%2"") не обслуживается подсистемой ""Дополнительные отчеты и обработки""'"),
			Строка(Ссылка),
			Строка(ТипЗнч(Ссылка))
		);
	КонецЕсли;
	
	ВнешняяОбработкаОбъект.Печать(
		ПараметрыИсточника.ОбъектыНазначения,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода
	);
	
	// Проверим, все ли макеты были сформированы
	Для Каждого Стр Из КоллекцияПечатныхФорм Цикл
		Если Стр.ТабличныйДокумент = Неопределено Тогда
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В обработчике печати не был сформирован табличный документ для: %1'"),
				Стр.ИмяМакета
			);
			ВызватьИсключение(ТекстСообщенияОбОшибке);
		КонецЕсли;
		
		Стр.ТабличныйДокумент.КоличествоЭкземпляров = Стр.Экземпляров;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры используемые при обмене данными

// Переопределяет стандартное поведение при загрузке данных.
// Реквизит РегламентноеЗаданиеGUID табличной части Команды не переносится,
// т.к. связан с регламентным заданием текущей базы.
//
Процедура ПриПолученииДополнительнойОбработки(ЭлементДанных, ПолучениеЭлемента) Экспорт
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		
		// Стандартную обработку не переопределяем
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ДополнительныеОтчетыИОбработки")
		И ЭлементДанных.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
		
		// Таблица уникальных идентификаторов регламентных заданий
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Команды.Ссылка КАК Ссылка,
		|	Команды.Идентификатор КАК Идентификатор,
		|	Команды.РегламентноеЗаданиеGUID КАК РегламентноеЗаданиеGUID
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки.Команды КАК Команды
		|ГДЕ
		|	Команды.Ссылка = &Ссылка";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.Параметры.Вставить("Ссылка", ЭлементДанных.Ссылка);
		
		ИдентификаторыРегламентныхЗаданий = Запрос.Выполнить().Выгрузить();
		
		// Заполнение идентификаторов регламентных заданий в таблице команд из данных текущей БД
		Для Каждого СтрокаКоманда Из ЭлементДанных.Команды Цикл
			Найденные = ИдентификаторыРегламентныхЗаданий.НайтиСтроки(Новый Структура("Идентификатор", СтрокаКоманда.Идентификатор));
			Если Найденные.Количество() = 0 Тогда
				СтрокаКоманда.РегламентноеЗаданиеGUID = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
			Иначе
				СтрокаКоманда.РегламентноеЗаданиеGUID = Найденные[0].РегламентноеЗаданиеGUID;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.1";
	Обработчик.Процедура = "ДополнительныеОтчетыИОбработки.ОбновитьПользовательскиеНастройкиДоступаКОбработкам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.4";
	Обработчик.Процедура = "ДополнительныеОтчетыИОбработки.ЗаполнитьИменаОбъектов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.3";
	Обработчик.Процедура = "ДополнительныеОтчетыИОбработки.ЗаполнитьПредставленияРасписаний";
	
КонецПроцедуры

// Процедура обновления записей о доступности дополнительных обработок
//
Процедура ОбновитьПользовательскиеНастройкиДоступаКОбработкам() Экспорт
	
	ПользователиСДопОбработками = ПолучитьМассивПользователейСДоступомКДополнительнымОбработкам();
	
	ТаблицаЗаписей = ПолучитьТаблицуЗаписей(ПользователиСДопОбработками);
	
	Для Каждого Пользователь Из ПользователиСДопОбработками Цикл
		НаборЗаписей = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		ЗаписиПоБыстромуДоступу = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Пользователь,Доступно", Пользователь, Истина));
		Для Каждого ЗаписьБыстрогоДоступа Из ЗаписиПоБыстромуДоступу Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ДополнительныйОтчетИлиОбработка = ЗаписьБыстрогоДоступа.Обработка;
			НоваяЗапись.ИдентификаторКоманды			= ЗаписьБыстрогоДоступа.Идентификатор;
			НоваяЗапись.Пользователь					= Пользователь;
			НоваяЗапись.Доступно						= Истина;
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Заполнение реквизита "ИмяОбъекта". Данный реквизит отвечает за имя,
//   под которыми дополнительный отчет или обработка регистрируется в системе. 
// Для объектов с вариантом Публикации "Используется" дополнительно проводится 
//   контроль уникальности Имени объекта. В случае нахождения отчетов или обработок 
//   с неуникальными Именами объектов для всех элементов, кроме первого, 
//   вариант Публикации изменяется с "Используется" на "Режим отладки".
//
Процедура ЗаполнитьИменаОбъектов() Экспорт
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДопОтчеты.Ссылка,
	|	ДопОтчеты.ИмяОбъекта,
	|	ДопОтчеты.ХранилищеОбработки,
	|	ВЫБОР
	|		КОГДА ДопОтчеты.Вид В (&ВидыДопОтчетов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОтчет,
	|	ВЫБОР
	|		КОГДА ДопОтчеты.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Публикуется,
	|	ВЫБОР
	|		КОГДА ДопОтчеты.ИмяОбъекта = """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяЗаполнитьИмяОбъекта
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДопОтчеты
	|ГДЕ
	|	ДопОтчеты.ЭтоГруппа = ЛОЖЬ
	|	И НЕ ДопОтчеты.ХранилищеОбработки ЕСТЬ NULL ";
	
	ВидыДопОтчетов = Новый Массив;
	ВидыДопОтчетов.Добавить(Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет);
	ВидыДопОтчетов.Добавить(Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыДопОтчетов", ВидыДопОтчетов);
	Запрос.Текст = ТекстЗапроса;
	
	ВсеДопОтчеты = Запрос.Выполнить().Выгрузить();
	
	ПоискДублей = Новый Структура("ИмяОбъекта, ЭтоОтчет, Публикуется");
	ПоискДублей.Публикуется = Истина;
	
	// Дополнительные отчеты и обработки, для которых необходимо заполнить имя объекта
	ДопОтчетыДляЗаполнения = ВсеДопОтчеты.НайтиСтроки(Новый Структура("ТребуетсяЗаполнитьИмяОбъекта", Истина));
	Для Каждого СтрокаТаблицы Из ДопОтчетыДляЗаполнения Цикл
		
		// Помещение двоичных данных отчета (обработки) во временное хранилище
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СтрокаТаблицы.ХранилищеОбработки.Получить());
		
		// Определение менеджера
		Менеджер = ?(СтрокаТаблицы.ЭтоОтчет, ВнешниеОтчеты, ВнешниеОбработки);
		
		// Получение экземпляра объекта
		Объект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		
		// Установка имени объекта
		Объект.ИмяОбъекта = СокрЛП(Менеджер.Подключить(АдресВоВременномХранилище, , Истина));
		
		// Если имя отчета (обработки) уже используется другим опубликованным отчетом (обработкой),
		// то данный объект является дублем - необходимо сменить его вариант публикации на режим отладки.
		Если СтрокаТаблицы.Публикуется Тогда
			ПоискДублей.ИмяОбъекта = Объект.ИмяОбъекта;
			ПоискДублей.ЭтоОтчет   = СтрокаТаблицы.ЭтоОтчет;
			Если ВсеДопОтчеты.НайтиСтроки(ПоискДублей).Количество() > 0 Тогда
				Объект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки;
			КонецЕсли;
		КонецЕсли;
		
		// Регистрация использованного имени объекта в таблице для контроля дублей
		СтрокаТаблицы.ИмяОбъекта = Объект.ИмяОбъекта;
		
		// Запись объекта
		Объект.Записать();
		
	КонецЦикла; 
	
КонецПроцедуры

// Заполнение реквизита "РегламентноеЗаданиеПредставление" табличной части "Команды".
//
Процедура ЗаполнитьПредставленияРасписаний() Экспорт
	Если НЕ ПравоДоступа("Администрирование", Метаданные) ИЛИ НЕ ПравоДоступа("АдминистрированиеДанных", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КомандыДопОтчетов.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Команды КАК КомандыДопОтчетов
	|ГДЕ
	|	КомандыДопОтчетов.ВариантЗапуска = &ВариантЗапуска
	|	И КомандыДопОтчетов.Ссылка.Вид В(&ВидыДопОтчетов)
	|	И КомандыДопОтчетов.РегламентноеЗаданиеПредставление = """"";
	
	ВидыДопОтчетов = Новый Массив;
	ВидыДопОтчетов.Добавить(Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка);
	ВидыДопОтчетов.Добавить(Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантЗапуска", Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода);
	Запрос.УстановитьПараметр("ВидыДопОтчетов", ВидыДопОтчетов);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	РазделениеВключено = (ОбщегоНазначенияПовтИсп.РазделениеВключено() И ОбщегоНазначения.ИспользованиеРазделителяСеанса() = Истина);
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		КомандыИзменены = Ложь;
		
		Если РазделениеВключено Тогда
			УстановитьПривилегированныйРежим(Истина);
			ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
		КонецЕсли;
		
		Для Каждого Команда Из Объект.Команды Цикл
			
			Задание = НайтиРегламентноеЗадание(Команда.РегламентноеЗаданиеGUID);
			Если Задание = Неопределено
				ИЛИ НЕ Задание.Использование
				ИЛИ Строка(Задание.Расписание) = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
				Продолжить;
			КонецЕсли;
			
			Команда.РегламентноеЗаданиеПредставление = Строка(Задание.Расписание);
			КомандыИзменены = Истина;
			
		КонецЦикла;
		
		Если РазделениеВключено Тогда
			ОбщегоНазначения.УстановитьРазделениеСеанса(Истина);
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		Если КомандыИзменены Тогда
			Объект.Записать();
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

// Замена имен рабочих мест на идентификаторы разделов.
// 
// Параметры:
//   ИменаРазделовИИдентификаторы (Соответствие) 
//       |- Ключ (Строка) Имя рабочего места (команды), которое ранее указывалось в процедуре
//                        ПолучитьОбщиеКомандыДополнительныхОбработок или ПолучитьОбщиеКомандыДополнительныхОтчетов
//                        общего модуля ДополнительныеОтчетыИОбработкиПереопределяемый
//       |- Значение (ОбъектМетаданных) Раздел командного интерфейса (подсистема первого уровня), 
//                                      в котором размещается данное рабочее место (команда)
// 
Процедура ЗаменитьИменаРазделовНаИдентификаторы(ИменаРазделовИИдентификаторы) Экспорт
	ИдентификаторРабочегоСтола = ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола();
	
	МассивИменРазделов = Новый Массив;
	Для Каждого КлючИЗначение Из ИменаРазделовИИдентификаторы Цикл
		Если КлючИЗначение.Значение = ИдентификаторРабочегоСтола Тогда
			ИменаРазделовИИдентификаторы.Вставить(КлючИЗначение.Ключ, Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка());
		Иначе
			ИменаРазделовИИдентификаторы.Вставить(КлючИЗначение.Ключ, ОбщегоНазначения.ИдентификаторОбъектаМетаданных(КлючИЗначение.Значение));
		КонецЕсли;
		МассивИменРазделов.Добавить(КлючИЗначение.Ключ);
	КонецЦикла; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРазделы.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Разделы КАК ТЧРазделы
	|ГДЕ
	|	ТЧРазделы.УдалитьИмяРаздела В (&МассивИменРазделов)";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивИменРазделов", МассивИменРазделов);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Получение экземпляра объекта
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаРаздел Из Объект.Разделы Цикл
			ИОМ = ИменаРазделовИИдентификаторы.Получить(СтрокаРаздел.УдалитьИмяРаздела);
			Если ИОМ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРаздел.Раздел = ИОМ;
			СтрокаРаздел.УдалитьИмяРаздела = "";
		КонецЦикла; 
		
		// Запись объекта
		Объект.Записать();
	КонецЦикла; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

// Получает регламентное задание по его уникальному идентификатору.
//
Функция НайтиРегламентноеЗадание(РегламентноеЗаданиеGUID, УстанавливатьПривилегированныйРежим = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РегламентноеЗаданиеGUID) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Установка привилегированного режима только для той роли, которой не хватает прав.
	Если УстанавливатьПривилегированныйРежим
		И РольДоступна(Метаданные.Роли.ДобавлениеИзменениеДополнительныхОтчетовИОбработок)
		И НЕ ПравоДоступа("Администрирование", Метаданные) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(РегламентноеЗаданиеGUID);
	
	Возврат Задание;
	
КонецФункции

// Обработчик экземпляра регламентного задания ЗапускОбработок.
// Запускает обработчик глобальной обработки по регламентному заданию,
// с указанным идентификатором команды.
//
// Параметры
// ВнешняяОбработка		- СправочникСсылка.ДополнительныеОтчетыИОбработки
// ИдентификаторКоманды - Строка - идентификатор выполняемой команды
//
Процедура ВыполнитьОбработкуПоРегламентномуЗаданию(ВнешняяОбработка, ИдентификаторКоманды) Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	// Запись журнала регистрации
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Запуск обработчика. Команда: %1.'"),
		ИдентификаторКоманды
	);
	ЗаписатьСобытиеВЖурналРегистрации(ВнешняяОбработка, ТекстСообщения);
	
	// Запуск обработки
	ВыполнитьОбработкуНепосредственно(ВнешняяОбработка, ИдентификаторКоманды);
	
	// Запись журнала регистрации
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Возврат из обработчика. Команда: %1.'"),
		ИдентификаторКоманды
	);
	ЗаписатьСобытиеВЖурналРегистрации(ВнешняяОбработка, ТекстСообщения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции

// Формирует список доступных команд дополнительных отчетов или обработок
// 
// Параметры:
//   ЭтоНазначаемыеОбработки    (Булево) Фильтр по назначаемым обработкам
//   ПолноеИмяОбъектаМетаданных (Строка) Полное имя объекта метаданных
//   ДляФормыОбъекта            (Булево) Истина - для формы объекта, Ложь - для формы списка
//   Раздел                     (СправочникСсылка.ИдентификаторыОбъектовМетаданных) Раздел командного интерфейса
//   ВидОбработок               (ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок) Вид обработки
// 
// Возвращаемое значение: 
//   (ТаблицаЗначений) 
//       |- Ссылка               (СправочникСсылка.ДополнительныеОтчетыИОбработки)
//       |- БезопасныйРежим      (Булево) Обработка вызывается в безопасном режиме
//       |- Представление        (Строка) Представление команды для конечного пользователя
//       |- Идентификатор        (Строка) Идентификатор команды
//       |- ВариантЗапуска       (Строка) Формируется из (ПеречислениеСсылка.СпособыВызоваДополнительныхОбработок)
//       |- ПоказыватьОповещение (Булево) Показывать оповещение пользователю после выполнения
//       |- Модификатор          (Строка) Модификатор команды
//
Функция ПолучитьДоступныеКоманды(ЭтоНазначаемыеОбработки, ПолноеИмяОбъектаМетаданных, ДляФормыОбъекта, Раздел, ВидОбработок) Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ВЫРАЗИТЬ(ДополнительныеОтчетыИОбработкиКоманды.Представление КАК Строка(200)) КАК Представление,
			|	ДополнительныеОтчетыИОбработкиКоманды.Идентификатор КАК Идентификатор,
			|	ДополнительныеОтчетыИОбработкиКоманды.ПоказыватьОповещение КАК ПоказыватьОповещение,
			|	ДополнительныеОтчетыИОбработкиКоманды.Модификатор КАК Модификатор,
			|	ВЫБОР
			|		КОГДА ДополнительныеОтчетыИОбработкиКоманды.ВариантЗапуска = ЗНАЧЕНИЕ(Перечисление.СпособыВызоваДополнительныхОбработок.ВызовКлиентскогоМетода)
			|			ТОГДА ""ВызовКлиентскогоМетода""
			|		КОГДА ДополнительныеОтчетыИОбработкиКоманды.ВариантЗапуска = ЗНАЧЕНИЕ(Перечисление.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода)
			|			ТОГДА ""ВызовСерверногоМетода""
			|		КОГДА ДополнительныеОтчетыИОбработкиКоманды.ВариантЗапуска = ЗНАЧЕНИЕ(Перечисление.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы)
			|			ТОГДА ""ОткрытиеФормы""
			|	КОНЕЦ КАК ВариантЗапуска,
			|	ДополнительныеОтчетыИОбработки.Ссылка			КАК Ссылка,
			|	ДополнительныеОтчетыИОбработки.БезопасныйРежим	КАК БезопасныйРежим
			|ИЗ
			|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
			|	СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ДополнительныеОтчетыИОбработкиКоманды
			|			ПО ДополнительныеОтчетыИОбработкиКоманды.Ссылка = ДополнительныеОтчетыИОбработки.Ссылка";
	
	Если ЭтоНазначаемыеОбработки Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Назначение КАК ДополнительныеОтчетыИОбработкиНазначение
			|			ПО ДополнительныеОтчетыИОбработкиНазначение.Ссылка = ДополнительныеОтчетыИОбработки.Ссылка";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
			|	СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Разделы КАК ДополнительныеОтчетыИОбработкиРазделы
			|			ПО ДополнительныеОтчетыИОбработкиРазделы.Ссылка = ДополнительныеОтчетыИОбработки.Ссылка
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК ПользовательскиеНастройкиДоступаКОбработкам
			|			ПО ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка = ДополнительныеОтчетыИОбработки.Ссылка
			|			 И ПользовательскиеНастройкиДоступаКОбработкам.ИдентификаторКоманды = ДополнительныеОтчетыИОбработкиКоманды.Идентификатор
			|			 И ПользовательскиеНастройкиДоступаКОбработкам.Пользователь = &Пользователь";
		Запрос.Параметры.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	КонецЕсли;
	
	//////////////////////////
	// блок наложения фильтров
	
	ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	ДополнительныеОтчетыИОбработки.Вид = &ВидОбработок
			|	И НЕ ДополнительныеОтчетыИОбработки.ПометкаУдаления
			|	И (
			|		ДополнительныеОтчетыИОбработки.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)";
			
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДополнительныхОтчетовИОбработок") Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	ИЛИ ДополнительныеОтчетыИОбработки.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.РежимОтладки)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
									| )";
	
	Если ЭтоНазначаемыеОбработки Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	И ДополнительныеОтчетыИОбработкиНазначение.ПолноеИмяОбъектаМетаданных ПОДОБНО &ПолноеИмяОбъектаМетаданных";
			
		Запрос.Параметры.Вставить("ПолноеИмяОбъектаМетаданных", ПолноеИмяОбъектаМетаданных);
		
		Если ДляФормыОбъекта Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДополнительныеОтчетыИОбработки.ИспользоватьДляФормыОбъекта";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДополнительныеОтчетыИОбработки.ИспользоватьДляФормыСписка";
		КонецЕсли;
		
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
			|	И ДополнительныеОтчетыИОбработкиРазделы.Раздел = &Раздел
			|	И ПользовательскиеНастройкиДоступаКОбработкам.Доступно";
		Запрос.Параметры.Вставить("Раздел", Раздел);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
			|УПОРЯДОЧИТЬ ПО
			|	Представление Возр";
			
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Параметры.Вставить("ВидОбработок", ВидОбработок);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Проверяет, является ли переданное имя формы основной формой объекта метаданных,
// полное имя которого передается в параметре ПолноеИмяОбъектаМетаданных
// Параметры
//  ПолноеИмяОбъектаМетаданных - строка - полное имя объекта метаданных
//  ИмяФормы - полное имя формы
// Возвращаемое значение
//  Истина, если форма является основной формой объекта метаданных, иначе Ложь
//
Функция ЭтоФормаОбъекта(ПолноеИмяОбъектаМетаданных, ИмяФормы) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъектаМетаданных);
	
	Если ОбъектМетаданных.ОсновнаяФормаОбъекта = Неопределено Тогда
		Если Метаданные.Константы.Содержит(ОбъектМетаданных)
			ИЛИ Метаданные.Отчеты.Содержит(ОбъектМетаданных)
			ИЛИ Метаданные.Обработки.Содержит(ОбъектМетаданных) Тогда
			Суффикс = ".Форма";
		Иначе
			Суффикс = ".ФормаОбъекта";
		КонецЕсли;
		Если Прав(ИмяФормы, СтрДлина(Суффикс)) = Суффикс Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ОбъектМетаданных.ОсновнаяФормаОбъекта.ПолноеИмя() = ИмяФормы Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция возвращает таблицу значений со списком объектов метаданных,
// к которым может быть применена обработка переданного вида.
// Список объектов метаданных берется из общий команд, соответствующих
// виду обработки. Для глобальных обработок возвращается пустой набор.
// Параметры
// Вид - Перечисление.ВидыДополнительныхОтчетовИОбработок - вид внешней обработки
// Возвращаемое значение
// ТаблицаЗначений с колонками
//		ПолноеИмяОбъектаМетаданных - строка - полное имя объекта метаданных, например "Справочник.Валюты"
//		Класс	  - строка - класс метаданных, например "Справочник"
//		Объект	  - строка - имя объекта метаданных, например "Валюты"
//
Функция ПолучитьПолноеНазначениеПоВидуДополнительнойВнешнейОбработки(Вид) Экспорт
	
	Назначение = Новый ТаблицаЗначений;
	Назначение.Колонки.Добавить("ПолноеИмяОбъектаМетаданных");
	Назначение.Колонки.Добавить("Класс");
	Назначение.Колонки.Добавить("Объект");
	
	Команда = Неопределено;
	
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
		Команда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиЗаполнениеОбъекта;
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		Команда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиОтчеты;
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		Команда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиПечатныеФормы;
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		Команда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиСозданиеСвязанныхОбъектов;
	КонецЕсли;
	
	Если Команда <> Неопределено Тогда
		
		Для Каждого Тип Из Команда.ТипПараметраКоманды.Типы() Цикл
			ПолноеИмяОбъектаМетаданных = Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
			РазделеннаяСтрока = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяОбъектаМетаданных, ".");
			НовоеНазначение = Назначение.Добавить();
			НовоеНазначение.ПолноеИмяОбъектаМетаданных	= ПолноеИмяОбъектаМетаданных;
			НовоеНазначение.Класс		= РазделеннаяСтрока[0];
			НовоеНазначение.Объект		= РазделеннаяСтрока[1];
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Назначение;
	
КонецФункции

// Проверяет, что обработка относится к категории глобальных.
// Параметры
// Вид - ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок - вид обработки
// Возвращаемое значение
//	Истина - обработка относится к категории глобальных
//	Ложь   - обработка относится к категории назначаемых
//
Функция ПроверитьГлобальнаяОбработка(Вид) Экспорт
	
	Возврат Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка
		ИЛИ Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
	
КонецФункции

// Проверяет, что обработка относится к категории назначаемых для объектов
// Параметры
// Вид - ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок - вид обработки
// Возвращаемое значение
//	Истина - обработка относится к категории назначаемых
//	Ложь   - обработка относится к категории глобальных
//
Функция ПроверитьНазначаемаяОбработка(Вид) Экспорт
	
	Возврат Не ПроверитьГлобальнаяОбработка(Вид);
	
КонецФункции

// Создает объект обработки и передает ему управление через известный интерфейс.
// Для назначаемых обработок так же указываются объекты назначения. Из некоторых обработок
// происходит получение результата выполнения.
//
// Параметры
//   ВнешняяОбработкаСсылка - СправочникСсылка.ДополнительныеОтчетыИОбработки
//   ИдентификаторКоманды - Строка - идентификатор одной из команд обработки
//   ОбъектыНазначения - Массив - объекты назначения обработки
//   РезультатВыполнения - Массив - используется для передачи результата выполнения обработки
//
Процедура ВыполнитьОбработкуНепосредственно(ВнешняяОбработкаСсылка, ИдентификаторКоманды,
	ОбъектыНазначения = Неопределено, РезультатВыполнения = Неопределено) Экспорт
	
	ВнешняяОбработка = ПолучитьОбъектВнешнейОбработки(ВнешняяОбработкаСсылка);
	СведенияОВнешнейОбработке = ВнешняяОбработка.СведенияОВнешнейОбработке();
	
	ВерсияБСП = Неопределено;
	ПередаватьПараметрыВыполненияКоманды = Ложь;
	
	Если СведенияОВнешнейОбработке.Свойство("ВерсияБСП", ВерсияБСП)
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияБСП, "1.2.1.4") >= 0 Тогда
		
		ПередаватьПараметрыВыполненияКоманды = Истина;
		ПараметрыВыполненияКоманды = Новый Структура();
		ПараметрыВыполненияКоманды.Вставить("ДополнительнаяОбработкаСсылка", ВнешняяОбработкаСсылка);
		
	КонецЕсли;
	
	ТипОбработки = ВнешняяОбработкаСсылка.Вид;
	
	Если ТипОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка
		ИЛИ ТипОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		Если ПередаватьПараметрыВыполненияКоманды Тогда
			ВнешняяОбработка.ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды);
		Иначе
			ВнешняяОбработка.ВыполнитьКоманду(ИдентификаторКоманды);
		КонецЕсли;
		
	ИначеЕсли ТипОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		
		СозданныеОбъекты = Новый Массив;
		
		Если ПередаватьПараметрыВыполненияКоманды Тогда
			ВнешняяОбработка.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, СозданныеОбъекты, ПараметрыВыполненияКоманды);
		Иначе
			ВнешняяОбработка.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, СозданныеОбъекты);
		КонецЕсли;
		
		РезультатВыполнения = Новый Массив;
		
		Для Каждого СозданныйОбъект Из СозданныеОбъекты Цикл
			Тип = ТипЗнч(СозданныйОбъект);
			Если РезультатВыполнения.Найти(Тип) = Неопределено Тогда
				РезультатВыполнения.Добавить(Тип);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
		
		Если ПередаватьПараметрыВыполненияКоманды Тогда
			ВнешняяОбработка.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, ПараметрыВыполненияКоманды);
		Иначе
			ВнешняяОбработка.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения);
		КонецЕсли;
		
		РезультатВыполнения = Новый Массив;
		
		Для Каждого ИзмененныйОбъект Из ОбъектыНазначения Цикл
			Тип = ТипЗнч(ИзмененныйОбъект);
			Если РезультатВыполнения.Найти(Тип) = Неопределено Тогда
				РезультатВыполнения.Добавить(Тип);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		
		Если ПередаватьПараметрыВыполненияКоманды Тогда
			ВнешняяОбработка.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, ПараметрыВыполненияКоманды);
		Иначе
			ВнешняяОбработка.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения);
		КонецЕсли;
		
	ИначеЕсли ТипОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		
		Если ПередаватьПараметрыВыполненияКоманды Тогда
			ВнешняяОбработка.Печать(ИдентификаторКоманды, ОбъектыНазначения, ПараметрыВыполненияКоманды);
		Иначе
			ВнешняяОбработка.Печать(ИдентификаторКоманды, ОбъектыНазначения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Запускает ВыполнитьОбработкуНепосредственно и помещает результат по адресу АдресХранилища
// 
// Параметры:
//   ПараметрыВызоваСервера (Структура) Элементы соответствуют параметрам ВыполнитьОбработкуНепосредственно
//   АдресХранилища (Строка) Адрес временного хранилища по которому будет размещен результат выполнения
// 
Процедура ВыполнитьОбработкуВКонтекстеСеанса(ПараметрыВызоваСервера, АдресХранилища) Экспорт
	
	ВыполнитьОбработкуНепосредственно(
		ПараметрыВызоваСервера.ВнешняяОбработкаСсылка,
		ПараметрыВызоваСервера.ИдентификаторКоманды,
		ПараметрыВызоваСервера.ОбъектыНазначения,
		ПараметрыВызоваСервера.РезультатВыполнения
	);
	
	ПоместитьВоВременноеХранилище(ПараметрыВызоваСервера, АдресХранилища);
	
КонецПроцедуры

// Возвращает вид обработки по строковому представлению
// Параметры
// СтроковоеПредставление - Строка - строковое представление вида обработки
// Возвращаемое значение
// ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок - вид обработки
//
Функция ПолучитьВидОбработкиПоСтроковомуПредставлениюВида(СтроковоеПредставление) Экспорт
	
	Если	  СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
	КонецЕсли;
	
КонецФункции

// Возвращает имя рабочего места команды
//
Функция ПолучитьИмяРабочегоМеста(Раздел) Экспорт
	Если Раздел = ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола()
		ИЛИ Раздел = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка() Тогда
		Возврат НСтр("ru = 'Рабочий стол'");
	КонецЕсли;
	
	Если ТипЗнч(Раздел) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		ПредставлениеРаздела = Раздел.Синоним;
	ИначеЕсли ТипЗнч(Раздел) = Тип("ОбъектМетаданных") Тогда
		ПредставлениеРаздела = Раздел.Представление();
	Иначе
		ПредставлениеРаздела = Метаданные.Подсистемы.Найти(Раздел).Представление();
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Раздел ""%1""'"), 
		ПредставлениеРаздела
	);
КонецФункции

// Функция для добавления команд дополнительных обработок в список "своих"
//
Процедура ДобавитьКомандыВСписокСвоих(МассивКоманд) Экспорт
	
	Для Каждого ЭлементСтрока Из МассивКоманд Цикл
		Запись = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьМенеджерЗаписи();
		
		Запись.ДополнительныйОтчетИлиОбработка  = ЭлементСтрока.Обработка;
		Запись.ИдентификаторКоманды             = ЭлементСтрока.Идентификатор;
		Запись.Пользователь                     = Пользователи.ТекущийПользователь();
		Запись.Доступно                         = Истина;
		
		Запись.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Функция для исключения команд дополнительных обработок из списока "своих"
//
Процедура УдалитьКомандыИзСпискаСвоих(МассивКоманд) Экспорт
	
	Для Каждого ЭлементСтрока Из МассивКоманд Цикл
		
		Запись = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьМенеджерЗаписи();
		
		Запись.ДополнительныйОтчетИлиОбработка  = ЭлементСтрока.Обработка;
		Запись.ИдентификаторКоманды             = ЭлементСтрока.Идентификатор;
		Запись.Пользователь                     = Пользователи.ТекущийПользователь();
		
		Запись.Прочитать();
		
		Запись.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает доступность команды для указанных типа объекта метаданных и типа формы
//
Процедура УстановитьДоступностьКоманды(ПолноеИмяОбъектаМетаданных, ТипФормы, ИмяРесурса, Значение) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.НазначениеДополнительныхОбработок.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ТипОбъекта = ПолноеИмяОбъектаМетаданных;
	МенеджерЗаписи.ТипФормы = ТипФормы;
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.ТипОбъекта = ПолноеИмяОбъектаМетаданных;
	МенеджерЗаписи.ТипФормы = ТипФормы;
	МенеджерЗаписи[ИмяРесурса] = Значение;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Записывает настройки быстрого доступа к обработкам "по пользователям"
//
Процедура ЗаписатьНастройкиБыстрогоДоступа(Ссылка, ТаблицаКоманд) Экспорт
	
	Для Каждого ЭлементКоманда Из ТаблицаКоманд Цикл
		
		НаборЗаписей = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДополнительныйОтчетИлиОбработка.Установить(Ссылка);
		НаборЗаписей.Отбор.ИдентификаторКоманды.Установить(ЭлементКоманда.Идентификатор);
		
		Для Каждого ЭлементПользователь Из ЭлементКоманда.БыстрыйСписокДоступа Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.ДополнительныйОтчетИлиОбработка = Ссылка;
			Запись.ИдентификаторКоманды = ЭлементКоманда.Идентификатор;
			Запись.Пользователь = ЭлементПользователь.Значение;
			Запись.Доступно = Истина;
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет интегрирована ли конфигурация с подсистемой хранилищем вариантов отчетов
//
Функция ИспользуетсяИнтеграцияСВариантамиОтчетов() Экспорт
	Возврат Метаданные.ХранилищаНастроек.Найти("ХранилищеВариантовОтчетов") <> Неопределено;
КонецФункции

// Заполняет список печатных форм из внешних источников.
//
// Параметры:
//  ВнешниеПечатныеФормы - СписокЗначений:
//                                         Значение      - Строка - идентификатор печатной формы;
//                                         Представление - Строка - название печатной формы.
//  ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных, для которого требуется получить список печатных форм.
//
Процедура ПриПолученииСпискаВнешнихПечатныхФорм(ВнешниеПечатныеФормы, ПолноеИмяОбъектаМетаданных) Экспорт
	
	ТаблицаКоманд = ПолучитьДоступныеКоманды(Истина, ПолноеИмяОбъектаМетаданных, Истина, Неопределено,
		Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма);
		
	Для Каждого Команда Из ТаблицаКоманд Цикл
		Если Найти(Команда.Идентификатор, ",") = 0 Тогда // кроме "комплектов"
			ВнешниеПечатныеФормы.Добавить(Команда.Идентификатор, Команда.Представление);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Возвращает ссылку на объект внешней печатной формы.
//
Процедура ПриПолученииВнешнейПечатнойФормы(Идентификатор, ПолноеИмяОбъектаМетаданных, ВнешняяПечатнаяФормаСсылка) Экспорт
	
	ТаблицаКоманд = ПолучитьДоступныеКоманды(Истина, ПолноеИмяОбъектаМетаданных, Истина, Неопределено,
		Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма);
		
	Команда = ТаблицаКоманд.Найти(Идентификатор, "Идентификатор");
	Если Команда <> Неопределено Тогда 
		ВнешняяПечатнаяФормаСсылка = Команда.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие права добавления дополнительных отчетов и обработок.
//
Функция ПравоДобавления() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначения.ИспользованиеРазделителяСеанса() Тогда
		Возврат РольДоступна(Метаданные.Роли.АдминистраторСистемы);
	Иначе
		Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеДополнительныхОтчетовИОбработок");
	КонецЕсли;
	
КонецФункции

// Получает список настроек дополнительных отчетов и обработок у переданного пользователя справочника
//
// Параметры:
//  ПользовательСсылка     - СправочникСсылка.Пользователи - пользователь, у которого нужно получить настройки.
//  Настройки              - Структура - прочие пользовательские настройки.
//     |-НазваниеНастройки - Строка - название, которое будет отображаться в дереве настроек обработки.
//     |-КартинкаНастройки - Картинка - картинка, которая будет отображаться в дереве обработки.
//     |-СписокНастроек    - СписокЗначений - список полученных настроек
//
Процедура ПолучитьНастройкиДополнительныхОтчетовИОбработок(ПользовательСсылка, Настройки) Экспорт
	
	// Название строки настроек, отображаемое в дереве настроек обработки
	НазваниеНастройки = НСтр("ru='Настройки быстрого доступа к дополнительным отчетам и обработкам'");
	
	// Картинка строки настроек
	КартинкаНастройки = "";
	
	// Список дополнительных отчетов и обработок, находящихся в быстром доступе у пользователя
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка КАК Объект,
	|	ПользовательскиеНастройкиДоступаКОбработкам.ИдентификаторКоманды КАК Идентификатор,
	|	ПользовательскиеНастройкиДоступаКОбработкам.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК ПользовательскиеНастройкиДоступаКОбработкам
	|ГДЕ
	|	Пользователь = &Пользователь";
	
	Запрос.Параметры.Вставить("Пользователь", ПользовательСсылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Настройки = Новый Структура;
	Настройки.Вставить("НазваниеНастройки", НазваниеНастройки);
	Настройки.Вставить("КартинкаНастройки", КартинкаНастройки);
	Настройки.Вставить("СписокНастроек", РезультатЗапроса);
	
КонецПроцедуры

// Сохраняет команды дополнительных отчетов и обработок переданным пользователям справочника
//
// Параметры:
//  Настройки              - СписокЗначений - список ключей сохраняемых настроек
//  ПользователиПолучатели - Массив - элемент массива - СправочникСсылка.Пользователи - пользователи,
//                           которым нужно скопировать настройки
//
Процедура ДобавитьКомандыВСписокБыстрогоДоступа(Настройки, ПользователиПолучатели) Экспорт
	
	Для Каждого ПользовательПриемник Из ПользователиПолучатели Цикл
		
		Для Каждого ЭлементСтрока Из Настройки Цикл
			Запись = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьМенеджерЗаписи();
			
			Запись.ДополнительныйОтчетИлиОбработка  = ЭлементСтрока.Значение;
			Запись.ИдентификаторКоманды             = ЭлементСтрока.Представление;
			Запись.Пользователь                     = ПользовательПриемник;
			Запись.Доступно                         = Истина;
			
			Запись.Записать(Истина);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Очищает команды дополнительных отчетов и обработок переданному пользователю справочника
//
// Параметры:
//  СписокКлючей           - СписокЗначений - список ключей очищаемых настроек
//  ОчищаемыйПользователь  - СправочникСсылка.Пользователи - пользователь, у
//                           которого нужно очистить настройки
//
Процедура УдалитьКомандыИзСпискаБыстрогоДоступа(СписокКлючей, ОчищаемыйПользователь) Экспорт
	
	Для Каждого ЭлементСтрока Из СписокКлючей Цикл
		
		Запись = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьМенеджерЗаписи();
		
		Запись.ДополнительныйОтчетИлиОбработка  = ЭлементСтрока.Значение;
		Запись.ИдентификаторКоманды             = ЭлементСтрока.Представление;
		Запись.Пользователь                     = ОчищаемыйПользователь;
		
		Запись.Прочитать();
		
		Запись.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

// Для внутреннего использования
// 
Процедура ЗаписатьСобытиеВЖурналРегистрации(ДополнительнаяОбработкаСсылка, ТекстСообщения)
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Дополнительные отчеты и обработки'"),
		УровеньЖурналаРегистрации.Информация,
		ДополнительнаяОбработкаСсылка.Метаданные(),
		ДополнительнаяОбработкаСсылка,
		ТекстСообщения
	);
	
КонецПроцедуры

// Для внутреннего использования
// 
Функция ПолучитьТаблицуЗаписей(ПользователиСДопОбработками)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработки.Ссылка КАК Обработка,
	|	КомандыДополнительныхОтчетовИОбработок.Идентификатор КАК Идентификатор
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК КомандыДополнительныхОтчетовИОбработок
	|		ПО (КомандыДополнительныхОтчетовИОбработок.Ссылка = ДополнительныеОтчетыИОбработки.Ссылка)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ОбработкиСКомандами = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗаписей = Новый ТаблицаЗначений;
	ТаблицаЗаписей.Колонки.Добавить("Обработка",     Новый ОписаниеТипов("СправочникСсылка.ДополнительныеОтчетыИОбработки"));
	ТаблицаЗаписей.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаписей.Колонки.Добавить("Пользователь",  Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаЗаписей.Колонки.Добавить("Доступно",      Новый ОписаниеТипов("Булево"));
	
	Для Каждого ОбработкаКоманда Из ОбработкиСКомандами Цикл
		Для Каждого Пользователь Из ПользователиСДопОбработками Цикл
			НоваяСтрока = ТаблицаЗаписей.Добавить();
			НоваяСтрока.Обработка     = ОбработкаКоманда.Обработка;
			НоваяСтрока.Идентификатор = ОбработкаКоманда.Идентификатор;
			НоваяСтрока.Пользователь  = Пользователь;
			НоваяСтрока.Доступно   = Истина;
		КонецЦикла;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработки.Ссылка КАК Обработка,
	|	КомандыДополнительныхОтчетовИОбработок.Идентификатор КАК Идентификатор,
	|	Пользователи.Ссылка КАК Пользователь,
	|	ПользовательскиеНастройкиДоступаКОбработкам.Доступно КАК Доступно
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК КомандыДополнительныхОтчетовИОбработок
	|		ПО (КомандыДополнительныхОтчетовИОбработок.Ссылка = ДополнительныеОтчетыИОбработки.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК ПользовательскиеНастройкиДоступаКОбработкам
	|		ПО (ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка = ДополнительныеОтчетыИОбработки.Ссылка)
	|			И (ПользовательскиеНастройкиДоступаКОбработкам.ИдентификаторКоманды = КомандыДополнительныхОтчетовИОбработок.Идентификатор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка = ПользовательскиеНастройкиДоступаКОбработкам.Пользователь)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ИсключенияПерсональногоДоступа = Запрос.Выполнить().Выгрузить();
	
	ПоискСтрок = Новый Структура("Обработка, Идентификатор, Пользователь");
	Для Каждого ИсключениеПерсональногоДоступа Из ИсключенияПерсональногоДоступа Цикл
		ЗаполнитьЗначенияСвойств(ПоискСтрок, ИсключениеПерсональногоДоступа);
		Найденные = ТаблицаЗаписей.НайтиСтроки(ПоискСтрок);
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			СтрокаТаблицы.Доступно = НЕ ИсключениеПерсональногоДоступа.Доступно; // инвертируем исключением доступа
		КонецЦикла; 
	КонецЦикла;
	
	Возврат ТаблицаЗаписей;
	
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьМассивПользователейСДоступомКДополнительнымОбработкам()
	
	Результат = Новый Массив;
	
	ПроверяемыеРоли = "ИспользованиеДополнительныхОтчетовИОбработок, ДобавлениеИзменениеДополнительныхОтчетовИОбработок";
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.Пользователи");
	ВсеПользователи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для Каждого Пользователь Из ВсеПользователи Цикл
		Если Пользователи.РолиДоступны(ПроверяемыеРоли, Пользователь) Тогда
			Результат.Добавить(Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиДоступа.Пользователь
	|ИЗ
	|	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК НастройкиДоступа
	|ГДЕ
	|	НЕ НастройкиДоступа.Пользователь В (&УжеДобавленныеПользователи)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("УжеДобавленныеПользователи", Результат);
	ПользователиВРегистре = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	Для Каждого Пользователь Из ПользователиВРегистре Цикл
		Результат.Добавить(Пользователь);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

