////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции для обработки действий пользователя
// в процессе работы с ценами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции проверки возможности выполнения действий.

// Проверяет заполненность реквизитов, необходимых для пересчета из валюты в валюту
//
// Параметры:
//	Документ - ДокументОбъект, для которого выполняются проверки
//	СтараяВалюта - Предыдущая валюта документа
//	ИмяТЧ - Имя табличной части
//
// Возвращаемое значение:
//	Булево
//	Ложь, если необходимые данные не заполнены
//
Функция НеобходимПересчетВВалюту(Документ, СтараяВалюта, ИмяТЧ="Товары") Экспорт

	Если Не ЗначениеЗаполнено(Документ.Валюта) Тогда
		Документ.Валюта = СтараяВалюта;
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СтараяВалюта) Тогда
		Возврат Ложь;
	ИначеЕсли СтараяВалюта = Документ.Валюта Тогда
		Возврат Ложь;
	ИначеЕсли Документ[ИмяТч].Итог("Цена") = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Проверяет заполненность реквизитов, необходимых пересчета сумм взаиморасчетов
//
// Параметры:
// 		Документ - ДокументОбъект, для которого выполняются проверки
// 		СтараяВалюта - Предыдущая валюта взаиморасчетов
// 		ИмяТЧ - Имя табличной части
//
// Возвращаемое значение:
// 		Булево - Ложь, если необходимые пересчитать суммы взаиморасчетов
//
Функция НеобходимПересчетСуммыВзаиморасчетов(Документ, СтараяВалюта, ИмяТЧ="Товары") Экспорт

	Если Не ЗначениеЗаполнено(Документ.ВалютаВзаиморасчетов) Тогда
		Документ.ВалютаВзаиморасчетов = СтараяВалюта;
		Возврат Ложь;
	ИначеЕсли Не ЗначениеЗаполнено(СтараяВалюта) Тогда
		Возврат Истина;
	ИначеЕсли СтараяВалюта = Документ.ВалютаВзаиморасчетов Тогда
		Возврат Ложь;
	ИначеЕсли Документ[ИмяТч].Итог("СуммаВзаиморасчетов") = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Проверяет заполненность реквизитов, необходимых для пересчета цен при изменении даты документа
//
// Параметры:
// Документ - ДокументОбъект, для которого выполняются проверки
// ИмяТЧ - Имя табличной части
//
// Возвращаемое значение:
// Булево
// Ложь, если необходимые данные не заполнены или на вопрос пользователь ответил отрицательно
//
Функция ЗадатьВопросПересчетаЦеныПриИзмененииДаты(Документ, ИмяТЧ="Товары") Экспорт

	Если Не ЗначениеЗаполнено(Документ.Соглашение) Или
		Не ЗначениеЗаполнено(Документ.Валюта) Или
		Документ[ИмяТЧ].Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВариантыОтветов = Новый СписокЗначений;
	ВариантыОтветов.Добавить(Истина, НСтр("ru='Перезаполнить'"));
	ВариантыОтветов.Добавить(Ложь, НСтр("ru='Не перезаполнять'"));
	
	Ответ = Вопрос(НСтр("ru='Перезаполнить цены по соглашению?'"), ВариантыОтветов);
	
	Если Не Ответ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры оповещения пользователя о выполненных действиях.

//Показывает оповещение пользователя об окончании заполнения этапов графика оплаты
//
Процедура ОповеститьОбОкончанииЗаполненияЭтаповГрафикаОплаты() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Этапы оплаты заполнены'"),
		,
		НСтр("ru='Этапы графика оплаты заполнены'"),
		БиблиотекаКартинок.Информация32
	);

КонецПроцедуры

//Показывает оповещение пользователя о невозможности заполнения этапов графика оплаты
//
Процедура ОповеститьОНевозможностиЗаполненияЭтаповГрафикаОплаты() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Этапы оплаты очищены'"),
		,
		"Сумма неотмененных строк заказа нулевая. Таблица этапов оплаты очищена",
		БиблиотекаКартинок.Информация32
	);

КонецПроцедуры

//Показывает оповещение пользователя об окончании пересчета сумм из валюты в валюту
//
// Параметры:
// ВалютаИсточник - СправочникСсылка.Валюты - валюта, из которой осуществлялся пересчет
// ВалютаПриемник - СправочникСсылка.Валюты - валюта, в которую осуществляется пересчет
//
Процедура ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаИсточник, ВалютаПриемник) Экспорт

	СтрокаСообщения = НСтр("ru='Суммы в документе пересчитаны из валюты %ВалютаИсточник% в валюту %ВалютаПриемник%'");
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%ВалютаИсточник%", ВалютаИсточник);
	СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%ВалютаПриемник%", ВалютаПриемник);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Суммы пересчитаны'"),
		,
		СтрокаСообщения,
		БиблиотекаКартинок.Информация32
	);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции заполнения этапов оплаты.

 // Добавляет один этап оплаты по умолчанию
//
// Параметры:
// СуммаДокумента - Число - сумма, которую необходимо добавить в этап
//
Процедура ДобавитьЭтапОплатыПоУмолчанию(ЭтапыГрафикаОплаты, Знач ЖелаемаяДата, Знач СуммаДокумента, Знач ВариантОплаты = Неопределено) Экспорт
	
	Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда
		ЭтапыГрафикаОплаты.Очистить();
	КонецЕсли;
	      //АСТЭК 18,02,2014 //
	Если  ЗначениеЗаполнено(ЖелаемаяДата) Тогда
		 ДатаПлатежа = ЖелаемаяДата;
	Иначе
		ДатаПлатежа = ТекущаяДата();
	КонецЕсли;
	    //
		
	Если Не ЗначениеЗаполнено(ДатаПлатежа) Тогда
		РаботаСДиалогамиКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаПлатежа, НСтр("ru='Введите дату платежа'"), ЧастиДаты.Дата);
	КонецЕсли;
	
	НовыйЭтап = ЭтапыГрафикаОплаты.Добавить();
	
	Если ВариантОплаты <> Неопределено Тогда
		НовыйЭтап.ВариантОплаты  = ВариантОплаты;
	КонецЕсли;
	
	НовыйЭтап.ДатаПлатежа    = ДатаПлатежа;
	НовыйЭтап.ПроцентПлатежа = 100;
	НовыйЭтап.СуммаПлатежа   = СуммаДокумента;

КонецПроцедуры

// Стандартный обработчик события "ПриИзменении" поля "ЭтапыГрафикаОплатыПроцентПлатежа"
//
// Параметры:
// ТекущиеДанные      - ДанныеФормыЭлементКоллекции - строка с текущими данными таблицы этапов оплаты
// ЭтапыГрафикаОплаты - ДанныеФормыКоллекция - таблица этапов оплаты
// СуммаДокумента     - Число - сумма документа
//
Процедура ЭтапыГрафикаОплатыПроцентПлатежаПриИзменении(ТекущиеДанные, ЭтапыГрафикаОплаты, Знач СуммаДокумента) Экспорт
	
	Если ТекущиеДанные.ПроцентПлатежа > 0 И ЭтапыГрафикаОплаты.Итог("ПроцентПлатежа") = 100 Тогда
		
		СуммаПлатежа = 0;
		Для Каждого ТекСтрока Из ЭтапыГрафикаОплаты Цикл
			Если ТекСтрока.НомерСтроки <> ТекущиеДанные.НомерСтроки Тогда
				СуммаПлатежа = СуммаПлатежа + ТекСтрока.СуммаПлатежа;
			КонецЕсли;
		КонецЦикла;
		
		ТекущиеДанные.СуммаПлатежа = СуммаДокумента - СуммаПлатежа;
	Иначе
		
		ТекущиеДанные.СуммаПлатежа = СуммаДокумента * ТекущиеДанные.ПроцентПлатежа / 100;
		
	КонецЕсли;
	
КонецПроцедуры

// Стандартный обработчик события "ПриИзменении" поля "ЭтапыГрафикаОплатыСуммаПлатежа"
//
// Параметры:
// ТекущиеДанные      - ДанныеФормыЭлементКоллекции - строка с текущими данными таблицы этапов оплаты
// ЭтапыГрафикаОплаты - ДанныеФормыКоллекция - таблица этапов оплаты
// СуммаДокумента     - Число - сумма документа
//
Процедура ЭтапыГрафикаОплатыСуммаПлатежаПриИзменении(ТекущиеДанные, ЭтапыГрафикаОплаты, Знач СуммаДокумента) Экспорт
	
	Если СуммаДокумента <> 0 Тогда
		
		Если ТекущиеДанные.СуммаПлатежа <> 0 И
			ЭтапыГрафикаОплаты.Итог("СуммаПлатежа") = СуммаДокумента Тогда
			
			ПроцентПлатежа = 0;
			Для Каждого ТекСтрока Из ЭтапыГрафикаОплаты Цикл
				Если ТекСтрока.НомерСтроки <> ТекущиеДанные.НомерСтроки Тогда
					ПроцентПлатежа = ПроцентПлатежа + ТекСтрока.ПроцентПлатежа;
				КонецЕсли;
			КонецЦикла;
			
			ТекущиеДанные.ПроцентПлатежа = 100 - ПроцентПлатежа;
			
		Иначе
			ТекущиеДанные.ПроцентПлатежа = ТекущиеДанные.СуммаПлатежа * 100 / СуммаДокумента;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
