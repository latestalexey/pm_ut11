////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает соответствие имен параметров сеанса и обработчиков для их инициализации.
//
Функция ОбработчикиИнициализацииПараметровСеанса() Экспорт
	
	// Для задания обработчиков параметров сеанса следует использовать шаблон:
	// Обработчики.Вставить("<ИмяПараметраСеанса>|<НачалоИмениПараметраСеанса*>", "Обработчик");
	//
	// Примечание. Символ '*'используется в конце имени параметра сеанса и обозначает,
	//             что один обработчик будет вызван для инициализации всех параметров сеанса
	//             с именем, начинающимся на слово НачалоИмениПараметраСеанса
	//
	
	Обработчики = Новый Соответствие;
	
	//ПодключаемоеОборудование
	Обработчики.Вставить("РабочееМестоКлиента", "МенеджерОборудованияСервер.УстановитьПараметрыСеансаПодключаемогоОборудования");
	//Конец ПодключаемоеОборудование
	
	// ОбменДаннымиССайтом
	Обработчики.Вставить("ОбменДаннымиССайтомВключен",    "ОбменССайтом.УстановитьПараметрыСеанса");
	Обработчики.Вставить("ИспользуемыеУзлыОбменаССайтом", "ОбменССайтом.УстановитьПараметрыСеанса");
	// Конец ОбменДаннымиССайтом
	
	Возврат Обработчики;
	
КонецФункции

// Возвращает список имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Пример:
// Для документ "Реализация товаров и услуг" настроена подсистема версионирования объектов,
// и подсистема свойств. При этом на экземпляр документа может быть множество ссылок 
// в информационной базе (из других документов, регистров). Часть ссылок имеют значение для бизнес-логики
// (например движения по регистрам). Другая часть ссылок - "техногенные" ссылки на объект из объектов ИБ,
// которые относятся к подсистеме версионирования объектов и подсистеме свойств. Такие "техногенные"
// ссылки должны быть отфильтрованы, например, в обработке удаления помеченных и при поиске ссылок на объект
// в подсистеме запрета редактирования ключевых реквизитов.
// Список таких "техногенных" объектов нужно перечислить в этой функции.
//
// При этом необходимо позаботиться об удалении "техногенных" данных или очистке ссылок на удаленные объекты.
// Это может быть реализовано с помощью подписки на событие ПередУдалением,
// или с помощью установки признака Ведущее для измерений регистров сведений.
//
// Возвращаемое значение:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Функция ПолучитьИсключенияПоискаСсылок() Экспорт
	
	Массив = Новый Массив;
	
	// МониторингЦелевыхПоказателей
	Массив.Добавить(Метаданные.РегистрыСведений.ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ПолноеИмя());
	// Конец МониторингЦелевыхПоказателей
	
	Массив.Добавить(Метаданные.РегистрыСведений.АналитикаУчетаНоменклатуры.ПолноеИмя());
	Массив.Добавить(Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры.ПолноеИмя());
	
	Возврат Массив;
	
КонецФункции 

// Устанавливает текстовое описание предмета
//
// Параметры
//  СсылкаНаПредмет  – ЛюбаяСсылка – объект ссылочного типа.
//  Представление	 - Строка - сюда необходимо поместить текстовое описание.
Процедура УстановитьПредставлениеПредмета(СсылкаНаПредмет, Представление) Экспорт
	
КонецПроцедуры

// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ЗаполнитьТаблицуПереименованияОбъектовМетаданных(Итог) Экспорт
	
	Библиотека = "УправлениеТорговлей";
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.1.1.1",
		"Роль.ДобавлениеИзменениеТоварноТранспортныхОграничений",
		"Роль.ДобавлениеИзменениеЛогистическихПараметров",
		Библиотека);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"11.1.1.1",
		"Роль.ОтчетыМенеджераПоУправлениюЗапасами",
		"Роль.ОтчетыМенеджераПоОбеспечениюПотребностей",
		Библиотека);
	
КонецПроцедуры

// Устанавливает имя формы персональных настроек
//
// Параметры
// ИмяФормы - Строка - пустая
//
Процедура ИмяФормыПерсональныхНастроек(ИмяФормы) Экспорт
	
	
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации, т.е. в обработчиках событий
// - ПередНачаломРаботыСистемы,
// - ПриНачалеРаботыСистемы
//
// Важно: при запуске недопустимо использовать команды сброса кэша
// повторно используемых модулей, иначе запуск может привести
// к непредсказуемым ошибкам и лишним серверным вызовам
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при запуске.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Параметры.Вставить("НеобходимаНачальнаяНастройкаПрограммы", 			ОбновлениеИнформационнойБазыУТ.НеобходимаНачальнаяНастройкаПрограммы());
	Параметры.Вставить("НеобходимаНачальнаяНастройкаБазовойВерсии", 		ОбновлениеИнформационнойБазыУТ.НеобходимаНачальнаяНастройкаБазовойВерсии());
	Параметры.Вставить("ПодключатьКомпонентуОбменаДаннымиПриСтартеСистемы", МобильныеПриложения.ПодключатьКомпонентуОбменаДаннымиПриСтартеСистемы());
	Параметры.Вставить("ФормыОткрываемыеПриНачалеРаботыСистемы", 			ОткрытиеФормПриНачалеРаботыСистемы.ФормыОткрываемыеПриНачалеРаботыСистемы());
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента.
//
// Пример реализации:
//   Для установки параметров работы клиента можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
Процедура ПараметрыРаботыКлиента(Параметры) Экспорт
	
КонецПроцедуры

// Возвращает структуру параметров, необходимых для работы клиентского кода
// конфигурации при завершении, т.е. в обработчиках:
// - ПередЗавершениемРаботыСистемы,
// - ПриЗавершенииРаботыСистемы
//
// Параметры:
//   Параметры - Структура - (возвращаемое значение) структура параметров работы клиента при завершении.
//
// Пример реализации:
//   Для установки параметров работы клиента при завершении можно использовать шаблон:
//
//     Параметры.Вставить(<ИмяПараметра>, <код получения значения параметра>);
//
Процедура ПараметрыРаботыКлиентаПриЗавершении(Параметры) Экспорт
	
КонецПроцедуры

// Вызывается при необходимости переопределить минимально необходимую версию платформы для запуска.
//
// Параметры: 
//   ПараметрыПроверки - ФиксированнаяСтруктура - 
//     МинимальноНеобходимаяВерсияПлатформы   - Строка - номер версии платформы для запуска программы
//     РаботаВПрограммеЗапрещена              - Булево - по умолчанию Ложь
//							
Процедура ПолучитьМинимальноНеобходимуюВерсиюПлатформы(ПараметрыПроверки) Экспорт
	
КонецПроцедуры

