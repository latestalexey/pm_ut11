////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Оформляет заказ
//
// Параметры
//  СтруктураЗаказа  - Структура - содержит информацию необходимую для оформления заказа.
//
Процедура ОформитьЗаказ(СтруктураЗаказа) Экспорт
	
	ДокументЗаказ = Документы.ЗаказКлиента.СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(ДокументЗаказ,СтруктураЗаказа);
	ДокументЗаказ.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	ДокументЗаказ.Приоритет = Перечисления.Приоритеты.Средний;
	ДокументЗаказ.СкидкиРассчитаны = Истина;
	ДокументЗаказ.Менеджер = СтруктураЗаказа.Партнер.ОсновнойМенеджер;
	ДокументЗаказ.ДополнительнаяИнформация = СтруктураЗаказа.ДополнительнаяИнформация;
	ДокументЗаказ.Товары.Загрузить(СтруктураЗаказа.Товары.Выгрузить());
	ДокументЗаказ.СкидкиНаценки.Загрузить(СтруктураЗаказа.СкидкиНаценки.Выгрузить());
	
	Если СтруктураЗаказа.Свойство("Договор") И ЗначениеЗаполнено(СтруктураЗаказа.Договор) Тогда
		
		ДокументЗаказ.Договор = СтруктураЗаказа.Договор;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДоговорыКонтрагентов.БанковскийСчет,
		|	ДоговорыКонтрагентов.БанковскийСчетКонтрагента
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Договор";
		
		Запрос.УстановитьПараметр("Договор",СтруктураЗаказа.Договор);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДокументЗаказ.БанковскийСчетКонтрагента = Выборка.БанковскийСчетКонтрагента;
			ДокументЗаказ.БанковскийСчет            = Выборка.БанковскийСчет;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументЗаказ.ЗаполнитьЭтапыГрафикаОплаты();
	
	ДокументЗаказ.Записать(РежимЗаписиДокумента.Проведение);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика,
	|	ЗаказКлиентаТовары.Упаковка,
	|	ЗаказКлиентаТовары.КоличествоУпаковок
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорзинаПокупателя.Партнер,
	|	КорзинаПокупателя.Номенклатура,
	|	КорзинаПокупателя.Характеристика,
	|	КорзинаПокупателя.Упаковка,
	|	КорзинаПокупателя.КоличествоУпаковок,
	|	КорзинаПокупателя.Цена,
	|	КорзинаПокупателя.ДатаПомещения,
	|	КорзинаПокупателя.Валюта
	|ИЗ
	|	РегистрСведений.КорзинаПокупателя КАК КорзинаПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокумента КАК ДанныеДокумента
	|		ПО КорзинаПокупателя.Номенклатура = ДанныеДокумента.Номенклатура
	|			И КорзинаПокупателя.Характеристика = ДанныеДокумента.Характеристика
	|			И КорзинаПокупателя.Упаковка = ДанныеДокумента.Упаковка
	|ГДЕ
	|	КорзинаПокупателя.Партнер = &Партнер
	|	И ДанныеДокумента.КоличествоУпаковок ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("Партнер",ДокументЗаказ.Партнер);
	Запрос.УстановитьПараметр("Заказ",ДокументЗаказ.Ссылка);
	
	НаборЗаписей = РегистрыСведений.КорзинаПокупателя.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Партнер.Установить(СтруктураЗаказа.Партнер,Истина);
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Получает партнера - объекта авторизации внешнего пользователя
//
// Возвращаемое значение:
//  СправочникСсылка.Партнеры - партнер,если объект авторизации партнер, неопределено в обратном случае
//
Функция ПолучитьАвторизовавшегосяПартнера() Экспорт
	
	ВнешнийПользователь = ВнешниеПользователи.ТекущийВнешнийПользователь();
	Если НЕ ЗначениеЗаполнено(ВнешнийПользователь) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ВнешнийПользователь.ОбъектАвторизации) = Тип("СправочникСсылка.Партнеры") Тогда
		Возврат ВнешнийПользователь.ОбъектАвторизации;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Записывает контактную информацию партнера
//
// Параметры
//  Партнер					- СправочникСсылка.Партнеры - партнер, для которого записывается контактная информация
//  КонтактнаяИнформация	- ТаблицаЗначений - содержит новое значение контактной информации партнера.
//
Процедура ЗаписатьКонтактнуюИнформациюПартнера(Партнер,КонтактнаяИнформация) Экспорт

	 ОбъектПартнер = Партнер.ПолучитьОбъект();
	 ОбъектПартнер.КонтактнаяИнформация.Загрузить(КонтактнаяИнформация);
	 ОбъектПартнер.Записать();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
