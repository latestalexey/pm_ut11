////////////////////////////////////////////////////////////////////////////////
// Модуль "Ассортимент", содержит процедуры и функции для
// проверки корректности документов изменения ассортимента и установки квот ассортимента,
// обработки регистрации ассортимента в регистрах,
// обработки введенных пользователем данных,
// а также содержит ряд вспомогательных функций и процедур
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции проверки корректности заполнения документов.

// Функция проверяет, соответствует ли реквизит "ЦенаВключаетНДС"
// у всех видов цен в табличной части "Товары" документа "ИзменениеАссортимента"
// и у вида цен, указанного в объекте планирования этого документа.
// В случае нахождения расхождений выводит информационное сообщение
// Вызывается ПЕРЕД записью соответствующего документа-объекта.
// Параметры: 
// 		ДокументОбъект - ДокументОбъект.ИзменениеАссортимента
// Возвращаемое значение: 
// 		ВсеВерно - Булево - если реквизит "ЦенаВключаетНДС" все виды цен совпадает, возвращается Истина, иначе Ложь
Функция ВидыЦенИзмененияАссортиментаСоответствуютПравилам(ДокументОбъект) Экспорт
	ВсеВерно=Истина;
	Запрос = Новый Запрос;
	ТекстЗапроса = "
	               |ВЫБРАТЬ
	               |	ТаблицаТовары.НомерСтроки,
	               |	ТаблицаТовары.ВидЦены
				   |ПОМЕСТИТЬ ТаблицаТовары
	               |ИЗ
	               |	&ТаблицаТовары КАК ТаблицаТовары
				   |;
	               |ВЫБРАТЬ
	               |	ТаблицаТовары.НомерСтроки,
	               |	ТаблицаТовары.ВидЦены,
	               |	ТаблицаТовары.ВидЦены.Наименование КАК ВидЦенНаименование
	               |ИЗ
	               |	ТаблицаТовары КАК ТаблицаТовары
	               |ГДЕ
	               |	ТаблицаТовары.ВидЦены.ЦенаВключаетНДС <> &ЦенаВключаетНДС
	               |	ИЛИ (НЕ ТаблицаТовары.ВидЦены.ИспользоватьПриПродаже)";
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТовары", ДокументОбъект.Товары.Выгрузить());
	РеквизитыОбъекта = Новый Структура;
	РеквизитыОбъекта.Вставить("ЦенаВключаетНДС", "РозничныйВидЦены.ЦенаВключаетНДС");
	ДанныеВидаЦен = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.ОбъектПланирования, РеквизитыОбъекта);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС", ДанныеВидаЦен.ЦенаВключаетНДС);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВсеВерно = Ложь;
		ТекстСообщения = НСтр("ru = 'В строке %1 выбран некорректный вид цен %2'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,
																				 Выборка.НомерСтроки,
																				 Выборка.ВидЦенНаименование);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			ДокументОбъект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "ВидЦены"),
			"Объект",
			Истина);
	КонецЦикла;
	
	Возврат ВсеВерно;	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции регистрации ассортимента магазинов в регистрах.

// Процедура формирует движения по РС "Квоты ассортимента"
// Параметры: 
// 		ДополнительныеСвойства - Структура
// 		Движения - Коллекция движений
// 		Отказ - Булево
Процедура ОтразитьКвотыАссортимента(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаКвотыАссортимента;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияКвотыАссортимента            = Движения.КвотыАссортимента;
	ДвиженияКвотыАссортимента.Записывать = Истина;
	
	ДвиженияКвотыАссортимента.Загрузить(Таблица);
	
КонецПроцедуры // ОтразитьЦеныНоменклатуры()

// Процедура формирует движения по РС "Ассортимент магазинов"
// Параметры: 
// 		ДополнительныеСвойства - Структура
//   	Движения - Коллекция движений
//   	Отказ - Булево
Процедура ОтразитьАссортимент(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаАссортимент;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияАссортимент = Движения.Ассортимент;
	ДвиженияАссортимент.Записывать = Истина;
	//
	ДвиженияАссортимент.Загрузить(Таблица);
	
КонецПроцедуры // ОтразитьЦеныНоменклатуры()

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции.

// Процедура проверяет стадию документа "ИзменениеАссортимента"
// Вызывается при обработке заполнения документа "Установка цен" на основании "ИзменениеАссортимента"
// если документ переводит товары в стадию "ЗапрещеныЗакупкиИПродажи"
// то принудительно вызывается исключение и формируется соответствующий текст ошибки
// 
// Параметры: 
// 		ДокументОснование - ДокументСсылка.ИзменениеАссортимента
Процедура ПроверитьНеобходимостьУстановкиЦенНаОсновании(ДокументОснование) Экспорт
	Если ДокументОснование.Стадия=Перечисления.СтадииАссортимента.ЗапрещеныЗакупкиИПродажи Тогда
			
			ТекстОшибки = НСтр("ru='Документ %1 запрещает и закукпи, и продажи.%2Установка цен на основании такого документа невозможна.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументОснование, Символы.ПС);
			
			ВызватьИсключение ТекстОшибки;
			
	КонецЕсли;
КонецПроцедуры

// Функция получает таблицы товаров и видов цен, содержащихся в табличной части документа "ИзменениеАссортимента"
// вызывается при вводе на основании изменения ассортимента документа установки цен
// Параметры: 
// 		ДокументОснование - ДокументСсылка.ИзменениеАссортимента
// Возвращаемое значение: 
// 		РезультатПакета - Массив - результат выполнения пакета запросов
Функция РезультатПакетаВидыЦенИТоварыДляУстановкиПоАссортименту(ДокументОснование) Экспорт
	
	Запрос=Новый Запрос("
						|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	ИзменениеАссортиментаТовары.Номенклатура КАК Номенклатура,
	                    |	ИзменениеАссортиментаТовары.ВидЦены КАК ВидЦены
	                    |ИЗ
	                    |	Документ.ИзменениеАссортимента.Товары КАК ИзменениеАссортиментаТовары
	                    |ГДЕ
	                    |	ИзменениеАссортиментаТовары.Ссылка = &ДокументОснование
	                    |;
						|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                    |	ИзменениеАссортиментаТовары.ВидЦены КАК ВидЦены
	                    |ИЗ
	                    |	Документ.ИзменениеАссортимента.Товары КАК ИзменениеАссортиментаТовары
	                    |ГДЕ
	                    |	ИзменениеАссортиментаТовары.Ссылка = &ДокументОснование
						|");
	Запрос.УстановитьПараметр("ДокументОснование",ДокументОснование);
	ОбъектПланирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "ОбъектПланирования");
	Запрос.УстановитьПараметр("ФорматМагазина", ОбъектПланирования);
	РезультатПакета=Запрос.ВыполнитьПакет();
	Возврат РезультатПакета;
КонецФункции

// Процедура проверяет вхождение в ассортимент магазина на указанную дату товаров в подборе, не входящих в основание
// Параметры: 
//		Объект - данные формы структура - 
// 		Имя реквизита склад - строка, указывает на реквизит склад, ассортимент которого проверяется
//		ТаблицаТоваров - таблица товаров, добавленных в табличную часть документа, для которых нужно выполнить проверку
//
Процедура ПроверитьАссортиментТаблицыПодобранныхТоваров(Объект, ИмяРеквизитаСклад, ТаблицаТоваров = Неопределено) Экспорт
	Магазин = Объект[ИмяРеквизитаСклад];
	КонтролироватьАссортимент = ПолучитьФункциональнуюОпцию("КонтролироватьАссортимент", Новый Структура("Склад", Магазин));
	Если КонтролироватьАссортимент <> Истина Тогда
		КонтролироватьАссортимент = Ложь;
	КонецЕсли;
	
	Если КонтролироватьАссортимент Тогда
		Запрос = Новый Запрос;
		Если ТипЗнч(ТаблицаТоваров) = Тип("ТаблицаЗначений") Тогда
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|
			|ВЫБРАТЬ
			|	ТоварыДокумента.НомерСтроки КАК НомерСтроки,
			|	ТоварыДокумента.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ ТоварыДокумента
			|ИЗ
			|	&ТоварыДокумента КАК ТоварыДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыДокумента.НомерСтроки КАК НомерСтроки,
			|	ТоварыДокумента.Номенклатура КАК Номенклатура,
			|	ТоварыДокумента.Номенклатура.Наименование КАК НоменклатураНаименование
			|ИЗ
			|	ТоварыДокумента КАК ТоварыДокумента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
			|		ПО ТоварыДокумента.Номенклатура = Товары.Номенклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент КАК Ассортимент
			|		ПО ТоварыДокумента.Номенклатура = Ассортимент.Номенклатура
			|			И (Ассортимент.ОбъектПланирования = &ОбъектПланирования)
			|			И (Ассортимент.РазрешеныЗакупки)
			|			И (Ассортимент.Регистратор В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					Ассорти.Регистратор
			|				ИЗ
			|					РегистрСведений.Ассортимент КАК Ассорти
			|				ГДЕ
			|					Ассорти.Номенклатура = ТоварыДокумента.Номенклатура
			|					И Ассорти.ОбъектПланирования = &ОбъектПланирования
			|					И Ассорти.Период <= КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
			|				УПОРЯДОЧИТЬ ПО
			|					Ассорти.Период УБЫВ,
			|					Ассорти.ДатаРегистратора УБЫВ,
			|					Ассорти.Регистратор УБЫВ))
			|ГДЕ
			|	(НЕ ЕСТЬNULL(Ассортимент.РазрешеныЗакупки, ЛОЖЬ))
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			Запрос.УстановитьПараметр("Товары", ТаблицаТоваров);
		Иначе
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ТоварыДокумента.НомерСтроки КАК НомерСтроки,
			|	ТоварыДокумента.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ ТоварыДокумента
			|ИЗ
			|	&ТоварыДокумента КАК ТоварыДокумента
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыДокумента.НомерСтроки КАК НомерСтроки,
			|	ТоварыДокумента.Номенклатура КАК Номенклатура,
			|	ТоварыДокумента.Номенклатура.Наименование КАК НоменклатураНаименование
			|ИЗ
			|	ТоварыДокумента КАК ТоварыДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент КАК Ассортимент
			|		ПО ТоварыДокумента.Номенклатура = Ассортимент.Номенклатура
			|			И (Ассортимент.ОбъектПланирования = &ОбъектПланирования)
			|			И (Ассортимент.РазрешеныЗакупки)
			|			И (Ассортимент.Регистратор В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					Ассорти.Регистратор
			|				ИЗ
			|					РегистрСведений.Ассортимент КАК Ассорти
			|				ГДЕ
			|					Ассорти.Номенклатура = ТоварыДокумента.Номенклатура
			|					И Ассорти.ОбъектПланирования = &ОбъектПланирования
			|					И Ассорти.Период <= КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
			|				УПОРЯДОЧИТЬ ПО
			|					Ассорти.Период УБЫВ,
			|					Ассорти.ДатаРегистратора УБЫВ,
			|					Ассорти.Регистратор УБЫВ))
			|ГДЕ
			|	(НЕ ЕСТЬNULL(Ассортимент.РазрешеныЗакупки, ЛОЖЬ))
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
			
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ТоварыДокумента", Объект.Товары.Выгрузить());
		
		Дата = ?(ЗначениеЗаполнено(Объект.ЖелаемаяДатаПоступления), Объект.ЖелаемаяДатаПоступления, Объект.Дата);
		Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДата()));
		ФорматМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Магазин, "ФорматМагазина");
		Запрос.УстановитьПараметр("ОбъектПланирования", ФорматМагазина);
		
		Результат=Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = НСтр("ru = 'Товар %1 не включен в ассортимент или запрещен к закупке.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Выборка.НоменклатураНаименование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Номенклатура"),
				"Объект",
				Ложь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Функция получает значение цены продажи
// в соответствии с видом цен, указанным в регистре "Ассортимент",
// для номенклатуры и склада на указанную дату
Функция ПолучитьЦенуПоАссортименту(ПараметрыОтбора) Экспорт
	
	Запрос = Новый Запрос;
	ФорматМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОтбора.Склад, "ФорматМагазина");
	СтруктураАссортимента = СтруктураСостоянияАссортиментаТовараВФормате(ПараметрыОтбора.Номенклатура, ФорматМагазина, ПараметрыОтбора.Дата);
	ВидЦены = СтруктураАссортимента.ВидЦены;
	Запрос.УстановитьПараметр("ВидЦены", ВидЦены);
	
	Для Каждого Параметр Из ПараметрыОтбора Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	Запрос.Текст =
	"
	|ВЫБРАТЬ
	|	ЕстьNULL(ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиНоменклатуры).Коэффициент, 1)
	|	* ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Цена,0)/ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент,1)
	|	* ВЫБОР
	|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
	|				ВидЦены = ВЫРАЗИТЬ(&ВидЦены КАК Справочник.ВидыЦен)
	|				И Номенклатура = ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)
	|				И Характеристика = ВЫРАЗИТЬ(&Характеристика КАК Справочник.ХарактеристикиНоменклатуры)
	|) КАК ЦеныНоменклатурыСрезПоследних
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыЦены
	|ПО 
	|	ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
	|	По Истина
	|";
	Цена = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Цена = Выборка.Цена;
	КонецЕсли;
	Возврат Цена;
	
КонецФункции

// Функция получает актуальные значения ресурсов регистра сведений "Ассортимент" на указанную дату 
// для товара и формата магазина
// Параметры: 
// 		Номенклатура - СправчоникСсылка.Номенклатура
// 		ОбъектПроверки - СправчоникСсылка.ФорматыМагазинов ИЛИ СправочникСсылка.Магазины
// 		НаДату - Дата (дата и время)
// Возвращаемое значение: 
// 		СтруктураСостоянияАссортимента - Структура - аналогична выборке всех ресурсов из регистра
Функция СтруктураСостоянияАссортиментаТовараВФормате(Номенклатура, ОбъектПроверки, НаДату) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	Ассортимент.РольАссортимента,
	                    |	Ассортимент.РазрешеныЗакупки,
	                    |	Ассортимент.РазрешеныПродажи,
	                    |	Ассортимент.ВидЦены
	                    |ИЗ
	                    |	Справочник.Номенклатура КАК СправочникНоменклатура
	                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент КАК Ассортимент
	                    |			ПО СправочникНоменклатура.Ссылка = Ассортимент.Номенклатура
	                    |			И Ассортимент.ОбъектПланирования = &ОбъектПланирования
	                    |			И (Ассортимент.Регистратор В
	                    |				(ВЫБРАТЬ ПЕРВЫЕ 1
	                    |					Ассорти.Регистратор
	                    |				ИЗ
	                    |					РегистрСведений.Ассортимент КАК Ассорти
	                    |				ГДЕ
	                    |					Ассорти.Номенклатура = Ассортимент.Номенклатура
	                    |					И Ассорти.ОбъектПланирования = Ассортимент.ОбъектПланирования
	                    |					И Ассорти.Период <= КОНЕЦПЕРИОДА(&НаДату, ДЕНЬ)
	                    |				УПОРЯДОЧИТЬ ПО
	                    |					Ассорти.Период УБЫВ,
	                    |					Ассорти.ДатаРегистратора УБЫВ,
	                    |					Ассорти.Регистратор УБЫВ))
	                    |ГДЕ
	                    |	СправочникНоменклатура.Ссылка = &Номенклатура
	                    |");
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Если ТипЗнч(ОбъектПроверки) = Тип("СправочникСсылка.Склады") Тогда
		ФорматМагазина = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектПроверки, "ФорматМагазина");
		Запрос.УстановитьПараметр("ОбъектПланирования", ФорматМагазина);
	Иначе
		Запрос.УстановитьПараметр("ОбъектПланирования", ОбъектПроверки);
	КонецЕсли;
	Запрос.УстановитьПараметр("НаДату",НаДату);
	РезультатПакета=Запрос.ВыполнитьПакет();
	ИндексПоследнего=РезультатПакета.Количество()-1;
	РезультатЗапроса=РезультатПакета[ИндексПоследнего];
	
	СтруктураСостоянияАссортимента=Новый Структура;
	СтруктураСостоянияАссортимента.Вставить("РольАссортимента",Перечисления.РолиАссортимента.ПустаяСсылка());
	СтруктураСостоянияАссортимента.Вставить("РазрешеныЗакупки",Ложь);
	СтруктураСостоянияАссортимента.Вставить("РазрешеныПродажи",Ложь);
	СтруктураСостоянияАссортимента.Вставить("ВидЦены",Справочники.ВидыЦен.ПустаяСсылка());
	
	Выборка=РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураСостоянияАссортимента.РольАссортимента	 = Выборка.РольАссортимента;
		СтруктураСостоянияАссортимента.РазрешеныЗакупки	 = Выборка.РазрешеныЗакупки;
		СтруктураСостоянияАссортимента.РазрешеныПродажи	 = Выборка.РазрешеныПродажи;
		СтруктураСостоянияАссортимента.ВидЦены			 = Выборка.ВидЦены;
	КонецЕсли;
	Возврат СтруктураСостоянияАссортимента;
КонецФункции

// Функция получает актуальные значения ресурсов регистра сведений "Квоты ассортимента" на указанную дату 
// для категории, марки и формата магазина
// Параметры: 
// 		ФорматМагазина - СправчоникСсылка.ФорматыМагазинов
// 		ТоварнаяКатегория - СправчоникСсылка.ТоварныеКатегории
// 		Марка - СправчоникСсылка.Марки
// 		НаДату - Дата (дата и время)
// Возвращаемое значение: 
// 		СтруктураКвоты - Структура - аналогична выборке всех ресурсов из регистра
Функция СтруктураКвотыПоКатегории(ФорматМагазина, ТоварнаяКатегория, Марка, НаДату) Экспорт
	СтруктураКвоты=Новый Структура;
	Запрос=Новый Запрос("ВЫБРАТЬ
	|	Квоты.Квота КАК Квота,
	|	Квоты.ПроцентОтклонения КАК ПроцентОтклонения
	|ИЗ
	|	РегистрСведений.КвотыАссортимента.СрезПоследних(
	|			&НаДату,
	|			ОбъектПланирования = &ОбъектПланирования
	|				И ТоварнаяКатегория = &ТоварнаяКатегория
	|				И Марка = &Марка) КАК Квоты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФорматыМагазинов КАК Форматы
	|		ПО Квоты.ОбъектПланирования = Форматы.Ссылка
	|			И (Квоты.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(К.Период)
	|				ИЗ
	|					РегистрСведений.КвотыАссортимента КАК К
	|				ГДЕ
	|					К.Период <= &НаДату
	|					И К.ОбъектПланирования = &ОбъектПланирования
	|					И К.ТоварнаяКатегория = &ТоварнаяКатегория
	|					И К.Марка = &Марка))
	|");
	Запрос.УстановитьПараметр("ТоварнаяКатегория",ТоварнаяКатегория);
	Запрос.УстановитьПараметр("ОбъектПланирования",ФорматМагазина);
	Запрос.УстановитьПараметр("Марка",Марка);
	Запрос.УстановитьПараметр("НаДату",НаДату);
	РезультатЗапроса=Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СтруктураКвоты.Вставить("Квота", 0);
		СтруктураКвоты.Вставить("ПроцентОтклонения", 0);
	Иначе
		Выборка=РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		СтруктураКвоты.Вставить("Квота", Выборка.Квота);
		СтруктураКвоты.Вставить("ПроцентОтклонения", Выборка.ПроцентОтклонения);
	КонецЕсли;
	Возврат СтруктураКвоты;
КонецФункции

// Функция проверяет соответствие владельца товарной категории и указанного вида номенклатуры
// При несоответствии очищает значение
// Параметры: 
// 		Объект - ДанныеФормыСтруктура
//
Функция ПроверитьСоответствиеКатегорииВидуНоменклатуры(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ТоварнаяКатегория)
		И ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		ВладелецКатегории = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.ТоварнаяКатегория, "Владелец");
		Если ВладелецКатегории <> Объект.ВидНоменклатуры Тогда
			ТекстСообщения = НСтр("ru = 'Товарная категория не соответствует виду номенклатуры.'");
			Если Объект.Ссылка.Пустая() Тогда
				КлючДанных = Неопределено;
			Иначе
				КлючДанных = Объект.Ссылка;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения,
				КлючДанных,
				"ТоварнаяКатегория",
				"Объект",
				Истина);
			Объект.ТоварнаяКатегория = Справочники.ТоварныеКатегории.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
