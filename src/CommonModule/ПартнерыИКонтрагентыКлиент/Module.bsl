////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Удаляет все доступные пользователю в списке партнеров и позиционируется на элементе справочника
//
// Параметры
//  Форма          -  УправляемаяФорма - форма, для которой выполняются действия
//  ПараметрВыбора - Структура - содержит данные выбора.
//  ПустыеСсылки   - Структура - содержит кэшированные значения, получаемые на сервере и необходимые на клиенте.
//
Процедура ОбработатьВыборПартнераЧерезПомощникВводаНового(Форма,ПараметрВыбора) Экспорт
	
	МассивНедоступныхОтборовУдалить = Новый Массив;
	Для каждого ЭлементОтбора Из Форма.Список.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Если  ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сегмент") Тогда
				МассивНедоступныхОтборовУдалить.Добавить("Сегмент");
				Форма.Сегмент = ПредопределенноеЗначение("Справочник.СегментыПартнеров.ПустаяСсылка");
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Поиск") Тогда
				МассивНедоступныхОтборовУдалить.Добавить("Поиск");
				Форма.СтрокаПоиска = "";
				Форма.РасширенныйПоиск = Ложь;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОсновнойМенеджер") И ЭлементОтбора.ПравоеЗначение <> ПараметрВыбора.ОсновнойМенеджер Тогда
				МассивНедоступныхОтборовУдалить.Добавить("ОсновнойМенеджер");
				Форма.ТолькоМои = Ложь;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БизнесРегион") И ЭлементОтбора.ПравоеЗначение <> ПараметрВыбора.ОсновнойМенеджер Тогда
				МассивНедоступныхОтборовУдалить.Добавить("БизнесРегион");
				Форма.БизнесРегион = ПредопределенноеЗначение("Справочник.БизнесРегионы.ПустаяСсылка");
			КонецЕсли;
		Иначе
			ЭлементОтбора.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлементМассива Из МассивНедоступныхОтборовУдалить Цикл
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Форма.Список.Отбор, ЭлементМассива);
	КонецЦикла;
	
	Форма.Элементы.Список.ТекущаяСтрока = ПараметрВыбора.Партнер;
	
КонецПроцедуры

// Процедура заполняет КПП на базе ИНН
//
// Параметры
//  ИНН  - Строка - ИНН на основании которого будет сгенерирован КПП.
//  КПП  - Строка - КПП, текущий КПП контрагента.
//  БезусловноеЗаполнениеКПП  - Булево - если Истина, то не будет запрашиваться подтверждение пользователя при смене КПП.
//
Процедура ЗаполнитьКППпоИНН(Знач ИНН, КПП, БезусловноеЗаполнениеКПП = Истина) Экспорт
	
	// Если КПП формируется стандартным образом по ИНН, то для КПП берутся 
	// первые 4 цифры ИНН + 01001, например:
	// ИНН 7712563009
	// КПП 771201001
		
	// если не указано ИНН или заполнено КПП то прерываем выполнение операции
	Если (СтрДлина(ИНН) < 4) Тогда
		Возврат;
	КонецЕсли;
	
	ПревыеСимволыИНН = Лев(ИНН, 4);
	НовоеЗначениеКПП = ПревыеСимволыИНН + "01001";
	
	// если новое значение КПП и старое значение КПП совпадают, то прерываем выполнение операции
	Если (НовоеЗначениеКПП = КПП) Тогда
		Возврат;
	КонецЕсли;
	
	// если безусловно нужно поменять - меняем
	Если БезусловноеЗаполнениеКПП ИЛИ НЕ ЗначениеЗаполнено(КПП) Тогда
		КПП = НовоеЗначениеКПП;
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Изменить КПП  на ""%1""?'"), НовоеЗначениеКПП);
	ОтветНужноМенятьКПП = (Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да);
	Если ОтветНужноМенятьКПП Тогда
		КПП = НовоеЗначениеКПП;
	КонецЕсли;
	
КонецПроцедуры

Процедура СокрЮрНаименованиеПриИзменении(Наименование, НаименованиеПолное) Экспорт
	
	Если ПустаяСтрока(НаименованиеПолное) Тогда
		
		Наименование = "";
		Возврат;
		
	КонецЕсли;
	
	НачальнаяПозицияКавычек = 0;
	КонечнаяПозицияКавычек  = 0;
	
	МассивВидовКавычек = Новый Массив;
	МассивВидовКавычек.Добавить("""");
	МассивВидовКавычек.Добавить("'");
	МассивВидовКавычек.Добавить("«");

	Для Каждого ВидКавычки Из МассивВидовКавычек Цикл
		
		ПозицияВидаКавычки = Найти(НаименованиеПолное, ВидКавычки);
		Если ПозицияВидаКавычки > 0 И (НачальнаяПозицияКавычек = 0 ИЛИ ПозицияВидаКавычки < НачальнаяПозицияКавычек) Тогда
			НачальнаяПозицияКавычек = ПозицияВидаКавычки;
		КонецЕсли;
		
	КонецЦикла;
	
	МассивВидовКавычек[2] ="»";
	Для Каждого ВидКавычки Из МассивВидовКавычек Цикл
		
		ПозицияВидаКавычки = СтроковыеФункцииКлиентСервер.НайтиСимволСКонца(НаименованиеПолное, ВидКавычки);
		Если ПозицияВидаКавычки > 0 И (КонечнаяПозицияКавычек = 0 ИЛИ ПозицияВидаКавычки > КонечнаяПозицияКавычек) Тогда
			КонечнаяПозицияКавычек = ПозицияВидаКавычки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НачальнаяПозицияКавычек = 0 Тогда
		Наименование = НаименованиеПолное;
	ИначеЕсли КонечнаяПозицияКавычек = 0 Тогда
		Наименование = Прав(НаименованиеПолное, СтрДлина(НаименованиеПолное) - НачальнаяПозицияКавычек);
	Иначе
		Наименование = Сред(НаименованиеПолное, НачальнаяПозицияКавычек + 1, КонечнаяПозицияКавычек - НачальнаяПозицияКавычек-1);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции форм списка и выбора справочника партнеры.

Процедура ФильтрыПанельНавигацииПеретаскивание(КоличествоЗаписанных, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		ПартнерыИКонтрагентыВызовСервера.ОбновитьЗначениеРеквизитаУПеретаскиваемыхПартнеров(Строка, ПараметрыПеретаскивания.Значение, КоличествоЗаписанных);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
		
		МассивПартнеров = Новый Массив;
		МассивПартнеров.Добавить(ПараметрыПеретаскивания.Значение);
		ПартнерыИКонтрагентыВызовСервера.ОбновитьЗначениеРеквизитаУПеретаскиваемыхПартнеров(Строка, МассивПартнеров, КоличествоЗаписанных);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФильтрыПанельНавигацииПроверкаПеретаскивания(Форма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле) Экспорт
	
	Если (Строка = Неопределено) ИЛИ (ПараметрыПеретаскивания.Значение = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Для Каждого ЭлементМассива Из ПараметрыПеретаскивания.Значение Цикл
			

			Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Партнеры") Тогда
				
				Возврат;
				
			КонецЕсли;
			
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			
		КонецЦикла;
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
		
		Возврат;
		
	Иначе
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ФильтрыПанельНавигацииТипФильтраПриИзменении(Форма, Элемент, ТребуетсяЗаполнениеСтраницыСвойств) Экспорт
	
	Если ТипЗнч(Форма.ТипФильтра) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения")
		И Форма.ТекущееСвойствоПанелиНавигации = Форма.ТипФильтра
		И Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаСвойства Тогда
		Возврат;
	ИначеЕсли Форма.ТипФильтра = "Категории" И Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаКатегории Тогда
		Возврат;
	ИначеЕсли Форма.ТипФильтра = "БизнесРегионы" И Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаБизнесРегионы Тогда
		Возврат;
	ИначеЕсли Форма.ТипФильтра = "ГруппыДоступа" И Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаГруппыДоступа Тогда
		Возврат;
	ИначеЕсли Форма.ТипФильтра = "Менеджер" И Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаМенеджеры Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиПанелиНавигации(Форма);
	
	Если ТипЗнч(Форма.ТипФильтра) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения")
		ИЛИ Форма.ТипФильтра  = "Категории" Тогда
		ТребуетсяЗаполнениеСтраницыСвойств = Истина;
	ИначеЕсли Форма.ТипФильтра  = "БизнесРегионы" Тогда
		Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаБизнесРегионы; 
	ИначеЕсли Форма.ТипФильтра = "ГруппыДоступа" Тогда
		Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаГруппыДоступа;
	ИначеЕсли Форма.ТипФильтра = "Менеджер" Тогда
		Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаМенеджеры;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаСпискаВыбораПриЗакрытии(Форма) Экспорт
	
	 СохранитьНастройкиПанелиНавигации(Форма);
	
КонецПроцедуры

Процедура ПанельНавигацииУправлениеДоступностью(Форма) Экспорт

	Форма.Элементы.ТипФильтра.Доступность             = Форма.ИспользоватьФильтр;
	Форма.Элементы.БизнесРегионы.Доступность          = Форма.ИспользоватьФильтр;
	Форма.Элементы.ГруппыДоступаПартнеров.Доступность = Форма.ИспользоватьФильтр;
	Форма.Элементы.Менеджеры.Доступность              = Форма.ИспользоватьФильтр;
	Форма.Элементы.ТолькоЗначимые.Доступность         = Форма.ИспользоватьФильтр;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуОснования(Форма) Экспорт
	
	Основание = Форма.Основания.НайтиСтроки(Новый Структура("Партнер", СсылкаНаПартнераСтрокиСписка(Форма)));
	Если Основание.Количество() = 0 Тогда
		Форма.ОснованиеВыбора = "";
	Иначе
		Форма.ОснованиеВыбора = Основание[0].Основание;
	КонецЕсли;
	
КонецПроцедуры

Функция ПозиционированиеКорректно(ИмяСписка, Форма) Экспорт

	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
		
	Если ТипЗнч(Форма.Элементы[ИмяСписка].ТекущаяСтрока) <> ТипГруппировка И ЗначениеЗаполнено(Форма.Элементы[ИмяСписка].ТекущаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Процедура КонтрагентыПартнераНажатие(Форма) Экспорт
	
	Если ПозиционированиеКорректно("Список",Форма) Тогда
		
		ПараметрыФормы = Новый Структура("ОтборКонтрагентов", Форма.Элементы.Список.ТекущаяСтрока);
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФорму(
		"Справочник.Контрагенты.Форма.ФормаСпискаПараметрическая",
		ПараметрыФормы,
		Форма
	);
	
КонецПроцедуры

Процедура КонтактныеЛицаПартнераНажатие(Форма) Экспорт
	
	Если ПозиционированиеКорректно("Список", Форма) Тогда
		
		ПараметрыФормы = Новый Структура("Отбор",Новый Структура("Владелец", Форма.Элементы.Список.ТекущаяСтрока));
		
	Иначе
		
		Возврат;
		
	КонецЕсли;

	ОткрытьФорму(
		"Справочник.КонтактныеЛицаПартнеров.ФормаСписка",
		ПараметрыФормы,
		Форма
	);
	
КонецПроцедуры

Процедура ВостановитьОтображениеСпискаПослеПолнотекстовогоПоиска(Форма) Экспорт
	
	Если Форма.РасширенныйПоиск И Строка(Форма.Элементы.Список.Отображение) <> Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска Тогда
		Если Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска = "Иерархический список" Тогда
			Форма.Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		ИначеЕсли Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска = "Дерево" Тогда
			Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПартнерыФормаСпискаВыбораОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "ВыборПартнераНайдено" И Параметр.Свойство("Партнер") Тогда
		
		ОбработатьВыборПартнераЧерезПомощникВводаНового(Форма, Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПартнерыФормаСпискаВыбораТолькоМоиПриИзменении(Форма, Элемент) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Форма.Список.Отбор,
		"ОсновнойМенеджер",
		Форма.ТекущийПользователь,
		ВидСравненияКомпоновкиДанных.Равно,,
		Форма.ТолькоМои
	);
	
КонецПроцедуры

Процедура ПартнерыФормаСпискаВыбораОснованиеВыбораНажатие(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Основание = Форма.Основания.НайтиСтроки(Новый Структура("Партнер", СсылкаНаПартнераСтрокиСписка(Форма)));
	Если Основание.Количество() > 0 Тогда
		ОткрытьЗначение(Основание[0].Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПартнерыФормаСпискаВыбораСегментПриИзменении(Форма, Элемент) Экспорт
	
	Если ЗначениеЗаполнено(Форма.Сегмент) Тогда
		
		Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Форма.Список.Отбор,
			"Сегмент",
			СегментыВызовСервера.СписокЗначений(Форма.Сегмент),
			ВидСравненияКомпоновкиДанных.ВСписке,, Истина
		);
		
		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Форма.Элементы.Сегмент.СписокВыбора, Форма.Сегмент, 7);
		Форма.ИсторияВыбораСегментов.ЗагрузитьЗначения(Форма.Элементы.Сегмент.СписокВыбора.ВыгрузитьЗначения());
		
	Иначе
		
		Форма.Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Список.Отбор, "Сегмент", Неопределено, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПартнерыФормаСпискаВыбораСписокПередНачаломДобавления(Форма, Элемент, Отказ, Копирование, Родитель, Группа) Экспорт
	
	Если Копирование Тогда
		Если НЕ Форма.УпрощенныйВводДоступен Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Копирование партнеров запрещено.'"));
		КонецЕсли;
	Иначе
		Отказ = Истина;
		ОткрытьФорму("Справочник.Партнеры.Форма.ПомощникНового",Новый Структура("СписокОтборПоТипуПартнера", Форма.СписокОтборПоТипуПартнера), Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПартнерыФормаСпискаВыбораСоздатьНового(Форма, Команда) Экспорт
	
	СтруктураПараметры = Новый Структура;
	СтруктураЗначенияЗаполнения = Новый Структура;
	
	Для каждого ЭлементОтбора Из Форма.Список.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно И ЭлементОтбора.Использование Тогда
			СтруктураЗначенияЗаполнения.Вставить(Строка(ЭлементОтбора.ЛевоеЗначение), ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.Элементы.Список.Отображение <> ОтображениеТаблицы.Список Тогда
		СтруктураЗначенияЗаполнения.Вставить("Родитель", Форма.Элементы.Список.ТекущийРодитель);
	КонецЕсли;
	
	СтруктураПараметры.Вставить("ЗначенияЗаполнения", СтруктураЗначенияЗаполнения);
	СтруктураПараметры.Вставить("СписокОтборПоТипуПартнера", Форма.СписокОтборПоТипуПартнера);
	
	Если НЕ Форма.ИспользоватьПартнеровКакКонтрагентов Тогда
		ОткрытьФорму("Справочник.Партнеры.Форма.ФормаЭлемента", СтруктураПараметры,Форма);
	Иначе
		ОткрытьФорму("Справочник.Партнеры.Форма.ФормаЭлементаРеквизитыКонтрагента", СтруктураПараметры,Форма);
	КонецЕсли;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции форм элемента справочника партнеры.

Процедура ПартнерФормаЭлементаПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	ВзаимодействияКлиент.КонтактПослеЗаписи(Форма, Форма.Объект, ПараметрыЗаписи,"Партнеры");
	
КонецПроцедуры

Процедура ПартнерФормаЭлементаКаналПервичногоИнтересаПриИзменении(Форма, Элемент) Экспорт
	
	Форма.ИсточникПервичногоИнтереса = Неопределено;
	Форма.Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Не ЗначениеЗаполнено(Форма.КаналПервичногоИнтереса);
	
КонецПроцедуры

Процедура ПартнерФормаЭлементаНаименованиеПриИзменении(Форма, Элемент) Экспорт
	
	Если ПустаяСтрока(Форма.Объект.НаименованиеПолное) Тогда
		Форма.Объект.НаименованиеПолное = Форма.Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПартнерФормаЭлементаФлагПризнакПартнераПриИзменении(Форма, Элемент) Экспорт
	
	Форма.Элементы.ОбслуживаетсяТорговымиПредставителями.Доступность = Форма.Объект.Клиент;
	Если НЕ Форма.Объект.Клиент Тогда
		Форма.Объект.ОбслуживаетсяТорговымиПредставителями = Ложь;
	КонецЕсли;
	
	Форма.Элементы.Перевозчик.Доступность = Форма.Объект.Поставщик;
	Если НЕ Форма.Объект.Поставщик Тогда
		Форма.Объект.Перевозчик = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПартнерФормаЭлементаКомментарииНачалоВыбора(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Форма.Элемент.ТекстРедактирования, Форма.Объект.Комментарий, Форма.Модифицированность);
	
КонецПроцедуры

Процедура ПартнерФормаЭлементаБизнесРегионПриИзменении(Форма, Элемент) Экспорт
	
	Если Форма.Объект.БизнесРегион <> Форма.ТекущийБизнесРегион Тогда
		
		Если ЗначениеЗаполнено(Форма.Объект.БизнесРегион) Тогда
			ОсновнойМенеджерБизнесРегиона = ПартнерыИКонтрагентыВызовСервера.ОсновнойМенеджерБизнесРегиона(Форма.Объект.БизнесРегион);
			Если ЗначениеЗаполнено(ОсновнойМенеджерБизнесРегиона) И ОсновнойМенеджерБизнесРегиона <> Форма.Объект.ОсновнойМенеджер Тогда
				
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для выбранного бизнес-региона основным менеджером является %1. Установить его основным менеджером партнера?'"),ОсновнойМенеджерБизнесРегиона);
				Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
				Если Результат = КодВозвратаДиалога.Да Тогда
					
					Форма.Объект.ОсновнойМенеджер = ОсновнойМенеджерБизнесРегиона;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Форма.ТекущийБизнесРегион = Форма.Объект.БизнесРегион;
		
	КонецЕсли;
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции форм списка и выбора справочника партнеры.

Процедура СохранитьНастройкиПанелиНавигации(Форма)

	Если Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаКатегории Тогда
		ВидПанели = "Категории";
		ТекущаяСтрока = Форма.Элементы.Категории.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = Форма.Категории.НайтиПоИдентификатору(ТекущаяСтрока);
			Если ТекущиеДанные <> Неопределено Тогда
				 ТекущееЗначение = ТекущиеДанные.Значение;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаБизнесРегионы Тогда
		ВидПанели = "БизнесРегионы";
		ТекущееЗначение = Форма.Элементы.БизнесРегионы.ТекущаяСтрока;
	ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаГруппыДоступа Тогда
		ВидПанели = "ГруппыДоступа";
		ТекущееЗначение = Форма.Элементы.ГруппыДоступаПартнеров.ТекущаяСтрока;
	ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаМенеджеры Тогда
		ВидПанели = "Менеджер";
		ТекущееЗначение = Форма.Элементы.Менеджеры.ТекущаяСтрока;
	ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаСвойства Тогда
		ВидПанели = Форма.ТекущееСвойствоПанелиНавигации;
		ТекущаяСтрока = Форма.Элементы.Свойства.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущиеДанные = Форма.Свойства.НайтиПоИдентификатору(ТекущаяСтрока);
			Если ТекущиеДанные <> Неопределено Тогда
				 ТекущееЗначение = ТекущиеДанные.Значение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Форма.НастройкиПанелейНавигации.НайтиСтроки(Новый Структура("ВидПанели",ВидПанели));
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаНастроек = Форма.НастройкиПанелейНавигации.Добавить();
		СтрокаНастроек.ВидПанели = ВидПанели;
	Иначе
		СтрокаНастроек = НайденныеСтроки[0];
	КонецЕсли;
	
	СтрокаНастроек.ТекущееЗначение = ТекущееЗначение;

КонецПроцедуры

Функция СсылкаНаПартнераСтрокиСписка(Форма)
	
	Возврат ?(Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаВыбораИспользуютсяТолькоПартнеры", Форма.Элементы.Список.ТекущиеДанные.Партнер, Форма.Элементы.Список.ТекущаяСтрока);
	
КонецФункции
