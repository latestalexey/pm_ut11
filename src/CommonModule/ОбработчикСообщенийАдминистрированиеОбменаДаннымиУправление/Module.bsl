////////////////////////////////////////////////////////////////////////////////
// Обработка сообщений администрирования обмена данными
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выполняет обработку тела сообщения из канала в соответствии с алгоритмом текущего канала сообщений
//
// Параметры:
//  <КаналСообщений> (обязательный). Тип:Строка. Идентификатор канала сообщений, из которого получено сообщение.
//  <ТелоСообщения> (обязательный). Тип: Произвольный. Тело сообщения, полученное из канала, которое подлежит обработке.
//  <Отправитель> (обязательный). Тип: ПланОбменаСсылка.ОбменСообщениями. Конечная точка, которая является отправителем сообщения.
//
Процедура ОбработатьСообщение(Знач КаналСообщений, Знач ТелоСообщения, Знач Отправитель) Экспорт
	
	ТипСообщения = СообщенияВМоделиСервиса.ТипСообщенияПоИмениКанала(КаналСообщений);
	
	Сообщение = СообщенияВМоделиСервиса.ПрочитатьСообщениеИзНетипизированногоТела(ТелоСообщения);
	
	Словарь = ОбменДаннымиВМоделиСервисаПовтИсп;
	
	СообщенияВМоделиСервиса.ЗаписатьСобытиеНачалоОбработки(Сообщение);
	
	Если ТипСообщения = Словарь.СообщениеПодключитьКорреспондента() Тогда
		
		ПодключитьКорреспондента(Сообщение, Отправитель);
		
	ИначеЕсли ТипСообщения = Словарь.СообщениеУстановитьНастройкиТранспорта() Тогда
		
		УстановитьНастройкиТранспорта(Сообщение, Отправитель);
		
	ИначеЕсли ТипСообщения = Словарь.СообщениеУдалитьНастройкуСинхронизации() Тогда
		
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Сообщение.Body.Zone);
		Попытка
			
			УдалитьНастройкуСинхронизации(Сообщение, Отправитель);
			
			ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
		Исключение
			ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ТипСообщения = Словарь.СообщениеВыполнитьСинхронизацию() Тогда
		
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Сообщение.Body.Zone);
		Попытка
			
			ВыполнитьСинхронизацию(Сообщение, Отправитель);
			
			ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
		Исключение
			ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
			ВызватьИсключение;
		КонецПопытки;
		
	Иначе
		
		СообщенияВМоделиСервиса.ОшибкаНеизвестноеИмяКанала(КаналСообщений);
		
	КонецЕсли;
	
	СообщенияВМоделиСервиса.ЗаписатьСобытиеОкончаниеОбработки(Сообщение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПодключитьКорреспондента(Сообщение, Отправитель)
	
	Тело = Сообщение.Body;
	
	// Проверяем эту конечную точку
	ЭтаКонечнаяТочка = ПланыОбмена.ОбменСообщениями.НайтиПоКоду(Тело.SenderId);
	
	Если ЭтаКонечнаяТочка.Пустая()
		ИЛИ ЭтаКонечнаяТочка <> ОбменСообщениямиВнутренний.ЭтотУзел() Тогда
		
		// Отправляем сообщение в менеджер сервиса об ошибке
		ПредставлениеОшибки = НСтр("ru = 'Конечная точка не соответствует ожидаемой. Код ожидаемой конечной точки %1. Код текущей конечной точки %2.'");
		ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки,
			Тело.SenderId,
			ОбменСообщениямиВнутренний.КодЭтогоУзла()
		);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными.Подключение корреспондента обмена'"),
			УровеньЖурналаРегистрации.Ошибка,,, ПредставлениеОшибки
		);
		
		ОтветноеСообщение = СообщенияВМоделиСервиса.НовоеСообщение(ОбменДаннымиВМоделиСервисаПовтИсп.СообщениеОшибкаПодключенияКорреспондента());
		ОтветноеСообщение.Body.RecipientId      = Тело.RecipientId;
		ОтветноеСообщение.Body.SenderId         = Тело.SenderId;
		ОтветноеСообщение.Body.ErrorDescription = ПредставлениеОшибки;
		
		НачатьТранзакцию();
		СообщенияВМоделиСервиса.ОтправитьСообщение(ОтветноеСообщение, Отправитель);
		ЗафиксироватьТранзакцию();
		Возврат;
	КонецЕсли;
	
	// Проверяем то, что корреспондент уже был подключен ранее
	Корреспондент = ПланыОбмена.ОбменСообщениями.НайтиПоКоду(Тело.RecipientId);
	
	Если Корреспондент.Пустая() Тогда // Подключаем конечную точку корреспондента
		
		Отказ = Ложь;
		ПодключенныйКорреспондент = Неопределено;
		
		ОбменСообщениями.ПодключитьКонечнуюТочку(
									Отказ,
									Тело.RecipientURL,
									Тело.RecipientUser,
									Тело.RecipientPassword,
									Тело.SenderURL,
									Тело.SenderUser,
									Тело.SenderPassword,
									ПодключенныйКорреспондент,
									Тело.RecipientName,
									Тело.SenderName
		);
		
		Если Отказ Тогда // Отправляем сообщение в менеджер сервиса об ошибке
			
			ПредставлениеОшибки = НСтр("ru = 'Ошибка подключения конечной точки корреспондента обмена. Код конечной точки корреспондента обмена %1.'");
			ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки,
				Тело.RecipientId
			);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными.Подключение корреспондента обмена'"),
				УровеньЖурналаРегистрации.Ошибка,,, ПредставлениеОшибки
			);
			
			ОтветноеСообщение = СообщенияВМоделиСервиса.НовоеСообщение(ОбменДаннымиВМоделиСервисаПовтИсп.СообщениеОшибкаПодключенияКорреспондента());
			ОтветноеСообщение.Body.RecipientId      = Тело.RecipientId;
			ОтветноеСообщение.Body.SenderId         = Тело.SenderId;
			ОтветноеСообщение.Body.ErrorDescription = ПредставлениеОшибки;
			
			НачатьТранзакцию();
			СообщенияВМоделиСервиса.ОтправитьСообщение(ОтветноеСообщение, Отправитель);
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ПодключенныйКорреспондентКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодключенныйКорреспондент, "Код");
		
		Если ПодключенныйКорреспондентКод <> Тело.RecipientId Тогда
			
			// Подключили не того корреспондента обмена.
			// Отправляем сообщение в менеджер сервиса об ошибке
			ПредставлениеОшибки = НСтр("ru = 'Ошибка при подключении конечной точки корреспондента обмена.
				|Настройки подключения веб-сервиса не соответствуют ожидаемым.
				|Код ожидаемой конечной точки корреспондента обмена %1.
				|Код подключенной конечной точки корреспондента обмена %2.'"
			);
			ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки,
				Тело.RecipientId,
				ПодключенныйКорреспондентКод
			);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными.Подключение корреспондента обмена'"),
				УровеньЖурналаРегистрации.Ошибка,,, ПредставлениеОшибки
			);
			
			ОтветноеСообщение = СообщенияВМоделиСервиса.НовоеСообщение(ОбменДаннымиВМоделиСервисаПовтИсп.СообщениеОшибкаПодключенияКорреспондента());
			ОтветноеСообщение.Body.RecipientId      = Тело.RecipientId;
			ОтветноеСообщение.Body.SenderId         = Тело.SenderId;
			ОтветноеСообщение.Body.ErrorDescription = ПредставлениеОшибки;
			
			НачатьТранзакцию();
			СообщенияВМоделиСервиса.ОтправитьСообщение(ОтветноеСообщение, Отправитель);
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		КорреспондентОбъект = ПодключенныйКорреспондент.ПолучитьОбъект();
		КорреспондентОбъект.Заблокирована = Истина;
		КорреспондентОбъект.Записать();
		
	Иначе // Обновляем настройки подключения этой конечной точки и корреспондента
		
		Отказ = Ложь;
		
		ОбменСообщениями.ОбновитьНастройкиПодключенияКонечнойТочки(
									Отказ,
									Корреспондент,
									Тело.RecipientURL,
									Тело.RecipientUser,
									Тело.RecipientPassword,
									Тело.SenderURL,
									Тело.SenderUser,
									Тело.SenderPassword
		);
		
		Если Отказ Тогда // Отправляем сообщение в менеджер сервиса об ошибке
			
			ПредставлениеОшибки = НСтр("ru = 'Ошибка обновления параметров подключения этой конечной точки и конечной точки корреспондента обмена.
				|Код этой конечной токи %1
				|Код конечной точки корреспондента обмена %2'"
			);
			ПредставлениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеОшибки,
				ОбменСообщениямиВнутренний.КодЭтогоУзла(),
				Тело.RecipientId
			);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными.Подключение корреспондента обмена'"),
				УровеньЖурналаРегистрации.Ошибка,,, ПредставлениеОшибки
			);
			
			ОтветноеСообщение = СообщенияВМоделиСервиса.НовоеСообщение(ОбменДаннымиВМоделиСервисаПовтИсп.СообщениеОшибкаПодключенияКорреспондента());
			ОтветноеСообщение.Body.RecipientId      = Тело.RecipientId;
			ОтветноеСообщение.Body.SenderId         = Тело.SenderId;
			ОтветноеСообщение.Body.ErrorDescription = ПредставлениеОшибки;
			
			НачатьТранзакцию();
			СообщенияВМоделиСервиса.ОтправитьСообщение(ОтветноеСообщение, Отправитель);
			ЗафиксироватьТранзакцию();
			Возврат;
		КонецЕсли;
		
		КорреспондентОбъект = Корреспондент.ПолучитьОбъект();
		КорреспондентОбъект.Заблокирована = Истина;
		КорреспондентОбъект.Записать();
		
	КонецЕсли;
	
	// Отправляем сообщение в менеджер сервиса об успешном выполнении операции
	НачатьТранзакцию();
	ОтветноеСообщение = СообщенияВМоделиСервиса.НовоеСообщение(ОбменДаннымиВМоделиСервисаПовтИсп.СообщениеКорреспондентУспешноПодключен());
	ОтветноеСообщение.Body.RecipientId = Тело.RecipientId;
	ОтветноеСообщение.Body.SenderId    = Тело.SenderId;
	СообщенияВМоделиСервиса.ОтправитьСообщение(ОтветноеСообщение, Отправитель);
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура УстановитьНастройкиТранспорта(Сообщение, Отправитель)
	
	Тело = Сообщение.Body;
	
	Корреспондент = ПланыОбмена.ОбменСообщениями.НайтиПоКоду(Тело.RecipientId);
	
	Если Корреспондент.Пустая() Тогда
		СтрокаСообщения = НСтр("ru = 'Не найдена конечная точка корреспондента с кодом ""%1"".'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Тело.RecipientId);
		ВызватьИсключение СтрокаСообщения;
	КонецЕсли;
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("КонечнаяТочкаКорреспондента", Корреспондент);
	
	СтруктураЗаписи.Вставить("FILEКаталогОбменаИнформацией",       Тело.FILE_ExchangeFolder);
	СтруктураЗаписи.Вставить("FILEСжиматьФайлИсходящегоСообщения", Тело.FILE_CompressExchangeMessage);
	
	СтруктураЗаписи.Вставить("FTPСжиматьФайлИсходящегоСообщения",                  Тело.FTP_CompressExchangeMessage);
	СтруктураЗаписи.Вставить("FTPСоединениеМаксимальныйДопустимыйРазмерСообщения", Тело.FTP_MaxExchangeMessageSize);
	СтруктураЗаписи.Вставить("FTPСоединениеПароль",                                Тело.FTP_Password);
	СтруктураЗаписи.Вставить("FTPСоединениеПассивноеСоединение",                   Тело.FTP_PassiveMode);
	СтруктураЗаписи.Вставить("FTPСоединениеПользователь",                          Тело.FTP_User);
	СтруктураЗаписи.Вставить("FTPСоединениеПорт",                                  Тело.FTP_Port);
	СтруктураЗаписи.Вставить("FTPСоединениеПуть",                                  Тело.FTP_ExchangeFolder);
	
	СтруктураЗаписи.Вставить("ВидТранспортаСообщенийОбменаПоУмолчанию",      Перечисления.ВидыТранспортаСообщенийОбмена[Тело.ExchangeTransport]);
	СтруктураЗаписи.Вставить("КоличествоЭлементовВТранзакцииВыгрузкиДанных", Тело.ExportTransactionQuantity);
	СтруктураЗаписи.Вставить("КоличествоЭлементовВТранзакцииЗагрузкиДанных", Тело.ImportTransactionQuantity);
	СтруктураЗаписи.Вставить("ПарольАрхиваСообщенияОбмена",                  Тело.ExchangeMessagePassword);
	
	РегистрыСведений.НастройкиТранспортаОбменаОбластейДанных.ОбновитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

Процедура УдалитьНастройкуСинхронизации(Сообщение, Отправитель)
	
	Тело = Сообщение.Body;
	
	// Поиск узла по формату кода узла "S00000123"
	Корреспондент = ПланыОбмена[Тело.ExchangePlan].НайтиПоКоду(
		ОбменДаннымиВМоделиСервиса.КодУзлаПланаОбменаВСервисе(Тело.CorrespondentZone)
	);
	Если Корреспондент.Пустая() Тогда
		
		// Поиск узла по формату кода узла "0000123" (старый формат)
		Корреспондент = ПланыОбмена[Тело.ExchangePlan].НайтиПоКоду(
			Формат(Тело.CorrespondentZone,"ЧЦ=7; ЧВН=; ЧГ=0")
		);
	КонецЕсли;
	
	Если Корреспондент.Пустая() Тогда
		Возврат; // настройка обмена не найдена (возможно, была удалена ранее)
	КонецЕсли;
	
	НастройкиТранспорта = РегистрыСведений.НастройкиТранспортаОбменаОбластиДанных.НастройкиТранспорта(Корреспондент);
	
	Если НастройкиТранспорта <> Неопределено
		И НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE Тогда
		
		Если Не ПустаяСтрока(НастройкиТранспорта.FILEОбщийКаталогОбменаИнформацией)
			И Не ПустаяСтрока(НастройкиТранспорта.FILEОтносительныйКаталогОбменаИнформацией) Тогда
			
			АбсолютныйКаталогОбменаИнформацией = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				НастройкиТранспорта.FILEОбщийКаталогОбменаИнформацией,
				НастройкиТранспорта.FILEОтносительныйКаталогОбменаИнформацией
			);
			
			АбсолютныйКаталог = Новый Файл(АбсолютныйКаталогОбменаИнформацией);
			
			Попытка
				УдалитьФайлы(АбсолютныйКаталог.ПолноеИмя);
			Исключение
				ЗаписьЖурналаРегистрации(ОбменДаннымиВМоделиСервиса.СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных(),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Удаляем узел корреспондента
	Корреспондент.ПолучитьОбъект().Удалить();
	
КонецПроцедуры

Процедура ВыполнитьСинхронизацию(Сообщение, Отправитель)
	
	СценарийОбменаДанными = СериализаторXDTO.ПрочитатьXDTO(Сообщение.Body.Scenario);
	
	Если СценарийОбменаДанными.Количество() > 0 Тогда
		
		// Для совместимости с БСП 2.1.1.
		СценарийОбменаДанными.Колонки.Добавить("ИнициированоПользователем");
		СценарийОбменаДанными.ЗаполнитьЗначения(Истина, "ИнициированоПользователем");
		
		// Запускаем выполнение сценария
		ОбменДаннымиВМоделиСервиса.ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(0, СценарийОбменаДанными);
		
	КонецЕсли;
	
КонецПроцедуры
