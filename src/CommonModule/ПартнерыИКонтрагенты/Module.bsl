////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получает контрагента по умолчанию
//
// Параметры
//  Партнер	  - Справочник.Партнеры - партнер для которого необходимо получить контрагента
//
// Возвращаемое значение:
//   Справочник.Контрагенты   - контрагент партнера по умолчанию
//
Функция ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Партнер = &Партнер";
		
	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИерархияПартнеров.Родитель КАК Партнер,
		|	Контрагенты.Ссылка КАК Контрагент,
		|	ИерархияПартнеров.Уровень
		|ПОМЕСТИТЬ ДоступныеКонтрагентыПартнера
		|ИЗ
		|	РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ИерархияПартнеров.Родитель = Контрагенты.Партнер
		|ГДЕ
		|	ИерархияПартнеров.Партнер = &Партнер
		|	И (НЕ Контрагенты.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоступныеКонтрагентыПартнера.Уровень КАК Уровень,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоступныеКонтрагентыПартнера.Контрагент) КАК КоличествоНаУровне
		|ПОМЕСТИТЬ БлижнийУровень
		|ИЗ
		|	ДоступныеКонтрагентыПартнера КАК ДоступныеКонтрагентыПартнера
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеКонтрагентыПартнера.Уровень
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоступныеКонтрагентыПартнера.Контрагент) = 1
		|
		|УПОРЯДОЧИТЬ ПО
		|	Уровень УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоступныеКонтрагентыПартнера.Уровень КАК Уровень,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоступныеКонтрагентыПартнера.Контрагент) КАК КоличествоНаУровне
		|ПОМЕСТИТЬ УровеньСЧисломКонтрагентовБольшеОдного
		|ИЗ
		|	ДоступныеКонтрагентыПартнера КАК ДоступныеКонтрагентыПартнера
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеКонтрагентыПартнера.Уровень
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоступныеКонтрагентыПартнера.Контрагент) > 1
		|
		|УПОРЯДОЧИТЬ ПО
		|	Уровень УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(БлижнийУровень.Уровень, 0) < ЕСТЬNULL(УровеньСЧисломКонтрагентовБольшеОдного.Уровень, 0)
		|			ТОГДА NULL
		|		ИНАЧЕ БлижнийУровень.Уровень
		|	КОНЕЦ КАК Уровень
		|ПОМЕСТИТЬ ИскомыйУровень
		|ИЗ
		|	БлижнийУровень КАК БлижнийУровень
		|		ПОЛНОЕ СОЕДИНЕНИЕ УровеньСЧисломКонтрагентовБольшеОдного КАК УровеньСЧисломКонтрагентовБольшеОдного
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоступныеКонтрагентыПартнера.Контрагент
		|ИЗ
		|	ДоступныеКонтрагентыПартнера КАК ДоступныеКонтрагентыПартнера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИскомыйУровень КАК ИскомыйУровень
		|		ПО ДоступныеКонтрагентыПартнера.Уровень = ИскомыйУровень.Уровень";
		
	КонецЕсли;
	
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат = Выборка.Контрагент;
		
	Иначе
		
		Результат = Справочники.Контрагенты.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет контрагента по партнеру
//
// Параметры:
//   Партнер - СправочникСсылка.Партнеры - Партнер, контрагента которого нужно заполнить
//   Контрагент - СправочникСсылка.Контрагенты -Контрагент которого нужно заполнить
//
Процедура ЗаполнитьКонтрагентаПартнераПоУмолчанию(Знач Партнер, Контрагент) Экспорт
	
	Если ЗначениеЗаполнено(Партнер) И
		Не ЗначениеЗаполнено (Контрагент) Тогда
		
		КонтрагентПоУмолчанию = ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
		
		Если КонтрагентПоУмолчанию <> Неопределено Тогда
			Контрагент = КонтрагентПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет, является ли партнер, родителем для других партнеров
//
// Параметры
//  Партнер		- Справочник.Партнеры - партнер, для которого выполняется проверка
//
// Возвращаемое значение:
//   Булево		- Истина, если является, Ложь в обратном случае.
//
Функция ЕстьПодчиненныеПартнеры(Партнер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Партнеры.Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Родитель = &Партнер
	|");
	Запрос.УстановитьПараметр("Партнер",Партнер);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

//Обновляет индекс полнотекстового поиска
Процедура ОбновитьИндексПолнотекстовогоПоиска() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПолнотекстовыйПоиск.ОбновитьИндекс();
	
КонецПроцедуры

// Получает массив доступных для выбора партнером контрагентов
//
// Параметры
//  Партнер - Справочник.Партнеры - партнер для которого необходимо получить контрагентов
//
// Возвращаемое значение:
//  Массив -  массив содержащий всех доступных для партнера контрагентов
// 
Функция ПолучитьВсехКонтрагентовПартнера(Партнер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ИерархияПартнеров.Родитель = Контрагенты.Партнер
	|ГДЕ
	|	ИерархияПартнеров.Партнер = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контрагент");
	КонецЕсли;
	
КонецФункции

// Получает массив нижестоящих партнеров
//
// Параметры
//  Партнер  -  Справочник.Партнеры - партнер для которого необходимо получить контрагентов
//
// Возвращаемое значение:
//  Массив -  содержит всех нижестоящих партнеров и самого партнера
//
Функция ПолучитьНижестоящихПартнеров(Партнер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ИерархияПартнеров.Партнер
	|ИЗ
	|	РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
	|ГДЕ
	|	ИерархияПартнеров.Родитель = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер",Партнер);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Партнер");
	КонецЕсли;
	
КонецФункции

// Получает список родителей партнера снизу вверх по иерархии
//
// Параметры
//  Партнер  - Справочник.Партнеры - партнер, для которого формируется список.
//
// Возвращаемое значение:
//   СписокЗначений   - список значений, который включает самого партнера и всех родителей вверх по иерархии
//
Процедура ЗаполнитьСписокПартнераСРодителями(Партнер,СписокПартнераСРодителями) Экспорт
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	//Получить родителей партнера
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Ссылка,
	|	Партнеры.Наименование
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка = &Партнер
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ
	|");
	Запрос.УстановитьПараметр("Партнер",Партнер);
	
	ДеревоИерархии = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗаполнитьСписокПартнеровИзДерева(ДеревоИерархии.Строки, СписокПартнераСРодителями,Партнер);
	
КонецПроцедуры

// Получает список всех родительских и дочерних элементов партнера в иерархии
//
// Параметры
//  Партнер  - Справочник.Партнеры - партнер, для которого формируется список.
//
// Возвращаемое значение:
//   СписокЗначений   - список значений, который включает самого партнера и все родителей и дочерние элементы в иерархии
//
Процедура ЗаполнитьСписокПартнераСоВсехИерархией(Партнер, СписокПартнераСРодителями) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ИерархияПартнеров.Партнер = &Партнер
	|			ТОГДА ИерархияПартнеров.Родитель
	|		ИНАЧЕ ИерархияПартнеров.Партнер
	|	КОНЕЦ КАК Партнер,
	|	ВЫБОР
	|		КОГДА ИерархияПартнеров.Партнер = &Партнер
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ИерархияПартнеров.Родитель)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ИерархияПартнеров.Партнер)
	|	КОНЕЦ КАК Представление
	|ИЗ
	|	РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
	|ГДЕ
	|	(ИерархияПартнеров.Партнер = &Партнер
	|			ИЛИ ИерархияПартнеров.Родитель = &Партнер)";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокПартнераСРодителями.Добавить(Выборка.Партнер, Выборка.Представление);
	КонецЦикла;
	
	Возврат;
	
КонецПроцедуры

//По переданному значению перечисления ЮрФизЛицо определяет, является ли оно признаком ЮрЛица
//
// Параметры
//  ЮрФизЛицо  - Перечисления.ЮрФизЛицо 
// Возвращаемое значение:
//  Булево     - Истина, если юридическое лицо, Ложь если нет.
//
Функция ЭтоЮрЛицо(ЮрФизЛицо) Экспорт
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо ИЛИ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		Возврат Истина;
	ИначеЕсли ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо ИЛИ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		Возврат Ложь;
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо") Тогда
	 	Возврат ЮрФизЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//Определяет доступен ли для пользователя упрощенный ввод партнеров и контрагентов
//
// Возвращаемое значение:
//   Булево   - Истина, если упрощенный ввод доступен, и ложь в обратном случае
//
Функция УпрощенныйВводДоступен() Экспорт
	
	Возврат РольДоступна("ПолныеПрава") ИЛИ (ПравоДоступа("Добавление",Метаданные.Справочники.Партнеры) И РольДоступна("ПравоВводаИнформацииПоПартнеруБезКонтроля"));
	
КонецФункции

//Определяет, есть ли в базе контрагент с таким же набором ИНН/КПП
Функция ИННКППУжеИспользуетсяВИнформационнойБазе(ИНН,КПП,ИсключаяСсылку = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка,
	|	Партнеры.Код,
	|	ПРЕДСТАВЛЕНИЕ(Партнеры.ОсновнойМенеджер) КАК ОсновнойМенеджер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО Контрагенты.Партнер = Партнеры.Ссылка
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП
	|	И Контрагенты.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("ИНН",ИНН);
	Запрос.УстановитьПараметр("КПП",КПП);
	Запрос.УстановитьПараметр("Ссылка",ИсключаяСсылку);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Удаляет из настроек и пользовательских настроек элемент отбора
//
// Параметры
//  КомпоновщикНастроек  - КомпоновщикНастроек 
//  ПредставлениеЭлемента  - Строка - представление элемента, который будет удален.
//
Процедура УдалитьЭлементИзНастроекОтборовОтчета(КомпоновщикНастроек, ПредставлениеЭлемента) Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		
		ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(КомпоновщикНастроек.Настройки.Отбор, ПредставлениеЭлемента);
		Для Каждого ЭлементОтбора ИЗ ЭлементыОтбора Цикл
			ИдентификаторПользовательскойНастройки = ЭлементОтбора.ИдентификаторПользовательскойНастройки;
			КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОтбора);
			
			ЭлементПользовательскихНастроек = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			Если ЭлементПользовательскихНастроек <> Неопределено Тогда
				КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Удалить(ИдентификаторПользовательскойНастройки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Заполняет контактное лицо по партнеру
//
// Параметры:
// Партнер - СправочникСсылка.Партнеры - Партнер, контктактное лицо которого нужно заполнить
// КонтактноеЛицо - СправочникСсылка.КонтактныеЛицаПартнеров -КонтактноеЛицо которое нужно заполнить
//
Процедура ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Знач Партнер, КонтактноеЛицо) Экспорт
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтактноеЛицо) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицо, "Владелец") <> Партнер Тогда
		КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		
		КонтактноеЛицоПоУмолчанию = ПолучитьКонтактноеЛицоПартнераПоУмолчанию(Партнер);
		
		Если КонтактноеЛицоПоУмолчанию <> Неопределено Тогда
			КонтактноеЛицо = КонтактноеЛицоПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает контактное лицо партнера контрагента по умолчанию
//
// Параметры
//  Контрагент  - Справочник.Контрагенты - контрагент, для партнера которого необходимо получить контактное лицо
//
// Возвращаемое значение:
//   Справочник.КонтактныеЛицаПартнеров   - контактное лицо партнера контрагента по умолчанию
//
Функция ПолучитьКонтактноеЛицоПартнераКонтрагентаПоУмолчанию(Контрагент) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Контрагенты.Партнер КАК Владелец
	|ПОМЕСТИТЬ ВладелецКонтактногоЛица
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Количество = 1
	|			ТОГДА КонтактныеЛицаПартнеров.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)
	|	КОНЕЦ КАК КонтактноеЛицо
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтактныеЛицаПартнеров.Ссылка) КАК Количество
	|	ИЗ
	|		Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|	ГДЕ
	|		КонтактныеЛицаПартнеров.Владелец В
	|				(ВЫБРАТЬ
	|					ВладелецКонтактногоЛица.Владелец КАК Владелец
	|				ИЗ
	|					ВладелецКонтактногоЛица)
	|		И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления) КАК ВложенныйЗапрос,
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец В
	|			(ВЫБРАТЬ
	|				ВладелецКонтактногоЛица.Владелец КАК Владелец
	|			ИЗ
	|				ВладелецКонтактногоЛица)";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КонтактноеЛицо;
	
КонецФункции

// Получает контактное лицо партнера по умолчанию
//
// Параметры
//  Партнер	  - Справочник.Партнеры - партнер для которого необходимо получить контактное лицо
//
// Возвращаемое значение:
//   Справочник.КонтактныеЛицаПартнеров   - контактное лицо партнера по умолчанию
//
Функция ПолучитьКонтактноеЛицоПартнераПоУмолчанию(Партнер) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.Количество = 1
	               |			ТОГДА КонтактныеЛицаПартнеров.Ссылка
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)
	               |	КОНЕЦ КАК КонтактноеЛицо
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтактныеЛицаПартнеров.Ссылка) КАК Количество
	               |	ИЗ
	               |		Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	               |	ГДЕ
	               |		КонтактныеЛицаПартнеров.Владелец = &Партнер
	               |		И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления) КАК ВложенныйЗапрос,
	               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	               |ГДЕ
	               |	КонтактныеЛицаПартнеров.Владелец = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КонтактноеЛицо;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Иерархия партнеров.

// Выполняет запись в РС "Иерархия партнеров" для массива переданных партнеров или для всего справочника,
// если массив не передан в процедуру.
//
// Параметры
//  Массив	- Массив - массив содержащих партнеров, для которых необходимо выполнить запись в РС "Иерархия партнеров"
//
Процедура ВыполнитьЗаписьИерархияПартнеров(МассивПартнеров = Неопределено) Экспорт
	
	Если МассивПартнеров = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Партнеры.Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	Партнеры.Родитель = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаписатьИерархиюПартнера(Выборка.Ссылка);
			
		КонецЦикла;
		
	Иначе
		
		Для каждого ЭлементМассива Из МассивПартнеров Цикл
			
			ЗаписатьИерархиюПартнера(ЭлементМассива);
			
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Очищает РС "Иерархия партнеров"
Процедура ОчиститьРегистрСведенийИерархияПартнеров() Экспорт
	
	НаборЗаписей = РегистрыСведений.ИерархияПартнеров.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Выполняет запись в РС "Иерархия партнеров" для переданного в процедуру партнера,
//
// Параметры
//  Ссылка	- СправочникСсылка.Партнеры - ссылка на партнера для которого необходимо выполнить запись в РС "Иерархия партнеров"
//
Процедура ЗаписатьИерархиюПартнера(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка В ИЕРАРХИИ(&Ссылка)
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоИерархии = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЭлементТекущегоСправочника = ДеревоИерархии.Строки.Найти(Ссылка,"Ссылка",Истина);
	
	Если ЭлементТекущегоСправочника <> Неопределено Тогда
		ВыполнитьЗаписьВРегистрПоПартнеру(ЭлементТекущегоСправочника);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с формами.

// Определяет доступность полнотекстового поиска в формах списка и выбора справочника партнеры
//
// Параметры
//  Форма		 - УправляемаяФорма - форма, для которой определяется доступность
//
Процедура ДоступностьПолнотекстовыйПоискСписокПартнеры(Форма) Экспорт
	
	//Настроить видимость элементов
	Форма.РасширенныйПоиск = Ложь;
	
	ОбщегоНазначенияУТ.ИнициализироватьРеквизитыФормыДляПолнотекстовогоПоиска(Форма, "ИспользоватьПолнотекстовыйПоиск"); 
	
	Если Форма.ИспользоватьПолнотекстовыйПоиск Тогда
		
		СпискиВыбораКлиентСервер.Загрузить("ИсторияПоискаПартнеров", Форма.Элементы.СтрокаПоиска.СписокВыбора);
		
	Иначе
		
		Форма.Элементы.СтрокаПоиска.Видимость = Ложь;
		Форма.Элементы.Найти.Видимость        = Ложь;

	КонецЕсли;
	
КонецПроцедуры

// Изменяет запрос динамического списка партнеров и устанавливает отбор по типу отношений
//
// Параметры
//  Форма		 - УправляемаяФорма - форма, для которой устанавливаются отборы
//
Процедура УстановитьОтборыДинамическийСписокПартнеры(Форма) Экспорт
	
	СформироватьСписокУстановленныхОтборовДинамическийСписокПартнеры(Форма);
	
	Если Форма.СписокОтборПоТипуПартнера.Количество() > 0 Тогда
		
		УстанавливатьОтборПоТипуПартнераКакИЛИ = Ложь;
		
		Если Форма.Параметры.Свойство("УстанавливатьОтборПоТипуПартнераКакИЛИ") И Форма.Параметры.УстанавливатьОтборПоТипуПартнераКакИЛИ Тогда
			УстанавливатьОтборПоТипуПартнераКакИЛИ = Истина;
		КонецЕсли;
		
		Для каждого ЭлементСписка Из Форма.СписокОтборПоТипуПартнера Цикл
			Форма.Параметры.Отбор.Удалить(ЭлементСписка.Значение);
		КонецЦикла;
		
		Форма.Список.ТекстЗапроса =  Форма.Список.ТекстЗапроса + ДополнениеЗапросаДинамическогоСпискаПоПартнерам(Форма.СписокОтборПоТипуПартнера, УстанавливатьОтборПоТипуПартнераКакИЛИ); 
		
		СтрокаЗаголовок = НСтр("ru='Партнеры ('");
		Для каждого ЭлементСписка Из Форма.СписокОтборПоТипуПартнера Цикл
			СтрокаЗаголовок = СтрокаЗаголовок + Метаданные.Справочники.Партнеры.Реквизиты[ЭлементСписка.Значение].Комментарий + ?(УстанавливатьОтборПоТипуПартнераКакИЛИ," ИЛИ "," И ");
		КонецЦикла;
		
		Форма.АвтоЗаголовок = Ложь;
		Форма.Заголовок = Лев(СтрокаЗаголовок, СтрДлина(СтрокаЗаголовок) - ?(УстанавливатьОтборПоТипуПартнераКакИЛИ,5,3)) + ")";
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Форма.Список.Отбор,
			?(Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаВыбораИспользуютсяТолькоПартнеры", "Партнер", "Ссылка"),
			Справочники.Партнеры.НеизвестныйПартнер,
			ВидСравненияКомпоновкиДанных.НеРавно
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор динамического списка партнеров согласно позиционировании в панели навигации
//
// Параметры
//  Форма   - УправляемаяФорма - форма, для которой устанавливаются отборы
//
Процедура УстановитьОтборыДинамическихСписковПанелиНавигации(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Менеджеры.Отбор, "Недействителен", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	
КонецПроцедуры

//Выполняет полнотекстовый поиск партнеров в форме
//
// Параметры
//  Форма   - УправляемаяФорма - форма, в которой выполняется поиск
//
// Возвращаемое значение:
//   Строка   - Текст сообщения о ошибки, Неопределено, если поиск выполнен успешно
//
Функция НайтиПартнеровПолнотекстовыйПоиск(Форма) Экспорт
	
	ТаблицаОснований = Форма.РеквизитФормыВЗначение("Основания");
	
	//получить результаты поиска
	ТекстОшибки =
	НайтиПартнеров(Форма.СтрокаПоиска, ТаблицаОснований);
	Если ТекстОшибки = Неопределено Тогда
		
		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Форма.Элементы.СтрокаПоиска.СписокВыбора, Форма.СтрокаПоиска, 100);
		
		СпискиВыбораКлиентСервер.Сохранить("ИсторияПоискаПартнеров", Форма.Элементы.СтрокаПоиска.СписокВыбора);
		
		//вернуть таблицу оснований
		Форма.ЗначениеВРеквизитФормы(ТаблицаОснований, "Основания");
		
		Если НЕ Форма.РасширенныйПоиск Тогда
			Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска = Строка(Форма.Элементы.Список.Отображение);
		КонецЕсли;
		Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		
		//установить отбор по списку найденных партнеров
		#Если НЕ ВнешнееСоединение Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Форма.Список.Отбор,
			"Поиск",
			ТаблицаОснований.ВыгрузитьКолонку("Партнер"),
			ВидСравненияКомпоновкиДанных.ВСписке,, Истина
			);
		#КонецЕсли
		
		Форма.Элементы.СтрокаПоиска.ЦветФона = ЦветаСтиля.ЦветФонаПоля;
		Возврат Неопределено;
		
	КонецЕсли;
	
	
	#Если НЕ ВнешнееСоединение Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Форма.Список.Отбор,
		"Поиск",
		Справочники.Партнеры.ПустаяСсылка(),
		ВидСравненияКомпоновкиДанных.Равно,, Истина
		);
	#КонецЕсли
	
	Форма.Элементы.СтрокаПоиска.ЦветФона = ЦветаСтиля.ПолеСОшибкойФон;
	Возврат ТекстОшибки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры форм элемента справочника партнеры.

// Обработчик события ПриСозданииНаСервере форм элемента справочника Партнеры
//
// Параметры
//  Форма                - УправляемаяФорма - форма, для которой выполняется обработчик
//  Отказ                - Булево - признак отказа от создания формы
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события
//
Процедура ПартнерФормаЭлементаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);
	
	// Обработчик механизма "Контактная информация"
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(Форма, Форма.Объект, "ГруппаКонтактнаяИнформация");
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПриСозданииНаСервере(Форма, Форма.Объект, "ГруппаДополнительныеРеквизиты");
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(Форма);
	
	//определить канал и источник первичного интереса
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Интерес = ПервичныйИнтерес(Форма.Объект.Ссылка,Истина);
		Форма.КаналПервичногоИнтереса = Интерес.КаналПервичногоИнтереса;
		Форма.ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
		Форма.Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Не ЗначениеЗаполнено(Форма.КаналПервичногоИнтереса);
	Иначе
		Форма.Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("СписокОтборПоТипуПартнера") Тогда
		
		Для каждого ЭлементСписка Из Форма.Параметры.СписокОтборПоТипуПартнера Цикл
			Форма.Объект[ЭлементСписка.Значение] = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Форма.Объект.Перевозчик Тогда
		Форма.Объект.Поставщик = Истина;
	КонецЕсли;
	
	Если Форма.Объект.ОбслуживаетсяТорговымиПредставителями Тогда
		Форма.Объект.Клиент = Истина;
	КонецЕсли;
	
	УправлениеДоступом.ПриСозданииФормыЗначенияДоступа(Форма);
	
	//учесть возможность создания из взаимодействия
	Взаимодействия.ПодготовитьОповещения(Форма, Форма.Параметры, Ложь);
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		ПартнерФормаЭлементаПриСозданииЧтенииНаСервере(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриЧтенииНаСервере форм элемента справочника Партнеры
//
// Параметры
//  Форма          - УправляемаяФорма - форма, для которой выполняется обработчик
//  ТекущийОбъект  - СправочникОбъект.Партнеры - Объект, который будет прочитан
//
Процедура ПартнерФормаЭлементаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	ПартнерФормаЭлементаПриСозданииЧтенииНаСервере(Форма);
	
	УправлениеСвойствами.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	
КонецПроцедуры

// Управляет доступностью элементов формы элемента справочника Партнеры
//
// Параметры
//  Форма   УправляемаяФорма - форма, настраивается доступность элементов
//
Процедура ПартнерФормаЭлементаУправлениеДоступностью(Форма) Экспорт
	
	Если Форма.Объект.Предопределенный Тогда
		Форма.Элементы.Клиент.ТолькоПросмотр = Истина;
		Форма.Элементы.Поставщик.ТолькоПросмотр = Истина;
		Форма.Элементы.Конкурент.ТолькоПросмотр = Истина;
		Форма.Элементы.ПрочиеОтношения.ТолькоПросмотр = Истина;
		Форма.Элементы.ОбслуживаетсяТорговымиПредставителями.ТолькоПросмотр = Истина;
		Форма.Элементы.Перевозчик.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Форма.Элементы.ОбслуживаетсяТорговымиПредставителями.Доступность = Форма.Объект.Клиент;
	Если НЕ Форма.Объект.Клиент Тогда
		Форма.Объект.ОбслуживаетсяТорговымиПредставителями = Ложь;
	КонецЕсли;
	
	Форма.Элементы.Перевозчик.Доступность = Форма.Объект.Поставщик;
	Если НЕ Форма.Объект.Поставщик Тогда
		Форма.Объект.Перевозчик = Ложь;
	КонецЕсли;
	
	Форма.Элементы.Пол.Доступность          = (Форма.Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
	Форма.Элементы.ДатаРождения.Доступность = (Форма.Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
	
КонецПроцедуры

// Обработчик события ПослеЗаписиНаСервере форм элемента справочника Партнеры
//
// Параметры
//  Форма            - УправляемаяФорма - форма, для которой выполняется обработчик
//  ТекущийОбъект    - СправочникОбъект.Партнеры - Записанный объект
//  ПараметрыЗаписи  - Структура - содержит параметры записи.
//
Процедура ПартнерФормаЭлементаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт

	ПартнерФормаЭлементаНастроитьПанельНавигации(Форма);
	ЗафиксироватьПервичныйИнтерес(Форма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

// Формирует строку, в которой содержатся через запятую все возможные типы отношений партнера
//
// Параметры
//  ДанныеПартнера  - ВыборкаИзРезультатовЗапроса, Структура - содержит данные о типах отношений с партнером
// Возвращаемое значение:
//   Строка  - сформированная строковая информация о типах установленных отношений с партнером
//
Функция СформироватьСтрокуТекущихТиповОтношений(ДанныеПартнера) Экспорт

	СтрокаТипОтношений = ?(ДанныеПартнера.Клиент, "Клиент","") + ?(ДанныеПартнера.Поставщик, ", Поставщик","") +
	                     ?(ДанныеПартнера.Конкурент, ", Конкурент","") + ?(ДанныеПартнера.ПрочиеОтношения, ", Прочие отношения","");
	Если Лев(СтрокаТипОтношений, 2) = ", " Тогда
		СтрокаТипОтношений = Прав(СтрокаТипОтношений,СтрДлина(СтрокаТипОтношений) - 2);
	КонецЕсли;
	
	Возврат СтрокаТипОтношений;

КонецФункции

// Получает необходимые данные о партнере для вывода в панель информации форм списка 
// и выбора справочника "Партнеры"
//
// Параметры
//  Партнер  - СправочникСсылка.Партнеры - партнер для которого необходимо получить информацию
//
// Возвращаемое значение:
//   Структура   - содержить информацию о партнере
//
Функция ДанныеПартнераДляПанелиИнформации(Партнер) Экспорт
	
	ДанныеПартнера = Новый Структура;
	ДанныеПартнера.Вставить("Наименование", "");
	ДанныеПартнера.Вставить("БизнесРегион", "");
	ДанныеПартнера.Вставить("КонтактнаяИнформация", "");
	ДанныеПартнера.Вставить("КоличествоКонтактныхЛиц", 0);
	ДанныеПартнера.Вставить("КоличествоКонтрагентов", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Партнеры.Наименование КАК Наименование,
	               |	ПРЕДСТАВЛЕНИЕ(Партнеры.БизнесРегион) КАК БизнесРегион
	               |ИЗ
	               |	Справочник.Партнеры КАК Партнеры
	               |ГДЕ
	               |	Партнеры.Ссылка = &Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВидыКонтактнойИнформации.Наименование КАК ВидКИ,
	               |	ЕСТЬNULL(ПартнерыКонтактнаяИнформация.Представление, """") КАК ПредставлениеКИ,
	               |	ВЫБОР
	               |		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЗначениеУпорядочивания
	               |ИЗ
	               |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	               |		ПО (ПартнерыКонтактнаяИнформация.Вид = ВидыКонтактнойИнформации.Ссылка)
	               |			И (ПартнерыКонтактнаяИнформация.Ссылка = &Партнер)
	               |ГДЕ
	               |	ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПартнеры)
	               |	И НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗначениеУпорядочивания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтактныеЛицаПартнеров.Ссылка) КАК КоличествоКЛ
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	               |ГДЕ
	               |	КонтактныеЛицаПартнеров.Владелец = &Партнер
	               |	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) КАК КоличествоКонтрагентов
	               |ИЗ
	               |	Справочник.Контрагенты КАК Контрагенты
	               |ГДЕ
	               |	Контрагенты.Партнер = &Партнер
	               |	И НЕ Контрагенты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаДанныеПартнера = Результат[0].Выбрать();
	Если ВыборкаДанныеПартнера.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеПартнера, ВыборкаДанныеПартнера);
	КонецЕсли;
	
	ДанныеПартнера.Вставить("КонтактнаяИнформацияТаблица", Результат[1].Выгрузить());
	
	ВыборкаКоличествоКЛ = Результат[2].Выбрать();
	Если ВыборкаКоличествоКЛ.Следующий() Тогда
		
		ДанныеПартнера.КоличествоКонтактныхЛиц = ВыборкаКоличествоКЛ.КоличествоКЛ;
		
	КонецЕсли;
	
	ВыборкаКоличествоКонтрагентов = Результат[3].Выбрать();
	Если ВыборкаКоличествоКонтрагентов.Следующий() Тогда
		
		ДанныеПартнера.КоличествоКонтрагентов = ВыборкаКоличествоКонтрагентов.КоличествоКонтрагентов;
		
	КонецЕсли;
	
	Возврат ДанныеПартнера;
	
КонецФункции

// Формирует список выбора для выбора типа фильтра
//
//Параметры:
//  СписокВыбора - СписокЗначений - сформированный список выбора
//
Процедура ЗаполнитьСписокВыбораТипФильтраСписокПартнеров(Форма, СписокВыбора) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесРегионы") И ПравоДоступа("Чтение", Метаданные.Справочники.БизнесРегионы) Тогда
		СписокВыбора.Добавить("БизнесРегионы", НСтр("ru = 'бизнес-региону'"));
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.Пользователи) Тогда
		СписокВыбора.Добавить("Менеджер", НСтр("ru = 'основному менеджеру'"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведенияУТ") Тогда
		ДополнитьСписокВыбораТипФильтраСписокПартнеров(Форма, СписокВыбора);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции форм списка и выбора справочника партнеры.

Процедура ПартнерыФормаВыбораСпискаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Форма.УпрощенныйВводДоступен               = УпрощенныйВводДоступен();
	Форма.ТекущийПользователь                  = Пользователи.АвторизованныйПользователь();
	Форма.ИспользоватьБизнесРегионы            = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесРегионы");
	Форма.ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");

	ДоступностьПолнотекстовыйПоискСписокПартнеры(Форма);
	
	ЗаполнитьСписокВыбораТипФильтраСписокПартнеров(Форма, Форма.Элементы.ТипФильтра.СписокВыбора);
	Форма.ТипФильтра = Форма.Элементы.ТипФильтра.СписокВыбора[0].Значение;
	УстановитьОтборыДинамическийСписокПартнеры(Форма);
	СоздатьРеквизитыДляОтображенияКИ(Форма);
	
КонецПроцедуры

Процедура ПартнерыФормаВыбораСпискаПриЗагрузкеДанныхИзНастроекНаСервере(Форма, Настройки) Экспорт
	
	//установить отборы списка по сохраненным настройкам
	Форма.ТолькоМои = Настройки.Получить("ТолькоМои");
	Если Форма.ТолькоМои Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Форма.Список.Отбор,
			"ОсновнойМенеджер",
			Форма.ТекущийПользователь,
			ВидСравненияКомпоновкиДанных.Равно,, Истина
		);
	КонецЕсли;

КонецПроцедуры

Процедура СоздатьРеквизитыДляОтображенияКИ(Форма) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	ОписаниеТипаСтроки500 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
	|	ВидыКонтактнойИнформации.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗначениеУпорядочивания
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПартнеры)
	|	И НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначениеУпорядочивания";
	
	ТаблицаВидовКИ = Запрос.Выполнить().Выгрузить();
	
	МаксимальнаяДлинаВидаКИ = 0;
	Для каждого СтрокаКИ Из ТаблицаВидовКИ Цикл
		Если СтрДлина(СтрокаКИ.Наименование) > МаксимальнаяДлинаВидаКИ Тогда
			МаксимальнаяДлинаВидаКИ = СтрДлина(СтрокаКИ.Наименование + 3);
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеТипаСтрокиВидКИ = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(МаксимальнаяДлинаВидаКИ + 3));
	Форма.Элементы.ГруппаВидыКИ.Ширина = МаксимальнаяДлинаВидаКИ + 3;
	Форма.КоличествоВидовКИ = ТаблицаВидовКИ.Количество();
	
	Для инд = 1 По Форма.КоличествоВидовКИ Цикл
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗаголовокВидКИ_" + Строка(инд), ОписаниеТипаСтрокиВидКИ,));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВидКИ_" + Строка(инд), ОписаниеТипаСтроки500,));
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Для инд = 1 По Форма.КоличествоВидовКИ Цикл
		
		Элемент = Форма.Элементы.Добавить("ЗаголовокВидКИ_" + Строка(инд), Тип("ПолеФормы"), Форма.Элементы.ГруппаВидыКИ);
		Элемент.Вид                      = ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ВертикальноеПоложение    = ВертикальноеПоложениеЭлемента.Верх;
		Элемент.ПутьКДанным              = "ЗаголовокВидКИ_" + Строка(инд);
		Элемент.АвтоВысотаЯчейки         = Истина;
		Элемент.РастягиватьПоВертикали   = Ложь;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Форма["ЗаголовокВидКИ_" + Строка(инд)] = ТаблицаВидовКИ[инд - 1].Наименование + " :";
		
		Элемент = Форма.Элементы.Добавить("ВидКИ_" + Строка(инд), Тип("ПолеФормы"), Форма.Элементы.ГруппаЗначениеКИ);
		Элемент.Вид                      = ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ВертикальноеПоложение    = ВертикальноеПоложениеЭлемента.Верх;
		Элемент.ПутьКДанным              = "ВидКИ_" + Строка(инд);
		Элемент.ЦветТекста               = ЦветаСтиля.ИндивидуальнаяЦена;
		Элемент.АвтоВысотаЯчейки         = Истина;
		Элемент.РастягиватьПоВертикали   = Ложь;
		Элемент.РастягиватьПоГоризонтали = Истина;
		
	КонецЦикла;
	
	
	Для инд = 1 По Форма.КоличествоВидовКИ Цикл
		
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидКИ_" + Строка(инд));
		ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = НСтр("ru = '<Не указан>'");
		ЭлементОтбораДанных.Использование  = Истина;
		
		ЭлементЦветаОформления               = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
		ЭлементЦветаОформления.Значение      = Метаданные.ЭлементыСтиля.ЦветТекстаОтмененнойСтрокиДокумента.Значение;
		ЭлементЦветаОформления.Использование = Истина;
		
		НовыйЭлемент = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		НовыйЭлемент.Поле = Новый ПолеКомпоновкиДанных("ВидКИ_" + Строка(инд));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеКИПартнера(ДанныеПартнера, Форма) Экспорт
	
	Если ДанныеПартнера = Неопределено Тогда
		
		Для инд = 1 По Форма.КоличествоВидовКИ Цикл
			
			Форма["ВидКИ_" + Строка(инд)] = НСтр("ru = '<Не указан>'");
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Для инд = 1 По ДанныеПартнера.КонтактнаяИнформацияТаблица.Количество() Цикл
		
		Если ПустаяСтрока(ДанныеПартнера.КонтактнаяИнформацияТаблица[инд - 1].ПредставлениеКИ) Тогда
			Форма["ВидКИ_" + Строка(инд)] = НСтр("ru = '<Не указан>'");
		Иначе
			Форма["ВидКИ_" + Строка(инд)] = ДанныеПартнера.КонтактнаяИнформацияТаблица[инд - 1].ПредставлениеКИ;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьОтборСписок(Форма, ПереформированиеПанелиНавигации, ТребуетсяЗаполнениеСтраницыСвойств) Экспорт
	
	Если ТребуетсяЗаполнениеСтраницыСвойств Тогда
		
		Если Форма.ТипФильтра = "Категории" Тогда
			ЗаполнитьДеревоКатегорий(Форма);
			Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаКатегории;
			
			НайденныеСтроки = Форма.НастройкиПанелейНавигации.НайтиСтроки(Новый Структура("ВидПанели","Категории"));
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтрокиПанели = Форма.Категории.НайтиСтроки(Новый Структура("Значение", НайденныеСтроки[0].ТекущееЗначение));
				Если НайденныеСтрокиПанели.Количество() > 0 Тогда
					Форма.Элементы.Категории.ТекущаяСтрока = НайденныеСтрокиПанели[0].ПолучитьИдентификатор();
				КонецЕсли;
			КонецЕсли;
			
			Форма.НеОтрабатыватьАктивизациюПанелиНавигации = Истина;
			
		Иначе
			
			ЗаполнитьДеревоСвойств(Форма);
			Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаСвойства;
			
			НайденныеСтроки = Форма.НастройкиПанелейНавигации.НайтиСтроки(Новый Структура("ВидПанели", Форма.ТипФильтра));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Форма.Элементы.Свойства.ТекущаяСтрока = НайтиСтрокуВДанныхФормыДерево(Форма.Свойства, НайденныеСтроки[0].ТекущееЗначение, "Значение", Истина)
			КонецЕсли;
			
			Форма.НеОтрабатыватьАктивизациюПанелиНавигации = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстанавливатьОтбор = Истина;
	Если НЕ Форма.ИспользоватьФильтр Тогда
		Форма.ТекущееЗначениеФильтра = Неопределено;
		УстанавливатьОтбор = Ложь;
	КонецЕсли;
	
	Если УстанавливатьОтбор Тогда
		ГруппаОтбора = СоздатьГруппуОтбораПоФильтру(Форма);
	Иначе
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Форма.Список.Отбор.Элементы, "Отбор по фильтру");
		Если ГруппаОтбора <> Неопределено Тогда
			Форма.Список.Отбор.Элементы.Удалить(ГруппаОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаСвойства 
		ИЛИ Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаКатегории Тогда
		
		Форма.ТолькоЗначимые = Истина;
		Форма.Элементы.ТолькоЗначимые.Доступность = Ложь;
		ИмяРеквизитаОтбора = ?(Форма.ИмяФормы = "Справочник.Партнеры.Форма.ФормаСписка","Ссылка", "Партнер");
		
	Иначе
		
		Форма.Элементы.ТолькоЗначимые.Доступность = Истина;
		
		Если ПереформированиеПанелиНавигации Тогда
			
			Если Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаБизнесРегионы Тогда
				НайденныеСтроки = Форма.НастройкиПанелейНавигации.НайтиСтроки(Новый Структура("ВидПанели", "БизнесРегионы"));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Форма.Элементы.БизнесРегионы.ТекущаяСтрока = НайденныеСтроки[0].ТекущееЗначение;
				КонецЕсли;
				ИмяСписка = "БизнесРегионы";
			ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаГруппыДоступа Тогда
				НайденныеСтроки = Форма.НастройкиПанелейНавигации.НайтиСтроки(Новый Структура("ВидПанели", "ГруппыДоступа"));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Форма.Элементы.ГруппыДоступаПартнеров.ТекущаяСтрока = НайденныеСтроки[0].ТекущееЗначение;
				КонецЕсли;
				ИмяСписка = "ГруппыДоступаПартнеров";
			ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаМенеджеры Тогда
				НайденныеСтроки = Форма.НастройкиПанелейНавигации.НайтиСтроки(Новый Структура("ВидПанели", "Менеджер"));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Форма.Элементы.Менеджеры.ТекущаяСтрока = НайденныеСтроки[0].ТекущееЗначение;
				КонецЕсли;
				ИмяСписка = "Менеджеры";
			КонецЕсли;
			
			ОтборСпискаДляИзменения = Форма[ИмяСписка].Отбор;
			СписокЗначимые = СписокЗначимыхЗначенийПанелиНавигации(ИмяСписка);
			
			Если ПереформированиеПанелиНавигации И НЕ Форма.ТолькоЗначимые Тогда
				ГруппаОтбораЗначимые = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(ОтборСпискаДляИзменения.Элементы, "Отбор по значимым");
				Если ГруппаОтбораЗначимые <> Неопределено Тогда
					ОтборСпискаДляИзменения.Элементы.Удалить(ГруппаОтбораЗначимые);
				КонецЕсли;
			Иначе
				ГруппаОтбораЗначимые = СоздатьГруппуОтбораЗначимые(ОтборСпискаДляИзменения);
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораЗначимые,
				"Ссылка",
				ВидСравненияКомпоновкиДанных.ВСписке,
				СписокЗначимые);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаБизнесРегионы И ПозиционированиеКорректно("БизнесРегионы", Форма) Тогда
		
		Если УстанавливатьОтбор Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		                                                       "БизнесРегион",
		                                                       ВидСравненияКомпоновкиДанных.Равно,
		                                                       Форма.Элементы.БизнесРегионы.ТекущаяСтрока);
		КонецЕсли;
		
		Форма.ТекущееЗначениеФильтра = Форма.Элементы.БизнесРегионы.ТекущаяСтрока;
		
	ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаГруппыДоступа И  ПозиционированиеКорректно("ГруппыДоступаПартнеров", Форма) Тогда
		
		Если УстанавливатьОтбор Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
			                                                       "ГруппаДоступа",
			                                                       ВидСравненияКомпоновкиДанных.Равно,
			                                                       Форма.Элементы.ГруппыДоступаПартнеров.ТекущаяСтрока);
		КонецЕсли;
		
		Форма.ТекущееЗначениеФильтра = Форма.Элементы.ГруппыДоступаПартнеров.ТекущаяСтрока;
		
	ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаМенеджеры И ПозиционированиеКорректно("Менеджеры", Форма) Тогда
		
		Если УстанавливатьОтбор Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		                                                       "ОсновнойМенеджер",
		                                                       ВидСравненияКомпоновкиДанных.Равно,
		                                                       Форма.Элементы.Менеджеры.ТекущаяСтрока);
		КонецЕсли;
		
		Форма.ТекущееЗначениеФильтра = Форма.Элементы.Менеджеры.ТекущаяСтрока;
		
	ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаСвойства Тогда
		
		Если УстанавливатьОтбор Тогда
			
			Если Форма.Элементы.Свойства.ТекущаяСтрока <> Неопределено И ТипЗнч(Форма.Элементы.Свойства.ТекущаяСтрока) = Тип("Число") Тогда 
				ТекущиеДанные = Форма.Свойства.НайтиПоИдентификатору(Форма.Элементы.Свойства.ТекущаяСтрока);
				Если ТекущиеДанные <> Неопределено Тогда
					ЗначениеОтбора =  ТекущиеДанные.Значение;
				Иначе
					Возврат;
				КонецЕсли;
			Иначе
				Возврат
			КонецЕсли;
			
			Если ЗначениеОтбора = НСтр("ru = 'Не указан'") Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
				                                                       ИмяРеквизитаОтбора + ".[" + Форма.ТипФильтра.Наименование + "]",
				                                                       ВидСравненияКомпоновкиДанных.НеЗаполнено)
				
			ИначеЕсли ЗначениеОтбора = НСтр("ru = 'Все'") Тогда
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
				                                                       ИмяРеквизитаОтбора + ".[" + Форма.ТипФильтра.Наименование + "]",
				                                                       ВидСравненияКомпоновкиДанных.Равно,
				                                                       ЗначениеОтбора);
				
			КонецЕсли;
		КонецЕсли;
		
		Форма.ТекущееЗначениеФильтра = ЗначениеОтбора;
		
	ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаКатегории Тогда
		
		Если УстанавливатьОтбор Тогда
			
			Если Форма.Элементы.Категории.ТекущаяСтрока <> Неопределено И ТипЗнч(Форма.Элементы.Категории.ТекущаяСтрока) = Тип("Число") Тогда 
				ТекущиеДанные = Форма.Категории.НайтиПоИдентификатору(Форма.Элементы.Категории.ТекущаяСтрока);
				Если ТекущиеДанные <> Неопределено Тогда
					ЗначениеОтбора =  ТекущиеДанные.Значение;
				Иначе
					Возврат;
				КонецЕсли;
			Иначе
				Возврат
			КонецЕсли;
			
				
			Если ЗначениеОтбора <> НСтр("ru = 'Все'") Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
				                                                       ИмяРеквизитаОтбора + ".[" + ЗначениеОтбора.Наименование + "]",
				                                                       ВидСравненияКомпоновкиДанных.Равно,
				                                                       Истина);
				
			КонецЕсли;
			
			Форма.ТекущееЗначениеФильтра = ЗначениеОтбора;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьГруппуОтбораЗначимые(ОтборДляИзменения) Экспорт

	Возврат ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ОтборДляИзменения.Элементы,"Отбор по значимым",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

КонецФункции

Функция СоздатьГруппуОтбораПоФильтру(Форма) Экспорт

	Возврат ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Форма.Список.Отбор.Элементы, "Отбор по фильтру",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

КонецФункции

Функция ПозиционированиеКорректно(ИмяСписка,Форма) Экспорт

	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
		
	Если ТипЗнч(Форма.Элементы[ИмяСписка].ТекущаяСтрока) <> ТипГруппировка И ЗначениеЗаполнено(Форма.Элементы[ИмяСписка].ТекущаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Процедура ЗаполнитьПанельИнформацииПоДаннымПартнера(Форма, Партнер) Экспорт

	Если Партнер = Неопределено Тогда
		
		Форма.НаименованиеТекущегоПартнера                = НСтр("ru = 'Партнер не выбран'");
		Форма.ТекущийБизнесРегион                         = "";
		Форма.Элементы.ОтчетДосьеПартнера.Доступность     = Ложь;
		Если НЕ Форма.ИспользоватьПартнеровКакКонтрагентов Тогда
			Форма.Элементы.КонтрагентыПартнера.Доступность    = Ложь;
			Форма.КонтрагентыПартнера                         = НСтр("ru = 'Контрагенты'");
		КонецЕсли;
		Форма.Элементы.КонтактныеЛицаПартнера.Доступность = Ложь;
		Форма.КонтактныеЛицаПартнера                      = НСтр("ru = 'Контактные лица'");
		ЗаполнитьДанныеКИПартнера(Неопределено, Форма);
		
	Иначе
		
		ДанныеПартнера = ДанныеПартнераДляПанелиИнформации(Партнер);
		
		Форма.НаименованиеТекущегоПартнера = ДанныеПартнера.Наименование;
		Форма.ТекущийБизнесРегион                         = ?(Форма.ИспользоватьБизнесРегионы,ДанныеПартнера.БизнесРегион," ");
		Форма.Элементы.ОтчетДосьеПартнера.Доступность     = Истина;
		Если НЕ Форма.ИспользоватьПартнеровКакКонтрагентов Тогда
			Форма.Элементы.КонтрагентыПартнера.Доступность = Истина;
			Форма.КонтрагентыПартнера                      = НСтр("ru = 'Контрагенты ('") + Строка(ДанныеПартнера.КоличествоКонтрагентов) + ")";
		КонецЕсли;
		Форма.Элементы.КонтактныеЛицаПартнера.Доступность = Истина;
		Форма.КонтактныеЛицаПартнера                      = НСтр("ru = 'Контактные лица ('") + Строка(ДанныеПартнера.КоличествоКонтактныхЛиц) + ")";
		ЗаполнитьДанныеКИПартнера(ДанныеПартнера,Форма);
		
	КонецЕсли;
	
	Форма.ТекущийАктивныйПартнер = Партнер;

КонецПроцедуры

Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Форма, Настройки) Экспорт
	
	ТипФильтраНастройки                  = Настройки.Получить("ТипФильтра");
	ТекущееЗначениеФильтраНастройки      = Настройки.Получить("ТекущееЗначениеФильтра");
	ИспользоватьФильтрНастройки          = Настройки.Получить("ИспользоватьФильтр");
	ИсторияВыбораСегментовНастройки      = Настройки.Получить("ИсторияВыбораСегментов");
	ТолькоЗначимыеНастройки              = Настройки.Получить("ТолькоЗначимые");

	Если ТипФильтраНастройки = Неопределено  Тогда
		Возврат;
	ИначеЕсли Форма.Элементы.ТипФильтра.СписокВыбора.НайтиПоЗначению(ТипФильтраНастройки) <> Неопределено Тогда
		
		Форма.ТипФильтра = ТипФильтраНастройки;
		
		Если ТипЗнч(ТипФильтраНастройки) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения")Тогда
			Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаСвойства;
			ЗаполнитьДеревоСвойств(Форма);
			Форма.Элементы.Свойства.ТекущаяСтрока = НайтиСтрокуВДанныхФормыДерево(Форма.Свойства, ТекущееЗначениеФильтраНастройки, "Значение", Истина);
		ИначеЕсли Форма.ТипФильтра  = "Категории" Тогда
			Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаКатегории;
			ЗаполнитьДеревоКатегорий(Форма);
			НайденныеСтроки = Форма.Категории.НайтиСтроки(Новый Структура("Значение", ТекущееЗначениеФильтраНастройки));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Форма.Элементы.Категории.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Форма.ТипФильтра  = "БизнесРегионы" Тогда
			Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаБизнесРегионы;
			Форма.Элементы.БизнесРегионы.ТекущаяСтрока = ТекущееЗначениеФильтраНастройки;
		ИначеЕсли Форма.ТипФильтра = "ГруппыДоступа" Тогда
			Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаГруппыДоступа;
			Форма.Элементы.ГруппыДоступаПартнеров.ТекущаяСтрока = ТекущееЗначениеФильтраНастройки;
		ИначеЕсли Форма.ТипФильтра = "Менеджер" Тогда
			Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаМенеджеры;
			Форма.Элементы.Менеджеры.ТекущаяСтрока = ТекущееЗначениеФильтраНастройки;
		КонецЕсли;
		
		Если ИспользоватьФильтрНастройки <> Неопределено Тогда
			Настройки.Удалить("ИспользоватьФильтр");
			Если Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаВыбораИспользуютсяТолькоПартнеры" И Форма.ПоПартнеру Тогда
				Форма.ИспользоватьФильтр = Ложь;
			Иначе
				Форма.ИспользоватьФильтр =  ИспользоватьФильтрНастройки;
			КонецЕсли;
		КонецЕсли;
		
		Если ТолькоЗначимыеНастройки <> Неопределено Тогда
			Форма.ТолькоЗначимые = ТолькоЗначимыеНастройки;
		КонецЕсли;
		
		Форма.НеОтрабатыватьАктивизациюПанелиНавигации = Истина;
		ИзменитьОтборСписок(Форма,Истина,Ложь);
		
	КонецЕсли;
	
	Если ИсторияВыбораСегментовНастройки <> Неопределено Тогда
		Форма.Элементы.Сегмент.СписокВыбора.ЗагрузитьЗначения(ИсторияВыбораСегментовНастройки.ВыгрузитьЗначения());
	КонецЕсли;
	
	Настройки.Удалить("ТипФильтра");
	Если ТекущееЗначениеФильтраНастройки <> Неопределено Тогда
		Настройки.Удалить("ТекущееЗначениеФильтра");
	КонецЕсли;
	
КонецПроцедуры

// Находит первую строку в заданной колонке, с заданным значением в коллекции ДанныеФормыДерево
Функция НайтиСтрокуВДанныхФормыДерево(ГдеИскать, Значение, Колонка, ИскатьВПодчиненных) Экспорт
	
	ЭлементыДерева = ГдеИскать.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева[Колонка] = Значение Тогда
			Возврат ЭлементДерева.ПолучитьИдентификатор();
		ИначеЕсли  ИскатьВПодчиненных Тогда
			НайденныйИдентификаторСтроки =  НайтиСтрокуВДанныхФормыДерево(ЭлементДерева, Значение, Колонка, ИскатьВПодчиненных);
			Если НайденныйИдентификаторСтроки >=0 Тогда
				Возврат НайденныйИдентификаторСтроки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат -1;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Дополняет запрос динамического списка партнера условием по типу отношений сохраняя вышестоящие элементы иерархии
//
// Параметры
//  ТипОтношений - Строка - тип отношений для которого наложено условие
//
// Возвращаемое значение:
//  Строка  - дополнение текста запроса.
//
Функция ДополнениеЗапросаДинамическогоСпискаПоПартнерам(СписокОтборПоТипуПартнера, УстанавливатьОтборПоТипуПартнераКакИЛИ) 
	
	СтрокаОтбора = "";
	СтрокаУсловия = ?(УстанавливатьОтборПоТипуПартнераКакИЛИ," ИЛИ "," И ");
	
	Для каждого ЭлементСписка Из СписокОтборПоТипуПартнера Цикл
		
		СтрокаОтбора = СтрокаОтбора + СтрокаУсловия + "Партнеры." + ЭлементСписка; 
		
	КонецЦикла;
	
	СтрокаОтбора = Прав(СтрокаОтбора,СтрДлина(СтрокаОтбора) - ?(УстанавливатьОтборПоТипуПартнераКакИЛИ, 4, 2));
	
	Возврат "
	|ГДЕ
	|	СправочникПартнеры.Ссылка В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ИерархияПартнеров.Родитель КАК Ссылка
	|		ИЗ
	|			Справочник.Партнеры КАК Партнеры ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
	|				ПО
	|					ИерархияПартнеров.Партнер = Партнеры.Ссылка
	|		ГДЕ
	|			" + СтрокаОтбора + ")";
	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Иерархия партнеров.

Процедура ВыполнитьЗаписьПоПодчиненнымПартнерам(СтрокиДерева,ТекущийЭлементОбработки)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.Ссылка <> ТекущийЭлементОбработки Тогда
			ВыполнитьЗаписьВРегистрПоПартнеру(СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьЗаписьВРегистрПоПартнеру(СтрокаДерева);
	
	НаборЗаписей = РегистрыСведений.ИерархияПартнеров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Партнер.Установить(СтрокаДерева.Ссылка);
	
	РодительСтрокиДерева = СтрокаДерева;
	Пока РодительСтрокиДерева <> Неопределено Цикл
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Партнер 	= СтрокаДерева.Ссылка;
		ЗаписьНабора.Родитель   = РодительСтрокиДерева.Ссылка;
		ЗаписьНабора.Уровень	= РодительСтрокиДерева.Уровень();
		РодительСтрокиДерева 	= РодительСтрокиДерева.Родитель;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	ВыполнитьЗаписьПоПодчиненнымПартнерам(СтрокаДерева.Строки, СтрокаДерева.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с формами.

Функция СформироватьСписокУстановленныхОтборовДинамическийСписокПартнеры(Форма)
	
	Если Форма.Параметры.Отбор.Свойство("Клиент") Тогда
		Форма.СписокОтборПоТипуПартнера.Добавить("Клиент");
	КонецЕсли;
	Если Форма.Параметры.Отбор.Свойство("Поставщик") Тогда
		Форма.СписокОтборПоТипуПартнера.Добавить("Поставщик");
	КонецЕсли;
	Если Форма.Параметры.Отбор.Свойство("Перевозчик") Тогда
		Форма.СписокОтборПоТипуПартнера.Добавить("Перевозчик");
	КонецЕсли;
	Если Форма.Параметры.Отбор.Свойство("Конкурент") Тогда
		Форма.СписокОтборПоТипуПартнера.Добавить("Конкурент");
	КонецЕсли;
	Если Форма.Параметры.Отбор.Свойство("ПрочиеОтношения") Тогда
		Форма.СписокОтборПоТипуПартнера.Добавить("ПрочиеОтношения");
	КонецЕсли;
	Если Форма.Параметры.Отбор.Свойство("ОбслуживаетсяТорговымиПредставителями") Тогда
		Форма.СписокОтборПоТипуПартнера.Добавить("ОбслуживаетсяТорговымиПредставителями");
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры форм элемента справочника партнеры.

Процедура ПартнерФормаЭлементаПриСозданииЧтенииНаСервере(Форма)

	ПартнерФормаЭлементаУправлениеДоступностью(Форма);
	Форма.ТекущийБизнесРегион = Форма.Объект.БизнесРегион;
	ПартнерФормаЭлементаНастроитьПанельНавигации(Форма);

КонецПроцедуры

Процедура ПартнерФормаЭлементаНастроитьПанельНавигации(Форма)

	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИспользоватьДанныеПартнераКлиента", Форма.Объект.Клиент);
	СтруктураНастроек.Вставить("ИспользоватьДанныеПартнераПоставщика", Форма.Объект.Поставщик);
	СтруктураНастроек.Вставить("ИспользоватьДанныеТорговогоПредставителя", Форма.Объект.ОбслуживаетсяТорговымиПредставителями);
	СтруктураНастроек.Вставить("ИспользоватьДанныеПоставщикаИлиКонкурента", Форма.Объект.Поставщик ИЛИ Форма.Объект.Конкурент);
	СтруктураНастроек.Вставить("ИспользоватьДанныеКонтрагентаФизическогоЛица", ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") И 
	                                                                           Форма.Объект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
	
	ОбщегоНазначенияУТ.НастроитьФормуПоПараметрам(Форма, СтруктураНастроек);

КонецПроцедуры

Функция ПервичныйИнтерес(Партнер, ТолькоПартнер = Ложь)

	Интерес = Новый Структура("ИсточникПервичногоИнтереса, Сделка");
	Интерес.Вставить(
		"КаналПервичногоИнтереса",
		ПланыВидовХарактеристик.КаналыРекламныхВоздействий.ПустаяСсылка()
	);

	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсточникиПервичногоИнтереса.КаналПервичногоИнтереса,
		|	ИсточникиПервичногоИнтереса.ИсточникПервичногоИнтереса,
		|	ИсточникиПервичногоИнтереса.Сделка
		|ИЗ
		|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
		|ГДЕ
		|	ИсточникиПервичногоИнтереса.Партнер = &Партнер";
		
	Если ТолькоПартнер Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И ИсточникиПервичногоИнтереса.Сделка = ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)";
	КонецЕсли;	

	ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсточникиПервичногоИнтереса.Сделка.ДатаНачала";
		
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("Партнер", Партнер.Ссылка);

	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Интерес.КаналПервичногоИнтереса		= Выборка.КаналПервичногоИнтереса;
		Интерес.ИсточникПервичногоИнтереса	= Выборка.ИсточникПервичногоИнтереса;
		Интерес.Сделка						= Выборка.Сделка;
	КонецЕсли;

	Возврат Интерес;

КонецФункции

Процедура ЗафиксироватьПервичныйИнтерес(Форма)

	Интерес = ПервичныйИнтерес(Форма.Объект.Ссылка, Истина);
	Если Форма.КаналПервичногоИнтереса <> Интерес.КаналПервичногоИнтереса
	 Или Форма.ИсточникПервичногоИнтереса <> Интерес.ИсточникПервичногоИнтереса Тогда

		УстановитьПривилегированныйРежим(Истина);
		Запись = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
		Запись.Партнер = Форма.Объект.Ссылка;

		Если Не ЗначениеЗаполнено(Форма.КаналПервичногоИнтереса)
		   И Не ЗначениеЗаполнено(Форма.ИсточникПервичногоИнтереса) Тогда
			Запись.Удалить();
		Иначе
			Запись.КаналПервичногоИнтереса    = Форма.КаналПервичногоИнтереса;
			Запись.ИсточникПервичногоИнтереса = Форма.ИсточникПервичногоИнтереса;
			Запись.Записать();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции.

Процедура ЗаполнитьСписокПартнеровИзДерева(СтрокиДерева, СписокПартнеров, Партнер)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		СписокПартнеров.Добавить(СтрокаДерева.Ссылка, СтрокаДерева.Наименование);
		Если СтрокаДерева.Ссылка <> Партнер Тогда
			ЗаполнитьСписокПартнеровИзДерева(СтрокаДерева.Строки, СписокПартнеров,Партнер);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Осуществляет расширенный поиск партнеров
//Параметры:
//          СписокПартнеров - таблица значений, заполняемая результатами поиска,
//Возвращаемое значение:
//          Неопределено если поиск произведен успешно
//          Текст сообщения пользователю, если поиск неудачен
//
Функция НайтиПартнеров(СтрокаПоиска, СписокПартнеров)

	//настроить параметры поиска
	мОбластьПоиска = Новый Массив;
	РазмерПорции = 200;
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска, РазмерПорции);
	мОбластьПоиска.Добавить(Метаданные.Справочники.Партнеры);
	мОбластьПоиска.Добавить(Метаданные.Справочники.Контрагенты);
	мОбластьПоиска.Добавить(Метаданные.Справочники.КонтактныеЛицаПартнеров);
	мОбластьПоиска.Добавить(Метаданные.Справочники.ДоговорыКонтрагентов);
	СписокПоиска.ОбластьПоиска = мОбластьПоиска;

	СписокПоиска.ПерваяЧасть();

	//возврат, если поиск не результативен
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'");
	КонецЕсли;

	Если СписокПоиска.ПолноеКоличество() = 0 Тогда
		Возврат НСтр("ru = 'Ничего не найдено'");
	КонецЕсли;
	
	КоличествоЭлементов = СписокПоиска.ПолноеКоличество();
	
	//сформировать список найденных партнеров
	СписокПартнеров.Очистить();
	НачальнаяПозиция = 0;
	КонечнаяПозиция = ?(КоличествоЭлементов > РазмерПорции, РазмерПорции, КоличествоЭлементов)-1;
	ЕстьСледующаяПорция = Истина;

	//обработать по порциям результаты ППД
	Пока ЕстьСледующаяПорция Цикл
		Для СчетчикЭлементов = 0 По КонечнаяПозиция Цикл
			
			//сформировать элемент результата
			Элемент = СписокПоиска.Получить(СчетчикЭлементов);
			ЭлементСсылка = Элемент.Значение.Ссылка;
			Основание = Элемент.Метаданные.ПредставлениеОбъекта + " """ +
			Элемент.Представление + """ - " + Элемент.Описание;
			Если Элемент.Метаданные = Метаданные.Справочники.Партнеры Тогда
				Партнер = Элемент.Значение;
				Основание = НСтр("ru = 'Найдено в реквизите партнера - '") + Элемент.Описание;
			ИначеЕсли Элемент.Метаданные = Метаданные.Справочники.КонтактныеЛицаПартнеров Тогда
				Партнер = Элемент.Значение.Владелец;
				ШаблонОснования =  НСтр("ru = 'Найдено в реквизите контактного лица партнера ""%1"" - %2'");
				Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОснования, Элемент.Значение, Элемент.Описание); 
			ИначеЕсли Элемент.Метаданные = Метаданные.Справочники.ДоговорыКонтрагентов Тогда
				Партнер = Элемент.Значение.Партнер;
				ШаблонОснования =  НСтр("ru = 'Найдено в договоре партнера ""%1"" - %2'");
				Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОснования, Элемент.Значение, Элемент.Описание);
			ИначеЕсли Элемент.Метаданные = Метаданные.Справочники.Контрагенты Тогда
				Партнер = Элемент.Значение.Партнер;
				Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
					Основание = НСтр("ru = 'Найдено в реквизите партнера - '") + Элемент.Описание;
					ЭлементСсылка = Партнер;
				Иначе
					ШаблонОснования =  НСтр("ru = 'Найдено в контрагенте партнера ""%1"" - %2'");
					Основание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОснования, Элемент.Значение, Элемент.Описание);
				КонецЕсли;
				
			ИначеЕсли Не ЗначениеЗаполнено(Элемент.Значение.Партнер) Тогда
				Продолжить;
				Партнер = Элемент.Значение.Партнер;
			КонецЕсли;
			
			Если НЕ ДобавитьПартнераВСписокНайденныхПолнотекстовымПоиском(СписокПартнеров, Партнер, Основание, ЭлементСсылка) Тогда
				Возврат НСтр("ru = 'Слишком много результатов, уточните запрос.'");
			КонецЕсли;
			
		КонецЦикла;
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоЭлементов - 1);
		Если ЕстьСледующаяПорция Тогда
			КонечнаяПозиция = 
			?(КоличествоЭлементов > НачальнаяПозиция + РазмерПорции, РазмерПорции,
			КоличествоЭлементов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
	КонецЦикла;
	
	Если СписокПартнеров.Количество() = 0 Тогда
		Возврат НСтр("ru = 'Ничего не найдено.'");
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

Функция ДобавитьПартнераВСписокНайденныхПолнотекстовымПоиском(СписокПартнеров, Партнер, Основание, ЭлементСсылка)
	
	//добавить элемент, если партнера еще нет в списке найденных
	НайденнаяСтрока = СписокПартнеров.Найти(Партнер,"Партнер");
	Если НайденнаяСтрока = Неопределено Тогда
		//ограничить количество возвращаемых партнеров
		Если СписокПартнеров.Количество() > 100 Тогда
			Возврат Ложь; 
		Иначе 
			Запись = СписокПартнеров.Добавить();
			Запись.Партнер = Партнер;
			Запись.Основание = Основание;
			Запись.Ссылка = ЭлементСсылка;
		КонецЕсли;
		
	Иначе
		
		Если (ТипЗнч(НайденнаяСтрока.Ссылка) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")
			ИЛИ ТипЗнч(НайденнаяСтрока.Ссылка) = Тип("СправочникСсылка.Контрагенты")
			ИЛИ ТипЗнч(НайденнаяСтрока.Ссылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов"))
			И ТипЗнч(ЭлементСсылка) = Тип("СправочникСсылка.Партнеры") Тогда
		
			НайденнаяСтрока.Партнер = Партнер;
			НайденнаяСтрока.Основание = Основание;
			НайденнаяСтрока.Ссылка = ЭлементСсылка;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ДополнитьСписокВыбораТипФильтраСписокПартнеров(Форма, СписокВыбора)
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	Если Форма.СписокОтборПоТипуПартнера.Количество() > 0 Тогда
		ТекстОтбораДопРеквизиты = "";
		
		Для каждого ЭлементСписка Из Форма.СписокОтборПоТипуПартнера Цикл
		
			ТекстОтбораДопРеквизиты = ТекстОтбораДопРеквизиты + "
			| ИЛИ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_" 
			+ ИмяНабораСведений(ЭлементСписка.Значение) +")";
		
		КонецЦикла;
		
	Иначе
		
		ТекстОтбораДопРеквизиты = "
		| ИЛИ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Конкуренты)
		| ИЛИ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Клиенты)
		| ИЛИ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Поставщики)
		| ИЛИ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Прочие)";
		
	КонецЕсли;
	
	ТекстОтбораСвойства = СтрЗаменить(ТекстОтбораДопРеквизиты,"ДополнительныеРеквизиты","ДополнительныеСведения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство,
	|	Истина КАК ЭтоРеквизит
	|ПОМЕСТИТЬ ДопРеквизитыИСведения
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие) " + ТекстОтбораДопРеквизиты + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство,
	|	Ложь КАК ЭтоРеквизит
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие) " + ТекстОтбораСвойства + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК ДопРеквизитСведение,
	|	ДопРеквизитыИСведения.ЭтоРеквизит,
	|	ДополнительныеРеквизитыИСведения.Представление,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения
	|ИЗ
	|	ДопРеквизитыИСведения КАК ДопРеквизитыИСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО ДопРеквизитыИСведения.Свойство = ДополнительныеРеквизитыИСведения.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипЗначения = ОписаниеТиповБулево Тогда
			НоваяСтрока = Форма.ТаблицаДопРеквизитовСвойствТипаБулево.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		Иначе
			СписокВыбора.Добавить(Выборка.ДопРеквизитСведение, НРег(Лев(Выборка.Представление,1)) + Прав(Выборка.Представление,СтрДлина(Выборка.Представление) - 1));
		КонецЕсли;
		
	КонецЦикла;
	
	Если Форма.ТаблицаДопРеквизитовСвойствТипаБулево.Количество() > 0 Тогда
		
		СписокВыбора.Добавить("Категории", НСтр("ru = 'категориям'"));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяНабораСведений(ИмяОтбора)
	
	Если ИмяОтбора = "Клиент" Тогда
		Возврат "Клиенты";
	ИначеЕсли ИмяОтбора = "Поставщик" Тогда
		Возврат "Поставщики";
	ИначеЕсли ИмяОтбора = "Конкурент" Тогда
		Возврат "Конкуренты";
	Иначе
		Возврат "Прочие";
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции форм списка и выбора справочника партнеры.

Процедура ЗаполнитьДеревоКатегорий(Форма)
	
	Форма.Категории.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвойстваТипаБулево.ДопРеквизитСведение КАК Свойство,
	|	СвойстваТипаБулево.ЭтоРеквизит
	|ПОМЕСТИТЬ СвойстваТипаБулево
	|ИЗ
	|	&СвойстваТипаБулево КАК СвойстваТипаБулево
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПартнерыДополнительныеРеквизиты.Свойство КАК Значение,
	|	ПРЕДСТАВЛЕНИЕ(ПартнерыДополнительныеРеквизиты.Свойство) КАК Представление
	|ИЗ
	|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
	|ГДЕ
	|	ПартнерыДополнительныеРеквизиты.Свойство В
	|			(ВЫБРАТЬ
	|				СвойстваТипаБулево.Свойство
	|			ИЗ
	|				СвойстваТипаБулево КАК СвойстваТипаБулево
	|			ГДЕ
	|				СвойстваТипаБулево.ЭтоРеквизит)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Свойство,
	|	ПРЕДСТАВЛЕНИЕ(ДополнительныеСведения.Свойство)
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство В
	|			(ВЫБРАТЬ
	|				СвойстваТипаБулево.Свойство
	|			ИЗ
	|				СвойстваТипаБулево КАК СвойстваТипаБулево
	|			ГДЕ
	|				НЕ СвойстваТипаБулево.ЭтоРеквизит)";
	
	Запрос.УстановитьПараметр("СвойстваТипаБулево", Форма.ТаблицаДопРеквизитовСвойствТипаБулево.Выгрузить());

	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = Форма.Категории.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		СтрокаТаблицы.НомерКартинки = 0;
		
	КонецЦикла;
	
	ДобавитьСтрокуВПанельНавигации(Форма.Категории,Нстр("ru = 'Все'"),1);
	
	Форма.ТекущееСвойствоПанелиНавигации = Форма.ТипФильтра;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоСвойств(Форма)
	
	Форма.Свойства.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	
	Если Форма.ТипФильтра.ЭтоДополнительноеСведение Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДополнительныеСведения.Значение КАК Значение,
		|	ПРЕДСТАВЛЕНИЕ(ДополнительныеСведения.Значение) КАК Представление
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &Свойство
		|	И ДополнительныеСведения.Объект ССЫЛКА Справочник.Партнеры
		|
		|УПОРЯДОЧИТЬ ПО
		|	Значение
		|ИТОГИ ПО
		|	Значение ИЕРАРХИЯ";
		
	Иначе
	
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПартнерыДополнительныеРеквизиты.Значение КАК Значение,
		|	ПРЕДСТАВЛЕНИЕ(ПартнерыДополнительныеРеквизиты.Значение) КАК Представление
		|ИЗ
		|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		|ГДЕ
		|	ПартнерыДополнительныеРеквизиты.Свойство = &Свойство
		|
		|УПОРЯДОЧИТЬ ПО
		|	Значение
		|ИТОГИ ПО
		|	Значение ИЕРАРХИЯ";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Свойство",Форма.ТипФильтра);
	
	Результат = Запрос.Выполнить();
	Дерево = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	
	ДобавитьСтрокуВПанельНавигации(Форма.Свойства,Нстр("ru = 'Не указан'"));
	
	СтрокиПервыйУровень = Форма.Свойства.ПолучитьЭлементы();
	
	Для Каждого Строка ИЗ Дерево.Строки Цикл
		СтрокаСвойства = СтрокиПервыйУровень.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСвойства, Строка);
		СтрокаСвойства.НомерКартинки = 1;
		ДобавитьСтрокиВДеревоНавигации(Строка, СтрокаСвойства,Истина);
	КонецЦикла;
	
	ДобавитьСтрокуВПанельНавигации(Форма.Свойства,Нстр("ru = 'Все'"),2);

	Форма.ТекущееСвойствоПанелиНавигации = Форма.ТипФильтра;
	
КонецПроцедуры

Функция ДобавитьСтрокуВПанельНавигации(ДанныеФормыКоллекция, ИмяСтроки, НомерКартинки = 0)
	
	Если ТипЗнч(ДанныеФормыКоллекция) = Тип("ДанныеФормыДерево") Тогда
		НоваяСтрока = ДанныеФормыКоллекция.ПолучитьЭлементы().Добавить();
	Иначе
		НоваяСтрока = ДанныеФормыКоллекция.Добавить();
	КонецЕсли;
	
		НоваяСтрока.Значение = ИмяСтроки;
		НоваяСтрока.Представление = ИмяСтроки;
		НоваяСтрока.НомерКартинки = НомерКартинки;
	
	Возврат НоваяСтрока;
	
КонецФункции

Процедура ДобавитьСтрокиВДеревоНавигации(РодительскаяСтрока, СтрокаРодитель,ВыполнятьПроверку = Ложь)
	
	Для Каждого Строка ИЗ РодительскаяСтрока.Строки Цикл
		
		Если Строка.Значение = РодительскаяСтрока.Значение Или Строка.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.НомерКартинки = 1;
		
		ДобавитьСтрокиВДеревоНавигации(Строка, НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СписокЗначимыхЗначенийПанелиНавигации(ИмяСписка)
	
	Если ИмяСписка = "БизнесРегионы" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Партнеры.БизнесРегион КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры";
		
	ИначеЕсли ИмяСписка = "ГруппыДоступаПартнеров" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Партнеры.ГруппаДоступа КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры";
		
	ИначеЕсли ИмяСписка = "Менеджеры" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Партнеры.ОсновнойМенеджер КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции
