////////////////////////////////////////////////////////////////////////////////
// Подсистема "Варианты отчетов" (сервер)
// 
// Выполняется на сервере.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирует список разделов, в которых размещены команды вызова панели отчетов.
//
// Параметры:
//   Нет
//
// Возвращаемое значение: 
//   Результат (ТаблицаЗначений)
//       |- Ссылка        (СправочникСсылка.ИдентификаторыОбъектовМетаданных)
//       |- Метаданные    (ОбъектМетаданных)
//       |- Имя           (Строка)
//       |- Представление (Строка)
//
Функция ИспользуемыеРазделы() Экспорт
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Ссылка",        Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	Результат.Колонки.Добавить("Метаданные",    Новый ОписаниеТипов("ОбъектМетаданных"));
	Результат.Колонки.Добавить("Имя",           ОписаниеТиповСтрока());
	Результат.Колонки.Добавить("Представление", ОписаниеТиповСтрока());
	
	РазделыМетаданные = Новый Массив;
	
	ВариантыОтчетовПереопределяемый.ОпределитьРазделыСВариантамиОтчетов(РазделыМетаданные);
	
	Для Каждого РазделМетаданные Из РазделыМетаданные Цикл
		Строка = Результат.Добавить();
		Строка.Ссылка        = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(РазделМетаданные);
		Строка.Метаданные    = РазделМетаданные;
		Строка.Имя           = РазделМетаданные.Имя;
		Строка.Представление = РазделМетаданные.Представление();
	КонецЦикла;
	
	Возврат Результат;
КонецФункции // ИспользуемыеРазделы

// Формирует дерево настроек и размещения предопределенных вариантов отчетов
//   конфигурации, подключенных к подсистеме.
//
// Параметры:
//   Нет
//
// Возвращаемое значение: 
//   ДеревоВариантов (ДеревоЗначений)
//   ---- Реквизиты только для чтения: ----
//       |- Отчет               (*) Полное имя или ссылка на отчет
//       |- Метаданные          (ОбъектМетаданных) Метаданные отчета
//       |- КлючВарианта        (Строка) Имя варианта отчета
//       |- ОписаниеПолучено    (Булево) 
//       |- СистемнаяИнформация (Структура) 
//   ---- Реквизиты для изменения: ----
//       |- Включен              (Булево) Если Ложь, то вариант отчета не регистрируется в подсистеме.
//       |- ВидимостьПоУмолчанию (Булево) Если Ложь, то вариант отчета по умолчанию скрыт в панели отчетов.
//       |- Наименование         (Строка) Наименование варианта отчета.
//       |- Описание             (Строка) Информация о варианте отчета.
//       |- Размещение           (Соответствие) Настройки размещения варианта отчета в разделах.
//           |- Ключ     (ОбъектМетаданных) Подсистема, в которой размещается отчет или вариант отчета
//           |- Значение (Строка)           Настройки размещения в подсистеме.
//               |- ""        - Вывод отчета в своей группе обычным шрифтом.
//               |- "Важный"  - Вывод отчета в своей группе жирным шрифтом.
//               |- "СмТакже" - Вывод отчета в группе "См. также".
//
Функция ДеревоНастроекВариантовОтчетовКонфигурации() Экспорт
	
	РеквизитыСправочника = Метаданные.Справочники.ВариантыОтчетов.Реквизиты;
	
	ДеревоВариантов = Новый ДеревоЗначений;
	ДеревоВариантов.Колонки.Добавить("Отчет",                РеквизитыСправочника.Отчет.Тип);
	ДеревоВариантов.Колонки.Добавить("Метаданные",           Новый ОписаниеТипов("ОбъектМетаданных"));
	ДеревоВариантов.Колонки.Добавить("КлючВарианта",         РеквизитыСправочника.КлючВарианта.Тип);
	ДеревоВариантов.Колонки.Добавить("ОписаниеПолучено",     Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("Включен",              Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("ВидимостьПоУмолчанию", Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("Наименование",         ОписаниеТиповСтрока());
	ДеревоВариантов.Колонки.Добавить("Описание",             ОписаниеТиповСтрока());
	ДеревоВариантов.Колонки.Добавить("Размещение",           Новый ОписаниеТипов("Соответствие"));
	ДеревоВариантов.Колонки.Добавить("СистемнаяИнформация",  Новый ОписаниеТипов("Структура"));
	ДеревоВариантов.Колонки.Добавить("ЭтоВариант",           Новый ОписаниеТипов("Булево"));
	
	ПодсистемыОтчетов = РазмещениеОтчетовВПодсистемах();
	ПодключеныВсеОтчеты = ПодключеныВсеОтчеты();
	Для Каждого ОтчетМетаданные Из Метаданные.Отчеты Цикл
		Если НЕ ПодключеныВсеОтчеты
			И (ОтчетМетаданные.ХранилищеВариантов = Неопределено
			ИЛИ ОтчетМетаданные.ХранилищеВариантов.Имя <> "ХранилищеВариантовОтчетов") Тогда
			Продолжить;
		КонецЕсли;
		
		// Настройки отчета
		СтрокаОтчет = ДеревоВариантов.Строки.Добавить();
		СтрокаОтчет.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОтчетМетаданные);
		СтрокаОтчет.Метаданные = ОтчетМетаданные;
		СтрокаОтчет.Включен = Истина;
		СтрокаОтчет.ВидимостьПоУмолчанию = Истина;
		СтрокаОтчет.Описание = ОтчетМетаданные.Пояснение;
		СтрокаОтчет.Наименование = ОтчетМетаданные.Представление();
		СтрокаОтчет.СистемнаяИнформация = Новый Структура;
		СтрокаОтчет.СистемнаяИнформация.Вставить("ПостроенНаСКД", ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных <> Неопределено);
		СтрокаОтчет.ОписаниеПолучено = Истина;
		СтрокаОтчет.ЭтоВариант = Ложь;
		
		// Подсистемы отчета
		Найденные = ПодсистемыОтчетов.НайтиСтроки(Новый Структура("ОтчетМетаданные", ОтчетМетаданные));
		Для Каждого СтрокаПодсистема Из Найденные Цикл
			СтрокаОтчет.Размещение.Вставить(СтрокаПодсистема.ПодсистемаМетаданные, "");
		КонецЦикла;
		
		// Варианты отчета
		Если СтрокаОтчет.СистемнаяИнформация.ПостроенНаСКД Тогда
			ОтчетМенеджер = Отчеты[ОтчетМетаданные.Имя];
			ИмяСхемыКД = ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных.Имя;
			СхемаКД = ОтчетМенеджер.ПолучитьМакет(ИмяСхемыКД);
			Для Каждого ВариантНастроекКД Из СхемаКД.ВариантыНастроек Цикл
				Вариант = СтрокаОтчет.Строки.Добавить();
				Вариант.Включен      = Истина;
				Вариант.Отчет        = СтрокаОтчет.Отчет;
				Вариант.КлючВарианта = ВариантНастроекКД.Имя;
				Вариант.Наименование = ВариантНастроекКД.Представление;
				Вариант.Размещение   = СтрокаОтчет.Размещение;
				Вариант.ЭтоВариант   = Истина;
			КонецЦикла;
		Иначе
			Вариант = СтрокаОтчет.Строки.Добавить();
			Вариант.Включен      = Истина;
			Вариант.Отчет        = СтрокаОтчет.Отчет;
			Вариант.КлючВарианта = "";
			Вариант.Наименование = СтрокаОтчет.Наименование;
			Вариант.Размещение   = СтрокаОтчет.Размещение;
			Вариант.ЭтоВариант   = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов(ДеревоВариантов);
	
	Возврат ДеревоВариантов;
КонецФункции // ДеревоНастроекВариантовОтчетовКонфигурации

// Получает ссылку варианта отчета по набору ключевых реквизитов.
//
// Параметры:
//   Отчет        (Соответствует реквизиту справочника) Полное имя или ссылка отчета.
//   КлючВарианта (Соответствует реквизиту справочника) Имя варианта отчета.
//
// Возвращаемое значение: 
//   Результат (СправочникСсылка.ВариантыОтчетов, Неопределено)
//
Функция ПолучитьСсылку(Отчет, КлючВарианта) Экспорт
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта";
	Запрос.УстановитьПараметр("Отчет", Отчет);
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // ПолучитьСсылку

// Формирует массив отчетов, доступных текущему пользователю.
//
// Возвращаемое значение:
//   Результат (Массив) из (*) см. тип реквизита Отчет справочника ВариантыОтчетов.
//       Ссылки отчетов, доступных текущему пользователю.
//
// Описание:
//   Данный массив следует использовать во всех запросах к таблице
//   справочника "ВариантыОтчетов" как отбор по реквизиту "Отчет",
//   кроме случаев выборки вариантов из внешних отчетов.
//
Функция ОтчетыТекущегоПользователя() Экспорт
	Результат = ВариантыОтчетовПовтИсп.ОтчетыКонфигурацииДоступныеТекущемуПользователю();
	СтандартныеПодсистемыПереопределяемый.ДобавитьДополнительныеОтчетыДоступныеТекущемуПользователю(Результат);
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Поддержка переопределяемых модулей

// Формирует описание настроек отчета.
//
// Параметры:
//   ДеревоВариантов (ДеревоЗначений) Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации()
//   ОтчетЗначениеИлиМетаданные (...) Метаданные или ссылка отчета.
//       |- (ОбъектМетаданных)
//       |- (СправочникСсылка.ИдентификаторыОбъектовМетаданных)
//
// Возвращаемое значение: 
//   Отчет (СтрокаДереваЗначений)
//       см. "Реквизиты для изменения" функции ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации()
//
Функция ОписаниеОтчета(ДеревоВариантов, ОтчетЗначениеИлиМетаданные) Экспорт
	
	ЭтоМетаданные = (ТипЗнч(ОтчетЗначениеИлиМетаданные) = Тип("ОбъектМетаданных"));
	Если ЭтоМетаданные Тогда
		СтрокаОтчет = ДеревоВариантов.Строки.Найти(ОтчетЗначениеИлиМетаданные, "Метаданные", Ложь);
	Иначе
		СтрокаОтчет = ДеревоВариантов.Строки.Найти(ОтчетЗначениеИлиМетаданные, "Отчет", Ложь);
	КонецЕсли;
	
	Если СтрокаОтчет = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка получения описания отчета ""%1"",
			|он не подключен к подсистеме ""%2""'"),
			СтрокаОтчет.Метаданные.Имя,
			ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы()
		);
	КонецЕсли;
	
	Возврат СтрокаОтчет;
	
КонецФункции // ОписаниеОтчета

// Формирует описание настроек варианта отчета.
//
// Параметры:
//   ДеревоВариантов (ДеревоЗначений) Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации()
//   ОтчетСтрокаДереваИлиЗначениеИлиМетаданные (...) Описание настроек, метаданные или ссылка отчета.
//       |- (СтрокаДерева)
//       |- (ОбъектМетаданных)
//       |- (СправочникСсылка.ИдентификаторыОбъектовМетаданных)
//   КлючВарианта (Строка) Имя варианта отчета как оно задано в схеме компоновки данных.
//
// Возвращаемое значение: 
//   Вариант (СтрокаДереваЗначений)
//       см. "Реквизиты для изменения" функции ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации()
//
Функция ОписаниеВарианта(ДеревоВариантов, ОтчетСтрокаДереваИлиЗначениеИлиМетаданные, КлючВарианта) Экспорт
	
	Если ТипЗнч(ОтчетСтрокаДереваИлиЗначениеИлиМетаданные) <> Тип("СтрокаДереваЗначений") Тогда
		СтрокаОтчет = ОписаниеОтчета(ДеревоВариантов, ОтчетСтрокаДереваИлиЗначениеИлиМетаданные);
	Иначе
		СтрокаОтчет = ОтчетСтрокаДереваИлиЗначениеИлиМетаданные;
	КонецЕсли;
	
	СтрокаВариант = СтрокаОтчет.Строки.Найти(КлючВарианта, "КлючВарианта", Ложь);
	
	Если СтрокаВариант = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка получения описания варианта ""%1"" отчета ""%2"",
			|он не подключен к подсистеме ""%3""'"),
			КлючВарианта,
			СтрокаОтчет.Метаданные.Имя,
			ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы()
		);
	КонецЕсли;
	
	ЗаполнитьОписаниеСтрокиВарианта(СтрокаВариант, СтрокаОтчет);
	
	Возврат СтрокаВариант;
	
КонецФункции // ОписаниеВарианта

////////////////////////////////////////////////////////////////////////////////
// Для вызова из обработчиков обновления на конкретную версию

// Восстанавливает настройки всех вариантов отчета.
//
// Параметры:
//   Кэш (Неопределено, Структура) Содержит кэш параметров, используемых в процедуре. Заполняется внутри процедуры.
//   ОтчетЗначениеИлиМетаданные (...)
//       |- (ОбъектМетаданных) Метаданные отчета.
//       |- (СправочникСсылка.ИдентификаторыОбъектовМетаданных)
//
Процедура ВосстановитьИсходныеНастройкиОтчета(Кэш, ОтчетЗначениеИлиМетаданные) Экспорт
	
	Если ТипЗнч(Кэш) <> Тип("Структура") Тогда
		Кэш = Новый Структура;
	КонецЕсли;
	
	Если НЕ Кэш.Свойство("ДеревоВариантов") Тогда
		Кэш.Вставить("ДеревоВариантов", ДеревоНастроекВариантовОтчетовКонфигурации());
	КонецЕсли;
	
	СтрокаОтчет = ОписаниеОтчета(Кэш.ДеревоВариантов, ОтчетЗначениеИлиМетаданные);
	Для Каждого СтрокаВариант Из СтрокаОтчет.Строки Цикл
		ВосстановитьИсходныеНастройкиВарианта(Кэш, СтрокаОтчет, СтрокаВариант.КлючВарианта);
	КонецЦикла;
	
КонецПроцедуры // ВосстановитьНастройкиОтчета

// Восстанавливает настройки варианта отчета.
//
// Параметры:
//   Кэш (Неопределено, Структура) Содержит кэш параметров, используемых в процедуре. Заполняется внутри процедуры.
//   ОтчетСтрокаДереваИлиЗначениеИлиМетаданные (...)
//       |- (ОбъектМетаданных) Метаданные отчета.
//       |- (СтрокаДерева)
//       |- (СправочникСсылка.ИдентификаторыОбъектовМетаданных)
//   КлючВарианта (Строка) Имя варианта отчета как оно задано в схеме компоновки данных.
//
Процедура ВосстановитьИсходныеНастройкиВарианта(Кэш, ОтчетСтрокаДереваИлиЗначениеИлиМетаданные, КлючВарианта) Экспорт
	
	Если ТипЗнч(Кэш) <> Тип("Структура") Тогда
		Кэш = Новый Структура;
	КонецЕсли;
	
	Если НЕ Кэш.Свойство("ДеревоВариантов") Тогда
		Кэш.Вставить("ДеревоВариантов", ДеревоНастроекВариантовОтчетовКонфигурации());
	КонецЕсли;
	
	НастройкиВарианта = ОписаниеВарианта(Кэш.ДеревоВариантов, ОтчетСтрокаДереваИлиЗначениеИлиМетаданные, КлючВарианта);
	
	ВариантСсылка = ПолучитьСсылку(НастройкиВарианта.Отчет, КлючВарианта);
	Если ВариантСсылка = Неопределено Тогда
		// Вариант не зарегистрирован, настройки будут установлены при его регистрации
		Возврат;
	КонецЕсли;
	
	ВариантОбъект = ВариантСсылка.ПолучитьОбъект();
	ВариантОбъект.Наименование         = НастройкиВарианта.Наименование;
	ВариантОбъект.Отчет                = НастройкиВарианта.Отчет;
	ВариантОбъект.ТипОтчета            = Перечисления.ТипыОтчетов.Внутренний;
	ВариантОбъект.КлючВарианта         = НастройкиВарианта.КлючВарианта;
	ВариантОбъект.Пользовательский     = Ложь;
	ВариантОбъект.Описание             = НастройкиВарианта.Описание;
	ВариантОбъект.ВидимостьПоУмолчанию = НастройкиВарианта.ВидимостьПоУмолчанию;
	
	ВариантОбъект.Размещение.Очистить();
	ВосстановитьРазмещениеПредопределенногоВариантаОтчета(ВариантОбъект, НастройкиВарианта);
	
	ВариантОбъект.Записать();
	
КонецПроцедуры // ВосстановитьНастройкиВарианта

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Обновляет варианты дополнительного отчета при его записи.
//
// Параметры:
//   ТекущийОбъект (*) См. Источник подписки ОбработкаВариантовДополнительногоОтчета.
//   Отказ (Булево)
//
Процедура ОбработкаВариантовДополнительногоОтчета(ТекущийОбъект, Отказ, ВнешнийОбъект) Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ВариантыОтчетов) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недостаточно прав доступа для записи вариантов дополнительного отчета ""%1"".'"),
			ТекущийОбъект.Наименование
		);
		ОшибкаПоВарианту(ТекущийОбъект.Ссылка, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПометкаУдаления = ТекущийОбъект.ПометкаУдаления;
	Если НЕ ТекущийОбъект.ИспользуетХранилищеВариантов ИЛИ НЕ ТекущийОбъект.ДополнительныеСвойства.ПубликацияИспользуется Тогда
		ПометкаУдаления = Истина;
	КонецЕсли;
	
	ПредопределенныеВарианты = Новый СписокЗначений;
	Если ТекущийОбъект.ИспользуетХранилищеВариантов Тогда
		ОтчетМетаданные = ВнешнийОбъект.Метаданные();
		СхемаКДМетаданные = ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных;
		Если СхемаКДМетаданные <> Неопределено Тогда
			СхемаКД = ВнешнийОбъект.ПолучитьМакет(СхемаКДМетаданные.Имя);
			Для Каждого ВариантНастроекКД Из СхемаКД.ВариантыНастроек Цикл
				ПредопределенныеВарианты.Добавить(ВариантНастроекКД.Имя, ВариантНастроекКД.Представление);
			КонецЦикла;
		Иначе
			ПредопределенныеВарианты.Добавить("", ОтчетМетаданные.Представление());
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.Ссылка,
	|	Таблица.КлючВарианта,
	|	Таблица.Пользовательский,
	|	Таблица.ПометкаУдаления,
	|	Таблица.Наименование
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК Таблица
	|ГДЕ
	|	Таблица.Отчет = &Отчет";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчет",           ТекущийОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
	Запрос.Текст = ТекстЗапроса;
	
	// Установить пометки удаления существующих
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПометкаУдаленияВарианта = ПометкаУдаления;
		ЭлементСписка = ПредопределенныеВарианты.НайтиПоЗначению(Выборка.КлючВарианта);
		Если НЕ ПометкаУдаленияВарианта И НЕ Выборка.Пользовательский И ЭлементСписка = Неопределено Тогда
			// Предопределенный вариант, который не найден в списке предопределенных для данного отчета
			ПометкаУдаленияВарианта = Истина;
		КонецЕсли;
		
		Если Выборка.ПометкаУдаления <> ПометкаУдаленияВарианта Тогда
			ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
			ВариантОбъект.УстановитьПометкуУдаления(ПометкаУдаленияВарианта);
		КонецЕсли;
		
		Если ЭлементСписка <> Неопределено Тогда
			ПредопределенныеВарианты.Удалить(ЭлементСписка);
			Если Выборка.Наименование <> ЭлементСписка.Представление Тогда
				ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ВариантОбъект.Наименование = ЭлементСписка.Представление;
				ВариантОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПометкаУдаления Тогда
		// Зарегистрировать новые
		Для Каждого ЭлементСписка Из ПредопределенныеВарианты Цикл
			ВариантОбъект = Справочники.ВариантыОтчетов.СоздатьЭлемент();
			ВариантОбъект.Отчет                = ТекущийОбъект.Ссылка;
			ВариантОбъект.ТипОтчета            = Перечисления.ТипыОтчетов.Дополнительный;
			ВариантОбъект.КлючВарианта         = ЭлементСписка.Значение;
			ВариантОбъект.Наименование         = ЭлементСписка.Представление;
			ВариантОбъект.Пользовательский     = Ложь;
			ВариантОбъект.ВидимостьПоУмолчанию = Истина;
			ВариантОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВариантовДополнительногоОтчета

// Формирует отчет с указанными настройками, используется в фоновых заданиях.
//
Процедура СформироватьОтчет(ПараметрыФормированияОтчета, АдресХранилища) Экспорт
	
	ОтчетСсылка = ПараметрыФормированияОтчета.ОтчетСсылка;
	Если ТипЗнч(ОтчетСсылка) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		ОтчетОбъект = Отчеты[ОтчетСсылка.Имя].Создать();
	Иначе
		ОтчетОбъект = Неопределено;
		СтандартныеПодсистемыПереопределяемый.ПолучитьОбъектОтчета(ОтчетСсылка, ОтчетОбъект);
	КонецЕсли;
	
	Если ОтчетОбъект = Неопределено Тогда
		ОшибкаПоВарианту(Неопределено, НСтр("ru = 'Не удалось получить объект отчета ""%1""'"), ОтчетСсылка);
		Возврат;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Расшифровка = Неопределено;
	
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(ПараметрыФормированияОтчета.ФиксированныеНастройки);
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыФормированияОтчета.Настройки);
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПараметрыФормированияОтчета.ПользовательскиеНастройки);
	
	ОтчетОбъект.СкомпоноватьРезультат(ТабличныйДокумент, Расшифровка);
	
	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("ОтчетТабличныйДокумент", ТабличныйДокумент);
	РезультатФормирования.Вставить("ОтчетРасшифровка", Расшифровка);
	РезультатФормирования.Вставить("ВариантМодифицирован", Ложь);
	РезультатФормирования.Вставить("ПользовательскиеНастройкиМодифицированы", Ложь);
	
	ДопСвойства = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	Если ДопСвойства.Свойство("ВариантМодифицирован") И ДопСвойства.ВариантМодифицирован = Истина Тогда
		ДопСвойства.Удалить("ВариантМодифицирован");
		РезультатФормирования.ВариантМодифицирован = Истина;
		РезультатФормирования.Вставить("НастройкиКД", ОтчетОбъект.КомпоновщикНастроек.Настройки);
	КонецЕсли;
	Если РезультатФормирования.ВариантМодифицирован
		ИЛИ (ДопСвойства.Свойство("ПользовательскиеНастройкиМодифицированы") И ДопСвойства.ПользовательскиеНастройкиМодифицированы = Истина) Тогда
		ДопСвойства.Удалить("ПользовательскиеНастройкиМодифицированы");
		РезультатФормирования.ПользовательскиеНастройкиМодифицированы = Истина;
		РезультатФормирования.Вставить("ПользовательскиеНастройкиКД", ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатФормирования, АдресХранилища);
	
КонецПроцедуры

// Получает варианты переданного отчета и их представления
//
// Параметры:
//  ОтчетМетаданные                - Объект метаданных - отчет, для которого получаются варианты отчета.
//  ПользовательИнформационнойБазы - Строка - имя пользователя информационной базы.
//  СведенияОВариантахОтчетов      - ТаблицаЗначений - таблица, в которую сохраняется информация о варианте отчета.
//          |-КлючОбъекта          - Строка - ключ отчета вида "Отчет.НазваниеОтчета".
//          |-КлючВарианта         - Строка - ключ варианта отчета.
//          |-Представление        - Строка - представление варианта отчета.
//          |-СтандартнаяОбработка - Булево - если Истина - вариант отчета сохранен в стандартном хранилище.
//  СтандартнаяОбработка           - Булево - если Истина - вариант отчета сохранен в стандартном хранилище.
//
Процедура ПользовательскиеВариантыОтчетов(ОтчетМетаданные, ПользовательИнформационнойБазы, ТаблицаВариантовОтчетов, СтандартнаяОбработка) Экспорт
	
	КлючОтчета = "Отчет" + "." + ОтчетМетаданные.Имя;
	ВсеВариантыОтчета = ХранилищаНастроек.ХранилищеВариантовОтчетов.ПолучитьСписок(КлючОтчета, ПользовательИнформационнойБазы);
	ВариантыОтчета = Новый СписокЗначений;
	
	Для Каждого ВариантОтчета Из ВсеВариантыОтчета Цикл
		
		ЭлементСправочника = Справочники.ВариантыОтчетов.НайтиПоНаименованию(ВариантОтчета.Представление);
		
		Если ЭлементСправочника <> Неопределено
			И ЭлементСправочника.ТолькоДляАвтора Тогда
			
			СтрокаВариантовОтчетов = ТаблицаВариантовОтчетов.Добавить();
			СтрокаВариантовОтчетов.КлючОбъекта = "Отчет." + ОтчетМетаданные.Имя;
			СтрокаВариантовОтчетов.КлючВарианта = ВариантОтчета.Значение;
			СтрокаВариантовОтчетов.Представление = ВариантОтчета.Представление;
			СтрокаВариантовОтчетов.СтандартнаяОбработка = Ложь;
			
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ЭлементСправочника <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет переданный вариант отчета из хранилища вариантов отчетов
//
// Параметры:
//  СведенияОВариантахОтчетов      - ТаблицаЗначений - таблица, в которой сохранена информация о варианте отчета.
//          |-КлючОбъекта          - Строка - ключ отчета вида "Отчет.НазваниеОтчета".
//          |-КлючВарианта         - Строка - ключ варианта отчета.
//          |-Представление        - Строка - представление варианта отчета.
//          |-СтандартнаяОбработка - Булево - если Истина - вариант отчета сохранен в стандартном хранилище.
//  ПользовательИнформационнойБазы - Строка - имя пользователя информационной базы у которого очищается вариант отчета
//  СтандартнаяОбработка           - Булево - если Истина - вариант отчета сохранен в стандартном хранилище.
//
Процедура УдалитьПользовательскийВариантОтчета(СведенияОВариантеОтчета, ПользовательИнформационнойБазы, СтандартнаяОбработка) Экспорт
	
	Если СведенияОВариантеОтчета.СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ХранилищаНастроек.ХранилищеВариантовОтчетов.Удалить(СведенияОВариантеОтчета.КлючОбъекта,
		СведенияОВариантеОтчета.КлючВарианта, ПользовательИнформационнойБазы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Добавляет обработчики обновления подсистемы "Варианты отчетов".
//
// Параметры:
//   Обработчики (ТаблицаЗначений) - см. описание функции НоваяТаблицаОбработчиковОбновления
//   общего модуля ОбновлениеИнформационнойБазы.
//
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ВариантыОтчетов.Обновить";
	
КонецПроцедуры

// Актуализирует данные справочника "Варианты отчетов".
//
Процедура Обновить() Экспорт
	
	////////////////////////////////////////////////////////////////////////////////
	// План обновления:
	
	Кэш = Новый Структура;
	Кэш.Вставить("ИспользуемыеРазделы", ИспользуемыеРазделы());
	Кэш.Вставить("ПодключеныВсеОтчеты", ПодключеныВсеОтчеты());
	Кэш.Вставить("ДеревоВариантов", ДеревоНастроекВариантовОтчетовКонфигурации());
	
	////////////////////////////////////////////////////////////////////////////////
	// 1. Перейти к редакции 2.1, если переход требуется и еще не выполнялся.
	Если НеобходимПереходКРедакции21() Тогда
		ПерейтиКРедакции21(Кэш);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	// 2. Перенести варианты отчетов из стандартного хранилища.
	//    Выполняется только для пользовательских вариантов отчетов.
	Если Кэш.ПодключеныВсеОтчеты Тогда
		ЗавершитьКонвертациюВариантовОтчетов();
	Иначе
		ПрямаяКонвертацияВариантовОтчетов();
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	// 3. Заменить ключи старых вариантов на актуальные.
	//    Выполняется только для предопределенных вариантов отчетов.
	ОбновитьКлючиВариантовОтчетов(Кэш);
	
	////////////////////////////////////////////////////////////////////////////////
	// 4. Актуализировать предопределенные варианты отчетов.
	//    Выполняется только для предопределенных вариантов отчетов.
	ОбновитьПредопределенные(Кэш);
	
	////////////////////////////////////////////////////////////////////////////////
	// 5. Установка пометки удаления вариантов удаленных отчетов.
	//    Выполняется для всех вариантов отчетов.
	ПометитьНаУдалениеВариантыУдаленныхОтчетов(Кэш);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы / Начальное заполнение и актуализация справочника

// Замена старых ключей вариантов отчетов на актуальные
//
Процедура ОбновитьКлючиВариантовОтчетов(Кэш)
	ПредставлениеПроцедуры = НСтр("ru = 'Обновить ключи вариантов отчетов'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	// Составить таблицу замен старых ключей вариантов на актуальные.
	ОписаниеТиповРеквизитаКлючВарианта = Метаданные.Справочники.ВариантыОтчетов.Реквизиты.КлючВарианта.Тип;
	
	Изменения = Новый ТаблицаЗначений;
	Изменения.Колонки.Добавить("Отчет",                 Новый ОписаниеТипов("ОбъектМетаданных"));
	Изменения.Колонки.Добавить("СтароеИмяВарианта",     ОписаниеТиповРеквизитаКлючВарианта);
	Изменения.Колонки.Добавить("АктуальноеИмяВарианта", ОписаниеТиповРеквизитаКлючВарианта);
	
	ВариантыОтчетовПереопределяемый.ЗарегистрироватьИзмененияКлючейВариантовОтчетов(Изменения);
	
	Изменения.Колонки.Отчет.Имя = "ОтчетМетаданные";
	Изменения.Колонки.Добавить("Отчет", Метаданные.Справочники.ВариантыОтчетов.Реквизиты.Отчет.Тип);
	
	// Проверить корректность замен.
	Для Каждого Изменение Из Изменения Цикл
		Изменение.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Изменение.ОтчетМетаданные);
		Найденные = Изменения.НайтиСтроки(Новый Структура("ОтчетМетаданные, СтароеИмяВарианта", Изменение.ОтчетМетаданные, Изменение.АктуальноеИмяВарианта));
		Если Найденные.Количество() > 0 Тогда
			Конфликт = Найденные[0];
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка регистрации изменений имени варианта отчета ""%1"":
				|Актуальное имя варианта ""%2"" (старое имя ""%3"")
				|так же числится как старое имя ""%4"" (актуальное имя ""%5"").'"),
				Строка(Изменение.Отчет),
				Изменение.АктуальноеИмяВарианта,
				Изменение.СтароеИмяВарианта,
				Конфликт.СтароеИмяВарианта,
				Конфликт.АктуальноеИмяВарианта
			);
		КонецЕсли;
		Найденные = Изменения.НайтиСтроки(Новый Структура("ОтчетМетаданные, СтароеИмяВарианта", Изменение.ОтчетМетаданные, Изменение.СтароеИмяВарианта));
		Если Найденные.Количество() > 2 Тогда
			Конфликт = Найденные[1];
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка регистрации изменений имени варианта отчета ""%1"":
				|Старое имя варианта ""%2"" (актуальное имя ""%3"")
				|так же числится как старое имя 
				|варианта отчета ""%4"" (актуальное имя ""%5"").'"),
				Строка(Изменение.Отчет),
				Изменение.СтароеИмяВарианта,
				Изменение.АктуальноеИмяВарианта,
				Строка(Конфликт.ОтчетМетаданные.Представление()),
				Конфликт.АктуальноеИмяВарианта
			);
		КонецЕсли;
	КонецЦикла;
	
	// Получить ссылки вариантов отчетов для замены ключей,
	//   исключив из списка замен те варианты отчетов,
	//   актуальные ключи которых уже зарегистрированы,
	//   или старые ключи которых уже не заняты.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Изменения.Отчет,
	|	Изменения.СтароеИмяВарианта,
	|	Изменения.АктуальноеИмяВарианта
	|ПОМЕСТИТЬ втИзменения
	|ИЗ
	|	&Изменения КАК Изменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втИзменения.Отчет,
	|	втИзменения.АктуальноеИмяВарианта,
	|	ВариантыОтчетовСтарые.Ссылка
	|ИЗ
	|	втИзменения КАК втИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетовАктуальные
	|		ПО втИзменения.Отчет = ВариантыОтчетовАктуальные.Отчет
	|			И втИзменения.АктуальноеИмяВарианта = ВариантыОтчетовАктуальные.КлючВарианта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетовСтарые
	|		ПО втИзменения.Отчет = ВариантыОтчетовСтарые.Отчет
	|			И втИзменения.СтароеИмяВарианта = ВариантыОтчетовСтарые.КлючВарианта
	|ГДЕ
	|	ВариантыОтчетовАктуальные.Ссылка ЕСТЬ NULL 
	|	И НЕ ВариантыОтчетовСтарые.Ссылка ЕСТЬ NULL ";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Изменения", Изменения);
	Запрос.Текст = ТекстЗапроса;
	
	// Заменить старые имена вариантов на актуальные.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВариантОбъект.КлючВарианта = Выборка.АктуальноеИмяВарианта;
		ВариантОбъект.Записать();
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры // ОбновитьКлючиВариантовОтчетов

// Актуализация предопределенных вариантов отчетов
//
Процедура ОбновитьПредопределенные(Кэш)
	ПредставлениеПроцедуры = НСтр("ru = 'Обновить предопределенные'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка,
	|	ВариантыОтчетов.ПометкаУдаления,
	|	ВариантыОтчетов.Наименование,
	|	ВариантыОтчетов.Отчет,
	|	ВариантыОтчетов.ТипОтчета,
	|	ВариантыОтчетов.КлючВарианта,
	|	ВариантыОтчетов.Пользовательский,
	|	ВариантыОтчетов.Автор,
	|	ВариантыОтчетов.ТолькоДляАвтора,
	|	ВариантыОтчетов.ВидимостьПоУмолчанию,
	|	ВариантыОтчетов.Описание,
	|	ВариантыОтчетов.Представление,
	|	ВариантыОтчетов.Размещение.(
	|		Ссылка,
	|		НомерСтроки,
	|		Использование,
	|		РазделИлиГруппа,
	|		Важный,
	|		СмТакже,
	|		Предопределенная,
	|		УдалитьНазвание,
	|		УдалитьПодсистема
	|	)
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Пользовательский = ЛОЖЬ
	|	И ВариантыОтчетов.ТипОтчета = &ТипВнутренний
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВариантыОтчетов.ПометкаУдаления УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТипВнутренний", Перечисления.ТипыОтчетов.Внутренний);
	
	ВариантВыборка = Запрос.Выполнить().Выбрать();
	
	Кэш.ДеревоВариантов.Колонки.Добавить("НайденВБазеДанных", Новый ОписаниеТипов("Булево"));
	
	// Перебрать варианты из базы данных, удалить неактуальные, привести в соответствие актуальные.
	ПоискВарианта = Новый Структура("Отчет, КлючВарианта, НайденВБазеДанных, ЭтоВариант", , , Ложь, Истина);
	Пока ВариантВыборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ПоискВарианта, ВариантВыборка);
		Найденные = Кэш.ДеревоВариантов.Строки.НайтиСтроки(ПоискВарианта, Истина);
		Если Найденные.Количество() = 0 Тогда
			Если НЕ ВариантВыборка.ПометкаУдаления Тогда
				ВариантОбъект = ВариантВыборка.Ссылка.ПолучитьОбъект();
				ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
				ВариантОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ОписаниеВарианта = ОписаниеВарианта(Кэш.ДеревоВариантов, ВариантВыборка.Отчет, ВариантВыборка.КлючВарианта);
		ОписаниеВарианта.НайденВБазеДанных = Истина;
		
		Если ОписаниеВарианта.Включен = ВариантВыборка.ПометкаУдаления Тогда
			ВариантОбъект = ВариантВыборка.Ссылка.ПолучитьОбъект();
			ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
			ВариантОбъект.УстановитьПометкуУдаления(НЕ ОписаниеВарианта.Включен);
		КонецЕсли;
		
		Если НЕ ОписаниеВарианта.Включен Тогда
			Продолжить;
		КонецЕсли;
		
		// Реквизиты, для которых требуется жесткое восстановление настроек.
		Если ИзменилисьНастройкиПредопределенногоВариантаОтчета(ВариантВыборка, ОписаниеВарианта) Тогда
			
			ВариантОбъект = ВариантВыборка.Ссылка.ПолучитьОбъект();
			
			ЗаполнитьЗначенияСвойств(ВариантОбъект, ОписаниеВарианта, "Наименование, ВидимостьПоУмолчанию");
			
			ВариантОбъект.Автор           = Неопределено;
			ВариантОбъект.ТолькоДляАвтора = Ложь;
			Если ЗначениеЗаполнено(ОписаниеВарианта.Описание) Тогда
				ВариантОбъект.Описание = ОписаниеВарианта.Описание;
			КонецЕсли;
			
			// Мягкое восстановление настроек размещения - без очистки настроек, сделанных в режиме "Предприятие".
			ВосстановитьРазмещениеПредопределенногоВариантаОтчета(ВариантОбъект, ОписаниеВарианта);
			
			ВариантОбъект.Записать();
			
		КонецЕсли;
	КонецЦикла;
	
	// Добавить варианты, которых нет в базы данных.
	Найденные = Кэш.ДеревоВариантов.Строки.НайтиСтроки(Новый Структура("НайденВБазеДанных, ЭтоВариант", Ложь, Истина), Истина);
	Для Каждого ОписаниеВарианта Из Найденные Цикл
		ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта);
		
		Если НЕ ОписаниеВарианта.Включен Тогда
			Продолжить;
		КонецЕсли;
		
		ВариантОбъект = Справочники.ВариантыОтчетов.СоздатьЭлемент();
		ВариантОбъект.Наименование         = ОписаниеВарианта.Наименование;
		ВариантОбъект.Отчет                = ОписаниеВарианта.Отчет;
		ВариантОбъект.ТипОтчета            = Перечисления.ТипыОтчетов.Внутренний;
		ВариантОбъект.КлючВарианта         = ОписаниеВарианта.КлючВарианта;
		ВариантОбъект.Пользовательский     = Ложь;
		ВариантОбъект.Описание             = ОписаниеВарианта.Описание;
		ВариантОбъект.ВидимостьПоУмолчанию = ОписаниеВарианта.ВидимостьПоУмолчанию;
		
		ВосстановитьРазмещениеПредопределенногоВариантаОтчета(ВариантОбъект, ОписаниеВарианта);
		
		ВариантОбъект.Записать();
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры // ОбновитьПредопределенные

// Определяет необходимость перехода к редакции 2.1
//
Функция ИзменилисьНастройкиПредопределенногоВариантаОтчета(ВариантВыборка, ОписаниеВарианта)
	
	// Шапка
	
	Если ВариантВыборка.Наименование <> ОписаниеВарианта.Наименование Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВариантВыборка.Автор) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВариантВыборка.ТолькоДляАвтора <> Ложь Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеВарианта.Описание) И ВариантВыборка.Описание <> ОписаниеВарианта.Описание Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВариантВыборка.Автор) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВариантВыборка.ВидимостьПоУмолчанию <> ОписаниеВарианта.ВидимостьПоУмолчанию Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Таблица "Размещение"
	ТаблицаРазмещения = ВариантВыборка.Размещение.Выгрузить();
	АктуальныеПодсистемыВарианта = Новый Массив;
	Для Каждого КлючИЗначение Из ОписаниеВарианта.Размещение Цикл
		Подсистема = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(КлючИЗначение.Ключ);
		АктуальныеПодсистемыВарианта.Добавить(Подсистема);
		Найденные = ТаблицаРазмещения.НайтиСтроки(Новый Структура("РазделИлиГруппа", Подсистема));
		Если Найденные.Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
		СтрокаРазмещения = Найденные[0];
		Если НЕ СтрокаРазмещения.Предопределенная
			ИЛИ СтрокаРазмещения.Важный <> (НРег(КлючИЗначение.Значение) = "важный")
			ИЛИ СтрокаРазмещения.СмТакже <> (НРег(КлючИЗначение.Значение) = "смтакже") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Найденные = ТаблицаРазмещения.НайтиСтроки(Новый Структура("Предопределенная", Истина));
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		Если АктуальныеПодсистемыВарианта.Найти(СтрокаТаблицы.РазделИлиГруппа) = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции // НеобходимПереходКРедакции21

// Установка пометки удаления вариантов удаленных отчетов.
//
Процедура ПометитьНаУдалениеВариантыУдаленныхОтчетов(Кэш)
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВариантыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|		ПО ВариантыОтчетов.Отчет = ИдентификаторыОбъектовМетаданных.Ссылка
	|			И (ИдентификаторыОбъектовМетаданных.ПометкаУдаления = ИСТИНА)
	|			И (ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеПроцедуры = НСтр("ru = 'Установка пометки удаления вариантов удаленных отчетов'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	МассивСсылокВариантов = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Для Каждого ВариантСсылка Из МассивСсылокВариантов Цикл
		ВариантОбъект = ВариантСсылка.ПолучитьОбъект();
		ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
		ВариантОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры // ПометитьНаУдалениеВариантыУдаленныхОтчетов

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы / Переход к редакции 2.1

// Определяет необходимость перехода к редакции 2.1
//
Функция НеобходимПереходКРедакции21()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.УдалитьКлючОбъекта <> """"";
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции // НеобходимПереходКРедакции21

// Выполняет конвертацию вариантов для использования в редакции 2.1
//
Процедура ПерейтиКРедакции21(Кэш)
	ПредставлениеПроцедуры = НСтр("ru = 'Перейти к редакции 2.1'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВариантыОтчетов.Ссылка,
	|	ВариантыОтчетов.УдалитьКлючОбъекта КАК ОтчетПолноеИмя
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.УдалитьКлючОбъекта <> """"";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Сформировать информацию об отчете
		ОтчетИнформация = СформироватьИнформациюОбОтчетеПоПолномуИмени(Выборка.ОтчетПолноеИмя);
		
		// Проверить результат
		Если ТипЗнч(ОтчетИнформация.ТекстОшибки) = Тип("Строка") Тогда
			ОшибкаПоВарианту(Выборка.Ссылка, ОтчетИнформация.ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ВариантОбъект.ТипОтчета = Перечисления.ТипыОтчетов.УдалитьПользовательский
			ИЛИ ВариантОбъект.ТипОтчета = Перечисления.ТипыОтчетов.Внешний Тогда
			ВариантОбъект.Пользовательский = Истина;
		Иначе
			ВариантОбъект.Пользовательский = Ложь;
		КонецЕсли;
		
		ВариантОбъект.Отчет = ОтчетИнформация.Отчет;
		ВариантОбъект.ТипОтчета = ОтчетИнформация.ТипОтчета;
		
		Если ОтчетИнформация.ТипОтчета = Перечисления.ТипыОтчетов.Внешний Тогда
			// Установка настроек варианта внешнего отчета, характерных для всех вариантов внешних отчетов.
			// Все варианты внешних отчетов являются пользовательскими поскольку
			// предопределенные варианты внешних отчетов не регистрируются в системе,
			// а зачитываются каждый раз динамически.
			ВариантОбъект.Пользовательский = Истина;
			
			// Варианты внешних отчетов не могут открываться из панели отчетов.
			ВариантОбъект.Размещение.Очистить();
			
		Иначе
			
			Если НЕ Редакция21ПривестиНастройкиПоРазделам(ВариантОбъект, Кэш)
				ИЛИ НЕ Редакция21ПеренестиПользовательскиеНастройкиВРегистр(ВариантОбъект, Кэш) Тогда
				ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
				ВариантОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		// Поставляемые варианты не имеют автора
		Если НЕ ВариантОбъект.Пользовательский Тогда
			ВариантОбъект.Автор = Неопределено;
		КонецЕсли;
		
		ВариантОбъект.УдалитьКлючОбъекта = "";
		ВариантОбъект.УдалитьПредставлениеОбъекта = "";
		ВариантОбъект.УдалитьИсключенияБыстрогоДоступа.Очистить();
		ВариантОбъект.Записать();
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

// Замена структуры хранения настроек по разделам, переход на ссылки справочника ИОМ.
//   Вызывается только для вариантов внутренних отчетов.
//
Функция Редакция21ПривестиНастройкиПоРазделам(ВариантОбъект, Кэш)
	РазмещениеВарианта = Новый Соответствие;
	
	Найденные = ВариантОбъект.Размещение.НайтиСтроки(Новый Структура("РазделИлиГруппа", Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка()));
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		ПодсистемаПолноеИмя = СтрокаТаблицы.УдалитьПодсистема;
		Если ЗначениеЗаполнено(ПодсистемаПолноеИмя) Тогда
			ПодсистемаПолноеИмя = "Подсистема." + СтрЗаменить(ПодсистемаПолноеИмя, "\", ".Подсистема.");
			ПодсистемаМетаданные = Метаданные.НайтиПоПолномуИмени(ПодсистемаПолноеИмя);
			Если ПодсистемаМетаданные <> Неопределено Тогда
				РазмещениеВарианта.Вставить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПодсистемаМетаданные));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ВариантОбъект.Размещение.Очистить();
	
	Для Каждого КлючИЗначение Из РазмещениеВарианта Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Ключ) Тогда
			СтрокаТаблицы = ВариантОбъект.Размещение.Добавить();
			СтрокаТаблицы.РазделИлиГруппа = КлючИЗначение.Ключ;
			СтрокаТаблицы.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции // Редакция21ПривестиНастройкиПоРазделам 

// Заполнение регистра "НастройкиВариантовОтчетов".
//   Вызывается только для вариантов внутренних отчетов.
//
Функция Редакция21ПеренестиПользовательскиеНастройкиВРегистр(ВариантОбъект, Кэш)
	ТаблицаПодсистем = ВариантОбъект.Размещение.Выгрузить(Новый Структура("Использование", Истина));
	ТаблицаПодсистем.Свернуть("РазделИлиГруппа");
	
	ТаблицаПользователей = ВариантОбъект.УдалитьИсключенияБыстрогоДоступа.Выгрузить();
	ТаблицаПользователей.Колонки.УдалитьПользователь.Имя = "Пользователь";
	ТаблицаПользователей.Свернуть("Пользователь");
	
	НаборЗаписей = РегистрыСведений.НастройкиВариантовОтчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Вариант.Установить(ВариантОбъект.Ссылка, Истина);
	
	Для Каждого СтрокаПодсистема Из ТаблицаПодсистем Цикл
		
		Для Каждого СтрокаПользователь Из ТаблицаПользователей Цикл
			
			Запись = НаборЗаписей.Добавить();
			Запись.Активность      = Истина;
			Запись.Вариант         = ВариантОбъект.Ссылка;
			Запись.РазделИлиГруппа = СтрокаПодсистема.РазделИлиГруппа;
			Запись.Пользователь    = СтрокаПользователь.Пользователь;
			Запись.Видимость       = НЕ ВариантОбъект.ВидимостьПоУмолчанию;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
	Возврат Истина;
КонецФункции // Редакция21ПеренестиПользовательскиеНастройкиВРегистр

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы / Перенос вариантов из стандартного хранилища

// Загружает варианты из системного хранилища вариантов в хранилище подсистемы при частичном внедрении.
//
Процедура ПрямаяКонвертацияВариантовОтчетов() Экспорт
	ПредставлениеПроцедуры = НСтр("ru = 'Прямая конвертация вариантов отчетов'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	// Результат, который будет сохранен в хранилище
	ТаблицаВариантов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПереносВариантовОтчетов", "ТаблицаВариантов", , , "");
	Если ТипЗнч(ТаблицаВариантов) <> Тип("ТаблицаЗначений") ИЛИ ТаблицаВариантов.Количество() = 0 Тогда
		ТаблицаВариантов = Новый ТаблицаЗначений;
		ТаблицаВариантов.Колонки.Добавить("Отчет",     ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("Вариант",   ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("Автор",     ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("Настройка", Новый ОписаниеТипов("ХранилищеЗначения"));
		ТаблицаВариантов.Колонки.Добавить("ПредставлениеОтчета",   ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("ПредставлениеВарианта", ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("ИдентификаторАвтора",   Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	
	УдалятьВсе = Истина;
	МассивУдаляемыхКлючейОбъектов = Новый Массив;
	
	ВыборкаХранилища = ХранилищеВариантовОтчетов.Выбрать();
	ОшибокЧтенияПодряд = 0;
	Пока Истина Цикл
		Попытка
			ЭлементВыборкиПолучен = ВыборкаХранилища.Следующий();
			ОшибокЧтенияПодряд = 0;
		Исключение
			ЭлементВыборкиПолучен = Неопределено;
			ОшибокЧтенияПодряд = ОшибокЧтенияПодряд + 1;
			ОшибкаПоВарианту(
				Неопределено,
				НСтр("ru = 'В процессе выборки вариантов отчетов из стандартного хранилища возникла ошибка:'")
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
		Если ЭлементВыборкиПолучен = Ложь Тогда
			Прервать;
		ИначеЕсли ЭлементВыборкиПолучен = Неопределено Тогда
			Если ОшибокЧтенияПодряд > 100 Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Пропуск не подключенных внутренних отчетов.
		ОтчетМетаданные = Метаданные.НайтиПоПолномуИмени(ВыборкаХранилища.КлючОбъекта);
		Если ОтчетМетаданные <> Неопределено Тогда
			ХранилищеМетаданные = ОтчетМетаданные.ХранилищеВариантов;
			Если ХранилищеМетаданные = Неопределено ИЛИ ХранилищеМетаданные.Имя <> "ХранилищеВариантовОтчетов" Тогда
				УдалятьВсе = Ложь;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Внешние варианты отчетов переносятся все, поскольку для них невозможно определить
		// подключены они к хранилищу подсистемы или нет.
		МассивУдаляемыхКлючейОбъектов.Добавить(ВыборкаХранилища.КлючОбъекта);
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ВыборкаХранилища.Пользователь);
		Если ПользовательИБ = Неопределено Тогда
			Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ВыборкаХранилища.Пользователь, Истина);
			Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
				Продолжить;
			КонецЕсли;
			ИдентификаторПользователя = Пользователь.ИдентификаторПользователяИБ;
		Иначе
			ИдентификаторПользователя = ПользовательИБ.УникальныйИдентификатор;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаВариантов.Добавить();
		СтрокаТаблицы.Отчет     = ВыборкаХранилища.КлючОбъекта;
		СтрокаТаблицы.Вариант   = ВыборкаХранилища.КлючНастроек;
		СтрокаТаблицы.Автор     = ВыборкаХранилища.Пользователь;
		СтрокаТаблицы.Настройка = Новый ХранилищеЗначения(ВыборкаХранилища.Настройки, Новый СжатиеДанных(9));
		СтрокаТаблицы.ПредставлениеВарианта = ВыборкаХранилища.Представление;
		СтрокаТаблицы.ИдентификаторАвтора   = ИдентификаторПользователя;
		Если ОтчетМетаданные = Неопределено Тогда
			СтрокаТаблицы.ПредставлениеОтчета = ВыборкаХранилища.КлючОбъекта;
		Иначе
			СтрокаТаблицы.ПредставлениеОтчета = ОтчетМетаданные.Представление();
		КонецЕсли;
	КонецЦикла;
	
	// Очистка стандартного хранилища
	Если УдалятьВсе Тогда
		ХранилищеВариантовОтчетов.Удалить(Неопределено, Неопределено, Неопределено);
	Иначе
		Для Каждого КлючОбъекта Из МассивУдаляемыхКлючейОбъектов Цикл
			ХранилищеВариантовОтчетов.Удалить(КлючОбъекта, Неопределено, Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	// Результат выполнения
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
	
	// Загрузка вариантов в хранилище подсистемы
	ЗавершитьКонвертациюВариантовОтчетов(ТаблицаВариантов);
	
КонецПроцедуры // ПрямаяКонвертацияВариантовОтчетов()

// Загружает в хранилище подсистемы варианты отчетов, предварительно сохраненные
// из системного хранилища вариантов в хранилище общих настроек.
// Используется для загрузки вариантов отчетов при полном или частичном внедрении.
// При полном внедрении может вызваться из обработки "ПереносВариантовОтчетов".
//
// Параметры:
//   ТаблицаВариантов (ТаблицаЗначений) Необязательный. Используется в системных целях.
//
Процедура ЗавершитьКонвертациюВариантовОтчетов(ТаблицаВариантов = Неопределено) Экспорт
	
	Если ТаблицаВариантов = Неопределено Тогда
		ТаблицаВариантов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПереносВариантовОтчетов", "ТаблицаВариантов", , , "");
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаВариантов) <> Тип("ТаблицаЗначений") ИЛИ ТаблицаВариантов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеПроцедуры = НСтр("ru = 'Завершить конвертацию вариантов отчетов'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	// Замена имен колонок под структуру справочника.
	ТаблицаВариантов.Колонки.Отчет.Имя = "ОтчетПолноеИмя";
	ТаблицаВариантов.Колонки.Вариант.Имя = "КлючВарианта";
	ТаблицаВариантов.Колонки.ПредставлениеВарианта.Имя = "Наименование";
	
	// Преобразование имен отчетов в ссылки справочника ИОМ.
	ТаблицаВариантов.Колонки.Добавить("Отчет", Метаданные.Справочники.ВариантыОтчетов.Реквизиты.Отчет.Тип);
	ТаблицаВариантов.Колонки.Добавить("Определен", Новый ОписаниеТипов("Булево"));
	ТаблицаВариантов.Колонки.Добавить("ТипОтчета", Метаданные.Справочники.ВариантыОтчетов.Реквизиты.ТипОтчета.Тип);
	Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
		ОтчетИнформация = СформироватьИнформациюОбОтчетеПоПолномуИмени(СтрокаТаблицы.ОтчетПолноеИмя);
		
		// Проверить результат
		Если ТипЗнч(ОтчетИнформация.ТекстОшибки) = Тип("Строка") Тогда
			ОшибкаПоВарианту(Неопределено, ОтчетИнформация.ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.Определен = Истина;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ОтчетИнформация, "Отчет, ТипОтчета");
	КонецЦикла;
	
	ТаблицаВариантов.Сортировать("ОтчетПолноеИмя Возр, КлючВарианта Возр");
	
	// Существующие варианты отчетов
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаВариантов.Отчет,
	|	ТаблицаВариантов.ОтчетПолноеИмя,
	|	ТаблицаВариантов.ТипОтчета,
	|	ТаблицаВариантов.КлючВарианта,
	|	ТаблицаВариантов.Автор
	|ПОМЕСТИТЬ втВарианты
	|ИЗ
	|	&ТаблицаВариантов КАК ТаблицаВариантов
	|ГДЕ
	|	ТаблицаВариантов.Определен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВарианты.Отчет,
	|	втВарианты.ОтчетПолноеИмя,
	|	втВарианты.ТипОтчета,
	|	втВарианты.КлючВарианта,
	|	ВариантыОтчетов.Ссылка,
	|	ПользователиПоИмени.Ссылка КАК ПользовательПоИмени
	|ИЗ
	|	втВарианты КАК втВарианты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиПоИмени
	|		ПО втВарианты.Автор = ПользователиПоИмени.Наименование
	|			И (ПользователиПоИмени.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ПО втВарианты.Отчет = ВариантыОтчетов.Отчет
	|			И втВарианты.КлючВарианта = ВариантыОтчетов.КлючВарианта
	|			И втВарианты.ТипОтчета = ВариантыОтчетов.ТипОтчета";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаВариантов", ТаблицаВариантов);
	Запрос.Текст = ТекстЗапроса;
	
	ВариантыБД = Запрос.Выполнить().Выгрузить();
	
	// Авторы вариантов
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.ИдентификаторПользователяИБ КАК Идентификатор
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ В(&Идентификаторы)
	|	И Пользователи.ПометкаУдаления = ЛОЖЬ";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", ТаблицаВариантов.ВыгрузитьКолонку("ИдентификаторАвтора"));
	Запрос.Текст = ТекстЗапроса;
	
	ПользователиПоИдентификатору = Запрос.Выполнить().Выгрузить();
	
	ПодсистемыОтчетов = РазмещениеОтчетовВПодсистемах();
	
	// Загрузка вариантов в хранилище подсистемы
	ОпределенныеВарианты = ТаблицаВариантов.НайтиСтроки(Новый Структура("Определен", Истина));
	Для Каждого СтрокаТаблицы Из ОпределенныеВарианты Цикл
		Найденные = ВариантыБД.НайтиСтроки(Новый Структура("Отчет, КлючВарианта", СтрокаТаблицы.Отчет, СтрокаТаблицы.КлючВарианта));
		ВариантБД = Найденные[0];
		
		// Если вариант уже загружен в справочник "Варианты отчетов" - не загружаем его.
		Если ЗначениеЗаполнено(ВариантБД.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		// СправочникОбъект
		ВариантОбъект = Справочники.ВариантыОтчетов.СоздатьЭлемент();
		
		// Уже подготовленные параметры
		ЗаполнитьЗначенияСвойств(ВариантОбъект, СтрокаТаблицы, "Наименование, Отчет, ТипОтчета, КлючВарианта");
		
		// Настройки
		Настройки = СтрокаТаблицы.Настройка;
		Если ТипЗнч(Настройки) = Тип("ХранилищеЗначения") Тогда
			Настройки = Настройки.Получить();
		КонецЕсли;
		ВариантОбъект.Настройки = Новый ХранилищеЗначения(Настройки);
		
		// В стандартном хранилище хранятся только пользовательские ВО
		ВариантОбъект.Пользовательский = Истина;
		ВариантОбъект.ТолькоДляАвтора = Истина;
		
		// Автор варианта
		ПользовательПоИД = ПользователиПоИдентификатору.Найти(СтрокаТаблицы.ИдентификаторАвтора, "Идентификатор");
		Если ПользовательПоИД <> Неопределено И ЗначениеЗаполнено(ПользовательПоИД.Пользователь) Тогда
			ВариантОбъект.Автор = ПользовательПоИД.Пользователь;
		ИначеЕсли ВариантБД <> Неопределено И ЗначениеЗаполнено(ВариантБД.ПользовательПоИмени) Тогда
			ВариантОбъект.Автор = ВариантБД.ПользовательПоИмени;
		Иначе
			ОшибкаПоВарианту(
				ВариантОбъект.Ссылка,
				НСтр("ru = 'Вариант ""%1"" отчета ""%2"": не найден автор ""%3""'"),
				ВариантОбъект.Наименование,
				СтрокаТаблицы.ПредставлениеОтчета,
				СтрокаТаблицы.Автор
			);
		КонецЕсли;
		
		// Поскольку переносятся пользовательские варианты отчетов,
		// то настройки размещения можно взять только из метаданных отчета.
		Найденные = ПодсистемыОтчетов.НайтиСтроки(Новый Структура("ОтчетПолноеИмя", СтрокаТаблицы.ОтчетПолноеИмя));
		Для Каждого СтрокаПодсистема Из Найденные Цикл
			СтрокаРаздел = ВариантОбъект.Размещение.Добавить();
			СтрокаРаздел.Использование = Истина;
			СтрокаРаздел.РазделИлиГруппа = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(СтрокаПодсистема.ПодсистемаМетаданные);
		КонецЦикла;
		
		ВариантОбъект.Записать();
	КонецЦикла;
	
	// Очистка
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить("ПереносВариантовОтчетов", "ТаблицаВариантов", "");
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры // ЗавершитьКонвертациюВариантовОтчетов()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует ссылку и тип отчета по полному имени.
//
// Параметры:
//   ОтчетПолноеИмя (Строка) Полное имя отчета в виде 
//       "Отчет.<ИмяОтчета>" или "ВнешнийОтчет.<ИмяОтчета>"
//
// Возвращаемое значение: 
//   Результат (Структура)
//       |- Отчет
//       |- ТипОтчета
//       |- ОтчетИмя
//       |- ОтчетМетаданные
//       |- ТекстОшибки
//           |- (Неопределено) Если ошибки нет
//           |- (Строка)       Текст ошибки
//
Функция СформироватьИнформациюОбОтчетеПоПолномуИмени(ОтчетПолноеИмя) Экспорт
	Результат = Новый Структура("Отчет, ТипОтчета, ОтчетПолноеИмя, ОтчетИмя, ОтчетМетаданные, ТекстОшибки");
	Результат.ОтчетПолноеИмя = ОтчетПолноеИмя;
	
	ПозицияТочки = Найти(ОтчетПолноеИмя, ".");
	Если ПозицияТочки = 0 Тогда
		Префикс = "";
		Результат.ОтчетИмя = ОтчетПолноеИмя;
	Иначе
		Префикс = Лев(ОтчетПолноеИмя, ПозицияТочки - 1);
		Результат.ОтчетИмя = Сред(ОтчетПолноеИмя, ПозицияТочки + 1);
	КонецЕсли;
	
	Если ВРег(Префикс) = "ОТЧЕТ" Тогда
		Результат.ОтчетМетаданные = Метаданные.Отчеты.Найти(Результат.ОтчетИмя);
		Если Результат.ОтчетМетаданные = Неопределено Тогда
			ПредупреждениеПоВарианту(
				Неопределено,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Отчет ""%1"" не найден в программе,
					|он будет значиться как внешний.'"),
					ОтчетПолноеИмя
				)
			);
			Результат.ОтчетПолноеИмя = "ВнешнийОтчет." + Результат.ОтчетИмя;
		КонецЕсли;
	ИначеЕсли ВРег(Префикс) = "ВНЕШНИЙОТЧЕТ" Тогда
		// Дополнительных проверок не требуется
	Иначе
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для отчета ""%1"" невозможно определить тип (не установлен префикс).'"),
			ОтчетПолноеИмя
		);
		Возврат Результат;
	КонецЕсли;
	
	Если Результат.ОтчетМетаданные = Неопределено Тогда
		Результат.Отчет = Результат.ОтчетПолноеИмя;
		Результат.ТипОтчета = Перечисления.ТипыОтчетов.Внешний;
		СтандартныеПодсистемыПереопределяемый.ЗаменитьТипИСсылкуЕслиОтчетДополнительный(Результат);
	Иначе
		Если НЕ ПравоДоступа("Просмотр", Результат.ОтчетМетаданные) Тогда
			Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно прав доступа к отчету ""%1"".'"),
				ОтчетПолноеИмя
			);
		КонецЕсли;
		
		Результат.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Результат.ОтчетМетаданные);
		Результат.ТипОтчета = Перечисления.ТипыОтчетов.Внутренний;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // СформироватьИнформациюОбОтчетеПоПолномуИмени

// Формирует таблицу размещения отчетов по подсистемам конфигурации.
//
// Параметры:
//   Результат          (Неопределено) Используется для рекурсии.
//   ПодсистемаРодитель (Неопределено) Используется для рекурсии.
//
// Возвращаемое значение: 
//   Результат (ТаблицаЗначений)
//       |- ОтчетМетаданные
//       |- ОтчетПолноеИмя
//       |- ПодсистемаМетаданные
//       |- ПодсистемаПолноеИмя
//
Функция РазмещениеОтчетовВПодсистемах(Результат = Неопределено, ПодсистемаРодитель = Неопределено) Экспорт
	Если Результат = Неопределено Тогда
		ПолноеИмяОписаниеТипов = Метаданные.Справочники.ИдентификаторыОбъектовМетаданных.Реквизиты.ПолноеИмя.Тип;
		
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("ОтчетМетаданные",      Новый ОписаниеТипов("ОбъектМетаданных"));
		Результат.Колонки.Добавить("ОтчетПолноеИмя",       ПолноеИмяОписаниеТипов);
		Результат.Колонки.Добавить("ПодсистемаМетаданные", Новый ОписаниеТипов("ОбъектМетаданных"));
		Результат.Колонки.Добавить("ПодсистемаПолноеИмя",  ПолноеИмяОписаниеТипов);
		
		ПодсистемаРодитель = Метаданные;
	КонецЕсли;
	
	// Перебор вложенных подсистем родителя
	Для Каждого ПодсистемаМетаданные Из ПодсистемаРодитель.Подсистемы Цикл
		Если НЕ ПодсистемаМетаданные.ВключатьВКомандныйИнтерфейс Тогда
			Продолжить;
		КонецЕсли;
		
		// Состав подсистемы
		Для Каждого ОтчетМетаданные Из ПодсистемаМетаданные.Состав Цикл
			Если НЕ Метаданные.Отчеты.Содержит(ОтчетМетаданные) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = Результат.Добавить();
			СтрокаТаблицы.ОтчетМетаданные      = ОтчетМетаданные;
			СтрокаТаблицы.ОтчетПолноеИмя       = ОтчетМетаданные.ПолноеИмя();
			СтрокаТаблицы.ПодсистемаМетаданные = ПодсистемаМетаданные;
			СтрокаТаблицы.ПодсистемаПолноеИмя  = ПодсистемаМетаданные.ПолноеИмя();
			
		КонецЦикла;
		
		РазмещениеОтчетовВПодсистемах(Результат, ПодсистемаМетаданные);;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции // РазмещениеОтчетовВПодсистемах

// Восстановление настроек табличной части "Размещение" предопределенного варианта отчета.
//   Для перезаписи настроек табличная часть "Размещение" должна быть очищена до вызова.
//
// Параметры:
//   ВариантОбъект (СправочникОбъект.ВариантыОтчетов, ДанныеФормыСтруктура)
//
Функция ВосстановитьРазмещениеПредопределенногоВариантаОтчета(ВариантОбъект, ОписаниеВарианта) Экспорт
	АктуальныеПодсистемыВарианта = Новый Массив;
	
	// Регистрация актуальных подсистем
	Для Каждого КлючИЗначение Из ОписаниеВарианта.Размещение Цикл
		
		Подсистема = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(КлючИЗначение.Ключ);
		
		АктуальныеПодсистемыВарианта.Добавить(Подсистема);
		
		Найденные = ВариантОбъект.Размещение.НайтиСтроки(Новый Структура("РазделИлиГруппа", Подсистема));
		Если Найденные.Количество() = 0 Тогда
			СтрокаТаблицы = ВариантОбъект.Размещение.Добавить();
			СтрокаТаблицы.РазделИлиГруппа = Подсистема;
			СтрокаТаблицы.Использование   = Истина;
		Иначе
			СтрокаТаблицы = Найденные[0];
		КонецЕсли;
		
		СтрокаТаблицы.Предопределенная = Истина;
		СтрокаТаблицы.Важный  = (КлючИЗначение.Значение = "Важный");
		СтрокаТаблицы.СмТакже = (КлючИЗначение.Значение = "СмТакже");
		
	КонецЦикла;
	
	// Удаление неактуальных подсистем
	Найденные = ВариантОбъект.Размещение.НайтиСтроки(Новый Структура("Предопределенная", Истина));
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		Если АктуальныеПодсистемыВарианта.Найти(СтрокаТаблицы.РазделИлиГруппа) = Неопределено Тогда
			ВариантОбъект.Размещение.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции // ВосстановитьРазмещениеПредопределенногоВариантаОтчета

// Добавляет подсистемы родителя с фильтром по правам доступа и функциональным опциям.
//
Процедура ДобавитьПодсистемыТекущегоПользователя(РодительСтрока, РодительМетаданные = Неопределено, РазделСсылка = Неопределено) Экспорт
	ДляКорневойСтроки = (РодительМетаданные = Неопределено);
	ПриоритетРодителя = ?(ДляКорневойСтроки, "", РодительСтрока.Приоритет + ".");
	Подсистемы = ?(ДляКорневойСтроки, ИспользуемыеРазделы(), РодительМетаданные.Подсистемы);
	Приоритет = 0;
	Для Каждого Подсистема Из Подсистемы Цикл
		ПодсистемаМетаданные = ?(ТипЗнч(Подсистема) = Тип("ОбъектМетаданных"), Подсистема, Подсистема.Метаданные);
		Если ПодсистемаМетаданные.ВключатьВКомандныйИнтерфейс
			И ПравоДоступа("Просмотр", ПодсистемаМетаданные)
			И ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ПодсистемаМетаданные) Тогда
			
			Приоритет = Приоритет + 1;
			
			СтрокаДерева = РодительСтрока.Строки.Добавить();
			СтрокаДерева.Ссылка        = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПодсистемаМетаданные);
			СтрокаДерева.Имя           = ПодсистемаМетаданные.Имя;
			СтрокаДерева.ПолноеИмя     = ПодсистемаМетаданные.ПолноеИмя();
			СтрокаДерева.Представление = ПодсистемаМетаданные.Представление();
			СтрокаДерева.РазделСсылка  = ?(ДляКорневойСтроки, СтрокаДерева.Ссылка, РазделСсылка);
			СтрокаДерева.Приоритет     = ПриоритетРодителя + Формат(Приоритет, "ЧЦ=4; ЧДЦ=0; ЧВН=; ЧГ=0");
			Если СтрЧислоВхождений(ПриоритетРодителя, ".") > 2 Тогда
				СтрокаДерева.ПолноеПредставление = РодительСтрока.Представление + ": " + СтрокаДерева.Представление;
			Иначе
				СтрокаДерева.ПолноеПредставление = СтрокаДерева.Представление;
			КонецЕсли;
			
			ДобавитьПодсистемыТекущегоПользователя(СтрокаДерева, ПодсистемаМетаданные, СтрокаДерева.РазделСсылка);
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ДобавитьПодсистемыТекущегоПользователя 

// Формирует описание типов Строка заданной длины.
//
Функция ОписаниеТиповСтрока(ДлинаСтроки = 1000) Экспорт
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));
КонецФункции

// По составу ролей определяет полные права к данным подсистемы.
//
Функция ПолныеПраваНаВарианты() Экспорт
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеВариантовОтчетов");
КонецФункции

// Проверяет свободно ли наименование варианта отчета.
//
Функция НаименованиеЗанято(Отчет, Ссылка, Наименование) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.Ссылка <> &Ссылка
	|	И ВариантыОтчетов.Наименование = &Наименование
	|	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Отчет",        Отчет);
	Запрос.УстановитьПараметр("Ссылка",       Ссылка);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = НЕ Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
КонецФункции

// Проверяет свободен ли ключ варианта отчета.
//
Функция КлючВариантаЗанят(Отчет, Ссылка, КлючВарианта) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.Ссылка <> &Ссылка
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта
	|	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Отчет",        Отчет);
	Запрос.УстановитьПараметр("Ссылка",       Ссылка);
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = НЕ Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
КонецФункции

// Определяет способ внедрения подсистемы.
//
Функция ПодключеныВсеОтчеты() Экспорт
	Возврат (Метаданные.ХранилищеВариантовОтчетов <> Неопределено И Метаданные.ХранилищеВариантовОтчетов.Имя = "ХранилищеВариантовОтчетов");
КонецФункции

// Заполняет описание настроек для строки варианта отчета если оно еще не заполнено.
//
// Параметры:
//   СтрокаВариант (СтрокаДерева) Описание настроек варианта отчета.
//   СтрокаОтчет (СтрокаДерева) Необязательный. Описание настроек отчета.
//
Процедура ЗаполнитьОписаниеСтрокиВарианта(СтрокаВариант, СтрокаОтчет = Неопределено) Экспорт
	
	Если СтрокаВариант.ОписаниеПолучено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаОтчет = Неопределено Тогда
		СтрокаОтчет = СтрокаВариант.Родитель;
	КонецЕсли;
	
	// Флажок изменения настроек
	СтрокаВариант.ОписаниеПолучено = Истина;
	
	// Копирование настроек отчета
	СтрокаВариант.Включен = СтрокаОтчет.Включен;
	СтрокаВариант.ВидимостьПоУмолчанию = СтрокаОтчет.ВидимостьПоУмолчанию;
	
	Если СтрокаВариант.КлючВарианта = "" Тогда
		СтрокаВариант.Наименование = СтрокаОтчет.Наименование;
		СтрокаВариант.Описание = СтрокаОтчет.Описание;
	КонецЕсли;
	
	СтрокаВариант.Размещение = ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(СтрокаОтчет.Размещение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом подсистем из форм

// Добавляет элементы условного оформления дерева подсистем.
//
Процедура ДеревоПодсистемДобавитьУсловноеОформление(ЭтаФорма) Экспорт
	ЭтаФорма.Элементы.ДеревоПодсистемВажность.СписокВыбора.Добавить(ВариантыОтчетовКлиентСервер.ПредставлениеВажный());
	ЭтаФорма.Элементы.ДеревоПодсистемВажность.СписокВыбора.Добавить(ВариантыОтчетовКлиентСервер.ПредставлениеСмТакже());
	
	Отборы = Новый Соответствие;
	Отборы.Вставить("ДеревоПодсистем.Приоритет", "");
	
	Оформление = Новый Соответствие;
	Оформление.Вставить("ТолькоПросмотр", Истина);
	
	Поля = "ДеревоПодсистем";
	
	ДобавитьЭлементУсловногоОформления(ЭтаФорма, Отборы, Оформление, Поля);
	
	Оформление = Новый Соответствие;
	Оформление.Вставить("Отображать", Ложь);
	
	Поля = "ДеревоПодсистемИспользование, ДеревоПодсистемВажность";
	
	ДобавитьЭлементУсловногоОформления(ЭтаФорма, Отборы, Оформление, Поля);
	
КонецПроцедуры // ФормаЭлементаСоздатьУсловноеОформлениеДляРазделов

// Добавляет элемент условного оформления.
//
Функция ДобавитьЭлементУсловногоОформления(ЭтаФорма, Отборы, Оформление, Поля)
	ЭлементУсловногоОформленияКД = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформленияКД.Использование = Истина;
	
	Для Каждого КлючИЗначение Из Отборы Цикл
		ЭлементОтбораКД = ЭлементУсловногоОформленияКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КлючИЗначение.Ключ);
		ЭлементОтбораКД.ПравоеЗначение = КлючИЗначение.Значение;
		ЭлементОтбораКД.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Оформление Цикл
		ЭлементУсловногоОформленияКД.Оформление.УстановитьЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных(КлючИЗначение.Ключ),
			КлючИЗначение.Значение
		);
	КонецЦикла;
	
	Если ТипЗнч(Поля) = Тип("Строка") Тогда
		Поля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля, ",");
	КонецЕсли;
	Для Каждого Поле Из Поля Цикл
		ПолеКД = ЭлементУсловногоОформленияКД.Поля.Элементы.Добавить();
		ПолеКД.Использование = Истина;
		ПолеКД.Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции // ДобавитьЭлементУсловногоОформления

// Формирует дерево подсистем по данным варианта-основания.
//
Функция ДеревоПодсистемСформировать(ЭтаФорма, ВариантОснование) Экспорт
	ДеревоИсточник = ВариантыОтчетовПовтИсп.ПодсистемыТекущегоПользователя();
	
	ДеревоПриемник = ЭтаФорма.РеквизитФормыВЗначение("ДеревоПодсистем", Тип("ДеревоЗначений"));
	ДеревоПриемник.Строки.Очистить();
	
	ДобавитьПодсистемыВДерево(ДеревоПриемник, ДеревоИсточник, ВариантОснование);
	
	Возврат ДеревоПриемник;
КонецФункции // ДеревоПодсистемСформировать

// Добавляет строки дерева-источника в строки дерева-приемника.
//
Процедура ДобавитьПодсистемыВДерево(ПриемникРодитель, ИсточникРодитель, ВариантОснование)
	Для Каждого Источник Из ИсточникРодитель.Строки Цикл
		
		Приемник = ПриемникРодитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(Приемник, Источник);
		
		Найденные = ВариантОснование.Размещение.НайтиСтроки(Новый Структура("РазделИлиГруппа", Приемник.Ссылка));
		Если Найденные.Количество() > 0 Тогда
			СтрокаТаблицы = Найденные[0];
			Если СтрокаТаблицы.Важный Тогда
				Приемник.ВажностьПоУмолчанию = ВариантыОтчетовКлиентСервер.ПредставлениеВажный();
			ИначеЕсли СтрокаТаблицы.СмТакже Тогда
				Приемник.ВажностьПоУмолчанию = ВариантыОтчетовКлиентСервер.ПредставлениеСмТакже();
			Иначе
				Приемник.ВажностьПоУмолчанию = "";
			КонецЕсли;
			
			Приемник.ИспользованиеПоУмолчанию = ?(СтрокаТаблицы.Использование, 1, 0);
		КонецЕсли;
		
		Приемник.Важность      = Приемник.ВажностьПоУмолчанию;
		Приемник.Использование = Приемник.ИспользованиеПоУмолчанию;
		
		// Рекурсия
		ДобавитьПодсистемыВДерево(Приемник, Источник, ВариантОснование);
	КонецЦикла;
КонецПроцедуры

// Сохраняет настройки размещения, измененные пользователем в табличную часть варианта отчета.
//
// Параметры:
//   ЭтаФорма      (УправляемаяФорма)
//   ВариантОбъект (СправочникОбъект.ВариантыОтчетов, ДанныеФормыСтруктура)
//   Кэш           (Структура) Необязательный.
//
Процедура ДеревоПодсистемЗаписать(ЭтаФорма, ВариантОбъект, Кэш = Неопределено) Экспорт
	Если Кэш <> Неопределено И Кэш.Свойство("ИзмененияПодсистем") Тогда
		ИзмененияПодсистем = Кэш.ИзмененияПодсистем;
	Иначе
		ДеревоПриемник = ЭтаФорма.РеквизитФормыВЗначение("ДеревоПодсистем", Тип("ДеревоЗначений"));
		ИзмененияПодсистем = ДеревоПриемник.Строки.НайтиСтроки(Новый Структура("ИзмененПользователем", Истина), Истина);
		Если Кэш <> Неопределено Тогда
			Кэш.Вставить("ИзмененияПодсистем", ИзмененияПодсистем);
		КонецЕсли;
	КонецЕсли;
	
	Если ИзмененияПодсистем.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Изменение Из ИзмененияПодсистем Цикл
		СтрокаТабличнойЧасти = ВариантОбъект.Размещение.Найти(Изменение.Ссылка, "РазделИлиГруппа");
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			Если Изменение.Использование = 0 Тогда
				Продолжить;
			Иначе
				СтрокаТабличнойЧасти = ВариантОбъект.Размещение.Добавить();
				СтрокаТабличнойЧасти.РазделИлиГруппа = Изменение.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если Изменение.Использование <> Изменение.ИспользованиеПоУмолчанию Тогда
			Если Изменение.Использование = 0 Тогда
				СтрокаТабличнойЧасти.Использование = Ложь;
			ИначеЕсли Изменение.Использование = 1 Тогда
				СтрокаТабличнойЧасти.Использование = Истина;
			Иначе
				// Оставить как есть
			КонецЕсли;
		КонецЕсли;
		
		Если Изменение.Важность <> Изменение.ВажностьПоУмолчанию ИЛИ Изменение.ВажностьПоУмолчанию = "" Тогда
			Если Изменение.Важность = ВариантыОтчетовКлиентСервер.ПредставлениеВажный() Тогда
				СтрокаТабличнойЧасти.Важный  = Истина;
				СтрокаТабличнойЧасти.СмТакже = Ложь;
			ИначеЕсли Изменение.Важность = ВариантыОтчетовКлиентСервер.ПредставлениеСмТакже() Тогда
				СтрокаТабличнойЧасти.Важный  = Ложь;
				СтрокаТабличнойЧасти.СмТакже = Истина;
			Иначе
				СтрокаТабличнойЧасти.Важный  = Ложь;
				СтрокаТабличнойЧасти.СмТакже = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ДеревоПодсистемЗаписать 

////////////////////////////////////////////////////////////////////////////////
// Журнал регистрации

// Запись ошибки в журнале регистрации по варианту отчета.
//
Процедура ОшибкаПоВарианту(Вариант, Сообщение, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено) Экспорт
	ЗаписьЖурналаРегистрации(
		ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы(),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ВариантыОтчетов,
		Вариант,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Сообщение,
			Строка(Реквизит1),
			Строка(Реквизит2),
			Строка(Реквизит3)
		)
	);
КонецПроцедуры

// Запись информации в журнале регистрации по варианту отчета.
//
Процедура ИнформацияПоВарианту(Вариант, Сообщение, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено) Экспорт
	ЗаписьЖурналаРегистрации(
		ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы(),
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Справочники.ВариантыОтчетов,
		Вариант,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Сообщение,
			Строка(Реквизит1),
			Строка(Реквизит2),
			Строка(Реквизит3)
		)
	);
КонецПроцедуры

// Запись предупреждения в журнале регистрации по варианту отчета.
//
Процедура ПредупреждениеПоВарианту(Вариант, Сообщение, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено) Экспорт
	ЗаписьЖурналаРегистрации(
		ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы(),
		УровеньЖурналаРегистрации.Предупреждение,
		Метаданные.Справочники.ВариантыОтчетов,
		Вариант,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Сообщение,
			Строка(Реквизит1),
			Строка(Реквизит2),
			Строка(Реквизит3)
		)
	);
КонецПроцедуры

// Записывает в журнал регистрации событие запуска процедуры и открывает транзакцию.
//
Процедура ЗапускПроцедуры(ПредставлениеПроцедуры)
	ИнформацияПоВарианту(Неопределено, НСтр("ru = 'Запуск процедуры ""%1"".'"), ПредставлениеПроцедуры);
	НачатьТранзакцию();
КонецПроцедуры

// Записывает в журнал регистрации событие завершения процедуры и фиксирует транзакцию.
//
Процедура ЗавершениеПроцедуры(ПредставлениеПроцедуры)
	ЗафиксироватьТранзакцию();
	ИнформацияПоВарианту(Неопределено, НСтр("ru = 'Завершение процедуры ""%1"".'"), ПредставлениеПроцедуры);
КонецПроцедуры
