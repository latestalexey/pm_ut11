////////////////////////////////////////////////////////////////////////////////
// Подсистема "Настройка порядка элементов".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Обработчик команды "Переместить вверх" формы списка.
//
// Параметры:
//  РеквизитФормыСписок - ДинамическийСписок - реквизит формы, содержащий список;
//  ЭлементФормыСписок  - ТаблицаФормы       - элемент формы, содержащий список.
//
Процедура ПереместитьЭлементВверхВыполнить(РеквизитФормыСписок, ЭлементФормыСписок) Экспорт
	
	ПереместитьЭлементВыполнить(РеквизитФормыСписок, ЭлементФормыСписок, Истина);
	
КонецПроцедуры

// Обработчик команды "Переместить вниз" формы списка.
//
// Параметры:
//  РеквизитФормыСписок - ДинамическийСписок - реквизит формы, содержащий список;
//  ЭлементФормыСписок  - ТаблицаФормы       - элемент формы, содержащий список.
//
Процедура ПереместитьЭлементВнизВыполнить(РеквизитФормыСписок, ЭлементФормыСписок) Экспорт
	
	ПереместитьЭлементВыполнить(РеквизитФормыСписок, ЭлементФормыСписок, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПереместитьЭлементВыполнить(СписокРеквизит, СписокЭлемент, Вверх)
	
	УстановленныеОтборы = Новый Структура;
	
	Если Не ПроверитьСписокПередОперацией(СписокРеквизит, СписокЭлемент, УстановленныеОтборы) Тогда
		Возврат;
	КонецЕсли;
	
	ОтображениеСписком = (СписокЭлемент.Отображение = ОтображениеТаблицы.Список);
	
	ТекстОшибки = НастройкаПорядкаЭлементовСлужебныйВызовСервера.ИзменитьПорядокЭлементов(
								СписокЭлемент.ТекущиеДанные.Ссылка,
								УстановленныеОтборы,
								ОтображениеСписком,
								Вверх);
		
	Если ПустаяСтрока(ТекстОшибки) Тогда
		СписокЭлемент.Обновить();
	Иначе
		Предупреждение(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьСписокПередОперацией(СписокРеквизит, СписокЭлемент, УстановленныеОтборы)
	
	// Проверим, установлены ли текущие данные
	Если СписокЭлемент.ТекущиеДанные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим установленную сортировку
	Если Не СортировкаВСпискеУстановленаПравильно(СписокРеквизит) Тогда
		Предупреждение(НСтр("ru = 'Для изменения порядка элементов необходимо настроить сортировку
								  |списка таким образом, чтобы поле ""Порядок"" с видом сортировки
								  |""По возрастанию"" находилось на первой позиции.'"));
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим установленные отборы
	Если Не ПроверитьУстановленныеОтборыВСписке(СписокРеквизит, УстановленныеОтборы) Тогда
		Предупреждение(НСтр("ru = 'Для изменения порядка элементов необходимо отключить все отборы,
								  |кроме отборов по Владельцу и по Группе.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ЭлементГруппировки Из СписокРеквизит.Группировка.Элементы Цикл
		Если ЭлементГруппировки.Использование Тогда
			Предупреждение(НСтр("ru = 'Для изменения порядка элементов необходимо отключить все группировки.'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция СортировкаВСпискеУстановленаПравильно(СписокРеквизит)
	
	ЭлементыПорядка = СписокРеквизит.Порядок.Элементы;
	
	// Найдем первый используемый элемент порядка
	Элемент = Неопределено;
	Для Каждого ЭлементПорядка Из ЭлементыПорядка Цикл
		Если ЭлементПорядка.Использование Тогда
			Элемент = ЭлементПорядка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Элемент = Неопределено Тогда
		// Не установлена никакая сортировка
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Элемент) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
		Если Элемент.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
			ПолеРеквизита = Новый ПолеКомпоновкиДанных("РеквизитДопУпорядочивания");
			Если Элемент.Поле = ПолеРеквизита Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПроверитьУстановленныеОтборыВСписке(СписокРеквизит, УстановленныеОтборы)
	
	УстановленныеОтборы.Вставить("ЕстьОтборПоРодителю",  Ложь);
	УстановленныеОтборы.Вставить("ЕстьОтборПоВладельцу", Ложь);
	
	ПолеРодитель1 = Новый ПолеКомпоновкиДанных("Родитель");
	ПолеРодитель2 = Новый ПолеКомпоновкиДанных("Parent");
	ПолеВладелец1 = Новый ПолеКомпоновкиДанных("Владелец");
	ПолеВладелец2 = Новый ПолеКомпоновкиДанных("Owner");
	
	Для Каждого Отбор Из СписокРеквизит.Отбор.Элементы Цикл
		
		Если Не Отбор.Использование Тогда
			// Отбор не используется
			Продолжить;
		ИначеЕсли ТипЗнч(Отбор) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			// Группа элементов отбора не допустима
			Возврат Ложь;
		ИначеЕсли Отбор.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно Тогда
			// Допустимо только сравнение на равенство
			Возврат Ложь;
		КонецЕсли;
		
		Если (Отбор.ЛевоеЗначение = ПолеРодитель1) ИЛИ (Отбор.ЛевоеЗначение = ПолеРодитель2) Тогда
			// Установлен отбор по родителю
			УстановленныеОтборы.ЕстьОтборПоРодителю = Истина;
		ИначеЕсли (Отбор.ЛевоеЗначение = ПолеВладелец1) ИЛИ (Отбор.ЛевоеЗначение = ПолеВладелец2) Тогда
			// Установлен отбор по владельцу
			УстановленныеОтборы.ЕстьОтборПоВладельцу = Истина;
		Иначе
			// Установлен отбор по реквизиту, по которому нельзя устанавливать отбор
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
