////////////////////////////////////////////////////////////////////////////////
// ОбновлениеИнформационнойБазыЭД: механизм обмена электронными документами.
// Процедуры и функции обновления механизмов обмена ЭД.
//
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает список процедур-обработчиков обновления библиотеки для всех поддерживаемых версий ИБ.
//
// Пример добавления процедуры-обработчика в список:
//    Обработчик = Обработчики.Добавить();
//    Обработчик.Версия = "1.0.0.0";
//    Обработчик.Процедура = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//    Обработчик.Опциональный = Истина;
//
// Вызывается перед началом обновления данных ИБ.
//
Функция ОбработчикиОбновления() Экспорт
	
	Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	
	// Обработчики, выполняемые при каждом обновлении ИБ
	
	// Обработчики, выполняемые при заполнении пустой ИБ
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "0.0.0.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭД.ПервыйЗапуск";
	
	// Обработчики обновления новых версий
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.4.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭД.ОбновитьВидыДокументовВСоглашениях";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭД.ОбновитьВерсиюРегламентаЭДО";
	Обработчик.Опциональный = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.3.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЭД.ЗаполнитьКонтекстРаботыСКриптографией";
	Обработчик.Опциональный = Истина;
	
	Возврат Обработчики;
	
КонецФункции

// Возвращает номер версии библиотеки ЭлектронныеДокументы.
//
Функция ВерсияБиблиотеки() Экспорт
	
	Возврат "1.1.3.6";
	
КонецФункции

// Неинтерактивное обновление данных ИБ при смене версии библиотеки.
// Обязательная "точка входа" обновления ИБ в библиотеке.
//
Процедура ВыполнитьОбновлениеИнформационнойБазы() Экспорт
	
	ОбновлениеИнформационнойБазы.ВыполнитьИтерациюОбновления(
		"БиблиотекаЭлектронныхДокументов", ВерсияБиблиотеки(), ОбработчикиОбновления());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Регулярные обработчики для каждого обновления ИБ

////////////////////////////////////////////////////////////////////////////////
// Заполнения пустой ИБ

// Обработчик заполнения пустой ИБ.
//
Процедура ПервыйЗапуск() Экспорт
	
	Константы.КонтекстАвторизации.Установить(Перечисления.КонтекстыРаботыСЭД.НаКлиенте);
	Константы.КонтекстКриптографии.Установить(Перечисления.КонтекстыРаботыСЭД.НаКлиенте);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление новых версий ИБ

Процедура ОбновитьВидыДокументовВСоглашениях() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезКаталог)";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ИскомоеСоглашение = Результат.Ссылка.ПолучитьОбъект();
		ЗаписатьОбъект = Ложь;
		
		Если ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.ТОРГ12Продавец, "ИсходящийДокумент") = Неопределено Тогда
			НайденаяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.ТОРГ12, "ИсходящийДокумент");
			Если НайденаяСтрока <> Неопределено Тогда
				НоваяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент         = Перечисления.ВидыЭД.ТОРГ12Продавец;
				НоваяСтрока.ИспользоватьЭЦП           = НайденаяСтрока.ИспользоватьЭЦП;
				НоваяСтрока.ОжидатьКвитанциюОДоставке = НайденаяСтрока.ОжидатьКвитанциюОДоставке;
				НоваяСтрока.Формировать               = НайденаяСтрока.Формировать;
				ЗаписатьОбъект = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.ТОРГ12Покупатель, "ИсходящийДокумент") = Неопределено Тогда
			НайденаяСтрока = ИскомоеСоглашение.ВходящиеДокументы.Найти(Перечисления.ВидыЭД.ТОРГ12, "ВходящийДокумент");
			Если НайденаяСтрока <> Неопределено Тогда
				НоваяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент         = Перечисления.ВидыЭД.ТОРГ12Покупатель;
				НоваяСтрока.ИспользоватьЭЦП           = НайденаяСтрока.ИспользоватьЭЦП;
				НоваяСтрока.ОжидатьКвитанциюОДоставке = НайденаяСтрока.ОжидатьКвитанциюОДоставке;
				НоваяСтрока.Формировать               = НайденаяСтрока.Формировать;
				ЗаписатьОбъект = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.АктИсполнитель, "ИсходящийДокумент") = Неопределено Тогда
			НайденаяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.АктВыполненныхРабот, "ИсходящийДокумент");
			Если НайденаяСтрока <> Неопределено Тогда
				НоваяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент         = Перечисления.ВидыЭД.АктИсполнитель;
				НоваяСтрока.ИспользоватьЭЦП           = НайденаяСтрока.ИспользоватьЭЦП;
				НоваяСтрока.ОжидатьКвитанциюОДоставке = НайденаяСтрока.ОжидатьКвитанциюОДоставке;
				НоваяСтрока.Формировать               = НайденаяСтрока.Формировать;
				ЗаписатьОбъект = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ИскомоеСоглашение.ИсходящиеДокументы.Найти(Перечисления.ВидыЭД.АктЗаказчик, "ИсходящийДокумент") = Неопределено Тогда
			НайденаяСтрока = ИскомоеСоглашение.ВходящиеДокументы.Найти(Перечисления.ВидыЭД.АктВыполненныхРабот, "ВходящийДокумент");
			Если НайденаяСтрока <> Неопределено Тогда
				НоваяСтрока = ИскомоеСоглашение.ИсходящиеДокументы.Добавить();
				НоваяСтрока.ИсходящийДокумент         = Перечисления.ВидыЭД.АктЗаказчик;
				НоваяСтрока.ИспользоватьЭЦП           = НайденаяСтрока.ИспользоватьЭЦП;
				НоваяСтрока.ОжидатьКвитанциюОДоставке = НайденаяСтрока.ОжидатьКвитанциюОДоставке;
				НоваяСтрока.Формировать               = НайденаяСтрока.Формировать;
				ЗаписатьОбъект = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаписатьОбъект Тогда
			ИскомоеСоглашение.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьВерсиюРегламентаЭДО() Экспорт
	
	НаборЗаписей = РегистрыСведений.УчастникиОбменовЭДЧерезОператоровЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого Запись Из НаборЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(Запись.ВерсияРегламентаЭДО) Тогда
			Запись.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьКонтекстРаботыСКриптографией() Экспорт
	
	Константы.КонтекстАвторизации.Установить(Перечисления.КонтекстыРаботыСЭД.НаСервере);
	Константы.КонтекстКриптографии.Установить(Перечисления.КонтекстыРаботыСЭД.НаКлиенте);
	
КонецПроцедуры