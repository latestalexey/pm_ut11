////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции необходимые для работы форм
// подбора товаров. Модуль содержит вспомогательные функции,
// которые вызываются из клиентского и серверного модулей.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Функции-обертки для определения типа форм подборов.

// Функция проверяет, является ли форма формой подбора.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора, форма списка.
//
// Возвращаемое значение:
//	Булево. Истина - форма подбора, Ложь - форма списка.
//
Функция ЭтоФормаПодбора(Форма) Экспорт
	
	Если Форма.КодФормы = "Обработка_ПодборТоваровВДокументПродажи_Форма"
		ИЛИ Форма.КодФормы = "Обработка_ПодборТоваровВДокументЗакупки_Форма" 
		ИЛИ Форма.КодФормы = "Документ_ЧекККМ_ФормаДокументаМастер" 
		ИЛИ Форма.КодФормы = "Обработка_ПомощникПродаж_Форма" 
		//АК
		ИЛИ Форма.КодФормы = "Обработка_ПодборТоваровВДокументПродажи_Форма" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция проверяет, является ли форма формой подбора в документы закупки.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора, форма списка.
//
// Возвращаемое значение:
//	Булево. Истина - форма подбора в документ закупки, Ложь - нет.
//
Функция ЭтоФормаПодбораВДокументыЗакупки(Форма) Экспорт
	
	Если Форма.КодФормы = "Обработка_ПодборТоваровВДокументЗакупки_Форма" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция проверяет, является ли форма формой помощника продаж.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма.
//
// Возвращаемое значение:
//	Булево. Истина - форма помощника продаж, Ложь - форма списка.
//
Функция ЭтоФормаПомощникаПродаж(Форма) Экспорт
	
	Если Форма.КодФормы = "Обработка_ПомощникПродаж_Форма" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция проверяет, является ли форма формой чека ККМ.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма.
//
// Возвращаемое значение:
//	Булево. Истина - форма Чека ККМ, Ложь - форма списка.
//
Функция ЭтоФормаЧекаККМ(Форма) Экспорт
	
	Если Форма.КодФормы = "Документ_ЧекККМ_ФормаДокументаМастер" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция проверяет, является ли форма формой подбора в документы продажи.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора, форма списка.
//
// Возвращаемое значение:
//	Булево. Истина - форма подбора в документ продажи, Ложь - нет.
//
Функция ЭтоФормаПодбораВДокументыПродажи(Форма) Экспорт
	
	Если Форма.КодФормы = "Обработка_ПодборТоваровВДокументПродажи_Форма" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция проверяет, является ли форма формой списка.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора, форма списка.
//
// Возвращаемое значение:
//	Булево. Истина - форма списка, Ложь - форма подбора.
//
Функция ЭтоФормаСписка(Форма) Экспорт
	
	Если Форма.КодФормы = "Справочник_Номенклатура_ФормаСписка"
		ИЛИ Форма.КодФормы = "Справочник_Номенклатура_ФормаВыбора" 
		ИЛИ Форма.КодФормы = "Справочник_Номенклатура_ПодобныеТовары" 
		ИЛИ Форма.КодФормы = "Справочник_ХарактеристикиНоменклатуры_ФормаВыбора" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция проверяет, является ли форма формой выбора справочника "Характеристики
// номенклатуры".
//
Функция ЭтоФормаВыбораХарактеристик(Форма) Экспорт
	
	Если Форма.КодФормы = "Справочник_ХарактеристикиНоменклатуры_ФормаВыбора" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция проверяет, является ли форма формой  выбора справочника "Номенклатуры"
//
// Параметры:
//	Форма (УправляемаяФорма) - форма.
//
// Возвращаемое значение:
//	Булево. Истина - форма помощника продаж, Ложь - форма списка.
//
Функция ЭтоФормаВыбораНоменклатуры(Форма) Экспорт
	
	Если Форма.КодФормы = "Справочник_Номенклатура_ФормаВыбора" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция проверяет, является ли форма формой списка справочника "Номенклатуры".
//
// Параметры:
//	Форма (УправляемаяФорма) - форма.
//
// Возвращаемое значение:
//	Булево. Истина - форма помощника продаж, Ложь - форма списка.
//
Функция ЭтоФормаСпискаНоменклатуры(Форма) Экспорт
	
	Если Форма.КодФормы = "Справочник_Номенклатура_ФормаСписка" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее.

// Функция возвращает структуру строки номенклатуры. Структура используется
// для кэширования текущих данных из строки динамического списка номенклатуры.
//
Функция СтруктураСтрокиНоменклатуры() Экспорт
	
	СтрокаНоменклатуры = Новый Структура("Ссылка, ЭтоТовар, ЭтоУслуга, Родитель, ПометкаУдаления, ВидНоменклатуры, ТипНоменклатуры, Упаковка,
	                                     |ХарактеристикиИспользуются, Цена, ЭтоГруппа, ЕдиницаИзмерения, ИспользованиеХарактеристик,
	                                     |Номенклатура, ВНаличииОстаток, ЦеноваяГруппа");
	Возврат СтрокаНоменклатуры;
	
КонецФункции

// Функция возвращает структуру строки характеристик. Структура используется
// для кэширования текущих данных из строки динамического списка характеристик.
//
Функция СтруктураСтрокиХарактеристик() Экспорт
	
	СтрокаХарактеристик = Новый Структура("ПометкаУдаления, Ссылка, ВидНоменклатуры, ВНаличииОстаток, ЕдиницаИзмерения, Номенклатура,
	                                      |ТипНоменклатуры, Упаковка, Характеристика, ХарактеристикиИспользуются, Цена, ЦеноваяГруппа");
	Возврат СтрокаХарактеристик;
	
КонецФункции

// Процедура устанавливает текст информационной надписи о количестве и сумме
// товаров подобранных в корзину на форме подбора.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьТекстИнформационнойНадписи(Форма) Экспорт
	
	ЭтоФормаЧекаККМ         = ЭтоФормаЧекаККМ(Форма);
	ЭтоФормаПомощникаПродаж = ЭтоФормаПомощникаПродаж(Форма);
	
	Если ЭтоФормаЧекаККМ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоФормаПомощникаПродаж Тогда
		Корзина = Форма.Объект.Товары;
		Валюта = Форма.Объект.Валюта;
	Иначе
		Корзина = Форма.Объект.Корзина;
		Валюта = Форма.Валюта;
	КонецЕсли;
	
	Сумма = Формат(Корзина.Итог("Сумма"), "ЧЦ=15; ЧДЦ=2; ЧН=");
	Количество = НРег(ЧислоПрописью(Корзина.Количество(), "Л = ru_RU; ДП = Ложь; НП = Истина; НД = Ложь;", НСтр("ru = 'позиция,позиции,позиций,ж,,,,,0'")));
	
	ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано [Количество] товаров, на сумму [Сумма] [Валюта] [СкрытьПоказать]'");
	
	СкрытьПоказать = "";
	
	Если НЕ ЭтоФормаПомощникаПродаж Тогда
		
		Если Форма.РежимПодбораБезКоличественныхПараметров ИЛИ Форма.РежимПодбораБезСуммовыхПараметров Тогда
			ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано [Количество] товаров [СкрытьПоказать]'");
		КонецЕсли;
		
		СкрытьПоказать = ?(Форма.ПоказыватьПодобранныеТовары, НСтр("ru = '(скрыть)'"), НСтр("ru = '(показать)'"));
		
	КонецЕсли;
	
	ВставляемыеЗначения = Новый Структура("Количество, Сумма, Валюта, СкрытьПоказать", Количество, Сумма, Валюта, СкрытьПоказать);
	
	ИнформационнаяНадпись = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ИнформационнаяНадпись, ВставляемыеЗначения);
	
	Если НЕ ЭтоФормаПомощникаПродаж Тогда
		Форма.ИнформационнаяНадпись = ИнформационнаяНадпись;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает текст надписи о скрытии или отображении остатков.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьТекстНадписиОтображатьОстатки(Форма) Экспорт
	
	ОтображатьОстаткиНадпись = ?(Форма.ОтображатьОстатки, НСтр("ru = 'Подробная информация об остатках (скрыть)'"), НСтр("ru = 'Подробная информация об остатках (показать)'"));
	Форма.ОтображатьОстаткиНадпись = ОтображатьОстаткиНадпись;
	
КонецПроцедуры

// Функция возвращает структуру необходимую для передачи данных о товаре в
// процедуры добавления товара в корзину.
//
// Возвращаемое значение:
//	Структура. Структура параметров товара.
//
Функция ПараметрыТовара() Экспорт
	
	ПараметрыТовара = Новый Структура();
	ПараметрыТовара.Вставить("Номенклатура",               ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ТипНоменклатуры",            ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПустаяСсылка"));
	ПараметрыТовара.Вставить("Характеристика",             ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ХарактеристикиИспользуются", Ложь);
	ПараметрыТовара.Вставить("Упаковка",                   ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ВидЦены",                    ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"));
	ПараметрыТовара.Вставить("Цена",                       0);
	ПараметрыТовара.Вставить("Склад",                      ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ДатаОтгрузки",               '00010101');
	ПараметрыТовара.Вставить("СрокПоставки",               0);
	ПараметрыТовара.Вставить("КоличествоУпаковок",         0);
	ПараметрыТовара.Вставить("ЭтоТовар",                   Ложь);
	ПараметрыТовара.Вставить("ЭтоУслуга",                  Ложь);
	ПараметрыТовара.Вставить("УсловиеЦеныПоставщика",      ПредопределенноеЗначение("Справочник.УсловияЦенПоставщиков.ПустаяСсылка"));
	ПараметрыТовара.Вставить("НоменклатураПоставщика",     ПредопределенноеЗначение("Справочник.НоменклатураПоставщиков.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ЦеноваяГруппа",              ПредопределенноеЗначение("Справочник.ЦеновыеГруппы.ПустаяСсылка"));
	ПараметрыТовара.Вставить("ПроцентРучнойСкидки",        0);
	ПараметрыТовара.Вставить("СуммаРучнойСкидки",          0);
	ПараметрыТовара.Вставить("ПерейтиКСпискуХарактеристик",Истина);
	
	Возврат ПараметрыТовара;
	
КонецФункции

// Формирует текст информационной надписи о количестве и сумме подобранных товаров.
//
// Параметры:
// 		ИнформационнаяНадпись (Строка)- реквизит, в который будет помещена информационная надпись,
// 		КоличествоТоваров (Число) - количество товаров,
// 		СуммаТоваров (Число) - сумма товаров,
// 		Валюта (СправочникСсылка.Валюты) - валюта, в которой осуществляется подбор товаров.
//
Процедура СформироватьИнформационнуюНадписьПодобранныхТоваров(ИнформационнаяНадпись, КоличествоТоваров, СуммаТоваров, Валюта) Экспорт
	
	ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано позиций [КоличествоТоваров] на сумму [СуммаТоваров] [Валюта]'");
	
	ВставляемыеЗначения = Новый Структура("КоличествоТоваров, СуммаТоваров, Валюта");
	
	ВставляемыеЗначения.КоличествоТоваров = Формат(КоличествоТоваров, "ЧН=0");
	ВставляемыеЗначения.СуммаТоваров      = Формат(СуммаТоваров, "ЧЦ=15; ЧДЦ=2; ЧН=0,00");
	ВставляемыеЗначения.Валюта            = Валюта;
	
	ИнформационнаяНадпись = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ИнформационнаяНадпись, ВставляемыеЗначения);
	
КонецПроцедуры

// Процедура удаляет строки из таблицы остатков на формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура ОчиститьТаблицуОстатков(Форма) Экспорт
	
	Если ЭтоФормаЧекаККМ(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ОстаткиТоваров = Форма.ОстаткиТоваров.ПолучитьЭлементы();
	ОстаткиТоваров.Очистить();
	
КонецПроцедуры

// Проверяет, есть ли в корзине товары продаваемые совместно.
//
// Параметры:
//	Объект (ОбработкаОбъект, ДокументОбъект) - обработка подбора товаров, документ.
//
// Возвращаемое значение:
//	Булево.
//
Функция ЕстьТоварыПродаваемыеСовместно(Форма, Объект) Экспорт
	
	ЭтоФормаЧекаККМ = ЭтоФормаЧекаККМ(Форма);
	ЭтоФормаПомощникаПродаж = ЭтоФормаПомощникаПродаж(Форма);
	
	Если ЭтоФормаЧекаККМ ИЛИ ЭтоФормаПомощникаПродаж Тогда
		Возврат Объект.Товары.Итог("ИндексСовместноПродаваемыеТовары") > 0;
	Иначе
		Возврат Объект.Корзина.Итог("ИндексСовместноПродаваемыеТовары") > 0;
	КонецЕсли; 
	
КонецФункции

// Процедура устанавливает видимость команды перехода с списку совместно продаваемых товаров.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора,
//	Объект (ОбработкаОбъект, ДокументОбъект) - обработка подбора или документ.
//
Процедура УстановитьВидимостьКомандыПодбораНоменклатурыПродаваемойСовместно(Форма, Объект) Экспорт
	
	Форма.Элементы.СПодобраннойНоменклатуройСовместноПродается.Видимость = ЕстьТоварыПродаваемыеСовместно(Форма, Объект);
	
КонецПроцедуры

// Процедура заполняет список выбора вариантов навигации на форме подбора товаров.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора,
//	Объект (ОбработкаОбъект, ДокументОбъект) - объект подбора.
//
Процедура ЗаполнитьСписокВыбораВариантовНавигации(Форма, Объект) Экспорт
	
	Форма.Элементы.ВариантНавигации.СписокВыбора.Очистить();
	
	СписокВыбораВариантов = Новый СписокЗначений;
	СписокВыбораВариантов.Добавить("ПоСвойствам", "виду и свойствам");
	СписокВыбораВариантов.Добавить("ПоИерархии", "иерархии");
	СписокВыбораВариантов.Добавить("ПоТоварамДругогоКачества", "товарам другого качества");
	
	Если ЕстьТоварыПродаваемыеСовместно(Форма, Объект) Тогда
		СписокВыбораВариантов.Добавить("Совместно", "совместным продажам");
	КонецЕсли;
	
	Для каждого ЭлементСписка Из СписокВыбораВариантов Цикл
		Форма.Элементы.ВариантНавигации.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Формирует заголовок формы подбора, состоящий из заголовка формы и представления документа.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора товаров.
//
Процедура УстановитьЗаголовокФормыПодбора(Форма) Экспорт
	
	Документ = Форма.Параметры.Документ;
	
	Если Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		Форма.Заголовок = Форма.Заголовок + ": " + Документ;
		
	Иначе
		
		ТекстДокумент = НСтр("ru='%ТипДокумента% (новый)'");
		ТекстДокумент = СтрЗаменить(ТекстДокумент, "%ТипДокумента%", Документ.Метаданные().Синоним);
		
		Форма.Заголовок = Форма.Заголовок + ": " + ТекстДокумент;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует заголовок формы подбора, состоящий из заголовка формы и представления документа.
//
// Параметры:
//	Заголовок (Строка) - заголовок формы,
//	Документ (ДокументСсылка) - ссылка на документ, из которого открывается подбор.
//
// Возвращаемое значение:
//	Строка.Заголовок формы подбора.
//
Функция СформироватьЗаголовокФормыПодбора(Заголовок, Документ) Экспорт
	
	Если Документ = Неопределено Тогда
		Возврат Заголовок;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		Заголовок = Заголовок + ": " + Документ;
		
	Иначе
		
		ТекстДокумент = НСтр("ru='%1 (новый)'");
		ТекстДокумент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДокумент, Документ.Метаданные().Синоним);
		
		Заголовок = Заголовок + ": " + ТекстДокумент;
		
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
