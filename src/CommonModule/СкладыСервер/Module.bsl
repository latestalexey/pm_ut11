////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

//Функция возращает признак использования на складе(помещении) хранения остатков в разрезе ячеек
//	Параметры
//			Склад - ссылка на элемент справочника "Склады
//			Помещение - ссылка на элемент справочника "Складские помещения"
Функция ИспользоватьАдресноеХранение(Склад, Помещение) Экспорт
	СтруктураПараметров = Новый Структура("Склад, Помещение",Склад, Помещение);
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение", СтруктураПараметров);
КонецФункции

//Функция возращает основание для заполнения в складских актах
//	Параметры:
//			ДокументСсылка - ссылка на документ, на основании которого вводится складской акт
Функция ОснованиеОформленияИзлишковНедостачТоваров(ДокументСсылка) Экспорт 
	
	Основание = Неопределено;
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РаспоряжениеНаИнвентаризациюТоваров") Тогда
		
		Основание = ДокументСсылка;
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОрдерНаОтражениеРезультатовПересчетовТоваров") Тогда 
		
		Основание = ДокументСсылка.ДокументОснование;
		
	Иначе
		
		Основание = ДокументСсылка;
		
	КонецЕсли;
	
	Возврат Основание;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры записи движений в регистры.

// Процедура формирования движений по регистру "Блокировки складских ячеек".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьБлокировкиСкладскихЯчеек(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаБлокировкиСкладскихЯчеек;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияБлокировкиСкладскихЯчеек = Движения.БлокировкиСкладскихЯчеек;
	ДвиженияБлокировкиСкладскихЯчеек.Записывать = Истина;
	ДвиженияБлокировкиСкладскихЯчеек.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Товары в ячейках".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьТоварыВСкладскихЯчейках(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыВСкладскихЯчейках;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияБлокировкиСкладскихЯчеек = Движения.ТоварыВЯчейках;
	ДвиженияБлокировкиСкладскихЯчеек.Записывать = Истина;
	ДвиженияБлокировкиСкладскихЯчеек.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Товары к отбору".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьТоварыКОтбору(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКОтбору;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияБлокировкиСкладскихЯчеек = Движения.ТоварыКОтбору;
	ДвиженияБлокировкиСкладскихЯчеек.Записывать = Истина;
	ДвиженияБлокировкиСкладскихЯчеек.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Движения серий товаров".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДвиженияСерийТоваров;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ДвиженияСерийТоваров.Записывать = Истина;
	Движения.ДвиженияСерийТоваров.Загрузить(Таблица);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры размещения товара в ячейках.

//Процедура проверяет заполненность реквизитов упаковки и сопоставленность номенклатуры, упаковки и области хранения
//	У упаковки должны быть заполнены: "Вес" и либо стоять флаг "Безразмерная", либо заполнены реквизиты "Высота"
//  	"Ширина", "Глубина", "Объем".
//Параметры:
// МенеджерВременныхТаблиц - менеджер временных таблиц запроса, создавшего пул номенклатуры к размещению
//							процедура не удаляет временные таблицы, управляемые менеджером
// Склад - склад, на котором необходимо разместить товар
// Помещение - складское помещение, в котором располагаются ячейки, если используется деление
//						адресов хранения по помещениям, если не используется необходимо передавать пустую ссылку
//Отказ - реквизит, через который вернется результат проверки (ложь - проверка прошла удачно)
Процедура ПроверитьПараметрыНоменклатурыДляРазмещения(МенеджерВременныхТаблиц,Склад, Помещение, Отказ) Экспорт
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатуры.СкладскаяГруппаУпаковок КАК СкладскаяГруппаУпаковок,
	|	ТаблицаНоменклатуры.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаНоменклатуры.СкладскаяГруппаУпаковок) КАК СкладскаяГруппаУпаковокПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаНоменклатуры.СкладскаяГруппаНоменклатуры) КАК СкладскаяГруппаНоменклатурыПредставление
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаРазмещенияТоваровВЯчейках КАК ПравилаРазмещенияТоваровВЯчейках
	|		ПО (ТаблицаНоменклатуры.СкладскаяГруппаНоменклатуры = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаНоменклатуры
	|					И ТаблицаНоменклатуры.СкладскаяГруппаУпаковок = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаУпаковок
	|				ИЛИ ТаблицаНоменклатуры.СкладскаяГруппаНоменклатуры = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаНоменклатуры
	|					И ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаУпаковок = ЗНАЧЕНИЕ(Справочник.СкладскиеГруппыУпаковок.ПустаяСсылка)
	|				ИЛИ ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаНоменклатуры = ЗНАЧЕНИЕ(Справочник.СкладскиеГруппыНоменклатуры.ПустаяСсылка)
	|					И ТаблицаНоменклатуры.СкладскаяГруппаУпаковок = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаУпаковок
	|				ИЛИ ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаНоменклатуры = ЗНАЧЕНИЕ(Справочник.СкладскиеГруппыНоменклатуры.ПустаяСсылка)
	|					И ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаУпаковок = ЗНАЧЕНИЕ(Справочник.СкладскиеГруппыУпаковок.ПустаяСсылка))
	|			И (ПравилаРазмещенияТоваровВЯчейках.Помещение = &Помещение)
	|			И (ПравилаРазмещенияТоваровВЯчейках.Склад = &Склад)
	|ГДЕ
	|	ПравилаРазмещенияТоваровВЯчейках.ОбластьХранения ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Упаковка КАК Упаковка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаНоменклатуры.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаНоменклатуры.Упаковка) КАК УпаковкаПредставление
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|ГДЕ
	|	(ТаблицаНоменклатуры.Вес = 0
	|			ИЛИ (НЕ ТаблицаНоменклатуры.Безразмерная)
	|				И (ТаблицаНоменклатуры.Высота = 0
	|					ИЛИ ТаблицаНоменклатуры.Ширина = 0
	|					ИЛИ ТаблицаНоменклатуры.Глубина = 0
	|					ИЛИ ТаблицаНоменклатуры.Объем = 0))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.Упаковка КАК Упаковка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаНоменклатуры.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаНоменклатуры.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаНоменклатуры.Упаковка) КАК УпаковкаПредставление
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|ГДЕ
	|	(ВЫРАЗИТЬ(ТаблицаНоменклатуры.КоличествоУпаковок КАК ЧИСЛО(15, 0))) - ТаблицаНоменклатуры.КоличествоУпаковок <> 0";	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Выборка = Результат[0].Выбрать();
	
	ШаблонТекстаСоообщения = НСтр("ru='Для складской группы номенклатуры ""%СкладскаяГруппаНоменклатуры%"" 
	                          		|и складской группы упаковок ""%СкладскаяГруппаУпаковок%"" не задано правило размещения'");
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрЗаменить(ШаблонТекстаСоообщения,"%СкладскаяГруппаНоменклатуры%",СокрЛП(Выборка.СкладскаяГруппаНоменклатурыПредставление));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%СкладскаяГруппаУпаковок%",СокрЛП(Выборка.СкладскаяГруппаУпаковокПредставление));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
	КонецЦикла;
	
	Выборка = Результат[1].Выбрать();
	
	ШаблонТекстаСоообщения = НСтр("ru='Для упаковки ""%Упаковка%"" номенклатуры ""%Номенклатура%"" не заданы весо-размерные характеристики'");
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрЗаменить(ШаблонТекстаСоообщения,"%Упаковка%",СокрЛП(Выборка.УпаковкаПредставление));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Номенклатура%",СокрЛП(Выборка.НоменклатураПредставление));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
	КонецЦикла;
	
	Выборка = Результат[2].Выбрать();
	
	ШаблонТекстаСоообщения = НСтр("ru='Для товара %Товар% в упаковке %Упаковка% указано дробное количество упаковок к размещению.
	|Автоматическое размещение дробного количества упаковок не поддерживается'");
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрЗаменить(ШаблонТекстаСоообщения,"%Упаковка%",СокрЛП(Выборка.УпаковкаПредставление));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Товар%",НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.НоменклатураПредставление,
																												Выборка.ХарактеристикаПредставление));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

//Процедура формирует таблицу размещения товара по ячейках хранения.
//В текущей версии алгоритма учитывается:
//- блокировки ячеек;
//- области хранения по приоритетам для каждой упаковки каждой номенклатуры;
//- уровни доступности ячеек;
//- контроль габаритов (в ячейку не размещается товар, который больше ее по любому габариту (если только ячейка
//	не неограниченная по размерам);
//- контроль занятого объема в ячейке с учетом уже хранимого товара, товара к размещению и товара, обрабатываемого алгоритмом
//	(для неограниченных по размерам ячеек не контролируется);
//- контроль занятого веса в ячейке с учетом уже хранимого товара, товара к размещению и товара, обрабатываемого алгоритмом
//	(для неограниченных по грузоподъемности ячеек не контролируется);
//- безразмерные упаковки размещаются только в неограниченные по размерам ячейки.
//Параметры:
// МенеджерВременныхТаблиц - менеджер временных таблиц запроса, создавшего пул номенклатуры к размещению
//							процедура не удаляет временные таблицы, управляемые менеджером
// Склад - склад, на котором необходимо разместить товар
// Помещение - складское помещение, в котором располагаются ячейки, если используется деление
//						адресов хранения по помещениям, если не используется необходимо передавать пустую ссылку
Функция РазместитьТоварВЯчейках(МенеджерВременныхТаблиц, Склад, Помещение, ОшибкаПроверки) Экспорт 
	
	ПроверитьПараметрыНоменклатурыДляРазмещения(МенеджерВременныхТаблиц,Склад, Помещение, ОшибкаПроверки);	
	
	Если ОшибкаПроверки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРезультатов.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаРезультатов.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	ТаблицаРезультатов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРезультатов.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаРезультатов.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("ВесУпаковки", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("ОбъемУпаковки", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(18,6,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("ПорядокОбхода", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(6,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(19,ДопустимаяДлина.Фиксированная)));
	ТаблицаРезультатов.Колонки.Добавить("РабочийУчасток", Новый ОписаниеТипов(Новый ОписаниеТипов("СправочникСсылка.РабочиеУчастки")));
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаОшибок.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаОшибок.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаОшибок.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаОшибок.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Любой)));
	ТаблицаОшибок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Любой)));
	
	ТаблицаНаполненияЯчеек = Новый ТаблицаЗначений;
	ТаблицаНаполненияЯчеек.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	ТаблицаНаполненияЯчеек.Колонки.Добавить("Объем", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаНаполненияЯчеек.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаНаполненияЯчеек.Индексы.Добавить("Ячейка");
	
	МассивУчастков = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Упаковка КАК Упаковка,
	|	Таблица.Серия КАК Серия,
	|	Таблица.УчетСерийПоFEFO КАК УчетСерийПоFEFO,
	|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Высота КАК Высота,
	|	Таблица.Ширина КАК Ширина,
	|	Таблица.Глубина КАК Глубина,
	|	Таблица.Объем КАК Объем,
	|	Таблица.Безразмерная КАК Безразмерная,
	|	Таблица.Вес КАК Вес,
	|	Таблица.ГоденДо КАК ГоденДо,
	|	Таблица.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры,
	|	Таблица.СкладскаяГруппаУпаковок КАК СкладскаяГруппаУпаковок,
	|	Таблица.КоличествоВУпаковке КАК КоличествоВУпаковке
	|ИЗ
	|	ТаблицаНоменклатуры КАК Таблица
	|
	|УПОРЯДОЧИТЬ ПО
	|   УчетСерийПоFEFO,
	|	Номенклатура.Наименование,
	|	Характеристика.Наименование,
	|	ГоденДо,
	|	Упаковка.Наименование
	|
	|ИТОГИ
	|	СУММА(КоличествоУпаковок)
	|ПО
	|	Номенклатура,
	|	Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаРазмещенияТоваровВЯчейках.ОбластьХранения КАК ОбластьХранения,
	|	ТаблицаНоменклатуры.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры,
	|	ТаблицаНоменклатуры.СкладскаяГруппаУпаковок КАК СкладскаяГруппаУпаковок,
	|	ПравилаРазмещенияТоваровВЯчейках.Приоритет КАК ПриоритетОбласти
	|ПОМЕСТИТЬ ОбластиХраненияСкладскихГрупп
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаРазмещенияТоваровВЯчейках КАК ПравилаРазмещенияТоваровВЯчейках
	|		ПО ТаблицаНоменклатуры.СкладскаяГруппаНоменклатуры = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаНоменклатуры
	|					И ТаблицаНоменклатуры.СкладскаяГруппаУпаковок = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаУпаковок
	|ГДЕ
	|	ПравилаРазмещенияТоваровВЯчейках.Склад = &Склад
	|	И ПравилаРазмещенияТоваровВЯчейках.Помещение = &Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпрЯчейки.Ссылка КАК Ячейка,
	|	ОбластиХраненияСкладскихГрупп.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры,
	|	ОбластиХраненияСкладскихГрупп.СкладскаяГруппаУпаковок КАК СкладскаяГруппаУпаковок,
	|	МИНИМУМ(ОбластиХраненияСкладскихГрупп.ПриоритетОбласти) КАК ПриоритетОбласти
	|ПОМЕСТИТЬ ТаблицаЯчеекДляЗапроса
	|ИЗ
	|	ОбластиХраненияСкладскихГрупп КАК ОбластиХраненияСкладскихГрупп
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкладскиеЯчейки КАК СпрЯчейки
	|		ПО (СпрЯчейки.ОбластьХранения = ОбластиХраненияСкладскихГрупп.ОбластьХранения)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БлокировкиСкладскихЯчеек КАК БлокировкиЯчеек
	|		ПО (СпрЯчейки.Ссылка = БлокировкиЯчеек.Ячейка)
	|			И (БлокировкиЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Полная)
	|				ИЛИ БлокировкиЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Размещение))
	|ГДЕ
	|	БлокировкиЯчеек.ТипБлокировки ЕСТЬ NULL 
	|	И СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Хранение)
	|	И (НЕ СпрЯчейки.ЭтоГруппа)
	|	И (НЕ СпрЯчейки.ПометкаУдаления)
	|	И (СпрЯчейки.Владелец = &Склад)
	|	И (СпрЯчейки.Помещение = &Помещение)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпрЯчейки.Ссылка,
	|	ОбластиХраненияСкладскихГрупп.СкладскаяГруппаНоменклатуры,
	|	ОбластиХраненияСкладскихГрупп.СкладскаяГруппаУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	СУММА((ТоварыВЯчейкахОстатки.ВНаличииОстаток + ТоварыВЯчейкахОстатки.КРазмещениюОстаток) * ТоварыВЯчейкахОстатки.Упаковка.Объем) КАК ЗанятыйОбъем,
	|	СУММА((ТоварыВЯчейкахОстатки.ВНаличииОстаток + ТоварыВЯчейкахОстатки.КРазмещениюОстаток) * ТоварыВЯчейкахОстатки.Упаковка.Вес) КАК ЗанятыйВес
	|ПОМЕСТИТЬ ЗапросПоЗанятомуОбъемуВесу
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			Ячейка В
	|				(ВЫБРАТЬ
	|					ТаблицаЯчеекДляЗапроса.Ячейка
	|				ИЗ
	|					ТаблицаЯчеекДляЗапроса КАК ТаблицаЯчеекДляЗапроса)) КАК ТоварыВЯчейкахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВЯчейкахОстатки.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЯчеекДляЗапроса.Ячейка КАК Ячейка,
	|	ТаблицаЯчеекДляЗапроса.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры,
	|	ТаблицаЯчеекДляЗапроса.СкладскаяГруппаУпаковок КАК СкладскаяГруппаУпаковок,
	|	ТаблицаЯчеекДляЗапроса.ПриоритетОбласти КАК ПриоритетОбласти,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.УровеньДоступности КАК УровеньДоступности,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.ПорядокОбхода КАК ПорядокОбхода,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.РабочийУчасток КАК РабочийУчасток,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.Код КАК Код,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.Объем * ТаблицаЯчеекДляЗапроса.Ячейка.МаксимальныйКоэффициентНаполненностиПоОбъему / 100 - ЕСТЬNULL(ЗапросПоЗанятомуОбъемуВесу.ЗанятыйОбъем, 0) КАК СвободныйОбъем,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.Грузоподъемность * ТаблицаЯчеекДляЗапроса.Ячейка.МаксимальныйКоэффициентНаполненностиПоВесу / 100 - ЕСТЬNULL(ЗапросПоЗанятомуОбъемуВесу.ЗанятыйВес, 0) КАК СвободныйВес,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.Ширина КАК Ширина,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.Глубина КАК Глубина,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.Высота КАК Высота,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.НеОграниченаПоГрузоподъемности КАК НеОграниченаПоГрузоподъемности,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.НеОграниченаПоРазмерам КАК НеОграниченаПоРазмерам,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.ОбластьХранения.ПриоритетРазмещенияВСвободныеЯчейки КАК ПриоритетРазмещенияВСвободныеЯчейки,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.ОбластьХранения.ПриоритетРазмещенияВМонотоварныеЯчейки КАК ПриоритетРазмещенияВМонотоварныеЯчейки,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.ОбластьХранения.ПриоритетРазмещенияВСмешанныеЯчейки КАК ПриоритетРазмещенияВСмешанныеЯчейки,
	|	ТаблицаЯчеекДляЗапроса.Ячейка.ОбластьХранения.ПриоритетРазмещенияВЯчейкиСДругимТоваром КАК ПриоритетРазмещенияВЯчейкиСДругимТоваром
	|ПОМЕСТИТЬ ТаблицаЯчеек
	|ИЗ
	|	ТаблицаЯчеекДляЗапроса КАК ТаблицаЯчеекДляЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗапросПоЗанятомуОбъемуВесу КАК ЗапросПоЗанятомуОбъемуВесу
	|		ПО ТаблицаЯчеекДляЗапроса.Ячейка = ЗапросПоЗанятомуОбъемуВесу.Ячейка
	|ГДЕ
	|	(ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.Объем * ТаблицаЯчеекДляЗапроса.Ячейка.МаксимальныйКоэффициентНаполненностиПоОбъему / 100 - ЕСТЬNULL(ЗапросПоЗанятомуОбъемуВесу.ЗанятыйОбъем, 0) > 0
	|			ИЛИ ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.НеОграниченаПоРазмерам)
	|	И (ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.Грузоподъемность * ТаблицаЯчеекДляЗапроса.Ячейка.МаксимальныйКоэффициентНаполненностиПоВесу / 100 - ЕСТЬNULL(ЗапросПоЗанятомуОбъемуВесу.ЗанятыйВес, 0) > 0
	|			ИЛИ ТаблицаЯчеекДляЗапроса.Ячейка.Типоразмер.НеОграниченаПоГрузоподъемности)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СкладскаяГруппаНоменклатуры,
	|	СкладскаяГруппаУпаковок,
	|	Ячейка,
	|   ПриоритетОбласти,
	|	НеОграниченаПоГрузоподъемности,
	|	НеОграниченаПоРазмерам,
	|	РабочийУчасток,
	|	УровеньДоступности,
	|	ПорядокОбхода,
	|	СвободныйОбъем,
	|	СвободныйВес,
	|	Ширина,
	|	Глубина,
	|	Высота
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка
	|ПОМЕСТИТЬ ТоварыВЯчейкахОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			Ячейка В
	|				(ВЫБРАТЬ
	|					ТаблицаЯчеек.Ячейка
	|				ИЗ
	|					ТаблицаЯчеек КАК ТаблицаЯчеек)) КАК ТоварыВЯчейкахОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ячейка,
	|	Номенклатура
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ТоварыВЯчейкахОстатки.Серия.ГоденДо) КАК ГоденДо,
	|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка
	|ПОМЕСТИТЬ МаксимальныеСрокиГодностиВЯчейках
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ТаблицаНоменклатуры.Номенклатура,
	|						ТаблицаНоменклатуры.Характеристика
	|					ИЗ
	|						ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|					ГДЕ
	|						ТаблицаНоменклатуры.УчетСерийПоFEFO)
	|				И Ячейка В
	|					(ВЫБРАТЬ
	|						ТаблицаЯчеек.Ячейка
	|					ИЗ
	|						ТаблицаЯчеек КАК ТаблицаЯчеек)) КАК ТоварыВЯчейкахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВЯчейкахОстатки.Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика,
	|	ТоварыВЯчейкахОстатки.Ячейка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Ячейка,
	|	ГоденДо
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаЯчеекДляЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОбластиХраненияСкладскихГрупп
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗапросПоЗанятомуОбъемуВесу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка) КАК Ячейка,
	|	0 КАК Объем,
	|	0 КАК Вес
	|ПОМЕСТИТЬ ТаблицаНаполненияЯчеек";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Помещение",Помещение);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаПоНоменклатуре = МассивРезультатов[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
		ВыборкаПоУпаковкам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоУпаковкам.Следующий() Цикл
			КоличествоУпаковок = ВыборкаПоУпаковкам.КоличествоУпаковок;
			
			ВыборкаПоХарактеристикам = ВыборкаПоУпаковкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			РазместитьСтрокуХарактеристики(МенеджерВременныхТаблиц,
											ВыборкаПоХарактеристикам,
											ТаблицаРезультатов,
											ТаблицаОшибок,
											МассивУчастков,
											ТаблицаНаполненияЯчеек,
											КоличествоУпаковок);
		КонецЦикла;
		
	КонецЦикла;
	ТаблицаРезультатов.Сортировать("ПорядокОбхода,Код");
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТаблицаРезультатов",ТаблицаРезультатов);
	СтруктураВозврата.Вставить("ТаблицаОшибок",ТаблицаОшибок);
	СтруктураВозврата.Вставить("МассивУчастков",МассивУчастков);
	
	Возврат СтруктураВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры отбора товара из ячейках.

//Процедура формирует таблицу отбора товара из ячеек хранения.
//В текущей версии алгоритма учитывается:
//- блокировки ячеек;
//- уровни доступности ячеек;
//- остатки товара нужной характеристики в необходимой упаковке в ячейке;
//Параметры:
// МенеджерВременныхТаблиц - менеджер временных таблиц запроса, создавшего пул номенклатуры к размещению
//							процедура не удаляет временные таблицы, управляемые менеджером
// Склад - склад, на котором необходимо разместить товар
// Помещение - складское помещение, в котором располагаются ячейки, если используется деление
//						адресов хранения по помещениям, если не используется необходимо передавать пустую ссылку
Функция ОтобратьТоварИзЯчеек(МенеджерВременныхТаблиц, Склад, Помещение) Экспорт
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРезультатов.Колонки.Добавить("Распоряжение");
	ТаблицаРезультатов.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаРезультатов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРезультатов.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаРезультатов.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	ТаблицаРезультатов.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("ВесУпаковки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("ОбъемУпаковки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(18,6,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("Безразмерная", Новый ОписаниеТипов("Булево"));
	ТаблицаРезультатов.Колонки.Добавить("ПорядокОбхода", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(6,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("РабочийУчасток", Новый ОписаниеТипов(Новый ОписаниеТипов("СправочникСсылка.РабочиеУчастки")));
	
	ТаблицаРасходаИзЯчеек = Новый ТаблицаЗначений;
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаРасходаИзЯчеек.Индексы.Добавить("Ячейка,Номенклатура,Упаковка,Характеристика");
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаОшибок.Колонки.Добавить("Распоряжение");
	ТаблицаОшибок.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаОшибок.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаОшибок.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаОшибок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Любой)));
	
	МассивУчастков = Новый Массив;
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	//В запросе выбираются все ячейки по которым есть остатки и ячейки сортируются по правилам
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|	ТоварыВЯчейкахОстатки.Серия КАК Серия,
	|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	ТоварыВЯчейкахОстатки.Ячейка.Код КАК Код,
	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток КАК СвободныйОстаток,
	|	ТоварыВЯчейкахОстатки.Ячейка.УровеньДоступности КАК УровеньДоступности,
	|	ТоварыВЯчейкахОстатки.Ячейка.РабочийУчасток КАК РабочийУчасток,
	|	ТоварыВЯчейкахОстатки.Ячейка.ПорядокОбхода КАК ПорядокОбхода,
	|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
	|	ТоварыВЯчейкахОстатки.Упаковка.Коэффициент КАК КоличествоВУпаковке,
	|	ТоварыВЯчейкахОстатки.Упаковка.Вес КАК Вес,
	|	ТоварыВЯчейкахОстатки.Упаковка.СкладскаяГруппа КАК СкладскаяГруппаУпаковок,
	|	ТоварыВЯчейкахОстатки.Упаковка.Объем КАК Объем,
	|	ТоварыВЯчейкахОстатки.Упаковка.Безразмерная КАК Безразмерная,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораИзМонотоварныхЯчеек КАК ПриоритетОтбораИзМонотоварныхЯчеек,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораИзСмешанныхЯчеек КАК ПриоритетОтбораИзСмешанныхЯчеек,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораПодОстаток КАК ПриоритетОтбораПодОстаток,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения КАК ОбластьХранения
	|ПОМЕСТИТЬ ТоварыВЯчейкахОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|						ТаблицаНоменклатуры.Характеристика КАК Характеристика
	|					ИЗ
	|						ТаблицаНоменклатуры КАК ТаблицаНоменклатуры)
	|				И Ячейка В
	|					(ВЫБРАТЬ
	|						СпрЯчейки.Ссылка КАК СкладскаяЯчейка
	|					ИЗ
	|						Справочник.СкладскиеЯчейки КАК СпрЯчейки ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БлокировкиСкладскихЯчеек КАК БлокировкиЯчеек
	|							ПО
	|								СпрЯчейки.Ссылка = БлокировкиЯчеек.Ячейка
	|									И (БлокировкиЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Полная)
	|										ИЛИ БлокировкиЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Отбор))
	|					ГДЕ
	|						БлокировкиЯчеек.ТипБлокировки ЕСТЬ NULL 
	|						И СпрЯчейки.Помещение = &Помещение
	|						И СпрЯчейки.Владелец = &Склад
	|						И НЕ СпрЯчейки.ЭтоГруппа
	|						И (СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Хранение)
	|							ИЛИ СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Архив)))) КАК ТоварыВЯчейкахОстатки
	|ГДЕ
	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.Серия КАК Серия,
	|	ТаблицаНоменклатуры.Распоряжение КАК Распоряжение,
	|	ТаблицаНоменклатуры.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ТаблицаНоменклатуры.Приоритет КАК Приоритет,
	|	ТаблицаНоменклатуры.Количество КАК Количество,
	|	ТаблицаНоменклатуры.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры,
	|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	ТоварыВЯчейкахОстатки.Код КАК Код,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.СвободныйОстаток, 0) КАК СвободныйОстаток,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.УровеньДоступности, 9999999999) КАК УровеньДоступности,
	|	ТоварыВЯчейкахОстатки.РабочийУчасток КАК РабочийУчасток,
	|	ТоварыВЯчейкахОстатки.ПорядокОбхода КАК ПорядокОбхода,
	|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
	|	ТоварыВЯчейкахОстатки.КоличествоВУпаковке КАК КоличествоВУпаковке,
	|	ТоварыВЯчейкахОстатки.Вес КАК Вес,
	|	ТоварыВЯчейкахОстатки.СкладскаяГруппаУпаковок КАК СкладскаяГруппаУпаковок,
	|	ТоварыВЯчейкахОстатки.Объем КАК Объем,
	|	ТоварыВЯчейкахОстатки.Безразмерная КАК Безразмерная,
	|	ТоварыВЯчейкахОстатки.ПриоритетОтбораИзМонотоварныхЯчеек КАК ПриоритетОтбораИзМонотоварныхЯчеек,
	|	ТоварыВЯчейкахОстатки.ПриоритетОтбораИзСмешанныхЯчеек КАК ПриоритетОтбораИзСмешанныхЯчеек,
	|	ТоварыВЯчейкахОстатки.ПриоритетОтбораПодОстаток КАК ПриоритетОтбораПодОстаток,
	|	ТоварыВЯчейкахОстатки.ОбластьХранения КАК ОбластьХранения
	|ПОМЕСТИТЬ ПулЯчеек
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВЯчейкахОстатки КАК ТоварыВЯчейкахОстатки
	|		ПО ТаблицаНоменклатуры.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
	|			И (ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТаблицаНоменклатуры.Серия = ТоварыВЯчейкахОстатки.Серия
	|			КОНЕЦ)
	|			И (ТоварыВЯчейкахОстатки.Упаковка.Коэффициент <= ТаблицаНоменклатуры.Количество)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулЯчеек.Номенклатура КАК Номенклатура,
	|	ПулЯчеек.Ячейка КАК Ячейка,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ПулЯчеек.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьДругаяНоменклатура
	|ПОМЕСТИТЬ НоменклатураВЯчейках
	|ИЗ
	|	ПулЯчеек КАК ПулЯчеек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВЯчейках.Остатки(
	|				,
	|				Ячейка В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ПулЯчеек.Ячейка
	|					ИЗ
	|						ПулЯчеек КАК ПулЯчеек)) КАК ТоварыВЯчейкахОстатки
	|		ПО ПулЯчеек.Ячейка = ТоварыВЯчейкахОстатки.Ячейка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПулЯчеек.Номенклатура,
	|	ПулЯчеек.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулЯчеек.Номенклатура КАК Номенклатура,
	|	ПулЯчеек.Характеристика КАК Характеристика,
	|	ПулЯчеек.Серия КАК Серия,
	|	ПулЯчеек.Распоряжение КАК Распоряжение,
	|	ПулЯчеек.Количество КАК Количество,
	|	ПулЯчеек.Ячейка КАК Ячейка,
	|	ПулЯчеек.СвободныйОстаток КАК СвободныйОстаток,
	|	ПулЯчеек.РабочийУчасток КАК РабочийУчасток,
	|	ПулЯчеек.ПорядокОбхода КАК ПорядокОбхода,
	|	ПулЯчеек.Упаковка КАК Упаковка,
	|	ПулЯчеек.КоличествоВУпаковке КАК КоличествоВУпаковке,
	|	ПулЯчеек.Вес КАК Вес,
	|	ПулЯчеек.Объем КАК Объем,
	|	ПулЯчеек.Безразмерная КАК Безразмерная,
	|	ВЫБОР
	|		КОГДА ПулЯчеек.СвободныйОстаток <= ПулЯчеек.Количество / ПулЯчеек.КоличествоВУпаковке
	|			ТОГДА ПулЯчеек.ПриоритетОтбораПодОстаток
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НоменклатураВЯчейках.ЕстьДругаяНоменклатура
	|					ТОГДА ПулЯчеек.ПриоритетОтбораИзМонотоварныхЯчеек
	|				ИНАЧЕ ПулЯчеек.ПриоритетОтбораИзСмешанныхЯчеек
	|			КОНЕЦ
	|	КОНЕЦ КАК ПриоритетСтратегии,
	|	ВЫБОР
	|		КОГДА ПравилаРазмещенияТоваровВЯчейках.ОбластьХранения ЕСТЬ NULL 
	|			ТОГДА 1000
	|		ИНАЧЕ ПравилаРазмещенияТоваровВЯчейках.Приоритет
	|	КОНЕЦ КАК ПриоритетОбласти
	|ИЗ
	|	ПулЯчеек КАК ПулЯчеек
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураВЯчейках КАК НоменклатураВЯчейках
	|		ПО ПулЯчеек.Номенклатура = НоменклатураВЯчейках.Номенклатура
	|			И ПулЯчеек.Ячейка = НоменклатураВЯчейках.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаРазмещенияТоваровВЯчейках КАК ПравилаРазмещенияТоваровВЯчейках
	|		ПО ПулЯчеек.СкладскаяГруппаНоменклатуры = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаНоменклатуры
	|			И ПулЯчеек.СкладскаяГруппаУпаковок = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаУпаковок
	|			И (ПравилаРазмещенияТоваровВЯчейках.Помещение = &Помещение)
	|			И (ПравилаРазмещенияТоваровВЯчейках.Склад = &Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НАЧАЛОПЕРИОДА(ПулЯчеек.ДатаОтгрузки, ДЕНЬ),
	|	ПулЯчеек.Приоритет УБЫВ,
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	ПриоритетОбласти УБЫВ,
	|	КоличествоВУпаковке УБЫВ,
	|	ПриоритетСтратегии,
	|	ПулЯчеек.УровеньДоступности,
	|	ПорядокОбхода,
	|	ПулЯчеек.Код
	|ИТОГИ ПО
	|	Распоряжение,
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НоменклатураВЯчейках
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПулЯчеек";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Помещение",Помещение);
	
	ВыборкаПоРаспоряжениям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоРаспоряжениям.Следующий() Цикл
		
		ВыборкаПоНоменклатуре =  ВыборкаПоРаспоряжениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
		
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
			
			ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоХарактеристикам.Следующий() Цикл
				
				ВыборкаПоСериям = ВыборкаПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоСериям.Следующий() Цикл 
					
					
					//детали
					ВыборкаПоЯчейкам = ВыборкаПоСериям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					КоличествоКОтбору = Неопределено;
					
					Пока ВыборкаПоЯчейкам.Следующий() Цикл
						
						Если КоличествоКОтбору = Неопределено Тогда
							
							КоличествоКОтбору = ВыборкаПоЯчейкам.Количество;
							
						КонецЕсли;
						
						//Если ячейка заполнена, значит в ней есть остаток в нужной упаковке, 
						//иначе таблица остатков не соединилась бы с таблицей номенклатуры
						Если ЗначениеЗаполнено(ВыборкаПоЯчейкам.Ячейка) Тогда
							
							МассивНайденныхСтрок = ТаблицаРасходаИзЯчеек.НайтиСтроки(Новый Структура("Ячейка,Номенклатура,Упаковка,Характеристика,Серия",
							ВыборкаПоЯчейкам.Ячейка,
							ВыборкаПоЯчейкам.Номенклатура,
							ВыборкаПоЯчейкам.Упаковка,
							ВыборкаПоЯчейкам.Характеристика,
							ВыборкаПоЯчейкам.Серия));
							
							//
							Если МассивНайденныхСтрок.Количество() = 0 Тогда
								СтрокаРасхода 						= ТаблицаРасходаИзЯчеек.Добавить();
								СтрокаРасхода.Ячейка 				= ВыборкаПоЯчейкам.Ячейка;
								СтрокаРасхода.Номенклатура 			= ВыборкаПоЯчейкам.Номенклатура;
								СтрокаРасхода.Упаковка 				= ВыборкаПоЯчейкам.Упаковка;
								СтрокаРасхода.Характеристика 		= ВыборкаПоЯчейкам.Характеристика;
								СтрокаРасхода.Серия         		= ВыборкаПоЯчейкам.Серия;
								СтрокаРасхода.КоличествоУпаковок 	= ВыборкаПоЯчейкам.СвободныйОстаток;
								
								РабочийУчасток = МассивУчастков.Найти(ВыборкаПоЯчейкам.РабочийУчасток);
								Если РабочийУчасток = Неопределено Тогда
									МассивУчастков.Добавить(ВыборкаПоЯчейкам.РабочийУчасток);
								КонецЕсли;
							Иначе
								СтрокаРасхода = МассивНайденныхСтрок[0];
							КонецЕсли;
							
							КоличествоИзЯчейки = Мин(Цел(КоличествоКОтбору/ВыборкаПоЯчейкам.КоличествоВУпаковке),СтрокаРасхода.КоличествоУпаковок);
							
							Если КоличествоИзЯчейки > 0 Тогда
								СтрокаРезультата = ТаблицаРезультатов.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаРезультата, ВыборкаПоЯчейкам);
								СтрокаРезультата.КоличествоУпаковок = КоличествоИзЯчейки;
								СтрокаРезультата.Количество         = КоличествоИзЯчейки * ВыборкаПоЯчейкам.КоличествоВУпаковке;
								СтрокаРезультата.ОбъемУпаковки		= ВыборкаПоЯчейкам.Объем;
								СтрокаРезультата.ВесУпаковки		= ВыборкаПоЯчейкам.Вес;
								
								СтрокаРасхода.КоличествоУпаковок = СтрокаРасхода.КоличествоУпаковок - КоличествоИзЯчейки; 
								КоличествоКОтбору = КоличествоКОтбору - КоличествоИзЯчейки * ВыборкаПоЯчейкам.КоличествоВУпаковке;
							КонецЕсли;
							
						КонецЕсли;
						
						Если КоличествоКОтбору = 0 Тогда
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если КоличествоКОтбору <> 0 Тогда
						
						СтрокаОшибки = ТаблицаОшибок.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаОшибки, ВыборкаПоСериям);
						СтрокаОшибки.Количество = КоличествоКОтбору;				
						
					КонецЕсли;	
					
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаРезультатов.Сортировать("Распоряжение, ПорядокОбхода", Новый СравнениеЗначений);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТаблицаРезультатов",ТаблицаРезультатов);
	СтруктураВозврата.Вставить("ТаблицаОшибок",ТаблицаОшибок);
	СтруктураВозврата.Вставить("МассивУчастков",МассивУчастков);
	
	Возврат СтруктураВозврата;
КонецФункции

Процедура РассчитатьСостоянийРаспоряженийНаОтбор(Склад, Помещение, РаспоряженияНаОтбор, ОтображениеДеталей, ЗаданиеНаПеревозку) Экспорт
			
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку
	|				И НЕ &ОтображениеДеталей
	|			ТОГДА РасходныйОрдерНаТовары.ЗаданиеНаПеревозку
	|		ИНАЧЕ РасходныйОрдерНаТовары.Ссылка
	|	КОНЕЦ КАК Распоряжение,
	|	ВЫБОР
	|		КОГДА РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку
	|				И НЕ &ОтображениеДеталей
	|			ТОГДА РасходныйОрдерНаТовары.ЗаданиеНаПеревозку.ДатаВремяРейсаПланС
	|		ИНАЧЕ РасходныйОрдерНаТовары.ДатаОтгрузки
	|	КОНЕЦ КАК ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку
	|				И НЕ &ОтображениеДеталей
	|			ТОГДА РасходныйОрдерНаТовары.ЗаданиеНаПеревозку.Приоритет.Порядок
	|		ИНАЧЕ РасходныйОрдерНаТовары.Приоритет.Порядок
	|	КОНЕЦ КАК Приоритет,
	|	ВЫБОР
	|		КОГДА РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку
	|				И НЕ &ОтображениеДеталей
	|			ТОГДА РасходныйОрдерНаТовары.ЗаданиеНаПеревозку.Приоритет
	|		ИНАЧЕ РасходныйОрдерНаТовары.Приоритет
	|	КОНЕЦ КАК ПриоритетСсылка,
	|	ВЫБОР
	|		КОГДА РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку
	|				И НЕ &ОтображениеДеталей
	|			ТОГДА РасходныйОрдерНаТовары.ЗаданиеНаПеревозку.Номер
	|		ИНАЧЕ РасходныйОрдерНаТовары.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР
	|		КОГДА РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку
	|				И НЕ &ОтображениеДеталей
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СкладскиеЯчейки.ПустаяСсылка)
	|		ИНАЧЕ РасходныйОрдерНаТовары.ЗонаОтгрузки
	|	КОНЕЦ КАК ЗонаОтгрузки,
	|	ВЫБОР
	|		КОГДА РасходныйОрдерНаТовары.ОтгрузкаПоЗаданиюНаПеревозку
	|				И НЕ &ОтображениеДеталей
	|			ТОГДА ВЫРАЗИТЬ(РасходныйОрдерНаТовары.ЗаданиеНаПеревозку.ДополнительнаяИнформация КАК СТРОКА(100))
	|		ИНАЧЕ ВЫРАЗИТЬ(РасходныйОрдерНаТовары.Комментарий КАК СТРОКА(100))
	|	КОНЕЦ КАК Комментарий
	|ПОМЕСТИТЬ РаспоряженияНаОтбор
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	(НЕ &ОтображениеДеталей
	|			ИЛИ РасходныйОрдерНаТовары.ЗаданиеНаПеревозку = &ЗаданиеНаПеревозку)
	|	И РасходныйОрдерНаТовары.Склад = &Склад
	|	И РасходныйОрдерНаТовары.Помещение = &Помещение
	|	И РасходныйОрдерНаТовары.Проведен
	|	И РасходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.КОтбору)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОрдерНаПеремещениеТоваров.Ссылка,
	|	ОрдерНаПеремещениеТоваров.ДатаОтгрузки,
	|	ОрдерНаПеремещениеТоваров.Приоритет.Порядок,
	|	ОрдерНаПеремещениеТоваров.Приоритет,
	|	ОрдерНаПеремещениеТоваров.Номер,
	|	ОрдерНаПеремещениеТоваров.ЗонаОтгрузки,
	|	ВЫРАЗИТЬ(ОрдерНаПеремещениеТоваров.Комментарий КАК СТРОКА(100))
	|ИЗ
	|	Документ.ОрдерНаПеремещениеТоваров КАК ОрдерНаПеремещениеТоваров
	|ГДЕ
	|	НЕ &ОтображениеДеталей
	|	И ОрдерНаПеремещениеТоваров.Склад = &Склад
	|	И ОрдерНаПеремещениеТоваров.ПомещениеОтправитель = &Помещение
	|	И ОрдерНаПеремещениеТоваров.Проведен
	|	И ОрдерНаПеремещениеТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОрдеровНаПеремещение.КОтбору)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ &ОтображениеДеталей
	|				И ТоварыКОтборуОстатки.Распоряжение ССЫЛКА Документ.РасходныйОрдерНаТовары
	|				И ВЫРАЗИТЬ(ТоварыКОтборуОстатки.Распоряжение КАК Документ.РасходныйОрдерНаТовары).ОтгрузкаПоЗаданиюНаПеревозку
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтборуОстатки.Распоряжение КАК Документ.РасходныйОрдерНаТовары).ЗаданиеНаПеревозку
	|		ИНАЧЕ ТоварыКОтборуОстатки.Распоряжение
	|	КОНЕЦ КАК Распоряжение,
	|	ТоварыКОтборуОстатки.Номенклатура,
	|	ТоварыКОтборуОстатки.Характеристика,
	|	ТоварыКОтборуОстатки.Серия,
	|	СУММА(ТоварыКОтборуОстатки.КОтборуОстаток) КАК КОтборуОстаток,
	|	СУММА(ТоварыКОтборуОстатки.ОтбираетсяОстаток) КАК ОтбираетсяОстаток,
	|	СУММА(ТоварыКОтборуОстатки.ОтобраноОстаток) КАК ОтобраноОстаток
	|ПОМЕСТИТЬ ТоварыКОтборуОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыКОтбору.Остатки(
	|			,
	|			Распоряжение В
	|					(ВЫБРАТЬ
	|						РаспоряженияНаОтбор.Распоряжение
	|					ИЗ
	|						РаспоряженияНаОтбор КАК РаспоряженияНаОтбор
	|					ГДЕ
	|						НЕ РаспоряженияНаОтбор.Распоряжение ССЫЛКА Документ.ЗаданиеНаПеревозку)
	|				ИЛИ ВЫРАЗИТЬ(Распоряжение КАК Документ.РасходныйОрдерНаТовары).ЗаданиеНаПеревозку В
	|					(ВЫБРАТЬ
	|						РаспоряженияНаОтбор.Распоряжение
	|					ИЗ
	|						РаспоряженияНаОтбор КАК РаспоряженияНаОтбор
	|					ГДЕ
	|						РаспоряженияНаОтбор.Распоряжение ССЫЛКА Документ.ЗаданиеНаПеревозку)) КАК ТоварыКОтборуОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтборуОстатки.Серия,
	|	ТоварыКОтборуОстатки.Номенклатура,
	|	ТоварыКОтборуОстатки.Характеристика,
	|	ВЫБОР
	|		КОГДА НЕ &ОтображениеДеталей
	|				И ТоварыКОтборуОстатки.Распоряжение ССЫЛКА Документ.РасходныйОрдерНаТовары
	|				И ВЫРАЗИТЬ(ТоварыКОтборуОстатки.Распоряжение КАК Документ.РасходныйОрдерНаТовары).ОтгрузкаПоЗаданиюНаПеревозку
	|			ТОГДА ВЫРАЗИТЬ(ТоварыКОтборуОстатки.Распоряжение КАК Документ.РасходныйОрдерНаТовары).ЗаданиеНаПеревозку
	|		ИНАЧЕ ТоварыКОтборуОстатки.Распоряжение
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура,
	|	ОтборРазмещениеТоваровТоварыОтбор.Характеристика,
	|	ВЫБОР
	|		КОГДА ОтборРазмещениеТоваровТоварыОтбор.СтатусУказанияСерий В (6, 8, 10)
	|			ТОГДА ОтборРазмещениеТоваровТоварыОтбор.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	СУММА(ОтборРазмещениеТоваровТоварыОтбор.Количество) КАК КоличествоПлан,
	|	СУММА(ОтборРазмещениеТоваровТоварыОтбор.КоличествоОтобрано) КАК КоличествоОтобрано,
	|	ВЫБОР
	|		КОГДА НЕ &ОтображениеДеталей
	|				И ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение ССЫЛКА Документ.РасходныйОрдерНаТовары
	|				И ВЫРАЗИТЬ(ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение КАК Документ.РасходныйОрдерНаТовары).ОтгрузкаПоЗаданиюНаПеревозку
	|			ТОГДА ВЫРАЗИТЬ(ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение КАК Документ.РасходныйОрдерНаТовары).ЗаданиеНаПеревозку
	|		ИНАЧЕ ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение
	|	КОНЕЦ КАК Распоряжение
	|ПОМЕСТИТЬ ТоварыВЗаданиях
	|ИЗ
	|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ОтборРазмещениеТоваровТоварыОтбор
	|ГДЕ
	|	(ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Проведен
	|				И ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение В
	|					(ВЫБРАТЬ
	|						РаспоряженияНаОтбор.Распоряжение
	|					ИЗ
	|						РаспоряженияНаОтбор
	|					ГДЕ
	|						НЕ РаспоряженияНаОтбор.Распоряжение ССЫЛКА Документ.ЗаданиеНаПеревозку)
	|			ИЛИ НЕ &ОтображениеДеталей
	|				И ВЫРАЗИТЬ(ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение КАК Документ.РасходныйОрдерНаТовары).ЗаданиеНаПеревозку В
	|					(ВЫБРАТЬ
	|						РаспоряженияНаОтбор.Распоряжение
	|					ИЗ
	|						РаспоряженияНаОтбор КАК РаспоряженияНаОтбор
	|					ГДЕ
	|						РаспоряженияНаОтбор.Распоряжение ССЫЛКА Документ.ЗаданиеНаПеревозку))
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтборРазмещениеТоваровТоварыОтбор.Характеристика,
	|	ВЫБОР
	|		КОГДА ОтборРазмещениеТоваровТоварыОтбор.СтатусУказанияСерий В (6, 8, 10)
	|			ТОГДА ОтборРазмещениеТоваровТоварыОтбор.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ОтборРазмещениеТоваровТоварыОтбор.Номенклатура,
	|	ВЫБОР
	|		КОГДА НЕ &ОтображениеДеталей
	|				И ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение ССЫЛКА Документ.РасходныйОрдерНаТовары
	|				И ВЫРАЗИТЬ(ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение КАК Документ.РасходныйОрдерНаТовары).ОтгрузкаПоЗаданиюНаПеревозку
	|			ТОГДА ВЫРАЗИТЬ(ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение КАК Документ.РасходныйОрдерНаТовары).ЗаданиеНаПеревозку
	|		ИНАЧЕ ОтборРазмещениеТоваровТоварыОтбор.Ссылка.Распоряжение
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтборуОстатки.Распоряжение,
	|	ТоварыКОтборуОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыКОтборуОстатки.Характеристика,
	|	ТоварыКОтборуОстатки.Серия,
	|	ТоварыКОтборуОстатки.КОтборуОстаток - ТоварыКОтборуОстатки.ОтобраноОстаток - ТоварыКОтборуОстатки.ОтбираетсяОстаток КАК Количество,
	|	ВЫБОР
	|		КОГДА ТоварыКОтборуОстатки.КОтборуОстаток = ТоварыКОтборуОстатки.ОтобраноОстаток
	|			ТОГДА 0
	|		КОГДА ТоварыКОтборуОстатки.КОтборуОстаток = ТоварыКОтборуОстатки.ОтобраноОстаток + ТоварыКОтборуОстатки.ОтбираетсяОстаток
	|			ТОГДА 1
	|		КОГДА ТоварыКОтборуОстатки.КОтборуОстаток <= ТоварыВЗаданиях.КоличествоПлан
	|			ТОГДА 2
	|		ИНАЧЕ 100
	|	КОНЕЦ КАК Состояние,
	|	РаспоряженияНаОтбор.ДатаОтгрузки,
	|	РаспоряженияНаОтбор.Приоритет
	|ПОМЕСТИТЬ СостоянияПоОтбираемымТоварам
	|ИЗ
	|	ТоварыКОтборуОстатки КАК ТоварыКОтборуОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВЗаданиях КАК ТоварыВЗаданиях
	|		ПО ТоварыКОтборуОстатки.Распоряжение = ТоварыВЗаданиях.Распоряжение
	|			И ТоварыКОтборуОстатки.Номенклатура = ТоварыВЗаданиях.Номенклатура
	|			И ТоварыКОтборуОстатки.Характеристика = ТоварыВЗаданиях.Характеристика
	|			И ТоварыКОтборуОстатки.Серия = ТоварыВЗаданиях.Серия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаспоряженияНаОтбор КАК РаспоряженияНаОтбор
	|		ПО ТоварыКОтборуОстатки.Распоряжение = РаспоряженияНаОтбор.Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияПоТоварам.Распоряжение,
	|	СостоянияПоТоварам.Номенклатура,
	|	СостоянияПоТоварам.Характеристика,
	|	СостоянияПоТоварам.Серия,
	|	СостоянияПоТоварам.Количество,
	|	СостоянияПоТоварам.Номенклатура.СкладскаяГруппа КАК СкладскаяГруппаНоменклатуры,
	|	СостоянияПоТоварам.ДатаОтгрузки КАК ДатаОтгрузки,
	|	СостоянияПоТоварам.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	СостоянияПоОтбираемымТоварам КАК СостоянияПоТоварам
	|ГДЕ
	|	СостоянияПоТоварам.Состояние = 100";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("ОтображениеДеталей", ОтображениеДеталей);
	Запрос.УстановитьПараметр("ЗаданиеНаПеревозку", ЗаданиеНаПеревозку);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ЕстьНеВыполненныеРаспоряжения = Результат[Результат.ВГраница()].Выгрузить()[0].Количество > 0;
	
	Если ЕстьНеВыполненныеРаспоряжения Тогда
		
		РассчитатьНехваткуУпаковокДляОтбораПоРаспоряжениям(МенеджерВременныхТаблиц, Склад, Помещение);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияПоТоварам.Распоряжение,
		|	МАКСИМУМ(СостоянияПоТоварам.Состояние) КАК Состояние
		|ПОМЕСТИТЬ СостоянияПоРаспоряжениям
		|ИЗ
		|	(ВЫБРАТЬ
		|		СостоянияПоТоварам.Распоряжение КАК Распоряжение,
		|		СостоянияПоТоварам.Состояние КАК Состояние
		|	ИЗ
		|		СостоянияПоОтбираемымТоварам КАК СостоянияПоТоварам
		|	ГДЕ
		|		СостоянияПоТоварам.Состояние <> 100
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СостоянияПоТоварам.Распоряжение,
		|		СостоянияПоТоварам.Состояние
		|	ИЗ
		|		СостоянияПоТоварамКОтбору КАК СостоянияПоТоварам) КАК СостоянияПоТоварам
		|
		|СГРУППИРОВАТЬ ПО
		|	СостоянияПоТоварам.Распоряжение";
		Запрос.Выполнить();
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияПоОтбираемымТоварам.Распоряжение,
		|	МАКСИМУМ(СостоянияПоОтбираемымТоварам.Состояние) КАК Состояние
		|ПОМЕСТИТЬ СостоянияПоРаспоряжениям
		|ИЗ
		|	СостоянияПоОтбираемымТоварам КАК СостоянияПоОтбираемымТоварам
		|
		|СГРУППИРОВАТЬ ПО
		|	СостоянияПоОтбираемымТоварам.Распоряжение";
		
		Запрос.Выполнить();
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаспоряженияНаОтбор.Распоряжение,
	|	ПРЕДСТАВЛЕНИЕ(ТИПЗНАЧЕНИЯ(РаспоряженияНаОтбор.Распоряжение)) КАК ТипДокумента,
	|	РаспоряженияНаОтбор.ДатаОтгрузки,
	|	РаспоряженияНаОтбор.ПриоритетСсылка КАК Приоритет,
	|	РаспоряженияНаОтбор.Номер,
	|	РаспоряженияНаОтбор.ЗонаОтгрузки,
	|	РаспоряженияНаОтбор.Комментарий,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ГотовоКПроверке)
	|		КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ВПроцессеИсполнения)
	|		КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 2
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ИсполненоСОшибками)
	|		КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 3
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.КФормированиюЗаданий)
	|		КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 4
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ВыполняетсяПодпитка)
	|		КОГДА ЕСТЬNULL(СостоянияПоРаспоряжениям.Состояние, 100) = 5
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ТребуетсяПодпитка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияРаспоряженийНаОтборТоваров.ПустаяСсылка)
	|	КОНЕЦ КАК Состояние,
	|	ВЫБОР
	|		КОГДА РаспоряженияНаОтбор.Распоряжение ССЫЛКА Документ.ЗаданиеНаПеревозку
	|				И &ОтображениеДеталей
	|			ТОГДА 2
	|		КОГДА РаспоряженияНаОтбор.Распоряжение ССЫЛКА Документ.ЗаданиеНаПеревозку
	|				И НЕ &ОтображениеДеталей
	|			ТОГДА 1
	|		КОГДА &ОтображениеДеталей
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки
	|ИЗ
	|	РаспоряженияНаОтбор КАК РаспоряженияНаОтбор
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияПоРаспоряжениям КАК СостоянияПоРаспоряжениям
	|		ПО РаспоряженияНаОтбор.Распоряжение = СостоянияПоРаспоряжениям.Распоряжение
	|
	|УПОРЯДОЧИТЬ ПО
	|	НАЧАЛОПЕРИОДА(РаспоряженияНаОтбор.ДатаОтгрузки, ДЕНЬ),
	|	РаспоряженияНаОтбор.Приоритет УБЫВ,
	|	РаспоряженияНаОтбор.ДатаОтгрузки";
	
	Запрос.УстановитьПараметр("ОтображениеДеталей", ОтображениеДеталей);
	
	РаспоряженияНаОтбор.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если ОтображениеДеталей Тогда
		НоваяСтрока = РаспоряженияНаОтбор.Вставить(0);
		НоваяСтрока.ИндексКартинки = 2;
		НоваяСтрока.Распоряжение = ЗаданиеНаПеревозку;
		НоваяСтрока.ТипДокумента = Строка(ТипЗнч(ЗаданиеНаПеревозку));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Фунции и процедуры подпитки.

Функция  ВыполнитьПодпиткуЗБОНаСервере(Склад, Помещение, ПараметрыФормированияЗаданий) Экспорт
	// Проверить параметры формирования заданий в стуркутуре
	//ОбщегоНазначенияКлиентСервер.ПроверитьЗаполнениеОбязательныхПараметровФункций(ПараметрыФормированияЗаданий);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьТаблицуУпаковокПоТекущимРаспоряжениям(Склад, Помещение, МенеджерВременныхТаблиц, ПараметрыФормированияЗаданий);				
		
	ЕстьПотребностьВУпаковках = СформироватьТаблицуПотребностейВУпаковках(Склад, Помещение, МенеджерВременныхТаблиц, ПараметрыФормированияЗаданий); 	
		
	Если ЕстьПотребностьВУпаковках Тогда
		
		ТаблицыДляЗаданий = СформироватьТаблицыДляЗаданий(Склад,Помещение, МенеджерВременныхТаблиц);
		
		Если ТаблицыДляЗаданий <> Неопределено Тогда
			РазбитьПоЗаданиям(Склад, Помещение, ТаблицыДляЗаданий, ПараметрыФормированияЗаданий);				
			Возврат "";
		Иначе
			ТекстСообщения = НСтр("ru='Задания не сформированы (возможно для упаковок не настроены правила переупаковки или правила размещения).'");
			Возврат ТекстСообщения;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru='Задания не сформированы (возможно в ячейках хранения не достаточно товаров для отгрузки или подпитка не требуется).'");
		Возврат ТекстСообщения;
	КонецЕсли;
	
КонецФункции

// Процедура формирует запрос по временной таблице.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//	ИмяВременнойТаблицы - Строка - Имя временной таблицы
//
Функция ПоказатьВременнуюТаблицу(МенеджерВременныхТаблиц,ИмяВременнойТаблицы, Комментарий = "") Экспорт

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ИмяВременнойТаблицы
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПоказатьВременнуюТаблицу()

////////////////////////////////////////////////////////////////////////////////
// Прогноз расхода упаковок.

Процедура ПрогнозРасходаУпаковок(Склад, Помещение) Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Склад)
		Или (ИспользоватьСкладскиеПомещения(Склад)
		И Не ЗначениеЗаполнено(Помещение)) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЖурнала = Новый Структура("ГруппаСобытий, Метаданные, Данные");
	ПараметрыЖурнала.ГруппаСобытий = НСтр("ru = 'Расчет показателей прогноза расхода упаковок (запуск по расписанию)'");
	Если ИспользоватьСкладскиеПомещения(Склад) Тогда
		ПараметрыЖурнала.Метаданные    = Помещение.Метаданные();
		ПараметрыЖурнала.Данные        = Помещение;
	Иначе
		ПараметрыЖурнала.Метаданные    = Склад.Метаданные();
		ПараметрыЖурнала.Данные        = Склад;
	КонецЕсли;
		
	
	ОбщегоНазначенияУТ.ЗаписатьВЖурналСообщитьПользователю(ПараметрыЖурнала,
															УровеньЖурналаРегистрации.Примечание,
															НСтр("ru = 'Запуск'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиАдресныхСкладов.Склад,
	|	НастройкиАдресныхСкладов.Помещение,
	|	НастройкиАдресныхСкладов.ГлубинаАнализа,
	|	НастройкиАдресныхСкладов.МинимальнаяВероятностьОтгрузки,
	|	НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаX,
	|	НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаY,
	|	НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаZ,
	|	НастройкиАдресныхСкладов.ИспользоватьПодпитку
	|ИЗ
	|	РегистрСведений.НастройкиАдресныхСкладов КАК НастройкиАдресныхСкладов
	|ГДЕ
	|	НастройкиАдресныхСкладов.Склад = &Склад
	|	И НастройкиАдресныхСкладов.Помещение = &Помещение";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	
	НастройкиПодпитки = Запрос.Выполнить().Выбрать();
	
	Если Не НастройкиПодпитки.Следующий()
		Или Не НастройкиПодпитки.ИспользоватьПодпитку Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заданы настройки подпитки зон быстрого отбора.'");
		
		ОбщегоНазначенияУТ.ЗаписатьВЖурналСообщитьПользователю(ПараметрыЖурнала,
																УровеньЖурналаРегистрации.Предупреждение,
																НСтр("ru = 'Завершение'"),
																ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	
	Попытка
		ВыполнитьРасчетПоказателейДляПрогнозаИКлассифицациюУпаковок(НастройкиПодпитки);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка расчета показателей прогноза.'"); 
		ОбщегоНазначенияУТ.ЗаписатьВЖурналСообщитьПользователю(ПараметрыЖурнала,
																УровеньЖурналаРегистрации.Ошибка,
																НСтр("ru = 'Завершение'"),
																ТекстСообщения,
																ИнформацияОбОшибке());
	КонецПопытки;
	
	ТекстСообщения = НСтр("ru = 'Показатели прогноза расхода упаковок обновлены.'");
	
	ОбщегоНазначенияУТ.ЗаписатьВЖурналСообщитьПользователю(ПараметрыЖурнала,
															УровеньЖурналаРегистрации.Примечание,
															НСтр("ru = 'Завершение'"),
															ТекстСообщения);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение складов в табличных частях документов.

// Осуществляет заполнение складов в табличной части документа
//
// Параметры:
// Склад - СправочникСсылка.Склады - Склад, выбранный в шапке документа
// СкладГруппа - Булево - Флаг, по которому можно определить, что в шапке документа выбран склад группа
// Товары - Таблица - Таблица товаров документа
//
Процедура ЗаполнитьСкладыВТабличнойЧасти(Знач Склад, Знач СкладГруппа, Товары, ИсключитьГруппыДоступныеВЗаказах) Экспорт
	
	Если СкладГруппа Тогда
		
		МассивСкладов = Новый Массив();
		
		Для Каждого ТекСтрока Из Товары Цикл
			
			Если ЗначениеЗаполнено(ТекСтрока.Склад)
				И МассивСкладов.Найти(ТекСтрока.Склад) = Неопределено Тогда
				МассивСкладов.Добавить(ТекСтрока.Склад);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСкладов.Количество() > 0 Тогда
			
			Запрос = Новый Запрос("
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	Склады.Ссылка КАК Склад
				|ИЗ
				|	Справочник.Склады КАК Склады
				|ГДЕ
				|	Склады.Ссылка В (&Склады)
				|	И ((Склады.Ссылка НЕ В ИЕРАРХИИ (&Склад))
				|	ИЛИ Склады.ВыборГруппы НЕ В (&ВыборГруппыСкладов))
				|");
			
			Запрос.УстановитьПараметр("Склады", МассивСкладов);
			Запрос.УстановитьПараметр("Склад",  Склад);
			
			ВыборГруппыСкладов = Новый Массив();
			ВыборГруппыСкладов.Добавить(Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных);
			Если Не ИсключитьГруппыДоступныеВЗаказах Тогда
				ВыборГруппыСкладов.Добавить(Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказах);
			КонецЕсли;
			Запрос.УстановитьПараметр("ВыборГруппыСкладов", ВыборГруппыСкладов);
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
				Возврат;
			КонецЕсли;
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Для Каждого ТекСтрока Из Товары Цикл
				Если ЗначениеЗаполнено(ТекСтрока.Склад) Тогда
					Если Выборка.НайтиСледующий(ТекСтрока.Склад, "Склад") Тогда
						ТекСтрока.Склад = Справочники.Склады.ПустаяСсылка();
					КонецЕсли;
					Выборка.Сбросить();
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		МассивТоваров = Новый Массив();
		
		Для Каждого ТекСтрока Из Товары Цикл
			
			Если ЗначениеЗаполнено(ТекСтрока.Номенклатура)
				И МассивТоваров.Найти(ТекСтрока.Номенклатура) = Неопределено Тогда
				МассивТоваров.Добавить(ТекСтрока.Номенклатура);
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Номенклатура.Ссылка КАК Номенклатура
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка В (&Товары)
			|	И Номенклатура.ТипНоменклатуры НЕ В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
			|");
			
		Запрос.УстановитьПараметр("Товары", МассивТоваров);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Для Каждого ТекСтрока Из Товары Цикл
			
			Выборка.Сбросить();
			Если Выборка.НайтиСледующий(ТекСтрока.Номенклатура, "Номенклатура") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекСтрока.Склад <> Склад Тогда
				ТекСтрока.Склад = Склад;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСкладыВТабличнойЧасти()

// Функция производит заполнение реквизита "Склад" в выделенных строках табличной части
// Реквизит склад должен быть заполнен только в строках с номенклатурой типа "Перечисление.ТипыНоменклатуры.Товар"
//
// Параметры:
// 		ТабличнаяЧасть - ДанныеФормыКоллекция - Табличная часть формы для заполнения реквизита товары
// 		ВыделенныеСтроки - Массив - Массив выделенных строк табличной части
// 		Склад - СправочникСсылка.Склады - Склад для заполнения реквизита "Склад" табличной части
// 		ПроверятьКодСтроки - Булево - Флаг необходимость проверять код строки
//
// Возвращаемое значение:
// 		Число - Количество заполненных строк
//
Функция ЗаполнитьСкладыВВыделенныхСтроках(ТабличнаяЧасть, ВыделенныеСтроки, СкладЗаполнения, ПроверятьКодСтроки = Ложь) Экспорт
	
	ТипНоменклатурыТовар = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар");
	ТипНоменклатурыМногооборотнаяТара = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара");
	
	ЗаполненныхСтрок = 0;
	
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(ТекСтрока);
		
		Если ПроверятьКодСтроки И ЗначениеЗаполнено(СтрокаТаблицы.КодСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаТаблицы.ТипНоменклатуры = ТипНоменклатурыТовар
			Или СтрокаТаблицы.ТипНоменклатуры =  ТипНоменклатурыМногооборотнаяТара Тогда
			
			СтрокаТаблицы.Склад = СкладЗаполнения;
			ЗаполненныхСтрок = ЗаполненныхСтрок + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЗаполненныхСтрок;
	
КонецФункции // ЗаполнитьСкладыВВыделенныхСтроках()

////////////////////////////////////////////////////////////////////////////////
// Прочее.

//Функция возращает признак использования на складе складских помещений
//	Параметры:
//		Склад - ссылка на элемент справочника "Склады"
//	Возвращаемое значение:
//		Булево - признак использования складских помещений
//
Функция ИспользоватьСкладскиеПомещения(Склад) Экспорт
	
	СтруктураПараметров = Новый Структура("Склад", Склад);
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСкладскиеПомещения", СтруктураПараметров);
	
КонецФункции

//Функция возращает признак использования на складе(помещении) справочного размещения товаров в ячейки
//	Параметры
//			Склад - ссылка на элемент справочника "Склады
//			Помещение - ссылка на элемент справочника "Складские помещения"
Функция ИспользоватьАдресноеХранениеСправочно(Склад, Помещение) Экспорт
	СтруктураПараметров = Новый Структура("Склад, Помещение",Склад, Помещение);
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранениеСправочно", СтруктураПараметров);
	
КонецФункции

//Функция возращает признак использования на складе(помещении) подпитки зон быстрого отбора
//	Параметры
//			Склад - ссылка на элемент справочника "Склады
//			Помещение - ссылка на элемент справочника "Складские помещения"
Функция ИспользоватьПодпиткуЗонБыстрогоОтбора(Склад, Помещение) Экспорт
	СтруктураПараметров = Новый Структура("Склад, Помещение",Склад, Помещение);
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПодпиткуЗонБыстрогоОтбора",СтруктураПараметров);

КонецФункции

//Функция возращает строковое представление склада
//	Параметры
//			СкладПредставление - строковое представление склада
//			ПомещениеПредставление - строковое представление складского помещения
Функция ПолучитьПредставлениеСклада(СкладПредставление, ПомещениеПредставление = "") Экспорт

	СтрПредставление = СокрЛП(СкладПредставление);

	Если ЗначениеЗаполнено(ПомещениеПредставление)Тогда
		СтрПредставление = СтрПредставление + " / " + СокрЛП(ПомещениеПредставление);
	КонецЕсли;

	Возврат СтрПредставление;

КонецФункции

//Функция возращает признак зависимости начала отгрузки от наличия задания на перевозку
//	Параметры
//			Склад - ссылка на элемент справочника "Склады
Функция НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку(Склад) Экспорт
	
	СтруктураПараметров = Новый Структура("Склад", Склад);
	
	Возврат ПолучитьФункциональнуюОпцию("НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку", СтруктураПараметров);
	
КонецФункции

//Процедура заполняет реквизиты складского акта по документу-основанию
//	Параметры:
//			ДокументОбъект - документ-объект, реквизиты которого нужно заполнить
//			ДокументОснование - ссылка на документ-основание, реквизиты которого используются для заполнения
Процедура ЗаполнитьСкладскойАктПоОснованию(ДокументОбъект, ДокументОснование) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Если ЗначениеЗаполнено(ДокументОбъект.Склад) Тогда
			ДокументОбъект.ВидЦены = Справочники.Склады.УчетныйВидЦены(ДокументОбъект.Склад);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.РаспоряжениеНаИнвентаризациюТоваров") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование,
															Новый Структура("Склад, ВидЦены"));
	Иначе
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование,
							Новый Структура("Склад,ВидЦены","Склад","Склад.УчетныйВидЦены"));
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, ЗначенияРеквизитов);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Процедуры размещения товара в ячейках.

Процедура РазместитьСтрокуХарактеристики(МенеджерВременныхТаблиц, ВыборкаПоХарактеристикам, ТаблицаРезультатов, ТаблицаОшибок, МассивУчастков, ТаблицаНаполненияЯчеек, КоличествоУпаковок)
	ВыборкаПоХарактеристикам.Следующий();
	
	ПоFEFO = ВыборкаПоХарактеристикам.УчетСерийПоFEFO;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаЯчеек.Ячейка КАК Ячейка,
	|	ТаблицаЯчеек.СвободныйОбъем - ЕСТЬNULL(ТаблицаНаполненияЯчеек.Объем, 0) КАК СвободныйОбъем,
	|	ТаблицаЯчеек.СвободныйВес - ЕСТЬNULL(ТаблицаНаполненияЯчеек.Вес, 0) КАК СвободныйВес,
	|	ТаблицаЯчеек.НеОграниченаПоГрузоподъемности КАК НеОграниченаПоГрузоподъемности,
	|	ТаблицаЯчеек.НеОграниченаПоРазмерам КАК НеОграниченаПоРазмерам,
	|	ТаблицаЯчеек.ПорядокОбхода КАК ПорядокОбхода,
	|	ТаблицаЯчеек.РабочийУчасток КАК РабочийУчасток,
	|	ТаблицаЯчеек.ПриоритетОбласти КАК ПриоритетОбласти,
	|	ТаблицаЯчеек.ПриоритетРазмещенияВСвободныеЯчейки КАК ПриоритетРазмещенияВСвободныеЯчейки,
	|	ТаблицаЯчеек.ПриоритетРазмещенияВМонотоварныеЯчейки КАК ПриоритетРазмещенияВМонотоварныеЯчейки,
	|	ТаблицаЯчеек.ПриоритетРазмещенияВСмешанныеЯчейки КАК ПриоритетРазмещенияВСмешанныеЯчейки,
	|	ТаблицаЯчеек.ПриоритетРазмещенияВЯчейкиСДругимТоваром КАК ПриоритетРазмещенияВЯчейкиСДругимТоваром,
	|	ТаблицаЯчеек.УровеньДоступности КАК УровеньДоступности,
	|	ТаблицаЯчеек.Код КАК Код
	|ПОМЕСТИТЬ ПулЯчеек
	|ИЗ
	|	ТаблицаЯчеек КАК ТаблицаЯчеек
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНаполненияЯчеек КАК ТаблицаНаполненияЯчеек
	|		ПО ТаблицаЯчеек.Ячейка = ТаблицаНаполненияЯчеек.Ячейка
	|ГДЕ
	|	ТаблицаЯчеек.СкладскаяГруппаНоменклатуры = &СкладскаяГруппаНоменклатуры
	|	И ТаблицаЯчеек.СкладскаяГруппаУпаковок = &СкладскаяГруппаУпаковок
	|	И (ТаблицаЯчеек.НеОграниченаПоРазмерам
	|			ИЛИ ТаблицаЯчеек.Ширина >= &Ширина
	|				И ТаблицаЯчеек.Глубина >= &Глубина
	|				И ТаблицаЯчеек.Высота >= &Высота
	|				И ТаблицаЯчеек.СвободныйОбъем - ЕСТЬNULL(ТаблицаНаполненияЯчеек.Объем, 0) >= &Объем)
	|	И (ТаблицаЯчеек.НеОграниченаПоГрузоподъемности
	|			ИЛИ ТаблицаЯчеек.СвободныйВес - ЕСТЬNULL(ТаблицаНаполненияЯчеек.Вес, 0) >= &Вес)
	|	И ВЫБОР
	|			КОГДА &Безразмерная
	|				ТОГДА ТаблицаЯчеек.НеОграниченаПоРазмерам
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстаткиСРезультатами.Ячейка КАК Ячейка,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ТоварыВЯчейкахОстаткиСРезультатами.Номенклатура = &Номенклатура
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьНужнаяНоменклатура,
	|	КОЛИЧЕСТВО(ТоварыВЯчейкахОстаткиСРезультатами.Номенклатура) КАК КоличествоРазногоТовараВЯчейке
	|ПОМЕСТИТЬ ОстаткиВЯчейках
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|		ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура
	|	ИЗ
	|		ПулЯчеек КАК ПулЯчеек
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварыВЯчейкахОстатки КАК ТоварыВЯчейкахОстатки
	|			ПО ПулЯчеек.Ячейка = ТоварыВЯчейкахОстатки.Ячейка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	//если ячейка есть в таблице наполненности, то в нее что-то размещали,
	//причем гарантированно другую номенклатуру
	//(т.к. для каждой номенклатуры запрос выполняется только один раз)
	//значит ячейка из свободной может стать другой,
	//или из монотоварной - смешанной, поэтому это надо учесть в определении
	//приоритета стратегии
	|	
	|	ВЫБРАТЬ
	|		ТаблицаНаполненияЯчеек.Ячейка,
	//т.к. в ячейке алгоритм разместил заведомо другую номенклатуру,
	//то здесь можно вставить любое значение, главное, чтобы отличалось от
	//текущей номенклатуры, например, пустую ссылку
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	ИЗ
	|		ПулЯчеек КАК ПулЯчеек
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНаполненияЯчеек КАК ТаблицаНаполненияЯчеек
	|			ПО ПулЯчеек.Ячейка = ТаблицаНаполненияЯчеек.Ячейка) КАК ТоварыВЯчейкахОстаткиСРезультатами
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыВЯчейкахОстаткиСРезультатами.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//т.к. в каждую ячейку гарантированно можно разместить
	//хотя бы одну упаковку, то достаточно выбрать количество
	//ячеек равное количеству упаковок 
	|ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоУпаковок,"ЧГ=") + "
	|	ПулЯчеек.Ячейка КАК Ячейка,
	|	ПулЯчеек.Код КАК Код,
	|	ПулЯчеек.СвободныйОбъем,
	|	ПулЯчеек.СвободныйВес,
	|	ПулЯчеек.ПриоритетОбласти,
	|	ПулЯчеек.НеОграниченаПоГрузоподъемности,
	|	ПулЯчеек.НеОграниченаПоРазмерам,
	|	ПулЯчеек.ПорядокОбхода КАК ПорядокОбхода,
	|	ПулЯчеек.РабочийУчасток КАК РабочийУчасток,
	|	ПулЯчеек.УровеньДоступности КАК УровеньДоступности," +
	?(ПоFEFO,"   ЕСТЬNULL(МаксимальныеСрокиГодностиВЯчейках.ГоденДо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ГоденДо, " ,"") + "
	|	ВЫБОР
	|		КОГДА ОстаткиВЯчейках.Ячейка ЕСТЬ NULL 
	|			ТОГДА ПулЯчеек.ПриоритетРазмещенияВСвободныеЯчейки
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ОстаткиВЯчейках.ЕстьНужнаяНоменклатура
	|						И ОстаткиВЯчейках.КоличествоРазногоТовараВЯчейке = 1
	|					ТОГДА ПулЯчеек.ПриоритетРазмещенияВМонотоварныеЯчейки
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ОстаткиВЯчейках.ЕстьНужнаяНоменклатура
	|							ТОГДА ПулЯчеек.ПриоритетРазмещенияВСмешанныеЯчейки
	|						ИНАЧЕ ПулЯчеек.ПриоритетРазмещенияВЯчейкиСДругимТоваром
	|					КОНЕЦ
	|			КОНЕЦ 
	|	КОНЕЦ КАК ПриоритетСтратегии
	|ИЗ
	|	ПулЯчеек КАК ПулЯчеек
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиВЯчейках КАК ОстаткиВЯчейках
	|		ПО ПулЯчеек.Ячейка = ОстаткиВЯчейках.Ячейка " +
	?(ПоFEFO,"
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаксимальныеСрокиГодностиВЯчейках КАК МаксимальныеСрокиГодностиВЯчейках
	|		ПО (МаксимальныеСрокиГодностиВЯчейках.Номенклатура = &Номенклатура)
	|			И (МаксимальныеСрокиГодностиВЯчейках.Характеристика = &Характеристика)
	|			И ПулЯчеек.Ячейка = МаксимальныеСрокиГодностиВЯчейках.Ячейка ","") + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПулЯчеек.ПриоритетОбласти,
	|	ПриоритетСтратегии, " +
	?(ПоFEFO,"   ГоденДо,","") + "
	|	УровеньДоступности,
	|	СвободныйОбъем УБЫВ,
	|	ПорядокОбхода,
	|	Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПулЯчеек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиВЯчейках";
	
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("СкладскаяГруппаНоменклатуры",ВыборкаПоХарактеристикам.СкладскаяГруппаНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура",ВыборкаПоХарактеристикам.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",ВыборкаПоХарактеристикам.Характеристика);
	Запрос.УстановитьПараметр("СкладскаяГруппаУпаковок",ВыборкаПоХарактеристикам.СкладскаяГруппаУпаковок);

	//Если упаковка не помещается по габаритам, то ячейка не нужна
	Запрос.УстановитьПараметр("Ширина",ВыборкаПоХарактеристикам.Ширина);
	Запрос.УстановитьПараметр("Глубина",ВыборкаПоХарактеристикам.Глубина);
	Запрос.УстановитьПараметр("Высота",ВыборкаПоХарактеристикам.Высота);
	
	//Если в ячейку по объему не помещается хотя бы одна упаковка, то ячейка не нужна
	Запрос.УстановитьПараметр("Объем",ВыборкаПоХарактеристикам.Объем);
	
	//Если в ячейку по весу не помещается хотя бы одна упаковка, то ячейка не нужна
	Запрос.УстановитьПараметр("Вес",ВыборкаПоХарактеристикам.Вес);
	
	//Безразмерные упаковки можно помещать только в неограниченные по размерам ячейки
	Запрос.УстановитьПараметр("Безразмерная",ВыборкаПоХарактеристикам.Безразмерная);
	
	ВыборкаПоЯчейкам = Запрос.Выполнить().Выбрать();
	
	ОченьБольшоеЧисло = 99999999999;
	
	КоличествоКРазмещению = ВыборкаПоХарактеристикам.КоличествоУпаковок;
	
	ЕщеЕстьНеРазмещенныеХарактеристики = Истина;
	
	Пока ВыборкаПоЯчейкам.Следующий() Цикл
		
		Если Не ЕщеЕстьНеРазмещенныеХарактеристики Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаНаполненности = ТаблицаНаполненияЯчеек.Найти(ВыборкаПоЯчейкам.Ячейка, "Ячейка");
		
		Если СтрокаНаполненности = Неопределено Тогда
			//Добавим строку в таблицу наполненности, т.к. хотя бы одну упаковку мы в любом случае поместим
			СтрокаНаполненности 				= ТаблицаНаполненияЯчеек.Добавить();
			СтрокаНаполненности.Ячейка 			= ВыборкаПоЯчейкам.Ячейка;
			СтрокаНаполненности.Объем 			= 0;
			СтрокаНаполненности.Вес  			= 0;
			
			РабочийУчасток = МассивУчастков.Найти(ВыборкаПоЯчейкам.РабочийУчасток);
			
			Если РабочийУчасток = Неопределено Тогда
				МассивУчастков.Добавить(ВыборкаПоЯчейкам.РабочийУчасток);
			КонецЕсли;
			
		КонецЕсли;
			
		ВсегоПоместитсяВЯчейкуПоОбъему = ?(ВыборкаПоЯчейкам.НеОграниченаПоРазмерам,
											ОченьБольшоеЧисло,
											Цел((ВыборкаПоЯчейкам.СвободныйОбъем)/ВыборкаПоХарактеристикам.Объем));
											
		ВсегоПоместитсяВЯчейкуПоВесу = ?(ВыборкаПоЯчейкам.НеОграниченаПоГрузоподъемности,
										ОченьБольшоеЧисло,
										Цел((ВыборкаПоЯчейкам.СвободныйВес)/ВыборкаПоХарактеристикам.Вес));

		Пока ВсегоПоместитсяВЯчейкуПоОбъему > 0
			И ВсегоПоместитсяВЯчейкуПоВесу > 0
			И ЕщеЕстьНеРазмещенныеХарактеристики Цикл
			
			КоличествоВЯчейку = Мин(ВсегоПоместитсяВЯчейкуПоОбъему,ВсегоПоместитсяВЯчейкуПоВесу,КоличествоКРазмещению);
			
			СтрокаРезультата = ТаблицаРезультатов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультата,ВыборкаПоЯчейкам);
			ЗаполнитьЗначенияСвойств(СтрокаРезультата,ВыборкаПоХарактеристикам);
			СтрокаРезультата.КоличествоУпаковок 	= КоличествоВЯчейку;
			СтрокаРезультата.Количество			 	= КоличествоВЯчейку * ВыборкаПоХарактеристикам.КоличествоВУпаковке;
			СтрокаРезультата.ОбъемУпаковки = ВыборкаПоХарактеристикам.Объем;
			СтрокаРезультата.ВесУпаковки   = ВыборкаПоХарактеристикам.Вес;
			
			СтрокаНаполненности.Объем = СтрокаНаполненности.Объем + КоличествоВЯчейку*ВыборкаПоХарактеристикам.Объем;
			СтрокаНаполненности.Вес   = СтрокаНаполненности.Вес + КоличествоВЯчейку*ВыборкаПоХарактеристикам.Вес;
			
			КоличествоКРазмещению = КоличествоКРазмещению - КоличествоВЯчейку;
			
			ВсегоПоместитсяВЯчейкуПоОбъему = ВсегоПоместитсяВЯчейкуПоОбъему - КоличествоВЯчейку;
			ВсегоПоместитсяВЯчейкуПоВесу   = ВсегоПоместитсяВЯчейкуПоВесу - КоличествоВЯчейку;
			
			Если КоличествоКРазмещению = 0 Тогда
				ЕщеЕстьНеРазмещенныеХарактеристики = ВыборкаПоХарактеристикам.Следующий();
				
				Если ЕщеЕстьНеРазмещенныеХарактеристики Тогда
					
					КоличествоКРазмещению = ВыборкаПоХарактеристикам.КоличествоУпаковок;
					
				КонецЕсли;
				
			КонецЕсли;
					
		КонецЦикла;	
		
	КонецЦикла;
		
	Если КоличествоКРазмещению <> 0
		Или ЕщеЕстьНеРазмещенныеХарактеристики Тогда
		
		Если КоличествоКРазмещению > 0 Тогда
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибки,ВыборкаПоХарактеристикам);
			СтрокаОшибки.КоличествоУпаковок = КоличествоКРазмещению;
			СтрокаОшибки.Количество			= КоличествоКРазмещению * ВыборкаПоХарактеристикам.КоличествоВУпаковке;
		КонецЕсли;
			
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибки,ВыборкаПоХарактеристикам);
			СтрокаОшибки.КоличествоУпаковок = ВыборкаПоХарактеристикам.КоличествоУпаковок;
			СтрокаОшибки.Количество			= ВыборкаПоХарактеристикам.КоличествоУпаковок * ВыборкаПоХарактеристикам.КоличествоВУпаковке;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьВременныеТаблицы(МенеджерВременныхТаблиц, ТаблицаНаполненияЯчеек);
	
КонецПроцедуры

Процедура ОбновитьВременныеТаблицы(МенеджерВременныхТаблиц, ТаблицаНаполненияЯчеек)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"УНИЧТОЖИТЬ ТаблицаНаполненияЯчеек
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ячейка КАК Ячейка,
	|	Таблица.Объем КАК Объем,
	|	Таблица.Вес КАК Вес
	|ПОМЕСТИТЬ ТаблицаНаполненияЯчеек
	|ИЗ
	|	&ТаблицаНаполненияЯчеек КАК Таблица";
	
	
	Запрос.УстановитьПараметр("ТаблицаНаполненияЯчеек",ТаблицаНаполненияЯчеек);
	
	Запрос.ВыполнитьПакет();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры отбора товара из ячейках.

Процедура РассчитатьНехваткуУпаковокДляОтбораПоРаспоряжениям(МенеджерВременныхТаблиц, Склад, Помещение)
	
	ТаблицаРасходаИзЯчеек = Новый ТаблицаЗначений;
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("СвободныйОстаток", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Ожидается", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаРасходаИзЯчеек.Индексы.Добавить("Номенклатура,Характеристика,Серия,Упаковка");
	
	ТаблицаСостояний = Новый ТаблицаЗначений;
	ТаблицаСостояний.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСостояний.Колонки.Добавить("Распоряжение", Новый ОписаниеТипов("ДокументСсылка.РасходныйОрдерНаТовары,ДокументСсылка.ОрдерНаПеремещениеТоваров,ДокументСсылка.ЗаданиеНаПеревозку"));
	ТаблицаСостояний.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаСостояний.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаСостояний.Колонки.Добавить("Состояние", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика,
	|	ТоварыВЯчейкахОстатки.Серия,
	|	ТоварыВЯчейкахОстатки.Упаковка,
	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток КАК СвободныйОстаток,
	|	ТоварыВЯчейкахОстатки.КРазмещениюОстаток КАК Ожидается
	|ПОМЕСТИТЬ ТоварыВЯчейкахОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|						ТаблицаНоменклатуры.Характеристика КАК Характеристика
	|					ИЗ
	|						ТаблицаНоменклатуры КАК ТаблицаНоменклатуры)
	|				И Ячейка В
	|					(ВЫБРАТЬ
	|						СпрЯчейки.Ссылка КАК СкладскаяЯчейка
	|					ИЗ
	|						Справочник.СкладскиеЯчейки КАК СпрЯчейки ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БлокировкиСкладскихЯчеек КАК БлокировкиЯчеек
	|							ПО
	|								СпрЯчейки.Ссылка = БлокировкиЯчеек.Ячейка
	|									И (БлокировкиЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Полная)
	|										ИЛИ БлокировкиЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Отбор))
	|					ГДЕ
	|						БлокировкиЯчеек.ТипБлокировки ЕСТЬ NULL 
	|						И СпрЯчейки.Помещение = &Помещение
	|						И СпрЯчейки.Владелец = &Склад
	|						И НЕ СпрЯчейки.ЭтоГруппа
	|						И (СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Хранение)
	|							ИЛИ СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Архив)))) КАК ТоварыВЯчейкахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.Серия КАК Серия,
	|	ТаблицаНоменклатуры.Распоряжение КАК Распоряжение,
	|	ТаблицаНоменклатуры.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ТаблицаНоменклатуры.Приоритет КАК Приоритет,
	|	ТаблицаНоменклатуры.Количество КАК Количество,
	|	СУММА(ЕСТЬNULL(ТоварыВЯчейкахОстатки.СвободныйОстаток, 0)) КАК СвободныйОстаток,
	|	СУММА(ЕСТЬNULL(ТоварыВЯчейкахОстатки.Ожидается, 0)) КАК Ожидается,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Упаковка,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Упаковка.Коэффициент, 0) КАК КоличествоВУпаковке
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыВЯчейкахОстатки КАК ТоварыВЯчейкахОстатки
	|		ПО ТаблицаНоменклатуры.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
	|			И (ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТаблицаНоменклатуры.Серия = ТоварыВЯчейкахОстатки.Серия
	|			КОНЕЦ)
	|			И (ТоварыВЯчейкахОстатки.Упаковка.Коэффициент <= ТаблицаНоменклатуры.Количество)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.ДатаОтгрузки,
	|	ТаблицаНоменклатуры.Приоритет,
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Серия,
	|	ТаблицаНоменклатуры.Распоряжение,
	|	ТаблицаНоменклатуры.Количество,
	|	ТоварыВЯчейкахОстатки.Упаковка,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Упаковка.Коэффициент, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НАЧАЛОПЕРИОДА(ТаблицаНоменклатуры.ДатаОтгрузки, ДЕНЬ),
	|	Приоритет УБЫВ,
	|	ДатаОтгрузки,
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	КоличествоВУпаковке УБЫВ
	|ИТОГИ ПО
	|	Распоряжение,
	|	Номенклатура,
	|	Характеристика,
	|	Серия";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Помещение",Помещение);
	
	ВыборкаПоРаспоряжениям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоРаспоряжениям.Следующий() Цикл
		
		ВыборкаПоНоменклатуре =  ВыборкаПоРаспоряжениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
		
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
			
			ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоХарактеристикам.Следующий() Цикл
				
				ВыборкаПоСериям = ВыборкаПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоСериям.Следующий() Цикл 
					
					Выборка = ВыборкаПоСериям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					КоличествоКОтбору = Неопределено;
					ВзялиИзОжидаемого = Ложь;
					
					Пока Выборка.Следующий() Цикл
						
						Если КоличествоКОтбору = Неопределено Тогда
							
							КоличествоКОтбору = Выборка.Количество;
							
						КонецЕсли;
						
						Если Выборка.СвободныйОстаток > 0
							Или Выборка.Ожидается > 0 Тогда
							
							СтрутураОтбора = Новый Структура("Номенклатура,Упаковка,Характеристика,Серия");
                            ЗаполнитьЗначенияСвойств(СтрутураОтбора, Выборка);
							
							МассивНайденныхСтрок = ТаблицаРасходаИзЯчеек.НайтиСтроки(СтрутураОтбора);
							
							Если МассивНайденныхСтрок.Количество() = 0 Тогда
								СтрокаРасхода 						= ТаблицаРасходаИзЯчеек.Добавить();
                           		ЗаполнитьЗначенияСвойств(СтрокаРасхода, Выборка);
							Иначе
								СтрокаРасхода = МассивНайденныхСтрок[0];
							КонецЕсли;
							
							Если СтрокаРасхода.СвободныйОстаток > 0 Тогда 
							
								КоличествоВРаспоряжение = Мин(Цел(КоличествоКОтбору/Выборка.КоличествоВУпаковке),СтрокаРасхода.СвободныйОстаток);
								
								Если КоличествоВРаспоряжение > 0 Тогда
									СтрокаРасхода.СвободныйОстаток = СтрокаРасхода.СвободныйОстаток - КоличествоВРаспоряжение; 
									КоличествоКОтбору = КоличествоКОтбору - КоличествоВРаспоряжение * Выборка.КоличествоВУпаковке;
								КонецЕсли;
								
							КонецЕсли;
							
							Если Выборка.Ожидается > 0
								И КоличествоКОтбору > 0 Тогда
								КоличествоВРаспоряжение = Мин(Цел(КоличествоКОтбору/Выборка.КоличествоВУпаковке),СтрокаРасхода.Ожидается);
								
								Если КоличествоВРаспоряжение > 0 Тогда
									СтрокаРасхода.Ожидается = СтрокаРасхода.Ожидается - КоличествоВРаспоряжение; 
									КоличествоКОтбору = КоличествоКОтбору - КоличествоВРаспоряжение * Выборка.КоличествоВУпаковке;
									
									ВзялиИзОжидаемого = Истина;
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						
						Если КоличествоКОтбору = 0 Тогда
							СтрокаСостояния = ТаблицаСостояний.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаСостояния, ВыборкаПоСериям);
							Если ВзялиИзОжидаемого Тогда
								СтрокаСостояния.Состояние = 4;
							Иначе
								СтрокаСостояния.Состояние = 3;
							КонецЕсли;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если КоличествоКОтбору <> 0 Тогда
						
						СтрокаСостояния = ТаблицаСостояний.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСостояния, ВыборкаПоСериям);
						СтрокаСостояния.Состояние = 5;				
						
					КонецЕсли;	
					
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСостояний.Номенклатура КАК Номенклатура,
	|	ТаблицаСостояний.Распоряжение КАК Распоряжение,
	|	ТаблицаСостояний.Характеристика КАК Характеристика,
	|	ТаблицаСостояний.Серия КАК Серия,
	|	ТаблицаСостояний.Состояние КАК Состояние
	|ПОМЕСТИТЬ СостоянияПоТоварамКОтбору
	|ИЗ
	|	&ТаблицаСостояний КАК ТаблицаСостояний";
	
	Запрос.УстановитьПараметр("ТаблицаСостояний", ТаблицаСостояний);
	Запрос.Выполнить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Фунции и процедуры подпитки.

Функция СформироватьТаблицуПотребностейВУпаковках(Склад, Помещение, МенеджерВременныхТаблиц, ПараметрыФормированияЗаданий)
	
	// Формирование Товаров к Размещению.  Макс(ПрогнозПоРаспоряжениям,ПрогнозПоИстории)
	// Отбор Товаров для разупаковки(Уменьшение потребности в упаковках для которых нет правил размещения в Областях и попытка их
	// разупаковки и увелечении потребности в меньших упаковках)
	ТекстЗапроса = "";
	Если Не ПараметрыФормированияЗаданий.Свойство("ПоРаспоряжениямНаОтбор") Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПрогнозыОбъединение.Номенклатура КАК Номенклатура,
		|	ПрогнозыОбъединение.Характеристика КАК Характеристика,
		|	ПрогнозыОбъединение.Серия КАК Серия,
		|	ПрогнозыОбъединение.Упаковка КАК Упаковка,
		|	МАКСИМУМ(ПрогнозыОбъединение.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	МАКСИМУМ(ПрогнозыОбъединение.Количество) КАК Количество
		|ПОМЕСТИТЬ УпаковкиКПодпиткеДляЗапроса
		|ИЗ
		|	(ВЫБРАТЬ
		|		УпаковкиПоРаспоряжениям.Номенклатура КАК Номенклатура,
		|		УпаковкиПоРаспоряжениям.Характеристика КАК Характеристика,
		|		УпаковкиПоРаспоряжениям.Серия КАК Серия,
		|		УпаковкиПоРаспоряжениям.КоличествоУпаковок КАК КоличествоУпаковок,
		|		УпаковкиПоРаспоряжениям.Количество КАК Количество,
		|		УпаковкиПоРаспоряжениям.Упаковка КАК Упаковка
		|	ИЗ
		|		УпаковкиПоРаспоряжениям КАК УпаковкиПоРаспоряжениям
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПрогнозыРасходаУпаковок.Номенклатура,
		|		ПрогнозыРасходаУпаковок.Характеристика,
		|		ПрогнозыРасходаУпаковок.Серия,
		|		ВЫБОР
		|			КОГДА ПрогнозыРасходаУпаковок.НазначеноПользователем
		|				ТОГДА ПрогнозыРасходаУпаковок.НормативноеКоличествоЗапаса
		|			КОГДА ПрогнозыРасходаУпаковок.ВероятностьОтгрузкиВТечениеДня >= НастройкиАдресныхСкладов.МинимальнаяВероятностьОтгрузки
		|				ТОГДА ВЫБОР
		|						КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.XКласс)
		|							ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаX.Порядок, 0) * 0.2
		|						КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.YКласс)
		|							ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаY.Порядок, 0) * 0.2
		|						КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.ZКласс)
		|							ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаZ.Порядок, 0) * 0.2
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ПрогнозыРасходаУпаковок.НазначеноПользователем
		|				ТОГДА ПрогнозыРасходаУпаковок.НормативноеКоличествоЗапаса
		|			КОГДА ПрогнозыРасходаУпаковок.ВероятностьОтгрузкиВТечениеДня >= НастройкиАдресныхСкладов.МинимальнаяВероятностьОтгрузки
		|				ТОГДА ВЫБОР
		|						КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.XКласс)
		|							ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаX.Порядок, 0) * 0.2
		|						КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.YКласс)
		|							ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаY.Порядок, 0) * 0.2
		|						КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.ZКласс)
		|							ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаZ.Порядок, 0) * 0.2
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ * ПрогнозыРасходаУпаковок.Упаковка.Коэффициент,
		|		ПрогнозыРасходаУпаковок.Упаковка
		|	ИЗ
		|		РегистрСведений.ПрогнозыРасходаУпаковок КАК ПрогнозыРасходаУпаковок
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиАдресныхСкладов КАК НастройкиАдресныхСкладов
		|			ПО ПрогнозыРасходаУпаковок.Склад = НастройкиАдресныхСкладов.Склад
		|				И ПрогнозыРасходаУпаковок.Помещение = НастройкиАдресныхСкладов.Помещение
		|	ГДЕ
		|		ПрогнозыРасходаУпаковок.Склад = &Склад
		|		И ПрогнозыРасходаУпаковок.Помещение = &Помещение
		|		И ВЫБОР
		|				КОГДА ПрогнозыРасходаУпаковок.НазначеноПользователем
		|					ТОГДА ПрогнозыРасходаУпаковок.НормативноеКоличествоЗапаса
		|				КОГДА ПрогнозыРасходаУпаковок.ВероятностьОтгрузкиВТечениеДня >= НастройкиАдресныхСкладов.МинимальнаяВероятностьОтгрузки
		|					ТОГДА ВЫБОР
		|							КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.XКласс)
		|								ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаX.Порядок, 0) * 0.2
		|							КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.YКласс)
		|								ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаX.Порядок, 0) * 0.2
		|							КОГДА ПрогнозыРасходаУпаковок.Класс = ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.ZКласс)
		|								ТОГДА ПрогнозыРасходаУпаковок.СреднедневноеПотребление + ПрогнозыРасходаУпаковок.СреднеквадратическоеОтклонение * ЕСТЬNULL(НастройкиАдресныхСкладов.УровеньОбслуживанияУпаковокКлассаX.Порядок, 0) * 0.2
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ 0
		|			КОНЕЦ > 0) КАК ПрогнозыОбъединение
		|
		|СГРУППИРОВАТЬ ПО
		|	ПрогнозыОбъединение.Серия,
		|	ПрогнозыОбъединение.Номенклатура,
		|	ПрогнозыОбъединение.Упаковка,
		|	ПрогнозыОбъединение.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|"
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УпаковкиКПодпиткеДляЗапроса.Номенклатура,
	|	УпаковкиКПодпиткеДляЗапроса.Номенклатура.СкладскаяГруппа КАК СкладскаяГруппаНоменклатуры,
	|	УпаковкиКПодпиткеДляЗапроса.Характеристика,
	|	УпаковкиКПодпиткеДляЗапроса.Серия,
	|	УпаковкиКПодпиткеДляЗапроса.Упаковка КАК ТребуемаяУпаковка,
	|	УпаковкиКПодпиткеДляЗапроса.Упаковка.СкладскаяГруппа КАК СкладскаяГруппаТребуемойУпаковки,
	|	УпаковкиКПодпиткеДляЗапроса.Упаковка.Коэффициент КАК Коэффициент,
	|	УпаковкиКПодпиткеДляЗапроса.Количество,
	|	УпаковкиКПодпиткеДляЗапроса.КоличествоУпаковок,
	|	ЕСТЬNULL(ВариантыПереупаковки.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК БолееМелкаяУпаковка,
	|	ВЫБОР
	|		КОГДА ВариантыПереупаковки.Упаковка ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВариантыПереупаковки.Упаковка.Коэффициент
	|	КОНЕЦ КАК КоэффициентМелкойУпаковки,
	|	ВЫБОР
	|		КОГДА ВариантыПереупаковки.Упаковка ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СкладскиеГруппыУпаковок.ПустаяСсылка)
	|		ИНАЧЕ ВариантыПереупаковки.Упаковка.СкладскаяГруппа
	|	КОНЕЦ КАК СкладсккаяГруппаМелкойУпаковки,
	|	ЕСТЬNULL(ВариантыПереупаковки.Количество, 0) КАК КоэффициентПересчетаВМелкуюУпаковку
	|ПОМЕСТИТЬ УпаковкиКПодпиткеСВариантамиРазупаковки
	|ИЗ
	|	УпаковкиКПодпиткеДляЗапроса КАК УпаковкиКПодпиткеДляЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
	|		ПО УпаковкиКПодпиткеДляЗапроса.Упаковка = ВариантыПереупаковки.Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УпаковкиКПодпиткеСВариантамиРазупаковки.Номенклатура,
	|	УпаковкиКПодпиткеСВариантамиРазупаковки.Характеристика,
	|	УпаковкиКПодпиткеСВариантамиРазупаковки.Серия,
	|	УпаковкиКПодпиткеСВариантамиРазупаковки.ТребуемаяУпаковка,
	|	ВЫБОР
	|		КОГДА ПравилаРазмещенияТребуемойУпаковки.ОбластьХранения ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПравилаРазмещенияБолееМелкойУпаковки.ОбластьХранения ЕСТЬ NULL 
	|						ТОГДА NULL
	|					ИНАЧЕ УпаковкиКПодпиткеСВариантамиРазупаковки.БолееМелкаяУпаковка
	|				КОНЕЦ
	|		ИНАЧЕ УпаковкиКПодпиткеСВариантамиРазупаковки.ТребуемаяУпаковка
	|	КОНЕЦ КАК УпаковкаКПодпитке,
	|	ВЫБОР
	|		КОГДА ПравилаРазмещенияТребуемойУпаковки.ОбластьХранения ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПравилаРазмещенияБолееМелкойУпаковки.ОбластьХранения ЕСТЬ NULL 
	|						ТОГДА NULL
	|					ИНАЧЕ УпаковкиКПодпиткеСВариантамиРазупаковки.КоличествоУпаковок * УпаковкиКПодпиткеСВариантамиРазупаковки.КоэффициентПересчетаВМелкуюУпаковку
	|				КОНЕЦ
	|		ИНАЧЕ УпаковкиКПодпиткеСВариантамиРазупаковки.КоличествоУпаковок
	|	КОНЕЦ КАК КоличествоУпаковокКПодпитке,
	|	ВЫБОР
	|		КОГДА ПравилаРазмещенияТребуемойУпаковки.ОбластьХранения ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ПравилаРазмещенияБолееМелкойУпаковки.ОбластьХранения ЕСТЬ NULL 
	|						ТОГДА NULL
	|					ИНАЧЕ УпаковкиКПодпиткеСВариантамиРазупаковки.КоэффициентМелкойУпаковки
	|				КОНЕЦ
	|		ИНАЧЕ УпаковкиКПодпиткеСВариантамиРазупаковки.Коэффициент
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ РанжированиеВариантовРазупаковки
	|ИЗ
	|	УпаковкиКПодпиткеСВариантамиРазупаковки КАК УпаковкиКПодпиткеСВариантамиРазупаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаРазмещенияТоваровВЯчейках КАК ПравилаРазмещенияТребуемойУпаковки
	|		ПО УпаковкиКПодпиткеСВариантамиРазупаковки.СкладскаяГруппаНоменклатуры = ПравилаРазмещенияТребуемойУпаковки.СкладскаяГруппаНоменклатуры
	|			И УпаковкиКПодпиткеСВариантамиРазупаковки.СкладскаяГруппаТребуемойУпаковки = ПравилаРазмещенияТребуемойУпаковки.СкладскаяГруппаУпаковок
	|			И (ПравилаРазмещенияТребуемойУпаковки.Склад = &Склад)
	|			И (ПравилаРазмещенияТребуемойУпаковки.Помещение = &Помещение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаРазмещенияТоваровВЯчейках КАК ПравилаРазмещенияБолееМелкойУпаковки
	|		ПО УпаковкиКПодпиткеСВариантамиРазупаковки.СкладскаяГруппаНоменклатуры = ПравилаРазмещенияБолееМелкойУпаковки.СкладскаяГруппаНоменклатуры
	|			И УпаковкиКПодпиткеСВариантамиРазупаковки.СкладсккаяГруппаМелкойУпаковки = ПравилаРазмещенияБолееМелкойУпаковки.СкладскаяГруппаУпаковок
	|			И (ПравилаРазмещенияБолееМелкойУпаковки.Склад = &Склад)
	|			И (ПравилаРазмещенияБолееМелкойУпаковки.Помещение = &Помещение)
	|ГДЕ
	|	НЕ ВЫБОР
	|				КОГДА ПравилаРазмещенияТребуемойУпаковки.ОбластьХранения ЕСТЬ NULL 
	|					ТОГДА ВЫБОР
	|							КОГДА ПравилаРазмещенияБолееМелкойУпаковки.ОбластьХранения ЕСТЬ NULL 
	|								ТОГДА NULL
	|							ИНАЧЕ УпаковкиКПодпиткеСВариантамиРазупаковки.БолееМелкаяУпаковка
	|						КОНЕЦ
	|				ИНАЧЕ УпаковкиКПодпиткеСВариантамиРазупаковки.ТребуемаяУпаковка
	|			КОНЕЦ ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РанжированиеВариантовРазупаковки.Номенклатура,
	|	РанжированиеВариантовРазупаковки.Характеристика,
	|	РанжированиеВариантовРазупаковки.Серия,
	|	РанжированиеВариантовРазупаковки.ТребуемаяУпаковка,
	|	МАКСИМУМ(РанжированиеВариантовРазупаковки.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ МаксимальныйРангПереупаковки
	|ИЗ
	|	РанжированиеВариантовРазупаковки КАК РанжированиеВариантовРазупаковки
	|
	|СГРУППИРОВАТЬ ПО
	|	РанжированиеВариантовРазупаковки.Номенклатура,
	|	РанжированиеВариантовРазупаковки.Характеристика,
	|	РанжированиеВариантовРазупаковки.Серия,
	|	РанжированиеВариантовРазупаковки.ТребуемаяУпаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РанжированиеВариантовРазупаковки.Номенклатура,
	|	РанжированиеВариантовРазупаковки.Характеристика,
	|	РанжированиеВариантовРазупаковки.Серия,
	|	РанжированиеВариантовРазупаковки.УпаковкаКПодпитке КАК Упаковка,
	|	СУММА(РанжированиеВариантовРазупаковки.КоличествоУпаковокКПодпитке) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ УпаковкиКПодпитке
	|ИЗ
	|	РанжированиеВариантовРазупаковки КАК РанжированиеВариантовРазупаковки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимальныйРангПереупаковки КАК МаксимальныйРангПереупаковки
	|		ПО РанжированиеВариантовРазупаковки.Номенклатура = МаксимальныйРангПереупаковки.Номенклатура
	|			И РанжированиеВариантовРазупаковки.Характеристика = МаксимальныйРангПереупаковки.Характеристика
	|			И РанжированиеВариантовРазупаковки.Серия = МаксимальныйРангПереупаковки.Серия
	|			И РанжированиеВариантовРазупаковки.ТребуемаяУпаковка = МаксимальныйРангПереупаковки.ТребуемаяУпаковка
	|			И РанжированиеВариантовРазупаковки.Приоритет = МаксимальныйРангПереупаковки.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	РанжированиеВариантовРазупаковки.Номенклатура,
	|	РанжированиеВариантовРазупаковки.УпаковкаКПодпитке,
	|	РанжированиеВариантовРазупаковки.Характеристика,
	|	РанжированиеВариантовРазупаковки.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВариантыПереупаковки.Упаковка,
	|	ВариантыПереупаковки.Источник,
	|	УпаковкиКПодпитке.Номенклатура,
	|	УпаковкиКПодпитке.Характеристика,
	|	УпаковкиКПодпитке.Серия,
	|	УпаковкиКПодпитке.КоличествоУпаковок
	|ПОМЕСТИТЬ ИсточникиУпаковокКПодпитке
	|ИЗ
	|	УпаковкиКПодпитке КАК УпаковкиКПодпитке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
	|		ПО УпаковкиКПодпитке.Упаковка = ВариантыПереупаковки.Упаковка
	|ГДЕ
	|	ВариантыПереупаковки.Источник <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УпаковкиКПодпитке.Упаковка,
	|	УпаковкиКПодпитке.Упаковка,
	|	УпаковкиКПодпитке.Номенклатура,
	|	УпаковкиКПодпитке.Характеристика,
	|	УпаковкиКПодпитке.Серия,
	|	УпаковкиКПодпитке.КоличествоУпаковок
	|ИЗ
	|	УпаковкиКПодпитке КАК УпаковкиКПодпитке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиУпаковокКПодпитке.Номенклатура,
	|	ИсточникиУпаковокКПодпитке.Характеристика,
	|	ИсточникиУпаковокКПодпитке.Серия
	|ПОМЕСТИТЬ ТоварыКПодпитке
	|ИЗ
	|	ИсточникиУпаковокКПодпитке КАК ИсточникиУпаковокКПодпитке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкладскиеЯчейки.Ссылка
	|ПОМЕСТИТЬ НеЗаблокированныеЯчейки
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БлокировкиСкладскихЯчеек КАК БлокировкиСкладскихЯчеек
	|		ПО СкладскиеЯчейки.Ссылка = БлокировкиСкладскихЯчеек.Ячейка
	|			И (БлокировкиСкладскихЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Полная)
	|				ИЛИ БлокировкиСкладскихЯчеек.ТипБлокировки = ЗНАЧЕНИЕ(Перечисление.ТипыБлокировокСкладскихЯчеек.Отбор))
	|ГДЕ
	|	(СкладскиеЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Хранение)
	|			ИЛИ СкладскиеЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Архив))
	|	И БлокировкиСкладскихЯчеек.Ячейка ЕСТЬ NULL 
	|	И СкладскиеЯчейки.Владелец = &Склад
	|	И СкладскиеЯчейки.Помещение = &Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКПодпитке.Номенклатура,
	|	ТоварыКПодпитке.Характеристика,
	|	ТоварыКПодпитке.Серия,
	|	ТоварыВЯчейкахОстатки.Упаковка,
	|	ТоварыВЯчейкахОстатки.Упаковка.Коэффициент КАК КоличествоВУпаковке,
	|	ТоварыВЯчейкахОстатки.Упаковка.СкладскаяГруппа КАК СкладскаяГруппаУпаковок,
	|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток) КАК Остаток,
	|	СУММА(ТоварыВЯчейкахОстатки.КРазмещениюОстаток) КАК Ожидается,
	|	ТоварыВЯчейкахОстатки.Ячейка,
	|	ТоварыВЯчейкахОстатки.Ячейка.УровеньДоступности КАК УровеньДоступности,
	|	ТоварыВЯчейкахОстатки.Ячейка.ПорядокОбхода КАК ПорядокОбхода,
	|	ТоварыВЯчейкахОстатки.Ячейка.РабочийУчасток КАК РабочийУчасток,
	|	ТоварыВЯчейкахОстатки.Ячейка.Код КАК Код,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения КАК ОбластьХранения,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораИзМонотоварныхЯчеек КАК ПриоритетОтбораИзМонотоварныхЯчеек,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораИзСмешанныхЯчеек КАК ПриоритетОтбораИзСмешанныхЯчеек,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораПодОстаток КАК ПриоритетОтбораПодОстаток,
	|	ТоварыВЯчейкахОстатки.Упаковка.Вес КАК Вес,
	|	ТоварыВЯчейкахОстатки.Упаковка.Объем КАК Объем
	|ПОМЕСТИТЬ ОстаткиВЯчейках
	|ИЗ
	|	ТоварыКПодпитке КАК ТоварыКПодпитке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВЯчейках.Остатки(
	|				,
	|				Ячейка В
	|						(ВЫБРАТЬ
	|							НеЗаблокированныеЯчейки.Ссылка КАК Ячейка
	|						ИЗ
	|							НеЗаблокированныеЯчейки КАК НеЗаблокированныеЯчейки)
	|					И (Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ТоварыКПодпитке.Номенклатура,
	|							ТоварыКПодпитке.Характеристика
	|						ИЗ
	|							ТоварыКПодпитке КАК ТоварыКПодпитке)) КАК ТоварыВЯчейкахОстатки
	|		ПО ТоварыКПодпитке.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
	|			И ТоварыКПодпитке.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
	|			И (ВЫБОР
	|				КОГДА ТоварыКПодпитке.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТоварыКПодпитке.Серия = ТоварыВЯчейкахОстатки.Серия
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКПодпитке.Номенклатура,
	|	ТоварыКПодпитке.Характеристика,
	|	ТоварыКПодпитке.Серия,
	|	ТоварыВЯчейкахОстатки.Упаковка,
	|	ТоварыВЯчейкахОстатки.Ячейка,
	|	ТоварыВЯчейкахОстатки.Ячейка.УровеньДоступности,
	|	ТоварыВЯчейкахОстатки.Ячейка.ПорядокОбхода,
	|	ТоварыВЯчейкахОстатки.Ячейка.Код,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораИзМонотоварныхЯчеек,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораИзСмешанныхЯчеек,
	|	ТоварыВЯчейкахОстатки.Ячейка.ОбластьХранения.ПриоритетОтбораПодОстаток,
	|	ТоварыВЯчейкахОстатки.Упаковка.Коэффициент,
	|	ТоварыВЯчейкахОстатки.Упаковка.СкладскаяГруппа,
	|	ТоварыВЯчейкахОстатки.Ячейка.РабочийУчасток,
	|	ТоварыВЯчейкахОстатки.Упаковка.Вес,
	|	ТоварыВЯчейкахОстатки.Упаковка.Объем
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток) > 0
	|		ИЛИ СУММА(ТоварыВЯчейкахОстатки.КРазмещениюОстаток) > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиВЯчейках.Номенклатура,
	|	ОстаткиВЯчейках.Характеристика,
	|	ОстаткиВЯчейках.Серия,
	|	СУММА(ОстаткиВЯчейках.Остаток) КАК Остаток,
	|	СУММА(ОстаткиВЯчейках.Ожидается) КАК Ожидается,
	|	ОстаткиВЯчейках.Упаковка,
	|	ОстаткиВЯчейках.КоличествоВУпаковке
	|ПОМЕСТИТЬ ОстаткиУпаковок
	|ИЗ
	|	ОстаткиВЯчейках КАК ОстаткиВЯчейках
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиВЯчейках.Номенклатура,
	|	ОстаткиВЯчейках.Характеристика,
	|	ОстаткиВЯчейках.Упаковка,
	|	ОстаткиВЯчейках.Серия,
	|	ОстаткиВЯчейках.КоличествоВУпаковке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиУпаковокКПодпитке.Упаковка,
	|	ИсточникиУпаковокКПодпитке.Номенклатура,
	|	ИсточникиУпаковокКПодпитке.Характеристика,
	|	ИсточникиУпаковокКПодпитке.Серия,
	|	ИсточникиУпаковокКПодпитке.КоличествоУпаковок
	|ПОМЕСТИТЬ УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять
	|ИЗ
	|	ИсточникиУпаковокКПодпитке КАК ИсточникиУпаковокКПодпитке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиУпаковок КАК ОстаткиУпаковокИсходныхУпаковок
	|		ПО ИсточникиУпаковокКПодпитке.Номенклатура = ОстаткиУпаковокИсходныхУпаковок.Номенклатура
	|			И ИсточникиУпаковокКПодпитке.Характеристика = ОстаткиУпаковокИсходныхУпаковок.Характеристика
	|			И ИсточникиУпаковокКПодпитке.Серия = ОстаткиУпаковокИсходныхУпаковок.Серия
	|			И ИсточникиУпаковокКПодпитке.Источник = ОстаткиУпаковокИсходныхУпаковок.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Упаковка,
	|	УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Упаковка.Коэффициент КАК Коэффициент,
	|	УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Номенклатура,
	|	УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Характеристика,
	|	УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Серия,
	|	ВЫРАЗИТЬ(УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.КоличествоУпаковок - ЕСТЬNULL(ОстаткиУпаковок.Остаток, 0) - ЕСТЬNULL(ОстаткиУпаковок.Ожидается, 0) КАК ЧИСЛО(15, 0)) КАК Количество,
	|	УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Упаковка.Вес КАК Вес,
	|	УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Упаковка.Объем КАК Объем
	|ПОМЕСТИТЬ ПотребностьВУпаковках
	|ИЗ
	|	УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять КАК УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиУпаковок КАК ОстаткиУпаковок
	|		ПО УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Упаковка = ОстаткиУпаковок.Упаковка
	|			И УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Номенклатура = ОстаткиУпаковок.Номенклатура
	|			И УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Характеристика = ОстаткиУпаковок.Характеристика
	|			И УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.Серия = ОстаткиУпаковок.Серия
	|ГДЕ
	|	УпаковкиКПодпиткеКоторыеЕстьИзЧегоВзять.КоличествоУпаковок - ЕСТЬNULL(ОстаткиУпаковок.Остаток, 0) - ЕСТЬNULL(ОстаткиУпаковок.Ожидается, 0) > 0";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Помещение",Помещение);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	УпаковкиКПодпитке = ПоказатьВременнуюТаблицу(МенеджерВременныхТаблиц,"УпаковкиКПодпитке");
	МаксимальныйРангПереупаковки = ПоказатьВременнуюТаблицу(МенеджерВременныхТаблиц,"МаксимальныйРангПереупаковки");
	РанжированиеВариантовРазупаковки = ПоказатьВременнуюТаблицу(МенеджерВременныхТаблиц,"РанжированиеВариантовРазупаковки");	
	УпаковкиКПодпиткеСВариантамиРазупаковки = ПоказатьВременнуюТаблицу(МенеджерВременныхТаблиц,"УпаковкиКПодпиткеСВариантамиРазупаковки");
	
	Возврат РезультатыЗапроса[РезультатыЗапроса.ВГраница()].Выгрузить()[0].Количество > 0;
	
КонецФункции

Функция СформироватьТаблицыДляЗаданий(Склад, Помещение, МенеджерВТ)
	 
	ТаблицаРазмещенияПредварительная = Новый ТаблицаЗначений;
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));	
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));	
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));	
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));	
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("ИндексСтрокиОтбора", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("Излишек", Новый ОписаниеТипов("Булево"));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("СИзлишками", Новый ОписаниеТипов("Булево"));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("КоличествоПолученное", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("ВесУпаковки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));	
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("ОбъемУпаковки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРазмещенияПредварительная.Колонки.Добавить("Размещено", Новый ОписаниеТипов("Булево"));
	
	ТаблицаОтбора = Новый ТаблицаЗначений;
	ТаблицаОтбора.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));	
	ТаблицаОтбора.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаОтбора.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаОтбора.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));	
	ТаблицаОтбора.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаОтбора.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаОтбора.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаОтбора.Колонки.Добавить("ВесУпаковки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));	
	ТаблицаОтбора.Колонки.Добавить("ОбъемУпаковки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаОтбора.Колонки.Добавить("Ячейка",Новый ОписаниеТипов ("СправочникСсылка.СкладскиеЯчейки"));
	ТаблицаОтбора.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(20)));
	ТаблицаОтбора.Колонки.Добавить("РабочийУчасток", Новый ОписаниеТипов("СправочникСсылка.РабочиеУчастки"));
	ТаблицаОтбора.Колонки.Добавить("ПорядокОбхода", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаОтбора.Колонки.Добавить("ИндексСтрокиОтбора", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаОтбора.Колонки.Добавить("СИзлишками", Новый ОписаниеТипов("Булево"));
	ИндексСтрокиОтбора = 0;
		
	// Ограничиваем упаковки из которых удовлетворяем потребность, чтобы добиться минимальных излишков от разупакованных упаковок.	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПотребностьВУпаковках.Номенклатура КАК Номенклатура,
	|	ПотребностьВУпаковках.Характеристика КАК Характеристика,
	|	ПотребностьВУпаковках.Серия КАК Серия,
	|	ВариантыПереупаковки.МаксимальнаяУпаковкаВВетви КАК МаксимальнаяУпаковкаВВетви,
	|	ПотребностьВУпаковках.Упаковка КАК Упаковка,
	|	ПотребностьВУпаковках.Упаковка.Коэффициент КАК Коэффициент,
	|	ПотребностьВУпаковках.Количество КАК КоличествоУпаковок,
	|	ПотребностьВУпаковках.Упаковка.Вес КАК ВесУпаковки,
	|	ПотребностьВУпаковках.Упаковка.Объем КАК ОбъемУпаковки,
	|	ПотребностьВУпаковках.Количество * ПотребностьВУпаковках.Упаковка.Коэффициент КАК Количество
	|ПОМЕСТИТЬ ТребуемыеТоварыПоВетвям
	|ИЗ
	|	ПотребностьВУпаковках КАК ПотребностьВУпаковках
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
	|		ПО ПотребностьВУпаковках.Упаковка = ВариантыПереупаковки.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОстаткиУпаковок.Номенклатура КАК Номенклатура,
	|	ОстаткиУпаковок.Характеристика КАК Характеристика,
	|	ОстаткиУпаковок.Серия КАК Серия,
	|	ВариантыПереупаковки.МаксимальнаяУпаковкаВВетви КАК МаксимальнаяУпаковкаВВетви,
	|	ОстаткиУпаковок.Упаковка,
	|	ОстаткиУпаковок.Коэффициент КАК Коэффициент,
	|	ОстаткиУпаковок.СвободныйОстаток КАК КоличествоУпаковок,
	|	ОстаткиУпаковок.Упаковка.Вес КАК ВесУпаковки,
	|	ОстаткиУпаковок.Упаковка.Объем КАК ОбъемУпаковки,
	|	ЛОЖЬ КАК Излишек,
	|	-1 КАК ИндексСтрокиОтбора,
	|	ВариантыПереупаковки.МаксимальнаяУпаковкаВВетви.Коэффициент
	|ПОМЕСТИТЬ ОстаткиУпаковокПоВетвям
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОстаткиУпаковок.Номенклатура КАК Номенклатура,
	|		ОстаткиУпаковок.Характеристика КАК Характеристика,
	|		ОстаткиУпаковок.Серия КАК Серия,
	|		ОстаткиУпаковок.Упаковка КАК Упаковка,
	|		ОстаткиУпаковок.КоличествоВУпаковке КАК Коэффициент,
	|		ОстаткиУпаковок.Остаток КАК СвободныйОстаток
	|	ИЗ
	|		ПотребностьВУпаковках КАК ПотребностьВУпаковках
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиУпаковок КАК ОстаткиУпаковок
	|			ПО ПотребностьВУпаковках.Номенклатура = ОстаткиУпаковок.Номенклатура
	|				И ПотребностьВУпаковках.Характеристика = ОстаткиУпаковок.Характеристика
	|				И ПотребностьВУпаковках.Серия = ОстаткиУпаковок.Серия
	|	ГДЕ
	|		ОстаткиУпаковок.Остаток > 0) КАК ОстаткиУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыПереупаковки КАК ВариантыПереупаковки
	|		ПО ОстаткиУпаковок.Упаковка = ВариантыПереупаковки.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиУпаковокПоВетвям.МаксимальнаяУпаковкаВВетви,
	|	МАКСИМУМ(ОстаткиУпаковокПоВетвям.Коэффициент) КАК МаксимальныйКоэффициентОстаткаВВетви,
	|	ОстаткиУпаковокПоВетвям.МаксимальнаяУпаковкаВВетвиКоэффициент,
	|	ОстаткиУпаковокПоВетвям.Номенклатура,
	|	ОстаткиУпаковокПоВетвям.Характеристика,
	|	ОстаткиУпаковокПоВетвям.Серия
	|ПОМЕСТИТЬ МаксимальныйКоэффициентОстатка
	|ИЗ
	|	ОстаткиУпаковокПоВетвям КАК ОстаткиУпаковокПоВетвям
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиУпаковокПоВетвям.МаксимальнаяУпаковкаВВетви,
	|	ОстаткиУпаковокПоВетвям.МаксимальнаяУпаковкаВВетвиКоэффициент,
	|	ОстаткиУпаковокПоВетвям.Серия,
	|	ОстаткиУпаковокПоВетвям.Характеристика,
	|	ОстаткиУпаковокПоВетвям.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТребуемыеТоварыПоВетвям.Номенклатура КАК Номенклатура,
	|	ТребуемыеТоварыПоВетвям.Характеристика КАК Характеристика,
	|	ТребуемыеТоварыПоВетвям.Серия КАК Серия,
	|	ТребуемыеТоварыПоВетвям.МаксимальнаяУпаковкаВВетви,
	|	ТребуемыеТоварыПоВетвям.Упаковка,
	|	ТребуемыеТоварыПоВетвям.Коэффициент КАК Коэффициент,
	|	ТребуемыеТоварыПоВетвям.КоличествоУпаковок,
	|	ТребуемыеТоварыПоВетвям.ВесУпаковки,
	|	ТребуемыеТоварыПоВетвям.ОбъемУпаковки,
	|	ТребуемыеТоварыПоВетвям.Количество,
	|	МаксимальныйКоэффициентОстатка.МаксимальныйКоэффициентОстаткаВВетви КАК МаксимальныйКоэффициентОстаткаВВетви,
	|	МаксимальныйКоэффициентОстатка.МаксимальнаяУпаковкаВВетвиКоэффициент КАК МаксимальнаяУпаковкаВВетвиКоэффициент
	|ИЗ
	|	МаксимальныйКоэффициентОстатка КАК МаксимальныйКоэффициентОстатка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТребуемыеТоварыПоВетвям КАК ТребуемыеТоварыПоВетвям
	|		ПО МаксимальныйКоэффициентОстатка.МаксимальнаяУпаковкаВВетви = ТребуемыеТоварыПоВетвям.МаксимальнаяУпаковкаВВетви
	|			И МаксимальныйКоэффициентОстатка.Номенклатура = ТребуемыеТоварыПоВетвям.Номенклатура
	|			И МаксимальныйКоэффициентОстатка.Характеристика = ТребуемыеТоварыПоВетвям.Характеристика
	|			И МаксимальныйКоэффициентОстатка.Серия = ТребуемыеТоварыПоВетвям.Серия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	МаксимальныйКоэффициентОстаткаВВетви УБЫВ,
	|	МаксимальнаяУпаковкаВВетвиКоэффициент УБЫВ,
	|	Коэффициент УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиУпаковокПоВетвям.Номенклатура КАК Номенклатура,
	|	ОстаткиУпаковокПоВетвям.Характеристика КАК Характеристика,
	|	ОстаткиУпаковокПоВетвям.Серия КАК Серия,
	|	ОстаткиУпаковокПоВетвям.МаксимальнаяУпаковкаВВетви,
	|	ОстаткиУпаковокПоВетвям.Упаковка,
	|	ОстаткиУпаковокПоВетвям.Коэффициент КАК Коэффициент,
	|	ОстаткиУпаковокПоВетвям.КоличествоУпаковок,
	|	ОстаткиУпаковокПоВетвям.ВесУпаковки,
	|	ОстаткиУпаковокПоВетвям.ОбъемУпаковки,
	|	ОстаткиУпаковокПоВетвям.Излишек,
	|	ОстаткиУпаковокПоВетвям.ИндексСтрокиОтбора,
	|	ОстаткиУпаковокПоВетвям.МаксимальнаяУпаковкаВВетвиКоэффициент КАК МаксимальнаяУпаковкаВВетвиКоэффициент
	|ИЗ
	|	ОстаткиУпаковокПоВетвям КАК ОстаткиУпаковокПоВетвям
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	МаксимальнаяУпаковкаВВетвиКоэффициент УБЫВ,
	|	Коэффициент УБЫВ";
		
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Помещение",Помещение);    
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТребуемыеТоварыПоВетвям = РезультатЗапроса[3].Выгрузить();
	ТребуемыеТоварыПоВетвям.Индексы.Добавить("Номенклатура,Характеристика,Серия,Упаковка");
	ТребуемыеТоварыПоВетвям.Индексы.Добавить("Номенклатура,Характеристика,Серия,МаксимальнаяУпаковкаВВетви");	
	ТребуемыеТоварыПоВетвям.Сортировать("Номенклатура,Характеристика,Серия,Коэффициент Убыв");
	ДоступныеТовары = РезультатЗапроса[4].Выгрузить();	
	                             
	ДоступныеТоварыВВетви = ДоступныеТовары.СкопироватьКолонки();

	ИндексСтрокиОтбора = 0;
	ТекущаяМаксимальнаяУпаковкаВВетви = Неопределено;
	ТекущаяНоменклатура = Неопределено;
	ТекущаяХарактеристика = Неопределено;
	ТекущаяСерия = Неопределено;
	
	ДоступноНаУровне = Новый Соответствие;
	
	Для Каждого СтрокаТребуемыхТоваров Из ТребуемыеТоварыПоВетвям Цикл 
		
		//Формирование ОтбираемыеТоварыВВетви для этой ветви
		Если СтрокаТребуемыхТоваров.МаксимальнаяУпаковкаВВетви <> ТекущаяМаксимальнаяУпаковкаВВетви ИЛИ
			СтрокаТребуемыхТоваров.Номенклатура <> ТекущаяНоменклатура ИЛИ
			СтрокаТребуемыхТоваров.Характеристика <> ТекущаяХарактеристика ИЛИ
			СтрокаТребуемыхТоваров.Серия <> ТекущаяСерия Тогда 
							
			//Корректировка остатков
			Для Каждого СтрокаДоступныхТоваровВВетви Из ДоступныеТоварыВВетви Цикл 
				Отбор = Новый Структура();
				Отбор.Вставить("Номенклатура",СтрокаДоступныхТоваровВВетви.Номенклатура);
				Отбор.Вставить("Характеристика",СтрокаДоступныхТоваровВВетви.Характеристика);
				Отбор.Вставить("Серия",СтрокаДоступныхТоваровВВетви.Серия);
				Отбор.Вставить("Упаковка",СтрокаДоступныхТоваровВВетви.Упаковка);
				Отбор.Вставить("ИндексСтрокиОтбора",СтрокаДоступныхТоваровВВетви.ИндексСтрокиОтбора);
				Строки = ДоступныеТовары.НайтиСтроки(Отбор);
				
				Если Строки.Количество() = 0 Тогда
					// Перенос излишков в таблицу Доступных Товаров
					НоваяСтрока = ДоступныеТовары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДоступныхТоваровВВетви);									
					Продолжить;
				КонецЕсли;	
				
				Для Каждого Строка Из Строки Цикл
					Если СтрокаДоступныхТоваровВВетви.КоличествоУпаковок = 0 Тогда
						ДоступныеТовары.Удалить(Строка);
						Продолжить;
					КонецЕсли;
					Строка.КоличествоУпаковок = СтрокаДоступныхТоваровВВетви.КоличествоУпаковок;
				КонецЦикла;
			КонецЦикла;
			
			ТекущаяМаксимальнаяУпаковкаВВетви = СтрокаТребуемыхТоваров.МаксимальнаяУпаковкаВВетви;
			ТекущаяНоменклатура= СтрокаТребуемыхТоваров.Номенклатура;
			ТекущаяХарактеристика = СтрокаТребуемыхТоваров.Характеристика;
			ТекущаяСерия = СтрокаТребуемыхТоваров.Серия;			
			
			ДоступныеТоварыВВетви.Очистить();
			Отбор = Новый Структура();
			Отбор.Вставить("Номенклатура",ТекущаяНоменклатура);
			Отбор.Вставить("Характеристика",ТекущаяХарактеристика);
			Отбор.Вставить("Серия",ТекущаяСерия);
			Отбор.Вставить("МаксимальнаяУпаковкаВВетви",ТекущаяМаксимальнаяУпаковкаВВетви);
			Строки = ДоступныеТовары.НайтиСтроки(Отбор);
			Если Строки.Количество() = 0 Тогда									
				Продолжить;
			КонецЕсли;
			Для Каждого Строка Из Строки Цикл
				//Проверка исключения перемещение товаров одинакого размера(веса).
				Если Строка.Коэффициент > СтрокаТребуемыхТоваров.Коэффициент Тогда	
					НоваяСтрока = ДоступныеТоварыВВетви.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				КонецЕсли;
			КонецЦикла;
			
			Если ДоступныеТоварыВВетви.Количество() = 0 Тогда
				ТекущаяМаксимальнаяУпаковкаВВетви = Неопределено;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;	
		
		Если СтрокаТребуемыхТоваров.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
        КоличествоДоступно = 0;
		Для Каждого СтрокаДоступныхТоваров Из  ДоступныеТоварыВВетви Цикл			
			Если СтрокаДоступныхТоваров.Коэффициент > СтрокаТребуемыхТоваров.Коэффициент Тогда
				КоличествоДоступно =  КоличествоДоступно + СтрокаДоступныхТоваров.Коэффициент * СтрокаДоступныхТоваров.КоличествоУпаковок; 
			Иначе 
				Прервать;
			КонецЕсли;									
		КонецЦикла;
		
		Для Каждого СтрокаДоступныхТоваров Из  ДоступныеТоварыВВетви Цикл			
			Если СтрокаДоступныхТоваров.Коэффициент >= СтрокаТребуемыхТоваров.Коэффициент Тогда
				КоличествоДоступноИерархиейНиже = КоличествоДоступно - СтрокаДоступныхТоваров.Коэффициент*СтрокаДоступныхТоваров.КоличествоУпаковок;
				КоличествоДоступноТекущейИерархей = КоличествоДоступно;
				КоличествоДоступно = КоличествоДоступноИерархиейНиже;
				
				//Отбор и размещение(без излишков)
				КоличествоУпаковокОтобрано = Цел(СтрокаТребуемыхТоваров.Количество/СтрокаДоступныхТоваров.Коэффициент);
				Если КоличествоУпаковокОтобрано>0 Тогда 
					
					Если КоличествоУпаковокОтобрано>=СтрокаДоступныхТоваров.КоличествоУпаковок Тогда
						КоличествоУпаковокОтобрано = СтрокаДоступныхТоваров.КоличествоУпаковок;
						СтрокаДоступныхТоваров.КоличествоУпаковок = 0;
					Иначе
						СтрокаДоступныхТоваров.КоличествоУпаковок = СтрокаДоступныхТоваров.КоличествоУпаковок - КоличествоУпаковокОтобрано;	
					КонецЕсли;
					
					//Уменьшение требуемого количества
					СтрокаТребуемыхТоваров.Количество = СтрокаТребуемыхТоваров.Количество - КоличествоУпаковокОтобрано*СтрокаДоступныхТоваров.Коэффициент;
					СтрокаТребуемыхТоваров.КоличествоУпаковок = СтрокаТребуемыхТоваров.Количество/СтрокаТребуемыхТоваров.Коэффициент;
					
					//Добавление упаковок на размещение 
					НоваяСтрока = ТаблицаРазмещенияПредварительная.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТребуемыхТоваров);									
					НоваяСтрока.Количество = КоличествоУпаковокОтобрано*СтрокаДоступныхТоваров.Коэффициент/СтрокаТребуемыхТоваров.Коэффициент;
					НоваяСтрока.Излишек = Ложь;
					НоваяСтрока.СИзлишками = СтрокаДоступныхТоваров.Излишек;
					Если СтрокаДоступныхТоваров.Излишек Тогда
						НоваяСтрока.ИндексСтрокиОтбора = СтрокаДоступныхТоваров.ИндексСтрокиОтбора;
					Иначе
						НоваяСтрока.ИндексСтрокиОтбора = ИндексСтрокиОтбора;
					КонецЕсли;
					
					//Добавление упаковок на отбор
					Если Не СтрокаДоступныхТоваров.Излишек Тогда
						НоваяСтрока = ТаблицаОтбора.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДоступныхТоваров);
						НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокОтобрано;
						НоваяСтрока.Количество = КоличествоУпаковокОтобрано*СтрокаДоступныхТоваров.Коэффициент;	
						НоваяСтрока.СИзлишками = СтрокаДоступныхТоваров.Излишек;
						НоваяСтрока.ИндексСтрокиОтбора = ИндексСтрокиОтбора;
						ИндексСтрокиОтбора = ИндексСтрокиОтбора + 1;
					КонецЕсли;
					
					//Проверка удовлетворения спроса всех упаковок
					Если СтрокаТребуемыхТоваров.Количество=0 Тогда 				
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
							
				Если КоличествоДоступноИерархиейНиже<СтрокаТребуемыхТоваров.Количество И СтрокаДоступныхТоваров.КоличествоУпаковок > 0 Тогда
					//Добавление упаковок на размещение 
					НоваяСтрока = ТаблицаРазмещенияПредварительная.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТребуемыхТоваров);									
					НоваяСтрока.Количество = СтрокаТребуемыхТоваров.КоличествоУпаковок;
					НоваяСтрока.Излишек = Ложь;
					НоваяСтрока.СИзлишками = Истина;
					Если СтрокаДоступныхТоваров.Излишек Тогда
						НоваяСтрока.ИндексСтрокиОтбора = СтрокаДоступныхТоваров.ИндексСтрокиОтбора;
					Иначе
						НоваяСтрока.ИндексСтрокиОтбора = ИндексСтрокиОтбора;
					КонецЕсли;

					// Добавление излишков в Доступные товары(если их не используют, то они все попадут в размещение)
					НоваяСтрока = ДоступныеТоварыВВетви.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТребуемыхТоваров);
					НоваяСтрока.ИндексСтрокиОтбора = ИндексСтрокиОтбора;
					НоваяСтрока.КоличествоУпаковок = СтрокаДоступныхТоваров.Коэффициент/СтрокаТребуемыхТоваров.Коэффициент
													- СтрокаТребуемыхТоваров.КоличествоУпаковок;	
					НоваяСтрока.Излишек = Истина;
					Если СтрокаДоступныхТоваров.Излишек Тогда
						НоваяСтрока.ИндексСтрокиОтбора = СтрокаДоступныхТоваров.ИндексСтрокиОтбора;
					Иначе
						НоваяСтрока.ИндексСтрокиОтбора = ИндексСтрокиОтбора;
					КонецЕсли;
					
					ДоступныеТоварыВВетви.Сортировать("Коэффициент Убыв, Излишек Убыв");
					
					//Добавление упаковок на отбор
					Если Не СтрокаДоступныхТоваров.Излишек Тогда	
						НоваяСтрока = ТаблицаОтбора.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДоступныхТоваров);
						НоваяСтрока.КоличествоУпаковок = 1;
						НоваяСтрока.Количество = СтрокаДоступныхТоваров.Коэффициент;	
						НоваяСтрока.СИзлишками = Истина;				
						НоваяСтрока.ИндексСтрокиОтбора = ИндексСтрокиОтбора;
						ИндексСтрокиОтбора = ИндексСтрокиОтбора + 1;
					КонецЕсли;
															
					//Уменьшение потребности в упаковках
					СтрокаТребуемыхТоваров.Количество = 0;
					СтрокаТребуемыхТоваров.КоличествоУпаковок = 0;
										
					//Уменьшиение количества доступных упаковок
					СтрокаДоступныхТоваров.КоличествоУпаковок = СтрокаДоступныхТоваров.КоличествоУпаковок - 1;
										
					Прервать;
				КонецЕсли;
				
			КонецЕсли;									
		КонецЦикла;
					
		//Уменьшение потребности
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура",СтрокаТребуемыхТоваров.Номенклатура);
		Отбор.Вставить("Характеристика",СтрокаТребуемыхТоваров.Характеристика);
		Отбор.Вставить("Серия",СтрокаТребуемыхТоваров.Серия);
		Отбор.Вставить("Упаковка",СтрокаТребуемыхТоваров.Упаковка);
		Строки = ТребуемыеТоварыПоВетвям.НайтиСтроки(Отбор);
		Для Каждого Строка Из Строки Цикл
			Строка.Количество = СтрокаТребуемыхТоваров.Количество;
			Строка.КоличествоУпаковок = СтрокаТребуемыхТоваров.КоличествоУпаковок;
		КонецЦикла;	
			
	КонецЦикла;	
			
	// Перенос неотобранных излишков в таблицу размещения
	Отбор = Новый Структура();
	Отбор.Вставить("Излишек",Истина);
	Строки = ДоступныеТовары.НайтиСтроки(Отбор);
	Для Каждого Строка Из Строки Цикл
		Если Строка.КоличествоУпаковок>0 Тогда  
			//Добавление упаковок на размещение 
			НоваяСтрока = ТаблицаРазмещенияПредварительная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);									
			НоваяСтрока.Количество = Строка.КоличествоУпаковок;
			НоваяСтрока.Излишек = Истина;
			НоваяСтрока.СИзлишками = Истина;
		КонецЕсли;
	КонецЦикла;
	Строки = ДоступныеТоварыВВетви.НайтиСтроки(Отбор);
	Для Каждого Строка Из Строки Цикл
		Если Строка.КоличествоУпаковок>0 Тогда  
			//Добавление упаковок на размещение  
			НоваяСтрока = ТаблицаРазмещенияПредварительная.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);									
			НоваяСтрока.Количество = Строка.КоличествоУпаковок;
			НоваяСтрока.Излишек = Истина;
			НоваяСтрока.СИзлишками = Истина;
		КонецЕсли;
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////
	//Подбор ячеек, из которых можно взять необходимые упаковки
	
	ТаблицаРезультатов = ПодобратьЯчейкиДляТаблицыОтбора(Склад, Помещение, ТаблицаОтбора, МенеджерВТ);
	
	//////////////////////////////////////////////////////////////////////////
	//Перепривязка строк таблицы размещения по результатам подбора ячеек-источников,
	//т.к. одна строка таблицы отбора может отбираться из нескольких ячеек
	
	ТаблицаРазмещенияПредварительная.Сортировать("СИзлишками Возр, Коэффициент Убыв");
	ТаблицаОтбора.Индексы.Добавить("Номенклатура,Характеристика,Серия,Упаковка,Ячейка");	
	Для Каждого СтрокаТаблицыРезультатов Из ТаблицаРезультатов Цикл
		
		Отбор = Новый Структура();
		Отбор.Вставить("Номенклатура",СтрокаТаблицыРезультатов.Номенклатура);
		Отбор.Вставить("Характеристика",СтрокаТаблицыРезультатов.Характеристика);
      	Отбор.Вставить("Серия",СтрокаТаблицыРезультатов.Серия);
		Отбор.Вставить("Упаковка",СтрокаТаблицыРезультатов.Упаковка);
		Отбор.Вставить("Ячейка",Справочники.СкладскиеЯчейки.ПустаяСсылка());
        СтрокиОтбора = ТаблицаОтбора.НайтиСтроки(Отбор);
		Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
			КоличествоУпаковок = Мин(СтрокаОтбора.КоличествоУпаковок,СтрокаТаблицыРезультатов.КоличествоУпаковок);
			СтрокаТаблицыРезультатов.КоличествоУпаковок = СтрокаТаблицыРезультатов.КоличествоУпаковок - КоличествоУпаковок;
			
			Если КоличествоУпаковок >= СтрокаОтбора.КоличествоУпаковок Тогда
				СтрокаОтбора.Ячейка = СтрокаТаблицыРезультатов.Ячейка;	
				СтрокаОтбора.Код = СтрокаТаблицыРезультатов.Код;
				СтрокаОтбора.ПорядокОбхода = СтрокаТаблицыРезультатов.ПорядокОбхода;
				СтрокаОтбора.РабочийУчасток = СтрокаТаблицыРезультатов.РабочийУчасток;
				СтрокаОтбора.ВесУпаковки = СтрокаТаблицыРезультатов.ВесУпаковки;
				СтрокаОтбора.ОбъемУпаковки = СтрокаТаблицыРезультатов.ОбъемУпаковки;			
			Иначе
				СтрокаОтбора.КоличествоУпаковок = СтрокаОтбора.КоличествоУпаковок - КоличествоУпаковок;
				СтрокаОтбора.Количество = СтрокаОтбора.Количество - КоличествоУпаковок*СтрокаОтбора.Коэффициент;

				НоваяСтрока = ТаблицаОтбора.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаОтбора);
				НоваяСтрока.КоличествоУпаковок = КоличествоУпаковок;
				НоваяСтрока.Количество = КоличествоУпаковок*СтрокаОтбора.Коэффициент ;
				НоваяСтрока.ИндексСтрокиОтбора = ИндексСтрокиОтбора;
				НоваяСтрока.Ячейка = СтрокаТаблицыРезультатов.Ячейка;
				НоваяСтрока.Код = СтрокаТаблицыРезультатов.Код;
				НоваяСтрока.ПорядокОбхода = СтрокаТаблицыРезультатов.ПорядокОбхода;
				НоваяСтрока.РабочийУчасток = СтрокаТаблицыРезультатов.РабочийУчасток;
				НоваяСтрока.ВесУпаковки = СтрокаТаблицыРезультатов.ВесУпаковки;
				НоваяСтрока.ОбъемУпаковки = СтрокаТаблицыРезультатов.ОбъемУпаковки;
				
				Количество = НоваяСтрока.Количество;
				Отбор = Новый Структура();
				Отбор.Вставить("ИндексСтрокиОтбора",СтрокаОтбора.ИндексСтрокиОтбора);
				СтрокиРазмещения = ТаблицаРазмещенияПредварительная.НайтиСтроки(Отбор);
				Для Каждого СтрокаРазмещения Из СтрокиРазмещения Цикл
					КоличествоУпаковок = Мин(СтрокаРазмещения.Количество,Количество/СтрокаРазмещения.Коэффициент);
					Количество = Количество - КоличествоУпаковок*СтрокаРазмещения.Коэффициент;
					Если КоличествоУпаковок >= СтрокаРазмещения.Количество Тогда
						СтрокаРазмещения.ИндексСтрокиОтбора = ИндексСтрокиОтбора;
					Иначе
						СтрокаРазмещения.Количество = СтрокаРазмещения.Количество - КоличествоУпаковок;
						
						НоваяСтрока = ТаблицаРазмещенияПредварительная.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРазмещения);
						НоваяСтрока.Количество = КоличествоУпаковок;
						НоваяСтрока.ИндексСтрокиОтбора = ИндексСтрокиОтбора;	
					КонецЕсли;	
					
					Если Количество = 0 Тогда
						Прервать;
					КонецЕсли;	
					
				КонецЦикла;
				
				ИндексСтрокиОтбора = ИндексСтрокиОтбора + 1;
			КонецЕсли;	
				
		КонецЦикла;
		
	КонецЦикла;	
	
	/////////////////////////////////////////////////////////////////////////
	//Подбор ячеек, в которые можно положить требуемые упаковки
	
	Для Каждого СтрокаТаблицыРазмещения Из ТаблицаРазмещенияПредварительная Цикл
		СтрокаТаблицыРазмещения.Размещено = Ложь;
		Отбор = Новый Структура("ИндексСтрокиОтбора",СтрокаТаблицыРазмещения.ИндексСтрокиОтбора);
		СтрокаОтбора = ТаблицаОтбора.Найти(СтрокаТаблицыРазмещения.ИндексСтрокиОтбора,"ИндексСтрокиОтбора");
		СтрокаТаблицыРазмещения.КоличествоПолученное = СтрокаОтбора.КоличествоУпаковок;		
	КонецЦикла;	
	
	Структура = ПодобратьЯчейкиДляРазмещения (ТаблицаРазмещенияПредварительная,ТаблицаОтбора,Склад,Помещение);
	
	Возврат Структура;
	
КонецФункции

Функция ПодобратьЯчейкиДляТаблицыОтбора(Склад, Помещение, ТаблицаОтбора, МенеджерВременнойТаблицы)
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРезультатов.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаРезультатов.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРезультатов.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаРезультатов.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	ТаблицаРезультатов.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("ВесУпаковки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("ОбъемУпаковки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(18,6,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("Безразмерная", Новый ОписаниеТипов("Булево"));
	ТаблицаРезультатов.Колонки.Добавить("ПорядокОбхода", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(6,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРезультатов.Колонки.Добавить("РабочийУчасток", Новый ОписаниеТипов(Новый ОписаниеТипов("СправочникСсылка.РабочиеУчастки")));
	ТаблицаРезультатов.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка,",,Новый КвалификаторыСтроки(20)));
    ТаблицаРезультатов.Колонки.Добавить("ИндексСтрокиОтбора", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаРасходаИзЯчеек = Новый ТаблицаЗначений;
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("Ячейка", Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки"));
	ТаблицаРасходаИзЯчеек.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	
	ТаблицаРасходаИзЯчеек.Индексы.Добавить("Ячейка,Номенклатура,Упаковка,Характеристика");		
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременнойТаблицы;
	//В запросе выбираются все ячейки по которым есть остатки и ячейки сортируются по правилам
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаОтбора.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаОтбора.Характеристика КАК Характеристика,
	|	ТаблицаОтбора.Серия КАК Серия,
	|	ТаблицаОтбора.Упаковка КАК Упаковка,
	|	ТаблицаОтбора.КоличествоУпаковок КАК Количество
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	&ТаблицаОтбора КАК ТаблицаОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтбора.Номенклатура,
	|	ТаблицаОтбора.Характеристика,
	|	ТаблицаОтбора.Серия,
	|	ТаблицаОтбора.Упаковка,
	|	СУММА(ТаблицаОтбора.Количество) КАК Количество,
	|	ТаблицаОтбора.Номенклатура.СкладскаяГруппа КАК СкладскаяГруппаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	ТаблицаОтбора КАК ТаблицаОтбора
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОтбора.Упаковка,
	|	ТаблицаОтбора.Характеристика,
	|	ТаблицаОтбора.Номенклатура,
	|	ТаблицаОтбора.Серия,
	|	ТаблицаОтбора.Номенклатура.СкладскаяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.Серия КАК Серия,
	|	ТаблицаНоменклатуры.Количество КАК Количество,
	|	ТаблицаНоменклатуры.СкладскаяГруппаНоменклатуры КАК СкладскаяГруппаНоменклатуры,
	|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	ТоварыВЯчейкахОстатки.Код КАК Код,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Остаток, 0) КАК СвободныйОстаток,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.УровеньДоступности, 9999999999) КАК УровеньДоступности,
	|	ТоварыВЯчейкахОстатки.РабочийУчасток КАК РабочийУчасток,
	|	ТоварыВЯчейкахОстатки.ПорядокОбхода КАК ПорядокОбхода,
	|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
	|	ТоварыВЯчейкахОстатки.Вес КАК Вес,
	|	ТоварыВЯчейкахОстатки.Объем КАК Объем,
	|	ТоварыВЯчейкахОстатки.КоличествоВУпаковке КАК КоличествоВУпаковке,
	|	ТоварыВЯчейкахОстатки.СкладскаяГруппаУпаковок КАК СкладскаяГруппаУпаковок,
	|	ТоварыВЯчейкахОстатки.ПриоритетОтбораИзМонотоварныхЯчеек КАК ПриоритетОтбораИзМонотоварныхЯчеек,
	|	ТоварыВЯчейкахОстатки.ПриоритетОтбораИзСмешанныхЯчеек КАК ПриоритетОтбораИзСмешанныхЯчеек,
	|	ТоварыВЯчейкахОстатки.ПриоритетОтбораПодОстаток КАК ПриоритетОтбораПодОстаток,
	|	ТоварыВЯчейкахОстатки.ОбластьХранения КАК ОбластьХранения
	|ПОМЕСТИТЬ ПулЯчеек
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиВЯчейках КАК ТоварыВЯчейкахОстатки
	|		ПО ТаблицаНоменклатуры.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
	|			И (ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТаблицаНоменклатуры.Серия = ТоварыВЯчейкахОстатки.Серия
	|			КОНЕЦ)
	|			И (ТоварыВЯчейкахОстатки.Упаковка = ТаблицаНоменклатуры.Упаковка)
	|			И (ТоварыВЯчейкахОстатки.Остаток > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка
	|ПОМЕСТИТЬ ВсеТоварыВЯчейке
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			Ячейка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ПулЯчеек.Ячейка
	|				ИЗ
	|					ПулЯчеек КАК ПулЯчеек)) КАК ТоварыВЯчейкахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулЯчеек.Номенклатура КАК Номенклатура,
	|	ПулЯчеек.Ячейка КАК Ячейка,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ПулЯчеек.Номенклатура = ВсеТоварыВЯчейке.Номенклатура
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьДругаяНоменклатура
	|ПОМЕСТИТЬ НоменклатураВЯчейках
	|ИЗ
	|	ПулЯчеек КАК ПулЯчеек
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеТоварыВЯчейке КАК ВсеТоварыВЯчейке
	|		ПО ПулЯчеек.Ячейка = ВсеТоварыВЯчейке.Ячейка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПулЯчеек.Номенклатура,
	|	ПулЯчеек.Ячейка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулЯчеек.Номенклатура КАК Номенклатура,
	|	ПулЯчеек.Характеристика КАК Характеристика,
	|	ПулЯчеек.Серия КАК Серия,
	|	ПулЯчеек.Количество КАК Количество,
	|	ПулЯчеек.Ячейка КАК Ячейка,
	|	ПулЯчеек.СвободныйОстаток КАК СвободныйОстаток,
	|	ПулЯчеек.РабочийУчасток КАК РабочийУчасток,
	|	ПулЯчеек.ПорядокОбхода КАК ПорядокОбхода,
	|	ПулЯчеек.Упаковка КАК Упаковка,
	|	ПулЯчеек.КоличествоВУпаковке КАК КоличествоВУпаковке,
	|	ВЫБОР
	|		КОГДА ПулЯчеек.СвободныйОстаток <= ПулЯчеек.Количество / ПулЯчеек.КоличествоВУпаковке
	|			ТОГДА ПулЯчеек.ПриоритетОтбораПодОстаток
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ НоменклатураВЯчейках.ЕстьДругаяНоменклатура
	|					ТОГДА ПулЯчеек.ПриоритетОтбораИзМонотоварныхЯчеек
	|				ИНАЧЕ ПулЯчеек.ПриоритетОтбораИзСмешанныхЯчеек
	|			КОНЕЦ
	|	КОНЕЦ КАК ПриоритетСтратегии,
	|	ВЫБОР
	|		КОГДА ПравилаРазмещенияТоваровВЯчейках.ОбластьХранения ЕСТЬ NULL 
	|			ТОГДА 1000
	|		ИНАЧЕ ПравилаРазмещенияТоваровВЯчейках.Приоритет
	|	КОНЕЦ КАК ПриоритетОбласти,
	|	ПулЯчеек.Код,
	|	ПулЯчеек.Вес,
	|	ПулЯчеек.Объем
	|ИЗ
	|	ПулЯчеек КАК ПулЯчеек
	|		ЛЕВОЕ СОЕДИНЕНИЕ НоменклатураВЯчейках КАК НоменклатураВЯчейках
	|		ПО ПулЯчеек.Номенклатура = НоменклатураВЯчейках.Номенклатура
	|			И ПулЯчеек.Ячейка = НоменклатураВЯчейках.Ячейка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаРазмещенияТоваровВЯчейках КАК ПравилаРазмещенияТоваровВЯчейках
	|		ПО ПулЯчеек.СкладскаяГруппаНоменклатуры = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаНоменклатуры
	|			И ПулЯчеек.СкладскаяГруппаУпаковок = ПравилаРазмещенияТоваровВЯчейках.СкладскаяГруппаУпаковок
	|			И (ПравилаРазмещенияТоваровВЯчейках.Помещение = &Помещение)
	|			И (ПравилаРазмещенияТоваровВЯчейках.Склад = &Склад)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	ПриоритетОбласти УБЫВ,
	|	КоличествоВУпаковке УБЫВ,
	|	ПриоритетСтратегии,
	|	ПулЯчеек.УровеньДоступности,
	|	ПорядокОбхода,
	|	ПулЯчеек.Код
	|ИТОГИ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия КАК Серия,
	|	Упаковка";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("Помещение",Помещение);
	Запрос.УстановитьПараметр("ТаблицаОтбора",ТаблицаОтбора);  
	
	ВыборкаПоНоменклатуре =  Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
		ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			
			ВыборкаПоСериям = ВыборкаПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСериям.Следующий() Цикл 
				
				ВыборкаПоУпаковкам = ВыборкаПоСериям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоУпаковкам.Следующий() Цикл
					
					//детали
					ВыборкаПоЯчейкам = ВыборкаПоУпаковкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					КоличествоКОтбору = Неопределено;
					
					Пока ВыборкаПоЯчейкам.Следующий() Цикл
						
						Если КоличествоКОтбору = Неопределено Тогда
							
							КоличествоКОтбору = ВыборкаПоЯчейкам.Количество;
							
						КонецЕсли;
						
						//Если ячейка заполнена, значит в ней есть остаток в нужной упаковке, 
						//иначе таблица остатков не соединилась бы с таблицей номенклатуры
						Если ЗначениеЗаполнено(ВыборкаПоЯчейкам.Ячейка) Тогда
							
							МассивНайденныхСтрок = ТаблицаРасходаИзЯчеек.НайтиСтроки(Новый Структура("Ячейка,Номенклатура,Упаковка,Характеристика,Серия",
							ВыборкаПоЯчейкам.Ячейка,
							ВыборкаПоЯчейкам.Номенклатура,
							ВыборкаПоЯчейкам.Упаковка,
							ВыборкаПоЯчейкам.Характеристика,
							ВыборкаПоЯчейкам.Серия));
							
							Если МассивНайденныхСтрок.Количество() = 0 Тогда
								СтрокаРасхода 						= ТаблицаРасходаИзЯчеек.Добавить();
								СтрокаРасхода.Ячейка 				= ВыборкаПоЯчейкам.Ячейка;
								СтрокаРасхода.Номенклатура 			= ВыборкаПоЯчейкам.Номенклатура;
								СтрокаРасхода.Упаковка 				= ВыборкаПоЯчейкам.Упаковка;
								СтрокаРасхода.Характеристика 		= ВыборкаПоЯчейкам.Характеристика;
								СтрокаРасхода.Серия         		= ВыборкаПоЯчейкам.Серия;
								СтрокаРасхода.КоличествоУпаковок 	= ВыборкаПоЯчейкам.СвободныйОстаток;
							Иначе
								СтрокаРасхода = МассивНайденныхСтрок[0];
							КонецЕсли;
							
							КоличествоИзЯчейки = Мин(КоличествоКОтбору,СтрокаРасхода.КоличествоУпаковок);
							
							Если КоличествоИзЯчейки > 0 Тогда
								СтрокаРезультата = ТаблицаРезультатов.Добавить();
								ЗаполнитьЗначенияСвойств(СтрокаРезультата, ВыборкаПоЯчейкам);
								СтрокаРезультата.КоличествоУпаковок = КоличествоИзЯчейки;
								СтрокаРезультата.Количество         = КоличествоИзЯчейки * ВыборкаПоЯчейкам.КоличествоВУпаковке;
								СтрокаРезультата.ОбъемУпаковки		= ВыборкаПоЯчейкам.Объем;
								СтрокаРезультата.ВесУпаковки		= ВыборкаПоЯчейкам.Вес;
								
								СтрокаРасхода.КоличествоУпаковок = СтрокаРасхода.КоличествоУпаковок - КоличествоИзЯчейки; 
								КоличествоКОтбору = КоличествоКОтбору - КоличествоИзЯчейки;
							КонецЕсли;
							
						КонецЕсли;
						
						Если КоличествоКОтбору = 0 Тогда
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	Возврат ТаблицаРезультатов;
КонецФункции

Функция ПодобратьЯчейкиДляРазмещения(ТаблицаРазмещенияПредварительная,ТаблицаОтбора,Склад,Помещение)

	ТаблицаРазмещенияПредварительная.Сортировать("СИзлишками Возр,Излишек Возр,КоличествоПолученное Возр");	
	ТаблицаРазмещенияПредварительная.Индексы.Добавить("Размещено,Номенклатура,Характеристика,Серия,Упаковка");

	Запрос = Новый Запрос;
	Менеджер = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаРазмещенияПредварительная.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаРазмещенияПредварительная.Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаРазмещенияПредварительная.Серия КАК Справочник.СерииНоменклатуры) КАК Серия,
	|	ВЫРАЗИТЬ(ТаблицаРазмещенияПредварительная.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
	|	ТаблицаРазмещенияПредварительная.Количество КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаРазмещенияПредварительная
	|ИЗ
	|	&ТаблицаРазмещенияПредварительная КАК ТаблицаРазмещенияПредварительная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРазмещенияПредварительная.Номенклатура,
	|	ТаблицаРазмещенияПредварительная.Упаковка КАК Упаковка,
	|	ТаблицаРазмещенияПредварительная.Характеристика КАК Характеристика,
	|	ТаблицаРазмещенияПредварительная.Серия,
	|	ЕСТЬNULL(ТаблицаРазмещенияПредварительная.Серия.ГоденДо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ГоденДо,
	|	ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO, ЛОЖЬ) КАК УчетСерийПоFEFO,
	|	СУММА(ТаблицаРазмещенияПредварительная.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ТаблицаРазмещенияПредварительная.Упаковка.СкладскаяГруппа КАК СкладскаяГруппаУпаковок,
	|	ТаблицаРазмещенияПредварительная.Номенклатура.СкладскаяГруппа КАК СкладскаяГруппаНоменклатуры,
	|	ТаблицаРазмещенияПредварительная.Упаковка.Высота КАК Высота,
	|	ТаблицаРазмещенияПредварительная.Упаковка.Ширина КАК Ширина,
	|	ТаблицаРазмещенияПредварительная.Упаковка.Глубина КАК Глубина,
	|	ТаблицаРазмещенияПредварительная.Упаковка.Безразмерная КАК Безразмерная,
	|	ТаблицаРазмещенияПредварительная.Упаковка.Коэффициент КАК КоличествоВУпаковке,
	|	ТаблицаРазмещенияПредварительная.Упаковка.Вес КАК Вес,
	|	ТаблицаРазмещенияПредварительная.Упаковка.Объем КАК Объем
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	ТаблицаРазмещенияПредварительная КАК ТаблицаРазмещенияПредварительная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО ТаблицаРазмещенияПредварительная.Номенклатура.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|			И (ПолитикиУчетаСерий.Склад = &Склад)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРазмещенияПредварительная.Упаковка,
	|	ТаблицаРазмещенияПредварительная.Характеристика,
	|	ТаблицаРазмещенияПредварительная.Серия,
	|	ЕСТЬNULL(ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO, ЛОЖЬ),
	|	ТаблицаРазмещенияПредварительная.Номенклатура,
	|	ТаблицаРазмещенияПредварительная.Номенклатура.СкладскаяГруппа,
	|	ЕСТЬNULL(ТаблицаРазмещенияПредварительная.Серия.ГоденДо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
	|	ТаблицаРазмещенияПредварительная.Упаковка.СкладскаяГруппа,
	|	ТаблицаРазмещенияПредварительная.Упаковка.Высота,
	|	ТаблицаРазмещенияПредварительная.Упаковка.Ширина,
	|	ТаблицаРазмещенияПредварительная.Упаковка.Глубина,
	|	ТаблицаРазмещенияПредварительная.Упаковка.Безразмерная,
	|	ТаблицаРазмещенияПредварительная.Упаковка.Коэффициент";
	
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("ТаблицаРазмещенияПредварительная",ТаблицаРазмещенияПредварительная);

	ТаблицаНоменклатуры = Запрос.Выполнить();
	
	СтруктураВозврата = РазместитьТоварВЯчейках(Менеджер,Склад,Помещение,Ложь);
	Если СтруктураВозврата = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	ТаблицаРезультатов = СтруктураВозврата.ТаблицаРезультатов;
	ТаблицаОшибок = СтруктураВозврата.ТаблицаОшибок;
	
	ТаблицаРазмещения = Новый ТаблицаЗначений;
	ТаблицаРазмещения = ТаблицаРезультатов.СкопироватьКолонки();
	ТаблицаРазмещения.Колонки.Добавить("ИндексСтрокиОтбора", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,5,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРазмещения.Колонки.Добавить("Излишек", Новый ОписаниеТипов("Булево"));
	ТаблицаРазмещения.Колонки.Добавить("СИзлишками", Новый ОписаниеТипов("Булево"));
	ТаблицаРазмещения.Колонки.Добавить("КоличествоПолученное", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));	
	ТаблицаРазмещения.Индексы.Добавить("ИндексСтрокиОтбора");		
	ИндексСтрокиОтбора = ТаблицаОтбора.Количество();
	
	Для Каждого СтрокаРезультата ИЗ ТаблицаРезультатов Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура",СтрокаРезультата.Номенклатура);
		Отбор.Вставить("Характеристика",СтрокаРезультата.Характеристика);
		Отбор.Вставить("Серия",СтрокаРезультата.Серия);
		Отбор.Вставить("Упаковка",СтрокаРезультата.Упаковка);
		Отбор.Вставить("Размещено",Ложь);
		
		Строки = ТаблицаРазмещенияПредварительная.НайтиСтроки(Отбор);
		КоличествоУпаковок = СтрокаРезультата.КоличествоУпаковок;

		Для Каждого Строка Из Строки Цикл
			
			Если КоличествоУпаковок = 0 Тогда
				Прервать;
			КонецЕсли;
			
			КоличествоУпаковокУменьшения = Мин(КоличествоУпаковок,Строка.Количество);
			
			Строка.Количество = Строка.Количество - КоличествоУпаковокУменьшения; 
			КоличествоУпаковок = КоличествоУпаковок - КоличествоУпаковокУменьшения;
			
			Если Строка.Количество>0 Тогда
				НоваяСтрока = ТаблицаРазмещения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРезультата);
				НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокУменьшения;
				НоваяСтрока.Количество = КоличествоУпаковокУменьшения*Строка.Коэффициент;
				НоваяСтрока.ИндексСтрокиОтбора = Строка.ИндексСтрокиОтбора;
				НоваяСтрока.КоличествоПолученное = Строка.КоличествоПолученное;
				НоваяСтрока.Излишек = Строка.Излишек;
				НоваяСтрока.СИзлишками = Строка.СИзлишками;
			ИначеЕсли Строка.Количество=0 Тогда	
				НоваяСтрока = ТаблицаРазмещения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРезультата);
				НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокУменьшения;
				НоваяСтрока.Количество = КоличествоУпаковокУменьшения*Строка.Коэффициент;
				НоваяСтрока.ИндексСтрокиОтбора = Строка.ИндексСтрокиОтбора;
				НоваяСтрока.КоличествоПолученное = Строка.КоличествоПолученное;
				НоваяСтрока.Излишек = Строка.Излишек;
				НоваяСтрока.СИзлишками = Строка.СИзлишками;
				Строка.Размещено = Истина;
			КонецЕсли;	
						
		КонецЦикла;			
			
	КонецЦикла; 

	// Уменьшение непоместившихся товаров в таблицах отбора, размещения и таблицы для запроса.

	Если ТаблицаОшибок.Количество()>0 Тогда	
		
		ТаблицаРазмещения.Сортировать("СИзлишками Убыв,Излишек Убыв,КоличествоПолученное Убыв");
		
		Для Каждого СтрокаТаблицыНДЗ ИЗ ТаблицаРазмещенияПредварительная.НайтиСтроки(Новый Структура("Размещено",Ложь)) Цикл 
					
			СтрокаТДО = ТаблицаОтбора.Найти(СтрокаТаблицыНДЗ.ИндексСтрокиОтбора,"ИндексСтрокиОтбора");
			Если СтрокаТДО = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			КоличествоОстатка = СтрокаТаблицыНДЗ.Количество*СтрокаТаблицыНДЗ.Коэффициент;
			КоличествоУменьшенияОтбора = СтрокаТДО.Количество - КоличествоОстатка;
			ОставшеесяКоличествоУпаковок = Цел(КоличествоУменьшенияОтбора/СтрокаТДО.Коэффициент);
			КоличествоУменьшения = СтрокаТДО.Количество - СтрокаТДО.Коэффициент*ОставшеесяКоличествоУпаковок;
			Разность = КоличествоУменьшения-КоличествоОстатка;
			
			Если ОставшеесяКоличествоУпаковок = 0 Тогда
				Для Каждого СтрТабРазм Из ТаблицаРазмещения.НайтиСтроки(Новый Структура("ИндексСтрокиОтбора",СтрокаТаблицыНДЗ.ИндексСтрокиОтбора)) Цикл
					ТаблицаРазмещения.Удалить(СтрТабРазм);	
				КонецЦикла;	
				ТаблицаОтбора.Удалить(СтрокаТДО);
				Продолжить;
			Иначе
				СтрокаТДО.КоличествоУпаковок = ОставшеесяКоличествоУпаковок;
				СтрокаТДО.Количество = СтрокаТДО.Количество - КоличествоУменьшения ;
			КонецЕсли;		
			
			СтрокиТаблицыРазмещения = ТаблицаРазмещения.НайтиСтроки(Новый Структура("ИндексСтрокиОтбора",СтрокаТаблицыНДЗ.ИндексСтрокиОтбора));
			
			Для Каждого СтрокаТаблицыРазмещения Из СтрокиТаблицыРазмещения Цикл
				
				Коэффициент = СтрокаТаблицыРазмещения.Количество/ СтрокаТаблицыРазмещения.КоличествоУпаковок;
				ОставшеесяКоличествоУпаковок = Цел((СтрокаТаблицыРазмещения.Количество - Разность)/Коэффициент);
				
				Если ОставшеесяКоличествоУпаковок <= 0 Тогда
					Разность = Разность - СтрокаТаблицыРазмещения.Количество;
					ТаблицаРазмещения.Удалить(СтрокаТаблицыРазмещения);									
				Иначе;
					СтрокаТаблицыРазмещения.КоличествоУпаковок = ОставшеесяКоличествоУпаковок;
					СтрокаТаблицыРазмещения.Количество = СтрокаТаблицыРазмещения.Количество - Разность;
					Прервать;
				КонецЕсли;
					
			КонецЦикла;
			
		КонецЦикла;	
				
	КонецЕсли;
	
	//Подготовить таблицу отбора к разбиению по заданиям
	ТаблицаОтбора.Сортировать("ПорядокОбхода Возр,Код Возр");
	ТаблицаОтбора.Индексы.Добавить("РабочийУчасток");
	
	Если ТаблицаОтбора.Количество()>0 Тогда
		Структура = Новый Структура;
		Структура.Вставить("ТаблицаОтбора", ТаблицаОтбора);
		Структура.Вставить("ТаблицаРазмещения", ТаблицаРазмещения);
		Возврат Структура
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
			
КонецФункции

Процедура РазбитьПоЗаданиям(Склад, Помещение, ТаблицыДляЗаданий, ПараметрыФормированияЗаданий)
			
	ТаблицаРазмещенияЗадания = ТаблицыДляЗаданий.ТаблицаРазмещения.СкопироватьКолонки();
	ТаблицаОтбораЗадания = ТаблицыДляЗаданий.ТаблицаОтбора.СкопироватьКолонки();
	
	Если ПараметрыФормированияЗаданий.НастройкаФормированияПоРабочимУчасткам = "СРазбиениемПоРабочимУчасткам" Тогда
		                          
		ЗапросУчастки = Новый Запрос;
		ЗапросУчастки.Текст = "ВЫБРАТЬ
		|	РабочиеУчастки.Ссылка КАК РабочийУчасток,
		|	РабочиеУчастки.ОграничиватьПоВесу,
		|	РабочиеУчастки.ОграничениеПоВесу,
		|	РабочиеУчастки.ОграничиватьПоОбъему,
		|	РабочиеУчастки.ОграничениеПоОбъему
		|ИЗ
		|	Справочник.РабочиеУчастки КАК РабочиеУчастки
		|ГДЕ
		|	РабочиеУчастки.Владелец = &Склад
		|	И РабочиеУчастки.Помещение = &Помещение";
		
		ЗапросУчастки.УстановитьПараметр("Склад",Склад);
		ЗапросУчастки.УстановитьПараметр("Помещение",Помещение);
		
		ТаблицаРабочихУчастков = ЗапросУчастки.Выполнить().Выгрузить();
		
		НоваяСтрока = ТаблицаРабочихУчастков.Добавить();
		НоваяСтрока.РабочийУчасток = Справочники.РабочиеУчастки.ПустаяСсылка();
		НоваяСтрока.ОграничиватьПоОбъему = Ложь;
		НоваяСтрока.ОграничиватьПоВесу = Ложь;	
		
	Иначе	
		ТаблицаРабочихУчастков = Новый ТаблицаЗначений;
		ТаблицаРабочихУчастков.Колонки.Добавить("РабочийУчасток", Новый ОписаниеТипов("СправочникСсылка.РабочиеУчастки"));
		НоваяСтрока = ТаблицаРабочихУчастков.Добавить();
		Если ПараметрыФормированияЗаданий.НастройкаФормированияПоРабочимУчасткам = "БезРазбиенияПоРабочимУчасткам" Тогда
			НоваяСтрока.РабочийУчасток = Справочники.РабочиеУчастки.ПустаяСсылка();
		Иначе
			НоваяСтрока.РабочийУчасток = ПараметрыФормированияЗаданий.РабочийУчасток;
		КонецЕсли;
	КонецЕсли;
	
	ОченьБольшоеЧисло = 9999999999;
	
	Для Каждого СтрокаРабочийУчасток Из ТаблицаРабочихУчастков Цикл
				
		Если ПараметрыФормированияЗаданий.НастройкаФормированияПоРабочимУчасткам = "СРазбиениемПоРабочимУчасткам" Тогда						
			ПределОбъем = ?(СтрокаРабочийУчасток.ОграничиватьПоОбъему, СтрокаРабочийУчасток.ОграничениеПоОбъему, ОченьБольшоеЧисло);
			ПределВес = ?(СтрокаРабочийУчасток.ОграничиватьПоВесу, СтрокаРабочийУчасток.ОграничениеПоВесу, ОченьБольшоеЧисло);						
		Иначе
			ПределОбъем = ?(ПараметрыФормированияЗаданий.ОграничиватьПоОбъему, ПараметрыФормированияЗаданий.ОграничениеПоОбъему, ОченьБольшоеЧисло);
			ПределВес = ?(ПараметрыФормированияЗаданий.ОграничиватьПоВесу, ПараметрыФормированияЗаданий.ОграничениеПоВесу, ОченьБольшоеЧисло);						
		КонецЕсли;
		
		Если ПараметрыФормированияЗаданий.НастройкаФормированияПоРабочимУчасткам <> "БезРазбиенияПоРабочимУчасткам" Тогда			
			СтрокиТаблицыОтбора = ТаблицыДляЗаданий.ТаблицаОтбора.НайтиСтроки(Новый Структура("РабочийУчасток",СтрокаРабочийУчасток.РабочийУчасток));			
		Иначе			
			СтрокиТаблицыОтбора = ТаблицыДляЗаданий.ТаблицаОтбора;		
		КонецЕсли;
		
		ВесОбщий = 0;                                         
		ОбъемОбщий = 0;
		ТекущийВес = 0;
		ТекущийОбъем = 0;		
		
		ЗаданиеОбъект = НовыйДокументЗаданиеНаПодпиткку(Склад, Помещение, ПараметрыФормированияЗаданий.Исполнитель, СтрокаРабочийУчасток.РабочийУчасток);
		
		Для Каждого СтрокаТаблицыОтбора Из СтрокиТаблицыОтбора Цикл
			
			Пока СтрокаТаблицыОтбора.КоличествоУпаковок>0 Цикл
						
				Если (СтрокаТаблицыОтбора.ВесУпаковки + ВесОбщий > ПределВес 
					Или СтрокаТаблицыОтбора.ОбъемУпаковки + ОбъемОбщий > ПределОбъем)
					И ТаблицаОтбораЗадания.Количество()>0  Тогда
					
					ЗаполнитьИПровестиЗаданиеНаПодпитку(ЗаданиеОбъект, ТаблицаОтбораЗадания, ТаблицаРазмещенияЗадания);
					ТаблицаОтбораЗадания.Очистить();
					ТаблицаРазмещенияЗадания.Очистить();			
					ЗаданиеОбъект = НовыйДокументЗаданиеНаПодпиткку(Склад,
																	Помещение,
																	ПараметрыФормированияЗаданий.Исполнитель,
																	СтрокаРабочийУчасток.РабочийУчасток);	
					ВесОбщий = 0;
					ОбъемОбщий = 0;
					
				КонецЕсли;  
					
				Если СтрокаТаблицыОтбора.ВесУпаковки >= ПределВес
					Или СтрокаТаблицыОтбора.ОбъемУпаковки >= ПределОбъем  Тогда
					КоличествоУпаковокНаОтбор = 1;
					Количество = СтрокаТаблицыОтбора.Коэффициент;
				Иначе
					ДоступныйВес = ПределВес - ВесОбщий;
					ДоступныйОбъем = ПределОбъем - ОбъемОбщий;
					
					Если СтрокаТаблицыОтбора.ВесУпаковки = 0 Тогда
						КоличествоУпаковокНаОтборПоВесу = ОченьБольшоеЧисло;
					Иначе
						КоличествоУпаковокНаОтборПоВесу = Цел(ДоступныйВес/СтрокаТаблицыОтбора.ВесУпаковки);
					КонецЕсли;
					
					Если СтрокаТаблицыОтбора.ОбъемУпаковки = 0 Тогда
						КоличествоУпаковокНаОтборПоОбъему = ОченьБольшоеЧисло;
                    Иначе
						КоличествоУпаковокНаОтборПоОбъему = Цел(ДоступныйОбъем/СтрокаТаблицыОтбора.ОбъемУпаковки);
					КонецЕсли;

					КоличествоУпаковокНаОтбор = Мин(Мин(КоличествоУпаковокНаОтборПоВесу,КоличествоУпаковокНаОтборПоОбъему),
													СтрокаТаблицыОтбора.КоличествоУпаковок);
					Количество = КоличествоУпаковокНаОтбор*СтрокаТаблицыОтбора.Коэффициент;
				КонецЕсли;	

				СтрокаТаблицыОтбора.КоличествоУпаковок = СтрокаТаблицыОтбора.КоличествоУпаковок - КоличествоУпаковокНаОтбор;
				СтрокаТаблицыОтбора.Количество = СтрокаТаблицыОтбора.Количество - Количество;
				
				НоваяСтрока = ТаблицаОтбораЗадания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыОтбора);
				НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокНаОтбор;
				НоваяСтрока.Количество = Количество;
				
				СтрокиТаблицыРазмещения = ТаблицыДляЗаданий.ТаблицаРазмещения.НайтиСтроки(Новый Структура("ИндексСтрокиОтбора",
																						  СтрокаТаблицыОтбора.ИндексСтрокиОтбора)); 
				Для Каждого СтрокаТаблицыРазмещения Из СтрокиТаблицыРазмещения Цикл
					Коэффициент = (СтрокаТаблицыРазмещения.Количество/СтрокаТаблицыРазмещения.КоличествоУпаковок);
					КоличествоУпаковокРазмещения = Цел(Количество/Коэффициент);
					КоличествоУпаковокРазмещения = Мин(КоличествоУпаковокРазмещения,СтрокаТаблицыРазмещения.КоличествоУпаковок);
					
					НоваяСтрока = ТаблицаРазмещенияЗадания.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТаблицыРазмещения);
					НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокРазмещения;
					НоваяСтрока.Количество = КоличествоУпаковокРазмещения*Коэффициент;
					
					Если КоличествоУпаковокРазмещения = СтрокаТаблицыРазмещения.КоличествоУпаковок Тогда
						ТаблицыДляЗаданий.ТаблицаРазмещения.Удалить(СтрокаТаблицыРазмещения);
					Иначе
						СтрокаТаблицыРазмещения.КоличествоУпаковок = СтрокаТаблицыРазмещения.КоличествоУпаковок - КоличествоУпаковокРазмещения;
						СтрокаТаблицыРазмещения.Количество = СтрокаТаблицыРазмещения.Количество - КоличествоУпаковокРазмещения*Коэффициент;
					КонецЕсли;
					
					Количество = Количество - КоличествоУпаковокРазмещения*Коэффициент;
					
					Если Количество=0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				ВесОбщий = ВесОбщий + СтрокаТаблицыОтбора.ВесУпаковки * КоличествоУпаковокНаОтбор;
				ОбъемОбщий = ОбъемОбщий + СтрокаТаблицыОтбора.ОбъемУпаковки * КоличествоУпаковокНаОтбор;
								
			КонецЦикла;
			
		КонецЦикла;
		
		Если ТаблицаОтбораЗадания.Количество()>0 Тогда
			ЗаполнитьИПровестиЗаданиеНаПодпитку(ЗаданиеОбъект, ТаблицаОтбораЗадания, ТаблицаРазмещенияЗадания);
			ТаблицаОтбораЗадания.Очистить();
			ТаблицаРазмещенияЗадания.Очистить();			
			ЗаданиеОбъект = НовыйДокументЗаданиеНаПодпиткку(Склад,
															Помещение,
															ПараметрыФормированияЗаданий.Исполнитель,
															СтрокаРабочийУчасток.РабочийУчасток);			
		КонецЕсли;	
				
	КонецЦикла;	
	
КонецПроцедуры

Функция НовыйДокументЗаданиеНаПодпиткку(Склад, Помещение, Исполнитель, РабочийУчасток)
	
	ЗаданиеОбъект               = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	ЗаданиеОбъект.Склад         = Склад;
	ЗаданиеОбъект.Дата          = ТекущаяДата();
	ЗаданиеОбъект.ВидОперации   = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение;
	ЗаданиеОбъект.Помещение     = Помещение; 
	ЗаданиеОбъект.Статус        = Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
	ЗаданиеОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если Исполнитель<>Неопределено Тогда
		ЗаданиеОбъект.Исполнитель = Исполнитель;
	КонецЕсли;
	
	ЗаданиеОбъект.РабочийУчасток = РабочийУчасток;
	
	Возврат ЗаданиеОбъект;
	
КонецФункции

Процедура ЗаполнитьИПровестиЗаданиеНаПодпитку(ЗаданиеОбъект, ТаблицаОтбора, ТаблицаРазмещения)
	
	ТаблицаОтбора.Свернуть("Номенклатура, Характеристика, Серия,Упаковка, Коэффициент, ВесУпаковки, ОбъемУпаковки, Ячейка, РабочийУчасток","КоличествоУпаковок,Количество");
	ТаблицаРазмещения.Свернуть("Номенклатура, Характеристика, Серия, Упаковка, ВесУпаковки, ОбъемУпаковки, Ячейка, ПорядокОбхода, Код, РабочийУчасток","КоличествоУпаковок,Количество");
	
	ТаблицаРазмещения.Сортировать("ПорядокОбхода Возр,Код Возр");
	
	Для Каждого Строка Из ТаблицаРазмещения Цикл
		НоваяСтрока = ЗаданиеОбъект.ТоварыРазмещение.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.КоличествоУпаковокРазмещено = Строка.КоличествоУпаковок;
		НоваяСтрока.КоличествоРазмещено = Строка.Количество;
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаОтбора Цикл
		НоваяСтрока = ЗаданиеОбъект.ТоварыОтбор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.КоличествоУпаковокОтобрано = Строка.КоличествоУпаковок;
		НоваяСтрока.КоличествоОтобрано = Строка.Количество;
	КонецЦикла;			
	
	ЗаданиеОбъект.Записать(РежимЗаписиДокумента.Запись);
	Попытка
		ЗаданиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка:'")+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьТаблицуУпаковокПоТекущимРаспоряжениям(Склад, Помещение, МенеджерВременныхТаблиц, ПараметрыФормированияЗаданий)
	
	РаспоряженияНаОтбор = Неопределено;
	
	ПоРаспоряжениямНаОтбор = ПараметрыФормированияЗаданий.Свойство("ПоРаспоряжениямНаОтбор");
	
	Если ПоРаспоряжениямНаОтбор Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТоварыКОтборуОстатки.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТоварыКОтборуОстатки.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|			ТОГДА ТоварыКОтборуОстатки.Номенклатура
		|		ИНАЧЕ ТоварыКОтборуОстатки.Номенклатура.НаборУпаковок
		|	КОНЕЦ КАК ВладелецУпаковок,
		|	ТоварыКОтборуОстатки.Серия,
		|	ТоварыКОтборуОстатки.Характеристика,
		|	ТоварыКОтборуОстатки.КОтборуОстаток - ТоварыКОтборуОстатки.ОтбираетсяОстаток - ТоварыКОтборуОстатки.ОтобраноОстаток КАК Количество,
		|	ТоварыКОтборуОстатки.Распоряжение,
		|	&Склад КАК Склад,
		|	&Помещение КАК Помещение
		|ПОМЕСТИТЬ ТоварыКОтбору
		|ИЗ
		|	РегистрНакопления.ТоварыКОтбору.Остатки(, Распоряжение В (&РаспоряженияНаОтбор)) КАК ТоварыКОтборуОстатки
		|ГДЕ
		|	ТоварыКОтборуОстатки.КОтборуОстаток - ТоварыКОтборуОстатки.ОтбираетсяОстаток - ТоварыКОтборуОстатки.ОтобраноОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтбору.Распоряжение,
		|	ТоварыКОтбору.Номенклатура,
		|	ТоварыКОтбору.Характеристика,
		|	ТоварыКОтбору.Серия,
		|	ТоварыКОтбору.Количество,
		|	УпаковкиНоменклатуры.Ссылка КАК Упаковка,
		|	УпаковкиНоменклатуры.Коэффициент КАК КоличествоВУпаковке,
		|	ТоварыКОтбору.Склад,
		|	ТоварыКОтбору.Помещение
		|ИЗ
		|	ТоварыКОтбору КАК ТоварыКОтбору
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|		ПО ТоварыКОтбору.ВладелецУпаковок = УпаковкиНоменклатуры.Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыКОтбору.Распоряжение,
		|	ТоварыКОтбору.Склад,
		|	ТоварыКОтбору.Помещение,
		|	ТоварыКОтбору.Номенклатура,
		|	ТоварыКОтбору.Характеристика,
		|	ТоварыКОтбору.Серия,
		|	КоличествоВУпаковке УБЫВ,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыКОтбору";
		Запрос.УстановитьПараметр("РаспоряженияНаОтбор", ПараметрыФормированияЗаданий.ПоРаспоряжениямНаОтбор);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузкеОстатки.Серия КАК Серия,
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Распоряжение,
		|	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток КАК Количество,
		|	ВЫБОР
		|		КОГДА ТоварыКОтгрузкеОстатки.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|			ТОГДА ТоварыКОтгрузкеОстатки.Номенклатура
		|		ИНАЧЕ ТоварыКОтгрузкеОстатки.Номенклатура.НаборУпаковок
		|	КОНЕЦ КАК ВладелецУпаковок,
		|	ТоварыКОтгрузкеОстатки.Склад,
		|	&Помещение КАК Помещение
		|ПОМЕСТИТЬ ТоварыКОтгрузкеДляЗапроса
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(&ДатаОтгрузки, Склад = &Склад) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика,
		|	ТоварыНаСкладахОстатки.Склад,
		|	ТоварыНаСкладахОстатки.Помещение,
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток,
		|	ТоварыНаСкладахОстатки.КОтгрузкеОстаток,
		|	ТоварыНаСкладахОстатки.Серия
		|ПОМЕСТИТЬ ОстаткиТоваровВПомещении
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			(Склад, Помещение, Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					ТоварыКОтгрузке.Склад,
		|					ТоварыКОтгрузке.Помещение,
		|					ТоварыКОтгрузке.Номенклатура,
		|					ТоварыКОтгрузке.Характеристика
		|				ИЗ
		|					ТоварыКОтгрузкеДляЗапроса КАК ТоварыКОтгрузке)) КАК ТоварыНаСкладахОстатки
		|ГДЕ
		|	ТоварыНаСкладахОстатки.ВНаличииОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТоварыКОтгрузке.Номенклатура,
		|	ТоварыКОтгрузке.Характеристика,
		|	ТоварыКОтгрузке.Серия,
		|	ТоварыКОтгрузке.Распоряжение,
		|	ТоварыКОтгрузке.Количество,
		|	ТоварыКОтгрузке.ВладелецУпаковок,
		|	ТоварыКОтгрузке.Склад,
		|	ТоварыКОтгрузке.Помещение
		|ПОМЕСТИТЬ ТоварыКОтгрузке
		|ИЗ
		|	ТоварыКОтгрузкеДляЗапроса КАК ТоварыКОтгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиТоваровВПомещении КАК ОстаткиТоваровВПомещении
		|		ПО ТоварыКОтгрузке.Номенклатура = ОстаткиТоваровВПомещении.Номенклатура
		|			И ТоварыКОтгрузке.Характеристика = ОстаткиТоваровВПомещении.Характеристика
		|			И ТоварыКОтгрузке.Склад = ОстаткиТоваровВПомещении.Склад
		|			И ТоварыКОтгрузке.Помещение = ОстаткиТоваровВПомещении.Помещение
		|			И (ТоварыКОтгрузке.Серия = ОстаткиТоваровВПомещении.Серия
		|				ИЛИ ТоварыКОтгрузке.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузке.Распоряжение,
		|	ТоварыКОтгрузке.Номенклатура,
		|	ТоварыКОтгрузке.Характеристика,
		|	ТоварыКОтгрузке.Серия,
		|	ТоварыКОтгрузке.Количество,
		|	УпаковкиНоменклатуры.Ссылка КАК Упаковка,
		|	УпаковкиНоменклатуры.Коэффициент КАК КоличествоВУпаковке,
		|	ТоварыКОтгрузке.Склад,
		|	ТоварыКОтгрузке.Помещение
		|ИЗ
		|	ТоварыКОтгрузке КАК ТоварыКОтгрузке
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|		ПО ТоварыКОтгрузке.ВладелецУпаковок = УпаковкиНоменклатуры.Владелец
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыКОтгрузке.Распоряжение,
		|	ТоварыКОтгрузке.Склад,
		|	ТоварыКОтгрузке.Помещение,
		|	ТоварыКОтгрузке.Номенклатура,
		|	ТоварыКОтгрузке.Характеристика,
		|	ТоварыКОтгрузке.Серия,
		|	КоличествоВУпаковке УБЫВ,
		|	Упаковка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыКОтгрузкеДляЗапроса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОстаткиТоваровВПомещении
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыКОтгрузке";
		Запрос.УстановитьПараметр("ДатаОтгрузки", КонецДня(ТекущаяДата() + 86400));
	КонецЕсли;	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	
			
	ТаблицаТребуемыхУпаковок = Новый ТаблицаЗначений;
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Количество", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("КоличествоВУпаковке", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Помещение", Новый ОписаниеТипов("СправочникСсылка.СкладскиеПомещения"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ТекРаспоряжение = Неопределено;
	ТекНоменклатура = Неопределено;
	ТекХарактеристика = Неопределено;
	ТекСклад = Неопределено;
	ТекПомещение = Неопределено;
	ТекСерия = Неопределено;
	ТекПериод = Неопределено;
	Количество = 0;
	
	ВыборкаПоУпаковкам = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоУпаковкам.Следующий() Цикл
		
		Если ВыборкаПоУпаковкам.Номенклатура <> ТекНоменклатура Или 
			ВыборкаПоУпаковкам.Распоряжение <> ТекРаспоряжение Или
			ВыборкаПоУпаковкам.Характеристика <> ТекХарактеристика Или
			ВыборкаПоУпаковкам.Склад <> ТекСклад Или
			ВыборкаПоУпаковкам.Помещение <> ТекПомещение Или
			ВыборкаПоУпаковкам.Серия <> ТекСерия Тогда
			
			ТекРаспоряжение             = ВыборкаПоУпаковкам.Распоряжение;
			ТекНоменклатура             = ВыборкаПоУпаковкам.Номенклатура;
			ТекХарактеристика           = ВыборкаПоУпаковкам.Характеристика;
			ТекСклад                    = ВыборкаПоУпаковкам.Склад;
			ТекПомещение                = ВыборкаПоУпаковкам.Помещение;
			ТекСерия                    = ВыборкаПоУпаковкам.Серия;
			Количество = ВыборкаПоУпаковкам.Количество;
			
		КонецЕсли;
		
		КоличествоВДокумент = Цел(Количество / ВыборкаПоУпаковкам.КоличествоВУпаковке);
		
		Если КоличествоВДокумент > 0 Тогда
			
			НоваяСтрока = ТаблицаТребуемыхУпаковок.Добавить();
			НоваяСтрока.Количество = КоличествоВДокумент * ВыборкаПоУпаковкам.КоличествоВУпаковке;
			НоваяСтрока.КоличествоУпаковок = КоличествоВДокумент;
			НоваяСтрока.Упаковка = ВыборкаПоУпаковкам.Упаковка;
			НоваяСтрока.Номенклатура = ВыборкаПоУпаковкам.Номенклатура;
			НоваяСтрока.Характеристика = ВыборкаПоУпаковкам.Характеристика;
			НоваяСтрока.Склад = ВыборкаПоУпаковкам.Склад;
			НоваяСтрока.Помещение = ВыборкаПоУпаковкам.Помещение;
			НоваяСтрока.Серия = ВыборкаПоУпаковкам.Серия;
			НоваяСтрока.КоличествоВУпаковке = ВыборкаПоУпаковкам.КоличествоВУпаковке;
			Количество = Количество - КоличествоВДокумент * ВыборкаПоУпаковкам.КоличествоВУпаковке;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УпаковкиПоРаспоряжениям.Номенклатура КАК Номенклатура,
	|	УпаковкиПоРаспоряжениям.Характеристика КАК Характеристика,
	|	УпаковкиПоРаспоряжениям.Упаковка КАК Упаковка,
	|	УпаковкиПоРаспоряжениям.Серия КАК Серия,
	|	УпаковкиПоРаспоряжениям.КоличествоВУпаковке КАК КоличествоВУпаковке,
	|	УпаковкиПоРаспоряжениям.Количество КАК Количество,
	|	УпаковкиПоРаспоряжениям.КоличествоУпаковок КАК КоличествоУпаковок,
	|	УпаковкиПоРаспоряжениям.Склад КАК Склад,
	|	УпаковкиПоРаспоряжениям.Помещение КАК Помещение
	|ПОМЕСТИТЬ УпаковкиПоРаспоряжениямДляГруппировки
	|ИЗ
	|	&ТаблицаУпаковокПоТекущимРаспоряжениям КАК УпаковкиПоРаспоряжениям
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиПоРаспоряжениямДляЗапроса.Номенклатура,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Характеристика,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Упаковка,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Серия,
	|	СУММА(УпаковкиПоРаспоряжениямДляЗапроса.Количество) КАК Количество,
	|	СУММА(УпаковкиПоРаспоряжениямДляЗапроса.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Склад,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Помещение
	|ПОМЕСТИТЬ " + ?(ПоРаспоряжениямНаОтбор, "УпаковкиКПодпиткеДляЗапроса",  "УпаковкиПоРаспоряжениям") + "
	|ИЗ
	|	УпаковкиПоРаспоряжениямДляГруппировки КАК УпаковкиПоРаспоряжениямДляЗапроса
	|
	|СГРУППИРОВАТЬ ПО
	|	УпаковкиПоРаспоряжениямДляЗапроса.Характеристика,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Упаковка,
	|	УпаковкиПоРаспоряжениямДляЗапроса.КоличествоВУпаковке,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Серия,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Номенклатура,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Склад,
	|	УпаковкиПоРаспоряжениямДляЗапроса.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ УпаковкиПоРаспоряжениямДляГруппировки";
	
	Запрос.УстановитьПараметр("ТаблицаУпаковокПоТекущимРаспоряжениям",ТаблицаТребуемыхУпаковок);
	Запрос.Выполнить();
		  		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прогноз расхода упаковок.

Процедура ВыполнитьРасчетПоказателейДляПрогнозаИКлассифицациюУпаковок(НастройкиПодпитки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПериодКлассификации = Перечисления.Периодичность.День;
	КоличествоПериодовКлассификации = НастройкиПодпитки.ГлубинаАнализа;
	ПериодКлассификации = Перечисления.Периодичность.День;
	
	Период = ОбщегоНазначенияУТКлиентСервер.РасширенныйПериод(ТекущаяДата() + 86400, ПериодКлассификации, - КоличествоПериодовКлассификации);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьТаблицуУпаковокПоИсторииОтгрузок(НастройкиПодпитки.Склад, НастройкиПодпитки.Помещение, Период, МенеджерВременныхТаблиц);
	
 	ВыполнитьВыполнитьXYZКлассификациюУпаковок(Период, МенеджерВременныхТаблиц);
 	
 	ВыполнитьРасчетПоказателейПрогнозаРасходаУпаковок(Период, МенеджерВременныхТаблиц);
	
	ЗаписатьПоказателиПрогнозаВРегистр(НастройкиПодпитки.Склад, НастройкиПодпитки.Помещение, МенеджерВременныхТаблиц);
	
КонецПроцедуры

Процедура СоздатьТаблицуУпаковокПоИсторииОтгрузок(Склад, Помещение, Период, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка КАК ДокументОтгрузки,
	|	РасходныйОрдерНаТовары.Склад,
	|	РасходныйОрдерНаТовары.Помещение,
	|	РасходныйОрдерНаТовары.ДатаОтгрузки
	|ПОМЕСТИТЬ ТаблицаРаспоряжений
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	РасходныйОрдерНаТовары.ДатаОтгрузки МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И РасходныйОрдерНаТовары.Проведен
	|	И РасходныйОрдерНаТовары.Склад = &Склад
	|	И РасходныйОрдерНаТовары.Помещение = &Помещение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОрдерНаПеремещениеТоваров.Ссылка,
	|	ОрдерНаПеремещениеТоваров.Склад,
	|	ОрдерНаПеремещениеТоваров.ПомещениеОтправитель,
	|	ОрдерНаПеремещениеТоваров.ДатаОтгрузки
	|ИЗ
	|	Документ.ОрдерНаПеремещениеТоваров КАК ОрдерНаПеремещениеТоваров
	|ГДЕ
	|	ОрдерНаПеремещениеТоваров.ДатаОтгрузки МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ОрдерНаПеремещениеТоваров.Проведен
	|	И ОрдерНаПеремещениеТоваров.Склад = &Склад
	|	И ОрдерНаПеремещениеТоваров.ПомещениеОтправитель = &Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтборуОбороты.Распоряжение,
	|	ТоварыКОтборуОбороты.Номенклатура,
	|	ТоварыКОтборуОбороты.Характеристика,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ТоварыКОтборуОбороты.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ КАК Серия,
	|	СУММА(ТоварыКОтборуОбороты.ОтобраноРасход + ТоварыКОтборуОбороты.КОтборуПриход) КАК Количество,
	|	ВЫБОР
	|		КОГДА ТоварыКОтборуОбороты.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|			ТОГДА ТоварыКОтборуОбороты.Номенклатура
	|		ИНАЧЕ ТоварыКОтборуОбороты.Номенклатура.НаборУпаковок
	|	КОНЕЦ КАК ВладелецУпаковок,
	|	ТаблицаРаспоряжений.Склад,
	|	ТаблицаРаспоряжений.Помещение,
	|	ТаблицаРаспоряжений.ДатаОтгрузки
	|ПОМЕСТИТЬ ОтобранныеТовары
	|ИЗ
	|	РегистрНакопления.ТоварыКОтбору.Обороты(
	|			,
	|			,
	|			,
	|			Распоряжение В
	|				(ВЫБРАТЬ
	|					ТаблицаРаспоряжений.ДокументОтгрузки КАК Распоряжение
	|				ИЗ
	|					ТаблицаРаспоряжений КАК ТаблицаРаспоряжений)) КАК ТоварыКОтборуОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|		ПО ТоварыКОтборуОбороты.Номенклатура.ВидНоменклатуры = ВидыНоменклатурыПолитикиУчетаСерий.Ссылка
	|			И (ВидыНоменклатурыПолитикиУчетаСерий.Склад = &Склад)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРаспоряжений КАК ТаблицаРаспоряжений
	|		ПО ТоварыКОтборуОбороты.Распоряжение = ТаблицаРаспоряжений.ДокументОтгрузки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтборуОбороты.Распоряжение,
	|	ТоварыКОтборуОбороты.Номенклатура,
	|	ТоварыКОтборуОбороты.Характеристика,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ТоварыКОтборуОбороты.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаРаспоряжений.Склад,
	|	ТаблицаРаспоряжений.Помещение,
	|	ТаблицаРаспоряжений.ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА ТоварыКОтборуОбороты.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|			ТОГДА ТоварыКОтборуОбороты.Номенклатура
	|		ИНАЧЕ ТоварыКОтборуОбороты.Номенклатура.НаборУпаковок
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтобранныеТовары.Распоряжение,
	|	ОтобранныеТовары.Номенклатура,
	|	ОтобранныеТовары.Характеристика,
	|	ОтобранныеТовары.Серия,
	|	ОтобранныеТовары.Количество,
	|	УпаковкиНоменклатуры.Ссылка КАК Упаковка,
	|	УпаковкиНоменклатуры.Коэффициент КАК КоличествоВУпаковке,
	|	ОтобранныеТовары.Склад,
	|	ОтобранныеТовары.Помещение,
	|	НАЧАЛОПЕРИОДА(ОтобранныеТовары.ДатаОтгрузки, ДЕНЬ) КАК Период
	|ИЗ
	|	ОтобранныеТовары КАК ОтобранныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|		ПО ОтобранныеТовары.ВладелецУпаковок = УпаковкиНоменклатуры.Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	Распоряжение,
	|	Склад,
	|	Помещение,
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	КоличествоВУпаковке УБЫВ,
	|	Упаковка";
		
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
			
	ТаблицаТребуемыхУпаковок = Новый ТаблицаЗначений;
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Количество", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("КоличествоВУпаковке", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Помещение", Новый ОписаниеТипов("СправочникСсылка.СкладскиеПомещения"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаТребуемыхУпаковок.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ТекРаспоряжение = Неопределено;
	ТекНоменклатура = Неопределено;
	ТекХарактеристика = Неопределено;
	ТекСклад = Неопределено;
	ТекПомещение = Неопределено;
	ТекСерия = Неопределено;
	ТекПериод = Неопределено;
	Количество = 0;
	
	ВыборкаПоУпаковкам = Запрос.Выполнить().Выбрать();
	Пока ВыборкаПоУпаковкам.Следующий() Цикл
		
		Если ВыборкаПоУпаковкам.Номенклатура <> ТекНоменклатура Или 
			ВыборкаПоУпаковкам.Распоряжение <> ТекРаспоряжение Или
			ВыборкаПоУпаковкам.Характеристика <> ТекХарактеристика Или
			ВыборкаПоУпаковкам.Склад <> ТекСклад Или
			ВыборкаПоУпаковкам.Помещение <> ТекПомещение Или
			ВыборкаПоУпаковкам.Период <> ТекПериод Или
			ВыборкаПоУпаковкам.Серия <> ТекСерия Тогда
			
			ТекРаспоряжение             = ВыборкаПоУпаковкам.Распоряжение;
			ТекНоменклатура             = ВыборкаПоУпаковкам.Номенклатура;
			ТекХарактеристика           = ВыборкаПоУпаковкам.Характеристика;
			ТекСклад                    = ВыборкаПоУпаковкам.Склад;
			ТекПомещение                = ВыборкаПоУпаковкам.Помещение;
			ТекСерия                    = ВыборкаПоУпаковкам.Серия;
			ТекПериод                   = ВыборкаПоУпаковкам.Период;			
			Количество = ВыборкаПоУпаковкам.Количество;
			
		КонецЕсли;
		
		КоличествоВДокумент = Цел(Количество / ВыборкаПоУпаковкам.КоличествоВУпаковке);
		
		Если КоличествоВДокумент > 0 Тогда
			
			НоваяСтрока = ТаблицаТребуемыхУпаковок.Добавить();
			НоваяСтрока.Количество = КоличествоВДокумент * ВыборкаПоУпаковкам.КоличествоВУпаковке;
			НоваяСтрока.КоличествоУпаковок = КоличествоВДокумент;
			НоваяСтрока.Упаковка = ВыборкаПоУпаковкам.Упаковка;
			НоваяСтрока.Номенклатура = ВыборкаПоУпаковкам.Номенклатура;
			НоваяСтрока.Характеристика = ВыборкаПоУпаковкам.Характеристика;
			НоваяСтрока.Склад = ВыборкаПоУпаковкам.Склад;
			НоваяСтрока.Помещение = ВыборкаПоУпаковкам.Помещение;
			НоваяСтрока.Серия = ВыборкаПоУпаковкам.Серия;
			НоваяСтрока.Период = ВыборкаПоУпаковкам.Период;
			НоваяСтрока.КоличествоВУпаковке = ВыборкаПоУпаковкам.КоличествоВУпаковке;
			
			Количество = Количество - КоличествоВДокумент * ВыборкаПоУпаковкам.КоличествоВУпаковке;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст  =
	"ВЫБРАТЬ
	|	ТаблицаУпаковок.Номенклатура,
	|	ТаблицаУпаковок.Характеристика,
	|	ТаблицаУпаковок.Серия,
	|	ТаблицаУпаковок.Упаковка,
	|	ТаблицаУпаковок.КоличествоУпаковок,
	|	ТаблицаУпаковок.КоличествоВУпаковке,
	|	ТаблицаУпаковок.Склад,
	|	ТаблицаУпаковок.Помещение,
	|	ТаблицаУпаковок.Период
	|ПОМЕСТИТЬ ТаблицаУпаковокДляЗапроса
	|ИЗ
	|	&ТаблицаУпаковок КАК ТаблицаУпаковок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУпаковокДляЗапроса.Номенклатура,
	|	ТаблицаУпаковокДляЗапроса.Характеристика,
	|	ТаблицаУпаковокДляЗапроса.Серия,
	|	ТаблицаУпаковокДляЗапроса.Упаковка,
	|	ТаблицаУпаковокДляЗапроса.КоличествоВУпаковке,
	|	СУММА(ТаблицаУпаковокДляЗапроса.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ТаблицаУпаковокДляЗапроса.Склад,
	|	ТаблицаУпаковокДляЗапроса.Помещение,
	|	ТаблицаУпаковокДляЗапроса.Период КАК Период
	|ПОМЕСТИТЬ ТаблицаУпаковок
	|ИЗ
	|	ТаблицаУпаковокДляЗапроса КАК ТаблицаУпаковокДляЗапроса
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУпаковокДляЗапроса.Номенклатура,
	|	ТаблицаУпаковокДляЗапроса.КоличествоВУпаковке,
	|	ТаблицаУпаковокДляЗапроса.Характеристика,
	|	ТаблицаУпаковокДляЗапроса.Серия,
	|	ТаблицаУпаковокДляЗапроса.Упаковка,
	|	ТаблицаУпаковокДляЗапроса.Склад,
	|	ТаблицаУпаковокДляЗапроса.Помещение,
	|	ТаблицаУпаковокДляЗапроса.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаУпаковокДляЗапроса";
	
	Запрос.УстановитьПараметр("ТаблицаУпаковок", ТаблицаТребуемыхУпаковок);
	Запрос.Выполнить();
	
КонецПроцедуры		

Процедура ВыполнитьВыполнитьXYZКлассификациюУпаковок(Период, МенеджерВременныхТаблиц)
	
	ИсточникДанных = Новый Структура;
	ИсточникДанных.Вставить("ИсточникДанных",ИсточникДанныхДляXYZКлассификации(Период, МенеджерВременныхТаблиц));
	ИсточникДанных.Вставить("НачалоПериода",Период.ДатаНачала);
	ИсточникДанных.Вставить("ОкончаниеПериода",Период.ДатаОкончания);
		
	РезультатКлассификации = Классификация.ВыполнитьXYZКлассификацию(ИсточникДанных,
																	"КоличествоУпаковок", "Склад, Помещение, Номенклатура, Характеристика, Серия, Упаковка");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РезультатКлассификации.Номенклатура,
	|	РезультатКлассификации.Характеристика,
	|	РезультатКлассификации.Серия,
	|	РезультатКлассификации.Упаковка,
	|	РезультатКлассификации.Склад,
	|	РезультатКлассификации.Помещение,
	|	РезультатКлассификации.Класс
	|ПОМЕСТИТЬ РезультатКлассификации
	|ИЗ
	|	&РезультатКлассификации КАК РезультатКлассификации;";
	
	Запрос.УстановитьПараметр("РезультатКлассификации", РезультатКлассификации);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ИсточникДанныхДляXYZКлассификации(Период, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	0 КАК РазделительКлассификации,
	|	ДанныеДляКлассификации.Номенклатура КАК Номенклатура,
	|	ДанныеДляКлассификации.Характеристика КАК Характеристика,
	|	ДанныеДляКлассификации.Серия КАК Серия,
	|	ДанныеДляКлассификации.Упаковка КАК Упаковка,
	|	ДанныеДляКлассификации.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ДанныеДляКлассификации.Склад КАК Склад,
	|	ДанныеДляКлассификации.Помещение КАК Помещение,
	|	ВЫРАЗИТЬ(ДанныеДляКлассификации.Период КАК ДАТА) КАК Период
	|ИЗ
	|	ТаблицаУпаковок КАК ДанныеДляКлассификации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДляКлассификации.Склад,
	|	ДанныеДляКлассификации.Помещение
	|ИТОГИ
	|	МАКСИМУМ(РазделительКлассификации),
	|	СУММА(КоличествоУпаковок)
	|ПО
	|	Склад,
	|	Помещение,
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Упаковка,
	|	Период ПЕРИОДАМИ(ДЕНЬ, &НачалоПериода, &ОкончаниеПериода)";
	
	Запрос.УстановитьПараметр("НачалоПериода", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Период.ДатаОкончания);
	
	Возврат Запрос.Выполнить();
		
КонецФункции

Процедура ВыполнитьРасчетПоказателейПрогнозаРасходаУпаковок(Период, МенеджерВременныхТаблиц)
	
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	ДатаИзПериода = НачалоДня(Период.ДатаНачала);
	
	Пока ДатаИзПериода <= НачалоДня(Период.ДатаОкончания) Цикл 
		НоваяСтрока = ТаблицаДат.Добавить();
		НоваяСтрока.Период = ДатаИзПериода;
		ДатаИзПериода = ДатаИзПериода + 86400;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаУпаковок.Номенклатура,
	|	ТаблицаУпаковок.Характеристика,
	|	ТаблицаУпаковок.Серия,
	|	ТаблицаУпаковок.Упаковка,
	|	ТаблицаУпаковок.КоличествоВУпаковке,
	|	СУММА(ТаблицаУпаковок.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	ТаблицаУпаковок.Склад,
	|	ТаблицаУпаковок.Помещение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаУпаковок.Период) КАК КоличествоДнейСРасходом
	|ПОМЕСТИТЬ ТаблицаУпаковокБезПериодов
	|ИЗ
	|	ТаблицаУпаковок КАК ТаблицаУпаковок
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУпаковок.Упаковка,
	|	ТаблицаУпаковок.КоличествоВУпаковке,
	|	ТаблицаУпаковок.Номенклатура,
	|	ТаблицаУпаковок.Характеристика,
	|	ТаблицаУпаковок.Серия,
	|	ТаблицаУпаковок.Склад,
	|	ТаблицаУпаковок.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДат.Период
	|ПОМЕСТИТЬ ТаблицаДат
	|ИЗ
	|	&ТаблицаДат КАК ТаблицаДат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ОстаткиИОборотыТоваров.ВНаличииКонечныйОстаток) КАК Количество,
	|	ОстаткиИОборотыТоваров.Номенклатура,
	|	ОстаткиИОборотыТоваров.Характеристика,
	|	ТаблицаУпаковокБезПериодов.Серия,
	|	ОстаткиИОборотыТоваров.Период,
	|	ОстаткиИОборотыТоваров.Склад,
	|	ОстаткиИОборотыТоваров.Помещение
	|ПОМЕСТИТЬ ОстаткиИОборотыТоваров
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.ОстаткиИОбороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			День,
	|			ДвиженияИГраницыПериода,
	|			(Склад, Помещение, Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					ТаблицаУпаковок.Склад,
	|					ТаблицаУпаковок.Помещение,
	|					ТаблицаУпаковок.Номенклатура,
	|					ТаблицаУпаковок.Характеристика
	|				ИЗ
	|					ТаблицаУпаковокБезПериодов КАК ТаблицаУпаковок)) КАК ОстаткиИОборотыТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаУпаковокБезПериодов КАК ТаблицаУпаковокБезПериодов
	|		ПО ОстаткиИОборотыТоваров.Номенклатура = ТаблицаУпаковокБезПериодов.Номенклатура
	|			И ОстаткиИОборотыТоваров.Характеристика = ТаблицаУпаковокБезПериодов.Характеристика
	|			И ОстаткиИОборотыТоваров.Склад = ТаблицаУпаковокБезПериодов.Склад
	|			И ОстаткиИОборотыТоваров.Помещение = ТаблицаУпаковокБезПериодов.Помещение
	|			И (ОстаткиИОборотыТоваров.Серия = ТаблицаУпаковокБезПериодов.Серия
	|				ИЛИ ТаблицаУпаковокБезПериодов.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУпаковокБезПериодов.Серия,
	|	ОстаткиИОборотыТоваров.Характеристика,
	|	ОстаткиИОборотыТоваров.Номенклатура,
	|	ОстаткиИОборотыТоваров.Период,
	|	ОстаткиИОборотыТоваров.Склад,
	|	ОстаткиИОборотыТоваров.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиУпаковок.Количество,
	|	ОстаткиУпаковок.Номенклатура,
	|	ОстаткиУпаковок.Характеристика,
	|	ОстаткиУпаковок.Серия,
	|	ОстаткиУпаковок.Склад,
	|	ОстаткиУпаковок.Помещение,
	|	ТаблицаДат.Период,
	|	МИНИМУМ(ОстаткиУпаковок.Период) КАК ПериодВТаблицеОборотов
	|ПОМЕСТИТЬ ПериодыОстатковТоваров
	|ИЗ
	|	ТаблицаДат КАК ТаблицаДат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиИОборотыТоваров КАК ОстаткиУпаковок
	|		ПО ТаблицаДат.Период >= ОстаткиУпаковок.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиУпаковок.Серия,
	|	ОстаткиУпаковок.Номенклатура,
	|	ТаблицаДат.Период,
	|	ОстаткиУпаковок.Характеристика,
	|	ОстаткиУпаковок.Помещение,
	|	ОстаткиУпаковок.Склад,
	|	ОстаткиУпаковок.Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиИОборотыТоваров.Номенклатура,
	|	ОстаткиИОборотыТоваров.Характеристика,
	|	ОстаткиИОборотыТоваров.Серия,
	|	ОстаткиИОборотыТоваров.Склад,
	|	ОстаткиИОборотыТоваров.Помещение,
	|	ОстаткиИОборотыТоваров.Количество,
	|	ПериодыОстатковТоваров.Период
	|ПОМЕСТИТЬ ОстаткиТоваровПоДням
	|ИЗ
	|	ОстаткиИОборотыТоваров КАК ОстаткиИОборотыТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыОстатковТоваров КАК ПериодыОстатковТоваров
	|		ПО ОстаткиИОборотыТоваров.Номенклатура = ПериодыОстатковТоваров.Номенклатура
	|			И ОстаткиИОборотыТоваров.Характеристика = ПериодыОстатковТоваров.Характеристика
	|			И ОстаткиИОборотыТоваров.Серия = ПериодыОстатковТоваров.Серия
	|			И ОстаткиИОборотыТоваров.Склад = ПериодыОстатковТоваров.Склад
	|			И ОстаткиИОборотыТоваров.Помещение = ПериодыОстатковТоваров.Помещение
	|			И ОстаткиИОборотыТоваров.Период = ПериодыОстатковТоваров.ПериодВТаблицеОборотов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУпаковокБезПериодов.Номенклатура,
	|	ТаблицаУпаковокБезПериодов.Характеристика,
	|	ТаблицаУпаковокБезПериодов.Серия,
	|	ТаблицаУпаковокБезПериодов.Упаковка,
	|	ТаблицаУпаковокБезПериодов.КоличествоУпаковок,
	|	ТаблицаУпаковокБезПериодов.Склад,
	|	ТаблицаУпаковокБезПериодов.Помещение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОстаткиТоваровПоДням.Период) КАК КоличествоДнейСОстатком
	|ПОМЕСТИТЬ ТаблицаКоличествоДнейСОстатком
	|ИЗ
	|	ТаблицаУпаковокБезПериодов КАК ТаблицаУпаковокБезПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиТоваровПоДням КАК ОстаткиТоваровПоДням
	|		ПО ТаблицаУпаковокБезПериодов.Номенклатура = ОстаткиТоваровПоДням.Номенклатура
	|			И ТаблицаУпаковокБезПериодов.Характеристика = ОстаткиТоваровПоДням.Характеристика
	|			И ТаблицаУпаковокБезПериодов.Серия = ОстаткиТоваровПоДням.Серия
	|			И ТаблицаУпаковокБезПериодов.Склад = ОстаткиТоваровПоДням.Склад
	|			И ТаблицаУпаковокБезПериодов.Помещение = ОстаткиТоваровПоДням.Помещение
	|ГДЕ
	|	ОстаткиТоваровПоДням.Количество > ТаблицаУпаковокБезПериодов.КоличествоВУпаковке
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУпаковокБезПериодов.Упаковка,
	|	ТаблицаУпаковокБезПериодов.КоличествоУпаковок,
	|	ТаблицаУпаковокБезПериодов.Серия,
	|	ТаблицаУпаковокБезПериодов.Номенклатура,
	|	ТаблицаУпаковокБезПериодов.Помещение,
	|	ТаблицаУпаковокБезПериодов.Склад,
	|	ТаблицаУпаковокБезПериодов.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУпаковокБезПериодов.Номенклатура,
	|	ТаблицаУпаковокБезПериодов.Характеристика,
	|	ТаблицаУпаковокБезПериодов.Серия,
	|	ТаблицаУпаковокБезПериодов.Упаковка,
	|	ТаблицаУпаковокБезПериодов.КоличествоВУпаковке,
	|	ТаблицаУпаковокБезПериодов.КоличествоУпаковок,
	|	ТаблицаУпаковокБезПериодов.Склад,
	|	ТаблицаУпаковокБезПериодов.Помещение,
	|	ТаблицаУпаковокБезПериодов.КоличествоДнейСРасходом,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаКоличествоДнейСОстатком.КоличествоДнейСОстатком, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаУпаковокБезПериодов.КоличествоДнейСРасходом / ТаблицаКоличествоДнейСОстатком.КоличествоДнейСОстатком
	|	КОНЕЦ * 100 КАК ВероятностьОтгрузкиВТечениеДня,
	|	ТаблицаУпаковокБезПериодов.КоличествоУпаковок / ТаблицаУпаковокБезПериодов.КоличествоДнейСРасходом КАК СреднедневноеПотребление
	|ПОМЕСТИТЬ ТаблицаСреднедневногоПотребления
	|ИЗ
	|	ТаблицаУпаковокБезПериодов КАК ТаблицаУпаковокБезПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКоличествоДнейСОстатком КАК ТаблицаКоличествоДнейСОстатком
	|		ПО ТаблицаУпаковокБезПериодов.Номенклатура = ТаблицаКоличествоДнейСОстатком.Номенклатура
	|			И ТаблицаУпаковокБезПериодов.Характеристика = ТаблицаКоличествоДнейСОстатком.Характеристика
	|			И ТаблицаУпаковокБезПериодов.Серия = ТаблицаКоличествоДнейСОстатком.Серия
	|			И ТаблицаУпаковокБезПериодов.Упаковка = ТаблицаКоличествоДнейСОстатком.Упаковка
	|			И ТаблицаУпаковокБезПериодов.Склад = ТаблицаКоличествоДнейСОстатком.Склад
	|			И ТаблицаУпаковокБезПериодов.Помещение = ТаблицаКоличествоДнейСОстатком.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУпаковок.Номенклатура,
	|	ТаблицаУпаковок.Характеристика,
	|	ТаблицаУпаковок.Серия,
	|	ТаблицаУпаковок.Упаковка,
	|	ТаблицаУпаковок.Склад,
	|	ТаблицаУпаковок.Помещение,
	|	СУММА((ТаблицаУпаковок.КоличествоУпаковок - ТаблицаСреднедневногоПотребления.СреднедневноеПотребление) * (ТаблицаУпаковок.КоличествоУпаковок - ТаблицаСреднедневногоПотребления.СреднедневноеПотребление) / ВЫБОР
	|			КОГДА ТаблицаСреднедневногоПотребления.КоличествоДнейСРасходом < 2
	|				ТОГДА 1
	|			ИНАЧЕ ТаблицаСреднедневногоПотребления.КоличествоДнейСРасходом - 1
	|		КОНЕЦ) КАК Дисперсия,
	|	ТаблицаСреднедневногоПотребления.СреднедневноеПотребление,
	|	ТаблицаСреднедневногоПотребления.ВероятностьОтгрузкиВТечениеДня
	|ИЗ
	|	ТаблицаУпаковок КАК ТаблицаУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСреднедневногоПотребления КАК ТаблицаСреднедневногоПотребления
	|		ПО ТаблицаУпаковок.Номенклатура = ТаблицаСреднедневногоПотребления.Номенклатура
	|			И ТаблицаУпаковок.Характеристика = ТаблицаСреднедневногоПотребления.Характеристика
	|			И ТаблицаУпаковок.Упаковка = ТаблицаСреднедневногоПотребления.Упаковка
	|			И ТаблицаУпаковок.Серия = ТаблицаСреднедневногоПотребления.Серия
	|			И ТаблицаУпаковок.Склад = ТаблицаСреднедневногоПотребления.Склад
	|			И ТаблицаУпаковок.Помещение = ТаблицаСреднедневногоПотребления.Помещение
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаУпаковок.Упаковка,
	|	ТаблицаУпаковок.Номенклатура,
	|	ТаблицаУпаковок.Помещение,
	|	ТаблицаУпаковок.Серия,
	|	ТаблицаУпаковок.Характеристика,
	|	ТаблицаУпаковок.Склад,
	|	ТаблицаСреднедневногоПотребления.СреднедневноеПотребление,
	|	ТаблицаСреднедневногоПотребления.ВероятностьОтгрузкиВТечениеДня";
	
	Запрос.УстановитьПараметр("ТаблицаДат", ТаблицаДат);
	Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
	
	ТаблицаПоказателей = Запрос.Выполнить().Выгрузить();
	
	ТаблицаПоказателей.Колонки.Добавить("СреднеквадратическоеОтклонение", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
 
	Для Каждого СтрТабл из ТаблицаПоказателей Цикл
		СтрТабл.СреднеквадратическоеОтклонение = Sqrt(СтрТабл.Дисперсия);	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоказателиПрогноза.Номенклатура,
	|	ПоказателиПрогноза.Характеристика,
	|	ПоказателиПрогноза.Серия,
	|	ПоказателиПрогноза.Упаковка,
	|	ПоказателиПрогноза.Склад,
	|	ПоказателиПрогноза.Помещение,
	|	ПоказателиПрогноза.СреднедневноеПотребление,
	|	ПоказателиПрогноза.СреднеквадратическоеОтклонение,
	|	ПоказателиПрогноза.ВероятностьОтгрузкиВТечениеДня
	|ПОМЕСТИТЬ ПоказателиПрогноза
	|ИЗ
	|	&ПоказателиПрогноза КАК ПоказателиПрогноза";
	
	Запрос.УстановитьПараметр("ПоказателиПрогноза", ТаблицаПоказателей);
	Запрос.Выполнить();
		
КонецПроцедуры

Процедура ЗаписатьПоказателиПрогнозаВРегистр(Склад, Помещение, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.Помещение,
	|	МАКСИМУМ(ВложенныйЗапрос.СреднедневноеПотребление) КАК СреднедневноеПотребление,
	|	МАКСИМУМ(ВложенныйЗапрос.СреднеквадратическоеОтклонение) КАК СреднеквадратическоеОтклонение,
	|	МАКСИМУМ(ВложенныйЗапрос.ВероятностьОтгрузкиВТечениеДня) КАК ВероятностьОтгрузкиВТечениеДня,
	|	МАКСИМУМ(ВложенныйЗапрос.НазначеноПользователем) КАК НазначеноПользователем,
	|	МАКСИМУМ(ВложенныйЗапрос.НормативноеКоличествоЗапаса) КАК НормативноеКоличествоЗапаса,
	|	МАКСИМУМ(ВложенныйЗапрос.Класс) КАК Класс
	|ИЗ
	|	(ВЫБРАТЬ
	|		РезультатКлассификации.Номенклатура КАК Номенклатура,
	|		РезультатКлассификации.Характеристика КАК Характеристика,
	|		РезультатКлассификации.Серия КАК Серия,
	|		РезультатКлассификации.Упаковка КАК Упаковка,
	|		РезультатКлассификации.Склад КАК Склад,
	|		РезультатКлассификации.Помещение КАК Помещение,
	|		0 КАК СреднедневноеПотребление,
	|		0 КАК СреднеквадратическоеОтклонение,
	|		0 КАК ВероятностьОтгрузкиВТечениеДня,
	|		ЛОЖЬ КАК НазначеноПользователем,
	|		0 КАК НормативноеКоличествоЗапаса,
	|		РезультатКлассификации.Класс КАК Класс
	|	ИЗ
	|		РезультатКлассификации КАК РезультатКлассификации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПоказателиПрогноза.Номенклатура,
	|		ПоказателиПрогноза.Характеристика,
	|		ПоказателиПрогноза.Серия,
	|		ПоказателиПрогноза.Упаковка,
	|		ПоказателиПрогноза.Склад,
	|		ПоказателиПрогноза.Помещение,
	|		ПоказателиПрогноза.СреднедневноеПотребление,
	|		ПоказателиПрогноза.СреднеквадратическоеОтклонение,
	|		ПоказателиПрогноза.ВероятностьОтгрузкиВТечениеДня,
	|		ЛОЖЬ,
	|		0,
	|		ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.ПустаяСсылка)
	|	ИЗ
	|		ПоказателиПрогноза КАК ПоказателиПрогноза
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПрогнозыРасходаУпаковок.Номенклатура,
	|		ПрогнозыРасходаУпаковок.Характеристика,
	|		ПрогнозыРасходаУпаковок.Серия,
	|		ПрогнозыРасходаУпаковок.Упаковка,
	|		ПрогнозыРасходаУпаковок.Склад,
	|		ПрогнозыРасходаУпаковок.Помещение,
	|		0,
	|		0,
	|		0,
	|		ИСТИНА,
	|		ПрогнозыРасходаУпаковок.НормативноеКоличествоЗапаса,
	|		ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.ПустаяСсылка)
	|	ИЗ
	|		РегистрСведений.ПрогнозыРасходаУпаковок КАК ПрогнозыРасходаУпаковок
	|	ГДЕ
	|		ПрогнозыРасходаУпаковок.НазначеноПользователем
	|		И ПрогнозыРасходаУпаковок.Склад = &Склад
	|		И ПрогнозыРасходаУпаковок.Помещение = &Помещение) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Серия,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.Помещение";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	
	Набор = РегистрыСведений.ПрогнозыРасходаУпаковок.СоздатьНаборЗаписей();
	Набор.Отбор.Склад.Установить(Склад);
	Набор.Отбор.Помещение.Установить(Помещение);
	
	Набор.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Набор.Записать();
	
КонецПроцедуры

//Функция возращает признак использования на складе статусов приходных или расходных ордеров
//	Параметры:
//		Склад - ссылка на элемент справочника "Склады"
//		ПроверятьПриходные - Булево - проверять статусы приходных ордеров
//		ПроверятьРасходные - Булево - проверять статусы расходных ордеров
//	Возвращаемое значение:
//		Булево - признак использования статусов ордеров
//
Функция ИспользоватьСтатусыОрдеров(Склад, ПроверятьПриходные = Истина, ПроверятьРасходные = Истина) Экспорт
	
	СтруктураПараметров = Новый Структура("Склад", Склад);
	
	Возврат
		(ПроверятьПриходные И ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПриходныхОрдеров", СтруктураПараметров))
		ИЛИ (ПроверятьРасходные И ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРасходныхОрдеров", СтруктураПараметров));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Состояние отгрузки

// Процедура по переданным ссылкам на документы отгрузки расчитывает и записывает в регистр сведений состояние отгрузки
//
//	Параметры:
//		ДокументыОтгрузки - Массив (состоящий из ДокументСсылка), ДокументСсылка - ссылки на документы, по которым
//					нужно рассчитать состояние отгрузки. В модуле менеджера документов должна быть определена фукнция
//					ТекстЗапросаДляРассчетаСостоянийОтгрузки(), которая возвращает текст запроса к шапке документа
//		ДокументОбъект - ДокументОбъект - документ, в рамках проведения которого перерасчтиывается состояние отгрузки
//      Отказ - Булево - признак прерывания обработки проведения
//
Процедура ОтразитьСостоянияОтгрузки(ДокументыОтгрузки, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(ДокументыОтгрузки) = Тип("Массив") Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ДокументыОтгрузки);
	Иначе
		МассивСсылок = ДокументыОтгрузки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МассивСсылок) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСостоянияОтгрузки = ТаблицаСостоянийОтгрузки(МассивСсылок);
	
	Для Каждого СтрокаТаблицы Из ТаблицаСостоянияОтгрузки Цикл

		Набор = РегистрыСведений.СостоянияОтгрузки.СоздатьНаборЗаписей();
		Набор.Отбор.ДокументОтгрузки.Установить(СтрокаТаблицы.ДокументОтгрузки);
		
		Если СтрокаТаблицы.Состояние <> Перечисления.СостоянияОтгрузки.Доставлено
			И СтрокаТаблицы.Состояние <> Перечисления.СостоянияОтгрузки.НеРассчитано Тогда
			СтрокаНабора = Набор.Добавить();
			СтрокаНабора.ДокументОтгрузки = СтрокаТаблицы.ДокументОтгрузки;
			СтрокаНабора.Состояние = СтрокаТаблицы.Состояние;
		КонецЕсли;
		
		Набор.Записать(Истина);
		
	КонецЦикла;

КонецПроцедуры

//Функция возращает признак использования на складе(помещении) рабочих участков
//	Параметры
//			Склад - ссылка на элемент справочника "Склады
//			Помещение - ссылка на элемент справочника "Складские помещения"
Функция ИспользоватьРабочиеУчастки(Склад, Помещение) Экспорт
	СтруктураПараметров = Новый Структура("Склад, Помещение",Склад, Помещение);
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьРабочиеУчастки", СтруктураПараметров);
	
КонецФункции

// Функция возвращает текущее состояние отгрузки по документу
//
// Параметры:
//		 ДанныеФормыДокумента - ДанныеФормыСтруктура - значение основного реквизита формы документа
//
// Возвращаемое значение
//		ПеречилениеСсылка.СостоянияОтгрузки
//
Функция ТекущееСостояниеОтгрузкиДокумента(ДанныеФормыДокумента) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеФормыДокумента.Ссылка)
		Или Не ДанныеФормыДокумента.Проведен Тогда
		Возврат Перечисления.СостоянияОтгрузки.НеРассчитано;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияОтгрузки.Состояние КАК Состояние 
		|ИЗ
		|	РегистрСведений.СостоянияОтгрузки КАК СостоянияОтгрузки
		|ГДЕ
		|	СостоянияОтгрузки.ДокументОтгрузки = &ДокументОтгрузки";
		Запрос.УстановитьПараметр("ДокументОтгрузки",ДанныеФормыДокумента.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Состояние;
		Иначе
			Возврат Перечисления.СостоянияОтгрузки.Доставлено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Состояния отгрузки

//Фукнция возвращает таблицу значений с состояниями отгрузки документов
//
//  Параметры:
//		СсылкиНаДокументы - Массив (состоящий из ДокументСсылка) - ссылки на документы, по которым
//					нужно рассчитать состояние отгрузки. В модуле менеджера документов должна быть определена фукнция
//					ТекстЗапросаДляРассчетаСостоянийОтгрузки(), которая возвращает текст запроса к шапке документа
//	Возвращаемое значение:
//		ТаблицаЗначений:
//			ДокументОтгрузки - ДокументСсылка
//			Состояние - ПеречислениеСсылка.СостоянияОтгрузки
//
Функция ТаблицаСостоянийОтгрузки(МассивСсылок)
	
	СоотвествиеТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивСсылок);
	
	ПервыйЗапрос = Истина;
	ТекстЗапроса = "";
	
	Для Каждого ТипДокумента из СоотвествиеТипов Цикл
		
		Если Не ПервыйЗапрос Тогда 
			ТекстЗапроса = ТекстЗапроса + 
			" ОБЪЕДИНИТЬ ВСЕ ";			
		КонецЕсли;
		 		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипДокумента.Ключ);
		ТекстЗапроса    = ТекстЗапроса + МенеджерОбъекта.ТекстЗапросаДляРассчетаСостоянийОтгрузки();
		
		Если ПервыйЗапрос Тогда
			ПоложениеИЗ = Найти(ТекстЗапроса, "ИЗ");
			ТекстЗапроса = Лев(ТекстЗапроса,ПоложениеИЗ - 1)
							+ " ПОМЕСТИТЬ ДанныеДокументаОтгрузки "
							+ Прав(ТекстЗапроса,СтрДлина(ТекстЗапроса) - ПоложениеИЗ + 1);
		КонецЕсли;
		
		ПервыйЗапрос = Ложь;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса + ";" + 
	"ВЫБРАТЬ
	|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение КАК Ссылка,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Закрыт)
	|						И НЕ ЗаданиеНаПеревозкуРаспоряжения.Доставлено
	|					ИЛИ ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется)
	|				ТОГДА 0
	|			КОГДА ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Закрыт), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Отправлен))
	|					И ЗаданиеНаПеревозкуРаспоряжения.Доставлено
	|				ТОГДА 3
	|			КОГДА ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Отправлен)
	|					И НЕ ЗаданиеНаПеревозкуРаспоряжения.Доставлено
	|				ТОГДА 2
	|			КОГДА ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.КПогрузке)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Статус
	|ПОМЕСТИТЬ ДанныеЗаданиеНаПеревозку
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|ГДЕ
	|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Проведен
	|	И ЗаданиеНаПеревозкуРаспоряжения.Распоряжение В(&ДокументыОтгрузки)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(1) КАК Количество,
	|	РасходныйОрдерНаТовары.Распоряжение КАК Ссылка
	|ПОМЕСТИТЬ КоличествоВыполненныхРасходныхОрдеров
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	РасходныйОрдерНаТовары.Распоряжение В(&ДокументыОтгрузки)
	|	И РасходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.Отгружен)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходныйОрдерНаТовары.Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Ссылка,
	|	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток,
	|	ТоварыКОтгрузкеОстатки.СобираетсяОстаток,
	|	ТоварыКОтгрузкеОстатки.СобраноОстаток,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток > 0
	|					И ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток <> ТоварыКОтгрузкеОстатки.СобираетсяОстаток + ТоварыКОтгрузкеОстатки.СобраноОстаток
	|					И ЕСТЬNULL(КоличествоВыполненныхРасходныхОрдеров.Количество, 0) = 0
	|				ТОГДА 0 //Созданы не все ордера
	|			КОГДА ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток > 0
	|					И ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток = ТоварыКОтгрузкеОстатки.СобираетсяОстаток + ТоварыКОтгрузкеОстатки.СобраноОстаток
	|					И ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток <> ТоварыКОтгрузкеОстатки.СобраноОстаток
	|				ТОГДА 1 //Все ордера созданы, но не все собраны
	|			КОГДА ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток > 0
	|					И ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток = ТоварыКОтгрузкеОстатки.СобраноОстаток
	|				ТОГДА 2 //Все ордера собраны, но не все отгружены
	|			КОГДА ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток = 0
	|				ТОГДА 3 //Все ордера отгружены
	|			КОГДА ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток > 0
	|					И ТоварыКОтгрузкеОстатки.СобираетсяОстаток = 0
	|					И ТоварыКОтгрузкеОстатки.СобраноОстаток = 0
	|					И ЕСТЬNULL(КоличествоВыполненныхРасходныхОрдеров.Количество, 0) <> 0
	|				ТОГДА 4 //Есть отгруженные ордера, нет собирающихся ордеров, но отгружено не полностью
	|			ИНАЧЕ 404
	|		КОНЕЦ) КАК ИтоговоеСостояние
	|ПОМЕСТИТЬ ДанныеСостояниеТоваровОтгрузки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК ДокументОтгрузки,
	|		ТоварыКОтгрузкеОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыКОтгрузкеОстатки.Характеристика КАК Характеристика,
	|		ТоварыКОтгрузкеОстатки.Склад КАК Склад,
	|		ТоварыКОтгрузкеОстатки.Серия КАК Серия,
	|		ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток КАК КОтгрузкеОстаток,
	|		ТоварыКОтгрузкеОстатки.СобираетсяОстаток КАК СобираетсяОстаток,
	|		ТоварыКОтгрузкеОстатки.СобраноОстаток КАК СобраноОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыКОтгрузке.Остатки(, ДокументОтгрузки В (&ДокументыОтгрузки)) КАК ТоварыКОтгрузкеОстатки) КАК ТоварыКОтгрузкеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоВыполненныхРасходныхОрдеров КАК КоличествоВыполненныхРасходныхОрдеров
	|		ПО ТоварыКОтгрузкеОстатки.ДокументОтгрузки = КоличествоВыполненныхРасходныхОрдеров.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
	|	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток,
	|	ТоварыКОтгрузкеОстатки.СобираетсяОстаток,
	|	ТоварыКОтгрузкеОстатки.СобраноОстаток
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ДанныеДокументаОтгрузки.Проведен
	|				ТОГДА ВЫБОР
	|						КОГДА ДанныеДокументаОтгрузки.ИспользоватьОрдернуюСхемуПриОтгрузке
	|							ТОГДА ВЫБОР
	|									КОГДА ДанныеДокументаОтгрузки.Статус = ""КПредоплате""
	|										ТОГДА 0 //ОжидаетсяПредоплата
	|									КОГДА ДанныеДокументаОтгрузки.Статус В (""КОтгрузке"", ""Отгружено"")
	|											И ЕСТЬNULL(ДанныеДокументаОтгрузки.СпособДоставки, ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)) В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|											И ЕСТЬNULL(ДанныеДокументаОтгрузки.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку, ЛОЖЬ)
	|											И ЕСТЬNULL(ДанныеЗаданиеНаПеревозку.Статус, 0) = 0
	|										ТОГДА 1 //ОжидаетсяВключениеВРейс
	|									КОГДА ДанныеДокументаОтгрузки.Статус В (""КОтгрузке"", ""Отгружено"")
	|											И (ЕСТЬNULL(ДанныеДокументаОтгрузки.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку, ЛОЖЬ)
	|													И (ЕСТЬNULL(ДанныеДокументаОтгрузки.СпособДоставки, ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)) В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|															И ЕСТЬNULL(ДанныеЗаданиеНаПеревозку.Статус, 0) В (1, 2, 3)
	|														ИЛИ ЕСТЬNULL(ДанныеДокументаОтгрузки.СпособДоставки, ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)) В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)))
	|												ИЛИ НЕ ЕСТЬNULL(ДанныеДокументаОтгрузки.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку, ЛОЖЬ))
	|											И ЕСТЬNULL(ДанныеСостояниеТоваровОтгрузки.ИтоговоеСостояние, 3) = 0
	|										ТОГДА 2 //ОжидаетсяОтборТоваров
	|									КОГДА ДанныеДокументаОтгрузки.Статус В (""КОтгрузке"",""Отгружено"")
	|											И (ЕСТЬNULL(ДанныеДокументаОтгрузки.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку, ЛОЖЬ)
	|													И (ЕСТЬNULL(ДанныеДокументаОтгрузки.СпособДоставки, ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)) В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|															И ЕСТЬNULL(ДанныеЗаданиеНаПеревозку.Статус, 0) В (1, 2, 3)
	|														ИЛИ ЕСТЬNULL(ДанныеДокументаОтгрузки.СпособДоставки, ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)) В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)))
	|												ИЛИ НЕ ЕСТЬNULL(ДанныеДокументаОтгрузки.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку, ЛОЖЬ))
	|											И ЕСТЬNULL(ДанныеСостояниеТоваровОтгрузки.ИтоговоеСостояние, 3) = 1
	|										ТОГДА 3 //ТоварыОтбираются
	|									КОГДА ДанныеДокументаОтгрузки.Статус В (""КОтгрузке"", ""Отгружено"")
	|											И ЕСТЬNULL(ДанныеСостояниеТоваровОтгрузки.ИтоговоеСостояние, 3) = 2
	|										ТОГДА 4 //ОжидаетсяОтгрузка
	|									КОГДА ДанныеДокументаОтгрузки.Статус В (""КОтгрузке"", ""Отгружено"")
	|											И ЕСТЬNULL(КоличествоВыполненныхРасходныхОрдеров.Количество, 0) <> 0
	|											И ЕСТЬNULL(ДанныеСостояниеТоваровОтгрузки.ИтоговоеСостояние, 3) = 4
	|										ТОГДА 5 //ОтгруженоНеПолностью
	|									КОГДА ДанныеДокументаОтгрузки.Статус В (""КОтгрузке"", ""Отгружено"")
	|											И (ЕСТЬNULL(ДанныеДокументаОтгрузки.СпособДоставки, ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)) В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|												И ЕСТЬNULL(ДанныеЗаданиеНаПеревозку.Статус, 0) В (0,1,2))
	|											И ЕСТЬNULL(КоличествоВыполненныхРасходныхОрдеров.Количество, 0) <> 0
	|											И ЕСТЬNULL(ДанныеСостояниеТоваровОтгрузки.ИтоговоеСостояние, 3) = 3
	|										ТОГДА 6 //ВПроцессеДоставки
	|									КОГДА ДанныеДокументаОтгрузки.Статус В (""КОтгрузке"", ""Отгружено"")
	|											И (ЕСТЬNULL(ДанныеДокументаОтгрузки.СпособДоставки, ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)) В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|													И ЕСТЬNULL(ДанныеЗаданиеНаПеревозку.Статус, 0) = 3
	|												ИЛИ ЕСТЬNULL(ДанныеДокументаОтгрузки.СпособДоставки, ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)) В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)))
	|											И ЕСТЬNULL(ДанныеСостояниеТоваровОтгрузки.ИтоговоеСостояние, 3) = 3
	|										ТОГДА 7 //Доставлено
	|									ИНАЧЕ 404
	|								КОНЕЦ
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ДанныеДокументаОтгрузки.Статус = ""КПредоплате""
	|									ТОГДА 0 //ОжидаетсяПредоплата
	|								КОГДА ДанныеДокументаОтгрузки.Статус В (""КОтгрузке"", ""Отгружено"")
	|										И ЕСТЬNULL(ДанныеДокументаОтгрузки.СпособДоставки, ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)) В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|										И ЕСТЬNULL(ДанныеЗаданиеНаПеревозку.Статус, 0) = 0
	|									ТОГДА 1 //ОжидаетсяВключениеВРейс
	|								КОГДА ДанныеДокументаОтгрузки.Статус В (""КОтгрузке"", ""Отгружено"")
	|											И ЕСТЬNULL(ДанныеДокументаОтгрузки.СпособДоставки, ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)) В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|											И ЕСТЬNULL(ДанныеЗаданиеНаПеревозку.Статус, 0) = 1
	|										ИЛИ ДанныеДокументаОтгрузки.Статус = ""КОтгрузке""
	|											И ЕСТЬNULL(ДанныеДокументаОтгрузки.СпособДоставки, ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)) В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика))
	|									ТОГДА 4 //ОжидаетсяОтгрузка
	|								КОГДА ДанныеДокументаОтгрузки.Статус В (""КОтгрузке"", ""Отгружено"")
	|										И ЕСТЬNULL(ДанныеДокументаОтгрузки.СпособДоставки, ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)) В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|										И ЕСТЬNULL(ДанныеЗаданиеНаПеревозку.Статус, 0) = 2
	|									ТОГДА 6 //ВПроцессеДоставки
	|								КОГДА ДанныеДокументаОтгрузки.Статус В (""КОтгрузке"", ""Отгружено"")
	|											И ЕСТЬNULL(ДанныеДокументаОтгрузки.СпособДоставки, ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)) В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|											И ЕСТЬNULL(ДанныеЗаданиеНаПеревозку.Статус, 0) = 3
	|										ИЛИ ДанныеДокументаОтгрузки.Статус = ""Отгружено""
	|											И ЕСТЬNULL(ДанныеДокументаОтгрузки.СпособДоставки, ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)) В (ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз), ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика))
	|									ТОГДА 7 //Доставлено
	|								ИНАЧЕ 404
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ 500
	|		КОНЕЦ) КАК Состояние,
	|	ДанныеДокументаОтгрузки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ РезультатСостоянийПоСкладам
	|ИЗ
	|	ДанныеДокументаОтгрузки КАК ДанныеДокументаОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеЗаданиеНаПеревозку КАК ДанныеЗаданиеНаПеревозку
	|		ПО ДанныеДокументаОтгрузки.Ссылка = ДанныеЗаданиеНаПеревозку.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеСостояниеТоваровОтгрузки КАК ДанныеСостояниеТоваровОтгрузки
	|		ПО ДанныеДокументаОтгрузки.Ссылка = ДанныеСостояниеТоваровОтгрузки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоВыполненныхРасходныхОрдеров КАК КоличествоВыполненныхРасходныхОрдеров
	|		ПО ДанныеДокументаОтгрузки.Ссылка = КоличествоВыполненныхРасходныхОрдеров.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументаОтгрузки.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатСостоянийПоСкладам.Ссылка КАК ДокументОтгрузки,
	|	ВЫБОР
	|		КОГДА РезультатСостоянийПоСкладам.Состояние = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтгрузки.ОжидаетсяПредоплата)
	|		КОГДА РезультатСостоянийПоСкладам.Состояние = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтгрузки.ОжидаетсяВключениеВРейс)
	|		КОГДА РезультатСостоянийПоСкладам.Состояние = 2
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтгрузки.ОжидаетсяОтборТоваров)
	|		КОГДА РезультатСостоянийПоСкладам.Состояние = 3
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтгрузки.ТоварыОтбираются)
	|		КОГДА РезультатСостоянийПоСкладам.Состояние = 4
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтгрузки.ОжидаетсяОтгрузка)
	|		КОГДА РезультатСостоянийПоСкладам.Состояние = 5
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтгрузки.ОтгруженоНеПолностью)
	|		КОГДА РезультатСостоянийПоСкладам.Состояние = 6
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтгрузки.ВПроцессеДоставки)
	|		КОГДА РезультатСостоянийПоСкладам.Состояние = 7
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтгрузки.Доставлено)
	|		КОГДА РезультатСостоянийПоСкладам.Состояние = 404
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтгрузки.НеРассчитано)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтгрузки.ПустаяСсылка)
	|	КОНЕЦ КАК Состояние
	|ИЗ
	|	РезультатСостоянийПоСкладам КАК РезультатСостоянийПоСкладам";
	
	Запрос.УстановитьПараметр("ДокументыОтгрузки", МассивСсылок);	
	РезультатЗапросаСостояние = Запрос.ВыполнитьПакет()[5].Выгрузить();
	
	Возврат РезультатЗапросаСостояние;
	 	
КонецФункции

