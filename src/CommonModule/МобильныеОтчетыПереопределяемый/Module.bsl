////////////////////////////////////////////////////////////////////////////////
//МОДУЛЬ СОДЕРЖИТ МЕТОДЫ ДЛЯ РАБОТЫ С ОБМЕНОМ С МОБИЛЬНЫМ ПРИЛОЖЕНИЕМ "1С: ОТЧЕТЫ РУКОВОДИТЕЛЯ"
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура записывает данные в формат XML
// Процедура анализирует переданный объект данных и на основе этого анализа
// записывает его определенным образом в формат XML
//
// Параметры:
//  ЗаписьXML	- объект, записывающий XML данные
//  Данные 		- данные, подлежащие записи в формат XML
//
Процедура ЗаписатьДанные(ЗаписьXML, Данные) Экспорт
		
	Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);
		Возврат;
	КонецЕсли;
	
	ОбъектМетаданные= Данные.Метаданные();
	ОписаниеОбъекта = ПолучитьСтруктуруОписанияОбъекта(ОбъектМетаданные);
	
	URIИмен = "http://v8.1c.ru/8.1/data/enterprise/current-config";
		
	МакетПравилОбмена              = ПланыОбмена.МобильноеПриложениеОтчетыРуководителя.ПолучитьМакет("МобильноеПриложение");
	УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xsd";
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	
	Фабрика = СоздатьФабрикуXDTO(ИмяВременногоФайлаПравилОбмена);	
	
	Если ОписаниеОбъекта.ИмяКласса = "Справочники" Тогда
		
		ТипОбъекта   = Фабрика.Тип(URIИмен, "CatalogObject."+СокрЛП(ОписаниеОбъекта.ИмяОбъекта));
 		ОбъектОбмена = Фабрика.Создать(ТипОбъекта);
     
		ОбъектОбмена.Ref = Данные.Ссылка.УникальныйИдентификатор();
 		ОбъектОбмена.DeletionMark  = Данные.Ссылка.ПометкаУдаления;
		Если ОбъектМетаданные.ДлинаКода>0 Тогда
			ОбъектОбмена.Code = Данные.Код;
		КонецЕсли;
		
		Если ОбъектМетаданные.Иерархический Тогда
			Если Не СокрЛП(ОбъектМетаданные.ВидИерархии) = "ИерархияЭлементов" Тогда 
				ОбъектОбмена.IsFolder = Данные.ЭтоГруппа;
			КонецЕсли;
		    ОбъектОбмена.Parent   = Данные.Родитель.УникальныйИдентификатор();			
		КонецЕсли;
		
		ОбъектОбмена.Description = Данные.Наименование;
				
		Если Не ОбъектМетаданные.Реквизиты.Найти("НаименованиеПолное") = Неопределено Тогда
    		ОбъектОбмена.НаименованиеПолное = Данные.НаименованиеПолное;
		КонецЕсли;
				
		Если СокрЛП(ОписаниеОбъекта.ИмяОбъекта) = "ВариантыОтчетов" Тогда
			ОбъектОбмена.ДатаОбновления  = ТекущаяДата();
			ОбъектОбмена.КлючВарианта = Данные.КлючВарианта;
			ОбъектОбмена.Настройки    = Данные.Настройки;
			//Отчет со стандартными настройками варианта
			ОбъектОбмена.Результат 	  = ПолучитьРезультатОтчета(Данные.Ссылка, Данные.Настройки.Получить());
						
			//Отчет с текущими настройками варианта
			НастройкиПользователя = ХранилищеСистемныхНастроек.Загрузить(Данные.Отчет.ПолноеИмя+"/"+Данные.КлючВарианта+"/ТекущиеПользовательскиеНастройки");
			Если Не НастройкиПользователя = Неопределено Тогда
				ТипОбъектаСтрокаТаблицы   = Фабрика.Тип(URIИмен, "CatalogTabularSectionRow.ВариантыОтчетов.ПользовательскиеНастройкиВариантовОтчетов");
 				ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
				ОбъектОбменаСтрокаТаблицы.КлючНастройки = "ТекущиеПользовательскиеНастройки";
				ОбъектОбменаСтрокаТаблицы.ПредставлениеНастройки = "Текущие пользовательские настройки";
				ОбъектОбменаСтрокаТаблицы.Результат = ПолучитьРезультатОтчета(Данные.Ссылка, Данные.Настройки.Получить(), , "ТекущиеПользовательскиеНастройки");
				ОбъектОбмена.ПользовательскиеНастройкиВариантовОтчетов.Добавить(ОбъектОбменаСтрокаТаблицы);	
			КонецЕсли;						
			//Отчет с сохраненными настройками варианта
			Фильтр = Новый Структура;	
			Фильтр.Вставить("Пользователь", Пользователи.ТекущийПользователь());
			Фильтр.Вставить("КлючОбъекта", Данные.Отчет.ПолноеИмя+"/"+Данные.КлючВарианта);
			
			Выб = ХранилищеПользовательскихНастроекОтчетов.Выбрать(Фильтр);	
						
			ТаблицаРезультатов = Новый ТаблицаЗначений;
			ТаблицаРезультатов.Колонки.Добавить("Пользователь", , "Пользователь");
			ТаблицаРезультатов.Колонки.Добавить("КлючОбъекта", , "Ключ объекта");
			ТаблицаРезультатов.Колонки.Добавить("КлючНастроек", , "Ключ настроек");
			ТаблицаРезультатов.Колонки.Добавить("Представление", , "Представление");
			
			Пока Выб.Следующий() Цикл
				НоваяСтрока = ТаблицаРезультатов.Добавить();
				НоваяСтрока.Пользователь = Выб.Пользователь;
				НоваяСтрока.КлючОбъекта = Выб.КлючОбъекта;
				НоваяСтрока.КлючНастроек = Выб.КлючНастроек;
				НоваяСтрока.Представление = Выб.Представление;
			КонецЦикла;
			
			Для Каждого СтрокаОтчетов Из ТаблицаРезультатов Цикл
				ТипОбъектаСтрокаТаблицы   = Фабрика.Тип(URIИмен, "CatalogTabularSectionRow.ВариантыОтчетов.ПользовательскиеНастройкиВариантовОтчетов");
 				ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
				ОбъектОбменаСтрокаТаблицы.КлючНастройки = СтрокаОтчетов.КлючНастроек;
				ОбъектОбменаСтрокаТаблицы.ПредставлениеНастройки = СтрокаОтчетов.Представление;
				ОбъектОбменаСтрокаТаблицы.Результат = ПолучитьРезультатОтчета(Данные.Ссылка, Данные.Настройки.Получить(), ,СтрокаОтчетов.КлючНастроек);
				ОбъектОбмена.ПользовательскиеНастройкиВариантовОтчетов.Добавить(ОбъектОбменаСтрокаТаблицы);
			КонецЦикла;
			
			Для Каждого СтрокаОтчетов Из Данные.Размещение Цикл
				Если Не СтрокаОтчетов.Использование Тогда
					Продолжить;
				КонецЕсли;
				ТипОбъектаСтрокаТаблицы   = Фабрика.Тип(URIИмен, "CatalogTabularSectionRow.ВариантыОтчетов.Размещение");
 				ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
				ОбъектОбменаСтрокаТаблицы.РазделИлиГруппа = СтрокаОтчетов.РазделИлиГруппа.Синоним;
				ОбъектОбменаСтрокаТаблицы.Важный = СтрокаОтчетов.Важный;
				ОбъектОбменаСтрокаТаблицы.БыстрыйДоступ = БыстрыйДоступ(Данные.Ссылка, СтрокаОтчетов.РазделИлиГруппа, Пользователи.ТекущийПользователь());
				ОбъектОбмена.Размещение.Добавить(ОбъектОбменаСтрокаТаблицы);				
			КонецЦикла;
		КонецЕсли;
				
		Если СокрЛП(ОписаниеОбъекта.ИмяОбъекта) = "Партнеры" Тогда
           	ОбъектОбмена.ДополнительнаяИнформация = ПолучитьДосьеПартнера(Данные.Ссылка);			
		КонецЕсли;
		
		Если СокрЛП(ОписаниеОбъекта.ИмяОбъекта) = "ВариантыАнализаЦелевыхПоказателей" Тогда			
			ТекущийПользователь = Пользователи.ТекущийПользователь();
			СтрокаВариантаОтображения = Данные.НастройкиДоступности.Найти(ТекущийПользователь, "Пользователь");
			Если СтрокаВариантаОтображения = Неопределено Тогда
				ВариантОтображения = "Диаграмма";
			Иначе
				ВариантОтображения = СокрЛП(СтрокаВариантаОтображения.ВариантОтображения);
			Конецесли;
			ОбъектОбмена.ВариантОтображения = ВариантОтображения;
			ОбъектОбмена.КатегорияЦели = СокрЛП(Данные.Владелец.КатегорияЦели);
			ОбъектОбмена.Результат = ПолучитьРезультатВарианта(Данные.Ссылка);
			ОбъектОбмена.ДатаОбновления  = ТекущаяДата();
			
			Для Каждого СтрокаОтчетов Из Данные.ОтчетыДляРасшифровки Цикл
				Если Не ВариантОтчетаДоступен(СтрокаОтчетов.ВариантОтчета) Тогда
					Продолжить;
				КонецЕсли;
				ТипОбъектаСтрокаТаблицы   = Фабрика.Тип(URIИмен, "CatalogTabularSectionRow.ВариантыАнализаЦелевыхПоказателей.ОтчетыДляРасшифровки");
 				ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
				ОбъектОбменаСтрокаТаблицы.ВариантОтчетаИД = СтрокаОтчетов.ВариантОтчета.УникальныйИдентификатор();
				//Получаем настройки варианта отчета
				СвойстваВариантаАнализа = ПолучитьСвойстваВариантаАнализа(Данные.Ссылка);
				СвойстваВариантаОтчета  = ПолучитьСвойстваВариантаОтчета(СтрокаОтчетов.ВариантОтчета);	
				НастройкиВариантаОтчета = МониторингЦелевыхПоказателейВызовСервера.СформироватьНастройкиВариантаОтчета(СвойстваВариантаАнализа, СвойстваВариантаОтчета);
				Если НастройкиВариантаОтчета = Неопределено Тогда
					ОбъектОбменаСтрокаТаблицы.РезультатОтчета = ПолучитьРезультатОтчета(СтрокаОтчетов.ВариантОтчета, СтрокаОтчетов.ВариантОтчета.Настройки.Получить(),,,НастройкиВариантаОтчета.ПользовательскиеНастройки);
				Иначе
					ОбъектОбменаСтрокаТаблицы.РезультатОтчета = ПолучитьРезультатОтчета(СтрокаОтчетов.ВариантОтчета, СтрокаОтчетов.ВариантОтчета.Настройки.Получить(), Данные.Ссылка.ПериодАнализа.Получить());
				КонецЕсли;
				//ОбъектОбменаСтрокаТаблицы.РезультатОтчета = ПолучитьРезультатОтчета(СтрокаОтчетов.ВариантОтчета, СтрокаОтчетов.ВариантОтчета.Настройки.Получить(), Данные.Ссылка.ПериодАнализа.Получить());
				ОбъектОбменаСтрокаТаблицы.ДатаОбновления  = ТекущаяДата();
				ОбъектОбмена.ОтчетыДляРасшифровки.Добавить(ОбъектОбменаСтрокаТаблицы);				
			КонецЦикла;
		КонецЕсли;
		
 		Фабрика.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура регистрирует изменения, для всех данных, входящих в состав плана обмена
// Параметры:
//  УзелОбмена - узел плана обмена, для которого регистрируются изменения
Процедура ЗарегистрироватьИзмененияДанных(УзелОбмена) Экспорт

	СоставПланаОбмена = УзелОбмена.Метаданные().Состав;
    Для Каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
        
        ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,ЭлементСоставаПланаОбмена.Метаданные);
        
	КонецЦикла;

КонецПроцедуры

// Процедура регистрирует изменения в узле обмена по переданным параметрам обмена
//
// Параметры:
//  УзелОбмена - узел, для которого необходимо зарегистрировать изменения
//  ПараметрыОбмена - Структура, содержащая параметры обмена
//
Процедура ЗарегистрироватьИзмененияДанныхПоПараметрам(УзелОбмена, ПараметрыОбмена) Экспорт
	
	Если ПараметрыОбмена.ПолныйОбмен Тогда
		ФильтрИзменений = Новый Массив;	
		ЗаполнитьФильтрИзмененийПоПараметрам(ФильтрИзменений, ПараметрыОбмена);
		Для каждого Эл Из ФильтрИзменений Цикл
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена,Эл);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует массив значений по переданным параметрам обмена
//
// Параметры:
//  ФильтрИзменений - массив, который необходимо заполнить
//  ПараметрыОбмена - Структура, содержащая параметры обмена
//
Процедура ЗаполнитьФильтрИзмененийПоПараметрам(ФильтрИзменений, ПараметрыОбмена) Экспорт
	
	СоответствиеОбъектов = ПараметрыОбмена.ОбъектыОбмена;
		
	Для Каждого Эл Из СоответствиеОбъектов Цикл
		Если Эл.Значение Тогда
			ФильтрИзменений.Добавить(Метаданные.Справочники[Эл.Ключ]);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция выполняет проверку того, что данные нужно переностить в данный узел
//
// Параметры:
//  Данные	– Объект, набор записей,... который нужно проверить.
//            То, что переносится везде, не обрабатывается
//  УзелОбмена - узел плана обмена, куда осуществляется перенос
//
// Возвращаемое значение:
//  Перенос - булево, если Истина - необходимо выполнять перенос, 
//			  иначе - перенос выполнять не нужно
//
Функция НуженПереносДанных(Данные) Экспорт
	
	Перенос = Истина;
		
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.ВариантыОтчетов") Тогда
		
		Если Не ВариантОтчетаДоступен(Данные.Ссылка) Тогда
			Перенос = Ложь;
		Иначе
			ОтчетПоСхеме = Метаданные.Отчеты[Данные.Отчет.Имя].Макеты.Найти("ОсновнаяСхемаКомпоновкиДанных");		
			Если ОтчетПоСхеме = Неопределено Тогда
				Перенос = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.ВариантыАнализаЦелевыхПоказателей") Тогда
		Если Не ВариантАнализаДоступен(Данные.Ссылка) Тогда
			Перенос = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("СправочникОбъект.Партнеры") Тогда
		Если Не ПартнерДоступен(Данные.Ссылка) Тогда
			Перенос = Ложь;
		КонецЕсли;
	КонецЕсли;
    	
	Возврат Перенос;
	
КонецФункции

//Функция возвращает сериализованный объект Вариант анализа для web-сервиса MobileReports ПолучитьРезультатВарианта
//
// Параметры:
//  ВариантАнализа - Вариант анализа, сериализованный объект которого требуется получить
//
// Возвращаемое значение:
//  Хранилище Значения, содержащее сериализованный объект Вариант анализа
//
Функция ПолучитьРезультатВариантаАнализа(ВариантАнализа) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;	
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Данные = ВариантАнализа.ПолучитьОбъект();
	
	Если Не НуженПереносДанных(Данные) Тогда
		
		МобильныеОтчетыСервер.УдалениеДанных(Данные);		
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);
		Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));		
		
	КонецЕсли;
	
	URIИмен = "http://v8.1c.ru/8.1/data/enterprise/current-config";
	
	//Фабрика = ФабрикаXDTO;
	МакетПравилОбмена              = ПланыОбмена.МобильноеПриложениеОтчетыРуководителя.ПолучитьМакет("МобильноеПриложение");
	УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xsd";
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	
	Фабрика = СоздатьФабрикуXDTO(ИмяВременногоФайлаПравилОбмена);
    ТипОбъекта   = Фабрика.Тип(URIИмен, "CatalogObject.ВариантыАнализаЦелевыхПоказателей");
 	ОбъектОбмена = Фабрика.Создать(ТипОбъекта);
     
	ОбъектОбмена.Ref = ВариантАнализа.УникальныйИдентификатор();
	ОбъектОбмена.DeletionMark  = ВариантАнализа.ПометкаУдаления;
	ОбъектОбмена.Description = ВариантАнализа.Наименование;	
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	СтрокаВариантаОтображения = ВариантАнализа.НастройкиДоступности.Найти(ТекущийПользователь, "Пользователь");
	Если СтрокаВариантаОтображения = Неопределено Тогда
		ВариантОтображения = "Диаграмма";
	Иначе
		ВариантОтображения = СокрЛП(СтрокаВариантаОтображения.ВариантОтображения);
	Конецесли;
	ОбъектОбмена.ВариантОтображения = ВариантОтображения;
	ОбъектОбмена.КатегорияЦели = СокрЛП(ВариантАнализа.Владелец.КатегорияЦели);
	ОбъектОбмена.Результат = ПолучитьРезультатВарианта(ВариантАнализа);
	ОбъектОбмена.ДатаОбновления  = ТекущаяДата();
	
	Для Каждого СтрокаОтчетов Из ВариантАнализа.ОтчетыДляРасшифровки Цикл
		Если Не ВариантОтчетаДоступен(СтрокаОтчетов.ВариантОтчета) Тогда
			Продолжить;
		КонецЕсли;
		ТипОбъектаСтрокаТаблицы   = Фабрика.Тип(URIИмен, "CatalogTabularSectionRow.ВариантыАнализаЦелевыхПоказателей.ОтчетыДляРасшифровки");
		ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
		ОбъектОбменаСтрокаТаблицы.ВариантОтчетаИД = СтрокаОтчетов.ВариантОтчета.УникальныйИдентификатор();
		//Получаем настройки варианта отчета
		СвойстваВариантаАнализа = ПолучитьСвойстваВариантаАнализа(ВариантАнализа);
	    СвойстваВариантаОтчета  = ПолучитьСвойстваВариантаОтчета(СтрокаОтчетов.ВариантОтчета);	
		НастройкиВариантаОтчета = МониторингЦелевыхПоказателейВызовСервера.СформироватьНастройкиВариантаОтчета(СвойстваВариантаАнализа, СвойстваВариантаОтчета);
	    Если НастройкиВариантаОтчета = Неопределено Тогда
			ОбъектОбменаСтрокаТаблицы.РезультатОтчета = ПолучитьРезультатОтчета(СтрокаОтчетов.ВариантОтчета, СтрокаОтчетов.ВариантОтчета.Настройки.Получить(),,,НастройкиВариантаОтчета.ПользовательскиеНастройки);
		Иначе
			ОбъектОбменаСтрокаТаблицы.РезультатОтчета = ПолучитьРезультатОтчета(СтрокаОтчетов.ВариантОтчета, СтрокаОтчетов.ВариантОтчета.Настройки.Получить(), ВариантАнализа.ПериодАнализа.Получить());
		КонецЕсли;
		ОбъектОбменаСтрокаТаблицы.ДатаОбновления  = ТекущаяДата();
		ОбъектОбмена.ОтчетыДляРасшифровки.Добавить(ОбъектОбменаСтрокаТаблицы);				
	КонецЦикла;	
	
	Фабрика.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	
	Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
	
КонецФункции

//Функция возвращает сериализованный объект Вариант отчета для web-сервиса MobileReports ПолучитьРезультатОтчета
//
// Параметры:
//  ВариантОтчета - Вариант отчета, сериализованный объект которого требуется получить
//  Настройки - Настройки вариант отчета, по которым требуется получить результат
//
// Возвращаемое значение:
//  Хранилище Значения, содержащее сериализованный объект Вариант отчета
//
Функция ПолучитьРезультатВариантаОтчета(ВариантОтчета, Настройки) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;	
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	Данные = ВариантОтчета.ПолучитьОбъект();
	
	Если Не НуженПереносДанных(Данные) Тогда
		
		МобильныеОтчетыСервер.УдалениеДанных(Данные);		
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Данные);
		Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));		
		
	КонецЕсли;
	
	URIИмен = "http://v8.1c.ru/8.1/data/enterprise/current-config";
	
	МакетПравилОбмена              = ПланыОбмена.МобильноеПриложениеОтчетыРуководителя.ПолучитьМакет("МобильноеПриложение");
	УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xsd";
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	
	Фабрика = СоздатьФабрикуXDTO(ИмяВременногоФайлаПравилОбмена);
    ТипОбъекта   = Фабрика.Тип(URIИмен, "CatalogObject.ВариантыОтчетов");
 	ОбъектОбмена = Фабрика.Создать(ТипОбъекта);
     
	ОбъектОбмена.Ref = ВариантОтчета.УникальныйИдентификатор();
	ОбъектОбмена.DeletionMark  = ВариантОтчета.ПометкаУдаления;
	ОбъектОбмена.Description   = ВариантОтчета.Наименование;	
	
	ОбъектОбмена.ДатаОбновления  = ТекущаяДата();
	ОбъектОбмена.КлючВарианта = ВариантОтчета.КлючВарианта;
	ОбъектОбмена.Настройки    = ВариантОтчета.Настройки;
	//Отчет со стандартными настройками варианта
	ОбъектОбмена.Результат 	  = ПолучитьРезультатОтчета(Данные.Ссылка, Данные.Настройки.Получить());
	
	//Отчет с текущими настройками варианта
	НастройкиПользователя = ХранилищеСистемныхНастроек.Загрузить(Данные.Отчет.ПолноеИмя+"/"+Данные.КлючВарианта+"/ТекущиеПользовательскиеНастройки");
	Если Не НастройкиПользователя = Неопределено Тогда
		ТипОбъектаСтрокаТаблицы   = Фабрика.Тип(URIИмен, "CatalogTabularSectionRow.ВариантыОтчетов.ПользовательскиеНастройкиВариантовОтчетов");
		ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
		ОбъектОбменаСтрокаТаблицы.КлючНастройки = "ТекущиеПользовательскиеНастройки";
		ОбъектОбменаСтрокаТаблицы.ПредставлениеНастройки = "Текущие пользовательские настройки";
		ОбъектОбменаСтрокаТаблицы.Результат = ПолучитьРезультатОтчета(Данные.Ссылка, Данные.Настройки.Получить(), , "ТекущиеПользовательскиеНастройки");
		ОбъектОбмена.ПользовательскиеНастройкиВариантовОтчетов.Добавить(ОбъектОбменаСтрокаТаблицы);	
	КонецЕсли;						
	//Отчет с сохраненными настройками варианта
	Фильтр = Новый Структура;	
	Фильтр.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	Фильтр.Вставить("КлючОбъекта", Данные.Отчет.ПолноеИмя+"/"+Данные.КлючВарианта);
	
	Выб = ХранилищеПользовательскихНастроекОтчетов.Выбрать(Фильтр);	
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов.Колонки.Добавить("Пользователь", , "Пользователь");
	ТаблицаРезультатов.Колонки.Добавить("КлючОбъекта", , "Ключ объекта");
	ТаблицаРезультатов.Колонки.Добавить("КлючНастроек", , "Ключ настроек");
	ТаблицаРезультатов.Колонки.Добавить("Представление", , "Представление");
	
	Пока Выб.Следующий() Цикл
		НоваяСтрока = ТаблицаРезультатов.Добавить();
		НоваяСтрока.Пользователь = Выб.Пользователь;
		НоваяСтрока.КлючОбъекта = Выб.КлючОбъекта;
		НоваяСтрока.КлючНастроек = Выб.КлючНастроек;
		НоваяСтрока.Представление = Выб.Представление;
	КонецЦикла;
	
	Для Каждого СтрокаОтчетов Из ТаблицаРезультатов Цикл
		ТипОбъектаСтрокаТаблицы   = Фабрика.Тип(URIИмен, "CatalogTabularSectionRow.ВариантыОтчетов.ПользовательскиеНастройкиВариантовОтчетов");
		ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
		ОбъектОбменаСтрокаТаблицы.КлючНастройки = СтрокаОтчетов.КлючНастроек;
		ОбъектОбменаСтрокаТаблицы.ПредставлениеНастройки = СтрокаОтчетов.Представление;
		ОбъектОбменаСтрокаТаблицы.Результат = ПолучитьРезультатОтчета(Данные.Ссылка, Данные.Настройки.Получить(), ,СтрокаОтчетов.КлючНастроек);
		ОбъектОбмена.ПользовательскиеНастройкиВариантовОтчетов.Добавить(ОбъектОбменаСтрокаТаблицы);
	КонецЦикла;
	Для Каждого СтрокаОтчетов Из ВариантОтчета.Размещение Цикл
		Если Не СтрокаОтчетов.Использование Тогда
			Продолжить;
		КонецЕсли;
		ТипОбъектаСтрокаТаблицы   = Фабрика.Тип(URIИмен, "CatalogTabularSectionRow.ВариантыОтчетов.Размещение");
		ОбъектОбменаСтрокаТаблицы = Фабрика.Создать(ТипОбъектаСтрокаТаблицы);
		ОбъектОбменаСтрокаТаблицы.РазделИлиГруппа = СтрокаОтчетов.РазделИлиГруппа.Синоним;
		ОбъектОбменаСтрокаТаблицы.Важный = СтрокаОтчетов.Важный;
		ОбъектОбменаСтрокаТаблицы.БыстрыйДоступ = БыстрыйДоступ(ВариантОтчета, СтрокаОтчетов.РазделИлиГруппа, Пользователи.ТекущийПользователь());
		ОбъектОбмена.Размещение.Добавить(ОбъектОбменаСтрокаТаблицы);				
	КонецЦикла;
	
	Фабрика.ЗаписатьXML(ЗаписьXML, ОбъектОбмена);
	
	Возврат Новый ХранилищеЗначения(ЗаписьXML.Закрыть(), Новый СжатиеДанных(9));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция выполняет проверку, входит ли Вариант отчета в быстрый доступ пользователя
//
// Параметры:
//  Вариант	– Ссылка, вариант отчета, который нужно проверить
//  РазделИлиГруппа	– Ссылка, раздел или группа варианта отчета
//  Пользователь - Ссылка, пользователь для которого производится проверка
//
// Возвращаемое значение:
//  Булево, если Истина - вариант отчета входит в быстрый доступ, 
//			  иначе - нет
//
Функция БыстрыйДоступ(Вариант, РазделИлиГруппа, Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиВариантовОтчетов.БыстрыйДоступ
	|ИЗ
	|	РегистрСведений.НастройкиВариантовОтчетов КАК НастройкиВариантовОтчетов
	|ГДЕ
	|	НастройкиВариантовОтчетов.Пользователь = &Пользователь
	|	И НастройкиВариантовОтчетов.РазделИлиГруппа = &РазделИлиГруппа
	|	И НастройкиВариантовОтчетов.Вариант = &Вариант";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("РазделИлиГруппа", РазделИлиГруппа);
	Запрос.УстановитьПараметр("Вариант", Вариант);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.БыстрыйДоступ;
		
КонецФункции

// Функция выполняет проверку того, что Вариант Анализа доступен текущему пользователю
//
// Параметры:
//  ВариантАнализа	– Ссылка, вариант анализа, который нужно проверить.
//
// Возвращаемое значение:
//  Булево, если Истина - вариант отчета доступен, 
//			  иначе - вариант отчета не доступен
//
Функция ВариантАнализаДоступен(ВариантАнализа)
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ВариантыАнализаПользовательскиеНастройки = 
	ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиМонитораЦелевыхПоказателей", "ВариантыАнализаПользовательскиеНастройки",,, СокрЛП(ТекущийПользователь));
			
	ЗапросСостава = Новый Запрос;
	ЗапросСостава.УстановитьПараметр("ТекущийПользователь",  ТекущийПользователь);
	ЗапросСостава.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	ЗапросСостава.УстановитьПараметр("ТекущийВариант", ВариантАнализа);
	
	Если Не ВариантыАнализаПользовательскиеНастройки = Неопределено
		И Не ВариантыАнализаПользовательскиеНастройки.Получить() = Неопределено Тогда
		ЗапросСостава.УстановитьПараметр("ВариантыАнализа", ВариантыАнализаПользовательскиеНастройки.Получить());
		ЗапросСостава.Текст = "ВЫБРАТЬ
		|	ПользовательскиеНастройкиВариантовАнализа.ВариантАнализа,
		|	ПользовательскиеНастройкиВариантовАнализа.Доступность
		|ПОМЕСТИТЬ ПользовательскиеНастройкиВариантовАнализа
		|ИЗ
		|	&ВариантыАнализа КАК ПользовательскиеНастройкиВариантовАнализа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВариантыАнализа.ВариантАнализа КАК ВариантАнализа
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка КАК ВариантАнализа,
		|		ВЫБОР
		|			КОГДА ПользовательскиеНастройкиВариантовАнализа.Доступность ЕСТЬ NULL 
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ПользовательскиеНастройкиВариантовАнализа.Доступность
		|		КОНЕЦ КАК Доступность
		|	ИЗ
		|		Справочник.ВариантыАнализаЦелевыхПоказателей.НастройкиДоступности КАК ВариантыАнализаЦелевыхПоказателейНастройкиДоступности
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПользовательскиеНастройкиВариантовАнализа КАК ПользовательскиеНастройкиВариантовАнализа
		|			ПО ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка = ПользовательскиеНастройкиВариантовАнализа.ВариантАнализа
		|	ГДЕ
		|		ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Пользователь = &ТекущийПользователь
		|		И НЕ ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.ПометкаУдаления) КАК ВариантыАнализа
		|ГДЕ
		|	ВариантыАнализа.ВариантАнализа = &ТекущийВариант
		|	И ВариантыАнализа.Доступность";
	Иначе
		ЗапросСостава.Текст = "ВЫБРАТЬ
		|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка КАК ВариантАнализа
		|ИЗ
		|	Справочник.ВариантыАнализаЦелевыхПоказателей.НастройкиДоступности КАК ВариантыАнализаЦелевыхПоказателейНастройкиДоступности
		|ГДЕ
		|	ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка = &ТекущийВариант
		|	И ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Пользователь = &ТекущийПользователь
		|	И НЕ ВариантыАнализаЦелевыхПоказателейНастройкиДоступности.Ссылка.ПометкаУдаления";
	КонецЕсли;
	
	Результат = ЗапросСостава.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Функция выполняет проверку того, что Вариант Отчета доступен текущему пользователю
//
// Параметры:
//  ВариантОтчета	– Ссылка, вариант отчета, который нужно проверить.
//
// Возвращаемое значение:
//  Булево, если Истина - вариант отчета доступен, 
//			  иначе - вариант отчета не доступен
//
Функция ВариантОтчетаДоступен(ВариантОтчета)	
		
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиРаздела.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов.Размещение КАК НастройкиРаздела
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетов КАК НастройкиПользователя
	|		ПО (НастройкиПользователя.Пользователь = &ТекущийПользователь)
	|			И НастройкиРаздела.Ссылка = НастройкиПользователя.Вариант
	|			И НастройкиРаздела.РазделИлиГруппа = НастройкиПользователя.РазделИлиГруппа
	|ГДЕ
	|	НастройкиРаздела.Ссылка = &ТекущийВариант
	|	И НастройкиРаздела.РазделИлиГруппа В(&ДоступныеПодсистемы)
	|	И НастройкиРаздела.Ссылка.ТипОтчета = ЗНАЧЕНИЕ(Перечисление.ТипыОтчетов.Внутренний)
	|	И НастройкиРаздела.Использование
	|	И НастройкиРаздела.Ссылка.Отчет В(&ОтчетыПользователя)
	|	И НЕ НастройкиРаздела.Ссылка.ПометкаУдаления
	|	И НЕ НастройкиРаздела.Ссылка.Отчет ЕСТЬ NULL 
	|	И ЕСТЬNULL(НастройкиПользователя.Видимость, НастройкиРаздела.Ссылка.ВидимостьПоУмолчанию
	|				ИЛИ ВЫБОР
	|					КОГДА НастройкиРаздела.Ссылка.Автор = &ТекущийПользователь
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ) = ИСТИНА";
	
	Запрос = Новый Запрос;
	
	ДеревоЗначений = ВариантыОтчетовПовтИсп.ПодсистемыТекущегоПользователя();
	ПодсистемыПользователя = Новый Массив;
	
	Если ДеревоЗначений.Строки.Количество()>0 Тогда		
		ДополнитьМассивЗначениямиСтрокДерева(ПодсистемыПользователя, ДеревоЗначений.Строки, "Ссылка");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДоступныеПодсистемы", ПодсистемыПользователя);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ОтчетыПользователя",  ВариантыОтчетов.ОтчетыТекущегоПользователя());
	Запрос.УстановитьПараметр("ТекущийВариант", 	 ВариантОтчета);
	Запрос.Текст = ТекстЗапроса; 
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Процедура записывает в переданный массив все значения колонки ИмяКолонки из всех строк дерева
//
// Параметры:
//  ПодсистемыДерева	- Переданный Массив для Заполнения
//  Строки 		- строки дерева
//  ИмяКолонки  - Имя колонки для выгрузки значенй
//
Процедура ДополнитьМассивЗначениямиСтрокДерева(ПодсистемыПользователя, Строки, ИмяКолонки)
	
	ПодсистемыДерева = Строки.ВыгрузитьКолонку(ИмяКолонки);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПодсистемыПользователя, ПодсистемыДерева, Истина);
	Для Каждого Стр Из Строки Цикл
		Если Стр.Строки.Количество()>0 Тогда
			ДополнитьМассивЗначениямиСтрокДерева(ПодсистемыПользователя, Стр.Строки, ИмяКолонки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция выполняет проверку того, что Партнер доступен текущему пользователю
//
// Параметры:
//  Партнер	– Ссылка, партнер, которого нужно проверить.
//
// Возвращаемое значение:
//  Булево, если Истина - партнер доступен, 
//			  иначе - партнер не доступен
//
Функция ПартнерДоступен(Партнер)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	Партнеры.Ссылка
	                |ИЗ
	                |	Справочник.Партнеры КАК Партнеры
	                |ГДЕ
	                |	Партнеры.Ссылка = &Партнер";
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();	
	
КонецФункции

//Функция возвращает Структуру, включающую табличный документ результата формирования отчета "Досье Партнера"
// и Контактную Информацию по партнеру (только телефоны)
//
// Параметры:
//  Партнер - Партнер, Досье которого требуется сформировать
//
// Возвращаемое значение:
//  Хранилище Значения, содержащее структуру
//
Функция ПолучитьДосьеПартнера(Партнер)
	
	ИнформацияОПартнере = Новый Структура("Досье, КонтактныеТелефоны");
	Отчет = Отчеты.ДосьеПартнера.Создать();
	Отчет.Контакты = Истина;
	Отчет.ДанныеКлиента = Партнер.Клиент;
	Отчет.ДанныеПоставщика = Партнер.Поставщик;
	ТабличныйДокумент = Новый ТабличныйДокумент;
    Отчет.СформироватьОтчет(ТабличныйДокумент, Партнер);
		
	ИнформацияОПартнере.Досье = ТабличныйДокумент;
	
	СписокКонтактов = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Ссылка.Наименование КАК Наименование,
	|	"""" КАК ДолжностьПоВизитке,
	|	ПартнерыКонтактнаяИнформация.Вид,
	|	ПартнерыКонтактнаяИнформация.Представление,
	|	ПартнерыКонтактнаяИнформация.НомерТелефона
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка = &Партнер
	|	И ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.ДолжностьПоВизитке,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефона
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец = &Партнер
	|	И КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Партнер.ОсновнойМенеджер.ФизическоеЛицо,
	|	""Ответственный менеджер"",
	|	ФизическиеЛицаКонтактнаяИнформация.Вид,
	|	ФизическиеЛицаКонтактнаяИнформация.Представление,
	|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефона
	|ИЗ
	|	Справочник.Партнеры КАК Партнер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователь
	|		ПО (Партнер.ОсновнойМенеджер В (Пользователь.Ссылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО (Пользователь.ФизическоеЛицо = ФизическиеЛицаКонтактнаяИнформация.Ссылка)
	|ГДЕ
	|	Партнер.Ссылка = &Партнер
	|	И ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПредставлениеКонтакта = СокрЛП(Выборка.Наименование)+" "+СокрЛП(Выборка.ДолжностьПоВизитке)+" "+СокрЛП(Выборка.Вид)+" "+СокрЛП(Выборка.Представление);
		ПредставлениеКонтакта = СтрЗаменить(ПредставлениеКонтакта, "Телефон", "тел.: ");
		ПредставлениеКонтакта = СтрЗаменить(ПредставлениеКонтакта, "телефон", "тел.: ");
		НомерТелефона = ?(Лев(Выборка.Представление,1)="+","+"+Выборка.НомерТелефона, Выборка.НомерТелефона);		
		СписокКонтактов.Добавить(НомерТелефона, ПредставлениеКонтакта);		
	КонецЦикла;
	
	ИнформацияОПартнере.КонтактныеТелефоны = СписокКонтактов;
	
	Возврат Новый ХранилищеЗначения(ИнформацияОПартнере, Новый СжатиеДанных(9));
	
КонецФункции

//Функция возвращает источник данных варианта анализа
//
// Параметры:
//  ВариантАнализа - Вариант анализа, источник данных которого требуется получить
//
// Возвращаемое значение:
//  Структура источника данных варианта анализа
//
Функция ПолучитьИсточникДанных(ВариантАнализа)
	
	ИсточникДанных = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа,
	               |	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантОтображения,
	               |	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ДатаРасчета,
	               |	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ИсточникДанных
	               |ИЗ
	               |	РегистрСведений.ИсточникиДанныхВариантовАнализаЦелевыхПоказателей КАК ИсточникиДанныхВариантовАнализаЦелевыхПоказателей
	               |ГДЕ
	               |	ИсточникиДанныхВариантовАнализаЦелевыхПоказателей.ВариантАнализа = &ВариантАнализа";
	Запрос.УстановитьПараметр("ВариантАнализа",ВариантАнализа);
	
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	
	Если ТабРезультат.Количество()>0 Тогда
		ИсточникДанных = ТабРезультат[0].ИсточникДанных.Получить(); 
	КонецЕсли;
	
	Возврат ИсточникДанных;	
	
КонецФункции

//Функция возвращает структуру результат формирования варианта анализа
//
// Параметры:
//  ВариантАнализа - Вариант анализа, результат которого требуется сформировать
//
// Возвращаемое значение:
//  Хранилище Значения, содержащее структуру результата формирования варианта анализа
//
Функция ПолучитьРезультатВарианта(ВариантАнализа) 
	
	ИсточникДанных = Неопределено;
		
	ВариантыАнализаОтчета = Новый ТаблицаЗначений;
	ВариантыАнализаОтчета.Колонки.Добавить("Значение");
	ВариантыАнализаОтчета.Колонки.Добавить("АдресДинамическихПараметров");
	
	Стр = ВариантыАнализаОтчета.Добавить();
	Стр.Значение = ВариантАнализа;
	ПринудительноОбновитьДанные = Истина;
		
	ТабличныйДокумент = Новый ТабличныйДокумент;	
 	ТабличныйДокумент = МониторингЦелевыхПоказателей.ЗаполнитьСводныйОтчетДаннымиПоказателя(ТабличныйДокумент, ВариантыАнализаОтчета,, ПринудительноОбновитьДанные);
		
	ИсточникДанных = ПолучитьИсточникДанных(ВариантАнализа);	
		
	ОтображаемоеЗначение    = 0;
	ИндексКартинкиСостояния = 1;	
	ИндексКартинкиТренда    = 7;
	Размерность				="";
	КраткоеНаименованиеЦелевогоПоказателя     = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя;
	
	Если Не ИсточникДанных = Неопределено Тогда
		ТипыАнализа = Перечисления.ТипыАнализаПоказателей;
		ТипАнализа  = ВариантАнализа.ТипАнализа;		
		ЕстьСравнение = (ТипАнализа = ТипыАнализа.СравнениеСПрошлымПериодом);		
		Если ЕстьСравнение Тогда
			ОтображаемоеЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ОбщийИтог;
		Иначе 
			ОтображаемоеЗначение = ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение;
		КонецЕсли;		
		ИндексКартинкиСостояния = МониторингЦелевыхПоказателей.ПолучитьИндексКартинкиСостоянияДляПоказателя(ВариантАнализа, ИсточникДанных);	
		ИндексКартинкиТренда    = МониторингЦелевыхПоказателей.ПолучитьИндексКартинкиТрендаДляПоказателя(ВариантАнализа, ИсточникДанных);
		Размерность = СокрЛП(ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.Размерность);
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура("ТабличныйДокумент, ИндексКартинкиСостояния, ИндексКартинкиТренда, 
								|ОтображаемоеЗначение, Размерность, КраткоеНаименованиеЦелевогоПоказателя",
								ТабличныйДокумент, ИндексКартинкиСостояния, ИндексКартинкиТренда, ОтображаемоеЗначение, Размерность, КраткоеНаименованиеЦелевогоПоказателя);
								
	Результат = Новый ХранилищеЗначения(СтруктураРезультата, Новый СжатиеДанных(9));
	
	Возврат Результат;
	
КонецФункции

//Функция возвращает табличный документ результата формирования варианта отчета
//
// Параметры:
//  ВариантОтчета - Вариант отчета, результат которого требуется сформировать
//  Настройки - Настройки вариант отчета, по которым требуется получить результат
//  ПериодОтчета - необязательный - Параметр Настроек Компоновки данных "Период" вариант отчета, по которым требуется получить результат
//  ПользовательскиеНастройкиИД - идентификатор пользовательских настроек
//  НастройкиПользователя - Пользовательские настройки варианта отчета
//
// Возвращаемое значение:
//  Хранилище Значения, содержащее табличный документ результата формирования варианта отчета
//
Функция ПолучитьРезультатОтчета(ВариантОтчета, НастройкиОтчета, ПериодОтчета = Неопределено, ПользовательскиеНастройкиИД = Неопределено, НастройкиПользователя = Неопределено)	
	
	Отчет = Отчеты[ВариантОтчета.Отчет.Имя].Создать();
	
	//Настройки компоновки варианта отчета
	Если НастройкиОтчета = Неопределено Тогда		
		Вариант = Отчет.СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ВариантОтчета.КлючВарианта);
		Если Не Вариант = Неопределено Тогда
			НастройкиОтчета = Вариант.Настройки;
        КонецЕсли;
	КонецЕсли;
	
	Если Не ПериодОтчета = Неопределено Тогда
		ПараметрПериод = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("Период");
		Если Не ПараметрПериод = Неопределено И 
			Не ПараметрПериод = ПериодОтчета Тогда
			НастройкиОтчета.ПараметрыДанных.УстановитьЗначениеПараметра("Период", ПериодОтчета);
	 	КонецЕсли;
	КонецЕсли;
	
	Если Не НастройкиОтчета = Неопределено Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
	КонецЕсли;
	
	//Пользовательские настройки компоновки варианта отчета
	Если НастройкиПользователя = Неопределено Тогда
		Если Не ПользовательскиеНастройкиИД = Неопределено Тогда
			Если ПользовательскиеНастройкиИД = "ТекущиеПользовательскиеНастройки" Тогда
				НастройкиПользователя = ХранилищеСистемныхНастроек.Загрузить(ВариантОтчета.Отчет.ПолноеИмя+"/"+ВариантОтчета.КлючВарианта+"/"+ПользовательскиеНастройкиИД);	
			Иначе
				НастройкиПользователя = ХранилищеПользовательскихНастроекОтчетов.Загрузить(ВариантОтчета.Отчет.ПолноеИмя+"/"+ВариантОтчета.КлючВарианта, ПользовательскиеНастройкиИД);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не НастройкиПользователя = Неопределено Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(НастройкиПользователя);
	КонецЕсли;	
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Попытка
		Отчет.СкомпоноватьРезультат(ТабличныйДокумент);	
	Исключение
		
	КонецПопытки;
	
	Возврат Новый ХранилищеЗначения(ТабличныйДокумент, Новый СжатиеДанных(9));
	
КонецФункции

// Функция возвращает структуру, содержащую имя таблицы для выборки и массив полей, которые нужно выбрать
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, структуру описания которого требуется получить
//  Изменения - признак того, что в качестве таблицы для выборки выступает таблица изменений
//
// Возвращаемое значение:
//  Структура, содержащая описание объекта метаданных
//
Функция ПолучитьСтруктуруОписанияОбъекта(ОбъектМетаданных, Изменения = Ложь) 

	Если Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		ИмяКласса = "Константы";
		ИмяТаблицы = "Константы";
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		ИмяКласса = "Справочники";
		ИмяТаблицы = "Справочник." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		ИмяКласса = "Документы";
		ИмяТаблицы = "Документ." + ОбъектМетаданных.Имя;
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		ИмяКласса = "РегистрыСведений";
		ИмяТаблицы = "РегистрСведений." + ОбъектМетаданных.Имя;
	КонецЕсли;	
	
	// Если требуется только выборка изменений, то выбирать необходимо по таблицам изменений
	Если Изменения Тогда
		ИмяТаблицы = ИмяТаблицы + ".Изменения";
	КонецЕсли;
	
	СтруктураОписания = Новый Структура();
	СтруктураОписания.Вставить("ИмяКласса", ИмяКласса);
	СтруктураОписания.Вставить("ИмяОбъекта", ОбъектМетаданных.Имя);
	СтруктураОписания.Вставить("ИмяТаблицы", ИмяТаблицы);
	
	Возврат СтруктураОписания;

КонецФункции

//Функция возвращает необходимые свойства варианта анализа
//
// Параметры:
//  ВариантАнализа - Вариант анализа, свойства которого требуется получить
//
// Возвращаемое значение:
//  Свойства Варианта анализа - структура, содержащая свойства Вариант анализа
//
Функция ПолучитьСвойстваВариантаАнализа(ВариантАнализа)
	
	Перем СтруктураПоказателя;
		
	СтруктураПоказателя = Новый Структура("Ссылка, ПериодАнализа", ВариантАнализа, ВариантАнализа.ПериодАнализа.Получить());
	
	Возврат СтруктураПоказателя;
	
КонецФункции

//Функция возвращает необходимые свойства варианта отчета
//
// Параметры:
//  ВариантОтчета - Вариант отчета, свойства которого требуется получить
//
// Возвращаемое значение:
//  Свойства Варианта Отчета - структура, содержащая свойства Вариант отчета
//
Функция ПолучитьСвойстваВариантаОтчета(ВариантОтчета)
	
	СвойстваВариантаОтчета = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваВариантаОтчета = Новый Структура("КлючВарианта, КлючОбъекта", ВариантОтчета.КлючВарианта, ВариантОтчета.Отчет.ПолноеИмя);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СвойстваВариантаОтчета;
	
КонецФункции
