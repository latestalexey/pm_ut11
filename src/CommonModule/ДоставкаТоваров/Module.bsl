////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Устанавливает свойства форм документов, в которых имеются реквизиты доставки при чтении, создании
// Параметры
//		ЭлементыФормы - все элементы формы для управления свойствами и переключения закладок
//		ДокОбъект - объект, реквизиты которого используются при заполнении свойств
//
Процедура ПриЧтенииСозданииРаспоряженийНаСервере(ЭлементыФормы, ДокОбъект) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("РедактироватьАдресаДоставкиТолькоВДиалоге") Тогда
		Для Каждого ЭлементФормы Из ЭлементыФормы Цикл
			Если Найти(ЭлементФормы.Имя,"АдресДоставки") <> 0 И ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода Тогда
				ЭлементФормы.РедактированиеТекста = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента Тогда
		ЗаполнитьСписокВыбораАдресаИзЗаданий(ЭлементыФормы.АдресДоставкиПолучателя, ДокОбъект);
	ИначеЕсли ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда
		ЗаполнитьСписокВыбораАдресаИзРаспоряжений(ЭлементыФормы.АдресДоставкиПолучателя1,ДокОбъект);
		ЗаполнитьСписокВыбораПеревозчиков(ЭлементыФормы,ДокОбъект);
	ИначеЕсли ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу Тогда
		ЗаполнитьСписокВыбораАдресаИзЗаданий(ЭлементыФормы.АдресДоставкиПеревозчика, ДокОбъект);
		ЗаполнитьСписокВыбораАдресаИзРаспоряжений(ЭлементыФормы.АдресДоставкиПолучателя2, ДокОбъект);
		ЗаполнитьСписокВыбораПеревозчиков(ЭлементыФормы,ДокОбъект);
	ИначеЕсли ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз Тогда
		ЗаполнитьСписокВыбораАдресаИзРаспоряжений(ЭлементыФормы.АдресДоставкиСамовывоз, ДокОбъект);
	КонецЕсли;
	ДоставкаТоваровКлиентСервер.УстановитьСтраницуДоставки(ЭлементыФормы, ДокОбъект.СпособДоставки);
	
КонецПроцедуры

// Заполняет реквизиты доставки в зависимости от элемента формы, в котором производятся изменения
// Параметры:
//		ЭлементыФормы - все элементы формы, в которой производятся изменения
//		ДокОбъект - объект, реквизиты которого используются при заполнении
//		ИмяЭлементаФормы - имя элемента формы, в котором произошли изменения
//
Процедура ЗаполнитьРеквизитыДоставки(ЭлементыФормы, ИмяЭлементаФормы, ДокОбъект) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Получатель(ДокОбъект).Значение) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(ЭлементыФормы, ДокОбъект, Истина);
	ИначеЕсли ИмяЭлементаФормы = "Партнер" ИЛИ ИмяЭлементаФормы = "СкладПолучатель" Тогда
		ПриИзмененииПолучателя(ЭлементыФормы, ДокОбъект);
	ИначеЕсли Найти(ИмяЭлементаФормы,"СпособДоставки") > 0
				ИЛИ Найти(ИмяЭлементаФормы,"МестоПередачиПеревозчику") > 0 Тогда
		ПриИзмененииСпособаДоставки(ЭлементыФормы, ДокОбъект);
	ИначеЕсли Найти(ИмяЭлементаФормы,"ПеревозчикПартнер") > 0 Тогда
		ПриИзмененииПеревозчика(ЭлементыФормы, ДокОбъект);
	КонецЕсли;
	
	ДоставкаТоваровКлиентСервер.УстановитьСтраницуДоставки(ЭлементыФормы, ДокОбъект.СпособДоставки);
	
КонецПроцедуры

// Заполняет реквизиты доставки обработки "Помощник продаж" в зависимости от элемента формы, в котором производятся изменения
// Параметры:
//		ЭлементыФормы - все элементы формы Помощника продаж
//		ОбъектОбработка - объект-обработка, реквизиты которого используются при заполнении
//		ИмяЭлементаФормы - имя элемента формы, в котором произошли изменения
//
Процедура ЗаполнитьРеквизитыДоставкиПомощникаПродаж(ЭлементыФормы, ИмяЭлементаФормы, ОбъектОбработка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектОбработка.Партнер) Тогда
		ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(ЭлементыФормы, ОбъектОбработка, Истина);
	Иначе
		РеквизитыДоставки = ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки();
		РеквизитыДоставки.Вставить("Партнер");
		ЗаполнитьЗначенияСвойств(РеквизитыДоставки, ОбъектОбработка);
		Если ОбъектОбработка.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг Тогда
			РеквизитыДоставки.Вставить("Ссылка",Документы.РеализацияТоваровУслуг.ПустаяСсылка());
		Иначе
			РеквизитыДоставки.Вставить("Ссылка",Документы.ЗаказКлиента.ПустаяСсылка());
		КонецЕсли;
		Если ИмяЭлементаФормы = "Партнер" Тогда
			ПриИзмененииПолучателя(ЭлементыФормы, РеквизитыДоставки);
		ИначеЕсли Найти(ИмяЭлементаФормы,"СпособДоставки") > 0
					ИЛИ Найти(ИмяЭлементаФормы,"МестоПередачиПеревозчику") > 0 Тогда
			ПриИзмененииСпособаДоставки(ЭлементыФормы, РеквизитыДоставки);
		ИначеЕсли Найти(ИмяЭлементаФормы,"ПеревозчикПартнер") > 0 Тогда
			ПриИзмененииПеревозчика(ЭлементыФормы, РеквизитыДоставки);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ОбъектОбработка, РеквизитыДоставки);
	КонецЕсли;
	
	ДоставкаТоваровКлиентСервер.УстановитьСтраницуДоставки(ЭлементыФормы, ОбъектОбработка.СпособДоставки);
	
КонецПроцедуры

// Заполняет способ доставки в Коммерческом предложении в зависимости от партнера,
//		устанавливает нужную страницу доставки
// Параметры:
//		ЭлементыФормы - ВсеЭлементыФормы для управления видимостью.
//		ДокОбъект - документ-объект Коммерческое предложение, в котором заполняется способ доставки
//
Процедура КоммерческоеПредложениеПриИзмененииПартнера(ЭлементыФормы, ДокОбъект) Экспорт;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Возврат
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДокОбъект.Партнер) Тогда
		ДокОбъект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз");
	Иначе
		СвойстваАвтозаполнения = Новый Структура("Партнер, СпособДоставки",ДокОбъект.Партнер);
		ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(Документы.КоммерческоеПредложениеКлиенту.ПустаяСсылка()
																	, СвойстваАвтозаполнения);
		Если НЕ ЗначениеЗаполнено(СвойстваАвтозаполнения.СпособДоставки) Тогда
			ДокОбъект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз");
		Иначе
			ДокОбъект.СпособДоставки = СвойстваАвтозаполнения.СпособДоставки;
		КонецЕсли;
	КонецЕсли;
	ДоставкаТоваровКлиентСервер.УстановитьСтраницуДоставки(ЭлементыФормы, ДокОбъект.СпособДоставки);
КонецПроцедуры

// Добавляет в структуру РеквизитыШапки реквизиты доставки в зависимости от способа доставки,
//		используется при вводе Реализации товаров и услуг на основании Заказов клиента
// Параметры:
//		РеквизитыШапки - структура, в которую добавляются реквизиты, связанные с доставкой
//		ВыборкаРеквизитыШапки - выборка из результатов запроса, в которой содержатся данные по доставке
//
Процедура ДополнитьРеквизитамиДоставкиДанныеЗаполнения(РеквизитыШапки,ВыборкаРеквизитыШапки) Экспорт
	
	РеквизитыШапки.Вставить("СпособДоставки",                        ВыборкаРеквизитыШапки.СпособДоставки);
	Если ВыборкаРеквизитыШапки.СпособДоставки <> Перечисления.СпособыДоставки.Самовывоз Тогда
		РеквизитыШапки.Вставить("АдресДоставки",                         ВыборкаРеквизитыШапки.АдресДоставки);
		РеквизитыШапки.Вставить("АдресДоставкиЗначенияПолей",            ВыборкаРеквизитыШапки.АдресДоставкиЗначенияПолей);
		Если ВыборкаРеквизитыШапки.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента
			ИЛИ ВыборкаРеквизитыШапки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу Тогда
			РеквизитыШапки.Вставить("ЗонаДоставки",                          ВыборкаРеквизитыШапки.ЗонаДоставки);
			РеквизитыШапки.Вставить("ВремяДоставкиС",                        ВыборкаРеквизитыШапки.ВремяДоставкиС);
			РеквизитыШапки.Вставить("ВремяДоставкиПо",                       ВыборкаРеквизитыШапки.ВремяДоставкиПо);
			РеквизитыШапки.Вставить("ДополнительнаяИнформацияПоДоставке",    ВыборкаРеквизитыШапки.ДополнительнаяИнформацияПоДоставке);
		КонецЕсли;
		Если ВыборкаРеквизитыШапки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика
			ИЛИ ВыборкаРеквизитыШапки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу Тогда
			РеквизитыШапки.Вставить("ПеревозчикПартнер",                     ВыборкаРеквизитыШапки.ПеревозчикПартнер);
			Если ВыборкаРеквизитыШапки.ПеревозчикПартнер <> Справочники.Партнеры.ПустаяСсылка()
					И ВыборкаРеквизитыШапки.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу Тогда
				РеквизитыШапки.Вставить("АдресДоставкиПеревозчика",              ВыборкаРеквизитыШапки.АдресДоставкиПеревозчика);
				РеквизитыШапки.Вставить("АдресДоставкиПеревозчикаЗначенияПолей", ВыборкаРеквизитыШапки.АдресДоставкиПеревозчикаЗначенияПолей);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПриИзмененииПолучателя(ЭлементыФормы, ДокОбъект)
	
	ДоставкаТоваровКлиентСервер.ОчиститьРеквизитыДоставки(ЭлементыФормы, ДокОбъект);
	СвойстваАвтозаполнения = Новый Структура("СпособДоставки");
	Если ДокОбъект.Ссылка.Метаданные().Реквизиты.Найти("СкладПолучатель") <> Неопределено Тогда
		СвойстваАвтозаполнения.Вставить("СкладПолучатель", ДокОбъект.СкладПолучатель);
	Иначе
		СвойстваАвтозаполнения.Вставить("Партнер", ДокОбъект.Партнер);
	КонецЕсли;
	ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(ДокОбъект.Ссылка, СвойстваАвтозаполнения);
	Если ЗначениеЗаполнено(СвойстваАвтозаполнения.СпособДоставки) Тогда
		ДокОбъект.СпособДоставки = СвойстваАвтозаполнения.СпособДоставки;
		ПриИзмененииСпособаДоставки(ЭлементыФормы, ДокОбъект);
	КонецЕсли;
	
КонецПроцедуры

Функция Получатель(ДокОбъект)
	Если ДокОбъект.Ссылка.Метаданные().Реквизиты.Найти("СкладПолучатель") <> Неопределено Тогда
		Возврат Новый Структура("ИмяПоля,Значение","СкладПолучатель",ДокОбъект.СкладПолучатель)
	Иначе
		Возврат Новый Структура("ИмяПоля,Значение","Партнер",ДокОбъект.Партнер)
	КонецЕсли;
КонецФункции

// Заполняет реквизиты доставки по известным получателю и способу доставки
//
// Параметры:
//		ЭлементыФормы - все элементы формы для получения/заполнения списков выбора, управления закладками доставки.
//		ДокОбъект - документ-объект, реквизиты которого изменяются
//
Процедура ПриИзмененииСпособаДоставки(ЭлементыФормы, ДокОбъект)
	
	АдресИзмененПользователем = Ложь;
	Если ЗначениеЗаполнено(ДокОбъект.АдресДоставки) Тогда
		Если ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(ЭлементыФормы.АдресДоставкиПолучателя.СписокВыбора,
									"АдресДоставки",ДокОбъект.АдресДоставки) = Неопределено Тогда
			Если ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(ЭлементыФормы.АдресДоставкиПолучателя1.СписокВыбора,
										"АдресДоставки",ДокОбъект.АдресДоставки) = Неопределено Тогда
				Если ЭлементыФормы.Найти("АдресДоставкиПолучателя2") = Неопределено
						ИЛИ ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(ЭлементыФормы.АдресДоставкиПолучателя2.СписокВыбора,
											"АдресДоставки",ДокОбъект.АдресДоставки) = Неопределено Тогда
					АдресИзмененПользователем = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НЕ АдресИзмененПользователем Тогда
		ДокОбъект.АдресДоставки = "";
		ДокОбъект.АдресДоставкиЗначенияПолей = "";
	КонецЕсли;
	ДопИнфоИзмененоПользователем = Ложь;
	Если ЗначениеЗаполнено(ДокОбъект.ДополнительнаяИнформацияПоДоставке) Тогда
		Если ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(ЭлементыФормы.АдресДоставкиПолучателя.СписокВыбора,
									"ДополнительнаяИнформацияПоДоставке",ДокОбъект.ДополнительнаяИнформацияПоДоставке) = Неопределено Тогда
			Если ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(ЭлементыФормы.АдресДоставкиПолучателя1.СписокВыбора,
										"ДополнительнаяИнформацияПоДоставке",ДокОбъект.ДополнительнаяИнформацияПоДоставке) = Неопределено Тогда
				Если ЭлементыФормы.Найти("АдресДоставкиПолучателя2") = Неопределено
						ИЛИ ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(ЭлементыФормы.АдресДоставкиПолучателя2.СписокВыбора,
											"ДополнительнаяИнформацияПоДоставке",ДокОбъект.ДополнительнаяИнформацияПоДоставке) = Неопределено Тогда
					ДопИнфоИзмененоПользователем = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ДопИнфоИзмененоПользователем Тогда
		ДокОбъект.ДополнительнаяИнформацияПоДоставке = "";
	КонецЕсли;
	Получатель = Получатель(ДокОбъект);
	Если ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика
			ИЛИ ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу Тогда
		ЗаполнитьСписокВыбораПеревозчиков(ЭлементыФормы,ДокОбъект);
		Если НЕ ЗначениеЗаполнено(ДокОбъект.АдресДоставки) ИЛИ НЕ АдресИзмененПользователем Тогда
			// заполним перевозчика и адрес доставки клиента по статистике использования
			СвойстваАвтозаполнения = Новый Структура(Получатель.ИмяПоля+",СпособДоставки,ПеревозчикПартнер,АдресДоставки",Получатель.Значение,ДокОбъект.СпособДоставки);
			ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(ДокОбъект.Ссылка, СвойстваАвтозаполнения);
			Если ЗначениеЗаполнено(СвойстваАвтозаполнения.АдресДоставки) Тогда
				ДокОбъект.АдресДоставки = СвойстваАвтозаполнения.АдресДоставки;
				// найдем соответствующие адресу последние значения полей и доп.инфо
				Запрос = Новый Запрос(
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					|	МАКСИМУМ(Док.Ссылка) КАК Ссылка
					|ПОМЕСТИТЬ ВТ_Ссылка
					|ИЗ
					|	Документ."+ДокОбъект.Ссылка.Метаданные().Имя+" КАК Док
					|ГДЕ
					|	Док.Проведен
					|	И Док.АдресДоставки = &АдресДоставки
					|СГРУППИРОВАТЬ ПО
					|	Док.Дата
					|УПОРЯДОЧИТЬ ПО
					|	Док.Дата УБЫВ
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	Док.АдресДоставкиЗначенияПолей,
					|	Док.ДополнительнаяИнформацияПоДоставке
					|ИЗ
					|	ВТ_Ссылка КАК ВТ_Ссылка
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ."+ДокОбъект.Ссылка.Метаданные().Имя+" КАК Док
					|		ПО ВТ_Ссылка.Ссылка = Док.Ссылка");
				
				Запрос.УстановитьПараметр("АдресДоставки",ДокОбъект.АдресДоставки);
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					ДокОбъект.АдресДоставкиЗначенияПолей = Выборка.АдресДоставкиЗначенияПолей;
					Если НЕ ДопИнфоИзмененоПользователем И ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда
						ДокОбъект.ДополнительнаяИнформацияПоДоставке = Выборка.ДополнительнаяИнформацияПоДоставке;
					КонецЕсли;
				Иначе
					// если не нашли в документах, ищем в контактной информации
					СтрокаТаблицыКонтактнойИнформации = ПолучитьАдресаПолучателяИзКонтактнойИнформации(Получатель).Найти(ДокОбъект.АдресДоставки,"Значение");
					Если СтрокаТаблицыКонтактнойИнформации <> Неопределено Тогда
						ДокОбъект.АдресДоставкиЗначенияПолей = СтрокаТаблицыКонтактнойИнформации.ЗначенияПолей;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ДокОбъект.АдресДоставки = "";
				ДокОбъект.АдресДоставкиЗначенияПолей = "";
			КонецЕсли;
		Иначе
			// если адрес доставки клиента не пустой и измененный, не трогаем его
			// заполним только перевозчика по статистике использования
			СвойстваАвтозаполнения = Новый Структура(Получатель.ИмяПоля+",СпособДоставки,ПеревозчикПартнер",
																Получатель.Значение,ДокОбъект.СпособДоставки);
			ОбщегоНазначенияУТ.ЗаполнитьЗначенияСвойствАвтозаполнения(ДокОбъект.Ссылка, СвойстваАвтозаполнения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СвойстваАвтозаполнения.ПеревозчикПартнер) Тогда
			Если ЭлементыФормы.Найти("АдресДоставкиПеревозчика") <> Неопределено Тогда
				ЭлементыФормы.АдресДоставкиПеревозчика.СписокВыбора.Очистить();
			КонецЕсли;
			Если ДопИнфоИзмененоПользователем Тогда
				ЗаполнитьЗначенияСвойств(ДокОбъект,ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки(),
					"АдресДоставкиПеревозчика, АдресДоставкиПеревозчикаЗначенияПолей, ЗонаДоставки")
			Иначе
				ЗаполнитьЗначенияСвойств(ДокОбъект,ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки(),
					"АдресДоставкиПеревозчика, АдресДоставкиПеревозчикаЗначенияПолей, ЗонаДоставки, ДополнительнаяИнформацияПоДоставке")
			КонецЕсли;
		КонецЕсли;
		ПриИзмененииПеревозчика(ЭлементыФормы, ДокОбъект);
		Если ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда
			ЗаполнитьСписокВыбораАдресаИзРаспоряжений(ЭлементыФормы.АдресДоставкиПолучателя1,ДокОбъект);
		ИначеЕсли ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу Тогда
			ЗаполнитьСписокВыбораАдресаИзРаспоряжений(ЭлементыФормы.АдресДоставкиПолучателя2, ДокОбъект);
		КонецЕсли;
	ИначеЕсли ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента Тогда
		ЗаполнитьСписокВыбораАдресаИзЗаданий(ЭлементыФормы.АдресДоставкиПолучателя, ДокОбъект);
		ИсключаяСвойства = ?(ДопИнфоИзмененоПользователем,"ДополнительнаяИнформацияПоДоставке","");
		Если АдресИзмененПользователем Тогда
			ЗаполнитьЗначенияСвойств(ДокОбъект,ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки(),,
											"СпособДоставки,"+ИсключаяСвойства+",АдресДоставки,АдресДоставкиЗначенияПолей");
		// Заполним адрес получателя, если в списке только один адрес
		// или если первый адрес в списке получен из заданий на перевозку (поэтому в свойствах есть Зона доставки)
		ИначеЕсли ЭлементыФормы.АдресДоставкиПолучателя.СписокВыбора.Количество() = 1
			ИЛИ (ЭлементыФормы.АдресДоставкиПолучателя.СписокВыбора.Количество() > 1
					И ЭлементыФормы.АдресДоставкиПолучателя.СписокВыбора[0].Значение.Свойство("ЗонаДоставки")) Тогда
			ПерваяСтруктураВСписке = ЭлементыФормы.АдресДоставкиПолучателя.СписокВыбора[0].Значение;
			Если ПерваяСтруктураВСписке.Свойство("ДополнительнаяИнформацияПоДоставке") Тогда
				ЗаполнитьЗначенияСвойств(ДокОбъект,ПерваяСтруктураВСписке,,ИсключаяСвойства);
			Иначе
				ЗаполнитьЗначенияСвойств(ДокОбъект,ПерваяСтруктураВСписке);
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(ДокОбъект,ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки(),,"СпособДоставки,"+ИсключаяСвойства)
		КонецЕсли;
	ИначеЕсли ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз Тогда
		ЗаполнитьСписокВыбораАдресаИзРаспоряжений(ЭлементыФормы.АдресДоставкиСамовывоз, ДокОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииПеревозчика(ЭлементыФормы, ДокОбъект)
	Если ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика Тогда
		Возврат
	КонецЕсли;
	// Толька для способа СиламиПеревозчикаПоАдресу
	ИсключаяСвойства = "АдресДоставки,АдресДоставкиЗначенияПолей";
	Если ЗначениеЗаполнено(ДокОбъект.ДополнительнаяИнформацияПоДоставке) Тогда
		Если ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(ЭлементыФормы.АдресДоставкиПолучателя1.СписокВыбора,
									"ДополнительнаяИнформацияПоДоставке",ДокОбъект.ДополнительнаяИнформацияПоДоставке) = Неопределено Тогда
			Если ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(ЭлементыФормы.АдресДоставкиПолучателя2.СписокВыбора,
										"ДополнительнаяИнформацияПоДоставке",ДокОбъект.ДополнительнаяИнформацияПоДоставке) = Неопределено Тогда
				ИсключаяСвойства = ИсключаяСвойства + ",ДополнительнаяИнформацияПоДоставке";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДокОбъект.ПеревозчикПартнер) Тогда
		ЭлементыФормы.АдресДоставкиПеревозчика.СписокВыбора.Очистить();
		ЗаполнитьЗначенияСвойств(ДокОбъект,ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки(),,"СпособДоставки,ПеревозчикПартнер,"+ИсключаяСвойства);
		Возврат;
	Иначе
		ЗаполнитьСписокВыбораАдресаИзЗаданий(ЭлементыФормы.АдресДоставкиПеревозчика, ДокОбъект);
		// Заполним адрес перевозчика, если в списке только один адрес
		// или если первый адрес в списке получен из заданий на перевозку (в свойствах есть Зона доставки)
		ЗаполнитьЗначенияСвойств(ДокОбъект,ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки(),,"СпособДоставки,ПеревозчикПартнер,"+ИсключаяСвойства);
		Если ЭлементыФормы.АдресДоставкиПеревозчика.СписокВыбора.Количество() = 1
			ИЛИ (ЭлементыФормы.АдресДоставкиПеревозчика.СписокВыбора.Количество()>1
					И ЭлементыФормы.АдресДоставкиПеревозчика.СписокВыбора[0].Значение.Свойство("ЗонаДоставки")) Тогда
			ПерваяСтруктураВСписке = ЭлементыФормы.АдресДоставкиПеревозчика.СписокВыбора[0].Значение;
			// Если адрес получен из заданий, то заполняем время, зону, допинфо
			Если ПерваяСтруктураВСписке.Свойство("ДополнительнаяИнформацияПоДоставке") Тогда
				ЗаполнитьЗначенияСвойств(ДокОбъект,ПерваяСтруктураВСписке,,ИсключаяСвойства);
			КонецЕсли;
			ДокОбъект.АдресДоставкиПеревозчика = ПерваяСтруктураВСписке.АдресДоставки;
			ДокОбъект.АдресДоставкиПеревозчикаЗначенияПолей = ПерваяСтруктураВСписке.АдресДоставкиЗначенияПолей;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораПеревозчиков(ЭлементыФормы,ДокОбъект)
	
	Если ЭлементыФормы.Найти("ПеревозчикПартнер") = Неопределено Тогда
		Возврат
	КонецЕсли;
		
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 5
		|	Док.ПеревозчикПартнер КАК Перевозчик
		|ИЗ Документ."+ДокОбъект.Ссылка.Метаданные().Имя+" КАК Док
		|ГДЕ Док.Проведен
		|	И Док.ПеревозчикПартнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|	И (Док."+?(ТипЗнч(ДокОбъект.Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров"),"СкладПолучатель","Партнер")+" = &Получатель ИЛИ &Получатель = НЕОПРЕДЕЛЕНО)
		|СГРУППИРОВАТЬ ПО Док.ПеревозчикПартнер
		|УПОРЯДОЧИТЬ ПО МАКСИМУМ(Док.Дата) УБЫВ");
	Запрос.УстановитьПараметр("Получатель",Получатель(ДокОбъект).Значение);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		// Заполним список выбора перевозчиками по получателю и перевозчику
		МассивПеревозчиков = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Перевозчик");
		ЭлементыФормы.ПеревозчикПартнер.СписокВыбора.ЗагрузитьЗначения(МассивПеревозчиков);
		Если ЭлементыФормы.Найти("ПеревозчикПартнер1") <> Неопределено Тогда
			ЭлементыФормы.ПеревозчикПартнер1.СписокВыбора.ЗагрузитьЗначения(МассивПеревозчиков);
		КонецЕсли;
	КонецЕсли;
	Если ЭлементыФормы.ПеревозчикПартнер.СписокВыбора.Количество() < 5 Тогда
		// Если список не полный, попытаемся дополнить его, устранив ограничение по получателю
		Запрос.УстановитьПараметр("Получатель",Неопределено);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() > 0 Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока ЭлементыФормы.ПеревозчикПартнер.СписокВыбора.Количество() < 5 Цикл
				Если Выборка.Следующий() Тогда
					Если ЭлементыФормы.ПеревозчикПартнер.СписокВыбора.НайтиПоЗначению(Выборка.Перевозчик) = Неопределено Тогда
						ЭлементыФормы.ПеревозчикПартнер.СписокВыбора.Добавить(Выборка.Перевозчик);
						Если ЭлементыФормы.Найти("ПеревозчикПартнер1") <> Неопределено Тогда
							ЭлементыФормы.ПеревозчикПартнер1.СписокВыбора.Добавить(Выборка.Перевозчик);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораАдресаИзРаспоряжений(ЭлементАдрес, ДокОбъект)
	
	ЭлементАдрес.СписокВыбора.Очистить();
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 3
		|	Док.АдресДоставки КАК АдресДоставки,
		|	МАКСИМУМ(Док.Дата) КАК Дата
		|ПОМЕСТИТЬ ВТ_ПоследниеАдреса
		|ИЗ
		|	Документ."+ДокОбъект.Ссылка.Метаданные().Имя+" КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док."+?(ТипЗнч(ДокОбъект.Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров"),"СкладПолучатель","Партнер")+" = &Получатель
		|	И Док.АдресДоставки <> """"
		|
		|СГРУППИРОВАТЬ ПО
		|	Док.АдресДоставки
		|
		|УПОРЯДОЧИТЬ ПО
		|	МАКСИМУМ(Док.Дата) УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(Док.Ссылка) КАК Ссылка,
		|	ВТ_ПоследниеАдреса.АдресДоставки
		|ПОМЕСТИТЬ ВТ_СсылкиПоАдресам
		|ИЗ
		|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ."+ДокОбъект.Ссылка.Метаданные().Имя+" КАК Док
		|		ПО ВТ_ПоследниеАдреса.АдресДоставки = Док.АдресДоставки
		|			И ВТ_ПоследниеАдреса.Дата = Док.Дата
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПоследниеАдреса.АдресДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПоследниеАдреса.АдресДоставки КАК АдресДоставки,
		|	ВТ_СсылкиПоАдресам.Ссылка.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
		|	ВТ_СсылкиПоАдресам.Ссылка.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформацияПоДоставке
		|ИЗ
		|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СсылкиПоАдресам КАК ВТ_СсылкиПоАдресам
		|		ПО (ВТ_СсылкиПоАдресам.АдресДоставки = ВТ_ПоследниеАдреса.АдресДоставки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ПоследниеАдреса.Дата УБЫВ");
	Получатель = Получатель(ДокОбъект).Значение;
	Запрос.УстановитьПараметр("Получатель",Получатель);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураВыбора = Новый Структура("АдресДоставки,АдресДоставкиЗначенияПолей,ДополнительнаяИнформацияПоДоставке","","","");
		ЗаполнитьЗначенияСвойств(СтруктураВыбора,Выборка);
		ЭлементАдрес.СписокВыбора.Добавить(СтруктураВыбора, Выборка.АдресДоставки);
	КонецЦикла;
	// Дополним список контактной информацией получателя
	Для Каждого Строка Из ПолучитьАдресаПолучателяИзКонтактнойИнформации(Получатель) Цикл
		НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(ЭлементАдрес.СписокВыбора,"АдресДоставки",Строка.Значение);
		Если НайденныйЭлементСЗ = Неопределено Тогда
			СтруктураВыбора = Новый Структура("АдресДоставки,АдресДоставкиЗначенияПолей,ДополнительнаяИнформацияПоДоставке","","","");
			СтруктураВыбора.АдресДоставки = Строка.Значение;
			СтруктураВыбора.АдресДоставкиЗначенияПолей = Строка.ЗначенияПолей;
			СтруктураВыбора.ДополнительнаяИнформацияПоДоставке = "";
			ЭлементАдрес.СписокВыбора.Добавить(СтруктураВыбора, Строка.Вид + ": " + Строка.Значение);
		ИначеЕсли НЕ ЗначениеЗаполнено(НайденныйЭлементСЗ.Значение.АдресДоставкиЗначенияПолей) Тогда
			НайденныйЭлементСЗ.Значение.АдресДоставкиЗначенияПолей = Строка.ЗначенияПолей;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораАдресаИзЗаданий(ЭлементАдрес, ДокОбъект)
	
	ЭлементАдрес.СписокВыбора.Очистить();
	Получатель = Получатель(ДокОбъект).Значение;
	ДоставкаКлиенту = ДокОбъект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
	// Заполним списки выбора доставки клиенту или перевозчику
	Если ДоставкаКлиенту Тогда
		// Получим последние использованные в заданиях на перевозку реквизиты доставки по получателю
		ТаблицаРеквизитовДоставки = ПолучитьПоследниеРеквизитыДоставки(Получатель);
	Иначе //СиламиПеревозчикаПоАдресу
		// Получим последние использованные реквизиты доставки перевозчика по получателю
		ТаблицаРеквизитовДоставки = ПолучитьПоследниеРеквизитыДоставки(Получатель,ДокОбъект.ПеревозчикПартнер);
		Если ТаблицаРеквизитовДоставки.Количество() < 3 Тогда
			// Если список не полный, попытаемся дополнить его, устранив ограничение по получателю
			ДополнительнаяТаблицаРеквизитовДоставки = ПолучитьПоследниеРеквизитыДоставки(,ДокОбъект.ПеревозчикПартнер);
			Для Каждого Стр Из ДополнительнаяТаблицаРеквизитовДоставки Цикл
				Если ТаблицаРеквизитовДоставки.Найти(Стр.АдресДоставки,"АдресДоставки") = Неопределено Тогда
					НоваяСтрока = ТаблицаРеквизитовДоставки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр)
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Для Каждого Стр Из ТаблицаРеквизитовДоставки Цикл
		СтруктураВыбора = СтруктураВыбора();
		ЗаполнитьЗначенияСвойств(СтруктураВыбора, Стр);
		ЭлементАдрес.СписокВыбора.Добавить(СтруктураВыбора,Стр.АдресДоставки);
	КонецЦикла;
	// Добавим уникальные адреса из контактной информации в список выбора
	Для Каждого Строка Из ПолучитьАдресаПолучателяИзКонтактнойИнформации(?(ДоставкаКлиенту,Получатель,ДокОбъект.ПеревозчикПартнер)) Цикл
		НайденныйЭлементСЗ = ДоставкаТоваровКлиентСервер.НайтиВСпискеСтруктур(ЭлементАдрес.СписокВыбора,"АдресДоставки",Строка.Значение);
		Если НайденныйЭлементСЗ = Неопределено Тогда
			СтруктураВыбора = Новый Структура("АдресДоставки,АдресДоставкиЗначенияПолей");
			СтруктураВыбора.АдресДоставки = Строка.Значение;
			СтруктураВыбора.АдресДоставкиЗначенияПолей = Строка.ЗначенияПолей;
			ЭлементАдрес.СписокВыбора.Добавить(СтруктураВыбора, Строка.Вид + ": " + Строка.Значение);
		ИначеЕсли НЕ ЗначениеЗаполнено(НайденныйЭлементСЗ.Значение.АдресДоставкиЗначенияПолей) Тогда
			НайденныйЭлементСЗ.Значение.АдресДоставкиЗначенияПолей = Строка.ЗначенияПолей;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураВыбора()
	Возврат Новый Структура("АдресДоставки,
							   |АдресДоставкиЗначенияПолей,
							   |ЗонаДоставки,
							   |ВремяДоставкиС,
							   |ВремяДоставкиПо,
							   |ДополнительнаяИнформацияПоДоставке",
							   "","",Справочники.ЗоныДоставки.ПустаяСсылка(),
							   Дата(1,1,1),Дата(1,1,1),"");
КонецФункции

Функция ПолучитьПоследниеРеквизитыДоставки(Получатель = Неопределено, Перевозчик = Неопределено)
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаданиеНаПеревозкуРаспоряжения.НомерСтроки,
		|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Дата,
		|	ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи,
		|	ЗаданиеНаПеревозкуРаспоряжения.ВремяС,
		|	ЗаданиеНаПеревозкуРаспоряжения.ВремяПо,
		|	ЗаданиеНаПеревозкуРаспоряжения.ДополнительнаяИнформация,
		|	ЗаданиеНаПеревозкуМаршрут.АдресДоставки,
		|	ЗаданиеНаПеревозкуМаршрут.АдресДоставкиЗначенияПолей
		|ПОМЕСТИТЬ ВТ_ЗаданиеНаПеревозкуСтроки
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
		|		ПО (ЗаданиеНаПеревозкуМаршрут.КлючСвязи = ЗаданиеНаПеревозкуРаспоряжения.КлючСвязи)
		|ГДЕ
		|	ЗаданиеНаПеревозкуРаспоряжения.Ссылка.Проведен
		|	И (ЗаданиеНаПеревозкуРаспоряжения.Получатель = &Получатель
		|			ИЛИ &Получатель = НЕОПРЕДЕЛЕНО)
		|	И (ЗаданиеНаПеревозкуРаспоряжения.Перевозчик = &Перевозчик
		|			ИЛИ &Перевозчик = НЕОПРЕДЕЛЕНО
		|				И ЗаданиеНаПеревозкуРаспоряжения.Перевозчик = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 3
		|	ВТ_ЗаданиеНаПеревозкуСтроки.АдресДоставки КАК АдресДоставки,
		|	МАКСИМУМ(ВТ_ЗаданиеНаПеревозкуСтроки.Дата) КАК Дата
		|ПОМЕСТИТЬ ВТ_ПоследниеАдреса
		|ИЗ
		|	ВТ_ЗаданиеНаПеревозкуСтроки КАК ВТ_ЗаданиеНаПеревозкуСтроки
		|ГДЕ
		|	ВТ_ЗаданиеНаПеревозкуСтроки.АдресДоставки <> """"
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ЗаданиеНаПеревозкуСтроки.АдресДоставки
		|
		|УПОРЯДОЧИТЬ ПО
		|	МАКСИМУМ(ВТ_ЗаданиеНаПеревозкуСтроки.Дата) УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПоследниеАдреса.АдресДоставки,
		|	ЗаданиеНаПеревозкуМаршрут.ЗонаДоставки,
		|	ЗаданиеНаПеревозкуМаршрут.Ссылка.Дата
		|ПОМЕСТИТЬ ВТ_МаршрутыСНужнымиАдресами
		|ИЗ
		|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
		|		ПО ВТ_ПоследниеАдреса.АдресДоставки = ЗаданиеНаПеревозкуМаршрут.АдресДоставки
		|ГДЕ
		|	ЗаданиеНаПеревозкуМаршрут.Ссылка.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПоследниеАдреса.АдресДоставки,
		|	МАКСИМУМ(ВТ_МаршрутыСНужнымиАдресами.Дата) КАК Дата
		|ПОМЕСТИТЬ ВТ_ДатыПоследнихЗонПоАдресам
		|ИЗ
		|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаршрутыСНужнымиАдресами КАК ВТ_МаршрутыСНужнымиАдресами
		|		ПО ВТ_ПоследниеАдреса.АдресДоставки = ВТ_МаршрутыСНужнымиАдресами.АдресДоставки
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПоследниеАдреса.АдресДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТ_МаршрутыСНужнымиАдресами.ЗонаДоставки) КАК ЗонаДоставки,
		|	ВТ_ДатыПоследнихЗонПоАдресам.АдресДоставки
		|ПОМЕСТИТЬ ВТ_ПоследниеЗоныПоАдресам
		|ИЗ
		|	ВТ_МаршрутыСНужнымиАдресами КАК ВТ_МаршрутыСНужнымиАдресами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатыПоследнихЗонПоАдресам КАК ВТ_ДатыПоследнихЗонПоАдресам
		|		ПО (ВТ_ДатыПоследнихЗонПоАдресам.АдресДоставки = ВТ_МаршрутыСНужнымиАдресами.АдресДоставки)
		|			И (ВТ_ДатыПоследнихЗонПоАдресам.Дата = ВТ_МаршрутыСНужнымиАдресами.Дата)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДатыПоследнихЗонПоАдресам.АдресДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПоследниеАдреса.АдресДоставки,
		|	МАКСИМУМ(ВТ_ЗаданиеНаПеревозкуСтроки.КлючСвязи) КАК КлючСвязи
		|ПОМЕСТИТЬ ВТ_ПоследниеАдресаКлючиСвязи
		|ИЗ
		|	ВТ_ПоследниеАдреса КАК ВТ_ПоследниеАдреса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаданиеНаПеревозкуСтроки КАК ВТ_ЗаданиеНаПеревозкуСтроки
		|		ПО (ВТ_ЗаданиеНаПеревозкуСтроки.АдресДоставки = ВТ_ПоследниеАдреса.АдресДоставки)
		|			И (ВТ_ЗаданиеНаПеревозкуСтроки.Дата = ВТ_ПоследниеАдреса.Дата)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПоследниеАдреса.АдресДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПоследниеАдресаКлючиСвязи.КлючСвязи,
		|	МАКСИМУМ(ВТ_ЗаданиеНаПеревозкуСтроки.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок
		|ИЗ
		|	ВТ_ПоследниеАдресаКлючиСвязи КАК ВТ_ПоследниеАдресаКлючиСвязи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗаданиеНаПеревозкуСтроки КАК ВТ_ЗаданиеНаПеревозкуСтроки
		|		ПО (ВТ_ЗаданиеНаПеревозкуСтроки.КлючСвязи = ВТ_ПоследниеАдресаКлючиСвязи.КлючСвязи)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПоследниеАдресаКлючиСвязи.АдресДоставки,
		|	ВТ_ПоследниеАдресаКлючиСвязи.КлючСвязи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗаданиеНаПеревозкуСтроки.АдресДоставки,
		|	ВТ_ЗаданиеНаПеревозкуСтроки.АдресДоставкиЗначенияПолей,
		|	ВТ_ПоследниеЗоныПоАдресам.ЗонаДоставки,
		|	ВТ_ЗаданиеНаПеревозкуСтроки.ВремяС КАК ВремяДоставкиС,
		|	ВТ_ЗаданиеНаПеревозкуСтроки.ВремяПо КАК ВремяДоставкиПо,
		|	ВТ_ЗаданиеНаПеревозкуСтроки.ДополнительнаяИнформация КАК ДополнительнаяИнформацияПоДоставке
		|ИЗ
		|	ВТ_ЗаданиеНаПеревозкуСтроки КАК ВТ_ЗаданиеНаПеревозкуСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок КАК ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок
		|		ПО ВТ_ЗаданиеНаПеревозкуСтроки.КлючСвязи = ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок.КлючСвязи
		|			И ВТ_ЗаданиеНаПеревозкуСтроки.НомерСтроки = ВТ_ПоследниеАдресаКлючиСвязиНомераСтрок.НомерСтроки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПоследниеЗоныПоАдресам КАК ВТ_ПоследниеЗоныПоАдресам
		|		ПО (ВТ_ПоследниеЗоныПоАдресам.АдресДоставки = ВТ_ЗаданиеНаПеревозкуСтроки.АдресДоставки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_ЗаданиеНаПеревозкуСтроки.Дата УБЫВ");
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("Перевозчик", Перевозчик);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	Возврат Результат;
КонецФункции

Функция ПолучитьАдресаПолучателяИзКонтактнойИнформации(Получатель)
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Представление как Значение,
		|	КонтактнаяИнформация.Вид.Представление как Вид,
		|	КонтактнаяИнформация.ЗначенияПолей
		|ИЗ
		|	Справочник." + Получатель.Метаданные().Имя + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Получатель
		|	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
		|");
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Возврат Запрос.Выполнить().Выгрузить()
КонецФункции
