&НаСервере
Процедура ЗапуститьБизнесПроцессОбеспечение(Источник, Отказ) Экспорт
	Если АК_БизнесПроцессыСервер.БППоОбеспечениюЗапущен(Источник.ссылка) и ЗначениеЗаполнено(Источник.Ссылка) тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Статус <> Перечисления.СтатусыЗаказовКлиентов.КОбеспечению Тогда
		Возврат;
	КонецеСЛИ;
	
	// 2013.04.03  Пока не работает.
	//Если Источник.Статус = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению и СостояниеЗаказа <> Перечисления.СостоянияЗаказовКлиентов.ГотовКОбеспечению тогда
	//	Сообщить("Заказ не готов к опеспечению, перевод статуса невозможен!",СтатусСообщения.Внимание);
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	
	
	НовыйБизнесПроцесс = БизнесПроцессы.акЗакупкаТовара.СоздатьБизнесПроцесс();
	НовыйБизнесПроцесс.Дата = ТекущаяДата();
	НовыйБизнесПроцесс.Заполнить(Источник.Ссылка);
	НовыйБизнесПроцесс.Записать();
	НовыйБизнесПроцесс.Старт();
	
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьБизнесПроцессДоставка(Источник, Отказ) Экспорт
	Если АК_БизнесПроцессыСервер.БППоДоставкеЗапущен(Источник.ссылка) тогда
		Возврат;
	КонецЕсли;

	//СостояниеЗаказа = "";
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	ДокументЗаказКлиента.Ссылка КАК Заказ,
	//			   |	ВЫБОР
	//			   |		КОГДА НЕ ДокументЗаказКлиента.Проведен
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ПустаяСсылка)
	//			   |		КОГДА ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяСогласование)
	//			   |		КОГДА (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
	//			   |				ИЛИ НЕ &ИспользоватьСтатусы)
	//			   |				И ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	//			   |				И ДокументЗаказКлиента.СуммаАвансаДоОбеспечения > 0
	//			   |				И ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяАвансДоОбеспечения)
	//			   |		КОГДА ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
	//			   |				И ДокументЗаказКлиента.СуммаДокумента > 0
	//			   |				И (ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	//			   |					ИЛИ ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКОбеспечению)
	//			   |		КОГДА (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
	//			   |				ИЛИ НЕ &ИспользоватьСтатусы
	//			   |				ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению))
	//			   |				И ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	//			   |				И ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0
	//			   |				И ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяПредоплатаДоОтгрузки)
	//			   |		КОГДА (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
	//			   |				ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению))
	//			   |				И ДокументЗаказКлиента.СуммаДокумента > 0
	//			   |				И ((ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	//			   |					ИЛИ ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	//			   |					И ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаОстаток, 0) <> 0)
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКОтгрузке)
	//			   |		КОГДА (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)
	//			   |				ИЛИ НЕ &ИспользоватьСтатусы)
	//			   |				И ДокументЗаказКлиента.СуммаДокумента > 0
	//			   |				И (ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	//			   |					ИЛИ ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	//			   |				И ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюОстаток, 0) <> 0
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяОтгрузка)
	//			   |		КОГДА (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)
	//			   |				ИЛИ НЕ &ИспользоватьСтатусы)
	//			   |				И ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	//			   |				И ДокументЗаказКлиента.СуммаДокумента - ДокументЗаказКлиента.СуммаАвансаДоОбеспечения + ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0
	//			   |				И ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюОстаток, 0) = 0
	//			   |				И ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) > 0
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяОплатаПослеОтгрузки)
	//			   |		КОГДА ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКЗакрытию)
	//			   |		КОГДА ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
	//			   |					И &ИспользоватьСтатусы
	//			   |				ИЛИ НЕ &ИспользоватьСтатусы
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)
	//			   |	КОНЕЦ КАК Состояние
	//			   |ИЗ
	//			   |	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	//			   |		ПО (СостоянияЭД.СсылкаНаОбъект = ДокументЗаказКлиента.Ссылка)
	//			   |		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки КАК РасчетыСКлиентамиОстатки
	//			   |		ПО ДокументЗаказКлиента.Ссылка = РасчетыСКлиентамиОстатки.ЗаказКлиента
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ), ) КАК РасчетыСКлиентамиОстаткиНаДатуАктуальности
	//			   |		ПО ДокументЗаказКлиента.Ссылка = РасчетыСКлиентамиОстаткиНаДатуАктуальности.ЗаказКлиента
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.Остатки КАК ЗаказыКлиентовОстатки
	//			   |		ПО ДокументЗаказКлиента.Ссылка = ЗаказыКлиентовОстатки.ЗаказКлиента
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.Остатки(КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ), ) КАК ЗаказыКлиентовОстаткиНаДатуАктуальности
	//			   |		ПО ДокументЗаказКлиента.Ссылка = ЗаказыКлиентовОстаткиНаДатуАктуальности.ЗаказКлиента}
	//			   |ГДЕ
	//			   |	ДокументЗаказКлиента.Ссылка = &Ссылка";
	//
	//Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	//Запрос.УстановитьПараметр("ИспользоватьСтатусы",Истина);
	//Запрос.УстановитьПараметр("ДатаАктуальности",ТекущаяДата());
	//
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Если Выборка.Следующий() Тогда
	//	СостояниеЗаказа = Выборка.Состояние;
	//	СтарыйСтатус = Выборка.Заказ.Статус;
	//КонецЕсли;	
	
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура",Справочники.Номенклатура.НайтиПоНаименованию("Доставка"));
	
	НайденныеСтроки = Источник.ссылка.АК_УслугиДополнительные.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() =0 тогда
		Возврат;
	КонецЕсли;
	
	//
	//
	//
	//Если СтарыйСтатус = Источник.Статус  тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если Источник.Статус <> Перечисления.СтатусыЗаказовКлиентов.КОтгрузке тогда
	//	Возврат;
	//КонецеСЛИ;
	
	
	
	НовыйБизнесПроцесс = БизнесПроцессы.акЗаказыНаДоставку.СоздатьБизнесПроцесс();
	НовыйБизнесПроцесс.Дата = ТекущаяДата();
	НовыйБизнесПроцесс.ЗаказКлиента = Источник.Ссылка;
	НовыйБизнесПроцесс.Наименование = Строка(Источник.Ссылка); 
	НовыйБизнесПроцесс.Автор = ПараметрыСеанса.ТекущийПользователь;
	НовыйБизнесПроцесс.Записать();
	НовыйБизнесПроцесс.Старт();
	
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьБизнесПроцессМонтаж(Источник, Отказ) Экспорт
	Если АК_БизнесПроцессыСервер.БППоДоставкеЗапущен(Источник.ссылка) тогда
		Возврат;
	КонецЕсли;

	//СостояниеЗаказа = "";
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//			   |	ДокументЗаказКлиента.Ссылка КАК Заказ,
	//			   |	ВЫБОР
	//			   |		КОГДА НЕ ДокументЗаказКлиента.Проведен
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ПустаяСсылка)
	//			   |		КОГДА ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяСогласование)
	//			   |		КОГДА (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
	//			   |				ИЛИ НЕ &ИспользоватьСтатусы)
	//			   |				И ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	//			   |				И ДокументЗаказКлиента.СуммаАвансаДоОбеспечения > 0
	//			   |				И ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяАвансДоОбеспечения)
	//			   |		КОГДА ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
	//			   |				И ДокументЗаказКлиента.СуммаДокумента > 0
	//			   |				И (ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	//			   |					ИЛИ ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКОбеспечению)
	//			   |		КОГДА (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
	//			   |				ИЛИ НЕ &ИспользоватьСтатусы
	//			   |				ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению))
	//			   |				И ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	//			   |				И ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0
	//			   |				И ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяПредоплатаДоОтгрузки)
	//			   |		КОГДА (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
	//			   |				ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению))
	//			   |				И ДокументЗаказКлиента.СуммаДокумента > 0
	//			   |				И ((ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	//			   |					ИЛИ ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	//			   |					И ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаОстаток, 0) <> 0)
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКОтгрузке)
	//			   |		КОГДА (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)
	//			   |				ИЛИ НЕ &ИспользоватьСтатусы)
	//			   |				И ДокументЗаказКлиента.СуммаДокумента > 0
	//			   |				И (ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	//			   |					ИЛИ ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	//			   |				И ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюОстаток, 0) <> 0
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяОтгрузка)
	//			   |		КОГДА (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке)
	//			   |				ИЛИ НЕ &ИспользоватьСтатусы)
	//			   |				И ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	//			   |				И ДокументЗаказКлиента.СуммаДокумента - ДокументЗаказКлиента.СуммаАвансаДоОбеспечения + ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0
	//			   |				И ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюОстаток, 0) = 0
	//			   |				И ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) > 0
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяОплатаПослеОтгрузки)
	//			   |		КОГДА ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКЗакрытию)
	//			   |		КОГДА ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
	//			   |					И &ИспользоватьСтатусы
	//			   |				ИЛИ НЕ &ИспользоватьСтатусы
	//			   |			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)
	//			   |	КОНЕЦ КАК Состояние
	//			   |ИЗ
	//			   |	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	//			   |		ПО (СостоянияЭД.СсылкаНаОбъект = ДокументЗаказКлиента.Ссылка)
	//			   |		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки КАК РасчетыСКлиентамиОстатки
	//			   |		ПО ДокументЗаказКлиента.Ссылка = РасчетыСКлиентамиОстатки.ЗаказКлиента
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ), ) КАК РасчетыСКлиентамиОстаткиНаДатуАктуальности
	//			   |		ПО ДокументЗаказКлиента.Ссылка = РасчетыСКлиентамиОстаткиНаДатуАктуальности.ЗаказКлиента
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.Остатки КАК ЗаказыКлиентовОстатки
	//			   |		ПО ДокументЗаказКлиента.Ссылка = ЗаказыКлиентовОстатки.ЗаказКлиента
	//			   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.Остатки(КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ), ) КАК ЗаказыКлиентовОстаткиНаДатуАктуальности
	//			   |		ПО ДокументЗаказКлиента.Ссылка = ЗаказыКлиентовОстаткиНаДатуАктуальности.ЗаказКлиента}
	//			   |ГДЕ
	//			   |	ДокументЗаказКлиента.Ссылка = &Ссылка";
	//
	//Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	//Запрос.УстановитьПараметр("ИспользоватьСтатусы",Истина);
	//Запрос.УстановитьПараметр("ДатаАктуальности",ТекущаяДата());
	//
	//
	//Результат = Запрос.Выполнить();
	//Выборка = Результат.Выбрать();
	//
	//Если Выборка.Следующий() Тогда
	//	СостояниеЗаказа = Выборка.Состояние;
	//	СтарыйСтатус = Выборка.Заказ.Статус;
	//КонецЕсли;	
	
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура",Справочники.Номенклатура.НайтиПоНаименованию("Монтаж"));
	
	НайденныеСтроки = Источник.ссылка.АК_УслугиДополнительные.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() =0 тогда
		Возврат;
	КонецЕсли;
	
	
	
	
	//Если СтарыйСтатус = Источник.Статус  тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если Источник.Статус <> Перечисления.СтатусыЗаказовКлиентов.КОтгрузке тогда
	//	Возврат;
	//КонецеСЛИ;
	//
	
	
	НовыйБизнесПроцесс = БизнесПроцессы.акЗаказыНаМонтаж.СоздатьБизнесПроцесс();
	НовыйБизнесПроцесс.Дата = ТекущаяДата();
	НовыйБизнесПроцесс.ЗаказКлиента = Источник.Ссылка;
	НовыйБизнесПроцесс.Наименование = Строка(Источник.Ссылка); 
	НовыйБизнесПроцесс.Автор = ПараметрыСеанса.ТекущийПользователь;
	НовыйБизнесПроцесс.Записать();
	НовыйБизнесПроцесс.Старт();
	
	
КонецПроцедуры



&НаСервере
Процедура СозданиеСобытийСервер() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ЗадачаИсполнителяЗадачиПоИсполнителю.БизнесПроцесс,
				   |	ЗадачаИсполнителяЗадачиПоИсполнителю.Исполнитель
				   |ИЗ
				   |	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(
				   |			,
				   |			ТочкаМаршрута = &ТочкаМаршрута
				   |				И БизнесПроцесс.Завершен = ЛОЖЬ) КАК ЗадачаИсполнителяЗадачиПоИсполнителю";
	
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.акЗаказыНаДоставку.ТочкиМаршрута.СформироватьЗаказНаДоставку);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.БизнесПроцесс.Напоминание14 и ТекущаяДата()>(Выборка.БизнесПроцесс.ЗаказКлиента.ДатаОтгрузки -14*60*60*24) тогда
			НоваяЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			НоваяЗадача.Автор = ПараметрыСеанса.ТекущийПользователь;
			НоваяЗадача.АвторСтрокой = ПараметрыСеанса.ТекущийПользователь;
			НоваяЗадача.БизнесПроцесс = Выборка.БизнесПроцесс;
			НоваяЗадача.Важность =Перечисления.ВариантыВажностиЗадачи.Высокая;
			НоваяЗадача.Дата = ТекущаяДата();
			НоваяЗадача.Исполнитель = Выборка.Исполнитель;
			НоваяЗадача.Наименование = "Позвонить клиенту за доставку " + Выборка.БизнесПроцесс.ЗаказКлиента.Партнер;
			НоваяЗадача.Описание = "Позвонить клиенту по доставке по "+ Выборка.БизнесПроцесс.ЗаказКлиента;
			НоваяЗадача.Записать();
			
			ТО = Выборка.БизнесПроцесс.ПолучитьОбъект();
			ТО.Напоминание14 = Истина;
			ТО.Записать();
		КонецЕсли;
		Если Не Выборка.БизнесПроцесс.Напоминание3 и ТекущаяДата()>(Выборка.БизнесПроцесс.ЗаказКлиента.ДатаОтгрузки -3*60*60*24) тогда
			НоваяЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			НоваяЗадача.Автор = ПараметрыСеанса.ТекущийПользователь;
			НоваяЗадача.АвторСтрокой = ПараметрыСеанса.ТекущийПользователь;
			НоваяЗадача.БизнесПроцесс = Выборка.БизнесПроцесс;
			НоваяЗадача.Важность =Перечисления.ВариантыВажностиЗадачи.Высокая;
			НоваяЗадача.Дата = ТекущаяДата();
			НоваяЗадача.Исполнитель = Выборка.Исполнитель;
			НоваяЗадача.Наименование = "Позвонить клиенту  за доставку " + Выборка.БизнесПроцесс.ЗаказКлиента.Партнер;;
			НоваяЗадача.Описание = "Позвонить клиенту по доставке по "+ Выборка.БизнесПроцесс.ЗаказКлиента;
			НоваяЗадача.Записать();
			
			ТО = Выборка.БизнесПроцесс.ПолучитьОбъект();
			ТО.Напоминание3 = Истина;
			ТО.Записать();
		КонецЕсли;
	КонецЦикла;
	
	
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ЗадачаИсполнителяЗадачиПоИсполнителю.БизнесПроцесс,
				   |	ЗадачаИсполнителяЗадачиПоИсполнителю.Исполнитель
				   |ИЗ
				   |	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(
				   |			,
				   |			ТочкаМаршрута = &ТочкаМаршрута
				   |				И БизнесПроцесс.Завершен = ЛОЖЬ) КАК ЗадачаИсполнителяЗадачиПоИсполнителю";
	
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.акЗаказыНаМонтаж.ТочкиМаршрута.СформироватьЗаказНаДоставку);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ПОка  Выборка.Следующий() Цикл
		Если Не Выборка.БизнесПроцесс.Напоминание14 и ТекущаяДата()>(Выборка.БизнесПроцесс.ЗаказКлиента.ДатаОтгрузки -14*60*60*24) тогда
			НоваяЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			НоваяЗадача.Автор = ПараметрыСеанса.ТекущийПользователь;
			НоваяЗадача.АвторСтрокой = ПараметрыСеанса.ТекущийПользователь;
			НоваяЗадача.БизнесПроцесс = Выборка.БизнесПроцесс;
			НоваяЗадача.Важность =Перечисления.ВариантыВажностиЗадачи.Высокая;
			НоваяЗадача.Дата = ТекущаяДата();
			НоваяЗадача.Исполнитель = Выборка.Исполнитель;
			НоваяЗадача.Наименование = "Позвонить клиенту за монтаж " + Выборка.БизнесПроцесс.ЗаказКлиента.Партнер;
			НоваяЗадача.Описание = "Позвонить клиенту по монтажу по "+ Выборка.БизнесПроцесс.ЗаказКлиента;
			НоваяЗадача.Записать();
			
			ТО = Выборка.БизнесПроцесс.ПолучитьОбъект();
			ТО.Напоминание14 = Истина;
			ТО.Записать();
		КонецЕсли;
		Если Не Выборка.БизнесПроцесс.Напоминание3 и ТекущаяДата()>(Выборка.БизнесПроцесс.ЗаказКлиента.ДатаОтгрузки -3*60*60*24) тогда
			НоваяЗадача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			НоваяЗадача.Автор = ПараметрыСеанса.ТекущийПользователь;
			НоваяЗадача.АвторСтрокой = ПараметрыСеанса.ТекущийПользователь;
			НоваяЗадача.БизнесПроцесс = Выборка.БизнесПроцесс;
			НоваяЗадача.Важность =Перечисления.ВариантыВажностиЗадачи.Высокая;
			НоваяЗадача.Дата = ТекущаяДата();
			НоваяЗадача.Исполнитель = Выборка.Исполнитель;
			НоваяЗадача.Наименование = "Позвонить клиенту  за монтаж " + Выборка.БизнесПроцесс.ЗаказКлиента.Партнер;;
			НоваяЗадача.Описание = "Позвонить клиенту по монажу по "+ Выборка.БизнесПроцесс.ЗаказКлиента;
			НоваяЗадача.Записать();
			
			ТО = Выборка.БизнесПроцесс.ПолучитьОбъект();
			ТО.Напоминание3 = Истина;
			ТО.Записать();
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры




&НаСервере
Процедура АК_ПриЗаписиЗаказаПриЗаписи(Источник, Отказ) Экспорт
	АК_БизнесПроцессыСервер.ЗапуститьБизнесПроцессОбеспечение(Источник, Отказ);	
//	АК_БизнесПроцессыСервер.ЗапуститьБизнесПроцессДоставка(Источник, Отказ);
///	АК_БизнесПроцессыСервер.ЗапуститьБизнесПроцессМонтаж(Источник, Отказ);
КонецПроцедуры

&НаСервере
Функция ЗаказНеДоступенДляРедактирования(ЗаказКлиента) Экспорт
	
	Если ЗаказКлиента.Статус<>Перечисления.СтатусыЗаказовКлиентов.КОбеспечению Тогда
		Возврат Ложь;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	акЗакупкаТовара.Ссылка
	               |ИЗ
	               |	БизнесПроцесс.акЗакупкаТовара КАК акЗакупкаТовара
	               |ГДЕ
	               |	акЗакупкаТовара.Предмет = &ЗаказКлиента
	               |	И акЗакупкаТовара.Завершен = ЛОЖЬ
	               |	И акЗакупкаТовара.ЗаказПроверен = ИСТИНА";
	
	Запрос.УстановитьПараметр("ЗаказКлиента",ЗаказКлиента );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Если  ((Пользователи.ТекущийПользователь().Наименование = "Пировских Эдуард Александрович") ИЛИ (Пользователи.ТекущийПользователь().Наименование = "Савина Наталья Валерьевна")  ИЛИ (Пользователи.ТекущийПользователь().Наименование = "astek")) Тогда

		Возврат Ложь;	
	Иначе 
		возврат Истина;
		конецесли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция БППоОбеспечениюЗапущен(ЗаказКлиента) экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	акЗакупкаТовара.Ссылка
	|ИЗ
	|	БизнесПроцесс.акЗакупкаТовара КАК акЗакупкаТовара
	|ГДЕ
	|	акЗакупкаТовара.Предмет = &ЗаказКлиента";
	
	Запрос.УстановитьПараметр("ЗаказКлиента",ЗаказКлиента );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция БППоДоставкеЗапущен(ЗаказКлиента) экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	акОбеспечениеЗаказаКлиента.Ссылка
	|ИЗ
	|	БизнесПроцесс.акЗаказыНаДоставку КАК акОбеспечениеЗаказаКлиента
	|ГДЕ
	|	акОбеспечениеЗаказаКлиента.ЗаказКлиента = &ЗаказКлиента";
	
	Запрос.УстановитьПараметр("ЗаказКлиента",ЗаказКлиента );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция БППоМонтажуЗапущен(ЗаказКлиента) экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	акОбеспечениеЗаказаКлиента.Ссылка
	|ИЗ
	|	БизнесПроцесс.акЗаказыНаМонтаж КАК акОбеспечениеЗаказаКлиента
	|ГДЕ
	|	акОбеспечениеЗаказаКлиента.ЗаказКлиента = &ЗаказКлиента";
	
	Запрос.УстановитьПараметр("ЗаказКлиента",ЗаказКлиента );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ЕстьДоставка(ЗаказКлиента) экспорт
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура",Справочники.Номенклатура.НайтиПоНаименованию("Доставка"));
	
	НайденныеСтроки = ЗаказКлиента.АК_УслугиДополнительные.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество()>0 тогда
		Возврат ИСТИНА;
	ИНаче
		Возврат ЛОЖЬ;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ЕстьМонтаж(ЗаказКлиента) экспорт
	Отбор = Новый Структура();
	Отбор.Вставить("Номенклатура",Справочники.Номенклатура.НайтиПоНаименованию("Монтаж"));
	
	НайденныеСтроки = ЗаказКлиента.АК_УслугиДополнительные.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 тогда
		Возврат ИСТИНА;
	ИНаче
		Возврат ЛОЖЬ;
	КонецЕсли;
КонецФункции

Процедура акУстановитьПредметВыполнениеЗакупкиПриЗаписи(Источник, Отказ) Экспорт
	// Вставить содержимое обработчика.
	Если Источник.Проведен  Тогда
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	акВыполнениеЗакупки.Ссылка
	             |ИЗ
	             |	БизнесПроцесс.акВыполнениеЗакупки КАК акВыполнениеЗакупки
	             |ГДЕ
	             |	акВыполнениеЗакупки.ЗаказКлиента = &ЗаказКлиента
	             |	И акВыполнениеЗакупки.Поставщик = &Поставщик";
	Запрос.УстановитьПараметр("ЗаказКлиента",Источник.ДокументОснование);
	Запрос.УстановитьПараметр("Поставщик",Источник.Партнер);
	Результат=Запрос.Выполнить().Выгрузить();
	Для каждого строка из Результат Цикл
		ТекущийБП=строка.Ссылка;
		Если ТекущийБП.Завершен тогда 
			Продолжить;
		КонецЕсли;
	
		Если НЕ значениеЗаполнено(ТекущийБП.Предмет) Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			НачатьТранзакцию();
			Попытка
				
			
				ЗаблокироватьДанныеДляРедактирования(ТекущийБП);
            		ТекущийБПОбъект=ТекущийБП.ПолучитьОбъект();

				ТекущийБПОбъект.Предмет=Источник.Ссылка;
				ТекущийБПОбъект.Записать();
				Запрос = Новый Запрос(
				"ВЫБРАТЬ
				|	Задачи.Ссылка КАК Ссылка
				|ИЗ
				|	Задача.ЗадачаИсполнителя КАК Задачи
				|ГДЕ
				|	Задачи.БизнесПроцесс = &БизнесПроцесс");
				
				Запрос.УстановитьПараметр("БизнесПроцесс", ТекущийБП);
				Результат = Запрос.Выполнить();
				
				Блокировка = Новый БлокировкаДанных;
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
				КонецЦикла;
				Блокировка.Заблокировать();
				
				ВыборкаДетальныеЗаписи.Сбросить();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					ЗадачаОбъект.Предмет = Источник.Ссылка;
					// Не выполняем предварительную блокировку данных для редактирования, т.к.
					// это изменение имеет более высокий приоритет над открытыми формами задач.
					ЗадачаОбъект.Записать();
				КонецЦикла;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;	
КонецЕсли;
КонецПроцедуры
