////////////////////////////////////////////////////////////////////////////////
// ВыгрузкаЗагрузкаДанных: Экспорт области данных в файл/Импорт области данных из файла.
//                         Доступно только администратору ИБ/Области данных.
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выгружает данные текущей области данных в zip архив с XML файлами.
//
// Параметры:
//  БезДеленияПоФайлам - Булево - Истина - выгружать все данные в один файл,
//   Ложь - отдельно выгружать данные требующие замены ссылок при загрузке.
//  СохранятьПаролиПользователей - Булево - выгружать вместе с пользователями
//   сохраняемые значения паролей.
//
// Возвращаемое значение:
//  Строка - полное имя файла с выгрузкой.
//
Функция ВыгрузитьТекущуюОбластьВАрхив() Экспорт
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		ВызватьИсключение(НСтр("ru = 'Нарушение прав доступа'"));
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	КаталогВыгрузки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогВыгрузки);
	
	КаталогВыгрузки = КаталогВыгрузки + "/";
	
	ЗаписатьИнформациюОВыгрузкеВXML(КаталогВыгрузки, Ложь);
	
	ЗаписатьДанныеВXMLСУказаниемТипов(КаталогВыгрузки, ПолучитьМассивТиповТребующихПодменыСсылок());
	
	ЗаписатьПользователейВXML(КаталогВыгрузки, Ложь);
	
	Справочники.ИдентификаторыОбъектовМетаданных.ВыгрузитьДанныеСправочника(КаталогВыгрузки);
	
	ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
	
	Архиватор = Новый ЗаписьZipФайла(ИмяАрхива, , , , УровеньСжатияZIP.Максимальный);
	Архиватор.Добавить(КаталогВыгрузки + "*");
	Архиватор.Записать();
	
	Попытка
		УдалитьФайлы(КаталогВыгрузки);
	Исключение
		
	КонецПопытки;
	
	Возврат ИмяАрхива;
	
КонецФункции

// Загружает данные текущей области данных из zip архива с XML файлами.
//
// Параметры:
//  ИмяАрхива - Строка - полное имя файла архива с данными
//  БезДеленияПоФайлам - Булево - Истина - все данные в архиве содержаться в одном файла,
//   Ложь - в архиве отдельно выделены данные требующие замены ссылок при загрузке.
//  ЗагружатьПользователей - Булево - загружать информацию о пользователях ИБ
//  РежимОтладки - Булево - Истина - при возникновении ошибки десериализации, выводить
//   в журнал регистрации фрагмент XML, на котором произошла ошибка. Замедляет загрузку.
//
Процедура ЗагрузитьТекущуюОбластьИзАрхива(Знач ИмяАрхива, Знач ЗагружатьПользователей = Ложь, Знач РежимОтладки = Ложь) Экспорт
	
	КаталогВыгрузки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогВыгрузки);
	
	КаталогВыгрузки = КаталогВыгрузки + "/";
	
	Разархиватор = Новый ЧтениеZipФайла(ИмяАрхива);
	Разархиватор.ИзвлечьВсе(КаталогВыгрузки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	ЗагрузитьДанныеСПодменойСсылок(КаталогВыгрузки);
	
	СтандартныеПодсистемыПереопределяемый.ПослеЗагрузкиДанныхИзДругойМодели();
	
	Если ЗагружатьПользователей Тогда
		СоответствиеИдентификаторов = СоздатьПользователейИзXML(КаталогВыгрузки);
		ОбработатьПользователейПослеЗагрузкиИзДругойМодели(СоответствиеИдентификаторов);
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(КаталогВыгрузки);
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

// Считывает данные из переданного объект ЧтениеXML и записывает их
// в ИБ.
//
// Параметры:
//  Чтение - ЧтениеXML, ЧтениеFatsInfoSet - инициализированный объект для чтения XML.
//
Процедура ПрочитатьДанныеОбластиИзXML(Знач Чтение) Экспорт
	
	Типы = Новый Массив;
	СтандартныеПодсистемыПереопределяемый.ПолучитьНезагружаемыеВОбластиДанныхТипы(Типы);
	РаботаВМоделиСервисаПереопределяемый.ПолучитьНезагружаемыеВОбластиДанныхТипы(Типы);
	ИсключаемыеТипы = Новый Соответствие;
	Для каждого Тип Из Типы Цикл
		ИсключаемыеТипы.Вставить(Тип, Истина);
	КонецЦикла;
	
	Пока Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		Если НЕ ВозможностьЧтенияXML(Чтение) Тогда
			ОшибкаОпределенияТипаПриЧтении(Чтение);
		КонецЕсли;
		
		Данные = ПрочитатьXML(Чтение);
		
		Если ИсключаемыеТипы.Получить(ТипЗнч(Данные)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Данные.ОбменДанными.Загрузка = Истина;
		Данные.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Выгружает данные текущей области данных во временное хранилище по переданному адресу
//
// Параметры:
//  АдресХранилища - Строка - адрес временного хранилища в которое нужно поместить данные.
//
Процедура ВыгрузитьТекущуюОбластьВоВременноеХранилище(Знач АдресХранилища) Экспорт
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		ВызватьИсключение(НСтр("ru = 'Операция может быть выполнена только администратором области данных.'"));
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяАрхива = ВыгрузитьТекущуюОбластьВАрхив();
		
	ДанныеВыгрузки = Новый ДвоичныеДанные(ИмяАрхива);
	
	ПоместитьВоВременноеХранилище(ДанныеВыгрузки, АдресХранилища);
	
	ДанныеВыгрузки = Неопределено;
	Попытка
		УдалитьФайлы(ИмяАрхива);
	Исключение
		// При неудаче система удалит временный файл автоматически
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции удаления временного файла'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Выгружает указанную область данных во временное хранилище по переданному адресу
//
// Параметры:
//  ОбластьДанных - Число - значения разделителя области данных, которую требуется выгрузить.
//  АдресХранилища - Строка - адрес временного хранилища в которое нужно поместить данные.
//
Процедура ВыгрузитьОбластьВоВременноеХранилище(Знач ОбластьДанных, Знач АдресХранилища) Экспорт
	
	Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()
		ИЛИ НЕ Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		
		ВызватьИсключение(НСтр("ru = 'Операция может быть выполнена только администратором информационной базы.'"));
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
	
	ВыгрузитьТекущуюОбластьВоВременноеХранилище(АдресХранилища);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОшибкаОпределенияТипаПриЧтении(Знач Чтение)
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьТекущий(Чтение);
	ТекущийЭлемент = Запись.Закрыть();
	
	ШаблонТекста = НСтр("ru = 'Ошибка при чтении XML. Не удалось определить тип данных на основе элемента:
		|%1'");
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ТекущийЭлемент);
	ВызватьИсключение(ТекстСообщения);
	
КонецПроцедуры

Функция ПолучитьФабрикуСУказаниемТипов(Знач Типы = Неопределено)
	
	ИмяФайлаСхемы = ПолучитьИмяВременногоФайла("xsd");
	
	НаборСхем = ФабрикаXDTO.ЭкспортСхемыXML("http://v8.1c.ru/8.1/data/enterprise/current-config");
	Схема = НаборСхем[0];
	Схема.ОбновитьЭлементDOM();
	
	ЗаписьDOM = Новый ЗаписьDOM;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяФайлаСхемы);
	
	КорневойУзел = Схема.ДокументDOM.ДочерниеУзлы[0];
	
	ИгнорироватьТипы = Новый Массив;
	ИгнорироватьТипы.Добавить("AccountingRegisterExtDimensions");
	ИгнорироватьТипы.Добавить("CatalogTabularSectionRow");
	ИгнорироватьТипы.Добавить("ChartOfAccountsExtDimensionTypesRow");
	ИгнорироватьТипы.Добавить("LeadingCalculationTypesRow");
	ИгнорироватьТипы.Добавить("DocumentTabularSectionRow");
	ИгнорироватьТипы.Добавить("AccountingRegisterRecord");
	ИгнорироватьТипы.Добавить("AccumulationRegisterRecord");
	ИгнорироватьТипы.Добавить("InformationRegisterRecord");
	ИгнорироватьТипы.Добавить("EnumRef");
	
	Если Типы = Неопределено Тогда
		ТолькоУказанныеТипы = Ложь;
	Иначе
		ТолькоУказанныеТипы = Истина;
		
		УказанныеТипы = Новый Соответствие;
		Для каждого Тип Из Типы Цикл
			УказанныеТипы.Вставить(СериализаторXDTO.XMLТип(Тип).ИмяТипа, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Узел Из КорневойУзел.ДочерниеУзлы Цикл
		ДобавитьТипККоду = Ложь;
		
		Если Узел.ЛокальноеИмя <> "complexType" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Узел.ДочерниеУзлы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СодержимоеУзла = Узел.ДочерниеУзлы[0];
		
		Если СодержимоеУзла.ЛокальноеИмя <> "sequence" Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого УзелПоля Из СодержимоеУзла.ДочерниеУзлы Цикл
			Если УзелПоля.ЛокальноеИмя <> "element" Тогда
				Продолжить;
			КонецЕсли;
			
			АтрибутИмя = УзелПоля.Атрибуты.ПолучитьИменованныйЭлемент("name");
			Если ДобавитьТипККоду
				И АтрибутИмя <> Неопределено И АтрибутИмя.ТекстовоеСодержимое = "Code" Тогда
				УзелПоля.УстановитьАтрибут("nillable", "true");
				УзелПоля.УдалитьАтрибут("type");
				Продолжить;
			КонецЕсли;
			
			АтрибутТип = УзелПоля.Атрибуты.ПолучитьИменованныйЭлемент("type");
			Если АтрибутТип <> Неопределено Тогда
				Если Найти(АтрибутТип.ТекстовоеСодержимое, "tns:") = 1 Тогда
					
					ТипБезNSПрефикса = Сред(АтрибутТип.ТекстовоеСодержимое, СтрДлина("tns:") + 1);
					
					Если ТолькоУказанныеТипы Тогда
						Если УказанныеТипы.Получить(ТипБезNSПрефикса) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
					Иначе
						Пропустить = Ложь;
						Для каждого ПрефиксТипа Из ИгнорироватьТипы Цикл
							Если Найти(ТипБезNSПрефикса, ПрефиксТипа) = 1 Тогда
								Пропустить = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Пропустить Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					Если АтрибутИмя <> Неопределено И АтрибутИмя.ТекстовоеСодержимое = "Ref" Тогда
						ДобавитьТипККоду = Истина;
					КонецЕсли;
					
					УзелПоля.УстановитьАтрибут("nillable", "true");
					УзелПоля.УдалитьАтрибут("type");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗаписьDOM.Записать(Схема.ДокументDOM, ЗаписьXML);
	
	ЗаписьXML.Закрыть();
	
	Фабрика = СоздатьФабрикуXDTO(ИмяФайлаСхемы);
	
	Попытка
		УдалитьФайлы(ИмяФайлаСхемы);
	Исключение
		
	КонецПопытки;
	
	Возврат Фабрика;
	
КонецФункции

Процедура ЗаписатьПользователейВXML(КаталогВыгрузки, СохранятьПароли)
	
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(КаталогВыгрузки + "users.xml");
	Запись.ЗаписатьОбъявлениеXML();
	
	Запись.ЗаписатьНачалоЭлемента("Users");
	Запись.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	Запись.ЗаписатьСоответствиеПространстваИмен("ns1", "http://v8.1c.ru/8.1/data/core");
	Запись.ЗаписатьСоответствиеПространстваИмен("dd", "http://v8.1c.ru/misc/datadump/1.0.1.1");
	
	Для каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		ФабрикаXDTO.ЗаписатьXML(Запись, ЗаписатьПользователяВXDTO(Пользователь, СохранятьПароли));
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.Закрыть();
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОВыгрузкеВXML(КаталогВыгрузки, БезДеленияПоФайлам)
	
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(КаталогВыгрузки + "DumpInfo.xml");
	Запись.ЗаписатьОбъявлениеXML();
	
	Запись.ЗаписатьНачалоЭлемента("Info");
	Запись.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	ТипDumpInfo = ФабрикаXDTO.Тип("http://v8.1c.ru/misc/datadump/1.0.1.1", "DumpInfo");
	ТипConfigurationInfo = ФабрикаXDTO.Тип("http://v8.1c.ru/misc/datadump/1.0.1.1", "ConfigurationInfo");
	
	ИнформацияОВыгрузке = ФабрикаXDTO.Создать(ТипDumpInfo);
	Если БезДеленияПоФайлам Тогда
		ИнформацияОВыгрузке.Type = "Solid";
	Иначе
		ИнформацияОВыгрузке.Type = "Split";
	КонецЕсли;
	ИнформацияОВыгрузке.Created = ТекущаяДатаСеанса();
	
	ИнформацияОКонфигурации = ФабрикаXDTO.Создать(ТипConfigurationInfo);
	ИнформацияОКонфигурации.Name = Метаданные.Имя;
	ИнформацияОКонфигурации.Version = Метаданные.Версия;
	ИнформацияОКонфигурации.Vendor = Метаданные.Поставщик;
	ИнформацияОКонфигурации.Presentation = Метаданные.Представление();
	
	ИнформацияОВыгрузке.Configuration = ИнформацияОКонфигурации;
	
	ФабрикаXDTO.ЗаписатьXML(Запись, ИнформацияОВыгрузке);
	
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.Закрыть();
	
КонецПроцедуры

Функция ПолучитьМассивТиповТребующихПодменыСсылок()
	
	Типы = ПолучитьМассивТиповПоставляемыхСправочников();
	
	Типы.Добавить(Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	
	Возврат Типы;
	
КонецФункции

Функция ПолучитьМассивТиповПоставляемыхСправочников()
	
	Типы = Новый Массив;
	Для каждого ТипОбщихДанных Из СтандартныеПодсистемыПереопределяемый.ТипыОбщихДанных() Цикл 
		Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипОбщихДанных) Тогда
			Продолжить;
		КонецЕсли;
		Типы.Добавить(ТипОбщихДанных);
	КонецЦикла;
	
	Возврат Типы;
	
КонецФункции

Функция ФорматНомеров(Знач Значение)
	
	Возврат Формат(Значение, "ЧЦ=4; ЧН=0000; ЧВН=; ЧГ=");
	
КонецФункции

Процедура ОткрытьЗаписьXML(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Запись = Новый ЗаписьXML;
	Если ПараметрыЗаписи.НомерЧасти = Неопределено Тогда
		ПараметрыЗаписи.НомерЧасти = 1;
	Иначе
		ПараметрыЗаписи.НомерЧасти = ПараметрыЗаписи.НомерЧасти + 1;
	КонецЕсли;
	ПараметрыЗаписи.РазмерЧасти = 0;
	
	НомерЧастиСтрокой = ФорматНомеров(ПараметрыЗаписи.НомерЧасти);
	ИмяФайлаВыгрузки = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыЗаписи.ШаблонИмени, НомерЧастиСтрокой);
		
	ПараметрыЗаписи.Запись.ОткрытьФайл(ИмяФайлаВыгрузки);
	ПараметрыЗаписи.Запись.ЗаписатьОбъявлениеXML();
	
	ПараметрыЗаписи.Запись.ЗаписатьНачалоЭлемента("DataDumpPart");
	ПараметрыЗаписи.Запись.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	ПараметрыЗаписи.Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ПараметрыЗаписи.Запись.ЗаписатьСоответствиеПространстваИмен("ns1", "http://v8.1c.ru/8.1/data/core");
	ПараметрыЗаписи.Запись.ЗаписатьСоответствиеПространстваИмен("ns2", "http://v8.1c.ru/8.1/data/enterprise");
	ПараметрыЗаписи.Запись.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/enterprise/current-config");
	
	ПараметрыЗаписи.Запись.ЗаписатьНачалоЭлемента("Data");
	
КонецПроцедуры

Процедура ЗакрытьЗаписьXML(ПараметрыЗаписи, ЕстьПродолжение = Ложь)
	
	ПараметрыЗаписи.Запись.ЗаписатьКонецЭлемента();
	
	ПараметрыЗаписи.Запись.ЗаписатьНачалоЭлемента("PartInfo");
	ПараметрыЗаписи.Запись.ЗаписатьАтрибут("LastPart", XMLСтрока(НЕ ЕстьПродолжение));
	ПараметрыЗаписи.Запись.ЗаписатьКонецЭлемента();
	
	ПараметрыЗаписи.Запись.ЗаписатьКонецЭлемента();
	
	ПараметрыЗаписи.Запись.Закрыть();
	
КонецПроцедуры

Процедура ЗаписатьВXML(Значение, МетаданныеЗначения, Размер, Сериализатор, ПараметрыЗаписи_ЗаменяемыеТипы,
	ПараметрыЗаписи_ПрочиеДанные, ИменаМетаданныхЗаменяемыхТипов, МаксимальныйРазмерЧасти)
	
	Если ИменаМетаданныхЗаменяемыхТипов.Получить(МетаданныеЗначения.ПолноеИмя()) = Неопределено Тогда
		ПараметрыЗаписи = ПараметрыЗаписи_ПрочиеДанные;
	Иначе
		ПараметрыЗаписи = ПараметрыЗаписи_ЗаменяемыеТипы;
	КонецЕсли;
		
	Если ПараметрыЗаписи.РазмерЧасти >= МаксимальныйРазмерЧасти Тогда
		ЗакрытьЗаписьXML(ПараметрыЗаписи, Истина);
		ОткрытьЗаписьXML(ПараметрыЗаписи);
	КонецЕсли;
	
	ПараметрыЗаписи.РазмерЧасти = ПараметрыЗаписи.РазмерЧасти + Размер;
	
	СтандартныеПодсистемыПереопределяемый.ПередВыгрузкойДанных(Значение);
	Сериализатор.ЗаписатьXML(ПараметрыЗаписи.Запись, Значение);
	
КонецПроцедуры

Функция ОценитьРазмерОбъекта(МДОбъекта, Объект)
	
	Размер = 1;
	Для каждого МДТабличнойЧасти Из МДОбъекта.ТабличныеЧасти Цикл
		Размер = Размер + Объект[МДТабличнойЧасти.Имя].Количество();
	КонецЦикла;
	
	Возврат Размер;
	
КонецФункции

Функция ОценитьРазмерНабораЗаписей(МДНабора, Набор)
	
	Возврат Набор.Количество();
	
КонецФункции

Процедура ЗаписатьДанныеВXMLСУказаниемТипов(КаталогВыгрузки, ТипыДляЗамены = Неопределено, МаксимальныйРазмерЧасти = 100000, 
	ВыгружатьПланыОбмена = Ложь)
	
	ИменаМетаданныхЗаменяемыхТипов = Новый Соответствие;
	Если ТипыДляЗамены <> Неопределено Тогда
		Для каждого ТипДляЗамены Из ТипыДляЗамены Цикл
			ИменаМетаданныхЗаменяемыхТипов.Вставить(Метаданные.НайтиПоТипу(ТипДляЗамены).ПолноеИмя(), Истина);
		КонецЦикла;
		
		Фабрика = ПолучитьФабрикуСУказаниемТипов(ТипыДляЗамены);
		Сериализатор = Новый СериализаторXDTO(Фабрика);
	Иначе
		Сериализатор = СериализаторXDTO;
	КонецЕсли;
	
	ТекущийРазмерЧасти = Неопределено;
	ТекущийНомерЧасти = 0;
	
	ПараметрыЗаписи_ЗаменяемыеТипы = Новый Структура("Запись, РазмерЧасти, ШаблонИмени, НомерЧасти");
	ПараметрыЗаписи_ЗаменяемыеТипы.ШаблонИмени = КаталогВыгрузки + "data_common%1.xml";
	
	ОткрытьЗаписьXML(ПараметрыЗаписи_ЗаменяемыеТипы);
	
	ПараметрыЗаписи_ПрочиеДанные = Новый Структура("Запись, РазмерЧасти, ШаблонИмени, НомерЧасти");
	ПараметрыЗаписи_ПрочиеДанные.ШаблонИмени = КаталогВыгрузки + "data_misc%1.xml";
	
	ОткрытьЗаписьXML(ПараметрыЗаписи_ПрочиеДанные);
	
	МДОбщегоРеквизита = Метаданные.ОбщиеРеквизиты.ОбластьДанных;
	
	// Переберем все метаданные
	
	// Константы
	Для каждого МетаданныеКонстанты Из Метаданные.Константы Цикл
		Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МетаданныеКонстанты) Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗначения = Константы[МетаданныеКонстанты.Имя].СоздатьМенеджерЗначения();
		МенеджерЗначения.Прочитать();
		ЗаписатьВXML(МенеджерЗначения, МетаданныеКонстанты, 1, Сериализатор, ПараметрыЗаписи_ЗаменяемыеТипы,
			ПараметрыЗаписи_ПрочиеДанные, ИменаМетаданныхЗаменяемыхТипов, МаксимальныйРазмерЧасти)
	КонецЦикла;
	
	// Ссылочные типы
	
	ВидыОбъектов = Новый Массив;
	ВидыОбъектов.Добавить("Справочники");
	ВидыОбъектов.Добавить("Документы");
	ВидыОбъектов.Добавить("ПланыВидовХарактеристик");
	ВидыОбъектов.Добавить("ПланыСчетов");
	ВидыОбъектов.Добавить("ПланыВидовРасчета");
	ВидыОбъектов.Добавить("БизнесПроцессы");
	ВидыОбъектов.Добавить("Задачи");
	
	Для каждого ВидОбъекта Из ВидыОбъектов Цикл
		МетаданныеКоллекция = Метаданные[ВидОбъекта];
		Для каждого МДОбъекта Из МетаданныеКоллекция Цикл
			Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МДОбъекта) Тогда
				Если ИменаМетаданныхЗаменяемыхТипов.Получить(МДОбъекта.ПолноеИмя()) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	_XMLВыгрузка_Таблица.Ссылка КАК Ссылка
			|ИЗ
			|	" + МДОбъекта.ПолноеИмя() + " КАК _XMLВыгрузка_Таблица";
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				
				Размер = ОценитьРазмерОбъекта(МДОбъекта, Объект);
				ЗаписатьВXML(Объект, МДОбъекта, Размер, Сериализатор, ПараметрыЗаписи_ЗаменяемыеТипы,
					ПараметрыЗаписи_ПрочиеДанные, ИменаМетаданныхЗаменяемыхТипов, МаксимальныйРазмерЧасти)
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Регистры кроме независимых регистров сведений
	ВидыТаблиц = Новый Массив;
	ВидыТаблиц.Добавить("РегистрыНакопления");
	ВидыТаблиц.Добавить("РегистрыРасчета");
	ВидыТаблиц.Добавить("РегистрыБухгалтерии");
	ВидыТаблиц.Добавить("РегистрыСведений");
	ВидыТаблиц.Добавить("Последовательности");
	Для каждого ВидТаблицы Из ВидыТаблиц Цикл
		МетаданныеКоллекция = Метаданные[ВидТаблицы];
		МенеджерВида = Вычислить(ВидТаблицы);
		Для каждого МДРегистра Из МетаданныеКоллекция Цикл
			Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МДРегистра) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВидТаблицы = "РегистрыСведений"
				И МДРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
				
				Продолжить;
			КонецЕсли;
			
			МенеджерТипа = МенеджерВида[МДРегистра.Имя];
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	_XMLВыгрузка_Таблица.Регистратор КАК Регистратор
			|ИЗ
			|	" + МДРегистра.ПолноеИмя() + " КАК _XMLВыгрузка_Таблица";
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				НаборЗаписей = МенеджерТипа.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				НаборЗаписей.Прочитать();
				
				Размер = ОценитьРазмерНабораЗаписей(МДРегистра, НаборЗаписей);
				ЗаписатьВXML(НаборЗаписей, МДРегистра, Размер, Сериализатор, ПараметрыЗаписи_ЗаменяемыеТипы,
					ПараметрыЗаписи_ПрочиеДанные, ИменаМетаданныхЗаменяемыхТипов, МаксимальныйРазмерЧасти)
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ОбщиеРегистрыСведений = РаботаВМоделиСервиса.ОбщиеРегистрыСведенийСРазделеннымиДанными();
	ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	// Независимые регистры сведений
	Для каждого МДРегистра Из Метаданные.РегистрыСведений Цикл
		
		Если МДРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МДРегистра) Тогда
			Если ОбщиеРегистрыСведений.Найти(МДРегистра.Имя) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ОбщийРегистр = Истина;
		Иначе
			ОбщийРегистр = Ложь;
		КонецЕсли;
		
		МенеджерТипа = РегистрыСведений[МДРегистра.Имя];
		
		НаборЗаписей = МенеджерТипа.СоздатьНаборЗаписей();
		Если ОбщийРегистр Тогда
			НаборЗаписей.Отбор.ОбластьДанных.Установить(ОбластьДанных);
		КонецЕсли;
		НаборЗаписей.Прочитать();
		
		Размер = ОценитьРазмерНабораЗаписей(МДРегистра, НаборЗаписей);
		ЗаписатьВXML(НаборЗаписей, МДРегистра, Размер, Сериализатор, ПараметрыЗаписи_ЗаменяемыеТипы,
			ПараметрыЗаписи_ПрочиеДанные, ИменаМетаданныхЗаменяемыхТипов, МаксимальныйРазмерЧасти)
	КонецЦикла;
		
	Если ВыгружатьПланыОбмена Тогда
		Для каждого МДОбъекта Из Метаданные.ПланыОбмена Цикл
			Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МДОбъекта) Тогда
				Продолжить;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	_XMLВыгрузка_Таблица.Ссылка КАК Ссылка
			|ИЗ
			|	" + МДОбъекта.ПолноеИмя() + " КАК _XMLВыгрузка_Таблица
			|ГДЕ
			|	_XMLВыгрузка_Таблица.Ссылка <> &ЭтотУзел";
			Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена[МДОбъекта.Имя].ЭтотУзел());
			
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				
				Размер = ОценитьРазмерОбъекта(МДОбъекта, Объект);
				ЗаписатьВXML(Объект, МДОбъекта, Размер, Сериализатор, ПараметрыЗаписи_ЗаменяемыеТипы,
				ПараметрыЗаписи_ПрочиеДанные, ИменаМетаданныхЗаменяемыхТипов, МаксимальныйРазмерЧасти)
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
		
	ЗакрытьЗаписьXML(ПараметрыЗаписи_ЗаменяемыеТипы);
	ЗакрытьЗаписьXML(ПараметрыЗаписи_ПрочиеДанные);
	
КонецПроцедуры

// Возвращает таблицу с правилами замен
//
// Возвращаемое значение:
//  ТаблицаЗначений с колонками
//   ИмяТипаXML - строка, XMLТип(Тип).ИмяТипа
//   Тип - Тип, возвращаемый вызовом ТипыОбщихДанных() из подмножества Справочники.ТипВсеСсылки()
//   ОбщиеДанные - всегда Истина, не используется
//   СоответствиеСсылок - Соответствие
//   ОбратноеСоответствие - Соответствие
//   ТекстЗапроса - строка запроса, возвращающего для текущего типа 3 колонки: 		
//		Коды.Ссылка КАК ИсходнаяСсылка,
//		Коды.Код КАК Код,
//		ТаблицаСправочника.Ссылка КАК ОбщаяСсылка
//
Функция ПодготовитьСловарьЗамен()
	
	СловарьЗамен = Новый ТаблицаЗначений;
	СловарьЗамен.Колонки.Добавить("ИмяТипаXML", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)));
	СловарьЗамен.Колонки.Добавить("Тип", Новый ОписаниеТипов("Тип"));
	СловарьЗамен.Колонки.Добавить("ОбщиеДанные", Новый ОписаниеТипов("Булево"));
	СловарьЗамен.Колонки.Добавить("СоответствиеСсылок", Новый ОписаниеТипов("Соответствие"));
	СловарьЗамен.Колонки.Добавить("ОбратноеСоответствие", Новый ОписаниеТипов("Соответствие"));
	СловарьЗамен.Колонки.Добавить("ТекстЗапроса", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	СловарьЗамен.Колонки.Добавить("ОбщиеСсылки", Новый ОписаниеТипов("Массив"));
	
	Для каждого ТипОбщихДанных Из СтандартныеПодсистемыПереопределяемый.ТипыОбщихДанных() Цикл
		Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипОбщихДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьТипЗамены(СловарьЗамен, ТипОбщихДанных);
	КонецЦикла;

	Возврат СловарьЗамен;
	
КонецФункции

Процедура ДобавитьТипЗамены(Знач СловарьЗамен, Знач ТипОбщихДанных)
			
		ОписаниеТипаЗамены = СловарьЗамен.Добавить();
		
		ОписаниеТипаЗамены.ОбщиеДанные = Истина;
		ОписаниеТипаЗамены.Тип = ТипОбщихДанных;
		
		ОписаниеТипаЗамены.ИмяТипаXML = СериализаторXDTO.XMLТип(ОписаниеТипаЗамены.Тип).ИмяТипа;
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ОписаниеТипаЗамены.Тип);
		МетаданныеОбщегоТипа = Метаданные.НайтиПоТипу(ТипОбщихДанных);
		
		Если МетаданныеОбщегоТипа.Иерархический 
			И МетаданныеОбщегоТипа.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			
			УсловиеНаГруппы = Символы.ПС + Символы.Таб + Символы.Таб + "И Коды.ЭтоГруппа = ТаблицаСправочника.ЭтоГруппа";
			
		Иначе
			
			УсловиеНаГруппы = "";
			
		КонецЕсли;
		
		ОписаниеТипаЗамены.ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Коды.Ссылка КАК ИсходнаяСсылка,
		|	Коды.Код КАК Код,
		|	ТаблицаСправочника.Ссылка КАК ОбщаяСсылка
		|ИЗ
		|	Коды КАК Коды
		|		ЛЕВОЕ СОЕДИНЕНИЕ " + МетаданныеОбщегоТипа.ПолноеИмя() + " КАК ТаблицаСправочника
		|		ПО Коды.Код = ТаблицаСправочника.Код" + УсловиеНаГруппы + "
		|ГДЕ
		|	Коды.Ссылка ССЫЛКА " + МетаданныеТипа.ПолноеИмя();
		
КонецПроцедуры

// Возвращает пустую ТаблицуЗначений
//
// Возвращаемое значение:
//  ТаблицаЗначений с колонками
//    Тип
//    СоответствиеСсылок
Функция ПодготовитьФрагментСловаряЗамен()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Тип", Новый ОписаниеТипов("Тип"));
	Результат.Колонки.Добавить("СоответствиеСсылок", Новый ОписаниеТипов("Соответствие"));
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьФрагментВСловарьЗамен(Знач СловарьЗамен, Знач Фрагмент)
	
	ПустойУИД = СериализаторXDTO.XMLСтрока(Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Для каждого СтрокаФрагмента Из Фрагмент Цикл
		СтрокаСловаря = СловарьЗамен.Найти(СтрокаФрагмента.Тип, "Тип");
		Если СтрокаСловаря = Неопределено Тогда
			СтрокаСловаря = СловарьЗамен.Добавить();
			СтрокаСловаря.Тип = СтрокаФрагмента.Тип;
			СтрокаСловаря.ИмяТипаXML = СериализаторXDTO.XMLТип(СтрокаСловаря.Тип).ИмяТипа;
			СтрокаСловаря.ОбщиеДанные = Истина;
		КонецЕсли;
		
		СтрокаСловаря.СоответствиеСсылок = СтрокаФрагмента.СоответствиеСсылок;
			
		СтрокаСловаря.ОбратноеСоответствие = Новый Соответствие;
		СтрокаСловаря.ОбратноеСоответствие.Вставить(ПустойУИД, ПустойУИД);
		
		Для каждого КлючИЗначение Из СтрокаСловаря.СоответствиеСсылок Цикл
			ИсходнаяСсылкаXML = СериализаторXDTO.XMLСтрока(КлючИЗначение.Значение);
			НайденнаяСсылкаXML = СериализаторXDTO.XMLСтрока(КлючИЗначение.Ключ);
			СтрокаСловаря.ОбратноеСоответствие.Вставить(ИсходнаяСсылкаXML, НайденнаяСсылкаXML);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеСПодменойСсылок(Знач КаталогВыгрузки)
	
	СловарьЗамен = ПодготовитьСловарьЗамен();
	
	// Заполняем подстановки для Справочник.ИдентификаторыОбъектовМетаданных
	ФрагментСловаряЗамен = ПодготовитьФрагментСловаряЗамен();
	Справочники.ИдентификаторыОбъектовМетаданных.ДополнитьСловарьЗаменСсылокИдентификаторовТекущихИЗагружаемыхДанных(ФрагментСловаряЗамен, КаталогВыгрузки);
	ДобавитьФрагментВСловарьЗамен(СловарьЗамен, ФрагментСловаряЗамен);
	
	ПустойУИД = СериализаторXDTO.XMLСтрока(Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Коллизии = Новый ТаблицаЗначений;
	Коллизии.Колонки.Добавить("ИсходнаяСсылка", Справочники.ТипВсеСсылки());
	Коллизии.Колонки.Добавить("Код", Новый ОписаниеТипов("Число, Строка", 
		Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Неотрицательный), Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	Коллизии.Колонки.Добавить("НайденнаяСсылка", Справочники.ТипВсеСсылки());
	Коллизии.Индексы.Добавить("ИсходнаяСсылка, НайденнаяСсылка");
	
	РазорванныеСсылки = Новый ТаблицаЗначений;
	РазорванныеСсылки.Колонки.Добавить("ИсходнаяСсылка", Справочники.ТипВсеСсылки());
	РазорванныеСсылки.Колонки.Добавить("Код", Новый ОписаниеТипов("Число, Строка", 
		Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Неотрицательный), Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
		
	ТекстЗапросаСозданияТаблицыКодов =
	"ВЫБРАТЬ
	|	Коды.Ссылка КАК Ссылка,
	|	Коды.Код КАК Код,
	|	Коды.ЭтоГруппа КАК ЭтоГруппа
	|ПОМЕСТИТЬ Коды
	|ИЗ
	|	&ТаблицаКодов КАК Коды
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	ФайлыОбщихДанных = НайтиФайлы(КаталогВыгрузки, "data_common*.xml", Ложь);
	Для каждого ФайлОбщихДанных Из ФайлыОбщихДанных Цикл
		
		ТаблицаКодов = ПолучитьТаблицуКодовОбщихДанных(ФайлОбщихДанных.ПолноеИмя);
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = ТекстЗапросаСозданияТаблицыКодов;
		Запрос.УстановитьПараметр("ТаблицаКодов", ТаблицаКодов);
		Запрос.Выполнить();
		
		Для каждого ОписаниеТипаЗамены Из СловарьЗамен Цикл
			Если ПустаяСтрока(ОписаниеТипаЗамены.ТекстЗапроса) Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеТипаЗамены.СоответствиеСсылок = Новый Соответствие;
			
			ОписаниеТипаЗамены.ОбратноеСоответствие = Новый Соответствие;
			ОписаниеТипаЗамены.ОбратноеСоответствие.Вставить(ПустойУИД, ПустойУИД);
			
			СсылкиДляПодбора = Новый Массив;
			
			Запрос.Текст = ОписаниеТипаЗамены.ТекстЗапроса;
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ИсходнаяСсылкаXML = СериализаторXDTO.XMLСтрока(Выборка.ИсходнаяСсылка.УникальныйИдентификатор());
				
				Если Выборка.ОбщаяСсылка = NULL Тогда
					СтрокаОшибки = РазорванныеСсылки.Добавить();
					СтрокаОшибки.ИсходнаяСсылка = Выборка.ИсходнаяСсылка;
					СтрокаОшибки.Код = Выборка.Код;
					
					ОписаниеТипаЗамены.ОбратноеСоответствие.Вставить(
						ИсходнаяСсылкаXML, ИсходнаяСсылкаXML);
				Иначе
					НайденнаяСсылкаXML = СериализаторXDTO.XMLСтрока(Выборка.ОбщаяСсылка.УникальныйИдентификатор());
					
					СуществующееЗначение = ОписаниеТипаЗамены.СоответствиеСсылок.Получить(Выборка.ОбщаяСсылка);
					Если СуществующееЗначение <> Неопределено Тогда
						Если Коллизии.НайтиСтроки(Новый Структура("ИсходнаяСсылка, НайденнаяСсылка", 
							СуществующееЗначение, Выборка.ОбщаяСсылка)).Количество() = 0 Тогда
							
							Коллизия = Коллизии.Добавить();
							Коллизия.ИсходнаяСсылка = СуществующееЗначение;
							Коллизия.Код = Выборка.Код;
							Коллизия.НайденнаяСсылка = Выборка.ОбщаяСсылка;
						КонецЕсли;
						
						Коллизия = Коллизии.Добавить();
						Коллизия.ИсходнаяСсылка = Выборка.ИсходнаяСсылка;
						Коллизия.Код = Выборка.Код;
						Коллизия.НайденнаяСсылка = Выборка.ОбщаяСсылка;
					Иначе
						ОписаниеТипаЗамены.СоответствиеСсылок.Вставить(Выборка.ОбщаяСсылка, Выборка.ИсходнаяСсылка);
						ОписаниеТипаЗамены.ОбратноеСоответствие.Вставить(ИсходнаяСсылкаXML, НайденнаяСсылкаXML);
						
						ОписаниеТипаЗамены.ОбщиеСсылки.Добавить(Выборка.ОбщаяСсылка);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		// Дополнительные замены прикладных конфигураций
		ФрагментСловаряЗамен = ПодготовитьФрагментСловаряЗамен();
		ВыгрузкаЗагрузкаДанныхПереопределяемый.ДополнитьСловарьЗаменПоОбщимДанным(ФрагментСловаряЗамен, ФайлОбщихДанных.ПолноеИмя);
		ДобавитьФрагментВСловарьЗамен(СловарьЗамен, ФрагментСловаряЗамен);
		
		МаскаПоиска = "data_*.xml";
		ВсеФайлыДанных = НайтиФайлы(КаталогВыгрузки, МаскаПоиска, Ложь);
		Для каждого ФайлДанных Из ВсеФайлыДанных Цикл
			
			// Замена ссылок
			
			Чтение = Новый ЧтениеТекста(ФайлДанных.ПолноеИмя);
			ИмяОбработанногоФайла = ПолучитьИмяВременногоФайла();
			Запись = Новый ЗаписьТекста(ИмяОбработанногоФайла);
			
			// Константы для разбора текста
			НачалоТипа = "xsi:type=""v8:";
			ДлинаНачалаТипа = СтрДлина(НачалоТипа);
			КонецТипа = """>";
			ДлинаКонцаТипа = СтрДлина(КонецТипа);
			
			ИсходнаяСтрока = Чтение.ПрочитатьСтроку();
			Пока ИсходнаяСтрока <> Неопределено Цикл
				
				ОстатокСтроки = Неопределено;
				
				ТекущаяПозиция = 1;
				ПозицияТипа = Найти(ИсходнаяСтрока, НачалоТипа);
				Пока ПозицияТипа > 0 Цикл
					
					Запись.Записать(Сред(ИсходнаяСтрока, ТекущаяПозиция, ПозицияТипа - 1 + ДлинаНачалаТипа));
					
					ТекущаяПозиция = ТекущаяПозиция + ПозицияТипа + ДлинаНачалаТипа;
					
					Если ОстатокСтроки = Неопределено Тогда
						ОстатокСтроки = Сред(ИсходнаяСтрока, ПозицияТипа + ДлинаНачалаТипа);
					Иначе
						ОстатокСтроки = Сред(ОстатокСтроки, ПозицияТипа + ДлинаНачалаТипа);
					КонецЕсли;
					ПозицияТипа = Найти(ОстатокСтроки, НачалоТипа);
					
					ПозицияКонцаТипа = Найти(ОстатокСтроки, КонецТипа);
					Если ПозицияКонцаТипа = 0 Тогда
						Прервать;
					КонецЕсли;
					
					ИмяТипа = Лев(ОстатокСтроки, ПозицияКонцаТипа - 1);
					ОписаниеТипаЗамены = СловарьЗамен.Найти(ИмяТипа, "ИмяТипаXML");
					Если ОписаниеТипаЗамены = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Запись.Записать(ИмяТипа);
					Запись.Записать(КонецТипа);
					
					ИсходнаяСсылкаXML = Сред(ОстатокСтроки, ПозицияКонцаТипа + ДлинаКонцаТипа, 36);
					НайденнаяСсылкаXML = ОписаниеТипаЗамены.ОбратноеСоответствие.Получить(ИсходнаяСсылкаXML);
					Если НайденнаяСсылкаXML = Неопределено Тогда
						Запись.Записать(ИсходнаяСсылкаXML);
					Иначе
						Запись.Записать(НайденнаяСсылкаXML);
					КонецЕсли;
					
					ТекущаяПозиция = ТекущаяПозиция + ПозицияКонцаТипа - 1 + ДлинаКонцаТипа + 36;
					ОстатокСтроки = Сред(ОстатокСтроки, ПозицияКонцаТипа + ДлинаКонцаТипа + 36);
					ПозицияТипа = Найти(ОстатокСтроки, НачалоТипа);
					
				КонецЦикла;
				
				Если ОстатокСтроки <> Неопределено Тогда
					Запись.ЗаписатьСтроку(ОстатокСтроки);
				Иначе
					Запись.ЗаписатьСтроку(Сред(ИсходнаяСтрока, ТекущаяПозиция));
				КонецЕсли;
				
				ИсходнаяСтрока = Чтение.ПрочитатьСтроку();
			КонецЦикла;
			
			Чтение.Закрыть();
			
			Запись.Закрыть();
			
			УдалитьФайлы(ФайлДанных.ПолноеИмя);
			ПереместитьФайл(ИмяОбработанногоФайла, ФайлДанных.ПолноеИмя);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Загрузка данных
	ЗагрузитьДанныеЧерезXDTOСериализатор(КаталогВыгрузки);
	
КонецПроцедуры

Процедура ЗагрузитьДанныеЧерезXDTOСериализатор(Знач КаталогВыгрузки, Знач МаскаПоиска = Неопределено)

	Типы = Новый Массив;
	СтандартныеПодсистемыПереопределяемый.ПолучитьНезагружаемыеВОбластиДанныхТипы(Типы);
	РаботаВМоделиСервисаПереопределяемый.ПолучитьНезагружаемыеВОбластиДанныхТипы(Типы);
	ИсключаемыеТипы = Новый Соответствие;
	Для каждого Тип Из Типы Цикл
		ИсключаемыеТипы.Вставить(Тип, Истина);
	КонецЦикла;
	
	Если МаскаПоиска = Неопределено Тогда
		МаскаПоиска = "data_*.xml";
	КонецЕсли;
	
	МДОбщегоРеквизита = Метаданные.ОбщиеРеквизиты.ОбластьДанных;
	
	ТипыПлановОбмена = Новый Соответствие;
	Для каждого МетаданныеПланаОбмена Из Метаданные.ПланыОбмена Цикл
		Если НЕ ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(МетаданныеПланаОбмена) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипыПлановОбмена.Вставить(Тип("ПланОбменаОбъект." + МетаданныеПланаОбмена.Имя), Истина);
	КонецЦикла;
	
	ТипыОбщихРегистровСведений = Новый Соответствие;
	Для каждого ИмяРегистра Из РаботаВМоделиСервиса.ОбщиеРегистрыСведенийСРазделеннымиДанными() Цикл
		ТипыОбщихРегистровСведений.Вставить(Тип("РегистрСведенийНаборЗаписей." + ИмяРегистра), Истина);
	КонецЦикла;
	
	// Добавим в исключаемые типы все общие данные кроме общих регистров сведений
	Для каждого ЭлементСостава Из МДОбщегоРеквизита.Состав Цикл
		Если ОбщегоНазначения.ЭлементСоставаОбщегоРеквизитаИспользуется(ЭлементСостава, МДОбщегоРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Метаданные.РегламентныеЗадания.Содержит(ЭлементСостава.Метаданные) Тогда
			Продолжить;
		ИначеЕсли Метаданные.Константы.Содержит(ЭлементСостава.Метаданные) Тогда
			ИмяТипа = "КонстантаМенеджерЗначения";
		ИначеЕсли Метаданные.Справочники.Содержит(ЭлементСостава.Метаданные) Тогда
			ИмяТипа = "СправочникОбъект";
		ИначеЕсли Метаданные.Документы.Содержит(ЭлементСостава.Метаданные) Тогда
			ИмяТипа = "ДокументОбъект";
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ЭлементСостава.Метаданные) Тогда
			ИмяТипа = "ПланВидовХарактеристикОбъект";
		ИначеЕсли Метаданные.ПланыСчетов.Содержит(ЭлементСостава.Метаданные) Тогда
			ИмяТипа = "ПланСчетовОбъект";
		ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ЭлементСостава.Метаданные) Тогда
			ИмяТипа = "ПланВидовРасчетаОбъект";
		ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ЭлементСостава.Метаданные) Тогда
			ИмяТипа = "БизнесПроцессОбъект";
		ИначеЕсли Метаданные.Задачи.Содержит(ЭлементСостава.Метаданные) Тогда
			ИмяТипа = "ЗадачаОбъект";
		ИначеЕсли Метаданные.ПланыОбмена.Содержит(ЭлементСостава.Метаданные) Тогда
			ИмяТипа = "ПланОбменаОбъект";
		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ЭлементСостава.Метаданные) Тогда
			ИмяТипа = "РегистрНакопленияНаборЗаписей";
		ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ЭлементСостава.Метаданные) Тогда
			ИмяТипа = "РегистрБухгалтерииНаборЗаписей";
		ИначеЕсли Метаданные.Последовательности.Содержит(ЭлементСостава.Метаданные) Тогда
			ИмяТипа = "ПоследовательностьНаборЗаписей";
		Иначе
			ИмяТипа = Неопределено;
			// Регистры сведений и расчета обработаем отдельно
			Если Метаданные.РегистрыСведений.Содержит(ЭлементСостава.Метаданные) Тогда
				ТипДанных = Тип("РегистрСведенийНаборЗаписей." + ЭлементСостава.Метаданные.Имя);
				Если ТипыОбщихРегистровСведений.Получить(ТипДанных) = Неопределено Тогда
					ИсключаемыеТипы.Вставить(ТипДанных, Истина);
				КонецЕсли;
			ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ЭлементСостава.Метаданные) Тогда
				ИсключаемыеТипы.Вставить(Тип("РегистрРасчетаНаборЗаписей." + ЭлементСостава.Метаданные.Имя), Истина);
				Для каждого МетаданныеПерерасчета Из ЭлементСостава.Метаданные.Перерасчеты Цикл
					ИсключаемыеТипы.Вставить(Тип("ПерерасчетНаборЗаписей." + МетаданныеПерерасчета.Имя), Истина);
				КонецЦикла;
			Иначе
				ШаблонСообщения = НСтр("ru = 'Неожиданный объект метаданных в составе общего реквизита %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, 
					ЭлементСостава.Метаданные.ПолноеИмя());
				ВызватьИсключение(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяТипа <> Неопределено Тогда
			ИсключаемыеТипы.Вставить(Тип(ИмяТипа + "." + ЭлементСостава.Метаданные.Имя), Истина);
		КонецЕсли;
	КонецЦикла;
	
	ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	
	ВсеФайлыДанных = НайтиФайлы(КаталогВыгрузки, МаскаПоиска, Ложь);
	
	РежимОтладки = Ложь;
	
	Пока Истина Цикл
		
		Попытка
		
			Для каждого ФайлДанных Из ВсеФайлыДанных Цикл
				Чтение = Новый ЧтениеXML;
				Чтение.ОткрытьФайл(ФайлДанных.ПолноеИмя);
				Чтение.ПерейтиКСодержимому();
				
				Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента
					ИЛИ Чтение.Имя <> "DataDumpPart" Тогда
					
					ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента Data.'"));
				КонецЕсли;
				
				Если РежимОтладки Тогда
					СоответствияПространствИмен = Чтение.КонтекстПространствИмен.СоответствияПространствИмен();
				КонецЕсли;
				
				Если НЕ Чтение.Прочитать() Тогда
					ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Обнаружено завершение файла.'"));
				КонецЕсли;
				
				Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента
					ИЛИ Чтение.Имя <> "Data" Тогда
					
					ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента Data.'"));
				КонецЕсли;
				
				Если НЕ Чтение.Прочитать() Тогда
					ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Обнаружено завершение файла.'"));
				КонецЕсли;
				
				Пока Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
					Если НЕ СериализаторXDTO.ВозможностьЧтенияXML(Чтение) Тогда
						ОшибкаОпределенияТипаПриЧтении(Чтение);
					КонецЕсли;
					
					Если РежимОтладки Тогда
						ЗаписьФрагмента = Новый ЗаписьXML;
						ЗаписьФрагмента.УстановитьСтроку();
						
						ИмяУзлаФрагмента = Чтение.Имя;
						
						КорневойУзел = Истина;
						
						Пока НЕ (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента
								И Чтение.Имя = ИмяУзлаФрагмента) Цикл
								
							ЗаписьФрагмента.ЗаписатьТекущий(Чтение);
							
							Если КорневойУзел Тогда
								ПрефиксыФрагмента = ЗаписьФрагмента.КонтекстПространствИмен.СоответствияПространствИмен();
								Для каждого ПрефиксИПространство Из СоответствияПространствИмен Цикл
									Если ПрефиксыФрагмента.Получить(ПрефиксИПространство.Ключ) = Неопределено Тогда
										ЗаписьФрагмента.ЗаписатьСоответствиеПространстваИмен(ПрефиксИПространство.Ключ, ПрефиксИПространство.Значение);
									КонецЕсли;
								КонецЦикла;
								КорневойУзел = Ложь;
							КонецЕсли;
							
							Чтение.Прочитать();
						КонецЦикла;
						ЗаписьФрагмента.ЗаписатьТекущий(Чтение);
						Чтение.Прочитать();
						
						Фрагмент = ЗаписьФрагмента.Закрыть();
						
						ЧтениеФрагмента = Новый ЧтениеXML;
						ЧтениеФрагмента.УстановитьСтроку(Фрагмент);
						Попытка
							Данные = СериализаторXDTO.ПрочитатьXML(ЧтениеФрагмента);
						Исключение
							ЗаписьЖурналаРегистрации("ВыгрузкаЗагрузкаДанных.ОшибкаЧтенияXML", УровеньЖурналаРегистрации.Ошибка, ,
								Фрагмент, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							ВызватьИсключение;
						КонецПопытки;
					Иначе
						Данные = СериализаторXDTO.ПрочитатьXML(Чтение);
					КонецЕсли;
					
					ТипЗагруженногоЗначения = ТипЗнч(Данные);
					
					Если ИсключаемыеТипы.Получить(ТипЗагруженногоЗначения) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ЭтоПланОбмена = Ложь;
					Если ТипыПлановОбмена.Получить(ТипЗагруженногоЗначения) <> Неопределено Тогда
						ЭтоПланОбмена = Истина;
						Данные.ОбластьДанных = ОбластьДанных;
					ИначеЕсли ТипыОбщихРегистровСведений.Получить(ТипЗагруженногоЗначения) <> Неопределено Тогда
						Данные.Отбор.ОбластьДанных.Установить(ОбластьДанных);
						
						Для каждого Запись Из Данные Цикл
							Запись.ОбластьДанных = ОбластьДанных;
						КонецЦикла;
					КонецЕсли;
					
					Если НЕ ЭтоПланОбмена Тогда
						Данные.ОбменДанными.Загрузка = Истина;
					КонецЕсли;
					СтандартныеПодсистемыПереопределяемый.ПередЗагрузкойДанных(Данные);
					Данные.Записать();
				КонецЦикла;
			КонецЦикла;
			
		Исключение
			ЗаписьЖурналаРегистрации("ВыгрузкаЗагрузкаДанных.ОшибкаЧтенияXML", УровеньЖурналаРегистрации.Ошибка, , ,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Если НЕ РежимОтладки Тогда
				РежимОтладки = Истина;
				Продолжить;
			КонецЕсли;
			
			ВызватьИсключение;
		КонецПопытки;
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьПользователейИзXML(Знач КаталогВыгрузки)
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(КаталогВыгрузки + "users.xml");
	Чтение.ПерейтиКСодержимому();
		
	Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		ИЛИ Чтение.Имя <> "Users" Тогда
		
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента Users.'"));
	КонецЕсли;
	
	Если НЕ Чтение.Прочитать() Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Обнаружено завершение файла.'"));
	КонецЕсли;
	
	ТипInfoBaseUser = ФабрикаXDTO.Тип("http://v8.1c.ru/misc/datadump/1.0.1.1", "InfoBaseUser");
	
	СоответствиеИдентификаторов = Новый Соответствие;
	
	ТаблицаПользователей = Новый ТаблицаЗначений;
	ТаблицаПользователей.Колонки.Добавить("Пользователь");
	ТаблицаПользователей.Колонки.Добавить("Администратор", Новый ОписаниеТипов("Булево"));
	ТаблицаПользователей.Колонки.Добавить("ПользовательXDTO");
	
	Пока Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		ПользовательXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение, ТипInfoBaseUser);
		
		Пользователь = ОбновитьПользователяИзXDTO(ПользовательXDTO);
		
		Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			Пользователь.ПоказыватьВСпискеВыбора = Истина;
		КонецЕсли;
		
		ОбработатьРолиПользователяПриЗагрузкеИзДругойМодели(Пользователь);
		
		СтрокаПользователя = ТаблицаПользователей.Добавить();
		СтрокаПользователя.Пользователь = Пользователь;
		СтрокаПользователя.Администратор = Пользователь.Роли.Содержит(Метаданные.Роли.ПолныеПрава);
		СтрокаПользователя.ПользовательXDTO = ПользовательXDTO;
	КонецЦикла;
	
	Чтение.Закрыть();
	
	ТаблицаПользователей.Сортировать("Администратор УБЫВ");
	Если ТаблицаПользователей.Количество() > 0 Тогда
		Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено()
			И НЕ ТаблицаПользователей[0].Администратор Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В списке пользователей нет ни одного администратора. Загрузка списка пользователей не выполнена.'"));
		Иначе
				
			Для каждого СтрокаПользователя Из ТаблицаПользователей Цикл
				ПользователиСлужебный.ЗаписатьПользователяИнформационнойБазы(СтрокаПользователя.Пользователь);
				СоответствиеИдентификаторов.Вставить(СтрокаПользователя.ПользовательXDTO.UUID,
					СтрокаПользователя.Пользователь.УникальныйИдентификатор);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СоответствиеИдентификаторов;
	
КонецФункции

Функция ПолучитьТаблицуКодовОбщихДанных(Знач ИмяФайлаОбщихДанных)
	
	ИмяФайлыТаблицыКодов = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьТаблицы = Новый ЗаписьXML;
	ЗаписьТаблицы.ОткрытьФайл(ИмяФайлыТаблицыКодов);
	
	Преобразование = ОбщегоНазначенияПовтИсп.ПолучитьПреобразованиеXSLИзОбщегоМакета("ИзвлечениеКодовОбщихДанных");
	Преобразование.ПреобразоватьИзФайла(ИмяФайлаОбщихДанных, ЗаписьТаблицы);
	
	ЗаписьТаблицы.Закрыть();
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ИмяФайлыТаблицыКодов);
	Чтение.ПерейтиКСодержимому();
	
	Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		ИЛИ Чтение.Имя <> "Data" Тогда
		
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента Data.'"));
	КонецЕсли;
	
	Если НЕ Чтение.Прочитать() Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Обнаружено завершение файла.'"));
	КонецЕсли;
	
	ТаблицаКодов = СериализаторXDTO.ПрочитатьXML(Чтение);
	
	Чтение.Закрыть();
	
	Попытка
		УдалитьФайлы(ИмяФайлыТаблицыКодов);
	Исключение
		
	КонецПопытки;
	
	Возврат ТаблицаКодов;
	
КонецФункции

Процедура ОбработатьРолиПользователяПриЗагрузкеИзДругойМодели(Пользователь)
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Удаление недоступных ролей.
		НедоступныеРоли = ПользователиСлужебный.НедоступныеРолиПоТипуПользователей(
			Перечисления.ТипыПользователей.ПользовательОбластиДанных);
		
		Для каждого КлючИЗначение Из НедоступныеРоли Цикл
			Роль = Метаданные.Роли.Найти(КлючИЗначение.Ключ);
			
			Если Роль <> Неопределено
			   И Пользователь.Роли.Содержит(Роль) Тогда
				
				Пользователь.Роли.Удалить(Роль);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Добавление роли АдминистраторСистемы пользователю с ролью ПолныеПрава.
		Если Пользователь.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			Пользователь.Роли.Добавить(Метаданные.Роли.АдминистраторСистемы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьПользователейПослеЗагрузкиИзДругойМодели(Знач СоответствиеИдентификаторов)
	
	СтарыеИдентификаторы = Новый Массив;
	Для каждого КлючИЗначение Из СоответствиеИдентификаторов Цикл
		СтарыеИдентификаторы.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ В(&СтарыеИдентификаторы)";
	Запрос.УстановитьПараметр("СтарыеИдентификаторы", СтарыеИдентификаторы);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПользовательОбъект.ОбменДанными.Загрузка = Истина;
		ПользовательОбъект.ИдентификаторПользователяСервиса = Неопределено;
		ПользовательОбъект.ИдентификаторПользователяИБ = СоответствиеИдентификаторов.Получить(Выборка.ИдентификаторПользователяИБ);
		ПользовательОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Запись / чтение пользователей ИБ в / из XML

Функция ЗаписатьПользователяВXDTO(Знач Пользователь, Знач СохранятьПароль = Ложь, Знач СохранятьРазделение = Ложь)
	
	ТипInfoBaseUser = ФабрикаXDTO.Тип("http://v8.1c.ru/misc/datadump/1.0.1.1", "InfoBaseUser");
	ТипUserRoles = ФабрикаXDTO.Тип("http://v8.1c.ru/misc/datadump/1.0.1.1", "UserRoles");
	
	ПользовательXDTO = ФабрикаXDTO.Создать(ТипInfoBaseUser);
	ПользовательXDTO.OSAuthentication = Пользователь.АутентификацияОС;
	ПользовательXDTO.StandardAuthentication = Пользователь.АутентификацияСтандартная;
	ПользовательXDTO.CannotChangePassword = Пользователь.ЗапрещеноИзменятьПароль;
	ПользовательXDTO.Name = Пользователь.Имя;
	Если Пользователь.ОсновнойИнтерфейс <> Неопределено Тогда
		ПользовательXDTO.DefaultInterface = Пользователь.ОсновнойИнтерфейс.Имя;
	Иначе
		ПользовательXDTO.DefaultInterface = "";
	КонецЕсли;
	ПользовательXDTO.PasswordIsSet = Пользователь.ПарольУстановлен;
	ПользовательXDTO.ShowInList = Пользователь.ПоказыватьВСпискеВыбора;
	ПользовательXDTO.FullName = Пользователь.ПолноеИмя;
	ПользовательXDTO.OSUser = Пользователь.ПользовательОС;
	Если СохранятьРазделение Тогда
		ПользовательXDTO.DataSeparation = СериализаторXDTO.ЗаписатьXDTO(Пользователь.РазделениеДанных);
	Иначе
		ПользовательXDTO.DataSeparation = Неопределено;
	КонецЕсли;
	ПользовательXDTO.RunMode = РежимЗапускаСтрокой(Пользователь.РежимЗапуска);
	ПользовательXDTO.Roles = ФабрикаXDTO.Создать(ТипUserRoles);
	Для каждого Роль Из Пользователь.Роли Цикл
		ПользовательXDTO.Roles.Role.Добавить(Роль.Имя);
	КонецЦикла;
	Если СохранятьПароль Тогда
		ПользовательXDTO.StoredPasswordValue = Пользователь.СохраняемоеЗначениеПароля;
	Иначе
		ПользовательXDTO.StoredPasswordValue = Неопределено;
	КонецЕсли;
	ПользовательXDTO.UUID = Пользователь.УникальныйИдентификатор;
	Если Пользователь.Язык <> Неопределено Тогда
		ПользовательXDTO.Language = Пользователь.Язык.Имя;
	Иначе
		ПользовательXDTO.Language = "";
	КонецЕсли;
	
	Возврат ПользовательXDTO;
	
КонецФункции

Функция ОбновитьПользователяИзXDTO(Знач ПользовательXDTO, Знач ВосстанавливатьПароль = Ложь, Знач ВосстанавливатьРазделение = Ложь)
	
	Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательXDTO.UUID);
	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
	КонецЕсли;
	
	Пользователь.АутентификацияОС = ПользовательXDTO.OSAuthentication;
	Пользователь.АутентификацияСтандартная = ПользовательXDTO.StandardAuthentication;
	Пользователь.ЗапрещеноИзменятьПароль = ПользовательXDTO.CannotChangePassword;
	Пользователь.Имя = ПользовательXDTO.Name;
	Если ПустаяСтрока(ПользовательXDTO.DefaultInterface) Тогда
		Пользователь.ОсновнойИнтерфейс = Неопределено;
	Иначе
		Пользователь.ОсновнойИнтерфейс = Метаданные.Интерфейсы.Найти(ПользовательXDTO.DefaultInterface);
	КонецЕсли;
	Пользователь.ПоказыватьВСпискеВыбора = ПользовательXDTO.ShowInList;
	Пользователь.ПолноеИмя = ПользовательXDTO.FullName;
	Пользователь.ПользовательОС = ПользовательXDTO.OSUser;
	Если ВосстанавливатьРазделение Тогда
		Если ПользовательXDTO.DataSeparation = Неопределено Тогда
			Пользователь.РазделениеДанных = Новый Структура;
		Иначе
			Пользователь.РазделениеДанных = СериализаторXDTO.ПрочитатьXDTO(ПользовательXDTO.DataSeparation);
		КонецЕсли;
	Иначе
		Пользователь.РазделениеДанных = Новый Структура;
	КонецЕсли;
	Пользователь.РежимЗапуска = РежимЗапускаКлиентскогоПриложения[ПользовательXDTO.RunMode];
	Пользователь.Роли.Очистить();
	Для каждого ИмяРоли Из ПользовательXDTO.Roles.Role Цикл
		Роль = Метаданные.Роли.Найти(ИмяРоли);
		Если Роль <> Неопределено Тогда
			Пользователь.Роли.Добавить(Роль);
		КонецЕсли;
	КонецЦикла;
	Если ВосстанавливатьПароль Тогда
		Пользователь.СохраняемоеЗначениеПароля = ПользовательXDTO.StoredPasswordValue;
	Иначе
		Пользователь.СохраняемоеЗначениеПароля = "";
	КонецЕсли;
	Если ПустаяСтрока(ПользовательXDTO.Language) Тогда
		Пользователь.Язык = Неопределено;
	Иначе
		Пользователь.Язык = Метаданные.Языки[ПользовательXDTO.Language];
	КонецЕсли;
	
	Возврат Пользователь;
	
КонецФункции

Функция РежимЗапускаСтрокой(Знач РежимЗапуска)
	
	Если РежимЗапуска = Неопределено Тогда
		Возврат "";
	ИначеЕсли РежимЗапуска = РежимЗапускаКлиентскогоПриложения.Авто Тогда
		Возврат "Auto";
	ИначеЕсли РежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		Возврат "OrdinaryApplication";
	ИначеЕсли РежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		Возврат "ManagedApplication";
	Иначе
		ШаблонСообщения = НСтр("ru = 'Неизвестный режим запуска клиентского приложения %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РежимЗапуска);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
КонецФункции
