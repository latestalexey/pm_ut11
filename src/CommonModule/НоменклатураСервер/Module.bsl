////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры работы с номенклатурой и связанными справочниками
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирует наименование элемента справочника по заданному для вида номенклатуры шаблону.
//
//Параметры:
//		ШаблонНаименования - Строка - шаблон наименования, заданный в виде номенклатуры
//		ОбъектСправочник - СправочникОбъект.Номенклатура, СправочникОбъект.ХарактеристикиНоменклатуры,
//							СправочникСсылка.Номенклатура, СправочникСсылка.ХарактеристикиНоменклатуры
// Возвращаемое значение:
// Строка - Наименование полученное по алгоритму расчета
// Пустая строка - если не удалось сформировать наименование или не заполнены операнды алгоритма
//
Функция НаименованиеПоШаблону (Знач ШаблонНаименования, ОбъектСправочник) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ТекстИсключения = НСтр("ru = 'Конфигурация работает в режиме сервиса. Формирование наименования должно происходить на клиенте.'");
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ФормулаНаименованияСтруктура = ФормулаНаименования(ШаблонНаименования, ОбъектСправочник);
	
	ФормулаНаименования = ФормулаНаименованияСтруктура.ФормулаНаименования;
	МассивЗначенийРеквизитов = ФормулаНаименованияСтруктура.МассивЗначенийРеквизитов; 
	
	Наименование = "";
	Если ЗначениеЗаполнено(ФормулаНаименования) Тогда
		
		Попытка
			
			Выполнить("Наименование = """" + " + ФормулаНаименования);
			
		Исключение
			
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Невозможно рассчитать наименование по заданному для вида номенклатуры ""%ВидНоменклатуры%"" шаблону. Проверьте правильность шаблона.'");
			
			Если ТипЗнч(ОбъектСправочник) = Тип("СправочникОбъект.Номенклатура") Тогда
				
				ВидНоменклатуры = ОбъектСправочник.ВидНоменклатуры
				
			Иначе
				
				Если ТипЗнч(ОбъектСправочник.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
					
					ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСправочник.Владелец, "ВидНоменклатуры");
					
				ИначеЕсли ТипЗнч(ОбъектСправочник.Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
					
					ВидНоменклатуры = ОбъектСправочник.Владелец;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СообщениеОбОшибке = СтрЗаменить(ШаблонСообщенияОбОшибке, "%ВидНоменклатуры%", ВидНоменклатуры);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

//Подставляет в шаблон наименования значения реквизитов
//
//Параметры:
//		ШаблонНаименования - Строка - шаблон наименования, заданный в виде номенклатуры
//		ОбъектСправочник - СправочникОбъект.Номенклатура, СправочникОбъект.ХарактеристикиНоменклатуры,
//							СправочникСсылка.Номенклатура, СправочникСсылка.ХарактеристикиНоменклатуры
//														- объект, для которого нужно расчитать наименование
//Возвращаемое значение
//		Структура:
//			ФормулаНаименования - Строка - программный код, который нужно выполнить с помощью фукнции Выполнить для расчета наименования
//			МассивЗначенийРеквизитов - Массив - значения реквизитов, используемых в формуле наименования
//			ИндексыНаименованияВМассивеЗначенийРеквизитов - Массив - массив индексов элементов МассивЗначенийРеквизитов,
//																	которые хранят значение реквизита "Наименование" 
//
Функция ФормулаНаименования(Знач ШаблонНаименования, Знач ОбъектСправочник) Экспорт
	
	// Предусмотрено получение дополнительных реквизитов только на первом уровне вложенности.
	//	Правильно: [Реквизит.Реквизит.Реквизит], [ДопРеквизит.Реквизит.Реквизит].
	//	Неправильно: [Реквизит.ДопРеквизит.Реквизит], [ДопРеквизит.ДопРеквизит.Реквизит]
	
	ФормулаНаименования = ШаблонНаименования; 
	АлгоритмРасчета = ШаблонНаименования;
	МетаданныеОбъекта = ОбъектСправочник.Метаданные();
	МассивСтандартныхРеквизитов = Новый Массив;
	
	Для Каждого СтандартныйРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		МассивСтандартныхРеквизитов.Добавить(СтандартныйРеквизит.Имя);
	КонецЦикла;
	
	Если ОбъектСправочник = Тип("СправочникСсылка.Номенклатура")
		Или ОбъектСправочник = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		
		ОбъектСправочник = ОбъектСправочник.ПолучитьОбъект();
	КонецЕсли;
	
	РеквизитыСправочника = МетаданныеОбъекта.Реквизиты;
	
	МассивЗначенийРеквизитов = Новый Массив;
	СчетчикРеквизитов = 0;
	
	ИндексыНаименованияВМассивеЗначенийРеквизитов = Новый Массив;
	
	Пока Истина Цикл
		
		ПервыйСимвол    = Найти(АлгоритмРасчета, "[");
		ПоследнийСимвол = Найти(АлгоритмРасчета, "]");
		
		Если ПервыйСимвол = 0 Или ПоследнийСимвол = 0 Тогда
			
			Прервать;
			
		Иначе
			
			ИмяОперанда = Сред(АлгоритмРасчета, ПервыйСимвол + 1, ПоследнийСимвол - ПервыйСимвол - 1);
			ЗначениеОперанда = "";
			
			КонецИмениРеквизита = Найти(ИмяОперанда, ".");
			
			Если КонецИмениРеквизита > 0 Тогда
				
				ИмяРеквизита = Лев(ИмяОперанда, КонецИмениРеквизита - 1);
				ПутьКДаннымОперанда = Прав(ИмяОперанда, СтрДлина(ИмяОперанда) - СтрДлина(ИмяРеквизита)-1);
				
			Иначе
				
				ИмяРеквизита = ИмяОперанда;
				
			КонецЕсли;
			
			ЭтоРеквизит = (РеквизитыСправочника.Найти(ИмяРеквизита) <> Неопределено) 
			          Или (МассивСтандартныхРеквизитов.Найти(ИмяРеквизита) <> Неопределено);
			
			Если ЭтоРеквизит Тогда
				
				Если ИмяРеквизита = ИмяОперанда Тогда
					
					ЗначениеОперанда = ОбъектСправочник[ИмяОперанда];
					
					Если ИмяРеквизита = "Наименование" Тогда
						ИндексыНаименованияВМассивеЗначенийРеквизитов.Добавить(СчетчикРеквизитов);
					КонецЕсли;
					
				Иначе
					
					ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСправочник[ИмяРеквизита], Новый Структура("ИмяОперанда", ПутьКДаннымОперанда));
					ЗначениеОперанда = ЗначенияРеквизитов.ИмяОперанда;
					
				КонецЕсли;
				
			Иначе
				
				ДопРеквизит        = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяРеквизита, Истина);
				ПолеДопРеквизита   = "";
				СложныйДопРеквизитСТочкойВИмени = Ложь; // Например, доп. реквизит "Сечение (кв. мм)"
				
				Если Не ЗначениеЗаполнено(ДопРеквизит) Тогда
					
					СложныйДопРеквизитСТочкойВИмени = Истина;
					
					//Проверяем наличие символа "." в имени доп. реквизита
					Пока Истина Цикл
						
						ИмяДопРеквизитаПраво        = Прав(ИмяОперанда, СтрДлина(ИмяОперанда) - КонецИмениРеквизита);
						КонецИмениДопРеквизитаПраво = Найти(ИмяДопРеквизитаПраво, ".");
						ИмяДопРеквизита             = ?(КонецИмениДопРеквизитаПраво > 0, Лев(ИмяОперанда, КонецИмениРеквизита + КонецИмениДопРеквизитаПраво - 1), ИмяОперанда);
						ДопРеквизит                 = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяДопРеквизита, Истина);
						
						Если НЕ ЗначениеЗаполнено(ДопРеквизит) Тогда
							
							Если ИмяДопРеквизита = ИмяОперанда Тогда
								Прервать;
							Иначе
								КонецИмениРеквизита = КонецИмениРеквизита + КонецИмениДопРеквизитаПраво;
							КонецЕсли;
							
						Иначе
							
							ПолеДопРеквизита = Прав(ИмяОперанда, СтрДлина(ИмяОперанда) - СтрДлина(ДопРеквизит) - 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				СтрокаДопРеквизита = ОбъектСправочник.ДополнительныеРеквизиты.Найти(ДопРеквизит, "Свойство");
			
				Если СтрокаДопРеквизита <> Неопределено Тогда
					
					Попытка
						
						Если ИмяРеквизита = ИмяОперанда Тогда
							
							ЗначениеОперанда = СтрокаДопРеквизита.Значение;
							
						ИначеЕсли СложныйДопРеквизитСТочкойВИмени Тогда
							
							// Если в доп. реквизите который имеет символ "." в наименовании есть более одного
							// обращения через точку, то нужно получать данные запросом.
							ОбращениеКРеквизитам = Найти(ПолеДопРеквизита, ".");
							
							Если ОбращениеКРеквизитам > 0 Тогда
								
								ОбъектПоиска = СтрокаДопРеквизита.Значение[Лев(ПолеДопРеквизита, ОбращениеКРеквизитам - 1)];
								// Пытаемся получить значения реквизитов в попытке на случай неверного указания имени реквизита
								ЗначенияРеквизитов = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ОбъектПоиска,
													Новый Структура("ИмяОперанда",Прав(ПолеДопРеквизита, СтрДлина(ПолеДопРеквизита) - ОбращениеКРеквизитам)));
								ЗначениеОперанда = ЗначенияРеквизитов.ИмяОперанда;
								
							Иначе
								
								ЗначениеОперанда = ?(ЗначениеЗаполнено(ПолеДопРеквизита), СтрокаДопРеквизита.Значение[ПолеДопРеквизита], СтрокаДопРеквизита.Значение);
								
							КонецЕсли;
							
						Иначе
							
							ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДопРеквизита.Значение, Новый Структура("ИмяОперанда", ПутьКДаннымОперанда));
							ЗначениеОперанда = ЗначенияРеквизитов.ИмяОперанда;
							
						КонецЕсли;
						
					Исключение
						
						ВызватьИсключениеПоОшибкеШаблонаНаименования(ИмяОперанда);
						
					КонецПопытки;
					
				Иначе
					
					ЗначениеОперанда = "";
					
				КонецЕсли;
				
			КонецЕсли;
			
			МассивЗначенийРеквизитов.Добавить(ЗначениеОперанда);
			ФормулаНаименования = СтрЗаменить(ФормулаНаименования, "[" + ИмяОперанда + "]",  ("" + "МассивЗначенийРеквизитов[" + СчетчикРеквизитов + "]"));
			АлгоритмРасчета     = СтрЗаменить(АлгоритмРасчета, "[" + ИмяОперанда + "]", "");
			
		КонецЕсли;
		
		СчетчикРеквизитов = СчетчикРеквизитов + 1;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ФормулаНаименования",ФормулаНаименования);
	Результат.Вставить("МассивЗначенийРеквизитов",МассивЗначенийРеквизитов);
	Результат.Вставить("ИндексыНаименованияВМассивеЗначенийРеквизитов", ИндексыНаименованияВМассивеЗначенийРеквизитов);
	
	Возврат Результат;
	
КонецФункции

// Процедура устанавливает параметры выбора для номенклатуры.
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	ЭлементНоменклатура - ПолеФормы - Поле для ввода номенклатуры.
Процедура УстановитьПараметрыВыбораНоменклатуры(ХозяйственнаяОперация, ЭлементНоменклатура) Экспорт
	
	МассивПараметров = Новый Массив;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
	 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
	 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
	Тогда
		МассивТиповНоменклатуры = Новый Массив();
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		ФиксированныйМассивТиповНоменклатуры = Новый ФиксированныйМассив(МассивТиповНоменклатуры);
		МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ФиксированныйМассивТиповНоменклатуры));
	КонецЕсли;
	
	ЭлементНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры // УстановитьПараметрыВыбораНоменклатуры()

// Процедура проверки заполнения колонок "Характеристика" в формах.
// Параметры:
//	Объект - ДокументОбъект (СправочникОбъект и т.п.)
//  МассивНепроверяемыхРеквизитов - массив реквизитов, которые не нужно проверять платформенной проверкой
//	Отказ - отказ продолжения операции
//	ПараметрыЗаполнения - структура
//		возможные поля (все необязательные):
//  СуффиксДопРеквизита - суффикс реквизитов "Номенклатура" и "Характеристика", если в ТЧ есть такие реквизиты,
//						например, "Оприходование", если в ТЧ помимо "Номенклатура" и "Характеристика" есть еще
//						"НоменклатураОприходование" и "ХарактеристикаОприходование"
//	ИмяТЧ - имя проверяемой табличной части, если оно отличается от "Товары"
Процедура ПроверитьЗаполнениеХарактеристик(Объект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки = Неопределено) Экспорт
	
	Перем ИмяТЧ;
	Перем СуффиксДопРеквизита;
	Перем СписокСтрок;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПроверки <> Неопределено Тогда
		ПараметрыПроверки.Свойство("ИмяТЧ",				  ИмяТЧ);	
		ПараметрыПроверки.Свойство("СуффиксДопРеквизита", СуффиксДопРеквизита);	
		ПараметрыПроверки.Свойство("СписокСтрок",		  СписокСтрок);	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТЧ) Тогда
		ИмяТЧ = "Товары";	
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+".Характеристика");
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+".Характеристика"+СуффиксДопРеквизита);
	КонецЕсли;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,";
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаТоваров.Номенклатура"+СуффиксДопРеквизита+" КАК Номенклатура"+СуффиксДопРеквизита+",
	|	ТаблицаТоваров.Характеристика"+СуффиксДопРеквизита+" КАК Характеристика"+СуффиксДопРеквизита+",";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ИЛИ ТаблицаТоваров.Характеристика"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки,";
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "	
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|				ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
		|			И СтрокиСОшибками.Характеристика"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеЗаполненаХарактеристика" + СуффиксДопРеквизита +",";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	(ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	| 	И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	ИЛИ (ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|	И СтрокиСОшибками.Характеристика"+СуффиксДопРеквизита+" = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	СтрокаДопРеквизитов = ?(Не ЗначениеЗаполнено(СуффиксДопРеквизита), "", ",Номенклатура"+СуффиксДопРеквизита+",Характеристика"+СуффиксДопРеквизита);
	Запрос.УстановитьПараметр("ТаблицаТоваров",  Объект[ИмяТЧ].Выгрузить(СписокСтрок, "НомерСтроки,Номенклатура,Характеристика"+СтрокаДопРеквизитов));
	
	ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Характеристика%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПредставлениеТЧ                      = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаХарактеристика = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.Характеристика.Синоним;
	ПредставлениеРеквизитаХарактеристикаДоп = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты["Характеристика"+СуффиксДопРеквизита].Синоним;
	
	//1с-ит. Чечин Петр
	//Пока Выборка.Следующий() Цикл
	//	
	//	Если Выборка.НеЗаполненаХарактеристика Тогда
	//		
	//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристика);
	//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
	//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
	//		
	//		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Характеристика");
	//		
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
	//	КонецЕсли;
	//	
	//	Если ЗначениеЗаполнено(СуффиксДопРеквизита)
	//		И Выборка["НеЗаполненаХарактеристика" + СуффиксДопРеквизита] Тогда
	//		
	//		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристикаДоп);
	//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
	//		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
	//		
	//		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Характеристика"+СуффиксДопРеквизита);
	//		
	//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//	
КонецПроцедуры

// Процедура проверки заполнения колонок "Содержание" в формах.
// Параметры:
//	Объект - ДокументОбъект
//	Отказ - отказ продолжения операции
Процедура ПроверитьЗаполнениеСодержания(Объект, Отказ, ИмяТЧ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаТоваров.НомерСтроки,
	               |	ТаблицаТоваров.Номенклатура
	               |ПОМЕСТИТЬ СтрокиСОшибками
	               |ИЗ
	               |	&ТаблицаТоваров КАК ТаблицаТоваров
	               |ГДЕ
	               |	ТаблицаТоваров.Содержание = """"
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СтрокиСОшибками.НомерСтроки КАК НомерСтроки
	               |ИЗ
	               |	СтрокиСОшибками КАК СтрокиСОшибками
	               |ГДЕ
	               |	СтрокиСОшибками.Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)";
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект[ИмяТЧ].Выгрузить(,"НомерСтроки,Номенклатура,Содержание"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	МетаданныеОбъекта = Объект.Метаданные();

	ПредставлениеТЧ                 = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;

	ШаблонСообщения = НСтр("ru='Не заполнена колонка """"Содержание"""" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");

	Пока Выборка.Следующий() Цикл
					
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
					
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Содержание");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);

	КонецЦикла;
		
КонецПроцедуры

// Функция определяет наличие в табличной части работ.
// Параметры:
//	Объект - ДокументОбъект
//	ПараметрыЗаполнения - структура
//		возможные поля (все необязательные):
//  ИмяТабличнойЧасти - имя проверяемой табличной части, если оно отличается от "Товары"
Функция ПроверитьНаличиеРабот(Объект, ПараметрыПроверки = Неопределено) Экспорт
	Перем ИмяТабличнойЧасти;
	
	Если ПараметрыПроверки <> Неопределено Тогда
		ПараметрыПроверки.Свойство("ИмяТЧ", ИмяТабличнойЧасти);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ТаблицаТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ 
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 
	|	ИСТИНА КАК ЕстьРаботы
	|ИЗ 
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ 
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры 
	|	= ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", Объект[ИмяТабличнойЧасти].Выгрузить(, "Номенклатура"));
	РезультатЗапроса = Запрос.Выполнить();
	ТипыНоменклатуры = Новый Структура("ЕстьРаботы", Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ТипыНоменклатуры.ЕстьРаботы = Истина;
		
	КонецЕсли;
	
	Возврат ТипыНоменклатуры;
	
КонецФункции //ПроверитьНаличиеРабот()

////////////////////////////////////////////////////////////////////////////////
// Процедуры работы с сериями.

//Процедура заполняет статусы указания серий в строках ТЧ товары (комментарий содержит описание подсистемы серий)
//
//Возможные статусы указания серий:
//
//  0 - серии указывать не требуется
//  нечетные статусы - количество по сериям не совпадает с количеством товаров
//  четные статусы   - количество по сериям совпадает с количеством товаров
//		 1,2  - серии указываются справочно
//       3,4  - по сериям учитываются остатки, серии указываются по факту отбора
//       5,6  - по сериям учитываются остатки, серии указываются при планировании отбора,
//					заполняются по FEFO (используются только в документах отгрузки товаров)
//       7,8  - по сериям учитываются остатки, серии указываются при планировании отбора
//       9,10 - по сериям учитываются остатки, серии указываются при планировании отгрузки,
//				по сериям формируются движения по регистру СвободныеОстатки (как при приходе, так и при расходе)
//  11 - серии не указаны, указание не обязательно (используется заказах и ордерах в начальном статусе)
//  12 - серии в заказе указывать не требуется, но нужно сделать движения по пустой серии по РезервыСерий
//				используется в заказах в строках с вариантом обеспечения "ПодЗаказ"
//
//Параметры процедуры:
//
//		Объект - объект, в котором нужно заполнить статусы. Тип: ДанныеФормыСтруктура или ДокументОбъект
//
//      ПараметрыУказанияСерий - структура, состав полей задается фукнцией ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий
//											(см. описание полей в комментарии к этой фукнции)
//
//      СтрокиТоваровДляОбработки - массив строк товаров, в которых нужно заполнить статусы указания серий,
//									если передано "Неопределено", то статусы заполняются во всех строках товаров
//      
//		СтрокиСерийДляОбработки - массив строк серий, по данным которых нужно заполнить статусы указания серий,
//									если передано "Неопределено", то учитываются все строки серий
//		
Процедура ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,СтрокиТоваровДляОбработки = Неопределено, СтрокиСерийДляОбработки = Неопределено) Экспорт
	
	Если Не (ПараметрыУказанияСерий.ТоварВШапке
		Или Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Количество() <> 0 ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ПроцедураЗаполненияСерий <> Неопределено Тогда
		Документы[ПараметрыУказанияСерий.ПроцедураЗаполненияСерий].ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,СтрокиТоваровДляОбработки,СтрокиСерийДляОбработки);
		Возврат;	
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
		ЗаполнитьСтатусУказанияСерииВТЧТовары(Объект, Объект[ПараметрыУказанияСерий.ИмяТЧТовары],ПараметрыУказанияСерий);
		Возврат;
	КонецЕсли;
	
	СкладыВТЧ = ПараметрыУказанияСерий.ПоляСвязи.Найти("Склад") <> Неопределено;
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			Если ПараметрыУказанияСерий.ТоварВШапке Тогда
				Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
					Объект.УказыватьСерии = Ложь;
				КонецЕсли;
				Объект.СтатусУказанияСерий = 0;	
			Иначе
				Для Каждого СтрТабл из Объект[ПараметрыУказанияСерий.ИмяТЧТовары] Цикл
					СтрТабл.СтатусУказанияСерий = 0;	
					Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
						СтрТабл.УказыватьСерии = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	
	Если ПараметрыУказанияСерий.ЭтоЗаказ
		И Не ПараметрыУказанияСерий.ТоварВШапке
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки) = Неопределено 
		И ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки) = Неопределено Тогда
		ЕстьОтменаСтрокиВариантОбеспечения = Истина;
	Иначе
		ЕстьОтменаСтрокиВариантОбеспечения = Ложь;
	КонецЕсли;
	
	ТекстПоляВыбораТовары = "";
	ТекстПоляВыбораСерии = "";
	ТекстПоляСвязиСоединениеТоварыСерии = "";
	ТекстПоляСвязиСоединениеТоварыВсеТовары = "";
	ТекстПоляСвязиВыгружаемыеКолонкиТовары = "";
	ТекстПоляСвязиВыгружаемыеКолонкиСерии = "";
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляВыбораТовары = ТекстПоляВыбораТовары + "
		|	ТаблицаТоваров." + СтрМас + ",";
		ТекстПоляВыбораСерии = ТекстПоляВыбораСерии + "
		|	ТаблицаСерий." + СтрМас + ",";
		ТекстПоляСвязиСоединениеТоварыСерии = ТекстПоляСвязиСоединениеТоварыСерии + "
	|			И ТаблицаТоваровДляЗапроса."+СтрМас+" = ТаблицаСерийДляЗапроса."+СтрМас;
		ТекстПоляСвязиСоединениеТоварыВсеТовары = ТекстПоляСвязиСоединениеТоварыВсеТовары + "
	|			И ТаблицаТоваров."+СтрМас+" = ТаблицаТоваровДляЗапроса." + СтрМас;
		ТекстПоляСвязиВыгружаемыеКолонкиТовары = ТекстПоляСвязиВыгружаемыеКолонкиТовары + ", " + СтрМас;
		ТекстПоляСвязиВыгружаемыеКолонкиСерии = ТекстПоляСвязиВыгружаемыеКолонкиСерии + ", " + СтрМас;
	КонецЦикла;
	
	Если ЕстьОтменаСтрокиВариантОбеспечения Тогда
		ТекстПоляВыбораТовары = ТекстПоляВыбораТовары + "
		|	ТаблицаТоваров.Отменено,
		|	ТаблицаТоваров.ВариантОбеспечения,";
		ТекстПоляСвязиВыгружаемыеКолонкиТовары = ТекстПоляСвязиВыгружаемыеКолонкиТовары + ", Отменено, ВариантОбеспечения";
		УсловиеПоОтмененнойСтроке = "		КОГДА ТаблицаТоваров.Отменено 
									|			ТОГДА 0 ";
		УсловиеПоВариантуОпеспечения = "    КОГДА ТаблицаТоваров.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПодЗаказ)
									|			ТОГДА 12";
	
	Иначе
		УсловиеПоОтмененнойСтроке = "		КОГДА ЛОЖЬ 
									|			ТОГДА 0 ";
		УсловиеПоВариантуОпеспечения = "";
	КонецЕсли;
	
	ТекстПоляСвязиСоединениеСклад = ?(Не СкладыВТЧ," ПО (СкладыПолитикиУчетаСерий.Склад = &Склад)"
												," ПО (СкладыПолитикиУчетаСерий.Склад = ТаблицаТоваровДляЗапроса.Склад)");

	ТекстЗапроса = 
	"ВЫБРАТЬ " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество,
	|	ТаблицаТоваров.СтатусУказанияСерий,
	|	ТаблицаТоваров.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество,
	|	ТаблицаТоваров.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТаблицаТоваровДляЗапроса
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров ";
	Если ЕстьОтменаСтрокиВариантОбеспечения Тогда
	ТекстЗапроса = ТекстЗапроса + "
	|ГДЕ
	|	НЕ (ТаблицаТоваров.Отменено)"; 
	КонецЕсли;	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|СГРУППИРОВАТЬ ПО " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Номенклатура.ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика,
	|	ТаблицаСерий.Количество
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	&ТаблицаСерий КАК ТаблицаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика,
	|	СУММА(ТаблицаСерий.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаСерийДляЗапроса
	|ИЗ
	|	ТаблицаСерий КАК ТаблицаСерий
	|
	|СГРУППИРОВАТЬ ПО " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР "+
		 УсловиеПоОтмененнойСтроке + "
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|					ТОГДА 0
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|							ТОГДА ВЫБОР
	|									КОГДА &ЭтоЗаказ
	|											И (&ОтгрузкаКлиенту
	|												ИЛИ &ОтгрузкаПоВозвратуПоставщику
	|												ИЛИ &ОтгрузкаПоПеремещению
	|												ИЛИ &ОтгрузкаНаВнутренниеНужды
	|												ИЛИ &ОтгрузкаКомплектовДляРазборки
	|													И &ТоварВШапке
	|												ИЛИ &ОтгрузкаКомплектующихДляСборки
	|													И НЕ &ТоварВШапке)
	|										ТОГДА ВЫБОР "+ 
													УсловиеПоВариантуОпеспечения + "
	|												КОГДА ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) = 0
	|													ТОГДА 11
	|												КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|													ТОГДА 10
	|												ИНАЧЕ 9
	|											КОНЕЦ
	|									КОГДА (&ЭтоОрдер
	|												ИЛИ &ЭтоНакладная)
	|												И (&ОтгрузкаКлиенту
	|													ИЛИ &ОтгрузкаВРозницу
	|													ИЛИ &ОтгрузкаПоВозвратуПоставщику
	|													ИЛИ &ОтгрузкаПоПеремещению
	|													ИЛИ &ОтгрузкаНаВнутренниеНужды
	|													ИЛИ &ОтгрузкаКомплектовДляРазборки
	|														И (&ТоварВШапке
	|															ИЛИ &ЭтоОрдер)
	|													ИЛИ &ОтгрузкаКомплектующихДляСборки
	|														И (НЕ &ТоварВШапке
	|															ИЛИ &ЭтоОрдер)
	|													ИЛИ &ПеремещениеМеждуПомещениями)
	|											ИЛИ (&ЭтоОрдер
	|												ИЛИ НЕ Склады.ИспользоватьОрдернуюСхемуПриПоступлении)
	|												И (&ПриемкаОтПоставщика
	|													ИЛИ &ПриемкаПоВозвратуОтКлиента
	|													ИЛИ &ПриемкаПоПеремещению
	|													ИЛИ &ПриемкаПоПрочемуОприходованию
	|													ИЛИ &ПриемкаКомплектующихПослеРазборки
	|														И (НЕ &ТоварВШапке
	|															ИЛИ &ЭтоОрдер)
	|													ИЛИ &ПриемкаСобранныхКомплектов
	|														И (&ТоварВШапке
	|															ИЛИ &ЭтоОрдер))
	|										ТОГДА ВЫБОР
	|												КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|														И ТаблицаТоваровДляЗапроса.Количество > 0
	|													ТОГДА 10
	|												КОГДА ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) = 0
	|														И &ЭтоОрдер
	|														И &ПодготовкаОрдера
	|													ТОГДА 11
	|												ИНАЧЕ 9
	|											КОНЕЦ
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|							ТОГДА ВЫБОР
	|									КОГДА (&ЭтоОрдер
	|											ИЛИ НЕ Склады.ИспользоватьОрдернуюСхемуПриОтгрузке
	|												И &ЭтоНакладная)
	|											И (&ОтгрузкаКлиенту
	|												ИЛИ &ОтгрузкаПоВозвратуПоставщику
	|												ИЛИ &ПеремещениеМеждуПомещениями
	|												ИЛИ &ОтгрузкаВРозницу
	|												ИЛИ &ОтгрузкаПоПеремещению
	|												ИЛИ &ОтгрузкаНаВнутренниеНужды
	|												ИЛИ &ОтгрузкаКомплектовДляРазборки
	|													И (&ТоварВШапке
	|														ИЛИ &ЭтоОрдер)
	|												ИЛИ &ОтгрузкаКомплектующихДляСборки
	|													И (НЕ &ТоварВШапке
	|														ИЛИ &ЭтоОрдер))
	|										ТОГДА ВЫБОР
	|												КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
	|														И НЕ &ОтгрузкаВРозницу
	|													ТОГДА ВЫБОР
	|															КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|																	И ТаблицаТоваровДляЗапроса.Количество > 0
	|																ТОГДА 6
	|															КОГДА ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) = 0
	|																	И &ЭтоОрдер
	|																	И &ПодготовкаОрдера
	|																ТОГДА 11
	|															ИНАЧЕ 5
	|														КОНЕЦ
	|												ИНАЧЕ ВЫБОР
	|														КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|																И ТаблицаТоваровДляЗапроса.Количество > 0
	|															ТОГДА 8
	|														КОГДА ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) = 0
	|																И &ЭтоОрдер
	|																И &ПодготовкаОрдера
	|															ТОГДА 11
	|														ИНАЧЕ 7
	|													КОНЕЦ
	|											КОНЕЦ
	|									КОГДА (&ЭтоОрдер
	|												ИЛИ НЕ Склады.ИспользоватьОрдернуюСхемуПриПоступлении
	|													И &ЭтоНакладная)
	|												И (&ПриемкаОтПоставщика
	|													ИЛИ &ПриемкаПоВозвратуОтКлиента
	|													ИЛИ &ПриемкаПоПеремещению
	|													ИЛИ &ПриемкаПоПрочемуОприходованию
	|													ИЛИ &ПриемкаКомплектующихПослеРазборки
	|														И (НЕ &ТоварВШапке
	|															ИЛИ &ЭтоОрдер)
	|													ИЛИ &ПриемкаСобранныхКомплектов
	|														И (&ТоварВШапке
	|															ИЛИ &ЭтоОрдер))
	|											ИЛИ &ПеремещениеМеждуПомещениями
	|										ТОГДА ВЫБОР
	|												КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|														И ТаблицаТоваровДляЗапроса.Количество > 0
	|													ТОГДА 8
	|												КОГДА ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) = 0
	|														И &ЭтоОрдер
	|														И &ПодготовкаОрдера
	|													ТОГДА 11
	|												ИНАЧЕ 7
	|											КОНЕЦ
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
	|								И ((&ЭтоОрдер
	|									ИЛИ НЕ Склады.ИспользоватьОрдернуюСхемуПриОтгрузке
	|										И &ЭтоНакладная)
	|									И &ФактОтбора
	|									И (СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКлиенту
	|											И &ОтгрузкаКлиенту
	|										ИЛИ СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеВРозницу
	|											И &ОтгрузкаВРозницу
	|										ИЛИ СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКомплектующихДляСборки
	|											И &ОтгрузкаКомплектующихДляСборки
	|											И (НЕ &ТоварВШапке
	|												ИЛИ &ЭтоОрдер)
	|										ИЛИ СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКомплектовДляРазборки
	|											И &ОтгрузкаКомплектовДляРазборки
	|											И (&ТоварВШапке
	|												ИЛИ &ЭтоОрдер)
	|										ИЛИ СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеНаВнутренниеНужды
	|											И &ОтгрузкаНаВнутренниеНужды
	|										ИЛИ СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеПоВозвратуПоставщику
	|											И &ОтгрузкаПоВозвратуПоставщику
	|										ИЛИ СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеПоПеремещению
	|											И &ОтгрузкаПоперемещению))
	|							ТОГДА ВЫБОР
	|									КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|										ТОГДА ВЫБОР
	|												КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|														И ТаблицаТоваровДляЗапроса.Количество > 0
	|													ТОГДА 4
	|												КОГДА ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) = 0
	|														И &ЭтоОрдер
	|														И &ПодготовкаОрдера
	|													ТОГДА 11
	|												ИНАЧЕ 3
	|											КОНЕЦ
	|									ИНАЧЕ ВЫБОР
	|											КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|													И ТаблицаТоваровДляЗапроса.Количество > 0
	|												ТОГДА 2
	|											КОГДА ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) = 0
	|													И &ЭтоОрдер
	|													И &ПодготовкаОрдера
	|												ТОГДА 11
	|											ИНАЧЕ 1
	|										КОНЕЦ
	|								КОНЕЦ
	|						КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
	|								И НЕ &ЭтоЗаказ
	|								И (&ЭтоОрдер
	|									ИЛИ НЕ Склады.ИспользоватьОрдернуюСхемуПриПоступлении
	|										И &ЭтоНакладная)
	|								И (СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеОтПоставщика
	|										И &ПриемкаОтПоставщика
	|									ИЛИ СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоВозвратуОтКлиента
	|										И &ПриемкаПоВозвратуОтКлиента
	|									ИЛИ СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоПеремещению
	|										И &ПриемкаПоПеремещению
	|									ИЛИ СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеПоПрочемуОприходованию
	|										И &ПриемкаПоПрочемуОприходованию
	|									ИЛИ СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеКомплектующихПослеРазборки
	|										И &ПриемкаКомплектующихПослеРазборки
	|										И (НЕ &ТоварВШапке
	|											ИЛИ &ЭтоОрдер)
	|									ИЛИ СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеСобранныхКомплектов
	|										И &ПриемкаСобранныхКомплектов
	|										И (&ТоварВШапке
	|											ИЛИ &ЭтоОрдер))
	|							ТОГДА ВЫБОР
	|									КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|										ТОГДА ВЫБОР
	|												КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|														И ТаблицаТоваровДляЗапроса.Количество > 0
	|													ТОГДА 4
	|												КОГДА ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) = 0
	|														И &ЭтоОрдер
	|														И &ПодготовкаОрдера
	|													ТОГДА 11
	|												ИНАЧЕ 3
	|											КОНЕЦ
	|									ИНАЧЕ ВЫБОР
	|											КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|													И ТаблицаТоваровДляЗапроса.Количество > 0
	|												ТОГДА 2
	|											КОГДА ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) = 0
	|													И &ЭтоОрдер
	|													И &ПодготовкаОрдера
	|												ТОГДА 11
	|											ИНАЧЕ 1
	|										КОНЕЦ
	|								КОНЕЦ
	|						КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПеремещенииМеждуПомещениями
	|								И &ПеремещениеМеждуПомещениями
	|								И &ФактОтбора
	|							ТОГДА ВЫБОР
	|									КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|										ТОГДА ВЫБОР
	|												КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|														И ТаблицаТоваровДляЗапроса.Количество > 0
	|													ТОГДА 4
	|												ИНАЧЕ 3
	|											КОНЕЦ
	|									ИНАЧЕ ВЫБОР
	|											КОГДА ТаблицаТоваровДляЗапроса.Количество = ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0)
	|													И ТаблицаТоваровДляЗапроса.Количество > 0
	|												ТОГДА 2
	|											ИНАЧЕ 1
	|										КОНЕЦ
	|								КОНЕЦ
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ ТаблицаСтатусов
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваровДляЗапроса КАК ТаблицаТоваровДляЗапроса
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерийДляЗапроса КАК ТаблицаСерийДляЗапроса
	|			ПО ТаблицаТоваровДляЗапроса.Номенклатура = ТаблицаСерийДляЗапроса.Номенклатура
	|				И ТаблицаТоваровДляЗапроса.Характеристика = ТаблицаСерийДляЗапроса.Характеристика " +
					ТекстПоляСвязиСоединениеТоварыСерии + "
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК СкладыПолитикиУчетаСерий
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|				ПО СкладыПолитикиУчетаСерий.Склад = Склады.Ссылка" +
				ТекстПоляСвязиСоединениеСклад + "
	|			И ТаблицаТоваровДляЗапроса.ВидНоменклатуры = СкладыПолитикиУчетаСерий.Ссылка
	|		ПО ТаблицаТоваров.Номенклатура = ТаблицаТоваровДляЗапроса.Номенклатура
	|			И ТаблицаТоваров.Характеристика = ТаблицаТоваровДляЗапроса.Характеристика" +
				ТекстПоляСвязиСоединениеТоварыВсеТовары + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	ТаблицаСтатусов КАК ТаблицаСтатусов
	|ГДЕ
	|	ТаблицаСтатусов.СтатусУказанияСерий <> ТаблицаСтатусов.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Если Не СкладыВТЧ Тогда
		Запрос.УстановитьПараметр("Склад", Объект[ПараметрыУказанияСерий.ИмяПоляСклад]);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТоварВШапке", ПараметрыУказанияСерий.ТоварВШапке);
	
 	УстановитьПараметрыЗапросаПоПараметрамУказанияСерий(Запрос,ПараметрыУказанияСерий);
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТоваров.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТоваров.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаТоваров.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаТоваров.Колонки.Добавить("СтатусУказанияСерий",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
		
		Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
			Типы = Новый Массив;
			Типы.Добавить(ТипЗнч(Объект[СтрМас]));
			ТаблицаТоваров.Колонки.Добавить(СтрМас,Новый ОписаниеТипов(Типы));
		КонецЦикла;
		
		СтрокаТовара = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара,Объект);
		СтрокаТовара.НомерСтроки = 1;
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика" + ТекстПоляСвязиВыгружаемыеКолонкиТовары);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,Объект);
		
		НайденныеСтрокиСерий =  Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
		
		Запрос.УстановитьПараметр("ТаблицаТоваров",ТаблицаТоваров);
		Запрос.УстановитьПараметр("ТаблицаСерий", 
				Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(НайденныеСтрокиСерий,"Номенклатура, Характеристика, Количество" + ТекстПоляСвязиВыгружаемыеКолонкиСерии));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
 			Объект.СтатусУказанияСерий = Выборка.СтатусУказанияСерий;
			Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
				Если (Выборка.СтатусУказанияСерий = 11
					Или Выборка.СтатусУказанияСерий = 0) Тогда
					Объект.УказыватьСерии = Ложь;
				Иначе
					Объект.УказыватьСерии = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		Если СтрокиТоваровДляОбработки <> Неопределено Тогда
			Если СтрокиСерийДляОбработки <> Неопределено Тогда
				Запрос.УстановитьПараметр("ТаблицаТоваров",
						Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(СтрокиТоваровДляОбработки,"Номенклатура, Характеристика, Количество,НомерСтроки, СтатусУказанияСерий" + ТекстПоляСвязиВыгружаемыеКолонкиТовары));
				Запрос.УстановитьПараметр("ТаблицаСерий",
						Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(СтрокиСерийДляОбработки,"Номенклатура, Характеристика, Количество" + ТекстПоляСвязиВыгружаемыеКолонкиСерии));
			Иначе
				Запрос.УстановитьПараметр("ТаблицаТоваров",
					Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(СтрокиТоваровДляОбработки,"Номенклатура, Характеристика, Количество,НомерСтроки, СтатусУказанияСерий" + ТекстПоляСвязиВыгружаемыеКолонкиТовары));
				Запрос.УстановитьПараметр("ТаблицаСерий",
					Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(,"Номенклатура, Характеристика, Количество" + ТекстПоляСвязиВыгружаемыеКолонкиСерии));
			КонецЕсли;
		Иначе
			Запрос.УстановитьПараметр("ТаблицаТоваров",
				Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(,"Номенклатура, Характеристика, Количество,НомерСтроки, СтатусУказанияСерий" + ТекстПоляСвязиВыгружаемыеКолонкиТовары));
			Запрос.УстановитьПараметр("ТаблицаСерий",
				Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(,"Номенклатура, Характеристика, Количество" + ТекстПоляСвязиВыгружаемыеКолонкиСерии));
		КонецЕсли;

		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			СтрТабл = Объект[ПараметрыУказанияСерий.ИмяТЧТовары][Выборка.НомерСтроки - 1];
			
			СтрТабл.СтатусУказанияСерий = Выборка.СтатусУказанияСерий;
			
			Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
				Если (Выборка.СтатусУказанияСерий = 11
					Или Выборка.СтатусУказанияСерий = 0
					Или Выборка.СтатусУказанияСерий = 12) Тогда
					СтрТабл.УказыватьСерии = Ложь;
				Иначе
					СтрТабл.УказыватьСерии = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//Процедура подбирает серии по FEFO и заполняет подобранными значениями ТЧ "Серии"
//Учитываются движения документа, заполненные серии перезаполняются
////Параметры
//		Объект - объект, в котором нужно заполнить статусы. Тип: ДанныеФормыКоллекция или ДокументОбъект
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//		УчитыватьСтатусУказанияСерий - если в ТЧ Товары статус указания серий уже заполнен, то не нужно обращаться к политикам, для
//			отбора строк для заполнения серий - в этом случае этот в параметр нужно передать ИСТИНА, иначе - ЛОЖЬ
Процедура ЗаполнитьСерииПоFEFO(Объект,ПараметрыУказанияСерий, УчитыватьСтатусУказанияСерий = Истина) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкладыВТЧ = ПараметрыУказанияСерий.ПоляСвязи.Найти("Склад") <> Неопределено;
	
	ТекстПоляСвязиСоединениеСклад = ?(Не СкладыВТЧ," ПО (СкладыПолитикиУчетаСерий.Ссылка = &Склад)"
												," ПО (СкладыПолитикиУчетаСерий.Ссылка = ТаблицаТоваров.Склад)");
    //
												
	Если УчитыватьСтатусУказанияСерий Тогда											
		ТекстЗапроса =	
		"ВЫБРАТЬ "+
		?(СкладыВТЧ, "ТаблицаТоваров.Склад КАК Склад, ","&Склад КАК Склад,") + "
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.Характеристика,
		|	ТаблицаТоваров.Количество
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|ГДЕ 
		|	ТаблицаТоваров.СтатусУказанияСерий = 5
		|	ИЛИ ТаблицаТоваров.СтатусУказанияСерий = 6
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ " +
		?(СкладыВТЧ, "ТаблицаТоваров.Склад КАК Склад, ","&Склад КАК Склад,") + "
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.Характеристика,
		|	СУММА(ТаблицаТоваров.Количество) КАК Количество
		|ПОМЕСТИТЬ ТаблицаТоваровДляЗапроса
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|
		|СГРУППИРОВАТЬ ПО "+
		?(СкладыВТЧ, "ТаблицаТоваров.Склад, ","") + "
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ " +
		?(СкладыВТЧ, "ТаблицаТоваров.Склад КАК Склад, ","&Склад КАК Склад,") + "
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.Характеристика,
		|	ТаблицаТоваров.Количество
		|ПОМЕСТИТЬ ТаблицаТоваров
		|ИЗ
		|	&ТаблицаТоваров КАК ТаблицаТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ " + 
		?(СкладыВТЧ, "ТаблицаТоваров.Склад КАК Склад, ","&Склад КАК Склад,") + "
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.Характеристика,
		|	СУММА(ТаблицаТоваров.Количество) КАК Количество
		|ПОМЕСТИТЬ ТаблицаТоваровДляЗапроса
		|ИЗ
		|	ТаблицаТоваров КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|			ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
		|		" + ?(СкладыВТЧ,"ПО (ПолитикиУчетаСерий.Склад = ТаблицаТоваров.Склад)" ,"ПО (ПолитикиУчетаСерий.Склад = &Склад)") + "
		|			И (ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
		|ГДЕ
		|	ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
		|	И ((НЕ Склады.ИспользоватьОрдернуюСхемуПриОтгрузке)
		|			ИЛИ &ЭтоОрдер)
		|
		|СГРУППИРОВАТЬ ПО " +
		?(СкладыВТЧ, "ТаблицаТоваров.Склад, ","") + "
		|	ТаблицаТоваров.Номенклатура,
		|	ТаблицаТоваров.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	СерииТоваров.Номенклатура КАК Номенклатура,
	|	СерииТоваров.Склад КАК Склад,
	|	СерииТоваров.Характеристика КАК Характеристика,
	|	СерииТоваров.Серия,
	|	СУММА(СерииТоваров.СвободныйОстаток) КАК СвободныйОстаток,
	|	СерииТоваров.Серия.ГоденДо КАК ГоденДо,
	|	СерииТоваров.Серия.Номер КАК Номер
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|		ТоварыНаСкладахОстатки.Серия КАК Серия,
	|		ТоварыНаСкладахОстатки.Склад КАК Склад,
	|		ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток КАК СвободныйОстаток
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				(Номенклатура, Характеристика, Склад) В
	|						(ВЫБРАТЬ
	|							ТаблицаТоваровДляЗапроса.Номенклатура,
	|							ТаблицаТоваровДляЗапроса.Характеристика,
	|							ТаблицаТоваровДляЗапроса.Склад
	|						ИЗ
	|							ТаблицаТоваровДляЗапроса)
	|					И Помещение = &Помещение) КАК ТоварыНаСкладахОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыНаСкладах.Номенклатура,
	|		ТоварыНаСкладах.Характеристика,
	|		ТоварыНаСкладах.Серия,
	|		ТоварыНаСкладах.Склад,
	|		ТоварыНаСкладах.КОтгрузке - ТоварыНаСкладах.ВНаличии
	|	ИЗ
	|		РегистрНакопления.ТоварыНаСкладах КАК ТоварыНаСкладах
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваровДляЗапроса КАК ТаблицаТоваровДляЗапроса
	|			ПО ТоварыНаСкладах.Номенклатура = ТаблицаТоваровДляЗапроса.Номенклатура
	|				И ТоварыНаСкладах.Характеристика = ТаблицаТоваровДляЗапроса.Характеристика
	|				И ТоварыНаСкладах.Склад = ТаблицаТоваровДляЗапроса.Склад
	|				И (ТоварыНаСкладах.Регистратор = &Ссылка)) КАК СерииТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	СерииТоваров.Номенклатура,
	|	СерииТоваров.Характеристика,
	|	СерииТоваров.Склад,
	|	СерииТоваров.Серия,
	|	СерииТоваров.Серия.ГоденДо,
	|	СерииТоваров.Серия.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваровДляЗапроса.Номенклатура КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровДляЗапроса.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
	|	ТаблицаТоваровДляЗапроса.Характеристика КАК Характеристика,
	|	ТаблицаТоваровДляЗапроса.Склад КАК Склад,
	|	ТаблицаТоваровДляЗапроса.Количество КАК Количество,
	|	ТаблицаСерий.Серия КАК Серия,
	|	ЕСТЬNULL(ТаблицаСерий.СвободныйОстаток,0) КАК СвободныйОстаток
	|ИЗ
	|	ТаблицаТоваровДляЗапроса КАК ТаблицаТоваровДляЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерий КАК ТаблицаСерий
	|		ПО ТаблицаТоваровДляЗапроса.Номенклатура = ТаблицаСерий.Номенклатура
	|			И ТаблицаТоваровДляЗапроса.Характеристика = ТаблицаСерий.Характеристика
	|			И ТаблицаТоваровДляЗапроса.Склад = ТаблицаСерий.Склад
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ТаблицаСерий.ГоденДо,
	|	ТаблицаСерий.Номер
	|ИТОГИ
	|	МАКСИМУМ(Количество)
	|ПО
	|	Номенклатура,
	|	Характеристика,
	|   Склад";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(,"Номенклатура,Характеристика,СтатусУказанияСерий,Количество"+?(СкладыВТЧ,",Склад","")));
	
	Если Не СкладыВТЧ Тогда
		Запрос.УстановитьПараметр("Склад",Объект[ПараметрыУказанияСерий.ИмяПоляСклад]);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяПоляПомещение <> Неопределено Тогда
		Помещение = Объект[ПараметрыУказанияСерий.ИмяПоляПомещение];
	Иначе
		Помещение = Справочники.СкладскиеПомещения.ПустаяСсылка();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Помещение",Помещение);
	Запрос.УстановитьПараметр("ЭтоОрдер",ПараметрыУказанияСерий.ЭтоОрдер);
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	
	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
		ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			
			ВыборкаПоСкладам = ВыборкаПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСкладам.Следующий() Цикл
				
				СтрутураПоиска = Новый Структура("Номенклатура,Характеристика"+?(СкладыВТЧ,",Склад",""));
				ЗаполнитьЗначенияСвойств(СтрутураПоиска,ВыборкаПоСкладам);
				
				НайденныеСерии = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтрутураПоиска);
				
				Для Каждого СтрМас Из НайденныеСерии Цикл
					Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Удалить(СтрМас);
				КонецЦикла;
				
				ВыборкаПоСериям = ВыборкаПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				КоличествоНеРаспределено = ВыборкаПоСкладам.Количество;
				НеЗаполненоКоличество = Ложь;
				
				Если ВыборкаПоСкладам.Количество = 0
					Или ВыборкаПоСкладам.Количество = Null Тогда
					НеЗаполненоКоличество = Истина;
				Иначе
					
					ЕдиницаИзмеренияПредставление = "";
					
					Пока ВыборкаПоСериям.Следующий() Цикл
						
						ЕдиницаИзмеренияПредставление = ВыборкаПоСериям.ЕдиницаИзмеренияПредставление;
						
						Если ВыборкаПоСериям.СвободныйОстаток <= 0
							Или Не ЗначениеЗаполнено(ВыборкаПоСериям.Серия) Тогда
							Продолжить;
						КонецЕсли;
						
						НоваяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыборкаПоСериям);
						
						СтруктураКоличества = Новый Структура;
						СтруктураКоличества.Вставить("Количество",Мин(КоличествоНеРаспределено,ВыборкаПоСериям.СвободныйОстаток));
						СтруктураКоличества.Вставить("КоличествоУпаковок",Мин(КоличествоНеРаспределено,ВыборкаПоСериям.СвободныйОстаток));
						
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураКоличества); 
						
						КоличествоНеРаспределено = КоличествоНеРаспределено - НоваяСтрока.Количество;
						
						Если КоличествоНеРаспределено = 0 Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
				КонецЕсли;
				НайденныеТовары = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтрутураПоиска);
				
				Для Каждого СтрМас из НайденныеТовары Цикл
					Если НеЗаполненоКоличество Тогда
						ТекстСообщения = НСтр("ru = 'Товар ""%ПредставлениеТовара%"" - серии не заполнены. В табличной части ""Товары"" не указано количество.""'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПредставлениеТовара%", НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрМас.Номенклатура, СтрМас.Характеристика));
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, СтрМас.НомерСтроки, "Номенклатура");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект");
					ИначеЕсли КоличествоНеРаспределено = 0 Тогда
						СтрМас.СтатусУказанияСерий = 6;
					Иначе
						СтрМас.СтатусУказанияСерий = 5;
						
						Если КоличествоНеРаспределено = ВыборкаПоСкладам.Количество Тогда 
							ТекстСообщения = НСтр("ru = 'Товар ""%ПредставлениеТовара%"" - серии не заполнены. На складе ""%ПредставлениеСклада%"" не хватает ""%Количество%"" ""%ЕдиницаИзмерения%""'");
						Иначе
							ТекстСообщения = НСтр("ru = 'Товар ""%ПредставлениеТовара%"" - серии заполнены не полностью. На складе ""%ПредставлениеСклада%"" не хватает ""%Количество%"" ""%ЕдиницаИзмерения%""'");
						КонецЕсли;	
						
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПредставлениеТовара%", НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрМас.Номенклатура, СтрМас.Характеристика));
						
						Если Не СкладыВТЧ Тогда
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПредставлениеСклада%", СкладыСервер.ПолучитьПредставлениеСклада(Объект[ПараметрыУказанияСерий.ИмяПоляСклад],Помещение));
						Иначе
							ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ПредставлениеСклада%", СкладыСервер.ПолучитьПредставлениеСклада(СтрМас.Склад));
						КонецЕсли;
						
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Количество%", КоличествоНеРаспределено);
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%ЕдиницаИзмерения%",ЕдиницаИзмеренияПредставление);
						
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, СтрМас.НомерСтроки, "Номенклатура");
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект");
						
					КонецЕсли;
				КонецЦикла;		
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//Функция проверяет наличие в ТЧ "Товары" строк, по которым серии заполнены по FEFO
////Параметры
//		ТЧ - ДанныеФормыКоллеция
// Возвращаемое значение - тип Булево
Функция ЕстьСтрокиСЗаполненнымиПоFEFOСериями(ТЧ) Экспорт
	Возврат ТЧ.НайтиСтроки(Новый Структура("СтатусУказанияСерий",6)).Количество() > 0;	
КонецФункции

//Функция проверяет наличие в ТЧ "Товары" строк, по которым серии можно за полнить по FEFO
////Параметры
//		ТЧ - ДанныеФормыКоллеция
// Возвращаемое значение - тип Булево
Функция ЕстьСтрокиСЗаполняемымиПоFEFOСериями(ТЧ) Экспорт
	Возврат ТЧ.НайтиСтроки(Новый Структура("СтатусУказанияСерий",6)).Количество() > 0
		Или ТЧ.НайтиСтроки(Новый Структура("СтатусУказанияСерий",5)).Количество() > 0;	
КонецФункции

// Проверяет, предусматривает ли политика указания серий на переданном складе указание серий 
// и проверяет принадлежность серии
//	Параметры:
//		Номенклатура - СправочникСсылка.Номенклатура
//		Склад - СправочникСсылка.Склад
//		ИмяПараметраПолитикиУчетаСерий - Строка - имя реквизита политики учета серий, по которому нужно проверить
//			статус указания серий
//	Возвращаемое значение:
//		Структура:
//			СтатусУказанияСерий - Строка - статус указания серий
//			Серия - СправочникСсылка.СерииНоменклатуры - если серия принадлежит тому же виду номенклатуры,
//				то переданная серия, иначе - пустая ссылка
//
Функция СерияУказанаКорректно(Склад, Номенклатура, Серия, ИмяПараметраПолитикиУчетаСерий) Экспорт
	Результат = Новый Структура("СтатусУказанияСерий,Серия");
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий." + ИмяПараметраПолитикиУчетаСерий + "
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|		ПО Номенклатура.ВидНоменклатуры = ВидыНоменклатурыПолитикиУчетаСерий.Ссылка
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И ВидыНоменклатурыПолитикиУчетаСерий.Склад = &Склад
	|	И ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий." + ИмяПараметраПолитикиУчетаСерий;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Результат.СтатусУказанияСерий = 0;
	Иначе
		Если ИмяПараметраПолитикиУчетаСерий = "УказыватьПриПланированииОтгрузки" Тогда 
			Результат.СтатусУказанияСерий = 10;
		ИначеЕсли ИмяПараметраПолитикиУчетаСерий = "УказыватьПриПланированииОтбора" Тогда
			Результат.СтатусУказанияСерий = 8;
		ИначеЕсли ИмяПараметраПолитикиУчетаСерий = "УчетСерийПоFEFO" Тогда
			Результат.СтатусУказанияСерий = 6;
		ИначеЕсли ИмяПараметраПолитикиУчетаСерий = "УказыватьПоФактуОтбора" Тогда
			Результат.СтатусУказанияСерий = 4;
		Иначе
			Результат.СтатусУказанияСерий = 2;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.СтатусУказанияСерий = 0 Тогда
		Результат.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	Иначе
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Серия, "ВидНоменклатуры")
			 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры") Тогда
			Результат.Серия = Серия;
		Иначе
			Результат.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//По указанным параметрам фукнция возвращает статус указания серий
//	Параметры:
//		Склад - СправочникСсылка.Склады - склад, для которого вычисляется статус указания серий
//      Номенклатура - СправочникСсылка.Номенклатура - номенклатура, для которого вычисляется статус указания серий
//      ИмяПараметраПолитикиУчетаСерий - Строка - имя параметра политики, который нужно проверить
//  Возвращаемое значение
//		Число - статус указания серий
//
Функция СтатусУказанияСерии(Склад, Номенклатура, ИмяПараметраПолитикиУчетаСерий) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки 	КАК УказыватьПриПланированииОтгрузки,
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора 	КАК УказыватьПриПланированииОтбора,
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO 					КАК УчетСерийПоFEFO,
	|	ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора 			КАК УказыватьПоФактуОтбора
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ВидыНоменклатурыПолитикиУчетаСерий
	|		ПО Номенклатура.ВидНоменклатуры = ВидыНоменклатурыПолитикиУчетаСерий.Ссылка
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И ВидыНоменклатурыПолитикиУчетаСерий.Склад = &Склад
	|	И ВидыНоменклатурыПолитикиУчетаСерий.ПолитикаУчетаСерий." + ИмяПараметраПолитикиУчетаСерий;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СтатусУказанияСерий = 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Если Выборка.УказыватьПриПланированииОтгрузки Тогда 
			СтатусУказанияСерий = 10;
		ИначеЕсли Выборка.УказыватьПриПланированииОтбора Тогда
			СтатусУказанияСерий = 8;
		ИначеЕсли Выборка.УчетСерийПоFEFO Тогда
			СтатусУказанияСерий = 6;
		ИначеЕсли Выборка.УказыватьПоФактуОтбора Тогда
			СтатусУказанияСерий = 4;
		Иначе
			СтатусУказанияСерий = 2;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусУказанияСерий;
	
КонецФункции

//Процедура проверяет правильность указания серий товаров по статусам в ТЧ "Товары"
//Если статусы
//       1 - количество по сериям не совпадает с количеством товаров (движения по сериям делать не нужно)
//       3 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям)
//       5 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям, серии заполняются по FEFO)
//       7 - количество по сериям не совпадает с количеством товаров (серии указываются при планировании отгрузки)
//то выдается ошибка
//Параметры
//		ДокументОбъект - ДокументОбъект, в котором нужно проверить указание серий
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//		Отказ - признак ошибки проверки
Процедура ПроверитьЗаполнениеСерий(ДокументОбъект,ПараметрыУказанияСерий,Отказ,МассивНепроверяемыхРеквизитов = Неопределено,ВыдаватьСообщения = Истина) Экспорт
	
	Если МассивНепроверяемыхРеквизитов <> Неопределено Тогда
		МассивНепроверяемыхРеквизитов.Добавить(ПараметрыУказанияСерий.ИмяТЧТовары+".Серия");
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ДокументОбъект);
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСерий.НомерСтроки КАК НомерСтроки,
		|	ТаблицаСерий.Номенклатура КАК Номенклатура,
		|	ТаблицаСерий.Серия КАК Серия,
		|	ТаблицаСерий."+ПараметрыУказанияСерий.ИмяПоляКоличество+" КАК КоличествоУпаковок,
		|	ТаблицаСерий.СтатусУказанияСерий КАК СтатусУказанияСерий
		|ПОМЕСТИТЬ ТаблицаСерий
		|ИЗ
		|	&ТаблицаСерий КАК ТаблицаСерий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСерий.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаСерий.Номенклатура) КАК ТоварПредставление,
		|	ВЫБОР
		|		КОГДА ТаблицаСерий.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СерияНеЗаполнена,
		|	ВЫБОР
		|		КОГДА (НЕ ВЫРАЗИТЬ(ТаблицаСерий.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьКоличествоСерии)
		|				И ТаблицаСерий.КоличествоУпаковок <> 1
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ОшибкаКоличества
		|ИЗ
		|	ТаблицаСерий КАК ТаблицаСерий
		|ГДЕ
		|	ТаблицаСерий.СтатусУказанияСерий <> 0
		|	И (ТаблицаСерий.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|			ИЛИ (НЕ ВЫРАЗИТЬ(ТаблицаСерий.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьКоличествоСерии)
		|				И ТаблицаСерий.КоличествоУпаковок <> 1)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	СерияНеЗаполнена,
		|	ОшибкаКоличества";
		
		Запрос.УстановитьПараметр("ТаблицаСерий",
				ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(,"НомерСтроки,Номенклатура,Серия,СтатусУказанияСерий, " + ПараметрыУказанияСерий.ИмяПоляКоличество));
		
		Если ВыдаватьСообщения Тогда
			Выборка = Запрос.Выполнить().Выбрать();
			
			МетаданныеОбъекта = ДокументОбъект.Метаданные();
			ПредставлениеТЧ = МетаданныеОбъекта.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Синоним;
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.СерияНеЗаполнена Тогда
					ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Серия"" в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(Выборка.НомерСтроки));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, "Серия");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
				КонецЕсли;
				
				Если Выборка.ОшибкаКоличества Тогда
					ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% количество должно равняться 1, т.к. политика учета серий товара"
					+ " ""%ТоварПредставление%"" предусматривает, что количество по любой серии этого товара всегда будет равно 1""'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(Выборка.НомерСтроки));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТоварПредставление%", Выборка.ТоварПредставление);
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, "КоличествоУпаковок");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если Не Запрос.Выполнить().Пустой() Тогда
				Отказ = Истина;	
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ТекстПоляВыбораТовары = "";
	ТекстПоляВыбораСерии = "";
	ТекстПоляСвязиСоединениеТоварыСерии = "";
	ТекстПоляСвязиСоединениеТоварыВсеТовары = "";
	ТекстПоляСвязиВыгружаемыеКолонкиТовары = "";
	ТекстПоляСвязиВыгружаемыеКолонкиСерии = "";
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляВыбораТовары = ТекстПоляВыбораТовары + "
		|	ТаблицаТоваров." + СтрМас + ",";
		ТекстПоляВыбораСерии = ТекстПоляВыбораСерии + "
		|	ТаблицаСерий." + СтрМас + ",";
		ТекстПоляСвязиСоединениеТоварыСерии = ТекстПоляСвязиСоединениеТоварыСерии + "
	|			И ТаблицаТоваровДляЗапроса."+СтрМас+" = ТаблицаСерийДляЗапроса."+СтрМас;
		ТекстПоляСвязиСоединениеТоварыВсеТовары = ТекстПоляСвязиСоединениеТоварыВсеТовары + "
	|			И ТаблицаТоваров."+СтрМас+" = ТаблицаТоваровДляЗапроса." + СтрМас;
		ТекстПоляСвязиВыгружаемыеКолонкиТовары = ТекстПоляСвязиВыгружаемыеКолонкиТовары + ", " + СтрМас;
		ТекстПоляСвязиВыгружаемыеКолонкиСерии = ТекстПоляСвязиВыгружаемыеКолонкиСерии + ", " + СтрМас;
	КонецЦикла;
	
	Если ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено Тогда
		ИмяПоляКоличество       = "КоличествоУпаковок";
		ИмяПоляЕдиницаИзмерения = "Упаковка";
	Иначе
		ИмяПоляКоличество       = "Количество";
		ИмяПоляЕдиницаИзмерения = "Номенклатура.ЕдиницаИзмерения";
	КонецЕсли;
	
	ТекстПоляСвязиВыгружаемыеКолонкиТовары = ТекстПоляСвязиВыгружаемыеКолонкиТовары + ", " + ИмяПоляКоличество;
	ТекстПоляСвязиВыгружаемыеКолонкиСерии = ТекстПоляСвязиВыгружаемыеКолонкиСерии + ", " + ИмяПоляКоличество;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров." + ИмяПоляКоличество + " КАК Количество,
	|	ТаблицаТоваров.СтатусУказанияСерий,
	|	ТаблицаТоваров.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|   ТаблицаТоваров.СтатусУказанияСерий В (1,3,5,7,9)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров."  +ИмяПоляЕдиницаИзмерения + " КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.Характеристика,
	|	СУММА(ТаблицаТоваров.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаТоваровДляЗапроса
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО " +
	ТекстПоляВыбораТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров."  +ИмяПоляЕдиницаИзмерения + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика,
	|	ТаблицаСерий." + ИмяПоляКоличество + " КАК Количество
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	&ТаблицаСерий КАК ТаблицаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика,
	|	СУММА(ТаблицаСерий.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаСерийДляЗапроса
	|ИЗ
	|	ТаблицаСерий КАК ТаблицаСерий
	|
	|СГРУППИРОВАТЬ ПО " +
	ТекстПоляВыбораСерии + "
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) КАК КоличествоСерий,
	|	ТаблицаТоваровДляЗапроса.Количество КАК КоличествоТоваров,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваровДляЗапроса.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Номенклатура) КАК Номенклатура,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Характеристика) КАК Характеристика
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваровДляЗапроса КАК ТаблицаТоваровДляЗапроса
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСерийДляЗапроса КАК ТаблицаСерийДляЗапроса
	|			ПО ТаблицаТоваровДляЗапроса.Номенклатура = ТаблицаСерийДляЗапроса.Номенклатура
	|				И ТаблицаТоваровДляЗапроса.Характеристика = ТаблицаСерийДляЗапроса.Характеристика "
					+ ТекстПоляСвязиСоединениеТоварыСерии + "
	|		ПО ТаблицаТоваров.Номенклатура = ТаблицаТоваровДляЗапроса.Номенклатура
	|			И ТаблицаТоваров.Характеристика = ТаблицаТоваровДляЗапроса.Характеристика "
					+ ТекстПоляСвязиСоединениеТоварыВсеТовары + "
	|ГДЕ
	|	ЕСТЬNULL(ТаблицаСерийДляЗапроса.Количество, 0) <> ТаблицаТоваровДляЗапроса.Количество
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(,"НомерСтроки,СтатусУказанияСерий,Номенклатура,Характеристика"+ТекстПоляСвязиВыгружаемыеКолонкиТовары));
	Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить(,"Номенклатура,Характеристика"+ТекстПоляСвязиВыгружаемыеКолонкиСерии));
	
	Если ВыдаватьСообщения Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекстСообщения = НСтр("ru = 'Для товара ""%Товар%""  указано по сериям %КоличествоСерий% %ЕдиницаИзмерения%. Необходимо указать %КоличествоТоваров% %ЕдиницаИзмерения%. Исправьте серии.'");
			
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Товар%",НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика) );
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоСерий%",Выборка.КоличествоСерий);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоТоваров%",Выборка.КоличествоТоваров);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЕдиницаИзмерения%",Выборка.ЕдиницаИзмерения);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, "Номенклатура");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных , Поле, "Объект", Отказ);
		КонецЦикла;
	Иначе
		Если Не Запрос.Выполнить().Пустой() Тогда
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Процедура проверяет правильность указания серий товаров по статусам в шапке документа
//Если статусы
//       1 - количество по сериям не совпадает с количеством товаров (движения по сериям делать не нужно)
//       3 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям)
//то выдается ошибка
//Параметры
//		ДокументОбъект - ДокументОбъект, в котором нужно проверить указание серий
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//		Отказ - признак ошибки проверки
Процедура ПроверитьЗаполнениеСерийВШапке(ДокументОбъект,ПараметрыУказанияСерий,Отказ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ДокументОбъект);
	
	Если ДокументОбъект.СтатусУказанияСерий = 1
		Или ДокументОбъект.СтатусУказанияСерий = 3 Тогда 
		
		ТекстСообщения = НСтр("ru = 'Для товара ""%Товар%"" необходимо указать серии'");
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Товар%",НоменклатураКлиентСервер.ПредставлениеНоменклатуры(ДокументОбъект.Номенклатура, ДокументОбъект.Характеристика) );
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,"Номенклатура","Объект",Отказ);
	КонецЕсли;
	
КонецПроцедуры

//Процедура удаляет строки ТЧ "Серии", которым по полям связи нет соотвествующих строк в ТЧ "Товары"
//или в этих строках статус указания серий равен 0 (не указывать)
//Параметры
//		ДокументОбъект - ДокументОбъект, в котором нужно удалить неиспользуемые строки серий
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
Процедура УдалитьНеиспользуемыеСтрокиСерий(ДокументОбъект,ПараметрыУказанияСерий) Экспорт
	
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьТоварВШапке = ПараметрыУказанияСерий.Свойство("Шапка");
	
	Если ЕстьТоварВШапке Тогда
		ПараметрыУказанияСерийПроверка = ПараметрыУказанияСерий.ТЧ;
	Иначе
		ПараметрыУказанияСерийПроверка = ПараметрыУказанияСерий;
	КонецЕсли;
	
	ТекстПоляСвязиТовары = "";
	ТекстПоляСвязиСерии = "";
	ТекстПоляСвязиСоединениеТоварыСерии = "";
	ТекстПоляСвязиСоединениеТоварыВсеТовары = "";
	ТекстПоляСвязиВыгружаемыеКолонки = "";
	
	Для Каждого СтрМас из ПараметрыУказанияСерийПроверка.ПоляСвязи Цикл
		ТекстПоляСвязиТовары = ТекстПоляСвязиТовары + "
		|	ТаблицаТоваров." + СтрМас + ",";
		ТекстПоляСвязиСерии = ТекстПоляСвязиСерии + "
		|	ТаблицаСерий." + СтрМас + ",";
		ТекстПоляСвязиСоединениеТоварыСерии = ТекстПоляСвязиСоединениеТоварыСерии + "
	|			И ТаблицаТоваров."+СтрМас+" = ТаблицаСерий."+СтрМас;
		ТекстПоляСвязиВыгружаемыеКолонки = ТекстПоляСвязиВыгружаемыеКолонки + ", " + СтрМас  ;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ "
	+ ТекстПоляСвязиТовары + "
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.СтатусУказанияСерий
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ "
	+ ТекстПоляСвязиСерии + "
	|	ТаблицаСерий.НомерСтроки,
	|	ТаблицаСерий.Номенклатура,
	|	ТаблицаСерий.Характеристика
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	&ТаблицаСерий КАК ТаблицаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерий.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаСерий КАК ТаблицаСерий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ТаблицаТоваров
	|		ПО ТаблицаСерий.Номенклатура = ТаблицаТоваров.Номенклатура
	|			И ТаблицаСерий.Характеристика = ТаблицаТоваров.Характеристика"
				+ ТекстПоляСвязиСоединениеТоварыСерии + "
	|ГДЕ
	|	ЕСТЬNULL(ТаблицаТоваров.СтатусУказанияСерий, 0) = 0
	|	ИЛИ ЕСТЬNULL(ТаблицаТоваров.СтатусУказанияСерий, 0) = 11
	|	ИЛИ ЕСТЬNULL(ТаблицаТоваров.СтатусУказанияСерий, 0) = 12
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерий.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки УБЫВ";
	
	ТаблицаТовары = ДокументОбъект[ПараметрыУказанияСерийПроверка.ИмяТЧТовары].Выгрузить(,"Номенклатура,Характеристика,СтатусУказанияСерий"+ТекстПоляСвязиВыгружаемыеКолонки);
	
	Если ЕстьТоварВШапке Тогда
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ДокументОбъект);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаТовары",ТаблицаТовары);
	Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерийПроверка.ИмяТЧСерии].Выгрузить(,"НомерСтроки,Номенклатура,Характеристика"+ТекстПоляСвязиВыгружаемыеКолонки));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект[ПараметрыУказанияСерийПроверка.ИмяТЧСерии].Удалить(ДокументОбъект[ПараметрыУказанияСерийПроверка.ИмяТЧСерии][Выборка.НомерСтроки-1]);
			
	КонецЦикла;
	
КонецПроцедуры

// Фукнция помещает строки ТЧ "Серии", соотвествующие ключевым полям во временное хранилище, для передачи в форму
// редактирования серий
// Параметры
//		Объект - ДанныеФормыСтуктура - основной реквизит формы документа
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//      ТекущиеДанныеИдентификатор - идентификатор текущей строки товаров в форме документа
//      УникальныйИдентификаторФормы - уникальный идентификатор формы, к которому привязываются данные, помещенные во временное хранилище
//      Метаданные = метаданные объектоа, для которого помещаются серии в хранилище, если параметр не указан - метаданные извлекаются из ссылки
// Возвращаемое значение
//		Структура параметров формы указания серий
Функция ПоместитьСерииВХранилище(Объект,ПараметрыУказанияСерий,ТекущиеДанныеИдентификатор,Форма, Метаданные = Неопределено) Экспорт
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	
	//Если нужно будет изменять количество, то данные формы нужно заблокировать
	//Если заблокировать не удастся - вылетит исключение
	Если Не ПараметрыУказанияСерий.ТолькоПросмотр
		И ПараметрыУказанияСерий.БлокироватьДанныеФормы Тогда
		Форма.ЗаблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	ТекстВыбораТоваров = "";
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстВыбораТоваров = ТекстВыбораТоваров + "
		|	ТаблицаТоваров."  + СтрМас + ", ";
		
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
	КонецЦикла;
	

	СкладыВТЧ           = ПараметрыУказанияСерий.ПоляСвязи.Найти(ПараметрыУказанияСерий.ИмяПоляСклад) <> Неопределено;
	
	РегистрироватьСерии = НоменклатураКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий);
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		ТекущиеДанные = Объект;
	Иначе
		ТекущиеДанные = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	КонецЕсли;

	Если РегистрироватьСерии Тогда
		ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено;
		НомераСтрокДокумента = "";
		
		Если ПараметрыУказанияСерий.ТоварВШапке Тогда
			КоличествоВДокументе = Объект.Количество;	
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,Объект);
		Иначе
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекущиеДанные);
			
			НайденныеСтрокиТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
			
			КоличествоВДокументе = 0;	
			Для Каждого СтрМас из НайденныеСтрокиТоваров Цикл
				ИмяКолонкиКоличество         = ?(ПараметрыУказанияСерий.ПроверкаДокумента, "КоличествоВДокументе", "Количество");
				ИмяКолонкиКоличествоУпаковок = ?(ПараметрыУказанияСерий.ПроверкаДокумента, "КоличествоУпаковокВДокументе", "КоличествоУпаковок");
				
				Если ЕстьУпаковки Тогда
					КоличествоВДокументе = КоличествоВДокументе + СтрМас[ИмяКолонкиКоличествоУпаковок];	
				Иначе
					КоличествоВДокументе = КоличествоВДокументе + СтрМас[ИмяКолонкиКоличество];	
				КонецЕсли;		
				
				НомераСтрокДокумента = НомераСтрокДокумента + Строка(СтрМас.НомерСтроки) + ", ";
			КонецЦикла;
			
			Если Не ПустаяСтрока(НомераСтрокДокумента) Тогда
				НомераСтрокДокумента = Лев(НомераСтрокДокумента, СтрДлина(НомераСтрокДокумента)-2);
			КонецЕсли;
		КонецЕсли;
		
		НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
		
		ТаблицаСерий = Новый ТаблицаЗначений;
		ТаблицаСерий.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
		ТаблицаСерий.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаСерий.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		
		Если ПараметрыУказанияСерий.ПроверкаДокумента Тогда
			ТаблицаСерий.Колонки.Добавить("КоличествоНеОтгружать", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
			ТаблицаСерий.Колонки.Добавить("КоличествоУпаковокНеОтгружать", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
			ТаблицаСерий.Колонки.Добавить("КоличествоВДокументе", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
			ТаблицаСерий.Колонки.Добавить("КоличествоУпаковокВДокументе", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		КонецЕсли;
		
		Для Каждого СтрМас из НайденныеСтрокиСерий Цикл
			
			НоваяСтрока = ТаблицаСерий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрМас);
			
			Если Не ЕстьУпаковки Тогда
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
				Если ПараметрыУказанияСерий.ПроверкаДокумента Тогда
					НоваяСтрока.КоличествоУпаковокНеОтгружать = НоваяСтрока.КоличествоНеОтгружать;
					Если Не ЕстьУпаковки Тогда
						НоваяСтрока.КоличествоУпаковокВДокументе = НоваяСтрока.КоличествоВДокументе;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТаблицаСерий,УникальныйИдентификаторФормы);
		
	Иначе
		ТаблицаТоваров = Новый ТаблицаЗначений;
		ТаблицаТоваров.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаТоваров.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
		ТаблицаТоваров.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаТоваров.Колонки.Добавить("НомераСтрокДокумента",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100)));
		Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			ТаблицаТоваров.Колонки.Добавить("КлючУникальности",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
		КонецЕсли;		
		
		Если ПараметрыУказанияСерий.ТоварВШапке Тогда
			
			Если Метаданные = Неопределено Тогда
				МетаданныеРеквизитов = Объект.Ссылка.Метаданные().Реквизиты;
			Иначе
				МетаданныеРеквизитов = Метаданные.Реквизиты;
			КонецЕсли;
			
			Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
				ТаблицаТоваров.Колонки.Добавить(СтрМас,МетаданныеРеквизитов[СтрМас].Тип);
			КонецЦикла;
			
			Если ПараметрыУказанияСерий.ПоляСвязи.Найти("УказыватьСерии") <> Неопределено Тогда
				Объект.УказыватьСерии = Истина;
			КонецЕсли;
			
			СтрокаТовара = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовара,Объект);
			Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
				СтрокаТовара.КлючУникальности = 1;
			КонецЕсли;		
		Иначе
			
			Если Метаданные = Неопределено Тогда
				МетаданныеРеквизитовТЧТовары = Объект.Ссылка.Метаданные().ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Реквизиты;
			Иначе
				МетаданныеРеквизитовТЧТовары = Метаданные.ТабличныеЧасти[ПараметрыУказанияСерий.ИмяТЧТовары].Реквизиты;
			КонецЕсли;
			
			Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
				ТаблицаТоваров.Колонки.Добавить(СтрМас,МетаданныеРеквизитовТЧТовары[СтрМас].Тип);
			КонецЦикла;
			
			Запрос = Новый Запрос;
			ТекстЗапроса = 
			"ВЫБРАТЬ " +
			ТекстВыбораТоваров;
			Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			ТекстЗапроса = ТекстЗапроса + "		
			|	ВЫБОР
			|		КОГДА НЕ ТаблицаТоваров.УказыватьСерии
			|			ТОГДА ТаблицаТоваров.НомерСтроки
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК КлючУникальности,";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "		
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Количество,
			|	ТаблицаТоваров.КоличествоУпаковок,
			|	ТаблицаТоваров.НомерСтроки
			|ПОМЕСТИТЬ ТаблицаТоваров
			|ИЗ
			|	&ТаблицаТоваров КАК ТаблицаТоваров
			|ГДЕ
			|	ТаблицаТоваров.СтатусУказанияСерий <> 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ " +
			ТекстВыбораТоваров;
			Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			ТекстЗапроса = ТекстЗапроса + "		
			|	ТаблицаТоваров.КлючУникальности,";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "		
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.Количество КАК Количество,
			|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	ТаблицаТоваров КАК ТаблицаТоваров
			|
			|УПОРЯДОЧИТЬ ПО " +
			ТекстВыбораТоваров;
			Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			ТекстЗапроса = ТекстЗапроса + "		
			|	ТаблицаТоваров.КлючУникальности,";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "		
			|	ТаблицаТоваров.Номенклатура,
			|	ТаблицаТоваров.Характеристика,
			|	ТаблицаТоваров.НомерСтроки";
			
			Запрос.Текст = ТекстЗапроса;
			
			ТЧ = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(,"Номенклатура,Характеристика,Количество,КоличествоУпаковок,НомерСтроки,СтатусУказанияСерий" + ТекстПоляСвязи);
			
			Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
				ТЧ[ТекущиеДанные.НомерСтроки - 1].УказыватьСерии = Истина;
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ТаблицаТоваров",ТЧ);
			
			ПоляГруппировки = "Номенклатура,Характеристика" + ТекстПоляСвязи;
			
			Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
				ПоляГруппировки = ПоляГруппировки + ",КлючУникальности";	
			КонецЕсли;
				
			ТекущаяГруппировка = Новый Структура(ПоляГруппировки);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			ТаблицаТоваров.Колонки.Добавить("НомерСтрокиДляСортировки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
			
			Количество               = 0;
			НомераСтрокДокумента     = "";
			НомерСтрокиДляСортировки = 0;
			
			НоваяСтрокаТоваров = Неопределено;
			
			Пока Выборка.Следующий() Цикл
				
				Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущаяГруппировка, Выборка, ПоляГруппировки) Тогда
					
					Если НоваяСтрокаТоваров <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров,ТекущаяГруппировка);
						НоваяСтрокаТоваров.Количество         = Количество;
						
						НомераСтрокДокумента = Лев(НомераСтрокДокумента, СтрДлина(НомераСтрокДокумента)-2);
						НоваяСтрокаТоваров.НомераСтрокДокумента     = НомераСтрокДокумента;
						НоваяСтрокаТоваров.НомерСтрокиДляСортировки = НомерСтрокиДляСортировки;
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ТекущаяГруппировка,Выборка);
					НоваяСтрокаТоваров       = ТаблицаТоваров.Добавить();
					НомерСтрокиДляСортировки = Выборка.НомерСтроки;
					Количество           = 0;
					НомераСтрокДокумента = "";
					
				КонецЕсли;
				
				Количество           = Количество + Выборка.Количество;
				НомераСтрокДокумента = НомераСтрокДокумента + Выборка.НомерСтроки + ", ";
				
			КонецЦикла;
			
			Если НоваяСтрокаТоваров <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоваров,ТекущаяГруппировка);
				НоваяСтрокаТоваров.Количество         = Количество;
				
				НомераСтрокДокумента = Лев(НомераСтрокДокумента, СтрДлина(НомераСтрокДокумента)-2);
				НоваяСтрокаТоваров.НомераСтрокДокумента = НомераСтрокДокумента;
				НоваяСтрокаТоваров.НомерСтрокиДляСортировки = НомерСтрокиДляСортировки;
			КонецЕсли;
			
			ТаблицаТоваров.Сортировать("НомерСтрокиДляСортировки");
			ТаблицаТоваров.Колонки.Удалить("НомерСтрокиДляСортировки");
			
		КонецЕсли;
		СтруктураДляВременногоХранилища = Новый Структура;
		СтруктураДляВременногоХранилища.Вставить("ТаблицаТоваров",ТаблицаТоваров);
		СтруктураДляВременногоХранилища.Вставить("ТаблицаСерий",Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить());
		
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СтруктураДляВременногоХранилища,УникальныйИдентификаторФормы);
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = Новый Структура("Номенклатура,Характеристика,СтатусУказанияСерий,ХарактеристикиИспользуются"+ТекстПоляСвязи);
	ПараметрыФормыУказанияСерий.Вставить("НомераСтрокДокумента", НомераСтрокДокумента); 
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыФормыУказанияСерий,Объект);
		Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			ПараметрыФормыУказанияСерий.Вставить("КлючУникальности",1);		
		КонецЕсли;
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыФормыУказанияСерий,ТекущиеДанные);
		Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			ПараметрыФормыУказанияСерий.Вставить("КлючУникальности",0);		
			ПараметрыФормыУказанияСерий.УказыватьСерии = Истина;		
		КонецЕсли;
	КонецЕсли;
	
	
	ПараметрыФормыУказанияСерий.Вставить("АдресВоВременномХранилище",АдресВоВременномХранилище);
	ПараметрыФормыУказанияСерий.Вставить("РегистрироватьСерии",РегистрироватьСерии);
	ПараметрыФормыУказанияСерий.Вставить("Склад",?(СкладыВТЧ,ТекущиеДанные[ПараметрыУказанияСерий.ИмяПоляСклад],Объект[ПараметрыУказанияСерий.ИмяПоляСклад]));
	ПараметрыФормыУказанияСерий.Вставить("Помещение",
		?(ПараметрыУказанияСерий.ИмяПоляПомещение = Неопределено, Справочники.СкладскиеПомещения.ПустаяСсылка(),Объект[ПараметрыУказанияСерий.ИмяПоляПомещение]));
	ПараметрыФормыУказанияСерий.Вставить("ТолькоПросмотр", ПараметрыУказанияСерий.ТолькоПросмотр);
	ПараметрыФормыУказанияСерий.Вставить("Количество",КоличествоВДокументе);
	ПараметрыФормыУказанияСерий.Вставить("АдресВоВременномХранилище",АдресВоВременномХранилище);
	ПараметрыФормыУказанияСерий.Вставить("СерииВТЧТовары", ПараметрыУказанияСерий.ИмяТЧСерии = ПараметрыУказанияСерий.ИмяТЧТовары);
	Если Объект.Свойство("Ссылка") Тогда
		ПараметрыФормыУказанияСерий.Вставить("Регистратор",Объект.Ссылка);
	КонецЕсли;
	ПараметрыФормыУказанияСерий.Вставить("ПараметрыУказанияСерий",ПараметрыУказанияСерий);
	
	Если ПараметрыУказанияСерий.ПроверкаДокумента Тогда
		ИмяФормы = "Обработка.ПодборСерийВДокументы.Форма.ФормаВводаСерийПриПроверке";
	ИначеЕсли РегистрироватьСерии Тогда
		ИмяФормы = "Обработка.ПодборСерийВДокументы.Форма.ФормаРегистрацииСерий";
	Иначе
		ИмяФормы = "Обработка.ПодборСерийВДокументы.Форма.ФормаПодбораСерий";
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий.Вставить("ИмяФормы", ИмяФормы);
	
	Возврат ПараметрыФормыУказанияСерий;
	
КонецФункции

// Процедура извлекает из временного хранилища серии, указанные в форме редактирования серий, помещает эти строки в ТЧ "Серии" документа,
// перерасчитывает статусы указания серий строках товаров
// Параметры
//		Объект - ДанныеФормыСтуктура - основной реквизит формы документа
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//      ПараметрыФормыУказанияСерий - структура, которая была передана в форму редактирования серий как параметры формы
Процедура ОбработатьУказаниеСерий(Объект, ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий, СтруктураДействий = Неопределено) Экспорт
	
	//Если обрабатывается результаты формы подбора серий,
	//то серии целиком загружаются из обработки
	Если Не ПараметрыФормыУказанияСерий.РегистрироватьСерии Тогда 
		
		СтруктураВозврата = ПолучитьИзВременногоХранилища(ПараметрыФормыУказанияСерий.АдресВоВременномХранилище);
		Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Загрузить(СтруктураВозврата.ТаблицаСерий);
		
		Если ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			Если ПараметрыУказанияСерий.ТоварВШапке Тогда
				Объект.УказыватьСерии = СтруктураВозврата.ТаблицаСерий.Количество() > 0;
			Иначе
				ТаблицаТоваров = СтруктураВозврата.ТаблицаТоваров;
				Для Каждого СтрТабл из ТаблицаТоваров Цикл
					НомераСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрТабл.НомераСтрокДокумента, ", ");
					
					Для Каждого НомерСтроки из НомераСтрок Цикл
						
						СтрокаТабличнойЧасти = Объект[ПараметрыУказанияСерий.ИмяТЧТовары][Число(Формат(НомерСтроки,"ЧГ=0"))-1];
						СтрокаТабличнойЧасти.УказыватьСерии = СтрТабл.УказыватьСерии;
						
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
		
		Возврат;
	КонецЕсли;
	
	//Удалим прежние строки серий
	ТекстПоляСвязи = "";
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска,ПараметрыФормыУказанияСерий);
	НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрМас из НайденныеСтрокиСерий Цикл
		
		Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Удалить(СтрМас);
		
	КонецЦикла;
	
	//Добавим новые строки серий
	ТаблицаСерий = ПолучитьИзВременногоХранилища(ПараметрыФормыУказанияСерий.АдресВоВременномХранилище);
	
	СтрокиСерийДляОбработки =  Новый Массив;	
	
	Для Каждого СтрТабл из ТаблицаСерий Цикл
		
		НоваяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ПараметрыФормыУказанияСерий);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
		
		СтрокиСерийДляОбработки.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	Если ПараметрыУказанияСерий.ИмяТЧСерии =ПараметрыУказанияСерий. ИмяТЧТовары Тогда
		Возврат;
	КонецЕсли;
	
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	
	Если ЕстьУпаковки Тогда
		КоличествоСерий = ТаблицаСерий.Итог("КоличествоУпаковок");
	Иначе
		КоличествоСерий = ТаблицаСерий.Итог("Количество");
	КонецЕсли;	
	
	КоличествоТоваров = ПараметрыФормыУказанияСерий.Количество;
	
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		
		СерииУказаныПолностью = (КоличествоСерий = КоличествоТоваров);
		
		ЧетныйСтатус = Объект.СтатусУказанияСерий % 2 = 0;
		
		Если Не ЧетныйСтатус
			И СерииУказаныПолностью Тогда
			Объект.СтатусУказанияСерий = Объект.СтатусУказанияСерий + 1;
		ИначеЕсли ЧетныйСтатус
			И Не СерииУказаныПолностью Тогда
			Объект.СтатусУказанияСерий = Объект.СтатусУказанияСерий - 1;
		КонецЕсли;
		
	Иначе
		
		НайденныеСтрокиТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
		
		Если КоличествоСерий <> КоличествоТоваров 
			И СтруктураДействий <> Неопределено
			И СтруктураДействий.Свойство("ОбновлятьКоличествоТоваровПриРегистрацииСерий")
			И СтруктураДействий.ОбновлятьКоличествоТоваровПриРегистрацииСерий Тогда
			
			ЕстьПересчетКоличества = Ложь;
			
			Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
				СтруктураДействий.Удалить("ПересчитатьКоличествоЕдиниц");
				ЕстьПересчетКоличества = Истина;
			КонецЕсли;
			
			Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
				СтруктураДействий.Удалить("ПересчитатьКоличествоУпаковок");
				ЕстьПересчетКоличества = Истина;
			КонецЕсли;
			
			КоличествоКРаспределению = КоличествоСерий - КоличествоТоваров;
			
			Для Каждого СтрокаТоваров из НайденныеСтрокиТоваров Цикл
				Дельта = КоличествоКРаспределению;
				
				Если ЕстьУпаковки Тогда
					Если -Дельта > СтрокаТоваров.КоличествоУпаковок Тогда
						Дельта = -СтрокаТоваров.КоличествоУпаковок;
						СтрокаТоваров.КоличествоУпаковок = 0;
					Иначе
						СтрокаТоваров.КоличествоУпаковок = СтрокаТоваров.КоличествоУпаковок + Дельта;
					КонецЕсли;
					
					Если ЕстьПересчетКоличества Тогда
						СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
					КонецЕсли;
				Иначе
					Если -Дельта > СтрокаТоваров.Количество Тогда
						Дельта = -СтрокаТоваров.Количество;
						СтрокаТоваров.Количество = 0;
					Иначе
						СтрокаТоваров.Количество = СтрокаТоваров.Количество + Дельта;
					КонецЕсли;
					
					Если ЕстьПересчетКоличества Тогда
						СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
					КонецЕсли;
				КонецЕсли;
				
				КоличествоТоваров = КоличествоТоваров + Дельта;
				
				КоличествоКРаспределению = КоличествоКРаспределению - Дельта;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоваров, СтруктураДействий, Неопределено);
				
				Если КоличествоКРаспределению = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СерииУказаныПолностью = (КоличествоСерий = КоличествоТоваров
								И КоличествоТоваров > 0);
		
		Для Каждого СтрМас из НайденныеСтрокиТоваров Цикл
			
			Если СтрМас.СтатусУказанияСерий = 11 Тогда
				ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий, НайденныеСтрокиТоваров, СтрокиСерийДляОбработки);
				Прервать;
			КонецЕсли;
			
			ЧетныйСтатус = СтрМас.СтатусУказанияСерий % 2 = 0;
			
			Если КоличествоСерий = 0
				И ПараметрыУказанияСерий.ПодготовкаОрдера Тогда
				СтрМас.СтатусУказанияСерий = 11;
			ИначеЕсли Не ЧетныйСтатус
				И СерииУказаныПолностью Тогда
				СтрМас.СтатусУказанияСерий = СтрМас.СтатусУказанияСерий + 1;
			ИначеЕсли ЧетныйСтатус
				И Не СерииУказаныПолностью Тогда
				СтрМас.СтатусУказанияСерий = СтрМас.СтатусУказанияСерий - 1;
			КонецЕсли;
			
			Если ПараметрыУказанияСерий.ЭтоПеремещениеМеждуСкладами Тогда
				
				ЧетныйСтатус = СтрМас.СтатусУказанияСерийОтправитель % 2 = 0;
				
				Если Не ЧетныйСтатус
					И СерииУказаныПолностью Тогда
					СтрМас.СтатусУказанияСерийОтправитель = СтрМас.СтатусУказанияСерийОтправитель + 1;
				ИначеЕсли ЧетныйСтатус
					И Не СерииУказаныПолностью Тогда
					СтрМас.СтатусУказанияСерийОтправитель = СтрМас.СтатусУказанияСерийОтправитель - 1;
				КонецЕсли;
				
				ЧетныйСтатус = СтрМас.СтатусУказанияСерийПолучатель % 2 = 0;
				
				Если Не ЧетныйСтатус
					И СерииУказаныПолностью Тогда
					СтрМас.СтатусУказанияСерийПолучатель = СтрМас.СтатусУказанияСерийПолучатель + 1;
				ИначеЕсли ЧетныйСтатус
					И Не СерииУказаныПолностью Тогда
					СтрМас.СтатусУказанияСерийПолучатель = СтрМас.СтатусУказанияСерийПолучатель - 1;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает статусы указания серий в строках товаров, если это необходимо, переподчиняет строки серий другим строкам
// ТЧ "Товары"
// Параметры
//      Объект - ДанныеФормыСтуктура - основной реквизит формы документа
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//      ТекущиеДанныеИдентификатор - идентификатор текущей строки товаров в форме документа
//      КэшированныеЗначения - структура кеша реквизитов текущей строки товаров
//      РазделениеПоВариантамПродажи - признак разделения серий по вариантам продажи
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения, РазделениеПоВариантамПродажи = Ложь) Экспорт
	
	Если ТекущаяСтрокаИдентификатор <> Неопределено Тогда
		ТекущаяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	Иначе
		ТекущаяСтрока = Неопределено //значит строку удалили;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
		НайденныеСтрокиТоваров = Новый Массив;
		НайденныеСтрокиТоваров.Добавить(ТекущаяСтрока);
		ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,НайденныеСтрокиТоваров);
		Возврат;
	КонецЕсли;
			
	ТекстПоляСвязи = "";
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
	КонецЦикла;
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	ЕстьПризнакУказанияСерий = ПараметрыУказанияСерий.ПоляСвязи.Найти("УказыватьСерии") <> Неопределено;
	
	
	//Если строка новая (в т.ч. скопированная) или используется разделение по вариантам продажи - будет закешированно Неопределено
	//Тогда не нужно искать строки со старыми значениями
	Если КэшированныеЗначения.Номенклатура <> Неопределено И Не РазделениеПоВариантамПродажи Тогда
		СтруктураПоискаСтарыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСтарыеЗначения,КэшированныеЗначения);
		
		НайденныеСтрокиТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
		НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
	Иначе
		НайденныеСтрокиТоваров = Новый Массив;
		НайденныеСтрокиСерий   = Новый Массив;
	КонецЕсли;
	
	//Если поменялись ключевые поля:
	// - возможно нужно переподчинять серии
	// - статус указания серий нужно пересчитвать в строках по новым ключевым полям и по старым
	Если ТекущаяСтрока <> Неопределено 
		И Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(КэшированныеЗначения, ТекущаяСтрока, "Номенклатура,Характеристика"+ТекстПоляСвязи) Тогда
		
		ПереподчинитьСерии    = Ложь;
		ПересчитатьКоличество = Ложь;
		//Определелим, нужно ли переподчинять серии. Это нужно если:
		//- серии относились только к одной строке
		//- новые и старые ключевые поля поддерживают одну политику учета
		//Если строки нужно переподчинять, то определим, нужно ли пересчитывать количество
		Если КэшированныеЗначения.Номенклатура <> Неопределено 
			И НайденныеСтрокиТоваров.Количество() = 0 Тогда//т.к. строк с такими ключевыми полями не осталось больше не осталось, значит такая строка была одна
			
			Если КэшированныеЗначения.Номенклатура = ТекущаяСтрока.Номенклатура Тогда //т.е. изменились поля, от которых политика учета не зависит
				Если (Не ЕстьПризнакУказанияСерий 
					Или КэшированныеЗначения.УказыватьСерии = ТекущаяСтрока.УказыватьСерии) Тогда
					ПереподчинитьСерии = Истина;
				Иначе
					ПереподчинитьСерии = Ложь;
				КонецЕсли;
			Иначе //будем переподчинять, если не поменялся вид номенклатуры
				ВидНоменклатурыТекущий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КэшированныеЗначения.Номенклатура,"ВидНоменклатуры");
				ВидНоменклатурыНовый   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ВидНоменклатуры");
				
				ПереподчинитьСерии = (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
			КонецЕсли;
			
			Если ПереподчинитьСерии
				И ЕстьУпаковки
				И КэшированныеЗначения.Упаковка <> ТекущаяСтрока.Упаковка Тогда
				
				ПересчитатьКоличество = Истина;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		//Если строка удалена, то в качестве текущих значений будет передано Неопределено
		//Тогда не нужно искать строки с новыми значениями
		СтруктураПоискаНовыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаНовыеЗначения,ТекущаяСтрока);
		
		НайденныеСтрокиТоваровНовые = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоискаНовыеЗначения);    
		
		//Добавим строки по новым ключевым полям в массив строк для пересчета статуса указания серий 
		
		//При объединении массивов будем обходить меньший массив
		Если НайденныеСтрокиТоваров.Количество() < НайденныеСтрокиТоваровНовые.Количество() Тогда
			Для Каждого СтрМас из НайденныеСтрокиТоваров Цикл
				НайденныеСтрокиТоваровНовые.Добавить(СтрМас);
			КонецЦикла;
			НайденныеСтрокиТоваров = НайденныеСтрокиТоваровНовые;
		Иначе
			Для Каждого СтрМас из НайденныеСтрокиТоваровНовые Цикл
				НайденныеСтрокиТоваров.Добавить(СтрМас);
			КонецЦикла;
		КонецЕсли;
		
		//Определим массив строк серий, который должен участвовать в пересчете статусов,
		Если ПереподчинитьСерии Тогда		
			//Сначала переподчиним серии
			
			Для Каждого СтрМас из НайденныеСтрокиСерий Цикл
				
				ЗаполнитьЗначенияСвойств(СтрМас,ТекущаяСтрока, "Номенклатура,Характеристика"+ТекстПоляСвязи);
				
				Если ПересчитатьКоличество Тогда
					ОбработкаТабличнойЧастиСервер.ПересчитатьКоличествоУпаковокВСтрокеТЧ(СтрМас, Новый Структура("ПересчитатьКоличествоУпаковок"), КэшированныеЗначения);
				КонецЕсли;	
				
			КонецЦикла;
			
			//Если серии переподчинены, то достаточно произвести поиск по новым полям поиска
			НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			
		Иначе	
			НайденныеСтрокиСерийНовые = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			
			//Если серии не переподчинены, то к строкам по старым ключевым полям нужно добавить строки по новым ключевым полям
			
			//При объединении массивов будем обходить меньший массив
			Если НайденныеСтрокиСерий.Количество() < НайденныеСтрокиСерийНовые.Количество() Тогда
				Для Каждого СтрМас из НайденныеСтрокиСерий Цикл
					НайденныеСтрокиСерийНовые.Добавить(СтрМас);
				КонецЦикла;
				НайденныеСтрокиСерий = НайденныеСтрокиСерийНовые;
			Иначе
				Для Каждого СтрМас из НайденныеСтрокиСерийНовые Цикл
					НайденныеСтрокиСерий.Добавить(СтрМас);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденныеСтрокиТоваров.Количество() > 0 Тогда 
		ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,НайденныеСтрокиТоваров,НайденныеСтрокиСерий);
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает статусм указания серий для товара в шапке документа, если это необходимо, переподчиняет строки серий
// Параметры
//		Объект - ДанныеФормыСтуктура - основной реквизит формы документа
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//		КэшированныеЗначения - структура кеша реквизитов текущей строки товаров
Процедура ЗаполнитьСтатусыУказанияСерийПриИзмененииТовараВШапке(Объект, Знач ПараметрыУказанияСерий, КэшированныеЗначения) Экспорт
	
	ТекстПоляСвязи = "";
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ","+ ТекстПоляСвязи + СтрМас  ;
	КонецЦикла;
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	
	
	//Если поменялись ключевые поля:
	// - возможно нужно переподчинять серии
	// - статус указания серий нужно пересчитвать в строках по новым ключевым полям и по старым
	
	ИзменилисьКлючевыеПоля = Ложь;
	
	Если КэшированныеЗначения.НоменклатураШапка <> Объект.Номенклатура
		Или  КэшированныеЗначения.ХарактеристикаШапка <> Объект.Характеристика Тогда
		ИзменилисьКлючевыеПоля = Истина;
	Иначе	
		Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
			Если КэшированныеЗначения[СтрМас+"Шапка"] <> Объект[СтрМас] Тогда
				ИзменилисьКлючевыеПоля = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПересчитатьСтатус = Ложь;

	Если ИзменилисьКлючевыеПоля Тогда
		
		ПереподчинитьСерии    = Ложь;
		ПересчитатьКоличество = Ложь;
		//Определелим, нужно ли переподчинять серии. Это нужно если:
		//- серии относились только к одной строке
		//- новые и старые ключевые поля поддерживают одну политику учета
		//Если строки нужно переподчинять, то определим, нужно ли пересчитывать количество
		
		Если КэшированныеЗначения.НоменклатураШапка = Объект.Номенклатура Тогда //т.е. изменились поля, от которых политика учета не зависит
			ПереподчинитьСерии = Истина;
		Иначе //будем переподчинять, если не поменялся вид номенклатуры
			ВидНоменклатурыТекущий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КэшированныеЗначения.НоменклатураШапка,"ВидНоменклатуры");
			ВидНоменклатурыНовый   = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Номенклатура, "ВидНоменклатуры");
			
			ПереподчинитьСерии = (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
			ПересчитатьСтатус  = Не (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
		КонецЕсли;
		
		Если ПереподчинитьСерии
			И ЕстьУпаковки
			И КэшированныеЗначения.УпаковкаШапка <> Объект.Упаковка Тогда
			
			ПересчитатьКоличество = Истина;
			
		КонецЕсли;
			
		Если ПереподчинитьСерии Тогда		
			СтруктураПоискаСтарыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
			Для Каждого КлючИЗначение из СтруктураПоискаСтарыеЗначения Цикл
				СтруктураПоискаСтарыеЗначения[КлючИЗначение.Ключ] = КэшированныеЗначения[КлючИЗначение.Ключ+"Шапка"]	
			КонецЦикла;
			
			НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
			
			Для Каждого СтрМас из НайденныеСтрокиСерий Цикл
				
				ЗаполнитьЗначенияСвойств(СтрМас,Объект, "Номенклатура,Характеристика"+ТекстПоляСвязи);
				
				Если ПересчитатьКоличество Тогда
					ОбработкаТабличнойЧастиСервер.ПересчитатьКоличествоУпаковокВСтрокеТЧ(СтрМас, Новый Структура("ПересчитатьКоличествоУпаковок"), КэшированныеЗначения);
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьУпаковки Тогда
		Если КэшированныеЗначения.КоличествоУпаковокШапка <> Объект.КоличествоУпаковок Тогда
			ПересчитатьСтатус = Истина;
		КонецЕсли;
	Иначе
		Если КэшированныеЗначения.КоличествоШапка <> Объект.Количество Тогда
			ПересчитатьСтатус = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПересчитатьСтатус Тогда 
		ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий,Неопределено,Неопределено);
	КонецЕсли;
	
КонецПроцедуры

//Процедура заполняет накладную сериями, указанными в заказе
//		ДокументОбъект - ДокументОбъект, в котором нужно заполнить серии
//      ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
Процедура ЗаполнитьСерииПоЗаказам(Объект,ПараметрыУказанияСерий) Экспорт
	
	ЕстьТоварВШапке = ПараметрыУказанияСерий.Свойство("Шапка");
	
	Если ЕстьТоварВШапке Тогда
		Если Не ПараметрыУказанияСерий.ТЧ.ИспользоватьСерииНоменклатуры
			И Не ПараметрыУказанияСерий.Шапка.ИспользоватьСерииНоменклатуры Тогда
			Возврат;
		КонецЕсли;
		ПараметрыУказанияСерийЗаполнение = ПараметрыУказанияСерий.ТЧ;
	Иначе
		Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
			Возврат;
		КонецЕсли;
		ПараметрыУказанияСерийЗаполнение = ПараметрыУказанияСерий;
	КонецЕсли;
	
	СкладыВТЧ = ПараметрыУказанияСерийЗаполнение.ПоляСвязи.Найти("Склад") <> Неопределено;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.ДокументРезерваСерий,";
	Если СкладыВТЧ Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ТаблицаТовары.Склад";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	&Склад КАК Склад";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервыСерийТоваров.Номенклатура,
	|	РезервыСерийТоваров.Характеристика,
	|	РезервыСерийТоваров.ДокументРезерваСерий,
	|	РезервыСерийТоваров.Склад,
	|	РезервыСерийТоваров.Серия,
	|	СУММА(РезервыСерийТоваров.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		РезервыСерийТоваровОстатки.Номенклатура КАК Номенклатура,
	|		РезервыСерийТоваровОстатки.Характеристика КАК Характеристика,
	|		РезервыСерийТоваровОстатки.ДокументРезерва КАК ДокументРезерваСерий,
	|		РезервыСерийТоваровОстатки.Склад КАК Склад,
	|		РезервыСерийТоваровОстатки.Серия КАК Серия,
	|		РезервыСерийТоваровОстатки.КоличествоОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.РезервыСерийТоваров.Остатки(
	|				,
	|				(ДокументРезерва, Склад, Номенклатура, Характеристика) В
	|						(ВЫБРАТЬ
	|							ТаблицаТовары.ДокументРезерваСерий КАК ДокументРезерва,
	|							ТаблицаТовары.Склад,
	|							ТаблицаТовары.Номенклатура,
	|							ТаблицаТовары.Характеристика
	|						ИЗ
	|							ТаблицаТовары КАК ТаблицаТовары)
	|					И Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК РезервыСерийТоваровОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РезервыСерийТоваров.Номенклатура,
	|		РезервыСерийТоваров.Характеристика,
	|		РезервыСерийТоваров.ДокументРезерва,
	|		РезервыСерийТоваров.Склад,
	|		РезервыСерийТоваров.Серия,
	|		РезервыСерийТоваров.Количество
	|	ИЗ
	|		РегистрНакопления.РезервыСерийТоваров КАК РезервыСерийТоваров
	|	ГДЕ
	|		РезервыСерийТоваров.Регистратор = &Регистратор
	|		И РезервыСерийТоваров.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)) КАК РезервыСерийТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	РезервыСерийТоваров.Номенклатура,
	|	РезервыСерийТоваров.Серия,
	|	РезервыСерийТоваров.Склад,
	|	РезервыСерийТоваров.ДокументРезерваСерий,
	|	РезервыСерийТоваров.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	РезервыСерийТоваров.Склад,
	|	РезервыСерийТоваров.ДокументРезерваСерий,
	|	РезервыСерийТоваров.Номенклатура,
	|	РезервыСерийТоваров.Характеристика";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Регистратор",Объект.Ссылка);
	
	Если СкладыВТЧ Тогда
		Запрос.УстановитьПараметр("ТаблицаТовары",
			Объект[ПараметрыУказанияСерийЗаполнение.ИмяТЧТовары].Выгрузить(,"Номенклатура,Характеристика,ДокументРезерваСерий,Склад"));
		ПоляГруппировки = "Характеристика,Номенклатура,ДокументРезерваСерий,Склад";
	Иначе
		ТаблицаТовары = Объект[ПараметрыУказанияСерийЗаполнение.ИмяТЧТовары].Выгрузить(,"Номенклатура,Характеристика,ДокументРезерваСерий");
		
		Если ЕстьТоварВШапке Тогда
			СтрокаТоваров = ТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоваров, Объект);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТаблицаТовары",ТаблицаТовары);
		Запрос.УстановитьПараметр("Склад",Объект[ПараметрыУказанияСерийЗаполнение.ИмяПоляСклад]);
		ПоляГруппировки = "Характеристика,Номенклатура,ДокументРезерваСерий";
	КонецЕсли;
		
	Выборка = Запрос.Выполнить().Выбрать();

	ТекущаяГруппировка = Новый Структура(ПоляГруппировки);
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(ТекущаяГруппировка, Выборка, ПоляГруппировки) Тогда
			
			ЗаполнитьЗначенияСвойств(ТекущаяГруппировка, Выборка);
			
			НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерийЗаполнение.ИмяТЧСерии].НайтиСтроки(ТекущаяГруппировка);
			
			Для Каждого СтрМас из НайденныеСтрокиСерий Цикл
				
				Объект[ПараметрыУказанияСерийЗаполнение.ИмяТЧСерии].Удалить(СтрМас);
				
			КонецЦикла;
			
		КонецЕсли;	
			
		НоваяСтрокаСерий = Объект[ПараметрыУказанияСерийЗаполнение.ИмяТЧСерии].Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСерий,Выборка);
		
	КонецЦикла;	
	
КонецПроцедуры

//Возвращает параметры указания серий для товаров, указанных в документе
//Параметры
//			Объект - ДокументОбъект или ДанныеФормыСтруктура - документ, для которого нужно сфомировать параметры проверки
//Возвращаемое значение
//			Тип Структура
//				Состав полей определяется требованиями фукнции ОбработкаТабличнойЧастиСервер.ЗаполнитьСтатусыУказанияСерий
Функция ПараметрыУказанияСерий(Объект, МенеджерОбъекта) Экспорт
	
	ИменаРеквизитов = МенеджерОбъекта.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий();
	ЗначенияРеквизитов = ЗначенияРеквизитовДляЗаполненияПараметровУказанияСерий(Объект, ИменаРеквизитов);
	Возврат МенеджерОбъекта.ПараметрыУказанияСерий(ЗначенияРеквизитов);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции заполнения служебных реквизитов по номенклатуре.

// Получает служебные реквизиты по номенклатуре в структуре
//
// Параметры:
// 		СтруктураДанных - Структура, СтрокаТаблицыЗначений - Структура данных, в которой необходимо заполнить поля
// 		Реквизиты - Строка - Строка с перечислением через запятую имен реквизитов для заполнения
//
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтруктуре(СтруктураДанных, СтруктураДействий) Экспорт
	
	СтруктураДопДанных = ОбработкаТабличнойЧастиСервер.ПолучитьСтруктуруДополнительнойИнформации(СтруктураДействий);
	
	ТаблицаВыгрузки = Новый ТаблицаЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	Для Каждого Источник Из СтруктураДопДанных.СтруктураИсточников Цикл
		ТаблицаВыгрузки.Колонки.Добавить(Источник.Ключ, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(ТаблицаВыгрузки.Добавить(), СтруктураДанных);
	
	Запрос = Новый Запрос(ОбработкаТабличнойЧастиСервер.ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(СтруктураДействий, СтруктураДопДанных));
	Запрос.УстановитьПараметр("КоллекцияДанных", ТаблицаВыгрузки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка, СтруктураДопДанных.РеквизитыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизитыВСтруктуре()

// Заполняет служебные реквизиты по номенклатуре в коллекции
//
// Параметры:
// 		КоллекцияДанных - ДанныеФормыКоллекция, ТаблицаЗначний - Таблица, в которой необходимо заполнить реквизиты
// 		Реквизиты - Строка - Строка с перечислением через запятую имен реквизитов для заполнения
//
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(КоллекцияДанных, СтруктураДействий) Экспорт
	
	СтруктураДопДанных = ОбработкаТабличнойЧастиСервер.ПолучитьСтруктуруДополнительнойИнформации(СтруктураДействий);
	
	Запрос = Новый Запрос(ОбработкаТабличнойЧастиСервер.ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(СтруктураДействий, СтруктураДопДанных));
	Запрос.УстановитьПараметр("КоллекцияДанных", КоллекцияДанных.Выгрузить( ,"НомерСтроки" + СтруктураДопДанных.РеквизитыВыгрузки));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Для Н=0 По КоллекцияДанных.Количество()-1 Цикл
		Выборка.Следующий(); // Количество строк в выборке по запросу всегда равно количеству строк в коллекции
		ЗаполнитьЗначенияСвойств(КоллекцияДанных[Н], Выборка, СтруктураДопДанных.РеквизитыЗаполнения);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизитыВКоллекции()

// Процедура заполнения колонок "ХарактеристикиИспользуются" в формах.
// Параметры:
//	ТаблицаФормы - ДанныеФормыКоллекция
//	ПараметрыЗаполнения - структура
//		возможное поле (необязательное):
//  СуффиксДопРеквизита - суффикс реквизитов "Номенклатура" и "Характеристика", если в ТЧ есть такие реквизиты,
//						например, "Оприходование", если в ТЧ помимо "Номенклатура" и "Характеристика" есть еще
//						"НоменклатураОприходование" и "ХарактеристикаОприходование"
Процедура ЗаполнитьПризнакИспользованияХарактеристик(ТаблицаФормы,ПараметрыЗаполнения = Неопределено) Экспорт
	
	Перем СуффиксДопРеквизита;
	
	Если ТаблицаФормы.Количество() = 0
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения <> Неопределено Тогда
		
		ПараметрыЗаполнения.Свойство("СуффиксДопРеквизита",СуффиксДопРеквизита);	
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,";
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "	
	|	ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +"  КАК Номенклатура" + СуффиксДопРеквизита +","; 
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "	
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,";
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "	
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)	
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются" + СуффиксДопРеквизита +",";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	СтрокаДопРеквизитов = ?(Не ЗначениеЗаполнено(СуффиксДопРеквизита), "", ",Номенклатура"+СуффиксДопРеквизита);
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"+СтрокаДопРеквизитов));
	
	ТаблицаПризнаков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл из ТаблицаФормы Цикл
		
		СтрокаХарактеристик = ТаблицаПризнаков[СтрТабл.НомерСтроки-1];
		
		СтрТабл.ХарактеристикиИспользуются = СтрокаХарактеристик.ХарактеристикиИспользуются;
		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			СтрТабл["ХарактеристикиИспользуются"+СуффиксДопРеквизита] = СтрокаХарактеристик["ХарактеристикиИспользуются"+СуффиксДопРеквизита];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ВызватьИсключениеПоОшибкеШаблонаНаименования(ИмяОперанда)
	
	ШаблонСообщенияОбОшибке = НСтр("ru = 'Невозможно рассчитать наименование по шаблону. Ошибка в имени операнда ""%ИмяОперанда%"".'");
	ТекстСообщенияОбОшибке  = СтрЗаменить(ШаблонСообщенияОбОшибке, "%ИмяОперанда%", ИмяОперанда);
	
	ВызватьИсключение ТекстСообщенияОбОшибке;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры работы с сериями.

Функция ЗначенияРеквизитовДляЗаполненияПараметровУказанияСерий(Объект, ИменаРеквизитов)
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда
		Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, ИменаРеквизитов);
	Иначе
		Структура = Новый Структура(ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(Структура, Объект);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

// Процедура заполнения колонки "СтатусУказанияСерий" в формах, в которых серия редактируется в одной таблице с товарами
// Параметры:
//	Объект - объект, в котором нужно заполнить статусы. Тип: ДанныеФормыСтруктура или ДокументОбъект
//	ТЧ - табличная часть
//  ПараметрыУказанияСерий - структура параметров указания серий, возвращаемая соотвествующей процедурой модуля менеджера документа
//  СтрокиТоваровДляОбработки - массив строк товаров, в которых нужно заполнить статусы указания серий,
//									если передано "Неопределено", то статусы заполняются во всех строках
Процедура ЗаполнитьСтатусУказанияСерииВТЧТовары(Объект,ТЧ,ПараметрыУказанияСерий,СтрокиТоваровДляОбработки = Неопределено)
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
			Для Каждого СтрТабл из ТЧ Цикл
				СтрТабл.СтатусУказанияСерий = 0;
				СтрТабл.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
			КонецЦикла;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий,
	|	ТаблицаТоваров.НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА (НЕ СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL )
	|			ТОГДА ВЫБОР
	|					КОГДА &ОтборИзЯчеек
	|							ИЛИ &РазмещениеВЯчейки
	|						ТОГДА ВЫБОР
	|								КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|									ТОГДА 10
	|								КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|									ТОГДА 8
	|								КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
	|										И СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|										И &ФактОтбора
	|									ТОГДА 4
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОГДА &ОтражениеРезультатовПересчетов
	|							ИЛИ &КонтрольОтгрузки
	|							ИЛИ &Пересчет
	|						ТОГДА ВЫБОР
	|								КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|									ТОГДА 10
	|								КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|									ТОГДА 8
	|								КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
	|										И СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|									ТОГДА 4
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтраженииИзлишковНедостачПорчи
	|							И (&ЭтоОрдер
	|								ИЛИ (НЕ Склады.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач))
	|							И (&ОтражениеИзлишков
	|								ИЛИ &ОтражениеНедостач
	|								ИЛИ &ОтражениеПорчи)
	|						ТОГДА ВЫБОР
	|								КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|									ТОГДА 10
	|								КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|									ТОГДА 8
	|								КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтраженииИзлишковНедостачПорчи
	|										И СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|									ТОГДА 4
	|								КОГДА СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтраженииИзлишковНедостачПорчи
	|										И (НЕ СкладыПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий)
	|									ТОГДА 2
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТовары.Серия КАК Справочник.СерииНоменклатуры).ВидНоменклатуры = ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СерияУказанаКорректно
	|ПОМЕСТИТЬ ТаблицаСтатусов
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК СкладыПолитикиУчетаСерий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО СкладыПолитикиУчетаСерий.Склад = Склады.Ссылка
	|		ПО (ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = СкладыПолитикиУчетаСерий.Ссылка)
	|			И (СкладыПолитикиУчетаСерий.Склад = &Склад)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтатусов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСтатусов.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ТаблицаСтатусов.СерияУказанаКорректно КАК СерияУказанаКорректно
	|ИЗ
	|	ТаблицаСтатусов КАК ТаблицаСтатусов
	|ГДЕ
	|	(ТаблицаСтатусов.СтарыйСтатусУказанияСерий <> ТаблицаСтатусов.СтатусУказанияСерий
	|			ИЛИ (НЕ ТаблицаСтатусов.СерияУказанаКорректно))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Если СтрокиТоваровДляОбработки = Неопределено Тогда
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТЧ.Выгрузить(,"НомерСтроки,Номенклатура,СтатусУказанияСерий,Серия"));
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТЧ.Выгрузить(СтрокиТоваровДляОбработки,"НомерСтроки,Номенклатура,СтатусУказанияСерий, Серия"));
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	
 	УстановитьПараметрыЗапросаПоПараметрамУказанияСерий(Запрос,ПараметрыУказанияСерий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрТабл = ТЧ[Выборка.НомерСтроки - 1];
		
		СтрТабл.СтатусУказанияСерий = Выборка.СтатусУказанияСерий;
		Если Выборка.СтатусУказанияСерий = 0
			Или Не Выборка.СерияУказанаКорректно Тогда
			СтрТабл.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаПоПараметрамУказанияСерий(Запрос,ПараметрыУказанияСерий)
	
	Запрос.УстановитьПараметр("ЭтоОрдер", ПараметрыУказанияСерий.ЭтоОрдер);
	
	Запрос.УстановитьПараметр("ЭтоНакладная", ПараметрыУказанияСерий.ЭтоНакладная);
	
	Запрос.УстановитьПараметр("ЭтоЗаказ", ПараметрыУказанияСерий.ЭтоЗаказ);
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаВРозницу) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаВРозницу", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаВРозницу", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаКлиенту", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаКлиенту", Ложь);
	КонецЕсли;
		
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектующихДляСборки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаКомплектующихДляСборки", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаКомплектующихДляСборки", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаКомплектовДляРазборки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаКомплектовДляРазборки", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаКомплектовДляРазборки", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаНаВнутренниеНужды", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаНаВнутренниеНужды", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаПоВозвратуПоставщику) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаПоВозвратуПоставщику", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаПоВозвратуПоставщику", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтгрузкаПоПеремещению) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтгрузкаПоПеремещению", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтгрузкаПоПеремещению", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаОтПоставщика) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаОтПоставщика", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаОтПоставщика", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПоВозвратуОтКлиента", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПоВозвратуОтКлиента", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПоПеремещению) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПоПеремещению", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПоПеремещению", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаПоПрочемуОприходованию) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаПоПрочемуОприходованию", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаПоПрочемуОприходованию", Ложь);            
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаСобранныхКомплектов) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаСобранныхКомплектов", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаСобранныхКомплектов", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПриемкаКомплектующихПослеРазборки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПриемкаКомплектующихПослеРазборки", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПриемкаКомплектующихПослеРазборки", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеИзлишков) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеИзлишков", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеИзлишков", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеНедостач) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеНедостач", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеНедостач", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеПорчи) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеПорчи", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеПорчи", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.Пересчет) <> Неопределено Тогда
		Запрос.УстановитьПараметр("Пересчет", Истина);
	Иначе
		Запрос.УстановитьПараметр("Пересчет", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтражениеРезультатовПересчетов) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтражениеРезультатовПересчетов", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтражениеРезультатовПересчетов", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ОтборИзЯчеек) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ОтборИзЯчеек", Истина);
	Иначе
		Запрос.УстановитьПараметр("ОтборИзЯчеек", Ложь);
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.КонтрольОтгрузки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("КонтрольОтгрузки", Истина);
	Иначе
		Запрос.УстановитьПараметр("КонтрольОтгрузки", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.РазмещениеВЯчейки) <> Неопределено Тогда
		Запрос.УстановитьПараметр("РазмещениеВЯчейки", Истина);
	Иначе
		Запрос.УстановитьПараметр("РазмещениеВЯчейки", Ложь);
	КонецЕсли;

	Если ПараметрыУказанияСерий.СкладскиеОперации.Найти(Перечисления.СкладскиеОперации.ПеремещениеМеждуПомещениями) <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПеремещениеМеждуПомещениями", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПеремещениеМеждуПомещениями", Ложь);
	КонецЕсли;

	Запрос.УстановитьПараметр("ПланированиеОтгрузки", ПараметрыУказанияСерий.ПланированиеОтгрузки);
	
	Запрос.УстановитьПараметр("ПланированиеОтбора", ПараметрыУказанияСерий.ПланированиеОтбора);
	
	Запрос.УстановитьПараметр("ФактОтбора", ПараметрыУказанияСерий.ФактОтбора);
	
	Запрос.УстановитьПараметр("ПроверкаОтбора", ПараметрыУказанияСерий.ПроверкаОтбора);
	
	Запрос.УстановитьПараметр("ПодготовкаОрдера", ПараметрыУказанияСерий.ПодготовкаОрдера);
	
КонецПроцедуры
