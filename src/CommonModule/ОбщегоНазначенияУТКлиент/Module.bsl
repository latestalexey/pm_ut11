////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Интерактивные действия

Функция РазбитьСтрокуТЧ(ТЧ, ДанныеФормы, ИмяПоляКоличество = "", Заголовок = "", РазрешитьНулевоеКоличество = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяПоляКоличество) Тогда
		ИмяПоляКоличество = "КоличествоУпаковок";
	КонецЕсли;
	
	ТекущаяСтрока	= ДанныеФормы.ТекущиеДанные;
	ЧислоВведено = Истина;
	ТекстЗаголовка	= ?(ЗначениеЗаполнено(Заголовок), Заголовок, НСтр("ru = 'Введите количество товара в новой строке'"));
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Для выполнения команды требуется выбрать строку табличной части.'");
		Предупреждение(ТекстСообщения);
		Возврат Неопределено;
	ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] = 0
		И Не РазрешитьНулевоеКоличество Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно разбить строку с нулевым количеством.'");
		Предупреждение(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТекущаяСтрока[ИмяПоляКоличество] <> 0 Тогда
		
		Количество = ?(ТекущаяСтрока[ИмяПоляКоличество] = 0, 0, Неопределено);
		
		Пока Количество = Неопределено Цикл
			Количество = ТекущаяСтрока[ИмяПоляКоличество];
			ЧислоВведено = ВвестиЧисло(Количество, ТекстЗаголовка, 15, 3);
			
			Если Не ЧислоВведено Тогда
				Возврат Неопределено;
			ИначеЕсли Количество = 0
				И Не РазрешитьНулевоеКоличество Тогда
				ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть равно нулю.'");
				Предупреждение(ТекстСообщения);
				Количество = Неопределено;
			ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] >= 0
				И Количество < 0 Тогда
				ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть отрицательным.'");
				Предупреждение(ТекстСообщения);
				Количество = Неопределено;
			ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] <= 0
				И Количество > 0 Тогда
				ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть положительным.'");
				Предупреждение(ТекстСообщения);
				Количество = Неопределено;
			ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] >= 0
				И Количество >  ТекущаяСтрока[ИмяПоляКоличество] Тогда
				ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть больше количества в текущей.'");
				Предупреждение(ТекстСообщения);
				Количество = Неопределено;
			ИначеЕсли ТекущаяСтрока[ИмяПоляКоличество] <= 0
				И Количество <  ТекущаяСтрока[ИмяПоляКоличество] Тогда
				ТекстСообщения = НСтр("ru = 'Количество в новой строке не может быть меньше количества в текущей.'");
				Предупреждение(ТекстСообщения);
				Количество = Неопределено;
			ИначеЕсли Количество =  ТекущаяСтрока[ИмяПоляКоличество]
				И Не РазрешитьНулевоеКоличество Тогда
				ТекстСообщения = НСтр("ru = 'Количество в новой строке должно отличаться от количества в текущей.'");
				Предупреждение(ТекстСообщения);
				Количество = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		Количество = 0;
	КонецЕсли;
		
	ИндексТекущейСтроки 	 = ТЧ.Индекс(ТекущаяСтрока);
	НоваяСтрока 			 = ТЧ.Вставить(ИндексТекущейСтроки + 1);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	
	НоваяСтрока[ИмяПоляКоличество]      = Количество;
	ТекущаяСтрока[ИмяПоляКоличество] 	= ТекущаяСтрока[ИмяПоляКоличество] - НоваяСтрока[ИмяПоляКоличество];
	
	ДанныеФормы.ТекущаяСтрока  = НоваяСтрока.ПолучитьИдентификатор();
	
	Возврат НоваяСтрока;
	
КонецФункции

// Процедура заполняет список выбора в колонке ВариантОбеспечения в строке табличной части Товары
//
// Параметры:
// 		СтрокаТовары - ДанныеФормыЭлементКоллекции - Строка табличной части, в котрой пользоваатель выбирает вариант обеспечения
// 		ДанныеВыбора - Список значений - Формируемый список выбора для строки табличной части
// 		СтандартнаяОбработка - Булево - Признак необходимости использования стандартной обработки
//
Процедура ЗаполнитьСписокВыбораВариантаОбеспечения(СтрокаТовары, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений();
	ТекстАвто = НСтр("ru = ""Авто""");
	Если СтрокаТовары.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ПустаяСсылка"), ТекстАвто);
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ПодЗаказ"));
	ИначеЕсли СтрокаТовары.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар")
		Или СтрокаТовары.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ПустаяСсылка"), ТекстАвто);
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ПодЗаказ"));
	ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТовары.ТипНоменклатуры) Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ПустаяСсылка"), ТекстАвто);
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ПодЗаказ"));
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет возможность заполнения табличной части документа.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма документа
//	ТабличнаяЧасть - ДанныеФормыКоллекция - Проверяемая табличная часть
//	СтруктураРеквизитов - Структура - Проверяемые реквизиты
//	ПроверятьПроведенность - Булево - Необходимость проверки того, что документ не проведен
//
// Возвращаемое значение:
//	Булево - Признак возможности заполнения табличной части
//
Функция ВозможноЗаполнениеТабличнойЧасти(Форма, ТабличнаяЧасть, СтруктураРеквизитов, ПроверятьПроведенность = Истина) Экспорт
	
	ЗаполнятьТабличнуюЧасть = Истина;
	
	Если ПроверятьПроведенность И Форма.Объект.Проведен Тогда
		
		КодОтвета = Вопрос(НСтр("ru = 'Заполнение возможно только в непроведенном документе, отменить проведение?'"), РежимДиалогаВопрос.ДаНет);
		Если КодОтвета = КодВозвратаДиалога.Да Тогда
			Если Не Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения)) Тогда
				Предупреждение(НСтр("ru = 'Не удалось отменить проведение документа'"));
				ЗаполнятьТабличнуюЧасть = Ложь;
			КонецЕсли;
		Иначе
			ЗаполнятьТабличнуюЧасть = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТабличнаяЧасть <> Неопределено И ЗаполнятьТабличнуюЧасть И ТабличнаяЧасть.Количество() > 0 Тогда
		
		КодОтвета = Вопрос(НСтр("ru = 'Табличная часть будет очищена, продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Если КодОтвета = КодВозвратаДиалога.Нет Тогда
			ЗаполнятьТабличнуюЧасть = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов <> Неопределено И ЗаполнятьТабличнуюЧасть Тогда
		ЗаполнятьТабличнуюЧасть = РеквизитыОбъектаЗаполнены(Форма.Объект, СтруктураРеквизитов);
	КонецЕсли;
	
	Если ЗаполнятьТабличнуюЧасть И Не Форма.Модифицированность Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
	Возврат ЗаполнятьТабличнуюЧасть;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////
// Контроль несогласованных изменений

// Вызывается в формах документов и справочников при действиях с элементами, зависящими от статуса
// в механизме контроля несогласованных изменений.
//
// Параметры:
// 		Форма          - форма элемента или документа
//
// Возвращаемое значение:
// 		Булево - признак отказа выполнения дальнейших действий
//
Функция ПриДействииСЭлементомЗависящимОтСтатуса(Форма) Экспорт
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение = Истина;
	Оповестить("ИзмененРеквизитЗависящийОтСтатуса",
		Новый Структура(
			"УникальныйИдентификатор", Форма.УникальныйИдентификатор
		),
		Форма.Объект.Ссылка
	);
	
	Возврат Ложь;
	
КонецФункции

// Вызывается в формах документов и справочников при действиях с элементами, зависящими от статуса
// в механизме контроля несогласованных изменений.
//
// Параметры:
// 		Форма          - форма элемента или документа
//
Процедура ПослеИзмененияРеквизитаЗависящегоОтСтатуса(Форма) Экспорт
	
	Форма.СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с буфером обмена

// Проверяет заполненность реквизитов, необходимых для копирования
//
// Параметры:
//	ТекущаяСтрока                    - Элемент табличной части, которую надо проверить на заполненность
//
// Возвращаемое значение:
//	Булево - Ложь, если необходимые данные не заполнены
//
Функция ВозможноКопированиеСтрок(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Для выполнения команды требуется выбрать строку табличной части.'");
		Предупреждение(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Вызывается в формах документов и справочников при копировании строк.
// 
// Параметры:
//     КоличествоВыделенных          - количество выделенных строк табличной части
//
Процедура ОповеститьПользователяОКопированииСтрок(КоличествоВыделенных) Экспорт
	
	ТекстСообщения = НСтр("ru='В буфер обмена скопировано строк (%КоличествоВыделенных%)'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВыделенных%", КоличествоВыделенных);
	
	ТекстЗаголовка = НСтр("ru='Строки скопированы'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	Оповестить("КопированиеСтрокВБуферОбмена");
	
КонецПроцедуры //ОповеститьПользователяОКопированииСтрок()

// Вызывается в формах документов и справочников при вставке строк.
// 
// Параметры:
//     КоличествоВставленных         - количество вставленных строк в табличноую часть
//
Процедура ОповеститьПользователяОВставкеСтрок(КоличествоВставленных) Экспорт
	
	ТекстСообщения = НСтр("ru='Из буфера обмена вставлено строк (%КоличествоВставленных%)'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВставленных%", КоличествоВставленных);
	
	ТекстЗаголовка = НСтр("ru='Строки вставлены'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры //ОповеститьПользователяОВставкеСтрок()

////////////////////////////////////////////////////////////////////////////////
// Редакторирование заблокированных реквизитов

// Вызывается в формах объектов для разблокировки заблокированных реквизитов.
// 
// Параметры:
//     ЭтаФорма              - Форма объекта
//     ИмяФормыРазблокировки - Имя формы разблокировки
//
Процедура РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма, Знач ИмяФормыРазблокировки = "") Экспорт
	
	Если ЗначениеЗаполнено(ЭтаФорма.Объект.Ссылка) Тогда
		
		Если Не ЗначениеЗаполнено(ИмяФормыРазблокировки) Тогда
			МассивИмениФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(ЭтаФорма.ИмяФормы, ".");
			МассивИмениФормы[3] = "РазблокированиеРеквизитов";
			ИмяФормыРазблокировки = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивИмениФормы, ".");
		КонецЕсли;
		
		РедактированиеРазрешено = ОткрытьФормуМодально(ИмяФормыРазблокировки, Новый Структура("Объект", ЭтаФорма.Объект.Ссылка));
		Если РедактированиеРазрешено Тогда
			
			ЗаблокированныеРеквизиты = ЗапретРедактированияРеквизитовОбъектовКлиент.РеквизитыКромеНевидимых(ЭтаФорма);
			ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьРазрешенностьРедактированияРеквизитов(ЭтаФорма, ЗаблокированныеРеквизиты);
			ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция РеквизитыОбъектаЗаполнены(Объект, СтруктураРеквизитов)
	
	РеквизитыЗаполнены = Истина;
	ОчиститьСообщения();
	
	Для Каждого Элемент Из СтруктураРеквизитов Цикл
		
		Если Не ЗначениеЗаполнено(Объект[Элемент.Ключ]) Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Поле ""%1"" не заполнено'"),
				?(ПустаяСтрока(Элемент.Значение), Элемент.Ключ, Элемент.Значение));
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Текст;
			Сообщение.Поле = Элемент.Ключ;
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Сообщить();
			
			РеквизитыЗаполнены = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РеквизитыЗаполнены;
	
КонецФункции
