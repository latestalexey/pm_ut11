////////////////////////////////////////////////////////////////////////////////
// ОбменСообщениямиВнутренний.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистемы Обмена данными

// Обработчик события ПриВыгрузкеДанных подсистемы Обмена данными
// Описание обработчика см. ОбщийМодуль.ОбменДаннымиПереопределяемый.ПриВыгрузкеДанных()
//
Процедура ПриВыгрузкеДанных(СтандартнаяОбработка,
								Получатель,
								ИмяФайлаСообщения,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ИмяСобытияЖурналаРегистрации,
								КоличествоОтправленныхОбъектов
	) Экспорт
	
	Если ТипЗнч(Получатель) <> Тип("ПланОбменаСсылка.ОбменСообщениями") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТаблицаВыборкиДанных = Новый ТаблицаЗначений;
	ТаблицаВыборкиДанных.Колонки.Добавить("Данные");
	ТаблицаВыборкиДанных.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	ЗаписьВФайл = Не ПустаяСтрока(ИмяФайлаСообщения);
	
	ЗаписьXML = Новый ЗаписьXML;
	
	Если ЗаписьВФайл Тогда
		ЗаписьXML.ОткрытьФайл(ИмяФайлаСообщения);
	Иначе
		ЗаписьXML.УстановитьСтроку();
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	// Создаем новое сообщение
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Получатель);
	
	// считаем количество записанных объектов
	КоличествоЗаписанныхОбъектов = 0;
	КоличествоОтправленныхОбъектов = 0;
	
	ИспользоватьТранзакции = КоличествоЭлементовВТранзакции <> 1;
	
	Если ИспользоватьТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		// Получаем выборку изменённых данных
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения);
		
		Пока ВыборкаИзменений.Следующий() Цикл
			
			СтрокаТаблицы = ТаблицаВыборкиДанных.Добавить();
			СтрокаТаблицы.Данные = ВыборкаИзменений.Получить();
			СтрокаТаблицы.Порядок = ?(ТипЗнч(СтрокаТаблицы.Данные) = Тип("СправочникОбъект.СообщенияСистемы"), СтрокаТаблицы.Данные.Код, 0);
			
		КонецЦикла;
		
		ТаблицаВыборкиДанных.Сортировать("Порядок Возр");
		
		Для Каждого СтрокаТаблицы Из ТаблицаВыборкиДанных Цикл
			
			Если ТипЗнч(СтрокаТаблицы.Данные) = Тип("СправочникОбъект.СообщенияСистемы") Тогда
				
				СтрокаТаблицы.Данные.Код = 0;
				
				// {Обработчик события: ПриОтправкеСообщения} Начало
				ТелоСообщения = СтрокаТаблицы.Данные.ТелоСообщения.Получить();
				
				ПриОтправкеСообщенияБСП(СтрокаТаблицы.Данные.Наименование, ТелоСообщения);
				
				ПриОтправкеСообщения(СтрокаТаблицы.Данные.Наименование, ТелоСообщения);
				
				СтрокаТаблицы.Данные.ТелоСообщения = Новый ХранилищеЗначения(ТелоСообщения);
				// {Обработчик события: ПриОтправкеСообщения} Окончание
			
			КонецЕсли;
			
			// Записываем данные в сообщение
			ЗаписатьXML(ЗаписьXML, СтрокаТаблицы.Данные);
			
			КоличествоЗаписанныхОбъектов = КоличествоЗаписанныхОбъектов + 1;
			КоличествоОтправленныхОбъектов = КоличествоОтправленныхОбъектов + 1;
			
			Если ИспользоватьТранзакции
				И КоличествоЭлементовВТранзакции > 0
				И КоличествоЗаписанныхОбъектов = КоличествоЭлементовВТранзакции Тогда
				
				// промежуточную транзакцию закрываем и открываем новую
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				
				КоличествоЗаписанныхОбъектов = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИспользоватьТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		// Завершаем запись сообщения
		ЗаписьСообщения.ЗакончитьЗапись();
		
		ДанныеСообщения = ЗаписьXML.Закрыть();
		
	Исключение
		
		Если ИспользоватьТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ЗаписьСообщения.ПрерватьЗапись();
		ЗаписьXML.Закрыть();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

// Обработчик события ПриЗагрузкеДанных подсистемы Обмена данными
// Описание обработчика см. ОбщийМодуль.ОбменДаннымиПереопределяемый.ПриЗагрузкеДанных()
//
Процедура ПриЗагрузкеДанных(СтандартнаяОбработка,
								Отправитель,
								ИмяФайлаСообщения,
								ДанныеСообщения,
								КоличествоЭлементовВТранзакции,
								ИмяСобытияЖурналаРегистрации,
								КоличествоПолученныхОбъектов
	) Экспорт
	
	Если ТипЗнч(Отправитель) <> Тип("ПланОбменаСсылка.ОбменСообщениями") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ЧтениеXML = Новый ЧтениеXML;
	
	Если Не ПустаяСтрока(ДанныеСообщения) Тогда
		ЧтениеXML.УстановитьСтроку(ДанныеСообщения);
	Иначе
		ЧтениеXML.ОткрытьФайл(ИмяФайлаСообщения);
	КонецЕсли;
	
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML, ДопустимыйНомерСообщения.Больший);
	
	// Удаляем регистрацию изменений для узла отправителя сообщения
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	
	// считаем сколько объектов прочитали
	КоличествоЗаписанныхОбъектов = 0;
	КоличествоПолученныхОбъектов = 0;
	
	ИспользоватьТранзакции = КоличествоЭлементовВТранзакции <> 1;
	
	Если ИспользоватьТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		
		// Читаем данные из сообщения
		Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
			
			// Читаем очередное значение
			Данные = ПрочитатьXML(ЧтениеXML);
			
			КоличествоПолученныхОбъектов = КоличествоПолученныхОбъектов + 1;
			
			// В случае коллизии изменений приоритет отдаем текущей информационной базе
			Если ПланыОбмена.ИзменениеЗарегистрировано(ЧтениеСообщения.Отправитель, Данные) Тогда
				Продолжить;
			КонецЕсли;
			
			Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			Данные.ОбменДанными.Загрузка = Истина;
			
			Если ТипЗнч(Данные) = Тип("СправочникОбъект.СообщенияСистемы") Тогда
				
				Данные.УстановитьНовыйКод();
				Данные.Отправитель = ЧтениеСообщения.Отправитель;
				Данные.Получатель = ЭтотУзел();
				Данные.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
				
				// {Обработчик: ПриПолученииСообщения} Начало
				ТелоСообщения = Данные.ТелоСообщения.Получить();
				
				ПриПолученииСообщенияБСП(Данные.Наименование, ТелоСообщения);
				
				ПриПолученииСообщения(Данные.Наименование, ТелоСообщения);
				
				Данные.ТелоСообщения = Новый ХранилищеЗначения(ТелоСообщения);
				// {Обработчик: ПриПолученииСообщения} Окончание
				
			ИначеЕсли ТипЗнч(Данные) = Тип("РегистрСведенийНаборЗаписей.ПодпискиПолучателей") Тогда
				
				Данные.Отбор["Получатель"].Значение = ЧтениеСообщения.Отправитель;
				
				Для Каждого СтрокаНабораЗаписей Из Данные Цикл
					
					СтрокаНабораЗаписей.Получатель = ЧтениеСообщения.Отправитель;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Данные.Записать();
			
			КоличествоЗаписанныхОбъектов = КоличествоЗаписанныхОбъектов + 1;
			
			Если ИспользоватьТранзакции
				И КоличествоЭлементовВТранзакции > 0
				И КоличествоЗаписанныхОбъектов = КоличествоЭлементовВТранзакции Тогда
				
				// промежуточную транзакцию закрываем и открываем новую
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				
				КоличествоЗаписанныхОбъектов = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		ЧтениеСообщения.ЗакончитьЧтение();
		ЧтениеXML.Закрыть();
		
		Если ИспользоватьТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		Если ИспользоватьТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ЧтениеСообщения.ПрерватьЧтение();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "ОбменСообщениямиВнутренний.УстановитьКодЭтойКонечнойТочки";
	
КонецПроцедуры

// Устанавливает код этой конечной точки, если не установлен.
// 
Процедура УстановитьКодЭтойКонечнойТочки() Экспорт
	
	Если ПустаяСтрока(КодЭтогоУзла()) Тогда
		
		ЭтаКонечнаяТочка = ЭтотУзел().ПолучитьОбъект();
		ЭтаКонечнаяТочка.Код = Строка(Новый УникальныйИдентификатор());
		ЭтаКонечнаяТочка.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции

// Обработчик регламентного задания для отправки и получения сообщений системы
//
Процедура ОтправитьИПолучитьСообщенияПоРегламентномуЗаданию() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ОтправитьИПолучитьСообщения(Ложь);
	
КонецПроцедуры

// Выполняет отправку и получение сообщений системы
//
// Параметры:
//  Отказ – Булево. Флаг отказа. Поднимается в случае возникновения ошибок в процессе выполнения операции.
//
Процедура ОтправитьИПолучитьСообщения(Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыполнитьОтправкуИПолучениеСообщенийЧерезWebСервис(Отказ);
	
	ВыполнитьОтправкуИПолучениеСообщенийЧерезОбычныеКаналыСвязи(Отказ);
	
	ОбработатьОчередьСообщенийСистемы();
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ОбработатьОчередьСообщенийСистемы(Отбор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработчикиСообщений = ОбработчикиСообщений();
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	СообщенияСистемы.Ссылка КАК Ссылка,
	|	СообщенияСистемы.Отправитель.Заблокирована КАК КонечнаяТочкаЗаблокирована
	|ИЗ
	|	Справочник.СообщенияСистемы КАК СообщенияСистемы
	|ГДЕ
	|	СообщенияСистемы.Получатель = &Получатель
	|	И (НЕ СообщенияСистемы.Заблокировано)
	|	[Отбор]
	|
	|УПОРЯДОЧИТЬ ПО
	|	СообщенияСистемы.Код";
	
	СтрокаОтбора = ?(Отбор = Неопределено, "", "И СообщенияСистемы.Ссылка В(&Отбор)");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Отбор]", СтрокаОтбора);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Получатель", ЭтотУзел());
	Запрос.УстановитьПараметр("Отбор", Отбор);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = ПолучитьРезультатЗапроса(Запрос);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектСообщения = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			ОбъектСообщения.Заблокировать();
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЭтойПодсистемы(),
				УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
			Продолжить;
		КонецПопытки;
		
		Попытка
			
			ЗаголовокСообщения = Новый Структура("КаналСообщений, Отправитель", ОбъектСообщения.Наименование, ОбъектСообщения.Отправитель);
			
			НайденныеСтроки = ОбработчикиСообщений.НайтиСтроки(Новый Структура("Канал", ЗаголовокСообщения.КаналСообщений));
			
			СообщениеОбработано = Истина;
			
			// Обрабатываем сообщение
			Попытка
				
				Если Выборка.КонечнаяТочкаЗаблокирована Тогда
					ОбъектСообщения.Заблокировано = Истина;
					ВызватьИсключение НСтр("ru = 'Попытка обработки сообщения, полученного от заблокированной конечной точки.'");
				КонецЕсли;
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					ОбъектСообщения.Заблокировано = Истина;
					ВызватьИсключение НСтр("ru = 'Не назначен обработчик для сообщения.'");
				КонецЕсли;
				
				Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
					
					СтрокаТаблицы.Обработчик.ОбработатьСообщение(ЗаголовокСообщения.КаналСообщений, ОбъектСообщения.ТелоСообщения.Получить(), ЗаголовокСообщения.Отправитель);
					
				КонецЦикла;
			Исключение
				
				Пока ТранзакцияАктивна() Цикл
					ОтменитьТранзакцию();
				КонецЦикла;
				
				СообщениеОбработано = Ложь;
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЭтойПодсистемы(),
						УровеньЖурналаРегистрации.Ошибка,,,
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Ошибка обработки сообщения %1: %2'"),
							ЗаголовокСообщения.КаналСообщений, ПодробноеПредставлениеОшибки)
				);
			КонецПопытки;
			
			Если СообщениеОбработано Тогда
				
				// Удаляем сообщение
				Если ЗначениеЗаполнено(ОбъектСообщения.Отправитель)
					И ОбъектСообщения.Отправитель <> ЭтотУзел() Тогда
					
					ОбъектСообщения.ОбменДанными.Получатели.Добавить(ОбъектСообщения.Отправитель);
					ОбъектСообщения.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
					
				КонецЕсли;
				
				ОбъектСообщения.ОбменДанными.Загрузка = Истина; // Наличие ссылок на справочник не должно препятствовать или замедлять удаление элементов справочника.
				ОбъектСообщения.Удалить();
				
			Иначе
				
				
				ОбъектСообщения.КоличествоПопытокОбработкиСообщения = ОбъектСообщения.КоличествоПопытокОбработкиСообщения + 1;
				ОбъектСообщения.ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки;
				
				Если ОбъектСообщения.КоличествоПопытокОбработкиСообщения >= 3 Тогда
					ОбъектСообщения.Заблокировано = Истина;
				КонецЕсли;
				
				ОбъектСообщения.Записать();
				
			КонецЕсли;
			
		Исключение
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЭтойПодсистемы(),
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура УстановитьВедущуюКонечнуюТочкуНаСторонеОтправителя(Отказ, НастройкиПодключенияОтправителя, КонечнаяТочка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаСообщенияОбОшибке = "";
	
	WSПрокси = ПолучитьWSПрокси(НастройкиПодключенияОтправителя, СтрокаСообщенияОбОшибке);
	
	Если WSПрокси = Неопределено Тогда
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУстановкаВедущейКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		КонечнаяТочкаОбъект = КонечнаяТочка.ПолучитьОбъект();
		КонечнаяТочкаОбъект.Ведущая = Ложь;
		КонечнаяТочкаОбъект.Записать();
		
		//обновляем настройки подключения
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Узел", КонечнаяТочка);
		СтруктураЗаписи.Вставить("ВидТранспортаСообщенийОбменаПоУмолчанию", Перечисления.ВидыТранспортаСообщенийОбмена.WS);
		
		СтруктураЗаписи.Вставить("WSURLВебСервиса",   НастройкиПодключенияОтправителя.WSURLВебСервиса);
		СтруктураЗаписи.Вставить("WSИмяПользователя", НастройкиПодключенияОтправителя.WSИмяПользователя);
		СтруктураЗаписи.Вставить("WSПароль",          НастройкиПодключенияОтправителя.WSПароль);
		СтруктураЗаписи.Вставить("WSЗапомнитьПароль", Истина);
		
		// добавляем запись в РС
		РегистрыСведений.НастройкиТранспортаОбмена.ДобавитьЗапись(СтруктураЗаписи);
		
		// Устанавливаем ведущую конечную точку на стороне получателя
		WSПрокси.SetLeadingEndPoint(КонечнаяТочкаОбъект.Код, КодЭтогоУзла());
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУстановкаВедущейКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура УстановитьВедущуюКонечнуюТочкуНаСторонеПолучателя(КодЭтойКонечнойТочки, КодВедущейКонечнойТочки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПланыОбмена.ОбменСообщениями.НайтиПоКоду(КодЭтойКонечнойТочки) <> ЭтотУзел() Тогда
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Заданы неверные параметры подключения к конечной точке. Параметры подключения указывают на другую конечную точку.'");
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУстановкаВедущейКонечнойТочки(),
				УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
		ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		УзелКонечнойТочки = ПланыОбмена.ОбменСообщениями.НайтиПоКоду(КодВедущейКонечнойТочки);
		
		Если УзелКонечнойТочки.Пустая() Тогда
			
			ВызватьИсключение НСтр("ru = 'Конечная точка в базе-корреспонденте не обнаружена.'");
			
		КонецЕсли;
		УзелКонечнойТочкиОбъект = УзелКонечнойТочки.ПолучитьОбъект();
		УзелКонечнойТочкиОбъект.Ведущая = Истина;
		УзелКонечнойТочкиОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииУстановкаВедущейКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ВыполнитьПодключениеКонечнойТочкиНаСторонеПолучателя(Отказ, Код, Наименование, НастройкиПодключенияПолучателя) Экспорт
	
	ОбменДаннымиСервер.ПроверитьИспользованиеОбменаДанными();
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		//создаем/обновляем узел плана обмена, который соответствует подключаемой конечной точке
		УзелКонечнойТочки = ПланыОбмена.ОбменСообщениями.НайтиПоКоду(Код);
		Если УзелКонечнойТочки.Пустая() Тогда
			УзелКонечнойТочкиОбъект = ПланыОбмена.ОбменСообщениями.СоздатьУзел();
			УзелКонечнойТочкиОбъект.Код = Код;
		Иначе
			УзелКонечнойТочкиОбъект = УзелКонечнойТочки.ПолучитьОбъект();
			УзелКонечнойТочкиОбъект.НомерПринятого = 0;
		КонецЕсли;
		УзелКонечнойТочкиОбъект.Наименование = Наименование;
		УзелКонечнойТочкиОбъект.Ведущая = Истина;
		УзелКонечнойТочкиОбъект.Записать();
		
		//обновляем настройки подключения
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Узел", УзелКонечнойТочкиОбъект.Ссылка);
		СтруктураЗаписи.Вставить("ВидТранспортаСообщенийОбменаПоУмолчанию", Перечисления.ВидыТранспортаСообщенийОбмена.WS);
		
		СтруктураЗаписи.Вставить("КоличествоЭлементовВТранзакцииВыгрузкиДанных", 0);
		СтруктураЗаписи.Вставить("КоличествоЭлементовВТранзакцииЗагрузкиДанных", 0);
		
		СтруктураЗаписи.Вставить("WSURLВебСервиса",   НастройкиПодключенияПолучателя.WSURLВебСервиса);
		СтруктураЗаписи.Вставить("WSИмяПользователя", НастройкиПодключенияПолучателя.WSИмяПользователя);
		СтруктураЗаписи.Вставить("WSПароль",          НастройкиПодключенияПолучателя.WSПароль);
		СтруктураЗаписи.Вставить("WSЗапомнитьПароль", Истина);
		
		// добавляем запись в РС
		РегистрыСведений.НастройкиТранспортаОбмена.ДобавитьЗапись(СтруктураЗаписи);
		
		// Устанавливаем признак использования регламентного задания.
		РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(
			Метаданные.РегламентныеЗадания.ОтправкаИПолучениеСообщенийСистемы, Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПодключениеКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ВыполнитьОбновлениеНастроекПодключенияКонечнойТочки(Отказ, КонечнаяТочка, НастройкиПодключенияОтправителя, НастройкиПодключенияПолучателя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаСообщенияОбОшибке = "";
	
	ВерсииКорреспондента = ВерсииКорреспондента(НастройкиПодключенияОтправителя);
	ВерсияКорреспондента_2_0_1_6 = (ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено);
	
	Если ВерсияКорреспондента_2_0_1_6 Тогда
		WSПрокси = ПолучитьWSПрокси_2_0_1_6(НастройкиПодключенияОтправителя, СтрокаСообщенияОбОшибке);
	Иначе
		WSПрокси = ПолучитьWSПрокси(НастройкиПодключенияОтправителя, СтрокаСообщенияОбОшибке);
	КонецЕсли;
	
	Если WSПрокси = Неопределено Тогда
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПодключениеКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ВерсияКорреспондента_2_0_1_6 Тогда
			WSПрокси.TestConnectionRecipient(СериализаторXDTO.ЗаписатьXDTO(НастройкиПодключенияПолучателя), КодЭтогоУзла());
		Иначе
			WSПрокси.TestConnectionRecipient(ЗначениеВСтрокуВнутр(НастройкиПодключенияПолучателя), КодЭтогоУзла());
		КонецЕсли;
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПодключениеКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	НачатьТранзакцию();
	Попытка
		
		//обновляем настройки подключения
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Узел", КонечнаяТочка);
		СтруктураЗаписи.Вставить("ВидТранспортаСообщенийОбменаПоУмолчанию", Перечисления.ВидыТранспортаСообщенийОбмена.WS);
		
		СтруктураЗаписи.Вставить("WSURLВебСервиса",   НастройкиПодключенияОтправителя.WSURLВебСервиса);
		СтруктураЗаписи.Вставить("WSИмяПользователя", НастройкиПодключенияОтправителя.WSИмяПользователя);
		СтруктураЗаписи.Вставить("WSПароль",          НастройкиПодключенияОтправителя.WSПароль);
		СтруктураЗаписи.Вставить("WSЗапомнитьПароль", Истина);
		
		// добавляем запись в РС
		РегистрыСведений.НастройкиТранспортаОбмена.ОбновитьЗапись(СтруктураЗаписи);
		
		Если ВерсияКорреспондента_2_0_1_6 Тогда
			WSПрокси.UpdateConnectionSettings(КодЭтогоУзла(), СериализаторXDTO.ЗаписатьXDTO(НастройкиПодключенияПолучателя));
		Иначе
			WSПрокси.UpdateConnectionSettings(КодЭтогоУзла(), ЗначениеВСтрокуВнутр(НастройкиПодключенияПолучателя));
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПодключениеКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ДобавитьОбработчикКаналаСообщений(Канал, ОбработчикКанала, Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Канал = Канал;
	Обработчик.Обработчик = ОбработчикКанала;
	
КонецПроцедуры

// Только для внутреннего использования
Функция КодЭтогоУзла() Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзел(), "Код");
	
КонецФункции

// Только для внутреннего использования
Функция НаименованиеЭтогоУзла() Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзел(), "Наименование");
	
КонецФункции

// Только для внутреннего использования
Функция ЭтотУзел() Экспорт
	
	Возврат ПланыОбмена.ОбменСообщениями.ЭтотУзел();
	
КонецФункции

// Только для внутреннего использования
Функция ВсеПолучатели() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбменСообщениями.Ссылка КАК Получатель
	|ИЗ
	|	ПланОбмена.ОбменСообщениями КАК ОбменСообщениями
	|ГДЕ
	|	ОбменСообщениями.Ссылка <> &ЭтотУзел";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел());
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Получатель");
КонецФункции

// Только для внутреннего использования
Функция ПолучитьРезультатЗапроса(Запрос) Экспорт
	
	// возвращаемое значение функции
	Результат = Неопределено;
	
	КоличествоПопыток = 0;
	Пока КоличествоПопыток < 5 Цикл
		Попытка
			Результат = Запрос.Выполнить();
			Прервать;
		Исключение
			КоличествоПопыток = КоличествоПопыток + 1;
			
			Если КоличествоПопыток = 5 Тогда
				
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииЭтойПодсистемы(),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки
				);
				ВызватьИсключение ПодробноеПредставлениеОшибки;
			КонецЕсли;
			
		КонецПопытки;
	КонецЦикла;
	
	Если Результат = Неопределено Тогда
		
		ВызватьИсключение(НСтр("ru = 'Ошибка при получении списка сообщений из очереди.'"));
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Только для внутреннего использования
Процедура СериализоватьДанныеВПоток(ВыборкаДанных, Поток) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Root");
	
	Для Каждого Ссылка Из ВыборкаДанных Цикл
		
		Данные = Ссылка.ПолучитьОбъект();
		Данные.Код = 0;
		
		// {Обработчик события: ПриОтправкеСообщения} Начало
		ТелоСообщения = Данные.ТелоСообщения.Получить();
		
		ПриОтправкеСообщенияБСП(Данные.Наименование, ТелоСообщения);
		
		ПриОтправкеСообщения(Данные.Наименование, ТелоСообщения);
		
		Данные.ТелоСообщения = Новый ХранилищеЗначения(ТелоСообщения);
		// {Обработчик события: ПриОтправкеСообщения} Окончание
		
		ЗаписатьXML(ЗаписьXML, Данные);
		
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Поток = ЗаписьXML.Закрыть();
	
КонецПроцедуры

// Только для внутреннего использования
Процедура СериализоватьДанныеИзПотока(Отправитель, Поток, ЗагруженныеОбъекты = Неопределено) Экспорт
	
	ЗагруженныеОбъекты = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(Поток);
		ЧтениеXML.Прочитать(); // узел "Root"
		ЧтениеXML.Прочитать(); // узел объекта
		
		Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
			
			Данные = ПрочитатьXML(ЧтениеXML);
			
			// В случае коллизии изменений приоритет отдаем текущей информационной базе
			Если ПланыОбмена.ИзменениеЗарегистрировано(Отправитель, Данные) Тогда
				Продолжить;
			КонецЕсли;
			
			Данные.ОбменДанными.Отправитель = Отправитель;
			Данные.ОбменДанными.Загрузка = Истина;
			
			Если ТипЗнч(Данные) <> Тип("УдалениеОбъекта") Тогда
				
				Данные.УстановитьНовыйКод();
				Данные.Отправитель = Отправитель;
				Данные.Получатель = ЭтотУзел();
				Данные.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
				
				// {Обработчик: ПриПолученииСообщения} Начало
				ТелоСообщения = Данные.ТелоСообщения.Получить();
				
				ПриПолученииСообщенияБСП(Данные.Наименование, ТелоСообщения);
				
				ПриПолученииСообщения(Данные.Наименование, ТелоСообщения);
				
				Данные.ТелоСообщения = Новый ХранилищеЗначения(ТелоСообщения);
				// {Обработчик: ПриПолученииСообщения} Окончание
				
			КонецЕсли;
			
			Данные.Записать();
			
			ЗагруженныеОбъекты.Добавить(Данные.Ссылка);
			
		КонецЦикла;
		
		ЧтениеXML.Закрыть();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования
Функция ПолучитьWSПрокси(СтруктураНастроек, СтрокаСообщенияОбОшибке = "", Таймаут = 60) Экспорт
	
	СтруктураНастроек.Вставить("WSURLПространстваИменСервиса", "http://www.1c.ru/SSL/MessageExchange");
	СтруктураНастроек.Вставить("WSИмяСервиса",                 "MessageExchange");
	СтруктураНастроек.Вставить("WSТаймаут", Таймаут);
	
	Возврат ОбменДаннымиСервер.ПолучитьWSПроксиПоПараметрамПодключения(СтруктураНастроек, СтрокаСообщенияОбОшибке);
КонецФункции

// Только для внутреннего использования
Функция ПолучитьWSПрокси_2_0_1_6(СтруктураНастроек, СтрокаСообщенияОбОшибке = "", Таймаут = 60) Экспорт
	
	СтруктураНастроек.Вставить("WSURLПространстваИменСервиса", "http://www.1c.ru/SSL/MessageExchange_2_0_1_6");
	СтруктураНастроек.Вставить("WSИмяСервиса",                 "MessageExchange_2_0_1_6");
	СтруктураНастроек.Вставить("WSТаймаут", Таймаут);
	
	Возврат ОбменДаннымиСервер.ПолучитьWSПроксиПоПараметрамПодключения(СтруктураНастроек, СтрокаСообщенияОбОшибке);
КонецФункции

// Возвращает массив номеров версий, поддерживаемых интерфейсом корреспондента для подсистемы ОбменСообщениями.
// 
// Параметры:
// Корреспондент – Структура, ПланОбменаСсылка. Узел плана обмена, который соответствует информационной базе-корреспонденту.
//
// Возвращаемое значение:
// Массив номеров версий, поддерживаемых интерфейсом корреспондента.
//
Функция ВерсииКорреспондента(Знач Корреспондент) Экспорт
	
	Если ТипЗнч(Корреспондент) = Тип("Структура") Тогда
		СтруктураНастроек = Корреспондент;
	Иначе
		СтруктураНастроек = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспортаWS(Корреспондент);
	КонецЕсли;
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("URL",      СтруктураНастроек.WSURLВебСервиса);
	ПараметрыПодключения.Вставить("UserName", СтруктураНастроек.WSИмяПользователя);
	ПараметрыПодключения.Вставить("Password", СтруктураНастроек.WSПароль);
	
	Возврат ОбщегоНазначения.ПолучитьВерсииИнтерфейса(ПараметрыПодключения, "ОбменСообщениями");
КонецФункции

// Только для внутреннего использования
Функция СобытиеЖурналаРегистрацииПодключениеКонечнойТочки() Экспорт
	
	Возврат НСтр("ru = 'Обмен сообщениями.Подключение конечной точки'");
	
КонецФункции

// Только для внутреннего использования
Функция СобытиеЖурналаРегистрацииУстановкаВедущейКонечнойТочки() Экспорт
	
	Возврат НСтр("ru = 'Обмен сообщениями.Установка ведущей конечной точки'");
	
КонецФункции

// Только для внутреннего использования
Функция СобытиеЖурналаРегистрацииЭтойПодсистемы() Экспорт
	
	Возврат НСтр("ru = 'Обмен сообщениями'");
	
КонецФункции

// Только для внутреннего использования
Функция НаименованиеЭтогоУзлаПоУмолчанию() Экспорт
	
	Возврат ?(ОбщегоНазначенияПовтИсп.РазделениеВключено(), Метаданные.Синоним, ОбменДаннымиПовтИсп.ИмяЭтойИнформационнойБазы());
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

// Только для внутреннего использования
Процедура ВыполнитьОтправкуИПолучениеСообщенийЧерезWebСервис(Отказ)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбменСообщениями.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбменСообщениями КАК ОбменСообщениями
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиТранспортаОбмена КАК НастройкиТранспортаОбмена
	|		ПО ОбменСообщениями.Ссылка = НастройкиТранспортаОбмена.Узел
	|ГДЕ
	|	ОбменСообщениями.Ссылка <> &ЭтотУзел
	|	И (НЕ ОбменСообщениями.Ведущая)
	|	И (НЕ ОбменСообщениями.ПометкаУдаления)
	|	И (НЕ ОбменСообщениями.Заблокирована)
	|	И НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию = ЗНАЧЕНИЕ(Перечисление.ВидыТранспортаСообщенийОбмена.WS)";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел());
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивУзлов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	// Загрузка данных от всех конечных точек
	Для Каждого Получатель Из МассивУзлов Цикл
		
		Отказ1 = Ложь;
		
		ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Отказ1, Получатель, Истина, Ложь, Перечисления.ВидыТранспортаСообщенийОбмена.WS);
		
		Отказ = Отказ ИЛИ Отказ1;
		
	КонецЦикла;
	
	// Выгрузка данных для всех конечных точек
	Для Каждого Получатель Из МассивУзлов Цикл
		
		Отказ1 = Ложь;
		
		ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Отказ1, Получатель, Ложь, Истина, Перечисления.ВидыТранспортаСообщенийОбмена.WS);
		
		Отказ = Отказ ИЛИ Отказ1;
		
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ВыполнитьОтправкуИПолучениеСообщенийЧерезОбычныеКаналыСвязи(Отказ)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбменСообщениями.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбменСообщениями КАК ОбменСообщениями
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиТранспортаОбмена КАК НастройкиТранспортаОбмена
	|		ПО ОбменСообщениями.Ссылка = НастройкиТранспортаОбмена.Узел
	|ГДЕ
	|	ОбменСообщениями.Ссылка <> &ЭтотУзел
	|	И (НЕ ОбменСообщениями.ПометкаУдаления)
	|	И (НЕ ОбменСообщениями.Заблокирована)
	|	И НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию <> ЗНАЧЕНИЕ(Перечисление.ВидыТранспортаСообщенийОбмена.WS)";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел());
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивУзлов = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	// Загрузка данных от всех конечных точек
	Для Каждого Получатель Из МассивУзлов Цикл
		
		Отказ1 = Ложь;
		
		ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Отказ1, Получатель, Истина, Ложь);
		
		Отказ = Отказ ИЛИ Отказ1;
		
	КонецЦикла;
	
	// Выгрузка данных для всех конечных точек
	Для Каждого Получатель Из МассивУзлов Цикл
		
		Отказ1 = Ложь;
		
		ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Отказ1, Получатель, Ложь, Истина);
		
		Отказ = Отказ ИЛИ Отказ1;
		
	КонецЦикла;
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ВыполнитьПодключениеКонечнойТочкиНаСторонеОтправителя(Отказ,
														НастройкиПодключенияОтправителя,
														НастройкиПодключенияПолучателя,
														КонечнаяТочка,
														НаименованиеКонечнойТочкиПолучателя,
														НаименованиеКонечнойТочкиОтправителя
	) Экспорт
	
	ОбменДаннымиСервер.ПроверитьИспользованиеОбменаДанными();
	
	СтрокаСообщенияОбОшибке = "";
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВерсииКорреспондента = ВерсииКорреспондента(НастройкиПодключенияОтправителя);
	ВерсияКорреспондента_2_0_1_6 = (ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено);
	
	Если ВерсияКорреспондента_2_0_1_6 Тогда
		WSПрокси = ПолучитьWSПрокси_2_0_1_6(НастройкиПодключенияОтправителя, СтрокаСообщенияОбОшибке);
	Иначе
		WSПрокси = ПолучитьWSПрокси(НастройкиПодключенияОтправителя, СтрокаСообщенияОбОшибке);
	КонецЕсли;
	
	Если WSПрокси = Неопределено Тогда
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПодключениеКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если ВерсияКорреспондента_2_0_1_6 Тогда
			WSПрокси.TestConnectionRecipient(СериализаторXDTO.ЗаписатьXDTO(НастройкиПодключенияПолучателя), КодЭтогоУзла());
		Иначе
			WSПрокси.TestConnectionRecipient(ЗначениеВСтрокуВнутр(НастройкиПодключенияПолучателя), КодЭтогоУзла());
		КонецЕсли;
		
	Исключение
		Отказ = Истина;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПодключениеКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Если ВерсияКорреспондента_2_0_1_6 Тогда
		ПараметрыКонечнойТочки = СериализаторXDTO.ПрочитатьXDTO(WSПрокси.GetIBParameters(НаименованиеКонечнойТочкиПолучателя));
	Иначе
		ПараметрыКонечнойТочки = ЗначениеИзСтрокиВнутр(WSПрокси.GetIBParameters(НаименованиеКонечнойТочкиПолучателя));
	КонецЕсли;
	
	УзелКонечнойТочки = ПланыОбмена.ОбменСообщениями.НайтиПоКоду(ПараметрыКонечнойТочки.Код);
	
	Если Не УзелКонечнойТочки.Пустая() Тогда
		Отказ = Истина;
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Конечная точка уже подключена к информационной базе; наименование точки: %1'");
		СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелКонечнойТочки, "Наименование"));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПодключениеКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		// устанавливаем наименование этой точки при необходимости
		Если ПустаяСтрока(НаименованиеЭтогоУзла()) Тогда
			
			ЭтотУзелОбъект = ЭтотУзел().ПолучитьОбъект();
			ЭтотУзелОбъект.Наименование = ?(ПустаяСтрока(НаименованиеКонечнойТочкиОтправителя), НаименованиеЭтогоУзлаПоУмолчанию(), НаименованиеКонечнойТочкиОтправителя);
			ЭтотУзелОбъект.Записать();
			
		КонецЕсли;
		
		// создаем узел плана обмена, который соответствует подключаемой конечной точке
		УзелКонечнойТочкиОбъект = ПланыОбмена.ОбменСообщениями.СоздатьУзел();
		УзелКонечнойТочкиОбъект.Код = ПараметрыКонечнойТочки.Код;
		УзелКонечнойТочкиОбъект.Наименование = ПараметрыКонечнойТочки.Наименование;
		УзелКонечнойТочкиОбъект.Записать();
		
		// обновляем настройки подключения
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Узел", УзелКонечнойТочкиОбъект.Ссылка);
		СтруктураЗаписи.Вставить("ВидТранспортаСообщенийОбменаПоУмолчанию", Перечисления.ВидыТранспортаСообщенийОбмена.WS);
		
		СтруктураЗаписи.Вставить("КоличествоЭлементовВТранзакцииВыгрузкиДанных", 0);
		СтруктураЗаписи.Вставить("КоличествоЭлементовВТранзакцииЗагрузкиДанных", 0);
		
		СтруктураЗаписи.Вставить("WSURLВебСервиса",   НастройкиПодключенияОтправителя.WSURLВебСервиса);
		СтруктураЗаписи.Вставить("WSИмяПользователя", НастройкиПодключенияОтправителя.WSИмяПользователя);
		СтруктураЗаписи.Вставить("WSПароль",          НастройкиПодключенияОтправителя.WSПароль);
		СтруктураЗаписи.Вставить("WSЗапомнитьПароль", Истина);
		
		// добавляем запись в РС
		РегистрыСведений.НастройкиТранспортаОбмена.ДобавитьЗапись(СтруктураЗаписи);
		
		ПараметрыЭтойТочки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтотУзел(), "Код, Наименование");
		
		// Выполняем подключение конечной точки на стороне получателя
		Если ВерсияКорреспондента_2_0_1_6 Тогда
			WSПрокси.ConnectEndPoint(ПараметрыЭтойТочки.Код, ПараметрыЭтойТочки.Наименование, СериализаторXDTO.ЗаписатьXDTO(НастройкиПодключенияПолучателя));
		Иначе
			WSПрокси.ConnectEndPoint(ПараметрыЭтойТочки.Код, ПараметрыЭтойТочки.Наименование, ЗначениеВСтрокуВнутр(НастройкиПодключенияПолучателя));
		КонецЕсли;
		
		// Устанавливаем признак использования регламентного задания.
		РегламентныеЗаданияСервер.УстановитьИспользованиеРегламентногоЗадания(
			Метаданные.РегламентныеЗадания.ОтправкаИПолучениеСообщенийСистемы, Истина);
		
		КонечнаяТочка = УзелКонечнойТочкиОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		КонечнаяТочка = Неопределено;
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииПодключениеКонечнойТочки(), УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Только для внутреннего использования
Функция ОбработчикиСообщений()
	
	Результат = НоваяТаблицаОбработчиковСообщений();
	СтандартныеПодсистемыПереопределяемый.ПолучитьОбработчикиКаналовСообщений(Результат);
	ОбменСообщениямиПереопределяемый.ПолучитьОбработчикиКаналовСообщений(Результат);
	Возврат Результат;
	
КонецФункции

// Только для внутреннего использования
Функция НоваяТаблицаОбработчиковСообщений()
	
	Обработчики = Новый ТаблицаЗначений;
	Обработчики.Колонки.Добавить("Канал");
	Обработчики.Колонки.Добавить("Обработчик");
	
	Возврат Обработчики;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий отправки и получения сообщений

Процедура ПриОтправкеСообщенияБСП(Знач КаналСообщений, ТелоСообщения)
	
	СтандартныеПодсистемыПереопределяемый.ПриОтправкеСообщения(КаналСообщений, ТелоСообщения);
	
КонецПроцедуры

Процедура ПриОтправкеСообщения(Знач КаналСообщений, ТелоСообщения)
	
	ОбменСообщениямиПереопределяемый.ПриОтправкеСообщения(КаналСообщений, ТелоСообщения);
	
КонецПроцедуры

Процедура ПриПолученииСообщенияБСП(Знач КаналСообщений, ТелоСообщения)
	
	СтандартныеПодсистемыПереопределяемый.ПриПолученииСообщения(КаналСообщений, ТелоСообщения);
	
КонецПроцедуры

Процедура ПриПолученииСообщения(Знач КаналСообщений, ТелоСообщения)
	
	ОбменСообщениямиПереопределяемый.ПриПолученииСообщения(КаналСообщений, ТелоСообщения);
	
КонецПроцедуры
