////////////////////////////////////////////////////////////////////////////////
// Подсистема "Календарные графики"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция возвращает массив дат, которые отличается указанной даты на количество дней,
// входящих в указанный график
//
// Параметры
//	Календарь		- календарь, который необходимо использовать, тип СправочникСсылка.Календари
//	ДатаОт			- дата, от которой нужно рассчитать количество дней, тип Дата
//	МассивДней		- массив с количеством дней, на которые нужно увеличить дату начала, тип Массив,Число
//	РассчитыватьСледующуюДатуОтПредыдущей	- нужно ли рассчитывать следующую дату от предыдущей или
//											  все даты рассчитываются от переданной даты
//	ВызыватьИсключение - булево, если Истина вызывается исключение в случае незаполненного календаря
//
// Возвращаемое значение
//	Массив		- массив дат, увеличенных на количество дней, входящих в график,
//	Если выбранный календарь не заполнен, и ВызыватьИсключение = Ложь, возвращается Неопределено
//
Функция ПолучитьМассивДатПоКалендарю(Знач Календарь, Знач ДатаОт, Знач МассивДней, Знач РассчитыватьСледующуюДатуОтПредыдущей = Ложь, ВызыватьИсключение = Истина) Экспорт
	
	ДатаОт = НачалоДня(ДатаОт);
	
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаДат.Колонки.Добавить("КоличествоДней", Новый ОписаниеТипов("Число"));
	
	КоличествоДней = 0;
	НомерСтроки = 0;
	Для Каждого СтрокаДней Из МассивДней Цикл
		КоличествоДней = КоличествоДней + СтрокаДней;
		
		Строка = ТаблицаДат.Добавить();
		Строка.ИндексСтроки			= НомерСтроки;
		Если РассчитыватьСледующуюДатуОтПредыдущей Тогда
			Строка.КоличествоДней	= КоличествоДней;
		Иначе
			Строка.КоличествоДней	= СтрокаДней;
		КонецЕсли;
			
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Календарь",	Календарь);
	Запрос.УстановитьПараметр("ДатаОт",		ДатаОт);
	Запрос.УстановитьПараметр("Таблица",	ТаблицаДат);
	
	// Алгоритм работает следующим образом:
	//  Получаем для ДатаОт каким днем с начала года эта дата является
	//  К этому дню прибавляем количество дней с начала года, которое должно быть у конечной даты
	//  Получаем максимальный номер дня в году для этого года
	//  Проверяем, не превышает ли полученное число количество дней
	//  Если превышает, используем следующий год, если нет, то текущий
	//  Ищем, минимальную дату, которая соответствует нужному нам дню в году
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДат.ИндексСтроки,
	|	ТаблицаДат.КоличествоДней
	|ПОМЕСТИТЬ ВТ_ТаблицаДат
	|ИЗ
	|	&Таблица КАК ТаблицаДат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендарныеГрафики.Календарь,
	|	КалендарныеГрафики.ДатаГрафика,
	|	КалендарныеГрафики.Год,
	|	КалендарныеГрафики.ДеньВключенВГрафик
	|ПОМЕСТИТЬ КалендарныйГрафик
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КалендарныеГрафики.Календарь,
	|	КалендарныеГрафики.ДатаГрафика,
	|	КалендарныеГрафики.Год,
	|	КалендарныеГрафики.ДеньВключенВГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендарныеГрафики.Календарь,
	|	КалендарныеГрафики.ДатаГрафика,
	|	КалендарныеГрафики.Год,
	|	КалендарныеГрафики.ДеньВключенВГрафик,
	|	КОЛИЧЕСТВО(ДниВключенныеВГрафик.ДатаГрафика) КАК КоличествоДнейВГрафикеСНачалаГода
	|ПОМЕСТИТЬ КалендарныеГрафики
	|ИЗ
	|	КалендарныйГрафик КАК КалендарныеГрафики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КалендарныйГрафик КАК ДниВключенныеВГрафик
	|		ПО КалендарныеГрафики.Календарь = ДниВключенныеВГрафик.Календарь
	|			И КалендарныеГрафики.Год = ДниВключенныеВГрафик.Год
	|			И КалендарныеГрафики.ДатаГрафика >= ДниВключенныеВГрафик.ДатаГрафика
	|			И (ДниВключенныеВГрафик.ДеньВключенВГрафик)
	|
	|СГРУППИРОВАТЬ ПО
	|	КалендарныеГрафики.Календарь,
	|	КалендарныеГрафики.ДатаГрафика,
	|	КалендарныеГрафики.Год,
	|	КалендарныеГрафики.ДеньВключенВГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ГрафикЗаГод.КоличествоДнейВГрафикеСНачалаГода) КАК КоличествоДнейВсего
	|ПОМЕСТИТЬ ВТ_КоличествоРабочихДнейВГоду
	|ИЗ
	|	КалендарныеГрафики КАК ГрафикЗаГод
	|ГДЕ
	|	ГрафикЗаГод.Календарь = &Календарь
	|	И ГрафикЗаГод.Год = ГОД(&ДатаОт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикЗаГод.Год,
	|	ГрафикЗаГод.КоличествоДнейВГрафикеСНачалаГода КАК КоличествоДнейВГрафикеСНачалаГода,
	|	КоличествоРабочихДнейВГоду.КоличествоДнейВсего
	|ПОМЕСТИТЬ ВТ_КалендарныйГрафик
	|ИЗ
	|	КалендарныеГрафики КАК ГрафикЗаГод
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КоличествоРабочихДнейВГоду КАК КоличествоРабочихДнейВГоду
	|		ПО (ГрафикЗаГод.Календарь = &Календарь)
	|			И (ГрафикЗаГод.ДатаГрафика = &ДатаОт)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КоличествоДнейВГрафикеСНачалаГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендарныйГрафик.ИндексСтроки,
	|	КалендарныйГрафик.КоличествоДней,
	|	ЕСТЬNULL(КалендарныйГрафик.ДатаПоКалендарю, НЕОПРЕДЕЛЕНО) КАК ДатаПоКалендарю
	|ИЗ
	|	(ВЫБРАТЬ
	|		ГрафикЗаГодДатаОт.ИндексСтроки КАК ИндексСтроки,
	|		ГрафикЗаГодДатаОт.КоличествоДней КАК КоличествоДней,
	|		МИНИМУМ(ГрафикЗаГод.ДатаГрафика) КАК ДатаПоКалендарю
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТаблицаДат.ИндексСтроки КАК ИндексСтроки,
	|			ТаблицаДат.КоличествоДней КАК КоличествоДней,
	|			ВЫБОР
	|				КОГДА КалендарныйГрафик.КоличествоДнейВсего ЕСТЬ NULL 
	|						ИЛИ КалендарныйГрафик.КоличествоДнейВсего >= КалендарныйГрафик.КоличествоДнейВГрафикеСНачалаГода + ТаблицаДат.КоличествоДней
	|					ТОГДА ГОД(&ДатаОт)
	|				ИНАЧЕ ГОД(&ДатаОт) + 1
	|			КОНЕЦ КАК ГодДатыОкончания,
	|			КалендарныйГрафик.КоличествоДнейВГрафикеСНачалаГода + ТаблицаДат.КоличествоДней - ВЫБОР
	|				КОГДА КалендарныйГрафик.КоличествоДнейВсего < КалендарныйГрафик.КоличествоДнейВГрафикеСНачалаГода + ТаблицаДат.КоличествоДней
	|					ТОГДА КалендарныйГрафик.КоличествоДнейВсего
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК КоличествоДнейДляДатыПо
	|		ИЗ
	|			ВТ_ТаблицаДат КАК ТаблицаДат
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КалендарныйГрафик КАК КалендарныйГрафик
	|				ПО (ИСТИНА)) КАК ГрафикЗаГодДатаОт
	|			ЛЕВОЕ СОЕДИНЕНИЕ КалендарныеГрафики КАК ГрафикЗаГод
	|			ПО (ГрафикЗаГод.Календарь = &Календарь)
	|				И ГрафикЗаГодДатаОт.КоличествоДнейДляДатыПо = ГрафикЗаГод.КоличествоДнейВГрафикеСНачалаГода
	|				И ГрафикЗаГодДатаОт.ГодДатыОкончания = ГрафикЗаГод.Год
	|				И (ГрафикЗаГод.ДатаГрафика >= &ДатаОт)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ГрафикЗаГодДатаОт.ИндексСтроки,
	|		ГрафикЗаГодДатаОт.КоличествоДней) КАК КалендарныйГрафик
	|
	|УПОРЯДОЧИТЬ ПО
	|	КалендарныйГрафик.ИндексСтроки";
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивДат = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ДатаПоКалендарю = Неопределено Тогда
			СообщениеОбОшибке = НСтр("ru = 'Календарь ""%1"" не заполнен с даты %2 на указанное количество рабочих дней.'");
			Если ВызыватьИсключение Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					СообщениеОбОшибке,
					Календарь, Формат(ДатаОт, "ДЛФ=D"));
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		МассивДат.Добавить(Выборка.ДатаПоКалендарю);
	КонецЦикла;
	
	Возврат МассивДат;
	
КонецФункции

// Функция возвращает дату, которая отличается указанной даты на количество дней,
// входящих в указанный график
//
// Параметры
//	Календарь		- календарь, который необходимо использовать, тип СправочникСсылка.Календари
//	ДатаОт			- дата, от которой нужно рассчитать количество дней, тип Дата
//	КоличествоДней	- количество дней, на которые нужно увеличить дату начала, тип Число
//	ВызыватьИсключение - булево, если Истина вызывается исключение в случае незаполненного календаря
//
// Возвращаемое значение
//	Дата			- дата, увеличенная на количество дней, входящих в график
//	Если выбранный календарь не заполнен, и ВызыватьИсключение = Ложь, возвращается Неопределено
//
Функция ПолучитьДатуПоКалендарю(Знач Календарь, Знач ДатаОт, Знач КоличествоДней, ВызыватьИсключение = Истина) Экспорт
	
	ДатаОт = НачалоДня(ДатаОт);
	
	Если КоличествоДней = 0 Тогда
		Возврат ДатаОт;
	КонецЕсли;
	
	МассивДней = Новый Массив;
	МассивДней.Добавить(КоличествоДней);
	
	МассивДат = ПолучитьМассивДатПоКалендарю(Календарь, ДатаОт, МассивДней, ВызыватьИсключение);
	
	Возврат ?(МассивДат <> Неопределено, МассивДат[0], Неопределено);
	
КонецФункции

// Функция определяет количество дней, входящих в календарь, для указанного периода
//
// Параметры
//	Календарь		- календарь, который необходимо использовать, тип СправочникСсылка.Календари
//	ДатаНачала		- дата начала периода
//	ДатаОкончания	- дата окончания периода
//	ВызыватьИсключение - булево, если Истина вызывается исключение в случае незаполненного календаря
//
// Возвращаемое значение
//	Число		- количество дней между датами начала и окончания
//	Если выбранный календарь не заполнен, и ВызыватьИсключение = Ложь, возвращается Неопределено
//
Функция ПолучитьРазностьДатПоКалендарю(Знач Календарь, Знач ДатаНачала, Знач ДатаОкончания, ВызыватьИсключение = Истина) Экспорт
	
	ДатаНачала		= НачалоДня(ДатаНачала);
	ДатаОкончания	= НачалоДня(ДатаОкончания);
	
	ДатыГрафика = Новый Массив;
	ДатыГрафика.Добавить(ДатаНачала);
	Если Год(ДатаНачала) <> Год(ДатаОкончания) И КонецДня(ДатаНачала) <> КонецГода(ДатаНачала) Тогда
		Для НомерГода = Год(ДатаНачала) По Год(ДатаОкончания) - 1 Цикл
			ДатыГрафика.Добавить(Дата(НомерГода, 12, 31));
		КонецЦикла;
	КонецЕсли;
	ДатыГрафика.Добавить(ДатаОкончания);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Календарь",		Календарь);
	Запрос.УстановитьПараметр("ДатыГрафика",	ДатыГрафика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КалендарныеГрафики.Год,
	|	КалендарныеГрафики.ДеньВключенВГрафик,
	|	КалендарныеГрафики.КоличествоДнейВГрафикеСНачалаГода
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь = &Календарь
	|	И КалендарныеГрафики.ДатаГрафика В(&ДатыГрафика)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КалендарныеГрафики.ДатаГрафика";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Если ВызыватьИсключение Тогда
			СообщениеОбОшибке = НСтр("ru = 'Календарь ""%1"" не заполнен на период %2.'");
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				СообщениеОбОшибке,
				Календарь, ПредставлениеПериода(ДатаНачала, КонецДня(ДатаОкончания)));
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	КоличествоДнейВГрафике			= 0;
	ПредыдущийГод					= Год(ДатаНачала);
	УчестьКоличествоДнейСНачалаГода	= КонецДня(ДатаНачала) <> КонецГода(ДатаНачала);
	ДобавитьПервыйДень				= Неопределено;
	
	Пока Выборка.Следующий() Цикл
		КоличествоДнейВГрафике = ?(УчестьКоличествоДнейСНачалаГода, Выборка.КоличествоДнейВГрафикеСНачалаГода, 0)
			- ?(Выборка.Год > ПредыдущийГод, -1 * КоличествоДнейВГрафике, КоличествоДнейВГрафике);
		
		ПредыдущийГод					= Выборка.Год;
		УчестьКоличествоДнейСНачалаГода	= Истина;
		
		Если ДобавитьПервыйДень = Неопределено Тогда
			ДобавитьПервыйДень			= Выборка.ДеньВключенВГрафик;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоДнейВГрафике + ?(ДобавитьПервыйДень, 1, 0);
	
КонецФункции

// Функция определяет для каждой даты дату ближайшего к ней рабочего дня
//
//	Параметры:
//	График 						- ссылка на календарь или производственный календарь
//	НачальныеДаты 				- массив дат
//	ПолучатьПредшествующие		- способ получения ближайшей даты, 
//								если Истина – определяются рабочие даты, предшествующие переданным в параметре НачальныеДаты, 
//								если Ложь – получаются даты не ранее начальной даты
//	ВызыватьИсключение 			- булево, если Истина вызывается исключение в случае незаполненного календаря
//
//	Возвращаемое значение:
//	РабочиеДаты					- соответствие, где ключ - дата из переданного массива, 
//								значение - ближайшая к ней рабочая дата (если передана рабочая дата, то она же и возвращается)
//	Если выбранный календарь не заполнен, и ВызыватьИсключение = Ложь, возвращается Неопределено
//
Функция ПолучитьДатыРабочихДней(График, НачальныеДаты, ПолучатьПредшествующие = Ложь, ВызыватьИсключение = Истина) Экспорт
	
	ТекстЗапросаВТ = "";
	ПерваяЧасть = Истина;
	Для Каждого НачальнаяДата Из НачальныеДаты Цикл
		Если НЕ ПерваяЧасть Тогда
			ТекстЗапросаВТ = ТекстЗапросаВТ + "
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
		ТекстЗапросаВТ = ТекстЗапросаВТ + "
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(" + Формат(НачальнаяДата, "ДФ=гггг,ММ,дд") + ")";
		Если ПерваяЧасть Тогда
			ТекстЗапросаВТ = ТекстЗапросаВТ + " КАК Дата 
			|ПОМЕСТИТЬ НачальныеДаты
			|";
		КонецЕсли;
		ПерваяЧасть = Ложь;
	КонецЦикла;

	Если ПустаяСтрока(ТекстЗапросаВТ) Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаВТ);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	Если ТипЗнч(График) = Тип("СправочникСсылка.Календари") Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НачальныеДаты.Дата,
		|	%Функция%(ДатыКалендаря.ДатаГрафика) КАК БлижайшаяДата
		|ИЗ
		|	НачальныеДаты КАК НачальныеДаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатыКалендаря
		|		ПО (ДатыКалендаря.ДатаГрафика %ЗнакУсловия% НачальныеДаты.Дата)
		|			И (ДатыКалендаря.Календарь = &График)
		|			И (ДатыКалендаря.ДеньВключенВГрафик)
		|
		|СГРУППИРОВАТЬ ПО
		|	НачальныеДаты.Дата";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НачальныеДаты.Дата,
		|	%Функция%(ДатыКалендаря.Дата) КАК БлижайшаяДата
		|ИЗ
		|	НачальныеДаты КАК НачальныеДаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДатыКалендаря
		|		ПО (ДатыКалендаря.Дата %ЗнакУсловия% НачальныеДаты.Дата)
		|			И (ДатыКалендаря.ПроизводственныйКалендарь = &График)
		|			И (ДатыКалендаря.ВидДня В (
		|			ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), 
		|			ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|			))
		|
		|СГРУППИРОВАТЬ ПО
		|	НачальныеДаты.Дата";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Функция%", 				?(ПолучатьПредшествующие, "МАКСИМУМ", "МИНИМУМ"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ЗнакУсловия%", 			?(ПолучатьПредшествующие, "<=", ">="));
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("График", График);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДатыРабочихДней = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.БлижайшаяДата) Тогда
			ДатыРабочихДней.Вставить(Выборка.Дата, Выборка.БлижайшаяДата);
		Иначе 
			Если ВызыватьИсключение Тогда
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Невозможно определить ближайшую рабочую дату для даты %1, возможно, календарь не заполнен.'"), 
									Формат(Выборка.Дата, "ДЛФ=D"));
				ВызватьИсключение(ТекстИсключения);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДатыРабочихДней;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.3.11";
	Обработчик.Процедура = "КалендарныеГрафики.СоздатьКалендарьПятидневкаРоссийскойФедерации";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.15";
	Обработчик.Процедура = "КалендарныеГрафики.ОбновитьПроизводственныеКалендари";
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.15";
	Обработчик.Процедура = "КалендарныеГрафики.ОбновитьДанныеПроизводственныхКалендарей";
	Обработчик.ОбщиеДанные = Истина;
	
КонецПроцедуры

// Процедура создает календарь на основе производственного календаря 
// Российской Федерации по шаблону "Пятидневка"
//
Процедура СоздатьКалендарьПятидневкаРоссийскойФедерации() Экспорт
	
	ПроизводственныйКалендарь = Справочники.ПроизводственныеКалендари.НайтиПоКоду("РФ");
	Если ПроизводственныйКалендарь.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не Справочники.Календари.НайтиПоРеквизиту("ПроизводственныйКалендарь", ПроизводственныйКалендарь).Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	НовыйКалендарь = Справочники.Календари.СоздатьЭлемент();
	НовыйКалендарь.Наименование = ПроизводственныйКалендарь.Наименование;
	НовыйКалендарь.ПроизводственныйКалендарь = ПроизводственныйКалендарь;
	НовыйКалендарь.ВидКалендаря = Перечисления.ВидыКалендарей.Пятидневка;
	НовыйКалендарь.Записать();
	
КонецПроцедуры

// Обновляет справочник Производственные календари из одноименного макета
//
Процедура ОбновитьПроизводственныеКалендари() Экспорт
	
	КлассификаторXML = Справочники.ПроизводственныеКалендари.ПолучитьМакет("ПроизводственныеКалендари").ПолучитьТекст();
	
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	
	Справочники.ПроизводственныеКалендари.ОбновитьПроизводственныеКалендари(КлассификаторТаблица);
	
КонецПроцедуры

// Обновляет данные производственных календарей из макета 
//  ДанныеПроизводственныхКалендарей
//
Функция ОбновитьДанныеПроизводственныхКалендарей() Экспорт
	
	ТаблицаДанных = Справочники.ПроизводственныеКалендари.ДанныеПроизводственныхКалендарейИзМакета();
	
	Изменения = Справочники.ПроизводственныеКалендари.ИзмененияДанных(ТаблицаДанных);
	
	// Обновляем данные производственных календарей
	Справочники.ПроизводственныеКалендари.ОбновитьДанныеПроизводственныхКалендарей(Изменения);
	
	// Обновляем данные графиков работы, заполняемых автоматически на основании производственных календарей
	СтандартныеПодсистемыПереопределяемый.ЗапланироватьОбновлениеКалендарейПоДаннымПроизводственныхКалендарей(Изменения);
	
КонецФункции
