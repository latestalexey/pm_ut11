////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыВызовСервераСлужебный: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями электронных документов

// Получает сопоставление владельцев и актуальных ЭД
//
// Параметры:
//  МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
Функция ПолучитьСоответствиеВладельцевИЭД(МассивСсылокНаВладельцев) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
	|	СостоянияЭД.ЭлектронныйДокумент КАК СсылкаНаЭД
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
	Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	Пока Результат.Следующий() Цикл
		СоответствиеВладельцевИЭД.Вставить(Результат.ВладелецЭд, Результат.СсылкаНаЭД);
	КонецЦикла;
	
	Возврат СоответствиеВладельцевИЭД;
	
КонецФункции

// Изменяет состояние версии электронного документа.
//
// Параметры:
//  ЭлектронныйДокумент - СправочникСсылка.ЭДПрисоединенныеФайлы, Массив - электронные документы, версии которых надо обновить.
//  ПринудительнаяСменаСостоянияВерсии - Булево, признак смены версии, несмотря на условия.
//
Процедура ОбновитьВерсиюЭД(ЭлектронныйДокумент, ПринудительнаяСменаСостоянияВерсии = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЭлектронныйДокумент) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ЭлектронныйДокумент Цикл
			ОбновитьВерсиюЭД(ЭлементМассива);
		КонецЦикла;
	ИначеЕсли НЕ ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Тогда
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ЭлектронныйДокумент.ВладелецФайла);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()<>0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			
			Если ЭлектронныйДокумент = НоваяЗаписьНабора.ЭлектронныйДокумент
				
				ИЛИ (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец)
				
				ИЛИ (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель)
				
				ИЛИ (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
				
				ИЛИ ((ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
				ИЛИ ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани)
				И НоваяЗаписьНабора.ЭлектронныйДокумент.Пустая())
				ИЛИ ПринудительнаяСменаСостоянияВерсии Тогда

				НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(ЭлектронныйДокумент);
				
				СтруктураСводнойИнфПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(ЭлектронныйДокумент);
				НоваяЗаписьНабора.ДействияСНашейСтороны = СтруктураСводнойИнфПоСтатусу.СНашейСтороны;
				НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = СтруктураСводнойИнфПоСтатусу.СоСтороныДругогоУчастника;
				НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
				НаборЗаписей.Записать();
			ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
				И ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
				И НЕ НоваяЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент
				И НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
				
				НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент;
				НаборЗаписей.Записать();
			ИначеЕсли (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
				ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				И НоваяЗаписьНабора.ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
				И ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				
				НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НаУтверждении;
				НаборЗаписей.Записать();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ВидЭД") = Перечисления.ВидыЭД.ИзвещениеОПолучении Тогда
		НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
		ВладелецЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент, "ВладелецФайла");
		НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(ВладелецЭД);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()<>0 Тогда
			НоваяЗаписьНабора = НаборЗаписей.Получить(0);
			НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ОпределитьСостояниеВерсииПоСтатусуЭД(
																						НоваяЗаписьНабора.ЭлектронныйДокумент);
			СтруктураСводнойИнфПоСтатусу = ОпределитьСводнуюИнформациюПоСтатусуЭД(НоваяЗаписьНабора.ЭлектронныйДокумент);
			НоваяЗаписьНабора.ДействияСНашейСтороны = СтруктураСводнойИнфПоСтатусу.СНашейСтороны;
			НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = СтруктураСводнойИнфПоСтатусу.СоСтороныДругогоУчастника;
			НаборЗаписей.Записать();
		КонецЕсли
	
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает новую версию электронного документа для владельца.
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на документ базы данных, номер версии электронного документа которого надо изменить,
//  ПрисоединенныйФайл - ссылка на электронный документ, который в данный момент является актуальным
//
Процедура УстановитьНовуюВерсиюЭД(СсылкаНаОбъект, ПрисоединенныйФайл = Неопределено, УдалятьСтаруюВерсию = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.СостоянияЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗаписьНабора = НаборЗаписей.Добавить();
		НоваяЗаписьНабора.СсылкаНаОбъект      = СсылкаНаОбъект;
		НоваяЗаписьНабора.ЭлектронныйДокумент = ?(ПрисоединенныйФайл = Неопределено,
		Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка(), ПрисоединенныйФайл);
		НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ПолучитьПервоеСостояниеВерсииЭДДляВладельца(
																					СсылкаНаОбъект,
																					ЗначениеЗаполнено(ПрисоединенныйФайл));
	Иначе
		
		НоваяЗаписьНабора = НаборЗаписей.Получить(0);
		Если УдалятьСтаруюВерсию Тогда
			УдалитьСтаруюВерсиюЭД(НоваяЗаписьНабора);
		КонецЕсли;
		Если СсылкаНаОбъект.ПометкаУдаления Тогда
			НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
		Иначе
			НоваяЗаписьНабора.СостояниеВерсииЭД = ЭлектронныеДокументыСлужебный.ПолучитьПервоеСостояниеВерсииЭДДляВладельца(
																						СсылкаНаОбъект,
																						Истина);
		КонецЕсли;
		Если ПрисоединенныйФайл = Неопределено ИЛИ ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			НоваяЗаписьНабора.ЭлектронныйДокумент = ?(ПрисоединенныйФайл = Неопределено,
			Справочники.ЭДПрисоединенныеФайлы.ПустаяСсылка(), ПрисоединенныйФайл);
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяЗаписьНабора.СостояниеВерсииЭД = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
		
		НоваяЗаписьНабора.ДействияСНашейСтороны             = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
		НоваяЗаписьНабора.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Только для внутреннего использования
Функция ОпределитьЭлектронныйДокумент(УникальныйИД, НаправлениеЭД = Неопределено, ВидЭД = Неопределено, ТипЭлементаВерсииЭД = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.УникальныйИД = &УникальныйИД
	|	И ЭДПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	
	Если НаправлениеЭД <> Неопределено Тогда
		Текст = Текст + "
		|И ЭДПрисоединенныеФайлы.НаправлениеЭД = &НаправлениеЭД";
	КонецЕсли;
	Если ВидЭД <> Неопределено Тогда
		Текст = Текст + "
		|И ЭДПрисоединенныеФайлы.ВидЭД = &ВидЭД";
	КонецЕсли;
	Если ТипЭлементаВерсииЭД <> Неопределено Тогда
		Текст = Текст + "
		|И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = &ТипЭлементаВерсииЭД";
	КонецЕсли;
	
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("УникальныйИД",        УникальныйИД);
	Запрос.УстановитьПараметр("НаправлениеЭД",       НаправлениеЭД);
	Запрос.УстановитьПараметр("ВидЭД",               ВидЭД);
	Запрос.УстановитьПараметр("ТипЭлементаВерсииЭД", ТипЭлементаВерсииЭД);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выбрать();
	
	ВозвращаемыйПараметр = Неопределено;
	Если Результат.Следующий() Тогда
		ВозвращаемыйПараметр = Результат.Ссылка;
	КонецЕсли;
	
	Возврат ВозвращаемыйПараметр;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов электронных документов

// Возвращает массив двоичных данных содержимого пакета электронных документов.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ПараметрыШифрования - Структура, настройки шифрования, применимые к данному пакету электронных документов.
//
Функция ВернутьМассивДвоичныхДанныхПакета(ПакетЭД, ПапкаДляРаспаковки = "", ПараметрыШифрования) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПакетЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
		Возврат ЭлектронныеДокументыВнутренний.ВернутьМассивДвоичныхДанныхПакетаОператораЭДО(ПакетЭД, ПапкаДляРаспаковки, ПараметрыШифрования);
	КонецЕсли;
	
	// Так как данный процесс потенциально порождает много ошибок и выполняется в цикле, возьмем его целиком в попытку-исключение,
	// чтобы при ошибке в одном контейнере, остальные могли корректно распаковаться
	
	ФайлАрхива = "";
	ФайлРасшифрованногоАрхива = "";
	
	Если НЕ ЗначениеЗаполнено(ПапкаДляРаспаковки) Тогда
		ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("Ext",
																		  ПакетЭД.Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
	Попытка
		// Проверим, что соглашение, указанное в пакете, до сих пор действует.
		Соглашение = ПакетЭД.Соглашение;
		Если Соглашение.Пустая() ИЛИ Соглашение.СтатусСоглашения <> Перечисления.СтатусыСоглашенийЭД.Действует Тогда
			СообщениеИсключения = НСтр("ru = 'По данному пакету электронных документов нет действующего соглашения.
			|Распаковка невозможна.'");
			ВызватьИсключение(СообщениеИсключения);
			Возврат Неопределено;
		КонецЕсли;
		
		// Необходимо получить архив пакета из присоединенных файлов к документу
		СтруктураОтбора = Новый Структура("ВладелецФайла", ПакетЭД);
		ВыборкаПрисоединенныхФайлов = ЭлектронныеДокументыСлужебный.ПолучитьВыборкуЭДПоОтбору(СтруктураОтбора);
		Если НЕ ЗначениеЗаполнено(ВыборкаПрисоединенныхФайлов) ИЛИ НЕ ВыборкаПрисоединенныхФайлов.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Для каждого из пакетов необходимо определить файл с данными
		ПараметрыДанных = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаПрисоединенныхФайлов.Ссылка);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
		ФайлАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
		ДвоичныеДанныеФайла.Записать(ФайлАрхива);
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
		УдалитьФайлы(ПапкаДляРаспаковки, "*"); 
		
		Попытка
			ЗИПЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗИПЧтение, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
			КонецЕсли;
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
			Возврат Неопределено;
		КонецПопытки;
		
		ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
		
		// Файл с данными также лежит в виде .zip-архива.
		// В одном пакете может лежать несколько файлов данных, соберем их в массив.
		
		МассивФайловДанных = НайтиФайлы(ПапкаДляРаспаковки, "*.zip");
		МассивФайловИзвещений = НайтиФайлы(ПапкаДляРаспаковки, "*ИзвещениеОПолученииДокумента*.xml");
		
		// Расшифровать файл с данными
		// Найдем файл с информацией о шифровании документа
		ФайлИнформации = Неопределено;
		Для Каждого Файл Из ФайлыАрхива Цикл
			Если Найти(Файл.Имя, "packageDescription") > 0  Тогда
				ФайлИнформации = Файл;
			ИначеЕсли Файл.Расширение = ".xml" Тогда
				МассивФайловДанных.Добавить(Файл);
			КонецЕсли;
		КонецЦикла;
		
		// Для последующих действий определим соглашение 
		
		ТекстИнформации = Новый ТекстовыйДокумент;
		ТекстИнформации.Прочитать(ФайлИнформации.ПолноеИмя);
		НастройкиКриптографии  = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
		ПровайдерЭЦП           = НастройкиКриптографии.ПровайдерЭЦП;
		ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭЦП       = НастройкиКриптографии.ТипПровайдераЭЦП;
		
		Попытка
			МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
			МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
			МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
			МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
		Исключение
			// Менеджер криптографии генерирует ошибку при создании, если заданы неправильно настройки,
			// либо отсутствует ПО криптопровайдера.
			// В этом случае менеджерам присваиваем "Неопределено"
			МенеджерКриптографии = Неопределено;
		КонецПопытки;
		
		СоответствиеФайлПараметры = ПолучитьСоответствиеФайлПараметры(ФайлИнформации);
		
		ПакетЭДОбъект = ПакетЭД.ПолучитьОбъект();
		
		МассивДобавленныхФайлов = Новый Массив;
		ЭтоПроизвольныйЭД = Ложь;
		
		Если Не СоответствиеФайлПараметры.Получить("Текст") = Неопределено Тогда
			ЭтоПроизвольныйЭД = Истина;
		КонецЕсли;
		
		Если ЭтоПроизвольныйЭД Тогда
			ЭлектронныеДокументыСлужебный.ОбработатьВходящийПроизвольныйЭД(ПапкаДляРаспаковки,
																		   ПараметрыШифрования,
																		   МассивФайловДанных,
																		   МенеджерКриптографии,
																		   МенеджерКриптографии,
																		   ПакетЭДОбъект,
																		   СоответствиеФайлПараметры);
			УдалитьФайлы(ПапкаДляРаспаковки);
			УдалитьФайлы(ФайлАрхива);
			Возврат Неопределено;
		КонецЕсли;
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("СоответствиеФайлПараметры",        СоответствиеФайлПараметры);
		СтруктураВозврата.Вставить("СтруктураДвоичныхДанных",          ПреобразоватьМассивФайловВДвоичныеДанные(
			МассивФайловДанных));
		СтруктураВозврата.Вставить("СтруктураДвоичныхДанныхИзвещений", ПреобразоватьМассивФайловВДвоичныеДанные(
			МассивФайловИзвещений));
		СтруктураВозврата.Вставить("ПапкаДляРаспаковки", ПапкаДляРаспаковки);
		Возврат СтруктураВозврата;
		
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"), ТекстОшибки, ТекстСообщения);
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Функция, добавляющая данные по распакованному пакету электронных документов.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД, пакет электронных документов, по которому необходимо добавить данные. 
//  СтруктураДанныхПодписей - Структура, связывающая двоичные данные файла данных и двоичные данные файла электронной цифровой подписи.
//  СтруктураДанных - Структура, связывающая имена файлов и их двоичные данные.
//  СоответствиеФайлПараметры - Соответствие, связывающее имена файлов данных и имена файлов электронных цифровых подписей.
//
Функция ДобавитьДанныеПоПакетуЭД(ПакетЭД,
								СтруктураДанныхПодписей,
								СтруктураДанных,
								СоответствиеФайлПараметры,
								ПапкаДляРаспаковки,
								ФлагОшибки = Ложь,
								ЕстьКриптосредствоНаКлиенте = Неопределено,
								СоответствиеЭДИПодписей = Неопределено) Экспорт
								
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоПроизвольныйЭД = Ложь;
	
	ПапкаДляРасшифровки = ЭлектронныеДокументыСлужебный.РабочийКаталог("Dec",
																	   ПакетЭД.Ссылка.УникальныйИдентификатор());
	
	Если Найти(СтруктураДанных.ИмяФайла, "ИзвещениеОПолученииДокумента") > 0 Тогда
		ОбработатьИзвещениеОператора(ПакетЭД, СтруктураДанныхПодписей, СтруктураДанных, СоответствиеФайлПараметры);
		УдалитьФайлы(ПапкаДляРаспаковки);
		УдалитьФайлы(ПапкаДляРасшифровки);
		Возврат Неопределено;
	КонецЕсли;
	
	МассивДобавленныхФайлов = Новый Массив;
	// Попытаемся получить настройки криптографии.
	// Если неудачно, значит средства криптографии не установлены на АРМ
	Попытка
		НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
		ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
		ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
		ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
		
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
		МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
		МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
		МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
	Исключение
		МенеджерКриптографии = Неопределено;
	КонецПопытки;
	
	Если НЕ ЕстьКриптосредствоНаКлиенте = Истина И СтруктураДанныхПодписей.Количество() > 0
		И МенеджерКриптографии = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка распаковки пакета:
		|%1
		|Пакет содержит электронные цифровые подписи. Для распаковки требуется наличие криптосредства на компьютере.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПакетЭД);

		Если НЕ ЕстьКриптосредствоНаКлиенте = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Распаковка пакета'"), УровеньЖурналаРегистрации.Информация, , , ТекстСообщения);
		ФлагОшибки = Истина;
		УдалитьФайлы(ПапкаДляРаспаковки);
		УдалитьФайлы(ПапкаДляРасшифровки);
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ПакетЭДОбъект = ПакетЭД.ПолучитьОбъект();
		Соглашение = ПакетЭД.Соглашение;
		
		Если НЕ ПолучитьФайлДанныхДляОбработки(СтруктураДанных, ПапкаДляРасшифровки) Тогда
			УдалитьФайлы(ПапкаДляРаспаковки);
			УдалитьФайлы(ПапкаДляРасшифровки);
			Возврат Неопределено;
		КонецЕсли;
		
		ФайлыРасшифровки = НайтиФайлы(ПапкаДляРасшифровки, "*.xml");
		
		СтруктураПодписей = СоответствиеФайлПараметры.Получить(СтруктураДанных.ИмяФайла);
		Если ФайлыРасшифровки.Количество() = 0 Тогда
			СтруктураФайлаЭД = Новый Структура;
			СтруктураФайлаЭД.Вставить("ВидЭД",         Перечисления.ВидыЭД.ПроизвольныйЭД);
			СтруктураФайлаЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
			ЭтоПроизвольныйЭД = Истина;
			
		Иначе
			ФайлСДанными = ФайлыРасшифровки[0];
			Попытка
				СтруктураФайлаЭД = ЭлектронныеДокументыВнутренний.ПрочитатьШапкуФайлаCMLпоXDTO(ФайлСДанными.ПолноеИмя);
				// Xsd-схема Счета-фактуры не позволяет передавать НомерЭД,
				// в этом случае возьмем НомерЭД из карточки транспортной информации.
				КодРегламента = "";
				Если СтруктураПодписей.Свойство("КодРегламента", КодРегламента) И ЗначениеЗаполнено(КодРегламента) Тогда
					СтруктураФайлаЭД.НомерЭД = СтруктураПодписей.НомерЭД;
				КонецЕсли;
				
				СтруктураФайлаЭД.Вставить("НаправлениеЭД", ОпределитьНаправление(СтруктураФайлаЭД));
				
				// Организацию и контрагента берем из пакета, т.к. для входящих и исходящих файлов они меняются местами
				СтруктураФайлаЭД.Вставить("Организация", ПакетЭДОбъект.Организация);
				СтруктураФайлаЭД.Вставить("Контрагент",  ПакетЭДОбъект.Контрагент);
				
			Исключение
				СтруктураФайлаЭД = Новый Структура;
				СтруктураФайлаЭД.Вставить("ВидЭД",         Перечисления.ВидыЭД.ПроизвольныйЭД);
				СтруктураФайлаЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
				ЭтоПроизвольныйЭД = Истина;
			КонецПопытки;
		КонецЕсли;
		
		Если Не ЭтоПроизвольныйЭД Тогда
			ОбъектВладелец = ?(СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров, ПакетЭД.Соглашение,
				ЭлектронныеДокументыСлужебный.ОпределитьОбъектПривязки(СтруктураФайлаЭД));
			
			Если ПакетЭДОбъект.Соглашение.СпособОбменаЭД <> Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				
				СтруктураФайлаЭД.Вставить("Партнер", ПакетЭДОбъект.Соглашение.Партнер);
			КонецЕсли;
			
			Если НЕ ЕстьДействующееСоглашение(СтруктураФайлаЭД)
				И СтруктураФайлаЭД.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Покупатель
				И СтруктураФайлаЭД.ВидЭД <> Перечисления.ВидыЭД.ТОРГ12Продавец
				И СтруктураФайлаЭД.ВидЭД <> Перечисления.ВидыЭД.АктИсполнитель
				И СтруктураФайлаЭД.ВидЭД <> Перечисления.ВидыЭД.АктЗаказчик
				И СтруктураФайлаЭД.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель
				И СтруктураФайлаЭД.ВидЭД <> Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
				
				ЭлектронныеДокументыСлужебный.СообщитьОбОтсутствииСоглашенияЭД(СтруктураФайлаЭД, ОбъектВладелец);
				ФлагОшибки = истина;
				УдалитьФайлы(ПапкаДляРаспаковки);
				УдалитьФайлы(ПапкаДляРасшифровки);
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПолноеИмяФайла", ФайлСДанными.ПолноеИмя);
		
		ДопДанные = "";
		Если СтруктураПодписей.Свойство("ДопДанные", ДопДанные) И ТипЗнч(ДопДанные) = Тип("Структура") И ДопДанные.Количество() > 0 Тогда
			ИмяФайлаДопДанных = "";
			Если ДопДанные.Свойство("ФайлДопДанных", ИмяФайлаДопДанных) Тогда
				ПолноеИмяДопФайла = ПапкаДляРаспаковки + "\" + ИмяФайлаДопДанных;
				СтруктураПараметров.Вставить("ФайлДопДанных", ПолноеИмяДопФайла);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбъектВладелец <> Неопределено Тогда
			СтруктураЭД = Неопределено;
			НовыйДокумент = ОбъектВладелец;
		Иначе
			СтруктураЭД = ЭлектронныеДокументыВнутренний.РазобратьФайлДанных(СтруктураПараметров);
			
			// Xsd-схема счета-фактуры не позволяет передавать НомерЭД,
			// в этом случае возьмем НомерЭД из карточки транспортной информации.
			КодРегламента = "";
			Если СтруктураПодписей.Свойство("КодРегламента", КодРегламента) И ЗначениеЗаполнено(КодРегламента) Тогда
				СтруктураЭД.НомерЭД = СтруктураПодписей.НомерЭД;
			КонецЕсли;
			
			Если СтруктураЭД.Свойство("ВладелецЭД") Тогда
				НовыйДокумент = СтруктураЭД.ВладелецЭД;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НовыйДокумент) Тогда
			ФлагОшибки = Истина;
			УдалитьФайлы(ПапкаДляРаспаковки);
			УдалитьФайлы(ПапкаДляРасшифровки);
			Возврат Неопределено;
		КонецЕсли;
		
		Если Соглашение.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском
			И НЕ Найти(Соглашение.ИдентификаторОрганизации, Символ(65) + Символ(76)) > 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// В присоединенные файлы к документу БД поместить файл с данными, подпись к нему,
		// указать его в табличной части транспортного пакета.
		ДобавленныйФайл = ОпределитьЭлектронныйДокумент(СтруктураПодписей.УникальныйИД, Перечисления.НаправленияЭД.Входящий,
			Перечисления.ВидыЭД.ПроизвольныйЭД);
			
		Если НЕ ЗначениеЗаполнено(ДобавленныйФайл) Тогда
		
			АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных.ДвоичныеДанные);
			СтруктураФайлаЭД.Вставить("УникальныйИД", СтруктураПодписей.УникальныйИД);
			
			ПодписиФайлаДанных = СтруктураПодписей.Подписи;
			СтруктураФайла = ЭлектронныеДокументыСлужебный.ПолучитьСтруктуруФайла(СтруктураДанных.ИмяФайла);
			
			ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(НовыйДокумент, СтруктураФайла.ИмяБезРасширения, СтруктураФайла.Расширение,
				ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), АдресВоВременномХранилище, Неопределено, , "ЭДПрисоединенныеФайлы");
			
			Ответственный = ЭлектронныеДокументыПереопределяемый.ПолучитьОтветственногоПоЭД(ПакетЭД.Контрагент, Соглашение);
			
			ЭДВладелец = "";
			Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
				ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД[?(СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура, "ЭСФ", "ПервичныйЭД")];
				// Определяем версию регламента 1С по коду регламента.
				ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
				Если КодРегламента = "Formalized" Тогда
					ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20;
				КонецЕсли;
				
				Если СтруктураЭД = Неопределено Тогда
					СтруктураОбновленияПараметров = Новый Структура;
					СтруктураОбновленияПараметров.Вставить("ВладелецЭД",                НовыйДокумент);
					СтруктураОбновленияПараметров.Вставить("ВидЭД",                     СтруктураФайлаЭД.ВидЭД);
					СтруктураОбновленияПараметров.Вставить("НаправлениеЭД",             Перечисления.НаправленияЭД.Входящий);
					СтруктураОбновленияПараметров.Вставить("НомерЭД",                   СтруктураФайлаЭД.НомерЭД);
					СтруктураОбновленияПараметров.Вставить("Организация",               СтруктураФайлаЭД.Организация);
					СтруктураОбновленияПараметров.Вставить("Контрагент",                СтруктураФайлаЭД.Контрагент);
					СтруктураОбновленияПараметров.Вставить("НомерВерсииЭД",             СтруктураФайлаЭД.НомерВерсииЭД);
					СтруктураОбновленияПараметров.Вставить("НомерДокументаОтправителя", СтруктураФайлаЭД.НомерДокументаОтправителя);
					СтруктураОбновленияПараметров.Вставить("ДатаДокументаОтправителя",  СтруктураФайлаЭД.ДатаДокументаОтправителя);
					СтруктураОбновленияПараметров.Вставить("Ответственный",             Ответственный);
					СтруктураОбновленияПараметров.Вставить("Отправитель",               ПакетЭД.Отправитель);
					СтруктураОбновленияПараметров.Вставить("Получатель",                Соглашение.ИдентификаторОрганизации);
					СтруктураОбновленияПараметров.Вставить("СоглашениеЭД",              Соглашение);
					СтруктураОбновленияПараметров.Вставить("УникальныйИД",              СтруктураФайлаЭД.УникальныйИД);
					СтруктураОбновленияПараметров.Вставить("ТипЭлементаВерсииЭД",       ТипЭлементаВерсииЭД);
					СтруктураОбновленияПараметров.Вставить("ВерсияРегламентаЭДО",       ВерсияРегламентаЭДО);
					СтруктураОбновленияПараметров.Вставить("ДатаФормированияЭДОтправителем", СтруктураФайлаЭД.ДатаФормированияЭДОтправителем);
					Если СтруктураФайлаЭД.Свойство("ЭлектронныйДокументВладелец", ЭДВладелец) Тогда
						СтруктураОбновленияПараметров.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
					КонецЕсли;
					
					Если СтруктураОбновленияПараметров.Свойство("Организация")
						И СтруктураОбновленияПараметров.Организация <> Соглашение.Организация Тогда
						
						ТекстСообщения = НСтр("ru = 'Ошибка настройки соглашения: стороны ЭД отличны от указанных в соглашении.'");
						УдалитьФайлы(ПапкаДляРасшифровки);
						УдалитьФайлы(ПапкаДляРаспаковки);
						ВызватьИсключение(ТекстСообщения);
					КонецЕсли;
					УстановитьНовуюВерсиюЭД(НовыйДокумент, ДобавленныйФайл);
					ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураОбновленияПараметров);
				Иначе
					СтруктураЭД.Вставить("Отправитель",                     ПакетЭД.Отправитель);
					СтруктураЭД.Вставить("Получатель",                      Соглашение.ИдентификаторОрганизации);
					СтруктураЭД.Вставить("Ответственный",                   Ответственный);
					СтруктураЭД.Вставить("СоглашениеЭД",                    Соглашение);
					СтруктураЭД.Вставить("УникальныйИД",                    СтруктураФайлаЭД.УникальныйИД);
					СтруктураЭД.Вставить("ТипЭлементаВерсииЭД",             ТипЭлементаВерсииЭД);
					СтруктураЭД.Вставить("ВерсияРегламентаЭДО",             ВерсияРегламентаЭДО);
					СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем",  СтруктураФайлаЭД.ДатаФормированияЭДОтправителем);
					Если СтруктураФайлаЭД.Свойство("ЭлектронныйДокументВладелец", ЭДВладелец) Тогда
						СтруктураЭД.Вставить("ЭлектронныйДокументВладелец", ЭДВладелец);
					КонецЕсли;
					Если СтруктураЭД.Свойство("Организация") И ЗначениеЗаполнено(СтруктураЭД.Организация) Тогда
						Если СтруктураЭД.Организация <> Соглашение.Организация Тогда
							
							ТекстСообщения = НСтр("ru = 'Ошибка настройки соглашения: стороны ЭД отличны от указанных в соглашении.'");
							ВызватьИсключение(ТекстСообщения);
						КонецЕсли;
					Иначе
						СтруктураЭД.Вставить("Организация", Соглашение.Организация);
					КонецЕсли;
					Контрагент = "";
					Если НЕ СтруктураЭД.Свойство("Контрагент", Контрагент) ИЛИ НЕ ЗначениеЗаполнено(Контрагент) Тогда
						СтруктураЭД.Вставить("Контрагент", ПакетЭД.Контрагент);
					КонецЕсли;
					УстановитьНовуюВерсиюЭД(НовыйДокумент, ДобавленныйФайл);
					ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);
				КонецЕсли;
				
				ПолноеИмяДопФайла = "";
				Если СтруктураПараметров.Свойство("ФайлДопДанных", ПолноеИмяДопФайла) И ЗначениеЗаполнено(ПолноеИмяДопФайла) Тогда
					Файл = Новый Файл(ПолноеИмяДопФайла);
					ДвоичныеДанные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
					АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
					
					ДобавленныйДопФайл = ПрисоединенныеФайлы.ДобавитьФайл(НовыйДокумент, Файл.ИмяБезРасширения , СтрЗаменить(Файл.Расширение, ".", ""),
						ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), АдресФайла, Неопределено, , "ЭДПрисоединенныеФайлы");
					
					Если ЗначениеЗаполнено(ДобавленныйДопФайл) Тогда
						ВспомСтруктура = Новый Структура;
						ВспомСтруктура.Вставить("ВидЭД", Перечисления.ВидыЭД.ДопДанные);
						ВспомСтруктура.Вставить("Контрагент", ПакетЭД.Контрагент);
						ВспомСтруктура.Вставить("ВладелецЭД", НовыйДокумент);
						ВспомСтруктура.Вставить("СоглашениеЭД", Соглашение);
						ВспомСтруктура.Вставить("НомерЭД",      СтруктураФайлаЭД.НомерЭД);
						ВспомСтруктура.Вставить("УникальныйИД", СтруктураФайлаЭД.УникальныйИД);
						ВспомСтруктура.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);
						ВспомСтруктура.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ДополнительныйЭД);
						ВспомСтруктура.Вставить("ЭлектронныйДокументВладелец", ДобавленныйФайл);
						ВспомСтруктура.Вставить("ДатаФормированияЭДОтправителем", СтруктураФайлаЭД.ДатаДокументаОтправителя);
						
						ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйДопФайл, ВспомСтруктура);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭДВладелец)
				И (ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
					ИЛИ ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
					ИЛИ ДобавленныйФайл.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
				И ЭДВладелец.СтатусЭД <> Перечисления.СтатусыЭД.ПолученоПодтверждение Тогда
				
				СтруктураПараметровЭДВладельца = Новый Структура;
				СтруктураПараметровЭДВладельца.Вставить("ВладелецЭД", ЭДВладелец.ВладелецФайла);
				СтруктураПараметровЭДВладельца.Вставить("Контрагент", ЭДВладелец.Контрагент);
				СтруктураПараметровЭДВладельца.Вставить("ВидЭД", ЭДВладелец.ВидЭД);
				СтруктураПараметровЭДВладельца.Вставить("НаправлениеЭД", ЭДВладелец.НаправлениеЭД);
				СтруктураПараметровЭДВладельца.Вставить("СоглашениеЭД", ЭДВладелец.СоглашениеЭД);
				ДопустимыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(
					Перечисления.СтатусыЭД.ПолученоПодтверждение, ЭДВладелец);
				СтруктураПараметровЭДВладельца.Вставить("СтатусЭД", ДопустимыйСтатусЭД);
				ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ЭДВладелец, СтруктураПараметровЭДВладельца);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПодписиФайлаДанных) Тогда
				МассивПодписей = Новый Массив;
				Для Каждого ИмяФайлаПодписи Из ПодписиФайлаДанных Цикл
					ПолноеИмяФайлаПодписи = ПапкаДляРаспаковки + "\" + ИмяФайлаПодписи;
					ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ПолноеИмяФайлаПодписи);
					МассивПодписей.Добавить(ДвоичныеДанныеПодписи);
					Если ВыполнятьКриптооперацииНаСервере() Тогда
						СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи);
						Если СертификатыПодписи.Количество() <> 0 Тогда
							Сертификат = СертификатыПодписи[0];
							ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
															ДобавленныйФайл,
															ДвоичныеДанныеПодписи,
															Base64Строка(Сертификат.Отпечаток),
															ТекущаяДатаСеанса(),
															"",
															ИмяФайлаПодписи,
															ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
															Сертификат.Выгрузить());
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если ВыполнятьКриптооперацииНаСервере() Тогда
					ОпределитьСтатусыПодписей(ДобавленныйФайл);
				Иначе
					СоответствиеЭДИПодписей.Вставить(ДобавленныйФайл, МассивПодписей);
				КонецЕсли;
			КонецЕсли;
			МассивДобавленныхФайлов.Добавить(ДобавленныйФайл);
		КонецЕсли;
		
		// Добавим информацию о присоединенном файле в документ пакета электронных документов
		Для Каждого ДобавленныйФайл Из МассивДобавленныхФайлов Цикл
			
			НовыйЭлектронныйДокумент = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
			НовыйЭлектронныйДокумент.ЭлектронныйДокумент = ДобавленныйФайл;
			НовыйЭлектронныйДокумент.ОбъектВладелец      = ДобавленныйФайл.ВладелецФайла;
			
		КонецЦикла;
		
		Если МенеджерКриптографии <> Неопределено Тогда
			ПодтвержденныеДокументы = ЭлектронныеДокументыСлужебный.ОбработатьПодтвержденияДокументов(ПапкаДляРаспаковки,
																									  СоответствиеФайлПараметры,
																									  ПакетЭДОбъект);
			Для Каждого ПодтвержденныйДокумент Из ПодтвержденныеДокументы Цикл
				МассивДобавленныхФайлов.Добавить("Подтверждение " + Строка(ПодтвержденныйДокумент));
			КонецЦикла;
		КонецЕсли;
		
		ПакетЭДОбъект.Записать();
		УдалитьФайлы(ПапкаДляРасшифровки);
		
		Возврат МассивДобавленныхФайлов;
	Исключение
		УдалитьФайлы(ПапкаДляРаспаковки);
		УдалитьФайлы(ПапкаДляРасшифровки);
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
			+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'распаковка пакета ЭД'"),
										  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
										  ТекстСообщения);
		ФлагОшибки = Истина;
		Возврат Неопределено;
	КонецПопытки;

КонецФункции

// Устанавливает статус документа ПакетЭД.
//
// Параметры:
//  Пакет - Ссылка на документ ПакетЭД
//  СтатусПакета - ссылка на перечисление СтатусыПакетовЭД
//
Процедура УстановитьСтатусПакета(Пакет, СтатусПакета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетЭДОбъект = Пакет.ПолучитьОбъект();
	ПакетЭДОбъект.СтатусПакета = СтатусПакета;
	ПакетЭДОбъект.Записать();
	
КонецПроцедуры

// ПЕРЕСМОТРЕТЬ реализацию - Удаляет каталог на сервере.
//
// Параметры:
//  Каталог - Строка - Путь к удаляемому каталогу.
//
Процедура УдалитьКаталог(Каталог) Экспорт
	
	УдалитьФайлы(Каталог);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен через оператора ЭДО


////////////////////////////////////////////////////////////////////////////////
// Быстрый обмен

// Только для внутреннего использования
Функция БыстрыйОбменСформироватьЭДНаСервере(МассивСсылокНаОбъект) Экспорт
	
	НастройкиОбъектов = Новый Соответствие;
	Для Сч = 0 По МассивСсылокНаОбъект.Количество() - 1 Цикл
		СсылкаНаОбъект = МассивСсылокНаОбъект[Сч];
		НастройкиОбмена = ЭлектронныеДокументыСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(СсылкаНаОбъект, Истина);
		НастройкиОбмена.Вставить("ИдентификаторОрганизации", НастройкиОбмена.Организация.ИНН + "_" + НастройкиОбмена.Организация.КПП);
		НастройкиОбмена.Вставить("ИдентификаторКонтрагента", НастройкиОбмена.Контрагент.ИНН + "_" + НастройкиОбмена.Контрагент.КПП);
		НастройкиОбмена.Вставить("СоглашениеЭД", Новый Структура("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.БыстрыйОбмен));
		НастройкиОбъектов.Вставить(СсылкаНаОбъект, НастройкиОбмена);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСтруктур = Новый Массив;
	МассивСтруктурОбмена = ЭлектронныеДокументыСлужебный.СформироватьХМЛФайлыДокументов(МассивСсылокНаОбъект,
																						НастройкиОбъектов);
	Для Каждого СтруктураОбмена Из МассивСтруктурОбмена Цикл
		ПолноеИмяФайла = ЭлектронныеДокументыСлужебный.ПолучитьПолноеИмяФайлаЭД(СтруктураОбмена);
		
		Если НЕ ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
			Продолжить;
		КонецЕсли;
		НаименованиеФайла = БыстрыйОбменИмяСохраняемогоФайла(СтруктураОбмена.СтруктураЭД.ВладелецЭД);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
		СтруктураПараметров.Вставить("НаименованиеФайла", НаименованиеФайла);
		СтруктураПараметров.Вставить("НаправлениеЭД", СтруктураОбмена.СтруктураЭД.НаправлениеЭД);
		СтруктураПараметров.Вставить("Контрагент", СтруктураОбмена.СтруктураЭД.Контрагент);
		СтруктураПараметров.Вставить("УникальныйИдентификатор", СтруктураОбмена.СтруктураЭД.ВладелецЭД.УникальныйИдентификатор());
		СтруктураПараметров.Вставить("ВладелецЭД", СтруктураОбмена.СтруктураЭД.ВладелецЭД);
		МассивСтруктур.Добавить(СтруктураПараметров);
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через веб ресурс банка

Процедура ПолучитьДанныеВыписки(ЭД, СсылкаНаХранилище, НомерСчета, СоглашениеЭД) Экспорт
	
	Если Не ЭлектронныеДокументыСлужебный.УстановленныеПодписиВалидны(ЭД) Тогда
		Возврат;
	КонецЕсли;
	
	СоглашениеЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "СоглашениеЭД");
	
	ТекстВыписки = "";

	ЭлектронныеДокументыВнутренний.ПолучитьДанныеВыпискиБанка(ЭД, ТекстВыписки, НомерСчета);
	
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.УстановитьТекст(ТекстВыписки);
	ТекстовыйДокумент.Записать(ИмяФайла, КодировкаТекста.ANSI);
	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	СсылкаНаХранилище = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор());
		
КонецПроцедуры

// Выполняет добавление ЭЦП в электронный документ.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на элемент справочника, содержащего в себе электронный документ,
//  ДанныеПодписи - Структура параметров ЭЦП.
//
Процедура ДобавитьПодпись(ПрисоединенныйФайл, ДанныеПодписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрисоединенныеФайлы.ЗанестиИнформациюОднойПодписи(ПрисоединенныйФайл, ДанныеПодписи);
	Если ВыполнятьКриптооперацииНаСервере() Тогда
		ОпределитьСтатусыПодписей(ПрисоединенныйФайл);
	КонецЕсли;
	Если ЭлектронныйДокументПолностьюПодписан(ПрисоединенныйФайл) Тогда
		ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		Если ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ФайлОбъект.СтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПолностьюПодписан,
																						   ПрисоединенныйФайл);
		Иначе
			ФайлОбъект.СтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Подписан,
																						   ПрисоединенныйФайл);
		КонецЕсли;
		
		ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
		ФайлОбъект.Записать();
		ОбновитьВерсиюЭД(ФайлОбъект.Ссылка);
		ЭлектронныеДокументыПереопределяемый.НазначенСтатусПодписан(ФайлОбъект.Ссылка);
		
	Иначе
		
		// В рамках интеркампани, документ должен иметь 2 подписи,
		// т.к. электронный документ подписан не полностью, то достаточно проверить,
		// что количество ЭЦП отлично от 0.
		ДокументИнтеркампаниЧастичноПодписан = (ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
												И ПрисоединенныйФайл.ЭлектронныеЦифровыеПодписи.Количество() > 0);
		ЭтоЭДПлатежноеПоручение = ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение;
		
		Если ДокументИнтеркампаниЧастичноПодписан ИЛИ ЭтоЭДПлатежноеПоручение Тогда
			
			ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ФайлОбъект.СтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ЧастичноПодписан,
																						   ПрисоединенныйФайл);
			ФайлОбъект.Изменил  = Пользователи.АвторизованныйПользователь();
			ФайлОбъект.Записать();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьИОтправитьДокументыПЭД(ДобавленныеФайлы, ПризнакПодписи, СтруктураПаролейИМаркеров) Экспорт
	
	МассивСтруктурПакетовЭД = ЭлектронныеДокументыСлужебный.СоздатьДокументыПакетовЭД(ДобавленныеФайлы, ПризнакПодписи);
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КолПодготовленных", МассивСтруктурПакетовЭД.Количество());
	КолОтправленных = 0;
	МассивПакетовДляОбработкиНаКлиенте = Новый Массив;
	Если МассивСтруктурПакетовЭД.Количество() > 0 И ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
		Для Каждого СтруктураПЭД Из МассивСтруктурПакетовЭД Цикл
			Если СтруктураПЭД.ТребуетсяШифрованиеНаКлиенте Тогда
				МассивПакетовДляОбработкиНаКлиенте.Добавить(СтруктураПЭД.ПЭД);
				Продолжить;
			КонецЕсли;
			МассивПЭД = Новый Массив;
			МассивПЭД.Добавить(СтруктураПЭД.ПЭД);
				
			КолОтправленных = КолОтправленных + ОтправкаПакетовЭД(МассивПЭД, СтруктураПаролейИМаркеров);
		КонецЦикла;
	КонецЕсли;
	СтруктураРезультата.Вставить("КолОтправленных", КолОтправленных);
	СтруктураРезультата.Вставить("МассивПакетовДляОбработкиНаКлиенте", МассивПакетовДляОбработкиНаКлиенте);
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Только для внутреннего использования
Функция ОтправкаПакетовЭД(МассивПакетовЭД, СтруктураПаролейИМаркеров) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОтправки = 0;
	Для Каждого ТекЭл Из МассивПакетовЭД Цикл
		// Если электронный документ по каким-то причинам отправлен быть не может,
		// то не надо приостанавливать всю цепочку.
		Попытка
			ПакетЭД = ТекЭл;
			ТипОтправки = ТекЭл.СпособОбменаЭД;
			АдресКаталогаОтправки = СформироватьФайлыДляОтправки(ПакетЭД);
			Если ПустаяСтрока(АдресКаталогаОтправки) Тогда
				Продолжить;
			КонецЕсли;
			Если ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезЭлектроннуюПочту Тогда
				ОтправленТекущийПакет = ОтправитьЭлектронноеПисьмо(ПакетЭД, АдресКаталогаОтправки);
				РезультатОтправки = РезультатОтправки + ОтправленТекущийПакет;
				Если ОтправленТекущийПакет = 0 Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ТипОтправки =  Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском Тогда
				Если СтруктураПаролейИМаркеров = Неопределено
					ИЛИ СтруктураПаролейИМаркеров.ПаролиКСертификатам = Неопределено Тогда
					
					ПарольКСертификату = Неопределено;
				Иначе
					ПарольКСертификату = СтруктураПаролейИМаркеров.ПаролиКСертификатам.Получить(ПакетЭД.Соглашение.СертификатАбонента);
				КонецЕсли;
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				КоличествоКОтправке = ФайлыОтправки.Количество();
				
				Если Не ВыполнятьАвторизациюНаСервере() Тогда
					Маркер = СтруктураПаролейИМаркеров.Маркеры.Получить(ПакетЭД.Соглашение);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекЭл.ЭлектронныеДокументы[0]) Тогда
					ЭлектронныйДокумент = ТекЭл.ЭлектронныеДокументы[0].ЭлектронныйДокумент;
					ПараметрыЭД = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЭлектронныйДокумент, "ВидЭД, Наименование");
					Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура
						И Не Найти(ПараметрыЭД.Наименование, "AL") > 0 Тогда
						
						РезультатОтправки = РезультатОтправки + КоличествоКОтправке;
						ЭлектронныеДокументыСлужебный.ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД,
							Перечисления.СтатусыПакетовЭД.Отправлен, ТекущаяДатаСеанса());
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				КоличествоОтправленных = ЭлектронныеДокументыВнутренний.ОтправитьЧерезОператораЭДО(
																				ПакетЭД.Соглашение,
																				АдресКаталогаОтправки,
																				"SendMessage",
																				ПарольКСертификату,
																				,
																				Маркер);

					
				Если КоличествоОтправленных <> КоличествоКОтправке Тогда
					ШаблонСообщения = Нстр("ru = 'Не удалось отправить оператору ЭДО ""%1"".'");

					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПакетЭД);
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Продолжить;
				Иначе
					РезультатОтправки = РезультатОтправки + КоличествоОтправленных;
				КонецЕсли;
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезКаталог Тогда
				
				АдресКаталога = ПакетЭД.АдресРесурсаКонтрагента+?(Прав(ПакетЭД.АдресРесурсаКонтрагента,1) <> "\", "\", "");
				КаталогНаДиске = Новый Файл(АдресКаталога);
				Если НЕ КаталогНаДиске.Существует() Тогда
					СоздатьКаталог(АдресКаталога);
				КонецЕсли;
				
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				Для Каждого Файл Из ФайлыОтправки Цикл
					КопироватьФайл(Файл.ПолноеИмя, АдресКаталога + Файл.Имя);
					РезультатОтправки = РезультатОтправки + 1;
				КонецЦикла;
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезВебРесурсБанка Тогда
				
				РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПакетЭД.Соглашение,
					"АдресСервера, РесурсИсходящихДокументов, РесурсВходящихДокументов");
				
				Настройки = Новый Структура("Адрес", РеквизитыСоглашения.АдресСервера);
				ЭД = ПакетЭД.ЭлектронныеДокументы[0].ЭлектронныйДокумент;
				Данные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД);
				Настройки.Вставить("Ресурс", РеквизитыСоглашения.РесурсИсходящихДокументов);
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				ПутьКФайлуОтправки = ФайлыОтправки[0].ПолноеИмя;
				Попытка
					ОтветБанка = "";
					ЭлектронныеДокументыСлужебный.ОтправитьПакетЧерезРесурсБанка(Настройки,ПутьКФайлуОтправки,ОтветБанка);
					РезультатОтправки = РезультатОтправки + 1;
					УдалитьФайлы(ПутьКФайлуОтправки);
					ДанныеОтвета = ЭлектронныеДокументыСлужебный.ПолучитьДанныеИзОтветаБанка(ОтветБанка, ЭД);
					Если ДанныеОтвета = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ЭлектронныеДокументыСлужебный.ОбработатьОтветБанка(ДанныеОтвета, ЭД);
				Исключение
					ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ОбъектЭД = ЭД.ПолучитьОбъект();
					ОбъектЭД.СтатусЭД = Перечисления.СтатусыЭД.ОшибкаПередачи;
					ОбъектЭД.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
					ОбъектЭД.ПричинаОтклонения = ТекстОшибки;
					ОбъектЭД.Записать();
					ТекстСообщения = НСтр("ru = ' При отправке документа произошла ошибка, подробности см. в Журнале регистрации.'");
					ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Отправка ЭД в банк'"), ТекстОшибки, ТекстСообщения);
				КонецПопытки;
				ОбновитьВерсиюЭД(ЭД);
			ИначеЕсли ТипОтправки = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
				Соглашение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПакетЭД, "Соглашение");
				FTPСоединение = ЭлектронныеДокументыСлужебный.ПолучитьFTPСоединение(Соглашение);
				Если FTPСоединение = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				КаталогОтправки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "РесурсИсходящихДокументов");
				ЭлектронныеДокументыСлужебный.ПодготовитьПутьFTP(КаталогОтправки);
				ТекстОшибки = "";
				Попытка
					FTPСоединение.УстановитьТекущийКаталог(КаталогОтправки);
				Исключение
					ЭлектронныеДокументыСлужебный.СоздатьКаталогиFTP(FTPСоединение, КаталогОтправки, , ТекстОшибки);
				КонецПопытки;
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					Продолжить;
				КонецЕсли;
				ФайлыОтправки = НайтиФайлы(АдресКаталогаОтправки, "*");
				Для Каждого Файл Из ФайлыОтправки Цикл
					ЭлектронныеДокументыСлужебный.ЗаписатьФайлНаFTP(FTPСоединение, Файл.ПолноеИмя, Файл.Имя, , ТекстОшибки);
					Если ЗначениеЗаполнено(ТекстОшибки) Тогда 
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЭлектронныеДокументыСлужебный.ОбновитьСтатусыДокументовПакетаЭД(ПакетЭД,
																			Перечисления.СтатусыПакетовЭД.Отправлен,
																			ТекущаяДатаСеанса());
		Исключение
			ШаблонСообщения = НСтр("ru = ' %1 (подробности см. в Журнале регистрации).'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'отправка пакета ЭД'"),
											  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
											  ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(АдресКаталогаОтправки) Тогда
		УдалитьФайлы(АдресКаталогаОтправки);
	КонецЕсли;
	
	Возврат РезультатОтправки;
	
КонецФункции

// Возвращает соответствие с двоичными данными файлов
// и электронными цифровыми подписями к ним.
//
// Параметры:
//  ИмяФайла - Строка, путь к файлу данных.
//  РасшифрованныеДвоичныеДанные - ДвоичныеДанные, двоичные данные файла данных.
//  СоответствиеФайлПараметры - Соответствие, связывает имена файлов данных и электронных цифровых подписей.
//  ЭтоXMLФайл - Булево, признак того, что переданный файл является xml-файлом.
//
Функция ПолучитьСоответствиеДанныхПодписей(ИмяФайла,
										   ПапкаДляРаспаковки,
										   РасшифрованныеДвоичныеДанные,
										   СоответствиеФайлПараметры,
										   ЭтоXMLФайл = Ложь) Экспорт
	
	МассивВозврата = Новый Массив;
	ФайлРасшифрованногоАрхива = ?(ЭтоXMLФайл,
								  ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml"),
								  ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip"));
	РасшифрованныеДвоичныеДанные.Записать(ФайлРасшифрованногоАрхива);
	РасшифрованныйФайлДанных = Новый Файл(ФайлРасшифрованногоАрхива);
	
	// Определить подпись к данному файлу, проверить подпись
	
	ПодписиФайлаДанных  = СоответствиеФайлПараметры.Получить(ИмяФайла).Подписи;
	ДвоичныеДанныеФайлаДанных = Новый ДвоичныеДанные(РасшифрованныйФайлДанных.ПолноеИмя);
	
	Если ПодписиФайлаДанных = Неопределено ИЛИ ПодписиФайлаДанных.Количество() = 0 Тогда
		// Если подписей нет, тогда пока продолжаем, но, возможно, что это ошибка
	Иначе
		Для Каждого ИмяФайлаПодписи Из ПодписиФайлаДанных Цикл
			ПолноеИмяФайлаПодписи = ПапкаДляРаспаковки + ИмяФайлаПодписи;
			ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ПолноеИмяФайлаПодписи);
			СтруктураВозврата = Новый Структура("ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи",
				ДвоичныеДанныеФайлаДанных, ДвоичныеДанныеПодписи);
			
			МассивВозврата.Добавить(СтруктураВозврата);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка ошибок

// Обрабатывает исключительные ситуации по электронным документам.
//
// Параметры:
// ВидОперации - строка - вид операции при которой возникло исключение.
// ПодробныйТекстОшибки - строка - описание ошибки.
// ТекстСообщения - строка - текст ошибки.
//
Процедура ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения = "") Экспорт
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	ЭлектронныеДокументыСлужебный.ЗаписатьОшибкуПоЭД(ВидОперации, ПодробныйТекстОшибки);
	
КонецПроцедуры

// Возвращает текст сообщения пользователю по коду ошибки.
//
// Параметры:
//  КодОшибки - строка, код ошибки;
//  СторонееОписаниеОшибки - строка, описание ошибки переданное другой системой.
//
// Возвращаемое значение:
//  ТекстСообщения - строка - переопределенное описание ошибки.
//
Функция ПолучитьСообщениеОбОшибке(КодОшибки, СторонееОписаниеОшибки = "") Экспорт
	
	Возврат ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке(КодОшибки, СторонееОписаниеОшибки);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами

// Только для внутреннего использования
Функция ТекущийКаталогВременныхФайлов() Экспорт
	
	ТекущийКаталог = "";
	ЭлектронныеДокументыПереопределяемый.ТекущийКаталогВременныхФайлов(ТекущийКаталог);
	Если НЕ ЗначениеЗаполнено(ТекущийКаталог) Тогда
		ТекущийКаталог = КаталогВременныхФайлов();
	КонецЕсли;
	
	Возврат ТекущийКаталог;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Права

Функция ЕстьПравоОбработкиЭД(ВыводитьСообщение = Истина) Экспорт
	
	ЕстьПраво = ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД();
	Если ТипЗнч(ЕстьПраво) <> Тип("Булево") Тогда
		ЕстьПраво = Пользователи.РолиДоступны("ВыполнениеОбменаЭД");
	КонецЕсли;
	Если НЕ ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронныеДокументыСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

Функция ЕстьПравоЧтенияЭД(ВыводитьСообщение = Истина) Экспорт
	
	ЕстьПраво = ЭлектронныеДокументыПереопределяемый.ЕстьПравоЧтенияЭД();
	Если ТипЗнч(ЕстьПраво) <> Тип("Булево") Тогда
		ЕстьПраво = Пользователи.РолиДоступны("ВыполнениеОбменаЭД, ЧтениеЭД");
	КонецЕсли;	
	Если НЕ ЕстьПраво И ВыводитьСообщение Тогда
		ЭлектронныеДокументыСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
		
	Возврат ЕстьПраво;
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сертификаты

// Функция получает сертификат подписи.
//
// Параметры:
//  СсылкаНаЭД - Ссылка - ссылка на электронный документ
//  ИмяВидаЭД  - перечисление - вид электронного документа
//
// Возвращаемое значение:
//   СертификатПодписи   - Сертификат подписи
//
Функция ОпределитьСертификатПодписиСлужебногоДокумента(СсылкаНаЭД, ИмяВидаЭД) Экспорт
	
	Возврат ЭлектронныеДокументыВнутренний.ОпределитьСертификатПодписиСлужебногоДокумента(СсылкаНаЭД, ИмяВидаЭД);

КонецФункции

// Только для внутреннего использования
Функция МассивСертификатов(МассивСоглашений) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СертификатыЭЦП.Ссылка,
	|	СоглашенияОбИспользованииЭД.Ссылка КАК Соглашение
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
	|		ПО СоглашенияОбИспользованииЭД.СертификатАбонента = СертификатыЭЦП.Ссылка
	|ГДЕ
	|	НЕ СертификатыЭЦП.ЗапомнитьПарольКСертификату
	|	И НЕ СертификатыЭЦП.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА СертификатыЭЦП.ОграничитьДоступКСертификату
	|				ТОГДА СертификатыЭЦП.Пользователь = &Пользователь
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭД.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|	И СоглашенияОбИспользованииЭД.СпособОбменаЭД = ЗНАЧЕНИЕ(перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|	И СоглашенияОбИспользованииЭД.Ссылка В (&МассивСоглашений)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СертификатыЭЦП.Представление";
	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	Если МассивСоглашений = Неопределено ИЛИ МассивСоглашений.Количество() = 0 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СоглашенияОбИспользованииЭД.Ссылка В (&МассивСоглашений)", "");
	Иначе	
		Запрос.УстановитьПараметр("МассивСоглашений", МассивСоглашений);
	КонецЕсли;
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выгрузка.ВыгрузитьКолонку("Ссылка");
		
КонецФункции

// Создает новый элемент справочника "СертификатыЭЦП"
// и заполняет его переданными данными.
//
// Параметры:
//  СтруктураСертификата - структура данных для заполнения элемента справочника
//  ОписаниеОшибки - строка - описание ошибки при ее возникновении.
//
Функция ЗагрузитьСертификат(СтруктураСертификата, ОписаниеОшибки) Экспорт
	
	НовыйЭлемент = Справочники.СертификатыЭЦП.СоздатьЭлемент();
	НовыйЭлемент.Отпечаток    = СтруктураСертификата.Отпечаток;
	НовыйЭлемент.Наименование = СтруктураСертификата.КомуВыдан;
	НовыйЭлемент.Организация  = СтруктураСертификата.Организация;
	
	СтрокаОписания = "Кому выдан: " + СтруктураСертификата.КомуВыдан + Символы.ПС;
	СтрокаОписания = СтрокаОписания + "Кем выдан: " + СтруктураСертификата.КемВыдан + Символы.ПС;
	СтрокаОписания = СтрокаОписания + "Действителен: " + СтруктураСертификата.ДействителенДо + Символы.ПС;
	НовоеНазначение = "";
	ЭлектроннаяЦифроваяПодпись.ЗаполнитьНазначениеСертификата(СтруктураСертификата.Назначение, НовоеНазначение, Истина);
	СтрокаОписания = СтрокаОписания + НовоеНазначение;
	НовыйЭлемент.Назначение = СтрокаОписания;
	
	Если СтруктураСертификата.Свойство("ДвоичныеДанныеСертификата")
		И ЗначениеЗаполнено(СтруктураСертификата.ДвоичныеДанныеСертификата) Тогда
		
		ДанныеХранилища = Новый ХранилищеЗначения(СтруктураСертификата.ДвоичныеДанныеСертификата, Новый СжатиеДанных(9));
		НовыйЭлемент.ФайлСертификата = ДанныеХранилища;
		НовыйЭлемент.Записать();
		
		Возврат НовыйЭлемент.Ссылка;
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Ошибка получения данных сертификата подписи!'");
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПараметрыСертификата(Сертификат) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
									Сертификат,
									"ПарольПользователя, ЗапомнитьПарольКСертификату, Отпечаток");

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование электронных документов

// Только для внутреннего использования
Функция СформироватьЭДУведомлениеОбУточнении(СсылкаНаЭД, ТекстУточнения) Экспорт
	
	ДобавленныйФайл = Неопределено;
	АдресВоВременномХранилище = "";
	СтруктураЭД = ЭлектронныеДокументыВнутренний.СформироватьФайлУведомлениеОбУточненииПоЭД(СсылкаНаЭД, ТекстУточнения);
	Если ЗначениеЗаполнено(СтруктураЭД) И СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
		
		ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(СсылкаНаЭД.ВладелецФайла, СтруктураЭД.ИдФайла, "xml",
			ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), АдресВоВременномХранилище, Неопределено, , "ЭДПрисоединенныеФайлы",
			СтруктураЭД.НомерЭД);
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
		СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);
		СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Утвержден);
		СтруктураПараметров.Вставить("Получатель", СтруктураЭД.ИдПолучателя);
		СтруктураПараметров.Вставить("Отправитель", СтруктураЭД.ИдОтправителя);
		СтруктураПараметров.Вставить("НомерЭД", СтруктураЭД.НомерЭД);
		СтруктураПараметров.Вставить("УникальныйИД", СсылкаНаЭД.УникальныйИД);
		СтруктураПараметров.Вставить("СоглашениеЭД", СсылкаНаЭД.СоглашениеЭД);
		СтруктураПараметров.Вставить("Организация", СтруктураЭД.Отправитель);
		СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Получатель);
		СтруктураПараметров.Вставить("ВладелецЭД", СсылкаНаЭД.ВладелецФайла);
		СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД",
			Перечисления.ТипыЭлементовВерсииЭД[?(СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура, "УУЭСФ", "УОУ")]);
		СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", СсылкаНаЭД);
		
		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПараметров);
		
	КонецЕсли;
	
	Возврат ДобавленныйФайл;
	
КонецФункции

// Только для внутреннего использования
Функция СформироватьЭДИзвещениеОПолучении(СсылкаНаЭД) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЭД = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(СсылкаНаЭД, "НаправлениеЭД, Контрагент, ВидЭД, СтатусЭД, УникальныйИД,
		|СоглашениеЭД, ВерсияРегламентаЭДО, ТипЭлементаВерсииЭД, ВладелецФайла, НомерЭД");
	
	// Не формируем извещение о получении для версии регламента 20 в формализованных документах.
	Если ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
		И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель) Тогда
		
		Возврат "";
	КонецЕсли;

	Если НЕ (ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ
		ИЛИ ПараметрыЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД) Тогда
		
		ШаблонСообщения = НСтр("ru = 'Для типа ЭД %1 не предусмотрено формирование Извещения о получении.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			ПараметрыЭД.ТипЭлементаВерсииЭД);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат "";
	КонецЕсли;
	
	АдресВоВременномХранилище = "";
	СтруктураЭД = ЭлектронныеДокументыВнутренний.СформироватьФайлИзвещенияПоЭД(СсылкаНаЭД);
	Если НЕ ЗначениеЗаполнено(СтруктураЭД)
		ИЛИ НЕ СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище) Тогда
		
		Возврат "";
	КонецЕсли;
	ДатаСозданияФайла = ТекущаяДатаСеанса();
	ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ПараметрыЭД.ВладелецФайла, СтруктураЭД.ИдФайла, "xml",
		ДатаСозданияФайла, УниверсальноеВремя(ТекущаяДата()), АдресВоВременномХранилище, Неопределено, , "ЭДПрисоединенныеФайлы");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НаправлениеЭД",               Перечисления.НаправленияЭД.Исходящий);
	СтруктураПараметров.Вставить("СтатусЭД",                    Перечисления.СтатусыЭД.Утвержден);
	СтруктураПараметров.Вставить("ВидЭД",                       СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("Получатель",                  СтруктураЭД.ИдПолучателя);
	СтруктураПараметров.Вставить("Отправитель",                 СтруктураЭД.ИдОтправителя);
	СтруктураПараметров.Вставить("НомерЭД",                     ПараметрыЭД.НомерЭД);
	СтруктураПараметров.Вставить("Организация",                 СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("Контрагент",                  СтруктураЭД.Получатель);
	СтруктураПараметров.Вставить("СоглашениеЭД",                ПараметрыЭД.СоглашениеЭД);
	СтруктураПараметров.Вставить("ВладелецЭД",                  ПараметрыЭД.ВладелецФайла);
	СтруктураПараметров.Вставить("УникальныйИД",                ПараметрыЭД.УникальныйИД);
	СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД",         ЭлектронныеДокументыВнутренний.ОпределитьТипЭДПоТипуЭДВладельца(СсылкаНаЭД));
	СтруктураПараметров.Вставить("ДатаДокументаОтправителя",    ДатаСозданияФайла);
	СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", СсылкаНаЭД);
	
	ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПараметров);
	
	Если СтруктураПараметров.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НаправлениеЭД", ПараметрыЭД.НаправлениеЭД);
		СтруктураПараметров.Вставить("ВидЭД",         ПараметрыЭД.ВидЭД);
		СтруктураПараметров.Вставить("Контрагент",    ПараметрыЭД.Контрагент);
		СтруктураПараметров.Вставить("СоглашениеЭД",  ПараметрыЭД.СоглашениеЭД);
		СтруктураПараметров.Вставить("ВладелецЭД",    ПараметрыЭД.ВладелецФайла);
		СтруктураПараметров.Вставить("СтатусЭД",      ПараметрыЭД.СтатусЭД);
		
		ЭлектронныеДокументыСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(СсылкаНаЭД, СтруктураПараметров);
	КонецЕсли;
	
	Возврат ДобавленныйФайл;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Проводит тест связи с оператором ЭДО.
//
// Параметры:
//  ПараметрыСоглашения  - Структура - содержит реквизиты соглашения
//  ПарольКСертификатуОператора  - строка - пароль к сертификату оператора
//
// Возвращаемое значение:
//  Булево, содержит результат теста
//
Функция ТестСвязиСОператоромЭДО(СтруктураПараметровЗапросаМаркера,
								ПарольКСертификатуОператора = Неопределено,
								ВыводитьСообщения = Истина) Экспорт
	
	Возврат ЭлектронныеДокументыВнутренний.ТестСвязиСТакском(
												СтруктураПараметровЗапросаМаркера,
												ПарольКСертификатуОператора,
												ВыводитьСообщения);
	
КонецФункции

// Возвращает структуру параметров соглашения для запроса маркера.
//
// Параметры:
//  Соглашение  - СправочникСсылка.СоглашенияОбИспользованииЭД - 
//
// Возвращаемое значение:
//  Структура, содержит параметры запроса маркера
//
Функция СтруктураПараметровЗапросаМаркера(Соглашение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Наименование КАК НаименованиеСоглашения,
	|	СоглашенияОбИспользованииЭД.СертификатАбонента.ЗапомнитьПарольКСертификату КАК ЗапомнитьПарольКСертификату,
	|	СоглашенияОбИспользованииЭД.СертификатАбонента.ПарольПользователя КАК ПарольПользователя,
	|	СоглашенияОбИспользованииЭД.СертификатАбонента.ФайлСертификата КАК ФайлСертификата,
	|	СоглашенияОбИспользованииЭД.СертификатАбонента
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|ГДЕ
	|	СоглашенияОбИспользованииЭД.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Соглашение);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("НаименованиеСоглашения",      Выборка.НаименованиеСоглашения);
	СтруктураВозврата.Вставить("ЗапомнитьПарольКСертификату", Выборка.ЗапомнитьПарольКСертификату);
	СтруктураВозврата.Вставить("ПарольПользователя",          Выборка.ПарольПользователя);
	СтруктураВозврата.Вставить("СертификатАбонента",          Выборка.СертификатАбонента);
	Если ЗначениеЗаполнено(Выборка.СертификатАбонента) Тогда
		СтруктураВозврата.Вставить("ФайлСертификата",         Выборка.ФайлСертификата.Получить());
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

// Определяет по параметрам, существует ли действующее соглашение
// 
// Параметры:
//  ПараметрыЭД - структура, содержащая параметры поиска соглашения
//
// Возвращаемое значение:
//  Булево Истина или Ложь
//
Функция ЕстьДействующееСоглашение(ПараметрыЭД) Экспорт
	
	НастройкиОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД);
	
	Возврат НЕ (НастройкиОбмена = Неопределено);
	
КонецФункции

// Возвращает структуру для открытия формы сопоставления номенклатуры
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
//  Структура, содержащая ИмяФормы и ПараметрыОткрытияФормы
//
Функция ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД) Экспорт
	
	СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД);
	Если НЕ ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ЕстьРабочийЭСФ(СсылкаНаВладельца) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект = &СсылкаНаВладельца
	|	И СостоянияЭД.ЭлектронныйДокумент <> ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)
	|	И СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
	|	И СостоянияЭД.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)";
	
	Запрос.УстановитьПараметр("СсылкаНаВладельца", СсылкаНаВладельца);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

// Возвращает имя прикладного справоника по имени библиотечного справочника.
//
// Параметры:
//  ИмяСправочника - строка - название справочника из библиотеки.
//
// Возвращаемое значение:
//  ИмяПрикладногоСправочника - строковое имя прикладного справочника.
//
Функция ПолучитьИмяПрикладногоСправочника(ИмяСправочника) Экспорт
	
	Возврат ЭлектронныеДокументыПовтИсп.ПолучитьИмяПрикладногоСправочника(ИмяСправочника);
	
КонецФункции

// Получает значение функциональной опции.
//
// Параметры:
//  НаименованиеФО - Строка, имя функциональной опции
//
// Возвращаемое значение:
//  ЗначениеВозврата - булево, результат включенности ФО.
//
Функция ПолучитьЗначениеФункциональнойОпции(НаименованиеФО) Экспорт
	
	СоответствиеФО = Новый Соответствие;
	ЭлектронныеДокументыПереопределяемый.ПолучитьСоответствиеФункциональныхОпций(СоответствиеФО);
	
	ИмяФОПрикладногоРешения = СоответствиеФО.Получить(НаименованиеФО);
	Если ИмяФОПрикладногоРешения = Неопределено Тогда // не задано соответствие
		Результат = Ложь;
	Иначе
		Результат = ПолучитьФункциональнуюОпцию(ИмяФОПрикладногоРешения)
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает текстовое представление версии электронного документа.
//
// Параметры:
//  СсылкаНаВладельца - Ссылка на объект ИБ, состояние версии электронного документа которого необходимо получить.
//  Гиперссылка - булево, Истина - необходимо реквизит формы "СостояниеЭД" сделать гиперссылкой.
//
Функция ТекстСостоянияЭД(СсылкаНаВладельца, Гиперссылка) Экспорт
	
	ТекстСостоянияЭД = "";
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		Если ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"СчетФактураВыданныйВМетаданных");
			ИмяСчетаФактурыПолученного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
				"СчетФактураПолученныйВМетаданных");
			Если ИмяСчетаФактурыВыданного <> Неопределено
				И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяСчетаФактурыВыданного)
				ИЛИ ИмяСчетаФактурыПолученного <> Неопределено
				И ТипЗнч(СсылкаНаВладельца) = Тип("ДокументСсылка." + ИмяСчетаФактурыПолученного) Тогда
				
				ТекстСостоянияЭД = ПолучитьТекстСводногоСостоянияЭД(СсылкаНаВладельца);
			ИначеЕсли ТипЗнч(СсылкаНаВладельца) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда
				Гиперссылка = Истина;
				Возврат ТекстСостоянияЭД;
			Иначе
				ТекущееСостояниеЭД = СостояниеВерсииЭД(СсылкаНаВладельца);
				ТекстСостоянияЭД = Строка(ТекущееСостояниеЭД);
			КонецЕсли;
			
			НастройкиОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаВладельца, Ложь);
			Если НЕ ЗначениеЗаполнено(ТекстСостоянияЭД) И НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
				Если НастройкиОбмена = Неопределено Тогда
					ТекстСостоянияЭД = "Нет действующего соглашения об использовании ЭД";
				КонецЕсли;
			ИначеЕсли НЕ ЗначениеЗаполнено(ТекстСостоянияЭД) Тогда
				ТекстСостоянияЭД = "Не получен";
			Иначе
				Гиперссылка = Истина;
			КонецЕсли;
		Иначе
			ТекстСостоянияЭД = "Обмен электронными документами отключен";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСостоянияЭД;
	
КонецФункции

// Позволяет получить значения реквизитов недоступного для чтения объекта
Функция ПолучитьЗначенияРеквизитовВПривилегированномРежиме(Ссылка, ИменаРеквизитов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов);
	
КонецФункции

// Проверяет, является ли переданный в параметре ЭД служебным или нет.
//
Функция ЭтоСлужебныйДокумент(ЭлектронныйДокумент) Экспорт
	
	Если ЗначениеЗаполнено(ЭлектронныйДокумент.ТипЭлементаВерсииЭД) Тогда
		ВозвращаемоеЗначение = НЕ (ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
			ИЛИ ЭлектронныйДокумент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	Иначе
		ВозвращаемоеЗначение = НЕ (ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.Подтверждение
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.Ошибка
			ИЛИ ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ДопДанные);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверяет валидность подписей электронного документа
// и заполняет реквизиты Статус и ДатаПроверкиПодписи в табличной части ЭлектронныеЦифровыеПодписи.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//  ВыводитьСообщения - Булево, требуется ли выводить сообщения .
//
Процедура ОпределитьСтатусыПодписей(ЭД, ВыводитьСообщения = Ложь) Экспорт
	
	НастройкиКриптографии  = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
	ПровайдерЭЦП           = НастройкиКриптографии.ПровайдерЭЦП;
	ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
	ТипПровайдераЭЦП       = НастройкиКриптографии.ТипПровайдераЭЦП;
	
	Попытка
		МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
	Исключение
		Если ВыводитьСообщения Тогда
			ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
		Возврат;
	КонецПопытки;
	
	ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭД);
	ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища (ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
	ОбъектЭД = ЭД.ПолучитьОбъект();
	
	Для каждого СтрокаЭЦП из ОбъектЭД.ЭлектронныеЦифровыеПодписи Цикл
		Попытка
			ДвоичныеДанныеЭЦП = СтрокаЭЦП.Подпись.Получить();
			ЭлектронныеДокументыСлужебный.ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеДокумента, ДвоичныеДанныеЭЦП);
			СтрокаЭЦП.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
			СтрокаЭЦП.ПодписьВерна = Истина;
		Исключение
			СтрокаЭЦП.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
			СтрокаЭЦП.ПодписьВерна = Ложь;
			
			ТекстСообщения = ПолучитьСообщениеОбОшибке("114");
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'проверка электронной цифровой подписи'"),
											  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
											  ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	ОбъектЭД.Записать();
	
КонецПроцедуры

// Только для внутреннего использования
Процедура ПерезаполнитьДокументыИБПоЭД(ДокументИБ, ЭД, ОбъектМетаданных, ДокументЗагружен) Экспорт
	
	ПараметрыЭД = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ЭД, "ВидЭД, ЭлектронныйДокументВладелец");
	Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
		ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель Тогда
		
		ЭД = ПараметрыЭД.ЭлектронныйДокументВладелец;
	КонецЕсли;
	
	ЗаполнитьДокументИБПоЭД(ДокументИБ, ЭД, ДокументЗагружен);
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(ДокументИБ)).ПолноеИмя();
	
КонецПроцедуры

// Возвращает двоичные данные электронного документа
//
// Параметры: 
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция ПолучитьДвоичныеДанныеФайла(ЭД) Экспорт
	
	Возврат ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД);
	
КонецФункции

// Выполняет последовательность действий для электронных документов.
//
// Параметры:
//  МассивСсылокНаОбъект - Массив ссылок на электронные документы, для которых надо определить последовательность действий,
//  КлиентскиеНастройкиКриптографии - Массив доступных сертификатов
//  Действия - Строковое представление необходимых действий,
//  ДопПараметры - Структура, дополнительные параметры, определяющие последовательность действий с электронными документами.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы
//
Функция ВыполнитьДействияПоЭД(
				МассивСсылокНаОбъект,
				МассивСтруктурСертификатов,
				Действия,
				ДопПараметры = "",
				ЭД = Неопределено,
				КоличествоПодписанныхНаСервере = 0) Экспорт
	
	Если НЕ ЕстьПравоОбработкиЭД(Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВыполнятьКриптооперацииНаСервере() Тогда
		Попытка
			МассивСтруктурСертификатов = ПолучитьМассивСтруктурСертификатов(Истина);
		Исключение
			МассивСтруктурСертификатов = Новый Массив;
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
		ТекстСообщения = ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		КлиентскиеНастройкиКриптографии = ЭлектронныеДокументыСлужебный.МассивСтруктурДоступныхДляПодписиСертификатов(
																						МассивСтруктурСертификатов);
	Исключение
		КлиентскиеНастройкиКриптографии = Новый Массив;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ (ЗначениеЗаполнено(ЭД) И (ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
									  ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
									  ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
									  ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель
									  ИЛИ ЭтоСлужебныйДокумент(ЭД))) Тогда
									
		ЭлектронныеДокументыПереопределяемый.ПроверитьГотовностьИсточников(МассивСсылокНаОбъект);
	КонецЕсли;
	
	Если МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СоответствиеСертификатов = Новый Соответствие;
	МассивНеобрабатываемыхОбъектов = Новый Массив;
	
	Если ЭД = Неопределено И ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Сформировать") Тогда
		Если Действия = "Сформировать" ИЛИ Действия = "СформироватьПоказать" Тогда
			УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылокНаОбъект);
		КонецЕсли;
		
		НастройкиОбъектов = Новый Соответствие;
		Для Сч = 0 По МассивСсылокНаОбъект.Количество() - 1 Цикл
			СсылкаНаОбъект = МассивСсылокНаОбъект[Сч];
			
			// Для случая определения вида ЭД пользователем
			ВидЭД = "";
			Если ЗначениеЗаполнено(ДопПараметры) Тогда
				ДопПараметры.Свойство("ВидЭД", ВидЭД);
			КонецЕсли;
			
			НастройкиОбмена = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(СсылкаНаОбъект,
																								   ,
																								   КлиентскиеНастройкиКриптографии,
																								   ,
																								   ВидЭД);
			Если НЕ ЗначениеЗаполнено(НастройкиОбмена) Тогда
				МассивСсылокНаОбъект.Удалить(Сч);
				Если МассивСсылокНаОбъект.Количество() = 0 Тогда
					Возврат Неопределено;
				Иначе
					Сч = Сч - 1;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			НастройкиОбъектов.Вставить(СсылкаНаОбъект, НастройкиОбмена);
		КонецЦикла;
		
		Если МассивСсылокНаОбъект.Количество() > 0 Тогда
		
			Запрос = Новый Запрос;
			ТекстЗапросаСоздатьЭД =
			"ВЫБРАТЬ
			|	МассивСсылок.ОбъектСсылка
			|ПОМЕСТИТЬ МассивСсылок
			|ИЗ
			|	&МассивСсылок КАК МассивСсылок
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МассивСсылок.ОбъектСсылка КАК ВладелецЭД
			|ИЗ
			|	МассивСсылок КАК МассивСсылок
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
			|		ПО МассивСсылок.ОбъектСсылка = СостоянияЭД.СсылкаНаОбъект";
			
			Если Действия = "СформироватьУтвердитьПодписатьОтправить" Тогда
				ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов);
				ТекстЗапросаСоздатьЭД = ТекстЗапросаСоздатьЭД + " ГДЕ
				|(СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
				|ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован))";
			Иначе
				ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
					"СчетФактураВыданныйВМетаданных");
				Если ИмяСчетаФактурыВыданного <> Неопределено Тогда
					
					ТекстЗапросаСоздатьЭД = ТекстЗапросаСоздатьЭД + " ГДЕ (ВЫБОР
					|КОГДА МассивСсылок.ОбъектСсылка ССЫЛКА Документ." + ИмяСчетаФактурыВыданного + "
					|	ТОГДА СостоянияЭД.СсылкаНаОбъект ЕСТЬ NULL 
					|		ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
					|		ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОтклоненПолучателем)
					|		ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
					|	ИНАЧЕ ИСТИНА
					|КОНЕЦ)";
				КонецЕсли;
			КонецЕсли;
			Запрос.Текст = ТекстЗапросаСоздатьЭД;
			
			МассивТипов = Новый Массив;
			Для Каждого МетаданныеДокумент Из Метаданные.Документы Цикл
				МассивТипов.Добавить(Тип("ДокументСсылка." + МетаданныеДокумент.Имя));
			КонецЦикла;
			МассивТипов.Добавить(Тип("СправочникСсылка.СоглашенияОбИспользованииЭД"));
			
			ТЗ_Ссылки = Новый ТаблицаЗначений;
			КолонкаТЗ = ТЗ_Ссылки.Колонки.Добавить("ОбъектСсылка", Новый ОписаниеТипов(МассивТипов));
			Для Каждого Элемент Из МассивСсылокНаОбъект Цикл
				Строка = ТЗ_Ссылки.Добавить();
				Строка.ОбъектСсылка = Элемент;
			КонецЦикла;
			Запрос.УстановитьПараметр("МассивСсылок", ТЗ_Ссылки);
			ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
			
			КолНовыхЭД = 0;
			Если ТЗ_ЭД.Количество() > 0 Тогда
				МассивНовыхЭД = ЭлектронныеДокументыСлужебный.СформироватьПрисоединенныеФайлы(ТЗ_ЭД.ВыгрузитьКолонку("ВладелецЭД"),
																							  НастройкиОбъектов,
																							  ДопПараметры);
				КолНовыхЭД = МассивНовыхЭД.Количество();
			КонецЕсли;
			СтруктураВозврата.Вставить("КоличествоНовыхЭД", КолНовыхЭД);
			Если Действия = "Сформировать" ИЛИ Действия = "СформироватьПоказать" Тогда
				СтруктураВозврата.Вставить("МассивНовыхЭД", МассивНовыхЭД);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивСсылокНаОбъект.Количество() = 0 Тогда
		Возврат СтруктураВозврата; // не найдено действующее соглашение
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
	|	ЕСТЬNULL(ПрисоединенныеФайлы.Ссылка, ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)) КАК СсылкаНаЭД,
	|	ПрисоединенныеФайлы.СтатусЭД,
	|	ПрисоединенныеФайлы.ВидЭД,
	|	ПрисоединенныеФайлы.СоглашениеЭД КАК Соглашение
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ПО (ПрисоединенныеФайлы.Ссылка = СостоянияЭД.ЭлектронныйДокумент)
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаОбъект);
	
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Утвердить") Тогда
		Если Не ЗначениеЗаполнено(ЭД) Тогда
			ДопУсловие = " И (НЕ ПрисоединенныеФайлы.Ссылка ЕСТЬ NULL) 
			|	И (ПрисоединенныеФайлы.СтатусЭД=ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
			|	   ИЛИ ПрисоединенныеФайлы.СтатусЭД=ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Получен)
			|	   ИЛИ ПрисоединенныеФайлы.СтатусЭД=ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)
			|	   ИЛИ ПрисоединенныеФайлы.СтатусЭД=ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ЧастичноПодписан))";
			Если МассивНеобрабатываемыхОбъектов.Количество() > 0 Тогда
				ДопУсловие = ДопУсловие + " И НЕ(ПрисоединенныеФайлы.Ссылка В (&МассивНеобрабатываемыхОбъектов))";
				Запрос.УстановитьПараметр("МассивНеобрабатываемыхОбъектов", МассивНеобрабатываемыхОбъектов);
			КонецЕсли;
			Запрос.Текст = ТекстЗапроса + ДопУсловие;
			ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		Иначе
			ТЗ_ЭД = ТаблицаПоЭД(ЭД);
		КонецЕсли;
		КолУтвержденныхЭД = 0;
		КолУтвержденныхРанее = 0;
		НовыйЭД = Неопределено;
		Для Каждого ТекСтрока Из ТЗ_ЭД Цикл
			Если ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Сформирован ИЛИ ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
				СсылкаНаЭД = ТекСтрока.СсылкаНаЭД;
				НачатьТранзакцию();
				УстановитьПризнакУтвержден(СсылкаНаЭД, НовыйЭД);
				Если ТранзакцияАктивна() Тогда
					ТекСтрока.СтатусЭД = СсылкаНаЭД.СтатусЭД;
					КолУтвержденныхЭД = КолУтвержденныхЭД + 1;
					ЗафиксироватьТранзакцию();
				КонецЕсли;
			Иначе
				КолУтвержденныхРанее = КолУтвержденныхРанее + 1;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(НовыйЭД) Тогда
			Если ДопПараметры="" Тогда
				ДопПараметры = Новый Структура;
			КонецЕсли;
			ДопПараметры.Вставить("НовыйЭД",НовыйЭД);
		КонецЕсли;
		СтруктураВозврата.Вставить("КоличествоУтвержденныхЭД", КолУтвержденныхЭД);
	КонецЕсли;
	
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Подписать") Тогда
		
		Если Не ЗначениеЗаполнено(ЭД) Тогда
			ДопУсловие = " И (НЕ ПрисоединенныеФайлы.Ссылка ЕСТЬ NULL) И (ПрисоединенныеФайлы.СтатусЭД=ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)
			|	ИЛИ ПрисоединенныеФайлы.СтатусЭД=ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ЧастичноПодписан))";
			Если МассивНеобрабатываемыхОбъектов.Количество() > 0 Тогда
				ДопУсловие = ДопУсловие + " И НЕ(ПрисоединенныеФайлы.Ссылка В (&МассивНеобрабатываемыхОбъектов))";
				Запрос.УстановитьПараметр("МассивНеобрабатываемыхОбъектов", МассивНеобрабатываемыхОбъектов);
			КонецЕсли;
			Запрос.Текст = ТекстЗапроса + ДопУсловие;
			ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		Иначе
			ТЗ_ЭД = ТаблицаПоЭД(ЭД);
			Для Каждого Строка из ТЗ_ЭД Цикл
				Если НЕ (Строка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
					ИЛИ Строка.СтатусЭД = Перечисления.СтатусыЭД.ЧастичноПодписан) Тогда
					
					ТЗ_ЭД.Удалить(Строка);
				КонецЕсли
			КонецЦикла
		КонецЕсли;
		
		ТЗ_ЭД.Колонки.Добавить("Подписывать");
		ТЗ_ЭД.Колонки.Добавить("Сертификат");
		КолСтрокТЗ = ТЗ_ЭД.Количество();
		ИндексТекСтроки = 0;
		Пока ИндексТекСтроки < КолСтрокТЗ Цикл
			ТекСтрока = ТЗ_ЭД[ИндексТекСтроки];
			
			НастройкиОбменаЭД = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(ТекСтрока.ВладелецЭД,
																									 ,
																									 КлиентскиеНастройкиКриптографии,
																									 ТекСтрока.СсылкаНаЭД);
				
			Если НЕ ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда // нет обмена
				ИндексТекСтроки = ИндексТекСтроки + 1;
				Продолжить;
			КонецЕсли;
			
			ТекСтрока.Подписывать = Ложь;
			ТекстОшибки = НСтр("ru = 'Нет действующего сертификата ЭЦП для организации <%1>, по виду документов <%2>.
			|Перейдите в настройки обмена, задайте вид документа <%2> для действующего сертификата организации <%1>.'");
			
			// В настройках задано требование подписать и еще не подписывали
			// для исходящих и входящих документов.
			Если НастройкиОбменаЭД.Подписывать И (ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				ИЛИ ТекСтрока.СтатусЭД = Перечисления.СтатусыЭД.ЧастичноПодписан) Тогда
				ТекСтрока.Подписывать = Истина;
				Если ТекСтрока.СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
					
					// Для интеркампани добавляем два сертификата для подписи ЭД
					// (если ЭД ранее не был подписан текущим сертификатом).
					Для Сч = 1 По 2 Цикл
						Если Сч = 2 Тогда
							КолСтрокТЗ = КолСтрокТЗ + 1;
							ИндексТекСтроки = ИндексТекСтроки + 1;
							ДопСтр = ТЗ_ЭД.Вставить(ИндексТекСтроки);
							ЗаполнитьЗначенияСвойств(ДопСтр, ТекСтрока,, "Сертификат");
							ТекСтрока = ДопСтр;
							ТекСертификат = НастройкиОбменаЭД.СертификатОрганизацииПолучателяДляПодписи;
						Иначе
							ТекСертификат = НастройкиОбменаЭД.СертификатОрганизацииДляПодписи;
						КонецЕсли;
						Если НЕ ЗначениеЗаполнено(ТекСертификат) Тогда
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
								?(Сч = 1, НастройкиОбменаЭД.Организация.Наименование, НастройкиОбменаЭД.Контрагент.Наименование),
								ТекСтрока.ВидЭД);
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
							Продолжить;
						КонецЕсли;
						
						Если НастройкиОбменаЭД.СертификатДоступен
							И ТекСтрока.СсылкаНаЭД.ЭлектронныеЦифровыеПодписи.Найти(ТекСертификат.Отпечаток) = Неопределено
							Тогда
								ТекСтрока.Сертификат = ТекСертификат;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Если ТекСтрока.СсылкаНаЭд.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
						ТекСертификат = НастройкиОбменаЭД.СертификатОрганизацииДляПодтверждения;
					Иначе
						ТекСертификат = НастройкиОбменаЭД.СертификатОрганизацииДляПодписи;
					КонецЕсли;
					
					Если НЕ (ЗначениеЗаполнено(ТекСертификат) И НастройкиОбменаЭД.СертификатДоступен) Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
							НастройкиОбменаЭД.Организация.Наименование, ТекСтрока.ВидЭД);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
						ИндексТекСтроки = ИндексТекСтроки + 1;
						Продолжить;
					КонецЕсли;
					
					Если НастройкиОбменаЭД.СертификатДоступен Тогда
						ТекСтрока.Сертификат = ТекСертификат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ТекСтрока.Соглашение = НастройкиОбменаЭД.СоглашениеЭД;
			ИндексТекСтроки = ИндексТекСтроки + 1;
			
		КонецЦикла;
		
		МассивСертификатов = Новый Массив;
		ВремТЗ = ТЗ_ЭД.Скопировать(, "Сертификат");
		ВремТЗ.Свернуть("Сертификат");
		Для Каждого ТекСтрока Из ВремТЗ Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Сертификат) Тогда
				Продолжить;
			КонецЕсли;
			Отбор = Новый Структура("Сертификат, Подписывать", ТекСтрока.Сертификат, Истина);
			МассивЭД = ТЗ_ЭД.НайтиСтроки(Отбор);
			Если МассивЭД.Количество() > 0 Тогда
				МассивОбработки = Новый Массив;
				Для Каждого ТекЭл Из МассивЭД Цикл
					Если ВыполнятьКриптооперацииНаСервере() Тогда
						Если ЭлектронныеДокументыСлужебный.УстановленныеПодписиВалидны(ТекЭл.СсылкаНаЭД) Тогда
							МассивОбработки.Добавить(ТекЭл.СсылкаНаЭД);
						КонецЕсли;
					Иначе
						МассивОбработки.Добавить(ТекЭл.СсылкаНаЭД);
					КонецЕсли;
				КонецЦикла;
				СтруктураДанных = Новый Структура;
				СтруктураДанных.Вставить("Сертификат", ТекСтрока.Сертификат);
				ПараметрыСертификата = ПолучитьЗначенияРеквизитовВПривилегированномРежиме(
										ТекСтрока.Сертификат, 
										"ЗапомнитьПарольКСертификату, ПарольПользователя, Отозван, Отпечаток");
				СтруктураДанных.Вставить("ПараметрыСертификата", ПараметрыСертификата);
				СтруктураДанных.Вставить("МассивЭД",   МассивОбработки);
				МассивСертификатов.Добавить(СтруктураДанных);
			КонецЕсли;
		КонецЦикла;
				
		Если ВыполнятьКриптооперацииНаСервере() Тогда
			МассивОбработанныхСертификатов = Новый Массив;
			Для Каждого ТекЭл Из МассивСертификатов Цикл
				ПарольПользователя = Неопределено;
				СертификатПодписи = ТекЭл.Сертификат;
				МассивЭД = ТекЭл.МассивЭД;
				КолПодписанных = ПодписатьЭДОпределеннымСертификатом(МассивЭД,
																	 СертификатПодписи,
																	 ПарольПользователя,
																	 ТекЭл.ПараметрыСертификата);
				КоличествоПодписанныхНаСервере = КоличествоПодписанныхНаСервере + КолПодписанных;
				Если КолПодписанных>0 Тогда
					МассивОбработанныхСертификатов.Добавить(ТекЭл);
				КонецЕсли
			КонецЦикла;
			Если МассивОбработанныхСертификатов.Количество() > 0 Тогда
				МассивСертификатов = ОбщегоНазначенияКлиентСервер.СократитьМассив(МассивСертификатов,
																				  МассивОбработанныхСертификатов);
			КонецЕсли;
		КонецЕсли;
		СтруктураВозврата.Вставить("МассивСертификатов", МассивСертификатов);
	КонецЕсли;
	
	Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Отправить") Тогда
		Если ЗначениеЗаполнено(ЭД) Тогда
			ТЗ_ЭД = ТаблицаПоЭД(ЭД);
			Если (ЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
				ИЛИ ЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
				И ЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
				ТЗ_ЭД.Удалить(ТЗ_ЭД[0]);
			КонецЕсли;
		Иначе
			Если Действия = "Отправить" Тогда
				Запрос.Текст = ТекстЗапроса + " И (НЕ ПрисоединенныеФайлы.Ссылка ЕСТЬ NULL)";
			Иначе
				ДопУсловие = " И (НЕ ПрисоединенныеФайлы.Ссылка = ЗНАЧЕНИЕ(Справочник.ЭДПрисоединенныеФайлы.ПустаяСсылка)) ";
				Если ВыполнятьКриптооперацииНаСервере() Тогда
					ДопУсловие = ДопУсловие + "
								| И (ПрисоединенныеФайлы.СтатусЭД=ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Подписан))";
				Иначе
					ДопУсловие = ДопУсловие + "
								| И (ПрисоединенныеФайлы.СтатусЭД=ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)
								| ИЛИ ПрисоединенныеФайлы.СтатусЭД=ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ЧастичноПодписан))";
				КонецЕсли;
				Если МассивНеобрабатываемыхОбъектов.Количество() > 0 Тогда
					ДопУсловие = ДопУсловие + " И НЕ(ПрисоединенныеФайлы.Ссылка В (&МассивНеобрабатываемыхОбъектов))";
					Запрос.УстановитьПараметр("МассивНеобрабатываемыхОбъектов", МассивНеобрабатываемыхОбъектов);
				КонецЕсли;
				Запрос.Текст = ТекстЗапроса + ДопУсловие;
			КонецЕсли;
			ТЗ_ЭД = Запрос.Выполнить().Выгрузить();
		КонецЕсли;
		ТЗ_ЭД.Колонки.Добавить("Подписывать");
		ТЗ_ЭД.Колонки.Добавить("Сертификат");
		Для Каждого ТекСтрока Из ТЗ_ЭД Цикл
			НастройкиОбменаЭД = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(ТекСтрока.ВладелецЭД,
																									 ,
																									 КлиентскиеНастройкиКриптографии,
																									 ТекСтрока.СсылкаНаЭД);
			
			Если НЕ ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда
				Продолжить;
			КонецЕсли;
			ТекСтрока.Подписывать = НастройкиОбменаЭД.Подписывать;
		КонецЦикла;
		
		Если Действия = "Отправить" Тогда
			Для Каждого Строка из ТЗ_ЭД Цикл
				Если Строка.СтатусЭД = Перечисления.СтатусыЭД.Сформирован Тогда
					ТЗ_ЭД.Удалить(Строка);
					ТекстСообщения = Нстр("ru = 'Для отправки ЭД необходимо его утвердить.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ИначеЕсли Строка.Подписывать И Строка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден Тогда
					ТЗ_ЭД.Удалить(Строка);
					ТекстСообщения = Нстр("ru = 'Для отправки ЭД необходимо его подписать.'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				КонецЕсли
			КонецЦикла;
		Иначе
			Для Каждого Строка из ТЗ_ЭД Цикл
				Если НЕ (Строка.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
						 ИЛИ Строка.СтатусЭД = Перечисления.СтатусыЭД.ЧастичноПодписан
						 ИЛИ Строка.СтатусЭД = Перечисления.СтатусыЭД.Подписан) Тогда
					
					ТЗ_ЭД.Удалить(Строка);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если (ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действия, "Утвердить")
			  И (КолУтвержденныхЭД > 0 ИЛИ КолУтвержденныхРанее > 0))
			 ИЛИ Действия = "Отправить" Тогда
			
			МассивСоглашений = Новый Массив;
			ВремТЗ = ТЗ_ЭД.Скопировать(, "Соглашение");
			ВремТЗ.Свернуть("Соглашение");
			Для Каждого ТекСтрока Из ВремТЗ Цикл
				Если НЕ ЗначениеЗаполнено(ТекСтрока.Соглашение)
					ИЛИ ЭлектронныеДокументыСлужебный.ЭтоПрямойОбменЭД(ТекСтрока.Соглашение.СпособОбменаЭД)
					И НЕ ЗначениеЗаполнено(ТекСтрока.Соглашение.Контрагент)
					ИЛИ ТекСтрока.Соглашение.ЭтоИнтеркампани Тогда
					
					Продолжить;
				КонецЕсли;
				Для Сч = 0 По 1 Цикл
					ПризнакПодписи = Сч <> 0;
					Отбор = Новый Структура("Соглашение, Подписывать", ТекСтрока.Соглашение, ПризнакПодписи);
					МассивЭД = ТЗ_ЭД.НайтиСтроки(Отбор);
					Если МассивЭД.Количество() > 0 Тогда
						МассивОбработки = Новый Массив;
						Для Каждого ТекЭл Из МассивЭД Цикл
							МассивОбработки.Добавить(ТекЭл.СсылкаНаЭД);
						КонецЦикла;
						СтруктураДанных = Новый Структура;
						ПараметрыСоглашения = ПолучитьЗначенияРеквизитовВПривилегированномРежиме(
												ТекСтрока.Соглашение, "СпособОбменаЭД, СертификатАбонента, СертификатКонтрагентаДляШифрования");
						ПараметрыСоглашения.СертификатКонтрагентаДляШифрования = ПараметрыСоглашения.СертификатКонтрагентаДляШифрования.Получить();
						СтруктураДанных.Вставить("ПараметрыСоглашения", ПараметрыСоглашения);
						СтруктураДанных.Вставить("ПризнакПодписи", ПризнакПодписи);
						СтруктураДанных.Вставить("МассивЭД", МассивОбработки);
						МассивСоглашений.Добавить(СтруктураДанных);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			СтруктураВозврата.Вставить("МассивСоглашений", МассивСоглашений);
			СтруктураВозврата.Вставить("НемедленнаяОтправкаЭД", ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД());
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Только для внутреннего использования
Функция ОтправитьИПолучитьДокументы(СтруктураПаролейИМаркеров) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КолОтправленныхПакетов",
							   ЭлектронныеДокументыСлужебный.ОтправкаСформированныхЭД(СтруктураПаролейИМаркеров));
	СтруктураВозврата.Вставить("НовыеДокументы",
							   ЭлектронныеДокументыСлужебный.ПолучитьНовыеЭД(СтруктураПаролейИМаркеров));
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет признак шифрования и статус пакета электронных документов.
//
// Параметры:
// МассивСсылокНаДокументы - массив ссылок на пакеты электронных документов, параметры которых надо определить.
//
Функция ОпределитьШифрованиеИСтатус(Знач МассивСсылокНаДокументы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивВозврата = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭД.Ссылка КАК СсылкаНаДокумент,
	|	ПакетЭД.Соглашение.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
	|	ЭДПрисоединенныеФайлы.Ссылка,
	|	ПакетЭД.СтатусПакета
	|ИЗ
	|	Документ.ПакетЭД КАК ПакетЭД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ПО (ЭДПрисоединенныеФайлы.ВладелецФайла = ПакетЭД.Ссылка)
	|ГДЕ
	|	ПакетЭД.Ссылка В(&МассивСсылок)
	|	И ПакетЭД.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылокНаДокументы);
	
	ВыборкаПакеты = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПакеты.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПакеты.Ссылка) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ВыборкаПакеты.Количество() = 1 И  ВыборкаПакеты.СтатусПакета <> Перечисления.СтатусыПакетовЭД.КРаспаковке Тогда
			ВызватьИсключение(Нстр("ru = 'Статус пакета отличен от значения ""К распаковке""! Обработка прервана...'"));
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыДанных = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаПакеты.Ссылка);
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ПараметрыДанных.СсылкаНаДвоичныеДанныеФайла);
		ФайлАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("zip");
		
		ДвоичныеДанныеФайла.Записать(ФайлАрхива);
		
		ЗИПЧтение = Новый ЧтениеZipФайла(ФайлАрхива);
		ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог("Ext",
																		  ВыборкаПакеты.Ссылка.УникальныйИдентификатор());
																		  
		Попытка
			ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
				ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
			КонецЕсли;
			ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
																   ТекстОшибки,
																   ТекстСообщения);
			Возврат Ложь;
		КонецПопытки;

		ФайлыАрхива = НайтиФайлы(ПапкаДляРаспаковки, "*");
		
		Для Каждого ФайлИнформации Из ФайлыАрхива Цикл
			Если Найти(ФайлИнформации.Имя, "packageDescription") > 0  Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЧтениеХМЛ = Новый ЧтениеXML;
		ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
		НашлиШифрование = Ложь;
		Документ = Неопределено;
		Зашифрован = Ложь;
		Сертификат = "";
		Пока ЧтениеХМЛ.Прочитать() Цикл
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НастройкиШифрования" Тогда
				НашлиШифрование = Истина;
			КонецЕсли;
			Если Не НашлиШифрование Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ДокументШифрования" Тогда
				ЧтениеХМЛ.Прочитать();
				Документ = ЧтениеХМЛ.Значение;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Зашифрован" Тогда
				ЧтениеХМЛ.Прочитать();
				Зашифрован = Булево(ЧтениеХМЛ.Значение);
				Сертификат = ВыборкаПакеты.СертификатОрганизацииДляРасшифровки;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "СертификатШифрования" Тогда
				ЧтениеХМЛ.Прочитать();
				Сертификат = ЧтениеХМЛ.Значение;
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ДокументШифрования" Тогда
				
				ПарольДоступа = ЭлектронныеДокументыСлужебный.СохраненныйПарольКСертификату(ВыборкаПакеты.СертификатОрганизацииДляРасшифровки);
				НоваяСтруктураМассива = Новый Структура("Документ, Зашифрован, Сертификат, ПарольДоступа",
					Документ, Зашифрован, Сертификат, ПарольДоступа);
					
				МассивВозврата.Добавить(НоваяСтруктураМассива);
				Документ = Неопределено;
				Зашифрован = Ложь;
				Сертификат = "";
			КонецЕсли;
			
			Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НастройкиШифрования" Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		ЧтениеХМЛ.Закрыть();
		УдалитьФайлы(ПапкаДляРаспаковки);
		УдалитьФайлы(ФайлАрхива);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

// Обрабатывает подтверждения документов, состоящие из электронно-цифровой подписи.
//
// Параметры:
//  СоответствиеФайлПараметры - Соответствие, связывающее имена файлов данных и файлов электронных цифровых подписей к
//                              ним.
//  ПакетЭДСсылка - ДокументСсылка.ПакетЭД, ссылка на пакет электронных документов, содержащий подтверждение.
//  ПапкаДляРаспаковки - Строка, пусть к временному каталогу
//  МассивЭДИДанныхПодписей - Массив, элементами массива является структура, содержащия ссылку на ЭД и двоичные данные
//                            подписи для последующей обработки на клиенте
//
Функция ОбработатьПодтвержденияДокументовНаСервере(
				СоответствиеФайлПараметры,
				ПакетЭДСсылка,
				ПапкаДляРаспаковки,
				МассивЭДИДанныхПодписей = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МассивЭДИДанныхПодписей = Новый Массив;
	
	МассивВозврата = Новый Массив;
	ПакетЭДОбъект = ПакетЭДСсылка.ПолучитьОбъект();
	// Попытаемся получить настройки криптографии.
	ВыполнятьКриптооперацииНаСервере = ВыполнятьКриптооперацииНаСервере();
	Если ВыполнятьКриптооперацииНаСервере Тогда
		Попытка
			НастройкиКриптографии = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
			ПровайдерЭЦП = НастройкиКриптографии.ПровайдерЭЦП;
			ПутьМодуляКриптографии = НастройкиКриптографии.ПутьМодуляКриптографии;
			ТипПровайдераЭЦП = НастройкиКриптографии.ТипПровайдераЭЦП;
			
			МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
			МенеджерКриптографии.АлгоритмПодписи     = НастройкиКриптографии.АлгоритмПодписи;
			МенеджерКриптографии.АлгоритмХеширования = НастройкиКриптографии.АлгоритмХеширования;
			МенеджерКриптографии.АлгоритмШифрования  = НастройкиКриптографии.АлгоритмШифрования;
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
				+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'обработка подтверждений ЭД'"), ТекстОшибки, ТекстСообщения);
			Возврат МассивВозврата;
		КонецПопытки;
	КонецЕсли;
	
	// Подтверждением считаем подпись без файла (в соответствии - ключ с файлом подписи)
	Для Каждого ЭлементСоответствие Из СоответствиеФайлПараметры Цикл
		Если Найти(ЭлементСоответствие.Ключ, ".p7s") > 0 Тогда
			НаправлениеИскомогоДокумента = Перечисления.НаправленияЭД.Исходящий;
			ФайлыПодписи = НайтиФайлы(ПапкаДляРаспаковки, ЭлементСоответствие.Ключ, Истина);
			Если ФайлыПодписи.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДвоичныеДанныеПодписи = Новый ДвоичныеДанные(ФайлыПодписи[0].ПолноеИмя);
			
			УникальныйИД = ЭлементСоответствие.Значение.УникальныйИД;
			ЭлектронныйДокумент = ЭлектронныеДокументыСлужебный.ОпределитьЭлектронныйДокумент(УникальныйИД,
																							 НаправлениеИскомогоДокумента);
			Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) И ТипЗнч(ЭлементСоответствие.Значение) = Тип("Структура")
				И ЭлементСоответствие.Значение.Свойство("КодРегламента") И СтрДлина(УникальныйИД) = 36 Тогда
				ЭлектронныйДокумент = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(УникальныйИД));
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ЭлектронныйДокумент) ИЛИ ЭлектронныйДокумент.ПолучитьОбъект() = Неопределено
				ИЛИ ЭлектронныеДокументыСлужебный.ЕстьТакаяПодпись(ДвоичныеДанныеПодписи, ЭлектронныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			АдресДанныхДокументов = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭлектронныйДокумент).СсылкаНаДвоичныеДанныеФайла;
			ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(АдресДанныхДокументов);
			
			Если ВыполнятьКриптооперацииНаСервере Тогда
				// Определим сертификаты криптографии из подписи.
				СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДвоичныеДанныеПодписи);
				Если СертификатыПодписи.Количество() <> 0 Тогда
					Сертификат = СертификатыПодписи[0];
					ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(ЭлектронныйДокумент, ДвоичныеДанныеПодписи,
						Base64Строка(Сертификат.Отпечаток), ТекущаяДатаСеанса(), "", ЭлементСоответствие.Ключ,
						ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект), Сертификат.Выгрузить());
				КонецЕсли;
				ОпределитьСтатусыПодписей(ЭлектронныйДокумент);
			Иначе
				СтруктураЭДИДанныхПодписи = Новый Структура;
				СтруктураЭДИДанныхПодписи.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
				СтруктураЭДИДанныхПодписи.Вставить("ДанныеПодписи",       ДвоичныеДанныеПодписи);
				МассивЭДИДанныхПодписей.Добавить(СтруктураЭДИДанныхПодписи);
			КонецЕсли;
			
			ЭлектронныйДокументОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
			ЭлектронныйДокументОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
			НовыйСтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.ПолученоПодтверждение,
																					 ЭлектронныйДокумент);
			
			ЭлектронныйДокументОбъект.СтатусЭД = НовыйСтатусЭД;
			ЭлектронныйДокументОбъект.Записать();
			
			ОбновитьВерсиюЭД(ЭлектронныйДокумент);
						
			ВладелецЭД = ЭлектронныйДокумент.ВладелецФайла;
			Если ТипЗнч(ВладелецЭД) = Тип("ДокументСсылка.ПроизвольныйЭД") Тогда
				ПроиздвольныйЭДОбъект = ВладелецЭД.ПолучитьОбъект();
				ПроиздвольныйЭДОбъект.СтатусДокумента = НовыйСтатусЭД;
				ПроиздвольныйЭДОбъект.Записать();
			КонецЕсли;
			
			СтрокаПакетаЭД = ПакетЭДОбъект.ЭлектронныеДокументы.Добавить();
			СтрокаПакетаЭД.ЭлектронныйДокумент = "Подтверждение";
			СтрокаПакетаЭД.ОбъектВладелец = ВладелецЭД;
			МассивВозврата.Добавить(ВладелецЭД);
		КонецЕсли;
	КонецЦикла;
	ПакетЭДОбъект.СтатусПакета = Перечисления.СтатусыПакетовЭД.Распакован;
	ПакетЭДОбъект.Записать();
	
	Возврат МассивВозврата;
	
КонецФункции

// Возвращает структуру, содержащую информацию о юридическом адресе контрагента.
//
// Параметры:
//  СтруктураПараметров - структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента      - строка - имя метаданных справочника;
//  ВидАдреса           - строка - "Факт" или "Юр";
//  ТекстОшибки         - строка - описание ошибки;
//
// Возвращаемое значение:
//  СтруктураАдреса - структура - информация о юридическом адресе.
//
Функция ПолучитьАдресСтруктурой(СтруктураПараметров = Неопределено,
								ВидКонтрагента = Неопределено,
								ВидАдреса = Неопределено,
								ТекстОшибки = "") Экспорт
	
	СтруктураАдреса = Новый Структура;
	// Поля структуры для адреса РФ.
	СтруктураАдреса.Вставить("АдресРФ");
	СтруктураАдреса.Вставить("Индекс");
	СтруктураАдреса.Вставить("КодРегион");
	СтруктураАдреса.Вставить("Район");
	СтруктураАдреса.Вставить("Город");
	СтруктураАдреса.Вставить("НаселПункт");
	СтруктураАдреса.Вставить("Улица");
	СтруктураАдреса.Вставить("Дом");
	СтруктураАдреса.Вставить("Корпус");
	СтруктураАдреса.Вставить("Кварт");
	// Поля структуры для иностранного адреса или адреса РФ строкой.
	СтруктураАдреса.Вставить("КодСтр");
	СтруктураАдреса.Вставить("АдрТекст");
	
	ЭлектронныеДокументыПереопределяемый.ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента,
		ВидАдреса, ТекстОшибки);
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Проверяет наличие элементов справочника организации
// и возвращает элемент, если он единственный.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - ссылка на единственный элемент справочника Организации
//                Неопределено - есть организаций нет или несколько
//
Процедура ОпределитьОрганизацию(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Организация = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам
// 
// Параметры:
//  ТипОбъекта - Строка, идентификатор типа объекта, который необходимо найти,
//  ИДОбъекта - Строка, идентификатор объекта заданного типа,
//  ДополнительныеРеквизиты - Структура, набор дополнительных полей объекта для поиска.
//
Функция НайтиСсылкуНаОбъект(ТипОбъекта,
							ИдОбъекта = "",
							ДополнительныеРеквизиты = Неопределено,
							ИДЭД = Неопределено) Экспорт
	
	Результат = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ТипОбъекта,
																		 ИдОбъекта,
																		 ДополнительныеРеквизиты,
																		 ИДЭД);

КонецФункции

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - адрес хранения католога товаров;
//  ИдентификаторФормы - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	ЭлектронныеДокументыПереопределяемый.ПоместитьКаталогТоваровВоВременноеХранилище(
												АдресВоВременномХранилище,
												ИдентификаторФормы);
	
КонецПроцедуры

// Изменяет поведение элементов управляемой или обычной формы.
//
// Параметры:
//  Форма - <Управляемая или обычная форма> - управляемая или обычная форма для изменения.
//  СтруктураПараметров - <Структура> - параметры процедуры
//
Процедура ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров) Экспорт
	
	ЭлектронныеДокументыПереопределяемый.ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров)
	
КонецПроцедуры
 
// Возвращает текст сообщения пользователю о необходимости  настройки системы.
//
// Параметры:
//  <ВидОперации> - Строка - признак выполняемой операции
//
// Возвращаемое значение:
//  ТекстСообщения - <Строка> - Строка сообщения
//
Функция ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации) Экспорт
	
	ТекстСообщения = "";
	ЭлектронныеДокументыПереопределяемый.ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации, ТекстСообщения);
	Если НЕ ЗначениеЗаполнено(ТекстСообщения) Тогда
		Если ВРег(ВидОперации) = "РАБОТАСЭД" Тогда
			ТекстСообщения = НСтр("ru = 'Для работы с электронными документами необходимо
			|в настройках системы включить использование обмена электронными документами.'");
		ИначеЕсли ВРег(ВидОперации) = "ПОДПИСАНИЕЭД" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности подписания ЭД необходимо
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
		ИначеЕсли ВРег(ВидОперации) = "НАСТРОЙКАКРИПТОГРАФИИ" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности настройки криптографии необходимо 
			|в настройках системы включить опцию использования электронных цифровых подписей.'");
		ИначеЕсли ВРег(ВидОперации) = "РАБОТАСБАНКАМИ" Тогда
			ТекстСообщения = НСтр("ru = 'Для возможности обмена ЭД с банками необходимо 
			|в настройках системы включить опцию использования прямого взаимодействия с банками.'");
		Иначе
			ТекстСообщения = НСтр("ru='Операция не может быть выполнена.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСообщения;
	
КонецФункции

// Возвращаемое значение - Число (количество обработанных документов)
Функция ОбработатьДвоичныеДанныеПакетаОператораЭДО(
				ПакетЭД,
				ДанныеРаспаковки,
				ПапкаДляРаспаковки,
				ЕстьКриптосредствоНаКлиенте,
				ТипДанных,
				МассивДобавленныхФайлов,
				СоответствиеЭДИПодписей) Экспорт
	
	Возврат ЭлектронныеДокументыВнутренний.ОбработатьДвоичныеДанныеПакетаОператораЭДО(ПакетЭД,
																						ДанныеРаспаковки,
																						ПапкаДляРаспаковки,
																						ЕстьКриптосредствоНаКлиенте,
																						ТипДанных,
																						МассивДобавленныхФайлов,
																						СоответствиеЭДИПодписей);
	
КонецФункции

// Получает таблицу значений с данными по электронным документам.
//
// Параметры:
// МассивСсылокНаВладельцев - массив ссылок на владельцев электронных документов, данные которых необходимо получить.
//
Функция ПолучитьДанныеЭДПоВладельцам(МассивСсылокНаВладельцев) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект КАК ВладелецЭД,
	|	СостоянияЭД.СостояниеВерсииЭД КАК СостояниеВерсииЭД,
	|	СостоянияЭД.ДействияСНашейСтороны КАК ДействияСНашейСтороны,
	|	СостоянияЭД.ДействияСоСтороныДругогоУчастника КАК ДействияСоСтороныДругогоУчастника
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылокНаВладельцев)";
	
	Запрос.УстановитьПараметр("МассивСсылокНаВладельцев", МассивСсылокНаВладельцев);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Производит заполнение реквизитов формы переданными значениями 
//
// Параметры:
//  ДанныеФормы - Данные управляемой формы;
//  ЗначениеЗаполнения - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеВозврата) Экспорт
	
	ЭлектронныеДокументыПереопределяемый.ЗаполнитьИсточник(ДанныеФормы, ЗначениеВозврата);
	
конецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Работа с версиями

Процедура УдалитьСтаруюВерсиюЭД(ЗаписьНабора)
	
	СтруктураВерсии =  ЭлектронныеДокументыСлужебный.ПолучитьСтруктуруВерсииЭД(ЗаписьНабора.СсылкаНаОбъект);
	
	Если ЗначениеЗаполнено(СтруктураВерсии.СсылкаНаДокумент)
		И (СтруктураВерсии.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
		ИЛИ СтруктураВерсии.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
		
		ДокументОбъект = СтруктураВерсии.СсылкаНаДокумент.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Истина;
		ДокументОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция СостояниеВерсииЭД(СсылкаНаВладельца)
	
	ВозвращаемоеЗначение = Перечисления.СостоянияВерсийЭД.ПустаяСсылка();
	СтруктураВерсииЭД =  ЭлектронныеДокументыСлужебный.ПолучитьСтруктуруВерсииЭД(СсылкаНаВладельца);
	
	Если СтруктураВерсииЭД.Свойство("СостояниеВерсииЭД") Тогда
		ВозвращаемоеЗначение = СтруктураВерсииЭД.СостояниеВерсииЭД;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПолучитьТекстСводногоСостоянияЭД(СсылкаНаВладельца)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстСводногоСостояния = "";
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(СсылкаНаВладельца);
	ТаблицаДанных = ПолучитьДанныеЭДПоВладельцам(МассивСсылок);

	Если ТаблицаДанных.Количество() > 0 Тогда
		Строка = ТаблицаДанных[0];
		
		ТекстСНашейСтороны = "";
		ТекстСоСтороныДругогоУчастника = "";
		
		Если ЗначениеЗаполнено(Строка.ДействияСНашейСтороны)
			И Строка.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия Тогда
			
			ТекстСНашейСтороны = НСтр("ru = 'с нашей стороны'");
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ДействияСоСтороныДругогоУчастника)
			И Строка.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия Тогда
			
			ТекстСоСтороныДругогоУчастника = НСтр("ru = 'со стороны других участников'");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекстСНашейСтороны) ИЛИ ЗначениеЗаполнено(ТекстСоСтороныДругогоУчастника) Тогда
			
			ТекстСводногоСостояния = НСтр("ru = 'Требуются действия '") + ТекстСНашейСтороны
				+ ?(ЗначениеЗаполнено(ТекстСНашейСтороны) И ЗначениеЗаполнено(ТекстСоСтороныДругогоУчастника), " и ", "")
				+ ТекстСоСтороныДругогоУчастника;
		ИначеЕсли ЗначениеЗаполнено(Строка.ДействияСНашейСтороны)
			И Строка.ДействияСНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено
			И ЗначениеЗаполнено(Строка.ДействияСоСтороныДругогоУчастника)
			И Строка.ДействияСоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено Тогда
			
			ТекстСводногоСостояния = НСтр("ru = 'Обмен завершен.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстСводногоСостояния;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подпись электронных документов 

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент)
	
	ФлагПодписанПолностью = Истина;
	
	Если ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Возврат ФлагПодписанПолностью;
	КонецЕсли;
	
	Если ЭлектронныйДокумент.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ТЗ = ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи.Выгрузить(, "Отпечаток");
		ТЗ.Свернуть("Отпечаток");
		ФлагПодписанПолностью = ТЗ.Количество() > 1;
	ИначеЕсли ЭлектронныйДокумент.ВидЭД = Перечисления.ВидыЭД.ПлатежноеПоручение Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СертификатыЭЦП.Ссылка КАК Сертификат,
		|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Отпечаток
		|ПОМЕСТИТЬ УстановленныеПодписи
		|ИЗ
		|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СертификатыЭЦП КАК СертификатыЭЦП
		|		ПО ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Отпечаток = СертификатыЭЦП.Отпечаток
		|ГДЕ
		|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка = &ЭД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей.Сертификат
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД.СертификатыНеобходимыхПодписей КАК СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей
		|ГДЕ
		|	СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей.Ссылка = &Соглашение
		|	И НЕ СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей.Сертификат В
		|				(ВЫБРАТЬ
		|					УстПодп.Сертификат
		|				ИЗ
		|					УстановленныеПодписи КАК УстПодп)";
		
		Запрос.УстановитьПараметр("Соглашение", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлектронныйДокумент,"СоглашениеЭД"));
		Запрос.УстановитьПараметр("ЭД", ЭлектронныйДокумент);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			ФлагПодписанПолностью = Ложь;
		КонецЕсли;
	Иначе
		// Массив отпечатков всех установленных ЭЦП на ЭД
		МассивОтпечатковСертификатов = ЭлектронныйДокумент.ЭлектронныеЦифровыеПодписи.ВыгрузитьКолонку("Отпечаток");
		
		// Выберем все действующие сертификаты по тек.организации и тек.виду ЭД,
		// совпадающие с сертификатами установленных ЭЦП.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ 
		|	СертификатыЭЦПВидыДокументов.Ссылка КАК СертификатЭЦП
		|ИЗ
		|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
		|ГДЕ
		|	СертификатыЭЦПВидыДокументов.Ссылка.Организация = &Организация
		|	И СертификатыЭЦПВидыДокументов.ВидДокумента = &ВидДокумента
		|	И СертификатыЭЦПВидыДокументов.Ссылка.Отпечаток В(&МассивОтпечатковСертификатов)
		|	И СертификатыЭЦПВидыДокументов.Ссылка.Отозван = ЛОЖЬ
		|	И СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("МассивОтпечатковСертификатов", МассивОтпечатковСертификатов);
		Запрос.УстановитьПараметр("Организация",                  ЭлектронныйДокумент.Организация);
		Запрос.УстановитьПараметр("ВидДокумента",                 ЭлектронныйДокумент.ВидЭД);
		
		ФлагПодписанПолностью = НЕ Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	ЭлектронныеДокументыПереопределяемый.ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент, ФлагПодписанПолностью);
	
	Возврат ФлагПодписанПолностью;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обмен через электронную почту

Функция ОтправитьЭлектронноеПисьмо(ПодготовленныеДокументы, АдресКаталогаСВложениями)
	
	СоответствиеВложений = СформироватьСоответствиеВложений(АдресКаталогаСВложениями);
	Результат = ПередатьПисьмоСВложениями(ПодготовленныеДокументы, СоответствиеВложений);
	УдалитьФайлы(АдресКаталогаСВложениями);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьСоответствиеВложений(КаталогВложений, ТолькоПодписи = Ложь)
	
	СписокДоступныхРасширений = СформироватьСписокРасширенийСертификатов();
	СоответствиеВозврата = Новый Соответствие;
	СписокВложений = НайтиФайлы(КаталогВложений, "*");
	Для Каждого ФайлВложений Из СписокВложений Цикл
		Если ТолькоПодписи И Найти(ФайлВложений.Расширение, СписокДоступныхРасширений) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФайлВложений.ЭтоФайл() Тогда
			СоответствиеВозврата.Вставить(ФайлВложений.Имя, Новый ДвоичныеДанные(ФайлВложений.ПолноеИмя));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Отправляет письмо с вложениями по пакету ЭД.
//
// Параметры:
//  Конверт - Ссылка на документ "ПакетЭД" - подготовленный к отправке пакет электронных документов,
//  СоответствиеВложений - Соответствие, список вложенных файлов в пакет электронных документов.
//
Функция ПередатьПисьмоСВложениями(ПакетЭД, СоответствиеВложений)
	
	Получатель = ПакетЭД.Получатель;
	Отправитель = ПакетЭД.Отправитель;
	
	ПараметрыОтправки = Новый Структура("Кому, Тема, Тело, Вложения, Пароль",
		ПакетЭД.АдресРесурсаКонтрагента, СформироватьТемуПисьма(Отправитель, Получатель), , СоответствиеВложений,
		ПакетЭД.АдресРесурсаОрганизации.Пароль);
		
	Попытка
		РаботаСПочтовымиСообщениями.ОтправитьСообщение(ПакетЭД.АдресРесурсаОрганизации, ПараметрыОтправки);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Текст = НСтр("ru = 'Ошибка при отправке сообщения на сервер электронной почты.
						|%1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ТекстОшибки);
			
		ТекстСообщения = НСтр("ru = 'Ошибка при отправке эл.документов.
								|(подробности см. в Журнале регистрации).'");
		ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Отправка эл.документов'"),
																					ТекстОшибки,
																					ТекстСообщения);
 		Возврат 0;
	КонецПопытки;
	
	Возврат 1;
	
КонецФункции

Функция СформироватьТемуПисьма(Отправитель, Получатель)
	
	Возврат "Обмен эл.документами: " + Отправитель + ?(ЗначениеЗаполнено(Получатель), " -> " + Получатель, "");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Устанавливает признак того, что электронный документ был утвержден.
//
// Параметры:
//  ПрисоединенныйФайл - ссылка на электронный документ, который необходимо обработать.
//  НовыйЭД - ссылка на электронный документ, если при утверждении был создан новый электронный документ.
//
Процедура УстановитьПризнакУтвержден(ПрисоединенныйФайл, НовыйЭД)
	
	// Проверим, все ли необходимые условия выполнены
	Если ЭлектронныеДокументыПереопределяемый.ЭлектронныйДокументГотовКУтверждению(ПрисоединенныйФайл) Тогда
		Попытка
			ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
			ФайлОбъект.СтатусЭД = ЭлектронныеДокументыСлужебный.ПолучитьДопустимыйСтатусЭД(Перечисления.СтатусыЭД.Утвержден,
																						   ПрисоединенныйФайл);
			ФайлОбъект.ДатаИзмененияСтатусаЭД = ТекущаяДатаСеанса();
			ФайлОбъект.Изменил = Пользователи.АвторизованныйПользователь();
			ФайлОбъект.Записать();
			ОбновитьВерсиюЭД(ФайлОбъект.Ссылка);
			ЭлектронныеДокументыПереопределяемый.НазначенСтатусУтвержден(ФайлОбъект.Ссылка);
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке())
				+ НСтр("ru = ' (подробности см. в Журнале регистрации).'");
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'утверждение ЭД'"), ТекстОшибки, ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	Если ТранзакцияАктивна() И ПрисоединенныйФайл.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И (ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель
		ИЛИ ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель) Тогда
		
		Если ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
			НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДТорг12Покупатель(ПрисоединенныйФайл);
		ИначеЕсли ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
			НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДАкт501Заказчик(ПрисоединенныйФайл);
		ИначеЕсли ПрисоединенныйФайл.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			НовыйЭД = ЭлектронныеДокументыВнутренний.СформироватьЭДКорДокументаПолучатель(ПрисоединенныйФайл);
		КонецЕсли;
		
		Если НовыйЭД = Неопределено Тогда
			ОтменитьТранзакцию();
		Иначе
			МассивЭД = Новый Массив;
			МассивЭД.Добавить(НовыйЭД);
			
			НастройкиОбмена = ЭлектронныеДокументыСлужебный.НастройкиОбменаЭД(НовыйЭД);
			ЭлектронныеДокументыСлужебный.СоздатьДокументыПакетовЭД(МассивЭД, НастройкиОбмена.ИспользоватьПодпись);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Производит удаление из массива объектов для которых запрешено формирование новых ЭД.
//
// Параметры
//  МассивСсылок  - Массив - массив ссылок
//
Процедура УдалитьНедоступныеДляФормированияЭДОбъекты(МассивСсылок)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
		|	И (СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПлатежноеПоручение)
		|			ИЛИ СостоянияЭД.ЭлектронныйДокумент.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
		|				И (СостоянияЭД.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Отклонен)
		|					И СостоянияЭД.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
		|					И СостоянияЭД.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОтклоненПолучателем)))
		|	И НЕ(СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Сформирован)
		|				ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)
		|				ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Подписан)
		|				ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ЧастичноПодписан)
		|				ИЛИ СостоянияЭД.ЭлектронныйДокумент.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОшибкаПередачи))";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Индекс = МассивСсылок.Найти(Результат.СсылкаНаОбъект);
		МассивСсылок.Удалить(Индекс);
		ШаблонСообщения = НСтр("ru='Для документа %1 уже есть актуальный электронный документ.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;

КонецПроцедуры

// Определяет необходимость выполнения какого-либо действия
// с электронным документом с нашей стороны, либо ожидание действия получателя,
// на основании статуса текущего электронного документа.
//
// Параметры:
//  СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ.
//
Функция ОпределитьСводнуюИнформациюПоСтатусуЭД(СсылкаНаЭД)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "ВидЭД, СтатусЭД, НаправлениеЭД,
	|ВерсияРегламентаЭДО, СоглашениеЭД, ЭлектронныйДокументВладелец");
	
	СтруктураДействий = Новый Структура("СНашейСтороны, СоСтороныДругогоУчастника",
		Перечисления.СводныеСостоянияЭД.ДействийНеТребуется, Перечисления.СводныеСостоянияЭД.ДействийНеТребуется);
	Если СсылкаНаЭД <> Неопределено Тогда
		
		Если ПараметрыЭД.ВидЭД <> Перечисления.ВидыЭД.СчетФактура Тогда
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
				
				СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				
				// Если обмен прямой, и получен ответный ЭД на отправленный ЭД, то больше не требуется действий с нашей стороны.
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
					И ЗначениеЗаполнено(ПараметрыЭД.ЭлектронныйДокументВладелец) Тогда
					
					СпособОбменаЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЭД.СоглашениеЭД, "СпособОбменаЭД");
					Если СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезКаталог
						ИЛИ СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезFTP Тогда
						
						СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
				
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
			КонецЕсли;
			
			Если (ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
				И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель))
				ИЛИ (НЕ ПараметрыЭД.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия20
					И ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении) Тогда
				
				СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
				
			КонецЕсли;
			
			Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				 И (ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик
					ИЛИ ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель) Тогда
				СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
			КонецЕсли;
			
		Иначе
			МассивЭД = Новый Массив;
			МассивПодчиненныхЭД = Новый Массив;
			МассивЭД.Добавить(СсылкаНаЭД);
			ВыбратьПодчиненныеЭД(МассивЭД, МассивПодчиненныхЭД);
			
			СтруктураФлагов = Новый Структура;
			СтруктураФлагов.Вставить("НаправлениеЭСФ",   ПараметрыЭД.НаправлениеЭД);
			СтруктураФлагов.Вставить("СтатусЭСФ",        ПараметрыЭД.СтатусЭД);
			СтруктураФлагов.Вставить("ОтправленИПУУ",    Ложь);
			СтруктураФлагов.Вставить("ЭСФОтправлен",     (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
				ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен));
			СтруктураФлагов.Вставить("ПДППолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОПолучен",       Ложь);
			СтруктураФлагов.Вставить("ПДОИППолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПЭСФОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИПЭСФПолучен",     Ложь);
			СтруктураФлагов.Вставить("ИПУУПолучен",      Ложь);
			СтруктураФлагов.Вставить("ИПУУОтправлен",    Ложь);
			СтруктураФлагов.Вставить("ИППДПОтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДООтправлен",   Ложь);
			СтруктураФлагов.Вставить("ИППДОИПОтправлен", Ложь);
			СтруктураФлагов.Вставить("УУОтправлен",      Ложь);
			
			Для Каждого Элемент Из МассивПодчиненныхЭД Цикл
				Если Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
					
					СтруктураФлагов.ПДППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
					
					СтруктураФлагов.ПДОПолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
					
					СтруктураФлагов.ПДОИППолучен = Истина;
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПЭСФОтправлен = Истина;
					ИначеЕсли Элемент.СтатусЭД = Перечисления.СтатусыЭД.Получен Тогда
						СтруктураФлагов.ИПЭСФПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИПУУОтправлен = Истина;
					Иначе
						СтруктураФлагов.ИПУУПолучен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДООтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.ИППДОИПОтправлен = Истина;
					КонецЕсли;
					
				ИначеЕсли Элемент.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ Тогда
					
					Если Элемент.СтатусЭД = Перечисления.СтатусыЭД.Отправлен Тогда
						СтруктураФлагов.УУОтправлен = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
					ИЛИ НЕ СтруктураФлагов.ЭСФОтправлен ИЛИ СтруктураФлагов.ПДППолучен И НЕ СтруктураФлагов.ИППДПОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.Отклонен;
				ИначеЕсли (ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.ПереданОператору
					ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен)
					И (НЕ СтруктураФлагов.ПДППолучен ИЛИ НЕ СтруктураФлагов.ИПЭСФПолучен) Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			Иначе
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И СтруктураФлагов.УУОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.Отклонен;
				ИначеЕсли СтруктураФлагов.ПДОПолучен И НЕ СтруктураФлагов.ИППДООтправлен
					ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
					ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден И НЕ СтруктураФлагов.ИПЭСФОтправлен Тогда
					
					СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
				
				Если ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен ИЛИ НЕ СтруктураФлагов.ПДОПолучен
					ИЛИ СтруктураФлагов.ИПЭСФОтправлен И НЕ СтруктураФлагов.ПДОИППолучен
					ИЛИ ПараметрыЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен И НЕ СтруктураФлагов.ИПУУПолучен Тогда
					
					СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется
		И СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ДействийНеТребуется Тогда
		
		СтруктураДействий.СНашейСтороны = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
		СтруктураДействий.СоСтороныДругогоУчастника = Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
	КонецЕсли;
	
	Возврат СтруктураДействий;
	
КонецФункции

// Рекурсивная процедура, получает все подчиненные электронные документы с любой глубиной вложенности.
//
// Параметры:
//  МассивЭДВладельцев - массив ссылок на электронные документы владельцы (для текущей итерации - владелец выбираемых ЭД).
//  МассивЭД - массив подчиненных электронных документов (с каждой итерацией увеличивается на количество найденных ЭД).
//             Электронный документ - владелец добавляется в этот массив отдельно (до или после вызова данной процедуры).
//
Процедура ВыбратьПодчиненныеЭД(Знач МассивЭДВладельцев, МассивЭД)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец В(&МассивЭДВладельцев)";
	Запрос.УстановитьПараметр("МассивЭДВладельцев", МассивЭДВладельцев);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		МассивЭДВладельцев = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
		Для Каждого Эл Из МассивЭДВладельцев Цикл
			
			МассивЭД.Добавить(Эл);
			
		КонецЦикла;
		ВыбратьПодчиненныеЭД(МассивЭДВладельцев, МассивЭД);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие

Функция ТаблицаПоЭД(СсылкаНаЭД)
	
	РеквизитыЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭД, "Ссылка, СтатусЭД, ВидЭД, СоглашениеЭД, ВладелецФайла");
	
	ТЗВозврата = Новый ТаблицаЗначений;
	ТЗВозврата.Колонки.Добавить("СсылкаНаЭД");
	ТЗВозврата.Колонки.Добавить("СтатусЭД");
	ТЗВозврата.Колонки.Добавить("ВидЭД");
	ТЗВозврата.Колонки.Добавить("Соглашение");
	ТЗВозврата.Колонки.Добавить("ВладелецЭД");
	
	НовСтрока = ТЗВозврата.Добавить();
	НовСтрока.СсылкаНаЭД = РеквизитыЭД.Ссылка;
	НовСтрока.СтатусЭД   = РеквизитыЭД.СтатусЭД;
	НовСтрока.ВидЭД      = РеквизитыЭД.ВидЭД;
	НовСтрока.Соглашение = РеквизитыЭД.СоглашениеЭД;
	НовСтрока.ВладелецЭД = РеквизитыЭД.ВладелецФайла;
	
	Возврат ТЗВозврата;
	
КонецФункции

// Только для внутреннего использования
Функция БыстрыйОбменИмяСохраняемогоФайла(ВладелецЭД)
	
	НаименованиеФайла = "";
	ЭлектронныеДокументыПереопределяемый.ЗадатьИмяСохраняемогоФайлаПриБыстромОбмене(ВладелецЭД, НаименованиеФайла);
	Если ЗначениеЗаполнено(ВладелецЭД) И НЕ ЗначениеЗаполнено(НаименованиеФайла) Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецЭД, "Номер, Дата");
		НаименованиеФайла = Строка(ТипЗнч(ВладелецЭД)) + " № " + СтруктураРеквизитов.Номер + " от "
			+ Формат(СтруктураРеквизитов.Дата, "ДФ=yyyy-MM-dd");
		НаименованиеФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(НаименованиеФайла, "");
	КонецЕсли;
	
	Возврат НаименованиеФайла;
	
КонецФункции

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//
// Возвращаемое значение:
//  Булево - Истина - чтение данных пакета возможно, иначе - Ложь.
//
Функция ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД)
	
	ЧтениеПакетаВозможно = Истина;
	ЭлектронныеДокументыПереопределяемый.ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно);
	
	Возврат ЧтениеПакетаВозможно;
	
КонецФункции

Функция ПолучитьСоответствиеФайлПараметры(ФайлИнформации)
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
	
	ПредставлениеДокумента = "";
	ПредставленияПодписей = Новый Массив;
	НашлиДокумент = Ложь;
	СоответствиеВозврата = Новый Соответствие;
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		
		Параметры = Новый Структура;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Текст" Тогда
			ЧтениеХМЛ.Прочитать();
			СоответствиеВозврата.Вставить("Текст", ЧтениеХМЛ.Значение);
		КонецЕсли;

		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Документ" Тогда
			ПредставлениеДокумента = "";
			ПредставленияПодписей.Очистить();
			ЧтениеХМЛ.Прочитать();
			ПредставлениеДокумента = СокрЛП(ЧтениеХМЛ.Значение);
			НашлиДокумент = Истина;
			УникальныйИД = "";
			НомерЭД = "";
		КонецЕсли;
		
		Если НЕ НашлиДокумент Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Подпись" Тогда
			ЧтениеХМЛ.Прочитать();
			ПредставленияПодписей.Добавить(СокрЛП(ЧтениеХМЛ.Значение));
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "НомерЭД" Тогда
			ЧтениеХМЛ.Прочитать();
			НомерЭД = ЧтениеХМЛ.Значение
		КонецЕсли;
		
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "УникальныйИД" Тогда
			ЧтениеХМЛ.Прочитать();
			УникальныйИД = ЧтениеХМЛ.Значение;
		КонецЕсли;
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.КонецЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "Документ" Тогда
			НашлиДокумент = Ложь;
			НовыйМассив = ПредставленияПодписей;
			СтруктураПредставления = Новый Структура("Подписи, НомерЭД, УникальныйИД, КодРегламента",
				ВернутьМассивПредставленийПодписей(ПредставленияПодписей), НомерЭД, УникальныйИД, "Nonformalized");
			СоответствиеВозврата.Вставить(ПредставлениеДокумента, СтруктураПредставления);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

Функция ПреобразоватьМассивФайловВДвоичныеДанные(МассивФайлов)
	
	МассивВозврата = Новый Массив;
	Для Каждого ФайлДанных Из МассивФайлов Цикл
		СтруктураМассива = Новый Структура;
		СтруктураМассива.Вставить("ДвоичныеДанные", Новый ДвоичныеДанные(ФайлДанных.ПолноеИмя));
		СтруктураМассива.Вставить("ИмяФайлаБезРасширения", ФайлДанных.ИмяБезРасширения);
		СтруктураМассива.Вставить("ИмяФайла", ФайлДанных.Имя);	
		МассивВозврата.Добавить(СтруктураМассива);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ВернутьМассивПредставленийПодписей(МассивПредставления)
	
	МассивВозврата = Новый Массив;
	Для Каждого Элемент Из МассивПредставления Цикл
		МассивВозврата.Добавить(Элемент);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Функция ОбработатьИзвещениеОператора(ПакетЭД, СтруктураДанныхПодписей, СтруктураДанных, СоответствиеФайлПараметры)
	
	ДвоичныеДанныеИзвещения = СтруктураДанных.ДвоичныеДанные;
	ИмяФайлаЧтенияХМЛ = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
	ДвоичныеДанныеИзвещения.Записать(ИмяФайлаЧтенияХМЛ);
	ФайлЧтенияХМЛ = Новый Файл(ИмяФайлаЧтенияХМЛ);
	
	ЧтениеХМЛ = Новый ЧтениеXML;
	ЧтениеХМЛ.ОткрытьФайл(ИмяФайлаЧтенияХМЛ);
	
	ИдентификаторЭлектронногоДокумента = "";
	
	Пока ЧтениеХМЛ.Прочитать() Цикл
		Если ЧтениеХМЛ.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеХМЛ.ЛокальноеИмя = "ИДПодтверждения" Тогда
			ЧтениеХМЛ.Прочитать();
			ИдентификаторЭлектронногоДокумента = ЧтениеХМЛ.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ЧтениеХМЛ.Закрыть();
	
	Если Не ПустаяСтрока(ИдентификаторЭлектронногоДокумента) Тогда
		СтруктураВладельцев = ЭлектронныеДокументыСлужебный.ДобавитьПодтверждениеКЭлектроннымДокументамРодителя(
			ИмяФайлаЧтенияХМЛ, ИдентификаторЭлектронногоДокумента, Перечисления.НаправленияЭД.Исходящий, Истина);
	КонецЕсли;
	
	УдалитьФайлы(ИмяФайлаЧтенияХМЛ);
	
КонецФункции

Функция ПолучитьФайлДанныхДляОбработки(СтруктураДанных, ПапкаДляРасшифровки)
	
	ФайлДанныхОбработан = Ложь;
	Если ЗначениеЗаполнено(ПапкаДляРасшифровки) Тогда
		
		Если НайтиФайлы(ПапкаДляРасшифровки).Количество() = 0 Тогда
			СоздатьКаталог(ПапкаДляРасшифровки);
		КонецЕсли;
			
		Если НайтиФайлы(ПапкаДляРасшифровки).Количество() > 0 Тогда
			
			УдалитьФайлы(ПапкаДляРасшифровки, "*");
			
			ФайлДанных = СтруктураДанных.ДвоичныеДанные;
			Расширение = СтрЗаменить(СтруктураДанных.ИмяФайла, СтруктураДанных.ИмяФайлаБезРасширения, "");
			
			ФайлРасшифрованногоАрхива = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(Расширение);
			ФайлДанных.Записать(ФайлРасшифрованногоАрхива);
			
			Если Найти(Расширение, "zip") > 0 Тогда
				ЧтениеЗИП = Новый ЧтениеZIPФайла(ФайлРасшифрованногоАрхива);
				Попытка
					ЧтениеЗИП.ИзвлечьВсе(ПапкаДляРасшифровки);
				Исключение
					ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЧтениеЗИП, ПапкаДляРасшифровки) Тогда
						ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
					КонецЕсли;
					ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
																		   ТекстОшибки,
																		   ТекстСообщения);
					Возврат Ложь;
				КонецПопытки;
				ФайлДанныхОбработан = Истина;
			ИначеЕсли Найти(Расширение, "xml") > 0 Тогда
				ФайлДвойчныйДанных = Новый Файл(ФайлРасшифрованногоАрхива);
				КопироватьФайл(ФайлРасшифрованногоАрхива, ПапкаДляРасшифровки + ФайлДвойчныйДанных.Имя);
				ФайлДанныхОбработан = Истина;
			КонецЕсли;
			
			УдалитьФайлы(ФайлРасшифрованногоАрхива);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ФайлДанныхОбработан;
	
КонецФункции

Функция ОпределитьНаправление(СтруктураФайлаЭД)
	
	Если (СтруктураФайлаЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара)
		И СтруктураФайлаЭД.ПризнакПродавца Тогда
			Возврат Перечисления.НаправленияЭД.Исходящий;
	КонецЕсли;
	
	Возврат Перечисления.НаправленияЭД.Входящий;
	
КонецФункции

// Процедура определяет, по каким объектам ИБ не надо выполнять действия (утверждение,
// подписание, подготовка к отправке).
//
// Параметры:
//  НастройкиОбъектов - соответствие, содержит ссылки на документы ИБ, 
//                     по которым предполагается выполнение каких-либо действий с ЭД.
//  МассивНеобрабатываемыхОбъектов - массив, возвращает в вызывающую процедуру ссылки на объекты ИБ,
//                                  по которым не надо выполнять никаких действий.
//
Процедура ОпределитьНеобрабатываемыеОбъекты(НастройкиОбъектов, МассивНеобрабатываемыхОбъектов)
	
	МассивОтбора = Новый Массив;
	Для Каждого Элемент ИЗ НастройкиОбъектов Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			МассивОтбора.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияЭД.СсылкаНаОбъект,
	|	СостоянияЭД.ЭлектронныйДокумент
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СсылкаНаОбъект В(&МассивСсылок)
	|	И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)
	|			ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении)
	|				И ИСТИНА)";
	
	ИмяСчетаФактурыВыданного = ЭлектронныеДокументыПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("СчетФактураВыданныйВМетаданных");
	Если ИмяСчетаФактурыВыданного <> Неопределено Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ИСТИНА", "ИЛИ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ." + ИмяСчетаФактурыВыданного + "
		|				И (СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении)
		|					ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)
		|					ИЛИ СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Отклонен))");
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивСсылок", МассивОтбора);
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		МассивНеобрабатываемыхОбъектов.Добавить(Результат.ЭлектронныйДокумент);
		
		ТекстСообщения = НСтр("ru = 'Обработка %1.
		|Не требуется выполнения действий с электронным документом.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Результат.СсылкаНаОбъект);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСписокРасширенийСертификатов()
	
	СписокРасширений = Новый СписокЗначений;
	СписокРасширений.Добавить(".p7s");
	
	Возврат СписокРасширений;
	
КонецФункции

Функция СформироватьФайлыДляОтправки(Конверт)
	
	ФайлыЭД = ЭлектронныеДокументыСлужебный.ПолучитьВыборкуЭДПоОтбору(Новый Структура("ВладелецФайла", Конверт));
	АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог("Send", Конверт.Ссылка.УникальныйИдентификатор());
	Если НЕ ФайлыЭД = Неопределено Тогда
		Пока ФайлыЭД.Следующий() Цикл
			ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлыЭД.Ссылка);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			ДвоичныеДанные.Записать(АдресКаталога + ДанныеФайла.ИмяФайла);
		КонецЦикла;
	КонецЕсли;
	
	Возврат АдресКаталога;
	
КонецФункции

// Только для внутреннего использования
Процедура ЗаполнитьДокументИБПоЭД(СсылкаНаВладельца, СсылкаНаЭД, ДокЗаполнен =Ложь) 
	
	ИмяФайлаДопДанных = Неопределено;
	ИмяФайлаДанных = ПолучитьИмяФайлаДанныхЭД(СсылкаНаЭД);
	Если НЕ ЗначениеЗаполнено(ИмяФайлаДанных) Тогда
		Возврат;
	КонецЕсли;
	ВыборкаДопДанные = ЭлектронныеДокументыСлужебный.ВыборкаДопДанныеЭД(СсылкаНаЭД);
	Если ВыборкаДопДанные.Следующий() Тогда
		СсылкаНаЭДДопДанных = ВыборкаДопДанные.Ссылка;
		ИмяФайлаДопДанных = ПолучитьИмяФайлаДанныхЭД(СсылкаНаЭДДопДанных);
		Если НЕ ЗначениеЗаполнено(ИмяФайлаДопДанных) Тогда
			Возврат;
		КонецЕсли;
		ДопДанныеНаДиске = Новый Файл(ИмяФайлаДопДанных);
		Если НЕ ДопДанныеНаДиске.Существует() Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл данных не обнаружен: %1'"),
				ИмяФайлаДопДанных);
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ДанныеНаДиске = Новый Файл(ИмяФайлаДанных);
	Если НЕ ДанныеНаДиске.Существует() Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Файл данных не обнаружен: %1'"),
			ИмяФайлаДанных);
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВладелецЭД",     СсылкаНаВладельца);
	СтруктураПараметров.Вставить("ПолноеИмяФайла", ИмяФайлаДанных);
	Если ИмяФайлаДопДанных <> Неопределено Тогда
		СтруктураПараметров.Вставить("ФайлДопДанных", ИмяФайлаДопДанных);
	КонецЕсли;
	
	СтруктураЭД = ЭлектронныеДокументыВнутренний.РазобратьФайлДанных(СтруктураПараметров);
	ДокЗаполнен = СтруктураЭД.Загружен;
	
КонецПроцедуры

Функция ПолучитьИмяФайлаДанныхЭД(СсылкаНаЭД)
	
	ИмяФайлаДанных = "";
	ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(СсылкаНаЭД);
	Если ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);
		
		Если ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение) Тогда
			ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);
		Иначе
			ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");
		КонецЕсли;
		
		ДанныеЭД.Записать(ИмяФайла);
		
		Если Найти(ДопИнформацияПоЭД.Расширение, "zip") > 0 Тогда
			
			ЗИПЧтение = Новый ЧтениеZipФайла(ИмяФайла);
			ПапкаДляРаспаковки = ЭлектронныеДокументыСлужебный.РабочийКаталог( , СсылкаНаЭД.УникальныйИдентификатор());
			
			УдалитьФайлы(ПапкаДляРаспаковки, "*.*");
			
			Попытка
				ЗипЧтение.ИзвлечьВсе(ПапкаДляРаспаковки);
			Исключение
				ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				Если НЕ ЭлектронныеДокументыСлужебный.ВозможноИзвлечьФайлы(ЗипЧтение, ПапкаДляРаспаковки) Тогда
					ТекстСообщения = ЭлектронныеДокументыПовтИсп.ПолучитьСообщениеОбОшибке("006");
				КонецЕсли;
				ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Распаковка пакета ЭД'"),
																	   ТекстОшибки,
																	   ТекстСообщения);
				Возврат "";
			КонецПопытки;
			
			ФайлыАрхиваXML = НайтиФайлы(ПапкаДляРаспаковки, "*.xml");
			Для Каждого РаспакованныйФайл Из ФайлыАрхиваXML Цикл
				ИмяФайлаДанных = РаспакованныйФайл.ПолноеИмя;
			КонецЦикла;
		ИначеЕсли Найти(ДопИнформацияПоЭД.Расширение, "xml") > 0 Тогда
			ИмяФайлаДанных = ИмяФайла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяФайлаДанных;
	
КонецФункции

Функция СоответствиеДанныхПакетов(МассивПакетовЭД) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПакетЭДЭлектронныеДокументы.Ссылка КАК ПакетЭД,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент.НаправлениеЭД КАК НаправлениеЭД,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент.ВидЭД КАК ВидЭД
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	|ГДЕ
	|	ПакетЭДЭлектронныеДокументы.Ссылка В(&МассивПакетовЭД)
	|ИТОГИ ПО
	|	ПакетЭД";
	
	Запрос.УстановитьПараметр("МассивПакетовЭД", МассивПакетовЭД);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПакеты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПакеты.Следующий() Цикл
		ВыборкаЭД = ВыборкаПакеты.Выбрать();
		СоответствиеДанныхЭлектронныхДокументов = Новый Соответствие;
		Пока ВыборкаЭД.Следующий() Цикл
			СтруктураДанныхФайла = Новый Структура;
			ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ВыборкаЭД.ЭлектронныйДокумент);
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			СтруктураДанныхФайла.Вставить("ДвоичныеДанные", ДвоичныеДанные);
			СтруктураДанныхФайла.Вставить("ДанныеФайла",    ДанныеФайла);
			СтруктураДанныхФайла.Вставить("ЭтоОтправкаПодтверждения",
										  ВыборкаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий);
			ПараметрыШифрования = ЭлектронныеДокументыСлужебный.ПолучитьМассивАдресовСертификатовШифрования(
																			ВыборкаЭД.ЭлектронныйДокумент);
			СтруктураДанныхФайла.Вставить("ПараметрыШифрования", ПараметрыШифрования);
			СоответствиеДанныхЭлектронныхДокументов.Вставить(ВыборкаЭД.ЭлектронныйДокумент, СтруктураДанныхФайла);
		КонецЦикла;
		СоответствиеВозврата.Вставить(ВыборкаПакеты.ПакетЭД, СоответствиеДанныхЭлектронныхДокументов);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Подпись электронных документов

// Сохраняет результаты проверки ЭП, выполненные на клиенте
//
// Параметры:
// ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на электронный документ.
// МассивРезультатов - массив - содержит данные проверки подписей.
//
Процедура СохранитьРезультатыПроверкиПодписей(ЭД, МассивРезультатов) Экспорт
	
	ОбъектСправочник = ЭД.ПолучитьОбъект();
	
	Для Каждого Элемент Из МассивРезультатов Цикл
		СтрокаТЧ = ОбъектСправочник.ЭлектронныеЦифровыеПодписи.Получить(Элемент.НомерСтроки-1);
		СтрокаТЧ.ДатаПроверкиПодписи = ТекущаяДатаСеанса();
		СтрокаТЧ.ПодписьВерна = Элемент.Результат;
	КонецЦикла;
	
	Попытка
		ОбъектСправочник.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки
	
КонецПроцедуры

// Подписывает электронные документы определенным сертификатом криптографии.
// 
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо подписать,
//  СертификатПодписи - СертификатКриптографии, сертификат, которым необходимо подписать переданные электронные документы,
//  ПарольПользователя - Строка, пароль установки ЭЦП данным сертификатом.
//  ПараметрыСертификата - Структура, содержит реквизиты сертификата
//
Функция ПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы,
											СертификатПодписи,
											ПарольПользователя = Неопределено,
											ПараметрыСертификата = Неопределено) Экспорт
			
	Если ПарольПользователя = Неопределено И НЕ ПараметрыСертификата.ЗапомнитьПарольКСертификату Тогда
		Возврат 0;
	КонецЕсли;

	Если ПарольПользователя = Неопределено Тогда
		ПарольПользователя = ПараметрыСертификата.ПарольПользователя;
	КонецЕсли;
	
	Попытка
		МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат 0;
	КонецПопытки;
	
	МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	
	КриптоСертификат = ПолучитьСертификатПоОтпечатку(ПараметрыСертификата.Отпечаток);
	
	КоличествоПодписанныхЭД = 0;
	
	Если КриптоСертификат <> Неопределено Тогда
		
		Попытка
			МенеджерКриптографии.ПроверитьСертификат(КриптоСертификат,
													 РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		Исключение
			ТекстСообщения = ПолучитьСообщениеОбОшибке("112");
			ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'проверка сертификата на корректность'"),
											  ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
											  ТекстСообщения);
			Возврат 0;
		КонецПопыткИ;
		
		Для Каждого ТекДокумент Из ДобавленныеФайлы Цикл
			
			СтруктураДанныхПодписи = Новый Структура("Сертификат, Пароль, Комментарий", КриптоСертификат, ПарольПользователя,
				НСтр("ru = 'Подписание электронного документа'"));
			Попытка
				ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеФайла(ТекДокумент);
				ДанныеПодписи = СформироватьДанныеПодписи(МенеджерКриптографии,
														  ТекДокумент,
														  ДвоичныеДанныеФайла,
														  СтруктураДанныхПодписи);
				
				ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ТекДокумент, ДанныеПодписи);
				КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
			Исключение
				ШаблонСообщения = НСтр("ru = 'Ошибка подписи на сервере. Необходимо провести тест сертификата криптографии для: %1.
				|%2'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СертификатПодписи,
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'установка подписи ЭЦП'"),
																							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																							ТекстСообщения);
			КонецПопытки;
			
			ОпределитьСтатусыПодписей(ТекДокумент);
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат КоличествоПодписанныхЭД;
	
КонецФункции

// Заносит информацию о подписи объекта
//
// Параметры
//  ПодписываемыйОбъектСсылка  - любая ссылка / объект - в табличную часть которого будет занесена информация о ЭЦП
//  							в случае если ссылка - будет получен объект, блокировка, запись в ИБ
//  							в случае объекта за блокировку и запись отвечает вызывающий код
//  НоваяПодписьДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи
//  Отпечаток  - Строка - Base64 закодированная строка с отпечатком сертификата подписавшего
//  ДатаПодписи  - Дата - дата подписи
//  Комментарий  - Строка - комментарий подписи
//  ИмяФайлаПодписи  - Строка - имя файла подписи (не пусто только в случае если подпись добавлена из файла)
//  КомуВыданСертификат  - Строка - представление поля КомуВыдан сертификата
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ЗанестиИнформациюОПодписи(
				ПодписываемыйОбъектСсылка,
				НоваяПодписьДвоичныеДанные,
				Отпечаток,
				ДатаПодписи,
				Комментарий,
				ИмяФайлаПодписи,
				КомуВыданСертификат,
				ДвоичныеДанныеСертификата,
				УникальныйИдентификатор = Неопределено) Экспорт
	
	ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
										ПодписываемыйОбъектСсылка,
										НоваяПодписьДвоичныеДанные,
										Отпечаток,
										ДатаПодписи,
										Комментарий,
										ИмяФайлаПодписи,
										КомуВыданСертификат,
										ДвоичныеДанныеСертификата,
										УникальныйИдентификатор)

КонецПроцедуры

// Производить проверку сертификата на сервере.
//
// Параметры:
// Отпечаток - строка - отпечаток сертификата.
// Пароль - строка - пароль сертификата.
// ВыводитьТолькоОшибки - булево - указывает, что выводить нужно только сообщения об ошибках.
// Отказ - булево - истина - если произошла ошибка, иначе Ложь
//
Процедура ТестСертификатаНаСервере(Отпечаток, Пароль, ВыводитьТолькоОшибки, Отказ) Экспорт
				
	ШаблонСообщения = НСтр("ru = '%1
	|%2'");
	
	// Блок проверки установленных криптосредств на компьютере.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка средства криптографии на сервере.'");
	Попытка
		МенеджерКриптографии = ПолучитьМенеджерКриптографии();
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ПолучитьСообщениеОбОшибке("110");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонРезультата,
								ТекстОшибки,
								КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		МенеджерКриптографии = Неопределено;
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Критичная ошибка - дальше тесты не проводим.
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Блок проверки наличия сертификата в хранилище сертификатов компьютера.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка наличия сертификата на сервере.'");
	
	Сертификат = ПолучитьСертификатПоОтпечатку(Отпечаток);
	Если Сертификат <> Неопределено Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Иначе
		РезультатТеста = ПолучитьСообщениеОбОшибке("111");
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Критичная ошибка - дальше тесты не проводим, будет ошибка платформы.
	Если Сертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	
	// Блок проверки сертификата на корректность.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка реквизитов сертификата.'");
	Попытка
		МенеджерКриптографии.ПроверитьСертификат(
									Сертификат,
									РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ПолучитьСообщениеОбОшибке("112");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонРезультата,
									ТекстОшибки,
									КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Блок проверки шифрования/расшифрования.
	ОтпечатокДвоичныеДанные = Base64Значение(Отпечаток);
	
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций шифрования/расшифровки на сервере.'");
	ДвоичныеДанные = МенеджерКриптографии.Зашифровать(ОтпечатокДвоичныеДанные, Сертификат);
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		РезультатТеста = ПолучитьСообщениеОбОшибке("113");
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения,
									ОписаниеТеста,
									РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Блок проверки ЭЦП.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций формирования/проверки ЭЦП на сервере.'");
	Попытка
		ДвоичныеДанные = МенеджерКриптографии.Подписать(ОтпечатокДвоичныеДанные, Сертификат);
		ЭлектронныеДокументыСлужебный.ПроверитьПодпись(МенеджерКриптографии, ОтпечатокДвоичныеДанные, ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ПолучитьСообщениеОбОшибке("114");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонРезультата,
									ТекстОшибки,
									КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения,
									ОписаниеТеста,
									РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операции с криптографией

// Создает на сервере менеджер криптографии.  Пароль не устанавливается
//
// Возвращаемое значение:
//   МенеджерКриптографии  - менеджер криптографии
Функция ПолучитьМенеджерКриптографии(Отказ = Ложь) Экспорт
	
	Отказ = Ложь;
	
	ПерсональныеНастройкиРаботыСЭЦП = ЭлектроннаяЦифроваяПодпись.ПолучитьПерсональныеНастройкиРаботыСЭЦПСервер();
	ПровайдерЭЦП = ПерсональныеНастройкиРаботыСЭЦП.ПровайдерЭЦП;
	ПутьМодуляКриптографии = ПерсональныеНастройкиРаботыСЭЦП.ПутьМодуляКриптографии;
	ТипПровайдераЭЦП = ПерсональныеНастройкиРаботыСЭЦП.ТипПровайдераЭЦП;
	
	Если ПустаяСтрока(ПровайдерЭЦП) Тогда
		ВызватьИсключение
			НСтр("ru = 'Не указан провайдер ЭЦП.
			           |В настройках криптографии укажите провайдера ЭЦП,
			           |тип провайдера, алгоритмы подписи и хеширования.'");
	КонецЕсли;
	
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
	
	МенеджерКриптографии.АлгоритмПодписи = ПерсональныеНастройкиРаботыСЭЦП.АлгоритмПодписи;
	МенеджерКриптографии.АлгоритмХеширования = ПерсональныеНастройкиРаботыСЭЦП.АлгоритмХеширования;
	МенеджерКриптографии.АлгоритмШифрования = ПерсональныеНастройкиРаботыСЭЦП.АлгоритмШифрования;
	
	Возврат МенеджерКриптографии;
	
КонецФункции

// Возвращает расшифрованные двоичные данные.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные, данные, которое необходимо зашифровать
//  Пароль - Строка, пароль для расшифровки
//
// Возвращаемое значение:
//  ДвоичныеДанные или неопределено - зашифрованные двоичные данные или Неопределено в случае ошибки.
//
Функция РасшифрованныеДанные(ДвоичныеДанные, Пароль) Экспорт
	
	Попытка
		МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	// Метод расшифровки генерирует исключение в случае ошибки.
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("113");
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
													НСтр("ru = 'расшифровка пакета ЭД'"),
													ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
													ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;

	Возврат РасшифрованныеДвоичныеДанные;
	
КонецФункции

// Формирует данные подписи объекта
//
// Параметры
//  МенеджерКриптографии  - МенеджерКриптографии - менеджер криптографии
//  ОбъектДляПодписиСсылка  - любая ссылка - ссылка на подписываемый объект
//  ДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи
//  СтруктураПараметровПодписи  - Структура - информация о подписи - выбранный сертификат, пароль, комментарий
//
// Возвращаемое значение:
//   Структура   - данные для занесения в табличную часть ЭЦП
Функция СформироватьДанныеПодписи(
				МенеджерКриптографии,
				ОбъектДляПодписиСсылка,
				ДвоичныеДанные,
				СтруктураПараметровПодписи) Экспорт
	
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровПодписи.Пароль;
	ДатаПодписи = Дата('00010101');
	
	НоваяПодписьДвоичныеДанные = МенеджерКриптографии.Подписать(ДвоичныеДанные, СтруктураПараметровПодписи.Сертификат);
	
	Отпечаток = Base64Строка(СтруктураПараметровПодписи.Сертификат.Отпечаток);
	КомуВыданСертификат = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(СтруктураПараметровПодписи.Сертификат.Субъект);
	ДвоичныеДанныеСертификата = СтруктураПараметровПодписи.Сертификат.Выгрузить();
	
	ДанныеПодписи = Новый Структура("ОбъектСсылка, НоваяПодписьДвоичныеДанные, Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, КомуВыданСертификат, АдресФайла, ДвоичныеДанныеСертификата",
							ОбъектДляПодписиСсылка,
							НоваяПодписьДвоичныеДанные,
							Отпечаток,
							ДатаПодписи,
							СтруктураПараметровПодписи.Комментарий,
							"", // ИмяФайлаПодписи
							КомуВыданСертификат,
							"", // АдресФайла
							ДвоичныеДанныеСертификата);
		
	Возврат ДанныеПодписи;
	
КонецФункции

//  Получает массив структур сертификатов для показа в диалоге выбора сертификатов для подписи или шифрования
//
// Параметры
//  ТолькоЛичные  - Булево - если Ложь, то берутся также и сертификаты получателей 
//
// Возвращаемое значение:
//   Массив  - массив структур с полями сертификата
Функция ПолучитьМассивСтруктурСертификатов(знач ТолькоЛичные) Экспорт
	
	МассивСтруктурСертификатов = Новый Массив;
	
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат МассивСтруктурСертификатов;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДата(); // Используется для выявления истекших сертификатов, которые хранятся на клиентском компьютере.
	
	Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	СертификатыХранилища = Хранилище.ПолучитьВсе();
	
	МассивСтрокОтпечатков = Новый Массив;
	
	Для Каждого Сертификат Из СертификатыХранилища Цикл
		Если Сертификат.ДатаОкончания < ТекущаяДата Тогда
			Продолжить; // Пропуск истекших сертификатов.
		КонецЕсли;
		
		СтруктураСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
		Если СтруктураСертификата <> Неопределено Тогда
			СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
			
			Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
				МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
				МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТолькоЛичные Тогда
		Хранилище = МенеджерКриптографии.ПолучитьХранилищеСертификатов(ТипХранилищаСертификатовКриптографии.СертификатыПолучателей);
		СертификатыХранилища = Хранилище.ПолучитьВсе();
		
		Для Каждого Сертификат Из СертификатыХранилища Цикл
			Если Сертификат.ДатаОкончания < ТекущаяДата Тогда 
				Продолжить; // Пропуск истекших сертификатов.
			КонецЕсли;
			
			СтруктураСертификата = ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
			Если СтруктураСертификата <> Неопределено Тогда
				СтрокаОтпечатка = Base64Строка(Сертификат.Отпечаток);
				
				Если МассивСтрокОтпечатков.Найти(СтрокаОтпечатка) = Неопределено Тогда
					МассивСтрокОтпечатков.Добавить(СтрокаОтпечатка);
					МассивСтруктурСертификатов.Добавить(СтруктураСертификата);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	
	Возврат МассивСтруктурСертификатов;
	
КонецФункции

// Проверяет наличие на сервере средств для работы с криптографией
//
// Возвращаемое значение:
//   Булево  - истина, если менеджер криптографии создан успешно
Функция ЕстьКриптосредстваНаСервере() Экспорт
	
	Отказ = Ложь;
	
	Попытка
		МенеджерКриптографии = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМенеджерКриптографии(Отказ);
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("110");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецПопытки;
	
	Возврат НЕ Отказ;

КонецФункции

// Заполняет структуру полями сертификата
//
// Параметры
//  Отпечаток  - Строка - base64 кодированный отпечаток сертификата 
//
// Возвращаемое значение:
//   Структура  - структура с полями сертификата
Функция ЗаполнитьСтруктуруСертификатаПоОтпечатку(Отпечаток) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	Отказ = Ложь;
	МенеджерКриптографии = ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Если Сертификат = Неопределено Тогда
		Предупреждение = НСтр("ru = 'Сертификат не найден'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Предупреждение);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЭлектроннаяЦифроваяПодписьКлиентСервер.ЗаполнитьСтруктуруСертификата(Сертификат);
	
КонецФункции

// Находит сертификат по строке отпечатка
//
// Параметры
//  Отпечаток  - Строка - base64 кодированный отпечаток сертификата 
//  ТолькоВЛичномХранилище  - Булево - вести поиск только в личном хранилище
//
// Возвращаемое значение:
//   СертификатКриптографии  - сертификат криптографии 
Функция ПолучитьСертификатПоОтпечатку(Отпечаток, ТолькоВЛичномХранилище = Ложь) Экспорт
	
	ДвоичныеДанныеОтпечатка = Base64Значение(Отпечаток);
	
	Отказ = Ложь;
	МенеджерКриптографии = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьМенеджерКриптографии(Отказ);
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищеСертификатов = Неопределено;
	Если ТолькоВЛичномХранилище Тогда
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов(
															ТипХранилищаСертификатовКриптографии.ПерсональныеСертификаты);
	Иначе	
		ХранилищеСертификатов = МенеджерКриптографии.ПолучитьХранилищеСертификатов();
	КонецЕсли;
	
	Сертификат = ХранилищеСертификатов.НайтиПоОтпечатку(ДвоичныеДанныеОтпечатка);
	
	Возврат Сертификат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие

// Преобразует двоичные данные в строку на сервере.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные
//
// Возвращаемое значение:
//  <Строка> - Строка в кодировке UTF8
//
Функция СтрокаИзДвоичныхДанных(ДвоичныеДанные) Экспорт
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ВремФайл);
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ВремФайл, КодировкаТекста.UTF8);
	УдалитьФайлы(ВремФайл);
	Результат = ТекстовыйДокумент.ПолучитьТекст();
	Возврат Результат;
	
КонецФункции

// Создает присоедиенные файлы пакетов, зашифрованных на клиенте
//
// Параметры:
// СоответствиеДанных - соответствие - содержит данные по пакетам и зашифрованным файлам
// СоответствиеПаролейДляЭДО - Соответвие - данные о паролях
//
Процедура СохранитьИОтправитьЗашифрованныеДанные(
												СоответствиеДанных,
												СтруктураПаролейИМаркеров,
												КолОтправленных) Экспорт
												
	МассивПЭД = Новый Массив;
	Для Каждого Элемент из СоответствиеДанных Цикл
		ЭлектронныеДокументыСлужебный.СформироватьЭДПрисоединенныйФайлПакета(Элемент.Ключ);
		МассивПЭД.Добавить(Элемент.Ключ);
	КонецЦикла;
		
	Если СоответствиеДанных.Количество() > 0 И ЭлектронныеДокументыСлужебный.НемедленнаяОтправкаЭД() Тогда
		КолОтправленных = ОтправкаПакетовЭД(МассивПЭД, СтруктураПаролейИМаркеров);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗашифрованныеМаркеры(СоответствиеПаролейДляЭДО) Экспорт
	
	Возврат ЭлектронныеДокументыВнутренний.ЗашифрованныеМаркеры(СоответствиеПаролейДляЭДО);
	
КонецФункции

Функция ЗашифрованныйМаркер(СтруктураПараметровЗапросаМаркера) Экспорт
	
	Соединение = ЭлектронныеДокументыВнутренний.ПолучитьСоединение();
	Возврат ЭлектронныеДокументыВнутренний.ПолучитьМаркерОЭДО(СтруктураПараметровЗапросаМаркера, Соединение, , Ложь)
	
КонецФункции

// Определяет, где нужно расшифровывать маркер оператора ЭДО.
//
// Возвращаемое значение:
//  Булево - Истина, если расшифровка происходит на сервере или Ложь - если на клиенте
//
Функция ВыполнятьАвторизациюНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.КонтекстАвторизации.Получить() = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаСервере");
	
КонецФункции

// Определяет, где нужно проводить криптооперации.
//
// Возвращаемое значение:
//  Булево - Истина, если криптография настроена на сервере или Ложь - если на клиенте
//
Функция ВыполнятьКриптооперацииНаСервере() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.КонтекстКриптографии.Получить() = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаСервере");
	
КонецФункции

// Предназначения для возврата на клиента двоичных данных ЭД, установленных подписей и сертификатов для дальнейшей
// проверки валидности подписей на клиенте
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на электронный документ
//
// Возвращаемое значение:
//  Структура или неопределено - данные электронного документа, Неопределно - если нет подписей
//
Функция СтруктураСодержимогоЭД(ЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.НомерСтроки,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Сертификат,
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Подпись
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка = &ЭД";
	
	Запрос.УстановитьПараметр("ЭД", ЭД);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	СтруктураВозврата = Новый Структура;
	МассивПодписей = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураПодписей = Новый Структура;
		СтруктураПодписей.Вставить("НомерСтроки", Выборка.НомерСтроки);
		СтруктураПодписей.Вставить("Сертификат",  Выборка.Сертификат.Получить());
		СтруктураПодписей.Вставить("Подпись",     Выборка.Подпись.Получить());
		МассивПодписей.Добавить(СтруктураПодписей);
	КонецЦикла;
	ДанныеЭД = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД);
	СтруктураВозврата.Вставить("ДанныеЭД", ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(ЭД));
	СтруктураВозврата.Вставить("Подписи",  МассивПодписей);
	
	Возврат СтруктураВозврата;
	
КонецФункции
 