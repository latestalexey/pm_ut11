////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
// Серверные процедуры и функции общего назначения.
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает признак наличия в конфигурации общих реквизитов-разделителей.
//
// Возвращаемое значение:
// Булево.
//
Функция ЭтоРазделеннаяКонфигурация() Экспорт
	
	ЕстьРазделители = Ложь;
	Для каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
			ЕстьРазделители = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьРазделители;
	
КонецФункции

// Возвращает список полных имен всех объектов метаданных, использующихся в общих реквизитах-разделителях.
// Для последовательностей и журналов документов определяет разделенность по входящим документам: любому из.
//
// Возвращаемое значение:
// ФиксированноеСоответствие.
//
Функция РазделенныеОбъектыМетаданных() Экспорт
	
	Результат = Новый Соответствие;
	
	// I. Перебрать состав всех общих реквизитов.
	
	Для Каждого МетаданныеОбщегоРеквизита Из Метаданные.ОбщиеРеквизиты Цикл
		Если МетаданныеОбщегоРеквизита.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
			СоставОбщегоРеквизита = ОбщегоНазначенияПовтИсп.СоставОбщегоРеквизита(МетаданныеОбщегоРеквизита.Имя);
			
			Для Каждого ЭлементСостава Из СоставОбщегоРеквизита Цикл
				
				Если ОбщегоНазначения.ЭлементСоставаОбщегоРеквизитаИспользуется(ЭлементСостава, МетаданныеОбщегоРеквизита) Тогда
					Результат.Вставить(ЭлементСостава.Метаданные.ПолноеИмя(), Истина);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	// II. Для последовательностей и журналов определять разделенность по входящим документам.
	
	// 1) Последовательности. Перебор с проверкой первого входящего документа. Если документов нет, считаем разделенной.
	Для Каждого МетаданныеПоследовательности Из Метаданные.Последовательности Цикл
		Если МетаданныеПоследовательности.Документы.Количество() = 0 Тогда
			ШаблонСообщения = НСтр("ru = 'В последовательность %1 не включено ни одного документа.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, МетаданныеПоследовательности.Имя);
			ЗаписьЖурналаРегистрации("ОбщегоНазначенияПовтИсп.РазделенныеОбъектыМетаданных", УровеньЖурналаРегистрации.Ошибка, 
				МетаданныеПоследовательности, , ТекстСообщения);
			Результат.Вставить(МетаданныеПоследовательности.ПолноеИмя(), Истина);
		Иначе	
			Для Каждого МетаданныеДокумента Из МетаданныеПоследовательности.Документы Цикл
				Если Результат.Получить(МетаданныеДокумента.ПолноеИмя()) <> Неопределено Тогда
					Результат.Вставить(МетаданныеПоследовательности.ПолноеИмя(), Истина);
				КонецЕсли;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// 2) Журналы. Перебор с проверкой первого входящего документа. Если документов нет, считаем разделенным.
	Для Каждого МетаданныеЖурналаДокументов Из Метаданные.ЖурналыДокументов Цикл
		Если МетаданныеЖурналаДокументов.РегистрируемыеДокументы.Количество() = 0 Тогда
			ШаблонСообщения = НСтр("ru = 'В журнал %1 не включено ни одного документа.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, МетаданныеЖурналаДокументов.Имя);
			ЗаписьЖурналаРегистрации("ОбщегоНазначенияПовтИсп.РазделенныеОбъектыМетаданных", УровеньЖурналаРегистрации.Ошибка, 
				МетаданныеЖурналаДокументов, , ТекстСообщения);
			Результат.Вставить(МетаданныеЖурналаДокументов.ПолноеИмя(), Истина);
		Иначе
			Для Каждого МетаданныеДокумента Из МетаданныеЖурналаДокументов.РегистрируемыеДокументы Цикл
				Если Результат.Получить(МетаданныеДокумента.ПолноеИмя()) <> Неопределено Тогда
					Результат.Вставить(МетаданныеЖурналаДокументов.ПолноеИмя(), Истина);
				КонецЕсли;
				Прервать;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции

// Возвращает состав общего реквизита с заданным именем.
//
// Параметры:
// Имя - Строка - Имя общего реквизита.
//
// Возвращаемое значение:
// СоставОбщегоРеквизита.
//
Функция СоставОбщегоРеквизита(Знач Имя) Экспорт
	
	Возврат Метаданные.ОбщиеРеквизиты[Имя].Состав;
	
КонецФункции

// Возвращает признак того, что объект метаданных используется в общих реквизитах-разделителях.
//
// Параметры:
// ИмяОбъектаМетаданных - Строка.
//
// Возвращаемое значение:
// Булево.
//
Функция ЭтоРазделенныйОбъектМетаданных(Знач ИмяОбъектаМетаданных) Экспорт
	
	Возврат ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(ИмяОбъектаМетаданных);
	
КонецФункции

// Возвращает признак включения условного разделения.
// В случае вызова в неразделенной конфигурации возвращает Ложь.
//
Функция РазделениеВключено() Экспорт
	
	Возврат ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация() И ПолучитьФункциональнуюОпцию("РаботаВМоделиСервиса");
	
КонецФункции

// Возвращает признак возможности обращения к разделенным данным из текущего сеанса.
// В случае вызова в неразделенной конфигурации возвращает Истина.
//
// Возвращаемое значение:
// Булево.
//
Функция ДоступноИспользованиеРазделенныхДанных() Экспорт
	
	Возврат НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() ИЛИ ОбщегоНазначения.ИспользованиеРазделителяСеанса();
	
КонецФункции

// Возвращает объект ПреобразованиеXSL созданный из общего макета с переданным
// именем.
//
// Параметры:
// ИмяОбщегоМакет - Строка - имя общего макета типа ДвоичныеДанные содержащего
// файл преобразования XSL.
//
// Возвращаемое значение:
// ПреобразованиеXSL - объект ПреобразованиеXSL.
//
Функция ПолучитьПреобразованиеXSLИзОбщегоМакета(Знач ИмяОбщегоМакета) Экспорт
	
	ДанныеМакета = ПолучитьОбщийМакет(ИмяОбщегоМакета);
	ИмяФайлаПреобразования = ПолучитьИмяВременногоФайла("xsl");
	ДанныеМакета.Записать(ИмяФайлаПреобразования);
	
	Преобразование = Новый ПреобразованиеXSL;
	Преобразование.ЗагрузитьИзФайла(ИмяФайлаПреобразования);
	
	Попытка
		УдалитьФайлы(ИмяФайлаПреобразования);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Получение XSL'"), УровеньЖурналаРегистрации.Ошибка, , , 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Преобразование;
	
КонецФункции

// Определяет, сеанс запущен с разделителями или без.
//
// Возвращаемое значение:
// Булево.
//
Функция СеансЗапущенБезРазделителей() Экспорт
	
	Возврат ПользователиИнформационнойБазы.ТекущийПользователь().РазделениеДанных.Количество() = 0;
	
КонецФункции

// Возвращает тип платформы сервера.
//
// Возвращаемое значение:
// ТипПлатформы; Неопределено.
//
Функция ТипПлатформыСервера(ВызовСервера = Истина) Экспорт
	
#Если Сервер Тогда
	СистемнаяИнфо = Новый СистемнаяИнформация;
	Возврат СистемнаяИнфо.ТипПлатформы;
#Иначе
	Если ВызовСервера Тогда
		ТипПлатформыСервераСтрокой = СтандартныеПодсистемыВызовСервера.ТипПлатформыСервераСтрокой();
		
		Если ТипПлатформыСервераСтрокой = "Linux_x86" Тогда
			Возврат ТипПлатформы.Linux_x86;
			
		ИначеЕсли ТипПлатформыСервераСтрокой = "Linux_x86_64" Тогда
			Возврат ТипПлатформы.Linux_x86_64;
			
		ИначеЕсли ТипПлатформыСервераСтрокой = "Windows_x86" Тогда
			Возврат ТипПлатформы.Windows_x86;
			
		ИначеЕсли ТипПлатформыСервераСтрокой = "Windows_x86_64" Тогда
			Возврат ТипПлатформы.Windows_x86_64;
		КонецЕсли;
		
		Возврат Неопределено;
	Иначе
		СистемнаяИнфо = Новый СистемнаяИнформация;
		Возврат СистемнаяИнфо.ТипПлатформы;
	КонецЕсли;
#КонецЕсли
	
КонецФункции

// Функция получает цвет стиля по имени элемента стиля
//
// Параметры:
// ИмяЦветаСтиля - Строка -  Имя элемента стиля.
//
// Возвращаемое значение:
// Цвет.
//
Функция ЦветСтиля(ИмяЦветаСтиля) Экспорт
	
	Возврат ЦветаСтиля[ИмяЦветаСтиля];
	
КонецФункции

// Функция получает шрифт стиля по имени элемента стиля.
//
// Параметры:
// ИмяШрифтаСтиля - Строка - Имя шрифта стиля.
//
// Возвращаемое значение:
// Шрифт.
//
Функция ШрифтСтиля(ИмяШрифтаСтиля) Экспорт
	
	Возврат ШрифтыСтиля[ИмяШрифтаСтиля];
	
КонецФункции

// Определение режима работы для панелей настроек программы.
//
// В панелях настроек включены 4 интерфейса:
//  - Для администратора сервиса в области данных абонента (АС)
//  - Для администратора абонента (АА)
//  - Для администратора локального решения в клиент-серверном режиме (ЛКС)
//  - Для администратора локального решения в файловом режиме (ЛФ)
//
// Интерфейсы АС и АА разрезаются при помощи скрытия групп и элементов формы
//  для всех ролей, кроме роли "АдминистраторСистемы".
//
// Администратор сервиса, выполнивший вход в область данных,
//  должен видеть те же настройки что и администратор абонента
//  вместе с настройками сервиса (неразделенными).
//
Функция РежимРаботыПрограммы() Экспорт
	РежимРаботы = Новый Структура;
	
	// Права пользователя
	РежимРаботы.Вставить("ЭтоАдминистраторПрограммы", Пользователи.ЭтоПолноправныйПользователь()); // АА, АС, ЛКС, ЛФ
	РежимРаботы.Вставить("ЭтоАдминистраторСистемы",   Пользователи.ЭтоПолноправныйПользователь(, Истина)); // АС, ЛКС, ЛФ
	
	// Общие настройки
	РежимРаботы.Вставить("МодельСервиса", Ложь);   // АС, АА
	РежимРаботы.Вставить("Локальный", Ложь);       // ЛКС, ЛФ
	РежимРаботы.Вставить("Файловый", Ложь);        // АС, АА, ЛФ
	РежимРаботы.Вставить("КлиентСерверный", Ложь); // АС, АА, ЛКС
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		РежимРаботы.МодельСервиса = Истина;
	Иначе
		РежимРаботы.Локальный = Истина;
	КонецЕсли;
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		РежимРаботы.Файловый = Истина;
	Иначе
		РежимРаботы.КлиентСерверный = Истина;
	КонецЕсли;
	
	// Точные настройки
	РежимРаботы.Вставить("АдминистраторСервиса",
		РежимРаботы.МодельСервиса И РежимРаботы.ЭтоАдминистраторСистемы
	); // АС
	РежимРаботы.Вставить("АдминистраторАбонента",
		РежимРаботы.МодельСервиса И НЕ РежимРаботы.ЭтоАдминистраторСистемы И РежимРаботы.ЭтоАдминистраторПрограммы
	); // АА
	РежимРаботы.Вставить("ЛокальныйФайловый",
		РежимРаботы.Локальный И РежимРаботы.Файловый
	); // ЛФ
	РежимРаботы.Вставить("ЛокальныйКлиентСерверный",
		РежимРаботы.Локальный И РежимРаботы.КлиентСерверный
	); // ЛКС
	
	Возврат Новый ФиксированнаяСтруктура(РежимРаботы);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает имя каталога временных файлов.
//
// Возвращаемое значение:
//	Строка - путь к каталогу временных файлов.
//
Функция КаталогВременногоХранилищаФайлов() Экспорт
	
	// Если файловая база, то возвращается КаталогВременныхФайлов.
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда 
		Возврат СокрЛП(КаталогВременныхФайлов());
	КонецЕсли;
	
	ОбщийТипПлатформы = "Windows";
	
	ТипПлатформыСервера = ОбщегоНазначенияПовтИсп.ТипПлатформыСервера();
	
	Если    ТипПлатформыСервера = ТипПлатформы.Windows_x86
		ИЛИ ТипПлатформыСервера = ТипПлатформы.Windows_x86_64 Тогда
		
		Результат         = Константы.КаталогВременныхФайловДляWindows.Получить();
		
	ИначеЕсли ТипПлатформыСервера = ТипПлатформы.Linux_x86
		ИЛИ   ТипПлатформыСервера = ТипПлатформы.Linux_x86_64 Тогда
		
		Результат         = Константы.КаталогВременныхФайловДляLinux.Получить();
		ОбщийТипПлатформы = "Linux";
		
	Иначе
		
		Результат         = Константы.КаталогВременныхФайловДляWindows.Получить();
		
	КонецЕсли;
	
	ПредставлениеКонстанты = ?(ОбщийТипПлатформы = "Linux", 
		Метаданные.Константы.КаталогВременныхФайловДляLinux.Представление(),
		Метаданные.Константы.КаталогВременныхФайловДляWindows.Представление());
	
	Если ПустаяСтрока(Результат) Тогда
		
		Результат = СокрЛП(КаталогВременныхФайлов());
		
	Иначе
		
		Результат = СокрЛП(Результат);
		
		// Проверка существования каталога
		Каталог = Новый Файл(Результат);
		
		Если Не Каталог.Существует() Тогда
			
			ШаблонСообщения = НСтр("ru = 'Каталог временных файлов не существует.
					|Необходимо убедиться, что в форме настройки программы задано правильное значение константы
					|""%1"".'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПредставлениеКонстанты);
			ВызватьИсключение(ТекстСообщения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция получает данные кеша версий из ресурса типа ХранилищеЗначения регистра КэшПрограммныхИнтерфейсов.
//
// Параметры:
// Идентификатор - Строка - идентификатор записи кэша
// ТипДанных - ПеречислениеСсылка.ТипыДанныхКэшаПрограммныхИнтерфейсов.
// ПараметрыПолучения - Строка - массив параметров сериализованный в XML для передачи в метод
//  обновления кэша
// ВозвращатьУстаревшиеДанные - Булево - флаг определяющий необходимость ожидания обновления
//  данных в кэше перед возвратом значения, в случае обнаружения факта их устаревания.
//  Истина - всегда использовать данные из кэша, если они там есть. Ложь - ожидать
//  обновления данных кэша, в случае обнаружения факта устаревания данных.
//
// Возвращаемое значение:
// Произвольный.
//
Функция ПолучитьДанныеКэшаВерсий(Знач Идентификатор, Знач ТипДанных, 
		Знач ПараметрыПолучения, Знач ИспользоватьУстаревшиеДанные = Истина) Экспорт
	
	ПараметрыПолучения = ОбщегоНазначения.ЗначениеИзСтрокиXML(ПараметрыПолучения);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КэшПрограммныхИнтерфейсов.ДатаОбновления КАК ДатаОбновления,
	|	КэшПрограммныхИнтерфейсов.Данные КАК Данные,
	|	КэшПрограммныхИнтерфейсов.ТипДанных КАК ТипДанных
	|ИЗ
	|	РегистрСведений.КэшПрограммныхИнтерфейсов КАК КэшПрограммныхИнтерфейсов
	|ГДЕ
	|	КэшПрограммныхИнтерфейсов.Идентификатор = &Идентификатор
	|	И КэшПрограммныхИнтерфейсов.ТипДанных = &ТипДанных";
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ТипДанных", ТипДанных);
	
	НачатьТранзакцию();
	Попытка
		// Не устанавливаем управляемую блокировку что бы другие сеансы могли изменять значение пока эта транзакция активна
		Результат = Запрос.Выполнить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ИмяМетодаЗадания = "ОбщегоНазначения.ОбновитьДанныеКэшаВерсий";
	КлючЗадания = Идентификатор + "|" + XMLСтрока(ТипДанных);
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(Идентификатор);
	ПараметрыЗадания.Добавить(ТипДанных);
	ПараметрыЗадания.Добавить(ПараметрыПолучения);
	
	ОтборЗаданий = Новый Структура;
	ОтборЗаданий.Вставить("ИмяМетода", ИмяМетодаЗадания);
	ОтборЗаданий.Вставить("Ключ", КлючЗадания);
	ОтборЗаданий.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	Выборка = Неопределено;
	
	Если Результат.Пустой() Тогда
		
		Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			ОбщегоНазначения.ОбновитьДанныеКэшаВерсий(Идентификатор, ТипДанных, ПараметрыПолучения);
		Иначе
			Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
			Если Задания.Количество() = 0 Тогда
				// Запустим новое
				Задание = ФоновыеЗадания.Выполнить(ИмяМетодаЗадания, ПараметрыЗадания, КлючЗадания);
			Иначе
				Задание = Задания[0];
			КонецЕсли;
			
			Попытка
				// Дождемся завершения
				Задание.ОжидатьЗавершения();
			Исключение
				Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Задание.УникальныйИдентификатор);
				Если Задание.ИнформацияОбОшибке <> Неопределено Тогда
					ЗаписьЖурналаРегистрации("ОбновлениеКэшаВерсий", УровеньЖурналаРегистрации.Ошибка, , ,
						ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке));
					ВызватьИсключение(КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке));
				Иначе
					ЗаписьЖурналаРегистрации("ОбновлениеКэшаВерсий", УровеньЖурналаРегистрации.Ошибка, , ,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ВызватьИсключение;
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			Результат = Запрос.Выполнить();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
		
		Если Результат.Пустой() Тогда
			ШаблонСообщения = НСтр("ru = 'Ошибка при обновлении данных кэша версий. 
				|Идентификатор записи: %1
				|ТипДанных информации: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, Идентификатор, ТипДанных);
				
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если ОбщегоНазначения.ЗаписьКэшаВерсийУстарела(Выборка) Тогда
			Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
				ОбщегоНазначения.ОбновитьДанныеКэшаВерсий(Идентификатор, ТипДанных, ПараметрыПолучения);
				Выборка = Неопределено;
			Иначе
				// Данные устарели
				Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(ОтборЗаданий);
				Если Задания.Количество() = 0 Тогда
					// Запустим новое
					Задание = ФоновыеЗадания.Выполнить(ИмяМетодаЗадания, ПараметрыЗадания, КлючЗадания);
				Иначе
					Задание = Задания[0];
				КонецЕсли;
				
				Если НЕ ИспользоватьУстаревшиеДанные Тогда
					Попытка
						// Дождемся завершения
						Задание.ОжидатьЗавершения();
					Исключение
						Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(Задание.УникальныйИдентификатор);
						Если Задание.ИнформацияОбОшибке <> Неопределено Тогда
							ЗаписьЖурналаРегистрации("ОбновлениеКэшаВерсий", УровеньЖурналаРегистрации.Ошибка, , ,
								ПодробноеПредставлениеОшибки(Задание.ИнформацияОбОшибке));
							ВызватьИсключение(КраткоеПредставлениеОшибки(Задание.ИнформацияОбОшибке));
						Иначе
							ЗаписьЖурналаРегистрации("ОбновлениеКэшаВерсий", УровеньЖурналаРегистрации.Ошибка, , ,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							ВызватьИсключение;
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Выборка = Неопределено Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
	КонецЕсли;
		
	Возврат Выборка.Данные.Получить();
	
КонецФункции

// Функция возвращает объект WSОпределения созданный с переданными параметрами.
//
// Параметры
//  АдресWSDL - Строка - месторасположение wsdl
//  ИмяПользователя - Строка - имя пользователя для входа на сервер
//  Пароль - Строка - пароль пользователя
//
// Примечание: при получении определения используется кэш, обновление которого осуществляется
//  при смене версии конфигурации. Если для целей отладки требуется обновить
//  значения в кэше, раньше этого времени, следует удалить из регистра сведений 
//  КэшПрограммныхИнтерфейсов соответствующие записи.
//
Функция WSОпределения(Знач АдресWSDL, Знач ИмяПользователя, Знач Пароль) Экспорт
	
	Возврат ОбщегоНазначения.WSОпределения(АдресWSDL, ИмяПользователя, Пароль);
	
КонецФункции

// Функция возвращает объект WSПрокси созданный с переданными параметрами.
//
// Параметры соответствуют конструктору объекта WSПрокси.
//
Функция WSПрокси(Знач АдресWSDL, Знач URIПространстваИмен, Знач ИмяСервиса,
	Знач ИмяТочкиПодключения = "", Знач ИмяПользователя, Знач Пароль, Знач Таймаут = Неопределено) Экспорт
	
	Возврат ОбщегоНазначения.ВнутренняяWSПрокси(АдресWSDL, URIПространстваИмен, ИмяСервиса, 
		ИмяТочкиПодключения, ИмяПользователя, Пароль, Таймаут);
	
КонецФункции

