////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Функции получения значений по умолчанию.

// Возвращает банковский счет контрагента, если он один в ИБ
// Если переданный в качестве параметра банковский счет уже заполнен - возвращает его.
// Если банковский счет не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе банковский счет. Если банковский счет
// в базе не один - возвращает пустую ссылку на банковский счет
// Возвращает банковский счет, только если переданная форма оплаты безналичная или Неопределено
//
// Параметры:
// Контрагент     - СправочникСсылка.Контрагенты - Контрагент, для которой необходимо получить счет
// ФормаОплаты    - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
// получения банковского счета
// БанковскийСчет - СправочникСсылка.БанковскиеСчетаКонтрагентов - Банковский счет, который нужно заполнить
//
// Возвращаемое значение:
// СправочникСсылка.БанковскиеСчетаКонтрагентов
//
Функция ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Знач Контрагент, Знач ФормаОплаты = Неопределено, Знач БанковскийСчет = Неопределено) Экспорт
	
	Если (ФормаОплаты = Неопределено Или ФормаОплаты = Перечисления.ФормыОплаты.Безналичная)
		И Не ЗначениеЗаполнено(БанковскийСчет) И (ЗначениеЗаполнено(Контрагент)) Тогда
		
		Возврат Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Контрагент);
		
	Иначе
		Возврат БанковскийСчет;
	КонецЕсли;
	
КонецФункции // ПолучитьБанковскийСчетКонтрагентаПоУмолчанию()

// Возвращает банковский счет организации, если он один в ИБ
// Если переданный в качестве параметра банковский счет уже заполнен - возвращает его.
// Если банковский счет не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе банковский счет. Если банковский счет
// в базе не один - возвращает пустую ссылку на банковский счет
// Возвращает банковский счет, только если переданная форма оплаты безналичная или Неопределено
//
// Параметры:
// Организация    - СправочникСсылка.Организации - Организация, для которой необходимо получить счет
// ФормаОплаты    - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
// получения банковского счета
// БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет, который нужно заполнить
//
// Возвращаемое значение:
// СправочникСсылка.БанковскиеСчетаОрганизаций
//
Функция ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Знач Организация = Неопределено, Знач ФормаОплаты = Неопределено, Знач БанковскийСчет = Неопределено) Экспорт
	
	Если (ФормаОплаты = Неопределено Или ФормаОплаты = Перечисления.ФормыОплаты.Безналичная)
		И Не ЗначениеЗаполнено(БанковскийСчет) И (ЗначениеЗаполнено(Организация) Или Организация = Неопределено) Тогда
		
		Возврат Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация);
		
	Иначе
		Возврат БанковскийСчет;
	КонецЕсли;
	
КонецФункции // ПолучитьБанковскийСчетОрганизацииПоУмолчанию()

// Получает организацию, если она одна в ИБ
// Если переданная в качестве параметра организация уже заполнена - возвращает ее.
// Если организация не передана в качестве параметра или передана пустая,
// возвращает единственную в информационной базе организацию. Если организация
// в базе не одна - возвращает пустую ссылку на организацию
//
// Параметры:
// Организация - СправочникСсылка.Организации - Организация, которую нужно заполнить
//
// Возвращаемое значение:
// СправочникСсылка.Организации
//
Функция ПолучитьОрганизациюПоУмолчанию(Знач Организация = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
	Иначе
		Возврат Организация;
	КонецЕсли;
	
КонецФункции // ПолучитьОрганизациюПоУмолчанию()

//Фукнция возращает стуктуру с параметрами шаблона серий номенклатуры
//	Параметры:
//			ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры, параметры серий которого которой нужно получить
//	Возвращаемое значение
//		Структура:
//	        ИспользоватьСерии - если для вида номенклатуры серии не ведуться, то в этом параметре возвращается ЛОЖЬ,
//								а остальные заполняются значениями по умолчанию
// 			ВидНоменклатуры
//			ИспользоватьНомерСерии
//			ИспользоватьСрокГодностиСерии
//			УказыватьСрокГодностиСерииСТочностьюДоЧасов
//			ФорматнаяСтрокаСрокаГодности
Функция ПараметрыСерийНоменклатуры(ВидНоменклатуры) Экспорт
	Возврат Справочники.ВидыНоменклатуры.ПараметрыСерийНоменклатуры(ВидНоменклатуры);
КонецФункции

// Фукнция возращает стуктуру с параметрами политики учета серий
//	Параметры:
//			 ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - политика, параметры которой нужно получить
//			 Склад - склад, для которого нужно получить параметры учетной политики по сериям
//	Возвращаемое значение
//		Структура:
// 			ПолитикаУчетаСерий
// 			ВидНоменклатуры
//			УказыватьПриПоступлении
//			УказыватьПриОтгрузке
//			УказыватьПриПланированииОтгрузки
//			УчетСерийПоFEFO
//			УказывыватьПоФактуОтбора
//			УчитыватьОстаткиСерий
//			ИспользоватьНомер
//			ИспользоватьСрокГодности
//			УказыватьСрокГодностиСТочностьюДоЧасов
//			ФорматнаяСтрокаСрокаГодности
//			МаскаВводаСрокаГодности
Функция ПараметрыПолитикиУчетаСерийПоВидуНоменклатуры(ВидНоменклатуры, Склад)Экспорт
	Возврат Справочники.ПолитикиУчетаСерий.ПараметрыПолитикиУчетаСерийПоВидуНоменклатуры(ВидНоменклатуры, Склад);
КонецФункции

// Процедура получает метод оценки стоимости товаров.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация
//	Дата - Дата, на которую необходимо получить метод оценки
//
// Возвращаемое значение:
//	ПеречислениеСсылка.МетодыОценкиСтоимостиТоваров - Метод оценки стоимости товаров
//
Функция ПолучитьМетодОценкиСтоимостиТоваров(Организация, Дата) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Настройка.МетодОценки КАК МетодОценки
	|ИЗ
	|	РегистрСведений.НастройкаМетодовОценкиСтоимостиТоваров.СрезПоследних(
	|		&Период, Организация = &Организация
	|	) КАК Настройка
	|");
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат = Выборка.МетодОценки;
	Иначе
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьМетодОценкиСтоимостиТоваров()

// Функция получает таблицу классификатора банков.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица классификатора
//
Функция ПолучитьТаблицуКлассификатораБанков() Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Макет = Справочники.КлассификаторБанковРФ.ПолучитьМакет("КлассификаторБанков");
	Макет.Записать(ИмяВременногоФайла);
	КлассификаторТаблица = ЗначениеИзФайла(ИмяВременногоФайла);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат КлассификаторТаблица;
	
КонецФункции // ПолучитьТаблицуКлассификатораБанков()

// Получает статью движения денежных средств для выбранной хозяйственной операции.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//
// Возвращаемое значение:
// 	СправочникСсылка.СтатьиДвиженияДенежныхСредств - Предопределенная статья ДДС
//
Функция ПолучитьСтатьюДвиженияДенежныхСредств(ХозяйственнаяОперация) Экспорт
	
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	
КонецФункции // ПолучитьСтатьюДвиженияДенежныхСредств()

// Получает подразделение выбранного пользователя.
//
// Параметры:
//	Пользователь - СправочникСсылка.Пользователи - Текущий пользователь
//
// Возвращаемое значение:
//	СправочникСсылка.Подразделения - Подразделение пользователя
//
Функция ПодразделениеПользователя(Пользователь, Подразделение = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Подразделение = Справочники.Пользователи.ПолучитьРеквизитыПользователя(Пользователь).Подразделение;
	КонецЕсли;
	
	Возврат Подразделение;
	
КонецФункции // ПодразделениеПользователя()

// Возвращает структуру по ответственному лицу указанного склада
//
// Параметры:
// 		Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
// 		Стуктура - Структура с полями: "Отвественный" и "ОтветственныйДолжность"
//
Функция ПолучитьОтветственногоПоСкладу(Склад) Экспорт
	
	Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Склад, "ТекущийОтветственный, ТекущаяДолжностьОтветственного");
	
	Если ЗначениеЗаполнено(Структура.ТекущийОтветственный) ИЛИ ЗначениеЗаполнено(Структура.ТекущаяДолжностьОтветственного) Тогда
		
		Возврат Новый Структура("Ответственный, ОтветственныйДолжность",
			Структура.ТекущийОтветственный,
			Структура.ТекущаяДолжностьОтветственного
		);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции //ПолучитьОтветственногоПоСкладу()

// Возвращает массив ссылок на группы складов, в иерархию которых входит указанный склад
//
Функция ИерархияГрупп(Склад) Экспорт
	Возврат Справочники.Склады.ИерархияГрупп(Склад);	
КонецФункции

// Функция определяет, используются или нет группы доступа физических лиц.
//
Функция ИспользуютсяГруппыДоступаФизическихЛиц() Экспорт
	
	Возврат Справочники.ГруппыДоступаФизическихЛиц.ИспользуютсяГруппыДоступа();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции получения настроек.

// Возвращает налогообложение НДС по организации
//
// Параметры:
// Организация - СправочникСсылка.Организации - Организация, которую нужно заполнить
//
// Возвращаемое значение:
// ПеречислениеСсылка.ТипыНалогообложенияНДС
//
Функция ПолучитьНалогообложениеНДС(Знач Организация, Знач Склад = Неопределено, Знач Дата) Экспорт
	
	Возврат Справочники.Организации.НалогообложениеНДС(Организация, Склад, Дата);
	
КонецФункции // ПолучитьНалогообложениеНДС()

////////////////////////////////////////////////////////////////////////////////
// Функции получения значений по умолчанию.

// Возвращает склад, если он один в ИБ
// Если переданный в качестве параметра склад уже заполнен - возвращает его.
// Если склад не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе склад. Если склад
// в базе не один - возвращает пустую ссылку на склад
//
// Параметры:
// Склад - СправочникСсылка.Склады - Склад, который нужно заполнить
//
// Возвращаемое значение:
// СправочникСсылка.Склады
//
Функция ПолучитьСкладПоУмолчанию(Знач Склад = Неопределено, УчитыватьГруппыСкладов = Ложь, ИсключитьГруппыДоступныеВЗаказах=Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Справочники.Склады.СкладПоУмолчанию(УчитыватьГруппыСкладов, ИсключитьГруппыДоступныеВЗаказах);
	Иначе
		Возврат Склад;
	КонецЕсли;
	
КонецФункции 

// Возвращает вид цены, если он один в ИБ
// Если переданный в качестве параметра вид цены уже заполнен - возвращает его.
// Если вид цены не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе вид цены. Если склад
// в базе не один - возвращает пустую ссылку на склад
//
// Параметры:
// ВидЦены - СправочникСсылка.ВидыЦен - ВидЦены, который нужно заполнить
//
// Возвращаемое значение:
// СправочникСсылка.ВидыЦен
//
Функция ПолучитьВидЦеныПоУмолчанию(Знач ВидЦены = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидЦены) Тогда
		Возврат Справочники.ВидыЦен.ВидЦеныПоУмолчанию(, ВидЦены);
	Иначе
		Возврат ВидЦены;
	КонецЕсли;
	
КонецФункции 

// Возвращает возвращает массив видов платфежных по договору эквайринга.
//
// Возвращаемое значение:
// Массив видов платежных карт
//
Функция ПолучитьВидыПлатежныхКартПоДоговоруЭваринга(ДоговорЭквайринга) Экспорт
	
	Возврат Справочники.ДоговорыЭквайринга.ВидыПлатежныхКарт(ДоговорЭквайринга);
	
КонецФункции // ПолучитьВидыПлатежныхКартПоДоговоруЭваринга()

// Возвращает склад, если он один в ИБ
// Если переданный в качестве параметра склад уже заполнен - возвращает его.
// Если склад не передан в качестве параметра или передан пустой,
// возвращает единственный в информационной базе склад. Если склад
// в базе не один - возвращает пустую ссылку на склад
//
// Параметры:
// Склад - СправочникСсылка.Склады - Склад, который нужно заполнить
//
// Возвращаемое значение:
// СправочникСсылка.Склады
//
Функция ПолучитьРозничныйСкладПоУмолчанию(Знач Склад = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(Склад) Тогда
		Возврат Справочники.Склады.РозничныйСкладПоУмолчанию();
	Иначе
		Возврат Склад;
	КонецЕсли;
	
КонецФункции

// Возвращает кассу организации, если она одна в ИБ
// Если переданная в качестве параметра касса уже заполнена - возвращает ее.
// Если касса не передана в качестве параметра или передана пустая,
// возвращает единственную в информационной базе кассу. Если касса
// в базе не одна - возвращает пустую ссылку на кассу
// Возвращает кассу, только если переданная форма оплаты наличная или Неопределено
//
// Параметры:
// Организация    - СправочникСсылка.Организации - Организация, для которой необходимо получить счет
// ФормаОплаты    - ПеречислениеСсылка.ФормыОплаты - Форма оплаты, по которой определяется необходимость
// получения кассы
// Касса - СправочникСсылка.Кассы - Касса, которую нужно заполнить
//
// Возвращаемое значение:
// СправочникСсылка.Кассы
//
Функция ПолучитьКассуОрганизацииПоУмолчанию(Знач Организация = Неопределено, Знач ФормаОплаты = Неопределено, Знач Касса = Неопределено) Экспорт
	
	Если (ФормаОплаты = Неопределено Или ФормаОплаты = Перечисления.ФормыОплаты.Наличная)
		И Не ЗначениеЗаполнено(Касса) И (ЗначениеЗаполнено(Организация) Или Организация = Неопределено) Тогда
		Возврат Справочники.Кассы.ПолучитьКассуПоУмолчанию(Организация);
	Иначе
		Возврат Касса;
	КонецЕсли;
	
КонецФункции // ПолучитьКассуОрганизацииПоУмолчанию()

// Возвращает контактное лицо по умолчанию, если оно одно для указанного партнера
//
// Параметры:
// 		Партнер - СправочникСсылка.Партнеры
//
// Возвращаемое значение:
// 		СправочникСсылка.КонтактныеЛицаПартнеров
//
Функция ПолучитьКонтактноеЛицоПартнераПоУмолчанию(Знач Партнер) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	КонтактныеЛицаПартнеров.Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец = &Партнер");
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
	
КонецФункции

// Функция возвращает массив префиксов весовых штрихкодов
Функция ПолучитьПрефиксыВесовыхШтрихкодов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.ПрефиксВесовогоТовара КАК Префикс
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline");
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ВозвращаемоеЗначение.Добавить(Строка(Выборка.Префикс));
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает складскую группу номенклатуры, если она одна в ИБ
// Если переданная в качестве параметра складская группа уже заполнена - возвращает ее.
// Если складская группа не передана в качестве параметра или передана пустая,
// возвращает единственную в информационной базе складскую группу. Если складская группа
// в базе не одна - возвращает пустую ссылку на складскую группу
//
// Параметры:
// 		СкладскаяГруппаНоменклатуры - СправочникСсылка.СкладскиеГруппыНоменклатуры - складская группа, которую
// 						нужно заполнить
// Возвращаемое значение:
// 		СправочникСсылка.СкладскиеГруппыНоменклатуры
//
Функция СкладскаяГруппаНоменклатурыПоУмолчанию(Знач СкладскаяГруппаНоменклатуры = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(СкладскаяГруппаНоменклатуры) Тогда
		Возврат Справочники.СкладскиеГруппыНоменклатуры.СкладскаяГруппаНоменклатурыПоУмолчанию();
	Иначе
		Возврат СкладскаяГруппаНоменклатуры;
	КонецЕсли;
	
КонецФункции

// Получает складскую группу упаковок, если она одна в ИБ
// Если переданная в качестве параметра складская группа уже заполнена - возвращает ее.
// Если складская группа не передана в качестве параметра или передана пустая,
// возвращает единственную в информационной базе складскую группу. Если складская группа
// в базе не одна - возвращает пустую ссылку на складскую группу
//
// Параметры:
// 		СкладскаяГруппаУпаковок - СправочникСсылка.СкладскиеГруппыУпаковок - складская группа, которую
// 						нужно заполнить
// Возвращаемое значение:
// 		СправочникСсылка.СкладскиеГруппыУпаковок
//
Функция СкладскаяГруппаУпаковокПоУмолчанию(Знач СкладскаяГруппаУпаковок = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(СкладскаяГруппаУпаковок) Тогда
		Возврат Справочники.СкладскиеГруппыУпаковок.СкладскаяГруппаУпаковокПоУмолчанию();
	Иначе
		Возврат СкладскаяГруппаУпаковок;
	КонецЕсли;
	
КонецФункции

// Возвращает формат магазина, если он один в ИБ
//
// Параметры:
// ФорматМагазина - СправочникСсылка.ФорматыМагазинов - формат магазина, который нужно заполнить
// Возвращаемое значение:
// СправочникСсылка.ФорматыМагазинов
//
Функция ПолучитьФорматМагазинаПоУмолчанию(Знач ФорматМагазина = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ФорматМагазина) Тогда
		Возврат Справочники.ФорматыМагазинов.ПолучитьФорматМагазинаПоУмолчанию();
	Иначе
		Возврат ФорматМагазина;
	КонецЕсли;
	
КонецФункции // ПолучитьФорматМагазинаПоУмолчанию()

////////////////////////////////////////////////////////////////////////////////
// Доступ к реквизитам объектов метаданных.

// Возвращает перечень реквизитов справочника, недоступных для изменения текущему пользователю.
//
// Параметры:
//		ИмяСправочника - Строка - имя справочника как оно задано в метаданных
//		ЭтоГруппа - Булево - проверять реквизиты группы или элемента справочника
// Возвращаемое значение:
//		Строка - список недоступных реквизитов, разделенных запятыми.
//
Функция НедоступныеДляРедактированияРеквизитыСправочника(ИмяСправочника, ЭтоГруппа = Ложь) Экспорт
	
	Реквизиты = "";
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Реквизиты; // все реквизиты доступны для редактирования
	КонецЕсли;
	
	МетаданныеСправочника = Метаданные.Справочники[ИмяСправочника];
	ИсключаемыеРеквизиты  = Новый Структура("Предопределенный,Ссылка,ЭтоГруппа"); // недоступны по-умолчанию
	
	Для Каждого МетаданныеРеквизита Из МетаданныеСправочника.СтандартныеРеквизиты Цикл
		Если НЕ ИсключаемыеРеквизиты.Свойство(МетаданныеРеквизита.Имя)
		 И НЕ ПравоДоступа("Редактирование", МетаданныеСправочника,, МетаданныеРеквизита.Имя) Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ",") + МетаданныеРеквизита.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого МетаданныеРеквизита Из МетаданныеСправочника.Реквизиты Цикл
		Если НЕ ЭтоГруппа И МетаданныеРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы
		 ИЛИ ЭтоГруппа И МетаданныеРеквизита.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
			Продолжить; // реквизит не используется
		КонецЕсли;
		Если НЕ ПравоДоступа("Редактирование", МетаданныеРеквизита) Тогда
			Реквизиты = Реквизиты + ?(ПустаяСтрока(Реквизиты), "", ",") + МетаданныеРеквизита.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Реквизиты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
