
// ПРОЦЕДУРЫ ОТБОРА ПО АКТУАЛЬНОСТИ

// Устанавливает переданный в форму списка документов отбор по актуальности
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// Актуальность - Строка - строка отбора по актуальности
// ДатаАктуальности - Дата - дата, на которую необходимо считать документы неактуальными
// СтруктураБыстрогоОтбора - Структура - переданный в форму списка документов отбор
//
Процедура ОтборПоАктуальностиПриСозданииНаСервере(Список, Актуальность, ДатаАктуальности, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбора.Свойство("Актуальность", Актуальность) Тогда
			УстановитьОтборВСпискеПоАктуальности(Список, Актуальность);
		КонецЕсли;
		
		Если СтруктураБыстрогоОтбора.Свойство("ДатаАктуальности", ДатаАктуальности) Тогда
			Если ЗначениеЗаполнено(ДатаАктуальности) Тогда
				Список.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", ДатаАктуальности);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборПоАктуальностиПриСозданииНаСервере()

// Устанавливает в форме списка документов отбор по актуальности, сохраненный в настройках
// Отбор из настроек устанавливается только если отбор не передан в форму извне
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// Актуальность - Строка - строка отбора по актуальности
// ДатаАктуальности - Дата - дата, на которую необходимо считать документы неактуальными
// СтруктураБыстрогоОтбора - Структура - переданный в форму списка документов отбор
// Настройки - Соответствие - настройки формы
//
Процедура ОтборПоАктуальностиПриЗагрузкеИзНастроек(Список, Актуальность, ДатаАктуальности, Знач СтруктураБыстрогоОтбора, Настройки) Экспорт
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		
		Актуальность     = Настройки.Получить("Актуальность");
		ДатаАктуальности = Настройки.Получить("ДатаАктуальности");
		
		УстановитьОтборВСпискеПоАктуальности(Список, Актуальность);
		УстановитьОтборВСпискеПоДатеАктуальности(Список, ДатаАктуальности);
		
	Иначе
	
		Если Не СтруктураБыстрогоОтбора.Свойство("Актуальность") Тогда
			Актуальность = Настройки.Получить("Актуальность");
			УстановитьОтборВСпискеПоАктуальности(Список, Актуальность);
		КонецЕсли;
		
		Если Не СтруктураБыстрогоОтбора.Свойство("ДатаАктуальности") Тогда
			ДатаАктуальности = Настройки.Получить("ДатаАктуальности");
			УстановитьОтборВСпискеПоДатеАктуальности(Список, ДатаАктуальности);
		КонецЕсли;
		
	КонецЕсли;
	
	Настройки.Удалить("Актуальность");
	Настройки.Удалить("ДатаАктуальности");
	
КонецПроцедуры // ОтборПоАктуальностиПриЗагрузкеИзНастроек()

// Устанавливает в форме списка документов отбор по актуальности
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// Актуальность - Строка - строка отбора по актуальности
//
Процедура УстановитьОтборВСпискеПоАктуальности(Список, Актуальность) Экспорт
	
	ЗначениеОтбора = (Актуальность = "Просроченные" Или Найти(Актуальность, "Истекающие на") > 0);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Просрочен", ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Актуальность) И Актуальность <> "Все");
	
КонецПроцедуры // УстановитьОтборВСпискеПоАктуальности()

// Устанавливает в форме списка документов отбор по дате актуальности
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// ДатаАктуальности - Дата - дата, на которую документы считаются неактуальными
//
Процедура УстановитьОтборВСпискеПоДатеАктуальности(Список, ДатаАктуальности) Экспорт
	
	Если ЗначениеЗаполнено(ДатаАктуальности) Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", ДатаАктуальности);
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", НачалоДня(ТекущаяДата()));
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтборВСпискеПоДатеАктуальности()

// Устанавливает в форме списка документов отбор по актуальности и дате актуальности
// Изменяет значение даты актуальности в зависимости от строки актуальности
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// Актуальность - Строка - строка отбора по актуальности
// ДатаАктуальности - Дата - дата, на которую документы считаются неактуальными
//
Процедура ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаАктуальности) Экспорт
	
	УстановитьОтборВСпискеПоАктуальности(Список, Актуальность);
	
	НеПоказыватьВсе = (Актуальность <> "Все");
	
	Если Не НеПоказыватьВсе Тогда
		ДатаАктуальности = Дата(1,1,1);
	КонецЕсли;
	
	УстановитьОтборВСпискеПоДатеАктуальности(Список, ДатаАктуальности);
	
КонецПроцедуры // ПриИзмененииОтбораПоАктуальности()

// Устанавливает в форме списка документов отбор по актуальности и дате актуальности
// Изменяет значение даты актуальности в зависимости от строки актуальности
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// Актуальность - Строка - строка отбора по актуальности
// ДатаАктуальности - Дата - дата, на которую документы считаются неактуальными
// СтандартнаяОбработка - Булево - флаг выполнения стандартной обработки при очистке значения поля
//
Процедура ПриОчисткеОтбораПоАктуальности(Список, Актуальность, ДатаАктуальности, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если Актуальность <> "Все" Тогда
		Актуальность = НСтр("ru='Все'");
		ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаАктуальности);
	КонецЕсли;
	
КонецПроцедуры // ПриОчисткеОтбораПоАктуальности()

Процедура УстановитьАктуальностьПоУмолчанию(Актуальность) Экспорт
	
	Если Не ЗначениеЗаполнено(Актуальность) Тогда
		Актуальность = НСтр("ru='Все'");
	КонецЕсли;
	
КонецПроцедуры

// ФУНКЦИИ ОТБОРА ПО СОСТОЯНИЮ

// Проверяет передан ли в форму списка документов отбор по состоянию
//
// Параметры:
// Состояние - Строка - строка отбора по состоянию
// СтруктураБыстрогоОтбора - Структура - переданный в форму списка документов отбор
//
// Возвращаемое значение:
// Булево
// Истина, если необходимо установить отбор по состоянию, иначе Ложь
//
Функция НеобходимОтборПоСостояниюПриСозданииНаСервере(Состояние, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		Если СтруктураБыстрогоОтбора.Свойство("Состояние", Состояние) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // НеобходимОтборПоСостояниюПриСозданииНаСервере()

// Проверяет, нужно ли устанавливать отбор по состоянию, загруженный из настроек или переданный в форму извне
//
// Отбор из настройк устанавливается только если отбор не передан в форму извне
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// Актуальность - Строка - строка отбора по актуальности
// ДатаАктуальности - Дата - дата, на которую необходимо считать документы неактуальными
// СтруктураБыстрогоОтбора - Структура - переданный в форму списка документов отбор
// Настройки - Соответствие - настройки формы
//
Функция НеобходимОтборПоСостояниюПриЗагрузкеИзНастроек(Состояние, Знач СтруктураБыстрогоОтбора, Настройки) Экспорт
	
	НеобходимОтборПоСостоянию = Ложь;
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		
		Состояние = Настройки.Получить("Состояние");
		НеобходимОтборПоСостоянию = Истина;
		
	Иначе
	
		Если Не СтруктураБыстрогоОтбора.Свойство("Состояние") Тогда
			Состояние = Настройки.Получить("Состояние");
			НеобходимОтборПоСостоянию = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Настройки.Удалить("Состояние");

	Возврат НеобходимОтборПоСостоянию;
	
КонецФункции // НеобходимОтборПоСостояниюПриЗагрузкеИзНастроек()

// ПРОЦЕДУРЫ ОТБОРА ПО РЕГУЛЯРНОСТИ

// Устанавливает переданный в форму списка документов отбор по регулярности
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// Регулярность - Строка - строка отбора по регулярности
// СтруктураБыстрогоОтбора - Структура - переданный в форму списка документов отбор
//
Процедура ОтборПоРегулярностиПриСозданииНаСервере(Список, Регулярность, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбора.Свойство("Регулярность", Регулярность) Тогда
			УстановитьОтборВСпискеПоРегулярности(Список, Регулярность);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборПоРегулярностиПриСозданииНаСервере()

// Устанавливает в форме списка документов отбор по регулярности, сохраненный в настройках
// Отбор из настроек устанавливается только если отбор не передан в форму извне
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// Регулярность - Строка - строка отбора по регулярности
// СтруктураБыстрогоОтбора - Структура - переданный в форму списка документов отбор
// Настройки - Соответствие - настройки формы
//
Процедура ОтборПоРегулярностиПриЗагрузкеИзНастроек(Список, Регулярность, Знач СтруктураБыстрогоОтбора, Настройки) Экспорт
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		
		Регулярность = Настройки.Получить("Регулярность");
		УстановитьОтборВСпискеПоРегулярности(Список, Регулярность);
		
	Иначе
	
		Если Не СтруктураБыстрогоОтбора.Свойство("Регулярность") Тогда
			Регулярность = Настройки.Получить("Регулярность");
			УстановитьОтборВСпискеПоРегулярности(Список, Регулярность);
		КонецЕсли;
		
	КонецЕсли;
	
	Настройки.Удалить("Регулярность");
	
КонецПроцедуры // ОтборПоРегулярностиПриЗагрузкеИзНастроек()

// Устанавливает в форме списка документов отбор по регулярности
//
// Параметры:
// Список - ДинамическийСписок - список, в котором необходимо установить отбор
// Регулярность - Строка - строка отбора по регулярности
//
Процедура УстановитьОтборВСпискеПоРегулярности(Список, Регулярность) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Регулярное", Регулярность = "Регулярные", ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Регулярность));
	
КонецПроцедуры // УстановитьОтборВСпискеПоРегулярности()

// ПРОЦЕДУРЫ ОТБОРА ПО ЗНАЧЕНИЮ СПИСКОВ

// Устанавливает отбор в списке по указанному значению для нужной колонки
// с учетом переданной структуры быстрого отбора
//
// Параметры:
//  Список - динамический список, для которого треюуется установить отбор
//  ИмяКолонки - Строка. Имя колонки, по которой устанавливается отбор
//  Значение - устанавливаемое значение отбора
//  СтруктураБыстрогоОтбора - Неопределено, Структура. Структура, содержащая ключи и значения отбора
//  Использование - Неопределено, Булево. Признак использования элемента отбора
//  ВидСравнения - Неопределено, ВидСравненияКомпоновкиДанных - вид сравнения, устанавливаемый для элемента отбора
//
Процедура ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, ИмяКолонки, Значение, Знач СтруктураБыстрогоОтбора, 
			Использование = Неопределено, ВидСравнения = Неопределено) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбора.Свойство(ИмяКолонки, Значение) Тогда
			ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборПоЗначениюСпискаПриСозданииНаСервере()

// Устанавливает отбор в списке по указанному значению для нужной колонки
// с учетом переданной структуры быстрого отбора и переданных настроек
//
// Параметры:
//  Список - динамический список, для которого треюуется установить отбор
//  ИмяКолонки - Строка. Имя колонки, по которой устанавливается отбор
//  Значение - устанавливаемое значение отбора
//  СтруктураБыстрогоОтбора - Неопределено, Структура. Структура, содержащая ключи и значения отбора
//  Настройки - настройки, из которых могут получаться значения отбора
//  Использование - Неопределено, Булево. Признак использования элемента отбора
//  ВидСравнения - Неопределено, ВидСравненияКомпоновкиДанных - вид сравнения, устанавливаемый для элемента отбора
//
Процедура ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, ИмяКолонки, Значение, Знач СтруктураБыстрогоОтбора, 
			Настройки, Использование = Неопределено, ВидСравнения = Неопределено) Экспорт
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		Значение = Настройки.Получить(ИмяКолонки);
		ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
	Иначе
		Если Не СтруктураБыстрогоОтбора.Свойство(ИмяКолонки) Тогда
			Значение = Настройки.Получить(ИмяКолонки);
			ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Настройки.Удалить(ИмяКолонки);
	
КонецПроцедуры // ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек()

// ПРОЦЕДУРЫ И ФУНКЦИИ ОТБОРА ПО МЕНЕДЖЕРУ

// Процедура копирует в список выбора поля отбора значения из списка источника
//
Процедура СкопироватьСписокВыбораОтбораПоМенеджеру(СписокВыбора, СписокИсточник) Экспорт
	
	СписокВыбора.Очистить();
	Для н=0 По СписокИсточник.Количество()-1 Цикл
		СписокВыбора.Добавить(СписокИсточник[н].Значение, СписокИсточник[н].Представление);
	КонецЦикла;
	
КонецПроцедуры // СкопироватьСписокВыбораОтбораПоМенеджеру()



//////////////////////////////
// БРУ

Процедура УстановитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено, Представление = "")
	
	ЭлементОтбора = КоллекцияЭлементов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Представление    = Представление;
	
КонецПроцедуры // УстановитьЭлементОтбораКоллекции()

Процедура УдалитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			КоллекцияЭлементов.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

Процедура ИзменитьЭлементОтбораГруппыСписка(Группа, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление, ВидПоиска = 0) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ВидПоиска = 0 Тогда
			Если ЭлементОтбора.Представление = Представление Тогда
				ВозвращаемоеЗначение = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		ИначеЕсли ВидПоиска = 1 Тогда
			Если Найти(ЭлементОтбора.Представление, Представление) = 1 Тогда
				ВозвращаемоеЗначение = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		ИначеЕсли ВидПоиска = 2 Тогда
			Если Найти(ЭлементОтбора.Представление, Представление) > 0 Тогда
				ВозвращаемоеЗначение = ЭлементОтбора;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции // НайтиЭлементОтбораПоПредставлению()

Функция СоздатьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	
	ГруппаЭлементовОтбора = НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Иначе
		ГруппаЭлементовОтбора.Элементы.Очистить();
	КонецЕсли;
	
	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции


//Удаляет элемент отбора динамического списка
//
//Параметры:
//Список  - обрабатываемый динамический список,
//ИмяПоля - имя поля компоновки, отбор по которому нужно удалить
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	ЭлементыДляУдаления = Новый Массив;
	
	ЭлементыОтбора = Список.Отбор.Элементы;
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			ЭлементыДляУдаления.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементОтбораДляУдаления Из ЭлементыДляУдаления Цикл
		ЭлементыОтбора.Удалить(ЭлементОтбораДляУдаления);
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Устанавливает элемент отбор динамического списка
//
//Параметры:
//Список			- обрабатываемый динамический список,
//ИмяПоля			- имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения		- вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение 	- значение отбора
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено, Представление = "") Экспорт
	
	УстановитьЭлементОтбораКоллекции(Список.Отбор.Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения, Представление);
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

//Изменяет элемент отбора динамического списка
//
//Параметры:
//Список         - обрабатываемый динамический список,
//ИмяПоля        - имя поля компоновки, отбор по которому нужно установить,
//ВидСравнения   - вид сравнения отбора, по умолчанию - Равно,
//ПравоеЗначение - значение отбора,
//Установить     - признак необходимости установить отбор
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()
