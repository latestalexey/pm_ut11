////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Обработка строки табличной части - вызывается из форм документов.
//
// СтруктураДействий - Структура. Возможно передавать следующие поля:
//  "ПроверитьХарактеристикуПоВладельцу", Характеристика.
//  "ПроверитьЗаполнитьУпаковкуПоВладельцу"      , Упаковка.
//  "ПересчитатьКоличествоЕдиниц",
//  "ПересчитатьКоличествоЕдиницСуффикс", Суффикс
//  "ПересчитатьКоличествоУпаковок", Имя
//  "ПересчитатьКоличествоУпаковокСуффикс", Суффикс
//  "ЗаполнитьОбъемВесУпаковки"	        , Упаковка.
//  "ЗаполнитьЦенуПродажи"              , СтруктураПараметровДействия.
//  "ПересчитатьСумму". ИмяКоличества
//  "ПересчитатьСуммуСУчетомРучнойСкидки"     , СтруктураПараметровДействия.
//  "ПересчитатьСуммуСУчетомАвтоматическойСкидки"     , СтруктураПараметровДействия.
//  "ПересчитатьЦенуСкидкуПоСуммеВОприходовании"
//  "ПересчитатьЦенуЗаУпаковку"         , КоличествоЕдиницДоПересчета.
//  "ПересчитатьСуммуНДС".
//  "ЗаполнитьСтавкуНДС".
//  "ОбработатьШтрихкоды".
//  "ЗаполнитьУсловияПродажВСтрокеТЧ"
//  "ЗаполнитьЦенуПродажиРозница" , СтруктураПараметровДействия.
//  "ПересчитатьСуммуРучнойСкидки".
//  "ПересчитатьПроцентРучнойСкидки".
//  "ПроверитьСтатьюАналитикуРасходов"
//  "ЗаполнитьФлагИзлишекПорча"
//  "ЗаполнитьФлагРасхождение"
//  "ОчиститьСуммуВзаиморасчетов"
//  "ЗаполнитьФлагиНедоборНеотгружаемые"
//  "ПересчитатьКоличествоНеОтгружать"
//
Процедура ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	Если НеобходимВызовСервера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Тогда
		
		ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий);
		
		ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, КэшированныеЗначения);
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(    ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки( ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоНеОтгружатьСтрокеТЧ(              ТекущаяСтрока, СтруктураДействий);
	ПересчитатьКоличествоУпаковокПоФактуВСтрокеТЧ(         ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоЕдиницВСтрокеТЧ(                  ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ(           ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоУпаковокВСтрокеТЧ(                ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(         ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьСтатьюАналитикуРасходов(                      ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ(                    ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПродажиРозницаВСтрокеТЧ(                  ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьУсловияПродажВСтрокеТЧ(                       ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеТЧ(                           ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ(             ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ(               ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуРучнойСкидкиВСтрокеТЧ(                 ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуВСтрокеТЧ(                             ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧ(        ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧ(        ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуПоСуммеВСтрокеТЧ(                       ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ(         ТекущаяСтрока, СтруктураДействий);
	ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ(  ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ(          ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДСВСтрокеТЧ(                          ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСНДСВСтрокеТЧ(                         ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуПродажиВСтрокеТЧ(                      ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуПродажиНДСВСтрокеТЧ(                   ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	УстановитьАктивностьСтроки(                            ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	УстановитьАктивностьСтроки(                            ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьЗаполнитьСкладВСтрокеТЧ(                      ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьПолучитьВариантКомплектации(                  ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьФлагиРасхождениеИИзлишекПорча(                ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьОбъемВесПоУпаковкеВСтрокеТЧ(                  ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОчиститьСуммуВзаиморасчетовВСтрокеТЧ(                  ТекущаяСтрока, СтруктураДействий);
	ОчиститьАвтоматическуюСкидкуВСтрокеТЧ(                 ТекущаяСтрока, СтруктураДействий);
	ОчиститьСуммуВознагражденияВСтрокеТЧ(                  ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьФлагиНедоборНеотгружаемые(                    ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПартнера(                                     ТекущаяСтрока, СтруктураДействий);
	ПроверитьЗаполнитьВариантОбеспечения(                  ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПризнакБезВозвратнойТары(                     ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПризнакОтмененоБезВозвратнойТары(             ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПризнакАктивностьБезВозвратнойТары(           ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьДубликатыЗависимыхРеквизитов(                 ТекущаяСтрока, СтруктураДействий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Процедуры пересчета и заполнения.

Процедура ПроверитьПолучитьВариантКомплектации(ТекущаяСтрока, СтруктураДействий)

	Если Не СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
	 Или Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) И ТекущаяСтрока.ХарактеристикиИспользуются Тогда

		ТекущаяСтрока.ВариантКомплектации = Неопределено;

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		ТекущаяСтрока.Характеристика             = Неопределено;
		ТекущаяСтрока.ХарактеристикиИспользуются = Ложь;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		ТекущаяСтрока.Упаковка = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоНеОтгружатьСтрокеТЧ(ТекущаяСтрока, СтруктураДействий);
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		
		Если ТекущаяСтрока.КоличествоУпаковок > ТекущаяСтрока.КоличествоУпаковокВДокументе + ТекущаяСтрока.КоличествоУпаковокНеОтгружать Тогда
			
			ТекущаяСтрока.КоличествоУпаковокНеОтгружать = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокВДокументе;
			
		ИначеЕсли ТекущаяСтрока.КоличествоУпаковок > ТекущаяСтрока.КоличествоУпаковокВДокументе Тогда
			
			Если ТекущаяСтрока.КоличествоУпаковокНеОтгружать > ТекущаяСтрока.КоличествоУпаковок Тогда
				
				ТекущаяСтрока.КоличествоУпаковокНеОтгружать = ТекущаяСтрока.КоличествоУпаковок;
				
			КонецЕсли;
			
		ИначеЕсли ТекущаяСтрока.КоличествоУпаковокНеОтгружать > ТекущаяСтрока.КоличествоУпаковок Тогда
			
			ТекущаяСтрока.КоличествоУпаковокНеОтгружать = ТекущаяСтрока.КоличествоУпаковок;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПересчитатьКоличествоЕдиницВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц") Тогда
		ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок
		   * ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс",Суффикс) Тогда
		
		Если Суффикс = Неопределено Тогда
			Суффикс = "";
		КонецЕсли;
		
		ТекущаяСтрока["Количество"+Суффикс] = ТекущаяСтрока["КоличествоУпаковок"+Суффикс]
		   * ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковокВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.Количество
		   / ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Суффикс = Неопределено;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс",Суффикс) Тогда
		Если Суффикс = Неопределено Тогда
			Суффикс = "";
		КонецЕсли;
		ТекущаяСтрока["КоличествоУпаковок" + Суффикс] = ТекущаяСтрока["Количество" + Суффикс] 
		   / ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковокПоФактуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоФакту") Тогда
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковокУчет - ТекущаяСтрока.КоличествоУпаковокФакт;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Перем КоличествоЕдиницДоПересчета;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку", КоличествоЕдиницДоПересчета)
	   И КоличествоЕдиницДоПересчета <> 0 Тогда
		ТекущаяСтрока.Цена = ТекущаяСтрока.Цена
		   / КоличествоЕдиницДоПересчета
		   * ТекущаяСтрока.Количество;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтавкуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС") Тогда
		ТекущаяСтрока.СтавкаНДС = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем ЭтоВозвратнаяТара;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары", ЭтоВозвратнаяТара)
		И ЭтоВозвратнаяТара И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Тогда
		ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСумму", ИмяКоличества) Тогда
		Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок"
		Конецесли;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	ИмяКоличества = Неопределено;

	Если СтруктураДействий.Свойство("ПересчитатьПроцентРучнойСкидки", ИмяКоличества) Тогда
		Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;	
		
		Если ТекущаяСтрока[ИмяКоличества] * ТекущаяСтрока.Цена <> 0 Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / (ТекущаяСтрока[ИмяКоличества] *ТекущаяСтрока.Цена), 2);
		Иначе
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуРучнойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	ИмяКоличества = Неопределено;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуРучнойСкидки", ИмяКоличества) Тогда
		Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		
		ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока[ИмяКоличества]*ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		ПересчитыватьСуммуРучнойСкидки = Неопределено;
		ИмяКоличества = Неопределено;
		
		Если СтруктураПараметровДействия <> Неопределено Тогда
			
			СтруктураПараметровДействия.Свойство("Очищать", Очищать);
			СтруктураПараметровДействия.Свойство("ПересчитыватьСуммуРучнойСкидки", ПересчитыватьСуммуРучнойСкидки);
			СтруктураПараметровДействия.Свойство("ИмяКоличества", ИмяКоличества);
			
			Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
				ИмяКоличества = "КоличествоУпаковок";
			КонецЕсли;
			
			Если Очищать = Истина Тогда
				
				ТекущаяСтрока.СуммаРучнойСкидки = 0;
				ТекущаяСтрока.ПроцентРучнойСкидки = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПересчитыватьСуммуРучнойСкидки = Ложь Тогда
			
		Иначе
			ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока[ИмяКоличества] *ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		КонецЕсли;
			
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаРучнойСкидки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	СтруктураПараметровДействия = Неопределено;
			
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИспользоватьАвтоматическиеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьАвтоматическиеСкидки") Тогда
				ИспользоватьАвтоматическиеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИмяКоличества = "КоличествоУпаковок";
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если НЕ СтруктураПараметровДействия.Свойство("ИмяКоличества", ИмяКоличества) Тогда
				ИмяКоличества="КоличествоУпаковок";
			КонецЕсли;
		КонецЕсли;
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах Тогда
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				
				ТекущаяСтрока.Цена                = 0;
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				
			Иначе
				
				Если ТекущаяСтрока.Цена = 0 Тогда
					Если ЗначениеЗаполнено(ТекущаяСтрока.ПроцентРучнойСкидки) Тогда
						ТекущаяСтрока.СуммаРучнойСкидки = (ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентРучнойСкидки)  / (100 - ТекущаяСтрока.ПроцентРучнойСкидки);
					КонецЕсли;
					ТекущаяСтрока.Цена = Окр((ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаРучнойСкидки) / ТекущаяСтрока[ИмяКоличества], 2);
				Иначе
					СуммаБезСкидки = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
					ТекущаяСтрока.СуммаРучнойСкидки   = СуммаБезСкидки - ТекущаяСтрока.Сумма;
					ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / СуммаБезСкидки, 2);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				ТекущаяСтрока.Цена = 0;
			Иначе
				ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьАвтоматическиеСкидки Тогда
			Если КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
				ТекущаяСтрока.СуммаАвтоматическойСкидки   = 0;
				ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки =Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		
		ИмяКоличества = "КоличествоУпаковок";
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если НЕ СтруктураПараметровДействия.Свойство("ИмяКоличества", ИмяКоличества) Тогда
				ИмяКоличества="КоличествоУпаковок";
			КонецЕсли;
		КонецЕсли;
		
		// Если используются ручные скидки - перерасчитаем процент и сумму ручной скидки, иначе перерасчитываем цену
		Если ИспользоватьРучныеСкидки И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках Тогда
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				
				ТекущаяСтрока.Цена                = 0;
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				
			Иначе
				
				Если ТекущаяСтрока.Цена = 0 Тогда
					Если ЗначениеЗаполнено(ТекущаяСтрока.ПроцентРучнойСкидки) Тогда
						ТекущаяСтрока.СуммаРучнойСкидки = (ТекущаяСтрока.Сумма * ТекущаяСтрока.ПроцентРучнойСкидки)  / (100 - ТекущаяСтрока.ПроцентРучнойСкидки);
					КонецЕсли;
					ТекущаяСтрока.Цена = Окр((ТекущаяСтрока.Сумма + ТекущаяСтрока.СуммаРучнойСкидки) / ТекущаяСтрока[ИмяКоличества], 2);
				Иначе
					СуммаБезСкидки = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
					ТекущаяСтрока.СуммаРучнойСкидки   = СуммаБезСкидки - ТекущаяСтрока.Сумма;
					ТекущаяСтрока.ПроцентРучнойСкидки = Окр(100*ТекущаяСтрока.СуммаРучнойСкидки / СуммаБезСкидки, 2);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрока.Сумма = 0 Или ТекущаяСтрока[ИмяКоличества] = 0 Тогда
				ТекущаяСтрока.Цена = 0;
			Иначе
				ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьЦенуПоСуммеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСумме",ИмяКоличества) Тогда
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		Если ТекущаяСтрока[ИмяКоличества] = 0 Тогда
			ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		Иначе
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) 
	
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПродажиПоСуммеПродажи") Тогда
		
		ТекущаяСтрока.ЦенаПродажи = ?(ТекущаяСтрока.КоличествоУпаковок <> 0, Окр(ТекущаяСтрока.СуммаПродажи / ТекущаяСтрока.КоличествоУпаковок, 2, 1), 0);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		СтруктураПараметровДействия.Свойство("Очищать", Очищать);
		
		Если Очищать Тогда
			
			ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
			ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
			
		КонецЕсли;
		
		Скидка = ТекущаяСтрока.СуммаАвтоматическойСкидки;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - Скидка;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		
		ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
		ТекущаяСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма, ТекПроцентНДС, СтруктураПараметровДействия.ЦенаВключаетНДС);
	
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуСНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.Сумма + ?(СтруктураПараметровДействия.ЦенаВключаетНДС, 0, ТекущаяСтрока.СуммаНДС);
	
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуПродажиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи", СтруктураПараметровДействия) Тогда
	
		ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.ЦенаПродажи * ТекущаяСтрока.КоличествоУпаковок;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуПродажиНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажиНДС", СтруктураПараметровДействия) Тогда
	
		ТекущийПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекущаяСтрока.СтавкаНДС);
		ТекущаяСтрока.СуммаПродажиНДС = Окр(ТекущаяСтрока.СуммаПродажи * ТекущийПроцентНДС / (1 + ТекущийПроцентНДС), 2, РежимОкругления.Окр15как20);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУсловияПродажВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
		
		Если ТекущаяСтрока.Свойство("ВидЦены") Тогда
			ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
		КонецЕсли;
		ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.ПустаяСсылка");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры") Тогда
		ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются") Тогда
		ТекущаяСтрока.ХарактеристикиИспользуются = Ложь;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД") Тогда
		ТекущаяСтрока.ВедетсяУчетПоГТД = Ложь;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга") Тогда
		ТекущаяСтрока.ЭтоУслуга = Ложь;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар") Тогда
		ТекущаяСтрока.ПодакцизныйТовар = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ()

Процедура ЗаполнитьЦенуПродажиРозницаВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиРозница") Тогда
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОбъемВесПоУпаковкеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Если СтруктураДействий.Свойство("ЗаполнитьОбъемВесУпаковки") Тогда
		ТекущаяСтрока.ОбъемУпаковки =  ПолучитьОбъемУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
		ТекущаяСтрока.ВесУпаковки = ПолучитьВесУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьСтатьюАналитикуРасходов(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Если СтруктураДействий.Свойство("ПроверитьСтатьюАналитикуРасходов") Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.СтатьяРасходов) Тогда
			ТекущаяСтрока.СтатьяРасходов = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяСтрока.АналитикаРасходов) Тогда
			ТекущаяСтрока.АналитикаРасходов = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьАктивностьСтроки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		ТекущаяСтрока.Активность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьСкладВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если СтруктураДействий.Свойство("Склад") И Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		ТекущаяСтрока.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьФлагиРасхождениеИИзлишекПорча(ТекущаяСтрока, СтруктураДействий)
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда
		ТекущаяСтрока.Расхождение = (ТекущаяСтрока.КоличествоУпаковок <> ТекущаяСтрока.КоличествоУпаковокФакт);		
	КонецЕсли;
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда
		ТекущаяСтрока.ИзлишекПорча = Истина;		
	КонецЕсли;
КонецПроцедуры

Процедура ОчиститьСуммуВзаиморасчетовВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) 
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда
		
		ТекущаяСтрока.СуммаВзаиморасчетов = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьАвтоматическуюСкидкуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) 
	
	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда
		
		ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
		ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьСуммуВознагражденияВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения", СтруктураПараметровДействия) Тогда
	
		ТекущаяСтрока.СуммаВознаграждения = 0;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДубликатыЗависимыхРеквизитов(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрСтруктурыДействий;
	Если Не СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", ПараметрСтруктурыДействий) Тогда
		Возврат;
	КонецЕсли;
	
	// ПараметрСтруктурыДействий - Структура
	// 		Ключ: Имя реквизита флага активности
	// 		Значение: Строка с перечислением через запятую имен зависимых реквизитов
	
	Для Каждого ПолеСтруктуры Из ПараметрСтруктурыДействий Цикл
		
		ИмяФлагаАктивности = ПолеСтруктуры.Ключ;
		ЗначениеФлагаАктивности = ТекущаяСтрока[ИмяФлагаАктивности];
		
		ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
		Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
			ТекущаяСтрока[Реквизит.Ключ+ИмяФлагаАктивности] = ?(
				ЗначениеФлагаАктивности,
				ТекущаяСтрока[Реквизит.Ключ],
				0
			);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьФлагиНедоборНеотгружаемые(ТекущаяСтрока, СтруктураДействий)
	Если СтруктураДействий.Свойство("ЗаполнитьФлагиНедоборНеотгружаемые") Тогда
		ТекущаяСтрока.ЕстьНедобор 		= ((ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокНеОтгружать) < ТекущаяСтрока.КоличествоУпаковокВДокументе);
		ТекущаяСтрока.ЕстьНеотгружаемые = ТекущаяСтрока.КоличествоУпаковокНеОтгружать > 0;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьПартнера(ТекущаяСтрока, СтруктураДействий)
	Если СтруктураДействий.Свойство("ЗаполнитьПартнера") Тогда
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Партнер) Тогда
			ТекущаяСтрока.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнитьВариантОбеспечения(ТекущаяСтрока, СтруктураДействий)
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантОбеспечения") Тогда
		
		Если ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа")
			И ТекущаяСтрока.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада") Тогда
			ТекущаяСтрока.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ПустаяСсылка");
		ИначеЕсли ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			ТекущаяСтрока.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакБезВозвратнойТары(ТекущаяСтрока, СтруктураДействий)
	
	Перем ВернутьМногооборотнуюТару;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", ВернутьМногооборотнуюТару) Тогда
	
		ТекущаяСтрока.БезВозвратнойТары = Не (ВернутьМногооборотнуюТару
			И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакОтмененоБезВозвратнойТары(ТекущаяСтрока, СтруктураДействий)
	
	Перем ВернутьМногооборотнуюТару;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", ВернутьМногооборотнуюТару) Тогда
	
		ТекущаяСтрока.ОтмененоБезВозвратнойТары = Не (ВернутьМногооборотнуюТару
			И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара")) И ТекущаяСтрока.Отменено;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакАктивностьБезВозвратнойТары(ТекущаяСтрока, СтруктураДействий)
	
	Перем ВернутьМногооборотнуюТару;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", ВернутьМногооборотнуюТару) Тогда
	
		ТекущаяСтрока.АктивностьБезВозвратнойТары = Не (ВернутьМногооборотнуюТару
			И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара")) И ТекущаяСтрока.Активность;
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры.

Функция НеобходимВызовСервера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("НеобходимоОбработатьВсюТЧ")
		И СтруктураДействий.НеобходимоОбработатьВсюТЧ Тогда
		ТекстИсключения = НСтр("ru = 'Для обработки всей ТЧ, необходимо сделать контекстный вызов серверной фукнции ""ОбработкаТабличнойЧастиСервер.ОбработатьТЧ""'");
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	//Чечин Петр
	Если СтруктураДействий.Свойство("ПроверитьНоменклатуруНаСтарую")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСтатьюАналитикуРасходов")
		И (ЗначениеЗаполнено(ТекущаяСтрока.СтатьяРасходов) Или
			ЗначениеЗаполнено(ТекущаяСтрока.АналитикаРасходов)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если (СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс") 
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс")
		Или СтруктураДействий.Свойство("ЗаполнитьОбъемВесУпаковки")) 
		И ЗначениеЗаполнено(ТекущаяСтрока.Упаковка)
		И КэшированныеЗначения.КоэффициентыУпаковок[ТекущаяСтрока.Упаковка] = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия.Валюта)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия.Валюта)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия.Валюта)
		И ЗначениеЗаполнено(СтруктураПараметровДействия.Партнер)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия.Соглашение)
		И ЗначениеЗаполнено(СтруктураПараметровДействия.Валюта)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураПоставщика) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
	    Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПоставщика", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) 
		И Не СтруктураПараметровДействия.НеВыполнятьПроверкуДляПользователя
		И ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураПоставщика)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакИспользованияХарактеристик")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИспользоватьАвтоматическиеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьАвтоматическиеСкидки") Тогда
				ИспользоватьАвтоматическиеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если (ИспользоватьРучныеСкидки 
			И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах = Неопределено)
			Или (ИспользоватьАвтоматическиеСкидки 
			И КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах = Неопределено) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьРучныеСкидки  <> Неопределено 
			И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
		И (ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) 
		И ТекущаяСтрока.ХарактеристикиИспользуются
		Или Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) 
		И Не ТекущаяСтрока.ХарактеристикиИспользуются) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ПараметрыДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию", ПараметрыДействия)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
		И ЗначениеЗаполнено(ПараметрыДействия.Организация)
		И ЗначениеЗаполнено(ПараметрыДействия.Подразделение)
		И Не ЗначениеЗаполнено(ТекущаяСтрока.СтатьяРасходов) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьУчетноеКоличествоНоменклатуры")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий)
	Перем СтруктураПараметровДействия;

	СтруктураПолейТЧ = Новый Структура;

	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьСтатьюАналитикуРасходов") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс",Суффикс)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Количество"+Суффикс    , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("УсловиеЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПоставщика") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("НоменклатураПоставщика");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"             , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСумму),"КоличествоУпаковок",СтруктураДействий.ПересчитатьСумму), 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"              , 0);
		СтруктураПолейТЧ.Вставить("Количество"         , 0);
		СтруктураПолейТЧ.Вставить("Цена      "         , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("Цена"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"  			   , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"   		       , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДаннымУчета", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПоДаннымУчета"        , 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("СрокПоставки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВестиУчетПоГТД");
		СтруктураПолейТЧ.Вставить("ЭтоУслуга");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		СтруктураПолейТЧ.Вставить("Активность");
		СтруктураПолейТЧ.Вставить("ИндексКартинки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара") 
		ИЛИ СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураИсходногоКачества");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда

		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВариантКомплектации");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");

	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда

		СтруктураПолейТЧ.Вставить("Расхождение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаВзаиморасчетов");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда
		
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки");
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание") Тогда
		СтруктураПолейТЧ.Вставить("Содержание");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураПараметровДействия) Тогда
		Для Каждого ПолеСтруктуры Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(ПолеСтруктуры.Ключ);
			ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
			Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ+ПолеСтруктуры.Ключ, 0);
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ, 0);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения") Тогда
		СтруктураПолейТЧ.Вставить("СуммаВознаграждения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию") Тогда
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОформленияПродажи");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагиНедоборНеотгружаемые") Тогда
		СтруктураПолейТЧ.Вставить("ЕстьНедобор");
		СтруктураПолейТЧ.Вставить("ЕстьНеотгружаемые");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажиНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьУчетноеКоличествоНоменклатуры") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ИндексСовместноПродаваемыеТовары");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемВесУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки");
		СтруктураПолейТЧ.Вставить("ВесУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантОбеспечения") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("БезВозвратнойТары");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ОтмененоБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Отменено");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("АктивностьБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Активность");
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ,ТекущаяСтрока);
	
	Возврат СтруктураПолейТЧ;
	
КонецФункции

Функция ПолучитьКоэффициентУпаковки(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекКоэффициент = КэшированныеЗначения.КоэффициентыУпаковок[ТекУпаковка];
	Иначе
		ТекКоэффициент = 1;
	КонецЕсли;

	Возврат ТекКоэффициент;

КонецФункции

Функция ПолучитьОбъемУпаковки(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекОбъем = КэшированныеЗначения.ОбъемУпаковок[ТекУпаковка];
	Иначе
		ТекОбъем = 0;
	КонецЕсли;

	Возврат ТекОбъем;

КонецФункции

Функция ПолучитьВесУпаковки(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекВес = КэшированныеЗначения.ВесУпаковок[ТекУпаковка];
	Иначе
		ТекВес = 0;
	КонецЕсли;

	Возврат ТекВес;

КонецФункции
