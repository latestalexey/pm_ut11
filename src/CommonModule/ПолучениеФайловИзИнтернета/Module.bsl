////////////////////////////////////////////////////////////////////////////////
// Подсистема "Получение файлов из интернета"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получить файл из Интернета по протоколу http(s), либо ftp и сохранить его во временный файл.
//
// Параметры:
//   URL                  - Строка - url файла в формате
//                                   [Протокол://]<Сервер>/<Путь к файлу на сервере>
//   ПараметрыПолучения   - Структура со свойствами
//     ПутьДляСохранения    - Строка - путь на сервере (включая имя файла), для сохранения скачанного файла
//     Пользователь         - Строка - пользователь от имени которого установлено соединение
//     Пароль               - Строка - пароль пользователя от которого установлено соединение
//     Порт                 - Число  - порт сервера с которым установлено соединение
//     Таймаут              - Число  - таймаут на получение файла, в секундах
//     ЗащищенноеСоединение - Булево - для случая http загрузки флаг указывает,
//                                     что соединение должно производиться через https
//     ПассивноеСоединение  - Булево - для случая ftp загрузки флаг указывает,
//                                     что соединение должно пассивным (или активным)
//
// Возвращаемое значение:
//   Структура, со свойствами
//     Статус - Булево - ключ присутствует в структуре всегда, значения
//                       Истина - вызов функции успешно завершен
//                       Ложь   - вызов функции завершен неудачно
//     Путь   - Строка - путь к файлу на сервере, ключ используется только
//                       если статус Истина
//     СообщениеОбОшибке - Строка - сообщение об ошибке, если статус Ложь
//
Функция СкачатьФайлНаСервере(знач URL, ПараметрыПолучения = Неопределено) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство, при анализе параметров получения файлов
	// из ПараметрыПолучения. Содержат значения переданных параметров получения файла
	Перем ПутьДляСохранения, Пользователь, Пароль, Порт, Таймаут,
	      ЗащищенноеСоединение, ПассивноеСоединение;
	
	// Инициализируем параметры скачивания файла
	Если ПараметрыПолучения = Неопределено Тогда
		ПараметрыПолучения = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПутьДляСохранения", ПутьДляСохранения) Тогда
		ПутьДляСохранения = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пользователь", Пользователь) Тогда
		Пользователь = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пароль", Пароль) Тогда
		Пароль = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Порт", Порт) Тогда
		Порт = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Таймаут", Таймаут) Тогда
		Таймаут = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ЗащищенноеСоединение", ЗащищенноеСоединение) Тогда
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПассивноеСоединение", ПассивноеСоединение) Тогда
		ПассивноеСоединение = Неопределено;
	КонецЕсли;
	
	НастройкаСохранения = Новый Соответствие;
	НастройкаСохранения.Вставить("МестоХранения", "Сервер");
	НастройкаСохранения.Вставить("Путь", ПутьДляСохранения);
	
	Результат = ПолучениеФайловИзИнтернетаКлиентСервер.ПодготовитьПолучениеФайла(
		URL,
		Пользователь,
		Пароль,
		Порт,
		Таймаут,
		ЗащищенноеСоединение,
		ПассивноеСоединение,
		НастройкаСохранения);
	
	Возврат Результат;
	
КонецФункции

// Получить файл из Интернета по протоколу http(s), либо ftp и сохранить его во временное хранилище.
//
// Параметры:
//   URL                  - Строка - url файла в формате:
//                                   [Протокол://]<Сервер>/<Путь к файлу на сервере>
//   ПараметрыПолучения   - Структура со свойствами
//     Пользователь         - Строка - пользователь от имени которого установлено соединение
//     Пароль               - Строка - пароль пользователя от которого установлено соединение
//     Порт                 - Число  - порт сервера с которым установлено соединение
//     Таймаут              - Число  - таймаут на получение файла, в секундах
//     ЗащищенноеСоединение - Булево - для случая http загрузки флаг указывает,
//                                     что соединение должно производиться через https
//     ПассивноеСоединение  - Булево - для случая ftp загрузки флаг указывает,
//                                     что соединение должно пассивным (или активным)
//
// Возвращаемое значение:
//   Структура со свойствами
//     Статус  - Булево - ключ присутствует в структуре всегда, значения
//                        Истина - вызов функции успешно завершен
//                        Ложь   - вызов функции завершен неудачно
//     Путь    - Строка - адрес временного хранилища с двоичными данными файла,
//                        ключ используется только если статус Истина
//     СообщениеОбОшибке - Строка - сообщение об ошибке, если статус Ложь
//
Функция СкачатьФайлВоВременноеХранилище(знач URL, ПараметрыПолучения = Неопределено) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство, при анализе параметров получения файлов
	// из ПараметрыПолучения. Содержат значения переданных параметров получения файла
	Перем ПутьДляСохранения, Пользователь, Пароль, Порт, Таймаут,
	      ЗащищенноеСоединение, ПассивноеСоединение;
		  
	// Получаем параметры получения файла
	Если ПараметрыПолучения = Неопределено Тогда
		ПараметрыПолучения = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПутьДляСохранения", ПутьДляСохранения) Тогда
		ПутьДляСохранения = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пользователь", Пользователь) Тогда
		Пользователь = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пароль", Пароль) Тогда
		Пароль = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Порт", Порт) Тогда
		Порт = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Таймаут", Таймаут) Тогда
		Таймаут = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ЗащищенноеСоединение", ЗащищенноеСоединение) Тогда
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПассивноеСоединение", ПассивноеСоединение) Тогда
		ПассивноеСоединение = Неопределено;
	КонецЕсли;
	
	НастройкаСохранения = Новый Соответствие;
	НастройкаСохранения.Вставить("МестоХранения", "ВременноеХранилище");
	
	Результат = ПолучениеФайловИзИнтернетаКлиентСервер.ПодготовитьПолучениеФайла(
		URL,
		Пользователь,
		Пароль,
		Порт,
		Таймаут,
		ЗащищенноеСоединение,
		ПассивноеСоединение,
		НастройкаСохранения);
	
	Возврат Результат;
	
КонецФункции

// Записывает двоичные данные в файл, хранящийся во временном хранилище
//
// Параметры:
//   АдресВоВременномХранилище - Строка - адрес двоичных данных файла 
//                                        во временном хранилище
//   ИмяФайла                  - Строка - путь по которому файл необходимо сохранить
//                                        на сервере
//
Функция СохранитьФайлИзВременногоХранилищаНаСервере(АдресВоВременномХранилище, ИмяФайла) Экспорт
	
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ДанныеФайла.Записать(ИмяФайла);
	
	Возврат Истина;
	
КонецФункции

// Получает имя временного файла вызовом одноименной системной функции на сервере
//
Функция ПолучитьИмяВременногоФайлаНаСервере() Экспорт

	Возврат ПолучитьИмяВременногоФайла();

КонецФункции

// Возвращает параметры настройки прокси сервера на стороне сервера 1С:Предприятие
//
Функция ПолучитьНастройкиПроксиНаСервере1СПредприятие() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиПроксиНаСервере = Константы.НастройкаПроксиСервера.Получить().Получить();
	Если ТипЗнч(НастройкиПроксиНаСервере) <> Тип("Соответствие") Тогда
		Возврат Неопределено;
	Иначе
		
		ИспользоватьНастройкиИзФайла = НастройкиПроксиНаСервере.Получить("ИспользоватьНастройкиИзФайлаКонфигурации");
		Если ИспользоватьНастройкиИзФайла = Истина Тогда
			НастройкиИзФайла = НастройкиПроксиСервераВФайлеКонфигурации();
			НастройкиИзФайла.Вставить("ИспользоватьНастройкиИзФайлаКонфигурации", Истина);
			Возврат НастройкиИзФайла;
		Иначе
			Возврат НастройкиПроксиНаСервере;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Сохраняет параметры настройки прокси сервера на стороне сервера 1С:Предприятие
//
Процедура СохранитьНастройкиПроксиНаСервере1СПредприятие(знач Настройки) Экспорт
	
	ИспользоватьНастройкиИзФайла = Истина;
	Попытка
		ЗаписатьНастройкиПроксиСервераВФайлКонфигурации(Настройки);
	Исключение
		ИспользоватьНастройкиИзФайла = Ложь;
	КонецПопытки;
	
	Настройки["ИспользоватьНастройкиИзФайлаКонфигурации"] = ИспользоватьНастройкиИзФайла;
	УстановитьПривилегированныйРежим(Истина);
	Константы.НастройкаПроксиСервера.Установить(Новый ХранилищеЗначения(Настройки));
	
КонецПроцедуры

// Возвращает настройку прокси сервера для доступа к интернет со стороны
// клиента для текущего пользователя.
//
Функция ПолучитьНастройкуПроксиСервера() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкаПроксиСервера");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("НастройкиПроксиСервера", ПолучитьНастройкуПроксиСервера());
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Записывает событие-ошибку в журнал регистрации. Имя события
// "Получение файлов из Интернета".
// Параметры
//   СообщениеОбОшибке - строка сообщение об ошибке
// 
Процедура ЗаписатьОшибкуВЖурналРегистрации(знач СообщениеОбОшибке) Экспорт
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Получение файлов из Интернета'"),
		УровеньЖурналаРегистрации.Ошибка, , ,
		СообщениеОбОшибке
	);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.4";
	Обработчик.Процедура = "ПолучениеФайловИзИнтернета.ОбновитьХранимыеНастройкиПрокси";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия      = "2.1.2.5";
	Обработчик.Процедура   = "ПолучениеФайловИзИнтернета.ПеренестиНастройкиПроксиНаСервере1СПредприятияВФайлКонфигурацииСети";
	Обработчик.ОбщиеДанные = Истина;
	
КонецПроцедуры

// Инициализирует новые настройки прокси-сервера "ИспользоватьПрокси"
// и "ИспользоватьСистемныеНастройки".
//
Процедура ОбновитьХранимыеНастройкиПрокси() Экспорт
	
	МассивПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого ПользовательИБ Из МассивПользователейИБ Цикл
		
		НастройкаПроксиСервера = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкаПроксиСервера", ,	, ,	ПользовательИБ.Имя);
		
		Если ТипЗнч(НастройкаПроксиСервера) = Тип("Соответствие") Тогда
			
			СохранитьНастройкиПользователя = Ложь;
			Если НастройкаПроксиСервера.Получить("ИспользоватьПрокси") = Неопределено Тогда
				НастройкаПроксиСервера.Вставить("ИспользоватьПрокси", Ложь);
				СохранитьНастройкиПользователя = Истина;
			КонецЕсли;
			Если НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки") = Неопределено Тогда
				НастройкаПроксиСервера.Вставить("ИспользоватьСистемныеНастройки", Ложь);
				СохранитьНастройкиПользователя = Истина;
			КонецЕсли;
			Если СохранитьНастройкиПользователя Тогда
				ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
					"НастройкаПроксиСервера", , НастройкаПроксиСервера, , ПользовательИБ.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкаПроксиСервера = ПолучитьНастройкиПроксиНаСервере1СПредприятие();
	
	Если ТипЗнч(НастройкаПроксиСервера) = Тип("Соответствие") Тогда
		
		СохранитьНастройкиСервера = Ложь;
		Если НастройкаПроксиСервера.Получить("ИспользоватьПрокси") = Неопределено Тогда
			НастройкаПроксиСервера.Вставить("ИспользоватьПрокси", Ложь);
			СохранитьНастройкиСервера = Истина;
		КонецЕсли;
		Если НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки") = Неопределено Тогда
			НастройкаПроксиСервера.Вставить("ИспользоватьСистемныеНастройки", Ложь);
			СохранитьНастройкиСервера = Истина;
		КонецЕсли;
		Если СохранитьНастройкиСервера Тогда
			СохранитьНастройкиПроксиНаСервере1СПредприятие(НастройкаПроксиСервера);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеренестиНастройкиПроксиНаСервере1СПредприятияВФайлКонфигурацииСети() Экспорт
	
	НастройкиПроксиНаСервере = ПолучитьНастройкиПроксиНаСервере1СПредприятие();
	Если ТипЗнч(НастройкиПроксиНаСервере) <> Тип("Соответствие") Тогда
		
		// Если настройки прокси-сервера для сервера 1С:Предприятия не задавались, то
		// использовать настройки из файла конфигурации сети
		НастройкиПроксиНаСервере = НастройкиПроксиСервераВФайлеКонфигурации();
		НастройкиПроксиНаСервере.Вставить("ИспользоватьНастройкиИзФайлаКонфигурации", Истина);
		
		УстановитьПривилегированныйРежим(Истина);
		Константы.НастройкаПроксиСервера.Установить(Новый ХранилищеЗначения(НастройкиПроксиНаСервере));
		
	Иначе
		
		ИспользоватьНастройкиИзФайла = НастройкиПроксиНаСервере.Получить("ИспользоватьНастройкиИзФайлаКонфигурации");
		Если ИспользоватьНастройкиИзФайла <> Неопределено Тогда
			// Настройки уже переносились или сохранялись пользователем.
			Возврат;
		КонецЕсли;
		
		// Попытка перенести настройки прокси-сервера в файл конфигурации сети.
		СохранитьНастройкиПроксиНаСервере1СПредприятие(НастройкиПроксиНаСервере);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции для работы с файлом настроек прокси-сервера

// Определяет путь к файлу конфигурации сети платформы "inetcfg.xml".
//
// Возвращаемое значение - структура с полями: Путь (Строка) - путь к файлу
//						   конфигурации сети платформы "inetcfg.xml";
//						   ОбщийДляВсехВерсийПлатформы (Булево) - Истина - если
//						   используется общий файл конфигурации для всех
//						   версий платформы 1С:Предприятие; Ложь - в противном
//						   случае.
//
Функция ПутьКФайлуКонфигурацииСети()
	
	КаталогКонфФайловВерсии  = КаталогПрограммы() + "conf\";
	ПутьККонфФайлуСетиВерсии = КаталогКонфФайловВерсии + "inetcfg.xml";
	
	Результат = Новый Структура("Путь,ОбщийДляВсехВерсийПлатформы", ПутьККонфФайлуСетиВерсии, Ложь);
	
	// 1. Проверить, существует ли файл inetcfg.xml в каталоге "...\bin\conf\",
	// т.к. этот файл имеет больший приоритет, чем файл в каталоге общих
	// настроечных файлов версий платформы.
	ОписательКонфФайла = Новый Файл(ПутьККонфФайлуСетиВерсии);
	Если ОписательКонфФайла.Существует() Тогда
		Возврат Результат;
	КонецЕсли;
	
	// 2. Определить из конфигурационного файла платформы путь к каталогу общих
	// конфигурационных файлов версий платформы.
	
	ПутьККонфФайлуВерсии = КаталогКонфФайловВерсии + "conf.cfg";
	ОписательКонфФайла = Новый Файл(ПутьККонфФайлуВерсии);
	Если НЕ ОписательКонфФайла.Существует() Тогда
		Возврат Результат;
	КонецЕсли;
	
	// 3. Разбор содержимого файла "conf.cfg" для определения
	// пути конфигурационного файла "inetcfg.xml"
	ПутьККаталогуКонфФайлов = "";
	Попытка
		
		ЧтениеФайла = Новый ЧтениеТекста(ПутьККонфФайлуВерсии);
		ПрочитаннаяСтрока = ЧтениеФайла.ПрочитатьСтроку();
		Пока ПрочитаннаяСтрока <> Неопределено Цикл
			СтрокаКонфигурации = СокрЛП(ПрочитаннаяСтрока);
			Если Найти(ВРег(СтрокаКонфигурации), "CONFLOCATION") = 1 Тогда
				ПраваяЧастьСтрокиКонфигурации = СокрЛП(Сред(СтрокаКонфигурации, 13));
				Если Лев(ПраваяЧастьСтрокиКонфигурации, 1) = "=" Тогда
					ПутьККаталогуКонфФайлов = СокрЛП(Сред(ПраваяЧастьСтрокиКонфигурации, 2));
				КонецЕсли;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ПутьККаталогуКонфФайлов) Тогда
				Прервать;
			КонецЕсли;
			ПрочитаннаяСтрока = ЧтениеФайла.ПрочитатьСтроку();
		КонецЦикла;
		ЧтениеФайла.Закрыть();
		
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	Если ПустаяСтрока(ПутьККаталогуКонфФайлов) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПравыйСимвол = Прав(ПутьККаталогуКонфФайлов, 1);
	Если ПравыйСимвол <> "\" И ПравыйСимвол <> "/" Тогда
		ПутьККаталогуКонфФайлов = ПутьККаталогуКонфФайлов + "\";
	КонецЕсли;
	
	ОписательКаталогаОбщихКонфФайлов = Новый Файл(ПутьККаталогуКонфФайлов);
	Если ОписательКаталогаОбщихКонфФайлов.Существует()
		И ОписательКаталогаОбщихКонфФайлов.ЭтоКаталог() Тогда
		Результат.Путь = ПутьККаталогуКонфФайлов + "inetcfg.xml";
		Результат.ОбщийДляВсехВерсийПлатформы = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции для чтения настроек прокси-сервера из файла

// Возвращает настройки прокси-сервера из XML-файла конфигурации сети платформы
//
// Возвращаемое значение: Соответствие - настройки прокси-сервера из файла
//
Функция НастройкиПроксиСервераВФайлеКонфигурации()
	
	ОписательПутиКФайлуКонфигурации = ПутьКФайлуКонфигурацииСети();
	ПутьКФайлуКонфигурацииПрокси    = ОписательПутиКФайлуКонфигурации.Путь;
	
	НастройкиПрокси = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПустыеНастройкиПроксиСервера();
	НастройкиПрокси["ОбщиеДляВсехВерсийПлатформы"] = ОписательПутиКФайлуКонфигурации.ОбщийДляВсехВерсийПлатформы;
	
	ОписательФайлаКонфигурации = Новый Файл(ПутьКФайлуКонфигурацииПрокси);
	Если НЕ ОписательФайлаКонфигурации.Существует() Тогда
		// Если файл не существует, тогда системные настройки
		НастройкиПрокси["ИспользоватьПрокси"]             = Истина;
		НастройкиПрокси["ИспользоватьСистемныеНастройки"] = Истина;
		Возврат НастройкиПрокси;
	КонецЕсли;
	
	Попытка
		ПрочитатьНастройкиПроксиСервераИзФайлаКонфигурации(ПутьКФайлуКонфигурацииПрокси, НастройкиПрокси);
	Исключение
		// Возможно, файл не является правильным XML-файлом
		// или нет доступа на чтение
		НастройкиПрокси["ИспользоватьПрокси"]             = Истина;
		НастройкиПрокси["ИспользоватьСистемныеНастройки"] = Истина;
		Возврат НастройкиПрокси;
		
	КонецПопытки;
	
	Возврат НастройкиПрокси;
	
КонецФункции

// Выполняет чтение настроек прокси-сервера из XML-файла конфигурации сети
//
// Параметры:
//	ПутьКФайлуКонфигурацииПрокси (Строка) - путь к XML-файлу конфигурации сети, из которого требуется
//											прочитать настройки прокси-сервера
//	НастройкиПрокси (Соответствие) - неинициализированные настройки прокси-сервера, заполняемые
//									 настройками из XML-файла конфигурации
//
Процедура ПрочитатьНастройкиПроксиСервераИзФайлаКонфигурации(ПутьКФайлуКонфигурацииПрокси, НастройкиПрокси)
	
	ntlm               = Неопределено;
	// Для того, чтобы настройки прокси не использовались,
	// содержимое файла inecfg.xml должно иметь вид:
	// <InternetProxy ntlm="false" />
	
	// Инициализация читаемых переменных
	ИмяПользователя    = Неопределено;
	ПарольПользователя = Неопределено;
	
	НеИспользоватьДляЛокальныхАдресов = Неопределено;
	СтрокаПротоколов                  = Неопределено;
	СтрокаАдресовСерверовИсключений   = Неопределено;
	
	ЕстьПрочиеУзлы     = Ложь;
	ЕстьПрочиеАтрибуты = Ложь;
	
	// Последовательное чтение настроек из XML-файла конфигурации сети
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуКонфигурацииПрокси);
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если НРег(СокрЛП(ЧтениеXML.Имя)) <> "internetproxy" Тогда
			
			// Определение соответствия формату файла конфигурации сети
			ЕстьПрочиеУзлы = Истина;
			
		Иначе
			
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					
					// Чтение настроек прокси-сервера
					ИмяАтрибута = НРег(СокрЛП(ЧтениеXML.Имя));
					
					Если ИмяАтрибута = "protocols" Тогда
						СтрокаПротоколов = ЧтениеXML.Значение;
					ИначеЕсли ИмяАтрибута = "user" Тогда
						ИмяПользователя = ЧтениеXML.Значение;
					ИначеЕсли ИмяАтрибута = "password" Тогда
						ПарольПользователя = ЧтениеXML.Значение;
					ИначеЕсли ИмяАтрибута = "bypassonlocal" Тогда
						НеИспользоватьДляЛокальныхАдресов = (ЧтениеXML.Значение = "true");
					ИначеЕсли ИмяАтрибута = "bypassonaddresses" Тогда
						СтрокаАдресовСерверовИсключений = ЧтениеXML.Значение;
					ИначеЕсли ИмяАтрибута = "bypassonaddresses" Тогда
						СтрокаАдресовСерверовИсключений = ЧтениеXML.Значение;
					ИначеЕсли ИмяАтрибута = "ntlm" Тогда
						ntlm = НРег(СокрЛП(ЧтениеXML.Значение));
					Иначе
						// Определение соответствия формату файла конфигурации сети
						ЕстьПрочиеАтрибуты = Истина;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если содержимое файла inecfg.xml имеет вид:
	// <InternetProxy ntlm="false" />,
	// то не использовать прокси-сервер
	Если ntlm = "false"
		И ИмяПользователя                   = Неопределено
		И ПарольПользователя                = Неопределено
		И НеИспользоватьДляЛокальныхАдресов = Неопределено
		И СтрокаПротоколов                  = Неопределено
		И СтрокаАдресовСерверовИсключений   = Неопределено
		И НЕ ЕстьПрочиеУзлы
		И НЕ ЕстьПрочиеАтрибуты Тогда
		
		НастройкиПрокси["ИспользоватьПрокси"] = Ложь;
		Возврат;
		
	КонецЕсли;
	
	НастройкиПрокси["ИспользоватьПрокси"] = Истина;
	
	Если ИмяПользователя <> Неопределено Тогда
		НастройкиПрокси["Пользователь"] = ИмяПользователя;
	КонецЕсли;
	
	Если ПарольПользователя <> Неопределено Тогда
		НастройкиПрокси["Пароль"] = ПарольПользователя;
	КонецЕсли;
	
	Если НеИспользоватьДляЛокальныхАдресов <> Неопределено Тогда
		НастройкиПрокси["НеИспользоватьПроксиДляЛокальныхАдресов"] = НеИспользоватьДляЛокальныхАдресов;
	КонецЕсли;
	
	Протоколы = ПротоколыИзСтрокиПротоколов(СтрокаПротоколов);
	
	ОписаниеПроксиПоУмолчанию = Протоколы.Получить("");
	Если ОписаниеПроксиПоУмолчанию <> Неопределено Тогда
		НастройкиПрокси["Сервер"] = ОписаниеПроксиПоУмолчанию.Адрес;
		НастройкиПрокси["Порт"]   = ОписаниеПроксиПоУмолчанию.Порт;
	КонецЕсли;
	
	Протоколы.Удалить("");
	Если Протоколы.Количество() > 0 Тогда
		НастройкиПрокси.Вставить("ДополнительныеНастройкиПрокси", Протоколы);
	КонецЕсли;
	
	СерверыИсключений = Новый Массив;
	ЗаполнитьАдресаСерверовИсключений(СерверыИсключений, СтрокаАдресовСерверовИсключений);
	
	Если СерверыИсключений.Количество() > 0 Тогда
		НастройкиПрокси.Вставить("НеИспользоватьПроксиДляАдресов", СерверыИсключений);
	КонецЕсли;
	
КонецПроцедуры

// Выделяет адреса прокси-серверов из строки протоколов
//
// Параметры:
//	СтрокаПротоколов (Строка) - строка, содержащая описания прокси-серверов по протоколам
//								формат строки:
//									[протокол1=][АдресСервера1[:Порт1]][Пробел[протоколN=][АдресСервераN[:ПортN]]]
//								Возможные протоколы: "http", "https", "ftp" и "" (сервер по умолчанию)
//
// Возвращаемое значение: Соответствие - параметры прокси-серверов по протоколам.
//						  Ключ соответствия - протокол (строка), значение - структура (Адрес, Порт) - адрес и
//						  порт прокси-сервера
//
Функция ПротоколыИзСтрокиПротоколов(Знач СтрокаПротоколов = Неопределено)
	
	Результат = Новый Соответствие;
	
	Если СтрокаПротоколов = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Подготовка разбираемой строки протоколов
	СтрокаПротоколов = СокрЛП(СтрокаПротоколов);
	
	СимволПробел = " ";
	ДлинаСтроки  = СтрДлина(СтрокаПротоколов);
	Пока ДлинаСтроки > 0 Цикл
		
		// Серверы по протоколам разделены пробелом
		ПозицияПробела = Найти(СтрокаПротоколов, СимволПробел);
		Если ПозицияПробела = 0 Тогда
			ПозицияПробела = ДлинаСтроки + 1;
		КонецЕсли;
		
		// Выделение настроек по протоколам
		Если Найти(СтрокаПротоколов, "http=") = 1 Тогда
			ДлинаПодстрокиПротокола = 5;
			Протокол                = "http";
		ИначеЕсли Найти(СтрокаПротоколов, "https=") = 1 Тогда
			ДлинаПодстрокиПротокола = 6;
			Протокол                = "https";
		ИначеЕсли Найти(СтрокаПротоколов, "ftp=") = 1 Тогда
			ДлинаПодстрокиПротокола = 4;
			Протокол                = "ftp";
		Иначе
			// Сервер по умолчанию
			ДлинаПодстрокиПротокола = 0;
			Протокол                = "";
		КонецЕсли;
		
		ДлинаПодстрокиОписанияСервера = ПозицияПробела - ДлинаПодстрокиПротокола - 1;
		ПодстрокаОписанияСервера = Сред(СтрокаПротоколов,
										ДлинаПодстрокиПротокола + 1,
										ДлинаПодстрокиОписанияСервера);
		
		// Получение описания сервера - сервер и порт
		ОписаниеСервера = СтрокаОписанияСервераВСерверИПорт(ПодстрокаОписанияСервера);
		
		Результат.Вставить(Протокол, ОписаниеСервера);
		
		СтрокаПротоколов = СокрЛП(Сред(СтрокаПротоколов, ПозицияПробела + 1));
		ДлинаСтроки      = СтрДлина(СтрокаПротоколов);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает из строки описания сервера, записанной в формате "[АдресСервера]:[Порт]"
// адрес сервера и порт
//
// Параметры:
//	СтрокаОписанияСервера (Строка) - строка описания сервера в формате "[АдресСервера]:[Порт]"
// Возвращаемое значение:
//	Структура с полями Адрес (Строка) и Порт (Число) - адрес и порт сервера
//
Функция СтрокаОписанияСервераВСерверИПорт(СтрокаОписанияСервера)
	
	Результат = Новый Структура("Адрес,Порт", "", 0);
	ПозицияДвоеточия = Найти(СтрокаОписанияСервера, ":");
	
	Если ПозицияДвоеточия > 0 Тогда
		Попытка
			Результат.Порт = Число(Сред(СтрокаОписанияСервера, ПозицияДвоеточия + 1));
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ПозицияДвоеточия = 0 Тогда
		Результат.Адрес = СтрокаОписанияСервера;
	Иначе
		Результат.Адрес = Лев(СтрокаОписанияСервера, ПозицияДвоеточия - 1);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выделяет из строки адресов серверов-исключений, записанных через пробел,
// адреса серверов-исключений
// и заполняет ими массив СерверыИсключений
//
// Параметры:
//	СерверыИсключений (Массив) - массив адресов серверов, которые необходимо заполнить
//	СтрокаАдресовСерверовИсключений (Строка) - адреса серверов-исключений, записанные через пробел
//
Процедура ЗаполнитьАдресаСерверовИсключений(СерверыИсключений, Знач СтрокаАдресовСерверовИсключений)
	
	Если СтрокаАдресовСерверовИсключений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка строки для разбора
	СтрокаАдресовСерверовИсключений = СокрЛП(СтрокаАдресовСерверовИсключений);
	ОдинПробел = " ";
	ДваПробела = "  ";
	// Удаление нескольких идущих подряд пробелов
	Пока Найти(СтрокаАдресовСерверовИсключений, ДваПробела) > 0 Цикл
		АдресаСерверовИсключений = СтрЗаменить(АдресаСерверовИсключений, ДваПробела, ОдинПробел);
	КонецЦикла;
	
	ДлинаСтроки = СтрДлина(СтрокаАдресовСерверовИсключений);
	
	АдресаСерверов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		СтрокаАдресовСерверовИсключений,
		ОдинПробел);
	
	Для каждого АдресСервераИсключения Из АдресаСерверов Цикл
		СерверыИсключений.Добавить(АдресСервераИсключения);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции для записи настроек прокси-сервера в файл

// Записывает настройки прокси-сервера в конфигурационный XML-файл
//
// Параметры:
//	НастройкиПрокси (Соответствие) - настройки прокси-сервера.
//
Процедура ЗаписатьНастройкиПроксиСервераВФайлКонфигурации(НастройкиПрокси)
	
	ОписательПутиКФайлуКонфигурации = ПутьКФайлуКонфигурацииСети();
	ПутьКФайлуКонфигурацииПрокси    = ОписательПутиКФайлуКонфигурации.Путь;
	
	Если ТипЗнч(НастройкиПрокси) <> Тип("Соответствие")
		ИЛИ (НастройкиПрокси.Получить("ИспользоватьПрокси") = Истина
			И НастройкиПрокси.Получить("ИспользоватьСистемныеНастройки") = Истина) Тогда
		
		// Если системные настройки, то файл конфигурации необходимо удалить
		ОписательФайлаКонфигурации = Новый Файл(ПутьКФайлуКонфигурацииПрокси);
		Если ОписательФайлаКонфигурации.Существует() Тогда
			Попытка
				УдалитьФайлы(ПутьКФайлуКонфигурацииПрокси);
			Исключение
				ИнформацияобОшибке = ИнформацияОбОшибке();
				ТекстОшибки = НСтр("ru = 'Не удалось удалить файл конфигурации прокси-сервера ""%1"": %2'");
				ЗаписатьОшибкуВЖурналРегистрации(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстОшибки,
						ПутьКФайлуКонфигурацииПрокси,
						ПодробноеПредставлениеОшибки(ИнформацияобОшибке)));
				ВызватьИсключение;
			КонецПопытки;
		КонецЕсли;
		
	Иначе
		
		Попытка
			
			// Последовательная запись настроек конфигурации в файл конфигурации
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.ОткрытьФайл(ПутьКФайлуКонфигурацииПрокси, "utf-8");
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			ЗаписьXML.ЗаписатьНачалоЭлемента("InternetProxy");
			
			Если НастройкиПрокси.Получить("ИспользоватьПрокси") <> Истина Тогда
				
				// Если не использовать прокси-сервер, то содержимое файла должно иметь вид:
				// <InternetProxy ntlm="false" />
				ЗаписьXML.ЗаписатьАтрибут("ntlm", "false");
				
			иначе
				
				СтрокаПротоколов = СтрокаПротоколовИзНастроекПрокси(НастройкиПрокси);
				Если НЕ ПустаяСтрока(СтрокаПротоколов) Тогда
					ЗаписьXML.ЗаписатьАтрибут("protocols", СтрокаПротоколов);
				КонецЕсли;
				
				ИмяПользователя    = НастройкиПрокси.Получить("Пользователь");
				ПарольПользователя = НастройкиПрокси.Получить("Пароль");
				Если НЕ ПустаяСтрока(ИмяПользователя)
					ИЛИ НЕ ПустаяСтрока(ПарольПользователя) Тогда
					ЗаписьXML.ЗаписатьАтрибут("user"    , ИмяПользователя);
					ЗаписьXML.ЗаписатьАтрибут("password", ПарольПользователя);
				КонецЕсли;
				
				НеИспользоватьДляЛокальныхАдресов = НастройкиПрокси.Получить("НеИспользоватьПроксиДляЛокальныхАдресов");
				Если НеИспользоватьДляЛокальныхАдресов <> Неопределено Тогда
					ЗаписьXML.ЗаписатьАтрибут("bypassOnLocal", ?(НеИспользоватьДляЛокальныхАдресов = Истина, "true", "false"));
				КонецЕсли;
				
				СтрокаАдресовСерверовИсключений = СтрокаСерверовИсключенийДляПрокси(НастройкиПрокси);
				Если НЕ ПустаяСтрока(СтрокаАдресовСерверовИсключений) Тогда
					ЗаписьXML.ЗаписатьАтрибут("bypassOnAddresses", СтрокаАдресовСерверовИсключений);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьКонецЭлемента();
			ЗаписьXML.Закрыть();
			
		Исключение
			
			ИнформацияобОшибке = ИнформацияОбОшибке();
			ТекстОшибки = НСтр("ru = 'Не удалось записать файл конфигурации прокси-сервера ""%1"": %2'");
			ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстОшибки,
					ПутьКФайлуКонфигурацииПрокси,
					ПодробноеПредставлениеОшибки(ИнформацияобОшибке)));
			ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует строку протоколов из настроек прокси-сервера
//
// Параметры:
//	НастройкиПрокси (Соответствие) - настройки прокси-сервера
//
// Возвращаемое значение: Строка - строка адресов прокси серверов для протоколов
//	в формате:
//	[протокол1=][АдресСервера1[:Порт1]][Пробел[протоколN=][АдресСервераN[:ПортN]]]
Функция СтрокаПротоколовИзНастроекПрокси(НастройкиПрокси)
	
	Результат = "";
	
	РазделитьПробелом = Ложь;
	ДополнительныеНастройкиПрокси = НастройкиПрокси.Получить("ДополнительныеНастройкиПрокси");
	
	Если ТипЗнч(ДополнительныеНастройкиПрокси) = Тип("Соответствие") Тогда
		
		Для каждого ПротоколСервер Из ДополнительныеНастройкиПрокси Цикл
			
			Протокол        = ПротоколСервер.Ключ;
			ОписаниеСервера = ПротоколСервер.Значение;
			
			Если НЕ ПустаяСтрока(ОписаниеСервера.Адрес) Тогда
				
				Результат = Результат
					+ ?(РазделитьПробелом, " ", "")
					+ Протокол
					+ "="
					+ ОписаниеСервера.Адрес
					+ ?(ОписаниеСервера.Порт = 0, "", ":" + СтрЗаменить(Строка(ОписаниеСервера.Порт), Символ(160), ""));
				
				РазделитьПробелом = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Прокси по умолчанию
	СерверПоУмолчанию = НастройкиПрокси.Получить("Сервер");
	ПортПоУмолчанию   = НастройкиПрокси.Получить("Порт");
	Если НЕ ПустаяСтрока(СерверПоУмолчанию) Тогда
		
		Результат = Результат
			+ ?(РазделитьПробелом, " ", "")
			+ СерверПоУмолчанию
			+ ?(ПортПоУмолчанию = 0, "", ":" + СтрЗаменить(Строка(ПортПоУмолчанию), Символ(160), ""));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает строку адресов серверов, для которых не используется прокси-сервер
//
// Параметры:
//	НастройкиПрокси (Соответствие) - настройки прокси-сервера
//
// Возвращаемое значение: Строка - строка адресов серверов, разделенных
//						  пробелами
//
Функция СтрокаСерверовИсключенийДляПрокси(НастройкиПрокси)
	
	СерверыИсключений = НастройкиПрокси.Получить("НеИспользоватьПроксиДляАдресов");
	Если СерверыИсключений = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = "";
	
	РазделитьПробелом = Ложь;
	Для каждого АдресСервера Из СерверыИсключений Цикл
		Результат = Результат + ?(РазделитьПробелом, " ", "") + АдресСервера;
		РазделитьПробелом = Истина;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
