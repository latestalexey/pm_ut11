////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыСлужебныйКлиент: механизм обмена электронными документами.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Только для внутреннего использования
Функция ПолучитьПарольКСертификату(Сертификат, ПарольПользователя, Отпечаток = Неопределено, ПараметрыСертификата=Неопределено) Экспорт
	
	ПарольПолучен = Ложь;
	Если ПараметрыСертификата=Неопределено Тогда
		ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначенияРеквизитовВПривилегированномРежиме(
								Сертификат, "ЗапомнитьПарольКСертификату, ПарольПользователя, Отозван, Отпечаток");
	КонецЕсли;
	
	Если ПараметрыСертификата.Отозван Тогда
		ШаблонСообщения = НСтр("ru = 'Невозможно подписать документы. Сертификат (%1) отозван.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Сертификат);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		ПарольПользователя = Неопределено;
	Иначе
		Если ПарольПользователя <> Неопределено Тогда
			ПарольПолучен = Истина;
		ИначеЕсли ПараметрыСертификата.ЗапомнитьПарольКСертификату Тогда
			ПарольПользователя = ПараметрыСертификата.ПарольПользователя;
			ПарольПолучен = Истина;
		Иначе
			ЗаголовокФормы = НСтр("ru = 'Введите пароль для ЭЦП'");
			ПараметрыФормы = Новый Структура("Заголовок, ПредставлениеСертификата", ЗаголовокФормы, Сертификат);
			КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);
			Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
				ПарольПользователя = КодВозврата;
				ПарольПолучен = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Отпечаток = ПараметрыСертификата.Отпечаток;
	
	Возврат ПарольПолучен;
	
КонецФункции

Функция УстановитьРасширениеРаботыСКриптографиейНаКлиенте() Экспорт
	
	ТекстСообщения = НСтр("ru = 'Для дальнейшей работы необходимо установить ""Расширения для работы с криптографией"".'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
	УстановитьРасширениеРаботыСКриптографией();
	РасширениеПодключено = ПодключитьРасширениеРаботыСКриптографией();
	
	Если НЕ РасширениеПодключено Тогда
	
		ТекстСообщения = НСтр("ru = '""Расширение для работы с криптографией"" не подключено, операция прервана.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Результат = РасширениеПодключено;
	
КонецФункции
 
// Выводит результат проверки корректности сертификата криптографии.
//
// Параметры
//  Сертификат - СправочникСсылка.СертификатыЭЦП - ссылка на сертификат
//  Контекст - ПеречислениеСсылка.КонтекстыРаботыСЭД - где выполнять проверку
//  ПарольПользователя - строка - пароль к сертификату
//
Процедура ТестНастроекСертификата(
					Сертификат,
					Контекст,
					ПарольПользователя = Неопределено,
					ВыводитьТолькоОшибки = Ложь,
					Отказ = Ложь) Экспорт
					
	ПараметрыСертификата = ЭлектронныеДокументыСлужебныйВызовСервера.ПараметрыСертификата(Сертификат);
	
	Если НЕ ПараметрыСертификата.ЗапомнитьПарольКСертификату Тогда

		ПараметрыФормы = Новый Структура(
										"Заголовок, ПредставлениеСертификата",
										НСтр("ru = 'Введите пароль для ЭЦП'"),
										Сертификат);
		КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);
		
		Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
			ПарольПользователя = КодВозврата;
		КонецЕсли;
	Иначе
		
		ПарольПользователя = ПараметрыСертификата.ПарольПользователя;
	КонецЕсли;
	
	Если ПарольПользователя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Контекст = ПредопределенноеЗначение("Перечисление.КонтекстыРаботыСЭД.НаКлиенте") Тогда
		ТестСертификатаНаКлиенте(ПараметрыСертификата.Отпечаток, ПарольПользователя, ВыводитьТолькоОшибки, Отказ);
	Иначе
		ЭлектронныеДокументыСлужебныйВызовСервера.ТестСертификатаНаСервере(
				ПараметрыСертификата.Отпечаток,
				ПарольПользователя,
				ВыводитьТолькоОшибки,
				Отказ);
	КонецЕсли;
		
КонецПроцедуры

Функция ПроверитьИспользованиеИнтернетПоддержкаПользователей() Экспорт
	
	Использование = Неопределено;
	ЭлектронныеДокументыКлиентПереопределяемый.ПроверитьИспользованиеИнтернетПоддержкаПользователей(Использование);
	Если Использование = Неопределено Тогда
		Использование = Ложь;
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			Если Метаданные.Константы.Найти("ФайлОбработкиИнтернетПоддержкиПользователей") <> Неопределено Тогда
				Использование = Истина;
			КонецЕсли;
		#КонецЕсли
	КонецЕсли;
	
	Возврат Использование;
	
КонецФункции

// Открывает форму просмотра электронного документа.
//
// Параметры:
//  СсылкаНаЭД        - ссылка на электронный документ, открываемый для просмотра
//  ПараметрыОткрытия - структура, дополнительные параметры просмотра
//  ВладелецФормы     - управляемая форма
//
Процедура ОткрытьЭДДляПросмотра(СсылкаНаЭД, ПараметрыОткрытия = Неопределено, ВладелецФормы = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаМассивСертификатов = "";
	
	Попытка
		МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
		СсылкаНаМассивСертификатов = ПоместитьВоВременноеХранилище(МассивСтруктурСертификатов, Новый УникальныйИдентификатор)
	Исключение
	КонецПопытки;
	
	ПараметрыФормы = Новый Структура("СсылкаНаОбъект, СсылкаНаМассивСертификатов",
		СсылкаНаЭД, СсылкаНаМассивСертификатов);
	Если ВладелецФормы = Неопределено Тогда
		ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы);
	Иначе
		Если ПараметрыОткрытия = Неопределено Тогда
			ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы, ВладелецФормы);
		Иначе
			Окно = Неопределено;
			Если ТипЗнч(ПараметрыОткрытия) = Тип("ПараметрыВыполненияКоманды")
				ИЛИ ТипЗнч(ПараметрыОткрытия) = Тип("Структура")
				И ПараметрыОткрытия.Свойство("Окно") И ТипЗнч(ПараметрыОткрытия.Окно) = Тип("ОкноКлиентскогоПриложения") Тогда
				
				Окно = ПараметрыОткрытия.Окно;
			КонецЕсли;
			ОткрытьФорму("Справочник.ЭДПрисоединенныеФайлы.Форма.ФормаПросмотраЭД", ПараметрыФормы,
				ВладелецФормы, ПараметрыОткрытия.Уникальность, Окно);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает маркеры и расшифровывает их на клиенте
//
// Параметры:
//  СоответствиеПаролейДляЭДО - Соответствие, ключ - Соглашение, Значение - Пароль
//
// Возвращаемое значение:
//  Соответствие - ключ - Соглашение, значение - расшифрованные двоичные данные маркера
//
Функция СоответствиеМаркеров(СоответствиеПаролейДляЭДО) Экспорт
	
	СоответствиеВозврата = Новый Соответствие;
	ЗашифрованныеМаркеры = ЭлектронныеДокументыСлужебныйВызовСервера.ЗашифрованныеМаркеры(СоответствиеПаролейДляЭДО);
		
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецПопытки;
	
	Для Каждого Элемент ИЗ ЗашифрованныеМаркеры Цикл
		Попытка
			МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Элемент.Значение.ПарольКСертификату;
			Маркер = МенеджерКриптографии.Расшифровать(Элемент.Значение.Маркер);
		Исключение
			Продолжить;
		КонецПопытки;
		СоответствиеВозврата.Вставить(Элемент.Ключ, Маркер);
	КонецЦикла;
	Возврат СоответствиеВозврата;
	
КонецФункции

Функция СтруктураПаролейИМаркеров(МассивСоглашений = Неопределено) Экспорт
	
	СтруктураВозврата = Новый Структура("ПаролиКСертификатам, Маркеры");
			
	МассивВыбора = ЭлектронныеДокументыСлужебныйВызовСервера.МассивСертификатов(МассивСоглашений);
		
	Если МассивВыбора.Количество() > 0 Тогда
		
		ТекстВопроса = 
			НСтр("ru = 'Для выполнения обмена с оператором ЭДО ""Такском"" необходимо ввести парол%1 к %2 сертификатам.
			|Продолжить?'");
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса,
			?(МассивВыбора.Количество() > 1, "и", "ь"), ?(МассивВыбора.Количество() = 1, "", МассивВыбора.Количество()));
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, 30, КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			СоответствиеПаролей = Новый Соответствие;
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.ЗагрузитьЗначения(МассивВыбора);
			
			СписокВыбора.ЗаполнитьПометки(Истина);
			Если СписокВыбора.Количество() > 1 Тогда
				СписокВыбора.ОтметитьЭлементы(НСтр("ru = 'Выберите сертификаты, по которым необходимо выполнить обмен'"));
			КонецЕсли;
			ЗаголовокФормы = НСтр("ru = 'Введите пароль для ЭЦП'");
			
			Для Каждого Элемент Из СписокВыбора Цикл
				Если Элемент.Пометка Тогда
					ПараметрыФормы = Новый Структура("Заголовок, ПредставлениеСертификата", ЗаголовокФормы, Элемент.Значение);
					КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);
					
					Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
						СоответствиеПаролей.Вставить(Элемент.Значение, КодВозврата);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			СтруктураВозврата.ПаролиКСертификатам = СоответствиеПаролей;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
		СоответствиеМаркеров = СоответствиеМаркеров(СоответствиеПаролей);
		СтруктураВозврата.Маркеры = СоответствиеМаркеров;
	КонецЕсли;
		
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ТестСвязиСОператоромЭДО(СтруктураПараметровЗапросаМаркера,
								ПарольПользователя,
								ВыводитьСообщения = Истина) Экспорт
	
	ЗашифрованныйМаркер = ЭлектронныеДокументыСлужебныйВызовСервера.ЗашифрованныйМаркер(
																			СтруктураПараметровЗапросаМаркера);
	Если Не ЗашифрованныйМаркер = Неопределено Тогда
		МенеджерКриптографииСоздан = Истина;
		Попытка
			МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
			МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = ПарольПользователя;
		Исключение
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			МенеджерКриптографииСоздан = Ложь;
		КонецПопытки;
		Если МенеджерКриптографииСоздан Тогда
			ДанныеРасшифрованы = Истина;
			Попытка
				РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ЗашифрованныйМаркер);
			Исключение
				ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				ДанныеРасшифрованы = Ложь;
			КонецПопытки;
			Если ДанныеРасшифрованы Тогда
				Маркер = ЭлектронныеДокументыСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(РасшифрованныеДвоичныеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	РезультатТеста = НСтр("ru = 'Не пройден.'");
	ПройденУспешно = Ложь;
	Если ЗначениеЗаполнено(Маркер) Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		ПройденУспешно = Истина;
	КонецЕсли;
	Если ВыводитьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатТеста);
	КонецЕсли;

	Возврат ПройденУспешно;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Оповещение пользователя об обработке ЭД

// Выводит сообщение пользователю о нехватки прав доступа.
Процедура СообщитьПользователюОНарушенииПравДоступа() Экспорт
	
	ОчиститьСообщения();
	ТекстСообщения = НСтр("ru = 'Нарушение прав доступа'");
	ЭлектронныеДокументыКлиентПереопределяемый.ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с электронными документами

// Только для внутреннего использования
Процедура ОтправитьПодтверждениеЭД(ПараметрКоманды, ЭД = Неопределено) Экспорт
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьЭД(МассивСсылок, "УтвердитьПодписатьОтправить", , ЭД);
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

// Только для внутреннего использования
Процедура УтвердитьЭД(ПараметрКоманды, ЭД = Неопределено, ФлагОтправки = Истина, НовыйЭД = Неопределено) Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ (ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД()) Тогда
			СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	МассивСсылок = ПолучитьМассивПараметров(ПараметрКоманды);
	Если МассивСсылок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФлагОтправки Тогда
		ИмяКоманды = "УтвердитьОтправить";
	Иначе
		ИмяКоманды = "Утвердить";
	КонецЕсли;
	ДопПараметры = Новый Структура;
	ОбработатьЭД(МассивСсылок, ИмяКоманды, ДопПараметры, ЭД);
	
	ДопПараметры.Свойство("НовыйЭД", НовыйЭД);
	
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

// Функция получает массив ссылок на объекты.
//
// Параметры:
//  ПараметрКоманды - ссылка на объект или массив
//
// Возвращаемое значение:
//  МассивСсылок - если передан в параметр массив, то возвращает его же
//                 если передана пустая ссылка возвращает неопределено
//
Функция ПолучитьМассивПараметров(ПараметрКоманды) Экспорт
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		Если ПараметрКоманды.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = ПараметрКоманды;
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ИначеЕсли ТипЗнч(ПараметрКоманды) = Тип("ВыделенныеСтрокиТабличногоПоля") Тогда
			МассивСсылок = Новый Массив;
			Для Каждого Элемент ИЗ ПараметрКоманды Цикл
				МассивСсылок.Добавить(Элемент);
			КонецЦикла
	#КонецЕсли
	Иначе // пришла единичная ссылка на объект
		Если ПараметрКоманды.Пустая() Тогда
			Возврат Неопределено;
		КонецЕсли;
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ПараметрКоманды);
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

Функция ВыбратьПоместитьФайлЭДВХранилище(АдресВХранилище, Файл, УникальныйИдентификатор) Экспорт
	
	ФайлПомещенВХранилище = Ложь;
	#Если НЕ ВебКлиент Тогда

		Режим = РежимДиалогаВыбораФайла.Открытие;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		Текст = НСтр("ru = 'XML файл'");
		Фильтр = Текст + "(*.xml)|*.xml";
		ДиалогОткрытияФайла.Фильтр = Фильтр;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите файл'");
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			МассивФайлов = ДиалогОткрытияФайла.ВыбранныеФайлы;
			Если МассивФайлов.Количество() <> 0 Тогда
				Файл = МассивФайлов[0];
				ФайлПомещенВХранилище = ПоместитьФайл(АдресВХранилище,Файл,, Ложь, УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
		
	#Иначе
		
		ФайлПомещенВХранилище = ПоместитьФайл(АдресВХранилище,, Файл, Истина, УникальныйИдентификатор);
		
	#КонецЕсли
	
	Возврат ФайлПомещенВХранилище;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с ЭЦП

// Подписывает электронные документы определенным сертификатом криптографии.
// 
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо подписать,
//  СертификатПодписи - СертификатКриптографии, сертификат, которым необходимо подписать переданные электронные документы,
//  ПарольПользователя - Строка, пароль установки ЭЦП данным сертификатом.
//  ПараметрыСертификата - Структура, содержит реквизиты сертификата
//
Функция ПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы,
											СертификатПодписи,
											ПарольПользователя = Неопределено,
											ПараметрыСертификата = Неопределено) Экспорт
			
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Если НЕ УстановитьРасширениеРаботыСКриптографиейНаКлиенте() Тогда
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Отпечаток = "";
	
	Если НЕ ПолучитьПарольКСертификату(СертификатПодписи, ПарольПользователя, Отпечаток, ПараметрыСертификата) Тогда
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбновитьВерсиюЭД(ДобавленныеФайлы);
		Возврат 0;
	КонецЕсли;
	
	Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
		Возврат ЭлектронныеДокументыСлужебныйВызовСервера.ПодписатьЭДОпределеннымСертификатом(
																ДобавленныеФайлы,
																СертификатПодписи,
																ПарольПользователя,
																ПараметрыСертификата);
	КонецЕсли;
	
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат 0;
	КонецПопытки;
	
	МенеджерКриптографии.ВключениеСертификатовВПодпись = РежимВключенияСертификатовКриптографии.ВключатьСертификатСубъекта;
	
	КриптоСертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток);
	
	КоличествоПодписанныхЭД = 0;
	
	Если КриптоСертификат <> Неопределено Тогда
		
		Попытка
			МенеджерКриптографии.ПроверитьСертификат(КриптоСертификат, РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		Исключение
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("102");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
														НСтр("ru = 'проверка сертификата на корректность'"),
														ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
														ТекстСообщения);
			Возврат 0;
		КонецПопыткИ;
		
		Для Каждого ТекДокумент Из ДобавленныеФайлы Цикл
			Если ЭлектронныеДокументыКлиентПереопределяемый.ЭлектронныйДокументГотовКПодписи(ТекДокумент) Тогда
				СтруктураДанныхПодписи = Новый Структура("Сертификат, Пароль, Комментарий", КриптоСертификат, ПарольПользователя,
					НСтр("ru = 'Подписание электронного документа'"));
				Попытка
					ДвоичныеДанныеФайла = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДвоичныеДанныеФайла(ТекДокумент);
					ДанныеПодписи = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьДанныеПодписи(МенеджерКриптографии,
						ТекДокумент, ДвоичныеДанныеФайла, СтруктураДанныхПодписи);
					
					ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьПодпись(ТекДокумент, ДанныеПодписи);
					КоличествоПодписанныхЭД = КоличествоПодписанныхЭД + 1;
					ОпределитьСтатусыПодписей(ТекДокумент);
				Исключение
					ШаблонСообщения = НСтр("ru = 'Ошибка подписи. Необходимо провести тест сертификата криптографии для: %1.
					|%2'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СертификатПодписи,
						КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'установка подписи ЭЦП'"),
																								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																								ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КоличествоПодписанныхЭД;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Отправка пакетов
// Готовит к отправке ЭД и ОТПРАВЛЯЕТ (подготовленные электронные документы).
//
// Параметры:
//  ДобавленныеФайлы - Массив ссылок на электронные документы, которые необходимо поместить в пакеты ЭД,
//  ПризнакПодписи - булево, признак того, что электронные документы подписаны ЭЦП
//  СтруктураПаролейИМаркеров - содержит данные о паролях сертификатов и маркеров
//
Функция ПодготовитьИОтправитьПЭД(ДобавленныеФайлы, ПризнакПодписи, СтруктураПаролейИМаркеров) Экспорт
	
	СтруктураРезультата = ЭлектронныеДокументыСлужебныйВызовСервера.СоздатьИОтправитьДокументыПЭД(ДобавленныеФайлы,
																								  ПризнакПодписи,
																								  СтруктураПаролейИМаркеров);

	Если СтруктураРезультата.МассивПакетовДляОбработкиНаКлиенте.Количество()>0 Тогда
		
		ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
		
		Если НЕ ПодключитьРасширениеРаботыСФайлами() Тогда
			ФайловыеФункцииСлужебныйКлиент.ПредупредитьОНеобходимостиРасширенияРаботыСФайлами();
			Возврат СтруктураРезультата;
		КонецЕсли;

		Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
			Если НЕ УстановитьРасширениеРаботыСКриптографиейНаКлиенте() Тогда
				Возврат СтруктураРезультата;
			КонецЕсли;
		КонецЕсли;

		СоответствиеДанныхПакетов = ЭлектронныеДокументыСлужебныйВызовСервера.СоответствиеДанныхПакетов(
																			СтруктураРезультата.МассивПакетовДляОбработкиНаКлиенте);
		Для Каждого ЭлементПакет Из СоответствиеДанныхПакетов Цикл
			Для Каждого ЭлементЭД ИЗ ЭлементПакет.Значение Цикл
				ДанныеЭД = ЭлементЭД.Значение;
				ДанныеЭД.Вставить("ФайлЗашифрован", Ложь);
				Если ДанныеЭД.ЭтоОтправкаПодтверждения Тогда
					Продолжить;
				КонецЕсли;
				ИмяПолучаемогоФайла = СтрЗаменить(ДанныеЭД.ДанныеФайла.ИмяФайла, "..", ".");
				
				ПараметрыШифрования = ДанныеЭД.ПараметрыШифрования;
				Если ПараметрыШифрования = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
				Исключение
					ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					Возврат СтруктураРезультата;
				КонецПопытки;
				
				ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ПараметрыШифрования[0]);
				ДвоичныеДанныеСертификатаОрганизации = ПолучитьИзВременногоХранилища(ПараметрыШифрования[1]);
		
				Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
				СертификатОрганизации = Новый СертификатКриптографии(ДвоичныеДанныеСертификатаОрганизации);
			
				МассивСертификатов = Новый Массив;
				МассивСертификатов.Добавить(Сертификат);
				МассивСертификатов.Добавить(СертификатОрганизации);
			
				ЗашифрованныеДанные = МенеджерКриптографии.Зашифровать(ДанныеЭД.ДвоичныеДанные, МассивСертификатов);
				
				ДанныеЭД.ДвоичныеДанные = ЗашифрованныеДанные;
				ДанныеЭД.ФайлЗашифрован = Истина;
				
				КолОтправленных = 0;
				ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьИОтправитьЗашифрованныеДанные(СоответствиеДанныхПакетов,
																								 СтруктураПаролейИМаркеров,
																								 КолОтправленных);
				СтруктураРезультата.КолОтправленных = СтруктураРезультата.КолОтправленных + КолОтправленных;
			КонецЦикла;
		КонецЦикла
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Только для внутреннего использования
Функция ОтправитьМассивПакетовЭД(Знач МассивПЭД, СтруктураПаролейИМаркеров) Экспорт
	
	Результат = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправкаПакетовЭД(МассивПЭД, СтруктураПаролейИМаркеров);
	Оповестить("ОбновитьСостояниеЭД");
	
	Возврат Результат;
	
КонецФункции

// Проверяет валидность подписей электронного документа
// и заполняет реквизиты Статус и ДатаПроверкиПодписи в табличной части ЭлектронныеЦифровыеПодписи.
//
// Параметры:
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//
Процедура ОпределитьСтатусыПодписей(ЭД) Экспорт
		
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
	Исключение
		ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецПопытки;
	
	СтруктураСодержимогоЭД = ЭлектронныеДокументыСлужебныйВызовСервера.СтруктураСодержимогоЭД(ЭД);
	
	РезультатПроверки = Новый Массив;
	
	Для Каждого СтрокаЭЦП Из СтруктураСодержимогоЭД.Подписи Цикл
		СтруктураЗаписи = Новый Структура("НомерСтроки", СтрокаЭЦП.НомерСтроки);
		Попытка
			ДвоичныеДанныеЭЦП = СтрокаЭЦП.Подпись;
			МенеджерКриптографии.ПроверитьПодпись(СтруктураСодержимогоЭД.ДанныеЭД, СтрокаЭЦП.Подпись);
			СтруктураЗаписи.Вставить("Результат", Истина);
			РезультатПроверки.Добавить(СтруктураЗаписи);
		Исключение
			СтруктураЗаписи.Вставить("Результат", Ложь);
			РезультатПроверки.Добавить(СтруктураЗаписи);
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("104");
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
														НСтр("ru = 'проверка электронной цифровой подписи'"),
														ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
														ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	ЭлектронныеДокументыСлужебныйВызовСервера.СохранитьРезультатыПроверкиПодписей(ЭД, РезультатПроверки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработка электронных документов

// Выводит пользователю информацию об обработанных электронных документах.
//
// Параметры:
//  КолСформированных - число, количество сформированных электронных документов,
//  КолПодписанных - число, количество подписанных электронных документов,
//  КолОтправленных - число, количество отправленных электронных документов.
//
Процедура ВывестиИнформациюОбОбработанныхЭД(КолСформированных, КолУтвержденных, КолПодписанных, КолПодготовленных, КолОтправленных = 0) Экспорт
	
	Если КолПодготовленных + КолОтправленных > 0 Тогда
		ДопТекст = ?(КолОтправленных > 0, "отправлено", "подготовлено к отправке");
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3), %4 пакетов: (%5)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных,
						КолПодписанных, ДопТекст, КолПодготовленных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2), %3 пакетов: (%4)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных, ДопТекст,
						КолПодготовленных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1), %2 пакетов: (%3)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных, ДопТекст, КолПодготовленных);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), %3 пакетов: (%4)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных,
						КолУтвержденных, ДопТекст, КолПодготовленных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), %2 пакетов: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, ДопТекст, КолПодготовленных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = '%1 пакетов: (%2)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ДопТекст, КолПодготовленных);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если КолПодписанных > 0 Тогда
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2), подписано: (%3)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных,
						КолПодписанных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1), подписано: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных, КолПодписанных);
				КонецЕсли;
			Иначе
				Текст = НСтр("ru = 'Подписано: (%1)'");
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолПодписанных);
			КонецЕсли;
		Иначе
			Если КолУтвержденных > 0 Тогда
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1), утверждено: (%2)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных, КолУтвержденных);
				Иначе
					Текст = НСтр("ru = 'Утверждено: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолУтвержденных);
				КонецЕсли;
			Иначе
				Если КолСформированных > 0 Тогда
					Текст = НСтр("ru = 'Сформировано: (%1)'");
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, КолСформированных);
				Иначе
					Текст = НСтр("ru = 'Обработанных документов нет...'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ТекстЗаголовка, ,Текст);
		
КонецПроцедуры

// Обрабатывает переданные документы ИБ в системе обмена электронными документами в соответствие с параметрами.
//
// Параметры:
//  МассивСсылокНаОбъект - массив ссылок на объекты ИБ, которые необходимо обработать,
//  Действие - строка, представление действия, которое необходимо произвести с электронными документами,
//  ДопПараметры - структура, дополнительные параметры обработки электронных документов.
//  ЭД - СправочникСсылка.ЭДПрисоединенныеФайлы, ссылка на элемент справочника ЭДПрисоединенныеФайлы
//
Процедура ОбработатьЭД(МассивСсылокНаОбъект, Действие, ДопПараметры = "", ЭД = Неопределено) Экспорт
	
	ИтогКолНовыхЭД = 0;
	ИтогКолОтправленныхНаПодпись = 0;
	ИтогКолПодписанных = 0;
	ИтогКолПодготовленных = 0;
	ИтогКолОтправленных = 0;
	
	Попытка
		МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина);
	Исключение
		МассивСтруктурСертификатов = Новый Массив;
	КонецПопытки;
			
	СтруктураДействий = ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнитьДействияПоЭД(МассивСсылокНаОбъект,
		МассивСтруктурСертификатов, Действие, ДопПараметры, ЭД, ИтогКолПодписанных);
	
	Если СтруктураДействий = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(СтруктураДействий) = Тип("Структура") Тогда
		Если СтруктураДействий.Свойство("КоличествоНовыхЭД") Тогда
			ИтогКолНовыхЭД = СтруктураДействий.КоличествоНовыхЭД;
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("КоличествоУтвержденныхЭД") Тогда
			ИтогКолОтправленныхНаПодпись = СтруктураДействий.КоличествоУтвержденныхЭД;
		КонецЕсли;
				
		СоответствиеСертификатовИПаролей = Новый Соответствие;
		МассивОбработки = "";
		Если СтруктураДействий.Свойство("МассивСертификатов", МассивОбработки) Тогда
			Для Каждого ТекЭл Из МассивОбработки Цикл
				ПарольПользователя = Неопределено;
				СертификатПодписи = ТекЭл.Сертификат;
				МассивЭД = ТекЭл.МассивЭД;
				КолПодписанных = ПодписатьЭДОпределеннымСертификатом(МассивЭД,
																	 СертификатПодписи,
																	 ПарольПользователя,
																	 ТекЭл.ПараметрыСертификата);
				ИтогКолПодписанных = ИтогКолПодписанных + КолПодписанных;
				Если КолПодписанных > 0 Тогда
					СоответствиеСертификатовИПаролей.Вставить(СертификатПодписи, ПарольПользователя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		МассивОбработки = "";
		Если СтруктураДействий.Свойство("МассивСоглашений", МассивОбработки) Тогда
			Для Каждого ТекЭл Из МассивОбработки Цикл
				ПризнакПодписи      = ТекЭл.ПризнакПодписи;
				МассивЭД            = ТекЭл.МассивЭД;
				ПараметрыСоглашения = ТекЭл.ПараметрыСоглашения;
				Если СтруктураДействий.НемедленнаяОтправкаЭД Тогда
					Если ПараметрыСоглашения.СпособОбменаЭД = ПредопределенноеЗначение("Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском") Тогда
						СертификатАвторизации = ПараметрыСоглашения.СертификатАбонента;
						Если ЗначениеЗаполнено(СертификатАвторизации) Тогда
							ПарольПользователя = СоответствиеСертификатовИПаролей.Получить(СертификатАвторизации);
							Если ПарольПользователя = Неопределено И ПолучитьПарольКСертификату(СертификатАвторизации, ПарольПользователя) Тогда
								СоответствиеСертификатовИПаролей.Вставить(СертификатАвторизации, ПарольПользователя);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
					СоответствиеМаркеров = СоответствиеМаркеров(СоответствиеСертификатовИПаролей);
				КонецЕсли;
				СтруктураПаролейИМаркеров = Новый Структура("ПаролиКСертификатам, Маркеры",
															СоответствиеСертификатовИПаролей,
															СоответствиеМаркеров);
				СтруктураРезультата = ПодготовитьИОтправитьПЭД(МассивЭД, ПризнакПодписи, СтруктураПаролейИМаркеров);
				КолПодготовленных = СтруктураРезультата.КолПодготовленных;
				КолОтправленных = СтруктураРезультата.КолОтправленных;
				ИтогКолОтправленных = ИтогКолОтправленных + КолОтправленных;
				ИтогКолПодготовленных = ИтогКолПодготовленных + КолПодготовленных;
			КонецЦикла;
		КонецЕсли;
		
		Оповестить("ОбновитьСостояниеЭД");
		
		Если ЭлектронныеДокументыКлиентСервер.ЕстьДействие(Действие, "Показать") Тогда
			МассивОбработки = "";
			Если СтруктураДействий.Свойство("МассивНовыхЭД", МассивОбработки) И МассивОбработки <> Неопределено Тогда
				Для Каждого ТекЭл Из МассивОбработки Цикл
					ОткрытьЭДДляПросмотра(ТекЭл);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	ВывестиИнформациюОбОбработанныхЭД(ИтогКолНовыхЭД, ИтогКолОтправленныхНаПодпись, ИтогКолПодписанных, ИтогКолПодготовленных, ИтогКолОтправленных);
	
КонецПроцедуры

// Отправка и получение электронных документов одной командой.
Процедура ОтправитьПолучитьЭлектронныеДокументы() Экспорт
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД() Тогда
			СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
		Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ТекстСообщенияОНеобходимостиНастройкиСистемы("РаботаСЭД");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	// Получение и отправка документов.
	СтруктураПаролейИМаркеров = СтруктураПаролейИМаркеров();
	СтруктураВозврата = ЭлектронныеДокументыСлужебныйВызовСервера.ОтправитьИПолучитьДокументы(СтруктураПаролейИМаркеров);
	
	// Распаковываем принятые пакеты с электронными документами.
	НовыеДокументы = СтруктураВозврата.НовыеДокументы;
	КоличествоНовыхЭД = НовыеДокументы.МассивВозврата.Количество();
	Для Каждого СтруктураРаспаковки Из НовыеДокументы.ПараметрыРаспаковки Цикл
		Если СтруктураРаспаковки.Распаковывать Тогда
			ПараметрыШифрования = Неопределено;
			ДанныеРаспаковки    = Неопределено;
			СтруктураРаспаковки.Свойство("СтруктураШифрования", ПараметрыШифрования);
			СтруктураРаспаковки.Свойство("ДанныеРаспаковки",    ДанныеРаспаковки);
			РаспаковатьПакетЭДНаКлиенте(СтруктураРаспаковки.ПакетЭД, ДанныеРаспаковки, ПараметрыШифрования);
		КонецЕсли;
	КонецЦикла;
	
	// Подготовим вывод сообщения для пользователя об отправке/получению пакетов ЭД.
	КолОтправленныхПакетов = СтруктураВозврата.КолОтправленныхПакетов;
	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1), получено пакетов: (%2).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КолОтправленныхПакетов,
		КоличествоНовыхЭД);
	
	Оповестить("ОбновитьСостояниеЭД");
		
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обмен электронными документами с банками

Процедура РазобратьЭДВыпискаБанка(ЭД) Экспорт
	
	СсылкаНаХранилище = "";
	НомерСчета        = "";
	СоглашениеЭД      = Неопределено;
	ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьДанныеВыписки(ЭД, СсылкаНаХранилище, НомерСчета, СоглашениеЭД);
	Если НЕ ЗначениеЗаполнено(СсылкаНаХранилище) Тогда
		Возврат;
	КонецЕсли;
	ЭлектронныеДокументыКлиентПереопределяемый.РазобратьФайлВыписки(СсылкаНаХранилище, СоглашениеЭД, НомерСчета);
	УдалитьИзВременногоХранилища(СсылкаНаХранилище);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов ЭД (расшифровка, проверка, подписи)

// Только для внутреннего использования
Процедура РаспаковатьМассивПакетовЭД(МассивПЭД) Экспорт
	
	СписокДокументов = Новый Массив;
	ПараметрыШифрования = ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьШифрованиеИСтатус(МассивПЭД);
	
	Если ПараметрыШифрования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Индекс = 0;
	
	Для Каждого СтруктураШифрования Из ПараметрыШифрования Цикл
		Если СтруктураШифрования.ПарольДоступа = Неопределено Тогда
			ПарольДоступа = Неопределено;
			Если СтруктураШифрования.Зашифрован И НЕ ПарольЗадан(СтруктураШифрования, ПараметрыШифрования, ПарольДоступа) Тогда
				ПараметрыФормы = Новый Структура("Заголовок, ПредставлениеСертификата",
					НСтр("ru = 'Введите пароль расшифровки'"), СтруктураШифрования.Сертификат);
				
				КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);
				Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
					ПарольДоступа = КодВозврата;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураШифрования.ПарольДоступа = ПарольДоступа;
			ПараметрыШифрования.Установить(Индекс, СтруктураШифрования);
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	ВсегоРаспакованоЭД = 0;
	Для Каждого ТекЭл Из МассивПЭД Цикл
		КоличествоРаспакованныхДокументов = РаспаковатьПакетЭДНаКлиенте(ТекЭл, , ПараметрыШифрования);
		Если Не КоличествоРаспакованныхДокументов = Неопределено Тогда
			ВсегоРаспакованоЭД = ВсегоРаспакованоЭД + КоличествоРаспакованныхДокументов;
		КонецЕсли;
	КонецЦикла;
	
	ЗаголовокОповещения = НСтр("ru = 'Обмен электронными документами'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Распаковано электронных документов: (%1)'"), ВсегоРаспакованоЭД);
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	Оповестить("ОбновитьСостояниеЭД");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с извещением о получении

// Только для внутреннего использования
Функция СформироватьПодписатьЭДИзвещениеОПолучении(МассивЭД) Экспорт
	
	ВозвращаемоеЗначение = Ложь;
	
	КолСформированных = 0;
	КолУтвержденных   = 0;
	КолПодписанных    = 0;
	КолПодготовленных = 0;
	ВызватьОповещение = Ложь;
	
	Если ТипЗнч(МассивЭД) = Тип("Массив") Тогда
		Для Каждого СсылкаНаЭД Из МассивЭД Цикл
			
			ФайлИзвещения = ЭлектронныеДокументыСлужебныйВызовСервера.СформироватьЭДИзвещениеОПолучении(СсылкаНаЭД);
			Если ЗначениеЗаполнено(ФайлИзвещения) Тогда
				
				КолСформированных = КолСформированных + 1;
				КолУтвержденных   = КолУтвержденных + 1;
				
				ДобавленныеФайлы = Новый Массив;
				ДобавленныеФайлы.Добавить(ФайлИзвещения);
				СертификатПодписи = ЭлектронныеДокументыСлужебныйВызовСервера.ОпределитьСертификатПодписиСлужебногоДокумента(
																					СсылкаНаЭД, "УведомлениеОбУточнении");
				Если СертификатПодписи <> Неопределено Тогда
					ПарольКСертификату = Неопределено;
					Подписан = ПодписатьЭДОпределеннымСертификатом(ДобавленныеФайлы,
						СертификатПодписи, ПарольКСертификату);
					Если Подписан > 0 Тогда
						СтруктураПаролейИМаркеров = Новый Структура;
						СоответствиеПаролей = Новый Соответствие;
						СоответствиеПаролей.Вставить(СертификатПодписи, ПарольКСертификату);
						Если НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьАвторизациюНаСервере() Тогда
							СоответствиеМаркеров = СоответствиеМаркеров(СоответствиеПаролей);
						КонецЕсли;
						СтруктураПаролейИМаркеров.Вставить("ПаролиКСертификатам", СоответствиеПаролей);
						СтруктураПаролейИМаркеров.Вставить("Маркеры", СоответствиеМаркеров);
						СтруктураРезультата = ПодготовитьИОтправитьПЭД(ДобавленныеФайлы, Истина, СтруктураПаролейИМаркеров);
						КолПодготовленных = КолПодготовленных + СтруктураРезультата.КолПодготовленных;
					КонецЕсли;
					КолПодписанных = КолПодписанных + Подписан;
					
				КонецЕсли;
				ВызватьОповещение = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ВызватьОповещение Тогда
		Оповестить("ОбновитьСостояниеЭД");
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Распаковка пакетов ЭД (расшифровка, проверка, подписи)

Процедура ДобавитьМассив(МассивПриемник, МассивИсточник)
	
	Если ТипЗнч(МассивИсточник) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементИсточник Из МассивИсточник Цикл
		МассивПриемник.Добавить(ЭлементИсточник)
	КонецЦикла;
	
КонецПроцедуры

// Расшифровывает и распаковывает пакет электронных документов.
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД, исследуемый пакет электронных документов.
//  ДанныеРаспаковки - Структура, содержит распакованные данные пакета
//  ПараметрыШифрования - Структура, параметры шифрования для данного пакета электронных документов.
//
Функция РаспаковатьПакетЭДНаКлиенте(ПакетЭД, ДанныеРаспаковки = Неопределено, ПараметрыШифрования = "")
	
	Перем ПапкаДляРаспаковки;
	МассивВозврата = Новый Массив;
	
	Попытка
		
		Если ДанныеРаспаковки = Неопределено Тогда
			ДанныеРаспаковки = ЭлектронныеДокументыСлужебныйВызовСервера.ВернутьМассивДвоичныхДанныхПакета(ПакетЭД, , ПараметрыШифрования);
		КонецЕсли;
		
		Если ДанныеРаспаковки = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЕстьКриптосредствоНаКлиенте = Истина;
		Попытка
			МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		Исключение
			МенеджерКриптографии = Неопределено;
			ЕстьКриптосредствоНаКлиенте = Ложь;
		КонецПопытки;
		
		Если ДанныеРаспаковки.Свойство("ЭтоПроизвольныйЭД") Тогда //были возвращены данные для обработки на клиенте
			Если ДанныеРаспаковки.Свойство("НовыйЭД") И ЕстьКриптосредствоНаКлиенте Тогда
				Для Каждого ДанныеПодписи ИЗ ДанныеРаспаковки.МассивДанныхПодписей Цикл
					СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДанныеПодписи);
					Если СертификатыПодписи.Количество() <> 0 Тогда
						Сертификат = СертификатыПодписи[0];
						ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(
													ДанныеРаспаковки.НовыйЭД,
													ДанныеПодписи,
													Base64Строка(Сертификат.Отпечаток),
													ТекущаяДата(),
													"",
													,
													ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
													Сертификат.Выгрузить());
					КонецЕсли;
				КонецЦикла;
				ОпределитьСтатусыПодписей(ДанныеРаспаковки.НовыйЭД);
			КонецЕсли;
			Возврат Неопределено;
		КонецЕсли;
		
		ДанныеРаспаковки.Свойство("ПапкаДляРаспаковки", ПапкаДляРаспаковки);
		
		ТипДанных = Неопределено;
		ЕстьТипДанных = ДанныеРаспаковки.Свойство("ТипДанных", ТипДанных);
		Если ЕстьТипДанных И ТипДанных <> "ЭД" И ТипДанных <> "Подпись" Тогда
			МассивДобавленныхФайловДляИзвещений = Новый Массив;
			МассивДобавленныхФайлов = Новый Массив;
			СоответствиеЭДИПодписей = Новый Соответствие;
			КоличествоОбработанныхДокументов = ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьДвоичныеДанныеПакетаОператораЭДО(
																								ПакетЭД,
																								ДанныеРаспаковки,
																								ПапкаДляРаспаковки,
																								ЕстьКриптосредствоНаКлиенте,
																								МассивДобавленныхФайловДляИзвещений,
																								МассивДобавленныхФайлов,
																								СоответствиеЭДИПодписей);
																							
			Если ТипЗнч(МассивДобавленныхФайлов) = Тип("Массив") И МассивДобавленныхФайлов.Количество() > 0
				И НЕ ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере()
				И НЕ МенеджерКриптографии = Неопределено Тогда
				
					Если СоответствиеЭДИПодписей.Количество()>0 Тогда
						Для Каждого Элемент Из СоответствиеЭДИПодписей Цикл
							Для Каждого ДанныеПодписи ИЗ Элемент.Значение Цикл
								СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДанныеПодписи);
								Если СертификатыПодписи.Количество() <> 0 Тогда
									Сертификат = СертификатыПодписи[0];
									ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(
															Элемент.Ключ,
															ДанныеПодписи,
															Base64Строка(Сертификат.Отпечаток),
															ТекущаяДата(),
															"",
															,
															ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
															Сертификат.Выгрузить());
								КонецЕсли;
							КонецЦикла;
						КонецЦикла
					КонецЕсли;
					
					Для Каждого ЭД ИЗ МассивДобавленныхФайлов Цикл
						ОпределитьСтатусыПодписей(ЭД);
					КонецЦикла;
			КонецЕсли;

			Если КоличествоОбработанныхДокументов > 0 Тогда
				Оповестить("ОбновитьДокументИБПослеЗаполнения");
			КонецЕсли;
			
			// Получили данные от оператора ЭДО
			Если МассивДобавленныхФайловДляИзвещений.Количество() > 0 Тогда
				СформироватьПодписатьЭДИзвещениеОПолучении(МассивДобавленныхФайловДляИзвещений);
			КонецЕсли;
			
			Возврат КоличествоОбработанныхДокументов;
		КонецЕсли;
		
		МассивДвоичныхДанных = ДанныеРаспаковки.СтруктураДвоичныхДанных;
		МассивДвоичныхДанныхИзвещений = ДанныеРаспаковки.СтруктураДвоичныхДанныхИзвещений;
		
		Если МассивДвоичныхДанных.Количество() = 0 Тогда
			МассивЭДИДанныхПодписей = Новый Массив;
			ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьПодтвержденияДокументовНаСервере(
															ДанныеРаспаковки.СоответствиеФайлПараметры,
															ПакетЭД,
															ПапкаДляРаспаковки,
															МассивЭДИДанныхПодписей);
			Если МассивЭДИДанныхПодписей.Количество() > 0 Тогда
				Для Каждого Элемент ИЗ МассивЭДИДанныхПодписей Цикл
					СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(Элемент.ДанныеПодписи);
					Если СертификатыПодписи.Количество() <> 0 Тогда
						Сертификат = СертификатыПодписи[0];
						ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(
															Элемент.ЭлектронныйДокумент,
															Элемент.ДанныеПодписи,
															Base64Строка(Сертификат.Отпечаток),
															ТекущаяДата(),
															"",
															,
															ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
															Сертификат.Выгрузить());
					КонецЕсли;
				КонецЦикла
			КонецЕсли;
		КонецЕсли;
		
		Если МассивДвоичныхДанныхИзвещений.Количество() > 0 Тогда
			Для Каждого СтруктураДанных Из МассивДвоичныхДанныхИзвещений Цикл
				
				// Обработать пришедшие извещения от оператора
				// Оно может быть в случае, когда получаем извещение от покупателя о приеме ЭСФ
				МассивСтруктурПодписей = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеДанныхПодписей(СтруктураДанных.ИмяФайла,
					ПапкаДляРаспаковки, СтруктураДанных.ДвоичныеДанные, ДанныеРаспаковки.СоответствиеФайлПараметры, Истина);
				
				Если МассивСтруктурПодписей <> Неопределено Тогда
					ФлагОшибки = Ложь;
					Для Каждого СтруктураПодписи Из МассивСтруктурПодписей Цикл
						Если СтруктураПодписи.ДвоичныеДанныеПодписи <> Неопределено Тогда
							Попытка
								ЭлектроннаяЦифроваяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии, СтруктураПодписи.ДвоичныеДанныеФайла,
									СтруктураПодписи.ДвоичныеДанныеПодписи);
							Исключение
								ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("104");
								ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
									НСтр("ru = 'проверка подписи'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
								ФлагОшибки = Истина;
								Прервать;
							КонецПопытки;
						КонецЕсли;
					КонецЦикла;
					
					Если ФлагОшибки Тогда
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьДанныеПоПакетуЭД(ПакетЭД,
																								 МассивСтруктурПодписей,
																								 СтруктураДанных,
																								 ДанныеРаспаковки.СоответствиеФайлПараметры,
																								 ПапкаДляРаспаковки);
			КонецЦикла;
		КонецЕсли;
		
		ЕстьОшибкаРаспаковки = Ложь;
		
		Для Каждого СтруктураДанных Из МассивДвоичныхДанных Цикл
			СтруктураШифрования = НайтиСтруктуруВПараметрах(СтруктураДанных.ИмяФайлаБезРасширения, ПараметрыШифрования);
			Если СтруктураШифрования <> Неопределено И СтруктураШифрования.Зашифрован Тогда
				Если СтруктураШифрования.Свойство("ПарольДоступа") И НЕ СтруктураШифрования.ПарольДоступа = Неопределено Тогда
					Если ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
						РасшифрованныеДвоичныеДанные = ЭлектронныеДокументыСлужебныйВызовСервера.РасшифрованныеДанные(
																								СтруктураДанных.ДвоичныеДанные,
																								СтруктураШифрования.ПарольДоступа);
						Если РасшифрованныеДвоичныеДанные = Неопределено Тогда
							Возврат Неопределено;
						КонецЕсли;
					Иначе
						МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураШифрования.ПарольДоступа;
						// Метод расшифровки генерирует исключение в случае ошибки.
						Попытка
							РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(СтруктураДанных.ДвоичныеДанные);
						Исключение
							ТекстСообщения = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
							ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
																		НСтр("ru = 'расшифровка пакета ЭД'"),
																		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
																		ТекстСообщения);
							Возврат Неопределено;
						КонецПопытки;
					КонецЕсли;
					СтруктураДанных.ДвоичныеДанные = РасшифрованныеДвоичныеДанные;
				Иначе
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			МассивСтруктурПодписей = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСоответствиеДанныхПодписей(
																					СтруктураДанных.ИмяФайла,
																					ПапкаДляРаспаковки,
																					СтруктураДанных.ДвоичныеДанные,
																					ДанныеРаспаковки.СоответствиеФайлПараметры);
			
			СоответствиеЭДИПодписей = Новый Соответствие;
			МассивДобавленныхФайлов = ЭлектронныеДокументыСлужебныйВызовСервера.ДобавитьДанныеПоПакетуЭД(
																					ПакетЭД,
																					МассивСтруктурПодписей,
																					СтруктураДанных,
																					ДанныеРаспаковки.СоответствиеФайлПараметры,
																					ПапкаДляРаспаковки,
																					ЕстьОшибкаРаспаковки,
																					ЕстьКриптосредствоНаКлиенте,
																					СоответствиеЭДИПодписей);
																					
			Если Не МассивДобавленныхФайлов = Неопределено И МассивДобавленныхФайлов.Количество() > 0
				И Не МенеджерКриптографии = неопределено
				И Не ЭлектронныеДокументыСлужебныйВызовСервера.ВыполнятьКриптооперацииНаСервере() Тогда
					Если СоответствиеЭДИПодписей.Количество() > 0 Тогда
						Для Каждого Элемент Из СоответствиеЭДИПодписей Цикл
							Для Каждого ДанныеПодписи ИЗ Элемент.Значение Цикл
								СертификатыПодписи = МенеджерКриптографии.ПолучитьСертификатыИзПодписи(ДанныеПодписи);
								Если СертификатыПодписи.Количество() <> 0 Тогда
									Сертификат = СертификатыПодписи[0];
									ЭлектронныеДокументыСлужебныйВызовСервера.ЗанестиИнформациюОПодписи(
															Элемент.Ключ,
															ДанныеПодписи,
															Base64Строка(Сертификат.Отпечаток),
															ТекущаяДата(),
															"",
															,
															ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект),
															Сертификат.Выгрузить());
								КонецЕсли;
							КонецЦикла;
						КонецЦикла
					КонецЕсли;
					Для Каждого ЭД ИЗ МассивДобавленныхФайлов Цикл
						ОпределитьСтатусыПодписей(ЭД);
					КонецЦикла;
			КонецЕсли;
			Если Не ЕстьОшибкаРаспаковки Тогда
				Если ЗначениеЗаполнено(ТипДанных) Тогда
					СформироватьПодписатьЭДИзвещениеОПолучении(МассивДобавленныхФайлов);
				КонецЕсли;
				
				ДобавитьМассив(МассивВозврата, МассивДобавленныхФайлов);
			КонецЕсли;
		КонецЦикла;
		ЭлектронныеДокументыСлужебныйВызовСервера.УдалитьКаталог(ПапкаДляРаспаковки);
		
		Если ЕстьОшибкаРаспаковки Тогда
			Возврат 0;
		КонецЕсли;
		
		ЭлектронныеДокументыСлужебныйВызовСервера.УстановитьСтатусПакета(ПакетЭД, ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Распакован"));
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка распаковки входящего пакета ЭД.
		|%1.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЭлектронныеДокументыСлужебныйВызовСервера.ОбработатьИсключениеПоЭДНаСервере(
			НСтр("ru = 'распаковка входящего пакета ЭД'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);
	КонецПопытки;
	
	Возврат МассивВозврата.Количество();
	
КонецФункции

Функция ПарольЗадан(ТекущаяСтруктура, ПараметрыШифрования, ПарольДоступа)
	
	СертификатПоиска = ТекущаяСтруктура.Сертификат;
	ВозвращаемоеЗначение = Ложь;
	Для Каждого СтруктураШифрования Из ПараметрыШифрования Цикл
		Если СтруктураШифрования.Сертификат = СертификатПоиска
			И СтруктураШифрования.Свойство("ПарольДоступа", ПарольДоступа)
			И ПарольДоступа <> Неопределено Тогда
			
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСтруктуруВПараметрах(ИмяПоиска, ПараметрыШифрования)
	
	ВозвращаемыйПараметр = Неопределено;
	
	Если ТипЗнч(ПараметрыШифрования) = Тип("Массив") Тогда
		Для Каждого СтруктураШифрования Из ПараметрыШифрования Цикл
			Если СокрЛП(ИмяПоиска) = СокрЛП(СтруктураШифрования.Документ) Тогда
				ВозвращаемыйПараметр = СтруктураШифрования;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ПараметрыШифрования) = Тип("Структура") Тогда
		ВозвращаемыйПараметр = ПараметрыШифрования;
	КонецЕсли;
	
	Возврат ВозвращаемыйПараметр;
	
КонецФункции
 
Процедура ТестСертификатаНаКлиенте(Отпечаток, Пароль, ВыводитьТолькоОшибки, Отказ)
									
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Если НЕ УстановитьРасширениеРаботыСКриптографиейНаКлиенте() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	ШаблонСообщения = НСтр("ru = '%1
	|%2'");
	
	// Блок проверки установленных криптосредств на компьютере.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка средства криптографии на компьютере.'");
	Попытка
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("100");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонРезультата,
								ТекстОшибки,
								КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		МенеджерКриптографии = Неопределено;
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Критичная ошибка - дальше тесты не проводим.
	Если МенеджерКриптографии = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Блок проверки наличия сертификата в хранилище сертификатов компьютера.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка наличия сертификата на компьютере.'");
	
	Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток);
	Если Сертификат <> Неопределено Тогда
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Иначе
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("101");
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Критичная ошибка - дальше тесты не проводим, будет ошибка платформы.
	Если Сертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	
	// Блок проверки сертификата на корректность.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка реквизитов сертификата на компьютере.'");
	Попытка
		МенеджерКриптографии.ПроверитьСертификат(
									Сертификат,
									РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("102");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонРезультата,
									ТекстОшибки,
									КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ОписаниеТеста,
								РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Блок проверки шифрования/расшифрования.
	ОтпечатокДвоичныеДанные = Base64Значение(Отпечаток);
	
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций шифрования/расшифровки на компьютере.'");
	ДвоичныеДанные = МенеджерКриптографии.Зашифровать(ОтпечатокДвоичныеДанные, Сертификат);
	Попытка
		РасшифрованныеДвоичныеДанные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		РезультатТеста = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("103");
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения,
									ОписаниеТеста,
									РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Блок проверки ЭЦП.
	ОписаниеТеста = НСтр("ru = 'Тест. Проверка операций формирования/проверки ЭЦП на компьютере.'");
	Попытка
		ДвоичныеДанные = МенеджерКриптографии.Подписать(ОтпечатокДвоичныеДанные, Сертификат);
		ЭлектроннаяЦифроваяПодписьКлиент.ПроверитьПодпись(МенеджерКриптографии, ОтпечатокДвоичныеДанные, ДвоичныеДанные);
		РезультатТеста = НСтр("ru = 'Пройден успешно.'");
		Если ВыводитьТолькоОшибки Тогда // подавлять вывод сообщения об успешном прохождении теста
			РезультатТеста = "";
		КонецЕсли;
	Исключение
		ШаблонРезультата = НСтр("ru = '%1
		|%2'");
		ТекстОшибки = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьСообщениеОбОшибке("104");
		РезультатТеста = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонРезультата,
									ТекстОшибки,
									КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатТеста) Тогда 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ШаблонСообщения,
									ОписаниеТеста,
									РезультатТеста);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры
