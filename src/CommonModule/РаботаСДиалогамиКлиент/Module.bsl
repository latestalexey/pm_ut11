////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура позволяет выбрать время из выпадающего списка
//Параметры:
//Форма - форма-владелец списка,
//ПолеВводаФормы - элемент-владелец списка,
//ТекущееЗначение - значение, на которое будет спозиционирован выпадающий список,
//Интервал - интервал, с которым необходимо заполнить список, по умолчанию час
//
Функция ВыбратьВремя(Форма, ПолеВводаФормы, Знач ТекущееЗначение, Интервал = 3600) Экспорт

	НачалоРабочегоДня      = '00010101000000';
	ОкончаниеРабочегоДня   = '00010101235959';

	СписокВремен = Новый СписокЗначений;
	НачалоРабочегоДня = НачалоЧаса(НачалоДня(ТекущееЗначение) +
		Час(НачалоРабочегоДня) * 3600 +
		Минута(НачалоРабочегоДня)*60);
	ОкончаниеРабочегоДня = КонецЧаса(НачалоДня(ТекущееЗначение) +
		Час(ОкончаниеРабочегоДня) * 3600 +
		Минута(ОкончаниеРабочегоДня)*60);

	ВремяСписка = НачалоРабочегоДня;
	Пока НачалоЧаса(ВремяСписка) <= НачалоЧаса(ОкончаниеРабочегоДня) Цикл
		Если НЕ ЗначениеЗаполнено(ВремяСписка) Тогда
			ПредставлениеВремени = "00:00";
		Иначе
			ПредставлениеВремени = Формат(ВремяСписка,"ДФ=ЧЧ:мм");
		КонецЕсли;

		СписокВремен.Добавить(ВремяСписка, ПредставлениеВремени);

		ВремяСписка = ВремяСписка + Интервал;
	КонецЦикла;

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ТекущееЗначение);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = Форма.ВыбратьИзСписка(СписокВремен, ПолеВводаФормы);
	Иначе
		ВыбранноеВремя = Форма.ВыбратьИзСписка(СписокВремен, ПолеВводаФормы, НачальноеЗначение);
	КонецЕсли;

	Если ВыбранноеВремя = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат ВыбранноеВремя.Значение;

КонецФункции

Процедура ПриВыбореАктуальности(ВыбранноеЗначение, Актуальность, ДатаАктуальности) Экспорт
	
	Если ВыбранноеЗначение = "Истекающие на дату" Тогда
		
		ДатаАктуальности = ОткрытьФормуМодально(
			"ОбщаяФорма.ВыборДаты",
			Новый Структура("НачальноеЗначение"),
			);
			
			Если ЗначениеЗаполнено(ДатаАктуальности) Тогда
				
				Актуальность    = НСтр("ru='Истекающие на %Дата%'");
				Актуальность    = СтрЗаменить(Актуальность, "%Дата%", Формат(ДатаАктуальности, "ДФ=dd.MM.yyyy "));
				ВыбранноеЗначение = Актуальность;
				
			Иначе
				
				ВыбранноеЗначение = Актуальность;
				
			КонецЕсли;
			
		Иначе
			
			ДатаАктуальности = Дата(1,1,1);
			
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореАктуальности()

// Вызывает диалог ввода даты. В случае ввода пустой даты - предлагает диалог ввода даты еще раз
//
// Параметры:
// 		Дата - Дата - Начальное значение даты диалога. В эту дату будет помещен результат диалога
// 		Подсказка - Строка - Текст заголовка диалога ввода даты
// 		ЧастьДаты - ЧастиДаты
//
// Возвращаемое значение:
// 		Булево - Истина - в случае если дата введена, Ложь - в случае если пользователь отказался от ввода
//
Функция ВвестиДатуСКонтролемПустогоЗначения(Дата, Подсказка, ЧастьДаты) Экспорт
	
	ДатаВведена = Ложь;
	ВременноеЗначениеДаты = Дата;
	
	Пока Истина Цикл
		
		Если ВвестиДату(ВременноеЗначениеДаты, Подсказка, ЧастьДаты) Тогда
			Если ВременноеЗначениеДаты <> Дата('00010101000000') Тогда
				ДатаВведена = Истина;
			Иначе
				Предупреждение(НСтр("ru='Поле ""Дата"" не заполнено'"));
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		Если ДатаВведена Тогда
			Дата = ВременноеЗначениеДаты;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ВвестиДатуСКонтролемПустогоЗначения()

// Проверяет наличие выделенных в списке строк
//
// Параметры:
// Список - ДинамическийСписок
//
// Возвращаемое значение:
// Булево - Ложь - если в списке нет выделенных строк, иначе Истина
//
Функция ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для н = 0 По Список.ВыделенныеСтроки.Количество()-1 Цикл
		Если ТипЗнч(Список.ВыделенныеСтроки[н]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			МассивСсылок.Добавить(Список.ВыделенныеСтроки[н]);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		Предупреждение( НСтр("ru='Команда не может быть выполнена для указанного объекта!'"));
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции // ПроверитьНаличиеВыделенныхВСпискеСтрок()

// Проверяет наличие выделенных в списке ссылок и возвращает массив
//
// Параметры:
// 		Список - ДинамическийСписок
//
// Возвращаемое значение:
// 		Массив - Массив выделенных с списке ссылок
//
Функция ПроверитьПолучитьВыделенныеВСпискеСсылки(Список) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для н = 0 По Список.ВыделенныеСтроки.Количество()-1 Цикл
		Если ТипЗнч(Список.ВыделенныеСтроки[н]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			МассивСсылок.Добавить(Список.ВыделенныеСтроки[н]);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		Предупреждение( НСтр("ru='Команда не может быть выполнена для указанного объекта!'"));
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции // ПроверитьПолучитьВыделенныеВСпискеСсылки()

Функция ПроверитьНаличиеСтрокВСписке(Список, ПредставлениеСписка) Экспорт
	
	Если Список.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""%ПредставлениеСписка%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСписка%", ПредставлениеСписка);
		Предупреждение(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
