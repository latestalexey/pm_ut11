////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура получает банк по указанному БИК или корреспондентскому счету.
//
// Параметры:
//	Форма - УправляемаяФорма - Текущая форма
//	Элемент - ПолеУправляемойФормы - Поле, в котором произведен выбор значения.
//	Значение - Строка - Значение, выбранное в поле.
//	СписокБанков - СписокЗначений - Список найденных банков
//	Банк - СправочникСсылка.КлассификаторБанковРФ - Значение поля для указания банка
//
Процедура ПолучитьБанкПоРеквизитам(Форма, Элемент, Значение, СписокБанков, Банк) Экспорт

	// Если возвращен список банков, произведем выбор банка из списка.
	Если СписокБанков.Количество() > 1 Тогда
	
		ВыбранныйЭлемент = Форма.ВыбратьИзСписка(СписокБанков, Элемент);
		Если ВыбранныйЭлемент <> Неопределено Тогда
			Банк = ВыбранныйЭлемент.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокБанков.Количество() = 0 Тогда
		
		Если Не ПустаяСтрока(Значение) Тогда
			
			СписокВариантовОтветовНаВопрос = Новый СписокЗначений;
			СписокВариантовОтветовНаВопрос.Добавить("ВыбратьИзСписка", "Выбрать из списка");
			СписокВариантовОтветовНаВопрос.Добавить("ОтменитьВвод",	   "Отменить ввод");
					
			ТекстВопроса = НСтр("ru = 'Банк с %Поле%  %Значение% не найден в классификаторе банков.'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса,"%Поле%", Элемент.Имя);
			ТекстВопроса = СтрЗаменить(ТекстВопроса,"%Значение%", Значение);
					
			Результат = Вопрос(ТекстВопроса, СписокВариантовОтветовНаВопрос, 0,,НСтр("ru = 'Выбор банка из классификатора'"));
			
		Иначе
			Результат = "ВыбратьИзСписка";
		КонецЕсли;
		
		Если Результат = "ВыбратьИзСписка" Тогда
			ОткрытьФорму("Справочник.КлассификаторБанковРФ.ФормаВыбора", , Элемент);
		ИначеЕсли Результат = "ОтменитьВвод" Тогда
			Значение = "";
		ИначеЕсли Результат = "ПродолжитьВвод" Тогда
			Форма.ТекущийЭлемент = Элемент;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Функция проверяет возможность печати чека на фискальном регистраторе.
//
// Параметры:
//	Форма - УправляемаяФорма - Форма документа
//
// Возвращаемое значение:
//	Булево - Признак возможности печати
//
Функция ВозможнаПечатьЧека(Форма) Экспорт
	
	ПечататьЧек = Истина;
	
	// Если объект не проведен или модифицирован - выполним проведение.
	Если НЕ Форма.Объект.Проведен
		ИЛИ Форма.Модифицированность Тогда
		
		КодОтвета = Вопрос(НСтр("ru = 'Операция возможна только после проведения документа, провести документ?'"), РежимДиалогаВопрос.ДаНет);
		Если КодОтвета = КодВозвратаДиалога.Да Тогда
			
			Попытка
				Если НЕ Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
					ПечататьЧек = Ложь;
				КонецЕсли;
			Исключение
				Предупреждение(НСтр("ru = 'Не удалось выполнить проведение документа'"));
				ПечататьЧек = Ложь;
			КонецПопытки;
			
		Иначе
			ПечататьЧек = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПечататьЧек;

КонецФункции

// Процедура выводит сообщения пользователю, если заполнение на основании
// не было выполнено.
//
// Параметры:
//	Объект - ДанныеФорма - Текущий объект
//	Параметры - Структура - Коллекция параметров формы
//
Процедура ПроверитьЗаполнениеДокументаНаОсновании(Объект, Основание) Экспорт
	
	Если ЗначениеЗаполнено(Основание)
	   И Объект.СуммаДокумента = 0 Тогда
	   
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Остаток задолженности по счету ""%1"" равен 0. Укажите сумму документа вручную'"),
				Основание
			);
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Остаток по заявке ""%1"" равен 0. Выберите неоплаченную заявку'"),
				Основание
			);
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств") Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Остаток по распоряжению ""%1"" равен 0. Выберите неоплаченное распоряжение'"),
				Основание
			);	
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Остаток денежных средств к поступлению по документу ""%1"" равен 0. Укажите сумму документа вручную'"),
				Основание
			);
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Остаток задолженности по документу ""%1"" равен 0. Укажите сумму документа вручную'"),
				Основание
			);
		КонецЕсли;
				
		Если Не ПустаяСтрока(Текст) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				,
				"Объект.СуммаДокумента",
				// Отказ
			);
		КонецЕсли;
	   
	КонецЕсли;
	
КонецПроцедуры

// Проверяет необходимость пересчета сумм документа из валюты в валюту
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	ТекущаяВалюта - СправочникСсылка.Валюты - Текущая валюта
//	НоваяВалюта - СправочникСсылка.Валюты - Новая валюта
//
// Возвращаемое значение:
//	Булево - Истина, если требуется пересчет сумм
//
Функция НеобходимПересчетВВалюту(Объект, ТекущаяВалюта, НоваяВалюта) Экспорт
	
	НеобходимПересчет = Ложь;
	
	Если ЗначениеЗаполнено(ТекущаяВалюта)
	 И ЗначениеЗаполнено(НоваяВалюта)
	 И ТекущаяВалюта <> НоваяВалюта Тогда
	
		МассивТабличныйЧастей = Новый Массив;
		МассивТабличныйЧастей.Добавить("РасшифровкаПлатежа");
		МассивТабличныйЧастей.Добавить("ДебиторскаяЗадолженность");
		МассивТабличныйЧастей.Добавить("КредиторскаяЗадолженность");
		
		Если Объект.СуммаДокумента <> 0 Тогда
			НеобходимПересчет = Истина;
		Иначе
			Для Каждого ТабличнаяЧасть Из МассивТабличныйЧастей Цикл
				
				Если Объект.Свойство(ТабличнаяЧасть)
				 И Объект[ТабличнаяЧасть].Итог("Сумма") <> 0 Тогда
					НеобходимПересчет = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НеобходимПересчет;
	
КонецФункции

// Вопрос пользователю о пересчете сумм документа из валюты в валюту
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	НоваяВалюта - СправочникСсылка.Валюты - Новая валюта
//
// Возвращаемое значение:
//	Булево - Истина, если требуется пересчет сумм
//
Функция РазрешенПересчетВВалюту(НоваяВалюта) Экспорт
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Пересчитать суммы в документе в валюту %1 ?'"),
		НоваяВалюта
	);
	
	КнопкиДиалогаВопрос = Новый СписокЗначений;
	КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Да, "Пересчитать");
	КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Отмена, "Отменить");
	
	КодОтвета = Вопрос(ТекстВопроса, КнопкиДиалогаВопрос);
	
	Возврат КодОтвета = КодВозвратаДиалога.Да;
	
КонецФункции

// Процедура при необходимости очищает сумму взаиморасчетов в табличной части "Расшифровка платежа".
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//
Процедура ОчиститьСуммуВзаиморасчетовРасшифровкиПлатежа(Объект) Экспорт
	
	КодОтвета = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
		
		Если СтрокаТаблицы.СуммаВзаиморасчетов > 0
		 И СтрокаТаблицы.ВалютаВзаиморасчетов <> Объект.Валюта Тогда
		 	
			Если КодОтвета = Неопределено Тогда
				КодОтвета = Вопрос(НСтр("ru = 'Очистить суммы взаиморасчетов?'"), РежимДиалогаВопрос.ДаНет);
			КонецЕсли;
			Если КодОтвета = КодВозвратаДиалога.Да Тогда
				СтрокаТаблицы.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура очищает сумму взаиморасчетов и валюту взаиморасчетов в табличной части "Расшифровка платежа".
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//
Процедура ОчиститьСуммуИВалютуВзаиморасчетовРасшифровкиПлатежа(Объект) Экспорт
	
	Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
			Если СтрокаТаблицы.ВалютаВзаиморасчетов = Объект.Валюта Тогда
				СтрокаТаблицы.СуммаВзаиморасчетов = 0;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.ВалютаВзаиморасчетов = Неопределено;
			СтрокаТаблицы.СуммаВзаиморасчетов = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура пересчитывает сумму в строке табличной части "Расшифровка платежа" при изменении суммы в шапке документа.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//	СуммаДокумента - Число - Сумма документа
//
Процедура ПересчитатьСуммыВСтрокеРасшифровкиПлатежа(Объект, СуммаДокумента) Экспорт
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		
		СтрокаТаблицы = Объект.РасшифровкаПлатежа[0];
		СтрокаТаблицы.Сумма = СуммаДокумента;
		СтрокаТаблицы.СуммаВзаиморасчетов = 0;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает сумму в шапке документа, если она отличается от сумм в табличной части.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Текущий документ
//
Процедура ПересчитатьСуммуДокументаПоРасшифровкеПлатежа(Объект, ИмяТабличнойЧасти = "") Экспорт
	
	Если Не ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		ТабличнаяЧасть = Объект.РасшифровкаПлатежа;
	Иначе
		ТабличнаяЧасть = Объект[ИмяТабличнойЧасти];
	КонецЕсли;
	
	Если ТабличнаяЧасть.Количество() > 0
	 И Объект.СуммаДокумента <> ТабличнаяЧасть.Итог("Сумма") Тогда
		
		ТекстВопроса = НСтр("ru = 'Сумма по строкам в табличной части не равна сумме документа, пересчитать сумму документа?'");
		
		КодОтвета = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если КодОтвета = КодВозвратаДиалога.Да Тогда
			Объект.СуммаДокумента = ТабличнаяЧасть.Итог("Сумма");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура открытия формы просмотра видов запасов документа.
//
// Параметры:
//	Объект  - ДанныеФормыСтруктура - Текущий документ
//	УникальныйИдентификатор - Уникальный идентификатор объекта
//	Форма - Текущая форма
//	РедактироватьВидыЗапасов - Булево - Разрешено редактирование видов запасов в форме
//
Процедура ОткрытьВидыЗапасов(Объект, АдресТоваровВХранилище, АдресВидовЗапасовВХранилище, Форма, РедактироватьВидыЗапасов = Ложь, ОтображатьДокументРеализации = Ложь) Экспорт
	
	Если Объект.Свойство("ЦенаВключаетНДС") Тогда
		ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
	Иначе
		ЦенаВключаетНДС = Неопределено;
	КонецЕсли;
	
	Если Объект.Свойство("Склад") Тогда
		Склад = Объект.Склад;
	Иначе
		Склад = Неопределено;
	КонецЕсли;
	
	Если Объект.Свойство("ВидыЗапасовУказаныВручную") Тогда
		ВидыЗапасовУказаныВручную = Объект.ВидыЗапасовУказаныВручную;
		РедактироватьВидыЗапасов = Истина;
	Иначе
		ВидыЗапасовУказаныВручную = Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("
		|АдресТоваровВХранилище,
		|АдресВидовЗапасовВХранилище,
		|Организация,
		|Склад,
		|ЦенаВключаетНДС,
		|РедактироватьВидыЗапасов,
		|ДокументМодифицирован,
		|ОтображатьДокументРеализации,
		|ВидыЗапасовУказаныВручную
		|",
		АдресТоваровВХранилище,
		АдресВидовЗапасовВХранилище,
		Объект.Организация,
		Склад,
		ЦенаВключаетНДС,
		РедактироватьВидыЗапасов,
		(Форма.Модифицированность И Не РедактироватьВидыЗапасов),
		ОтображатьДокументРеализации,
		ВидыЗапасовУказаныВручную
		);
	ОткрытьФорму(
		"Справочник.ВидыЗапасов.Форма.ФормаВводаВидовЗапасов",
		ПараметрыФормы,
		Форма
	);
	
КонецПроцедуры

// Функция выбора периода возникновения расхода из списка.
//
Функция ПериодВозникновенияРасхода(Форма, Дата, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Список = СписокПериодовВозникновенияРасходов(Дата);
	ЭлементСписка = Форма.ВыбратьИзСписка(Список, Элемент);
	Если ЭлементСписка <> Неопределено Тогда
		ДатаВозникновения = ЭлементСписка.Значение;
	Иначе
		ДатаВозникновения = Дата(1, 1, 1);
	КонецЕсли;
	
	Возврат ДатаВозникновения;
	
КонецФункции

// Процедура - обработчик события "ПриИзменении" поля "СтатьяДоходов".
//
Процедура СтатьяДоходовПриИзменении(Объект, Элементы) Экспорт
	
	Элементы.АналитикаДоходов.ТолькоПросмотр = Не ЗначениеЗаполнено(Объект.СтатьяДоходов);
	
	Если Не ЗначениеЗаполнено(Объект.СтатьяДоходов) Тогда
		Объект.АналитикаДоходов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "СтатьяРасходов".
//
Процедура СтатьяРасходовПриИзменении(Объект, Элементы) Экспорт
	
	Элементы.АналитикаРасходов.ТолькоПросмотр = Не ЗначениеЗаполнено(Объект.СтатьяРасходов);
	
	Если Не ЗначениеЗаполнено(Объект.СтатьяРасходов) Тогда
		Объект.АналитикаРасходов = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Определяет относится ли хозяйственная операция документа к расчетами с клиентами.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//
// Возвращаемое значение:
//	Булево - Хозяйственная операция относится к расчетам с клиентами
//
Функция ЭтоРасчетыСКлиентами(ХозяйственнаяОперация) Экспорт
	
	Если ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента")
	 ИЛИ ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту") Тогда
		ЭтоРасчетыСКлиентами = Истина;
	Иначе
		ЭтоРасчетыСКлиентами = Ложь;
	КонецЕсли;
	
	Возврат ЭтоРасчетыСКлиентами;
	
КонецФункции

// Процедура выбора документа расчетов с клиентами или поставщиками.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа
//	Партнер - СправочникСсылка.Партнеры - Партнер документа
//	Контрагент - СправочникСсылка.Контрагенты - Контрагент документа
//	Соглашение - Соглашение с клиентом или соглашение с поставщиком
//	ЭтоРасчетыСКлиентами - Булево - Признак расчетов с клиентами
//	Элемент - ПолеФормы - Поле для выбора документа расчетов
//	СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки
//
Процедура ДокументРасчетовНачалоВыбора(
	Организация,
	Партнер,
	Контрагент,
	Соглашение,
	ЭтоРасчетыСКлиентами,
	ВыборОснованияПлатежа,
	Элемент,
	СтандартнаяОбработка
	) Экспорт
		
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбор = Новый Структура("Организация, Контрагент, ЭтоРасчетыСКлиентами",
		Организация,
		Контрагент,
		ЭтоРасчетыСКлиентами
	);
	Если ЗначениеЗаполнено(Партнер) Тогда
		СтруктураОтбор.Вставить("Партнер", Партнер);	
	КонецЕсли;
	Если ЗначениеЗаполнено(Соглашение) Тогда
		СтруктураОтбор.Вставить("Соглашение", Соглашение);	
	КонецЕсли;
	СтруктураПараметры = Новый Структура("Отбор, ВыборОснованияПлатежа", СтруктураОтбор, ВыборОснованияПлатежа);
	ОткрытьФорму("ОбщаяФорма.ВыборДокументаРасчетов", СтруктураПараметры, Элемент);
	
КонецПроцедуры

// Процедура обработки события "ПриНачалеРедактирования" табличной части "РасшифровкаПлатежа".
//
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Объект, Партнер, ДоговорКонтрагента, СтрокаТаблицы, НоваяСтрока, Копирование) Экспорт
	
	ЭтоРасчетыСКлиентами = ЭтоРасчетыСКлиентами(Объект.ХозяйственнаяОперация);
	
	УстановитьПустуюСсылкуНаЗаказ(
		СтрокаТаблицы.Заказ,
		ЭтоРасчетыСКлиентами
	);
	
	Если СтрокаТаблицы.Свойство("ОснованиеПлатежа") Тогда
		УстановитьПустуюСсылкуНаЗаказ(
			СтрокаТаблицы.ОснованиеПлатежа,
			ЭтоРасчетыСКлиентами
		);
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		Если Копирование Тогда
			
			СуммаОстаток = Объект.СуммаДокумента - Объект.РасшифровкаПлатежа.Итог("Сумма")
				+ Объект.РасшифровкаПлатежа[Объект.РасшифровкаПлатежа.Количество()-1].Сумма;
			
		Иначе
			
			СуммаОстаток = Объект.СуммаДокумента - Объект.РасшифровкаПлатежа.Итог("Сумма");
			
			Если ЗначениеЗаполнено(Партнер) Тогда
				СтрокаТаблицы.Партнер = Партнер;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
				СтрокаТаблицы.Заказ = ДоговорКонтрагента;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицы.Сумма = СуммаОстаток;
		
	КонецЕсли;

	
КонецПроцедуры

// Получает пустую ссылку на заказ клиента или на заказ поставщику.
//
// Параметры:
//	Заказ - ДокументСсылка
//	ЭтоРасчетыСКлиентами - Булево - Признак отражения расчетов с клиентами
//
Процедура УстановитьПустуюСсылкуНаЗаказ(Заказ, ЭтоРасчетыСКлиентами) Экспорт
	
	Если Заказ = Неопределено Тогда
		Если ЭтоРасчетыСКлиентами Тогда
			Заказ = ПредопределенноеЗначение("Документ.ЗаказКлиента.ПустаяСсылка");
		Иначе
			Заказ = ПредопределенноеЗначение("Документ.ЗаказПоставщику.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет номера ГТД в строках табличной части документа.
//
Процедура ЗаполнитьНомераГТДвТабличнойЧасти(Товары, МассивСтрок = Неопределено) Экспорт
	
	НомерГТД = ОткрытьФормуМодально("Справочник.НомераГТД.ФормаВыбора");
	ЗаполненыНомераГТД = Ложь;
	
	Если ЗначениеЗаполнено(НомерГТД) Тогда
		
		МассивВедетсяУчетПоГТД = НоменклатураВызовСервера.ПолучитьТоварыВедетсяУчетПоГТД(Товары);
		
		Если МассивСтрок = Неопределено Тогда
			Для Каждого СтрокаТаблицы Из Товары Цикл
				Если МассивВедетсяУчетПоГТД.Найти(СтрокаТаблицы.Номенклатура) <> Неопределено Тогда
					СтрокаТаблицы.НомерГТД = НомерГТД;
					ЗаполненыНомераГТД = Истина;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ИдентификаторСтроки Из МассивСтрок Цикл
				СтрокаТаблицы = Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
				Если МассивВедетсяУчетПоГТД.Найти(СтрокаТаблицы.Номенклатура) <> Неопределено Тогда
					СтрокаТаблицы.НомерГТД = НомерГТД;
					ЗаполненыНомераГТД = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
		
	Если ЗаполненыНомераГТД Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='В строках документа заполнен номер ГТД %1'"),
			Строка(НомерГТД)
		);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Номера ГТД заполнены'"),
			,
			Текст,
			БиблиотекаКартинок.Информация32
		);
	Иначе
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Ни в одной строке номер ГТД не заполнен'"),
			Строка(НомерГТД)
		);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Номера ГТД не заполнены'"),
			,
			Текст,
			БиблиотекаКартинок.Информация32
		);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СписокПериодовВозникновенияРасходов(Дата)
	
	Список = Новый СписокЗначений;
	Список.Добавить(Дата, НСтр("ru = 'Текущий день'"));
	Список.Добавить(ДобавитьМесяц(КонецМесяца(Дата), -1), НСтр("ru = 'Прошлый месяц'"));
	Список.Добавить(ДобавитьМесяц(КонецКвартала(Дата), -3), НСтр("ru = 'Прошлый квартал'"));
	Список.Добавить(ДобавитьМесяц(КонецГода(Дата), -12), НСтр("ru = 'Прошлый год'"));
	Список.Добавить(ДобавитьМесяц(НачалоМесяца(Дата), 1), НСтр("ru = 'Следующий месяц'"));
	Список.Добавить(ДобавитьМесяц(НачалоКвартала(Дата), 3), НСтр("ru = 'Следующий квартал'"));
	Список.Добавить(ДобавитьМесяц(НачалоГода(Дата), 12), НСтр("ru = 'Следущий год'"));
	
	Возврат Список;
	
КонецФункции
