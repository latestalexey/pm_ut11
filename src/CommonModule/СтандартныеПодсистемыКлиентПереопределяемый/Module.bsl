////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
// Переопределяемые процедуры и функции для интеграции между собой подсистем библиотеки БСП.
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

/////////////////////////////////////////////////////////////////////////////////
// Базовая функциональность

// Выполняется перед началом работы пользователя с областью данных,
// либо в локальном режиме работы.
// Соответствует обработчику ПередНачаломРаботыСистемы
//
// Параметры:
// Отказ - Булево - отказ в от начала работы. Если параметр установить в Истина,
// начало работы с областью осуществлено не будет.
//
Процедура ПередНачаломРаботыСистемы(Отказ) Экспорт
	
	// СтандартныеПодсистемы.Пользователи
	ПользователиСлужебныйКлиент.ПроверитьАвторизациюПользователя(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Пользователи
	
	// Для вспомогательных окон.
	СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения(Истина);
	
	// Для толстого клиента в режиме обычного приложения логика выполняется в обработчике "ПриНачалеРаботыСистемы".
	// В остальных случаях - в обработчике "ПередНачаломРаботыСистемы".
#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
	ВерсияАктуальна = СтандартныеПодсистемыКлиент.ПроверитьВерсиюПлатформыПриЗапуске();
	Если Не ВерсияАктуальна Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
#КонецЕсли
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	СоединенияИБКлиент.ПередНачаломРаботыСистемы(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	ОбновлениеИнформационнойБазыКлиент.ПередНачаломРаботыСистемы(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
	
#Если НЕ ТолстыйКлиентОбычноеПриложение Тогда
	// СтандартныеПодсистемы.ПроверкаЛегальностиПолученияОбновления
	Если НЕ ПроверкаЛегальностиПолученияОбновленияКлиент.ПриНачалеРаботыСистемы() Тогда
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПроверкаЛегальностиПолученияОбновления
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	ОбновлениеИнформационнойБазыКлиент.ВыполнитьОбновлениеИнформационнойБазы();
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
#КонецЕсли
	
КонецПроцедуры

// Выполняется при начале работы пользователя с областью данных,
// либо в локальном режиме работы.
// Соответствует обработчику ПриНачалеРаботыСистемы. 
// Последовательность вызовов должна быть строго определенной (не по алфавиту).
//
// Параметры
//  ОбрабатыватьПараметрыЗапуска - Булево - Истина, если обработчик вызван при 
//  непосредственном входе пользователя в систему и должен обработать параметры
//  запуска (если это предусмотрено его логикой). Иначе обработчика вызван
//  при интерактивном входе неразделенного пользователя в область данных и
//  обрабатывать параметры запуска не следует.
//
Процедура ПриНачалеРаботыСистемы(Знач ОбрабатыватьПараметрыЗапуска = Ложь) Экспорт
	
	// Для главного окна.
	СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения(Истина);
	
	// Для толстого клиента в режиме обычного приложения логика выполняется в обработчике "ПриНачалеРаботыСистемы".
	// В остальных случаях - в обработчике "ПередНачаломРаботыСистемы".
#Если ТолстыйКлиентОбычноеПриложение Тогда  
	ВерсияАктуальна = СтандартныеПодсистемыКлиент.ПроверитьВерсиюПлатформыПриЗапуске();
	Если Не ВерсияАктуальна Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПроверкаЛегальностиПолученияОбновления
	Если НЕ ПроверкаЛегальностиПолученияОбновленияКлиент.ПриНачалеРаботыСистемы() Тогда
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПроверкаЛегальностиПолученияОбновления
	
	// СтандартныеПодсистемы.ОбновлениеВерсииИБ
	ОбновлениеИнформационнойБазыКлиент.ВыполнитьОбновлениеИнформационнойБазы();
	// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ
#КонецЕсли
	
	// Обработка параметров запуска системы.
	Если СтандартныеПодсистемыКлиент.ОбработатьПараметрыЗапуска(ОбрабатыватьПараметрыЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	СоединенияИБКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	
	// СтандартныеПодсистемы.ОбменДанными
	ОбменДаннымиКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	ОбменДаннымиВМоделиСервисаКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// СтандартныеПодсистемы.ОбновлениеКонфигурации
	ОбновлениеКонфигурацииКлиент.ПроверитьОбновлениеКонфигурации();
	// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации
	
	// СтандартныеПодсистемы.РегламентныеЗадания
	// Прим.: подсистема КонтрольДинамическогоОбновленияКонфигурации
	//        должна настраиваться после подсистемы РегламентныеЗадания, т.к. в режиме запуска отдельного
	//        сеанса обработки регламентных заданий, управление не будет и не должно быть передано далее.
	РегламентныеЗаданияСлужебныйКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы.РегламентныеЗадания
	
	// СтандартныеПодсистемы.РезервноеКопированиеИБ
	РезервноеКопированиеИБКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы.РезервноеКопированиеИБ
	
	// СтандартныеПодсистемы.КонтрольДинамическогоОбновленияКонфигурации
	КонтрольДинамическогоОбновленияКонфигурацииКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы.КонтрольДинамическогоОбновленияКонфигурации
	
	// СтандартныеПодсистемы.НапоминанияПользователя
	НапоминанияПользователяКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы.НапоминанияПользователя
	
	// СтандартныеПодсистемы.Банки
	РаботаСБанкамиКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы.Банки
	
	// СтандартныеПодсистемы.Валюты
	РаботаСКурсамиВалютКлиент.ПриНачалеРаботыСистемы();
	// Конец СтандартныеПодсистемы.Валюты
	
КонецПроцедуры

// Обработать параметры запуска программы.
// Реализация функции может быть расширена для обработки новых параметров.
//
// Параметры
//  ЗначениеПараметраЗапуска - Строка - первое значение параметра запуска, 
//                                      до первого символа ";"
//  ПараметрыЗапуска  – Строка – параметр запуска, переданный в конфигурацию 
//                               с помощью ключа командной строки /C.
//
// Возвращаемое значение:
//   Булево   – Истина, если необходимо прервать выполнение процедуры ПриНачалеРаботыСистемы.
//
Функция ОбработатьПараметрыЗапуска(ЗначениеПараметраЗапуска, ПараметрыЗапуска) Экспорт

	Результат = Ложь;
	
	// СтандартныеПодсистемы.ОбменДанными
	Результат = ОбменДаннымиКлиент.ОбработатьПараметрыЗапуска(ЗначениеПараметраЗапуска, ПараметрыЗапуска);
	// Конец СтандартныеПодсистемы.ОбменДанными
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	Результат = СоединенияИБКлиент.ОбработатьПараметрыЗапуска(ЗначениеПараметраЗапуска, ПараметрыЗапуска) Или Результат;
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей

	Возврат Результат;

КонецФункции

// Соответствует обработчику ПередЗавершениемРаботыСистемы
//
Процедура ПередЗавершениемРаботыСистемы(Отказ) Экспорт
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.ЗаписатьРезультатыАвтоНеГлобальный(Истина);
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
КонецПроцедуры

// Вызывается при завершении работы системы, чтобы запросить список предупреждений,
// выводимых пользователю.
//
// Параметры:
//	Предупреждения - Массив - список предупреждений. Элемент массива - Структура с полями:
//		ТекстФлажка - Строка - текст флажка.
//		ПоясняющийТекст - Строка - текст, выводимый в форме сверху управляющего элемента (флажок или гиперссылка).
//		ДействиеПриУстановленномФлажке - Структура с полями:
//			Форма - путь к открываемой форме.
//			ПараметрыФормы - произвольная структура параметров формы Форма. 
//		ТекстГиперссылки - Строка - текст гиперссылки.
//		ДействиеПриНажатииГиперссылки - Структура с полями:
//			Форма - Строка - путь к форме, которая должна открываться по нажатию на гиперссылку.
//			ПараметрыФормы - Структура - произвольная структура параметров для вышеописанной формы.
//			ПрикладнаяФормаПредупреждения - Строка - путь к форме, которая должна открываться сразу вместо 
//				универсальной формы в случае, когда в списке предупреждений оказывается только одно данное предупреждение.
//			ПараметрыПрикладнойФормыПредупреждения - Структура - произвольная структура параметров для вышеописанной формы.
//
Процедура ПолучитьСписокПредупреждений(Предупреждения) Экспорт
	
	// СтандартныеПодсистемы.РезервноеКопированиеИБ
	РезервноеКопированиеИБКлиент.ПриЗавершенииРаботыСистемы(Предупреждения);
	// Конец СтандартныеПодсистемы.РезервноеКопированиеИБ
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	ОбменДаннымиВМоделиСервисаКлиент.ПриЗавершенииРаботыСистемы(Предупреждения);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
	// СтандартныеПодсистемы.ОбновлениеКонфигурации
	// Предупреждение: при выставлении своего флажка подсистема "Обновление конфигурации" очищает список
	// всех ранее добавленных предупреждений.
	ОбновлениеКонфигурацииКлиент.ПриЗавершенииРаботыСистемы(Предупреждения);
	// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиСлужебныйКлиент.ПриЗавершенииРаботыСистемы(Предупреждения);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Вызывается при необходимости открыть форму списка активных пользователей,
// которые в данный момент времени работают с системой.
//
// Пример реализации:
// - при внедрении подсистемы "Завершение работы пользователей" можно использовать форму обработки АктивныеПользователи:
//   ОткрытьФорму("Обработка.АктивныеПользователи.Форма.ФормаСпискаАктивныхПользователей");
//
Процедура ОткрытьСписокАктивныхПользователей() Экспорт
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	ОткрытьФорму("Обработка.АктивныеПользователи.Форма.ФормаСпискаАктивныхПользователей");
	Возврат;
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	
	Предупреждение(НСтр("ru='Для того чтобы открыть список активных пользователей, перейдите в меню
		|Все функции - Стандартные - Активные пользователи.'"));
	
КонецПроцедуры

// СтандартныеПодсистемы.ВариантыОтчетов

/////////////////////////////////////////////////////////////////////////////////
// Варианты отчетов

// Открывает форму дополнительного отчета с заданным вариантом.
//
// Параметры
//   Вариант (Структура)
//       |- Ссылка (СправочникСсылка.ВариантыОтчетов)
//       |- Отчет (*) см. тип реквизита Отчет справочника ВариантыОтчетов.
//       |- КлючВарианта (Строка)
//
Процедура ОткрытьВариантДополнительногоОтчета(Вариант) Экспорт
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	Если ТипЗнч(Вариант.Отчет) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		ДополнительныеОтчетыИОбработкиКлиент.ОткрытьВариантДополнительногоОтчета(Вариант.Отчет, Вариант.КлючВарианта);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры

// Обработчик команд, добавленных динамически.
//
// Параметры:
//   ЭтаФорма  (УправляемаяФорма) Форма отчета.
//   Команда   (КомандаФормы)     Команда, которая была вызвана.
//   Результат (Булево)           Истина, если вызов команды обработан.
//
Процедура ФормаОтчетаОбработчикКоманды(ЭтаФорма, Команда, Результат) Экспорт
	
	// СтандартныеПодсистемы.РассылкаОтчетов
	РассылкаОтчетовКлиент.ФормаОтчетаОбработчикКоманды(ЭтаФорма, Команда, Результат);
	// Конец СтандартныеПодсистемы.РассылкаОтчетов
	
КонецПроцедуры

// Обработчик результата выбора подчиненной формы.
//
// Параметры:
//   ЭтаФорма          (УправляемаяФорма) Форма отчета.
//   ВыбранноеЗначение (*)                Результат выбора в подчиненной форме.
//   ИсточникВыбора    (УправляемаяФорма) Форма, где осуществлен выбор. 
//   Результат         (Булево)           Истина, если результат выбора обработан.
//
Процедура ФормаОтчетаОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, Результат) Экспорт
	
	// СтандартныеПодсистемы.РассылкаОтчетов
	РассылкаОтчетовКлиент.ФормаОтчетаОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, Результат);
	// Конец СтандартныеПодсистемы.РассылкаОтчетов
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

/////////////////////////////////////////////////////////////////////////////////
// Дополнительные отчеты и обработки

// Открывает форму размещения нескольких вариантов отчетов по разделам КИ.
// 
// Параметры
//   МассивВариантов (Массив) См. описание вызываемых процедур и функций.
// 
Процедура ОткрытьДиалогРазмещенияВариантовДополнительныхОтчетовВРазделах(МассивВариантов) Экспорт
	
	// СтандартныеПодсистемы.ВариантыОтчетов
	ВариантыОтчетовКлиент.ОткрытьДиалогРазмещенияВариантовВРазделах(МассивВариантов);
	// Конец СтандартныеПодсистемы.ВариантыОтчетов
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

// СтандартныеПодсистемы.КонтактнаяИнформация

/////////////////////////////////////////////////////////////////////////////////
// Контактная информация

// Открывает форму загрузки адресного классификатора.
//
Процедура ЗагрузитьАдресныйКлассификатор() Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	АдресныйКлассификаторКлиент.ЗагрузитьАдресныйКлассификатор();
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры 

// Подбирает адресный объект через форму.
//
// Параметры:
//	СтруктураАдреса - Структура - структура адреса.
//	СтруктураРезультата - Неопределено или Структура - структура возврат выбранного адресного объекта.
//
Процедура ПодобратьАдресныйОбъект(Знач СтруктураАдреса, СтруктураРезультата) Экспорт
	
	// СтандартныеПодсистемы.АдресныйКлассификатор
	СтруктураРезультата = ОткрытьФормуМодально("РегистрСведений.АдресныйКлассификатор.Форма.ФормаВыбора", СтруктураАдреса);
	// Конец СтандартныеПодсистемы.АдресныйКлассификатор
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

// СтандартныеПодсистемы.ПолнотекстовыйПоиск

/////////////////////////////////////////////////////////////////////////////////
// Полнотекстовый поиск

// Вызывается при открытии объекта из полнотекстового поиска
// Функция ПриОткрытииОбъекта позволяет настроить
// поведение при открытии результата из списка найденного в полнотекстовом поиске
// Например, это необходимо при использовании подсистемы "Бизнес-процессы и задачи".
//
// Параметры
//  Значение - объект, найденный в полнотекстовом поиске, например СправочникСсылка
//  СтандартнаяОбработка - Булево - по умолчанию Истина. 
//   Если поведение изменено (по собственной механике делается открытие формы для Значение),
//   то СтандартнаяОбработка надо установить в Ложь
// 
// При использовании подсистемы "Бизнес-процессы и задачи" нужно
// вписать следующий код:
//
//Если ТипЗнч(Значение) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
//	Если БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Значение) Тогда
//		СтандартнаяОбработка = Ложь;
//	КонецЕсли;
//КонецЕсли;
//
Процедура ПолнотекстовыйПоискПриОткрытииОбъекта(Значение, СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	Если ТипЗнч(Значение) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Если БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Значение) Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.БизнесПроцессыИЗадачи
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПолнотекстовыйПоиск

// СтандартныеПодсистемы.ПрефиксацияОбъектов

/////////////////////////////////////////////////////////////////////////////////
// Префиксация объектов

// Обработчик открытия формы активных пользователей для последующей установки блокировки на работу пользователей с ИБ.
//
//  Параметры:
// СтандартнаяОбработка – Булево. Флаг стандартной обработки. Стандартная обработка не подразумевает никаких действий.
// Владелец – Форма. Форма, которая является владельцем по отношению к открываемой форме монитора активных пользователей.
//
Процедура ПриОткрытииФормыАктивныхПользователей(СтандартнаяОбработка, Владелец) Экспорт
	
	// СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	СоединенияИБКлиентПереопределяемый.ПриОткрытииФормыАктивныхПользователей(СтандартнаяОбработка, Владелец);
	// Конец СтандартныеПодсистемы.ЗавершениеРаботыПользователей
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПрефиксацияОбъектов


// СтандартныеПодсистемы.РассылкаОтчетов

/////////////////////////////////////////////////////////////////////////////////
// Рассылка отчетов

// Открывает форму подбора дополнительных отчетов.
// 
Процедура РассылкаОтчетовПодборДопОтчета(ЭлементФормы) Экспорт
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныйОтчет = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет");
	Отчет               = ПредопределенноеЗначение("Перечисление.ВидыДополнительныхОтчетовИОбработок.Отчет");
	
	ОтборПоВиду = Новый СписокЗначений;
	ОтборПоВиду.Добавить(ДополнительныйОтчет, ДополнительныйОтчет);
	ОтборПоВиду.Добавить(Отчет, Отчет);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",  РежимОткрытияОкнаФормы.Независимый);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормыВыбора.Вставить("Отбор",              Новый Структура("Вид", ОтборПоВиду));
	
	ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.ФормаВыбора", ПараметрыФормыВыбора, ЭлементФормы);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры

// Открывает форму папки со списком файлов.
// 
Процедура РассылкаОтчетовПросмотрПапки(СтандартнаяОбработка, Папка) Экспорт
	
	// СтандартныеПодсистемы.РаботаСФайлами
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Папка", Папка);
	ОткрытьФорму("Справочник.Файлы.Форма.ХранилищеФайлов", ПараметрыФормы, , Папка);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РассылкаОтчетов

// СтандартныеПодсистемы.ОбменДанными

/////////////////////////////////////////////////////////////////////////////////
// Обмен данными

// Обновляет конфигурацию базы данных.
//
// Параметры:
//  СтандартнаяОбработка - Булево - если в процедуре установить данному параметру значение Ложь, то инструкция по
//                                  "ручному" обновлению показана не будет.
Процедура ВыполнитьОбновлениеИнформационнойБазы(СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.ОбновлениеКонфигурации
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Обработка.ОбновлениеКонфигурации.Форма.Форма");
	// Конец СтандартныеПодсистемы.ОбновлениеКонфигурации
	
КонецПроцедуры

// Используется для открытия формы группового изменения объектов.
//
// Параметры:
//  Список - ТаблицаФормы - элемент формы списка, содержащий ссылки на изменяемые объекты.
//
Процедура ПриИзмененииВыделенныхОбъектов(Список) Экспорт
	
	// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Список);
	// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	
КонецПроцедуры

// Обработчик вызывается при завершении работы помощника создания обмена данными по нажатию в помощнике на кнопку "Готово".
//
// Параметры:
//  <Помощник> 
// Тип: Управляемая форма, Обычная форма.
// Форма помощника создания обмена данными, которая является инициатором события.
//
//  <ЗапуститьМенеджерЗаданий>
// Тип: Булево.
// Признак, показывающий, что необходимо выполнить запуск менеджера заданий (отдельного сеанса 1С:Предприятия)
// для отработки регламентных и фоновых заданий при файловом режиме работы информационной базы.
// Параметр имеет значение Истина, когда в помощнике создания обмена пользователь указал расписание
// и режим работы информационной базы файловый. 
// Если режим работы информационной базы клиент-серверный, то значение параметра всегда Ложь.
//
Процедура ПриЗавершенииРаботыПомощникаСозданияОбмена(Помощник, ЗапуститьМенеджерЗаданий) Экспорт
	
	// СтандартныеПодсистемы.РегламентныеЗадания
	Если ЗапуститьМенеджерЗаданий Тогда
		ЗапуститьОтдельныйСеансДляВыполненияРегламентныхЗаданийЧерезОбработчикОжидания();
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РегламентныеЗадания
	
КонецПроцедуры

// Обработчик события открытия инструкции по восстановлению/изменению пароля синхронизации данных
// с автономным рабочим местом.
//
Процедура ПриОткрытииИнструкцииКакИзменитьПарольСинхронизацииДанных() Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	ОбменДаннымиВМоделиСервисаКлиент.ПриОткрытииИнструкцииКакИзменитьПарольСинхронизацииДанных();
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменДаннымиВМоделиСервиса
	
КонецПроцедуры

// Открывает отчет о версии или о сравнении версий
//
// Параметры:
//	Ссылка - Ссылка на объект
//	СравниваемыеВерсии - Массив - Содержит массив сравниваемых версий,
//	если версия одна, то открывается отчет о версии
//
Процедура ПриОткрытииФормыОтчетаПоВерсии(Ссылка, СравниваемыеВерсии) Экспорт
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Ссылка", Ссылка);
	ПараметрыОтчета.Вставить("СравниваемыеВерсии", СравниваемыеВерсии);
	ОткрытьФорму("РегистрСведений.ВерсииОбъектов.Форма.ОтчетПоВерсиямОбъекта", ПараметрыОтчета);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

// Открывает параметры версионирования объектов
//
Процедура ПриОткрытииФормыПараметровВерсионирования() Экспорт
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ОткрытьФорму("РегистрСведений.НастройкиВерсионированияОбъектов.ФормаСписка");
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбменДанными

/////////////////////////////////////////////////////////////////////////////////
// Пользователи в модели сервиса

// Открывает форму ввода пароля пользователя сервиса
//
// Параметры:
//  ПарольПользователяСервиса - Строка - пароль пользователя сервиса
//  Отказ - Булево - флаг отказа от выполнения действия
//
Процедура ЗапроситьПарольДляАутентификацииВСервисе(ПарольПользователяСервиса, Отказ) Экспорт
	
	// СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	ПользователиСлужебныйВМоделиСервисаКлиент.ЗапроситьПарольДляАутентификацииВСервисе(
		ПарольПользователяСервиса, Отказ);
	// Конец СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса
	
КонецПроцедуры
