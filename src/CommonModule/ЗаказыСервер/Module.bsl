////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКОтгрузке;

	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписей = Движения.ТоварыКОтгрузке;
	НаборЗаписей.Записывать = Истина;
	НаборЗаписей.Загрузить(Таблица);

КонецПроцедуры

Процедура ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДвижениеТоваров;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Набор = Движения.ДвижениеТоваров;
	Набор.Записывать = Истина;

	ПодЗаказ = Перечисления.ВариантыОбеспечения.ПодЗаказ;
	ЕстьВариантОбеспечения = Таблица.Колонки.Найти("ПланируемаяОтгрузка") <> Неопределено
					И Таблица.Колонки.Найти("ВариантОбеспечения") <> Неопределено;
	Для Каждого СтрокаТаб Из Таблица Цикл

		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, СтрокаТаб);
		Если ЗначениеЗаполнено(Запись.Назначение) И Запись.ПланируемоеПоступление <> 0 Тогда

			Запись.ПланируемоеПоступлениеПодЗаказ = Запись.ПланируемоеПоступление;
			Запись.ПланируемоеПоступление = 0;

		ИначеЕсли ЗначениеЗаполнено(Запись.Назначение) И Запись.ПланируемаяОтгрузка <> 0 Тогда

			Если ЕстьВариантОбеспечения Тогда 
				Если СтрокаТаб.ВариантОбеспечения = ПодЗаказ Тогда 

					Запись.ПланируемаяОтгрузкаПодЗаказ = Запись.ПланируемаяОтгрузка;
					Запись.ПланируемаяОтгрузка = 0;

				ИначеЕсли СтрокаТаб.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.СоСклада Тогда 

					Запись.ПланируемаяОтгрузкаСоСклада = Запись.ПланируемаяОтгрузка;
					Запись.ПланируемаяОтгрузка = 0;

				КонецЕсли;
			Иначе

				Запись.ПланируемаяОтгрузкаПодЗаказ = Запись.ПланируемаяОтгрузка;
				Запись.ПланируемаяОтгрузка = 0;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ОтразитьЗаказыКлиентов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаЗаказыКлиентов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыКлиентов;
	
	Если Отказ ИЛИ ТаблицаЗаказыКлиентов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗаказыКлиентов = Движения.ЗаказыКлиентов;
	ДвиженияЗаказыКлиентов.Записывать = Истина;
	ДвиженияЗаказыКлиентов.Загрузить(ТаблицаЗаказыКлиентов);
	
КонецПроцедуры

Процедура ОтразитьЗаказыНаСборку(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыНаСборку;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = Движения.ЗаказыНаСборку;
	НаборЗаписей.Записывать = Истина;
	НаборЗаписей.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ОтразитьЗаказыНаПеремещение(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыНаПеремещение;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = Движения.ЗаказыНаПеремещение;
	НаборЗаписей.Записывать = Истина;
	НаборЗаписей.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ОтразитьЗаказыНаВнутреннееПотребление(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыНаВнутреннееПотребление;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписей = Движения.ЗаказыНаВнутреннееПотребление;
	НаборЗаписей.Записывать = Истина;
	НаборЗаписей.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаТоварыКПоступлению = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаТоварыКПоступлению;
	
	Если Отказ ИЛИ ТаблицаТоварыКПоступлению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияТоварыКПоступлению = Движения.ТоварыКПоступлению;
	ДвиженияТоварыКПоступлению.Записывать = Истина;
	ДвиженияТоварыКПоступлению.Загрузить(ТаблицаТоварыКПоступлению);
	
КонецПроцедуры

Процедура ОтразитьЗаказыПоставщикам(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаЗаказыПоставщикам = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаказыПоставщикам;
	
	Если Отказ ИЛИ ТаблицаЗаказыПоставщикам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗаказыПоставщикам = Движения.ЗаказыПоставщикам;
	ДвиженияЗаказыПоставщикам.Записывать = Истина;
	ДвиженияЗаказыПоставщикам.Загрузить(ТаблицаЗаказыПоставщикам);
	
КонецПроцедуры

Процедура ОтразитьЗаявкиНаВозвратТоваровОтКлиентов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаЗаявкиНаВозвратТоваровОтКлиентов = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЗаявкиНаВозвратТоваровОтКлиентов;
	
	Если Отказ ИЛИ ТаблицаЗаявкиНаВозвратТоваровОтКлиентов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗаявкиНаВозвратТоваровОтКлиентов = Движения.ЗаявкиНаВозвратТоваровОтКлиентов;
	ДвиженияЗаявкиНаВозвратТоваровОтКлиентов.Записывать = Истина;
	ДвиженияЗаявкиНаВозвратТоваровОтКлиентов.Загрузить(ТаблицаЗаявкиНаВозвратТоваровОтКлиентов);
	
КонецПроцедуры

Функция УстановитьКлючВСтрокахТабличнойЧасти(Объект, ИмяТабличнойЧасти, РеквизитМаксимальныйКодСтроки = "МаксимальныйКодСтроки") Экспорт

	СтрокиБезКлюча = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("КодСтроки", 0));
	Если СтрокиБезКлюча.Количество() > 0 Тогда
		
		ТекущийКод = Объект[РеквизитМаксимальныйКодСтроки];
		
		Для Каждого СтрокаТовары Из СтрокиБезКлюча Цикл
			
			ТекущийКод = ТекущийКод + 1;
			СтрокаТовары.КодСтроки = ТекущийКод;
			
		КонецЦикла;
		
		Объект[РеквизитМаксимальныйКодСтроки] = ТекущийКод;
		
	КонецЕсли;

КонецФункции

Функция ПолучитьМинимальнуюДатуОтгрузкиЗаказа(ЗаказИлиМассивЗаказов) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Период
	|ИЗ
	|	РегистрНакопления.ГрафикДвиженияТоваров КАК Таблица
	|ГДЕ
	|	Таблица.Регистратор В (&МассивЗаказов)
	|	И Таблица.Период <= &ТекущаяДата
	|	И Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Таблица.Активность
	|;
	|/////////////////////////////////////////
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ГрафикДвиженияТоваров КАК Таблица
	|ГДЕ
	|	Таблица.Регистратор В (&МассивЗаказов)
	|	И Таблица.Период > &ТекущаяДата
	|	И Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Таблица.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период ВОЗР
	|");
	Запрос.УстановитьПараметр("МассивЗаказов", ЗаказИлиМассивЗаказов);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));

	МассивРезультатов = Запрос.ВыполнитьПакет();

	Результат = ТекущаяДата();

	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда

		Результат = ТекущаяДата();

	Иначе 

		Выборка = МассивРезультатов[1].Выбрать();
		Если Выборка.Следующий() Тогда

			Результат = Выборка.Период;

		КонецЕсли;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМаксимальнуюДатуОтгрузкиЗаказа(ЗаказИлиМассивЗаказов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Период КАК Период
	|ИЗ
	|	РегистрНакопления.ГрафикДвиженияТоваров КАК Таблица
	|ГДЕ
	|	Таблица.Регистратор В (&МассивЗаказов)
	|	И Таблица.Период >= &ТекущаяДата
	|	И Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И Таблица.Активность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ
	|");
	Запрос.УстановитьПараметр("МассивЗаказов", ЗаказИлиМассивЗаказов);
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Период;
	Иначе
		Результат = ТекущаяДата();
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ПроверитьДатуРаспоряжения(Объект) Экспорт

	ТекДатаРаспоряжения = КонецДня(Объект.Дата);

	// Дата распоряжения не должна быть больше текущей.
	Если ТекДатаРаспоряжения > КонецДня(ТекущаяДата()) Тогда

		ТекДатаРаспоряжения = КонецДня(ТекущаяДата());

	КонецЕсли;

	Если Объект.ДатаРаспоряжения <> ТекДатаРаспоряжения Тогда

		Объект.ДатаРаспоряжения = ТекДатаРаспоряжения;

	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьИнформациюПоЗаказамВФорме(СписокЗаказов,
	                                        ЗаказВШапке,
	                                        НадписьЗаголовок,
	                                        ЭлементыФормы,
	                                        ГруппаКолонокВТабличнойЧасти,
	                                        Знач ТабличнаяЧасть,
	                                        Знач ИмяЗаказаВТабличнойЧасти,
	                                        Знач ИспользоватьЗаказыВТабличнойЧасти,
											НадписьВсегоЗаказов = Неопределено) Экспорт
	
	Если Не ИспользоватьЗаказыВТабличнойЧасти Тогда
		Возврат;
	КонецЕсли;
		
	СписокЗаказов.Очистить();
	Для Каждого ТекСтрока Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(ТекСтрока[ИмяЗаказаВТабличнойЧасти]) И СписокЗаказов.НайтиПоЗначению(ТекСтрока[ИмяЗаказаВТабличнойЧасти]) = Неопределено Тогда
			СписокЗаказов.Добавить(ТекСтрока[ИмяЗаказаВТабличнойЧасти]);
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользоватьЗаказыВТабличнойЧасти Тогда
		Если СписокЗаказов.Количество() = 1 Тогда
			ЗаказВШапке = СписокЗаказов[0].Значение;
		ИначеЕсли СписокЗаказов.Количество() > 1 Тогда
			ЗаказВШапке = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если СписокЗаказов.Количество() > 1 Тогда
		Если НадписьВсегоЗаказов = Неопределено Тогда
			НадписьВсегоЗаказов = НСтр("ru = 'Всего заказов'");
		КонецЕсли;
		НадписьЗаголовок = НадписьВсегоЗаказов + ": " + СписокЗаказов.Количество();
	КонецЕсли;
	
	Если СписокЗаказов.Количество() <= 1 Тогда
		ЭлементыФормы.СтраницыЗаказ.ТекущаяСтраница = ЭлементыФормы.СтраницаЗаказ;
	Иначе
		ЭлементыФормы.СтраницыЗаказ.ТекущаяСтраница = ЭлементыФормы.СтраницаЗаказы;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ЗаказВШапке) Или Не ИспользоватьЗаказыВТабличнойЧасти Тогда
		ГруппаКолонокВТабличнойЧасти.Группировка = ГруппировкаКолонок.Вертикальная;
	Иначе
		ГруппаКолонокВТабличнойЧасти.Группировка = ГруппировкаКолонок.ВЯчейке;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(ЗаказВШапке, Знач ТабличнаяЧасть, Знач ИмяЗаказаВТабличнойЧасти) Экспорт
	
	// Заполним заказ в шапке, если в табличной части указан один заказ
	ЗаказыТабличнойЧасти = ТабличнаяЧасть.Выгрузить(,ИмяЗаказаВТабличнойЧасти);
	ЗаказыТабличнойЧасти.Свернуть(ИмяЗаказаВТабличнойЧасти);
	
	Если ЗаказыТабличнойЧасти.Количество() = 1 Тогда
		СтрокаТабличнойЧасти = ЗаказыТабличнойЧасти[0];
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяЗаказаВТабличнойЧасти]) Тогда
			ЗаказВШапке = СтрокаТабличнойЧасти[ИмяЗаказаВТабличнойЧасти];
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПризнакиПрисутствияСтрокиВДокументе(ТаблицаТовары, ИмяЗаказаВТабличнойЧасти, МассивКодовСтрок) Экспорт

	Для Каждого СтрокаТаб Из ТаблицаТовары Цикл
	
		СтрокаТаб.ПрисутствуетВДокументе = Ложь;
		
		Для Каждого ТекСтрока Из МассивКодовСтрок Цикл
			
			Если ТекСтрока.КодСтроки = СтрокаТаб.КодСтроки И ТекСтрока[ИмяЗаказаВТабличнойЧасти] = СтрокаТаб[ИмяЗаказаВТабличнойЧасти] Тогда
				
				СтрокаТаб.ПрисутствуетВДокументе = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаТаб.СтрокаВыбрана = Не СтрокаТаб.ПрисутствуетВДокументе;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
