////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает валюту управленческого учета
// Если переданная в качестве параметра валюта уже заполнена - возвращает ее.
// Если валюта не передана в качестве параметра или передан пустой,
// валюту УУ. Если валюта УУ не заполнена - возвращает пустую ссылку на валюту
//
// Параметры:
// Валюта - СправочникСсылка.Валюты - Валюта, которую нужно заполнить
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты
//
Функция ПолучитьВалютуУправленческогоУчета(Знач Валюта = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Возврат Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		Возврат Валюта;
	КонецЕсли;
	
КонецФункции // ПолучитьВалютуУправленческогоУчета()

// Возвращает валюту регламентированного учета
// Если переданная в качестве параметра валюта уже заполнена - возвращает ее.
// Если валюта не передана в качестве параметра или передан пустой,
// валюту РУ. Если валюта РУ не заполнена - возвращает пустую ссылку на валюту
//
// Параметры:
// Валюта - СправочникСсылка.Валюты - Валюта, которую нужно заполнить
//
// Возвращаемое значение:
//	СправочникСсылка.Валюты
//
Функция ПолучитьВалютуРегламентированногоУчета(Знач Валюта = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	Иначе
		Возврат Валюта;
	КонецЕсли;
	
КонецФункции // ПолучитьВалютуУправленческогоУчета()

// Процедура заполняет статью и аналитику расходов последними использованными в документах.
//
Процедура ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию(Организация, Подразделение, ТекущиеДанные) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|
	|	ТаблицаАналитикРасходов.СтатьяРасходов	  КАК СтатьяРасходов,
	|	ТаблицаАналитикРасходов.АналитикаРасходов КАК АналитикаРасходов
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка.Дата		  КАК Период,
	|		ДанныеДокумента.СтатьяРасходов	  КАК СтатьяРасходов,
	|		ДанныеДокумента.АналитикаРасходов КАК АналитикаРасходов
	|	ИЗ
	|		Документ.ЗаказНаВнутреннееПотребление.Товары КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.Ссылка.Проведен
	|		И ДанныеДокумента.Ссылка.Организация   = &Организация
	|		И ДанныеДокумента.Ссылка.Подразделение = &Подразделение
	|		И ДанныеДокумента.Номенклатура		   = &Номенклатура
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеДокумента.Ссылка.Дата		  КАК Период,
	|		ДанныеДокумента.СтатьяРасходов	  КАК СтатьяРасходов,
	|		ДанныеДокумента.АналитикаРасходов КАК АналитикаРасходов
	|	ИЗ
	|		Документ.ВнутреннееПотреблениеТоваров.Товары КАК ДанныеДокумента
	|	ГДЕ
	|		ДанныеДокумента.Ссылка.Проведен
	|		И ДанныеДокумента.Ссылка.Организация   = &Организация
	|		И ДанныеДокумента.Ссылка.Подразделение = &Подразделение
	|		И ДанныеДокумента.Номенклатура		   = &Номенклатура
	|	) КАК ТаблицаАналитикРасходов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаАналитикРасходов.Период УБЫВ");
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Номенклатура",  ТекущиеДанные.Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Выборка);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию()

// Процедура выполняет заполнение или очистку аналитики расходов при изменении статьи расходов.
//
// Параметры:
//	Объект - ДанныеФормыСтруктура - Данные документа
//	СтатьяРасходов - ПланВидовХарактеристикСсылка.СтатьиРасходов - Указанная в документе статья расходов
//	АналитикаРасходов - Характеристика.СтатьиРасходов - Аналитика статьи расходов
//
Процедура СтатьяРасходовПриИзменении(Объект, СтатьяРасходов, АналитикаРасходов) Экспорт
	
	Если Не ЗначениеЗаполнено(СтатьяРасходов) Тогда
		АналитикаРасходов = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АналитикаРасходов) Тогда
		АналитикаРасходов = ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьАналитикуРасходовПоУмолчанию(
			СтатьяРасходов,
			Объект
		);
	Иначе
		ОчиститьАналитикуПрочихРасходов(СтатьяРасходов, АналитикаРасходов);
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает аналитику расходов, если она не соответствует статье расходов.
//
// Параметры:
//	СтатьяРасходов - ПланВидоХарактеристик.СтатьиРасходов - Выбранная статья расходов
//	АналитикаРасходов - Характеристика.СтатьиРасходов - Указанная аналитика расходов
//
Процедура ОчиститьАналитикуПрочихРасходов(СтатьяРасходов, АналитикаРасходов) Экспорт
	
	Если ТипЗнч(АналитикаРасходов) = Тип("СправочникСсылка.ПрочиеРасходы") Тогда
	
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Истина КАК ОчиститьАналитику
		|ИЗ
		|	Справочник.ПрочиеРасходы КАК ДанныеСправочника
		|ГДЕ
		|	ДанныеСправочника.Ссылка = &АналитикаРасходов
		|	И ДанныеСправочника.Владелец <> &СтатьяРасходов
		|");
		Запрос.УстановитьПараметр("СтатьяРасходов", СтатьяРасходов);
		Запрос.УстановитьПараметр("АналитикаРасходов", АналитикаРасходов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.ОчиститьАналитику Тогда
				АналитикаРасходов = Справочники.ПрочиеРасходы.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает контрагента из документа основания
//
// Параметры
//  ДокументОснование	- документ-основание
//
// Возвращаемое значение:
//   Ссылка на контрагента
//
Функция ПолучитьКонтрагентаИзОснования(ДокументОснование) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ТипОснования = ТипЗнч(ДокументОснование);
	
	Контрагент = Неопределено;
	
	Если ТипОснования = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Контрагент,ХозяйственнаяОперация,БанковскийСчетПолучатель");
		Если ЗначенияРеквизитов.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
			Контрагент = ЗначенияРеквизитов.БанковскийСчетПолучатель.Владелец;
		Иначе
			Контрагент = ЗначенияРеквизитов.Контрагент;
		КонецЕсли; 

	ИначеЕсли ТипОснования = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОснование, "Контрагент,ХозяйственнаяОперация,КассаПолучатель");

		Если ЗначенияРеквизитов.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
			Контрагент = ЗначенияРеквизитов.КассаПолучатель.Владелец;
		Иначе
			Контрагент = ЗначенияРеквизитов.Контрагент;
		КонецЕсли; 
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		Контрагент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Контрагент");
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
		// Нет возможности однозначно определить контрагента, т.к. сведения хранятся в табличной части
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВзаимозачетЗадолженности") Тогда
		// Нет возможности однозначно определить контрагента, т.к. сведения хранятся в табличной части
		
	КонецЕсли;

	Возврат Контрагент;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры распределения доходов и расходов по базе распределения.

// Процедура выполняет распределение расходов на себестоимость товаров 
// по рассчитанной базе распределения.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	СтруктураДополнительныеСвойства - Структура - Дополнительные свойства документа
//	Движения - КоллекцияДвижений - Наборы записей регистров
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура РаспределитьРасходыНаСебестоимостьТоваровПоБазе(ДокументОбъект, СтруктураДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаРасходов = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасходов;
	РезультатЗапросаПоБазе = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.РезультатЗапросаПоБазе;

	Если Отказ Или ТаблицаРасходов.Количество() = 0 Или РезультатЗапросаПоБазе.Пустой() Тогда
		Возврат;
	КонецЕсли;

	НаборЗаписейСебестоимостьТоваров = Движения.СебестоимостьТоваров;
	НаборЗаписейСебестоимостьТоваров.Записывать = Истина;

	СчетчикЗаписей  = 0;
	СтруктураОтбора = Новый Структура("ИндексБазы");

	// Выборка строк базы распределения по индексу аналитики.
	ВыборкаПоИндексу = РезультатЗапросаПоБазе.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИндексу.Следующий() Цикл
		
		СтруктураОтбора.ИндексБазы = ВыборкаПоИндексу.ИндексБазы;

		// Получаем массив расходов, имеющих одинаковый индекс аналитики, соответствующий текущей выборки базы распределения.
		// Данные затраты будут распределены по одинаковой базе распределения.
		МассивРасходов = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
		Если МассивРасходов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = ВыборкаПоИндексу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаПоИндексу.База = 0 Тогда
			
			Выборка.Следующий();
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отсутствует база для распределения расходов по правилу %1 для аналитики %2. Укажите другое правило или удалите строку из документа.'"),
				Выборка.ПравилоРаспределения,
				Выборка.АналитикаРасходов
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДокументОбъект,
				"Расходы[" + (МассивРасходов[0].НомерСтроки - 1) + "].ПравилоРаспределения",
				,
				Отказ
			);
			
			Продолжить;
			
		КонецЕсли;

		Для Каждого СтрокаРасходов Из МассивРасходов Цикл
		
			СуммаКРаспределению = СтрокаРасходов.Сумма;
			СуммаБезНДСКРаспределению = СтрокаРасходов.СуммаБезНДС;
			СуммаРеглКРаспределению = СтрокаРасходов.СуммаРегл;
			БазаВсего = ВыборкаПоИндексу.База;
		
			// Выборка строк базы распределения по индексу базы распределения
			Выборка.Сбросить();
			Пока Выборка.Следующий() Цикл

				Если БазаВсего <> 0 Тогда
					Стоимость = Окр(СуммаКРаспределению * Выборка.База / БазаВсего, 2, 1);
					СтоимостьБезНДС = Окр(СуммаБезНДСКРаспределению * Выборка.База / БазаВсего, 2, 1);
					СтоимостьРегл = Окр(СуммаРеглКРаспределению * Выборка.База / БазаВсего, 2, 1);
				Иначе
					Стоимость = 0;
					СтоимостьБезНДС = 0;
					СтоимостьРегл = 0;
				КонецЕсли;

				СуммаКРаспределению = СуммаКРаспределению - Стоимость;
				СуммаБезНДСКРаспределению = СуммаБезНДСКРаспределению - СтоимостьБезНДС;
				СуммаРеглКРаспределению = СуммаРеглКРаспределению - СтоимостьРегл;
				БазаВсего = БазаВсего - Выборка.База;

				СчетчикЗаписей = СчетчикЗаписей + 1;
				НоваяЗапись = НаборЗаписейСебестоимостьТоваров.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаРасходов);
				НоваяЗапись.АналитикаУчетаНоменклатуры = Выборка.АналитикаУчетаНоменклатуры;
				НоваяЗапись.Количество = 0;
				НоваяЗапись.ВидЗапасов = Выборка.ВидЗапасов;
				НоваяЗапись.Организация = Выборка.Организация;
				НоваяЗапись.СуммаДопРасходов = Стоимость;
				НоваяЗапись.СуммаДопРасходовБезНДС = СтоимостьБезНДС;
				НоваяЗапись.СтоимостьРегл = СтоимостьРегл;

				Если СчетчикЗаписей > 1000 Тогда

					СчетчикЗаписей = 0;
					НаборЗаписейСебестоимостьТоваров.Записать(Ложь);

				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	Если СчетчикЗаписей > 0 Тогда
		НаборЗаписейСебестоимостьТоваров.Записать(Ложь);
	КонецЕсли;

	НаборЗаписейСебестоимостьТоваров.Записывать = Ложь;

КонецПроцедуры // РаспределитьРасходыНаСебестоимостьТоваровПоБазе()

// Процедура выполняет распределение доходов и расходов на направления деятельности 
// по рассчитанной базе распределения.
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	СтруктураДополнительныеСвойства - Структура - Дополнительные свойства документа
//	Движения - КоллекцияДвижений - Наборы записей регистров
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура РаспределитьДоходыИРасходыПоБазе(ДокументОбъект, СтруктураДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаФинансовыеРезультаты = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФинансовыеРезультаты;
	РезультатЗапросаПоБазе = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.РезультатЗапросаПоБазе;
	
	Если Отказ
	 ИЛИ ТаблицаФинансовыеРезультаты.Количество() = 0
	 ИЛИ РезультатЗапросаПоБазе.Пустой()
	Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = Движения.ФинансовыеРезультаты;
	НаборЗаписей.Записывать = Истина;

	// Выборка строк базы распределения по способу распределения.
	ВыборкаПоОрганизации = РезультатЗапросаПоБазе.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		ВыборкаПоСпособуРаспределения = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоСпособуРаспределения.Следующий() Цикл
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Организация", ВыборкаПоСпособуРаспределения.Организация);
			СтруктураОтбора.Вставить("СпособРаспределения", ВыборкаПоСпособуРаспределения.СпособРаспределения);
			
			// Получаем массив расходов, имеющих одинаковый индекс аналитики, соответствующий текущей выборки базы распределения.
			// Данные затраты будут распределены по одинаковой базе распределения.
			МассивСтрокТаблицы = ТаблицаФинансовыеРезультаты.НайтиСтроки(СтруктураОтбора);
			Если МассивСтрокТаблицы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыборкаПоСпособуРаспределения.База = 0
			 И ЗначениеЗаполнено(ВыборкаПоСпособуРаспределения.СпособРаспределения) Тогда
			 
				Если МассивСтрокТаблицы[0].Доходы <> 0 Тогда
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Отсутствует база для распределения доходов по способу распределения %1. Укажите другой способ распределения или удалите строку из документа.'"),
						ВыборкаПоСпособуРаспределения.СпособРаспределения
					);
					Если СтруктураДополнительныеСвойства.Свойство("ВыводитьСообщенияВЖурналРегистрации") Тогда
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Ошибка при проведении документа'"), 
							УровеньЖурналаРегистрации.Ошибка,
							ДокументОбъект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента,
							ДокументОбъект.Ссылка,
							Текст,
							РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная
						);
						Отказ = Истина;
					Иначе
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							Текст,
							ДокументОбъект,
							"Доходы[" + (МассивСтрокТаблицы[0].НомерСтроки - 1) + "].СпособРаспределения",
							,
							Отказ
						);
					КонецЕсли;
				КонецЕсли;
				
				Если МассивСтрокТаблицы[0].Расходы <> 0 Тогда
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Отсутствует база для распределения расходов по способу распределения %1. Укажите другой способ распределения или удалите строку из документа.'"),
						ВыборкаПоСпособуРаспределения.СпособРаспределения
					);
					Если СтруктураДополнительныеСвойства.Свойство("ВыводитьСообщенияВЖурналРегистрации") Тогда
						ЗаписьЖурналаРегистрации(
							НСтр("ru = 'Ошибка при проведении документа'"), 
							УровеньЖурналаРегистрации.Ошибка,
							ДокументОбъект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента,
							ДокументОбъект.Ссылка,
							Текст,
							РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная
						);	
						Отказ = Истина;
					Иначе
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							Текст,
							ДокументОбъект,
							"Расходы[" + (МассивСтрокТаблицы[0].НомерСтроки - 1) + "].СпособРаспределения",
							,
							Отказ
						);
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Выборка = ВыборкаПоСпособуРаспределения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
			Для Каждого СтрокаТаблицы Из МассивСтрокТаблицы Цикл
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.НаправлениеДеятельности) Тогда
					
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Активность = Истина;
					
					ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
					НоваяЗапись.СпособРаспределения = Неопределено;
					
					Если НаборЗаписей.Количество() > 1000 Тогда
						НаборЗаписей.Записать();
						НаборЗаписей.Очистить();
					КонецЕсли;
					
				Иначе
			
					ДоходыКРаспределению = СтрокаТаблицы.Доходы;
					РасходыКРаспределению = СтрокаТаблицы.Расходы;
					БазаВсего = ВыборкаПоСпособуРаспределения.База;
				
					// Выборка строк базы распределения по индексу базы распределения
					Выборка.Сбросить();
					Пока Выборка.Следующий() Цикл
					
						Если БазаВсего <> 0 Тогда
							Доходы = Окр(ДоходыКРаспределению * Выборка.База / БазаВсего, 2, 1); 
							Расходы = Окр(РасходыКРаспределению * Выборка.База / БазаВсего, 2, 1) ;
						Иначе
							Доходы = 0;
							Расходы = 0;
						КонецЕсли;
						
						ДоходыКРаспределению = ДоходыКРаспределению - Доходы;
						РасходыКРаспределению = РасходыКРаспределению - Расходы;
						БазаВсего = БазаВсего - Выборка.База;
						
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Активность = Истина;
						
						ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
						
						НоваяЗапись.НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
						НоваяЗапись.Доходы = Доходы;
						НоваяЗапись.Расходы = Расходы;
						
						Если НаборЗаписей.Количество() > 1000 Тогда
							НаборЗаписей.Записать();
							НаборЗаписей.Очистить();
						КонецЕсли;
					
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры // РаспределитьДоходыИРасходыПоБазе()

////////////////////////////////////////////////////////////////////////////////
// Получение таблицы распределения расходов на себестоимость товаров для формирования документа "поступление доп.расходов" при обмене с бп 2.0.

// Функция формирует таблицу с данными распределения расходов на себестоимость товаров.
//
// Параметры:
//	ДокументСсылка - Документ, которым отражены расходы, распределяемые на себестоимость товаров.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Тбалица распределения расходов
//
Функция ПолучитьТаблицуРаспределенияРасходовНаСебестоимостьТоваров(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Организация КАК Организация
	|ИЗ
	|	Документ.ПоступлениеУслугПрочихАктивов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	ТекстЗапроса = ТекстЗапросаВтТаблицаРасходов()
		+ ТекстЗапросаТаблицаСпособовРаспределения()
		+ ТекстЗапросаТаблицаДокументов()
		+ ТекстЗапросаТаблицаПоступленияТоваров()
		+ ТекстЗапросаТаблицаБазыРаспределения()
		+ ТекстЗапросаТаблицаРасходов()
	;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(Реквизиты.Период));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(Реквизиты.Период));
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// МассивРезультатов[0] - временная таблица "ВтТаблицаРасходов"
	// МассивРезультатов[1] - временная таблица "ТаблицаСпособовРаспределения"
	// МассивРезультатов[2] - временная таблица "ТаблицаДокументов"
	// МассивРезультатов[3] - временная таблица "ВтПоступленияТоваров"
	// МассивРезультатов[4] - временная таблица "ТаблицаПоступленияТоваров"
	РезультатЗапросаПоБазе = МассивРезультатов[5];
	ТаблицаРасходов = МассивРезультатов[6].Выгрузить();
	
	// Сформируем таблицу распределения расходов.
	ТаблицаРаспределенияРасходов = Новый ТаблицаЗначений;
	Колонки = ТаблицаРаспределенияРасходов.Колонки;
	Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("Количество", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,3));
	Колонки.Добавить("СтоимостьТоваров", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	Колонки.Добавить("Сумма", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	Колонки.Добавить("СуммаНДС", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"));
	Колонки.Добавить("ДокументПоступления", Новый ОписаниеТипов(МассивТипов));
	
	Если Не ТаблицаРасходов.Количество() = 0
	 И Не РезультатЗапросаПоБазе.Пустой() Тогда
	 
		ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
		ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
		КэшКурсовВалют = РаботаСКурсамивалютУТ.ИнициализироватьКэшКурсовВалют();
		КурсВалютыУпр = 1;
		КурсВалютыРегл = 1;

		СтруктураОтбора = Новый Структура("ИндексБазы");

		// Выборка строк базы распределения по индексу аналитики.
		ВыборкаПоИндексу = РезультатЗапросаПоБазе.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоИндексу.Следующий() Цикл
			
			СтруктураОтбора.ИндексБазы = ВыборкаПоИндексу.ИндексБазы;

			// Получаем массив расходов, имеющих одинаковый индекс аналитики, соответствующий текущей выборки базы распределения.
			// Данные затраты будут распределены по одинаковой базе распределения.
			МассивРасходов = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
			Если МассивРасходов.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Выборка = ВыборкаПоИндексу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если ВыборкаПоИндексу.База = 0 Тогда
				Продолжить;
			КонецЕсли;

			Для Каждого СтрокаРасходов Из МассивРасходов Цикл
			
				СуммаКРаспределению = СтрокаРасходов.Сумма;
				СуммаНДСкРаспределению = СтрокаРасходов.СуммаНДС;
				БазаВсего = ВыборкаПоИндексу.База;
			
				// Выборка строк базы распределения по индексу базы распределения
				Выборка.Сбросить();
				Пока Выборка.Следующий() Цикл

					Если БазаВсего <> 0 Тогда
						Сумма = Окр(СуммаКРаспределению * Выборка.База / БазаВсего, 2, 1); 
						СуммаНДС = Окр(СуммаНДСкРаспределению * Выборка.База / БазаВсего, 2, 1) ;
					Иначе
						Сумма = 0;
						СуммаНДС = 0;
					КонецЕсли;

					СуммаКРаспределению = СуммаКРаспределению - Сумма;
					СуммаНДСКРаспределению = СуммаНДСкРаспределению - СуммаНДС;
					БазаВсего = БазаВсего - Выборка.База;
					
					НоваяСтрока = ТаблицаРаспределенияРасходов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.Сумма = Сумма;
					НоваяСтрока.СуммаНДС = СуммаНДС;
					
					Если ВалютаУпр <> ВалютаРегл Тогда
						КурсВалютыУпр = РаботаСКурсамиВалютУт.ПолучитьКурсВалютыИзКэша(ВалютаУпр, Выборка.Дата, КэшКурсовВалют);
						КурсВалютыРегл = РаботаСКурсамиВалютУт.ПолучитьКурсВалютыИзКэша(ВалютаРегл, Выборка.Дата, КэшКурсовВалют);
						Если КурсВалютыРегл <> 0 Тогда
							НоваяСтрока.СтоимостьТоваров = НоваяСтрока.СтоимостьТоваров * КурсВалютыУпр / КурсВалютыРегл;
						КонецЕсли;
					КонецЕсли;

				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаРаспределенияРасходов; 
	
КонецФункции // ПолучитьТаблицуРаспределенияРасходовНаСебестоимостьТоваров()

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции формирования движений по учету доходов и расходов.

// Процедура формирования движений по регистру "Учет прочих доходов".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьПрочиеДоходы(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПрочиеДоходы;
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.ПрочиеДоходы;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ОтразитьПрочиеДоходы()

// Процедура формирования движений по регистру "Учет прочих расходов".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПрочиеРасходы;
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.ПрочиеРасходы;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ОтразитьПрочиеРасходы()

// Процедура формирования движений по регистру "Партии прочих расходов".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьПартииПрочихРасходов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартииПрочихРасходов;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ПартииПрочихРасходов.Записывать = Истина;
	Движения.ПартииПрочихРасходов.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Финансовые результаты".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьФинансовыеРезультаты(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФинансовыеРезультаты;
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.ФинансовыеРезультаты;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ОтразитьФинансовыеРезультаты()

// Процедура формирования движений по регистру "Учет себестоимости товаров".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСебестоимостьТоваров;
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.СебестоимостьТоваров;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ОтразитьСебестоимостьТоваров()

// Функция производит распределение выручки и себестоимости продаж по направлениям деятельности
//
Функция ВыполнитьРаспределениеПоНаправлениямДеятельности(ВыборкаРаспределениеПоНаправлениямДеятельности) Экспорт

	ТаблицаФинансовыеРезультаты = РегистрыНакопления.ФинансовыеРезультаты.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ТаблицаФинансовыеРезультаты.Колонки.Удалить("Активность");

	ВыборкаСпособыРаспределения = ВыборкаРаспределениеПоНаправлениямДеятельности.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "СпособРаспределения");
	Пока ВыборкаСпособыРаспределения.Следующий() Цикл

		ВсегоДолейРасходы = ВыборкаСпособыРаспределения.КоэффициентРаспределенияРасходы;
		ВсегоДолейДоходы  = ВыборкаСпособыРаспределения.КоэффициентРаспределенияДоходы;

		ДоходыКРаспределению  = ВыборкаСпособыРаспределения.Доходы;
		РасходыКРаспределению = ВыборкаСпособыРаспределения.Расходы;

		ВыборкаНаправленияДеятельности = ВыборкаСпособыРаспределения.Выбрать();
		Пока ВыборкаНаправленияДеятельности.Следующий() Цикл

			Если ВсегоДолейДоходы <> 0 Тогда

				СуммаДоход  = Окр(ДоходыКРаспределению * ВыборкаНаправленияДеятельности.КоэффициентРаспределенияДоходы
					 / ВсегоДолейДоходы, 2, РежимОкругления.Окр15как20);
			Иначе

				СуммаДоход = 0;
			КонецЕсли;

			Если ВсегоДолейРасходы <> 0 Тогда

				СуммаРасход = Окр(РасходыКРаспределению * ВыборкаНаправленияДеятельности.КоэффициентРаспределенияРасходы
					 / ВсегоДолейРасходы, 2, РежимОкругления.Окр15как20);
			Иначе

				СуммаРасход = 0;
			КонецЕсли;

			ДоходыКРаспределению  = ДоходыКРаспределению - СуммаДоход;
			РасходыКРаспределению = РасходыКРаспределению - СуммаРасход;

			ВсегоДолейРасходы = ВсегоДолейРасходы - ВыборкаНаправленияДеятельности.КоэффициентРаспределенияРасходы;
			ВсегоДолейДоходы  = ВсегоДолейДоходы - ВыборкаНаправленияДеятельности.КоэффициентРаспределенияДоходы;

			СтрокаРезультата = ТаблицаФинансовыеРезультаты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРезультата, ВыборкаНаправленияДеятельности);
			СтрокаРезультата.Доходы              = СуммаДоход;
			СтрокаРезультата.Расходы             = СуммаРасход;
			СтрокаРезультата.СпособРаспределения = ВыборкаСпособыРаспределения.СпособРаспределения

		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаФинансовыеРезультаты;

КонецФункции

// Процедура формирования движений по регистру "СебестоимостьТоваров".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьВыручкуИСебестоимостьПродаж(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВыручкаИСебестоимостьПродаж;

	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДвиженияРасчеты = Движения.ВыручкаИСебестоимостьПродаж;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры // ОтразитьПрочиеРасходы()

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции формирования движений по учету НДС

// Процедура формиорвания движений по регистру "НДС Продажи"
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьНДСЗаписиКнигиПродаж(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДСЗаписиКнигиПродаж;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Движения.НДСЗаписиКнигиПродаж.Записывать = Истина;
	Движения.НДСЗаписиКнигиПродаж.Загрузить(ТаблицаДвижений);
	Движения.НДСЗаписиКнигиПродаж.УстановитьАктивность(Истина);
	
КонецПроцедуры

// Процедура формиорвания движений по регистру "НДС Покупки"
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьНДСЗаписиКнигиПокупок(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДСЗаписиКнигиПокупок;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Движения.НДСЗаписиКнигиПокупок.Записывать = Истина;
	Движения.НДСЗаписиКнигиПокупок.Загрузить(ТаблицаДвижений);
	Движения.НДСЗаписиКнигиПокупок.УстановитьАктивность(Истина);
	
КонецПроцедуры

// Процедура формиорвания движений по регистру "Журнал учета счетов-фактур"
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьЖурналУчетаСчетовФактур(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЖурналУчетаСчетовФактур;
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДвиженияНДС = Движения.ЖурналУчетаСчетовФактур;
	ДвиженияНДС.Записывать = Истина;
	ДвиженияНДС.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры

// Процедура формиорвания движений по регистру "НДС состояние реализации 0%"
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьНДССостояниеРеализации0(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНДССостояниеРеализации0;
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Набор = Движения.НДССостояниеРеализации0;
	Набор.Записывать = Истина;
	Набор.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Получение таблицы распределения расходов на себестоимость товаров для формирования документа "поступление доп.расходов" при обмене с бп 2.0.

// Функция формирует текст запроса для временной таблицы расходов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаВтТаблицаРасходов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаТовары.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаТовары.СтатьяРасходов.ПравилоРаспределенияНаСебестоимость КАК ПравилоРаспределения,
	|	ТаблицаТовары.АналитикаРасходов КАК АналитикаРасходов,
	|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
	|	СУММА(ТаблицаТовары.СуммаНДС) КАК СуммаНДС
	|
	|ПОМЕСТИТЬ ВтТаблицаРасходов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.СтатьяРасходов,
	|	ТаблицаТовары.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаРасходы.НомерСтроки) КАК НомерСтроки,
	|	ТаблицаРасходы.СтатьяРасходов.ПравилоРаспределенияНаСебестоимость КАК ПравилоРаспределения,
	|	ТаблицаРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	СУММА(ТаблицаРасходы.Сумма) КАК Сумма,
	|	СУММА(ТаблицаРасходы.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	Документ.ПоступлениеУслугПрочихАктивов.Расходы КАК ТаблицаРасходы
	|ГДЕ
	|	ТаблицаРасходы.Ссылка = &Ссылка
	|	И ТаблицаРасходы.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРасходы.СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов
	|;
	|////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаВтТаблицаРасходов()

// Функция формирует текст запроса для таблицы способов распределения.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаТаблицаСпособовРаспределения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаРасходы.ПравилоРаспределения КАК ПравилоРаспределения,
	|	ТаблицаРасходы.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫБОР КОГДА ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ КАК АналитикаЗаполнена,
	|	МАКСИМУМ(ТаблицаРасходы.НомерСтроки) КАК ИндексБазы
	|	
	|ПОМЕСТИТЬ ТаблицаСпособовРаспределения
	|ИЗ
	|	ВтТаблицаРасходов КАК ТаблицаРасходы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРасходы.ПравилоРаспределения,
	|	ТаблицаРасходы.АналитикаРасходов,
	|	ВЫБОР КОГДА ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказНаПеремещение.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПеремещениеТоваров.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИЛИ ТаблицаРасходы.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаРасходов
	|;
	|///////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаСпособовРаспределения()

// Функция формирует текст запроса для таблицы документов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаТаблицаДокументов()
	
	ТекстЗапроса = "
	|// Поступление товаров по конкретным документам закупки или по заказам поставщикам.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаЗаполнена
	|		И (ДанныеДокумента.Ссылка = ТаблицаСпособовРаспределения.АналитикаРасходов
	|       	ИЛИ ДанныеДокумента.ЗаказПоставщику = ТаблицаСпособовРаспределения.АналитикаРасходов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Поступления товаров по любым документам закупки.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И (ДанныеДокумента.ЗаказПоставщику <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка) И ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Передачи товаров между организациями.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ДанныеДокумента.Ссылка = ТаблицаСпособовРаспределения.АналитикаРасходов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Документ.ПередачаТоваровМеждуОрганизациями.ПустаяСсылка)
	|ГДЕ
	|	ДанныеДокумента.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|///////////////////////////////////////////////////////////////////////////////////	
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаДокументов()

// Функция формирует текст запроса для таблицы поступления товаров.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаТаблицаПоступленияТоваров()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	АналитикаНоменклатуры.Номенклатура КАК Номенклатура,
	|	АналитикаНоменклатуры.Склад КАК Склад,
	|	УчетСебестоимости.Период КАК Период,
	|	УчетСебестоимости.Регистратор КАК ДокументПоступления,
	|	УчетСебестоимости.КоличествоПриход КАК Количество,
	|	УчетСебестоимости.СтоимостьРеглПриход КАК Стоимость
	|
	|ПОМЕСТИТЬ ВтПоступленияТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров.Обороты(,, Регистратор,
	|		РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах)
	|		И Организация = &Организация
	|	) КАК УчетСебестоимости
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры
	|	ПО
	|		УчетСебестоимости.АналитикаУчетаНоменклатуры = АналитикаНоменклатуры.КлючАналитики
	|
	|ГДЕ
	|	УчетСебестоимости.КоличествоПриход > 0
	|	И УчетСебестоимости.СтоимостьРеглПриход > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Склад,
	|	ДокументПоступления
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.ИндексБазы КАК ИндексБазы,
	|	ВтПоступленияТоваров.Номенклатура КАК Номенклатура,
	|	ВтПоступленияТоваров.ДокументПоступления КАК ДокументПоступления,
	|	СУММА(ВтПоступленияТоваров.Количество) КАК Количество,
	|	СУММА(ВтПоступленияТоваров.Стоимость) КАК Стоимость
	|
	|ПОМЕСТИТЬ ТаблицаПоступленияТоваров
	|ИЗ
	|	ВтПоступленияТоваров КАК ВтПоступленияТоваров
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		ВтПоступленияТоваров.ДокументПоступления = ТаблицаДокументов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.ИндексБазы,
	|	ВтПоступленияТоваров.Номенклатура,
	|	ВтПоступленияТоваров.ДокументПоступления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы,
	|	ВтПоступленияТоваров.Номенклатура КАК Номенклатура,
	|	ВтПоступленияТоваров.ДокументПоступления КАК ДокументПоступления,
	|	СУММА(ВтПоступленияТоваров.Количество) КАК Количество,
	|	СУММА(ВтПоступленияТоваров.Стоимость) КАК Стоимость
	|ИЗ
	|	ВтПоступленияТоваров КАК ВтПоступленияТоваров
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ВтПоступленияТоваров.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|		И (ТаблицаСпособовРаспределения.АналитикаРасходов = ВтПоступленияТоваров.Склад
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ВтПоступленияТоваров.Номенклатура
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИЛИ ТаблицаСпособовРаспределения.АналитикаРасходов = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСпособовРаспределения.ИндексБазы,
	|	ВтПоступленияТоваров.Номенклатура,
	|	ВтПоступленияТоваров.ДокументПоступления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИндексБазы
	|;
	|///////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаПоступленияТоваров()

// Функция формирует текст запроса для таблицы базы распределения.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаТаблицаБазыРаспределения()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы,
	|	ТаблицаПоступленияТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаПоступленияТоваров.ДокументПоступления КАК ДокументПоступления,
	|	ТаблицаПоступленияТоваров.ДокументПоступления.Дата КАК Дата,
	|	ТаблицаПоступленияТоваров.Количество КАК Количество,
	|	ТаблицаПоступленияТоваров.Стоимость КАК СтоимостьТоваров,
	|	
	|	ВЫБОР КОГДА ТаблицаСпособовРаспределения.ПравилоРаспределения
	|		= ЗНАЧЕНИЕ(Перечисление.ПравилаРаспределенияНаСебестоимостьТоваров.ПропорциональноКоличеству)
	|	ТОГДА
	|		ЕСТЬNULL(ТаблицаПоступленияТоваров.Количество, 0)
	|	ИНАЧЕ
	|		ЕСТЬNULL(ТаблицаПоступленияТоваров.Стоимость, 0)
	|	КОНЕЦ КАК База
	|
	|ИЗ
	|	ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПоступленияТоваров КАК ТаблицаПоступленияТоваров
	|	ПО
	|		ТаблицаСпособовРаспределения.ИндексБазы = ТаблицаПоступленияТоваров.ИндексБазы
	|ИТОГИ
	|	СУММА(База)
	|ПО
	|	ИндексБазы
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаБазыРаспределения()

// Функция формирует текст запроса для таблицы расходов к распределению.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаТаблицаРасходов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаСпособовРаспределения.ИндексБазы КАК ИндексБазы,
	|	СУММА(ТаблицаРасходы.Сумма) КАК Сумма,
	|	СУММА(ТаблицаРасходы.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	ВтТаблицаРасходов КАК ТаблицаРасходы
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ТаблицаСпособовРаспределения КАК ТаблицаСпособовРаспределения
	|	ПО
	|		ТаблицаРасходы.ПравилоРаспределения = ТаблицаСпособовРаспределения.ПравилоРаспределения
	|		И ТаблицаРасходы.АналитикаРасходов = ТаблицаСпособовРаспределения.АналитикаРасходов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСпособовРаспределения.ИндексБазы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндексБазы
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаТаблицаРасходов()
