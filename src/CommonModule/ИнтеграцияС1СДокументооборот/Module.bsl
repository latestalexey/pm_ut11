////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль РаботаС1СДокументооборот: сервер, внешнее соединение
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////
// Запросы к Документообороту

//Получает доступность функционала версии сервиса Документооборота
//Парметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	ВерсияСервиса - версия сервиса, содержащая нужный функционал
//Возвращает:
//	Признак доступности функционала версии сервиса
Функция ДоступенФункционалВерсииСервиса(Прокси, ВерсияСервиса) Экспорт
	
	ВерсииСервисов = новый Массив;
	
	ВерсииСервисов.Добавить("1.1.2.1");
	ВерсииСервисов.Добавить("1.1.3.1"); 
	ВерсииСервисов.Добавить("1.1.4.1");
	ВерсииСервисов.Добавить("1.2.1.1");
	ВерсииСервисов.Добавить("1.2.2.6");
	ВерсииСервисов.Добавить("1.2.2.7");
	ВерсииСервисов.Добавить("1.2.2.8");
	ВерсииСервисов.Добавить("1.2.2.9");
	ВерсииСервисов.Добавить("1.2.2.10");
	ВерсииСервисов.Добавить("1.2.2.11");
	ВерсииСервисов.Добавить("1.2.3.7");
	ВерсииСервисов.Добавить("1.2.3.8");
	ВерсииСервисов.Добавить("1.2.3.9");
	ВерсииСервисов.Добавить("1.2.3.11");
	ВерсииСервисов.Добавить("1.2.4.2");
	ВерсииСервисов.Добавить("1.2.4.3");
	ВерсииСервисов.Добавить("1.2.5.1");
	ВерсииСервисов.Добавить("1.2.5.3");
	ВерсииСервисов.Добавить("1.2.6.1");
	ВерсииСервисов.Добавить("1.2.6.2");
	ВерсииСервисов.Добавить("1.2.7.3");

	Попытка 
		Запрос = СоздатьОбъект(Прокси, "DMGetVersionRequest");
	
		Ответ = Прокси.execute(Запрос);
		ПроверитьВозвратВебСервиса(Прокси, Ответ);
		ТекущаяВерсия = Ответ.versionNumber;
		ИндексТекущейВерсии = ВерсииСервисов.Найти(ТекущаяВерсия);
	Исключение
		// нет DM-сервиса, либо очень старая версия, не включенная в проверку
		ИндексТекущейВерсии = 0;
	КонецПопытки;
	
	ИндексВерсииСервиса = ВерсииСервисов.Найти(ВерсияСервиса);
	
	Если ИндексТекущейВерсии = Неопределено Тогда // Текущая версия конфигурации младше версии сервиса
		ИндексТекущейВерсии = 100;
	КонецЕсли;
	
	Если ИндексТекущейВерсии >= ИндексВерсииСервиса Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

//Получает объект из Документооборота
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Тип - имя типа XDTO
//	Ид - уникальный идентификатор объекта в Документообороте
//Возвращает:
//	XDTO Объект типа DMRetrieveResponse
Функция ПолучитьОбъект(Прокси, Тип, Ид, Колонки = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMRetrieveRequest");
	
	objectId = СоздатьObjectID(Прокси, Ид, Тип);
	Запрос.objectIds.Добавить(objectId);
	
	Если Колонки <> Неопределено Тогда
		Для Каждого Колонка Из Колонки Цикл
			Запрос.columnSet.Добавить(Колонка);
		КонецЦикла;
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Возврат Ответ;
	
КонецФункции

//Получает объекты из документооборота
//Параметры:
//	Объекты - массив структур с полями "id" и "type"
//Возвращает:
//	XDTO Объект типа DMRetrieveResponse
Функция ПолучитьОбъекты(Прокси, Объекты, Колонки = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMRetrieveRequest");
	
	Для каждого Объект из Объекты Цикл
		objectId = СоздатьObjectID(Прокси, Объект.id, Объект.type);
		Запрос.objectIds.Добавить(objectId);
	КонецЦикла;
	
	Если Колонки <> Неопределено Тогда
		Для Каждого Колонка Из Колонки Цикл
			Запрос.columnSet.Добавить(Колонка);
		КонецЦикла;
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Возврат Ответ;
	
КонецФункции

//Записывает изменения объекта в Документообороте
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Объект - XDTO объект с сохраняемыми данными
//Возвращает:
//	XDTO Объект типа DMUpdateResponse
Функция ЗаписатьОбъект(Прокси, Объект) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMUpdateRequest");
	Запрос.objects.Добавить(Объект);
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Возврат Ответ;
	
КонецФункции

//Записывает изменения объектов в Документообороте
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Объект - XDTO объект с сохраняемыми данными
//Возвращает:
//	XDTO Объект типа DMUpdateResponse
Функция ЗаписатьОбъекты(Прокси, Объекты) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMUpdateRequest");
	
	Для Каждого Объект Из Объекты Цикл
		Запрос.objects.Добавить(Объект);
	КонецЦикла;
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Возврат Ответ;
	
КонецФункции

//Создает объект в Документооборот
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Объект - XDTO объект с сохраняемыми данными
//	ObjectIDВнешнегоОбъекта - уникальный идентификатор объекта в конфигурации-потребителе
//Возвращает:
//	XDTO Объект типа DMCreateResponse
Функция СоздатьНовыйОбъект(Прокси, Объект) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMCreateRequest");
	Запрос.object = Объект;
		
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Возврат Ответ;
	
КонецФункции

//Получает заполненный по умолчанию объект из Документооборота
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Тип - имя типа XDTO объекта
//	ПредметБизнесПроцесса - Структура. Используется для получения бизнес-процессов.
//		id - уникальный идентификатор объекта в Документооборот
//		type - имя типа XDTO 
//Возвращает:
//	XDTO Объект типа DMGetNewObjectResponse
Функция ПолучитьНовыйОбъект(Прокси, Тип, Предмет = Неопределено) Экспорт
	
	Если Предмет <> Неопределено Тогда
		Если Найти(Тип,"BusinessProcess") <> 0 Тогда
			Возврат ПолучитьНовыйБизнесПроцесс(Прокси, Тип, Предмет);
		ИначеЕсли Тип = "DMOutgoingEMail" Тогда
			Возврат ПолучитьНовоеИсходящееПисьмо(Прокси, Тип, Предмет);
		Иначе
			Возврат Неопределено
		КонецЕсли;
	Иначе
		Запрос = СоздатьОбъект(Прокси, "DMGetNewObjectRequest");
		Запрос.type = "DMBusinessProcess";
			
		Ответ = Прокси.execute(Запрос);
		ПроверитьВозвратВебСервиса(Прокси, Ответ);

		Если ПроверитьТип(Прокси, Ответ, "DMGetNewObjectResponse") Тогда
			Возврат Ответ.object;
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

//Получает ссылку на объект по имени объекта конфигурации и ID
//Параметры:
//	РеквизитТип - строка типа объекта конфигурации
//	РеквизитID - строка идентификатора объекта конфигурации
Функция ПолучитьСсылкуПоID(РеквизитТип, РеквизитID) Экспорт
	
	СсылкаНаПотребителя = Неопределено;
	
	Если Найти(РеквизитТип, "Справочник.") <> 0 Тогда
		СсылкаНаПотребителя = Справочники[СтрЗаменить(РеквизитТип, 
			"Справочник.","")].ПолучитьСсылку(Новый УникальныйИдентификатор(РеквизитID));
		
	ИначеЕсли Найти(РеквизитТип, "Документ.") <> 0 Тогда
		СсылкаНаПотребителя = Документы[СтрЗаменить(РеквизитТип, 
			"Документ.","")].ПолучитьСсылку(Новый УникальныйИдентификатор(РеквизитID));
		
	ИначеЕсли Найти(РеквизитТип, "ПланСчетов.") <> 0 Тогда
		СсылкаНаПотребителя = ПланыСчетов[СтрЗаменить(РеквизитТип, 
			"ПланСчетов.","")].ПолучитьСсылку(Новый УникальныйИдентификатор(РеквизитID));
		
	ИначеЕсли Найти(РеквизитТип, "ПланВидовРасчета.") <> 0 Тогда
		СсылкаНаПотребителя = ПланыВидовРасчета[СтрЗаменить(РеквизитТип, 
			"ПланВидовРасчета.","")].ПолучитьСсылку(Новый УникальныйИдентификатор(РеквизитID));
		
	ИначеЕсли Найти(РеквизитТип, "ПланВидовХарактеристик.") <> 0 Тогда
		СсылкаНаПотребителя = ПланыВидовХарактеристик[СтрЗаменить(РеквизитТип, 
			"ПланВидовХарактеристик.","")].ПолучитьСсылку(Новый УникальныйИдентификатор(РеквизитID));
		
	ИначеЕсли Найти(РеквизитТип, "БизнесПроцесс.") <> 0 Тогда
		СсылкаНаПотребителя = БизнесПроцессы[СтрЗаменить(РеквизитТип, 
			"БизнесПроцесс.","")].ПолучитьСсылку(Новый УникальныйИдентификатор(РеквизитID));
		
	ИначеЕсли Найти(РеквизитТип, "Задача.") <> 0 Тогда
		СсылкаНаПотребителя = Задачи[СтрЗаменить(РеквизитТип, 
			"Задача.","")].ПолучитьСсылку(Новый УникальныйИдентификатор(РеквизитID));
		
	КонецЕсли;
	
	Возврат СсылкаНаПотребителя;
	
КонецФункции

//Создает объект документооборота по ссылке на объект конфигурации-потребителя
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	ВнешнийОбъект - ссылка на объект конфигурации-потребителя
//	ТипДокумента - имя типа XDTO объекта
//Возвращает:
//	Созданный объект XDTO, либо Неопределено, если не удалось сформировать документ
//
Функция СоздатьДокументПоВнешнемуОбъекту(Прокси, ВнешнийОбъект, ТипДокумента) Экспорт
	
	СтруктураДокумента = ПолучитьСтруктуруДокумента(ТипДокумента);
	СоответствиеРеквизитов = СоответствиеСвойствXDTOиРеквизитовФормыДокумента(ТипДокумента);
	
	ЗаполнитьСтруктуруДокументаИзПотребителя(Прокси, ВнешнийОбъект, СтруктураДокумента, СоответствиеРеквизитов);
	
	ОбъектXDTO = СоздатьОбъект(Прокси, ТипДокумента);
	
	Для Каждого СтрокаСоответсвия Из СоответствиеРеквизитов Цикл
		ЗаполнитьXDTOизСтруктурыДокумента(Прокси, ОбъектXDTO, СтрокаСоответсвия.Ключ, СтрокаСоответсвия.Значение, СтруктураДокумента);
	КонецЦикла;
	
	СформироватьДополнительныеСвойства(Прокси, СтруктураДокумента, ОбъектXDTO);
	
	ОбъектXDTO.objectId = СоздатьObjectID(Прокси, "", "");
	ОбъектXDTO.name = Строка(ВнешнийОбъект);
		
	Если ЗначениеЗаполнено(ВнешнийОбъект) Тогда 
		ExternalObject = СоздатьОбъект(Прокси, "ExternalObject");
		ExternalObject.id = Строка(ВнешнийОбъект.УникальныйИдентификатор());
		ExternalObject.type = ВнешнийОбъект.Метаданные().ПолноеИмя();
		ExternalObject.name = Строка(ВнешнийОбъект);
		ОбъектXDTO.externalObject = ExternalObject;
	КонецЕсли;
	
	Запрос = СоздатьОбъект(Прокси, "DMCreateRequest");
	Запрос.object = ОбъектXDTO;
	
	Результат = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	ОбъектXDTO = Результат.object;
	
	Если СтруктураДокумента.Файлы.Количество() > 0 Тогда
		
		Для каждого СтрокаФайла из СтруктураДокумента.Файлы Цикл
		
			Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMAddFileRequest");
			
			ОбъектВладелец = СоздатьОбъект(Прокси, "DMObject");
			ОбъектВладелец.objectId = СоздатьObjectID(Прокси, ОбъектXDTO.objectId.id, ОбъектXDTO.objectId.type);
			ОбъектВладелец.name = ОбъектXDTO.name;
			
			Запрос.owner = ОбъектВладелец;
			
			Запрос.file = СоздатьОбъект(Прокси,"DMFile");
			Запрос.file.objectId = СоздатьObjectID(Прокси, "", "DMFile");
			Запрос.file.name = "";
			
			Запрос.file.binaryData = СтрокаФайла.ДвоичныеДанные;
			Запрос.file.extension = СтрокаФайла.Расширение;
			Запрос.file.modificationDate = СтрокаФайла.ДатаСоздания;
			Запрос.file.modificationDateUniversal = СтрокаФайла.ДатаМодификацииУниверсальная;
			Запрос.file.name = СтрокаФайла.Наименование;
			Запрос.file.size = СтрокаФайла.Размер;
			
			Результат = Прокси.execute(Запрос);
			ПроверитьВозвратВебСервиса(Прокси, Результат);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОбъектXDTO;
	
КонецФункции

////////////////////////////////////////
// Работа с бизнес-процессами

//Устанавливает контролера бизнес-процесса на форму
//Параметры:
//	ОбъектXDTO - объект, содержащий данные бизнес-процесса, например, DMBusinessProcessOrder
//	Форма - форма, на которую необходимо поместить значение контролера
Процедура УстановитьКонтролераНаКарточке(ОбъектXDTO, Форма) Экспорт
	
	Если ОбъектXDTO.controller.Установлено("user") Тогда
		ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.controller.user, "Контролер");
	ИначеЕсли ОбъектXDTO.controller.Установлено("role") Тогда
		ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.controller.role, "Контролер");
		ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.controller.mainAddressingObject, "ОсновнойОбъектАдресацииКонтролера");
		ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.controller.secondaryAddressingObject, "ДополнительныйОбъектАдресацииКонтролера");
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает проверяющего бизнес-процесса на форму
//Параметры:
//	ОбъектXDTO - объект, содержащий данные бизнес-процесса, например, DMBusinessProcessOrder
//	Форма - форма, на которую необходимо поместить значение проверяющего
Процедура УстановитьПроверяющегоНаКарточке(ОбъектXDTO, Форма) Экспорт
	
	Если ОбъектXDTO.verifier.Установлено("user") Тогда
		ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.verifier.user, "Проверяющий");
	ИначеЕсли ОбъектXDTO.verifier.Установлено("role") Тогда
		ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.verifier.role, "Проверяющий");
		ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.verifier.mainAddressingObject, "ОсновнойОбъектАдресацииПроверяющего");
		ЗаполнитьОбъектныйРеквизит(Форма, ОбъектXDTO.verifier.secondaryAddressingObject, "ДополнительныйОбъектАдресацииПроверяющего");
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает исполнителя бизнес-процесса на форму или в строку списка исполнителей
//Параметры:
//	ОбъектXDTO - объект, содержащий данные бизнес-процесса, например, DMBusinessProcessOrder
//	Приемник - форма или строка таблицы, на которую необходимо поместить значение исполнителя
Процедура УстановитьИсполнителяНаКарточке(ОбъектXDTO, Приемник) Экспорт
	
	Если ОбъектXDTO.Свойства().Получить("performer") = Неопределено Тогда
		ИсполнительXDTO = ОбъектXDTO;
	Иначе
		ИсполнительXDTO = ОбъектXDTO.performer;
	КонецЕсли;
		
	Если ИсполнительXDTO.Установлено("user") Тогда
		ЗаполнитьОбъектныйРеквизит(Приемник, ИсполнительXDTO.user, "Исполнитель");
	ИначеЕсли ИсполнительXDTO.Установлено("role") Тогда
		ЗаполнитьОбъектныйРеквизит(Приемник, ИсполнительXDTO.role, "Исполнитель");
		ЗаполнитьОбъектныйРеквизит(Приемник, ИсполнительXDTO.mainAddressingObject, "ОсновнойОбъектАдресации");
		ЗаполнитьОбъектныйРеквизит(Приемник, ИсполнительXDTO.secondaryAddressingObject, "ДополнительныйОбъектАдресации");
	КонецЕсли;
	
КонецПроцедуры

//Заполняет свойство XDTO типа DMBusinessProcessTaskExecutor по данным формы
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Объект - объект XDTO типа DMBusinessProcessTaskExecutor, свойство которого нужно заполнить
//	Форма - форма, содержащая реквизиты - источники заполнения
//	ИмяРеквизита - имя реквизита испольнителя или роли на форме
//	ИмяРеквизитаАдресации - имя реквизита данных адресации на форме 
Процедура СоздатьУчастникаБизнесПроцесса(Прокси, Объект, Форма, ИмяРеквизита, ИмяРеквизитаАдресации) Экспорт
	
	Если ЗначениеЗаполнено(Форма[ИмяРеквизита]) Тогда 
		Объект = СоздатьОбъект(Прокси, "DMBusinessProcessTaskExecutor");
		Если Форма[ИмяРеквизита + "Тип"] = "DMUser" Тогда
			ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Форма, ИмяРеквизита,
				Объект.user, "DMUser")
		Иначе
			ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Форма, ИмяРеквизита,
				Объект.role, "DMBusinessProcessExecutorRole");
			
			ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Форма, "Основной" + ИмяРеквизитаАдресации,
				Объект.mainAddressingObject, "DMMainAddressingObject");
			
			ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Форма, "Дополнительный" + ИмяРеквизитаАдресации,
				Объект.secondaryAddressingObject, "DMSecondaryAddressingObject")
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает стандартные реквизиты бизнес-процесса на форме
//Параметры:
//	ОбъектXDTO - объект, содержащий данные бизнес-процесса, например, DMBusinessProcessOrder
//	Форма - форма, на которую необходимо поместить значение реквизитов
Процедура УстановитьСтандартнуюШапкуБизнесПроцесса(ОбъектXDTO, Форма) Экспорт
	
	Форма.Стартован = ОбъектXDTO.started;
	Форма.Завершен = ОбъектXDTO.completed;
	Форма.ДатаНачала = ОбъектXDTO.beginDate;
	Форма.ДатаЗавершения = ОбъектXDTO.endDate;
	Форма.Наименование = ОбъектXDTO.name;
	Если ОбъектXDTO.objectID.Свойства().Получить("presentation") <> Неопределено Тогда
		Форма.Заголовок = ОбъектXDTO.objectId.presentation;
	Иначе
		Форма.Заголовок = ОбъектXDTO.name;
	КонецЕсли;
	Если Форма.Элементы.Найти("СрокДата") <> Неопределено Тогда
		Форма.Срок = ОбъектXDTO.dueDate;
	КонецЕсли;
	Если Форма.Элементы.Найти("Описание") <> Неопределено Тогда
		Форма.Описание = ОбъектXDTO.description;
	КонецЕсли;
	Форма.Тип = ОбъектXDTO.objectId.type;
	Если ОбъектXDTO.objectId.Свойства().Получить("presentation") <> неопределено Тогда
		Форма.Представление = ОбъектXDTO.objectId.presentation;
	КонецЕсли;
	
	ЗаполнитьОбъектныйРеквизитФормы(Форма, "Автор", 		ОбъектXDTO, "author"); 
	ЗаполнитьОбъектныйРеквизитФормы(Форма, "Предмет", 		ОбъектXDTO, "target");
	ЗаполнитьОбъектныйРеквизитФормы(Форма, "ГлавнаяЗадача", ОбъектXDTO, "parentTask");
	ЗаполнитьОбъектныйРеквизитФормы(Форма, "Состояние", 	ОбъектXDTO, "state");
	
	Если Форма.Элементы.Найти("ГруппаОстановлен") <> Неопределено Тогда
		Если Форма.СостояниеID = "Остановлен" Тогда 
			Форма.Элементы.ГруппаОстановлен.Видимость = Истина; 
		Иначе
			Форма.Элементы.ГруппаОстановлен.Видимость = Ложь; 
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ВажностьПредставление") <> Неопределено ИЛИ Форма.Элементы.Найти("Важность") <> Неопределено Тогда
		ЗаполнитьОбъектныйРеквизитФормы(Форма, "Важность", ОбъектXDTO, "importance");
		Форма.Важность = СтрЗаменить(Форма.Важность," важность","");
	КонецЕсли;
	
	Если ОбъектXDTO.started Или ОбъектXDTO.completed Тогда
		Форма.ТолькоПросмотр = Истина;
		Форма.Элементы.ФормаСтартоватьИЗакрыть.Доступность = Ложь;
		Форма.Элементы.ФормаЗаписать.Доступность = Ложь;
		Если Форма.Элементы.Найти("ФормаЗаполнитьПоШаблону") <> Неопределено Тогда
			Форма.Элементы.ФормаЗаполнитьПоШаблону.Доступность = Ложь;
		КонецЕсли;
		Если Форма.Элементы.Найти("ИсполнителиГруппаПеремещение") <> Неопределено Тогда
			Форма.Элементы.ИсполнителиГруппаПеремещение.Доступность = Ложь;
		КонецЕсли;
		Если Форма.Элементы.Найти("СрокИсполненияДней") <> Неопределено Тогда
			Форма.Элементы.СрокИсполненияДней.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Форма.Элементы.Найти("СрокИсполненияЧасов") <> Неопределено Тогда
			Форма.Элементы.СрокИсполненияЧасов.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//изменение формы в зависимости от функциональных опций
	Если Форма.Элементы.Найти("ГлавнаяЗадачаПредставление") <> Неопределено Тогда
		Форма.Элементы.ГлавнаяЗадачаПредставление.Видимость = ОбъектXDTO.parentTaskEnabled;
	КонецЕсли;
	Если Форма.Элементы.Найти("СрокВремя") <> Неопределено Тогда
		Форма.Элементы.СрокВремя.Видимость = ОбъектXDTO.dueTimeEnabled;
	ИначеЕсли Форма.Элементы.Найти("СрокИсполненияЧасов") <> Неопределено Тогда
		Форма.Элементы.СрокИсполненияЧасов.Видимость = ОбъектXDTO.dueTimeEnabled;
		Форма.Элементы.Часов.Видимость = ОбъектXDTO.dueTimeEnabled;
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("ГлавнаяЗадача") И НЕ ЗначениеЗаполнено(Форма.ГлавнаяЗадачаID) Тогда
		Форма.ГлавнаяЗадача = Форма.Параметры.ГлавнаяЗадача.name;
		Форма.ГлавнаяЗадачаID = Форма.Параметры.ГлавнаяЗадача.id;
		Форма.ГлавнаяЗадачаТип = Форма.Параметры.ГлавнаяЗадача.type;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ГлавнаяЗадачаID) Тогда
		Форма.Элементы.ГлавнаяЗадачаПредставление.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Форма.ID) Тогда
		Форма.Заголовок = Форма.Заголовок + НСтр("ru = ' (Создание)'");
		Если Форма.Элементы.Найти("ГруппаИнфо") <> Неопределено Тогда
			Форма.Элементы.ГруппаИнфо.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

//Получает объект XDTO бизнес-процесса, заполненный по данным переданых предмета и шаблона
//Параметры:
//	Тип - тип бизнес-процесса
//	Шаблон - структура с данными о шаблоне бизнес-процесса
//	Предмет - структура с данными о предмете бизнес-процесса 
//Возвращает:
//	XDTO объект с типом бизнес-процесса
Функция ПолучитьНовыйБизнесПроцессПоШаблону(Прокси, Тип, Шаблон, Предмет = Неопределено) Экспорт
	
	//создание бизнес-процесса
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetBusinessProcessByTemplateRequest");
	
	Запрос.type = Тип;
	
	ШаблонБизнесПроцессаИд = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
	ШаблонБизнесПроцессаИд.id = Шаблон.id;
	ШаблонБизнесПроцессаИд.type = Шаблон.type;
	
	Запрос.businessProcessTemplateId = ШаблонБизнесПроцессаИд;
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		ПредметБизнесПроцессаИд = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		ПредметБизнесПроцессаИд.id = Предмет.id;
		ПредметБизнесПроцессаИд.type = Предмет.type;
		
		Запрос.targetId = ПредметБизнесПроцессаИд;
	КонецЕсли;
	
	Результат = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	Возврат Результат.Object;
	
КонецФункции

//Получает объект XDTO бизнес-процесса
//Параметры:
//	Тип - тип бизнес-процесса
//	Предмет - структура с данными о предмете бизнес-процесса 
//Возвращает:
//	XDTO объект с типом бизнес-процесса
Функция ПолучитьНовыйБизнесПроцесс(Прокси, Тип, Предмет = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMGetNewBusinessProcessRequest");
		
	Запрос.type = Тип;
	Если Предмет <> Неопределено Тогда
		Запрос.targetID = СоздатьОбъект(Прокси, "DMObjectID");
		Запрос.targetID.id = Предмет.id;
		Запрос.targetID.type = Предмет.type;
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Если ПроверитьТип(Прокси, Ответ, "DMGetNewBusinessProcessResponse") Тогда
		Возврат Ответ.object;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Выполняет сохранение и запуск бизнес-процесса
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Объект - XDTO объект, хранящий данные бизнес-процесса
//Возвращает:
//	XDTO Объект типа DMLaunchBusinessProcessResponse
Функция ЗапуститьБизнесПроцесс(Прокси, Объект) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMLaunchBusinessProcessRequest");
	Запрос.businessProcess = Объект;
		
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Возврат Ответ;
	
КонецФункции

//Создает объект типа DMBusibessProcess[ИмяПроцесса], и заполняет общие свойства по данным формы
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Тип - тип объекта XDTO бизнес-процесса
//	Форма - форма, содержащая реквизиты - источники заполнения
//	Исключения - строка имен исключаемых из заполнения реквизитов формы разделенных запятой
Функция ПодготовитьШапкуБизнесПроцесса(Прокси, Тип, Форма, Исключения = "") Экспорт
	
	Объект = СоздатьОбъект(Прокси, Тип);
	
	Объект.name = Форма.Наименование;
	Объект.objectId = СоздатьОбъект(Прокси, "DMObjectID"); 
	Объект.objectId.id = Форма.ID;
	Объект.objectId.type = Тип;
	
	//Общая шапка бизнес-процессов
	ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Форма, "Автор", Объект.author, "DMUser");
	ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Форма, "Предмет", Объект.target, "DMObject");
	ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Форма, "Состояние", Объект.state, "DMBusinessProcessState");
	
	Если Найти(Исключения,"Важность") = 0 Тогда
		ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Форма, "Важность", Объект.importance, "DMBusinessProcessImportance");
	КонецЕсли;
	
	Объект.beginDate = Форма.ДатаНачала;
	
	Если Найти(Исключения,"Стартован") = 0 Тогда
		Объект.started = Форма.Стартован;
	КонецЕсли;
	Если Найти(Исключения,"Завершен") = 0 Тогда
		Объект.completed = Форма.Завершен;
	КонецЕсли;
	Если Найти(Исключения,"Описание") = 0 Тогда
		Объект.description = Форма.Описание;
	КонецЕсли;
	Если Найти(Исключения,"Срок") = 0 Тогда
		Объект.dueDate = Форма.Срок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ГлавнаяЗадачаID) Тогда
		Ответ = ПолучитьОбъект(Прокси, Форма.ГлавнаяЗадачаТип, Форма.ГлавнаяЗадачаID);
		ГлавнаяЗадачаПриемник = СоздатьОбъект(Прокси,"DMBusinessProcessTask");
		ЗаполнитьЗначенияСвойствXDTO(Прокси,ГлавнаяЗадачаПриемник,Ответ.Objects[0]);
		Объект.parentTask = ГлавнаяЗадачаПриемник;
	КонецЕсли;

	Возврат Объект;
	
КонецФункции

//Получает объект XDTO исходящего письма
//Параметры:
//	Тип - XDTO тип исходящего письма
//	Предмет - структура с данными о предмете исходящего письма 
//Возвращает:
//	XDTO объект исходящего письма
Функция ПолучитьНовоеИсходящееПисьмо(Прокси, Тип, Предмет = Неопределено) Экспорт
	
	Запрос = СоздатьОбъект(Прокси, "DMGetNewEMailRequest");
		
	Запрос.type = Тип;
	Если Предмет <> Неопределено Тогда
		Запрос.targetID = СоздатьОбъект(Прокси, "DMObjectID");
		Запрос.targetID.id = Предмет.id;
		Запрос.targetID.type = Предмет.type;
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);

	Если ПроверитьТип(Прокси, Ответ, "DMGetNewEMailResponse") Тогда
		Возврат Ответ.object;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	
КонецФункции

////////////////////////////////////////
// Работа с документами

//Заполняет свойство объекта XDTO из структуры объекта потребителя
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	ОбъектXDTO - заполняемый объект XDTO
//	ИмяСвойстваXDTO - заполняемое свойство объекта XDTO
//	ИмяРеквизитаСтруктуры - имя свойства структуры, из которого заполняется свойство XDTO
//	СтруктураДокумента - используемая для заполнения структура документа или форма документа
Процедура ЗаполнитьXDTOизСтруктурыДокумента(Прокси, ОбъектXDTO, ИмяСвойстваXDTO, ИмяРеквизитаСтруктуры, СтруктураДокумента) Экспорт
	
	Если ЭтоОбъектноеСвойство(Прокси, ОбъектXDTO, ИмяСвойстваXDTO) Тогда 
		
		Реквизит    = СтруктураДокумента[ИмяРеквизитаСтруктуры];
		РеквизитID  = СтруктураДокумента[ИмяРеквизитаСтруктуры + "ID"];
		РеквизитТип = СтруктураДокумента[ИмяРеквизитаСтруктуры + "Тип"];
		
		ЗначениеСвойства = СоздатьОбъект(Прокси, ОбъектXDTO.Свойства().Получить(ИмяСвойстваXDTO).Тип.Имя);
		
		// заполнить из потребителя
		Если Метаданные.НайтиПоПолномуИмени(РеквизитТип) <> Неопределено Тогда
			
			СсылкаНаПотребителя = ПолучитьСсылкуПоID(РеквизитТип, РеквизитID);
			
			ИнтеграцияС1СДокументооборот.ЗаполнитьРеквизитыИзПотребителя(Прокси, ЗначениеСвойства, СсылкаНаПотребителя);
			
			Если СтруктураДокумента.Тип = "DMInternalDocument" Тогда
				Если ИмяСвойстваXDTO = "contactPerson" И Не ЗначениеСвойства.Установлено("correspondent") Тогда 
					ЗаполнитьXDTOизСтруктурыДокумента(Прокси, ЗначениеСвойства, "correspondent", "Корреспондент", СтруктураДокумента);
				КонецЕсли;
			ИначеЕсли СтруктураДокумента.Тип = "DMOutgoingDocument" Тогда
				Если ИмяСвойстваXDTO = "addressee" И Не ЗначениеСвойства.Установлено("correspondent") Тогда 
					ЗаполнитьXDTOизСтруктурыДокумента(Прокси, ЗначениеСвойства, "correspondent", "Получатель", СтруктураДокумента);
				КонецЕсли;
			ИначеЕсли СтруктураДокумента.Тип = "DMIncomingDocument" Тогда
				Если ИмяСвойстваXDTO = "signer" И Не ЗначениеСвойства.Установлено("correspondent") Тогда 
					ЗаполнитьXDTOизСтруктурыДокумента(Прокси, ЗначениеСвойства, "correspondent", "Отправитель", СтруктураДокумента);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли РеквизитТип = "Строка" Тогда 
			
			ЗначениеСвойства.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "", "");
			ЗначениеСвойства.name = Реквизит;
			
			ExternalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
			ExternalObject.id = "";
			ExternalObject.type = "";
			ExternalObject.name = "";
			
			ЗначениеСвойства.externalObject = ExternalObject;
			
			Если СтруктураДокумента.Тип = "DMInternalDocument" Тогда
				Если ИмяСвойстваXDTO = "contactPerson" И Не ЗначениеСвойства.Установлено("correspondent") Тогда 
					ЗаполнитьXDTOизСтруктурыДокумента(Прокси, ЗначениеСвойства, "correspondent", "Корреспондент", СтруктураДокумента);
				КонецЕсли;
			ИначеЕсли СтруктураДокумента.Тип = "DMOutgoingDocument" Тогда
				Если ИмяСвойстваXDTO = "addressee" И Не ЗначениеСвойства.Установлено("correspondent") Тогда 
					ЗаполнитьXDTOизСтруктурыДокумента(Прокси, ЗначениеСвойства, "correspondent", "Получатель", СтруктураДокумента);
				КонецЕсли;
			ИначеЕсли СтруктураДокумента.Тип = "DMIncomingDocument" Тогда
				Если ИмяСвойстваXDTO = "signer" И Не ЗначениеСвойства.Установлено("correspondent") Тогда 
					ЗаполнитьXDTOизСтруктурыДокумента(Прокси, ЗначениеСвойства, "correspondent", "Отправитель", СтруктураДокумента);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Реквизит) Тогда 
			
			ЗначениеСвойства.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, РеквизитID, РеквизитТип); 
			ЗначениеСвойства.name = Реквизит;
			
		Иначе
			
			ЗначениеСвойства.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "", ""); 
			ЗначениеСвойства.name = "";
			
		КонецЕсли;
		
		ОбъектXDTO.Установить(ИмяСвойстваXDTO, ЗначениеСвойства);
		
	Иначе
		ОбъектXDTO.Установить(ИмяСвойстваXDTO, СтруктураДокумента[ИмяРеквизитаСтруктуры]);
	КонецЕсли;
	
КонецПроцедуры

//Возвращает таблицу значений с информацией о менеджерах печати объекта
//Параметры:
//	МенеджерОбъекта - полное имя метаданных менеджера объекта
Функция ПолучитьТаблицуМенеджеровПечатиОбъекта(МенеджерОбъекта) Экспорт
	
	ПечатныеФормы = новый ТаблицаЗначений;
	ПечатныеФормы.Колонки.Добавить("МенеджерПечати");
	ПечатныеФормы.Колонки.Добавить("ИмяКоманды");
	ПечатныеФормы.Колонки.Добавить("ПредставлениеКоманды");
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ЗаполнитьТаблицуМенеджеровПечатиОбъекта(МенеджерОбъекта, ПечатныеФормы);
	
	Возврат ПечатныеФормы;
	
КонецФункции

//Заполняет параметры МенеджерПечати, ИмяФормы и ПараметрыКоманды по заданным условиям
//Параметры:
//	ОбъектПечати - строковое представление типа объекта, по которым формируются команды печати
//	МенеджерПечати - строковое представление менеджера печати объекта
//	ИмяКоманды - имя команды менеждера печати
//	ИмяФормы - имя макета печатной формы
//	ПараметрыКоманды - структура параметров команды печати
Процедура ПолучитьПараметрыПрисоединяемойПечатнойФормы(ОбъектПечати, МенеджерПечати, ИмяКоманды, ИмяФормы, ПараметрыКоманды) Экспорт
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ПолучитьПараметрыПрисоединяемойПечатнойФормы(
		ОбъектПечати, МенеджерПечати, ИмяКоманды, ИмяФормы, ПараметрыКоманды);
	
КонецПроцедуры

////////////////////////////////////////
// Общие процедуры и функции

//Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
//Параметры:
//	Строка                 - Строка - текст с разделителями;
//	Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//	ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//
// Возвращаемое значение:
//	Массив - массив строк.
//
//Примеры:
//	РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//	РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//	РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//	РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//	РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//	РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Результат.Добавить(Подстрока);
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Результат.Добавить(Строка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

//Создает XDTO объект указанного типа из пространства имен "http://www.1c.ru/dm"
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	ТипОбъекта - тип объекта XDTO
Функция СоздатьОбъект(Прокси, ТипОбъекта) Экспорт
	
	Возврат Прокси.ФабрикаXDTO.Создать(Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", ТипОбъекта));
	
КонецФункции

//Создает объект DMObjectID
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	id - идентификатор объекта XDTO
//	type - тип объекта XDTO
Функция СоздатьObjectID(Прокси, id, type) Экспорт 
	
	objectId = СоздатьОбъект(Прокси, "DMObjectID");
	objectId.id = id;
	objectId.type = type;
	
	Возврат objectId;
	
КонецФункции

//Проверяет тип объекта XDTO
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	ОбъектXDTO - проверяемый объект
//	Тип - имя типа для проверки
//Возвращает:
//	Истина если объект является объектом указанного типа и Ложь в противном случае
Функция ПроверитьТип(Прокси, ОбъектXDTO, Тип) Экспорт 
	
	Если ОбъектXDTO.Тип() = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", Тип) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Возвращает имя значения перечисления
//Параметры:
//	Значение - значение перечисления
Функция ИмяЗначенияПеречисления(Значение) Экспорт
	
	ОбъектМетаданных = Значение.Метаданные();
	
	ИндексЗначения = Перечисления[ОбъектМетаданных.Имя].Индекс(Значение);
	
	Возврат ОбъектМетаданных.ЗначенияПеречисления[ИндексЗначения].Имя;
	
КонецФункции 

//Проверяет значение на объектный тип, содержащий уникальный идентификатор
//Параметры:
//	Значение - проверяемое значение
//Возвращает: 
//	Признак наличия у объекта униклаьного идентификатора
Функция ЕстьУникальныйИдентификатор(Значение) Экспорт
	
	Тип = ТипЗнч(Значение);
	
	Возврат Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип);
	
КонецФункции

//Проверяет, является ли свойство объектным, т.е. наследуется от типа DMObject
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	ОбъектXDTO - объект, содержащий проверяемое свойство
//	ИмяСвойстваXDTO - имя проверяемого свойства
//Возвращает:
//	Истина, в случае, если свойство является потомком типа DMObject, иначе Ложь
Функция ЭтоОбъектноеСвойство(Прокси, ОбъектXDTO, ИмяСвойстваXDTO) Экспорт
	
	ТипСвойства = ОбъектXDTO.Тип().Свойства.Получить(ИмяСвойстваXDTO).Тип;
	ТипРодитель = Прокси.ФабрикаXDTO.Тип("http://www.1c.ru/dm", "DMObject");
	
	Если ТипЗнч(ТипСвойства) = Тип("ТипОбъектаXDTO") И ТипРодитель.ЭтоПотомок(ТипСвойства) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Возвращает ссылку на объект базы данных по информации во внешнем объекте.
//Параметры:
//	ВнешнийОбъект - структура данных о внешнем объекте, 
//		содержит id и type объекта по данным 1С:Документооборота
Функция ПолучитьСсылкуНаОбъектПоВнешнемуОбъекту(ВнешнийОбъект) Экспорт
	
	Попытка
		Если ВнешнийОбъект <> Неопределено Тогда
			Если Найти(ВнешнийОбъект.type,"Справочник.") <> 0 Тогда
				Возврат Справочники[СтрЗаменить(ВнешнийОбъект.type,
					"Справочник.","")].ПолучитьСсылку(новый УникальныйИдентификатор(ВнешнийОбъект.id));
				
			ИначеЕсли Найти(ВнешнийОбъект.type,"Документ.") <> 0 Тогда
				Возврат Документы[СтрЗаменить(ВнешнийОбъект.type,
					"Документ.","")].ПолучитьСсылку(новый УникальныйИдентификатор(ВнешнийОбъект.id));
				
			ИначеЕсли Найти(ВнешнийОбъект.type,"ПланСчетов.") <> 0 Тогда
				Возврат ПланыСчетов[СтрЗаменить(ВнешнийОбъект.type,
					"ПланСчетов.","")].ПолучитьСсылку(новый УникальныйИдентификатор(ВнешнийОбъект.id));
				
			ИначеЕсли Найти(ВнешнийОбъект.type,"ПланВидовХарактеристик.") <> 0 Тогда
				Возврат ПланыВидовХарактеристик[СтрЗаменить(ВнешнийОбъект.type,
					"ПланВидовХарактеристик.","")].ПолучитьСсылку(новый УникальныйИдентификатор(ВнешнийОбъект.id));
				
			ИначеЕсли Найти(ВнешнийОбъект.type,"ПланВидовРасчета.") <> 0 Тогда
				Возврат ПланыВидовРасчета[СтрЗаменить(ВнешнийОбъект.type,
					"ПланВидовРасчета.","")].ПолучитьСсылку(новый УникальныйИдентификатор(ВнешнийОбъект.id));
				
			ИначеЕсли Найти(ВнешнийОбъект.type,"БизнесПроцесс.") <> 0 Тогда
				Возврат БизнесПроцессы[СтрЗаменить(ВнешнийОбъект.type,
					"БизнесПроцесс.","")].ПолучитьСсылку(новый УникальныйИдентификатор(ВнешнийОбъект.id));
				
			ИначеЕсли Найти(ВнешнийОбъект.type,"Задача.") <> 0 Тогда
				Возврат Задачи[СтрЗаменить(ВнешнийОбъект.type,
					"Задача.","")].ПолучитьСсылку(новый УникальныйИдентификатор(ВнешнийОбъект.id));
				
			КонецЕсли;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		// Тип объекта не найден в текущей конфигурации
		Возврат Неопределено;
	КонецПопытки

КонецФункции

//Проверяет возврат WEB-сервиса. В случае возврата объекта типа DMError вызывает исключение
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Ответ - проверяемый объект XDTO
Процедура ПроверитьВозвратВебСервиса(Прокси, Ответ) Экспорт
	
	Если ПроверитьТип(Прокси, Ответ, "DMError") Тогда 
		ТекстОшибки = Ответ.description;
		Пока Найти(ТекстОшибки,"}") > 0 Цикл
			ТекстОшибки = Сред(ТекстОшибки,Найти(ТекстОшибки,"}")+3);
		КонецЦикла;
		ПозицияТекстаПоПричине = Найти(ТекстОшибки, Символы.ПС + НСтр("ru='по причине:'"));
		Если ПозицияТекстаПоПричине <> 0 Тогда
			ТекстОшибки = Сред(ТекстОшибки, ПозицияТекстаПоПричине + 13);
		КонецЕсли;
		Если Найти (ТекстОшибки, "ВызватьИсключение") Тогда
			ТекстОшибки = Сред(ТекстОшибки,1, Найти(ТекстОшибки, "ВызватьИсключение")-1);
		КонецЕсли;
		ВызватьИсключение Ответ.subject + ":" + Символы.ПС + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

//Получает набор дополнительных реквизитов объекта и помещает его на форму объекта
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Форма - управляемая форма документа 1С:Документооборота
Процедура ПолучитьДополнительныеРеквизитыИПоместитьНаФорму(Прокси, Форма) Экспорт
	
	Объект = СоздатьОбъект(Прокси, Форма.Тип);
	Объект.name = Форма.ЗаголовокДокумента;
	Объект.objectId = СоздатьОбъект(Прокси, "DMObjectID");
	Объект.objectId.id = Форма.ID;
	Объект.objectId.type = Форма.Тип;
	
	Если ЗначениеЗаполнено(Форма.ВидДокумента) Тогда
		Объект.documentType = СоздатьОбъект(Прокси, Форма.Тип + "Type");
		Объект.documentType.name = Форма.ВидДокумента;
		Объект.documentType.objectId = СоздатьОбъект(Прокси, "DMObjectID");
		Объект.documentType.objectId.id = Форма.ВидДокументаID;
		Объект.documentType.objectId.type = Форма.ВидДокументаТип;
	КонецЕсли;
		
	Запрос = СоздатьОбъект(Прокси, "DMGetObjectAdditionalPropertiesRequest");
	Запрос.object = Объект;
	
	Результат = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	ПоместитьДополнительныеРеквизитыНаФорму(Форма, Результат);
	
КонецПроцедуры

//Помещает набор дополнительных реквизитов объекта на форму объекта
//Параметры:
//	Форма - управляемая форма документа 1С:Документооборота
//	ОбъектXDTO - объект XDTO, из которого заполняются реквизиты формы
Процедура ПоместитьДополнительныеРеквизитыНаФорму(Форма, ОбъектXDTO) Экспорт
	
	Форма.Элементы.ГруппаСвойства.Видимость = Ложь;
	Если ОбъектXDTO.additionalProperties.Количество() > 0 Тогда
		Форма.Элементы.ГруппаСвойства.Видимость = Истина;
		Форма.Свойства.Очистить();
		Для Каждого ДопСвойство Из ОбъектXDTO.additionalProperties Цикл
			НоваяСтрока = Форма.Свойства.Добавить();
			
			НоваяСтрока.Свойство = ДопСвойство.name;
			НоваяСтрока.СвойствоТип = ДопСвойство.objectId.type;
			НоваяСтрока.СвойствоID = ДопСвойство.objectId.id;
			
			Если ДопСвойство.Установлено("propertySimpleValue") Тогда
				НоваяСтрока.Значение = ДопСвойство.propertySimpleValue;
			ИначеЕсли ДопСвойство.Установлено("propertyObjectValue") Тогда
                НоваяСтрока.Значение = ДопСвойство.propertyObjectValue.name;
				НоваяСтрока.ЗначениеТип = ДопСвойство.propertyObjectValue.objectId.type;
				НоваяСтрока.ЗначениеID = ДопСвойство.propertyObjectValue.objectId.id;
			КонецЕсли;
			
			Для Каждого ОписаниеТипа Из ДопСвойство.PropertyValueTypes Цикл
				ДанныеОТипе = Новый Структура("xdtoClassName, presentation");
				ДанныеОТипе.xdtoClassName = ОписаниеТипа.xdtoClassName;
				ДанныеОТипе.presentation = ОписаниеТипа.presentation;
				НоваяСтрока.СписокДоступныхТипов.Добавить(ДанныеОТипе);
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Помещает значения дополнительных свойств объекта с формы объекта в объект XDTO
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Форма - управляемая форма документа 1С:Документооборота
//	ОбъектXDTO - заполняемый объект XDTO
Процедура СформироватьДополнительныеСвойства(Прокси, Форма, ОбъектXDTO) Экспорт
	
	Для Каждого ДопСвойство Из Форма.Свойства Цикл

		ДополнительноеСвойство = СоздатьОбъект(Прокси, "DMAdditionalProperty");
		ДополнительноеСвойство.name = ДопСвойство.Свойство;
		ДополнительноеСвойство.objectId = СоздатьObjectID(Прокси, ДопСвойство.СвойствоID, ДопСвойство.СвойствоТип);
		
		Если ЗначениеЗаполнено(ДопСвойство.Значение) Тогда
			Если ЗначениеЗаполнено(ДопСвойство.ЗначениеID) Тогда //значение объектного типа
				
				ДоступныеТипы = ДопСвойство.СписокДоступныхТипов;
				Если ДоступныеТипы.Количество() > 1 Тогда 
					ДополнительноеСвойство.propertyObjectValue = СоздатьОбъект(Прокси, "DMObject");
					ДополнительноеСвойство.propertyObjectValue.name = ДопСвойство.Значение;
					ДополнительноеСвойство.propertyObjectValue.objectId = 
						СоздатьObjectID(Прокси, ДопСвойство.ЗначениеID, ДопСвойство.ЗначениеТип);
						
				Иначе
					ТипСвойства = ДоступныеТипы[0].Значение.xdtoClassName;
					ЗначениеСвойства = СоздатьОбъект(Прокси, ТипСвойства);
					
					// заполнить из потребителя
					РеквизитТип = ДопСвойство.ЗначениеТип;
					РеквизитID = ДопСвойство.ЗначениеID;
					Если Метаданные.НайтиПоПолномуИмени(РеквизитТип) <> Неопределено Тогда 
						
						СсылкаНаПотребителя = ПолучитьСсылкуПоID(РеквизитТип, РеквизитID);
				 		ЗаполнитьРеквизитыИзПотребителя(Прокси, ЗначениеСвойства, СсылкаНаПотребителя);
				
					ИначеЕсли РеквизитТип = "Строка" Тогда 
				
						ЗначениеСвойства.objectId = СоздатьObjectID(Прокси, "", "");
						ЗначениеСвойства.name = ДопСвойство.Значение;
	
						ВнешнийИД = СоздатьОбъект(Прокси, "externalObject");
						ВнешнийИД.id = "";
						ВнешнийИД.type = "";
						ВнешнийИД.name = "";
						
						ЗначениеСвойства.externalObject = ВнешнийИД;
				
					Иначе
				
						ЗначениеСвойства.objectId = СоздатьObjectID(Прокси, ДопСвойство.ЗначениеID, ДопСвойство.ЗначениеТип); 
						ЗначениеСвойства.name = ДопСвойство.Значение;
				
					КонецЕсли;
					
					ДополнительноеСвойство.propertyObjectValue = ЗначениеСвойства;
					
				КонецЕсли;
					
			Иначе //значение примитивного вида
				ДополнительноеСвойство.propertySimpleValue = ДопСвойство.Значение;
			КонецЕсли;
		КонецЕсли;
		
		ОбъектXDTO.additionalProperties.Добавить(ДополнительноеСвойство);

	КонецЦикла;
	
КонецПроцедуры

//Выполняет действия при изменении вида документа
//Параметры:
//	Форма - управляемая форма документа 1С:Документооборота
Процедура ПриИзмененииВидаНаФормеДокумента(Форма) Экспорт 
	
	Прокси = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьПрокси();
	
	ВидДокументаID = Форма.ВидДокументаID;
	ВидДокументаТип = Форма.ВидДокументаТип;
	
	ИмяФормы = Форма.ИмяФормы;
	Элементы = Форма.Элементы;
	
	Если ЗначениеЗаполнено(ВидДокументаID) И ЗначениеЗаполнено(ВидДокументаТип) Тогда 
		ОбъектИд = СоздатьObjectID(Прокси, ВидДокументаID, ВидДокументаТип);
		
		Запрос = СоздатьОбъект(Прокси, "DMRetrieveRequest");
		Запрос.objectIds.Добавить(ОбъектИд);
		
		Результат = Прокси.execute(Запрос);
		ПроверитьВозвратВебСервиса(Прокси, Результат);
	
		documentType = Результат.objects[0];
	Иначе	
		documentType = Неопределено;
	КонецЕсли;
	
	Если ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ВходящийДокумент" Тогда 
		
		Элементы.СрокИсполнения.Видимость = (documentType <> Неопределено И documentType.performanceDateEnabled = Истина); 
		Элементы.Сумма.Видимость 		  = (documentType <> Неопределено И documentType.sumEnabled = Истина); 
		Элементы.Валюта.Видимость 		  = (documentType <> Неопределено И documentType.sumEnabled = Истина); 
		
	ИначеЕсли ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящийДокумент" Тогда 
		
		Элементы.СрокИсполнения.Видимость 	  = (documentType <> Неопределено И documentType.PerformanceDateEnabled = Истина); 
		Элементы.НомерПолучателя.Видимость    = (documentType <> Неопределено И documentType.ExternalNumberEnabled = Истина); 
		Элементы.ДатаПолучателя.Видимость 	  = (documentType <> Неопределено И documentType.ExternalNumberEnabled = Истина); 
		Элементы.Сумма.Видимость 		  	  = (documentType <> Неопределено И documentType.SumEnabled = Истина); 
		Элементы.Валюта.Видимость 		  	  = (documentType <> Неопределено И documentType.SumEnabled = Истина); 
		
	ИначеЕсли ИмяФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.ВнутреннийДокумент" Тогда 
		
		Элементы.СрокИсполнения.Видимость = (DocumentType <> Неопределено И DocumentType.performanceDateEnabled = Истина); 
		Элементы.Корреспондент.Видимость  = (DocumentType <> Неопределено И DocumentType.correspondentEnabled = Истина); 
		Элементы.КонтактноеЛицо.Видимость = (DocumentType <> Неопределено И DocumentType.correspondentEnabled = Истина); 
		Элементы.Сумма.Видимость 		  = (DocumentType <> Неопределено И DocumentType.sumEnabled = Истина); 
		Элементы.Валюта.Видимость 		  = (DocumentType <> Неопределено И DocumentType.sumEnabled = Истина); 
		Элементы.Бессрочный.Видимость 	  = (DocumentType <> Неопределено И DocumentType.durationEnabled = Истина); 
		Элементы.ПорядокПродления.Видимость   = (DocumentType <> Неопределено И DocumentType.durationEnabled = Истина); 
		Элементы.ДатаНачалаДействия.Видимость = (DocumentType <> Неопределено И DocumentType.durationEnabled = Истина); 
		Элементы.ДатаОкончанияДействия.Видимость = (DocumentType <> Неопределено И DocumentType.durationEnabled = Истина); 
		
	КонецЕсли;
	
	ОтображатьПредупреждения = ОтображениеПредупрежденияПриРедактировании.Отображать;
	НеОтображатьПредупреждения = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	
	АвтоматическаяНумерация = (DocumentType <> Неопределено И DocumentType.automaticNumeration = Истина);
	Если АвтоматическаяНумерация Тогда 
		Элементы.РегистрационныйНомер.ОтображениеПредупрежденияПриРедактировании = ОтображатьПредупреждения;
		Элементы.ДатаРегистрации.ОтображениеПредупрежденияПриРедактировании = ОтображатьПредупреждения;
		Элементы.Зарегистрировать.Доступность = Истина;
	Иначе
		Элементы.РегистрационныйНомер.ОтображениеПредупрежденияПриРедактировании = НеОтображатьПредупреждения;
		Элементы.ДатаРегистрации.ОтображениеПредупрежденияПриРедактировании = НеОтображатьПредупреждения;
		Элементы.Зарегистрировать.Доступность = Ложь;
	КонецЕсли;
	
	//установка дополнительных реквизитов
	ПолучитьДополнительныеРеквизитыИПоместитьНаФорму(Прокси, Форма);
	
КонецПроцедуры

//Возвращает соответствие свойств XDTO и реквизитов формы документа
//Параметры:
//	ТипДокумента - тип документа объекта XDTO
//Возвращает: соответствие
Функция СоответствиеСвойствXDTOиРеквизитовФормыДокумента(ТипДокумента) Экспорт 
	
	СоответствиеРеквизитов = Новый Структура;
	
	Если ТипДокумента = "DMIncomingDocument" Тогда 
		
		СоответствиеРеквизитов.Вставить("externalNumber",  	"НомерОтправителя");
		СоответствиеРеквизитов.Вставить("externalDate", 	"ДатаОтправителя");
		
		СоответствиеРеквизитов.Вставить("title", 		  	"ЗаголовокДокумента");
		СоответствиеРеквизитов.Вставить("summary", 		  	"Описание");
		СоответствиеРеквизитов.Вставить("comment", 		  	"Комментарий");
		СоответствиеРеквизитов.Вставить("regNumber", 	  	"РегистрационныйНомер");
		СоответствиеРеквизитов.Вставить("regDate", 		  	"ДатаРегистрации");
		СоответствиеРеквизитов.Вставить("performanceDate", 	"СрокИсполнения");
		СоответствиеРеквизитов.Вставить("sum", 			  	"Сумма");
		
		СоответствиеРеквизитов.Вставить("correspondent", 	"Отправитель");
		СоответствиеРеквизитов.Вставить("signer", 			"Подписал");
		СоответствиеРеквизитов.Вставить("addressee", 		"Адресат");
		СоответствиеРеквизитов.Вставить("subdivision", 		"Подразделение");
		СоответствиеРеквизитов.Вставить("accessLevel", 		"ГрифДоступа");
		СоответствиеРеквизитов.Вставить("documentType",  	"ВидДокумента");
		
		СоответствиеРеквизитов.Вставить("deliveryMethod",	"СпособПолучения");
		СоответствиеРеквизитов.Вставить("status", 			"Состояние");
		СоответствиеРеквизитов.Вставить("organization", 	"Организация");
		СоответствиеРеквизитов.Вставить("activityMatter", 	"ВопросДеятельности");
		СоответствиеРеквизитов.Вставить("responsible", 		"Ответственный");
		СоответствиеРеквизитов.Вставить("currency", 		"Валюта");
		
	ИначеЕсли ТипДокумента = "DMOutgoingDocument" Тогда 
		
		СоответствиеРеквизитов.Вставить("externalNumber", 	"НомерПолучателя");
		СоответствиеРеквизитов.Вставить("externalDate", 	"ДатаПолучателя");
		СоответствиеРеквизитов.Вставить("title", 			"ЗаголовокДокумента");
		СоответствиеРеквизитов.Вставить("summary", 			"Описание");
		СоответствиеРеквизитов.Вставить("comment", 			"Комментарий");
		СоответствиеРеквизитов.Вставить("regNumber", 		"РегистрационныйНомер");
		СоответствиеРеквизитов.Вставить("regDate", 			"ДатаРегистрации");
		СоответствиеРеквизитов.Вставить("performanceDate", 	"СрокИсполнения");
		СоответствиеРеквизитов.Вставить("sum", 				"Сумма");
		СоответствиеРеквизитов.Вставить("sent", 			"Отправлен");
		СоответствиеРеквизитов.Вставить("sendDate", 		"ДатаОтправки");
		
		СоответствиеРеквизитов.Вставить("correspondent", 	"Получатель");
		СоответствиеРеквизитов.Вставить("addressee", 		"Адресат");
		СоответствиеРеквизитов.Вставить("signer", 			"Подписал");
		СоответствиеРеквизитов.Вставить("author", 		  	"Подготовил");
		СоответствиеРеквизитов.Вставить("subdivision", 		"Подразделение");
		СоответствиеРеквизитов.Вставить("accessLevel", 		"ГрифДоступа");
		СоответствиеРеквизитов.Вставить("documentType",  	"ВидДокумента");
		СоответствиеРеквизитов.Вставить("deliveryMethod",	"СпособОтправки");
		СоответствиеРеквизитов.Вставить("status", 			"Состояние");
		СоответствиеРеквизитов.Вставить("organization", 	"Организация");
		СоответствиеРеквизитов.Вставить("activityMatter", 	"ВопросДеятельности");
		СоответствиеРеквизитов.Вставить("responsible", 		"Ответственный");
		СоответствиеРеквизитов.Вставить("currency", 		"Валюта");
		
	ИначеЕсли ТипДокумента = "DMInternalDocument" Тогда 
		
		СоответствиеРеквизитов.Вставить("title", 		  	"ЗаголовокДокумента");
		СоответствиеРеквизитов.Вставить("summary", 		  	"Описание");
		СоответствиеРеквизитов.Вставить("comment", 		  	"Комментарий");
		СоответствиеРеквизитов.Вставить("regNumber", 	  	"РегистрационныйНомер");
		СоответствиеРеквизитов.Вставить("regDate", 		  	"ДатаРегистрации");
		СоответствиеРеквизитов.Вставить("performanceDate",	"СрокИсполнения");
		СоответствиеРеквизитов.Вставить("sum", 		  	  	"Сумма");
		СоответствиеРеквизитов.Вставить("beginDate", 	  	"ДатаНачалаДействия");
		СоответствиеРеквизитов.Вставить("endDate", 		  	"ДатаОкончанияДействия");
		СоответствиеРеквизитов.Вставить("openEnded", 	  	"Бессрочный");
		
		СоответствиеРеквизитов.Вставить("folder", 		  	"Папка");
		СоответствиеРеквизитов.Вставить("author", 		  	"Подготовил");
		СоответствиеРеквизитов.Вставить("signer", 		  	"Подписал");
		СоответствиеРеквизитов.Вставить("subdivision", 	  	"Подразделение");
		СоответствиеРеквизитов.Вставить("correspondent",  	"Корреспондент");
		СоответствиеРеквизитов.Вставить("contactPerson",  	"КонтактноеЛицо");
		СоответствиеРеквизитов.Вставить("prolongationProcedure","ПорядокПродления");
		СоответствиеРеквизитов.Вставить("accessLevel", 	  	"ГрифДоступа");
		СоответствиеРеквизитов.Вставить("documentType",   	"ВидДокумента");
		СоответствиеРеквизитов.Вставить("status", 		  	"Состояние");
		СоответствиеРеквизитов.Вставить("organization",   	"Организация");
		СоответствиеРеквизитов.Вставить("activityMatter", 	"ВопросДеятельности");
		СоответствиеРеквизитов.Вставить("responsible", 	  	"Ответственный");
		СоответствиеРеквизитов.Вставить("currency", 		 "Валюта");
		
	КонецЕсли;
	
	Возврат СоответствиеРеквизитов;
	
КонецФункции

//Заполняет реквизиты формы из данных объекта-потребителя
//Параметры:
//	ВнешнийОбъект - ссылка на объект потребителя
//	Форма - управляемая форма документа 1С:Документооборота
Процедура ЗаполнитьФормуИзПотребителя(ВнешнийОбъект, Форма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка
	|ИЗ
	|	Справочник.НастройкиЗаполненияОбъектов1СДокументооборота
	|ГДЕ
	|	ТипОбъектаПотребителя = &ТипОбъектаПотребителя
	|	И ТипОбъектаДокументооборота = &ТипОбъектаДокументооборота
	|	И Не ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ТипОбъектаПотребителя", ВнешнийОбъект.Метаданные().ПолноеИмя());
	Запрос.УстановитьПараметр("ТипОбъектаДокументооборота", Форма.Тип);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		Форма["ЗаголовокДокумента"] = Строка(ВнешнийОбъект);
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	НастройкаЗаполнения = Выборка.Ссылка;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаДокументооборота", "documentType");
	ПараметрыОтбора.Вставить("ДополнительныйРеквизит", Ложь);
	ПараметрыОтбора.Вставить("ВариантПравилаЗаполненияРеквизитов",
		Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзУказанногоЗначения);
	
	СтрокиВидДокумента = НастройкаЗаполнения.ПравилаЗаполненияРеквизитов.НайтиСтроки(ПараметрыОтбора);
	Если СтрокиВидДокумента.Количество() > 0 Тогда 
		СтрокаВидДокумента = СтрокиВидДокумента[0];
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("documentType",
			Новый Структура("id, type, name", 
			СтрокаВидДокумента.ИдентификаторЗначенияРеквизита,
			СтрокаВидДокумента.ТипЗначенияРеквизита,
			СтрокаВидДокумента.ЗначениеРеквизитаДокументооборота));
		
		Реквизиты = Справочники.НастройкиЗаполненияОбъектов1СДокументооборота.
			ПолучитьРеквизитыОбъектаДокументооборота(НастройкаЗаполнения.ТипОбъектаДокументооборота, ПараметрыЗаполнения);
		
	Иначе
		
		Реквизиты = Справочники.НастройкиЗаполненияОбъектов1СДокументооборота.
			ПолучитьРеквизитыОбъектаДокументооборота(НастройкаЗаполнения.ТипОбъектаДокументооборота);
		
	КонецЕсли;
		
	СоответствиеРеквизитов = СоответствиеСвойствXDTOиРеквизитовФормыДокумента(Форма.Тип);
		
	Для Каждого Реквизит Из Реквизиты Цикл
		
		Если Не Реквизит.ДопРеквизит Тогда 
			ПараметрыОтбора = Новый Структура("ДополнительныйРеквизит, ИмяРеквизитаОбъектаДокументооборота", Ложь, Реквизит.Имя);
		Иначе
			ПараметрыОтбора = Новый Структура("ДополнительныйРеквизит, ДополнительныйРеквизитID, ДополнительныйРеквизитТип", 
				Истина, Реквизит.ДопРеквизитID, Реквизит.ДопРеквизитТип);
		КонецЕсли;
		
		НайденныеСтроки = НастройкаЗаполнения.ПравилаЗаполненияРеквизитов.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		НайденнаяСтрока = НайденныеСтроки[0];
		
		Если Не Реквизит.ДопРеквизит Тогда 
			
			РеквизитФормы = СоответствиеРеквизитов[Реквизит.Имя];
			ТипРеквизита = Реквизит.Тип[0].Значение;
			
			Если НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
					Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзРеквизитаОбъектаПотребителя Тогда 
				
				ИмяРеквизитаОбъектаПотребителя = НайденнаяСтрока.ИмяРеквизитаОбъектаПотребителя;
				Если ИмяРеквизитаОбъектаПотребителя = "Представление" Тогда 
					Результат = Строка(ВнешнийОбъект);
				ИначеЕсли Найти(ИмяРеквизитаОбъектаПотребителя, ".") > 0 Тогда 
					Запрос = новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ ВнешнийОбъект.Объект."+ИмяРеквизитаОбъектаПотребителя+" КАК Значение 
					|ИЗ (ВЫБРАТЬ &ВнешнийОбъект КАК Объект) КАК ВнешнийОбъект";
					Запрос.УстановитьПараметр("ВнешнийОбъект",ВнешнийОбъект);
					Результат = Запрос.Выполнить().Выгрузить()[0].Значение;
				Иначе
					Результат = ВнешнийОбъект[ИмяРеквизитаОбъектаПотребителя];
				КонецЕсли;
				
				Если ТипРеквизита = "Строка" Или ТипРеквизита = "Дата" Или ТипРеквизита = "Число" 
					Или ТипРеквизита = "ДатаВремя" Или ТипРеквизита = "Булево" Тогда 
					Форма[РеквизитФормы] = Результат;
					
				ИначеЕсли ЗначениеЗаполнено(Результат) Тогда 
					Форма[РеквизитФормы] = Строка(Результат);
					Если ЕстьУникальныйИдентификатор(Результат) Тогда 
						Форма[РеквизитФормы + "ID"] = Строка(Результат.УникальныйИдентификатор());
						Форма[РеквизитФормы + "Тип"] = Результат.Метаданные().ПолноеИмя();
					Иначе
						Форма[РеквизитФормы + "Тип"] = "Строка";
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзУказанногоЗначения Тогда
				
				Если ТипРеквизита = "Строка" Или ТипРеквизита = "Дата" Или ТипРеквизита = "Число" 
					Или ТипРеквизита = "ДатаВремя" Или ТипРеквизита = "Булево" Тогда 
					Форма[РеквизитФормы] = НайденнаяСтрока.ЗначениеРеквизитаДокументооборота;
					
				Иначе
					Форма[РеквизитФормы] = НайденнаяСтрока.ЗначениеРеквизитаДокументооборота;
					Форма[РеквизитФормы + "ID"]  = НайденнаяСтрока.ИдентификаторЗначенияРеквизита;
					Форма[РеквизитФормы + "Тип"] = НайденнаяСтрока.ТипЗначенияРеквизита;
					
					Если Реквизит.Имя = "documentType" Тогда 
						ПриИзмененииВидаНаФормеДокумента(Форма);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзВыраженияНаВстроенномЯзыке И НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
				
				Источник = ВнешнийОбъект;
				Результат = Неопределено;
				
				// Метод не будет выполнен при работе в модели сервиса.
				Выполнить(НайденнаяСтрока.ВычисляемоеВыражение);
				
				Если ТипРеквизита = "Строка" Или ТипРеквизита = "Дата" Или ТипРеквизита = "Число" 
					Или ТипРеквизита = "ДатаВремя" Или ТипРеквизита = "Булево" Тогда 
					Форма[РеквизитФормы] = Результат;
					
				ИначеЕсли ЗначениеЗаполнено(Результат) Тогда 
					Форма[РеквизитФормы] = Строка(Результат);
					Если ЕстьУникальныйИдентификатор(Результат) Тогда 
						Форма[РеквизитФормы + "ID"] = Строка(Результат.УникальныйИдентификатор());
						Форма[РеквизитФормы + "Тип"] = Результат.Метаданные().ПолноеИмя();
					Иначе
						Форма[РеквизитФормы + "Тип"] = "Строка";
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТипРеквизита = Реквизит.Тип[0].Значение;
			
			ПараметрыОтбора = Новый Структура("СвойствоТип, СвойствоID", Реквизит.ДопРеквизитТип, Реквизит.ДопРеквизитID);
			СтрокиДопРеквизита = Форма.Свойства.НайтиСтроки(ПараметрыОтбора);
			Если СтрокиДопРеквизита.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаДопРеквизита = СтрокиДопРеквизита[0];
			
			Если НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзРеквизитаОбъектаПотребителя Тогда 
				
				ИмяРеквизитаОбъектаПотребителя = НайденнаяСтрока.ИмяРеквизитаОбъектаПотребителя;
				Если ИмяРеквизитаОбъектаПотребителя = "Представление" Тогда 
					Результат = Строка(ВнешнийОбъект);
				ИначеЕсли Найти(ИмяРеквизитаОбъектаПотребителя, ".") > 0 Тогда 
					Запрос = новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ ВнешнийОбъект.Объект."+ИмяРеквизитаОбъектаПотребителя+" КАК Значение 
					|ИЗ (ВЫБРАТЬ &ВнешнийОбъект КАК Объект) КАК ВнешнийОбъект";
					Запрос.УстановитьПараметр("ВнешнийОбъект",ВнешнийОбъект);
					Результат = Запрос.Выполнить().Выгрузить()[0].Значение;
				Иначе
					Результат = ВнешнийОбъект[ИмяРеквизитаОбъектаПотребителя];
				КонецЕсли;
				
				Если ТипРеквизита = "Строка" Или ТипРеквизита = "Дата" Или ТипРеквизита = "Число" 
					Или ТипРеквизита = "ДатаВремя" Или ТипРеквизита = "Булево" Тогда 
					СтрокаДопРеквизита["Значение"] = Результат;
					
				ИначеЕсли ЗначениеЗаполнено(Результат) Тогда 
					СтрокаДопРеквизита["Значение"] = Строка(Результат);
					Если ЕстьУникальныйИдентификатор(Результат) Тогда 
						СтрокаДопРеквизита["ЗначениеID"] = Строка(Результат.УникальныйИдентификатор());
						СтрокаДопРеквизита["ЗначениеТип"] = Результат.Метаданные().ПолноеИмя();
					Иначе
						СтрокаДопРеквизита["ЗначениеТип"] = "Строка";
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзУказанногоЗначения Тогда
				
				СтрокаДопРеквизита["Значение"] = НайденнаяСтрока.ЗначениеРеквизитаДокументооборота;
				СтрокаДопРеквизита["ЗначениеID"]  = НайденнаяСтрока.ИдентификаторЗначенияРеквизита;
				СтрокаДопРеквизита["ЗначениеТип"] = НайденнаяСтрока.ТипЗначенияРеквизита;
				
			ИначеЕсли НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзВыраженияНаВстроенномЯзыке И НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
				
				Источник = ВнешнийОбъект;
				Результат = Неопределено;
				
				// Метод не будет выполнен при работе в модели сервиса.
				Выполнить(НайденнаяСтрока.ВычисляемоеВыражение);
				
				Если ТипРеквизита = "Строка" Или ТипРеквизита = "Дата" Или ТипРеквизита = 
					"Число" Или ТипРеквизита = "ДатаВремя" Или ТипРеквизита = "Булево" Тогда 
					СтрокаДопРеквизита["Значение"] = Результат;
					
				ИначеЕсли ЗначениеЗаполнено(Результат) Тогда 
					СтрокаДопРеквизита["Значение"] = Строка(Результат);
					Если ЕстьУникальныйИдентификатор(Результат) Тогда 
						СтрокаДопРеквизита["ЗначениеID"] = Строка(Результат.УникальныйИдентификатор());
						СтрокаДопРеквизита["ЗначениеТип"] = Результат.Метаданные().ПолноеИмя();
					Иначе	
						СтрокаДопРеквизита["ЗначениеТип"] = "Строка";
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

//Заполняет реквизиты из объекта потребителя
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	РеквизитОбъектаXDTO - имя реквизита объекта XDTO
//	СсылкаНаПотребитель - ссылка на объект текущей базы данных
Процедура ЗаполнитьРеквизитыИзПотребителя(Прокси, РеквизитОбъектаXDTO, СсылкаНаПотребитель) Экспорт 
	
	РеквизитОбъектаXDTO.name = Строка(СсылкаНаПотребитель);
	РеквизитОбъектаXDTO.objectId = СоздатьObjectID(Прокси, "", "");
	
	ВнешнийОбъект = СоздатьОбъект(Прокси, "ExternalObject");
	ПолноеИмя = СсылкаНаПотребитель.Метаданные().ПолноеИмя();
	Если Найти(ПолноеИмя, "Перечисление.") > 0 Тогда 
		ВнешнийОбъект.id = ИмяЗначенияПеречисления(СсылкаНаПотребитель);
		ВнешнийОбъект.type = ПолноеИмя;
		ВнешнийОбъект.name = Строка(СсылкаНаПотребитель);
	Иначе
		ВнешнийОбъект.id = Строка(СсылкаНаПотребитель.УникальныйИдентификатор());
		ВнешнийОбъект.type = ПолноеИмя;
		ВнешнийОбъект.name = Строка(СсылкаНаПотребитель);
	КонецЕсли;
	РеквизитОбъектаXDTO.externalObject = ВнешнийОбъект;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ЗаполнитьРеквизитыИзПотребителя(Прокси, РеквизитОбъектаXDTO, СсылкаНаПотребитель);
	
КонецПроцедуры

//Заполняет свойства объекта-приемника по объекту-источнику
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Приемник - XDTO объект, свойства которого нужно заполнить
//	Источник - XDTO объект, по свойствам которого заполнятся объект-приемник 
Процедура ЗаполнитьЗначенияСвойствXDTO(Прокси, Приемник, Источник) Экспорт
	
	Для каждого Свойство из Источник.Свойства() Цикл
		Если Источник.Установлено(Свойство.Имя) И Приемник.Свойства().Получить(Свойство.Имя) <> Неопределено Тогда
			Если ТипЗнч(Источник[Свойство.Имя]) = Тип("ОбъектXDTO") Тогда 
				ОбъектноеСвойство = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, Свойство.Тип.Имя);
				ЗаполнитьЗначенияСвойствXDTO(Прокси, ОбъектноеСвойство, Источник[Свойство.Имя]);
				Приемник[Свойство.Имя] = ОбъектноеСвойство;
			ИначеЕсли ТипЗнч(Источник[Свойство.Имя]) = Тип("СписокXDTO") Тогда
				Для каждого Элемент из Источник[Свойство.Имя] Цикл
					НовыйЭлемент = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,Свойство.Тип.Имя);
					ЗаполнитьЗначенияСвойствXDTO(Прокси, НовыйЭлемент, Элемент);  
					Приемник[Свойство.Имя].Добавить(НовыйЭлемент);
				КонецЦикла;
			Иначе
				Приемник[Свойство.Имя] = Источник[Свойство.Имя];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Заполняет объектный реквизит (приемник) объекту XDTO (источник)
//Параметры: 
//	Приемник - объект, содержащий реквизиты или свойства, которые должны быть заполненыпо свойству объекта XDTO 
//	Источник - объект XDTO или его свойство, по которому будет заполнен объектный реквизит
//	ИмяРеквизита - имя объектного реквизита
//	ЗаполнятьПредставление - признак необходимости заполнения реквизта представления по свойству objectId.presentation
Процедура ЗаполнитьОбъектныйРеквизит(Приемник, Источник, ИмяРеквизита, ЗаполнятьПредставление = Ложь) Экспорт
	
	Если Источник <> Неопределено Тогда
		Приемник[ИмяРеквизита] = Источник.name;
		Приемник[ИмяРеквизита + "ID"] = Источник.objectId.id;
		Приемник[ИмяРеквизита + "Тип"] = Источник.objectId.type;
		Попытка
			Если ЗаполнятьПредставление И Источник.objectId.Установлено("presentation") Тогда
				Приемник[ИмяРеквизита + "Представление"] = Источник.objectId.presentation;
			КонецЕсли;
		Исключение
			// Старая версия сервиса, представление ссылки не заполняется
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

//Заполняет объект XDTO (приемник) по объектному реквизиту (источник)
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Источник - объект, содержащий реквизиты или свойства, по которым заполняется объект XDTO
//	ИмяРеквизита - имя объектного реквизита источника
//	Приемник - объект XDTO, содержащий заполняемое свойство
//	ТипОбъектаXDTO - тип XDTO заполняемого свойства
//	ЗаполнятьВсегда - признак заполнения, даже если объектный реквизит не заполнен
Процедура ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Источник, ИмяРеквизита, Приемник, ТипОбъектаXDTO, ЗаполнятьВсегда = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(Источник[ИмяРеквизита]) ИЛИ ЗаполнятьВсегда Тогда
		Приемник = СоздатьОбъект(Прокси, ТипОбъектаXDTO);
		Приемник.name = Источник[ИмяРеквизита];
		Приемник.objectId = СоздатьОбъект(Прокси, "DMObjectID");
		Приемник.objectId.id = Источник[ИмяРеквизита + "ID"];
		Приемник.objectId.type = Источник[ИмяРеквизита + "Тип"];
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость группы информации о недоступности функционала версии веб-сервиса
//Параметры:
//	Форма - управляемая форма объекта или списка 1С:Документооборота
Процедура ОбработатьФормуПриНедоступностиФункционалаВерсииСервиса(Форма) Экспорт
	
	Форма.Элементы.ГруппаФункционалНеПоддерживается.Видимость = Истина;
	Форма.Элементы.ДекорацияФункционалНеПоддерживается.Заголовок = 
		НСтр("ru='Функционал не поддерживается в данной версии 1С:Документооборота.'");
		
	Форма.ТолькоПросмотр = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Заполняет группу реквизитов формы по объекту XDTO
//Параметры:
//	Форма - форма, реквизиты которой нужно заполнить
//	ИмяРеквизита - имя основного реквизита группы заполняемых реквизитов
//	ОбъектXDTO - объект XDTO, из которого заполняются реквизиты формы
//	ИмяСвойстваОбъекта - имя свойства объекта XDTO, из которого будут заполнены реквизиты формы
Процедура ЗаполнитьОбъектныйРеквизитФормы(Форма, ИмяРеквизита, ОбъектXDTO, ИмяСвойстваОбъекта)
	
	Если ОбъектXDTO.Установлено(ИмяСвойстваОбъекта) И ЗначениеЗаполнено(ОбъектXDTO[ИмяСвойстваОбъекта].name) Тогда
		Если ОбъектXDTO[ИмяСвойстваОбъекта].objectId.Свойства().Получить("presentation") <> Неопределено Тогда
			ИмяОбъекта = ОбъектXDTO[ИмяСвойстваОбъекта].objectId.presentation;
			Если НЕ ЗначениеЗаполнено(ИмяОбъекта) Тогда
				ИмяОбъекта = ОбъектXDTO[ИмяСвойстваОбъекта].name;
			КонецЕсли;
		Иначе
			ИмяОбъекта = ОбъектXDTO[ИмяСвойстваОбъекта].name;
		КонецЕсли;
		Форма[ИмяРеквизита] = ИмяОбъекта;
		Форма[ИмяРеквизита + "ID"] = ОбъектXDTO[ИмяСвойстваОбъекта].objectId.id;
		Форма[ИмяРеквизита + "Тип"] = ОбъектXDTO[ИмяСвойстваОбъекта].objectId.type;
	КонецЕсли;
	
КонецПроцедуры

//Заполняет структуру документа по объекту потребителю
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	ВнешнийОбъект - ссылка на объект потребителя
//	СтруктураДокумента - заполняемая структура документа
//	СоответствиеРеквизитов - структура соответствий реквизитов документа реквизитам объекта потребителя
Процедура ЗаполнитьСтруктуруДокументаИзПотребителя(Прокси, ВнешнийОбъект, СтруктураДокумента, СоответствиеРеквизитов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка
	|ИЗ
	|	Справочник.НастройкиЗаполненияОбъектов1СДокументооборота
	|ГДЕ
	|	ТипОбъектаПотребителя = &ТипОбъектаПотребителя
	|	И ТипОбъектаДокументооборота = &ТипОбъектаДокументооборота
	|	И Не ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ТипОбъектаПотребителя", ВнешнийОбъект.Метаданные().ПолноеИмя());
	Запрос.УстановитьПараметр("ТипОбъектаДокументооборота", СтруктураДокумента.Тип);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда 
		СтруктураДокумента["ЗаголовокДокумента"] = Строка(ВнешнийОбъект);
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	НастройкаЗаполнения = Выборка.Ссылка;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИмяРеквизитаОбъектаДокументооборота", "documentType");
	ПараметрыОтбора.Вставить("ВариантПравилаЗаполненияРеквизитов", Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзУказанногоЗначения);
	ПараметрыОтбора.Вставить("ДополнительныйРеквизит", Ложь);
	
	СтрокиВидДокумента = НастройкаЗаполнения.ПравилаЗаполненияРеквизитов.НайтиСтроки(ПараметрыОтбора);
	Если СтрокиВидДокумента.Количество() > 0 Тогда 
		СтрокаВидДокумента = СтрокиВидДокумента[0];
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("documentType",
			Новый Структура("id, type, name", 
			СтрокаВидДокумента.ИдентификаторЗначенияРеквизита,
			СтрокаВидДокумента.ТипЗначенияРеквизита,
			СтрокаВидДокумента.ЗначениеРеквизитаДокументооборота));
		
		Реквизиты = Справочники.НастройкиЗаполненияОбъектов1СДокументооборота.
			ПолучитьРеквизитыОбъектаДокументооборота(НастройкаЗаполнения.ТипОбъектаДокументооборота, ПараметрыЗаполнения);
		
	Иначе
		
		Реквизиты = Справочники.НастройкиЗаполненияОбъектов1СДокументооборота.
			ПолучитьРеквизитыОбъектаДокументооборота(НастройкаЗаполнения.ТипОбъектаДокументооборота);
		
	КонецЕсли;
		
	Для Каждого Реквизит Из Реквизиты Цикл
		
		Если Не Реквизит.ДопРеквизит Тогда 
			ПараметрыОтбора = Новый Структура("ДополнительныйРеквизит, ИмяРеквизитаОбъектаДокументооборота", Ложь, Реквизит.Имя);
		Иначе
			ПараметрыОтбора = Новый Структура("ДополнительныйРеквизит, ДополнительныйРеквизитID, ДополнительныйРеквизитТип",
				Истина, Реквизит.ДопРеквизитID, Реквизит.ДопРеквизитТип);
		КонецЕсли;
		
		НайденныеСтроки = НастройкаЗаполнения.ПравилаЗаполненияРеквизитов.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		НайденнаяСтрока = НайденныеСтроки[0];
		
		Если Не Реквизит.ДопРеквизит Тогда 
			
			РеквизитСтруктуры = СоответствиеРеквизитов[Реквизит.Имя];
			ТипРеквизита = Реквизит.Тип[0].Значение;
			
			Если НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзРеквизитаОбъектаПотребителя Тогда 
				
				ИмяРеквизитаОбъектаПотребителя = НайденнаяСтрока.ИмяРеквизитаОбъектаПотребителя;
				Если ИмяРеквизитаОбъектаПотребителя = "Представление" Тогда 
					Результат = Строка(ВнешнийОбъект);
				ИначеЕсли Найти(ИмяРеквизитаОбъектаПотребителя, ".") > 0 Тогда 
					Запрос = новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ ВнешнийОбъект.Объект."+ИмяРеквизитаОбъектаПотребителя+" КАК Значение 
					|ИЗ (ВЫБРАТЬ &ВнешнийОбъект КАК Объект) КАК ВнешнийОбъект";
					Запрос.УстановитьПараметр("ВнешнийОбъект",ВнешнийОбъект);
					Результат = Запрос.Выполнить().Выгрузить()[0].Значение;
				Иначе
					Результат = ВнешнийОбъект[ИмяРеквизитаОбъектаПотребителя];
				КонецЕсли;
				
				Если ТипРеквизита = "Строка" Или ТипРеквизита = "Дата" Или ТипРеквизита = "Число" 
						Или ТипРеквизита = "ДатаВремя" Или ТипРеквизита = "Булево" Тогда 
					СтруктураДокумента[РеквизитСтруктуры] = Результат;
					
				ИначеЕсли ЗначениеЗаполнено(Результат) Тогда 
					СтруктураДокумента[РеквизитСтруктуры] = Строка(Результат);
					Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Результат) Тогда 
						СтруктураДокумента[РеквизитСтруктуры + "ID"] = Строка(Результат.УникальныйИдентификатор());
						СтруктураДокумента[РеквизитСтруктуры + "Тип"] = Результат.Метаданные().ПолноеИмя();
					Иначе
						СтруктураДокумента[РеквизитСтруктуры + "Тип"] = "Строка";
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзУказанногоЗначения Тогда
				
				Если ТипРеквизита = "Строка" Или ТипРеквизита = "Дата" Или ТипРеквизита = "Число" 
						Или ТипРеквизита = "ДатаВремя" Или ТипРеквизита = "Булево" Тогда 
					СтруктураДокумента[РеквизитСтруктуры] = НайденнаяСтрока.ЗначениеРеквизитаДокументооборота;
				Иначе
					СтруктураДокумента[РеквизитСтруктуры] = НайденнаяСтрока.ЗначениеРеквизитаДокументооборота;
					СтруктураДокумента[РеквизитСтруктуры + "ID"]  = НайденнаяСтрока.ИдентификаторЗначенияРеквизита;
					СтруктураДокумента[РеквизитСтруктуры + "Тип"] = НайденнаяСтрока.ТипЗначенияРеквизита;
				КонецЕсли;
				
			ИначеЕсли НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзВыраженияНаВстроенномЯзыке И НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
				
				Источник = ВнешнийОбъект;
				Результат = Неопределено;
				
				// Метод не будет выполнен при работе в модели сервиса.
				Выполнить(НайденнаяСтрока.ВычисляемоеВыражение);
				
				Если ТипРеквизита = "Строка" Или ТипРеквизита = "Дата" Или ТипРеквизита = 
					"Число" Или ТипРеквизита = "ДатаВремя" Или ТипРеквизита = "Булево" Тогда 
					СтруктураДокумента[РеквизитСтруктуры] = Результат;
					
				ИначеЕсли ЗначениеЗаполнено(Результат) Тогда 
					СтруктураДокумента[РеквизитСтруктуры] = Строка(Результат);
					Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Результат) Тогда 
						СтруктураДокумента[РеквизитСтруктуры + "ID"] = Строка(Результат.УникальныйИдентификатор());
						СтруктураДокумента[РеквизитСтруктуры + "Тип"] = Результат.Метаданные().ПолноеИмя();
					Иначе
						СтруктураДокумента[РеквизитСтруктуры + "Тип"] = "Строка";
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТипРеквизита = Реквизит.Тип[0].Значение;
			СтрокаДопРеквизита = СтруктураДокумента.Свойства.Добавить();
			СтрокаДопРеквизита.СвойствоТип = Реквизит.ДопРеквизитТип;
			СтрокаДопРеквизита.СвойствоID = Реквизит.ДопРеквизитID;
			СтрокаДопРеквизита.Свойство = "";
			Для каждого Тип Из Реквизит.Тип Цикл
				ДанныеОТипе = Новый Структура("xdtoClassName, presentation");
				ДанныеОТипе.xdtoClassName = Тип.Значение;
				ДанныеОТипе.presentation = Тип.Представление;
				СтрокаДопРеквизита.СписокДоступныхТипов.Добавить(ДанныеОТипе);
			КонецЦикла;
			
			Если НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзРеквизитаОбъектаПотребителя Тогда 
				
				ИмяРеквизитаОбъектаПотребителя = НайденнаяСтрока.ИмяРеквизитаОбъектаПотребителя;
				Если ИмяРеквизитаОбъектаПотребителя = "Представление" Тогда 
					Результат = Строка(ВнешнийОбъект);
				ИначеЕсли Найти(ИмяРеквизитаОбъектаПотребителя, ".") > 0 Тогда 
					Запрос = новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ ВнешнийОбъект.Объект."+ИмяРеквизитаОбъектаПотребителя+" КАК Значение 
					|ИЗ (ВЫБРАТЬ &ВнешнийОбъект КАК Объект) КАК ВнешнийОбъект";
					Запрос.УстановитьПараметр("ВнешнийОбъект",ВнешнийОбъект);
					Результат = Запрос.Выполнить().Выгрузить()[0].Значение;
				Иначе
					Результат = ВнешнийОбъект[ИмяРеквизитаОбъектаПотребителя];
				КонецЕсли;
				
				Если ТипРеквизита = "Строка" Или ТипРеквизита = "Дата" Или ТипРеквизита = 
					"Число" Или ТипРеквизита = "ДатаВремя" Или ТипРеквизита = "Булево" Тогда 
					СтрокаДопРеквизита["Значение"] = Результат;
					
				ИначеЕсли ЗначениеЗаполнено(Результат) Тогда 
					СтрокаДопРеквизита["Значение"] = Строка(Результат);
					Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Результат) Тогда 
						СтрокаДопРеквизита["ЗначениеID"] = Строка(Результат.УникальныйИдентификатор());
						СтрокаДопРеквизита["ЗначениеТип"] = Результат.Метаданные().ПолноеИмя();
					Иначе
						СтрокаДопРеквизита["ЗначениеТип"] = "Строка";
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзУказанногоЗначения Тогда
				
				СтрокаДопРеквизита["Значение"] = НайденнаяСтрока.ЗначениеРеквизитаДокументооборота;
				СтрокаДопРеквизита["ЗначениеID"]  = НайденнаяСтрока.ИдентификаторЗначенияРеквизита;
				СтрокаДопРеквизита["ЗначениеТип"] = НайденнаяСтрока.ТипЗначенияРеквизита;
				
			ИначеЕсли НайденнаяСтрока.ВариантПравилаЗаполненияРеквизитов = 
				Перечисления.ВариантыПравилЗаполненияРеквизитов.ИзВыраженияНаВстроенномЯзыке И НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
				
				Источник = ВнешнийОбъект;
				Результат = Неопределено;
				
				// Метод не будет выполнен при работе в модели сервиса.
				Выполнить(НайденнаяСтрока.ВычисляемоеВыражение);
				
				Если ТипРеквизита = "Строка" Или ТипРеквизита = "Дата" Или ТипРеквизита = "Число" 
					Или ТипРеквизита = "ДатаВремя" Или ТипРеквизита = "Булево" Тогда 
					СтрокаДопРеквизита["Значение"] = Результат;
					
				ИначеЕсли ЗначениеЗаполнено(Результат) Тогда 
					СтрокаДопРеквизита["Значение"] = Строка(Результат);
					Если ИнтеграцияС1СДокументооборот.ЕстьУникальныйИдентификатор(Результат) Тогда 
						СтрокаДопРеквизита["ЗначениеID"] = Строка(Результат.УникальныйИдентификатор());
						СтрокаДопРеквизита["ЗначениеТип"] = Результат.Метаданные().ПолноеИмя();
					Иначе	
						СтрокаДопРеквизита["ЗначениеТип"] = "Строка";
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Обработаем печатные формы
	МенеджерыПечати = НастройкаЗаполнения.ПрисоединяемыеПечатныеФормы.Выгрузить();
	МенеджерыПечати.Свернуть("МенеджерПечати");
	МенеджерыПечати = МенеджерыПечати.ВыгрузитьКолонку("МенеджерПечати");
	
	Для каждого МенеджерПечати из МенеджерыПечати Цикл
		
		МакетыМенеджера = НастройкаЗаполнения.ПрисоединяемыеПечатныеФормы.НайтиСтроки(
			новый Структура("МенеджерПечати",МенеджерПечати));
		ИменаМакетов = "";
		
		Для каждого КомандаМенеджера из МакетыМенеджера Цикл
			
			КоллекцияПечатныхФорм = неопределено;
			
			ИнтеграцияС1СДокументооборотПереопределяемый.ЗаполнитьПечатныеФормы(
				ВнешнийОбъект, МенеджерПечати, КомандаМенеджера, КоллекцияПечатныхФорм);
			
			ФорматФайлов = ОбщегоНазначения.ИмяЗначенияПеречисления(НастройкаЗаполнения.ТипФайловСохраненияПечатныхФорм);
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			
			Для каждого ПечатнаяФорма из КоллекцияПечатныхФорм Цикл
				Если ПечатнаяФорма.ТабличныйДокумент <> Неопределено 
					И ПечатнаяФорма.ТабличныйДокумент.КоличествоСтраниц() > 0 Тогда
					
					ПечатнаяФорма.ТабличныйДокумент.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента[ФорматФайлов]);
					Файл = новый Файл(ИмяВременногоФайла);
					
					СтрокаФайлов = СтруктураДокумента.Файлы.Добавить();
					СтрокаФайлов.Расширение = НРег(ФорматФайлов);
					СтрокаФайлов.ДатаСоздания = Файл.ПолучитьВремяИзменения();
					СтрокаФайлов.ДатаМодификацииУниверсальная = Файл.ПолучитьУниверсальноеВремяИзменения();
					СтрокаФайлов.Размер = Файл.Размер();
					Файл = Неопределено;
					
					СтрокаФайлов.ДвоичныеДанные = новый ДвоичныеДанные(ИмяВременногоФайла);

					ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='%1 №%2 от %3'"),
						Строка(?(ЗначениеЗаполнено(ПечатнаяФорма.СинонимМакета),ПечатнаяФорма.СинонимМакета,ПечатнаяФорма.ИмяМакета)),
						Строка(ВнешнийОбъект.Номер),
						Формат(ВнешнийОбъект.Дата,"ДЛФ=D")); 
					ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла," ");
					СтрокаФайлов.Наименование = ИмяФайла;
				КонецЕсли;
			КонецЦикла
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

//Возвращает структуру документа документооборота по типу XDTO документа
//Параметры:
//	ТипДокумента - тип документа XDTO
//Возвращает:
//	Структуру с полями документа указанного типа
Функция ПолучитьСтруктуруДокумента(ТипДокумента)
	
	СтруктураДокумента = новый Структура; // содержит полную структуру документа с простыми и объектыми типами
	
	СтруктураДокумента.Вставить("ID","");
	СтруктураДокумента.Вставить("Тип",ТипДокумента);
	
	// Реквизиты, общие для всех документов
	СтруктураДокумента.Вставить("ЗаголовокДокумента", "");
	СтруктураДокумента.Вставить("Описание", "");
	СтруктураДокумента.Вставить("Комментарий", "");
	СтруктураДокумента.Вставить("РегистрационныйНомер", "");
	СтруктураДокумента.Вставить("ДатаРегистрации", '00010101');
	СтруктураДокумента.Вставить("СрокИсполнения", '00010101');
	СтруктураДокумента.Вставить("Сумма", 0);
	
	ОбъектнаяСтруктура = новый Структура; // для описания объектных типов
	ОбъектнаяСтруктура.Вставить("Подписал", "");
	ОбъектнаяСтруктура.Вставить("Подразделение", "");
	ОбъектнаяСтруктура.Вставить("ГрифДоступа", "");
	ОбъектнаяСтруктура.Вставить("ВидДокумента", "");
	ОбъектнаяСтруктура.Вставить("ВопросДеятельности", "");
	ОбъектнаяСтруктура.Вставить("Организация", "");
	ОбъектнаяСтруктура.Вставить("Ответственный", "");
	ОбъектнаяСтруктура.Вставить("Состояние", "");
	ОбъектнаяСтруктура.Вставить("Валюта", "");
	
	Если ТипДокумента = "DMInternalDocument" Тогда 
		
		// Реквизиты значений простых типов
		СтруктураДокумента.Вставить("ДатаНачалаДействия", '00010101');
		СтруктураДокумента.Вставить("ДатаОкончанияДействия", '00010101');
		СтруктураДокумента.Вставить("Бессрочный", Истина);
		
		// Реквизиты значений объектных типов
		ОбъектнаяСтруктура.Вставить("Папка", "");
		ОбъектнаяСтруктура.Вставить("Подготовил", "");
		ОбъектнаяСтруктура.Вставить("Корреспондент", "");
		ОбъектнаяСтруктура.Вставить("КонтактноеЛицо", "");
		ОбъектнаяСтруктура.Вставить("ПорядокПродления", "");
		
	ИначеЕсли ТипДокумента = "DMIncomingDocument" Тогда
		
		// Реквизиты значений простых типов
		СтруктураДокумента.Вставить("НомерОтправителя","");
		СтруктураДокумента.Вставить("ДатаОтправителя",'00010101');
		
		// Реквизиты значений объектных типов
		ОбъектнаяСтруктура.Вставить("Отправитель","");
		ОбъектнаяСтруктура.Вставить("Адресат","");
		ОбъектнаяСтруктура.Вставить("СпособПолучения","");
		
	ИначеЕсли ТипДокумента = "DMOutgoingDocument" Тогда 
		
		// Реквизиты значений простых типов
		СтруктураДокумента.Вставить("НомерПолучателя","");
		СтруктураДокумента.Вставить("ДатаПолучателя",'00010101');
		СтруктураДокумента.Вставить("Отправлен", Ложь);
		СтруктураДокумента.Вставить("ДатаОтправки",'00010101');
		
		// Реквизиты значений объектных типов
		ОбъектнаяСтруктура.Вставить("Получатель","");
		ОбъектнаяСтруктура.Вставить("Адресат","");
		ОбъектнаяСтруктура.Вставить("Подготовил","");
		ОбъектнаяСтруктура.Вставить("СпособОтправки","");
		
	КонецЕсли;
	
	Для каждого Элемент из ОбъектнаяСтруктура Цикл
		СтруктураДокумента.Вставить(Элемент.Ключ, Элемент.Значение);
		СтруктураДокумента.Вставить(Элемент.Ключ+"ID", Элемент.Значение);
		СтруктураДокумента.Вставить(Элемент.Ключ+"Тип", Элемент.Значение);
	КонецЦикла;
	
	ДополнительныеСвойства = новый ТаблицаЗначений;
	ДополнительныеСвойства.Колонки.Добавить("Свойство");
	ДополнительныеСвойства.Колонки.Добавить("СвойствоТип");
	ДополнительныеСвойства.Колонки.Добавить("СвойствоID");
	ДополнительныеСвойства.Колонки.Добавить("Значение");
	ДополнительныеСвойства.Колонки.Добавить("ЗначениеТип");
	ДополнительныеСвойства.Колонки.Добавить("ЗначениеID");
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СписокЗначений"));
	
	ДополнительныеСвойства.Колонки.Добавить("СписокДоступныхТипов",новый ОписаниеТипов(МассивТипов));
	
	СтруктураДокумента.Вставить("Свойства",ДополнительныеСвойства);
	
	Файлы = новый ТаблицаЗначений;
	Файлы.Колонки.Добавить("Тип");
	Файлы.Колонки.Добавить("Наименование");
	Файлы.Колонки.Добавить("Описание");
	Файлы.Колонки.Добавить("Автор");
	Файлы.Колонки.Добавить("ID");
	Файлы.Колонки.Добавить("Размер");
	Файлы.Колонки.Добавить("Расширение");
	Файлы.Колонки.Добавить("ДатаСоздания");
	Файлы.Колонки.Добавить("ДатаМодификацииУниверсальная");
	Файлы.Колонки.Добавить("ДвоичныеДанные");
	
	СтруктураДокумента.Вставить("Файлы",Файлы);
	
	Возврат СтруктураДокумента;
	
КонецФункции
