////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Процедуры внесения и выемки дс.

Функция СоздатьДокументВнесениеДенежныхСредствВКассуККМ(ВходныеДанные, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	Попытка
	
		НовыйДокумент = Документы.ВнесениеДенежныхСредствВКассуККМ.СоздатьДокумент();
		
		НовыйДокумент.Дата              = ВходныеДанные.Дата;
		НовыйДокумент.Организация       = ВходныеДанные.Организация;
		НовыйДокумент.Касса             = ВходныеДанные.Касса;
		НовыйДокумент.КассаККМ          = ВходныеДанные.КассаККМ;
		НовыйДокумент.СуммаДокумента    = ВходныеДанные.СуммаВнесения;
		НовыйДокумент.Валюта            = ВходныеДанные.Валюта;
		НовыйДокумент.ДокументОснование = ВходныеДанные.РасходныйКассовыйОрдер;
		НовыйДокумент.Кассир            = Пользователи.ТекущийПользователь();
		
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	Исключение
		
		Результат = Ложь;
		
		ОписаниеОшибки =ИнформацияОбОшибке().Описание;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(ВходныеДанные, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	Попытка
		
		НовыйДокумент = Документы.ВыемкаДенежныхСредствИзКассыККМ.СоздатьДокумент();
		
		Реквизиты = Справочники.КассыККМ.РеквизитыКассыККМ(ВходныеДанные.КассаККМ);
		
		НовыйДокумент.Дата           = ВходныеДанные.Дата;
		НовыйДокумент.Организация    = Реквизиты.Организация;
		НовыйДокумент.Валюта         = Реквизиты.Валюта;
		НовыйДокумент.КассаККМ       = ВходныеДанные.КассаККМ;
		НовыйДокумент.СуммаДокумента = ВходныеДанные.СуммаВнесения;
		НовыйДокумент.Кассир         = Пользователи.ТекущийПользователь();
		
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		
		Результат = Ложь;
		
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее.

Функция ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(ЧекККМ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка КАК ДокументРеализации
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО ЧекККМ.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЧекККМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокументРеализации;
	Иначе
		Возврат Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания.

// Процедура выполняет архивирование чеков ККМ с регистрацией события в журнале регистрации.
// Вызывается регламентным заданием.
//
Процедура АрхивированиеЧековККМ() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Архивирование чеков ККМ'"),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru = 'Начато регламентное архивирование чеков ККМ.'"));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассоваяСмена.Ссылка КАК КассоваяСмена
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.СтатусКассовойСмены = &СтатусКассовойСмены
	|	И КассоваяСмена.КассаККМ.ТипКассы = &ТипКассыФискальныйРегистратор";
	
	Запрос.УстановитьПараметр("СтатусКассовойСмены", Перечисления.СтатусыКассовойСмены.Закрыта);
	Запрос.УстановитьПараметр("ТипКассыФискальныйРегистратор", Перечисления.ТипыКассККМ.ФискальныйРегистратор);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОписаниеОшибки = "";
		АрхивацияВыполнена = ВыполнитьАрхивациюЧековККМ(Выборка.КассоваяСмена, ОписаниеОшибки);
		Если НЕ АрхивацияВыполнена Тогда
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Архивирование чеков ККМ'"),
			                         УровеньЖурналаРегистрации.Ошибка, , ,
			                         НСтр("ru = 'Во время регламентного архивирования чеков ККМ произошла ошибка.'")
			                         + Символы.ПС + ОписаниеОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Архивирование чеков ККМ'"),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru = 'Закончено регламентное архивирование чеков ККМ.'"));
	
КонецПроцедуры // АрхивированиеЧековККМ()

// Процедура выполняет архивирование чеков ККМ с регистрацией события в журнале регистрации.
// Вызывается регламентным заданием.
//
Процедура УдалениеОтложенныхЧековККМ() Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление отложенных чеков ККМ'"),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru = 'Начато регламентное удаление отложенных чеков ККМ.'"));
	
	НачатьТранзакцию();
	
	Выборка = ВыбратьОтложенныеЧекиККМДляУдаления();
	Пока Выборка.Следующий() Цикл
		
		ОписаниеОшибки = "";
		
		Попытка
			
			ЧекККМОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЧекККМОбъект.Удалить();
		
		Исключение
			
			ОтменитьТранзакцию();
			
			Результат = Ложь;
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление отложенных чеков ККМ'"),
			                         УровеньЖурналаРегистрации.Ошибка, , ,
			                         НСтр("ru = 'Во время регламентного удаления отложенных чеков ККМ произошла ошибка.'")
			                         + Символы.ПС + ОписаниеОшибки);
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление отложенных чеков ККМ'"),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru = 'Закончено регламентное удаление отложенных чеков ККМ.'"));
	
КонецПроцедуры

// Функция выполняет архивацию чеков ККМ по кассовой смене.
//
Функция ВыполнитьАрхивациюЧековККМ(КассоваяСмена, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос(
	"
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	НЕ ЧекККМ.Архивный
	|	И ЧекККМ.Проведен
	|	И ЧекККМ.НомерЧекаККМ > 0
	|	И ЧекККМ.КассоваяСмена = &КассоваяСмена
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	НЕ ЧекККМВозврат.Архивный
	|	И ЧекККМВозврат.Проведен
	|	И ЧекККМВозврат.НомерЧекаККМ > 0
	|	И ЧекККМВозврат.КассоваяСмена = &КассоваяСмена
	|");
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	ВыборкаЧековККМ = Запрос.Выполнить().Выбрать();
	
	Попытка
		
		// Первый этап. Статус смены - Закрыта, чеки заархивированы.
		КассоваяСменаОбъект = КассоваяСмена.ПолучитьОбъект();
		КассоваяСменаОбъект.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.ЗакрытаЧекиЗаархивированы;
		КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		// Второй этап. Архивирование чеков.
		Пока ВыборкаЧековККМ.Следующий() Цикл
			ЧекККМОбъект = ВыборкаЧековККМ.Ссылка.ПолучитьОбъект();
			ЧекККМОбъект.Архивный = Истина;
			ЧекККМОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;
		
		// Третий этап. Полное проведение отчета о розничных продажах.
		ОтчетОРозничныхПродажах = НайтиОтчетОРозничныхПродажах(КассоваяСмена);
		Если ОтчетОРозничныхПродажах <> Неопределено Тогда
			ОтчетОРозничныхПродажахОбъект = ОтчетОРозничныхПродажах.ПолучитьОбъект();
			ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ВызватьИсключение НСтр("ru = 'По кассовой смене не создан Отчет о розничных продажах'");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Результат = Ложь;
		
		ОписаниеОшибки = НСтр("ru = 'При архивации чеков ККМ произошла ошибка.
		                      |Архивация чеков ККМ не выполнена.
		                      |Дополнительное описание:
		                      |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ВыполнитьАрхивациюЧековККМ()

////////////////////////////////////////////////////////////////////////////////
// Процедуры открытия и закрытия кассовой смены.

// Функция выполняет открытие кассовой смены.
//
Функция ОткрытьКассовуюСмену(КассаККМ, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	ДатаОткрытияКассовойСмены = ТекущаяДата();
	
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
		Если ДатаОткрытияКассовойСмены - СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса < 86400 Тогда
			
			// Все в порядке
			
		Иначе
			
			Результат = Ложь;
			// Вероятно, что смена была не закрыта.
			ОписаниеОшибки = НСтр("ru = 'С момента открытия кассовой смены истекло более 24 часов. Необходимо выполнить закрытие кассовой смены.'");
			
		КонецЕсли;
		
	Иначе
		
		// Смена закрыта. Откроем новую кассовую смену.
		
		НоваяКассоваяСмена = Документы.КассоваяСмена.СоздатьДокумент();
		НоваяКассоваяСмена.Заполнить(Новый Структура("КассаККМ", КассаККМ));
		
		НоваяКассоваяСмена.Дата                   = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.СтатусКассовойСмены    = Перечисления.СтатусыКассовойСмены.Открыта;
		НоваяКассоваяСмена.НачалоКассовойСмены    = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.ОкончаниеКассовойСмены = '00010101';
		НоваяКассоваяСмена.Кассир                 = Пользователи.ТекущийПользователь();
		
		Если НоваяКассоваяСмена.ПроверитьЗаполнение() Тогда
			НоваяКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			Результат = Ложь;
			ОписаниеОшибки = ПолучитьТекстОшибкиЗаполненияОтчета();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОткрытьКассовуюСмену()

// Процедура выполняет закрытие кассовой смены.
//
Функция ЗакрытьКассовуюСмену(КассаККМ, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		КассоваяСменаОбъект = СтруктураСостояниеКассовойСмены.КассоваяСмена.ПолучитьОбъект();
		КассоваяСменаОбъект.Дата                   = ТекущаяДата();
		КассоваяСменаОбъект.СтатусКассовойСмены    = Перечисления.СтатусыКассовойСмены.Закрыта;
		КассоваяСменаОбъект.ОкончаниеКассовойСмены = КассоваяСменаОбъект.Дата;
		Попытка
			КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			
			Результат = Ложь;
			
			ОписаниеОшибки = НСтр("ru = 'При закрытии кассовой смены произошла ошибка.
			                            |Дополнительное описание:
			                            |%ДополнительноеОписание%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
			
		КонецПопытки;
		
	Иначе
		
		// Смена не открыта.
		
	КонецЕсли;
	
	Возврат ?(Результат, СтруктураСостояниеКассовойСмены.КассоваяСмена, Неопределено);
	
КонецФункции // ЗакрытьКассовуюСмену()

// Функция выполняет заполнение Отчета о розничных продажах по кассовой смене.
//
Функция ЗаполнитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Поиск отчета о розничных продажах
	ОтчетОРозничныхПродажах = НайтиОтчетОРозничныхПродажах(КассоваяСмена);
	Если ОтчетОРозничныхПродажах = Неопределено Тогда
		ОтчетОРозничныхПродажахОбъект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	Иначе
		ОтчетОРозничныхПродажахОбъект = ОтчетОРозничныхПродажах.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат ЗаполнитьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажахОбъект, КассоваяСмена, ОписаниеОшибки);
	
КонецФункции // ВыполнитьАрхивациюЧековККМ()

// Функция выполняет заполнение Отчета о розничных продажах по кассовой смене.
//
Функция ЗаполнитьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажахОбъект, КассоваяСмена, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение отчета о розничных продажах
	Попытка
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		// Подготовка данных.
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЧекККМТовары.Ссылка                    КАК Ссылка,
		|	ЧекККМТовары.КлючСвязи                 КАК КлючСвязи,
		|	ЧекККМТовары.Номенклатура              КАК Номенклатура,
		|	ЧекККМТовары.Характеристика            КАК Характеристика,
		|	ЧекККМТовары.Упаковка                  КАК Упаковка,
		|	ВЫРАЗИТЬ(ВЫБОР
		|		КОГДА
		|			ЧекККМТовары.СуммаРучнойСкидки + ЧекККМТовары.СуммаАвтоматическойСкидки = 0
		|			ИЛИ ЧекККМТовары.КоличествоУпаковок = 0
		|		ТОГДА
		|			ЧекККМТовары.Цена
		|		ИНАЧЕ
		|			ЧекККМТовары.Сумма / ЧекККМТовары.КоличествоУпаковок
		|	КОНЕЦ КАК Число(15,2)) КАК Цена,
		|	ЧекККМТовары.СтавкаНДС                 КАК СтавкаНДС,
		|	ЧекККМТовары.КоличествоУпаковок        КАК КоличествоУпаковок,
		|	ЧекККМТовары.Количество                КАК Количество,
		|	ЧекККМТовары.Сумма                     КАК Сумма,
		|	ЧекККМТовары.СуммаНДС                  КАК СуммаНДС,
		|	ЧекККМТовары.Ссылка.Склад              КАК Склад,
		|	ЧекККМТовары.Ссылка.Партнер            КАК Партнер,
		|	ЧекККМТовары.Ссылка.Валюта             КАК Валюта,
		|	ЧекККМТовары.Ссылка.ВидЦены            КАК ВидЦены,
		|	ЧекККМТовары.Ссылка.КассаККМ           КАК КассаККМ,
		|	ЧекККМТовары.Ссылка.Организация        КАК Организация,
		|	ЧекККМТовары.Ссылка.НалогообложениеНДС КАК НалогообложениеНДС
		|	
		|ПОМЕСТИТЬ Товары
		|	
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|ГДЕ
		|	ЧекККМТовары.Ссылка.КассоваяСмена = &КассоваяСмена
		|	И ЧекККМТовары.Ссылка.Проведен
		|	И ЧекККМТовары.Ссылка.НомерЧекаККМ > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМТовары.Ссылка,
		|	0,
		|	ЧекККМТовары.Номенклатура,
		|	ЧекККМТовары.Характеристика,
		|	ЧекККМТовары.Упаковка,
		|	ЧекККМТовары.Цена,
		|	ЧекККМТовары.СтавкаНДС,
		|	-ЧекККМТовары.КоличествоУпаковок,
		|	-ЧекККМТовары.Количество,
		|	-ЧекККМТовары.Сумма,
		|	-ЧекККМТовары.СуммаНДС,
		|	ЧекККМТовары.Ссылка.Склад,
		|	ЧекККМТовары.Ссылка.Партнер,
		|	ЧекККМТовары.Ссылка.Валюта,
		|	ЧекККМТовары.Ссылка.ВидЦены,
		|	ЧекККМТовары.Ссылка.КассаККМ,
		|	ЧекККМТовары.Ссылка.Организация,
		|	ЧекККМТовары.Ссылка.НалогообложениеНДС
		|ИЗ
		|	Документ.ЧекККМВозврат.Товары КАК ЧекККМТовары
		|ГДЕ
		|	ЧекККМТовары.Ссылка.КассоваяСмена = &КассоваяСмена
		|	И ЧекККМТовары.Ссылка.Проведен
		|	И ЧекККМТовары.Ссылка.НомерЧекаККМ > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМТовары.Ссылка             КАК Ссылка,
		|	ЧекККМТовары.Номенклатура       КАК Номенклатура,
		|	ЧекККМТовары.Характеристика     КАК Характеристика,
		|	ЧекККМТовары.Упаковка           КАК Упаковка,
		|	ЧекККМТовары.Цена               КАК Цена,
		|	ЧекККМТовары.СтавкаНДС          КАК СтавкаНДС,
		|	ЧекККМТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЧекККМТовары.Количество         КАК Количество,
		|	ЧекККМТовары.Сумма              КАК Сумма,
		|	ЧекККМТовары.СуммаНДС           КАК СуммаНДС,
		|	ЧекККМТовары.Склад              КАК Склад,
		|	ЧекККМТовары.Партнер            КАК Партнер,
		|	ЧекККМТовары.Валюта             КАК Валюта,
		|	ЧекККМТовары.ВидЦены            КАК ВидЦены,
		|	ЧекККМТовары.КассаККМ           КАК КассаККМ,
		|	ЧекККМТовары.Организация        КАК Организация,
		|	ЧекККМТовары.НалогообложениеНДС КАК НалогообложениеНДС
		|	
		|ПОМЕСТИТЬ СписокТоваров
		|ИЗ
		|	Товары КАК ЧекККМТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокТоваров.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ЧекиККМ
		|ИЗ
		|	СписокТоваров КАК СписокТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекиККМ.Ссылка КАК Ссылка
		|ИЗ
		|	ЧекиККМ КАК ЧекиККМ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокТоваров.Валюта КАК Валюта,
		|	СписокТоваров.ВидЦены КАК ВидЦены,
		|	СписокТоваров.КассаККМ КАК КассаККМ,
		|	СписокТоваров.Организация КАК Организация,
		|	СписокТоваров.НалогообложениеНДС КАК НалогообложениеНДС,
		|	СписокТоваров.Склад КАК Склад
		|ИЗ
		|	СписокТоваров КАК СписокТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокТоваров.Номенклатура КАК Номенклатура,
		|	СписокТоваров.Характеристика КАК Характеристика,
		|	СписокТоваров.Упаковка КАК Упаковка,
		|	СписокТоваров.Цена КАК Цена,
		|	СписокТоваров.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	СписокТоваров КАК СписокТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КассоваяСмена.ОкончаниеКассовойСмены КАК ОкончаниеКассовойСмены
		|Из
		|	Документ.КассоваяСмена КАК КассоваяСмена
		|ГДЕ КассоваяСмена.Ссылка = &КассоваяСмена
		|";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Формирование таблиц индексов по аналитике и номенклатуре
		ТаблицаИндексовПоАналитике = МассивРезультатов[4].Выгрузить();
		ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаИндексовПоАналитике,"Индекс");
		
		ТаблицаИндексовПоНоменклатуре = МассивРезультатов[5].Выгрузить();
		ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаИндексовПоНоменклатуре,"Индекс");
		
		ВыборкаРеквизитыКассовойСмены = МассивРезультатов[6].Выбрать();
		ВыборкаРеквизитыКассовойСмены.Следующий();
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаИндексов.Индекс КАК ИндексПоАналитике,
		|	ТаблицаИндексов.Валюта КАК Валюта,
		|	ТаблицаИндексов.ВидЦены КАК ВидЦены,
		|	ТаблицаИндексов.КассаККМ КАК КассаККМ,
		|	ТаблицаИндексов.Организация КАК Организация,
		|	ТаблицаИндексов.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ТаблицаИндексов.Склад КАК Склад
		|ПОМЕСТИТЬ ИндексыПоАналитике
		|ИЗ
		|	&ТаблицаИндексовПоАналитике КАК ТаблицаИндексов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта,
		|	ВидЦены,
		|	КассаККМ,
		|	Организация,
		|	НалогообложениеНДС,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИндексов.Индекс КАК ИндексПоНоменклатуре,
		|	ТаблицаИндексов.Номенклатура КАК Номенклатура,
		|	ТаблицаИндексов.Характеристика КАК Характеристика,
		|	ТаблицаИндексов.Упаковка КАК Упаковка,
		|	ТаблицаИндексов.Цена КАК Цена,
		|	ТаблицаИндексов.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ИндексыПоНоменклатуре
		|ИЗ
		|	&ТаблицаИндексовПоНоменклатуре КАК ТаблицаИндексов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Упаковка,
		|	Цена,
		|	СтавкаНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокТоваров.Номенклатура КАК Номенклатура,
		|	СписокТоваров.Характеристика КАК Характеристика,
		|	СписокТоваров.Упаковка КАК Упаковка,
		|	СписокТоваров.Цена КАК Цена,
		|	СписокТоваров.Партнер КАК Партнер,
		|	СписокТоваров.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(СписокТоваров.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(СписокТоваров.Количество) КАК Количество,
		|	СУММА(СписокТоваров.Сумма) КАК Сумма,
		|	СУММА(СписокТоваров.СуммаНДС) КАК СуммаНДС,
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике,
		|	ИндексыПоНоменклатуре.ИндексПоНоменклатуре КАК ИндексПоНоменклатуре,
		|	СписокТоваров.Склад КАК Склад,
		|	СписокТоваров.Валюта КАК Валюта,
		|	СписокТоваров.ВидЦены КАК ВидЦены,
		|	СписокТоваров.КассаККМ КАК КассаККМ,
		|	СписокТоваров.Организация КАК Организация,
		|	СписокТоваров.НалогообложениеНДС КАК НалогообложениеНДС
		|ИЗ
		|	(ВЫБРАТЬ
		|		СписокТоваров.Номенклатура КАК Номенклатура,
		|		СписокТоваров.Характеристика КАК Характеристика,
		|		СписокТоваров.Упаковка КАК Упаковка,
		|		СписокТоваров.Цена КАК Цена,
		|		СписокТоваров.Партнер КАК Партнер,
		|		СписокТоваров.СтавкаНДС КАК СтавкаНДС,
		|		СписокТоваров.КоличествоУпаковок КАК КоличествоУпаковок,
		|		СписокТоваров.Количество КАК Количество,
		|		СписокТоваров.Сумма КАК Сумма,
		|		СписокТоваров.СуммаНДС КАК СуммаНДС,
		|		СписокТоваров.Склад КАК Склад,
		|		СписокТоваров.Валюта КАК Валюта,
		|		СписокТоваров.ВидЦены КАК ВидЦены,
		|		СписокТоваров.КассаККМ КАК КассаККМ,
		|		СписокТоваров.Организация КАК Организация,
		|		СписокТоваров.НалогообложениеНДС КАК НалогообложениеНДС
		|	ИЗ
		|		СписокТоваров КАК СписокТоваров) КАК СписокТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО СписокТоваров.Склад = ИндексыПоАналитике.Склад
		|			И СписокТоваров.Валюта = ИндексыПоАналитике.Валюта
		|			И СписокТоваров.ВидЦены = ИндексыПоАналитике.ВидЦены
		|			И СписокТоваров.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И СписокТоваров.Организация = ИндексыПоАналитике.Организация
		|			И СписокТоваров.НалогообложениеНДС = ИндексыПоАналитике.НалогообложениеНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоНоменклатуре КАК ИндексыПоНоменклатуре
		|		ПО СписокТоваров.Номенклатура = ИндексыПоНоменклатуре.Номенклатура
		|			И СписокТоваров.Характеристика = ИндексыПоНоменклатуре.Характеристика
		|			И СписокТоваров.Упаковка = ИндексыПоНоменклатуре.Упаковка
		|			И СписокТоваров.Цена = ИндексыПоНоменклатуре.Цена
		|			И СписокТоваров.СтавкаНДС = ИндексыПоНоменклатуре.СтавкаНДС
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокТоваров.Номенклатура,
		|	СписокТоваров.Характеристика,
		|	СписокТоваров.СтавкаНДС,
		|	СписокТоваров.Упаковка,
		|	СписокТоваров.Цена,
		|	СписокТоваров.Партнер,
		|	ИндексыПоНоменклатуре.СтавкаНДС,
		|	ИндексыПоАналитике.ИндексПоАналитике,
		|	ИндексыПоНоменклатуре.ИндексПоНоменклатуре,
		|	СписокТоваров.Склад,
		|	СписокТоваров.Валюта,
		|	СписокТоваров.ВидЦены,
		|	СписокТоваров.КассаККМ,
		|	СписокТоваров.Организация,
		|	СписокТоваров.НалогообложениеНДС
		|ИТОГИ
		|	МАКСИМУМ(Номенклатура),
		|	МАКСИМУМ(Характеристика),
		|	МАКСИМУМ(Упаковка),
		|	МАКСИМУМ(Цена),
		|	МАКСИМУМ(Партнер),
		|	МАКСИМУМ(СтавкаНДС),
		|	МАКСИМУМ(КоличествоУпаковок),
		|	МАКСИМУМ(Количество),
		|	МАКСИМУМ(Сумма),
		|	МАКСИМУМ(СуммаНДС),
		|	МАКСИМУМ(Склад),
		|	МАКСИМУМ(Валюта),
		|	МАКСИМУМ(ВидЦены),
		|	МАКСИМУМ(КассаККМ),
		|	МАКСИМУМ(Организация),
		|	МАКСИМУМ(НалогообложениеНДС)
		|ПО
		|	ИндексПоАналитике,
		|	ИндексПоНоменклатуре
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|	ОплатаПлатежнымиКартами.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
		|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|	ОплатаПлатежнымиКартами.Сумма КАК Сумма,
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЧекККМОплатаПлатежнымиКартами.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|		ЧекККМОплатаПлатежнымиКартами.ВидПлатежнойКарты КАК ВидПлатежнойКарты,
		|		ЧекККМОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|		ЧекККМОплатаПлатежнымиКартами.Сумма КАК Сумма,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.КассаККМ КАК КассаККМ,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.Организация КАК Организация,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.Склад КАК Склад,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.Валюта КАК Валюта,
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка.ВидЦены КАК ВидЦены
		|	ИЗ
		|		Документ.ЧекККМ.ОплатаПлатежнымиКартами КАК ЧекККМОплатаПлатежнымиКартами
		|	ГДЕ
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка В
		|				(ВЫБРАТЬ
		|					ЧекиККМ.Ссылка
		|				ИЗ
		|					ЧекиККМ КАК ЧекиККМ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ЭквайринговыйТерминал,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ВидПлатежнойКарты,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.НомерПлатежнойКарты,
		|		-ЧекККМВозвратОплатаПлатежнымиКартами.Сумма,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.КассаККМ,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Организация,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Склад,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Валюта,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ВидЦены
		|	ИЗ
		|		Документ.ЧекККМВозврат.ОплатаПлатежнымиКартами КАК ЧекККМВозвратОплатаПлатежнымиКартами
		|	ГДЕ
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка В
		|				(ВЫБРАТЬ
		|					ЧекиККМ.Ссылка
		|				ИЗ
		|					ЧекиККМ КАК ЧекиККМ)) КАК ОплатаПлатежнымиКартами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО ОплатаПлатежнымиКартами.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И ОплатаПлатежнымиКартами.Организация = ИндексыПоАналитике.Организация
		|			И ОплатаПлатежнымиКартами.Склад = ИндексыПоАналитике.Склад
		|			И ОплатаПлатежнымиКартами.Валюта = ИндексыПоАналитике.Валюта
		|			И ОплатаПлатежнымиКартами.ВидЦены = ИндексыПоАналитике.ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Серии.Серия                          КАК Серия,
		|	Серии.Номенклатура                   КАК Номенклатура,
		|	Серии.Характеристика                 КАК Характеристика,
		|	СУММА(Серии.Количество)              КАК Количество,
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЧекККМСерии.Серия КАК Серия,
		|		ЧекККМСерии.Номенклатура КАК Номенклатура,
		|		ЧекККМСерии.Характеристика КАК Характеристика,
		|		ЧекККМСерии.Количество КАК Количество,
		|		ЧекККМСерии.Ссылка.КассаККМ КАК КассаККМ,
		|		ЧекККМСерии.Ссылка.Организация КАК Организация,
		|		ЧекККМСерии.Ссылка.Склад КАК Склад,
		|		ЧекККМСерии.Ссылка.Валюта КАК Валюта,
		|		ЧекККМСерии.Ссылка.ВидЦены КАК ВидЦены
		|	ИЗ
		|		Документ.ЧекККМ.Серии КАК ЧекККМСерии
		|	ГДЕ
		|		ЧекККМСерии.Ссылка В
		|				(ВЫБРАТЬ
		|					ЧекиККМ.Ссылка
		|				ИЗ
		|					ЧекиККМ КАК ЧекиККМ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЧекККМВозвратСерии.Серия,
		|		ЧекККМВозвратСерии.Номенклатура,
		|		ЧекККМВозвратСерии.Характеристика,
		|		-ЧекККМВозвратСерии.Количество,
		|		ЧекККМВозвратСерии.Ссылка.КассаККМ,
		|		ЧекККМВозвратСерии.Ссылка.Организация,
		|		ЧекККМВозвратСерии.Ссылка.Склад,
		|		ЧекККМВозвратСерии.Ссылка.Валюта,
		|		ЧекККМВозвратСерии.Ссылка.ВидЦены
		|	ИЗ
		|		Документ.ЧекККМВозврат.Серии КАК ЧекККМВозвратСерии
		|	ГДЕ
		|		ЧекККМВозвратСерии.Ссылка В
		|				(ВЫБРАТЬ
		|					ЧекиККМ.Ссылка
		|				ИЗ
		|					ЧекиККМ КАК ЧекиККМ)) КАК Серии
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО Серии.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И Серии.Организация = ИндексыПоАналитике.Организация
		|			И Серии.Склад = ИндексыПоАналитике.Склад
		|			И Серии.Валюта = ИндексыПоАналитике.Валюта
		|			И Серии.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	Серии.Серия,
		|	Серии.Номенклатура,
		|	Серии.Характеристика,
		|	ИндексыПоАналитике.ИндексПоАналитике
		|";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаИндексовПоАналитике", ТаблицаИндексовПоАналитике);
		Запрос.УстановитьПараметр("ТаблицаИндексовПоНоменклатуре", ТаблицаИндексовПоНоменклатуре);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ОплатаПлатежнымиКартами = Результат[3].Выгрузить();
		Серии                   = Результат[4].Выгрузить();
		ОплатаПлатежнымиКартами.Индексы.Добавить("ИндексПоАналитике");
		Серии.Индексы.Добавить("ИндексПоАналитике");
		
		ВыборкаПоАналитике = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаПоАналитике.Количество() > 1 Тогда
			ВызватьИсключение НСтр("ru = 'По кассовой смене зарегистрировано несколько аналитик. Создание отчета о розничных продажах невозможно'");
		КонецЕсли;
		
		// Очистим табличные части документа.
		ОтчетОРозничныхПродажахОбъект.Товары.Очистить();
		ОтчетОРозничныхПродажахОбъект.Серии.Очистить();
		ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Очистить();
		ОтчетОРозничныхПродажахОбъект.ВидыЗапасов.Очистить();
		
		Пока ВыборкаПоАналитике.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(ОтчетОРозничныхПродажахОбъект, ВыборкаПоАналитике);
			
			ВыборкаПоАналитикеНоменклатуры = ВыборкаПоАналитике.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоАналитикеНоменклатуры.Следующий() Цикл
				
				ВыборкаДетальныеЗаписи = ВыборкаПоАналитикеНоменклатуры.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если ВыборкаДетальныеЗаписи.Количество <> 0 Тогда
						
						СтрокаТабличнойЧастиТовары = ОтчетОРозничныхПродажахОбъект.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиТовары, ВыборкаДетальныеЗаписи);
						СтрокаТабличнойЧастиТовары.Цена = Окр(СтрокаТабличнойЧастиТовары.Сумма / СтрокаТабличнойЧастиТовары.КоличествоУпаковок, 15, 2);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			// Заполнение табличной части "Оплата платежными картами".
			МассивСтрок = ОплатаПлатежнымиКартами.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				Если СтрокаТЧ.Сумма <> 0 Тогда
					СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
			// Заполнение табличной части "Серии".
			МассивСтрок = Серии.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				Если СтрокаТЧ.Количество <> 0 Тогда
					СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.Серии.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
			ОтчетОРозничныхПродажахОбъект.Дата            = ВыборкаРеквизитыКассовойСмены.ОкончаниеКассовойСмены;
			ОтчетОРозничныхПродажахОбъект.ЦенаВключаетНДС = ОтчетОРозничныхПродажахОбъект.ВидЦены.ЦенаВключаетНДС;
			ОтчетОРозничныхПродажахОбъект.КассоваяСмена   = КассоваяСмена;
			ОтчетОРозничныхПродажахОбъект.СуммаДокумента  = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ОтчетОРозничныхПродажахОбъект.Товары, ОтчетОРозничныхПродажахОбъект.ЦенаВключаетНДС);
			
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Ответственный) Тогда
				ОтчетОРозничныхПродажахОбъект.Ответственный = Пользователи.ТекущийПользователь();
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Подразделение) Тогда
				ОтчетОРозничныхПродажахОбъект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(ОтчетОРозничныхПродажахОбъект.Ответственный, ОтчетОРозничныхПродажахОбъект.Подразделение);
			КонецЕсли;
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОтчетОРозничныхПродажах.ПараметрыУказанияСерий(ОтчетОРозничныхПродажахОбъект));
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОтчетОРозничныхПродажахОбъект, ПараметрыУказанияСерий);
			
			Если ОтчетОРозничныхПродажахОбъект.Проведен Тогда
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЦикла;
		
		// По кассовой смене не продано товара
		Если ВыборкаПоАналитике.Количество() = 0 Тогда
			
			ОтчетОРозничныхПродажахОбъект.Дата           = ВыборкаРеквизитыКассовойСмены.ОкончаниеКассовойСмены;
			ОтчетОРозничныхПродажахОбъект.КассоваяСмена  = КассоваяСмена;
			
			// Заполняет отчет о розничных продажах данными по текущей кассовой смене.
			СтруктуруСостояниеКассовойСмены = ПолучитьРеквизитыКассовойСменыНаДату(КассоваяСмена.КассаККМ, ТекущаяДата());
			ЗаполнитьЗначенияСвойств(ОтчетОРозничныхПродажахОбъект, СтруктуруСостояниеКассовойСмены);
			
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Ответственный) Тогда
				ОтчетОРозничныхПродажахОбъект.Ответственный = Пользователи.ТекущийПользователь();
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Подразделение) Тогда
				ОтчетОРозничныхПродажахОбъект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(ОтчетОРозничныхПродажахОбъект.Ответственный, ОтчетОРозничныхПродажахОбъект.Подразделение);
			КонецЕсли;
			
			ОтчетОРозничныхПродажахОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ОтчетОРозничныхПродажахОбъект.Товары, ОтчетОРозничныхПродажахОбъект.ЦенаВключаетНДС);
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОтчетОРозничныхПродажах.ПараметрыУказанияСерий(ОтчетОРозничныхПродажахОбъект));
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОтчетОРозничныхПродажахОбъект, ПараметрыУказанияСерий);
			
			Если ОтчетОРозничныхПродажахОбъект.Проведен Тогда
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ОтчетОРозничныхПродажахОбъект.Ссылка;
		
	Исключение
		
		ОписаниеОшибки = НСтр("ru = 'При создании отчета о розничных продажах произошла ошибка.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		Возврат ?(ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Ссылка), ОтчетОРозничныхПродажахОбъект.Ссылка, Неопределено);
		
	КонецПопытки;
	
КонецФункции // ВыполнитьАрхивациюЧековККМ()

// Процедура выполняет закрытие кассовой смены.
//
Функция ВыполнитьОперациюЗакрытияКассовойСмены(КассаККМ, ОшибкаПриСнятииZОтчета, ОписаниеОшибки = "") Экспорт
	
	МассивДокументов = Новый Массив;
	
	// Закрытие кассовой смены
	НачатьТранзакцию();
	КассоваяСмена = ЗакрытьКассовуюСмену(КассаККМ, ОписаниеОшибки);
	Если КассоваяСмена = Неопределено Тогда
		Возврат МассивДокументов;
	КонецЕсли;
	
	Если ВыполнитьАвтоматическуюИнкассациюДС(КассаККМ, ОшибкаПриСнятииZОтчета, ОписаниеОшибки) Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		Возврат МассивДокументов;
	КонецЕсли;
	
	// Удаление отложенных и чеков, по которым был зарезервирован товар.
	УдалитьОтложенныеЧеки(КассоваяСмена, ОписаниеОшибки);
	
	// Заполнение отчета о розничных продажах
	ОтчетОРозничныхПродажах = ЗаполнитьОтчетОРозничныхПродажахПоКассовойСмене(КассоваяСмена, ОписаниеОшибки);
	Если ОтчетОРозничныхПродажах = Неопределено Тогда
		Возврат МассивДокументов;
	КонецЕсли;
	
	// Архивация чеков ККМ
	Если Константы.АрхивироватьЧекиККМПриЗакрытииКассовойСмены.Получить() Тогда
		ВыполнитьАрхивациюЧековККМ(КассоваяСмена, ОписаниеОшибки);
	КонецЕсли;
	
	МассивДокументов.Добавить(ОтчетОРозничныхПродажах);
	Возврат МассивДокументов;
	
КонецФункции // ВыполнитьОперациюЗакрытияКассовойСмены()

////////////////////////////////////////////////////////////////////////////////
// Функции проверки состояния кассовой смены.

// Функция возвращает структуру, характеризующую состояние последней кассовой смены по кассе ККМ.
//
Функция ПолучитьСостояниеКассовойСмены(КассаККМ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Номер               КАК НомерКассовойСмены,
	|	КассоваяСмена.Ссылка              КАК КассоваяСмена,
	|	КассоваяСмена.СтатусКассовойСмены КАК СтатусКассовойСмены,
	|	
	|	КассоваяСмена.КассаККМ             КАК КассаККМ,
	|	КассоваяСмена.Валюта               КАК Валюта,
	|	КассоваяСмена.Валюта.Представление КАК ВалютаПредставление,
	|	КассоваяСмена.ВидЦены              КАК ВидЦены,
	|	КассоваяСмена.Организация          КАК Организация,
	|	КассоваяСмена.Кассир               КАК Кассир,
	|	КассоваяСмена.Склад                КАК Склад,
	|	КассоваяСмена.ЦенаВключаетНДС      КАК ЦенаВключаетНДС,
	|	КассоваяСмена.НалогообложениеНДС   КАК НалогообложениеНДС,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СменаОткрыта,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА КассоваяСмена.НачалоКассовойСмены
	|		ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|	КОНЕЦ КАК ДатаИзмененияСтатуса,
	|	
	|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК НаличностьВКассе
	|	
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки
	|		ПО КассоваяСмена.КассаККМ = ДенежныеСредстваВКассахККМОстатки.КассаККМ
	|	
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСмена.Дата УБЫВ,
	|	КассоваяСмена УБЫВ";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОписаниеКассовойСмены = ПолучитьСтруктуруОписанияКассовойСмены();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК НаличностьВКассе,
		|	КассыККМ.ВалютаДенежныхСредств                              КАК Валюта,
		|	КассыККМ.ВалютаДенежныхСредств.Представление                КАК ВалютаПредставление
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки
		|		ПО (ДенежныеСредстваВКассахККМОстатки.КассаККМ = КассыККМ.Ссылка)
		|ГДЕ
		|	КассыККМ.Ссылка = &КассаККМ";
		
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОписаниеКассовойСмены.НаличностьВКассе    = Выборка.НаличностьВКассе;
		ОписаниеКассовойСмены.Валюта              = Выборка.Валюта;
		ОписаниеКассовойСмены.ВалютаПредставление = Выборка.ВалютаПредставление;
		
	КонецЕсли;
	
	Возврат ОписаниеКассовойСмены;
	
КонецФункции // ПолучитьСостояниеКассовойСмены()

// Функция возвращает структуру, характеризующую состояние кассовой смены на дату.
//
Функция ПолучитьРеквизитыКассовойСменыНаДату(КассаККМ, ДатаВремя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Номер               КАК НомерКассовойСмены,
	|	КассоваяСмена.Ссылка              КАК КассоваяСмена,
	|	КассоваяСмена.СтатусКассовойСмены КАК СтатусКассовойСмены,
	|	
	|	КассоваяСмена.КассаККМ             КАК КассаККМ,
	|	КассоваяСмена.Валюта               КАК Валюта,
	|	КассоваяСмена.Валюта.Представление КАК ВалютаПредставление,
	|	КассоваяСмена.ВидЦены              КАК ВидЦены,
	|	КассоваяСмена.Организация          КАК Организация,
	|	КассоваяСмена.Кассир               КАК Кассир,
	|	КассоваяСмена.Склад                КАК Склад,
	|	КассоваяСмена.ЦенаВключаетНДС      КАК ЦенаВключаетНДС,
	|	КассоваяСмена.НалогообложениеНДС   КАК НалогообложениеНДС,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СменаОткрыта,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА КассоваяСмена.НачалоКассовойСмены
	|		ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|	КОНЕЦ КАК ДатаИзмененияСтатуса,
	|	
	|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК НаличностьВКассе
	|	
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|					ТОГДА КассоваяСмена.НачалоКассовойСмены
	|				ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|			КОНЕЦ) КАК ДатаИзмененияСтатуса,
	|		КассоваяСмена.КассаККМ КАК КассаККМ
	|	ИЗ
	|		Документ.КассоваяСмена КАК КассоваяСмена
	|	ГДЕ
	|		КассоваяСмена.Проведен
	|		И КассоваяСмена.КассаККМ = &КассаККМ
	|		И ВЫБОР
	|				КОГДА КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|					ТОГДА КассоваяСмена.НачалоКассовойСмены
	|				ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|			КОНЕЦ <= &ДатаВремя
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КассоваяСмена.КассаККМ) КАК КассовыеСмены
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК КассоваяСмена
	|		ПО КассовыеСмены.КассаККМ = КассоваяСмена.КассаККМ
	|			И КассоваяСмена.Проведен 
	|			И (КассовыеСмены.ДатаИзмененияСтатуса = ВЫБОР
	|				КОГДА КассоваяСмена.СтатусКассовойСмены = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|					ТОГДА КассоваяСмена.НачалоКассовойСмены
	|				ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|			КОНЕЦ)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(&ДатаВремя, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки
	|		ПО КассовыеСмены.КассаККМ = ДенежныеСредстваВКассахККМОстатки.КассаККМ
	|
	|";
	
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("ДатаВремя", ДатаВремя);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОписаниеКассовойСмены = ПолучитьСтруктуруОписанияКассовойСмены();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК НаличностьВКассе,
		|	КассыККМ.ВалютаДенежныхСредств                              КАК Валюта,
		|	КассыККМ.ВалютаДенежныхСредств.Представление                КАК ВалютаПредставление
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки
		|		ПО (ДенежныеСредстваВКассахККМОстатки.КассаККМ = КассыККМ.Ссылка)
		|ГДЕ
		|	КассыККМ.Ссылка = &КассаККМ";
		
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ОписаниеКассовойСмены.НаличностьВКассе    = Выборка.НаличностьВКассе;
		ОписаниеКассовойСмены.Валюта              = Выборка.Валюта;
		ОписаниеКассовойСмены.ВалютаПредставление = Выборка.ВалютаПредставление;
		
	КонецЕсли;
	
	Возврат ОписаниеКассовойСмены;
	
КонецФункции // ПолучитьРеквизитыКассовойСменыНаДату()

// Функция получает открытую кассовую смену по Кассе ККМ в заданный период.
// Используется для контроля пересечения кассовых смен.
// За один период может одновременно существовать только одна кассовая смена.
//
Функция ПолучитьОткрытуюКассовуюСмену(КассаККМ, КассоваяСмена = Неопределено, НачалоКассовойСмены, ОкончаниеКассовойСмены) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.НачалоКассовойСмены <= &НачалоКассовойСмены
	|	И ВЫБОР
	|			КОГДА КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены >= &НачалоКассовойСмены
	|		КОНЕЦ
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	&ОкончаниеКассовойСмены <> ДАТАВРЕМЯ(1, 1, 1)
	|	И КассоваяСмена.НачалоКассовойСмены <= &ОкончаниеКассовойСмены
	|	И ВЫБОР
	|			КОГДА КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены >= &ОкончаниеКассовойСмены
	|		КОНЕЦ
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	&ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|	И КассоваяСмена.НачалоКассовойСмены >= &НачалоКассовойСмены
	|	И КассоваяСмена.КассаККМ = &КассаККМ
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|";
	
	Запрос.УстановитьПараметр("КассаККМ",               КассаККМ);
	Запрос.УстановитьПараметр("НачалоКассовойСмены",    НачалоКассовойСмены);
	Запрос.УстановитьПараметр("ОкончаниеКассовойСмены", ОкончаниеКассовойСмены);
	Запрос.УстановитьПараметр("КассоваяСмена",          КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьОткрытуюКассовуюСмену()

// Функция проверяет состояние кассовой смены на дату. Если смена не открыта - возвращается описание ошибки.
//
Функция СменаОткрыта(КассоваяСмена, Дата, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СменаОткрыта = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассоваяСмена.СтатусКассовойСмены    КАК СтатусКассовойСмены,
	|	КассоваяСмена.НачалоКассовойСмены    КАК НачалоКассовойСмены,
	|	КассоваяСмена.ОкончаниеКассовойСмены КАК ОкончаниеКассовойСмены
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.Ссылка = &КассоваяСмена";
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
			
			// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
			Если Дата - Выборка.НачалоКассовойСмены < 86400 Тогда
				
				СменаОткрыта = Истина;
				
			Иначе
				
				ОписаниеОшибки = НСтр("ru = 'С момента открытия кассовой смены истекло более 24 часов. Необходимо выполнить закрытие кассовой смены.'");
				СменаОткрыта = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.СтатусКассовойСмены) Тогда
			
			Если Выборка.ОкончаниеКассовойСмены >= Дата И Выборка.НачалоКассовойСмены <= Дата Тогда
				
				СменаОткрыта = Истина;
				
			Иначе
				
				ОписаниеОшибки = НСтр("ru = 'Кассовая смена закрыта.'");
				СменаОткрыта = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ОписаниеОшибки = НСтр("ru = 'Кассовая смена не открыта.'");
		СменаОткрыта = Ложь;
		
	КонецЕсли;
	
	Возврат СменаОткрыта;
	
КонецФункции // СменаОткрыта()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Процедуры внесения и выемки дс.

Функция ВыполнитьАвтоматическуюИнкассациюДС(КассаККМ, ОшибкаПриСнятииZОтчета, ОписаниеОшибки = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	Если Не ОшибкаПриСнятииZОтчета Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КассыККМ.АвтоматическаяИнкассация                           КАК АвтоматическаяИнкассация,
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК ИзымаемаяСумма
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &Ссылка) КАК ДенежныеСредстваВКассахККМОстатки
		|		ПО ДенежныеСредстваВКассахККМОстатки.КассаККМ = КассыККМ.Ссылка
		|ГДЕ
		|	КассыККМ.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", КассаККМ);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() И Выборка.АвтоматическаяИнкассация И Выборка.ИзымаемаяСумма > 0 Тогда
			Попытка
				СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(Новый Структура("КассаККМ, СуммаВнесения, Дата", КассаККМ, Выборка.ИзымаемаяСумма, ТекущаяДата()));
			Исключение
				
				Результат = Ложь;
				
				ОписаниеОшибки = НСтр("ru = 'При инкассации ДС произошла ошибка.
				                            |Дополнительное описание:
				                            |%ДополнительноеОписание%'");
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
				
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры открытия и закрытия кассовой смены.

// Функция возвращает текст описания ошибки заполнения отчета о розничных продажах.
//
Функция ПолучитьТекстОшибкиЗаполненияОтчета()
	
	Возврат НСтр("ru = 'Проверьте настройки розничного склада и кассы ККМ.'");
	
КонецФункции // ПолучитьТекстОшибкиЗаполненияОтчета()

// Функция выполняет поиск отчета о розничных продажах по кассовой смене.
//
Функция НайтиОтчетОРозничныхПродажах(КассоваяСмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтчетОРозничныхПродажах = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.КассоваяСмена = &КассоваяСмена";
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОтчетОРозничныхПродажах = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ОтчетОРозничныхПродажах;
	
КонецФункции // НайтиОтчетОРозничныхПродажах()

// Функция выполняет удаление отложенных чеков.
//
Функция УдалитьОтложенныеЧеки(КассоваяСмена, ОписаниеОшибки)
	
	Результат = Истина;
	
	НачатьТранзакцию();
	
	ВыборкаЧековККМ = ВыбратьОтложенныеЧекиККМДляУдаления(КассоваяСмена);
	
	Попытка
		
		Пока ВыборкаЧековККМ.Следующий() Цикл
			ЧекККМОбъект = ВыборкаЧековККМ.Ссылка.ПолучитьОбъект();
			ЧекККМОбъект.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Результат = Ложь;
		
		ОписаниеОшибки = НСтр("ru = 'При удалении отложенных чеков произошла ошибка.
		                      |Дополнительное описание:
		                      |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции проверки состояния кассовой смены.

// Функция возвращает пустую структуру состояния кассовой смены.
//
Функция ПолучитьСтруктуруОписанияКассовойСмены()
	
	СостояниеКассовойСмены = Новый Структура;
	СостояниеКассовойСмены.Вставить("ДатаИзмененияСтатуса");
	СостояниеКассовойСмены.Вставить("СтатусКассовойСмены");
	СостояниеКассовойСмены.Вставить("КассоваяСмена");
	СостояниеКассовойСмены.Вставить("НаличностьВКассе");
	СостояниеКассовойСмены.Вставить("НомерКассовойСмены");
	СостояниеКассовойСмены.Вставить("СменаОткрыта", Ложь);
	
	// Описание реквизитов кассовой смены
	СостояниеКассовойСмены.Вставить("КассаККМ");
	СостояниеКассовойСмены.Вставить("Валюта");
	СостояниеКассовойСмены.Вставить("ВалютаПредставление");
	СостояниеКассовойСмены.Вставить("ВидЦены");
	СостояниеКассовойСмены.Вставить("Организация");
	СостояниеКассовойСмены.Вставить("Кассир");
	СостояниеКассовойСмены.Вставить("Склад");
	СостояниеКассовойСмены.Вставить("ЦенаВключаетНДС");
	СостояниеКассовойСмены.Вставить("НалогообложениеНДС");
	
	Возврат СостояниеКассовойСмены;
	
КонецФункции // ПолучитьСтруктуруОписанияКассовойСмены()

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ВыбратьОтложенныеЧекиККМДляУдаления(КассоваяСмена = Неопределено)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Дата КАК Дата,
	|	Документ.ОтложенДо КАК ОтложенДо,
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ПОМЕСТИТЬ ЧекиККМ
	|ИЗ
	|	Документ.ЧекККМ КАК Документ
	|ГДЕ
	|	Документ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И (Документ.КассоваяСмена = &КассоваяСмена
	|			ИЛИ &КассоваяСмена = НЕОПРЕДЕЛЕНО)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка,
	|	Документ.Дата,
	|	Документ.КассоваяСмена.ОкончаниеКассовойСмены,
	|	Документ.КассоваяСмена
	|ИЗ
	|	Документ.ЧекККМВозврат КАК Документ
	|ГДЕ
	|	Документ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И (Документ.КассоваяСмена = &КассоваяСмена
	|			ИЛИ &КассоваяСмена = НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка
	|ИЗ
	|	ЧекиККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.ОтложенДо <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ЧекККМ.ОтложенДо < &ТекущееВремя
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка
	|ИЗ
	|	ЧекиККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.КоличествоДнейХраненияОтложенныхЧеков КАК КоличествоДнейХраненияОтложенныхЧеков
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КоличествоДнейХраненияОтложенныхЧеков.Значение > 0
	|	И ДОБАВИТЬКДАТЕ(ЧекККМ.Дата, ДЕНЬ, КоличествоДнейХраненияОтложенныхЧеков.Значение) < &ТекущееВремя
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка
	|ИЗ
	|	ЧекиККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.КоличествоДнейХраненияОтложенныхЧеков КАК КоличествоДнейХраненияОтложенныхЧеков
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КоличествоДнейХраненияОтложенныхЧеков.Значение = 0
	|	И ЧекККМ.КассоваяСмена.СтатусКассовойСмены <> ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)");
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	Запрос.УстановитьПараметр("ТекущееВремя",  ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выбрать();
	
КонецФункции