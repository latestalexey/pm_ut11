////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотВызовСервера: сервер, вызов сервера
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////
// Общие функции

//Проверяет возврат на запрос к Документообороту, в случае, если возвращено объект типа DMError вызывается исключение
//Параметры: 
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Ответ - объект XDTO для анализа
Процедура ПроверитьВозвратВебСервиса(Прокси, Ответ) Экспорт
	
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
КонецПроцедуры

//Создает прокси веб-сервиса Документооборота. В случае ошибки при создании вызывается исключение.
//Возвращает:
//	Прокси веб-сервиса WSПрокси
Функция ПолучитьПрокси() Экспорт
	
	МестоположениеWSDL = Константы.АдресВебСервиса1СДокументооборот.Получить();
	Если ЗначениеЗаполнено(МестоположениеWSDL) И 
		Прав(МестоположениеWSDL, 1) <> "/" И Прав(МестоположениеWSDL, 1) <> "\" Тогда
		МестоположениеWSDL = МестоположениеWSDL + "/";
	КонецЕсли;
	МестоположениеWSDL = МестоположениеWSDL + "ws/dm.1cws?wsdl";
	
	ИмяПользователя = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИнтеграцияС1СДокументооборот", "Пользователь");
	Пароль 		 	= ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИнтеграцияС1СДокументооборот", "Пароль");
	
	Если ИмяПользователя = Неопределено ИЛИ ПустаяСтрока(ИмяПользователя) Тогда
		ВызватьИсключение НСтр("ru = 'Не заполнены параметры авторизации в 1С:Документообороте.'");
	КонецЕсли;
	
	Попытка
		Определение = Новый WSОпределения(
			МестоположениеWSDL, 
			ИмяПользователя,
			Пароль);
		
		Прокси = Новый WSПрокси(
			Определение,
			"http://www.1c.ru/dm",
			"DMService",
			"DMServiceSoap");
	Исключение	
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Интеграция с 1С:Документооборотом'"), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'Не удалось подключиться к веб сервису 1С:Документооборота. 
			|Возможно не прошла авторизация, указан неверный адрес веб-сервиса или база 1С:Документооборота не опубликована на веб-сервере. 
			|Подробности в журнале регистрации. Обратитесь к администратору системы.'");
		
	КонецПопытки;
		
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль = Пароль;
	
	Возврат Прокси;
	
КонецФункции

//Получает настройки базы Документооборота
//Возвращает:
//	Структуру настроек Документооборота со свойствами:
//	- НужноИзвлечьТекст (булево)
//	- ИспользоватьЭлектронныеЦифровыеПодписи (булево)
Функция ПолучитьНастройки() Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetSettingsRequest");
	
	НастройкиXDTO = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, НастройкиXDTO);
	
	Настройки = Новый Структура("НужноИзвлечьТекст, ИспользоватьЭлектронныеЦифровыеПодписи", 
		НастройкиXDTO.needExtractText, НастройкиXDTO.useDigitalSignatures);
	Возврат Настройки;
	
КонецФункции

//Получает имя типа объекта текущей конфигурации из данных настроек заполнения объектов Документооборота
//Параметры: 
//	СсылкаНаВнешнийОбъект - ссылка на объект текущей базы данных.
//Возвращает:
//	Имя типа XDTO объекта 1С:Документооборота
Функция ПолучитьИмяТипаДокументаДОИзНастроекЗаполнения(СсылкаНаВнешнийОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиЗаполнения.ТипОбъектаПотребителя КАК ТипОбъектаПотребителя,
		|	НастройкиЗаполнения.ТипОбъектаДокументооборота КАК ТипОбъектаДокументооборота
		|ИЗ
		|	Справочник.НастройкиЗаполненияОбъектов1СДокументооборота КАК НастройкиЗаполнения
		|ГДЕ
		|	НастройкиЗаполнения.ТипОбъектаПотребителя = &ТипВнешнегоОбъекта";

	Запрос.УстановитьПараметр("ТипВнешнегоОбъекта", СсылкаНаВнешнийОбъект.Метаданные().ПолноеИмя()); 
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИмяТипа = ВыборкаДетальныеЗаписи.ТипОбъектаДокументооборота;
		Прервать;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИмяТипа;
	
КонецФункции

//Получает представление для указанного типа XDTO
//Параметры:
//	ОбъектТип - строка типа объекта XDTO
//Возвращает:
//	Строку представления типа объекта 1С:Документооборота
Функция ПолучитьПредставлениеТипа(ОбъектТип)

	ПредставлениеТипа = "";
	
	Если ОбъектТип = "DMFile" Тогда
		ПредставлениеТипа = НСтр("ru='Файл'");
		
	ИначеЕсли ОбъектТип = "DMInternalDocument" Тогда
		ПредставлениеТипа =  НСтр("ru='Внутренний документ'");
		
	ИначеЕсли ОбъектТип = "DMIncomingDocument" Тогда
		ПредставлениеТипа =  НСтр("ru='Входящий документ'");
		
	ИначеЕсли ОбъектТип = "DMOutgoingDocument" Тогда
		ПредставлениеТипа =  НСтр("ru='Исходящий документ'");
		
	КонецЕсли;
	
	Возврат ПредставлениеТипа;

КонецФункции

//Проверяет доступность функционала версии сервиса
//Парметры:
//	ВерсияСервиса - версия сервиса, содержащая нужный функционал
//Возвращает:
//	Признак доступности функционала версии сервиса
Функция ДоступенФункционалВерсииСервиса(ВерсияСервиса) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Возврат ИнтеграцияС1СДокументооборот.ДоступенФункционалВерсииСервиса(Прокси, ВерсияСервиса);
	
КонецФункции

////////////////////////////////////////
// Запросы к Документообороту

//Готовит данные для выбора из списка при обработке события АвтоПодбор у полей ввода
// Параметры:
//	ТипыЗначений - строка с именами классов XDTO, разделенными символом ';'
//	ДанныеВыбора - список значений, который показывается для выбора значения в поле
//	Текст - строка, по которой происходит поиск объектов
//	СтандартнаяОбработка - параметр, передаваемый из обработчика события на форме
Процедура ПолучитьДанныеДляАвтоПодбора(ТипыЗначений, ДанныеВыбора, Текст, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	МассивТипов = ИнтеграцияС1СДокументооборот.РазложитьСтрокуВМассивПодстрок(ТипыЗначений, ";");
	
	Для Каждого ТипXDTO Из МассивТипов Цикл
		
		Если НЕ ЗначениеЗаполнено(ТипXDTO) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеЗначения = ПолучитьОбъектыПоНаименованию(ТипXDTO, Текст);
		
		Для Каждого НайденноеЗначение Из НайденныеЗначения Цикл
			ДанныеДляВыбора = Новый Структура;
			ДанныеДляВыбора.Вставить("id", НайденноеЗначение.object.objectId.id);
			ДанныеДляВыбора.Вставить("type", НайденноеЗначение.object.objectId.type);
			ДанныеДляВыбора.Вставить("name", НайденноеЗначение.object.name);

			ДанныеВыбора.Добавить(ДанныеДляВыбора, НайденноеЗначение.object.name);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//Получает из Документооборота документ, связанный с объектом конфигурации-потребителя
// Параметры:
//	СсылкаНаВнешнийОбъект - ссылка на объект конфигурации-потребителя
// Возвращает: Структура
//	name - имя документа Документооборота
//	id - уникальный идентификатор документа в Документообороте
//	type - имя типа XDTO, соответствующего документу
Функция ПолучитьСвязанныйCВнешнимОбъектомДокумент(СсылкаНаВнешнийОбъект) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаВнешнийОбъект) Тогда
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		ВнешнийОбъект = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
		ВнешнийОбъект.id = Строка(СсылкаНаВнешнийОбъект.УникальныйИдентификатор());
		ВнешнийОбъект.type = СсылкаНаВнешнийОбъект.Метаданные().ПолноеИмя();
		ВнешнийОбъект.name = Строка(СсылкаНаВнешнийОбъект);
	
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetDocumentListRequest");
		Запрос.externalObjects.Добавить(ВнешнийОбъект);
		
		Запрос.columnSet.Добавить("name"); 
		Запрос.columnSet.Добавить("documentType"); 
		
		Результат = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
			
		Если Результат.documents.Количество() > 0 Тогда 
			Объект = Результат.documents[0];
			ДанныеВозврата = Новый Структура();
			ДанныеВозврата.Вставить("id", Объект.objectId.id);
			ДанныеВозврата.Вставить("type", Объект.objectId.type);
			ДанныеВозврата.Вставить("name", Объект.name);
			ТипДокумента = новый Структура("id, type, name", 
				Объект.documentType.objectID.id, Объект.documentType.objectID.type, Объект.documentType.name);
			ДанныеВозврата.Вставить("documentType",ТипДокумента);
			Возврат ДанныеВозврата;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

//Выполняет поиск объектов документооборота по части наименования
// Параметры:
//	Тип - имя класса XDTO, соответствующего типу искомого объекта
//	Наименование - часть наименования, по которой происходит поиск
// Возвращает:
//	Список объектов XDTO, соответствующих найденным объектам в 1С:Документообороте
Функция ПолучитьОбъектыПоНаименованию(Тип, Наименование) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "name";
	Условие.value = Наименование;
	
	СписокУсловий = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListQuery");
	СписокУсловий.conditions.Добавить(Условие);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectListRequest");
	Запрос.type = Тип;
	Запрос.Query = СписокУсловий;
	
	Результат = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	Возврат Результат.items;
	
КонецФункции

//Возвращает список значений, заполненный значениями элементов указанного типа с учетом отборов
// Параметры:
//	ТипОбъектаВыбора - строка с именем класса XDTO
//	Отбор - структура с перечислением свойств и их значений
Функция ПолучитьСписокЗначенийДляВыбора(ТипОбъектаВыбора, Отбор = Неопределено) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	СписокУсловий = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListQuery");
	
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда 
		Для Каждого СтрокаОтбора Из Отбор Цикл
			Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
			Условие.property = СтрокаОтбора.Ключ;
			
			Если ТипЗнч(СтрокаОтбора.Значение) = Тип("Структура") Тогда
				Условие.value =	ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, СтрокаОтбора.Значение.id, СтрокаОтбора.Значение.type);
			Иначе
				Условие.value = СтрокаОтбора.Значение;
			КонецЕсли;
		
			СписокУсловий.conditions.Добавить(Условие);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectListRequest");
	Запрос.type = ТипОбъектаВыбора;
	Запрос.query = СписокУсловий;
	
	Результат = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	СписокВыбора = новый СписокЗначений;

	Для каждого Элемент из Результат.items Цикл
		
		Если ТипОбъектаВыбора = "DMBusinessProcessImportance" Тогда
			Представление = СтрЗаменить(Элемент.object.name," важность","");
		Иначе
			Представление = Элемент.object.name;
		КонецЕсли;
		
		СтруктураВыбора = Новый Структура;
		СтруктураВыбора.Вставить("РеквизитПредставление", Представление);
		СтруктураВыбора.Вставить("РеквизитID", Элемент.object.objectId.id);
		СтруктураВыбора.Вставить("РеквизитТип", Элемент.object.objectId.type);
		
		СписокВыбора.Добавить(СтруктураВыбора, Представление);
		
	КонецЦикла;
	
	Возврат СписокВыбора;
	
КонецФункции

////////////////////////////////////////
// Работа с бизнес-процессами и задачами

//Выполняет принятие задач к исполнению
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	Задачи - массив идентификаторов задач Документооборота, которые нужно принять к исполнению
//Возвращает:
//	Признак успеха принятия задач к исполнению
Функция ПринятьЗадачуКИсполнению(Прокси, Задачи) Экспорт
	
	Если Прокси = Неопределено Тогда
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	КонецЕсли;
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMAcceptTasksRequest");
	
	Для каждого ID из Задачи Цикл
		ЗадачаXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObject");
		ОбъектИД = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		ОбъектИД.id = ID;
		ОбъектИД.type = "DMBusinessProcessTask";
		ЗадачаXDTO.objectID = ОбъектИД;
		ЗадачаXDTO.name = "";
		Запрос.tasks.Добавить(ЗадачаXDTO);
	КонецЦикла;
	
	Результат = Прокси.execute(Запрос);
	
	Попытка 
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;

КонецФункции

//Получает список шаблонов, определенных в Документообороте 
// для данного типа бизнес-процессов и вида данного предмета бизнес-процесса
// Параметры:
//	ТипБизнесПроцесса - имя типа XDTO
//	ПредметБизнесПроцесса - Структура
//		id - уникальный идентификатор предмета бизнес-процесса в Документообороте
//		type - имя типа XDTO предмета бизнес-процесса
// Возвращает: список структур
//	name - имя шаблона в документообороте
//	id - уникальный идентификатор шаблона
//	type - имя типа XDTO шаблона
Функция ПолучитьСписокШаблоновБизнесПроцессов(ТипБизнесПроцесса, ПредметБизнесПроцесса) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetBusinessProcessTemplatesRequest");
    Запрос.businessProcessType = ТипБизнесПроцесса;
	
	Если ПредметБизнесПроцесса <> Неопределено Тогда 
		ПредметБизнесПроцессаИд = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		ПредметБизнесПроцессаИд.id = ПредметБизнесПроцесса.id;
		ПредметБизнесПроцессаИд.type = ПредметБизнесПроцесса.type;
		
		Запрос.businessProcessTargetId = ПредметБизнесПроцессаИд;
	КонецЕсли;
	
	Результат = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	СписокШаблоновДокументов = Новый СписокЗначений;
	Для Каждого Шаблон Из Результат.BusinessProcessTemplates Цикл
		ДанныеШаблона = Новый Структура;
		ДанныеШаблона.Вставить("id", Шаблон.objectId.id);
		ДанныеШаблона.Вставить("type", Шаблон.objectId.type);
		ДанныеШаблона.Вставить("name", Шаблон.name);
		СписокШаблоновДокументов.Добавить(ДанныеШаблона);
	КонецЦикла;
	
	Возврат СписокШаблоновДокументов;
	
КонецФункции

//Заполняет форму бизнес-процесса на основании шаблона
//Параметры:
//	Форма - форма бизнес-процесса 1С:Документооборота
//	ДанныеОШаблоне - структура шаблона, содержащая поля:
//					 - РеквизитID - идентификатор шаблоно 1С:Документооборота
//					 - РеквизитТип - тип шаблона XDTO
//Возвращает:
//	Объект XDTO бизнес-процесса, заполненный по шаблону
Функция ЗаполнитьБизнесПроцессПоШаблону(Форма, ДанныеОШаблоне) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetBusinessProcessByTemplateRequest");
	
	Запрос.type = Форма.Тип;
	
	Если ЗначениеЗаполнено(Форма.Предмет)Тогда 
		
		ПредметБизнесПроцессаИд = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		ПредметБизнесПроцессаИд.id = Форма.ПредметID;
		ПредметБизнесПроцессаИд.type = Форма.ПредметТип;
		
		Запрос.targetId = ПредметБизнесПроцессаИд;
		
	КонецЕсли;
	
	ШаблонБизнесПроцессаИд = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
	ШаблонБизнесПроцессаИд.id = ДанныеОШаблоне.РеквизитID;
	ШаблонБизнесПроцессаИд.type = ДанныеОШаблоне.РеквизитТип;
	
	Запрос.businessProcessTemplateId = ШаблонБизнесПроцессаИд;
	
	Результат = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////
// Работа с документами

//Создает файлы печатных форм объектов по имени команды формы документа 1С:Документооборот и присоединяет их к документам
//Параметры:
//	ВнешнийОбъект - ссылка на объект текущей базы данных
//	ID - идентификатор документа 1С:Документооборота
//	Тип - тип документа 1С:Докуентооборота
//	Представление - представление документа 1С:Документооборота
//	ИмяКоманды - имя команды кнопки в формате "Менеджер_%_Команда_%"
//Возврвщает: 
//	Массив инедтификаторов созданных файлов
Функция ПрисоединитьПечатнуюФормуОбъектаКДокументу(ВнешнийОбъект, ID, Тип, Представление, ИмяКоманды, ФорматФайла) Экспорт
	
	Идентификаторы = новый Массив;
	ТипОбъекта = ВнешнийОбъект.Метаданные().ПолноеИмя();
	
	НачалоКоманды = Найти(ИмяКоманды,"_Команда_");
	
	МенеджерПечати = Сред(ИмяКоманды,10,НачалоКоманды-10);
	
	Если Найти(МенеджерПечати,"Справочник_") = 1 Тогда
		МенеджерПечати = СтрЗаменить(МенеджерПечати,"Справочник_","Справочник.");
	ИначеЕсли Найти(МенеджерПечати,"Документ_") = 1 Тогда
		МенеджерПечати = СтрЗаменить(МенеджерПечати,"Документ_","Документ.");
	ИначеЕсли Найти(МенеджерПечати,"Обработка_") = 1 Тогда
		МенеджерПечати = СтрЗаменить(МенеджерПечати,"Обработка_","Обработка.");
	ИначеЕсли Найти(МенеджерПечати,"Задача_") = 1 Тогда
		МенеджерПечати = СтрЗаменить(МенеджерПечати,"Задача_","Задача.");
	ИначеЕсли Найти(МенеджерПечати,"БизнесПроцесс_") = 1 Тогда
		МенеджерПечати = СтрЗаменить(МенеджерПечати,"БизнесПроцесс_","БизнесПроцесс.");
	КонецЕсли;
	
	КомандаМенеджера = новый Структура("ИмяКоманды",Сред(ИмяКоманды, НачалоКоманды + 9));
	КоллекцияПечатныхФорм = Неопределено;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ЗаполнитьПечатныеФормы(
		ВнешнийОбъект, МенеджерПечати, КомандаМенеджера, КоллекцияПечатныхФорм);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ФорматФайлаИмя = ОбщегоНазначения.ИмяЗначенияПеречисления(ФорматФайла);
	Для каждого ПечатнаяФорма из КоллекцияПечатныхФорм Цикл
		Если ПечатнаяФорма.ТабличныйДокумент <> Неопределено И ПечатнаяФорма.ТабличныйДокумент.КоличествоСтраниц() > 0 Тогда
			ПечатнаяФорма.ТабличныйДокумент.Записать(ИмяВременногоФайла,ТипФайлаТабличногоДокумента[ФорматФайлаИмя]);
			
			ПараметрыСоздания = Новый Структура(
				"Имя, Расширение, Размер, Текст, ВремяИзмененияУниверсальное, 
				|АдресВременногоХранилищаФайла, ВремяИзменения, ВебКлиент");
			
			ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 №%2 от %3'"),
				Строка(?(ЗначениеЗаполнено(ПечатнаяФорма.СинонимМакета),ПечатнаяФорма.СинонимМакета,ПечатнаяФорма.ИмяМакета)),
				Строка(ВнешнийОбъект.Номер),
				Формат(ВнешнийОбъект.Дата,"ДЛФ=D")); 
				
			ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ИмяФайла," ");
			ПараметрыСоздания.Имя = ИмяФайла;
			ПараметрыСоздания.Расширение = ФорматФайлаИмя;
			ПараметрыСоздания.ВебКлиент = Истина;
			ПараметрыСоздания.Текст = "";
			
			Файл = новый Файл(ИмяВременногоФайла);
			ПараметрыСоздания.Размер = Файл.Размер();
			ПараметрыСоздания.ВремяИзменения = Файл.ПолучитьВремяИзменения();
			ПараметрыСоздания.ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
			Файл = Неопределено;
			
			ДвоичныеДанные = новый ДвоичныеДанные(ИмяВременногоФайла);
			
			ПараметрыСоздания.АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);;
			
			ИдентификаторФайла = ИнтеграцияС1СДокументооборотВызовСервера.СоздатьИзФайлаНаДискеСервер(
				ПараметрыСоздания, ID, Тип, Представление);
				
			Идентификаторы.Добавить(ИдентификаторФайла);
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Идентификаторы;
	
КонецФункции

//Возвращает список XDTO документов по объекту Документооборота
//Параметры:
//	ИдентификаторВладельца - уникальный идентификатор объекта Документооборота
//	ИмяВладельца - представление объекта Документооборота
//	ТипВладельца - тип XDTO объекта Документооборта
//Возвращает:
//	Список объектов XDTO типа DMInternalDocument
Функция ПолучитьСписокДокументовПоВладельцу(ИдентификаторВладельца, ИмяВладельца, ТипВладельца) Экспорт

	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetDocumentListByOwnerRequest");
	
	ОбъектВладелец =  ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObject");
	ОбъектВладелец.name = ИмяВладельца;
	ОбъектВладелец.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(
		Прокси, Строка(ИдентификаторВладельца), ТипВладельца);
	
	Запрос.owners.Добавить(ОбъектВладелец);
	
	Запрос.columnSet.Добавить("objectId");
	Запрос.columnSet.Добавить("signatures");
	Запрос.columnSet.Добавить("name");
	Запрос.columnSet.Добавить("author");
	
	Файлы = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Файлы);
	
	Возврат Файлы;
	
КонецФункции

////////////////////////////////////////
// Автообновление

//Загружает параметры Автообновление и ПериодАвтообновления списка из настроек
//Параметры:
// Форма - форма
// ИмяСписка - Строка - имя элемента формы
Процедура ЗагрузитьНастройкиАвтообновленияСписка(Форма, ИмяСписка) Экспорт
	
	КлючОбъекта = Форма.ИмяФормы + ".Автообновление." + ПолучитьСкоростьКлиентскогоСоединения();
	Настройки = ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта, ИмяСписка);
	Если ЗначениеЗаполнено(Настройки) Тогда
		Форма.Элементы[ИмяСписка].Автообновление = Настройки.Автообновление;
		Форма.Элементы[ИмяСписка].ПериодАвтоОбновления = Настройки.ПериодАвтоОбновления;
	КонецЕсли;
	
КонецПроцедуры

//Сохраняет настройки автообновления списка
//Параметры:
//	ИмяФормы - имя формы, настройки которой должны быть сохранены
//	ИмяСписка - имя списка формы, который должен обновляться
//	Настройки - настройки обновления списка
//				Структура с полями: 
//					- Автообновление - признак, что автообновление включено
//					- ПериодАвтообновления - период автообновления в секундах
Процедура СохранитьНастройкиАвтообновленияСписка(ИмяФормы, ИмяСписка, Настройки) Экспорт
	
	КлючОбъекта = ИмяФормы + ".Автообновление." + ПолучитьСкоростьКлиентскогоСоединения();
	ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, ИмяСписка, Настройки);
	
КонецПроцедуры

//Сохраняет настройки автообновления Формы
//Параметры:
//	ИмяФормы - имя формы, настройки которой должны быть сохранены
//	Настройки - настройки обновления формы
//				Структура с полями: 
//					- Автообновление - признак, что автообновление включено
//					- ПериодАвтообновления - период автообновления в секундах
Процедура СохранитьНастройкиАвтообновленияФормы(ИмяФормы, Настройки) Экспорт
	
	КлючОбъекта = ИмяФормы + ".Автообновление";
	КлючНастройки = Строка(ПолучитьСкоростьКлиентскогоСоединения());
	ХранилищеСистемныхНастроек.Сохранить(КлючОбъекта, КлючНастройки, Настройки);
	
КонецПроцедуры

//Получает параметры Автообновление и ПериодАвтообновления списка из настроек
//Параметры:
// Форма - форма или имя формы
// ИмяСписка - Строка - имя элемента формы
// 
// Возврвщает структуру:
// - Автообновление (Булево)
// - ПериодАвтоОбновления (Число)
Функция ПолучитьНастройкиАвтообновленияФормы(Форма) Экспорт
	
	Результат = Новый Структура("Автообновление, ПериодАвтоОбновления", Ложь, 0);
	
	Если ТипЗнч(Форма) = Тип("Строка") Тогда
		КлючОбъекта = Форма + ".Автообновление";
	Иначе
		КлючОбъекта = Форма.ИмяФормы + ".Автообновление";
	КонецЕсли;
	
	КлючНастройки = Строка(ПолучитьСкоростьКлиентскогоСоединения());
	Настройки = ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта, КлючНастройки);
	Если ЗначениеЗаполнено(Настройки) Тогда
		Результат.Автообновление = Настройки.Автообновление;
		Результат.ПериодАвтоОбновления = Настройки.ПериодАвтоОбновления;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////
// Работа с файлами

//Сохраняет путь к каталогу, используемому при интеграции, во временном хранилище
//Параметры:
//	Каталог - строка - путь к каталогу печати
Процедура СохранитьЛокальныйКаталогФайлов(Каталог) Экспорт
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ЛокальныйКаталогФайловИнтеграции", , Каталог);
	
КонецПроцедуры

//Заносит информацию о подписи файла в базу Документооборот
//Параметры:
//	ID - идентификатор файла
//	Имя - имя файла
//	ОписаниеФайла - описание файла
//	Тип - тип объекта XDTO файла
//	МассивНовыхПодписей - массив структур новых подписей
//	МассивСуществующихПодписей - массив структур существующих подписей
Процедура ЗанестиИнформациюОПодписяхОбъекта(ID, Имя, ОписаниеФайла, Тип, 
	МассивНовыхПодписей, МассивСуществующихПодписей) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Объект = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, Тип);
	Объект.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ID, Тип);
	
	// только 2 поля - Имя и Описание передаем при записи
	Объект.name = Имя;
	Объект.description = ОписаниеФайла;
	
	Для Каждого ДанныеПодписи Из МассивСуществующихПодписей Цикл
		
		ПодписьXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMSignature");
		ЗаполнитьXDTOПодпись(Прокси, ПодписьXDTO, ДанныеПодписи);
		Объект.signatures.Добавить(ПодписьXDTO);
		
	КонецЦикла;
	
	Для Каждого ДанныеПодписи Из МассивНовыхПодписей Цикл 
		
		ПодписьXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMSignature");
		
		ПодписьXDTO.author = ДанныеПодписи.КомуВыданСертификат;
		ПодписьXDTO.certificate = ДанныеПодписи.ДвоичныеДанныеСертификата;
		ПодписьXDTO.comment = ДанныеПодписи.Комментарий;
		ПодписьXDTO.date = ДанныеПодписи.ДатаПодписи;
		ПодписьXDTO.signature = ДанныеПодписи.НоваяПодписьДвоичныеДанные;
		ПодписьXDTO.signatureFileName = ДанныеПодписи.ИмяФайлаПодписи;
		ПодписьXDTO.thumbprint = ДанныеПодписи.Отпечаток;
		
		Объект.signatures.Добавить(ПодписьXDTO);
		
	КонецЦикла;
	
	Ответ = ИнтеграцияС1СДокументооборот.ЗаписатьОбъект(Прокси, Объект);
	
КонецПроцедуры

//Заполняет список файлов в карточке документа
//Параметры:
//	ФайлыXDTO - список XDTO файлов
//	Файлы - реквизит формы, содержащий таблицу значений информации о файлах
//	ГруппаФайлы - элемент формы страница, на в которой находится таблица файлов
Процедура ОбновитьСписокФайлов(ФайлыXDTO, Файлы, ГруппаФайлы) Экспорт
	
	Файлы.Очистить();
	
	// файлы
	Для каждого СведенияОФайле Из ФайлыXDTO Цикл
		НоваяСтрока = Файлы.Добавить();
		
		НоваяСтрока.Наименование = СведенияОФайле.name;
		НоваяСтрока.Расширение = СведенияОФайле.extension;
		НоваяСтрока.Описание = СведенияОФайле.description;
		НоваяСтрока.Размер = Формат(СведенияОФайле.size/1024, "ЧЦ=10; ЧН=0");
		НоваяСтрока.ПодписанЭЦП = СведенияОФайле.signed;
		НоваяСтрока.Автор = СведенияОФайле.author.name;
		НоваяСтрока.ID = СведенияОФайле.objectId.id;
		НоваяСтрока.ДатаСоздания = СведенияОФайле.creationDate;
		НоваяСтрока.ДатаМодификацииУниверсальная = СведенияОФайле.modificationDateUniversal;
		Редактируется = СведенияОФайле.editing;
		Зашифрован = СведенияОФайле.encrypted;
		
		НоваяСтрока.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(НоваяСтрока.Расширение);
	КонецЦикла;
	
	ФайлыЗаголовок = НСтр("ru = 'Файлы'");
	
	Если Файлы.Количество() <> 0 Тогда 
		ФайлыЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы (%1)'"),
			Файлы.Количество());
	КонецЕсли;
	
	ГруппаФайлы.Заголовок = ФайлыЗаголовок;
	
КонецПроцедуры

//Возвращает путь к каталогу, используемому при интеграции, из временного хранилища
//
Функция ПолучитьЛокальныйКаталогФайлов() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКаталогФайловИнтеграции", , "");
	
КонецФункции

//Возвращает максимально допустимый размер файла из соответствующей константы
//
Функция ПолучитьМаксимальныйРазмерПередаваемогоФайла() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	МаксимальныйРазмерФайлаПередачи = Константы.МаксимальныйРазмерФайлаДляПередачиВ1СДокументооборот.Получить();
	
	Если МаксимальныйРазмерФайлаПередачи = Неопределено ИЛИ МаксимальныйРазмерФайлаПередачи = 0 Тогда
		МаксимальныйРазмерФайлаПередачи = 10485760; // = 10 мб
		Константы.МаксимальныйРазмерФайлаДляПередачиВ1СДокументооборот.Установить(МаксимальныйРазмерФайлаПередачи);
	КонецЕсли;
	
	Возврат МаксимальныйРазмерФайлаПередачи;
	
КонецФункции

//Получает двоичные данные файла и помещает во временное хранилище
//Параметры:
//	ID - идентификатор файла
//	ИдентификаторФормы - идентификатор управляемой формы, из которой вызывается процедура
//Возвращает:
//	Строку адреса временного хранилища формы
Функция ПолучитьАдресФайла(ID, ИдентификаторФормы) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
	
	ОбъектID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ID, "DMFile");
	
	Запрос.objectIds.Добавить(ОбъектID);
	
	Запрос.columnSet.Добавить("objectId");
	Запрос.columnSet.Добавить("name");
	Запрос.columnSet.Добавить("binaryData");
	Запрос.columnSet.Добавить("extension");
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	ДанныеФайла = Ответ.objects[0];
	
	Адрес = ПоместитьВоВременноеХранилище(ДанныеФайла.binaryData, ИдентификаторФормы);
	Возврат Адрес;
	
КонецФункции

//Получает двоичные данные файла
//Параметры:
//	ID - идентификатор файла, данные по которго нужно получить
//Возвращает:
//	Двоичные данные файла из Докуентооборота
Функция ПолучитьДвоичныеДанныеФайла(ID) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
	
	ОбъектID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ID, "DMFile");
	Запрос.objectIds.Добавить(ОбъектID);
	
	Запрос.columnSet.Добавить("objectId");
	Запрос.columnSet.Добавить("name");
	Запрос.columnSet.Добавить("binaryData");
	Запрос.columnSet.Добавить("extension");
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	ДанныеФайла = Ответ.objects[0];
	
	Возврат ДанныеФайла.binaryData;
	
КонецФункции

//Возвращает список XDTO, содержащий данные файлов
//Параметры:
//	Файлы - массив идентификаторов файлов в Документообороте
Функция ПолучитьДвоичныеДанныеФайлов(Файлы) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
	
	Для Каждого Файл Из Файлы Цикл
		
		objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, Файл, "DMFile");
		Запрос.objectIds.Добавить(objectId);
		
	КонецЦикла;
	
	Запрос.columnSet.Добавить("objectId");
	Запрос.columnSet.Добавить("name");
	Запрос.columnSet.Добавить("binaryData");
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ;
	
КонецФункции

//Обновляет существующий файл в Документообороте
//Параметры:
//	ПараметрыСоздания - структура параметров создания файла, содержит свойства:
//	- Имя - имя файла 
//	- Расширение - расширение файла
//	- Размер - размер файла в байтах
//	- ВремяИзменения - время изменения файла
//	- ВремяИзмененияУниверсальное - время изменения файла универсальное
//	- АдресВременногоХранилищаФайла - адрес временного хранилища, содержащий двоичные данные
//	- Текст - извлеченный текст файла
//	- ВебКлиент - признак использования веб-клиента
//	- ИдентификаторФайла - идентификатор файла
//Возвращает:
//	Признак удачной записи файла в Докуаментооборот
Функция ОбновитьИзФайлаНаДиске(ПараметрыСоздания) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMUpdateRequest");
	
	Файл = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMFile");
	Файл.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ПараметрыСоздания.ИдентификаторФайла, "DMFile");
	Файл.name = ""; // имя не меняется
	
	Файл.binaryData = ПолучитьИзВременногоХранилища(ПараметрыСоздания.АдресВременногоХранилищаФайла);
	Файл.extension = ПараметрыСоздания.Расширение;
	
	Если ПараметрыСоздания.ВремяИзменения <> '00000000' Тогда
		Файл.modificationDate = ПараметрыСоздания.ВремяИзменения;
	Иначе
		Файл.modificationDate = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ПараметрыСоздания.ВремяИзменения <> '00000000' Тогда
		Файл.modificationDateUniversal = ПараметрыСоздания.ВремяИзмененияУниверсальное;
	Иначе
		Файл.modificationDateUniversal = УниверсальноеВремя(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Файл.size = ПараметрыСоздания.Размер;
	
	Если НЕ ПустаяСтрока(ПараметрыСоздания.Текст) Тогда
		Файл.text = ПараметрыСоздания.Текст;
	КонецЕсли;
	
	Запрос.objects.Добавить(Файл);
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Истина;

КонецФункции

//Возвращает структуру описания файла из Документооборота
//Параметры:
//	ID - идентификатор файла
//	Форма - управляемая форма, если задана, помещает на форму дополнительные реквизиты
Функция ПолучитьКарточкуФайла(ID, Форма = Неопределено) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMRetrieveRequest");
	
	Файл = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ID, "DMFile");
	
	Запрос.objectIds.Добавить(Файл);
	
	Запрос.columnSet.Добавить("objectId");
	Запрос.columnSet.Добавить("signed");
	Запрос.columnSet.Добавить("name");
	Запрос.columnSet.Добавить("size");
	Запрос.columnSet.Добавить("creationDate");
	Запрос.columnSet.Добавить("modificationDateUniversal");
	Запрос.columnSet.Добавить("author");
	Запрос.columnSet.Добавить("extension");
	Запрос.columnSet.Добавить("description");
	Запрос.columnSet.Добавить("editing");
	Запрос.columnSet.Добавить("encrypted");
	
	Запрос.columnSet.Добавить("signatures.author");
	Запрос.columnSet.Добавить("signatures.date");
	Запрос.columnSet.Добавить("signatures.comment");
	Запрос.columnSet.Добавить("signatures.signature");
	Запрос.columnSet.Добавить("signatures.thumbprint");
	Запрос.columnSet.Добавить("signatures.lineNumber");
	Запрос.columnSet.Добавить("signatures.signer");
	Запрос.columnSet.Добавить("signatures.certificate");
	Запрос.columnSet.Добавить("signatures.signatureFileName");
	
	Файлы = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Файлы);
	
	ОписаниеФайла = Новый Структура;
	
	СведенияОФайле = Файлы.objects[0];
		
	ОписаниеФайла.Вставить("Наименование", СведенияОФайле.name);
	ОписаниеФайла.Вставить("Расширение", СведенияОФайле.extension);
	ОписаниеФайла.Вставить("Описание", СведенияОФайле.description);
	ОписаниеФайла.Вставить("Размер", Формат(СведенияОФайле.size, "ЧЦ=10; ЧН=0"));
	ОписаниеФайла.Вставить("ПодписанЭЦП", СведенияОФайле.signed);
	ОписаниеФайла.Вставить("Автор", СведенияОФайле.author.name);
	ОписаниеФайла.Вставить("ID", СведенияОФайле.objectId.id);
	ОписаниеФайла.Вставить("ДатаСоздания", СведенияОФайле.creationDate);
	ОписаниеФайла.Вставить("ДатаМодификацииУниверсальная", СведенияОФайле.modificationDateUniversal);
	ОписаниеФайла.Вставить("Редактируется", СведенияОФайле.editing);
	ОписаниеФайла.Вставить("Зашифрован", СведенияОФайле.encrypted);
	
	Подписи = Новый Массив;
	
	Для Каждого ПодписьXDTO Из СведенияОФайле.signatures Цикл
		
		Подпись = Новый Структура;
		Подпись.Вставить("КомуВыданСертификат", ПодписьXDTO.author);
		Подпись.Вставить("ДатаПодписи", ПодписьXDTO.date);
		Подпись.Вставить("Комментарий", ПодписьXDTO.comment);
		Подпись.Вставить("Подпись", ПодписьXDTO.signature);
		Подпись.Вставить("Отпечаток", ПодписьXDTO.thumbprint);
		Подпись.Вставить("Сертификат", ПодписьXDTO.certificate);
		Подпись.Вставить("ИмяФайлаПодписи", ПодписьXDTO.signatureFileName);
		Подпись.Вставить("УстановившийПодпись", ПодписьXDTO.signer.name);
		Подпись.Вставить("УстановившийПодписьИд", ПодписьXDTO.signer.objectId.id);
		
		Подписи.Добавить(Подпись);
		
	КонецЦикла;
	
	ОписаниеФайла.Вставить("Подписи", Подписи);
	
	Если Форма <> Неопределено Тогда
		// дополнительные реквизиты
		ИнтеграцияС1СДокументооборот.ПоместитьДополнительныеРеквизитыНаФорму(Форма, СведенияОФайле);
	КонецЕсли;
	
	Возврат ОписаниеФайла;
	
КонецФункции

//Возвращает список XDTO файлов по объекту потребителю
//Параметры:
//	ИдентификаторВладельца - уникальный идентификатор объекта потребителя
//	ИмяВладельца - представление объекта потребителя
//	ТипВладельца - тип объекта потребителя (используется польное имя метаданного объекта)
//Возвращает:
//	Список объектов XDTO типа DMFile
Функция ПолучитьСписокФайловПоОбъектуПотребителю(ИдентификаторВладельца, ИмяВладельца, ТипВладельца) Экспорт

	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetFileListRequest");
	
	ОбъектВладелец = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	
	ОбъектВладелец.name = ИмяВладельца;
	ОбъектВладелец.id = Строка(ИдентификаторВладельца);
	ОбъектВладелец.type = ТипВладельца;
	
	Запрос.externalObjects.Добавить(ОбъектВладелец);
	
	Запрос.columnSet.Добавить("objectId");
	Запрос.columnSet.Добавить("signed");
	Запрос.columnSet.Добавить("name");
	Запрос.columnSet.Добавить("size");
	Запрос.columnSet.Добавить("creationDate");
	Запрос.columnSet.Добавить("modificationDateUniversal");
	Запрос.columnSet.Добавить("author");
	Запрос.columnSet.Добавить("extension");
	Запрос.columnSet.Добавить("description");
	Запрос.columnSet.Добавить("editing");
	Запрос.columnSet.Добавить("encrypted");
	
	Запрос.columnSet.Добавить("signatures.author");
	Запрос.columnSet.Добавить("signatures.date");
	Запрос.columnSet.Добавить("signatures.comment");
	Запрос.columnSet.Добавить("signatures.signature");
	Запрос.columnSet.Добавить("signatures.thumbprint");
	Запрос.columnSet.Добавить("signatures.signer");
	Запрос.columnSet.Добавить("signatures.certificate");
	Запрос.columnSet.Добавить("signatures.signatureFileName");
	
	Файлы = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Файлы);
	
	Возврат Файлы;
	
КонецФункции

//Возвращает список XDTO файлов по объекту Документооборота
//Параметры:
//	ИдентификаторВладельца - уникальный идентификатор объекта Документооборота
//	ИмяВладельца - представление объекта Документооборота
//	ТипВладельца - тип XDTO объекта Документооборта
//Возвращает:
//	Список объектов XDTO типа DMFile
Функция ПолучитьСписокФайловПоВладельцу(ИдентификаторВладельца, ИмяВладельца, ТипВладельца) Экспорт

	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetFileListByOwnerRequest");
	
	ОбъектВладелец =  ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObject");
	ОбъектВладелец.name = ИмяВладельца;
	ОбъектВладелец.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(
		Прокси, Строка(ИдентификаторВладельца), ТипВладельца);
	
	Запрос.owners.Добавить(ОбъектВладелец);
	
	Запрос.columnSet.Добавить("objectId");
	Запрос.columnSet.Добавить("signed");
	Запрос.columnSet.Добавить("name");
	Запрос.columnSet.Добавить("size");
	Запрос.columnSet.Добавить("creationDate");
	Запрос.columnSet.Добавить("modificationDateUniversal");
	Запрос.columnSet.Добавить("author");
	Запрос.columnSet.Добавить("extension");
	Запрос.columnSet.Добавить("description");
	Запрос.columnSet.Добавить("editing");
	Запрос.columnSet.Добавить("encrypted");
	
	Файлы = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Файлы);
	
	Возврат Файлы;
	
КонецФункции

//Создает XDTO объект Документооборота типа Файл (DMFile)
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	МассивПодписей - массив структур данных о подписях файла
//	Файл - структура данных файла
//Возвращает:
//	Объект XDTO типа DMFile
Функция СоздатьXDTOФайл(Прокси, МассивПодписей, Файл) Экспорт
	
	Объект = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMFile");
	Объект.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, Файл.ID, "DMFile");
	
	// только 2 поля - Имя и Описание передаем при записи
	Объект.name = Файл.Наименование;
	Объект.description = Файл.Описание;
	
	// добавление ЭЦП
	Для Каждого ДанныеПодписи Из МассивПодписей Цикл
		
		ПодписьXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMSignature");
		ЗаполнитьXDTOПодпись(Прокси, ПодписьXDTO, ДанныеПодписи);
		Объект.signatures.Добавить(ПодписьXDTO);
		
	КонецЦикла;
	
	Возврат Объект;
	
КонецФункции

//Создает в файл в Документообороте по данным из файла на диске
//Параметры:
//	ПараметрыСоздания - структура параметров создания файла
//	ID - идентификатор объекта владельца файла в Документообороте
//	Тип - тип владельца файла в Документообороте
//	Представление - представление владельца файла в Документообороте
//Возвращает:
//	ID созданного файла
Функция СоздатьИзФайлаНаДискеСервер(ПараметрыСоздания, ID, Тип, Представление) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMAddFileRequest");
	
	ОбъектВладелец = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObject");
	ОбъектВладелец.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ID, Тип);
	ОбъектВладелец.name = Представление;
	
	Запрос.owner = ОбъектВладелец;
	
	Запрос.file = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMFile");
	Запрос.file.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "", "DMFile");
	
	Запрос.file.binaryData = ПолучитьИзВременногоХранилища(ПараметрыСоздания.АдресВременногоХранилищаФайла);
	Запрос.file.extension = ПараметрыСоздания.Расширение;
	Запрос.file.modificationDate = ПараметрыСоздания.ВремяИзменения;
	Запрос.file.modificationDateUniversal = ПараметрыСоздания.ВремяИзмененияУниверсальное;
	Запрос.file.name = ПараметрыСоздания.Имя;
	Запрос.file.size = ПараметрыСоздания.Размер;
	
	Размер = Запрос.file.binaryData.Размер();
	МаксРазмерФайла = ПолучитьМаксимальныйРазмерПередаваемогоФайла();
	РазмерВМб = Размер / 1048576;
	РазмерВМбМакс = МаксРазмерФайла / 1048576;
	
	Если Размер > МаксРазмерФайла Тогда
		
		ВызватьИсключение
			   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла для передачи (%3 Мб).'"),
				 ПараметрыСоздания.Имя, 
				 ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),           
				 ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыСоздания.Текст) Тогда
		Запрос.file.text = ПараметрыСоздания.Текст;
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ.file.objectId.id; 

КонецФункции

////////////////////////////////////////
// Работа с электронными подписями

//Заполняет XDTO объект подписи по структуре подписи
//Параметры:
//	Прокси - объект для подключения к web-сервисам Документооборота
//	ПодписьXDTO - объект XDTO подписи
//	ДанныеПодписи - структура с данными подписи
Процедура ЗаполнитьXDTOПодпись(Прокси, ПодписьXDTO, ДанныеПодписи) Экспорт
	
	ПодписьXDTO.author = ДанныеПодписи.КомуВыданСертификат;
	ПодписьXDTO.certificate = ДанныеПодписи.ДвоичныеДанныеСертификата;
	ПодписьXDTO.comment = ДанныеПодписи.Комментарий;
	ПодписьXDTO.date = ДанныеПодписи.ДатаПодписи;
	ПодписьXDTO.signature = ДанныеПодписи.НоваяПодписьДвоичныеДанные;
	ПодписьXDTO.signatureFileName = ДанныеПодписи.ИмяФайлаПодписи;
	ПодписьXDTO.thumbprint = ДанныеПодписи.Отпечаток;

	Если ДанныеПодписи.Свойство("УстановившийПодпись") Тогда
		
		ПодписьXDTO.signer =  ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMUser");
		ПодписьXDTO.signer.name = ДанныеПодписи.УстановившийПодпись;
		
		ПодписьXDTO.signer.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, 
			ДанныеПодписи.УстановившийПодписьИд, "DMUser");
			
	КонецЕсли;
	
КонецПроцедуры

//Заполняет структуру данных подписи по объекту XDTO
//Параметры:
//	Подпись - структура подписи
//	ПодписьXDTO - объект XDTO подписи
Процедура ЗаполнитьПоляПодписи(Подпись, ПодписьXDTO)
	
	Подпись.Вставить("КомуВыданСертификат", ПодписьXDTO.author);
	Подпись.Вставить("ДатаПодписи", ПодписьXDTO.date);
	Подпись.Вставить("Комментарий", ПодписьXDTO.comment);
	Подпись.Вставить("Подпись", ПодписьXDTO.signature);
	Подпись.Вставить("Отпечаток", ПодписьXDTO.thumbprint);
	Подпись.Вставить("Сертификат", ПодписьXDTO.certificate);
	Подпись.Вставить("ИмяФайлаПодписи", ПодписьXDTO.signatureFileName);
	Подпись.Вставить("УстановившийПодпись", ПодписьXDTO.signer.name);
	Подпись.Вставить("УстановившийПодписьИд", ПодписьXDTO.signer.objectId.id);
	
КонецПроцедуры

//Заполняет список подписей Входящего Исходящего Внутреннего документа и его подчиненных файлов
//Параметры:
//	ПодписиXDTO - список XDTO подписей документа Документооборота
//	ФайлыXDTO - список XDTO файлов докумета Документооборота
//	Форма - форма документа Документооборота
Процедура ЗаполнитьСписокПодписейСервер(ПодписиXDTO, ФайлыXDTO, Форма) Экспорт
	
	Соответствие = Новый Соответствие;
	
	Счетчик = 0;
	Для Каждого ПодписьXDTO Из ПодписиXDTO Цикл
		
		Подпись = Новый Структура;
		ЗаполнитьПоляПодписи(Подпись, ПодписьXDTO);
		
		Подпись.Вставить("НомерСтроки", Счетчик);
		Подпись.Вставить("ОбъектИмя", Форма.Представление);
		Подпись.Вставить("ОбъектИд",  Форма.ID);
		Подпись.Вставить("ОбъектТип", Форма.Тип);
		
		Ид = Подпись.ОбъектИд;
		ДанныеВладельца = Соответствие.Получить(Ид);
		
		Если ДанныеВладельца = Неопределено Тогда
			ДанныеВладельца = Новый Структура("Тип, МассивПодписей", Подпись.ОбъектТип, Новый Массив);
			Соответствие.Вставить(Ид, ДанныеВладельца);
		КонецЕсли;
		
		ДанныеВладельца.МассивПодписей.Добавить(Подпись);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Для Каждого Файл Из ФайлыXDTO Цикл
		Счетчик = 0;
		Для Каждого ПодписьXDTO Из Файл.signatures Цикл
			Подпись = Новый Структура;
			ЗаполнитьПоляПодписи(Подпись, ПодписьXDTO);
			
			Подпись.Вставить("НомерСтроки", Счетчик);
			Подпись.Вставить("ОбъектИмя", Файл.name);
			Подпись.Вставить("ОбъектИд", Файл.objectId.id);
			Подпись.Вставить("ОбъектТип", Файл.objectId.type);
			
			Ид = Подпись.ОбъектИд;
			ДанныеВладельца = Соответствие.Получить(Ид);
			
			Если ДанныеВладельца = Неопределено Тогда
				ДанныеВладельца = Новый Структура("Тип, МассивПодписей", Подпись.ОбъектТип, Новый Массив);
				Соответствие.Вставить(Ид, ДанныеВладельца);
			КонецЕсли;
			
			ДанныеВладельца.МассивПодписей.Добавить(Подпись);
			
			Счетчик = Счетчик + 1;
		КонецЦикла;
	КонецЦикла;
	
	ВсегоПодписей = 0;
	
	Форма.ТаблицаПодписей.ПолучитьЭлементы().Очистить();
	
	ЭлементыДерева = Форма. ТаблицаПодписей.ПолучитьЭлементы();
	
	КоличествоПодписей = 0;
	
	Для Каждого ПараКлючЗначение Из Соответствие Цикл
		
		ИмяОбъекта = ПараКлючЗначение.Ключ;
		ДанныеВладельца = ПараКлючЗначение.Значение;
		
		ТипОбъекта = ДанныеВладельца.Тип;
		
		Если ТипОбъекта <> "DMFile" И ДанныеВладельца.МассивПодписей.Количество() <> 0 Тогда
			НоваяСтрока = ЭлементыДерева.Добавить();
			// для ветки дерева используем КомуВыданСертификат как Представление
			ПредставлениеТипа = ПолучитьПредставлениеТипа(ДанныеВладельца.МассивПодписей[0].ОбъектТип);
			НоваяСтрока.КомуВыданСертификат = ПредставлениеТипа + " """ + Форма.Представление + """"; 
			НоваяСтрока.ИндексКартинки = 0;  // стандартная иконка справочника
			Для Каждого Подпись Из ДанныеВладельца.МассивПодписей Цикл
				НоваяСтрокаДерева = НоваяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьСтрокуДереваПодписей(НоваяСтрокаДерева, Подпись, Форма.УникальныйИдентификатор);
				КоличествоПодписей = КоличествоПодписей + 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоПодписей = ВсегоПодписей + КоличествоПодписей;
	
	Для Каждого ПараКлючЗначение Из Соответствие Цикл
		
		ИмяОбъекта = ПараКлючЗначение.Ключ;
		ДанныеВладельца = ПараКлючЗначение.Значение;
		
		ТипОбъекта = ДанныеВладельца.Тип;
		
		Если ТипОбъекта = "DMFile" И ДанныеВладельца.МассивПодписей.Количество() <> 0 Тогда
			
			НоваяСтрока = ЭлементыДерева.Добавить();
			// для ветки дерева используем КомуВыданСертификат как Представление
			ПредставлениеТипа = ПолучитьПредставлениеТипа(ДанныеВладельца.МассивПодписей[0].ОбъектТип);
			НоваяСтрока.КомуВыданСертификат = ПредставлениеТипа + " """ + Подпись.ОбъектИмя + """"; 
			
			Отбор = Новый Структура("ID", ДанныеВладельца.МассивПодписей[0].ОбъектИд);
			СтрокаФайлов = Форма.Файлы.НайтиСтроки(Отбор);
			
			Если СтрокаФайлов.Количество() <> 0 Тогда
				НоваяСтрока.ИндексКартинки = СтрокаФайлов[0].ИндексКартинки;
			КонецЕсли;
			
			КоличествоПодписей = 0;
			
			Для Каждого Подпись Из ДанныеВладельца.МассивПодписей Цикл
				НоваяСтрокаДерева = НоваяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьСтрокуДереваПодписей(НоваяСтрокаДерева, Подпись, Форма.УникальныйИдентификатор);
				КоличествоПодписей = КоличествоПодписей + 1;
			КонецЦикла;
			
			ВсегоПодписей = ВсегоПодписей + КоличествоПодписей;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗаголовка = НСтр("ru = 'ЭЦП'");
	Если ВсегоПодписей <> 0 Тогда
		ТекстЗаголовка = ТекстЗаголовка + " (" + Строка(ВсегоПодписей) + ")";
	КонецЕсли;
	
	Форма.Элементы.ГруппаЭЦП.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

//Заполняет строку дерева на закладке ЭЦП в документе
//Параметры:
//	НоваяСтока - строка дерева значений списка подписей 
//	Подпись - структура данных с информацией о подписи
//	ИдентификаторФормы - идентификатор управляемой формы, из которой вызывается процедура
Процедура ЗаполнитьСтрокуДереваПодписей(НоваяСтрока, Подпись, ИдентификаторФормы) Экспорт
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Подпись);
	
	НоваяСтрока.Объект = Подпись.ОбъектИд;
	
	НоваяСтрока.Неверна = Ложь;
	НоваяСтрока.ИндексКартинки = -1;
	
	ДвоичныеДанные = Подпись.Подпись;
	НоваяСтрока.АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
	
	ДвоичныеДанныеСертификата = Подпись.Сертификат;
	Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
		НоваяСтрока.АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, ИдентификаторФормы);
	КонецЕсли;
	
КонецПроцедуры

//Проверяет все подписи на сервере из массива ВыделенныеСтроки
// Параметры:
//	ВыделенныеСтроки - массив идентификаторов выделенных строк таблицы подписей 
//	ТаблицаПодписей - реквизит таблицы подписей формы документа
//	АдресСлепкаДокумента - адрес временного хранилища двоичных данных документа Документооборота
Процедура ПроверитьПодписиНаСервере(Знач ВыделенныеСтроки, ТаблицаПодписей, ID, АдресСлепкаДокумента) Экспорт
	
	МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	
	СоответствиеИдОбъектаИДвоичныхДанных = Новый Соответствие;
	
	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если НЕ ПустаяСтрока(ДанныеСтроки.Объект) Тогда
			ПроверитьОднуПодписьНаСервере(ДанныеСтроки, МенеджерКриптографии, ID, 
				СоответствиеИдОбъектаИДвоичныхДанных, АдресСлепкаДокумента);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Проверяет одну электронно-цифровую подпись
//Параметры:
//	ДанныеСтроки - строка таблицы файлов или структура, содержащая идентификатор обеъекта в свойстве ОбъектИД
//	МенеджерКриптографии - объект Менеджера криптографии
//	УникальныйИдентификатор - идентификатор управляемой формы объекта Документооборота
//	СоответствиеИдОбъектаИДвоичныхДанных - соответствие идентификторов объектов и их двоичных данных 
//	АдресСлепкаДокумента - адрес временного хранения двоичных данных файла
Процедура ПроверитьОднуПодписьНаСервере(ДанныеСтроки, МенеджерКриптографии, УникальныйИдентификатор, 
	СоответствиеИдОбъектаИДвоичныхДанных, АдресСлепкаДокумента) Экспорт
	
	АдресПодписи = ДанныеСтроки.АдресПодписи;
	ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
	
	ДвоичныеДанныеФайла = СоответствиеИдОбъектаИДвоичныхДанных[ДанныеСтроки.ОбъектИд];
	
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		
		Если ДанныеСтроки.ОбъектТип = "DMFile" Тогда
			ДвоичныеДанныеФайла = ПолучитьДвоичныеДанныеФайла(ДанныеСтроки.ОбъектИд);
		Иначе	
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресСлепкаДокумента);
		КонецЕсли;
		
		СоответствиеИдОбъектаИДвоичныхДанных[ДанныеСтроки.ОбъектИд] = ДвоичныеДанныеФайла;
	КонецЕсли;
	
	Попытка
		ЭлектроннаяЦифроваяПодпись.ПроверитьПодпись(МенеджерКриптографии, ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи);
		
		ДанныеСтроки.Статус = НСтр("ru = 'Верна'");
		ДанныеСтроки.Неверна = Ложь;
	Исключение
		ДанныеСтроки.Статус = НСтр("ru = 'Не верна. '");
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Причина <> Неопределено Тогда
			ДанныеСтроки.Статус = ДанныеСтроки.Статус + Инфо.Причина.Описание;
		КонецЕсли;
		ДанныеСтроки.Неверна = Истина;
	КонецПопытки;
	
КонецПроцедуры

//Проверяет все подписи на сервере из массива ВыделенныеСтроки
//Параметры:
//	ТаблицаПодписей - таблица формы, содержащая список подписей
//	УникальныйИдентификатор - идентификатор управляемой формы объекта Документооборота
//	АдресСлепкаДокумента - адрес временного хранения двоичных данных объекта Документооборота
Процедура ПроверитьВсеПодписиНаСервере(ТаблицаПодписей, УникальныйИдентификатор, АдресСлепкаДокумента) Экспорт
	
	МенеджерКриптографии = ПолучитьМенеджерКриптографии();
	СоответствиеИдОбъектаИДвоичныхДанных = Новый Соответствие;
	
	НомераСтрок = ПолучитьМассивДанныхПодписейСервер(ТаблицаПодписей);
	Для Каждого Элемент Из НомераСтрок Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		Если НЕ ПустаяСтрока(ДанныеСтроки.Объект) Тогда
			ПроверитьОднуПодписьНаСервере(ДанныеСтроки, МенеджерКриптографии, УникальныйИдентификатор, 
				СоответствиеИдОбъектаИДвоичныхДанных, АдресСлепкаДокумента);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Получает объекты, которые требуется подписать ЭЦП, заполняет массив для подписей
//Параметры:
//	ОбъектИД - идентификатор документа Докуменотооборота
//	ОбъектТип - тип объекта XDTO документа Документообороте
//	МассивОбъектовДляПодписи - заполняемый массив структур объектов для подписи
//	Файлы - массив идентификаторов файлов в Документообороте
//	ДвоичныеДанные - двоичные данные документа Документооборота
Процедура ПолучитьОбъектыДляПодписи(ОбъектИд, ОбъектТип, МассивОбъектовДляПодписи, Файлы, ДвоичныеДанные) Экспорт 
	
	//добавим в массив документ
	ОбъектДляПодписи = Новый Структура("ДвоичныеДанные, ОбъектСсылкаДляПодписи, ОбъектТип", 
		ДвоичныеДанные, ОбъектИд, ОбъектТип);
	МассивОбъектовДляПодписи.Добавить(ОбъектДляПодписи);
	
	//добавим все подчиненные файлы
	ДанныеФайлов = ПолучитьДвоичныеДанныеФайлов(Файлы);
	
	Для Каждого Файл Из ДанныеФайлов.objects Цикл
		
		ОбъектДляПодписи = Новый Структура("ДвоичныеДанные, ОбъектСсылкаДляПодписи, ОбъектТип", 
			Файл.binaryData, Файл.objectId.id, Файл.objectId.type);
		МассивОбъектовДляПодписи.Добавить(ОбъектДляПодписи);
		
	КонецЦикла;
	
КонецПроцедуры

//Заполняет список файлов копированием присоединенных файлов или Файлов из внешнего объекта
//Параметры:
//	ВнешнийОбъект - ссылка на объект потребитель
//	ID - идентификатор объекта Документооборота
//	Тип - тип XDTO объекта Документооборота
//	Представление - представление объекта Документооборота
//	УникальныйИдентификатор - идентификатор управляемой формы объекта Документооборота
Процедура ЗаполнитьКопированием(ВнешнийОбъект, ID, Тип, Представление, УникальныйИдентификатор) Экспорт
	
	МассивФайлов = ФайловыеФункцииСлужебный.ПолучитьХранимыеФайлы(ВнешнийОбъект);
	
	Для Каждого ДанныеФайла Из МассивФайлов Цикл
	
		ПараметрыСоздания = Новый Структура("ВебКлиент");

		ВремяИзменения = МестноеВремя(ДанныеФайла.ДатаМодификацииУниверсальная);
		ВремяИзмененияУниверсальное = ДанныеФайла.ДатаМодификацииУниверсальная;
		Размер = ДанныеФайла.Размер;
		ИмяБезРасширения = ДанныеФайла.Наименование;
		Расширение = ДанныеФайла.Расширение;

		// Поместим Файл в ВременноеХранилище
		Если ТипЗнч(ДанныеФайла.ДвоичныеДанныеФайла) = Тип("Строка") И ЭтоАдресВременногоХранилища(ДанныеФайла.ДвоичныеДанныеФайла) Тогда
			АдресВременногоХранилищаФайла = ДанныеФайла.ДвоичныеДанныеФайла;
		Иначе // двоичные данные
			АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДанныеФайла.ДвоичныеДанныеФайла, УникальныйИдентификатор);
		КонецЕсли;

		ПараметрыСоздания.Вставить("Имя", ИмяБезРасширения);
		ПараметрыСоздания.Вставить("Расширение", Расширение);
		ПараметрыСоздания.Вставить("Размер", Размер);
		ПараметрыСоздания.Вставить("АдресВременногоХранилищаФайла", АдресВременногоХранилищаФайла);
		ПараметрыСоздания.Вставить("ВремяИзменения", ВремяИзменения);
		ПараметрыСоздания.Вставить("ВремяИзмененияУниверсальное", ВремяИзмененияУниверсальное);
		ПараметрыСоздания.Вставить("Текст", ДанныеФайла.Текст);
		
		ИдентификаторСозданногоФайла = СоздатьИзФайлаНаДискеСервер(ПараметрыСоздания, ID, Тип, Представление);
		
	КонецЦикла;
	
КонецПроцедуры

//Получает менеджер криптографии
//
Функция ПолучитьМенеджерКриптографии() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПровайдерЭЦП = Константы.ПровайдерЭЦП.Получить();
	ПутьМодуляКриптографии = ЭлектроннаяЦифроваяПодписьПовтИсп.ПутьМодуляКриптографии();
	ТипПровайдераЭЦП = Константы.ТипПровайдераЭЦП.Получить();
	АлгоритмПодписи = Константы.АлгоритмПодписи.Получить();
	АлгоритмХеширования = Константы.АлгоритмХеширования.Получить();
	АлгоритмШифрования = Константы.АлгоритмШифрования.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	МенеджерКриптографии = Новый МенеджерКриптографии(ПровайдерЭЦП, ПутьМодуляКриптографии, ТипПровайдераЭЦП);
	МенеджерКриптографии.АлгоритмПодписи = АлгоритмПодписи;
	МенеджерКриптографии.АлгоритмХеширования = АлгоритмХеширования;
	МенеджерКриптографии.АлгоритмШифрования = АлгоритмШифрования;
	
	Возврат МенеджерКриптографии;
	
КонецФункции

//Возвращает значение константы "ИспользоватьЭлектронныеЦифровыеПодписи"
Функция ПолучитьИспользоватьЭлектронныеЦифровыеПодписи() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.ИспользоватьЭлектронныеЦифровыеПодписи.Получить();
	
КонецФункции

//Подписывает документ электронной подписью
//Параметры:
//	ДобавленныеПодписи - массив структур новых подписей файла
//	ТаблицаПодписей - таблица подписей формы документа Документооборота
//Возвращает:
//	Соответствие строк объектов новым подписям
Функция ПодписатьДокумент(ДобавленныеПодписи, ТаблицаПодписей) Экспорт
	
	// получаем массив всех подписей
	НомераСтрок = ПолучитьМассивДанныхПодписейСервер(ТаблицаПодписей);
	
	МассивДанныхПодписей = Новый Массив; // подписи, оставшиеся после удаления 
	
	// формируем массив данных подписи
	Для Каждого Элемент Из НомераСтрок Цикл
		
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		Если НЕ ПустаяСтрока(ДанныеСтроки.Объект) Тогда
			
			ПодписьДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи);
			ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресСертификата);
			
			ДанныеПодписи = Новый Структура;
			ДанныеПодписи.Вставить("ОбъектСсылка", ДанныеСтроки.ОбъектИд);
			ДанныеПодписи.Вставить("НоваяПодписьДвоичныеДанные", ПодписьДвоичныеДанные);
			ДанныеПодписи.Вставить("Отпечаток", ДанныеСтроки.Отпечаток);
			ДанныеПодписи.Вставить("ДатаПодписи", ДанныеСтроки.ДатаПодписи);
			ДанныеПодписи.Вставить("Комментарий", ДанныеСтроки.Комментарий);
			ДанныеПодписи.Вставить("ИмяФайлаПодписи", ДанныеСтроки.ИмяФайлаПодписи);
			ДанныеПодписи.Вставить("КомуВыданСертификат", ДанныеСтроки.КомуВыданСертификат);
			ДанныеПодписи.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);
			ДанныеПодписи.Вставить("мОбъектТип", ДанныеСтроки.ОбъектТип);
			ДанныеПодписи.Вставить("УстановившийПодпись", ДанныеСтроки.УстановившийПодпись); 
			ДанныеПодписи.Вставить("УстановившийПодписьИд", ДанныеСтроки.УстановившийПодписьИд);
			
			МассивДанныхПодписей.Добавить(ДанныеПодписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ДанныеПодписи Из ДобавленныеПодписи Цикл
		МассивДанныхПодписей.Добавить(ДанныеПодписи);
	КонецЦикла;
	
	Соответствие = Новый Соответствие;
	
	// Из массива удаленных строим массив объектов, где изменились подписи - в том числе тех, где не осталось ни одной подписи
	Для Каждого СтрокаДобавленнойПодписи Из ДобавленныеПодписи Цикл
		
		Ид = СтрокаДобавленнойПодписи.ОбъектСсылка;
		
		ДанныеВладельца = Соответствие.Получить(Ид);
		
		Если ДанныеВладельца = Неопределено Тогда
			ДанныеВладельца = Новый Структура("Тип, МассивПодписей", СтрокаДобавленнойПодписи.ОбъектТип, Новый Массив);
			Соответствие.Вставить(Ид, ДанныеВладельца);
		КонецЕсли;
		
	КонецЦикла;
	
	// Распределяем массив всех оставшихся подписей по объектам
	Для Каждого Подпись Из МассивДанныхПодписей Цикл
		
		Ид = Подпись.ОбъектСсылка;
		ДанныеВладельца = Соответствие.Получить(Ид);
		
		Если ДанныеВладельца <> Неопределено Тогда
			ДанныеВладельца.МассивПодписей.Добавить(Подпись);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

//Удаляет подписи документа и его файлов
//Параметры:
//	УдаляемыеПодписи - массив структур новых подписей файла
//	ТаблицаПодписей - таблица подписей формы документа Документооборота
//Возвращает:
//	Соответствие объектов и удаленных подписей
Функция УдалитьПодписиДокумента(УдаляемыеПодписи, ТаблицаПодписей) Экспорт
	
	// получаем массив всех подписей
	НомераСтрок = ПолучитьМассивДанныхПодписейСервер(ТаблицаПодписей);
	
	МассивДанныхПодписей = Новый Массив; // подписи, оставшиеся после удаления
	
	// формируем массив данных подписи
	Для Каждого Элемент Из НомераСтрок Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		Если НЕ ПустаяСтрока(ДанныеСтроки.Объект) Тогда
			
			// по GUID объекта + номер строки - удаляем из массива всех те, что надо удалить
			ПодписьУдалена = Ложь;
			Для Каждого СтрокаУдаленнойПодписи Из УдаляемыеПодписи Цикл
				Если СтрокаУдаленнойПодписи.ОбъектСсылка = ДанныеСтроки.ОбъектИд И СтрокаУдаленнойПодписи.НомерСтроки = ДанныеСтроки.НомерСтроки Тогда
					ПодписьУдалена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ПодписьУдалена Тогда 
				
				ПодписьДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи);
				ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресСертификата);
				
				ДанныеПодписи = Новый Структура;
				ДанныеПодписи.Вставить("ОбъектСсылка", ДанныеСтроки.ОбъектИд);
				ДанныеПодписи.Вставить("НоваяПодписьДвоичныеДанные", ПодписьДвоичныеДанные);
				ДанныеПодписи.Вставить("Отпечаток", ДанныеСтроки.Отпечаток);
				ДанныеПодписи.Вставить("ДатаПодписи", ДанныеСтроки.ДатаПодписи);
				ДанныеПодписи.Вставить("Комментарий", ДанныеСтроки.Комментарий);
				ДанныеПодписи.Вставить("ИмяФайлаПодписи", ДанныеСтроки.ИмяФайлаПодписи);
				ДанныеПодписи.Вставить("КомуВыданСертификат", ДанныеСтроки.КомуВыданСертификат);
				ДанныеПодписи.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);
				ДанныеПодписи.Вставить("ОбъектТип", ДанныеСтроки.ОбъектТип);
				ДанныеПодписи.Вставить("УстановившийПодпись", ДанныеСтроки.УстановившийПодпись);
				ДанныеПодписи.Вставить("УстановившийПодписьИд", ДанныеСтроки.УстановившийПодписьИд);
				
				МассивДанныхПодписей.Добавить(ДанныеПодписи);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Соответствие = Новый Соответствие;
	
	// Из массива удаленных строим массив объектов, где изменились подписи - в том числе тех, где не осталось ни одной подписи
	Для Каждого СтрокаУдаленнойПодписи Из УдаляемыеПодписи Цикл
		Ид = СтрокаУдаленнойПодписи.ОбъектСсылка;
		ДанныеВладельца = Соответствие.Получить(Ид);
		Если ДанныеВладельца = Неопределено Тогда
			ДанныеВладельца = Новый Структура("Тип, МассивПодписей", СтрокаУдаленнойПодписи.ОбъектТип, Новый Массив);
			Соответствие.Вставить(Ид, ДанныеВладельца);
		КонецЕсли;
	КонецЦикла;
	
	// Распределяем массив всех оставшихся подписей по объектам
	Для Каждого Подпись Из МассивДанныхПодписей Цикл
		Ид = Подпись.ОбъектСсылка;
		ДанныеВладельца = Соответствие.Получить(Ид);
		Если ДанныеВладельца <> Неопределено Тогда
			ДанныеВладельца.МассивПодписей.Добавить(Подпись);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

//Преобразует 2-уровневое дерево в массив
//Параметры:
//	ТаблицаПодписей - дерево значений формы, содержащая список подписей
Функция ПолучитьМассивДанныхПодписейСервер(ТаблицаПодписей) Экспорт
	
	ДанныеСтрок = Новый Массив;
	
	ЭлементыПервогоУровня = ТаблицаПодписей.ПолучитьЭлементы();
	
	Для Каждого СтрокаУровняОдин Из ЭлементыПервогоУровня Цикл
		ЭлементыВторогоУровня = СтрокаУровняОдин.ПолучитьЭлементы();
		
		Для Каждого Строка Из ЭлементыВторогоУровня Цикл
			ДанныеСтрок.Добавить(Строка.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеСтрок;
	
КонецФункции

//Получает таблицу значений выделенных строк подписей по выделенным срокам
//Параметры:
//	ВыделенныеСтроки - массив индексов выделенных строк подписей
//	ТаблицаПодписей - таблица формы, содержащая список подписей
//Возвращает:
//	Таблица значения с номерами строк, типами и идентификаторами подписей 
Функция ПолучитьВыделенныеПодписи(ВыделенныеСтроки, ТаблицаПодписей) Экспорт
	
	ТаблицаВыделенныеСтроки = Новый ТаблицаЗначений;
	
	ТаблицаВыделенныеСтроки.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаВыделенныеСтроки.Колонки.Добавить("ОбъектСсылка", Новый ОписаниеТипов("Строка"));
	ТаблицаВыделенныеСтроки.Колонки.Добавить("ОбъектТип", Новый ОписаниеТипов("Строка"));
	
	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если НЕ ПустаяСтрока(ДанныеСтроки.Объект) Тогда
			
			НоваяСтрока = ТаблицаВыделенныеСтроки.Добавить();
			НоваяСтрока.НомерСтроки = ДанныеСтроки.НомерСтроки;
			НоваяСтрока.ОбъектСсылка = ДанныеСтроки.ОбъектИд;
			НоваяСтрока.ОбъектТип = ДанныеСтроки.ОбъектТип;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаВыделенныеСтроки;
	
КонецФункции

//Возвращает массив подписей файла
//Параметры:
//	ИдентификаторФайла - идентификатор объекта Документооборота
//	ТаблицаПодписей - таблица подписей объекта
//Возвращает:
//	Массив структур существующих подписей объекта
Функция ПолучитьМассивСуществующихПодписейФайла(ИдентификаторФайла, ТаблицаПодписей) Экспорт
	
	// получаем массив всех подписей
	НомераСтрок = ПолучитьМассивДанныхПодписейСервер(ТаблицаПодписей);
	
	МассивДанныхПодписей = Новый Массив; // подписи, оставшиеся после удаления
	
	// формируем массив данных подписи
	Для Каждого Элемент Из НомераСтрок Цикл
		
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		
		Если НЕ ПустаяСтрока(ДанныеСтроки.Объект) Тогда
			Если ДанныеСтроки.ОбъектИд = ИдентификаторФайла Тогда 
				
				ПодписьДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи);
				ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресСертификата);
				
				ДанныеПодписи = Новый Структура;
				ДанныеПодписи.Вставить("ОбъектСсылка", ДанныеСтроки.ОбъектИд);
				ДанныеПодписи.Вставить("НоваяПодписьДвоичныеДанные", ПодписьДвоичныеДанные);
				ДанныеПодписи.Вставить("Отпечаток", ДанныеСтроки.Отпечаток);
				ДанныеПодписи.Вставить("ДатаПодписи", ДанныеСтроки.ДатаПодписи);
				ДанныеПодписи.Вставить("Комментарий", ДанныеСтроки.Комментарий);
				ДанныеПодписи.Вставить("ИмяФайлаПодписи", ДанныеСтроки.ИмяФайлаПодписи);
				ДанныеПодписи.Вставить("КомуВыданСертификат", ДанныеСтроки.КомуВыданСертификат);
				ДанныеПодписи.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата);
				ДанныеПодписи.Вставить("ОбъектТип", ДанныеСтроки.ОбъектТип);
				ДанныеПодписи.Вставить("УстановившийПодпись", ДанныеСтроки.УстановившийПодпись);
				ДанныеПодписи.Вставить("УстановившийПодписьИд", ДанныеСтроки.УстановившийПодписьИд);
				
				МассивДанныхПодписей.Добавить(ДанныеПодписи);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДанныхПодписей;
	
КонецФункции
