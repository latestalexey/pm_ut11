////////////////////////////////////////////////////////////////////////////////
// Обработка сообщений обмена данными в модели сервиса
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выполняет обработку тела сообщения из канала в соответствии с алгоритмом текущего канала сообщений
//
// Параметры:
//  <КаналСообщений> (обязательный). Тип:Строка. Идентификатор канала сообщений, из которого получено сообщение.
//  <ТелоСообщения> (обязательный). Тип: Произвольный. Тело сообщения, полученное из канала, которое подлежит обработке.
//  <Отправитель> (обязательный). Тип: ПланОбменаСсылка.ОбменСообщениями. Конечная точка, которая является отправителем сообщения.
//
Процедура ОбработатьСообщение(Знач КаналСообщений, Знач ТелоСообщения, Знач Отправитель) Экспорт
	
	ТипСообщения = СообщенияВМоделиСервиса.ТипСообщенияПоИмениКанала(КаналСообщений);
	
	Сообщение = СообщенияВМоделиСервиса.ПрочитатьСообщениеИзНетипизированногоТела(ТелоСообщения);
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Сообщение.Body.Zone);
	
	Словарь = ОбменДаннымиВМоделиСервисаПовтИсп;
	
	СообщенияВМоделиСервиса.ЗаписатьСобытиеНачалоОбработки(Сообщение);
	
	Если ТипСообщения = Словарь.СообщениеНастройкаОбменаШаг1УспешноЗавершена() Тогда
		
		НастройкаОбменаШаг1УспешноЗавершена(Сообщение, Отправитель);
		
	ИначеЕсли ТипСообщения = Словарь.СообщениеНастройкаОбменаШаг2УспешноЗавершена() Тогда
		
		НастройкаОбменаШаг2УспешноЗавершена(Сообщение, Отправитель);
		
	ИначеЕсли ТипСообщения = Словарь.СообщениеОшибкаНастройкиОбменаШаг1() Тогда
		
		ОшибкаНастройкиОбменаШаг1(Сообщение, Отправитель);
		
	ИначеЕсли ТипСообщения = Словарь.СообщениеОшибкаНастройкиОбменаШаг2() Тогда
		
		ОшибкаНастройкиОбменаШаг2(Сообщение, Отправитель);
		
	ИначеЕсли ТипСообщения = Словарь.СообщениеЗагрузкаСообщенияОбменаУспешноЗавершена() Тогда
		
		ЗагрузкаСообщенияОбменаУспешноЗавершена(Сообщение, Отправитель);
		
	ИначеЕсли ТипСообщения = Словарь.СообщениеОшибкаЗагрузкиСообщенияОбмена() Тогда
		
		ОшибкаЗагрузкиСообщенияОбмена(Сообщение, Отправитель);
		
	ИначеЕсли ТипСообщения = Словарь.СообщениеПолучениеДанныхКорреспондентаУспешноЗавершено() Тогда
		
		ПолучениеДанныхКорреспондентаУспешноЗавершено(Сообщение, Отправитель);
		
	ИначеЕсли ТипСообщения = Словарь.СообщениеПолучениеОбщихДанныхУзловКорреспондентаУспешноЗавершено() Тогда
		
		ПолучениеОбщихДанныхУзловКорреспондентаУспешноЗавершено(Сообщение, Отправитель);
		
	ИначеЕсли ТипСообщения = Словарь.СообщениеОшибкаПолученияДанныхКорреспондента() Тогда
		
		ОшибкаПолученияДанныхКорреспондента(Сообщение, Отправитель);
		
	ИначеЕсли ТипСообщения = Словарь.СообщениеОшибкаПолученияОбщихДанныхУзловКорреспондента() Тогда
		
		ОшибкаПолученияОбщихДанныхУзловКорреспондента(Сообщение, Отправитель);
		
	ИначеЕсли ТипСообщения = Словарь.СообщениеПолучениеПараметровУчетаКорреспондентаУспешноЗавершено() Тогда
		
		ПолучениеПараметровУчетаКорреспондентаУспешноЗавершено(Сообщение, Отправитель);
		
	ИначеЕсли ТипСообщения = Словарь.СообщениеОшибкаПолученияПараметровУчетаКорреспондента() Тогда
		
		ОшибкаПолученияПараметровУчетаКорреспондента(Сообщение, Отправитель);
		
	Иначе
		
		СообщенияВМоделиСервиса.ОшибкаНеизвестноеИмяКанала(КаналСообщений);
		
	КонецЕсли;
	
	СообщенияВМоделиСервиса.ЗаписатьСобытиеОкончаниеОбработки(Сообщение);
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Настройка обмена

Процедура НастройкаОбменаШаг1УспешноЗавершена(Сообщение, Отправитель)
	
	ОбменДаннымиВМоделиСервиса.ЗафиксироватьУспешноеВыполнениеСессии(Сообщение, ПредставлениеНастройкаСинхронизацииШаг1());
	
КонецПроцедуры

Процедура НастройкаОбменаШаг2УспешноЗавершена(Сообщение, Отправитель)
	
	ОбменДаннымиВМоделиСервиса.ЗафиксироватьУспешноеВыполнениеСессии(Сообщение, ПредставлениеНастройкаСинхронизацииШаг2());
	
КонецПроцедуры

Процедура ОшибкаНастройкиОбменаШаг1(Сообщение, Отправитель)
	
	ОбменДаннымиВМоделиСервиса.ЗафиксироватьНеуспешноеВыполнениеСессии(Сообщение, ПредставлениеНастройкаСинхронизацииШаг1());
	
КонецПроцедуры

Процедура ОшибкаНастройкиОбменаШаг2(Сообщение, Отправитель)
	
	ОбменДаннымиВМоделиСервиса.ЗафиксироватьНеуспешноеВыполнениеСессии(Сообщение, ПредставлениеНастройкаСинхронизацииШаг2());
	
КонецПроцедуры

Процедура ЗагрузкаСообщенияОбменаУспешноЗавершена(Сообщение, Отправитель)
	
	ОбменДаннымиВМоделиСервиса.ЗафиксироватьУспешноеВыполнениеСессии(Сообщение, ПредставлениеЗагрузкаСообщенияОбмена());
	
КонецПроцедуры

Процедура ОшибкаЗагрузкиСообщенияОбмена(Сообщение, Отправитель)
	
	ОбменДаннымиВМоделиСервиса.ЗафиксироватьУспешноеВыполнениеСессии(Сообщение, ПредставлениеЗагрузкаСообщенияОбмена());
	
КонецПроцедуры

// Получение данных корреспондента

Процедура ПолучениеДанныхКорреспондентаУспешноЗавершено(Сообщение, Отправитель)
	
	ОбменДаннымиВМоделиСервиса.СохранитьДанныеСессии(Сообщение, ПредставлениеПолучениеДанныхКорреспондента());
	
КонецПроцедуры

Процедура ПолучениеОбщихДанныхУзловКорреспондентаУспешноЗавершено(Сообщение, Отправитель)
	
	ОбменДаннымиВМоделиСервиса.СохранитьДанныеСессии(Сообщение, ПредставлениеПолучениеОбщихДанныхУзловКорреспондента());
	
КонецПроцедуры

Процедура ОшибкаПолученияДанныхКорреспондента(Сообщение, Отправитель)
	
	ОбменДаннымиВМоделиСервиса.ЗафиксироватьНеуспешноеВыполнениеСессии(Сообщение, ПредставлениеПолучениеДанныхКорреспондента());
	
КонецПроцедуры

Процедура ОшибкаПолученияОбщихДанныхУзловКорреспондента(Сообщение, Отправитель)
	
	ОбменДаннымиВМоделиСервиса.ЗафиксироватьНеуспешноеВыполнениеСессии(Сообщение, ПредставлениеПолучениеОбщихДанныхУзловКорреспондента());
	
КонецПроцедуры

// Получение параметров учета корреспондента

Процедура ПолучениеПараметровУчетаКорреспондентаУспешноЗавершено(Сообщение, Отправитель)
	
	ОбменДаннымиВМоделиСервиса.СохранитьДанныеСессии(Сообщение, ПредставлениеПолучениеПараметровУчетаКорреспондента());
	
КонецПроцедуры

Процедура ОшибкаПолученияПараметровУчетаКорреспондента(Сообщение, Отправитель)
	
	ОбменДаннымиВМоделиСервиса.ЗафиксироватьНеуспешноеВыполнениеСессии(Сообщение, ПредставлениеПолучениеПараметровУчетаКорреспондента());
	
КонецПроцедуры

// Вспомогательные функции

Функция ПредставлениеНастройкаСинхронизацииШаг1()
	
	Возврат НСтр("ru = 'Настройка синхронизации, шаг 1.'");
	
КонецФункции

Функция ПредставлениеНастройкаСинхронизацииШаг2()
	
	Возврат НСтр("ru = 'Настройка синхронизации, шаг 2.'");
	
КонецФункции

Функция ПредставлениеЗагрузкаСообщенияОбмена()
	
	Возврат НСтр("ru = 'Загрузка сообщения обмена.'");
	
КонецФункции

Функция ПредставлениеПолучениеДанныхКорреспондента()
	
	Возврат НСтр("ru = 'Получение данных корреспондента.'");
	
КонецФункции

Функция ПредставлениеПолучениеОбщихДанныхУзловКорреспондента()
	
	Возврат НСтр("ru = 'Получение общих данных узлов корреспондента.'");
	
КонецФункции

Функция ПредставлениеПолучениеПараметровУчетаКорреспондента()
	
	Возврат НСтр("ru = 'Получение параметров учета корреспондента.'");
	
КонецФункции
