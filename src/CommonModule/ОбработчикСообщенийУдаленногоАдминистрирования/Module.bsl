////////////////////////////////////////////////////////////////////////////////
// ОбработчикКаналовСообщенийУдаленногоАдминистрирования.
//
////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выполняет обработку тела сообщения из канала в соответствии с алгоритмом текущего канала сообщений
//
// Параметры:
//  <КаналСообщений> (обязательный). Тип:Строка. Идентификатор канала сообщений, из которого получено сообщение.
//  <ТелоСообщения> (обязательный). Тип: Произвольный. Тело сообщения, полученное из канала, которое подлежит обработке.
//  <Отправитель> (обязательный). Тип: ПланОбменаСсылка.ОбменСообщениями. Конечная точка, которая является отправителем сообщения.
//
Процедура ОбработатьСообщение(Знач КаналСообщений, Знач ТелоСообщения, Знач Отправитель) Экспорт
	
	ТипСообщения = СообщенияВМоделиСервиса.ТипСообщенияПоИмениКанала(КаналСообщений);
	
	Сообщение = СообщенияВМоделиСервиса.ПрочитатьСообщениеИзНетипизированногоТела(ТелоСообщения);
	
	Пакеты = Новый Массив;
	Пакеты.Добавить(РаботаВМоделиСервисаПовтИсп.ПакетУдаленноеАдминистрирование_1_0_3_1());
	Пакеты.Добавить(РаботаВМоделиСервисаПовтИсп.ПакетУдаленноеАдминистрирование_1_0_3_2());
	
	Словарь = РаботаВМоделиСервисаПовтИсп;
	
	СообщениеОбработано = Ложь;
	СообщенияВМоделиСервиса.ЗаписатьСобытиеНачалоОбработки(Сообщение);
	
	Для Каждого Пакет Из Пакеты Цикл
	
		Если ТипСообщения = Словарь.СообщениеОбновитьПользователя(Пакет) Тогда
			СообщениеОбработано = Истина;
			ОбновитьПользователя(Сообщение, Отправитель);
		ИначеЕсли ТипСообщения = Словарь.СообщениеПодготовитьОбластьДанных(Пакет) Тогда
			СообщениеОбработано = Истина;
			ПодготовитьОбластьДанных(Сообщение, Отправитель, Ложь);
		ИначеЕсли ТипСообщения = Словарь.СообщениеПодготовитьОбластьДанныхИзВыгрузки(Пакет) Тогда
			СообщениеОбработано = Истина;
			ПодготовитьОбластьДанных(Сообщение, Отправитель, Истина);
		ИначеЕсли ТипСообщения = Словарь.СообщениеУдалитьОбластьДанных(Пакет) Тогда
			СообщениеОбработано = Истина;
			УдалитьОбластьДанных(Сообщение, Отправитель);
		ИначеЕсли ТипСообщения = Словарь.СообщениеУстановитьДоступКОбластиДанных(Пакет) Тогда
			СообщениеОбработано = Истина;
			УстановитьДоступКОбластиДанных(Сообщение, Отправитель);
		ИначеЕсли ТипСообщения = Словарь.СообщениеУстановитьКонечнуюТочкуМенеджераСервиса(Пакет) Тогда
			СообщениеОбработано = Истина;
			УстановитьКонечнуюТочкуМенеджераСервиса(Сообщение, Отправитель);
		ИначеЕсли ТипСообщения = Словарь.СообщениеУстановитьПараметрыИБ(Пакет) Тогда
			СообщениеОбработано = Истина;
			УстановитьПараметрыИБ(Сообщение, Отправитель);
		ИначеЕсли ТипСообщения = Словарь.СообщениеУстановитьПараметрыОбластиДанных(Пакет) Тогда
			СообщениеОбработано = Истина;
			УстановитьПараметрыОбластиДанных(Сообщение, Отправитель);
		ИначеЕсли ТипСообщения = Словарь.СообщениеУстановитьПолныеПраваОбластиДанных(Пакет) Тогда
			СообщениеОбработано = Истина;
			УстановитьПолныеПраваОбластиДанных(Сообщение, Отправитель);
		ИначеЕсли ТипСообщения = Словарь.СообщениеУстановитьПраваПользователяПоУмолчанию(Пакет) Тогда
			СообщениеОбработано = Истина;
			УстановитьПраваПользователяПоУмолчанию(Сообщение, Отправитель);
		ИначеЕсли ТипСообщения = Словарь.СообщениеУстановитьРейтингОбластейДанных(Пакет) Тогда
			СообщениеОбработано = Истина;
			УстановитьРейтингОбластейДанных(Сообщение, Отправитель);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не СообщениеОбработано Тогда
		
		СообщенияВМоделиСервиса.ОшибкаНеизвестноеИмяКанала(КаналСообщений);
		
	КонецЕсли;
	
	СообщенияВМоделиСервиса.ЗаписатьСобытиеОкончаниеОбработки(Сообщение);
	
	Если ОбщегоНазначения.ИспользованиеРазделителяСеанса() Тогда
		ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////////
// Управление пользователями

// Обработчик тела {http://www.1c.ru/SaaS/RemoteAdministration/App/1.0.2.1}UpdateUser
//
Процедура ОбновитьПользователя(Сообщение, Отправитель)
	
	ОписаниеПользователя = Сообщение.Body;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЯзыкПользователя = ПолучитьЯзыкПоКоду(ОписаниеПользователя.Language);
	
	Если ОписаниеПользователя.Установлено("EMail") Тогда
		Почта = ОписаниеПользователя.EMail;
	Иначе
		Почта = "";
	КонецЕсли;
	
	Если ОписаниеПользователя.Установлено("Phone") Тогда
		Телефон = ОписаниеПользователя.Phone;
	Иначе
		Телефон = "";
	КонецЕсли;
	
	СтруктураАдресаЭП = ПолучитьСтруктуруАдресаЭлектроннойПочты(Почта);
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ОписаниеПользователя.Zone);
	
	НачатьТранзакцию();
	Попытка
		Если ОписаниеПользователя.Установлено("UserApplicationID")
			И ЗначениеЗаполнено(ОписаниеПользователя.UserApplicationID) Тогда
			
			ПользовательОбластиДанных = Справочники.Пользователи.ПолучитьСсылку(ОписаниеПользователя.UserApplicationID);
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ПользовательОбластиДанных);
			Блокировка.Заблокировать();
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Пользователи.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Пользователи КАК Пользователи
			|ГДЕ
			|	Пользователи.ИдентификаторПользователяСервиса = &ИдентификаторПользователяСервиса";
			Запрос.УстановитьПараметр("ИдентификаторПользователяСервиса", ОписаниеПользователя.UserServiceID);
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
			Блокировка.Заблокировать();
			
			Результат = Запрос.Выполнить();
			Если Результат.Пустой() Тогда
				ПользовательОбластиДанных = Неопределено;
			Иначе
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ПользовательОбластиДанных = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПользовательОбластиДанных) Тогда
			ПользовательОбъект = Справочники.Пользователи.СоздатьЭлемент();
			ПользовательОбъект.ИдентификаторПользователяСервиса = ОписаниеПользователя.UserServiceID;
		Иначе
			ПользовательОбъект = ПользовательОбластиДанных.ПолучитьОбъект();
		КонецЕсли;
		
		ПользовательОбъект.Наименование = ОписаниеПользователя.FullName;
		
		ОбновитьАдресЭлектроннойПочты(ПользовательОбъект, Почта, СтруктураАдресаЭП);
		
		ОбновитьТелефон(ПользовательОбъект, Телефон);
		
		ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		
		ОписаниеПользователяИБ.Имя = ОписаниеПользователя.Name;
		
		ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
		ОписаниеПользователяИБ.АутентификацияOpenID = Истина;
		ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;

		ОписаниеПользователяИБ.СохраняемоеЗначениеПароля = ОписаниеПользователя.StoredPasswordValue;
		
		ОписаниеПользователяИБ.Язык = ЯзыкПользователя;
		
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		
		ПользовательОбъект.ДополнительныеСвойства.Вставить("ОбработкаСообщенияКаналаУдаленногоАдминистрирования");
		ПользовательОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьСтруктуруАдресаЭлектроннойПочты(Знач АдресЭлектроннойПочты)
	
	Если ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		
		Попытка
			СтруктураАдресаЭП = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресЭлектроннойПочты);
		Исключение
			ШаблонСообщения = НСтр("ru = 'Указан некорректный адрес электронной почты: %1
				|Ошибка: %2'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
				АдресЭлектроннойПочты, ИнформацияОбОшибке().Описание);
			ВызватьИсключение(ТекстСообщения);
		КонецПопытки;
		
		Возврат СтруктураАдресаЭП;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьАдресЭлектроннойПочты(Знач ПользовательОбъект, Знач Адрес, Знач СтруктураАдресаЭП)
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	
	СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Найти(ВидКИ, "Вид");
	Если СтруктураАдресаЭП = Неопределено Тогда
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			ПользовательОбъект.КонтактнаяИнформация.Удалить(СтрокаТабличнойЧасти);
		КонецЕсли;
	Иначе
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Добавить();
			СтрокаТабличнойЧасти.Вид = ВидКИ;
		КонецЕсли;
		СтрокаТабличнойЧасти.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		СтрокаТабличнойЧасти.Представление = Адрес;
		
		Если СтруктураАдресаЭП.Количество() > 0 Тогда
			СтрокаТабличнойЧасти.АдресЭП = СтруктураАдресаЭП[0].Адрес;
			
			Поз = Найти(СтрокаТабличнойЧасти.АдресЭП, "@");
			Если Поз <> 0 Тогда
				СтрокаТабличнойЧасти.ДоменноеИмяСервера = Сред(СтрокаТабличнойЧасти.АдресЭП, Поз + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


// Обработчик тела {http://www.1c.ru/SaaS/RemoteAdministration/App/1.0.2.1}SetFullControl
//
Процедура УстановитьПолныеПраваОбластиДанных(Сообщение, Отправитель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Тело = Сообщение.Body;
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Тело.Zone);
	
	НачатьТранзакцию();
	Попытка
		ПользовательОбластиДанных = ПолучитьПользователяОбластиПоИдентификаторуПользователяСервиса(Тело.UserServiceID);
		
		Если ПользователиСлужебный.ЗапретРедактированияРолей()
			И Метаданные.ОбщиеМодули.Найти("УправлениеДоступом") <> Неопределено Тогда
			// Используется управление доступом
			
			ИмяСправочника = "ГруппыДоступа";
			
			ГруппаАдминистраторы = Справочники[ИмяСправочника].Администраторы;
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппыДоступа");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ГруппаАдминистраторы);
			Блокировка.Заблокировать();
			
			ГруппаОбъект = ГруппаАдминистраторы.ПолучитьОбъект();
			
			СтрокаПользователь = ГруппаОбъект.Пользователи.Найти(ПользовательОбластиДанных, "Пользователь");
			Если Тело.Value Тогда
				Если СтрокаПользователь = Неопределено Тогда
					СтрокаПользователь = ГруппаОбъект.Пользователи.Добавить();
					СтрокаПользователь.Пользователь = ПользовательОбластиДанных;
				КонецЕсли;
			Иначе
				Если СтрокаПользователь <> Неопределено Тогда
					ГруппаОбъект.Пользователи.Удалить(СтрокаПользователь);
				КонецЕсли;
			КонецЕсли;
			ГруппаОбъект.Записать();
			
		Иначе
			
			ПользовательИБ = ПолучитьПользователяИБПоПользователюОбластиДанных(ПользовательОбластиДанных);
			
			РольПолныеПрава = Метаданные.Роли.ПолныеПрава;
			Если Тело.Value Тогда
				Если НЕ ПользовательИБ.Роли.Содержит(РольПолныеПрава) Тогда
					ПользовательИБ.Роли.Добавить(РольПолныеПрава);
				КонецЕсли;
			Иначе
				Если ПользовательИБ.Роли.Содержит(РольПолныеПрава) Тогда
					ПользовательИБ.Роли.Удалить(РольПолныеПрава);
				КонецЕсли;
			КонецЕсли;
			
			ПользователиСлужебный.ЗаписатьПользователяИнформационнойБазы(ПользовательИБ);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьПользователяОбластиПоИдентификаторуПользователяСервиса(Знач ИдентификаторПользователяСервиса)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяСервиса = &ИдентификаторПользователяСервиса";
	Запрос.УстановитьПараметр("ИдентификаторПользователяСервиса", ИдентификаторПользователяСервиса);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		Результат = Запрос.Выполнить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если Результат.Пустой() Тогда
		ШаблонСообщения = НСтр("ru = 'Не найден пользователь с идентификатором пользователя сервиса %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИдентификаторПользователяСервиса);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0].Ссылка;
	
КонецФункции

Функция ПолучитьПользователяИБПоПользователюОбластиДанных(Знач ПользовательОбластиДанных)
	
	ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательОбластиДанных, "ИдентификаторПользователяИБ");
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ);
	Если ПользовательИБ = Неопределено Тогда
		ШаблонСообщения = НСтр("ru = 'Для пользователя области данных с идентификатором %1 не существует пользователя информационной базы'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ПользовательОбластиДанных.УникальныйИдентификатор());
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Возврат ПользовательИБ;
	
КонецФункции

Функция ПолучитьЯзыкПоКоду(Знач КодЯзыка)
	
	Если ЗначениеЗаполнено(КодЯзыка) Тогда
		
		Для каждого Язык Из Метаданные.Языки Цикл
			Если Язык.КодЯзыка = КодЯзыка Тогда
				Возврат Язык.Имя;
			КонецЕсли;
		КонецЦикла;
		
		ШаблонСообщения = НСтр("ru = 'Неподдерживаемый код языка: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Язык);
		ВызватьИсключение(ТекстСообщения);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Обработчик тела {http://www.1c.ru/SaaS/RemoteAdministration/App/1.0.2.1}SetApplicationAccess
//
Процедура УстановитьДоступКОбластиДанных(Сообщение, Отправитель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Тело = Сообщение.Body;
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Тело.Zone);
	
	НачатьТранзакцию();
	Попытка
		ПользовательОбластиДанных = ПолучитьПользователяОбластиПоИдентификаторуПользователяСервиса(Тело.UserServiceID);
		
		ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательОбластиДанных, "ИдентификаторПользователяИБ");
		
		Если Тело.Value Тогда
			Если НЕ ЗначениеЗаполнено(ИдентификаторПользователяИБ)
				ИЛИ ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ИдентификаторПользователяИБ) = Неопределено Тогда
				
				ЯзыкПользователяИБ = ПолучитьЯзыкПоКоду(Тело.Language);
				
				ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
				ОписаниеПользователяИБ.Вставить("Действие", "Записать");
				ОписаниеПользователяИБ.Имя = Тело.Name;
				ОписаниеПользователяИБ.Язык = ЯзыкПользователяИБ;
				ОписаниеПользователяИБ.СохраняемоеЗначениеПароля = Тело.StoredPasswordValue;
				ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
				ОписаниеПользователяИБ.АутентификацияOpenID = Истина;
				ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
				
				ПользовательОбъект = ПользовательОбластиДанных.ПолучитьОбъект();
				ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
				ПользовательОбъект.ДополнительныеСвойства.Вставить("ОбработкаСообщенияКаналаУдаленногоАдминистрирования");
				ПользовательОбъект.Записать();
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ИдентификаторПользователяИБ) Тогда
				ОписаниеПользователяИБ = Новый Структура;
				ОписаниеПользователяИБ.Вставить("Действие", "Удалить");
				
				ПользовательОбъект = ПользовательОбластиДанных.ПолучитьОбъект();
				ПользовательОбъект.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
				ПользовательОбъект.ДополнительныеСвойства.Вставить("ОбработкаСообщенияКаналаУдаленногоАдминистрирования");
				ПользовательОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик тела {http://www.1c.ru/SaaS/RemoteAdministration/App/1.0.2.1}SetDefaultUserRights
//
Процедура УстановитьПраваПользователяПоУмолчанию(Сообщение, Отправитель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Тело = Сообщение.Body;
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Тело.Zone);
	
	НачатьТранзакцию();
	Попытка
		ПользовательОбластиДанных = ПолучитьПользователяОбластиПоИдентификаторуПользователяСервиса(Тело.UserServiceID);
		РаботаВМоделиСервисаПереопределяемый.УстановитьПраваПоУмолчанию(ПользовательОбластиДанных);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Управление областями данных

// Обработчик тела {http://www.1c.ru/SaaS/RemoteAdministration/App/1.0.2.1}PrepareApplication
//
Процедура ПодготовитьОбластьДанных(Знач Сообщение, Знач Отправитель, Знач ИзВыгрузки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Тело = Сообщение.Body;
	
	НачатьТранзакцию();
	Попытка
		Если НЕ ЗначениеЗаполнено(Константы.РежимИспользованияИнформационнойБазы.Получить()) Тогда
			ТекстСообщения = НСтр("ru = 'Не установлен режим работы информационной базы'");
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		Элемент = Блокировка.Добавить("РегистрСведений.ОбластиДанных");
		Элемент.УстановитьЗначение("ОбластьДанных", Тело.Zone);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ОбластиДанных.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОбластьДанных = Тело.Zone;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			Если МенеджерЗаписи.Статус = Перечисления.СтатусыОбластейДанных.Удалена Тогда
				ШаблонСообщения = НСтр("ru = 'Область данных %1 удалена'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Тело.Zone);
				ВызватьИсключение(ТекстСообщения);
			ИначеЕсли МенеджерЗаписи.Статус = Перечисления.СтатусыОбластейДанных.КУдалению Тогда
				ШаблонСообщения = НСтр("ru = 'Область данных %1 в процессе удаления'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Тело.Zone);
				ВызватьИсключение(ТекстСообщения);
			ИначеЕсли МенеджерЗаписи.Статус = Перечисления.СтатусыОбластейДанных.Новая Тогда
				ШаблонСообщения = НСтр("ru = 'Область данных %1 в процессе подготовки к использованию'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Тело.Zone);
				ВызватьИсключение(ТекстСообщения);
			ИначеЕсли МенеджерЗаписи.Статус = Перечисления.СтатусыОбластейДанных.Используется Тогда
				ШаблонСообщения = НСтр("ru = 'Область данных %1 используется.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Тело.Zone);
				ВызватьИсключение(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
		
		МенеджерЗаписи.ОбластьДанных = Тело.Zone;
		МенеджерЗаписи.Статус = Перечисления.СтатусыОбластейДанных.Новая;
		МенеджерЗаписи.ИдентификаторВыгрузки = Тело.DataFileId;
		МенеджерЗаписи.Повтор = 0;
		МенеджерЗаписи.Вариант = ?(ИзВыгрузки, "", Тело.Kind);
		
		МенеджерЗаписи.Записать();
		
		ПараметрыМетода = Новый Массив;
		ПараметрыМетода.Добавить(Тело.Zone);
		
		ПараметрыМетода.Добавить(МенеджерЗаписи.ИдентификаторВыгрузки);
		Если Не ИзВыгрузки Тогда
			ПараметрыМетода.Добавить(Тело.Kind);
		КонецЕсли;
		
		ОчередьЗаданий.ЗапланироватьВыполнениеЗадания(
			"РаботаВМоделиСервиса.ПодготовитьОбластьДанныхКИспользованию", ПараметрыМетода, "1",, Тело.Zone);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик тела {http://www.1c.ru/SaaS/RemoteAdministration/App/1.0.2.1}DeleteApplication
//
Процедура УдалитьОбластьДанных(Сообщение, Отправитель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Тело = Сообщение.Body;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Элемент = Блокировка.Добавить("РегистрСведений.ОбластиДанных");
		Элемент.УстановитьЗначение("ОбластьДанных", Тело.Zone);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ОбластиДанных.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОбластьДанных = Тело.Zone;
		МенеджерЗаписи.Прочитать();
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			ШаблонСообщения = НСтр("ru = 'Область данных %1 не существует.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Тело.Zone);
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		МенеджерЗаписи.ОбластьДанных = Тело.Zone;
		МенеджерЗаписи.Статус = Перечисления.СтатусыОбластейДанных.КУдалению;
		МенеджерЗаписи.Повтор = 0;
		
		МенеджерЗаписи.Записать();
		
		ПараметрыМетода = Новый Массив;
		ПараметрыМетода.Добавить(Тело.Zone);
		
		ОчередьЗаданий.ЗапланироватьВыполнениеЗадания(
			"РаботаВМоделиСервиса.ОчиститьОбластьДанных", ПараметрыМетода, "1",, Тело.Zone);

		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик тела {http://www.1c.ru/SaaS/RemoteAdministration/App/1.0.2.1}SetApplicationParams
//
Процедура УстановитьПараметрыОбластиДанных(Сообщение, Отправитель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Тело = Сообщение.Body;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Элемент = Блокировка.Добавить("РегистрСведений.ОбластиДанных");
		Элемент.УстановитьЗначение("ОбластьДанных", Тело.Zone);
		Блокировка.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ОбластиДанных.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОбластьДанных = Тело.Zone;
		МенеджерЗаписи.Прочитать();
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			ШаблонСообщения = НСтр("ru = 'Область данных %1 не существует.'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Тело.Zone);
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		МенеджерЗаписи.Представление = Тело.Presentation;
		
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Тело.Zone);
		
		Если ЗначениеЗаполнено(Тело.TimeZone) Тогда
			УстановитьЧасовойПоясИнформационнойБазы(Тело.TimeZone);
		Иначе
			УстановитьЧасовойПоясИнформационнойБазы();
		КонецЕсли;
		
		МенеджерЗаписи.ЧасовойПояс = Тело.TimeZone;
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если Не ПустаяСтрока(Тело.Presentation) Тогда
		
		ОбновитьСвойстваПредопределенныхУзлов(Тело.Presentation);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСвойстваПредопределенныхУзлов(Знач Наименование)
	
	Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		
		Если ОбменДаннымиПовтИсп.ПланОбменаИспользуетсяВМоделиСервиса(ПланОбмена.Имя) Тогда
			
			ЭтотУзел = ПланыОбмена[ПланОбмена.Имя].ЭтотУзел();
			
			СвойстваУзла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭтотУзел, "Код, Наименование");
			
			Если ПустаяСтрока(СвойстваУзла.Код) Тогда
				
				ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();
				ЭтотУзелОбъект.Код = ОбменДаннымиВМоделиСервиса.КодУзлаПланаОбменаВСервисе(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
				ЭтотУзелОбъект.Наименование = Наименование;
				ЭтотУзелОбъект.Записать();
				
			ИначеЕсли СвойстваУзла.Наименование <> Наименование Тогда
				
				ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();
				ЭтотУзелОбъект.Наименование = Наименование;
				ЭтотУзелОбъект.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьРейтингОбластейДанных(Сообщение, Отправитель)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Тело = Сообщение.Body;
	
	Набор = РегистрыСведений.РейтингАктивностиОбластейДанных.СоздатьНаборЗаписей();
	
	ТаблицаРейтинга = Набор.Выгрузить();
	Для каждого РейтингОбласти Из Тело.Item Цикл
		СтрокаРейтинга = ТаблицаРейтинга.Добавить();
		СтрокаРейтинга.ОбластьДанных = РейтингОбласти.Zone;
		СтрокаРейтинга.Рейтинг = РейтингОбласти.Rating;
	КонецЦикла;
	
	Если Тело.SetAllZones Тогда
		Набор.Загрузить(ТаблицаРейтинга);
		Набор.Записать();
	Иначе
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РейтингАктивностиОбластейДанных");
		ЭлементБлокировки.ИсточникДанных = ТаблицаРейтинга;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ОбластьДанных", "ОбластьДанных");
		НачатьТранзакцию();
		
		Попытка
			Блокировка.Заблокировать();
			
			Для каждого СтрокаРейтинга Из ТаблицаРейтинга Цикл
				Набор.Очистить();
				Набор.Отбор.ОбластьДанных.Установить(СтрокаРейтинга.ОбластьДанных);
				Запись = Набор.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, СтрокаРейтинга);
				Набор.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Управление информационной базой

// Обработчик тела {http://www.1c.ru/SaaS/RemoteAdministration/App/1.0.2.1}SetIBParams
// 
Процедура УстановитьПараметрыИБ(Сообщение, Отправитель)
	
	Тело = Сообщение.Body;
	
	Параметры = СериализаторXDTO.ПрочитатьXDTO(Тело.Params);
	
	НачатьТранзакцию();
	Попытка
		ТаблицаПараметров = РаботаВМоделиСервиса.ПолучитьТаблицуПараметровИБ();
		
		ИзменяемыеПараметры = Новый Структура;
		
		// Проверка корректности списка параметров
		Для каждого КлючИЗначение Из Параметры Цикл
			
			СтрокаПараметра = ТаблицаПараметров.Найти(КлючИЗначение.Ключ, "Имя");
			Если СтрокаПараметра = Неопределено Тогда
				ШаблонСообщения = НСтр("ru = 'Не известное имя параметра %1'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КлючИЗначение.Ключ);
				ЗаписьЖурналаРегистрации("УдаленноеАдминистрирование.УстановитьПараметрыИБ",
					УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
				Продолжить;
			ИначеЕсли СтрокаПараметра.ЗапретЗаписи Тогда
				ШаблонСообщения = НСтр("ru = 'Параметр %1 может использоваться только для чтения'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, КлючИЗначение.Ключ);
				ВызватьИсключение(ТекстСообщения);
			КонецЕсли;
			
			ИзменяемыеПараметры.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			
		КонецЦикла;
		
		СтандартныеПодсистемыПереопределяемый.ПриУстановкеЗначенийПараметровИБ(ИзменяемыеПараметры);
		РаботаВМоделиСервисаПереопределяемый.ПриУстановкеЗначенийПараметровИБ(ИзменяемыеПараметры);
		
		Для каждого КлючИЗначение Из ИзменяемыеПараметры Цикл
			
			Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Установка параметров ИБ'"), 
			УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обработчик тела {http://www.1c.ru/SaaS/RemoteAdministration/App/1.0.2.1}SetServiceManagerEndPoint
//
Процедура УстановитьКонечнуюТочкуМенеджераСервиса(Сообщение, Отправитель)
	
	Константы.КонечнаяТочкаМенеджераСервиса.Установить(Отправитель);
	
	ОбщегоНазначения.УстановитьПараметрыРазделенияИнформационныйБазы(Истина);
	
КонецПроцедуры

Процедура ОбновитьТелефон(Знач ПользовательОбъект, Знач Телефон)
	
	ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
	
	СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Найти(ВидКИ, "Вид");
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = ПользовательОбъект.КонтактнаяИнформация.Добавить();
		СтрокаТабличнойЧасти.Вид = ВидКИ;
	КонецЕсли;
	СтрокаТабличнойЧасти.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	СтрокаТабличнойЧасти.Представление = Телефон;
	
КонецПроцедуры
