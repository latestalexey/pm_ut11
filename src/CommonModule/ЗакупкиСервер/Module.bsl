////////////////////////////////////////////////////////////////////////////////
// Модуль "ЗакупкиСервер", содержит процедуры и функции для 
// получения значений реквизитов для подстановки в документы закупки
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Процедуры инициализации правил закупок.

// Возвращает структуру условий закупок по торговому соглашению.
//
// Параметры:
// Соглашение - Ссылка на соглашение,по которому необходимо получить стандартные условия закупок
//
// Возвращаемое значение:
// Структура.
// Структура, включающая условия продаж
//
Функция ПолучитьУсловияЗакупок(Знач Соглашение,
	                           Знач УчитыватьГруппыСкладов=Ложь,
	                           Знач ИсключитьГруппыСкладовДоступныеВЗаказах=Ложь) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоглашениеСПоставщиком.Ссылка             КАК Соглашение,
	|	СоглашениеСПоставщиком.Партнер            КАК Партнер,
	|	СоглашениеСПоставщиком.Контрагент         КАК Контрагент,
	|	СоглашениеСПоставщиком.Организация        КАК Организация,
	|	СоглашениеСПоставщиком.Валюта             КАК Валюта,
	|	СоглашениеСПоставщиком.ЦенаВключаетНДС    КАК ЦенаВключаетНДС,
	|	СоглашениеСПоставщиком.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ВЫБОР
	|		КОГДА
	|			НЕ СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		КОГДА
	|			СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|			И &УчитыватьГруппыСкладов
	|			И СоглашениеСПоставщиком.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ                                               КАК Склад,
	|	СоглашениеСПоставщиком.ФормаОплаты                  КАК ФормаОплаты,
	|	СоглашениеСПоставщиком.ПорядокОплаты                КАК ПорядокОплаты,
	|	СоглашениеСПоставщиком.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	СоглашениеСПоставщиком.СрокПоставки                 КАК СрокПоставки,
	|	СоглашениеСПоставщиком.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	СоглашениеСПоставщиком.РегистрироватьЦеныПоУсловиям КАК РегистрироватьЦеныПоУсловиям,
	|	СоглашениеСПоставщиком.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	СоглашениеСПоставщиком.СпособРасчетаВознаграждения  КАК СпособРасчетаВознаграждения,
	|	СоглашениеСПоставщиком.ПроцентВознаграждения        КАК ПроцентВознаграждения,
	|	СоглашениеСПоставщиком.УдержатьВознаграждение       КАК УдержатьВознаграждение,
	|	
	|	СоглашениеСПоставщиком.ИспользуютсяДоговорыКонтрагентов КАК ИспользуютсяДоговорыКонтрагентов,
	|	СоглашениеСПоставщиком.ПорядокРасчетов                  КАК ПорядокРасчетов,
	|	СоглашениеСПоставщиком.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
	|	СоглашениеСПоставщиком.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
	|	СоглашениеСПоставщиком.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю
	|
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
	|ГДЕ
	|	СоглашениеСПоставщиком.Ссылка = &Соглашение";
	
	Запрос.УстановитьПараметр("Соглашение",             Соглашение);
	Запрос.УстановитьПараметр("ВыборГруппыСкладов",     Справочники.Склады.ВариантыВыбораГруппыСкладов(ИсключитьГруппыСкладовДоступныеВЗаказах));
	Запрос.УстановитьПараметр("УчитыватьГруппыСкладов", УчитыватьГруппыСкладов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	СтруктураРеквизитов = ПолучитьСтруктуруУсловийЗакупок();
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Возвращает дату последнего этапа по графику.
//
// Параметры:
// ДатаДокумента - Дата - дата, от которой необходимо получить последнюю дату по графику
// ГрафикОплаты  - СправочникСсылка.ГрафикиОплаты -ссылка на график оплаты
//
// Возвращаемое значение:
// Число.
// Последняя дата по графику с учетом календаря
//
Функция ПолучитьПоследнююДатуПоГрафику(Знач ДатаДокумента, Знач СоглашениеСПоставщиком) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг) КАК Сдвиг,
	|	ЭтапыГрафикаОплаты.Ссылка.Календарь КАК Календарь,
	|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаДокумента, ДЕНЬ, ЕСТЬNULL(МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг), 0)), ДЕНЬ) КАК ДатаПлатежа
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &СоглашениеСПоставщиком
	|	И ЭтапыГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыГрафикаОплаты.Ссылка,
	|	ЭтапыГрафикаОплаты.Ссылка.Календарь");
	
	Запрос.УстановитьПараметр("СоглашениеСПоставщиком",  СоглашениеСПоставщиком);
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Календарь = Выборка.Календарь;
	Если НЕ ЗначениеЗаполнено(Календарь) Тогда
		Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	КонецЕсли;
	Если ЗначениеЗаполнено(Календарь) Тогда
		ДатаПлатежа = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, ДатаДокумента, Выборка.Сдвиг);
	Иначе
		ДатаПлатежа = Выборка.ДатаПлатежа;
	КонецЕсли;
		
	Возврат ДатаПлатежа;
	
КонецФункции

// Возвращает структуру условий закупок по партнеру.
//
// Параметры:
// Партнер           - Ссылка на партнера, для которого необходимо получить условия закупок
// ПараметрыОтбора   - Структура - содержит параметры отбора соглашения
//
// Возвращаемое значение:
// Структура.
// Структура, включающая условия закупок
//
Функция ПолучитьУсловияЗакупокПоУмолчанию(Знач Партнер, Знач ПараметрыОтбора = Неопределено) Экспорт
	
	ВсеПараметрыОтбора = Новый Структура();
	ВсеПараметрыОтбора.Вставить("ТолькоДляЗакупки",                        Истина);
	ВсеПараметрыОтбора.Вставить("ТолькоДействующее",                       Истина);
	ВсеПараметрыОтбора.Вставить("УчитыватьГруппыСкладов",                  Ложь);
	ВсеПараметрыОтбора.Вставить("ИсключитьГруппыСкладовДоступныеВЗаказах", Ложь);
	ВсеПараметрыОтбора.Вставить("ХозяйственныеОперации",                   Неопределено);
	ВсеПараметрыОтбора.Вставить("ВыбранноеСоглашение",   Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
	
	Если ПараметрыОтбора <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВсеПараметрыОтбора, ПараметрыОтбора);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	СоглашениеСПоставщиком.Ссылка                       КАК Соглашение,
	|	СоглашениеСПоставщиком.Партнер                      КАК Партнер,
	|	СоглашениеСПоставщиком.Контрагент                   КАК Контрагент,
	|	СоглашениеСПоставщиком.Организация                  КАК Организация,
	|	СоглашениеСПоставщиком.Валюта                       КАК Валюта,
	|	СоглашениеСПоставщиком.ЦенаВключаетНДС              КАК ЦенаВключаетНДС,
	|	СоглашениеСПоставщиком.НалогообложениеНДС           КАК НалогообложениеНДС,
	|	СоглашениеСПоставщиком.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	СоглашениеСПоставщиком.РегистрироватьЦеныПоУсловиям КАК РегистрироватьЦеныПоУсловиям,
	|	СоглашениеСПоставщиком.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	ВЫБОР
	|		КОГДА
	|			НЕ СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		КОГДА
	|			СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|			И &УчитыватьГруппыСкладов
	|			И СоглашениеСПоставщиком.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ                                               КАК Склад,
	|	СоглашениеСПоставщиком.ФормаОплаты                  КАК ФормаОплаты,
	|	СоглашениеСПоставщиком.ПорядокОплаты                КАК ПорядокОплаты,
	|	СоглашениеСПоставщиком.СрокПоставки                 КАК СрокПоставки,
	|	СоглашениеСПоставщиком.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	СоглашениеСПоставщиком.СпособРасчетаВознаграждения  КАК СпособРасчетаВознаграждения,
	|	СоглашениеСПоставщиком.ПроцентВознаграждения        КАК ПроцентВознаграждения,
	|	СоглашениеСПоставщиком.УдержатьВознаграждение       КАК УдержатьВознаграждение,
	|	
	|	СоглашениеСПоставщиком.ИспользуютсяДоговорыКонтрагентов КАК ИспользуютсяДоговорыКонтрагентов,
	|	СоглашениеСПоставщиком.ПорядокРасчетов                  КАК ПорядокРасчетов,
	|	СоглашениеСПоставщиком.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
	|	СоглашениеСПоставщиком.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
	|	СоглашениеСПоставщиком.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
	|ГДЕ
	|	НЕ СоглашениеСПоставщиком.ПометкаУдаления И
	|		(НЕ &ОтборХозяйственныеОперации ИЛИ СоглашениеСПоставщиком.ХозяйственнаяОперация В (&ХозяйственныеОперации)) И
	|" + ?(ВсеПараметрыОтбора.ТолькоДляЗакупки," СоглашениеСПоставщиком.ДоступноДляЗакупки И ","") + "
	|" + ?(ВсеПараметрыОтбора.ТолькоДействующее," СоглашениеСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует) И","") + "
	|	СоглашениеСПоставщиком.Партнер = &Партнер;
	|
	|////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	СоглашениеСПоставщиком.Ссылка                       КАК Соглашение,
	|	СоглашениеСПоставщиком.Партнер                      КАК Партнер,
	|	СоглашениеСПоставщиком.Контрагент                   КАК Контрагент,
	|	СоглашениеСПоставщиком.Организация                  КАК Организация,
	|	СоглашениеСПоставщиком.Валюта                       КАК Валюта,
	|	СоглашениеСПоставщиком.ЦенаВключаетНДС              КАК ЦенаВключаетНДС,
	|	СоглашениеСПоставщиком.НалогообложениеНДС           КАК НалогообложениеНДС,
	|	СоглашениеСПоставщиком.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	СоглашениеСПоставщиком.РегистрироватьЦеныПоУсловиям КАК РегистрироватьЦеныПоУсловиям,
	|	СоглашениеСПоставщиком.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	ВЫБОР
	|		КОГДА
	|			НЕ СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		КОГДА
	|			СоглашениеСПоставщиком.Склад.ЭтоГруппа
	|			И &УчитыватьГруппыСкладов
	|			И СоглашениеСПоставщиком.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
	|		ТОГДА
	|			СоглашениеСПоставщиком.Склад
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ                                               КАК Склад,
	|	СоглашениеСПоставщиком.ФормаОплаты                  КАК ФормаОплаты,
	|	СоглашениеСПоставщиком.ПорядокОплаты                КАК ПорядокОплаты,
	|	СоглашениеСПоставщиком.СрокПоставки                 КАК СрокПоставки,
	|	СоглашениеСПоставщиком.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	СоглашениеСПоставщиком.СпособРасчетаВознаграждения  КАК СпособРасчетаВознаграждения,
	|	СоглашениеСПоставщиком.ПроцентВознаграждения        КАК ПроцентВознаграждения,
	|	СоглашениеСПоставщиком.УдержатьВознаграждение       КАК УдержатьВознаграждение,
	|	
	|	СоглашениеСПоставщиком.ИспользуютсяДоговорыКонтрагентов КАК ИспользуютсяДоговорыКонтрагентов,
	|	СоглашениеСПоставщиком.ПорядокРасчетов                  КАК ПорядокРасчетов,
	|	СоглашениеСПоставщиком.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
	|	СоглашениеСПоставщиком.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
	|	СоглашениеСПоставщиком.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
	|ГДЕ
	|	НЕ СоглашениеСПоставщиком.ПометкаУдаления И
	|	(НЕ &ОтборХозяйственныеОперации ИЛИ СоглашениеСПоставщиком.ХозяйственнаяОперация В (&ХозяйственныеОперации)) И
	|	СоглашениеСПоставщиком.Ссылка = &ВыбранноеСоглашение И
	|" + ?(ВсеПараметрыОтбора.ТолькоДляЗакупки," СоглашениеСПоставщиком.ДоступноДляЗакупки И ","") + "
	|" + ?(ВсеПараметрыОтбора.ТолькоДействующее," СоглашениеСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует) И","") + "
	|	СоглашениеСПоставщиком.Партнер = &Партнер
	|";
	
	Запрос.УстановитьПараметр("Партнер",                    Партнер);
	Запрос.УстановитьПараметр("ВыборГруппыСкладов",         Справочники.Склады.ВариантыВыбораГруппыСкладов(ВсеПараметрыОтбора.ИсключитьГруппыСкладовДоступныеВЗаказах));
	Запрос.УстановитьПараметр("УчитыватьГруппыСкладов",     ВсеПараметрыОтбора.УчитыватьГруппыСкладов);
	Запрос.УстановитьПараметр("ОтборХозяйственныеОперации", ВсеПараметрыОтбора.ХозяйственныеОперации <> Неопределено);
	Запрос.УстановитьПараметр("ХозяйственныеОперации",      ВсеПараметрыОтбора.ХозяйственныеОперации);
	Запрос.УстановитьПараметр("ВыбранноеСоглашение",        ВсеПараметрыОтбора.ВыбранноеСоглашение);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[0].Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса[0].Выбрать();
	
	// Если в выборке одно соглашение - возвращаем его
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
	ИначеЕсли Выборка.Количество() > 1 Тогда
		Если НЕ РезультатЗапроса[1].Пустой() Тогда
			Выборка = РезультатЗапроса[1].Выбрать();
			Выборка.Следующий();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРеквизитов = ПолучитьСтруктуруУсловийЗакупок();
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры проверки корректности заполнения документов.

// Проверяет корректность заполнения документа закупки в соответствии с массивом проверок
// Вызывается из процедуры документа "ОбработкаПроведения"
//
// Параметры:
// ДокументЗакупки  - ДокументОбъект, для которого необходимо осуществить проверки
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура ПроверитьКорректностьЗаполненияДокументаЗакупки(ДокументЗакупки, Отказ) Экспорт
	
	// Если документ уже заполнен некорректно - не будем выполнять запросы	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверим нужно ли проверять диапазон допустимых цен
	ВидМаксимальноДопустимыхЦенЗакупки  = Константы.ВидМаксимальноДопустимыхЦенЗакупки.Получить();
	ПроверятьДиапазонЦен                = ЗначениеЗаполнено(ВидМаксимальноДопустимыхЦенЗакупки);
	ОтклонениеОтУсловийЗакупок          = Пользователи.РолиДоступны("ОтклонениеОтУсловийЗакупок");
	ЕстьОшибкиСоглашениеНеУказано       = Ложь;
	ИспользоватьРучныеСкидки            = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	ИспользоватьНоменклатуруПоставщиков = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков");
	
	// Проверим, нужно ли запрещать закрытие заказов без полного поступления/оплаты
	КонтролироватьРасчеты     = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты");
	КонтролироватьПоступление = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления");
	
	ВсеСтрокиОтменены = Ложь;
	ВозвратМногооборотнойТары          = Ложь;
	
	// Заполним массив необходимых проверок в зависимости от типа документа
	
	МассивПроверок = Новый Массив();
	ИмяТаблицы     = ДокументЗакупки.Метаданные().ПолноеИмя();
	
	Если ИмяТаблицы = "Документ.ЗаказПоставщику" Тогда
		
		СтрутураОтбора    = Новый Структура("Отменено", Истина);
		ОтмененныеСтроки  = ДокументЗакупки.Товары.НайтиСтроки(СтрутураОтбора);
		ВсеСтрокиОтменены = (ОтмененныеСтроки.Количество() = ДокументЗакупки.Товары.Количество());
		
		НужноСогласовать = ?(ВсеСтрокиОтменены, Ложь, Не ДокументЗакупки.Согласован И Не ОтклонениеОтУсловийЗакупок);
	ИначеЕсли ИмяТаблицы = "Документ.ДоверенностьНаПолучениеТоваров" Тогда
		НужноСогласовать = Ложь;
	ИначеЕсли ИмяТаблицы = "Документ.ВыкупВозвратнойТарыУПоставщика" Тогда
		НужноСогласовать = Ложь;
	Иначе
		НужноСогласовать = Не ДокументЗакупки.Согласован И Не ОтклонениеОтУсловийЗакупок;
	КонецЕсли;
	
	// СОГЛАШЕНИЕ С ПОСТАВЩИКОМ
	
	Если ИмяТаблицы = "Справочник.СоглашенияСПоставщиками" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		ВозвратМногооборотнойТары = ДокументЗакупки.ВозвращатьМногооборотнуюТару;
		
		Если ПроверятьДиапазонЦен И НужноСогласовать И
			ДокументЗакупки.Статус <> Перечисления.СтатусыСоглашенийСПоставщиками.НеСогласовано Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			
		КонецЕсли;
		
		Если ДокументЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
			МассивПроверок.Добавить("НаличиеУслуг");
		КонецЕсли;
		
	// ЗАКАЗ ПОСТАВЩИКУ
		
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказПоставщику" Тогда
		
		СоглашениеУказано = ЗначениеЗаполнено(ДокументЗакупки.Соглашение);
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КорректностьЗаполненияСклада");
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		ВозвратМногооборотнойТары = ДокументЗакупки.ВернутьМногооборотнуюТару;
		
		Если ИспользоватьНоменклатуруПоставщиков Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПоставщика");
		КонецЕсли;
		
		Если НужноСогласовать И
			ДокументЗакупки.Статус <> Перечисления.СтатусыЗаказовПоставщикам.НеСогласован Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если СоглашениеУказано Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
				МассивПроверок.Добавить("СоответствиеШапкиУсловиямЗакупок");
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямЗакупок");
				
			Иначе
				
				ЕстьОшибкиСоглашениеНеУказано = Истина;
				
			КонецЕсли;
			
			Если ИспользоватьРучныеСкидки И ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
				МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
			Если ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
				И ДокументЗакупки.СуммаДокумента <> 0
				И ДокументЗакупки.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
				МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
				МассивПроверок.Добавить("КорректностьКоличестваЭтаповГрафикаОплаты");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДокументЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
			МассивПроверок.Добавить("НаличиеУслуг");
		Иначе
			МассивПроверок.Добавить("КорректностьЗаполненияАналитикиУслуг");
		КонецЕсли;
		
		Если ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
				И ДокументЗакупки.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт и Не ВсеСтрокиОтменены Тогда
				
			Если ДокументЗакупки.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов и КонтролироватьРасчеты Тогда
				МассивПроверок.Добавить("КонтрольЗавершенияРасчетов");
			КонецЕсли;
			
			Если КонтролироватьПоступление Тогда
				МассивПроверок.Добавить("КонтрольПоступления");
			КонецЕсли;
			
		КонецЕсли
		
	// ПОСТУПЛЕНИЕ ТОВАРОВ И УСЛУГ
		
	ИначеЕсли ИмяТаблицы = "Документ.ПоступлениеТоваровУслуг" Тогда
		
		СоглашениеУказано     = ЗначениеЗаполнено(ДокументЗакупки.Соглашение);
		ЕстьОшибкиСоглашениеНеУказано = Не СоглашениеУказано И Не ДокументЗакупки.ПоступлениеПоЗаказам И НужноСогласовать;

		МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
		ВозвратМногооборотнойТары = ДокументЗакупки.ВернутьМногооборотнуюТару;
		
		Если Не ДокументЗакупки.ПоступлениеПоЗаказам И СоглашениеУказано И НужноСогласовать Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямЗакупок");
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КорректностьЗаполненияСклада");
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		Если ИспользоватьНоменклатуруПоставщиков Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПоставщика");
		КонецЕсли;
		
		Если ДокументЗакупки.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
			МассивПроверок.Добавить("НаличиеУслуг");
		Иначе
			МассивПроверок.Добавить("КорректностьЗаполненияАналитикиУслуг");
		КонецЕсли;
		
		Если НужноСогласовать Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если СоглашениеУказано Тогда
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямЗакупок");
			КонецЕсли;
			
			Если СоглашениеУказано И ИспользоватьРучныеСкидки И ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
				МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			КонецЕсли;
				
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТаблицы = "Документ.ВыкупВозвратнойТарыУПоставщика" Тогда
		
		Если ИспользоватьНоменклатуруПоставщиков Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПоставщика");
		КонецЕсли;
		
	ИначеЕсли ИмяТаблицы = "Документ.ДоверенностьНаПолучениеТоваров" Тогда
		
		Если ИспользоватьНоменклатуруПоставщиков Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПоставщика");
		КонецЕсли;
		
	КонецЕсли;
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок
	
	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();

	ПараметрыЗапроса.Вставить("Дата",                      ДокументЗакупки.Дата);
	ПараметрыЗапроса.Вставить("Ссылка",                    ДокументЗакупки.Ссылка);
	ПараметрыЗапроса.Вставить("ВозвратМногооборотнойТары", ВозвратМногооборотнойТары);
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл
		
		Если ТекЭлемент = "ВременнаяТаблицаДокументЗакупки" Тогда
			
			СформироватьЗапросВременнаяТаблицаШапкаДокументаЗакупки(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
			
			СформироватьЗапросВременнаяТаблицаТоварыДокументаЗакупки(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкладыКорректныеПоСоглашению" Тогда
			
			СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеШапкиУсловиямЗакупок" Тогда
			
			СформироватьЗапросШапкаДокументаЗакупки(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыГрафикаОплаты" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплаты(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаКурсыВалют" Тогда
			
			СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЗаполненияНоменклатурыПоставщика" Тогда
			
			СформироватьЗапросКорректностьЗаполненияНоменклатурыПоставщика(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямЗакупок" Тогда
			
			СформироватьЗапросТоварыДокументаЗакупки(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЗаполненияАналитикиУслуг" Тогда
			
			СформироватьЗапросКорректностьЗаполненияАналитикиУслуг(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "НаличиеУслуг" Тогда
			
			СформироватьЗапросНаличиеУслугВДокументеЗакупки(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "КорректностьЗаполненияСклада" Тогда
			
			СформироватьЗапросКорректностьЗаполненияСклада(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "КорректностьЗаполненияСкладаВТабличнойЧастиТовары" Тогда
			
			СформироватьЗапросКорректностьЗаполненияСкладовВТабличнойЧастиТовары(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьКоличестваЭтаповГрафикаОплаты(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КонтрольЗавершенияРасчетов" Тогда
			
			СформироватьЗапросКонтрольЗавершенияРасчетов(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КонтрольПоступления" Тогда
			
			СформироватьЗапросКонтрольПоступления(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ,ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Сообщим пользователю о результатах проверки для каждого результата запроса
	
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
		
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если МассивПроверок[ТекИндекс] = "СоответствиеШапкиУсловиямЗакупок" Тогда
			
			СообщитьОбОшибкахШапкаДокументаЗакупки(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияНоменклатурыПоставщика" Тогда
			
			СообщитьОбОшибкахКорректностьЗаполненияНоменклатурыПоставщика(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеТоваровУсловиямЗакупок" Тогда
			
			СообщитьОбОшибкахТоварыДокументаЗакупки(Выборка ,ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			СообщитьОбОшибкахВхождениеЦенВДопустимыйДиапазон(Выборка, ДокументЗакупки, Отказ, ИспользоватьРучныеСкидки);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияАналитикиУслуг" Тогда
			
			СообщитьОбОшибкахКорректностьЗаполненияАналитикиУслуг(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "НаличиеУслуг" Тогда
			
			СообщитьОбОшибкахНаличиеУслугВДокументеЗакупки(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СообщитьОбОшибкахДопустимостьРучныхСкидокНаценок(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияСклада" Тогда
			
			СообщитьОбОшибкахКорректностьЗаполненияСклада(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияСкладаВТабличнойЧастиТовары" Тогда
			
			СообщитьОбОшибкахКорректностьЗаполненияСкладаВТабличнойЧастиТовары(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СообщитьОбОшибкахКорректностьЭтаповГрафикаОплаты(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда
			
			СообщитьОбОшибкахКорректностьКоличестваЭтаповГрафикаОплаты(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КонтрольЗавершенияРасчетов" Тогда
			
			СообщитьОбОшибкахКонтрольЗавершенияРасчетов(Выборка, ДокументЗакупки, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КонтрольПоступления" Тогда
			
			СообщитьОбОшибкахКонтрольПоступления(Выборка, ДокументЗакупки, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СообщитьОбОшибкахСоглашениеНеУказано(ЕстьОшибкиСоглашениеНеУказано, ДокументЗакупки, Отказ);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверяет корректность заполнения этапов графика оплаты в документе закупки
// Вызывается из процедуры документа "ОбработкаПроверкиЗаполнения"
//
// Параметры:
// ДокументЗакупки                  - ДокументОбъект, для которого необходимо осуществить проверки
// СуммаДокумента                   - Число - сумма документа, в котором необходимо осуществить проверку
// УчитыватьВариантОплаты           - Булево - признак необходимости проверки корректности вариантов оплаты
// Отказ                            - Булево - Флаг отказа от записи документа
// ПривязыватьСообщенияКГиперссылке - Булево - флаг, указывающий на необходимость привязки сообщений к гиперссылке
//
Процедура ПроверитьКорректностьЭтаповГрафикаОплаты(Знач ДокументЗакупки,
	                                               СуммаДокумента,
	                                               УчитыватьВариантОплаты,
	                                               Отказ,
	                                               ПривязыватьСообщенияКГиперссылке = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокументЗакупки.Дата) Тогда
		ДатаДокумента = НачалоДня(ДокументЗакупки.Дата);
	КонецЕсли;
	
	СуммаВсего = Окр(СуммаДокумента, 2);
	
	Если ДокументЗакупки.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
			
		Если СуммаВсего > 0 Тогда
				
			ТекстОшибки = НСтр("ru='Необходимо заполнить этапы графика оплаты'");
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты"),
					,
					Отказ
				);
				
		КонецЕсли;
			
	Иначе
			
		Для ТекИндекс = 0 По ДокументЗакупки.ЭтапыГрафикаОплаты.Количество()-1 Цикл
			
			АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Этапы графика оплаты""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки);
			
			// Все реквизиты этапа оплаты должны быть заполнены
			
			Если УчитыватьВариантОплаты И Не ЗначениеЗаполнено(ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].ВариантОплаты) Тогда

				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Вариант оплаты""'");
			 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ВариантОплаты")),
					,
					Отказ
				);

			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа) Тогда

				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата платежа""'");
			 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ДатаПлатежа")),
					,
					Отказ
				);

			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].ПроцентПлатежа) Тогда

				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Процент платежа""'");
			 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ПроцентПлатежа")),
					,
					Отказ
				);

			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].СуммаПлатежа) Тогда

				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Сумма платежа""'");
			 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "СуммаПлатежа")),
					,
					Отказ
				);

			КонецЕсли;

			// Дата платежа в тч ЭтапыГрафикаОплаты должна быть не меньше даты документа
			Если ЗначениеЗаполнено(ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа) И
				ЗначениеЗаполнено(ДокументЗакупки.Дата) И
				ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа < ДатаДокумента Тогда

				ТекстОшибки = НСтр("ru='Дата платежа должна быть не меньше даты документа %ДатаДокумента%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ДатаДокумента%", Формат(ДокументЗакупки.Дата, "ДЛФ=DD"));

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ДатаПлатежа")),
					,
					Отказ
				);

			КонецЕсли;

			Если УчитыватьВариантОплаты Тогда
			
				// Дата платежа по авансовому этапу должна быть не больше даты поступления в шапке
				Если ЗначениеЗаполнено(ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа) И
					ЗначениеЗаполнено(ДокументЗакупки.ЖелаемаяДатаПоступления) И
					(ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения Или
					ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления) И
					ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа > ДокументЗакупки.ЖелаемаяДатаПоступления Тогда

					ТекстОшибки = НСтр("ru='Дата платежа по авансовому этапу должна быть не больше желаемой даты поступления %ДатаПоступления%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаПоступления%", Формат(ДокументЗакупки.ЖелаемаяДатаПоступления, "ДЛФ=DD")); 

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ДатаПлатежа")),
						,
						Отказ
					);

				// Дата платежа по кредитному этапу должна быть не меньше даты поступления в шапке
				ИначеЕсли ЗначениеЗаполнено(ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа) И
					ЗначениеЗаполнено(ДокументЗакупки.ЖелаемаяДатаПоступления) И
					ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления И
					ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа < ДокументЗакупки.ЖелаемаяДатаПоступления Тогда

					ТекстОшибки = НСтр("ru='Дата платежа по кредитному этапу должна быть не меньше желаемой даты поступления %ДатаПоступления%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаПоступления%", Формат(ДокументЗакупки.ЖелаемаяДатаПоступления, "ДЛФ=DD")); 

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДокументЗакупки.ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ДатаПлатежа")),
						,
						Отказ
					);

				КонецЕсли;
				
			КонецЕсли;
				
		КонецЦикла;
			
		// Процент платежей в в тч ЭтапыГрафикаОплаты должен равняться 100%
		
		Если ДокументЗакупки.ЭтапыГрафикаОплаты.Количество() > 0 Тогда

			ПроцентПоЭтапам = ДокументЗакупки.ЭтапыГрафикаОплаты.Итог("ПроцентПлатежа");

			Если ПроцентПоЭтапам <> 100 Тогда

				ТекстОшибки = НСтр("ru='Процент платежей по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться 100%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ПроцентПоЭтапам);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты[0].ПроцентПлатежа"),
					,
					Отказ
				);

			КонецЕсли;

		КонецЕсли;

		// Сумма платежей в в тч ЭтапыГрафикаОплаты должна равняться сумме заказа с учетом отмененных позиций
			
		Если ДокументЗакупки.ЭтапыГрафикаОплаты.Количество() > 0 Тогда

			СуммаПоЭтапам = Окр(ДокументЗакупки.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа"), 2);
			
			Если СуммаПоЭтапам <> СуммаВсего Тогда

				ТекстОшибки = НСтр("ru='Сумма платежей по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы документа ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", СуммаПоЭтапам);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаДокумента);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        ДокументЗакупки.Валюта);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты[0].СуммаПлатежа"),
					,
					Отказ
				);

			КонецЕсли;

		КонецЕсли;

		КоличествоЭтапов = ДокументЗакупки.ЭтапыГрафикаОплаты.Количество();

		Для ВнешнийСчетчик = 2 По КоличествоЭтапов Цикл

			ИндексПредыдущегоЭтапа = ВнешнийСчетчик - 2;
			ИндексТекущегоЭтапа    = ВнешнийСчетчик - 1;
			ПредыдущееЗначениеДатыПлатежа    = ДокументЗакупки.ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ДатаПлатежа;
			ТекущееЗначениеДатыПлатежа       = ДокументЗакупки.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ДатаПлатежа;

			
			Если УчитыватьВариантОплаты Тогда
				
				ПредыдущееЗначениеВариантаОплаты = ДокументЗакупки.ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ВариантОплаты;
				ТекущееЗначениеВариантаОплаты    = ДокументЗакупки.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ВариантОплаты;
			
				// В табличной части Этапы не должно быть строк со значением АвансДоПодтверждения
				// в поле ВариантОплаты, идущих после строк со значением ПредоплатаДоПоступления
				// КредитПослеПоступления
				Если (ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения И 
					(ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления ИЛИ
					ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления)) ИЛИ
					// В табличной части Этапы не должно быть строк со значением ПредоплатаДоПоступления
					// в поле ВариантОплаты, идущих после строк со значением КредитПослеПоступления
					(ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления И 
					ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления) Тогда
				
					ТекстОшибки = НСтр("ru='Вариант оплаты ""%ТекущееЗначениеВариантаОплаты%"" в строке %ИндексТекущегоЭтапа%
					|не может идти после варианта оплаты ""%ПредыдущееЗначениеВариантаОплаты%"" в строке %ИндексПредыдущегоЭтапа%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ПредыдущееЗначениеВариантаОплаты%", ПредыдущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ТекущееЗначениеВариантаОплаты%",    ТекущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",              ИндексТекущегоЭтапа + 1);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%",           ИндексПредыдущегоЭтапа + 1);

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДокументЗакупки.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ВариантОплаты")),
						,
						Отказ
						);

				КонецЕсли;
					
			КонецЕсли;

			// Значение поля ДатаПлатежа табличной части ЭтапыГрафикаОплаты должно идти по возрастанию
			Если ТекущееЗначениеДатыПлатежа < ПредыдущееЗначениеДатыПлатежа И
				ЗначениеЗаполнено(ТекущееЗначениеДатыПлатежа) И
				ЗначениеЗаполнено(ПредыдущееЗначениеДатыПлатежа) Тогда

				ТекстОшибки = НСтр("ru='Дата платежа в строке %ИндексТекущегоЭтапа%
				|списка ""Этапы оплаты"" должна быть не меньше, чем в строке %ИндексПредыдущегоЭтапа%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",    ИндексТекущегоЭтапа + 1);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%", ИндексПредыдущегоЭтапа + 1);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДокументЗакупки.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ДатаПлатежа")),
					,
					Отказ
				);

			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность заполнения документа закупки в соответствии с массивом проверок
// путем выполнения пакета запросов.
//
// Параметры:
//		ДокументЗакупки - ДокументСсылка, для которого необходимо осуществить проверки
//		ЕстьОтклоненияОтЦеновыхУсловий - Булево - Устанавливается в процедуре при необходимости последующего согласования ценовых условий
//		ЕстьОтклоненияОтФинансовыхУсловий - Булево - Устанавливается в процедуре при необходимости последующего согласования финансовых условий
//		ЕстьОтклоненияОтЛогистическихУсловий - Булево - Устанавливается в процедуре при необходимости последующего согласования логистических условий
//
Процедура ПроверитьНеобходимостьСогласованияУсловийЗакупки(Знач ДокументЗакупки,
	                                                       ЕстьОтклоненияОтЦеновыхУсловий,
	                                                       ЕстьОтклоненияОтФинансовыхУсловий,
	                                                       ЕстьОтклоненияОтЛогистическихУсловий) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументЗакупки.Соглашение) Тогда
		
		ЕстьОтклоненияОтЦеновыхУсловий = Истина;
		ЕстьОтклоненияОтФинансовыхУсловий = Истина;
		ЕстьОтклоненияОтЛогистическихУсловий= Истина;
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТипДокумента   = ТипЗнч(ДокументЗакупки);
	ИмяТаблицы     = ДокументЗакупки.Метаданные().ПолноеИмя();
	
	// Проверим нужно ли проверять диапазон допустимых цен
	ВидМаксимальноДопустимыхЦенЗакупки = Константы.ВидМаксимальноДопустимыхЦенЗакупки.Получить();
	ПроверятьДиапазонЦен = ЗначениеЗаполнено(ВидМаксимальноДопустимыхЦенЗакупки);
	
	// Проверим нужно ли проверять скидки и наценки
	ИспользоватьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
	
	// Проверим является ли документ приемом на комиссию
	ДокументПриемаНаКомиссию = ДокументЗакупки.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;
	
	// Заполним массив необходимых проверок в зависимости от типа документа
	
	МассивПроверок  = Новый Массив();
	
	Если НЕ ЗначениеЗаполнено(ДокументЗакупки.Соглашение) Тогда
		
		ЕстьОтклоненияОтЦеновыхУсловий = Истина;
		ЕстьОтклоненияОтФинансовыхУсловий = Истина;
		ЕстьОтклоненияОтЛогистическихУсловий= Истина;
		
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
		
	КонецЕсли;
	
	МассивПроверок.Добавить("ВременнаяТаблицаДокументЗакупки");
	МассивПроверок.Добавить("ВременнаяТаблицаТовары");
	МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
	МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
	
	МассивПроверок.Добавить("СоответствиеШапкиУсловиямЗакупок");
	МассивПроверок.Добавить("СоответствиеТоваровУсловиямЗакупок");
	
	Если ИспользоватьРучныеСкидки И ДокументПриемаНаКомиссию Тогда
		МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
	КонецЕсли;
	
	Если ПроверятьДиапазонЦен Тогда
		МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
	КонецЕсли;
	
	Если ДокументПриемаНаКомиссию И ДокументЗакупки.СуммаДокумента <> 0 Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
		МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
		МассивПроверок.Добавить("КорректностьКоличестваЭтаповГрафикаОплаты");
		
	КонецЕсли;
	
	// Сформируем запрос проверки
	
	ТекстЗапроса = "";
	ПараметрыЗапроса = Новый Структура();
	
	ПараметрыЗапроса.Вставить("Дата", ДокументЗакупки.Дата);
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл
		
		Если ТекЭлемент = "ВременнаяТаблицаДокументЗакупки" Тогда
			
			СформироватьЗапросВременнаяТаблицаШапкаДокументаЗакупки(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
			
			СформироватьЗапросВременнаяТаблицаТоварыДокументаЗакупки(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаКурсыВалют" Тогда
			
			СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкладыКорректныеПоСоглашению" Тогда
			
			СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеШапкиУсловиямЗакупок" Тогда
			
			СформироватьЗапросШапкаДокументаЗакупки(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыГрафикаОплаты" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплаты(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки);
			
		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямЗакупок" Тогда
			
			СформироватьЗапросТоварыДокументаЗакупки(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "КорректностьЗаполненияСклада" Тогда
			
			СформироватьЗапросКорректностьЗаполненияСклада(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьКоличестваЭтаповГрафикаОплаты(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		ЕстьОтклоненияОтЦеновыхУсловий = Истина;
		ЕстьОтклоненияОтФинансовыхУсловий = Истина;
		ЕстьОтклоненияОтЛогистическихУсловий= Истина;
		
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ,ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Определим результаты проверки для каждого результата запроса
	
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
		
		// Если имеются отклонения от всех проверяемых условий, дальнейшая проверка не требуется
		Если ЕстьОтклоненияОтЦеновыхУсловий И 
			ЕстьОтклоненияОтФинансовыхУсловий И 
			ЕстьОтклоненияОтЛогистическихУсловий Тогда
			Прервать;
		КонецЕсли;
		
		ТекЭлемент = МассивПроверок[ТекИндекс];
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если ТекЭлемент = "СоответствиеШапкиУсловиямЗакупок" Тогда
			
			Пока Выборка.Следующий() Цикл
				Если ЕстьОтклоненияОтЦеновыхУсловий И ЕстьОтклоненияОтЛогистическихУсловий И ЕстьОтклоненияОтФинансовыхУсловий Тогда
					Прервать;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиЗаполненияВалюта ИЛИ // Валюта не должна отличаться от значения в соглашении
					Выборка.ЕстьОшибкиЗаполненияНалогообложениеНДС ИЛИ // Тип налогообложения НДС не должен отличаться от значения в соглашении
					Выборка.ЕстьОшибкиЗаполненияЦенаВключаетНДС Тогда // Признак ""Цена включает НДС"" не должен отличаться от значения в соглашении
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиЗаполненияСклад Тогда // Склад не должен отличаться от значения в соглашении
					ЕстьОтклоненияОтЛогистическихУсловий = Истина;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиЗаполненияФормаОплаты Тогда // ФормаОплаты не должна отличаться от значения в соглашении
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямЗакупок" Тогда
			
			Пока Выборка.Следующий() Цикл
				Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
					Прервать;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена ИЛИ // Цена не должна превышать максимально допустимую
					Выборка.ЕстьОшибкиЗаполненияСтавкаНДС Тогда // Ставка НДС не должна отличаться от ставки, в соглашении
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			Пока Выборка.Следующий() Цикл
				Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
					Прервать;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена Тогда
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			Пока Выборка.Следующий() Цикл
				Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
					Прервать;
				КонецЕсли;
				Если Выборка.ЕстьОшибкиЗаполненияРучнойНаценки Тогда
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			МаксДатаАванса = Дата(1,1,1);
			ОдинДень       = 86400;
			СуммаПроцентовПлатежа = 0;
			СуммаПроцентовПлатежаШаблона = 0;
			
			ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
			
			Пока Выборка.Следующий() Цикл
				
				Если ЕстьОтклоненияОтФинансовыхУсловий Тогда
					Прервать;
				КонецЕсли;
				
				Если Не Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты ИЛИ // В документе не заполнено соглашение или сумма документа равна 0
					Выборка.ЭтапШаблонаОтсутствует Тогда // График оплаты в соглашении не заполнен или не соответствует по количеству графику документа
					
					Прервать; // Не проверять далее. Если график заполнен, будет выявлена ошибка при проверке по запросу "КорректностьКоличестваЭтаповГрафикаОплаты"
				КонецЕсли;
				
				Если Выборка.ЕстьОшибкиЗаполненияВариантаОплаты Тогда // Вариант оплаты не должен отличаться от значения в графике оплаты
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
				КонецЕсли;
				
				Календарь = Выборка.Календарь;
				Если НЕ ЗначениеЗаполнено(Календарь) Тогда
					Календарь = ОсновнойКалендарьПредприятия;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Календарь) Тогда
					
					Если Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления Тогда
						Если ЗначениеЗаполнено(Выборка.ЖелаемаяДатаПоступления) Тогда
							ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.ЖелаемаяДатаПоступления, Выборка.Сдвиг );
						ИначеЕсли ЗначениеЗаполнено(МаксДатаАванса) Тогда
							ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, МаксДатаАванса, Выборка.Сдвиг);
						Иначе
							ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.Дата, Выборка.Сдвиг);
						КонецЕсли;
					Иначе
						ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.Дата, Выборка.Сдвиг);
					КонецЕсли;
					
				Иначе
					
					Если ЗначениеЗаполнено(Выборка.ЖелаемаяДатаПоступления) Тогда
						ДатаПлатежаШаблона = Выборка.ДатаПлатежаШаблона;
					ИначеЕсли ЗначениеЗаполнено(МаксДатаАванса) Тогда
						ДатаПлатежаШаблона = МаксДатаАванса + Выборка.Сдвиг * ОдинДень;
					Иначе
						ДатаПлатежаШаблона = Выборка.ДатаПлатежаШаблона;
					КонецЕсли;
					
				КонецЕсли;
				
				Если Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Или
					Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
					
					МаксДатаАванса = ДатаПлатежаШаблона;
					
				КонецЕсли;
				
				Если ДатаПлатежаШаблона > Выборка.ДатаПлатежа Тогда // Дата платежа должна быть не меньше, чем в графике оплаты
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
				КонецЕсли;
				
				СуммаПроцентовПлатежаШаблона = СуммаПроцентовПлатежаШаблона + Выборка.ПроцентПлатежаШаблона;
				СуммаПроцентовПлатежа = СуммаПроцентовПлатежа + Выборка.ПроцентПлатежа;
				
				Если Выборка.ЕстьОшибкиЗаполненияПроцентаПлатежа И СуммаПроцентовПлатежа > СуммаПроцентовПлатежаШаблона Тогда // Проценты до следующего платежа по графику не должны превышать проценты по графику соглашения
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда
			
			Если Выборка.Следующий() Тогда
				Если Выборка.КоличествоЭтаповШаблона <> 0 И Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты Тогда
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверяет корректность заполнения товаров документа возврата в соответствии 
// с реализованными товарами с учетом корректировок.
// Вызывается из процедуры документа "ОбработкаПроверкиЗаполнения"
//
// Параметры:
// ДокументЗакупки  - ДокументОбъект, для которого необходимо осуществить проверки
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура ПроверитьКорректностьВозвращаемыхТоваров(Знач ДокументЗакупки, Отказ) Экспорт
	
	ТаблицаПроверяемыеТовары = ДокументЗакупки.Товары.Выгрузить();
	
	Если ТаблицаПроверяемыеТовары.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура КАК Номенклатура,
		|	ВозвратТоваровОтКлиентаТовары.Характеристика КАК Характеристика,
		|	ВозвратТоваровОтКлиентаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ВозвратТоваровОтКлиентаТовары.Количество КАК Количество,
		|	ВозвратТоваровОтКлиентаТовары.ДокументПоступления КАК ДокументПоступления
		|ПОМЕСТИТЬ ПроверяемыеТовары
		|ИЗ
		|	&ТаблицаПроверяемыеТовары КАК ВозвратТоваровОтКлиентаТовары
		|ГДЕ
		|	ВозвратТоваровОтКлиентаТовары.ДокументПоступления <> ЗНАЧЕНИЕ(Документ.ПоступлениеТоваровУслуг.ПустаяСсылка)
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(КорректировкаПоступления.Дата) КАК Дата,
		|	ПроверяемыеТовары.ДокументПоступления КАК СсылкаПоступления
		|ПОМЕСТИТЬ ДанныеКорректировки
		|ИЗ
		|	ПроверяемыеТовары КАК ПроверяемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|		ПО (КорректировкаПоступления.ДокументОснование = ПроверяемыеТовары.ДокументПоступления)
		|ГДЕ
		|	КорректировкаПоступления.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ПроверяемыеТовары.ДокументПоступления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СсылкаПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(КорректировкаПоступления.Ссылка) КАК Ссылка,
		|	МАКСИМУМ(КорректировкаПоступления.Ссылка.Дата) КАК Дата,
		|	КорректировкаПоступления.Ссылка.ДокументОснование КАК СсылкаПоступления
		|ПОМЕСТИТЬ ДанныеПоследнейКорректировки
		|ИЗ
		|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
		|ГДЕ
		|	(КорректировкаПоступления.Ссылка.ДокументОснование, КорректировкаПоступления.Ссылка.Дата) В
		|			(ВЫБРАТЬ
		|				ДанныеКорректировки.СсылкаПоступления КАК СсылкаПоступления,
		|				ДанныеКорректировки.Дата КАК Дата
		|			ИЗ
		|				ДанныеКорректировки)
		|	И КорректировкаПоступления.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаПоступления.Ссылка.ДокументОснование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	СсылкаПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА ПроверяемыеТовары.ДокументПоступления
		|		ИНАЧЕ ДанныеПоследнейКорректировки.Ссылка
		|	КОНЕЦ КАК Ссылка
		|ПОМЕСТИТЬ СсылкиНаПоступления
		|ИЗ
		|	ПроверяемыеТовары КАК ПроверяемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоследнейКорректировки КАК ДанныеПоследнейКорректировки
		|		ПО ПроверяемыеТовары.ДокументПоступления = ДанныеПоследнейКорректировки.СсылкаПоступления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
		|	КорректировкаПоступленияТовары.Характеристика КАК Характеристика,
		|	СУММА(КорректировкаПоступленияТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(КорректировкаПоступленияТовары.Количество) КАК Количество,
		|	КорректировкаПоступленияТовары.Цена,
		|	КорректировкаПоступленияТовары.Ссылка.ДокументОснование КАК ДокументПоступления
		|ПОМЕСТИТЬ ДанныеПоступления
		|ИЗ
		|	Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
		|
		|ГДЕ
		|	КорректировкаПоступленияТовары.Ссылка.Проведен
		|	И (Номенклатура,Характеристика) В 
		|	(ВЫБРАТЬ 
		|		ПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|		ПроверяемыеТовары.Характеристика КАК Характеристика
		|	ИЗ
		|		ПроверяемыеТовары КАК ПроверяемыеТовары	
		|	) И  (Ссылка) В 
		|	(ВЫБРАТЬ 
		|		СсылкиНаПоступления.Ссылка КАК Ссылка
		|	ИЗ
		|		СсылкиНаПоступления КАК СсылкиНаПоступления
		|	) 
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаПоступленияТовары.Номенклатура,
		|	КорректировкаПоступленияТовары.Характеристика,
		|	КорректировкаПоступленияТовары.Цена,
		|	КорректировкаПоступленияТовары.Ссылка.ДокументОснование
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Характеристика,
		|	СУММА(ПоступлениеТоваровУслугТовары.КоличествоУпаковок),
		|	СУММА(ПоступлениеТоваровУслугТовары.Количество),
		|	ПоступлениеТоваровУслугТовары.Цена,
		|	ПоступлениеТоваровУслугТовары.Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка.Проведен
		|	И (Номенклатура,Характеристика) В 
		|	(ВЫБРАТЬ 
		|		ПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|		ПроверяемыеТовары.Характеристика КАК Характеристика
		|	ИЗ
		|		ПроверяемыеТовары КАК ПроверяемыеТовары
		|	) И  (Ссылка) В 
		|	(ВЫБРАТЬ 
		|		СсылкиНаПоступления.Ссылка КАК Ссылка
		|	ИЗ
		|		СсылкиНаПоступления КАК СсылкиНаПоступления
		|	) 
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Характеристика,
		|	ПоступлениеТоваровУслугТовары.Цена,
		|	ПоступлениеТоваровУслугТовары.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
		|	ТаблицаПроверяемыеТовары.ДокументПоступления КАК ДокументПоступления
		|ПОМЕСТИТЬ ДанныеДокументовВозврата
		|ИЗ
		|	ПроверяемыеТовары КАК ПроверяемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаПроверяемыеТовары
		|		ПО (ТаблицаПроверяемыеТовары.ДокументПоступления = ПроверяемыеТовары.ДокументПоступления)
		|			И ПроверяемыеТовары.Номенклатура = ТаблицаПроверяемыеТовары.Номенклатура
		|			И ПроверяемыеТовары.Характеристика = ТаблицаПроверяемыеТовары.Характеристика
		|ГДЕ
		|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
		|	И ТаблицаПроверяемыеТовары.Ссылка <> &ЭтотВозвратСсылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПроверяемыеТовары.Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика,
		|	ТаблицаПроверяемыеТовары.ДокументПоступления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ДокументПоступления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ДанныеПоступления.Количество, 0) - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) - ЕСТЬNULL(ПроверяемыеТовары.Количество, 0) КАК Количество,
		|	ПроверяемыеТовары.Характеристика КАК Характеристика,
		|	ПроверяемыеТовары.ДокументПоступления КАК ДокументПоступления,
		|	ПроверяемыеТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ПроверяемыеТовары.ДокументПоступления.Номер КАК НомерПоступления
		|ИЗ
		|	ДанныеПоступления КАК ДанныеПоступления
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументовВозврата КАК ДанныеДокументовВозврата
		|		ПО ДанныеПоступления.ДокументПоступления = ДанныеДокументовВозврата.ДокументПоступления
		|			И ДанныеПоступления.Номенклатура = ДанныеДокументовВозврата.Номенклатура
		|			И ДанныеПоступления.Характеристика = ДанныеДокументовВозврата.Характеристика
		|		ПОЛНОЕ СОЕДИНЕНИЕ ПроверяемыеТовары КАК ПроверяемыеТовары
		|		ПО ДанныеПоступления.ДокументПоступления = ПроверяемыеТовары.ДокументПоступления
		|			И ДанныеПоступления.Номенклатура = ПроверяемыеТовары.Номенклатура
		|			И ДанныеПоступления.Характеристика = ПроверяемыеТовары.Характеристика
		|		
		|ГДЕ
		|	ЕСТЬNULL(ДанныеПоступления.Количество, 0) - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) - ЕСТЬNULL(ПроверяемыеТовары.Количество, 0) < 0
		|	И ПроверяемыеТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
		
		ТаблицаПроверяемыеТовары.Свернуть("Номенклатура,Характеристика,ДокументПоступления,Цена", "Количество,КоличествоУпаковок");
		Запрос.УстановитьПараметр("ТаблицаПроверяемыеТовары", ТаблицаПроверяемыеТовары);
		Запрос.УстановитьПараметр("ЭтотВозвратСсылка", ДокументЗакупки.Ссылка);
		
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() > 0 Тогда
			Отказ = Истина;
			СообщитьОбОшибкахКорректностиВозвращаемыхТоваров(Результат);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции расчета цен в документах закупок.

// Заполняет реквизит "Цена" в товарной табличной части
//
// Параметры:
// 		ТабличнаяЧасть - ДанныеФормыКоллекция, ТабличнаяЧасть - Товарная табличная часть документа
// 		ВыделенныеСтроки - Массив - Массив выделенных строк
// 		ПараметрыЗаполнения - Структура - Структура параметров заполнения
// 			Обязательные поля:
// 				"Дата" - Дата - Дата документа
// 				"Валюта" - СправочникСсылка.Валюты - Валюта документа
// 				"Соглашение" - СправочникСсылка.СоглашенияСПоставщиками - Соглашение документа
// 			Необязательные поля:
// 				"УсловиеЦеныПоставщика" - СправочникСсылка.УсловияЦенПоставщиков - Условие цены поставщика
// 				"ПоляЗаполнения" - Строка - Строка с перечислением заполняемых полей в таблице. Значение по-умолчанию: "Цена". Дополнительные поля: "УсловиеЦеныПоставщика, СтавкаНДС"
// 				"КолонкиПоЗначению" - Структура - Структура для передачи в качестве параметра "КолонкиПоЗначению" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 				"ДругиеИменаКолонок" - Структура - Структура для передачи в качестве параметра "НовыеИменаКолонок" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 		СтруктураДействий - Структура - Стандартная структура действий со строками для вызова "ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ"
// 		КэшированныеЗначения - Структура - Структура кэшированных значений
// 		
//
Функция ЗаполнитьЦены(ТабличнаяЧасть, ВыделенныеСтроки = Неопределено, ПараметрыЗаполнения, СтруктураДействий = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	ЦеныЗаполнены = Ложь;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Параметры заполнения не указаны'");
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	// Получение структуры параметров по-умолчанию
	Параметры = Новый Структура(
		"УсловиеЦеныПоставщика, ПоляЗаполнения, КолонкиПоЗначению, ДругиеИменаКолонок",
		Справочники.УсловияЦенПоставщиков.ПустаяСсылка(), "Цена", Новый Структура, Новый Структура
	);
	ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыЗаполнения, Истина);
	
	// Проверки входящих данных
	Если Не Параметры.Свойство("Соглашение") Тогда
		ВызватьИсключение НСтр("ru='В параметрах заполнения должны быть указаны ""Соглашение"" или ""ВидЦены""'");
		Возврат ЦеныЗаполнены;
	ИначеЕсли Не Параметры.Свойство("Дата") Или Не Параметры.Свойство("Валюта") Или Не Параметры.Свойство("Соглашение") Тогда
		ВызватьИсключение НСтр("ru='В параметрах заполнения должны быть указаны ""Соглашение"", ""Валюта"" и ""Дата""'");
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	// Получение выгрузки по табличной части
	Таблица = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(
		ТабличнаяЧасть,
		ВыделенныеСтроки,
		"НомерСтроки, Номенклатура, Характеристика, Упаковка",
		Параметры.КолонкиПоЗначению,
		Параметры.ДругиеИменаКолонок
	);
	
	// Получение запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Параметры.Дата), Параметры.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("Валюта", Параметры.Валюта);
	Запрос.УстановитьПараметр("УсловиеЦеныПоставщика", Параметры.УсловиеЦеныПоставщика);
	Запрос.УстановитьПараметр("Соглашение", Параметры.Соглашение);
	Запрос.УстановитьПараметр("Таблица", Таблица);
	
	Запрос.Текст = ПолучитьТекстЗапросаВременнойТаблицыТоваров("втТаблицаТовары") + ПолучитьТекстЗапросаВременнойТаблицыЦен("втТаблицаЦены", "втТаблицаТовары") + "
	|ВЫБРАТЬ
	|	втТаблицаЦены.НомерСтроки КАК НомерСтроки,
	|	втТаблицаЦены.УсловиеЦеныПоставщика КАК УсловиеЦеныПоставщика,
	|	втТаблицаЦены.СтавкаНДС КАК СтавкаНДС,
	|	втТаблицаЦены.Цена
	|ИЗ
	|	втТаблицаЦены КАК втТаблицаЦены";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура(Параметры.ПоляЗаполнения);
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Выборка);
		СтрокаТЧ = ТабличнаяЧасть[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураЗаполнения);
		Если СтруктураДействий <> Неопределено Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает цену по отбору
//
// Параметры:
//		ПараметрыОтбора - Структура - Структура с обязательными полями
//			"Дата" - Дата - Дата получения цены
// 			"Номенклатура" - СправочникСсылка.Номенклатура
// 			"Характеристика" - СправочникСсылка.ХарактеристикиНоменклатуры
// 			"Упаковка" - СправочникСсылка.УпаковкиНоменклатуры
// 			"ВидЦены" - СправочникСсылка.ВидыЦен
// 			"Валюта" - СправочникСсылка.Валюты
//
// Возвращаемое значение:
// 		Число - Цена
//
Функция ПолучитьЦенуПоОтбору(ПараметрыОтбора) Экспорт
	
	Запрос = Новый Запрос;
	Для Каждого Параметр Из ПараметрыОтбора Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ВЫРАЗИТЬ(&Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка
	|ПОМЕСТИТЬ втТаблицаТовары
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|;" + ПолучитьТекстЗапросаВременнойТаблицыЦен("втТаблицаЦен", "втТаблицаТовары") + "
	|ВЫБРАТЬ
	|	втТаблицаЦен.Цена КАК Цена
	|ИЗ
	|	втТаблицаЦен КАК втТаблицаЦен
	|";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы со скидками в документах закупки.

 // Осуществляет заполнение условий цен и цен в тч Товары по виду цен по выделенным строкам
//
// Параметры:
// 		Объект - ДокументОбъект, для которого необходимо отменить ручные скидки
// 		ИмяТабличнойЧасти  - Строка - имя табличной части объекта, в которой необходимо отменить ручные скидки
// 		ОчищатьСуммыВзаиморасчетов - Булево - Истина, если в табличной части присутствует сумма взаиморасчетов
//
Процедура ОтменитьРучныеСкидки(Объект, ИмяТабличнойЧасти, ОчищатьСуммыВзаиморасчетов = Ложь) Экспорт
	
	СкидкиИзменены = Ложь;
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если СтрокаТЧ.СуммаРучнойСкидки <> 0 Или СтрокаТЧ.ПроцентРучнойСкидки <> 0 Тогда
			
			СтрокаТЧ.СуммаРучнойСкидки = 0;
			СтрокаТЧ.ПроцентРучнойСкидки = 0;
			Ценообразование.ПересчитатьСуммыВСтроке(СтрокаТЧ, Ложь, Ложь, Истина, Объект.ЦенаВключаетНДС);
			СкидкиИзменены = Истина;
			Если ОчищатьСуммыВзаиморасчетов Тогда
				СтрокаТЧ.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СкидкиИзменены Тогда
		Объект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТабличнойЧасти], Объект.ЦенаВключаетНДС);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции работы с номенклатурой поставщика в документах закупки.

// Помещает таблицу товаров во временное хранилище
// 
// Параметры:
// Товары  - ДанныеФормыКоллекция - таблица товаров, которую необходимо поместить во временное хранилище
//
// Возвращаемое значение:
// Строка
// Адрес таблицы товаров во временном хранилище
//
Функция ПоместитьТоварыВоВременноеХранилище(Товары) Экспорт
	
	МассивСтрок = Новый Массив();
	
	Для Каждого ТекСтрока Из Товары Цикл
		Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) И Не ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			МассивСтрок.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрок.Количество() = 0 Тогда
		АдресТоваровВоВременномХранилище = Неопределено;
	Иначе
		НоменклатураПоставщика = Товары.Выгрузить(МассивСтрок, "НомерСтроки,НоменклатураПоставщика");
		АдресТоваровВоВременномХранилище = ПоместитьВоВременноеХранилище(НоменклатураПоставщика);
	КонецЕсли;
	
	Возврат АдресТоваровВоВременномХранилище;
	
КонецФункции

// Проверяет корректность заполнения этапов графика оплаты в документе закупки
//
// Параметры:
// ДокументЗакупки                  - ДокументОбъект, для которого необходимо осуществить проверки
// СуммаДокумента                   - Число - сумма документа, в котором необходимо осуществить проверку
// УчитыватьВариантОплаты           - Булево - признак необходимости проверки корректности вариантов оплаты
// Отказ                            - Булево - Флаг отказа от записи документа
// ПривязыватьСообщенияКГиперссылке - Булево - флаг, указывающий на необходимость привязки сообщений к гиперссылке
//
Процедура ПроверитьКорректностьЭтаповГрафикаОплатыПоТаблицеЗначений(Знач ЭтапыГрафикаОплаты,
	                                               СуммаДокумента,
	                                               УчитыватьВариантОплаты,
	                                               Отказ,
	                                               ПривязыватьСообщенияКГиперссылке = Ложь,
	                                               СтруктураПараметров) Экспорт
	
	Если ЗначениеЗаполнено(СтруктураПараметров.Дата) Тогда
		ДатаДокумента = НачалоДня(СтруктураПараметров.Дата);
	КонецЕсли;
	
	СуммаВсего = Окр(СуммаДокумента, 2);
	
	Если ЭтапыГрафикаОплаты.Количество() = 0 Тогда
			
		Если СуммаВсего > 0 Тогда
				
			ТекстОшибки = НСтр("ru='Необходимо заполнить этапы графика оплаты'");
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "ЭтапыГрафикаОплаты"),
					,
					Отказ
				);
				
		КонецЕсли;
			
	Иначе
			
		Для ТекИндекс = 0 По ЭтапыГрафикаОплаты.Количество()-1 Цикл
			
			АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Этапы графика оплаты""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки);
			
			// Все реквизиты этапа оплаты должны быть заполнены
			
			Если УчитыватьВариантОплаты И Не ЗначениеЗаполнено(ЭтапыГрафикаОплаты[ТекИндекс].ВариантОплаты) Тогда

				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Вариант оплаты""'");
			 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ВариантОплаты")),
					,
					Отказ
				);

			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа) Тогда

				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата платежа""'");
			 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ДатаПлатежа")),
					,
					Отказ
				);

			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЭтапыГрафикаОплаты[ТекИндекс].ПроцентПлатежа) Тогда

				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Процент платежа""'");
			 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ПроцентПлатежа")),
					,
					Отказ
				);

			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЭтапыГрафикаОплаты[ТекИндекс].СуммаПлатежа) Тогда

				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Сумма платежа""'");
			 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "СуммаПлатежа")),
					,
					Отказ
				);

			КонецЕсли;

			// Дата платежа в тч ЭтапыГрафикаОплаты должна быть не меньше даты документа
			Если ЗначениеЗаполнено(ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа) И
				ЗначениеЗаполнено(СтруктураПараметров.Дата) И
				ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа < ДатаДокумента Тогда

				ТекстОшибки = НСтр("ru='Дата платежа должна быть не меньше даты документа %ДатаДокумента%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ДатаДокумента%", Формат(СтруктураПараметров.Дата, "ДЛФ=DD"));

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ДатаПлатежа")),
					,
					Отказ
				);

			КонецЕсли;

			Если УчитыватьВариантОплаты Тогда
			
				// Дата платежа по авансовому этапу должна быть не больше даты поступления в шапке
				Если ЗначениеЗаполнено(ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа) И
					ЗначениеЗаполнено(СтруктураПараметров.ЖелаемаяДатаПоступления) И
					(ЭтапыГрафикаОплаты[ТекИндекс].ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения Или
					ЭтапыГрафикаОплаты[ТекИндекс].ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления) И
					ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа > СтруктураПараметров.ЖелаемаяДатаПоступления Тогда

					ТекстОшибки = НСтр("ru='Дата платежа по авансовому этапу должна быть не больше желаемой даты поступления %ДатаПоступления%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаПоступления%", Формат(СтруктураПараметров.ЖелаемаяДатаПоступления, "ДЛФ=DD")); 

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ДатаПлатежа")),
						,
						Отказ
					);

				// Дата платежа по кредитному этапу должна быть не меньше даты поступления в шапке
				ИначеЕсли ЗначениеЗаполнено(ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа) И
					ЗначениеЗаполнено(СтруктураПараметров.ЖелаемаяДатаПоступления) И
					ЭтапыГрафикаОплаты[ТекИндекс].ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления И
					ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа < СтруктураПараметров.ЖелаемаяДатаПоступления Тогда

					ТекстОшибки = НСтр("ru='Дата платежа по кредитному этапу должна быть не меньше желаемой даты поступления %ДатаПоступления%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаПоступления%", Формат(СтруктураПараметров.ЖелаемаяДатаПоступления, "ДЛФ=DD")); 

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ДатаПлатежа")),
						,
						Отказ
					);

				КонецЕсли;
				
			КонецЕсли;
				
		КонецЦикла;
			
		// Процент платежей в в тч ЭтапыГрафикаОплаты должен равняться 100%
		
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда

			ПроцентПоЭтапам = ЭтапыГрафикаОплаты.Итог("ПроцентПлатежа");

			Если ПроцентПоЭтапам <> 100 Тогда

				ТекстОшибки = НСтр("ru='Процент платежей по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться 100%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ПроцентПоЭтапам);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "ЭтапыГрафикаОплаты[0].ПроцентПлатежа"),
					,
					Отказ
				);

			КонецЕсли;

		КонецЕсли;

		// Сумма платежей в в тч ЭтапыГрафикаОплаты должна равняться сумме заказа с учетом отмененных позиций
			
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда

			СуммаПоЭтапам = Окр(ЭтапыГрафикаОплаты.Итог("СуммаПлатежа"), 2);
			
			Если СуммаПоЭтапам <> СуммаВсего Тогда

				ТекстОшибки = НСтр("ru='Сумма платежей по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы документа ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", СуммаПоЭтапам);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаДокумента);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        СтруктураПараметров.Валюта);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "ЭтапыГрафикаОплаты[0].СуммаПлатежа"),
					,
					Отказ
				);

			КонецЕсли;

		КонецЕсли;

		КоличествоЭтапов = ЭтапыГрафикаОплаты.Количество();

		Для ВнешнийСчетчик = 2 По КоличествоЭтапов Цикл

			ИндексПредыдущегоЭтапа = ВнешнийСчетчик - 2;
			ИндексТекущегоЭтапа    = ВнешнийСчетчик - 1;
			ПредыдущееЗначениеДатыПлатежа    = ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ДатаПлатежа;
			ТекущееЗначениеДатыПлатежа       = ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ДатаПлатежа;

			
			Если УчитыватьВариантОплаты Тогда
				
				ПредыдущееЗначениеВариантаОплаты = ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ВариантОплаты;
				ТекущееЗначениеВариантаОплаты    = ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ВариантОплаты;
			
				// В табличной части Этапы не должно быть строк со значением АвансДоПодтверждения
				// в поле ВариантОплаты, идущих после строк со значением ПредоплатаДоПоступления
				// КредитПослеПоступления
				Если (ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения И 
					(ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления ИЛИ
					ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления)) ИЛИ
					// В табличной части Этапы не должно быть строк со значением ПредоплатаДоПоступления
					// в поле ВариантОплаты, идущих после строк со значением КредитПослеПоступления
					(ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления И 
					ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления) Тогда
				
					ТекстОшибки = НСтр("ru='Вариант оплаты ""%ТекущееЗначениеВариантаОплаты%"" в строке %ИндексТекущегоЭтапа%
					|не может идти после варианта оплаты ""%ПредыдущееЗначениеВариантаОплаты%"" в строке %ИндексПредыдущегоЭтапа%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ПредыдущееЗначениеВариантаОплаты%", ПредыдущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ТекущееЗначениеВариантаОплаты%",    ТекущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",              ИндексТекущегоЭтапа + 1);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%",           ИндексПредыдущегоЭтапа + 1);

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ВариантОплаты")),
						,
						Отказ
						);

				КонецЕсли;
					
			КонецЕсли;

			// Значение поля ДатаПлатежа табличной части ЭтапыГрафикаОплаты должно идти по возрастанию
			Если ТекущееЗначениеДатыПлатежа < ПредыдущееЗначениеДатыПлатежа И
				ЗначениеЗаполнено(ТекущееЗначениеДатыПлатежа) И
				ЗначениеЗаполнено(ПредыдущееЗначениеДатыПлатежа) Тогда

				ТекстОшибки = НСтр("ru='Дата платежа в строке %ИндексТекущегоЭтапа%
				|списка ""Этапы оплаты"" должна быть не меньше, чем в строке %ИндексПредыдущегоЭтапа%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",    ИндексТекущегоЭтапа + 1);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%", ИндексПредыдущегоЭтапа + 1);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ДатаПлатежа")),
					,
					Отказ
				);

			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции получения значений реквизитов по умолчанию.

// Возвращает структуру по ответственному лицу указанного склада
// В случае если склад является группой, возвращает значения,
// 		использовавшиеся в последнем документе указанного менеджера с указанным складом
//
// Параметры:
// 		Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
// 		Стуктура - Структура с полями: "Ответственный" и "ОтветственныйДолжность"
//
Функция ПолучитьОтветственногоПоСкладу(Склад, Менеджер) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ Справочники.Склады.ЭтоГруппа(Склад) Тогда
		СтруктураОтветственного = ЗначениеНастроекПовтИсп.ПолучитьОтветственногоПоСкладу(Склад);
		Если СтруктураОтветственного <> Неопределено Тогда
			Возврат СтруктураОтветственного;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеТоваровУслуг.Принял КАК Ответственный,
	|	ПоступлениеТоваровУслуг.ПринялДолжность КАК ОтветственныйДолжность
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Склад = &Склад
	|	И ПоступлениеТоваровУслуг.Менеджер = &Менеджер
	|	И ПоступлениеТоваровУслуг.Проведен = ИСТИНА
	|	И (ПоступлениеТоваровУслуг.Принял <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ИЛИ ПоступлениеТоваровУслуг.ПринялДолжность <> """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоступлениеТоваровУслуг.МоментВремени УБЫВ");
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Ответственный, ОтветственныйДолжность", Выборка.Ответственный, Выборка.ОтветственныйДолжность);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Выполняет поиск действующего договора с контрагентом по заданным реквизитам.
// Если найден один действующий договор, возвращает ссылку на него, в противном случае - пустую ссылку.
//
// Параметры:
// 		Партнер - СправочникСсылка.Партнеры - Деловой партнер предприятия, у которого осуществляются закупки;
//		Контрагент - СправочникСсылка.Контрагенты - Контрагент, с которым заключен договор;
//		Организация - СправочникСсылка.Организации - Организация предприятия, от имени которой заключен договор;
//		ХозяйственныеОперации - ПеречислениеСсылка.ХозяйственныеОперации, Массив - Одна или несколько хозяйственных операций (тип договора);
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов с партнером по договору;
//		Соглашение - СправочникСсылка.СоглашенияСПоставщиками - Если не задан порядок, он будет получен из соглашения с поставщиком.
// 
// Возвращаемое значение:
// 		СправочникСсылка.ДоговорыКонтрагентов.
//
Функция ПолучитьДоговорПоУмолчанию(
	ТекущийДоговор,
	Партнер,
	Контрагент,
	Организация,
	ХозяйственныеОперации = Неопределено,
	ВалютаВзаиморасчетов = Неопределено,
	Соглашение = Неопределено,
	ПорядокРасчетовПоДоговорам = Неопределено) Экспорт
	
	СписокПартнеров = Новый СписокЗначений;
	ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Партнер, СписокПартнеров);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|
	|	ВЫБОР КОГДА ДоговорыКонтрагентов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговору,
	|
	|	ВЫБОР
	|		КОГДА &ТекущийДоговор = ДоговорыКонтрагентов.Ссылка
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Порядок
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ((НЕ &ОтборВалютаВзаиморасчетов)
	|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
	|	И ((НЕ &ОтборСоглашение)
	|			ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).ПорядокОплаты = ДоговорыКонтрагентов.ПорядокОплаты
	|				И ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).ИспользуютсяДоговорыКонтрагентов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ
	|");
	Запрос.УстановитьПараметр("ТекущийДоговор", ТекущийДоговор);
	Запрос.УстановитьПараметр("СписокПартнеров", СписокПартнеров);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтборХозяйственнаяОперация", ХозяйственныеОперации <> Неопределено);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственныеОперации);
	Запрос.УстановитьПараметр("ОтборВалютаВзаиморасчетов", ВалютаВзаиморасчетов <> Неопределено);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ОтборСоглашение", ЗначениеЗаполнено(Соглашение));
	Запрос.УстановитьПараметр("Соглашение", ?(Соглашение=Неопределено, Справочники.СоглашенияСПоставщиками.ПустаяСсылка(), Соглашение));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ИначеЕсли Выборка.Ссылка = ТекущийДоговор Тогда
		ДоговорПоУмолчанию = ТекущийДоговор;
	ИначеЕсли Выборка.Количество() = 1
	 И (ПорядокРасчетовПоДоговорам = Неопределено
	 ИЛИ ПорядокРасчетовПоДоговорам = Выборка.РасчетыПоДоговору) Тогда
		ДоговорПоУмолчанию = Выборка.Ссылка;
	Иначе
		ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Устанавливает видимость реквизита договора в зависимости от данных по соглашению
//
// Параметры:
// 		Соглашение - СправочникСсылка.СоглашенияСПоставщиками
// 		ДоступностьЭлемента - Булево
// 		Договор - СправочникСсылка.ДоговорыКонтрагентов
//
Процедура УстановитьДоступностьДоговора(Объект, ДоступностьЭлемента, ВидимостьЭлемента, Договор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполненыВлияющиеПоля = 
		ЗначениеЗаполнено(Объект.Партнер)
		И ЗначениеЗаполнено(Объект.Контрагент)
		И ЗначениеЗаполнено(Объект.Организация);
	
	ИспользуютсяДоговорыКонтрагентов = 
		НЕ ЗначениеЗаполнено(Объект.Соглашение)
		ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов");
	
	ДоступностьЭлемента = ЗаполненыВлияющиеПоля И ИспользуютсяДоговорыКонтрагентов;
	
	ВидимостьЭлемента = ИспользуютсяДоговорыКонтрагентов;
	
	Если НЕ ДоступностьЭлемента И ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Очищает реквизиты: "НомерСчетаФактуры", "ДатаСчетаФактуры" и "ВалютаСчетаФактуры",
// если в документе снят флажок "ПредъявленСчетФактура".
//
Процедура ОчиститьНомерДатуСчетаФактуры(ДокументОбъект) Экспорт
	
	Если Не ДокументОбъект.ПредъявленСчетФактура Тогда
		Если Не ПустаяСтрока(ДокументОбъект.НомерСчетаФактуры) Тогда
			ДокументОбъект.НомерСчетаФактуры = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.ДатаСчетаФактуры) Тогда
			ДокументОбъект.ДатаСчетаФактуры = Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.ВалютаСчетаФактуры) Тогда
			ДокументОбъект.ВалютаСчетаФактуры = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру параметров представления счета-фактуры в документе.
//
// Параметры:
//  Основание - ДокументСсылка - Документ, на основании которого вводится счет-фактура;
//  Организация - СправочникСсылка.Организации - Организация, на имя которой оформляется счет-фактура;
//	НеТребуется - Булево - Истина - для документа не требуется вводить счет-фактуру.
//
// Возвращаемое значение:
//  Структура
//		ТекстСчетФактура - Строка - Представление счета-фактуры;
//		ТекстСписок - Строка - Представление команды открытия списка счетов-фактур;
//		ГиперссылкаСчетФактура - Булево - Признак гиперссылки представления счета-фактуры;
//		РазрешенВводНового - Булево - Истина - Доступен ввод счета-фактуры по команды "Создать счет-фактуру";
//		РазрешеныИсправления - Булево - Истина - Доступен ввод исправлений счета-фактуры.
//
Функция ПараметрыПредставленияСчетаФактуры(Основание, Организация, НеТребуется = Ложь) Экспорт
	
	Перем РеквизитыСчетаФактуры;
	
	СчетаФактуры = Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(Основание, Организация, РеквизитыСчетаФактуры);
	Если СчетаФактуры.Количество() > 0 Тогда
		ТекстСчетФактура = ПредставлениеСчетаФактуры(РеквизитыСчетаФактуры.Номер, РеквизитыСчетаФактуры.Дата);
		Если СчетаФактуры.Количество() > 1 Тогда
			ТекстСписок = НСтр("ru='Открыть список'") + " (" + Строка(СчетаФактуры.Количество()) + ")"; 
		Иначе
			ТекстСписок = "";
		КонецЕсли;
		ГиперссылкаСчетФактура = Истина;
		РазрешенВводНового = Ложь;
		РазрешеныИсправления = Истина;
		
	ИначеЕсли НеТребуется Тогда
		ТекстСчетФактура = НСтр("ru='Не требуется'");
		ТекстСписок = "";
		ГиперссылкаСчетФактура = Ложь;	
		РазрешенВводНового = Ложь;
		РазрешеныИсправления = Ложь;
		
	ИначеЕсли Не ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.СчетФактураПолученный) Тогда
		ТекстСчетФактура = НСтр("ru='Не введен'");
		ТекстСписок = "";
		ГиперссылкаСчетФактура = Ложь;
		РазрешенВводНового = Ложь;
		РазрешеныИсправления = Ложь;
		
	Иначе
		ТекстСчетФактура = НСтр("ru='Создать счет-фактуру'"); ;
		ТекстСписок = "";
		ГиперссылкаСчетФактура = Истина;
		РазрешенВводНового = Истина;
		РазрешеныИсправления = Ложь;
		
	КонецЕсли;
	
	Возврат Новый Структура("ТекстСчетФактура, ТекстСписок, ГиперссылкаСчетФактура, РазрешенВводНового, РазрешеныИсправления",
		ТекстСчетФактура, ТекстСписок, ГиперссылкаСчетФактура, РазрешенВводНового, РазрешеныИсправления);
	
КонецФункции

// Возвращает данные счета-фактуры в виде структуры
//
// Параметры:
//  ДокументОснование - ДокументСсылка - Документ, на основании которого вводится счет-фактура;
//  Организация - СправочникСсылка.Организации - Организация, на имя которой оформляется счет-фактура;
//  Номер - Строка - Номер счета-фактуры;
//  Дата - Дата - Дата счета-фактуры;
//  Валюта - СправочникСсылка.Валюты - Валюта счета-фактуры.
//
// Возвращаемое значение:
//  Структура
//		ДокументОснование - ДокументСсылка - Документ, на основании которого вводится счет-фактура;
//		Организация - СправочникСсылка.Организации - Организация, на имя которой оформляется счет-фактура;
//		Номер - Строка - Номер счета-фактуры;
//		Дата - Строка - Дата счета-фактуры;
//		Валюта - СправочникСсылка.Валюты - Валюта счета-фактуры.
//
Функция ДанныеСчетаФактурыСтруктурой(ДокументОснование, Организация, Контрагент, Номер, Дата, Валюта) Экспорт
	
	ДанныеСчетаФактуры = Новый Структура;
	
	ДанныеСчетаФактуры.Вставить("ДокументОснование", ДокументОснование);
	ДанныеСчетаФактуры.Вставить("Организация",       Организация);
	ДанныеСчетаФактуры.Вставить("Контрагент",        Контрагент);
	ДанныеСчетаФактуры.Вставить("Номер",             Номер);
	ДанныеСчетаФактуры.Вставить("Дата",              Дата);
	ДанныеСчетаФактуры.Вставить("Валюта",            Валюта);
	
	Возврат ДанныеСчетаФактуры;
	
КонецФункции

// Создает документ "Счет-фактура полученный".
//
// Параметры:
//  ДанныеСчетаФактуры - Структура - Данные счета-фактуры в виде структуры;
//  ПредъявленСчетФактураВОсновании - Булево - Реквизит "ПредъявленСчетФактура" документа-основания;
//  НеТребуется - Булево - Истина - для документа не требуется вводить счет-фактуру.
//
// Возвращаемое значение:
//  Структура
//		ТекстСчетФактура - Строка - Представление счета-фактуры;
//		ТекстСписок - Строка - Представление команды открытия списка счетов-фактур;
//		ГиперссылкаСчетФактура - Булево - Признак гиперссылки представления счета-фактуры;
//		РазрешенВводНового - Булево - Истина - Доступен ввод счета-фактуры по команды "Создать счет-фактуру";
//		РазрешеныИсправления - Булево - Истина - Доступен ввод исправлений счета-фактуры.
//
Функция ВвестиСчетФактуру(ДанныеСчетаФактуры, ПредъявленСчетФактураВОсновании, НеТребуется = Ложь) Экспорт
	
	СчетаФактуры = Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(ДанныеСчетаФактуры.ДокументОснование);
	
	Если ПредъявленСчетФактураВОсновании И (НЕ НеТребуется) И СчетаФактуры.Количество() = 0 Тогда
		
		СчетФактура = Документы.СчетФактураПолученный.СоздатьДокумент();
		СчетФактура.Заполнить(ДанныеСчетаФактуры);
		СчетФактура.Записать(РежимЗаписиДокумента.Проведение);
		
		ПредъявленСчетФактураВОсновании = Ложь;
		
		ПараметрыПредставления = Новый Структура();
		ПараметрыПредставления.Вставить("ТекстСчетФактура", ПредставлениеСчетаФактуры(ДанныеСчетаФактуры.Номер, ДанныеСчетаФактуры.Дата));
		ПараметрыПредставления.Вставить("ТекстСписок", "");
		ПараметрыПредставления.Вставить("ГиперссылкаСчетФактура", Истина);
		ПараметрыПредставления.Вставить("ГиперссылкаСчетФактура", Истина);
		ПараметрыПредставления.Вставить("РазрешенВводНового", Ложь);
		ПараметрыПредставления.Вставить("РазрешеныИсправления", Истина);
		
	Иначе
		
		ПараметрыПредставления = ПараметрыПредставленияСчетаФактуры(ДанныеСчетаФактуры.ДокументОснование, ДанныеСчетаФактуры.Организация, НеТребуется);
		
	КонецЕсли;
	
	Возврат ПараметрыПредставления;
	
КонецФункции

// Заполняет этапы графика оплаты в документе ЗаказПоставщику по графику соглашения
//
// Параметры:
//		ДокументПоступления - ДокументСсылка.ЗаказПоставщику, в котором необходимо заполнить
//			авансовые этапы оплаты
//		СуммаКРаспределению - Число, сумма, распределяющаяся по этапам графика оплаты
//		ЗаполнятьФормуОплаты - Булево - признак, указывающий на необходимость заполнения формы оплаты
//			в документе формой оплаты по графику, указанной в соглашении
//
Процедура ЗаполнитьЭтапыГрафикаОплатыПоСоглашению(ДокументПоступления,
	                                              Знач СуммаКРаспределению,
	                                              ЗаполнятьФормуОплаты = Ложь) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.НомерСтроки КАК НомерСтроки,
	|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.ВариантОплаты КАК ВариантОплаты,
	|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Сдвиг КАК Сдвиг,
	|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка.ФормаОплаты КАК ФормаОплаты,
	|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка.Календарь КАК Календарь
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК СоглашенияСПоставщикамиЭтапыГрафикаОплаты
	|ГДЕ
	|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка = &Соглашение
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
		
	Запрос.УстановитьПараметр("Соглашение",ДокументПоступления.Соглашение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка         = РезультатЗапроса.Выгрузить();
	
	Если  СуммаКРаспределению = 0 ИЛИ  Выгрузка.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗаполнятьФормуОплаты Тогда
		
		ФормаОплаты = Выгрузка[0].ФормаОплаты;
		
		Если ЗначениеЗаполнено(ФормаОплаты) И ДокументПоступления.ФормаОплаты <> ФормаОплаты Тогда
			ДокументПоступления.ФормаОплаты = ФормаОплаты;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЭтапыГрафикаОплаты(ДокументПоступления, СуммаКРаспределению, Выгрузка, Выгрузка[0].Календарь);
	
КонецПроцедуры

// Заполняет этапы графика оплаты в документе ЗаказПоставщику по таблице значений
//
// Параметры:
//		ДокументПоступления - ДокументОбъект.ЗаказПоставщику, в котором необходимо заполнить этапы графика оплаты
//		СуммаКРаспределению - Число, сумма, распределяющаяся по этапам графика оплаты
//		ШаблонГрафика - ТаблицаЗначений, по которой необходимо заполнить этапы графика оплаты
//		Календарь - СправочникСсылка.Календари, по которому вычисляются даты
//
Процедура ЗаполнитьЭтапыГрафикаОплаты(ДокументПоступления,
	                                  Знач СуммаКРаспределению,
	                                  ШаблонГрафика,
	                                  Знач Календарь) Экспорт
	
	ЭтапыГрафикаОплаты = Новый ТаблицаЗначений();
	
	ЭтапыГрафикаОплаты.Колонки.Добавить("ВариантОплаты");
	ЭтапыГрафикаОплаты.Колонки.Добавить("ДатаПлатежа");
	ЭтапыГрафикаОплаты.Колонки.Добавить("ПроцентПлатежа");
	ЭтапыГрафикаОплаты.Колонки.Добавить("СуммаПлатежа");

	РаспределеннаяСумма = 0;
	ТекущийЭтап         = 0;
	ОдинДень            = 86400;
	
	КоличествоЭтапов = ШаблонГрафика.Количество();

	Если НЕ ЗначениеЗаполнено(Календарь) Тогда
		Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	КонецЕсли;
	
	ДатаДокумента = ?(ЗначениеЗаполнено(ДокументПоступления.Дата), ДокументПоступления.Дата, ТекущаяДата());
	ДатаПоступления = ДокументПоступления.ЖелаемаяДатаПоступления;
	
	// Определим календарную дату для каждого этапа графика оплаты
	УчитыватьКалендарь = Ложь;
	
	Если ЗначениеЗаполнено(Календарь) Тогда
		
		УчитыватьКалендарь = Истина;
		
		СдвигиАвансовыхЭтапов = Новый Массив();
		СдвигиКредитныхЭтапов = Новый Массив();
		МассивДатПоКалендарю  = Новый Массив();
		
		Для Каждого Этап Из ШаблонГрафика Цикл
			
			Если Этап.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления Или
				Этап.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения Тогда
				СдвигиАвансовыхЭтапов.Добавить(Этап.Сдвиг);
			Иначе
				СдвигиКредитныхЭтапов.Добавить(Этап.Сдвиг);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СдвигиАвансовыхЭтапов.Количество() > 0 Тогда
			
			МассивДатПоКалендарюАвансовыхЭтапов = КалендарныеГрафики.ПолучитьМассивДатПоКалендарю(Календарь, ДатаДокумента, СдвигиАвансовыхЭтапов);
			
			Для Каждого ДатаПоКалендарю Из МассивДатПоКалендарюАвансовыхЭтапов Цикл
				МассивДатПоКалендарю.Добавить(ДатаПоКалендарю);
			КонецЦикла;
			
		КонецЕсли;
		
		Если СдвигиКредитныхЭтапов.Количество() > 0 Тогда
			
			Если Не ЗначениеЗаполнено(ДатаПоступления) Тогда
				
				Если СдвигиАвансовыхЭтапов.Количество() > 0 Тогда
					Если МассивДатПоКалендарюАвансовыхЭтапов.Количество() > 0 Тогда
						ДатаПоступления = МассивДатПоКалендарюАвансовыхЭтапов[МассивДатПоКалендарюАвансовыхЭтапов.Количество()-1];
					КонецЕсли;
				Иначе
					ДатаПоступления = ДатаДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
			МассивДатПоКалендарюКредитныхЭтапов = КалендарныеГрафики.ПолучитьМассивДатПоКалендарю(Календарь, ДатаПоступления, СдвигиКредитныхЭтапов);
			
			Для Каждого ДатаПоКалендарю Из МассивДатПоКалендарюКредитныхЭтапов Цикл
				МассивДатПоКалендарю.Добавить(ДатаПоКалендарю);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ДатаПоступления) Тогда
			
			МаксСдвигАванса = 0;
		
			Для Каждого ТекЭтап Из ШаблонГрафика Цикл
				
				Если ТекЭтап.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления Или
					ТекЭтап.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения Тогда
					
					МаксСдвигАванса = Макс(МаксСдвигАванса, ТекЭтап.Сдвиг);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДатаПоступления = ДатаДокумента + МаксСдвигАванса * ОдинДень;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним этапы в соответствии с графиком оплаты	
	ДокументПоступления.ЭтапыГрафикаОплаты.Очистить();
	Для Каждого Этап Из ШаблонГрафика Цикл
		
		ТекущийЭтап                     = ТекущийЭтап + 1;
		ЭтапГрафикаОплаты               = ЭтапыГрафикаОплаты.Добавить();
		ЭтапГрафикаОплаты.ВариантОплаты = Этап.ВариантОплаты;
		
		Если УчитыватьКалендарь Тогда
			ДатаПлатежа = МассивДатПоКалендарю[ТекущийЭтап-1];
		Иначе
			ДатаПлатежа = ?(ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления, ДатаПоступления, ДатаДокумента) + Этап.Сдвиг * ОдинДень;
		КонецЕсли;
		
		Если (ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения
			Или ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления)
			И ЗначениеЗаполнено(ДокументПоступления.ЖелаемаяДатаПоступления)
			И ДатаПлатежа > ДокументПоступления.ЖелаемаяДатаПоступления Тогда
			ДатаПлатежа = ДокументПоступления.ЖелаемаяДатаПоступления;
		КонецЕсли;
		
		ЭтапГрафикаОплаты.ДатаПлатежа    = ДатаПлатежа;
		ЭтапГрафикаОплаты.ПроцентПлатежа = Этап.ПроцентПлатежа;
		СуммаЭтапа                       = Окр(СуммаКРаспределению * Этап.ПроцентПлатежа / 100, 2, РежимОкругления.Окр15как20);
		ЭтапГрафикаОплаты.СуммаПлатежа   = ?(ТекущийЭтап = КоличествоЭтапов, СуммаКРаспределению - РаспределеннаяСумма, СуммаЭтапа);
		РаспределеннаяСумма              = РаспределеннаяСумма + ЭтапГрафикаОплаты.СуммаПлатежа;
		
	КонецЦикла;
	
	ДокументПоступления.ЭтапыГрафикаОплаты.Загрузить(ЭтапыГрафикаОплаты);

КонецПроцедуры

// Устанавливает режим выбора групп и элементов у склада на форме
//
Процедура УстановитьРежимВыбораГруппЭлементовСклада(Склад) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки") Тогда
		Склад.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	Иначе
		Склад.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие корректировок и счетов-фактур, введенных на основании изменяемого документа.
//
// Параметры:
// Ссылка - ДокументСсылка - Изменяемый документ
// Основание - ДокументСсылка - Основание для корректировок
// ЕстьКорректировки - ВозвращаемыйПараметр. Признак наличия корректировок изменяемого документа.
// ЕстьСчетаФактуры - ВозвращаемыйПараметр. Признак наличия счетов-фактур изменяемого документа.
//
Процедура ПроверитьНаличиеКорректировокИСчетовФактур(Ссылка, Основание, ЕстьКорректировки, ЕстьСчетаФактуры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Корректировка
	|ИЗ
	|	Документ.КорректировкаПоступления КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументОснование = &Основание
	|	И ДанныеДокумента.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.МоментВремени УБЫВ
	|");
	Запрос.УстановитьПараметр("Основание", Основание);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЕстьКорректировки = Выборка.Корректировка <> Ссылка;
	Иначе
		ЕстьКорректировки = НЕ РезультатЗапроса.Пустой();
	КонецЕсли;	
	
	Если НЕ ЕстьКорректировки Тогда
		СчетаФактуры = Документы.СчетФактураПолученный.СчетаФактурыПоОснованию(Ссылка);
		ЕстьСчетаФактуры = СчетаФактуры.Количество() > 0;
	Иначе
		ЕстьСчетаФактуры = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет информацию о количестве документов поступлений в табличной части документа возврата
//
// Параметры:
//		СписокПоступлений - Список значений, содержащий список документов поступлений
//		ПоступлениеВШапке - Ссылка на документ поступления в шапке документа
//		НадписьЗаголовок - Надпись, содержащая информацию о количестве документов поступлений
//		ЭлементыФормы - Элементы формы документа возврата
//		КолонкаВТабличнойЧасти - Колонка табличной части, содержащая документы поступления
//		ТабличнаяЧасть - Табличная часть документа возврата
//		ИмяПоступленияВТабличнойЧасти - Название колонки с документами поступлений в табличной части
//		
Процедура ОбновитьИнформациюПоПоступлениямВФорме(СписокПоступлений,
	                                             ПоступлениеВШапке,
	                                             НадписьЗаголовок,
	                                             ЭлементыФормы,
	                                             КолонкаВТабличнойЧасти,
	                                             Знач ТабличнаяЧасть,
	                                             Знач ИмяПоступленияВТабличнойЧасти) Экспорт
	
	СписокПоступлений.Очистить();
	Для Каждого ТекСтрока Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(ТекСтрока[ИмяПоступленияВТабличнойЧасти]) И СписокПоступлений.НайтиПоЗначению(ТекСтрока[ИмяПоступленияВТабличнойЧасти]) = Неопределено Тогда
			СписокПоступлений.Добавить(ТекСтрока[ИмяПоступленияВТабличнойЧасти]);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокПоступлений.Количество() = 1 Тогда
		ПоступлениеВШапке = СписокПоступлений[0].Значение;
	Иначе
		ПоступлениеВШапке = Неопределено;
	КонецЕсли;
	
	Если СписокПоступлений.Количество() > 1 Тогда
		НадписьЗаголовок = СтрЗаменить(
			НСтр("ru='Всего документов: %КоличествоПоступлений%'"), "%КоличествоПоступлений%",
			СписокПоступлений.Количество()
		);
	КонецЕсли;
	
	Если СписокПоступлений.Количество() < 1 Тогда
		ПоступлениеВШапке = Неопределено;
	КонецЕсли;
	
	Если СписокПоступлений.Количество() <= 1 Тогда
		ЭлементыФормы.СтраницыПоступления.ТекущаяСтраница = ЭлементыФормы.СтраницаПоступление;
	Иначе
		ЭлементыФормы.СтраницыПоступления.ТекущаяСтраница = ЭлементыФормы.СтраницаПоступления;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документы поступления и цены в табличной части документов возврата
//
// Параметры:
//		ДокументВозврата - ДокументОбъект.ВозвратТоваровПоставщику
//		
Процедура ЗаполнитьПоступленияИЦены(ДокументВозврата) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ДокументВозврата.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ТаблицаПроверяемыхТоваров = ДокументВозврата.Товары.Выгрузить();
		ТабличнаяЧастьВозврата = ДокументВозврата.Товары;
	Иначе
		Возврат
	КонецЕсли;
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВозвратТоваровПоставщикуТовары.Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Характеристика,
	|	ВозвратТоваровПоставщикуТовары.КоличествоУпаковок,
	|	ВозвратТоваровПоставщикуТовары.Упаковка,
	|	ВозвратТоваровПоставщикуТовары.Количество
	|ПОМЕСТИТЬ ЗаполняемыеТовары
	|ИЗ
	|	&ТаблицаТовары КАК ВозвратТоваровПоставщикуТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВозвратТоваровПоставщикуТовары.Номенклатура,
	|	ВозвратТоваровПоставщикуТовары.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДокументыПоступления
	|ИЗ
	|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ПО ЗаполняемыеТовары.Номенклатура = ПоступлениеТоваровУслугТовары.Номенклатура
	|			И ЗаполняемыеТовары.Характеристика = ПоступлениеТоваровУслугТовары.Характеристика
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка.Проведен
	|	И ПоступлениеТоваровУслугТовары.Ссылка.Контрагент = &Контрагент
	|	И ПоступлениеТоваровУслугТовары.Ссылка.Организация = &Организация
	|	И ПоступлениеТоваровУслугТовары.Ссылка.Соглашение = &Соглашение
	|	И ПоступлениеТоваровУслугТовары.Ссылка.НалогообложениеНДС = &НалогообложениеНДС
	|	И ПоступлениеТоваровУслугТовары.Ссылка.Партнер = &Партнер
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(КорректировкаПоступления.Дата) КАК Дата,
	|	ДокументыПоступления.Ссылка КАК СсылкаПоступления
	|ПОМЕСТИТЬ ДанныеКорректировки
	|ИЗ
	|	ДокументыПоступления КАК ДокументыПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|		ПО (КорректировкаПоступления.ДокументОснование = ДокументыПоступления.Ссылка)
	|ГДЕ
	|	КорректировкаПоступления.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыПоступления.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СсылкаПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(КорректировкаПоступления.Ссылка) КАК Ссылка,
	|	МАКСИМУМ(КорректировкаПоступления.Ссылка.Дата) КАК Дата,
	|	КорректировкаПоступления.Ссылка.ДокументОснование КАК СсылкаПоступления
	|ПОМЕСТИТЬ ДанныеПоследнейКорректировки
	|ИЗ
	|	Документ.КорректировкаПоступления КАК КорректировкаПоступления
	|ГДЕ
	|	(КорректировкаПоступления.Ссылка.ДокументОснование, КорректировкаПоступления.Ссылка.Дата) В
	|			(ВЫБРАТЬ
	|				ДанныеКорректировки.СсылкаПоступления КАК СсылкаПоступления,
	|				ДанныеКорректировки.Дата КАК Дата
	|			ИЗ
	|				ДанныеКорректировки)
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаПоступления.Ссылка.ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	СсылкаПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
	|			ТОГДА ДокументыПоступления.Ссылка
	|		ИНАЧЕ ДанныеПоследнейКорректировки.Ссылка
	|	КОНЕЦ КАК Ссылка
	|ПОМЕСТИТЬ СсылкиНаПоступления
	|ИЗ
	|	ДокументыПоступления КАК ДокументыПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоследнейКорректировки КАК ДанныеПоследнейКорректировки
	|		ПО ДокументыПоступления.Ссылка = ДанныеПоследнейКорректировки.СсылкаПоступления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КорректировкаПоступленияТовары.Номенклатура КАК Номенклатура,
	|	КорректировкаПоступленияТовары.Характеристика КАК Характеристика,
	|	КорректировкаПоступленияТовары.КоличествоУпаковок,
	|	КорректировкаПоступленияТовары.Количество,
	|	КорректировкаПоступленияТовары.Цена,
	|	КорректировкаПоступленияТовары.Сумма,
	|	КорректировкаПоступленияТовары.Упаковка,
	|	0 КАК СуммаРучнойСкидки,
	|	КорректировкаПоступленияТовары.Ссылка.ДокументОснование КАК ДокументПоступления
	|ПОМЕСТИТЬ ДанныеПоступления
	|ИЗ
	|	СсылкиНаПоступления КАК СсылкиНаПоступления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПоступления.Товары КАК КорректировкаПоступленияТовары
	|		ПО (КорректировкаПоступленияТовары.Ссылка = СсылкиНаПоступления.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Характеристика,
	|	ПоступлениеТоваровУслугТовары.КоличествоУпаковок,
	|	ПоступлениеТоваровУслугТовары.Количество,
	|	ВЫБОР
	|		КОГДА ПоступлениеТоваровУслугТовары.СуммаРучнойСкидки = 0
	|				ИЛИ ПоступлениеТоваровУслугТовары.КоличествоУпаковок = 0
	|			ТОГДА ПоступлениеТоваровУслугТовары.Цена
	|		ИНАЧЕ ПоступлениеТоваровУслугТовары.Сумма / ПоступлениеТоваровУслугТовары.КоличествоУпаковок
	|	КОНЕЦ,
	|	ПоступлениеТоваровУслугТовары.Сумма,
	|	ПоступлениеТоваровУслугТовары.Упаковка,
	|	ПоступлениеТоваровУслугТовары.СуммаРучнойСкидки,
	|	ПоступлениеТоваровУслугТовары.Ссылка
	|ИЗ
	|	СсылкиНаПоступления КАК СсылкиНаПоступления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|		ПО (ПоступлениеТоваровУслугТовары.Ссылка = СсылкиНаПоступления.Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ДокументПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
	|	ТаблицаПроверяемыеТовары.ДокументПоступления КАК ДокументПоступления
	|ПОМЕСТИТЬ ДанныеДокументовВозврата
	|ИЗ
	|	ДокументыПоступления КАК ДокументыПоступления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаПроверяемыеТовары
	|		ПО (ТаблицаПроверяемыеТовары.ДокументПоступления = ДокументыПоступления.Ссылка)
	|ГДЕ
	|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
	|	И ТаблицаПроверяемыеТовары.Ссылка <> &ДокументВозврата
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПроверяемыеТовары.Номенклатура,
	|	ТаблицаПроверяемыеТовары.Характеристика,
	|	ТаблицаПроверяемыеТовары.ДокументПоступления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ДокументПоступления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеПоступления.Номенклатура,
	|	ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) КАК Количество,
	|	ДанныеПоступления.Характеристика,
	|	ВЫБОР
	|		КОГДА ДанныеПоступления.Упаковка = ЗаполняемыеТовары.Упаковка
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеПоступления.Упаковка ЕСТЬ NULL 
	|							ИЛИ ДанныеПоступления.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|						ТОГДА ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)
	|					ИНАЧЕ (ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)) / ДанныеПоступления.Упаковка.Коэффициент
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
	|						ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|					ТОГДА ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)
	|				ИНАЧЕ (ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)) / ЗаполняемыеТовары.Упаковка.Коэффициент
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) = 0
	|			ТОГДА ДанныеПоступления.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДанныеПоступления.Упаковка = ЗаполняемыеТовары.Упаковка
	|					ТОГДА ВЫБОР
	|							КОГДА ДанныеПоступления.Упаковка ЕСТЬ NULL 
	|									ИЛИ ДанныеПоступления.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|								ТОГДА ДанныеПоступления.Сумма / (ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0))
	|							ИНАЧЕ ДанныеПоступления.Сумма / ((ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)) / ДанныеПоступления.Упаковка.Коэффициент)
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
	|								ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|							ТОГДА ДанныеПоступления.Сумма / (ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0))
	|						ИНАЧЕ ДанныеПоступления.Сумма / ((ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)) / ЗаполняемыеТовары.Упаковка.Коэффициент)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	ДанныеПоступления.ДокументПоступления
	|ИЗ
	|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоступления КАК ДанныеПоступления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументовВозврата КАК ДанныеДокументовВозврата
	|			ПО ДанныеПоступления.ДокументПоступления = ДанныеДокументовВозврата.ДокументПоступления
	|				И ДанныеПоступления.Номенклатура = ДанныеДокументовВозврата.Номенклатура
	|				И ДанныеПоступления.Характеристика = ДанныеДокументовВозврата.Характеристика
	|		ПО ЗаполняемыеТовары.Номенклатура = ДанныеПоступления.Номенклатура
	|			И ДанныеПоступления.Характеристика = ЗаполняемыеТовары.Характеристика
	|ГДЕ
	|	ДанныеПоступления.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) > 0
	|	И ДанныеПоступления.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеПоступления.ДокументПоступления.Дата УБЫВ";
	Запрос.УстановитьПараметр("Партнер", ДокументВозврата.Партнер);
	Запрос.УстановитьПараметр("Контрагент", ДокументВозврата.Контрагент);
	Запрос.УстановитьПараметр("Организация", ДокументВозврата.Организация);
	Запрос.УстановитьПараметр("Соглашение", ДокументВозврата.Соглашение);
	Запрос.УстановитьПараметр("НалогообложениеНДС", ДокументВозврата.НалогообложениеНДС);
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаПроверяемыхТоваров);
	Запрос.УстановитьПараметр("ДокументВозврата", ДокументВозврата.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТовары Из ТабличнаяЧастьВозврата Цикл
		НайденныеСтроки = РезультатЗапроса.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если СтрокаТовары.Количество <= НайденнаяСтрока.Количество Тогда
				СтрокаТовары.ДокументПоступления = НайденнаяСтрока.ДокументПоступления;
				СтрокаТовары.Цена = НайденнаяСтрока.Цена;
				НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок - СтрокаТовары.КоличествоУпаковок;
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрокаТовары.Количество;
				Если НайденнаяСтрока.Количество = 0 Тогда
					РезультатЗапроса.Удалить(НайденнаяСтрока);
				КонецЕсли;
			Иначе
				СтрокаТовары.ДокументПоступления = НайденнаяСтрока.ДокументПоступления;
				СтрокаТовары.Цена = НайденнаяСтрока.Цена;
				ДобавленнаяСтрока = ТабличнаяЧастьВозврата.Добавить();
				ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтрокаТовары);
				ДобавленнаяСтрока.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок -  НайденнаяСтрока.КоличествоУпаковок;
				ДобавленнаяСтрока.Количество = СтрокаТовары.Количество - НайденнаяСтрока.Количество;
				СтрокаТовары.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок;
				СтрокаТовары.Количество = НайденнаяСтрока.Количество;
				РезультатЗапроса.Удалить(НайденнаяСтрока);
			КонецЕсли;
			Прервать;
		КонецЦикла;
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары.ДокументПоступления = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
			СтрокаТовары.Цена = 0;
		КонецЕсли;
	КонецЦикла;
		
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументВозврата);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ТабличнаяЧастьВозврата, СтруктураДействий, Неопределено);

КонецПроцедуры

// Определяет хозяйственную операцию возврата по хозяйственной операции поступления
//
// Параметры:
// ХозяйственнаяОперацияПоступление - ПеречислениеСсылка.ХозяйственныеОперации
//
// Возвращаемое значение:
// ПеречислениеСсылка.ХозяйственныеОперации
// Хозяйственная операция возврата
//
Функция ПолучитьХозяйственнуюОперациюВозвратаПоПоступлению(Знач ХозяйственнаяОперацияПоступление) Экспорт
	
	Если ХозяйственнаяОперацияПоступление = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
	 Или Не ЗначениеЗаполнено(ХозяйственнаяОперацияПоступление) Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику;
	ИначеЕсли ХозяйственнаяОперацияПоступление = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту;
	КонецЕсли;
	
КонецФункции

// Заполняет номенклатуру поставщика при изменении поставщика в документе
//
Процедура ЗаполнитьНоменклатуруПоставщикаВТаблице(Таблица, Партнер) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабличнаяЧасть.НомерСтроки    КАК НомерСтроки,
		|	ТабличнаяЧасть.Номенклатура   КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ТабличнаяЧасть.Упаковка       КАК Упаковка
		|ПОМЕСТИТЬ
		|	ТабличнаяЧасть
		|ИЗ
		|	&ТабличнаяЧасть КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|;
		|ВЫБРАТЬ
		|	МАКСИМУМ(НоменклатураПоставщиков.Ссылка)   КАК НоменклатураПоставщика,
		|	КОЛИЧЕСТВО(*)                              КАК КоличествоНоменклатурыПоставщика,
		|	НоменклатураПоставщиков.Номенклатура       КАК Номенклатура,
		|	НоменклатураПоставщиков.Характеристика     КАК Характеристика,
		|	НоменклатураПоставщиков.Упаковка           КАК Упаковка
		|ПОМЕСТИТЬ
		|	НоменклатураПоставщика
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Владелец = &Партнер
		|	И Не НоменклатураПоставщиков.ПометкаУдаления
		|	И (Номенклатура,Характеристика,Упаковка) В (
		|		ВЫБРАТЬ
		|			Товары.Номенклатура,
		|			Товары.Характеристика,
		|			Товары.Упаковка
		|		ИЗ
		|			ТабличнаяЧасть КАК Товары
		|		)
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураПоставщиков.Номенклатура,
		|	НоменклатураПоставщиков.Характеристика,
		|	НоменклатураПоставщиков.Упаковка
		|;
		|ВЫБРАТЬ
		|	МАКСИМУМ(НоменклатураПоставщиков.Ссылка)   КАК НоменклатураПоставщика,
		|	НоменклатураПоставщиков.Номенклатура       КАК Номенклатура,
		|	НоменклатураПоставщиков.Характеристика     КАК Характеристика,
		|	НоменклатураПоставщиков.Упаковка           КАК Упаковка
		|ПОМЕСТИТЬ
		|	НоменклатураПоставщикаБезУпаковок
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Владелец = &Партнер
		|	И Не НоменклатураПоставщиков.ПометкаУдаления
		|	И (Номенклатура,Характеристика,Упаковка) В (
		|		ВЫБРАТЬ
		|			Товары.Номенклатура,
		|			Товары.Характеристика,
		|			ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|		ИЗ
		|			ТабличнаяЧасть КАК Товары
		|		)
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураПоставщиков.Номенклатура,
		|	НоменклатураПоставщиков.Характеристика,
		|	НоменклатураПоставщиков.Упаковка
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(*) = 1
		|;
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			НоменклатураПоставщикаСУпаковками.КоличествоНоменклатурыПоставщика = 1
		|		ТОГДА
		|			НоменклатураПоставщикаСУпаковками.НоменклатураПоставщика
		|		КОГДА
		|			НоменклатураПоставщикаСУпаковками.НоменклатураПоставщика ЕСТЬ NULL
		|		ТОГДА
		|			НоменклатураПоставщикаБезУпаковок.НоменклатураПоставщика
		|	КОНЕЦ КАК НоменклатураПоставщика
		|ИЗ
		|	ТабличнаяЧасть КАК ТабличнаяЧасть
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	НоменклатураПоставщика КАК НоменклатураПоставщикаСУпаковками
		|ПО
		|	ТабличнаяЧасть.Номенклатура = НоменклатураПоставщикаСУпаковками.Номенклатура
		|	И ТабличнаяЧасть.Характеристика = НоменклатураПоставщикаСУпаковками.Характеристика
		|	И ТабличнаяЧасть.Упаковка = НоменклатураПоставщикаСУпаковками.Упаковка
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	НоменклатураПоставщикаБезУпаковок КАК НоменклатураПоставщикаБезУпаковок
		|ПО
		|	ТабличнаяЧасть.Номенклатура = НоменклатураПоставщикаБезУпаковок.Номенклатура
		|	И ТабличнаяЧасть.Характеристика = НоменклатураПоставщикаБезУпаковок.Характеристика
		|ГДЕ
		|	НоменклатураПоставщикаСУпаковками.НоменклатураПоставщика ЕСТЬ НЕ NULL
		|	ИЛИ НоменклатураПоставщикаБезУпаковок.НоменклатураПоставщика ЕСТЬ НЕ NULL
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|");
		
	Запрос.УстановитьПараметр("ТабличнаяЧасть", Таблица.Выгрузить(,"НомерСтроки,Номенклатура,Характеристика,Упаковка"));
	Запрос.УстановитьПараметр("Партнер", Партнер);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если Не РезультатЗапроса[3].Пустой() Тогда
	
		Выборка = РезультатЗапроса[3].Выбрать();
		
		Для Каждого ТекСтрока Из Таблица Цикл
			
			Если Выборка.НайтиСледующий(ТекСтрока.НомерСтроки, "НомерСтроки") Тогда
				ТекСтрока.НоменклатураПоставщика = Выборка.НоменклатураПоставщика;
				Выборка.Сбросить();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет номенклатуру, характеристику, упаковку в номенклатуре поставщика с пустой номенклатурой
//
Процедура СвязатьНоменклатуруСНоменклатуройПоставщика(Товары, Отказ) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") Тогда
		Возврат;
	КонецЕсли;
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Упаковка               КАК Упаковка
			|ПОМЕСТИТЬ
			|	Товары
			|ИЗ
			|	&Товары КАК Товары
			|ГДЕ
			|	Товары.НоменклатураПоставщика <> ЗНАЧЕНИЕ(Справочник.НоменклатураПоставщиков.ПустаяСсылка)
			|	И Товары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|;
			|ВЫБРАТЬ
			|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Упаковка               КАК Упаковка
			|ПОМЕСТИТЬ
			|	СгруппированныеТовары
			|ИЗ
			|	Товары КАК Товары
			|ГДЕ
			|	Товары.НоменклатураПоставщика.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
			|СГРУППИРОВАТЬ ПО
			|	Товары.НоменклатураПоставщика,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Упаковка
			|;
			|ВЫБРАТЬ
			|	СгруппированныеТовары.НоменклатураПоставщика КАК НоменклатураПоставщика,
			|	СгруппированныеТовары.Номенклатура           КАК Номенклатура,
			|	СгруппированныеТовары.Характеристика         КАК Характеристика,
			|	КОЛИЧЕСТВО(*)                                КАК КоличествоУпаковок,
			|	МАКСИМУМ(СгруппированныеТовары.Упаковка)     КАК Упаковка
			|ИЗ
			|	СгруппированныеТовары КАК СгруппированныеТовары
			|СГРУППИРОВАТЬ ПО
			|	СгруппированныеТовары.НоменклатураПоставщика,
			|	СгруппированныеТовары.Номенклатура,
			|	СгруппированныеТовары.Характеристика
			|");
			
		Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(,"НомерСтроки,НоменклатураПоставщика,Номенклатура,Характеристика,Упаковка"));
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Если Не РезультатЗапроса[2].Пустой() Тогда
			
			Выборка = РезультатЗапроса[2].Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Попытка
					
					ЗаблокироватьДанныеДляРедактирования(Выборка.НоменклатураПоставщика);
					
					НоменклатураПоставщикаОбъект = Выборка.НоменклатураПоставщика.ПолучитьОбъект();
					ЗаполнитьЗначенияСвойств(НоменклатураПоставщикаОбъект, Выборка);
					Если Выборка.КоличествоУпаковок > 1 Тогда
						НоменклатураПоставщикаОбъект.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
					КонецЕсли;
					НоменклатураПоставщикаОбъект.Записать();
					
				Исключение
					
					ТекстОшибки = НСтр("ru='Не удалось заблокировать %Элемент%. %ОписаниеОшибки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Элемент%",        Выборка.НоменклатураПоставщика);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					Отказ = Истина;
					ВызватьИсключение ТекстОшибки;
						
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
	
КонецПроцедуры

// Заполняет количество в тч Товары по фактически принятому
//
// Параметры:
// ЕстьПринятыеТовары                     - Булево - Флаг, по которому можно определить что товары отгружены
// ЕстьПринимающиесяТовары                - Булево - Флаг, по которому можно определить что товары собираются
// ЗаполнятьПринимающимисяТоварами        - Булево - Флаг, по которому можно определить необходимость заполнения принимающимися товарами
// Товары                                 - Таблица - Таблица товаров документа
// ДокументПоступления                    - Ссылка на документ поступления
// МассивРаспоряжений                     - Массив распоряжений из документа поступления
// СтруктураДействийСИзмененнымиСтроками  - Структура - Действия, которые нужно произвести над измененными строками
// СтруктураДействийСДобавленнымиСтроками - Структура - Действия, которые нужно произвести над добавленными строками
//
// Возвращаемое значение:
// Булево
// Флаг, по которому можно определить что в результате перезаполнения тч изменилась
//
Функция ЗаполнитьТоварыПоФактическойПриемке(ЕстьПринятыеТовары,
	                                        ЕстьПринимающиесяТовары,
	                                        ЗаполнятьПринимающимисяТоварами,
	                                        Товары,
	                                        ДокументПоступления,
	                                        МассивРаспоряжений = Неопределено,
	                                        Склад = Неопределено,
	                                        Соглашение = Неопределено,
	                                        СтруктураДействийСИзмененнымиСтроками,
	                                        СтруктураДействийСДобавленнымиСтроками) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьИзменения      = Ложь;
	ЕстьПринятыеТовары = Ложь;
	ТипПоступления =  ТипЗнч(ДокументПоступления);
	ВозможнаПорча = ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров") И ТипПоступления = Тип("ДокументСсылка.ВозвратТоваровОтКлиента");
	ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным;
	Если ЗначениеЗаполнено(Соглашение) Тогда
		ВариантПриемкиТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "ВариантПриемкиТоваров");
	КонецЕсли;
	
	Если Не ЕстьПринимающиесяТовары Тогда
		
		Если МассивРаспоряжений <> Неопределено Тогда
		
			Запрос = Новый Запрос(ТекстЗапросаПроверкаПринимающихсяТоваровПоРаспоряжениям(ТипПоступления));
			Запрос.УстановитьПараметр("МассивРаспоряжений",  МассивРаспоряжений);
			Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
			Запрос.УстановитьПараметр("Соглашение",          Соглашение);
			Запрос.УстановитьПараметр("Склад",Склад);
			Результат = Запрос.ВыполнитьПакет();
			Выборка = Результат[3].Выбрать();
			
		Иначе
			
			Запрос = Новый Запрос(ТекстЗапросаПроверкаПринимающихсяТоваровПоНакладной());
			Запрос.УстановитьПараметр("ДокументПоступления", ДокументПоступления);
			Запрос.УстановитьПараметр("Соглашение",          Соглашение);
			Выборка = Запрос.Выполнить().Выбрать();
			
		КонецЕсли;
		
		Если Выборка.Следующий() Тогда
			
			Если Выборка.КоличествоПринимается > 0 Тогда
				ЕстьПринимающиесяТовары = Истина;
			КонецЕсли;
			
			Если Выборка.Количество > 0 Тогда
				ЕстьПринятыеТовары = Истина;
			КонецЕсли;
			
			Если ЕстьПринимающиесяТовары Тогда
				Возврат ЕстьИзменения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивНепринятыхСтрок  = Новый Массив();
	МассивПерепоставленныхСтрок = Новый Массив();
	
	ВыгружаемыеКолонки = "Номенклатура,Характеристика,Упаковка,Количество";
	
	ДобавлятьКолонкуСклад = Ложь;
	Если Склад = Неопределено Тогда
		ВыгружаемыеКолонки = ВыгружаемыеКолонки + ",Склад";
	Иначе
		ДобавлятьКолонкуСклад = Истина;
	КонецЕсли;
	
	ДобавлятьКолонкуЗаказПоставщику = Ложь;
	Если МассивРаспоряжений <> Неопределено
		И ТипПоступления = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		И ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным Тогда
		
		ВыгружаемыеКолонки = ВыгружаемыеКолонки + ",ЗаказПоставщику";
	Иначе
		ДобавлятьКолонкуЗаказПоставщику = Истина;
	КонецЕсли;
		
	ТаблицаТоваров = Товары.Выгрузить(, ВыгружаемыеКолонки);
	
	Если ДобавлятьКолонкуСклад Тогда
		ТаблицаТоваров.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
			ТекСтрока.Склад = Склад;
		КонецЦикла;
	КонецЕсли;
	
	Если ДобавлятьКолонкуЗаказПоставщику Тогда
		ТаблицаТоваров.Колонки.Добавить("ЗаказПоставщику", Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику"));
	КонецЕсли;
	
	Если МассивРаспоряжений <> Неопределено Тогда
		Запрос = Новый Запрос(ТекстЗапросаПоРаспоряжениям(ТипПоступления));
		Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
		Запрос.УстановитьПараметр("Склад",Склад);
	Иначе
		Запрос = Новый Запрос(ТекстЗапросаПоНакладной());
		МассивПоступлений = Новый Массив();
		МассивПоступлений.Добавить(ДокументПоступления);
		Запрос.УстановитьПараметр("МассивРаспоряжений", МассивПоступлений);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПоступления);
	Запрос.УстановитьПараметр("Товары",     ТаблицаТоваров);
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса[0].Пустой() Или (Не ЕстьПринятыеТовары И Не ЕстьПринимающиесяТовары) Тогда
		Возврат ЕстьИзменения;
	КонецЕсли;
	
	Если МассивРаспоряжений <> Неопределено Тогда
		
		ТаблицаОстатков = РезультатЗапроса[2].Выгрузить();
		ТаблицаОстатков.Индексы.Добавить("Номенклатура,Характеристика");
		ТаблицаДублей            = РезультатЗапроса[4].Выгрузить();
		ВыборкаУслуг             = РезультатЗапроса[5].Выбрать();
		ВыборкаУпаковок          = РезультатЗапроса[6].Выбрать();
		ВыборкаНеордерныхСкладов = РезультатЗапроса[7].Выбрать();
		
	Иначе
		
		ТаблицаОстатков = РезультатЗапроса[0].Выгрузить();
		ТаблицаОстатков.Индексы.Добавить("Номенклатура,Характеристика");
		ТаблицаДублей            = РезультатЗапроса[2].Выгрузить();
		ВыборкаУслуг             = РезультатЗапроса[3].Выбрать();
		ВыборкаУпаковок          = РезультатЗапроса[4].Выбрать();
		ВыборкаНеордерныхСкладов = РезультатЗапроса[5].Выбрать();
	
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Товары Цикл
		
		Если ВозможнаПорча И ТекСтрока.Порча Тогда
			ТекНоменклатура   = ТекСтрока.НоменклатураОприходование;
			ТекХарактеристика = ТекСтрока.ХарактеристикаОприходование;
		Иначе
			ТекНоменклатура   = ТекСтрока.Номенклатура;
			ТекХарактеристика = ТекСтрока.Характеристика;
		КонецЕсли;
		
		ВыборкаУслуг.Сбросить();
		Если ВыборкаУслуг.НайтиСледующий(ТекНоменклатура, "Номенклатура") Тогда
			Продолжить;
		КонецЕсли;
			
		Если Склад = Неопределено Тогда
			СкладПоиска = ТекСтрока.Склад;
		Иначе
			СкладПоиска = Склад;
		КонецЕсли;
		
		ВыборкаНеордерныхСкладов.Сбросить();
		Если ВыборкаНеордерныхСкладов.НайтиСледующий(СкладПоиска, "Склад") Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура(
			"Номенклатура,Характеристика,Склад",
			ТекНоменклатура,
			ТекХарактеристика,
			СкладПоиска
		);
		
		Если МассивРаспоряжений <> Неопределено
			И ТипПоступления = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
			И ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным Тогда
				СтруктураПоиска.Вставить("Распоряжение", ТекСтрока.ЗаказПоставщику);
		КонецЕсли;
		
		СтрокиТаблицыОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиТаблицыОстатков.Количество() > 0 Тогда
			
			СтрокаОстатков = СтрокиТаблицыОстатков[0];
			СтрокаОстатков.НоменклатураДобавлена = Истина;
			ЕстьПринятыеТовары = Истина;
			
			НайденныеСтроки = ТаблицаДублей.НайтиСтроки(СтруктураПоиска);
			
			Если ЗаполнятьПринимающимисяТоварами Тогда
				ТекущееКоличество = СтрокаОстатков.Количество + СтрокаОстатков.КоличествоПринимается;
			Иначе
				ТекущееКоличество = СтрокаОстатков.Количество;
			КонецЕсли;
			
			Если ТекущееКоличество = 0 Тогда
				
				ЕстьИзменения = Истина;
				МассивНепринятыхСтрок.Добавить(ТекСтрока);
				СтрокиТаблицыОстатков[0].НоменклатураДобавлена = Истина;
				
			КонецЕсли;
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если НайденныеСтроки[0].КоличествоСтрок = НайденныеСтроки[0].КоличествоНераспределенныхСтрок Тогда
					НайденныеСтроки[0].Количество = ТекущееКоличество;
				КонецЕсли;
				
				Если НайденныеСтроки[0].КоличествоНераспределенныхСтрок = 1 Тогда
					ТекущееКоличество = НайденныеСтроки[0].Количество;
					Если НайденныеСтроки[0].Количество <= 0 Тогда
						ЕстьИзменения = Истина;
						МассивНепринятыхСтрок.Добавить(ТекСтрока);
					КонецЕсли;
				Иначе
					Если НайденныеСтроки[0].Количество <= 0 Тогда
						ЕстьИзменения = Истина;
						МассивНепринятыхСтрок.Добавить(ТекСтрока);
					Иначе
						ТекущееКоличество = ?(НайденныеСтроки[0].Количество > ТекСтрока.Количество, ТекСтрока.Количество, НайденныеСтроки[0].Количество);
					КонецЕсли;
				КонецЕсли;
				
				НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество - ТекСтрока.Количество;
				НайденныеСтроки[0].КоличествоНераспределенныхСтрок = НайденныеСтроки[0].КоличествоНераспределенныхСтрок - 1;
				
			КонецЕсли;
			
			Если ТекСтрока.Количество <> ТекущееКоличество Тогда
				
				ЕстьИзменения = Истина;
				
				Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
					Если ВыборкаУпаковок.НайтиСледующий(ТекСтрока.Упаковка, "Упаковка") Тогда
						КоэффициентУпаковки = ВыборкаУпаковок.Коэффициент;
					Иначе
						КоэффициентУпаковки = 1;
					КонецЕсли;
					ВыборкаУпаковок.Сбросить();
				Иначе
					КоэффициентУпаковки = 1;
				КонецЕсли;
				
				Если МассивРаспоряжений <> Неопределено И ЗначениеЗаполнено(ТекСтрока.КодСтроки) И ТекущееКоличество > ТекСтрока.Количество Тогда
					
					ТекКоличество =  ТекущееКоличество - ТекСтрока.Количество;
					ТекКоличествоУпаковок =  (ТекущееКоличество - ТекСтрока.Количество) / КоэффициентУпаковки;
					
					ПерепоставленнаяСтрока = Новый Структура("СтрокаТЧ,Количество,КоличествоУпаковок,КодСтроки", ТекСтрока, ТекКоличество, ТекКоличествоУпаковок, 0);
					МассивПерепоставленныхСтрок.Добавить(ПерепоставленнаяСтрока);
					
				Иначе
					ТекСтрока.Количество = ТекущееКоличество;
					ТекСтрока.КоличествоУпаковок = ТекущееКоличество / КоэффициентУпаковки;
				КонецЕсли;
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрока, СтруктураДействийСИзмененнымиСтроками, Неопределено);
			
			КонецЕсли;
			
		Иначе
			ЕстьИзменения = Истина;
			МассивНепринятыхСтрок.Добавить(ТекСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекЭлемент Из МассивНепринятыхСтрок Цикл
		Товары.Удалить(ТекЭлемент);
	КонецЦикла;
	
	Для Каждого ПерепоставленнаяСтрока Из МассивПерепоставленныхСтрок Цикл
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПерепоставленнаяСтрока.СтрокаТЧ);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПерепоставленнаяСтрока);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействийСИзмененнымиСтроками, Неопределено);
		
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("НоменклатураДобавлена", Ложь);
	СтрокиКДобавлению = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаКДобавлению Из СтрокиКДобавлению Цикл
		
		Если ЗаполнятьПринимающимисяТоварами Тогда
			ТекущееКоличество = СтрокаКДобавлению.Количество + СтрокаКДобавлению.КоличествоПринимается;
		Иначе
			ТекущееКоличество = СтрокаКДобавлению.Количество;
		КонецЕсли;
		
		Если ТекущееКоличество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКДобавлению);
		
		НоваяСтрока.Количество         = ТекущееКоличество;
		НоваяСтрока.КоличествоУпаковок = ТекущееКоличество;
		
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьХарактеристикуПоВладельцу", НоваяСтрока.Характеристика);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействийСДобавленнымиСтроками, Неопределено);
		
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьСтруктуруУсловийЗакупок()
	
	Возврат Новый Структура("
		|Соглашение,
		|Партнер,
		|Контрагент,
		|Организация,
		|Валюта,
		|ЦенаВключаетНДС,
		|НалогообложениеНДС,
		|Склад,
		|ФормаОплаты,
		|ПорядокОплаты,
		|ГруппаФинансовогоУчета,
		|СрокПоставки,
		|ХозяйственнаяОперация,
		|РегистрироватьЦеныПоУсловиям,
		|РегистрироватьЦеныПоставщика,
		|ГруппаФинансовогоУчета,
		|СпособРасчетаВознаграждения,
		|ПроцентВознаграждения,
		|УдержатьВознаграждение,
		|ИспользуютсяДоговорыКонтрагентов,
		|ПорядокРасчетов,
		|ВозвращатьМногооборотнуюТару,
		|СрокВозвратаМногооборотнойТары,
		|РассчитыватьДатуВозвратаТарыПоКалендарю
		|");
		
КонецФункции

Функция ТекстЗапросаПроверкаПринимающихсяТоваровПоРаспоряжениям(ТипПоступления)
	
	ТекстЗапросаПоРаспоряжениям = "";
	
	Если ТипПоступления = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ТекстЗапросаПоРаспоряжениям = "
			|ВЫБРАТЬ
			|	Поступление.Номенклатура      КАК Номенклатура,
			|	Поступление.Характеристика    КАК Характеристика,
			|	Поступление.Склад             КАК Склад,
			|	СУММА(Поступление.Количество) КАК КоличествоПоступления
			|ПОМЕСТИТЬ
			|	Поступление
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК Поступление
			|ГДЕ
			|	ВЫБОР
			|		КОГДА
			|			&Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
			|			ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
			|		ТОГДА
			|			Поступление.ЗаказПоставщику В (&МассивРаспоряжений)
			|		ИНАЧЕ
			|			Поступление.Ссылка.Соглашение = &Соглашение
			|	КОНЕЦ
			|	И Поступление.Ссылка <> &ДокументПоступления
			|	И Поступление.Ссылка.Проведен
			|СГРУППИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Склад
			|;
			|";
			
	ИначеЕсли ТипПоступления = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		ТекстЗапросаПоРаспоряжениям = "
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА
			|			Поступление.Порча
			|		ТОГДА
			|			Поступление.НоменклатураОприходование
			|		ИНАЧЕ
			|			Поступление.Номенклатура
			|	КОНЕЦ КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА
			|			Поступление.Порча
			|		ТОГДА
			|			Поступление.ХарактеристикаОприходование
			|		ИНАЧЕ
			|			Поступление.Характеристика
			|	КОНЕЦ КАК Характеристика,
			|	Поступление.Ссылка.Склад      КАК Склад,
			|	СУММА(Поступление.Количество) КАК КоличествоПоступления
			|ПОМЕСТИТЬ
			|	Поступление
			|ИЗ
			|	Документ.ВозвратТоваровОтКлиента.Товары КАК Поступление
			|ГДЕ
			|	Поступление.Ссылка.ЗаявкаНаВозвратТоваровОтКлиента В (&МассивРаспоряжений)
			|	И Поступление.Ссылка <> &ДокументПоступления
			|	И Поступление.Ссылка.Проведен
			|СГРУППИРОВАТЬ ПО
			|	ВЫБОР
			|		КОГДА
			|			Поступление.Порча
			|		ТОГДА
			|			Поступление.НоменклатураОприходование
			|		ИНАЧЕ
			|			Поступление.Номенклатура
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА
			|			Поступление.Порча
			|		ТОГДА
			|			Поступление.ХарактеристикаОприходование
			|		ИНАЧЕ
			|			Поступление.Характеристика
			|	КОНЕЦ,
			|	Ссылка.Склад
			|;
			|";
			
	КонецЕсли;
	
	ТекстЗапросаПоРаспоряжениям = ТекстЗапросаПоРаспоряжениям + "
		|ВЫБРАТЬ
		|	ТоварыКПоступлениюОбороты.Номенклатура                          КАК Номенклатура,
		|	ТоварыКПоступлениюОбороты.Характеристика                        КАК Характеристика,
		|	ТоварыКПоступлениюОбороты.Склад                                 КАК Склад,
		|	ЕСТЬNULL(СУММА(ТоварыКПоступлениюОбороты.КПоступлениюРасход),0) КАК Количество,
		|	ЕСТЬNULL(СУММА(ТоварыКПоступлениюОбороты.ПринимаетсяПриход),0)  КАК КоличествоПринимается
		|ПОМЕСТИТЬ
		|	ТоварыКПоступлениюОбороты
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Обороты(, , ,
		|	ВЫБОР
		|		КОГДА
		|			&Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|			ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|		ТОГДА
		|			ДокументПоступления В (&МассивРаспоряжений)
		|		ИНАЧЕ
		|			ДокументПоступления = &Соглашение
		|	КОНЕЦ
		|		) КАК ТоварыКПоступлениюОбороты
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|ИМЕЮЩИЕ
		|	СУММА(ЕСТЬNULL(ТоварыКПоступлениюОбороты.КПоступлениюРасход,0))
		|	+ СУММА(ЕСТЬNULL(ТоварыКПоступлениюОбороты.ПринимаетсяПриход,0)) > 0
		|	И ТоварыКПоступлениюОбороты.Склад В (&Склад)
		|;
		|ВЫБРАТЬ
		|	ТоварыКПоступлениюОбороты.Номенклатура          КАК Номенклатура,
		|	ТоварыКПоступлениюОбороты.Характеристика        КАК Характеристика,
		|	ТоварыКПоступлениюОбороты.Склад                 КАК Склад,
		|	ВЫБОР
		|		КОГДА
		|			ТоварыКПоступлениюОбороты.Количество > ЕСТЬNULL(Поступление.КоличествоПоступления,0)
		|		ТОГДА
		|			ТоварыКПоступлениюОбороты.Количество - ЕСТЬNULL(Поступление.КоличествоПоступления,0)
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА
		|			ТоварыКПоступлениюОбороты.Количество >= ЕСТЬNULL(Поступление.КоличествоПоступления,0)
		|		ТОГДА
		|			ТоварыКПоступлениюОбороты.КоличествоПринимается
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ КАК КоличествоПринимается
		|ПОМЕСТИТЬ
		|	НеоформленныеТовары
		|ИЗ
		|	ТоварыКПоступлениюОбороты КАК ТоварыКПоступлениюОбороты
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Поступление КАК Поступление
		|ПО
		|	ТоварыКПоступлениюОбороты.Номенклатура = Поступление.Номенклатура
		|	И ТоварыКПоступлениюОбороты.Характеристика = Поступление.Характеристика
		|	И ТоварыКПоступлениюОбороты.Склад = Поступление.Склад
		|ГДЕ
		|	ТоварыКПоступлениюОбороты.Количество
		|	+ ТоварыКПоступлениюОбороты.КоличествоПринимается
		|	- ЕСТЬNULL(Поступление.КоличествоПоступления,0) > 0
		|;
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(НеоформленныеТовары.Количество),0)            КАК Количество,
		|	ЕСТЬNULL(СУММА(НеоформленныеТовары.КоличествоПринимается),0) КАК КоличествоПринимается
		|ИЗ
		|	НеоформленныеТовары КАК НеоформленныеТовары
		|";
	
	Возврат ТекстЗапросаПоРаспоряжениям;
	
КонецФункции

Функция ТекстЗапросаПроверкаПринимающихсяТоваровПоНакладной()
	
	ТекстЗапросаПоНакладной = "
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ТоварыКПоступлениюОбороты.КПоступлениюРасход),0) КАК Количество,
		|	ЕСТЬNULL(СУММА(ТоварыКПоступлениюОбороты.ПринимаетсяПриход),0)  КАК КоличествоПринимается
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Обороты(, , ,
		|	ВЫБОР
		|		КОГДА
		|			&Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|			ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|		ТОГДА
		|			ДокументПоступления = &ДокументПоступления
		|		ИНАЧЕ
		|			ДокументПоступления = &Соглашение
		|	КОНЕЦ
		|	) КАК ТоварыКПоступлениюОбороты
		|";
		
	Возврат ТекстЗапросаПоНакладной;
	
КонецФункции

Функция ТекстЗапросаПоРаспоряжениям(ТипПоступления)
	
	ТекстЗапросаПоРаспоряжениям = "";
	
	Если ТипПоступления = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		
		ТекстЗапросаПоРаспоряжениям = "
			|ВЫБРАТЬ
			|	Поступление.Номенклатура      КАК Номенклатура,
			|	Поступление.Характеристика    КАК Характеристика,
			|	Поступление.Склад             КАК Склад,
			|	СУММА(Поступление.Количество) КАК КоличествоПоступления
			|ПОМЕСТИТЬ
			|	Поступление
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг.Товары КАК Поступление
			|ГДЕ
			|	ВЫБОР
			|		КОГДА
			|			&Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
			|			ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
			|		ТОГДА
			|			Поступление.ЗаказПоставщику В (&МассивРаспоряжений)
			|		ИНАЧЕ
			|			Поступление.Ссылка.Соглашение = &Соглашение
			|	КОНЕЦ
			|	И Поступление.Ссылка <> &Ссылка
			|	И Поступление.Ссылка.Проведен
			|СГРУППИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Склад
			|;
			|";
		
	ИначеЕсли ТипПоступления = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		ТекстЗапросаПоРаспоряжениям = "
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА
			|			Поступление.Порча
			|		ТОГДА
			|			Поступление.НоменклатураОприходование
			|		ИНАЧЕ
			|			Поступление.Номенклатура
			|	КОНЕЦ КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА
			|			Поступление.Порча
			|		ТОГДА
			|			Поступление.ХарактеристикаОприходование
			|		ИНАЧЕ
			|			Поступление.Характеристика
			|	КОНЕЦ КАК Характеристика,
			|	Поступление.Ссылка.Склад      КАК Склад,
			|	СУММА(Поступление.Количество) КАК КоличествоПоступления
			|ПОМЕСТИТЬ
			|	Поступление
			|ИЗ
			|	Документ.ВозвратТоваровОтКлиента.Товары КАК Поступление
			|ГДЕ
			|	Поступление.Ссылка.ЗаявкаНаВозвратТоваровОтКлиента В (&МассивРаспоряжений)
			|	И Поступление.Ссылка <> &Ссылка
			|	И Поступление.Ссылка.Проведен
			|СГРУППИРОВАТЬ ПО
			|	ВЫБОР
			|		КОГДА
			|			Поступление.Порча
			|		ТОГДА
			|			Поступление.НоменклатураОприходование
			|		ИНАЧЕ
			|			Поступление.Номенклатура
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА
			|			Поступление.Порча
			|		ТОГДА
			|			Поступление.ХарактеристикаОприходование
			|		ИНАЧЕ
			|			Поступление.Характеристика
			|	КОНЕЦ,
			|	Ссылка.Склад
			|;
			|";
			
	КонецЕсли;
	
	ТекстЗапросаПоРаспоряжениям = ТекстЗапросаПоРаспоряжениям + "
		|ВЫБРАТЬ
		|	ТоварыКПоступлениюОбороты.ДокументПоступления                   КАК ДокументПоступления,
		|	ТоварыКПоступлениюОбороты.Номенклатура                          КАК Номенклатура,
		|	ТоварыКПоступлениюОбороты.Характеристика                        КАК Характеристика,
		|	ТоварыКПоступлениюОбороты.Склад                                 КАК Склад,
		|	СУММА(ЕСТЬNULL(ТоварыКПоступлениюОбороты.КПоступлениюРасход,0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(ТоварыКПоступлениюОбороты.ПринимаетсяПриход,0))  КАК КоличествоПринимается
		|ПОМЕСТИТЬ
		|	ТоварыКПоступлениюОбороты
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Обороты(, , ,
		|	ВЫБОР
		|		КОГДА
		|			&Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|			ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|		ТОГДА
		|			ДокументПоступления В (&МассивРаспоряжений)
		|		ИНАЧЕ
		|			ДокументПоступления = &Соглашение
		|	КОНЕЦ
		|) КАК ТоварыКПоступлениюОбороты
		|СГРУППИРОВАТЬ ПО
		|	ДокументПоступления,
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыКПоступлениюОбороты.КПоступлениюРасход)
		|	+ СУММА(ТоварыКПоступлениюОбороты.ПринимаетсяПриход) > 0
		|;
		|ВЫБРАТЬ
		|	ТоварыКПоступлениюОбороты.ДокументПоступления КАК Распоряжение,
		|	ТоварыКПоступлениюОбороты.Номенклатура        КАК Номенклатура,
		|	ТоварыКПоступлениюОбороты.Характеристика      КАК Характеристика,
		|	ТоварыКПоступлениюОбороты.Склад               КАК Склад,
		|	ВЫБОР
		|		КОГДА
		|			ТоварыКПоступлениюОбороты.Количество > ЕСТЬNULL(Поступление.КоличествоПоступления,0)
		|		ТОГДА
		|			ТоварыКПоступлениюОбороты.Количество - ЕСТЬNULL(Поступление.КоличествоПоступления,0)
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ КАК Количество,
		|	ВЫБОР
		|		КОГДА
		|			ТоварыКПоступлениюОбороты.Количество >= ЕСТЬNULL(Поступление.КоличествоПоступления,0)
		|		ТОГДА
		|			ТоварыКПоступлениюОбороты.КоличествоПринимается
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ КАК КоличествоПринимается,
		|	ЛОЖЬ КАК НоменклатураДобавлена
		|ИЗ
		|	ТоварыКПоступлениюОбороты КАК ТоварыКПоступлениюОбороты
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Поступление КАК Поступление
		|ПО
		|	ТоварыКПоступлениюОбороты.Номенклатура = Поступление.Номенклатура
		|	И ТоварыКПоступлениюОбороты.Характеристика = Поступление.Характеристика
		|	И ТоварыКПоступлениюОбороты.Склад = Поступление.Склад
		|ГДЕ
		|	ТоварыКПоступлениюОбороты.Количество
		|	+ ТоварыКПоступлениюОбороты.КоличествоПринимается
		|	- ЕСТЬNULL(Поступление.КоличествоПоступления,0) > 0
		|	И ТоварыКПоступлениюОбороты.Склад В (&Склад)
		|;
		|ВЫБРАТЬ
		|	Товары.ЗаказПоставщику   КАК ЗаказПоставщику,
		|	Товары.Номенклатура      КАК Номенклатура,
		|	Товары.Характеристика    КАК Характеристика,
		|	Товары.Склад             КАК Склад,
		|	Товары.Упаковка          КАК Упаковка,
		|	Товары.Количество        КАК Количество
		|ПОМЕСТИТЬ
		|	Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|ВЫБРАТЬ
		|	Товары.ЗаказПоставщику   КАК Распоряжение,
		|	Товары.Номенклатура      КАК Номенклатура,
		|	Товары.Характеристика    КАК Характеристика,
		|	Товары.Склад             КАК Склад,
		|	КОЛИЧЕСТВО(*)            КАК КоличествоСтрок,
		|	КОЛИЧЕСТВО(*)            КАК КоличествоНераспределенныхСтрок,
		|	0                        КАК Количество
		|ИЗ
		|	Товары КАК Товары
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПоставщику,
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|ИМЕЮЩИЕ
		|	Количество(*) > 1
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура КАК Номенклатура
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	Товары.Номенклатура.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|;
		|ВЫБРАТЬ
		|	Товары.Упаковка             КАК Упаковка,
		|	Товары.Упаковка.Коэффициент КАК Коэффициент
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	Товары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Склад КАК Склад
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	НЕ Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|";
		
	Возврат ТекстЗапросаПоРаспоряжениям;
	
КонецФункции

Функция ТекстЗапросаПоНакладной()
	
	ТекстЗапросаПоНакладной = "
		|ВЫБРАТЬ
		|	ТоварыКПоступлениюОбороты.Номенклатура              КАК Номенклатура,
		|	ТоварыКПоступлениюОбороты.Характеристика            КАК Характеристика,
		|	ТоварыКПоступлениюОбороты.Склад                     КАК Склад,
		|	СУММА(ТоварыКПоступлениюОбороты.КПоступлениюРасход) КАК Количество,
		|	СУММА(ТоварыКПоступлениюОбороты.ПринимаетсяПриход)  КАК КоличествоПринимается,
		|	ЛОЖЬ                                                КАК НоменклатураДобавлена
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Обороты(, , ,
		|	ВЫБОР
		|		КОГДА
		|			&Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|			ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаПоЗаказамИНакладным)
		|		ТОГДА
		|			ДокументПоступления = &Ссылка
		|		ИНАЧЕ
		|			ДокументПоступления = &Соглашение
		|	КОНЕЦ
		|) КАК ТоварыКПоступлениюОбороты
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|ИМЕЮЩИЕ 
		|	СУММА(ТоварыКПоступлениюОбороты.КПоступлениюРасход)
		|	+ СУММА(ТоварыКПоступлениюОбороты.ПринимаетсяПриход) > 0
		|;
		|ВЫБРАТЬ
		|	Товары.Номенклатура      КАК Номенклатура,
		|	Товары.Характеристика    КАК Характеристика,
		|	Товары.Склад             КАК Склад,
		|	Товары.Упаковка          КАК Упаковка,
		|	Товары.Количество        КАК Количество
		|ПОМЕСТИТЬ
		|	Товары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|ВЫБРАТЬ
		|	Товары.Номенклатура      КАК Номенклатура,
		|	Товары.Характеристика    КАК Характеристика,
		|	Товары.Склад             КАК Склад,
		|	КОЛИЧЕСТВО(*)            КАК КоличествоСтрок,
		|	КОЛИЧЕСТВО(*)            КАК КоличествоНераспределенныхСтрок,
		|	0                        КАК Количество
		|ИЗ
		|	Товары КАК Товары
		|СГРУППИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад
		|ИМЕЮЩИЕ
		|	Количество(*) > 1
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура КАК Номенклатура
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	Товары.Номенклатура.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|;
		|ВЫБРАТЬ
		|	Товары.Упаковка             КАК Упаковка,
		|	Товары.Упаковка.Коэффициент КАК Коэффициент
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	Товары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Склад КАК Склад
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	НЕ Склад.ИспользоватьОрдернуюСхемуПриПоступлении
		|";
		
	Возврат ТекстЗапросаПоНакладной;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры формирования временных таблиц.

// Формирует запрос к шапке документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументЗакупки  - ДокументОбъект, который необходимо проверить
//
Процедура СформироватьЗапросВременнаяТаблицаШапкаДокументаЗакупки(ТекстЗапроса,
	                                                              ПараметрыЗапроса,
	                                                              Знач ДокументЗакупки)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументЗакупки.Партнер                                 КАК Партнер,
		|	ДокументЗакупки.Контрагент                              КАК Контрагент,
		|	ДокументЗакупки.Валюта                                  КАК Валюта,
		|	ДокументЗакупки.ВалютаВзаиморасчетов                    КАК ВалютаВзаиморасчетов,
		|	ДокументЗакупки.ЦенаВключаетНДС                         КАК ЦенаВключаетНДС,
		|	ДокументЗакупки.НалогообложениеНДС                      КАК НалогообложениеНДС,
		|	ДокументЗакупки.ХозяйственнаяОперация                   КАК ХозяйственнаяОперация,
		|	ДокументЗакупки.Соглашение                              КАК Соглашение,
		|	ДокументЗакупки.Дата                                    КАК Дата,
		|	ДокументЗакупки.ЖелаемаяДатаПоступления                 КАК ЖелаемаяДатаПоступления,
		|	ДокументЗакупки.Организация                             КАК Организация,
		|	ДокументЗакупки.Склад                                   КАК Склад,
		|	ДокументЗакупки.ФормаОплаты                             КАК ФормаОплаты,
		|	ДокументЗакупки.СуммаДокумента                          КАК СуммаДокумента,
		|	ДокументЗакупки.РассчитыватьДатуВозвратаТарыПоКалендарю КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	ДокументЗакупки.СрокВозвратаМногооборотнойТары          КАК СрокВозвратаМногооборотнойТары
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаДокументЗакупки
		|ИЗ
		|	&ДокументЗакупки КАК ДокументЗакупки
		|;
		|";
	
	// Сформируем необходимые колонки таблицы шапки документа закупки
	
	ТипВалюта   = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	ТипДата     = Новый ОписаниеТипов("Дата");
	ТипБулево   = Новый ОписаниеТипов("Булево");
	ТипЧисло    = Новый ОписаниеТипов("Число");
	
	ТаблицаДокумента = Новый ТаблицаЗначений();
	
	ТаблицаДокумента.Колонки.Добавить("Партнер",                              Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТаблицаДокумента.Колонки.Добавить("Контрагент",                           Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДокумента.Колонки.Добавить("Валюта",                               ТипВалюта);
	ТаблицаДокумента.Колонки.Добавить("ВалютаВзаиморасчетов",                 ТипВалюта);
	ТаблицаДокумента.Колонки.Добавить("ЦенаВключаетНДС",                      ТипБулево);
	ТаблицаДокумента.Колонки.Добавить("НалогообложениеНДС",                   Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНалогообложенияНДС"));
	ТаблицаДокумента.Колонки.Добавить("Дата",                                 ТипДата);
	ТаблицаДокумента.Колонки.Добавить("ЖелаемаяДатаПоступления",              ТипДата);
	ТаблицаДокумента.Колонки.Добавить("Организация",                          Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаДокумента.Колонки.Добавить("Склад",                                Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаДокумента.Колонки.Добавить("ФормаОплаты",                          Новый ОписаниеТипов("ПеречислениеСсылка.ФормыОплаты"));
	ТаблицаДокумента.Колонки.Добавить("СуммаДокумента",                       Новый ОписаниеТипов("Число"));
	ТаблицаДокумента.Колонки.Добавить("Соглашение",                           Новый ОписаниеТипов("СправочникСсылка.СоглашенияСПоставщиками"));
	ТаблицаДокумента.Колонки.Добавить("ХозяйственнаяОперация",                Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	ТаблицаДокумента.Колонки.Добавить("РассчитыватьДатуВозвратаТарыПоКалендарю", ТипБулево);
	ТаблицаДокумента.Колонки.Добавить("СрокВозвратаМногооборотнойТары",          ТипЧисло);
	
	// Добавим строку и заполним значениями из шапки документа
	
	НоваяСтрока = ТаблицаДокумента.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументЗакупки);
	
	ПараметрыЗапроса.Вставить("ДокументЗакупки", ТаблицаДокумента);

КонецПроцедуры

// Формирует запрос к тч Товары документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса           -Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса       - Структура - структура, содержащая параметры запроса
// ДокументЗакупки        - ДокументОбъект, который необходимо проверить
// ИмяТаблицы             - Строка - имя таблицы, к которой будет сформирован запрос
//
Процедура СформироватьЗапросВременнаяТаблицаТоварыДокументаЗакупки(ТекстЗапроса,
	                                                               ПараметрыЗапроса,
	                                                               ДокументЗакупки,
	                                                               ИмяТаблицы)
	
	Если ИмяТаблицы = "Документ.ЗаказПоставщику" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Цена                   КАК Цена,
			|	Товары.УсловиеЦеныПоставщика  КАК УсловиеЦеныПоставщика,
			|	Товары.Упаковка               КАК Упаковка,
			|	Товары.СтатьяРасходов         КАК СтатьяРасходов,
			|	Товары.СтавкаНДС              КАК СтавкаНДС,
			|	Товары.ПроцентРучнойСкидки    КАК ПроцентРучнойСкидки,
			|	Товары.Склад                  КАК Склад,
			|	Товары.Отменено               КАК Отменено,
			|	Товары.ДатаПоступления        КАК ДатаПоступления,
			|	Товары.Цена - Товары.Цена * Товары.ПроцентРучнойСкидки / 100 КАК ЦенаСоСкидкой
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|НоменклатураПоставщика,
			|Цена,
			|УсловиеЦеныПоставщика,
			|Упаковка,
			|СтатьяРасходов,
			|СтавкаНДС,
			|ПроцентРучнойСкидки,
			|Склад,
			|Отменено,
			|ДатаПоступления";
		
	ИначеЕсли ИмяТаблицы = "Документ.ПоступлениеТоваровУслуг" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика,
			|	Товары.Цена                   КАК Цена,
			|	Товары.УсловиеЦеныПоставщика  КАК УсловиеЦеныПоставщика,
			|	Товары.Упаковка               КАК Упаковка,
			|	Товары.СтатьяРасходов         КАК СтатьяРасходов,
			|	Товары.СтавкаНДС              КАК СтавкаНДС,
			|	Товары.ПроцентРучнойСкидки    КАК ПроцентРучнойСкидки,
			|	Товары.Склад                  КАК Склад,
			|	Товары.Цена - Товары.Цена * Товары.ПроцентРучнойСкидки / 100 КАК ЦенаСоСкидкой
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|НоменклатураПоставщика,
			|Цена,
			|УсловиеЦеныПоставщика,
			|Упаковка,
			|СтатьяРасходов,
			|СтавкаНДС,
			|ПроцентРучнойСкидки,
			|Склад";
		
	ИначеЕсли ИмяТаблицы = "Документ.ДоверенностьНаПолучениеТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|НоменклатураПоставщика";
			
	ИначеЕсли ИмяТаблицы = "Документ.ВыкупВозвратнойТарыУПоставщика" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НомерСтроки            КАК НомерСтроки,
			|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
			|	Товары.Номенклатура           КАК Номенклатура,
			|	Товары.Характеристика         КАК Характеристика
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&Товары КАК Товары
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|НоменклатураПоставщика";
		
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("Товары", ДокументЗакупки.Товары.Выгрузить(,ИменаКолонок));
	
КонецПроцедуры

// Формирует запрос к курсам валют на дату документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс      КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаКурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|";

КонецПроцедуры

// Формирует запрос к тч ЭтапыОплаты документа и помещает во временную таблицу
//
// Параметры:
//		ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
//		ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
//		ДокументЗакупки  - ДокументОбъект, ДокументСсылка , документ, к которому необходимо сформировать запрос
//		ПоСсылке         - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
//		ИмяТаблицы       - Строка - имя таблицы документа, к которой необходимо сформировать запрос
//
Процедура СформироватьЗапросВременнаяТаблицаЭтапыОплаты(ТекстЗапроса, ПараметрыЗапроса, ДокументЗакупки, ПоСсылке = Ложь, ИмяТаблицы = "")

	Если ПоСсылке Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.ДатаПлатежа     КАК ДатаПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыГрафикаОплаты
			|ИЗ
			|" + ИмяТаблицы + ".ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &ДокументЗакупки
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|";
			
			ПараметрыЗапроса.Вставить("ДокументЗакупки", ДокументЗакупки);
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.ДатаПлатежа     КАК ДатаПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыГрафикаОплаты
			|ИЗ
			|	&ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|;
			|";
	
		ПараметрыЗапроса.Вставить("ЭтапыГрафикаОплаты", ДокументЗакупки.ЭтапыГрафикаОплаты.Выгрузить(, "НомерСтроки,ДатаПлатежа,ВариантОплаты,ПроцентПлатежа"));
		
	КонецЕсли;
		
КонецПроцедуры

// Формирует запрос по элементам справочника "Склады" и помещает во временную таблицу
// К корректным складам относятся:
// 		- Склад, равный складу соглашения из временной таблицы по документу
// 		- Склады, входящие в иерархию склада соглашения из временной таблицы по документу
//
Процедура СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад
	|ПОМЕСТИТЬ СкладыКорректныеПоСоглашению
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокумента
	|ПО
	|	ИСТИНА
	|ГДЕ
	|	ВременнаяТаблицаДокумента.Соглашение.Склад ЕСТЬ НЕ NULL
	|	И ВременнаяТаблицаДокумента.Соглашение.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И Склады.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				ВременнаяТаблицаДокумента.Соглашение.Склад
	|			ИЗ
	|				ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокумента)
	|;
	|";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры формирования запросов проверки корректности заполнения документов.

// Формирует текст запроса для проверки тч Товары на наличие дублей номенклатуры поставщика
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьЗаполненияНоменклатурыПоставщика(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВложенныйЗапросПоДублям.НомерСтроки)         КАК НомерСтроки,
		|	ВложенныйЗапросПоДублям.НоменклатураПоставщика        КАК НоменклатураПоставщика
		|ИЗ (
		|	ВЫБРАТЬ
		|		МАКСИМУМ(ДокументТовары.НомерСтроки)              КАК НомерСтроки,
		|		ДокументТовары.НоменклатураПоставщика             КАК НоменклатураПоставщика,
		|		ДокументТовары.Номенклатура                       КАК Номенклатура,
		|		ДокументТовары.Характеристика                     КАК Характеристика
		|	ИЗ
		|		ВременнаяТаблицаТовары КАК ДокументТовары
		|	ГДЕ
		|		ДокументТовары.НоменклатураПоставщика <> ЗНАЧЕНИЕ(Справочник.НоменклатураПоставщиков.ПустаяСсылка)
		|		И ДокументТовары.НоменклатураПоставщика.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|	СГРУППИРОВАТЬ ПО
		|		ДокументТовары.НоменклатураПоставщика,
		|		ДокументТовары.Номенклатура,
		|		ДокументТовары.Характеристика
		|) КАК ВложенныйЗапросПоДублям
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапросПоДублям.НоменклатураПоставщика
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(*) > 1
		|;
		|";
		
КонецПроцедуры

// Формирует текст запроса для проверки наличия услуг в документе закупки
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросНаличиеУслугВДокументеЗакупки(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки  КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки заполненности аналитик услуг для услуг в документе закупки
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьЗаполненияАналитикиУслуг(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки  КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|	И ДокументТовары.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки заполненности склада
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьЗаполненияСклада(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьОшибкиЗаполненияСклад
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|ПО
		|	ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ВременнаяТаблицаДокументЗакупки.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки заполенности реквизита "Склад" в строках табличной части товаров
// Проверка должна выполняться только если:
// 		- в строке табличной части выбрана номенклатура типа товар;
// 		- в шапке документа указан заполнен реквизит "Склад".
//
Процедура СформироватьЗапросКорректностьЗаполненияСкладовВТабличнойЧастиТовары(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|ПО
		|	ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаДокументЗакупки.Склад.ЭтоГруппа
		|	И ВременнаяТаблицаДокументЗакупки.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ВременнаяТаблицаТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры формирования запросов проверки соответствия документов условиям закупки.

// Формирует текст запроса для проверки шапки документа закупки
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросШапкаДокументаЗакупки(ТекстЗапроса, ИмяТаблицы)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Партнер ЕСТЬ НЕ NULL И
		|			ДокументЗакупки.Партнер <> СоглашениеСПоставщиком.Партнер
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПартнер,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Контрагент ЕСТЬ НЕ NULL И
		|			СоглашениеСПоставщиком.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) И
		|			ДокументЗакупки.Контрагент <> СоглашениеСПоставщиком.Контрагент
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияКонтрагент,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Организация ЕСТЬ НЕ NULL И
		|			СоглашениеСПоставщиком.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) И
		|			ДокументЗакупки.Организация <> СоглашениеСПоставщиком.Организация
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияОрганизация,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.ФормаОплаты ЕСТЬ НЕ NULL И
		|			СоглашениеСПоставщиком.ФормаОплаты <> ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка) И
		|			ДокументЗакупки.ФормаОплаты <> СоглашениеСПоставщиком.ФормаОплаты
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияФормаОплаты,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Валюта ЕСТЬ НЕ NULL И
		|			ДокументЗакупки.Валюта <> СоглашениеСПоставщиком.Валюта
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВалюта,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.ВозвращатьМногооборотнуюТару <> &ВозвратМногооборотнойТары
		|		ТОГДА 
		|			ИСТИНА
		|		ИНАЧЕ 
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВозвращатьМногооборотнуюТару,
		|" + ?(ИмяТаблицы <> "Документ.ПоступлениеТоваровУслуг","
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияВалютаВзаиморасчетов,
		|	ЛОЖЬ КАК ЕстьОшибкиДатаВозвратаМногооборотнойТары,
		|	ВЫБОР
		|		КОГДА ДокументЗакупки.СрокВозвратаМногооборотнойТары <> СоглашениеСПоставщиком.СрокВозвратаМногооборотнойТары
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары,
		|","
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Валюта ЕСТЬ НЕ NULL И
		|			ДокументЗакупки.ВалютаВзаиморасчетов <> СоглашениеСПоставщиком.Валюта
		|			И ДокументЗакупки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВалютаВзаиморасчетов,
		|	ИСТИНА КАК ЕстьОшибкиДатаВозвратаМногооборотнойТары,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары,
		|") + "
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.ЦенаВключаетНДС ЕСТЬ НЕ NULL И
		|			ДокументЗакупки.ЦенаВключаетНДС <> СоглашениеСПоставщиком.ЦенаВключаетНДС
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЦенаВключаетНДС,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.НалогообложениеНДС ЕСТЬ НЕ NULL И
		|			ДокументЗакупки.НалогообложениеНДС <> СоглашениеСПоставщиком.НалогообложениеНДС
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияНалогообложениеНДС,
		|	ВЫБОР
		|		КОГДА НЕ СоглашениеСПоставщиком.ХозяйственнаяОперация ЕСТЬ NULL
		|			И НЕ ДокументЗакупки.ХозяйственнаяОперация ЕСТЬ NULL
		|			И ДокументЗакупки.ХозяйственнаяОперация <> СоглашениеСПоставщиком.ХозяйственнаяОперация
		|			И ДокументЗакупки.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
		|		ТОГДА
		|			ИСТИНА
		|		КОГДА
		|			ДокументЗакупки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
		|			И СоглашениеСПоставщиком.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
		|			И НЕ СоглашениеСПоставщиком.ХозяйственнаяОперация ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияХозяйственнаяОперация,
		|	ЕСТЬNULL(СоглашениеСПоставщиком.Склад.ЭтоГруппа, ЛОЖЬ) КАК СкладСоглашениеЕстьГруппа,
		|	ВЫБОР
		|		КОГДА СоглашениеСПоставщиком.Склад ЕСТЬ НЕ NULL
		|			И СоглашениеСПоставщиком.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			И СкладыКорректныеПоСоглашению.Склад ЕСТЬ NULL
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСклад,
		|" + ?(ИмяТаблицы = "Справочник.СоглашенияСПоставщиками","
		|	ВЫБОР
		|		КОГДА ДокументЗакупки.РассчитыватьДатуВозвратаТарыПоКалендарю <> СоглашениеСПоставщиком.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияРассчитыватьДатуВозвратаТарыПоКалендарю,
		|	ИСТИНА КАК ЭтоСоглашение,
		|","
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияРассчитыватьДатуВозвратаТарыПоКалендарю,
		|	ЛОЖЬ КАК ЭтоСоглашение,
		|") + "
		|	&ВозвратМногооборотнойТары                      КАК ВозвратМногооборотнойТары,
		|	ДокументЗакупки.Партнер                         КАК Партнер,
		|	ДокументЗакупки.Контрагент                      КАК Контрагент,
		|	ДокументЗакупки.Организация                     КАК Организация,
		|	ДокументЗакупки.ФормаОплаты                     КАК ФормаОплаты,
		|	ДокументЗакупки.Соглашение                      КАК Соглашение,
		|	ДокументЗакупки.Валюта                          КАК Валюта,
		|	ДокументЗакупки.Склад                           КАК Склад,
		|	ДокументЗакупки.ЦенаВключаетНДС                 КАК ЦенаВключаетНДС,
		|	ДокументЗакупки.НалогообложениеНДС              КАК НалогообложениеНДС,
		|	СоглашениеСПоставщиком.Партнер                  КАК ПартнерСоглашение,
		|	СоглашениеСПоставщиком.Контрагент               КАК КонтрагентСоглашение,
		|	СоглашениеСПоставщиком.Организация              КАК ОрганизацияСоглашение,
		|	СоглашениеСПоставщиком.ФормаОплаты              КАК ФормаОплатыСоглашение,
		|	СоглашениеСПоставщиком.Валюта                   КАК ВалютаСоглашение,
		|	СоглашениеСПоставщиком.ДатаНачалаДействия       КАК ДатаНачалаДействияСоглашение,
		|	СоглашениеСПоставщиком.ДатаОкончанияДействия    КАК ДатаОкончанияДействияСоглашение,
		|	СоглашениеСПоставщиком.Склад                    КАК СкладСоглашение,
		|	СоглашениеСПоставщиком.ЦенаВключаетНДС          КАК ЦенаВключаетНДССоглашение,
		|	СоглашениеСПоставщиком.НалогообложениеНДС       КАК НалогообложениеНДССоглашение,
		|	СоглашениеСПоставщиком.ХозяйственнаяОперация    КАК ХозяйственнаяОперацияСоглашение,
		|	СоглашениеСПоставщиком.СрокВозвратаМногооборотнойТары          КАК СрокВозвратаМногооборотнойТары,
		|	СоглашениеСПоставщиком.РассчитыватьДатуВозвратаТарыПоКалендарю КАК РассчитыватьДатуВозвратаТарыПоКалендарю
		|ИЗ
		|	ВременнаяТаблицаДокументЗакупки                 КАК ДокументЗакупки
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
		|ПО 
		|	ДокументЗакупки.Соглашение = СоглашениеСПоставщиком.Ссылка
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	СкладыКорректныеПоСоглашению КАК СкладыКорректныеПоСоглашению
		|ПО 
		|	ДокументЗакупки.Склад = СкладыКорректныеПоСоглашению.Склад
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки тч Товары документа закупки
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросТоварыДокументаЗакупки(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки                   КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура                  КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика                КАК Характеристика,
		|	ВложенныйЗапрос.ВалютаЦены                    КАК ВалютаЦены,
		|	ВложенныйЗапрос.ЕстьОшибкиЗаполненияСтавкаНДС КАК ЕстьОшибкиЗаполненияСтавкаНДС,
		|	ВложенныйЗапрос.СтавкаНДССоглашение           КАК СтавкаНДССоглашение,
		|	ВложенныйЗапрос.МаксимальноДопустимаяЦена     КАК МаксимальноДопустимаяЦена,
		|	ВЫБОР
		|		КОГДА
		|			ВложенныйЗапрос.КонтролироватьЦеныЗакупки
		|			И ВложенныйЗапрос.Цена > ВложенныйЗапрос.МаксимальноДопустимаяЦена
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиМаксимальноДопустимаяЦена
		|ИЗ (
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки            КАК НомерСтроки,
		|	ВременнаяТаблицаДокументЗакупки.Валюта        КАК ВалютаЦены,
		|	ВременнаяТаблицаТовары.Номенклатура           КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика         КАК Характеристика,
		|	ВременнаяТаблицаТовары.Цена                   КАК Цена,
		|	ВременнаяТаблицаТовары.СтавкаНДС              КАК СтавкаНДС,
		|	ВЫБОР
		|		КОГДА 
		|			ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) 
		|			И &ВозвратМногооборотнойТары
		|		ТОГДА
		|			ЛОЖЬ
		|		КОГДА
		|			ВременнаяТаблицаДокументЗакупки.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
		|			И ВременнаяТаблицаТовары.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|		ТОГДА
		|			ИСТИНА
		|		КОГДА
		|			ВременнаяТаблицаДокументЗакупки.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|			И ВременнаяТаблицаТовары.СтавкаНДС <> ВременнаяТаблицаТовары.Номенклатура.СтавкаНДС
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСтавкаНДС,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаДокументЗакупки.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
		|		ТОГДА
		|			ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|		КОГДА
		|			ВременнаяТаблицаДокументЗакупки.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|		ТОГДА
		|			ВременнаяТаблицаТовары.Номенклатура.СтавкаНДС
		|	КОНЕЦ КАК СтавкаНДССоглашение,
		|	ВЫБОР
		|		КОГДА
		|			ЦеныНоменклатурыПоставщиковСрезПоследних.Цена ЕСТЬ НЕ NULL
		|			И СоглашениеШапка.КонтролироватьЦеныЗакупки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК КонтролироватьЦеныЗакупки,
		|	ВЫБОР
		|		КОГДА
		|			ЦеныНоменклатурыПоставщиковСрезПоследних.Цена ЕСТЬ NULL
		|		ТОГДА
		|			0
		|		ИНАЧЕ
		|			ВЫРАЗИТЬ(
		|			ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА
		|					ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|			* ЦеныНоменклатурыПоставщиковСрезПоследних.Цена/ЕстьNULL(ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка.Коэффициент,1)
		|			* ВЫБОР
		|				КОГДА ВременнаяТаблицаДокументЗакупки.Валюта <> ЦеныНоменклатурыПоставщиковСрезПоследних.Валюта
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
		|							ТОГДА
		|								(КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
		|								/ (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))
		|	КОНЕЦ КАК МаксимальноДопустимаяЦена
		|ИЗ
		| ВременнаяТаблицаТовары
		|		
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|ПО
		|	ИСТИНА
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашениеШапка
		|ПО
		|	ВременнаяТаблицаДокументЗакупки.Соглашение = СоглашениеШапка.Ссылка
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|				УсловиеЦеныПоставщика = ЗНАЧЕНИЕ(Справочник.УсловияЦенПоставщиков.ПустаяСсылка) И
		|				Соглашение В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаДокументЗакупки.Соглашение
		|				ИЗ
		|					ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки) И
		|				(Номенклатура, Характеристика) В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаТовары.Номенклатура,
		|					ВременнаяТаблицаТовары.Характеристика
		|				ИЗ
		|					ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары)
		|) КАК ЦеныНоменклатурыПоставщиковСрезПоследних
		|ПО
		|	ВременнаяТаблицаТовары.Номенклатура = ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура
		|	И ВременнаяТаблицаТовары.Характеристика = ЦеныНоменклатурыПоставщиковСрезПоследних.Характеристика
		|	И СоглашениеШапка.КонтролироватьЦеныЗакупки
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютыЦены
		|ПО 
		|	ЦеныНоменклатурыПоставщиковСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата,
		|				Валюта В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаДокументЗакупки.Валюта
		|				ИЗ
		|					ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки)
		|) КАК КурсыВалюты
		|	По Истина
		|) КАК ВложенныйЗапрос
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
КонецПроцедуры

// Формирует текст запроса для проверки вхождения цен документа закупки в допустимый диапазон
//
// Параметры:
// ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументЗакупки  - ДокументОбъект, который необходимо проверить
//
Процедура СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса)
		
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки                 КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура                КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика              КАК Характеристика,
		|	ВложенныйЗапрос.ВалютаЦены                  КАК ВалютаЦены,
		|	ВложенныйЗапрос.Цена                        КАК Цена,
		|	ВложенныйЗапрос.МаксимальноДопустимаяЦена   КАК МаксимальноДопустимаяЦена,
		|	ВЫБОР
		|		КОГДА
		|			НЕ МаксимальнаяЦенаОтсутствует
		|			И ВложенныйЗапрос.Цена > ВложенныйЗапрос.МаксимальноДопустимаяЦена
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                       КАК ЕстьОшибкиМаксимальноДопустимаяЦена
		|ИЗ (
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки          КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика       КАК Характеристика,
		|	ВременнаяТаблицаДокументЗакупки.Валюта      КАК ВалютаЦены,
		|	ВременнаяТаблицаТовары.ЦенаСоСкидкой        КАК Цена,
		|	ВЫБОР
		|		КОГДА
		|			МаксимальныеЦеныНоменклатурыСрезПоследних.Цена ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК МаксимальнаяЦенаОтсутствует,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(МаксимальныеЦеныНоменклатурыСрезПоследних.Цена,0)
		|		/ ЕстьNULL(МаксимальныеЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент,1)
		|			* ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА
		|					ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|				ИНАЧЕ 
		|					1
		|			КОНЕЦ
		|			* ВЫБОР
		|				КОГДА
		|					МаксимальныеЦеныНоменклатурыСрезПоследних.Валюта <> ВременнаяТаблицаДокументЗакупки.Валюта
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМаксимальнойЦены.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМаксимальнойЦены.Курс, 0) > 0
		|						ТОГДА
		|							(КурсыВалютыМаксимальнойЦены.Курс * КурсыВалютыЦены.Кратность)
		|							/ (КурсыВалютыЦены.Курс * КурсыВалютыМаксимальнойЦены.Кратность)
		|						ИНАЧЕ
		|							0
		|					КОНЕЦ
		|				ИНАЧЕ 
		|					1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))
		|	КАК МаксимальноДопустимаяЦена
		|
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|		ПО
		|			ИСТИНА
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыЦены
		|		ПО
		|			ВременнаяТаблицаДокументЗакупки.Валюта = КурсыВалютыЦены.Валюта
		|
		|/////////////////////////////////////////////////////////////////////////////
		|// СОЕДИНЕНИЯ С МАКСИМАЛЬНО ДОПУСТИМЫМИ ЦЕНАМИ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|				ВидЦены В (
		|					ВЫБРАТЬ
		|						Константы.ВидМаксимальноДопустимыхЦенЗакупки КАК ВидЦены
		|					ИЗ
		|						Константы КАК Константы
		|					)
		|				И (Номенклатура,Характеристика) В (
		|					ВЫБРАТЬ
		|						Товары.Номенклатура,
		|						Товары.Характеристика
		|					ИЗ
		|						ВременнаяТаблицаТовары КАК Товары
		|					)
		|			) КАК МаксимальныеЦеныНоменклатурыСрезПоследних
		|		ПО
		|			ВременнаяТаблицаТовары.Номенклатура = МаксимальныеЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = МаксимальныеЦеныНоменклатурыСрезПоследних.Характеристика
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыМаксимальнойЦены
		|		ПО
		|			МаксимальныеЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыМаксимальнойЦены.Валюта
		|
		|ГДЕ
		|	ВременнаяТаблицаТовары.Цена > 0
		|) КАК ВложенныйЗапрос
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки допустимости ручных скидок и наценок
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки               КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.ПроцентРучнойСкидки < 0
		|			И -ВременнаяТаблицаТовары.ПроцентРучнойСкидки > СоглашениеСПоставщиком.ПроцентРучнойНаценки
		|			И СоглашениеСПоставщиком.Ссылка.КонтролироватьЦеныЗакупки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияРучнойНаценки,
		|	СоглашениеСПоставщиком.ПроцентРучнойСкидки       КАК МаксимальнаяСуммаРучнойСкидки,
		|	СоглашениеСПоставщиком.ПроцентРучнойНаценки      КАК МаксимальнаяСуммаРучнойНаценки
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументЗакупки
		|ПО
		|	ИСТИНА
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
		|ПО
		|	ВременнаяТаблицаДокументЗакупки.Соглашение = СоглашениеСПоставщиком.Ссылка
		|ГДЕ
		|	ВременнаяТаблицаТовары.ПроцентРучнойСкидки <> 0
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует запрос для проверки корректности заполнения этапов графика оплаты
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаДокументЗакупки.СуммаДокумента = 0
		|			ИЛИ ВременнаяТаблицаДокументЗакупки.Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|		ТОГДА
		|			ЛОЖЬ
		|		ИНАЧЕ
		|			ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты,
		|	ВЫБОР
		|		КОГДА
		|			ЭтапыШаблона.НомерСтроки ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                               КАК ЭтапШаблонаОтсутствует,
		|	ЭтапыДокумента.НомерСтроки          КАК НомерСтроки,
		|	ЭтапыДокумента.ВариантОплаты        КАК ВариантОплаты,
		|	ЭтапыДокумента.ДатаПлатежа          КАК ДатаПлатежа,
		|	ЭтапыДокумента.ПроцентПлатежа       КАК ПроцентПлатежа,
		|	ЭтапыШаблона.НомерСтроки            КАК НомерСтрокиШаблона,
		|	ЭтапыШаблона.ВариантОплаты          КАК ВариантОплатыШаблона,
		|	ЭтапыШаблона.ПроцентПлатежа         КАК ПроцентПлатежаШаблона,
		|	ЭтапыШаблона.Сдвиг                  КАК Сдвиг,
		|	ЭтапыШаблона.Ссылка.Календарь       КАК Календарь,
		|	ВременнаяТаблицаДокументЗакупки.Дата                 КАК Дата,
		|	ВременнаяТаблицаДокументЗакупки.ЖелаемаяДатаПоступления КАК ЖелаемаяДатаПоступления,
		|	ВЫБОР
		|		КОГДА
		|			ЭтапыШаблона.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)
		|		ТОГДА
		|			ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаДокументЗакупки.ЖелаемаяДатаПоступления = ДАТАВРЕМЯ(1,1,1)
		|				ТОГДА
		|					НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументЗакупки.Дата,День,ЭтапыШаблона.Сдвиг),День)
		|				ИНАЧЕ
		|					НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументЗакупки.ЖелаемаяДатаПоступления,День,ЭтапыШаблона.Сдвиг),День)
		|			КОНЕЦ
		|		ИНАЧЕ
		|			НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументЗакупки.Дата,День,ЭтапыШаблона.Сдвиг),День)
		|	КОНЕЦ КАК ДатаПлатежаШаблона,
		|	ВЫБОР
		|		КОГДА
		|			ЭтапыДокумента.ВариантОплаты <> ЭтапыШаблона.ВариантОплаты
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВариантаОплаты,
		|	ВЫБОР
		|		КОГДА
		|			ЭтапыДокумента.ПроцентПлатежа > ЭтапыШаблона.ПроцентПлатежа
		|			И ЭтапыШаблона.ПроцентПлатежа ЕСТЬ НЕ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПроцентаПлатежа
		|ИЗ
		|	ВременнаяТаблицаЭтапыГрафикаОплаты КАК ЭтапыДокумента
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки
		|ПО
		|	ИСТИНА
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК ЭтапыШаблона
		|
		|ПО
		|	ВременнаяТаблицаДокументЗакупки.Соглашение = ЭтапыШаблона.Ссылка
		|	И ЭтапыДокумента.НомерСтроки = ЭтапыШаблона.НомерСтроки
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";

КонецПроцедуры

// Формирует запрос для проверки корректности количества авансовых этапов оплаты
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьКоличестваЭтаповГрафикаОплаты(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СУММА(ВложенныйЗапрос.КоличествоЭтаповДокумента) <> СУММА(ВложенныйЗапрос.КоличествоЭтаповШаблона)
	|				И МАКСИМУМ(ВложенныйЗапрос.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты) = ИСТИНА
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты,
	|	СУММА(ВложенныйЗапрос.КоличествоЭтаповДокумента) КАК КоличествоЭтаповДокумента,
	|	СУММА(ВложенныйЗапрос.КоличествоЭтаповШаблона) КАК КоличествоЭтаповШаблона
	|ИЗ
	|	(ВЫБРАТЬ
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапыДокумента.НомерСтроки) КАК КоличествоЭтаповДокумента,
	|		NULL КАК КоличествоЭтаповШаблона,
	|		NULL КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты
	|	ИЗ
	|		ВременнаяТаблицаЭтапыГрафикаОплаты КАК ЭтапыДокумента
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ГрафикиОплатыЭтапы.НомерСтроки),
	|		NULL
	|	ИЗ
	|		Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК ГрафикиОплатыЭтапы
	|	ГДЕ
	|		ГрафикиОплатыЭтапы.Ссылка В
	|				(ВЫБРАТЬ
	|					ВременнаяТаблицаДокументЗакупки.Соглашение КАК Соглашение
	|				ИЗ
	|					ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА ВременнаяТаблицаДокументЗакупки.СуммаДокумента = 0
	|					ИЛИ ВременнаяТаблицаДокументЗакупки.Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	ИЗ
	|		ВременнаяТаблицаДокументЗакупки КАК ВременнаяТаблицаДокументЗакупки) КАК ВложенныйЗапрос
	|;";
		
КонецПроцедуры

// Формирует запрос для контроля завершения расчетов по заказу
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКонтрольЗавершенияРасчетов(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток, 0) >= 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьНезавершенныеРасчеты,
		|	РасчетыСПоставщикамиОстатки.Валюта КАК Валюта,
		|	-1*(РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток) КАК КОплатеКонечныйОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(, , , , ЗаказПоставщику = &Ссылка) КАК РасчетыСПоставщикамиОстатки
		|;
		|";
КонецПроцедуры

// Формирует запрос для контроля завершения поступления по заказу
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКонтрольПоступления(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюКонечныйОстаток, 0) <= 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьНезавершенноеПоступление
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(, , , , ЗаказПоставщику = &Ссылка) КАК РасчетыСПоставщикамиОстатки
		|;
		|";
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции проверки корректности документов.

// Выводит сообщения об ошибках в шапке документа закупки
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументЗакупки - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахШапкаДокументаЗакупки(Выборка,
	                                             ДокументЗакупки,
	                                             Отказ)
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ЕстьОшибкиЗаполненияПартнер Тогда
			
			ТекстОшибки = НСтр("ru='Партнер не должен отличаться от значения в соглашении ""%ПартнерСоглашение%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПартнерСоглашение%", Выборка.ПартнерСоглашение);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				"Партнер",
				,
				Отказ
			);
			
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияКонтрагент Тогда
			
			ТекстОшибки = НСтр("ru='Контрагент не должен отличаться от значения в соглашении ""%КонтрагентСоглашение%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КонтрагентСоглашение%", Выборка.КонтрагентСоглашение);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				"Контрагент",
				,
				Отказ
			);
			
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияОрганизация Тогда
			
			ТекстОшибки = НСтр("ru='Организация не должна отличаться от значения в соглашении ""%ОрганизацияСоглашение%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОрганизацияСоглашение%", Выборка.ОрганизацияСоглашение);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				"Организация",
				,
				Отказ
			);
				
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияФормаОплаты Тогда
			
			ТекстОшибки = НСтр("ru='Форма оплаты не должна отличаться от значения в соглашении ""%ФормаОплатыСоглашение%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыСоглашение%", Выборка.ФормаОплатыСоглашение);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				"ФормаОплаты",
				,
				Отказ
			);
				
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВалюта Тогда
			
			ТекстОшибки = НСтр("ru='Валюта не должна отличаться от значения в соглашении ""%ВалютаСоглашение%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				"Валюта",
				,
				Отказ
			);
				
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВалютаВзаиморасчетов Тогда
			
			ТекстОшибки = НСтр("ru='Валюта взаиморасчетов не должна отличаться от значения в соглашении ""%ВалютаСоглашение%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				"ВалютаВзаиморасчетов",
				,
				Отказ
			);
				
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияНалогообложениеНДС Тогда
			
			ТекстОшибки = НСтр("ru='Тип налогообложения НДС не должен отличаться от значения в соглашении ""%НалогообложениеНДС%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НалогообложениеНДС%",Выборка.НалогообложениеНДССоглашение);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				"НалогообложениеНДС",
				,
				Отказ
			);
			
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияХозяйственнаяОперация Тогда
			
			ТекстОшибки = НСтр("ru='Операция не должна отличаться от значения в соглашении ""%Операция%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Операция%", Выборка.ХозяйственнаяОперацияСоглашение); 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				"ХозяйственнаяОперация",
				,
				Отказ
			);
				
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияЦенаВключаетНДС Тогда
			
			ТекстОшибки = НСтр("ru='Признак ""Цена включает НДС"" не должен отличаться от значения в соглашении ""%ЦенаВключаетНДС%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦенаВключаетНДС%", ?(Выборка.ЦенаВключаетНДССоглашение, "Цена включает НДС", "Цена не включает НДС")); 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				"ЦенаВключаетНДС",
				,
				Отказ
			);
			
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСклад Тогда
			
			Если Выборка.СкладСоглашениеЕстьГруппа Тогда
				ТекстОшибки = НСтр("ru='Склад должен входить в группу складов ""%СкладСоглашение%""'");
			Иначе
				ТекстОшибки = НСтр("ru='Склад не должен отличаться от значения в соглашении ""%СкладСоглашение%""'");
			КонецЕсли;
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СкладСоглашение%", Выборка.СкладСоглашение);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				"Склад",
				,
				Отказ
			);
				
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВозвращатьМногооборотнуюТару Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru='Признак возврата многообортной тары не должен отличаться от значения в типовом соглашении'");
			Иначе
				ТекстОшибки = НСтр("ru='Признак возврата многообортной тары не должен отличаться от значения в соглашении'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				?(Выборка.ЭтоСоглашение,"ВозвращатьМногооборотнуюТару","ВернутьМногооборотнуюТару"),
				,
				Отказ
			);
			
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияРассчитыватьДатуВозвратаТарыПоКалендарю Тогда
			
			ТекстОшибки = НСтр("ru='Способ расчета даты возврата многообортной тары не должен отличаться от значения в типовом соглашении'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				"РассчитыватьДатуВозвратаТарыПоКалендарю",
				,
				Отказ
			);
			
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары И Выборка.ВозвратМногооборотнойТары Тогда
			
			ТекстОшибки = НСтр("ru='Срок возврата многообортной тары не должен отличаться от значения в соглашении'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				"СрокВозвратаМногооборотнойТары",
				,
				Отказ
			);
			
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиДатаВозвратаМногооборотнойТары И Выборка.ВозвратМногооборотнойТары Тогда
			
			ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
				ДокументЗакупки.Дата,
				Выборка.СрокВозвратаМногооборотнойТары,
				Выборка.РассчитыватьДатуВозвратаТарыПоКалендарю);
			
			Если ДатаВозвратаМногооборотнойТары <> ДокументЗакупки.ДатаВозвратаМногооборотнойТары Тогда
				ТекстОшибки = НСтр("ru='Дата возврата многообортной тары не должна отличаться от срока возврата в соглашении'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						ДокументЗакупки,
						"ДатаВозвратаМногооборотнойТары",
						,
						Отказ
					);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках в тч Товары документа закупки
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументЗакупки - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево- Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахТоварыДокументаЗакупки(Выборка,
	                                              ДокументЗакупки,
	                                              Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
		
		Если Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена Тогда
			
			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
				
				ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть выше цены по соглашению ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Номенклатура%",              Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Характеристика%",            Выборка.Характеристика);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ВалютаЦены%",                Выборка.ВалютаЦены);
				
			Иначе
				
				ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" не должна быть выше цены по соглашению ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",              Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%",                Выборка.ВалютаЦены);
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Цена"),
				,
				Отказ);
			
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСтавкаНДС Тогда
			
			ТекстОшибки = "Ставка НДС не должна отличаться от ставки НДС в соглашении ""%СтавкаНДССоглашение%""";
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СтавкаНДССоглашение%", Выборка.СтавкаНДССоглашение);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				ДокументЗакупки,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "СтавкаНДС"),
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках наличия дублей в тч Товары документа закупки
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументЗакупки - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияНоменклатурыПоставщика(Выборка,
	                                                                    ДокументЗакупки,
	                                                                    Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru='В строке не может быть выбрана ""%НоменклатураПоставщика%"", т.к. в предыдущих строках она соответствует другой номенклатуре'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НоменклатураПоставщика%", Выборка.НоменклатураПоставщика);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "НоменклатураПоставщика"),
			,
			Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках вхождения цен документа закупки в допустимый диапазон
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументЗакупки - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахВхождениеЦенВДопустимыйДиапазон(Выборка,
	                                                       ДокументЗакупки,
	                                                       Отказ,
	                                                       ИспользоватьСкидкиНаценки)
	
	Пока Выборка.Следующий() Цикл
		
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""'");
		АдресОшибки = СтрЗаменить(АдресОшибки,"%НомерСтроки%",Выборка.НомерСтроки);
		
		Если Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена Тогда
			
			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда
				
				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru='Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
					
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Номенклатура%",              Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Характеристика%",            Выборка.Характеристика);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ВалютаЦены%",                Выборка.ВалютаЦены);
				
			Иначе
				
				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru='Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
					
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",              Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%",                Выборка.ВалютаЦены);
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Цена"),
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполненности аналитик услуг для услуг в документе закупки
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументЗакупки - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияАналитикиУслуг(Выборка, ДокументЗакупки, Отказ)
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов") Тогда
	
		Пока Выборка.Следующий() Цикл
			
			ТекстОшибки = НСтр("ru='Необходимо заполнить статью расходов для услуги ""%Номенклатура%"" в строке %НомерСтроки% списка ""Товары""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументЗакупки,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"СтатьяРасходов"),
				,
				Отказ
			);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках наличия услуг в документе закупки
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументЗакупки - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахНаличиеУслугВДокументеЗакупки(Выборка, ДокументЗакупки, Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru='Нельзя указывать номенклатуру ""%Номенклатура%"" с типом ""Услуга"" (строка %НомерСтроки% списка ""Товары"")'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"Номенклатура"),
			,
			Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках отсутствия соглашения в документе закупки
//
// Параметры:
// ЕстьОшибкиСоглашениеНеУказано - Булево - признак наличия ошибки незаполненности соглашения 
// ДокументЗакупки               - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ                         - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахСоглашениеНеУказано(ЕстьОшибкиСоглашениеНеУказано, ДокументЗакупки, Отказ)
	
	Если ЕстьОшибкиСоглашениеНеУказано Тогда
	
		ТекстОшибки = НСтр("ru='Соглашение не указано. Документ не может быть проведен без согласования'");
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			"Соглашение",
			,
			Отказ
		);
			
	КонецЕсли;
		
КонецПроцедуры

// Выводит сообщения об ошибках наличия услуг в документе закупки
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументПродажи - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахДопустимостьРучныхСкидокНаценок(Знач Выборка,
	                                                       Знач ДокументПродажи,
	                                                       Отказ)

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЕстьОшибкиЗаполненияРучнойНаценки Тогда
				
			ТекстОшибки = НСтр("ru='Ручная наценка превышает максимально допустимую наценку ""%МаксимальнаяСуммаРучнойНаценки% %"" в строке %НомерСтроки% списка ""Товары""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальнаяСуммаРучнойНаценки%", Выборка.МаксимальнаяСуммаРучнойНаценки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",                    Выборка.НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"ПроцентРучнойСкидки"),
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполнения склада в документе закупки
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументЗакупки - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияСклада(Знач Выборка,
	                                                    Знач ДокументЗакупки,
	                                                    Отказ)
	
	Если Выборка.Следующий() Тогда
		
		ТекстОшибки = НСтр("ru='Поле ""Склад"" не заполнено'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			"Склад",
			,
			Отказ
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполнения склада в табличной части "Товары" документа закупки
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияСкладаВТабличнойЧастиТовары(Знач Выборка,
	                                                    Знач ДокументЗакупки,
	                                                    Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru='Не заполнена колонка ""Склад"" в строке %НомерСтроки% списка ""Товары""'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументЗакупки,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"Склад"),
			,
			Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения этапов графика оплаты
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументЗакупки  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьЭтаповГрафикаОплаты(Знач Выборка, Знач ДокументЗакупки, Отказ)
	
	МаксДатаАванса = Дата(1,1,1);
	ОдинДень       = 86400;
	СуммаПроцентовПлатежа = 0;
	СуммаПроцентовПлатежаШаблона = 0;
	
	ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты Тогда
			Возврат;
		КонецЕсли;
		
		Если Выборка.ЭтапШаблонаОтсутствует Тогда
			Продолжить;
		КонецЕсли;
		
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Этапы оплаты""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Выборка.НомерСтроки);
		
		Если Выборка.ЕстьОшибкиЗаполненияВариантаОплаты Тогда
			
			ТекстОшибки = НСтр("ru='Вариант оплаты отличается от значения в графике оплаты ""%ВариантОплатыШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВариантОплатыШаблона%", Выборка.ВариантОплатыШаблона); 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				,
				"НадписьЭтапыОплаты",
				,
				Отказ
			);
			
		КонецЕсли;
		
		Календарь = Выборка.Календарь;
		Если НЕ ЗначениеЗаполнено(Выборка.Календарь) Тогда
			Календарь = ОсновнойКалендарьПредприятия;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Календарь) Тогда
			
			Если Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления Тогда
				Если ЗначениеЗаполнено(Выборка.ЖелаемаяДатаПоступления) Тогда
					ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.ЖелаемаяДатаПоступления, Выборка.Сдвиг );
				ИначеЕсли ЗначениеЗаполнено(МаксДатаАванса) Тогда
					ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, МаксДатаАванса, Выборка.Сдвиг);
				Иначе
					ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.Дата, Выборка.Сдвиг);
				КонецЕсли;
			Иначе
				ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.Дата, Выборка.Сдвиг);
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Выборка.ЖелаемаяДатаПоступления) Тогда
				ДатаПлатежаШаблона = Выборка.ДатаПлатежаШаблона;
			ИначеЕсли ЗначениеЗаполнено(МаксДатаАванса) Тогда
				ДатаПлатежаШаблона = МаксДатаАванса + Выборка.Сдвиг * ОдинДень;
			Иначе
				ДатаПлатежаШаблона = Выборка.ДатаПлатежаШаблона;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Или
			Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
			
			МаксДатаАванса = ДатаПлатежаШаблона;
			
		КонецЕсли;
		
		Если ДатаПлатежаШаблона > Выборка.ДатаПлатежа Тогда
			
			ТекстОшибки = НСтр("ru='Дата платежа должна быть не меньше, чем в графике оплаты ""%ДатаПлатежаШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаПлатежаШаблона%", Формат(ДатаПлатежаШаблона, "ДЛФ=DD")); 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				,
				"НадписьЭтапыОплаты",
				,
				Отказ
			);
			
		КонецЕсли;
		
		СуммаПроцентовПлатежаШаблона = СуммаПроцентовПлатежаШаблона + Выборка.ПроцентПлатежаШаблона;
		СуммаПроцентовПлатежа = СуммаПроцентовПлатежа + Выборка.ПроцентПлатежа;
		
		Если Выборка.ЕстьОшибкиЗаполненияПроцентаПлатежа И СуммаПроцентовПлатежа > СуммаПроцентовПлатежаШаблона Тогда
			
			ТекстОшибки = НСтр("ru='Проценты до следующего платежа по графику (""%ПроцентПлатежа%%"") не должны превышать проценты по графику соглашения (""%ПроцентПлатежаШаблона%%"")'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежа%", СуммаПроцентовПлатежа); 
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежаШаблона%", СуммаПроцентовПлатежаШаблона); 
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки + АдресОшибки,
				,
				"НадписьЭтапыОплаты",
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках корректности количества этапов графика оплаты
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументЗакупки  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьКоличестваЭтаповГрафикаОплаты(Знач Выборка, Знач ДокументЗакупки, Отказ)

	Выборка.Следующий();

	Если Выборка.КоличествоЭтаповШаблона <> 0 И Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты Тогда
			
		ТекстОшибки = НСтр("ru='Количество этапов оплаты в документе (%КоличествоЭтаповДокумента%) должно совпадать с количеством этапов в графике (%КоличествоЭтаповГрафика%)'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповДокумента%", Выборка.КоличествоЭтаповДокумента);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповГрафика%",   Выборка.КоличествоЭтаповШаблона);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"НадписьЭтапыОплаты",
			,
			Отказ
		);
	
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения возвращаемых товаров
//
// Параметры:
// ТаблицаОшибок          - Выгрузка результата запроса
Процедура СообщитьОбОшибкахКорректностиВозвращаемыхТоваров(Знач ТаблицаОшибок)
	
	Для каждого СтрокаОшибки Из ТаблицаОшибок Цикл
		СообщениеОбОшибке = НСтр("ru='Возврат по номенклатуре %Номенклатура% \ %Характеристика% превышает количество закупленных товаров по документу поступления %НомерРеализации% на %Количество% %ЕдиницаИзмерения%'");
		Если СтрокаОшибки.Количество < 0 Тогда
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Номенклатура%",         СтрокаОшибки.Номенклатура);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Характеристика%",       СтрокаОшибки.Характеристика);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Количество%",          -СтрокаОшибки.Количество);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%ЕдиницаИзмерения%",     СтрокаОшибки.ЕдиницаИзмерения);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НомерРеализации%",      СтрокаОшибки.НомерПоступления);
			Если НЕ ЗначениеЗаполнено(СтрокаОшибки.Характеристика) Тогда
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "\",      "");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

// Выводит сообщения об ошибках контроля завершения расчетов
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКонтрольЗавершенияРасчетов(Знач Выборка,
	                                                          Знач ДокументЗакупки,
	                                                          Отказ)
	Если Выборка.Следующий() Тогда 
		Если Выборка.ЕстьНезавершенныеРасчеты  Тогда
			ТекстОшибки = НСтр("ru='Расчеты по заказу не завершены.
			|Для закрытия заказа требуется оплата %СуммаКОплате% %Валюта%.
			|Закрытие заказа возможно только с полностью оплаченными/отмененными строками'");
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаКОплате%",      Строка(Выборка.КОплатеКонечныйОстаток));
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",      Строка(Выборка.Валюта));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				,
				,
				Отказ
			);
		КонецЕсли;
	КонецЕсли;
		
	Если ДокументЗакупки.ЭтоНовый() Тогда
		
			ТекстОшибки = НСтр("ru='Заказ не оплачен. 
			|Закрытие заказа возможно только с полностью оплаченными/отмененными строками'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				,
				,
				Отказ
			);
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках контроля завершения поступления
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКонтрольПоступления (Знач Выборка,
	                                                          Знач ДокументЗакупки,
	                                                          Отказ)
	Если Выборка.Следующий() Тогда 
		Если Выборка.ЕстьНезавершенноеПоступление Тогда
			ТекстОшибки = НСтр("ru='Заказ поступил не полностью.
			|Закрытие заказа возможно только с полностью поступившими/отмененными строками'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				,
				,
				Отказ
			);
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументЗакупки.ЭтоНовый() Тогда
		
			ТекстОшибки = НСтр("ru='Отсутсвует поступление по заказу. 
			|Закрытие заказа возможно только с полностью поступившими/отмененными строками'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				,
				,
				Отказ
			);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса временной таблицы товаров
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы
//
Функция ПолучитьТекстЗапросаВременнойТаблицыТоваров(ИмяТаблицы)
	
	Возврат "
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ " + ИмяТаблицы + "
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|";
	
КонецФункции

// Возвращает текст запроса временной таблицы цен товаров по номерам строк
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
// 		ИмяВременнойТаблицыТоваров - Строка - Строка имени временной таблицы товаров
// 		ВидЦенКакПараметр - Булево - Истина, если в запросе "ВидЦен" должен использоваться как параметр; Ложь - если как поле временной таблицы товаров
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы
//
Функция ПолучитьТекстЗапросаВременнойТаблицыЦен(ИмяТаблицы, ИмяВременнойТаблицыТоваров)
	  // АСТЭК 20.-7.2013 Rкукушкин
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	&УсловиеЦеныПоставщика КАК УсловиеЦеныПоставщика,
	|	ВЫБОР
	|		КОГДА
	|			ВЫРАЗИТЬ (&Соглашение КАК Справочник.СоглашенияСПоставщиками).ВозвращатьМногооборотнуюТару
	|			И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		КОГДА
	|			ВЫРАЗИТЬ (&Соглашение КАК Справочник.СоглашенияСПоставщиками).НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|		ТОГДА
	|			ВременнаяТаблицаТовары.Номенклатура.СтавкаНДС
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|	КОНЕЦ КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА
	|			ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|		ТОГДА
	|			ВременнаяТаблицаТовары.Упаковка.Коэффициент
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ
	|	* ВЫБОР КОГДА ЕСТЬNULL(ЦеныНоменклатурыПоставщиковСрезПоследних.Цена, 0) > 0  Тогда
    |            ЦеныНоменклатурыПоставщиковСрезПоследних.Цена
	|		ИНАЧЕ
	|			ЦеныПоАртиклу.Цена
	|			КОНЕЦ 
	|    /ЕстьNULL(ЦеныНоменклатурыПоставщиковСрезПоследних.Упаковка.Коэффициент,1)
	|	* ВЫБОР
	|		КОГДА &Валюта <> ЦеныНоменклатурыПоставщиковСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена
	|ПОМЕСТИТЬ " + ИмяТаблицы + "
	|ИЗ
	| " + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТовары
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
	|				Соглашение = &Соглашение И
	|				УсловиеЦеныПоставщика = &УсловиеЦеныПоставщика И
	|				Номенклатура В
	|				(ВЫБРАТЬ
	|					ВременнаяТаблицаТовары.Номенклатура

	|				ИЗ
	|					" + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТовары)
	|) КАК ЦеныПоАртиклу
	|ПО
	|	ВременнаяТаблицаТовары.Номенклатура = ЦеныПоАртиклу.Номенклатура
	| и (ЦеныПоАртиклу.Характеристика=ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
	|				Соглашение = &Соглашение И
	|				УсловиеЦеныПоставщика = &УсловиеЦеныПоставщика И
	|				(Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					ВременнаяТаблицаТовары.Номенклатура,
	|					ВременнаяТаблицаТовары.Характеристика
	|				ИЗ
	|					" + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТовары)
	|) КАК ЦеныНоменклатурыПоставщиковСрезПоследних
	|ПО
	|	ВременнаяТаблицаТовары.Номенклатура = ЦеныНоменклатурыПоставщиковСрезПоследних.Номенклатура
	|   И ВременнаяТаблицаТовары.Характеристика = ЦеныНоменклатурыПоставщиковСрезПоследних.Характеристика

	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыЦены
	|ПО 
	|	ЦеныНоменклатурыПоставщиковСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
	|	По Истина
	|;
	|";
	
КонецФункции

// Функция формирует представление счет-фактуры.
//
// Параметры:
//  Номер - Строка - Номер счета-фактуры;
//  Дата - Дата - Дата счета-фактуры;
//
// Возвращаемое значение:
//	Строка - Представление счета-фактуры.
//
Функция ПредставлениеСчетаФактуры(Номер, Дата)
	
	Возврат "№ " + СокрЛП(Номер) + " от " + Формат(Дата, "ДФ=dd.MM.yyyy") + " г.";
	
КонецФункции
