////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция возращает индекс картинки для скидки.
//
// Возвращаемое значение:
//	Число
//
Функция ПолучитьИндексКартинкиДляГруппы(СтрокаДерева) Экспорт
	
	Индекс = 0;
	Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
		Индекс = 8;
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум Тогда
		Индекс = 16;
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Сложение Тогда
		Индекс = 0;
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда
		Индекс = 4;
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
		Индекс = 12;
	КонецЕсли;
	
	Если СтрокаДерева.ПометкаУдаления Тогда
		Индекс = Индекс + 3;
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции

// Функция возращает индекс картинки для скидки.
//
// Возвращаемое значение:
//	Число
//
Функция ПолучитьИндексКартинкиДляСкидки(СтрокаДерева) Экспорт
	
	Индекс = 0;
	Если СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
		Если СтрокаДерева.ЗначениеСкидкиНаценки < 0 Тогда
			Индекс = 32;
		Иначе
			Индекс = 28;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Количество Тогда
		Индекс = 36;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок Тогда
		Индекс = 36;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма Тогда
		Если СтрокаДерева.ЗначениеСкидкиНаценки < 0 Тогда
			Индекс = 40;
		Иначе
			Индекс = 44;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ОкруглениеСуммы Тогда
		Если СтрокаДерева.ЗначениеСкидкиНаценки < 0 Тогда
			Индекс = 40;
		Иначе
			Индекс = 44;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.СуммаДляКаждойСтроки Тогда
		Если СтрокаДерева.ЗначениеСкидкиНаценки < 0 Тогда
			Индекс = 40;
		Иначе
			Индекс = 44;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦены Тогда
		Индекс = 48;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение Тогда
		Индекс = 52;
	ИначеЕсли СтрокаДерева.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.КартаЛояльности Тогда
		Индекс = 52;
	КонецЕсли;
	
	Если СтрокаДерева.ПометкаУдаления Тогда
		Индекс = Индекс + 3;
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции

// Процедура выполняет сохранение отработанных сообщений.
//
Процедура СохранитьОтработанныеСообщения(Объект, Сообщения) Экспорт
	
	Для Каждого СтрокаТЧ Из Сообщения Цикл
		НайденныеСтроки = Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("СкидкаНаценка, КлючСвязи", СтрокаТЧ.СкидкаНаценка, -1));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.НапомнитьПозже = СтрокаТЧ.НапомнитьПозже;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции расчета скидок (наценок) по дереву скидок (наценок).

// Функция получает дерево применяемых скидок.
//
// Возвращаемое значение:
//	ДеревоЗначений - дерево применяемых скидок.
//
Функция ПолучитьДеревоСкидок(МассивСкидок, МассивУправляемыхСкидок) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка                       КАК СкидкаНаценка,
	|	СкидкиНаценки.РеквизитДопУпорядочивания    КАК РеквизитДопУпорядочивания,
	|	СкидкиНаценки.ВариантСовместногоПрименения КАК ВариантСовместногоПрименения,
	
	// Необходимо для отображения иконок
	|	СкидкиНаценки.ПометкаУдаления              КАК ПометкаУдаления,
	|	СкидкиНаценки.СпособПредоставления         КАК СпособПредоставления,
	|	СкидкиНаценки.ЗначениеСкидкиНаценки        КАК ЗначениеСкидкиНаценки,
	
	|	СкидкиНаценки.ТочностьОкругления           КАК ТочностьОкругления,
	|	СкидкиНаценки.ОкруглятьВБольшуюСторону     КАК ОкруглятьВБольшуюСторону,
	|	СкидкиНаценки.ПсихологическоеОкругление    КАК ПсихологическоеОкругление,
	|	
	|	СкидкиНаценки.ЭтоГруппа                    КАК ЭтоГруппа,
	|	СкидкиНаценки.Управляемая                  КАК Управляемая,
	|	ВЫБОР КОГДА СкидкиНаценки.ССЫЛКА В(&МассивУправляемыхСкидок) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК НазначенаПользователем,
	|	
	|	СкидкиНаценки.УсловияПредоставления.(
	|		УсловиеПредоставления                    КАК УсловиеПредоставления,
	|		УсловиеПредоставления.ОбластьОграничения КАК ОбластьОграничения
	|	) КАК УсловияПредоставления
	|ИЗ
	|	Справочник.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В(&МассивСкидок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СкидкиНаценки.РеквизитДопУпорядочивания
	|ИТОГИ ПО
	|	СкидкаНаценка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("МассивСкидок", МассивСкидок);
	Запрос.УстановитьПараметр("МассивУправляемыхСкидок", МассивУправляемыхСкидок);
	
	ДеревоСкидок = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ОбработатьДеревоСкидок(ДеревоСкидок);
	
	Возврат ДеревоСкидок;
	
КонецФункции // ПолучитьДеревоСкидок()

////////////////////////////////////////////////////////////////////////////////
// Вспомогаельные экспортные процедуры.

// Функция выполняет проверку применения скидок (наценок) в чеке ККМ
//
// Параметры
//  Склад  - СправочникСсылка.Склады - Склад для которого необходимо выполнить проверку
//  Дата  - Дата - Дата на которую нужно выполнить проверку
//
// Возвращаемое значение:
//   Структура   - Структура результата проверки
//
Функция ПолучитьПараметрыПримененияСкидокНаценокВЧекеККМ(Объект, Дата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСкидок.СкидкаНаценка КАК СкидкаНаценка,
	|	СписокСкидок.Управляемая КАК Управляемая
	|ПОМЕСТИТЬ СписокСкидок
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка КАК СкидкаНаценка,
	|		ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка.Управляемая КАК Управляемая
	|	ИЗ
	|		РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|				&ТекущаяДата,
	|				(ДатаОкончания >= &ТекущаяДата ИЛИ ДатаОкончания = ДатаВремя(1,1,1))
	|					И Склад = &Склад) КАК ДействиеСкидокНаценокСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Таблица.СкидкаНаценка,
	|		Таблица.СкидкаНаценка.Управляемая
	|	ИЗ
	|		Справочник.ВидыКартЛояльности.СкидкиНаценки КАК Таблица
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|				Справочник.КартыЛояльности КАК КартыЛояльности
	|				ПО КартыЛояльности.Владелец = Таблица.Ссылка
	|				И КартыЛояльности.Ссылка = &КартаЛояльности
	|			
	|	ГДЕ
	|		Таблица.Ссылка.ДатаНачалаДействия <= &ТекущаяДата
	|		И ВЫБОР КОГДА Таблица.Ссылка.ДатаОкончанияДействия = ДатаВремя(1,1,1) ТОГДА ИСТИНА ИНАЧЕ КОНЕЦПЕРИОДА(Таблица.Ссылка.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата КОНЕЦ
	|		И Таблица.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВидовКартЛояльности.Действует)) КАК СписокСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписокСкидок.СкидкаНаценка
	|ИЗ
	|	СписокСкидок КАК СписокСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписокСкидок.СкидкаНаценка
	|ИЗ
	|	СписокСкидок КАК СписокСкидок
	|ГДЕ
	|	СписокСкидок.Управляемая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления КАК УсловиеПредоставления
	|ИЗ
	|	Справочник.СкидкиНаценки.УсловияПредоставления КАК СкидкиНаценкиУсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСкидок КАК СписокСкидок
	|		ПО СкидкиНаценкиУсловияПредоставления.Ссылка = СписокСкидок.СкидкаНаценка
	|ГДЕ
	|	СкидкиНаценкиУсловияПредоставления.УсловиеПредоставления.УсловиеПредоставления = &УсловиеПредоставления";
	
	Запрос.Параметры.Вставить("Склад",           Объект.Склад);
	Запрос.Параметры.Вставить("КартаЛояльности", Объект.КартаЛояльности);
	Запрос.Параметры.Вставить("ТекущаяДата",     Дата);
	Запрос.Параметры.Вставить("УсловиеПредоставления", Перечисления.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты);
	
	Результат = Запрос.ВыполнитьПакет();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НазначеныСкидки",                 Ложь);
	СтруктураПараметров.Вставить("НазначеныУправляемыеСкидки",      Ложь);
	СтруктураПараметров.Вставить("ФормаОплатыВлияетНаРасчетСкидок", Ложь);
	
	СтруктураПараметров.НазначеныСкидки = НЕ Результат[1].Пустой();
	СтруктураПараметров.ФормаОплатыВлияетНаРасчетСкидок = НЕ Результат[3].Пустой();
	СтруктураПараметров.НазначеныУправляемыеСкидки = НЕ Результат[2].Пустой();;
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьПараметрыПримененияСкидокНаценок()

////////////////////////////////////////////////////////////////////////////////
// Процедуры расчета скидок (наценок) по документам.

// Функция возвращает структуру, содежащую сообщения для объекта
//
Функция ПолучитьСтруктуруСообщений(Объект) Экспорт
	
	Сообщения = Новый Массив;
	
	АвтоматическиОткрывать = Ложь;
	
	НайденныеСтроки = Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", -1));
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		Сообщения.Добавить(Новый Структура("СкидкаНаценка, НапомнитьПозже", СтрокаТЧ.СкидкаНаценка, СтрокаТЧ.НапомнитьПозже));
		Если СтрокаТЧ.НапомнитьПозже Тогда
			АвтоматическиОткрывать = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураСообщений = Новый Структура("Сообщения, АвтоматическиОткрывать, КартаЛояльности, Партнер", Сообщения, АвтоматическиОткрывать, Объект.КартаЛояльности, Объект.Партнер);
	Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту")
		И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЧекККМ") Тогда
		СтруктураСообщений.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЧекККМ") Тогда
		СтруктураСообщений.Вставить("Соглашение", Объект.Соглашение);
	КонецЕсли;
	
	Возврат СтруктураСообщений;
	
КонецФункции

// Процедура настраивает отображение команды показать сообщения на форме
//
Процедура НастроитьКомандуПоказатьСообщения(Объект, ЭлементФормы, Видимость = Истина) Экспорт
	
	СтруктуруСообщений = ПолучитьСтруктуруСообщений(Объект);
	ВсегоСообщений = СтруктуруСообщений.Сообщения.Количество();
	НепрочитанныхСообщений = 0;
	Для Каждого СтрокаТЧ Из СтруктуруСообщений.Сообщения Цикл
		Если СтрокаТЧ.НапомнитьПозже Тогда
			НепрочитанныхСообщений = НепрочитанныхСообщений + 1;
		КонецЕсли;
	КонецЦикла;
	ЭлементФормы.Видимость = ВсегоСообщений > 0 И Видимость;
	Если НепрочитанныхСообщений > 0 Тогда
		ЭлементФормы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Показать непрочитанные сообщения (%1)'"), НепрочитанныхСообщений);
	Иначе
		ЭлементФормы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Показать сообщения (%1)'"), СтруктуруСообщений.Сообщения.Количество());
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры расчета скидок (наценок) по документам.

// Процедура отменяет рассчитанные по объекту скидки.
// Вызывается из форм документов.
//
Процедура ОтменитьСкидки(Объект, ИмяТЧ, РассчитыватьСуммуСНДС=Ложь, РассчитыватьСуммуВзаиморасчетов=Ложь) Экспорт
	
	Объект.СкидкиНаценки.Очистить();
	
	ОчиститьСкидкиВТЧ(Объект, ИмяТЧ, РассчитыватьСуммуСНДС, РассчитыватьСуммуВзаиморасчетов);
	
	Объект.СкидкиРассчитаны = Ложь;
	
КонецПроцедуры // РассчитатьПоОбъекту()

// Процедура назначает ручные скидки в табичной части
//
Процедура НазначитьРучнуюСкидку(Объект, ИмяТЧ, Знач СуммаСкидкиКРаспределению,
	ИспользуютсяАвтоматическиеСкидки, ТолькоДляАктивныхСтрок = Ложь,
	РассчитыватьСуммуСНДС=Ложь, РассчитыватьСуммуВзаиморасчетов=Ложь, ВыделенныеСтроки = Неопределено, АдресВоВременномХранилище) Экспорт
	
	Если ИмяТЧ = "Услуги" Тогда
		ИмяКоличества = "Количество";
	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;
	
	Если ВыделенныеСтроки <> Неопределено Тогда
		СтрокиТабличнойЧасти = Новый Массив();
		Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
			СтрокиТабличнойЧасти.Добавить(Объект[ИмяТЧ].НайтиПоИдентификатору(ТекСтрока));
		КонецЦикла;
	Иначе
		Если ТолькоДляАктивныхСтрок Тогда
			СтрокиТабличнойЧасти = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Активность", Истина));
		Иначе
			СтрокиТабличнойЧасти = Объект[ИмяТЧ];
		КонецЕсли;
	КонецЕсли;
	
	Данные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Данные.Ограничения.Колонки.Добавить("СуммаСкидкиКРаспределению", Новый ОписаниеТипов("Число"));
	
	СуммаДокументаБезСкидки = Данные.Ограничения.Итог("СуммаБезСкидки");
	Если СуммаСкидкиКРаспределению > СуммаДокументаБезСкидки Тогда
		СуммаСкидкиКРаспределению = СуммаДокументаБезСкидки;
	КонецЕсли;
	
	Если СуммаСкидкиКРаспределению > 0 Тогда
		Колонка = "МаксимальнаяСуммаРучнойСкидки";
	Иначе
		Колонка = "МаксимальнаяСуммаРучнойНаценки";
	КонецЕсли;
	МаксимальнаяСуммаСкидкиНаценки = Данные.Ограничения.Итог(Колонка);
	
	Для Каждого Ограничение Из Данные.Ограничения Цикл
		Если МаксимальнаяСуммаСкидкиНаценки <> 0 Тогда
			Ограничение.СуммаСкидкиКРаспределению = (Ограничение[Колонка]) * (СуммаСкидкиКРаспределению / МаксимальнаяСуммаСкидкиНаценки);
			СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - Ограничение.СуммаСкидкиКРаспределению;
			МаксимальнаяСуммаСкидкиНаценки = МаксимальнаяСуммаСкидкиНаценки - Ограничение[Колонка];
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из СтрокиТабличнойЧасти Цикл
		
		ДанныеНоменклатуры = Данные.Товары.Найти(СтрокаТЧ.Номенклатура, "Номенклатура");
		
		Для Каждого Ограничение Из Данные.Ограничения Цикл
			
			Если  НЕ (ДанныеНоменклатуры.ЦеноваяГруппа = Ограничение.ЦеноваяГруппа
				      ИЛИ (Данные.Ограничения.Найти(ДанныеНоменклатуры.ЦеноваяГруппа, "ЦеноваяГруппа") = Неопределено
				      И Ограничение.ЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка())) Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаБезСкидки = СтрокаТЧ[ИмяКоличества] * СтрокаТЧ.Цена;
			СуммаАвтоматическойСкидки = ?(ИспользуютсяАвтоматическиеСкидки, СтрокаТЧ.СуммаАвтоматическойСкидки, 0);
			
			Если Ограничение.СуммаБезСкидки <> 0 Тогда
				СтрокаТЧ.СуммаРучнойСкидки = (СуммаБезСкидки) * (Ограничение.СуммаСкидкиКРаспределению / Ограничение.СуммаБезСкидки);
			Иначе
				СтрокаТЧ.СуммаРучнойСкидки = 0;
			КонецЕсли;
			Ограничение.СуммаСкидкиКРаспределению = Ограничение.СуммаСкидкиКРаспределению - СтрокаТЧ.СуммаРучнойСкидки;
			Ограничение.СуммаБезСкидки = Ограничение.СуммаБезСкидки - СуммаБезСкидки;
			
			Если СуммаБезСкидки <> 0 Тогда
				СтрокаТЧ.ПроцентРучнойСкидки = 100 * СтрокаТЧ.СуммаРучнойСкидки / СуммаБезСкидки;
			Иначе
				СтрокаТЧ.ПроцентРучнойСкидки = 0;
			КонецЕсли;
			
			СуммаСкидки = СуммаАвтоматическойСкидки + СтрокаТЧ.СуммаРучнойСкидки;
			
			Если ИспользуютсяАвтоматическиеСкидки Тогда
				Если СуммаБезСкидки <> 0 Тогда
					СтрокаТЧ.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , 100 * СуммаАвтоматическойСкидки / СуммаБезСкидки);
				Иначе
					СтрокаТЧ.ПроцентАвтоматическойСкидки = 0;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТЧ.Сумма    = СуммаБезСкидки - ?(СуммаСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаСкидки);
			СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
			Если РассчитыватьСуммуСНДС Тогда
				СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
			КонецЕсли;
			
			Если РассчитыватьСуммуВзаиморасчетов Тогда
				СтрокаТЧ.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Объект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	
КонецПроцедуры

// Процедура выполняет отмену ручных скидок в табичной части
//
Процедура ОчиститьСкидкиВТЧ(Объект, ИмяТЧ, РассчитыватьСуммуСНДС=Ложь, РассчитыватьСуммуВзаиморасчетов=Ложь) Экспорт
	
	Если ИмяТЧ="Услуги" Тогда
		ИмяКоличества = "Количество";
	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;

	
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		Если СтрокаТЧ.СуммаАвтоматическойСкидки <> 0 Или СтрокаТЧ.ПроцентАвтоматическойСкидки <> 0
			Или СтрокаТЧ.СуммаРучнойСкидки <> 0 Или СтрокаТЧ.ПроцентРучнойСкидки <> 0 Тогда
			
			СтрокаТЧ.СуммаАвтоматическойСкидки   = 0;
			СтрокаТЧ.ПроцентАвтоматическойСкидки = 0;
			СтрокаТЧ.СуммаРучнойСкидки           = 0;
			СтрокаТЧ.ПроцентРучнойСкидки         = 0;
			
			// Применение автоматической скидки.
			СуммаБезСкидки = СтрокаТЧ[ИмяКоличества] * СтрокаТЧ.Цена;
			
			СтрокаТЧ.Сумма    = СуммаБезСкидки;
			СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
			Если РассчитыватьСуммуСНДС Тогда
				СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
			КонецЕсли;
			
			Если РассчитыватьСуммуВзаиморасчетов Тогда
				СтрокаТЧ.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	
КонецПроцедуры // РассчитатьПоОбъекту()

// Процедура выполняет отмену ручных скидок в табичной части
//
Процедура ОтменитьРучныеСкидки(Объект, ИмяТЧ, ИспользуютсяАвтоматическиеСкидки,
	РассчитыватьСуммуСНДС=Ложь, РассчитыватьСуммуВзаиморасчетов=Ложь) Экспорт
	
	Если ИмяТЧ="Услуги" Тогда
		ИмяКоличества = "Количество";
	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		Если СтрокаТЧ.СуммаРучнойСкидки <> 0 Или СтрокаТЧ.ПроцентРучнойСкидки <> 0 Тогда
			
			СтрокаТЧ.СуммаРучнойСкидки = 0;
			СтрокаТЧ.ПроцентРучнойСкидки = 0;
			
			СуммаБезСкидки = СтрокаТЧ[ИмяКоличества] * СтрокаТЧ.Цена;
			
			СуммаАвтоматическойСкидки = ?(ИспользуютсяАвтоматическиеСкидки, СтрокаТЧ.СуммаАвтоматическойСкидки, 0);
			
			СтрокаТЧ.Сумма    = СуммаБезСкидки - ?(СуммаАвтоматическойСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаАвтоматическойСкидки);
			СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект.ЦенаВключаетНДС);
			
			Если РассчитыватьСуммуСНДС Тогда
				СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
			КонецЕсли;
			
			Если РассчитыватьСуммуВзаиморасчетов Тогда
				СтрокаТЧ.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	
КонецПроцедуры // РассчитатьПоОбъекту()

// Функция выполняет расчет скидок по заказу клиента.
//
Функция РассчитатьПоЗаказуКлиента(Объект, ВходныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Товары");
	
	// Обработка табличной части "Товары".
	Товары = Объект.Товары.Выгрузить(
		,
		"КлючСвязи,
		|Номенклатура,
		|Характеристика,
		|Упаковка,
		|Количество,
		|КоличествоУпаковок,
		|Цена"
	);
	
	ТаблицаСкидокНаценок = ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(
		Объект.Дата,
		Объект.Склад,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.КартаЛояльности
	);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки", ТаблицаСкидокНаценок);
	ПараметрыРасчета.Вставить("Партнер",       Объект.Партнер);
	ПараметрыРасчета.Вставить("Соглашение",    Объект.Соглашение);
	ПараметрыРасчета.Вставить("Регистратор",   Объект.Ссылка);
	
	// Для скидки "За форму оплаты".
	ПараметрыРасчета.Вставить("ФормаОплаты", Объект.ФормаОплаты);
	
	// Для скидки "За время продажи".
	ПараметрыРасчета.Вставить("ДеньНедели",   Перечисления.ДниНедели.Получить(ДеньНедели(Объект.Дата) - 1));
	ПараметрыРасчета.Вставить("ТекущееВремя", ПолучитьТекущееВремяОбъекта(Объект));
	
	// Для скидки "За соблюдение графика оплаты".
	ПараметрыРасчета.Вставить("ГрафикОплаты", Объект.ГрафикОплаты);
	
	// Карты лояльности
	ПараметрыРасчета.Вставить("КартаЛояльности", Объект.КартаЛояльности);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",            Объект.Валюта);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Объект.Менеджер);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ПолучитьТекущуюДатуОбъекта(Объект));
	
	ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ПараметрыРасчета, ВходныеПараметры);
	ПримененныеСкидкиНаценки = РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		
		ПрименитьРезультатРасчетаКЗаказуКлиента(Объект, ПримененныеСкидкиНаценки);
		
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоЗаказуКлиента()

Процедура ПрименитьРезультатРасчетаКЗаказуКлиента(Объект, ПримененныеСкидкиНаценки) Экспорт
	
	ПрименитьРезультатРасчетаКОбъекту(Объект, "Товары", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, Истина);
	
КонецПроцедуры

// Функция выполняет расчет скидок по заявке на возврат товаров от клиента.
//
Функция РассчитатьПоЗаявкеНаВозвратТоваровОтКлиента(Объект, ВходныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "ЗаменяющиеТовары");
	
	// Обработка табличной части "Товары".
	Товары = Объект.ЗаменяющиеТовары.Выгрузить(
		,
		"КлючСвязи,
		|Номенклатура,
		|Характеристика,
		|Упаковка,
		|Количество,
		|КоличествоУпаковок,
		|Цена"
	);
	
	ТаблицаСкидокНаценок = ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(
		Объект.Дата,
		Объект.Склад,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.КартаЛояльности
	);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки", ТаблицаСкидокНаценок);
	ПараметрыРасчета.Вставить("Партнер",       Объект.Партнер);
	ПараметрыРасчета.Вставить("Соглашение",    Объект.Соглашение);
	ПараметрыРасчета.Вставить("Регистратор",   Объект.Ссылка);
	
	// Для скидки "За форму оплаты".
	ПараметрыРасчета.Вставить("ФормаОплаты", Объект.ФормаОплаты);
	
	// Для скидки "За время продажи".
	ПараметрыРасчета.Вставить("ДеньНедели",   Перечисления.ДниНедели.Получить(ДеньНедели(Объект.Дата) - 1));
	ПараметрыРасчета.Вставить("ТекущееВремя", ПолучитьТекущееВремяОбъекта(Объект));
	
	// Для скидки "За соблюдение графика оплаты".
	ПараметрыРасчета.Вставить("ГрафикОплаты", Объект.ГрафикОплаты);
	
	// Карты лояльности
	ПараметрыРасчета.Вставить("КартаЛояльности", Объект.КартаЛояльности);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",            Объект.Валюта);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Объект.Менеджер);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ПолучитьТекущуюДатуОбъекта(Объект));
	
	ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ПараметрыРасчета, ВходныеПараметры);
	ПримененныеСкидкиНаценки = РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		
		ПрименитьРезультатРасчетаКВозвратуТоваровОтКлиента(Объект, ПримененныеСкидкиНаценки);
		
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоЗаказуКлиента()

Процедура ПрименитьРезультатРасчетаКВозвратуТоваровОтКлиента(Объект, ПримененныеСкидкиНаценки) Экспорт
	
	ПрименитьРезультатРасчетаКОбъекту(Объект, "ЗаменяющиеТовары", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, Истина);
	
КонецПроцедуры

// Функция выполняет расчет скидок по заказу клиента.
//
Функция РассчитатьПоКоммерческомуПредложениюКлиенту(Объект, ВходныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//АК  в коммерческом прделожении работают другие реквизиты
	//ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Товары");
	ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "АК_ТоварыПредварительно");
	                                          
	// Обработка табличной части "Товары".
	//Товары = Объект.Товары.Выгрузить(
	Товары = Объект.АК_ТоварыПредварительно.Выгрузить(
		Новый Структура("Активность", Истина),
		"КлючСвязи,
		|Номенклатура,
		|Характеристика,
		|Упаковка,
		|Количество,
		|КоличествоУпаковок,
		|Цена"
	);
	
	ТаблицаСкидокНаценок = ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(
		Объект.Дата,
		Объект.Склад,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.КартаЛояльности
	);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки", ТаблицаСкидокНаценок);
	ПараметрыРасчета.Вставить("Партнер",       Объект.Партнер);
	ПараметрыРасчета.Вставить("Соглашение",    Объект.Соглашение);
	ПараметрыРасчета.Вставить("Регистратор",   Объект.Ссылка);
	
	// Для скидки "За форму оплаты".
	ПараметрыРасчета.Вставить("ФормаОплаты", Объект.ФормаОплаты);
	
	// Для скидки "За время продажи".
	ПараметрыРасчета.Вставить("ДеньНедели",   Перечисления.ДниНедели.Получить(ДеньНедели(Объект.Дата) - 1));
	ПараметрыРасчета.Вставить("ТекущееВремя", ПолучитьТекущееВремяОбъекта(Объект));
	
	// Для скидки "За соблюдение графика оплаты".
	ПараметрыРасчета.Вставить("ГрафикОплаты", Объект.ГрафикОплаты);
	
	// Карты лояльности
	ПараметрыРасчета.Вставить("КартаЛояльности", Объект.КартаЛояльности);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",            Объект.Валюта);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Объект.Менеджер);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ПолучитьТекущуюДатуОбъекта(Объект));
	
	ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ПараметрыРасчета, ВходныеПараметры);
	ПримененныеСкидкиНаценки = РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		
		ПрименитьРезультатРасчетаККоммерческомуПредложениюКлиенту(Объект, ПримененныеСкидкиНаценки);
		
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоЗаказуКлиента()

Процедура ПрименитьРезультатРасчетаККоммерческомуПредложениюКлиенту(Объект, ПримененныеСкидкиНаценки) Экспорт
	
	ПрименитьРезультатРасчетаКОбъекту(Объект, "Товары", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, Истина);
	
КонецПроцедуры

// Процедура выполняет расчет скидок по реализации товаров и услуг.
//
Функция РассчитатьПоРеализацииТоваровУслуг(Объект, ВходныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Товары");
	
	// Обработка табличной части "Товары".
	Товары = Объект.Товары.Выгрузить(
		,
		"КлючСвязи,
		|Номенклатура,
		|Характеристика,
		|Упаковка,
		|Количество,
		|КоличествоУпаковок,
		|Цена"
	);
	
	ТаблицаСкидокНаценок = ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(
		Объект.Дата,
		Объект.Склад,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.КартаЛояльности
	);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки", ТаблицаСкидокНаценок);
	ПараметрыРасчета.Вставить("Партнер",       Объект.Партнер);
	ПараметрыРасчета.Вставить("Соглашение",    Объект.Соглашение);
	ПараметрыРасчета.Вставить("Регистратор",   Объект.Ссылка);
	
	// Для скидки "Форму оплаты".
	ПараметрыРасчета.Вставить("ФормаОплаты", Объект.ФормаОплаты);
	
	// Для скидки "За время продажи".
	ПараметрыРасчета.Вставить("ДеньНедели",   Перечисления.ДниНедели.Получить(ДеньНедели(Объект.Дата) - 1));
	ПараметрыРасчета.Вставить("ТекущееВремя", ПолучитьТекущееВремяОбъекта(Объект));
	
	// Для скидки "За соблюдение графика оплаты".
	ПараметрыРасчета.Вставить("ГрафикОплаты", Неопределено);
	
	// Карты лояльности
	ПараметрыРасчета.Вставить("КартаЛояльности", Объект.КартаЛояльности);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",            Объект.Валюта);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Объект.Менеджер);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ПолучитьТекущуюДатуОбъекта(Объект));
	
	ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ПараметрыРасчета, ВходныеПараметры);
	ПримененныеСкидкиНаценки = РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		
		ПрименитьРезультатРасчетаКРеализацииТоваровУслуг(Объект, ПримененныеСкидкиНаценки);
		
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции

Процедура ПрименитьРезультатРасчетаКРеализацииТоваровУслуг(Объект, ПримененныеСкидкиНаценки) Экспорт
	
	ПрименитьРезультатРасчетаКОбъекту(Объект, "Товары", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, Истина, Истина);
	
КонецПроцедуры

// Процедура выполняет расчет скидок по акту выполненных работ.
//
Функция РассчитатьПоАктуВыполненныхРабот(Объект, ВходныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Услуги");
	
	// Обработка табличной части "Услуги".
	Услуги = Объект.Услуги.Выгрузить(
		,
		"КлючСвязи,
		|Номенклатура,
		|Характеристика,
		|Количество,
		|Цена"
	);
	Услуги.Колонки.Добавить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиНоменклатуры"));
	Услуги.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТЧ Из Услуги Цикл
		СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
	КонецЦикла;
	
	ТаблицаСкидокНаценок = ПолучитьТаблицуСкидокНаценокДляУслуг(
		Объект.Дата,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.КартаЛояльности
	);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки", ТаблицаСкидокНаценок);
	ПараметрыРасчета.Вставить("Партнер",       Объект.Партнер);
	ПараметрыРасчета.Вставить("Соглашение",    Объект.Соглашение);
	ПараметрыРасчета.Вставить("Регистратор",   Объект.Ссылка);
	
	// Для скидки "Форму оплаты".
	ПараметрыРасчета.Вставить("ФормаОплаты", Объект.ФормаОплаты);
	
	// Для скидки "За время продажи".
	ПараметрыРасчета.Вставить("ДеньНедели",   Перечисления.ДниНедели.Получить(ДеньНедели(Объект.Дата) - 1));
	ПараметрыРасчета.Вставить("ТекущееВремя", ПолучитьТекущееВремяОбъекта(Объект));
	
	// Для скидки "За соблюдение графика оплаты".
	ПараметрыРасчета.Вставить("ГрафикОплаты", Неопределено);
	
	// Карты лояльности
	ПараметрыРасчета.Вставить("КартаЛояльности", Объект.КартаЛояльности);
	
	ПараметрыРасчета.Вставить("Товары",                     Услуги);
	ПараметрыРасчета.Вставить("ВалютаДокумента",            Объект.Валюта);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Объект.Менеджер);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ПолучитьТекущуюДатуОбъекта(Объект));
	
	ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ПараметрыРасчета, ВходныеПараметры);
	ПримененныеСкидкиНаценки = РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		
		ПрименитьРезультатРасчетаКАктуВыполненныхРабот(Объект, ПримененныеСкидкиНаценки);
		
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции

Процедура ПрименитьРезультатРасчетаКАктуВыполненныхРабот(Объект, ПримененныеСкидкиНаценки) Экспорт
	
	ПрименитьРезультатРасчетаКОбъекту(Объект, "Услуги", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки, Истина, Истина);
	
КонецПроцедуры

// Функция выполняет расчет скидок по чеку ККМ.
//
Функция РассчитатьПоЧекуККМ(Объект, ВходныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, "Товары");
	
	// Обработка табличной части "Товары".
	Товары = Объект.Товары.Выгрузить(
		,
		"КлючСвязи,
		|Номенклатура,
		|Характеристика,
		|Упаковка,
		|Количество,
		|КоличествоУпаковок,
		|Цена"
	);
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("СкидкиНаценки", ПолучитьТаблицуСкидокНаценокДляРозничнойТорговли(Объект.Дата, Объект.Склад, Объект.КартаЛояльности));
	ПараметрыРасчета.Вставить("Партнер",       Объект.Партнер);
	ПараметрыРасчета.Вставить("Соглашение",    Неопределено);
	ПараметрыРасчета.Вставить("Регистратор",   Объект.Ссылка);
	
	// Для скидки "За форму оплаты".
	ПараметрыРасчета.Вставить("ФормаОплаты", Объект.ФормаОплаты);
	
	// Для скидки "За время продажи".
	ПараметрыРасчета.Вставить("ДеньНедели",   Перечисления.ДниНедели.Получить(ДеньНедели(Объект.Дата) - 1));
	ПараметрыРасчета.Вставить("ТекущееВремя", ПолучитьТекущееВремяОбъекта(Объект));
	
	// Скидка "За соблюдение графика оплаты" не предоставляется.
	ПараметрыРасчета.Вставить("ГрафикОплаты", Неопределено);
	
	// Карты лояльности
	ПараметрыРасчета.Вставить("КартаЛояльности", Объект.КартаЛояльности);
	
	ПараметрыРасчета.Вставить("Товары",            Товары);
	ПараметрыРасчета.Вставить("ВалютаДокумента",            Объект.Валюта);
	ПараметрыРасчета.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	ПараметрыРасчета.Вставить("Пользователь",      Объект.Кассир);
	ПараметрыРасчета.Вставить("ТекущаяДата",       ПолучитьТекущуюДатуОбъекта(Объект));
	
	ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ПараметрыРасчета, ВходныеПараметры);
	ПримененныеСкидкиНаценки = РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры);
	
	Если ВходныеПараметры.ПрименятьКОбъекту Тогда
		
		ПрименитьРезультатРасчетаКЧекуККМ(Объект, ПримененныеСкидкиНаценки);
		
	КонецЕсли;
	
	Возврат ПримененныеСкидкиНаценки;
	
КонецФункции // РассчитатьПоЧекуККМ()

Процедура ПрименитьРезультатРасчетаКЧекуККМ(Объект, ПримененныеСкидкиНаценки) Экспорт
	
	ПрименитьРезультатРасчетаКОбъекту(Объект, "Товары", ПримененныеСкидкиНаценки.ТаблицаСкидкиНаценки);
	
КонецПроцедуры

// Процедура выполняет расчет скидок по документу.
// Вызывается из форм документов.
//
Функция Рассчитать(Объект, ВходныеПараметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		РезультатРасчета = РассчитатьПоЗаказуКлиента(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		РезультатРасчета = РассчитатьПоЗаявкеНаВозвратТоваровОтКлиента(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		
		РезультатРасчета = РассчитатьПоКоммерческомуПредложениюКлиенту(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		РезультатРасчета = РассчитатьПоЧекуККМ(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		РезультатРасчета = РассчитатьПоРеализацииТоваровУслуг(Объект, ВходныеПараметры);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		РезультатРасчета = РассчитатьПоАктуВыполненныхРабот(Объект, ВходныеПараметры);
		
	КонецЕсли;
	
	Возврат РезультатРасчета;
	
КонецФункции

// Процедура применяет результат расчет скидок к документу.
// Вызывается из форм документов.
//
Процедура ПрименитьРезультатРасчета(Объект, ПримененныеСкидки) Экспорт
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		ПрименитьРезультатРасчетаКЗаказуКлиента(Объект, ПримененныеСкидки);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		ПрименитьРезультатРасчетаКВозвратуТоваровОтКлиента(Объект, ПримененныеСкидки);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") Тогда
		
		ПрименитьРезультатРасчетаККоммерческомуПредложениюКлиенту(Объект, ПримененныеСкидки);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМ") Тогда
		
		ПрименитьРезультатРасчетаКЧекуККМ(Объект, ПримененныеСкидки);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ПрименитьРезультатРасчетаКРеализацииТоваровУслуг(Объект, ПримененныеСкидки);
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		ПрименитьРезультатРасчетаКАктуВыполненныхРабот(Объект, ПримененныеСкидки);
		
	КонецЕсли;
	
КонецПроцедуры

Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Форма, ИмяТаблицы, УникальныйИдентификатор, ТолькоДляВыделенныхСтрок, ИмяТаблицыВыделенныхСтрок = Неопределено, ТолькоАктивныеСтроки = Ложь, ИспользоватьОграничения = Истина) Экспорт
	
	СоглашениеСКлиентом = Неопределено;
	Если ОбщегоНазначенияУТ.ЕстьРеквизитОбъекта(Форма.Объект, "Соглашение") Тогда
		СоглашениеСКлиентом = Форма.Объект.Соглашение;
	КонецЕсли;

	ИспользоватьРучныеСкидки                     = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьОграниченияРучныхСкидокВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям");
	
	Если ЗначениеЗаполнено(СоглашениеСКлиентом) Тогда
		ИспользоватьОграниченияПоСоглашениям = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	Иначе
		ИспользоватьОграниченияПоСоглашениям = Ложь;
	КонецЕсли;

	ИспользоватьОграниченияРучныхСкидок = ИспользоватьОграничения И ИспользоватьРучныеСкидки И (ИспользоватьОграниченияРучныхСкидокВПродажах ИЛИ ИспользоватьОграниченияПоСоглашениям);

	Если ИмяТаблицы = "Услуги" Тогда
		ИмяКоличества = "Количество";
	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура",              Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить(ИмяКоличества,               Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	Товары.Колонки.Добавить("Цена",                      Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	Товары.Колонки.Добавить("СуммаАвтоматическойСкидки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	Товары.Колонки.Добавить("СуммаРучнойСкидки",         Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	Если ТолькоДляВыделенныхСтрок Тогда
		
		Для Каждого ТекСтрока Из Форма.Элементы[?(ИмяТаблицыВыделенныхСтрок = Неопределено, ИмяТаблицы, ИмяТаблицыВыделенныхСтрок)].ВыделенныеСтроки Цикл
			
			СтрокаКоллекции = Форма.Объект[ИмяТаблицы].НайтиПоИдентификатору(ТекСтрока);
			
			Если СтрокаКоллекции = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
			
		КонецЦикла;
	Иначе
		
		Если Не ТолькоАктивныеСтроки Тогда
			Для Каждого СтрокаТЧ Из Форма.Объект[ИмяТаблицы] Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		Иначе
			НайденныеСтроки =Форма.Объект.Товары.НайтиСтроки(Новый Структура("Активность", Истина));
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьОграниченияРучныхСкидок Тогда
		
		ОграниченияРучныхСкидок = НастройкиПродажДляПользователейСервер.ОграниченияСкидокНаценок(СоглашениеСКлиентом, Пользователи.ТекущийПользователь());
		ЦеновыеГруппы = ОграниченияРучныхСкидок.ВыгрузитьКолонку("ЦеноваяГруппа");
		
	Иначе
		
		ОграниченияРучныхСкидок = Новый ТаблицаЗначений;
		ОграниченияРучныхСкидок.Колонки.Добавить("ЦеноваяГруппа", Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
		ОграниченияРучныхСкидок.Колонки.Добавить("МаксимальныйПроцентРучнойСкидки",  Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		ОграниченияРучныхСкидок.Колонки.Добавить("МаксимальныйПроцентРучнойНаценки", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		
		Ограничение = ОграниченияРучныхСкидок.Добавить();
		Ограничение.ЦеноваяГруппа = Справочники.ЦеновыеГруппы.ПустаяСсылка();
		Ограничение.МаксимальныйПроцентРучнойСкидки  = 999.99;
		Ограничение.МаксимальныйПроцентРучнойНаценки = 999.99;
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары." + ИмяКоличества + " " + "КАК КоличествоУпаковок,
	|	Товары.Цена КАК ЦенаЗаУпаковку,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.ЦенаЗаУпаковку КАК ЦенаЗаУпаковку,
	|	Товары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Товары.СуммаРучнойСкидки КАК СуммаРучнойСкидки
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	ВременнаяТаблица КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = Товары.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОграниченияРучныхСкидок.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки КАК МаксимальныйПроцентРучнойНаценки
	|ПОМЕСТИТЬ ОграниченияРучныхСкидок
	|ИЗ
	|	&ОграниченияРучныхСкидок КАК ОграниченияРучныхСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	Т.СуммаБезСкидки КАК СуммаБезСкидки,
	|	Т.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	Т.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки КАК МаксимальныйПроцентРучнойСкидки,
	|	ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки КАК МаксимальныйПроцентРучнойНаценки,
	|	ВЫРАЗИТЬ(ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойСкидки / 100 * Т.СуммаБезСкидки КАК ЧИСЛО(10, 2)) КАК МаксимальнаяСуммаРучнойСкидки,
	|	ВЫРАЗИТЬ(ОграниченияРучныхСкидок.МаксимальныйПроцентРучнойНаценки / 100 * Т.СуммаБезСкидки КАК ЧИСЛО(10, 2)) КАК МаксимальнаяСуммаРучнойНаценки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа В (&ЦеновыеГруппы)
	|				ТОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|		КОНЕЦ КАК ЦеноваяГруппа,
	|		СУММА(ВЫРАЗИТЬ(ВременнаяТаблицаТовары.КоличествоУпаковок * ВременнаяТаблицаТовары.ЦенаЗаУпаковку КАК ЧИСЛО(10, 2))) КАК СуммаБезСкидки,
	|		СУММА(ВременнаяТаблицаТовары.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
	|		СУММА(ВременнаяТаблицаТовары.СуммаРучнойСкидки) КАК СуммаРучнойСкидки
	|	ИЗ
	|		ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВЫБОР
	|			КОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа В (&ЦеновыеГруппы)
	|				ТОГДА ВременнаяТаблицаТовары.ЦеноваяГруппа
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка)
	|		КОНЕЦ) КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОграниченияРучныхСкидок КАК ОграниченияРучныхСкидок
	|		ПО (ОграниченияРучныхСкидок.ЦеноваяГруппа = Т.ЦеноваяГруппа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.ЦеноваяГруппа КАК ЦеноваяГруппа
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("Товары", Товары);
	Запрос.Параметры.Вставить("ОграниченияРучныхСкидок", ОграниченияРучныхСкидок);
	Запрос.Параметры.Вставить("ЦеновыеГруппы", ЦеновыеГруппы);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Ограничения = Результат[3].Выгрузить();
	Ограничения.Индексы.Добавить("ЦеноваяГруппа");
	
	Товары = Результат[4].Выгрузить();
	Товары.Индексы.Добавить("Номенклатура");
	
	Возврат ПоместитьВоВременноеХранилище(Новый Структура("Ограничения, Товары, ИспользоватьОграниченияРучныхСкидок", Ограничения, Товары, ИспользоватьОграниченияРучныхСкидок), УникальныйИдентификатор);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция создает таблицу значений.
//
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры)
	
	Если Параметры.ПустаяТаблицаСкидокСРасшифровкой = Неопределено Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("КлючСвязи",   Новый ОписаниеТипов("Число"));
		Таблица.Колонки.Добавить("Расшифровка", Новый ОписаниеТипов("ТаблицаЗначений"));
		Таблица.Колонки.Добавить("Сумма",       Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		Таблица.Колонки.Добавить("Действует",   Новый ОписаниеТипов("Булево"));
		Параметры.ПустаяТаблицаСкидокСРасшифровкой = Таблица;
	Иначе
		Возврат Параметры.ПустаяТаблицаСкидокСРасшифровкой.СкопироватьКолонки();
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции // ПолучитьПустуюТаблицуСкидокСРасшифровкой()

// Функция выполняет объединение подчиненных таблиц данных.
//
// Возвращаемое значение:
//	ТаблицаДанных - объединенная таблица данных.
//
Функция ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("КлючСвязи",                 Новый ОписаниеТипов("Число"));
	ТаблицаДанных.Колонки.Добавить("Сумма",                     Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	ТаблицаДанных.Колонки.Добавить("Расшифровка",               Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаДанных.Колонки.Добавить("РеквизитДопУпорядочивания", Новый ОписаниеТипов("Число"));
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		Если НЕ ПодчиненнаяСтрока.ЭтоГруппа Тогда // Это скидка а не группа
			
			Если НЕ ПодчиненнаяСтрока.ПараметрыУсловий.УсловияВыполнены Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПодчиненнаяСтрока.Управляемая И НЕ ПодчиненнаяСтрока.НазначенаПользователем Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		РеквизитДопУпорядочивания = ПодчиненнаяСтрока.РеквизитДопУпорядочивания;
		
		Для Каждого СтрокаТаблицы Из ПодчиненнаяСтрока.ТаблицаДанных Цикл
			Если ПодчиненнаяСтрока.ЭтоГруппа Тогда
				НоваяСтрока = ТаблицаДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
			Иначе
				Если СтрокаТаблицы.Действует Тогда
					НоваяСтрока = ТаблицаДанных.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции // ОбъединитьТаблицыДанныхПодчиненныхСтрок()

// Функция создает таблицу значений с расшифровками скидок и добавлвяет в нее переданные значения.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Расшифровка скидок.
//
Функция ПолучитьРасшифровкуСкидки(СтрокаДерева, Сумма, Параметры)
	
	Расшифровка = Параметры.ПустаяТаблицаРасшифровка.СкопироватьКолонки();
	
	СтрокаРасшифровки = Расшифровка.Добавить();
	СтрокаРасшифровки.СкидкаНаценка = СтрокаДерева.СкидкаНаценка;
	СтрокаРасшифровки.Сумма         = Сумма;
	
	Возврат Расшифровка;
	
КонецФункции // ПолучитьРасшифровкуСкидки()

// Функция возвращает таблицу действующих скидок (наценок)
//
// Возвращаемое значение:
//	ТаблицаЗначений - Расшифровка скидок.
//
Функция ПолучитьТаблицуСкидокНаценокДляРозничнойТорговли(ТекущаяДата, Склад, КартаЛояльности)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Склады.Ссылка.Родитель КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В (&Склад)
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ
	|");
	Запрос.Параметры.Вставить("Склад", Склад);
	ГруппыСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|			   &ТекущаяДата,
	|			   (ДатаОкончания >= &ТекущаяДата ИЛИ ДатаОкончания = ДатаВремя(1,1,1))
	|				И (Склад = &Склад ИЛИ Склад В (&ГруппыСкладов) ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|			) КАК ДействиеСкидокНаценокСрезПоследних
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.СкидкаНаценка
	|ИЗ
	|	Справочник.ВидыКартЛояльности.СкидкиНаценки КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.КартыЛояльности КАК КартыЛояльности
	|			ПО КартыЛояльности.Владелец = Таблица.Ссылка
	|			 И КартыЛояльности.Ссылка = &КартаЛояльности
	|ГДЕ
	|	Таблица.Ссылка.ДатаНачалаДействия <= &ТекущаяДата
	|	И ВЫБОР КОГДА Таблица.Ссылка.ДатаОкончанияДействия = ДатаВремя(1,1,1) ТОГДА ИСТИНА ИНАЧЕ КОНЕЦПЕРИОДА(Таблица.Ссылка.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата КОНЕЦ
	|");
	
	Запрос.Параметры.Вставить("Склад",           Склад);
	Запрос.Параметры.Вставить("ГруппыСкладов",   ГруппыСкладов);
	Запрос.Параметры.Вставить("ТекущаяДата"    , ТекущаяДата);
	Запрос.Параметры.Вставить("КартаЛояльности", КартаЛояльности);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуСкидокНаценокДляРозничнойТорговли()

// Функция возвращает таблицу действующих скидок (наценок)
//
// Возвращаемое значение:
//	ТаблицаЗначений - Расшифровка скидок.
//
Функция ПолучитьТаблицуСкидокНаценокДляОптовойТорговли(ТекущаяДата, Склад, Партнер, Соглашение, КартаЛояльности)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Склады.Ссылка.Родитель КАК Ссылка
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	Склады.Ссылка В (&Склад)
	|ИТОГИ ПО
	|	Ссылка ТОЛЬКО ИЕРАРХИЯ
	|");
	Запрос.Параметры.Вставить("Склад", Склад);
	ГруппыСкладов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|			   &ТекущаяДата,
	|			   (ДатаОкончания >= &ТекущаяДата ИЛИ ДатаОкончания = ДатаВремя(1,1,1))
	|			   И (Склад = &Склад ИЛИ Склад В (&ГруппыСкладов) ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка))
	|			) КАК ДействиеСкидокНаценокСрезПоследних
	|
	|ГДЕ
	|	(ДействиеСкидокНаценокСрезПоследних.СегментПартнеров В
	|				(ВЫБРАТЬ
	|					ПартнерыСегмента.Сегмент КАК Сегмент
	|				ИЗ
	|					РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|				ГДЕ
	|					ПартнерыСегмента.Партнер = &Партнер)
	|			ИЛИ ДействиеСкидокНаценокСрезПоследних.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашениеСКлиентомСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.СкидкиНаценки КАК СоглашениеСКлиентомСкидкиНаценки
	|ГДЕ
	|	СоглашениеСКлиентомСкидкиНаценки.Ссылка = &Соглашение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.СкидкаНаценка
	|ИЗ
	|	Справочник.ВидыКартЛояльности.СкидкиНаценки КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.КартыЛояльности КАК КартыЛояльности
	|			ПО КартыЛояльности.Владелец = Таблица.Ссылка
	|			 И КартыЛояльности.Ссылка = &КартаЛояльности
	|ГДЕ
	|	Таблица.Ссылка.ДатаНачалаДействия <= &ТекущаяДата
	|	И ВЫБОР КОГДА Таблица.Ссылка.ДатаОкончанияДействия = ДатаВремя(1,1,1) ТОГДА ИСТИНА ИНАЧЕ КОНЕЦПЕРИОДА(Таблица.Ссылка.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата КОНЕЦ
	|");
	
	Запрос.Параметры.Вставить("Склад"           ,Склад);
	Запрос.Параметры.Вставить("ГруппыСкладов"   ,ГруппыСкладов);
	Запрос.Параметры.Вставить("ТекущаяДата"     ,ТекущаяДата);
	Запрос.Параметры.Вставить("Партнер"         ,Партнер);
	Запрос.Параметры.Вставить("Соглашение"      ,Соглашение);
	Запрос.Параметры.Вставить("КартаЛояльности" ,КартаЛояльности);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуСкидокНаценокДляОптовойТорговли()

// Функция возвращает таблицу действующих скидок (наценок)
//
// Возвращаемое значение:
//	ТаблицаЗначений - Расшифровка скидок.
//
Функция ПолучитьТаблицуСкидокНаценокДляУслуг(ТекущаяДата, Партнер, Соглашение, КартаЛояльности)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДействиеСкидокНаценокСрезПоследних.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	РегистрСведений.ДействиеСкидокНаценок.СрезПоследних(
	|			&ТекущаяДата,
	|			(ДатаОкончания >= &ТекущаяДата ИЛИ ДатаОкончания = ДатаВремя(1,1,1))
	|				И Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК ДействиеСкидокНаценокСрезПоследних
	|ГДЕ
	|	(ДействиеСкидокНаценокСрезПоследних.СегментПартнеров В
	|				(ВЫБРАТЬ
	|					ПартнерыСегмента.Сегмент КАК Сегмент
	|				ИЗ
	|					РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|				ГДЕ
	|					ПартнерыСегмента.Партнер = &Партнер)
	|			ИЛИ ДействиеСкидокНаценокСрезПоследних.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашениеСКлиентомСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.СкидкиНаценки КАК СоглашениеСКлиентомСкидкиНаценки
	|ГДЕ
	|	СоглашениеСКлиентомСкидкиНаценки.Ссылка = &Соглашение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.СкидкаНаценка
	|ИЗ
	|	Справочник.ВидыКартЛояльности.СкидкиНаценки КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Справочник.КартыЛояльности КАК КартыЛояльности
	|			ПО КартыЛояльности.Владелец = Таблица.Ссылка
	|			 И КартыЛояльности.Ссылка = &КартаЛояльности
	|ГДЕ
	|	Таблица.Ссылка.ДатаНачалаДействия <= &ТекущаяДата
	|	И ВЫБОР КОГДА Таблица.Ссылка.ДатаОкончанияДействия = ДатаВремя(1,1,1) ТОГДА ИСТИНА ИНАЧЕ КОНЕЦПЕРИОДА(Таблица.Ссылка.ДатаОкончанияДействия, ДЕНЬ) >= &ТекущаяДата КОНЕЦ
	|");
	
	Запрос.Параметры.Вставить("Соглашение"     , Соглашение);
	Запрос.Параметры.Вставить("Партнер"        , Партнер);
	Запрос.Параметры.Вставить("КартаЛояльности", КартаЛояльности);
	Запрос.Параметры.Вставить("ТекущаяДата"    , ТекущаяДата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуСкидокНаценокДляУслуг()

// Функция заполняет ключи связи в табличной части "Товары" документа.
//
Процедура ЗаполнитьКлючиСвязиВТабличнойЧастиТовары(Объект, ИмяТЧ)
	
	Индекс = 0;
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		Индекс = Индекс + 1;
		СтрокаТЧ.КлючСвязи = Индекс;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКлючиСвязиВТабличнойЧастиТовары()

// Функция получает текущее время объекта
//
// Параметры
//  Объект  - ДокументОбъект - объект для которого нужно получить текущее время
//
// Возвращаемое значение:
//   Дата   - Текущее время объекта
//
Функция ПолучитьТекущееВремяОбъекта(Объект)
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата());
	ТекущееВремя = '00010101' + (ТекущаяДата - НачалоДня(ТекущаяДата));
	
	Возврат ТекущееВремя;
	
КонецФункции // ПолучитьТекущееВремяОбъекта()

// Функция получает текущую дату время объекта
//
// Параметры
//  Объект  - ДокументОбъект - объект для которого нужно получить текущее время
//
// Возвращаемое значение:
//   Дата   - Текущее время объекта
//
Функция ПолучитьТекущуюДатуОбъекта(Объект)
	
	ТекущаяДата = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Дата, ТекущаяДата());
	
	Возврат ТекущаяДата;
	
КонецФункции // ПолучитьТекущееВремяОбъекта()

// Процедура заполняет служебную структуру "УправляемыеСкидки" структуры "ВходныеПараметры"
//
Процедура ПодготовитьДанныеОВыбранныхУправляемыхСкидках(Объект, ПараметрыРасчета, ВходныеПараметры)
	
	ПараметрыРасчета.Вставить("УправляемыеСкидки", Новый Массив);
	
	// Если управляемые скидки не переданы, то получим их из предыдущего расчета
	Если ВходныеПараметры.Свойство("УправляемыеСкидки") И ВходныеПараметры.УправляемыеСкидки <> Неопределено И ВходныеПараметры.УправляемыеСкидки.Количество() > 0 Тогда
		Для Каждого УправляемаяСкидка Из ВходныеПараметры.УправляемыеСкидки Цикл
			ПараметрыРасчета.УправляемыеСкидки.Добавить(УправляемаяСкидка.Значение);
		КонецЦикла;
	Иначе
		Если ВходныеПараметры.ВосстанавливатьУправляемыеСкидки Тогда
			НайденныеСтроки = Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", 0));
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				ПараметрыРасчета.УправляемыеСкидки.Добавить(СтрокаТЧ.СкидкаНаценка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Сообщения = Новый ТаблицаЗначений;
	Сообщения.Колонки.Добавить("СкидкаНаценка",  Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	Сообщения.Колонки.Добавить("НапомнитьПозже", Новый ОписаниеТипов("Булево"));
	Сообщения.Индексы.Добавить("СкидкаНаценка");
	
	НайденныеСтроки = Объект.СкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", -1));
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		Сообщение = Сообщения.Добавить();
		Сообщение.СкидкаНаценка  = СтрокаТЧ.СкидкаНаценка;
		Сообщение.НапомнитьПозже = СтрокаТЧ.НапомнитьПозже;
	КонецЦикла;
	
	ПараметрыРасчета.Вставить("Сообщения", Сообщения);
	
КонецПроцедуры

// Процедура сохраняет выбранные управляемые скидки в табличной части "СкидкиНаценки"
//
Процедура СохранитьДанныеОВыбранныхУправляемыхСкидках(ТаблицаСкидкиНаценки, ПараметрыРасчета)
	
	Для Каждого УправляемаяСкидка Из ПараметрыРасчета.УправляемыеСкидки Цикл
		НоваяСтрока = ТаблицаСкидкиНаценки.Добавить();
		НоваяСтрока.КлючСвязи     = 0;
		НоваяСтрока.Сумма         = 0;
		НоваяСтрока.СкидкаНаценка = УправляемаяСкидка;
	КонецЦикла;
	
	ТекущиеСообщения = ТаблицаСкидкиНаценки.НайтиСтроки(Новый Структура("КлючСвязи", -1));
	Для Каждого СтрокаТЧ Из ТекущиеСообщения Цикл
		
		СохраненныеСообщения = ПараметрыРасчета.Сообщения.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаТЧ.СкидкаНаценка));
		Если СохраненныеСообщения.Количество() > 0 Тогда
			Для Каждого Сообщение Из СохраненныеСообщения Цикл
				СтрокаТЧ.НапомнитьПозже = Сообщение.НапомнитьПозже;
			КонецЦикла;
		Иначе
			// Новое сообщение
			СтрокаТЧ.НапомнитьПозже = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные запросы.

// Функция формирует текст запроса для таблицы значений скидок (наценок) по ценовым группам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаКурсыВалют()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс      КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "КурсыВалют");
	
КонецФункции // ТекстЗапросаТаблицаЗначенияСкидокНаценокПоЦеновымГруппам()

// Функция формирует текст запроса для таблицы действующих скидок (наценок).
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаСкидкиНаценки()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СкидкиНаценки.СкидкаНаценка КАК Ссылка
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&СкидкиНаценки КАК СкидкиНаценки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка                            КАК Ссылка,
	|	СкидкиНаценки.ВариантСовместногоПрименения      КАК ВариантСовместногоПрименения,
	|	СкидкиНаценки.РеквизитДопУпорядочивания         КАК РеквизитДопУпорядочивания,
	|	СкидкиНаценки.СпособПредоставления              КАК СпособПредоставления,
	|	СкидкиНаценки.ВидЦены                           КАК ВидЦены,
	|	СкидкиНаценки.СегментПодарков                   КАК СегментПодарков,
	|	СкидкиНаценки.ИспользоватьКратность             КАК ИспользоватьКратность,
	|	СкидкиНаценки.УсловиеДляСкидкиКоличеством       КАК УсловиеДляСкидкиКоличеством,
	|	
	|	СкидкиНаценки.ТочностьОкругления                КАК ТочностьОкругления,
	|	СкидкиНаценки.ОкруглятьВБольшуюСторону          КАК ОкруглятьВБольшуюСторону,
	|	СкидкиНаценки.ПсихологическоеОкругление         КАК ПсихологическоеОкругление,
	|	
	|	ВЫБОР
	|		КОГДА (СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма) ИЛИ СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.СуммаДляКаждойСтроки))
	|			ТОГДА СкидкиНаценки.ЗначениеСкидкиНаценки * ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1))
	|		ИНАЧЕ СкидкиНаценки.ЗначениеСкидкиНаценки
	|	КОНЕЦ КАК ЗначениеСкидкиНаценки,
	|	
	|	СкидкиНаценки.ВалютаПредоставления КАК ВалютаПредоставления
	|	
	|ПОМЕСТИТЬ ВременнаяТаблицаСкидкиНаценки
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблицаСкидки
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки КАК СкидкиНаценки
	|		ПО ВременнаяТаблицаСкидки.Ссылка = СкидкиНаценки.Ссылка
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = СкидкиНаценки.ВалютаПредоставления)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаСкидкиНаценки.Ссылка                      КАК СкидкаНаценка,
	|	ВременнаяТаблицаСкидкиНаценки.СпособПредоставления        КАК СпособПредоставления,
	|	ВременнаяТаблицаСкидкиНаценки.ВидЦены                     КАК ВидЦены,
	|	ВременнаяТаблицаСкидкиНаценки.ЗначениеСкидкиНаценки       КАК ЗначениеСкидкиНаценки,
	|	ВременнаяТаблицаСкидкиНаценки.СегментПодарков             КАК СегментПодарков,
	|	ВременнаяТаблицаСкидкиНаценки.ИспользоватьКратность       КАК ИспользоватьКратность,
	|	ВременнаяТаблицаСкидкиНаценки.УсловиеДляСкидкиКоличеством КАК УсловиеДляСкидкиКоличеством,
	|	ВременнаяТаблицаСкидкиНаценки.ТочностьОкругления          КАК ТочностьОкругления,
	|	ВременнаяТаблицаСкидкиНаценки.ОкруглятьВБольшуюСторону    КАК ОкруглятьВБольшуюСторону,
	|	ВременнаяТаблицаСкидкиНаценки.ПсихологическоеОкругление   КАК ПсихологическоеОкругление
	|ИЗ
	|	ВременнаяТаблицаСкидкиНаценки КАК ВременнаяТаблицаСкидкиНаценки";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 3, 3, "СкидкиНаценки");
	
КонецФункции // ТекстЗапросаТаблицаСкидкиНаценки

// Функция формирует текст запроса для таблицы действующих скидок (наценок).
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаУсловияПредоставления()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Условия.УсловиеПредоставления                                              КАК Ссылка,
	|	Условия.УсловиеПредоставления.УсловиеПредоставления                        КАК УсловиеПредоставления,
	|	Условия.УсловиеПредоставления.ВариантОпределенияПериодаНакопительнойСкидки КАК ВариантОпределенияПериодаНакопительнойСкидки,
	|	Условия.УсловиеПредоставления.ВариантНакопления                            КАК ВариантНакопления,
	|	Условия.УсловиеПредоставления.ТипСравнения                                 КАК ТипСравнения,
	|	Условия.УсловиеПредоставления.ВалютаОграничения                            КАК ВалютаОграничения,
	|	Условия.УсловиеПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж   КАК КритерийОграниченияПримененияЗаОбъемПродаж,
	|	Условия.УсловиеПредоставления.ОбластьОграничения                           КАК ОбластьОграничения,
	|	Условия.УсловиеПредоставления.ГрафикОплаты                                 КАК ГрафикОплаты,
	|	Условия.УсловиеПредоставления.ФормаОплаты                                  КАК ФормаОплаты,
	|	Условия.УсловиеПредоставления.СегментНоменклатурыОграничения               КАК СегментНоменклатурыОграничения,
	|	Условия.УсловиеПредоставления.ПериодНакопления                             КАК ПериодНакопления,
	|	Условия.УсловиеПредоставления.ГруппаПользователей                          КАК ГруппаПользователей,
	|	Условия.УсловиеПредоставления.ВидКартыЛояльности                           КАК ВидКартыЛояльности,
	|	
	|	ВЫБОР
	|		КОГДА (
	|				Условия.УсловиеПредоставления.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж)
	|				ИЛИ Условия.УсловиеПредоставления.УсловиеПредоставления = ЗНАЧЕНИЕ(Перечисление.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж)
	|				)
	|				И Условия.УсловиеПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА Условия.УсловиеПредоставления.ЗначениеУсловияОграничения * ЕСТЬNULL(КурсыВалютОграничения.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютОграничения.Кратность, 1))
	|		ИНАЧЕ Условия.УсловиеПредоставления.ЗначениеУсловияОграничения
	|	КОНЕЦ КАК ЗначениеУсловияОграничения
	|	
	|ПОМЕСТИТЬ УсловияПредоставления
	|ИЗ
	|	ВременнаяТаблица КАК СкидкиНаценки
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.УсловияПредоставления КАК Условия
	|		ПО СкидкиНаценки.Ссылка = Условия.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютОграничения
	|		ПО (КурсыВалютОграничения.Валюта = Условия.УсловиеПредоставления.ВалютаОграничения)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка                                       КАК Ссылка,
	|	УсловияПредоставления.УсловиеПредоставления                        КАК УсловиеПредоставления,
	|	УсловияПредоставления.ВариантОпределенияПериодаНакопительнойСкидки КАК ВариантОпределенияПериодаНакопительнойСкидки,
	|	УсловияПредоставления.ВариантНакопления                            КАК ВариантНакопления,
	|	УсловияПредоставления.ВалютаОграничения                            КАК ВалютаОграничения,
	|	УсловияПредоставления.ТипСравнения                                 КАК ТипСравнения,
	|	УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж   КАК КритерийОграниченияПримененияЗаОбъемПродаж,
	|	УсловияПредоставления.ОбластьОграничения                           КАК ОбластьОграничения,
	|	УсловияПредоставления.ГрафикОплаты                                 КАК ГрафикОплаты,
	|	УсловияПредоставления.ФормаОплаты                                  КАК ФормаОплаты,
	|	УсловияПредоставления.ЗначениеУсловияОграничения                   КАК ЗначениеУсловияОграничения,
	|	УсловияПредоставления.СегментНоменклатурыОграничения               КАК СегментНоменклатурыОграничения,
	|	УсловияПредоставления.ПериодНакопления                             КАК ПериодНакопления,
	|	УсловияПредоставления.ГруппаПользователей                          КАК ГруппаПользователей,
	|	УсловияПредоставления.ВидКартыЛояльности                           КАК ВидКартыЛояльности
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 2, 2, "УсловияПредоставления");
	
КонецФункции // ТекстЗапросаТаблицаСкидкиНаценки

// Функция формирует текст запроса для таблицы товаров по сегментам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаТоварыПоСегментам()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.КлючСвязи          КАК КлючСвязи,
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Цена               КАК ЦенаЗаУпаковку
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	&Товары КАК Товары
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.КлючСвязи             КАК КлючСвязи,
	|	Товары.Номенклатура          КАК Номенклатура,
	|	Товары.Характеристика        КАК Характеристика,
	|	Товары.Упаковка              КАК Упаковка,
	|	Товары.Количество            КАК Количество,
	|	Товары.КоличествоУпаковок    КАК КоличествоУпаковок,
	|	НоменклатураСегмента.Сегмент КАК СегментНоменклатуры,
	|	
	|	Товары.КоличествоУпаковок * Товары.ЦенаЗаУпаковку КАК Сумма
	|	
	|ПОМЕСТИТЬ ВременнаяТаблицаТоварыПоСегментам
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|		ПО    Товары.Номенклатура   = НоменклатураСегмента.Номенклатура
	|			И Товары.Характеристика = НоменклатураСегмента.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.КлючСвязи                                       КАК КлючСвязи,
	|	Товары.Номенклатура                                    КАК Номенклатура,
	|	Товары.Характеристика                                  КАК Характеристика,
	|	Товары.Упаковка                                        КАК Упаковка,
	|	Товары.Количество                                      КАК Количество,
	|	Товары.КоличествоУпаковок                              КАК КоличествоУпаковок,
	|	ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка) КАК СегментНоменклатуры,
	|	
	|	Товары.КоличествоУпаковок * Товары.ЦенаЗаУпаковку КАК Сумма
	|	
	|ИЗ
	|	ВременнаяТаблицаТовары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТоварыПоСегментам.КлючСвязи           КАК КлючСвязи,
	|	ВременнаяТаблицаТоварыПоСегментам.Номенклатура        КАК Номенклатура,
	|	ВременнаяТаблицаТоварыПоСегментам.Характеристика      КАК Характеристика,
	|	ВременнаяТаблицаТоварыПоСегментам.Упаковка            КАК Упаковка,
	|	ВременнаяТаблицаТоварыПоСегментам.Количество          КАК Количество,
	|	ВременнаяТаблицаТоварыПоСегментам.КоличествоУпаковок  КАК КоличествоУпаковок,
	|	ВременнаяТаблицаТоварыПоСегментам.Сумма               КАК Сумма,
	|	
	|	ВременнаяТаблицаТоварыПоСегментам.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВременнаяТаблицаТоварыПоСегментам.СегментНоменклатуры        КАК СегментНоменклатуры
	|	
	|ИЗ
	|	ВременнаяТаблицаТоварыПоСегментам КАК ВременнаяТаблицаТоварыПоСегментам";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 3, 3, "ТоварыПоСегментам");
	
КонецФункции // ТекстЗапросаТаблицаТоварыПоСегментам()

// Функция формирует текст запроса для таблицы значений скидок (наценок) по ценовым группам.
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаСкидкиНаценкиПоЦеновымГруппам()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЦеновыеГруппы.Ссылка        КАК СкидкаНаценка,
	|	ЦеновыеГруппы.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВЫБОР
	|		КОГДА (СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.Сумма) ИЛИ СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.СуммаДляКаждойСтроки))
	|			ТОГДА ЦеновыеГруппы.ЗначениеСкидкиНаценки * ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1))
	|		ИНАЧЕ ЦеновыеГруппы.ЗначениеСкидкиНаценки
	|	КОНЕЦ КАК ЗначениеСкидкиНаценки
	|ИЗ
	|	ВременнаяТаблицаСкидкиНаценки КАК СкидкиНаценки
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СкидкиНаценки.ЦеновыеГруппы КАК ЦеновыеГруппы
	|		ПО СкидкиНаценки.Ссылка = ЦеновыеГруппы.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = СкидкиНаценки.ВалютаПредоставления)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "СкидкиНаценкиПоЦеновымГруппам");
	
КонецФункции // ТекстЗапросаТаблицаЗначенияСкидокНаценокПоЦеновымГруппам()

// Функция формирует текст запроса для таблицы цены номенклатуры (цена пересчитывается в валюту документа за единицу хранения).
//
// Возвращаемое значение:
//	Структура - Текст запроса
//
Функция ТекстЗапросаТаблицаЦеныНоменклатуры()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка                         КАК СкидкаНаценка,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены        КАК ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура   КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ЦеныНоменклатурыСрезПоследних.Упаковка       КАК Упаковка,
	|	
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент, 1) КАК УпаковкаКоэффициент,
	|	
	|	ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Цена
	|		* ( ЕСТЬNULL(КурсыВалют.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1) ) 
	|		/ ( ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалют.Кратность, 1) )
	|	КАК ЧИСЛО(15, 2)) КАК Цена
	|	
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), 
	|	
	|			ВидЦены В (ВЫБРАТЬ РАЗЛИЧНЫЕ ВременнаяТаблицаСкидкиНаценки.ВидЦены ИЗ ВременнаяТаблицаСкидкиНаценки)
	|				И Номенклатура В (ВЫБРАТЬ ВременнаяТаблицаТовары.Номенклатура ИЗ ВременнаяТаблицаТовары)
	|	
	|	) КАК ЦеныНоменклатурыСрезПоследних
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаСкидкиНаценки КАК СкидкиНаценки
	|		ПО ЦеныНоменклатурыСрезПоследних.ВидЦены = СкидкиНаценки.ВидЦены
	|			И (СкидкиНаценки.СпособПредоставления = ЗНАЧЕНИЕ(Перечисление.СпособыПредоставленияСкидокНаценок.ВидЦены))
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
	|		ПО (КурсыВалют.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)";
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура("ТекстЗапроса, КоличествоТаблиц, НомерТаблицыРезультата, ИмяТаблицы", ТекстЗапроса, 1, 1, "ЦеныНоменклатуры");
	
КонецФункции // ТекстЗапросаТаблицаЦеныНоменклатуры()

////////////////////////////////////////////////////////////////////////////////
// Части запроса по условиям предоставления скидок.

// Функция формирует имя параметра по ссылке на условие предоставления.
//
// Возвращаемое значение:
//	Строка - ИмяПараметра
//
Функция ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления)
	
	Возврат СтрЗаменить("П"+СсылкаНаУсловиеПредоставления.УникальныйИдентификатор(), "-", "_");
	
КонецФункции // ПолучитьПараметрЗапросаИзСсылки()

// Функция формирует текст запроса для таблицы рассчитанных скидок за разовую продажу с условием по строке.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоСтроке(ПакетЗапросов, СсылкаНаУсловиеПредоставления)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	Товары.КлючСвязи             КАК КлючСвязи,
	|	
	|	ВЫБОР
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее) ТОГДА
	|						ВЫБОР
	|							КОГДА УсловияПредоставления.ЗначениеУсловияОграничения <> 0 ТОГДА
	|								ВЫРАЗИТЬ((ЕСТЬNULL(Товары.Сумма, 0)/УсловияПредоставления.ЗначениеУсловияОграничения - 0.5) КАК Число(10,0))
	|							ИНАЧЕ
	|								ВЫБОР
	|									КОГДА ЕСТЬNULL(Товары.Сумма, 0) > 0 ТОГДА
	|										1
	|									ИНАЧЕ
	|										0
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ
	|					ВЫБОР
	|						КОГДА ЕСТЬNULL(Товары.Сумма, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения ТОГДА
	|							1
	|						ИНАЧЕ
	|							0
	|					КОНЕЦ
	|				КОНЕЦ
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее) ТОГДА
	|						ВЫБОР
	|							КОГДА УсловияПредоставления.ЗначениеУсловияОграничения <> 0 ТОГДА
	|								ВЫРАЗИТЬ((ЕСТЬNULL(Товары.Количество, 0)/УсловияПредоставления.ЗначениеУсловияОграничения - 0.5) КАК Число(10,0))
	|							ИНАЧЕ
	|								ВЫБОР
	|									КОГДА ЕСТЬNULL(Товары.Количество, 0) > 0 ТОГДА
	|										1
	|									ИНАЧЕ
	|										0
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ
	|					ВЫБОР
	|						КОГДА ЕСТЬNULL(Товары.Количество, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения ТОГДА
	|							1
	|						ИНАЧЕ
	|							0
	|					КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КратностьВыполнения
	|	
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТоварыПоСегментам КАК Товары
	|		ПО УсловияПредоставления.Ссылка = &ИмяПараметра
	|	
	|ГДЕ
	|	ВЫБОР
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА ВЫБОР КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее) ТОГДА Товары.Сумма >= УсловияПредоставления.ЗначениеУсловияОграничения ИНАЧЕ Товары.Сумма <= УсловияПредоставления.ЗначениеУсловияОграничения КОНЕЦ
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|			ТОГДА ВЫБОР КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее) ТОГДА Товары.Количество >= УсловияПредоставления.ЗначениеУсловияОграничения ИНАЧЕ Товары.Количество <= УсловияПредоставления.ЗначениеУсловияОграничения КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И Товары.СегментНоменклатуры = УсловияПредоставления.СегментНоменклатурыОграничения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	КлючСвязи";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		1,
		1,
		"СкидкаЗаРазовуюПродажуСУсловиемПоСтроке" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоСтроке

// Функция формирует текст запроса для таблицы рассчитанных скидок за разовую продажу с условием по документу.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоДокументу(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.СегментНоменклатуры КАК СегментНоменклатуры,
	|	СУММА(Товары.Количество)   КАК Количество,
	|	СУММА(Товары.Сумма)        КАК Сумма
	|ПОМЕСТИТЬ ИтогиПоСегментам
	|ИЗ
	|	ВременнаяТаблицаТоварыПоСегментам КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.СегментНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1                           КАК КлючСвязи,
	|	
	|	ВЫБОР
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее) ТОГДА
	|						ВЫБОР
	|							КОГДА УсловияПредоставления.ЗначениеУсловияОграничения <> 0 ТОГДА
	|								ВЫРАЗИТЬ((ЕСТЬNULL(ИтогиПоСегментам.Сумма, 0)/УсловияПредоставления.ЗначениеУсловияОграничения - 0.5) КАК Число(10,0))
	|							ИНАЧЕ
	|								ВЫБОР
	|									КОГДА ЕСТЬNULL(ИтогиПоСегментам.Сумма, 0) > 0 ТОГДА
	|										1
	|									ИНАЧЕ
	|										0
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ
	|					ВЫБОР
	|						КОГДА ЕСТЬNULL(ИтогиПоСегментам.Сумма, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения ТОГДА
	|							1
	|						ИНАЧЕ
	|							0
	|					КОНЕЦ
	|				КОНЕЦ
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее) ТОГДА
	|						ВЫБОР
	|							КОГДА УсловияПредоставления.ЗначениеУсловияОграничения <> 0 ТОГДА
	|								ВЫРАЗИТЬ((ЕСТЬNULL(ИтогиПоСегментам.Количество, 0)/УсловияПредоставления.ЗначениеУсловияОграничения - 0.5) КАК Число(10,0))
	|							ИНАЧЕ
	|								ВЫБОР
	|									КОГДА ЕСТЬNULL(ИтогиПоСегментам.Количество, 0) > 0 ТОГДА
	|										1
	|									ИНАЧЕ
	|										0
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ
	|					ВЫБОР
	|						КОГДА ЕСТЬNULL(ИтогиПоСегментам.Количество, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения ТОГДА
	|							1
	|						ИНАЧЕ
	|							0
	|					КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КратностьВыполнения
	|	
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИтогиПоСегментам КАК ИтогиПоСегментам
	|		ПО УсловияПредоставления.Ссылка = &ИмяПараметра
	|	
	|ГДЕ
	|	ВЫБОР
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА ВЫБОР КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее)ТОГДА ИтогиПоСегментам.Сумма >= УсловияПредоставления.ЗначениеУсловияОграничения ИНАЧЕ ИтогиПоСегментам.Сумма <= УсловияПредоставления.ЗначениеУсловияОграничения КОНЕЦ
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|			ТОГДА ВЫБОР КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее)ТОГДА ИтогиПоСегментам.Количество >= УсловияПредоставления.ЗначениеУсловияОграничения ИНАЧЕ ИтогиПоСегментам.Количество <= УсловияПредоставления.ЗначениеУсловияОграничения КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И ИтогиПоСегментам.СегментНоменклатуры = УсловияПредоставления.СегментНоменклатурыОграничения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИтогиПоСегментам";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		3,
		2,
		"СкидкаЗаРазовуюПродажуСУсловиемПоДокументу" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоДокументу

// Функция формирует текст запроса для таблицы рассчитанных скидок за первую продажу партнеру.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаПервуюПродажуПартнеру(ПакетЗапросов, СсылкаНаУсловиеПредоставления)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот   КАК КоличествоОборот
	|	
	|ПОМЕСТИТЬ ВремТаблица
	|	
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	|			,
	|			&ТекущаяДата,
	|			Авто,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|				ИЗ
	|					РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|				ГДЕ
	|					АналитикаУчетаПоПартнерам.Партнер = &Партнер)) КАК ВыручкаИСебестоимостьПродажОбороты
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	-ВыручкаИСебестоимостьПродаж.Количество   КАК КоличествоОборот
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
	|ГДЕ
	|	ВыручкаИСебестоимостьПродаж.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(Таблица.КоличествоОборот)   КАК КоличествоОборот
	|	
	|ПОМЕСТИТЬ Продажи
	|	
	|ИЗ
	|	ВремТаблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1                           КАК КлючСвязи,
	|	-1                           КАК КратностьВыполнения
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Продажи КАК Продажи
	|		ПО Истина
	|	
	|ГДЕ
	|	УсловияПредоставления.Ссылка = &ИмяПараметра
	|	И ЕСТЬNULL(Продажи.КоличествоОборот, 0) <= 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Продажи
	|";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		5,
		4,
		"СкидкаЗаПервуюПродажуПартнеру" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаПозиционнаяСкидкаЗаПробнуюПродажу

// Функция формирует текст запроса для таблицы рассчитанных скидок за пробную продажу.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаПробнуюПродажу(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Номенклатура           КАК Номенклатура,
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Характеристика         КАК Характеристика,
	|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот КАК КоличествоОборот
	|	
	|ПОМЕСТИТЬ ВремТаблица
	|	
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	|			,
	|			&ТекущаяДата,
	|			Авто,
	|			АналитикаУчетаНоменклатуры В
	|					(ВЫБРАТЬ
	|						АналитикаУчетаНоменклатуры.КлючАналитики
	|					ИЗ
	|						РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|					ГДЕ
	|						(АналитикаУчетаНоменклатуры.Номенклатура, АналитикаУчетаНоменклатуры.Характеристика) В
	|							(ВЫБРАТЬ
	|								ВременнаяТаблицаТоварыПоСегментам.Номенклатура КАК Номенклатура,
	|								ВременнаяТаблицаТоварыПоСегментам.Характеристика КАК Характеристика
	|							ИЗ
	|								ВременнаяТаблицаТоварыПоСегментам))
	|				И АналитикаУчетаПоПартнерам В
	|					(ВЫБРАТЬ
	|						АналитикаУчетаПоПартнерам.КлючАналитики
	|					ИЗ
	|						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|					ГДЕ
	|						АналитикаУчетаПоПартнерам.Партнер = &Партнер)) КАК ВыручкаИСебестоимостьПродажОбороты
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрСведенийАналитикаУчетаНоменклатуры
	|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры = РегистрСведенийАналитикаУчетаНоменклатуры.КлючАналитики
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	-ВыручкаИСебестоимостьПродаж.Количество     КАК КоличествоОборот
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрСведенийАналитикаУчетаНоменклатуры
	|		ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры = РегистрСведенийАналитикаУчетаНоменклатуры.КлючАналитики
	|	
	|ГДЕ
	|	ВыручкаИСебестоимостьПродаж.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Номенклатура              КАК Номенклатура,
	|	Таблица.Характеристика            КАК Характеристика,
	|	СУММА(Таблица.КоличествоОборот)   КАК КоличествоОборот
	|	
	|ПОМЕСТИТЬ Продажи
	|	
	|ИЗ
	|	ВремТаблица КАК Таблица
	|СГРУППИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	Товары.КлючСвязи             КАК КлючСвязи,
	|	-1                           КАК КратностьВыполнения
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТоварыПоСегментам КАК Товары
	|			
	|			ЛЕВОЕ СОЕДИНЕНИЕ Продажи КАК Продажи
	|			ПО Товары.Номенклатура = Продажи.Номенклатура
	|				И Товары.Характеристика = Продажи.Характеристика
	|		ПО Истина
	|ГДЕ
	|	УсловияПредоставления.Ссылка = &ИмяПараметра
	|	И ВЫБОР
	|		КОГДА УсловияПредоставления.СегментНоменклатурыОграничения = ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ Товары.СегментНоменклатуры = УсловияПредоставления.СегментНоменклатурыОграничения
	|	КОНЕЦ
	|	И ЕСТЬNULL(Продажи.КоличествоОборот, 0) <= 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Продажи
	|";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		5,
		4,
		"СкидкаЗаПробнуюПродажу" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаПозиционнаяСкидкаЗаПробнуюПродажу

// Функция формирует текст запроса для таблицы рассчитанных скидок за соблюдение графика оплаты.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаГрафикОплаты(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1                           КАК КлючСвязи,
	|	-1                           КАК КратностьВыполнения
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|ГДЕ
	|	УсловияПредоставления.Ссылка = &ИмяПараметра
	|	И УсловияПредоставления.ГрафикОплаты = &ГрафикОплаты";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		1,
		1,
		"СкидкаЗаГрафикОплаты" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаПозиционнаяСкидкаЗаГрафикОплаты

// Функция формирует текст запроса для таблицы рассчитанных скидок за форму оплаты.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаФормуОплаты(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1                           КАК КлючСвязи,
	|	-1                           КАК КратностьВыполнения
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|ГДЕ
	|	УсловияПредоставления.Ссылка = &ИмяПараметра
	|	И УсловияПредоставления.ФормаОплаты = &ФормаОплаты";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		1,
		1,
		"СкидкаЗаФормуОплаты" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаПозиционнаяСкидкаЗаГрафикОплаты

// Функция формирует текст запроса для проверки, что карта лояльности не зарегистирована.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаКартаЛояльностиНеЗарегистрирована(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1                           КАК КлючСвязи,
	|	-1                           КАК КратностьВыполнения
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|ГДЕ
	|	УсловияПредоставления.Ссылка = &ИмяПараметра
	|	И (НЕ УсловияПредоставления.ВидКартыЛояльности В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.Владелец
	|				ИЗ
	|					Справочник.КартыЛояльности КАК Т
	|				ГДЕ
	|					Т.Партнер = &Партнер
	|					И Т.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)))";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		1,
		1,
		"ТекстЗапросаСкидкаКартаЛояльностиНеЗарегистрирована" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаСкидкаКартаЛояльностиНеЗарегистрирована

// Функция формирует текст запроса для проверки, что партнер является владельцем карты лояльности.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаНаличиеКартыЛояльности(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1                           КАК КлючСвязи,
	|	-1                           КАК КратностьВыполнения
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|ГДЕ
	|	УсловияПредоставления.Ссылка = &ИмяПараметра
	|	И (УсловияПредоставления.ВидКартыЛояльности В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Т.Владелец
	|				ИЗ
	|					Справочник.КартыЛояльности КАК Т
	|				ГДЕ
	|					Т.Партнер = &Партнер
	|					И Т.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)))";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		1,
		1,
		"ТекстЗапросаСкидкаЗаНаличиеКартыЛояльности" + ИмяПараметра
	);
	
КонецФункции

// Функция формирует текст запроса для таблицы рассчитанных скидок с ограничением по группе пользователей.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаОграничениеПоГруппеПользователей(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1                           КАК КлючСвязи,
	|	-1                           КАК КратностьВыполнения
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|		ПО УсловияПредоставления.ГруппаПользователей = ГруппыПользователейСостав.Ссылка
	|	
	|ГДЕ
	|	УсловияПредоставления.Ссылка = &ИмяПараметра
	|	И ГруппыПользователейСостав.Пользователь = &Пользователь";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		1,
		1,
		"СкидкаОграничениеПоГруппеПользователей" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаСкидкаОграничениеПоГруппеПользователей

// Функция формирует текст запроса для таблицы рассчитанных скидок за время продажи.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаВремяПродажи(ПакетЗапросов, СсылкаНаУсловиеПредоставления)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка КАК Ссылка,
	|	-1                           КАК КлючСвязи,
	|	-1                           КАК КратностьВыполнения
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УсловияПредоставленияСкидокНаценок.ВремяДействия КАК ВремяДействия
	|			ПО ВремяДействия.Ссылка = УсловияПредоставления.Ссылка
	|ГДЕ
	|	УсловияПредоставления.Ссылка = &ИмяПараметра
	|	И ВремяДействия.ДеньНедели = &ДеньНедели
	|	И (ВремяДействия.ВремяНачала <= &ТекущееВремя И ВремяДействия.ВремяОкончания >= &ТекущееВремя)";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		1,
		1,
		"СкидкаЗаВремяПродажи" + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаПозиционнаяСкидкаЗаВремяПродажи

// Функция формирует текст запроса для таблицы рассчитанных скидок за накопленный объем продаж по партнеру.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаНакопленныйОбъемПродажПоПартнеруЗаПериод(ПакетЗапросов, СсылкаНаУсловиеПредоставления, ДатаНачала, ДатаОкончания)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Номенклатура             КАК Номенклатура,
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Характеристика           КАК Характеристика,
	|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот   КАК Количество,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот
	|	* ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
	|	 / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1)) КАК Сумма
	|	
	|ПОМЕСТИТЬ ВремТаблица
	|	
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Авто,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					АналитикаУчетаПоПартнерам.КлючАналитики
	|				ИЗ
	|					РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|				ГДЕ
	|					АналитикаУчетаПоПартнерам.Партнер = &Партнер И АналитикаУчетаПоПартнерам.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель))) КАК ВыручкаИСебестоимостьПродажОбороты
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрСведенийАналитикаУчетаНоменклатуры
	|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры = РегистрСведенийАналитикаУчетаНоменклатуры.КлючАналитики
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = &ВалютаУправленческогоУчета)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	-ВыручкаИСебестоимостьПродаж.Количество     КАК Количество,
	|	-ВыручкаИСебестоимостьПродаж.СуммаВыручки
	|	* ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
	|	 / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1)) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрСведенийАналитикаУчетаНоменклатуры
	|		ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры = РегистрСведенийАналитикаУчетаНоменклатуры.КлючАналитики
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = &ВалютаУправленческогоУчета)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|	
	|ГДЕ
	|	ВыручкаИСебестоимостьПродаж.Регистратор = &Регистратор
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ПроданныеТовары.Номенклатура   КАК Номенклатура,
	|	ПроданныеТовары.Характеристика КАК Характеристика,
	|	ПроданныеТовары.Количество     КАК Количество,
	|	ПроданныеТовары.Сумма
	|	* ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
	|	 / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1)) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ПроданныеТовары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = ПроданныеТовары.Ссылка.Валюта)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|	
	|ГДЕ
	|	ПроданныеТовары.Ссылка В (
	|		ВЫБРАТЬ
	|			Т.Ссылка
	|		ИЗ
	|			Документ.ЧекККМ КАК Т
	|		ГДЕ
	|			Т.Дата МЕЖДУ &ДатаНачалаЧекККМ И &ДатаОкончанияЧекККМ
	|			И Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|			И Т.КассоваяСмена.СтатусКассовойСмены <> ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.ЗакрытаЧекиЗаархивированы)
	|			И Т.Партнер = &Партнер
	|			И Т.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель)
	|)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ПроданныеТовары.Номенклатура   КАК Номенклатура,
	|	ПроданныеТовары.Характеристика КАК Характеристика,
	|	-ПроданныеТовары.Количество     КАК Количество,
	|	-ПроданныеТовары.Сумма
	|	* ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
	|	 / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1)) КАК Сумма
	|ИЗ
	|	Документ.ЧекККМВозврат.Товары КАК ПроданныеТовары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = ПроданныеТовары.Ссылка.Валюта)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|	
	|ГДЕ
	|	ПроданныеТовары.Ссылка В (
	|		ВЫБРАТЬ
	|			Т.Ссылка
	|		ИЗ
	|			Документ.ЧекККМВозврат КАК Т
	|		ГДЕ
	|			Т.Дата МЕЖДУ &ДатаНачалаЧекККМ И &ДатаОкончанияЧекККМ
	|			И Т.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|			И Т.КассоваяСмена.СтатусКассовойСмены <> ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.ЗакрытаЧекиЗаархивированы)
	|			И Т.Партнер = &Партнер
	|			И Т.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель)
	|)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураСегмента.Сегмент КАК СегментНоменклатуры,
	|	СУММА(Таблица.Количество)    КАК Количество,
	|	СУММА(Таблица.Сумма)         КАК Сумма
	|	
	|ПОМЕСТИТЬ НакопленныйОбъемПродажПоПартнеруЗаПериодПоСегментам
	|
	|ИЗ
	|	ВремТаблица КАК Таблица
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|		ПО Таблица.Номенклатура  = НоменклатураСегмента.Номенклатура
	|		И Таблица.Характеристика = НоменклатураСегмента.Характеристика
	|	
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураСегмента.Сегмент
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка) КАК СегментНоменклатуры,
	|	СУММА(Таблица.Количество)    КАК Количество,
	|	СУММА(Таблица.Сумма)         КАК Сумма
	|	
	|ИЗ
	|	ВремТаблица КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка         КАК Ссылка,
	|	ТоварыПоСегментамДокумента.КлючСвязи КАК КлючСвязи,
	|	
	|	ВЫБОР
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее) ТОГДА
	|						ВЫБОР
	|							КОГДА УсловияПредоставления.ЗначениеУсловияОграничения <> 0 ТОГДА
	|								ВЫРАЗИТЬ((ЕСТЬNULL(Товары.Сумма, 0)/УсловияПредоставления.ЗначениеУсловияОграничения - 0.5) КАК Число(10,0))
	|							ИНАЧЕ
	|								ВЫБОР
	|									КОГДА ЕСТЬNULL(Товары.Сумма, 0) > 0 ТОГДА
	|										1
	|									ИНАЧЕ
	|										0
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ
	|					ВЫБОР
	|						КОГДА ЕСТЬNULL(Товары.Сумма, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения ТОГДА
	|							1
	|						ИНАЧЕ
	|							0
	|					КОНЕЦ
	|				КОНЕЦ
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее) ТОГДА
	|						ВЫБОР
	|							КОГДА УсловияПредоставления.ЗначениеУсловияОграничения <> 0 ТОГДА
	|								ВЫРАЗИТЬ((ЕСТЬNULL(Товары.Количество, 0)/УсловияПредоставления.ЗначениеУсловияОграничения - 0.5) КАК Число(10,0))
	|							ИНАЧЕ
	|								ВЫБОР
	|									КОГДА ЕСТЬNULL(Товары.Количество, 0) > 0 ТОГДА
	|										1
	|									ИНАЧЕ
	|										0
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ
	|					ВЫБОР
	|						КОГДА ЕСТЬNULL(Товары.Количество, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения ТОГДА
	|							1
	|						ИНАЧЕ
	|							0
	|					КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КратностьВыполнения
	|	
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТоварыПоСегментам КАК ТоварыПоСегментамДокумента
	|		ПО УсловияПредоставления.Ссылка = &ИмяПараметра
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НакопленныйОбъемПродажПоПартнеруЗаПериодПоСегментам КАК Товары
	|		ПО УсловияПредоставления.Ссылка = &ИмяПараметра
	|	
	|ГДЕ
	|	ВЫБОР
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА ВЫБОР
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее)
	|						ТОГДА ЕСТЬNULL(Товары.Сумма, 0) >= УсловияПредоставления.ЗначениеУсловияОграничения
	|					ИНАЧЕ ЕСТЬNULL(Товары.Сумма, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения
	|				КОНЕЦ
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|			ТОГДА ВЫБОР
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее)
	|						ТОГДА ЕСТЬNULL(Товары.Количество, 0) >= УсловияПредоставления.ЗначениеУсловияОграничения
	|					ИНАЧЕ ЕСТЬNULL(Товары.Количество, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И Товары.СегментНоменклатуры = УсловияПредоставления.СегментНоменклатурыОграничения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НакопленныйОбъемПродажПоПартнеруЗаПериодПоСегментам
	|";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ДатаНачала <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНачалаЧекККМ", "ДатаВремя("+Формат(Год(ДатаНачала   ),"ЧН=0; ЧГ=0")+","+Месяц(ДатаНачала   )+","+День(ДатаНачала   )+","+Час(ДатаНачала)+","+Минута(ДатаНачала)+","+Секунда(ДатаНачала)+")");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНачала",       "ДатаВремя("+Формат(Год(ДатаНачала   ),"ЧН=0; ЧГ=0")+","+Месяц(ДатаНачала   )+","+День(ДатаНачала   )+","+Час(ДатаНачала)+","+Минута(ДатаНачала)+","+Секунда(ДатаНачала)+")");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНачалаЧекККМ", "ДатаВремя(1,1,1)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНачала", "");
	КонецЕсли;
	
	Если ДатаОкончания <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОкончанияЧекККМ", "ДатаВремя("+Формат(Год(ДатаОкончания),"ЧН=0; ЧГ=0")+","+Месяц(ДатаОкончания)+","+День(ДатаОкончания)+","+Час(ДатаОкончания)+","+Минута(ДатаОкончания)+","+Секунда(ДатаОкончания)+")");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОкончания",       "ДатаВремя("+Формат(Год(ДатаОкончания),"ЧН=0; ЧГ=0")+","+Месяц(ДатаОкончания)+","+День(ДатаОкончания)+","+Час(ДатаОкончания)+","+Минута(ДатаОкончания)+","+Секунда(ДатаОкончания)+")");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОкончанияЧекККМ", "ДатаВремя("+Формат(Год(ТекущаяДатаСеанса()),"ЧН=0; ЧГ=0")+","+Месяц(ТекущаяДатаСеанса())+","+День(ТекущаяДатаСеанса())+","+23+","+59+","+59+")");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОкончания",       "");
	КонецЕсли;
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		5,
		4,
		"СкидкаЗаНакопленныйОбъемПродажПоПартнеруЗаПериодСУсловиемПоСтрокеЗа_"+Формат(ДатаНачала,"ДФ=ddMMyyyy")+"_"+Формат(ДатаОкончания,"ДФ=ddMMyyyy") + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаСкидкаЗаНакопленныйОбъемПродажПоПартнеруЗаПериод

// Функция формирует текст запроса для таблицы рассчитанных скидок за накопленный объем продаж по торговому соглашению.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаСкидкаЗаНакопленныйОбъемПродажПоТорговомуСоглашениюЗаПериод(ПакетЗапросов, СсылкаНаУсловиеПредоставления, ДатаНачала, ДатаОкончания)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Номенклатура             КАК Номенклатура,
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Характеристика           КАК Характеристика,
	|	ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот   КАК Количество,
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот
	|	* ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
	|	 / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1)) КАК Сумма
	|	
	|ПОМЕСТИТЬ ВремТаблица
	|	
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Авто,
	|			ЗаказКлиента.Соглашение = &Соглашение) КАК ВыручкаИСебестоимостьПродажОбороты
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрСведенийАналитикаУчетаНоменклатуры
	|		ПО ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры = РегистрСведенийАналитикаУчетаНоменклатуры.КлючАналитики
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = &ВалютаУправленческогоУчета)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
	|	РегистрСведенийАналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	-ВыручкаИСебестоимостьПродаж.Количество     КАК Количество,
	|	-ВыручкаИСебестоимостьПродаж.СуммаВыручки
	|	* ЕСТЬNULL(КурсыВалютПредоставления.Курс, 1) * ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
	|	 / (ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * ЕСТЬNULL(КурсыВалютПредоставления.Кратность, 1)) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК РегистрСведенийАналитикаУчетаНоменклатуры
	|		ПО ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры = РегистрСведенийАналитикаУчетаНоменклатуры.КлючАналитики
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютПредоставления
	|		ПО (КурсыВалютПредоставления.Валюта = &ВалютаУправленческогоУчета)
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютДокумента
	|		ПО (КурсыВалютДокумента.Валюта = &ВалютаДокумента)
	|	
	|ГДЕ
	|	ВыручкаИСебестоимостьПродаж.Регистратор = &Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураСегмента.Сегмент КАК СегментНоменклатуры,
	|	СУММА(Таблица.Количество)    КАК Количество,
	|	СУММА(Таблица.Сумма)         КАК Сумма
	|	
	|ПОМЕСТИТЬ НакопленныйОбъемПродажПоСоглашениюЗаПериодПоСегментам
	|
	|ИЗ
	|	ВремТаблица КАК Таблица
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|		ПО Таблица.Номенклатура  = НоменклатураСегмента.Номенклатура
	|		И Таблица.Характеристика = НоменклатураСегмента.Характеристика
	|	
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураСегмента.Сегмент
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка) КАК СегментНоменклатуры,
	|	СУММА(Таблица.Количество)    КАК Количество,
	|	СУММА(Таблица.Сумма)         КАК Сумма
	|	
	|ИЗ
	|	ВремТаблица КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УсловияПредоставления.Ссылка         КАК Ссылка,
	|	ТоварыПоСегментамДокумента.КлючСвязи КАК КлючСвязи,
	|	
	|	ВЫБОР
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее) ТОГДА
	|						ВЫБОР
	|							КОГДА УсловияПредоставления.ЗначениеУсловияОграничения <> 0 ТОГДА
	|								ВЫРАЗИТЬ((ЕСТЬNULL(Товары.Сумма, 0)/УсловияПредоставления.ЗначениеУсловияОграничения - 0.5) КАК Число(10,0))
	|							ИНАЧЕ
	|								ВЫБОР
	|									КОГДА ЕСТЬNULL(Товары.Сумма, 0) > 0 ТОГДА
	|										1
	|									ИНАЧЕ
	|										0
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ
	|					ВЫБОР
	|						КОГДА ЕСТЬNULL(Товары.Сумма, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения ТОГДА
	|							1
	|						ИНАЧЕ
	|							0
	|					КОНЕЦ
	|				КОНЕЦ
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее) ТОГДА
	|						ВЫБОР
	|							КОГДА УсловияПредоставления.ЗначениеУсловияОграничения <> 0 ТОГДА
	|								ВЫРАЗИТЬ((ЕСТЬNULL(Товары.Количество, 0)/УсловияПредоставления.ЗначениеУсловияОграничения - 0.5) КАК Число(10,0))
	|							ИНАЧЕ
	|								ВЫБОР
	|									КОГДА ЕСТЬNULL(Товары.Количество, 0) > 0 ТОГДА
	|										1
	|									ИНАЧЕ
	|										0
	|								КОНЕЦ
	|						КОНЕЦ
	|				ИНАЧЕ
	|					ВЫБОР
	|						КОГДА ЕСТЬNULL(Товары.Количество, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения ТОГДА
	|							1
	|						ИНАЧЕ
	|							0
	|					КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КратностьВыполнения
	|	
	|ИЗ
	|	УсловияПредоставления КАК УсловияПредоставления
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТоварыПоСегментам КАК ТоварыПоСегментамДокумента
	|		ПО УсловияПредоставления.Ссылка = &ИмяПараметра
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НакопленныйОбъемПродажПоСоглашениюЗаПериодПоСегментам КАК Товары
	|		ПО УсловияПредоставления.Ссылка = &ИмяПараметра
	|	
	|ГДЕ
	|	ВЫБОР
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Сумма)
	|			ТОГДА ВЫБОР
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее)
	|						ТОГДА ЕСТЬNULL(Товары.Сумма, 0) >= УсловияПредоставления.ЗначениеУсловияОграничения
	|					ИНАЧЕ ЕСТЬNULL(Товары.Сумма, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения
	|				КОНЕЦ
	|		КОГДА УсловияПредоставления.КритерийОграниченияПримененияЗаОбъемПродаж = ЗНАЧЕНИЕ(Перечисление.КритерииОграниченияПримененияСкидкиНаценкиЗаОбъемПродаж.Количество)
	|			ТОГДА ВЫБОР
	|					КОГДА УсловияПредоставления.ТипСравнения = ЗНАЧЕНИЕ(Перечисление.ТипыСравненияЗначенийСкидокНаценок.НеМенее)
	|						ТОГДА ЕСТЬNULL(Товары.Количество, 0) >= УсловияПредоставления.ЗначениеУсловияОграничения
	|					ИНАЧЕ ЕСТЬNULL(Товары.Количество, 0) <= УсловияПредоставления.ЗначениеУсловияОграничения
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И Товары.СегментНоменклатуры = УсловияПредоставления.СегментНоменклатурыОграничения
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	КлючСвязи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НакопленныйОбъемПродажПоСоглашениюЗаПериодПоСегментам
	|";
	
	ИмяПараметра = ПолучитьПараметрЗапросаИзСсылки(СсылкаНаУсловиеПредоставления);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПараметра", ИмяПараметра);
	ПакетЗапросов.Запрос.УстановитьПараметр(ИмяПараметра, СсылкаНаУсловиеПредоставления);
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если ДатаНачала <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНачала",    "ДатаВремя("+Формат(Год(ДатаНачала   ),"ЧН=0; ЧГ=0")+","+Месяц(ДатаНачала   )+","+День(ДатаНачала   )+","+Час(ДатаНачала)+","+Минута(ДатаНачала)+","+Секунда(ДатаНачала)+")");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаНачала", "");
	КонецЕсли;
	
	Если ДатаОкончания <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОкончания", "ДатаВремя("+Формат(Год(ДатаОкончания),"ЧН=0; ЧГ=0")+","+Месяц(ДатаОкончания)+","+День(ДатаОкончания)+","+Час(ДатаОкончания)+","+Минута(ДатаОкончания)+","+Секунда(ДатаОкончания)+")");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаОкончания", "");
	КонецЕсли;
	
	Возврат Новый Структура(
		"ТекстЗапроса,
		|КоличествоТаблиц,
		|НомерТаблицыРезультата,
		|ИмяТаблицы",
		ТекстЗапроса,
		5,
		4,
		"СкидкаЗаНакопленныйОбъемПродажПоСоглашениюЗаПериодСУсловиемПоСтрокеЗа_" + Формат(ДатаНачала,"ДФ=ddMMyyyy")+"_"+Формат(ДатаОкончания,"ДФ=ddMMyyyy") + ИмяПараметра
	);
	
КонецФункции // ТекстЗапросаСкидкаЗаНакопленныйОбъемПродажПоТорговомуСоглашениюЗаПериод

////////////////////////////////////////////////////////////////////////////////
// Функции пакета запросов.

// Функция создает пакет запросов.
//
// Возвращаемое значение:
//	Структура - пакет запросов.
//
Функция ПакетЗапросовСоздать()
	
	ПакетЗапросов = Новый Структура;
	ПакетЗапросов.Вставить("ОбщееКоличествоТаблиц", 0);
	ПакетЗапросов.Вставить("СтруктураИмяЗапросаИНомерТаблицыРезультата", Новый Структура);
	ПакетЗапросов.Вставить("Запрос", Новый Запрос);
	ПакетЗапросов.Вставить("РезультатЗапроса", Неопределено);
	ПакетЗапросов.Вставить("МассивИменЗапросов", Новый Массив);
	
	Возврат ПакетЗапросов;
	
КонецФункции // ПакетЗапросовСоздать()

// ОбъединитьТаблицыДанныхПодчиненныхСтрок добавляет запрос в пакет запросов.
//
// Возвращаемое значение:
//	Нет
//
Процедура ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ПакетЗапросов, Добавлять = Ложь)
	
	// Проверка на дубли запросов.
	Если ПакетЗапросов.МассивИменЗапросов.Найти(ПараметрыЗапроса.ИмяТаблицы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПакетЗапросов.ОбщееКоличествоТаблиц = ПакетЗапросов.ОбщееКоличествоТаблиц + ПараметрыЗапроса.КоличествоТаблиц;
	НомерТаблицы = ПакетЗапросов.ОбщееКоличествоТаблиц - ПараметрыЗапроса.КоличествоТаблиц + ПараметрыЗапроса.НомерТаблицыРезультата;
	ПакетЗапросов.Запрос.Текст = ПакетЗапросов.Запрос.Текст +
	"// Номер таблицы результата: "+НомерТаблицы + "
	|";
	ПакетЗапросов.Запрос.Текст = ПакетЗапросов.Запрос.Текст + ПараметрыЗапроса.ТекстЗапроса;
	
	Если Добавлять Тогда
		
		ПакетЗапросов.СтруктураИмяЗапросаИНомерТаблицыРезультата.Вставить(ПараметрыЗапроса.ИмяТаблицы, НомерТаблицы);
		
	КонецЕсли;
	
	ПакетЗапросов.МассивИменЗапросов.Добавить(ПараметрыЗапроса.ИмяТаблицы);
	
КонецПроцедуры // ПакетЗапросовВставитьЗапросВПакет()

// Функция выполняет пакет запросов.
//
// Возвращаемое значение:
//	Булево - Истина, если запрос выполнен успешно.
//
Функция ПакетЗапросовВыполнить(ПакетЗапросов)
	
	Если ЗначениеЗаполнено(ПакетЗапросов.Запрос.Текст) Тогда
		ПакетЗапросов.РезультатЗапроса = ПакетЗапросов.Запрос.ВыполнитьПакет();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПакетЗапросовВыполнить()

// Функция получает результат запроса из пакета запросов по имени запроса.
//
// Возвращаемое значение:
//	РезультатЗапроса - Результат запроса входящего в пакет.
//
Функция ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы(ИмяЗапроса, ПакетЗапросов)
	
	Возврат ПакетЗапросов.РезультатЗапроса[ПакетЗапросов.СтруктураИмяЗапросаИНомерТаблицыРезультата[ИмяЗапроса] - 1];
	
КонецФункции // ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы()

// Функция объединяет все результаты запросов пакета в одну таблицу.
//
// Возвращаемое значение:
//	РезультатЗапроса - Результат запроса входящего в пакет.
//
Функция ПакетЗапросовОбъединитьРезультаты(ПакетЗапросов)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Ссылка",              Новый ОписаниеТипов("СправочникСсылка.УсловияПредоставленияСкидокНаценок"));
	ТЗ.Колонки.Добавить("КлючСвязи",           Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("КратностьВыполнения", Новый ОписаниеТипов("Число"));
	
	Для Каждого КлючИЗначение Из ПакетЗапросов.СтруктураИмяЗапросаИНомерТаблицыРезультата Цикл
		
		Выборка = ПакетЗапросов.РезультатЗапроса[КлючИЗначение.Значение-1].Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТЗ.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции // ПакетЗапросовОбъединитьРезультаты()

////////////////////////////////////////////////////////////////////////////////
// Функции расчета скидок (наценок) по дереву скидок (наценок).

Процедура ОбработатьДеревоСкидок(ДеревоСкидок)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ОбработатьДеревоСкидок(СтрокаДерева);
			
		Иначе
			
			КоличествоСтрок = СтрокаДерева.Строки.Количество();
			Если КоличествоСтрок > 1 Тогда
				ВызватьИсключение НСтр("ru = 'Ошибка генерации дерева скидок'");
			КонецЕсли;
			Если КоличествоСтрок > 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаДерева.Строки[0]);
				СтрокаДерева.Строки.Удалить(СтрокаДерева.Строки[0]);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция получает строку с примененной скидкой для кода строки и группы скидок.
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений - строка с примененной скидкой.
//
Функция ПолучитьСуммуПримененнойСкидки(СтрокаДерева, КлючСвязи, Параметры)
	
	ВозвращаемоеЗначение = Неопределено;
	
	Отбор = Новый Структура(
		"ГруппаСкидокНаценок,
		|КлючСвязи",
		СтрокаДерева.Родитель.СкидкаНаценка,
		КлючСвязи
	);
	
	МассивРезультатПоиска = Параметры.ПримененныеСкидкиУмножение.НайтиСтроки(Отбор);
	
	Если МассивРезультатПоиска.Количество() = 0 Тогда
		
		НоваяСтрока                     = Параметры.ПримененныеСкидкиУмножение.Добавить();
		НоваяСтрока.ГруппаСкидокНаценок = СтрокаДерева.Родитель.СкидкаНаценка;
		НоваяСтрока.КлючСвязи           = КлючСвязи;
		НоваяСтрока.Сумма               = 0;
		
		ВозвращаемоеЗначение = НоваяСтрока;
		
	Иначе
		
		ВозвращаемоеЗначение = МассивРезультатПоиска[0];
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции // ПолучитьСуммуПримененнойСкидки()

// Функция получает цену номенклатуры по виду цен заданному в параметрах скидки.
//
// Возвращаемое значение:
//	Число - цена номенклатуры.
//
Функция ПолучитьЦенуНоменклатурыПоВидуЦен(ТоварСегмента, Параметры, ПараметрыСкидки)
	
	Цена = 0;
	
	Отбор = Новый Структура(
		"Номенклатура,
		|Характеристика,
		|ВидЦены",
		ТоварСегмента.Номенклатура,
		ТоварСегмента.Характеристика,
		ПараметрыСкидки.ВидЦены
		);
	
	МассивСтрокЦены = Параметры.ЦеныНоменклатуры.НайтиСтроки(Отбор);
	Для Каждого СтрокаЦена Из МассивСтрокЦены Цикл
		
		Если СтрокаЦена.Упаковка = ТоварСегмента.Упаковка Тогда
			Цена = СтрокаЦена.Цена;
		Иначе
			
			// Приведем цену к цене за упаковку сегмента.
			// Цена не округляется для повышения точности...
			Если СтрокаЦена.Упаковка = Справочники.УпаковкиНоменклатуры.ПустаяСсылка() Тогда
				Цена = СтрокаЦена.Цена * (ТоварСегмента.Количество / ТоварСегмента.КоличествоУпаковок);
			Иначе
				Цена = (СтрокаЦена.Цена / СтрокаЦена.УпаковкаКоэффициент) * (ТоварСегмента.Количество / ТоварСегмента.КоличествоУпаковок);
			КонецЕсли;
			
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат Цена;
	
КонецФункции // ПолучитьЦенуНоменклатурыПоВидуЦен()

// Процедура выполняет расчет скидки по группе совместного применения: максимум.
// Применяется в последнюю очередь.
//
// Возвращаемое значение:
//	ТаблицаЗначений - возвращает таблицу скидок для верхнего уровня дерева.
//
Функция РассчитатьСкидкиПоГруппеСовместногоПримененияМаксимумВерхнийУровень(СтрокаДерева, Параметры)
	
	ТаблицаДанных = ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева);
	ТаблицаДанных.Сортировать("КлючСвязи, Сумма Убыв, РеквизитДопУпорядочивания");
	
	ТЗ = ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры);
	
	КлючСвязи = Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.КлючСвязи <> КлючСвязи Тогда
			
			НоваяСтрока = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Действует = Истина;
			
			КлючСвязи = СтрокаТаблицы.КлючСвязи;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции // РассчитатьСкидкиПоГруппеСовместногоПримененияМаксимум()

// Процедура выполняет расчет скидки по группе совместного применения: максимум.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиПоГруппеСовместногоПримененияМаксимум(СтрокаДерева, Параметры)
	
	ТаблицаДанных = ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева);
	ТаблицаДанных.Сортировать("КлючСвязи, Сумма Убыв, РеквизитДопУпорядочивания");
	
	ТЗ = ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры);
	
	КлючСвязи = Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.КлючСвязи <> КлючСвязи Тогда
			
			НоваяСтрока = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Действует = Истина;
			
			КлючСвязи = СтрокаТаблицы.КлючСвязи;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДерева.ТаблицаДанных = ТЗ;
	
КонецПроцедуры // РассчитатьСкидкиПоГруппеСовместногоПримененияМаксимум()

// Процедура выполняет расчет скидки по группе совместного применения: минимум.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиПоГруппеСовместногоПримененияМинимум(СтрокаДерева, Параметры)
	
	ТаблицаДанных = ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева);
	ТаблицаДанных.Сортировать("КлючСвязи, Сумма Возр, РеквизитДопУпорядочивания");
	
	ТЗ = ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры);
	
	КлючСвязи = Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.КлючСвязи <> КлючСвязи Тогда
			
			НоваяСтрока = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Действует = Истина;
			
			КлючСвязи = СтрокаТаблицы.КлючСвязи;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДерева.ТаблицаДанных = ТЗ;
	
КонецПроцедуры // РассчитатьСкидкиПоГруппеСовместногоПримененияМинимум()

// Процедура выполняет расчет скидки по группе совместного применения: сложение.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиПоГруппеСовместногоПримененияСложение(СтрокаДерева, Параметры)
	
	ТаблицаДанных = ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева);
	ТаблицаДанных.Сортировать("КлючСвязи");
	
	ТЗ = ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры);
	
	КлючСвязи = Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.КлючСвязи <> КлючСвязи Тогда
			
			НоваяСтрокаТЗ = ТЗ.Добавить();
			НоваяСтрокаТЗ.КлючСвязи = СтрокаТаблицы.КлючСвязи;
			НоваяСтрокаТЗ.Сумма = СтрокаТаблицы.Сумма;
			НоваяСтрокаТЗ.Действует = Истина;
			
			// Расшифровка скидки.
			НоваяСтрокаТЗ.Расшифровка = Параметры.ПустаяТаблицаРасшифровка.СкопироватьКолонки();
			Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ.Расшифровка.Добавить(), СтрокаРасшифровки);
			КонецЦикла;
			
			КлючСвязи = СтрокаТаблицы.КлючСвязи;
			
		Иначе
			
			НоваяСтрокаТЗ.Сумма = НоваяСтрокаТЗ.Сумма + СтрокаТаблицы.Сумма;
			Для Каждого СтрокаРасшифровки Из СтрокаТаблицы.Расшифровка Цикл
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ.Расшифровка.Добавить(), СтрокаРасшифровки);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДерева.ТаблицаДанных = ТЗ;
	
КонецПроцедуры // РассчитатьСкидкиПоГруппеСовместногоПримененияСложение()

// Процедура выполняет расчет скидки по группе совместного применения: вытеснение.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиПоГруппеСовместногоПримененияВытеснение(СтрокаДерева, Параметры)
	
	ТаблицаДанных = ОбъединитьТаблицыДанныхПодчиненныхСтрок(СтрокаДерева);
	ТаблицаДанных.Сортировать("КлючСвязи, РеквизитДопУпорядочивания");
	
	ТЗ = ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры);
	
	КлючСвязи = Неопределено;
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		Если СтрокаТаблицы.КлючСвязи <> КлючСвязи Тогда
			
			НоваяСтрока = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Действует = Истина;
			
			КлючСвязи = СтрокаТаблицы.КлючСвязи;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДерева.ТаблицаДанных = ТЗ;
	
КонецПроцедуры // РассчитатьСкидкиПоГруппеСовместногоПримененияВытеснение()

// Процедура выполняет расчет скидки по группе совместного применения.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиПоГруппеСовместногоПрименения(СтрокаДерева, Параметры)
	
	Если СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Максимум Тогда
		
		РассчитатьСкидкиПоГруппеСовместногоПримененияМаксимум(СтрокаДерева, Параметры);
		
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Минимум Тогда
		
		РассчитатьСкидкиПоГруппеСовместногоПримененияМинимум(СтрокаДерева, Параметры);
		
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Вытеснение Тогда
		
		РассчитатьСкидкиПоГруппеСовместногоПримененияВытеснение(СтрокаДерева, Параметры);
		
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение Тогда
		
		// Умножение для групп работает аналогично сложению, т.к. суммы скидок уже рассчитаны.
		// Умножение действует только для процентных скидок.
		РассчитатьСкидкиПоГруппеСовместногоПримененияСложение(СтрокаДерева, Параметры);
		
	ИначеЕсли СтрокаДерева.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Сложение Тогда
		
		РассчитатьСкидкиПоГруппеСовместногоПримененияСложение(СтрокаДерева, Параметры);
		
	Иначе
		
		// На верхнем уровне всегда складываем скидки...
		РассчитатьСкидкиПоГруппеСовместногоПримененияСложение(СтрокаДерева, Параметры);
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСкидкиПоГруппеСовместногоПрименения()

Функция СтрокиТоваровДляРаспределения(СтрокаДерева, ПараметрыСкидки, Параметры)
	
	Если СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() > 0 Тогда // Если в скидке выбраны условия по строке
		МассивСтрокТоваров = Новый Массив;
		Для Каждого СтрокаТЧ Из СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий Цикл
			НайденныеСтроки = Параметры.ТоварыПоСегментам.НайтиСтроки(Новый Структура("СегментНоменклатуры, КлючСвязи", Справочники.СегментыНоменклатуры.ПустаяСсылка(), СтрокаТЧ.КлючСвязи));
			Если НайденныеСтроки.Количество() > 0 Тогда
				МассивСтрокТоваров.Добавить(НайденныеСтроки[0]);
			КонецЕсли;
		КонецЦикла;
	Иначе
		МассивСтрокТоваров = Параметры.ТоварыПоСегментам.НайтиСтроки(Новый Структура("СегментНоменклатуры", Справочники.СегментыНоменклатуры.ПустаяСсылка()));
	КонецЕсли;
	
	Возврат МассивСтрокТоваров;
	
КонецФункции

Процедура РассчитатьСкидкуСуммой(СтрокаДерева, Параметры, ПараметрыСкидки, ТоварыСегмента, ТаблицаДанных, СуммаСкидки = Неопределено)
	
	// Сумма скидки к распределению.
	Если СуммаСкидки = Неопределено Тогда
		СуммаСкидкиКРаспределению = ПараметрыСкидки.ЗначениеСкидкиНаценки;
	Иначе
		СуммаСкидкиКРаспределению = СуммаСкидки;
	КонецЕсли;
	
	Если СтрокаДерева.Родитель = Неопределено Тогда
		ЭтоУмножение = Ложь;
	Иначе
		ЭтоУмножение = (СтрокаДерева.Родитель.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение);
	КонецЕсли;
	
	// Расчет общей суммы товаров сегмента.
	ОбщаяСуммаТоваровСегмента = 0;
	Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
		
		Если ЭтоУмножение Тогда
			ПримененныеСкидкиУмножение = ПолучитьСуммуПримененнойСкидки(СтрокаДерева, ТоварСегмента.КлючСвязи, Параметры);
			Сумма = ТоварСегмента.Сумма - ПримененныеСкидкиУмножение.Сумма;
			Если Сумма < 0 Тогда
				Сумма = 0;
			КонецЕсли;
		Иначе
			Сумма = ТоварСегмента.Сумма;
		КонецЕсли;
		
		ОбщаяСуммаТоваровСегмента = ОбщаяСуммаТоваровСегмента + Сумма;
		
	КонецЦикла;
	
	// Распределение скидки на товары сегмента.
	Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
		
		НоваяСтрока           = ТаблицаДанных.Добавить();
		НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
		НоваяСтрока.Действует = Истина;
		
		// Расчет суммы скидки.
		Если ЭтоУмножение Тогда
			ПримененныеСкидкиУмножение = ПолучитьСуммуПримененнойСкидки(СтрокаДерева, ТоварСегмента.КлючСвязи, Параметры);
			Сумма = ТоварСегмента.Сумма - ПримененныеСкидкиУмножение.Сумма;
			Если Сумма < 0 Тогда
				Сумма = 0;
			КонецЕсли;
		Иначе
			Сумма = ТоварСегмента.Сумма;
		КонецЕсли;
		
		Если ОбщаяСуммаТоваровСегмента <> 0 Тогда
			НоваяСтрока.Сумма = Сумма * (СуммаСкидкиКРаспределению / ОбщаяСуммаТоваровСегмента);
		Иначе
			НоваяСтрока.Сумма = 0;
		КонецЕсли;
		
		Если ЭтоУмножение И ((СтрокаДерева.Управляемая И СтрокаДерева.НазначенаПользователем) ИЛИ Не СтрокаДерева.Управляемая) Тогда
			ПримененныеСкидкиУмножение.Сумма = ПримененныеСкидкиУмножение.Сумма + НоваяСтрока.Сумма;
		КонецЕсли;
		
		СуммаСкидкиКРаспределению = СуммаСкидкиКРаспределению - НоваяСтрока.Сумма;
		ОбщаяСуммаТоваровСегмента = ОбщаяСуммаТоваровСегмента - Сумма;
		
		НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет расчет скидки дерева скидок.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидку(СтрокаДерева, Параметры)
	
	ПараметрыСкидки = Параметры.СкидкиНаценки.Найти(СтрокаДерева.СкидкаНаценка, "СкидкаНаценка");
	
	ТоварыСегмента = СтрокиТоваровДляРаспределения(СтрокаДерева, ПараметрыСкидки, Параметры);
	
	СкидкиНаценкиПоЦеновымГруппам = Параметры.СкидкиНаценкиПоЦеновымГруппам.НайтиСтроки(Новый Структура("СкидкаНаценка", СтрокаДерева.СкидкаНаценка));
	
	ТаблицаДанных = ПолучитьПустуюТаблицуСкидокСРасшифровкой(Параметры);
	
	Если ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Процент Тогда
		
		Если СтрокаДерева.Родитель = Неопределено Тогда
			ЭтоУмножение = Ложь;
		Иначе
			ЭтоУмножение = СтрокаДерева.Родитель.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение;
		КонецЕсли;
		
		Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
			
			НоваяСтрока           = ТаблицаДанных.Добавить();
			НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
			НоваяСтрока.Действует = Истина;
			
			// Если скидка на данную строку не действует - пропускаем.
			Если СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() > 0
				И СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(ТоварСегмента.КлючСвязи) = Неопределено Тогда
				НоваяСтрока.Действует = Ложь;
				Продолжить;
			КонецЕсли;
			
			// Расчет скидки процентом.
			Если ЭтоУмножение Тогда
				ПримененныеСкидкиУмножение = ПолучитьСуммуПримененнойСкидки(СтрокаДерева, ТоварСегмента.КлючСвязи, Параметры);
				Сумма = ТоварСегмента.Сумма - ПримененныеСкидкиУмножение.Сумма;
				Если Сумма < 0 Тогда
					Сумма = 0;
				КонецЕсли;
			Иначе
				Сумма = ТоварСегмента.Сумма;
			КонецЕсли;
			
			ЗначениеСкидкиНаценки = ПараметрыСкидки.ЗначениеСкидкиНаценки;
			
			// Поиск значения скидки (наценки) для ценовой группы
			Для Каждого СтрокаТЧ Из СкидкиНаценкиПоЦеновымГруппам Цикл
				Если СтрокаТЧ.ЦеноваяГруппа = ТоварСегмента.ЦеноваяГруппа Тогда
					ЗначениеСкидкиНаценки = СтрокаТЧ.ЗначениеСкидкиНаценки;
				КонецЕсли;
			КонецЦикла;
			
			НоваяСтрока.Сумма = (ЗначениеСкидкиНаценки / 100) * Сумма;
			
			Если ЭтоУмножение И НоваяСтрока.Действует И ((СтрокаДерева.Управляемая И СтрокаДерева.НазначенаПользователем) ИЛИ Не СтрокаДерева.Управляемая) Тогда
				ПримененныеСкидкиУмножение.Сумма = ПримененныеСкидкиУмножение.Сумма + НоваяСтрока.Сумма;
			КонецЕсли;
			
			НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);
			
		КонецЦикла;
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сумма Тогда
		
		МинимальнаяКратностьВыполнения = Неопределено;
		Условия = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе));
		Для Каждого СтрокаУсловия Из Условия Цикл
			Если СтрокаУсловия.КратностьВыполнения < 0 Тогда
				Продолжить;
			КонецЕсли;
			Если МинимальнаяКратностьВыполнения = Неопределено Или СтрокаУсловия.КратностьВыполнения < МинимальнаяКратностьВыполнения Тогда
				МинимальнаяКратностьВыполнения = СтрокаУсловия.КратностьВыполнения;
			КонецЕсли;
		КонецЦикла;
		Если МинимальнаяКратностьВыполнения = Неопределено Тогда
			Если СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда
				МинимальнаяКратностьВыполнения = 1;
			Иначе
				МинимальнаяКратностьВыполнения = 0;
			КонецЕсли;
		КонецЕсли;
		Если Не ПараметрыСкидки.ИспользоватьКратность Тогда
			Если МинимальнаяКратностьВыполнения > 0 Тогда
				МинимальнаяКратностьВыполнения = 1;
			КонецЕсли;
		КонецЕсли;
		
		Сумма = МинимальнаяКратностьВыполнения * ПараметрыСкидки.ЗначениеСкидкиНаценки;
		РассчитатьСкидкуСуммой(СтрокаДерева, Параметры, ПараметрыСкидки, ТоварыСегмента, ТаблицаДанных, Сумма);
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.СуммаДляКаждойСтроки Тогда
		
		Если СтрокаДерева.Родитель = Неопределено Тогда
			ЭтоУмножение = Ложь;
		Иначе
			ЭтоУмножение = СтрокаДерева.Родитель.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение;
		КонецЕсли;
		
		ЕстьУсловияПоСтроке = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() > 0;
		
		Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
			
			МинимальнаяКратностьВыполнения = Неопределено;
			Условия = Параметры.ВыполненныеУсловия.НайтиСтроки(Новый Структура("КлючСвязи", ТоварСегмента.КлючСвязи));
			Для Каждого СтрокаУсловия Из Условия Цикл
				Если СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("УсловиеПредоставления, ОбластьОграничения", СтрокаУсловия.Ссылка, Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если СтрокаУсловия.КратностьВыполнения < 0 Тогда
					Продолжить;
				КонецЕсли;
				Если МинимальнаяКратностьВыполнения = Неопределено Или СтрокаУсловия.КратностьВыполнения < МинимальнаяКратностьВыполнения Тогда
					МинимальнаяКратностьВыполнения = СтрокаУсловия.КратностьВыполнения;
				КонецЕсли;
			КонецЦикла;
			Если МинимальнаяКратностьВыполнения = Неопределено Тогда
				Если СтрокаДерева.ПараметрыУсловий.УсловияВыполнены И Не ЕстьУсловияПоСтроке Тогда
					МинимальнаяКратностьВыполнения = 1;
				Иначе
					МинимальнаяКратностьВыполнения = 0;
				КонецЕсли;
			КонецЕсли;
			Если Не ПараметрыСкидки.ИспользоватьКратность Тогда
				Если МинимальнаяКратностьВыполнения > 0 Тогда
					МинимальнаяКратностьВыполнения = 1;
				КонецЕсли;
			КонецЕсли;
			
			
			НоваяСтрока = ТаблицаДанных.Добавить();
			НоваяСтрока.Действует = Истина;
			
			// Если скидка на данную строку не действует - пропускаем.
			Если ЕстьУсловияПоСтроке
				И СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(ТоварСегмента.КлючСвязи) = Неопределено Тогда
				НоваяСтрока.Действует = Ложь;
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока.КлючСвязи   = ТоварСегмента.КлючСвязи;
			НоваяСтрока.Сумма       = МинимальнаяКратностьВыполнения * ПараметрыСкидки.ЗначениеСкидкиНаценки;
			НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);
			
			// Расчет суммы скидки.
			Если ЭтоУмножение И НоваяСтрока.Действует И ((СтрокаДерева.Управляемая И СтрокаДерева.НазначенаПользователем) ИЛИ Не СтрокаДерева.Управляемая) Тогда
				ПримененныеСкидкиУмножение = ПолучитьСуммуПримененнойСкидки(СтрокаДерева, ТоварСегмента.КлючСвязи, Параметры);
				ПримененныеСкидкиУмножение.Сумма = ПримененныеСкидкиУмножение.Сумма + НоваяСтрока.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ВидЦены Тогда
		
		Если СтрокаДерева.Родитель = Неопределено Тогда
			ЭтоУмножение = Ложь;
		Иначе
			ЭтоУмножение = СтрокаДерева.Родитель.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение;
		КонецЕсли;
		
		Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
			
			НоваяСтрока           = ТаблицаДанных.Добавить();
			НоваяСтрока.КлючСвязи = ТоварСегмента.КлючСвязи;
			НоваяСтрока.Действует = Истина;
			
			// Если скидка на данную строку не действует - пропускаем.
			Если СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() > 0
				И СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(ТоварСегмента.КлючСвязи) = Неопределено Тогда
				НоваяСтрока.Действует = Ложь;
				//Продолжить;
			КонецЕсли;
			
			// Расчет суммы скидки.
			Сумма = ТоварСегмента.Сумма;
			
			ЦенаЗаУпаковку = ПолучитьЦенуНоменклатурыПоВидуЦен(ТоварСегмента, Параметры, ПараметрыСкидки);
			Если ЦенаЗаУпаковку <> 0 Тогда
				НоваяСтрока.Сумма = Сумма - ТоварСегмента.КоличествоУпаковок * ЦенаЗаУпаковку; // Округление?
			Иначе
				НоваяСтрока.Сумма = 0;
			КонецЕсли;
			
			Если ЭтоУмножение И НоваяСтрока.Действует И ((СтрокаДерева.Управляемая И СтрокаДерева.НазначенаПользователем) ИЛИ Не СтрокаДерева.Управляемая) Тогда
				ПримененныеСкидкиУмножение = ПолучитьСуммуПримененнойСкидки(СтрокаДерева, ТоварСегмента.КлючСвязи, Параметры);
				ПримененныеСкидкиУмножение.Сумма = НоваяСтрока.Сумма;
			КонецЕсли;
			
			НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);
			
		КонецЦикла;
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Сообщение
		ИЛИ ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.КартаЛояльности Тогда
		
		НоваяСтрока             = ТаблицаДанных.Добавить();
		НоваяСтрока.КлючСвязи   = -1;
		НоваяСтрока.Действует   = Истина;
		НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, 0, Параметры);
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Количество Тогда
		
		СуммаСкидкиКРаспределению = ПараметрыСкидки.ЗначениеСкидкиНаценки;
		
		Если СтрокаДерева.Родитель = Неопределено Тогда
			ЭтоУмножение = Ложь;
		Иначе
			ЭтоУмножение = СтрокаДерева.Родитель.ВариантСовместногоПрименения = Перечисления.ВариантыСовместногоПримененияСкидокНаценок.Умножение;
		КонецЕсли;
		
		Для Каждого ТоварСегмента Из ТоварыСегмента Цикл
			
			НоваяСтрока = ТаблицаДанных.Добавить();
			
			НоваяСтрока.Действует = Истина;
			
			// Если скидка на данную строку не действует - пропускаем.
			Если СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() > 0
				И СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(ТоварСегмента.КлючСвязи) = Неопределено Тогда
				НоваяСтрока.Действует = Ложь;
				//Продолжить;
			КонецЕсли;
			
			НоваяСтрока.КлючСвязи   = ТоварСегмента.КлючСвязи;
			
			МинимальнаяКратностьВыполнения = Окр((ТоварСегмента.Количество/ПараметрыСкидки.УсловиеДляСкидкиКоличеством)-0.5, 0, РежимОкругления.Окр15как20);
			Если ТоварСегмента.Количество <> 0 Тогда
				НоваяСтрока.Сумма = ТоварСегмента.Сумма/ТоварСегмента.Количество*ПараметрыСкидки.ЗначениеСкидкиНаценки*МинимальнаяКратностьВыполнения;
			Иначе
				НоваяСтрока.Сумма = 0;
			КонецЕсли;
			
			НоваяСтрока.Расшифровка = ПолучитьРасшифровкуСкидки(СтрокаДерева, НоваяСтрока.Сумма, Параметры);
			
			// Расчет суммы скидки.
			Если ЭтоУмножение И НоваяСтрока.Действует И ((СтрокаДерева.Управляемая И СтрокаДерева.НазначенаПользователем) ИЛИ Не СтрокаДерева.Управляемая) Тогда
				ПримененныеСкидкиУмножение = ПолучитьСуммуПримененнойСкидки(СтрокаДерева, ТоварСегмента.КлючСвязи, Параметры);
				ПримененныеСкидкиУмножение.Сумма = ПримененныеСкидкиУмножение.Сумма + НоваяСтрока.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.Подарок Тогда
		
		ТоварыСегментаПодарков  = Параметры.ТоварыПоСегментам.НайтиСтроки(Новый Структура("СегментНоменклатуры", ПараметрыСкидки.СегментПодарков));
		ТаблицаСтоимостейТоваров = Новый ТаблицаЗначений;
		ТаблицаСтоимостейТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
		ТаблицаСтоимостейТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		Для Каждого ТоварСегмента Из ТоварыСегментаПодарков Цикл
			НоваяСтрока = ТаблицаСтоимостейТоваров.Добавить();
			НоваяСтрока.Цена       = ТоварСегмента.Сумма / ТоварСегмента.Количество;
			НоваяСтрока.Количество = ТоварСегмента.Количество;
		КонецЦикла;
		ТаблицаСтоимостейТоваров.Сортировать("Цена Возр");
		
		МинимальнаяКратностьВыполнения = Неопределено;
		Условия = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВДокументе));
		Для Каждого СтрокаУсловия Из Условия Цикл
			Если СтрокаУсловия.КратностьВыполнения < 0 Тогда
				Продолжить;
			КонецЕсли;
			Если МинимальнаяКратностьВыполнения = Неопределено Или СтрокаУсловия.КратностьВыполнения < МинимальнаяКратностьВыполнения Тогда
				МинимальнаяКратностьВыполнения = СтрокаУсловия.КратностьВыполнения;
			КонецЕсли;
		КонецЦикла;
		Если МинимальнаяКратностьВыполнения = Неопределено Тогда
			Если СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда
				МинимальнаяКратностьВыполнения = 1;
			Иначе
				МинимальнаяКратностьВыполнения = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПараметрыСкидки.ИспользоватьКратность Тогда
			Если МинимальнаяКратностьВыполнения > 0 Тогда
				МинимальнаяКратностьВыполнения = 1;
			КонецЕсли;
		КонецЕсли;
		
		Сумма = 0;
		Для i=1 По МинимальнаяКратностьВыполнения * ПараметрыСкидки.ЗначениеСкидкиНаценки Цикл
			Для Каждого СтрокаТЧ Из ТаблицаСтоимостейТоваров Цикл
				Если СтрокаТЧ.Количество > 0 Тогда
					СтрокаТЧ.Количество = СтрокаТЧ.Количество - 1;
					Сумма = Сумма + СтрокаТЧ.Цена;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		РассчитатьСкидкуСуммой(СтрокаДерева, Параметры, ПараметрыСкидки, ТоварыСегмента, ТаблицаДанных, Сумма);
		
	ИначеЕсли ПараметрыСкидки.СпособПредоставления = Перечисления.СпособыПредоставленияСкидокНаценок.ОкруглениеСуммы Тогда
		
		СуммаТоваровСегмента = 0;
		
		МассивСтрок  = Параметры.ТоварыПоСегментам.НайтиСтроки(Новый Структура("СегментНоменклатуры", Справочники.СегментыНоменклатуры.ПустаяСсылка()));
		Для Каждого ТоварСегмента Из МассивСтрок Цикл
			
			Если СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.НайтиСтроки(Новый Структура("ОбластьОграничения", Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке)).Количество() > 0
				И СтрокаДерева.ПараметрыУсловий.КодыСтрок.Найти(ТоварСегмента.КлючСвязи) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПримененныеСкидкиУмножение = ПолучитьСуммуПримененнойСкидки(СтрокаДерева, ТоварСегмента.КлючСвязи, Параметры);
			СуммаТоваровСегмента = СуммаТоваровСегмента + ТоварСегмента.Сумма + ПримененныеСкидкиУмножение.Сумма;
			
		КонецЦикла;
		
		Сумма = 0;
		Если ПараметрыСкидки.ЗначениеСкидкиНаценки <= СуммаТоваровСегмента Тогда
			
			Если ЗначениеЗаполнено(ПараметрыСкидки.ТочностьОкругления) Тогда
				Сумма = СуммаТоваровСегмента - ЦенообразованиеКлиентСервер.ОкруглитьЦену(СуммаТоваровСегмента, ПараметрыСкидки.ТочностьОкругления, ПараметрыСкидки.ОкруглятьВБольшуюСторону);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыСкидки.ПсихологическоеОкругление) Тогда
				Сумма = СуммаТоваровСегмента + Сумма - ЦенообразованиеКлиентСервер.ПрименитьПсихологическоеОкругление(СуммаТоваровСегмента, ПараметрыСкидки.ПсихологическоеОкругление);
			КонецЕсли;
			
		КонецЕсли;
		
		РассчитатьСкидкуСуммой(СтрокаДерева, Параметры, ПараметрыСкидки, ТоварыСегмента, ТаблицаДанных, Сумма);
		
		
	КонецЕсли;
	
	СтрокаДерева.ТаблицаДанных = ТаблицаДанных;
	
КонецПроцедуры // РассчитатьСкидку()

// Процедура рекурсивно обходит дерево и производит расчет
// скидок снизу-вверх: от подчиненного элемента дерева к родителю.
//
// Возвращаемое значение:
//	Нет.
//
Процедура РассчитатьСкидкиРекурсивно(ДеревоСкидок, Параметры)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			РассчитатьСкидкиРекурсивно(СтрокаДерева, Параметры);
			
			// Скидки по подчиненным элементам рассчитаны.
			// Рассчитываем скидки по группе совместного применения (родителю).
			РассчитатьСкидкиПоГруппеСовместногоПрименения(СтрокаДерева, Параметры);
			
		Иначе
			
			РассчитатьСкидку(СтрокаДерева, Параметры);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // РассчитатьСкидкиРекурсивно()

// Функция производит полный расчет скидок в дереве.
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица с рассчитанными скидками.
//
Функция РассчитатьДеревоСкидок(ДеревоСкидок, Параметры)
	
	ВозвращаемыеДанные = Новый Структура;
	
	РассчитатьСкидкиРекурсивно(ДеревоСкидок, Параметры);
	
	// На верхнем уровне всегда берем максимум...
	ТаблицаДанных = РассчитатьСкидкиПоГруппеСовместногоПримененияМаксимумВерхнийУровень(ДеревоСкидок, Параметры);
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("КлючСвязи",     Новый ОписаниеТипов("Число"));
	ТЗ.Колонки.Добавить("СкидкаНаценка", Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	ТЗ.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаДанных Цикл
		Для Каждого СтрокаСкидкиНаценки Из СтрокаТаблицы.Расшифровка Цикл
			НоваяСтрока               = ТЗ.Добавить();
			НоваяСтрока.КлючСвязи     = СтрокаТаблицы.КлючСвязи;
			НоваяСтрока.СкидкаНаценка = СтрокаСкидкиНаценки.СкидкаНаценка;
			НоваяСтрока.Сумма         = СтрокаСкидкиНаценки.Сумма;
		КонецЦикла;
	КонецЦикла;
	
	ТЗ.Свернуть("КлючСвязи, СкидкаНаценка", "Сумма");
	ТЗ.Колонки.Добавить("НапомнитьПозже", Новый ОписаниеТипов("Булево"));
	
	ВозвращаемыеДанные.Вставить("ДеревоСкидок",         ДеревоСкидок);
	ВозвращаемыеДанные.Вставить("ТаблицаСкидкиНаценки", ТЗ);
	
	Возврат ВозвращаемыеДанные;
	
КонецФункции // РассчитатьДеревоСкидок()

////////////////////////////////////////////////////////////////////////////////
// Процедуры проверки условий скидок (наценок).

// Функция выполняет проверку выполнения условий скидок.
//
Функция ПроверитьУсловия(СтрокаДерева, ВыполненныеУсловия)
	
	СтрокаДерева.ПараметрыУсловий.Вставить("УсловияВыполнены", Истина);
	СтрокаДерева.ПараметрыУсловий.Вставить("КодыСтрок",        Новый Массив);
	СтрокаДерева.ПараметрыУсловий.Вставить("УсловияПоСтроке",  Новый Структура);
	СтрокаДерева.ПараметрыУсловий.Вставить("ТаблицаУсловий",   Новый ТаблицаЗначений);
	
	// Служебная таблица для временного хранения результатов проверки условий предоставления
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("УсловиеПредоставления", Новый ОписаниеТипов("СправочникСсылка.УсловияПредоставленияСкидокНаценок"));
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("ОбластьОграничения",    Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОбластейОграниченияСкидокНаценок"));
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("Выполнено");
	СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Колонки.Добавить("КратностьВыполнения",   Новый ОписаниеТипов("Число"));
	
	// Таблица применяется для проверки выполнения условий по строке.
	// Если у скидки существуют условия по строке то для этих условий в таблице будет создана колонка
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.Вставить("ТаблицаПроверкиУсловий", Новый ТаблицаЗначений);
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Колонки.Добавить("КлючСвязи");
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Индексы.Добавить("КлючСвязи");
	
	СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.Вставить("СоответствиеУсловийКолонкамТаблицыПроверкиУсловий", Новый Соответствие);
	
	// Служебные параметры
	ИспользуетсяТаблицаПроверкиУсловий      = Ложь;
	ЭтоПервоеУсловиеТаблицыПроверкиУсловий  = Истина;
	КоличествоКолонокТаблицыПроверкиУсловий = 0;
	
	Для Каждого Условие Из СтрокаДерева.УсловияПредоставления Цикл
		
		СтрокаТаблицаУсловий = СтрокаДерева.ПараметрыУсловий.ТаблицаУсловий.Добавить();
		СтрокаТаблицаУсловий.УсловиеПредоставления = Условие.УсловиеПредоставления;
		СтрокаТаблицаУсловий.ОбластьОграничения    = Условие.ОбластьОграничения;
		
		НайденныеСтроки = ВыполненныеУсловия.НайтиСтроки(Новый Структура("Ссылка", Условие.УсловиеПредоставления));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			// Условие не выполнено.
			СтрокаТаблицаУсловий.Выполнено = Ложь;
			
			СтрокаДерева.ПараметрыУсловий.УсловияВыполнены = Ложь;
			
			СтрокаТаблицаУсловий.КратностьВыполнения = 0;
			
		ИначеЕсли НайденныеСтроки.Количество() = 1 И НайденныеСтроки[0].КлючСвязи = -1 Тогда
			
			СтрокаТаблицаУсловий.Выполнено = Истина;
			// Условие выполнено. Условие не зависит от конкретных строк.
			
			СтрокаТаблицаУсловий.КратностьВыполнения = НайденныеСтроки[0].КратностьВыполнения;
			
		Иначе
			
			СтрокаТаблицаУсловий.Выполнено = Истина;
			// Условие выполнено. Найдено несколько строк, прошедших проверку условий.
			
			КоличествоКолонокТаблицыПроверкиУсловий = КоличествоКолонокТаблицыПроверкиУсловий + 1;
			ЗаголовокКолонки = "Условие" + КоличествоКолонокТаблицыПроверкиУсловий;
			
			СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий.Вставить(Условие.УсловиеПредоставления, ЗаголовокКолонки);
			СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Колонки.Добавить(ЗаголовокКолонки, Новый ОписаниеТипов("Булево"));
			
			СуммарнаяКратностьВыполнения = 0;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ИспользуетсяТаблицаПроверкиУсловий = Истина;
				
				НайденныеСтрокиТаблицыПроверкиУсловий = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Найти(НайденнаяСтрока.КлючСвязи, "КлючСвязи");
				Если НайденныеСтрокиТаблицыПроверкиУсловий <> Неопределено Тогда
					НайденныеСтрокиТаблицыПроверкиУсловий[ЗаголовокКолонки] = Истина;
				Иначе
					Если ЭтоПервоеУсловиеТаблицыПроверкиУсловий Тогда
						НоваяСтрока1 = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.Добавить();
						НоваяСтрока1.КлючСвязи = НайденнаяСтрока.КлючСвязи;
						НоваяСтрока1[ЗаголовокКолонки] = Истина;
					КонецЕсли;
				КонецЕсли;
				
				Если НайденнаяСтрока.КратностьВыполнения > 0 Тогда
					СуммарнаяКратностьВыполнения = СуммарнаяКратностьВыполнения + НайденнаяСтрока.КратностьВыполнения;
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаТаблицаУсловий.КратностьВыполнения = СуммарнаяКратностьВыполнения;
			
		КонецЕсли;
		
		Если ИспользуетсяТаблицаПроверкиУсловий Тогда
			ЭтоПервоеУсловиеТаблицыПроверкиУсловий = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполним коды строк...
	Если СтрокаДерева.ПараметрыУсловий.УсловияВыполнены Тогда
		
		Если СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий.Количество() > 0 Тогда
			
			Отбор = Новый Структура;
			Для Каждого КлючИЗначение Из СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.СоответствиеУсловийКолонкамТаблицыПроверкиУсловий Цикл
				Отбор.Вставить(КлючИЗначение.Значение, Истина);
			КонецЦикла;
			
			НайденныеСтроки = СтрокаДерева.ПараметрыУсловий.УсловияПоСтроке.ТаблицаПроверкиУсловий.НайтиСтроки(Отбор);
			Для Каждого СтрокаТЗ Из НайденныеСтроки Цикл
				СтрокаДерева.ПараметрыУсловий.КодыСтрок.Добавить(СтрокаТЗ.КлючСвязи);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецФункции // ПроверитьУсловия()

// Функция выполняет заполнение служебных реквизитов у строк дерева скидок.
//
Процедура ПроверитьУсловияРекурсивно(ДеревоСкидок, ВыполненныеУсловия)
	
	Для Каждого СтрокаДерева Из ДеревоСкидок.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ПроверитьУсловияРекурсивно(СтрокаДерева, ВыполненныеУсловия);
			
		Иначе
			
			ПроверитьУсловия(СтрокаДерева, ВыполненныеУсловия);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьУсловияРекурсивно()

////////////////////////////////////////////////////////////////////////////////
// Процедуры расчета скидок (наценок) по документам.

// Функция выполняет расчет скидок (наценок) по переданным параметрам.
//
Функция РассчитатьДеревоСкидокНаценок(ПараметрыРасчета, ВходныеПараметры)
	
	ПервыйПакетЗапросов = ПакетЗапросовСоздать();
	ВторойПакетЗапросов = ПакетЗапросовСоздать();
	
	Для Каждого ПараметрПакета Из ПараметрыРасчета Цикл
		ПервыйПакетЗапросов.Запрос.УстановитьПараметр(ПараметрПакета.Ключ, ПараметрПакета.Значение);
		ВторойПакетЗапросов.Запрос.УстановитьПараметр(ПараметрПакета.Ключ, ПараметрПакета.Значение);
	КонецЦикла;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПервыйПакетЗапросов.Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ВторойПакетЗапросов.Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	// Подготовка и выполнение первого пакета.
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаКурсыВалют(),                    ПервыйПакетЗапросов);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаСкидкиНаценки(),                 ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаУсловияПредоставления(),         ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаСкидкиНаценкиПоЦеновымГруппам(), ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаТоварыПоСегментам(),             ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВставитьЗапросВПакет(ТекстЗапросаТаблицаЦеныНоменклатуры(),              ПервыйПакетЗапросов, Истина);
	ПакетЗапросовВыполнить(ПервыйПакетЗапросов);
	
	// Подготовка и выполнение второго пакета.
	ВыборкаУсловияПредоставления = ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("УсловияПредоставления", ПервыйПакетЗапросов).Выбрать();
	Пока ВыборкаУсловияПредоставления.Следующий() Цикл
		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаРазовыйОбъемПродаж Тогда
			Если ВыборкаУсловияПредоставления.ОбластьОграничения = Перечисления.ВариантыОбластейОграниченияСкидокНаценок.ВСтроке Тогда
				ПараметрыЗапроса = ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоСтроке(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
				ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);
			Иначе
				ПараметрыЗапроса = ТекстЗапросаСкидкаЗаРазовуюПродажуСУсловиемПоДокументу(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
				ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);
			КонецЕсли;
		КонецЕсли;
		
		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНакопленныйОбъемПродаж Тогда
			
			ДатаНачала    = Неопределено;
			ДатаОкончания = ПараметрыРасчета.ТекущаяДата - 1;
			
			Если ВыборкаУсловияПредоставления.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантыОпределенияПериодаНакопительнойСкидки.ПрошлыйПериод Тогда
				
				Если ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Год Тогда
					ДатаНачала    = НачалоГода(НачалоГода(ПараметрыРасчета.ТекущаяДата) - 1);
					ДатаОкончания = НачалоГода(ПараметрыРасчета.ТекущаяДата) - 1;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Квартал Тогда
					ДатаНачала    = НачалоКвартала(НачалоКвартала(ПараметрыРасчета.ТекущаяДата) - 1);
					ДатаОкончания = НачалоКвартала(ПараметрыРасчета.ТекущаяДата) - 1;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Месяц Тогда
					ДатаНачала    = НачалоМесяца(НачалоМесяца(ПараметрыРасчета.ТекущаяДата) - 1);
					ДатаОкончания = НачалоМесяца(ПараметрыРасчета.ТекущаяДата) - 1;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Неделя Тогда
					ДатаНачала    = НачалоНедели(НачалоНедели(ПараметрыРасчета.ТекущаяДата) - 1);
					ДатаОкончания = НачалоНедели(ПараметрыРасчета.ТекущаяДата) - 1;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.День Тогда
					ДатаНачала    = НачалоДня(НачалоДня(ПараметрыРасчета.ТекущаяДата) - 1);
					ДатаОкончания = НачалоДня(ПараметрыРасчета.ТекущаяДата) - 1;
				КонецЕсли;
				
			ИначеЕсли ВыборкаУсловияПредоставления.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантыОпределенияПериодаНакопительнойСкидки.ПрошлыйСкользящийПериод Тогда
				
				Если ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Год Тогда
					ДатаНачала    = ПараметрыРасчета.ТекущаяДата - 365*24*60*60;
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Полугодие Тогда
					ДатаНачала    = ПараметрыРасчета.ТекущаяДата - 180*24*60*60;
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Квартал Тогда
					ДатаНачала    = ПараметрыРасчета.ТекущаяДата - 90*24*60*60;
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Месяц Тогда
					ДатаНачала    = ПараметрыРасчета.ТекущаяДата - 30*24*60*60;
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Декада Тогда
					ДатаНачала    = ПараметрыРасчета.ТекущаяДата - 10*24*60*60;
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Неделя Тогда
					ДатаНачала    = ПараметрыРасчета.ТекущаяДата - 7*24*60*60;
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.День Тогда
					ДатаНачала    = ПараметрыРасчета.ТекущаяДата - 24*60*60;
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				КонецЕсли;
				
			ИначеЕсли ВыборкаУсловияПредоставления.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантыОпределенияПериодаНакопительнойСкидки.СНачалаТекущегоПериода Тогда
				
				Если ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Год Тогда
					ДатаНачала    = НачалоГода(ПараметрыРасчета.ТекущаяДата);
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Квартал Тогда
					ДатаНачала    = НачалоКвартала(ПараметрыРасчета.ТекущаяДата);
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Месяц Тогда
					ДатаНачала    = НачалоМесяца(ПараметрыРасчета.ТекущаяДата);
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.Неделя Тогда
					ДатаНачала    = НачалоНедели(ПараметрыРасчета.ТекущаяДата);
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				ИначеЕсли ВыборкаУсловияПредоставления.ПериодНакопления = Перечисления.Периодичность.День Тогда
					ДатаНачала    = НачалоДня(ПараметрыРасчета.ТекущаяДата);
					ДатаОкончания = ПараметрыРасчета.ТекущаяДата;
				КонецЕсли;
				
			ИначеЕсли ВыборкаУсловияПредоставления.ВариантОпределенияПериодаНакопительнойСкидки = Перечисления.ВариантыОпределенияПериодаНакопительнойСкидки.ВесьПериод Тогда
				ДатаНачала    = Неопределено;
				ДатаОкончания = ПараметрыРасчета.ТекущаяДата - 1;
			КонецЕсли;
			
			Если ВыборкаУсловияПредоставления.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоПартнеру Тогда
				ПараметрыЗапроса = ТекстЗапросаСкидкаЗаНакопленныйОбъемПродажПоПартнеруЗаПериод(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка, ДатаНачала, ДатаОкончания);
				ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);
			ИначеЕсли ВыборкаУсловияПредоставления.ВариантНакопления = Перечисления.ВариантыНакопленияКумулятивнойСкидкиНаценки.ПоТорговомуСоглашению Тогда
				ПараметрыЗапроса = ТекстЗапросаСкидкаЗаНакопленныйОбъемПродажПоТорговомуСоглашениюЗаПериод(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка, ДатаНачала, ДатаОкончания);
				ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПервуюПродажуПартнеру Тогда
			ПараметрыЗапроса = ТекстЗапросаСкидкаЗаПервуюПродажуПартнеру(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);
		КонецЕсли;
		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаПробнуюПродажу Тогда
			ПараметрыЗапроса = ТекстЗапросаСкидкаЗаПробнуюПродажу(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);
		КонецЕсли;
		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаГрафикОплаты Тогда
			ПараметрыЗапроса = ТекстЗапросаСкидкаЗаГрафикОплаты(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);
		КонецЕсли;
		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаФормуОплаты Тогда
			ПараметрыЗапроса = ТекстЗапросаСкидкаЗаФормуОплаты(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);
		КонецЕсли;
		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ОграничениеПоГруппеПользователей Тогда
			ПараметрыЗапроса = ТекстЗапросаСкидкаОграничениеПоГруппеПользователей(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);
		КонецЕсли;
		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаВремяПродажи Тогда
			ПараметрыЗапроса = ТекстЗапросаСкидкаЗаВремяПродажи(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);
		КонецЕсли;
		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.КартаЛояльностиНеЗарегистрирована Тогда
			ПараметрыЗапроса = ТекстЗапросаСкидкаКартаЛояльностиНеЗарегистрирована(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);
		КонецЕсли;
		Если ВыборкаУсловияПредоставления.УсловиеПредоставления = Перечисления.УсловияПредоставленияСкидокНаценок.ЗаНаличиеКартыЛояльности Тогда
			ПараметрыЗапроса = ТекстЗапросаСкидкаЗаНаличиеКартыЛояльности(ВторойПакетЗапросов, ВыборкаУсловияПредоставления.Ссылка);
			ПакетЗапросовВставитьЗапросВПакет(ПараметрыЗапроса, ВторойПакетЗапросов, Истина);
		КонецЕсли;
	КонецЦикла;
	ПакетЗапросовВыполнить(ВторойПакетЗапросов);
	
	
	ТаблицаВыполненныеУсловия = ПакетЗапросовОбъединитьРезультаты(ВторойПакетЗапросов);
	ТаблицаСкидкиНаценки      = ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("СкидкиНаценки", ПервыйПакетЗапросов).Выгрузить();
	
	ДеревоСкидок = ПолучитьДеревоСкидок(ТаблицаСкидкиНаценки.ВыгрузитьКолонку("СкидкаНаценка"), ПараметрыРасчета.УправляемыеСкидки);
	ДеревоСкидок.Колонки.Добавить("ТаблицаДанных",    Новый ОписаниеТипов("ТаблицаЗначений"));
	ДеревоСкидок.Колонки.Добавить("ПараметрыУсловий", Новый ОписаниеТипов("Структура"));
	
	ПроверитьУсловияРекурсивно(ДеревоСкидок, ТаблицаВыполненныеУсловия);
	ДеревоСкидок.Колонки.Удалить(ДеревоСкидок.Колонки.УсловияПредоставления);
	
	
	Если ВходныеПараметры.ТолькоПредварительныйРасчет Тогда
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("КлючСвязи",     Новый ОписаниеТипов("Число"));
		ТЗ.Колонки.Добавить("СкидкаНаценка", Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
		ТЗ.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
		
		ВозвращаемыеДанные = Новый Структура;
		ВозвращаемыеДанные.Вставить("ДеревоСкидок", ДеревоСкидок);
		ВозвращаемыеДанные.Вставить("ТаблицаСкидкиНаценки", ТЗ);
		
		Возврат ВозвращаемыеДанные;
		
	КонецЕсли;
	
	
	// Таблица примененных скидок (Применяется для расчета умножения).
	ПримененныеСкидкиУмножение = Новый ТаблицаЗначений;
	ПримененныеСкидкиУмножение.Колонки.Добавить("ГруппаСкидокНаценок", Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	ПримененныеСкидкиУмножение.Колонки.Добавить("КлючСвязи",           Новый ОписаниеТипов("Число"));
	ПримененныеСкидкиУмножение.Колонки.Добавить("Сумма",               Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	// Подготовка параметров для расчета скидок.
	Параметры = Новый Структура;
	Параметры.Вставить("ЦеныНоменклатуры",              ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("ЦеныНоменклатуры",              ПервыйПакетЗапросов).Выгрузить());
	Параметры.Вставить("ТоварыПоСегментам",             ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("ТоварыПоСегментам",             ПервыйПакетЗапросов).Выгрузить());
	Параметры.Вставить("СкидкиНаценкиПоЦеновымГруппам", ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("СкидкиНаценкиПоЦеновымГруппам", ПервыйПакетЗапросов).Выгрузить());
	Параметры.Вставить("СкидкиНаценки",                 ТаблицаСкидкиНаценки);
	Параметры.Вставить("ПримененныеСкидкиУмножение",    ПримененныеСкидкиУмножение);
	Параметры.Вставить("ВыполненныеУсловия",            ТаблицаВыполненныеУсловия);
	Параметры.Вставить("УсловияПредоставления",         ПакетЗапросовПолучитьРезультатЗапросаПоИмениТаблицы("УсловияПредоставления", ПервыйПакетЗапросов).Выгрузить());
	
	Расшифровка = Новый ТаблицаЗначений;
	Расшифровка.Колонки.Добавить("СкидкаНаценка", Новый ОписаниеТипов("СправочникСсылка.СкидкиНаценки"));
	Расшифровка.Колонки.Добавить("Сумма",         Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	// Пустые таблицы.
	Параметры.Вставить("ПустаяТаблицаСкидокСРасшифровкой", Неопределено);
	Параметры.Вставить("ПустаяТаблицаРасшифровка", Расшифровка);
	
	// Индексирование таблиц
	Параметры.СкидкиНаценки.Индексы.Добавить("СкидкаНаценка");
	
	РезультатРасчета = РассчитатьДеревоСкидок(ДеревоСкидок, Параметры);
	
	СохранитьДанныеОВыбранныхУправляемыхСкидках(РезультатРасчета.ТаблицаСкидкиНаценки, ПараметрыРасчета);
	
	Возврат РезультатРасчета;
	
КонецФункции // РассчитатьДеревоСкидокНаценок()

// Функция выполняет расчет суммы НДС.
//
Функция РассчитатьСуммуНДС(Сумма, СтавкаНДС, ЦенаВключаетНДС = Истина)
	
	Если СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		ПроцентНДС = 0.1;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		ПроцентНДС = 0.18;
	Иначе
		ПроцентНДС = 0;
	КонецЕсли;
	
	Если ЦенаВключаетНДС Тогда
		СуммаНДС = Сумма * ПроцентНДС / (ПроцентНДС + 1);
	Иначе
		СуммаНДС = Сумма * ПроцентНДС;
	КонецЕсли;
	
	Возврат СуммаНДС;
	
КонецФункции // РассчитатьСуммуНДС()

// Процедура применяет результат расчета скидок (наценок) к объекту.
// Вызывается из форм документов.
//
Процедура ПрименитьРезультатРасчетаКОбъекту(Объект, ИмяТЧ, РезультатРасчетаСкидокНаценок, РассчитыватьСуммуСНДС=Ложь, РассчитыватьСуммуВзаиморасчетов=Ложь)
	
	Объект.СкидкиНаценки.Загрузить(РезультатРасчетаСкидокНаценок);
	АвтоматическиеСкидкиНаценки = РезультатРасчетаСкидокНаценок.Скопировать();
	
	// Заполнение скидок в табличной части "Товары"
	АвтоматическиеСкидкиНаценки.Свернуть("КлючСвязи", "Сумма");
	АвтоматическиеСкидкиНаценки.Индексы.Добавить("КлючСвязи");
	
	Если ИмяТЧ="Услуги" Тогда
		ИмяКоличества = "Количество";
	Иначе
		ИмяКоличества = "КоличествоУпаковок";
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект[ИмяТЧ] Цикл
		
		СтрокаТаблицы = АвтоматическиеСкидкиНаценки.Найти(СтрокаТЧ.КлючСвязи, "КлючСвязи");
		Если СтрокаТаблицы = Неопределено Тогда
			СуммаАвтоматическойСкидки = 0;
		Иначе
			СуммаАвтоматическойСкидки = СтрокаТаблицы.Сумма;
		КонецЕсли;
		
		РассчитыватьСуммуВзаиморасчетовПоСтроке = (РассчитыватьСуммуВзаиморасчетов И СтрокаТЧ.СуммаАвтоматическойСкидки <> СуммаАвтоматическойСкидки);
		
		СтрокаТЧ.СуммаАвтоматическойСкидки = СуммаАвтоматическойСкидки;
		
		// Применение автоматической скидки.
		СуммаБезСкидки = Окр(СтрокаТЧ[ИмяКоличества] * СтрокаТЧ.Цена,2);
		
		Если СуммаБезСкидки <> 0 Тогда
			СтрокаТЧ.ПроцентРучнойСкидки = 100 * СтрокаТЧ.СуммаРучнойСкидки / СуммаБезСкидки;
		КонецЕсли;
		
		СуммаСкидки = СуммаАвтоматическойСкидки + СтрокаТЧ.СуммаРучнойСкидки;
		
		СтрокаТЧ.ПроцентАвтоматическойСкидки = ?(СуммаБезСкидки = 0, 0 , 100 * СуммаАвтоматическойСкидки / СуммаБезСкидки);
		
		СтрокаТЧ.Сумма    = СуммаБезСкидки - ?(СуммаСкидки > СуммаБезСкидки, СуммаБезСкидки, СуммаСкидки);
		СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДС(СтрокаТЧ.Сумма, СтрокаТЧ.СтавкаНДС, Объект.ЦенаВключаетНДС);
		
		Если РассчитыватьСуммуСНДС Тогда
			СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
		КонецЕсли;
		
		Если РассчитыватьСуммуВзаиморасчетовПоСтроке Тогда
			СтрокаТЧ.СуммаВзаиморасчетов = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект[ИмяТЧ], Объект.ЦенаВключаетНДС);
	Объект.СкидкиРассчитаны = Истина;
	
КонецПроцедуры // РассчитатьПоОбъекту()
