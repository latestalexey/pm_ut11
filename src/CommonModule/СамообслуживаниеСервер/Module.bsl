// Проверяет, действует ли соглашение для партнера в данный момент 
//
// Параметры
//  Соглашение	- СправочникСсылка.СоглашениеСКлиентом - соглашение,
//					для которого выполняется проверка
//  Партнер		- СправочникСсылка.Партнеры - партнер,
//					для которого выполняется проверка
//
// Возвращаемое значение:
//  Булево		- Истина, если действует, ложь в обратном случае.
// 
Функция СоглашениеДействуетДляПартнера(Соглашение,Партнер)  Экспорт
	
	Если Соглашение.Пустая() Или Партнер.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СоглашениеСКлиентом.Ссылка,
	               |	СоглашениеСКлиентом.Склад,
	               |	СоглашениеСКлиентом.Валюта,
	               |	СоглашениеСКлиентом.НалогообложениеНДС,
	               |	СоглашениеСКлиентом.ЦенаВключаетНДС,
	               |	СоглашениеСКлиентом.Наименование,
	               |	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов,
	               |	СоглашениеСКлиентом.ХозяйственнаяОперация
	               |ИЗ
	               |	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
	               |ГДЕ
	               |	(НЕ СоглашениеСКлиентом.ПометкаУдаления)
	               |	И (СоглашениеСКлиентом.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ СоглашениеСКлиентом.ДатаНачалаДействия <= &ТекущаяДата)
	               |	И (СоглашениеСКлиентом.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ СоглашениеСКлиентом.ДатаОкончанияДействия >= &ТекущаяДата)
	               |	И (СоглашениеСКлиентом.Партнер = &Партнер
	               |			ИЛИ СоглашениеСКлиентом.СегментПартнеров В
	               |				(ВЫБРАТЬ
	               |					ПартнерыСегмента.Сегмент
	               |				ИЗ
	               |					РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	               |				ГДЕ
	               |					ПартнерыСегмента.Партнер = &Партнер)
	               |			ИЛИ СоглашениеСКлиентом.Типовое
	               |				И СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка))
	               |	И СоглашениеСКлиентом.Ссылка = &Соглашение
	               |	И СоглашениеСКлиентом.ДоступноВнешнимПользователям
	               |	И СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)";
	
	Запрос.УстановитьПараметр("ТекущаяДата",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Партнер",Партнер);
	Запрос.УстановитьПараметр("Соглашение",Соглашение);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получает соглашение партнера по умолчанию.
//
// Параметры
//  Партнер - СправочникСсылка.Партнеры - партнер, для которого получается соглашение
//  ХозяйственнаяОперация - Перечисления.ХозяйственнаяОперация - хозяйственная операция соглашения
// Возвращаемое значение:
//  ЗаписьРезультатаЗапроса - содержит ссылку на соглашение и реквизиты соглашения,
//                            неопределено, если соглашение не найдено.
//
Функция ПолучитьСоглашениеПартнераПоУмолчанию(Партнер, ХозяйственнаяОперация) Экспорт
	
	Если Партнер.Пустая() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СоглашениеСКлиентом.Ссылка,
	               |	СоглашениеСКлиентом.Типовое,
	               |	СоглашениеСКлиентом.Валюта,
	               |	СоглашениеСКлиентом.Склад,
	               |	СоглашениеСКлиентом.ДатаНачалаДействия,
	               |	СоглашениеСКлиентом.ДатаОкончанияДействия,
	               |	СоглашениеСКлиентом.Наименование,
	               |	СоглашениеСКлиентом.НалогообложениеНДС,
	               |	СоглашениеСКлиентом.ЦенаВключаетНДС,
	               |	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов,
	               |	СоглашениеСКлиентом.ХозяйственнаяОперация
	               |ПОМЕСТИТЬ ДоступныеСоглашения
	               |ИЗ
	               |	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
	               |ГДЕ
	               |	НЕ СоглашениеСКлиентом.ПометкаУдаления
	               |	И СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	               |	И (СоглашениеСКлиентом.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ СоглашениеСКлиентом.ДатаНачалаДействия < &ТекущаяДата)
	               |	И (СоглашениеСКлиентом.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	               |			ИЛИ СоглашениеСКлиентом.ДатаОкончанияДействия > &ТекущаяДата)
	               |	И (СоглашениеСКлиентом.Партнер = &Партнер
	               |			ИЛИ СоглашениеСКлиентом.СегментПартнеров В
	               |				(ВЫБРАТЬ
	               |					ПартнерыСегмента.Сегмент
	               |				ИЗ
	               |					РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	               |				ГДЕ
	               |					ПартнерыСегмента.Партнер = &Партнер)
	               |			ИЛИ &ИспользоватьСоглашенияСКлиентами = ЛОЖЬ)
	               |	И СоглашениеСКлиентом.ДоступноВнешнимПользователям
	               |	И ВЫБОР
	               |			КОГДА &ТолькоТиповые = ИСТИНА
	               |					И &ТолькоИндивидуальные = ЛОЖЬ
	               |					И СоглашениеСКлиентом.Типовое
	               |				ТОГДА ИСТИНА
	               |			КОГДА &ТолькоИндивидуальные = ИСТИНА
	               |					И НЕ &ТолькоТиповые = ИСТИНА
	               |					И НЕ СоглашениеСКлиентом.Типовое
	               |				ТОГДА ИСТИНА
	               |			КОГДА &ТолькоТиповые = ЛОЖЬ
	               |					И &ТолькоИндивидуальные = ЛОЖЬ
	               |				ТОГДА ИСТИНА
	               |			КОГДА &ИспользоватьСоглашенияСКлиентами = ЛОЖЬ 
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |	И ВЫБОР КОГДА &ИспользоватьСоглашенияСКлиентами = ЛОЖЬ
	               |		ТОГДА
	               |			СоглашениеСКлиентом.ХозяйственнаяОперация = &ХозяйственнаяОперация
	               |		ИНАЧЕ ИСТИНА 
	               |	КОНЕЦ;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныйЗапрос.Типовое
	               |ПОМЕСТИТЬ ТипСоглашения
	               |ИЗ
	               |	(ВЫБРАТЬ ПЕРВЫЕ 1
	               |		ДоступныеСоглашения.Типовое КАК Типовое,
	               |		КОЛИЧЕСТВО(ДоступныеСоглашения.Типовое) КАК Количество
	               |	ИЗ
	               |		ДоступныеСоглашения КАК ДоступныеСоглашения
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ДоступныеСоглашения.Типовое
	               |	
	               |	УПОРЯДОЧИТЬ ПО
	               |		Типовое) КАК ВложенныйЗапрос
	               |ГДЕ
	               |	ВложенныйЗапрос.Количество = 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДоступныеСоглашения.Ссылка,
	               |	ДоступныеСоглашения.Валюта,
	               |	ДоступныеСоглашения.Склад,
	               |	ДоступныеСоглашения.НалогообложениеНДС,
	               |	ДоступныеСоглашения.ЦенаВключаетНДС,
	               |	ДоступныеСоглашения.Наименование,
	               |	ДоступныеСоглашения.ИспользуютсяДоговорыКонтрагентов,
	               |	ДоступныеСоглашения.ХозяйственнаяОперация
	               |ИЗ
	               |	ДоступныеСоглашения КАК ДоступныеСоглашения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТипСоглашения КАК ТипСоглашения
	               |		ПО ДоступныеСоглашения.Типовое = ТипСоглашения.Типовое";
	
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Запрос.УстановитьПараметр("Партнер",Партнер);
	
	ИспользоватьТиповыеСоглашенияСКлиентами			= ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашенияСКлиентами	= ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	ИспользоватьСоглашенияСКлиентами                = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	ТолькоТиповые = ИспользоватьТиповыеСоглашенияСКлиентами И НЕ ИспользоватьИндивидуальныеСоглашенияСКлиентами;
	ТолькоИндивидуальные = НЕ ИспользоватьТиповыеСоглашенияСКлиентами И ИспользоватьИндивидуальныеСоглашенияСКлиентами;
	Запрос.УстановитьПараметр("ТолькоТиповые",ТолькоТиповые);
	Запрос.УстановитьПараметр("ТолькоИндивидуальные",ТолькоИндивидуальные);
	Запрос.УстановитьПараметр("ИспользоватьСоглашенияСКлиентами",ИспользоватьСоглашенияСКлиентами);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",ХозяйственнаяОперация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Оформляет заказ
//
// Параметры
//  СтруктураЗаказа  - Структура - содержит информацию необходимую для оформления заказа.
//
Процедура ОформитьЗаказ(СтруктураЗаказа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументЗаказ = Документы.ЗаказКлиента.СоздатьДокумент();
	
	ЗаполнитьЗначенияСвойств(ДокументЗаказ,СтруктураЗаказа);
	ДокументЗаказ.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	ДокументЗаказ.Приоритет = Перечисления.Приоритеты.Средний;
	ДокументЗаказ.СкидкиРассчитаны = Истина;
	ДокументЗаказ.Менеджер = СтруктураЗаказа.Партнер.ОсновнойМенеджер;
	ДокументЗаказ.ДополнительнаяИнформация = СтруктураЗаказа.ДополнительнаяИнформация;
	ДокументЗаказ.Товары.Загрузить(СтруктураЗаказа.Товары.Выгрузить());
	ДокументЗаказ.СкидкиНаценки.Загрузить(СтруктураЗаказа.СкидкиНаценки.Выгрузить());
	
	Если СтруктураЗаказа.Свойство("Договор") И ЗначениеЗаполнено(СтруктураЗаказа.Договор) Тогда
		
		ДокументЗаказ.Договор = СтруктураЗаказа.Договор;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДоговорыКонтрагентов.БанковскийСчет,
		|	ДоговорыКонтрагентов.БанковскийСчетКонтрагента
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Ссылка = &Договор";
		
		Запрос.УстановитьПараметр("Договор",СтруктураЗаказа.Договор);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДокументЗаказ.БанковскийСчетКонтрагента = Выборка.БанковскийСчетКонтрагента;
			ДокументЗаказ.БанковскийСчет            = Выборка.БанковскийСчет;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументЗаказ.ЗаполнитьЭтапыГрафикаОплаты();
	
	ДокументЗаказ.Записать(РежимЗаписиДокумента.Проведение);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиентаТовары.Номенклатура,
	|	ЗаказКлиентаТовары.Характеристика,
	|	ЗаказКлиентаТовары.Упаковка,
	|	ЗаказКлиентаТовары.КоличествоУпаковок
	|ПОМЕСТИТЬ ДанныеДокумента
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|ГДЕ
	|	ЗаказКлиентаТовары.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорзинаПокупателя.Партнер,
	|	КорзинаПокупателя.Номенклатура,
	|	КорзинаПокупателя.Характеристика,
	|	КорзинаПокупателя.Упаковка,
	|	КорзинаПокупателя.КоличествоУпаковок,
	|	КорзинаПокупателя.Цена,
	|	КорзинаПокупателя.ДатаПомещения,
	|	КорзинаПокупателя.Валюта
	|ИЗ
	|	РегистрСведений.КорзинаПокупателя КАК КорзинаПокупателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокумента КАК ДанныеДокумента
	|		ПО КорзинаПокупателя.Номенклатура = ДанныеДокумента.Номенклатура
	|			И КорзинаПокупателя.Характеристика = ДанныеДокумента.Характеристика
	|			И КорзинаПокупателя.Упаковка = ДанныеДокумента.Упаковка
	|ГДЕ
	|	КорзинаПокупателя.Партнер = &Партнер
	|	И ДанныеДокумента.КоличествоУпаковок ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("Партнер",ДокументЗаказ.Партнер);
	Запрос.УстановитьПараметр("Заказ",ДокументЗаказ.Ссылка);
	
	НаборЗаписей = РегистрыСведений.КорзинаПокупателя.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Партнер.Установить(СтруктураЗаказа.Партнер,Истина);
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Записывает контактную информацию партнера
//
// Параметры
//  Партнер					- СправочникСсылка.Партнеры - партнер, для которого записывается контактная информация
//  КонтактнаяИнформация	- ТаблицаЗначений - содержит новое значение контактной информации партнера.
//
Процедура ЗаписатьКонтактнуюИнформациюПартнера(Партнер,КонтактнаяИнформация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектПартнер = Партнер.ПолучитьОбъект();
	ОбъектПартнер.КонтактнаяИнформация.Загрузить(КонтактнаяИнформация);
	ОбъектПартнер.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
