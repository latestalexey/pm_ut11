
// Добавляет текст надписи элемента в таблицу текстов надписей элементов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма рабочего места,
//	ИдНадписи - Строка - идентификатор надписи.
//
Процедура ДобавитьТекстНадписиЭлемента(Форма, ИдНадписи)

	РазрешениеЭкрана = Форма.РазрешениеЭкрана;
	
	_320х320 = Перечисления.РазрешенияЭкрана._320х320;
	_240х320 = Перечисления.РазрешенияЭкрана._240х320;
	
	Если ИдНадписи = "ЗаголовокВсеЗаданияНаОтбор" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Все задания на отбор'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Все з-ния на отбор'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокМоиЗаданияНаОтбор" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Мои задания на отбор'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Мои з-ния на отбор'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокВсеЗаданияНаРазмещения" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Все задания на размещение'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Все з-ния на размещ.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокМоиЗаданияНаРазмещения" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Мои задания на размещение'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Мои з-ния на размещ.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокВсеЗаданияНаПеремещение" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Все задания на перемещение'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Все з-ния на п-щение'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокМоиЗаданияНаПеремещение" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Мои задания на перемещение'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Мои з-ния на п-щение'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокВсеЗаданияНаПересчет" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Все задания на пересчет'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Все з-ния на п-счет'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокМоиЗаданияНаПересчет" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Мои задания на пересчет'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Мои з-ния на п-счет'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокВсеЗаданияНаПриемку" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Все задания на приемку'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Все з-ния на п-мку'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокМоиЗаданияНаПриемку" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Мои задания на приемку'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Мои з-ния на п-мку'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокВсеЗаданияНаПроверку" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Все задания на проверку'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Все з-ния на п-рку'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокМоиЗаданияНаПроверку" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Мои задания на проверку'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Мои з-ния на п-рку'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ОшибкаНеТаЯчейка" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: отсканирована не та ячейка.'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: отск. не та ячейка.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ОшибкаНеТотТовар" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: отсканирован не тот товар.'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: отск. не тот товар.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ОшибкаНеПривязанаУпаковка" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: у штрихкода не указана упаковка.'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: у ШК не указана упак.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ОшибкаНеТаСерия" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: отсканирована не та серия.'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: отск. не та серия.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ОшибкаНеверноеКоличество" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: неверное количество.'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: неверное кол-во.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ОшибкаКоличествоБольшеТребуемого" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: количество больше требуемого.'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Ошибка: кол-во больше треб.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокВыбОперацию" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Выберите операцию'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Выб. операцию'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ПодсказкаОтскШКЗоныПриемки" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Отсканируйте ШК зоны приемки'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Отск. ШК зоны приемки'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ПодсказкаОтскШКЯчейки" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Отсканируйте ШК ячейки'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Отск. ШК ячейки'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ПодсказкаОтскШКТовара" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Отсканируйте ШК товара'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Отск. ШК товара'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ПодсказкаОтскШКСерии" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Отсканируйте ШК серии'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Отск. ШК серии'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокПолучИнформации" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Получение информации'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Получ. информации'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ПодсказкаОтскШКТовараЯчейки" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Отсканируйте штрихкод товара или ячейки.'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Отск. ШК товара или ячейки.'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокВыбЗонуОтгрузки" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Выберите зону отгрузки'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Выб.зону отгрузки'");
		КонецЕсли;
	ИначеЕсли ИдНадписи = "ЗаголовокВыбЗонуПриемки" Тогда
		Если РазрешениеЭкрана = _320х320 Тогда
			ТекстНадписи = НСтр("ru = 'Выберите зону приемки'");
		ИначеЕсли РазрешениеЭкрана = _240х320 Тогда
			ТекстНадписи = НСтр("ru = 'Выб.зону приемки'");
		КонецЕсли;
	КонецЕсли; 

	НоваяСтрока = Форма.ТекстыНадписейЗаголовков.Добавить();
	НоваяСтрока.ИдНадписи = ИдНадписи;
	НоваяСтрока.ТекстНадписи = ТекстНадписи;
	
КонецПроцедуры

Процедура ЗагрузитьТекстыНадписейЗаголовковФормы(Форма)
	
	Форма.ТекстыНадписейЗаголовков.Очистить();
	
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВсеЗаданияНаОтбор");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокМоиЗаданияНаОтбор");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВсеЗаданияНаРазмещения");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокМоиЗаданияНаРазмещения");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВсеЗаданияНаПеремещение");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокМоиЗаданияНаПеремещение");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВсеЗаданияНаПересчет");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокМоиЗаданияНаПересчет");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВсеЗаданияНаПриемку");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокМоиЗаданияНаПриемку");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВсеЗаданияНаПроверку");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокМоиЗаданияНаПроверку");
	ДобавитьТекстНадписиЭлемента(Форма, "ОшибкаНеТаЯчейка");
	ДобавитьТекстНадписиЭлемента(Форма, "ОшибкаНеТотТовар");
	ДобавитьТекстНадписиЭлемента(Форма, "ОшибкаНеПривязанаУпаковка");
	ДобавитьТекстНадписиЭлемента(Форма, "ОшибкаНеТаСерия");
	ДобавитьТекстНадписиЭлемента(Форма, "ОшибкаНеверноеКоличество");
	ДобавитьТекстНадписиЭлемента(Форма, "ОшибкаКоличествоБольшеТребуемого");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВыбОперацию");
	ДобавитьТекстНадписиЭлемента(Форма, "ПодсказкаОтскШКЗоныПриемки");
	ДобавитьТекстНадписиЭлемента(Форма, "ПодсказкаОтскШКЯчейки");
	ДобавитьТекстНадписиЭлемента(Форма, "ПодсказкаОтскШКТовара");
	ДобавитьТекстНадписиЭлемента(Форма, "ПодсказкаОтскШКСерии");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокПолучИнформации");
	ДобавитьТекстНадписиЭлемента(Форма, "ПодсказкаОтскШКТовараЯчейки");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВыбЗонуОтгрузки");
	ДобавитьТекстНадписиЭлемента(Форма, "ЗаголовокВыбЗонуПриемки");
	
КонецПроцедуры

Функция ТекстНадписиЗаголовкаЭлементаФормы(ИдНадписи, Форма)
	
	Отбор = Новый Структура("ИдНадписи", ИдНадписи);
	
	МассивСтрок = Форма.ТекстыНадписейЗаголовков.НайтиСтроки(Отбор);
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат МассивСтрок[0].ТекстНадписи;
	
КонецФункции

// Процедура устанавливает значения реквизитов формы, необходимые для учета особенностей
// отображения форм на устройствах с различными расширениями экрана.
//
Процедура УстановитьНастройкиДляРазрешенияЭкрана(Форма) Экспорт
	
	Если Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана._240х320 Тогда
		
		Форма.ДлинаТекстаЗаголовкаФормы = 24;
		Форма.ДлинаТекстаЗаголовкаФормыДляСравнения = 24;
		
	ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана._320х320 Тогда
		
		Форма.ДлинаТекстаЗаголовкаФормы = 35;
		Форма.ДлинаТекстаЗаголовкаФормыДляСравнения = 28;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает массив пользователей - исполнителей складских заданий.
// В массив пользователей включается пустая ссылка.
//
// Параметры:
//	Пользователь - СправочникСсылка.Пользователи - исполнитель складского задания.
//
// Возвращаемое значение:
//	ФиксированныйМассив. Исполнители складских заданий.
//
Функция ВсеИсполнителиСкладскихЗаданий(Пользователь) Экспорт
	
	ИсполнителиЗаданий = Новый Массив;
	ИсполнителиЗаданий.Добавить(Пользователь);
	ИсполнителиЗаданий.Добавить(Справочники.Пользователи.ПустаяСсылка());
	
	Возврат Новый ФиксированныйМассив(ИсполнителиЗаданий);
	
КонецФункции

// Функция возвращает массив пользователей - исполнителей складских заданий.
//
// Параметры:
//	Пользователь - СправочникСсылка.Пользователи - текущий исполнитель.
//
// Возвращаемое значение:
//	Массив. Исполнитель складских заданий.
//
Функция ИсполнителиСкладскихЗаданий(Пользователь) Экспорт
	
	ИсполнителиЗаданий = Новый Массив;
	ИсполнителиЗаданий.Добавить(Пользователь);
	
	Возврат Новый ФиксированныйМассив(ИсполнителиЗаданий);
	
КонецФункции

// Функция возвращает ссылку на вид складской операции в зависимости от строкового описания
// вида операции (вида документов).
//
// Параметры:
//	ВидОперации - Строка - вид операции.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ВидыОперацийОтбораРазмещенияТоваров. Вид складской операции.
//
Функция ВидОперацииОтбораРазмещения(ВидОперации)
	
	Если ВидОперации = "Отбор" Тогда
		
		Возврат Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор;
		
	ИначеЕсли ВидОперации = "Размещение" Тогда
		
		Возврат Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение;
		
	ИначеЕсли ВидОперации = "Перемещение" Тогда
		
		Возврат Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция возвращает число - количество документов-заданий доступных для выполнения
// работником склада.
//
// Параметры:
//	ТипЗадания - Строка - тип складского задания,
//	Исполнители - Массив - список исполнителей заданий,
//	Склад - СправочникСсылка.Склады - склад, для которого возвращается количество заданий,
//	Помещение - СправочникСсылка.СкладскиеПомещения - помещение склада.
//
// Возвращаемое значение:
//	Число. Количество доступных для выполнения заданий заданного вида.
//
Функция КоличествоСкладскихЗаданийДляВыполнения(ТипЗадания, Исполнители, Склад, Помещение) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("Исполнители", Исполнители);
	
	Если ТипЗадания = "Отбор" Или ТипЗадания = "Размещение" 
		Или ТипЗадания = "Перемещение" Тогда
		
		ВидОперации = ВидОперацииОтбораРазмещения(ТипЗадания);
		
		Запрос.УстановитьПараметр("ВидОперации", ВидОперации);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
		|ГДЕ
		|	ОтборРазмещениеТоваров.ВидОперации = &ВидОперации
		|	И ОтборРазмещениеТоваров.Проведен
		|	И ОтборРазмещениеТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтборовРазмещенийТоваров.Подготовлено)
		|	И ОтборРазмещениеТоваров.Исполнитель В(&Исполнители)
		|	И ОтборРазмещениеТоваров.Склад = &Склад
		|	И ОтборРазмещениеТоваров.Помещение = &Помещение";
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов
		|ИЗ
		|	Документ.ПересчетТоваров КАК ПересчетТоваров
		|ГДЕ
		|	ПересчетТоваров.Проведен
		|	И ПересчетТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПересчетовТоваров.ВРаботе)
		|	И ПересчетТоваров.Исполнитель В(&Исполнители)
		|	И ПересчетТоваров.Склад = &Склад
		|	И ПересчетТоваров.Помещение = &Помещение";
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Проведен
		|	И ПриходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.КПоступлению)
		|	И ПриходныйОрдерНаТовары.Склад = &Склад
		|	И ПриходныйОрдерНаТовары.Помещение = &Помещение
		|	И ПриходныйОрдерНаТовары.Ответственный В(&Исполнители)";
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК КоличествоДокументов
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|ГДЕ
		|	РасходныйОрдерНаТовары.Проведен
		|	И РасходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.КПроверке)
		|	И РасходныйОрдерНаТовары.Склад = &Склад
		|	И РасходныйОрдерНаТовары.Помещение = &Помещение
		|	И РасходныйОрдерНаТовары.Контролер В(&Исполнители)";
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоДокументов;
	
КонецФункции

// Процедура устанавливает заголовок элемента основного меню выбора операции на форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма обработки рабочего места,
//	ИмяЭлемента - Строка - имя элемента,
//	ЗаголовокЭлемента - Строка - заголовок элемента,
//	КоличествоЗаданий - Число - количество документов-заданий.
//
Процедура УстановитьСвойстваЭлементаОсновногоМеню(Форма, ИмяЭлемента, ЗаголовокЭлемента, КоличествоЗаданий)
	
	Элемент = Форма.Элементы[ИмяЭлемента];
	
	ЕстьЗадания = (КоличествоЗаданий > 0);
	КоличествоДокументов = ?(КоличествоЗаданий > 0, "(" + КоличествоЗаданий + ")", "");
	
	// Установить заголовок.
	
	// Текст заголовка элемента основного меню состоит из нескольких частей:
	// КодГорячейКлавиши.ИмяЭлемента[ (КоличествоЗаданий)], например:
	// "0.Отбор (3)".
	//
	// В данной процедуре устанавливаются только значения частей: ИмяЭлемента и КоличествоЗаданий.
	
	// ... проверить, есть ли горячая клавиша у команды элемента.
	СочетаниеКлавиш = Форма.Команды[ИмяЭлемента].СочетаниеКлавиш;
	
	ПредставлениеКлавиши = ПредставлениеСочетанияКлавиш(СочетаниеКлавиш);
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		?(ЗначениеЗаполнено(ПредставлениеКлавиши), НСтр("ru='%1.%2 %3'"), НСтр("ru='%2 %3'")), 
		ПредставлениеКлавиши,
		ЗаголовокЭлемента, 
		КоличествоДокументов);
	
	Элемент.Заголовок = ТекстЗаголовка;
	
	// Установить доступность.
	Элемент.Доступность = ЕстьЗадания;
	
КонецПроцедуры

// Возвращает строковое представление горячей клавиши.
//
// Параметры:
//	ГорячаяКлавиша - Клавиша - клавиша.
//
// Возвращаемое значение:
//	Строка. Представление горячей клавиши.
//
Функция ПредставлениеСочетанияКлавиш(СочетаниеКлавш)
	
	Если СочетаниеКлавш = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если СочетаниеКлавш.Клавиша = Клавиша.Нет Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрЗаменить(Строка(СочетаниеКлавш.Клавиша), "_", "");
	
КонецФункции

// Процедура обновляет заголовки элементов основного меню выбора типа операции.
//
Процедура ОбновитьОсновноеМеню(Форма) Экспорт
	
	ВсеИсполнители = ВсеИсполнителиСкладскихЗаданий(Форма.Пользователь);
	
	// Приемка
	КоличествоЗаданий = КоличествоСкладскихЗаданийДляВыполнения(
		"Приемка", 
		ВсеИсполнители, 
		Форма.Склад, 
		Форма.Помещение);
	
	УстановитьСвойстваЭлементаОсновногоМеню(
		Форма,
		"ОсновноеМенюПриемка", 
		НСтр("ru = 'Приемка'"), 
		КоличествоЗаданий);
	
	// Размещение
	КоличествоЗаданий = КоличествоСкладскихЗаданийДляВыполнения(
		"Размещение", 
		ВсеИсполнители, 
		Форма.Склад, 
		Форма.Помещение);
	
	УстановитьСвойстваЭлементаОсновногоМеню(
		Форма,
		"ОсновноеМенюРазмещение", 
		НСтр("ru = 'Размещение'"), 
		КоличествоЗаданий);
	
	// Отбор
	КоличествоЗаданий = КоличествоСкладскихЗаданийДляВыполнения(
		"Отбор", 
		ВсеИсполнители, 
		Форма.Склад, 
		Форма.Помещение);
	
	УстановитьСвойстваЭлементаОсновногоМеню(
		Форма,
		"ОсновноеМенюОтбор", 
		НСтр("ru = 'Отбор'"), 
		КоличествоЗаданий);
	
	// Проверка отбора
	КоличествоЗаданий = КоличествоСкладскихЗаданийДляВыполнения(
		"ПроверкаОтбора", 
		ВсеИсполнители, 
		Форма.Склад, 
		Форма.Помещение);
	
	УстановитьСвойстваЭлементаОсновногоМеню(
		Форма,
		"ОсновноеМенюПроверкаОтбора", 
		НСтр("ru = 'Проверка отбора'"), 
		КоличествоЗаданий);
	
	// Пересчет
	КоличествоЗаданий = КоличествоСкладскихЗаданийДляВыполнения(
		"Пересчет", 
		ВсеИсполнители, 
		Форма.Склад, 
		Форма.Помещение);
	
	УстановитьСвойстваЭлементаОсновногоМеню(
		Форма,
		"ОсновноеМенюПересчет", 
		НСтр("ru = 'Пересчет'"), 
		КоличествоЗаданий);
	
	// Перемещение
	КоличествоЗаданий = КоличествоСкладскихЗаданийДляВыполнения(
		"Перемещение", 
		ВсеИсполнители, 
		Форма.Склад, 
		Форма.Помещение);
	
	УстановитьСвойстваЭлементаОсновногоМеню(
		Форма,
		"ОсновноеМенюПеремещение", 
		НСтр("ru = 'Перемещение'"), 
		КоличествоЗаданий);
	
КонецПроцедуры

// Процедура отображает все доступные (или доступные только текущему исполнителю) 
// складские задания в списке заданий.
//
Процедура ОтобразитьВсеТолькоСвоиСкладскиеЗадания(Форма) Экспорт
	
	// Установить пометку у кнопки.
	Форма.Элементы.ЗаданияПоказатьВсе.Пометка = Не (Форма.Элементы.ЗаданияПоказатьВсе.Пометка);
	ВсеЗадания = Форма.Элементы.ЗаданияПоказатьВсе.Пометка;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	
	Если ВсеЗадания Тогда
		Исполнители = ВсеИсполнителиСкладскихЗаданий(Форма.Пользователь);
	Иначе
		Исполнители = ИсполнителиСкладскихЗаданий(Форма.Пользователь);
	КонецЕсли;
	
	КоличествоДокументов = КоличествоСкладскихЗаданийДляВыполнения(
		Форма.ПараметрыРежима.ТипЗадания, 
		Исполнители, 
		Форма.Склад, 
		Форма.Помещение);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Форма.Задания.Отбор,
		"Исполнитель",
		Исполнители,
		ВидСравненияКомпоновкиДанных.ВСписке);
	
	УстановитьЗаголовокСпискаЗаданий(Форма, КоличествоДокументов);
	
КонецПроцедуры

// Переключает панель страницы формы на страницу выбора задания. Устанавливает параметры динамического
// списка заданий.
//
// Параметры:
// Форма - УправляемаяФорма - форма рабочего места,
// ТипЗадания - Строка - тип складского задания.
//
Процедура ПерейтиКВыборуЗадания(Форма, ТипЗадания) Экспорт
	
	Задания = Форма.Задания;
	ПараметрыРежима = Форма.ПараметрыРежима;
	
	// Установить параметры текущего режима.
	ПараметрыРежима.Режим = "ВыборЗадания";
	ПараметрыРежима.ТипЗадания = ТипЗадания;
	
	// Установить текст заголовка формы - вид заданий и их количество.
	ВсеИсполнители = ВсеИсполнителиСкладскихЗаданий(Форма.Пользователь);
	
	КоличествоДокументов = КоличествоСкладскихЗаданийДляВыполнения(
		ТипЗадания, 
		ВсеИсполнители, 
		Форма.Склад, 
		Форма.Помещение);
	
	УстановитьЗаголовокСпискаЗаданий(Форма, КоличествоДокументов);
	
	// Установить текст заголовка колонки "Вес".
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Вес, %1'"), 
		Форма.ЕдиницаИзмеренияВеса);
	
	Форма.Элементы.ЗаданияВес.Заголовок = ТекстЗаголовка;
	
	// Установить параметры списка заданий.
	Задания.Порядок.Элементы.Очистить();
	
	Задания.ТекстЗапроса = ТекстЗапросаСпискаЗаданий(ТипЗадания);
	Задания.ОсновнаяТаблица = ОсновнаяТаблицаСпискаЗаданий(ТипЗадания);
	Задания.ДинамическоеСчитываниеДанных = Истина;
	
	// ... установить отборы списка заданий.
	Если ТипЗадания = "Отбор" Тогда
		
		ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор;
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение;
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение;
		
	КонецЕсли;
	
	Если ТипЗадания = "Отбор" Или ТипЗадания = "Размещение" Или ТипЗадания = "Перемещение" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Задания.Отбор,
			"ВидОперации",
			ВидОперации,
			ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Задания.Отбор,
		"Склад",
		Форма.Склад,
		ВидСравненияКомпоновкиДанных.Равно);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Задания.Отбор,
		"Помещение",
		Форма.Помещение,
		ВидСравненияКомпоновкиДанных.Равно);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Задания.Отбор,
		"Исполнитель",
		ВсеИсполнители,
		ВидСравненияКомпоновкиДанных.ВСписке);
	
	// Установить параметры кнопки управления отображением списка заданий (показывать все, 
	// показывать только задания текущего исполнителя)
	Форма.Элементы.ЗаданияПоказатьВсе.Пометка = Истина;
	
	Если ТипЗадания = "ПроверкаОтбора" Тогда
		
		ЭлементПорядка = Задания.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Использование = Истина;
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ПорядокДоставки");
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		
	КонецЕсли;
	
	ПерейтиНаСтраницу(Форма, "СтраницаВыборЗадания");
	
КонецПроцедуры

Функция ТекстЗапросаСпискаЗаданий(ТипЗадания)
	
	ТекстЗапроса = "";
	
	Если ТипЗадания = "Отбор" Или ТипЗадания = "Перемещение" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОтборРазмещениеТоваров.Ссылка,
		|	ОтборРазмещениеТоваров.ВидОперации,
		|	ОтборРазмещениеТоваров.Номер,
		|	ОтборРазмещениеТоваров.Исполнитель,
		|	ОтборРазмещениеТоваров.Статус,
		|	ОтборРазмещениеТоваров.Проведен,
		|	ОтборРазмещениеТоваров.Склад,
		|	ОтборРазмещениеТоваров.Помещение,
		|	ТоварыДляОтбора.Количество,
		|	ТоварыДляОтбора.Объем,
		|	ТоварыДляОтбора.Вес
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ОтборТоваров.Ссылка КАК Ссылка,
		|			СУММА(ОтборТоваров.КоличествоУпаковок) КАК Количество,
		|			СУММА(ОтборТоваров.КоличествоУпаковок * ОтборТоваров.ОбъемУпаковки) КАК Объем,
		|			СУММА(ОтборТоваров.КоличествоУпаковок * ОтборТоваров.ВесУпаковки) КАК Вес
		|		ИЗ
		|			Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК ОтборТоваров
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ОтборТоваров.Ссылка) КАК ТоварыДляОтбора
		|		ПО ОтборРазмещениеТоваров.Ссылка = ТоварыДляОтбора.Ссылка
		|ГДЕ
		|	ОтборРазмещениеТоваров.Проведен
		|	И ОтборРазмещениеТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтборовРазмещенийТоваров.Подготовлено)";
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОтборРазмещениеТоваров.Ссылка,
		|	ОтборРазмещениеТоваров.ВидОперации,
		|	ОтборРазмещениеТоваров.Номер,
		|	ОтборРазмещениеТоваров.Исполнитель,
		|	ОтборРазмещениеТоваров.Статус,
		|	ОтборРазмещениеТоваров.Проведен,
		|	ОтборРазмещениеТоваров.Склад,
		|	ОтборРазмещениеТоваров.Помещение,
		|	ТоварыДляРазмещения.Количество,
		|	ТоварыДляРазмещения.Объем,
		|	ТоварыДляРазмещения.Вес
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров КАК ОтборРазмещениеТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РазмещениеТоваров.Ссылка КАК Ссылка,
		|			СУММА(РазмещениеТоваров.КоличествоУпаковок) КАК Количество,
		|			СУММА(РазмещениеТоваров.КоличествоУпаковок * РазмещениеТоваров.ОбъемУпаковки) КАК Объем,
		|			СУММА(РазмещениеТоваров.КоличествоУпаковок * РазмещениеТоваров.ВесУпаковки) КАК Вес
		|		ИЗ
		|			Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК РазмещениеТоваров
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РазмещениеТоваров.Ссылка) КАК ТоварыДляРазмещения
		|		ПО ОтборРазмещениеТоваров.Ссылка = ТоварыДляРазмещения.Ссылка
		|ГДЕ
		|	ОтборРазмещениеТоваров.Проведен
		|	И ОтборРазмещениеТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтборовРазмещенийТоваров.Подготовлено)";
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПересчетТоваров.Ссылка,
		|	ПересчетТоваров.Номер,
		|	ПересчетТоваров.Исполнитель,
		|	ПересчетТоваров.Склад,
		|	ПересчетТоваров.Помещение,
		|	ПересчетТоваров.Статус,
		|	ПересчетТоваров.Проведен,
		|	ТоварыПересчета.Количество,
		|	ТоварыПересчета.Вес,
		|	ТоварыПересчета.Объем
		|ИЗ
		|	Документ.ПересчетТоваров КАК ПересчетТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПересчетТоваровТовары.Ссылка КАК Ссылка,
		|			СУММА(ПересчетТоваровТовары.КоличествоУпаковок) КАК Количество,
		|			СУММА(ПересчетТоваровТовары.КоличествоУпаковок * ПересчетТоваровТовары.Упаковка.Объем) КАК Объем,
		|			СУММА(ПересчетТоваровТовары.КоличествоУпаковок * ПересчетТоваровТовары.Упаковка.Вес) КАК Вес
		|		ИЗ
		|			Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПересчетТоваровТовары.Ссылка) КАК ТоварыПересчета
		|		ПО ПересчетТоваров.Ссылка = ТоварыПересчета.Ссылка
		|ГДЕ
		|	ПересчетТоваров.Проведен
		|	И ПересчетТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПересчетовТоваров.ВРаботе)";
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РасходныйОрдерНаТовары.Ссылка,
		|	РасходныйОрдерНаТовары.Номер,
		|	РасходныйОрдерНаТовары.Статус,
		|	РасходныйОрдерНаТовары.Проведен,
		|	РасходныйОрдерНаТовары.Склад,
		|	РасходныйОрдерНаТовары.Помещение,
		|	РасходныйОрдерНаТовары.Контролер КАК Исполнитель,
		|	ТоварыОрдера.Количество,
		|	ТоварыОрдера.Объем,
		|	ТоварыОрдера.Вес,
		|	РасходныйОрдерНаТовары.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку,
		|	РасходныйОрдерНаТовары.ПорядокДоставки КАК ПорядокДоставки
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			РасходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка,
		|			СУММА(РасходныйОрдерНаТоварыТовары.КоличествоУпаковок) КАК Количество,
		|			СУММА(РасходныйОрдерНаТоварыТовары.КоличествоУпаковок * РасходныйОрдерНаТоварыТовары.Упаковка.Объем) КАК Объем,
		|			СУММА(РасходныйОрдерНаТоварыТовары.КоличествоУпаковок * РасходныйОрдерНаТоварыТовары.Упаковка.Вес) КАК Вес
		|		ИЗ
		|			Документ.РасходныйОрдерНаТовары.Товары КАК РасходныйОрдерНаТоварыТовары
		|		
		|		СГРУППИРОВАТЬ ПО
		|			РасходныйОрдерНаТоварыТовары.Ссылка) КАК ТоварыОрдера
		|		ПО РасходныйОрдерНаТовары.Ссылка = ТоварыОрдера.Ссылка
		|ГДЕ
		|	РасходныйОрдерНаТовары.Проведен
		|	И РасходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.КПроверке)";
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПриходныйОрдерНаТовары.Ссылка,
		|	ПриходныйОрдерНаТовары.Номер,
		|	ПриходныйОрдерНаТовары.Статус,
		|	ПриходныйОрдерНаТовары.Проведен,
		|	ПриходныйОрдерНаТовары.Склад,
		|	ПриходныйОрдерНаТовары.Помещение,
		|	ПриходныйОрдерНаТовары.Ответственный КАК Исполнитель,
		|	ТоварыОрдера.Количество,
		|	ТоварыОрдера.Объем,
		|	ТоварыОрдера.Вес
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПриходныйОрдерНаТоварыТовары.Ссылка КАК Ссылка,
		|			СУММА(ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок) КАК Количество,
		|			СУММА(ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок * ПриходныйОрдерНаТоварыТовары.Упаковка.Объем) КАК Объем,
		|			СУММА(ПриходныйОрдерНаТоварыТовары.КоличествоУпаковок * ПриходныйОрдерНаТоварыТовары.Упаковка.Вес) КАК Вес
		|		ИЗ
		|			Документ.ПриходныйОрдерНаТовары.Товары КАК ПриходныйОрдерНаТоварыТовары
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПриходныйОрдерНаТоварыТовары.Ссылка) КАК ТоварыОрдера
		|		ПО ПриходныйОрдерНаТовары.Ссылка = ТоварыОрдера.Ссылка
		|ГДЕ
		|	ПриходныйОрдерНаТовары.Проведен
		|	И ПриходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПриходныхОрдеров.КПоступлению)";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОсновнаяТаблицаСпискаЗаданий(ВидДокументов)
	
	Если ВидДокументов = "Отбор" Или ВидДокументов = "Размещение" Или ВидДокументов = "Перемещение" Тогда
		
		Возврат "Документ.ОтборРазмещениеТоваров";
		
	ИначеЕсли ВидДокументов = "Пересчет" Тогда
		
		Возврат "Документ.ПересчетТоваров";
		
	ИначеЕсли ВидДокументов = "ПроверкаОтбора" Тогда
		
		Возврат "Документ.РасходныйОрдерНаТовары";
		
	ИначеЕсли ВидДокументов = "Приемка" Тогда
		
		Возврат "Документ.ПриходныйОрдерНаТовары";
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Вызывается при вводе количества на странице предназначенной для ручного указания количества отсканированных товаров.
//
Процедура ВводКоличества(Форма) Экспорт
	
	ПараметрыРежима      = Форма.ПараметрыРежима;
	ПараметрСканирования = Форма.ПараметрыРежима.ПараметрСканирования;
	ЭтоНаборТоваров      = Форма.ПараметрыРежима.НаборТоваров;
	
	ПерейтиКПараметруСканирования(Форма, "Количество");
	ПриСканированииЗначения(Форма, Форма.ВводКоличестваКоличество);
	
	Если ЭтоНаборТоваров Или Не ВсеТоварыОтсканированы(Форма) Тогда
		
		ПараметрыРежима.Режим = "Сканирование";
		
		Если ПараметрыРежима.ПараметрСканирования = "Количество" Тогда
			ПараметрыРежима.ПараметрСканирования = ПараметрСканирования;
		КонецЕсли;
		
		ПерейтиНаСтраницу(Форма, "СтраницаСканирование");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерейтиКПараметруСканирования(Форма, ИмяПараметра)
	
	Форма.ПараметрыРежима.ПараметрСканирования = ИмяПараметра;
	
КонецПроцедуры

Функция СовпадаетСТоваромСтрокиСканирования(СтрокаСканирования, Товар)
	
	Возврат (СтрокаСканирования.Номенклатура = Товар.Номенклатура) И (СтрокаСканирования.Характеристика = Товар.Характеристика) 
	И (СтрокаСканирования.Упаковка = Товар.Упаковка);
	
КонецФункции

Процедура ЗаполнитьПараметрыСканированногоТовара(СтрокаСканирования, Товар)
	
	СтрокаСканирования.СкНоменклатура   = Товар.Номенклатура;
	СтрокаСканирования.СкХарактеристика = Товар.Характеристика;
	СтрокаСканирования.СкУпаковка       = Товар.Упаковка;
	
КонецПроцедуры

// Проверяет, является ли введенный вручную срок годности серии корректным.
//
// Параметры:
//	ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры,
//	СрокГодностиСтрокой - Строка - срок годности серии строкой,
//	СрокГодности - Неопределено - переменная в которую записывается дата срока годности полученная, из строки.
//
// Возвращаемое значение:
//	Булево. Истина - срок годности корерктный, Ложь - нет.
//
Функция СрокГодностиСерииКорректный(ВидНоменклатуры, Знач СрокГодностиСтрокой, СрокГодности = Неопределено)
	
	СрокГодностиСтрокой = СокрЛП(СрокГодностиСтрокой);
	ДатаСтрокой = "";
	
	ПараметрыСерийНоменклатуры = Справочники.ВидыНоменклатуры.ПараметрыСерийНоменклатуры(ВидНоменклатуры);
	
	Если ПараметрыСерийНоменклатуры.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней Тогда
		// dd.MM.yy
		ДатаСтрокой = "20" + Прав(СрокГодностиСтрокой, 2) + Сред(СрокГодностиСтрокой, 4, 2) + Лев(СрокГодностиСтрокой, 2) + "000000";
	ИначеЕсли ПараметрыСерийНоменклатуры.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоЧасов Тогда
		// dd.MM.yy-HH
		ДатаСтрокой = "20" + Сред(СрокГодностиСтрокой, 7, 2) + Сред(СрокГодностиСтрокой, 4, 2) + Лев(СрокГодностиСтрокой, 2) + Прав(СрокГодностиСтрокой, 2) + "0000";
	КонецЕсли;
	
	Попытка
		СрокГодности = Дата(ДатаСтрокой);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Устанавливает свойства поля ввода срока годности серии номенклатуры на странице "СтраницаВыборЗначения".
//
// Параметры:
//	Форма - УправляемаФорма - фомра рабочего места,
//	Номенклатура - СправочникСсылка.Номенклатура - номенклатура.
//
Процедура УстановитьСвойстваСрокаГодностиСерии(Форма, Номенклатура)
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.СрокГодностиСерии.Маска = "";
	
	ВидНоменклатуры = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Номенклатура, "ВидНоменклатуры");
	
	ПараметрыСерийНоменклатуры = Справочники.ВидыНоменклатуры.ПараметрыСерийНоменклатуры(ВидНоменклатуры);
	
	Если НЕ ПараметрыСерийНоменклатуры.ИспользоватьСрокГодностиСерии Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСерийНоменклатуры.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоДней Тогда
		Маска = "99.99.99";
	ИначеЕсли ПараметрыСерийНоменклатуры.ТочностьУказанияСрокаГодностиСерии = Перечисления.ТочностиУказанияСрокаГодности.СТочностьюДоЧасов Тогда
		Маска = "99.99.99-99";
	КонецЕсли;
	
	Форма.Элементы.СрокГодностиСерии.Маска = Маска;
	
КонецПроцедуры

Процедура ПриСканированииЯчейки(Форма, ШтрихкодЯчейки, ЕстьОшибки)
	
	Объект          = Форма.Объект;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ПараметрыРежима = Форма.ПараметрыРежима;
	
	Ячейка = НайтиЯчейкуПоШтрихкоду(ШтрихкодЯчейки);
	
	Если Не ЗначениеЗаполнено(Ячейка) Тогда
		
		ПараметрыЯчейки = НайтиЯчейкуПоКоду(Объект.Склад, Объект.Помещение, ШтрихкодЯчейки);
		
		Если ПараметрыЯчейки.КодВозврата = 0 Тогда
			ЕстьОшибки = Истина;
		Иначе
			Ячейка = ПараметрыЯчейки.Ячейка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
		
		Если ЭтоНаборТоваров Тогда
			
			// Отсканировали ячейку зоны приемки.
			Если ЭтоЯчейкаЗоныПриемки(Объект.Склад, Объект.Помещение, Ячейка) Тогда
				
				Форма.ТекущаяСтрокаСканирования.СкЯчейка = Ячейка;
				ПараметрыРежима.ЗонаПриемки = Ячейка;
				
			Иначе
				
				ЕстьОшибки = Истина;
				
			КонецЕсли;
			
		Иначе
			
			Если Форма.ТекущаяСтрокаСканирования.Ячейка <> Ячейка Тогда
				ЕстьОшибки = Истина;
			Иначе
				Форма.ТекущаяСтрокаСканирования.СкЯчейка = Форма.ТекущаяСтрокаСканирования.Ячейка;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСканированииТовара(Форма, ШтрихкодТовара, Товар, ЕстьОшибки)
	
	Объект          = Форма.Объект;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания      = Форма.ПараметрыРежима.ТипЗадания;
	
	ЭтоПересчетТоваров = (ТипЗадания = "Пересчет");
	ЭтоПроверкаОтбора  = (ТипЗадания = "ПроверкаОтбора");
	
	Товар = НайтиТовар(ШтрихкодТовара);
	
	Если Товар.КодВозврата = 0 Тогда
		
		ЕстьОшибки = Истина;
		Возврат;
		
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
		
		УстановитьСвойстваСрокаГодностиСерии(Форма, Товар.Номенклатура);
		
		СтатусУказанияСерий = НоменклатураСервер.СтатусУказанияСерии(
			Объект.Склад, 
			Товар.Номенклатура, 
			"УчитыватьОстаткиСерий");
		
		СерииНеУказываются = СерииНеУказываются(Форма.ТекущаяСтрокаСканирования.СтатусУказанияСерий);
		
		Если ЭтоНаборТоваров Тогда
			
			Если СовпадаетСТоваромСтрокиСканирования(Форма.ТекущаяСтрокаСканирования, Товар) Тогда
				
				Если СерииНеУказываются Тогда
					
					Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано + 1;
					
				КонецЕсли;
				
			Иначе
				
				Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
				
				ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, Товар);
				ЗаполнитьПараметрыСканированногоТовара(Форма.ТекущаяСтрокаСканирования, Товар);
				
				Форма.ТекущаяСтрокаСканирования.СкЯчейка = ПараметрыРежима.ЗонаПриемки;
				Форма.ТекущаяСтрокаСканирования.СтатусУказанияСерий = СтатусУказанияСерий;
				
				Если СерииНеУказываются(СтатусУказанияСерий) Тогда
					
					Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоПересчетТоваров Тогда
			
			Если СовпадаетСТоваромСтрокиСканирования(Форма.ТекущаяСтрокаСканирования, Товар) Тогда
				
				Если СерииНеУказываются Тогда
					
					Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано + 1;
					
				КонецЕсли;
				
			Иначе
				
				ТекущаяЯчейка = Форма.ТекущаяСтрокаСканирования.Ячейка;
				
				Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
				Форма.ТекущаяСтрокаСканирования.Ячейка = ТекущаяЯчейка;
				Форма.ТекущаяСтрокаСканирования.СкЯчейка = ТекущаяЯчейка;
				
				ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, Товар);
				ЗаполнитьПараметрыСканированногоТовара(Форма.ТекущаяСтрокаСканирования, Товар);
				
				Форма.ТекущаяСтрокаСканирования.СтатусУказанияСерий = СтатусУказанияСерий;
				Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = 0;
				
				Если СерииНеУказываются(СтатусУказанияСерий) Тогда
					
					Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = 1;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоПроверкаОтбора Тогда
			
			Если СовпадаетСТоваромСтрокиСканирования(Форма.ТекущаяСтрокаСканирования, Товар) Тогда
				
				ЗаполнитьПараметрыСканированногоТовара(Форма.ТекущаяСтрокаСканирования, Товар);
				
				Если СерииНеУказываются Тогда
					
					Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано + 1;
					
					Если Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано > Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокВДокументе Тогда
						
						Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокНеОтгружать = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано - Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокВДокументе;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Если СовпадаетСТоваромСтрокиСканирования(Форма.ТекущаяСтрокаСканирования, Товар) Тогда
					
					ЗаполнитьПараметрыСканированногоТовара(Форма.ТекущаяСтрокаСканирования, Товар);
					
					Если СерииНеУказываются(Форма.ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
						
						Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано + 1;
						
					КонецЕсли;
					
				Иначе
					
					ЕстьОшибки = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если СовпадаетСТоваромСтрокиСканирования(Форма.ТекущаяСтрокаСканирования, Товар) Тогда
				
				ЗаполнитьПараметрыСканированногоТовара(Форма.ТекущаяСтрокаСканирования, Товар);
				
				Если СерииНеУказываются Тогда
					
					Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано + 1;
					
				КонецЕсли;
				
			Иначе
				
				ЕстьОшибки = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СерииУказываютсяПриПланированииОтбора(СтатусУказанияСерий)
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(5);
	МассивСтатусов.Добавить(6);
	МассивСтатусов.Добавить(7);
	МассивСтатусов.Добавить(8);
	МассивСтатусов.Добавить(9);
	МассивСтатусов.Добавить(10);
	
	Возврат Не (МассивСтатусов.Найти(СтатусУказанияСерий) = Неопределено);
	
КонецФункции

Функция СерииУказываютсяПоФактуОтбора(СтатусУказанияСерий)
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(1);
	МассивСтатусов.Добавить(2);
	МассивСтатусов.Добавить(3);
	МассивСтатусов.Добавить(4);
	
	Возврат Не (МассивСтатусов.Найти(СтатусУказанияСерий) = Неопределено);
	
КонецФункции

Функция СерииНеУказываются(СтатусУказанияСерий)
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(0);
	МассивСтатусов.Добавить(11);
	МассивСтатусов.Добавить(12);
	
	Возврат Не (МассивСтатусов.Найти(СтатусУказанияСерий) = Неопределено);
	
КонецФункции

Процедура ПриСканированииСерии(Форма, ШтрихкодСерии, СрокГодностиСерии, ЕстьОшибки)
	
	Перем СрокГодности;
	
	Объект          = Форма.Объект;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания      = Форма.ПараметрыРежима.ТипЗадания;
	Режим           = Форма.ПараметрыРежима.Режим;
	
	ЭтоПересчетТоваров       = (ТипЗадания = "Пересчет");
	ЭтоПроверкаОтбораТоваров = (ТипЗадания = "ПроверкаОтбора");
	
	ВидНоменклатуры = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Форма.ТекущаяСтрокаСканирования.Номенклатура, "ВидНоменклатуры");
	ПараметрыСерий = Справочники.ВидыНоменклатуры.ПараметрыСерийНоменклатуры(ВидНоменклатуры);
	
	СерииУказываютсяПоФактуОтбора = СерииУказываютсяПоФактуОтбора(Форма.ТекущаяСтрокаСканирования.СтатусУказанияСерий);
	
	Если (Режим = "ВводЗначения") Тогда 
		
		НомерСерии = ШтрихкодСерии;
		
		Если ЗначениеЗаполнено(СрокГодностиСерии) Тогда
			
			Если Не СрокГодностиСерииКорректный(ВидНоменклатуры, СрокГодностиСерии, СрокГодности) Тогда
				
				ЕстьОшибки = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ИнформацияИзШтрихкодаСерии = Справочники.СерииНоменклатуры.ИнформацияИзШтрихкода(
			ШтрихкодСерии,
			ПараметрыСерий.ИспользоватьНомерСерии,
			ПараметрыСерий.ИспользоватьСрокГодностиСерии);
		
		НомерСерии   = ИнформацияИзШтрихкодаСерии.Номер;
		СрокГодности = ИнформацияИзШтрихкодаСерии.ГоденДо;
		
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
		
		ПараметрыСерии = НайтиСерию(НомерСерии, СрокГодности, ВидНоменклатуры);
		
		Если ПараметрыСерии.КодВозврата = 0 Тогда
			
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
		
		Если ЭтоНаборТоваров Или ЭтоПересчетТоваров Тогда
			
			Форма.ТекущаяСтрокаСканирования.Серия   = ПараметрыСерии.Серия;
			Форма.ТекущаяСтрокаСканирования.СкСерия = ПараметрыСерии.Серия;
			
			Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = 1;
			
		Иначе
			
			Если ЭтоПроверкаОтбораТоваров Тогда
				
				Форма.ТекущаяСтрокаСканирования.Серия   = ПараметрыСерии.Серия;
				Форма.ТекущаяСтрокаСканирования.СкСерия = ПараметрыСерии.Серия;
				
				Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано + 1;
				
			Иначе
				
				Если СерииУказываютсяПоФактуОтбора Тогда
					
					Форма.ТекущаяСтрокаСканирования.Серия   = ПараметрыСерии.Серия;
					Форма.ТекущаяСтрокаСканирования.СкСерия = ПараметрыСерии.Серия;
					
					Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано + 1;
					
				Иначе
					
					Если Форма.ТекущаяСтрокаСканирования.Серия <> ПараметрыСерии.Серия Тогда
						
						ЕстьОшибки = Истина;
						
					Иначе
						
						Форма.ТекущаяСтрокаСканирования.Серия   = ПараметрыСерии.Серия;
						Форма.ТекущаяСтрокаСканирования.СкСерия = ПараметрыСерии.Серия;
						
						Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано + 1;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСканированииКоличества(Форма, Количество, ЕстьОшибки)
	
	Объект          = Форма.Объект;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания      = Форма.ПараметрыРежима.ТипЗадания;
	Режим           = Форма.ПараметрыРежима.Режим;
	Элементы        = Форма.Элементы;
	
	Если ЭтоНаборТоваров Тогда
		
		Если Режим = "ВводКоличества" Тогда
			
			Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Количество;
			
		Иначе
			
			Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано + Количество;
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗадания = "Пересчет" Тогда
			
			Если Режим = "ВводКоличества" Тогда
				
				Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Количество;
				
			Иначе
				
				Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано + Количество;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
			
			Если Режим = "ВводКоличестваНеОтгружать" Тогда
				
				Если Количество > Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано Тогда
					
					ЕстьОшибки = Истина;
					
				Иначе
					
					Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокНеОтгружать = Количество;
					ПараметрыРежима.Режим = "ВводКоличества";
					
				КонецЕсли;
				
			Иначе
				
				КоличествоУпаковокОтсканировано = Количество;
				Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Количество;
				
				Если Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано > Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокВДокументе Тогда
					
					Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокНеОтгружать = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано - Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокВДокументе;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если Режим = "ВводКоличества" Тогда
				
				Если Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = Количество Тогда
					
					Элементы.СканированиеВвестиКоличество.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
					Возврат;
					
				КонецЕсли;
				
				КоличествоУпаковокОтсканировано = Количество;
				
			Иначе
				
				КоличествоУпаковокОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано + Количество;
				
			КонецЕсли;
			
			Если КоличествоУпаковокОтсканировано > Форма.ТекущаяСтрокаСканирования.КоличествоУпаковок Тогда
				
				ЕстьОшибки = Истина;
				
			Иначе
				
				Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано = КоличествоУпаковокОтсканировано;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняется при сканировании значения штрихкода товара, серии,
// или при вводе значения с помощью режима ручного ввода.
//
// Параметры:
//	Форма - УправляемаяФорма - форма рабочего места,
//	ЗначениеСканирования - Строка, Число - значение сканирования,
//	ДопЗначениеСканирования - Неопределено - доп. параметр, используется в том случае, если значение сканирования было введено вручную.
//
Процедура ПриСканированииЗначения(Форма, ЗначениеСканирования, ДопЗначениеСканирования = Неопределено) Экспорт
	
	Перем Товар;
	
	ЕстьОшибки = Ложь;
	
	Элементы             = Форма.Элементы;
	Объект               = Форма.Объект;
	ПараметрСканирования = Форма.ПараметрыРежима.ПараметрСканирования;
	
	Если Элементы.СтраницыФормы.ТекущаяСтраница <> Элементы.СтраницаСканирование Тогда
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаСканирование;
		ТекущийЭлемент = Элементы.СканированиеЯчейка;
		
	КонецЕсли;
	
	Элементы.СканированиеВвестиКоличество.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
	
	Если ПараметрСканирования = "Ячейка" Тогда
		
		ПриСканированииЯчейки(Форма, ЗначениеСканирования, ЕстьОшибки);
		
	ИначеЕсли ПараметрСканирования = "Номенклатура" Тогда
		
		ПриСканированииТовара(Форма, ЗначениеСканирования, Товар, ЕстьОшибки);
		
	ИначеЕсли ПараметрСканирования = "Серия" Тогда
		
		ПриСканированииСерии(Форма, ЗначениеСканирования, ДопЗначениеСканирования, ЕстьОшибки);
		
	ИначеЕсли ПараметрСканирования = "Количество" Тогда
		
		ПриСканированииКоличества(Форма, ЗначениеСканирования, ЕстьОшибки);
		
	КонецЕсли;
	
	// Очистить значения элементов на странице выбора значения.
	Форма.ШтрихкодПараметраСканирования = "";
	Форма.СрокГодностиСерии             = "";
	Форма.ВводКоличестваКоличество      = 0;
	Форма.СообщениеОбОшибке             = "";
	
	Если ЕстьОшибки Тогда
		
		ОбработатьОшибкуСканированияЗначения(Форма, ЗначениеСканирования, Товар);
		
	Иначе
		
		ПослеСканированияЗначения(Форма);
		
	КонецЕсли;
	
	Форма.ПараметрыРежима.Режим = "Сканирование";
	
КонецПроцедуры

Процедура ОбработатьОшибкуСканированияЗначения(Форма, ЗначениеСканирования, Товар)
	
	ПараметрСканирования = Форма.ПараметрыРежима.ПараметрСканирования;
	Элементы             = Форма.Элементы;
	РазрешениеЭкрана     = Форма.РазрешениеЭкрана;
	Режим                = Форма.ПараметрыРежима.Режим;
	ТипЗадания           = Форма.ПараметрыРежима.ТипЗадания;
	
	Если ПараметрСканирования = "Ячейка" Тогда
		
		ТекстОшибки = ТекстНадписиЗаголовкаЭлементаФормы("ОшибкаНеТаЯчейка", Форма);
		
	ИначеЕсли ПараметрСканирования = "Номенклатура" Тогда
		
		ТекстОшибки = ТекстНадписиЗаголовкаЭлементаФормы("ОшибкаНеТотТовар", Форма);
		
		Если Товар.ТипОшибки = "УпаковкаНеПривязанаКШтрихкоду" Тогда
			ТекстОшибки = ТекстНадписиЗаголовкаЭлементаФормы("ОшибкаНеПривязанаУпаковка", Форма);
		КонецЕсли;
		
	ИначеЕсли ПараметрСканирования = "Серия" Тогда
		
		ТекстОшибки = ТекстНадписиЗаголовкаЭлементаФормы("ОшибкаНеТаСерия", Форма);
		
	ИначеЕсли ПараметрСканирования = "Количество" Тогда
		
		Если ТипЗадания = "ПроверкаОтбора" Тогда
			
			Если Режим = "ВводКоличестваНеОтгружать" Тогда
				ТекстОшибки = ТекстНадписиЗаголовкаЭлементаФормы("ОшибкаНеверноеКоличество", Форма);
				Форма.ПараметрыРежима.Режим = "ВводКоличества";
			КонецЕсли;
			
		Иначе
			ТекстОшибки = ТекстНадписиЗаголовкаЭлементаФормы("ОшибкаКоличествоБольшеТребуемого", Форма);
		КонецЕсли;
		
		Элементы.СканированиеВвестиКоличество.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		Элементы.СканированиеВвестиКоличество.Заголовок = ЗначениеСканирования;
		
	КонецЕсли;
	
	ВывестиСообщениеОбОшибке(Форма, ТекстОшибки);
	ПерейтиКПараметруСканирования(Форма, ПараметрСканирования);
	
КонецПроцедуры

// Процедура вызывается после сканирования значения, выполняет дополнительные проверки
// и действия связанные с событием сканирования значения.
//
Процедура ПослеСканированияЗначения(Форма)
	
	ПараметрыРежима           = Форма.ПараметрыРежима;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ЭтоНаборТоваров           = Форма.ПараметрыРежима.НаборТоваров;
	ПараметрСканирования      = Форма.ПараметрыРежима.ПараметрСканирования;
	ТипЗадания                = Форма.ПараметрыРежима.ТипЗадания;
	
	ЭтоПересчетТоваров       = (ТипЗадания = "Пересчет");
	ЭтоПроверкаОтбораТоваров = (ТипЗадания = "ПроверкаОтбора");
	
	Если ЭтоНаборТоваров Тогда
		
		Если ПараметрСканирования = "Ячейка" Тогда
			
			ПерейтиКПараметруСканирования(Форма, "Номенклатура");
			
		ИначеЕсли ПараметрСканирования = "Номенклатура" Тогда
			
			Если ТекущаяСтрокаСканирования.СтатусУказанияСерий = 0 Тогда
				ДобавитьВОтсканированныеТовары(Форма);
			Иначе
				ПерейтиКСледующемуПараметруСканирования(Форма);
			КонецЕсли;
			
		ИначеЕсли ПараметрСканирования = "Серия" Тогда
			
			ДобавитьВОтсканированныеТовары(Форма);
			
			Если Форма.СхемаСканирования = "ТоварСерияТовар" Тогда
				
				ПерейтиКПараметруСканирования(Форма, "Номенклатура");
				
			КонецЕсли;
			
		ИначеЕсли ПараметрСканирования = "Количество" Тогда
			
			ДобавитьВОтсканированныеТовары(Форма);
			
		КонецЕсли;
		
	ИначеЕсли ЭтоПересчетТоваров Тогда
		
		Если ПараметрСканирования = "Ячейка" Тогда
			
			ПерейтиКСледующемуПараметруСканирования(Форма);
			
		ИначеЕсли ПараметрСканирования = "Номенклатура" Тогда
			
			Если ТекущаяСтрокаСканирования.СтатусУказанияСерий = 0 Тогда
				
				ДобавитьВОтсканированныеТовары(Форма);
				
			Иначе
				
				ПерейтиКСледующемуПараметруСканирования(Форма);
				
			КонецЕсли;
			
		ИначеЕсли ПараметрСканирования = "Серия" Тогда
			
			ДобавитьВОтсканированныеТовары(Форма);
			
			Если Форма.СхемаСканирования = "ТоварСерияТовар" Тогда
				
				ПерейтиКПараметруСканирования(Форма, "Номенклатура");
				
			КонецЕсли;
			
		ИначеЕсли ПараметрСканирования = "Количество" Тогда
			
			ДобавитьВОтсканированныеТовары(Форма);
			
			Если ТекущаяСтрокаСканирования.СтатусУказанияСерий = 0 Тогда
				
				ПерейтиКПараметруСканирования(Форма, "Номенклатура");
				
			Иначе
				
				ПерейтиКПараметруСканирования(Форма, "Серия");
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоПроверкаОтбораТоваров Тогда
		
		Если ПараметрСканирования = "Номенклатура" Тогда
			
			Если ТекущаяСтрокаСканирования.СтатусУказанияСерий = 0 Тогда
				
				ДобавитьВОтсканированныеТовары(Форма);
				
			Иначе
				
				ПерейтиКСледующемуПараметруСканирования(Форма);
				
			КонецЕсли;
			
		ИначеЕсли ПараметрСканирования = "Количество" Тогда
			
			ДобавитьВОтсканированныеТовары(Форма);
			
			Если Не СерииНеУказываются(ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
				
				Если Форма.СхемаСканирования = "ТоварСерияТовар" Тогда
					
					ПерейтиКПараметруСканирования(Форма, "Номенклатура");
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ПараметрСканирования = "Серия" Тогда
			
			ДобавитьВОтсканированныеТовары(Форма);
			
			Если Форма.СхемаСканирования = "ТоварСерияТовар" Тогда
				
				ПерейтиКПараметруСканирования(Форма, "Номенклатура");
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаОтсканирована = (ТекущаяСтрокаСканирования.КоличествоУпаковок = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано);
		
		Если СтрокаОтсканирована Тогда
			
			УстановитьОтсканированноеКоличествоУпаковок(Форма);
			
			Если ВсеТоварыОтсканированы(Форма) Тогда
				
				ПриЗавершенииСканированияТоваровТекущегоЗадания(Форма);
				Возврат;
				
			Иначе
				
				ПерейтиКСледующейСтрокеСканирования(Форма);
				
			КонецЕсли;
			
		Иначе
			
			Если ПараметрСканирования = "Ячейка" Тогда
				
				ПерейтиКСледующемуПараметруСканирования(Форма);
				
			ИначеЕсли ПараметрСканирования = "Номенклатура" Тогда
				
				Если ТекущаяСтрокаСканирования.СтатусУказанияСерий <> 0 Тогда
					
					ПерейтиКСледующемуПараметруСканирования(Форма);
					
				Иначе
					
					УстановитьОтсканированноеКоличествоУпаковок(Форма);
					
				КонецЕсли;
				
			ИначеЕсли ПараметрСканирования = "Серия" Тогда
				
				Если ТекущаяСтрокаСканирования.СтатусУказанияСерий = 4 Тогда
					
					УстановитьОтсканированноеКоличествоУпаковок(Форма);
					
				ИначеЕсли ТекущаяСтрокаСканирования.СтатусУказанияСерий = 0 Тогда
					
					ПерейтиКСледующемуПараметруСканирования(Форма);
					
				Иначе
					
					УстановитьОтсканированноеКоличествоУпаковок(Форма);
					
				КонецЕсли;
				
			ИначеЕсли ПараметрСканирования = "Количество" Тогда
				
				УстановитьОтсканированноеКоличествоУпаковок(Форма);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВывестиСостояниеВыполненияЗадания(Форма);
	УстановитьПараметрыЭлементовСканирования(Форма);
	УстановитьГорячиеКлавишиНаСтранице(Форма);
	
КонецПроцедуры

// Процедура дополняет состав параметров сканирования в зависимости
// от режима выполняемого задания (набор товаров или сканирование существующего документа).
//
Процедура УстановитьПараметрыСканирования(Форма)
	
	ТипЗадания                    = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров               = Форма.ПараметрыРежима.НаборТоваров;
	ИспользоватьСерииНоменклатуры = Форма.ИспользоватьСерииНоменклатуры;
	
	Форма.ПараметрыСканирования.Очистить();
	
	ЯчейкиИспользуются = Не (ЭтоНаборТоваров Или (ТипЗадания = "ПроверкаОтбора"));
	
	Если ЯчейкиИспользуются Тогда
		
		НоваяСтрока = Форма.ПараметрыСканирования.Добавить();
		НоваяСтрока.ИмяПараметра = "Ячейка";
		
	КонецЕсли;
	
	НоваяСтрока = Форма.ПараметрыСканирования.Добавить();
	НоваяСтрока.ИмяПараметра = "Номенклатура";
	
	Если ИспользоватьСерииНоменклатуры Тогда
		
		НоваяСтрока = Форма.ПараметрыСканирования.Добавить();
		НоваяСтрока.ИмяПараметра = "Серия";
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВсеТоварыОтсканированы(Форма)
	
	ВсеОтсканированы = (Форма.ТоварыДляСканирования.Итог("КоличествоУпаковок") = Форма.ТоварыДляСканирования.Итог("КоличествоУпаковокОтсканировано"));
	
	Возврат ВсеОтсканированы;
	
КонецФункции

Функция НайтиЯчейкуПоШтрихкоду(Штрихкод)
	
	МенеджерыОбъектов = Новый Массив();
	МенеджерыОбъектов.Добавить(Справочники.СкладскиеЯчейки.ПустаяСсылка());
	
	МассивСсылокНаЯчейки = ШтрихкодированиеПечатныхФорм.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(
		Штрихкод, 
		МенеджерыОбъектов
	);
	
	Если МассивСсылокНаЯчейки.Количество() > 0 Тогда
		Возврат МассивСсылокНаЯчейки[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НайтиЯчейкуПоКоду(Склад, Помещение, КодЯчейки)
	
	ПараметрыЯчейки = Новый Структура("КодВозврата, Ячейка");
	ПараметрыЯчейки.КодВозврата = 1;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("Код", КодЯчейки);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СкладскиеЯчейки.Ссылка КАК Ячейка
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СкладскиеЯчейки
	|ГДЕ
	|	СкладскиеЯчейки.Владелец = &Склад
	|	И СкладскиеЯчейки.Код = &Код
	|	И СкладскиеЯчейки.Помещение = &Помещение";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ПараметрыЯчейки.КодВозврата = 0;
		Возврат ПараметрыЯчейки;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ПараметрыЯчейки.Ячейка = Выборка.Ячейка;
	
	Возврат ПараметрыЯчейки;
	
КонецФункции

Функция ЭтоЯчейкаЗоныПриемки(Склад, Помещение, Ячейка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СпрЯчейки.Ссылка КАК Ячейка
	|ИЗ
	|	Справочник.СкладскиеЯчейки КАК СпрЯчейки
	|ГДЕ
	|	СпрЯчейки.ТипСкладскойЯчейки = ЗНАЧЕНИЕ(Перечисление.ТипыСкладскихЯчеек.Приемка)
	|	И СпрЯчейки.Владелец = &Склад
	|	И СпрЯчейки.Помещение = &Помещение
	|	И СпрЯчейки.Ссылка = &Ячейка");
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("Ячейка", Ячейка);
	
	Результат = Запрос.Выполнить();
	
	Возврат Не Результат.Пустой();
	
КонецФункции

Функция НайтиТоварПоПараметрам(ПараметрыТовара)
	
	Товар = Товар();
	Товар.КодВозврата = 1;
	
	РеквизитыНоменклатуры = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПараметрыТовара.Номенклатура, "Описание, Наименование, Артикул");
	РеквизитыУпаковки = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ПараметрыТовара.Упаковка, "Объем, Вес");
	
	ЗаполнитьЗначенияСвойств(Товар, ПараметрыТовара);
	ЗаполнитьЗначенияСвойств(Товар, РеквизитыНоменклатуры);
	ЗаполнитьЗначенияСвойств(Товар, РеквизитыУпаковки);
	
	Возврат Товар;
	
КонецФункции

Функция НайтиТовар(Штрихкод)
	
	Товар = Товар();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка,
	|	ШтрихкодыНоменклатуры.Упаковка.Объем КАК ОбъемУпаковки,
	|	ШтрихкодыНоменклатуры.Упаковка.Вес КАК ВесУпаковки,
	|	ШтрихкодыНоменклатуры.Номенклатура.Описание КАК Описание,
	|	ШтрихкодыНоменклатуры.Номенклатура.Наименование КАК Наименование,
	|	ШтрихкодыНоменклатуры.Номенклатура.Артикул КАК Артикул
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод = &Штрихкод";
	
	Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Товар.ТипОшибки = "НеНайденТовар";
		Возврат Товар;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(Товар, Выборка);
	
	Если Не ЗначениеЗаполнено(Товар.Упаковка) Тогда
		Товар.ТипОшибки = "УпаковкаНеПривязанаКШтрихкоду";
		Возврат Товар;
	КонецЕсли;
	
	Товар.КодВозврата = 1;
	
	Возврат Товар;
	
КонецФункции

// Возвращает структуру для хранения сведений о товаре.
//
// Параметры:
//	ПолныйВариант - Булево - вариант состава полей структуры.
//	    Истина - полный вариант структуры, Ложь - краткий.
//
// Возвращаемое значение:
//	Структура.
//
Функция Товар(ПолныйВариант = Истина)
	
	Товар = Новый Структура;
	
	Товар.Вставить("Номенклатура",   Справочники.Номенклатура.ПустаяСсылка());
	Товар.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Товар.Вставить("Упаковка",       Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	
	Если ПолныйВариант Тогда
		
		Товар.Вставить("Артикул", "");
		Товар.Вставить("Наименование", "");
		Товар.Вставить("Описание", "");
		
		Товар.Вставить("ОбъемУпаковки", 0);
		Товар.Вставить("ВесУпаковки", 0);
		
		Товар.Вставить("КодВозврата", 0);
		Товар.Вставить("ТипОшибки", "");
		
	КонецЕсли;
	
	Возврат Товар;
	
КонецФункции

Функция ПараметрыТоваров()
	
	ПараметрыТоваров = Новый Структура;
	
	ПараметрыТоваров.Вставить("КоличествоСтрокОтбора", 0);
	ПараметрыТоваров.Вставить("КоличествоСтрокРазмещения", 0);
	ПараметрыТоваров.Вставить("КоличествоСтрокПересчета", 0);
	ПараметрыТоваров.Вставить("КоличествоЯчеекОтбора", 0);
	ПараметрыТоваров.Вставить("КоличествоЯчеекРазмещения", 0);
	ПараметрыТоваров.Вставить("КоличествоЯчеекПересчета", 0);
	ПараметрыТоваров.Вставить("КоличествоУпаковокОтбора", 0);
	ПараметрыТоваров.Вставить("КоличествоУпаковокРазмещения", 0);
	ПараметрыТоваров.Вставить("КоличествоУпаковокПересчета", 0);
	
	Возврат ПараметрыТоваров;
	
КонецФункции

Функция СтрокаСканирования()
	
	СтруктураСтроки = Новый Структура;
	
	СтруктураСтроки.Вставить("Ячейка", Справочники.СкладскиеЯчейки.ПустаяСсылка());
	СтруктураСтроки.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	СтруктураСтроки.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	СтруктураСтроки.Вставить("Упаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	СтруктураСтроки.Вставить("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	СтруктураСтроки.Вставить("СкЯчейка", Справочники.СкладскиеЯчейки.ПустаяСсылка());
	СтруктураСтроки.Вставить("СкНоменклатура", Справочники.Номенклатура.ПустаяСсылка());
	СтруктураСтроки.Вставить("СкХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	СтруктураСтроки.Вставить("СкУпаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	СтруктураСтроки.Вставить("СкСерия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	СтруктураСтроки.Вставить("ОбъемУпаковки", 0);
	СтруктураСтроки.Вставить("ВесУпаковки", 0);
	
	СтруктураСтроки.Вставить("КоличествоУпаковок", 0);
	СтруктураСтроки.Вставить("КоличествоУпаковокОтсканировано", 0);
	СтруктураСтроки.Вставить("КоличествоУпаковокНеОтгружать", 0);
	СтруктураСтроки.Вставить("КоличествоУпаковокВДокументе", 0);
	
	СтруктураСтроки.Вставить("СтатусУказанияСерий", 0);
	
	СтруктураСтроки.Вставить("КоличествоЯчеек", 0);
	СтруктураСтроки.Вставить("НомерЯчейки", 0);
	
	СтруктураСтроки.Вставить("КоличествоТоваровВЯчейке", 0);
	СтруктураСтроки.Вставить("НомерТовараВЯчейке", 0);
	
	СтруктураСтроки.Вставить("_КоличествоСерийТовара", 0);
	СтруктураСтроки.Вставить("_НомерСерииТовара", 0);
	
	Возврат СтруктураСтроки;
	
КонецФункции

// Возвращает структуру параметров режима. Структура содержит необходимые вспомогательные
// значения для функционирования рабочего места работника склада.
//
Функция ПараметрыРежима()
	
	ПараметрыРежима = Новый Структура;
	
	ПараметрыРежима.Вставить("Режим",                        "");
	ПараметрыРежима.Вставить("НаборТоваров",                 Ложь);
	ПараметрыРежима.Вставить("Задание",                      Неопределено);
	
	ПараметрыРежима.Вставить("ЗонаПриемки",                  Неопределено);
	ПараметрыРежима.Вставить("ЗонаОтгрузки",                 Неопределено);
	ПараметрыРежима.Вставить("ВыборЗоныПриемкиОтгрузки",     "");
	
	ПараметрыРежима.Вставить("ТипЗадания",                   Неопределено);
	ПараметрыРежима.Вставить("ОтборОтсканирован",            Ложь);
	ПараметрыРежима.Вставить("РазмещениеОтсканировано",      Ложь);
	ПараметрыРежима.Вставить("ПараметрСканирования",         "");
	ПараметрыРежима.Вставить("МожноЗакрытьФорму",            Ложь);
	
	ПараметрыРежима.Вставить("КоличествоСтрокОтбора",        0);
	ПараметрыРежима.Вставить("КоличествоСтрокРазмещения",    0);
	ПараметрыРежима.Вставить("КоличествоСтрокПересчета",     0);
	
	ПараметрыРежима.Вставить("КоличествоЯчеекОтбора",        0);
	ПараметрыРежима.Вставить("КоличествоЯчеекРазмещения",    0);
	ПараметрыРежима.Вставить("КоличествоЯчеекПересчета",     0);
	
	ПараметрыРежима.Вставить("КоличествоУпаковокОтбора",     0);
	ПараметрыРежима.Вставить("КоличествоУпаковокРазмещения", 0);
	ПараметрыРежима.Вставить("КоличествоУпаковокПересчета",  0);
	
	ПараметрыРежима.Вставить("РаспоряжениеНаИнвентаризацию", Неопределено);
	ПараметрыРежима.Вставить("СозданноеЗадание",             Неопределено);
	
	Возврат ПараметрыРежима;
	
КонецФункции

// Выполняет поиск серии номенклатуры по заданному номеру и сроку годности.
//
// Параметры:
//	НомерСерии - Строка - номер серии,
//	ГоденДо - Дата - срок годности серии,
//	ВидНоменклатуры - СправочникСсылка.ВидНоменклатуры - вид номенклатуры.
//
// Возвращаемое значение:
//	Структура. 
//	КодВозврата - Число - 1 - серия найдена, 0 - нет, 
//	Серия - СправочникСсылка.Серии - серия номенклатуры.
//
Функция НайтиСерию(НомерСерии, ГоденДо, ВидНоменклатуры)
	
	ПараметрыСерии = Новый Структура("КодВозврата, Серия", 1, Неопределено);
	ПараметрыУказанияСерий = Справочники.ВидыНоменклатуры.ПараметрыСерийНоменклатуры(ВидНоменклатуры);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СерииНоменклатуры.Ссылка КАК Серия
	|ИЗ
	|	Справочник.СерииНоменклатуры КАК СерииНоменклатуры
	|ГДЕ
	|	СерииНоменклатуры.ВидНоменклатуры = &ВидНоменклатуры";
	
	// В зависимости от состава ключа серии, текст условия запроса будет различаться.
	Если ПараметрыУказанияСерий.ИспользоватьНомерСерии 
		И Не ПараметрыУказанияСерий.ИспользоватьСрокГодностиСерии Тогда
		
		ТекстУсловия = "
		|И СерииНоменклатуры.Номер = &НомерСерии";
		
		Запрос.УстановитьПараметр("НомерСерии", НомерСерии);
		
	ИначеЕсли ПараметрыУказанияСерий.ИспользоватьНомерСерии 
		И ПараметрыУказанияСерий.ИспользоватьСрокГодностиСерии Тогда
		
		ТекстУсловия = "
		|И СерииНоменклатуры.Номер = &НомерСерии
		|И СерииНоменклатуры.ГоденДо = &ГоденДо";
		
		Запрос.УстановитьПараметр("НомерСерии", НомерСерии);
		Запрос.УстановитьПараметр("ГоденДо", ГоденДо);
		
	ИначеЕсли Не ПараметрыУказанияСерий.ИспользоватьНомерСерии 
		И ПараметрыУказанияСерий.ИспользоватьСрокГодностиСерии Тогда
		
		ТекстУсловия = "
		|И СерииНоменклатуры.ГоденДо = &ГоденДо";
		
		Запрос.УстановитьПараметр("ГоденДо", ГоденДо);
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса + ТекстУсловия;
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ПараметрыСерии.КодВозврата = 0;
		Возврат ПараметрыСерии;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ПараметрыСерии.Серия = Выборка.Серия;
	
	Возврат ПараметрыСерии;
	
КонецФункции

Процедура ВывестиСообщениеОбОшибке(Форма, ТекстОшибки)
	
	Форма.СообщениеОбОшибке = ТекстОшибки;
	Форма.Элементы.СтраницыСостояниеТекстОшибки.ТекущаяСтраница = Форма.Элементы.СтраницаТекстОшибки;
	
КонецПроцедуры

Процедура ДобавитьВОтсканированныеТовары(Форма)
	
	ОтсканированныеТовары = Форма.ОтсканированныеТовары;
	ПараметрыРежима       = Форма.ПараметрыРежима;
	
	Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Упаковка, Серия");
	ЗаполнитьЗначенияСвойств(Отбор, Форма.ТекущаяСтрокаСканирования);
	
	НайденныеСтроки = ОтсканированныеТовары.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		НоваяСтрока = ОтсканированныеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Форма.ТекущаяСтрокаСканирования);
		
		НоваяСтрока.Коэффициент = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Форма.ТекущаяСтрокаСканирования.Упаковка, "Коэффициент");
		
	Иначе
		
		СтрокаТЗ = НайденныеСтроки[0];
		
		Если ПараметрыРежима.Режим = "ВводКоличества" Тогда
			
			СтрокаТЗ.КоличествоУпаковокОтсканировано = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
			СтрокаТЗ.КоличествоУпаковокНеОтгружать = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокНеОтгружать;
			
		Иначе
			
			СтрокаТЗ.КоличествоУпаковокОтсканировано = СтрокаТЗ.КоличествоУпаковокОтсканировано + 1;
			СтрокаТЗ.КоличествоУпаковокНеОтгружать = Форма.ТекущаяСтрокаСканирования.КоличествоУпаковокНеОтгружать;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, СтрокаТЗ);
		
	КонецЕсли;
	
КонецПроцедуры

// Переключает процесс сканирования на следующий параметр сканирования.
//
Процедура ПерейтиКСледующемуПараметруСканирования(Форма)
	
	ПараметрыРежима       = Форма.ПараметрыРежима;
	ПараметрыСканирования = Форма.ПараметрыСканирования;
	ПараметрСканирования  = Форма.ПараметрыРежима.ПараметрСканирования;
	
	Если ПараметрСканирования = "" Тогда
		
		СледПараметрСканирования = ПараметрыСканирования[0].ИмяПараметра;
		
	Иначе
		
		Отбор = Новый Структура("ИмяПараметра", ПараметрыРежима.ПараметрСканирования);
		
		НайденныеСтроки = ПараметрыСканирования.НайтиСтроки(Отбор);
		
		СтрокаПараметра = НайденныеСтроки[0];
		СледИндекс = ПараметрыСканирования.Индекс(СтрокаПараметра) + 1;
		
		Если ПараметрыСканирования.Количество() = СледИндекс Тогда
			СледИндекс = 0;
		КонецЕсли;
		
		СледПараметрСканирования = ПараметрыСканирования[СледИндекс].ИмяПараметра;
		
	КонецЕсли;
	
	Форма.ПараметрыРежима.ПараметрСканирования = СледПараметрСканирования;
	
КонецПроцедуры

// Устанавливает отсканированное количество упаковок в таблице отсканированных товаров.
// Вызывается каждый раз при изменении количества отсканированных товаров - сканирование штрихкода,
// или ввод количества вручную.
//
Процедура УстановитьОтсканированноеКоличествоУпаковок(Форма)
	
	ТоварыДляСканирования     = Форма.ТоварыДляСканирования;
	ОтсканированныеТовары     = Форма.ОтсканированныеТовары;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Отбор = Новый Структура("АктивнаяСтрока", 1);
	
	НайденныеСтроки = ТоварыДляСканирования.НайтиСтроки(Отбор);
	ТекСтрокаСканирования = НайденныеСтроки[0];
	
	ЗаполнитьЗначенияСвойств(ТекСтрокаСканирования, ТекущаяСтрокаСканирования, "КоличествоУпаковокОтсканировано, КоличествоУпаковокНеОтгружать");
	
	ТекСтрокаСканирования.КоличествоУпаковокОтсканировано = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
	
	Если ТекущаяСтрокаСканирования.СтатусУказанияСерий <> 0 
		И ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкСерия) Тогда
		
		НоваяСтрока = ОтсканированныеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрокаСканирования);
		
		НоваяСтрока.Серия = ТекущаяСтрокаСканирования.СкСерия;
		НоваяСтрока.КоличествоУпаковокОтсканировано = 1;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗавершенииСканированияТоваровТекущегоЗадания(Форма) Экспорт
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	Объект          = Форма.Объект;
	
	ЕстьОтсканированныеТовары = ЕстьОтсканированныеТовары(Форма);
	
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	
	Если ТипЗадания = "Отбор" Или ТипЗадания = "Размещение" Или ТипЗадания = "Пересчет" Тогда
		
		ЗавершитьВыполнениеЗадания(Форма);
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		Если Не ПараметрыРежима.ОтборОтсканирован Тогда
			
			Если ЕстьОтсканированныеТовары Тогда
				
				ОбработатьОтсканированныеТоварыОтбораПеремещения(Форма);
				ЗаполнитьСтатусыУказанияСерий(Форма);
				
				ПараметрыТоваров = ПараметрыТоваровЗадания(Форма);
				ЗаполнитьЗначенияСвойств(ПараметрыРежима, ПараметрыТоваров);
				
				Форма.ТекущаяСтрокаСканирования = Неопределено;
				Форма.СообщениеОбОшибке = "";
				
				ЗаполнитьДанныеДляСканированияЗадания(Форма);
				УстановитьНачальноеСостояниеВыполненияЗадания(Форма);
				
				ПерейтиКСканированию(Форма);
				
			Иначе
				
				ТекстПредупреждения = НСтр("ru = 'Отбор товаров не выполнен: не отобрано ни одного товара.
				|Выполнение задания на перемещение будет прервано.'");
				
				КнопкаПродолженияСканирования = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
					"ВернутьсяКВыполнениюЗадания", 
					НСтр("ru = 'Продолжить отбор товаров'"), 
					Истина);
				
				КнопкаПрерватьВыполнение = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
					"ПрерватьВыполнениеЗадания", 
					НСтр("ru = 'Прервать выполнение задания'"));
				
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить(КнопкаПродолженияСканирования);
				Кнопки.Добавить(КнопкаПрерватьВыполнение);
				
				ПоказатьДиалогСообщение(Форма, ТекстПредупреждения, Кнопки);
				
			КонецЕсли;
			
		Иначе
			
			ПараметрыРежима.РазмещениеОтсканировано = Истина;
			ЗавершитьВыполнениеЗадания(Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьТипВыполненияДействия(ТипЗадания, ТипДействия, ТипВыполнения)
	
	Если ТипЗадания = "Отбор" Тогда
		ТипВыполнения = НСтр("ru = 'отбора'");
		ТипДействия = НСтр("ru = 'отбор'");
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		ТипВыполнения = НСтр("ru = 'размещения'");
		ТипДействия = НСтр("ru = 'размещение'");
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		ТипВыполнения = НСтр("ru = 'перемещения'");
		ТипДействия = НСтр("ru = 'перемещение'");
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		ТипВыполнения = НСтр("ru = 'пересчета'");
		ТипДействия = НСтр("ru = 'пересчет'");
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		ТипВыполнения = НСтр("ru = 'проверки отбора'");
		ТипДействия = НСтр("ru = 'проверку отбора'");
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при переходе к следующей строке сканирования товаров. В зависимости от типа
// задания и состояния выполнения выводится диалоговое сообщение или выполняется переход к
// следующей строке.
//
Процедура ПерейтиКСледующейСтрокеСканирования(Форма) Экспорт
	
	Перем ТипДействия, ТипВыполнения;
	
	ПараметрыРежима           = Форма.ПараметрыРежима;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ТипЗадания                = Форма.ПараметрыРежима.ТипЗадания;
	
	Если ЭтоПоследняяСтрокаТоваров(Форма) Тогда
		
		ПолучитьТипВыполненияДействия(ТипЗадания, ТипДействия, ТипВыполнения);
		
		ПредставлениеТипаЗадания = НРег(ПараметрыРежима.ТипЗадания);
		
		ПредставлениеТовара = ПредставлениеТовара(
			ТекущаяСтрокаСканирования.Номенклатура,
			ТекущаяСтрокаСканирования.Характеристика);
		
		ПараметрыТекстаВопроса = Новый Структура(
			"Товар, Ячейка, ТипЗадания, ТипВыполнения",
			ПредставлениеТовара, 
			ТекущаяСтрокаСканирования.Ячейка, 
			ПредставлениеТипаЗадания, 
			ТипВыполнения);
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
			НСтр("ru = 'Товар ""[Товар]"" в ячейке ""[Ячейка]"" последний в задании на [ТипЗадания]. 
			|Завершить выполнение [ТипВыполнения] товаров?'"), 
			ПараметрыТекстаВопроса);
		
		// Создать нужные кнопки.
		КнопкаЗавершить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ЗавершитьВыполнениеЗадания", 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Завершить %1 товаров'"), ТипДействия));
		
		КнопкаПродолжить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКСканированию", 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Продолжить %1 товаров'"), ТипДействия));
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КнопкаЗавершить);
		Кнопки.Добавить(КнопкаПродолжить);
		
		Если ПараметрыРежима.ТипЗадания = "Перемещение" Тогда
			Если ПараметрыРежима.ОтборОтсканирован Тогда
				ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
			Иначе
				ПриЗавершенииСканированияТоваровТекущегоЗадания(Форма);
			КонецЕсли;
		Иначе
			ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
		КонецЕсли;
		
	Иначе
		
		ПерейтиКСледующейСтрокеТоваров(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоПоследняяСтрокаТоваров(Форма)
	
	ТоварыДляСканирования     = Форма.ТоварыДляСканирования;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Если ТекущаяСтрокаСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура("АктивнаяСтрока", 1);
	
	НайденныеСтроки = ТоварыДляСканирования.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		ТекСтрокаСканирования = НайденныеСтроки[0];
	КонецЕсли;
	
	ЭтоПоследняяСтрока = (ТоварыДляСканирования.Индекс(ТекСтрокаСканирования) = ТоварыДляСканирования.Количество() - 1);
	
	Возврат ЭтоПоследняяСтрока;
	
КонецФункции

// Переключает процесс сканирования на следующую ячейку. Используется, например при пересчете товаров,
// когда сканирование товаров в какой-либо ячейке выполнено и нужно перейти к следующей.
//
Процедура ПерейтиКСледующейЯчейке(Форма)
	
	ПараметрыРежима       = Форма.ПараметрыРежима;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ЯчейкиДляСканирования = Форма.ЯчейкиДляСканирования;
	Элементы              = Форма.Элементы;
	
	Если Форма.ТекущаяСтрокаСканирования = Неопределено Тогда
		
		ИндексСтроки = 0;
		
		Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
		
		Если ПараметрыРежима.ТипЗадания = "Пересчет" Тогда
			
			СледЯчейка = ТоварыДляСканирования[0];
			
			ЗаполнитьЗначенияСвойств(
				Форма.ТекущаяСтрокаСканирования, 
				СледЯчейка, 
				"Ячейка, КоличествоЯчеек, НомерЯчейки");
			
			ПараметрыРежима.ПараметрСканирования = "Ячейка";
			
		КонецЕсли;
		
	Иначе
		
		Если ПараметрыРежима.ТипЗадания = "Пересчет" Тогда
			
			Отбор = Новый Структура("Ячейка", Форма.ТекущаяСтрокаСканирования.Ячейка);
			
			НайденныеСтроки = ЯчейкиДляСканирования.НайтиСтроки(Отбор);
			
			ТекЯчейка = НайденныеСтроки[0];
			ТекЯчейка.Отсканирована = 1;
			
			СледЯчейка = ЯчейкиДляСканирования[ЯчейкиДляСканирования.Индекс(ТекЯчейка) + 1];
			
			Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
			ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, СледЯчейка, "Ячейка, КоличествоЯчеек, НомерЯчейки");
			
			ПерейтиКПараметруСканирования(Форма, "Ячейка");
			
		Иначе
			
			Отбор = Новый Структура("Ячейка", Форма.ТекущаяСтрокаСканирования.Ячейка);
			
			НайденныеСтроки = ЯчейкиДляСканирования.НайтиСтроки(Отбор);
			
			ТекЯчейка = НайденныеСтроки[0];
			ТекЯчейка.Отсканирована = 1;
			
			СледЯчейка = ЯчейкиДляСканирования[ЯчейкиДляСканирования.Индекс(ТекЯчейка) + 1];
			
			Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
			
			Отбор = Новый Структура("Ячейка", СледЯчейка.Ячейка);
			
			НайденныеСтроки = ТоварыДляСканирования.НайтиСтроки(Отбор);
			
			СледСтрокаСканирования = НайденныеСтроки[0];
			
			ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаСканирования, СледСтрокаСканирования);
			
			ПерейтиКПараметруСканирования(Форма, "Ячейка");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.СтраницыФормы.ТекущаяСтраница <> Элементы.СтраницаСканирование Тогда
		ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
	КонецЕсли;
	
КонецПроцедуры

// Считывает данные следующей строки товаров для сканирования и загружает их в структуру
// текущей строки сканирования.
//
Процедура ПерейтиКСледующейСтрокеТоваров(Форма)
	
	ТоварыДляСканирования     = Форма.ТоварыДляСканирования;
	Элементы                  = Форма.Элементы;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ТипЗадания                = Форма.ПараметрыРежима.ТипЗадания;
	
	Если ТекущаяСтрокаСканирования = Неопределено Тогда
		
		ТекущаяСтрокаСканирования = СтрокаСканирования();
		
		ЯчейкаНеИзменилась       = Ложь;
		НоменклатураНеИзменилась = Ложь;
		
		СледСтрокаСканирования = ТоварыДляСканирования[0];
		
	Иначе
		
		Отбор = Новый Структура("АктивнаяСтрока", 1);
		
		НайденныеСтроки = ТоварыДляСканирования.НайтиСтроки(Отбор);
		ТекущаяСтрока = НайденныеСтроки[0];
		
		СледСтрокаСканирования = ТоварыДляСканирования[ТоварыДляСканирования.Индекс(ТекущаяСтрока) + 1];
		ЯчейкаНеИзменилась = (ТекущаяСтрокаСканирования.СкЯчейка = СледСтрокаСканирования.Ячейка);
		
		НоменклатураНеИзменилась = 
		      (ТекущаяСтрокаСканирования.СкНоменклатура   = СледСтрокаСканирования.Номенклатура) 
		    И (ТекущаяСтрокаСканирования.СкХарактеристика = СледСтрокаСканирования.Характеристика)
		    И (ТекущаяСтрокаСканирования.СкУпаковка       = СледСтрокаСканирования.Упаковка);
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрокаСканирования, СледСтрокаСканирования);
	
	ТекущаяСтрокаСканирования.СкНоменклатура   = Справочники.Номенклатура.ПустаяСсылка();
	ТекущаяСтрокаСканирования.СкХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ТекущаяСтрокаСканирования.СкУпаковка       = Справочники.УпаковкиНоменклатуры.ПустаяСсылка();
	ТекущаяСтрокаСканирования.СкСерия          = Справочники.СерииНоменклатуры.ПустаяСсылка();
	
	Для каждого СтрокаТаблицы Из ТоварыДляСканирования Цикл
		
		СтрокаТаблицы.АктивнаяСтрока = 0;
		
	КонецЦикла;
	
	СледСтрокаСканирования.АктивнаяСтрока = 1;
	
	Если ТипЗадания = "ПроверкаОтбора" Тогда
		
		ПерейтиКПараметруСканирования(Форма, "Номенклатура");
		
	Иначе
		
		ПерейтиКПараметруСканирования(Форма, "Ячейка");
		
		Если ЯчейкаНеИзменилась Тогда
			
			ТекущаяСтрокаСканирования.СкЯчейка = ТекущаяСтрокаСканирования.Ячейка;
			ПерейтиКСледующемуПараметруСканирования(Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.ТекущаяСтрокаСканирования = ТекущаяСтрокаСканирования;
	
	Если Элементы.СтраницыФормы.ТекущаяСтраница <> Элементы.СтраницаСканирование Тогда
		
		ПерейтиНаСтраницу(Форма, "СтраницаСканирование");
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает структуру - общие сведения о количество строк и ячеек в табличных частях
// документ - складского задания. Значения из структуры параметров товара используются при 
// формировании заголовков надписей на элементах сканирования и расчете прогресса исполнения
// задания.
//
// Параметры:
//	Форма - УправляемаяФорма - форма рабочего места.
//
// Возвращаемое значение:
//	Структура. Параметры товаров.
//
Функция ПараметрыТоваровЗадания(Форма)
	
	ТипЗадания      = Форма.ПараметрыРежима.ТипЗадания;
	ОбработкаОбъект = Форма.Объект;
	
	ПараметрыТоваров = ПараметрыТоваров();
	
	Если ТипЗадания = "Приемка" Тогда
		// При выполнении приемки товаров по ордеру поведение формы аналогично
		// режиму нбора товаров, поэтому данные о параметрах товаров не требуются.
		Возврат ПараметрыТоваров;
	КонецЕсли;
	
	ОбработкаЗначение = ДанныеФормыВЗначение(ОбработкаОбъект, Тип("ОбработкаОбъект.РабочееМестоРаботникаСклада"));
	
	ПараметрыТоваров.КоличествоСтрокОтбора        = ОбработкаЗначение.ТоварыОтбор.Количество();
	ПараметрыТоваров.КоличествоСтрокРазмещения    = ОбработкаЗначение.ТоварыРазмещение.Количество();
	ПараметрыТоваров.КоличествоСтрокПересчета     = ОбработкаЗначение.Товары.Количество();
	ПараметрыТоваров.КоличествоЯчеекОтбора        = 0;
	ПараметрыТоваров.КоличествоЯчеекРазмещения    = 0;
	ПараметрыТоваров.КоличествоЯчеекПересчета     = 0;
	ПараметрыТоваров.КоличествоУпаковокОтбора     = ОбработкаЗначение.ТоварыОтбор.Итог("КоличествоУпаковок");
	ПараметрыТоваров.КоличествоУпаковокРазмещения = ОбработкаЗначение.ТоварыРазмещение.Итог("КоличествоУпаковок");
	ПараметрыТоваров.КоличествоУпаковокПересчета  = ОбработкаЗначение.Товары.Итог("КоличествоУпаковок");
	
	Возврат ПараметрыТоваров;
	
КонецФункции

// Вызывается при завершении выполнения набора товаров. В зависимости от типа задания вызывается
// соответсвующая процедура обработки.
//
Процедура ЗавершитьВыполнениеНабораТоваров(Форма)
	
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	
	Если Не ЭтоНаборТоваров Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗадания = "Размещение" Тогда
		
		ЗавершитьВыполнениеНабораТоваровДляРазмещения(Форма);
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		ЗавершитьВыполнениеНабораТоваровДляПриемки(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при завершении выполнения набора товаров для создания нового задания на размещение.
//
Процедура ЗавершитьВыполнениеНабораТоваровДляРазмещения(Форма)
	
	ОбработкаОбъект = Форма.Объект;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ОтсканированныеТовары = Форма.ОтсканированныеТовары;
	
	ЕстьОшибки = Ложь;
	
	ЕстьОтсканированныеТовары = ЕстьОтсканированныеТовары(Форма);
	
	Если Не ЕстьОтсканированныеТовары Тогда
		ОтменитьВыполнениеЗадания(Форма);
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	
	ДокументОбъект.Дата          = ТекущаяДата();
	ДокументОбъект.ВидОперации   = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение;
	ДокументОбъект.Статус        = Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
	ДокументОбъект.ЗонаПриемки   = ПараметрыРежима.ЗонаПриемки;
	ДокументОбъект.Исполнитель   = ОбработкаОбъект.Пользователь;
	ДокументОбъект.Ответственный = ОбработкаОбъект.Пользователь;
	ДокументОбъект.Склад         = ОбработкаОбъект.Склад;
	ДокументОбъект.Помещение     = ОбработкаОбъект.Помещение;
	
	Для каждого СтрокаТЗ Из ОтсканированныеТовары Цикл
		КоличествоУпаковокОтсканировано = СтрокаТЗ.КоличествоУпаковокОтсканировано;
		КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаТЗ.Коэффициент;
		
		НоваяСтрока = ДокументОбъект.ТоварыРазмещение.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		
		НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
		НоваяСтрока.Количество = КоличествоОтсканировано;
	КонецЦикла;
	
	Попытка
		ДокументОбъект.РазместитьТовары("ТоварыРазмещение");
	Исключение
		ЕстьОшибки = Истина;
		
		// Добавить запись об ошибке в журнал регистрации.
		ИмяСобытия = НСтр("ru = 'Ошибка при записи и проведении нового задания на размещение.'");
		
		КомментарийЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При создании нового задания на размещение произошла ошибка. Описание ошибки: ""%1""'"), 
			ИнформацияОбОшибке().Описание);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, 
			ПараметрыРежима.Задание.Метаданные(), 
			ПараметрыРежима.Задание, 
			КомментарийЖурнала, 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	КонецПопытки;
	
	Если Не ЕстьОшибки Тогда
		// Проверить, что во всех строках документа указаны ячейки.
		РазмещениеВыполнено = Истина;
		
		Для каждого СтрокаТЧ Из ДокументОбъект.ТоварыРазмещение Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Ячейка) Тогда
				РазмещениеВыполнено = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если РазмещениеВыполнено Тогда
			ПараметрыУказанияСерий = Документы.ОтборРазмещениеТоваров.ПараметрыУказанияСерий(ДокументОбъект);
			
			ПараметрыУказанияСерий.ИмяТЧТовары = "ТоварыРазмещение";
			ПараметрыУказанияСерий.ИмяТЧСерии = "ТоварыРазмещение";
			
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПроведениеИзМРМРаботникаСклада", Истина);
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ЕстьОшибки = Истина;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ТекстСообщения = НСтр("ru = 'При завершении выполнения подбора товаров произошла ошибка (см. журнал регистрации). Не удалось провести размещение товаров.'");
		
		КнопкаПерейтиВОснМеню = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКВыборуСкладскойОперации", 
			НСтр("ru = 'Перейти к выбору операции'"));
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КнопкаПерейтиВОснМеню);
		
		ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
	Иначе
		
		Если Не РазмещениеВыполнено Тогда
			
			ТекстСообщения = НСтр("ru = 'При выполнении размещения товаров по ячейкам произошла ошибка - не удалось разместить товары по ячейкам. В созданном задании на размещение следует вручную указать ячейки, и провести документ.'");
			
			КнопкаПерейтиВОснМеню = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
				"ПерейтиКВыборуСкладскойОперации", 
				НСтр("ru = 'Перейти к выбору операции'"));
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КнопкаПерейтиВОснМеню);
			
			ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
			
		Иначе
			
			ПараметрыРежима.СозданноеЗадание = ДокументОбъект.Ссылка;
			
			ВзятьЗаданиеВРаботу(Форма, ПараметрыРежима.СозданноеЗадание);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при завершении выполнения набора товаров при выполнении приемки товаров.
//
Процедура ЗавершитьВыполнениеНабораТоваровДляПриемки(Форма)
	
	Задание = Форма.ПараметрыРежима.Задание;
	
	ЕстьОшибки = Ложь;
	ЕстьОтсканированныеТовары = ЕстьОтсканированныеТовары(Форма);
	
	// Если нет отсканированных товаров, то отменить выполнение задания.
	Если Не ЕстьОтсканированныеТовары Тогда
		ОтменитьВыполнениеЗадания(Форма);
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = Задание.ПолучитьОбъект();
	ДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
	
	// Перенести сведения об отсканированных товарах в ТЧ документа.
	ДокументОбъект.Товары.Очистить();
	ДокументОбъект.Серии.Очистить();
	
	Для каждого СтрокаТЗ Из Форма.ОтсканированныеТовары Цикл
		
		// ... ТЧ Товары
		СтрокаТовары = ДокументОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТЗ);
		
		СтрокаТовары.Количество = СтрокаТЗ.КоличествоУпаковокОтсканировано * СтрокаТЗ.Коэффициент;
		СтрокаТовары.КоличествоУпаковок = СтрокаТЗ.КоличествоУпаковокОтсканировано;
		
		// ... ТЧ Серии
		СтрокаСерии = ДокументОбъект.Серии.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСерии, СтрокаТЗ);
		
		СтрокаСерии.Количество = СтрокаТЗ.КоличествоУпаковокОтсканировано * СтрокаТЗ.Коэффициент;
		СтрокаСерии.КоличествоУпаковок = СтрокаТЗ.КоличествоУпаковокОтсканировано;
		
	КонецЦикла;
	
	// Записать и провести документ.
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		
		ЕстьОшибки = Истина;
		
		// Добавить запись об ошибке в журнал регистрации.
		ИмяСобытия = НСтр("ru = 'Ошибка при завершении задания на приемку.'");
		
		КомментарийЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При завершении задания на приемку произошла ошибка (см.журнал регистрации). Описание ошибки: ""%1""'"), 
			ИнформацияОбОшибке().Описание);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, 
			Задание.Метаданные(), 
			Задание, 
			КомментарийЖурнала, 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
	КонецПопытки;
	
	РазблокироватьДанныеДляРедактирования(Форма.Задание, Форма.УникальныйИдентификатор);
	
	// Вывести сообщение пользователю.
	Если ЕстьОшибки Тогда
		
		ТекстСообщения = НСтр("ru = 'При завершении задания на приемку произошла ошибка (см.журнал регистрации)'");
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Приемка товаров успешно завершена.'");
		
	КонецЕсли; 
	
	КнопкаПерейтиВОснМеню = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
		"ПерейтиКВыборуСкладскойОперации", 
		НСтр("ru = 'Перейти к выбору операции'"));
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КнопкаПерейтиВОснМеню);
	
	ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
	
КонецПроцедуры

// Проверяет, есть расхождения между данными документа и отсканированными данными.
//
// Параметры:
//	Форма - УправляемаяФорма - форма рабочего места.
//
// Возвращаемое значение:
//	Булево. Истина - есть расхождения, Ложь - нет.
//
Функция ЕстьРасхожденияПриПроверкеОтбора(Форма)
	
	ОтсканированныеТовары = Форма.ОтсканированныеТовары;
	
	Если ОтсканированныеТовары.НайтиСтроки(Новый Структура("ЕстьНедобор",Истина)).Количество() = 0
		И ОтсканированныеТовары.НайтиСтроки(Новый Структура("ЕстьНеотгружаемые",Истина)).Количество() = 0 Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Устанавливает значения флагов ЕстьНедобор, ЕстьНеОтгружаемые в строках таблицы
// при проверке отбора.
//
Процедура УстановитьПризнакиРасхожденияВСтрокахТаблицыТоваров(Форма)
	
	Для каждого СтрокаТЗ Из Форма.ОтсканированныеТовары Цикл
		
		Если СтрокаТЗ.КоличествоУпаковокОтсканировано < СтрокаТЗ.КоличествоУпаковокВДокументе Тогда
			СтрокаТЗ.ЕстьНедобор = Истина;
		КонецЕсли;
		
		Если СтрокаТЗ.КоличествоУпаковокНеОтгружать > 0 Тогда
			СтрокаТЗ.ЕстьНеОтгружаемые = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при завершении задания проверки отбора.
//
Процедура ЗавершитьВыполнениеЗаданияПроверкиОтбора(Форма)
	
	Перем Излишки;
	
	ПараметрыРежима       = Форма.ПараметрыРежима;
	Задание               = Форма.ПараметрыРежима.Задание;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ОтсканированныеТовары = Форма.ОтсканированныеТовары;
	Объект                = Форма.Объект;
	
	ЗаданиеРазблокировано = Ложь;
	
	УстановитьПризнакиРасхожденияВСтрокахТаблицыТоваров(Форма);
	
	ЕстьОшибки = Ложь;
	
	// Если нет расхождений, то просто установить статус документа.
	Если Не ЕстьРасхожденияПриПроверкеОтбора(Форма) Тогда
		
		ДокументОбъект = Задание.ПолучитьОбъект();
		ДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке;
		
		// Если нет расхождений, то необходимо для тех серий,
		// которые учитываются по факту отбора перенести строки в ТЧ Серии документа.
		
		Для каждого СтрокаТЗ Из ОтсканированныеТовары Цикл
			
			Если СерииУказываютсяПоФактуОтбора(СтрокаТЗ.СтатусУказанияСерий) Тогда
				
				СтрокаСерии = ДокументОбъект.Серии.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСерии, СтрокаТЗ);
				
				СтрокаСерии.Количество = СтрокаТЗ.КоличествоУпаковокОтсканировано * СтрокаТЗ.Коэффициент;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.РасходныйОрдерНаТовары));
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
		
		Попытка
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			
			ЕстьОшибки = Истина;
			
			ИмяСобытия = НСтр("ru = 'Ошибка при записи и проведении складского задания из рабочего места работника склада'");
			
			КомментарийЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При записи и проведении складского задания произошла ошибка. Описание ошибки: ""%1""'"), 
				ИнформацияОбОшибке().Описание);
			
			ЗаписьЖурналаРегистрации(
				ИмяСобытия, 
				УровеньЖурналаРегистрации.Ошибка, 
				ПараметрыРежима.Задание.Метаданные(), 
				ПараметрыРежима.Задание, 
				КомментарийЖурнала, 
				РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
			
		КонецПопытки;
		
	Иначе
		
		// Создать обработку проверки количества в документе.
		ПараметрыСоздания = Новый Структура("Склад, Помещение, Ордер", Объект.Склад, Объект.Помещение, Задание);
		
		ОбработкаПроверки = Обработки.ПроверкаКоличестваТоваровВДокументе.Создать();
		
		ОбработкаПроверки.Ордер     = Задание;
		ОбработкаПроверки.Склад     = Объект.Склад;
		ОбработкаПроверки.Помещение = Объект.Помещение;
		ОбработкаПроверки.РаспоряжениеНаИнвентаризацию = ПараметрыРежима.РаспоряжениеНаИнвентаризацию;
		
		ТаблицаТовары = ОбработкаПроверки.Ордер.Товары.Выгрузить();
		ТаблицаТовары.Колонки.Количество.Имя         = "КоличествоВДокументе";
		ТаблицаТовары.Колонки.КоличествоУпаковок.Имя = "КоличествоУпаковокВДокументе";
		ТаблицаТовары.Колонки.Добавить("ЕстьНедобор");
		ТаблицаТовары.ЗаполнитьЗначения(Истина, "ЕстьНедобор");
		ТаблицаТовары.Колонки.Добавить("СтрокаИзДокумента");
		ТаблицаТовары.ЗаполнитьЗначения(Истина, "СтрокаИзДокумента");
		
		ОбработкаПроверки.Товары.Загрузить(ТаблицаТовары);
		
		ТаблицаСерии = ОбработкаПроверки.Ордер.Серии.Выгрузить();
		ТаблицаСерии.Колонки.Количество.Имя         = "КоличествоВДокументе";
		ТаблицаСерии.Колонки.КоличествоУпаковок.Имя = "КоличествоУпаковокВДокументе";
		
		ОбработкаПроверки.Серии.Загрузить(ТаблицаСерии);
		
		// Пройти по отсканированным товарам и проставить отсканированное количество.
		ОтборПоТоварам = Новый Структура("Номенклатура, Характеристика, Упаковка");
		ОтборПоСериям = Новый Структура("Номенклатура, Характеристика, Серия, Упаковка");
		
		Для каждого СтрокаОтсканированныхТоваров Из ОтсканированныеТовары Цикл
			
			Если ЗначениеЗаполнено(СтрокаОтсканированныхТоваров.Серия) Тогда
				
				ЗаполнитьЗначенияСвойств(ОтборПоСериям, СтрокаОтсканированныхТоваров);
				
				Если СерииУказываютсяПоФактуОтбора(СтрокаОтсканированныхТоваров.СтатусУказанияСерий) Тогда
					
					СтрокаСерии = ОбработкаПроверки.Серии.Добавить();
					
					ЗаполнитьЗначенияСвойств(СтрокаСерии, СтрокаОтсканированныхТоваров);
					
					СтрокаСерии.КоличествоУпаковок = СтрокаОтсканированныхТоваров.КоличествоУпаковокОтсканировано;
					СтрокаСерии.Количество = СтрокаОтсканированныхТоваров.КоличествоУпаковокОтсканировано * СтрокаОтсканированныхТоваров.Коэффициент;
					
					СтрокаСерии.КоличествоУпаковокВДокументе = СтрокаСерии.КоличествоУпаковок;
					СтрокаСерии.КоличествоВДокументе = СтрокаСерии.Количество;
					
					СтрокаСерии.КоличествоУпаковокНеОтгружать = СтрокаОтсканированныхТоваров.КоличествоУпаковокНеОтгружать;
					СтрокаСерии.КоличествоНеОтгружать = СтрокаОтсканированныхТоваров.КоличествоУпаковокНеОтгружать * СтрокаОтсканированныхТоваров.Коэффициент;
					
				Иначе
					
					МассивСтрокСерий = ОбработкаПроверки.Серии.НайтиСтроки(ОтборПоСериям);
					
					Если МассивСтрокСерий.Количество() > 0 Тогда
						
						СтрокаСерии = МассивСтрокСерий[0];
						
						СтрокаСерии.КоличествоУпаковок = СтрокаОтсканированныхТоваров.КоличествоУпаковокОтсканировано;
						СтрокаСерии.Количество = СтрокаОтсканированныхТоваров.КоличествоУпаковокОтсканировано * СтрокаОтсканированныхТоваров.Коэффициент;
						
						СтрокаСерии.КоличествоУпаковокНеОтгружать = СтрокаОтсканированныхТоваров.КоличествоУпаковокНеОтгружать;
						СтрокаСерии.КоличествоНеОтгружать = СтрокаОтсканированныхТоваров.КоличествоУпаковокНеОтгружать * СтрокаОтсканированныхТоваров.Коэффициент;
						
					КонецЕсли; 
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОтборПоТоварам, СтрокаОтсканированныхТоваров);
			
			МассивСтрокТоваров = ОбработкаПроверки.Товары.НайтиСтроки(ОтборПоТоварам);
			
			Если МассивСтрокТоваров.Количество() > 0 Тогда
				
				СтрокаТоваров = МассивСтрокТоваров[0];
				
				СтрокаТоваров.КоличествоУпаковок = СтрокаОтсканированныхТоваров.КоличествоУпаковокОтсканировано;
				СтрокаТоваров.Количество = СтрокаОтсканированныхТоваров.КоличествоУпаковокОтсканировано * СтрокаОтсканированныхТоваров.Коэффициент;
				
				СтрокаТоваров.КоличествоУпаковокНеОтгружать = СтрокаОтсканированныхТоваров.КоличествоУпаковокНеОтгружать;
				СтрокаТоваров.КоличествоНеОтгружать = СтрокаОтсканированныхТоваров.КоличествоУпаковокНеОтгружать * СтрокаОтсканированныхТоваров.Коэффициент;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(
			ОбработкаПроверки, 
			Обработки.ПроверкаКоличестваТоваровВДокументе);
		
		ПараметрыУказанияСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
		ПараметрыУказанияСерий.Вставить("ВариантУчетаНедобора", "УменьшитьОрдер");
		ПараметрыУказанияСерий.Вставить("РежимИсправления", Ложь);
		ПараметрыУказанияСерий.Вставить("ЕстьНедостачиИзлишки", Истина);
		
		ИспользуетсяАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение);
		ПараметрыУказанияСерий.Вставить("ИспользуетсяАдресноеХранение", ИспользуетсяАдресноеХранение);
		
		ПараметрыПроверки = Новый ФиксированнаяСтруктура(ПараметрыУказанияСерий);
		РезультатПроверкиОрдераНаТовары = Неопределено;
		
		// Разблокировать документ.
		РазблокироватьДанныеДляРедактирования(Форма.Задание, Форма.УникальныйИдентификатор);
		ЗаданиеРазблокировано = Истина;
		
		ОбработкаПроверки.РаспоряжениеНаИнвентаризацию = Форма.ПараметрыРежима.РаспоряжениеНаИнвентаризацию;
		ОбработкаПроверки.ЗавершитьПроверку(ПараметрыПроверки, ИспользуетсяАдресноеХранение);
		
		// Вызвать функцию отражения расхождений в учете.
		ОбработкаПроверки.ОтражатьРасхождения = Ложь;
		ОбработкаПроверки.ОтразитьРасхожденияВУчете(ПараметрыПроверки, РезультатПроверкиОрдераНаТовары);
		
		// Если в таблице излишков есть записи, то необходимо вывести сообщение
		// о том какие товары необходимо оставить в зоне отгрузки.
		Излишки = ОбработкаПроверки.Излишки.Выгрузить();
		
		ОбработкаПроверки = Неопределено;
		
	КонецЕсли;
	
	Если НЕ ЗаданиеРазблокировано Тогда
		РазблокироватьДанныеДляРедактирования(Форма.Задание, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
	ОчиститьТоварыСканирования(Форма);
	
	Если ЕстьОшибки = Истина Тогда
		
		ЗаголовокСообщения = НСтр("ru = 'Задание не выполнено'");
		ТекстСообщения = НСтр("ru = 'При завершении задания произошла ошибка (см. журнал регистрации). Не удалось провести задание.'");
		
	Иначе
		
		Если Не (Излишки = Неопределено) Тогда
			
			Если Излишки.Количество() > 0 Тогда
				
				ВывестиИнформациюОбИзлишкахТоваров(Форма, Излишки);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаголовокСообщения = НСтр("ru = 'Задание выполнено'");
		ТекстСообщения = НСтр("ru = 'Выполнение проверки отбора завершено.'");
		
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	ДобавитьКнопкуПереходаКВыборуЗадания(Кнопки, ПараметрыРежима.ТипЗадания);
	
	ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки, ЗаголовокСообщения);
	
КонецПроцедуры

Процедура ВывестиИнформациюОбИзлишкахТоваров(Форма, Излишки)
	
	ЗаголовокСообщения = НСтр("ru = 'Внимание!'");
	
	Объект = Форма.Объект;
	ТабДок = Форма.ТаблицаИнформации;
	
	ТабДок.Очистить();
	
	ИмяМакета = ИмяМакетаИнформацииОбИзлишкахТоваров(Форма);
	Макет = Обработки.РабочееМестоРаботникаСклада.ПолучитьМакет(ИмяМакета);
	
	ОбластьОписание                 = Макет.ПолучитьОбласть("Описание");
	ОбластьЗаголовокТаблицыОстатков = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ОбластьСтрокаТаблицы            = Макет.ПолучитьОбласть("СтрокаТаблицы");
	
	ТабДок.Вывести(ОбластьОписание);
	ТабДок.Вывести(ОбластьЗаголовокТаблицыОстатков);
	
	Для Каждого СтрокаТаблицы Из Излишки Цикл
		
		ТекстТовар = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1%2%3'"),
			СтрокаТаблицы.Номенклатура,
			?(ЗначениеЗаполнено(СтрокаТаблицы.Характеристика), ", " + СтрокаТаблицы.Характеристика, ""),
			?(ЗначениеЗаполнено(СтрокаТаблицы.Серия), " , (серия: " + СтрокаТаблицы.Серия + ")", ""));
		
		ТекстКоличество = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2'"), 
			СтрокаТаблицы.КоличествоУпаковокНеОтгружать, 
			СтрокаТаблицы.Упаковка);
		
		ОбластьСтрокаТаблицы.Параметры.Товар      = ТекстТовар;
		ОбластьСтрокаТаблицы.Параметры.Количество = ТекстКоличество;
		
		ТабДок.Вывести(ОбластьСтрокаТаблицы);
		
	КонецЦикла;
	
	Кнопки = Новый СписокЗначений;
	ДобавитьКнопкуПереходаКВыборуЗадания(Кнопки, Форма.ПараметрыРежима.ТипЗадания);
	
	ПоказатьДиалогСообщение(Форма, "", Кнопки, ЗаголовокСообщения, Истина);
	
КонецПроцедуры

// Завершает выполнение складского задания. При сканировании товаров - отсканированные товары
// переносятся в табличные части документов, при наборе - создаются новые складские задания.
// Устанавливаются нужные статусы у документов, выполняется проведение документов.
//
Процедура ЗавершитьВыполнениеСкладскогоЗадания(Форма) Экспорт
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	Форма.Задание   = ПараметрыРежима.Задание;
	ТипЗадания      = Форма.ПараметрыРежима.ТипЗадания;
	ОбработкаОбъект = Форма.Объект;
	
	ЕстьОшибки = Ложь;
	
	ЕстьНеОтсканированныеТовары = ЕстьНеОтсканированныеТовары(Форма);
	ЕстьОтсканированныеТовары   = ЕстьОтсканированныеТовары(Форма);
	ЕстьНеОтсканированныеЯчейки = ЕстьНеОтсканированныеЯчейки(Форма);
	ЕстьОтсканированныеЯчейки   = ЕстьОтсканированныеЯчейки(Форма);
	
	// Если задание еще даже не началось выполняться, то выполняется не завершение, а отмена - задание переводится в исходный статус.
	Если ТипЗадания = "Отбор" Или ТипЗадания = "Размещение" Или ТипЗадания = "Пересчет" 
		Или ТипЗадания = "Приемка" Или ТипЗадания = "ПроверкаОтбора" Тогда
		
		Если Не ЕстьОтсканированныеТовары Тогда
			
			ОтменитьВыполнениеЗадания(Форма);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОбъект = Форма.Задание.ПолучитьОбъект();
	ОбработкаЗначение = ДанныеФормыВЗначение(ОбработкаОбъект, Тип("ОбработкаОбъект.РабочееМестоРаботникаСклада"));
	
	ТЗОтсканированныеТовары = Форма.РеквизитФормыВЗначение("ОтсканированныеТовары");
	ТЗОтсканированныеТовары.Свернуть("Ячейка,Номенклатура,Характеристика,Упаковка,Коэффициент,Серия,СтатусУказанияСерий", "КоличествоУпаковокОтсканировано");
	
	Если ТипЗадания = "Отбор" Тогда
		
		Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Упаковка");
		
		Для каждого СтрокаСканирования Из Форма.ТоварыДляСканирования Цикл
			
			КоличествоУпаковокОтсканировано = СтрокаСканирования.КоличествоУпаковокОтсканировано;
			КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаСканирования.Коэффициент;
			
			Если КоличествоУпаковокОтсканировано = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаСканирования);
			
			НайденныеСтроки = ОбработкаЗначение.ТоварыОтбор.НайтиСтроки(Отбор);
			Строка = НайденныеСтроки[0];
			
			Если СтрокаСканирования.СтатусУказанияСерий = 4 Тогда
				
				НайденныеСтрокиПоСериям = ТЗОтсканированныеТовары.НайтиСтроки(Отбор);
				
				ВсегоОтсканированоУпаковок = 0;
				
				Для каждого СтрокаСканированияПоСериям Из НайденныеСтрокиПоСериям Цикл
					
					КоличествоУпаковокОтсканировано = СтрокаСканированияПоСериям.КоличествоУпаковокОтсканировано;
					КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаСканированияПоСериям.Коэффициент;
					
					НоваяСтрока = ОбработкаЗначение.ТоварыОтбор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					
					НоваяСтрока.Серия = СтрокаСканированияПоСериям.Серия;
					
					НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
					НоваяСтрока.КоличествоУпаковокОтобрано  = КоличествоУпаковокОтсканировано;
					
					НоваяСтрока.Количество = КоличествоОтсканировано;
					НоваяСтрока.КоличествоОтобрано = КоличествоОтсканировано;
					
					ВсегоОтсканированоУпаковок = ВсегоОтсканированоУпаковок + КоличествоУпаковокОтсканировано;
					
				КонецЦикла;
				
				ОсталосьОтсканироватьУпаковок = СтрокаСканирования.КоличествоУпаковок - ВсегоОтсканированоУпаковок;
				ОсталосьОтсканировать = ОсталосьОтсканироватьУпаковок * СтрокаСканирования.Коэффициент;
				
				Если ОсталосьОтсканироватьУпаковок = 0 Тогда
					ОбработкаЗначение.ТоварыОтбор.Удалить(Строка);
				Иначе
					Строка.КоличествоУпаковок = ОсталосьОтсканироватьУпаковок;
					Строка.Количество = ОсталосьОтсканировать;
				КонецЕсли;
				
			Иначе
				
				Строка.КоличествоУпаковокОтобрано = КоличествоУпаковокОтсканировано;
				Строка.КоличествоОтобрано = КоличествоОтсканировано;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДокументОбъект.ТоварыОтбор.Очистить();
		ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ОбработкаЗначение.ТоварыОтбор, ДокументОбъект.ТоварыОтбор);
		
		Если ЕстьНеОтсканированныеТовары Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками;
		Иначе
			ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗадания = "Размещение" Тогда
		
		Для каждого СтрокаСканирования Из Форма.ТоварыДляСканирования Цикл
			
			СтрокаТоварыРазмещение = ОбработкаЗначение.ТоварыРазмещение[Форма.ТоварыДляСканирования.Индекс(СтрокаСканирования)];
			
			КоличествоУпаковокОтсканировано = СтрокаСканирования.КоличествоУпаковокОтсканировано;
			КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаСканирования.Коэффициент;
			
			СтрокаТоварыРазмещение.КоличествоУпаковокРазмещено = КоличествоУпаковокОтсканировано;
			СтрокаТоварыРазмещение.КоличествоРазмещено = КоличествоОтсканировано;
			
		КонецЦикла;
		
		ДокументОбъект.ТоварыРазмещение.Очистить();
		ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ОбработкаЗначение.ТоварыРазмещение, ДокументОбъект.ТоварыРазмещение);
		
		ЕстьНеОтсканированныеТовары = (ДокументОбъект.ТоварыРазмещение.Итог("КоличествоУпаковок") <> ДокументОбъект.ТоварыРазмещение.Итог("КоличествоУпаковокРазмещено"));
		
		Если ЕстьНеОтсканированныеТовары Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками;
		Иначе
			ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗадания = "Перемещение" Тогда
		
		ВыполненоСОшибками = Ложь;
		
		// При выполнении задания на перемещение, отменить его можно только в том случае,
		// если еще не был отсканирован отбор и в таблице отсканированных товаров нет записей.
		Если Не ПараметрыРежима.ОтборОтсканирован И Не ЕстьОтсканированныеТовары Тогда
			ОтменитьВыполнениеЗадания(Форма);
			Возврат;
		КонецЕсли;
		
		Если Не ПараметрыРежима.ОтборОтсканирован Тогда
			
			// Отбор не отсканирован и выполняется досрочное завершение выполнения перемещения,
			// (т.е. что-то отобрали или вообще ничего не отбирали но размещать не стали).
			
			Отбор = Новый Структура("НомерСтроки");
			
			Для каждого СтрокаСканирования Из Форма.ТоварыДляСканирования Цикл
				Если СтрокаСканирования.КоличествоУпаковокОтсканировано = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоУпаковокОтсканировано = СтрокаСканирования.КоличествоУпаковокОтсканировано;
				КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаСканирования.Коэффициент;
				
				ЗаполнитьЗначенияСвойств(Отбор, СтрокаСканирования);
				
				НайденныеСтроки = Форма.Объект.ТоварыОтбор.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаТоварыОтбор = НайденныеСтроки[0];
				
				СтрокаТоварыОтбор.КоличествоУпаковокОтобрано = КоличествоУпаковокОтсканировано;
				СтрокаТоварыОтбор.КоличествоОтобрано = КоличествоОтсканировано;
				
				// Добавить строку размещенных товаров.
				СтрокаТоварыРазмещение = Форма.Объект.ТоварыРазмещение.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТоварыРазмещение, СтрокаСканирования);
				
				СтрокаТоварыРазмещение.Ячейка = ПараметрыРежима.ЗонаПриемки;
				
				СтрокаТоварыРазмещение.КоличествоУпаковок          = 0;
				СтрокаТоварыРазмещение.Количество                  = 0;
				СтрокаТоварыРазмещение.КоличествоУпаковокРазмещено = КоличествоУпаковокОтсканировано;
				СтрокаТоварыРазмещение.КоличествоРазмещено         = КоличествоОтсканировано;
				
			КонецЦикла;
			
			// Перенести сведения об отобранных товарах.
			ДокументОбъект.ТоварыОтбор.Очистить();
			
			ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(
				ОбработкаОбъект.ТоварыОтбор,
				ДокументОбъект.ТоварыОтбор);
			
			// Перенести сведения о размещенных товарах.
			ДокументОбъект.ТоварыРазмещение.Очистить();
			
			ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(
				ОбработкаОбъект.ТоварыРазмещение,
				ДокументОбъект.ТоварыРазмещение);
			
			// Установить статус задания - выполнено с ошибками.
			ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками;
			
		Иначе
			// Это завершение задания на перемещение, к этому моменту:
			// в ТЧ ТоварыОтбор находятся сведения об отобранных товарах, 
			// в ТЧ ТоварыРазмещение нужно внести сведения об отсканированных товарах.
			
			ДокументОбъект.ТоварыОтбор.Очистить();
			
			ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ОбработкаЗначение.ТоварыОтбор, ДокументОбъект.ТоварыОтбор);
			
			Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Упаковка, Серия");
			
			Для каждого СтрокаСканирования Из Форма.ТоварыДляСканирования Цикл
				
				КоличествоУпаковокОтсканировано = СтрокаСканирования.КоличествоУпаковокОтсканировано;
				КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаСканирования.Коэффициент;
				
				ЗаполнитьЗначенияСвойств(Отбор, СтрокаСканирования);
				
				НайденныеСтроки = ОбработкаЗначение.ТоварыРазмещение.НайтиСтроки(Отбор);
				СтрокаТоварыРазмещение = НайденныеСтроки[0];
				
				Если СтрокаСканирования.СтатусУказанияСерий = 4 Тогда
					НайденныеСтрокиПоСериям = ТЗОтсканированныеТовары.НайтиСтроки(Отбор);
					
					ВсегоУпаковокОтсканировано = 0;
					
					Для каждого СтрокаОтсканированныхТоваров Из НайденныеСтрокиПоСериям Цикл
						
						КоличествоУпаковокОтсканировано = СтрокаОтсканированныхТоваров.КоличествоУпаковокОтсканировано;
						КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаОтсканированныхТоваров.Коэффициент;
						
						НоваяСтрока = ОбработкаЗначение.ТоварыРазмещение.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварыРазмещение);
						
						НоваяСтрока.Серия = СтрокаОтсканированныхТоваров.Серия;
						
						НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
						НоваяСтрока.КоличествоУпаковокРазмещено = КоличествоУпаковокОтсканировано;
						
						НоваяСтрока.Количество = КоличествоОтсканировано;
						НоваяСтрока.КоличествоРазмещено = КоличествоОтсканировано;
						
						ВсегоУпаковокОтсканировано = ВсегоУпаковокОтсканировано + КоличествоУпаковокОтсканировано;
						
					КонецЦикла;
					
					ОсталосьУпаковокОтсканировать = СтрокаСканирования.КоличествоУпаковок - ВсегоУпаковокОтсканировано;
					ОсталосьОтсканировать = ОсталосьУпаковокОтсканировать * СтрокаСканирования.Коэффициент;
					
					Если ОсталосьУпаковокОтсканировать = 0 Тогда
						
						ОбработкаЗначение.ТоварыРазмещение.Удалить(СтрокаТоварыРазмещение);
						
					Иначе
						
						// В этом случае, в строке размещения проставляется ячейка зоны отгрузки.
						СтрокаТоварыРазмещение.Ячейка = ПараметрыРежима.ЗонаОтгрузки;
						
						СтрокаТоварыРазмещение.КоличествоУпаковок = ОсталосьУпаковокОтсканировать;
						СтрокаТоварыРазмещение.Количество = ОсталосьОтсканировать;
						
					КонецЕсли;
					
				Иначе
					
					ОсталосьУпаковокРазместить = СтрокаСканирования.КоличествоУпаковок - КоличествоУпаковокОтсканировано;
					ОсталосьРазместить = ОсталосьУпаковокРазместить * СтрокаСканирования.Коэффициент;
					
					Если ОсталосьУпаковокРазместить = 0 Тогда
						
						СтрокаТоварыРазмещение.КоличествоУпаковокРазмещено = КоличествоУпаковокОтсканировано;
						СтрокаТоварыРазмещение.КоличествоРазмещено = КоличествоОтсканировано;
						
					Иначе
						
						// Если есть отобранные, но не размещенные товары, их следует отнести в зону отгрузки.
						// Для этого - неполностью размещенную строку нужно разбить на две: в первой строке
						// будет установлено отсканированное количество, во второй - оставшееся с указанием
						// ячейки зоны отгрузки, в противном случае, документ перемещения не удастся провести.
						
						// Установить отсканированное количество.
						СтрокаТоварыРазмещение.КоличествоУпаковокРазмещено = КоличествоУпаковокОтсканировано;
						СтрокаТоварыРазмещение.КоличествоРазмещено = КоличествоОтсканировано;
						
						// Добавить новую строку с указанием оставшегося количества и ячейкой - зоной отгрузки.
						НоваяСтрока = ОбработкаЗначение.ТоварыРазмещение.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварыРазмещение);
						
						НоваяСтрока.Ячейка = ПараметрыРежима.ЗонаОтгрузки;
						
						НоваяСтрока.КоличествоУпаковок = ОсталосьУпаковокРазместить;
						НоваяСтрока.КоличествоУпаковокРазмещено = ОсталосьУпаковокРазместить;
						
						НоваяСтрока.Количество = ОсталосьРазместить;
						НоваяСтрока.КоличествоРазмещено = ОсталосьРазместить;
						
						ВыполненоСОшибками = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДокументОбъект.ТоварыРазмещение.Очистить();
			
			ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ОбработкаЗначение.ТоварыРазмещение, ДокументОбъект.ТоварыРазмещение);
			
			ЕстьНеОтсканированныеТовары = (ОбработкаЗначение.ТоварыОтбор.Итог("КоличествоУпаковок") <> ОбработкаЗначение.ТоварыОтбор.Итог("КоличествоУпаковокОтобрано"))
			Или (ОбработкаЗначение.ТоварыРазмещение.Итог("КоличествоУпаковок") <> ОбработкаЗначение.ТоварыРазмещение.Итог("КоличествоУпаковокРазмещено"));
			
			Если ЕстьНеОтсканированныеТовары Или ВыполненоСОшибками Тогда
				ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоСОшибками;
			Иначе
				ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВыполненоБезОшибок;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗадания = "Пересчет" Тогда
		ОбработкаЗначение.Товары.Очистить();
		
		Для каждого СтрокаСканирования Из ТЗОтсканированныеТовары Цикл
			
			КоличествоУпаковокОтсканировано = СтрокаСканирования.КоличествоУпаковокОтсканировано;
			КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаСканирования.Коэффициент;
			
			НоваяСтрока = ОбработкаЗначение.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСканирования);
			
			НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
			НоваяСтрока.КоличествоУпаковокФакт = КоличествоУпаковокОтсканировано;
			НоваяСтрока.Количество = КоличествоОтсканировано;
			НоваяСтрока.КоличествоФакт = КоличествоОтсканировано;
			
		КонецЦикла;
		
		ДокументОбъект.Товары.Очистить();
		ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ОбработкаЗначение.Товары, ДокументОбъект.Товары);
		
		ДокументОбъект.Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено;
		ДокументОбъект.БлокироватьЯчейки = Ложь;
		
	КонецЕсли;
	
	Если ТипЗадания = "ПроверкаОтбора" Тогда
		ДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке;
	КонецЕсли;
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		
		ЕстьОшибки = Истина;
		ИмяСобытия = НСтр("ru = 'Ошибка при записи и проведении складского задания из рабочего места работника склада'");
		
		КомментарийЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При записи и проведении складского задания произошла ошибка. Описание ошибки: ""%1""'"), 
			ИнформацияОбОшибке().Описание);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, 
			ПараметрыРежима.Задание.Метаданные(), 
			ПараметрыРежима.Задание, 
			КомментарийЖурнала, 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
	КонецПопытки;
	
	// Вывести сообщение о завершении выполнения задания.
	Кнопки = Новый СписокЗначений;
	ДобавитьКнопкуПереходаКВыборуЗадания(Кнопки, ПараметрыРежима.ТипЗадания);
	
	Если ЕстьОшибки Тогда
		
		ЗаголовокСообщения = НСтр("ru = 'Задание не выполнено'");
		ТекстСообщения = НСтр("ru = 'При завершении задания произошла ошибка (см. журнал регистрации). Не удалось провести задание.'");
		
	Иначе
		
		ЗаголовокСообщения = НСтр("ru = 'Задание выполнено'");
		
		Если ТипЗадания = "Отбор" Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполнение задания завершено. Отобранные товары следует отнести в зону отгрузки ""%1"".'"), 
				ПараметрыРежима.ЗонаОтгрузки);
			
		ИначеЕсли ТипЗадания = "Размещение" Тогда
			
			Если ЕстьНеОтсканированныеТовары Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выполнение задания завершено. Неразмещенные товары следует отнести в зону приемки ""%1""'"), 
					ПараметрыРежима.ЗонаПриемки);
			Иначе
				ТекстСообщения = НСтр("ru = 'Выполнение задания завершено.'");
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "Перемещение" Тогда
			
			ЕстьНеРазмещенныеТовары = (ОбработкаОбъект.ТоварыОтбор.Итог("КоличествоУпаковокОтобрано") > Форма.ТоварыДляСканирования.Итог("КоличествоУпаковокОтсканировано"));
			
			Если ЕстьНеРазмещенныеТовары Тогда
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выполнение задания завершено. 
					|Отобранные, но не размещенные товары 
					|следует отнести в зону отгрузки: ""%1""'"), 
					ПараметрыРежима.ЗонаОтгрузки);
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Выполнение задания завершено.'");
				
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "Пересчет" Или ТипЗадания = "ПроверкаОтбора" Тогда
			
			ТекстСообщения = НСтр("ru = 'Выполнение задания завершено.'");
			
		КонецЕсли;
		
		ОчиститьТоварыСканирования(Форма);
		
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(Форма.Задание, Форма.УникальныйИдентификатор);
	ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки, ЗаголовокСообщения);
	
КонецПроцедуры

// Процедура выполняет завершение выполнения складского задания. В зависимости от типа
// задания и степени его выполнения вызываются дополнительные процедуры обработки.
//
Процедура ЗавершитьВыполнениеЗадания(Форма) Экспорт
	
	ПараметрыРежима       = Форма.ПараметрыРежима;
	Элементы              = Форма.Элементы;
	ОбработкаОбъект       = Форма.Объект;
	ЭтоНаборТоваров       = Форма.ПараметрыРежима.НаборТоваров;
	ТипЗадания            = Форма.ПараметрыРежима.ТипЗадания;
	ОтборОтсканирован     = Форма.ПараметрыРежима.ОтборОтсканирован;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	
	ЕстьОтсканированныеТовары = ЕстьОтсканированныеТовары(Форма);
	
	Если ЭтоНаборТоваров Тогда
		
		ЗавершитьВыполнениеНабораТоваров(Форма);
		
	Иначе
		
		Если ТипЗадания = "Перемещение" Тогда
			
			Если Не ОтборОтсканирован Тогда
				
				Если Не ЕстьОтсканированныеТовары Тогда
					ОтменитьВыполнениеЗадания(Форма);
					Возврат;
				КонецЕсли;
				
				// Выполняется завершение задания когда частично отсканированы отобранные
				// товары, товары для размещения не отсканированы вообще.
				Если Не ЗначениеЗаполнено(ПараметрыРежима.ЗонаПриемки) Тогда
					ПерейтиКВыборуЗоныПриемкиОтгрузки(Форма, "ЗонаПриемки");
				КонецЕсли;
				
			Иначе
				
				// Проверить, если отобранные товары размещены не полностью,
				// то оставшиеся следует отнести в зону отгрузки. Если зона
				// отгрузки не определена, то перейти к выбору зону отгрузки.
				ОтобранноеКоличество  = ОбработкаОбъект.ТоварыОтбор.Итог("КоличествоУпаковокОтобрано");
				РазмещенноеКоличество = ТоварыДляСканирования.Итог("КоличествоУпаковокОтсканировано");
				
				Если ОтобранноеКоличество <> РазмещенноеКоличество Тогда
					Если Не ЗначениеЗаполнено(ПараметрыРежима.ЗонаОтгрузки) Тогда
						ПерейтиКВыборуЗоныПриемкиОтгрузки(Форма, "ЗонаОтгрузки");
					КонецЕсли;
				Иначе
					ЗавершитьВыполнениеСкладскогоЗадания(Форма);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
			
			Если Не ЕстьОтсканированныеТовары Тогда
				ОтменитьВыполнениеЗадания(Форма);
				Возврат;
			КонецЕсли;
			
			ЗавершитьВыполнениеЗаданияПроверкиОтбора(Форма);
			
		Иначе
			
			ЗавершитьВыполнениеСкладскогоЗадания(Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПослеВыполненияЗадания(Форма);
	
КонецПроцедуры

// Вызывается после выполнения складского задания. Выполняет очистку полей параметров 
// режима и значений реквизитов формы.
//
Процедура ПослеВыполненияЗадания(Форма)
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ПараметрыРежима.РаспоряжениеНаИнвентаризацию = Неопределено;
	
КонецПроцедуры

Функция ЕстьНеОтсканированныеЯчейки(Форма)
	
	ЕстьНеОтсканированные = Не (Форма.ЯчейкиДляСканирования.Итог("Отсканирована") = Форма.ЯчейкиДляСканирования.Количество());
	Возврат ЕстьНеОтсканированные;
	
КонецФункции

Функция ЕстьОтсканированныеЯчейки(Форма)
	
	ЕстьОтсканированные = (Форма.ЯчейкиДляСканирования.Итог("Отсканирована") > 0);
	Возврат ЕстьОтсканированные;
	
КонецФункции

Функция ЕстьНеОтсканированныеТовары(Форма)
	
	Если Форма.ПараметрыРежима.НаборТоваров Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьНеОтсканированные = Не (Форма.ТоварыДляСканирования.Итог("КоличествоУпаковокОтсканировано") = Форма.ТоварыДляСканирования.Итог("КоличествоУпаковок"));
	
	Возврат ЕстьНеОтсканированные;
	
КонецФункции

Функция ЕстьОтсканированныеТовары(Форма)
	
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ТипЗадания      = Форма.ПараметрыРежима.ТипЗадания;
	
	ЕстьОтсканированные = Ложь;
	
	Если ЭтоНаборТоваров Тогда
		
		ЕстьОтсканированные = (Форма.ОтсканированныеТовары.Количество() > 0);
		
	Иначе
		
		Если ТипЗадания = "Пересчет" Тогда
			
			ЕстьОтсканированные = (Форма.ОтсканированныеТовары.Итог("КоличествоУпаковокОтсканировано") > 0);
			
		ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
			
			ЕстьОтсканированные = (Форма.ОтсканированныеТовары.Итог("КоличествоУпаковокОтсканировано") > 0);
			
		Иначе
			
			ЕстьОтсканированные = (Форма.ТоварыДляСканирования.Итог("КоличествоУпаковокОтсканировано") > 0);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьОтсканированные;
	
КонецФункции

Функция ЭтоПоследнийТовар(Форма) Экспорт
	
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Если ТекущаяСтрокаСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоПоследний = (ТекущаяСтрокаСканирования.КоличествоТоваровВЯчейке = ТекущаяСтрокаСканирования.НомерТовараВЯчейке);
	
	Возврат ЭтоПоследний;
	
КонецФункции

Функция ЭтоПоследняяЯчейка(Форма) Экспорт
	
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Если ТекущаяСтрокаСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЭтоПоследняя = (ТекущаяСтрокаСканирования.КоличествоЯчеек = ТекущаяСтрокаСканирования.НомерЯчейки);
	Возврат ЭтоПоследняя;
	
КонецФункции

// Переключает рабочее место в режим выбора зоны приемки/отгрузки.
//
// Параметры:
//	Форма - УправляемаяФорма - форма рабочего места,
//	ТипЗоны - Строка - типы зоны - приемки или отгрузки.
//
Процедура ПерейтиКВыборуЗоныПриемкиОтгрузки(Форма, ТипЗоны)
	
	Элементы = Форма.Элементы;
	ЗоныПриемкиОтгрузки = Форма.ЗоныПриемкиОтгрузки;
	ПараметрыРежима = Форма.ПараметрыРежима;
	ОбработкаОбъект = Форма.Объект;
	
	// Установить тип зоны.
	ПараметрыРежима.ВыборЗоныПриемкиОтгрузки = ТипЗоны;
	
	// Установить текст заголовка колонки ячейки выбора зоны приемки/отгрузки.
	Если ТипЗоны = "ЗонаПриемки" Тогда
		ТекстЗаголовкаФормы = ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВыбЗонуПриемки", Форма);
		ТекстЗаголовкаКолонкиЯчейки = НСтр("ru = 'Зона приемки'");
		
		ТипСкладскойЯчейки = Перечисления.ТипыСкладскихЯчеек.Приемка;
	ИначеЕсли ТипЗоны = "ЗонаОтгрузки" Тогда
		ТекстЗаголовкаФормы = ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВыбЗонуОтгрузки", Форма);
		ТекстЗаголовкаКолонкиЯчейки = НСтр("ru = 'Зона отгрузки'");
		
		ТипСкладскойЯчейки = Перечисления.ТипыСкладскихЯчеек.Отгрузка;
	КонецЕсли;
	
	// Установить заголовки элементов.
	РабочееМестоРаботникаСкладаКлиентСервер.УстановитьЗаголовокФормы(Форма, ТекстЗаголовкаФормы);
	Элементы.ЗоныПриемкиОтгрузкиЯчейка.Заголовок = ТекстЗаголовкаКолонкиЯчейки;
	
	// Установить отборы списка ячеек.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЗоныПриемкиОтгрузки.Отбор,
		"ТипСкладскойЯчейки",
		ТипСкладскойЯчейки,
		ВидСравненияКомпоновкиДанных.Равно,
		"ТипСкладскойЯчейки",
		Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЗоныПриемкиОтгрузки.Отбор,
		"Владелец",
		ОбработкаОбъект.Склад,
		ВидСравненияКомпоновкиДанных.Равно,
		"Склад",
		Истина);
	
	ПерейтиНаСтраницу(Форма, "СтраницаВыборЗоныПриемкиОтгрузки");
	
КонецПроцедуры

// Функция возвращает значение перечисления - исходного статуса складского задания.
//
// Параметры:
//	ТипЗадания - Строка - тип складского задания.
//
Функция ИсходныйСтатусСкладскогоЗадания(ТипЗадания)
	
	Статус = Неопределено;
	
	Если ТипЗадания = "Отбор" Или ТипЗадания = "Размещение" Или ТипЗадания = "Перемещение" Тогда
		
		Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		Статус = Перечисления.СтатусыПересчетовТоваров.ВРаботе;
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		Статус = Перечисления.СтатусыПриходныхОрдеров.КПоступлению;
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		Статус = Перечисления.СтатусыРасходныхОрдеров.КПроверке;
		
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

// Устанавливает исходный статус у складского задания.
//
// Параметры:
//	Задание - ДокументСсылка.ПриходныйОрдер, ДокументСсылка.РасходныйОрдер,
//	         ДокументСсылка.ОтборРазмещениеТоваров, ДокументСсылка.ПересчетТоваров - складское задание,
//	         которое приинимается в работу,
//	ИсходныйСтатус - ПеречислениеСсылка.СтатусыОтборовРазмещенийТоваров, 
//	         ПеречислениеСсылка.СтатусыПересчетовТоваров, Перечисление.СтатусыПриходныхОрдеров - исходный
//	         статус складского задания,
//	Отказ - Булево - флаг отказа при выполнении,
//	ТекстОшибки - Строка - переменная в которую записывается текст ошибки.
//
Процедура УстановитьИсходныйСтатусСкладскогоЗадания(Задание, ИсходныйСтатус, Отказ = Ложь, ТекстОшибки = "")
	
	Попытка
		
		ДокументОбъект = Задание.ПолучитьОбъект();
		ДокументОбъект.Статус = ИсходныйСтатус;
		
		Если ОбщегоНазначенияУТ.ЕстьРеквизитОбъекта(ДокументОбъект, "Исполнитель") Тогда
			
			ДокументОбъект.Исполнитель = Неопределено;
			
		КонецЕсли;
		
		Если ОбщегоНазначенияУТ.ЕстьРеквизитОбъекта(ДокументОбъект, "Контролер") Тогда
			
			ДокументОбъект.Контролер = Неопределено;
			
		КонецЕсли;
		
		РежимЗаписи = ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ДокументОбъект.Записать(РежимЗаписи);
		
	Исключение
		
		Отказ = Истина;
		
		// Добавить запись об ошибке в журнал регистрации.
		ИмяСобытия = НСтр("ru = 'Ошибка при установке исходного статуса складского задания.'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При установке исходного статуса складского задания произошла ошибка. Описание ошибки: ""%1""'"), 
			ИнформацияОбОшибке().Описание);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,
			Задание.Метаданные(),
			Задание.Ссылка,
			ТекстОшибки,
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
	КонецПопытки;
	
КонецПроцедуры

// Отменяет выполнение текущего складского задания, переводит в первоначальный статус.
//
Процедура ОтменитьВыполнениеЗадания(Форма) Экспорт
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	Форма.Задание = ПараметрыРежима.Задание;
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	
	ИсходныйСтатус = ИсходныйСтатусСкладскогоЗадания(ТипЗадания);
	
	Если ЭтоНаборТоваров Тогда
		
		Если ТипЗадания = "Размещение" Тогда
			
			Форма.ТекущаяСтрокаСканирования = Неопределено;
			ОчиститьТоварыСканирования(Форма);
			ИнициализироватьПараметрыРежима(Форма);
			
		ИначеЕсли ТипЗадания = "Приемка" Тогда
			
			УстановитьИсходныйСтатусСкладскогоЗадания(
				Форма.Задание, 
				ИсходныйСтатус, 
				ЕстьОшибки, 
				ТекстОшибки);
			
		КонецЕсли;
	Иначе
		
		УстановитьИсходныйСтатусСкладскогоЗадания(
			Форма.Задание, 
			ИсходныйСтатус, 
			ЕстьОшибки, 
			ТекстОшибки);
		
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(Форма.Задание, Форма.УникальныйИдентификатор);
	
	Если ЕстьОшибки Тогда
		
		КнопкаПерейтиВОсновноеМеню = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКВыборуСкладскойОперации",
			НСтр("ru = 'Перейти к выбору операции'"));
		
		ПоказатьДиалогСообщение(Форма, ТекстОшибки, КнопкаПерейтиВОсновноеМеню);
		
	Иначе
		
		Если ЭтоНаборТоваров Тогда
			
			Если ТипЗадания = "Размещение" Тогда
				ПерейтиКВыборуСкладскойОперации(Форма);
			ИначеЕсли ТипЗадания = "Приемка" Тогда
				ПерейтиКВыборуЗадания(Форма, ТипЗадания);
			КонецЕсли;
			
		Иначе
			ОчиститьТоварыСканирования(Форма);
			ПерейтиКВыборуЗадания(Форма, ТипЗадания);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при постановке задания на приемку в работу. Режим "Приемка"
// похож на режим создания нового складского задания на размещение - сканируются
// существующие товары.
//
Процедура ПерейтиКПриемкеТоваров(Форма) Экспорт
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	Элементы = Форма.Элементы;
	
	ПараметрыРежима.СозданноеЗадание = Неопределено;
	ПараметрыРежима.ТипЗадания   = "Приемка";
	ПараметрыРежима.НаборТоваров = Истина;
	
	Форма.СообщениеОбОшибке = "";
	Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
	
	Форма.ТоварыДляСканирования.Очистить();
	Форма.ОтсканированныеТовары.Очистить();
	Форма.ЯчейкиДляСканирования.Очистить();
	
	ПерейтиКПараметруСканирования(Форма, "Номенклатура");
	
	// Установить заголовки элементов.
	Элементы.СканированиеТовар.Заголовок = НСтр("ru = '<Товар>'");
	Элементы.СканированиеСерия.Заголовок = НСтр("ru = '<Серия>'");
	
	Элементы.НадписьВзять.Заголовок = "";
	Элементы.НадписьУпаковка.Заголовок = "";
	Элементы.НадписьКоличествоУпаковок.Заголовок = "";
	Элементы.СканированиеВвестиКоличество.Заголовок = 0;
	
	ВывестиСостояниеВыполненияЗадания(Форма);
	ПерейтиКСканированию(Форма);
	
КонецПроцедуры

// Процедура вызывается при создании нового складского задания на размещение.
// Режим создания нового задания отличается от режима сканирования в существующем
// задании.
//
Процедура СоздатьНовоеСкладскоеЗадание(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	ОбработкаОбъект = Форма.Объект;
	ПараметрыРежима = Форма.ПараметрыРежима;
	
	ПараметрыРежима.СозданноеЗадание = Неопределено;
	
	Форма.СообщениеОбОшибке = "";
	
	ОчиститьТоварыСканирования(Форма);
	
	Форма.ТекущаяСтрокаСканирования = СтрокаСканирования();
	
	// Определить зону приемки.
	ЗонаПриемкиПоУмолчанию = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(ОбработкаОбъект.Склад, ОбработкаОбъект.Помещение);
	ЕстьЗонаПриемкиПоУмолчанию = ЗначениеЗаполнено(ЗонаПриемкиПоУмолчанию);
	
	Если ЕстьЗонаПриемкиПоУмолчанию Тогда
		Форма.ТекущаяСтрокаСканирования.Ячейка = ЗонаПриемкиПоУмолчанию;
		Форма.ТекущаяСтрокаСканирования.СкЯчейка = ЗонаПриемкиПоУмолчанию;
		
		ПерейтиКПараметруСканирования(Форма, "Номенклатура");
	Иначе
		ПерейтиКПараметруСканирования(Форма, "Ячейка");
	КонецЕсли;
	
	ПараметрыРежима.ТипЗадания = "Размещение";
	ПараметрыРежима.НаборТоваров = Истина;
	
	// Установить заголовки элементов.
	Элементы.СканированиеТовар.Заголовок = НСтр("ru = '<Товар>'");
	Элементы.СканированиеСерия.Заголовок = НСтр("ru = '<Серия>'");
	
	Элементы.НадписьВзять.Заголовок = "";
	Элементы.НадписьУпаковка.Заголовок = "";
	Элементы.НадписьКоличествоУпаковок.Заголовок = "";
	Элементы.СканированиеВвестиКоличество.Заголовок = 0;
	
	УстановитьВидимостьЭлементовСканирования(Форма);
	
	ВывестиСостояниеВыполненияЗадания(Форма);
	ПерейтиКСканированию(Форма);
	
КонецПроцедуры

// Процедура заполняет статусы указания серий в табличных частях формы.
//
Процедура ЗаполнитьСтатусыУказанияСерий(Форма)
	
	Перем ПараметрыУказанияСерий;
	
	ПараметрыРежима   = Форма.ПараметрыРежима;
	ОбработкаОбъект   = Форма.Объект;
	ТипЗадания        = Форма.ПараметрыРежима.ТипЗадания;
	ОтборОтсканирован = Форма.ПараметрыРежима.ОтборОтсканирован;
	ДокументОбъект    = Форма.ПараметрыРежима.Задание.ПолучитьОбъект();
	
	// При выполнении приемки товаров по приходному ордеру, данные ТЧ перезаполняются 
	// отсканированными значениями.
	Если ТипЗадания = "Приемка" Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗадания = "Отбор" Или ТипЗадания = "Размещение" Или ТипЗадания = "Перемещение" Тогда
		
		ПараметрыУказанияСерий = Документы.ОтборРазмещениеТоваров.ПараметрыУказанияСерий(ДокументОбъект);
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		ПараметрыУказанияСерий = Документы.ПересчетТоваров.ПараметрыУказанияСерий(ДокументОбъект);
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		ПараметрыУказанияСерий = Документы.РасходныйОрдерНаТовары.ПараметрыУказанияСерий(ДокументОбъект);
		
	КонецЕсли;
	
	Если ТипЗадания = "Отбор" Тогда
		
		ПараметрыУказанияСерий.ИмяТЧТовары = "ТоварыОтбор";
		ПараметрыУказанияСерий.ИмяТЧСерии = "ТоварыОтбор";
		
		ПараметрыУказанияСерий.ФактОтбора = Истина;
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		ПараметрыУказанияСерий.ИмяТЧТовары = "ТоварыРазмещение";
		ПараметрыУказанияСерий.ИмяТЧСерии = "ТоварыРазмещение";
		
		ПараметрыУказанияСерий.ФактОтбора = Истина;
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		ПараметрыУказанияСерий.ИмяТЧТовары = "ТоварыОтбор";
		ПараметрыУказанияСерий.ИмяТЧСерии = "ТоварыОтбор";
		
		Если ОтборОтсканирован Тогда
			
			ПараметрыУказанияСерий.ИмяТЧТовары = "ТоварыРазмещение";
			ПараметрыУказанияСерий.ИмяТЧСерии = "ТоварыРазмещение";
			
		КонецЕсли;
		
		ПараметрыУказанияСерий.ФактОтбора = Истина;
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		ПараметрыУказанияСерий.ИмяТЧСерии = "Товары";
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		ПараметрыУказанияСерий.ИмяТЧТовары = "Товары";
		ПараметрыУказанияСерий.ИмяТЧСерии = "Серии";
		
		ПараметрыУказанияСерий.ФактОтбора = Истина;
		
	КонецЕсли;
	
	ОбработкаЗначение = ДанныеФормыВЗначение(ОбработкаОбъект, Тип("ОбработкаОбъект.РабочееМестоРаботникаСклада"));
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
		ОбработкаЗначение, 
		ПараметрыУказанияСерий);
	
	ЗначениеВДанныеФормы(ОбработкаЗначение, ОбработкаОбъект);
	
КонецПроцедуры

// Функция возвращает массив с данными табличных частей документа - складского задания.
// Если тип складского задания - "Перемещение", то массив содержит 2 элемента - данные
// табличной части "ТоварыОтбор" и "ТоварыРазмещение".
//
Функция ТоварыЗаданияДляСканирования(Задание)
	
	ТипЗадания = ТипЗадания(Задание);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задание", Задание);
	
	Если ТипЗадания = "Отбор" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.НомерСтроки,
		|	Товары.Количество,
		|	Товары.КоличествоОтобрано,
		|	Товары.КоличествоУпаковок,
		|	Товары.КоличествоУпаковокОтобрано,
		|	Товары.Номенклатура,
		|	Товары.Упаковка,
		|	Товары.Характеристика,
		|	Товары.Ячейка,
		|	Товары.ОбъемУпаковки,
		|	Товары.ВесУпаковки,
		|	Товары.Серия,
		|	Товары.СтатусУказанияСерий,
		|	Товары.Упаковка.Коэффициент КАК Коэффициент
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Задание";
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.НомерСтроки,
		|	Товары.Количество,
		|	Товары.КоличествоРазмещено,
		|	Товары.КоличествоУпаковок,
		|	Товары.КоличествоУпаковокРазмещено,
		|	Товары.Номенклатура,
		|	Товары.Упаковка,
		|	Товары.Характеристика,
		|	Товары.Ячейка,
		|	Товары.ОбъемУпаковки,
		|	Товары.ВесУпаковки,
		|	Товары.Серия,
		|	Товары.СтатусУказанияСерий,
		|	Товары.Упаковка.Коэффициент КАК Коэффициент
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Задание";
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.НомерСтроки,
		|	Товары.Количество,
		|	Товары.КоличествоОтобрано,
		|	Товары.КоличествоУпаковок,
		|	Товары.КоличествоУпаковокОтобрано,
		|	Товары.Номенклатура,
		|	Товары.Упаковка,
		|	Товары.Характеристика,
		|	Товары.Ячейка,
		|	Товары.ОбъемУпаковки,
		|	Товары.ВесУпаковки,
		|	Товары.Серия,
		|	Товары.СтатусУказанияСерий,
		|	Товары.Упаковка.Коэффициент КАК Коэффициент
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыОтбор КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Задание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.НомерСтроки,
		|	Товары.Количество,
		|	Товары.КоличествоРазмещено,
		|	Товары.КоличествоУпаковок,
		|	Товары.КоличествоУпаковокРазмещено,
		|	Товары.Номенклатура,
		|	Товары.Упаковка,
		|	Товары.Характеристика,
		|	Товары.Ячейка,
		|	Товары.ОбъемУпаковки,
		|	Товары.ВесУпаковки,
		|	Товары.Серия,
		|	Товары.СтатусУказанияСерий,
		|	Товары.Упаковка.Коэффициент КАК Коэффициент
		|ИЗ
		|	Документ.ОтборРазмещениеТоваров.ТоварыРазмещение КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Задание";
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.НомерСтроки,
		|	Товары.Количество,
		|	Товары.КоличествоФакт,
		|	Товары.КоличествоУпаковок,
		|	Товары.КоличествоУпаковокФакт,
		|	Товары.Номенклатура,
		|	Товары.Упаковка,
		|	Товары.Характеристика,
		|	Товары.Ячейка,
		|	Товары.ИзлишекПорча,
		|	Товары.Серия,
		|	Товары.СтатусУказанияСерий,
		|	Товары.Упаковка.Коэффициент КАК Коэффициент
		|ИЗ
		|	Документ.ПересчетТоваров.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Задание";
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Упаковка,
		|	Товары.КоличествоУпаковок,
		|	Товары.Количество,
		|	Товары.СтатусУказанияСерий,
		|	Товары.Упаковка.Коэффициент КАК Коэффициент
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Задание";
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Товары.Ссылка,
		|	Товары.НомерСтроки,
		|	Товары.Номенклатура,
		|	Товары.Характеристика,
		|	Товары.Упаковка,
		|	Товары.КоличествоУпаковок КАК КоличествоУпаковокВДокументе,
		|	Товары.Количество КАК КоличествоВДокументе,
		|	Товары.СтатусУказанияСерий,
		|	Товары.Упаковка.Коэффициент КАК Коэффициент,
		|	Товары.Количество,
		|	Товары.КоличествоУпаковок
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Задание";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ТоварыЗадания = Запрос.ВыполнитьПакет();
	
	// Элементы массива - значения типа "РезультатЗапроса", нужно пройти
	// по элементам и выгрузить результат запроса в таблицу значений.
	Для А = 0 По ТоварыЗадания.ВГраница() Цикл
		
		ТоварыЗадания[А] = ТоварыЗадания[А].Выгрузить();
		
	КонецЦикла;
	
	Возврат ТоварыЗадания;
	
КонецФункции

// Процедура получает данные о сериях из соответствующей табличной части документа
// складского задания и переносит их в табличную часть обработки - Серии.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма обработки,
//	Задание (ДокументСсылка.ПриходныйОрдер, ДокументСсылка.РасходныйОрдер,
//	         ДокументСсылка.ОтборРазмещениеТоваров, ДокументСсылка.ПересчетТоваров) - складское задание,
//	         которое приинимается в работу,
//	Отказ (Булево) - флаг отказа в случае возникновения ошибки,
//	ОписаниеОшибки (Неопределено) - переменная в которую записывается строка - описание ошибки.
//
Процедура ПолучитьСерииЗадания(Форма, Задание, Отказ, ОписаниеОшибки)
	
	ОбработкаОбъект = Форма.Объект;
	
	// Получить тип задания.
	ТипЗадания = ТипЗадания(Задание);
	
	Если ТипЗадания = Неопределено Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Не удалось получить тип задания'");
		Отказ = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ТипЗадания = "ПроверкаОтбора" Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработкаЗначение = ДанныеФормыВЗначение(ОбработкаОбъект, Тип("ОбработкаОбъект.РабочееМестоРаботникаСклада"));
	
	ОбработкаЗначение.Серии.Очистить();
	
	// Получить объект задания.
	ДокументОбъект = Задание.ПолучитьОбъект();
	
	Если ДокументОбъект = Неопределено Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Не удалось получить объект задания'");
		Отказ = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	// Перенести серии задания в табличную часть обработки.
	ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ДокументОбъект.Серии, ОбработкаЗначение.Серии);
	
	ЗначениеВДанныеФормы(ОбработкаЗначение, ОбработкаОбъект);
	
КонецПроцедуры

// Процедура получает данные о товарах из соответвующей табличной части документа
// складского задания и переносит их в табличные части обработки - Товары, ТоварыОтбор,
// ТоварыРазмещение.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма обработки,
//	Задание (ДокументСсылка.ПриходныйОрдер, ДокументСсылка.РасходныйОрдер,
//	         ДокументСсылка.ОтборРазмещениеТоваров, ДокументСсылка.ПересчетТоваров) - складское задание,
//	         которое приинимается в работу,
//	Отказ (Булево) - флаг отказа в случае возникновения ошибки,
//	ОписаниеОшибки (Неопределено) - переменная в которую записывается строка - описание ошибки.
//
Процедура ПолучитьТоварыЗадания(Форма, Задание, Отказ, ОписаниеОшибки)
	
	ОбработкаОбъект = Форма.Объект;
	
	// Получить тип задания.
	ТипЗадания = ТипЗадания(Задание);
	
	Если ТипЗадания = Неопределено Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Не удалось получить тип задания'");
		Отказ = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	// При выполнении приемки товаров по приходному ордеру, существующие данные
	// в документе затираются фактически отсканированными значениями.
	Если ТипЗадания = "Приемка" Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаЗначение = ДанныеФормыВЗначение(ОбработкаОбъект, Тип("ОбработкаОбъект.РабочееМестоРаботникаСклада"));
	
	ОбработкаЗначение.ТоварыОтбор.Очистить();
	ОбработкаЗначение.ТоварыРазмещение.Очистить();
	ОбработкаЗначение.Товары.Очистить();
	ОбработкаЗначение.Серии.Очистить();
	
	// Получить объект задания.
	ДокументОбъект = Задание.ПолучитьОбъект();
	
	Если ДокументОбъект = Неопределено Тогда
		
		ОписаниеОшибки = НСтр("ru = 'Не удалось получить объект задания'");
		Отказ = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	ТоварыЗадания = ТоварыЗаданияДляСканирования(Задание);
	
	Если ТипЗадания = "Отбор" Тогда
		
		Если ДокументОбъект.ТоварыОтбор.Количество() = 0 Тогда
			
			ОписаниеОшибки = НСтр("ru = 'Не заполнена табличная часть ""Товары (отбор)"" складского задания.'");
			Отказ = Истина;
			
			Возврат;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ТоварыЗадания[0], ОбработкаЗначение.ТоварыОтбор);
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		Если ДокументОбъект.ТоварыРазмещение.Количество() = 0 Тогда
			
			ОписаниеОшибки = НСтр("ru = 'Не заполнена табличная часть ""Товары (размещение)"" складского задания.'");
			Отказ = Истина;
			
			Возврат;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ТоварыЗадания[0], ОбработкаЗначение.ТоварыРазмещение);
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		Если ДокументОбъект.ТоварыОтбор.Количество() = 0 Тогда
			
			ОписаниеОшибки = НСтр("ru = 'Не заполнена табличная часть ""Товары (отбор)"" складского задания.'");
			Отказ = Истина;
			
			Возврат;
			
		КонецЕсли;
		
		Если ДокументОбъект.ТоварыРазмещение.Количество() = 0 Тогда
			
			ОписаниеОшибки = НСтр("ru = 'Не заполнена табличная часть ""Товары (размещение)"" складского задания.'");
			Отказ = Истина;
			
			Возврат;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ТоварыЗадания[0], ОбработкаЗначение.ТоварыОтбор);
		ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ТоварыЗадания[1], ОбработкаЗначение.ТоварыРазмещение);
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		Если ДокументОбъект.Товары.Количество() = 0 Тогда
			
			ОписаниеОшибки = НСтр("ru = 'Не заполнена табличная часть складского задания.'");
			Отказ = Истина;
			
			Возврат;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ТоварыЗадания[0], ОбработкаЗначение.Товары);
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		Если ДокументОбъект.Товары.Количество() = 0 Тогда
			
			ОписаниеОшибки = НСтр("ru = 'Не заполнена табличная часть складского задания.'");
			Отказ = Истина;
			
			Возврат;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ТоварыЗадания[0], ОбработкаЗначение.Товары);
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		Если ДокументОбъект.Товары.Количество() = 0 Тогда
			
			ОписаниеОшибки = НСтр("ru = 'Не заполнена табличная часть складского задания.'");
			Отказ = Истина;
			
			Возврат;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(ТоварыЗадания[0], ОбработкаЗначение.Товары);
		
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ОбработкаЗначение, ОбработкаОбъект);
	
КонецПроцедуры

// Процедура устанавливает статус "В работе" - документу складскому заданию.
// 
// Параметры:
//	Форма - УправляемаяФорма - форма обработки,
//	Задание - ДокументСсылка.ПриходныйОрдер, ДокументСсылка.РасходныйОрдер,
//	         ДокументСсылка.ОтборРазмещениеТоваров, ДокументСсылка.ПересчетТоваров - складское задание,
//	         которое приинимается в работу,
//	Отказ - Булево - флаг отказа в случае возникновения ошибки,
//	ОписаниеОшибки - Неопределено - переменная в которую записывается строка - описание ошибки.
//
Процедура УстановитьСтатусЗаданияВРаботе(Форма, Задание, Отказ, ОписаниеОшибки)
	
	Перем Результат;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработкаОбъект = Форма.Объект;
	ДокументОбъект = Задание.ПолучитьОбъект();
	
	Если ДокументОбъект = Неопределено Тогда
		
		Отказ = Истина;
		ОписаниеОшибки = НСтр("ru = 'Не удалось получить объект задания'");
		
		Возврат;
		
	КонецЕсли;
	
	ТипЗадания = ТипЗадания(Задание);
	
	Если ТипЗадания = "Отбор" Или ТипЗадания = "Размещение" Или ТипЗадания = "Перемещение" Тогда
		
		ДокументОбъект.Статус = Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе;
		ДокументОбъект.Исполнитель = ОбработкаОбъект.Пользователь;
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		ДокументОбъект.Статус = Перечисления.СтатусыПересчетовТоваров.ВнесениеРезультатов;
		ДокументОбъект.Исполнитель = ОбработкаОбъект.Пользователь;
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		ДокументОбъект.Статус = Перечисления.СтатусыПриходныхОрдеров.ВРаботе;
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		ДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.ВРаботе;
		ДокументОбъект.Контролер = ОбработкаОбъект.Пользователь;
		
	КонецЕсли;
	
	Попытка
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Отказ = Истина;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Возврат;
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОчиститьТоварыСканирования(Форма)
	
	Форма.ПараметрыРежима.Задание = Неопределено;
	
	Форма.ТоварыДляСканирования.Очистить();
	Форма.ОтсканированныеТовары.Очистить();
	Форма.ЯчейкиДляСканирования.Очистить();
	
КонецПроцедуры

Процедура ОтменитьНеОтобранныеТовары(Форма)
	
	Объект = Форма.Объект;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	
	Отбор = Новый Структура("НомерСтроки");
	
	Для каждого СтрокаТоварыОтбор Из Объект.ТоварыОтбор Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТоварыОтбор);
		
		НайденныеСтроки = ТоварыДляСканирования.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТоварыДляСканирования = НайденныеСтроки[0];
		СтрокаТоварыДляСканирования.КоличествоУпаковок = СтрокаТоварыОтбор.КоличествоУпаковокОтобрано;
		
		Если СтрокаТоварыОтбор.КоличествоУпаковокОтобрано = 0 Тогда
			ТоварыДляСканирования.Удалить(СтрокаТоварыДляСканирования);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет таблицу значений формы данными о товарах для сканирования.
//
Процедура ЗаполнитьТоварыДляСканирования(Форма)
	
	ТипЗадания            = Форма.ПараметрыРежима.ТипЗадания;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ПараметрыРежима       = Форма.ПараметрыРежима;
	ОбработкаОбъект       = Форма.Объект;
	ОтборОтсканирован     = Форма.ПараметрыРежима.ОтборОтсканирован;
	
	ТоварыДляСканирования.Очистить();
	
	Если ТипЗадания = "Отбор" Тогда
		
		ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(
			ОбработкаОбъект.ТоварыОтбор, 
			ТоварыДляСканирования);
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(
			ОбработкаОбъект.ТоварыРазмещение, 
			ТоварыДляСканирования);
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		Если Не ОтборОтсканирован Тогда
			
			ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(
				ОбработкаОбъект.ТоварыОтбор, 
				ТоварыДляСканирования);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(
				ОбработкаОбъект.ТоварыРазмещение, 
				ТоварыДляСканирования);
			
			ОтменитьНеОтобранныеТовары(Форма);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(
			ОбработкаОбъект.Товары, 
			ТоварыДляСканирования);
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		Отбор = Новый Структура("Номенклатура, Характеристика");
		ОтборПоТовару = Новый Структура("Номенклатура, Характеристика, Упаковка");
		
		Для каждого СтрокаТовары Из ОбработкаОбъект.Товары Цикл
			
			Если СерииУказываютсяПриПланированииОтбора(СтрокаТовары.СтатусУказанияСерий) Тогда
				
				// Если товар, по которому указываются серии, уже есть в таблице товаров для сканирования,
				// то по нему серии уже включены в таблицу товаров для сканирования.
				ЗаполнитьЗначенияСвойств(ОтборПоТовару, СтрокаТовары);
				
				МассивСтрокТоваровДляСканирования = ТоварыДляСканирования.НайтиСтроки(ОтборПоТовару);
				
				Если МассивСтрокТоваровДляСканирования.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(Отбор, СтрокаТовары);
				
				МассивСтрокСерий = ОбработкаОбъект.Серии.НайтиСтроки(Отбор);
				
				Для каждого СтрокаСерии Из МассивСтрокСерий Цикл
					
					НоваяСтрока = ТоварыДляСканирования.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерии);
					
				КонецЦикла;
				
			Иначе
				
				НоваяСтрока = ТоварыДляСканирования.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЯчейкиДляСканирования(Форма)
	
	ТипЗадания            = Форма.ПараметрыРежима.ТипЗадания;
	ЯчейкиДляСканирования = Форма.ЯчейкиДляСканирования;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	
	Если ТипЗадания = "Приемка" Или ТипЗадания = "ПроверкаОтбора" Тогда
		Возврат;
	КонецЕсли;
	
	ЯчейкиДляСканирования.Очистить();
	
	Отбор = Новый Структура("Ячейка");
	
	Для каждого СтрокаТЗ Из ТоварыДляСканирования Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
		
		НайденныеСтроки = ЯчейкиДляСканирования.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = ЯчейкиДляСканирования.Добавить();
			
			НоваяСтрока.Ячейка = СтрокаТЗ.Ячейка;
			НоваяСтрока.Отсканирована = 0;
			НоваяСтрока.НомерЯчейки = ЯчейкиДляСканирования.Количество();
		КонецЕсли;
	КонецЦикла;
	
	КоличествоЯчеек = ЯчейкиДляСканирования.Количество();
	
	Для каждого СтрокаТаблицы Из ЯчейкиДляСканирования Цикл
		СтрокаТаблицы.КоличествоЯчеек = КоличествоЯчеек;
	КонецЦикла;
	
КонецПроцедуры

Функция ДеревоТоваров(Форма)
	
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	
	// Заполнить количество ячеек и порядковый номер ячейки в таблице сканирования товаров.
	ДеревоТоваров = Новый ДеревоЗначений;
	
	ДеревоТоваров.Колонки.Добавить("КодСтроки");
	ДеревоТоваров.Колонки.Добавить("Ячейка");
	ДеревоТоваров.Колонки.Добавить("Номенклатура");
	ДеревоТоваров.Колонки.Добавить("Характеристика");
	ДеревоТоваров.Колонки.Добавить("Упаковка");
	
	ДеревоТоваров.Колонки.Добавить("КоличествоЯчеек");
	ДеревоТоваров.Колонки.Добавить("НомерЯчейки");
	ДеревоТоваров.Колонки.Добавить("НомерТовараВЯчейке");
	ДеревоТоваров.Колонки.Добавить("КоличествоТоваровВЯчейке");
	
	ОтборПоЯчейке = Новый Структура("Ячейка");
	ОтборПоТовару = Новый Структура("Номенклатура, Характеристика, Упаковка");
	
	Для каждого СтрокаТЗ Из ТоварыДляСканирования Цикл
		ЗаполнитьЗначенияСвойств(ОтборПоЯчейке, СтрокаТЗ);
		
		НайденныеСтроки = ДеревоТоваров.Строки.НайтиСтроки(ОтборПоЯчейке);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаЯчейки = ДеревоТоваров.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЯчейки, СтрокаТЗ, "Ячейка");
			
			СтрокаЯчейки.НомерЯчейки = ДеревоТоваров.Строки.Количество();
		Иначе
			СтрокаЯчейки = НайденныеСтроки[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОтборПоТовару, СтрокаТЗ);
		НайденныеСтроки = СтрокаЯчейки.Строки.НайтиСтроки(ОтборПоТовару);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовара = СтрокаЯчейки.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовара, СтрокаТЗ, "Ячейка, Номенклатура, Характеристика, Упаковка");
			
			СтрокаТовара.НомерТовараВЯчейке = СтрокаЯчейки.Строки.Количество();
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаЯчейки Из ДеревоТоваров.Строки Цикл
		СтрокаЯчейки.КоличествоЯчеек = ДеревоТоваров.Строки.Количество();
		
		Для каждого СтрокаТовара Из СтрокаЯчейки.Строки Цикл
			СтрокаТовара.КоличествоЯчеек = СтрокаЯчейки.КоличествоЯчеек;
			СтрокаТовара.НомерЯчейки = СтрокаЯчейки.НомерЯчейки;
			СтрокаТовара.КоличествоТоваровВЯчейке = СтрокаЯчейки.Строки.Количество();
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоТоваров;
	
КонецФункции

Процедура ЗаполнитьСлужебнуюИнформациюТоваровДляСканирования(Форма)
	
	ДеревоТоваров = ДеревоТоваров(Форма);
	
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	
	Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Упаковка");
	
	Для каждого СтрокаТЗ Из ТоварыДляСканирования Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТЗ);
		
		НайденныеСтроки = ДеревоТоваров.Строки.НайтиСтроки(Отбор, Истина);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, НайденныеСтроки[0], "КоличествоЯчеек, НомерЯчейки, КоличествоТоваровВЯчейке, НомерТовараВЯчейке");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляСканированияЗадания(Форма)
	
	ЗаполнитьТоварыДляСканирования(Форма);
	ЗаполнитьЯчейкиДляСканирования(Форма);
	ЗаполнитьСлужебнуюИнформациюТоваровДляСканирования(Форма);
	
	Форма.ОтсканированныеТовары.Очистить();
	
КонецПроцедуры

// Процедура устанавливает начельные значения границ и счетчикв необходимых для
// отображения прогресса выполнения задания.
//
Процедура УстановитьНачальноеСостояниеВыполненияЗадания(Форма)
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	Элементы = Форма.Элементы;
	
	Форма.СостояниеВыполненияЗадания = 0;
	
	Элементы.СостояниеВыполненияЗадания.МинимальноеЗначение  = 0;
	Элементы.СостояниеВыполненияЗадания.МаксимальноеЗначение = 0;
	
	Если ТипЗадания = "Пересчет" Тогда
		МаксЗначение = Форма.ЯчейкиДляСканирования.Количество();
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		МаксЗначение = Форма.ТоварыДляСканирования.Итог("КоличествоУпаковокВДокументе");
	Иначе
		МаксЗначение = Форма.ТоварыДляСканирования.Итог("КоличествоУпаковок");
	КонецЕсли;
	
	Элементы.СостояниеВыполненияЗадания.МаксимальноеЗначение = МаксЗначение;
	
КонецПроцедуры

// Функция возвращает признак необходимости отображения элемента сканирования
// в зависимости от типа задания.
// 
// Параметры:
//	ИмяЭлемента - Строка - имя элемента на форме,
//	ТипЗадания - Строка - тип задания.
//
// Возвращаемое значение:
//	Булево. Истина - тображать элемент сканирования, Ложь - нет.
//
Функция ОтображатьЭлементСканирования(ИмяЭлемента, ТипЗадания)
	
	Если ИмяЭлемента = "Ячейка" Тогда
		ОтображатьЭлемент = Истина;
		
		Если ТипЗадания = "Приемка" Тогда
			ОтображатьЭлемент = Ложь;
		ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
			ОтображатьЭлемент = Ложь;
		КонецЕсли;
	ИначеЕсли ИмяЭлемента = "КоличествоВДокументе" Тогда
		ОтображатьЭлемент = Ложь;
		
		Если ТипЗадания = "ПроверкаОтбора" Тогда
			ОтображатьЭлемент = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтображатьЭлемент;
	
КонецФункции

// Процедура устанавливает видимость элементов сканирования на форме.
//
Процедура УстановитьВидимостьЭлементовСканирования(Форма)
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	Элементы = Форма.Элементы;
	
	// Установить видимость элементов "Взять".
	ВидимостьВзять = Не (ТипЗадания = "Пересчет" Или ТипЗадания = "Приемка" Или ЭтоНаборТоваров);
	
	Элементы.СтраницаВзять.Видимость = ВидимостьВзять;
	Элементы.НадписьВзять.Видимость = ВидимостьВзять;
	Элементы.НадписьКоличествоУпаковок.Видимость = ВидимостьВзять;
	
	// Установить текущую стрницу группы "Взять/отложено".
	Если ТипЗадания = "Отбор" Или ТипЗадания = "Размещение" Или ТипЗадания = "Перемещение" Тогда
		Элементы.СтраницыВзятьОтложено.ТекущаяСтраница = Элементы.СтраницаВзять;
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		Элементы.СтраницыВзятьОтложено.ТекущаяСтраница = Элементы.СтраницаОтложено;
	Иначе
		Элементы.СтраницыВзятьОтложено.ТекущаяСтраница = Элементы.СтраницаДекорация;
	КонецЕсли;
	
	// Установить видимость ячейки.
	Элементы.СканированиеЯчейка.Видимость = ОтображатьЭлементСканирования("Ячейка", ТипЗадания);
	
	// Установить видимость количества в документе.
	ВидимостьКолДок = ОтображатьЭлементСканирования("КоличествоВДокументе", ТипЗадания);
	
	Элементы.НадписьВДокументе.Видимость = ВидимостьКолДок;
	Элементы.НадписьКоличествоВДокументе.Видимость = ВидимостьКолДок;
	Элементы.ГруппаКоличествоВДокументе.Видимость = ВидимостьКолДок;
	
КонецПроцедуры

// Создает новый документ "Распоряжение на инвентаризацию товаров" на указанном складе.
//
// Параметры:
//	Склад - СправочникСсылка.Склады - склад,
//	Ответственный - СправочникСсылка.Пользователи - ответсвенный сотрудник,
//	Распоряжение - Неопределено - переменная в которую записывается ссылка на созданный документ.
//
// Возвращаемое значение:
//	Истина - расопряжение создано, Ложь - нет.
//
Функция СоздатьРаспоряжениеНаИнвентаризацию(Склад, Ответственный, Распоряжение = Неопределено)
	
	ТекущаяДата = ТекущаяДата();
	
	Ссылка = Документы.РаспоряжениеНаИнвентаризациюТоваров.ПустаяСсылка();
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	ДокументОбъект = Документы.РаспоряжениеНаИнвентаризациюТоваров.СоздатьДокумент();
	
	ДокументОбъект.Дата          = ТекущаяДата;
	ДокументОбъект.ДатаНачала    = ТекущаяДата;
	ДокументОбъект.ДатаОкончания = ТекущаяДата;
	ДокументОбъект.Склад         = Склад;
	ДокументОбъект.Статус        = Перечисления.СтатусыРаспоряженийНаПроведениеИнвентаризацийТоваров.ВРаботе;
	ДокументОбъект.Ответственный = Ответственный;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Распоряжение = ДокументОбъект.Ссылка;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, существует ли хотя бы одно действующее распоряжение на инвентаризацию на данном складе.
//
// Параметры:
//	Склад - СправочникСсылка.Склады - склад, для которого выполняется проверка.
//
Функция СуществуютДействующиеРаспоряженияНаИнвентаризацию(Склад)
	
	ТекущаяДата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РаспоряжениеНаИнвентаризациюТоваров.Ссылка КАК Распоряжение
	|ИЗ
	|	Документ.РаспоряжениеНаИнвентаризациюТоваров КАК РаспоряжениеНаИнвентаризациюТоваров
	|ГДЕ
	|	РаспоряжениеНаИнвентаризациюТоваров.Проведен
	|	И РаспоряжениеНаИнвентаризациюТоваров.ДатаНачала <= &ТекущаяДата
	|	И КОНЕЦПЕРИОДА(РаспоряжениеНаИнвентаризациюТоваров.ДатаОкончания, ДЕНЬ) >= &ТекущаяДата
	|	И РаспоряжениеНаИнвентаризациюТоваров.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРаспоряженийНаПроведениеИнвентаризацийТоваров.Закрыт)
	|	И РаспоряжениеНаИнвентаризациюТоваров.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат (Выборка.Количество() <> 0);
	
КонецФункции

Функция РаспоряжениеНаИнвентаризациюПоУмолчанию(Склад)
	
	ТекущаяДата = ТекущаяДата();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РаспоряжениеНаИнвентаризациюТоваров.Ссылка КАК Распоряжение
	|ИЗ
	|	Документ.РаспоряжениеНаИнвентаризациюТоваров КАК РаспоряжениеНаИнвентаризациюТоваров
	|ГДЕ
	|	РаспоряжениеНаИнвентаризациюТоваров.Проведен
	|	И РаспоряжениеНаИнвентаризациюТоваров.ДатаНачала <= &ТекущаяДата
	|	И КОНЕЦПЕРИОДА(РаспоряжениеНаИнвентаризациюТоваров.ДатаОкончания, ДЕНЬ) >= &ТекущаяДата
	|	И РаспоряжениеНаИнвентаризациюТоваров.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРаспоряженийНаПроведениеИнвентаризацийТоваров.Закрыт)
	|	И РаспоряжениеНаИнвентаризациюТоваров.Склад = &Склад";
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Распоряжение;
		
	Иначе
		
		Возврат Документы.РаспоряжениеНаИнвентаризациюТоваров.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

// Вызывается перед постановкой задания в работу. Выполняется, допустимо ли барть в работу
// задание данного типа.
//
// Параметры:
//	Форма - УправляемаяФорма - форма рабочего места,
//	Отказ - Булево - флаг отказа.
//
Процедура ПередПринятиемЗаданияВРаботу(Форма, Отказ)
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания      = Форма.ПараметрыРежима.ТипЗадания;
	Склад           = Форма.Склад;
	Пользователь    = Форма.Пользователь;
	
	Если ТипЗадания = "ПроверкаОтбора" Тогда
		
		// Если не существует ни одного документа - распоряжения об инвентаризации
		// то необходимо создать его..
		
		Если Не СуществуютДействующиеРаспоряженияНаИнвентаризацию(Склад) Тогда
			
			Если Не СоздатьРаспоряжениеНаИнвентаризацию(Склад, Пользователь, ПараметрыРежима.РаспоряжениеНаИнвентаризацию) Тогда
				
				Отказ = Истина;
				
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось создать распоряжение на инвентаризацию по складу ""%1"".
				|Для выполнения проверки отбора необходимо наличие хотя бы одного действующего распоряжения.'"), 
					Склад);
				
				КнопкаОК = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
					"ПерейтиКВыборуСкладскойОперации", 
					НСтр("ru = 'Перейти к выбору операции'"));
				
				ПоказатьДиалогСообщение(Форма, ТекстСообщения, КнопкаОК);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		РаспоряжениеПоУмолчанию = Документы.РаспоряжениеНаИнвентаризациюТоваров.РаспоряжениеПоУмолчанию(Форма.Склад);
		
		Если Не ЗначениеЗаполнено(РаспоряжениеПоУмолчанию) Тогда
			
			ПараметрыРежима.РаспоряжениеНаИнвентаризацию = РаспоряжениеНаИнвентаризациюПоУмолчанию(Склад);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет действия, необходимые для постановки задания в работу.
//
// Параметры:
//	Форма - УправляемаяФорма - форма обработки,
//	Задание - ДокументСсылка.ПриходныйОрдер, ДокументСсылка.РасходныйОрдер,
//	ДокументСсылка.ОтборРазмещениеТоваров, ДокументСсылка.ПересчетТоваров - складское задание, которое приинимается в работу.
//
Процедура ВзятьЗаданиеВРаботу(Форма, Задание) Экспорт
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	Элементы = Форма.Элементы;
	
	ПараметрыРежима.Задание = Задание;
	ПараметрыРежима.ТипЗадания = ТипЗадания(Задание);
	
	Отказ = Ложь;
	ОписаниеОшибки = "";
	
	ПередПринятиемЗаданияВРаботу(Форма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Заблокировать задание.
	Попытка
		ЗаблокироватьДанныеДляРедактирования(Задание, , Форма.УникальныйИдентификатор);
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось взять складское задание в работу. 
		|Произошла ошибка при попытке блокировки задания.'");
		
		Кнопки = Новый СписокЗначений;
		ДобавитьКнопкуПереходаКВыборуЗадания(Кнопки, ТипЗадания(Задание));
		
		ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
		Возврат;
		
	КонецПопытки;
	
	// Получить товары задания.
	ПолучитьТоварыЗадания(Форма, Задание, Отказ, ОписаниеОшибки);
	ПолучитьСерииЗадания(Форма, Задание, Отказ, ОписаниеОшибки);
	
	Если Отказ Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось взять складское задание в работу.
			|Произошла ошибка при получении товаров задания."),
			ОписаниеОшибки);
		
		Кнопки = Новый СписокЗначений;
		ДобавитьКнопкуПереходаКВыборуЗадания(Кнопки, ТипЗадания(Задание));
		
		ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
		РазблокироватьДанныеДляРедактирования(Задание, Форма.УникальныйИдентификатор);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьСтатусЗаданияВРаботе(Форма, Задание, Отказ, ОписаниеОшибки);
	
	Если Отказ Тогда
		
		РазблокироватьДанныеДляРедактирования(Задание, Форма.УникальныйИдентификатор);
		
		// Добавить запись об ошибке в журнал регистрации.
		ИмяСобытия = НСтр("ru = 'Ошибка при постановке складского задания в работу.'");
		
		КомментарийЖурнала = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось взять складское задание в работу. Произошла ошибка при установке статуса задания. Описание ошибки: ""%1"".'"), 
			ОписаниеОшибки);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, 
			ПараметрыРежима.Задание.Метаданные(), 
			ПараметрыРежима.Задание, 
			КомментарийЖурнала, 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
		// Вывести сообщение пользователю.
		ТекстСообщения = НСтр("ru = 'При попытке постановки складского задания в работу произошла ошибка (см. журнал регистрации).'");
		
		Кнопки = Новый СписокЗначений;
		ДобавитьКнопкуПереходаКВыборуЗадания(Кнопки, ТипЗадания(Задание));
		
		ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
		
		Возврат;
		
	КонецЕсли;
	
	// Установить параметры режима.
	ПараметрыРежима.ПараметрСканирования    = "";
	ПараметрыРежима.НаборТоваров            = Ложь;
	ПараметрыРежима.ОтборОтсканирован       = Ложь;
	ПараметрыРежима.РазмещениеОтсканировано = Ложь;
	
	Если ПараметрыРежима.ТипЗадания = "Размещение" 
		Или ПараметрыРежима.ТипЗадания = "Отбор" 
		Или ПараметрыРежима.ТипЗадания = "Перемещение" Тогда
		
		РеквизитыЗадания = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Задание, "ЗонаПриемки, ЗонаОтгрузки");
		
		ПараметрыРежима.ЗонаПриемки = РеквизитыЗадания.ЗонаПриемки;
		ПараметрыРежима.ЗонаОтгрузки = РеквизитыЗадания.ЗонаОтгрузки;
		
	КонецЕсли;
	
	ЗаполнитьСтатусыУказанияСерий(Форма);
	
	// Получить параметры товаров задания.
	ПараметрыТоваров = ПараметрыТоваровЗадания(Форма);
	ЗаполнитьЗначенияСвойств(ПараметрыРежима, ПараметрыТоваров);
	
	// Установить значения реквизитов, нужных для выполнения сканирования.
	Форма.ТекущаяСтрокаСканирования = Неопределено;
	Форма.СообщениеОбОшибке = "";
	
	ЗаполнитьДанныеДляСканированияЗадания(Форма);
	УстановитьНачальноеСостояниеВыполненияЗадания(Форма);
	УстановитьВидимостьЭлементовСканирования(Форма);
	
	// Установить схему сканирования.
	УстановитьСхемуСканированияПоУмолчанию(Форма);
	
	Если ПараметрыРежима.ТипЗадания = "Пересчет" Тогда
		
		ТекстСообщения = НСтр("ru = 'Отсканируйте все товары в указанной ячейке. 
		|Затем нажмите кнопку ""Далее"" для перехода к сканированию товаров в следующей ячейке.'");
		
		Кнопки = Новый СписокЗначений;
		
		КнопкаПерейтиКСканированию = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКСканированию", 
			НСтр("ru = 'Перейти 
			|к сканированию'"));
		
		Кнопки.Добавить(КнопкаПерейтиКСканированию);
		
		ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
		
	ИначеЕсли ПараметрыРежима.ТипЗадания = "Приемка" Тогда
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Задание.Номер, Истина);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсканируйте все товары по приходному ордеру ""%1"".
			|Затем нажмите кнопку ""Далее"" для завершения выполнения приемки.'"), 
			НомерДокумента);
		
		Кнопки = Новый СписокЗначений;
		
		КнопкаПерейтиКПриемке = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКПриемкеТоваров", 
			НСтр("ru = 'Перейти 
			|к сканированию'"));
		
		Кнопки.Добавить(КнопкаПерейтиКПриемке);
		
		ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
		
	ИначеЕсли ПараметрыРежима.ТипЗадания = "ПроверкаОтбора" Тогда
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Задание.Номер, Истина);
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсканируйте все товары по расходному ордеру ""%1"". 
			|Затем нажмите кнопку ""Далее"" для завершения выполнения проверки отбора.'"), 
			НомерДокумента);
		
		Кнопки = Новый СписокЗначений;
		
		КнопкаПерейтиКПриемке = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКСканированию", 
			НСтр("ru = 'Перейти 
			|к сканированию'"));
		
		Кнопки.Добавить(КнопкаПерейтиКПриемке);
		
		ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
		
	Иначе
		ПерейтиКСканированию(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает схему сканирования по умолчанию.
//
Процедура УстановитьСхемуСканированияПоУмолчанию(Форма)
	
	Если ИзменениеСхемыСканированияДоступно(Форма) Тогда
		Форма.СхемаСканирования = "ТоварВсеСерии";
	Иначе
		Форма.СхемаСканирования = "ТоварСерияТовар";
	КонецЕсли;
	
	УстановитьЗаголовокСхемыСканирования(Форма);
	
КонецПроцедуры

// Функция вызывается при переходе к сканированию товаров. Переключается на 
// страницу сканирования, вызывает процедуры установки заголовокв элементов
// сканирования.
//
Процедура ПерейтиКСканированию(Форма) Экспорт
	
	ПараметрыРежима           = Форма.ПараметрыРежима;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ТипЗадания                = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров           = Форма.ПараметрыРежима.НаборТоваров;
	
	УстановитьПараметрыСканирования(Форма);
	
	Если Не ЭтоНаборТоваров Тогда
		
		Если ТипЗадания = "Пересчет" Тогда
			
			Если ТекущаяСтрокаСканирования = Неопределено Тогда
				ПерейтиКСледующейЯчейке(Форма);
			КонецЕсли;
			
		Иначе
			
			Если ТекущаяСтрокаСканирования = Неопределено Тогда
				
				ПерейтиКСледующейСтрокеСканирования(Форма);
				УстановитьПараметрыЭлементовСканирования(Форма);
				ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
				ВывестиСостояниеВыполненияЗадания(Форма);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПараметрыЭлементовСканирования(Форма);
	ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
	ВывестиСостояниеВыполненияЗадания(Форма);
	
КонецПроцедуры

Процедура ПерейтиКСледующейЯчейкеСканирования(Форма) Экспорт
	
	ПараметрыРежима           = Форма.ПараметрыРежима;
	ТипЗадания                = Форма.ПараметрыРежима.ТипЗадания;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Если ЭтоПоследняяЯчейка(Форма) Тогда
		
		ТипЗадания = НРег(ПараметрыРежима.ТипЗадания);
		ТипВыполнения = "";
		ТипДействия = "";
		
		Если ПараметрыРежима.ТипЗадания = "Отбор" Тогда
			
			ТипВыполнения = НСтр("ru = 'отбора'");
			ТипДействия = НСтр("ru = 'отбор'");
			
		ИначеЕсли ПараметрыРежима.ТипЗадания = "Размещение" Тогда
			
			ТипВыполнения = НСтр("ru = 'размещения'");
			ТипДействия = НСтр("ru = 'размещение'");
			
		ИначеЕсли ПараметрыРежима.ТипЗадания = "Перемещение" Тогда
			
			ТипВыполнения = НСтр("ru = 'перемещения'");
			ТипДействия   = НСтр("ru = 'перемещение'");
			
		ИначеЕсли ПараметрыРежима.ТипЗадания = "Пересчет" Тогда
			
			ТипВыполнения = НСтр("ru = 'пересчета'");
			ТипДействия = НСтр("ru = 'пересчет'");
			
		КонецЕсли;
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ячейка ""%1"" 
			|последняя в задании на %2.
			|Завершить выполнение %3 товаров?'"),
			ТекущаяСтрокаСканирования.Ячейка, 
			ТипЗадания, 
			ТипВыполнения);
		
		ПредставлениеКнопки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Продолжить %1 товаров'"), 
			ТипДействия);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога("ЗавершитьВыполнениеЗадания", НСтр("ru = 'Завершить выполнение задания'")));
		Кнопки.Добавить(РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога("ПерейтиКСканированию", ПредставлениеКнопки));
		
		Если ПараметрыРежима.ТипЗадания = "Перемещение" Тогда
			
			Если ПараметрыРежима.ОтборОтсканирован Тогда
				ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
			Иначе
				ПриЗавершенииСканированияТоваровТекущегоЗадания(Форма);
			КонецЕсли;
			
		Иначе
			
			ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
			
		КонецЕсли;
		
	Иначе
		
		ПерейтиКСледующейЯчейке(Форма);
		
		Если ПараметрыРежима.ТипЗадания = "Пересчет" Тогда
			ВывестиСостояниеВыполненияЗадания(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьОтсканированныеТоварыОтбораПеремещения(Форма)
	
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	Объект                = Форма.Объект;
	ПараметрыРежима       = Форма.ПараметрыРежима;
	
	ТЗОтсканированныеТовары = Форма.РеквизитФормыВЗначение("ОтсканированныеТовары");
	ТЗОтсканированныеТовары.Свернуть("Ячейка,Номенклатура,Характеристика,Упаковка,Коэффициент,Серия", "КоличествоУпаковокОтсканировано");
	
	Отбор = Новый Структура("Ячейка,Номенклатура,Характеристика,Серия,Упаковка");
	
	Для каждого СтрокаТоварыДляСканирования Из ТоварыДляСканирования Цикл
		
		КоличествоУпаковокОтсканировано = СтрокаТоварыДляСканирования.КоличествоУпаковокОтсканировано;
		КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаТоварыДляСканирования.Коэффициент;
		
		Если КоличествоУпаковокОтсканировано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТоварыДляСканирования);
		
		НайденныеСтроки = Объект.ТоварыОтбор.НайтиСтроки(Отбор);
		СтрокаТоварыОтбор = НайденныеСтроки[0];
		
		Если СтрокаТоварыДляСканирования.СтатусУказанияСерий = 4 Тогда
			
			НайденныеСтрокиПоСериям = ТЗОтсканированныеТовары.НайтиСтроки(Отбор);
			
			ВсегоУпаковокОтсканировано = 0;
			
			Для каждого СтрокаСканированияПоСериям Из НайденныеСтрокиПоСериям Цикл
				
				КоличествоУпаковокОтсканировано = СтрокаСканированияПоСериям.КоличествоУпаковокОтсканировано;
				КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаСканированияПоСериям.Коэффициент;
				
				НоваяСтрокаТоварыОтбор = Объект.ТоварыОтбор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыОтбор, СтрокаТоварыОтбор);
				
				НоваяСтрокаТоварыОтбор.Серия = СтрокаСканированияПоСериям.Серия;
				
				НоваяСтрокаТоварыОтбор.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
				НоваяСтрокаТоварыОтбор.КоличествоУпаковокОтобрано = КоличествоУпаковокОтсканировано;
				
				НоваяСтрокаТоварыОтбор.Количество = КоличествоОтсканировано;
				НоваяСтрокаТоварыОтбор.КоличествоОтобрано = КоличествоОтсканировано;
				
				ВсегоУпаковокОтсканировано = ВсегоУпаковокОтсканировано + КоличествоУпаковокОтсканировано;
				
			КонецЦикла;
			
			ОсталосьУпаковокОтсканировать = СтрокаТоварыДляСканирования.КоличествоУпаковок - ВсегоУпаковокОтсканировано;
			ОсталосьОтсканировать = ОсталосьУпаковокОтсканировать * СтрокаТоварыДляСканирования.Коэффициент;
			
			Если ОсталосьУпаковокОтсканировать = 0 Тогда
				Объект.ТоварыОтбор.Удалить(СтрокаТоварыОтбор);
			Иначе
				СтрокаТоварыОтбор.КоличествоУпаковок = ОсталосьУпаковокОтсканировать;
				СтрокаТоварыОтбор.Количество = ОсталосьОтсканировать;
			КонецЕсли;
			
		Иначе
			СтрокаТоварыОтбор.КоличествоУпаковокОтобрано = КоличествоУпаковокОтсканировано;
			СтрокаТоварыОтбор.КоличествоОтобрано = КоличествоОтсканировано;
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыРежима.ОтборОтсканирован = Истина;
	
КонецПроцедуры

Процедура ВывестиИнформациюПоТекущемуТовару(Форма) Экспорт
	
	Если Не Форма.ПараметрыРежима.Режим = "Сканирование" Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.ТекущаяСтрокаСканирования.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТовара = Новый Структура("Номенклатура,Характеристика,Упаковка");
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, Форма.ТекущаяСтрокаСканирования);
	
	ПараметрыНоменклатуры = НайтиТоварПоПараметрам(ПараметрыТовара);
	ВывестиИнформациюОТоваре(Форма, ПараметрыНоменклатуры);
	
	РабочееМестоРаботникаСкладаКлиентСервер.УстановитьЗаголовокФормы(Форма, НСтр("ru = 'Товар'"));
	ПерейтиНаСтраницу(Форма,"СтраницаЗапросИнформации");
	
КонецПроцедуры

Процедура ВывестиИнформациюПоШтрихкодуТовара(Форма, Товар)
	
	ВывестиИнформациюОТоваре(Форма, Товар);
	
	РабочееМестоРаботникаСкладаКлиентСервер.УстановитьЗаголовокФормы(Форма, НСтр("ru = 'Товар'"));
	ПерейтиНаСтраницу(Форма,"СтраницаЗапросИнформации");
	
КонецПроцедуры

Процедура ВывестиИнформациюПоШтрихкодуЯчейки(Форма, Ячейка)
	
	ВывестиИнформациюОЯчейке(Форма, Ячейка);
	
	РабочееМестоРаботникаСкладаКлиентСервер.УстановитьЗаголовокФормы(
		Форма, 
		НСтр("ru = 'Ячейка'"));
	
	ПерейтиНаСтраницу(Форма,"СтраницаЗапросИнформации");
	
КонецПроцедуры

Процедура ВывестиИнформациюПоШтрихкоду(Форма, Штрихкод) Экспорт
	
	Форма.ТаблицаИнформации.Очистить();
	НайденныйТовар = НайтиТовар(Штрихкод);
	
	Если ЗначениеЗаполнено(НайденныйТовар.Номенклатура) Тогда
		ВывестиИнформациюПоШтрихкодуТовара(Форма, НайденныйТовар);
		Возврат;
	КонецЕсли;
	
	НайденнаяЯчейка = НайтиЯчейкуПоШтрихкоду(Штрихкод);
	
	Если ЗначениеЗаполнено(НайденнаяЯчейка) Тогда
		ВывестиИнформациюПоШтрихкодуЯчейки(Форма, НайденнаяЯчейка);
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не удалось получить информацию по штрихкоду: 
		|""%1""'"), 
		Штрихкод);
	
	КнопкаПерейтиНаПредыдущуюСтраницу = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
		"ПерейтиНаПредыдущуюСтраницу", 
		НСтр("ru = 'ОК'"));
	
	ПоказатьДиалогСообщение(Форма, ТекстСообщения, КнопкаПерейтиНаПредыдущуюСтраницу);
	
КонецПроцедуры

Функция ИмяМакетаИнформацииОТоваре(Форма)
	
	Если Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана._240х320 Тогда
		Возврат "ИнформацияОТоваре_240х320";
	ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана._320х320 Тогда
		Возврат "ИнформацияОТоваре_320х320";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Выводит информацию о товаре в поле табличного документа.
//
// Параметры:
//	Форма - УправляемаяФорма - форма рабочего места,
//	ПараметрыТовара - Структура - сведения о товаре.
//
Процедура ВывестиИнформациюОТоваре(Форма, ПараметрыТовара)
	
	Объект = Форма.Объект;
	ТабДок = Форма.ТаблицаИнформации;
	
	ТабДок.Очистить();
	
	ИмяМакета = ИмяМакетаИнформацииОТоваре(Форма);
	Макет = Обработки.РабочееМестоРаботникаСклада.ПолучитьМакет(ИмяМакета);
	
	// Если есть картинка товара, то вывести ее.
	ФайлКартинки = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПараметрыТовара.Номенклатура, "ФайлКартинки");
	
	Если ЗначениеЗаполнено(ФайлКартинки) Тогда
		ПараметрыКартинки = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки);
		Картинка = ПолучитьИзВременногоХранилища(ПараметрыКартинки.СсылкаНаДвоичныеДанныеФайла);
		
		ОбластьКартинкаТовара = Макет.ПолучитьОбласть("КартинкаТовара");
		РисунокТовара = ОбластьКартинкаТовара.Рисунки.Получить(0);
		РисунокТовара.Картинка = Новый Картинка(Картинка);
		
		ТабДок.Вывести(ОбластьКартинкаТовара);
	КонецЕсли;
	
	// Вывести описание товара.
	ОбластьОписание = Макет.ПолучитьОбласть("Описание");
	ОбластьЗаголовокОстатки = Макет.ПолучитьОбласть("ЗаголовокОстатки");
	ОбластьЗаголовокТаблицыОстатков = Макет.ПолучитьОбласть("ЗаголовокТаблицыОстатков");
	ОбластьСтрокаОстаток = Макет.ПолучитьОбласть("СтрокаОстаток");
	
	ОбластьОписание.Параметры.Заполнить(ПараметрыТовара);
	
	Если Не ЗначениеЗаполнено(ПараметрыТовара.Характеристика) Тогда
		ОбластьОписание.Параметры.Характеристика = НСтр("ru = '<не используются>'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыТовара.Описание) Тогда
		ОбластьОписание.Параметры.Описание = НСтр("ru = '<нет>'");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыТовара.Артикул) Тогда
		ОбластьОписание.Параметры.Артикул = НСтр("ru = '<нет>'");
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьОписание);
	
	// Вывести остатки товара.
	ТекстЗаголовкаОстатки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Остатки, на складе: 
		|""%1"", 
		|в помещении: 
		|""%2""'"), 
		Объект.Склад, 
		Объект.Помещение);
	
	ОбластьЗаголовокОстатки.Параметры.ТекстЗаголовкаОстатки = ТекстЗаголовкаОстатки;
	
	ТабДок.Вывести(ОбластьЗаголовокОстатки);
	ТабДок.Вывести(ОбластьЗаголовокТаблицыОстатков);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
		|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
		|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
		|	ТоварыВЯчейкахОстатки.Серия КАК Серия,
		|	ТоварыВЯчейкахОстатки.ВНаличииОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыВЯчейках.Остатки(
		|			,
		|			Ячейка.Владелец = &Склад
		|				И Ячейка.Помещение = &Помещение
		|				И Номенклатура = &Номенклатура
		|				И Характеристика = &Характеристика
		|				И Упаковка = &Упаковка) КАК ТоварыВЯчейкахОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ячейка,
		|	ТоварыВЯчейкахОстатки.ВНаличииОстаток";
		
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("Помещение", Объект.Помещение);
	Запрос.УстановитьПараметр("Номенклатура", ПараметрыТовара.Номенклатура);
	Запрос.УстановитьПараметр("Упаковка", ПараметрыТовара.Упаковка);
	Запрос.УстановитьПараметр("Характеристика", ПараметрыТовара.Характеристика);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаОстаток.Параметры, Выборка);
		
		ТекстКоличество = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2'"), 
			Выборка.Количество, 
			Выборка.Упаковка);
		
		ОбластьСтрокаОстаток.Параметры.Количество = ТекстКоличество;
		
		ТабДок.Вывести(ОбластьСтрокаОстаток);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяМакетаИнформацииОбИзлишкахТоваров(Форма)
	
	Если Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана._240х320 Тогда
		
		Возврат "Информация_240х320";
		
	ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана._320х320 Тогда
		
		Возврат "Информация_320х320";
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

Функция ИмяМакетаИнформацииОЯчейке(Форма)
	
	Если Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана._240х320 Тогда
		
		Возврат "ИнформацияОЯчейке_240х320";
		
	ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана._320х320 Тогда
		
		Возврат "ИнформацияОЯчейке_320х320";
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Выводит информацию о ячейке в табличный документ на странице "СтраницаИнформация".
//
// Параметры:
//	Форма - УправляемаяФорма - форма рабочего места,
//	Ячейка - СправочникСсылка.Ячейки - ячейка.
//
Процедура ВывестиИнформациюОЯчейке(Форма, Ячейка)
	
	Объект = Форма.Объект;
	ТабДок = Форма.ТаблицаИнформации;
	
	ТабДок.Очистить();
	
	ИмяМакета = ИмяМакетаИнформацииОЯчейке(Форма);
	Макет = Обработки.РабочееМестоРаботникаСклада.ПолучитьМакет(ИмяМакета);
	
	ОбластьОписание = Макет.ПолучитьОбласть("Описание");
	ОбластьЗаголовокОстатки = Макет.ПолучитьОбласть("ЗаголовокОстатки");
	ОбластьЗаголовокТаблицыОстатков = Макет.ПолучитьОбласть("ЗаголовокТаблицыОстатков");
	ОбластьСтрокаОстаток = Макет.ПолучитьОбласть("СтрокаОстаток");
	
	ПараметрыЯчейки = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Ячейка, "Наименование");
	
	ОбластьОписание.Параметры.Заполнить(ПараметрыЯчейки);
	ТабДок.Вывести(ОбластьОписание);
	
	// Вывести остатки товара.
	ТекстЗаголовкаОстатки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Остатки, на складе: 
		|""%1"", 
		|в помещении: 
		|""%2""'"), 
		Объект.Склад, 
		Объект.Помещение);
	
	ОбластьЗаголовокОстатки.Параметры.ТекстЗаголовкаОстатки = ТекстЗаголовкаОстатки;
	
	ТабДок.Вывести(ОбластьЗаголовокОстатки);
	ТабДок.Вывести(ОбластьЗаголовокТаблицыОстатков);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
	|	ТоварыВЯчейкахОстатки.Серия КАК Серия,
	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			Ячейка.Владелец = &Склад
	|				И Ячейка.Помещение = &Помещение
	|				И Ячейка = &Ячейка) КАК ТоварыВЯчейкахОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка";
	
	Запрос.УстановитьПараметр("Склад",     Объект.Склад);
	Запрос.УстановитьПараметр("Помещение", Объект.Помещение);
	Запрос.УстановитьПараметр("Ячейка",    Ячейка);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстТовар = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1%2%3'"),
			Выборка.Номенклатура,
			?(ЗначениеЗаполнено(Выборка.Характеристика), ", " + Выборка.Характеристика, ""),
			?(ЗначениеЗаполнено(Выборка.Серия), " , (серия: " + Выборка.Серия + ")", ""));
		
		ТекстКоличество = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 %2'"), 
			Выборка.Количество, 
			Выборка.Упаковка);
		
		ОбластьСтрокаОстаток.Параметры.Товар      = ТекстТовар;
		ОбластьСтрокаОстаток.Параметры.Количество = ТекстКоличество;
		
		ТабДок.Вывести(ОбластьСтрокаОстаток);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в список кнопок кнопку перехода к списку заданий.
//
// Параметры:
//	Кнопки - СписокЗначений - список кнопок,
//	ТипЗадания - Строка - тип задания.
//
Процедура ДобавитьКнопкуПереходаКВыборуЗадания(Кнопки, ТипЗадания)
	
	Если ТипЗадания = "Отбор" Тогда
		
		КнопкаПерехода = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКВыборуЗаданияНаОтбор", 
			НСтр("ru = 'Перейти 
			|к выбору задания на отбор'"));
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		КнопкаПерехода = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКВыборуЗаданияНаРазмещение", 
			НСтр("ru = 'Перейти 
			|к выбору задания на размещение'"));
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		КнопкаПерехода = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКВыборуЗаданияНаПеремещение", 
			НСтр("ru = 'Перейти 
			|к выбору задания на перемещение'"));
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		КнопкаПерехода = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКВыборуЗаданияНаПересчет", 
			НСтр("ru = 'Перейти 
			|к выбору задания на пересчет'"));
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		КнопкаПерехода = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ОсновноеМенюПриемка", 
			НСтр("ru = 'Перейти 
			|к выбору задания на приемку'"));
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		КнопкаПерехода = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ОсновноеМенюПроверкаОтбора", 
			НСтр("ru = 'Перейти 
			|к выбору задания на проверку отбора'"));
		
	Иначе
		
		КнопкаПерехода = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКВыборуСкладскойОперации", 
			НСтр("ru = 'Перейти 
			|к выбору операции'"));
		
	КонецЕсли;
	
	Кнопки.Добавить(КнопкаПерехода);
	
КонецПроцедуры

Процедура ПриОшибкеПодключенияОборудования(ИмяСобытия, КомментарийЖурнала) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия, 
		УровеньЖурналаРегистрации.Ошибка, 
		, 
		, 
		КомментарийЖурнала, 
		РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
	
КонецПроцедуры

// Вызывается при переходе к ручному вводу значения сканирования - штрихкоду или
// номеру и сроку годности серии.
//
Процедура СканированиеВвестиЗначение(Форма) Экспорт
	
	Элементы                   = Форма.Элементы;
	ПараметрыРежима            = Форма.ПараметрыРежима;
	ТекущаяСтрокаСканирования  = Форма.ТекущаяСтрокаСканирования;
	ЭтоНаборТоваров            = Форма.ПараметрыРежима.НаборТоваров;
	ПараметрСканирования       = Форма.ПараметрыРежима.ПараметрСканирования;
	ТипЗадания                 = Форма.ПараметрыРежима.ТипЗадания;
	
	ЭтоЗаданиеНаПересчет       = (ТипЗадания = "Пересчет");
	ЭтоЗаданиеНаПриемку        = (ТипЗадания = "Приемка");
	ЭтоЗаданиеНаПроверкуОтбора = (ТипЗадания = "ПроверкаОтбора");
	
	// Установить начальное значение видимости элементов.
	Элементы.НадписьПодсказкаПоШтрихкоду.Видимость = Истина;
	Элементы.ШтрихкодПараметраСканирования.Видимость = Истина;
	
	Элементы.НадписьПодсказкаПоСрокуГодности.Видимость = Ложь;
	Элементы.СрокГодностиСерии.Видимость = Ложь;
	
	// Установить текст подсказки.
	Если ЭтоНаборТоваров Тогда
		
		Если ПараметрСканирования = "Ячейка" Тогда
			
			ПодсказкаПоШтрихкоду = НСтр("ru = 'Введите наименование зоны приемки.'");
			
		ИначеЕсли ПараметрСканирования = "Номенклатура" Тогда
			
			ПодсказкаПоШтрихкоду = НСтр("ru = 'Введите штрихкод товара.'");
			
		ИначеЕсли ПараметрСканирования = "Серия" Тогда
			
			ПодсказкаПоШтрихкоду = НСтр("ru = 'Введите номер серии.'");
			
		КонецЕсли;
		
	Иначе
		
		Если ПараметрСканирования = "Ячейка" Тогда
			
			ПодсказкаПоШтрихкоду = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Введите наименование ячейки 
				|""%1""'"), 
				ТекущаяСтрокаСканирования.Ячейка);
			
		ИначеЕсли ПараметрСканирования = "Номенклатура" Тогда
			
			Если ТипЗадания = "Пересчет" Тогда
				ПодсказкаПоШтрихкоду = НСтр("ru = 'Введите штрихкод товара'");
			Иначе
				ПредставлениеТовара = "" + ТекущаяСтрокаСканирования.Номенклатура + ", " + 
				ТекущаяСтрокаСканирования.Характеристика + ", " + ТекущаяСтрокаСканирования.Упаковка;
				
				ПодсказкаПоШтрихкоду = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Введите штрихкод товара 
					|""%1""'"), 
					ПредставлениеТовара);
			КонецЕсли;
			
		ИначеЕсли ПараметрСканирования = "Серия" Тогда
			
			Если ЭтоНаборТоваров Или ЭтоЗаданиеНаПересчет Или ЭтоЗаданиеНаПриемку Тогда
				
				ПодсказкаПоШтрихкоду = НСтр("ru = 'Введите номер серии '");
				
			Иначе
				
				Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Серия) Тогда
					
					ПодсказкаПоШтрихкоду = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Введите номер серии 
						|""%1""'"), 
						ТекущаяСтрокаСканирования.Серия);
					
				Иначе
					
					ПодсказкаПоШтрихкоду = НСтр("ru = 'Введите номер серии '");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Установить параметры ввода серии.
	Если ПараметрСканирования = "Серия" Тогда
		
		// Установить видимость элементов для ввода срока годности.
		ВидНоменклатуры = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущаяСтрокаСканирования.Номенклатура, "ВидНоменклатуры");
		ПараметрыУказанияСерий = Справочники.ВидыНоменклатуры.ПараметрыСерийНоменклатуры(ВидНоменклатуры);
		
		// В зависимости от настройки использования серий видимость полей ввода будет различаться.
		Элементы.НадписьПодсказкаПоШтрихкоду.Видимость     = ПараметрыУказанияСерий.ИспользоватьНомерСерии;
		Элементы.ШтрихкодПараметраСканирования.Видимость   = ПараметрыУказанияСерий.ИспользоватьНомерСерии;
		Элементы.НадписьПодсказкаПоСрокуГодности.Видимость = ПараметрыУказанияСерий.ИспользоватьСрокГодностиСерии;
		Элементы.СрокГодностиСерии.Видимость               = ПараметрыУказанияСерий.ИспользоватьСрокГодностиСерии;
		
		Если ПараметрыУказанияСерий.ИспользоватьСрокГодностиСерии Тогда
			
			Если ЭтоНаборТоваров Или ЭтоЗаданиеНаПересчет Или ЭтоЗаданиеНаПриемку Тогда
				
				ПодсказкаПоСрокуГодности = НСтр("ru = 'Введите срок годности серии'");
				
			Иначе
				
				ПодсказкаПоСрокуГодности = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Введите срок годности серии
					|""%1""'"), 
					ТекущаяСтрокаСканирования.Серия);
				
			КонецЕсли;
			
			Элементы.НадписьПодсказкаПоСрокуГодности.Заголовок = ПодсказкаПоСрокуГодности;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.НадписьПодсказкаПоШтрихкоду.Заголовок = ПодсказкаПоШтрихкоду;
	Форма.ТекущийЭлемент = Элементы.ШтрихкодПараметраСканирования;
	
	ПерейтиНаСтраницу(Форма, "СтраницаВыборЗначения");
	
КонецПроцедуры

Процедура ИнициализироватьПараметрыРежима(Форма)
	
	Форма.ПараметрыРежима = ПараметрыРежима();
	Форма.ПараметрыРежима.ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Форма.Объект.Склад, Форма.Объект.Помещение);
	Форма.ПараметрыРежима.ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Форма.Объект.Склад, Форма.Объект.Помещение);
	
КонецПроцедуры

// Функция возвращает тип задания в зависимости от типа документа,
// который взят в работе.
//
// Параметры:
//	Задание - ДокументСсылка - складское задание, которые принято в работу.
//
// Возвращаемое значение:
//	Строка. Тип задания. Если передан неверный тип задания, то возвращается <Неопределено>.
//
Функция ТипЗадания(Задание)
	
	Если Не ЗначениеЗаполнено(Задание) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипЗадания = ТипЗнч(Задание);
	
	Если ТипЗадания = Тип("ДокументСсылка.ОтборРазмещениеТоваров") Тогда
		ВидОперацииЗадания = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Задание, "ВидОперации");
		
		Если Не ЗначениеЗаполнено(ВидОперацииЗадания) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ВидОперацииЗадания = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор Тогда
			Возврат "Отбор";
		КонецЕсли;
		
		Если ВидОперацииЗадания = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение Тогда
			Возврат "Размещение";
		КонецЕсли;
		
		Если ВидОперацииЗадания = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение Тогда
			Возврат "Перемещение";
		КонецЕсли;
	ИначеЕсли ТипЗадания = Тип("ДокументСсылка.ПересчетТоваров") Тогда
		Возврат "Пересчет";
	ИначеЕсли ТипЗадания = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		Возврат "Приемка";
	ИначеЕсли ТипЗадания = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
		Возврат "ПроверкаОтбора";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = Форма.Параметры;
	
	УстановитьНастройкиДляРазрешенияЭкрана(Форма);
	
	// Получить значения переданных параметров.
	Форма.Объект.Склад = Параметры.Склад;
	Форма.Объект.Помещение = Параметры.Помещение;
	Форма.Объект.Пользователь = Пользователи.ТекущийПользователь();
	
	Форма.Склад = Параметры.Склад;
	Форма.Помещение = Параметры.Помещение;
	Форма.Пользователь = Пользователи.ТекущийПользователь();
	
	// Получить значения ФО и констант.
	ПараметрыФО = Новый Структура("Склад", Параметры.Склад);
	
	Форма.ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", ПараметрыФО);
	Форма.ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	Форма.ЕдиницаИзмеренияОбъема = Константы.ЕдиницаИзмеренияОбъема.Получить();
	
	// Загрузить данные надписей и заголовков из макета "ТекстыНадписейЗаголовков".
	ЗагрузитьТекстыНадписейЗаголовковФормы(Форма);
	
	// Установить доступность элементов формы.
	Форма.Элементы.СканированиеСерия.Доступность = Форма.ИспользоватьСерииНоменклатуры;
	
	// Установить настройки схемы сканирования.
	Форма.СхемаСканирования = "ТоварВсеСерии"; // ТоварСерияТовар
	УстановитьЗаголовокСхемыСканирования(Форма);
	
	ИнициализироватьПараметрыРежима(Форма);
	
	// Установить текст заголовка формы.
	ТекстЗаголовкаФормы = ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВыбОперацию", Форма);
	
	РабочееМестоРаботникаСкладаКлиентСервер.УстановитьЗаголовокФормы(Форма, ТекстЗаголовкаФормы);
	ПерейтиКВыборуСкладскойОперации(Форма);
	
	ПриПереходеНаСтраницу(Форма, "СтраницаВыборОперации");
	УстановитьГорячиеКлавишиНаСтранице(Форма);
	
КонецПроцедуры

Процедура ПерейтиКВыборуСкладскойОперации(Форма) Экспорт
	
	ОбновитьОсновноеМеню(Форма);
	ПерейтиНаСтраницу(Форма,"СтраницаВыборОперации");
	
КонецПроцедуры

Процедура ПодсветитьЭлемент(Элемент)
	
	Элемент.ЦветФона   = ЦветаСтиля.ФайлЗанятыйТекущимПользователем;
	Элемент.ЦветТекста = WebЦвета.Белоснежный;
	Элемент.Шрифт      = Новый Шрифт(,,Истина);
	
КонецПроцедуры

Процедура СнятьПодсветкуЭлемента(Элемент)
	
	Элемент.ЦветФона   = ЦветаСтиля.ЦветФонаКнопки;
	Элемент.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	Элемент.Шрифт      = Новый Шрифт();
	
КонецПроцедуры

Процедура УстановитьПодсветкуЭлементовСканирования(Форма)
	
	ПараметрыРежима      = Форма.ПараметрыРежима;
	Элементы             = Форма.Элементы;
	ПараметрСканирования = Форма.ПараметрыРежима.ПараметрСканирования;
	
	СнятьПодсветкуЭлемента(Элементы.СканированиеЯчейка);
	СнятьПодсветкуЭлемента(Элементы.СканированиеТовар);
	СнятьПодсветкуЭлемента(Элементы.СканированиеСерия);
	
	Если ПараметрСканирования = "Ячейка" Тогда
		
		ПодсветитьЭлемент(Элементы.СканированиеЯчейка);
		
	ИначеЕсли ПараметрСканирования = "Номенклатура" Тогда
		
		ПодсветитьЭлемент(Элементы.СканированиеТовар);
		
	ИначеЕсли ПараметрСканирования = "Серия" Тогда
		
		ПодсветитьЭлемент(Элементы.СканированиеСерия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыЭлементовСканирования(Форма) Экспорт
	
	УстановитьЗаголовокФормыЭлементовСканирования(Форма);
	
	УстановитьЗаголовкиЭлементовСканирования(Форма);
	
	УстановитьПодсветкуЭлементовСканирования(Форма);
	
	УстановитьДоступностьЭлементовСканирования(Форма);
	
	УстановитьЦветаЭлементовСканирования(Форма);
	
КонецПроцедуры

// Вызывает отдельные процедуры для установки доступности элементов на странице сканирования.
//
Процедура УстановитьДоступностьЭлементовСканирования(Форма) Экспорт
	
	УстановитьДоступностьВводаКоличества(Форма);
	УстановитьДоступностьСерии(Форма);
	
КонецПроцедуры

// Устанавливает доступность кнопки ввода отсканированного количества товаров.
//
Процедура УстановитьДоступностьВводаКоличества(Форма)
	
	ПараметрыРежима           = Форма.ПараметрыРежима;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	Элементы                  = Форма.Элементы;
	ЭтоНаборТоваров           = Форма.ПараметрыРежима.НаборТоваров;
	ТипЗадания                = Форма.ПараметрыРежима.ТипЗадания;
	ПараметрСканирования      = Форма.ПараметрыРежима.ПараметрСканирования;
	
	ЭтоПересчетТоваров        = (ТипЗадания = "Пересчет");
	ЭтоПриемкаТоваров         = (ТипЗадания = "Приемка");
	
	ДоступностьВводаКоличества = Ложь;
	ДоступностьНеОтгружать = Ложь;
	
	Если ЭтоНаборТоваров Или ЭтоПриемкаТоваров Или ЭтоПересчетТоваров  Тогда
		
		Если ПараметрСканирования = "Номенклатура" Тогда
			
			Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкНоменклатура) Тогда
				
				Если Не ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкСерия) 
					И ТекущаяСтрокаСканирования.СтатусУказанияСерий = 0 Тогда
					
					ДоступностьВводаКоличества = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ПараметрСканирования = "Серия" Тогда
			
			Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкСерия) Тогда
				
				ДоступностьВводаКоличества = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗадания = "ПроверкаОтбора" Тогда
			
			Если ТекущаяСтрокаСканирования.СтатусУказанияСерий = 0 Тогда
				
				ДоступностьВводаКоличества = ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкНоменклатура);
				
			Иначе
				
				ДоступностьВводаКоличества = ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкСерия);
				
			КонецЕсли;
			
			ДоступностьНеОтгружать = ДоступностьВводаКоличества;
			
		Иначе
			
			Если ТекущаяСтрокаСканирования.СтатусУказанияСерий = 0 Тогда
				
				ДоступностьВводаКоличества = (ТекущаяСтрокаСканирования.Номенклатура = ТекущаяСтрокаСканирования.СкНоменклатура) 
				И (ТекущаяСтрокаСканирования.Характеристика = ТекущаяСтрокаСканирования.СкХарактеристика)
				И (ТекущаяСтрокаСканирования.Упаковка = ТекущаяСтрокаСканирования.СкУпаковка)
				И (ТекущаяСтрокаСканирования.Серия = ТекущаяСтрокаСканирования.СкСерия);
				
			Иначе
				
				ДоступностьВводаКоличества = 
				ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Серия) 
				И (ТекущаяСтрокаСканирования.Серия = ТекущаяСтрокаСканирования.СкСерия);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.СканированиеВвестиКоличество.Доступность = ДоступностьВводаКоличества;
	Элементы.СканированиеНеОтгружать.Доступность      = ДоступностьНеОтгружать;
	
КонецПроцедуры

// Устанавливает доступность элемента сканирования "Серия".
//
Процедура УстановитьДоступностьСерии(Форма)
	
	ДоступностьСерии          = Форма.ИспользоватьСерииНоменклатуры;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	Элементы                  = Форма.Элементы;
	
	Если Форма.ИспользоватьСерииНоменклатуры 
		И ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Номенклатура) 
		И (ТекущаяСтрокаСканирования.СтатусУказанияСерий = 0) 
		Или Не ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Номенклатура) Тогда
		
		ДоступностьСерии = Ложь;
		
	КонецЕсли;
	
	Элементы.СканированиеСерия.Доступность = ДоступностьСерии;
	
КонецПроцедуры

// Процедура устанавливает текст заголовка формы в зависисмости от того, 
// какой элемент сканирования активен.
//
Процедура УстановитьЗаголовокФормыЭлементовСканирования(Форма) Экспорт
	
	ПараметрыРежима      = Форма.ПараметрыРежима;
	РазрешениеЭкрана     = Форма.РазрешениеЭкрана;
	ПараметрСканирования = Форма.ПараметрыРежима.ПараметрСканирования;
	
	ЭтоНаборТоваров = ПараметрыРежима.НаборТоваров;
	
	Если ПараметрСканирования = "Ячейка" Тогда
		
		Если ЭтоНаборТоваров Тогда
			
			ТекстЗаголовка = ТекстНадписиЗаголовкаЭлементаФормы("ПодсказкаОтскШКЗоныПриемки", Форма);
			
		Иначе
			
			ТекстЗаголовка = ТекстНадписиЗаголовкаЭлементаФормы("ПодсказкаОтскШКЯчейки", Форма);
			
		КонецЕсли;
		
	ИначеЕсли ПараметрСканирования = "Номенклатура" Или ПараметрСканирования = "Количество" Тогда
		
		ТекстЗаголовка = ТекстНадписиЗаголовкаЭлементаФормы("ПодсказкаОтскШКТовара", Форма);
		
	ИначеЕсли ПараметрСканирования = "Серия" Тогда
		
		ТекстЗаголовка = ТекстНадписиЗаголовкаЭлементаФормы("ПодсказкаОтскШКСерии", Форма);
		
	КонецЕсли;
	
	РабочееМестоРаботникаСкладаКлиентСервер.УстановитьЗаголовокФормы(Форма, ТекстЗаголовка);
	
КонецПроцедуры

// Процедура устанавливает текст заголовка элемента сканирования ячейки
// на странице сканирования.
//
Процедура УстановитьЗаголовокЯчейки(Форма)
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	Элементы = Форма.Элементы;
	
	Если ТипЗадания = "Приемка" Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНаборТоваров Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.СкЯчейка) Тогда
			ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ячейка: %1'"), 
				ТекущаяСтрокаСканирования.СкЯчейка);
		Иначе
			ТекстЗаголовка = НСтр("ru = '<Зона приемки>'");
		КонецЕсли;
	Иначе
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ячейка (%1 из %2): %3'"), 
			ТекущаяСтрокаСканирования.НомерЯчейки,
			ТекущаяСтрокаСканирования.КоличествоЯчеек,
			ТекущаяСтрокаСканирования.Ячейка);
	КонецЕсли;
	
	Элементы.СканированиеЯчейка.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

// Процедура формирует и устанавливает значение заголовка на элементе сканирования "Товар".
//
Процедура УстановитьЗаголовокТовара(Форма)
	
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ПараметрыРежима           = Форма.ПараметрыРежима;
	ЭтоНаборТоваров           = Форма.ПараметрыРежима.НаборТоваров;
	Элементы                  = Форма.Элементы;
	ТипЗадания                = Форма.ПараметрыРежима.ТипЗадания;
	ОтборОтсканирован         = Форма.ПараметрыРежима.ОтборОтсканирован;
	
	Если ЭтоНаборТоваров Тогда
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Номенклатура) Тогда
			ТекстЗаголовка = НСтр("ru = '<Товар>'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Добавлен товар: [Номенклатура] [Характеристика]'");
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Номенклатура) Тогда
			ТекстЗаголовка = НСтр("ru = '<Товар>'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Отсканирован товар:
			|[Номенклатура] [Характеристика]'");
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Отбор" Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Взять ([НомерТовараВЯчейке] из [КоличествоТоваровВЯчейке]): [Номенклатура] [Характеристика]'");
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Положить ([НомерТовараВЯчейке] из [КоличествоТоваровВЯчейке]): [Номенклатура] [Характеристика]'");
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		Если Не ОтборОтсканирован Тогда
			ТекстЗаголовка = НСтр("ru = 'Взять ([НомерТовараВЯчейке] из [КоличествоТоваровВЯчейке]): [Номенклатура] [Характеристика]'");
		Иначе
			ТекстЗаголовка = НСтр("ru = 'Положить ([НомерТовараВЯчейке] из [КоличествоТоваровВЯчейке]): [Номенклатура] [Характеристика]'");
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		ТекстЗаголовка = НСтр("ru = '[Номенклатура] [Характеристика]'");
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Товар ([НомерТовараВЯчейке] из [КоличествоТоваровВЯчейке]): [Номенклатура] [Характеристика]'");
		
	КонецЕсли;
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(
		ТекстЗаголовка, 
		ТекущаяСтрокаСканирования);
	
	Элементы.СканированиеТовар.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

// Процедура формирует и устанавливает значение заголовка на элементе сканирования "Серия" 
//
Процедура УстановитьЗаголовокСерии(Форма)
	
	ПараметрыРежима               = Форма.ПараметрыРежима;
	ТекущаяСтрокаСканирования     = Форма.ТекущаяСтрокаСканирования;
	Элементы                      = Форма.Элементы;
	ТипЗадания                    = Форма.ПараметрыРежима.ТипЗадания;
	ИспользоватьСерииНоменклатуры = Форма.ИспользоватьСерииНоменклатуры;
	ЭтоНаборТоваров               = Форма.ПараметрыРежима.НаборТоваров;
	ПараметрСканирования          = Форма.ПараметрыРежима.ПараметрСканирования;
	
	ЭтоПересчетТоваров       = (ТипЗадания = "Пересчет");
	ЭтоПроверкаОтбораТоваров = (ТипЗадания = "ПроверкаОтбора");
	
	Если Не ИспользоватьСерииНоменклатуры 
		Или (ТекущаяСтрокаСканирования.СтатусУказанияСерий = 0) Тогда
		
		Элементы.СканированиеСерия.Заголовок = НСтр("ru = '<серии не указываются>'");
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Номенклатура) Тогда
		
		Элементы.СканированиеСерия.Заголовок = НСтр("ru = '<Серия>'");
		Возврат;
		
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = '<отсканируйте серию>'");
	
	Если ЭтоНаборТоваров Тогда
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Серия) Тогда
			
			ТекстЗаголовка = НСтр("ru = 'Добавлена серия: %1'");
			
		КонецЕсли;
		
	Иначе
		
		Если ЭтоПересчетТоваров Тогда
			
			Если ПараметрСканирования = "Серия" Тогда
				
				Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Серия) Тогда
					
					ТекстЗаголовка = НСтр("ru = 'Отсканирована серия: %1'");
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЭтоПроверкаОтбораТоваров Тогда
			
			Если СерииУказываютсяПриПланированииОтбора(ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
				
				Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Серия) Тогда
					
					ТекстЗаголовка = НСтр("ru = 'Серия: %1'");
					
				КонецЕсли;
				
			ИначеЕсли СерииУказываютсяПоФактуОтбора(ТекущаяСтрокаСканирования.СтатусУказанияСерий) Тогда
				
				Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Серия) Тогда
					
					ТекстЗаголовка = НСтр("ru = 'Добавлена серия: %1'");
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ТекущаяСтрокаСканирования.Серия) Тогда
				
				ТекстЗаголовка = НСтр("ru = 'Серия: %1'");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗаголовка, 
		ТекущаяСтрокаСканирования.Серия);
	
	Элементы.СканированиеСерия.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

// Процедура формирует и устанавливает значение заголовка на элементе сканирования "Количествоне не отгружать".
//
Процедура УстановитьЗаголовокКоличестваНеОтгружать(Форма)
	
	Элементы = Форма.Элементы;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Элементы.СканированиеНеОтгружать.Заголовок = "";
	
	Если ТипЗадания <> "ПроверкаОтбора" Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СканированиеНеОтгружать.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковокНеОтгружать;
	
КонецПроцедуры

// Процедура формирует и устанавливает значение заголовка на элементе сканирования "Количество в документе".
//
Процедура УстановитьЗаголовокКоличестваВДокументе(Форма)
	
	Элементы = Форма.Элементы;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Элементы.НадписьКоличествоВДокументе.Заголовок = "";
	
	Если ТипЗадания <> "ПроверкаОтбора" Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.НадписьКоличествоВДокументе.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковокВДокументе;
	
КонецПроцедуры

// Процедура формирует и устанавливает значение заголовка на элементе сканирования "Количество".
//
Процедура УстановитьЗаголовокКоличества(Форма)
	
	Элементы                  = Форма.Элементы;
	ПараметрыРежима           = Форма.ПараметрыРежима;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ЭтоНаборТоваров           = Форма.ПараметрыРежима.НаборТоваров;
	ТипЗадания                = Форма.ПараметрыРежима.ТипЗадания;
	ОтборОтсканирован         = Форма.ПараметрыРежима.ОтборОтсканирован;
	
	// Очистить все заголовки.
	Элементы.НадписьВзять.Заголовок                 = "";
	Элементы.НадписьВзяли.Заголовок                 = "";
	Элементы.НадписьУпаковка.Заголовок              = "";
	Элементы.НадписьКоличествоУпаковок.Заголовок    = "";
	Элементы.СканированиеВвестиКоличество.Заголовок = "";
	
	// Установить нужные.
	Элементы.НадписьУпаковка.Заголовок = ТекущаяСтрокаСканирования.Упаковка;
	
	Если ЭтоНаборТоваров Тогда
		
		Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'Доб.:'");
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'Отск.:'");
		
	ИначеЕсли ТипЗадания = "Отбор" Тогда
		
		Элементы.НадписьВзять.Заголовок = НСтр("ru = 'Взять:'");
		Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'Взяли:'");
		Элементы.НадписьКоличествоУпаковок.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковок;
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		Элементы.НадписьВзять.Заголовок = НСтр("ru = 'Положить:'");
		Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'Положили:'");
		Элементы.НадписьКоличествоУпаковок.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковок;
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		Если Не ОтборОтсканирован Тогда
			Элементы.НадписьВзять.Заголовок = НСтр("ru = 'Взять:'");
			Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'Взяли:'");
		Иначе
			Элементы.НадписьВзять.Заголовок = НСтр("ru = 'Положить:'");
			Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'Положили:'");
		КонецЕсли;
		
		Элементы.НадписьКоличествоУпаковок.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковок;
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		Элементы.НадписьВзяли.Заголовок = НСтр("ru = 'В налич.:'");
		
	Иначе
		
		Элементы.НадписьВзять.Заголовок = НСтр("ru = 'Взять:'");
		Элементы.НадписьКоличествоУпаковок.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковок;
		
	КонецЕсли;
	
	Элементы.СканированиеВвестиКоличество.Заголовок = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
	
КонецПроцедуры

// Процедура для установки заголовков элементов сканирования. Вызывается
// при переходе на другю строку, товар или ячейку сканирования.
//
Процедура УстановитьЗаголовкиЭлементовСканирования(Форма) Экспорт
	
	УстановитьЗаголовокЯчейки(Форма);
	
	УстановитьЗаголовокТовара(Форма);
	
	УстановитьЗаголовокСерии(Форма);
	
	УстановитьЗаголовокКоличества(Форма);
	
	УстановитьЗаголовокКоличестваВДокументе(Форма);
	
	УстановитьЗаголовокКоличестваНеОтгружать(Форма);
	
КонецПроцедуры

Процедура УстановитьЦветаЭлементовСканирования(Форма)
	
	Форма.Элементы.СканированиеВвестиКоличество.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;
	
КонецПроцедуры

// Добавляет кнопки команд на страницу диалогового сообщения пользователю.
//
// Параметры:
//	Форма - УправляемаяФорма - фомра рабочего места,
//	Кнопка - Структура - параметры кнопки.
//
Процедура ДобавитьКнопкуДиалогаСообщения(Форма, Кнопка)
	
	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЦветВыделенияРамки = ЦветаСтиля.ЦветТекстаФормы;
	ИмяЭлемента = "Кнопка" + Кнопка.ИмяКоманды; 
	
	НоваяКнопка = Форма.Элементы.Добавить(
		ИмяЭлемента, 
		Тип("КнопкаФормы"), 
		Форма.Элементы.ГруппаКомандыДействий);
	
	НоваяКнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	Если Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана._240х320 Тогда
		НоваяКнопка.Ширина = 20;
	ИначеЕсли Форма.РазрешениеЭкрана = Перечисления.РазрешенияЭкрана._320х320 Тогда
		НоваяКнопка.Ширина = 25;
	КонецЕсли;
	НоваяКнопка.Высота = 2;
	НоваяКнопка.Заголовок = Кнопка.Представление;
	НоваяКнопка.ИмяКоманды = Кнопка.ИмяКоманды;
	
	Если Кнопка.Выделить Тогда
		НоваяКнопка.Шрифт = Новый Шрифт(Форма.Элементы[ИмяЭлемента].Шрифт,,,Истина);
		НоваяКнопка.ЦветРамки = ЦветВыделенияРамки;
	КонецЕсли;
	
КонецПроцедуры

// Переключается на страницу вывода сообщения, выводит текст сообщения и отображает список команд
// доступных вариантов ответа.
//
// Параметры:
//	Форма - УправляемаяФорма - форма рабочего места,
//	ТекстСообщения - Строка - текст вопроса или сообщения,
//	Кнопки - СписокЗначений, Структура - список кнопок или одна кнопка,
//	ЗаголовокСообщения - Строка - текст который будет установлен в заголовок формы,
//	ОтображатьТаблицуИнформации - Булево - если указано значение, то отображается таблица.
//
Процедура ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки, ЗаголовокСообщения = "", ОтображатьТаблицуИнформации = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если ОтображатьТаблицуИнформации Тогда
		
		Элементы.ТаблицаИнформацияСообщения.Видимость = Истина;
		
	Иначе
		
		Элементы.ТаблицаИнформацияСообщения.Видимость = Ложь;
		
	КонецЕсли;
	
	// Установить текст сообщения, вопроса, предупреждения.
	Элементы.НадписьТекстСообщения.Заголовок = ТекстСообщения;
	
	// Удалить существующие кнопки действий.
	ГраницаИндекса = Элементы.ГруппаКомандыДействий.ПодчиненныеЭлементы.Количество() - 1;
	
	Для А = 0 По ГраницаИндекса Цикл
		ОбрИндекс = ГраницаИндекса - А;
		Элемент = Элементы.ГруппаКомандыДействий.ПодчиненныеЭлементы[ОбрИндекс];
		
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	// Добавить кнопки действий.
	Если ТипЗнч(Кнопки) = Тип("СписокЗначений") Тогда
		
		Для каждого ЭлементСписка Из Кнопки Цикл
			ДобавитьКнопкуДиалогаСообщения(Форма, ЭлементСписка.Значение);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Кнопки) = Тип("Структура") Тогда
		
		ДобавитьКнопкуДиалогаСообщения(Форма, Кнопки);
		
	КонецЕсли;
	
	РабочееМестоРаботникаСкладаКлиентСервер.УстановитьЗаголовокФормы(Форма, ЗаголовокСообщения);
	ПерейтиНаСтраницу(Форма,"СтраницаСообщение");
	
КонецПроцедуры

Процедура ОсновноеМенюЗакрыть(Форма) Экспорт
	
	ТекстВопроса = НСтр("ru = 'Закрыть программу?'");
	
	КнопкаЗакрыть     = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
		"ЗакрытьФормуМобильногоРабочегоМеста", 
		НСтр("ru = 'Закрыть'"), 
		Истина);
	
	КнопкаНеЗакрывать = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
		"НеЗакрыватьФормуМобильногоРабочегоМеста", 
		НСтр("ru = 'Не закрывать'"));
	
	Кнопки = Новый СписокЗначений;
	
	Кнопки.Добавить(КнопкаЗакрыть);
	Кнопки.Добавить(КнопкаНеЗакрывать);
	
	ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
	
КонецПроцедуры

// Получает значения элементов подсказки пользователю. В зависимости от типа задания устанавливает
// значения элементов подсказки в соответствующий падеж.
//
// Параметры:
//	ТипЗадания - Строка - тип задания,
//	ОтборОтсканирован - Булево - признак завершения сканирования отбора при перемещении,
//	ПредставлениеТипаЗадания - Неопределено - переменная в которую запиисывается тип задания,
//	ТипВыполнения - Неопределено - переменная, в которую записывается тип выполнения,
//	ТипДействия - Неопределено - переменная в которую записывается тип действия.
//
Процедура ПолучитьЗначенияЭлементовСообщенияПользователю(ТипЗадания, ОтборОтсканирован, ПредставлениеТипаЗадания = "", ТипВыполнения = "", ТипДействия = "")
	
	Если ТипЗадания = "Отбор" Тогда
		ПредставлениеТипаЗадания = НРег(ТипЗадания);
		
		ТипВыполнения = НСтр("ru = 'отбора'");
		ТипДействия   = НСтр("ru = 'отбор'");
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		ПредставлениеТипаЗадания = НРег(ТипЗадания);
		
		ТипВыполнения = НСтр("ru = 'размещения'");
		ТипДействия   = НСтр("ru = 'размещение'");
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		ПредставлениеТипаЗадания = НРег(ТипЗадания);
		
		Если ОтборОтсканирован Тогда
			ТипВыполнения = НСтр("ru = 'отбора'");
			ТипДействия   = НСтр("ru = 'отбор'");
		Иначе
			ТипВыполнения = НСтр("ru = 'размещения'");
			ТипДействия = НСтр("ru = 'размещение'");
		КонецЕсли;
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		ПредставлениеТипаЗадания = НРег(ТипЗадания);
		
		ТипВыполнения = НСтр("ru = 'пересчета'");
		ТипДействия = НСтр("ru = 'пересчет'");
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		ПредставлениеТипаЗадания = НСтр("ru = 'приемку'");
		
		ТипВыполнения = НСтр("ru = 'приемки'");
		ТипДействия = НСтр("ru = 'приемку'");
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		ПредставлениеТипаЗадания = НСтр("ru = 'проверки отбора'");
		
		ТипВыполнения = НСтр("ru = 'проверки отбора'");
		ТипДействия = НСтр("ru = 'проверку отбора'");
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Далее" на странице сканирования товаров.
// В зависимости от типа задания, текущего состояния выполнения задания, формируется
// структура диалога - текст сообщения о состав кнопок. Затем отображается диалоговое 
// сообщение.
//
Процедура СканированиеДалее(Форма) Экспорт
	
	Перем ПредставлениеТипаЗадания, ТипВыполнения, ТипДействия;
	
	ТипЗадания                = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров           = Форма.ПараметрыРежима.НаборТоваров;
	ОтборОтсканирован         = Форма.ПараметрыРежима.ОтборОтсканирован;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	ЭтоПоследняяЯчейка        = ЭтоПоследняяЯчейка(Форма);
	ЭтоПоследнийТовар         = ЭтоПоследнийТовар(Форма);
	ЭтоПоследняяСтрокаТоваров = ЭтоПоследняяСтрокаТоваров(Форма);
	ЕстьОтсканированныеТовары = ЕстьОтсканированныеТовары(Форма);
	
	// Получить значения необходимые для формирования текстов диалога.
	ПредставлениеТовара = ПредставлениеТовара(
		ТекущаяСтрокаСканирования.Номенклатура,
		ТекущаяСтрокаСканирования.Характеристика);
	
	// Получить тексты элементов подсказки.
	ПолучитьЗначенияЭлементовСообщенияПользователю(
		ТипЗадания,
		ОтборОтсканирован,
		ПредставлениеТипаЗадания, 
		ТипВыполнения, 
		ТипДействия);
	
	// В зависимости от типа операции сформировать текст вопроса и список кнопок диалога.
	Кнопки = Новый СписокЗначений;
	
	Если ЭтоНаборТоваров Тогда
		
		Если ТипЗадания = "Размещение" Тогда
			
			Если ЕстьОтсканированныеТовары Тогда
				
				ТекстВопроса = НСтр("ru = 'Завершить 
				|добавление товаров и перейти к размещению по ячейкам?'");
				
				КнопкаЗавершить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
					"ЗавершитьВыполнениеЗадания", 
					НСтр("ru = 'Перейти 
					|к размещению товаров'"));
				
			Иначе
				
				ТекстВопроса = НСтр("ru = 'Отменить 
				|добавление товаров в задание на размещение?'");
				
				КнопкаЗавершить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
					"ЗавершитьВыполнениеЗадания", 
					НСтр("ru = 'Отменить задание'"));
				
			КонецЕсли;
			
			КнопкаПродолжить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
				"ПерейтиКСканированию", 
				НСтр("ru = 'Продолжить 
				|добавление товаров'"));
			
		ИначеЕсли ТипЗадания = "Приемка" Тогда
			
			Если ЕстьОтсканированныеТовары Тогда
				
				ТекстВопроса = НСтр("ru = 'Завершить 
				|приемку товаров?'");
				
				КнопкаЗавершить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
					"ЗавершитьВыполнениеЗадания",
					НСтр("ru = 'Завершить 
					|приемку товаров'"));
				
			Иначе
				
				ТекстВопроса = НСтр("ru = 'Отменить 
				|выполнение приемки товаров?'");
				
				КнопкаЗавершить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
					"ЗавершитьВыполнениеЗадания",
					НСтр("ru = 'Отменить 
					|приемку товаров'"));
				
			КонецЕсли;
			
			КнопкаПродолжить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
				"ПерейтиКСканированию",
				НСтр("ru = 'Продолжить 
				|приемку товаров'"));
			
		КонецЕсли;
		
		КнопкаПродолжить.Выделить = Истина;
		
		Кнопки.Добавить(КнопкаПродолжить);
		Кнопки.Добавить(КнопкаЗавершить);
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		КнопкаПерейтиКСледЯчейке = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКСледующейЯчейкеСканирования", 
			НСтр("ru = 'Перейти'"));
		
		ПредставлениеКнопки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Продолжить 
			|пересчет товаров в ячейке %1'"), 
			ТекущаяСтрокаСканирования.Ячейка);
		
		КнопкаПродолжить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКСканированию", 
			ПредставлениеКнопки);
		
		// ... кнопка завершения.
		КнопкаЗавершить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ЗавершитьВыполнениеЗадания", 
			НСтр("ru = 'Завершить 
			|выполнение задания'"));
		
		// Установить параметры диалога.
		Если ЭтоПоследняяЯчейка Тогда
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ячейка %1 последняя в задании на пересчет. 
				|Завершить выполнение пересчета товаров?'"), 
				ТекущаяСтрокаСканирования.Ячейка);
			
			КнопкаЗавершить.Выделить = Истина;
			
			Кнопки.Добавить(КнопкаЗавершить);
			Кнопки.Добавить(КнопкаПродолжить);
			
		Иначе
			
			ТекстВопроса = НСтр("ru = 'Перейти 
			|к пересчету товаров в следующей ячейке?'");
			
			КнопкаПерейтиКСледЯчейке.Выделить = Истина;
			
			Кнопки.Добавить(КнопкаПерейтиКСледЯчейке);
			Кнопки.Добавить(КнопкаПродолжить);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Отбор" Или ТипЗадания = "Размещение" Тогда
		
		КнопкаПерейтиКСледЯчейке = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКСледующейЯчейкеСканирования",
			НСтр("ru = 'Перейти 
			|к следующей ячейке'"));
		
		КнопкаПерейтиКСледТовару = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКСледующемуТоваруСканирования",
			НСтр("ru = 'Перейти 
			|к следующему товару'"));
		
		Если ТипЗадания = "Отбор" Тогда
			
			ПредставлениеКнопкиПродолжить = НСтр("ru = 'Продолжить отбор товаров из ячейки %1'");
			
		ИначеЕсли ТипЗадания = "Размещение" Тогда
			
			ПредставлениеКнопкиПродолжить = НСтр("ru = 'Продолжить размещение товаров в ячейку %1'");
			
		КонецЕсли;
		
		ПредставлениеКнопки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ПредставлениеКнопкиПродолжить, 
			ТекущаяСтрокаСканирования.Ячейка);
		
		КнопкаПродолжить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКСканированию",
			ПредставлениеКнопки);
		
		// ... кнопку завершения выполнения задания.
		КнопкаЗавершить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ЗавершитьВыполнениеЗадания",
			НСтр("ru = 'Завершить 
			|выполнение задания'"));
		
		// Установить параметры диалога.
		Если Не ЭтоПоследняяЯчейка Тогда
			
			ТекстВопроса = НСтр("ru = 'Перейти к следующей ячейке, товару?'");
			
			Кнопки.Добавить(КнопкаПерейтиКСледЯчейке);
			Кнопки.Добавить(КнопкаПерейтиКСледТовару);
			Кнопки.Добавить(КнопкаПродолжить);
			
		ИначеЕсли Не ЭтоПоследнийТовар Тогда
			
			ТекстВопроса = НСтр("ru = 'Перейти 
			|к следующему товару?'");
			
			Кнопки.Добавить(КнопкаПерейтиКСледТовару);
			Кнопки.Добавить(КнопкаПродолжить);
			
		ИначеЕсли ЭтоПоследняяЯчейка И ЭтоПоследнийТовар Тогда
			
			ТекстВопроса = НСтр("ru = 'Товар ""[Товар]"" в ячейке ""[Ячейка]"" последний в задании на [ТипЗадания].
			|Завершить выполнение [ТипВыполнения] товаров?'");
			
			ВставляемыеЗначения = Новый Структура("Товар, Ячейка, ТипЗадания, ТипВыполнения", 
			ПредставлениеТовара, ТекущаяСтрокаСканирования.Ячейка, ПредставлениеТипаЗадания, ТипВыполнения);
			
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстВопроса, ВставляемыеЗначения);
			
			Кнопки.Добавить(КнопкаЗавершить);
			Кнопки.Добавить(КнопкаПродолжить);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		КнопкаПерейтиКСледЯчейке = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКСледующейЯчейкеСканирования",
			НСтр("ru = 'Перейти 
			|к следующей ячейке'"));
		
		КнопкаПерейтиКСледТовару = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКСледующемуТоваруСканирования",
			НСтр("ru = 'Перейти 
			|к следующему товару'"));
		
		КнопкаПродолжить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКСканированию",
			НСтр("ru = 'Продолжить 
			|сканирование товаров'"));
		
		КнопкаЗавершить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ЗавершитьВыполнениеЗадания",
			НСтр("ru = 'Завершить 
			|выполнение задания'"));
		
		// Установить параметры диалога.
		
		// У перемещения м.б. два случая: 
		// - когда отбор отсканирован;
		// - когда отбор не отсканирован.
		
		Если ОтборОтсканирован Тогда
			
			Если Не ЭтоПоследняяЯчейка Тогда
				
				ТекстВопроса = НСтр("ru = 'Перейти 
				|к следующей ячейке, товару?'");
				
				КнопкаПродолжить.Выделить = Истина;
				
				Кнопки.Добавить(КнопкаПродолжить);
				Кнопки.Добавить(КнопкаПерейтиКСледЯчейке);
				Кнопки.Добавить(КнопкаПерейтиКСледТовару);
				
			ИначеЕсли Не ЭтоПоследнийТовар Тогда
				
				ТекстВопроса = НСтр("ru = 'Перейти 
				|к следующему товару?'");
				
				КнопкаПродолжить.Выделить = Истина;
				
				Кнопки.Добавить(КнопкаПродолжить);
				Кнопки.Добавить(КнопкаПерейтиКСледТовару);
				
			ИначеЕсли ЭтоПоследняяЯчейка И ЭтоПоследнийТовар Тогда
				
				ТекстВопроса = НСтр("ru = 'Товар ""[Товар]"" в ячейке ""[Ячейка]"" последний в задании на [ТипЗадания].
				|Завершить выполнение задания?'");
				
				ВставляемыеЗначения = Новый Структура("Товар, Ячейка, ТипЗадания, ТипВыполнения", 
				ПредставлениеТовара, Форма.ТекущаяСтрокаСканирования.Ячейка, ПредставлениеТипаЗадания, ТипВыполнения);
				
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстВопроса, ВставляемыеЗначения);
				
				КнопкаЗавершить.Выделить = Истина;
				
				Кнопки.Добавить(КнопкаЗавершить);
				Кнопки.Добавить(КнопкаПродолжить);
				
			КонецЕсли;
			
		Иначе // отбор не отсканирован
			
			КнопкаПереходаКРазмещению = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
				"ПерейтиКРазмещениюТоваров",
				НСтр("ru = 'Перейти 
				|к размещению товаров'"),
				Истина);
			
			Если Не ЭтоПоследняяЯчейка Тогда
				
				ТекстВопроса = НСтр("ru = 'Перейти 
				|к следующей ячейке, товару?'");
				
				КнопкаПродолжить.Выделить = Истина;
				КнопкаПереходаКРазмещению.Выделить = Ложь;
				
				Кнопки.Добавить(КнопкаПродолжить);
				Кнопки.Добавить(КнопкаПерейтиКСледЯчейке);
				Кнопки.Добавить(КнопкаПерейтиКСледТовару);
				Кнопки.Добавить(КнопкаПереходаКРазмещению);
				
			ИначеЕсли Не ЭтоПоследнийТовар Тогда
				
				ТекстВопроса = НСтр("ru = 'Перейти к следующему товару?'");
				
				КнопкаПродолжить.Выделить = Истина;
				КнопкаПереходаКРазмещению.Выделить = Ложь;
				
				Кнопки.Добавить(КнопкаПродолжить);
				Кнопки.Добавить(КнопкаПерейтиКСледТовару);
				Кнопки.Добавить(КнопкаПереходаКРазмещению);
				
			ИначеЕсли ЭтоПоследняяЯчейка И ЭтоПоследнийТовар Тогда
				
				ТекстВопроса = НСтр("ru = 'Товар ""[Товар]"" в ячейке ""[Ячейка]"" последний в задании на [ТипЗадания]. 
				|Завершить отбор и перейти 
				|к размещению товаров?'");
				
				ВставляемыеЗначения = Новый Структура("Товар, Ячейка, ТипЗадания, ТипВыполнения", 
				ПредставлениеТовара, ТекущаяСтрокаСканирования.Ячейка, ПредставлениеТипаЗадания, ТипВыполнения);
				
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстВопроса, ВставляемыеЗначения);
				
				Кнопки.Добавить(КнопкаПереходаКРазмещению);
				Кнопки.Добавить(КнопкаПродолжить);
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		Если ЕстьОтсканированныеТовары Тогда
			
			ТекстВопроса = НСтр("ru = 'Завершить 
			|проверку отбора товаров?'");
			
			КнопкаЗавершить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
				"ЗавершитьВыполнениеЗадания",
				НСтр("ru = 'Завершить 
				|проверку отбора товаров'"));
			
		Иначе
			
			ТекстВопроса = НСтр("ru = 'Отменить 
			|проверку отбора товаров?'");
			
			КнопкаЗавершить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
				"ОтменитьВыполнениеЗадания",
				НСтр("ru = 'Отменить 
				|проверку отбора товаров'"));
			
		КонецЕсли;
		
		Если Не ЭтоПоследняяСтрокаТоваров Тогда
			
			КнопкаПерейтиКСледТовару = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
				"ПерейтиКСледующемуТоваруСканирования",
				НСтр("ru = 'Перейти 
				|к следующему товару'"));
			
		КонецЕсли;
		
		КнопкаПродолжить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКСканированию",
			НСтр("ru = 'Продолжить 
			|проверку отбора товаров'"));
		
		Если ЕстьОтсканированныеТовары Тогда
			
			КнопкаЗавершить.Выделить = Истина;
			
		Иначе
			
			КнопкаПродолжить.Выделить = Истина;
			
		КонецЕсли;
		
		Кнопки.Добавить(КнопкаЗавершить);
		Кнопки.Добавить(КнопкаПродолжить);
		Кнопки.Добавить(КнопкаПерейтиКСледТовару);
		
	КонецЕсли;
	
	ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
	
КонецПроцедуры

Процедура ПерейтиКПолучениюИнформации(Форма) Экспорт
	
	Форма.ТаблицаИнформации.Очистить();
	ПерейтиНаСтраницу(Форма,"СтраницаЗапросИнформации");
	
КонецПроцедуры

Процедура ОбновитьСписокЗаданийОбработчикОжидания(Форма) Экспорт
	
	Если Форма.Элементы.СтраницыФормы.ТекущаяСтраница = Форма.Элементы.СтраницаВыборОперации Тогда
		ОбновитьОсновноеМеню(Форма);
	ИначеЕсли Форма.Элементы.СтраницыФормы.ТекущаяСтраница = Форма.Элементы.СтраницаВыборЗадания Тогда
		Форма.Элементы.Задания.Обновить();
	КонецЕсли;
	
КонецПроцедуры

Процедура НеЗакрыватьФормуМобильногоРабочегоМеста(Форма) Экспорт
	
	Форма.ПараметрыРежима.МожноЗакрытьФорму = Ложь;
	ПерейтиКВыборуСкладскойОперации(Форма);
	
КонецПроцедуры

Процедура ИнформацияЗакрыть(Форма) Экспорт
	
	ПерейтиНаПредыдущуюСтраницу(Форма);
	
КонецПроцедуры

Процедура ПередЗакрытием(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы              = Форма.Элементы;
	ПараметрыРежима       = Форма.ПараметрыРежима;
	МожноЗакрытьФорму     = Форма.ПараметрыРежима.МожноЗакрытьФорму;
	ТекущаяСтраница       = Форма.Элементы.СтраницыФормы.ТекущаяСтраница;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	
	Если Не МожноЗакрытьФорму Тогда
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
		Если ТекущаяСтраница = Элементы.СтраницаВыборЗначения Тогда
			
			ВыборЗначенияОтмена(Форма);
			
			Возврат;
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВводКоличества Тогда
			
			ВводКоличестваОтмена(Форма);
			
			Возврат;
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСканирование Тогда
			
			Отказ = Истина;
			СтандартнаяОбработка = Ложь;
			
			ТекстСообщения = НСтр("ru = 'Сейчас нельзя закрыть программу - сначала нужно завершить текущее задание.'");
			
			Кнопки = Новый СписокЗначений;
			
			Кнопки.Добавить(РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога("ЗавершитьВыполнениеЗадания", НСтр("ru = 'Завершить задание'")));
			Кнопки.Добавить(РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога("ПерейтиКСканированию", НСтр("ru = 'Вернуться к выполнению задания'")));
			
			ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
			
			Возврат;
			
		ИначеЕсли ТекущаяСтраница <> Элементы.СтраницаВыборОперации Тогда
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		// Проверить режим и состояние режима из которого пытаются закрыть формы.
		Если ТоварыДляСканирования.Количество() > 0 Тогда
			
			Отказ = Истина;
			СтандартнаяОбработка = Ложь;
			
			ТекстСообщения = НСтр("ru = 'Сейчас нельзя закрыть программу - сначала нужно завершить текущее задание.'");
			
			Кнопки = Новый СписокЗначений;
			
			Кнопки.Добавить(РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога("ЗавершитьВыполнениеЗадания", НСтр("ru = 'Завершить задание'")));
			Кнопки.Добавить(РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога("ПерейтиКСканированию", НСтр("ru = 'Вернуться к выполнению задания'")));
			
			ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'Закрыть программу?'");
			
			Кнопки = Новый СписокЗначений;
			
			Кнопки.Добавить(РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога("ЗакрытьФормуМобильногоРабочегоМеста", НСтр("ru = 'Закрыть'")));
			Кнопки.Добавить(РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога("НеЗакрыватьФормуМобильногоРабочегоМеста", НСтр("ru = 'Не закрывать'")));
			
			ПоказатьДиалогСообщение(Форма, ТекстСообщения, Кнопки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриВыбореЗадания(Форма) Экспорт
	
	Задание = Форма.Элементы.Задания.ТекущаяСтрока;
	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВзятьЗаданиеВРаботу(Форма, Задание);
	
КонецПроцедуры

// Выводит диалоговое сообщение со списком кнопок. Текст сообщения и состав команд
// формируются динамически в зависимости от типа текущего складского задания и 
// его состояния.
//
Процедура СканированиеДействия(Форма) Экспорт
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = Форма.ПараметрыРежима.НаборТоваров;
	
	Кнопки = Новый СписокЗначений;
	
	КнопкаОтменить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
		"ОтменитьВыполнениеЗадания",
		НСтр("ru = 'Отменить 
		|выполнение задания'"));
	
	КнопкаПродолжить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
		"ПерейтиКСканированию", 
		НСтр("ru = 'Продолжить 
		|добавление товаров'"),
		Истина);
	
	Если ЭтоНаборТоваров Тогда
		
		Если ТипЗадания = "Размещение" Тогда
			
			ТекстВопроса = НСтр("ru = 'Отменить добавление товаров в задание на размещение?'");
			
			Кнопки.Добавить(КнопкаПродолжить);
			Кнопки.Добавить(КнопкаОтменить);
			
		ИначеЕсли ТипЗадания = "Приемка" Тогда
			
			ТекстВопроса = НСтр("ru = 'Отменить приемку товаров?'");
			
			КнопкаВернутьсяКВыполнению = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
				"ВернутьсяКВыполнениюЗадания", 
				НСтр("ru = 'Вернуться 
				|к выполнению задания'"), 
				Истина);
			
			Кнопки.Добавить(КнопкаВернутьсяКВыполнению);
			Кнопки.Добавить(КнопкаОтменить);
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗадания = "Пересчет" Тогда
			
			ТекстВопроса = НСтр("ru = 'Завершить пересчет товаров?'");
			
		ИначеЕсли ТипЗадания = "Отбор" Тогда
			
			ТекстВопроса = НСтр("ru = 'Завершить отбор товаров?'");
			
		ИначеЕсли ТипЗадания = "Размещение" Тогда
			
			ТекстВопроса = НСтр("ru = 'Завершить размещение товаров?'");
			
		ИначеЕсли ТипЗадания = "Перемещение" Тогда
			
			ТекстВопроса = НСтр("ru = 'Завершить перемещение товаров?'");
			
		ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
			
			ТекстВопроса = НСтр("ru = 'Отменить проверку отбора товаров?'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЭтоНаборТоваров Тогда
		
		КнопкаПродолжить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ПерейтиКСканированию",
			НСтр("ru = 'Вернуться 
			|к выполнению задания'"), 
			Истина);
			
		КнопкаЗавершить = РабочееМестоРаботникаСкладаКлиентСервер.НоваяКнопкаДиалога(
			"ЗавершитьВыполнениеЗадания", 
			НСтр("ru = 'Завершить 
			|выполнение задания'"));
			
		Если ТипЗадания = "Пересчет" Или ТипЗадания = "Отбор" Или ТипЗадания = "Размещение" 
			Или ТипЗадания = "Перемещение" Тогда
			
			Кнопки.Добавить(КнопкаПродолжить);
			Кнопки.Добавить(КнопкаЗавершить);
			
		ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
			
			Кнопки.Добавить(КнопкаПродолжить);
			Кнопки.Добавить(КнопкаОтменить);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоказатьДиалогСообщение(Форма, ТекстВопроса, Кнопки);
	
КонецПроцедуры

Процедура ВыборЗначенияОтмена(Форма) Экспорт
	
	Форма.ВводШтрихкодаОтменен          = Истина;
	Форма.ШтрихкодПараметраСканирования = "";
	Форма.СрокГодностиСерии             = "";
	
	ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
	
КонецПроцедуры

Процедура ПерейтиНаСтраницу(Форма, ИмяСтраницы) Экспорт
	
	Элементы         = Форма.Элементы;
	ПараметрыРежима  = Форма.ПараметрыРежима;
	ТипЗадания       = Форма.ПараметрыРежима.ТипЗадания;
	ТекущийЭлемент   = Форма.ТекущийЭлемент;
	РазрешениеЭкрана = Форма.РазрешениеЭкрана;
	
	ТекущаяСтраница = Элементы[ИмяСтраницы];
	Элементы.СтраницыФормы.ТекущаяСтраница = ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаВыборОперации Тогда
		
		ПараметрыРежима.Режим = "ВыборОперации";
		
		ОчиститьИсториюПереходовПоСтраницам(Форма);
		
		ТекстЗаголовка = ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВыбОперацию", Форма);
		РабочееМестоРаботникаСкладаКлиентСервер.УстановитьЗаголовокФормы(Форма, ТекстЗаголовка);
		ТекущийЭлемент = Элементы.ОсновноеМенюОтбор;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыборЗадания Тогда
		
		ПараметрыРежима.Режим = "ВыборЗадания";
		ТекущийЭлемент = Элементы.Задания;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСканирование Тогда
		
		ПараметрыРежима.Режим = "Сканирование";
		УстановитьПараметрыЭлементовСканирования(Форма);
		ТекущийЭлемент = Элементы.СканированиеЯчейка;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВводКоличества Тогда
		
		Форма.ВводКоличестваОтменен = Ложь;
		
		ТекстЗаголовка = НСтр("ru = 'Введите количество'");
		ТекстПодсказки = НСтр("ru = 'Введите количество отсканированных товаров.'");
		
		Если ТипЗадания = "ПроверкаОтбора" Тогда
			
			Если ПараметрыРежима.Режим = "ВводКоличестваНеОтгружать" Тогда
				ТекстПодсказки = НСтр("ru = 'Введите количество товара которое не надо отгружать.'");
			КонецЕсли;
			
		КонецЕсли;
		
		РабочееМестоРаботникаСкладаКлиентСервер.УстановитьЗаголовокФормы(Форма, ТекстЗаголовка);
		Элементы.НадписьПодсказкаВводКоличества.Заголовок = ТекстПодсказки;
		ТекущийЭлемент = Элементы.ВводКоличестваКоличество;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗапросИнформации Тогда
		
		ПараметрыРежима.Режим = "ЗапросИнформации";
		
		ТекстЗаголовка = ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокПолучИнформации", Форма);
		ТекстПодсказки = ТекстНадписиЗаголовкаЭлементаФормы("ПодсказкаОтскШКТовараЯчейки", Форма);
		
		РабочееМестоРаботникаСкладаКлиентСервер.УстановитьЗаголовокФормы(Форма, ТекстЗаголовка);
		Элементы.НадписьПодсказкаЗапросИнформации.Заголовок = ТекстПодсказки;
		ТекущийЭлемент = Элементы.ИнформацияЗакрыть;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСообщение Тогда
		
		ПараметрыРежима.Режим = "ВыборДействия";
		ТекущийЭлемент = Элементы.НадписьТекстСообщения;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыборЗначения Тогда
		
		Форма.ВводШтрихкодаОтменен = Ложь;
		
		ПараметрыРежима.Режим = "ВводЗначения";
		
		ТекстЗаголовка = НСтр("ru = 'Ввод штрихкода'");
		РабочееМестоРаботникаСкладаКлиентСервер.УстановитьЗаголовокФормы(Форма, ТекстЗаголовка);
		ТекущийЭлемент = Элементы.ШтрихкодПараметраСканирования;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыборЗоныПриемкиОтгрузки Тогда
		
		ПараметрыРежима.Режим = "ВыборЗоныПриемкиРазмещения";
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСервис Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Сервис'");
		РабочееМестоРаботникаСкладаКлиентСервер.УстановитьЗаголовокФормы(Форма, ТекстЗаголовка);
		
	КонецЕсли;
	
	Форма.ТекущийЭлемент = ТекущийЭлемент;
	
	ПриПереходеНаСтраницу(Форма, ИмяСтраницы);
	УстановитьГорячиеКлавишиНаСтранице(Форма)
	
КонецПроцедуры

Функция ПараметрыКоманды(ГорячаяКлавиша, ИмяКоманды, ИмяЭлемента = "")
	
	СтруктураПараметров = Новый Структура("СочетаниеКлавиш, ИмяКоманды, ИмяЭлемента");
	
	СтруктураПараметров.СочетаниеКлавиш = Новый СочетаниеКлавиш(ГорячаяКлавиша);
	СтруктураПараметров.ИмяКоманды      = ИмяКоманды;
	СтруктураПараметров.ИмяЭлемента     = ?(ЗначениеЗаполнено(ИмяЭлемента), ИмяЭлемента, ИмяКоманды);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Возвращает массив - имена команд для которых нужно установить горячие клавиши.
// Имена команд располагаются в порядке их следования.
//
// Параметры:
//	Форма - УправляемаяФорма - форма рабочего места,
//	ИмяСтраницы - Строка - имя страницы.
//
Функция ПараметрыКомандНаСтраницеФормы(Форма, ИмяСтраницы)
	
	ЭтоНаборТоваров    = Форма.ПараметрыРежима.НаборТоваров;
	ТипЗадания         = Форма.ПараметрыРежима.ТипЗадания;
	ЭтоПересчетТоваров = (ТипЗадания = "Пересчет");
	
	МассивКоманд = Новый Массив;
	
	Если ИмяСтраницы = "СтраницаВыборОперации" Тогда
		
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._0, "ОсновноеМенюПриемка"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._1, "ОсновноеМенюРазмещение"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._2, "ОсновноеМенюОтбор"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._3, "ОсновноеМенюПересчет"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._4, "СоздатьНовоеСкладскоеЗадание"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._5, "ОсновноеМенюПроверкаОтбора"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._6, "ОсновноеМенюПеремещение"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._7, "ОсновноеМенюИнформация"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._8, "ОсновноеМенюОбновить"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._9, "ОсновноеМенюЗакрыть"));
		
	ИначеЕсли ИмяСтраницы = "СтраницаВыборЗадания" Тогда
		
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._0, "ЗаданияВыбрать"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._1, "ЗаданияПоказатьВсе"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._2, "ЗаданияОбновить"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._3, "ЗаданияПерейтиВОсновноеМеню"));
		
	ИначеЕсли ИмяСтраницы = "СтраницаЗапросИнформации" Тогда
		
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._0, "ИнформацияЗакрыть"));
		
	ИначеЕсли ИмяСтраницы = "СтраницаСканирование" Тогда
		
		Если ТипЗадания = "ПроверкаОтбора" Тогда
			
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._0, "СканированиеТовар"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._1, "СканированиеНеОтгружать", "НадписьОтложено"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._2, "СканированиеВвестиКоличество", "НадписьВзяли"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._3, "СканированиеДействия"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._4, "СканированиеВвестиЗначение"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._5, "СканированиеСервис"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._6, "СканированиеДалее"));
			
		Иначе
			
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._0, "СканированиеТовар"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._1, "СканированиеВвестиКоличество", "НадписьВзяли"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._2, "СканированиеДействия"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._3, "СканированиеВвестиЗначение"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._4, "СканированиеСервис"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._5, "СканированиеДалее"));
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницы = "СтраницаСообщение" Тогда
		
		// На странице сообщений кнопки формируются динамически и привязываются к разным командам.
		// Чтобы получить список параметров команд, нужно пройти по всем элементам группы.
		
		СчетчикДоступныхКоманд = 0;
		
		Для каждого КнопкаФормы Из Форма.Элементы.ГруппаКомандыДействий.ПодчиненныеЭлементы Цикл
			
			Если СчетчикДоступныхКоманд <= 9 Тогда
				
				ГорячаяКлавиша = Клавиша["_" + СчетчикДоступныхКоманд];
				СчетчикДоступныхКоманд = СчетчикДоступныхКоманд + 1;
				МассивКоманд.Добавить(ПараметрыКоманды(ГорячаяКлавиша, КнопкаФормы.ИмяКоманды, КнопкаФормы.Имя));
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяСтраницы = "СтраницаСервис" Тогда
		
		Если ЭтоНаборТоваров Или ЭтоПересчетТоваров Тогда
			
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._0, "СервисСхемаСканирования"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._1, "СервисПродолжитьСканирование"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._2, "СервисИнформация"));
			
		Иначе
			
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._0, "СервисПродолжитьСканирование"));
			МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._1, "СервисИнформация"));
			
		КонецЕсли;
		
	ИначеЕсли ИмяСтраницы = "СтраницаВыборЗоныПриемкиОтгрузки" Тогда
		
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._0, "ВыбратьЗонуПриемкиРазмещения"));
		МассивКоманд.Добавить(ПараметрыКоманды(Клавиша._1, "ОтменитьВыборЗоныПриемкиРазмещения"));
		
	КонецЕсли;
	
	Возврат МассивКоманд;
	
КонецФункции

// Устанавливает горячую клавишу команды.
//
// Параметры:
//	Форма - УправляемаяФорма - форма рабочего места,
//	ПараметрыКоманды - Структура - параметры команды.
//
Процедура УстановитьГорячуюКлавишуКоманды(Форма, ПараметрыКоманды)
	
	// Установить горячую клавишу команды.
	Команда = Форма.Команды[ПараметрыКоманды.ИмяКоманды];
	Команда.СочетаниеКлавиш = ПараметрыКоманды.СочетаниеКлавиш;
	
	// Установить заголовок связанного элемента, если он существует.
	Элемент = Форма.Элементы.Найти(ПараметрыКоманды.ИмяЭлемента);
	
	Если Не (Элемент = Неопределено) Тогда
		
		// ... в заголовке элемента необходимо заменить только участок горячей клавиши.
		ЗаголовокЭлемента = Элемент.Заголовок;
		ПредставлениеГК = ПредставлениеСочетанияКлавиш(ПараметрыКоманды.СочетаниеКлавиш);
		
		ЗаголовокКоманды = Команда.Заголовок;
		
		Если Не ЗначениеЗаполнено(ЗаголовокЭлемента) И Не ЗначениеЗаполнено(ЗаголовокКоманды) Тогда
			ЗаголовокЭлемента = ПредставлениеГК + ".";
		Иначе
			ЗаголовокЭлемента = ?(ЗначениеЗаполнено(ЗаголовокЭлемента), ЗаголовокЭлемента, ЗаголовокКоманды);
			ЗаголовокЭлемента = ВключитьГорячуюКлавишуВЗаголовокЭлемента(ЗаголовокЭлемента, ПредставлениеГК);
		КонецЕсли;
		
		Элемент.Заголовок = ЗаголовокЭлемента;
	КонецЕсли;
	
КонецПроцедуры

Функция ВключитьГорячуюКлавишуВЗаголовокЭлемента(Знач ЗаголовокЭлемента, ПредставлениеГК)
	
	Если Не ЗначениеЗаполнено(ПредставлениеГК) Тогда
		Возврат ЗаголовокЭлемента;
	КонецЕсли;
	
	// В заголовке элемента, которому назначена горячая клавиша первый символ - цифра, второй - точка.
	ЗаголовокЭлемента = СокрЛП(ЗаголовокЭлемента);
	
	Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(ЗаголовокЭлемента, 1)) 
		И Сред(ЗаголовокЭлемента, 2, 1) = "." Тогда
		
		// Заголовок элемента уже содержит код горячей клавиши.
		ЗаголовокЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1%2",
			ПредставлениеГК + ".",
			Сред(ЗаголовокЭлемента, 3));
		
	Иначе
		
		// Не содержит код горячей клавиши.
		ЗаголовокЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1%2",
			ПредставлениеГК + ".",
			ЗаголовокЭлемента);
		
	КонецЕсли;
	
	Возврат ЗаголовокЭлемента;
	
КонецФункции

// Удаляет все горячие клавиши на странице, т.к. горячая клавиша действует в пределах
// всей формы, даже если страница скрыта.
//
Процедура УдалитьГорячиеКлавишиНаСтранице(Форма, ИмяСтраницы)
	
	ПараметрыКоманд = ПараметрыКомандНаСтраницеФормы(Форма, ИмяСтраницы);
	ПустоеСочетание = Новый СочетаниеКлавиш(Клавиша.Нет);
	
	Для каждого ПараметрыКоманды Из ПараметрыКоманд Цикл
		Форма.Команды[ПараметрыКоманды.ИмяКоманды].СочетаниеКлавиш = ПустоеСочетание;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет все горячие клавиши на всех страницах, т.к. горячая клавиша действует в пределах
// всей формы, даже если страница скрыта.
//
Процедура УдалитьВсеГорячиеКлавиши(Форма)
	
	Элементы = Форма.Элементы;
	
	Для каждого Страница Из Элементы.СтраницыФормы.ПодчиненныеЭлементы Цикл
		
		ИмяСтраницы = Страница.Имя;
		УдалитьГорячиеКлавишиНаСтранице(Форма, ИмяСтраницы);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает горячие клавиши для команд на элементах страницы.
//
Процедура УстановитьГорячиеКлавишиНаСтранице(Форма)
	
	Элементы = Форма.Элементы;
	
	УдалитьВсеГорячиеКлавиши(Форма);
	ТекущаяСтраница = Элементы.СтраницыФормы.ТекущаяСтраница;
	
	// Получить элементы на странице для которых нужно установить горячие клавиши.
	ПараметрыКоманд = ПараметрыКомандНаСтраницеФормы(Форма, ТекущаяСтраница.Имя);
	
	Для каждого ПараметрыКоманды Из ПараметрыКоманд Цикл
		
		УстановитьГорячуюКлавишуКоманды(Форма, ПараметрыКоманды);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьИсториюПереходовПоСтраницам(Форма)
	
	Форма.ПереходыПоСтраницам.Очистить();
	
КонецПроцедуры

// Вызывается при переходе на страницу формы.
//
// Параметры:
//	Форма - УправляемаяФорма - форма рабочего места,
//	ИмяСтраницы - Строка - имя страницы.
//
Процедура ПриПереходеНаСтраницу(Форма, ИмяСтраницы)
	
	ПереходыПоСтраницам = Форма.ПереходыПоСтраницам;
	
	Если ИмяСтраницы = "СтраницаСканирование" Или ИмяСтраницы = "СтраницаВыборОперации" Тогда
		
		ПереходыПоСтраницам.Очистить();
		
	КонецЕсли;
	
	Если ПереходыПоСтраницам.Количество() = 0 Тогда
		
		НоваяСтрока = ПереходыПоСтраницам.Добавить();
		
		НоваяСтрока.ИмяСтраницы = ИмяСтраницы;
		НоваяСтрока.ЗаголовокСтраницы = Форма.Заголовок;
		
	Иначе
		
		Отбор = Новый Структура("ИмяСтраницы", ИмяСтраницы);
		МассивСтрок = ПереходыПоСтраницам.НайтиСтроки(Отбор);
		
		Если МассивСтрок.Количество() = 0 Тогда
			
			НоваяСтрока = ПереходыПоСтраницам.Добавить();
			
			НоваяСтрока.ИмяСтраницы = ИмяСтраницы;
			НоваяСтрока.ЗаголовокСтраницы = Форма.Заголовок;
			
		Иначе
			
			ВГраница = ПереходыПоСтраницам.Количество() - 1;
			
			Для А = 0 По ВГраница Цикл
				
				ОбрИндекс = ВГраница - А;
				
				СтрокаСтраницы = ПереходыПоСтраницам[ОбрИндекс];
				
				Если СтрокаСтраницы.ИмяСтраницы = ИмяСтраницы Тогда
					
					Прервать;
					
				Иначе
					
					ПереходыПоСтраницам.Удалить(ОбрИндекс);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВернутьсяКВыполнениюЗадания(Форма) Экспорт
	
	ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
	УстановитьПараметрыЭлементовСканирования(Форма);
	
КонецПроцедуры

Процедура ВыборЗначенияОКОбработчикОжидания(Форма) Экспорт
	
	Если Не Форма.ВводШтрихкодаОтменен Тогда
		
		ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
		
		Форма.ПараметрыРежима.Режим = "ВводЗначения";
		ПриСканированииЗначения(Форма, Форма.ШтрихкодПараметраСканирования, Форма.СрокГодностиСерии);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура отображает состояние выполнения складского задания. В зависимости от 
// типа выполняемого задания отображается либо прогресс-бар, либо строка - количество
// отсканированных товаров и ячеек.
//
Процедура ВывестиСостояниеВыполненияЗадания(Форма) Экспорт
	
	Элементы              = Форма.Элементы;
	ПараметрыРежима       = Форма.ПараметрыРежима;
	ОтсканированныеТовары = Форма.ОтсканированныеТовары;
	ЯчейкиДляСканирования = Форма.ЯчейкиДляСканирования;
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ОтсканированныеТовары = Форма.ОтсканированныеТовары;
	ЭтоНаборТоваров       = Форма.ПараметрыРежима.НаборТоваров;
	ТипЗадания            = Форма.ПараметрыРежима.ТипЗадания;
	
	ТекстИнформацииОСостоянии = "";
	СостояниеВыполненияЗадания = 0;
	
	Если Элементы.СтраницыФормы.ТекущаяСтраница <> Элементы.СтраницаСканирование Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНаборТоваров Тогда
		
		КоличествоТоваров = ОтсканированныеТовары.Количество();
		
		Если КоличествоТоваров = 0 Тогда
			
			ТекстИнформацииОСостоянии = "";
			
		Иначе
			
			Если КоличествоТоваров = 1 Тогда
				
				СтрокаДобавлен = НСтр("ru = 'Добавлен'");
				
			ИначеЕсли КоличествоТоваров > 1 Тогда
				
				СтрокаДобавлен = НСтр("ru = 'Добавлено'");
				
			КонецЕсли;
			
			СтрокаТовары = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоТоваров, "товар, товара, товаров");
			
			ТекстИнформацииОСостоянии = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2'"), 
				СтрокаДобавлен,
				СтрокаТовары);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		СостояниеВыполненияЗадания = ЯчейкиДляСканирования.Итог("Отсканирована");
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		СостояниеВыполненияЗадания = ОтсканированныеТовары.Итог("КоличествоУпаковокОтсканировано") - ОтсканированныеТовары.Итог("КоличествоУпаковокНеОтгружать");
		
	Иначе
		
		СостояниеВыполненияЗадания = ТоварыДляСканирования.Итог("КоличествоУпаковокОтсканировано");
		
	КонецЕсли;
	
	// Установить нужную страницу отображения состояния.
	Если ЭтоНаборТоваров Тогда
		
		Элементы.СтраницыСостояниеТекстОшибки.ТекущаяСтраница = Элементы.СтраницаСостояниеСтрокой;
		
	Иначе
		
		Элементы.СтраницыСостояниеТекстОшибки.ТекущаяСтраница = Элементы.СтраницаСостояние;
		
	КонецЕсли;
	
	Форма.ТекстИнформацииОСостоянии  = ТекстИнформацииОСостоянии;
	Форма.СостояниеВыполненияЗадания = СостояниеВыполненияЗадания;
	
КонецПроцедуры

// Вызывается при выборе строки списка доступных складских зон - приемки или отгрузки.
//
Процедура ПриВыбореЗоныПриемкиОтгрузки(Форма) Экспорт
	
	Ячейка                   = Форма.Элементы.ЗоныПриемкиОтгрузки.ТекущаяСтрока;
	ПараметрыРежима          = Форма.ПараметрыРежима;
	ВыборЗоныПриемкиОтгрузки = Форма.ПараметрыРежима.ВыборЗоныПриемкиОтгрузки;
	
	Если Ячейка = Неопределено Тогда
		
		ВернутьсяКВыполнениюЗадания(Форма);
		Возврат;
		
	КонецЕсли;
	
	Если ВыборЗоныПриемкиОтгрузки = "ЗонаПриемки" Тогда
		
		ПараметрыРежима.ЗонаПриемки = Ячейка;
		
	ИначеЕсли ВыборЗоныПриемкиОтгрузки = "ЗонаОтгрузки" Тогда
		
		ПараметрыРежима.ЗонаОтгрузки = Ячейка;
		
	КонецЕсли;
	
	ЗавершитьВыполнениеСкладскогоЗадания(Форма);
	
КонецПроцедуры

Процедура СписокЗаданийВыбор(Форма) Экспорт
	
	ПриВыбореЗадания(Форма);
	
КонецПроцедуры

// Вызывается при нажатии кнопки "Количество" на странице "Сканирование".
//
Процедура СканированиеВвестиКоличество(Форма) Экспорт
	
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Если Не (ТекущаяСтрокаСканирования = Неопределено) Тогда
		Форма.ВводКоличестваКоличество = ТекущаяСтрокаСканирования.КоличествоУпаковокОтсканировано;
	КонецЕсли;
	
	Форма.ПараметрыРежима.Режим = "ВводКоличества";
	ПерейтиНаСтраницу(Форма,"СтраницаВводКоличества");
	
КонецПроцедуры

Процедура ВводКоличестваОКОбработчикОжидания(Форма) Экспорт
	
	Если Не Форма.ВводКоличестваОтменен Тогда
		ВводКоличества(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при нажатии кнопки "Отмена" на странице ввода количества.
//
Процедура ВводКоличестваОтмена(Форма) Экспорт
	
	Форма.ВводКоличестваОтменен = Истина;
	Форма.ВводКоличестваКоличество = 0;
	
	ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
	
КонецПроцедуры

// Вызывается при нажатии кнопки "Не отгружать" на странице "Сканирование".
//
Процедура СканированиеНеОтгружать(Форма) Экспорт
	
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	
	Если Не (ТекущаяСтрокаСканирования = Неопределено) Тогда
		Форма.ВводКоличестваКоличество = ТекущаяСтрокаСканирования.КоличествоУпаковокНеОтгружать;
	КонецЕсли;
	
	Форма.ПараметрыРежима.Режим = "ВводКоличестваНеОтгружать";
	
	ПерейтиНаСтраницу(Форма,"СтраницаВводКоличества");
	
КонецПроцедуры

Функция ПредыдущаяСтраница(Форма) Экспорт
	
	Если Форма.ПереходыПоСтраницам.Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Форма.ПереходыПоСтраницам.Количество() = 1 Тогда
		
		ПредыдущаяСтраница = Форма.ПереходыПоСтраницам[0];
		
	Иначе
		
		ПредыдущаяСтраница = Форма.ПереходыПоСтраницам[Форма.ПереходыПоСтраницам.Количество() - 2];
		
	КонецЕсли;
	
	Возврат ПредыдущаяСтраница;
	
КонецФункции

Процедура ПерейтиНаПредыдущуюСтраницу(Форма) Экспорт
	
	ПредыдущаяСтраница = ПредыдущаяСтраница(Форма);
	
	РабочееМестоРаботникаСкладаКлиентСервер.УстановитьЗаголовокФормы(
		Форма,
		ПредыдущаяСтраница.ЗаголовокСтраницы);
	
	ПерейтиНаСтраницу(Форма, ПредыдущаяСтраница.ИмяСтраницы);
	
КонецПроцедуры

Функция ИзменениеСхемыСканированияДоступно(Форма)
	
	ЭтоНаборТоваров      = Форма.ПараметрыРежима.НаборТоваров;
	ЭтоЗаданиеНаПересчет = (Форма.ПараметрыРежима.ТипЗадания = "Пересчет");
	ЭтоПриемка           = (Форма.ПараметрыРежима.ТипЗадания = "Приемка");
	
	Доступность = ЭтоНаборТоваров Или ЭтоЗаданиеНаПересчет Или ЭтоПриемка;
	
	Возврат Доступность;
	
КонецФункции

Процедура СканированиеСервис(Форма) Экспорт
	
	Форма.Элементы.СервисСхемаСканирования.Видимость = ИзменениеСхемыСканированияДоступно(Форма);
	ПерейтиНаСтраницу(Форма,"СтраницаСервис");
	
КонецПроцедуры

Процедура СервисПродолжитьСканирование(Форма) Экспорт
	
	ПерейтиНаСтраницу(Форма,"СтраницаСканирование");
	
КонецПроцедуры

Процедура СервисСхемаСканирования(Форма) Экспорт
	
	ПриИзмененииСхемыСканирования(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииСхемыСканирования(Форма)
	
	ЭтоНаборТоваров           = Форма.ПараметрыРежима.НаборТоваров;
	ТекущаяСтрокаСканирования = Форма.ТекущаяСтрокаСканирования;
	ПараметрСканирования      = Форма.ПараметрыРежима.ПараметрСканирования;
	
	Если Форма.СхемаСканирования = "ТоварВсеСерии" Тогда
		
		Форма.СхемаСканирования = "ТоварСерияТовар";
		
		Если ПараметрСканирования = "Серия" Тогда
			
			ПерейтиКПараметруСканирования(Форма, "Номенклатура");
			УстановитьПараметрыЭлементовСканирования(Форма);
			
		КонецЕсли;
		
	ИначеЕсли Форма.СхемаСканирования = "ТоварСерияТовар" Тогда
		
		Форма.СхемаСканирования = "ТоварВсеСерии";
		
	КонецЕсли;
	
	УстановитьЗаголовокСхемыСканирования(Форма);
	
КонецПроцедуры

Процедура УстановитьЗаголовокСхемыСканирования(Форма) Экспорт
	
	Если Форма.СхемаСканирования = "ТоварВсеСерии" Тогда
		
		Заголовок = НСтр("ru = 'Товар - все серии товара'");
		
	ИначеЕсли Форма.СхемаСканирования = "ТоварСерияТовар" Тогда
		
		Заголовок = НСтр("ru = 'Товар - серия товара - товар'");
		
	КонецЕсли;
	
	Форма.Элементы.НадписьСхемаСканирования.Заголовок = Заголовок;
	
КонецПроцедуры

// Устанавливает текст заголовка списка складских заданий.
//
Процедура УстановитьЗаголовокСпискаЗаданий(Форма, КоличествоДокументов) Экспорт
	
	ВсеЗадания = Форма.Элементы.ЗаданияПоказатьВсе.Пометка;
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	
	ТекстЗаголовкаФормы = "";
	
	Если ТипЗадания = "Отбор" Тогда
		
		ТекстЗаголовкаФормы = ?(ВсеЗадания, 
		ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВсеЗаданияНаОтбор", Форма), 
		ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокМоиЗаданияНаОтбор", Форма));
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		ТекстЗаголовкаФормы = ?(ВсеЗадания, 
		ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВсеЗаданияНаРазмещения", Форма), 
		ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокМоиЗаданияНаРазмещения", Форма));
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		ТекстЗаголовкаФормы = ?(ВсеЗадания, 
		ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВсеЗаданияНаПеремещение", Форма), 
		ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокМоиЗаданияНаПеремещение", Форма));
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		ТекстЗаголовкаФормы = ?(ВсеЗадания, 
		ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВсеЗаданияНаПересчет", Форма), 
		ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокМоиЗаданияНаПересчет", Форма));
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		ТекстЗаголовкаФормы = ?(ВсеЗадания, 
		ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВсеЗаданияНаПриемку", Форма), 
		ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокМоиЗаданияНаПриемку", Форма));
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		ТекстЗаголовкаФормы = ?(ВсеЗадания, 
		ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокВсеЗаданияНаПроверку", Форма), 
		ТекстНадписиЗаголовкаЭлементаФормы("ЗаголовокМоиЗаданияНаПроверку", Форма));
		
	КонецЕсли;
	
	ТекстЗаголовкаФормы = ТекстЗаголовкаФормы + " (" + КоличествоДокументов + ")";
	
	РабочееМестоРаботникаСкладаКлиентСервер.УстановитьЗаголовокФормы(Форма, ТекстЗаголовкаФормы);
	
КонецПроцедуры

Функция ПредставлениеТовара(Номенклатура, Характеристика)
	
	Возврат Строка(Номенклатура) + ?(ЗначениеЗаполнено(Характеристика), ", " + Характеристика, "");
	
КонецФункции

Функция ЭтоПривилегированныйПользователь() Экспорт
	
	ПривилегированныйПользователь = РольДоступна("ПолныеПрава");
	
	Возврат ПривилегированныйПользователь;
	
КонецФункции