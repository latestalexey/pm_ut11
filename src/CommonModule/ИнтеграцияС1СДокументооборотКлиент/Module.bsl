////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборотКлиент: клиент
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

//Открывает форму выбора пользователей в разрезе подразделений и помещает выбранного пользователя в реквизит формы
// Параметры:
//	Реквизит - имя реквизита формы, в который будет помещен выбранный пользователь
//	ФормаВладелец - форма, из которой вызывается форма выбора пользователя
Процедура ВыбратьПользователяИзДереваПодразделений(Реквизит, ФормаВладелец) Экспорт
	
	Результат = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборПользователяСПодразделениями", , ФормаВладелец);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		ФормаВладелец[Реквизит] = Результат.РеквизитПредставление;
		ФормаВладелец[Реквизит + "id"] = Результат.РеквизитID;
		ФормаВладелец[Реквизит + "Тип"] = Результат.РеквизитТип;
		ФормаВладелец.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

//Открывает форму для указания значения дополнительного реквизита
// Параметры:
//	Форма - форма, на которой осуществляется работа с дополнительным реквизитом 
//		и из которой вызывается форма заполнения
//	Элемент - элемент формы, в который будет помещено указанной значение
//	СтандартнаяОбработка - параметр обработки, используемый в обработчике на форме, 
//		из которой вызывается заполнение значения доп. реквизита
Процедура ВыбратьЗначениеДополнительногоРеквизита(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	СписокДоступныхТипов = Элемент.Родитель.ТекущиеДанные.СписокДоступныхТипов;
	
	Если СписокДоступныхТипов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокДоступныхТипов.Количество() > 1 Тогда
		ЗаголовокФормы = НСтр("ru = 'Тип реквизита ""%Свойство%""'");
		ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы,"%Свойство%",Элемент.Родитель.ТекущиеДанные.Свойство);
		ПараметрыФормы = Новый Структура("СписокДоступныхТипов, ЗаголовокФормы", СписокДоступныхТипов, ЗаголовокФормы);
		ИмяТипа = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборОдногоТипаИзСоставногоТипа", ПараметрыФормы, Форма);
		Если ИмяТипа = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ИмяТипа = СписокДоступныхТипов[0].Значение.XDTOClassName;
	КонецЕсли;
	
	Если ИмяТипа = "integer" 
		ИЛИ ИмяТипа = "boolean" 
		ИЛИ ИмяТипа = "string" 
		ИЛИ ИмяТипа = "date" Тогда
		
		Если ИмяТипа = "integer" Тогда
			ТипЗначения = Тип("Число");
		ИначеЕсли ИмяТипа = "boolean" Тогда
			ТипЗначения = Тип("Булево");
		ИначеЕсли ИмяТипа = "string" Тогда
			ТипЗначения = Тип("Строка");
		ИначеЕсли ИмяТипа = "date" Тогда
			ТипЗначения = Тип("Дата");
		КонецЕсли;
		//ввод значения примитивного типа - строка, число и т.п.
		Форма.Модифицированность = ВвестиЗначение(Элемент.Родитель.ТекущиеДанные.Значение, Элемент.Родитель.ТекущиеДанные.Свойство, ТипЗначения);
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		
		Владелец = Новый Структура;
		Владелец.Вставить("id", Элемент.Родитель.ТекущиеДанные.СвойствоID);
		Владелец.Вставить("type", Элемент.Родитель.ТекущиеДанные.СвойствоТип);
		Отбор = Новый Структура;
		Отбор.Вставить("additionalProperty", Владелец);
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("ТипОбъектаВыбора", ИмяТипа);
		
		Результат = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборИзСписка", ПараметрыФормы, Форма);
		Если ТипЗнч(Результат) = Тип("Структура") Тогда 
			Элемент.Родитель.ТекущиеДанные.ЗначениеID = Результат.РеквизитID;
			Элемент.Родитель.ТекущиеДанные.ЗначениеТип = Результат.РеквизитТип;
			Элемент.Родитель.ТекущиеДанные.Значение = Результат.РеквизитПредставление;
			Форма.Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//Очищает ID и Тип при очистке реквизита объекта Документооборота на форме
// Параметры:
//	Реквизит - имя реквизита формы
//	ФормаВладелец - управляемая форма, содержащая очищаемые реквизиты
Процедура ОчиститьСсылочныйРеквизит(Реквизит, ФормаВладелец) Экспорт 
	
	ФормаВладелец[Реквизит + "ID"] = "";
	ФормаВладелец[Реквизит + "Тип"] = "";
	ФормаВладелец.Модифицированность = Истина;
	
КонецПроцедуры

//Заполняет реквизиты формы по выбранному значению
// Параметры:
//	Реквизит - строка с именем реквизита формы
//	ВыбранноеЗначение - структура с выбранным значением
//	СтандартнаяОбработка - признак стандартной обработки выбора
//	ФормаВладелец - форма, содержащая заполняемый реквизит
Процедура ОбработкаВыбораДанныхДляАвтоПодбора(Реквизит, ВыбранноеЗначение, 
	СтандартнаяОбработка, ФормаВладелец, ЭтоТаблица = Ложь, Элемент = Неопределено) Экспорт 
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		Если Не ЭтоТаблица Тогда
			ФормаВладелец[Реквизит] = ВыбранноеЗначение.name;
			ФормаВладелец[Реквизит + "ID"] = ВыбранноеЗначение.id;;
			ФормаВладелец[Реквизит + "Тип"] = ВыбранноеЗначение.type;
		Иначе
			Элемент.Родитель.ТекущиеДанные[Реквизит] = ВыбранноеЗначение.name;
			Элемент.Родитель.ТекущиеДанные[Реквизит + "ID"] = ВыбранноеЗначение.id;
			Элемент.Родитель.ТекущиеДанные[Реквизит + "Тип"] = ВыбранноеЗначение.type;
		КонецЕсли;
		ФормаВладелец.Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если Не ЭтоТаблица Тогда
			ФормаВладелец[Реквизит] = ВыбранноеЗначение;
		Иначе
			Элемент.Родитель.ТекущиеДанные[Реквизит] = ВыбранноеЗначение;
		КонецЕсли;
		ФормаВладелец.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает выбранное значение в элемент списка
// Параметры:
//	ЭлементСписок - элемент управляемой формы
//	ВыбранноеЗначение - структура выбранного значения. 
//	- id - идентификатор объекта
//	- type - тип объекта
//	- name - представление объекта
Процедура ПрименитьВыборЗначенияРеквизитаВСписке(ЭлементСписок, ВыбранноеЗначение, 
	
	СтандартнаяОбработка, ФормаВладелец) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		ЭлементСписок.ТекущиеДанные["Значение"] = ВыбранноеЗначение.Name;
		ЭлементСписок.ТекущиеДанные["ЗначениеID"] = ВыбранноеЗначение.id;
		ЭлементСписок.ТекущиеДанные["ЗначениеТип"] = ВыбранноеЗначение.type;
		ФормаВладелец.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

//Открывает объект Документооборота
// Параметры:
//	ТипОбъекта - тип объекта XDTO Документооборота
//	ID - идентификатор объекта Документооборота
//	ВладелецФормы - произвольное значение, устанавливаемое в качестве владельца формы
//	ДополнительныеПараметры - параметры, передаваемые в открываемый объект
Процедура ОткрытьОбъект(ТипОбъекта, ID, ВладелецФормы = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИсточникФормы = "Обработка.ИнтеграцияС1СДокументооборот.Форма.";
	
	СоответствиеФорм = новый Соответствие;
	
	СоответствиеФорм.Вставить("DMBusinessProcessInternalDocumentProcessing", "БизнесПроцессОбработкаВнутреннегоДокумента");
	СоответствиеФорм.Вставить("DMBusinessProcessIncomingDocumentProcessing", "БизнесПроцессОбработкаВходящегоДокумента");
	СоответствиеФорм.Вставить("DMBusinessProcessOutgoingDocumentProcessing", "БизнесПроцессОбработкаИсходящегоДокумента");
	
	СоответствиеФорм.Вставить("DMBusinessProcessPerformance",	"БизнесПроцессИсполнение");
	СоответствиеФорм.Вставить("DMBusinessProcessAcquaintance",	"БизнесПроцессОзнакомление");
	СоответствиеФорм.Вставить("DMBusinessProcessOrder",			"БизнесПроцессПоручение");
	СоответствиеФорм.Вставить("DMBusinessProcessConsideration",	"БизнесПроцессРассмотрение");
	СоответствиеФорм.Вставить("DMBusinessProcessRegistration",	"БизнесПроцессРегистрация");
	СоответствиеФорм.Вставить("DMBusinessProcessApproval",		"БизнесПроцессСогласование");
	СоответствиеФорм.Вставить("DMBusinessProcessConfirmation",	"БизнесПроцессУтверждение");
	
	СоответствиеФорм.Вставить("DMBusinessProcessTask", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessOrderTaskCheckup", 			"Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessApprovalTaskApproval", 		"Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessApprovalTaskCheckup", 		"Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessConfirmationTaskConfirmation","Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessConfirmationTaskCheckup", 	"Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessConsiderationTaskAcquaint", "Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessPerfomanceTaskCheckup", 	"Задача"); 
	СоответствиеФорм.Вставить("DMBusinessProcessIssuesSolutionTaskQuestion","Задача"); 
	СоответствиеФорм.Вставить("DMBusinessProcessIssuesSolutionTaskAnswer", 	"Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessInvitationTaskInvitation", 	"Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessInvitationTaskAcquaint", 	"Задача");
	СоответствиеФорм.Вставить("DMBusinessProcessInvitationTaskNotify", 		"Задача");
	
	СоответствиеФорм.Вставить("DMInternalDocument", "ВнутреннийДокумент");
	СоответствиеФорм.Вставить("DMIncomingDocument", "ВходящийДокумент");
	СоответствиеФорм.Вставить("DMOutgoingDocument", "ИсходящийДокумент");
	СоответствиеФорм.Вставить("DMFile", "КарточкаФайла"); 
	
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2") Тогда
		СоответствиеФорм.Вставить("DMComplexBusinessProcess", "БизнесПроцессКомплексныйПроцесс");
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		СоответствиеФорм.Вставить("DMBusinessProcessInvitation", 	"БизнесПроцессПриглашение");
		СоответствиеФорм.Вставить("DMBusinessProcessIssuesSolution","БизнесПроцессРешениеВопросов");
		СоответствиеФорм.Вставить("DMIncomingEMail", "ВходящееПисьмо");
		СоответствиеФорм.Вставить("DMOutgoingEMail", "ИсходящееПисьмо");
	КонецЕсли;
	
	ИмяФормы = СоответствиеФорм.Получить(ТипОбъекта);
	
	Если ЗначениеЗаполнено(ИмяФормы) Тогда
		ПараметрыФормы = новый Структура("id, type", ID, ТипОбъекта);
		Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
			Для каждого Элемент из ДополнительныеПараметры Цикл
				ПараметрыФормы.Вставить(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
		КонецЕсли;
		ОткрытьФорму(ИсточникФормы + ИмяФормы, ПараметрыФормы, ВладелецФормы, ID);
	Иначе
		Если ЗначениеЗаполнено(ТипОбъекта) Тогда
			Сообщить(НСтр("ru='Просмотр объектов такого типа не поддерживается в данной версии 1С:Документооборота.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Создает оповещение при записи документов Документооборота
// Параметры:
//	Форма - форма документа Документооборота
Процедура Оповестить_ЗаписьДокумента(Форма) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("name", Форма.Представление);
	ПараметрыОповещения.Вставить("id", Форма.ID);
	ПараметрыОповещения.Вставить("type", Форма.Тип);
	ПараметрыОповещения.Вставить("documentType", Форма.ВидДокумента);
	
	Оповестить("Запись_ДокументооборотДокумент", ПараметрыОповещения, Форма.ВладелецФормы);
	
КонецПроцедуры

//Создает оповещение при записи бизнес-процессов Документооборота
// Параметры:
//	Форма - форма бизнес-процесса Документооборота
Процедура Оповестить_ЗаписьБизнесПроцесса(Форма, Стартован) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("id", Форма.ID);
	ПараметрыОповещения.Вставить("Стартован", Стартован);
	
	Оповестить("Запись_ДокументооборотБизнесПроцесс", ПараметрыОповещения, Форма.ВладелецФормы);

КонецПроцедуры

//Создает оповещение при записи исходящего письма Документооборота
// Параметры:
//	Форма - форма исходящего письма Документооборота
Процедура Оповестить_ЗаписьИсходящегоПисьма(Форма) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("id", Форма.ID);
	ПараметрыОповещения.Вставить("ПредметID", Форма.ПредметID);
	ПараметрыОповещения.Вставить("ПисьмоОснованиеID",Форма.ПисьмоОснованиеID);
	
	Оповестить("Запись_ДокументооборотИсходящееПисьмо", ПараметрыОповещения, Форма.ВладелецФормы);
	
КонецПроцедуры

//Открывает форму выбора значения из списка объектов документооборота и помещает выбранное значение на форме
// Параметры:
//	ТипОбъектаВыбора - имя класса XDTO, соответствующего типу выбираемого объекта
//	Реквизит - имя реквизита формы, в который будет помещено значение, выбранное из документооборота
//	ФормаВладелец - форма, из которой вызывается форма выбора
//	Отбор - условия, накладываемые на список
//Возвращает:
//	Признак успешного выполнения обработки выбора
Функция ВыбратьЗначениеИзСписка(ТипОбъектаВыбора, Реквизит, ФормаВладелец, Отбор = Неопределено) Экспорт 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъектаВыбора", ТипОбъектаВыбора);
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	Заголовок = "Выбор значения";
	
	СоответствиеЗаголовков = новый Соответствие;
	СоответствиеЗаголовков.Вставить("DMFile", 			НСтр("ru = 'Выбор файла'")); 
	СоответствиеЗаголовков.Вставить("DMProject", 		НСтр("ru = 'Выбор проекта'"));
	СоответствиеЗаголовков.Вставить("DMProjectTask", 	НСтр("ru = 'Выбор проектной задачи'"));
	СоответствиеЗаголовков.Вставить("DMFileFolder", 	НСтр("ru = 'Выбор папки файлов'"));
	СоответствиеЗаголовков.Вставить("DMOrganization", 	НСтр("ru = 'Выбор организации'"));
	СоответствиеЗаголовков.Вставить("DMUser", 			НСтр("ru = 'Выбор пользователя'"));
	СоответствиеЗаголовков.Вставить("DMActivityMatter", НСтр("ru = 'Выбор вопроса деятельности'"));
	СоответствиеЗаголовков.Вставить("DMCurrency", 		НСтр("ru = 'Выбор валюты'"));
	СоответствиеЗаголовков.Вставить("DMCorrespondent", 	НСтр("ru = 'Выбор корреспондента'"));
	СоответствиеЗаголовков.Вставить("DMContactPerson", 	НСтр("ru = 'Выбор контактного лица'"));
	СоответствиеЗаголовков.Вставить("DMSubdivision", 	НСтр("ru = 'Выбор подразделения'"));
	СоответствиеЗаголовков.Вставить("DMAccessLevel", 	НСтр("ru = 'Выбор грифа доступа'"));
	СоответствиеЗаголовков.Вставить("DMRelationType", 	НСтр("ru = 'Выбор типа связи'"));
	СоответствиеЗаголовков.Вставить("DMPrivatePerson", 	НСтр("ru = 'Выбор физического лица'"));
	СоответствиеЗаголовков.Вставить("DMDocumentStatus", НСтр("ru = 'Выбор состояния документа'"));
	СоответствиеЗаголовков.Вставить("DMDeliveryMethod", НСтр("ru = 'Выбор способа доставки'"));
	СоответствиеЗаголовков.Вставить("DMInternalDocument", НСтр("ru = 'Выбор внутреннего документа'"));
	СоответствиеЗаголовков.Вставить("DMIncomingDocument", НСтр("ru = 'Выбор входящего документа'"));
	СоответствиеЗаголовков.Вставить("DMOutgoingDocument", НСтр("ru = 'Выбор исходящего документа'"));
	СоответствиеЗаголовков.Вставить("DMIncomingDocumentType", 	НСтр("ru = 'Выбор вида входящего документа'"));
	СоответствиеЗаголовков.Вставить("DMOutgoingDocumentType", 	НСтр("ru = 'Выбор вида исходящего документа'"));
	СоответствиеЗаголовков.Вставить("DMInternalDocumentType", 	НСтр("ru = 'Выбор вида внутреннего документа'"));
	СоответствиеЗаголовков.Вставить("DMInternalDocumentFolder", НСтр("ru = 'Выбор папки внутреннего документа'"));
	СоответствиеЗаголовков.Вставить("DMProlongationProcedure", 	НСтр("ru = 'Выбор способа продления'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessOrderTemplate", 		  НСтр("ru = 'Выбор шаблона поручения'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessConsiderationTemplate", НСтр("ru = 'Выбор шаблона рассмотрения'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessRegistrationTemplate",  НСтр("ru = 'Выбор шаблона регистрации'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessApprovalTemplate", 	  НСтр("ru = 'Выбор шаблона согласования'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessConfirmationTemplate",  НСтр("ru = 'Выбор шаблона утверждения'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessPerformanceTemplate",   НСтр("ru = 'Выбор шаблона исполнения'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessAcquaintanceTemplate",  НСтр("ru = 'Выбор шаблона ознакомления'"));
	СоответствиеЗаголовков.Вставить("DMCompoundBusinessProcessTemplate", 	  НСтр("ru = 'Выбор шаблона составного бизнес-процесса'"));
	СоответствиеЗаголовков.Вставить("DMComplexBusinessProcessTemplate", 	  НСтр("ru = 'Выбор шаблона комплексного бизнес-процесса'"));
	СоответствиеЗаголовков.Вставить("DMBusinessProcessImportance", 			  НСтр("ru = 'Выбор варианта важности'"));
	
	ПараметрыФормы.Вставить("Заголовок", СоответствиеЗаголовков.Получить(ТипОбъектаВыбора));
	ПараметрыФормы.Вставить("ВыбранныйЭлемент", ФормаВладелец[Реквизит + "ID"]);
	
	Если ТипОбъектаВыбора = "DMInternalDocument" И ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		Результат = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборВнутреннегоДокумента", ПараметрыФормы, ФормаВладелец);
	Иначе
		Результат = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборИзСписка", ПараметрыФормы, ФормаВладелец);
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		ФормаВладелец[Реквизит] = Результат.РеквизитПредставление;
		ФормаВладелец[Реквизит + "ID"] = Результат.РеквизитID;
		ФормаВладелец[Реквизит + "Тип"] = Результат.РеквизитТип;
		ФормаВладелец.Модифицированность = Истина;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//Открывает список выбора значения из списка объектов документооборота и помещает выбранное значение на форме
// Параметры:
//	ТипОбъектаВыбора - имя класса XDTO, соответствующего типу выбираемого объекта
//	Реквизит - имя реквизита формы, в который будет помещено значение, выбранное из документооборота
//	ФормаВладелец - форма, из которой вызывается форма выбора
//	Отбор - условия, накладываемые на список
//Возвращает:
//	Признак успешного выполнения обработки выбора
Функция ВыбратьЗначениеИзВыпадающегоСписка(ТипОбъектаВыбора, Реквизит, ФормаВладелец, 
	Отбор = Неопределено, ЭтоТаблица = Ложь, Элемент = Неопределено) Экспорт 
	
	СписокВыбора = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьСписокЗначенийДляВыбора(ТипОбъектаВыбора, Отбор);
	
	Если ЭтоТаблица Тогда
		ТекущееЗначение = Элемент.Родитель.ТекущиеДанные[Реквизит+"ID"];
	Иначе
		ТекущееЗначение = ФормаВладелец[Реквизит+"ID"];
	КонецЕсли;
	
	НачальноеЗначение = Неопределено;
	Для каждого ЭлементСписка из СписокВыбора Цикл
		Если ЭлементСписка.Значение.РеквизитID = ТекущееЗначение Тогда
			НачальноеЗначение = ЭлементСписка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НачальноеЗначение = Неопределено Тогда
		Результат = ФормаВладелец.ВыбратьИзСписка(СписокВыбора, ?(ЭтоТаблица,Элемент,ФормаВладелец[Реквизит]));
	Иначе
		Результат = ФормаВладелец.ВыбратьИзСписка(СписокВыбора, ?(ЭтоТаблица,Элемент,ФормаВладелец[Реквизит]), НачальноеЗначение);
	КонецЕсли;

	Если Результат <> Неопределено Тогда
		Если ТипЗнч(Результат.Значение) = Тип("Структура") Тогда
			Если ТипОбъектаВыбора = "DMBusinessProcessImportance" Тогда
				Представление = СтрЗаменить(Результат.Значение.РеквизитПредставление," важность","");
			Иначе
				Представление = Результат.Значение.РеквизитПредставление;
			КонецЕсли;
			Если Не ЭтоТаблица Тогда
				ФормаВладелец[Реквизит] = Представление;
				ФормаВладелец[Реквизит + "ID"] 	= Результат.Значение.РеквизитID;
				ФормаВладелец[Реквизит + "Тип"] = Результат.Значение.РеквизитТип;
			Иначе
				Элемент.Родитель.ТекущиеДанные[Реквизит] = Представление;
				Элемент.Родитель.ТекущиеДанные[Реквизит + "ID"] = Результат.Значение.РеквизитID;
				Элемент.Родитель.ТекущиеДанные[Реквизит + "Тип"] = Результат.Значение.РеквизитТип;
			КонецЕсли;
			ФормаВладелец.Модифицированность = Истина;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////
// Работа с файлами

//Открывать файл для просмотра
// Параметры:
//	ИдентификаторФайла - идентификатор файла Документооборота
//	Расширение - расширение файла
//	Имя - имя файла
//	Размер - размер файла в байтах
//	ДатаМодификацииУниверсальная - дата модификации файла универсальная
//	КаталогДляСохраненияДанных - каталог для сохранения файлов при использовании веб-клиента
//	УникальныйИдентификаторФормы - уникальный идентификатор управляемой формы
Процедура ОткрытьФайл(ИдентификаторФайла, Расширение, Имя, Размер, 
	ДатаМодификацииУниверсальная, КаталогДляСохраненияДанных, УникальныйИдентификаторФормы) Экспорт
	
	АдресВременногоХранилища = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьАдресФайла(
		ИдентификаторФайла, УникальныйИдентификаторФормы);
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если НЕ РасширениеПодключено Тогда
		
		ИмяФайла = ПолучитьИмяСРасширением(Имя, Расширение);
		ПолучитьФайл(АдресВременногоХранилища, ИмяФайла, Истина);
		
	Иначе
		ИмяВременногоФайла = "";
		#Если НЕ ВебКлиент Тогда
			РазделительПути = ИнтеграцияС1СДокументооборотКлиентПереопределяемый.РазделительПути(ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла() + РазделительПути + Имя + "." + НРег(Расширение);
		#Иначе
			Если ПустаяСтрока(КаталогДляСохраненияДанных) Тогда
				Предупреждение(НСтр("ru='Выберите рабочий каталог для интеграции.'"));
				Возврат;
			КонецЕсли;
			
			ИмяВременногоФайла = КаталогДляСохраненияДанных;
			ИмяВременногоФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременногоФайла, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
			
			// ТекущаяДата() используется только для генерации случайного числа (т.к. ГенераторСлучайныхЧисел  не доступен на веб клиенте)
			//  поэтому приведение к ТекущаяДатаСеанса не нужно
			СлучайноеИмяФайла = Имя + " (" +  Секунда(ТекущаяДата()) + ")";
			
			ИмяВременногоФайла = ИмяВременногоФайла + СлучайноеИмяФайла + "." + Расширение;
			
		#КонецЕсли	
		
		ПередаваемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ИмяВременногоФайла, АдресВременногоХранилища);
		ПередаваемыеФайлы.Добавить(Описание);
		
		Файл = Новый Файл(ИмяВременногоФайла);
		ПутьКФайлу = Файл.Путь;
		ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
		
		ИмяФайла = ПолучитьИмяСРасширением(Имя, Расширение);
		РазмерВМб = Размер / 1048576; // 1 Мбайт = 1048576 байт
		
		ТекстПояснения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		    НСтр("ru = 'Выполняется передача файла ""%1"" (%2 Мб)...
				|Пожалуйста, подождите.'"),
		    ИмяФайла, 
			ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
		
		Состояние(ТекстПояснения);
		
		// Сохраним Файл из БД на диск
		Если ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
			
			Состояние();
			
			ДатаСоздаваемогоФайлаНаДиске = ДатаМодификацииУниверсальная;
			ДатаСоздаваемогоФайлаНаДиске = МестноеВремя(ДатаСоздаваемогоФайлаНаДиске);
			Файл.УстановитьВремяИзменения(ДатаСоздаваемогоФайлаНаДиске);
			
			ОткрытьФайлПриложением(ИмяВременногоФайла);
		Иначе
			Состояние();
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(АдресВременногоХранилища);
	
КонецПроцедуры

//Открывать файл для просмотра с использованием приложения системы
// Параметры:
//	ИмяОткрываемогоФайла - имя файла, который будет открыт приложением системы
Процедура ОткрытьФайлПриложением(ИмяОткрываемогоФайла)
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		// Открыть Файл
		Попытка
			
			ЗапуститьПриложение(ИмяОткрываемогоФайла);
			
		Исключение
			
			Инфо = ИнформацияОбОшибке();
			Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Описание=""%1""'"), Инфо.Описание));
			
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

//Получает имя с расширением- если расширение пусто - только имя
// Параметры:
//	ПолноеНаименование - полное наименование файла
//	Расширение - расширение файла
//Возвращает: 
//	Имя с расширением- если расширение пусто - только имя
Функция ПолучитьИмяСРасширением(ПолноеНаименование, Расширение) Экспорт
	
	ИмяСРасширением = ПолноеНаименование;
	
	Если Расширение <> "" Тогда
		ИмяСРасширением = ИмяСРасширением + "." + Расширение;
	КонецЕсли;
	
	Возврат ИмяСРасширением;
	
КонецФункции

//Выполняет сохранение файла на диск
// Параметры:
//	ИдентификаторФайла - идентификатор файла Документооборота
//	Расширение - расширение файла
//	Имя - имя файла
//	Размер - размер файла в байтах
//	ДатаМодификацииУниверсальная - дата модификации файла универсальная
//	УникальныйИдентификаторФормы - уникальный идентификатор управляемой формы
Функция СохранитьКак(ИдентификаторФайла, Расширение, Имя, Размер, 
	ДатаМодификацииУниверсальная, УникальныйИдентификаторФормы) Экспорт
	
	АдресВременногоХранилища = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьАдресФайла(ИдентификаторФайла, УникальныйИдентификаторФормы);
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда

		ПутьВыбора = "";
		#Если НЕ ВебКлиент Тогда
        ЭтоБазоваяВерсияКонфигурации = Ложь;
		СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().Свойство("ЭтоБазоваяВерсияКонфигурации", ЭтоБазоваяВерсияКонфигурации);
		Если ЭтоБазоваяВерсияКонфигурации = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данная операция не поддерживается в базовой версии.'"));
			Возврат "";
		КонецЕсли;
		
		Оболочка = Новый COMОбъект("MSScriptControl.ScriptControl");
		Оболочка.Language = "vbscript";
		Оболочка.AddCode("
			|Function SpecialFoldersName(Name)
			|set Shell=CreateObject(""WScript.Shell"")
			|SpecialFoldersName=Shell.SpecialFolders(Name)
			|End Function");
		ПутьВыбора = Оболочка.Run("SpecialFoldersName", "MyDocuments");
		#КонецЕсли	
		
		ИмяСРасширением = ПолучитьИмяСРасширением(Имя, Расширение);
		
		// выбираем путь к файлу на диске
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ИмяСРасширением;
		Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все файлы (*.%1)|*.%1'"), Расширение, Расширение);
		ВыборФайла.Фильтр = Фильтр;
		ВыборФайла.Каталог = ПутьВыбора;
		
		Если ВыборФайла.Выбрать() Тогда
			
			АдресФайла = АдресВременногоХранилища;
			
			ИмяФайла = ИмяСРасширением;
			РазмерВМб = Размер / (1024 * 1024);
			
			ТекстПояснения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
					|Пожалуйста, подождите.'"),
				ИмяФайла, 
				ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
				
			Состояние(ТекстПояснения);
			
			Файл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Файл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
			
			ПередаваемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, АдресФайла);
			ПередаваемыеФайлы.Добавить(Описание);
			
			ПутьКФайлу = Файл.Путь;
			ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
			
			// Сохраним Файл из БД на диск
			Если ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
				
				// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
				Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
					УдалитьИзВременногоХранилища(АдресФайла);
				КонецЕсли;
				
				НовыйФайл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
				
				ДатаСоздаваемогоФайлаНаДиске = ДатаМодификацииУниверсальная;
				ДатаСоздаваемогоФайлаНаДиске = МестноеВремя(ДатаСоздаваемогоФайлаНаДиске);
				
				НовыйФайл.УстановитьВремяИзменения(ДатаСоздаваемогоФайлаНаДиске);

				Состояние(НСтр("ru = 'Файл успешно сохранен'"), , ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
			
			Возврат ВыборФайла.ПолноеИмяФайла;
		КонецЕсли;
		
	Иначе  // веб клиент
		АдресФайла = АдресВременногоХранилища;
		
		ИмяФайла = ИмяСРасширением;
		РазмерВМб = Размер / (1024 * 1024);
		
		ТекстПояснения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
				|Пожалуйста, подождите.'"),
			ИмяФайла, 
			ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
			
		Состояние(ТекстПояснения);
		
		// Сохраним Файл из БД на диск
		ПолучитьФайл(АдресФайла, ИмяФайла, Истина);
			
		// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
		Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
			УдалитьИзВременногоХранилища(АдресФайла);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
КонецФункции

//Обновляет файл из файла на диске
// Параметры:
//	ИдентификаторФайла - идентификатор объекта Документооборота
//	УникальныйИдентификатор - уникальный идентификатор управляемой формы объекта
Функция ОбновитьИзФайлаНаДиске(ИдентификаторФайла, УникальныйИдентификатор) Экспорт
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	ИдентификаторСозданногоФайла = Неопределено;
	
	Если РасширениеПодключено Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
		
		Результат = ВыборФайла.Выбрать();
		ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
	
		Если НЕ Результат Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ОбновитьИзФайлаНаДискеТонкийКлиент(ПолноеИмяФайла, ИдентификаторФайла, УникальныйИдентификатор);
		
	Иначе
		
		// Если веб-клиент без расширения
		

		ВремяИзменения = '00000000'; // Т.к. не можем получить дату модификации файла на диске
		ВремяИзмененияУниверсальное = '00000000';
		Размер = 0; // Т.к. не можем получить размер файла на диске
		ИмяБезРасширения = "";
		Расширение = "";
		Текст = "";

		// Поместим Файл в ВременноеХранилище
		АдресВременногоХранилищаФайла = "";
		ИмяФайла = "";
		Если НЕ ПоместитьФайл(АдресВременногоХранилищаФайла, ИмяФайла, ИмяФайла, Истина, УникальныйИдентификатор) Тогда
			Возврат Ложь;
		КонецЕсли;

		СтрокиПути = ИнтеграцияС1СДокументооборотКлиентПереопределяемый.РазложитьСтрокуПоТочкамИСлэшам(ИмяФайла);
		Если СтрокиПути.Количество() >= 2 Тогда
			Расширение = СтрокиПути[СтрокиПути.Количество()-1];
			ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество()-2];
		Иначе
			ВызватьИсключение
			  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"),ИмяФайла);
		КонецЕсли;
		
		ПараметрыСоздания = Новый Структура;
		ПараметрыСоздания.Вставить("Имя", ИмяБезРасширения);
		ПараметрыСоздания.Вставить("Расширение", Расширение);
		ПараметрыСоздания.Вставить("Размер", Размер);
		ПараметрыСоздания.Вставить("ВремяИзменения", ВремяИзменения);
		ПараметрыСоздания.Вставить("ВремяИзмененияУниверсальное", ВремяИзмененияУниверсальное);
		ПараметрыСоздания.Вставить("АдресВременногоХранилищаФайла", АдресВременногоХранилищаФайла);
		ПараметрыСоздания.Вставить("Текст", "");
		ПараметрыСоздания.Вставить("ВебКлиент", Истина);
		ПараметрыСоздания.Вставить("ИдентификаторФайла", ИдентификаторФайла);
		
		ТекстПояснения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идет сохранение файла ""%1"".
			|Пожалуйста, подождите...'"),
			ИмяФайла);
		
		Состояние(ТекстПояснения);
		
		ИдентификаторСозданногоФайла = ИнтеграцияС1СДокументооборотВызовСервера.ОбновитьИзФайлаНаДиске(ПараметрыСоздания);
		Состояние();
		
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Событие", "ЗаписьФайла");
	Оповестить("Запись_ДокументооборотФайл", ПараметрыОповещения, ИдентификаторФайла);
	
	Возврат Истина;
	
КонецФункции

//Обновляет файл из файла на диске - реализация для тонкого клиента
// Параметры:
//	ПолноеИмяФайла - полное имя файла
//	ИдентификаторФайла - идентификатор объекта Документооборота
//	УникальныйИдентификатор - уникальный идентификатор управляемой формы объекта
Функция ОбновитьИзФайлаНаДискеТонкийКлиент(ПолноеИмяФайла, ИдентификаторФайла, УникальныйИдентификатор) Экспорт
	
	НастройкиДокументооборот = ИнтеграцияС1СДокументооборотКлиентПовтИсп.ПолучитьНастройки();
	НужноИзвлечьТекст = НастройкиДокументооборот.НужноИзвлечьТекст;
		
	Файл = Новый Файл(ПолноеИмяФайла);
	
	ИмяФайла = Файл.ИмяБезРасширения + Файл.Расширение;
	РазмерВМб = Файл.Размер() / (1024 * 1024);
	
	ТекстПояснения =
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Идет сохранение файла ""%1"" (%2 Мб).
		|Пожалуйста, подождите...'"),
		ИмяФайла,
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	
	Состояние(ТекстПояснения);
	
	// Поместим Файл в ВременноеХранилище
	АдресВременногоХранилищаФайла = "";
	
	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
	ПомещаемыеФайлы.Добавить(Описание);
	
	ПомещенныеФайлы = Новый Массив;

	Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, УникальныйИдентификатор) Тогда
		ВызватьИсключение
		  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"), Файл.ПолноеИмя);
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 1 Тогда
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("Имя", Файл.ИмяБезРасширения);
	ПараметрыСоздания.Вставить("Размер", Файл.Размер());
	ПараметрыСоздания.Вставить("Расширение", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение));
	ПараметрыСоздания.Вставить("ВремяИзменения", Файл.ПолучитьВремяИзменения());
	ПараметрыСоздания.Вставить("ВремяИзмененияУниверсальное", Файл.ПолучитьУниверсальноеВремяИзменения());
	ПараметрыСоздания.Вставить("АдресВременногоХранилищаФайла", АдресВременногоХранилищаФайла);
	ПараметрыСоздания.Вставить("Текст", "");
	ПараметрыСоздания.Вставить("ВебКлиент", Ложь);
	ПараметрыСоздания.Вставить("ИдентификаторФайла", ИдентификаторФайла);
	
	Текст = "";
	
	Если НужноИзвлечьТекст Тогда
		Текст = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекст(Файл.ПолноеИмя);
	КонецЕсли;
	
	ПараметрыСоздания.Текст = Текст;
	
	ИнтеграцияС1СДокументооборотВызовСервера.ОбновитьИзФайлаНаДиске(ПараметрыСоздания);
	
	Состояние();
	
	Возврат Истина;
	
КонецФункции

//Создать Файл из файла на диске
// Параметры:
//	ПолноеИмяФайла - полное имя файла
//	УникальныйИдентификатор - уникальный идентификатор управляемой формы объекта
//	ID - идентификатор владельца файла в Документообороте
//	Тип - тип XDTO владельца файла в Документообоороте
//	Представление - представление владельца файла
Функция СоздатьИзФайлаНаДискеКлиент(ПолноеИмяФайла, УникальныйИдентификатор, ID, Тип, Представление) Экспорт
	
	ИдентификаторСозданногоФайла = Неопределено;
	
	НастройкиДокументооборот = ИнтеграцияС1СДокументооборотКлиентПовтИсп.ПолучитьНастройки();
	НужноИзвлечьТекст = НастройкиДокументооборот.НужноИзвлечьТекст;
		
	Файл = Новый Файл(ПолноеИмяФайла);
	
	ИмяФайла = Файл.ИмяБезРасширения + Файл.Расширение;
	РазмерВМб = Файл.Размер() / (1024 * 1024);
	
	МаксРазмерФайла = ИнтеграцияС1СДокументооборотКлиентПовтИсп.ПолучитьМаксимальныйРазмерПередаваемогоФайла();
	РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
	
	Если Файл.Размер() > МаксРазмерФайла Тогда
		
		ВызватьИсключение
			   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла для передачи (%3 Мб).'"),
				 Файл.Имя, 
				 ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),           
				 ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
	КонецЕсли;
	
	ТекстПояснения =
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Идет сохранение файла ""%1"" (%2 Мб).
		|Пожалуйста, подождите...'"),
		ИмяФайла,
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	
	Состояние(ТекстПояснения);
	
	// Поместим Файл в ВременноеХранилище
	АдресВременногоХранилищаФайла = "";
	
	ПомещаемыеФайлы = Новый Массив;
	ОписаниеПередаваемогоФайла = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
	ПомещаемыеФайлы.Добавить(ОписаниеПередаваемогоФайла);
	
	ПомещенныеФайлы = Новый Массив;

	Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, УникальныйИдентификатор) Тогда
		ВызватьИсключение
		  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"), Файл.ПолноеИмя);
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 1 Тогда
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;
	
	Текст = "";
	
	Если НужноИзвлечьТекст Тогда
		Текст = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекст(Файл.ПолноеИмя);
	КонецЕсли;
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("Имя", Файл.ИмяБезРасширения);
	ПараметрыСоздания.Вставить("Расширение", ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение));
	ПараметрыСоздания.Вставить("Размер", Файл.Размер());
	ПараметрыСоздания.Вставить("ВремяИзменения", Файл.ПолучитьВремяИзменения());
	ПараметрыСоздания.Вставить("ВремяИзмененияУниверсальное", Файл.ПолучитьУниверсальноеВремяИзменения());
	ПараметрыСоздания.Вставить("АдресВременногоХранилищаФайла", АдресВременногоХранилищаФайла);
	ПараметрыСоздания.Вставить("Текст", Текст);
	ПараметрыСоздания.Вставить("ВебКлиент", Ложь);
	
	ИдентификаторСозданногоФайла = ИнтеграцияС1СДокументооборотВызовСервера.СоздатьИзФайлаНаДискеСервер(ПараметрыСоздания, id, Тип, Представление);
	
	Состояние();
	
	Возврат ИдентификаторСозданногоФайла;
	
КонецФункции

////////////////////////////////////////
// Работа с электронными подписями

//Подписывает файл в Документообороте
// Параметры:
//	ИдентификаторФайла - идентификатор объекта Документооборота
//	ИмяФайла - имя файла
//	Редактируется - признак редактирования файла
//	Зашифрован - признак шифрования файла
//	ОписаниеФайла - описание файла
//	МассивСуществующихПодписейФайла - массив структур существующих подписей
Процедура ПодписатьФайл(ИдентификаторФайла, ИмяФайла, Редактируется, Зашифрован, ОписаниеФайла, МассивСуществующихПодписейФайла) Экспорт
	
	Если Редактируется Тогда
		Предупреждение(ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла());
		Возврат;
	КонецЕсли;
	
	Если Зашифрован Тогда
		Предупреждение(ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла());
		Возврат;
	КонецЕсли;
	
	ТолькоЛичные = Истина;
	МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(ТолькоЛичные);
	ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов, ОбъектСсылка", МассивСтруктурСертификатов, ИмяФайла);
	
	СтруктураПараметровПодписи = ОткрытьФормуМодально("ОбщаяФорма.УстановкаПодписиЭЦП", ПараметрыФормы);
	
	Если ТипЗнч(СтруктураПараметровПодписи) = Тип("Структура") Тогда
		
		ДвоичныеДанные = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДвоичныеДанныеФайла(ИдентификаторФайла);
		
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровПодписи.Пароль;
		
		ДанныеПодписи = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьДанныеПодписи(
			МенеджерКриптографии, ИдентификаторФайла, ДвоичныеДанные, СтруктураПараметровПодписи);
		ДанныеПодписи.Вставить("ОбъектТип", "DMFile");
			
		МассивДанныхПодписей = Новый Массив;
		МассивДанныхПодписей.Добавить(ДанныеПодписи);
		
		ИнтеграцияС1СДокументооборотВызовСервера.ЗанестиИнформациюОПодписяхОбъекта(
			ИдентификаторФайла, ИмяФайла, ОписаниеФайла, "DMFile", МассивДанныхПодписей, МассивСуществующихПодписейФайла);
		
		ИнформироватьОПодписанииОбъекта(ИмяФайла, ИдентификаторФайла);
			
	КонецЕсли;
	
КонецПроцедуры

//По окончании подписания создает оповещение о подписании файла
// Параметры:
//	ИмяФайла - имя файла для вывода в сообщение
//	ИдентификаторФайла - идентификатор файла Документооборота
Процедура ИнформироватьОПодписанииОбъекта(ИмяФайла, ИдентификаторФайла) Экспорт
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Событие", "ЗаписьФайла");
	Оповестить("Запись_ДокументооборотФайл", ПараметрыОповещения, ИдентификаторФайла);
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Установлена подпись для ""%1""'"), ИмяФайла);
	Состояние(ТекстСообщения);
	
КонецПроцедуры

//Сохранение на диск Файла вместе с подписью
// Параметры:
//	ИдентификаторФайла - идентификатор файла Документооборота
//	Расширение - расширение файла
//	Имя - имя файла
//	Размер - размер файла в байтах
//	ДатаМодификацииУниверсальная - дата модификации файла универсальная
//	УникальныйИдентификатор - уникальный идентификатор управляемой формы объекта
//	Подписи - массив структур существующих подписей файла
Процедура СохранитьВместеСЭЦП(ИдентификаторФайла, Расширение, Имя, Размер, ДатаМодификацииУниверсальная, 
	УникальныйИдентификатор, Подписи = Неопределено) Экспорт
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		
		ПолноеИмяФайла = СохранитьКак(ИдентификаторФайла, Расширение, Имя, Размер, ДатаМодификацииУниверсальная, УникальныйИдентификатор);
		
		Если ПолноеИмяФайла = "" Тогда
			Возврат; // пользователь нажал Отмена или это веб клиент без расширения
		КонецЕсли;
		
		Настройка = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ДействияПриСохраненииСЭЦП;
		МассивСтруктурПодписей = Неопределено;
		
		Если Подписи = Неопределено Тогда
			ОписаниеФайла = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьКарточкуФайла(ИдентификаторФайла);
			Подписи = ОписаниеФайла.Подписи;
		КонецЕсли;
		
		Если Настройка = "Спрашивать" Тогда
			
			ПараметрыФормы = Новый Структура("УникальныйИдентификатор, Подписи", 
				УникальныйИдентификатор, Подписи);
			МассивСтруктурПодписей = ОткрытьФормуМодально("ОбщаяФорма.ВыборПодписей", ПараметрыФормы);
			
		ИначеЕсли Настройка = "СохранятьВсеПодписи" Тогда
			
			МассивСтруктурПодписей = Новый Массив;
			
			Для Каждого Строка Из Подписи Цикл
				
				АдресПодписи = ПоместитьВоВременноеХранилище(Строка.Подпись, УникальныйИдентификатор);
				
				СтруктураВозврата = Новый Структура;
				СтруктураВозврата.Вставить("АдресПодписи", АдресПодписи); 
				СтруктураВозврата.Вставить("КомуВыданСертификат", Строка.КомуВыданСертификат);
				СтруктураВозврата.Вставить("ИмяФайлаПодписи", Строка.ИмяФайлаПодписи);
				
				МассивСтруктурПодписей.Добавить(СтруктураВозврата);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
			ЭлектроннаяЦифроваяПодписьКлиент.СохранитьПодписи(Имя, ПолноеИмяФайла, Неопределено, МассивСтруктурПодписей);
		КонецЕсли;
	
	Иначе
		Предупреждение(НСтр("ru = 'Для выполнения данной операции нужно установить расширение работы с файлами.'"));
	КонецЕсли;
	
КонецПроцедуры

//Проверяет все выделенные подписи
// Параметры:
//	ВыделенныеСтроки - массив идентификаторов выделенных строк таблицы подписей 
//	ТаблицаПодписей - реквизит таблицы подписей формы документа
//	АдресСлепкаДокумента - адрес временного хранилища двоичных данных документа Документооборота
Процедура ПроверитьПодписи(ВыделенныеСтроки, ТаблицаПодписей, УникальныйИдентификатор, АдресСлепкаДокумента) Экспорт
	
	МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
	СоответствиеИдОбъектаИДвоичныхДанных = Новый Соответствие;

	Для Каждого Элемент Из ВыделенныеСтроки Цикл
		ДанныеСтроки = ТаблицаПодписей.НайтиПоИдентификатору(Элемент);
		Если ЗначениеЗаполнено(ДанныеСтроки.Объект) Тогда
			ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, УникальныйИдентификатор, 
				СоответствиеИдОбъектаИДвоичныхДанных, АдресСлепкаДокумента);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Проверяет одну электронно-цифровую подпись 
//Параметры:
//	ДанныеСтроки - строка таблицы файлов или структура, содержащая идентификатор обеъекта в свойстве ОбъектИД
//	МенеджерКриптографии - объект Менеджера криптографии
//	УникальныйИдентификатор - идентификатор управляемой формы объекта Документооборота
//	СоответствиеИдОбъектаИДвоичныхДанных - соответствие идентификторов объектов и их двоичных данных 
//	АдресСлепкаДокумента - адрес временного хранения двоичных данных файла
Процедура ПроверитьОднуПодпись(ДанныеСтроки, МенеджерКриптографии, УникальныйИдентификатор, 
	СоответствиеИдОбъектаИДвоичныхДанных, АдресСлепкаДокумента) Экспорт
	
	АдресПодписи = ДанныеСтроки.АдресПодписи;
	ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
	
	ДвоичныеДанныеФайла = СоответствиеИдОбъектаИДвоичныхДанных[ДанныеСтроки.ОбъектИд];
	
	Если ДвоичныеДанныеФайла = Неопределено Тогда
		
		Если ДанныеСтроки.ОбъектТип = "DMFile" Тогда
			ДвоичныеДанныеФайла = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДвоичныеДанныеФайла(ДанныеСтроки.ОбъектИд);
		Иначе	
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресСлепкаДокумента);
		КонецЕсли;
		
		СоответствиеИдОбъектаИДвоичныхДанных[ДанныеСтроки.ОбъектИд] = ДвоичныеДанныеФайла;
	КонецЕсли;
	
	Попытка
		Сертификат = Неопределено;
		МенеджерКриптографии.ПроверитьПодпись(ДвоичныеДанныеФайла, ДвоичныеДанныеПодписи, Сертификат);
		
		МассивРежимовПроверки = Новый Массив;
		МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.ИгнорироватьВремяДействия);
		МассивРежимовПроверки.Добавить(РежимПроверкиСертификатаКриптографии.РазрешитьТестовыеСертификаты);
		МенеджерКриптографии.ПроверитьСертификат(Сертификат, МассивРежимовПроверки);
		
		ДанныеСтроки.Статус = НСтр("ru = 'Верна'");
		ДанныеСтроки.Неверна = Ложь;
	Исключение
		ДанныеСтроки.Статус = НСтр("ru = 'Неверна. '");
		Инфо = ИнформацияОбОшибке();
		Если Инфо.Причина <> Неопределено Тогда
			ДанныеСтроки.Статус = ДанныеСтроки.Статус + Инфо.Причина.Описание;
		КонецЕсли;
		ДанныеСтроки.Неверна = Истина;
	КонецПопытки;
	
КонецПроцедуры

//По окончании подписания отображает состояние установки подписи объекту
//Параметры:
//	Представление - представление подписанного объекта для информаирования пользователя о подписании
Процедура ИнформироватьОПодписании(Представление) Экспорт
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Установлена подпись для ""%1""'"),
		Представление);
	Состояние(ТекстСообщения);
	
КонецПроцедуры

//Добавляет подпись из файла
// Параметры:
//	ИмяФайла - имя файла для вывода в сообщение
//	ИдентификаторФайла - идентификатор файла Документооборота
//	УникальныйИдентификатор - уникальный идентификатор управляемой формы объекта
//	ОписаниеФайла - описание файла
//	МассивСуществующихПодписейФайла - массив структур существующих подписей
Функция ДобавитьЭЦПИзФайла(ИдентификаторФайла, ИмяФайла, УникальныйИдентификатор,
	ОписаниеФайла, МассивСуществующихПодписейФайла) Экспорт
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
	
		МассивФайловПодписей = ОткрытьФормуМодально("ОбщаяФорма.ДобавлениеПодписиИзФайла");
		
		Если ТипЗнч(МассивФайловПодписей) <> Тип("Массив") ИЛИ МассивФайловПодписей.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МассивДанныхДляЗанесенияВБазу = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьПодписиДляЗанесениюВБазу(ИдентификаторФайла, МассивФайловПодписей, УникальныйИдентификатор);
		
		Если МассивДанныхДляЗанесенияВБазу.Количество() > 0 Тогда
			
			Для Каждого ДанныеПодписи Из МассивДанныхДляЗанесенияВБазу Цикл
				ДанныеПодписи.Вставить("ОбъектТип", "DMFile");
			КонецЦикла;
			
			ИнтеграцияС1СДокументооборотВызовСервера.ЗанестиИнформациюОПодписяхОбъекта(
				ИдентификаторФайла, ИмяФайла, ОписаниеФайла, "DMFile", 
				МассивДанныхДляЗанесенияВБазу, МассивСуществующихПодписейФайла);
			
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Событие", "ЗаписьФайла");
			Оповестить("Запись_ДокументооборотФайл", ПараметрыОповещения, ИдентификаторФайла);
			
			Если МассивДанныхДляЗанесенияВБазу.Количество() = 1 Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Добавлена подпись из файла для ""%1""'"),
					ИмяФайла);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Добавлены подписи из файлов для ""%1""'"),
					ИмяФайла);
			КонецЕсли;
			
			Состояние(ТекстСообщения);
			
		КонецЕсли;
		
		Возврат Истина;
		
	Иначе
		Предупреждение(НСтр("ru = 'Для выполнения данной операции нужно установить расширение работы с файлами.'"));
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Преобразует 2-уровневое дерево в массив
//Параметры:
//	ТаблицаПодписей - дерево значений формы, содержащая список подписей
Функция ПолучитьМассивДанныхПодписей(ТаблицаПодписейПереданная) Экспорт
	
	ДанныеСтрок = Новый Массив;
	
	ЭлементыПервогоУровня = ТаблицаПодписейПереданная.ПолучитьЭлементы();
	
	Для Каждого СтрокаУровняОдин Из ЭлементыПервогоУровня Цикл
		ЭлементыВторогоУровня = СтрокаУровняОдин.ПолучитьЭлементы();
		
		Для Каждого Строка Из ЭлементыВторогоУровня Цикл
			ДанныеСтрок.Добавить(Строка.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДанныеСтрок;
	
КонецФункции

//Формирует подпись для объекта Документооборот и всех его вложенных файлов
//Параметры:
//	Форма - управляемая форма документа Документооборота
//	МассивДанныхДляЗанесенияВБазу - массив для записи структур подписей
//	МассивАдресов - массив адресов временных хранилищ двоичных данных адресов файлов
//Возвращает:
//	Успешность формирования подписей для документа Документооборота
Функция СформироватьПодписьОбъекта(Форма, МассивДанныхДляЗанесенияВБазу, МассивАдресов) Экспорт
	
	ТолькоЛичные = Истина; 

	МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(ТолькоЛичные);
	ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов, ОбъектСсылка", МассивСтруктурСертификатов, Форма.Представление);
	
	СтруктураПараметровПодписи = ОткрытьФормуМодально("ОбщаяФорма.УстановкаПодписиЭЦП", ПараметрыФормы);
	
	Если ТипЗнч(СтруктураПараметровПодписи) = Тип("Структура") Тогда
		
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = СтруктураПараметровПодписи.Пароль;
		
		МассивФайлов = Новый Массив;
		Для Каждого Файл Из Форма.Файлы Цикл
			МассивФайлов.Добавить(Файл.ID);
		КонецЦикла;
		
		ДвоичныеДанныеДокумента = ПолучитьИзВременногоХранилища(Форма.АдресСлепкаДокумента);
		
		МассивОбъектовДляПодписи = Новый Массив;
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьОбъектыДляПодписи(Форма.ID, Форма.Тип, 
			МассивОбъектовДляПодписи, МассивФайлов, ДвоичныеДанныеДокумента);
		
		Для Каждого ОбъектДляПодписи Из МассивОбъектовДляПодписи Цикл
			
			ОбъектСсылкаДляПодписи = ОбъектДляПодписи.ОбъектСсылкаДляПодписи;
			
			АдресФайла = "";
			ДвоичныеДанныеФайла = Неопределено;
			
			Если НЕ ОбъектДляПодписи.Свойство("ДвоичныеДанные", ДвоичныеДанныеФайла) Тогда
				АдресФайла = ОбъектДляПодписи.АдресФайла;
				ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
			КонецЕсли;
			
			// удаляем двоичные данные из временного хранилища после получения
			Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
				МассивАдресов.Добавить(АдресФайла);
			КонецЕсли;
			
			ДанныеПодписи = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьДанныеПодписи(
				МенеджерКриптографии, ОбъектСсылкаДляПодписи, ДвоичныеДанныеФайла, СтруктураПараметровПодписи);
				
			ДанныеПодписи.Вставить("ОбъектТип", ОбъектДляПодписи.ОбъектТип);
			ДанныеПодписи.ДатаПодписи = ТекущаяДата();
			
			МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеПодписи);
				
		КонецЦикла;
		
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

//Возвращает массив подписей файла
//Параметры:
//	ИдентификаторФайла - идентификатор объекта Документооборота
//	ТаблицаПодписей - таблица подписей объекта
//Возвращает:
//	Массив структур существующих подписей объекта
Функция ПолучитьМассивСуществующихПодписейФайла(ИдентификаторФайла, ТаблицаПодписей) Экспорт
	
	МассивДанныхПодписей = Новый Массив; // подписи, оставшиеся после удаления
	
	НомерСтроки = 0;
	
	// формируем массив данных подписи
	Для Каждого ДанныеСтроки Из ТаблицаПодписей Цикл
		
		ПодписьДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресПодписи);
		ДвоичныеДанныеСертификата = ПолучитьИзВременногоХранилища(ДанныеСтроки.АдресСертификата);
		
		ДанныеПодписи = Новый Структура;
		ДанныеПодписи.Вставить("ОбъектСсылка", ИдентификаторФайла);
		ДанныеПодписи.Вставить("НоваяПодписьДвоичныеДанные", ПодписьДвоичныеДанные);
		ДанныеПодписи.Вставить("Отпечаток", ДанныеСтроки.Отпечаток);
		ДанныеПодписи.Вставить("ДатаПодписи", ДанныеСтроки.ДатаПодписи);
		ДанныеПодписи.Вставить("Комментарий", ДанныеСтроки.Комментарий);
		ДанныеПодписи.Вставить("ИмяФайлаПодписи", ДанныеСтроки.ИмяФайлаПодписи);
		ДанныеПодписи.Вставить("КомуВыданСертификат", ДанныеСтроки.КомуВыданСертификат);
		ДанныеПодписи.Вставить("ДвоичныеДанныеСертификата", ДвоичныеДанныеСертификата); 
		ДанныеПодписи.Вставить("ОбъектТип", "DMFile");
		ДанныеПодписи.Вставить("УстановившийПодпись", ДанныеСтроки.УстановившийПодпись); 
		ДанныеПодписи.Вставить("УстановившийПодписьИд", ДанныеСтроки.УстановившийПодписьИд);
		ДанныеПодписи.Вставить("НомерСтроки", НомерСтроки);
		
		МассивДанныхПодписей.Добавить(ДанныеПодписи);
		
		НомерСтроки = НомерСтроки + 1;
			
	КонецЦикла;
	
	Возврат МассивДанныхПодписей;
	
КонецФункции

////////////////////////////////////////
// Автообновление

//Открывает модальную форму настройки автообновления списка. При завершении диалога
// устанавливает выбранные параметры автообновления списка.
// Параметры:
// Форма - уникальный идентификатор открытой формы
// ИмяСписка - Строка - имя реквизита списка на форме
Процедура УстановитьПараметрыАвтообновленияСписка(Форма, ИмяСписка) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АвтоОбновление", Форма.Элементы[ИмяСписка].АвтоОбновление);
	ПараметрыФормы.Вставить("ПериодАвтоОбновления", Форма.Элементы[ИмяСписка].ПериодАвтоОбновления);
	Результат = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.НастройкаАвтообновления",
		ПараметрыФормы,
		Форма);
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.СохранитьНастройкиАвтообновленияСписка(Форма.ИмяФормы, ИмяСписка, Результат);
		
		Форма.Элементы[ИмяСписка].АвтоОбновление = Результат.АвтоОбновление;
		Форма.Элементы[ИмяСписка].ПериодАвтоОбновления = Результат.ПериодАвтоОбновления;
		Если Результат.АвтоОбновление Тогда
			Форма.Элементы[ИмяСписка].Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Открывает модальную форму настройки автообновления формы. При завершении диалога
// возвращает выбранные параметры автообновления.
// Параметры:
// Форма - форма или имя формы
// НастройкиАвтообновления - структура настроек автообновления
// - Автообновление (Булево)
// - ПериодАвтоОбновления (Число)
Функция УстановитьПараметрыАвтообновленияФормы(Форма, НастройкиАвтообновления) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АвтоОбновление", НастройкиАвтообновления.АвтоОбновление);
	ПараметрыФормы.Вставить("ПериодАвтоОбновления", НастройкиАвтообновления.ПериодАвтоОбновления);
	Результат = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.НастройкаАвтообновления",
		ПараметрыФормы,
		Форма);
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Форма) = Тип("Строка") Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.СохранитьНастройкиАвтообновленияФормы(Форма, Результат);
	Иначе
		ИнтеграцияС1СДокументооборотВызовСервера.СохранитьНастройкиАвтообновленияФормы(Форма.ИмяФормы, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////
// Работа с бизнес-процессами

//Вызывает форму создания бизнес-процесс по документу из 1С:Документооборота начиная с версии 1.2.6.2
//Параметры:
//	ИД - идентификатор документа Документооборота
//	Тип - тип документа Документооборота
//	Имя - наименование документа документооборота
Процедура СоздатьБизнесПроцессПоДокументуИзДО(ИД, Тип, Имя) Экспорт
	
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2") Тогда
		ПредметБизнесПроцесса = Новый Структура;
		ПредметБизнесПроцесса.Вставить("id", ИД);
		ПредметБизнесПроцесса.Вставить("type", Тип);
		ПредметБизнесПроцесса.Вставить("name", Имя);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Предмет", ПредметБизнесПроцесса);
		ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.СозданиеБизнесПроцесса",ПараметрыФормы);
	Иначе
		ПоддержкаСовместимости_СоздатьБизнесПроцессПоДокументуИзДО(ИД, Тип, Имя);
	КонецЕсли;
	
КонецПроцедуры

//Вызывает форму создания бизнес процесса бизнес-процесса начиная с версии 1.2.6.2
//Параметры:
//	СсылкаНаВнешнийОбъект - ссылка на объект конфигурации-потребителя
//	ГлавнаяЗадача - структура данных главной задачи бизнес-процесса
//		- id - идентификатор главной задачи
//		- type - тип главной задачи
//		- name - наименование главной задачи
Процедура СоздатьБизнесПроцесс(СсылкаНаВнешнийОбъект = Неопределено, ГлавнаяЗадача = Неопределено) Экспорт
	
	Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВнешнийОбъект",СсылкаНаВнешнийОбъект);
		ПараметрыФормы.Вставить("ГлавнаяЗадача",ГлавнаяЗадача);
		ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.СозданиеБизнесПроцесса",ПараметрыФормы);
	Иначе
		ПоддержкаСовместимости_СоздатьБизнесПроцесс(СсылкаНаВнешнийОбъект);
	КонецЕсли;
	
КонецПроцедуры

//(Для совместимости) Создает бизнес-процесс по документу из Документооборота (открывает форму нового бизнес-процесса)
//Параметры:
//	ИД - уникальный идентификатор документа в Документообороте
//	Тип - имя типа XDTO для документа Документооборота
//	Имя - ниаменование документа в Документообороте
Процедура ПоддержкаСовместимости_СоздатьБизнесПроцессПоДокументуИзДО(ИД, Тип, Имя) Экспорт
	
	ТипБизнесПроцесса = ВыбратьТипБизнесПроцесса();
	Если ТипБизнесПроцесса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПредметБизнесПроцесса = Новый Структура;
	ПредметБизнесПроцесса.Вставить("id", ИД);
	ПредметБизнесПроцесса.Вставить("type", Тип);
	ПредметБизнесПроцесса.Вставить("name", Имя);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Предмет", ПредметБизнесПроцесса);
	
	ОткрытьОбъект(Тип, ИД, , ПараметрыФормы);
	
КонецПроцедуры

//(Для совместимости) Обработчик команды создания бизнес-процесса. 
//Открывает пользователю необходимые формы для создания и запуска бизнес-процесса.
//Параметры:
//	СсылкаНаВнешнийОбъект - ссылка на объект конфигурации-потребителя
Процедура ПоддержкаСовместимости_СоздатьБизнесПроцесс(СсылкаНаВнешнийОбъект = неопределено) Экспорт
	
	ТипБизнесПроцесса = ВыбратьТипБизнесПроцесса();
	
	Если ТипБизнесПроцесса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СсылкаНаВнешнийОбъект <> Неопределено Тогда
		
		РезультатПоискаДокументаВДО = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьСвязанныйCВнешнимОбъектомДокумент(СсылкаНаВнешнийОбъект);
		
		Если ТипЗнч(РезультатПоискаДокументаВДО) = Тип("Структура") Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Предмет", РезультатПоискаДокументаВДО);
			ОткрытьОбъект(ТипБизнесПроцесса, Неопределено, , ПараметрыФормы);
			
		Иначе
			
			ИмяТипа = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьИмяТипаДокументаДОИзНастроекЗаполнения(СсылкаНаВнешнийОбъект);
			
			Если ИмяТипа = Неопределено Тогда
				//выбор типа документа
				СписокДоступныхТиповДокументов = Новый СписокЗначений;
				СписокДоступныхТиповДокументов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMInternalDocument", 	"Внутренний документ"));
				СписокДоступныхТиповДокументов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMIncomingDocument", 	"Входящий документ"));
				СписокДоступныхТиповДокументов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMOutgoingDocument", 	"Исходящий документ"));
				ЗаголовокФормы = НСтр("ru = 'Тип предмета бизнес-процесса'");
				
				ПараметрыФормы = Новый Структура("СписокДоступныхТипов, ЗаголовокФормы", СписокДоступныхТиповДокументов, ЗаголовокФормы);
				РезультатВыбораТипа = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборОдногоТипаИзСоставногоТипа", ПараметрыФормы);
				Если РезультатВыбораТипа = Неопределено Тогда
					Возврат;
				КонецЕсли;
				ИмяТипа = РезультатВыбораТипа;
			КонецЕсли;
			
			//открытие карточки документа
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВнешнийОбъект", СсылкаНаВнешнийОбъект);
			Если ИмяТипа = "DMInternalDocument" Тогда 
				РезультатЗаполненияДокумента = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВнутреннийДокумент", ПараметрыФормы);
			ИначеЕсли ИмяТипа = "DMIncomingDocument" Тогда 
				РезультатЗаполненияДокумента = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВходящийДокумент", ПараметрыФормы);
			ИначеЕсли ИмяТипа = "DMOutgoingDocument" Тогда 
				РезультатЗаполненияДокумента = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящийДокумент", ПараметрыФормы);
			КонецЕсли;
			
			//открытие карточки бизнес-процесса
			Если ТипЗнч(РезультатЗаполненияДокумента) = Тип("Структура")
				И ЗначениеЗаполнено(РезультатЗаполненияДокумента.id) Тогда
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Предмет", РезультатЗаполненияДокумента);
				ОткрытьОбъект(ТипБизнесПроцесса, Неопределено, , ПараметрыФормы);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ОткрытьОбъект(ТипБизнесПроцесса, Неопределено, , ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает в строку таблицы участников бизнес-процесса результат выбора участника бизнес-процесса
//из списка, который формируется при автоподборе
//Параметры:
//	Элемент - таблица участников бизнес-процесса
//	ВыбранноеЗначение - структура выбранного значения 
//	СтандартнаяОбработка - признак выполнения процедуры
//	Форма - управляемая форма с таблицей участников бизнес-процесса
Процедура ПрименитьВыборУчастникаБизнесПроцессаВСписке(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Форма) Экспорт
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение.type = "DMUser" Тогда
			Элемент.ТекущиеДанные.Исполнитель = ВыбранноеЗначение.Name;
			Элемент.ТекущиеДанные.ИсполнительID = ВыбранноеЗначение.id;
			Элемент.ТекущиеДанные.ИсполнительТип = ВыбранноеЗначение.type;
		ИначеЕсли ВыбранноеЗначение.type = "DMBusinessProcessExecutorRole" Тогда
			
			РезультатВыбораРоли = ПолучитьОбъектыАдресацииРоли(
				 ВыбранноеЗначение.Name,
				 ВыбранноеЗначение.type,
				 ВыбранноеЗначение.id, Форма);
				 
			Если РезультатВыбораРоли = Неопределено Тогда
				Возврат; 
			КонецЕсли;
				
			Элемент.ТекущиеДанные.Исполнитель = РезультатВыбораРоли.Исполнитель;
			Элемент.ТекущиеДанные.ИсполнительID = РезультатВыбораРоли.ИсполнительID;
			Элемент.ТекущиеДанные.ИсполнительТип = РезультатВыбораРоли.ИсполнительТип;

			Элемент.ТекущиеДанные.ОсновнойОбъектАдресации = РезультатВыбораРоли.ОсновнойОбъектАдресации;
			Элемент.ТекущиеДанные.ОсновнойОбъектАдресацииID = РезультатВыбораРоли.ОсновнойОбъектАдресацииID;
			Элемент.ТекущиеДанные.ОсновнойОбъектАдресацииТип = РезультатВыбораРоли.ОсновнойОбъектАдресацииТип;
			
			Элемент.ТекущиеДанные.ДополнительныйОбъектАдресации = РезультатВыбораРоли.ДополнительныйОбъектАдресации;
			Элемент.ТекущиеДанные.ДополнительныйОбъектАдресацииID = РезультатВыбораРоли.ДополнительныйОбъектАдресацииID;
			Элемент.ТекущиеДанные.ДополнительныйОбъектАдресацииТип = РезультатВыбораРоли.ДополнительныйОбъектАдресацииТип;
			
		КонецЕсли;
		
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает в поле на форме результат выбора участника бизнес-процесса из списка, который формируется при автоподборе
//Параметры:
//	ИмяПоля - имя реквизита участника бизнес-процесса формы
//	ИмяПоляОбъектаАдресации - имя реквизита объекта адресации
//	ВыбранноеЗначение - структура выбранного значения участника бизнес-процесса
//	СтандартнаяОбработка - признак выполнения процедуры
//	Форма - управляемая форма с полем выбора участника бизнес-процесса
Процедура ПрименитьВыборУчастникаБизнесПроцессаВПоле(ИмяПоля, ИмяПоляОбъектаАдресации, ВыбранноеЗначение, СтандартнаяОбработка, Форма) Экспорт
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ВыбранноеЗначение.type = "DMUser" Тогда
			Форма[ИмяПоля] = ВыбранноеЗначение.Name;
			Форма[ИмяПоля + "id"] = ВыбранноеЗначение.id;
			Форма[ИмяПоля + "Тип"] = ВыбранноеЗначение.type;
		ИначеЕсли ВыбранноеЗначение.type = "DMBusinessProcessExecutorRole" Тогда
			
			РезультатВыбораРоли = ПолучитьОбъектыАдресацииРоли(
				 ВыбранноеЗначение.Name,
				 ВыбранноеЗначение.type,
				 ВыбранноеЗначение.id, Форма);
				 
			Если РезультатВыбораРоли = Неопределено Тогда
				Возврат; 
			КонецЕсли;
				
			Форма[ИмяПоля] = РезультатВыбораРоли.Исполнитель;
			Форма[ИмяПоля + "id"] = РезультатВыбораРоли.ИсполнительID;
			Форма[ИмяПоля + "Тип"] = РезультатВыбораРоли.ИсполнительТип;

			Форма["Основной" + ИмяПоляОбъектаАдресации] = РезультатВыбораРоли.ОсновнойОбъектАдресации;
			Форма["Основной" + ИмяПоляОбъектаАдресации + "id"] = РезультатВыбораРоли.ОсновнойОбъектАдресацииID;
			Форма["Основной" + ИмяПоляОбъектаАдресации + "Тип"] = РезультатВыбораРоли.ОсновнойОбъектАдресацииТип;
			
			Форма["Дополнительный" + ИмяПоляОбъектаАдресации] = РезультатВыбораРоли.ДополнительныйОбъектАдресации;
			Форма["Дополнительный" + ИмяПоляОбъектаАдресации + "id"] = РезультатВыбораРоли.ДополнительныйОбъектАдресацииID;
			Форма["Дополнительный" + ИмяПоляОбъектаАдресации + "Тип"] = РезультатВыбораРоли.ДополнительныйОбъектАдресацииТип;
			
		КонецЕсли;
		
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

//Выбрать тип бизнес-процесса
//Возвращает:
//	Диалог выбора типа бизнес-процесса для старта.
Функция ВыбратьТипБизнесПроцесса() Экспорт
	
	СписокДоступныхТиповБизнесПроцессов = Новый СписокЗначений;
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessPerformance", 	"Исполнение"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessAcquaintance", 	"Ознакомление"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessOrder", 			"Поручение"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessConsideration", 	"Рассмотрение"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessRegistration", 	"Регистрация"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessApproval", 		"Согласование"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessConfirmation", 	"Утверждение"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessInternalDocumentProcessing", 	"Обработка внутреннего документа"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessIncomingDocumentProcessing", 	"Обработка входящего документа"));
	СписокДоступныхТиповБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessOutgoingDocumentProcessing", 	"Обработка исходящего документа"));
	
	ЗаголовокФормы = НСтр("ru = 'Тип бизнес-процесса'");
	
	ПараметрыФормы = Новый Структура("СписокДоступныхТипов, ЗаголовокФормы", СписокДоступныхТиповБизнесПроцессов, ЗаголовокФормы);
	ТипБизнесПроцесса = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборОдногоТипаИзСоставногоТипа", ПараметрыФормы);
	
	Возврат ТипБизнесПроцесса;
	
КонецФункции

//Открывает форму выбора шаблона бизнес-процесса из списка
//Параметры:
//	Форма - форма бизнес-процесса Документооборота
Функция ВыбратьШаблонБизнесПроцесса(Форма) Экспорт
	
	ДанныеОПредмете = Неопределено;
	
	Если ЗначениеЗаполнено(Форма.Предмет) Тогда
		ДанныеОПредмете = Новый Структура;
		ДанныеОПредмете.Вставить("id", Форма.ПредметID);
		ДанныеОПредмете.Вставить("type", Форма.ПредметТип);
	КонецЕсли;
	
	СписокШаблонов = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьСписокШаблоновБизнесПроцессов(Форма.Тип, ДанныеОПредмете);
	
	Если СписокШаблонов.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура("СписокЗначенийДляВыбора", СписокШаблонов);
		РезультатВыбораШаблона = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборИзСписка", ПараметрыФормы, Форма);
		Возврат РезультатВыбораШаблона;
		
	ИначеЕсли СписокШаблонов.Количество() = 1 Тогда
		РезультатВыбораШаблона = Новый Структура("РеквизитID, РеквизитТип, РеквизитПредставление");
		РезультатВыбораШаблона.РеквизитID = СписокШаблонов[0].Значение.id;
		РезультатВыбораШаблона.РеквизитТип = СписокШаблонов[0].Значение.type;
		РезультатВыбораШаблона.РеквизитПредставление = СписокШаблонов[0].Значение.Name;
		Возврат РезультатВыбораШаблона; 
		
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Не найдено ни одного подходящего шаблона бизнес-процесса.'");
		Предупреждение(ТекстПредупреждения);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

//Получить объекты адресации роли
//Параметры
//	ИмяРоли - имя роли для получения объектов адресации
//	ТиРоли - тип роли для получения объектов адресации
//	IDРоли - идентификатор роли в Документообороте
//	ФормаВладелец - управляемая форма, на которой выбирается роль
//Возвращает:
// Структуру объектов адресации роли
Функция ПолучитьОбъектыАдресацииРоли(ИмяРоли, ТипРоли, IDРоли, ФормаВладелец) Экспорт
	
	ДанныеВозврата = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Роль", ИмяРоли);
	ПараметрыФормы.Вставить("РольID", IDРоли);
	ПараметрыФормы.Вставить("РольТип", ТипРоли);
	
	РезультатЗаполнения = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборОбъектовАдресацииРоли", ПараметрыФормы, ФормаВладелец);
	
	Если ТипЗнч(РезультатЗаполнения) = Тип("Структура") Тогда
		Если РезультатЗаполнения.Результат = "ОК" Тогда
	
			ДанныеВозврата.Вставить("Исполнитель", РезультатЗаполнения.Исполнитель);
			ДанныеВозврата.Вставить("ИсполнительID", РезультатЗаполнения.ИсполнительID);
			ДанныеВозврата.Вставить("ИсполнительТип", РезультатЗаполнения.ИсполнительТип);
			
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресации", РезультатЗаполнения.ОсновнойОбъектАдресации);
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресацииID", РезультатЗаполнения.ОсновнойОбъектАдресацииID);
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресацииТип", РезультатЗаполнения.ОсновнойОбъектАдресацииТип);
			
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресации", РезультатЗаполнения.ДополнительныйОбъектАдресации);
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресацииID", РезультатЗаполнения.ДополнительныйОбъектАдресацииID);
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресацииТип", РезультатЗаполнения.ДополнительныйОбъектАдресацииТип);
			
		ИначеЕсли РезультатЗаполнения.Результат = "БезОбъектовАдресации" Тогда
			
			ДанныеВозврата.Вставить("Исполнитель", ИмяРоли);
			ДанныеВозврата.Вставить("ИсполнительID", IDРоли);
			ДанныеВозврата.Вставить("ИсполнительТип", ТипРоли);
			
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресации", "");
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресацииID", "");
			ДанныеВозврата.Вставить("ОсновнойОбъектАдресацииТип", "");
			
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресации", "");
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресацииID", "");
			ДанныеВозврата.Вставить("ДополнительныйОбъектАдресацииТип", "");
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	Возврат ДанныеВозврата;
	
КонецФункции
