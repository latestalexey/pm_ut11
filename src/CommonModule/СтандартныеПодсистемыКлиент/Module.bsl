////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность".
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Устанавливает заголовок главного окна приложения, используя представление текущего пользователя,
// значение константы ЗаголовокПриложения и заголовок приложения по умолчанию.
//
// Параметры:
//   ПриЗапуске - Булево - Истина, если вызывается при начале работы программы.
//
Процедура УстановитьРасширенныйЗаголовокПриложения(ПриЗапуске = Ложь) Экспорт
	
	ПараметрыКлиента = ?(ПриЗапуске, СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске(),
		СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента());
		
	Если ПараметрыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		ПредставлениеЗаголовка = ПараметрыКлиента.ЗаголовокПриложения;
		ПредставлениеПользователя = ПараметрыКлиента.ПредставлениеПользователя;
		ПредставлениеКонфигурации = ПараметрыКлиента.ПодробнаяИнформация;
		
		Если ПустаяСтрока(СокрЛП(ПредставлениеЗаголовка)) Тогда
			Если ПараметрыКлиента.Свойство("ПредставлениеОбластиДанных") Тогда
				ШаблонЗаголовка = "%1 / %2 / %3";
				ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, 
					ПараметрыКлиента.ПредставлениеОбластиДанных, ПредставлениеКонфигурации, 
					ПредставлениеПользователя);
			Иначе
				ШаблонЗаголовка = "%1 / %2";
				ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, 
					ПредставлениеКонфигурации, ПредставлениеПользователя);
			КонецЕсли;
		Иначе
			ШаблонЗаголовка = "%1 / %2 / %3";
			ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, 
				СокрЛП(ПредставлениеЗаголовка), ПредставлениеПользователя, ПредставлениеКонфигурации);
		КонецЕсли;
		
		УстановитьЗаголовокПриложения(ЗаголовокПриложения);
	Иначе
		ШаблонЗаголовка = "%1 / %2";
		ЗаголовокПриложения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, 
			НСтр("ru = 'Не установлены разделители'"), ПараметрыКлиента.ПодробнаяИнформация);
		
		УстановитьЗаголовокПриложения(ЗаголовокПриложения);
	КонецЕсли;
	
КонецПроцедуры

// Отключает выдачу предупреждения пользователю при завершении работы программы.
//
Процедура ПропуститьПредупреждениеПередЗавершениемРаботыСистемы() Экспорт
	
	ПропуститьПредупреждениеПередЗавершениемРаботыСистемы = Истина;
	
КонецПроцедуры

// Вызывает форму вопроса.
//
// Параметры:
//  ТекстСообщения - строка - текст вопроса для пользователя
//  Кнопки - РежимДиалогаВопрос; СписокЗначений. 
//           Задает состав и текст кнопок диалога, а также, связанные с кнопками значения.
//           При использовании типа СписокЗначений:
//           Значение – содержит значение, связанное с кнопкой. Это значение является возвращаемым значением при выборе кнопки.
//           В качестве значения может использоваться значение перечисления КодВозвратаДиалога, а также другие значения;
//           Примечание: значение должно поддерживать XDTO сериализацию.
//           Представление – задает текст кнопки.
//  Таймаут - значение таймаута в секундах, по истечению этого времени функцию вернет значение КодВозвратаДиалога.Таймаут
//
// Возвращаемое значение:
//  КодВозвратаДиалога
//
Функция ВопросПользователю(ТекстСообщения, Кнопки, Таймаут = 0, КнопкаПоУмолчанию = Неопределено, Заголовок = "", 
	КнопкаТаймаута = Неопределено, БольшеНеЗадаватьЭтотВопрос = Ложь) Экспорт
	
	БольшеНеЗадаватьЭтотВопрос = Ложь;
	
	Параметры = Новый Структура;
	
	Если ТипЗнч(Кнопки) = Тип("РежимДиалогаВопрос") Тогда
		Если      Кнопки = РежимДиалогаВопрос.ДаНет Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНет";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ДаНетОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ДаНетОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОК Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОК";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ОКОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ОКОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПовторитьОтмена Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПовторитьОтмена";
		ИначеЕсли Кнопки = РежимДиалогаВопрос.ПрерватьПовторитьПропустить Тогда
			КнопкиПараметр = "РежимДиалогаВопрос.ПрерватьПовторитьПропустить";
		КонецЕсли;
	Иначе
		КнопкиПараметр = Кнопки;
	КонецЕсли;
	
	Если ТипЗнч(КнопкаПоУмолчанию) = Тип("КодВозвратаДиалога") Тогда
		КнопкаПоУмолчаниюПараметр = КодВозвратаДиалогаВСтроку(КнопкаПоУмолчанию);
	Иначе
		КнопкаПоУмолчаниюПараметр = КнопкаПоУмолчанию;
	КонецЕсли;
	
	Если ТипЗнч(КнопкаТаймаута) = Тип("КодВозвратаДиалога") Тогда
		КнопкаТаймаутаПараметр = КодВозвратаДиалогаВСтроку(КнопкаТаймаута);
	Иначе
		КнопкаТаймаутаПараметр = КнопкаТаймаута;
	КонецЕсли;
	
	Параметры.Вставить("Кнопки",            КнопкиПараметр);
	Параметры.Вставить("Таймаут",           Таймаут);
	Параметры.Вставить("КнопкаПоУмолчанию", КнопкаПоУмолчаниюПараметр);
	Параметры.Вставить("Заголовок",         Заголовок);
	Параметры.Вставить("КнопкаТаймаута",    КнопкаТаймаутаПараметр);
	Параметры.Вставить("ТекстСообщения",    ТекстСообщения);
	
	Результат = ОткрытьФормуМодально("ОбщаяФорма.Вопрос", Параметры);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		БольшеНеЗадаватьЭтотВопрос = Результат.БольшеНеЗадаватьЭтотВопрос;
		Возврат Результат.Значение;
	Иначе
		Возврат КодВозвратаДиалога.Отмена;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру параметров, необходимых для работы
// конфигурации на клиенте при завершении, т.е. в обработчиках событий
// - ПередЗавершениемРаботыСистемы,
// - ПриЗавершенииРаботыСистемы
// 
// Возвращаемое значение:
//   ФиксированнаяСтруктура - структура параметров работы клиента при завершении.
//
Функция ПараметрыРаботыКлиентаПриЗавершении() Экспорт
	
	Если ПараметрыРаботыКлиентаПриЗавершении = Неопределено Тогда
		ПараметрыРаботыКлиентаПриЗавершении = СтандартныеПодсистемыВызовСервера.ПараметрыРаботыКлиентаПриЗавершении();
	КонецЕсли;
	
	Возврат ПараметрыРаботыКлиентаПриЗавершении;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Стандартные действия выполняемые перед началом работы системы.
//
// Параметры:
// Отказ - Булево - флаг отказа от выполнения операции. 
//  В случае установки в Истина вход в систему осуществлен не будет.
//
Процедура ДействияПередНачаломРаботыСистемы(Отказ) Экспорт
	
	ПараметрыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	Если НЕ ПараметрыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		ОбновлениеИнформационнойБазыВызовСервера.ВыполнитьОбновлениеИнформационнойБазы();
	КонецЕсли;
	
	УстановитьРазделениеСеанса(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыКлиента.ДоступноИспользованиеРазделенныхДанных Тогда
		Возврат;
	КонецЕсли;
		
	СтандартныеПодсистемыКлиентПереопределяемый.ПередНачаломРаботыСистемы(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентПереопределяемый.ПередНачаломРаботыСистемы(Отказ);
	
КонецПроцедуры

// Установить разделения сеанса при запуске программы.
//
// Параметры:
//  Отказ  - Булево - если Истина, то запуск программы должен быть прекращен.
//
Процедура УстановитьРазделениеСеанса(Отказ)

	Если ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапуска = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска, ";");
	ЗначениеПараметраЗапуска = Врег(ПараметрыЗапуска[0]);
	
	Если ЗначениеПараметраЗапуска <> ВРег("ВойтиВОбластьДанных") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗапуска.Количество() < 2 Тогда
		ВызватьИсключение(НСтр("ru = 'При указании параметра запуска ВойтиВОбластьДанных,
				|дополнительным параметром необходимо указать значение разделителя.'"));
	КонецЕсли;
	
	Попытка
		ЗначениеРазделителя = Число(ПараметрыЗапуска[1]);
	Исключение
		ВызватьИсключение(НСтр("ru = 'Значением разделителя в параметре ВойтиВОбластьДанных должно быть число.'"));
	КонецПопытки;
	
	ОбщегоНазначенияВызовСервера.УстановитьРазделениеСеанса(Истина, ЗначениеРазделителя);
	
КонецПроцедуры 

// Стандартные действия выполняемые при начале работы системы.
//
// Параметры
//  ОбрабатыватьПараметрыЗапуска - Булево - Истина, если обработчик вызван при 
//  непосредственном входе пользователя в систему и должен обработать параметры
//  запуска (если это предусмотрено его логикой). Ложь, если обработчик вызван
//  при интерактивном входе неразделенного пользователя в область данных и
//  обрабатывать параметры запуска не следует.
//
Процедура ДействияПриНачалеРаботыСистемы(ОбрабатыватьПараметрыЗапуска = Истина) Экспорт
	
	СтандартныеПодсистемыКлиентПереопределяемый.ПриНачалеРаботыСистемы(ОбрабатыватьПараметрыЗапуска);
	ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы(ОбрабатыватьПараметрыЗапуска);
	
КонецПроцедуры

// Обработать параметры запуска программы.
//
// Параметры
//  ОбрабатыватьПараметрыЗапуска  – Булево
//
// Возвращаемое значение:
//   Булево   – Истина, если необходимо прервать выполнение процедуры ПриНачалеРаботыСистемы.
//
Функция ОбработатьПараметрыЗапуска(ОбрабатыватьПараметрыЗапуска) Экспорт

	Результат = Ложь;
	
	// Есть ли параметры запуска
	Если Не ОбрабатыватьПараметрыЗапуска Или ПустаяСтрока(ПараметрЗапуска) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Параметр может состоять из частей, разделенных символом ";".
	// Первая часть - главное значение параметра запуска. 
	// Наличие дополнительных частей определяется логикой обработки главного параметра.
	ПараметрыЗапуска = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска, ";");
	ЗначениеПараметраЗапуска = Врег(ПараметрыЗапуска[0]);
	
	Результат = СтандартныеПодсистемыКлиентПереопределяемый.ОбработатьПараметрыЗапуска(ЗначениеПараметраЗапуска, ПараметрыЗапуска);
	Результат = ОбщегоНазначенияКлиентПереопределяемый.ОбработатьПараметрыЗапуска(ЗначениеПараметраЗапуска, ПараметрыЗапуска) Или Результат;
	Возврат Результат;
	
КонецФункции

// Соответствует обработчику ПередЗавершениемРаботыСистемы
//
// Параметры:
//  Отказ - Булево - признак отказа от завершения работы системы.
//
Процедура ДействияПередЗавершениемРаботыСистемы(Отказ) Экспорт
	
	СтандартныеПодсистемыКлиентПереопределяемый.ПередЗавершениемРаботыСистемы(Отказ);
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ДоступноИспользованиеРазделенныхДанных Тогда
		ОткрытьФормуПредупрежденийПриЗавершенииРаботы(Отказ);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентПереопределяемый.ПередЗавершениемРаботыСистемы(Отказ);
	
КонецПроцедуры

// Показывает пользователю диалог подтверждения выхода из программы.
//
// Параметры:
//  Отказ - Булево - признак отказа от завершения работы системы.
//
Процедура ВопросПользователюПередЗавершениемРаботыСистемы(Отказ) Экспорт
	
	БольшеНеЗадаватьЭтотВопрос = Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЗапрашиватьПодтверждениеПриЗавершенииПрограммы;
	Если БольшеНеЗадаватьЭтотВопрос Тогда
		Возврат;
	КонецЕсли;
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить("КодВозвратаДиалога.Да",	НСтр("ru = 'Завершить'"));
	Кнопки.Добавить("КодВозвратаДиалога.Нет",	НСтр("ru = 'Не завершать'"));
	
	Результат = ВопросПользователю(НСтр("ru = 'Завершить работу с программой?'"), Кнопки, , КодВозвратаДиалога.Да, НСтр("ru = 'Завершение работы'"), 
		КодВозвратаДиалога.Нет, БольшеНеЗадаватьЭтотВопрос);
	Если БольшеНеЗадаватьЭтотВопрос Тогда
		СтандартныеПодсистемыВызовСервера.СохранитьНастройкуПодтвержденияПриЗавершенииПрограммы(НЕ БольшеНеЗадаватьЭтотВопрос);
	КонецЕсли;
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет версию платформы, в зависимости от места вызова и возвращает Истина, 
// если она подходит для запуска конфигурации.
//
// Возвращаемое значение
//  Булево - если версия актуальна, тогда Истина, иначе - Ложь.
//
Функция ПроверитьВерсиюПлатформыПриЗапуске() Экспорт
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске().РазделениеВключено Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Определяем минимальную версию платформы для запуска и логику входа в программу
	ПараметрыРаботы = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	Возврат ПроверитьВерсиюПлатформы(ПараметрыРаботы.МинимальноНеобходимаяВерсияПлатформы, ПараметрыРаботы.РаботаВПрограммеЗапрещена);
	
КонецФункции	

// Проверяет минимально допустимую версию платформы для запуска.
// Если версия платформы более поздняя, чем РекомендуемаяВерсияПлатформы, то пользователю будет 
// показано оповещение. Работа программы будет прекращена, если ЗавершитьРаботу = Истина.
//
// Параметры:
//  РекомендуемаяВерсияПлатформы - Строка - версия платформы рекомендуемая для работы;
//  РаботаВПрограммеЗапрещена    - Булево - если Истина и текущая версия платформы меньше рекомендуемой, 
//                                          то продолжение работы в программе невозможно.
//
// Возвращаемое значение:
//  Булево - Истина, если версия платформы подходит для работы.
//
Функция ПроверитьВерсиюПлатформы(знач РекомендуемаяВерсияПлатформы, знач РаботаВПрограммеЗапрещена = Ложь) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СистемнаяИнформация.ВерсияПриложения, РекомендуемаяВерсияПлатформы) >= 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьДоступДляОбновленияВерсииПлатформы = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске().ЕстьДоступДляОбновленияВерсииПлатформы;
	Если РаботаВПрограммеЗапрещена Тогда
		Если ЕстьДоступДляОбновленияВерсииПлатформы Тогда
			ТекстСообщения = НСтр("ru = 'Вход в программу невозможен.
				|Необходимо предварительно обновить версию платформы 1С:Предприятие.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Вход в программу невозможен.
				|Необходимо обратиться к администратору для обновления версии платформы 1С:Предприятие.'");
		КонецЕсли;
	Иначе
		Если ЕстьДоступДляОбновленияВерсииПлатформы Тогда
			ТекстСообщения = 
				НСтр("ru='Рекомендуется прекратить работу программы и обновить версию платформы 1С:Предприятие.
			         |В противном случае некоторые возможности программы будут недоступны или будут работать некорректно.
					 |
			         |Прекратить работу программы?'");
		Иначе
			ТекстСообщения = 
				НСтр("ru='Рекомендуется прекратить работу программы и обратиться к администратору для обновления версии платформы 1С:Предприятие.
			         |В противном случае некоторые возможности программы будут недоступны или будут работать некорректно.
					 |
			         |Прекратить работу программы?'");
		КонецЕсли;
	КонецЕсли;
	Параметры = Новый Структура;
	Параметры.Вставить("ТекстСообщения", ТекстСообщения);
	Параметры.Вставить("ЗавершитьРаботу", РаботаВПрограммеЗапрещена);
	Параметры.Вставить("РекомендуемаяВерсияПлатформы", РекомендуемаяВерсияПлатформы);
	Результат = ОткрытьФормуМодально("ОбщаяФорма.НерекомендуемаяВерсияПлатформы", Параметры);
	Если РаботаВПрограммеЗапрещена Тогда
		ПрекратитьРаботуСистемы();
		Возврат Ложь;
	ИначеЕсли Результат = КодВозвратаДиалога.OK Тогда
		ПрекратитьРаботуСистемы();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает строковое представление значения типа КодВозвратаДиалога
Функция КодВозвратаДиалогаВСтроку(Значение)
	
	Результат = "КодВозвратаДиалога." + Строка(Значение);
	
	Если Значение = КодВозвратаДиалога.Да Тогда
		Результат = "КодВозвратаДиалога.Да";
	ИначеЕсли Значение = КодВозвратаДиалога.Нет Тогда
		Результат = "КодВозвратаДиалога.Нет";
	ИначеЕсли Значение = КодВозвратаДиалога.ОК Тогда
		Результат = "КодВозвратаДиалога.ОК";
	ИначеЕсли Значение = КодВозвратаДиалога.Отмена Тогда
		Результат = "КодВозвратаДиалога.Отмена";
	ИначеЕсли Значение = КодВозвратаДиалога.Повторить Тогда
		Результат = "КодВозвратаДиалога.Повторить";
	ИначеЕсли Значение = КодВозвратаДиалога.Прервать Тогда
		Результат = "КодВозвратаДиалога.Прервать";
	ИначеЕсли Значение = КодВозвратаДиалога.Пропустить Тогда
		Результат = "КодВозвратаДиалога.Пропустить";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
// Выводит форму сообщений пользователю при закрытии программы,
// либо выводит сообщение.
//
// Параметры:
//  Отказ - Булево - признак отказа от завершения работы системы.
//
Процедура ОткрытьФормуПредупрежденийПриЗавершенииРаботы(Отказ) Экспорт
	
	Если ПропуститьПредупреждениеПередЗавершениемРаботыСистемы = Истина Тогда 
		Возврат;
	КонецЕсли;
	
	Предупреждения = Новый Массив;
	СтандартныеПодсистемыКлиентПереопределяемый.ПолучитьСписокПредупреждений(Предупреждения);
	
	ПараметрыПередачи = Новый Структура;
	ПараметрыПередачи.Вставить("Предупреждения", Предупреждения);
	
	ИмяФормы = "ОбщаяФорма.ПредупрежденияПриЗавершенииРаботы";
	
	Если Предупреждения.Количество() = 0 Тогда
		ВопросПользователюПередЗавершениемРаботыСистемы(Отказ);
	ИначеЕсли Предупреждения.Количество() = 1 Тогда
		Отказ = ОткрытьПрикладнуюФормуПредупреждения(Предупреждения.Получить(0), ИмяФормы, ПараметрыПередачи);
	ИначеЕсли Предупреждения.Количество() > 1 Тогда
		Отказ = ОткрытьФормуМодально(ИмяФормы, ПараметрыПередачи);
	КонецЕсли;
	
	// Отказ может быть со значением неопределено, если был нажат "крестик" на форме.
	Отказ = ?(Отказ = Неопределено, Истина, Отказ);
	
	// Если выход из приложения не выполнен, то необходимо "сбросить" ПараметрыРаботыКлиентаПриЗавершении,
	// чтобы при следующем выходе из приложения их зачитать.
	Если Отказ Тогда
		ПараметрыРаботыКлиентаПриЗавершении = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Формирует отображение одного вопроса.
//
//	Если в ПредупреждениеПользователю есть свойство "ТекстГиперссылки", то открывается "ФормаИндивидуальногоОткрытия" из Структуры вопроса.
//	Если в ПредупреждениеПользователю есть свойство "ТекстФлажка", то открывается форма "ОбщаяФорма.ВопросПередЗавершениемРаботыСистемы".
//
// Параметры:
//	ПредупреждениеПользователю - Структура - структура передаваемого предупреждения.
//	ИмяФормы - Строка - имя общей формы с вопросами.
//	ПараметрыПередачи - Структура - параметры для формы с вопросами.
//
// Возвращаемое значение:
//	Булево - Истина, если форма открыта.
//
Функция ОткрытьПрикладнуюФормуПредупреждения(ПредупреждениеПользователю, ИмяФормы, ПараметрыПередачи)
	Отказ = Ложь;
	
	ТекстФлажка = "";
	Если ПредупреждениеПользователю.Свойство("ТекстФлажка", ТекстФлажка) Тогда 
		Если Не ПустаяСтрока(ТекстФлажка) Тогда 
			Отказ = ОткрытьФормуМодально(ИмяФормы, ПараметрыПередачи);
		КонецЕсли;
			
		Возврат Отказ;
	КонецЕсли;	
	
	ТекстГиперссылки = "";
	Если ПредупреждениеПользователю.Свойство("ТекстГиперссылки", ТекстГиперссылки) Тогда 
		Если Не ПустаяСтрока(ТекстГиперссылки) Тогда 
			ДействиеПриНажатииГиперссылки = Неопределено;
			Если ПредупреждениеПользователю.Свойство("ДействиеПриНажатииГиперссылки", ДействиеПриНажатииГиперссылки) Тогда 
				ДействиеГиперссылка = ПредупреждениеПользователю.ДействиеПриНажатииГиперссылки;
				Форма = Неопределено;
				Если ДействиеГиперссылка.Свойство("ПрикладнаяФормаПредупреждения", Форма) Тогда 
					ПараметрыФормы = Неопределено;
					Если ДействиеГиперссылка.Свойство("ПараметрыПрикладнойФормыПредупреждения", ПараметрыФормы) Тогда
						Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда 
							ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
						ИначеЕсли ПараметрыФормы = Неопределено Тогда 
							ПараметрыФормы = Новый Структура;
							ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
						КонецЕсли;
						
						ПараметрыФормы.Вставить("ЗаголовокКнопкиДа",	"Завершить");
						ПараметрыФормы.Вставить("ЗаголовокКнопкиНет",	"Не завершать");
						
					КонецЕсли;
					Ответ = ОткрытьФормуМодально(Форма, ПараметрыФормы);
					Отказ = ОпределитьОтветФормы(Ответ);
					
					Возврат Отказ;
				ИначеЕсли ДействиеГиперссылка.Свойство("Форма", Форма) Тогда 
					ПараметрыФормы = Неопределено;
					Если ДействиеГиперссылка.Свойство("ПараметрыФормы", ПараметрыФормы) Тогда
						Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда 
							ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
						ИначеЕсли ПараметрыФормы = Неопределено Тогда 
							ПараметрыФормы = Новый Структура;
							ПараметрыФормы.Вставить("ЗавершениеРаботыПрограммы", Истина);
						КонецЕсли;
					КонецЕсли;
					Ответ = ОткрытьФормуМодально(Форма, ПараметрыФормы);
					Отказ = ОпределитьОтветФормы(Ответ);
					
					Возврат Отказ;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
			
		Возврат Отказ;
	КонецЕсли;	
	
	Возврат Отказ;
КонецФункции

// Определяет отказ по ответу формы.
//
// Параметры:
//	Ответ - ответ формы.
//
Функция ОпределитьОтветФормы(Ответ)
	Возврат Ответ = Неопределено Или Ответ = КодВозвратаДиалога.Нет Или Ответ = Истина;
КонецФункции	
