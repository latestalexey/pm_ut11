
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Заполнение дерева показателей.

// Добавляет в дерево показателей строки групп, объединяющих  показатели
//
// Параметры:
//  Дерево - дерево, в которое добавляются строки
//
Процедура ДобавитьСтрокиГруппПоказателей(Дерево) Экспорт
	
	Строки = Дерево.Строки;
	
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ТиповыеСоглашенияСКлиентами", 		 "Типовые соглашения с клиентами");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ИндивидуальныеСоглашенияСКлиентами", "Индивидуальные соглашения с клиентами");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ДоговорыСКлиентами", 				 "Договоры с клиентами");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "СделкиСКлиентами", 					 "Сделки с клиентами");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "КоммерческиеПредложенияКлиентам", 	 "Коммерческие предложения клиентам");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ЗаказыКлиентов", 					 "Заказы клиентов");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ЗаданияТорговымПредставителям", 	 "Задания торговым представителям");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ДокументыРеализацииТоваровИУслуг", 	 "Документы реализации товаров и услуг");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ЗаявкиНаВозвратТоваровОтКлиентов", 	 "Заявки на возврат товаров от клиентов");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ОтчетыКомиссионеров", 				 "Отчеты комиссионеров");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "СоглашенияСПоставщиками", 			 "Соглашения с поставщиками");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ДоговорыСПоставщиками", 			 "Договоры с поставщиками");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ЗаказыПоставщикам", 				 "Заказы поставщикам");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ДокументыПоступленияТоваровИУслуг",  "Документы поступления товаров и услуг");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ДоверенностиНаПолучениеТоваров", 	 "Доверенности на получение товаров");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ОтчетыКомитентам", 					 "Отчеты комитентам");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ВнутренниеПотребленияТоваров", 		 "Внутренние потребления товаров");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ПеремещенияТоваров", 				 "Перемещения товаров");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ДокументыСборкиРазборки", 			 "Документы cборки (разборки)");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ЗаявкиНаОплату", 					 "Заявки на оплату");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "РаспоряженияНаОтгрузку", 			 "Распоряжения на отгрузку", 1);
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "РаспоряженияНаПоступление", 		 "Распоряжения на поступление", 1);
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ИнвентаризацииТоваров", 			 "Инвентаризации товаров");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ОформлениеСкладскихАктов", 			 "Оформление складских актов");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "Задачи", 							 "Задачи");
	ТекущиеДелаСервер.ДобавитьСтрокуГруппы(Строки, "ЭлектронныеДокументы", 				 "Электронные документы", 1);
	
КонецПроцедуры

// Добавляет в дерево показателей строки показателей
//
// Параметры:
//  СтрокаГруппы - строка дерева, в которое добавляются строки
//
Процедура ДобавитьСтрокиПоказателей(СтрокаГруппы) Экспорт
	
	Строки = СтрокаГруппы.Строки;
	
	Если СтрокаГруппы.Показатель = "ТиповыеСоглашенияСКлиентами" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ТиповыеСоглашенияСКлиентамиНаСогласовании", "Соглашения на согласовании");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ТиповыеСоглашенияСКлиентамиПросроченные", "Просроченные соглашения",, Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "ИндивидуальныеСоглашенияСКлиентами" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ИндивидуальныеСоглашенияСКлиентамиНаСогласовании", "Соглашения на согласовании");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ИндивидуальныеСоглашенияСКлиентамиПросроченные", "Просроченные соглашения",, Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "ДоговорыСКлиентами" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ДоговорыСКлиентамиНаСогласовании", "Договоры на согласовании");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ДоговорыСКлиентамиПросроченные", "Просроченные договоры",, Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "СделкиСКлиентами" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "СделкиСКлиентамиВсегоВРаботе","Всего сделок в работе");
		
	ИначеЕсли СтрокаГруппы.Показатель = "КоммерческиеПредложенияКлиентам" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "КоммерческиеПредложенияКлиентамВсегоВРаботе","Всего предложений в работе");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "КоммерческиеПредложенияКлиентамПросроченные","Просроченные предложения",, Истина);
	
	ИначеЕсли СтрокаГруппы.Показатель = "ЗаказыКлиентов" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗаказыКлиентовВсегоВРаботе", "Всего заказов в работе");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗаказыКлиентовНаСегодня", "На сегодня");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗаказыКлиентовПросроченаОплата","Просрочена оплата по заказам",, Истина);
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗаказыКлиентовПросроченоИсполнение","Просрочено исполнение заказов",, Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "ЗаданияТорговымПредставителям" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗаданияТорговымПредставителямКПодготовке","Задания к подготовке");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗаданияТорговымПредставителямКОформлениюЗаказов", "Задания к оформлению заказов");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗаданияТорговымПредставителямПросроченные","Просроченные задания",, Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "ДокументыРеализацииТоваровИУслуг" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "РаспоряженияНаОформлениеРеализацийТоваровИУслугВсегоВРаботе","Распоряжения на оформление в работе");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "РаспоряженияНаОформлениеРеализацийТоваровИУслугНаСегодня", "Распоряжения на оформление на сегодня");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "РеализацииТоваровИУслугКОтгрузке","Документы к отгрузке");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "РеализацииТоваровИУслугКПредоплате","Документы к предоплате");
		
	ИначеЕсли СтрокаГруппы.Показатель = "ЗаявкиНаВозвратТоваровОтКлиентов" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗаявкиНаВозвратТоваровОтКлиентовВсегоВРаботе", "Всего заявок в работе");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗаявкиНаВозвратТоваровОтКлиентовНаСегодня", "На сегодня");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗаявкиНаВозвратТоваровОтКлиентовПросроченаОплата","Просрочена оплата по заявкам",, Истина);
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗаявкиНаВозвратТоваровОтКлиентовПросроченоИсполнение","Просрочено исполнение заявок",, Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "ОтчетыКомиссионеров" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ОтчетыКомиссионеровТребуетсяОформить", "Требуется оформить");
		
	ИначеЕсли СтрокаГруппы.Показатель = "СоглашенияСПоставщиками" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "СоглашенияСПоставщикамиНаСогласовании", "Соглашения на согласовании");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "СоглашенияСПоставщикамиПросроченные", "Просроченные соглашения",, Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "ДоговорыСПоставщиками" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ДоговорыСПоставщикамиНаСогласовании", "Договоры на согласовании");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ДоговорыСПоставщикамиПросроченные", "Просроченные договоры",, Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "ЗаказыПоставщикам" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗаказыПоставщикамВсегоВРаботе", "Всего заказов в работе");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗаказыПоставщикамНаСегодня", "На сегодня");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗаказыПоставщикамПросроченоИсполнениеНами","Просрочено исполнение нами",, Истина);
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗаказыПоставщикамПросроченоИсполнениеПоставщиком","Просрочено исполнение поставщиком",, Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "ДокументыПоступленияТоваровИУслуг" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "РаспоряженияНаОформлениеПоступленийТоваровИУслугВсегоВРаботе","Распоряжения на оформление в работе");
		
	ИначеЕсли СтрокаГруппы.Показатель = "ДоверенностиНаПолучениеТоваров" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "РаспоряженияНаОформлениеДоверенностейНаПолучениеТоваров", "Распоряжения на оформление");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ВыданныеДоверенностиНаПолучениеТоваров", "Выданные доверенности");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ВыданныеДоверенностиНаПолучениеТоваровИстекающиеНаСегодня", "Доверенности, истекающие сегодня");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ВыданныеДоверенностиНаПолучениеТоваровПросроченные", "Просроченные доверенности",, Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "ОтчетыКомитентам" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ОтчетыКомитентамТребуетсяОформить", "Требуется оформить");
		
	ИначеЕсли СтрокаГруппы.Показатель = "ВнутренниеПотребленияТоваров" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ВнутренниеПотребленияТоваровРаспоряженияНаОформлениеВсегоВРаботе", "Распоряжения на оформление документов в работе");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ВнутренниеПотребленияТоваровРаспоряженияНаОформлениеНаСегодня", "Распоряжения на оформление документов на сегодня");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ВнутренниеПотребленияТоваровДокументыКОтгрузке", "Документы к отгрузке");
		
	ИначеЕсли СтрокаГруппы.Показатель = "ПеремещенияТоваров" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ПеремещенияТоваровРаспоряженияНаОформлениеВсегоВРаботе", "Распоряжения на оформление в работе");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ПеремещенияТоваровДокументыКОтгрузке", "Документы к отгрузке");
		
	ИначеЕсли СтрокаГруппы.Показатель = "ДокументыСборкиРазборки" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ДокументыСборкиРазборкиРаспоряженияНаОформлениеВсегоВРаботе", "Распоряжения на оформление документов в работе");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ДокументыСборкиРазборкиРаспоряженияНаОформлениеНаСегодня", "Распоряжения на оформление документов на сегодня");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ДокументыСборкиРазборкиДокументыКСборкеРазборке", "Документы к сборке (разборке)");
		
	ИначеЕсли СтрокаГруппы.Показатель = "ЗаявкиНаОплату" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗаявкиНаОплатуКУтверждению","Заявки к утверждению");
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗаявкиНаОплатуКУтверждениюПросрочено","Утверждение просрочено",, Истина);
		
	ИначеЕсли СтрокаГруппы.Показатель = "РаспоряженияНаОтгрузку" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "РаспоряженияНаОтгрузкуКИсполнению","Распоряжения к исполнению",1);
		
	ИначеЕсли СтрокаГруппы.Показатель = "РаспоряженияНаПоступление" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "РаспоряженияНаПоступлениеКИсполнению","Распоряжения к исполнению",1);
		
	ИначеЕсли СтрокаГруппы.Показатель = "ОформлениеСкладскихАктов" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ОснованияКОформлениюСкладскихАктов","Основания к оформлению");
		
	ИначеЕсли СтрокаГруппы.Показатель = "ИнвентаризацииТоваров" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ОснованияКВыполнениюПересчетов","Распоряжения к выполнению");
		
	ИначеЕсли СтрокаГруппы.Показатель = "Задачи" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЗадачиКВыполнению","Задачи к выполнению");
		
	ИначеЕсли СтрокаГруппы.Показатель = "ЭлектронныеДокументы" Тогда
		
		ТекущиеДелаСервер.ДобавитьСтрокуПоказателя(Строки, "ЭлектронныеДокументыНаПодпись","Документы на подпись",1);
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПоляТаблицы(Группа, Показатель) Экспорт
	
	СписокЗначений = Новый СписокЗначений;
	
	Если Группа = "РаспоряженияНаОтгрузку"
	И Показатель = "РаспоряженияНаОтгрузкуКИсполнению" Тогда
		
		СписокЗначений.Добавить(ТекущиеДелаСервер.ПолучитьСтруктуруОписанияПоля(Новый ОписаниеТипов("СправочникСсылка.Склады")), "Склад");
		СписокЗначений.Добавить(ТекущиеДелаСервер.ПолучитьСтруктуруОписанияПоля(Новый ОписаниеТипов("Число"), "Количество"), 	 "ЗначениеПоказателя");
		
	ИначеЕсли Группа = "РаспоряженияНаПоступление"
	 И Показатель = "РаспоряженияНаПоступлениеКИсполнению" Тогда
		
		СписокЗначений.Добавить(ТекущиеДелаСервер.ПолучитьСтруктуруОписанияПоля(Новый ОписаниеТипов("СправочникСсылка.Склады")), "Склад");
		СписокЗначений.Добавить(ТекущиеДелаСервер.ПолучитьСтруктуруОписанияПоля(Новый ОписаниеТипов("Число"), "Количество"), 	 "ЗначениеПоказателя");
		
	ИначеЕсли Группа = "ЭлектронныеДокументы"
	 И Показатель = "ЭлектронныеДокументыНаПодпись" Тогда
		
		СписокЗначений.Добавить(ТекущиеДелаСервер.ПолучитьСтруктуруОписанияПоля(Новый ОписаниеТипов("СправочникСсылка.СертификатыЭЦП")), "Сертификат");
		СписокЗначений.Добавить(ТекущиеДелаСервер.ПолучитьСтруктуруОписанияПоля(Новый ОписаниеТипов("Число"), "Количество"), 			 "ЗначениеПоказателя");
		
	КонецЕсли;
	
	Возврат СписокЗначений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы текущих дел.

// Выполняет обработку таблицы показателя перед помещением в дерево
//
// Параметры:
//  ИмяПоказетеля 	  - Строка - имя показателя в дереве показателей
//  ТаблицаПоказателя - таблица значений, содержащая данные табличного показателя
//
Процедура ОбработатьТаблицуПоказателяПередПомещениемВДерево(ИмяПоказателя, ТаблицаПоказателя) Экспорт
	
	Если ИмяПоказателя = "РаспоряженияНаПоступлениеКИсполнению" Тогда
		
		// Строка с неуказанным значением склада удаляется, показатели для остальных
		// складов увеличиваются, включая соглашения с неуказанным складом
		СтрокаСПустымЗначениемРасшифровки = ТаблицаПоказателя.Найти(Справочники.Склады.ПустаяСсылка(), "Склад");
		
		Если СтрокаСПустымЗначениемРасшифровки <> Неопределено Тогда
			
			КоличествоСоглашенийСнеуказаннымСкладом = СтрокаСПустымЗначениемРасшифровки.ЗначениеПоказателя;
			ТаблицаПоказателя.Удалить(СтрокаСПустымЗначениемРасшифровки);
			
			Для Каждого СтрокаТаблицы из ТаблицаПоказателя Цикл
				СтрокаТаблицы.ЗначениеПоказателя = СтрокаТаблицы.ЗначениеПоказателя + КоличествоСоглашенийСнеуказаннымСкладом;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Доступность.

// Анализирует, доступна ли указанная группа показателей пользователю
//
// Параметры:
//  ИмяГруппы - имя группы, доступность которой анализируется
//
// Возвращаемое значение:
//  Булево - Доступность группы
//
Функция ГруппаПоказателейДоступна(ИмяГруппы) Экспорт
	
	Результат = Истина;
	
	Если ИмяГруппы = "ТиповыеСоглашенияСКлиентами" ИЛИ ИмяГруппы = "ИндивидуальныеСоглашенияСКлиентами" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
		 			И ПравоДоступа("Просмотр", Метаданные.Справочники.СоглашенияСКлиентами);
		
	ИначеЕсли ИмяГруппы = "ДоговорыСКлиентами" Тогда
		
		Результат = ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентов)
					И ДоступныДоговоры("СКлиентами");
		
	ИначеЕсли ИмяГруппы = "ЗаказыКлиентов" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")
					И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказКлиента) 
					И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами)
					И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыКлиентов);
		
	ИначеЕсли ИмяГруппы = "СделкиСКлиентами" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьСделкиСКлиентами")
					И ПравоДоступа("Просмотр", Метаданные.Справочники.СделкиСКлиентами);
		
	ИначеЕсли ИмяГруппы = "КоммерческиеПредложенияКлиентам" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьКоммерческиеПредложенияКлиентам")
					И ПравоДоступа("Просмотр", Метаданные.Документы.КоммерческоеПредложениеКлиенту);
		
	ИначеЕсли ИмяГруппы = "ЗаданияТорговымПредставителям" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьЗаданияДляУправленияТорговымиПредставителями")
					И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаданиеТорговомуПредставителю);
		
	ИначеЕсли ИмяГруппы = "ДокументыРеализацииТоваровИУслуг" Тогда
		
		Результат = ПравоДоступа("Просмотр", Метаданные.Документы.РеализацияТоваровУслуг)
					И ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента)
					И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыКлиентов);
		
	ИначеЕсли ИмяГруппы = "ЗаявкиНаВозвратТоваровОтКлиентов" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов")
					И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказКлиента)
					И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами)
					И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыКлиентов);
		
	ИначеЕсли ИмяГруппы = "ОтчетыКомиссионеров" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах")
					И ПравоДоступа("Просмотр", Метаданные.ЖурналыДокументов.ОтчетыКомиссионеров)
					И ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.ТоварыПереданныеНаКомиссию);
		
	ИначеЕсли ИмяГруппы = "СоглашенияСПоставщиками" Тогда
		
		Результат = ПравоДоступа("Просмотр", Метаданные.Справочники.СоглашенияСПоставщиками);
		
	ИначеЕсли ИмяГруппы = "ДоговорыСПоставщиками" Тогда
		
		Результат = ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентов)
					И ДоступныДоговоры("СПоставщиками");
		
	ИначеЕсли ИмяГруппы = "ЗаказыПоставщикам" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам")
					И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказПоставщику) 
					И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками);
		
	ИначеЕсли ИмяГруппы = "ДокументыПоступленияТоваровИУслуг" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам")
					И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказПоставщику) 
					И ПравоДоступа("Просмотр", Метаданные.Документы.ПоступлениеТоваровУслуг)
					И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПоставщикам);
		
	ИначеЕсли ИмяГруппы = "ДоверенностиНаПолучениеТоваров" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьДоверенностиНаПолучениеТоваров")
					И ПравоДоступа("Просмотр", Метаданные.Документы.ДоверенностьНаПолучениеТоваров);
		
	ИначеЕсли ИмяГруппы = "ОтчетыКомитентам" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках")
					И ПравоДоступа("Просмотр", Метаданные.ЖурналыДокументов.ОтчетыКомитентам)
					И ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту);
		
	ИначеЕсли ИмяГруппы = "ВнутренниеПотребленияТоваров" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаВнутреннееПотребление")
					И ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаВнутреннееПотребление")
					И ПравоДоступа("Просмотр", Метаданные.Документы.ВнутреннееПотреблениеТоваров)
					И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказНаВнутреннееПотребление)
					И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыНаВнутреннееПотребление);
		
	ИначеЕсли ИмяГруппы = "ПеремещенияТоваров" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение")
					И ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаПеремещение")
					И ПравоДоступа("Просмотр", Метаданные.Документы.ПеремещениеТоваров)
					И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказНаПеремещение)
					И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыНаПеремещение);
		
	ИначеЕсли ИмяГруппы = "ДокументыСборкиРазборки" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку")
					И ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовНаСборку")
					И ПравоДоступа("Просмотр", Метаданные.Документы.СборкаТоваров)
					И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказНаСборку)
					И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыНаСборку);
		
	ИначеЕсли ИмяГруппы = "ЗаявкиНаОплату" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеДенежныхСредств")
					И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств);
		
	ИначеЕсли ИмяГруппы = "РаспоряженияНаОтгрузку" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке")
					И ПравоДоступа("Просмотр", Метаданные.Обработки.УправлениеОтгрузкой);
		
	ИначеЕсли ИмяГруппы = "РаспоряженияНаПоступление" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриПоступлении")
					И ПравоДоступа("Просмотр", Метаданные.Обработки.УправлениеПоступлением);
		
	ИначеЕсли ИмяГруппы = "Задачи" Тогда
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи")
					И ПравоДоступа("Просмотр", Метаданные.Задачи.ЗадачаИсполнителя);
		
	ИначеЕсли ИмяГруппы = "ОформлениеСкладскихАктов" Тогда
		
		Результат = ПравоДоступа("Просмотр", Метаданные.ЖурналыДокументов.СкладскиеАкты)
					И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ТоварыКОформлениюИзлишковНедостач);
		
	ИначеЕсли ИмяГруппы = "ИнвентаризацииТоваров" Тогда
		
		Результат = ПравоДоступа("Просмотр", Метаданные.Документы.РаспоряжениеНаИнвентаризациюТоваров);
		
	ИначеЕсли ИмяГруппы = "ЭлектронныеДокументы" Тогда		
		
		Результат = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД")
					И ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеЦифровыеПодписи")
					И ЭлектронныеДокументыПереопределяемый.ЕстьПравоОбработкиЭД();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Анализирует, доступен ли указанный показатель пользователю,
// исходя из роли пользователя, или еще каких-либо условий
//
// Параметры:
//  ИмяПоказателя - имя показателя, доступность которого анализируется
//
// Возвращаемое значение:
//  Доступность показателя, Истина - показатель доступен, Ложь - нет
//
Функция ПоказательДоступен(ИмяПоказателя, ИмяГруппы) Экспорт
	
	// Заполним "аналитики" доступности
	СтруктураДоступности 	= Новый Структура("Видимость, ВидимостьПоУмолчанию", Ложь, Ложь);
	МассивСвязанныхОбъектов = Новый Массив;
	МассивТребуемыхРолей	= Новый Массив;
	
	Если ИмяГруппы = "ТиповыеСоглашенияСКлиентами"
	 ИЛИ ИмяГруппы = "ИндивидуальныеСоглашенияСКлиентами" Тогда
		
		ОбъектМетаданных = Метаданные.Справочники.СоглашенияСКлиентами;
		
	ИначеЕсли ИмяГруппы = "ДоговорыСКлиентами" Тогда
		
		ОбъектМетаданных = Метаданные.Справочники.ДоговорыКонтрагентов;
		
	ИначеЕсли ИмяГруппы = "СделкиСКлиентами" Тогда
		
		ОбъектМетаданных = Метаданные.Справочники.СделкиСКлиентами;
		
	ИначеЕсли ИмяГруппы = "КоммерческиеПредложенияКлиентам" Тогда
		
		ОбъектМетаданных = Метаданные.Документы.КоммерческоеПредложениеКлиенту;
		
	ИначеЕсли ИмяГруппы = "ЗаказыКлиентов" Тогда
		
		МассивСвязанныхОбъектов.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентами);
		МассивСвязанныхОбъектов.Добавить(Метаданные.РегистрыНакопления.ЗаказыКлиентов);
		
		ОбъектМетаданных = Метаданные.Документы.ЗаказКлиента;
		
	ИначеЕсли ИмяГруппы = "ЗаданияТорговымПредставителям" Тогда
		
		ОбъектМетаданных = Метаданные.Документы.ЗаданиеТорговомуПредставителю;
		
	ИначеЕсли ИмяГруппы = "ДокументыРеализацииТоваровИУслуг" Тогда
		
		Если ИмяПоказателя = "РаспоряженияНаОформлениеРеализацийТоваровИУслугВсегоВРаботе"
		 ИЛИ ИмяПоказателя = "РаспоряженияНаОформлениеРеализацийТоваровИУслугНаСегодня" Тогда
			
			Если НЕ (ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") 
				ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов")) Тогда
				Возврат СтруктураДоступности;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РеализацииТоваровИУслугКОтгрузке" Тогда
			
			Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг") Тогда
				Возврат СтруктураДоступности;
			КонецЕсли;
			
		КонецЕсли;
		
		МассивСвязанныхОбъектов.Добавить(Метаданные.Документы.ЗаказКлиента);
		МассивСвязанныхОбъектов.Добавить(Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента);
		МассивСвязанныхОбъектов.Добавить(Метаданные.РегистрыНакопления.ЗаказыКлиентов);
		
		ОбъектМетаданных = Метаданные.Документы.РеализацияТоваровУслуг;
		
	ИначеЕсли ИмяГруппы = "ЗаявкиНаВозвратТоваровОтКлиентов" Тогда
		
		ОбъектМетаданных = Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента;
		
	ИначеЕсли ИмяГруппы = "ОтчетыКомиссионеров" Тогда
		
		МассивСвязанныхОбъектов.Добавить(Метаданные.РегистрыНакопления.ТоварыПереданныеНаКомиссию);
		
		ОбъектМетаданных = Метаданные.ЖурналыДокументов.ОтчетыКомиссионеров;
		
	ИначеЕсли ИмяГруппы = "СоглашенияСПоставщиками" Тогда
		
		ОбъектМетаданных = Метаданные.Справочники.СоглашенияСПоставщиками;
		
	ИначеЕсли ИмяГруппы = "ДоговорыСПоставщиками" Тогда
		
		ОбъектМетаданных = Метаданные.Справочники.ДоговорыКонтрагентов;
		
	ИначеЕсли ИмяГруппы = "ЗаказыПоставщикам" Тогда
		
		МассивСвязанныхОбъектов.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщиками);
		
		ОбъектМетаданных = Метаданные.Документы.ЗаказПоставщику;
		
	ИначеЕсли ИмяГруппы = "ДокументыПоступленияТоваровИУслуг" Тогда
		
		МассивСвязанныхОбъектов.Добавить(Метаданные.Документы.ЗаказПоставщику);
		МассивСвязанныхОбъектов.Добавить(Метаданные.РегистрыНакопления.ЗаказыПоставщикам);
		
		ОбъектМетаданных = Метаданные.Документы.ПоступлениеТоваровУслуг;
		
	ИначеЕсли ИмяГруппы = "ДоверенностиНаПолучениеТоваров" Тогда
		
		Если ИмяПоказателя = "РаспоряженияНаОформлениеДоверенностейНаПолучениеТоваров" Тогда
			
			Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
				Возврат СтруктураДоступности;
			КонецЕсли;
			
			МассивСвязанныхОбъектов.Добавить(Метаданные.Документы.ЗаказПоставщику);
			МассивСвязанныхОбъектов.Добавить(Метаданные.РегистрыНакопления.ЗаказыПоставщикам);
			
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.Документы.ДоверенностьНаПолучениеТоваров;
		
	ИначеЕсли ИмяГруппы = "ОтчетыКомитентам" Тогда
		
		МассивСвязанныхОбъектов.Добавить(Метаданные.РегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту);
		
		ОбъектМетаданных = Метаданные.ЖурналыДокументов.ОтчетыКомитентам;
		
	ИначеЕсли ИмяГруппы = "ВнутренниеПотребленияТоваров" Тогда
		
		МассивСвязанныхОбъектов.Добавить(Метаданные.Документы.ЗаказНаВнутреннееПотребление);
		МассивСвязанныхОбъектов.Добавить(Метаданные.РегистрыНакопления.ЗаказыНаВнутреннееПотребление);
		
		ОбъектМетаданных = Метаданные.Документы.ВнутреннееПотреблениеТоваров;
		
	ИначеЕсли ИмяГруппы = "ПеремещенияТоваров" Тогда
		
		МассивСвязанныхОбъектов.Добавить(Метаданные.Документы.ЗаказНаПеремещение);
		МассивСвязанныхОбъектов.Добавить(Метаданные.РегистрыНакопления.ЗаказыНаПеремещение);
		
		ОбъектМетаданных = Метаданные.Документы.ПеремещениеТоваров;
		
	ИначеЕсли ИмяГруппы = "ДокументыСборкиРазборки" Тогда
		
		МассивСвязанныхОбъектов.Добавить(Метаданные.Документы.ЗаказНаСборку);
		МассивСвязанныхОбъектов.Добавить(Метаданные.РегистрыНакопления.ЗаказыНаСборку);
		
		ОбъектМетаданных = Метаданные.Документы.СборкаТоваров;
		
	ИначеЕсли ИмяГруппы = "ЗаявкиНаОплату" Тогда
		
		МассивТребуемыхРолей.Добавить("ПравоУтвержденияЗаявокНаРасходованиеДенежныхСредств");
		
		ОбъектМетаданных = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств;
		
	ИначеЕсли ИмяГруппы = "РаспоряженияНаОтгрузку" Тогда
		
		ОбъектМетаданных = Метаданные.Обработки.УправлениеОтгрузкой;
		
	ИначеЕсли ИмяГруппы = "РаспоряженияНаПоступление" Тогда
		
		ОбъектМетаданных = Метаданные.Обработки.УправлениеПоступлением;
		
	ИначеЕсли ИмяГруппы = "Задачи" Тогда
		
		ОбъектМетаданных = Метаданные.Задачи.ЗадачаИсполнителя;
		
	ИначеЕсли ИмяГруппы = "ОформлениеСкладскихАктов" Тогда
		
		МассивСвязанныхОбъектов.Добавить(Метаданные.РегистрыНакопления.ТоварыКОформлениюИзлишковНедостач);
		
		ОбъектМетаданных = Метаданные.ЖурналыДокументов.СкладскиеАкты;
		
	ИначеЕсли ИмяГруппы = "ИнвентаризацииТоваров" Тогда
		
		МассивСвязанныхОбъектов.Добавить(Метаданные.Документы.РаспоряжениеНаИнвентаризациюТоваров);
		
		ОбъектМетаданных = Метаданные.Документы.ПересчетТоваров;
		
	ИначеЕсли ИмяГруппы = "ЭлектронныеДокументы" Тогда	
		
		ОбъектМетаданных = Метаданные.Обработки.ЭлектронныеДокументы;

	КонецЕсли;
	
	// Определим доступность показателя
	СвязанныеОбъектыДоступны = Истина;
	ТребуемыеРолиДоступны 	 = Истина;
	
	Для Каждого СвязанныйОбъектМетаданных Из МассивСвязанныхОбъектов Цикл
		Если НЕ ПравоДоступа("Чтение", СвязанныйОбъектМетаданных) Тогда
			СвязанныеОбъектыДоступны = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТребуемаяРоль Из МассивТребуемыхРолей Цикл
		Если НЕ Пользователи.РолиДоступны(ТребуемаяРоль) Тогда
			ТребуемыеРолиДоступны = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Видимость 						 = ПравоДоступа("Просмотр", ОбъектМетаданных) И СвязанныеОбъектыДоступны И ТребуемыеРолиДоступны;
	ЕстьПравоДобавленияИспользования = ПравоДоступа(
		?(Метаданные.Обработки.Содержит(ОбъектМетаданных), "Использование", "ИнтерактивноеДобавление"),
		ОбъектМетаданных);
	
	СтруктураДоступности.Вставить("Видимость", 			  Видимость);
	СтруктураДоступности.Вставить("ВидимостьПоУмолчанию", Видимость И ЕстьПравоДобавленияИспользования);
	
	Возврат СтруктураДоступности;
	
КонецФункции
 
////////////////////////////////////////////////////////////////////////////////
// Запросы для расчета показателей.

// Получает текст запроса для расчета показателей указанной группы показателей
//
// Параметры:
//  Группа - Имя группы показателей, для которой требуется получить текст запроса
//
// Возвращаемое значение:
//  Строка, содержащая текст запроса
//
Функция ПолучитьТекстаЗапросаДляРасчетаПоказателейГруппы(ИмяГруппы) Экспорт
	
	Если ИмяГруппы = "ТиповыеСоглашенияСКлиентами" Тогда
		
		Возврат ПолучитьТекстЗапросаДляТиповыхСоглашенийСКлиентами();
		
	ИначеЕсли ИмяГруппы = "ИндивидуальныеСоглашенияСКлиентами" Тогда
		
		Возврат ПолучитьТекстЗапросаДляИндивидуальныхСоглашенийСКлиентами();
		
	ИначеЕсли ИмяГруппы = "ДоговорыСКлиентами" Тогда
		
		Возврат ПолучитьТекстЗапросаДляДоговоровСКлиентами();
		
	ИначеЕсли ИмяГруппы = "СделкиСКлиентами" Тогда
		
		Возврат ПолучитьТекстЗапросаДляСделокСКлиентами();
		
	ИначеЕсли ИмяГруппы = "КоммерческиеПредложенияКлиентам" Тогда
		
		Возврат ПолучитьТекстЗапросаДляКоммерческихПредложенийКлиентам();
		
	ИначеЕсли ИмяГруппы = "ЗаказыКлиентов" Тогда
		
		Возврат ПолучитьТекстЗапросаДляЗаказовКлиентов();
		
	ИначеЕсли ИмяГруппы = "ЗаданияТорговымПредставителям" Тогда
		
		Возврат ПолучитьТекстЗапросаДляЗаданийТорговымПредставителям();
		
	ИначеЕсли ИмяГруппы = "ДокументыРеализацииТоваровИУслуг" Тогда
		
		Возврат ПолучитьТекстЗапросаДляРеализацийТоваровИУслуг();
		
	ИначеЕсли ИмяГруппы = "ЗаявкиНаВозвратТоваровОтКлиентов" Тогда
		
		Возврат ПолучитьТекстЗапросаДляЗаявокНаВозвратТоваровОтКлиентов();
		
	ИначеЕсли ИмяГруппы = "ОтчетыКомиссионеров" Тогда
		
		Возврат ПолучитьТекстЗапросаДляОтчетовКомиссионеров();
		
	ИначеЕсли ИмяГруппы = "СоглашенияСПоставщиками" Тогда
		
		Возврат ПолучитьТекстЗапросаДляСоглашенийСПоставщиками();
		
	ИначеЕсли ИмяГруппы = "ДоговорыСПоставщиками" Тогда
		
		Возврат ПолучитьТекстЗапросаДляДоговоровСПоставщиками();
		
	ИначеЕсли ИмяГруппы = "ЗаказыПоставщикам" Тогда
		
		Возврат ПолучитьТекстЗапросаДляЗаказовПоставщикам();
		
	ИначеЕсли ИмяГруппы = "ДокументыПоступленияТоваровИУслуг" Тогда
		
		Возврат ПолучитьТекстЗапросаДляПоступленийТоваровИУслуг();
		
	ИначеЕсли ИмяГруппы = "ДоверенностиНаПолучениеТоваров" Тогда
		
		Возврат ПолучитьТекстЗапросаДляДоверенностейНаПолучениеТоваров();
		
	ИначеЕсли ИмяГруппы = "ОтчетыКомитентам" Тогда
		
		Возврат ПолучитьТекстЗапросаДляОтчетовКомитентам();
		
	ИначеЕсли ИмяГруппы = "ВнутренниеПотребленияТоваров" Тогда
		
		Возврат ПолучитьТекстЗапросаДляВнутреннихПотребленийТоваров();
		
	ИначеЕсли ИмяГруппы = "ПеремещенияТоваров" Тогда
		
		Возврат ПолучитьТекстЗапросаДляПеремещенийТоваров();
		
	ИначеЕсли ИмяГруппы = "ДокументыСборкиРазборки" Тогда
		
		Возврат ПолучитьТекстЗапросаДляСборокТоваров();
		
	ИначеЕсли ИмяГруппы = "ЗаявкиНаОплату" Тогда
		
		Возврат ПолучитьТекстЗапросаДляЗаявокНаОплату();
		
	ИначеЕсли ИмяГруппы = "Задачи" Тогда
		
		Возврат ПолучитьТекстЗапросаДляЗадач();
		
	ИначеЕсли ИмяГруппы = "ОформлениеСкладскихАктов" Тогда
		
		Возврат ПолучитьТекстЗапросаДляОформленияСкладскихАктов();
		
	ИначеЕсли ИмяГруппы = "ИнвентаризацииТоваров" Тогда
		
		Возврат ПолучитьТекстЗапросаДляПересчетовТоваров();
		
	ИначеЕсли ИмяГруппы = "РаспоряженияНаОтгрузку" Тогда
		
		Возврат ПолучитьТекстЗапросаДляРаспоряженийНаОтгрузку();
		
	ИначеЕсли ИмяГруппы = "РаспоряженияНаПоступление" Тогда
		
		Возврат ПолучитьТекстЗапросаДляРаспоряженийНаПоступление();
		
	ИначеЕсли ИмяГруппы = "ЭлектронныеДокументы" Тогда
		
		Возврат ПолучитьТекстЗапросаДляЭлектронныхДокументов();	
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Устанавливает параметры запроса для указанных групп показателей
//
// Параметры:
//  Запрос 		- запрос для получения показателей
//  МассивГрупп - массив групп получаемых показателей
//
Процедура УстановитьПараметрыЗапроса(Запрос, МассивГрупп) Экспорт
	
	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	ТекущаяДата  = ТекущаяДатаСеанса();
	
	// Общие параметры для всех групп показателей
	Запрос.УстановитьПараметр("Пользователь", 			Пользователь);
	Запрос.УстановитьПараметр("ТекущаяДата",  			ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДатаАктуальности", 	  	НачалоДня(ТекущаяДата));
	Запрос.УстановитьПараметр("ДатаПослеАктуальности", 	НачалоДня(ТекущаяДата) + 86400);
	
	// Параметры для отдельных групп показателей
	Для Каждого Группа Из МассивГрупп Цикл
		
		Если Группа = "ДокументыРеализацииТоваровИУслуг"
		 Или Группа = "ВнутренниеПотребленияТоваров"
		 Или Группа = "ДокументыСборкиРазборки" Тогда
			
			Запрос.УстановитьПараметр("ДатаОтгрузки", КонецДня(ТекущаяДата));
			
		ИначеЕсли Группа = "ЗаказыКлиентов" Тогда
			
			Запрос.УстановитьПараметр(
				"НеИспользоватьСтатусыЗаказовКлиентов",
				НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовКлиентов"));
			
		ИначеЕсли Группа = "ЗаказыПоставщикам" Тогда
			
			Запрос.УстановитьПараметр(
				"НеИспользоватьСтатусыЗаказовПоставщикам",
				НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам"));
			
		ИначеЕсли Группа = "ЗаявкиНаВозвратТоваровОтКлиентов" Тогда
			
			Запрос.УстановитьПараметр(
				"НеИспользоватьСтатусыЗаявокНаВозврат",
				НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаявокНаВозврат"));
			
		ИначеЕсли Группа = "ЭлектронныеДокументы" Тогда
			
			Запрос.УстановитьПараметр("ТекущийПользователь", Пользователь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ДоступныДоговоры(ВидДоговора)
	
	МассивХозяйственныхОпераций = Новый Массив;
	
	Если ВидДоговора = "СКлиентами" Тогда
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	Иначе
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		МассивХозяйственныхОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
	КонецЕсли;
	
	ТаблицаНаборы = УправлениеДоступом.ТаблицаНаборыЗначенийДоступа();
	
	//Заполним наборы значений доступа к договорам
	Сч = 1;
	Для Каждого ХозяйственнаяОперация из МассивХозяйственныхОпераций Цикл
		СтрокаТаб = ТаблицаНаборы.Добавить();
		СтрокаТаб.НомерНабора     = Сч;
		СтрокаТаб.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ХозяйственныеОперации;
		СтрокаТаб.ЗначениеДоступа = ХозяйственнаяОперация;
		Сч = Сч+1;
	КонецЦикла;
	
	Возврат УправлениеДоступом.ЕстьРоль("ДобавлениеИзменениеДоговоровКонтрагентов", ТаблицаНаборы);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Тексты запросов для расчета показателей.

Функция ПолучитьТекстЗапросаДляСделокСКлиентами()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СделкиСКлиентами.Ссылка) КАК СделкиСКлиентамиВсегоВРаботе
	|ИЗ
	|	Справочник.СделкиСКлиентами КАК СделкиСКлиентами
	|ГДЕ
	|	СделкиСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСделок.ВРаботе)
	|	И СделкиСКлиентами.Ответственный = &Пользователь
	|	И (НЕ СделкиСКлиентами.ПометкаУдаления)
	|	И (НЕ СделкиСКлиентами.Закрыта)"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляТиповыхСоглашенийСКлиентами()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.НеСогласовано)
	|				ТОГДА СоглашениеСКлиентом.Ссылка
	|		КОНЕЦ) КАК ТиповыеСоглашенияСКлиентамиНаСогласовании,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|	КОГДА НЕ СоглашениеСКлиентом.ПометкаУдаления
	|		И СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.НеСогласовано)
	|		И ((СоглашениеСКлиентом.ДатаНачалаДействия <> ДАТАВРЕМЯ(1,1,1) И
	|		СоглашениеСКлиентом.ДатаНачалаДействия < &ДатаАктуальности)
	|		ИЛИ (СоглашениеСКлиентом.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1,1,1) И
	|		СоглашениеСКлиентом.ДатаОкончанияДействия < &ДатаАктуальности))
	|	ТОГДА
	|		ИСТИНА
	|	// СРОК ДЕЙСТВИЯ ИСТЕК //////////////////////////////////////////////////////
	|	КОГДА СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|		И ((СоглашениеСКлиентом.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1,1,1) И
	|		СоглашениеСКлиентом.ДатаОкончанияДействия < &ДатаАктуальности))
	|	ТОГДА
	|		ИСТИНА
	|	// СРОК ДЕЙСТВИЯ НЕ НАСТУПИЛ ////////////////////////////////////////////////
	|	КОГДА СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|		И ((СоглашениеСКлиентом.ДатаНачалаДействия <> ДАТАВРЕМЯ(1,1,1) И
	|		СоглашениеСКлиентом.ДатаНачалаДействия > &ДатаАктуальности))
	|	ТОГДА
	|		СоглашениеСКлиентом.Ссылка
	|		КОНЕЦ) КАК ТиповыеСоглашенияСКлиентамиПросроченные
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
	|ГДЕ
	|	СоглашениеСКлиентом.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Закрыто)
	|	И СоглашениеСКлиентом.Типовое
	|	И СоглашениеСКлиентом.Менеджер = &Пользователь
	|	И (НЕ СоглашениеСКлиентом.ПометкаУдаления)"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляИндивидуальныхСоглашенийСКлиентами()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.НеСогласовано)
	|				ТОГДА СоглашениеСКлиентом.Ссылка
	|		КОНЕЦ) КАК ИндивидуальныеСоглашенияСКлиентамиНаСогласовании,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|	КОГДА НЕ СоглашениеСКлиентом.ПометкаУдаления
	|		И СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.НеСогласовано)
	|		И ((СоглашениеСКлиентом.ДатаНачалаДействия <> ДАТАВРЕМЯ(1,1,1) И
	|		СоглашениеСКлиентом.ДатаНачалаДействия < &ДатаАктуальности)
	|		ИЛИ (СоглашениеСКлиентом.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1,1,1) И
	|		СоглашениеСКлиентом.ДатаОкончанияДействия < &ДатаАктуальности))
	|	ТОГДА
	|		ИСТИНА
	|	// СРОК ДЕЙСТВИЯ ИСТЕК //////////////////////////////////////////////////////
	|	КОГДА СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|		И ((СоглашениеСКлиентом.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1,1,1) И
	|		СоглашениеСКлиентом.ДатаОкончанияДействия < &ДатаАктуальности))
	|	ТОГДА
	|		ИСТИНА
	|	// СРОК ДЕЙСТВИЯ НЕ НАСТУПИЛ ////////////////////////////////////////////////
	|	КОГДА СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|		И ((СоглашениеСКлиентом.ДатаНачалаДействия <> ДАТАВРЕМЯ(1,1,1) И
	|		СоглашениеСКлиентом.ДатаНачалаДействия > &ДатаАктуальности))
	|	ТОГДА
	|		СоглашениеСКлиентом.Ссылка
	|		КОНЕЦ) КАК ИндивидуальныеСоглашенияСКлиентамиПросроченные
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
	|ГДЕ
	|	СоглашениеСКлиентом.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Закрыто)
	|	И (НЕ СоглашениеСКлиентом.Типовое)
	|	И СоглашениеСКлиентом.Менеджер = &Пользователь
	|	И (НЕ СоглашениеСКлиентом.ПометкаУдаления)"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляДоговоровСКлиентами()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДоговорСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован)
	|				ТОГДА ДоговорСКлиентом.Ссылка
	|		КОНЕЦ) КАК ДоговорыСКлиентамиНаСогласовании,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДоговорСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован)
	|					И (ДоговорСКлиентом.ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|							И ДоговорСКлиентом.ДатаНачалаДействия < &ДатаАктуальности
	|						ИЛИ ДоговорСКлиентом.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|							И ДоговорСКлиентом.ДатаОкончанияДействия < &ДатаАктуальности)
	|				ТОГДА ДоговорСКлиентом.Ссылка
	|			КОГДА ДоговорСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|					И ДоговорСКлиентом.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДоговорСКлиентом.ДатаОкончанияДействия < &ДатаАктуальности
	|				ТОГДА ДоговорСКлиентом.Ссылка
	|		КОНЕЦ) КАК ДоговорыСКлиентамиПросроченные
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорСКлиентом
	|ГДЕ
	|	ДоговорСКлиентом.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Закрыт)
	|	И (ДоговорСКлиентом.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|			ИЛИ ДоговорСКлиентом.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию))
	|	И ДоговорСКлиентом.Менеджер = &Пользователь
	|	И (НЕ ДоговорСКлиентом.ПометкаУдаления)"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляЗаказовКлиентов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА &НеИспользоватьСтатусыЗаказовКлиентов
	|			ТОГДА ВЫБОР
	|					КОГДА ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ((ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) > 0
	|							ИЛИ ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаОстаток, 0) > 0) ИЛИ НЕ ДокументЗаказКлиента.Проведен)
	|						ТОГДА ДокументЗаказКлиента.Ссылка
	|				КОНЕЦ
	|		ИНАЧЕ ДокументЗаказКлиента.Ссылка
	|	КОНЕЦ) КАК ЗаказыКлиентовВсегоВРаботе,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	// ОЖИДАЕТСЯ СОГЛАСОВАНИЕ /////////////////////////////////////////////////////
	|			КОГДА ДокументЗаказКлиента.Проведен И ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|					И ДокументЗаказКлиента.ДатаСогласования < &ДатаПослеАктуальности
	|					И ДокументЗаказКлиента.ДатаСогласования <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДокументЗаказКлиента.Ссылка
	// ОЖИДАЕТСЯ АВАНС ДО ОБЕСПЕЧЕНИЯ /////////////////////////////////////////////
	|			КОГДА ДокументЗаказКлиента.Проведен И (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован) ИЛИ &НеИспользоватьСтатусыЗаказовКлиентов)
	|					И ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ДокументЗаказКлиента.СуммаАвансаДоОбеспечения > 0
	|					И ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	|					И РасчетыСКлиентамиОстаткиНаДатуПослеАктуальности.КОплатеОстаток > 0
	|				ТОГДА ДокументЗаказКлиента.Ссылка
	// ОЖИДАЕТСЯ ОБЕСПЕЧЕНИЕ //////////////////////////////////////////////////////
	|			КОГДА ДокументЗаказКлиента.Проведен И ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
	|					И ДокументЗаказКлиента.СуммаДокумента > 0
	|					И (ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	|						ИЛИ ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|					И ДокументЗаказКлиента.ДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументЗаказКлиента.ДатаОтгрузки < &ДатаПослеАктуальности
	|				ТОГДА ДокументЗаказКлиента.Ссылка
	// ОЖИДАЕТСЯ ПРЕДОПЛАТА ДО ОТГРУЗКИ /////////////////////////////////////////////////////
	|			КОГДА ДокументЗаказКлиента.Проведен И (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован ) ИЛИ &НеИспользоватьСтатусыЗаказовКлиентов
	|				ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению))
	|					И ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0
	|					И ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	|					И РасчетыСКлиентамиОстаткиНаДатуПослеАктуальности.КОплатеОстаток > 0
	|				ТОГДА ДокументЗаказКлиента.Ссылка
	// ОЖИДАЕТСЯ УСТАНОВКА СТАТУСА К ОТГРУЗКЕ /////////////////////////////////////
	|			КОГДА ДокументЗаказКлиента.Проведен И (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
	|				ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению))
	|					И (ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	|						ИЛИ ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|					И ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаОстаток, 0) <> 0
	|					И ДокументЗаказКлиента.ДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументЗаказКлиента.ДатаОтгрузки < &ДатаПослеАктуальности
	|				ТОГДА ДокументЗаказКлиента.Ссылка
	// ОЖИДАЕТСЯ ОТГРУЗКА /////////////////////////////////////////////////////////
	|			КОГДА ДокументЗаказКлиента.Проведен И (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению) ИЛИ &НеИспользоватьСтатусыЗаказовКлиентов
	|					ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке))
	|					И (ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	|						ИЛИ ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|					И ЕСТЬNULL(ЗаказыКлиентовОстаткиНаДатуПослеАктуальности.КОформлениюОстаток, 0) <> 0
	|				ТОГДА ДокументЗаказКлиента.Ссылка
	// ОЖИДАЕТСЯ ОПЛАТА ПОСЛЕ ОТГРУЗКИ ////////////////////////////////////////////
	|			КОГДА ДокументЗаказКлиента.Проведен И (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке) ИЛИ &НеИспользоватьСтатусыЗаказовКлиентов)
	|					И ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ДокументЗаказКлиента.СуммаДокумента - ДокументЗаказКлиента.СуммаАвансаДоОбеспечения + ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0
	|					И ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюОстаток, 0) = 0
	|					И ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) > 0
	|					И РасчетыСКлиентамиОстаткиНаДатуПослеАктуальности.КОплатеОстаток > 0
	|				ТОГДА ДокументЗаказКлиента.Ссылка
	|		КОНЕЦ) КАК ЗаказыКлиентовНаСегодня,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	// ПРОСРОЧЕН АВАНС ////////////////////////////////////////////////////////////
	|			КОГДА ДокументЗаказКлиента.Проведен И (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован) ИЛИ &НеИспользоватьСтатусыЗаказовКлиентов)
	|					И ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ДокументЗаказКлиента.СуммаАвансаДоОбеспечения > 0
	|					И ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	|					И РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток > 0
	|				ТОГДА ДокументЗаказКлиента.Ссылка
	// ПРОСРОЧЕНА ПРЕДОПЛАТА //////////////////////////////////////////////////////
	|			КОГДА ДокументЗаказКлиента.Проведен И (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению) ИЛИ &НеИспользоватьСтатусыЗаказовКлиентов)
	|					И ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0
	|					И ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	|					И РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток > 0
	|				ТОГДА ДокументЗаказКлиента.Ссылка
	// ПРОСРОЧЕНА ОПЛАТА ПОСЛЕ ОТГРУЗКИ ///////////////////////////////////////////
	|			КОГДА ДокументЗаказКлиента.Проведен И (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке) ИЛИ &НеИспользоватьСтатусыЗаказовКлиентов)
	|					И ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ДокументЗаказКлиента.СуммаДокумента - ДокументЗаказКлиента.СуммаАвансаДоОбеспечения + ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0
	|					И ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюОстаток, 0) = 0
	|					И ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) > 0
	|					И РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток > 0
	|				ТОГДА ДокументЗаказКлиента.Ссылка
	|		КОНЕЦ) КАК ЗаказыКлиентовПросроченаОплата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	// ПРОСРОЧЕНО СОГЛАСОВАНИЕ ////////////////////////////////////////////////////
	|			КОГДА ДокументЗаказКлиента.Проведен И ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|					И ДокументЗаказКлиента.ДатаСогласования <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументЗаказКлиента.ДатаСогласования < &ДатаАктуальности
	|				ТОГДА ДокументЗаказКлиента.Ссылка
	// ПРОСРОЧЕНО ОБЕСПЕЧЕНИЕ /////////////////////////////////////////////////////
	|			КОГДА ДокументЗаказКлиента.Проведен И ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Согласован)
	|					И ДокументЗаказКлиента.СуммаДокумента > 0
	|					И (ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	|						ИЛИ ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|					И ДокументЗаказКлиента.ДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументЗаказКлиента.ДатаОтгрузки < &ДатаАктуальности
	|				ТОГДА ДокументЗаказКлиента.Ссылка
	// ПРОСРОЧЕНА ОЖИДАЕТСЯ ОТГРУЗКА //////////////////////////////////////////////
	|			КОГДА ДокументЗаказКлиента.Проведен И ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОбеспечению)
	|					И (ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	|						ИЛИ ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|					И ДокументЗаказКлиента.ДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументЗаказКлиента.ДатаОтгрузки < &ДатаАктуальности
	|				ТОГДА ДокументЗаказКлиента.Ссылка
	// ПРОСРОЧЕНА ОТГРУЗКА ////////////////////////////////////////////////////////
	|			КОГДА ДокументЗаказКлиента.Проведен И (ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.КОтгрузке) ИЛИ &НеИспользоватьСтатусыЗаказовКлиентов)
	|					И (ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
	|						ИЛИ ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|					И ЕСТЬNULL(ЗаказыКлиентовОстаткиНаДатуАктуальности.КОформлениюОстаток, 0) <> 0
	|				ТОГДА ДокументЗаказКлиента.Ссылка
	|		КОНЕЦ) КАК ЗаказыКлиентовПросроченоИсполнение
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки КАК РасчетыСКлиентамиОстатки
	|		ПО ДокументЗаказКлиента.Ссылка = РасчетыСКлиентамиОстатки.ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ), ) КАК РасчетыСКлиентамиОстаткиНаДатуАктуальности
	|		ПО ДокументЗаказКлиента.Ссылка = РасчетыСКлиентамиОстаткиНаДатуАктуальности.ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(КОНЕЦПЕРИОДА(&ДатаПослеАктуальности, ДЕНЬ), ) КАК РасчетыСКлиентамиОстаткиНаДатуПослеАктуальности
	|		ПО ДокументЗаказКлиента.Ссылка = РасчетыСКлиентамиОстаткиНаДатуПослеАктуальности.ЗаказКлиента}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.Остатки КАК ЗаказыКлиентовОстатки
	|		ПО ДокументЗаказКлиента.Ссылка = ЗаказыКлиентовОстатки.ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.Остатки(КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ), ) КАК ЗаказыКлиентовОстаткиНаДатуАктуальности
	|		ПО ДокументЗаказКлиента.Ссылка = ЗаказыКлиентовОстаткиНаДатуАктуальности.ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.Остатки(КОНЕЦПЕРИОДА(&ДатаПослеАктуальности, ДЕНЬ), ) КАК ЗаказыКлиентовОстаткиНаДатуПослеАктуальности
	|		ПО ДокументЗаказКлиента.Ссылка = ЗаказыКлиентовОстаткиНаДатуПослеАктуальности.ЗаказКлиента}
	|ГДЕ
	|	(ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт) ИЛИ &НеИспользоватьСтатусыЗаказовКлиентов)
	|	И ДокументЗаказКлиента.Менеджер = &Пользователь
	|	И (НЕ ДокументЗаказКлиента.ПометкаУдаления)"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляКоммерческихПредложенийКлиентам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует)
	|					ИЛИ КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано)
	|				ТОГДА КоммерческоеПредложениеКлиенту.Ссылка
	|		КОНЕЦ) КАК КоммерческиеПредложенияКлиентамВсегоВРаботе,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА (КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано)
	|					ИЛИ КоммерческоеПредложениеКлиенту.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Действует))
	|					И КоммерческоеПредложениеКлиенту.СрокДействия < &ДатаАктуальности
	|					И КоммерческоеПредложениеКлиенту.СрокДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|					И КоммерческоеПредложениеКлиенту.Проведен
	|				ТОГДА КоммерческоеПредложениеКлиенту.Ссылка
	|		КОНЕЦ) КАК КоммерческиеПредложенияКлиентамПросроченные
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыКоммерческихПредложенийКлиентам.Отменено)
	|	И КоммерческоеПредложениеКлиенту.Менеджер = &Пользователь
	|	И (НЕ КоммерческоеПредложениеКлиенту.ПометкаУдаления)"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляСоглашенийСПоставщиками()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА СоглашениеСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.НеСогласовано)
	|				ТОГДА СоглашениеСПоставщиком.Ссылка
	|		КОНЕЦ) КАК СоглашенияСПоставщикамиНаСогласовании,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА СоглашениеСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.НеСогласовано)
	|					И СоглашениеСПоставщиком.ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|					И СоглашениеСПоставщиком.ДатаНачалаДействия < &ДатаАктуальности
	|				ТОГДА СоглашениеСПоставщиком.Ссылка
	|			КОГДА СоглашениеСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
	|					И СоглашениеСПоставщиком.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|					И СоглашениеСПоставщиком.ДатаОкончанияДействия < &ДатаАктуальности
	|				ТОГДА СоглашениеСПоставщиком.Ссылка
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК СоглашенияСПоставщикамиПросроченные
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашениеСПоставщиком
	|ГДЕ
	|	СоглашениеСПоставщиком.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Закрыто)
	|	И СоглашениеСПоставщиком.Менеджер = &Пользователь
	|	И (НЕ СоглашениеСПоставщиком.ПометкаУдаления)"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляДоговоровСПоставщиками()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДоговорСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован)
	|				ТОГДА ДоговорСПоставщиком.Ссылка
	|		КОНЕЦ) КАК ДоговорыСПоставщикамиНаСогласовании,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДоговорСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.НеСогласован)
	|					И (ДоговорСПоставщиком.ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|							И ДоговорСПоставщиком.ДатаНачалаДействия < &ДатаАктуальности
	|						ИЛИ ДоговорСПоставщиком.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|							И ДоговорСПоставщиком.ДатаОкончанияДействия < &ДатаАктуальности)
	|				ТОГДА ДоговорСПоставщиком.Ссылка
	|			КОГДА ДоговорСПоставщиком.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|					И ДоговорСПоставщиком.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДоговорСПоставщиком.ДатаОкончанияДействия < &ДатаАктуальности
	|				ТОГДА ДоговорСПоставщиком.Ссылка
	|		КОНЕЦ) КАК ДоговорыСПоставщикамиПросроченные
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорСПоставщиком
	|ГДЕ
	|	ДоговорСПоставщиком.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Закрыт)
	|	И (ДоговорСПоставщиком.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|   ИЛИ ДоговорСПоставщиком.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию))
	|	И ДоговорСПоставщиком.Менеджер = &Пользователь
	|	И (НЕ ДоговорСПоставщиком.ПометкаУдаления)"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляЗаказовПоставщикам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|		КОГДА &НеИспользоватьСтатусыЗаказовПоставщикам
	|			ТОГДА ВЫБОР
	|					КОГДА  ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ((ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюКонечныйОстаток, 0) > 0
	|							ИЛИ ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток, 0) < 0) ИЛИ НЕ ДокументЗаказПоставщику.Проведен)
	|						ТОГДА ДокументЗаказПоставщику.Ссылка
	|				КОНЕЦ
	|		ИНАЧЕ ДокументЗаказПоставщику.Ссылка
	|	КОНЕЦ) КАК ЗаказыПоставщикамВсегоВРаботе,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	// ОЖИДАЕТСЯ СОГЛАСОВАНИЕ /////////////////////////////////////////////////////
	|			КОГДА ДокументЗаказПоставщику.Проведен И ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
	|					И ДокументЗаказПоставщику.ДатаСогласования <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументЗаказПоставщику.ДатаСогласования < &ДатаПослеАктуальности
	|				ТОГДА ДокументЗаказПоставщику.Ссылка
	// ОЖИДАЕТСЯ АВАНС ////////////////////////////////////////////////////////////
	|			КОГДА (ДокументЗаказПоставщику.Проведен И ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам)
	|					И ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения > 0
	|					И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
	|					И РасчетыСПоставщикамиОстаткиНаДатуПослеАктуальности.КОплатеОстаток < 0
	|				ТОГДА ДокументЗаказПоставщику.Ссылка
	// ОЖИДАЕТСЯ ПОДТВЕРЖДЕНИЕ ////////////////////////////////////////////////////
	|			КОГДА ДокументЗаказПоставщику.Проведен И ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
	|					И ДокументЗаказПоставщику.СуммаДокумента > 0
	|					И (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
	|						ИЛИ ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|					И ДокументЗаказПоставщику.ДатаПервогоПоступления <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументЗаказПоставщику.ДатаПервогоПоступления < &ДатаПослеАктуальности
	|				ТОГДА ДокументЗаказПоставщику.Ссылка
	// ОЖИДАЕТСЯ ПРЕДОПЛАТА ///////////////////////////////////////////////////////
	|			КОГДА ДокументЗаказПоставщику.Проведен И (ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам
	|					ИЛИ ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению))
	|					И ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления > 0
	|					И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
	|					И РасчетыСПоставщикамиОстаткиНаДатуПослеАктуальности.КОплатеОстаток < 0
	|				ТОГДА ДокументЗаказПоставщику.Ссылка
	// ОЖИДАЕТСЯ УСТАНОВКА СТАТУСА К ПОСТУПЛЕНИЮ //////////////////////////////////
	|			КОГДА ДокументЗаказПоставщику.Проведен И ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)
	|					И (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
	|						ИЛИ ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|					И ДокументЗаказПоставщику.ДатаПервогоПоступления <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументЗаказПоставщику.ДатаПервогоПоступления < &ДатаПослеАктуальности
	|				ТОГДА ДокументЗаказПоставщику.Ссылка
	// ОЖИДАЕТСЯ ПОСТУПЛЕНИЕ //////////////////////////////////////////////////////
	|			КОГДА ДокументЗаказПоставщику.Проведен И (ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам)
	|					И ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
	|					И ЕСТЬNULL(РасчетыСПоставщикамиОстаткиНаДатуПослеАктуальности.КПоступлениюОстаток, 0) > 0)
	|				ТОГДА ДокументЗаказПоставщику.Ссылка
	// ОЖИДАЕТСЯ ОПЛАТА ПОСЛЕ ПОСТУПЛЕНИЯ
	|			КОГДА ДокументЗаказПоставщику.Проведен И (ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам)
	|					И ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ДокументЗаказПоставщику.СуммаДокумента - ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения + ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления > 0
	|					И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток, 0) < 0
	|					И РасчетыСПоставщикамиОстаткиНаДатуПослеАктуальности.КОплатеОстаток < 0
	|				ТОГДА ДокументЗаказПоставщику.Ссылка
	|		КОНЕЦ) КАК ЗаказыПоставщикамНаСегодня,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	// ПРОСРОЧЕН АВАНС ////////////////////////////////////////////////////////////
	|			КОГДА ДокументЗаказПоставщику.Проведен И (ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам)
	|					И ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения > 0
	|					И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
	|					И РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КОплатеОстаток < 0
	|				ТОГДА ДокументЗаказПоставщику.Ссылка
	// ПРОСРОЧЕНА ПРЕДОПЛАТА //////////////////////////////////////////////////////
	|			КОГДА ДокументЗаказПоставщику.Проведен И (ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам
	|					ИЛИ ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению))
	|					И ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления > 0
	|					И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
	|					И РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КОплатеОстаток < 0
	|				ТОГДА ДокументЗаказПоставщику.Ссылка
	// ПРОСРОЧЕНА ОПЛАТА //////////////////////////////////////////////////////////
	|			КОГДА ДокументЗаказПоставщику.Проведен И (ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам)
	|					И ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ДокументЗаказПоставщику.СуммаДокумента - ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения + ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления > 0
	|					И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток, 0) < 0
	|					И РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КОплатеОстаток < 0
	|					И (&НеИспользоватьСтатусыЗаказовПоставщикам И НЕ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
	|					И ЕСТЬNULL(РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КПоступлениюОстаток, 0) > 0))
	|				ТОГДА ДокументЗаказПоставщику.Ссылка
	|		КОНЕЦ) КАК ЗаказыПоставщикамПросроченоИсполнениеНами,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	// ПРОСРОЧЕНО СОГЛАСОВАНИЕ ///////////////////////////////////////////////////
	|			КОГДА  ДокументЗаказПоставщику.Проведен
	|					И ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
	|					И ДокументЗаказПоставщику.ДатаСогласования <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументЗаказПоставщику.ДатаСогласования < &ДатаАктуальности
	|			ТОГДА ДокументЗаказПоставщику.Ссылка
	// ПРОСРОЧЕНО ПОДТВЕРЖДЕНИЕ ///////////////////////////////////////////////////
	|			КОГДА ДокументЗаказПоставщику.Проведен И ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован)
	|					И ДокументЗаказПоставщику.СуммаДокумента > 0
	|					И (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
	|						ИЛИ ДокументЗаказПоставщику.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|					И ДокументЗаказПоставщику.ДатаПервогоПоступления <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументЗаказПоставщику.ДатаПервогоПоступления < &ДатаАктуальности
	|				ТОГДА ДокументЗаказПоставщику.Ссылка
	// ПРОСРОЧЕНО ПОСТУПЛЕНИЕ /////////////////////////////////////////////////////
	|			КОГДА ДокументЗаказПоставщику.Проведен И (ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам
	| 					ИЛИ ДокументЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.КПоступлению))
	|					И ДокументЗаказПоставщику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= ДокументЗаказПоставщику.СуммаПредоплатыДоПоступления + ДокументЗаказПоставщику.СуммаАвансаДоПодтверждения
	|					И ЕСТЬNULL(РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КПоступлениюОстаток, 0) > 0
	|				ТОГДА ДокументЗаказПоставщику.Ссылка
	|		КОНЕЦ) КАК ЗаказыПоставщикамПросроченоИсполнениеПоставщиком
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДокументЗаказПоставщику
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты КАК РасчетыСПоставщикамиОстатки
	|		ПО ДокументЗаказПоставщику.Ссылка = РасчетыСПоставщикамиОстатки.ЗаказПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ), ) КАК РасчетыСПоставщикамиОстаткиНаДатуАктуальности
	|		ПО ДокументЗаказПоставщику.Ссылка = РасчетыСПоставщикамиОстаткиНаДатуАктуальности.ЗаказПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(КОНЕЦПЕРИОДА(&ДатаПослеАктуальности, ДЕНЬ), ) КАК РасчетыСПоставщикамиОстаткиНаДатуПослеАктуальности
	|		ПО ДокументЗаказПоставщику.Ссылка = РасчетыСПоставщикамиОстаткиНаДатуПослеАктуальности.ЗаказПоставщику}
	|ГДЕ
	|	(ДокументЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт) ИЛИ &НеИспользоватьСтатусыЗаказовПоставщикам)
	|	И ДокументЗаказПоставщику.Менеджер = &Пользователь
	|	И (НЕ ДокументЗаказПоставщику.ПометкаУдаления)"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляЗаданийТорговымПредставителям()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ЗаданиеТорговомуПредставителю.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийТорговымПредставителям.НеПодготовлено)
	|				ТОГДА ЗаданиеТорговомуПредставителю.Ссылка
	|		КОНЕЦ) КАК ЗаданияТорговымПредставителямКПодготовке,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ЗаданиеТорговомуПредставителю.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийТорговымПредставителям.НеПодготовлено)
	|					И ЗаданиеТорговомуПредставителю.ДатаВизитаПлан < НАЧАЛОПЕРИОДА(&ДатаАктуальности, ДЕНЬ)
	|				ТОГДА ЗаданиеТорговомуПредставителю.Ссылка
	|			КОГДА ЗаданиеТорговомуПредставителю.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийТорговымПредставителям.КОтработке)
	|					И ЗаданиеТорговомуПредставителю.ДатаВизитаПлан < НАЧАЛОПЕРИОДА(&ДатаАктуальности, ДЕНЬ)
	|					И ЗаданиеТорговомуПредставителю.ДатаВизитаФакт = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЗаданиеТорговомуПредставителю.Ссылка
	|		КОНЕЦ) КАК ЗаданияТорговымПредставителямПросроченные,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ЗаказКлиента.ДокументОснование ЕСТЬ NULL 
	|					И ЗаданиеТорговомуПредставителю.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийТорговымПредставителям.Отработано)
	|				ТОГДА ЗаданиеТорговомуПредставителю.Ссылка
	|		КОНЕЦ) КАК ЗаданияТорговымПредставителямКОформлениюЗаказов
	|ИЗ
	|	Документ.ЗаданиеТорговомуПредставителю КАК ЗаданиеТорговомуПредставителю
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО ЗаданиеТорговомуПредставителю.Ссылка = ЗаказКлиента.ДокументОснование
	|ГДЕ
	|	ЗаданиеТорговомуПредставителю.Куратор = &Пользователь
	|	И (НЕ ЗаданиеТорговомуПредставителю.ПометкаУдаления)"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляЗадач()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗадачаИсполнителяЗадачиПоИсполнителю.Ссылка) КАК ЗадачиКВыполнению
	|ИЗ
	|	Задача.ЗадачаИсполнителя.ЗадачиПоИсполнителю(&Пользователь, ) КАК ЗадачаИсполнителяЗадачиПоИсполнителю
	|ГДЕ
	|	(НЕ ЗадачаИсполнителяЗадачиПоИсполнителю.Выполнена)
	|	И (НЕ ЗадачаИсполнителяЗадачиПоИсполнителю.ПометкаУдаления)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляОформленияСкладскихАктов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОстаткиКОформлению.ДокументОснование) КАК ОснованияКОформлениюСкладскихАктов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыКОформлениюИзлишковНедостачОстатки.ДокументОснование КАК ДокументОснование,
	|		ТоварыКОформлениюИзлишковНедостачОстатки.КОформлениюОрдеровОстаток КАК КОформлениюОрдеровОстаток,
	|		ТоварыКОформлениюИзлишковНедостачОстатки.Склад КАК Склад,
	|		ТоварыКОформлениюИзлишковНедостачОстатки.Помещение КАК Помещение,
	|		ТоварыКОформлениюИзлишковНедостачОстатки.Номенклатура КАК Номенклатура,
	|		ТоварыКОформлениюИзлишковНедостачОстатки.Характеристика КАК Характеристика
	|	ИЗ
	|		РегистрНакопления.ТоварыКОформлениюИзлишковНедостач.Остатки(, ) КАК ТоварыКОформлениюИзлишковНедостачОстатки
	|	ГДЕ
	|		ТоварыКОформлениюИзлишковНедостачОстатки.КОформлениюАктовОстаток <> 0) КАК ОстаткиКОформлению"
	;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьТекстЗапросаДляПересчетовТоваров()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РаспоряжениеНаИнвентаризациюТоваров.Ссылка) КАК ОснованияКВыполнениюПересчетов
	|ИЗ
	|	Документ.РаспоряжениеНаИнвентаризациюТоваров КАК РаспоряжениеНаИнвентаризациюТоваров
	|ГДЕ
	|	РаспоряжениеНаИнвентаризациюТоваров.Проведен
	|	И РаспоряжениеНаИнвентаризациюТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРаспоряженийНаПроведениеИнвентаризацийТоваров.ВРаботе)
	|	И РаспоряжениеНаИнвентаризациюТоваров.ДатаНачала <= НачалоПериода(&ДатаАктуальности, ДЕНЬ)
	|	И РаспоряжениеНаИнвентаризациюТоваров.ДатаОкончания >= Началопериода(&ДатаАктуальности, ДЕНЬ)"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляЗаявокНаОплату()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ЗаявкаНаРасходованиеДенежныхСредств.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована)
	|				ТОГДА ЗаявкаНаРасходованиеДенежныхСредств.Ссылка
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК ЗаявкиНаОплатуКУтверждению,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ЗаявкаНаРасходованиеДенежныхСредств.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована)
	|					И ЗаявкаНаРасходованиеДенежныхСредств.ДатаПлатежа < НАЧАЛОПЕРИОДА(&ДатаАктуальности, ДЕНЬ)
	|				ТОГДА ЗаявкаНаРасходованиеДенежныхСредств.Ссылка
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК ЗаявкиНаОплатуКУтверждениюПросрочено
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|ГДЕ
	|	(НЕ ЗаявкаНаРасходованиеДенежныхСредств.ПометкаУдаления)"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляРаспоряженийНаОтгрузку()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегистрНакопленияТоварыКОтгрузкеОстатки.ДокументОтгрузки) КАК ЗначениеПоказателя,
	|	РегистрНакопленияТоварыКОтгрузкеОстатки.Склад КАК Склад
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки() КАК РегистрНакопленияТоварыКОтгрузкеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	РегистрНакопленияТоварыКОтгрузкеОстатки.Склад"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляРаспоряженийНаПоступление()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(ВсеРаспоряжения.Распоряжение) КАК ЗначениеПоказателя,
	|	ВсеРаспоряжения.Склад КАК Склад
	|ИЗ	
	|
	|	(ВЫБРАТЬ
	|		СоглашенияСПоставщиками.Ссылка КАК Распоряжение,
	|		СоглашенияСПоставщиками.Склад КАК Склад
	|	ИЗ
	|		Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|	ГДЕ
	|		СоглашенияСПоставщиками.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.МожетПроисходитьБезЗаказовИНакладных)
	|		И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
	|		И НЕ СоглашенияСПоставщиками.ПометкаУдаления
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТоварыКПоступлениюОстатки.ДокументПоступления,
	|		ТоварыКПоступлениюОстатки.Склад
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|			ТоварыКПоступлению.Склад КАК Склад,
	|			СУММА(ТоварыКПоступлению.КПоступлениюОстаток) КАК КПоступлению,
	|			ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|			ТоварыКПоступлению.Характеристика КАК Характеристика
	|		ИЗ
	|			РегистрНакопления.ТоварыКПоступлению.Остатки(, ) КАК ТоварыКПоступлению
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ТоварыКПоступлению.ДокументПоступления,
	|			ТоварыКПоступлению.Склад,
	|			ТоварыКПоступлению.Номенклатура,
	|			ТоварыКПоступлению.Характеристика
	|		
	|		ИМЕЮЩИЕ
	|			СУММА(ТоварыКПоступлению.КПоступлениюОстаток) > 0) КАК ТоварыКПоступлениюОстатки) КАК ВсеРаспоряжения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеРаспоряжения.Склад"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляДоверенностейНаПолучениеТоваров()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВложенныйЗапрос.РаспоряженияНаОформлениеДоверенностейНаПолучениеТоваров) КАК РаспоряженияНаОформлениеДоверенностейНаПолучениеТоваров,
	|	СУММА(ВложенныйЗапрос.ВыданныеДоверенностиНаПолучениеТоваров) КАК ВыданныеДоверенностиНаПолучениеТоваров,
	|	СУММА(ВложенныйЗапрос.ВыданныеДоверенностиНаПолучениеТоваровИстекающиеНаСегодня) КАК ВыданныеДоверенностиНаПолучениеТоваровИстекающиеНаСегодня,
	|	СУММА(ВложенныйЗапрос.ВыданныеДоверенностиНаПолучениеТоваровПросроченные) КАК ВыданныеДоверенностиНаПолучениеТоваровПросроченные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыПоставщикам.Ссылка КАК Заказ,
	|		СУММА(1) КАК РаспоряженияНаОформлениеДоверенностейНаПолучениеТоваров,
	|		NULL КАК ВыданныеДоверенностиНаПолучениеТоваров,
	|		NULL КАК ВыданныеДоверенностиНаПолучениеТоваровИстекающиеНаСегодня,
	|		NULL КАК ВыданныеДоверенностиНаПолучениеТоваровПросроченные
	|	ИЗ
	|		Документ.ЗаказПоставщику КАК ЗаказыПоставщикам
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам.Остатки(, ) КАК ТаблицаРаспоряжений
	|			ПО ЗаказыПоставщикам.Ссылка = ТаблицаРаспоряжений.ЗаказПоставщику
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МИНИМУМ(Доверенности.Ссылка) КАК ЕстьДоверенность,
	|				Доверенности.ДокументОснование КАК ДокументОснование
	|			ИЗ
	|				Документ.ДоверенностьНаПолучениеТоваров КАК Доверенности
	|			ГДЕ
	|				Доверенности.ДокументОснование <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|				И (НЕ Доверенности.ПометкаУдаления)
	|				И (Доверенности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностейНаПолучениеТоваров.Выдана)
	|						ИЛИ Доверенности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностейНаПолучениеТоваров.Использована))
	|				И Доверенности.Ответственный = &Пользователь
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Доверенности.ДокументОснование) КАК Доверенности
	|			ПО ЗаказыПоставщикам.Ссылка = Доверенности.ДокументОснование
	|	ГДЕ
	|		ТаблицаРаспоряжений.КОформлениюОстаток > 0
	|		И (Доверенности.ЕстьДоверенность = 0
	|				ИЛИ Доверенности.ЕстьДоверенность ЕСТЬ NULL )
	|		И ЗаказыПоставщикам.ТребуетсяДоверенность
	|		И (НЕ ЗаказыПоставщикам.ПометкаУдаления)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыПоставщикам.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|				КОГДА ДокументДоверенностьНаПолучениеТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностейНаПолучениеТоваров.Выдана)
	|					ТОГДА ДокументДоверенностьНаПолучениеТоваров.Ссылка
	|				ИНАЧЕ NULL
	|			КОНЕЦ),
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|				КОГДА ДокументДоверенностьНаПолучениеТоваров.ДатаОкончанияДействия <= &ДатаАктуальности
	|						И ДокументДоверенностьНаПолучениеТоваров.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|						И ДокументДоверенностьНаПолучениеТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностейНаПолучениеТоваров.Выдана)
	|					ТОГДА ДокументДоверенностьНаПолучениеТоваров.Ссылка
	|				ИНАЧЕ NULL
	|			КОНЕЦ),
	|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|				КОГДА ДокументДоверенностьНаПолучениеТоваров.ДатаОкончанияДействия < &ДатаАктуальности
	|						И ДокументДоверенностьНаПолучениеТоваров.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|						И ДокументДоверенностьНаПолучениеТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностейНаПолучениеТоваров.Выдана)
	|					ТОГДА ДокументДоверенностьНаПолучениеТоваров.Ссылка
	|				ИНАЧЕ NULL
	|			КОНЕЦ)
	|	ИЗ
	|		Документ.ДоверенностьНаПолучениеТоваров КАК ДокументДоверенностьНаПолучениеТоваров
	|	ГДЕ
	|		ДокументДоверенностьНаПолучениеТоваров.Ответственный = &Пользователь) КАК ВложенныйЗапрос"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляЗаявокНаВозвратТоваровОтКлиентов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументЗаявка.Ссылка) КАК ЗаявкиНаВозвратТоваровОтКлиентовВсегоВРаботе,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДокументЗаявка.Проведен
	|					И (ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована) ИЛИ &НеИспользоватьСтатусыЗаявокНаВозврат
	|						ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату))
	|					И ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ДокументЗаявка.СуммаАвансаДоОбеспечения > 0
	|					И ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаявка.СуммаАвансаДоОбеспечения
	|					И РасчетыСКлиентамиОстаткиНаДатуПослеАктуальности.КОплатеОстаток > 0
	|				ТОГДА ДокументЗаявка.Ссылка
	|			КОГДА ДокументЗаявка.Проведен
	|					И (ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)  ИЛИ &НеИспользоватьСтатусыЗаявокНаВозврат
	|						ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению))
	|					И ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ДокументЗаявка.СуммаПредоплатыДоОтгрузки > 0
	|					И ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаявка.СуммаПредоплатыДоОтгрузки + ДокументЗаявка.СуммаАвансаДоОбеспечения
	|					И РасчетыСКлиентамиОстаткиНаДатуПослеАктуальности.КОплатеОстаток > 0
	|				ТОГДА ДокументЗаявка.Ссылка
	|			КОГДА ДокументЗаявка.Проведен
	|					И ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке)
	|					И ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ДокументЗаявка.СуммаЗамены - ДокументЗаявка.СуммаАвансаДоОбеспечения + ДокументЗаявка.СуммаПредоплатыДоОтгрузки > 0
	|					И ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) > 0
	|					И РасчетыСКлиентамиОстаткиНаДатуПослеАктуальности.КОплатеОстаток > 0
	|				ТОГДА ДокументЗаявка.Ссылка
	|			КОГДА ДокументЗаявка.Проведен
	|					И ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
	|					И ДокументЗаявка.ДатаСогласования < &ДатаПослеАктуальности
	|					И ДокументЗаявка.ДатаСогласования <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДокументЗаявка.Ссылка
	|			КОГДА ДокументЗаявка.Проведен
	|					И (ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована)  ИЛИ &НеИспользоватьСтатусыЗаявокНаВозврат
	|						ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату))
	|					И ДокументЗаявка.СуммаЗамены > 0
	|					И (ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаявка.СуммаАвансаДоОбеспечения
	|						ИЛИ ДокументЗаявка.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|					И ДокументЗаявка.ДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументЗаявка.ДатаОтгрузки < &ДатаПослеАктуальности
	|				ТОГДА ДокументЗаявка.Ссылка
	|			КОГДА ДокументЗаявка.Проведен
	|					И (ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату)  ИЛИ &НеИспользоватьСтатусыЗаявокНаВозврат
	|						ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению))
	|					И (ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаявка.СуммаПредоплатыДоОтгрузки + ДокументЗаявка.СуммаАвансаДоОбеспечения
	|						ИЛИ ДокументЗаявка.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|					И ДокументЗаявка.ДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументЗаявка.ДатаОтгрузки < &ДатаПослеАктуальности
	|				ТОГДА ДокументЗаявка.Ссылка
	|			КОГДА ДокументЗаявка.Проведен
	|					И ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована)
	|					И ДокументЗаявка.ДатаПервогоПоступления <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументЗаявка.ДатаПервогоПоступления < &ДатаПослеАктуальности
	|				ТОГДА ДокументЗаявка.Ссылка
	|		КОНЕЦ) КАК ЗаявкиНаВозвратТоваровОтКлиентовНаСегодня,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДокументЗаявка.Проведен
	|					И (ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована) ИЛИ &НеИспользоватьСтатусыЗаявокНаВозврат
	|						ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату))
	|					И ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ДокументЗаявка.СуммаАвансаДоОбеспечения > 0
	|					И ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаявка.СуммаАвансаДоОбеспечения
	|					И РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток > 0
	|				ТОГДА ДокументЗаявка.Ссылка
	|			КОГДА ДокументЗаявка.Проведен
	|					И (ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату) ИЛИ &НеИспользоватьСтатусыЗаявокНаВозврат
	|						ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению))
	|					И ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ДокументЗаявка.СуммаПредоплатыДоОтгрузки > 0
	|					И ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) < ДокументЗаявка.СуммаПредоплатыДоОтгрузки + ДокументЗаявка.СуммаАвансаДоОбеспечения
	|					И РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток > 0
	|				ТОГДА ДокументЗаявка.Ссылка
	|			КОГДА ДокументЗаявка.Проведен
	|					И (ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке) ИЛИ &НеИспользоватьСтатусыЗаявокНаВозврат)
	|					И ДокументЗаявка.СуммаЗамены - ДокументЗаявка.СуммаАвансаДоОбеспечения + ДокументЗаявка.СуммаПредоплатыДоОтгрузки > 0
	|					И ДокументЗаявка.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|					И ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) > 0
	|					И РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток > 0
	|					И ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюОстаток, 0) <> 0
	|				ТОГДА ДокументЗаявка.Ссылка
	|		КОНЕЦ) КАК ЗаявкиНаВозвратТоваровОтКлиентовПросроченаОплата,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДокументЗаявка.Проведен
	|					И ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
	|					И ДокументЗаявка.ДатаСогласования < &ДатаАктуальности
	|					И ДокументЗаявка.ДатаСогласования <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ДокументЗаявка.Ссылка
	|			КОГДА ДокументЗаявка.Проведен
	|					И (ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована) 
	|						ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату))
	|					И ДокументЗаявка.СуммаЗамены > 0
	|					И (ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаявка.СуммаАвансаДоОбеспечения
	|						ИЛИ ДокументЗаявка.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|					И ДокументЗаявка.ДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументЗаявка.ДатаОтгрузки < &ДатаАктуальности
	|				ТОГДА ДокументЗаявка.Ссылка
	|			КОГДА ДокументЗаявка.Проведен
	|					И (ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату) ИЛИ &НеИспользоватьСтатусыЗаявокНаВозврат
	|						ИЛИ ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению))
	|					И (ДокументЗаявка.СуммаЗамены - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) >= ДокументЗаявка.СуммаПредоплатыДоОтгрузки + ДокументЗаявка.СуммаАвансаДоОбеспечения
	|						ИЛИ ДокументЗаявка.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|					И ДокументЗаявка.ДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументЗаявка.ДатаОтгрузки < &ДатаАктуальности
	|				ТОГДА ДокументЗаявка.Ссылка
	|			КОГДА ДокументЗаявка.Проведен
	|					И ДокументЗаявка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Согласована)
	|					И ДокументЗаявка.ДатаПервогоПоступления <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументЗаявка.ДатаПервогоПоступления < &ДатаАктуальности
	|				ТОГДА ДокументЗаявка.Ссылка
	|		КОНЕЦ) КАК ЗаявкиНаВозвратТоваровОтКлиентовПросроченоИсполнение
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДокументЗаявка
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки КАК РасчетыСКлиентамиОстатки
	|		ПО ДокументЗаявка.Ссылка = РасчетыСКлиентамиОстатки.ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ), ) КАК РасчетыСКлиентамиОстаткиНаДатуАктуальности
	|		ПО ДокументЗаявка.Ссылка = РасчетыСКлиентамиОстаткиНаДатуАктуальности.ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(КОНЕЦПЕРИОДА(&ДатаПослеАктуальности, ДЕНЬ), ) КАК РасчетыСКлиентамиОстаткиНаДатуПослеАктуальности
	|		ПО ДокументЗаявка.Ссылка = РасчетыСКлиентамиОстаткиНаДатуПослеАктуальности.ЗаказКлиента}
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.Остатки КАК ЗаказыКлиентовОстатки
	|		ПО ДокументЗаявка.Ссылка = ЗаказыКлиентовОстатки.ЗаказКлиента
	|ГДЕ
	|	(ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена) ИЛИ &НеИспользоватьСтатусыЗаявокНаВозврат)
	|	И ДокументЗаявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
	|	И ДокументЗаявка.Менеджер = &Пользователь
	|	И НЕ ДокументЗаявка.ПометкаУдаления"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляРеализацийТоваровИУслуг()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.РаспоряженияНаОформлениеРеализацийТоваровИУслугВсегоВРаботе) КАК РаспоряженияНаОформлениеРеализацийТоваровИУслугВсегоВРаботе,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.РаспоряженияНаОформлениеРеализацийТоваровИУслугНаСегодня) КАК РаспоряженияНаОформлениеРеализацийТоваровИУслугНаСегодня,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.РеализацииТоваровИУслугКОтгрузке) КАК РеализацииТоваровИУслугКОтгрузке,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.РеализацииТоваровИУслугКПредоплате) КАК РеализацииТоваровИУслугКПредоплате
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыКлиентов.ЗаказКлиента КАК РаспоряженияНаОформлениеРеализацийТоваровИУслугВсегоВРаботе,
	|		NULL КАК РаспоряженияНаОформлениеРеализацийТоваровИУслугНаСегодня,
	|		NULL КАК РеализацииТоваровИУслугКОтгрузке,
	|		NULL КАК РеализацииТоваровИУслугКПредоплате
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов.Остатки(, ) КАК ЗаказыКлиентов
	|	ГДЕ
	|		ЗаказыКлиентов.ЗаказКлиента.Менеджер = &Пользователь
	|		И ЗаказыКлиентов.КОформлениюОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		ЗаказыКлиентовНаСегодня.ЗаказКлиента,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.ЗаказыКлиентов.Остатки(&ДатаОтгрузки, ) КАК ЗаказыКлиентовНаСегодня
	|	ГДЕ
	|		ЗаказыКлиентовНаСегодня.ЗаказКлиента.Менеджер = &Пользователь	
	|		И ЗаказыКлиентовНаСегодня.КОформлениюОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		NULL,
	|		NULL,
	|		РеализацияТоваровУслуг.Ссылка,
	|		NULL
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КОтгрузке)
	|		И РеализацияТоваровУслуг.Менеджер = &Пользователь
	|		И (НЕ РеализацияТоваровУслуг.ПометкаУдаления)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		NULL,
	|		NULL,
	|		NULL,
	|		РеализацияТоваровУслуг.Ссылка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате)
	|		И РеализацияТоваровУслуг.Менеджер = &Пользователь
	|		И (НЕ РеализацияТоваровУслуг.ПометкаУдаления)) КАК ВложенныйЗапрос"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляОтчетовКомиссионеров()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Количество КАК ОтчетыКомиссионеровТребуетсяОформить
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТоварыПереданные.Организация КАК Организация,
	|		ТоварыПереданные.Партнер КАК Комиссионер,
	|		ТоварыПереданные.Соглашение КАК Соглашение,
	|		СУММА(1) КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыПереданныеНаКомиссию.Остатки(, ) КАК ТоварыПереданные
	|	ГДЕ
	|		ТоварыПереданные.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТоварыПереданные.Партнер,
	|		ТоварыПереданные.Соглашение,
	|		ТоварыПереданные.Организация) КАК ВложенныйЗапрос"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляПоступленийТоваровИУслуг()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаРаспоряжений.ЗаказПоставщику) КАК РаспоряженияНаОформлениеПоступленийТоваровИУслугВсегоВРаботе
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ) КАК ТаблицаРаспоряжений
	|ГДЕ
	|	ТаблицаРаспоряжений.КОформлениюОстаток > 0"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляОтчетовКомитентам()
	
	ТекстЗапроса =	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ВложенныйЗапрос.Количество) КАК ОтчетыКомитентамТребуетсяОформить
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК Операция,
	|		ТоварыКОформлению.Валюта КАК Валюта,
	|		ТоварыКОформлению.ВидЗапасов.Организация КАК Организация,
	|		ТоварыКОформлению.ВидЗапасов.Комитент КАК Комитент,
	|		ТоварыКОформлению.ВидЗапасов.Соглашение КАК Соглашение,
	|		ТоварыКОформлению.ВидЗапасов.НалогообложениеНДС КАК НалогообложениеНДС,
	|		СУММА(1) КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.Остатки(, ) КАК ТоварыКОформлению
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.Остатки(, ) КАК ТоварыКОформлениюОстатки
	|			ПО ТоварыКОформлению.Валюта = ТоварыКОформлениюОстатки.Валюта
	|				И ТоварыКОформлению.ВидЗапасов = ТоварыКОформлениюОстатки.ВидЗапасов
	|	ГДЕ
	|		ТоварыКОформлению.ВидЗапасов.Комитент ССЫЛКА Справочник.Партнеры
	|		И ТоварыКОформлению.СуммаВыручкиОстаток <> 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТоварыКОформлению.Валюта,
	|		ТоварыКОформлению.ВидЗапасов.Организация,
	|		ТоварыКОформлению.ВидЗапасов.Комитент,
	|		ТоварыКОформлению.ВидЗапасов.Соглашение,
	|		ТоварыКОформлению.ВидЗапасов.НалогообложениеНДС
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеТоваров),
	|		ТоварыКОформлению.Валюта,
	|		ТоварыКОформлению.ВидЗапасов.Организация,
	|		ТоварыКОформлению.ВидЗапасов.Комитент,
	|		ТоварыКОформлению.ВидЗапасов.Соглашение,
	|		ТоварыКОформлению.ВидЗапасов.НалогообложениеНДС,
	|		СУММА(1)
	|	ИЗ
	|		РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.Остатки(, ) КАК ТоварыКОформлению
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.Остатки(, ) КАК ТоварыКОформлениюОстатки
	|			ПО ТоварыКОформлению.Валюта = ТоварыКОформлениюОстатки.Валюта
	|				И ТоварыКОформлению.ВидЗапасов = ТоварыКОформлениюОстатки.ВидЗапасов
	|	ГДЕ
	|		ТоварыКОформлению.ВидЗапасов.Комитент ССЫЛКА Справочник.Партнеры
	|		И ТоварыКОформлению.КоличествоСписаноОстаток > 0
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТоварыКОформлению.Валюта,
	|		ТоварыКОформлению.ВидЗапасов.Организация,
	|		ТоварыКОформлению.ВидЗапасов.Комитент,
	|		ТоварыКОформлению.ВидЗапасов.Соглашение,
	|		ТоварыКОформлению.ВидЗапасов.НалогообложениеНДС) КАК ВложенныйЗапрос"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляЭлектронныхДокументов()

	Возврат ЭлектронныеДокументы.ПолучитьТекстЗапросаЭлектронныхДокументовНаПодписи();

КонецФункции

Функция ПолучитьТекстЗапросаДляВнутреннихПотребленийТоваров()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбщийЗапрос.РаспоряженийВсего)     КАК ВнутренниеПотребленияТоваровРаспоряженияНаОформлениеВсегоВРаботе,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбщийЗапрос.РаспоряженийНаСегодня) КАК ВнутренниеПотребленияТоваровРаспоряженияНаОформлениеНаСегодня,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбщийЗапрос.ДокументовОтгрузки)    КАК ВнутренниеПотребленияТоваровДокументыКОтгрузке
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапросПоРаспоряжениямВсего.ЗаказНаВнутреннееПотребление КАК РаспоряженийВсего,
	|		NULL                                    КАК РаспоряженийНаСегодня,
	|		NULL                                    КАК ДокументовОтгрузки
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(, ) КАК ЗапросПоРаспоряжениямВсего
	|	ГДЕ
	|		ЗапросПоРаспоряжениямВсего.КОформлениюОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		ЗапросПоРаспоряжениямНаСегодня.ЗаказНаВнутреннееПотребление,
	|		NULL
	|	ИЗ
	|		РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(&ДатаОтгрузки, ) КАК ЗапросПоРаспоряжениямНаСегодня
	|	ГДЕ
	|		ЗапросПоРаспоряжениямНаСегодня.КОформлениюОстаток > 0
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		ЗапросПоДокументамОтгрузки.Ссылка
	|	ИЗ
	|		Документ.ВнутреннееПотреблениеТоваров КАК ЗапросПоДокументамОтгрузки
	|	ГДЕ
	|		ЗапросПоДокументамОтгрузки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихПотребленийТоваров.КОтгрузке)
	|		И ЗапросПоДокументамОтгрузки.Проведен
	|	) КАК ОбщийЗапрос";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляПеремещенийТоваров()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбщийЗапрос.РаспоряженийВсего) КАК ПеремещенияТоваровРаспоряженияНаОформлениеВсегоВРаботе,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбщийЗапрос.ДокументовОтгрузки) КАК ПеремещенияТоваровДокументыКОтгрузке
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапросПоРаспоряжениямВсего.Распоряжение КАК РаспоряженийВсего,
	|		NULL КАК ДокументовОтгрузки
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЗаказыНаПеремещениеВсего.ЗаказНаПеремещение КАК Распоряжение
	|		ИЗ
	|			РегистрНакопления.ЗаказыНаПеремещение.Остатки(, ) КАК ЗаказыНаПеремещениеВсего
	|		ГДЕ
	|			ЗаказыНаПеремещениеВсего.КОформлениюОстаток > 0
	|		) КАК ЗапросПоРаспоряжениямВсего
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		ЗапросПоДокументамОтгрузки.Документ
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПеремещениеТоваров.Ссылка КАК Документ
	|		ИЗ
	|			Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|		ГДЕ
	|			ПеремещениеТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПеремещенийТоваров.КОтгрузке)
	|		) КАК ЗапросПоДокументамОтгрузки
	|	) КАК ОбщийЗапрос";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляСборокТоваров()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбщийЗапрос.РаспоряженийВсего) КАК ДокументыСборкиРазборкиРаспоряженияНаОформлениеВсегоВРаботе,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбщийЗапрос.РаспоряженийНаСегодня) КАК ДокументыСборкиРазборкиРаспоряженияНаОформлениеНаСегодня,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбщийЗапрос.ДокументовОтгрузки) КАК ДокументыСборкиРазборкиДокументыКСборкеРазборке
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапросПоРаспоряжениямВсего.Распоряжение КАК РаспоряженийВсего,
	|		NULL КАК РаспоряженийНаСегодня,
	|		NULL КАК ДокументовОтгрузки
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЗаказыНаСборкуВсего.ЗаказНаСборку КАК Распоряжение
	|		ИЗ
	|			РегистрНакопления.ЗаказыНаСборку.Остатки(, ) КАК ЗаказыНаСборкуВсего
	|		ГДЕ
	|			ЗаказыНаСборкуВсего.КОформлениюОстаток > 0) КАК ЗапросПоРаспоряжениямВсего
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		ЗапросПоРаспоряжениямНаСегодня.Распоряжение,
	|		NULL
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ЗаказыНаСборкуНаСегодня.ЗаказНаСборку КАК Распоряжение
	|		ИЗ
	|			РегистрНакопления.ЗаказыНаСборку.Остатки(&ДатаОтгрузки, ) КАК ЗаказыНаСборкуНаСегодня
	|		ГДЕ
	|			ЗаказыНаСборкуНаСегодня.КОформлениюОстаток > 0) КАК ЗапросПоРаспоряжениямНаСегодня
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		ЗапросПоДокументамОтгрузки.Документ
	|	ИЗ
	|		(ВЫБРАТЬ
	|			СборкаТоваров.Ссылка КАК Документ
	|		ИЗ
	|			Документ.СборкаТоваров КАК СборкаТоваров
	|		ГДЕ
	|			СборкаТоваров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСборокТоваров.КСборкеРазборке)
	|		) КАК ЗапросПоДокументамОтгрузки
	|	) КАК ОбщийЗапрос";
	
	Возврат ТекстЗапроса;
	
КонецФункции
