////////////////////////////////////////////////////////////////////////////////
// Модуль "ПодборТоваровКлиент", содержит процедуры и функции необходимые для
// работы форм подбора товаров. Работа с отборами, обработчики событий элементов 
// форм.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// "горячие" клавиши.

// Процедура устанавливает текущим элементом нужную панель отборов в зависимости
// от установленного варианта навигации.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьТекущийЭлементНавигация(Форма) Экспорт
	
	ВариантНавигации = Форма.ВариантНавигации;
	
	Если ВариантНавигации = "ПоИерархии" Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы.ИерархияНоменклатуры;
		
	ИначеЕсли ВариантНавигации = "ПоСвойствам" Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы.ДеревоОтборов;
		
	ИначеЕсли ВариантНавигации = "Совместно" Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы.ТаблицаНоменклатураПродаваемаяСовместноПредпосылка;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает текущим элементом - список номенклатуры.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьТекущийЭлементСписокТоваров(Форма) Экспорт
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		Форма.ТекущийЭлемент = Форма.Элементы.ПодборТаблицаХарактеристики;
	Иначе
		Форма.ТекущийЭлемент = Форма.Элементы.Список;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает текущим элементом - список подобранных товаров - корзину.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьТекущийЭлементКорзина(Форма) Экспорт
	
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	
	Если ЭтоФормаЧекаККМ Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы.Товары;
		
	Иначе
		
		Форма.ТекущийЭлемент = Форма.Элементы.Корзина;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает текущим элементом - список номенклатуры поставщика.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьТекущийЭлементНоменклатураПоставщика(Форма) Экспорт
	
	Форма.ТекущийЭлемент = Форма.Элементы.ПодборТаблицаНоменклатураПоставщика;
	
КонецПроцедуры

// Процедура устанавливает текущим элементом - строку поиска на форме.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура УстановитьТекущийЭлементСтрокаПоиска(Форма) Экспорт
	
	Форма.ТекущийЭлемент = Форма.Элементы.СтрокаПоиска;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с корзиной.

// Процедура вызывается перед закрытием формы подбора товаров. Если не установлен
// признак переноса товаров в корзину, а в корзине есть подобранные товары, то
// выдается вопрос.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора товаров,
//	Объект (ОбработкаОбъект) - обработка подбора товаров,
//	Отказ (Булево) - переменная в которую записывается флаг отказа.
//
Процедура ПередЗакрытиемФормыПодбораТоваров(Форма, Объект, Отказ) Экспорт
	
	Если Форма.ПеренестиВДокумент Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Корзина.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтветНаВопрос = Вопрос(НСтр("ru = 'Подобранные товары не перенесены в документ. Перенести?'"), РежимДиалогаВопрос.ДаНетОтмена);
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
		Отказ = Истина;
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Форма.ПеренестиВДокумент = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов формы.

// Процедура вызывается при активизации строки списка иерархии номенклатуры.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка, форма подборов.
//
Процедура ПриАктивизацииСтрокиИерархииНоменклатуры(Форма) Экспорт
	
	Если НЕ Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ВариантНавигации <> "ПоИерархии" Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПодключитьОбработчикОжидания("ИерархияНоменклатурыПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

// Процедура вызывается при активизации строки списка иерархии номенклатуры поставщика.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка, форма подборов.
//
Процедура ПриАктивизацииСтрокиИерархииНоменклатурыПоставщика(Форма) Экспорт
	
	Если НЕ Форма.ИспользоватьФильтрНоменклатураПоставщика Тогда
		Возврат;
	КонецЕсли;
		
	Форма.ПодключитьОбработчикОжидания("ИерархияНоменклатурыПоставщикаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

// Процедура вызывается при активизации строки списка номенклатуры.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка.
//
Процедура ПриАктивизацииСтрокиСпискаНоменклатуры(Форма) Экспорт
	
	Форма.ПодключитьОбработчикОжидания("СписокПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

// Процедура вызывается при активизации строки таблицы номенклатуры на формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора товаров.
//
Процедура ПриАктивизацииСтрокиТаблицыНоменклатуры(Форма) Экспорт
	
	ЭтоФормаПомощникаПродаж = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		Возврат;
	КонецЕсли;

	СтрокаТаблицыНоменклатуры = Форма.Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
		ПодборТоваровКлиентСервер.ОчиститьТаблицуОстатков(Форма);
		Возврат;
	КонецЕсли; 
	
	Форма.ТекущаяСтрокаНоменклатуры = ПодборТоваровКлиентСервер.СтруктураСтрокиНоменклатуры();
	ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаНоменклатуры, СтрокаТаблицыНоменклатуры);
		
	Если ЭтоФормаПомощникаПродаж Тогда
		
		Форма.ДатаОтгрузки = '00010101';
		
		Если СтрокаТаблицыНоменклатуры.Доступно > 0 Тогда
			Форма.ДатаОтгрузки = НачалоДня(ТекущаяДата());
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма);
	
	Если Форма.ОтображатьОстатки И НЕ ЭтоФормаЧекаККМ Тогда
		Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при активизации строки таблицы характеристик на формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора товаров.
//
Процедура ПриАктивизацииСтрокиТаблицыХарактеристик(Форма) Экспорт
	
	ЭтоФормаПомощникаПродаж = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	
	СтрокаТаблицыХарактеристик = Форма.Элементы.ПодборТаблицаХарактеристики.ТекущиеДанные;
	
	Если СтрокаТаблицыХарактеристик = Неопределено Тогда
		
		Если Форма.НавигацияПоХарактеристикам Тогда
			ПодборТоваровКлиентСервер.ОчиститьТаблицуОстатков(Форма);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Форма.ТекущаяСтрокаХарактеристик = ПодборТоваровКлиентСервер.СтруктураСтрокиХарактеристик();
	ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаХарактеристик, СтрокаТаблицыХарактеристик);
	
	Если НЕ Форма.НавигацияПоХарактеристикам Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоФормаПомощникаПродаж Тогда
		
		Форма.ДатаОтгрузки = '00010101';
		
		Если СтрокаТаблицыХарактеристик.Доступно > 0 Тогда
			Форма.ДатаОтгрузки = НачалоДня(ТекущаяДата());
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.НавигацияПоХарактеристикам И НЕ ЭтоФормаЧекаККМ Тогда
		Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при активизации строки таблицы номенклатуры поставщика на формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора товаров.
//
Процедура ПриАктивизацииСтрокиНоменклатурыПоставщика(Форма) Экспорт
	
	Если НЕ Форма.НавигацияПоНоменклатуреПоставщика Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыНоменклатурыПоставщика = Форма.Элементы.ПодборТаблицаНоменклатураПоставщика.ТекущиеДанные;
	
	Если СтрокаТаблицыНоменклатурыПоставщика <> Неопределено Тогда
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		ПараметрыТовара.Вставить("НоменклатураПоставщика",СтрокаТаблицыНоменклатурыПоставщика.Ссылка);
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыНоменклатурыПоставщика);
		
		Форма.ТекущаяСтрокаНоменклатурыПоставщика = ПараметрыТовара;
		
	КонецЕсли;
	
	Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

// Процедура вызывается при изменении флажка "Отображать остатки" на формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура ПриИзмененииОтображенияОстатковПоСкладамДокумента(Форма) Экспорт
	
	Форма.ОтображатьОстатки = НЕ Форма.ОтображатьОстатки;
	
	Форма.Элементы.ОстаткиТоваров.Видимость = Форма.ОтображатьОстатки;
	
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	ЭтоФормаПомощникаПродаж = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	
	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
		Форма.Элементы.ОстаткиТоваровПоставщика.Видимость = Форма.ОтображатьОстатки;
	КонецЕсли;
	
	Если НЕ ЭтоФормаЧекаККМ Тогда
		Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания",0.1,Истина);
	КонецЕсли;
	
	Если НЕ ЭтоФормаЧекаККМ Тогда
		ПодборТоваровКлиентСервер.УстановитьТекстНадписиОтображатьОстатки(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при выборе строки таблицы характеристик в формах
// подборов. В процедуре выполняется проверка на допустимость выбора строки.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора,
//	Отказ (Неопределено) - переменная в которую записывается признак отказа.
//	Истина - выбранная строка является недопустимой для подбора, Ложь - все ОК.
//
Процедура ПриВыбореСтрокиТаблицыХарактеристик(Форма, Отказ) Экспорт
	
	Отказ = Истина;
	
	СтрокаТаблицыХарактеристик = Форма.Элементы.ПодборТаблицаХарактеристики.ТекущиеДанные;
	
	Если СтрокаТаблицыХарактеристик = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицыХарактеристик.ПометкаУдаления Тогда
		Если Вопрос(НСтр("ru = 'Выбранные данные помечены на удаление.
			                   |Выполнить выбор этих данных?'") , РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	
КонецПроцедуры

// Процедура вызывается при выборе строки таблицы номенклатуры в формах
// подборов. В процедуре выполняется проверка на допустимость выбора строки.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора,
//	Отказ (Неопределено) - переменная в которую записывается признак отказа.
//	Истина - выбранная строка является недопустимой для подбора, Ложь - все ОК.
//
Процедура ПриВыбореСтрокиТаблицыНоменклатуры(Форма, Отказ) Экспорт
	
	Отказ = Истина;
	
	СтрокаТаблицыНоменклатуры = Форма.Элементы.Список.ТекущиеДанные;
	
	Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицыНоменклатуры.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицыНоменклатуры.ПометкаУдаления Тогда
		Если Вопрос(НСтр("ru = 'Выбранные данные помечены на удаление.
			                   |Выполнить выбор этих данных?'") , РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом свойств вида номенклатуры.

// Процедура вызывается при выборе "фиксированного" значения в дереве отборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура ДеревоОтборовВыбор(Форма) Экспорт
	
	Если НЕ Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	ВариантДействий = ВариантДействийПриВыбореЗначенияДереваОтборов(Форма);
	
	Если ВариантДействий = 1 Тогда // нажали на гиперссылку с "фиксированным" значением
		УстановитьФиксированныйОтбор(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при изменении значения в дереве отборов по свойствам вида
// номенклатуры на формах списков и формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка номенклатуры или форма подбора.
//
Процедура ДеревоОтборовОтборПриИзменении(Форма) Экспорт
	
	Если НЕ Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	ВариантДействий = ВариантДействийПриИзмененииОтбораДереваОтборов(Форма);
	
	Если ВариантДействий = 3 Тогда // установили флажок на строке с незаполненным "фиксированным" значением
		УстановитьФиксированныйОтбор(Форма);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск на формах подбора.

// Если используется полнотекстовый поиск, то функция проверяет актуальность индекса.
// Если индекс не актуален, то отображается диалог с предложением обновить индекс
// полнотекстового поиска.
//
// Параметры:
//		Форма (УправляемаяФорма) - форма из которой выполняется вызов функции поиска.
//
// Возвращаемое значение:
//	Булево. Истина - выполнение поиска товаров возможно, Ложь - нет.
//
Функция ВыполнениеПоискаТоваровВозможно(Форма) Экспорт
	
	// При включении флажка "Поиск по точному соответствию", выполняется неполнотекстовый поиск, 
	// соответственно, не нужно проверять актуальность индекса полнотекстового поиска.
	Если Форма.НайтиПоТочномуСоответствию Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Форма.ИспользоватьПолнотекстовыйПоиск Тогда
		
		Если Форма.ИнформационнаяБазаФайловая И НЕ Форма.ИндексПолнотекстовогоПоискаАктуален Тогда
			
			Результат = Вопрос(НСтр("ru='Индекс полнотекстового поиска неактуален. Обновить индекс?'"), РежимДиалогаВопрос.ДаНет);
			
			Если Результат = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ОбновитьИндексПолнотекстовогоПоиска();
			Форма.ИндексПолнотекстовогоПоискаАктуален = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура обрабатывает флаг возврата функции выполнения поиска.
// Если поиск не был выполнен, то выводится предупреждение.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма из которой вызывалась функция поиска товаров по строке.
//
Процедура ПослеВыполненияПоискаТоваров(Форма) Экспорт
	
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	
	ПоискВыполнен = НЕ Форма.ПодборПоискНеУдачный;
	КодОшибки     = Форма.КодОшибкиПоиска;
	
	// Установить текущий элемент формы.
	ТекущийЭлемент = Форма.Элементы.Список;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		
		Если Форма.НавигацияПоХарактеристикам Тогда
			ТекущийЭлемент = Форма.Элементы.ПодборТаблицаХарактеристики;
		КонецЕсли;
		
		Если ЭтоФормаПодбораВДокументыЗакупки Тогда
			Если Форма.НавигацияПоНоменклатуреПоставщика Тогда
				ТекущийЭлемент = Форма.Элементы.ПодборТаблицаНоменклатураПоставщика;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПоискВыполнен Тогда
		
		ТекущийЭлемент = Форма.Элементы.СтрокаПоиска;
		
		Если ЭтоФормаПодбораВДокументыЗакупки Тогда
			Если Форма.НавигацияПоНоменклатуреПоставщика Тогда
				ТекущийЭлемент = Форма.Элементы.СтрокаПоискаНоменклатураПоставщика;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.ТекущийЭлемент = ТекущийЭлемент;
	
	// Обновить список выбора значений у строки поиска.
	СтрокаПоиска = Форма.СтрокаПоиска;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		
		Если НЕ ПоискВыполнен Тогда
			
			Если КодОшибки = "НичегоНеНайдено" Тогда
				ТекстПредупреждения = НСтр("ru = 'Ничего не найдено, уточните запрос.'");
			ИначеЕсли КодОшибки = "СлишкомМногоРезультатов" Тогда
				ТекстПредупреждения = НСтр("ru = 'Слишком много результатов поиска, уточните запрос.'");
			ИначеЕсли КодОшибки = "ОшибкаПоиска" Тогда
				ТекстПредупреждения = НСтр("ru = 'При выполнении поиска произошла ошибка, попробуйте изменить выражение поиска.'");
			КонецЕсли;
			
			Предупреждение(ТекстПредупреждения, 120);
			
		КонецЕсли;
		
		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Форма.Элементы.СтрокаПоиска.СписокВыбора, СтрокаПоиска, 21);
		
		Если ЭтоФормаПодбораВДокументыЗакупки Тогда
			СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Форма.Элементы.СтрокаПоискаНоменклатураПоставщика.СписокВыбора, СтрокаПоиска, 21);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывает функцию обновления индекса полнотекстового поиска на сервере.
//
Процедура ОбновитьИндексПолнотекстовогоПоиска() Экспорт
	
	Состояние(НСтр("ru = 'Идет обновление индекса полнотекстового поиска ...'"));
	
	ПодборТоваровВызовСервера.ОбновитьИндексПолнотекстовогоПоиска();
	
	Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено.'"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры навигации.

// Процедура устанавливает текущую строку иерархии номенклатуры в формах списков номенклатуры и подборов.
//
//	Форма (УправляемаяФорма) - форма списка, форма подбора.
//
Процедура УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма) Экспорт
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	
	ТекущаяСтрока = Форма.Элементы.Список.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоФормаПодбора И Форма.НавигацияПоХарактеристикам Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Форма.Элементы.Список.ТекущиеДанные;
	
	Если Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = ТекущиеДанные.Родитель Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = ТекущиеДанные.Родитель;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие.

// Процедура открывает форму просмотра цен товара. Используется в формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура ЦеныНоменклатуры(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура("Номенклатура, Характеристика, Дата");
	
	СтрокаТаблицыНоменклатуры = Форма.Элементы.Список.ТекущиеДанные;
	
	Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыХарактеристик = Форма.Элементы.ПодборТаблицаХарактеристики.ТекущиеДанные;
	
	ПараметрыФормы.Номенклатура = СтрокаТаблицыНоменклатуры.Ссылка;
	
	Если НЕ (СтрокаТаблицыХарактеристик = Неопределено) Тогда
		ПараметрыФормы.Характеристика = СтрокаТаблицыХарактеристик.Ссылка;
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		
		ПараметрыФормы.Дата = Форма.Дата;
		ИмяОбработки = "ПодборТоваровВДокументЗакупки";
		
	ИначеЕсли ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма) Тогда
		
		ПараметрыФормы.Дата = Форма.Дата;
		ИмяОбработки = "ПодборТоваровВДокументПродажи";
		
	ИначеЕсли ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма) Тогда
		
		ПараметрыФормы.Дата = НачалоДня(Форма.Объект.Дата);
		ИмяОбработки = "ПомощникПродаж";
		
	КонецЕсли;
	
	ИмяФормы = "Обработка." + ИмяОбработки + ".Форма.ЦеныНоменклатуры";
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, Форма, ПараметрыФормы.Номенклатура);
	
КонецПроцедуры

// Процедура открывает форму карточки номенклатуры. Используется в формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура ОткрытьКарточкуТовара(Форма) Экспорт
	
	ТекущаяСтрока = Форма.Элементы.Список.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура("Ключ", ТекущаяСтрока);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента", ПараметрыФормы);
	
КонецПроцедуры

// Процедура вызывается при нажатии на информационную надпись - строку с информацией 
// о количестве и сумме подобранных товаров на формах подборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора,
//	Объект (ОбработкаОбъект, ДокументОбъект) - объект подбора.
//
Процедура ПриНажатииНаИнформационнуюНадпись(Форма, Объект) Экспорт
	
	Форма.ПоказыватьПодобранныеТовары = НЕ Форма.ПоказыватьПодобранныеТовары;
	Форма.Элементы.ОбластьПодобранныеТовары.Видимость = Форма.ПоказыватьПодобранныеТовары;
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Перетаскивание на формах подбора.

// Функция формирует параметры перетаскивания из списков номенлатуры, номенклатуры поставщика и характеристики номенклатуры
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура ПолучитьДанныеПеретаскивания(Форма, Элемент, ПараметрыПеретаскивания) Экспорт
	
	МассивПараметров = Новый Массив; 
	
	СтраницаХарактеристики = Ложь;
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		Если Форма.НавигацияПоХарактеристикам И Не Форма.НавигацияПоНоменклатуреПоставщика Тогда
			СтраницаХарактеристики = Истина;
		КонецЕсли;
	Иначе
		Если Форма.НавигацияПоХарактеристикам Тогда
			СтраницаХарактеристики = Истина;
		КонецЕсли; 
	КонецЕсли;
		
	Для каждого КлючСтроки Из ПараметрыПеретаскивания.Значение Цикл
		
		ДанныеСтроки = Элемент.ДанныеСтроки(КлючСтроки);
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, ДанныеСтроки);
		
		Если СтраницаХарактеристики Тогда
			ЭтоТовар = Форма.ТекущаяСтрокаНоменклатуры.ЭтоТовар;
		Иначе 
			ЭтоТовар = ДанныеСтроки.ЭтоТовар;
		КонецЕсли;
		
		Если Не ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма) Тогда
			Если ЭтоТовар И Форма.Склады.Количество() = 1 И Форма.РежимПодбораИспользоватьСкладыВТабличнойЧасти Тогда
				ПараметрыТовара.Склад = Форма.Склады.Получить(0).Значение;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыТовара.КоличествоУпаковок = 1;
		
		МассивПараметров.Добавить(ПараметрыТовара);
		
	КонецЦикла;
	
	ПараметрыПеретаскивания.Значение = МассивПараметров;
	
КонецПроцедуры

// Функция формирует параметры перетаскивания из табличной части остатков
//
// Параметры:
//	Форма (УправляемаяФорма) - форма подбора.
//
Процедура ПолучитьДанныеПеретаскиванияОстатков(Форма, Элемент, ПараметрыПеретаскивания) Экспорт
	
	МассивПараметров = Новый Массив; 
	
	ТекущаяСтрокаОснование = Форма.ТекущаяСтрокаНоменклатуры;
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		ТекущаяСтрокаОснование = Форма.ТекущаяСтрокаХарактеристик;
	ИначеЕсли ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		Если Форма.НавигацияПоНоменклатуреПоставщика Тогда
			ТекущаяСтрокаОснование = Форма.ТекущаяСтрокаНоменклатурыПоставщика;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого КлючСтроки Из ПараметрыПеретаскивания.Значение Цикл
		
		ДанныеСтроки = Элемент.ДанныеСтроки(КлючСтроки);
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		ПараметрыТовара.Вставить("НоменклатураПоставщика");
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, ТекущаяСтрокаОснование);
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, ДанныеСтроки);
		
		ПараметрыТовара.КоличествоУпаковок = 1;
		
		МассивПараметров.Добавить(ПараметрыТовара);
		
	КонецЦикла;
	
	ПараметрыПеретаскивания.Значение = МассивПараметров;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом свойств вида номенклатуры.

// Функция возвращает признак небходимости установки отбора  динамического списка номенклатуры
// на формах отбора, по значениям дерева отборов. Вызывается при нажатии на поле выбора
// фиксированного значения в строке дерева отборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка или форма подбора.
//
// Возвращаемое значение:
//	Булево.
//	Истина - значение в дереве отоборов изменено и нужно применить значение
//	отбора к списку номенклатуры, 
//	Ложь - значение отбора не изменено.
//
Функция УстановитьФиксированныйОтбор(Форма)
	
	ТекущиеДанные = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.ФиксированноеЗначение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидНоменклатуры = Форма.ВидНоменклатуры;
	
	УстанавливатьОтборСписка = Ложь;
	
	ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
	
	Если ТипЗначенияОтбора = Тип("Строка") Тогда
		
		// Тип значения - строка. В этом случае открывается форма установки значения и список выбора
		// поля выбора значения заполняется доступными значениями.
		
		ПоНоменклатуре = Истина;
		
		Если ТекущиеДанные.Свойство("ОтборХарактеристик") Тогда
			ПоНоменклатуре = НЕ ТекущиеДанные.ОтборХарактеристик;
		КонецЕсли;
		
		ЗначениеОтбора = СокрЛП(ТекущиеДанные.ЗначениеОтбора);
		
		СписокЗначенийРеквизита = ПодборТоваровВызовСервера.СписокЗначенийРеквизита(
			ВидНоменклатуры, 
			ТекущиеДанные.ИмяРеквизита, 
			ТекущиеДанные.ЭтоДопРеквизит, 
			ПоНоменклатуре
		);
		
		СтруктураПараметров = Новый Структура("ИмяРеквизита, СписокСтрокОтбора, ЗначениеОтбора, ТипЗначения", 
		ТекущиеДанные.Представление, СписокЗначенийРеквизита, ТекущиеДанные.ЗначениеОтбора, ТипЗначенияОтбора);
		
		ЗначениеВыбора = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.ФормаУстановкиИнтервала", СтруктураПараметров, Форма);
		
		Если ЗначениеВыбора = Неопределено Тогда
			ТекущиеДанные.Отбор = ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора);
		Иначе
			
			ЗначениеОтбора = ЗначениеВыбора.ЗначениеОтбора;
			
			ТекущиеДанные.Отбор               = ЗначениеЗаполнено(ЗначениеОтбора);
			ТекущиеДанные.ОтборУстановлен     = ТекущиеДанные.Отбор;
			ТекущиеДанные.ЗначениеОтбора      = ЗначениеОтбора;
			ТекущиеДанные.ПредставлениеОтбора = ?(ЗначениеЗаполнено(ЗначениеОтбора), ЗначениеОтбора, НСтр("ru = '<не задано>'"));
			
			УстанавливатьОтборСписка = Истина;
			
		КонецЕсли;
		
	Иначе
		
		// Тип значения - число или дата, в этом случае открывается форма установки интервала.
		
		СтруктураПараметров = Новый Структура("ИмяРеквизита, ЗначениеОт, ЗначениеДо, ТипЗначения", 
		ТекущиеДанные.Представление, ТекущиеДанные.ИнтервалОт, ТекущиеДанные.ИнтервалДо, ТипЗнч(ТекущиеДанные.ЗначениеОтбора));
		
		ЗначениеИнтервала = ОткрытьФормуМодально("Справочник.Номенклатура.Форма.ФормаУстановкиИнтервала", СтруктураПараметров, Форма);
		
		Если НЕ (ЗначениеИнтервала = Неопределено) Тогда
			
			Если ЗначениеИнтервала.ИнтервалОт <> ТекущиеДанные.ИнтервалОт 
				ИЛИ ЗначениеИнтервала.ИнтервалДо <> ТекущиеДанные.ИнтервалДо Тогда
				
				ТекущиеДанные.ИнтервалОт = ЗначениеИнтервала.ИнтервалОт;
				ТекущиеДанные.ИнтервалДо = ЗначениеИнтервала.ИнтервалДо;
				
				ПредставлениеОтбора = 
				?(ЗначениеЗаполнено(ТекущиеДанные.ИнтервалОт), НСтр("ru = 'от '") + ТекущиеДанные.ИнтервалОт, "") + 
				?(ЗначениеЗаполнено(ТекущиеДанные.ИнтервалДо), НСтр("ru = ' до '") + ТекущиеДанные.ИнтервалДо, "");
				
				ТекущиеДанные.ПредставлениеОтбора = 
				?(ЗначениеЗаполнено(ПредставлениеОтбора), ПредставлениеОтбора, НСтр("ru = '<не задано>'"));
				
				УстанавливатьОтборСписка = Истина;
				
			КонецЕсли;
			
			ТекущиеДанные.Отбор = ЗначениеЗаполнено(ЗначениеИнтервала.ИнтервалОт) ИЛИ ЗначениеЗаполнено(ЗначениеИнтервала.ИнтервалДо);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат УстанавливатьОтборСписка;
	
КонецФункции

// Функция возвращает число - код варианта действия которое было выполнено с деревом отборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка справочника номенклатуры или форма подбора.
//
// Возвращаемое значение:
//	Число.
//	0 - никакого изменения значений в дереве отборов не произошло;
//	1 - был установлен/снят флажок у строки (или родительской строки) значений, например:
//	    был установлен/снят флажок у строки с качеством "Новый" или у строки "Качество";
//	2 - был установлен/снят фладок на строке с "фиксированным значением", причем фиксированное
//	    значение уже было указано, например: в строке дерева отборов было указано конкретное значение диаметра
//	    кабеля и у него установили/сняли флажок;
//	3 - был УСТАНОВЛЕН флажок на строке с "фиксированным значением", причем фиксированное значение
//	    в строке еще не указано, например: в строке дерева отборов не было указано конкретное значение
//	    диаметра кабеля и у строки установили флажок. Такой вариант действия приводит к тому что открывается
//	    дополнительная форма установки значений (или интервала) фиксированного значения.
//	
Функция ВариантДействийПриИзмененииОтбораДереваОтборов(Форма)
	
	ВариантДействий = 0;
	
	ТекущиеДанные = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	
	Если ТекущиеДанные.ФиксированноеЗначение Тогда
		
		// Фиксированное значение - например, введен артикул, или указано,
		// какое-то конкретное числовое, строковое значение, или интервал дат.
		
		ВариантДействий = 2; // установили/сняли флажок на поле фиксированного значения
		
		Если ТекущиеДанные.Отбор Тогда
			
			ТипЗначенияОтбора = ТипЗнч(ТекущиеДанные.ЗначениеОтбора);
			
			Если НЕ (
				     (ТипЗначенияОтбора = Тип("Строка") И ЗначениеЗаполнено(ТекущиеДанные.ЗначениеОтбора)) 
				 ИЛИ ТипЗначенияОтбора <> Тип("Строка") И (ЗначениеЗаполнено(ТекущиеДанные.ИнтервалОт) ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ИнтервалДо))
				    ) Тогда
				
				ВариантДействий = 3; // УСТАНОВИЛИ флажок на незаполненном значением поле фиксированного значения
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ВариантДействий = 1; // установили/сняли флажок на строке конкретного значения или группы значений
		
		Родитель = ТекущиеДанные.ПолучитьРодителя();
		
		Если Родитель = Неопределено Тогда // выбрана строка-родитель
			
			// Установить/снять значение флажка отбора для всех подчиненных строк.
			
			ПодчиненныеЭлементыДерева = ТекущиеДанные.ПолучитьЭлементы();
			
			Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
				ЭлементДерева.Отбор = ТекущиеДанные.Отбор;
			КонецЦикла;
			
		Иначе
			
			// Выбрана подчиненная строка.
			
			Родитель.Отбор = Ложь;
			
			ПодчиненныеЭлементыДерева = Родитель.ПолучитьЭлементы();
			
			// Пройти по всем подчиненным строкам родителя выбранной строки, и если
			// хотя бы для одной строки установлен флажок отбора, то включить флажок отбора
			// и родительской строки.
			
			Для Каждого ЭлементДерева Из ПодчиненныеЭлементыДерева Цикл
				
				Если ЭлементДерева.Отбор Тогда
					Родитель.Отбор = Истина;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВариантДействий;
	
КонецФункции

// Функция возвращает число - код варианта действий которое было выполнено с деревом отборов
// при событии выбора значения в дереве отборов.
//
// Параметры:
//	Форма (УправляемаяФорма) - форма списка справочника номенклатуры или форма подбора.
//
// Возвращаемое значение:
//	Число.
//	0 - никакого изменения значений в дереве отборов не произошло,
//	1 - было выбрано значение в строке с "фиксированным" значением,
//	в этом случае необходимо открыть форму установки "фиксированного" значения.
//
Функция ВариантДействийПриВыбореЗначенияДереваОтборов(Форма)
	
	ДеревоОтборов   = Форма.Элементы.ДеревоОтборов;
	ТекущийЭлемент  = Форма.Элементы.ДеревоОтборов.ТекущийЭлемент;
	ТекущаяСтрока   = Форма.Элементы.ДеревоОтборов.ТекущаяСтрока;
	ТекущиеДанные   = Форма.Элементы.ДеревоОтборов.ТекущиеДанные;
	
	ВариантДействий = 0;
	
	Если ТекущийЭлемент = Форма.Элементы.ДеревоОтборовПредставлениеОтбора Тогда
		
		ВариантДействий = 1;
		
	ИначеЕсли ТекущийЭлемент = Форма.Элементы.ДеревоОтборовПредставление Тогда
		
		Если ТекущиеДанные.ФиксированноеЗначение Тогда
			
			ВариантДействий = 1;
			
		ИначеЕсли НЕ ТекущиеДанные.ОтборДоступен Тогда
			
			// Если был щелчок по родительской строке, то свернуть/развернуть узел.
			
			Если ДеревоОтборов.Развернут(ТекущаяСтрока) Тогда
				ДеревоОтборов.Свернуть(ТекущаяСтрока);
			Иначе
				ДеревоОтборов.Развернуть(ТекущаяСтрока);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВариантДействий;
	
КонецФункции
