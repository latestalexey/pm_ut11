////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции выбора документа расчетов.

Процедура ЗаполнитьДанныеВыбораОснованияПлатежа(ДанныеВыбора, Текст, СтруктураОтбора) Экспорт
	
	ВыборОснованияПлатежа = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДокументыРасчетовСКлиентами(ВыборОснованияПлатежа, Истина);
	Запрос.УстановитьПараметр("Организация", СтруктураОтбора.Организация);
	Запрос.УстановитьПараметр("Контрагент", СтруктураОтбора.Контрагент);
	Запрос.УстановитьПараметр("ВыборОснованияПлатежа", ВыборОснованияПлатежа);
	Запрос.УстановитьПараметр("СтрокаПоиска", Текст + "%");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначениеВыбора = Новый Структура("ОснованиеПлатежа, Заказ, Партнер", Выборка.Ссылка, Выборка.ОбъектРасчетов, Выборка.Партнер);
		ДанныеВыбора.Добавить(
			Новый Структура("Значение, ПометкаУдаления",
				ЗначениеВыбора,
				(Выборка.СостояниеДокумента = 1)),
			Строка(Выборка.Ссылка)
		);
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает текст запроса по документам расчетов с клиентами.
Функция ПолучитьТекстЗапросаДокументыРасчетовСКлиентами(ВыборОснованияПлатежа, ВводПоСтроке = Ложь) Экспорт
	
	ТекстЗапроса = "";
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента) Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		Или (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ДанныеДокумента.Контрагент = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
		|ГДЕ
		|	((ДанныеДокумента.РеализацияПоЗаказам И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным))
		|		Или (Не ДанныеДокумента.РеализацияПоЗаказам И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		Или (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ДанныеДокумента.Контрагент = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.АктВыполненныхРабот) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
		|ГДЕ
		|	((ДанныеДокумента.АктПоЗаказам И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным))
		|		Или (Не ДанныеДокумента.АктПоЗаказам И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		Или (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ДанныеДокумента.Контрагент = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомиссионера) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	ДанныеДокумента.Организация В (&Организация)
			|	И ДанныеДокумента.Контрагент = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомиссионераОСписании) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента	
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	ДанныеДокумента.Организация В (&Организация)
			|	И ДанныеДокумента.Контрагент = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомитенту) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаВознаграждения КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетКомитенту КАК ДанныеДокумента
		|ГДЕ
		|	Не ДанныеДокумента.УдержатьВознаграждение
		|	И ДанныеДокумента.СуммаВознаграждения <> 0
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ДанныеДокумента.Контрагент = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента	
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		Или (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ДанныеДокумента.Контрагент = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПередачаТоваровМеждуОрганизациями) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.ОрганизацияПолучатель
		|	КОНЕЦ КАК Контрагент,
		|	
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.ОрганизацияПолучатель
			|	КОНЕЦ = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ // документы на основную сумму
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Комиссионер
		|	КОНЕЦ КАК Контрагент,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	ДанныеДокумента.Организация В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Комиссионер
			|	КОНЕЦ = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|
		|ВЫБРАТЬ // документы на сумму вознаграждения
		|	ДанныеДокумента.Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Комиссионер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Организация
		|	КОНЕЦ КАК Контрагент,
		|	ДанныеДокумента.СуммаВознаграждения,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	ИСТИНА,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
		|ГДЕ
		|	(НЕ ДанныеДокумента.УдержатьВознаграждение)
		|	И ДанныеДокумента.СпособРасчетаВознаграждения <> ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается)
		|	И ДанныеДокумента.СуммаВознаграждения <> 0
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Комиссионер В (&Организация)
			|	И ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
			|		ДанныеДокумента.Контрагент
			|	ИНАЧЕ
			|		ДанныеДокумента.Организация
			|	КОНЕЦ = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Партнер КАК Партнер,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|
		|	0 КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|	И ДанныеДокумента.ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|	)
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ДанныеДокумента.Контрагент = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыборОснованияПлатежа И ПравоДоступа("Чтение", Метаданные.Документы.СчетНаОплатуКлиенту) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.ДокументОснование
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.СчетНаОплатуКлиенту КАК ДанныеДокумента
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			|	ДанныеДокумента.Организация В (&Организация)
			|	И ДанныеДокумента.Контрагент = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияУслугПрочихАктивов) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		Или ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		Или (&ВыборОснованияПлатежа И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ДанныеДокумента.Контрагент = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыборОснованияПлатежа И ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураВыданный) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.АктВыполненныхРабот).Партнер КАК Партнер,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.АктВыполненныхРабот).Контрагент КАК Контрагент,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.АктВыполненныхРабот).СуммаВзаиморасчетов КАК Сумма,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.АктВыполненныхРабот).ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.АктВыполненныхРабот).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.АктВыполненныхРабот).Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.ДокументОснование
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.СчетФактураВыданный КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ДокументОснование ССЫЛКА Документ.АктВыполненныхРабот
		|	И ((ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.АктВыполненныхРабот).АктПоЗаказам
		|			И ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.АктВыполненныхРабот).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным))
		|		Или (Не ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.АктВыполненныхРабот).АктПоЗаказам
		|			И ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.АктВыполненныхРабот).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		Или (&ВыборОснованияПлатежа
		|			И ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.АктВыполненныхРабот).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.АктВыполненныхРабот).Контрагент = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияТоваровУслуг).Партнер КАК Партнер,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияТоваровУслуг).Контрагент КАК Контрагент,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияТоваровУслуг).СуммаВзаиморасчетов КАК Сумма,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияТоваровУслуг).ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияТоваровУслуг).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияТоваровУслуг).Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.ДокументОснование
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.СчетФактураВыданный КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
		|	И ((ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияТоваровУслуг).РеализацияПоЗаказам
		|			И ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияТоваровУслуг).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным))
		|		Или (Не ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияТоваровУслуг).РеализацияПоЗаказам
		|			И ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияТоваровУслуг).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		Или (&ВыборОснованияПлатежа
		|			И ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияТоваровУслуг).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияТоваровУслуг).Контрагент = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияУслугПрочихАктивов).Партнер КАК Партнер,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияУслугПрочихАктивов).Контрагент КАК Контрагент,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияУслугПрочихАктивов).СуммаВзаиморасчетов КАК Сумма,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияУслугПрочихАктивов).ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияУслугПрочихАктивов).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияУслугПрочихАктивов).Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.ДокументОснование
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.СчетФактураВыданный КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ДокументОснование ССЫЛКА Документ.РеализацияУслугПрочихАктивов
		|	И (ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияУслугПрочихАктивов).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		Или ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияУслугПрочихАктивов).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|		Или (&ВыборОснованияПлатежа
		|			И ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияУслугПрочихАктивов).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)))
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.РеализацияТоваровУслуг).Контрагент = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;

		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.ОтчетКомиссионера).Партнер КАК Партнер,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.ОтчетКомиссионера).Контрагент КАК Контрагент,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.ОтчетКомиссионера).СуммаДокумента КАК Сумма,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.ОтчетКомиссионера).Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.ОтчетКомиссионера).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.ОтчетКомиссионера).Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.ДокументОснование
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.СчетФактураВыданный КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ДокументОснование ССЫЛКА Документ.ОтчетКомиссионера
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.ОтчетКомиссионера).Контрагент = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.ОтчетКомитенту).Партнер КАК Партнер,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.ОтчетКомитенту).Контрагент КАК Контрагент,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.ОтчетКомитенту).СуммаВознаграждения КАК Сумма,
		|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.ОтчетКомитенту).Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Истина КАК ЭтоРасчетыСКлиентами,
		|
		|	ВЫБОР КОГДА ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.ОтчетКомитенту).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.ОтчетКомитенту).Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.ДокументОснование
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.СчетФактураВыданный КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ДокументОснование ССЫЛКА Документ.ОтчетКомитенту
		|	И Не ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.ОтчетКомитенту).УдержатьВознаграждение
		|	И ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.ОтчетКомитенту).СуммаВознаграждения <> 0
		|
		|";
		
		Если ВводПоСтроке Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И ДанныеДокумента.Организация В (&Организация)
			|	И ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование КАК Документ.ОтчетКомитенту).Контрагент = &Контрагент
			|	И ДанныеДокумента.Номер ПОДОБНО &СтрокаПоиска
			|";
		КонецЕсли;
	КонецЕсли;
	
	Если Лев(ТекстЗапроса, 10) = "ОБЪЕДИНИТЬ" Тогда
		ТекстЗапроса = Сред(ТекстЗапроса, 15);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает текст запроса по документам расчетов с поставщиками.
Функция ПолучитьТекстЗапросаДокументыРасчетовСПоставщиками() Экспорт
	
	ТекстЗапроса = "";
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказПоставщику) Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|
		|";
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеТоваровУслуг) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
		|ГДЕ
		|	((ДанныеДокумента.ПоступлениеПоЗаказам И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным))
		|		Или (Не ДанныеДокумента.ПоступлениеПоЗаказам И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)))
		|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|
		|";
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПоступлениеУслугПрочихАктивов) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ПоступлениеУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	(ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
		|		Или ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|";
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомиссионера) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаВознаграждения КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
		|ГДЕ
		|	Не ДанныеДокумента.УдержатьВознаграждение
		|	И ДанныеДокумента.СуммаВознаграждения <> 0
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|";
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомитенту) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетКомитенту КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|	
		|";
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомитентуОСписании) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетКомитентуОСписании КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|";
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПередачаТоваровМеждуОрганизациями) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.ОрганизацияПолучатель КАК Организация,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Организация
		|	КОНЕЦ КАК Контрагент,
		|
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию)
		|";
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ // документы на основную сумму
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Комиссионер КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Организация
		|	КОНЕЦ КАК Контрагент,
		|
		|	ДанныеДокумента.СуммаДокумента КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента	
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ // документы на сумму комиссионного вознаграждения
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Партнер
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|	КОНЕЦ КАК Партнер,
		|	ВЫБОР КОГДА ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента ТОГДА
		|		ДанныеДокумента.Контрагент
		|	ИНАЧЕ
		|		ДанныеДокумента.Комиссионер
		|	КОНЕЦ КАК Контрагент,
		|
		|	ДанныеДокумента.СуммаВознаграждения КАК Сумма,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
		|ГДЕ (НЕ ДанныеДокумента.УдержатьВознаграждение)
		|	И ДанныеДокумента.СпособРасчетаВознаграждения<>ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается)
		|	И ДанныеДокумента.СуммаВознаграждения<>0
		|";
		КонецЕсли;
		
	Если ПравоДоступа("Чтение", Метаданные.Документы.ТаможеннаяДекларацияИмпорт) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.СуммаВзаиморасчетов КАК Сумма,
		|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеДокумента.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеДокумента.Проведен ТОГДА
		|		0
		|	КОГДА ДанныеДокумента.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		2
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|";
	КонецЕсли;
		
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" +
		"
		|ВЫБРАТЬ
		|	ДанныеСправочника.Ссылка КАК Ссылка,
		|	ДанныеСправочника.Дата КАК Дата,
		|	ДанныеСправочника.Номер КАК Номер,
		|	ДанныеСправочника.Организация КАК Организация,
		|	ДанныеСправочника.Партнер КАК Партнер,
		|	ДанныеСправочника.Контрагент КАК Контрагент,
		|
		|	0 КАК Сумма,
		|	ДанныеСправочника.ВалютаВзаиморасчетов КАК Валюта,
		|	ТИПЗНАЧЕНИЯ(ДанныеСправочника.Ссылка) КАК Тип,
		|	Ложь КАК ЭтоРасчетыСКлиентами,
		|	ДанныеСправочника.Ссылка КАК ОбъектРасчетов,
		|	
		|	ВЫБОР КОГДА ДанныеСправочника.ПометкаУдаления ТОГДА
		|		1
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СостояниеДокумента
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеСправочника
		|ГДЕ
		|	ДанныеСправочника.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|	И ДанныеСправочника.ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|	)
		|";
	КонецЕсли;
	
	Если Лев(ТекстЗапроса, 10) = "ОБЪЕДИНИТЬ" Тогда
		ТекстЗапроса = Сред(ТекстЗапроса, 15);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции заполнения документов.

// Процедура заполнения табличной части "РасшифровкаПлатежа" по заказу клиента.
//
// Параметры:
//	ЗаказКлиента - ДокументСсылка.ЗаказКлиента - Документ - основание
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//
Процедура ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(ЗаказКлиента, Договор, ВалютаДокумента, РасшифровкаПлатежа, Партнер) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Если ТипЗнч(ЗаказКлиента) = Тип("Массив") Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента[0], "ПорядокРасчетов");
		Иначе
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказКлиента, "ПорядокРасчетов");
		КонецЕсли;
		
		Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	РасчетыСКлиентами.Период					КАК Период,
			|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСКлиентами.ЗаказКлиента			   	КАК ЗаказКлиента,
			|	Аналитика.Партнер							КАК Партнер,
			|	РасчетыСКлиентами.Валюта					КАК Валюта,
			|	СУММА(РасчетыСКлиентами.КОплате)			КАК СуммаПоГрафику
			|ПОМЕСТИТЬ ТаблицаКОплате
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|ГДЕ
			|	РасчетыСКлиентами.Активность
			|	И РасчетыСКлиентами.Регистратор В (&ЗаказКлиента)
			|	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И РасчетыСКлиентами.КОплате > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСКлиентами.Период,
			|	РасчетыСКлиентами.ЗаказКлиента,
			|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
			|	РасчетыСКлиентами.Валюта,
			|	Аналитика.Партнер
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ТекущаяДата КАК Период,
			|	Аналитика.КлючАналитики КАК АналитикаУчетаПоПартнерам,
			|	ДанныеДоговора.Ссылка КАК ЗаказКлиента,
			|	ДанныеДоговора.Партнер КАК Партнер,
			|	ДанныеДоговора.ВалютаВзаиморасчетов КАК Валюта,
			|	0 КАК СуммаПоГрафику
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО ДанныеДоговора.Партнер = Аналитика.Партнер
			|			И ДанныеДоговора.Контрагент = Аналитика.Контрагент
			|			И ДанныеДоговора.Организация = Аналитика.Организация
			|ГДЕ
			|	ДанныеДоговора.Ссылка В (&ЗаказКлиента)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ТаблицаКОплате.Период) КАК Период,
			|	ТаблицаКОплате.ЗаказКлиента	   КАК ОснованиеПлатежа,
			|	ТаблицаКОплате.ЗаказКлиента	   КАК Заказ,
			|	ТаблицаКОплате.Партнер		   КАК Партнер,
			|	ТаблицаКОплате.Валюта		   КАК ВалютаВзаиморасчетов,
			|
			|	ВЫБОР
			|		КОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику) > 0 И СУММА(ТаблицаКОплате.СуммаПоГрафику) <= МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток)
			|			ТОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику)
			|		ИНАЧЕ МАКСИМУМ(РасчетыСКлиентамиОстатки.КОплатеОстаток)
			|	КОНЕЦ КАК СуммаПоГрафику,
			|	СУММА(0) КАК СуммаОплаты
			|
			|ИЗ
			|	ТаблицаКОплате КАК ТаблицаКОплате
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(
			|				,
			|				(АналитикаУчетаПоПартнерам, ЗаказКлиента, Валюта) В
			|					(ВЫБРАТЬ
			|						ТаблицаКОплате.АналитикаУчетаПоПартнерам,
			|						ТаблицаКОплате.ЗаказКлиента,
			|						ТаблицаКОплате.Валюта
			|					ИЗ
			|						ТаблицаКОплате)) КАК РасчетыСКлиентамиОстатки
			|		ПО ТаблицаКОплате.АналитикаУчетаПоПартнерам = РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам
			|			И ТаблицаКОплате.ЗаказКлиента = РасчетыСКлиентамиОстатки.ЗаказКлиента
			|			И ТаблицаКОплате.Валюта = РасчетыСКлиентамиОстатки.Валюта
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаКОплате.ЗаказКлиента,
			|	ТаблицаКОплате.Партнер,
			|	ТаблицаКОплате.Валюта
			|
			|ИТОГИ ПО
			|	ТаблицаКОплате.ЗаказКлиента
			|";
			
		Иначе
				
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	РасчетыСКлиентами.ЗаказКлиента КАК ОснованиеПлатежа,
			|	РасчетыСКлиентами.ЗаказКлиента КАК Заказ,
			|	Аналитика.Партнер КАК Партнер,
			|	РасчетыСКлиентами.ЗаказКлиента.Соглашение КАК Соглашение,
			|	РасчетыСКлиентами.Период КАК Период,
			|	РасчетыСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
			|	РасчетыСКлиентами.ФормаОплаты КАК ФормаОплаты,
			|	РасчетыСКлиентами.КОплате КАК СуммаПоГрафику,
			|	ЕСТЬNULL(РасчетыСКлиентамиОбороты.КОплатеРасход, 0) КАК СуммаОплаты
			|ИЗ
			|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрНакопления.РасчетыСКлиентами.Обороты(,,Период) КАК РасчетыСКлиентамиОбороты
			|	ПО
			|		РасчетыСКлиентами.ЗаказКлиента = РасчетыСКлиентамиОбороты.ЗаказКлиента
			|		И РасчетыСКлиентами.Валюта = РасчетыСКлиентамиОбороты.Валюта
			|		И РасчетыСКлиентами.АналитикаУчетаПоПартнерам = РасчетыСКлиентамиОбороты.АналитикаУчетаПоПартнерам
			|
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|	ПО
			|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|		
			|ГДЕ
			|	РасчетыСКлиентами.Активность
			|	И РасчетыСКлиентами.ЗаказКлиента В (&ЗаказКлиента)
			|	И РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|	И РасчетыСКлиентами.КОплате > 0
			|	
			|УПОРЯДОЧИТЬ ПО
			|	РасчетыСКлиентами.Период,
			|	РасчетыСКлиентами.НомерСтроки
			|
			|ИТОГИ ПО
			|	РасчетыСКлиентами.ЗаказКлиента
			|";
			
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		
		ВыборкаПоЗаказам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоЗаказам.Следующий() Цикл
			
			СуммаПоГрафикуВсего = 0;
		
			Выборка = ВыборкаПоЗаказам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				// Найдем первый неоплаченный этап.
				Если (Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего) > Выборка.СуммаОплаты Тогда
					
					НоваяСтрока = РасшифровкаПлатежа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего - Выборка.СуммаОплаты;
					
					Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДата());
					
					НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
					
					Прервать;
					
				Иначе
					
					СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЦикла;
		
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			Если ТипЗнч(ЗаказКлиента) <> Тип("Массив") Тогда
				НоваяСтрока.ОснованиеПлатежа = ЗаказКлиента;
				НоваяСтрока.Заказ = ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов, Договор, ЗаказКлиента);;
				НоваяСтрока.Партнер = Партнер;
			КонецЕсли;
		Иначе
			РасшифровкаПлатежа.Свернуть("ОснованиеПлатежа, Заказ, Партнер, ВалютаВзаиморасчетов", "Сумма, СуммаВзаиморасчетов");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по счету на оплату.
//
// Параметры:
//	СчетНаОплату - ДокументСсылка.СчетНаОплатуКлиенту - Документ - основание
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//
Процедура ЗаполнитьРасшифровкуПлатежаПоСчетуНаОплату(СчетНаОплату, ЗаказКлиента, ВалютаДокумента, РасшифровкаПлатежа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение табличной части "Расшифровка платежа"
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СчетНаОплатуКлиенту.Ссылка КАК ОснованиеПлатежа,
	|
	|	ВЫБОР КОГДА СчетНаОплатуКлиенту.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		СчетНаОплатуКлиенту.Договор
	|	ИНАЧЕ
	|		СчетНаОплатуКлиенту.ДокументОснование
	|	КОНЕЦ КАК Заказ,
	|
	|	СчетНаОплатуКлиенту.ДокументОснование.Партнер КАК Партнер,
	|	СчетНаОплатуКлиенту.ДокументОснование.Соглашение КАК Соглашение,
	|
	|	ЕСТЬNULL(
	|		СчетНаОплатуКлиенту.ДокументОснование.ВалютаВзаиморасчетов, 
	|		СчетНаОплатуКлиенту.ДокументОснование.Валюта
	|	) КАК ВалютаВзаиморасчетов,
	|
	|	ВЫБОР КОГДА СчетНаОплатуКлиенту.ДокументОснование ССЫЛКА Справочник.ДоговорыКонтрагентов
	|	 ИЛИ СчетНаОплатуКлиенту.Договор.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		СчетНаОплатуКлиенту.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0)
	|	КОГДА СчетНаОплатуКлиенту.СуммаДокумента > ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) ТОГДА
	|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0)
	|	КОГДА СчетНаОплатуКлиенту.СуммаДокумента > ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0) ТОГДА
	|		СчетНаОплатуКлиенту.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентами.СуммаОплаты, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ИЗ
	|	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			РасчетыСКлиентами.СчетНаОплату,
	|			СУММА(
	|				ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|					РасчетыСКлиентами.Сумма
	|				ИНАЧЕ
	|					0
	|				КОНЕЦ
	|			) КАК СуммаОплаты
	|		ИЗ
	|			РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ГДЕ
	|			РасчетыСКлиентами.Активность
	|			И РасчетыСКлиентами.СчетНаОплату = &СчетНаОплату
	|			
	|		СГРУППИРОВАТЬ ПО
	|			РасчетыСКлиентами.СчетНаОплату
	|		) КАК РасчетыСКлиентами
	|	ПО
	|		СчетНаОплатуКлиенту.Ссылка = РасчетыСКлиентами.СчетНаОплату
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСКлиентами.Остатки(, 
	|			ЗаказКлиента = &ЗаказКлиента
	|		) КАК РасчетыСКлиентамиОстатки
	|	ПО
	|		Истина
	|		
	|ГДЕ
	|	СчетНаОплатуКлиенту.Ссылка = &СчетНаОплату
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СчетНаОплату", СчетНаОплату);
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказКлиента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
			
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДата());
				
		НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
		НоваяСтрока.СчетНаОплату = СчетНаОплату;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по возврату товаров от клиента.
//
// Параметры:
//	ДокументРасчетов - ДокументСсылка - Документ - основание
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств
//	СуммаДокумента - Число - Сумма документа - основания
//	Партнер - СправочникСсылка.Партнеры - Партнер документа - основания
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//
Процедура ЗаполнитьРасшифровкуПлатежаПоВозвратуТоваровОтКлиента(Знач ДокументРасчетов, Договор, ВалютаДокумента, СуммаДокумента, Партнер, РасшифровкаПлатежа) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Если ЗначениеЗаполнено(Договор) Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта("ПорядокРасчетов", Договор);
			Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
				ДокументРасчетов = Договор;
			КонецЕсли;
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РасчетыСКлиентами.ЗаказКлиента КАК Заказ,
		|	РасчетыСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
		|	(-РасчетыСКлиентами.СуммаОстаток) КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(,
		|		ЗаказКлиента = &ДокументРасчетов
		|	) КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.СуммаОстаток < 0
		|");
		
		Запрос.УстановитьПараметр("ДокументРасчетов", ДокументРасчетов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Партнер = Партнер;
			
			Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДата());
			
			Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			Если Сумма <= СуммаДокумента Тогда
				НоваяСтрока.Сумма = Сумма;
			Иначе
				НоваяСтрока.Сумма = СуммаДокумента;
				НоваяСтрока.СуммаВзаиморасчетов = 0;
			КонецЕсли;
		Иначе
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Заказ = ДокументРасчетов;
			НоваяСтрока.Партнер = Партнер;
			НоваяСтрока.Сумма = СуммаДокумента;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по заказу поставщику.
//
// Параметры:
//	ЗаказКлиента - ДокументСсылка.ЗаказКлиента - Документ - основание
//	ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа поступления денежных средств
//	СуммаКОплате - Число - Сумма к оплате поставщику
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//	ЖелательнаяДатаПлатежа - Дата - Дата платежа по графику
//  Организация - СправочникСсылка.Организации - Организация, осуществляющая закупку
//
Процедура ЗаполнитьРасшифровкуПлатежаПоЗаказуПоставщику(ЗаказПоставщику, Договор, ВалютаДокумента, Знач СуммаКОплате, РасшифровкаПлатежа, ЖелательнаяДатаПлатежа = Неопределено, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Если ТипЗнч(ЗаказПоставщику) = Тип("Массив") Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику[0], "ПорядокРасчетов");
		Иначе
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПоставщику, "ПорядокРасчетов");
		КонецЕсли;
		
		Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	РасчетыСПоставщиками.Период					   КАК Период,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
			|	РасчетыСПоставщиками.ЗаказПоставщику		   КАК ЗаказПоставщику,
			|	Аналитика.Партнер							   КАК Партнер,
			|	РасчетыСПоставщиками.Валюта					   КАК Валюта,
			|	СУММА(РасчетыСПоставщиками.КОплате)			   КАК СуммаПоГрафику
			|ПОМЕСТИТЬ ТаблицаКОплате
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|		И (&Организация = Аналитика.Организация
			|			ИЛИ &Организация = Неопределено)
			|ГДЕ
			|	РасчетыСПоставщиками.Активность
			|	И РасчетыСПоставщиками.Регистратор В (&ЗаказПоставщику)
			|	И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	И РасчетыСПоставщиками.КОплате > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСПоставщиками.Период,
			|	РасчетыСПоставщиками.ЗаказПоставщику,
			|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
			|	РасчетыСПоставщиками.Валюта,
			|	Аналитика.Партнер
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	&ТекущаяДата КАК Период,
			|	Аналитика.КлючАналитики КАК АналитикаУчетаПоПартнерам,
			|	ДанныеДоговора.Ссылка КАК ЗаказПоставщику,
			|	ДанныеДоговора.Партнер КАК Партнер,
			|	ДанныеДоговора.ВалютаВзаиморасчетов КАК Валюта,
			|	0 КАК СуммаПоГрафику
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|		ПО ДанныеДоговора.Партнер = Аналитика.Партнер
			|			И ДанныеДоговора.Контрагент = Аналитика.Контрагент
			|			И ДанныеДоговора.Организация = Аналитика.Организация
			|ГДЕ
			|	ДанныеДоговора.Ссылка В (&ЗаказПоставщику)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МИНИМУМ(ТаблицаКОплате.Период) КАК Период,
			|	ТаблицаКОплате.ЗаказПоставщику КАК Заказ,
			|	ТаблицаКОплате.Партнер		   КАК Партнер,
			|	ТаблицаКОплате.Валюта		   КАК ВалютаВзаиморасчетов,
			|
			|	ВЫБОР
			|		КОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику) > 0 И СУММА(ТаблицаКОплате.СуммаПоГрафику) <= МАКСИМУМ(-РасчетыСПоставщикамиОстатки.КОплатеОстаток)
			|			ТОГДА СУММА(ТаблицаКОплате.СуммаПоГрафику)
			|		ИНАЧЕ МАКСИМУМ(-РасчетыСПоставщикамиОстатки.КОплатеОстаток)
			|	КОНЕЦ КАК СуммаПоГрафику,
			|	СУММА(0) КАК СуммаОплаты
			|
			|ИЗ
			|	ТаблицаКОплате КАК ТаблицаКОплате
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(
			|				,
			|				(АналитикаУчетаПоПартнерам, ЗаказПоставщику, Валюта) В
			|					(ВЫБРАТЬ
			|						ТаблицаКОплате.АналитикаУчетаПоПартнерам,
			|						ТаблицаКОплате.ЗаказПоставщику,
			|						ТаблицаКОплате.Валюта
			|					ИЗ
			|						ТаблицаКОплате)) КАК РасчетыСПоставщикамиОстатки
			|		ПО ТаблицаКОплате.АналитикаУчетаПоПартнерам = РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам
			|			И ТаблицаКОплате.ЗаказПоставщику = РасчетыСПоставщикамиОстатки.ЗаказПоставщику
			|			И ТаблицаКОплате.Валюта = РасчетыСПоставщикамиОстатки.Валюта
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаКОплате.ЗаказПоставщику,
			|	ТаблицаКОплате.Партнер,
			|	ТаблицаКОплате.Валюта
			|
			|ИТОГИ ПО
			|	ТаблицаКОплате.ЗаказПоставщику
			|";
			
		Иначе
			
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	РасчетыСПоставщиками.ЗаказПоставщику КАК Заказ,
			|	Аналитика.Партнер КАК Партнер,
			|	ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками) КАК Соглашение,
			|	РасчетыСПоставщиками.Период КАК Период,
			|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
			|	МАКСИМУМ(РасчетыСПоставщиками.ФормаОплаты) КАК ФормаОплаты,
			|	СУММА(РасчетыСПоставщиками.КОплате) КАК СуммаПоГрафику,
			|	СУММА(
			|		ЕСТЬNULL(РасчетыСПоставщикамиОбороты.КОплатеПриход, 0)
			|	) КАК СуммаОплаты
			|ИЗ
			|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
			|	
			|	ЛЕВОЕ СОЕДИНЕНИЕ
			|		РегистрНакопления.РасчетыСПоставщиками.Обороты(,,Период) КАК РасчетыСПоставщикамиОбороты
			|	ПО
			|		РасчетыСПоставщиками.ЗаказПоставщику = РасчетыСПоставщикамиОбороты.ЗаказПоставщику
			|		И РасчетыСПоставщиками.Валюта = РасчетыСПоставщикамиОбороты.Валюта
			|		И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = РасчетыСПоставщикамиОбороты.АналитикаУчетаПоПартнерам
			|
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
			|	ПО
			|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
			|		И (&Организация = Аналитика.Организация
			|			ИЛИ &Организация = Неопределено)
			|	
			|ГДЕ
			|	РасчетыСПоставщиками.Активность
			|	И РасчетыСПоставщиками.ЗаказПоставщику В (&ЗаказПоставщику)
			|	И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
			|	И РасчетыСПоставщиками.КОплате > 0
			|	
			|СГРУППИРОВАТЬ ПО
			|	РасчетыСПоставщиками.ЗаказПоставщику,
			|	Аналитика.Партнер,
			|	ВЫРАЗИТЬ(РасчетыСПоставщиками.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками),
			|	РасчетыСПоставщиками.Период,
			|	РасчетыСПоставщиками.Валюта
			|	
			|УПОРЯДОЧИТЬ ПО
			|	РасчетыСПоставщиками.Период
			|
			|ИТОГИ ПО
			|	РасчетыСПоставщиками.ЗаказПоставщику
			|";
			
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("ЗаказПоставщику", ЗаказПоставщику);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		
		УчтеноСуммаОплаты = 0;
		
		ВыборкаПоЗаказам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоЗаказам.Следующий() Цикл
			
			СуммаПоГрафикуВсего = 0;
			
			Выборка = ВыборкаПоЗаказам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				// Найдем первый неоплаченный этап.
				Если (Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего) > Выборка.СуммаОплаты
				 ИЛИ СуммаКОплате <> 0 Тогда
					
					НоваяСтрока = РасшифровкаПлатежа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					НоваяСтрока.СуммаВзаиморасчетов = Выборка.СуммаПоГрафику + СуммаПоГрафикуВсего - (Выборка.СуммаОплаты - УчтеноСуммаОплаты);
					Если СуммаКОплате <> 0 Тогда
						НоваяСтрока.СуммаВзаиморасчетов = Мин(НоваяСтрока.СуммаВзаиморасчетов, СуммаКОплате);
						СуммаКОплате = СуммаКОплате - НоваяСтрока.СуммаВзаиморасчетов;
						УчтеноСуммаОплаты = УчтеноСуммаОплаты + НоваяСтрока.СуммаВзаиморасчетов;
					КонецЕсли;
					
					Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДата());
					
					НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
					
					Если ЗначениеЗаполнено(ЖелательнаяДатаПлатежа) Тогда
						ЖелательнаяДатаПлатежа = Мин(ЖелательнаяДатаПлатежа, Выборка.Период);
					Иначе
						ЖелательнаяДатаПлатежа = Выборка.Период;
					КонецЕсли;
					
					Если СуммаКОплате = 0 Тогда
						Прервать;
					КонецЕсли;
					
				Иначе
					
					СуммаПоГрафикуВсего = СуммаПоГрафикуВсего + Выборка.СуммаПоГрафику;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			Если ТипЗнч(ЗаказПоставщику) <> Тип("Массив") Тогда
				НоваяСтрока.Заказ = ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов, Договор, ЗаказПоставщику);
			КонецЕсли;
		Иначе
			РасшифровкаПлатежа.Свернуть("Заказ, Партнер, ВалютаВзаиморасчетов", "Сумма, СуммаВзаиморасчетов");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполнения табличной части "РасшифровкаПлатежа" по договору.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоДоговоруСПоставщиком(Договор, ВалютаДокумента, РасшифровкаПлатежа, Организация = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ВалютаДокумента) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику КАК Заказ,
		|	Аналитика.Партнер							КАК Партнер,
		|	РасчетыСПоставщикамиОстатки.Валюта			КАК ВалютаВзаиморасчетов,
		|	-РасчетыСПоставщикамиОстатки.КОплатеОстаток	КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(,ЗаказПоставщику = &Договор) КАК РасчетыСПоставщикамиОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
		|		ПО РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
		|		И (&Организация = Аналитика.Организация
		|			ИЛИ &Организация = Неопределено)
		|ГДЕ
		|	РасчетыСПоставщикамиОстатки.КОплатеОстаток < 0
		|");
		Запрос.УстановитьПараметр("Договор", Договор);
		Запрос.УстановитьПараметр("Организация", Организация );
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, Выборка.ВалютаВзаиморасчетов, ТекущаяДата());
			
			НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			
		КонецЕсли;
		
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Заказ = Договор;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает результат запроса по остаткам расчетов с партнером.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация документа
//	Контрагент - СправочникСсылка.Контрагенты - Контрагент, выбранный в документе
//	ТипЗадолженности - ПеречислениеСсылка.ТипыЗадолженности - Тип задолженности
//	Дата - Дата документа
//	Валюта - СправочникСсылка.Валюты - Валюта документа
//	Задолженность - ДанныеФормыКоллекция - Табличная часть документа
//
Процедура ЗаполнитьЗадолженностьПоОстаткам(Организация, Контрагент, ТипЗадолженности, Дата, Валюта, Задолженность) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	|	РасчетыСКлиентамиОстатки.ЗаказКлиента КАК Заказ,
	|	РасчетыСКлиентамиОстатки.ЗаказКлиента.Дата КАК Дата,
	|	РасчетыСКлиентамиОстатки.ЗаказКлиента.Номер КАК Номер,
	|	ВЫРАЗИТЬ(РасчетыСКлиентамиОстатки.ЗаказКлиента.Соглашение КАК Справочник.СоглашенияСКлиентами) КАК Соглашение,
	|	РасчетыСКлиентамиОстатки.Валюта КАК ВалютаВзаиморасчетов,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентамиОстатки.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСКлиентамиОстатки.СуммаОстаток
	|	ИНАЧЕ
	|		РасчетыСКлиентамиОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	0 КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(&Граница,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|			ГДЕ
	|				РегистрАналитикаУчетаПоПартнерам.Организация = &Организация
	|				И РегистрАналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|			)
	|		) КАК РасчетыСКлиентамиОстатки
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО 
	|		РасчетыСКлиентамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|
	|ГДЕ
	|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская)
	|		И РасчетыСКлиентамиОстатки.СуммаОстаток >= 0
	|	ТОГДА
	|		ИСТИНА
	|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		И РасчетыСКлиентамиОстатки.СуммаОстаток <= 0
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер КАК Контрагент,
	|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику КАК Заказ,
	|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику.Дата КАК Дата,
	|	РасчетыСПоставщикамиОстатки.ЗаказПоставщику.Номер КАК Номер,
	|	ВЫРАЗИТЬ(РасчетыСПоставщикамиОстатки.ЗаказПоставщику.Соглашение КАК Справочник.СоглашенияСПоставщиками) КАК Соглашение,
	|	РасчетыСПоставщикамиОстатки.Валюта КАК ВалютаВзаиморасчетов,
	|	
	|	ВЫБОР КОГДА РасчетыСПоставщикамиОстатки.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСПоставщикамиОстатки.СуммаОстаток
	|	ИНАЧЕ
	|		РасчетыСПоставщикамиОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	0 КАК Сумма
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(&Граница,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|			ГДЕ
	|				РегистрАналитикаУчетаПоПартнерам.Организация = &Организация
	|				И РегистрАналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|			)
	|		) КАК РасчетыСПоставщикамиОстатки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО 
	|		РасчетыСПоставщикамиОстатки.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|
	|ГДЕ
	|	ВЫБОР КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Дебиторская) 
	|		И РасчетыСПоставщикамиОстатки.СуммаОстаток >= 0
	|	ТОГДА
	|		ИСТИНА
	|	КОГДА &ТипЗадолженности = ЗНАЧЕНИЕ(Перечисление.ТипыЗадолженности.Кредиторская)
	|		И РасчетыСПоставщикамиОстатки.СуммаОстаток <= 0
	|	ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер
	|");
	
	МоментВремени = КонецДня(Дата);
	Граница = Новый Граница(МоментВремени, ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Граница", Граница);
	Запрос.УстановитьПараметр("ТипЗадолженности", ТипЗадолженности);
	
	СоответствиеВалютаКурс = Новый Соответствие;
	
	Задолженность.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Валюта)
		 И Валюта <> Выборка.ВалютаВзаиморасчетов Тогда
		 
			Коэффициенты = СоответствиеВалютаКурс.Получить(Выборка.ВалютаВзаиморасчетов);
			Если Коэффициенты = Неопределено Тогда
				Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Валюта, Выборка.ВалютаВзаиморасчетов, МоментВремени);
				СоответствиеВалютаКурс.Вставить(Выборка.ВалютаВзаиморасчетов, Коэффициенты);
			КонецЕсли;
			Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, Выборка.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			
		Иначе
			Сумма = Выборка.СуммаВзаиморасчетов;
		КонецЕсли;
		
		Если Сумма <> 0 Тогда
			НоваяСтрока = Задолженность.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Сумма = Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить колонку "Идентификатор строки" в табличной части документа.
//
// Параметры:
//	ТабличнаяЧасть - табличная часть документа
//
Процедура ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ТабличнаяЧасть) Экспорт
	
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторСтроки) Тогда
			СтрокаТаблицы.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура проверяет корректность заполнения даты платежа в документе.
//
// Параметры:
//	ДокументОбъект - Документ
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьДатуПлатежа(ДокументОбъект, Отказ) Экспорт
	
	// Дата оплаты должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ДокументОбъект.ДатаПлатежа)
	 И ДокументОбъект.ДатаПлатежа < НачалоДня(ДокументОбъект.Дата) Тогда
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Дата платежа должна быть не меньше даты документа %1'"),
			Формат(ДокументОбъект.Дата, "ДЛФ=DD")
		);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументОбъект,
			"ДатаПлатежа",
			,
			Отказ
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет корректность заполнения порядка оплаты.
//
// Параметры:
//	СправочникОбъект - Проверяемый объект
//	Отказ - Булево - Признак отказа от продолжения работы
//
Процедура ПроверитьПорядокОплаты(СправочникОбъект, Отказ) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если СправочникОбъект.Валюта <> ВалютаРегламентированногоУчета
	 И СправочникОбъект.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях Тогда
		
		ТекстОшибки = НСтр("ru='Для соглашения в валюте необходимо указать порядок оплаты с расчетами в валюте'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			СправочникОбъект,
			"ПорядокОплаты",
			,
			Отказ
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Пересчитывает суммы расшифровки платежа в выбранную валюту.
//
Процедура ПересчитатьСуммыВВалютуРасшифровкаПлатежа(Объект, СуммаВсего) Экспорт
	
	СуммаДокумента = СуммаВсего;
	ИтогСумма = Объект.РасшифровкаПлатежа.Итог("Сумма");
	
	// Пересчитаем суммы в табличной части документа.
	Если ИтогСумма <> 0 Тогда
		
		Для Каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			
			Сумма = Окр(СуммаДокумента * СтрокаТаблицы.Сумма / ИтогСумма, 2, 1);
			ИтогСумма = ИтогСумма - СтрокаТаблицы.Сумма;
			СуммаДокумента = СуммаДокумента - Сумма;
			СтрокаТаблицы.Сумма = Сумма;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
				Если СтрокаТаблицы.ВалютаВзаиморасчетов = Объект.Валюта Тогда
					СтрокаТаблицы.СуммаВзаиморасчетов = 0;
				КонецЕсли;
			Иначе
				СтрокаТаблицы.ВалютаВзаиморасчетов = Неопределено;
				СтрокаТаблицы.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции формирования движений по расчетам с контрагентами.

// Процедура устанавливает значение Неопределено для незаполненного реквизита "Заказ" табличной части.
//
// Параметры:
//	ТабличнаяЧасть - Табличная часть документа
//
Процедура ОчиститьПустойЗаказВТабличнойЧасти(ТабличнаяЧасть) Экспорт
	
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Заказ) И СтрокаТаблицы.Заказ <> Неопределено Тогда
			СтрокаТаблицы.Заказ = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет сумму взаиморасчетов в табличной части "Расшифровка платежка"
// в документах движения денежных средств.
//
// Параметры:
//	Валюта - СправочникСсылка.Валюты - Валюта, указанная в документе
//	Дата - Дата документа
//	ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть документа
//
Процедура ЗаполнитьСуммуВзаиморасчетовВТабличнойЧасти(Валюта, Дата,	ТабличнаяЧасть) Экспорт
	
	ОчиститьПустойЗаказВТабличнойЧасти(ТабличнаяЧасть);
	
	// Если табличная часть пустая или в табличной части заполнена сумма взаиморасчетов,
	// то выполнение процедуры не требуется.
	Если (ТабличнаяЧасть.Количество() = 0
	 ИЛИ ТабличнаяЧасть.Найти(0, "СуммаВзаиморасчетов") = Неопределено)
	 И ТабличнаяЧасть.Найти(Справочники.Валюты.ПустаяСсылка(), "ВалютаВзаиморасчетов") = Неопределено
	Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ИсходнаяТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.СуммаВзаиморасчетов = 0
	|	ИЛИ ТаблицаДокумента.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.СчетНаОплату.ДокументОснование КАК ДокументОснование
	|
	|ПОМЕСТИТЬ ТаблицаДокументовОснований
	|ИЗ
	|	ИсходнаяТаблицаДокумента КАК Таблица
	|ГДЕ
	|	Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|
	|ПОМЕСТИТЬ ТаблицаДокументовРасчетов
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Партнер КАК Партнер
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Неопределено КАК Партнер
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
	|	Неопределено КАК Партнер
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументовОснований КАК Таблица
	|	ПО
	|		ДанныеДокумента.Ссылка = Таблица.ДокументОснование
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.*,
	|	ВЫБОР КОГДА Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка) ТОГДА
	|		ТаблицаДокументовРасчетов.Ссылка
	|	ИНАЧЕ
	|		Таблица.Заказ
	|	КОНЕЦ КАК Заказ,
	|		
	|	ВЫБОР КОГДА Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка) ТОГДА
	|		ТаблицаДокументовРасчетов.Партнер
	|
	|	КОГДА Таблица.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) ТОГДА
	|		ЕСТЬNULL(Таблица.Заказ.Партнер, Неопределено)
	|
	|	ИНАЧЕ
	|		Таблица.Партнер
	|	КОНЕЦ КАК Партнер,
	|	
	|	ВЫБОР КОГДА Таблица.ВалютаВзаиморасчетов <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) ТОГДА
	|		Таблица.ВалютаВзаиморасчетов
	|	ИНАЧЕ
	|		ВЫБОР КОГДА Таблица.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуКлиенту.ПустаяСсылка) ТОГДА
	|			ТаблицаДокументовРасчетов.ВалютаВзаиморасчетов
	|
	|		КОГДА НЕ Таблица.Заказ.ВалютаВзаиморасчетов ЕСТЬ NULL ТОГДА
	|			Таблица.Заказ.ВалютаВзаиморасчетов
	|
	|		КОГДА НЕ Таблица.Заказ.Валюта ЕСТЬ NULL ТОГДА
	|			Таблица.Заказ.Валюта
	|
	|		ИНАЧЕ
	|			&Валюта
	|		КОНЕЦ
	|	КОНЕЦ КАК ВалютаВзаиморасчетов
	|	
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	ИсходнаяТаблицаДокумента КАК Таблица
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	| 		ТаблицаДокументовРасчетов КАК ТаблицаДокументовРасчетов
	|	ПО
	|  		Таблица.СчетНаОплату.ДокументОснование = ТаблицаДокументовРасчетов.Ссылка
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаДокумента.Заказ КАК Заказ,
	|	ТаблицаДокумента.Партнер КАК Партнер,
	|
	|	ВЫБОР КОГДА ТаблицаДокумента.СуммаВзаиморасчетов = 0 ТОГДА
	|		(ТаблицаДокумента.Сумма *
	|		ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * 
	|		ЕСТЬNULL(КурсыВалют.Кратность, 1)
	|		) / (
	|		ЕСТЬNULL(КурсыВалют.Курс, 1) * 
	|		ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
	|		)
	|	ИНАЧЕ
	|		ТаблицаДокумента.СуммаВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|	
	|	// Определим курс валюты документа.
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютДокумента
	|	ПО
	|		Истина
	|		
	|	// Определим курс валюты взаиморасчетов.
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалют
	|	ПО
	|		ТаблицаДокумента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|;
	|");
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	
	ТаблицаДокумента = ТабличнаяЧасть.Выгрузить();
	Если ТаблицаДокумента.Колонки.Найти("СчетНаОплату") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуКлиенту"));
	КонецЕсли;
	Если ТаблицаДокумента.Колонки.Найти("Партнер") = Неопределено Тогда
		ТаблицаДокумента.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	
	// Получим таблицу документа с рассчитанной суммой взаиморасчетов.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ТабличнаяЧасть.Найти(Выборка.НомерСтроки, "НомерСтроки");
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, ,"НомерСтроки");
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет сумму взаиморасчетов в шапке документа.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
// 
Процедура ЗаполнитьСуммуВзаиморасчетов(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	(&СуммаДокумента *
	|	ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * 
	|	ЕСТЬNULL(КурсыВалют.Кратность, 1)
	|	) / (
	|	ЕСТЬNULL(КурсыВалют.Курс, 1) * 
	|	ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
	|	) КАК СуммаВзаиморасчетов
	|	
	|ИЗ	
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата,
	|		Валюта = &ВалютаДокумента
	|	) КАК КурсыВалютДокумента
	|	
	|	// Определим курс валюты взаиморасчетов.
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, 
	|			Валюта = &ВалютаВзаиморасчетов
	|	) КАК КурсыВалют По Истина
	|");
	
	Запрос.УстановитьПараметр("Дата", ДокументОбъект.Дата);
	Запрос.УстановитьПараметр("ВалютаДокумента", ДокументОбъект.Валюта);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ДокументОбъект.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("СуммаДокумента", ДокументОбъект.СуммаДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если ДокументОбъект.СуммаВзаиморасчетов <> Выборка.СуммаВзаиморасчетов Тогда
			ДокументОбъект.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет сумму взаиморасчетов в шапке документа.
//
// Параметры:
// ДокументОбъект - ДокументОбъект - Текущий документ
// 
Процедура ЗаполнитьСуммуВзаиморасчетовВПоступлении(ДокументОбъект, ИмяТЧ = "Товары") Экспорт
	
	Если ДокументОбъект[ИмяТЧ].НайтиСтроки(Новый Структура("СуммаВзаиморасчетов", 0)).Количество()=0 Тогда
		
		ДокументОбъект.СуммаВзаиморасчетов = ДокументОбъект[ИмяТЧ].Итог("СуммаВзаиморасчетов");
		
	Иначе
		
		СуммаДокумента = ДокументОбъект[ИмяТЧ].Итог("Сумма");
		Если Не ДокументОбъект.ЦенаВключаетНДС Тогда
			СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТЧ].Итог("СуммаНДС");
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	(&СуммаДокумента *
		|	ЕСТЬNULL(КурсыВалютДокумента.Курс, 1) * 
		|	ЕСТЬNULL(КурсыВалют.Кратность, 1)
		|	) / (
		|	ЕСТЬNULL(КурсыВалют.Курс, 1) * 
		|	ЕСТЬNULL(КурсыВалютДокумента.Кратность, 1)
		|	) КАК СуммаВзаиморасчетов
		|	
		|ИЗ	
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата,
		|		Валюта = &ВалютаДокумента
		|	) КАК КурсыВалютДокумента
		|	
		|	// Определим курс валюты взаиморасчетов.
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.КурсыВалют.СрезПоследних(&Дата, 
		|			Валюта = &ВалютаВзаиморасчетов
		|	) КАК КурсыВалют По Истина
		|");
		
		Запрос.УстановитьПараметр("Дата", ДокументОбъект.Дата);
		Запрос.УстановитьПараметр("ВалютаДокумента", ДокументОбъект.Валюта);
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ДокументОбъект.ВалютаВзаиморасчетов);
		Запрос.УстановитьПараметр("СуммаДокумента", СуммаДокумента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ДокументОбъект.СуммаВзаиморасчетов <> Выборка.СуммаВзаиморасчетов Тогда
				ДокументОбъект.СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет сумму НДС взаиморасчетов в табличной части документа.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект - Текущий документ
// 
Процедура ЗаполнитьСуммуНДСВзаиморасчетовВТабличнойЧасти(Документ, ИмяТабличнойЧасти) Экспорт
	
	ТабличнаяЧасть = Документ[ИмяТабличнойЧасти];
	
	Для Каждого Строка Из ТабличнаяЧасть Цикл
		
		ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Строка.СтавкаНДС);
		
		Строка.СуммаНДСВзаиморасчетов = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(Строка.СуммаВзаиморасчетов, ТекПроцентНДС);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет сумму расшифровки платежа в соответствии с суммой документа.
//
Процедура ЗаполнитьСуммуРасшифровкиПлатежаПоСуммеДокумента(Знач СуммаДокумента, РасшифровкаПлатежа) Экспорт
	
	СуммаРасшифровкиПлатежа = РасшифровкаПлатежа.Итог("Сумма");
	Если СуммаДокумента <> СуммаРасшифровкиПлатежа Тогда
		
		Если РасшифровкаПлатежа.Количество() = 0 Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Сумма = СуммаДокумента;
		Иначе
			
			Разница = СуммаДокумента - СуммаРасшифровкиПлатежа;
			МассивУдаляемыхСтрок = Новый Массив;
			
			// Корректируются суммы в строках с пустым заказом.
			Для Каждого СтрокаТаблицы Из РасшифровкаПлатежа Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
					СтрокаТаблицы.Сумма = Макс(СтрокаТаблицы.Сумма + Разница, 0);
					СтрокаТаблицы.СуммаВзаиморасчетов = 0;
					Разница = СуммаДокумента - РасшифровкаПлатежа.Итог("Сумма");
				КонецЕсли;
				
				Если СтрокаТаблицы.Сумма = 0 Тогда
					МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
				КонецЕсли;
				
				Если Разница = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			// Уменьшаются суммы в строках с указанным заказом.
			Если Разница < 0 Тогда
				
				Для Каждого СтрокаТаблицы Из РасшифровкаПлатежа Цикл
					
					Если ЗначениеЗаполнено(СтрокаТаблицы.Заказ) Тогда
						СтрокаТаблицы.Сумма = Макс(СтрокаТаблицы.Сумма + Разница, 0);
						СтрокаТаблицы.СуммаВзаиморасчетов = 0;
						Разница = СуммаДокумента - РасшифровкаПлатежа.Итог("Сумма");
					КонецЕсли;
					
					Если СтрокаТаблицы.Сумма = 0 Тогда
						МассивУдаляемыхСтрок.Добавить(СтрокаТаблицы);
					КонецЕсли;
					
					Если Разница = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			// Остаток нераспределенной суммы будет отнесен на новую строку.
			Если Разница <> 0 Тогда
				НоваяСтрока = РасшифровкаПлатежа.Добавить();
				НоваяСтрока.Сумма = Разница;
			КонецЕсли;
			
			// Строки с нулевой суммой будут удалены.
			Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
				РасшифровкаПлатежа.Удалить(СтрокаТаблицы);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции формирования движений по расчетам с поставщиками и клиентами.

// Процедура формирования движений по регистру "Расчеты с клиентами".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчеты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентами;
	
	Если Отказ ИЛИ ТаблицаРасчеты.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.РасчетыСКлиентами;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаРасчеты);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Расчеты с клиентами по документами".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьРасчетыСКлиентамиПоДокументам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчеты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
	
	Если Отказ ИЛИ ТаблицаРасчеты.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.РасчетыСКлиентамиПоДокументам;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаРасчеты);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Расчеты с клиентами (последовательность)".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьРасчетыСКлиентамиПоследовательность(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ) Экспорт
	
	ТаблицаРасчеты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоследовательность;
	ПоследовательностьРасчеты = ПринадлежностьПоследовательностям.ПроведениеПоРасчетамСКлиентами;
	ПоследовательностьРасчеты.Очистить();
	
	Если Отказ ИЛИ ТаблицаРасчеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоследовательностьРасчеты.Отбор.Регистратор.Установить(ДополнительныеСвойства.ДляПроведения.Ссылка);
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаРасчеты Цикл
		
		НоваяЗапись = ПоследовательностьРасчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирования движений по регистру "Расчеты с поставщиками".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчеты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщиками;
	
	Если Отказ ИЛИ ТаблицаРасчеты.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.РасчетыСПоставщиками;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаРасчеты);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Расчеты с поставщиками по документами".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьРасчетыСПоставщикамиПоДокументам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаРасчеты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
	
	Если Отказ ИЛИ ТаблицаРасчеты.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.РасчетыСПоставщикамиПоДокументам;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаРасчеты);
	
КонецПроцедуры

// Процедура формирования движений по регистру "Расчеты с поставщиками (последовательность)".
//
// Параметры:
//	ДокументОбъект - Текущий документ
//	Отказ - Булево - Признак отказа от проведения документа
//
Процедура ОтразитьРасчетыСПоставщикамиПоследовательность(ДополнительныеСвойства, ПринадлежностьПоследовательностям, Отказ) Экспорт
	
	ТаблицаРасчеты = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоследовательность;
	ПоследовательностьРасчеты = ПринадлежностьПоследовательностям.ПроведениеПоРасчетамСПоставщиками;
	ПоследовательностьРасчеты.Очистить();
	
	Если Отказ ИЛИ ТаблицаРасчеты.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаРасчеты Цикл
		
		НоваяЗапись = ПоследовательностьРасчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирования движений по регистру "Суммы документов в валюте регл.".
//
Процедура ОтразитьСуммыДокументаВВалютеРегл(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ТаблицаДвижений = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСуммыДокументовВВалютеРегл;
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРасчеты = Движения.СуммыДокументовВВалютеРегл;
	ДвиженияРасчеты.Записывать = Истина;
	ДвиженияРасчеты.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции формирования отложенных движений по расчетам с контрагентами.

// Процедура выполняет проведение документов по расчетам с контрагентами. Запускается из обработки закрытия месяца.
//
// Параметры:
//	Организация - (СправочникСсылка.Организации) - Отбор для выполнения операции только по указанной операции
//
Процедура ОтложенноеПроведениеПоРасчетамСПартнерамиЗакрытиеМесяца(Организация) Экспорт
	
	МассивКлючейАналитикиПоПартнерам = РегистрыСведений.АналитикаУчетаПоПартнерам.ПолучитьМассивКлючейАналитикиПоОрганизации(Организация);

	ВыполнитьПроведениеДокументовПоРасчетамСКлиентами(МассивКлючейАналитикиПоПартнерам, Ложь);
	ВыполнитьПроведениеДокументовПоРасчетамСПоставщиками(МассивКлючейАналитикиПоПартнерам, Ложь);
	
КонецПроцедуры

// Процедура выполняет отложенное проведение документов по расчетам с контрагентами.
//
Процедура ОтложенноеПроведениеПоРасчетамСПартнерами() Экспорт
	
	ВыполнитьПроведениеДокументовПоРасчетамСКлиентами(, Ложь);
	
	ВыполнитьПроведениеДокументовПоРасчетамСПоставщиками(, Ложь);
	
КонецПроцедуры

// Процедура выполняет проведение документов по расчетам с клиентами.
//
// Параметры:
//	АналитикаУчетаПоПартнерам - Массив(СправочникСсылка.КлючиАналитикиУчетаПоПартнерам) - Отбор для проведения документов только по указанным аналитикам
//	ПрерыватьВыполнениеПриНеудачнойБлокировке - Булево - Определяет необходимость вызова исключения при невозмоности заблокировать расчеты с клиентами
//
Процедура ВыполнитьПроведениеДокументовПоРасчетамСКлиентами(АналитикаУчетаПоПартнерам = Неопределено, ПрерыватьВыполнениеПриНеудачнойБлокировке = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапросаПоАналитикам = РезультатЗапросаПоАналитикамУчетаРасчетовСКлиентами(АналитикаУчетаПоПартнерам);
	Если РезультатЗапросаПоАналитикам.Пустой() Тогда
		РассчитатьСуммыДокументаВВалютеРеглПоРасчетамСКлиентами();
		Возврат;
	КонецЕсли;
	
	ВыборкаПоАналитикам = РезультатЗапросаПоАналитикам.Выбрать();
	Пока ВыборкаПоАналитикам.Следующий() Цикл
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		МассивДокументов = Новый Массив;
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		Если Не УстановленаБлокировкаТаблицыРасчетыСКлиентами(ВыборкаПоАналитикам.КлючАналитики, ПрерыватьВыполнениеПриНеудачнойБлокировке) Тогда
			Продолжить;
		КонецЕсли;
		
		НачальныеГраницы = ВыборкаГраницПоАналитикеУчетаРасчетовСКлиентами(ВыборкаПоАналитикам.КлючАналитики);
		Если Не НачальныеГраницы.Следующий() Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		// Формирование таблицы остатков расчетов с клиентами.
		ТаблицаОстатков = ПолучитьТаблицуОстатковРасчетовСКлиентами(НачальныеГраницы);
		
		ТаблицаАктуальныхЗаписей = ПолучитьТаблицуАктуальныхЗаписейРасчетыСКлиентамиПоДокументам(НачальныеГраницы);
		
		СформироватьВременнуюТаблицуДляГруппировкиПоИндексуРасчетовСКлиентами(МенеджерВременныхТаблиц, НачальныеГраницы);
		
		// Формирование запроса для получения выборки документов по расчетам с клиентами.
		Запрос = ЗапросПоДокументамРасчетовСКлиентами(МенеджерВременныхТаблиц, НачальныеГраницы);
		РезультатЗапроса = Запрос.Выполнить();
		МенеджерВременныхТаблиц.Закрыть();
		
		ВыборкаПоРегистратору = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоРегистратору.Следующий() Цикл
			
			МассивДокументов.Добавить(ВыборкаПоРегистратору.Регистратор);
			ПровестиДокументПоРасчетамСКлиентами(
				ТаблицаОстатков,
				ТаблицаАктуальныхЗаписей,
				ВыборкаПоРегистратору
			);
			
		КонецЦикла;
		
		Последовательности.ПроведениеПоРасчетамСКлиентами.УстановитьГраницу(
			НачалоДня(НачальныеГраницы.ПериодОсновная)+86400,
			Новый Структура("АналитикаУчетаПоПартнерам", НачальныеГраницы.КлючАналитики));
		
		РассчитатьСуммыДокументаВВалютеРеглПоРасчетамСКлиентами(МассивДокументов);
		Документы.СчетФактураВыданныйАванс.СформироватьДвиженияПоКнигамПокупокПродаж(МассивДокументов);
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
	РассчитатьСуммыДокументаВВалютеРеглПоРасчетамСКлиентами();
	
КонецПроцедуры

// Процедура выполняет проведение документов по расчетам с поставщиками.
//
// Параметры:
//	АналитикаУчетаПоПартнерам - Массив(СправочникСсылка.КлючиАналитикиУчетаПоПартнерам) - Отбор для проведения документов только по указанным аналитикам
//	ПрерыватьВыполнениеПриНеудачнойБлокировке - Булево - Определяет необходимость вызова исключения при невозмоности заблокировать расчеты с поставщиками
//
Процедура ВыполнитьПроведениеДокументовПоРасчетамСПоставщиками(АналитикаУчетаПоПартнерам = Неопределено, ПрерыватьВыполнениеПриНеудачнойБлокировке = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапросаПоАналитикам = РезультатЗапросаПоАналитикамУчетаРасчетовСПоставщиками(АналитикаУчетаПоПартнерам);
	Если РезультатЗапросаПоАналитикам.Пустой() Тогда
		РассчитатьСуммыДокументаВВалютеРеглПоРасчетамСПоставщиками();
		Возврат;
	КонецЕсли;
	
	ВыборкаПоАналитикам = РезультатЗапросаПоАналитикам.Выбрать();
	Пока ВыборкаПоАналитикам.Следующий() Цикл
		
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		МассивДокументов = Новый Массив;
		
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		Если Не УстановленаБлокировкаТаблицыРасчетыСПоставщиками(ВыборкаПоАналитикам.КлючАналитики, ПрерыватьВыполнениеПриНеудачнойБлокировке) Тогда
			Продолжить;
		КонецЕсли;
		
		НачальныеГраницы = ВыборкаГраницПоАналитикеУчетаРасчетовСПоставщиками(ВыборкаПоАналитикам.КлючАналитики);
		Если Не НачальныеГраницы.Следующий() Тогда
			ОтменитьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		// Формирование таблицы остатков расчетов с клиентами.
		ТаблицаОстатков = ПолучитьТаблицуОстатковРасчетовСПоставщиками(НачальныеГраницы);
		
		ТаблицаАктуальныхЗаписей = ПолучитьТаблицуАктуальныхЗаписейРасчетыСПоставщикамиПоДокументам(НачальныеГраницы);
		
		СформироватьВременнуюТаблицуДляГруппировкиПоИндексуРасчетовСПоставщиками(МенеджерВременныхТаблиц, НачальныеГраницы);
		
		// Формирование запроса для получения выборки документов по расчетам с клиентами.
		Запрос = ЗапросПоДокументамРасчетовСПоставщиками(МенеджерВременныхТаблиц, НачальныеГраницы);
		РезультатЗапроса = Запрос.Выполнить();
		МенеджерВременныхТаблиц.Закрыть();
		
		ВыборкаПоРегистратору = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоРегистратору.Следующий() Цикл
			
			МассивДокументов.Добавить(ВыборкаПоРегистратору.Регистратор);
			ПровестиДокументПоРасчетамСПоставщиками(
				ТаблицаОстатков,
				ТаблицаАктуальныхЗаписей,
				ВыборкаПоРегистратору
			);
			
		КонецЦикла;
		
		Последовательности.ПроведениеПоРасчетамСПоставщиками.УстановитьГраницу(
			НачалоДня(НачальныеГраницы.ПериодОсновная)+86400,
			Новый Структура("АналитикаУчетаПоПартнерам", НачальныеГраницы.КлючАналитики));
		
		РассчитатьСуммыДокументаВВалютеРеглПоРасчетамСПоставщиками(МассивДокументов);
		Документы.СчетФактураПолученныйАванс.СформироватьДвиженияПоКнигеПродаж(МассивДокументов);
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
	РассчитатьСуммыДокументаВВалютеРеглПоРасчетамСПоставщиками();
	
КонецПроцедуры

// Возвращает результат запроса по неактуализированным аналитикам расчетов с клиентами.
//
// Параметры:
//	АналитикаУчетаПоПартнерам - Массив(СправочникСсылка.КлючиАналитикиУчетаПоПартнерам) - Отбор для проверки только по указанным аналитикам
//	ПериодПроверки - Дата - Период, до которого требуются актуальные расчеты
//
Функция РезультатЗапросаПоАналитикамУчетаРасчетовСКлиентами(АналитикаУчетаПоПартнерам, ПериодПроверки = Неопределено) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК КлючАналитики
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Последовательность.ПроведениеПоРасчетамСКлиентами.Границы КАК Границы
	|	ПО
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Границы.АналитикаУчетаПоПартнерам
	|
	|ГДЕ
	|	РасчетыСКлиентами.Активность
	|	И (&НеИспользоватьОтборПоАналитикеУчетаПоПартнерам
	|		ИЛИ РасчетыСКлиентами.АналитикаУчетаПоПартнерам В (&АналитикаУчетаПоПартнерам))
	|	И (&НеИспользоватьОтборПоПериодуПроверки
	|		ИЛИ ЕСТЬNULL(Границы.Период, РасчетыСКлиентами.Период) <= &ПериодПроверки)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ЕСТЬNULL(Границы.Период, ДАТАВРЕМЯ(1,1,1))) <= МАКСИМУМ(РасчетыСКлиентами.Период)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НеИспользоватьОтборПоАналитикеУчетаПоПартнерам", АналитикаУчетаПоПартнерам = Неопределено);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", АналитикаУчетаПоПартнерам);
	Запрос.УстановитьПараметр("НеИспользоватьОтборПоПериодуПроверки", ПериодПроверки = Неопределено);
	Запрос.УстановитьПараметр("ПериодПроверки", ПериодПроверки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Возвращает результат запроса по неактуализированным аналитикам расчетов с поставщиками.
//
// Параметры:
//	АналитикаУчетаПоПартнерам - Массив(СправочникСсылка.КлючиАналитикиУчетаПоПартнерам) - Отбор для проверки только по указанным аналитикам
//	ПериодПроверки - Дата - Период, до которого требуются актуальные расчеты
//
Функция РезультатЗапросаПоАналитикамУчетаРасчетовСПоставщиками(АналитикаУчетаПоПартнерам, ПериодПроверки = Неопределено) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК КлючАналитики
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Последовательность.ПроведениеПоРасчетамСПоставщиками.Границы КАК Границы
	|	ПО
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Границы.АналитикаУчетаПоПартнерам
	|
	|ГДЕ
	|	РасчетыСПоставщиками.Активность
	|	И (&НеИспользоватьОтборПоАналитикеУчетаПоПартнерам
	|		ИЛИ РасчетыСПоставщиками.АналитикаУчетаПоПартнерам В (&АналитикаУчетаПоПартнерам))
	|	И (&НеИспользоватьОтборПоПериодуПроверки
	|		ИЛИ ЕСТЬNULL(Границы.Период, РасчетыСПоставщиками.Период) <= &ПериодПроверки)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ЕСТЬNULL(Границы.Период, ДАТАВРЕМЯ(1,1,1))) <= МАКСИМУМ(РасчетыСПоставщиками.Период)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НеИспользоватьОтборПоАналитикеУчетаПоПартнерам", АналитикаУчетаПоПартнерам = Неопределено);
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", АналитикаУчетаПоПартнерам);
	Запрос.УстановитьПараметр("НеИспользоватьОтборПоПериодуПроверки", ПериодПроверки = Неопределено);
	Запрос.УстановитьПараметр("ПериодПроверки", ПериодПроверки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры.

// Функция определяет вид договора контрагента для обмена
//	с конфигурацией "Бухгалтерия предприятия".
//
Функция ВидДоговораКонтрагента(ДокументРасчетов, Соглашение, ХозяйственнаяОперация) Экспорт
	
	ВидДоговора = "";
	
	Если ЗначениеЗаполнено(ДокументРасчетов) Тогда
		
		Если ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ЗаказКлиента КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ЗаказПоставщику КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов") Тогда
			
			ВидДоговора = "СПоставщиком";
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
			
			ВидДоговора = "СПокупателем";
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ВозвратТоваровПоставщику КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", ДокументРасчетов);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;	
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомиссионера")
		 ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
			ВидДоговора = "СКомиссионером";
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомитенту")
		 ИЛИ ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетКомитентуОСписании") Тогда
			ВидДоговора = "СКомитентом";
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
			Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
				ВидДоговора = "СКомитентом";
				
			ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
				ВидДоговора = "СКомиссионером";
				
			Иначе
				ВидДоговора = "СКомитентом";
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументРасчетов) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
			Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
				ВидДоговора = "СПоставщиком";
				
			ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации Тогда
				ВидДоговора = "СПокупателем";
				
			Иначе
				ВидДоговора = "СПоставщиком";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПустаяСтрока(ВидДоговора)
	 И ЗначениеЗаполнено(Соглашение) Тогда
		
		Если ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеСправочника.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию) ТОГДА
			|		""СКомитентом""
			|	ИНАЧЕ
			|		""СПоставщиком""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Справочник.СоглашенияСПоставщиками КАК ДанныеСправочника
			|ГДЕ
			|	ДанныеСправочника.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", Соглашение);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПоставщиком";
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР КОГДА ДанныеСправочника.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) ТОГДА
			|		""СКомиссионером""
			|	ИНАЧЕ
			|		""СПокупателем""
			|	КОНЕЦ КАК ВидДоговора
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК ДанныеСправочника
			|ГДЕ
			|	ДанныеСправочника.Ссылка = &Ссылка
			|");
			Запрос.УстановитьПараметр("Ссылка", Соглашение);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ВидДоговора = Выборка.ВидДоговора;
			Иначе
				ВидДоговора = "СПокупателем";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ПустаяСтрока(ВидДоговора)
	 И ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
		 ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
			ВидДоговора = "СПокупателем";
		Иначе
			ВидДоговора = "СПоставщиком";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВидДоговора;
	
КонецФункции

// Функция определяет признак расчетов в условных единицах для обмена
//	с конфигурацией "Бухгалтерия предприятия".
//
Функция РасчетыВУсловныхЕдиницах(Соглашение) Экспорт
	
	Если ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Истина КАК РасчетыВУсловныхЕдиницах
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками КАК ДанныеСправочника
		|ГДЕ
		|	ДанныеСправочника.Ссылка = &Ссылка
		|	И ДанныеСправочника.ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях)
		|");
		Запрос.УстановитьПараметр("Ссылка", Соглашение);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РасчетыВУсловныхЕдиницах = Выборка.РасчетыВУсловныхЕдиницах;
		Иначе
			РасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Истина КАК РасчетыВУсловныхЕдиницах
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК ДанныеСправочника
		|ГДЕ
		|	ДанныеСправочника.Ссылка = &Ссылка
		|	И ДанныеСправочника.ПорядокОплаты = ЗНАЧЕНИЕ(Перечисление.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВРублях)
		|");
		Запрос.УстановитьПараметр("Ссылка", Соглашение);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РасчетыВУсловныхЕдиницах = Выборка.РасчетыВУсловныхЕдиницах;
		Иначе
			РасчетыВУсловныхЕдиницах = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Возврат РасчетыВУсловныхЕдиницах;
	
КонецФункции

// Заменяет документы расчетов при вызове отчетов по взаимрасчетов из реализации
// Если реализация по заказу клиента - документом расчетов является заказ клиента
//
// Параметры:
// Параметры - ДанныеФормыСтруктура - Параметры отчета
//
Процедура ЗаменитьДокументыРасчетовСКлиентами(Параметры) Экспорт
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ЗаказКлиента") Тогда
		
		ПараметрЗаказКлиента = Параметры.Отбор.ЗаказКлиента;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ДанныеДокументов
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.РеализацияПоЗаказам И НЕ ТаблицаТовары.ЗаказКлиента ЕСТЬ NULL
		|		И Не ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаТовары.ЗаказКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
		|		И ДанныеДокумента.РеализацияПоЗаказам
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.АктПоЗаказам И НЕ ТаблицаУслуги.ЗаказКлиента ЕСТЬ NULL
		|		И Не ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаУслуги.ЗаказКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
		|		ПО ТаблицаУслуги.Ссылка = ДанныеДокумента.Ссылка
		|		И ДанныеДокумента.АктПоЗаказам
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.ПродажаПоЗаказам
		|		И Не ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаТовары.ЗаказКлиента
		|	ИНАЧЕ
		|		ДанныеДокумента.ДокументОснование
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.КорректировкаРеализации КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ВыкупВозвратнойТарыКлиентом КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказКлиента)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокументов.ОбъектРасчетов КАК ОбъектРасчетов
		|ИЗ
		|	ДанныеДокументов КАК ДанныеДокументов
		|");
		
		Запрос.УстановитьПараметр("ЗаказКлиента", ПараметрЗаказКлиента);
		
		МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектРасчетов");
		
		Если ТипЗнч(ПараметрЗаказКлиента) = Тип("Массив") Тогда
			Для Каждого ТекЭлемент Из ПараметрЗаказКлиента Цикл
				Если ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ЗаказКлиента")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.АктВыполненныхРабот")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					МассивДокументов.Добавить(ТекЭлемент);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.ЗаказКлиента")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.РеализацияТоваровУслуг")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.АктВыполненныхРабот")
		 И ТипЗнч(ПараметрЗаказКлиента) <> Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		 	МассивДокументов.Добавить(ПараметрЗаказКлиента);
		КонецЕсли;
		
		Параметры.Отбор.ЗаказКлиента = МассивДокументов;
		
	КонецЕсли;
	
КонецПроцедуры

// Заменяет документы расчетов при вызове отчетов по взаимрасчетов из поступления
// Если поступление по заказу поставщику - документом расчетов является заказ поставщику
//
// Параметры:
// Параметры - ДанныеФормыСтруктура - Параметры отчета
//
Процедура ЗаменитьДокументыРасчетовСПоставщиками(Параметры) Экспорт
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ЗаказПоставщику") Тогда
		
		ПараметрЗаказПоставщику = Параметры.Отбор.ЗаказПоставщику;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ДанныеДокументов
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказПоставщику)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
		|		ДанныеДокумента.Договор
		|	КОГДА ДанныеДокумента.ПоступлениеПоЗаказам И НЕ ТаблицаТовары.ЗаказПоставщику ЕСТЬ NULL
		|		И Не ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
		|		ТаблицаТовары.ЗаказПоставщику
		|	ИНАЧЕ
		|		ДанныеДокумента.Ссылка
		|	КОНЕЦ КАК ОбъектРасчетов
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ТаблицаТовары
		|		ПО ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
		|		И ДанныеДокумента.ПоступлениеПоЗаказам
		|ГДЕ
		|	ДанныеДокумента.Ссылка В (&ЗаказПоставщику)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокументов.ОбъектРасчетов КАК ОбъектРасчетов
		|ИЗ
		|	ДанныеДокументов КАК ДанныеДокументов
		|");
		
		Запрос.УстановитьПараметр("ЗаказПоставщику", ПараметрЗаказПоставщику);
		
		МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектРасчетов");
		
		Если ТипЗнч(ПараметрЗаказПоставщику) = Тип("Массив") Тогда
			Для Каждого ТекЭлемент Из ПараметрЗаказПоставщику Цикл
				Если ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ЗаказПоставщику")
				 И ТипЗнч(ТекЭлемент) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
					МассивДокументов.Добавить(ТекЭлемент);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(ПараметрЗаказПоставщику) <> Тип("ДокументСсылка.ЗаказПоставщику")
		 И ТипЗнч(ПараметрЗаказПоставщику) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		 	МассивДокументов.Добавить(ПараметрЗаказПоставщику);
		КонецЕсли;
		
		Параметры.Отбор.ЗаказПоставщику = МассивДокументов;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СортироватьЭтапыОплатыКлиентом(АдресВоВременномХранилище) Экспорт
	
	ТаблицаЭтапов = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаЭтаповОплаты.ВариантОплаты  КАК ВариантОплаты,
		|	ТаблицаЭтаповОплаты.ДатаПлатежа    КАК ДатаПлатежа,
		|	ТаблицаЭтаповОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
		|	ТаблицаЭтаповОплаты.СуммаПлатежа   КАК СуммаПлатежа
		|ПОМЕСТИТЬ Авансы
		|ИЗ
		|	&ТаблицаЭтапов КАК ТаблицаЭтаповОплаты
		|ГДЕ
		|	ТаблицаЭтаповОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЭтаповОплаты.ВариантОплаты  КАК ВариантОплаты,
		|	ТаблицаЭтаповОплаты.ДатаПлатежа    КАК ДатаПлатежа,
		|	ТаблицаЭтаповОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
		|	ТаблицаЭтаповОплаты.СуммаПлатежа   КАК СуммаПлатежа
		|ПОМЕСТИТЬ Предоплаты
		|ИЗ
		|	&ТаблицаЭтапов КАК ТаблицаЭтаповОплаты
		|ГДЕ
		|	ТаблицаЭтаповОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЭтаповОплаты.ВариантОплаты  КАК ВариантОплаты,
		|	ТаблицаЭтаповОплаты.ДатаПлатежа    КАК ДатаПлатежа,
		|	ТаблицаЭтаповОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
		|	ТаблицаЭтаповОплаты.СуммаПлатежа   КАК СуммаПлатежа
		|ПОМЕСТИТЬ Кредиты
		|ИЗ
		|	&ТаблицаЭтапов КАК ТаблицаЭтаповОплаты
		|ГДЕ
		|	ТаблицаЭтаповОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ВариантОплаты  КАК ВариантОплаты,
		|	ВложенныйЗапрос.ДатаПлатежа    КАК ДатаПлатежа,
		|	ВложенныйЗапрос.ПроцентПлатежа КАК ПроцентПлатежа,
		|	ВложенныйЗапрос.СуммаПлатежа   КАК СуммаПлатежа
		|ИЗ
		|	(ВЫБРАТЬ
		|		Авансы.ВариантОплаты  КАК ВариантОплаты,
		|		Авансы.ДатаПлатежа    КАК ДатаПлатежа,
		|		Авансы.ПроцентПлатежа КАК ПроцентПлатежа,
		|		Авансы.СуммаПлатежа   КАК СуммаПлатежа
		|	ИЗ
		|		Авансы КАК Авансы
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Предоплаты.ВариантОплаты,
		|		Предоплаты.ДатаПлатежа,
		|		Предоплаты.ПроцентПлатежа,
		|		Предоплаты.СуммаПлатежа
		|	ИЗ
		|		Предоплаты КАК Предоплаты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Кредиты.ВариантОплаты,
		|		Кредиты.ДатаПлатежа,
		|		Кредиты.ПроцентПлатежа,
		|		Кредиты.СуммаПлатежа
		|	ИЗ
		|		Кредиты КАК Кредиты) КАК ВложенныйЗапрос"
		);
		
	ТаблицаЭтапов.Сортировать("ВариантОплаты ВОЗР, ДатаПлатежа ВОЗР");
	Запрос.УстановитьПараметр("ТаблицаЭтапов",ТаблицаЭтапов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция СортироватьЭтапыОплатыПоставщику(АдресВоВременномХранилище) Экспорт
	
	ТаблицаЭтапов = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаЭтаповОплаты.ВариантОплаты  КАК ВариантОплаты,
		|	ТаблицаЭтаповОплаты.ДатаПлатежа    КАК ДатаПлатежа,
		|	ТаблицаЭтаповОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
		|	ТаблицаЭтаповОплаты.СуммаПлатежа   КАК СуммаПлатежа
		|ПОМЕСТИТЬ Авансы
		|ИЗ
		|	&ТаблицаЭтапов КАК ТаблицаЭтаповОплаты
		|ГДЕ
		|	ТаблицаЭтаповОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.АвансДоПодтверждения)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЭтаповОплаты.ВариантОплаты  КАК ВариантОплаты,
		|	ТаблицаЭтаповОплаты.ДатаПлатежа    КАК ДатаПлатежа,
		|	ТаблицаЭтаповОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
		|	ТаблицаЭтаповОплаты.СуммаПлатежа   КАК СуммаПлатежа
		|ПОМЕСТИТЬ Предоплаты
		|ИЗ
		|	&ТаблицаЭтапов КАК ТаблицаЭтаповОплаты
		|ГДЕ
		|	ТаблицаЭтаповОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЭтаповОплаты.ВариантОплаты  КАК ВариантОплаты,
		|	ТаблицаЭтаповОплаты.ДатаПлатежа    КАК ДатаПлатежа,
		|	ТаблицаЭтаповОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
		|	ТаблицаЭтаповОплаты.СуммаПлатежа   КАК СуммаПлатежа
		|ПОМЕСТИТЬ Кредиты
		|ИЗ
		|	&ТаблицаЭтапов КАК ТаблицаЭтаповОплаты
		|ГДЕ
		|	ТаблицаЭтаповОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.ВариантОплаты  КАК ВариантОплаты,
		|	ВложенныйЗапрос.ДатаПлатежа    КАК ДатаПлатежа,
		|	ВложенныйЗапрос.ПроцентПлатежа КАК ПроцентПлатежа,
		|	ВложенныйЗапрос.СуммаПлатежа   КАК СуммаПлатежа
		|ИЗ
		|	(ВЫБРАТЬ
		|		Авансы.ВариантОплаты  КАК ВариантОплаты,
		|		Авансы.ДатаПлатежа    КАК ДатаПлатежа,
		|		Авансы.ПроцентПлатежа КАК ПроцентПлатежа,
		|		Авансы.СуммаПлатежа   КАК СуммаПлатежа
		|	ИЗ
		|		Авансы КАК Авансы
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Предоплаты.ВариантОплаты,
		|		Предоплаты.ДатаПлатежа,
		|		Предоплаты.ПроцентПлатежа,
		|		Предоплаты.СуммаПлатежа
		|	ИЗ
		|		Предоплаты КАК Предоплаты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Кредиты.ВариантОплаты,
		|		Кредиты.ДатаПлатежа,
		|		Кредиты.ПроцентПлатежа,
		|		Кредиты.СуммаПлатежа
		|	ИЗ
		|		Кредиты КАК Кредиты) КАК ВложенныйЗапрос"
		);
		
	ТаблицаЭтапов.Сортировать("ВариантОплаты ВОЗР, ДатаПлатежа ВОЗР");
	Запрос.УстановитьПараметр("ТаблицаЭтапов",ТаблицаЭтапов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция ПорядокРасчетовПоДокументу(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов, ПорядокРасчетов");
		Если РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов И ЗначениеЗаполнено(Объект.Договор) Тогда
			ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокРасчетов");
		ИначеЕсли НЕ РеквизитыСоглашения.ИспользуютсяДоговорыКонтрагентов Тогда
			ПорядокРасчетов = РеквизитыСоглашения.ПорядокРасчетов;
		Иначе
			ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Объект.Договор) Тогда
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокРасчетов");
	Иначе
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	КонецЕсли;
	
	Возврат ПорядокРасчетов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции формирования отложенных движений по расчетам с контрагентами.

Процедура ЗаписатьНаборыЗаписей(СтруктураНаборыЗаписей)
	
	Для Каждого СтрокаСтруктуры Из СтруктураНаборыЗаписей Цикл
		
		НаборЗаписей = СтрокаСтруктуры.Значение;
		Если НаборЗаписей <> Неопределено И НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьРегистра)
	
	НоваяСтрока = ТаблицаОстатков.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаписьРегистра);
	НоваяСтрока.МоментВремени = Новый МоментВремени(ЗаписьРегистра.Период, ЗаписьРегистра.Регистратор);
	Если ЗаписьРегистра.ВидДвижения = ВидДвиженияНакопления.Расход Тогда
		Если ТаблицаОстатков.Колонки.Найти("КОтгрузке") = Неопределено Тогда
			НоваяСтрока.КПоступлению = -НоваяСтрока.КПоступлению;
		Иначе
			НоваяСтрока.КОтгрузке    = -НоваяСтрока.КОтгрузке;
		КонецЕсли;
		НоваяСтрока.КОплате        = -НоваяСтрока.КОплате;
		НоваяСтрока.КВозврату      = -НоваяСтрока.КВозврату;
		НоваяСтрока.Долг           = -НоваяСтрока.Долг;
		НоваяСтрока.Предоплата     = -НоваяСтрока.Предоплата;
		НоваяСтрока.ПредоплатаРегл = -НоваяСтрока.ПредоплатаРегл;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления)
	
	Если СтрокаОстатка.Владелец().Колонки.Найти("КОтгрузке") = Неопределено Тогда
		Если СтрокаОстатка.КПоступлению    = 0
			И СтрокаОстатка.КОплате        = 0
			И СтрокаОстатка.КВозврату      = 0
			И СтрокаОстатка.Долг           = 0
			И СтрокаОстатка.Предоплата     = 0
			И СтрокаОстатка.ПредоплатаРегл = 0 Тогда
			
			СоответствиеСтрокДляУдаления.Вставить(СтрокаОстатка,Истина);
			
		КонецЕсли;
	Иначе
		Если СтрокаОстатка.КОтгрузке       = 0
			И СтрокаОстатка.КОплате        = 0
			И СтрокаОстатка.КВозврату      = 0
			И СтрокаОстатка.Долг           = 0
			И СтрокаОстатка.Предоплата     = 0
			И СтрокаОстатка.ПредоплатаРегл = 0 Тогда
			
			СоответствиеСтрокДляУдаления.Вставить(СтрокаОстатка,Истина);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСтрокиСНулевымиСуммами(ТаблицаОстатков, УдаляемыеСтроки)
	
	Для Каждого ЭлементМассива Из УдаляемыеСтроки Цикл
		ТаблицаОстатков.Удалить(ЭлементМассива.Ключ)
	КонецЦикла;
	УдаляемыеСтроки.Очистить();
	
КонецПроцедуры

Функция ПолучитьПустуюТаблицуОплат()
	
	ТаблицаОплат = Новый ТаблицаЗначений;
	ТаблицаОплат.Колонки.Добавить("ДатаПлатежа", Новый ОписаниеТипов("Дата"));
	ТаблицаОплат.Колонки.Добавить("Сумма", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	
	Возврат ТаблицаОплат;
	
КонецФункции

Функция ПолучитьПустуюТаблицуСписанныхВозвратов()
	
	ТаблицаСписанныхВозвратов = Новый ТаблицаЗначений;
	ТаблицаСписанныхВозвратов.Колонки.Добавить("РасчетныйДокумент");
	ТаблицаСписанныхВозвратов.Колонки.Добавить("СуммаСписания", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаСписанныхВозвратов.Колонки.Добавить("СуммаСписанияРегл", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15,2));
	
	Возврат ТаблицаСписанныхВозвратов;
	
КонецФункции

Функция ПолучитьПустуюТаблицуОстатковПоАналитикеОтсортированную()
	
	ТаблицаОстатковПоАналитикеОтсортированная = Новый ТаблицаЗначений;
	ТаблицаОстатковПоАналитикеОтсортированная.Колонки.Добавить("ДатаПлатежа", Новый ОписаниеТипов("Дата"));
	ТаблицаОстатковПоАналитикеОтсортированная.Колонки.Добавить("ПустаяДата", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(1,0));
	ТаблицаОстатковПоАналитикеОтсортированная.Колонки.Добавить("Кредит", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(1,0));
	ТаблицаОстатковПоАналитикеОтсортированная.Колонки.Добавить("МоментВремени", Новый ОписаниеТипов("МоментВремени"));
	ТаблицаОстатковПоАналитикеОтсортированная.Колонки.Добавить("СтрокаОстатка");
	
	Возврат ТаблицаОстатковПоАналитикеОтсортированная;
	
КонецФункции

Процедура СформироватьТаблицуОстатковПоАналитикеОтсортированную(ТаблицаОстатков, СтруктураПоискаОстатков, ТаблицаОстатковПоАналитикеОтсортированная)
	
	МассивОстатки = ТаблицаОстатков.НайтиСтроки(СтруктураПоискаОстатков);
	ТаблицаОстатковПоАналитикеОтсортированная.Очистить();
	Для Каждого ЭлементМассива Из МассивОстатки Цикл
		НоваяСтрока = ТаблицаОстатковПоАналитикеОтсортированная.Добавить();
		НоваяСтрока.ДатаПлатежа   = ЭлементМассива.ДатаПлатежа;
		НоваяСтрока.МоментВремени = ЭлементМассива.МоментВремени;
		НоваяСтрока.ПустаяДата    = ?(НоваяСтрока.ДатаПлатежа = '00010101000000',1,0);
		НоваяСтрока.Кредит        = ?(ЭлементМассива.Долг <> 0, 1, 0);
		НоваяСтрока.СтрокаОстатка = ЭлементМассива;
	КонецЦикла;
	ТаблицаОстатковПоАналитикеОтсортированная.Сортировать("ПустаяДата Убыв, ДатаПлатежа, Кредит Убыв, МоментВремени Возр");
	
КонецПроцедуры

Процедура ПровестиДокументПоРасчетамСКлиентами(ТаблицаОстатков, ТаблицаАктуальныхЗаписей, ВыборкаПоРегистратору)
	
	Движения = Новый Структура;
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
	
	Движения.Вставить("РасчетыСКлиентамиПоДокументам", РегистрыНакопления.РасчетыСКлиентамиПоДокументам.СоздатьНаборЗаписей());
	Движения.РасчетыСКлиентамиПоДокументам.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСКлиентамиПоДокументам", Движения.РасчетыСКлиентамиПоДокументам.ВыгрузитьКолонки());
	
	МассивАктуальныхСтрок = ТаблицаАктуальныхЗаписей.НайтиСтроки(Новый Структура("Регистратор", ВыборкаПоРегистратору.Регистратор));
	Для Каждого ЗаписьРасчетыСКлиентамиПоДокумента Из МассивАктуальныхСтрок Цикл
		ЗаписьНабора = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗаписьРасчетыСКлиентамиПоДокумента);
	КонецЦикла;
	
	СтруктураПоискаОстатков = Новый Структура;
	СтруктураПоискаОстатков.Вставить("ЗаказКлиента");
	СтруктураПоискаОстатков.Вставить("Валюта");
	
	ТаблицаОплат = ПолучитьПустуюТаблицуОплат();
	
	ТаблицаОплатВычитание = ПолучитьПустуюТаблицуОплат();
	
	ТаблицаОстатковПоАналитикеОтсортированная = ПолучитьПустуюТаблицуОстатковПоАналитикеОтсортированную();
	
	СоответствиеСтрокДляУдаления = Новый Соответствие();
	КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков = Новый Соответствие();
	
	ЭтоВводОстатков = ТипЗнч(ВыборкаПоРегистратору.Регистратор) = Тип("ДокументСсылка.ВводОстатков");
	
	ВыборкаПоИндексу = ВыборкаПоРегистратору.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИндексу.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатков, ВыборкаПоИндексу);
		
		СформироватьТаблицуОстатковПоАналитикеОтсортированную(ТаблицаОстатков, СтруктураПоискаОстатков, ТаблицаОстатковПоАналитикеОтсортированная);
		КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Очистить();
		
		Выборка = ВыборкаПоИндексу.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ТипЗнч(Выборка.ЗаказКлиента) = Тип("ДокументСсылка.ЗаказКлиента")
			 ИЛИ ТипЗнч(Выборка.ЗаказКлиента) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
				РасчетыПоЗаказуКлиента = ЗначениеЗаполнено(Выборка.ЗаказКлиента);
				РасчетыПоДоговору	   = Ложь;
			ИначеЕсли ТипЗнч(Выборка.ЗаказКлиента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				РасчетыПоЗаказуКлиента = Ложь;
				РасчетыПоДоговору	   = ЗначениеЗаполнено(Выборка.ЗаказКлиента);
			Иначе
				РасчетыПоЗаказуКлиента = Ложь;
				РасчетыПоДоговору	   = Ложь;
			КонецЕсли;
			
			Если КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Получить(Выборка.Регистратор) = Неопределено Тогда
				КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Вставить(Выборка.Регистратор, Истина);
			Иначе
				КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Очистить();
				СформироватьТаблицуОстатковПоАналитикеОтсортированную(ТаблицаОстатков, СтруктураПоискаОстатков, ТаблицаОстатковПоАналитикеОтсортированная);
				КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Вставить(Выборка.Регистратор, Истина);
			КонецЕсли;
			
			РасчетныйДокументПоРегистратору = ?(ЭтоВводОстатков, Выборка.ЗаказКлиента, Выборка.Регистратор);
			
			Если Выборка.ВидДвижения = ВидДвиженияНакопления.Приход И Выборка.СуммаПоГрафику > 0 Тогда // Вариант 0. "Заказ клиента".
				
				Если РасчетыПоЗаказуКлиента Тогда
					
					//////////////////////////////////////////////////////////////////////////////////////
					// Перераспределение остатков по ресурсам "Долг" и "КОплате", "КОтгрузке" на даты платежа по заказу
					//////////////////////////////////////////////////////////////////////////////////////
					
					ВыполненоПерераспределениеПоДатамПлатежа = Ложь;
					СуммаКПерераспределению = Выборка.СуммаПоГрафику;
					Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
						СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
						
						Если СуммаКПерераспределению <= 0 Тогда
							Прервать;
						КонецЕсли;
						
						Если СтрокаОстатка.Долг > 0 И НЕ ЗначениеЗаполнено(СтрокаОстатка.ДатаПлатежа) Тогда
							
							Если СуммаКПерераспределению >= СтрокаОстатка.Долг Тогда
								СуммаКПерераспределению = СуммаКПерераспределению - СтрокаОстатка.Долг;
								СуммаСписания = СтрокаОстатка.Долг;
								СтрокаОстатка.Долг = 0;
							ИначеЕсли СуммаКПерераспределению < СтрокаОстатка.Долг Тогда
								СтрокаОстатка.Долг = СтрокаОстатка.Долг - СуммаКПерераспределению;
								СуммаСписания = СуммаКПерераспределению;
								СуммаКПерераспределению = 0;
							КонецЕсли;
							
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							
							ЗаписьНабора.АналитикаУчетаПоПартнерам = СтрокаОстатка.АналитикаУчетаПоПартнерам;
							ЗаписьНабора.ЗаказКлиента              = СтрокаОстатка.ЗаказКлиента;
							ЗаписьНабора.Регистратор               = Выборка.Регистратор;
							ЗаписьНабора.Валюта                    = СтрокаОстатка.Валюта;
							ЗаписьНабора.Активность                = Истина;
							ЗаписьНабора.Период                    = СтрокаОстатка.Период;
							
							ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
							ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
							ЗаписьНабора.Долг              = -СуммаСписания;
							
							ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
							
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							
							ЗаписьНабора.АналитикаУчетаПоПартнерам = СтрокаОстатка.АналитикаУчетаПоПартнерам;
							ЗаписьНабора.ЗаказКлиента              = СтрокаОстатка.ЗаказКлиента;
							ЗаписьНабора.Регистратор               = Выборка.Регистратор;
							ЗаписьНабора.Валюта                    = СтрокаОстатка.Валюта;
							ЗаписьНабора.Активность                = Истина;
							ЗаписьНабора.Период                    = СтрокаОстатка.Период;
							
							ЗаписьНабора.ДатаПлатежа       = Выборка.ДатаПлатежа;
							ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
							ЗаписьНабора.Долг              = СуммаСписания;
							
							ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
							
							ВыполненоПерераспределениеПоДатамПлатежа = Истина;
							
						КонецЕсли;
						
					КонецЦикла; // Выборка строк остатка
					
					// Перераспределение остатков по ресурсам "КОплате" и "КОплате" на даты платежа по заказу
					СуммаКПерераспределению = Выборка.СуммаПоГрафику;
					Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
						СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
						
						Если СуммаКПерераспределению <= 0 Тогда
							Прервать;
						КонецЕсли;
						
						Если СтрокаОстатка.КОплате > 0 И НЕ ЗначениеЗаполнено(СтрокаОстатка.ДатаПлатежа) Тогда
							
							Если СуммаКПерераспределению >= СтрокаОстатка.КОплате Тогда
								СуммаКПерераспределению = СуммаКПерераспределению - СтрокаОстатка.КОплате;
								СуммаСписания = СтрокаОстатка.КОплате;
								СтрокаОстатка.КОплате = 0;
							ИначеЕсли СуммаКПерераспределению < СтрокаОстатка.КОплате Тогда
								СтрокаОстатка.КОплате = СтрокаОстатка.КОплате - СуммаКПерераспределению;
								СуммаСписания = СуммаКПерераспределению;
								СуммаКПерераспределению = 0;
							КонецЕсли;
							
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							
							ЗаписьНабора.АналитикаУчетаПоПартнерам = СтрокаОстатка.АналитикаУчетаПоПартнерам;
							ЗаписьНабора.ЗаказКлиента              = СтрокаОстатка.ЗаказКлиента;
							ЗаписьНабора.Регистратор               = Выборка.Регистратор;
							ЗаписьНабора.Валюта                    = СтрокаОстатка.Валюта;
							ЗаписьНабора.Активность                = Истина;
							ЗаписьНабора.Период                    = СтрокаОстатка.Период;
							
							ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
							ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
							ЗаписьНабора.КОплате           = -СуммаСписания;
							
							ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
							
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							
							ЗаписьНабора.АналитикаУчетаПоПартнерам = СтрокаОстатка.АналитикаУчетаПоПартнерам;
							ЗаписьНабора.ЗаказКлиента              = СтрокаОстатка.ЗаказКлиента;
							ЗаписьНабора.Регистратор               = Выборка.Регистратор;
							ЗаписьНабора.Валюта                    = СтрокаОстатка.Валюта;
							ЗаписьНабора.Активность                = Истина;
							ЗаписьНабора.Период                    = СтрокаОстатка.Период;
							
							ЗаписьНабора.ДатаПлатежа       = Выборка.ДатаПлатежа;
							ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
							ЗаписьНабора.КОплате           = СуммаСписания;
							
							ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
							
							ВыполненоПерераспределениеПоДатамПлатежа = Истина;
							
						КонецЕсли;
						
					КонецЦикла; // Выборка строк остатка
					
					// Перераспределение остатков по ресурсам "КОтгрузке" и "КОтгрузке" на даты платежа по заказу
					СуммаКПерераспределению = Выборка.СуммаПоГрафику;
					Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
						СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
						
						Если СуммаКПерераспределению <= 0 Тогда
							Прервать;
						КонецЕсли;
						
						Если СтрокаОстатка.КОтгрузке > 0 И НЕ ЗначениеЗаполнено(СтрокаОстатка.ДатаПлатежа) Тогда
							
							Если СуммаКПерераспределению >= СтрокаОстатка.КОтгрузке Тогда
								СуммаКПерераспределению = СуммаКПерераспределению - СтрокаОстатка.КОтгрузке;
								СуммаСписания = СтрокаОстатка.КОтгрузке;
								СтрокаОстатка.КОтгрузке = 0;
							ИначеЕсли СуммаКПерераспределению < СтрокаОстатка.КОтгрузке Тогда
								СтрокаОстатка.КОтгрузке = СтрокаОстатка.КОтгрузке - СуммаКПерераспределению;
								СуммаСписания = СуммаКПерераспределению;
								СуммаКПерераспределению = 0;
							КонецЕсли;
							
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							
							ЗаписьНабора.АналитикаУчетаПоПартнерам = СтрокаОстатка.АналитикаУчетаПоПартнерам;
							ЗаписьНабора.ЗаказКлиента              = СтрокаОстатка.ЗаказКлиента;
							ЗаписьНабора.Регистратор               = Выборка.Регистратор;
							ЗаписьНабора.Валюта                    = СтрокаОстатка.Валюта;
							ЗаписьНабора.Активность                = Истина;
							ЗаписьНабора.Период                    = СтрокаОстатка.Период;
							
							ЗаписьНабора.ДатаПлатежа       = Выборка.ДатаПлатежа;
							ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
							ЗаписьНабора.КОтгрузке         = -СуммаСписания;
							
							ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
							
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							
							ЗаписьНабора.АналитикаУчетаПоПартнерам = СтрокаОстатка.АналитикаУчетаПоПартнерам;
							ЗаписьНабора.ЗаказКлиента              = СтрокаОстатка.ЗаказКлиента;
							ЗаписьНабора.Регистратор               = Выборка.Регистратор;
							ЗаписьНабора.Валюта                    = СтрокаОстатка.Валюта;
							ЗаписьНабора.Активность                = Истина;
							ЗаписьНабора.Период                    = СтрокаОстатка.Период;
							
							ЗаписьНабора.ДатаПлатежа       = Выборка.ДатаПлатежа;
							ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
							ЗаписьНабора.КОтгрузке         = СуммаСписания;
							
							ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
							
							ВыполненоПерераспределениеПоДатамПлатежа = Истина;
							
						КонецЕсли;
						
					КонецЦикла; // Выборка строк остатка
					
					Если ВыполненоПерераспределениеПоДатамПлатежа Тогда
						СформироватьТаблицуОстатковПоАналитикеОтсортированную(ТаблицаОстатков, СтруктураПоискаОстатков, ТаблицаОстатковПоАналитикеОтсортированная);
					КонецЕсли;
					
					//////////////////////////////////////////////////////////////////////////////////////
					// Конец перераспределения остатков по ресурсам "Долг" и "КОплате", "КОтгрузке" на даты платежа по заказу
					//////////////////////////////////////////////////////////////////////////////////////
					
					ТаблицаСписанныхВозвратов = ПолучитьПустуюТаблицуСписанныхВозвратов();
					
					// Списываем отрицательные остатки по ресурсу "КВозврату" на сумму документа в ресурс "Предоплата"
					СуммаКРаспределениюКВозврату = Выборка.СуммаПоГрафику;
					Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
						СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
						
						Если СуммаКРаспределениюКВозврату <= 0 Тогда
							Прервать;
						КонецЕсли;
						
						Если СтрокаОстатка.КВозврату < 0 Тогда
							
							Если СуммаКРаспределениюКВозврату >= -СтрокаОстатка.КВозврату Тогда
								СуммаСписания = -СтрокаОстатка.КВозврату;
								СуммаКРаспределениюКВозврату = СуммаКРаспределениюКВозврату + СтрокаОстатка.КВозврату;
							Иначе
								СуммаСписания = СуммаКРаспределениюКВозврату;
								СуммаКРаспределениюКВозврату = 0;
							КонецЕсли;
							Если СуммаСписания = СтрокаОстатка.КВозврату + СтрокаОстатка.Предоплата Тогда
								СуммаСписанияРегл = -СтрокаОстатка.ПредоплатаРегл;
								СтрокаОстатка.КВозврату = 0;
								СтрокаОстатка.ПредоплатаРегл = 0;
							Иначе
								СуммаСписанияРегл = СтрокаОстатка.ПредоплатаРегл / (СтрокаОстатка.КВозврату + СтрокаОстатка.Предоплата) * СуммаСписания;
								СтрокаОстатка.КВозврату = СтрокаОстатка.КВозврату + СуммаСписания;
								СтрокаОстатка.ПредоплатаРегл = СтрокаОстатка.ПредоплатаРегл + СуммаСписанияРегл;
							КонецЕсли;
							
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
							ЗаписьНабора.ДатаПлатежа       = '00010101000000';
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
							ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							ЗаписьНабора.КВозврату         = СуммаСписания;
														
							ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
							
							СтрокаСписанногоВозврата = ТаблицаСписанныхВозвратов.Добавить();
							СтрокаСписанногоВозврата.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							СтрокаСписанногоВозврата.СуммаСписания = СуммаСписания;
							СтрокаСписанногоВозврата.СуммаСписанияРегл = СуммаСписанияРегл;
							
						КонецЕсли;
						
					КонецЦикла; // Выборка строк остатка
					
					// Распределение суммы возвратов на "Долг" и "КОплате"...
					Если ТаблицаСписанныхВозвратов.Итог("СуммаСписания") > 0 Тогда
						
						Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
							СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
							
							Если ТаблицаСписанныхВозвратов.Итог("СуммаСписания") <= 0 Тогда
								Прервать;
							КонецЕсли;
							
							Если СтрокаОстатка.Долг > 0 Тогда
								
								Для Каждого СтрокаСписанногоВозврата Из ТаблицаСписанныхВозвратов Цикл
									
									Если СтрокаСписанногоВозврата.СуммаСписания >= СтрокаОстатка.Долг Тогда
										СуммаСписания = СтрокаОстатка.Долг;
										СуммаСписанияРегл = СтрокаСписанногоВозврата.СуммаСписанияРегл / СтрокаСписанногоВозврата.СуммаСписания * СуммаСписания;
										СтрокаСписанногоВозврата.СуммаСписания = СтрокаСписанногоВозврата.СуммаСписания - СуммаСписания;
										СтрокаСписанногоВозврата.СуммаСписанияРегл = СтрокаСписанногоВозврата.СуммаСписанияРегл - СуммаСписанияРегл;
										СтрокаОстатка.Долг = 0;
									ИначеЕсли СтрокаСписанногоВозврата.СуммаСписания < СтрокаОстатка.Долг Тогда
										СтрокаОстатка.Долг = СтрокаОстатка.Долг - СтрокаСписанногоВозврата.СуммаСписания;
										СуммаСписания = СтрокаСписанногоВозврата.СуммаСписания;
										СтрокаСписанногоВозврата.СуммаСписания = 0;
										СтрокаСписанногоВозврата.СуммаСписанияРегл = 0;
									КонецЕсли;
								
									// Долг
									НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
									ЗаписьНабора = НаборЗаписей.Добавить();
									ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
									ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
									ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
									ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
									ЗаписьНабора.Долг              = СуммаСписания;
									
									ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
									
									// КОплате
									НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
									ЗаписьНабора = НаборЗаписей.Добавить();
									ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
									ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
									ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
									ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
									ЗаписьНабора.КОплате           = СуммаСписания;
									
									ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
								
								КонецЦикла;
								
							КонецЕсли;
							
						КонецЦикла; // Выборка строк остатка
						
						Если ТаблицаСписанныхВозвратов.Итог("СуммаСписания") > 0 Тогда
							
							Для Каждого СтрокаСписанногоВозврата Из ТаблицаСписанныхВозвратов Цикл
							
								НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
								ЗаписьНабора = НаборЗаписей.Добавить();
								ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
								ЗаписьНабора.ДатаПлатежа       = '00010101000000';
								ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
								ЗаписьНабора.РасчетныйДокумент = СтрокаСписанногоВозврата.РасчетныйДокумент;
								ЗаписьНабора.Предоплата        = СтрокаСписанногоВозврата.СуммаСписания;
								ЗаписьНабора.ПредоплатаРегл	   = СтрокаСписанногоВозврата.СуммаСписанияРегл;
								
								ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
								
								ЗаписьНабора.ПредоплатаРегл	   = 0;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли; // Распределение суммы возвратов на долг...
					
					// Остаток нераспределенной суммы документа записываем в ресурс "КОплате" по датам платежа.
					Если СуммаКРаспределениюКВозврату > 0 Тогда
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = НачалоДня(Выборка.ДатаПлатежа);
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
						ЗаписьНабора.РасчетныйДокумент = РасчетныйДокументПоРегистратору;
						ЗаписьНабора.КОплате           = СуммаКРаспределениюКВозврату;
						
						ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
						
					КонецЕсли;
					
					// Списываем отрицательные остатки по ресурсу "КОтгрузке" на сумму документа
					СуммаКРаспределениюКОтгрузке = Выборка.СуммаПоГрафику;
					Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
						СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
						
						Если СуммаКРаспределениюКОтгрузке <= 0 Тогда
							Прервать;
						КонецЕсли;
						
						Если СтрокаОстатка.КОтгрузке > 0 Тогда
							
							Если СуммаКРаспределениюКОтгрузке >= СтрокаОстатка.КОтгрузке Тогда
								СуммаКРаспределениюКОтгрузке = СуммаКРаспределениюКОтгрузке - СтрокаОстатка.КОтгрузке;
								СуммаСписания = СтрокаОстатка.КОтгрузке;
								СтрокаОстатка.КОтгрузке = 0;
							ИначеЕсли СуммаКРаспределениюКОтгрузке < СтрокаОстатка.КОтгрузке Тогда
								СтрокаОстатка.КОтгрузке = СтрокаОстатка.КОтгрузке - СуммаКРаспределениюКОтгрузке;
								СуммаСписания = СуммаКРаспределениюКОтгрузке;
								СуммаКРаспределениюКОтгрузке = 0;
							КонецЕсли;
							
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
							ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
							ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
							ЗаписьНабора.КОтгрузке         = СуммаСписания;
							
							ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
							
						КонецЕсли;
						
					КонецЦикла; // Выборка строк остатка
					
					// Остаток нераспределенной суммы документа записываем в ресурс "КОтгрузке" по датам платежа.
					Если СуммаКРаспределениюКОтгрузке > 0 Тогда
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = НачалоДня(Выборка.ДатаПлатежа);
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
						ЗаписьНабора.РасчетныйДокумент = РасчетныйДокументПоРегистратору;
						ЗаписьНабора.КОтгрузке         = СуммаКРаспределениюКОтгрузке;
						
						ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
						
					КонецЕсли;
					
				// При расчетах по договору сумму документа запишем в ресурс "КОтгрузке" по датам оплаты.
				ИначеЕсли РасчетыПоДоговору Тогда
					
					НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
					ЗаписьНабора = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
					ЗаписьНабора.ДатаПлатежа       = НачалоДня(Выборка.ДатаПлатежа);
					ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
					ЗаписьНабора.РасчетныйДокумент = РасчетныйДокументПоРегистратору;
					ЗаписьНабора.КОтгрузке         = Выборка.СуммаПоГрафику;
					
					ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Получить(Выборка.Регистратор) = Неопределено Тогда
				КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Вставить(Выборка.Регистратор, Истина);
			Иначе
				КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Очистить();
				СформироватьТаблицуОстатковПоАналитикеОтсортированную(ТаблицаОстатков, СтруктураПоискаОстатков, ТаблицаОстатковПоАналитикеОтсортированная);
				КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Вставить(Выборка.Регистратор, Истина);
			КонецЕсли;
			
			Если Выборка.ВидДвижения = ВидДвиженияНакопления.Расход И Выборка.Сумма > 0 Тогда // Вариант 1. "Оплата от клиента".
				
				ТаблицаОплат.Очистить();
				ТаблицаОплатВычитание.Очистить();
				
				// Списываем положительные остатки по ресурсу "КОплате" на сумму документа,
				// запоминаем даты платежа и суммы по датам в таблице оплат
				СуммаКРаспределениюОплата = Выборка.Сумма;
				Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
					СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
					
					Если СуммаКРаспределениюОплата <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаОстатка.КОплате > 0 Тогда
						
						Если СуммаКРаспределениюОплата >= СтрокаОстатка.КОплате Тогда
							СуммаКРаспределениюОплата = СуммаКРаспределениюОплата - СтрокаОстатка.КОплате;
							СуммаСписания = СтрокаОстатка.КОплате;
							СтрокаОстатка.КОплате = 0;
						ИначеЕсли СуммаКРаспределениюОплата < СтрокаОстатка.КОплате Тогда
							СтрокаОстатка.КОплате = СтрокаОстатка.КОплате - СуммаКРаспределениюОплата;
							СуммаСписания = СуммаКРаспределениюОплата;
							СуммаКРаспределениюОплата = 0;
						КонецЕсли;
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
						ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
						ЗаписьНабора.КОплате           = СуммаСписания;
						
						Оплата = ТаблицаОплат.Добавить();
						Оплата.ДатаПлатежа = СтрокаОстатка.ДатаПлатежа;
						Оплата.Сумма       = СуммаСписания;
						
						ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
						
					КонецЕсли;
					
				КонецЦикла; // Выборка строк остатка
				
				// Добавляем в таблицу оплат несписанную сумму документа с пустой датой платежа
				// и записываем в ресурс к возврату
				Если СуммаКРаспределениюОплата > 0 Тогда
					
					Если РасчетыПоЗаказуКлиента Тогда
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = '00010101000000';
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
						ЗаписьНабора.РасчетныйДокумент = Выборка.Регистратор;
						ЗаписьНабора.КВозврату         = СуммаКРаспределениюОплата;
						ЗаписьНабора.ПредоплатаРегл	   = ?(Выборка.Сумма = СуммаКРаспределениюОплата ИЛИ Выборка.Сумма = 0,
															Выборка.СуммаРегл,
															Выборка.СуммаРегл / Выборка.Сумма * СуммаКРаспределениюОплата
															);
						
						ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
						
					Иначе
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = '00010101000000';
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
						ЗаписьНабора.РасчетныйДокумент = Выборка.Регистратор;
						ЗаписьНабора.Предоплата        = СуммаКРаспределениюОплата;
						ЗаписьНабора.ПредоплатаРегл	   = ?(Выборка.Сумма = СуммаКРаспределениюОплата ИЛИ Выборка.Сумма = 0,
															Выборка.СуммаРегл,
															Выборка.СуммаРегл / Выборка.Сумма * СуммаКРаспределениюОплата
															);
						
						ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Списываем положительные остатки по ресурсу "Долг" на сумму документа,
				// вычитаем из таблицы оплат
				СуммаКРаспределениюДолг = Выборка.Сумма;
				Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
					СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
					
					Если СуммаКРаспределениюДолг <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаОстатка.Долг > 0 Тогда
						
						Если СуммаКРаспределениюДолг >= СтрокаОстатка.Долг Тогда
							СуммаКРаспределениюДолг = СуммаКРаспределениюДолг - СтрокаОстатка.Долг;
							СуммаСписания = СтрокаОстатка.Долг;
							СтрокаОстатка.Долг = 0;
						ИначеЕсли СуммаКРаспределениюДолг < СтрокаОстатка.Долг Тогда
							СтрокаОстатка.Долг = СтрокаОстатка.Долг - СуммаКРаспределениюДолг;
							СуммаСписания = СуммаКРаспределениюДолг;
							СуммаКРаспределениюДолг = 0;
						КонецЕсли;
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
						ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
						ЗаписьНабора.Долг              = СуммаСписания;
						
						ОплатаВычитание = ТаблицаОплатВычитание.Добавить();
						ОплатаВычитание.ДатаПлатежа = СтрокаОстатка.ДатаПлатежа;
						ОплатаВычитание.Сумма       = СуммаСписания;
						
						ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
						
					КонецЕсли;
					
				КонецЦикла; // Выборка строк остатка
				
				// Распределение суммы таблицы ОплатаВычитание на таблицу Оплата
				СуммаРаспределения = ТаблицаОплатВычитание.Итог("Сумма");
				Для Каждого СтрокаОстатка Из ТаблицаОплат Цикл
					Если СуммаРаспределения >= СтрокаОстатка.Сумма Тогда
						СуммаРаспределения = СуммаРаспределения - СтрокаОстатка.Сумма;
						СуммаСписания = СтрокаОстатка.Сумма;
						СтрокаОстатка.Сумма = 0;
					ИначеЕсли СуммаРаспределения < СтрокаОстатка.Сумма Тогда
						СтрокаОстатка.Сумма = СтрокаОстатка.Сумма - СуммаРаспределения;
						СуммаСписания = СуммаРаспределения;
						СуммаРаспределения = 0;
					КонецЕсли;
				КонецЦикла;
				
				// Остаток таблицы оплат записываем в ресурс "Предоплата" по датам платежа
				Для Каждого Оплата Из ТаблицаОплат Цикл
					Если Оплата.Сумма <> 0 Тогда
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = '00010101000000';
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
						ЗаписьНабора.РасчетныйДокумент = Выборка.Регистратор;
						ЗаписьНабора.Предоплата        = Оплата.Сумма;
						ЗаписьНабора.ПредоплатаРегл    = ?(Выборка.Сумма = Оплата.Сумма ИЛИ Выборка.Сумма = 0,
															Выборка.СуммаРегл,
															Выборка.СуммаРегл / Выборка.Сумма * Оплата.Сумма
															);
						
						ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
						
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли Выборка.ВидДвижения = ВидДвиженияНакопления.Расход И Выборка.Сумма < 0 Тогда // Вариант 2. "Возврат денежных средств клиенту".
				
				// Списываем отрицательные остатки по ресурсу "КВозврату" на сумму документа
				СуммаКРаспределениюКВозврату = -Выборка.Сумма;
				Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
					СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
					
					Если СуммаКРаспределениюКВозврату <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаОстатка.КВозврату < 0 Тогда
						
						Если СуммаКРаспределениюКВозврату >= -СтрокаОстатка.КВозврату Тогда
							СуммаСписания = -СтрокаОстатка.КВозврату;
							СуммаКРаспределениюКВозврату = СуммаКРаспределениюКВозврату - СуммаСписания;
						Иначе
							СуммаСписания = СуммаКРаспределениюКВозврату;
							СуммаКРаспределениюКВозврату = 0;
						КонецЕсли;
						Если СтрокаОстатка.КВозврату + СтрокаОстатка.Предоплата = -СуммаСписания Тогда
							СуммаСписанияРегл = -СтрокаОстатка.ПредоплатаРегл;
							СтрокаОстатка.КВозврату = 0;
							СтрокаОстатка.ПредоплатаРегл = 0;
						Иначе
							СуммаСписанияРегл = СтрокаОстатка.ПредоплатаРегл / (СтрокаОстатка.КВозврату + СтрокаОстатка.Предоплата) * СуммаСписания;
							СтрокаОстатка.КВозврату = СтрокаОстатка.КВозврату + СуммаСписания;
							СтрокаОстатка.ПредоплатаРегл = СтрокаОстатка.ПредоплатаРегл + СуммаСписанияРегл;
						КонецЕсли;
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = '00010101000000';
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
						ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
						ЗаписьНабора.КВозврату         = -СуммаСписания;
						ЗаписьНабора.ПредоплатаРегл    = -СуммаСписанияРегл;
						
						ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
						
					КонецЕсли;
					
				КонецЦикла; // Выборка строк остатка
				
				// Списываем отрицательные остатки по ресурсу "Предоплата" на сумму документа
				// за минусом суммы списанной суммы по ресурсу "КВозврату"
				СуммаКРаспределениюПредоплата = СуммаКРаспределениюКВозврату;
				Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
					СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
					
					Если СуммаКРаспределениюПредоплата <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаОстатка.Предоплата < 0 Тогда
						
						Если СуммаКРаспределениюПредоплата >= -СтрокаОстатка.Предоплата Тогда
							СуммаСписания = -СтрокаОстатка.Предоплата;
							СуммаКРаспределениюПредоплата = СуммаКРаспределениюПредоплата - СуммаСписания;
						Иначе
							СуммаСписания = СуммаКРаспределениюПредоплата;
							СуммаКРаспределениюПредоплата = 0;
						КонецЕсли;
						Если СтрокаОстатка.КВозврату + СтрокаОстатка.Предоплата = -СуммаСписания Тогда
							СуммаСписанияРегл = -СтрокаОстатка.ПредоплатаРегл;
							СтрокаОстатка.Предоплата = 0;
							СтрокаОстатка.ПредоплатаРегл = 0;
						Иначе
							СуммаСписанияРегл = СтрокаОстатка.ПредоплатаРегл / (СтрокаОстатка.КВозврату + СтрокаОстатка.Предоплата) * СуммаСписания;
							СтрокаОстатка.Предоплата = СтрокаОстатка.Предоплата + СуммаСписания;
							СтрокаОстатка.ПредоплатаРегл = СтрокаОстатка.ПредоплатаРегл + СуммаСписанияРегл;
						КонецЕсли;
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = '00010101000000';
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
						ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
						ЗаписьНабора.Предоплата        = -СуммаСписания;
						ЗаписьНабора.ПредоплатаРегл    = -СуммаСписанияРегл;
						
						ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
						
					КонецЕсли;
					
				КонецЦикла; // Выборка строк остатка
				
				// Остаток нераспределенной суммы документа записываем в ресурс "КВозврату". Вид движения: Расход (со знаком минус)
				Если СуммаКРаспределениюПредоплата > 0 Тогда
					
					НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
					ЗаписьНабора = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
					ЗаписьНабора.ДатаПлатежа       = '00010101000000';
					ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
					ЗаписьНабора.РасчетныйДокумент = РасчетныйДокументПоРегистратору;
					ЗаписьНабора.КОплате           = -СуммаКРаспределениюПредоплата;
					ЗаписьНабора.Долг              = -СуммаКРаспределениюПредоплата;
					
					ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
					
				КонецЕсли;
				
			ИначеЕсли Выборка.ВидДвижения = ВидДвиженияНакопления.Приход И Выборка.Сумма > 0 Тогда // Вариант 3. "Реализация".
				
				ТаблицаОплат.Очистить();
				ТаблицаОплатВычитание.Очистить();
				
				// При расчетах по договору ограничим область поиска остатков по ресурсу "КОтгрузке" заказом, по которому выполняется реализация.
				Если РасчетыПоДоговору Тогда
					СтруктураПоискаОстатков.Вставить("РасчетныйДокумент", ?(ЗначениеЗаполнено(Выборка.ПродажаПоЗаказу), Выборка.ПродажаПоЗаказу, РасчетныйДокументПоРегистратору));
					СформироватьТаблицуОстатковПоАналитикеОтсортированную(ТаблицаОстатков, СтруктураПоискаОстатков, ТаблицаОстатковПоАналитикеОтсортированная);
				КонецЕсли;
				
				// Списываем положительные остатки по ресурсу "КОтгрузке" на сумму документа,
				// запоминаем даты платежа и суммы по датам в таблице оплат
				СуммаКРаспределениюКОтгрузке = Выборка.Сумма;
				Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
					СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
					
					Если СуммаКРаспределениюКОтгрузке <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаОстатка.КОтгрузке < 0 Тогда
						
						Если СуммаКРаспределениюКОтгрузке >= -СтрокаОстатка.КОтгрузке Тогда
							СуммаКРаспределениюКОтгрузке = СуммаКРаспределениюКОтгрузке + СтрокаОстатка.КОтгрузке;
							СуммаСписания = -СтрокаОстатка.КОтгрузке;
							СтрокаОстатка.КОтгрузке = 0;
						ИначеЕсли СуммаКРаспределениюКОтгрузке < -СтрокаОстатка.КОтгрузке Тогда
							СтрокаОстатка.КОтгрузке = СтрокаОстатка.КОтгрузке + СуммаКРаспределениюКОтгрузке;
							СуммаСписания = СуммаКРаспределениюКОтгрузке;
							СуммаКРаспределениюКОтгрузке = 0;
						КонецЕсли;
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
						ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
						ЗаписьНабора.КОтгрузке         = СуммаСписания;
						
						Оплата = ТаблицаОплат.Добавить();
						Оплата.ДатаПлатежа = СтрокаОстатка.ДатаПлатежа;
						Оплата.Сумма       = СуммаСписания;
						
						ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
						
					КонецЕсли;
					
				КонецЦикла; // Выборка строк остатка
				
				// Добавляем в таблицу оплат несписанную сумму документа датой платежа из выборки (проставлена в документе реализации)
				Если СуммаКРаспределениюКОтгрузке > 0 Тогда
					
					Оплата = ТаблицаОплат.Добавить();
					Оплата.ДатаПлатежа = Выборка.ДатаПлатежа;
					Оплата.Сумма = СуммаКРаспределениюКОтгрузке;
					
					Если РасчетыПоЗаказуКлиента Тогда
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = Выборка.ДатаПлатежа;
						ЗаписьНабора.РасчетныйДокумент = Выборка.ЗаказКлиента;
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
						ЗаписьНабора.КОтгрузке         = СуммаКРаспределениюКОтгрузке;
						
						ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
						
						СуммаКРаспределениюКОтгрузке = 0;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если РасчетыПоДоговору Тогда
					СтруктураПоискаОстатков.Удалить("РасчетныйДокумент");
					СформироватьТаблицуОстатковПоАналитикеОтсортированную(ТаблицаОстатков, СтруктураПоискаОстатков, ТаблицаОстатковПоАналитикеОтсортированная);
				КонецЕсли;
				
				// Списываем отрицательные остатки по ресурсу "Предоплата" на сумму документа,
				// вычитаем из таблицы оплат
				СуммаКРаспределениюПредоплата = Выборка.Сумма;
				Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
					СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
					
					Если СуммаКРаспределениюПредоплата <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаОстатка.Предоплата < 0 Тогда
						
						Если СуммаКРаспределениюПредоплата >= -СтрокаОстатка.Предоплата Тогда
							СуммаСписания = -СтрокаОстатка.Предоплата;
							СуммаКРаспределениюПредоплата = СуммаКРаспределениюПредоплата - СуммаСписания;
						Иначе
							СуммаСписания = СуммаКРаспределениюПредоплата;
							СуммаКРаспределениюПредоплата = 0;
						КонецЕсли;
						Если СтрокаОстатка.КВозврату + СтрокаОстатка.Предоплата = -СуммаСписания Тогда
							СуммаСписанияРегл = -СтрокаОстатка.ПредоплатаРегл;
							СтрокаОстатка.Предоплата = 0;
							СтрокаОстатка.ПредоплатаРегл = 0;
						Иначе
							СуммаСписанияРегл = СтрокаОстатка.ПредоплатаРегл / (СтрокаОстатка.КВозврату + СтрокаОстатка.Предоплата) * СуммаСписания;
							СтрокаОстатка.Предоплата = СтрокаОстатка.Предоплата + СуммаСписания;
							СтрокаОстатка.ПредоплатаРегл = СтрокаОстатка.ПредоплатаРегл + СуммаСписанияРегл;
						КонецЕсли;
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = '00010101000000';
						ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
						ЗаписьНабора.Предоплата        = СуммаСписания;
						ЗаписьНабора.ПредоплатаРегл    = СуммаСписанияРегл;
						
						ОплатаВычитание = ТаблицаОплатВычитание.Добавить();
						ОплатаВычитание.ДатаПлатежа = СтрокаОстатка.ДатаПлатежа;
 						ОплатаВычитание.Сумма       = СуммаСписания;
						
						ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
						
					КонецЕсли;
					
				КонецЦикла; // Выборка строк остатка
				
				// Распределение суммы таблицы ОплатаВычитание на таблицу Оплата
				СуммаРаспределения = ТаблицаОплатВычитание.Итог("Сумма");
				Для Каждого СтрокаОстатка Из ТаблицаОплат Цикл
					Если СуммаРаспределения >= СтрокаОстатка.Сумма Тогда
						СуммаРаспределения = СуммаРаспределения - СтрокаОстатка.Сумма;
						СуммаСписания = СтрокаОстатка.Сумма;
						СтрокаОстатка.Сумма = 0;
					ИначеЕсли СуммаРаспределения < СтрокаОстатка.Сумма Тогда
						СтрокаОстатка.Сумма = СтрокаОстатка.Сумма - СуммаРаспределения;
						СуммаСписания = СуммаРаспределения;
						СуммаРаспределения = 0;
					КонецЕсли;
				КонецЦикла;
				
				// Остаток таблицы оплат записываем в ресурсы "Долг" и "КОплате" по датам платежа,
				// сторнируем суммы "КОплате", пероначально сформированные заказом...
				// Сторнирование КОплате в таблице остатков не должно делаться отдельной строкой
				Для Каждого Оплата Из ТаблицаОплат Цикл
					Если Оплата.Сумма <> 0 Тогда
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = Оплата.ДатаПлатежа;
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
						ЗаписьНабора.РасчетныйДокумент = РасчетныйДокументПоРегистратору;
						ЗаписьНабора.Долг              = Оплата.Сумма;
						ЗаписьНабора.КОплате           = Оплата.Сумма;
						
						ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
						
						Если РасчетыПоЗаказуКлиента Тогда
							
							// Сторнирование суммы "КОплате"
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
							ЗаписьНабора.ДатаПлатежа       = Оплата.ДатаПлатежа;
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
							ЗаписьНабора.РасчетныйДокумент = Выборка.ЗаказКлиента;
							ЗаписьНабора.КОплате           = -Оплата.Сумма;
							
							// Убираем суммы КОплате из таблицы оплат
							СтруктураПоискаОстатковСторно = Новый Структура;
							СтруктураПоискаОстатковСторно.Вставить("ЗаказКлиента");
							СтруктураПоискаОстатковСторно.Вставить("Валюта");
							СтруктураПоискаОстатковСторно.Вставить("ДатаПлатежа");
							СтруктураПоискаОстатковСторно.Вставить("РасчетныйДокумент");
							
							ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатковСторно, Выборка);
							СтруктураПоискаОстатковСторно.ДатаПлатежа = Оплата.ДатаПлатежа;
							СтруктураПоискаОстатковСторно.РасчетныйДокумент = Выборка.ЗаказКлиента;
							
							ТаблицаОстатковПоАналитикеОтсортированнаяСторно = ТаблицаОстатковПоАналитикеОтсортированная.СкопироватьКолонки();
							СформироватьТаблицуОстатковПоАналитикеОтсортированную(ТаблицаОстатков, СтруктураПоискаОстатковСторно, ТаблицаОстатковПоАналитикеОтсортированнаяСторно);
							
							СуммаКРаспределениюСторно = Оплата.Сумма;
							Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированнаяСторно Цикл
								СтрокаОстаткаСторно = СтрокаТЗ.СтрокаОстатка;
								
								Если СуммаКРаспределениюСторно <= 0 Тогда
									Прервать;
								КонецЕсли;
								
								Если СтрокаОстаткаСторно.КОплате > 0 Тогда
									
									Если СуммаКРаспределениюСторно >= СтрокаОстаткаСторно.КОплате Тогда
										СуммаКРаспределениюСторно = СуммаКРаспределениюСторно + СтрокаОстаткаСторно.КОплате;
										СтрокаОстаткаСторно.КОплате = 0;
									ИначеЕсли СуммаКРаспределениюСторно < СтрокаОстаткаСторно.КОплате Тогда
										СтрокаОстаткаСторно.КОплате = СтрокаОстаткаСторно.КОплате - СуммаКРаспределениюСторно;
										СуммаКРаспределениюСторно = 0;
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла; // Выборка строк таблицы оплат
				
			ИначеЕсли Выборка.ВидДвижения = ВидДвиженияНакопления.Приход И Выборка.Сумма < 0 Тогда // Вариант 4. "Возврат товаров от клиента".
				
				// Списываем положительные остатки по ресурсу "Долг" на сумму документа
				СуммаКРаспределениюДолг = -Выборка.Сумма;
				Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
					СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
					
					Если СуммаКРаспределениюДолг <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаОстатка.Долг > 0 Тогда
						
						Если СуммаКРаспределениюДолг >= СтрокаОстатка.Долг Тогда
							СуммаКРаспределениюДолг = СуммаКРаспределениюДолг - СтрокаОстатка.Долг;
							СуммаСписания = СтрокаОстатка.Долг;
							СтрокаОстатка.Долг = 0;
						ИначеЕсли СуммаКРаспределениюДолг < СтрокаОстатка.Долг Тогда
							СтрокаОстатка.Долг = СтрокаОстатка.Долг - СуммаКРаспределениюДолг;
							СуммаСписания = СуммаКРаспределениюДолг;
							СуммаКРаспределениюДолг = 0;
						КонецЕсли;
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
						ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
						ЗаписьНабора.Долг              = -СуммаСписания;
						
						ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
						
					КонецЕсли;
					
				КонецЦикла; // Выборка строк остатка
				
				// Остаток нераспределенной суммы документа записываем в ресурс "КВозврату". Вид движения: Приход (со знаком минус)
				Если СуммаКРаспределениюДолг > 0 Тогда
					
					НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам;
					ЗаписьНабора = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
					ЗаписьНабора.ДатаПлатежа       = '00010101000000';
					ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
					ЗаписьНабора.РасчетныйДокумент = РасчетныйДокументПоРегистратору;
					ЗаписьНабора.КВозврату         = -СуммаКРаспределениюДолг;
					
					ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; // Выборка по детальным записям
		
	КонецЦикла; // Выборка по индексу аналитики
	
	УдалитьСтрокиСНулевымиСуммами(ТаблицаОстатков, СоответствиеСтрокДляУдаления);
	
	ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам.Свернуть(
		" Период
		|,Регистратор
		|,Активность
		|,ВидДвижения
		|,МоментВремени
		|,АналитикаУчетаПоПартнерам
		|,ЗаказКлиента
		|,РасчетныйДокумент
		|,Валюта
		|,ДатаПлатежа
		|,ХозяйственнаяОперация
		|",
		" КОтгрузке
		|,КОплате
		|,КВозврату
		|,Долг
		|,Предоплата
		|,ПредоплатаРегл"
	);
	
	Движения.РасчетыСКлиентамиПоДокументам.Загрузить(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКлиентамиПоДокументам);
	
	ЗаписатьНаборыЗаписей(Движения);
	
КонецПроцедуры

Процедура ПровестиДокументПоРасчетамСПоставщиками(ТаблицаОстатков, ТаблицаАктуальныхЗаписей, ВыборкаПоРегистратору)
	
	Движения = Новый Структура;
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);
	
	Движения.Вставить("РасчетыСПоставщикамиПоДокументам", РегистрыНакопления.РасчетыСПоставщикамиПоДокументам.СоздатьНаборЗаписей());
	Движения.РасчетыСПоставщикамиПоДокументам.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасчетыСПоставщикамиПоДокументам", Движения.РасчетыСПоставщикамиПоДокументам.ВыгрузитьКолонки());
	
	МассивАктуальныхСтрок = ТаблицаАктуальныхЗаписей.НайтиСтроки(Новый Структура("Регистратор", ВыборкаПоРегистратору.Регистратор));
	Для Каждого ЗаписьРасчетыСПоставщикамиПоДокумента Из МассивАктуальныхСтрок Цикл
		ЗаписьНабора = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, ЗаписьРасчетыСПоставщикамиПоДокумента);
	КонецЦикла;
	
	СтруктураПоискаОстатков = Новый Структура;
	СтруктураПоискаОстатков.Вставить("ЗаказПоставщику");
	СтруктураПоискаОстатков.Вставить("Валюта");
	
	ТаблицаОплат = ПолучитьПустуюТаблицуОплат();
	
	ТаблицаОплатВычитание = ПолучитьПустуюТаблицуОплат();
	
	ТаблицаОстатковПоАналитикеОтсортированная = ПолучитьПустуюТаблицуОстатковПоАналитикеОтсортированную();
	
	СоответствиеСтрокДляУдаления = Новый Соответствие();
	КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков = Новый Соответствие();
	
	ЭтоВводОстатков = ТипЗнч(ВыборкаПоРегистратору.Регистратор) = Тип("ДокументСсылка.ВводОстатков");
	
	ВыборкаПоИндексу = ВыборкаПоРегистратору.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИндексу.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатков, ВыборкаПоИндексу);
		
		СформироватьТаблицуОстатковПоАналитикеОтсортированную(ТаблицаОстатков, СтруктураПоискаОстатков, ТаблицаОстатковПоАналитикеОтсортированная);
		КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Очистить();
		
		Выборка = ВыборкаПоИндексу.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ТипЗнч(Выборка.ЗаказПоставщику) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				РасчетыПоЗаказуПоставщику = ЗначениеЗаполнено(Выборка.ЗаказПоставщику);
				РасчетыПоДоговору		  = Ложь;
			ИначеЕсли ТипЗнч(Выборка.ЗаказПоставщику) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				РасчетыПоЗаказуПоставщику = Ложь;
				РасчетыПоДоговору		  = ЗначениеЗаполнено(Выборка.ЗаказПоставщику);
			Иначе
				РасчетыПоЗаказуПоставщику = Ложь;
				РасчетыПоДоговору		  = Ложь;
			КонецЕсли;
			
			Если КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Получить(Выборка.Регистратор) = Неопределено Тогда
				КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Вставить(Выборка.Регистратор, Истина);
			Иначе
				КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Очистить();
				СформироватьТаблицуОстатковПоАналитикеОтсортированную(ТаблицаОстатков, СтруктураПоискаОстатков, ТаблицаОстатковПоАналитикеОтсортированная);
				КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Вставить(Выборка.Регистратор, Истина);
			КонецЕсли;
			
			РасчетныйДокументПоРегистратору = ?(ЭтоВводОстатков, Выборка.ЗаказПоставщику, Выборка.Регистратор);
			
			Если Выборка.ВидДвижения = ВидДвиженияНакопления.Расход И Выборка.СуммаПоГрафику > 0 Тогда // Вариант 0. "Заказ поставщику".
				
				Если РасчетыПоЗаказуПоставщику Тогда
					
					//////////////////////////////////////////////////////////////////////////////////////
					// Перераспределение остатков по ресурсам "Долг" и "КОплате", "КПоступлению" на даты платежа по заказу
					//////////////////////////////////////////////////////////////////////////////////////
					
					ВыполненоПерераспределениеПоДатамПлатежа = Ложь;
					СуммаКПерераспределению = Выборка.СуммаПоГрафику;
					Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
						СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
						
						Если СуммаКПерераспределению <= 0 Тогда
							Прервать;
						КонецЕсли;
						
						Если СтрокаОстатка.Долг < 0 И НЕ ЗначениеЗаполнено(СтрокаОстатка.ДатаПлатежа) Тогда
							
							Если СуммаКПерераспределению >= -СтрокаОстатка.Долг Тогда
								СуммаКПерераспределению = СуммаКПерераспределению + СтрокаОстатка.Долг;
								СуммаСписания = -СтрокаОстатка.Долг;
								СтрокаОстатка.Долг = 0;
							ИначеЕсли СуммаКПерераспределению < -СтрокаОстатка.Долг Тогда
								СтрокаОстатка.Долг = СтрокаОстатка.Долг + СуммаКПерераспределению;
								СуммаСписания = СуммаКПерераспределению;
								СуммаКПерераспределению = 0;
							КонецЕсли;
							
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							
							ЗаписьНабора.АналитикаУчетаПоПартнерам = СтрокаОстатка.АналитикаУчетаПоПартнерам;
							ЗаписьНабора.ЗаказПоставщику           = СтрокаОстатка.ЗаказПоставщику;
							ЗаписьНабора.Регистратор               = Выборка.Регистратор;
							ЗаписьНабора.Валюта                    = СтрокаОстатка.Валюта;
							ЗаписьНабора.Активность                = Истина;
							ЗаписьНабора.Период                    = СтрокаОстатка.Период;
							
							ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
							ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
							ЗаписьНабора.Долг              = -СуммаСписания;
							
							ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
							
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							
							ЗаписьНабора.АналитикаУчетаПоПартнерам = СтрокаОстатка.АналитикаУчетаПоПартнерам;
							ЗаписьНабора.ЗаказПоставщику           = СтрокаОстатка.ЗаказПоставщику;
							ЗаписьНабора.Регистратор               = Выборка.Регистратор;
							ЗаписьНабора.Валюта                    = СтрокаОстатка.Валюта;
							ЗаписьНабора.Активность                = Истина;
							ЗаписьНабора.Период                    = СтрокаОстатка.Период;
							
							ЗаписьНабора.ДатаПлатежа       = Выборка.ДатаПлатежа;
							ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
							ЗаписьНабора.Долг              = СуммаСписания;
							
							ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
							
							ВыполненоПерераспределениеПоДатамПлатежа = Истина;
							
						КонецЕсли;
						
					КонецЦикла; // Выборка строк остатка
					
					// Перераспределение остатков по ресурсам "КОплате" и "КОплате" на даты платежа по заказу
					СуммаКПерераспределению = Выборка.СуммаПоГрафику;
					Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
						СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
						
						Если СуммаКПерераспределению <= 0 Тогда
							Прервать;
						КонецЕсли;
						
						Если СтрокаОстатка.КОплате < 0 И НЕ ЗначениеЗаполнено(СтрокаОстатка.ДатаПлатежа) Тогда
							
							Если СуммаКПерераспределению >= -СтрокаОстатка.КОплате Тогда
								СуммаКПерераспределению = СуммаКПерераспределению + СтрокаОстатка.КОплате;
								СуммаСписания = -СтрокаОстатка.КОплате;
								СтрокаОстатка.КОплате = 0;
							ИначеЕсли СуммаКПерераспределению < -СтрокаОстатка.КОплате Тогда
								СтрокаОстатка.КОплате = СтрокаОстатка.КОплате + СуммаКПерераспределению;
								СуммаСписания = СуммаКПерераспределению;
								СуммаКПерераспределению = 0;
							КонецЕсли;
							
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							
							ЗаписьНабора.АналитикаУчетаПоПартнерам = СтрокаОстатка.АналитикаУчетаПоПартнерам;
							ЗаписьНабора.ЗаказПоставщику           = СтрокаОстатка.ЗаказПоставщику;
							ЗаписьНабора.Регистратор               = Выборка.Регистратор;
							ЗаписьНабора.Валюта                    = СтрокаОстатка.Валюта;
							ЗаписьНабора.Активность                = Истина;
							ЗаписьНабора.Период                    = СтрокаОстатка.Период;
							
							ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
							ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
							ЗаписьНабора.КОплате           = -СуммаСписания;
							
							ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
							
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							
							ЗаписьНабора.АналитикаУчетаПоПартнерам = СтрокаОстатка.АналитикаУчетаПоПартнерам;
							ЗаписьНабора.ЗаказПоставщику           = СтрокаОстатка.ЗаказПоставщику;
							ЗаписьНабора.Регистратор               = Выборка.Регистратор;
							ЗаписьНабора.Валюта                    = СтрокаОстатка.Валюта;
							ЗаписьНабора.Активность                = Истина;
							ЗаписьНабора.Период                    = СтрокаОстатка.Период;
							
							ЗаписьНабора.ДатаПлатежа       = Выборка.ДатаПлатежа;
							ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
							ЗаписьНабора.КОплате           = СуммаСписания;
							
							ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
							
							ВыполненоПерераспределениеПоДатамПлатежа = Истина;
							
						КонецЕсли;
						
					КонецЦикла; // Выборка строк остатка
					
					// Перераспределение остатков по ресурсам "КОтгрузке" и "КОтгрузке" на даты платежа по заказу
					СуммаКПерераспределению = Выборка.СуммаПоГрафику;
					Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
						СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
						
						Если СуммаКПерераспределению <= 0 Тогда
							Прервать;
						КонецЕсли;
						
						Если СтрокаОстатка.КПоступлению < 0 И НЕ ЗначениеЗаполнено(СтрокаОстатка.ДатаПлатежа) Тогда
							
							Если СуммаКПерераспределению >= -СтрокаОстатка.КПоступлению Тогда
								СуммаКПерераспределению = СуммаКПерераспределению + СтрокаОстатка.КПоступлению;
								СуммаСписания = -СтрокаОстатка.КПоступлению;
								СтрокаОстатка.КПоступлению = 0;
							ИначеЕсли СуммаКПерераспределению < -СтрокаОстатка.КПоступлению Тогда
								СтрокаОстатка.КПоступлению = СтрокаОстатка.КПоступлению + СуммаКПерераспределению;
								СуммаСписания = СуммаКПерераспределению;
								СуммаКПерераспределению = 0;
							КонецЕсли;
							
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							
							ЗаписьНабора.АналитикаУчетаПоПартнерам = СтрокаОстатка.АналитикаУчетаПоПартнерам;
							ЗаписьНабора.ЗаказПоставщику           = СтрокаОстатка.ЗаказПоставщику;
							ЗаписьНабора.Регистратор               = Выборка.Регистратор;
							ЗаписьНабора.Валюта                    = СтрокаОстатка.Валюта;
							ЗаписьНабора.Активность                = Истина;
							ЗаписьНабора.Период                    = СтрокаОстатка.Период;
							
							ЗаписьНабора.ДатаПлатежа       = Выборка.ДатаПлатежа;
							ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
							ЗаписьНабора.КПоступлению      = -СуммаСписания;
							
							ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
							
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							
							ЗаписьНабора.АналитикаУчетаПоПартнерам = СтрокаОстатка.АналитикаУчетаПоПартнерам;
							ЗаписьНабора.ЗаказПоставщику           = СтрокаОстатка.ЗаказПоставщику;
							ЗаписьНабора.Регистратор               = Выборка.Регистратор;
							ЗаписьНабора.Валюта                    = СтрокаОстатка.Валюта;
							ЗаписьНабора.Активность                = Истина;
							ЗаписьНабора.Период                    = СтрокаОстатка.Период;
							
							ЗаписьНабора.ДатаПлатежа       = Выборка.ДатаПлатежа;
							ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
							ЗаписьНабора.КПоступлению      = СуммаСписания;
							
							ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
							
							ВыполненоПерераспределениеПоДатамПлатежа = Истина;
							
						КонецЕсли;
						
					КонецЦикла; // Выборка строк остатка
					
					Если ВыполненоПерераспределениеПоДатамПлатежа Тогда
						СформироватьТаблицуОстатковПоАналитикеОтсортированную(ТаблицаОстатков, СтруктураПоискаОстатков, ТаблицаОстатковПоАналитикеОтсортированная);
					КонецЕсли;
					
					//////////////////////////////////////////////////////////////////////////////////////
					// Конец перераспределения остатков по ресурсам "Долг" и "КОплате", "КОтгрузке" на даты платежа по заказу
					//////////////////////////////////////////////////////////////////////////////////////
					
					ТаблицаСписанныхВозвратов = ПолучитьПустуюТаблицуСписанныхВозвратов();
					
					// Списываем положительные остатки по ресурсу "КВозврату" на сумму документа в ресурс "Предоплата"
					СуммаКРаспределениюКВозврату = Выборка.СуммаПоГрафику;
					Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
						СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
						
						Если СуммаКРаспределениюКВозврату <= 0 Тогда
							Прервать;
						КонецЕсли;
						
						Если СтрокаОстатка.КВозврату > 0 Тогда
							
							Если СуммаКРаспределениюКВозврату >= СтрокаОстатка.КВозврату Тогда
								СуммаСписания = СтрокаОстатка.КВозврату;
								СуммаКРаспределениюКВозврату = СуммаКРаспределениюКВозврату - СтрокаОстатка.КВозврату;
							Иначе
								СуммаСписания = СуммаКРаспределениюКВозврату;
								СуммаКРаспределениюКВозврату = 0;
							КонецЕсли;
							Если СуммаСписания = СтрокаОстатка.КВозврату + СтрокаОстатка.Предоплата Тогда
								СуммаСписанияРегл = СтрокаОстатка.ПредоплатаРегл;
								СтрокаОстатка.КВозврату = 0;
								СтрокаОстатка.ПредоплатаРегл = 0;
							Иначе
								СуммаСписанияРегл = СтрокаОстатка.ПредоплатаРегл / (СтрокаОстатка.КВозврату + СтрокаОстатка.Предоплата) * СуммаСписания;
								СтрокаОстатка.КВозврату = СтрокаОстатка.КВозврату - СуммаСписания;
								СтрокаОстатка.ПредоплатаРегл = СтрокаОстатка.ПредоплатаРегл - СуммаСписанияРегл;
							КонецЕсли;
							
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
							ЗаписьНабора.ДатаПлатежа       = '00010101000000';
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
							ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							ЗаписьНабора.КВозврату         = СуммаСписания;
							
							ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
							
							СтрокаСписанногоВозврата = ТаблицаСписанныхВозвратов.Добавить();
							СтрокаСписанногоВозврата.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							СтрокаСписанногоВозврата.СуммаСписания = СуммаСписания;
							СтрокаСписанногоВозврата.СуммаСписанияРегл = СуммаСписанияРегл;
							
						КонецЕсли;
						
					КонецЦикла; // Выборка строк остатка
					
					// Распределение суммы возвратов на "Долг" и "КОплате"...
					Если ТаблицаСписанныхВозвратов.Итог("СуммаСписания") > 0 Тогда
						
						Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
							СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
							
							Если ТаблицаСписанныхВозвратов.Итог("СуммаСписания") <= 0 Тогда
								Прервать;
							КонецЕсли;
							
							Если СтрокаОстатка.Долг < 0 Тогда
								
								Для Каждого СтрокаСписанногоВозврата Из ТаблицаСписанныхВозвратов Цикл
									
									Если СтрокаСписанногоВозврата.СуммаСписания >= -СтрокаОстатка.Долг Тогда
										СуммаСписания = -СтрокаОстатка.Долг;
										СуммаСписанияРегл = СтрокаСписанногоВозврата.СуммаСписанияРегл / СтрокаСписанногоВозврата.СуммаСписания * СуммаСписания;
										СтрокаСписанногоВозврата.СуммаСписания = СтрокаСписанногоВозврата.СуммаСписания - СуммаСписания;
										СтрокаСписанногоВозврата.СуммаСписанияРегл = СтрокаСписанногоВозврата.СуммаСписанияРегл - СуммаСписанияРегл;
										СтрокаОстатка.Долг = 0;
									ИначеЕсли СтрокаСписанногоВозврата.СуммаСписания < -СтрокаОстатка.Долг Тогда
										СтрокаОстатка.Долг = СтрокаОстатка.Долг + СтрокаСписанногоВозврата.СуммаСписания;
										СуммаСписания = СтрокаСписанногоВозврата.СуммаСписания;
										СтрокаСписанногоВозврата.СуммаСписания = 0;
										СтрокаСписанногоВозврата.СуммаСписанияРегл = 0;
									КонецЕсли;
									
									// Долг
									НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
									ЗаписьНабора = НаборЗаписей.Добавить();
									ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
									ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
									ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
									ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
									ЗаписьНабора.Долг              = СуммаСписания;
									
									ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
									
									// КОплате
									НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
									ЗаписьНабора = НаборЗаписей.Добавить();
									ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
									ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
									ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
									ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
									ЗаписьНабора.КОплате           = СуммаСписания;
									
									ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
								
								КонецЦикла;
								
							КонецЕсли;
							
						КонецЦикла; // Выборка строк остатка
						
						Если ТаблицаСписанныхВозвратов.Итог("СуммаСписания") > 0 Тогда
							
							Для Каждого СтрокаСписанногоВозврата Из ТаблицаСписанныхВозвратов Цикл
							
								НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
								ЗаписьНабора = НаборЗаписей.Добавить();
								ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
								ЗаписьНабора.ДатаПлатежа       = '00010101000000';
								ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
								ЗаписьНабора.РасчетныйДокумент = СтрокаСписанногоВозврата.РасчетныйДокумент;
								ЗаписьНабора.Предоплата        = СтрокаСписанногоВозврата.СуммаСписания;
								ЗаписьНабора.ПредоплатаРегл	   = СтрокаСписанногоВозврата.СуммаСписанияРегл;
								
								ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
								
								ЗаписьНабора.ПредоплатаРегл	   = 0;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли; // Распределение суммы возвратов на долг...
					
					// Остаток нераспределенной суммы документа записываем в ресурс "КОплате" по датам платежа.
					Если СуммаКРаспределениюКВозврату > 0 Тогда
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = НачалоДня(Выборка.ДатаПлатежа);
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
						ЗаписьНабора.РасчетныйДокумент = РасчетныйДокументПоРегистратору;
						ЗаписьНабора.КОплате           = СуммаКРаспределениюКВозврату;
						
						ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
						
					КонецЕсли;
					
					
					// Списываем отрицательные остатки по ресурсу "КПоступлению" на сумму документа
					СуммаКРаспределениюКПоступлению = Выборка.СуммаПоГрафику;
					Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
						СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
						
						Если СуммаКРаспределениюКПоступлению <= 0 Тогда
							Прервать;
						КонецЕсли;
						
						Если СтрокаОстатка.КПоступлению < 0 Тогда
							
							Если СуммаКРаспределениюКПоступлению >= -СтрокаОстатка.КПоступлению Тогда
								СуммаКРаспределениюКПоступлению = СуммаКРаспределениюКПоступлению + СтрокаОстатка.КПоступлению;
								СуммаСписания = -СтрокаОстатка.КПоступлению;
								СтрокаОстатка.КПоступлению = 0;
							ИначеЕсли СуммаКРаспределениюКПоступлению < -СтрокаОстатка.КПоступлению Тогда
								СтрокаОстатка.КПоступлению = СтрокаОстатка.КПоступлению + СуммаКРаспределениюКПоступлению;
								СуммаСписания = СуммаКРаспределениюКПоступлению;
								СуммаКРаспределениюКПоступлению = 0;
							КонецЕсли;
							
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
							ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
							ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
							ЗаписьНабора.КПоступлению      = СуммаСписания;
							
							ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
							
						КонецЕсли;
						
					КонецЦикла; // Выборка строк остатка
					
					// Остаток нераспределенной суммы документа записываем в ресурс "КПоступлению" по датам платежа.
					Если СуммаКРаспределениюКПоступлению > 0 Тогда
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = Выборка.ДатаПлатежа;
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
						ЗаписьНабора.РасчетныйДокумент = РасчетныйДокументПоРегистратору;
						ЗаписьНабора.КПоступлению      = СуммаКРаспределениюКПоступлению;
						
						ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
						
					КонецЕсли;
					
				// При расчетах по договору сумму документа запишем в ресурс "КПоступлению" по датам оплаты.
				ИначеЕсли РасчетыПоДоговору Тогда
					
					НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
					ЗаписьНабора = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
					ЗаписьНабора.ДатаПлатежа       = Выборка.ДатаПлатежа;
					ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
					ЗаписьНабора.РасчетныйДокумент = РасчетныйДокументПоРегистратору;
					ЗаписьНабора.КПоступлению      = Выборка.СуммаПоГрафику;
					
					ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
					
				КонецЕсли;

				
			КонецЕсли;
			
			Если КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Получить(Выборка.Регистратор) = Неопределено Тогда
				КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Вставить(Выборка.Регистратор, Истина);
			Иначе
				КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Очистить();
				СформироватьТаблицуОстатковПоАналитикеОтсортированную(ТаблицаОстатков, СтруктураПоискаОстатков, ТаблицаОстатковПоАналитикеОтсортированная);
				КэшКонтроляДублейДокументовДляОбновленияТаблицыОстатков.Вставить(Выборка.Регистратор, Истина);
			КонецЕсли;
			
			Если Выборка.ВидДвижения = ВидДвиженияНакопления.Приход И Выборка.Сумма > 0 Тогда // Вариант 1. "Оплата поставщику".
				
				ТаблицаОплат.Очистить();
				ТаблицаОплатВычитание.Очистить();
				
				// Списываем положительные остатки по ресурсу "КОплате" на сумму документа,
				// запоминаем даты платежа и суммы по датам в таблице оплат
				СуммаКРаспределениюОплата = Выборка.Сумма;
				Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
					СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
					
					Если СуммаКРаспределениюОплата <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаОстатка.КОплате < 0 Тогда
						
						Если СуммаКРаспределениюОплата >= -СтрокаОстатка.КОплате Тогда
							СуммаКРаспределениюОплата = СуммаКРаспределениюОплата + СтрокаОстатка.КОплате;
							СуммаСписания = -СтрокаОстатка.КОплате;
							СтрокаОстатка.КОплате = 0;
						ИначеЕсли СуммаКРаспределениюОплата < -СтрокаОстатка.КОплате Тогда
							СтрокаОстатка.КОплате = СтрокаОстатка.КОплате + СуммаКРаспределениюОплата;
							СуммаСписания = СуммаКРаспределениюОплата;
							СуммаКРаспределениюОплата = 0;
						КонецЕсли;
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
						ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
						ЗаписьНабора.КОплате           = СуммаСписания;
						
						Оплата = ТаблицаОплат.Добавить();
						Оплата.ДатаПлатежа = СтрокаОстатка.ДатаПлатежа;
						Оплата.Сумма       = СуммаСписания;
						
						ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
						
					КонецЕсли;
					
				КонецЦикла; // Выборка строк остатка
				
				// Добавляем в таблицу оплат несписанную сумму документа с пустой датой платежа
				// и записываем в ресурс к возврату
				Если СуммаКРаспределениюОплата > 0 Тогда
					
					Если РасчетыПоЗаказуПоставщику Тогда
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = '00010101000000';
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
						ЗаписьНабора.РасчетныйДокумент = Выборка.Регистратор;
						ЗаписьНабора.КВозврату         = СуммаКРаспределениюОплата;
						ЗаписьНабора.ПредоплатаРегл	   = ?(Выборка.Сумма = СуммаКРаспределениюОплата ИЛИ Выборка.Сумма = 0,
															Выборка.СуммаРегл,
															Выборка.СуммаРегл / Выборка.Сумма * СуммаКРаспределениюОплата
															);
						
						ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
						
					Иначе
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = '00010101000000';
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
						ЗаписьНабора.РасчетныйДокумент = Выборка.Регистратор;
						ЗаписьНабора.Предоплата        = СуммаКРаспределениюОплата;
						ЗаписьНабора.ПредоплатаРегл	   = ?(Выборка.Сумма = СуммаКРаспределениюОплата ИЛИ Выборка.Сумма = 0,
															Выборка.СуммаРегл,
															Выборка.СуммаРегл / Выборка.Сумма * СуммаКРаспределениюОплата
															);
						
						ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
						
					КонецЕсли;
					
				КонецЕсли;
				
				// Списываем положительные остатки по ресурсу "Долг" на сумму документа,
				// вычитаем из таблицы оплат
				СуммаКРаспределениюДолг = Выборка.Сумма;
				Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
					СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
					
					Если СуммаКРаспределениюДолг <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаОстатка.Долг < 0 Тогда
						
						Если СуммаКРаспределениюДолг >= -СтрокаОстатка.Долг Тогда
							СуммаКРаспределениюДолг = СуммаКРаспределениюДолг + СтрокаОстатка.Долг;
							СуммаСписания = -СтрокаОстатка.Долг;
							СтрокаОстатка.Долг = 0;
						ИначеЕсли СуммаКРаспределениюДолг < -СтрокаОстатка.Долг Тогда
							СтрокаОстатка.Долг = СтрокаОстатка.Долг + СуммаКРаспределениюДолг;
							СуммаСписания = СуммаКРаспределениюДолг;
							СуммаКРаспределениюДолг = 0;
						КонецЕсли;
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
						ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
						ЗаписьНабора.Долг              = СуммаСписания;
						
						ОплатаВычитание = ТаблицаОплатВычитание.Добавить();
						ОплатаВычитание.ДатаПлатежа = СтрокаОстатка.ДатаПлатежа;
						ОплатаВычитание.Сумма       = СуммаСписания;
						
						ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
						
					КонецЕсли;
					
				КонецЦикла; // Выборка строк остатка
				
				// Распределение суммы таблицы ОплатаВычитание на таблицу Оплата
				СуммаРаспределения = ТаблицаОплатВычитание.Итог("Сумма");
				Для Каждого СтрокаОстатка Из ТаблицаОплат Цикл
					Если СуммаРаспределения >= СтрокаОстатка.Сумма Тогда
						СуммаРаспределения = СуммаРаспределения - СтрокаОстатка.Сумма;
						СуммаСписания = СтрокаОстатка.Сумма;
						СтрокаОстатка.Сумма = 0;
					ИначеЕсли СуммаРаспределения < СтрокаОстатка.Сумма Тогда
						СтрокаОстатка.Сумма = СтрокаОстатка.Сумма - СуммаРаспределения;
						СуммаСписания = СуммаРаспределения;
						СуммаРаспределения = 0;
					КонецЕсли;
				КонецЦикла;
				
				// Остаток таблицы оплат записываем в ресурс "Предоплата" по датам платежа
				Для Каждого Оплата Из ТаблицаОплат Цикл
					Если Оплата.Сумма <> 0 Тогда
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = '00010101000000';
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
						ЗаписьНабора.РасчетныйДокумент = Выборка.Регистратор;
						ЗаписьНабора.Предоплата        = Оплата.Сумма;
						ЗаписьНабора.ПредоплатаРегл    = ?(Выборка.Сумма = Оплата.Сумма ИЛИ Выборка.Сумма = 0,
															Выборка.СуммаРегл,
															Выборка.СуммаРегл / Выборка.Сумма * Оплата.Сумма
															);
						
						ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
						
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли Выборка.ВидДвижения = ВидДвиженияНакопления.Приход И Выборка.Сумма < 0 Тогда // Вариант 2. "Возврат денежных средств от поставщика".
				
				// Списываем отрицательные остатки по ресурсу "КВозврату" на сумму документа
				СуммаКРаспределениюКВозврату = -Выборка.Сумма;
				Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
					СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
					
					Если СуммаКРаспределениюКВозврату <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаОстатка.КВозврату > 0 Тогда
						
						Если СуммаКРаспределениюКВозврату >= СтрокаОстатка.КВозврату Тогда
							СуммаСписания = СтрокаОстатка.КВозврату;
							СуммаКРаспределениюКВозврату = СуммаКРаспределениюКВозврату - СуммаСписания;
						Иначе
							СуммаСписания = СуммаКРаспределениюКВозврату;
							СуммаКРаспределениюКВозврату = 0;
						КонецЕсли;
						Если СтрокаОстатка.КВозврату + СтрокаОстатка.Предоплата = СуммаСписания Тогда
							СуммаСписанияРегл = СтрокаОстатка.ПредоплатаРегл;
							СтрокаОстатка.КВозврату = 0;
							СтрокаОстатка.ПредоплатаРегл = 0;
						Иначе
							СуммаСписанияРегл = СтрокаОстатка.ПредоплатаРегл / (СтрокаОстатка.КВозврату + СтрокаОстатка.Предоплата) * СуммаСписания;
							СтрокаОстатка.КВозврату = СтрокаОстатка.КВозврату - СуммаСписания;
							СтрокаОстатка.ПредоплатаРегл = СтрокаОстатка.ПредоплатаРегл - СуммаСписанияРегл;
						КонецЕсли;
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = '00010101000000';
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
						ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
						ЗаписьНабора.КВозврату         = -СуммаСписания;
						ЗаписьНабора.ПредоплатаРегл    = -СуммаСписанияРегл;
						
						ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
						
					КонецЕсли;
					
				КонецЦикла; // Выборка строк остатка
				
				// Списываем отрицательные остатки по ресурсу "Предоплата" на сумму документа
				// за минусом суммы списанной суммы по ресурсу "КВозврату"
				СуммаКРаспределениюПредоплата = СуммаКРаспределениюКВозврату;
				Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
					СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
					
					Если СуммаКРаспределениюПредоплата <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаОстатка.Предоплата > 0 Тогда
						
						Если СуммаКРаспределениюПредоплата >= СтрокаОстатка.Предоплата Тогда
							СуммаСписания = СтрокаОстатка.Предоплата;
							СуммаКРаспределениюПредоплата = СуммаКРаспределениюПредоплата - СуммаСписания;
						Иначе
							СуммаСписания = СуммаКРаспределениюПредоплата;
							СуммаКРаспределениюПредоплата = 0;
						КонецЕсли;
						Если СтрокаОстатка.КВозврату + СтрокаОстатка.Предоплата = СуммаСписания Тогда
							СуммаСписанияРегл = СтрокаОстатка.ПредоплатаРегл;
							СтрокаОстатка.Предоплата = 0;
							СтрокаОстатка.ПредоплатаРегл = 0;
						Иначе
							СуммаСписанияРегл = СтрокаОстатка.ПредоплатаРегл / (СтрокаОстатка.КВозврату + СтрокаОстатка.Предоплата) * СуммаСписания;
							СтрокаОстатка.Предоплата = СтрокаОстатка.Предоплата - СуммаСписания;
							СтрокаОстатка.ПредоплатаРегл = СтрокаОстатка.ПредоплатаРегл - СуммаСписанияРегл;
						КонецЕсли;
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = '00010101000000';
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
						ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
						ЗаписьНабора.Предоплата        = -СуммаСписания;
						ЗаписьНабора.ПредоплатаРегл    = -СуммаСписанияРегл;
						
						ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
						
					КонецЕсли;
					
				КонецЦикла; // Выборка строк остатка
				
				// Остаток нераспределенной суммы документа записываем в ресурс "КВозврату". Вид движения: Приход (со знаком минус)
				Если СуммаКРаспределениюПредоплата > 0 Тогда
					
					НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
					ЗаписьНабора = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
					ЗаписьНабора.ДатаПлатежа       = '00010101000000';
					ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Приход;
					ЗаписьНабора.РасчетныйДокумент = РасчетныйДокументПоРегистратору;
					ЗаписьНабора.КОплате         = -СуммаКРаспределениюПредоплата;
					ЗаписьНабора.Долг            = -СуммаКРаспределениюПредоплата;
					
					ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
					
				КонецЕсли;
				
			ИначеЕсли Выборка.ВидДвижения = ВидДвиженияНакопления.Расход И Выборка.Сумма > 0 Тогда // Вариант 3. "Поступление товаров от поставщика".
				
				ТаблицаОплат.Очистить();
				ТаблицаОплатВычитание.Очистить();
				
				// При расчетах по договору ограничим область поиска остатков по ресурсу "КПоступлению" заказом, по которому выполняется поступление.
				Если РасчетыПоДоговору Тогда
					СтруктураПоискаОстатков.Вставить("РасчетныйДокумент", ?(ЗначениеЗаполнено(Выборка.ЗакупкаПоЗаказу), Выборка.ЗакупкаПоЗаказу, РасчетныйДокументПоРегистратору));
					СформироватьТаблицуОстатковПоАналитикеОтсортированную(ТаблицаОстатков, СтруктураПоискаОстатков, ТаблицаОстатковПоАналитикеОтсортированная);
				КонецЕсли;
				
				// Списываем положительные остатки по ресурсу "КПоступлению" на сумму документа,
				// запоминаем даты платежа и суммы по датам в таблице оплат
				СуммаКРаспределениюКПоступлению = Выборка.Сумма;
				Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
					СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
					
					Если СуммаКРаспределениюКПоступлению <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаОстатка.КПоступлению > 0 Тогда
						
						Если СуммаКРаспределениюКПоступлению >= СтрокаОстатка.КПоступлению Тогда
							СуммаКРаспределениюКПоступлению = СуммаКРаспределениюКПоступлению - СтрокаОстатка.КПоступлению;
							СуммаСписания = СтрокаОстатка.КПоступлению;
							СтрокаОстатка.КПоступлению = 0;
						ИначеЕсли СуммаКРаспределениюКПоступлению < СтрокаОстатка.КПоступлению Тогда
							СтрокаОстатка.КПоступлению = СтрокаОстатка.КПоступлению - СуммаКРаспределениюКПоступлению;
							СуммаСписания = СуммаКРаспределениюКПоступлению;
							СуммаКРаспределениюКПоступлению = 0;
						КонецЕсли;
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
						ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
						ЗаписьНабора.КПоступлению      = СуммаСписания;
						
						Оплата = ТаблицаОплат.Добавить();
						Оплата.ДатаПлатежа = СтрокаОстатка.ДатаПлатежа;
						Оплата.Сумма       = СуммаСписания;
						
						ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
						
					КонецЕсли;
					
				КонецЦикла; // Выборка строк остатка
				
				// Добавляем в таблицу оплат несписанную сумму документа с датой платежа из выборки (проставлена в документе поступления)
				Если СуммаКРаспределениюКПоступлению > 0 Тогда
					
					Оплата = ТаблицаОплат.Добавить();
					Оплата.ДатаПлатежа = Выборка.ДатаПлатежа;
					Оплата.Сумма = СуммаКРаспределениюКПоступлению;
					
					Если РасчетыПоЗаказуПоставщику Тогда
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = Выборка.ДатаПлатежа;
						ЗаписьНабора.РасчетныйДокумент = Выборка.ЗаказПоставщику;
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
						ЗаписьНабора.КПоступлению      = СуммаКРаспределениюКПоступлению;
						
						ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
						
						СуммаКРаспределениюКПоступлению = 0;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если РасчетыПоДоговору Тогда
					СтруктураПоискаОстатков.Удалить("РасчетныйДокумент");
					СформироватьТаблицуОстатковПоАналитикеОтсортированную(ТаблицаОстатков, СтруктураПоискаОстатков, ТаблицаОстатковПоАналитикеОтсортированная);
				КонецЕсли;
				
				// Списываем отрицательные остатки по ресурсу "Предоплата" на сумму документа,
				// вычитаем из таблицы оплат
				СуммаКРаспределениюПредоплата = Выборка.Сумма;
				Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
					СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
					
					Если СуммаКРаспределениюПредоплата <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаОстатка.Предоплата > 0 Тогда
						
						Если СуммаКРаспределениюПредоплата >= СтрокаОстатка.Предоплата Тогда
							СуммаСписания = СтрокаОстатка.Предоплата;
							СуммаКРаспределениюПредоплата = СуммаКРаспределениюПредоплата - СуммаСписания;
						Иначе
							СуммаСписания = СуммаКРаспределениюПредоплата;
							СуммаКРаспределениюПредоплата = 0;
						КонецЕсли;
						Если СтрокаОстатка.КВозврату + СтрокаОстатка.Предоплата = СуммаСписания Тогда
							СуммаСписанияРегл = СтрокаОстатка.ПредоплатаРегл;
							СтрокаОстатка.Предоплата = 0;
							СтрокаОстатка.ПредоплатаРегл = 0;
						Иначе
							СуммаСписанияРегл = СтрокаОстатка.ПредоплатаРегл / (СтрокаОстатка.КВозврату + СтрокаОстатка.Предоплата) * СуммаСписания;
							СтрокаОстатка.Предоплата = СтрокаОстатка.Предоплата - СуммаСписания;
							СтрокаОстатка.ПредоплатаРегл = СтрокаОстатка.ПредоплатаРегл - СуммаСписанияРегл;
						КонецЕсли;
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = '00010101000000';
						ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
						ЗаписьНабора.Предоплата        = СуммаСписания;
						ЗаписьНабора.ПредоплатаРегл    = СуммаСписанияРегл;
						
						ОплатаВычитание = ТаблицаОплатВычитание.Добавить();
						ОплатаВычитание.ДатаПлатежа = СтрокаОстатка.ДатаПлатежа;
						ОплатаВычитание.Сумма       = СуммаСписания;
						
						ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
						
					КонецЕсли;
					
				КонецЦикла; // Выборка строк остатка
				
				// Распределение суммы таблицы ОплатаВычитание на таблицу Оплата
				СуммаРаспределения = ТаблицаОплатВычитание.Итог("Сумма");
				Для Каждого СтрокаОстатка Из ТаблицаОплат Цикл
					Если СуммаРаспределения >= СтрокаОстатка.Сумма Тогда
						СуммаРаспределения = СуммаРаспределения - СтрокаОстатка.Сумма;
						СуммаСписания = СтрокаОстатка.Сумма;
						СтрокаОстатка.Сумма = 0;
					ИначеЕсли СуммаРаспределения < СтрокаОстатка.Сумма Тогда
						СтрокаОстатка.Сумма = СтрокаОстатка.Сумма - СуммаРаспределения;
						СуммаСписания = СуммаРаспределения;
						СуммаРаспределения = 0;
					КонецЕсли;
				КонецЦикла;
				
				// Остаток таблицы оплат записываем в ресурсы "Долг" и "КОплате" по датам платежа,
				// сторнируем суммы "КОплате", пероначально сформированные заказом...
				// Сторнирование КОплате в таблице остатков не должно делаться отдельной строкой
				Для Каждого Оплата Из ТаблицаОплат Цикл
					
					Если Оплата.Сумма <> 0 Тогда
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = Оплата.ДатаПлатежа;
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
						ЗаписьНабора.РасчетныйДокумент = РасчетныйДокументПоРегистратору;
						ЗаписьНабора.Долг              = Оплата.Сумма;
						ЗаписьНабора.КОплате           = Оплата.Сумма;
						
						ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
						
						Если РасчетыПоЗаказуПоставщику Тогда
							
							// Сторнирование суммы "КОплате"
							НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
							ЗаписьНабора = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
							ЗаписьНабора.ДатаПлатежа       = Оплата.ДатаПлатежа;
							ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
							ЗаписьНабора.РасчетныйДокумент = Выборка.ЗаказПоставщику;
							ЗаписьНабора.КОплате           = -Оплата.Сумма;
							
							// Убираем суммы КОплате из таблицы оплат
							СтруктураПоискаОстатковСторно = Новый Структура;
							СтруктураПоискаОстатковСторно.Вставить("ЗаказПоставщику");
							СтруктураПоискаОстатковСторно.Вставить("Валюта");
							СтруктураПоискаОстатковСторно.Вставить("ДатаПлатежа");
							СтруктураПоискаОстатковСторно.Вставить("РасчетныйДокумент");
							
							ЗаполнитьЗначенияСвойств(СтруктураПоискаОстатковСторно, Выборка);
							СтруктураПоискаОстатковСторно.ДатаПлатежа = Оплата.ДатаПлатежа;
							СтруктураПоискаОстатковСторно.РасчетныйДокумент = Выборка.ЗаказПоставщику;
							
							ТаблицаОстатковПоАналитикеОтсортированнаяСторно = ТаблицаОстатковПоАналитикеОтсортированная.СкопироватьКолонки();
							СформироватьТаблицуОстатковПоАналитикеОтсортированную(ТаблицаОстатков, СтруктураПоискаОстатковСторно, ТаблицаОстатковПоАналитикеОтсортированнаяСторно);
							
							СуммаКРаспределениюСторно = Оплата.Сумма;
							Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированнаяСторно Цикл
								СтрокаОстаткаСторно = СтрокаТЗ.СтрокаОстатка;
								
								Если СуммаКРаспределениюСторно <= 0 Тогда
									Прервать;
								КонецЕсли;
								
								Если СтрокаОстаткаСторно.КОплате < 0 Тогда
									
									Если СуммаКРаспределениюСторно >= -СтрокаОстаткаСторно.КОплате Тогда
										СуммаКРаспределениюСторно = СуммаКРаспределениюСторно + СтрокаОстаткаСторно.КОплате;
										СтрокаОстаткаСторно.КОплате = 0;
									ИначеЕсли СуммаКРаспределениюСторно < -СтрокаОстаткаСторно.КОплате Тогда
										СтрокаОстаткаСторно.КОплате = СтрокаОстаткаСторно.КОплате + СуммаКРаспределениюСторно;
										СуммаКРаспределениюСторно = 0;
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла; // Выборка строк таблицы оплат
				
			ИначеЕсли Выборка.ВидДвижения = ВидДвиженияНакопления.Расход И Выборка.Сумма < 0 Тогда // Вариант 4. "Возврат товаров поставщику".
				
				// Списываем положительные остатки по ресурсу "Долг" на сумму документа
				СуммаКРаспределениюДолг = -Выборка.Сумма;
				Для Каждого СтрокаТЗ Из ТаблицаОстатковПоАналитикеОтсортированная Цикл
					СтрокаОстатка = СтрокаТЗ.СтрокаОстатка;
					
					Если СуммаКРаспределениюДолг <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					Если СтрокаОстатка.Долг < 0 Тогда
						
						Если СуммаКРаспределениюДолг >= -СтрокаОстатка.Долг Тогда
							СуммаКРаспределениюДолг = СуммаКРаспределениюДолг + СтрокаОстатка.Долг;
							СуммаСписания = -СтрокаОстатка.Долг;
							СтрокаОстатка.Долг = 0;
						ИначеЕсли СуммаКРаспределениюДолг < -СтрокаОстатка.Долг Тогда
							СтрокаОстатка.Долг = СтрокаОстатка.Долг + СуммаКРаспределениюДолг;
							СуммаСписания = СуммаКРаспределениюДолг;
							СуммаКРаспределениюДолг = 0;
						КонецЕсли;
						
						НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
						ЗаписьНабора = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
						ЗаписьНабора.ДатаПлатежа       = СтрокаОстатка.ДатаПлатежа;
						ЗаписьНабора.РасчетныйДокумент = СтрокаОстатка.РасчетныйДокумент;
						ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
						ЗаписьНабора.Долг              = -СуммаСписания;
						
						ПроверитьСтрокуОстаткаНаВозможностьУдаления(СтрокаОстатка, СоответствиеСтрокДляУдаления);
						
					КонецЕсли;
					
				КонецЦикла; // Выборка строк остатка
				
				// Остаток нераспределенной суммы документа записываем в ресурс "КВозврату". Вид движения: Приход (со знаком минус)
				Если СуммаКРаспределениюДолг > 0 Тогда
					
					НаборЗаписей = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам;
					ЗаписьНабора = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьНабора, Выборка);
					ЗаписьНабора.ДатаПлатежа       = '00010101000000';
					ЗаписьНабора.ВидДвижения       = ВидДвиженияНакопления.Расход;
					ЗаписьНабора.РасчетныйДокумент = РасчетныйДокументПоРегистратору;
					ЗаписьНабора.КВозврату         = -СуммаКРаспределениюДолг;
					
					ДобавитьЗаписьВТаблицуОстатков(ТаблицаОстатков, ЗаписьНабора);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; // Выборка по детальным записям
		
	КонецЦикла; // Выборка по индексу аналитики
	
	УдалитьСтрокиСНулевымиСуммами(ТаблицаОстатков, СоответствиеСтрокДляУдаления);
	
	ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам.Свернуть(
		" Период
		|,Регистратор
		|,Активность
		|,ВидДвижения
		|,МоментВремени
		|,АналитикаУчетаПоПартнерам
		|,ЗаказПоставщику
		|,РасчетныйДокумент
		|,Валюта
		|,ДатаПлатежа
		|,ХозяйственнаяОперация
		|",
		" КПоступлению
		|,КОплате
		|,КВозврату
		|,Долг
		|,Предоплата
		|,ПредоплатаРегл"
	);
	
	Движения.РасчетыСПоставщикамиПоДокументам.Загрузить(ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСПоставщикамиПоДокументам);
	
	ЗаписатьНаборыЗаписей(Движения);
	
КонецПроцедуры

Функция УстановленаБлокировкаТаблицыРасчетыСКлиентами(КлючАналитики, ПрерыватьВыполнениеПриНеудачнойБлокировке)
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСКлиентами");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("АналитикаУчетаПоПартнерам", КлючАналитики);
	
	Если ПрерыватьВыполнениеПриНеудачнойБлокировке Тогда
		Блокировка.Заблокировать();
		БлокировкаУстановлена = Истина;
	Иначе
		Попытка
			Блокировка.Заблокировать();
			БлокировкаУстановлена = Истина;
		Исключение
			БлокировкаУстановлена = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат БлокировкаУстановлена;
	
КонецФункции

Функция УстановленаБлокировкаТаблицыРасчетыСПоставщиками(КлючАналитики, ПрерыватьВыполнениеПриНеудачнойБлокировке)
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыСПоставщиками");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("АналитикаУчетаПоПартнерам", КлючАналитики);
	
	Если ПрерыватьВыполнениеПриНеудачнойБлокировке Тогда
		Блокировка.Заблокировать();
		БлокировкаУстановлена = Истина;
	Иначе
		Попытка
			Блокировка.Заблокировать();
			БлокировкаУстановлена = Истина;
		Исключение
			БлокировкаУстановлена = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат БлокировкаУстановлена;
	
КонецФункции

Процедура СформироватьВременнуюТаблицуДляГруппировкиПоИндексуРасчетовСКлиентами(МенеджерВременныхТаблиц, НачальныеГраницы)
	
	ТекстЗапросаПоИндексам = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.ЗаказКлиента КАК ЗаказКлиента,
	|	РасчетыСКлиентами.Валюта       КАК Валюта
	|
	|ИЗ
	|	Последовательность.ПроведениеПоРасчетамСКлиентами КАК Последовательность
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|	ПО
	|		Последовательность.Регистратор = РасчетыСКлиентами.Регистратор
	|		И Последовательность.АналитикаУчетаПоПартнерам = РасчетыСКлиентами.АналитикаУчетаПоПартнерам
	|		И РасчетыСКлиентами.Активность
	|
	|ГДЕ
	|	Последовательность.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И Последовательность.Период >= &НачальныеГраницыПериод
	|";
	
	ЗапросПоИндексам = Новый Запрос;
	ЗапросПоИндексам.Текст = ТекстЗапросаПоИндексам;
	ЗапросПоИндексам.УстановитьПараметр("АналитикаУчетаПоПартнерам", НачальныеГраницы.КлючАналитики);
	ЗапросПоИндексам.УстановитьПараметр("НачальныеГраницыПериод", НачальныеГраницы.Период);
	
	ТаблицаИндексов = ЗапросПоИндексам.Выполнить().Выгрузить();
	
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаИндексов,"Индекс");
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаИндексов.Индекс       КАК НомерСтроки,
	|	ТаблицаИндексов.ЗаказКлиента КАК ЗаказКлиента,
	|	ТаблицаИндексов.Валюта       КАК Валюта
	|
	|ПОМЕСТИТЬ ИндексыПоБазе
	|ИЗ
	|	&ТаблицаИндексов КАК ТаблицаИндексов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказКлиента,
	|	Валюта
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаИндексов", ТаблицаИндексов);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СформироватьВременнуюТаблицуДляГруппировкиПоИндексуРасчетовСПоставщиками(МенеджерВременныхТаблиц, НачальныеГраницы)
	
	ТекстЗапросаПоИндексам = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.ЗаказПоставщику КАК ЗаказПоставщику,
	|	РасчетыСПоставщиками.Валюта          КАК Валюта
	|
	|ИЗ
	|	Последовательность.ПроведениеПоРасчетамСПоставщиками КАК Последовательность
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|	ПО
	|		Последовательность.Регистратор = РасчетыСПоставщиками.Регистратор
	|		И Последовательность.АналитикаУчетаПоПартнерам = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
	|		И РасчетыСПоставщиками.Активность
	|
	|ГДЕ
	|	Последовательность.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И Последовательность.Период >= &НачальныеГраницыПериод
	|";
	
	ЗапросПоИндексам = Новый Запрос;
	ЗапросПоИндексам.Текст = ТекстЗапросаПоИндексам;
	ЗапросПоИндексам.УстановитьПараметр("АналитикаУчетаПоПартнерам", НачальныеГраницы.КлючАналитики);
	ЗапросПоИндексам.УстановитьПараметр("НачальныеГраницыПериод", НачальныеГраницы.Период);
	
	ТаблицаИндексов = ЗапросПоИндексам.Выполнить().Выгрузить();
	
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаИндексов,"Индекс");
	
	ТекстЗапроса =
	"
	|ВЫБРАТЬ
	|	ТаблицаИндексов.Индекс          КАК НомерСтроки,
	|	ТаблицаИндексов.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ТаблицаИндексов.Валюта          КАК Валюта
	|
	|ПОМЕСТИТЬ ИндексыПоБазе
	|ИЗ
	|	&ТаблицаИндексов КАК ТаблицаИндексов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказПоставщику,
	|	Валюта
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаИндексов", ТаблицаИндексов);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПолучитьТаблицуОстатковРасчетовСКлиентами(НачальныеГраницы)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.ЗаказКлиента      КАК ЗаказКлиента,
	|	РасчетыСКлиентами.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыСКлиентами.Валюта            КАК Валюта,
	|	РасчетыСКлиентами.ДатаПлатежа       КАК ДатаПлатежа,
	|	МАКСИМУМ(РасчетыСКлиентами.Период)  КАК Период
	|
	|ПОМЕСТИТЬ МаксПериодОстатков
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентами
	|
	|ГДЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И РасчетыСКлиентами.Период < &НачальныеГраницыПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.ЗаказКлиента,
	|	РасчетыСКлиентами.РасчетныйДокумент,
	|	РасчетыСКлиентами.ДатаПлатежа,
	|	РасчетыСКлиентами.Валюта
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(ПериодыОстатков.Период), ДАТАВРЕМЯ(1,1,1,1,1,1))  КАК МинПериод,
	|	ЕСТЬNULL(МАКСИМУМ(ПериодыОстатков.Период), ДАТАВРЕМЯ(1,1,1,1,1,1)) КАК МаксПериод
	|
	|ИЗ
	|	МаксПериодОстатков КАК ПериодыОстатков
	|";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", НачальныеГраницы.КлючАналитики);
	Запрос.УстановитьПараметр("НачальныеГраницыПериод", НачальныеГраницы.Период);
	
	ГраницыОстатков = Запрос.Выполнить().Выбрать();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ЗаказКлиента               КАК ЗаказКлиента,
	|	РасчетыСКлиентами.РасчетныйДокумент          КАК РасчетныйДокумент,
	|	РасчетыСКлиентами.Валюта                     КАК Валюта,
	|	РасчетыСКлиентами.ДатаПлатежа                КАК ДатаПлатежа,
	|	РасчетыСКлиентами.Период                     КАК Период,
	|	ПроведениеПоРасчетамСКлиентами.МоментВремени КАК МоментВремени,
	|	
	|	ЕСТЬNULL(РасчетыСКлиентами.КОтгрузкеКонечныйОстаток,      0) КАК КОтгрузке,
	|	ЕСТЬNULL(РасчетыСКлиентами.КОплатеКонечныйОстаток,        0) КАК КОплате,
	|	ЕСТЬNULL(РасчетыСКлиентами.КВозвратуКонечныйОстаток,      0) КАК КВозврату,
	|	ЕСТЬNULL(РасчетыСКлиентами.ДолгКонечныйОстаток,           0) КАК Долг,
	|	ЕСТЬNULL(РасчетыСКлиентами.ПредоплатаКонечныйОстаток,     0) КАК Предоплата,
	|	ЕСТЬNULL(РасчетыСКлиентами.ПредоплатаРеглКонечныйОстаток, 0) КАК ПредоплатаРегл
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.ОстаткиИОбороты(&НачалоПериода,&ГраницаКонецПериода, Секунда, ,
	|		АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	) КАК РасчетыСКлиентами
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		МаксПериодОстатков КАК МаксПериодОстатков
	|	ПО
	|		РасчетыСКлиентами.ЗаказКлиента        = МаксПериодОстатков.ЗаказКлиента
	|		И РасчетыСКлиентами.РасчетныйДокумент = МаксПериодОстатков.РасчетныйДокумент
	|		И РасчетыСКлиентами.Валюта            = МаксПериодОстатков.Валюта
	|		И РасчетыСКлиентами.ДатаПлатежа       = МаксПериодОстатков.ДатаПлатежа
	|		И РасчетыСКлиентами.Период            = МаксПериодОстатков.Период
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Последовательность.ПроведениеПоРасчетамСКлиентами КАК ПроведениеПоРасчетамСКлиентами
	|	ПО
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам = ПроведениеПоРасчетамСКлиентами.АналитикаУчетаПоПартнерам
	|		И РасчетыСКлиентами.РасчетныйДокумент = ПроведениеПоРасчетамСКлиентами.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСКлиентами.ЗаказКлиента,
	|	РасчетыСКлиентами.Валюта
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|	
	|УНИЧТОЖИТЬ МаксПериодОстатков
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", НачальныеГраницы.КлючАналитики);
	Если ГраницыОстатков.Следующий() Тогда
		Запрос.УстановитьПараметр("НачалоПериода", ГраницыОстатков.МинПериод);
		Запрос.УстановитьПараметр("ГраницаКонецПериода", Новый Граница(ГраницыОстатков.МаксПериод, ВидГраницы.Включая));
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода", Дата('00010101'));
		Запрос.УстановитьПараметр("ГраницаКонецПериода", Дата('00010101'));
	КонецЕсли;
	
	ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
	
	Индексы = ТаблицаРасчетов.Индексы;
	Индексы.Добавить("
	|ЗаказКлиента,
	|Валюта
	|");
	
	Возврат ТаблицаРасчетов;
	
КонецФункции

Функция ПолучитьТаблицуОстатковРасчетовСПоставщиками(НачальныеГраницы)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.ЗаказПоставщику   КАК ЗаказПоставщику,
	|	РасчетыСПоставщиками.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыСПоставщиками.Валюта            КАК Валюта,
	|	РасчетыСПоставщиками.ДатаПлатежа       КАК ДатаПлатежа,
	|	МАКСИМУМ(РасчетыСПоставщиками.Период)  КАК Период
	|
	|ПОМЕСТИТЬ МаксПериодОстатков
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщиками
	|
	|ГДЕ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И РасчетыСПоставщиками.Период < &НачальныеГраницыПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.ЗаказПоставщику,
	|	РасчетыСПоставщиками.РасчетныйДокумент,
	|	РасчетыСПоставщиками.ДатаПлатежа,
	|	РасчетыСПоставщиками.Валюта
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(ПериодыОстатков.Период), ДАТАВРЕМЯ(1,1,1,1,1,1))  КАК МинПериод,
	|	ЕСТЬNULL(МАКСИМУМ(ПериодыОстатков.Период), ДАТАВРЕМЯ(1,1,1,1,1,1)) КАК МаксПериод
	|
	|ИЗ
	|	МаксПериодОстатков КАК ПериодыОстатков
	|";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", НачальныеГраницы.КлючАналитики);
	Запрос.УстановитьПараметр("НачальныеГраницыПериод", НачальныеГраницы.Период);
	
	ГраницыОстатков = Запрос.Выполнить().Выбрать();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам  КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ЗаказПоставщику            КАК ЗаказПоставщику,
	|	РасчетыСПоставщиками.РасчетныйДокумент          КАК РасчетныйДокумент,
	|	РасчетыСПоставщиками.Валюта                     КАК Валюта,
	|	РасчетыСПоставщиками.ДатаПлатежа                КАК ДатаПлатежа,
	|	РасчетыСПоставщиками.Период                     КАК Период,
	|	ПроведениеПоРасчетамСПоставщиками.МоментВремени КАК МоментВремени,
	|	
	|	ЕСТЬNULL(РасчетыСПоставщиками.КПоступлениюКонечныйОстаток,   0) КАК КПоступлению,
	|	ЕСТЬNULL(РасчетыСПоставщиками.КОплатеКонечныйОстаток,        0) КАК КОплате,
	|	ЕСТЬNULL(РасчетыСПоставщиками.КВозвратуКонечныйОстаток,      0) КАК КВозврату,
	|	ЕСТЬNULL(РасчетыСПоставщиками.ДолгКонечныйОстаток,           0) КАК Долг,
	|	ЕСТЬNULL(РасчетыСПоставщиками.ПредоплатаКонечныйОстаток,     0) КАК Предоплата,
	|	ЕСТЬNULL(РасчетыСПоставщиками.ПредоплатаРеглКонечныйОстаток, 0) КАК ПредоплатаРегл
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.ОстаткиИОбороты(&НачалоПериода,&ГраницаКонецПериода, Секунда, ,
	|		АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	) КАК РасчетыСПоставщиками
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		МаксПериодОстатков КАК МаксПериодОстатков
	|	ПО
	|		РасчетыСПоставщиками.ЗаказПоставщику     = МаксПериодОстатков.ЗаказПоставщику
	|		И РасчетыСПоставщиками.РасчетныйДокумент = МаксПериодОстатков.РасчетныйДокумент
	|		И РасчетыСПоставщиками.Валюта            = МаксПериодОстатков.Валюта
	|		И РасчетыСПоставщиками.ДатаПлатежа       = МаксПериодОстатков.ДатаПлатежа
	|		И РасчетыСПоставщиками.Период            = МаксПериодОстатков.Период
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Последовательность.ПроведениеПоРасчетамСПоставщиками КАК ПроведениеПоРасчетамСПоставщиками
	|	ПО
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = ПроведениеПоРасчетамСПоставщиками.АналитикаУчетаПоПартнерам
	|		И РасчетыСПоставщиками.РасчетныйДокумент = ПроведениеПоРасчетамСПоставщиками.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетыСПоставщиками.ЗаказПоставщику,
	|	РасчетыСПоставщиками.Валюта
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|	
	|УНИЧТОЖИТЬ МаксПериодОстатков
	|";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", НачальныеГраницы.КлючАналитики);
	Если ГраницыОстатков.Следующий() Тогда
		Запрос.УстановитьПараметр("НачалоПериода", ГраницыОстатков.МинПериод);
		Запрос.УстановитьПараметр("ГраницаКонецПериода", Новый Граница(ГраницыОстатков.МаксПериод, ВидГраницы.Включая));
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода", Дата('00010101'));
		Запрос.УстановитьПараметр("ГраницаКонецПериода", Дата('00010101'));
	КонецЕсли;
	
	ТаблицаРасчетов = Запрос.Выполнить().Выгрузить();
	
	Индексы = ТаблицаРасчетов.Индексы;
	Индексы.Добавить("
	|ЗаказПоставщику,
	|Валюта
	|");
	
	Возврат ТаблицаРасчетов;
	
КонецФункции

Функция ЗапросПоДокументамРасчетовСКлиентами(МенеджерВременныхТаблиц, НачальныеГраницы)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(РасчетыСКлиентами.НомерСтроки) КАК НомерСтроки,
	|	РасчетыСКлиентами.Регистратор КАК Регистратор,
	|	РасчетыСКлиентами.ДатаРегистратора КАК Период,
	|	
	|	РасчетыСКлиентами.ДатаПлатежа КАК ДатаПлатежа,
	|	
	|	РасчетыСКлиентами.ВидДвижения КАК ВидДвижения,
	|	РасчетыСКлиентами.Активность КАК Активность,
	|	
	|	// Измерения
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ЗаказКлиента КАК ЗаказКлиента,
	|	РасчетыСКлиентами.Валюта КАК Валюта,
	|	
	|	// Ресурсы
	|	СУММА(РасчетыСКлиентами.Сумма) КАК Сумма,
	|	СУММА(РасчетыСКлиентами.КОплате) КАК СуммаПоГрафику,
	|	
	|	// Реквизиты
	|	СУММА(РасчетыСКлиентами.СуммаРегл) КАК СуммаРегл,
	|	РасчетыСКлиентами.ПродажаПоЗаказу КАК ПродажаПоЗаказу,
	|	РасчетыСКлиентами.ХозяйственнаяОперация	КАК ХозяйственнаяОперация
	|
	|ИЗ
	|	Последовательность.ПроведениеПоРасчетамСКлиентами КАК Последовательность
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|	ПО
	|		Последовательность.Регистратор = РасчетыСКлиентами.Регистратор
	|		И Последовательность.АналитикаУчетаПоПартнерам = РасчетыСКлиентами.АналитикаУчетаПоПартнерам
	|		И РасчетыСКлиентами.Активность
	|	
	|	// Индекс по базе для расчета итогов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ИндексыПоБазе КАК ИндексыПоБазе
	|	ПО
	|		РасчетыСКлиентами.ЗаказКлиента = ИндексыПоБазе.ЗаказКлиента
	|		И РасчетыСКлиентами.Валюта     = ИндексыПоБазе.Валюта
	|
	|ГДЕ
	|	Последовательность.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И Последовательность.Период >= &НачальныеГраницыПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.Регистратор,
	|	РасчетыСКлиентами.ДатаРегистратора,
	|	РасчетыСКлиентами.ДатаПлатежа,
	|	РасчетыСКлиентами.ВидДвижения,
	|	РасчетыСКлиентами.Активность,
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ЗаказКлиента,
	|	РасчетыСКлиентами.Валюта,
	|	РасчетыСКлиентами.ПродажаПоЗаказу,
	|	РасчетыСКлиентами.ХозяйственнаяОперация,
	|	ИндексыПоБазе.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НАЧАЛОПЕРИОДА(РасчетыСКлиентами.ДатаРегистратора, ДЕНЬ),
	|	ВЫБОР КОГДА РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ЗаказКлиента
	|		ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
	|		1
	|	ИНАЧЕ
	|		2
	|	КОНЕЦ,
	|	РасчетыСКлиентами.Регистратор,
	|	НомерСтроки
	|
	|ИТОГИ
	|	МАКСИМУМ(Период),
	|	
	|	// Аналитика учета.
	|	МАКСИМУМ(Валюта),
	|	МАКСИМУМ(ЗаказКлиента),
	|	
	|	// Используется для расчета суммы документа.
	|	СУММА(Сумма),
	|	СУММА(СуммаПоГрафику)
	|ПО
	|	РасчетыСКлиентами.Регистратор,
	|	ИндексыПоБазе.НомерСтроки
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИндексыПоБазе
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", НачальныеГраницы.КлючАналитики);
	Запрос.УстановитьПараметр("НачальныеГраницыПериод", НачальныеГраницы.Период);
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросПоДокументамРасчетовСПоставщиками(МенеджерВременныхТаблиц, НачальныеГраницы)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МАКСИМУМ(РасчетыСПоставщиками.НомерСтроки) КАК НомерСтроки,
	|	РасчетыСПоставщиками.Регистратор КАК Регистратор,
	|	РасчетыСПоставщиками.ДатаРегистратора КАК Период,
	|	
	|	РасчетыСПоставщиками.ДатаПлатежа КАК ДатаПлатежа,
	|	
	|	РасчетыСПоставщиками.ВидДвижения КАК ВидДвижения,
	|	РасчетыСПоставщиками.Активность КАК Активность,
	|	
	|	// Измерения
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ЗаказПоставщику КАК ЗаказПоставщику,
	|	РасчетыСПоставщиками.Валюта КАК Валюта,
	|	
	|	// Ресурсы
	|	СУММА(РасчетыСПоставщиками.Сумма) КАК Сумма,
	|	СУММА(РасчетыСПоставщиками.КОплате) КАК СуммаПоГрафику,
	|	
	|	// Реквизиты
	|	СУММА(РасчетыСПоставщиками.СуммаРегл) КАК СуммаРегл,
	|	РасчетыСПоставщиками.ЗакупкаПоЗаказу КАК ЗакупкаПоЗаказу,
	|	РасчетыСПоставщиками.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|
	|ИЗ
	|	Последовательность.ПроведениеПоРасчетамСПоставщиками КАК Последовательность
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|	ПО
	|		Последовательность.Регистратор = РасчетыСПоставщиками.Регистратор
	|		И Последовательность.АналитикаУчетаПоПартнерам = РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
	|		И РасчетыСПоставщиками.Активность
	|	
	|	// Индекс по базе для расчета итогов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ИндексыПоБазе КАК ИндексыПоБазе
	|	ПО
	|		РасчетыСПоставщиками.ЗаказПоставщику = ИндексыПоБазе.ЗаказПоставщику
	|		И РасчетыСПоставщиками.Валюта        = ИндексыПоБазе.Валюта
	|
	|ГДЕ
	|	Последовательность.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И Последовательность.Период >= &НачальныеГраницыПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.Регистратор,
	|	РасчетыСПоставщиками.ДатаРегистратора,
	|	РасчетыСПоставщиками.ДатаПлатежа,
	|	РасчетыСПоставщиками.ВидДвижения,
	|	РасчетыСПоставщиками.Активность,
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ЗаказПоставщику,
	|	РасчетыСПоставщиками.Валюта,
	|	РасчетыСПоставщиками.ЗакупкаПоЗаказу,
	|	РасчетыСПоставщиками.ХозяйственнаяОперация,
	|	ИндексыПоБазе.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НАЧАЛОПЕРИОДА(РасчетыСПоставщиками.ДатаРегистратора, ДЕНЬ),
	|	ВЫБОР КОГДА РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.ЗаказПоставщику ТОГДА
	|		1
	|	ИНАЧЕ
	|		2
	|	КОНЕЦ,
	|	РасчетыСПоставщиками.Регистратор,
	|	НомерСтроки
	|
	|ИТОГИ
	|	МАКСИМУМ(Период),
	|	
	|	// Аналитика учета.
	|	МАКСИМУМ(Валюта),
	|	МАКСИМУМ(ЗаказПоставщику),
	|	
	|	// Используется для расчета суммы документа.
	|	СУММА(Сумма),
	|	СУММА(СуммаПоГрафику)
	|ПО
	|	РасчетыСПоставщиками.Регистратор,
	|	ИндексыПоБазе.НомерСтроки
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИндексыПоБазе
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", НачальныеГраницы.КлючАналитики);
	Запрос.УстановитьПараметр("НачальныеГраницыПериод", НачальныеГраницы.Период);
	
	Возврат Запрос;
	
КонецФункции

Функция ПолучитьТаблицуАктуальныхЗаписейРасчетыСКлиентамиПоДокументам(НачальныеГраницы)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Последовательность.Регистратор КАК Регистратор,
	|	Последовательность.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|
	|ПОМЕСТИТЬ АктуальныеАналитики
	|ИЗ
	|	Последовательность.ПроведениеПоРасчетамСКлиентами КАК ТаблицаРегистраторов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Последовательность.ПроведениеПоРасчетамСКлиентами КАК Последовательность
	|	ПО
	|		ТаблицаРегистраторов.Регистратор = Последовательность.Регистратор
	|
	|ГДЕ
	|	ТаблицаРегистраторов.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И ТаблицаРегистраторов.Период >= &НачальныеГраницыПериод
	|	И Последовательность.АналитикаУчетаПоПартнерам <> &АналитикаУчетаПоПартнерам
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиПоДокументам.Период,
	|	РасчетыСКлиентамиПоДокументам.Регистратор,
	|	ИСТИНА КАК Активность,
	|	РасчетыСКлиентамиПоДокументам.ВидДвижения,
	|	РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентамиПоДокументам.ЗаказКлиента,
	|	РасчетыСКлиентамиПоДокументам.РасчетныйДокумент,
	|	РасчетыСКлиентамиПоДокументам.Валюта,
	|	РасчетыСКлиентамиПоДокументам.ДатаПлатежа,
	|	РасчетыСКлиентамиПоДокументам.КОтгрузке,
	|	РасчетыСКлиентамиПоДокументам.КОплате,
	|	РасчетыСКлиентамиПоДокументам.КВозврату,
	|	РасчетыСКлиентамиПоДокументам.Долг,
	|	РасчетыСКлиентамиПоДокументам.Предоплата,
	|	РасчетыСКлиентамиПоДокументам.ПредоплатаРегл,
	|	РасчетыСКлиентамиПоДокументам.ХозяйственнаяОперация
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентамиПоДокументам
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		АктуальныеАналитики КАК АктуальныеАналитики
	|	ПО
	|		РасчетыСКлиентамиПоДокументам.Регистратор = АктуальныеАналитики.Регистратор
	|		И РасчетыСКлиентамиПоДокументам.АналитикаУчетаПоПартнерам = АктуальныеАналитики.АналитикаУчетаПоПартнерам
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", НачальныеГраницы.КлючАналитики);
	Запрос.УстановитьПараметр("НачальныеГраницыПериод", НачальныеГраницы.Период);
	
	ТаблицаАктуальныхЗаписей = Запрос.Выполнить().Выгрузить();
	ТаблицаАктуальныхЗаписей.Индексы.Добавить("Регистратор");
	
	Возврат ТаблицаАктуальныхЗаписей;
	
КонецФункции

Функция ПолучитьТаблицуАктуальныхЗаписейРасчетыСПоставщикамиПоДокументам(НачальныеГраницы)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Последовательность.Регистратор КАК Регистратор,
	|	Последовательность.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|
	|ПОМЕСТИТЬ АктуальныеАналитики
	|ИЗ
	|	Последовательность.ПроведениеПоРасчетамСПоставщиками КАК ТаблицаРегистраторов
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Последовательность.ПроведениеПоРасчетамСПоставщиками КАК Последовательность
	|	ПО
	|		ТаблицаРегистраторов.Регистратор = Последовательность.Регистратор
	|
	|ГДЕ
	|	ТаблицаРегистраторов.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|	И ТаблицаРегистраторов.Период >= &НачальныеГраницыПериод
	|	И Последовательность.АналитикаУчетаПоПартнерам <> &АналитикаУчетаПоПартнерам
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоДокументам.Период,
	|	РасчетыСПоставщикамиПоДокументам.Регистратор,
	|	ИСТИНА КАК Активность,
	|	РасчетыСПоставщикамиПоДокументам.ВидДвижения,
	|	РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПоДокументам.ЗаказПоставщику,
	|	РасчетыСПоставщикамиПоДокументам.РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоДокументам.Валюта,
	|	РасчетыСПоставщикамиПоДокументам.ДатаПлатежа,
	|	РасчетыСПоставщикамиПоДокументам.КПоступлению,
	|	РасчетыСПоставщикамиПоДокументам.КОплате,
	|	РасчетыСПоставщикамиПоДокументам.КВозврату,
	|	РасчетыСПоставщикамиПоДокументам.Долг,
	|	РасчетыСПоставщикамиПоДокументам.Предоплата,
	|	РасчетыСПоставщикамиПоДокументам.ПредоплатаРегл,
	|	РасчетыСПоставщикамиПоДокументам.ХозяйственнаяОперация
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщикамиПоДокументам
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		АктуальныеАналитики КАК АктуальныеАналитики
	|	ПО
	|		РасчетыСПоставщикамиПоДокументам.Регистратор = АктуальныеАналитики.Регистратор
	|		И РасчетыСПоставщикамиПоДокументам.АналитикаУчетаПоПартнерам = АктуальныеАналитики.АналитикаУчетаПоПартнерам
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", НачальныеГраницы.КлючАналитики);
	Запрос.УстановитьПараметр("НачальныеГраницыПериод", НачальныеГраницы.Период);
	
	ТаблицаАктуальныхЗаписей = Запрос.Выполнить().Выгрузить();
	ТаблицаАктуальныхЗаписей.Индексы.Добавить("Регистратор");
	
	Возврат ТаблицаАктуальныхЗаписей;
	
КонецФункции

Функция ВыборкаГраницПоАналитикеУчетаРасчетовСКлиентами(КлючАналитики)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(Границы.Период, НачальныеДвижения.Период)) КАК Период
	|
	|ПОМЕСТИТЬ Границы
	|ИЗ
	|	Последовательность.ПроведениеПоРасчетамСКлиентами КАК НачальныеДвижения
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Последовательность.ПроведениеПоРасчетамСКлиентами.Границы КАК Границы
	|	ПО
	|		Границы.АналитикаУчетаПоПартнерам = НачальныеДвижения.АналитикаУчетаПоПартнерам
	|
	|ГДЕ
	|	НачальныеДвижения.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&АналитикаУчетаПоПартнерам         КАК КлючАналитики,
	|	МАКСИМУМ(Границы.Период)           КАК Период,
	|	МАКСИМУМ(РасчетыСКлиентами.Период) КАК ПериодОсновная
	|
	|ИЗ
	|	Границы КАК Границы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|	ПО
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|		И РасчетыСКлиентами.Активность
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Границы.Период) <= МАКСИМУМ(РасчетыСКлиентами.Период)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", КлючАналитики);
	
	ВыборкаГраницРасчетов = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаГраницРасчетов;
	
КонецФункции

Функция ВыборкаГраницПоАналитикеУчетаРасчетовСПоставщиками(КлючАналитики)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	МИНИМУМ(ЕСТЬNULL(Границы.Период, НачальныеДвижения.Период)) КАК Период
	|
	|ПОМЕСТИТЬ Границы
	|ИЗ
	|	Последовательность.ПроведениеПоРасчетамСПоставщиками КАК НачальныеДвижения
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Последовательность.ПроведениеПоРасчетамСПоставщиками.Границы КАК Границы
	|	ПО
	|		Границы.АналитикаУчетаПоПартнерам = НачальныеДвижения.АналитикаУчетаПоПартнерам
	|
	|ГДЕ
	|	НачальныеДвижения.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&АналитикаУчетаПоПартнерам            КАК КлючАналитики,
	|	МАКСИМУМ(Границы.Период)              КАК Период,
	|	МАКСИМУМ(РасчетыСПоставщиками.Период) КАК ПериодОсновная
	|
	|ИЗ
	|	Границы КАК Границы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|	ПО
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
	|		И РасчетыСПоставщиками.Активность
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Границы.Период) <= МАКСИМУМ(РасчетыСПоставщиками.Период)
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", КлючАналитики);
	
	ВыборкаГраницРасчетов = Запрос.Выполнить().Выбрать();
	
	Возврат ВыборкаГраницРасчетов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры расчеты сумм в валюте регламентированного учета.

Процедура РассчитатьСуммыДокументаВВалютеРеглПоРасчетамСКлиентами(МассивДокументов = Неопределено)
	
	Если МассивДокументов <> Неопределено Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.Регистратор КАК Регистратор
		|
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	РегистрСведений.СуммыДокументовВВалютеРегл КАК ДанныеРегистра
		|
		|ГДЕ
		|	ДанныеРегистра.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|	И ДанныеРегистра.Регистратор В (&МассивДокументов)
		|;";
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.Регистратор КАК Регистратор
		|
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	РегистрСведений.СуммыДокументовВВалютеРегл КАК ДанныеРегистра
		|
		|ГДЕ
		|	ДанныеРегистра.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
		|	И ((ДанныеРегистра.СуммаБезНДС <> 0 И ДанныеРегистра.СуммаБезНДСРегл = 0)
		|		ИЛИ (ДанныеРегистра.СуммаНДС <> 0 И ДанныеРегистра.СуммаНДСРегл = 0))
		|;";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	
	|	СУММА(
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			ДанныеРегистра.ПредоплатаРегл
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	) КАК ПредоплатаРегл,
	|
	|	СУММА(
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			ДанныеРегистра.Долг
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	) КАК Долг
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		ДанныеРегистра.Регистратор = ТаблицаДокументов.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.Валюта
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Регистратор КАК Ссылка,
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДанныеРегистра.СуммаБезНДС КАК СуммаБезНДС,
	|	ДанныеРегистра.СуммаНДС КАК СуммаНДС,
	|	ДанныеРегистра.СуммаБезНДСРегл КАК СуммаБезНДСРегл,
	|	ДанныеРегистра.СуммаНДСРегл КАК СуммаНДСРегл,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	ДанныеРегистра.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеРегистра.ТипРасчетов КАК ТипРасчетов,
	|	
	|	ВЫБОР КОГДА ДанныеРегистра.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ПересчитатьСуммыРегл,
	|	
	|	ВЫБОР КОГДА ДанныеРегистра.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) ТОГДА
	|		ДанныеРегистра.СуммаБезНДС + ДанныеРегистра.СуммаНДС
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаСНДС
	|
	|ИЗ
	|	РегистрСведений.СуммыДокументовВВалютеРегл КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		ДанныеРегистра.Регистратор = ТаблицаДокументов.Регистратор
	|
	|ИТОГИ
	|	МАКСИМУМ(Период),
	|	СУММА(СуммаСНДС)
	|ПО
	|	ДанныеРегистра.Регистратор
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	КэшКурсовВалют = РаботаСКурсамиВалютУТ.ИнициализироватьКэшКурсовВалют();
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатПоРасчетам   = МассивРезультатов[1];
	РезультатПоДокументам = МассивРезультатов[2];
	
	ВыборкаПоРасчетам = РезультатПоРасчетам.Выбрать();
	
	ВыборкаПоДокументу = РезультатПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументу.Следующий() Цикл
		
		СуммаДокументаРегл = 0;
		СуммаДокумента     = ВыборкаПоДокументу.СуммаСНДС;
		
		Пока ВыборкаПоРасчетам.НайтиСледующий(Новый Структура("Регистратор", ВыборкаПоДокументу.Ссылка)) Цикл
			
			КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(ВыборкаПоРасчетам.Валюта, ВыборкаПоДокументу.Период, КэшКурсовВалют);
			КурсВалютыРегл           = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(ВалютаРегл, ВыборкаПоДокументу.Период, КэшКурсовВалют);
			
			ДолгРегл = ВыборкаПоРасчетам.Долг * КурсВалютыВзаиморасчетов / КурсВалютыРегл;
			
			СуммаДокументаРегл = СуммаДокументаРегл + ВыборкаПоРасчетам.ПредоплатаРегл + ДолгРегл;
			
		КонецЦикла;
		
		ВыборкаПоРасчетам.Сбросить();
		
		НаборЗаписей = РегистрыСведений.СуммыДокументовВВалютеРегл.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоДокументу.Ссылка);
		
		УчтеноБазыРаспределения = 0;
		УжеРаспределено = 0;
		
		Выборка = ВыборкаПоДокументу.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
			Если Выборка.ПересчитатьСуммыРегл Тогда
				
				СуммаСНДС = Выборка.СуммаБезНДС + Выборка.СуммаНДС;
				
				СуммаСНДСРегл = Окр(СуммаДокументаРегл * (УчтеноБазыРаспределения + СуммаСНДС) / СуммаДокумента, 2) - УжеРаспределено;
				
				УчтеноБазыРаспределения = УчтеноБазыРаспределения + СуммаСНДС;
				УжеРаспределено         = УжеРаспределено + СуммаСНДСРегл;
				
				ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Выборка.СтавкаНДС);
				
				НоваяЗапись.СуммаНДСРегл    = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СуммаСНДСРегл, ТекПроцентНДС);
				НоваяЗапись.СуммаБезНДСРегл = СуммаСНДСРегл - НоваяЗапись.СуммаНДСРегл;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записывать = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьСуммыДокументаВВалютеРеглПоРасчетамСПоставщиками(МассивДокументов = Неопределено)
	
	Если МассивДокументов <> Неопределено Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.Регистратор КАК Регистратор
		|
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	РегистрСведений.СуммыДокументовВВалютеРегл КАК ДанныеРегистра
		|
		|ГДЕ
		|	ДанныеРегистра.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
		|	И ДанныеРегистра.Регистратор В (&МассивДокументов)
		|;";
	Иначе
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.Регистратор КАК Регистратор
		|
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	РегистрСведений.СуммыДокументовВВалютеРегл КАК ДанныеРегистра
		|
		|ГДЕ
		|	ДанныеРегистра.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
		|	И ((ДанныеРегистра.СуммаБезНДС <> 0 И ДанныеРегистра.СуммаБезНДСРегл = 0)
		|		ИЛИ (ДанныеРегистра.СуммаНДС <> 0 И ДанныеРегистра.СуммаНДСРегл = 0))
		|;";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	
	|	СУММА(
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			ДанныеРегистра.ПредоплатаРегл
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	) КАК ПредоплатаРегл,
	|	
	|	СУММА(
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			ДанныеРегистра.Долг
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ
	|	) КАК Долг
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		ДанныеРегистра.Регистратор = ТаблицаДокументов.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.Валюта
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Регистратор КАК Ссылка,
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДанныеРегистра.СуммаБезНДС КАК СуммаБезНДС,
	|	ДанныеРегистра.СуммаНДС КАК СуммаНДС,
	|	ДанныеРегистра.СуммаБезНДСРегл КАК СуммаБезНДСРегл,
	|	ДанныеРегистра.СуммаНДСРегл КАК СуммаНДСРегл,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	ДанныеРегистра.СтавкаНДС КАК СтавкаНДС,
	|	ДанныеРегистра.ТипРасчетов КАК ТипРасчетов,
	|	
	|	ВЫБОР КОГДА ДанныеРегистра.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ПересчитатьСуммыРегл,
	|	
	|	ВЫБОР КОГДА ДанныеРегистра.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) ТОГДА
	|		ДанныеРегистра.СуммаБезНДС + ДанныеРегистра.СуммаНДС
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаСНДС
	|
	|ИЗ
	|	РегистрСведений.СуммыДокументовВВалютеРегл КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДокументов КАК ТаблицаДокументов
	|	ПО
	|		ДанныеРегистра.Регистратор = ТаблицаДокументов.Регистратор
	|
	|ИТОГИ
	|	МАКСИМУМ(Период),
	|	СУММА(СуммаСНДС)
	|ПО
	|	ДанныеРегистра.Регистратор
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	КэшКурсовВалют = РаботаСКурсамиВалютУТ.ИнициализироватьКэшКурсовВалют();
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатПоРасчетам   = МассивРезультатов[1];
	РезультатПоДокументам = МассивРезультатов[2];
	
	ВыборкаПоРасчетам = РезультатПоРасчетам.Выбрать();
	
	ВыборкаПоДокументу = РезультатПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументу.Следующий() Цикл
		
		СуммаДокументаРегл = 0;
		СуммаДокумента     = ВыборкаПоДокументу.СуммаСНДС;
		
		Пока ВыборкаПоРасчетам.НайтиСледующий(Новый Структура("Регистратор", ВыборкаПоДокументу.Ссылка)) Цикл
			
			КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(ВыборкаПоРасчетам.Валюта, ВыборкаПоДокументу.Период, КэшКурсовВалют);
			КурсВалютыРегл           = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(ВалютаРегл, ВыборкаПоДокументу.Период, КэшКурсовВалют);
			
			ДолгРегл = ВыборкаПоРасчетам.Долг * КурсВалютыВзаиморасчетов / КурсВалютыРегл;
			
			СуммаДокументаРегл = СуммаДокументаРегл + ВыборкаПоРасчетам.ПредоплатаРегл + ДолгРегл;
			
		КонецЦикла;
		
		ВыборкаПоРасчетам.Сбросить();
		
		НаборЗаписей = РегистрыСведений.СуммыДокументовВВалютеРегл.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоДокументу.Ссылка);
		
		УчтеноБазыРаспределения = 0;
		УжеРаспределено = 0;
		
		Выборка = ВыборкаПоДокументу.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			
			Если Выборка.ПересчитатьСуммыРегл Тогда
				
				СуммаСНДС = Выборка.СуммаБезНДС + Выборка.СуммаНДС;
				
				СуммаСНДСРегл = Окр(СуммаДокументаРегл * (УчтеноБазыРаспределения + СуммаСНДС) / СуммаДокумента, 2) - УжеРаспределено;
				
				УчтеноБазыРаспределения = УчтеноБазыРаспределения + СуммаСНДС;
				УжеРаспределено         = УжеРаспределено + СуммаСНДСРегл;
				
				ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Выборка.СтавкаНДС);
				
				НоваяЗапись.СуммаНДСРегл    = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СуммаСНДСРегл, ТекПроцентНДС);
				НоваяЗапись.СуммаБезНДСРегл = СуммаСНДСРегл - НоваяЗапись.СуммаНДСРегл;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записывать = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Обновление информационной базы

Процедура ЗаполнитьПорядокРасчетов() Экспорт
	
	ИспользоватьЗаказыКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов");
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеСоглашения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК ДанныеСоглашения
	|ГДЕ
	|	НЕ ДанныеСоглашения.ИспользуютсяДоговорыКонтрагентов
	|	И ДанныеСоглашения.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПустаяСсылка)
	|");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ИспользоватьЗаказыКлиентов Тогда
			СправочникОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		Иначе
			СправочникОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
		КонецЕсли;
		
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
	ИспользоватьЗаказыПоставщикам = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеСоглашения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК ДанныеСоглашения
	|ГДЕ
	|	НЕ ДанныеСоглашения.ИспользуютсяДоговорыКонтрагентов
	|	И ДанныеСоглашения.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПустаяСсылка)
	|");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ИспользоватьЗаказыПоставщикам Тогда
			СправочникОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		Иначе
			СправочникОбъект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
		КонецЕсли;
		
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|
	|	ВЫБОР КОГДА ДанныеСоглашения.ИспользуютсяДоговорыКонтрагентов ИЛИ ДанныеСоглашения.Ссылка ЕСТЬ NULL ТОГДА
	|		ЕСТЬNULL(ДанныеДоговора.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДанныеСоглашения.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	КОНЕЦ КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СоглашенияСКлиентами КАК ДанныеСоглашения
	|	ПО
	|		ДанныеДокумента.Соглашение = ДанныеСоглашения.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
	|	ПО
	|		ДанныеДокумента.Договор = ДанныеДоговора.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|
	|	ВЫБОР КОГДА ДанныеСоглашения.ИспользуютсяДоговорыКонтрагентов ИЛИ ДанныеСоглашения.Ссылка ЕСТЬ NULL ТОГДА
	|		ЕСТЬNULL(ДанныеДоговора.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДанныеСоглашения.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	КОНЕЦ КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.КорректировкаПоступления КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СоглашенияСПоставщиками КАК ДанныеСоглашения
	|	ПО
	|		ДанныеДокумента.Соглашение = ДанныеСоглашения.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
	|	ПО
	|		ДанныеДокумента.Договор = ДанныеДоговора.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|
	|	ВЫБОР КОГДА ДанныеСоглашения.ИспользуютсяДоговорыКонтрагентов ИЛИ ДанныеСоглашения.Ссылка ЕСТЬ NULL ТОГДА
	|		ЕСТЬNULL(ДанныеДоговора.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДанныеСоглашения.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	КОНЕЦ КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.КорректировкаРеализации КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СоглашенияСКлиентами КАК ДанныеСоглашения
	|	ПО
	|		ДанныеДокумента.Соглашение = ДанныеСоглашения.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
	|	ПО
	|		ДанныеДокумента.Договор = ДанныеДоговора.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|
	|	ВЫБОР КОГДА ДанныеСоглашения.ИспользуютсяДоговорыКонтрагентов ИЛИ ДанныеСоглашения.Ссылка ЕСТЬ NULL ТОГДА
	|		ЕСТЬNULL(ДанныеДоговора.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДанныеСоглашения.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	КОНЕЦ КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СоглашенияСКлиентами КАК ДанныеСоглашения
	|	ПО
	|		ДанныеДокумента.Соглашение = ДанныеСоглашения.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
	|	ПО
	|		ДанныеДокумента.Договор = ДанныеДоговора.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|
	|	ВЫБОР КОГДА ДанныеСоглашения.ИспользуютсяДоговорыКонтрагентов ИЛИ ДанныеСоглашения.Ссылка ЕСТЬ NULL ТОГДА
	|		ЕСТЬNULL(ДанныеДоговора.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДанныеСоглашения.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	КОНЕЦ КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СоглашенияСКлиентами КАК ДанныеСоглашения
	|	ПО
	|		ДанныеДокумента.Соглашение = ДанныеСоглашения.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
	|	ПО
	|		ДанныеДокумента.Договор = ДанныеДоговора.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|
	|	ВЫБОР КОГДА ДанныеСоглашения.ИспользуютсяДоговорыКонтрагентов ИЛИ ДанныеСоглашения.Ссылка ЕСТЬ NULL ТОГДА
	|		ЕСТЬNULL(ДанныеДоговора.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДанныеСоглашения.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	КОНЕЦ КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СоглашенияСПоставщиками КАК ДанныеСоглашения
	|	ПО
	|		ДанныеДокумента.Соглашение = ДанныеСоглашения.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
	|	ПО
	|		ДанныеДокумента.Договор = ДанныеДоговора.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|
	|	ВЫБОР КОГДА ДанныеСоглашения.ИспользуютсяДоговорыКонтрагентов ИЛИ ДанныеСоглашения.Ссылка ЕСТЬ NULL ТОГДА
	|		ЕСТЬNULL(ДанныеДоговора.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДанныеСоглашения.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	КОНЕЦ КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СоглашенияСПоставщиками КАК ДанныеСоглашения
	|	ПО
	|		ДанныеДокумента.Соглашение = ДанныеСоглашения.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
	|	ПО
	|		ДанныеДокумента.Договор = ДанныеДоговора.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|
	|	ВЫБОР КОГДА ДанныеСоглашения.ИспользуютсяДоговорыКонтрагентов ИЛИ ДанныеСоглашения.Ссылка ЕСТЬ NULL ТОГДА
	|		ЕСТЬNULL(ДанныеДоговора.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДанныеСоглашения.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	КОНЕЦ КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СоглашенияСПоставщиками КАК ДанныеСоглашения
	|	ПО
	|		ДанныеДокумента.Соглашение = ДанныеСоглашения.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
	|	ПО
	|		ДанныеДокумента.Договор = ДанныеДоговора.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|
	|	ВЫБОР КОГДА ДанныеСоглашения.ИспользуютсяДоговорыКонтрагентов ИЛИ ДанныеСоглашения.Ссылка ЕСТЬ NULL ТОГДА
	|		ЕСТЬNULL(ДанныеДоговора.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДанныеСоглашения.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	КОНЕЦ КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.ПоступлениеУслугПрочихАктивов КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СоглашенияСПоставщиками КАК ДанныеСоглашения
	|	ПО
	|		ДанныеДокумента.Соглашение = ДанныеСоглашения.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
	|	ПО
	|		ДанныеДокумента.Договор = ДанныеДоговора.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|
	|	ВЫБОР КОГДА ДанныеСоглашения.ИспользуютсяДоговорыКонтрагентов ИЛИ ДанныеСоглашения.Ссылка ЕСТЬ NULL ТОГДА
	|		ЕСТЬNULL(ДанныеДоговора.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДанныеСоглашения.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	КОНЕЦ КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СоглашенияСКлиентами КАК ДанныеСоглашения
	|	ПО
	|		ДанныеДокумента.Соглашение = ДанныеСоглашения.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
	|	ПО
	|		ДанныеДокумента.Договор = ДанныеДоговора.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|
	|	ВЫБОР КОГДА ДанныеСоглашения.ИспользуютсяДоговорыКонтрагентов ИЛИ ДанныеСоглашения.Ссылка ЕСТЬ NULL ТОГДА
	|		ЕСТЬNULL(ДанныеДоговора.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДанныеСоглашения.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	КОНЕЦ КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СоглашенияСКлиентами КАК ДанныеСоглашения
	|	ПО
	|		ДанныеДокумента.Соглашение = ДанныеСоглашения.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
	|	ПО
	|		ДанныеДокумента.Договор = ДанныеДоговора.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|
	|	ВЫБОР КОГДА ДанныеСоглашения.ИспользуютсяДоговорыКонтрагентов ИЛИ ДанныеСоглашения.Ссылка ЕСТЬ NULL ТОГДА
	|		ЕСТЬNULL(ДанныеДоговора.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	ИНАЧЕ
	|		ЕСТЬNULL(ДанныеСоглашения.ПорядокРасчетов, ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
	|	КОНЕЦ КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СоглашенияСПоставщиками КАК ДанныеСоглашения
	|	ПО
	|		ДанныеДокумента.Соглашение = ДанныеСоглашения.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
	|	ПО
	|		ДанныеДокумента.Договор = ДанныеДоговора.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) КАК ПорядокРасчетов
	|
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПустаяСсылка)
	|");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПорядокРасчетов = Выборка.ПорядокРасчетов;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ РАСШИФРОВКИ ПЛАТЕЖА ПО ОСТАТКАМ РАСЧЕТОВ

// Функция формирует массив организаций, доступных для подбора остатков расчетов с партнером.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, указанная в документе
//	ЕстьРасчетыСПоставщиками - Булево - Признак наличия расчетов с партнерами
//	ЕстьРасчетыСКлиентами - Булево - Признак наличия расчетов с поставщиками
//
// Возвращаемое значение:
//	Массив - Массив доступных организаций
//
Функция ДоступныеОрганизацийДляПодбораОстатков(Организация, ЕстьРасчетыСПоставщиками, ЕстьРасчетыСКлиентами)
	
	ДоступныеОрганизации = Новый Массив;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс") Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = &Организация
		|	И (
		|		&ЕстьРасчетыСКлиентами И Организации.ДопускаютсяВзаиморасчетыСКлиентамиЧерезГоловнуюОрганизацию
		|		ИЛИ &ЕстьРасчетыСПоставщиками И Организации.ДопускаютсяВзаиморасчетыСПоставщикамиЧерезГоловнуюОрганизацию
		|		)
		|	И Организации.ОбособленноеПодразделение
		|");
		Запрос.УстановитьПараметр("ЕстьРасчетыСПоставщиками", ЕстьРасчетыСПоставщиками);
		Запрос.УстановитьПараметр("ЕстьРасчетыСКлиентами", ЕстьРасчетыСКлиентами);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		ДоступныеОрганизации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	КонецЕсли;
	
	ДоступныеОрганизации.Добавить(Организация);
	
	Возврат ДоступныеОрганизации;
	
КонецФункции

Функция ТекстЗапросаПоОстаткамРасчетовСПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	ВЫБОР КОГДА ТаблицаПлатежей.Сумма ЕСТЬ NULL ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ КАК Выбран,
	|	ЕСТЬNULL(ТаблицаПлатежей.Сумма, 0) КАК Сумма,
	|	&ВалютаДокумента КАК ВалютаДокумента,
	|
	|	РасчетыСПоставщиками.ЗаказПоставщику.Дата КАК Дата,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Номер КАК Номер,
	|	РасчетыСПоставщиками.ЗаказПоставщику КАК Заказ,
	|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
	|	АналитикаПоПартнерам.Организация КАК Организация,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
	|	
	|	ВЫБОР КОГДА РасчетыСПоставщиками.СуммаОстаток > 0 ТОГДА
	|		РасчетыСПоставщиками.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ДолгПартнера,
	|
	|	ВЫБОР КОГДА РасчетыСПоставщиками.КОплатеОстаток < 0
	|		И Не &ТолькоБезусловнаяЗадолженность
	|	ТОГДА
	|		-РасчетыСПоставщиками.КОплатеОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КОплате,
	|	
	|	ВЫБОР КОГДА РасчетыСПоставщиками.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСПоставщиками.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК НашДолг	
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, 
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|	) КАК РасчетыСПоставщиками
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|	ПО 
	|		РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПлатежей КАК ТаблицаПлатежей
	|	ПО
	|		РасчетыСПоставщиками.ЗаказПоставщику = ТаблицаПлатежей.Заказ
	|		И РасчетыСПоставщиками.Валюта = ТаблицаПлатежей.Валюта
	|
	|ГДЕ
	|	(&ДебиторскаяЗадолженность
	|	И РасчетыСПоставщиками.СуммаОстаток > 0)
	|	ИЛИ 
	|	(Не &ДебиторскаяЗадолженность
	|	И РасчетыСПоставщиками.КОплатеОстаток < 0
	|	И Не &ТолькоБезусловнаяЗадолженность
	|	)
	|	ИЛИ 
	|	(Не &ДебиторскаяЗадолженность
	|	И РасчетыСПоставщиками.СуммаОстаток < 0
	|	)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПоОстаткамРасчетовСКлиентами()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	ВЫБОР КОГДА ТаблицаПлатежей.Сумма ЕСТЬ NULL ТОГДА
	|		Ложь
	|	ИНАЧЕ
	|		Истина
	|	КОНЕЦ КАК Выбран,
	|	ЕСТЬNULL(ТаблицаПлатежей.Сумма, 0) КАК Сумма,
	|	&ВалютаДокумента КАК ВалютаДокумента,
	|
	|	РасчетыСКлиентами.ЗаказКлиента.Дата КАК Дата,
	|	РасчетыСКлиентами.ЗаказКлиента.Номер КАК Номер,
	|	РасчетыСКлиентами.ЗаказКлиента КАК Заказ,
	|	РасчетыСКлиентами.Валюта КАК ВалютаВзаиморасчетов,
	|	АналитикаПоПартнерам.Организация КАК Организация,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаПоПартнерам.Контрагент КАК Контрагент,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентами.СуммаОстаток > 0 ТОГДА
	|		РасчетыСКлиентами.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК ДолгПартнера,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентами.КОплатеОстаток > 0
	|		И Не &ТолькоБезусловнаяЗадолженность
	|	ТОГДА
	|		РасчетыСКлиентами.КОплатеОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК КОплате,
	|	
	|	ВЫБОР КОГДА РасчетыСКлиентами.СуммаОстаток < 0 ТОГДА
	|		-РасчетыСКлиентами.СуммаОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК НашДолг
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(, 
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			)
	|	) КАК РасчетыСКлиентами
	|		
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|	ПО 
	|		РасчетыСКлиентами.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаПлатежей КАК ТаблицаПлатежей
	|	ПО
	|		РасчетыСКлиентами.ЗаказКлиента = ТаблицаПлатежей.Заказ
	|		И РасчетыСКлиентами.Валюта = ТаблицаПлатежей.Валюта
	|
	|ГДЕ
	|	(Не &ДебиторскаяЗадолженность
	|	И РасчетыСКлиентами.СуммаОстаток < 0)
	|	ИЛИ 
	|	(&ДебиторскаяЗадолженность
	|	И РасчетыСКлиентами.КОплатеОстаток > 0
	|	И Не &ТолькоБезусловнаяЗадолженность
	|	)
	|	ИЛИ 
	|	(&ДебиторскаяЗадолженность
	|	И РасчетыСКлиентами.СуммаОстаток > 0
	|	)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Процедура заполняет таблицу остатков расчетов с партнером.
//
// Параметры:
//	Реквизиты - Структура - Структура должна содержать значения: 
//				Дата, Организация, СуммаДокумента, Валюта, Контрагент, Партнер, ХозяйственнаяОперация
//	АдресПлатежейВХранилище - Строка - Адрес во временном хранилище, в которое помещена табличная часть документа 
//	ТаблицаОстатковРасчетов - ТаблицаЗначений - Таблица с остатками расчетов
//	ЕстьНесколькоОрганизаций - Булево - Признак наличия остатков по нескольким организациям
//
Процедура ЗаполнитьТаблицуОстатковРасчетов(Реквизиты, АдресПлатежейВХранилище, ТаблицаОстатковРасчетов, ЕстьНесколькоОрганизаций = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВалютаДокумента", Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	
	Если Не ЗначениеЗаполнено(Реквизиты.Партнер) Тогда
		Запрос.УстановитьПараметр("Партнер", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Партнер", Реквизиты.Партнер);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПартнерПрочиеОтношения", Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	
	МассивРасчетыСПоставщиками = Новый Массив;
	МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику);
	МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
	МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
	МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.АвансовыйОтчет);
	МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями);
	МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	МассивРасчетыСПоставщиками.Добавить(Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств);
	ЕстьРасчетыСПоставщиками = МассивРасчетыСПоставщиками.Найти(Реквизиты.ХозяйственнаяОперация) <> Неопределено;
	
	МассивРасчетыСКлиентами = Новый Массив;
	МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
	МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
	МассивРасчетыСКлиентами.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	ЕстьРасчетыСКлиентами = МассивРасчетыСКлиентами.Найти(Реквизиты.ХозяйственнаяОперация) <> Неопределено;
	
	Если Не ЕстьРасчетыСКлиентами И Не ЕстьРасчетыСПоставщиками И Не Реквизиты.ХозяйственнаяОперация  Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подбор по остаткам расчетов с партнерами не поддерживается для операции %1'"),
			Реквизиты.ХозяйственнаяОперация
		);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	ДоступныеОрганизации = ДоступныеОрганизацийДляПодбораОстатков(Реквизиты.Организация, ЕстьРасчетыСПоставщиками, ЕстьРасчетыСКлиентами);
	ЕстьНесколькоОрганизаций = (ДоступныеОрганизации.Количество() > 1);
	
	
	Запрос.УстановитьПараметр("Организация", ДоступныеОрганизации);
	
	МассивДебиторскаяЗадолженность = Новый Массив;
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента);
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	Запрос.УстановитьПараметр("ДебиторскаяЗадолженность", МассивДебиторскаяЗадолженность.Найти(Реквизиты.ХозяйственнаяОперация) <> Неопределено);
	
	МассивТолькоБезусловнаяЗадолженность = Новый Массив;
	МассивТолькоБезусловнаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
	МассивТолькоБезусловнаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
	МассивТолькоБезусловнаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	МассивТолькоБезусловнаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика);
	МассивТолькоБезусловнаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	Запрос.УстановитьПараметр("ТолькоБезусловнаяЗадолженность", МассивТолькоБезусловнаяЗадолженность.Найти(Реквизиты.ХозяйственнаяОперация) <> Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.Заказ КАК Заказ,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов КАК Валюта,
	|	РасшифровкаПлатежа.Сумма КАК Сумма
	|
	|ПОМЕСТИТЬ ТаблицаПлатежей
	|ИЗ
	|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики,
	|	АналитикаПоПартнерам.Организация КАК Организация,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаПоПартнерам.Контрагент КАК Контрагент
	|
	|ПОМЕСТИТЬ АналитикаУчетаПоПартнерам
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	&Партнер <> Неопределено
	|	И АналитикаПоПартнерам.Организация В (&Организация)
	|	И АналитикаПоПартнерам.Партнер = &Партнер
	|	И АналитикаПоПартнерам.Контрагент = &Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики,
	|	АналитикаПоПартнерам.Организация КАК Организация,
	|	АналитикаПоПартнерам.Партнер КАК Партнер,
	|	АналитикаПоПартнерам.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|ГДЕ
	|	&Партнер = Неопределено
	|	И АналитикаПоПартнерам.Организация В (&Организация)
	|	И АналитикаПоПартнерам.Контрагент = &Контрагент
	|	И (&ПартнерПрочиеОтношения И АналитикаПоПартнерам.Партнер.ПрочиеОтношения
	|		ИЛИ Не &ПартнерПрочиеОтношения)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|
	|//ТекстЗапросаРасчетыСКлиентами
	|
	|//ТекстОбъединитьВсе
	|
	|//ТекстЗапросаРасчетыСПоставщиками
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Контрагент,
	|	Дата,
	|	Номер
	|";
	Если ЕстьРасчетыСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"//ТекстЗапросаРасчетыСКлиентами",
			ТекстЗапросаПоОстаткамРасчетовСКлиентами()
		);
	КонецЕсли;
	Если ЕстьРасчетыСПоставщиками Тогда
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"//ТекстЗапросаРасчетыСПоставщиками",
			ТекстЗапросаПоОстаткамРасчетовСПоставщиками()
		);
	КонецЕсли;
	Если ЕстьРасчетыСКлиентами И ЕстьРасчетыСПоставщиками Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстОбъединитьВсе", "ОБЪЕДИНИТЬ ВСЕ");
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	
	Если ЗначениеЗаполнено(АдресПлатежейВХранилище) Тогда
		РасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище);
	Иначе
		Если ТаблицаОстатковРасчетов = Неопределено Тогда
			РасшифровкаПлатежа = Новый ТаблицаЗначений;
			РасшифровкаПлатежа.Колонки.Добавить("Заказ", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
			РасшифровкаПлатежа.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			РасшифровкаПлатежа.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		Иначе
			РасшифровкаПлатежа = ТаблицаОстатковРасчетов.Выгрузить(,).СкопироватьКолонки();
		КонецЕсли;
	КонецЕсли;
	РасшифровкаПлатежа.Свернуть("Заказ, ВалютаВзаиморасчетов", "Сумма");
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	Если ТаблицаОстатковРасчетов = Неопределено Тогда
		ТаблицаОстатковРасчетов = Запрос.Выполнить().Выгрузить();
	Иначе
		ТаблицаОстатковРасчетов.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		СуммаКРаспределению = Реквизиты.СуммаДокумента;
	Иначе
		СуммаКРаспределению = 0;
	КонецЕсли;
	
	СоответствиеВалютаКурс = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
		
		Если Не СтрокаТаблицы.Выбран Тогда
			
			Если СтрокаТаблицы.КОплате <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.КОплате;
				
			ИначеЕсли СтрокаТаблицы.НашДолг <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.НашДолг;
				
			ИначеЕсли СтрокаТаблицы.ДолгПартнера <> 0 Тогда
				СтрокаТаблицы.Сумма = СтрокаТаблицы.ДолгПартнера;
				
			КонецЕсли;
			
			Если Реквизиты.Валюта <> СтрокаТаблицы.ВалютаВзаиморасчетов Тогда
				
				Коэффициенты = СоответствиеВалютаКурс.Получить(СтрокаТаблицы.ВалютаВзаиморасчетов);
				Если Коэффициенты = Неопределено Тогда
					Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Реквизиты.Валюта, СтрокаТаблицы.ВалютаВзаиморасчетов, ?(Реквизиты.Дата <> '00010101', Реквизиты.Дата, ТекущаяДата()));
					СоответствиеВалютаКурс.Вставить(СтрокаТаблицы.ВалютаВзаиморасчетов, Коэффициенты);
				КонецЕсли;
					
				СтрокаТаблицы.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, СтрокаТаблицы.Сумма / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СуммаКРаспределению > 0 Тогда
			
			СтрокаТаблицы.Выбран = Истина;
			Если СтрокаТаблицы.Сумма > СуммаКРаспределению Тогда
				СтрокаТаблицы.Сумма = СуммаКРаспределению;
			КонецЕсли;
			СуммаКРаспределению = СуммаКРаспределению - СтрокаТаблицы.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция формирует массив допустимых хозяйственных операций договора с контрагентом.
//
// Параметры:
//	ОперацияДокумента - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//
// Возвращаемое значение:
//	Массив - Массив хозяйственных операций
//
Функция ХозяйственнаяОперацияДоговора(ОперацияДокумента) Экспорт
	
	ХозяйственнаяОперацияДоговора = Новый Массив;
	Если ОперацияДокумента = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
	 ИЛИ ОперацияДокумента = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
		
	ИначеЕсли ОперацияДокумента = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
	 ИЛИ ОперацияДокумента = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
		
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		ХозяйственнаяОперацияДоговора.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
		
	КонецЕсли;
	
	Возврат ХозяйственнаяОперацияДоговора;
	
КонецФункции

// Процедура выполняет заполнение табличной части "Расшифровка платежа" по остаткам расчетов с партнером.
//
// Параметры:
//	Реквизиты - Структура - Структура должна содержать значения: 
//				Дата, Организация, СуммаДокумента, Валюта, Контрагент, Партнер, ХозяйственнаяОперация
//	РасшифровкаПлатежа - ТабличнаяЧасть - Табличная часть документа
//
Процедура ЗаполнитьРасшифровкуПлатежаПоОстаткамРасчетов(Реквизиты, РасшифровкаПлатежа) Экспорт
	
	Перем Платежи;
	
	ЗаполнитьТаблицуОстатковРасчетов(
		Реквизиты,
		"", // Адрес платежей в хранилище
		Платежи
	);
	
	МассивУдаляемыхСтрок = Платежи.НайтиСтроки(Новый Структура("Выбран", Ложь));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		Платежи.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	Если Платежи.Итог("Сумма") < Реквизиты.СуммаДокумента Тогда
		СтрокаТаблицы = Платежи.Добавить();
		СтрокаТаблицы.Сумма = Реквизиты.СуммаДокумента - Платежи.Итог("Сумма");
		Если ЗначениеЗаполнено(Реквизиты.Партнер) Тогда
			СтрокаТаблицы.Партнер = Реквизиты.Партнер;
		Иначе
			СтрокаТаблицы.Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Реквизиты.Контрагент);
		КонецЕсли; 
		СтрокаТаблицы.Заказ = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
			Неопределено,
			СтрокаТаблицы.Партнер,
			Реквизиты.Контрагент,
			Реквизиты.Организация,
			ХозяйственнаяОперацияДоговора(Реквизиты.ХозяйственнаяОперация)
		);
	КонецЕсли;
	
	Платежи.Колонки.Добавить("ОснованиеПлатежа");
	Платежи.ЗагрузитьКолонку(Платежи.ВыгрузитьКолонку("Заказ"), "ОснованиеПлатежа");
	
	РасшифровкаПлатежа.Загрузить(Платежи);
	
КонецПроцедуры
