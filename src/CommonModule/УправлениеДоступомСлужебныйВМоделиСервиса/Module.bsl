///////////////////////////////////////////////////////////////////////////////////
// Подсистема "Управление доступом в модели сервиса".
//
///////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Устанавливает в очереди заданий флаг использования того задания, которое
// соответствует регламентному заданию для заполнения данных ограничения доступа.
//
// Параметры:
//  Использование - Булево - новое значения флага использования.
//
Процедура УстановитьИспользованиеЗаданияЗаполненияДанных(Знач Использование) Экспорт
	
	ОтборДляПоиска = Новый Структура("ИмяМетода", "УправлениеДоступомСлужебный.ЗаполнениеДанныхДляОграниченияДоступаОбработчикЗадания");
	МассивРегламентныеЗадания = ОчередьЗаданий.ПолучитьРегламентныеЗадания(ОтборДляПоиска);
	Для Каждого Задание Из МассивРегламентныеЗадания Цикл
		Задание.Использование = Использование;
		ОчередьЗаданий.Записать(Задание);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.0.4";
	Обработчик.Процедура = "УправлениеДоступомСлужебныйВМоделиСервиса.ОбновитьГруппыДоступаАдминистраторовВМоделиСервиса";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Перемещает всех пользователей из группы доступа "Администраторы данных" в
// группу доступа Администраторы.
//  Удаляет профиль "Администратор данных" и группу доступа "Администраторы данных".
// 
Процедура ОбновитьГруппыДоступаАдминистраторовВМоделиСервиса() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрофильАдминистраторДанныхСсылка = Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(
		Новый УникальныйИдентификатор("f0254dd0-3558-4430-84c7-154c558ae1c9"));
		
	ГруппаДоступаАдминистраторыДанныхСсылка = Справочники.ГруппыДоступа.ПолучитьСсылку(
		Новый УникальныйИдентификатор("c7684994-34c9-4ddc-b31c-05b2d833e249"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрофильАдминистраторДанныхСсылка",        ПрофильАдминистраторДанныхСсылка);
	Запрос.УстановитьПараметр("ГруппаДоступаАдминистраторыДанныхСсылка", ГруппаДоступаАдминистраторыДанныхСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	ГруппыДоступа.Ссылка = &ГруппаДоступаАдминистраторыДанныхСсылка
	|	И ГруппыДоступа.Профиль = &ПрофильАдминистраторДанныхСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
	|ГДЕ
	|	ПрофилиГруппДоступа.Ссылка = &ПрофильАдминистраторДанныхСсылка";
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("Справочник.ПрофилиГруппДоступа");
		Блокировка.Добавить("Справочник.ГруппыДоступа");
		Блокировка.Заблокировать();
		
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		Если НЕ РезультатыЗапроса[0].Пустой() Тогда
			ГруппаАдминистраторы = Справочники.ГруппыДоступа.Администраторы.ПолучитьОбъект();
			ГруппаАдминистраторыДанных = ГруппаДоступаАдминистраторыДанныхСсылка.ПолучитьОбъект();
			
			
			Если ГруппаАдминистраторыДанных.Пользователи.Количество() > 0 Тогда
				Для каждого Строка Из ГруппаАдминистраторыДанных.Пользователи Цикл
					Если ГруппаАдминистраторы.Пользователи.Найти(Строка.Пользователь, "Пользователь") = Неопределено Тогда
						ГруппаАдминистраторы.Пользователи.Добавить().Пользователь = Строка.Пользователь;
					КонецЕсли;
				КонецЦикла;
				ГруппаАдминистраторы.Записать();
			КонецЕсли;
			ГруппаАдминистраторыДанных.Удалить();
		КонецЕсли;
		
		Если НЕ РезультатыЗапроса[1].Пустой() Тогда
			ПрофильАдминистраторДанных = ПрофильАдминистраторДанныхСсылка.ПолучитьОбъект();
			ПрофильАдминистраторДанных.Удалить();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

