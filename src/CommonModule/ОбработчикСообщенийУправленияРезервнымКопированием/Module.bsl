////////////////////////////////////////////////////////////////////////////////
// Обработка сообщений удаленного администрирования
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выполняет обработку тела сообщения из канала в соответствии с алгоритмом текущего канала сообщений
//
// Параметры:
//  <КаналСообщений> (обязательный). Тип:Строка. Идентификатор канала сообщений, из которого получено сообщение.
//  <ТелоСообщения> (обязательный). Тип: Произвольный. Тело сообщения, полученное из канала, которое подлежит обработке.
//  <Отправитель> (обязательный). Тип: ПланОбменаСсылка.ОбменСообщениями. Конечная точка, которая является отправителем сообщения.
//
Процедура ОбработатьСообщение(Знач КаналСообщений, Знач ТелоСообщения, Знач Отправитель) Экспорт
	
	ТипСообщения = СообщенияВМоделиСервиса.ТипСообщенияПоИмениКанала(КаналСообщений);
	
	Сообщение = СообщенияВМоделиСервиса.ПрочитатьСообщениеИзНетипизированногоТела(ТелоСообщения);
	
	Словарь = РезервноеКопированиеОбластейДанныхПовтИсп;
	
	СообщенияВМоделиСервиса.ЗаписатьСобытиеНачалоОбработки(Сообщение);
	
	Если ТипСообщения = Словарь.СообщениеПланироватьАрхивациюОбласти() Тогда
		ПланироватьСозданиеРезервнойКопииОбласти(Сообщение, Отправитель);
	ИначеЕсли ТипСообщения = Словарь.СообщениеОтменитьАрхивациюОбласти() Тогда
		ОтменитьСозданиеРезервнойКопииОбласти(Сообщение, Отправитель);
	Иначе
		СообщенияВМоделиСервиса.ОшибкаНеизвестноеИмяКанала(КаналСообщений);
	КонецЕсли;
	
	СообщенияВМоделиСервиса.ЗаписатьСобытиеОкончаниеОбработки(Сообщение);
	
	Если ОбщегоНазначения.ИспользованиеРазделителяСеанса() Тогда
		ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Структура содержимого сообщения
//  Zone
//  BackupId
//  Date - Дата - момент запуска архивирования области
//  Forced - Булево - необходимость создавать копию вне зависимости от активности пользователей.
//
Процедура ПланироватьСозданиеРезервнойКопииОбласти(Сообщение, Отправитель)
	
	// При получении первого сообщения от МС взвести флаг поддержки.
	Если Не ПолучитьФункциональнуюОпцию("ПоддержкаРезервногоКопирования") Тогда
		РезервноеКопированиеОбластейДанных.УстановитьСтатусРезервногоКопирования();
	КонецЕсли;
	
	Тело = Сообщение.Body;
	
	ПараметрыВыгрузки = РезервноеКопированиеОбластейДанных.СоздатьПустыеПараметрыВыгрузки();
	ПараметрыВыгрузки.ОбластьДанных = Тело.Zone;
	ПараметрыВыгрузки.ИДКопии = Тело.BackupId;
	ПараметрыВыгрузки.МоментЗапуска = МестноеВремя(Тело.Date, // !Перевести универсальное в местное -
		РезервноеКопированиеОбластейДанных.ПолучитьЧасовойПоясОбластиДанных(Тело.Zone)); // в очередях на вход должно поступать местное.
	ПараметрыВыгрузки.Принудительно = Тело.Forced;
	ПараметрыВыгрузки.ПоТребованию = Ложь;
	
	РезервноеКопированиеОбластейДанных.ЗапланироватьАрхивациюВОчереди(ПараметрыВыгрузки);
	
КонецПроцедуры

Процедура ОтменитьСозданиеРезервнойКопииОбласти(Сообщение, Отправитель)
	
	Тело = Сообщение.Body;
	
	ПараметрыОтмены = Новый Структура("ОбластьДанных, ИДКопии", Тело.Zone, Тело.BackupId);
	РезервноеКопированиеОбластейДанных.ОтменитьСозданиеРезервнойКопииОбласти(ПараметрыОтмены);
	
КонецПроцедуры
