////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление версии ИБ"
// Серверные процедуры и функции обновления информационной базы
// при смене версии конфигурации.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Проверить необходимость обновления информационной базы при смене версии конфигурации.
//
Функция НеобходимоОбновлениеИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат НеобходимоВыполнитьОбновление(Метаданные.Версия, ВерсияИБ(Метаданные.Имя))
		Или (Константы.ТребуетсяОбновлениеИнформационнойБазы.Получить() И Не ТребуетсяОбновлениеКонфигурацииУзлаРИБ());
	
КонецФункции

// Возвращает Истина при необходимости обновления конфигурации информационной базы подчиненного узла РИБ.
// В главном узле всегда - Ложь.
//
Функция ТребуетсяОбновлениеКонфигурацииУзлаРИБ() Экспорт
	
	Возврат КонфигурацияИзменена() И ПланыОбмена.ГлавныйУзел() <> Неопределено;
	
КонецФункции

// Возвращает Истина, если выполняется обновление ИБ
Функция ВыполняетсяОбновлениеИнформационнойБазы() Экспорт
	
	Возврат НеобходимоОбновлениеИнформационнойБазы() И ЕстьПраваНаОбновлениеИнформационнойБазы();
	
КонецФункции

// Устанавливает необходимость принудительного обновления конфигурации информационной базы.
Процедура УстановитьПризнакНеобходимостиОбновленияКонфигурацииИнформационнойБазы() Экспорт
	Константы.ТребуетсяОбновлениеИнформационнойБазы.Установить(Истина);
КонецПроцедуры

// Снимает признак необходимости принудительного обновления конфигурации информационной базы.
Процедура СнятьПризнакНеобходимостиОбновленияКонфигурацииИнформационнойБазы() Экспорт
	Если Константы.ТребуетсяОбновлениеИнформационнойБазы.Получить() Тогда
		Константы.ТребуетсяОбновлениеИнформационнойБазы.Установить(Ложь);
	КонецЕсли;
КонецПроцедуры

// Возвращает пустую таблицу обработчиков обновления и первоначального заполнения ИБ.
//
// Возвращаемое значение:
//   ТаблицаЗначений   – таблица с колонками:
//                       Версия        - номер версии конфигурации, при переходе на которую должна
//                                       быть выполнена процедура-обработчик обновления
//                       Процедура     - полное имя процедуры-обработчика обновления. 
//                                       Должна быть обязательно экспортной. 
//                       Опциональный  - если Истина, то обработчик не должен срабатывать
//                                       при первом запуске на "пустой" базе.
//                       Приоритет     - Число. Для внутреннего использования.
//                       ОбщиеДанные   - если Истина, то обработчик должен срабатывать до
//                                       выполнения любых обработчиков, использующих разделенные
//                                       данные.
//
Функция НоваяТаблицаОбработчиковОбновления() Экспорт
	
	Обработчики = Новый ТаблицаЗначений;
	Обработчики.Колонки.Добавить("Версия", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Процедура", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	Обработчики.Колонки.Добавить("Опциональный");
	Обработчики.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)));
	Обработчики.Колонки.Добавить("ОбщиеДанные", Новый ОписаниеТипов("Булево"));
	Возврат Обработчики;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает Истина, если требуется обновление ИБ и у текущего пользователя
// для этого недостаточно прав.
//
Функция ПроверитьНевозможностьОбновленияИнформационнойБазы() Экспорт
	
	ВерсияМетаданных = Метаданные.Версия;
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;
	
	ТребуетсяОбновлениеОбщихДанных = Ложь;
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ВерсияОбщихДанных = ВерсияИБ(Метаданные.Имя, Истина);
		Если НеобходимоВыполнитьОбновление(ВерсияМетаданных, ВерсияОбщихДанных) Тогда
			ТребуетсяОбновлениеОбщихДанных = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Сообщение = "";
	Если ТребуетсяОбновлениеОбщихДанных Тогда
		Сообщение = НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением версии конфигурации. 
			|Обратитесь к администратору за подробностями.'");
	ИначеЕсли НеобходимоОбновлениеИнформационнойБазы() И НЕ ЕстьПраваНаОбновлениеИнформационнойБазы() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ПустойСписокПользователей = Не ЗначениеЗаполнено(ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
		УстановитьПривилегированныйРежим(Ложь);
		Если ПустойСписокПользователей Тогда
			Сообщение = НСтр("ru = 'Для завершения обновления конфигурации требуются административные права.
				|Необходимо добавить в список пользователей информационной базы учетную запись администратора с двумя ролями ""Администратор системы"" и ""Полные права"",
				|и повторить запуск программы от его имени.
				|
				|Для перехода к списку пользователей информационной базы необходимо открыть Конфигуратор и воспользоваться пунктом меню ""Администрирование - Пользователи"".'");
		ИначеЕсли ПравоДоступа("Администрирование", Метаданные) Тогда
			Сообщение = НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением версии конфигурации. 
				|Для завершения обновления конфигурации требуются административные права (роль ""Администратор системы"").'");
		Иначе
			Сообщение = НСтр("ru = 'Вход в программу временно невозможен в связи с обновлением версии конфигурации. 
				|Обратитесь к администратору за подробностями.'");
		КонецЕсли;	
	КонецЕсли;

	Возврат Сообщение;
	
КонецФункции	

// Выполнить неинтерактивное обновление данных ИБ.
//
// Принудительно - Булево - если Истина, то обновление ИБ будет выполнено 
//                          даже если версия конфигурации не менялась.
// 
// Результат:
//      Неопределено - обновление не выполнялось (не требуется)
//      Строка       - адрес временного хранилища со списком выполненных обработчиков обновления
//
Функция ВыполнитьОбновлениеИнформационнойБазы(Знач Принудительно = Ложь) Экспорт
	
	ВерсияМетаданных = Метаданные.Версия;
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;
	ВерсияДанных = ВерсияИБ(Метаданные.Имя);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ВерсияОбщихДанных = ВерсияИБ(Метаданные.Имя, Истина);
		Если НеобходимоВыполнитьОбновление(ВерсияМетаданных, ВерсияОбщихДанных) Тогда
			Сообщение = НСтр("ru = 'Не выполнена общая часть обновления информационной базы.
				|Обратитесь к системному администратору.'");
			ЗаписатьОшибку(Сообщение);
			ВызватьИсключение Сообщение;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Принудительно И НЕ НеобходимоОбновлениеИнформационнойБазы() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтандартныеПодсистемыПереопределяемый.ПередОбновлениемИнформационнойБазы();
	ОбновлениеИнформационнойБазыПереопределяемый.ПередОбновлениемИнформационнойБазы();
	
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Изменился номер версии конфигурации: с ""%1"" на ""%2"". Будет выполнено обновление информационной базы.'"),
		ВерсияДанных, ВерсияМетаданных);
	ЗаписатьИнформацию(Сообщение);
	
	// Проверка наличия прав для обновления информационной базы.
	Если НЕ ЕстьПраваНаОбновлениеИнформационнойБазы() Тогда
		Сообщение = НСтр("ru = 'Недостаточно прав для выполнения обновления. Обратитесь к системному администратору.'");
		ЗаписатьОшибку(Сообщение);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	КлючЗаписи = Неопределено;
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			УстановитьПривилегированныйРежим(Истина);
		КонецЕсли;
		
		ЗначенияКлюча = Новый Структура;
		Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			ЗначенияКлюча.Вставить("ОбластьДанных", ОбщегоНазначения.ЗначениеРазделителяСеанса());
		Иначе
			ЗначенияКлюча.Вставить("ОбластьДанных", -1);
		КонецЕсли;
		ЗначенияКлюча.Вставить("ИмяПодсистемы", "");
		КлючЗаписи = РегистрыСведений.ВерсииПодсистем.СоздатьКлючЗаписи(ЗначенияКлюча);
		ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		РежимОтладки = Ложь;
	Иначе
		ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить("ОбновлениеВерсииИБ", "РежимОтладки");
		РежимОтладки = ЗначениеНастройки = Истина;
	КонецЕсли;
	
	// Установка монопольного режима для обновления информационной базы.
	Если НЕ РежимОтладки Тогда
		Попытка
			ОбщегоНазначения.ЗаблокироватьИБ();
		Исключение
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно выполнить обновление информационной базы, так как к ней подключены другие сеансы.
					 |Обратитесь к системному администратору.
					 |
					 |Подробности ошибки:
					 |%1'"), КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписатьОшибку(Сообщение);
			
			Если КлючЗаписи <> Неопределено Тогда
				РазблокироватьДанныеДляРедактирования(КлючЗаписи);
			КонецЕсли;
			
			ВызватьИсключение Сообщение;
		КонецПопытки;
	КонецЕсли;
	
	
	Попытка
		СписокОбработчиковОбновления = ОбновлениеИнформационнойБазыПереопределяемый.ОбработчикиОбновления();
		
		// Также всегда вызываются процедуры обновления данных библиотеки стандартных подсистем
		//
		Обработчик = СписокОбработчиковОбновления.Добавить();
		Обработчик.Версия = "*";
		Обработчик.Приоритет = 99; // выполнять первым
		Обработчик.Процедура = "СтандартныеПодсистемыСервер.ВыполнитьОбновлениеИнформационнойБазы";
		Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			Обработчик.ОбщиеДанные = Истина;
		КонецЕсли;
		
		ВыполненныеОбработчики = ВыполнитьИтерациюОбновления(Метаданные.Имя, Метаданные.Версия,
			СписокОбработчиковОбновления);
	Исключение
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обновление информационной базы на версию ""%1"" завершилось с ошибками: 
				|%2'"), ВерсияМетаданных, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписатьОшибку(Сообщение);
		// Отключение монопольного режима.
		Если НЕ РежимОтладки Тогда
			
			Если МонопольныйРежим() Тогда
				Пока ТранзакцияАктивна() Цикл
					ОтменитьТранзакцию();
				КонецЦикла;
			КонецЕсли;
				
			ОбщегоНазначения.РазблокироватьИБ();
			
			Если КлючЗаписи <> Неопределено Тогда
				РазблокироватьДанныеДляРедактирования(КлючЗаписи);
			КонецЕсли;
		КонецЕсли;	
		ВызватьИсключение;
	КонецПопытки;
	
	// Отключение монопольного режима.
	Если НЕ РежимОтладки Тогда
		ОбщегоНазначения.РазблокироватьИБ();
		Если КлючЗаписи <> Неопределено Тогда
			РазблокироватьДанныеДляРедактирования(КлючЗаписи);
		КонецЕсли;
	КонецЕсли;	
	
	Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Обновление информационной базы на версию ""%1"" выполнено успешно.'"), ВерсияМетаданных);
	ЗаписатьИнформацию(Сообщение);
	
	ВыводитьОписаниеОбновлений = ВерсияДанных <> "0.0.0.0";
	СтандартныеПодсистемыПереопределяемый.ПослеОбновленияИнформационнойБазы(ВерсияДанных, ВерсияМетаданных, 
		ВыполненныеОбработчики, ВыводитьОписаниеОбновлений);
	ОбновлениеИнформационнойБазыПереопределяемый.ПослеОбновленияИнформационнойБазы(ВерсияДанных, ВерсияМетаданных, 
		ВыполненныеОбработчики, ВыводитьОписаниеОбновлений);
		
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		СнятьПризнакНеобходимостиОбновленияКонфигурацииИнформационнойБазы();
	КонецЕсли;
		
	Адрес = "";
	Если ВыводитьОписаниеОбновлений Тогда
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
			И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
			
			СохранитьИнформациюОбОбновленииДляПользователей(ВыполненныеОбработчики);
		Иначе
			Адрес = ПоместитьВоВременноеХранилище(ВыполненныеОбработчики, Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Адрес;

КонецФункции

// Выполнить обработчики обновления из списка ОбработчикиОбновления 
// для библиотеки ИдентификаторБиблиотеки до версии ВерсияМетаданныхИБ.
//
// Параметры
//  ИдентификаторБиблиотеки  – Строка – имя конфигурации или идентификатор библиотеки.
//  ВерсияМетаданныхИБ       – Строка – версия метаданных, до которой необходимо
//                                      выполнить обновление.
//  ОбработчикиОбновления    – Соответствие – список обработчиков обновления.
//
// Возвращаемое значение:
//   ДеревоЗначений   – выполненные обработчики обновления.
//
Функция ВыполнитьИтерациюОбновления(Знач ИдентификаторБиблиотеки, Знач ВерсияМетаданныхИБ, 
	Знач ОбработчикиОбновления) Экспорт
	
	ТекущаяВерсияИБ = ВерсияИБ(ИдентификаторБиблиотеки);
	Если ПустаяСтрока(ТекущаяВерсияИБ) Тогда
		 ТекущаяВерсияИБ = "0.0.0.0";
	КонецЕсли;
	НоваяВерсияИБ = ТекущаяВерсияИБ;
	ВерсияМетаданных = ВерсияМетаданныхИБ;
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		 ВерсияМетаданных = "0.0.0.0";
	КонецЕсли;
	
	ВыполняемыеОбработчики = ОбработчикиОбновленияВИнтервале(ОбработчикиОбновления, ТекущаяВерсияИБ, ВерсияМетаданных);
	ОтключитьОбработчикиОбновления(ИдентификаторБиблиотеки, ВыполняемыеОбработчики, ВерсияМетаданных);
	Для Каждого Версия Из ВыполняемыеОбработчики.Строки Цикл
		
		Если Версия.Версия = "*" Тогда
			Сообщение = НСтр("ru = 'Выполняются обязательные процедуры обновления информационной базы.'");
		Иначе
			НоваяВерсияИБ = Версия.Версия;
			
			Если ИдентификаторБиблиотеки = Метаданные.Имя Тогда 
				Сообщение = НСтр("ru = 'Выполняется обновление информационной базы с версии %1 на версию %2.'");
			Иначе
				Сообщение = НСтр("ru = 'Выполняется обновление информационной базы родительской конфигурации %3 с версии %1 на версию %2.'");
			КонецЕсли;
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
			                 ТекущаяВерсияИБ, НоваяВерсияИБ, ИдентификаторБиблиотеки);
			
		КонецЕсли;
		
		ЗаписатьИнформацию(Сообщение);
		
		Для Каждого Обработчик Из Версия.Строки Цикл
			ОбщегоНазначения.ВыполнитьБезопасно(Обработчик.Процедура);
		КонецЦикла;
		
		Если Версия.Версия = "*" Тогда
			Сообщение = НСтр("ru = 'Выполнены обязательные процедуры обновления информационной базы.'");
		Иначе
			// Установка номера версии информационной базы
			УстановитьВерсиюИБ(ИдентификаторБиблиотеки, НоваяВерсияИБ);
			
			Если ИдентификаторБиблиотеки = Метаданные.Имя Тогда 
				Сообщение = НСтр("ru = 'Выполнено обновление информационной базы с версии %1 на версию %2.'");
			Иначе
				Сообщение = НСтр("ru = 'Выполнено обновление информационной базы родительской конфигурации %3 с версии %1 на версию %2.'");
			КонецЕсли;
			
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
			  ТекущаяВерсияИБ, НоваяВерсияИБ, ИдентификаторБиблиотеки);
			
			ТекущаяВерсияИБ = НоваяВерсияИБ;
			
		КонецЕсли;
		ЗаписатьИнформацию(Сообщение);
		
	КонецЦикла;
	
	// Установка номера версии информационной базы
	Если ВерсияИБ(ИдентификаторБиблиотеки) <> ВерсияМетаданныхИБ Тогда
		УстановитьВерсиюИБ(ИдентификаторБиблиотеки, ВерсияМетаданныхИБ);
	КонецЕсли;
	
	Возврат ВыполняемыеОбработчики;
	
КонецФункции

// Получить версию конфигурации или родительской конфигурации (библиотеки),
// которая хранится в информационной базе.
//
// Параметры
//  ИдентификаторБиблиотеки  – Строка – имя конфигурации или идентификатор библиотеки.
//
// Возвращаемое значение:
//   Строка   – версия.
//
// Пример использования:
//   ВерсияКонфигурацииИБ = ВерсияИБ(Метаданные.Имя);
//
Функция ВерсияИБ(Знач ИдентификаторБиблиотеки, Знач ПолучитьВерсиюОбщихДанных = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсииПодсистем.Версия КАК Версия
	|ИЗ
	|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	|ГДЕ
	|	ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы
	|	И ВерсииПодсистем.ОбластьДанных = &ОбластьДанных";
	Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() 
		ИЛИ ПолучитьВерсиюОбщихДанных Тогда
		
		ОбластьДанных = -1;
	Иначе
		ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	КонецЕсли;
	Запрос.УстановитьПараметр("ОбластьДанных", ОбластьДанных);
	Запрос.УстановитьПараметр("ИмяПодсистемы", ИдентификаторБиблиотеки);
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();
	Результат = "";
	Если ТаблицаЗначений.Количество() > 0 Тогда
		Результат = СокрЛП(ТаблицаЗначений[0].Версия);
	КонецЕсли;
	Возврат ?(ПустаяСтрока(Результат), "0.0.0.0", Результат);
	
КонецФункции

// Возвращает Истина если вход в программу (область данных)
// выполняется первый раз, иначе возвращает Ложь.
//
Функция ПервыйВходВОбластьДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1
	|ИЗ
	|	РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем";
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает Истина если запуск информационной базы 
// выполняется первый раз, иначе возвращает Ложь.
//
Функция ПервыйЗапускИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат НЕ Константы.ИспользоватьРазделениеПоОбластямДанных.Получить()
		И НЕ Константы.НеИспользоватьРазделениеПоОбластямДанных.Получить()
		И НЕ Константы.ЭтоАвтономноеРабочееМесто.Получить();
		
КонецФункции

// Добавляет параметры работы клиентской логики при запуске системы для подсистемы обмена данными в модели сервиса
//
Процедура ДобавитьПараметрыРаботыКлиентскойЛогикиПриЗапуске(Параметры) Экспорт
	
	Параметры.Вставить("ПервыйВходВОбластьДанных", ПервыйВходВОбластьДанных());
	Параметры.Вставить("ПоказатьОписаниеИзмененийСистемы", ПоказатьОписаниеИзмененийСистемы());

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры для установки/обновления/получения параметров работы программы (кэшей).

// Возвращает параметры работы программы для использования (фиксированные данные),
// которые являются, например, кэшем.
//
Функция ПараметрыРаботыПрограммы(ИмяКонстанты) Экспорт
	
	Возврат ОбновлениеИнформационнойБазыСлужебныйПовтИсп.ПараметрыРаботыПрограммы(ИмяКонстанты);
	
КонецФункции

// Возвращает изменения параметра работы программы с учетом текущей версии
// конфигурации и текущей версии ИБ.
//
// Параметры:
//  Параметры    - значение извлеченное из константы, имя которой передавалось
//                 в процедуру ДобавитьИзмененияПараметраРаботыПрограммы.
//
//  ИмяПараметра - Строка, которая передавалась, как параметр ИмяПараметра
//                 в процедуру ДобавитьИзмененияПараметраРаботыПрограммы.
//
// Возвращаемое значение:
//  Массив - содержит значения изменений. Может быть несколько, например,
//           когда область данных давно не обновлялась.
//
Функция ИзмененияПараметраРаботыПрограммы(Параметры, ИмяПараметра) Экспорт
	
	ПоследниеИзменения = Параметры["ИзмененияПараметра" + ИмяПараметра].Получить();
	
	Версия = Метаданные.Версия;
	СледующаяВерсия = СледующаяВерсия(Версия);
	ВерсияИБ = ВерсияИБ(Метаданные.Имя);
	ОбновлениеВнеОбновленияИБ = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияИБ , Версия) = 0;
	
	// Изменения к более старшим версиям не нужны,
	// кроме случая когда обновление выполняется вне обновления ИБ,
	// т.е. версия ИБ равна версии конфигурации.
	// В этом случае дополнительно выбираются изменения к следующей версии.
	
	Индекс = ПоследниеИзменения.Количество()-1;
	Пока Индекс >=0 Цикл
		ВерсияИзменения = ПоследниеИзменения[Индекс].ВерсияКонфигурации;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияИБ, ВерсияИзменения) >= 0
		   И НЕ (ОбновлениеВнеОбновленияИБ
		     И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СледующаяВерсия, ВерсияИзменения) = 0) Тогда
			
			ПоследниеИзменения.Удалить(Индекс);
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Возврат ПоследниеИзменения.ВыгрузитьКолонку("Изменения");
	
КонецФункции

// Устанавливает вспомогательные данные для работы программы, хранимые в неразделенных константах.
//
// Параметры:
//  ИмяКонстанты      - Строка - имя неразделенной константы, в которой сохраняется значение параметра.
//  ИмяПараметра      - Строка - имя параметра, который нужно установить (без приставки ИзмененияПараметра).
//  ЗначениеПараметра - фиксированные данные, которые устанавливаются в качестве значения параметра.
//
Процедура УстановитьПараметрРаботыПрограммы(ИмяКонстанты, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Параметры = Константы[ИмяКонстанты].Получить().Получить();
		Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
			Параметры = Новый Структура;
		КонецЕсли;
		
		Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
		
		Константы[ИмяКонстанты].Установить(Новый ХранилищеЗначения(Параметры));
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Добавить изменения вспомогательных данных для работы программы, хранимые в неразделенных константах.
//
// Параметры:
//  ИмяКонстанты       - Строка - имя неразделенной константы, в которой сохраняется значение параметра.
//  ИмяПараметра       - Строка - имя параметра, который нужно установить.
//  ИзмененияПараметра - фиксированные данные, которые регистрируются в качестве изменений параметра.
//                       Изменения не добавляются, если значение ИзменениеПараметра не заполнено.
//
Процедура ДобавитьИзмененияПараметраРаботыПрограммы(ИмяКонстанты, ИмяПараметра, ИзмененияПараметра) Экспорт
	
	ОбновитьСоставИзменений = Ложь;
	Параметры = ОбновлениеИнформационнойБазыСлужебныйПовтИсп.ПараметрыРаботыПрограммы(ИмяКонстанты);
	
	ИмяПараметраХраненияИзменений = "ИзмененияПараметра" + ИмяПараметра;
	
	Если Параметры.Свойство(ИмяПараметраХраненияИзменений) Тогда
		ПоследниеИзменения = Параметры[ИмяПараметраХраненияИзменений].Получить();
		
		Если ТипЗнч(ПоследниеИзменения)              <> Тип("ТаблицаЗначений")
		 ИЛИ ПоследниеИзменения.Колонки.Количество() <> 2
		 ИЛИ ПоследниеИзменения.Колонки[0].Имя       <> "ВерсияКонфигурации"
		 ИЛИ ПоследниеИзменения.Колонки[1].Имя       <> "Изменения" Тогда
			
			ПоследниеИзменения = Неопределено;
		КонецЕсли;
	Иначе
		ПоследниеИзменения = Неопределено;
	КонецЕсли;
	
	Если ПоследниеИзменения = Неопределено Тогда
		ОбновитьСоставИзменений = Истина;
		ПоследниеИзменения = Новый ТаблицаЗначений;
		ПоследниеИзменения.Колонки.Добавить("ВерсияКонфигурации");
		ПоследниеИзменения.Колонки.Добавить("Изменения");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИзмененияПараметра) Тогда
		
		// Если производится обновление вне обновления ИБ,
		// тогда требуется добавить изменения к следующей версии,
		// чтобы при переходе на очередную версию изменения
		// выполненные вне обновления ИБ были учтены.
		Версия = Метаданные.Версия;
		
		ОбновлениеВнеОбновленияИБ = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(
			ВерсияИБ(Метаданные.Имя) , Версия) = 0;
		
		Если ОбновлениеВнеОбновленияИБ Тогда
			Версия = СледующаяВерсия(Версия);
		КонецЕсли;
		
		ОбновитьСоставИзменений = Истина;
		Строка = ПоследниеИзменения.Добавить();
		Строка.Изменения          = ИзмененияПараметра;
		Строка.ВерсияКонфигурации = Версия;
	КонецЕсли;
	
	МинимальнаяВерсияИБ = ОбновлениеИнформационнойБазыСлужебныйПовтИсп.МинимальнаяВерсияИБ();
	
	// Удаление изменений для версий ИБ, которые меньше минимальной
	// вместо версий меньше или равных минимальной, чтобы обеспечить
	// возможность обновления вне обновления ИБ.
	Индекс = ПоследниеИзменения.Количество()-1;
	Пока Индекс >=0 Цикл
		ВерсияИзменения = ПоследниеИзменения[Индекс].ВерсияКонфигурации;
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(МинимальнаяВерсияИБ, ВерсияИзменения) > 0 Тогда
			ПоследниеИзменения.Удалить(Индекс);
			ОбновитьСоставИзменений = Истина;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Если ОбновитьСоставИзменений Тогда
		УстановитьПараметрРаботыПрограммы(
			ИмяКонстанты,
			ИмяПараметраХраненияИзменений,
			Новый ХранилищеЗначения(ПоследниеИзменения));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Общего назначения

// Для внутреннего использования.
//
Функция НеобходимоВыполнитьОбновление(Знач ВерсияМетаданных, Знач ВерсияДанных) Экспорт
	Возврат НЕ ПустаяСтрока(ВерсияМетаданных) И ВерсияДанных <> ВерсияМетаданных;
КонецФункции

// Для внутреннего использования.
//
Процедура УпорядочитьДеревоОбработчиковОбновления(Знач ДеревоОбработчиков) Экспорт
	
	// упорядочить обработчики по возрастанию версий
	КоличествоСтрок = ДеревоОбработчиков.Строки.Количество();
	Для Инд1 = 2 По КоличествоСтрок Цикл
		Для Инд2 = 0 По КоличествоСтрок - Инд1 Цикл
			
			Версия1 = ДеревоОбработчиков.Строки[Инд2].Версия;
			Версия2 = ДеревоОбработчиков.Строки[Инд2+1].Версия;
			Если Версия1 = "*" Тогда
				Результат = -1;
			ИначеЕсли Версия2 = "*" Тогда
				Результат = 1;
			Иначе
				Результат = ОбщегоНазначенияКлиентСервер.СравнитьВерсии(Версия1, Версия2);
			КонецЕсли;
			
			Если Результат > 0  Тогда 
				ДеревоОбработчиков.Строки.Сдвинуть(Инд2, 1);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// упорядочить "*"-обработчики по приоритетам
	Для Каждого Версия Из ДеревоОбработчиков.Строки Цикл
		
		Если Версия.Версия <> "*"  Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоСтрок = Версия.Строки.Количество();
		Для Инд1 = 2 По КоличествоСтрок Цикл
			Для Инд2 = 0 По КоличествоСтрок - Инд1 Цикл
				
				Приоритет1 = Версия.Строки[Инд2].Приоритет;
				Приоритет2 = Версия.Строки[Инд2+1].Приоритет;
				Приоритет1 = ?(Приоритет1 <> Неопределено, Приоритет1, 0);
				Приоритет2 = ?(Приоритет2 <> Неопределено, Приоритет2, 0);
				
				Результат = Приоритет2 - Приоритет1;
				Если Результат > 0  Тогда 
					Версия.Строки.Сдвинуть(Инд2, 1);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Протоколирование хода обновления

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Обновление информационной базы'");
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// Описание обновлений

// Формирует табличный документ с описанием изменений в версиях,
// которые соответствуют переданному списку версий ОбработчикиОбновления.
//
Функция ДокументОписаниеОбновлений(Знач ОбработчикиОбновления) Экспорт
	
	ДокументОписаниеОбновлений = Новый ТабличныйДокумент();
	Если ОбработчикиОбновления = Неопределено Тогда
		Возврат ДокументОписаниеОбновлений;
	КонецЕсли;
	
	МакетОписаниеОбновлений = Метаданные.ОбщиеМакеты.Найти("ОписаниеИзмененийСистемы");
	Если МакетОписаниеОбновлений <> Неопределено Тогда
		МакетОписаниеОбновлений = ПолучитьОбщийМакет(МакетОписаниеОбновлений);
	Иначе	
		МакетОписаниеОбновлений = Новый ТабличныйДокумент();
	КонецЕсли;
	
	Для Каждого Версия Из ОбработчикиОбновления.Строки Цикл
		
		Если Версия.Версия = "*" Тогда
			Продолжить;
		КонецЕсли;
		
		ВывестиОписаниеИзменений(Версия.Версия, ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		
	КонецЦикла;
	
	Возврат ДокументОписаниеОбновлений;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Общего назначения

// Проверить права текущего пользователя на выполнение обновления информационной базы.
//
Функция ЕстьПраваНаОбновлениеИнформационнойБазы()
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(, Истина);
	
КонецФункции

Процедура УстановитьВерсиюИБ(Знач ИдентификаторБиблиотеки, Знач НомерВерсии)
	
	Если НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		ОбластьДанных = -1;
	Иначе
		ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбластьДанных.Установить(ОбластьДанных);
	НаборЗаписей.Отбор.ИмяПодсистемы.Установить(ИдентификаторБиблиотеки);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	
	НоваяЗапись.ОбластьДанных = ОбластьДанных;
	НоваяЗапись.ИмяПодсистемы = ИдентификаторБиблиотеки;
	НоваяЗапись.Версия = НомерВерсии;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ОбработчикиОбновленияВИнтервале(Знач ВсеОбработчики, Знач ВерсияОт, Знач ВерсияДо)
	
	ПостроительЗапроса = Новый ПостроительЗапроса();
	Источник = Новый ОписаниеИсточникаДанных(ВсеОбработчики);
	Источник.Колонки.Версия.Измерение = Истина;
	ПостроительЗапроса.ИсточникДанных = Источник;
	ПостроительЗапроса.Измерения.Добавить("Версия");
	ПостроительЗапроса.Выполнить();
	ВыборкаИтоги = ПостроительЗапроса.Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ФильтрОбщиеДанные = Новый Массив;
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ФильтрОбщиеДанные.Добавить(НЕ ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных());
	Иначе
		ФильтрОбщиеДанные.Добавить(Истина);
		ФильтрОбщиеДанные.Добавить(Ложь);
	КонецЕсли;
	
	ВыполняемыеОбработчики = Новый ДеревоЗначений();
	ВыполняемыеОбработчики.Колонки.Добавить("Версия");
	ВыполняемыеОбработчики.Колонки.Добавить("Процедура");
	ВыполняемыеОбработчики.Колонки.Добавить("Приоритет");
	Пока ВыборкаИтоги.Следующий() Цикл
		
		Если ВыборкаИтоги.Версия <> "*" И 
			НЕ (ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВыборкаИтоги.Версия, ВерсияОт) > 0 
				И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВыборкаИтоги.Версия, ВерсияДо) <= 0) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВерсии = Неопределено;
		Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Если Выборка.Процедура = Null Тогда
				Продолжить;
			КонецЕсли;
			Если Выборка.Опциональный = Истина И ВерсияОт = "0.0.0.0" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ФильтрОбщиеДанные.Найти(Выборка.ОбщиеДанные) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаВерсии = Неопределено Тогда
				СтрокаВерсии = ВыполняемыеОбработчики.Строки.Добавить();
				СтрокаВерсии.Версия = ВыборкаИтоги.Версия;
			КонецЕсли;
			Обработчик = СтрокаВерсии.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Обработчик, Выборка, "Версия,Процедура,Приоритет");
		КонецЦикла;
		
	КонецЦикла;
	
	УпорядочитьДеревоОбработчиковОбновления(ВыполняемыеОбработчики);
	
	Возврат ВыполняемыеОбработчики;
	
КонецФункции

Процедура СохранитьИнформациюОбОбновленииДляПользователей(Знач ВыполненныеОбработчики)
	
	СтруктураКолонок = СтруктураКолонок(ВыполненныеОбработчики);
	
	Для каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		
		// Пропустить служебных пользователей, у которых длина имени может превышать 
		// максимально разрешенную величину: 64.
		Если СтрДлина(ПользовательИБ.Имя) > 64 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыполненныеРанееОбработчики = ХранилищеОбщихНастроек.Загрузить("ОбновлениеИБ", 
			"ВыполненныеОбработчики", , ПользовательИБ.Имя);
		
		ДеревоОбработчиков = ВыполненныеОбработчики;
			
		Если ВыполненныеРанееОбработчики <> Неопределено Тогда
			СкопироватьСтрокиВДерево(ДеревоОбработчиков.Строки, ВыполненныеРанееОбработчики.Строки, СтруктураКолонок);
			УпорядочитьДеревоОбработчиковОбновления(ДеревоОбработчиков);
		КонецЕсли;
		
		ОписаниеНастроек = Новый ОписаниеНастроек;
		ОписаниеНастроек.Представление = НСтр("ru = 'Выполненные обработчики обновления информационной базы'");
		
		ХранилищеОбщихНастроек.Сохранить("ОбновлениеИБ", "ВыполненныеОбработчики", ДеревоОбработчиков,
			ОписаниеНастроек, ПользовательИБ.Имя);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураКолонок(Знач КоллекцияИсточник)
	
	Результат = Новый Структура;
	Для каждого Колонка Из КоллекцияИсточник.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура СкопироватьСтрокиВДерево(Знач СтрокиПриемника, Знач СтрокиИсточника, Знач СтруктураКолонок)
	
	Для каждого СтрокаИсточника Из СтрокиИсточника Цикл
		ЗаполнитьЗначенияСвойств(СтруктураКолонок, СтрокаИсточника);
		НайденныеСтроки = СтрокиПриемника.НайтиСтроки(СтруктураКолонок);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаПриемника = СтрокиПриемника.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
		Иначе
			СтрокаПриемника = НайденныеСтроки[0];
		КонецЕсли;
		
		СкопироватьСтрокиВДерево(СтрокаПриемника.Строки, СтрокаИсточника.Строки, СтруктураКолонок);
	КонецЦикла;
	
КонецПроцедуры

// Отключает обработчики обновления, заполненные в процедуре
// ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьОтключаемыеОбработчикиОбновления.
//
// Параметры:
//  ИдентификаторБиблиотеки - Строка - имя конфигурации или идентификатор библиотеки.
//  ВыполняемыеОбработчики  - ДеревоЗначений - обработчики обновления ИБ.
//  ВерсияМетаданныхИБ      – Строка – версия метаданных. Отключаются только те обработчики
//                                     у которых версия совпадает с версией метаданных.
//
Процедура ОтключитьОбработчикиОбновления(ИдентификаторБиблиотеки, ВыполняемыеОбработчики, ВерсияМетаданных)
	
	ОтключаемыеОбработчики = Новый ТаблицаЗначений;
	ОтключаемыеОбработчики.Колонки.Добавить("ИдентификаторБиблиотеки");
	ОтключаемыеОбработчики.Колонки.Добавить("Процедура");
	ОтключаемыеОбработчики.Колонки.Добавить("Версия");
	ОбновлениеИнформационнойБазыПереопределяемый.ДобавитьОтключаемыеОбработчикиОбновления(ОтключаемыеОбработчики);
	// Поиск строки дерева, содержащей обработчики обновления с версией "*"
	ОбработчикиБиблиотеки = ВыполняемыеОбработчики.Строки.Найти("*", "Версия", Ложь);
	
	Для Каждого ОтключаемыйОбработчик Из ОтключаемыеОбработчики Цикл
		
		// Проверка того, что отключаемый обработчик принадлежит переданной библиотеке
		Если ИдентификаторБиблиотеки <> ОтключаемыйОбработчик.ИдентификаторБиблиотеки Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка, находится ли обработчик в списке исключения
		ВыполняемыйОбработчик = ВыполняемыеОбработчики.Строки.Найти(ОтключаемыйОбработчик.Процедура, "Процедура", Истина);
		Если ВыполняемыйОбработчик <> Неопределено И ВыполняемыйОбработчик.Версия = "*"
			И ОтключаемыйОбработчик.Версия = ВерсияМетаданных Тогда
			ОбработчикиБиблиотеки.Строки.Удалить(ВыполняемыйОбработчик);
		ИначеЕсли ВыполняемыйОбработчик <> Неопределено И ВыполняемыйОбработчик.Версия <> "*"
			И ОтключаемыйОбработчик.Версия = ВерсияМетаданных Тогда
			ТекстИсключения = НСтр("ru='Обработчик обновления %1 не может быть отключен, 
										|так как он выполняется только при переходе на версию %2'");
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения,
				ВыполняемыйОбработчик.Процедура, ВыполняемыйОбработчик.Версия);
			
			ВызватьИсключение ТекстИсключения;
		ИначеЕсли ВыполняемыйОбработчик = Неопределено Тогда
			ТекстИсключения = НСтр("ru='Отключаемый обработчик обновления %1 не существует'");
			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИсключения,
				ОтключаемыйОбработчик.Процедура);
			
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СледующаяВерсия(Версия)
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Версия, ".");
	
	Возврат ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(
		Версия) + "." + Формат(Число(Массив[3]) + 1, "ЧГ=");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Протоколирование хода обновления

Процедура ЗаписатьИнформацию(Знач Текст)
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,, Текст);
	
КонецПроцедуры

Процедура ЗаписатьОшибку(Знач Текст) 
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Текст);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Описание обновлений

// Вывести описания изменений в указанной версии
//
// Параметры
//  НомерВерсии  – Строка - номер версии, для которого выводится описание из макета
//                          табличного документа МакетОписаниеОбновлений в табличный документ 
//                          ДокументОписаниеОбновлений.
//
Процедура ВывестиОписаниеИзменений(Знач НомерВерсии, ДокументОписаниеОбновлений, МакетОписаниеОбновлений)
	
	Номер = СтрЗаменить(НомерВерсии, ".", "_");
	
	Если МакетОписаниеОбновлений.Области.Найти("Шапка" + Номер) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + Номер));
	ДокументОписаниеОбновлений.НачатьГруппуСтрок("Версия" + Номер);
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + Номер));
	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
	
КонецПроцедуры

// Возвращает Истина, если у пользователя не отключен показ описания изменений
// системы после обновления и есть непоказанные изменения.
//
Функция ПоказатьОписаниеИзмененийСистемы()
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НеПоказывать = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбновлениеИБ", 
		"НеПоказыватьОписаниеИзмененийСистемы");
	Если НеПоказывать = Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВыполненныеОбработчики = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбновлениеИБ", 
		"ВыполненныеОбработчики");
	Возврат ВыполненныеОбработчики <> Неопределено;
	
КонецФункции
