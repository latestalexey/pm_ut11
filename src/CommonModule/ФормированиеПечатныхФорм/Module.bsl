////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Функция возвращает, имя дополнительной колонки, выводимой в таблицу товаров
//
Функция ИмяДополнительнойКолонки() Экспорт
	
	ДопКолонка =  Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		Возврат "Артикул";
	ИначеЕсли ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Код Тогда
		Возврат "Код";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ИмяДополнительнойКолонки()

// Возвращает структуру данных со сводным описанием контрагента
//
// Параметры: 
//  СписокСведений - список значений со значениями параметров организации
//   СписокСведений формируется функцией СведенияОЮрФизЛице
//  Список         - список запрашиваемых параметров организации
//  СПрефиксом     - Признак выводить или нет префикс параметра организации
//
// Возвращаемое значение:
//  Строка - описатель организации / контрагента / физ.лица.
//
Функция ОписаниеОрганизации(СписокСведений, Список = "", СПрефиксом = Истина) Экспорт

	Если ПустаяСтрока(Список) Тогда
		Список = "ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет";
	КонецЕсли;

	Результат = "";

	СоответствиеПараметров = Новый Соответствие();
	СоответствиеПараметров.Вставить("ПолноеНаименование", 			" ");
	СоответствиеПараметров.Вставить("СокращенноеНаименование",		" ");
	СоответствиеПараметров.Вставить("НаименованиеДляПечатныхФорм", 	" ");
	СоответствиеПараметров.Вставить("ИНН",                			" ИНН ");
	СоответствиеПараметров.Вставить("КПП",                			" КПП ");
	СоответствиеПараметров.Вставить("Свидетельство",				" ");
	СоответствиеПараметров.Вставить("СвидетельствоДатаВыдачи",		" от ");
	СоответствиеПараметров.Вставить("ЮридическийАдрес",   			" ");
	СоответствиеПараметров.Вставить("ФактическийАдрес",   			" ");
	СоответствиеПараметров.Вставить("Телефоны",           			" тел.: ");
	СоответствиеПараметров.Вставить("НомерСчета",         			" р/с ");
	СоответствиеПараметров.Вставить("Банк",               			" в банке ");
	СоответствиеПараметров.Вставить("БИК",                			" БИК ");
	СоответствиеПараметров.Вставить("КоррСчет",           			" к/с ");
	СоответствиеПараметров.Вставить("КодПоОКПО",          			" Код по ОКПО ");

	Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
	ЧислоПараметров = СтрЧислоВхождений(Список, ",");

	Для Счетчик = 1 по ЧислоПараметров Цикл

		ПозЗапятой = Найти(Список, ",");

		Если ПозЗапятой > 0  Тогда
			
			ИмяПараметра = Лев(Список, ПозЗапятой - 1);
			Список       = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));

			Попытка
				СтрокаДополнения = "";
				СписокСведений.Свойство(ИмяПараметра, СтрокаДополнения);

				Если ПустаяСтрока(СтрокаДополнения) Тогда
					Продолжить;
				КонецЕсли;

				Префикс = СоответствиеПараметров[ИмяПараметра];
				Если Не ПустаяСтрока(Результат)  Тогда
					Результат = Результат + ",";
				КонецЕсли; 

				Результат = Результат + ?(СПрефиксом = Истина, Префикс, "") + СтрокаДополнения;
			Исключение
				
				ТекстСообщения  = НСтр("ru='Не удалось определить значение параметра организации: %ИмяПараметра%'");
				ТекстСообщения  = СтрЗаменить(ТекстСообщения,"%ИмяПараметра%",ИмяПараметра);
				Сообщение       = Новый СообщениеПользователю();
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить();
				
			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	Возврат СокрЛП(Результат);

КонецФункции // ОписаниеОрганизации()

// Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//  БанковскийСчет - Банковский счет, если счет не основной.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция СведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина, Знач БанковскийСчет = Неопределено) Экспорт

	Сведения = Новый Структура("Представление, СокращенноеНаименование, ПолноеНаименование, НаименованиеДляПечатныхФорм,
		|КодПоОКПО, ИНН, КПП, Телефоны, ЮридическийАдрес, Банк, БИК, КоррСчет, НомерСчета");

	Если ЗначениеЗаполнено(ЮрФизЛицо)
	   И (ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации")
		ИЛИ ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты")) Тогда
	
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
			Реквизиты = Справочники.Организации.ПолучитьРеквизитыОрганизации(ЮрФизЛицо);
			Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
				БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ЮрФизЛицо);
			КонецЕсли;
			РеквизитыСчета = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет);
			
		ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
			Реквизиты = Справочники.Контрагенты.РеквизитыКонтрагента(ЮрФизЛицо);
			Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
				БанковскийСчет = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(ЮрФизЛицо);
			КонецЕсли;
			РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(БанковскийСчет);
			
		КонецЕсли;

		Сведения.Вставить("Представление", 				 Реквизиты.Представление);
		Сведения.Вставить("СокращенноеНаименование", 	 Реквизиты.Представление);
		Сведения.Вставить("ПолноеНаименование", 		 Реквизиты.Наименование);
		Сведения.Вставить("НаименованиеДляПечатныхФорм", Реквизиты.Наименование);
		Сведения.Вставить("ИНН", 						 Реквизиты.ИНН);
		Сведения.Вставить("КодПоОКПО", 					 Реквизиты.КодПоОКПО);
		Сведения.Вставить("ЮрФизЛицо", 					 Реквизиты.ЮрФизЛицо);
		
		Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
			Сведения.Вставить("ОфициальноеНаименование", Реквизиты.НаименованиеПолное);
			Сведения.Вставить("Свидетельство", 			 Реквизиты.Свидетельство);
		Иначе
			Сведения.Вставить("ОфициальноеНаименование", Реквизиты.Наименование);
			Сведения.Вставить("Свидетельство", 			 "");
		КонецЕсли;
		
		Если ЮрФизЛицо.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			Сведения.Вставить("КПП", Реквизиты.КПП);
		Иначе
			Сведения.Вставить("КПП", "");
		КонецЕсли;
		
		Сведения.Вставить("Телефоны", 		  ПолучитьТелефонИзКонтактнойИнформации(ЮрФизЛицо));
		
		Сведения.Вставить("НомерСчета", 	  РеквизитыСчета.НомерСчета);
		Сведения.Вставить("Банк", 			  РеквизитыСчета.Банк);
		Сведения.Вставить("БИК", 			  РеквизитыСчета.БИК);
		Сведения.Вставить("КоррСчет", 		  РеквизитыСчета.КоррСчет);
		Сведения.Вставить("АдресБанка", 	  РеквизитыСчета.АдресБанка);

		Сведения.Вставить("ЮридическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Юридический"));
		Сведения.Вставить("ФактическийАдрес", ПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо, "Фактический"));
		
	КонецЕсли;
		
	Возврат Сведения;

КонецФункции // СведенияОЮрФизЛице()

// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//  ТипАдреса - тип контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного адреса
//
Функция ПолучитьАдресИзКонтактнойИнформации(Объект, ТипАдреса = "") Экспорт

	Если ЗначениеЗаполнено(Объект) Тогда
		
		Если ТипАдреса = "Фактический" Тогда
			Начало = "Факт";
		ИначеЕсли ТипАдреса = "Регистрации" Или ТипАдреса = "Юридический" Тогда
			Начало = "Юр";
		Иначе
			Начало = "";
		КонецЕсли;
		
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
			ВладелецКонтактнойИнформации = Объект;
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
			ВладелецКонтактнойИнформации = Объект;
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			Окончание = "Партнера";
			ВладелецКонтактнойИнформации = Объект;
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.РегистрацииВНалоговомОргане") Тогда
			Окончание = "ОбособленногоПодразделения";
			ВладелецКонтактнойИнформации = Объект;
		КонецЕсли;
		
		ВидАдреса = Справочники.ВидыКонтактнойИнформации[Начало + "Адрес" + Окончание].Ссылка;

		ТабЗн = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		
		НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Адрес, ВидАдреса));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";

КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Функция находит актуальное значение телефона в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного телефона
//
Функция ПолучитьТелефонИзКонтактнойИнформации(Объект) Экспорт

	Если ЗначениеЗаполнено(Объект) Тогда
	
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
			ВладелецКонтактнойИнформации = Объект;
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
			ВладелецКонтактнойИнформации = Объект;
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			Окончание = "Партнера";
			ВладелецКонтактнойИнформации = Объект;
		КонецЕсли;

		ВидТелефона = Справочники.ВидыКонтактнойИнформации["Телефон" + Окончание].Ссылка;

		ТабЗн           = ВладелецКонтактнойИнформации.КонтактнаяИнформация.Выгрузить();
		НайденныеСтроки = ТабЗн.НайтиСтроки(Новый Структура("Тип,Вид", Перечисления.ТипыКонтактнойИнформации.Телефон, ВидТелефона));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].Представление;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

// Стандартная для данной конфигурации функция форматирования сумм
//
// Параметры: 
//  Сумма  - число, которое мы хотим форматировать, 
//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
//           будет добавлено представление валюты
//  ЧН     - строка, представляющая нулевое значение числа,
//  ЧРГ    - символ-разделитель групп целой части числа.
//
// Возвращаемое значение:
//  Отформатированная должным образом строковое представление суммы.
//
Функция ФорматСумм(Знач Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Сумма = ?(Сумма < 0, -Сумма, Сумма);
	ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" +
					?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН) +
					?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);
	РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);
	КонецЕсли;

	Возврат РезультирующаяСтрока;

КонецФункции // ФорматСумм()

// Форматирует сумму банковского платежного документа.
//
// Параметры:
//  Сумма - Число - Сумма, которую необходимо отформатировать.
//  ВыводитьСуммуБезКопеек - Булево - Флаг представления суммы без копеек.
//
// Возвращаемое значение
//  Строка - Отформатированная строка.
//
Функция СуммаПлатежногоДокумента(Сумма, ВыводитьСуммуБезКопеек) Экспорт
	
	Результат  = Сумма;
	ЦелаяЧасть = Цел(Сумма);
	
	Если Результат = ЦелаяЧасть Тогда
		
		Если ВыводитьСуммуБезКопеек Тогда
			
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='='; ЧГ=0");
			Результат = Лев(Результат, Найти(Результат, "="));
			
		Иначе
			
			Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
			
		КонецЕсли;
		
	Иначе
		
		Результат = Формат(Результат, "ЧДЦ=2; ЧРД='-'; ЧГ=0");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СуммаПлатежногоДокумента()

// Функция формирует представление суммы в рублях и копейках.
//
// Параметры:
//  Сумма - Число - Сумма, которую необходимо отформатировать.
//  Валюта - СправочникСсылка.Валюты - Валюта, в которой нужно представить сумму.
//
// Возвращаемое значение
//  Строка - Отформатированная сумма.
//
Функция СуммаРубКоп(Сумма, Валюта, ВалютаРегламентированногоУчета) Экспорт
	
	Если Валюта = ВалютаРегламентированногоУчета Тогда
		Рубли = Цел(Сумма);
		Копейки = Окр(100 * (Сумма - Рубли), 0, 1);
		СуммаРубКоп = "" 
			+ Формат(Рубли, "ЧДЦ=0; ЧГ=0")
			+ " руб. " 
			+ Цел(Копейки /10) 
			+ (Копейки - 10 * Цел(Копейки / 10))
			+" коп."
		;
	Иначе
		СуммаРубКоп = СуммаПлатежногоДокумента(Сумма, Ложь);
	КонецЕсли;
	
	Возврат СуммаРубКоп;
	
КонецФункции // СуммаРубКоп()

// Функция возвращает структуру с заголовками Скидка или Наценка для таблицы печатной формы,
// а также с флагами ЕстьСкидки и ТолькоНаценка
//
Функция НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки) Экспорт
	
	ЕстьНаценки = Ложь;
	ЕстьСкидки  = Ложь;
	
	СтруктураШапки = Новый Структура("Скидка, СуммаСкидки, ЕстьСкидки, ТолькоНаценка");
	
	Если ИспользоватьСкидки Тогда
		
		Если ТипЗнч(Товары) = Тип("ТаблицаЗначений") Или ТипЗнч(Товары) = Тип("Массив") Тогда
			
			Для Каждого СтрокаТоваров Из Товары Цикл
				Если СтрокаТоваров.СуммаСкидки>0 Тогда
					ЕстьСкидки = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаТоваров Из Товары Цикл
				Если СтрокаТоваров.СуммаСкидки<0 Тогда
					ЕстьНаценки = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		
		ИначеЕсли ТипЗнч(Товары) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			
			Пока Товары.Следующий() Цикл
				Если Товары.СуммаСкидки>0 Тогда
					ЕстьСкидки = Истина;
				ИначеЕсли Товары.СуммаСкидки<0 Тогда
					ЕстьНаценки = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьНаценки И ЕстьСкидки Тогда
			СтруктураШапки.Вставить("Скидка", "Скидка (Наценка)");
			СтруктураШапки.Вставить("СуммаСкидки", "Сумма " + Символы.ПС + "без скидки (наценки)");
			СтруктураШапки.Вставить("ТолькоНаценка", Ложь);
		ИначеЕсли ЕстьНаценки И НЕ ЕстьСкидки Тогда
			СтруктураШапки.Вставить("Скидка", "Наценка");
			СтруктураШапки.Вставить("СуммаСкидки", "Сумма" + Символы.ПС + "без наценки");
			СтруктураШапки.Вставить("ТолькоНаценка", Истина);
		ИначеЕсли ЕстьСкидки Тогда
			СтруктураШапки.Вставить("Скидка", "Скидка");
			СтруктураШапки.Вставить("СуммаСкидки", "Сумма" + Символы.ПС + "без скидки");
			СтруктураШапки.Вставить("ТолькоНаценка", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураШапки.Вставить("ЕстьСкидки", ЕстьНаценки или ЕстьСкидки);

	Возврат СтруктураШапки;

КонецФункции // НужноВыводитьСкидки()

// Функция проверяет, что в строке товара заполнена номенклатура,
// и выдает сообщение, если не заполнена.
//
Функция ПроверитьЗаполнениеНоменклатуры(СтрокаТовары, НомерСтроки) Экспорт
	
	Если Не ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
		
		ТекстОшибки = НСтр("ru='В строке %НомерСтроки% не заполнено значение номенклатуры - строка при печати пропущена.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", НомерСтроки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьЗаполнениеНоменклатуры()

// Формирует текст НДС по ставке для печатной формы счета и заказа
//
// Параметры:
// СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст
// ЦенаВключаетНДС - Булево - Признак включения НДС в цену
//
// Возвращаемое значение:
// Строка
//
Функция ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС) Экспорт
	
	ТекстНДСПоСтавке = ?(ЦенаВключаетНДС, НСтр("ru='В т.ч. НДС (%СтавкаНДС%):'"), НСтр("ru='НДС (%СтавкаНДС%):'"));
	ТекстНДСПоСтавке = СтрЗаменить(ТекстНДСПоСтавке, "%СтавкаНДС%", СтавкаНДС);
	
	Возврат ТекстНДСПоСтавке;
	
КонецФункции // ТекстНДСПоСтавке()

// Создает соответствие ставок и сумм НДС
//
// Возвращаемое значение:
// Соответствие
//
Функция ПолучитьСоответствиеСтавокНДС() Экспорт
	
	СоответствиеСтавокНДС = Новый Соответствие();
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС10,     0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС10_110, 0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС18,     0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС18_118, 0);
	СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС0,      0);
	
	Возврат СоответствиеСтавокНДС;
	
КонецФункции // ПолучитьСоответствиеСтавокНДС()

// Формирует текст НДС по этапу оплаты
//
// Параметры:
// СоответствиеСтавокНДС - Соответствие - соответствие, полученное с помощью функции ПолучитьСоответствиеСтавокНДС()
// ПроцентПлатежа       - Число - Процент платежа по этапу
//
// Возвращаемое значение:
// Строка
//
Функция СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа) Экспорт
	
	ТекстНДС = "";
	
	Если СоответствиеСтавокНДС.Количество() > 0 Тогда
		
		Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
			
			Если ТекСтавкаНДС.Значение <> 0 Тогда
				
				ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), НСтр("ru='НДС(%СтавкаНДС%) %СуммаНДС%'"), НСтр("ru=', НДС(%СтавкаНДС%) %СуммаНДС%'"));
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", ТекСтавкаНДС.Ключ);
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%",  Формат(ТекСтавкаНДС.Значение / 100 * ПроцентПлатежа, "ЧЦ=15; ЧДЦ=2"));
			
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНДС) Тогда
		ТекстНДС = НСтр("ru='В т.ч. '") + ТекстНДС;
	Иначе
		ТекстНДС = НСтр("ru='Без налога (НДС)'");
	КонецЕсли;
	
	Возврат ТекстНДС;
	
КонецФункции // СформироватьТекстНДСЭтапаОплаты()

// Формирует строковое описание периода действия
//
// Параметры:
// 		ДатаНачалаДействия - Дата - Дата начала действия
// 		ДатаОкончанияДействия - Дата - Дата окончания действия
//
// Возвращаемое значение:
// 		Строка - Строковое описание периода действия
//
Функция СформироватьТекстПериодДействия(ДатаНачалаДействия, ДатаОкончанияДействия) Экспорт
	
	ПустаяДата = Дата(1,1,1);
	
	Если ДатаНачалаДействия = ПустаяДата И ДатаОкончанияДействия = ПустаяДата Тогда
		
		Возврат НСтр("ru = 'Срок действия не ограничен.'");
		
	ИначеЕсли  ДатаНачалаДействия <> ПустаяДата И ДатаОкончанияДействия = ПустаяДата Тогда
		
		Возврат  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Действует с %1.'"),
			Формат(ДатаНачалаДействия,"ДЛФ=DD")
		);
		
	ИначеЕсли ДатаНачалаДействия = ПустаяДата И ДатаОкончанияДействия <> ПустаяДата Тогда
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Действует по %1.'"),
			Формат(ДатаОкончанияДействия,"ДЛФ=DD")
		);
		
	Иначе
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Действует с %1 по %2.'"),
			Формат(ДатаНачалаДействия,"ДЛФ=DD"),
			Формат(ДатаОкончанияДействия,"ДЛФ=DD")
		);
		
	КонецЕсли;
	
КонецФункции // СформироватьТекстПериодДействия()

// Формирует текст НДС
//
Функция СформироватьТекстНДС(НалогообложениеНДС, ЦенаВключаетНДС)Экспорт
	
	Возврат НалогообложениеНДС + ?(ЦенаВключаетНДС,Нстр("ru='. Цена включает НДС.'"),Нстр("ru='. Цена не включает НДС.'"));
	
КонецФункции // СформироватьТекстНДС()

//Заполняет структуру параметров возможных получателей печатных форм при отправке по электронной почте
//
// Параметры:
// 		ПараметрыОтправки - Структура - содержит параметры отправки сформированных печатных форм
// 		ДанныеОбъектовПечати - Массив,Соответствие - данные о печатаемых объектах
// 		КоллекцияПечатныхФорм - ТаблицаЗначений - содержит информацию о формируемых печатных формах
//
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм)  Экспорт
	
	Если НЕ РаботаСПочтовымиСообщениями.ПолучитьДоступныеУчетныеЗаписи(Истина).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеОбъектовПечати) = Тип("Массив") Тогда
		СоответствиеТиповДанныхОбъектовПечати = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(ДанныеОбъектовПечати);
	Иначе
		СоответствиеТиповДанныхОбъектовПечати = ДанныеОбъектовПечати;
	КонецЕсли;
	
	СоответствиеТиповДанныхОбъектовПечати = ДополнитьСоответствиеДанныхОбъектовПечати(СоответствиеТиповДанныхОбъектовПечати);
	
	Если Не ЗаполнениеПараметровОтправкиВозможно(СоответствиеТиповДанныхОбъектовПечати) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПолучателей(СоответствиеТиповДанныхОбъектовПечати, ПараметрыОтправки, КоллекцияПечатныхФорм);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
//  Формирование параметров отправки печатных форм по электронной почте

Процедура ЗаполнитьПолучателей(СоответствиеТиповДанныхОбъектовПечати, ПараметрыОтправки, КоллекцияПечатныхФорм) 
	
	Запрос = Новый Запрос;
	
	СчетчикОбъектовМетаданных = 1;
	ПервыйЗапросВОбъединении = Истина;
	КоличествоЭлементовВСоответствии = СоответствиеТиповДанныхОбъектовПечати.Количество();
	МассивДокументовРодителей = Новый Массив;
	
	СформироватьТемуИТекстПисьма(СоответствиеТиповДанныхОбъектовПечати, ПараметрыОтправки, КоллекцияПечатныхФорм, МассивДокументовРодителей);
	
	Для каждого ЭлементСоответствия Из СоответствиеТиповДанныхОбъектовПечати Цикл
		
		МассивРеквизитовПолучателей = ЭлементСоответствия.Значение.МассивРеквизитовПолучателей;
		
		Если МассивРеквизитовПолучателей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеОбъектаПолучателя = Метаданные.НайтиПоПолномуИмени(ЭлементСоответствия.Ключ);
		Если МетаданныеОбъектаПолучателя = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СчетчикРеквизитовПолучателей = 1;
		КоличествоЭлементовВМассиве = МассивРеквизитовПолучателей.Количество();
		
		Для каждого ИмяРеквизитаПолучателя Из МассивРеквизитовПолучателей Цикл

			ТабличнаяЧасть = Неопределено;
			РеквизитПолучателя = МетаданныеОбъектаПолучателя.Реквизиты.Найти(ИмяРеквизитаПолучателя);
			ТаблицаОбъектаПечати = ЭлементСоответствия.Ключ;
			
			Если РеквизитПолучателя = Неопределено Тогда
				ДанныеРеквизита = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяРеквизитаПолучателя,".");
				Если ДанныеРеквизита.Количество() = 2 Тогда
					ИмяТабличнойЧасти = ДанныеРеквизита[0];
					ИмяРеквизитаПолучателя = ДанныеРеквизита[1];
					ТабличнаяЧасть    = МетаданныеОбъектаПолучателя.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
					Если ТабличнаяЧасть <> Неопределено Тогда
						РеквизитПолучателя = ТабличнаяЧасть.Реквизиты.Найти(ИмяРеквизитаПолучателя);
						Если РеквизитПолучателя = Неопределено Тогда
							Возврат;
						Иначе
							ТаблицаОбъектаПечати =  ЭлементСоответствия.Ключ + "." + ИмяТабличнойЧасти;
						КонецЕсли;
					Иначе
						Возврат;
					КонецЕсли;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			СинонимРеквизитаПолучателя = РеквизитПолучателя.Синоним;
			ОписаниеТиповРеквизита     = РеквизитПолучателя.Тип;
			Если ОписаниеТиповРеквизита.СодержитТип(Тип("СправочникСсылка.Партнеры")) Тогда
				ИмяТаблицыКонтактнойИнформации = "Справочник.Партнеры.КонтактнаяИнформация";
			ИначеЕсли ОписаниеТиповРеквизита.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
				ИмяТаблицыКонтактнойИнформации = "Справочник.Контрагенты.КонтактнаяИнформация";
			ИначеЕсли ОписаниеТиповРеквизита.СодержитТип(Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
				ИмяТаблицыКонтактнойИнформации = "Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация";
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
			ТекстЗапросаПоРеквизиту ="
			|ВЫБРАТЬ %РАЗРЕШЕННЫЕ% РАЗЛИЧНЫЕ
			|	ОбъектПечати.%ПредставлениеОбъектаПечати% КАК ПредставлениеОбъектаПечати,
			|	ОбъектПечати.Ссылка КАК СсылкаНаОбъектПечати,
			|	&%СинонимРеквизитаПолучателя% КАК СинонимРеквизитаПолучателя,
			|	ОбъектПечати.%ИмяРеквизитаПолучателя% КАК ИсточникКонтактнойИнформации,
			|	ПРЕДСТАВЛЕНИЕ(ОбъектПечати.%ИмяРеквизитаПолучателя%) КАК ПредставлениеПолучателя,
			|	ТаблицаКонтактнойИнформации.АдресЭП КАК Адрес,
			|	ТаблицаКонтактнойИнформации.Вид КАК ВидПочтовогоАдреса
			|ИЗ
			|	%ОбъектПечати% КАК ОбъектПечати
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ %ТаблицаКонтактнойИнформации% КАК ТаблицаКонтактнойИнформации
			|		ПО ОбъектПечати.%ИмяРеквизитаПолучателя% = ТаблицаКонтактнойИнформации.Ссылка
			|ГДЕ
			|	ОбъектПечати.Ссылка В(%МассивСсылок%)
			|	И ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|
			|%ОБЪЕДИНИТЬВСЕ%
			|";
			
			ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%МассивСсылок%", "&МассивСсылок_" + Строка(СчетчикОбъектовМетаданных));
			ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%СинонимРеквизитаПолучателя%", "СинонимРеквизитаПолучателя_" + Строка(СчетчикОбъектовМетаданных) + "_" + Строка(СчетчикРеквизитовПолучателей));
			ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%ИмяРеквизитаПолучателя%", ИмяРеквизитаПолучателя);
			ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%ОбъектПечати%", ТаблицаОбъектаПечати);
			ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%ТаблицаКонтактнойИнформации%", ИмяТаблицыКонтактнойИнформации);
			
			Запрос.УстановитьПараметр("СинонимРеквизитаПолучателя_" + Строка(СчетчикОбъектовМетаданных) + "_" + Строка(СчетчикРеквизитовПолучателей), СинонимРеквизитаПолучателя);
			
			Если ПервыйЗапросВОбъединении Тогда
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%РАЗРЕШЕННЫЕ%", "РАЗРЕШЕННЫЕ");
				ПервыйЗапросВОбъединении = Ложь;
			Иначе
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%РАЗРЕШЕННЫЕ%", "");
			КонецЕсли;
			
			Если СчетчикОбъектовМетаданных = КоличествоЭлементовВСоответствии И СчетчикРеквизитовПолучателей = КоличествоЭлементовВМассиве Тогда
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%ОБЪЕДИНИТЬВСЕ%", "");
			Иначе
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%ОБЪЕДИНИТЬВСЕ%", "ОБЪЕДИНИТЬ ВСЕ");
			КонецЕсли;
			
			Если ТабличнаяЧасть = Неопределено Тогда
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%ПредставлениеОбъектаПечати%", "Представление");
			Иначе
				ТекстЗапросаПоРеквизиту = СтрЗаменить(ТекстЗапросаПоРеквизиту, "%ПредставлениеОбъектаПечати%", "Ссылка.Представление");
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст + ТекстЗапросаПоРеквизиту;
			СчетчикРеквизитовПолучателей = СчетчикРеквизитовПолучателей + 1;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("МассивСсылок_" + Строка(СчетчикОбъектовМетаданных), ЭлементСоответствия.Значение.МассивДанных);
		СчетчикОбъектовМетаданных = СчетчикОбъектовМетаданных + 1;
		
	КонецЦикла;
	
	Если МассивДокументовРодителей.Количество() > 0 Тогда
		
		СчетчикТипыДокументыРодители = 1;
		СоответствиеТиповДанныхРодительскихДокументов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивДокументовРодителей);
		Для каждого ЭлементСоответствия Из СоответствиеТиповДанныхРодительскихДокументов Цикл
			
			Если Метаданные.НайтиПоПолномуИмени(ЭлементСоответствия.Ключ).Реквизиты.Найти("КонтактноеЛицо") = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстЗапросаПоДокументуРодителю = "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ 
			|	ДокументРодитель.Представление КАК ПредставлениеОбъектаПечати,
			|	ДокументРодитель.Ссылка КАК СсылкаНаОбъектПечати,
			|	&КонтактноеЛицо КАК СинонимРеквизитаПолучателя,
			|	ДокументРодитель.КонтактноеЛицо КАК ИсточникКонтактнойИнформации,
			|	ПРЕДСТАВЛЕНИЕ(ДокументРодитель.КонтактноеЛицо) КАК ПредставлениеПолучателя,
			|	ТаблицаКонтактнойИнформации.АдресЭП КАК Адрес,
			|	ТаблицаКонтактнойИнформации.Вид КАК ВидПочтовогоАдреса
			|ИЗ
			|	%ДокументРодитель% КАК ДокументРодитель
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|		ПО ДокументРодитель.КонтактноеЛицо = ТаблицаКонтактнойИнформации.Ссылка
			|ГДЕ
			|	ДокументРодитель.Ссылка В(%МассивСсылок%)
			|	И ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
			
			ТекстЗапросаПоДокументуРодителю = СтрЗаменить(ТекстЗапросаПоДокументуРодителю, "%ДокументРодитель%", ЭлементСоответствия.Ключ);
			ТекстЗапросаПоДокументуРодителю = СтрЗаменить(ТекстЗапросаПоДокументуРодителю, "%МассивСсылок%", "&МассивСсылокДокументыРодители_" + Строка(СчетчикТипыДокументыРодители));
			Запрос.УстановитьПараметр("МассивСсылокДокументыРодители_" + Строка(СчетчикТипыДокументыРодители), ЭлементСоответствия.Значение);
			
			Запрос.Текст = Запрос.Текст + ТекстЗапросаПоДокументуРодителю;
			
			СчетчикТипыДокументыРодители = СчетчикТипыДокументыРодители + 1;
			
		КонецЦикла;
		
		Запрос.УстановитьПараметр("КонтактноеЛицо", НСтр("ru = 'Контактное лицо'"));
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ПараметрыОтправки.Получатель = Новый Массив;
	Пока Выборка.Следующий() Цикл
	
		ДобавитьПолучателяПечатнойФормы(ПараметрыОтправки.Получатель, Выборка);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьТемуИТекстПисьма(СоответствиеТиповДанныхОбъектовПечати, ПараметрыОтправки, КоллекцияПечатныхФорм, МассивДокументовРодителей)
	
	Для каждого ЭлементСоответствия Из СоответствиеТиповДанныхОбъектовПечати Цикл
		
		Запрос = Новый Запрос;
		
		Счетчик = 1;
		ПервыйЗапросВОбъединении = Истина;
		КоличествоЭлементовВСоответствии = СоответствиеТиповДанныхОбъектовПечати.Количество();
		
		ТекстЗапросаПоЭлементуСоответствия = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ %РАЗРЕШЕННЫЕ%
		|	ОбъектМетаданных.Представление КАК ПредставлениеОбъектаПечати,
		|	ОбъектМетаданных.Ссылка КАК СсылкаНаОбъектПечати,
		|	%СинонимОбъектаМетаданных% КАК СинонимОбъектаМетаданных,
		|	%НомерДокумента% КАК НомерДокумента,
		|	%ДатаДокумента% КАК ДатаДокумента
		|ИЗ
		|	%ОбъектМетаданных% КАК ОбъектМетаданных
		|ГДЕ
		|	ОбъектМетаданных.Ссылка В %МассивСсылок% 
		|
		|%ОБЪЕДИНИТЬВСЕ%
		|";
		
		Запрос.УстановитьПараметр("МассивСсылок_" + Строка(Счетчик), ЭлементСоответствия.Значение.МассивДанных);
		Запрос.УстановитьПараметр("СинонимОбъектаМетаданных_" + Строка(Счетчик),Метаданные.НайтиПоПолномуИмени(ЭлементСоответствия.Ключ).Синоним);
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%МассивСсылок%", "(&МассивСсылок_" + Строка(Счетчик) + ")");
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%СинонимОбъектаМетаданных%", "&СинонимОбъектаМетаданных_" + Строка(Счетчик));
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%ОбъектМетаданных%", ЭлементСоответствия.Ключ);
		
		Если Счетчик = 1 Тогда
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%РАЗРЕШЕННЫЕ%", "РАЗРЕШЕННЫЕ");
		Иначе
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%РАЗРЕШЕННЫЕ%", "");
		КонецЕсли;
		
		Если Найти(ЭлементСоответствия.Ключ,"Документ") > 0 Тогда
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%НомерДокумента%", "ОбъектМетаданных.Номер");
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%ДатаДокумента%", "ОбъектМетаданных.Дата");
		Иначе
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%НомерДокумента%", "NULL");
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%ДатаДокумента%", "NULL");
		КонецЕсли;
		
		Если Счетчик = КоличествоЭлементовВСоответствии Тогда
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%ОБЪЕДИНИТЬВСЕ%", "");
		Иначе
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%ОБЪЕДИНИТЬВСЕ%", "ОБЪЕДИНИТЬ ВСЕ");
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
		Запрос.Текст = Запрос.Текст + ТекстЗапросаПоЭлементуСоответствия;
		
	КонецЦикла;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если КоллекцияПечатныхФорм.Количество() = 1 Тогда
		ПараметрыОтправки.Тема = КоллекцияПечатныхФорм[0].СинонимМакета;
		
	Иначе 
		ПараметрыОтправки.Тема = НСтр("ru = 'Документы'");
	КонецЕсли;
	
	ПараметрыОтправки.Текст = НСтр("ru = 'Во вложении печатные формы.'") + Символы.ПС;
	
	Выборка = Результат.Выбрать();
	
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + "   " + ПечатнаяФорма.СинонимМакета + Символы.ПС;
	КонецЦикла;
	
	ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + НСтр("ru = 'Для документов:'") + Символы.ПС;
	
	Пока Выборка.Следующий() Цикл
		ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + "   " + ПредставлениеОбъектаПечати(Выборка, Истина) + Символы.ПС;
		ПолучитьРодительскиеДокументы(МассивДокументовРодителей,Выборка.СсылкаНаОбъектПечати);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПолучателяПечатнойФормы(Получатели, ДанныеПолучателя, Пояснение = "");
	
	Если Не ЗначениеЗаполнено(ДанныеПолучателя.Адрес) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Пояснение) Тогда
		Получатель = Неопределено;
		Для каждого Получатель Из Получатели Цикл
			Если Получатель.ИсточникКонтактнойИнформации = ДанныеПолучателя.ИсточникКонтактнойИнформации Тогда
				Получатель.Пояснение = Получатель.Пояснение + ", " + ПредставлениеОбъектаПечати(ДанныеПолучателя);
				Возврат;
			КонецЕсли;
		КонецЦикла;
		Пояснение = ДанныеПолучателя.СинонимРеквизитаПолучателя + " " + НСтр("ru = 'из'") + " " + ПредставлениеОбъектаПечати(ДанныеПолучателя);
	КонецЕсли;
	
	СтруктураПолучатель = Новый Структура;
	СтруктураПолучатель.Вставить("Адрес", ДанныеПолучателя.Адрес);
	СтруктураПолучатель.Вставить("Представление", ДанныеПолучателя.ПредставлениеПолучателя);
	СтруктураПолучатель.Вставить("ИсточникКонтактнойИнформации", ДанныеПолучателя.ИсточникКонтактнойИнформации);
	СтруктураПолучатель.Вставить("ВидПочтовогоАдреса", Строка(ДанныеПолучателя.ВидПочтовогоАдреса));
	СтруктураПолучатель.Вставить("Пояснение", Пояснение);
	
	Получатели.Добавить(СтруктураПолучатель);
	
КонецПроцедуры

Функция ПредставлениеОбъектаПечати(ДанныеПолучателя,ПреобразовыватьПредставлениеДокумента = Ложь)
	
	ТипСсылки = ТипЗнч(ДанныеПолучателя.СсылкаНаОбъектПечати);
	
	Если ТипСсылки = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Возврат НСтр("ru = 'Договор'") + " '" +  ДанныеПолучателя.ПредставлениеОбъектаПечати + "'";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		Возврат НСтр("ru = 'Соглашение с клиентом'") + " '" +  ДанныеПолучателя.ПредставлениеОбъектаПечати + "'";
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.СделкиСКлиентами") Тогда
		Возврат НСтр("ru = 'Сделка с клиентом'") + " '" +  ДанныеПолучателя.ПредставлениеОбъектаПечати + "'";
	Иначе
		Если ПреобразовыватьПредставлениеДокумента Тогда
			
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПолучателя.НомерДокумента, Ложь, Истина);
			ДатаДокумента  = ДанныеПолучателя.ДатаДокумента;
			
			ПредставлениеДокумента = НСтр("ru='%Синоним% №%Номер% от %Дата%'");
			ПредставлениеДокумента = СтрЗаменить(ПредставлениеДокумента, "%Номер%", НомерДокумента);
			ПредставлениеДокумента = СтрЗаменить(ПредставлениеДокумента, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
			ПредставлениеДокумента = СтрЗаменить(ПредставлениеДокумента, "%Синоним%", ДанныеПолучателя.СинонимОбъектаМетаданных);
			Возврат ПредставлениеДокумента;
			
		Иначе
			Возврат ДанныеПолучателя.ПредставлениеОбъектаПечати;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции 

Функция ДополнитьСоответствиеДанныхОбъектовПечати(СоответствиеТиповДанныхОбъектовПечати)

	ДополненноеСоответствие = Новый Соответствие;
	
	Для каждого ЭлементСоответствия Из СоответствиеТиповДанныхОбъектовПечати Цикл
		
		СтруктураДанныхОбъектаПечати = Новый Структура("ОсновнойПолучатель, МассивРеквизитовПолучателей, МассивДанных",
		                                               "",Новый Массив, ЭлементСоответствия.Значение);
		ЗаполнитьДанныеСтруктурыПолучателяПоТипуОбъекта(ЭлементСоответствия.Ключ , СтруктураДанныхОбъектаПечати);
		
		ДополненноеСоответствие.Вставить(ЭлементСоответствия.Ключ, СтруктураДанныхОбъектаПечати);
	
	КонецЦикла;
	
	Возврат ДополненноеСоответствие;

КонецФункции

Процедура ЗаполнитьДанныеСтруктурыПолучателяПоТипуОбъекта(ПолноеИмяОбъектаМетаданных , СтруктураДанныхОбъектаПечати);
	
	Если ПолноеИмяОбъектаМетаданных = "Документ.АктВыполненныхРабот" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.АктОРасхожденияхПриПоступленииТоваров" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.АктПриемкиТоваров" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.ВзаимозачетЗадолженности" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.ВозвратТоваровМеждуОрганизациями" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.ВозвратТоваровОтКлиента" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.ВозвратТоваровПоставщику" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.ЗаказКлиента" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.ЗаказПоставщику" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.КоммерческоеПредложениеКлиенту" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.КорректировкаРеализации" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.ОтчетКомиссионера" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.ОтчетКомиссионераОСписании" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.ОтчетКомитенту" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.ОтчетКомитентуОСписании" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.ОтчетПоКомиссииМеждуОрганизациями" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.ПередачаТоваровМеждуОрганизациями" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.ПеремещениеТоваров" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.ПоступлениеТоваровУслуг" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.ПриходныйКассовыйОрдер" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.РасходныйКассовыйОрдер" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.РеализацияТоваровУслуг" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.РеализацияУслугПрочихАктивов" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.СверкаВзаиморасчетов" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.СписаниеБезналичныхДенежныхСредств" ИЛИ
		 ПолноеИмяОбъектаМетаданных = "Документ.СчетНаОплатуКлиенту" Тогда
		
		МассивПодстрок =  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмяОбъектаМетаданных,".");
		Если МассивПодстрок.Количество() = 2 Тогда
			Документы[МассивПодстрок[1]].ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнениеПараметровОтправкиВозможно(СоответствиеТиповДанныхОбъектовПечати)
	
	Запрос = Новый Запрос;
	
	Счетчик = 1;
	КоличествоЭлементовВСоответствии = СоответствиеТиповДанныхОбъектовПечати.Количество();
	
	Для каждого ЭлементСоответствия Из СоответствиеТиповДанныхОбъектовПечати Цикл
		
		Если НЕ ЗначениеЗаполнено(ЭлементСоответствия.Значение.ОсновнойПолучатель) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапросаПоЭлементуСоответствия = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ %РАЗРЕШЕННЫЕ_ПЕРВЫЕ%
		|	ОбъектМетаданных.%ИмяРеквизита% КАК ОсновнойПолучатель
		|ИЗ
		|	%ОбъектМетаданных% КАК ОбъектМетаданных
		|ГДЕ
		|	ОбъектМетаданных.Ссылка В %МассивСсылок% 
		|
		|%ОБЪЕДИНИТЬВСЕ%
		|";
		
		Запрос.УстановитьПараметр("МассивСсылок_" + Строка(Счетчик), ЭлементСоответствия.Значение.МассивДанных);
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%МассивСсылок%", "(&МассивСсылок_" + Строка(Счетчик) + ")");
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%ОбъектМетаданных%", ЭлементСоответствия.Ключ);
		ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%ИмяРеквизита%", ЭлементСоответствия.Значение.ОсновнойПолучатель);
		
		Если Счетчик = 1 Тогда
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%РАЗРЕШЕННЫЕ_ПЕРВЫЕ%", "РАЗРЕШЕННЫЕ ПЕРВЫЕ 2");
		Иначе
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%РАЗРЕШЕННЫЕ_ПЕРВЫЕ%", "");
		КонецЕсли;
		
		Если Счетчик = КоличествоЭлементовВСоответствии Тогда
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%ОБЪЕДИНИТЬВСЕ%", "");
		Иначе
			ТекстЗапросаПоЭлементуСоответствия = СтрЗаменить(ТекстЗапросаПоЭлементуСоответствия, "%ОБЪЕДИНИТЬВСЕ%", "ОБЪЕДИНИТЬ ВСЕ");
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
		Запрос.Текст = Запрос.Текст + ТекстЗапросаПоЭлементуСоответствия;
		
	КонецЦикла;
	
	//Если основные получатели не заданы, то и посылать нет смысла
	Если ПустаяСтрока(Запрос.Текст) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции 

Процедура ПолучитьРодительскиеДокументы(МассивДокументовРодителей, ДокументПечати);

	Если ДокументПечати.Метаданные().Реквизиты.Найти("КонтактноеЛицо") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоДокументов = Новый ДеревоЗначений;
	ДеревоДокументов.Колонки.Добавить("Ссылка");
	ДополнитьДеревоРодительскихДокументов(ДокументПечати, ДеревоДокументов);
	
	ДобавитьРодительскиеДокументыВМассивИзДерева(ДеревоДокументов, МассивДокументовРодителей)

КонецПроцедуры

Процедура ДобавитьРодительскиеДокументыВМассивИзДерева(ДеревоРодитель, МассивДокументовРодителей)

	СтрокиДерева = ДеревоРодитель.Строки;
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если МассивДокументовРодителей.Найти(СтрокаДерева.Ссылка) = Неопределено Тогда
			МассивДокументовРодителей.Добавить(СтрокаДерева.Ссылка);
		КонецЕсли;
		ДобавитьРодительскиеДокументыВМассивИзДерева(СтрокаДерева, МассивДокументовРодителей);
	КонецЦикла;

КонецПроцедуры

Функция РеквизитУдовлетворяетУсловиям(Реквизит)

	Возврат Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) ИЛИ 
	        Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) ИЛИ
	        Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.СоглашенияСКлиентами")) ИЛИ
	        Реквизит.Тип.СодержитТип(Тип("СправочникСсылка.СделкиСКлиентами"));

КонецФункции

Процедура ДополнитьДеревоРодительскихДокументов(ТекущийДокумент, ДеревоРодитель)

	СтрокиДерева = ДеревоРодитель.Строки;
	МетаданныеДокумента        = ТекущийДокумент.Метаданные();
	ПолноеИмяОбъектаМетаданных = МетаданныеДокумента.ПолноеИмя();
	
	СписокРеквизитов    = Новый СписокЗначений;
	
	Для Каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл
		
		Если РеквизитУдовлетворяетУсловиям(Реквизит) Тогда
			
			Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
				
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
				
				Если МетаданныеРеквизита <> Неопределено
					И (Метаданные.Документы.Содержит(МетаданныеРеквизита) ИЛИ Метаданные.Справочники.Содержит(МетаданныеРеквизита))
					И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
					
					Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
					         |	ОбъектМетаданных.%ИмяРеквизита% КАК ЗначениеРеквизита
					         |ИЗ
					         |	%ПолноеИмяОбъектаМедаданных% КАК ОбъектМетаданных");
					
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ПолноеИмяОбъектаМедаданных%", ПолноеИмяОбъектаМетаданных);
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяРеквизита%", Реквизит.Имя);
					
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						ЗначениеРеквизита = Выборка.ЗначениеРеквизита;
					Иначе
						Продолжить;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ЗначениеРеквизита)
						И ТипЗнч(ЗначениеРеквизита) = ТекущийТип
						И ЗначениеРеквизита <> ТекущийДокумент
						И СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
						
						СписокРеквизитов.Добавить(ЗначениеРеквизита);
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		СтрРеквизитов = "";

		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл

			Если РеквизитУдовлетворяетУсловиям(Реквизит) Тогда
				
				Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
					
					МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
					
					Если МетаданныеРеквизита<>Неопределено
						И (Метаданные.Документы.Содержит(МетаданныеРеквизита) ИЛИ Метаданные.Справочники.Содержит(МетаданныеРеквизита))
						И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
						
						СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ПустаяСтрока(СтрРеквизитов) Тогда
			Продолжить;
		КонецЕсли;
		
		СодержимоеТЧ = ТекущийДокумент[ТЧ.Имя].Выгрузить();
		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ ИЗ СодержимоеТЧ.Колонки Цикл

			Для Каждого СтрокаТЧ ИЗ СодержимоеТЧ Цикл

				ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];

				МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
				Если МетаданныеЗначения <> Неопределено Тогда

					Если ЗначениеЗаполнено(ЗначениеРеквизита)
						И (Метаданные.Документы.Содержит(МетаданныеРеквизита) ИЛИ Метаданные.Справочники.Содержит(МетаданныеРеквизита))
						И ЗначениеРеквизита <> ТекущийДокумент
						И СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда

							СписокРеквизитов.Добавить(ЗначениеРеквизита);

					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого ЭлементСписка Из СписокРеквизитов Цикл
		
		НоваяСтрока = СтрокиДерева.Добавить();
		НоваяСтрока.Ссылка = ЭлементСписка.Значение;
		Если НЕ ДобавляемаяСсылкаИмеетсяСредиРодителей(ДеревоРодитель, ЭлементСписка.Значение) Тогда
			ДополнитьДеревоРодительскихДокументов(ЭлементСписка.Значение, НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавляемаяСсылкаИмеетсяСредиРодителей(СтрокаРодитель,ИскомыйДокумент)
	
	Если ТипЗнч(СтрокаРодитель) = Тип("ДеревоЗначений") Тогда
		Возврат Ложь; 
	КонецЕсли;
	
	ТекущийРодитель = СтрокаРодитель;
	Пока ТекущийРодитель <> Неопределено Цикл
		Если ТекущийРодитель.Ссылка = ИскомыйДокумент Тогда
			Возврат Истина;
		КонецЕсли;
		ТекущийРодитель = ТекущийРодитель.Родитель;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции


