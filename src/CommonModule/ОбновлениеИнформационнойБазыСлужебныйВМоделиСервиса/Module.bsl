///////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обновление версии ИБ в модели сервиса".
//
///////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обновление областей данных.

// Выполняет обновление версии информационной базы в текущей области данных
// и снимает блокировку сеансов в области, в случае если она была установлена
// ранее.
//
Процедура ВыполнитьОбновлениеТекущейОбластиДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы();
	
	ПараметрыБлокировки = СоединенияИБ.ПолучитьБлокировкуСеансовОбластиДанных();
	Если НЕ ПараметрыБлокировки.Установлена Тогда
		Возврат;
	КонецЕсли;
	ПараметрыБлокировки.Установлена = Ложь;
	СоединенияИБ.УстановитьБлокировкуСеансовОбластиДанных(ПараметрыБлокировки);
	
КонецПроцедуры

// Выбирает все области данных с неакутальными версиями
// и при необходимости формирует фоновые задания по обновлению
// версии в них.
//
// Параметры:
// БлокироватьОбласти - Булево - устанавливать блокировку сеансов областей данных
//  на время обновления областей
//
Процедура ЗапланироватьОбновлениеОбластейДанных(Знач БлокироватьОбласти = Истина, Знач СообщениеБлокировки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СообщениеБлокировки) Тогда
		СообщениеБлокировки = Константы.СообщениеБлокировкиПриОбновленииКонфигурации.Получить();
		Если ПустаяСтрока(СообщениеБлокировки) Тогда
			СообщениеБлокировки = НСтр("ru = 'Система заблокирована для выполнения обновления.'");
		КонецЕсли;
	КонецЕсли;
	ПараметрыБлокировки = СоединенияИБ.НовыеПараметрыБлокировкиСоединений();
	ПараметрыБлокировки.Начало = ТекущаяУниверсальнаяДата();
	ПараметрыБлокировки.Сообщение = СообщениеБлокировки;
	ПараметрыБлокировки.Установлена = Истина;
	ПараметрыБлокировки.Эксклюзивная = Истина;
	
	ВерсияМетаданных = Метаданные.Версия;
	Если ПустаяСтрока(ВерсияМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияОбщихДанных = ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя, Истина);
	Если ОбновлениеИнформационнойБазы.НеобходимоВыполнитьОбновление(ВерсияМетаданных, ВерсияОбщихДанных) Тогда
		// Не выполнено обновление общих данных смысла планировать
		// обновление областей нет
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбластиДанных.ОбластьДанных КАК ОбластьДанных
	|ИЗ
	|	РегистрСведений.ОбластиДанных КАК ОбластиДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	|		ПО ОбластиДанных.ОбластьДанных = ВерсииПодсистем.ОбластьДанных
	|			И (ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РейтингАктивностиОбластейДанных КАК РейтингАктивностиОбластейДанных
	|		ПО ОбластиДанных.ОбластьДанных = РейтингАктивностиОбластейДанных.ОбластьДанных
	|ГДЕ
	|	ОбластиДанных.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбластейДанных.Используется))
	|	И (ВерсииПодсистем.ОбластьДанных ЕСТЬ NULL 
	|			ИЛИ ВерсииПодсистем.Версия <> &Версия)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕСТЬNULL(РейтингАктивностиОбластейДанных.Рейтинг, 9999999),
	|	ОбластьДанных";
	Запрос.УстановитьПараметр("ИмяПодсистемы", Метаданные.Имя);
	Запрос.УстановитьПараметр("Версия", ВерсияМетаданных);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда // Предварительное чтение, возможно с проявлениями грязного чтения
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	1
	|ИЗ
	|	РегистрСведений.ОбластиДанных КАК ОбластиДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииПодсистем КАК ВерсииПодсистем
	|		ПО ОбластиДанных.ОбластьДанных = ВерсииПодсистем.ОбластьДанных
	|			И (ВерсииПодсистем.ИмяПодсистемы = &ИмяПодсистемы)
	|ГДЕ
	|	ОбластиДанных.ОбластьДанных = &ОбластьДанных
	|	И ОбластиДанных.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыОбластейДанных.Используется))
	|	И (ВерсииПодсистем.ОбластьДанных ЕСТЬ NULL 
	|			ИЛИ ВерсииПодсистем.Версия <> &Версия)";
	Запрос.УстановитьПараметр("ИмяПодсистемы", Метаданные.Имя);
	Запрос.УстановитьПараметр("Версия", ВерсияМетаданных);
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначенияКлюча = Новый Структура;
		ЗначенияКлюча.Вставить("ОбластьДанных", Выборка.ОбластьДанных);
		ЗначенияКлюча.Вставить("ИмяПодсистемы", "");
		КлючЗаписи = РегистрыСведений.ВерсииПодсистем.СоздатьКлючЗаписи(ЗначенияКлюча);
		Попытка
			ЗаблокироватьДанныеДляРедактирования(КлючЗаписи);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Запрос.УстановитьПараметр("ОбластьДанных", Выборка.ОбластьДанных);
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВерсииПодсистем");
			ЭлементБлокировки.УстановитьЗначение("ОбластьДанных", Выборка.ОбластьДанных);
			ЭлементБлокировки.УстановитьЗначение("ИмяПодсистемы", Метаданные.Имя);
			Блокировка.Заблокировать();
			
			Результат = Запрос.Выполнить();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			РазблокироватьДанныеДляРедактирования(КлючЗаписи);
			ВызватьИсключение;
		КонецПопытки;
		Если Результат.Пустой() Тогда
			РазблокироватьДанныеДляРедактирования(КлючЗаписи);
			Продолжить;
		КонецЕсли;
		
		ОтборЗадания = Новый Структура;
		ОтборЗадания.Вставить("ИмяМетода", "ОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса.ВыполнитьОбновлениеТекущейОбластиДанных");
		ОтборЗадания.Вставить("Ключ"     , "1");
		ЗапланированноеЗадание = ОчередьЗаданий.ПолучитьЗадание(ОтборЗадания, Выборка.ОбластьДанных);
		Если ЗапланированноеЗадание <> Неопределено Тогда
			РазблокироватьДанныеДляРедактирования(КлючЗаписи);
			Продолжить;
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(КлючЗаписи);
		
		ОчередьЗаданий.ЗапланироватьВыполнениеЗадания(
			"ОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса.ВыполнитьОбновлениеТекущейОбластиДанных",, "1", Истина, Выборка.ОбластьДанных);
		
		Если БлокироватьОбласти Тогда
			ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Выборка.ОбластьДанных);
			СоединенияИБ.УстановитьБлокировкуСеансовОбластиДанных(ПараметрыБлокировки, Ложь);
			ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик регламентного задания ОбновлениеОбластейДанных
// Выбирает все области данных с неакутальными версиями
// и при необходимости формирует фоновые задания ОбновлениеИб
// в них.
//
Процедура ОбновлениеОбластейДанных() Экспорт
	
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	// Если выполняется в регламентном задании, то переходим безусловно в привилегированный режим.
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ЗапланироватьОбновлениеОбластейДанных(Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.Процедура = "ОбновлениеИнформационнойБазыСлужебныйВМоделиСервиса.ЗапланироватьОбновлениеОбластейДанных";
		Обработчик.ОбщиеДанные = Истина;
	КонецЕсли;
	
КонецПроцедуры
